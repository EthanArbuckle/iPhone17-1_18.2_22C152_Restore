void qmi::Client::send(uint64_t a1, uint64_t a2)
{
  qmi::Client::State::send(*(void *)(a1 + 16), a2);
}

void __destroy_helper_block_e8_32r(uint64_t a1)
{
}

uint64_t __copy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrI19ATCSRouterIPCDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN3qmi11ClientProxy5StateEEE(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __copy_helper_block_e8_32r(uint64_t a1, uint64_t a2)
{
}

void ___ZN3qmi11ClientProxy5State18handleMessage_syncERKN3xpc4dictE_block_invoke(uint64_t a1)
{
}

uint64_t __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN3qmi11ClientProxy5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrI19ATCSRouterIPCDriverEE(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __copy_helper_block_e8_32b40c22_ZTSN8dispatch6sourceE(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 7);
  v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
  }
}

xpc_object_t __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  xpc_object_t result = xpc_null_create();
  *(void *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void *__copy_helper_block_e8_32c24_ZTSNSt3__18weak_ptrIvEE56c60_ZTSKN8dispatch5blockIU13block_pointerFvRK13QMIServiceMsgEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t result = (void *)a2[7];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_32c24_ZTSNSt3__18weak_ptrIvEE56c60_ZTSKN8dispatch5blockIU13block_pointerFvRK13QMIServiceMsgEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void dispatch::async<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0,std::default_delete<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
  {
    uint64_t v3 = 0;
LABEL_6:
    BOOL v4 = 0;
    if (!*((unsigned char *)a1 + 32)) {
      goto LABEL_8;
    }
LABEL_7:
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    goto LABEL_6;
  }
  BOOL v4 = a1[2] != 0;
  if (*((unsigned char *)a1 + 32)) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v5 = a1[1];
  if (v5) {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, *a1);
  }
LABEL_10:
  uint64_t v6 = *a1;
  int add = atomic_fetch_add((atomic_uint *volatile)(*a1 + 8), 0xFFFFFFFF);
  if (add <= 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
  }
  else if (v6 && add == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  v8 = (std::__shared_weak_count *)a1[3];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  v9 = (const void *)a1[1];
  if (v9) {
    _Block_release(v9);
  }

  operator delete(a1);
}

void sub_1A10C8CC0(_Unwind_Exception *a1)
{
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  BOOL v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (const void *)v1[1];
  if (v5) {
    _Block_release(v5);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32b40c22_ZTSN8dispatch6sourceE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);

  _Block_object_dispose(v3, 7);
}

uint64_t ATCSRouterIPCDriver::handleReceive(uint64_t a1, int a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_4, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_4))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<ATCSRouterIPCDriver>::~weak_ptr, &qword_1EBBDD8F0, &dword_1A10C7000);
    __cxa_guard_release(&_MergedGlobals_4);
  }
  if (!qword_1EBBDD8F8) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1EBBDD8F8);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (qword_1EBBDD8F0)
  {
    v7 = *(NSObject **)(qword_1EBBDD8F0 + 32);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    v10[2] = ___ZN19ATCSRouterIPCDriver13handleReceiveEP24mav_router_context_tag_t20mav_router_channel_tPvS3__block_invoke;
    v10[3] = &__block_descriptor_tmp_7;
    v10[4] = qword_1EBBDD8F0;
    v11 = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    int v13 = a2;
    uint64_t v12 = a3;
    dispatch_async(v7, v10);
    v8 = v11;
    if (v11)
    {
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return 0;
}

QMIServiceMsg *QMIServiceMsg::create(QMIServiceMsg *this, const qmi::MutableMessageBase *a2)
{
  memset(__p, 170, sizeof(__p));
  qmi::MutableMessageBase::serialize((uint64_t *)__p, this);
  uint64_t v2 = (unsigned __int16 *)__p[0];
  __int16 v3 = (__int16)__p[1];
  BOOL v4 = (QMIServiceMsg *)operator new(0x58uLL);
  QMIServiceMsg::QMIServiceMsg(v4, v2, (unsigned __int16)(v3 - (_WORD)v2), 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1A10C8FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::State::handleMessage(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  xpc_object_t xint = xpc_null_create();
  xpc_object_t value = xpc_dictionary_get_value(*a2, "sim");
  xpc_object_t v5 = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_object_t v6 = xint;
  xpc_object_t xint = v5;
  uint64_t v7 = MEMORY[0x1A622CC50](v5);
  xpc_release(v6);
  uint64_t v8 = MEMORY[0x1E4F145D8];
  if (v7 != MEMORY[0x1E4F145D8])
  {
    unsigned __int8 v9 = xpc::dyn_cast_or_default();
    v10 = *(NSObject **)(a1 + 40);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v9 - 1 > 1)
    {
      if (v11)
      {
        v14 = (void *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          v14 = (void *)*v14;
        }
        *(_DWORD *)buf = 136315394;
        v54 = v14;
        __int16 v55 = 1024;
        int v56 = v9;
        _os_log_impl(&dword_1A10C7000, v10, OS_LOG_TYPE_DEFAULT, "#E [%s]: SimSlot not changed due to illegal value of %d", buf, 0x12u);
      }
    }
    else
    {
      if (v11)
      {
        uint64_t v12 = (void *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        int v13 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)buf = 136315650;
        v54 = v12;
        __int16 v55 = 1024;
        int v56 = v13;
        __int16 v57 = 1024;
        int v58 = v9;
        _os_log_impl(&dword_1A10C7000, v10, OS_LOG_TYPE_DEFAULT, "#I [%s]: Changing sim slot from %d to %d", buf, 0x18u);
      }
      *(unsigned char *)(a1 + 184) = v9;
    }
  }
  xpc_object_t v15 = xpc_dictionary_get_value(*a2, "send_qmi_message");
  xpc_object_t v16 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_object_t v17 = xint;
  xpc_object_t xint = v16;
  uint64_t v18 = MEMORY[0x1A622CC50](v16);
  xpc_release(v17);
  if (v18 == v8)
  {
    xpc_object_t v20 = xpc_dictionary_get_value(*a2, "low_power");
    xpc_object_t v21 = v20;
    if (v20) {
      xpc_retain(v20);
    }
    else {
      xpc_object_t v21 = xpc_null_create();
    }
    xpc_object_t v22 = xint;
    xpc_object_t xint = v21;
    uint64_t v23 = MEMORY[0x1A622CC50](v21);
    xpc_release(v22);
    if (v23 != v8) {
      *(unsigned char *)(a1 + 81) = xpc::dyn_cast_or_default();
    }
    xpc_object_t v24 = xpc_dictionary_get_value(*a2, "low_power_reply");
    xpc_object_t v25 = v24;
    if (v24) {
      xpc_retain(v24);
    }
    else {
      xpc_object_t v25 = xpc_null_create();
    }
    xpc_object_t v26 = xint;
    xpc_object_t xint = v25;
    uint64_t v27 = MEMORY[0x1A622CC50](v25);
    xpc_release(v26);
    if (v27 != v8 && *(_DWORD *)(a1 + 76) == 4)
    {
      *(_DWORD *)(a1 + 76) = 5;
      qmi::ClientProxy::State::checkIfLowPower_sync((qmi::ClientProxy::State *)a1);
    }
    xpc_object_t v28 = xpc_dictionary_get_value(*a2, "exit_low_power");
    xpc_object_t v29 = v28;
    if (v28) {
      xpc_retain(v28);
    }
    else {
      xpc_object_t v29 = xpc_null_create();
    }
    xpc_object_t v30 = xint;
    xpc_object_t xint = v29;
    uint64_t v31 = MEMORY[0x1A622CC50](v29);
    xpc_release(v30);
    if (v31 != v8) {
      *(unsigned char *)(a1 + 80) = xpc::dyn_cast_or_default();
    }
    xpc_object_t v32 = xpc_dictionary_get_value(*a2, "status");
    xpc_object_t v33 = v32;
    if (v32) {
      xpc_retain(v32);
    }
    else {
      xpc_object_t v33 = xpc_null_create();
    }
    xpc_object_t v34 = xint;
    xpc_object_t xint = v33;
    uint64_t v35 = MEMORY[0x1A622CC50](v33);
    xpc_release(v34);
    if (v35 != v8)
    {
      unsigned int v36 = xpc_int64_get_value(xint);
      qmi::ClientProxy::State::handleStatus_sync(a1, v36);
    }
    xpc_object_t v37 = xpc_dictionary_get_value(*a2, "send_window");
    xpc_object_t v38 = v37;
    if (v37) {
      xpc_retain(v37);
    }
    else {
      xpc_object_t v38 = xpc_null_create();
    }
    xpc_object_t v39 = xint;
    xpc_object_t xint = v38;
    uint64_t v40 = MEMORY[0x1A622CC50](v38);
    xpc_release(v39);
    if (v40 != v8)
    {
      int v41 = xpc::dyn_cast_or_default();
      v42 = *(NSObject **)(a1 + 40);
      BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((v41 - 1) > 4)
      {
        if (v43)
        {
          v46 = (void *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0) {
            v46 = (void *)*v46;
          }
          *(_DWORD *)buf = 136315394;
          v54 = v46;
          __int16 v55 = 1024;
          int v56 = v41;
          _os_log_impl(&dword_1A10C7000, v42, OS_LOG_TYPE_DEFAULT, "#E [%s]: Send window not changed due to illegal value of %d", buf, 0x12u);
        }
      }
      else
      {
        if (v43)
        {
          v44 = (void *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0) {
            v44 = (void *)*v44;
          }
          int v45 = *(_DWORD *)(a1 + 84);
          *(_DWORD *)buf = 136315650;
          v54 = v44;
          __int16 v55 = 1024;
          int v56 = v45;
          __int16 v57 = 1024;
          int v58 = v41;
          _os_log_impl(&dword_1A10C7000, v42, OS_LOG_TYPE_DEFAULT, "#I [%s]: Changing send window from %d to %d", buf, 0x18u);
        }
        *(_DWORD *)(a1 + 84) = v41;
      }
    }
    xpc_object_t v47 = xpc_dictionary_get_value(*a2, "remote_log_bytes");
    xpc_object_t v48 = v47;
    if (v47) {
      xpc_retain(v47);
    }
    else {
      xpc_object_t v48 = xpc_null_create();
    }
    xpc_object_t v49 = xint;
    xpc_object_t xint = v48;
    uint64_t v50 = MEMORY[0x1A622CC50](v48);
    xpc_release(v49);
    if (v50 != v8)
    {
      uint64_t v51 = xpc::dyn_cast_or_default();
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v51);
    }
    qmi::ClientProxy::State::handleIndWakeChange_sync(a1, a2);
  }
  else
  {
    unsigned int v19 = *(_DWORD *)(a1 + 76);
    if (v19 <= 7)
    {
      if (((1 << v19) & 0xF1) != 0) {
        qmi::ClientProxy::State::handleSend_sync(a1, a2, &xint);
      }
      else {
        qmi::ClientProxy::State::handleSendNotReady_sync(a1, a2);
      }
    }
  }
  xpc_release(xint);
}

void sub_1A10C9590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void qmi::ClientProxy::State::handleSend_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  xpc_data_get_bytes_ptr(*a3);
  xpc_data_get_length(*a3);
  qmi::createRequest();
  uint64_t v7 = *(void *)object;
  xpc_object_t v6 = *(std::__shared_weak_count **)&object[8];
  xpc_object_t value = xpc_dictionary_get_value(*a2, "txid");
  *(void *)object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)object = xpc_null_create();
  }
  __int16 v9 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)object);
  *(_WORD *)(v7 + 26) = v9;
  xpc_object_t v10 = xpc_dictionary_get_value(*a2, "send_timeout_ms");
  *(void *)object = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *(void *)object = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)object);
  uint64_t v12 = *(void *)(a1 + 152);
  uint64_t v13 = *(void *)(a1 + 144);
  if (v12 == v13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = 16 * (v12 - v13) - 1;
  }
  uint64_t v15 = *(void *)(a1 + 176);
  unint64_t v16 = v15 + *(void *)(a1 + 168);
  if (v14 == v16)
  {
    std::deque<qmi::ClientProxy::State::Transaction>::__add_back_capacity((void *)(a1 + 136));
    uint64_t v13 = *(void *)(a1 + 144);
    uint64_t v15 = *(void *)(a1 + 176);
    unint64_t v16 = v15 + *(void *)(a1 + 168);
  }
  uint64_t v17 = *(void *)(v13 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F);
  *(_DWORD *)uint64_t v17 = v11;
  *(void *)(v17 + 8) = 0;
  *(void *)(v17 + 16) = v7;
  *(void *)(v17 + 24) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = *(void *)(a1 + 176);
  }
  *(void *)(a1 + 176) = v15 + 1;
  qmi::ClientProxy::State::sendIfPossible_sync((qmi::ClientProxy::State *)a1);
  uint64_t v18 = *(void *)(a1 + 176);
  if (!v18 || (unsigned int v19 = *(NSObject **)(a1 + 40), !os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)))
  {
    if (!v6) {
      return;
    }
    goto LABEL_17;
  }
  xpc_object_t v20 = (void *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    xpc_object_t v20 = (void *)*v20;
  }
  int v21 = *(unsigned __int8 *)(a1 + 72);
  int v22 = *(unsigned __int16 *)(v7 + 26);
  int v23 = *(unsigned __int16 *)(v7 + 24);
  *(_DWORD *)object = 136316162;
  *(void *)&object[4] = v20;
  *(_WORD *)&object[12] = 1024;
  *(_DWORD *)&object[14] = v21;
  __int16 v25 = 1024;
  int v26 = v22;
  __int16 v27 = 1024;
  int v28 = v23;
  __int16 v29 = 2048;
  uint64_t v30 = v18;
  _os_log_debug_impl(&dword_1A10C7000, v19, OS_LOG_TYPE_DEBUG, "#D [%s]: Message pended for svc=0x%x (txid=%u, msgId=0x%04x); pending=%zu",
    object,
    0x28u);
  if (v6)
  {
LABEL_17:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A10C9958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<qmi::ClientProxy::State::Transaction>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    a1[4] = v4;
    xpc_object_t v6 = (void *)a1[1];
    xpc_object_t v5 = (char *)a1[2];
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_94:
      *(void *)xpc_object_t v5 = v8;
      goto LABEL_95;
    }
    __int16 v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      uint64_t v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1) {
        uint64_t v11 = v10 + 1;
      }
      else {
        uint64_t v11 = v10 + 2;
      }
      uint64_t v12 = v11 >> 1;
      uint64_t v13 = -v12;
      uint64_t v14 = &v7[-8 * v12];
      int64_t v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        uint64_t v7 = (char *)a1[1];
      }
      xpc_object_t v5 = &v14[v15];
      unint64_t v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    unint64_t v35 = (v5 - v9) >> 2;
    if (v5 == v9) {
      unint64_t v35 = 1;
    }
    if (v35 >> 61) {
      goto LABEL_111;
    }
    unint64_t v36 = v35 >> 2;
    uint64_t v37 = 8 * v35;
    xpc_object_t v38 = (char *)operator new(8 * v35);
    xpc_object_t v39 = &v38[8 * v36];
    int64_t v41 = v5 - v7;
    BOOL v40 = v5 == v7;
    xpc_object_t v5 = v39;
    if (!v40)
    {
      xpc_object_t v5 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v42 = v41 - 8;
      if ((unint64_t)(v41 - 8) >= 0x38)
      {
        v92 = &v38[8 * v36];
        BOOL v43 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          uint64_t v93 = (v42 >> 3) + 1;
          uint64_t v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v43 = &v39[v94];
          v7 += v94;
          v95 = (long long *)(v6 + 3);
          v96 = v92 + 16;
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            _OWORD *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        BOOL v43 = &v38[8 * v36];
      }
      do
      {
        uint64_t v99 = *(void *)v7;
        v7 += 8;
        *(void *)BOOL v43 = v99;
        v43 += 8;
      }
      while (v43 != v5);
    }
LABEL_91:
    *a1 = v38;
    a1[1] = v39;
    a1[2] = v5;
    a1[3] = &v38[v37];
    if (!v9) {
      goto LABEL_94;
    }
    v100 = v9;
LABEL_93:
    operator delete(v100);
    xpc_object_t v5 = (char *)a1[2];
    goto LABEL_94;
  }
  uint64_t v18 = (char *)a1[2];
  uint64_t v17 = (char *)a1[3];
  xpc_object_t v20 = (char *)*a1;
  unsigned int v19 = (char *)a1[1];
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    xpc_object_t v24 = operator new(0x1000uLL);
    __int16 v25 = v24;
    if (v17 != v18)
    {
      *(void *)uint64_t v18 = v24;
LABEL_95:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      unint64_t v69 = (v17 - v19) >> 2;
      if (v18 == v19) {
        unint64_t v69 = 1;
      }
      if (v69 >> 61) {
        goto LABEL_111;
      }
      unint64_t v70 = (v69 + 3) >> 2;
      uint64_t v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v44 = &v72[8 * v70];
      v73 = v44;
      if (v18 != v19)
      {
        v73 = &v44[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38) {
          goto LABEL_115;
        }
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20) {
          goto LABEL_115;
        }
        unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v44[v78];
        v75 = &v19[v78];
        v79 = (long long *)(v19 + 16);
        v80 = v76 + 16;
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          _OWORD *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            uint64_t v83 = *(void *)v75;
            v75 += 8;
            *(void *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v44;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v44 = (char *)a1[1];
      }
    }
    else
    {
      v44 = v19;
    }
    *((void *)v44 - 1) = v25;
    v84 = (char *)a1[1];
    xpc_object_t v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    uint64_t v8 = *((void *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3]) {
      goto LABEL_94;
    }
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      uint64_t v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1) {
        uint64_t v87 = v86 + 1;
      }
      else {
        uint64_t v87 = v86 + 2;
      }
      uint64_t v88 = v87 >> 1;
      uint64_t v89 = -v88;
      v90 = &v84[-8 * v88];
      int64_t v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      xpc_object_t v5 = &v90[v91];
      unint64_t v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_94;
    }
    unint64_t v101 = (v5 - v85) >> 2;
    if (v5 == v85) {
      unint64_t v101 = 1;
    }
    if (!(v101 >> 61))
    {
      unint64_t v102 = v101 >> 2;
      uint64_t v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      int64_t v106 = v5 - v84;
      BOOL v40 = v5 == v84;
      xpc_object_t v5 = v105;
      if (!v40)
      {
        xpc_object_t v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            uint64_t v110 = (v107 >> 3) + 1;
            uint64_t v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (long long *)(v84 + 16);
            v114 = v109 + 16;
            uint64_t v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              _OWORD *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_108;
            }
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          uint64_t v117 = *(void *)v84;
          v84 += 8;
          *(void *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_108:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85) {
        goto LABEL_94;
      }
      v100 = v85;
      goto LABEL_93;
    }
LABEL_111:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_111;
  }
  int v28 = (char *)operator new(8 * v27);
  __int16 v29 = operator new(0x1000uLL);
  uint64_t v30 = &v28[8 * v22];
  uint64_t v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    xpc_object_t v33 = v29;
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v45 = 1;
      }
      else {
        unint64_t v45 = v21 >> 2;
      }
      if (v45 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v30 = (char *)operator new(8 * v45);
      uint64_t v31 = &v30[8 * v45];
      operator delete(v28);
      v46 = (char *)a1[1];
      uint64_t v18 = (char *)a1[2];
      int v28 = v30;
      *(void *)uint64_t v30 = v33;
      xpc_object_t v32 = v30 + 8;
      if (v18 == v46) {
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v34 = v22 + 2;
      if (v22 >= -1) {
        unint64_t v34 = v22 + 1;
      }
      v30 -= 8 * (v34 >> 1);
      *(void *)uint64_t v30 = v29;
      xpc_object_t v32 = v30 + 8;
      if (v18 == v19) {
        goto LABEL_40;
      }
    }
    goto LABEL_46;
  }
  *(void *)uint64_t v30 = v29;
  xpc_object_t v32 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_46:
      if (v30 == v28)
      {
        if (v32 >= v31)
        {
          if (v31 == v28) {
            unint64_t v53 = 1;
          }
          else {
            unint64_t v53 = (v31 - v28) >> 2;
          }
          if (v53 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v54 = (char *)operator new(8 * v53);
          __int16 v55 = v54;
          unint64_t v56 = (v53 + 3) >> 2;
          uint64_t v30 = &v54[8 * v56];
          int64_t v57 = v32 - v28;
          BOOL v40 = v32 == v28;
          xpc_object_t v32 = v30;
          if (!v40)
          {
            xpc_object_t v32 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v58 = v57 - 8;
            uint64_t v59 = &v54[8 * v56];
            v60 = v28;
            if (v58 < 0x38) {
              goto LABEL_116;
            }
            uint64_t v61 = 8 * v56;
            uint64_t v59 = &v54[8 * v56];
            v60 = v28;
            if ((unint64_t)(v59 - v28) < 0x20) {
              goto LABEL_116;
            }
            uint64_t v62 = (v58 >> 3) + 1;
            uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v59 = &v30[v63];
            v60 = &v28[v63];
            v64 = (long long *)(v28 + 16);
            v65 = &v54[v61 + 16];
            uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_116:
              do
              {
                uint64_t v68 = *(void *)v60;
                v60 += 8;
                *(void *)uint64_t v59 = v68;
                v59 += 8;
              }
              while (v59 != v32);
            }
          }
          uint64_t v31 = &v54[8 * v53];
          operator delete(v28);
          int v28 = v55;
        }
        else
        {
          uint64_t v49 = (v31 - v32) >> 3;
          if (v49 >= -1) {
            uint64_t v50 = v49 + 1;
          }
          else {
            uint64_t v50 = v49 + 2;
          }
          uint64_t v51 = v50 >> 1;
          uint64_t v30 = &v28[8 * (v50 >> 1)];
          v52 = v28;
          if (v32 != v28)
          {
            memmove(v30, v28, v32 - v28);
            v52 = v32;
          }
          xpc_object_t v32 = (char *)v52 + 8 * v51;
        }
      }
      uint64_t v48 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != (char *)a1[1]);
  }
LABEL_40:
  xpc_object_t v47 = (char *)*a1;
  *a1 = v28;
  a1[1] = v30;
  a1[2] = v32;
  a1[3] = v31;
  if (v47)
  {
    operator delete(v47);
  }
}

void sub_1A10CA040(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN19ATCSRouterIPCDriver16handleWriteReadyEP22ATCSDispatcherCallbackPv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    size_t v3 = *(void *)(v2 + 56);
    unint64_t v4 = malloc(v3);
    int v5 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v1 + 24))(v1, v4, v3);
    if (v5 >= 1)
    {
      xpc_object_t v6 = (void *)*MEMORY[0x1E4F143F0];
      while (!dispatch_data_create(v4, v5, *(dispatch_queue_t *)(v2 + 32), v6))
      {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0xBF, "data", "!=", "NULL", 0, 0);
        unsigned int v8 = mav_router_service_transmit();
        if (v8) {
          goto LABEL_9;
        }
LABEL_4:
        size_t v7 = *(void *)(v2 + 56);
        unint64_t v4 = malloc(v7);
        int v5 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v1 + 24))(v1, v4, v7);
        if (v5 < 1) {
          goto LABEL_10;
        }
      }
      unsigned int v8 = mav_router_service_transmit();
      if (!v8) {
        goto LABEL_4;
      }
LABEL_9:
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0xC5, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v8, 0);
      goto LABEL_4;
    }
LABEL_10:
    free(v4);
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0xAE, "callback", "!=", "NULL", 0, 0);
  }
}

uint64_t QMux::State::getWriteData(QMux::State *this, unsigned __int8 *a2, int a3)
{
  int v7 = a3;
  v6[0] = this;
  v6[1] = &v8;
  v6[2] = &v7;
  unsigned int v8 = a2;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_12getWriteDataEPhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v9[3] = &__block_descriptor_tmp_165;
  v9[4] = (char *)this + 8;
  v9[5] = v6;
  uint64_t v10 = v9;
  unint64_t v4 = (char *)this + 24;
  size_t v3 = *((void *)this + 3);
  if (*((void *)v4 + 1))
  {
    unsigned int v17 = -1431655766;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v12 = 0x40000000;
    uint64_t v13 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFivEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v14 = &__block_descriptor_tmp_167;
    int64_t v15 = &v17;
    unint64_t v16 = &v10;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    unsigned int v17 = -1431655766;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v12 = 0x40000000;
    uint64_t v13 = ___ZN8dispatch9sync_implIRU13block_pointerFivEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v14 = &__block_descriptor_tmp_166;
    int64_t v15 = &v17;
    unint64_t v16 = &v10;
    dispatch_sync(v3, &block);
  }
  return v17;
}

void ___ZNK3ctu15XpcServerHelper12acceptClientIN3qmi6Client5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(uint64_t a1, xpc_object_t a2)
{
  size_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    int v5 = std::__shared_weak_count::lock(v3);
    unint64_t v16 = v5;
    if (v5)
    {
      xpc_object_t v6 = v5;
      int v7 = *(void **)(a1 + 32);
      object[1] = v7;
      if (!v7) {
        goto LABEL_23;
      }
      uint64_t v8 = MEMORY[0x1A622CC50](a2);
      uint64_t v9 = MEMORY[0x1E4F14590];
      if (v8 != MEMORY[0x1E4F14590])
      {
        if (v8 != MEMORY[0x1E4F145A8]) {
          goto LABEL_23;
        }
        xpc_object_t v10 = *(xpc_object_t *)(a1 + 48);
        if (v10)
        {
          xpc_retain(v10);
          object[0] = a2;
          if (a2)
          {
LABEL_8:
            xpc_retain(a2);
LABEL_19:
            qmi::Client::State::handleClientError((uint64_t)v7, v11, object);
            xpc_release(a2);
            xpc_release(v10);
LABEL_23:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        else
        {
          xpc_object_t v10 = xpc_null_create();
          object[0] = a2;
          if (a2) {
            goto LABEL_8;
          }
        }
        a2 = xpc_null_create();
        object[0] = a2;
        goto LABEL_19;
      }
      xpc_object_t v12 = *(xpc_object_t *)(a1 + 48);
      if (v12)
      {
        xpc_retain(*(xpc_object_t *)(a1 + 48));
        if (a2)
        {
LABEL_11:
          xpc_retain(a2);
          object[0] = a2;
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
        if (a2) {
          goto LABEL_11;
        }
      }
      a2 = xpc_null_create();
      object[0] = a2;
      if (!a2)
      {
        xpc_object_t v13 = xpc_null_create();
        a2 = 0;
        goto LABEL_21;
      }
LABEL_14:
      if (MEMORY[0x1A622CC50](a2) == v9)
      {
        xpc_retain(a2);
        goto LABEL_22;
      }
      xpc_object_t v13 = xpc_null_create();
LABEL_21:
      object[0] = v13;
LABEL_22:
      qmi::Client::State::handleClientMessage((uint64_t)v7, v14, object);
      xpc_release(object[0]);
      object[0] = 0;
      xpc_release(a2);
      xpc_release(v12);
      xpc_object_t v6 = v16;
      if (!v16) {
        return;
      }
      goto LABEL_23;
    }
  }
}

void sub_1A10CA5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(v11);
  xpc_release(v12);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void dispatch::async<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(void *)a1;
  xpc_object_t v3 = xpc_null_create();
  qmi::Client::State::handleClientMessage(v2, v4, (xpc_object_t *)a1 + 1);
  xpc_release(v3);
  xpc_release(*((xpc_object_t *)a1 + 1));

  operator delete(a1);
}

void sub_1A10CA6B8(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void qmi::Client::State::handleClientMessage(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v5 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_2;
  }
  xpc_object_t v10 = (void *)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    xpc_object_t v10 = (void *)*v10;
  }
  uint64_t v11 = (char *)MEMORY[0x1A622CB80](*a3);
  memset(__dst, 170, sizeof(__dst));
  size_t v12 = strlen(v11);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  xpc_object_t v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    __dst[2] = (void *)(v16 | 0x8000000000000000);
    __dst[0] = v14;
  }
  else
  {
    HIBYTE(__dst[2]) = v12;
    uint64_t v14 = __dst;
    if (!v12) {
      goto LABEL_23;
    }
  }
  memcpy(v14, v11, (size_t)v13);
LABEL_23:
  *((unsigned char *)v13 + (void)v14) = 0;
  free(v11);
  unsigned int v17 = __dst;
  if (SHIBYTE(__dst[2]) < 0) {
    unsigned int v17 = (void **)__dst[0];
  }
  *(_DWORD *)buf = 136315394;
  xpc_object_t v20 = v10;
  __int16 v21 = 2080;
  uint64_t v22 = v17;
  _os_log_debug_impl(&dword_1A10C7000, v5, OS_LOG_TYPE_DEBUG, "#D [%s] *** Client got message: %s", buf, 0x16u);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
LABEL_2:
  int64_t int64 = xpc_dictionary_get_int64(*a3, "status");
  if (int64) {
    qmi::Client::State::handleStatus_sync(a1, a3, int64);
  }
  xpc_object_t value = xpc_dictionary_get_value(*a3, "resp_qmi_message");
  if (value) {
    qmi::Client::State::handleResponse_sync(a1, a3, value);
  }
  xpc_object_t v9 = xpc_dictionary_get_value(*a3, "ind_qmi_message");
  if (v9) {
    qmi::Client::State::handleIndication_sync(a1, v8, v9);
  }
  if (xpc_dictionary_get_BOOL(*a3, "low_power")) {
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a1 + 32))(a1, a3);
  }
  if (xpc_dictionary_get_BOOL(*a3, "exit_low_power")) {
    qmi::Client::State::handleExitLowPower_sync(a1);
  }
}

void qmi::Client::State::handleIndication_sync(uint64_t a1, int a2, xpc_object_t xdata)
{
  size_t length = xpc_data_get_length(xdata);
  if (length >> 16) {
    return;
  }
  unsigned __int16 v6 = length;
  bytes_ptr = (unsigned __int16 *)xpc_data_get_bytes_ptr(xdata);
  int v8 = (atomic_uint *)operator new(0x58uLL);
  QMIServiceMsg::QMIServiceMsg((QMIServiceMsg *)v8, bytes_ptr, v6, 0);
  signed int add_explicit = atomic_fetch_add_explicit(v8 + 2, 1u, memory_order_relaxed);
  if (add_explicit < 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)add_explicit, 0);
    uint64_t v10 = a1 + 208;
    uint64_t v11 = *(void *)(a1 + 208);
    if (!v11) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v10 = a1 + 208;
    uint64_t v11 = *(void *)(a1 + 208);
    if (!v11)
    {
LABEL_16:
      int add = atomic_fetch_add(v8 + 2, 0xFFFFFFFF);
      if (add <= 0)
      {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
      }
      else if (add == 1)
      {
        uint64_t v18 = *(void (**)(atomic_uint *))(*(void *)v8 + 8);
        v18(v8);
      }
      return;
    }
  }
  unsigned int v12 = *((unsigned __int16 *)v8 + 6);
  uint64_t v13 = v10;
  do
  {
    unsigned int v14 = *(unsigned __int16 *)(v11 + 32);
    BOOL v15 = v14 >= v12;
    if (v14 >= v12) {
      uint64_t v16 = (uint64_t *)v11;
    }
    else {
      uint64_t v16 = (uint64_t *)(v11 + 8);
    }
    if (v15) {
      uint64_t v13 = v11;
    }
    uint64_t v11 = *v16;
  }
  while (*v16);
  if (v13 == v10 || v12 < *(unsigned __int16 *)(v13 + 32)) {
    goto LABEL_16;
  }
  unsigned int v19 = *(const void **)(v13 + 40);
  if (v19)
  {
    xpc_object_t v20 = _Block_copy(v19);
    uint64_t v21 = *(void *)(a1 + 264);
    uint64_t v22 = *(std::__shared_weak_count **)(a1 + 272);
    if (!v22) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  xpc_object_t v20 = 0;
  uint64_t v21 = *(void *)(a1 + 264);
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 272);
  if (v22) {
LABEL_26:
  }
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_27:
  char v23 = *(unsigned char *)(a1 + 256);
  xpc_object_t v24 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN3qmi6Client5State21handleIndication_syncERKN3xpc4dictEPv_block_invoke;
  block[3] = &__block_descriptor_tmp_16;
  block[4] = v21;
  unint64_t v27 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v30 = v23;
  int v28 = v8;
  if (v20)
  {
    aBlock = _Block_copy(v20);
    dispatch_async(v24, block);
    __int16 v25 = aBlock;
    if (!aBlock) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  aBlock = 0;
  dispatch_async(v24, block);
  __int16 v25 = aBlock;
  if (aBlock) {
LABEL_35:
  }
    _Block_release(v25);
LABEL_36:
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v20) {
    _Block_release(v20);
  }
}

void sub_1A10CAC18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void qmi::Client::State::handleResponse_sync(uint64_t a1, xpc_object_t *a2, void *a3)
{
  int64_t int64 = xpc_dictionary_get_int64(*a2, "txid");
  int v8 = *(int **)(a1 + 152);
  int v7 = *(int **)(a1 + 160);
  if (v8 != v7)
  {
    while (int64 != *v8)
    {
      v8 += 6;
      if (v8 == v7) {
        return;
      }
    }
  }
  if (v8 == v7) {
    return;
  }
  if (MEMORY[0x1A622CC50](a3) == MEMORY[0x1E4F14580])
  {
    size_t length = xpc_data_get_length(a3);
    if (!(length >> 16))
    {
      unsigned __int16 v28 = length;
      bytes_ptr = (unsigned __int16 *)xpc_data_get_bytes_ptr(a3);
      uint64_t v11 = (char *)operator new(0x58uLL);
      QMIServiceMsg::QMIServiceMsg((QMIServiceMsg *)v11, bytes_ptr, v28, 1);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (MEMORY[0x1A622CC50](a3) != MEMORY[0x1E4F145D8])
  {
LABEL_10:
    __int16 v13 = *(_WORD *)(*((void *)v8 + 1) + 12);
    uint64_t v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 2) = 0;
    *(void *)uint64_t v11 = &unk_1EF43DE48;
    *((_WORD *)v11 + 6) = v13;
    *(void *)(v11 + 14) = 0;
    *(void *)(v11 + 30) = 0;
    *(void *)(v11 + 22) = 0;
    *((_WORD *)v11 + 19) = 0;
    *((_DWORD *)v11 + 10) = 1;
    *((_WORD *)v11 + 22) = 255;
    goto LABEL_11;
  }
  __int16 v9 = xpc_dictionary_get_int64(*a2, "internal_error");
  __int16 v10 = *(_WORD *)(*((void *)v8 + 1) + 12);
  uint64_t v11 = (char *)operator new(0x58uLL);
  *((_DWORD *)v11 + 2) = 0;
  *(void *)uint64_t v11 = &unk_1EF43DE48;
  *((_WORD *)v11 + 6) = v10;
  *(void *)(v11 + 14) = 0;
  *(void *)(v11 + 30) = 0;
  *(void *)(v11 + 22) = 0;
  *((_WORD *)v11 + 19) = 0;
  *((_DWORD *)v11 + 10) = 1;
  *((_WORD *)v11 + 22) = v9;
LABEL_11:
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
LABEL_12:
  qmi::Client::State::postResponseToClient_sync(a1, (uint64_t)v11, (const void **)v8 + 2);
  unsigned int v14 = v8 + 6;
  BOOL v15 = *(int **)(a1 + 160);
  if (v8 + 6 != v15)
  {
    while (1)
    {
      int v16 = *v14;
      uint64_t v18 = *((void *)v14 + 1);
      unsigned int v17 = (const void *)*((void *)v14 + 2);
      if (v17)
      {
        unsigned int v19 = _Block_copy(v17);
        if (v18) {
          goto LABEL_19;
        }
      }
      else
      {
        unsigned int v19 = 0;
        if (v18)
        {
LABEL_19:
          signed int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 1u, memory_order_relaxed);
          if (add_explicit < 0) {
            _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)add_explicit, 0);
          }
        }
      }
      *(v14 - 6) = v16;
      uint64_t v21 = (atomic_uint *)*((void *)v14 - 2);
      uint64_t v22 = (const void *)*((void *)v14 - 1);
      *((void *)v14 - 2) = v18;
      *((void *)v14 - 1) = v19;
      if (v21)
      {
        int add = atomic_fetch_add(v21 + 2, 0xFFFFFFFF);
        if (add <= 0)
        {
          _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
        }
        else if (add == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v21 + 8))(v21);
        }
      }
      if (v22) {
        _Block_release(v22);
      }
      v14 += 6;
      if (v14 == v15)
      {
        int v8 = v14 - 6;
        uint64_t v24 = a1;
        unsigned int v14 = *(int **)(a1 + 160);
        if (v14 == v8) {
          goto LABEL_40;
        }
        goto LABEL_33;
      }
    }
  }
  uint64_t v24 = a1;
  if (v14 == v8) {
    goto LABEL_40;
  }
  do
  {
LABEL_33:
    __int16 v25 = (atomic_uint *)*((void *)v14 - 2);
    if (v25)
    {
      int v26 = atomic_fetch_add(v25 + 2, 0xFFFFFFFF);
      if (v26 <= 0)
      {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v26, 0);
      }
      else if (v26 == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v25 + 8))(v25);
      }
    }
    unint64_t v27 = (const void *)*((void *)v14 - 1);
    if (v27) {
      _Block_release(v27);
    }
    v14 -= 6;
  }
  while (v14 != v8);
LABEL_40:
  *(void *)(v24 + 160) = v8;
}

void sub_1A10CAFF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A10CB014(_Unwind_Exception *exception_object)
{
  if (v1) {
    _Block_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void qmi::Client::State::postResponseToClient_sync(uint64_t a1, uint64_t a2, const void **a3)
{
  signed int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed);
  if (add_explicit < 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)add_explicit, 0);
    int v7 = *(NSObject **)(a1 + 136);
    int v8 = *a3;
    if (*a3)
    {
LABEL_3:
      __int16 v9 = _Block_copy(v8);
      uint64_t v10 = *(void *)(a1 + 264);
      uint64_t v11 = *(void *)(a1 + 272);
      if (!v11) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    int v7 = *(NSObject **)(a1 + 136);
    int v8 = *a3;
    if (*a3) {
      goto LABEL_3;
    }
  }
  __int16 v9 = 0;
  uint64_t v10 = *(void *)(a1 + 264);
  uint64_t v11 = *(void *)(a1 + 272);
  if (v11) {
LABEL_4:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
LABEL_5:
  char v12 = *(unsigned char *)(a1 + 256);
  __int16 v13 = operator new(0x28uLL);
  *__int16 v13 = a2;
  v13[1] = v9;
  v13[2] = v10;
  v13[3] = v11;
  *((unsigned char *)v13 + 32) = v12;

  dispatch_async_f(v7, v13, (dispatch_function_t)dispatch::async<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0,std::default_delete<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0>>)::{lambda(void *)#1}::__invoke);
}

void qmi::Client::State::send(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A622CC50](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  memset(__p, 170, sizeof(__p));
  QMIServiceMsg::serialize(*(QMIServiceMsg **)(a2 + 8), (char **)__p);
  xpc_object_t v6 = xpc_data_create(__p[0], (char *)__p[1] - (char *)__p[0]);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, "send_qmi_message", v6);
  xpc_object_t v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  xpc_object_t v8 = xpc_int64_create(*(unsigned int *)(a2 + 16));
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, "send_timeout_ms", v8);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(const void **)(a2 + 32);
  if (v11)
  {
    char v12 = _Block_copy(v11);
    if (*(void *)(a2 + 24)) {
      goto LABEL_13;
    }
LABEL_19:
    __int16 v13 = 0;
    signed int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
    if ((add_explicit & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  char v12 = 0;
  if (!*(void *)(a2 + 24)) {
    goto LABEL_19;
  }
LABEL_13:
  uint64_t v27 = a1;
  if (*(unsigned char *)(a1 + 280))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 136));
    __int16 v13 = *(_WORD *)(v27 + 146);
    if (((v13 + 1) & 0xFFFE) != 0) {
      __int16 v14 = v13 + 1;
    }
    else {
      __int16 v14 = 1;
    }
    *(_WORD *)(v27 + 146) = v14;
  }
  else
  {
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 0x40000000;
    v29[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS3_4sendERNS2_9SendProxyEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    v29[3] = &__block_descriptor_tmp_45;
    v29[4] = a1 + 8;
    v29[5] = &v27;
    char v30 = v29;
    int v16 = *(NSObject **)(a1 + 24);
    if (*(void *)(a1 + 32))
    {
      __int16 v37 = -21846;
      uint64_t block = MEMORY[0x1E4F143A8];
      uint64_t v32 = 0x40000000;
      xpc_object_t v33 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFtvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
      unint64_t v34 = &__block_descriptor_tmp_47;
      unint64_t v35 = &v37;
      unint64_t v36 = &v30;
      dispatch_async_and_wait(v16, &block);
    }
    else
    {
      __int16 v37 = -21846;
      uint64_t block = MEMORY[0x1E4F143A8];
      uint64_t v32 = 0x40000000;
      xpc_object_t v33 = ___ZN8dispatch9sync_implIRU13block_pointerFtvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
      unint64_t v34 = &__block_descriptor_tmp_46;
      unint64_t v35 = &v37;
      unint64_t v36 = &v30;
      dispatch_sync(v16, &block);
    }
    __int16 v13 = v37;
  }
  **(_WORD **)(a2 + 24) = v13;
  signed int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
  if (add_explicit < 0) {
LABEL_26:
  }
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)add_explicit, 0);
LABEL_27:
  if (v5)
  {
    xpc_retain(v5);
    xpc_object_t v17 = v5;
    if (v12) {
      goto LABEL_29;
    }
LABEL_32:
    uint64_t v18 = 0;
    unsigned int v19 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v19) {
      goto LABEL_41;
    }
    goto LABEL_33;
  }
  xpc_object_t v17 = xpc_null_create();
  if (!v12) {
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v18 = _Block_copy(v12);
  unsigned int v19 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v19) {
LABEL_41:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_33:
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = std::__shared_weak_count::lock(v19);
  if (!v21) {
    goto LABEL_41;
  }
  uint64_t v22 = v21;
  char v23 = operator new(0x28uLL);
  *char v23 = a1;
  v23[1] = v17;
  xpc_object_t v24 = xpc_null_create();
  v23[2] = v10;
  v23[3] = v18;
  *((_WORD *)v23 + 16) = v13;
  __int16 v25 = *(NSObject **)(a1 + 24);
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  int v26 = operator new(0x18uLL);
  *int v26 = v23;
  v26[1] = v20;
  v26[2] = v22;
  dispatch_async_f(v25, v26, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1>(qmi::Client::State::send(qmi::Client::SendProxy &)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1,dispatch_queue_s *::default_delete<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  xpc_release(v24);
  if (v12) {
    _Block_release(v12);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  xpc_release(v5);
}

void sub_1A10CB588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (v11) {
    _Block_release(v11);
  }
  if (__p) {
    operator delete(__p);
  }
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void QMIServiceMsg::serialize(QMIServiceMsg *this@<X0>, char **a2@<X8>)
{
  __int16 v4 = *((_WORD *)this + 7);
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (unsigned __int16)(v4 + 4);
  *a2 = 0;
  if (v4 == -4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x16C, "buffer", "!=", "NULL", 0, 0);
    xpc_object_t v6 = 0;
    __int16 v4 = *((_WORD *)this + 7);
  }
  else
  {
    xpc_object_t v6 = (char *)operator new((unsigned __int16)(v4 + 4));
    *a2 = v6;
    a2[2] = &v6[v5];
    bzero(v6, (unsigned __int16)(v4 + 4));
    a2[1] = &v6[v5];
  }
  *(_WORD *)xpc_object_t v6 = *((_WORD *)this + 6);
  *((_WORD *)v6 + 1) = v4;
  xpc_object_t v7 = v6 + 4;
  xpc_object_t v8 = (uint64_t *)*((void *)this + 2);
  for (i = (uint64_t *)*((void *)this + 3); v8 != i; xpc_object_t v7 = &v12[v11])
  {
    uint64_t v10 = *v8++;
    size_t v11 = *(unsigned __int16 *)(v10 + 2);
    char *v7 = *(unsigned char *)v10;
    *(_WORD *)(v7 + 1) = v11;
    char v12 = v7 + 3;
    memcpy(v7 + 3, *(const void **)(v10 + 8), v11);
  }
  if (v7 > &v6[v5]) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x186, "buffer", "<=", "(uint8_t*)bufferPtr + bufferLen", v7, &v6[v5]);
  }
}

void sub_1A10CB780(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19ATCSRouterIPCDriver13handleReceiveEP24mav_router_context_tag_t20mav_router_channel_tPvS3__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 32) + 64) + 8 * *(unsigned int *)(a1 + 56));
  if (v2)
  {
    xpc_object_t v3 = *(NSObject **)(a1 + 48);
    unsigned int size = dispatch_data_get_size(v3);
    size_t v5 = size;
    if (size)
    {
      xpc_object_t v6 = operator new(size);
      int v7 = v6 + v5;
      bzero(v6, v5);
    }
    else
    {
      xpc_object_t v6 = 0;
      int v7 = 0;
    }
    v14[0] = 0;
    v14[1] = v14;
    v14[2] = 0x2000000000;
    v14[3] = v6;
    v12[0] = 0;
    v12[1] = v12;
    v12[2] = 0x2000000000;
    int v13 = -1431655766;
    int v9 = 0;
    int v13 = dispatch_data_get_size(v3);
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 1107296256;
    applier[2] = ___ZL19mav_buffer_copy_rawPvS_jjPj_block_invoke;
    applier[3] = &__block_descriptor_tmp_20_1;
    int v11 = 0;
    applier[4] = v12;
    applier[5] = v14;
    applier[6] = &v9;
    BOOL v8 = dispatch_data_apply(v3, applier);
    _Block_object_dispose(v12, 8);
    _Block_object_dispose(v14, 8);
    if (!v8) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x6D, "result", "==", "MAV_BUFFER_SUCCESS", (const char *)0x67, 0);
    }
    (*(void (**)(uint64_t, void *, void))(*(void *)v2 + 16))(v2, v6, (v7 - v6));
    if (v6) {
      operator delete(v6);
    }
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
}

void sub_1A10CB958(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL19mav_buffer_copy_rawPvS_jjPj_block_invoke(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  int v5 = *(_DWORD *)(a1 + 56) - a3;
  unint64_t v6 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v6) {
    BOOL v7 = v5 < (int)a5;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    return 1;
  }
  uint64_t v10 = v5 & ~(v5 >> 31);
  if (v6 >= a5) {
    size_t v11 = a5;
  }
  else {
    size_t v11 = v6;
  }
  memcpy(*(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24), (const void *)(a4 + v10), v11);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) -= v11;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += v11;
  **(_DWORD **)(a1 + 48) += v11;
  return 1;
}

uint64_t QMux::State::handleReadData(QMux::State *this, const unsigned __int8 *a2, int a3)
{
  BOOL v8 = a2;
  int v7 = a3;
  if (a3 < 0) {
    return 0;
  }
  v6[0] = &v7;
  v6[1] = this;
  v6[2] = &v8;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_14handleReadDataEPKhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  v9[3] = &__block_descriptor_tmp_157;
  v9[4] = (char *)this + 8;
  v9[5] = v6;
  uint64_t v10 = v9;
  __int16 v4 = (char *)this + 24;
  xpc_object_t v3 = *((void *)this + 3);
  if (*((void *)v4 + 1))
  {
    unsigned int v17 = -1431655766;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v12 = 0x40000000;
    int v13 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFjvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    __int16 v14 = &__block_descriptor_tmp_159;
    BOOL v15 = &v17;
    int v16 = &v10;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    unsigned int v17 = -1431655766;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v12 = 0x40000000;
    int v13 = ___ZN8dispatch9sync_implIRU13block_pointerFjvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    __int16 v14 = &__block_descriptor_tmp_158;
    BOOL v15 = &v17;
    int v16 = &v10;
    dispatch_sync(v3, &block);
  }
  return v17;
}

void ___ZN3qmi6Client5State21handleIndication_syncERKN3xpc4dictEPv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
  {
    xpc_object_t v3 = 0;
LABEL_6:
    BOOL v4 = 0;
    if (!*(unsigned char *)(a1 + 64)) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  xpc_object_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    goto LABEL_6;
  }
  BOOL v4 = *(void *)(a1 + 32) != 0;
  if (!*(unsigned char *)(a1 + 64)) {
    goto LABEL_9;
  }
LABEL_7:
  if (!v4)
  {
    int v5 = (uint64_t *)(a1 + 48);
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v6 = *(void *)(a1 + 56);
  int v5 = (uint64_t *)(a1 + 48);
  (*(void (**)(void))(v6 + 16))();
LABEL_10:
  uint64_t v7 = *v5;
  int add = atomic_fetch_add((atomic_uint *volatile)(*v5 + 8), 0xFFFFFFFF);
  if (add <= 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
  }
  else if (v7 && add == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1A10CBCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void QMIServiceMsg::~QMIServiceMsg(QMIServiceMsg *this)
{
  *(void *)this = &unk_1EF43DE48;
  uint64_t v2 = (void **)*((void *)this + 2);
  xpc_object_t v3 = (void **)*((void *)this + 3);
  while (v2 != v3)
  {
    BOOL v4 = *v2;
    if (*v2)
    {
      int v5 = (void *)v4[1];
      if (v5) {
        operator delete[](v5);
      }
      operator delete(v4);
    }
    ++v2;
  }
  uint64_t v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    *((void *)this + 8) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 2);
  if (v7)
  {
    *((void *)this + 3) = v7;
    operator delete(v7);
  }
  *(void *)this = &unk_1EF43ED58;
  if (atomic_fetch_add_explicit((atomic_uint *volatile)this + 2, 0xA5A5A5A5, memory_order_relaxed)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)(int)atomic_fetch_add_explicit((atomic_uint *volatile)this + 2, 0xA5A5A5A5, memory_order_relaxed), 0);
  }

  operator delete(this);
}

{
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(void *)this = &unk_1EF43DE48;
  uint64_t v2 = (void **)*((void *)this + 2);
  xpc_object_t v3 = (void **)*((void *)this + 3);
  while (v2 != v3)
  {
    BOOL v4 = *v2;
    if (*v2)
    {
      int v5 = (void *)v4[1];
      if (v5) {
        operator delete[](v5);
      }
      operator delete(v4);
    }
    ++v2;
  }
  uint64_t v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    *((void *)this + 8) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 2);
  if (v7)
  {
    *((void *)this + 3) = v7;
    operator delete(v7);
  }
  *(void *)this = &unk_1EF43ED58;
  if (atomic_fetch_add_explicit((atomic_uint *volatile)this + 2, 0xA5A5A5A5, memory_order_relaxed)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)(int)atomic_fetch_add_explicit((atomic_uint *volatile)this + 2, 0xA5A5A5A5, memory_order_relaxed), 0);
  }
}

{
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(void *)this = &unk_1EF43DE48;
  uint64_t v2 = (void **)*((void *)this + 2);
  xpc_object_t v3 = (void **)*((void *)this + 3);
  while (v2 != v3)
  {
    BOOL v4 = *v2;
    if (*v2)
    {
      int v5 = (void *)v4[1];
      if (v5) {
        operator delete[](v5);
      }
      operator delete(v4);
    }
    ++v2;
  }
  uint64_t v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    *((void *)this + 8) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 2);
  if (v7)
  {
    *((void *)this + 3) = v7;
    operator delete(v7);
  }
  *(void *)this = &unk_1EF43ED58;
  if (atomic_fetch_add_explicit((atomic_uint *volatile)this + 2, 0xA5A5A5A5, memory_order_relaxed)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)(int)atomic_fetch_add_explicit((atomic_uint *volatile)this + 2, 0xA5A5A5A5, memory_order_relaxed), 0);
  }
}

void QMIServiceMsg::QMIServiceMsg(QMIServiceMsg *this, unsigned __int16 *a2, unsigned int a3, int a4)
{
  uint64_t v7 = this;
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1EF43DE48;
  *(_OWORD *)((char *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  *((_WORD *)this + 22) = -1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  if (a3 <= 3) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x57, "buf_length", ">=", "4", (const char *)a3, (const void *)4);
  }
  *((_WORD *)v7 + 6) = *a2;
  unsigned int v8 = a2[1];
  *((_WORD *)v7 + 7) = v8;
  int v9 = (const char *)(v8 + 4);
  if (v9 != a3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x5E, "(4 + fMsgLength)", "==", "buf_length", v9, (const void *)a3);
    unsigned int v8 = *((unsigned __int16 *)v7 + 7);
  }
  unsigned int v49 = a3;
  int v47 = a4;
  uint64_t v48 = a2;
  uint64_t v10 = (char *)(a2 + 2);
  if (v8)
  {
    unsigned int v11 = 0;
    do
    {
      char v14 = *v10;
      size_t v15 = *(unsigned __int16 *)(v10 + 1);
      int v16 = operator new(0x18uLL);
      *(unsigned char *)int v16 = v14;
      v16[1] = v15;
      unsigned int v17 = operator new[](v15);
      *((void *)v16 + 1) = v17;
      v16[8] = 0;
      memcpy(v17, v10 + 3, v15);
      uint64_t v7 = this;
      unsigned int v19 = (char *)*((void *)this + 3);
      unint64_t v18 = *((void *)this + 4);
      if ((unint64_t)v19 < v18)
      {
        *(void *)unsigned int v19 = v16;
        uint64_t v12 = (uint64_t)(v19 + 8);
      }
      else
      {
        uint64_t v20 = (char *)*((void *)this + 2);
        uint64_t v21 = (v19 - v20) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v18 - (void)v20;
        if (v23 >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          if (v24 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v25 = v24;
          int v26 = (char *)operator new(8 * v24);
          unint64_t v24 = v25;
          uint64_t v27 = &v26[8 * v21];
          *(void *)uint64_t v27 = v16;
          uint64_t v12 = (uint64_t)(v27 + 8);
          unsigned __int16 v28 = (char *)(v19 - v20);
          if (v19 != v20)
          {
LABEL_19:
            unint64_t v29 = (unint64_t)(v28 - 8);
            if (v29 < 0x58) {
              goto LABEL_57;
            }
            if ((unint64_t)(v20 - v26) < 0x20) {
              goto LABEL_57;
            }
            uint64_t v30 = (v29 >> 3) + 1;
            uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v32 = &v19[-v31];
            v27 -= v31;
            xpc_object_t v33 = &v26[8 * v21 - 16];
            unint64_t v34 = v19 - 16;
            uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v36 = *(_OWORD *)v34;
              *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
              *(_OWORD *)xpc_object_t v33 = v36;
              v33 -= 32;
              v34 -= 32;
              v35 -= 4;
            }
            while (v35);
            unsigned int v19 = v32;
            if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_57:
              do
              {
                uint64_t v37 = *((void *)v19 - 1);
                v19 -= 8;
                *((void *)v27 - 1) = v37;
                v27 -= 8;
              }
              while (v19 != v20);
            }
            uint64_t v7 = this;
            unsigned int v19 = (char *)*((void *)this + 2);
            *((void *)this + 2) = v27;
            *((void *)this + 3) = v12;
            *((void *)this + 4) = &v26[8 * v24];
            if (!v19) {
              goto LABEL_8;
            }
LABEL_29:
            operator delete(v19);
            unsigned int v8 = *((unsigned __int16 *)v7 + 7);
            goto LABEL_8;
          }
        }
        else
        {
          int v26 = 0;
          uint64_t v27 = (char *)(8 * v21);
          *(void *)(8 * v21) = v16;
          uint64_t v12 = 8 * v21 + 8;
          unsigned __int16 v28 = (char *)(v19 - v20);
          if (v19 != v20) {
            goto LABEL_19;
          }
        }
        uint64_t v7 = this;
        *((void *)this + 2) = v27;
        *((void *)this + 3) = v12;
        *((void *)this + 4) = &v26[8 * v24];
        if (v19) {
          goto LABEL_29;
        }
      }
LABEL_8:
      *((void *)v7 + 3) = v12;
      uint64_t v13 = (v15 + 3);
      v11 += v13;
      v10 += v13;
    }
    while (v11 < v8);
  }
  xpc_object_t v38 = (char *)v48 + v49;
  if (v10 != v38) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x70, "buf_ptr", "==", "(const char*)buf + buf_length", v10, v38);
  }
  if (v47)
  {
    BOOL v40 = (void *)*((void *)v7 + 2);
    xpc_object_t v39 = (void *)*((void *)v7 + 3);
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 0x40000000;
    v52 = ___ZNK13QMIServiceMsg6getTlvEh_block_invoke;
    unint64_t v53 = &__block_descriptor_tmp_11;
    char v54 = 2;
    if (v40 == v39) {
      goto LABEL_48;
    }
    while ((((uint64_t (*)(void *, void))v52)(v51, *v40) & 1) == 0)
    {
      if (++v40 == v39)
      {
        BOOL v40 = v39;
        break;
      }
    }
    if (v40 == *((void **)v7 + 3)
      || ((uint64_t v41 = *v40, *(_WORD *)(v41 + 16) = 0, v41)
        ? (unint64_t v42 = Tlv::Reader::this_type_does_not_support_comparisons)
        : (unint64_t v42 = 0),
          !v42 || *(_WORD *)(v41 + 2) != 4))
    {
LABEL_48:
      BOOL v43 = (_DWORD *)((char *)v7 + 40);
      __int16 v46 = 3;
    }
    else
    {
      *((_DWORD *)v7 + 10) = 0;
      BOOL v43 = (_DWORD *)((char *)v7 + 40);
      v44 = *(_WORD **)(v41 + 8);
      if (!*v44)
      {
        __int16 v46 = 0;
        goto LABEL_50;
      }
      int v45 = (unsigned __int16)v44[1];
      *((_WORD *)v7 + 22) = v45;
      if (v45) {
        return;
      }
      __int16 v46 = 4;
    }
    *BOOL v43 = 1;
LABEL_50:
    *((_WORD *)v7 + 22) = v46;
  }
}

void sub_1A10CC268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ATCSCounted *a13)
{
  char v14 = (void *)*((void *)a13 + 7);
  if (v14)
  {
    *((void *)a13 + 8) = v14;
    operator delete(v14);
    size_t v15 = (void *)*((void *)a13 + 2);
    if (!v15)
    {
LABEL_3:
      ATCSCounted::~ATCSCounted((atomic_uint *)a13);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    size_t v15 = (void *)*((void *)a13 + 2);
    if (!v15) {
      goto LABEL_3;
    }
  }
  *((void *)a13 + 3) = v15;
  operator delete(v15);
  ATCSCounted::~ATCSCounted((atomic_uint *)a13);
  _Unwind_Resume(a1);
}

BOOL ___ZNK13QMIServiceMsg6getTlvEh_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  return *a2 == *(unsigned __int8 *)(a1 + 32);
}

uint64_t ___ZZNK3qmi12ClientRouter21setIndHandlerInternalEtNSt3__18functionIFvNS_16SubscriptionTypeERK13QMIServiceMsgEEEENK3__0clIS3_NS_11ClientStateEEEDaT_RKT0__block_invoke(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 64);
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v2 + 48))(v2, &v4, a2);
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFjvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_14handleReadDataEPKhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  unsigned int v2 = **(_DWORD **)v1;
  if (!v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  int v4 = *(QMux::State **)(v1 + 8);
  do
  {
    uint64_t v3 = QMux::State::handleReadData_sync(v4, (const unsigned __int8 *)(**(void **)(v1 + 16) + v3), v2 - v3)+ v3;
    unsigned int v2 = **(_DWORD **)v1;
  }
  while (v3 < v2);
  return v3;
}

uint64_t QMux::State::handleReadData_sync(QMux::State *this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  int v4 = *((_DWORD *)this + 54);
  if (v4 == 5) {
    return v3;
  }
  if (!v4)
  {
    uint64_t v6 = *((void *)this + 10);
    uint64_t v7 = (char *)this + 40;
    if (*((char *)this + 63) < 0) {
      uint64_t v7 = *(const char **)v7;
    }
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v6 + 24))(v6, 6, "[%s] QMux is kStopped; dropping incoming %u bytes.\n",
      v7,
      a3);
    return v3;
  }
  uint64_t v21 = MEMORY[0x1E4F143A8];
  uint64_t v22 = 0x40000000;
  uint64_t v23 = ___ZN4QMux5State19handleReadData_syncEPKhj_block_invoke;
  unint64_t v24 = &__block_descriptor_tmp_1;
  int v27 = a3;
  unint64_t v25 = this;
  int v26 = a2;
  uint64_t v9 = qmi::parse();
  if ((v9 & 0x80000000) != 0)
  {
    uint64_t v12 = (char *)this + 40;
    if (*((char *)this + 63) < 0) {
      uint64_t v12 = *(const char **)v12;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] Irrecoverable parsing error (available=%d). Resetting QMux.\n", v12, v3);
    __p = operator new(0x20uLL);
    long long v20 = xmmword_1A1126ED0;
    strcpy((char *)__p, "Irrecoverable parsing error");
    QMux::State::invokeReset_sync((uint64_t)this, (uint64_t)&__p);
  }
  else
  {
    uint64_t v10 = v9;
    if (v9)
    {
      if (v9 < v3)
      {
        unsigned int v11 = (char *)this + 40;
        if (*((char *)this + 63) < 0) {
          unsigned int v11 = *(const char **)v11;
        }
        (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] More bytes in the buffer. Expecting %d, but %d available; continuing.\n",
          v11,
          v9,
          v3);
      }
      return v10;
    }
    uint64_t v13 = (char *)this + 40;
    char v14 = (char *)this + 40;
    if (*((char *)this + 63) < 0) {
      char v14 = *(const char **)v13;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] Not enough bytes for even the header (needs at least %u bytes), only %u available.\n", v14, 8, v3);
    uint64_t v15 = *((void *)this + 10);
    if (*((char *)this + 63) < 0) {
      uint64_t v13 = *(const char **)v13;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD850, memory_order_acquire) & 1) == 0)
    {
      uint64_t v18 = v15;
      int v17 = __cxa_guard_acquire(&qword_1EBBDD850);
      uint64_t v15 = v18;
      if (v17)
      {
        _MergedGlobals_1 = (uint64_t)&unk_1EF43DCC0;
        __cxa_atexit((void (*)(void *))QMuxCommandFormatter::~QMuxCommandFormatter, &_MergedGlobals_1, &dword_1A10C7000);
        __cxa_guard_release(&qword_1EBBDD850);
        uint64_t v15 = v18;
      }
    }
    ATCSLogger::logCommand(v15, 6, (uint64_t)v13, (uint64_t)a2, v3, (uint64_t)&_MergedGlobals_1);
    __p = operator new(0x40uLL);
    long long v20 = xmmword_1A1126EC0;
    strcpy((char *)__p, "QMux read parsing error: buffer underrun for incomplete frame");
    QMux::State::invokeReset_sync((uint64_t)this, (uint64_t)&__p);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  return v3;
}

void sub_1A10CC754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFivEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_12getWriteDataEPhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  unsigned int v2 = *(QMux::State **)v1;
  if (*(_DWORD *)(*(void *)v1 + 216) == 5
    || (uint64_t result = QMux::State::getWriteDataInternal_sync(v2, **(unsigned __int8 ***)(v1 + 8), **(_DWORD **)(v1 + 16)),
        !result))
  {
    uint64_t result = *((void *)v2 + 23);
    if (result)
    {
      (*(void (**)(uint64_t, QMux::State *, void))(*(void *)result + 64))(result, v2, *((void *)v2 + 26));
      return 0;
    }
  }
  return result;
}

uint64_t QMux::State::getWriteDataInternal_sync(QMux::State *this, unsigned __int8 *__dst, unsigned int a3)
{
  if (!*((void *)this + 22) || *((unsigned char *)this + 360) && *((_DWORD *)this + 93) >= *((_DWORD *)this + 91)) {
    return 0;
  }
  LOWORD(v5) = 0;
  unint64_t v6 = *((void *)this + 21);
  uint64_t v7 = *(void *)(*((void *)this + 18) + 8 * (v6 / 0xAA));
  unint64_t v8 = v6 % 0xAA;
  uint64_t v9 = (unsigned __int8 *)(v7 + 24 * (v6 % 0xAA));
  if (a3 >= 0xFFFF) {
    unint64_t v10 = 0xFFFFLL;
  }
  else {
    unint64_t v10 = a3;
  }
  uint64_t v12 = v9 + 8;
  uint64_t v11 = *((void *)v9 + 1);
  unint64_t v13 = *(void *)(v11 + 8) - *(void *)v11;
  if (v10)
  {
    unint64_t v14 = *((unsigned __int16 *)this + 156);
    if (v13 > v14)
    {
      if (v13 - v14 >= v10) {
        size_t v5 = v10;
      }
      else {
        size_t v5 = v13 - v14;
      }
      memmove(__dst, (const void *)(*(void *)v11 + v14), v5);
      uint64_t v11 = *(void *)v12;
      unint64_t v13 = *(void *)(*(void *)v12 + 8) - **(void **)v12;
    }
  }
  unsigned int v15 = *v9;
  unsigned int v16 = *(unsigned __int8 *)(v7 + 24 * v8 + 1);
  unsigned int v17 = *(unsigned __int16 *)(v11 + 26);
  int v18 = *(unsigned __int16 *)(v11 + 24);
  unsigned int v19 = (char **)*((void *)this + 15);
  if (!v19) {
    goto LABEL_49;
  }
  long long v20 = (char **)((char *)this + 120);
  do
  {
    unsigned int v23 = *((unsigned __int8 *)v19 + 32);
    BOOL v24 = v23 == v15;
    if (v23 >= v15) {
      char v25 = 1;
    }
    else {
      char v25 = -1;
    }
    if (v24)
    {
      unsigned int v26 = *((unsigned __int8 *)v19 + 33);
      BOOL v27 = v26 == v16;
      char v25 = v26 >= v16 ? 1 : -1;
      if (v27) {
        char v25 = 0;
      }
    }
    BOOL v21 = (v25 & 0x80) == 0;
    if (v25 < 0) {
      uint64_t v22 = v19 + 1;
    }
    else {
      uint64_t v22 = v19;
    }
    if (v21) {
      long long v20 = v19;
    }
    unsigned int v19 = (char **)*v22;
  }
  while (*v22);
  if (v20 == (char **)((char *)this + 120)) {
    goto LABEL_49;
  }
  unsigned int v29 = *((unsigned __int8 *)v20 + 32);
  BOOL v30 = v15 == v29;
  if (v15 >= v29) {
    char v31 = 1;
  }
  else {
    char v31 = -1;
  }
  if (v30)
  {
    unsigned int v32 = *((unsigned __int8 *)v20 + 33);
    BOOL v33 = v16 >= v32;
    BOOL v34 = v16 == v32;
    char v31 = -1;
    if (v33) {
      char v31 = 1;
    }
    if (v34) {
      char v31 = 0;
    }
  }
  if (v31 < 0)
  {
LABEL_49:
    int v41 = 0;
    xpc_object_t v38 = 0;
    int v40 = 0;
    v64 = 0;
    char v63 = 1;
  }
  else
  {
    v64 = 0;
    uint64_t v35 = (std::__shared_weak_count *)v20[6];
    if (v35)
    {
      unsigned int v36 = v17;
      int v37 = v18;
      v64 = std::__shared_weak_count::lock(v35);
      if (v64)
      {
        xpc_object_t v38 = v20[5];
        if (v38)
        {
          int v39 = (*(uint64_t (**)(char *))(*(void *)v38 + 104))(v38);
          int v18 = v37;
          unsigned int v17 = v36;
          int v40 = v39;
          char v63 = 0;
          int v41 = 1;
          goto LABEL_50;
        }
      }
      else
      {
        xpc_object_t v38 = 0;
      }
      char v63 = 1;
      int v41 = 1;
      int v18 = v37;
      unsigned int v17 = v36;
      int v40 = 0;
    }
    else
    {
      xpc_object_t v38 = 0;
      int v40 = 0;
      char v63 = 1;
      int v41 = 1;
    }
  }
LABEL_50:
  uint64_t v28 = (unsigned __int16)v5;
  int v42 = (unsigned __int16)(*((_WORD *)this + 156) + v5);
  *((_WORD *)this + 156) += v5;
  if (v42 != (unsigned __int16)v13)
  {
LABEL_71:
    int v56 = *((_DWORD *)this + 50);
    if (v56 <= 1) {
      goto LABEL_84;
    }
    unsigned int v57 = v28;
    if (v63) {
      goto LABEL_77;
    }
    goto LABEL_75;
  }
  *((_WORD *)this + 156) = 0;
  unint64_t v43 = *((void *)this + 21);
  uint64_t v44 = *((void *)this + 18);
  int v45 = (void *)(v44 + 8 * (v43 / 0xAA));
  if (*((void *)this + 19) == v44) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = *v45 + 24 * (v43 % 0xAA);
  }
  unsigned int v62 = v17;
  int v47 = (void *)(v44 + 8 * (v43 / 0xAA));
  int v48 = v18;
  unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((v46 - *v45) >> 3);
  if (v46 - *v45 < -23)
  {
    unint64_t v53 = 168 - v49;
    uint64_t v51 = &v47[-(v53 / 0xAA)];
    uint64_t v52 = *v51 + 24 * (170 * (v53 / 0xAA) - v53) + 4056;
  }
  else
  {
    unint64_t v50 = v49 + 1;
    uint64_t v51 = &v47[v50 / 0xAA];
    uint64_t v52 = *v51 + 24 * (v50 % 0xAA);
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,0>(&v65, v45, v46, v47, v46, v51, v52);
  char v54 = *(std::__shared_weak_count **)(v46 + 16);
  if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  int64x2_t v55 = vaddq_s64(*(int64x2_t *)((char *)this + 168), (int64x2_t)xmmword_1A1125FF0);
  *(int64x2_t *)((char *)this + 168) = v55;
  if (v55.i64[0] >= 0x154uLL)
  {
    operator delete(**((void ***)this + 18));
    *((void *)this + 18) += 8;
    *((void *)this + 21) -= 170;
  }
  if (*((unsigned char *)this + 360))
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)this + 92, 0xFFFFFFFF, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_uint *volatile)this + 93, 1u, memory_order_relaxed);
  }
  if (!v41)
  {
    unint64_t v58 = (char *)this + 40;
    if (*((char *)this + 63) < 0) {
      unint64_t v58 = *(const char **)v58;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] Cannot call handleSentData, QMI client(svc=%d client=%d) not found\n", v58, v15, v16);
    int v18 = v48;
    goto LABEL_71;
  }
  if (v63)
  {
    int v56 = *((_DWORD *)this + 50);
    unsigned int v57 = v28;
    int v18 = v48;
    if (v56 <= 1) {
      goto LABEL_84;
    }
LABEL_77:
    if (v57 >= v28) {
      int v59 = v28;
    }
    else {
      int v59 = v57;
    }
    sLogBinaryToOsLog(*((capabilities::abs **)this + 44), v56, 0, v15, v18, v40, (uint64_t)__dst, v59);
    if (v57 < v28)
    {
      v60 = (char *)this + 40;
      if (*((char *)this + 63) < 0) {
        v60 = *(const char **)v60;
      }
      (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] send: Truncated binary from %d bytes to %u bytes for QMI client(svc=%d client=%d)\n", v60, v28, v57, v15, v16);
    }
    goto LABEL_84;
  }
  (*(void (**)(char *, void))(*(void *)v38 + 56))(v38, v62);
  int v18 = v48;
  int v56 = *((_DWORD *)this + 50);
  if (v56 > 1)
  {
LABEL_75:
    if (*((int *)v38 + 10) >= 2)
    {
      unsigned int v57 = *((_DWORD *)v38 + 9);
      goto LABEL_77;
    }
  }
LABEL_84:
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  return v28;
}

void sub_1A10CD038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10CD04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10CD060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMux::State::handleMessage_sync(uint64_t a1, uint64_t a2, const void *a3, size_t a4, unsigned __int16 *a5, unint64_t a6)
{
  if (*(unsigned char *)(a1 + 360)) {
    BOOL v12 = *(_DWORD *)(a2 + 8) == 1;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    if (!atomic_fetch_add((atomic_uint *volatile)(a1 + 372), 0xFFFFFFFF)) {
      atomic_store(0, (unsigned int *)(a1 + 372));
    }
    uint64_t v13 = *(void *)(a1 + 184);
    if (v13 && (!*(unsigned char *)(a1 + 360) || *(_DWORD *)(a1 + 372) < *(_DWORD *)(a1 + 364))) {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v13 + 56))(v13, a1, *(void *)(a1 + 208));
    }
  }
  unsigned int v14 = *(unsigned __int8 *)(a2 + 6);
  if (v14 == 255)
  {
    QMux::State::handleBroadcastMessage_sync(a1, a2, a3, a4, a5, a6);
    return;
  }
  if (a6 < 2)
  {
    unsigned int v15 = 0;
    unsigned int v16 = *(unsigned __int8 *)(a2 + 5);
    uint64_t v17 = a1 + 120;
    uint64_t v18 = *(void *)(a1 + 120);
    if (!v18)
    {
LABEL_57:
      int v38 = *(_DWORD *)(a2 + 8);
      if (v38 == 1) {
        unsigned int v39 = 1;
      }
      else {
        unsigned int v39 = 2 * (v38 != 0);
      }
      sLogBinaryToOsLog(*(capabilities::abs **)(a1 + 352), *(_DWORD *)(a1 + 200), v39, v16, v15, 0, (uint64_t)a3, a4);
      int v40 = (const char *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        int v40 = *(const char **)v40;
      }
      (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), 6, "[%s] handleReadData: Cannot find QMI client. Dropping. (svc=%d client=%d txid=%d msgid=0x%x)\n", v40, *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 6), *(unsigned __int16 *)(a2 + 12), v15);
      return;
    }
  }
  else
  {
    unsigned int v15 = *a5;
    unsigned int v16 = *(unsigned __int8 *)(a2 + 5);
    uint64_t v17 = a1 + 120;
    uint64_t v18 = *(void *)(a1 + 120);
    if (!v18) {
      goto LABEL_57;
    }
  }
  uint64_t v19 = v17;
  do
  {
    unsigned int v22 = *(unsigned __int8 *)(v18 + 32);
    BOOL v23 = v22 == v16;
    if (v22 >= v16) {
      char v24 = 1;
    }
    else {
      char v24 = -1;
    }
    if (v23)
    {
      unsigned int v25 = *(unsigned __int8 *)(v18 + 33);
      BOOL v26 = v25 == v14;
      char v24 = v25 >= v14 ? 1 : -1;
      if (v26) {
        char v24 = 0;
      }
    }
    BOOL v20 = (v24 & 0x80) == 0;
    if (v24 < 0) {
      BOOL v21 = (uint64_t *)(v18 + 8);
    }
    else {
      BOOL v21 = (uint64_t *)v18;
    }
    if (v20) {
      uint64_t v19 = v18;
    }
    uint64_t v18 = *v21;
  }
  while (*v21);
  if (v19 == v17) {
    goto LABEL_57;
  }
  unsigned int v27 = *(unsigned __int8 *)(v19 + 32);
  BOOL v28 = v16 == v27;
  if (v16 >= v27) {
    char v29 = 1;
  }
  else {
    char v29 = -1;
  }
  if (v28)
  {
    unsigned int v30 = *(unsigned __int8 *)(v19 + 33);
    BOOL v31 = v14 >= v30;
    BOOL v32 = v14 == v30;
    char v33 = -1;
    if (v31) {
      char v33 = 1;
    }
    if (v32) {
      char v29 = 0;
    }
    else {
      char v29 = v33;
    }
  }
  if (v29 < 0) {
    goto LABEL_57;
  }
  char v63 = 0;
  BOOL v34 = *(std::__shared_weak_count **)(v19 + 48);
  if (!v34) {
    goto LABEL_78;
  }
  char v63 = std::__shared_weak_count::lock(v34);
  if (!v63) {
    goto LABEL_78;
  }
  uint64_t v35 = *(void *)(v19 + 40);
  uint64_t v62 = v35;
  if (!v35)
  {
    int v37 = *(_DWORD *)(a1 + 200);
    if (v37 > 1)
    {
      int v36 = 0;
LABEL_66:
      size_t v41 = *(unsigned int *)(v35 + 36);
      int v42 = *(_DWORD *)(a2 + 8);
      if (v42 == 1) {
        unsigned int v43 = 1;
      }
      else {
        unsigned int v43 = 2 * (v42 != 0);
      }
      sLogBinaryToOsLog(*(capabilities::abs **)(a1 + 352), v37, v43, *(unsigned __int8 *)(a2 + 5), v15, v36, (uint64_t)a3, a4);
      if (a4 > v41)
      {
        uint64_t v44 = (const char *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          uint64_t v44 = *(const char **)v44;
        }
        (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), 6, "[%s] recv: Truncated binary from %zd bytes to %zu bytes for QMI client(svc=%d client=%d)\n", v44, a4, v41, *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 6));
      }
      goto LABEL_73;
    }
LABEL_78:
    int v47 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      int v47 = *(const char **)v47;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), 6, "[%s] handleReadData: Client did exist, but is now dead; dropping. (svc=%d client=%d txid=%d msgid=0x%x)\n",
      v47,
      *(unsigned __int8 *)(a2 + 5),
      *(unsigned __int8 *)(a2 + 6),
      *(unsigned __int16 *)(a2 + 12),
      v15);
    goto LABEL_81;
  }
  int v36 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 104))(v35);
  int v37 = *(_DWORD *)(a1 + 200);
  if (v37 >= 2 && *(int *)(v35 + 40) >= 2) {
    goto LABEL_66;
  }
LABEL_73:
  int v61 = v36;
  if (*(_DWORD *)(a1 + 216) == 4)
  {
    unsigned int v45 = *(unsigned __int8 *)(a2 + 5);
    if (*(unsigned char *)(a2 + 5) || v15 != 42)
    {
      uint64_t v46 = *(void *)(a1 + 296);
      if (v46)
      {
        while (1)
        {
          uint64_t v49 = v46;
          unsigned int v50 = *(unsigned __int8 *)(v46 + 26);
          if (v45 == v50)
          {
            unsigned int v51 = *(unsigned __int16 *)(v49 + 28);
            if (v15 >= v51)
            {
              BOOL v52 = v51 == v15;
              if (v51 >= v15) {
                char v53 = 1;
              }
              else {
                char v53 = -1;
              }
              if (v52) {
                char v53 = 0;
              }
              goto LABEL_99;
            }
LABEL_86:
            uint64_t v46 = *(void *)v49;
            int v48 = (char **)v49;
            if (!*(void *)v49) {
              goto LABEL_103;
            }
          }
          else
          {
            if (v45 < v50) {
              goto LABEL_86;
            }
            if (v50 >= v45) {
              char v53 = 1;
            }
            else {
              char v53 = -1;
            }
LABEL_99:
            if ((v53 & 0x80) == 0) {
              goto LABEL_106;
            }
            uint64_t v46 = *(void *)(v49 + 8);
            if (!v46)
            {
              int v48 = (char **)(v49 + 8);
              goto LABEL_103;
            }
          }
        }
      }
      int v48 = (char **)(a1 + 296);
      uint64_t v49 = a1 + 296;
LABEL_103:
      char v54 = (char *)operator new(0x20uLL);
      *(_DWORD *)(v54 + 26) = v45 | (v15 << 16) | 0xAA00;
      *(void *)char v54 = 0;
      *((void *)v54 + 1) = 0;
      *((void *)v54 + 2) = v49;
      *int v48 = v54;
      uint64_t v55 = **(void **)(a1 + 288);
      if (v55)
      {
        *(void *)(a1 + 288) = v55;
        char v54 = *v48;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 296), (uint64_t *)v54);
      ++*(void *)(a1 + 304);
    }
  }
LABEL_106:
  int v56 = *(_DWORD *)(a2 + 8);
  if (v56 == 2)
  {
    (*(void (**)(uint64_t, unsigned __int16 *, unint64_t))(*(void *)v62 + 40))(v62, a5, a6);
    if (*(void *)(a1 + 320) == *(void *)(a1 + 328)
      && QMIControl::getPowerModeForMsg_sync(*(void *)(a1 + 64), *(unsigned __int8 *)(a2 + 5), v15) == 1)
    {
      uint64_t v57 = mach_absolute_time();
      QMIWakeReason::set(a1 + 320, a3, a4, v57);
    }
  }
  else if (v56 == 1)
  {
    (*(void (**)(uint64_t, void, unsigned __int16 *, unint64_t))(*(void *)v62 + 32))(v62, *(unsigned __int16 *)(a2 + 12), a5, a6);
  }
  else
  {
    unint64_t v58 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      unint64_t v58 = *(const char **)v58;
    }
    uint64_t v59 = *(void *)(a1 + 80);
    v60 = (const char *)qmi::asString();
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v59 + 24))(v59, 6, "[%s] handleReadData: Unknown message type %s; dropping. (svc=%d client=%d txid=%d msgid=0x%x sim=%hhu)\n",
      v58,
      v60,
      *(unsigned __int8 *)(a2 + 5),
      *(unsigned __int8 *)(a2 + 6),
      *(unsigned __int16 *)(a2 + 12),
      v15,
      v61);
  }
LABEL_81:
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
}

void sub_1A10CD6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10CD6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10CD700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::QmiClientProxyAdapter::simSlot(qmi::QmiClientProxyAdapter *this)
{
  return *((unsigned __int8 *)this + 232);
}

void sLogBinaryToOsLog(capabilities::abs *a1, int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, int a8)
{
  *(void *)&v58[7] = *MEMORY[0x1E4F143B8];
  if (a2 < 2) {
    return;
  }
  if (!capabilities::abs::shouldLogSIMSlot(a1)) {
    a6 = 0;
  }
  switch(a4)
  {
    case 0:
    case 2:
    case 4:
    case 8:
    case 9:
    case 10:
    case 12:
    case 26:
    case 34:
    case 36:
    case 40:
    case 42:
    case 43:
    case 44:
    case 48:
    case 82:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 234:
      goto LABEL_5;
    case 1:
      if ((a3 != 2 || a5 != 1) && (a3 || a5 != 32))
      {
        BOOL v23 = a3 == 2 && a5 == 34;
        BOOL v24 = v23;
        BOOL v25 = a5 == 32 && a3 == 1;
        if (!v25 && !v24)
        {
          BOOL v26 = a5 == 45 || a5 == 107;
          BOOL v27 = !v26 || a3 >= 2;
          BOOL v28 = !v27;
          if (a5 != 198 || a3 != 2) {
            goto LABEL_83;
          }
        }
      }
      goto LABEL_84;
    case 3:
      if (a3 != 2 || a5 != 81) {
        goto LABEL_5;
      }
      goto LABEL_84;
    case 5:
      if (a3) {
        BOOL v30 = 0;
      }
      else {
        BOOL v30 = a5 == 32;
      }
      char v31 = v30;
      BOOL v32 = a5 == 1 && a3 == 2;
      if (v32 || (v31 & 1) != 0) {
        goto LABEL_93;
      }
      goto LABEL_5;
    case 11:
      if (a3 > 1 || a5 != 52) {
        goto LABEL_5;
      }
      goto LABEL_93;
    case 225:
      if (a3 == 2 && a5 == 45) {
        goto LABEL_84;
      }
      BOOL v35 = a3 != 2 || (a5 - 53) >= 3;
      BOOL v28 = !v35;
      if (a5 == 51 && a3 == 0) {
        goto LABEL_84;
      }
LABEL_83:
      if (!v28) {
        goto LABEL_5;
      }
LABEL_84:
      BOOL v37 = os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_DEFAULT);
      if (a6)
      {
        if (!v37) {
          return;
        }
        int v38 = qmi::asShortString();
        if (a3 > 2) {
          unsigned int v39 = "???";
        }
        else {
          unsigned int v39 = off_1E5A41568[(char)a3];
        }
        int v47 = 67110658;
        int v48 = a4;
        __int16 v49 = 2080;
        unsigned int v50 = v38;
        __int16 v51 = 2080;
        BOOL v52 = v39;
        __int16 v53 = 1024;
        int v54 = a5;
        __int16 v55 = 1024;
        int v56 = a6;
        __int16 v57 = 1040;
        *(_DWORD *)unint64_t v58 = a8;
        v58[2] = 2098;
        *(void *)&v58[3] = a7;
        BOOL v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Sim=%d Bin=[%{public,libTelephonyDecoder:QMI}.*P]";
        goto LABEL_14;
      }
      if (!v37) {
        return;
      }
      unsigned int v43 = qmi::asShortString();
      if (a3 > 2) {
        uint64_t v44 = "???";
      }
      else {
        uint64_t v44 = off_1E5A41568[(char)a3];
      }
      int v47 = 67110402;
      int v48 = a4;
      __int16 v49 = 2080;
      unsigned int v50 = v43;
      __int16 v51 = 2080;
      BOOL v52 = v44;
      __int16 v53 = 1024;
      int v54 = a5;
      __int16 v55 = 1040;
      int v56 = a8;
      __int16 v57 = 2098;
      *(void *)unint64_t v58 = a7;
      BOOL v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Bin=[%{public,libTelephonyDecoder:QMI}.*P]";
      goto LABEL_17;
    case 226:
      if (a3 != 1 || a5 != 53268) {
        goto LABEL_5;
      }
      goto LABEL_93;
    case 233:
      if (a3 != 1 || (a5 & 0xFFFE) != 0xD00C)
      {
LABEL_5:
        BOOL v15 = os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_DEFAULT);
        if (a6)
        {
          if (!v15) {
            return;
          }
          unsigned int v16 = qmi::asShortString();
          if (a3 > 2) {
            uint64_t v17 = "???";
          }
          else {
            uint64_t v17 = off_1E5A41568[(char)a3];
          }
          int v47 = 67110658;
          int v48 = a4;
          __int16 v49 = 2080;
          unsigned int v50 = v16;
          __int16 v51 = 2080;
          BOOL v52 = v17;
          __int16 v53 = 1024;
          int v54 = a5;
          __int16 v55 = 1024;
          int v56 = a6;
          __int16 v57 = 1040;
          *(_DWORD *)unint64_t v58 = a8;
          v58[2] = 2096;
          *(void *)&v58[3] = a7;
          BOOL v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Sim=%d Bin=[%{libTelephonyDecoder:QMI}.*P]";
          goto LABEL_14;
        }
        if (!v15) {
          return;
        }
        uint64_t v18 = qmi::asShortString();
        if (a3 > 2) {
          uint64_t v19 = "???";
        }
        else {
          uint64_t v19 = off_1E5A41568[(char)a3];
        }
        int v47 = 67110402;
        int v48 = a4;
        __int16 v49 = 2080;
        unsigned int v50 = v18;
        __int16 v51 = 2080;
        BOOL v52 = v19;
        __int16 v53 = 1024;
        int v54 = a5;
        __int16 v55 = 1040;
        int v56 = a8;
        __int16 v57 = 2096;
        *(void *)unint64_t v58 = a7;
        BOOL v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Bin=[%{libTelephonyDecoder:QMI}.*P]";
        goto LABEL_17;
      }
LABEL_93:
      BOOL v40 = os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_DEFAULT);
      if (!a6)
      {
        if (!v40) {
          return;
        }
        unsigned int v45 = qmi::asShortString();
        if (a3 > 2) {
          uint64_t v46 = "???";
        }
        else {
          uint64_t v46 = off_1E5A41568[(char)a3];
        }
        int v47 = 67110403;
        int v48 = a4;
        __int16 v49 = 2080;
        unsigned int v50 = v45;
        __int16 v51 = 2080;
        BOOL v52 = v46;
        __int16 v53 = 1024;
        int v54 = a5;
        __int16 v55 = 1040;
        int v56 = a8;
        __int16 v57 = 2101;
        *(void *)unint64_t v58 = a7;
        BOOL v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Bin=[%{sensitive,libTelephonyDecoder:QMI}.*P]";
LABEL_17:
        BOOL v21 = a1;
        uint32_t v22 = 50;
        goto LABEL_18;
      }
      if (v40)
      {
        size_t v41 = qmi::asShortString();
        if (a3 > 2) {
          int v42 = "???";
        }
        else {
          int v42 = off_1E5A41568[(char)a3];
        }
        int v47 = 67110659;
        int v48 = a4;
        __int16 v49 = 2080;
        unsigned int v50 = v41;
        __int16 v51 = 2080;
        BOOL v52 = v42;
        __int16 v53 = 1024;
        int v54 = a5;
        __int16 v55 = 1024;
        int v56 = a6;
        __int16 v57 = 1040;
        *(_DWORD *)unint64_t v58 = a8;
        v58[2] = 2101;
        *(void *)&v58[3] = a7;
        BOOL v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Sim=%d Bin=[%{sensitive,libTelephonyDecoder:QMI}.*P]";
LABEL_14:
        BOOL v21 = a1;
        uint32_t v22 = 56;
LABEL_18:
        _os_log_impl(&dword_1A10C7000, v21, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v47, v22);
      }
      return;
    default:
      if (os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_DEBUG))
      {
        char v33 = qmi::asShortString();
        if (a3 > 2) {
          BOOL v34 = "???";
        }
        else {
          BOOL v34 = off_1E5A41568[(char)a3];
        }
        int v47 = 67109890;
        int v48 = a4;
        __int16 v49 = 2080;
        unsigned int v50 = v33;
        __int16 v51 = 2080;
        BOOL v52 = v34;
        __int16 v53 = 1024;
        int v54 = a5;
        _os_log_debug_impl(&dword_1A10C7000, (os_log_t)a1, OS_LOG_TYPE_DEBUG, "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x", (uint8_t *)&v47, 0x22u);
      }
      return;
  }
}

const char *qmi::asShortString()
{
  uint64_t result = "CTL";
  switch("CTL")
  {
    case 0u:
      return result;
    case 1u:
      uint64_t result = "WDS";
      break;
    case 2u:
      uint64_t result = "DMS";
      break;
    case 3u:
      uint64_t result = "NAS";
      break;
    case 4u:
      uint64_t result = "QOS";
      break;
    case 5u:
      uint64_t result = "WMS";
      break;
    case 6u:
      uint64_t result = "PDS";
      break;
    case 8u:
      uint64_t result = "AT";
      break;
    case 9u:
      uint64_t result = "VS";
      break;
    case 0xAu:
      uint64_t result = "CAT";
      break;
    case 0xBu:
      uint64_t result = "UIM";
      break;
    case 0xCu:
      uint64_t result = "PBM";
      break;
    case 0x1Au:
      uint64_t result = "WDA";
      break;
    case 0x22u:
      uint64_t result = "COEX";
      break;
    case 0x24u:
      uint64_t result = "PDC";
      break;
    case 0x28u:
      uint64_t result = "787";
      break;
    case 0x2Au:
      uint64_t result = "DSD";
      break;
    case 0x2Bu:
      uint64_t result = "SSCTL";
      break;
    case 0x2Cu:
      uint64_t result = "MFSE";
      break;
    case 0x30u:
      uint64_t result = "DFS";
      break;
    case 0x52u:
      uint64_t result = "MS";
      break;
    case 0xE1u:
      uint64_t result = "AUDIO";
      break;
    case 0xE2u:
      uint64_t result = "BSP";
      break;
    case 0xE3u:
      uint64_t result = "CIQ";
      break;
    case 0xE4u:
      uint64_t result = "AWD";
      break;
    case 0xE5u:
      uint64_t result = "VINYL";
      break;
    case 0xE6u:
      uint64_t result = "MAVIMS";
      break;
    case 0xE7u:
      uint64_t result = "ELQM";
      break;
    case 0xE8u:
      uint64_t result = "P2P";
      break;
    case 0xE9u:
      uint64_t result = "APPS";
      break;
    case 0xEAu:
      uint64_t result = "SFT";
      break;
    default:
      uint64_t result = "???";
      break;
  }
  return result;
}

void ATCSRouterIPCDriver::handleWriteReady(uint64_t a1, uint64_t a2, uint64_t a3)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN19ATCSRouterIPCDriver16handleWriteReadyEP22ATCSDispatcherCallbackPv_block_invoke;
  block[3] = &__block_descriptor_tmp_15_0;
  block[4] = a1;
  void block[5] = a3;
  block[6] = a2;
  dispatch_block_t v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
  dispatch_async(*(dispatch_queue_t *)(a1 + 32), v4);
  _Block_release(v4);
}

void qmi::QmiClientProxyAdapter::handleReceivedIndication(uint64_t a1, const void *a2, size_t a3)
{
}

void qmi::ClientProxy::State::handleIndication_sync(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 232);
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4))
    {
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A622CC50](v7) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v7);
          xpc_object_t v8 = v7;
        }
        else
        {
          xpc_object_t v8 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t v7 = 0;
      }
      xpc_release(v7);
      xpc_object_t v11 = xpc_data_create(a2, a3);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, "ind_qmi_message", v11);
      xpc_object_t v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      uint64_t v13 = *(void *)(a1 + 232);
      xpc_object_t object = v8;
      if (v8) {
        xpc_retain(v8);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v13 + 24))(v13, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v8);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      unint64_t v10 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        unint64_t v10 = (void *)*v10;
      }
      *(_DWORD *)buf = 136315138;
      unsigned int v16 = v10;
      _os_log_error_impl(&dword_1A10C7000, v9, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when handling indication", buf, 0xCu);
    }
  }
}

void sub_1A10CE18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void qmi::EurTransportLocal::sendMessage(uint64_t a1, void **a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 104);
  if (v3)
  {
    size_t v5 = std::__shared_weak_count::lock(v3);
    xpc_object_t object[2] = v5;
    if (v5)
    {
      unint64_t v6 = v5;
      xpc_object_t v7 = *(void **)(a1 + 96);
      object[1] = v7;
      if (!v7) {
        goto LABEL_7;
      }
      xpc_object_t v8 = *a2;
      object[0] = v8;
      if (v8)
      {
        xpc_retain(v8);
        uint64_t v9 = v7[3];
        if (v9)
        {
LABEL_6:
          (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v9 + 48))(v9, object);
          xpc_release(object[0]);
          object[0] = 0;
LABEL_7:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
      }
      else
      {
        object[0] = xpc_null_create();
        uint64_t v9 = v7[3];
        if (v9) {
          goto LABEL_6;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
}

void sub_1A10CE310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::operator()(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      size_t v5 = v4;
      uint64_t v6 = *(void *)(a1 + 8);
      if (v6) {
        qmi::Client::State::handleClientMessage_sync(v6, &object);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  xpc_release(object);
}

void qmi::Client::State::handleClientMessage_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  uint64_t v4 = *(NSObject **)(a1 + 24);
  size_t v5 = operator new(0x10uLL);
  *size_t v5 = a1;
  v5[1] = v3;
  xpc_object_t v6 = xpc_null_create();
  dispatch_async_f(v4, v5, (dispatch_function_t)dispatch::async<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  xpc_release(v6);
}

uint64_t QMIControl::getPowerModeForMsg_sync(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = (unsigned __int8 **)(a1 + 208);
  xpc_object_t v3 = *(uint64_t **)(a1 + 208);
  if (!v3) {
    return 2;
  }
  uint64_t v8 = a1 + 208;
  uint64_t v9 = *(void *)(a1 + 208);
  do
  {
    unsigned int v10 = *(unsigned __int8 *)(v9 + 32);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      xpc_object_t v12 = (uint64_t *)v9;
    }
    else {
      xpc_object_t v12 = (uint64_t *)(v9 + 8);
    }
    if (v11) {
      uint64_t v8 = v9;
    }
    uint64_t v9 = *v12;
  }
  while (*v12);
  if ((unsigned __int8 **)v8 == v4 || *(unsigned __int8 *)(v8 + 32) > a2) {
    return 2;
  }
  do
  {
    while (1)
    {
      unsigned int v14 = v3;
      unsigned int v15 = *((unsigned __int8 *)v3 + 32);
      if (v15 > a2) {
        break;
      }
      if (v15 >= a2)
      {
        BOOL v21 = (unsigned __int16 *)(v14 + 6);
        uint64_t v20 = v14[6];
        if (v20) {
          goto LABEL_24;
        }
LABEL_34:
        BOOL v23 = v21;
        goto LABEL_35;
      }
      xpc_object_t v3 = (uint64_t *)v14[1];
      if (!v3)
      {
        unsigned int v16 = (uint64_t **)(v14 + 1);
        goto LABEL_19;
      }
    }
    xpc_object_t v3 = (uint64_t *)*v14;
  }
  while (*v14);
  unsigned int v16 = (uint64_t **)v14;
LABEL_19:
  uint64_t v17 = operator new(0x40uLL);
  v17[32] = a2;
  *((void *)v17 + 7) = 0;
  *((void *)v17 + 6) = 0;
  *((void *)v17 + 5) = v17 + 48;
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = v14;
  *unsigned int v16 = (uint64_t *)v17;
  uint64_t v18 = **(void **)(a1 + 200);
  uint64_t v19 = (uint64_t *)v17;
  if (v18)
  {
    *(void *)(a1 + 200) = v18;
    uint64_t v19 = *v16;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 208), v19);
  ++*(void *)(a1 + 216);
  uint64_t v22 = *((void *)v17 + 6);
  BOOL v21 = (unsigned __int16 *)(v17 + 48);
  uint64_t v20 = v22;
  if (!v22) {
    goto LABEL_34;
  }
LABEL_24:
  BOOL v23 = v21;
  do
  {
    unsigned int v24 = *(unsigned __int16 *)(v20 + 26);
    BOOL v25 = v24 >= a3;
    if (v24 >= a3) {
      BOOL v26 = (uint64_t *)v20;
    }
    else {
      BOOL v26 = (uint64_t *)(v20 + 8);
    }
    if (v25) {
      BOOL v23 = (unsigned __int16 *)v20;
    }
    uint64_t v20 = *v26;
  }
  while (*v26);
  if (v23 == v21 || v23[13] > a3) {
    goto LABEL_34;
  }
LABEL_35:
  BOOL v27 = *v4;
  BOOL v28 = v4;
  if (*v4)
  {
    while (1)
    {
      while (1)
      {
        BOOL v28 = (unsigned __int8 **)v27;
        unsigned int v29 = v27[32];
        if (v29 <= a2) {
          break;
        }
        BOOL v27 = *v28;
        uint64_t v4 = v28;
        if (!*v28) {
          goto LABEL_42;
        }
      }
      if (v29 >= a2) {
        break;
      }
      BOOL v27 = v28[1];
      if (!v27)
      {
        uint64_t v4 = v28 + 1;
        goto LABEL_42;
      }
    }
  }
  else
  {
LABEL_42:
    BOOL v30 = (unsigned __int8 *)v28;
    BOOL v28 = (unsigned __int8 **)operator new(0x40uLL);
    *((unsigned char *)v28 + 32) = a2;
    v28[7] = 0;
    v28[6] = 0;
    v28[5] = (unsigned __int8 *)(v28 + 6);
    *BOOL v28 = 0;
    v28[1] = 0;
    v28[2] = v30;
    NSObject *v4 = (unsigned __int8 *)v28;
    uint64_t v31 = **(void **)(a1 + 200);
    BOOL v32 = (uint64_t *)v28;
    if (v31)
    {
      *(void *)(a1 + 200) = v31;
      BOOL v32 = (uint64_t *)*v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 208), v32);
    ++*(void *)(a1 + 216);
  }
  if (v23 == (unsigned __int16 *)(v28 + 6)) {
    return 2;
  }
  else {
    return 1;
  }
}

void qmi::ClientProxy::State::handleResponse_sync(uint64_t a1, const void *a2, size_t a3, int a4)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 96);
  if (*(void *)(a1 + 104) != v4)
  {
    unint64_t v6 = *(void *)(a1 + 120);
    xpc_object_t v7 = (char *)(v4 + 8 * (v6 >> 7));
    uint64_t v8 = *(void *)v7;
    uint64_t v9 = *(void *)v7 + 32 * (v6 & 0x7F);
    uint64_t v10 = *(void *)(v4 + (((*(void *)(a1 + 128) + v6) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*(void *)(a1 + 128) + v6) & 0x7F);
    if (v9 != v10)
    {
      while (*(unsigned __int16 *)(*(void *)(v9 + 16) + 26) != a4)
      {
        v9 += 32;
        if (v9 - v8 == 4096)
        {
          uint64_t v13 = *((void *)v7 + 1);
          v7 += 8;
          uint64_t v8 = v13;
          uint64_t v9 = v13;
        }
        if (v9 == v10) {
          return;
        }
      }
      xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
      if (v14 || (xpc_object_t v14 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A622CC50](v14) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v14);
          xpc_object_t v15 = v14;
        }
        else
        {
          xpc_object_t v15 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t v14 = 0;
      }
      xpc_release(v14);
      xpc_object_t v16 = xpc_data_create(a2, a3);
      if (!v16) {
        xpc_object_t v16 = xpc_null_create();
      }
      xpc_dictionary_set_value(v15, "resp_qmi_message", v16);
      xpc_object_t v17 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v17);
      xpc_object_t v18 = xpc_int64_create(*(unsigned __int16 *)(*(void *)(v9 + 16) + 26));
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_dictionary_set_value(v15, "txid", v18);
      xpc_object_t v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      uint64_t v20 = *(void *)(a1 + 232);
      if (!v20)
      {
        BOOL v21 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = (void *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0) {
            uint64_t v22 = (void *)*v22;
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = v22;
          _os_log_error_impl(&dword_1A10C7000, v21, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when handling response", buf, 0xCu);
        }
        goto LABEL_54;
      }
      xpc_object_t object = v15;
      if (v15) {
        xpc_retain(v15);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v20 + 24))(v20, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      unint64_t v23 = *(void *)(a1 + 120);
      uint64_t v24 = *(void *)(a1 + 96);
      uint64_t v25 = *(void *)(a1 + 104);
      BOOL v26 = (int *)(v24 + 8 * (v23 >> 7));
      if (v25 == v24)
      {
        uint64_t v27 = 0;
        if (v9) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v27 = *(void *)v26 + 32 * (*(void *)(a1 + 120) & 0x7FLL);
        if (v9 != v27)
        {
LABEL_28:
          uint64_t v28 = ((v9 - *(void *)v7) >> 5) + 16 * (v7 - (char *)v26);
          uint64_t v29 = *(void *)v26;
          uint64_t v30 = v27;
          uint64_t v31 = (int *)(v24 + 8 * (v23 >> 7));
          unint64_t v32 = v28 - ((v27 - *(void *)v26) >> 5);
          if (v32)
          {
            if (v28 < 1)
            {
              unint64_t v33 = 127 - v28;
              LOBYTE(v28) = ~(127 - v28);
              uint64_t v31 = &v26[-2 * (v33 >> 7)];
            }
            else
            {
              uint64_t v31 = &v26[2 * ((unint64_t)v28 >> 7)];
            }
            uint64_t v29 = *(void *)v31;
            uint64_t v30 = *(void *)v31 + 32 * (v28 & 0x7F);
            uint64_t v34 = *(void *)(a1 + 128);
            if (v32 > (unint64_t)(v34 - 1) >> 1)
            {
              uint64_t v35 = (v30 - v29) >> 5;
              if (v30 - v29 < -31)
              {
                unint64_t v52 = 126 - v35;
                char v36 = ~(_BYTE)v52;
                BOOL v37 = &v31[-2 * (v52 >> 7)];
              }
              else
              {
                char v36 = v35 + 1;
                BOOL v37 = &v31[2 * ((unint64_t)(v35 + 1) >> 7)];
              }
              uint64_t v53 = *(void *)v37;
              int v54 = (int *)(*(void *)v37 + 32 * (v36 & 0x7F));
              unint64_t v55 = v34 + v23;
              int v56 = (int **)(v24 + 8 * (v55 >> 7));
              if (v25 == v24) {
                __int16 v57 = 0;
              }
              else {
                __int16 v57 = &(*v56)[8 * (v55 & 0x7F)];
              }
              if (v37 == (int *)v56)
              {
                memset(buf, 170, sizeof(buf));
                std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>((int **)buf, v54, v57, v31, v30);
              }
              else
              {
                memset(buf, 170, sizeof(buf));
                std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>((int **)buf, v54, (int *)(v53 + 4096), v31, v30);
                unint64_t v58 = *(int **)&buf[8];
                uint64_t v59 = *(void *)&buf[16];
                v60 = (int **)(v37 + 2);
                if (v37 + 2 != (int *)v56)
                {
                  do
                  {
                    int v61 = *v60;
                    uint64_t v62 = *v60 + 1024;
                    memset(buf, 170, sizeof(buf));
                    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>((int **)buf, v61, v62, v58, v59);
                    unint64_t v58 = *(int **)&buf[8];
                    uint64_t v59 = *(void *)&buf[16];
                    ++v60;
                  }
                  while (v60 != v56);
                }
                char v63 = *v56;
                memset(buf, 170, sizeof(buf));
                std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>((int **)buf, v63, v57, v58, v59);
              }
              uint64_t v64 = *(void *)&buf[16];
              long long v65 = *(NSObject **)(*(void *)&buf[16] + 8);
              if (v65) {
                dispatch_source_cancel(v65);
              }
              uint64_t v66 = *(std::__shared_weak_count **)(v64 + 24);
              if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
              long long v67 = *(NSObject **)(v64 + 8);
              if (v67) {
                dispatch_release(v67);
              }
              uint64_t v69 = *(void *)(a1 + 96);
              uint64_t v68 = *(void *)(a1 + 104);
              uint64_t v70 = v68 - v69;
              BOOL v71 = v68 == v69;
              uint64_t v73 = *(void *)(a1 + 120);
              uint64_t v72 = *(void *)(a1 + 128);
              *(void *)(a1 + 128) = v72 - 1;
              uint64_t v74 = 16 * v70 - 1;
              if (v71) {
                uint64_t v74 = 0;
              }
              if ((unint64_t)(v74 - (v72 + v73) + 1) >= 0x100)
              {
                operator delete(*(void **)(v68 - 8));
                *(void *)(a1 + 104) -= 8;
              }
LABEL_53:
              std::deque<qmi::ClientProxy::State::Transaction>::shrink_to_fit(a1 + 88);
              qmi::ClientProxy::State::sendIfPossible_sync((qmi::ClientProxy::State *)a1);
LABEL_54:
              xpc_release(v15);
              return;
            }
          }
LABEL_37:
          uint64_t v38 = (v30 - v29) >> 5;
          if (v30 - v29 < -31)
          {
            unint64_t v47 = 126 - v38;
            BOOL v40 = &v31[-2 * (v47 >> 7)];
            uint64_t v41 = *(void *)v40 + 32 * (~(_BYTE)v47 & 0x7F);
            if (v26 != v31) {
              goto LABEL_39;
            }
          }
          else
          {
            unint64_t v39 = v38 + 1;
            BOOL v40 = &v31[2 * (v39 >> 7)];
            uint64_t v41 = *(void *)v40 + 32 * (v39 & 0x7F);
            if (v26 != v31)
            {
LABEL_39:
              memset(buf, 170, sizeof(buf));
              std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(buf, v29, v30, v40, v41);
              int v42 = *(void **)&buf[8];
              uint64_t v43 = *(void *)&buf[16];
              for (i = (uint64_t *)(v31 - 2); i != (uint64_t *)v26; --i)
              {
                uint64_t v45 = *i;
                uint64_t v46 = *i + 4096;
                memset(buf, 170, sizeof(buf));
                std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(buf, v45, v46, v42, v43);
                int v42 = *(void **)&buf[8];
                uint64_t v43 = *(void *)&buf[16];
              }
              std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(buf, v27, *(void *)v26 + 4096, v42, v43);
              goto LABEL_44;
            }
          }
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(buf, v27, v30, v40, v41);
LABEL_44:
          int v48 = *(NSObject **)(v27 + 8);
          if (v48) {
            dispatch_source_cancel(v48);
          }
          __int16 v49 = *(std::__shared_weak_count **)(v27 + 24);
          if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
          unsigned int v50 = *(NSObject **)(v27 + 8);
          if (v50) {
            dispatch_release(v50);
          }
          int64x2_t v51 = vaddq_s64(*(int64x2_t *)(a1 + 120), (int64x2_t)xmmword_1A1125FF0);
          *(int64x2_t *)(a1 + 120) = v51;
          if (v51.i64[0] >= 0x100uLL)
          {
            operator delete(**(void ***)(a1 + 96));
            *(void *)(a1 + 96) += 8;
            *(void *)(a1 + 120) -= 128;
          }
          goto LABEL_53;
        }
      }
      uint64_t v29 = *(void *)v26;
      uint64_t v30 = v27;
      uint64_t v31 = (int *)(v24 + 8 * (v23 >> 7));
      goto LABEL_37;
    }
  }
}

void sub_1A10CED48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void qmi::ClientProxy::State::sendIfPossible_sync(qmi::ClientProxy::State *this)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *((_DWORD *)this + 19);
  BOOL v2 = v1 > 7;
  int v3 = (1 << v1) & 0xCF;
  if (v2 || v3 == 0)
  {
    while (*((void *)this + 22))
    {
      unint64_t v6 = *((void *)this + 16);
      if (v6 >= *((int *)this + 21)) {
        break;
      }
      uint64_t v7 = *((void *)this + 13);
      uint64_t v8 = *((void *)this + 12);
      unint64_t v9 = *((void *)this + 21);
      uint64_t v10 = *(void *)(*((void *)this + 18) + ((v9 >> 4) & 0xFFFFFFFFFFFFFF8));
      if (v7 == v8) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = 16 * (v7 - v8) - 1;
      }
      unint64_t v12 = *((void *)this + 15) + v6;
      if (v11 == v12)
      {
        std::deque<qmi::ClientProxy::State::Transaction>::__add_back_capacity((void *)this + 11);
        uint64_t v8 = *((void *)this + 12);
        unint64_t v12 = *((void *)this + 16) + *((void *)this + 15);
      }
      uint64_t v13 = v10 + 32 * (v9 & 0x7F);
      uint64_t v14 = *(void *)(v8 + ((v12 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v12 & 0x7F);
      *(_DWORD *)uint64_t v14 = *(_DWORD *)v13;
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(v13 + 8);
      *(void *)(v13 + 8) = 0;
      *(void *)(v14 + 24) = *(void *)(v13 + 24);
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      ++*((void *)this + 16);
      uint64_t v15 = *(void *)(*((void *)this + 18) + ((*((void *)this + 21) >> 4) & 0xFFFFFFFFFFFFFF8))
          + 32 * (*((void *)this + 21) & 0x7FLL);
      xpc_object_t v17 = (dispatch_object_t *)(v15 + 8);
      xpc_object_t v16 = *(NSObject **)(v15 + 8);
      if (v16) {
        dispatch_source_cancel(v16);
      }
      xpc_object_t v18 = *(std::__shared_weak_count **)(v15 + 24);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (*v17) {
        dispatch_release(*v17);
      }
      int64x2_t v19 = vaddq_s64(*(int64x2_t *)((char *)this + 168), (int64x2_t)xmmword_1A1125FF0);
      *(int64x2_t *)((char *)this + 168) = v19;
      if (v19.i64[0] >= 0x100uLL)
      {
        operator delete(**((void ***)this + 18));
        *((void *)this + 18) += 8;
        *((void *)this + 21) -= 128;
      }
      unint64_t v20 = *((void *)this + 16) + *((void *)this + 15) - 1;
      uint64_t v21 = *(void *)(*((void *)this + 12) + ((v20 >> 4) & 0xFFFFFFFFFFFFFF8));
      unint64_t v22 = v20 & 0x7F;
      uint64_t v23 = *((void *)this + 28);
      if (!v23) {
        goto LABEL_49;
      }
      uint64_t v26 = *(void *)(v23 + 8);
      uint64_t v24 = v23 + 8;
      uint64_t v25 = v26;
      if (!v26) {
        goto LABEL_49;
      }
      uint64_t v27 = v21 + 32 * v22;
      uint64_t v29 = *(void *)(v27 + 16);
      uint64_t v28 = v27 + 16;
      unsigned int v30 = *(unsigned __int16 *)(v29 + 26);
      uint64_t v31 = v24;
      do
      {
        unsigned int v32 = *(unsigned __int16 *)(v25 + 32);
        BOOL v33 = v32 >= v30;
        if (v32 >= v30) {
          uint64_t v34 = (uint64_t *)v25;
        }
        else {
          uint64_t v34 = (uint64_t *)(v25 + 8);
        }
        if (v33) {
          uint64_t v31 = v25;
        }
        uint64_t v25 = *v34;
      }
      while (*v34);
      if (v31 != v24
        && *(unsigned __int16 *)(v31 + 32) <= v30
        && (uint64_t v35 = *(const void **)(v31 + 40)) != 0
        && (char v36 = _Block_copy(v35)) != 0)
      {
        _Block_release(v36);
        BOOL v37 = *((void *)this + 5);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v38 = (char *)this + 48;
          if (*((char *)this + 71) < 0) {
            uint64_t v38 = (char *)*((void *)this + 6);
          }
          int v39 = *(unsigned __int16 *)(*(void *)v28 + 24);
          *(_DWORD *)buf = 136315394;
          unsigned int v50 = v38;
          __int16 v51 = 1024;
          int v52 = v39;
          _os_log_impl(&dword_1A10C7000, v37, OS_LOG_TYPE_DEFAULT, "#I [%s]: Call back has been registered for this request 0x%04x", buf, 0x12u);
        }
        uint64_t v40 = *((void *)this + 28);
        unsigned int v41 = *(unsigned __int16 *)(*(void *)v28 + 24);
        uint64_t v44 = *(void *)(v40 + 8);
        uint64_t v42 = v40 + 8;
        uint64_t v43 = v44;
        do
        {
          unsigned int v45 = *(unsigned __int16 *)(v43 + 32);
          BOOL v46 = v45 >= v41;
          if (v45 >= v41) {
            unint64_t v47 = (uint64_t *)v43;
          }
          else {
            unint64_t v47 = (uint64_t *)(v43 + 8);
          }
          if (v46) {
            uint64_t v42 = v43;
          }
          uint64_t v43 = *v47;
        }
        while (*v47);
        int v48 = (void (**)(void *, void))_Block_copy(*(const void **)(v42 + 40));
        v48[2](v48, *(unsigned __int16 *)(*(void *)v28 + 26));
        _Block_release(v48);
      }
      else
      {
LABEL_49:
        (*(void (**)(qmi::ClientProxy::State *, unint64_t))(*(void *)this + 48))(this, v21 + 32 * v22 + 16);
      }
    }
    std::deque<qmi::ClientProxy::State::Transaction>::shrink_to_fit((uint64_t)this + 136);
    qmi::ClientProxy::State::checkIfLowPower_sync(this);
  }
}

void sub_1A10CF1B4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<qmi::ClientProxy::State::Transaction>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    unint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void ***)(a1 + 8);
    if (v3 >= 0x80)
    {
      operator delete(*v4);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      uint64_t v2 = *(void *)(a1 + 40);
      unint64_t v3 = *(void *)(a1 + 32) - 128;
      *(void *)(a1 + 32) = v3;
    }
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = 16 * (v5 - (void)v4) - 1;
    if ((void **)v5 == v4) {
      uint64_t v6 = 0;
    }
    if (v6 - (v3 + v2) >= 0x80)
    {
      operator delete(*(void **)(v5 - 8));
      uint64_t v4 = *(void ***)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16) - 8;
      *(void *)(a1 + 16) = v5;
    }
  }
  else
  {
    uint64_t v4 = *(void ***)(a1 + 16);
    if (v4 != *(void ***)(a1 + 8))
    {
      do
      {
        operator delete(*(v4 - 1));
        uint64_t v7 = *(void ***)(a1 + 8);
        uint64_t v4 = (void **)(*(void *)(a1 + 16) - 8);
        *(void *)(a1 + 16) = v4;
      }
      while (v4 != v7);
    }
    *(void *)(a1 + 32) = 0;
    uint64_t v5 = (uint64_t)v4;
  }
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = v5 - (void)v4;
  unint64_t v10 = (v5 - (uint64_t)v4) >> 3;
  if (v10 < (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3)
  {
    if ((void **)v5 == v4)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 8 * v10;
      goto LABEL_23;
    }
    if (v9 < 0) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = operator new(v5 - (void)v4);
    uint64_t v12 = (uint64_t)&v11[v10];
    if ((unint64_t)(v9 - 8) < 0x18 || (unint64_t)((char *)v11 - (char *)v4) < 0x20)
    {
      xpc_object_t v16 = v11;
      xpc_object_t v17 = v4;
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = ((unint64_t)(v9 - 8) >> 3) + 1;
      uint64_t v15 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      xpc_object_t v16 = &v11[v15];
      xpc_object_t v17 = &v4[v15];
      uint64_t v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v19 = &v11[v13];
        long long v20 = *(_OWORD *)&v4[v13 + 2];
        *int64x2_t v19 = *(_OWORD *)&v4[v13];
        v19[1] = v20;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_23:
        *(void *)a1 = v11;
        *(void *)(a1 + 8) = v11;
        *(void *)(a1 + 16) = v12;
        *(void *)(a1 + 24) = v12;
        if (v8)
        {
          operator delete(v8);
        }
        return;
      }
    }
    do
    {
      uint64_t v21 = (uint64_t)*v17++;
      *v16++ = v21;
    }
    while (v16 != (void *)v12);
    goto LABEL_23;
  }
}

void qmi::ClientProxy::State::checkIfLowPower_sync(qmi::ClientProxy::State *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *((void *)this + 24);
  if (v1 && !*((void *)this + 16) && *((_DWORD *)this + 19) != 4)
  {
    unint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      int v5 = 136315138;
      uint64_t v6 = v4;
      _os_log_debug_impl(&dword_1A10C7000, v3, OS_LOG_TYPE_DEBUG, "#D [%s]: Nothing further to send: low-power hold is complete", (uint8_t *)&v5, 0xCu);
      unsigned int v1 = *((void *)this + 24);
      *((void *)this + 24) = 0;
      if (!v1) {
        goto LABEL_7;
      }
    }
    else
    {
      *((void *)this + 24) = 0;
    }
    dispatch_group_leave(v1);
    dispatch_release(v1);
LABEL_7:
    *((_DWORD *)this + 19) = 6;
  }
}

BOOL qmi::EurTransportLocal::isValid(qmi::EurTransportLocal *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  BOOL v5 = *((void *)this + 12) != 0;
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(void *result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v7 = a2;
  if (a2 == a3) {
    goto LABEL_23;
  }
  uint64_t v23 = result;
  uint64_t v8 = *a4;
  uint64_t v9 = a3;
  while (1)
  {
    uint64_t v10 = (a5 - v8) >> 5;
    if ((v9 - v7) >> 5 >= v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = (v9 - v7) >> 5;
    }
    if (v11)
    {
      uint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = v9 + v12;
        uint64_t v14 = a5 + v12;
        int v15 = *(_DWORD *)(v9 + v12 - 32);
        uint64_t v16 = *(void *)(v9 + v12 - 8);
        long long v17 = *(_OWORD *)(v9 + v12 - 24);
        *(void *)(v13 - 24) = 0;
        *(void *)(v13 - 16) = 0;
        *(void *)(v13 - 8) = 0;
        uint64_t v18 = *(std::__shared_weak_count **)(a5 + v12 - 8);
        *(void *)(v14 - 8) = v16;
        *(_DWORD *)(v14 - 32) = v15;
        int64x2_t v19 = *(NSObject **)(a5 + v12 - 24);
        *(_OWORD *)(v14 - 24) = v17;
        if (v19) {
          dispatch_source_cancel(v19);
        }
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
        if (v19) {
          goto LABEL_14;
        }
LABEL_8:
        v12 -= 32;
        if (-32 * v11 == v12)
        {
          a5 += v12;
          goto LABEL_18;
        }
      }
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!v19) {
        goto LABEL_8;
      }
LABEL_14:
      dispatch_release(v19);
      goto LABEL_8;
    }
LABEL_18:
    v9 -= 32 * v11;
    if (v9 == v7) {
      break;
    }
    uint64_t v20 = *--v6;
    uint64_t v8 = v20;
    a5 = v20 + 4096;
  }
  if (*v6 + 4096 == a5)
  {
    uint64_t v21 = v6[1];
    ++v6;
    a5 = v21;
  }
  uint64_t v7 = a3;
  uint64_t result = v23;
LABEL_23:
  *uint64_t result = v7;
  result[1] = v6;
  result[2] = a5;
  return result;
}

void qmi::QmiClientProxyAdapter::handleReceivedData(uint64_t a1, int a2, const void *a3, size_t a4)
{
}

void non-virtual thunk to'qmi::QmiClientProxyAdapter::send_sync(uint64_t a1, uint64_t *a2)
{
}

void std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,0>(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v58 = a5;
  uint64_t v63 = a3;
  if (a2 == a4)
  {
    if (a3 != a5)
    {
      v60 = a4;
      __int16 v57 = a1;
      uint64_t v45 = *a6;
      uint64_t v46 = a5;
      for (uint64_t i = a7; ; uint64_t i = v45 + 4080)
      {
        int64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((i - v45) >> 3);
        __int16 v49 = a6;
        unint64_t v50 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v46 - a3) >> 3)) >= v48
            ? v48
            : 0xAAAAAAAAAAAAAAABLL * ((v46 - a3) >> 3);
        if (v50)
        {
          __int16 v51 = (void *)(v46 - 8);
          uint64_t v52 = -24 * v50;
          uint64_t v7 = i;
          do
          {
            *(_WORD *)(v7 - 24) = *((_WORD *)v51 - 8);
            v7 -= 24;
            uint64_t v54 = *(v51 - 1);
            uint64_t v53 = *v51;
            if (*v51) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
            }
            unint64_t v55 = *(std::__shared_weak_count **)(i - 8);
            *(void *)(i - 16) = v54;
            *(void *)(i - 8) = v53;
            if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
            v51 -= 3;
            uint64_t i = v7;
            v52 += 24;
          }
          while (v52);
        }
        else
        {
          uint64_t v7 = i;
        }
        v46 -= 24 * v50;
        a3 = v63;
        if (v46 == v63) {
          break;
        }
        a6 = v49 - 1;
        uint64_t v45 = *(v49 - 1);
      }
      a6 = v49;
      if (*v49 + 4080 == v7)
      {
        a6 = v49 + 1;
        uint64_t v7 = v49[1];
      }
      a1 = v57;
      a5 = v58;
      a4 = v60;
    }
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = v7;
  }
  else
  {
    int v56 = a1;
    uint64_t v8 = *a4;
    uint64_t v59 = a4;
    if (*a4 != a5)
    {
      uint64_t v9 = *a6;
      uint64_t v10 = a5;
      for (uint64_t j = a7; ; uint64_t j = v9 + 4080)
      {
        uint64_t v12 = a6;
        int64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((j - v9) >> 3);
        unint64_t v14 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v10 - v8) >> 3)) >= v13
            ? v13
            : 0xAAAAAAAAAAAAAAABLL * ((v10 - v8) >> 3);
        if (v14)
        {
          int v15 = (void *)(v10 - 8);
          uint64_t v16 = -24 * v14;
          uint64_t v7 = j;
          do
          {
            *(_WORD *)(v7 - 24) = *((_WORD *)v15 - 8);
            v7 -= 24;
            uint64_t v18 = *(v15 - 1);
            uint64_t v17 = *v15;
            if (*v15) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
            }
            int64x2_t v19 = *(std::__shared_weak_count **)(j - 8);
            *(void *)(j - 16) = v18;
            *(void *)(j - 8) = v17;
            if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
            v15 -= 3;
            uint64_t j = v7;
            v16 += 24;
          }
          while (v16);
        }
        else
        {
          uint64_t v7 = j;
        }
        v10 -= 24 * v14;
        if (v10 == v8) {
          break;
        }
        a6 = v12 - 1;
        uint64_t v9 = *(v12 - 1);
      }
      a6 = v12;
      if (*v12 + 4080 == v7)
      {
        a6 = v12 + 1;
        uint64_t v7 = v12[1];
      }
      a4 = v59;
      a3 = v63;
    }
    uint64_t v20 = a4 - 1;
    if (a4 - 1 != a2)
    {
      uint64_t v21 = *a6;
      do
      {
        while (1)
        {
          uint64_t v62 = v20;
          uint64_t v22 = *v20;
          uint64_t v23 = *v20 + 4080;
          while (1)
          {
            uint64_t v64 = a6;
            int64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v21) >> 3);
            uint64_t v25 = v22;
            int64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3);
            int64_t v27 = v26 >= v24 ? v24 : v26;
            if (v27)
            {
              uint64_t v28 = (void *)(v23 - 8);
              uint64_t v29 = -24 * v27;
              uint64_t v30 = v7;
              do
              {
                *(_WORD *)(v30 - 24) = *((_WORD *)v28 - 8);
                v30 -= 24;
                uint64_t v32 = *(v28 - 1);
                uint64_t v31 = *v28;
                if (*v28) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
                }
                BOOL v33 = *(std::__shared_weak_count **)(v7 - 8);
                *(void *)(v7 - 16) = v32;
                *(void *)(v7 - 8) = v31;
                if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
                v28 -= 3;
                uint64_t v7 = v30;
                v29 += 24;
              }
              while (v29);
            }
            else
            {
              uint64_t v30 = v7;
            }
            v23 -= 24 * v27;
            if (v23 == v25) {
              break;
            }
            uint64_t v22 = v25;
            a6 = v64 - 1;
            uint64_t v21 = *(v64 - 1);
            uint64_t v7 = v21 + 4080;
          }
          a6 = v64;
          uint64_t v21 = *v64;
          if (*v64 + 4080 == v30) {
            break;
          }
          uint64_t v7 = v30;
          a3 = v63;
          uint64_t v20 = v62 - 1;
          if (v62 - 1 == a2) {
            goto LABEL_42;
          }
        }
        a6 = v64 + 1;
        uint64_t v21 = v64[1];
        uint64_t v7 = v21;
        a3 = v63;
        uint64_t v20 = v62 - 1;
      }
      while (v62 - 1 != a2);
    }
LABEL_42:
    uint64_t v34 = *a2 + 4080;
    if (v34 != a3)
    {
      uint64_t v35 = *a6;
      for (uint64_t k = v7; ; uint64_t k = v35 + 4080)
      {
        BOOL v37 = a6;
        int64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((k - v35) >> 3);
        unint64_t v39 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v34 - a3) >> 3)) >= v38
            ? v38
            : 0xAAAAAAAAAAAAAAABLL * ((v34 - a3) >> 3);
        if (v39)
        {
          uint64_t v40 = (void *)(v34 - 8);
          uint64_t v41 = -24 * v39;
          uint64_t v7 = k;
          do
          {
            *(_WORD *)(v7 - 24) = *((_WORD *)v40 - 8);
            v7 -= 24;
            uint64_t v43 = *(v40 - 1);
            uint64_t v42 = *v40;
            if (*v40) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v44 = *(std::__shared_weak_count **)(k - 8);
            *(void *)(k - 16) = v43;
            *(void *)(k - 8) = v42;
            if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
            v40 -= 3;
            uint64_t k = v7;
            v41 += 24;
          }
          while (v41);
        }
        else
        {
          uint64_t v7 = k;
        }
        v34 -= 24 * v39;
        a3 = v63;
        if (v34 == v63) {
          break;
        }
        a6 = v37 - 1;
        uint64_t v35 = *(v37 - 1);
      }
      a6 = v37;
      if (*v37 + 4080 == v7)
      {
        a6 = v37 + 1;
        uint64_t v7 = v37[1];
      }
    }
    *int v56 = v59;
    v56[1] = v58;
    v56[2] = a6;
    v56[3] = v7;
  }
}

void qmi::QmiClientProxyAdapter::send_sync(void *a1, uint64_t *a2)
{
  uint64_t v25 = 0;
  int64_t v26 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[38];
  if (v4)
  {
    BOOL v5 = std::__shared_weak_count::lock(v4);
    int64_t v26 = v5;
    if (v5)
    {
      uint64_t v25 = a1[37];
      if (v25 ? QMux::BOOL_true_type : 0)
      {
        uint64_t v7 = (std::__shared_weak_count *)a1[8];
        if (!v7 || (uint64_t v8 = a1[7], (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v14 = v8 - 48;
        if (!v8) {
          uint64_t v14 = 0;
        }
        uint64_t v23 = v14;
        int64_t v24 = v9;
        uint64_t v21 = v14;
        uint64_t v22 = v9;
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        int v15 = (std::__shared_weak_count *)a2[1];
        uint64_t v19 = *a2;
        uint64_t v20 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        QMux::send(&v25, &v21, &v19, v10, v11, v12, v13);
        uint64_t v16 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        uint64_t v17 = v22;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        uint64_t v18 = v24;
        if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        BOOL v5 = v26;
      }
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1A10CFE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
}

void sub_1A10CFEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  QMux::~QMux((QMux *)va);
  _Unwind_Resume(a1);
}

void QMux::send(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  if (*a2)
  {
    uint64_t v10 = (void *)*a1;
    if (!*a1) {
      return;
    }
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x6DD, "client", "is not", "true", "Cannot queue send: Client is empty! (svc=?? client=?? txid=%d msgid=0x%x)", a7, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24));
    uint64_t v10 = (void *)*a1;
    if (!*a1) {
      return;
    }
  }
  uint64_t v11 = a1[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  long long v12 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  long long v20 = *(_OWORD *)a3;
  long long v21 = v12;
  *a3 = 0;
  a3[1] = 0;
  int64_t v13 = (std::__shared_weak_count *)v10[2];
  if (!v13 || (v14 = v10[1], (int v15 = std::__shared_weak_count::lock(v13)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v16 = v15;
  uint64_t v17 = operator new(0x30uLL);
  *uint64_t v17 = v10;
  v17[1] = v11;
  *((_OWORD *)v17 + 1) = v21;
  *((_OWORD *)v17 + 2) = v20;
  uint64_t v18 = v10[3];
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v19 = operator new(0x18uLL);
  *uint64_t v19 = v17;
  v19[1] = v14;
  v19[2] = v16;
  dispatch_async_f(v18, v19, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>(QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0,std::default_delete<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
}

void qmi::QmiClientProxyAdapter::handleSentData(qmi::QmiClientProxyAdapter *this, int a2)
{
}

void qmi::ClientProxy::State::handleSentMessage_sync(qmi::ClientProxy::State *this, int a2)
{
  uint64_t v2 = *((void *)this + 12);
  if (*((void *)this + 13) != v2)
  {
    __int16 v3 = a2;
    unint64_t v5 = *((void *)this + 15);
    uint64_t v6 = (uint64_t *)(v2 + 8 * (v5 >> 7));
    uint64_t v7 = *v6;
    uint64_t v8 = *v6 + 32 * (v5 & 0x7F);
    uint64_t v9 = *(void *)(v2 + (((*((void *)this + 16) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*((void *)this + 16) + v5) & 0x7F);
    if (v8 != v9)
    {
      while (*(unsigned __int16 *)(*(void *)(v8 + 16) + 26) != a2)
      {
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          uint64_t v17 = v6[1];
          ++v6;
          uint64_t v7 = v17;
          uint64_t v8 = v17;
        }
        if (v8 == v9) {
          return;
        }
      }
    }
    if (v8 != v9)
    {
      uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
      if (!v10 || (v11 = *((void *)this + 1), (long long v12 = std::__shared_weak_count::lock(v10)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      int64_t v13 = v12;
      p_shared_weak_owners = &v12->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v13);
      }
      __int16 v15 = *(_WORD *)(*(void *)(v8 + 16) + 24);
      uint64_t v16 = *((void *)this + 3);
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 1174405120;
      v18[2] = ___ZN3qmi11ClientProxy5State22handleSentMessage_syncEt_block_invoke;
      v18[3] = &__block_descriptor_tmp_26_0;
      v18[4] = this;
      v18[5] = v11;
      uint64_t v19 = v13;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      __int16 v20 = v3;
      __int16 v21 = v15;
      qmi::ClientProxy::State::Transaction::startTimer((unsigned int *)v8, v16, (uint64_t)v18);
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void qmi::ClientProxy::State::Transaction::startTimer(unsigned int *a1, dispatch_queue_t queue, uint64_t a3)
{
  if (!*((void *)a1 + 1))
  {
    unint64_t v5 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, queue);
    uint64_t v6 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v5;
    if (v6)
    {
      dispatch_release(v6);
      unint64_t v5 = *((void *)a1 + 1);
    }
    if (v5)
    {
      int64_t v7 = 1000000 * *a1;
      dispatch_retain(v5);
      uint64_t v8 = *((void *)a1 + 1);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 1174405120;
      v11[2] = ___ZN3qmi11ClientProxy5State11Transaction10startTimerEP16dispatch_queue_sU13block_pointerFvvE_block_invoke;
      v11[3] = &__block_descriptor_tmp_39;
      v11[4] = a3;
      dispatch_object_t object = v5;
      dispatch_retain(v5);
      dispatch_source_set_event_handler(v8, v11);
      uint64_t v9 = *((void *)a1 + 1);
      dispatch_time_t v10 = dispatch_time(0, v7);
      dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
      dispatch_activate(*((dispatch_object_t *)a1 + 1));
      if (object) {
        dispatch_release(object);
      }
      dispatch_release(v5);
    }
  }
}

void qmi::EurTransportXPC::sendMessage(uint64_t a1, xpc_object_t *a2)
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

BOOL qmi::EurTransportXPC::isValid(qmi::EurTransportXPC *this)
{
  return MEMORY[0x1A622CC50](*((void *)this + 12)) == MEMORY[0x1E4F14578];
}

void ___ZN4QMux5State19handleReadData_syncEPKhj_block_invoke(uint64_t a1, unsigned __int8 *a2, unsigned __int16 *a3, unsigned int a4, int a5)
{
  if ((a4 & 0x80000000) != 0) {
    return;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (*a2 == 1)
  {
    if (a2[4] == 128)
    {
      if (a5 >= (int)a4)
      {
        uint64_t v17 = *(const void **)(a1 + 40);
        unint64_t v18 = a4;
        uint64_t v19 = *(void *)(a1 + 32);
        size_t v20 = *(unsigned int *)(a1 + 48);
        QMux::State::handleMessage_sync(v19, (uint64_t)a2, v17, v20, a3, v18);
      }
      else
      {
        unsigned int v7 = *(_DWORD *)(a1 + 48);
        if (v7 >= 0x20) {
          uint64_t v8 = 32;
        }
        else {
          uint64_t v8 = v7;
        }
        uint64_t v9 = (const char *)(v6 + 40);
        dispatch_time_t v10 = (const char *)(v6 + 40);
        if (*(char *)(v6 + 63) < 0) {
          dispatch_time_t v10 = *(const char **)v9;
        }
        (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(v6 + 80) + 24))(*(void *)(v6 + 80), 6, "[%s] Not enough bytes in the buffer. Expecting %d, only %d available; first %u bytes are:\n",
          v10,
          *((unsigned __int16 *)a2 + 1) + 1,
          *(_DWORD *)(a1 + 48),
          v8);
        uint64_t v11 = *(void *)(v6 + 80);
        if (*(char *)(v6 + 63) < 0) {
          uint64_t v9 = *(const char **)v9;
        }
        uint64_t v12 = *(void *)(a1 + 40);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD850, memory_order_acquire) & 1) == 0)
        {
          uint64_t v22 = v11;
          int v21 = __cxa_guard_acquire(&qword_1EBBDD850);
          uint64_t v11 = v22;
          if (v21)
          {
            _MergedGlobals_1 = (uint64_t)&unk_1EF43DCC0;
            __cxa_atexit((void (*)(void *))QMuxCommandFormatter::~QMuxCommandFormatter, &_MergedGlobals_1, &dword_1A10C7000);
            __cxa_guard_release(&qword_1EBBDD850);
            uint64_t v11 = v22;
          }
        }
        ATCSLogger::logCommand(v11, 6, (uint64_t)v9, v12, v8, (uint64_t)&_MergedGlobals_1);
      }
      return;
    }
    __int16 v15 = (const char *)(v6 + 40);
    if (*(char *)(v6 + 63) < 0) {
      __int16 v15 = *(const char **)v15;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(v6 + 80) + 24))(*(void *)(v6 + 80), 6, "[%s] Invalid control flags (got 0x%02x, available=%d); stream is corrupt. Resetting QMux.\n",
      v15,
      a2[4],
      *(_DWORD *)(a1 + 48));
    uint64_t v14 = (char *)operator new(0x30uLL);
    uint64_t v23 = v14;
    long long v24 = xmmword_1A1126EF0;
    strcpy(v14, "QMux read parsing error: bad control flags");
    QMux::State::invokeReset((void *)v6, (uint64_t)&v23);
  }
  else
  {
    int64_t v13 = (const char *)(v6 + 40);
    if (*(char *)(v6 + 63) < 0) {
      int64_t v13 = *(const char **)v13;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(v6 + 80) + 24))(*(void *)(v6 + 80), 6, "[%s] Invalid interface type byte (got 0x%02x, available=%d); stream is corrupt. Resetting QMux.\n",
      v13,
      *a2,
      *(_DWORD *)(a1 + 48));
    uint64_t v14 = (char *)operator new(0x28uLL);
    uint64_t v25 = v14;
    long long v26 = xmmword_1A1126EE0;
    strcpy(v14, "QMux read parsing error: bad I/F type");
    QMux::State::invokeReset((void *)v6, (uint64_t)&v25);
  }

  operator delete(v14);
}

void sub_1A10D0704(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A10D0718(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>(QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0,std::default_delete<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v8 = *(uint64_t **)a1;
  QMux::State::send_sync(*v8, v8 + 2, v8 + 4, a4, a5, a6);
  std::unique_ptr<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0,std::default_delete<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>>::~unique_ptr[abi:ne180100](&v8);
  unsigned int v7 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(a1);
}

void sub_1A10D07C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0,std::default_delete<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>>::~unique_ptr[abi:ne180100]((void **)va);
  uint64_t v4 = (std::__shared_weak_count *)v2[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0,std::default_delete<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    __int16 v3 = (std::__shared_weak_count *)v2[5];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)v2[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    unint64_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t QMux::State::send_sync(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v8 = *a2;
  unsigned int v9 = *(unsigned __int8 *)(*a2 + 33);
  unsigned int v10 = *(unsigned __int8 *)(*a2 + 32);
  int v11 = *(_DWORD *)(a1 + 216);
  BOOL v12 = v11 == 5 || v11 == 0;
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v14 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
    {
      uint64_t v14 = *(const char **)v14;
      unsigned int v15 = v11 - 1;
      if (v15 <= 4) {
        goto LABEL_8;
      }
    }
    else
    {
      unsigned int v15 = v11 - 1;
      if (v15 <= 4)
      {
LABEL_8:
        uint64_t v16 = off_1E5A41580[v15];
        return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v13 + 24))(v13, 6, "[%s] Cannot queue send: QMux is %s. (svc=%d client=%d txid=%d msgid=0x%x)\n", v14, v16, v10, v9, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24));
      }
    }
    uint64_t v16 = "kStopped";
    return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v13 + 24))(v13, 6, "[%s] Cannot queue send: QMux is %s. (svc=%d client=%d txid=%d msgid=0x%x)\n", v14, v16, v10, v9, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24));
  }
  uint64_t v17 = *(void *)(a1 + 120);
  if (v17)
  {
    uint64_t v19 = a1 + 120;
    do
    {
      unsigned int v22 = *(unsigned __int8 *)(v17 + 32);
      BOOL v23 = v22 == v10;
      if (v22 >= v10) {
        char v24 = 1;
      }
      else {
        char v24 = -1;
      }
      if (v23)
      {
        unsigned int v25 = *(unsigned __int8 *)(v17 + 33);
        BOOL v26 = v25 == v9;
        char v24 = v25 >= v9 ? 1 : -1;
        if (v26) {
          char v24 = 0;
        }
      }
      BOOL v20 = (v24 & 0x80) == 0;
      if (v24 < 0) {
        int v21 = (uint64_t *)(v17 + 8);
      }
      else {
        int v21 = (uint64_t *)v17;
      }
      if (v20) {
        uint64_t v19 = v17;
      }
      uint64_t v17 = *v21;
    }
    while (*v21);
    if (v19 != a1 + 120)
    {
      unsigned int v28 = *(unsigned __int8 *)(v19 + 32);
      BOOL v29 = v10 == v28;
      if (v10 >= v28) {
        char v30 = 1;
      }
      else {
        char v30 = -1;
      }
      if (v29)
      {
        unsigned int v31 = *(unsigned __int8 *)(v19 + 33);
        BOOL v32 = v9 >= v31;
        BOOL v33 = v9 == v31;
        char v30 = -1;
        if (v32) {
          char v30 = 1;
        }
        if (v33) {
          char v30 = 0;
        }
      }
      if ((v30 & 0x80) == 0)
      {
        uint64_t v34 = *(std::__shared_weak_count **)(v19 + 48);
        if (v34 && (v35 = std::__shared_weak_count::lock(v34), uint64_t v8 = *a2, v35))
        {
          char v36 = v35;
          uint64_t v37 = *(void *)(v19 + 40);
          if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v36);
          }
          if (v8 == v37)
          {
LABEL_55:
            uint64_t v40 = *(char **)(a1 + 152);
            uint64_t v41 = *(char **)(a1 + 144);
            uint64_t v42 = (v40 - v41) >> 3;
            if (v40 == v41) {
              uint64_t v43 = 0;
            }
            else {
              uint64_t v43 = 170 * v42 - 1;
            }
            unint64_t v44 = *(void *)(a1 + 168);
            unint64_t v45 = *(void *)(a1 + 176) + v44;
            if (v43 != v45)
            {
LABEL_153:
              unint64_t v137 = *(void *)&v41[8 * (v45 / 0xAA)] + 24 * (v45 % 0xAA);
              *(unsigned char *)unint64_t v137 = v10;
              *(unsigned char *)(v137 + 1) = v9;
              uint64_t v138 = a3[1];
              *(void *)(v137 + 8) = *a3;
              *(void *)(v137 + 16) = v138;
              if (v138) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v138 + 8), 1uLL, memory_order_relaxed);
              }
              qmi::fixupHeader();
              ++*(void *)(a1 + 176);
              int v139 = *(unsigned __int8 *)(a1 + 360);
              if (*(unsigned char *)(a1 + 360))
              {
                unsigned int v140 = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 368), 1u, memory_order_relaxed) + 1;
                int v141 = *(_DWORD *)(a1 + 372);
                BOOL v142 = (int)(v140 + v141) > *(_DWORD *)(a1 + 364) + (*(_DWORD *)(a1 + 364) >> 2);
                if (*(int *)(a1 + 200) < 1)
                {
LABEL_167:
                  uint64_t result = *(void *)(a1 + 184);
                  if (result) {
                    char v146 = v142;
                  }
                  else {
                    char v146 = 1;
                  }
                  if ((v146 & 1) == 0)
                  {
                    v147 = *(uint64_t (**)(void))(*(void *)result + 56);
                    return v147();
                  }
                  return result;
                }
              }
              else
              {
                int v141 = 0;
                BOOL v142 = 0;
                unsigned int v140 = -1431655766;
                if (*(int *)(a1 + 200) < 1) {
                  goto LABEL_167;
                }
              }
              if (*(int *)(*a2 + 40) >= 1)
              {
                uint64_t v143 = *(void *)(a1 + 80);
                v144 = (const char *)(a1 + 40);
                int v145 = *(char *)(a1 + 63);
                if (v139)
                {
                  if (v145 < 0) {
                    v144 = *(const char **)v144;
                  }
                  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v143 + 24))(v143, 6, "[%s] queueing qmux pdu for svc=%d client=%d (txid=%d msgid=0x%x) [tx-slot=%d, rx-pending=%d]\n", v144, v10, v9, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24), v140, v141);
                }
                else
                {
                  if (v145 < 0) {
                    v144 = *(const char **)v144;
                  }
                  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v143 + 24))(v143, 6, "[%s] queueing qmux pdu for svc=%d client=%d (txid=%d msgid=0x%x)\n", v144, v10, v9, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24));
                }
              }
              goto LABEL_167;
            }
            if (v44 >= 0xAA)
            {
              *(void *)(a1 + 168) = v44 - 170;
              uint64_t v46 = v41 + 8;
              unint64_t v47 = *(void **)v41;
              *(void *)(a1 + 144) = v41 + 8;
              if (v40 != *(char **)(a1 + 160))
              {
LABEL_150:
                *(void *)uint64_t v40 = v47;
                goto LABEL_151;
              }
              int64_t v48 = *(char **)(a1 + 136);
              __src = v47;
              if (v46 > v48)
              {
                uint64_t v49 = (v46 - v48) >> 3;
                if (v49 >= -1) {
                  uint64_t v50 = v49 + 1;
                }
                else {
                  uint64_t v50 = v49 + 2;
                }
                uint64_t v51 = v50 >> 1;
                uint64_t v52 = -v51;
                uint64_t v53 = &v46[-8 * v51];
                int64_t v54 = v40 - v46;
                if (v40 != v46)
                {
                  memmove(&v46[-8 * v51], v46, v40 - v46);
                  uint64_t v40 = *(char **)(a1 + 144);
                }
                unint64_t v55 = &v40[8 * v52];
                uint64_t v40 = &v53[v54];
                *(void *)(a1 + 144) = v55;
                *(void *)(a1 + 152) = &v53[v54];
                unint64_t v47 = __src;
                goto LABEL_150;
              }
              v168 = *(void **)(a1 + 136);
              unint64_t v67 = (v40 - v48) >> 2;
              if (v40 == v48) {
                unint64_t v67 = 1;
              }
              if (!(v67 >> 61))
              {
                unint64_t v68 = v67 >> 2;
                uint64_t v69 = 8 * v67;
                uint64_t v70 = (char *)operator new(8 * v67);
                BOOL v71 = &v70[8 * v68];
                int64_t v72 = v40 - v46;
                BOOL v12 = v40 == v46;
                uint64_t v40 = v71;
                if (v12) {
                  goto LABEL_148;
                }
                uint64_t v40 = &v71[v72 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v73 = v72 - 8;
                if ((unint64_t)(v72 - 8) >= 0x38)
                {
                  v129 = &v70[8 * v68];
                  uint64_t v74 = v129;
                  if ((unint64_t)(v129 - v46) >= 0x20)
                  {
                    uint64_t v130 = (v73 >> 3) + 1;
                    uint64_t v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v74 = &v71[v131];
                    v46 += v131;
                    v132 = (long long *)(v41 + 24);
                    v133 = v129 + 16;
                    uint64_t v134 = v130 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v135 = *v132;
                      *(v133 - 1) = *(v132 - 1);
                      _OWORD *v133 = v135;
                      v132 += 2;
                      v133 += 2;
                      v134 -= 4;
                    }
                    while (v134);
                    if (v130 == (v130 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_148:
                      *(void *)(a1 + 136) = v70;
                      *(void *)(a1 + 144) = v71;
                      *(void *)(a1 + 152) = v40;
                      *(void *)(a1 + 160) = &v70[v69];
                      unint64_t v47 = __src;
                      if (v168)
                      {
                        operator delete(v168);
                        uint64_t v40 = *(char **)(a1 + 152);
                      }
                      goto LABEL_150;
                    }
                  }
                }
                else
                {
                  uint64_t v74 = &v70[8 * v68];
                }
                do
                {
                  uint64_t v136 = *(void *)v46;
                  v46 += 8;
                  *(void *)uint64_t v74 = v136;
                  v74 += 8;
                }
                while (v74 != v40);
                goto LABEL_148;
              }
LABEL_188:
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v167 = v40 - v41;
            int v56 = *(char **)(a1 + 160);
            __int16 v57 = *(char **)(a1 + 136);
            if (v42 >= (unint64_t)((v56 - v57) >> 3))
            {
              if (v56 == v57) {
                unint64_t v59 = 1;
              }
              else {
                unint64_t v59 = (v56 - v57) >> 2;
              }
              if (!(v59 >> 61))
              {
                uint64_t v165 = 8 * v59;
                unint64_t v166 = v59;
                v60 = (char *)operator new(8 * v59);
                __srca = v60;
                int v61 = operator new(0xFF0uLL);
                uint64_t v62 = &v60[8 * v42];
                uint64_t v63 = &v60[v165];
                if (v42 == v166)
                {
                  uint64_t v64 = v61;
                  if (v167 < 1)
                  {
                    if (v40 == v41) {
                      unint64_t v76 = 1;
                    }
                    else {
                      unint64_t v76 = v167 >> 2;
                    }
                    if (v76 >> 61) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    uint64_t v62 = (char *)operator new(8 * v76);
                    uint64_t v66 = &v62[8 * v76];
                    operator delete(__srca);
                    uint64_t v41 = *(char **)(a1 + 144);
                    uint64_t v40 = *(char **)(a1 + 152);
                    __srca = v62;
                  }
                  else
                  {
                    unint64_t v65 = v42 + 2;
                    if (v42 >= -1) {
                      unint64_t v65 = v42 + 1;
                    }
                    v62 -= 8 * (v65 >> 1);
                    uint64_t v66 = v63;
                  }
                  int v61 = v64;
                }
                else
                {
                  uint64_t v66 = &v60[v165];
                }
                *(void *)uint64_t v62 = v61;
                uint64_t v77 = v62 + 8;
                if (v40 == v41)
                {
                  uint64_t v78 = __srca;
                }
                else
                {
                  uint64_t v78 = __srca;
                  do
                  {
                    if (v62 == v78)
                    {
                      if (v77 >= v66)
                      {
                        __srcc = v78;
                        if (v66 == v78) {
                          unint64_t v84 = 1;
                        }
                        else {
                          unint64_t v84 = (v66 - v78) >> 2;
                        }
                        if (v84 >> 61) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        uint64_t v78 = (char *)operator new(8 * v84);
                        unint64_t v85 = (v84 + 3) >> 2;
                        uint64_t v62 = &v78[8 * v85];
                        uint64_t v86 = __srcc;
                        int64_t v87 = v77 - __srcc;
                        BOOL v12 = v77 == __srcc;
                        uint64_t v77 = v62;
                        if (!v12)
                        {
                          uint64_t v77 = &v62[v87 & 0xFFFFFFFFFFFFFFF8];
                          unint64_t v88 = v87 - 8;
                          uint64_t v89 = &v78[8 * v85];
                          v90 = __srcc;
                          if (v88 < 0x38) {
                            goto LABEL_192;
                          }
                          uint64_t v91 = 8 * v85;
                          v90 = __srcc;
                          uint64_t v89 = &v78[8 * v85];
                          if ((unint64_t)(v89 - __srcc) < 0x20) {
                            goto LABEL_192;
                          }
                          uint64_t v92 = (v88 >> 3) + 1;
                          uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
                          uint64_t v89 = &v62[v93];
                          v90 = &__srcc[v93];
                          uint64_t v94 = (long long *)(__srcc + 16);
                          v95 = &v78[v91 + 16];
                          uint64_t v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            long long v97 = *v94;
                            *((_OWORD *)v95 - 1) = *(v94 - 1);
                            *(_OWORD *)v95 = v97;
                            v94 += 2;
                            v95 += 32;
                            v96 -= 4;
                          }
                          while (v96);
                          if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_192:
                            do
                            {
                              uint64_t v98 = *(void *)v90;
                              v90 += 8;
                              *(void *)uint64_t v89 = v98;
                              v89 += 8;
                            }
                            while (v89 != v77);
                          }
                          uint64_t v86 = __srcc;
                        }
                        uint64_t v66 = &v78[8 * v84];
                        operator delete(v86);
                      }
                      else
                      {
                        __srcb = v66;
                        uint64_t v80 = (v66 - v77) >> 3;
                        if (v80 >= -1) {
                          uint64_t v81 = v80 + 1;
                        }
                        else {
                          uint64_t v81 = v80 + 2;
                        }
                        uint64_t v82 = v81 >> 1;
                        uint64_t v62 = &v78[8 * (v81 >> 1)];
                        uint64_t v83 = v78;
                        if (v77 != v78)
                        {
                          memmove(v62, v78, v77 - v78);
                          uint64_t v83 = v77;
                        }
                        uint64_t v77 = &v83[8 * v82];
                        uint64_t v66 = __srcb;
                      }
                    }
                    uint64_t v79 = *((void *)v40 - 1);
                    v40 -= 8;
                    *((void *)v62 - 1) = v79;
                    v62 -= 8;
                  }
                  while (v40 != *(char **)(a1 + 144));
                }
                uint64_t v99 = *(void **)(a1 + 136);
                *(void *)(a1 + 136) = v78;
                *(void *)(a1 + 144) = v62;
                *(void *)(a1 + 152) = v77;
                *(void *)(a1 + 160) = v66;
                if (v99) {
                  operator delete(v99);
                }
                goto LABEL_152;
              }
              goto LABEL_188;
            }
            uint64_t v58 = operator new(0xFF0uLL);
            if (v56 != v40)
            {
              *(void *)uint64_t v40 = v58;
LABEL_151:
              *(void *)(a1 + 152) += 8;
LABEL_152:
              uint64_t v41 = *(char **)(a1 + 144);
              unint64_t v45 = *(void *)(a1 + 176) + *(void *)(a1 + 168);
              goto LABEL_153;
            }
            if (v41 == v57)
            {
              __srcd = v58;
              unint64_t v100 = (v56 - v41) >> 2;
              if (v40 == v41) {
                unint64_t v100 = 1;
              }
              if (v100 >> 61) {
                goto LABEL_188;
              }
              unint64_t v101 = (v100 + 3) >> 2;
              uint64_t v102 = 8 * v100;
              uint64_t v103 = (char *)operator new(8 * v100);
              v75 = &v103[8 * v101];
              v104 = v75;
              if (v40 != v41)
              {
                v104 = &v75[8 * v42];
                v105 = &v103[8 * v101];
                int64_t v106 = v41;
                if ((unint64_t)(v167 - 8) < 0x38) {
                  goto LABEL_193;
                }
                unint64_t v107 = &v103[8 * v101];
                v105 = v107;
                int64_t v106 = v41;
                if ((unint64_t)(v107 - v41) < 0x20) {
                  goto LABEL_193;
                }
                unint64_t v108 = ((unint64_t)(v167 - 8) >> 3) + 1;
                uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
                v105 = &v75[v109];
                int64_t v106 = &v41[v109];
                uint64_t v110 = (long long *)(v41 + 16);
                uint64_t v111 = v107 + 16;
                uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v113 = *v110;
                  *(v111 - 1) = *(v110 - 1);
                  *uint64_t v111 = v113;
                  v110 += 2;
                  v111 += 2;
                  v112 -= 4;
                }
                while (v112);
                if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_193:
                  do
                  {
                    uint64_t v114 = *(void *)v106;
                    v106 += 8;
                    *(void *)v105 = v114;
                    v105 += 8;
                  }
                  while (v105 != v104);
                }
              }
              *(void *)(a1 + 136) = v103;
              *(void *)(a1 + 144) = v75;
              *(void *)(a1 + 152) = v104;
              *(void *)(a1 + 160) = &v103[v102];
              uint64_t v58 = __srcd;
              if (v41)
              {
                operator delete(v41);
                uint64_t v58 = __srcd;
                v75 = *(char **)(a1 + 144);
              }
            }
            else
            {
              v75 = v41;
            }
            *((void *)v75 - 1) = v58;
            uint64_t v115 = *(char **)(a1 + 144);
            long long v116 = *(char **)(a1 + 152);
            *(void *)(a1 + 144) = v115 - 8;
            uint64_t v117 = *((void *)v115 - 1);
            *(void *)(a1 + 144) = v115;
            if (v116 != *(char **)(a1 + 160))
            {
LABEL_135:
              *(void *)long long v116 = v117;
              goto LABEL_151;
            }
            v118 = *(char **)(a1 + 136);
            if (v115 > v118)
            {
              uint64_t v119 = (v115 - v118) >> 3;
              if (v119 >= -1) {
                uint64_t v120 = v119 + 1;
              }
              else {
                uint64_t v120 = v119 + 2;
              }
              uint64_t v121 = v120 >> 1;
              uint64_t v122 = -v121;
              v123 = &v115[-8 * v121];
              int64_t v124 = v116 - v115;
              if (v116 != v115)
              {
                v125 = &v115[-8 * v121];
                v126 = v115;
                size_t v127 = v116 - v115;
                uint64_t v128 = -v121;
                memmove(v125, v126, v127);
                uint64_t v122 = v128;
                uint64_t v115 = *(char **)(a1 + 144);
              }
              *(void *)(a1 + 144) = &v115[8 * v122];
              *(void *)(a1 + 152) = &v123[v124];
              *(void *)&v123[v124] = v117;
              goto LABEL_151;
            }
            __srce = *(void **)(a1 + 136);
            unint64_t v148 = (v116 - v118) >> 2;
            if (v116 == v118) {
              unint64_t v148 = 1;
            }
            if (v148 >> 61) {
              goto LABEL_188;
            }
            unint64_t v149 = v148 >> 2;
            uint64_t v150 = 8 * v148;
            v151 = (char *)operator new(8 * v148);
            v152 = &v151[8 * v149];
            int64_t v153 = v116 - v115;
            BOOL v12 = v116 == v115;
            long long v116 = v152;
            if (!v12)
            {
              long long v116 = &v152[v153 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v154 = v153 - 8;
              if ((unint64_t)(v153 - 8) < 0x38)
              {
                v155 = &v151[8 * v149];
                do
                {
LABEL_184:
                  uint64_t v164 = *(void *)v115;
                  v115 += 8;
                  *(void *)v155 = v164;
                  v155 += 8;
                }
                while (v155 != v116);
                goto LABEL_185;
              }
              v156 = &v151[8 * v149];
              v155 = v156;
              if ((unint64_t)(v156 - v115) < 0x20) {
                goto LABEL_184;
              }
              uint64_t v157 = (v154 >> 3) + 1;
              uint64_t v158 = 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
              v155 = &v152[v158];
              v159 = &v115[v158];
              v160 = (long long *)(v115 + 16);
              v161 = v156 + 16;
              uint64_t v162 = v157 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v163 = *v160;
                *(v161 - 1) = *(v160 - 1);
                _OWORD *v161 = v163;
                v160 += 2;
                v161 += 2;
                v162 -= 4;
              }
              while (v162);
              uint64_t v115 = v159;
              if (v157 != (v157 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_184;
              }
            }
LABEL_185:
            *(void *)(a1 + 136) = v151;
            *(void *)(a1 + 144) = v152;
            *(void *)(a1 + 152) = v116;
            *(void *)(a1 + 160) = &v151[v150];
            if (__srce)
            {
              operator delete(__srce);
              long long v116 = *(char **)(a1 + 152);
            }
            goto LABEL_135;
          }
        }
        else if (!v8)
        {
          goto LABEL_55;
        }
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x2F4, "client", "==", "i->second.lock()", a6);
        goto LABEL_55;
      }
    }
  }
  uint64_t v38 = *(void *)(a1 + 80);
  unint64_t v39 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    unint64_t v39 = *(const char **)v39;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v38 + 24))(v38, 6, "[%s] Cannot queue send: Unknown client. (svc=%d client=%d txid=%d msgid=0x%x)\n", v39, v10, v9, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24));
}

void sub_1A10D144C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  operator delete(v20);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1A10D1484(_Unwind_Exception *a1)
{
  __int16 v3 = *v1;
  if (*v1)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t ATCSLoggerDefault::log(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a2 > 6) {
    int v11 = "atcs";
  }
  else {
    int v11 = off_1E5A411F0[a2];
  }
  BOOL v20 = &a9;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[1] = v12;
  v18[2] = v12;
  v18[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v18);
  MEMORY[0x1A622BED0](v17, a3, v20);
  ctu::LogMessageBuffer::operator=();
  MEMORY[0x1A622BEF0](v17);
  uint64_t v13 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)v18);
    if (*(char *)(v14 + 23) >= 0) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = *(void *)v14;
    }
    *(_DWORD *)buf = 136315394;
    unsigned int v22 = v11;
    __int16 v23 = 2080;
    uint64_t v24 = v15;
    _os_log_impl(&dword_1A10C7000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: %s", buf, 0x16u);
  }
  return MEMORY[0x1A622BEF0](v18);
}

uint64_t *qmi::ClientRouter::get(uint64_t a1, signed int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)(*(void *)a1 + 24);
  if (v4)
  {
    unint64_t v5 = *(uint64_t **)(*(void *)a1 + 24);
    do
    {
      signed int v6 = *((_DWORD *)v5 + 8);
      if (v6 <= a2)
      {
        if (v6 >= a2) {
          goto LABEL_9;
        }
        ++v5;
      }
      unint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  unsigned int v7 = *(NSObject **)(*(void *)a1 + 8);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
  {
LABEL_9:
    if (v4) {
      goto LABEL_17;
    }
LABEL_21:
    std::__throw_out_of_range[abi:ne180100]();
  }
  if (a2 > 3) {
    uint64_t v8 = "???";
  }
  else {
    uint64_t v8 = off_1E5A410C8[a2];
  }
  int v11 = 136315138;
  long long v12 = v8;
  _os_log_fault_impl(&dword_1A10C7000, v7, OS_LOG_TYPE_FAULT, "Could not find subscription %s", (uint8_t *)&v11, 0xCu);
  uint64_t v4 = *(uint64_t **)(*(void *)a1 + 24);
  if (!v4) {
    goto LABEL_21;
  }
  while (1)
  {
LABEL_17:
    while (1)
    {
      signed int v9 = *((_DWORD *)v4 + 8);
      if (v9 <= a2) {
        break;
      }
      uint64_t v4 = (uint64_t *)*v4;
      if (!v4) {
        goto LABEL_21;
      }
    }
    if (v9 >= a2) {
      return v4 + 5;
    }
    uint64_t v4 = (uint64_t *)v4[1];
    if (!v4) {
      goto LABEL_21;
    }
  }
}

void ___ZN3ctu15XpcClientHelper9setServerIN3qmi12EurTransportEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(void *a1, xpc_object_t a2)
{
  __int16 v3 = (void *)a1[4];
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v4);
    if (!v14) {
      return;
    }
    uint64_t v6 = a1[5];
    uint64_t v13 = v6;
    if (v6)
    {
      uint64_t v7 = MEMORY[0x1A622CC50](a2);
      uint64_t v8 = MEMORY[0x1E4F14590];
      if (v7 != MEMORY[0x1E4F14590])
      {
        if (v7 == MEMORY[0x1E4F145A8] && *v3 == a1[7])
        {
          long long v12 = a2;
          if (a2)
          {
            xpc_retain(a2);
          }
          else
          {
            a2 = xpc_null_create();
            long long v12 = a2;
          }
          uint64_t v11 = *(void *)(v6 + 88);
          if (v11)
          {
            (*(void (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, &v12);
            a2 = v12;
          }
          xpc_release(a2);
        }
        goto LABEL_18;
      }
      if (a2)
      {
        xpc_retain(a2);
        long long v12 = a2;
      }
      else
      {
        a2 = xpc_null_create();
        long long v12 = a2;
        if (!a2)
        {
          xpc_object_t v9 = xpc_null_create();
          a2 = 0;
          goto LABEL_16;
        }
      }
      if (MEMORY[0x1A622CC50](a2) == v8)
      {
        xpc_retain(a2);
        xpc_object_t v9 = a2;
LABEL_17:
        qmi::EurTransport::handleMessage(v6, &v12);
        xpc_release(v9);
        long long v12 = 0;
        xpc_release(a2);
        goto LABEL_18;
      }
      xpc_object_t v9 = xpc_null_create();
LABEL_16:
      long long v12 = v9;
      goto LABEL_17;
    }
  }
LABEL_18:
  unsigned int v10 = v14;
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1A10D1958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void qmi::EurTransport::handleMessage(uint64_t a1, void **a2)
{
  if (*(void *)(a1 + 56))
  {
    __int16 v3 = *a2;
    xpc_object_t object = v3;
    if (v3)
    {
      xpc_retain(v3);
      uint64_t v4 = *(void *)(a1 + 56);
      if (v4)
      {
LABEL_4:
        (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v4 + 48))(v4, &object);
        xpc_release(object);
        return;
      }
    }
    else
    {
      xpc_object_t object = xpc_null_create();
      uint64_t v4 = *(void *)(a1 + 56);
      if (v4) {
        goto LABEL_4;
      }
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
}

void sub_1A10D1A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1>(qmi::Client::State::send(qmi::Client::SendProxy &)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1,dispatch_queue_s *::default_delete<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (*((_WORD *)v2 + 16))
  {
    qmi::Client::State::send_sync((void *)v3, (xpc_object_t *)v2 + 1, *((unsigned __int16 *)v2 + 16), v2[2], (const void **)v2 + 3);
  }
  else
  {
    int v4 = *(unsigned __int16 *)(v3 + 146);
    if ((((_WORD)v4 + 1) & 0xFFFE) != 0) {
      __int16 v5 = v4 + 1;
    }
    else {
      __int16 v5 = 1;
    }
    *(_WORD *)(v3 + 146) = v5;
    qmi::Client::State::send_sync((void *)v3, (xpc_object_t *)v2 + 1, v4, v2[2], (const void **)v2 + 3);
  }
  uint64_t v6 = (atomic_uint *)v2[2];
  int add = atomic_fetch_add(v6 + 2, 0xFFFFFFFF);
  if (add <= 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
  }
  else
  {
    if (v6) {
      BOOL v8 = add == 1;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8) {
      (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
    }
  }
  xpc_object_t v9 = (const void *)v2[3];
  if (v9) {
    _Block_release(v9);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  unsigned int v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v11 = a1;
  }
  operator delete(v11);
}

void sub_1A10D1C00(_Unwind_Exception *a1)
{
  int v4 = *(const void **)(v2 + 24);
  if (v4) {
    _Block_release(v4);
  }
  xpc_release(*(xpc_object_t *)(v2 + 8));
  operator delete((void *)v2);
  __int16 v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void qmi::Client::State::send_sync(void *a1, xpc_object_t *a2, int a3, uint64_t a4, const void **a5)
{
  xpc_object_t v10 = xpc_int64_create(a3);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "txid", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  if ((*(uint64_t (**)(void *, xpc_object_t *))(*a1 + 48))(a1, a2))
  {
    if (!*a5) {
      return;
    }
    uint64_t v46 = a4;
    long long v12 = _Block_copy(*a5);
    signed int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a4 + 8), 1u, memory_order_relaxed);
    if (add_explicit < 0) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)add_explicit, 0);
    }
    unint64_t v14 = a1[21];
    unint64_t v15 = a1[20];
    if (v15 < v14)
    {
      *(_DWORD *)unint64_t v15 = a3;
      *(void *)(v15 + 8) = a4;
      if (v12)
      {
        uint64_t v16 = _Block_copy(v12);
        uint64_t v17 = *(void *)(v15 + 8);
        *(void *)(v15 + 16) = v16;
        if (!v17) {
          goto LABEL_26;
        }
        signed int v18 = atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 1u, memory_order_relaxed);
        if ((v18 & 0x80000000) == 0) {
          goto LABEL_26;
        }
      }
      else
      {
        *(void *)(v15 + 16) = 0;
        signed int v18 = atomic_fetch_add_explicit((atomic_uint *volatile)(a4 + 8), 1u, memory_order_relaxed);
        if ((v18 & 0x80000000) == 0)
        {
LABEL_26:
          a1[20] = v15 + 24;
LABEL_56:
          int add = atomic_fetch_add((atomic_uint *volatile)(a4 + 8), 0xFFFFFFFF);
          if (add <= 0)
          {
            _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
          }
          else if (add == 1)
          {
            (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
          }
LABEL_60:
          if (v12) {
            _Block_release(v12);
          }
          return;
        }
      }
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v18, 0);
      goto LABEL_26;
    }
    uint64_t v21 = a1[19];
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v21) >> 3);
    if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v21) >> 3);
    uint64_t v24 = 2 * v23;
    if (2 * v23 <= v22 + 1) {
      uint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x555555555555555) {
      unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      if (v25 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v26 = (char *)operator new(24 * v25);
    }
    else
    {
      BOOL v26 = 0;
    }
    unsigned int v28 = &v26[24 * v25];
    int64_t v27 = &v26[24 * v22];
    *(_DWORD *)int64_t v27 = a3;
    BOOL v29 = v27 + 16;
    *((void *)v27 + 1) = a4;
    if (v12)
    {
      char v30 = _Block_copy(v12);
      uint64_t v31 = *((void *)v27 + 1);
      *BOOL v29 = v30;
      if (!v31
        || (signed int v32 = atomic_fetch_add_explicit((atomic_uint *volatile)(v31 + 8), 1u, memory_order_relaxed),
            (v32 & 0x80000000) == 0))
      {
LABEL_34:
        BOOL v33 = v27 + 24;
        uint64_t v35 = (void *)a1[19];
        uint64_t v34 = (void *)a1[20];
        unint64_t v47 = v27;
        if (v34 == v35)
        {
          a1[19] = v27;
          a1[20] = v33;
          a1[21] = v28;
        }
        else
        {
          unint64_t v45 = v28;
          do
          {
            int v36 = *((_DWORD *)v34 - 6);
            v34 -= 3;
            *((_DWORD *)v27 - 6) = v36;
            uint64_t v37 = v34[1];
            *((void *)v27 - 2) = v37;
            uint64_t v38 = (void *)v34[2];
            if (v38)
            {
              uint64_t v38 = _Block_copy(v38);
              uint64_t v37 = *((void *)v27 - 2);
            }
            *((void *)v27 - 1) = v38;
            if (v37)
            {
              signed int v39 = atomic_fetch_add_explicit((atomic_uint *volatile)(v37 + 8), 1u, memory_order_relaxed);
              if (v39 < 0) {
                _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v39, 0);
              }
            }
            int64_t v27 = v47 - 24;
            v47 -= 24;
          }
          while (v34 != v35);
          uint64_t v34 = (void *)a1[19];
          uint64_t v40 = (void *)a1[20];
          a1[19] = v27;
          a1[20] = v33;
          for (a1[21] = v45; v40 != v34; v40 -= 3)
          {
            uint64_t v41 = (atomic_uint *)*(v40 - 2);
            if (v41)
            {
              int v42 = atomic_fetch_add(v41 + 2, 0xFFFFFFFF);
              if (v42 <= 0)
              {
                _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v42, 0);
              }
              else if (v42 == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v41 + 8))(v41);
              }
            }
            uint64_t v43 = (const void *)*(v40 - 1);
            if (v43) {
              _Block_release(v43);
            }
          }
        }
        if (v34) {
          operator delete(v34);
        }
        a4 = v46;
        a1[20] = v33;
        if (!v46) {
          goto LABEL_60;
        }
        goto LABEL_56;
      }
    }
    else
    {
      *BOOL v29 = 0;
      signed int v32 = atomic_fetch_add_explicit((atomic_uint *volatile)(a4 + 8), 1u, memory_order_relaxed);
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_34;
      }
    }
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v32, 0);
    goto LABEL_34;
  }
  __int16 v19 = *(_WORD *)(a4 + 12);
  BOOL v20 = (char *)operator new(0x58uLL);
  *((_DWORD *)v20 + 2) = 0;
  *(void *)BOOL v20 = &unk_1EF43DE48;
  *((_WORD *)v20 + 6) = v19;
  *(void *)(v20 + 14) = 0;
  *(void *)(v20 + 30) = 0;
  *(void *)(v20 + 22) = 0;
  *((_WORD *)v20 + 19) = 0;
  *((_DWORD *)v20 + 10) = 1;
  *((_WORD *)v20 + 22) = 5;
  *((_OWORD *)v20 + 3) = 0u;
  *((_OWORD *)v20 + 4) = 0u;

  qmi::Client::State::postResponseToClient_sync((uint64_t)a1, (uint64_t)v20, a5);
}

void sub_1A10D222C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  if (*v3) {
    _Block_release(*v3);
  }
  std::__split_buffer<qmi::Client::State::Transaction>::~__split_buffer((uint64_t)va1);
  qmi::Client::State::Transaction::~Transaction((qmi::Client::State::Transaction *)va);
  _Unwind_Resume(a1);
}

BOOL qmi::Client::LocalState::sendOrQueue_sync(uint64_t a1, void **a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v41 = 0;
  int v42 = 0;
  int v4 = *(std::__shared_weak_count **)(a1 + 360);
  if (!v4 || (v42 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v5 = *(void *)(a1 + 352), (v41 = v5) == 0))
  {
    long long v12 = *(NSObject **)(a1 + 40);
    BOOL v13 = 0;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_61;
    }
    unint64_t v14 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      unint64_t v14 = (void *)*v14;
    }
    unint64_t v15 = (char *)MEMORY[0x1A622CB80](*a2);
    memset(__dst, 170, sizeof(__dst));
    size_t v16 = strlen(v15);
    if (v16 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = (void *)v16;
    if (v16 >= 0x17)
    {
      uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v19 = v16 | 7;
      }
      uint64_t v20 = v19 + 1;
      signed int v18 = (void **)operator new(v19 + 1);
      __dst[1] = v17;
      __dst[2] = (void *)(v20 | 0x8000000000000000);
      __dst[0] = v18;
    }
    else
    {
      HIBYTE(__dst[2]) = v16;
      signed int v18 = __dst;
      if (!v16) {
        goto LABEL_23;
      }
    }
    memcpy(v18, v15, (size_t)v17);
LABEL_23:
    *((unsigned char *)v17 + (void)v18) = 0;
    free(v15);
    uint64_t v21 = __dst;
    if (SHIBYTE(__dst[2]) < 0) {
      uint64_t v21 = (void **)__dst[0];
    }
    *(_DWORD *)buf = 136315394;
    unint64_t v44 = v14;
    __int16 v45 = 2080;
    uint64_t v46 = v21;
    _os_log_impl(&dword_1A10C7000, v12, OS_LOG_TYPE_DEFAULT, "#E [%s] ****** Client message DROPPED (not queued) because of invalid local connection. Message: %s", buf, 0x16u);
    if (SHIBYTE(__dst[2]) < 0) {
      operator delete(__dst[0]);
    }
    BOOL v13 = 0;
    goto LABEL_61;
  }
  int v6 = *(unsigned __int8 *)(v5 + 112);
  uint64_t v38 = 0;
  signed int v39 = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 328);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    signed int v39 = v8;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 320);
      uint64_t v38 = v9;
      if (v6 && v9 != 0)
      {
        xpc_object_t v11 = *a2;
        xpc_object_t object = v11;
        if (v11) {
          xpc_retain(v11);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        uint64_t v34 = *(void *)(v9 + 24);
        if (!v34) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v34 + 48))(v34, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        BOOL v13 = 1;
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_60;
        }
        goto LABEL_61;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v22 = *(void *)(a1 + 368);
  BOOL v13 = v22 != 0;
  if (v22)
  {
    unint64_t v23 = *(void ***)(v22 + 16);
    if ((unint64_t)v23 >= *(void *)(v22 + 24))
    {
      *(void *)(v22 + 16) = std::vector<xpc::dict>::__emplace_back_slow_path<xpc::dict const&>((xpc_object_t **)(v22 + 8), *a2);
      if (!v8) {
        goto LABEL_61;
      }
    }
    else
    {
      uint64_t v24 = *a2;
      *unint64_t v23 = *a2;
      if (v24)
      {
        xpc_retain(v24);
        *(void *)(v22 + 16) = v23 + 1;
        if (!v8) {
          goto LABEL_61;
        }
      }
      else
      {
        *unint64_t v23 = xpc_null_create();
        *(void *)(v22 + 16) = v23 + 1;
        if (!v8) {
          goto LABEL_61;
        }
      }
    }
    goto LABEL_42;
  }
  unint64_t v25 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v26 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      BOOL v26 = (void *)*v26;
    }
    int64_t v27 = (char *)MEMORY[0x1A622CB80](*a2);
    memset(__dst, 170, sizeof(__dst));
    size_t v28 = strlen(v27);
    if (v28 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    BOOL v29 = (void *)v28;
    if (v28 >= 0x17)
    {
      uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17) {
        uint64_t v31 = v28 | 7;
      }
      uint64_t v32 = v31 + 1;
      char v30 = (void **)operator new(v31 + 1);
      __dst[1] = v29;
      __dst[2] = (void *)(v32 | 0x8000000000000000);
      __dst[0] = v30;
    }
    else
    {
      HIBYTE(__dst[2]) = v28;
      char v30 = __dst;
      if (!v28) {
        goto LABEL_50;
      }
    }
    memcpy(v30, v27, (size_t)v29);
LABEL_50:
    *((unsigned char *)v29 + (void)v30) = 0;
    free(v27);
    BOOL v33 = __dst;
    if (SHIBYTE(__dst[2]) < 0) {
      BOOL v33 = (void **)__dst[0];
    }
    *(_DWORD *)buf = 136315394;
    unint64_t v44 = v26;
    __int16 v45 = 2080;
    uint64_t v46 = v33;
    _os_log_impl(&dword_1A10C7000, v25, OS_LOG_TYPE_DEFAULT, "#E [%s] ****** Client message DROPPED because local connect message not yet sent. Message: %s", buf, 0x16u);
    if (SHIBYTE(__dst[2]) < 0) {
      operator delete(__dst[0]);
    }
    uint64_t v8 = v39;
  }
  if (!v8) {
    goto LABEL_61;
  }
LABEL_42:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_60:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_61:
  uint64_t v35 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  return v13;
}

void sub_1A10D27A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::operator()(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    int v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(a1 + 8);
      if (v6) {
        qmi::ClientProxy::State::handleMessage_sync(v6, &object);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  xpc_release(object);
}

void qmi::ClientProxy::State::handleMessage_sync(uint64_t a1, void **a2)
{
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3002000000;
  void v6[3] = __Block_byref_object_copy_;
  uint64_t v3 = *a2;
  v6[4] = __Block_byref_object_dispose_;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v4 = *(NSObject **)(a1 + 24);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  v5[2] = ___ZN3qmi11ClientProxy5State18handleMessage_syncERKN3xpc4dictE_block_invoke;
  v5[3] = &__block_descriptor_tmp_14_0;
  v5[4] = v6;
  v5[5] = a1;
  dispatch_async(v4, v5);
  _Block_object_dispose(v6, 8);
  xpc_release(object);
}

uint64_t qmi::Client::XPCState::sendOrQueue_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x1A622CC50](*(void *)(a1 + 128)) == MEMORY[0x1E4F14578])
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 128), *a2);
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 288);
  if (v4)
  {
    uint64_t v5 = *(xpc_object_t **)(v4 + 16);
    if ((unint64_t)v5 >= *(void *)(v4 + 24))
    {
      xpc_object_t v11 = std::vector<xpc::dict>::__emplace_back_slow_path<xpc::dict const&>((xpc_object_t **)(v4 + 8), *a2);
    }
    else
    {
      xpc_object_t v6 = *a2;
      *uint64_t v5 = *a2;
      if (v6) {
        xpc_retain(v6);
      }
      else {
        *uint64_t v5 = xpc_null_create();
      }
      xpc_object_t v11 = v5 + 1;
    }
    *(void *)(v4 + 16) = v11;
    return 1;
  }
  uint64_t v7 = *(NSObject **)(a1 + 40);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v8)
  {
    xpc_object_t v10 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      xpc_object_t v10 = (void *)*v10;
    }
    int v12 = 136315138;
    BOOL v13 = v10;
    _os_log_impl(&dword_1A10C7000, v7, OS_LOG_TYPE_DEFAULT, "#E [%s] ****** Client message DROPPED because no connection", (uint8_t *)&v12, 0xCu);
    return 0;
  }
  return result;
}

void sub_1A10D2ADC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *qmi::ClientProxy::ClientProxy(void *a1, uint64_t *a2, xpc_object_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  a1[2] = *a2;
  a1[3] = v6;
  uint64_t v7 = a1 + 2;
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    uint64_t v5 = *v7;
  }
  qmi::ClientProxy::State::init(v5, a3);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  a1[2] = *a2;
  a1[3] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = a1[2];
  }
  qmi::ClientProxy::State::init(v4, a3);
  return a1;
}

void sub_1A10D2B40(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::State::init(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 232))
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3 || (uint64_t v5 = *(void *)(a1 + 8), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v7 = v6;
    p_shared_weak_owners = &v6->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v34 = v9;
    long long v35 = v9;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    *(void *)&long long v34 = &unk_1EF43CB10;
    *((void *)&v34 + 1) = v5;
    *(void *)&long long v35 = v7;
    *((void *)&v35 + 1) = &v34;
    long long v32 = v9;
    long long v33 = v9;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    *(void *)&long long v32 = &unk_1EF43CBA0;
    *((void *)&v32 + 1) = v5;
    *(void *)&long long v33 = v7;
    *((void *)&v33 + 1) = &v32;
    uint64_t v10 = *(void *)(a1 + 232);
    xpc_object_t v11 = (void *)*((void *)&v35 + 1);
    if (*((void *)&v35 + 1))
    {
      if (*((long long **)&v35 + 1) != &v34)
      {
        xpc_object_t v11 = (void *)(*(uint64_t (**)(void))(**((void **)&v35 + 1) + 16))();
        uint64_t v31 = v11;
        int v12 = (void *)(v10 + 32);
        if (!v11) {
          goto LABEL_19;
        }
        goto LABEL_17;
      }
      v30[0] = &unk_1EF43CB10;
      v30[1] = v5;
      v30[2] = v35;
      uint64_t v31 = v30;
      if (!(void)v35)
      {
        int v12 = (void *)(v10 + 32);
        goto LABEL_21;
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 16), 1uLL, memory_order_relaxed);
      xpc_object_t v11 = v31;
      int v12 = (void *)(v10 + 32);
      if (v31)
      {
LABEL_17:
        if (v11 != v30)
        {
          xpc_object_t v11 = (void *)(*(uint64_t (**)(void *))(*v11 + 16))(v11);
          goto LABEL_19;
        }
LABEL_21:
        uint64_t v37 = buf;
        (*(void (**)(void *, uint8_t *))(v30[0] + 24))(v30, buf);
LABEL_22:
        std::__function::__value_func<void ()(xpc::dict)>::swap[abi:ne180100](buf, v12);
        if (v37 == buf)
        {
          (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
          unint64_t v15 = v31;
          if (v31 != v30) {
            goto LABEL_26;
          }
        }
        else
        {
          if (v37) {
            (*(void (**)(uint8_t *))(*(void *)v37 + 40))(v37);
          }
          unint64_t v15 = v31;
          if (v31 != v30)
          {
LABEL_26:
            if (v15) {
              (*(void (**)(void *))(*v15 + 40))(v15);
            }
            uint64_t v16 = *(void *)(a1 + 232);
            uint64_t v17 = (long long *)*((void *)&v33 + 1);
            if (!*((void *)&v33 + 1)) {
              goto LABEL_34;
            }
            goto LABEL_32;
          }
        }
        (*(void (**)(void *))(v30[0] + 32))(v30);
        uint64_t v16 = *(void *)(a1 + 232);
        uint64_t v17 = (long long *)*((void *)&v33 + 1);
        if (!*((void *)&v33 + 1)) {
          goto LABEL_34;
        }
LABEL_32:
        if (v17 == &v32)
        {
          BOOL v29 = (long long *)v28;
          (*(void (**)(long long *, void *))(v32 + 24))(&v32, v28);
          uint64_t v17 = v29;
          if (!v29) {
            goto LABEL_39;
          }
          goto LABEL_37;
        }
        uint64_t v17 = (long long *)(*(uint64_t (**)(long long *))(*(void *)v17 + 16))(v17);
LABEL_34:
        BOOL v29 = v17;
        if (!v17) {
          goto LABEL_39;
        }
LABEL_37:
        if (v17 == (long long *)v28)
        {
          uint64_t v37 = buf;
          (*(void (**)(void *, uint8_t *))(v28[0] + 24))(v28, buf);
LABEL_41:
          std::__function::__value_func<void ()(xpc::object const&)>::swap[abi:ne180100](buf, (void *)(v16 + 64));
          if (v37 == buf)
          {
            (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
            signed int v18 = v29;
            if (v29 != (long long *)v28) {
              goto LABEL_45;
            }
          }
          else
          {
            if (v37) {
              (*(void (**)(uint8_t *))(*(void *)v37 + 40))(v37);
            }
            signed int v18 = v29;
            if (v29 != (long long *)v28)
            {
LABEL_45:
              if (v18) {
                (*(void (**)(long long *))(*(void *)v18 + 40))(v18);
              }
              xpc_object_t v19 = *a2;
              if (v19)
              {
LABEL_48:
                xpc_retain(v19);
                uint64_t v20 = *(std::__shared_weak_count **)(a1 + 16);
                if (!v20) {
LABEL_70:
                }
                  std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_53:
                uint64_t v21 = *(void *)(a1 + 8);
                uint64_t v22 = std::__shared_weak_count::lock(v20);
                if (!v22) {
                  goto LABEL_70;
                }
                unint64_t v23 = v22;
                uint64_t v24 = operator new(0x10uLL);
                *uint64_t v24 = a1;
                v24[1] = v19;
                if (v19) {
                  xpc_retain(v19);
                }
                else {
                  v24[1] = xpc_null_create();
                }
                unint64_t v25 = *(NSObject **)(a1 + 24);
                atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
                BOOL v26 = operator new(0x18uLL);
                *BOOL v26 = v24;
                v26[1] = v21;
                v26[2] = v23;
                dispatch_async_f(v25, v26, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped<qmi::ClientProxy::State::init(xpc::connection const&)::$_2>(qmi::ClientProxy::State::init(xpc::connection const&)::$_2 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::ClientProxy::State::init(xpc::connection const&)::$_2,dispatch_queue_s *::default_delete<qmi::ClientProxy::State::init(xpc::connection const&)::$_2>>)::{lambda(void *)#1}::__invoke);
                if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                  std::__shared_weak_count::__release_weak(v23);
                }
                xpc_release(v19);
                if (*((long long **)&v33 + 1) == &v32)
                {
                  (*(void (**)(long long *))(v32 + 32))(&v32);
                  uint64_t v27 = *((void *)&v35 + 1);
                  if (*((long long **)&v35 + 1) != &v34)
                  {
LABEL_63:
                    if (v27) {
                      (*(void (**)(uint64_t))(*(void *)v27 + 40))(v27);
                    }
                    goto LABEL_67;
                  }
                }
                else
                {
                  if (*((void *)&v33 + 1)) {
                    (*(void (**)(void))(**((void **)&v33 + 1) + 40))();
                  }
                  uint64_t v27 = *((void *)&v35 + 1);
                  if (*((long long **)&v35 + 1) != &v34) {
                    goto LABEL_63;
                  }
                }
                (*(void (**)(long long *))(v34 + 32))(&v34);
LABEL_67:
                std::__shared_weak_count::__release_weak(v7);
                return;
              }
LABEL_52:
              xpc_object_t v19 = xpc_null_create();
              uint64_t v20 = *(std::__shared_weak_count **)(a1 + 16);
              if (!v20) {
                goto LABEL_70;
              }
              goto LABEL_53;
            }
          }
          (*(void (**)(void *))(v28[0] + 32))(v28);
          xpc_object_t v19 = *a2;
          if (v19) {
            goto LABEL_48;
          }
          goto LABEL_52;
        }
        uint64_t v17 = (long long *)(*(uint64_t (**)(long long *))(*(void *)v17 + 16))(v17);
LABEL_39:
        uint64_t v37 = (uint8_t *)v17;
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v31 = 0;
      int v12 = (void *)(v10 + 32);
    }
LABEL_19:
    uint64_t v37 = (uint8_t *)v11;
    goto LABEL_22;
  }
  BOOL v13 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      uint64_t v14 = (void *)*v14;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_error_impl(&dword_1A10C7000, v13, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport passed in as parameter to state constructor", buf, 0xCu);
  }
}

void sub_1A10D3290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  std::function<void ()(xpc::dict)>::~function((uint64_t *)va);
  std::function<void ()(xpc::object const&)>::~function((uint64_t *)va1);
  std::function<void ()(xpc::dict)>::~function((uint64_t *)va2);
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_1A10D33CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *qmi::ClientProxy::ClientProxy(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  a1[2] = *a2;
  a1[3] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = a1[2];
  }
  xpc_object_t v5 = xpc_null_create();
  xpc_object_t v7 = v5;
  qmi::ClientProxy::State::init(v4, &v7);
  xpc_release(v5);
  return a1;
}

void sub_1A10D34A8(_Unwind_Exception *a1)
{
  xpc_release(v3);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v2);
  xpc_object_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::~ClientProxy(qmi::ClientProxy *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
}

uint64_t qmi::ClientProxy::shutdown(qmi::ClientProxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 16))();
}

uint64_t qmi::ClientProxy::getName(qmi::ClientProxy *this)
{
  return *((void *)this + 2) + 48;
}

uint64_t qmi::ClientProxy::getSvcType(qmi::ClientProxy *this)
{
  return *(unsigned __int8 *)(*((void *)this + 2) + 72);
}

BOOL qmi::ClientProxy::operator BOOL(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

qmi::ClientProxy::State *qmi::ClientProxy::isValid(qmi::ClientProxy *this)
{
  uint64_t result = (qmi::ClientProxy::State *)*((void *)this + 2);
  if (result) {
    return (qmi::ClientProxy::State *)qmi::ClientProxy::State::isValid(result);
  }
  return result;
}

BOOL qmi::ClientProxy::State::isValid(qmi::ClientProxy::State *this)
{
  uint64_t v4 = this;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNKS3_7isValidEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v5[3] = &__block_descriptor_tmp_86;
  v5[4] = (char *)this + 8;
  v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1))
  {
    char v13 = -86;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_88;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = -86;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_87;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

qmi::ClientProxy::State *qmi::ClientProxy::isStopped(qmi::ClientProxy *this)
{
  uint64_t result = (qmi::ClientProxy::State *)*((void *)this + 2);
  if (result) {
    return (qmi::ClientProxy::State *)qmi::ClientProxy::State::isStopped(result);
  }
  return result;
}

BOOL qmi::ClientProxy::State::isStopped(qmi::ClientProxy::State *this)
{
  uint64_t v4 = this;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNKS3_9isStoppedEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v5[3] = &__block_descriptor_tmp_89;
  v5[4] = (char *)this + 8;
  v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1))
  {
    char v13 = -86;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_88;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = -86;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_87;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

void qmi::ClientProxy::registerResponse(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  uint64_t v6 = *(const void **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  size_t v7 = v5 - *(void *)a3;
  if (v5 == *(void *)a3)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if ((v7 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - *(void *)a3);
    uint64_t v9 = v8;
    uint64_t v11 = &v8[v7];
    memcpy(v8, v6, v7);
    uint64_t v10 = &v8[v7];
  }
  qmi::ClientProxy::State::registerResponse(v4, a2, (uint64_t)&v9);
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_1A10D39BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::State::registerResponse(void *a1, __int16 a2, uint64_t a3)
{
  uint64_t v5 = *(const void **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  size_t v6 = v4 - *(void *)a3;
  if (v4 == *(void *)a3)
  {
    uint64_t v8 = 0;
    size_t v7 = 0;
    uint64_t v9 = (std::__shared_weak_count *)a1[2];
    if (!v9) {
      goto LABEL_9;
    }
  }
  else
  {
    if ((v6 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    size_t v7 = (char *)operator new(v4 - *(void *)a3);
    uint64_t v8 = &v7[v6];
    memcpy(v7, v5, v6);
    uint64_t v9 = (std::__shared_weak_count *)a1[2];
    if (!v9) {
LABEL_9:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v10 = a1[1];
  uint64_t v11 = std::__shared_weak_count::lock(v9);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t v12 = v11;
  char v13 = operator new(0x28uLL);
  *(void *)char v13 = a1;
  v13[4] = a2;
  *((void *)v13 + 2) = v7;
  *((void *)v13 + 3) = v8;
  *((void *)v13 + 4) = v8;
  uint64_t v14 = a1[3];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = v13;
  v15[1] = v10;
  v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0>(qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0,std::default_delete<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A10D3B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::deregisterResponse(qmi::ClientProxy *this, __int16 a2)
{
  uint64_t v2 = *((void *)this + 2);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN3qmi11ClientProxy5State18deregisterResponseEt_block_invoke;
  v3[3] = &__block_descriptor_tmp_35;
  v3[4] = v2;
  __int16 v4 = a2;
  ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped((uint64_t *)(v2 + 8), (uint64_t)v3);
}

void qmi::ClientProxy::State::deregisterResponse(qmi::ClientProxy::State *this, __int16 a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN3qmi11ClientProxy5State18deregisterResponseEt_block_invoke;
  v2[3] = &__block_descriptor_tmp_35;
  v2[4] = this;
  __int16 v3 = a2;
  ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v2);
}

void qmi::ClientProxy::sendIndication(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  size_t v7 = 0;
  __int16 v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  size_t v5 = v3 - *(void *)a2;
  if (v3 == *(void *)a2)
  {
    size_t v6 = 0;
  }
  else
  {
    if ((v5 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    size_t v6 = (char *)operator new(v3 - *(void *)a2);
    size_t v7 = v6;
    uint64_t v9 = &v6[v5];
    memcpy(v6, v4, v5);
    uint64_t v8 = &v6[v5];
  }
  qmi::ClientProxy::State::sendIndication(v2, (uint64_t)&v7);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1A10D3D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::State::sendIndication(uint64_t a1, uint64_t a2)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  v6[2] = ___ZN3qmi11ClientProxy5State14sendIndicationENSt3__16vectorIhNS2_9allocatorIhEEEE_block_invoke;
  void v6[3] = &__block_descriptor_tmp_36;
  v6[4] = a1;
  __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __int16 v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  size_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    __p = operator new(v3 - *(void *)a2);
    uint64_t v9 = (char *)__p + v5;
    memcpy(__p, v4, v5);
    uint64_t v8 = (char *)__p + v5;
  }
  ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v6);
  if (__p)
  {
    uint64_t v8 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1A10D3E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::handleMessage(uint64_t a1, void **a2)
{
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3002000000;
  void v6[3] = __Block_byref_object_copy_;
  uint64_t v3 = *a2;
  v6[4] = __Block_byref_object_dispose_;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  __int16 v4 = *(NSObject **)(*(void *)(a1 + 16) + 24);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  v5[2] = ___ZNK3qmi11ClientProxy13handleMessageERKN3xpc4dictE_block_invoke;
  v5[3] = &__block_descriptor_tmp_5;
  v5[4] = v6;
  v5[5] = a1;
  dispatch_async(v4, v5);
  _Block_object_dispose(v6, 8);
  xpc_release(object);
}

void ___ZNK3qmi11ClientProxy13handleMessageERKN3xpc4dictE_block_invoke(uint64_t a1)
{
}

void qmi::ClientProxy::handleMessage_sync(uint64_t a1, xpc_object_t *a2)
{
}

const char *qmi::asString(unsigned int a1)
{
  if (a1 > 7) {
    return "(unknown)";
  }
  else {
    return off_1E5A40F70[a1];
  }
}

{
  if (a1 > 5) {
    return "(unknown)";
  }
  else {
    return off_1E5A41078[a1];
  }
}

{
  if (a1 > 2) {
    return "(unknown)";
  }
  else {
    return off_1E5A41198[a1];
  }
}

{
  if (a1 > 3) {
    return "???";
  }
  else {
    return off_1E5A411B0[a1];
  }
}

uint64_t qmi::ClientProxy::State::State(uint64_t a1, long long *a2, NSObject **a3, char a4, void *a5)
{
  uint64_t v10 = qmi::asShortString();
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v16, "com.apple.telephony.bb", v10);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v11 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v11) {
    dispatch_retain(v11);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v17);
  MEMORY[0x1A622BDE0](v17);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(void *)a1 = &unk_1EF43C708;
  uint64_t v12 = (std::string *)(a1 + 48);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    *(void *)(a1 + 64) = *((void *)a2 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 72) = a4;
  *(_DWORD *)(a1 + 76) = 1;
  *(_WORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 5;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 232) = *a5;
  uint64_t v14 = a5[1];
  *(void *)(a1 + 240) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1A10D4114(_Unwind_Exception *a1)
{
  ctu::SharedLoggable<qmi::ClientProxy::State,ctu::OsLogLogger>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<qmi::ClientProxy::State,ctu::OsLogLogger>::~SharedLoggable(void *a1)
{
  MEMORY[0x1A622BDE0](a1 + 4);
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  __int16 v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void qmi::ClientProxy::State::~State(qmi::ClientProxy::State *this)
{
  *(void *)this = &unk_1EF43C708;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void **)*((void *)this + 28);
    *((void *)this + 28) = 0;
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = (void **)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v3)
  {
LABEL_4:
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>>>::destroy(v3[1]);
    operator delete(v3);
  }
LABEL_5:
  std::__tree<unsigned short>::destroy((uint64_t)this + 200, *((void **)this + 26));
  __int16 v4 = *((void *)this + 24);
  if (v4)
  {
    dispatch_group_leave(v4);
    size_t v5 = *((void *)this + 24);
    if (v5) {
      dispatch_release(v5);
    }
  }
  size_t v6 = (void **)((char *)this + 136);
  std::deque<qmi::ClientProxy::State::Transaction>::clear((void *)this + 17);
  size_t v7 = (void **)*((void *)this + 18);
  uint64_t v8 = (void **)*((void *)this + 19);
  if (v7 != v8)
  {
    do
    {
      uint64_t v9 = *v7++;
      operator delete(v9);
    }
    while (v7 != v8);
    uint64_t v11 = *((void *)this + 18);
    uint64_t v10 = *((void *)this + 19);
    if (v10 != v11) {
      *((void *)this + 19) = v10 + ((v11 - v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*v6) {
    operator delete(*v6);
  }
  uint64_t v12 = (void **)((char *)this + 88);
  std::deque<qmi::ClientProxy::State::Transaction>::clear((void *)this + 11);
  long long v13 = (void **)*((void *)this + 12);
  uint64_t v14 = (void **)*((void *)this + 13);
  if (v13 != v14)
  {
    do
    {
      uint64_t v15 = *v13++;
      operator delete(v15);
    }
    while (v13 != v14);
    uint64_t v17 = *((void *)this + 12);
    uint64_t v16 = *((void *)this + 13);
    if (v16 != v17) {
      *((void *)this + 13) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*v12) {
    operator delete(*v12);
  }
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    MEMORY[0x1A622BDE0]((char *)this + 40);
    signed int v18 = *((void *)this + 4);
    if (!v18) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  operator delete(*((void **)this + 6));
  MEMORY[0x1A622BDE0]((char *)this + 40);
  signed int v18 = *((void *)this + 4);
  if (v18) {
LABEL_22:
  }
    dispatch_release(v18);
LABEL_23:
  xpc_object_t v19 = *((void *)this + 3);
  if (v19) {
    dispatch_release(v19);
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
}

void qmi::ClientProxy::State::handleServerError(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*a2 == MEMORY[0x1E4F14550])
  {
    size_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      size_t v6 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        size_t v6 = (void *)*v6;
      }
      int v9 = 136315138;
      uint64_t v10 = v6;
      _os_log_impl(&dword_1A10C7000, v5, OS_LOG_TYPE_DEFAULT, "#I client '%s' ignoring XPC_ERROR_TERMINATION_IMMINENT", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    qmi::ClientProxy::State::handleStatus_sync(a1, 1u);
    uint64_t v3 = *(void *)(a1 + 232);
    if (v3)
    {
      __int16 v4 = *(void (**)(void))(*(void *)v3 + 8);
      v4();
    }
    else
    {
      size_t v7 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = (void *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          uint64_t v8 = (void *)*v8;
        }
        int v9 = 136315138;
        uint64_t v10 = v8;
        _os_log_error_impl(&dword_1A10C7000, v7, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport in server error handler", (uint8_t *)&v9, 0xCu);
      }
    }
  }
}

void qmi::ClientProxy::State::handleStatus_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  __int16 v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    size_t v5 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
    {
      size_t v5 = (void *)*v5;
      if (a2 <= 2)
      {
LABEL_4:
        size_t v6 = off_1E5A40F58[a2];
        uint64_t v7 = *(int *)(a1 + 76);
        if (v7 > 7)
        {
LABEL_5:
          uint64_t v8 = "(unknown)";
LABEL_9:
          int v18 = 136315650;
          xpc_object_t v19 = v5;
          __int16 v20 = 2080;
          uint64_t v21 = v6;
          __int16 v22 = 2080;
          unint64_t v23 = v8;
          _os_log_impl(&dword_1A10C7000, v4, OS_LOG_TYPE_DEFAULT, "#I [%s]: handleStatus_sync(%s), current fQMuxState=%s", (uint8_t *)&v18, 0x20u);
          goto LABEL_10;
        }
LABEL_8:
        uint64_t v8 = off_1E5A40F70[v7];
        goto LABEL_9;
      }
    }
    else if (a2 <= 2)
    {
      goto LABEL_4;
    }
    size_t v6 = "(unknown)";
    uint64_t v7 = *(int *)(a1 + 76);
    if (v7 > 7) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
LABEL_10:
  if (a2 == 1)
  {
    int v10 = *(_DWORD *)(a1 + 76);
    if ((v10 - 4) >= 3)
    {
      if (!v10)
      {
        long long v13 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = (void *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0) {
            uint64_t v17 = (void *)*v17;
          }
          int v18 = 136315138;
          xpc_object_t v19 = v17;
          _os_log_debug_impl(&dword_1A10C7000, v13, OS_LOG_TYPE_DEBUG, "#D [%s]: Stopping client before it started; will re-start",
            (uint8_t *)&v18,
            0xCu);
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        qmi::ClientProxy::State::cancelAllMessages_sync((qmi::ClientProxy::State *)a1);
        uint64_t v14 = *(NSObject **)(a1 + 192);
        *(void *)(a1 + 192) = 0;
        if (v14)
        {
          dispatch_group_leave(v14);
          dispatch_release(v14);
        }
        *(_DWORD *)(a1 + 76) = 1;
      }
    }
    else
    {
      uint64_t v11 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = (void *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          uint64_t v15 = (void *)*v15;
        }
        int v18 = 136315138;
        xpc_object_t v19 = v15;
        _os_log_debug_impl(&dword_1A10C7000, v11, OS_LOG_TYPE_DEBUG, "#D [%s]: Stopping client and cleaning up", (uint8_t *)&v18, 0xCu);
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
      qmi::ClientProxy::State::cancelAllMessages_sync((qmi::ClientProxy::State *)a1);
      uint64_t v12 = *(NSObject **)(a1 + 192);
      *(void *)(a1 + 192) = 0;
      if (v12)
      {
        dispatch_group_leave(v12);
        dispatch_release(v12);
      }
      qmi::ClientProxy::State::sendDisconnectMessage_sync((qmi::ClientProxy::State *)a1, 1);
    }
  }
  else if (a2 == 2 && *(_DWORD *)(a1 + 76) == 1)
  {
    int v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        uint64_t v16 = (void *)*v16;
      }
      int v18 = 136315138;
      xpc_object_t v19 = v16;
      _os_log_debug_impl(&dword_1A10C7000, v9, OS_LOG_TYPE_DEBUG, "#D [%s]: Starting client", (uint8_t *)&v18, 0xCu);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    *(_DWORD *)(a1 + 76) = 0;
  }
}

void qmi::ClientProxy::State::handleSendNotReady_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(*a2, "txid");
  xpc_object_t v5 = value;
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v5 = v4;
  }
  qmi::ClientProxy::State::sendInternalErrorResponseForRemoteId_sync(a1, &v5, 1);
  xpc_release(v4);
}

void sub_1A10D490C(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::State::handleIndWakeChange_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t value = xpc_dictionary_get_value(*a2, "set_ind_wake");
  xpc_object_t v6 = value;
  uint64_t v7 = MEMORY[0x1E4F14568];
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    if (!v6)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A622CC50](v6) == v7)
  {
    xpc_retain(v6);
    xpc_object_t v8 = v6;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
  }
LABEL_8:
  xpc_release(v6);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v4);
  uint64_t v10 = MEMORY[0x1A622CC50](v8);
  xpc_release(v9);
  if (v10 != v7) {
    goto LABEL_29;
  }
  uint64_t v12 = *(void **)(a1 + 208);
  uint64_t v11 = (void *)(a1 + 208);
  long long v13 = v11 - 1;
  std::__tree<unsigned short>::destroy((uint64_t)(v11 - 1), v12);
  *(v11 - 1) = v11;
  void *v11 = 0;
  v11[1] = 0;
  if (v8)
  {
    xpc_retain(v8);
    xpc_object_t v14 = v8;
LABEL_12:
    xpc_retain(v14);
    xpc_object_t v15 = v14;
    goto LABEL_13;
  }
  xpc_object_t v14 = xpc_null_create();
  if (v14) {
    goto LABEL_12;
  }
  xpc_object_t v15 = xpc_null_create();
  xpc_object_t v14 = 0;
LABEL_13:
  xpc_release(v14);
  if (v8)
  {
    xpc_retain(v8);
    xpc_object_t v16 = v8;
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
  }
  if (MEMORY[0x1A622CC50](v8) == v7)
  {
    size_t count = xpc_array_get_count(v8);
    if (v16) {
      goto LABEL_18;
    }
  }
  else
  {
    size_t count = 0;
    if (v16)
    {
LABEL_18:
      xpc_retain(v16);
      xpc_object_t v18 = v16;
      goto LABEL_21;
    }
  }
  xpc_object_t v18 = xpc_null_create();
LABEL_21:
  xpc_release(v16);
  uint64_t v19 = *v13;
  v26[0] = v13;
  v26[1] = v19;
  if (count || v15 != v18)
  {
    size_t v20 = 0;
    if (v15 != v18)
    {
      while (1)
      {
        xpc_object_t v23 = xpc_array_get_value(v15, v20);
        xpc_object_t object = v23;
        if (v23) {
          xpc_retain(v23);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        unsigned __int16 v24 = xpc::dyn_cast_or_default();
        xpc_release(object);
        unsigned __int16 v25 = v24;
        std::insert_iterator<std::set<unsigned short>>::operator=[abi:ne180100]((uint64_t)v26, &v25);
        ++v20;
      }
    }
    do
    {
      xpc_object_t v21 = xpc_array_get_value(v15, v20);
      xpc_object_t object = v21;
      if (v21) {
        xpc_retain(v21);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      unsigned __int16 v22 = xpc::dyn_cast_or_default();
      xpc_release(object);
      unsigned __int16 v25 = v22;
      std::insert_iterator<std::set<unsigned short>>::operator=[abi:ne180100]((uint64_t)v26, &v25);
      ++v20;
    }
    while (count != v20);
  }
  xpc_release(v18);
  xpc_release(v15);
LABEL_29:
  xpc_release(v8);
}

void sub_1A10D4BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v14);
  xpc_release(v13);
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::State::handleServerError_sync(uint64_t a1, void **a2)
{
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3002000000;
  void v6[3] = __Block_byref_object_copy__15;
  uint64_t v3 = *a2;
  v6[4] = __Block_byref_object_dispose__16;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v4 = *(NSObject **)(a1 + 24);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  v5[2] = ___ZN3qmi11ClientProxy5State22handleServerError_syncERKN3xpc6objectE_block_invoke;
  v5[3] = &__block_descriptor_tmp_19;
  v5[4] = v6;
  v5[5] = a1;
  dispatch_async(v4, v5);
  _Block_object_dispose(v6, 8);
  xpc_release(object);
}

xpc_object_t __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  xpc_object_t result = xpc_null_create();
  *(void *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ___ZN3qmi11ClientProxy5State22handleServerError_syncERKN3xpc6objectE_block_invoke(uint64_t a1)
{
}

void qmi::ClientProxy::State::sendInternalErrorResponseForTxId_sync(qmi::ClientProxy::State *this, int a2, int a3)
{
  uint64_t v3 = *((void *)this + 12);
  if (*((void *)this + 13) != v3)
  {
    unint64_t v6 = *((void *)this + 15);
    uint64_t v7 = (uint64_t *)(v3 + 8 * (v6 >> 7));
    uint64_t v8 = *v7;
    uint64_t v9 = *v7 + 32 * (v6 & 0x7F);
    uint64_t v10 = *(void *)(v3 + (((*((void *)this + 16) + v6) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*((void *)this + 16) + v6) & 0x7F);
    if (v9 != v10)
    {
      while (*(unsigned __int16 *)(*(void *)(v9 + 16) + 26) != a2)
      {
        v9 += 32;
        if (v9 - v8 == 4096)
        {
          uint64_t v12 = v7[1];
          ++v7;
          uint64_t v8 = v12;
          uint64_t v9 = v12;
        }
        if (v9 == v10) {
          return;
        }
      }
    }
    if (v9 != v10)
    {
      xpc_object_t v11 = xpc_int64_create(*(unsigned __int16 *)(*(void *)(v9 + 16) + 26));
      xpc_object_t v13 = v11;
      if (!v11)
      {
        xpc_object_t v11 = xpc_null_create();
        xpc_object_t v13 = v11;
      }
      qmi::ClientProxy::State::sendInternalErrorResponseForRemoteId_sync((uint64_t)this, &v13, a3);
      xpc_release(v11);
    }
  }
}

void sub_1A10D4EEC(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::State::sendInternalErrorResponseForRemoteId_sync(uint64_t a1, xpc_object_t *a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 232);
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4))
    {
      xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
      if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A622CC50](v7) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v7);
          xpc_object_t v8 = v7;
        }
        else
        {
          xpc_object_t v8 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
        xpc_object_t v7 = 0;
      }
      xpc_release(v7);
      xpc_object_t v11 = xpc_null_create();
      xpc_dictionary_set_value(v8, "resp_qmi_message", v11);
      xpc_object_t v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      xpc_object_t v13 = *a2;
      if (v13) {
        xpc_retain(v13);
      }
      else {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, "txid", v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      xpc_object_t v15 = xpc_int64_create(a3);
      if (!v15) {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, "internal_error", v15);
      xpc_object_t v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      uint64_t v17 = *(void *)(a1 + 232);
      xpc_object_t object = v8;
      if (v8) {
        xpc_retain(v8);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v17 + 24))(v17, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v8);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      *(_DWORD *)buf = 136315138;
      size_t v20 = v10;
      _os_log_error_impl(&dword_1A10C7000, v9, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when sending internal error response for remote id", buf, 0xCu);
    }
  }
}

void sub_1A10D518C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void qmi::ClientProxy::State::cleanUpDisconnect_sync(NSObject **this)
{
  qmi::ClientProxy::State::cancelAllMessages_sync((qmi::ClientProxy::State *)this);
  uint64_t v2 = this[24];
  this[24] = 0;
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void qmi::ClientProxy::State::cancelAllMessages_sync(qmi::ClientProxy::State *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (*((void *)this + 13) != v2)
  {
    unint64_t v3 = *((void *)this + 15);
    uint64_t v4 = (void *)(v2 + 8 * (v3 >> 7));
    uint64_t v5 = *v4 + 32 * (v3 & 0x7F);
    uint64_t v6 = *(void *)(v2 + (((*((void *)this + 16) + v3) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*((void *)this + 16) + v3) & 0x7F);
    while (v5 != v6)
    {
      xpc_object_t v7 = xpc_int64_create(*(unsigned __int16 *)(*(void *)(v5 + 16) + 26));
      xpc_object_t v17 = v7;
      if (!v7)
      {
        xpc_object_t v7 = xpc_null_create();
        xpc_object_t v17 = v7;
      }
      qmi::ClientProxy::State::sendInternalErrorResponseForRemoteId_sync((uint64_t)this, &v17, 2);
      xpc_release(v7);
      v5 += 32;
      if (v5 - *v4 == 4096)
      {
        uint64_t v8 = v4[1];
        ++v4;
        uint64_t v5 = v8;
      }
    }
  }
  std::deque<qmi::ClientProxy::State::Transaction>::clear((void *)this + 11);
  std::deque<qmi::ClientProxy::State::Transaction>::shrink_to_fit((uint64_t)this + 88);
  uint64_t v9 = *((void *)this + 18);
  if (*((void *)this + 19) != v9)
  {
    unint64_t v10 = *((void *)this + 21);
    xpc_object_t v11 = (void *)(v9 + 8 * (v10 >> 7));
    uint64_t v12 = *v11 + 32 * (v10 & 0x7F);
    uint64_t v13 = *(void *)(v9 + (((*((void *)this + 22) + v10) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*((void *)this + 22) + v10) & 0x7F);
    while (v12 != v13)
    {
      xpc_object_t v14 = xpc_int64_create(*(unsigned __int16 *)(*(void *)(v12 + 16) + 26));
      xpc_object_t v17 = v14;
      if (!v14)
      {
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t v17 = v14;
      }
      qmi::ClientProxy::State::sendInternalErrorResponseForRemoteId_sync((uint64_t)this, &v17, 2);
      xpc_release(v14);
      v12 += 32;
      if (v12 - *v11 == 4096)
      {
        uint64_t v15 = v11[1];
        ++v11;
        uint64_t v12 = v15;
      }
    }
  }
  xpc_object_t v16 = (void *)((char *)this + 136);
  std::deque<qmi::ClientProxy::State::Transaction>::clear(v16);

  std::deque<qmi::ClientProxy::State::Transaction>::shrink_to_fit((uint64_t)v16);
}

void sub_1A10D5428(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void std::deque<qmi::ClientProxy::State::Transaction>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v4 = a1[4];
    uint64_t v5 = &v2[v4 >> 7];
    uint64_t v6 = (uint64_t)*v5 + 32 * (v4 & 0x7F);
    uint64_t v7 = *(uint64_t *)((char *)v2 + (((a1[5] + v4) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v4) & 0x7F);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v8 = *(NSObject **)(v6 + 8);
        if (v8) {
          dispatch_source_cancel(v8);
        }
        uint64_t v9 = *(std::__shared_weak_count **)(v6 + 24);
        if (v9)
        {
          if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        unint64_t v10 = *(NSObject **)(v6 + 8);
        if (v10) {
          goto LABEL_10;
        }
LABEL_11:
        v6 += 32;
        if (v6 - (void)*v5 == 4096)
        {
          uint64_t v11 = (uint64_t)v5[1];
          ++v5;
          uint64_t v6 = v11;
        }
        if (v6 == v7)
        {
          uint64_t v2 = (void **)a1[1];
          unint64_t v3 = (void **)a1[2];
          goto LABEL_16;
        }
      }
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      unint64_t v10 = *(NSObject **)(v6 + 8);
      if (!v10) {
        goto LABEL_11;
      }
LABEL_10:
      dispatch_release(v10);
      goto LABEL_11;
    }
LABEL_16:
    a1[5] = 0;
    unint64_t v12 = (char *)v3 - (char *)v2;
    if (v12 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v13 = a1[2];
        uint64_t v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        unint64_t v12 = v13 - (void)v2;
      }
      while (v12 > 0x10);
    }
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 64;
  }
  else
  {
    if (v12 >> 3 != 2) {
      return;
    }
    uint64_t v14 = 128;
  }
  a1[4] = v14;
}

void qmi::ClientProxy::State::sendDisconnectMessage_sync(qmi::ClientProxy::State *this, BOOL a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 29);
  if (v3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 16))(v3))
    {
      xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
      if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A622CC50](v5) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v5);
          xpc_object_t v6 = v5;
        }
        else
        {
          xpc_object_t v6 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v6 = xpc_null_create();
        xpc_object_t v5 = 0;
      }
      xpc_release(v5);
      xpc_object_t v9 = xpc_int64_create(1);
      if (!v9) {
        xpc_object_t v9 = xpc_null_create();
      }
      xpc_dictionary_set_value(v6, "status", v9);
      xpc_object_t v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
      xpc_object_t v11 = xpc_BOOL_create(a2);
      if (!v11) {
        xpc_object_t v11 = xpc_null_create();
      }
      xpc_dictionary_set_value(v6, "error", v11);
      xpc_object_t v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      uint64_t v13 = *((void *)this + 29);
      xpc_object_t object = v6;
      if (v6) {
        xpc_retain(v6);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v13 + 24))(v13, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v6);
    }
    *((_DWORD *)this + 19) = 1;
  }
  else
  {
    uint64_t v7 = *((void *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      *(_DWORD *)buf = 136315138;
      xpc_object_t v16 = v8;
      _os_log_error_impl(&dword_1A10C7000, v7, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when sending disconnect message", buf, 0xCu);
    }
  }
}

void sub_1A10D583C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t qmi::ClientProxy::State::getIndWakeSet_sync(qmi::ClientProxy::State *this)
{
  return (uint64_t)this + 200;
}

void ___ZN3qmi11ClientProxy5State22handleSentMessage_syncEt_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = std::__shared_weak_count::lock(v2);
  long long v35 = v4;
  if (!v4) {
    return;
  }
  if (!*(void *)(a1 + 40))
  {
    xpc_object_t v18 = v4;
LABEL_29:
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    return;
  }
  qmi::ClientProxy::State::sendInternalErrorResponseForTxId_sync((qmi::ClientProxy::State *)v3, *(unsigned __int16 *)(a1 + 56), 0);
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[7] = v5;
  v32[8] = v5;
  v32[5] = v5;
  v32[6] = v5;
  v32[3] = v5;
  v32[4] = v5;
  v32[1] = v5;
  v32[2] = v5;
  v32[0] = v5;
  long long v30 = v5;
  long long v31 = v5;
  long long v28 = v5;
  *(_OWORD *)__p = v5;
  long long v26 = v5;
  long long v27 = v5;
  long long v25 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"ATCS_TIMEOUT on message for svc=", 32);
  xpc_object_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" client=", 8);
  (*(void (**)(uint64_t))(*(void *)v3 + 64))(v3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" (txid=", 7);
  uint64_t v8 = (void *)std::ostream::operator<<();
  xpc_object_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" msgid=0x", 9);
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 8;
  xpc_object_t v10 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v10 + *(void *)(*v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v10 + *(void *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 2;
  xpc_object_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
  int v12 = *(char *)(v3 + 71);
  if (v12 >= 0) {
    uint64_t v13 = v3 + 48;
  }
  else {
    uint64_t v13 = *(void *)(v3 + 48);
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v3 + 71);
  }
  else {
    uint64_t v14 = *(void *)(v3 + 56);
  }
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  if ((BYTE8(v31) & 0x10) != 0)
  {
    uint64_t v19 = v31;
    if ((unint64_t)v31 < *((void *)&v28 + 1))
    {
      *(void *)&long long v31 = *((void *)&v28 + 1);
      uint64_t v19 = *((void *)&v28 + 1);
    }
    size_t v20 = (const void *)v28;
    size_t v16 = v19 - v28;
    if ((unint64_t)(v19 - v28) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_33;
    }
  }
  else
  {
    if ((BYTE8(v31) & 8) == 0)
    {
      size_t v16 = 0;
      HIBYTE(v24) = 0;
      uint64_t v17 = __dst;
      goto LABEL_24;
    }
    size_t v20 = (const void *)*((void *)&v26 + 1);
    size_t v16 = *((void *)&v27 + 1) - *((void *)&v26 + 1);
    if (*((void *)&v27 + 1) - *((void *)&v26 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_33:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v21 = v16 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v17 = (void **)operator new(v21 + 1);
    __dst[1] = (void *)v16;
    unint64_t v24 = v22 | 0x8000000000000000;
    __dst[0] = v17;
    goto LABEL_23;
  }
  HIBYTE(v24) = v16;
  uint64_t v17 = __dst;
  if (v16) {
LABEL_23:
  }
    memmove(v17, v20, v16);
LABEL_24:
  *((unsigned char *)v17 + v16) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, __dst);
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)&long long v25 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v25 + *(void *)(v25 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v25 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A622C370](v32);
  xpc_object_t v18 = v35;
  if (v35) {
    goto LABEL_29;
  }
}

void sub_1A10D5CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v16 - 64);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v16 - 64);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  long long v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1A10D5EDC(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1A622C370](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A622C370](a1 + 112);
  return a1;
}

void qmi::ClientProxy::State::dumpState_sync(qmi::ClientProxy::State *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)*((void *)this + 25);
  uint64_t v3 = (char *)this + 208;
  memset(&__p, 0, sizeof(__p));
  if (v2 == (char *)this + 208) {
    goto LABEL_30;
  }
  std::to_string((std::string *)v24, *((unsigned __int16 *)v2 + 13));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::string __p = *(std::string *)v24;
    uint64_t v4 = (char *)*((void *)v2 + 1);
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string __p = *(std::string *)v24;
    uint64_t v4 = (char *)*((void *)v2 + 1);
    if (!v4)
    {
      do
      {
LABEL_8:
        long long v5 = (char *)*((void *)v2 + 2);
        BOOL v6 = *(void *)v5 == (void)v2;
        uint64_t v2 = v5;
      }
      while (!v6);
      goto LABEL_10;
    }
  }
  do
  {
    long long v5 = v4;
    uint64_t v4 = *(char **)v4;
  }
  while (v4);
LABEL_10:
  if (v5 != v3)
  {
    do
    {
      v24[23] = 1;
      strcpy(v24, ",");
      std::string::append(&__p, v24, 1uLL);
      if ((v24[23] & 0x80000000) != 0) {
        operator delete(*(void **)v24);
      }
      std::to_string((std::string *)v24, *((unsigned __int16 *)v5 + 13));
      if (v24[23] >= 0) {
        uint64_t v7 = v24;
      }
      else {
        uint64_t v7 = *(const std::string::value_type **)v24;
      }
      if (v24[23] >= 0) {
        std::string::size_type v8 = v24[23];
      }
      else {
        std::string::size_type v8 = *(void *)&v24[8];
      }
      std::string::append(&__p, v7, v8);
      if ((v24[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v24);
        xpc_object_t v9 = (char *)*((void *)v5 + 1);
        if (v9)
        {
          do
          {
LABEL_25:
            xpc_object_t v10 = v9;
            xpc_object_t v9 = *(char **)v9;
          }
          while (v9);
          goto LABEL_12;
        }
      }
      else
      {
        xpc_object_t v9 = (char *)*((void *)v5 + 1);
        if (v9) {
          goto LABEL_25;
        }
      }
      do
      {
        xpc_object_t v10 = (char *)*((void *)v5 + 2);
        BOOL v6 = *(void *)v10 == (void)v5;
        long long v5 = v10;
      }
      while (!v6);
LABEL_12:
      long long v5 = v10;
    }
    while (v10 != v3);
  }
LABEL_30:
  xpc_object_t v11 = *((void *)this + 5);
  if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_42;
  }
  int v12 = (void *)((char *)this + 48);
  if (*((char *)this + 71) < 0) {
    int v12 = (void *)*v12;
  }
  int v13 = *((unsigned __int8 *)this + 72);
  qmi::ClientProxy::State::getStateString_sync(this, v21);
  int v14 = v22;
  uint64_t v15 = (void **)v21[0];
  qmi::ClientProxy::State::getTxQueueState_sync(this, v19);
  uint64_t v16 = v21;
  if (v14 < 0) {
    uint64_t v16 = v15;
  }
  if (v20 >= 0) {
    uint64_t v17 = v19;
  }
  else {
    uint64_t v17 = (void **)v19[0];
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)unint64_t v24 = 136447234;
  *(void *)&v24[4] = v12;
  *(_WORD *)&v24[12] = 1024;
  *(_DWORD *)&v24[14] = v13;
  *(_WORD *)&v24[18] = 2082;
  *(void *)&v24[20] = v16;
  __int16 v25 = 2082;
  long long v26 = v17;
  __int16 v27 = 2082;
  long long v28 = p_p;
  _os_log_impl(&dword_1A10C7000, v11, OS_LOG_TYPE_DEFAULT, "#I [%{public}s]   qmi::ClientProxy(svc=%d) [%{public}s] %{public}s ind_wake=[%{public}s]", v24, 0x30u);
  if (v20 < 0)
  {
    operator delete(v19[0]);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_42:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_43;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(v21[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_43:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1A10D62EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

unint64_t qmi::ClientProxy::State::getStateString_sync@<X0>(qmi::ClientProxy::State *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((int *)this + 19);
  if (v3 <= 7)
  {
    uint64_t v4 = off_1E5A40F70[v3];
    if (*((void *)this + 24)) {
      goto LABEL_3;
    }
LABEL_7:
    unint64_t result = strlen(v4);
    if (result > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v11 = result;
    if (result >= 0x17)
    {
      uint64_t v17 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((result | 7) != 0x17) {
        uint64_t v17 = result | 7;
      }
      uint64_t v18 = v17 + 1;
      uint64_t v19 = operator new(v17 + 1);
      a2[1] = v11;
      a2[2] = v18 | 0x8000000000000000;
      *a2 = v19;
      a2 = v19;
    }
    else
    {
      *((unsigned char *)a2 + 23) = result;
      if (!result) {
        goto LABEL_28;
      }
    }
    unint64_t result = (unint64_t)memcpy(a2, v4, v11);
LABEL_28:
    *((unsigned char *)a2 + v11) = 0;
    return result;
  }
  uint64_t v4 = "(unknown)";
  if (!*((void *)this + 24)) {
    goto LABEL_7;
  }
LABEL_3:
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[7] = v5;
  v27[8] = v5;
  v27[5] = v5;
  v27[6] = v5;
  v27[3] = v5;
  v27[4] = v5;
  v27[1] = v5;
  v27[2] = v5;
  long long v26 = v5;
  v27[0] = v5;
  *(_OWORD *)std::string __p = v5;
  long long v25 = v5;
  long long v22 = v5;
  *(_OWORD *)__src = v5;
  long long v20 = v5;
  long long v21 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v20);
  size_t v6 = strlen(v4);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)v4, v6);
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", lowpower=", 11);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  if ((BYTE8(v26) & 0x10) != 0)
  {
    int v12 = (unsigned char *)v26;
    if ((void *)v26 < __src[1])
    {
      *(void **)&long long v26 = __src[1];
      int v12 = __src[1];
    }
    int v13 = __src[0];
    size_t v9 = v12 - (char *)__src[0];
    if ((unint64_t)(v12 - (char *)__src[0]) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_30;
    }
  }
  else
  {
    if ((BYTE8(v26) & 8) == 0)
    {
      size_t v9 = 0;
      *((unsigned char *)a2 + 23) = 0;
      goto LABEL_21;
    }
    int v13 = (const void *)*((void *)&v21 + 1);
    size_t v9 = *((void *)&v22 + 1) - *((void *)&v21 + 1);
    if (*((void *)&v22 + 1) - *((void *)&v21 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_30:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v16 = operator new(v14 + 1);
    a2[1] = v9;
    a2[2] = v15 | 0x8000000000000000;
    *a2 = v16;
    a2 = v16;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v9;
    if (!v9) {
      goto LABEL_21;
    }
  }
  memmove(a2, v13, v9);
LABEL_21:
  *((unsigned char *)a2 + v9) = 0;
  *(void *)&long long v20 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v20 + *(void *)(v20 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v20 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A622C370](v27);
}

void sub_1A10D6688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::ClientProxy::State::getTxQueueState_sync@<X0>(qmi::ClientProxy::State *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[7] = v4;
  v29[8] = v4;
  v29[5] = v4;
  void v29[6] = v4;
  v29[3] = v4;
  v29[4] = v4;
  v29[1] = v4;
  v29[2] = v4;
  long long v28 = v4;
  v29[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v27 = v4;
  long long v24 = v4;
  *(_OWORD *)__src = v4;
  long long v22 = v4;
  long long v23 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"sendable=", 9);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)" simSlot=", 9);
  std::ostream::operator<<();
  uint64_t v5 = *((void *)this + 16);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 12);
    if (*((void *)this + 13) != v6)
    {
      unint64_t v7 = *((void *)this + 15);
      std::string::size_type v8 = (void *)(v6 + 8 * (v7 >> 7));
      uint64_t v9 = *v8 + 32 * (v7 & 0x7F);
      uint64_t v10 = *(void *)(v6 + (((v7 + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v7 + v5) & 0x7F);
      while (v9 != v10)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)" sent(", 6);
        size_t v11 = (void *)std::ostream::operator<<();
        int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)":0x", 3);
        *(_DWORD *)((char *)v12 + *(void *)(*v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v12 + *(void *)(*v12 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        int v13 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")", 1);
        v9 += 32;
        if (v9 - *v8 == 4096)
        {
          uint64_t v14 = v8[1];
          ++v8;
          uint64_t v9 = v14;
        }
      }
    }
  }
  if (*((void *)this + 22))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)" pending=", 9);
    std::ostream::operator<<();
  }
  if ((BYTE8(v28) & 0x10) != 0)
  {
    uint64_t v16 = (unsigned char *)v28;
    if ((void *)v28 < __src[1])
    {
      *(void **)&long long v28 = __src[1];
      uint64_t v16 = __src[1];
    }
    uint64_t v17 = __src[0];
    size_t v15 = v16 - (char *)__src[0];
    if ((unint64_t)(v16 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_27;
    }
  }
  else
  {
    if ((BYTE8(v28) & 8) == 0)
    {
      size_t v15 = 0;
      a2[23] = 0;
      goto LABEL_23;
    }
    uint64_t v17 = (const void *)*((void *)&v23 + 1);
    size_t v15 = *((void *)&v24 + 1) - *((void *)&v23 + 1);
    if (*((void *)&v24 + 1) - *((void *)&v23 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_27:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    long long v20 = operator new(v18 + 1);
    *((void *)a2 + 1) = v15;
    *((void *)a2 + 2) = v19 | 0x8000000000000000;
    *(void *)a2 = v20;
    a2 = v20;
    goto LABEL_22;
  }
  a2[23] = v15;
  if (v15) {
LABEL_22:
  }
    memmove(a2, v17, v15);
LABEL_23:
  a2[v15] = 0;
  *(void *)&long long v22 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v22 + *(void *)(v22 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v22 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A622C370](v29);
}

void sub_1A10D6A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A10D6A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *qmi::ClientProxy::State::createCallBacksHandler_sync(void *this)
{
  if (!this[28])
  {
    uint64_t v1 = this;
    this = operator new(0x18uLL);
    this[2] = 0;
    this[1] = 0;
    *this = this + 1;
    v1[28] = this;
  }
  return this;
}

void ___ZN3qmi11ClientProxy5State18deregisterResponseEt_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(CallbacksHandler **)(v2 + 224);
  if (v3)
  {
    unsigned int v4 = *(unsigned __int16 *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (CallbacksHandler *)operator new(0x18uLL);
    *((void *)v3 + 2) = 0;
    *((void *)v3 + 1) = 0;
    *(void *)uint64_t v3 = (char *)v3 + 8;
    *(void *)(v2 + 224) = v3;
    unsigned int v4 = *(unsigned __int16 *)(a1 + 40);
  }
  CallbacksHandler::deRegisterSendCallback(v3, v4);
}

void ___ZN3qmi11ClientProxy5State14sendIndicationENSt3__16vectorIhNS2_9allocatorIhEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  if (!*(void *)(v2 + 224))
  {
    uint64_t v3 = operator new(0x18uLL);
    v3[2] = 0;
    v3[1] = 0;
    *uint64_t v3 = v3 + 1;
    *(void *)(v2 + 224) = v3;
  }
  unsigned int v4 = (const void *)a1[5];
  size_t v5 = a1[6] - (void)v4;

  qmi::ClientProxy::State::handleIndication_sync(v2, v4, v5);
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(void *result, uint64_t a2)
{
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  uint64_t v3 = *(unsigned char **)(a2 + 40);
  uint64_t v2 = *(unsigned char **)(a2 + 48);
  size_t v4 = v2 - v3;
  if (v2 != v3)
  {
    size_t v5 = result;
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v2 - v3);
    v5[5] = v6;
    void v5[6] = v6;
    unint64_t v7 = &v6[v4];
    v5[7] = &v6[v4];
    unint64_t result = memcpy(v6, v3, v4);
    void v5[6] = v7;
  }
  return result;
}

void sub_1A10D6BEC(_Unwind_Exception *exception_object)
{
  size_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *std::function<void ()(xpc::dict)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::function<void ()(xpc::object const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void qmi::ClientProxy::State::setConnected_sync(qmi::ClientProxy::State *this)
{
  *(void *)&v26[5] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = (void *)((char *)this + 48);
    if (*((char *)this + 71) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    uint64_t v11 = *((int *)this + 19);
    if (v11 > 7) {
      int v12 = "(unknown)";
    }
    else {
      int v12 = off_1E5A40F70[v11];
    }
    *(_DWORD *)buf = 136315394;
    long long v24 = v10;
    __int16 v25 = 2080;
    *(void *)long long v26 = v12;
    _os_log_debug_impl(&dword_1A10C7000, v2, OS_LOG_TYPE_DEBUG, "#D [%s]: Client connected to modem; old state=%s",
      buf,
      0x16u);
    int v3 = *((_DWORD *)this + 19);
    if (v3 != 1) {
      goto LABEL_3;
    }
  }
  else
  {
    int v3 = *((_DWORD *)this + 19);
    if (v3 != 1)
    {
LABEL_3:
      if (!v3)
      {
        size_t v4 = *((void *)this + 5);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          size_t v5 = (void *)((char *)this + 48);
          if (*((char *)this + 71) < 0) {
            size_t v5 = (void *)*v5;
          }
          int v6 = *((unsigned __int8 *)this + 72);
          int v7 = (*(uint64_t (**)(qmi::ClientProxy::State *))(*(void *)this + 64))(this);
          *(_DWORD *)buf = 136315650;
          long long v24 = v5;
          __int16 v25 = 1024;
          *(_DWORD *)long long v26 = v6;
          void v26[2] = 1024;
          *(_DWORD *)&v26[3] = v7;
          _os_log_impl(&dword_1A10C7000, v4, OS_LOG_TYPE_DEFAULT, "#I [%s]: Client id received successfully: svc=0x%x id=%d; starting client",
            buf,
            0x18u);
        }
        if (*((void *)this + 24))
        {
          *((_DWORD *)this + 19) = 5;
          qmi::ClientProxy::State::checkIfLowPower_sync(this);
        }
        else
        {
          *((_DWORD *)this + 19) = 4;
        }
        xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
        if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1A622CC50](v8) == MEMORY[0x1E4F14590])
          {
            xpc_retain(v8);
            xpc_object_t v9 = v8;
          }
          else
          {
            xpc_object_t v9 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v9 = xpc_null_create();
          xpc_object_t v8 = 0;
        }
        xpc_release(v8);
        xpc_object_t v13 = xpc_int64_create(2);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        xpc_dictionary_set_value(v9, "status", v13);
        xpc_object_t v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        uint64_t v15 = *((void *)this + 29);
        if (v15)
        {
          xpc_object_t object = v9;
          if (v9) {
            xpc_retain(v9);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v15 + 24))(v15, &object);
          xpc_release(object);
          xpc_object_t object = 0;
          qmi::ClientProxy::State::sendIfPossible_sync(this);
        }
        else
        {
          uint64_t v16 = *((void *)this + 5);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            uint64_t v17 = (void *)((char *)this + 48);
            if (*((char *)this + 71) < 0) {
              uint64_t v17 = (void *)*v17;
            }
            *(_DWORD *)buf = 136315138;
            long long v24 = v17;
            _os_log_error_impl(&dword_1A10C7000, v16, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when setting connected state", buf, 0xCu);
          }
        }
        xpc_release(v9);
      }
      return;
    }
  }
  uint64_t v18 = *((void *)this + 5);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = (void *)((char *)this + 48);
    if (*((char *)this + 71) < 0) {
      uint64_t v19 = (void *)*v19;
    }
    int v20 = *((unsigned __int8 *)this + 72);
    int v21 = (*(uint64_t (**)(qmi::ClientProxy::State *))(*(void *)this + 64))(this);
    *(_DWORD *)buf = 136315650;
    long long v24 = v19;
    __int16 v25 = 1024;
    *(_DWORD *)long long v26 = v20;
    void v26[2] = 1024;
    *(_DWORD *)&v26[3] = v21;
    _os_log_impl(&dword_1A10C7000, v18, OS_LOG_TYPE_DEFAULT, "#I [%s]: Received client id (svc=0x%x id=%d), but client was manually released; releasing id now.",
      buf,
      0x18u);
  }
  (*(void (**)(qmi::ClientProxy::State *))(*(void *)this + 24))(this);
}

void sub_1A10D714C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::State::triggerLowPower_sync(qmi::ClientProxy::State *this, const group *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *((_DWORD *)this + 19);
  if (v4 <= 7)
  {
    if (((1 << v4) & 0x8E) != 0) {
      return;
    }
    if (((1 << v4) & 0x60) != 0)
    {
      size_t v5 = *((void *)this + 5);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = (void *)((char *)this + 48);
        if (*((char *)this + 71) < 0) {
          int v6 = (void *)*v6;
        }
        int v7 = "(unknown)";
        if (v4 == 5) {
          int v7 = "kLowPowerPendingSends";
        }
        if (v4 == 6) {
          int v7 = "kLowPowerStalled";
        }
        *(_DWORD *)buf = 136315394;
        unint64_t v30 = v6;
        __int16 v31 = 2080;
        long long v32 = (void *)v7;
        _os_log_impl(&dword_1A10C7000, v5, OS_LOG_TYPE_DEFAULT, "#E [%s]: ERROR: Triggered enter-low-power but we are in state %s already!", buf, 0x16u);
      }
    }
  }
  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  xpc_object_t v9 = *((void *)this + 24);
  *((void *)this + 24) = gr_name;
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  if (*((unsigned char *)this + 81))
  {
    uint64_t v10 = *((void *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      long long v23 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        long long v23 = (void *)*v23;
      }
      long long v24 = a2->gr_name;
      *(_DWORD *)buf = 136315394;
      unint64_t v30 = v23;
      __int16 v31 = 2048;
      long long v32 = v24;
      _os_log_debug_impl(&dword_1A10C7000, v10, OS_LOG_TYPE_DEBUG, "#D [%s]: Client low-power group ++ Holding open (%p)", buf, 0x16u);
    }
    xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
    if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A622CC50](v11) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v11);
        xpc_object_t v12 = v11;
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v11 = 0;
    }
    xpc_release(v11);
    xpc_object_t v13 = xpc_BOOL_create(1);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
    xpc_dictionary_set_value(v12, "low_power", v13);
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v15 || (uint64_t v16 = *((void *)this + 1), (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v18 = v17;
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v19 = a2->gr_name;
    if (v19) {
      dispatch_retain((dispatch_object_t)v19);
    }
    uint64_t v20 = *((void *)this + 29);
    if (v20)
    {
      xpc_object_t object = v12;
      if (v12) {
        xpc_retain(v12);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 1174405120;
      v25[2] = ___ZN3qmi11ClientProxy5State20triggerLowPower_syncERKN8dispatch5groupE_block_invoke;
      v25[3] = &__block_descriptor_tmp_38;
      v25[4] = this;
      v25[5] = v16;
      long long v26 = v18;
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      dispatch_object_t v27 = (dispatch_object_t)v19;
      if (v19) {
        dispatch_retain((dispatch_object_t)v19);
      }
      (*(void (**)(uint64_t, xpc_object_t *, void *))(*(void *)v20 + 32))(v20, &object, v25);
      xpc_release(object);
      xpc_object_t object = 0;
      if (v27) {
        dispatch_release(v27);
      }
      if (v26) {
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    else
    {
      int v21 = *((void *)this + 5);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        long long v22 = (void *)((char *)this + 48);
        if (*((char *)this + 71) < 0) {
          long long v22 = (void *)*v22;
        }
        *(_DWORD *)buf = 136315138;
        unint64_t v30 = v22;
        _os_log_error_impl(&dword_1A10C7000, v21, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when triggering low power state", buf, 0xCu);
      }
    }
    if (v19) {
      dispatch_release((dispatch_object_t)v19);
    }
    std::__shared_weak_count::__release_weak(v18);
    xpc_release(v12);
  }
  else
  {
    *((_DWORD *)this + 19) = 5;
    qmi::ClientProxy::State::checkIfLowPower_sync(this);
  }
}

void sub_1A10D7620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, dispatch_object_t object, xpc_object_t a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN3qmi11ClientProxy5State20triggerLowPower_syncERKN8dispatch5groupE_block_invoke(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    unsigned int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        int v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          int v7 = (void *)(v3 + 48);
          if (*(char *)(v3 + 71) < 0) {
            int v7 = (void *)*v7;
          }
          uint64_t v8 = a1[7];
          int v9 = 136315394;
          uint64_t v10 = v7;
          __int16 v11 = 2048;
          uint64_t v12 = v8;
          _os_log_debug_impl(&dword_1A10C7000, v6, OS_LOG_TYPE_DEBUG, "#D [%s]: Client low-power group -- Done (%p)", (uint8_t *)&v9, 0x16u);
          if (*(void *)(v3 + 192) != a1[7]) {
            goto LABEL_8;
          }
          goto LABEL_6;
        }
        if (*(void *)(v3 + 192) == a1[7])
        {
LABEL_6:
          if (*(_DWORD *)(v3 + 76) == 4)
          {
            *(_DWORD *)(v3 + 76) = 5;
            qmi::ClientProxy::State::checkIfLowPower_sync((qmi::ClientProxy::State *)v3);
          }
        }
      }
LABEL_8:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN3qmi11ClientProxy5StateEEE56c21_ZTSN8dispatch5groupE(void *a1, void *a2)
{
  uint64_t v2 = a2[6];
  a1[5] = a2[5];
  a1[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  a1[7] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN3qmi11ClientProxy5StateEEE56c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void qmi::ClientProxy::State::triggerExitLowPower_sync(qmi::ClientProxy::State *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 29);
  if (v2)
  {
    if (*((unsigned char *)this + 80) && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2))
    {
      xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
      if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A622CC50](v3) == MEMORY[0x1E4F14590])
        {
          xpc_retain(v3);
          xpc_object_t v4 = v3;
        }
        else
        {
          xpc_object_t v4 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v4 = xpc_null_create();
        xpc_object_t v3 = 0;
      }
      xpc_release(v3);
      xpc_object_t v7 = xpc_BOOL_create(1);
      if (!v7) {
        xpc_object_t v7 = xpc_null_create();
      }
      xpc_dictionary_set_value(v4, "exit_low_power", v7);
      xpc_object_t v8 = xpc_null_create();
      xpc_release(v7);
      xpc_release(v8);
      uint64_t v9 = *((void *)this + 29);
      xpc_object_t object = v4;
      if (v4) {
        xpc_retain(v4);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v9 + 24))(v9, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v4);
    }
    if ((*((_DWORD *)this + 19) - 4) <= 2)
    {
      *((_DWORD *)this + 19) = 4;
      qmi::ClientProxy::State::sendIfPossible_sync(this);
    }
  }
  else
  {
    size_t v5 = *((void *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = (void *)((char *)this + 48);
      if (*((char *)this + 71) < 0) {
        int v6 = (void *)*v6;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v12 = v6;
      _os_log_error_impl(&dword_1A10C7000, v5, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when triggering exit low power state", buf, 0xCu);
    }
  }
}

void sub_1A10D7AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void qmi::ClientProxy::State::init_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  xpc_object_t v3 = *(void (****)(void, uint64_t, dispatch_object_t *))(a1 + 232);
  xpc_object_t v4 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_DEFAULT))
    {
      int v6 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        int v6 = (void *)*v6;
      }
      int v7 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 136315394;
      uint64_t v12 = v6;
      __int16 v13 = 1024;
      int v14 = v7;
      _os_log_impl(&dword_1A10C7000, v4, OS_LOG_TYPE_DEFAULT, "#I [%s]: Client created of type 0x%x", buf, 0x12u);
      xpc_object_t v3 = *(void (****)(void, uint64_t, dispatch_object_t *))(a1 + 232);
    }
    xpc_object_t v8 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v8;
    if (v8) {
      dispatch_retain(v8);
    }
    (**v3)(v3, a2, &object);
    if (object) {
      dispatch_release(object);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v12 = v9;
    _os_log_error_impl(&dword_1A10C7000, v4, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport at time of initialization", buf, 0xCu);
  }
}

void sub_1A10D7CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::State::setDisconnected_sync(qmi::ClientProxy::State *this, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  xpc_object_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    size_t v5 = (void *)((char *)this + 48);
    if (*((char *)this + 71) < 0)
    {
      size_t v5 = (void *)*v5;
      uint64_t v6 = *((int *)this + 19);
      if (v6 <= 7) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v6 = *((int *)this + 19);
      if (v6 <= 7)
      {
LABEL_4:
        int v7 = off_1E5A40F70[v6];
LABEL_7:
        int v11 = 136315650;
        uint64_t v12 = v5;
        __int16 v13 = 1024;
        int v14 = a2;
        __int16 v15 = 2080;
        uint64_t v16 = v7;
        _os_log_impl(&dword_1A10C7000, v4, OS_LOG_TYPE_DEFAULT, "#I [%s]: Client disconnect from modem; temp failure=%d; old state=%s",
          (uint8_t *)&v11,
          0x1Cu);
        goto LABEL_8;
      }
    }
    int v7 = "(unknown)";
    goto LABEL_7;
  }
LABEL_8:
  int v8 = *((_DWORD *)this + 19);
  if ((v8 - 4) >= 3)
  {
    if (!v8)
    {
      qmi::ClientProxy::State::cancelAllMessages_sync(this);
      uint64_t v10 = *((void *)this + 24);
      *((void *)this + 24) = 0;
      if (v10)
      {
        dispatch_group_leave(v10);
        dispatch_release(v10);
      }
      if (a2) {
        (*(void (**)(qmi::ClientProxy::State *))(*(void *)this + 32))(this);
      }
      else {
        qmi::ClientProxy::State::sendDisconnectMessage_sync(this, 0);
      }
    }
  }
  else
  {
    qmi::ClientProxy::State::cancelAllMessages_sync(this);
    uint64_t v9 = *((void *)this + 24);
    *((void *)this + 24) = 0;
    if (v9)
    {
      dispatch_group_leave(v9);
      dispatch_release(v9);
    }
    qmi::ClientProxy::State::sendDisconnectMessage_sync(this, 1);
  }
}

uint64_t qmi::ClientProxy::State::Transaction::Transaction(uint64_t result, uint64_t *a2, int a3)
{
  *(_DWORD *)unint64_t result = a3;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)unint64_t result = a3;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void qmi::ClientProxy::State::Transaction::~Transaction(qmi::ClientProxy::State::Transaction *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    dispatch_source_cancel(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = *((void *)this + 1);
    if (!v4) {
      return;
    }
  }
  else
  {
    uint64_t v4 = *((void *)this + 1);
    if (!v4) {
      return;
    }
  }
  dispatch_release(v4);
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;

  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    dispatch_source_cancel(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = *((void *)this + 1);
    if (!v4) {
      return;
    }
  }
  else
  {
    uint64_t v4 = *((void *)this + 1);
    if (!v4) {
      return;
    }
  }
  dispatch_release(v4);
}

void __clang_call_terminate(void *a1)
{
}

__n128 qmi::ClientProxy::State::Transaction::Transaction(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  return result;
}

{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  return result;
}

uint64_t qmi::ClientProxy::State::Transaction::operator=(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = *((void *)a2 + 3);
  long long v5 = *(_OWORD *)(a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)a1 = v3;
  int v7 = *(NSObject **)(a1 + 8);
  *(_OWORD *)(a1 + 8) = v5;
  if (v7) {
    dispatch_source_cancel(v7);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7) {
      return a1;
    }
    goto LABEL_6;
  }
  if (v7) {
LABEL_6:
  }
    dispatch_release(v7);
  return a1;
}

void ___ZN3qmi11ClientProxy5State11Transaction10startTimerEP16dispatch_queue_sU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(NSObject **)(a1 + 40);

  dispatch_source_cancel(v2);
}

uint64_t qmi::QmiClientProxyAdapter::QmiClientProxyAdapter(uint64_t a1, long long *a2, NSObject **a3, char a4, uint64_t *a5)
{
  *(void *)a1 = &unk_1EF43CC30;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v10;
  }
  *(unsigned char *)(a1 + 32) = a4;
  *(unsigned char *)(a1 + 33) = -1;
  *(void *)(a1 + 36) = 0x2FFFFFFFFLL;
  *(unsigned char *)(a1 + 44) = 1;
  uint64_t v11 = *a5;
  uint64_t v12 = (std::__shared_weak_count *)a5[1];
  v14[0] = v11;
  v14[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::ClientProxy::State::State(a1 + 48, a2, a3, a4, v14);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)a1 = &unk_1EF43C888;
  *(void *)(a1 + 48) = &unk_1EF43C950;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  return a1;
}

void sub_1A10D82D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  *(void *)uint64_t v9 = v11;
  if (*(char *)(v9 + 31) < 0) {
    operator delete(*v10);
  }
  _Unwind_Resume(a1);
}

uint64_t qmi::QmiClientProxyAdapter::QmiClientProxyAdapter(uint64_t a1, uint64_t *a2, long long *a3, char a4, uint64_t *a5)
{
  *(void *)a1 = &unk_1EF43CC30;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v10;
  }
  *(unsigned char *)(a1 + 32) = a4;
  *(unsigned char *)(a1 + 33) = -1;
  *(void *)(a1 + 36) = 0x2FFFFFFFFLL;
  *(unsigned char *)(a1 + 44) = 1;
  uint64_t v11 = *a2;
  uint64_t v12 = (std::__shared_weak_count *)a2[1];
  v19[2] = *a2;
  uint64_t v20 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v13 = (NSObject **)(v11 + 24);
  uint64_t v14 = *a5;
  __int16 v15 = (std::__shared_weak_count *)a5[1];
  v19[0] = v14;
  v19[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::ClientProxy::State::State(a1 + 48, a3, v13, a4, v19);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(void *)a1 = &unk_1EF43C888;
  *(void *)(a1 + 48) = &unk_1EF43C950;
  *(void *)(a1 + 296) = *a2;
  uint64_t v17 = a2[1];
  *(void *)(a1 + 304) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1A10D84F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  *(void *)uint64_t v11 = v13;
  if (*(char *)(v11 + 31) < 0) {
    operator delete(*v12);
  }
  _Unwind_Resume(a1);
}

void qmi::QmiClientProxyAdapter::shutdown(qmi::QmiClientProxyAdapter *this)
{
  int v3 = this;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNS1_21QmiClientProxyAdapter8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  block[4] = (char *)this + 56;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 72;
  uint64_t v1 = *((void *)this + 9);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void non-virtual thunk to'qmi::QmiClientProxyAdapter::shutdown(qmi::QmiClientProxyAdapter *this)
{
  int v3 = (char *)this - 48;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNS1_21QmiClientProxyAdapter8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  block[4] = (char *)this + 8;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void qmi::QmiClientProxyAdapter::disconnect_sync(qmi::QmiClientProxyAdapter *this)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    uint64_t v20 = v3;
    if (v3)
    {
      uint64_t v19 = *((void *)this + 37);
      if (v19 ? QMux::BOOL_true_type : 0)
      {
        long long v5 = (std::__shared_weak_count *)*((void *)this + 8);
        if (!v5 || (uint64_t v6 = *((void *)this + 7), (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v12 = v6 - 48;
        if (!v6) {
          uint64_t v12 = 0;
        }
        uint64_t v17 = v12;
        uint64_t v18 = v7;
        uint64_t v15 = v12;
        uint64_t v16 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        QMux::remove(&v19, &v15, v8, v9, v10, v11);
        uint64_t v13 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        uint64_t v14 = v18;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        int v3 = v20;
      }
    }
  }
  else
  {
    int v3 = 0;
  }
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A10D8800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void sub_1A10D8824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  QMux::~QMux((QMux *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'qmi::QmiClientProxyAdapter::disconnect_sync(qmi::QmiClientProxyAdapter *this)
{
}

void qmi::QmiClientProxyAdapter::connect_sync(qmi::QmiClientProxyAdapter *this)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    uint64_t v20 = v3;
    if (v3)
    {
      uint64_t v19 = *((void *)this + 37);
      if (v19 ? QMux::BOOL_true_type : 0)
      {
        long long v5 = (std::__shared_weak_count *)*((void *)this + 8);
        if (!v5 || (uint64_t v6 = *((void *)this + 7), (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v12 = v6 - 48;
        if (!v6) {
          uint64_t v12 = 0;
        }
        uint64_t v17 = v12;
        uint64_t v18 = v7;
        uint64_t v15 = v12;
        uint64_t v16 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        QMux::add(&v19, &v15, v8, v9, v10, v11);
        uint64_t v13 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        uint64_t v14 = v18;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        int v3 = v20;
      }
    }
  }
  else
  {
    int v3 = 0;
  }
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1A10D8A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void sub_1A10D8A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  QMux::~QMux((QMux *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'qmi::QmiClientProxyAdapter::connect_sync(qmi::QmiClientProxyAdapter *this)
{
}

void qmi::QmiClientProxyAdapter::invokeReset_sync(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 304);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    uint64_t v8 = v5;
    if (v5)
    {
      int v7 = *(void **)(a1 + 296);
      if (v7 ? QMux::BOOL_true_type : 0)
      {
        QMux::invokeReset(&v7, a2, 0);
        long long v5 = v8;
      }
    }
  }
  else
  {
    long long v5 = 0;
  }
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1A10D8B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void non-virtual thunk to'qmi::QmiClientProxyAdapter::invokeReset_sync(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 256);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    uint64_t v8 = v5;
    if (v5)
    {
      int v7 = *(void **)(a1 + 248);
      if (v7 ? QMux::BOOL_true_type : 0)
      {
        QMux::invokeReset(&v7, a2, 0);
        long long v5 = v8;
      }
    }
  }
  else
  {
    long long v5 = 0;
  }
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1A10D8C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::QmiClientProxyAdapter::updateLogLevel_sync(uint64_t result, int a2)
{
  if (a2 <= 69)
  {
    if (a2 == 10)
    {
      *(_DWORD *)(result + 40) = 4;
      return result;
    }
    if (a2 == 20)
    {
      *(_DWORD *)(result + 40) = 3;
      return result;
    }
  }
  else
  {
    switch(a2)
    {
      case 70:
LABEL_5:
        *(_DWORD *)(result + 40) = 1;
        return result;
      case 255:
        *(_DWORD *)(result + 40) = 0;
        return result;
      case 80:
        goto LABEL_5;
    }
  }
  *(_DWORD *)(result + 40) = 2;
  return result;
}

uint64_t non-virtual thunk to'qmi::QmiClientProxyAdapter::updateLogLevel_sync(uint64_t result, int a2)
{
  if (a2 <= 69)
  {
    if (a2 == 10)
    {
      *(_DWORD *)(result - 8) = 4;
      return result;
    }
    if (a2 == 20)
    {
      *(_DWORD *)(result - 8) = 3;
      return result;
    }
  }
  else
  {
    switch(a2)
    {
      case 70:
LABEL_5:
        *(_DWORD *)(result - 8) = 1;
        return result;
      case 255:
        *(_DWORD *)(result - 8) = 0;
        return result;
      case 80:
        goto LABEL_5;
    }
  }
  *(_DWORD *)(result - 8) = 2;
  return result;
}

uint64_t qmi::QmiClientProxyAdapter::getClientId_sync(qmi::QmiClientProxyAdapter *this)
{
  return *((unsigned __int8 *)this + 33);
}

uint64_t non-virtual thunk to'qmi::QmiClientProxyAdapter::getClientId_sync(qmi::QmiClientProxyAdapter *this)
{
  return *((unsigned __int8 *)this - 15);
}

uint64_t qmi::QmiClientProxyAdapter::setMaxLogBytes_sync(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

uint64_t non-virtual thunk to'qmi::QmiClientProxyAdapter::setMaxLogBytes_sync(uint64_t this, int a2)
{
  *(_DWORD *)(this - 12) = a2;
  return this;
}

void qmi::QmiClientProxyAdapter::notifyRegisterFailure(uint64_t a1)
{
  int isInternalError = qmi::isInternalError();

  qmi::ClientProxy::State::setDisconnected_sync((qmi::ClientProxy::State *)(a1 + 48), isInternalError);
}

void qmi::QmiClientProxyAdapter::notifyRegistered(qmi::QmiClientProxyAdapter *this)
{
}

void qmi::QmiClientProxyAdapter::revokeRegistration(qmi::QmiClientProxyAdapter *this)
{
}

void qmi::QmiClientProxyAdapter::enterPowerMode(uint64_t a1, char *object, int a3)
{
  if (a3 == 1)
  {
    long long v5 = (qmi::ClientProxy::State *)(a1 + 48);
    var18.gr_name = object;
    if (object) {
      dispatch_retain((dispatch_object_t)object);
    }
    qmi::ClientProxy::State::triggerLowPower_sync(v5, &var18);
    if (object) {
      dispatch_release((dispatch_object_t)object);
    }
  }
  else if (!a3)
  {
    int v3 = (qmi::ClientProxy::State *)(a1 + 48);
    qmi::ClientProxy::State::triggerExitLowPower_sync(v3);
  }
}

void sub_1A10D8E40(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *qmi::QmiClientProxyAdapter::appendPowerModeSet(uint64_t a1, uint64_t *a2)
{
  return std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(a2, *(unsigned __int16 **)(a1 + 248), (unsigned __int16 *)(a1 + 256));
}

uint64_t *std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    v18[9] = v3;
    v18[10] = v4;
    uint64_t v6 = a2;
    int v7 = result;
    uint64_t v8 = result + 1;
    do
    {
      uint64_t v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v18[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      __n128 result = std::__tree<unsigned short>::__find_equal<unsigned short>(v7, v8, v18, &v17, v6 + 13);
      if (*result)
      {
        uint64_t v9 = (unsigned __int16 *)*((void *)v6 + 1);
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v10 = result;
        uint64_t v11 = operator new(0x20uLL);
        v11[13] = v6[13];
        uint64_t v12 = v18[0];
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
        *((void *)v11 + 2) = v12;
        uint64_t *v10 = (uint64_t)v11;
        uint64_t v13 = *(void **)*v7;
        if (v13)
        {
          uint64_t *v7 = (uint64_t)v13;
          uint64_t v14 = (uint64_t *)*v10;
        }
        else
        {
          uint64_t v14 = (uint64_t *)v11;
        }
        __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v14);
        ++v7[2];
        uint64_t v9 = (unsigned __int16 *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            uint64_t v15 = v9;
            uint64_t v9 = *(unsigned __int16 **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        uint64_t v15 = (unsigned __int16 *)*((void *)v6 + 2);
        BOOL v16 = *(void *)v15 == (void)v6;
        uint64_t v6 = v15;
      }
      while (!v16);
LABEL_3:
      uint64_t v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void qmi::QmiClientProxyAdapter::dumpState(qmi::QmiClientProxyAdapter *this)
{
}

void qmi::QmiClientProxyAdapter::~QmiClientProxyAdapter(qmi::QmiClientProxyAdapter *this)
{
  *(void *)this = &unk_1EF43C888;
  uint64_t v2 = (qmi::QmiClientProxyAdapter *)((char *)this + 48);
  *((void *)this + 6) = &unk_1EF43C950;
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  qmi::ClientProxy::State::~State(v2);
  *(void *)this = &unk_1EF43CC30;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  qmi::ClientProxy::State *v2;
  std::__shared_weak_count *v3;
  qmi::QmiClientProxyAdapter *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF43C888;
  uint64_t v2 = (qmi::QmiClientProxyAdapter *)((char *)this + 48);
  *((void *)this + 6) = &unk_1EF43C950;
  int v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  qmi::ClientProxy::State::~State(v2);
  *(void *)this = &unk_1EF43CC30;
  if (*((char *)this + 31) < 0)
  {
    operator delete(*((void **)this + 1));
    uint64_t v4 = this;
  }
  else
  {
    uint64_t v4 = this;
  }
  operator delete(v4);
}

void non-virtual thunk to'qmi::QmiClientProxyAdapter::~QmiClientProxyAdapter(qmi::QmiClientProxyAdapter *this)
{
  *((void *)this - 6) = &unk_1EF43C888;
  *(void *)this = &unk_1EF43C950;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  qmi::ClientProxy::State::~State(this);
  *((void *)this - 6) = &unk_1EF43CC30;
  if (*((char *)this - 17) < 0) {
    operator delete(*((void **)this - 5));
  }
}

{
  char *v2;
  std::__shared_weak_count *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v2 = (char *)this - 48;
  *((void *)this - 6) = &unk_1EF43C888;
  *(void *)this = &unk_1EF43C950;
  int v3 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  qmi::ClientProxy::State::~State(this);
  *((void *)this - 6) = &unk_1EF43CC30;
  if (*((char *)this - 17) < 0)
  {
    operator delete(*((void **)this - 5));
    uint64_t v4 = v2;
  }
  else
  {
    uint64_t v4 = v2;
  }
  operator delete(v4);
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5A40DA8, MEMORY[0x1E4FBA1C8]);
}

void sub_1A10D9300(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  long long v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    long long v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void *ctu::SharedSynchronizable<qmi::ClientProxy::State>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t std::insert_iterator<std::set<unsigned short>>::operator=[abi:ne180100](uint64_t a1, unsigned __int16 *a2)
{
  long long v5 = *(void ***)a1;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  BOOL v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  std::string::size_type v6 = std::__tree<unsigned short>::__find_equal<unsigned short>(v5, v4, &v17, &v16, a2);
  std::string::size_type v7 = (void *)*v6;
  if (*v6)
  {
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = (void *)v7[1];
    if (!v8)
    {
      do
      {
LABEL_9:
        uint64_t v13 = (void *)v7[2];
        BOOL v14 = *v13 == (void)v7;
        std::string::size_type v7 = v13;
      }
      while (!v14);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v9 = v6;
    std::string::size_type v7 = operator new(0x20uLL);
    *((_WORD *)v7 + 13) = *a2;
    uint64_t v10 = v17;
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = v10;
    uint64_t *v9 = (uint64_t)v7;
    uint64_t v11 = (void *)**v5;
    uint64_t v12 = v7;
    if (v11)
    {
      *long long v5 = v11;
      uint64_t v12 = (uint64_t *)*v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v5[1], v12);
    v5[2] = (void *)((char *)v5[2] + 1);
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = (void *)v7[1];
    if (!v8) {
      goto LABEL_9;
    }
  }
  do
  {
    uint64_t v13 = v8;
    uint64_t v8 = (void *)*v8;
  }
  while (v8);
LABEL_11:
  *(void *)(a1 + 8) = v13;
  return a1;
}

uint64_t *std::__tree<unsigned short>::__find_equal<unsigned short>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned __int16 *a5)
{
  long long v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int16 *)a2 + 13), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v14 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        BOOL v14 = v10;
      }
      while (v15);
    }
    unsigned int v16 = *a5;
    if (*((unsigned __int16 *)v10 + 13) < v16) {
      goto LABEL_17;
    }
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v19 = (uint64_t *)v18;
          unsigned int v20 = *(unsigned __int16 *)(v18 + 26);
          if (v16 >= v20) {
            break;
          }
          uint64_t v18 = *v19;
          long long v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        long long v5 = v19 + 1;
        uint64_t v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint64_t v12 = (uint64_t *)a2[1];
      do
      {
        uint64_t v13 = v12;
        uint64_t v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      int v21 = a2;
      do
      {
        uint64_t v13 = (uint64_t *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        int v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((unsigned __int16 *)v13 + 13))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            long long v23 = (uint64_t *)v22;
            unsigned int v24 = *(unsigned __int16 *)(v22 + 26);
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = *v23;
            long long v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          long long v5 = v23 + 1;
          uint64_t v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    int v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), long long v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *int v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          int v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        uint64_t *v9 = v2;
        *(void *)(v2 + 16) = v9;
        int v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *int v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    *long long v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    long long v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      int v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    int v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  uint64_t v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  *uint64_t v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x1A622C250](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1A622C260](v13);
  return a1;
}

void sub_1A10D9A30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1A622C260](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1A10D9A10);
}

void sub_1A10D9A84(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        uint64_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0) {
        unsigned int v16 = __b;
      }
      else {
        unsigned int v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_1A10D9C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<unsigned short>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<unsigned short>::destroy(a1, *a2);
    std::__tree<unsigned short>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

void std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>>>::destroy(a1[1]);
    uint64_t v2 = (const void *)a1[5];
    if (v2) {
      _Block_release(v2);
    }
    operator delete(a1);
  }
}

void ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  int v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_63;
  void block[5] = v5;
  size_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b40c52_ZTSNSt3__110shared_ptrIKN3qmi11ClientProxy5StateEEE(void *a1, uint64_t a2)
{
  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_32b40c52_ZTSNSt3__110shared_ptrIKN3qmi11ClientProxy5StateEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(const void **)(a1 + 32);
  }
  else
  {
    int v3 = *(const void **)(a1 + 32);
  }
  _Block_object_dispose(v3, 7);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0>(qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0,std::default_delete<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(uint64_t ***)(v3 + 224);
  if (!v4)
  {
    uint64_t v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    uint64_t *v4 = (uint64_t *)(v4 + 1);
    *(void *)(v3 + 224) = v4;
  }
  unsigned int v5 = *((unsigned __int16 *)v2 + 4);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  v11[2] = ___ZZN3qmi11ClientProxy5State16registerResponseEtNSt3__16vectorIhNS2_9allocatorIhEEEEENK3__0clEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_70;
  v11[4] = v3;
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v7 = (unsigned char *)v2[2];
  uint64_t v6 = (unsigned char *)v2[3];
  size_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if ((v8 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    std::string __p = operator new(v6 - v7);
    uint64_t v14 = (char *)__p + v8;
    memcpy(__p, v7, v8);
    uint64_t v13 = (char *)__p + v8;
  }
  CallbacksHandler::registerSendCallback(v4, v5, v11);
  if (__p)
  {
    uint64_t v13 = (char *)__p;
    operator delete(__p);
  }
  int v9 = (void *)v2[2];
  if (v9)
  {
    v2[3] = (uint64_t)v9;
    operator delete(v9);
  }
  operator delete(v2);
  uint64_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(a1);
}

void sub_1A10DA180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v18 = (void *)v16[2];
  if (v18)
  {
    v16[3] = v18;
    operator delete(v18);
    operator delete(v16);
    uint64_t v19 = (std::__shared_weak_count *)v15[2];
    if (!v19) {
      goto LABEL_7;
    }
  }
  else
  {
    operator delete(v16);
    uint64_t v19 = (std::__shared_weak_count *)v15[2];
    if (!v19) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_7:
  operator delete(v15);
  _Unwind_Resume(a1);
}

void ___ZZN3qmi11ClientProxy5State16registerResponseEtNSt3__16vectorIhNS2_9allocatorIhEEEEENK3__0clEv_block_invoke(void *a1, __int16 a2)
{
  uint64_t v4 = a1[4];
  uint64_t v3 = (unsigned char *)a1[5];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  v7[2] = ___ZZN3qmi11ClientProxy5State16registerResponseEtNSt3__16vectorIhNS2_9allocatorIhEEEEENK3__0clEv_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_66;
  v7[4] = v4;
  std::string __p = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  unsigned int v5 = (unsigned char *)a1[6];
  size_t v6 = v5 - v3;
  if (v5 != v3)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    std::string __p = operator new(v5 - v3);
    uint64_t v10 = (char *)__p + v6;
    memcpy(__p, v3, v6);
    int v9 = (char *)__p + v6;
  }
  __int16 v11 = a2;
  ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped((uint64_t *)(v4 + 8), (uint64_t)v7);
  if (__p)
  {
    int v9 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1A10DA31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN3qmi11ClientProxy5State16registerResponseEtNSt3__16vectorIhNS2_9allocatorIhEEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
}

void *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::~__func(void *a1)
{
  *a1 = &unk_1EF43CB10;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::~__func(void *__p)
{
  void *__p = &unk_1EF43CB10;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1EF43CB10;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF43CB10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::target_type()
{
}

void *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::~__func(void *a1)
{
  *a1 = &unk_1EF43CBA0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::~__func(void *__p)
{
  void *__p = &unk_1EF43CBA0;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1EF43CBA0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF43CBA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    unsigned int v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      size_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 8);
      if (v7) {
        qmi::ClientProxy::State::handleServerError_sync(v7, a2);
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::target_type()
{
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped<qmi::ClientProxy::State::init(xpc::connection const&)::$_2>(qmi::ClientProxy::State::init(xpc::connection const&)::$_2 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::ClientProxy::State::init(xpc::connection const&)::$_2,dispatch_queue_s *::default_delete<qmi::ClientProxy::State::init(xpc::connection const&)::$_2>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  unint64_t v3 = (xpc_object_t *)(*(void *)a1 + 8);
  qmi::ClientProxy::State::init_sync(**(void **)a1, (uint64_t)v3);
  xpc_release(*v3);
  operator delete(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    unsigned int v5 = (void *)a1;
  }
  else
  {
    unsigned int v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1A10DA8DC(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  xpc_release(*v4);
  operator delete(v3);
  size_t v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNKS3_7isValidEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 232);
  if (v3)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 16);
    return v4();
  }
  else
  {
    size_t v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = (void *)(v2 + 48);
      if (*(char *)(v2 + 71) < 0) {
        uint64_t v7 = (void *)*v7;
      }
      int v8 = 136315138;
      int v9 = v7;
      _os_log_error_impl(&dword_1A10C7000, v6, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when checking client validity", (uint8_t *)&v8, 0xCu);
    }
    return 0;
  }
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

BOOL ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNKS3_9isStoppedEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return *(_DWORD *)(**(void **)(a1 + 40) + 76) == 1;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(int **a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  size_t v6 = a4;
  uint64_t v7 = a2;
  if (a2 == a3)
  {
    int v9 = a2;
    goto LABEL_22;
  }
  int v9 = a3;
  uint64_t v10 = *(void *)a4;
  while (1)
  {
    uint64_t v11 = (v10 - a5 + 4096) >> 5;
    if (((char *)v9 - (char *)v7) >> 5 < v11) {
      uint64_t v11 = ((char *)v9 - (char *)v7) >> 5;
    }
    if (v11)
    {
      size_t v12 = &v7[8 * v11];
      while (1)
      {
        int v13 = *v7;
        uint64_t v14 = *((void *)v7 + 3);
        long long v15 = *(_OWORD *)(v7 + 2);
        *((void *)v7 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
        *((void *)v7 + 2) = 0;
        *((void *)v7 + 3) = 0;
        unsigned int v16 = *(std::__shared_weak_count **)(a5 + 24);
        *(void *)(a5 + 24) = v14;
        *(_DWORD *)a5 = v13;
        uint64_t v17 = *(NSObject **)(a5 + 8);
        *(_OWORD *)(a5 + 8) = v15;
        if (v17) {
          dispatch_source_cancel(v17);
        }
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
        if (v17) {
          goto LABEL_13;
        }
LABEL_7:
        a5 += 32;
        v7 += 8;
        if (v7 == v12)
        {
          uint64_t v7 = v12;
          goto LABEL_17;
        }
      }
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (!v17) {
        goto LABEL_7;
      }
LABEL_13:
      dispatch_release(v17);
      goto LABEL_7;
    }
LABEL_17:
    if (v7 == v9) {
      break;
    }
    uint64_t v18 = *((void *)v6 + 1);
    v6 += 2;
    uint64_t v10 = v18;
    a5 = v18;
  }
  if (*(void *)v6 + 4096 == a5)
  {
    uint64_t v19 = *((void *)v6 + 1);
    v6 += 2;
    a5 = v19;
  }
LABEL_22:
  *a1 = v9;
  a1[1] = v6;
  a1[2] = (int *)a5;
}

void ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNS1_21QmiClientProxyAdapter8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 280);
  if (v3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)v3 + 40);
    v4();
  }
  else
  {
    unsigned int v5 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      size_t v6 = (void *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        size_t v6 = (void *)*v6;
      }
      int v7 = 136315138;
      int v8 = v6;
      _os_log_error_impl(&dword_1A10C7000, v5, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when shutting down", (uint8_t *)&v7, 0xCu);
    }
  }
}

void *ATCSDPCQueue::Callback::Callback(void *this)
{
  *this = &unk_1EF43CCC8;
  return this;
}

void ATCSDPCQueue::ATCSDPCQueue(ATCSDPCQueue *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  if (!ATCSTimer::fsDriver) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x39, "fsDriver", "!=", "NULL", 0, 0);
  }
  *((void *)this + 4) = 0;
  uint64_t v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((void *)this + 4) = v2;
  *((unsigned char *)this + 40) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
}

{
  pthread_mutex_t *v2;

  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  if (!ATCSTimer::fsDriver) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x39, "fsDriver", "!=", "NULL", 0, 0);
  }
  *((void *)this + 4) = 0;
  uint64_t v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((void *)this + 4) = v2;
  *((unsigned char *)this + 40) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
}

void sub_1A10DAE94(_Unwind_Exception *a1)
{
  ATCSTimer::~ATCSTimer(v1);
  _Unwind_Resume(a1);
}

void sub_1A10DAF7C(_Unwind_Exception *a1)
{
  ATCSTimer::~ATCSTimer(v1);
  _Unwind_Resume(a1);
}

void ATCSDPCQueue::~ATCSDPCQueue(pthread_mutex_t **this)
{
  ATCSDPCQueue::cancel((ATCSDPCQueue *)this);
  std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)(this + 6));
  uint64_t v2 = this[4];
  pthread_mutex_destroy(v2);
  if (v2) {
    operator delete(v2);
  }
  if (*((unsigned char *)this + 4)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x3E, "fPending", "!=", "true", (const char *)1, (const void *)1);
  }
}

{
  pthread_mutex_t *v2;

  ATCSDPCQueue::cancel((ATCSDPCQueue *)this);
  std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)(this + 6));
  uint64_t v2 = this[4];
  pthread_mutex_destroy(v2);
  if (v2) {
    operator delete(v2);
  }
  if (*((unsigned char *)this + 4)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x3E, "fPending", "!=", "true", (const char *)1, (const void *)1);
  }
}

uint64_t ATCSDPCQueue::cancel(ATCSDPCQueue *this)
{
  ATCSTimer::cancel(this);
  uint64_t v2 = (pthread_mutex_t *)*((void *)this + 4);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  *((unsigned char *)this + 40) = 0;
  while (1)
  {
    uint64_t v3 = *((void *)this + 11);
    if (!v3) {
      break;
    }
    uint64_t v4 = (void **)*((void *)this + 7);
    uint64_t v5 = (*(void **)((char *)v4 + ((*((void *)this + 10) >> 6) & 0x3FFFFFFFFFFFFF8)))[*((void *)this + 10) & 0x1FFLL];
    unint64_t v6 = *((void *)this + 10) + 1;
    *((void *)this + 10) = v6;
    *((void *)this + 1qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v3 - 1;
    if (v6 >= 0x400)
    {
      operator delete(*v4);
      *((void *)this + 7) += 8;
      *((void *)this + 10) -= 512;
    }
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  int v7 = (pthread_mutex_t *)*((void *)this + 4);
  pthread_self();
  v7[1].__sig = 0;
  return pthread_mutex_unlock(v7);
}

uint64_t ATCSDPCQueue::startTimer(ATCSDPCQueue *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if (a2 < 0) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSDPCQueue.cpp", (const char *)0x29, "timeout", "<=", "std::numeric_limits<int>::max()", a6);
  }
  int v8 = operator new(0x20uLL);
  void *v8 = &unk_1EF43CD08;
  v8[1] = this;
  v8[2] = ATCSDPCQueue::handleTimer;
  v8[3] = 0;

  return ATCSTimer::set((uint64_t)this, a2, (uint64_t)v8);
}

uint64_t ATCSDPCQueue::handleTimer(int64x2_t *this)
{
  uint64_t v2 = (pthread_mutex_t *)this[2].i64[0];
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  uint64_t v3 = this[5].i64[1];
  if (v3)
  {
    uint64_t v4 = (void **)this[3].i64[1];
    uint64_t v5 = (*(void **)((char *)v4 + (((unint64_t)this[5].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8)))[this[5].i64[0] & 0x1FF];
    unint64_t v6 = this[5].i64[0] + 1;
    this[5].i64[0] = v6;
    this[5].i64[1] = v3 - 1;
    if (v6 >= 0x400)
    {
      operator delete(*v4);
      this[3].i64[1] += 8;
      this[5].i64[0] -= 512;
    }
    int v7 = (pthread_mutex_t *)this[2].i64[0];
    pthread_self();
    v7[1].__sig = 0;
    pthread_mutex_unlock(v7);
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    int v8 = (pthread_mutex_t *)this[2].i64[0];
    pthread_mutex_lock(v8);
    v8[1].__sig = (uint64_t)pthread_self();
    if (this[5].i64[1])
    {
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)(this[3].i64[1] + (((unint64_t)this[5].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * (this[5].i64[0] & 0x1FF));
        if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 24))(v9)) {
          break;
        }
        uint64_t v10 = (void **)this[3].i64[1];
        int64x2_t v11 = vaddq_s64(this[5], (int64x2_t)xmmword_1A1125FF0);
        this[5] = v11;
        if (v11.i64[0] >= 0x400uLL)
        {
          operator delete(*v10);
          this[3].i64[1] += 8;
          this[5].i64[0] -= 512;
        }
        size_t v12 = (pthread_mutex_t *)this[2].i64[0];
        pthread_self();
        v12[1].__sig = 0;
        pthread_mutex_unlock(v12);
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        int v13 = (pthread_mutex_t *)this[2].i64[0];
        pthread_mutex_lock(v13);
        v13[1].__sig = (uint64_t)pthread_self();
        if (!this[5].i64[1]) {
          goto LABEL_13;
        }
      }
      int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
      if (v15 < 0) {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSDPCQueue.cpp", (const char *)0x29, "timeout", "<=", "std::numeric_limits<int>::max()", v14);
      }
      unsigned int v16 = operator new(0x20uLL);
      *unsigned int v16 = &unk_1EF43CD08;
      v16[1] = this;
      v16[2] = ATCSDPCQueue::handleTimer;
      v16[3] = 0;
      ATCSTimer::set((uint64_t)this, v15, (uint64_t)v16);
    }
  }
LABEL_13:
  this[2].i8[8] = 0;
  uint64_t v17 = (pthread_mutex_t *)this[2].i64[0];
  pthread_self();
  v17[1].__sig = 0;
  return pthread_mutex_unlock(v17);
}

void sub_1A10DB514(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 32);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSDPCQueue::enqueue(ATCSDPCQueue *this, ATCSDPCQueue::Callback *a2)
{
  uint64_t v4 = (pthread_mutex_t *)*((void *)this + 4);
  pthread_mutex_lock(v4);
  v4[1].__sig = (uint64_t)pthread_self();
  unint64_t v6 = (char *)*((void *)this + 7);
  uint64_t v5 = (char *)*((void *)this + 8);
  uint64_t v7 = v5 - v6;
  int v8 = v6;
  if (v5 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = ((v5 - v6) << 6) - 1;
  }
  unint64_t v11 = *((void *)this + 10);
  uint64_t v10 = *((void *)this + 11);
  unint64_t v12 = v10 + v11;
  if (v9 == v10 + v11)
  {
    if (v11 >= 0x200)
    {
      *((void *)this + 10) = v11 - 512;
      int v13 = v6 + 8;
      uint64_t v14 = *(void *)v6;
      *((void *)this + 7) = v6 + 8;
      if (v5 != *((char **)this + 9))
      {
LABEL_95:
        *(void *)uint64_t v5 = v14;
        goto LABEL_96;
      }
      int v15 = (char *)*((void *)this + 6);
      if (v13 > v15)
      {
        uint64_t v16 = (v13 - v15) >> 3;
        if (v16 >= -1) {
          uint64_t v17 = v16 + 1;
        }
        else {
          uint64_t v17 = v16 + 2;
        }
        uint64_t v18 = v17 >> 1;
        uint64_t v19 = -v18;
        unsigned int v20 = &v13[-8 * v18];
        int64_t v21 = v5 - v13;
        if (v5 != v13)
        {
          memmove(&v13[-8 * v18], v13, v5 - v13);
          uint64_t v5 = (char *)*((void *)this + 7);
        }
        uint64_t v22 = &v5[8 * v19];
        uint64_t v5 = &v20[v21];
        *((void *)this + 7) = v22;
        *((void *)this + 8) = &v20[v21];
        goto LABEL_95;
      }
      if (v5 == v15) {
        unint64_t v34 = 1;
      }
      else {
        unint64_t v34 = (v5 - v15) >> 2;
      }
      if (!(v34 >> 61))
      {
        long long v35 = (char *)operator new(8 * v34);
        int v36 = &v35[8 * (v34 >> 2)];
        int64_t v38 = v5 - v13;
        BOOL v37 = v5 == v13;
        uint64_t v5 = v36;
        if (v37) {
          goto LABEL_93;
        }
        uint64_t v5 = &v36[v38 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v39 = v38 - 8;
        if (v39 >= 0x38)
        {
          uint64_t v91 = &v35[8 * (v34 >> 2)];
          uint64_t v40 = v91;
          if ((unint64_t)(v91 - v13) >= 0x20)
          {
            uint64_t v92 = (v39 >> 3) + 1;
            uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v40 = &v36[v93];
            v13 += v93;
            uint64_t v94 = (long long *)(v6 + 24);
            v95 = v91 + 16;
            uint64_t v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v97 = *v94;
              *(v95 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v94 - 1);
              _OWORD *v95 = v97;
              v94 += 2;
              v95 += 2;
              v96 -= 4;
            }
            while (v96);
            if (v92 == (v92 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              *((void *)this + 6) = v35;
              *((void *)this + 7) = v36;
              *((void *)this + 8) = v5;
              *((void *)this + 9) = &v35[8 * v34];
              if (v15)
              {
                operator delete(v15);
                uint64_t v5 = (char *)*((void *)this + 8);
              }
              goto LABEL_95;
            }
          }
        }
        else
        {
          uint64_t v40 = &v35[8 * (v34 >> 2)];
        }
        do
        {
          uint64_t v98 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v40 = v98;
          v40 += 8;
        }
        while (v40 != v5);
        goto LABEL_93;
      }
LABEL_120:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v23 = v7 >> 3;
    unsigned int v24 = (char *)*((void *)this + 9);
    __int16 v25 = (char *)*((void *)this + 6);
    if (v7 >> 3 >= (unint64_t)((v24 - v25) >> 3))
    {
      if (v24 == v25) {
        unint64_t v28 = 1;
      }
      else {
        unint64_t v28 = (v24 - v25) >> 2;
      }
      if (!(v28 >> 61))
      {
        uint64_t v29 = (char *)operator new(8 * v28);
        uint64_t v121 = a2;
        unint64_t v30 = operator new(0x1000uLL);
        __int16 v31 = &v29[8 * v23];
        long long v32 = &v29[8 * v28];
        if (v23 == v28)
        {
          uint64_t v120 = v30;
          if (v7 < 1)
          {
            if (v5 == v6) {
              unint64_t v42 = 1;
            }
            else {
              unint64_t v42 = v7 >> 2;
            }
            if (v42 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            __int16 v31 = (char *)operator new(8 * v42);
            long long v32 = &v31[8 * v42];
            operator delete(v29);
            int v8 = (char *)*((void *)this + 7);
            uint64_t v5 = (char *)*((void *)this + 8);
            uint64_t v29 = v31;
          }
          else
          {
            unint64_t v33 = v23 + 2;
            if (v23 >= -1) {
              unint64_t v33 = v23 + 1;
            }
            v31 -= 8 * (v33 >> 1);
          }
          unint64_t v30 = v120;
        }
        *(void *)__int16 v31 = v30;
        uint64_t v43 = v31 + 8;
        if (v5 != v8)
        {
          do
          {
            if (v31 == v29)
            {
              if (v43 >= v32)
              {
                if (v32 == v29) {
                  unint64_t v50 = 1;
                }
                else {
                  unint64_t v50 = (v32 - v29) >> 2;
                }
                if (v50 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v51 = (char *)operator new(8 * v50);
                uint64_t v52 = v51;
                unint64_t v53 = (v50 + 3) >> 2;
                __int16 v31 = &v51[8 * v53];
                int64_t v54 = v43 - v29;
                BOOL v37 = v43 == v29;
                uint64_t v43 = v31;
                if (!v37)
                {
                  uint64_t v43 = &v31[v54 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v55 = v54 - 8;
                  int v56 = &v51[8 * v53];
                  __int16 v57 = v29;
                  if (v55 < 0x38) {
                    goto LABEL_124;
                  }
                  uint64_t v58 = 8 * v53;
                  int v56 = &v51[8 * v53];
                  __int16 v57 = v29;
                  if ((unint64_t)(v56 - v29) < 0x20) {
                    goto LABEL_124;
                  }
                  uint64_t v59 = (v55 >> 3) + 1;
                  uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
                  int v56 = &v31[v60];
                  __int16 v57 = &v29[v60];
                  int v61 = (long long *)(v29 + 16);
                  uint64_t v62 = &v51[v58 + 16];
                  uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v64 = *v61;
                    *((_OWORD *)v62 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v61 - 1);
                    *(_OWORD *)uint64_t v62 = v64;
                    v61 += 2;
                    v62 += 32;
                    v63 -= 4;
                  }
                  while (v63);
                  if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_124:
                    do
                    {
                      uint64_t v65 = *(void *)v57;
                      v57 += 8;
                      *(void *)int v56 = v65;
                      v56 += 8;
                    }
                    while (v56 != v43);
                  }
                }
                long long v32 = &v51[8 * v50];
                operator delete(v29);
                uint64_t v29 = v52;
              }
              else
              {
                uint64_t v46 = (v32 - v43) >> 3;
                if (v46 >= -1) {
                  uint64_t v47 = v46 + 1;
                }
                else {
                  uint64_t v47 = v46 + 2;
                }
                uint64_t v48 = v47 >> 1;
                __int16 v31 = &v29[8 * (v47 >> 1)];
                uint64_t v49 = v29;
                if (v43 != v29)
                {
                  memmove(v31, v29, v43 - v29);
                  uint64_t v49 = v43;
                }
                uint64_t v43 = (char *)v49 + 8 * v48;
              }
            }
            uint64_t v45 = *((void *)v5 - 1);
            v5 -= 8;
            *((void *)v31 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v45;
            v31 -= 8;
          }
          while (v5 != *((char **)this + 7));
        }
        unint64_t v44 = (void *)*((void *)this + 6);
        *((void *)this + 6) = v29;
        *((void *)this + 7) = v31;
        *((void *)this + 8) = v43;
        *((void *)this + 9) = v32;
        a2 = v121;
        if (v44) {
          operator delete(v44);
        }
        goto LABEL_97;
      }
      goto LABEL_120;
    }
    long long v26 = operator new(0x1000uLL);
    dispatch_object_t v27 = v26;
    if (v24 != v5)
    {
      *(void *)uint64_t v5 = v26;
LABEL_96:
      *((void *)this + 8) += 8;
LABEL_97:
      int v8 = (char *)*((void *)this + 7);
      uint64_t v10 = *((void *)this + 11);
      unint64_t v12 = *((void *)this + 10) + v10;
      goto LABEL_98;
    }
    if (v6 == v25)
    {
      if (v5 == v6) {
        unint64_t v66 = 1;
      }
      else {
        unint64_t v66 = (v24 - v6) >> 2;
      }
      if (v66 >> 61) {
        goto LABEL_120;
      }
      unint64_t v67 = (char *)operator new(8 * v66);
      unint64_t v68 = (v66 + 3) >> 2;
      uint64_t v41 = &v67[8 * v68];
      uint64_t v69 = v41;
      if (v5 != v6)
      {
        uint64_t v69 = &v41[8 * v23];
        uint64_t v70 = &v67[8 * v68];
        BOOL v71 = v6;
        if ((unint64_t)(v7 - 8) < 0x38) {
          goto LABEL_125;
        }
        int64_t v72 = &v67[8 * v68];
        uint64_t v70 = v72;
        BOOL v71 = v6;
        if ((unint64_t)(v72 - v6) < 0x20) {
          goto LABEL_125;
        }
        unint64_t v73 = ((unint64_t)(v7 - 8) >> 3) + 1;
        uint64_t v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v70 = &v41[v74];
        BOOL v71 = &v6[v74];
        v75 = (long long *)(v6 + 16);
        unint64_t v76 = v72 + 16;
        uint64_t v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v78 = *v75;
          *(v76 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v75 - 1);
          _OWORD *v76 = v78;
          v75 += 2;
          v76 += 2;
          v77 -= 4;
        }
        while (v77);
        if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_125:
          do
          {
            uint64_t v79 = *(void *)v71;
            v71 += 8;
            *(void *)uint64_t v70 = v79;
            v70 += 8;
          }
          while (v70 != v69);
        }
      }
      *((void *)this + 6) = v67;
      *((void *)this + 7) = v41;
      *((void *)this + 8) = v69;
      *((void *)this + 9) = &v67[8 * v66];
      if (v6)
      {
        operator delete(v6);
        uint64_t v41 = (char *)*((void *)this + 7);
      }
    }
    else
    {
      uint64_t v41 = v6;
    }
    *((void *)v41 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v27;
    uint64_t v80 = (char *)*((void *)this + 7);
    uint64_t v81 = (char *)*((void *)this + 8);
    *((void *)this + 7) = v80 - 8;
    uint64_t v82 = *((void *)v80 - 1);
    *((void *)this + 7) = v80;
    if (v81 != *((char **)this + 9))
    {
LABEL_80:
      *(void *)uint64_t v81 = v82;
      goto LABEL_96;
    }
    uint64_t v83 = (char *)*((void *)this + 6);
    if (v80 > v83)
    {
      uint64_t v84 = (v80 - v83) >> 3;
      if (v84 >= -1) {
        uint64_t v85 = v84 + 1;
      }
      else {
        uint64_t v85 = v84 + 2;
      }
      uint64_t v86 = v85 >> 1;
      uint64_t v87 = -v86;
      unint64_t v88 = &v80[-8 * v86];
      size_t v89 = v81 - v80;
      if (v89)
      {
        memmove(&v80[-8 * v86], v80, v89);
        uint64_t v80 = (char *)*((void *)this + 7);
      }
      v90 = &v88[v89];
      *((void *)this + 7) = &v80[8 * v87];
      *((void *)this + 8) = v90;
      *(void *)v90 = v82;
      goto LABEL_96;
    }
    if (v81 == v83) {
      unint64_t v105 = 1;
    }
    else {
      unint64_t v105 = (v81 - v83) >> 2;
    }
    if (v105 >> 61) {
      goto LABEL_120;
    }
    int64_t v106 = (char *)operator new(8 * v105);
    unint64_t v107 = &v106[8 * (v105 >> 2)];
    int64_t v108 = v81 - v80;
    BOOL v37 = v81 == v80;
    uint64_t v81 = v107;
    if (!v37)
    {
      uint64_t v81 = &v107[v108 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v109 = v108 - 8;
      if (v109 < 0x38)
      {
        uint64_t v110 = &v106[8 * (v105 >> 2)];
        do
        {
LABEL_116:
          uint64_t v119 = *(void *)v80;
          v80 += 8;
          *(void *)uint64_t v110 = v119;
          v110 += 8;
        }
        while (v110 != v81);
        goto LABEL_117;
      }
      uint64_t v111 = &v106[8 * (v105 >> 2)];
      uint64_t v110 = v111;
      if ((unint64_t)(v111 - v80) < 0x20) {
        goto LABEL_116;
      }
      uint64_t v112 = (v109 >> 3) + 1;
      uint64_t v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v110 = &v107[v113];
      uint64_t v114 = &v80[v113];
      uint64_t v115 = (long long *)(v80 + 16);
      long long v116 = v111 + 16;
      uint64_t v117 = v112 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v118 = *v115;
        *(v116 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v115 - 1);
        *long long v116 = v118;
        v115 += 2;
        v116 += 2;
        v117 -= 4;
      }
      while (v117);
      uint64_t v80 = v114;
      if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_116;
      }
    }
LABEL_117:
    *((void *)this + 6) = v106;
    *((void *)this + 7) = v107;
    *((void *)this + 8) = v81;
    *((void *)this + 9) = &v106[8 * v105];
    if (v83)
    {
      operator delete(v83);
      uint64_t v81 = (char *)*((void *)this + 8);
    }
    goto LABEL_80;
  }
LABEL_98:
  *(void *)(*(void *)&v8[(v12 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v12 & 0x1FF)) = a2;
  *((void *)this + 1qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v10 + 1;
  if (*((unsigned char *)this + 40))
  {
    uint64_t v99 = (pthread_mutex_t *)*((void *)this + 4);
    pthread_self();
    v99[1].__sig = 0;
    return pthread_mutex_unlock(v99);
  }
  else
  {
    *((unsigned char *)this + 40) = 1;
    (*(void (**)(ATCSDPCQueue::Callback *))(*(void *)a2 + 24))(a2);
    unint64_t v101 = (pthread_mutex_t *)*((void *)this + 4);
    pthread_self();
    v101[1].__sig = 0;
    pthread_mutex_unlock(v101);
    *((unsigned char *)this + 40) = 1;
    int v103 = (*(uint64_t (**)(ATCSDPCQueue::Callback *))(*(void *)a2 + 24))(a2);
    if (v103 < 0) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSDPCQueue.cpp", (const char *)0x29, "timeout", "<=", "std::numeric_limits<int>::max()", v102);
    }
    v104 = operator new(0x20uLL);
    void *v104 = &unk_1EF43CD08;
    v104[1] = this;
    v104[2] = ATCSDPCQueue::handleTimer;
    v104[3] = 0;
    return ATCSTimer::set((uint64_t)this, v103, (uint64_t)v104);
  }
}

void sub_1A10DBD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v10);
  unint64_t v12 = *(pthread_mutex_t **)(v9 + 32);
  pthread_self();
  v12[1].__sig = 0;
  pthread_mutex_unlock(v12);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ATCSTimer::MemberCallback<ATCSDPCQueue>::invoke(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void QMIWakeReason::QMIWakeReason(QMIWakeReason *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0u;
}

{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0u;
}

void *QMIWakeReason::reset(void *this)
{
  this[1] = *this;
  this[3] = 0;
  return this;
}

void QMIWakeReason::set(uint64_t a1, const void *a2, size_t __sz, uint64_t a4)
{
  if (a2 && __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = operator new(__sz);
    size_t v9 = (size_t)v8 + __sz;
    memcpy(v8, a2, __sz);
    uint64_t v10 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v10;
      operator delete(v10);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = a4;
  }
}

void sub_1A10DBF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIWakeReason::getCaptureTime(QMIWakeReason *this)
{
  return *((void *)this + 3);
}

BOOL QMIWakeReason::isSet(QMIWakeReason *this)
{
  return *(void *)this != *((void *)this + 1);
}

const void **QMIWakeReason::copyWakeData@<X0>(const void **this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = *this;
  uint64_t v3 = this[1];
  size_t v5 = v3 - (unsigned char *)*this;
  if (v3 != *this)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - (unsigned char *)*this);
    *a2 = v6;
    uint64_t v7 = &v6[v5];
    a2[2] = &v6[v5];
    this = (const void **)memcpy(v6, v4, v5);
    a2[1] = v7;
  }
  return this;
}

void sub_1A10DBFE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Client::State::State(uint64_t a1, long long *a2, long long *a3, char a4, NSObject **a5)
{
  int v5 = *((char *)a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = *((void *)a2 + 1);
  }
  unint64_t v7 = v6 + 12;
  memset(&v30, 170, sizeof(v30));
  if (v6 + 12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v14 = v7 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v16 = (char *)operator new(v14 + 1);
    v30.__r_.__value_.__l.__size_ = v6 + 12;
    v30.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    int v13 = v16 + 12;
    *((_DWORD *)v16 + 2) = 1534357093;
    *(void *)uint64_t v16 = *(void *)"qmi::Client[";
  }
  else
  {
    v30.__r_.__value_.__r.__words[2] = 0;
    *((unsigned char *)&v30.__r_.__value_.__s + 23) = v6 + 12;
    int v13 = &v30.__r_.__value_.__s.__data_[12];
    v30.__r_.__value_.__s.__data_[13] = 0;
    HIWORD(v30.__r_.__value_.__r.__words[1]) = 0;
    strcpy((char *)&v30, "qmi::Client[");
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (v5 >= 0) {
    uint64_t v17 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v17 = *(const std::string::value_type **)a2;
  }
  memmove(v13, v17, v6);
LABEL_15:
  v13[v6] = 0;
  uint64_t v18 = std::string::append(&v30, "]", 1uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t v32 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v32 >= 0) {
    unsigned int v20 = __p;
  }
  else {
    unsigned int v20 = (void **)__p[0];
  }
  int64_t v21 = dispatch_queue_create((const char *)v20, 0);
  uint64_t v22 = qmi::asShortString();
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v29, "com.apple.telephony.bb", v22);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v21;
  if (v21) {
    dispatch_retain(v21);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v33);
  MEMORY[0x1A622BDE0](v33);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v29);
  if (v21) {
    dispatch_release(v21);
  }
  if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_27:
    operator delete(v30.__r_.__value_.__l.__data_);
    *(void *)a1 = &unk_1EF43CD88;
    *(void *)(a1 + 48) = 0;
    uint64_t v23 = (std::string *)(a1 + 56);
    if ((*((char *)a2 + 23) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_28;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_27;
  }
LABEL_24:
  *(void *)a1 = &unk_1EF43CD88;
  *(void *)(a1 + 48) = 0;
  uint64_t v23 = (std::string *)(a1 + 56);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
LABEL_25:
    long long v24 = *a2;
    v23->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
    goto LABEL_29;
  }
LABEL_28:
  std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_29:
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v25 = *a3;
    *(void *)(a1 + 96) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 80) = v25;
  }
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = xpc_null_create();
  xpc_object_t object = xpc_null_create();
  MEMORY[0x1A622BEA0](a1 + 120, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  *(void *)(a1 + 128) = xpc_null_create();
  long long v26 = *a5;
  *(void *)(a1 + 136) = *a5;
  if (v26) {
    dispatch_retain(v26);
  }
  *(unsigned char *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 146) = 1;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(unsigned char *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  return a1;
}

void sub_1A10DC36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (*(char *)(v9 + 79) < 0)
  {
    operator delete(*v11);
    int v13 = *(const void **)(v9 + 48);
    if (!v13) {
      goto LABEL_6;
    }
  }
  else
  {
    int v13 = *(const void **)(v9 + 48);
    if (!v13)
    {
LABEL_6:
      ctu::SharedLoggable<qmi::ClientProxy::State,ctu::OsLogLogger>::~SharedLoggable(v10);
      _Unwind_Resume(a1);
    }
  }
  _Block_release(v13);
  goto LABEL_6;
}

uint64_t qmi::Client::State::State(uint64_t a1, long long *a2, long long *a3, char a4, NSObject **a5, void *a6)
{
  unint64_t v12 = qmi::asShortString();
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.bb", v12);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v13 = *a5;
  *(void *)(a1 + 24) = *a5;
  if (v13) {
    dispatch_retain(v13);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v21);
  MEMORY[0x1A622BDE0](v21);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(void *)a1 = &unk_1EF43CD88;
  *(void *)(a1 + 48) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v14 = *a2;
    *(void *)(a1 + 72) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 56) = v14;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v15 = *a3;
    *(void *)(a1 + 96) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 80) = v15;
  }
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = xpc_null_create();
  xpc_object_t object = xpc_null_create();
  MEMORY[0x1A622BEA0](a1 + 120, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  *(void *)(a1 + 128) = xpc_null_create();
  uint64_t v16 = *a5;
  *(void *)(a1 + 136) = *a5;
  if (v16) {
    dispatch_retain(v16);
  }
  *(unsigned char *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 146) = 1;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  uint64_t v17 = a6[1];
  *(unsigned char *)(a1 + 256) = v17 != 0;
  *(void *)(a1 + 264) = *a6;
  *(void *)(a1 + 272) = v17;
  *a6 = 0;
  a6[1] = 0;
  *(unsigned char *)(a1 + 280) = 1;
  return a1;
}

void sub_1A10DC664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (*(char *)(v9 + 79) < 0)
  {
    operator delete(*v11);
    int v13 = *(const void **)(v9 + 48);
    if (!v13) {
      goto LABEL_6;
    }
  }
  else
  {
    int v13 = *(const void **)(v9 + 48);
    if (!v13)
    {
LABEL_6:
      ctu::SharedLoggable<qmi::ClientProxy::State,ctu::OsLogLogger>::~SharedLoggable(v10);
      _Unwind_Resume(a1);
    }
  }
  _Block_release(v13);
  goto LABEL_6;
}

void qmi::Client::State::~State(qmi::Client::State *this)
{
  *(void *)this = &unk_1EF43CD88;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 31);
  if (v3) {
    _Block_release(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 28);
  if (v4)
  {
    *((void *)this + 29) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>>>::destroy(*((void **)this + 26));
  int v5 = (const void *)*((void *)this + 24);
  if (v5) {
    _Block_release(v5);
  }
  size_t v6 = (const void *)*((void *)this + 23);
  if (v6) {
    _Block_release(v6);
  }
  unint64_t v7 = (const void *)*((void *)this + 22);
  if (v7) {
    _Block_release(v7);
  }
  uint64_t v8 = *((void *)this + 19);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = (void *)*((void *)this + 19);
    if (v9 != v8)
    {
      do
      {
        unint64_t v11 = *(atomic_uint **)(v9 - 16);
        if (v11)
        {
          int add = atomic_fetch_add(v11 + 2, 0xFFFFFFFF);
          if (add <= 0)
          {
            _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
          }
          else if (add == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v11 + 8))(v11);
          }
        }
        int v13 = *(const void **)(v9 - 8);
        if (v13) {
          _Block_release(v13);
        }
        v9 -= 24;
      }
      while (v9 != v8);
      uint64_t v10 = (void *)*((void *)this + 19);
    }
    *((void *)this + 20) = v8;
    operator delete(v10);
  }
  long long v14 = *((void *)this + 17);
  if (v14) {
    dispatch_release(v14);
  }
  xpc_release(*((xpc_object_t *)this + 16));
  *((void *)this + 16) = 0;
  MEMORY[0x1A622BEB0]((char *)this + 120);
  MEMORY[0x1A622BE80]((char *)this + 112);
  if ((*((char *)this + 103) & 0x80000000) == 0)
  {
    if ((*((char *)this + 79) & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_33:
    operator delete(*((void **)this + 7));
    long long v15 = (const void *)*((void *)this + 6);
    if (!v15) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0) {
    goto LABEL_33;
  }
LABEL_30:
  long long v15 = (const void *)*((void *)this + 6);
  if (v15) {
LABEL_34:
  }
    _Block_release(v15);
LABEL_35:
  MEMORY[0x1A622BDE0]((char *)this + 40);
  uint64_t v16 = *((void *)this + 4);
  if (v16) {
    dispatch_release(v16);
  }
  uint64_t v17 = *((void *)this + 3);
  if (v17) {
    dispatch_release(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

void qmi::Client::State::handleServerError(uint64_t a1, xpc_object_t *a2)
{
  if (*a2 == (xpc_object_t)MEMORY[0x1E4F14528])
  {
    ctu::XpcClientHelper::setServer();
    xpc_object_t v5 = *a2;
    xpc_object_t v7 = v5;
    if (v5)
    {
      xpc_retain(v5);
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v7 = v5;
    }
    size_t v6 = 0;
    qmi::Client::State::sendServerFailure_sync(a1, &v7, &v6);
    xpc_release(v5);
  }
  else if (*a2 == (xpc_object_t)MEMORY[0x1E4F14520])
  {
    uint64_t v3 = *(void (**)(void))(*(void *)a1 + 64);
    v3();
  }
}

void qmi::Client::State::sendServerFailure_sync(uint64_t a1, xpc_object_t *a2, NSObject **a3)
{
  if (!*(void *)(a1 + 192)) {
    return;
  }
  xpc_object_t v5 = *(NSObject **)(a1 + 136);
  xpc_object_t v6 = *a2;
  if (!*a2)
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v7 = *a3;
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  xpc_retain(*a2);
  xpc_object_t v7 = *a3;
  if (v7)
  {
LABEL_4:
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
LABEL_5:
  uint64_t v8 = *(void *)(a1 + 264);
  uint64_t v9 = *(void *)(a1 + 272);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  char v10 = *(unsigned char *)(a1 + 256);
  unint64_t v11 = *(const void **)(a1 + 192);
  if (v11) {
    unint64_t v12 = _Block_copy(v11);
  }
  else {
    unint64_t v12 = 0;
  }
  int v13 = operator new(0x30uLL);
  *int v13 = v6;
  xpc_object_t v14 = xpc_null_create();
  v13[1] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  void v13[2] = v8;
  v13[3] = v9;
  *((unsigned char *)v13 + 32) = v10;
  v13[5] = v12;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  dispatch_async_f(v5, v13, (dispatch_function_t)dispatch::async<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100](&v15);
  std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100](&v16);
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  xpc_release(v14);
}

void qmi::Client::State::handleClientError(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*a3 != (xpc_object_t)MEMORY[0x1E4F14550])
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v7 = *(void **)(a1 + 128);
    *(void *)(a1 + 128) = v5;
    xpc_release(v7);
    xpc_release(v6);
    uint64_t v8 = dispatch_group_create();
    uint64_t v9 = v8;
    *(void *)buf = v8;
    if (v8)
    {
      dispatch_retain(v8);
      dispatch_group_enter(v9);
      dispatch_release(v9);
    }
    xpc_object_t v10 = *a3;
    xpc_object_t v21 = v10;
    if (v10)
    {
      xpc_retain(v10);
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v21 = v10;
    }
    qmi::Client::State::sendServerFailure_sync(a1, &v21, (NSObject **)buf);
    xpc_release(v10);
    xpc_object_t v21 = 0;
    if (MEMORY[0x1A622CC50](*(void *)(a1 + 112)) != MEMORY[0x1E4F14578]) {
      goto LABEL_27;
    }
    int v13 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v13 || (v14 = *(void *)(a1 + 8), (uint64_t v15 = std::__shared_weak_count::lock(v13)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v16 = v15;
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v17 = std::__shared_weak_count::lock(v15);
      if (v17)
      {
LABEL_16:
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_weak(v16);
        if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_21:
          uint64_t v9 = *(NSObject **)buf;
          uint64_t v18 = *(NSObject **)(a1 + 24);
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 1174405120;
          v19[2] = ___ZN3qmi6Client5State17handleClientErrorERKN3xpc10connectionERKNS2_6objectE_block_invoke;
          void v19[3] = &__block_descriptor_tmp_6;
          v19[4] = a1;
          v19[5] = v14;
          unsigned int v20 = v17;
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          dispatch_group_notify(v9, v18, v19);
          if (v20) {
            std::__shared_weak_count::__release_weak(v20);
          }
          if (v17) {
            std::__shared_weak_count::__release_weak(v17);
          }
LABEL_27:
          if (v9)
          {
            dispatch_group_leave(v9);
            dispatch_release(v9);
          }
          return;
        }
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        uint64_t v16 = v17;
LABEL_20:
        std::__shared_weak_count::__release_weak(v16);
        goto LABEL_21;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
      uint64_t v17 = std::__shared_weak_count::lock(v16);
      if (v17) {
        goto LABEL_16;
      }
    }
    uint64_t v14 = 0;
    goto LABEL_20;
  }
  unint64_t v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v12 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      unint64_t v12 = (void *)*v12;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl(&dword_1A10C7000, v11, OS_LOG_TYPE_DEFAULT, "#I client '%s' ignoring XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
  }
}

void sub_1A10DCEC8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3qmi6Client5State17handleClientErrorERKN3xpc10connectionERKNS2_6objectE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    unint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      xpc_object_t v5 = v4;
      if (a1[5]) {
        (*(void (**)(uint64_t))(*(void *)v3 + 64))(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1A10DCFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c24_ZTSNSt3__18weak_ptrIvEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c24_ZTSNSt3__18weak_ptrIvEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void qmi::Client::State::setClientHandle(uint64_t a1, uint64_t *a2)
{
  v8[0] = a1;
  v8[1] = a2;
  if (*(unsigned char *)(a1 + 280))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 136));
    uint64_t v5 = *a2;
    uint64_t v4 = a2[1];
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
    }
    xpc_object_t v6 = *(std::__shared_weak_count **)(a1 + 272);
    *(void *)(a1 + 264) = v5;
    *(void *)(a1 + 272) = v4;
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    *(unsigned char *)(a1 + 256) = a2[1] != 0;
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS3_15setClientHandleERKNSt3__18weak_ptrIvEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke;
    block[3] = &__block_descriptor_tmp_42;
    block[4] = a1 + 8;
    void block[5] = v8;
    xpc_object_t v7 = *(NSObject **)(a1 + 24);
    if (*(void *)(a1 + 32)) {
      dispatch_async_and_wait(v7, block);
    }
    else {
      dispatch_sync(v7, block);
    }
  }
}

void qmi::Client::State::stop(qmi::Client::State *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2 || (uint64_t v3 = *((void *)this + 1), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  *xpc_object_t v6 = this;
  xpc_object_t v7 = *((void *)this + 3);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = operator new(0x18uLL);
  void *v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::stop(void)::$_0>(qmi::Client::State::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::stop(void)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void qmi::Client::State::sendStopMessage_sync(qmi::Client::State *this)
{
  if (!*((unsigned char *)this + 144)) {
    return;
  }
  *((unsigned char *)this + 144) = 0;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    xpc_object_t xdict = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t xdict = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_9;
    }
  }
  if (MEMORY[0x1A622CC50](v3) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v4 = xpc_null_create();
LABEL_9:
    xpc_object_t xdict = v4;
    goto LABEL_10;
  }
  xpc_retain(v3);
LABEL_10:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(1);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "status", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  (*(void (**)(qmi::Client::State *, xpc_object_t *))(*(void *)this + 56))(this, &xdict);
  xpc_release(xdict);
}

void sub_1A10DD360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void qmi::Client::State::start(qmi::Client::State *this)
{
  xpc_object_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2 || (uint64_t v3 = *((void *)this + 1), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v5 = v4;
  xpc_object_t v6 = operator new(8uLL);
  *xpc_object_t v6 = this;
  xpc_object_t v7 = *((void *)this + 3);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = operator new(0x18uLL);
  void *v8 = v6;
  v8[1] = v3;
  void v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::start(void)::$_0>(qmi::Client::State::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::start(void)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::start(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void qmi::Client::State::sendStartMessage_sync(qmi::Client::State *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    xpc_object_t xdict = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t xdict = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A622CC50](v3) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "status", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  xpc_object_t v7 = xpc_BOOL_create(*((void *)this + 31) != 0);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "low_power", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_BOOL_create(*((void *)this + 6) != 0);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "exit_low_power", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  (*(void (**)(qmi::Client::State *, xpc_object_t *))(*(void *)this + 56))(this, &xdict);
  xpc_release(xdict);
}

void sub_1A10DD660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void qmi::Client::State::handleStatus_sync(uint64_t a1, xpc_object_t *a2, int a3)
{
  if (a3 != 1)
  {
    if (a3 != 2) {
      return;
    }
    xpc_object_t v5 = *(const void **)(a1 + 176);
    if (!v5) {
      return;
    }
    xpc_object_t v6 = *(NSObject **)(a1 + 136);
    uint64_t v7 = *(void *)(a1 + 264);
    uint64_t v8 = *(void *)(a1 + 272);
    if (v8)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
      xpc_object_t v5 = *(const void **)(a1 + 176);
      char v9 = *(unsigned char *)(a1 + 256);
      if (!v5)
      {
        xpc_object_t v10 = 0;
        xpc_object_t v11 = *a2;
        if (!*a2)
        {
LABEL_7:
          xpc_object_t v11 = xpc_null_create();
LABEL_20:
          unsigned int v20 = operator new(0x28uLL);
          *unsigned int v20 = v7;
          v20[1] = v8;
          *((unsigned char *)v20 + 16) = v9;
          v20[3] = v10;
          v20[4] = v11;
          if (v11) {
            xpc_retain(v11);
          }
          else {
            v20[4] = xpc_null_create();
          }
          dispatch_async_f(v6, v20, (dispatch_function_t)dispatch::async<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0>>)::{lambda(void *)#1}::__invoke);
          xpc_release(v11);
          return;
        }
LABEL_19:
        xpc_retain(v11);
        goto LABEL_20;
      }
    }
    else
    {
      char v9 = *(unsigned char *)(a1 + 256);
    }
    xpc_object_t v10 = _Block_copy(v5);
    xpc_object_t v11 = *a2;
    if (!*a2) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
  unint64_t v12 = dispatch_group_create();
  int v13 = v12;
  if (v12)
  {
    dispatch_retain(v12);
    dispatch_group_enter(v13);
    dispatch_release(v13);
    if (*(void *)(a1 + 184))
    {
      dispatch_retain(v13);
      dispatch_group_enter(v13);
      goto LABEL_12;
    }
  }
  else if (*(void *)(a1 + 184))
  {
LABEL_12:
    uint64_t v14 = *(void *)(a1 + 264);
    uint64_t v15 = *(void *)(a1 + 272);
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
    }
    char v16 = *(unsigned char *)(a1 + 256);
    uint64_t v17 = *(const void **)(a1 + 184);
    if (v17)
    {
      uint64_t v18 = _Block_copy(v17);
      xpc_object_t v19 = *a2;
      if (*a2)
      {
LABEL_16:
        xpc_retain(v19);
LABEL_24:
        xpc_object_t v21 = *(NSObject **)(a1 + 136);
        uint64_t v22 = operator new(0x30uLL);
        *uint64_t v22 = v13;
        v22[1] = v14;
        v22[2] = v15;
        *((unsigned char *)v22 + 24) = v16;
        v22[4] = v18;
        v22[5] = v19;
        if (v19) {
          xpc_retain(v19);
        }
        else {
          v22[5] = xpc_null_create();
        }
        uint64_t v31 = 0;
        xpc_object_t object = 0;
        dispatch_async_f(v21, v22, (dispatch_function_t)dispatch::async<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100](&v31);
        std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100]((uint64_t *)&object);
        xpc_release(v19);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v18 = 0;
      xpc_object_t v19 = *a2;
      if (*a2) {
        goto LABEL_16;
      }
    }
    xpc_object_t v19 = xpc_null_create();
    goto LABEL_24;
  }
LABEL_28:
  xpc_object_t value = xpc_dictionary_get_value(*a2, "error");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v24 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (*(unsigned char *)(a1 + 144)) {
    int v25 = v24;
  }
  else {
    int v25 = 0;
  }
  if (v25 == 1)
  {
    uint64_t v27 = *(void *)(a1 + 264);
    uint64_t v26 = *(void *)(a1 + 272);
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 16), 1uLL, memory_order_relaxed);
    }
    char v28 = *(unsigned char *)(a1 + 256);
    uint64_t v29 = *(NSObject **)(a1 + 24);
    std::string v30 = operator new(0x20uLL);
    *std::string v30 = a1;
    v30[1] = v27;
    v30[2] = v26;
    *((unsigned char *)v30 + 24) = v28;
    dispatch_group_notify_f(v13, v29, v30, (dispatch_function_t)dispatch::detail::group_notify<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_2>(dispatch_group_s *,dispatch_queue_s *,qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  }
  if (v13)
  {
    dispatch_group_leave(v13);
    dispatch_release(v13);
  }
}

void sub_1A10DD998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
  _Unwind_Resume(exception_object);
}

void qmi::Client::State::handleExitLowPower_sync(uint64_t a1)
{
  xpc_object_t v2 = *(const void **)(a1 + 48);
  if (!v2) {
    return;
  }
  xpc_object_t v3 = _Block_copy(v2);
  xpc_object_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 264);
  xpc_object_t v6 = *(std::__shared_weak_count **)(a1 + 272);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = *(unsigned char *)(a1 + 256);
  uint64_t v8 = *(NSObject **)(a1 + 136);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___ZN3qmi6Client5State23handleExitLowPower_syncERKN3xpc4dictE_block_invoke;
  v10[3] = &__block_descriptor_tmp_15_1;
  v10[4] = v5;
  xpc_object_t v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v13 = v7;
  if (v3)
  {
    aBlocuint64_t k = _Block_copy(v3);
    dispatch_async(v8, v10);
    char v9 = aBlock;
    if (!aBlock) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  aBlocuint64_t k = 0;
  dispatch_async(v8, v10);
  char v9 = aBlock;
  if (aBlock) {
LABEL_10:
  }
    _Block_release(v9);
LABEL_11:
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v4) {
    _Block_release(v4);
  }
}

void qmi::Client::LocalState::setProxyMessenger(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 328);
  *(void *)(a1 + 320) = v3;
  *(void *)(a1 + 328) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void qmi::Client::XPCState::handleEnterLowPower_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
    dispatch_release(v5);
    if (*(void *)(a1 + 248))
    {
      dispatch_retain(v5);
      dispatch_group_enter(v5);
      goto LABEL_5;
    }
  }
  else if (*(void *)(a1 + 248))
  {
LABEL_5:
    uint64_t v6 = *(void *)(a1 + 264);
    uint64_t v7 = *(void *)(a1 + 272);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    }
    char v8 = *(unsigned char *)(a1 + 256);
    char v9 = *(const void **)(a1 + 248);
    if (v9)
    {
      xpc_object_t v10 = _Block_copy(v9);
      xpc_object_t v11 = *a2;
      if (*a2)
      {
LABEL_9:
        xpc_retain(v11);
LABEL_12:
        unint64_t v12 = *(NSObject **)(a1 + 136);
        char v13 = operator new(0x30uLL);
        *char v13 = v5;
        v13[1] = v6;
        void v13[2] = v7;
        *((unsigned char *)v13 + 24) = v8;
        v13[4] = v10;
        v13[5] = v11;
        if (v11) {
          xpc_retain(v11);
        }
        else {
          v13[5] = xpc_null_create();
        }
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        dispatch_async_f(v12, v13, (dispatch_function_t)dispatch::async<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v25);
        std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v26);
        xpc_release(v11);
        goto LABEL_16;
      }
    }
    else
    {
      xpc_object_t v10 = 0;
      xpc_object_t v11 = *a2;
      if (*a2) {
        goto LABEL_9;
      }
    }
    xpc_object_t v11 = xpc_null_create();
    goto LABEL_12;
  }
LABEL_16:
  xpc_object_t reply = xpc_dictionary_create_reply(*a2);
  if (reply || (xpc_object_t reply = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A622CC50](reply) == MEMORY[0x1E4F14590])
    {
      xpc_retain(reply);
      xpc_object_t v15 = reply;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
    xpc_object_t reply = 0;
  }
  xpc_release(reply);
  char v16 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v16 || (uint64_t v17 = *(void *)(a1 + 8), (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v19 = v18;
  p_shared_weak_owners = &v18->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_object_t v21 = *(NSObject **)(a1 + 24);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 1174405120;
  v22[2] = ___ZN3qmi6Client8XPCState24handleEnterLowPower_syncERKN3xpc4dictE_block_invoke;
  v22[3] = &__block_descriptor_tmp_13;
  v22[4] = a1;
  v22[5] = v17;
  uint64_t v23 = v19;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  xpc_object_t object = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  dispatch_group_notify(v5, v21, v22);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__shared_weak_count::__release_weak(v19);
  xpc_release(v15);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A10DDE78(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A10DDE9C()
{
  xpc_release(v1);
  if (!v0) {
    JUMPOUT(0x1A10DDE90);
  }
  JUMPOUT(0x1A10DDE80);
}

void ___ZN3qmi6Client8XPCState24handleEnterLowPower_syncERKN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        (*(void (**)(uint64_t, void *))(*(void *)v3 + 56))(v3, a1 + 7);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1A10DDF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

xpc_object_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE56c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v4 = (void *)a2[7];
  a1[7] = v4;
  if (v4) {
    return xpc_retain(v4);
  }
  xpc_object_t result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void qmi::Client::LocalState::handleEnterLowPower_sync(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  uint64_t v3 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v3);
    dispatch_release(v3);
    if (!*(void *)(a1 + 248)) {
      goto LABEL_22;
    }
    group[0] = v3;
    dispatch_retain(v3);
    dispatch_group_enter(v3);
    xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 272);
    group[1] = *(dispatch_group_t *)(a1 + 264);
    uint64_t v18 = v4;
    if (v4) {
      goto LABEL_4;
    }
  }
  else
  {
    if (!*(void *)(a1 + 248)) {
      goto LABEL_22;
    }
    group[0] = 0;
    xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 272);
    group[1] = *(dispatch_group_t *)(a1 + 264);
    uint64_t v18 = v4;
    if (v4) {
LABEL_4:
    }
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v19 = *(unsigned char *)(a1 + 256);
  uint64_t v5 = *(void **)(a1 + 248);
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  aBlocuint64_t k = v5;
  if (*(char *)(a1 + 79) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else {
    std::string __p = *(std::string *)(a1 + 56);
  }
  uint64_t v6 = *(NSObject **)(a1 + 136);
  uint64_t v7 = (char *)operator new(0x40uLL);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)group;
  *((void *)v7 + 2) = v18;
  group[1] = 0;
  uint64_t v18 = 0;
  v7[24] = v19;
  *((void *)v7 + 4) = aBlock;
  group[0] = 0;
  aBlocuint64_t k = 0;
  *(std::string *)(v7 + 40) = __p;
  memset(&__p, 0, sizeof(__p));
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  dispatch_async_f(v6, v7, (dispatch_function_t)dispatch::async<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v22);
  std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v23);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    char v8 = aBlock;
    if (!aBlock) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  char v8 = aBlock;
  if (aBlock) {
LABEL_17:
  }
    _Block_release(v8);
LABEL_18:
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (group[0])
  {
    dispatch_group_leave(group[0]);
    dispatch_release(group[0]);
  }
LABEL_22:
  char v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9 || (v10 = *(void *)(a1 + 8), (xpc_object_t v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v12 = v11;
  p_shared_weak_owners = &v11->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v14 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN3qmi6Client10LocalState24handleEnterLowPower_syncERKN3xpc4dictE_block_invoke;
  block[3] = &__block_descriptor_tmp_14_1;
  block[4] = a1;
  void block[5] = v10;
  char v16 = v12;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_group_notify(v3, v14, block);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v12);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1A10DE324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v21)
  {
    dispatch_group_leave(v21);
    dispatch_release(v21);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3qmi6Client10LocalState24handleEnterLowPower_syncERKN3xpc4dictE_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = a1[4];
  xpc_object_t v4 = std::__shared_weak_count::lock(v2);
  char v13 = v4;
  if (!v4) {
    return;
  }
  if (!a1[5])
  {
    uint64_t v7 = v4;
LABEL_16:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  if (v5)
  {
    xpc_object_t xdict = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t xdict = v6;
    if (!v6)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1A622CC50](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    goto LABEL_13;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_12:
  xpc_object_t xdict = v8;
LABEL_13:
  xpc_release(v6);
  xpc_object_t v9 = xpc_BOOL_create(1);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "low_power_reply", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v3 + 56))(v3, &xdict);
  xpc_release(xdict);
  uint64_t v7 = v13;
  if (v13) {
    goto LABEL_16;
  }
}

void sub_1A10DE538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3qmi6Client5State23handleExitLowPower_syncERKN3xpc4dictE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(unsigned char *)(a1 + 56)) {
        BOOL v4 = *(void *)(a1 + 32) == 0;
      }
      else {
        BOOL v4 = 0;
      }
      if (!v4) {
        goto LABEL_11;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (!*(unsigned char *)(a1 + 56)) {
LABEL_11:
  }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_12:
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1A10DE698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_32c24_ZTSNSt3__18weak_ptrIvEE48c44_ZTSN8dispatch5blockIU13block_pointerFvPvEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t result = (void *)a2[6];
  if (result) {
    xpc_object_t result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c24_ZTSNSt3__18weak_ptrIvEE48c44_ZTSN8dispatch5blockIU13block_pointerFvPvEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void qmi::Client::State::send(void *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    BOOL v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
LABEL_12:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    BOOL v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      goto LABEL_12;
    }
  }
  uint64_t v5 = a1[1];
  xpc_object_t v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v6;
  xpc_object_t v8 = operator new(0x10uLL);
  void *v8 = a1;
  v8[1] = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    v8[1] = xpc_null_create();
  }
  xpc_object_t v9 = a1[3];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v10 = operator new(0x18uLL);
  void *v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::send(xpc::dict const&)::$_0>(qmi::Client::State::send(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::send(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::send(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v3);
}

uint64_t qmi::Client::State::pickNextTxId_sync(qmi::Client::State *this)
{
  uint64_t v1 = *((unsigned __int16 *)this + 73);
  if ((((_WORD)v1 + 1) & 0xFFFE) != 0) {
    __int16 v2 = v1 + 1;
  }
  else {
    __int16 v2 = 1;
  }
  *((_WORD *)this + 73) = v2;
  return v1;
}

void qmi::Client::State::Transaction::~Transaction(qmi::Client::State::Transaction *this)
{
  __int16 v2 = (atomic_uint *)*((void *)this + 1);
  if (v2)
  {
    int add = atomic_fetch_add(v2 + 2, 0xFFFFFFFF);
    if (add <= 0)
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
    }
    else if (add == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
    }
  }
  BOOL v4 = (const void *)*((void *)this + 2);
  if (v4) {
    _Block_release(v4);
  }
}

void qmi::Client::State::setHandler(void *a1, int a2, const void **a3)
{
  if (*a3)
  {
    uint64_t v5 = _Block_copy(*a3);
    xpc_object_t v6 = (std::__shared_weak_count *)a1[2];
    if (!v6) {
LABEL_10:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    uint64_t v5 = 0;
    xpc_object_t v6 = (std::__shared_weak_count *)a1[2];
    if (!v6) {
      goto LABEL_10;
    }
  }
  uint64_t v7 = a1[1];
  xpc_object_t v8 = std::__shared_weak_count::lock(v6);
  if (!v8) {
    goto LABEL_10;
  }
  xpc_object_t v9 = v8;
  xpc_object_t v10 = operator new(0x18uLL);
  *(void *)xpc_object_t v10 = a1;
  v10[2] = a2;
  *((void *)v10 + 2) = v5;
  xpc_object_t v11 = a1[3];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = v10;
  v12[1] = v7;
  v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0>(qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  void *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  NSObject *v11;
  void *v12;
  uint64_t vars8;

  if (*a3)
  {
    uint64_t v5 = _Block_copy(*a3);
    xpc_object_t v6 = (std::__shared_weak_count *)a1[2];
    if (!v6) {
LABEL_10:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    uint64_t v5 = 0;
    xpc_object_t v6 = (std::__shared_weak_count *)a1[2];
    if (!v6) {
      goto LABEL_10;
    }
  }
  uint64_t v7 = a1[1];
  xpc_object_t v8 = std::__shared_weak_count::lock(v6);
  if (!v8) {
    goto LABEL_10;
  }
  xpc_object_t v9 = v8;
  xpc_object_t v10 = operator new(0x18uLL);
  *(void *)xpc_object_t v10 = a1;
  v10[2] = a2;
  *((void *)v10 + 2) = v5;
  xpc_object_t v11 = a1[3];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = v10;
  v12[1] = v7;
  v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0>(qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void qmi::Client::State::setIndHandler(void *a1, __int16 a2, const void **a3)
{
  if (*a3)
  {
    uint64_t v5 = _Block_copy(*a3);
    xpc_object_t v6 = (std::__shared_weak_count *)a1[2];
    if (!v6) {
LABEL_10:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    uint64_t v5 = 0;
    xpc_object_t v6 = (std::__shared_weak_count *)a1[2];
    if (!v6) {
      goto LABEL_10;
    }
  }
  uint64_t v7 = a1[1];
  xpc_object_t v8 = std::__shared_weak_count::lock(v6);
  if (!v8) {
    goto LABEL_10;
  }
  xpc_object_t v9 = v8;
  xpc_object_t v10 = operator new(0x18uLL);
  *(void *)xpc_object_t v10 = a1;
  v10[4] = a2;
  *((void *)v10 + 2) = v5;
  xpc_object_t v11 = a1[3];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = v10;
  v12[1] = v7;
  v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0>(qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void qmi::Client::State::setIndShouldWake(qmi::Client::State *this, __int16 a2, char a3)
{
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v4 || (uint64_t v7 = *((void *)this + 1), (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  xpc_object_t v10 = operator new(0x10uLL);
  *(void *)xpc_object_t v10 = this;
  v10[4] = a2;
  *((unsigned char *)v10 + 10) = a3;
  xpc_object_t v11 = *((void *)this + 3);
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = v10;
  v12[1] = v7;
  v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0>(qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void qmi::Client::State::sendIndWakeSet_sync(qmi::Client::State *this)
{
  xpc_object_t v2 = xpc_array_create(0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A622CC50](v2) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  BOOL v4 = (unsigned __int16 *)*((void *)this + 28);
  for (uint64_t i = (unsigned __int16 *)*((void *)this + 29); v4 != i; ++v4)
  {
    xpc_object_t v6 = xpc_int64_create(*v4);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    xpc_array_append_value(v3, v6);
    xpc_release(v6);
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t xdict = v7;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t xdict = v8;
    if (!v8)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
      goto LABEL_18;
    }
  }
  if (MEMORY[0x1A622CC50](v8) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v8);
    goto LABEL_19;
  }
  xpc_object_t v9 = xpc_null_create();
LABEL_18:
  xpc_object_t xdict = v9;
LABEL_19:
  xpc_release(v8);
  if (v3)
  {
    xpc_retain(v3);
    xpc_object_t v10 = v3;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "set_ind_wake", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  (*(void (**)(qmi::Client::State *, xpc_object_t *))(*(void *)this + 56))(this, &xdict);
  xpc_release(xdict);
  xpc_release(v3);
}

void sub_1A10DEFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *qmi::Client::XPCState::XPCState(uint64_t a1, long long *a2, long long *a3, char a4, NSObject **a5)
{
  xpc_object_t result = (void *)qmi::Client::State::State(a1, a2, a3, a4, a5);
  *xpc_object_t result = &unk_1EF43CED0;
  result[36] = 0;
  return result;
}

{
  void *result;

  xpc_object_t result = (void *)qmi::Client::State::State(a1, a2, a3, a4, a5);
  *xpc_object_t result = &unk_1EF43CED0;
  result[36] = 0;
  return result;
}

void *qmi::Client::XPCState::XPCState(uint64_t a1, long long *a2, long long *a3, char a4, NSObject **a5, void *a6)
{
  xpc_object_t result = (void *)qmi::Client::State::State(a1, a2, a3, a4, a5, a6);
  *xpc_object_t result = &unk_1EF43CED0;
  result[36] = 0;
  return result;
}

{
  void *result;

  xpc_object_t result = (void *)qmi::Client::State::State(a1, a2, a3, a4, a5, a6);
  *xpc_object_t result = &unk_1EF43CED0;
  result[36] = 0;
  return result;
}

void qmi::Client::XPCState::create(long long *a1@<X0>, long long *a2@<X1>, xpc_object_t *a3@<X2>, char a4@<W3>, NSObject **a5@<X4>, uint64_t *a6@<X8>)
{
  *a6 = 0xAAAAAAAAAAAAAAAALL;
  a6[1] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v12 = operator new(0x128uLL);
  qmi::Client::State::State((uint64_t)v12, a1, a2, a4, a5);
  *unint64_t v12 = &unk_1EF43CED0;
  v12[36] = 0;
  *a6 = 0xAAAAAAAAAAAAAAAALL;
  a6[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Client::XPCState>::shared_ptr[abi:ne180100]<qmi::Client::XPCState,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState*)#1},void>(a6, (uint64_t)v12);
  uint64_t v13 = *a6;
  v15[0] = a3;
  v15[1] = (xpc_object_t *)v13;
  if (*(unsigned char *)(v13 + 280))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v13 + 136));
    qmi::Client::XPCState::init(xpc::connection const&)::$_0::operator()(v15);
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_8XPCState4initERKN3xpc10connectionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke;
    block[3] = &__block_descriptor_tmp_54;
    block[4] = v13 + 8;
    void block[5] = v15;
    uint64_t v14 = *(NSObject **)(v13 + 24);
    if (*(void *)(v13 + 32)) {
      dispatch_async_and_wait(v14, block);
    }
    else {
      dispatch_sync(v14, block);
    }
  }
}

void sub_1A10DF260(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A10DF274(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void qmi::Client::XPCState::init(uint64_t a1, xpc_object_t *a2)
{
  v4[0] = a2;
  v4[1] = (xpc_object_t *)a1;
  if (*(unsigned char *)(a1 + 280))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 136));
    qmi::Client::XPCState::init(xpc::connection const&)::$_0::operator()(v4);
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_8XPCState4initERKN3xpc10connectionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke;
    block[3] = &__block_descriptor_tmp_54;
    block[4] = a1 + 8;
    void block[5] = v4;
    uint64_t v3 = a1 + 24;
    xpc_object_t v2 = *(NSObject **)(a1 + 24);
    if (*(void *)(v3 + 8)) {
      dispatch_async_and_wait(v2, block);
    }
    else {
      dispatch_sync(v2, block);
    }
  }
}

void qmi::Client::XPCState::create(long long *a1@<X0>, long long *a2@<X1>, xpc_object_t *a3@<X2>, char a4@<W3>, NSObject **a5@<X4>, void *a6@<X5>, uint64_t *a7@<X8>)
{
  *a7 = 0xAAAAAAAAAAAAAAAALL;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = operator new(0x128uLL);
  qmi::Client::State::State((uint64_t)v14, a1, a2, a4, a5, a6);
  void *v14 = &unk_1EF43CED0;
  v14[36] = 0;
  *a7 = 0xAAAAAAAAAAAAAAAALL;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Client::XPCState>::shared_ptr[abi:ne180100]<qmi::Client::XPCState,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState*)#1},void>(a7, (uint64_t)v14);
  uint64_t v15 = *a7;
  v17[0] = a3;
  v17[1] = (xpc_object_t *)v15;
  if (*(unsigned char *)(v15 + 280))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v15 + 136));
    qmi::Client::XPCState::init(xpc::connection const&)::$_0::operator()(v17);
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_8XPCState4initERKN3xpc10connectionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke;
    block[3] = &__block_descriptor_tmp_54;
    block[4] = v15 + 8;
    void block[5] = v17;
    char v16 = *(NSObject **)(v15 + 24);
    if (*(void *)(v15 + 32)) {
      dispatch_async_and_wait(v16, block);
    }
    else {
      dispatch_sync(v16, block);
    }
  }
}

void sub_1A10DF484(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A10DF498(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void qmi::Client::XPCState::~XPCState(qmi::Client::XPCState *this)
{
  *(void *)this = &unk_1EF43CED0;
  std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)this + 36, 0);

  qmi::Client::State::~State(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF43CED0;
  std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)this + 36, 0);

  qmi::Client::State::~State(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF43CED0;
  std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)this + 36, 0);
  qmi::Client::State::~State(this);

  operator delete(v2);
}

BOOL qmi::Client::XPCState::handleNewClient(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x1A622CC50](*(void *)(a1 + 128));
  uint64_t v5 = MEMORY[0x1E4F14578];
  if (v4 == MEMORY[0x1E4F14578]) {
    return v4 != v5;
  }
  xpc_object_t v6 = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t v6 = xpc_null_create();
  }
  xpc_object_t v7 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v6;
  xpc_release(v7);
  xpc_object_t v8 = *a2;
  if (v8)
  {
    xpc_retain(v8);
    xpc_object_t v9 = *(NSObject **)(a1 + 24);
    if (!v9) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  xpc_object_t v8 = xpc_null_create();
  xpc_object_t v9 = *(NSObject **)(a1 + 24);
  if (v9) {
LABEL_7:
  }
    dispatch_retain(v9);
LABEL_8:
  xpc_object_t v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10 || (v11 = *(void *)(a1 + 8), (unint64_t v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZNK3ctu15XpcServerHelper12acceptClientIN3qmi6Client5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
  handler[3] = &__block_descriptor_tmp_55;
  handler[4] = v11;
  unsigned int v20 = v13;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  xpc_object_t v21 = v8;
  xpc_connection_set_event_handler((xpc_connection_t)v8, handler);
  xpc_connection_set_target_queue((xpc_connection_t)v8, v9);
  xpc_connection_resume((xpc_connection_t)v8);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_weak(v13);
  if (v9) {
    dispatch_release(v9);
  }
  xpc_release(v8);
  if (*(unsigned char *)(a1 + 144)) {
    qmi::Client::State::sendStartMessage_sync((qmi::Client::State *)a1);
  }
  if (*(void *)(a1 + 224) != *(void *)(a1 + 232)) {
    qmi::Client::State::sendIndWakeSet_sync((qmi::Client::State *)a1);
  }
  uint64_t v15 = *(void *)(a1 + 288);
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 8);
    for (uint64_t i = *(void *)(v15 + 16); v16 != i; v16 += 8)
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, v16);
    std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)(a1 + 288), 0);
  }
  return v4 != v5;
}

void sub_1A10DF814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v17);
  if (v16) {
    dispatch_release(v16);
  }
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t v5 = *(void **)(v2 + 8);
      if (v4 != v3)
      {
        uint64_t v6 = *(void *)(v2 + 16);
        do
        {
          xpc_object_t v7 = *(void **)(v6 - 8);
          v6 -= 8;
          xpc_release(v7);
          *(void *)(v4 - 8) = 0;
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        uint64_t v5 = *(void **)(v2 + 8);
      }
      *(void *)(v2 + 16) = v3;
      operator delete(v5);
    }
    xpc_release(*(xpc_object_t *)v2);
    operator delete((void *)v2);
  }
}

BOOL qmi::Client::XPCState::sendNowOrDrop_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x1A622CC50](*(void *)(a1 + 128));
  uint64_t v5 = MEMORY[0x1E4F14578];
  if (v4 != MEMORY[0x1E4F14578]) {
    return 0;
  }
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 128), *a2);
  return v4 == v5;
}

void qmi::Client::XPCState::sendConnectMessage_sync(qmi::Client::XPCState *this)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MEMORY[0x1A622CC50](*((void *)this + 16));
  uint64_t v3 = MEMORY[0x1E4F14578];
  if (v2 == MEMORY[0x1E4F14578]) {
    return;
  }
  if (*((void *)this + 14))
  {
    uint64_t v4 = (void ***)((char *)this + 288);
    uint64_t v5 = (void *)*((void *)this + 36);
    if (v5)
    {
      if (MEMORY[0x1A622CC50](*v5) == v3) {
        return;
      }
    }
    else
    {
      xpc_object_t v8 = operator new(0x20uLL);
      _OWORD *v8 = 0u;
      v8[1] = 0u;
      *(void *)xpc_object_t v8 = xpc_null_create();
      *((void *)v8 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
      *((void *)v8 + 2) = 0;
      *((void *)v8 + 3) = 0;
      *(void *)&long long buf = 0;
      std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)this + 36, (uint64_t)v8);
      std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)&buf, 0);
      if (MEMORY[0x1A622CC50](**v4) == v3) {
        return;
      }
    }
    xpc_object_t v9 = xpc_connection_create(0, *((dispatch_queue_t *)this + 3));
    if (v9)
    {
      xpc_object_t v10 = *v4;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v10 = *v4;
      if (!v9)
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v9 = 0;
        int v11 = 1;
        goto LABEL_15;
      }
    }
    xpc_retain(v9);
    int v11 = 0;
    xpc_object_t v12 = v9;
LABEL_15:
    uint64_t v13 = *v10;
    std::__shared_weak_count *v10 = v12;
    xpc_release(v13);
    xpc_object_t object = v9;
    if (v11) {
      xpc_object_t object = xpc_null_create();
    }
    else {
      xpc_retain(v9);
    }
    uint64_t v14 = (xpc_connection_t *)((char *)this + 120);
    ctu::XpcServerHelper::setListener();
    xpc_release(object);
    xpc_object_t object = 0;
    uint64_t v15 = *((void *)this + 3);
    if (v15) {
      dispatch_retain(*((dispatch_object_t *)this + 3));
    }
    uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v16 || (uint64_t v17 = *((void *)this + 1), (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    char v19 = v18;
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v19);
    }
    if (MEMORY[0x1A622CC50](*v14) == v3)
    {
      unsigned int v20 = *v14;
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 1174405120;
      uint64_t v47 = ___ZN3ctu15XpcServerHelper13startListenerIN3qmi6Client5StateEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
      uint64_t v48 = &__block_descriptor_tmp_58;
      uint64_t v49 = (char *)this + 120;
      uint64_t v50 = v17;
      uint64_t v51 = v19;
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v52 = v20;
      xpc_connection_set_event_handler(v20, &buf);
      xpc_connection_set_target_queue(*v14, v15);
      xpc_connection_resume(*v14);
      if (v51) {
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    std::__shared_weak_count::__release_weak(v19);
    if (v15) {
      dispatch_release(v15);
    }
    xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
    if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A622CC50](v21) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v21);
        xpc_object_t v22 = v21;
      }
      else
      {
        xpc_object_t v22 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v21 = 0;
    }
    xpc_release(v21);
    uint64_t v23 = (char *)this + 80;
    if (*((char *)this + 103) < 0) {
      uint64_t v23 = *(const char **)v23;
    }
    xpc_object_t v24 = xpc_string_create(v23);
    if (!v24) {
      xpc_object_t v24 = xpc_null_create();
    }
    xpc_dictionary_set_value(v22, "connect", v24);
    xpc_object_t v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    xpc_object_t v26 = xpc_int64_create(*((unsigned __int8 *)this + 104));
    if (!v26) {
      xpc_object_t v26 = xpc_null_create();
    }
    xpc_dictionary_set_value(v22, "svc_type", v26);
    xpc_object_t v27 = xpc_null_create();
    xpc_release(v26);
    xpc_release(v27);
    char v28 = (const char **)((char *)this + 56);
    uint64_t v29 = (char *)this + 56;
    if (*((char *)this + 79) < 0) {
      uint64_t v29 = *v28;
    }
    xpc_object_t v30 = xpc_string_create(v29);
    if (!v30) {
      xpc_object_t v30 = xpc_null_create();
    }
    xpc_dictionary_set_value(v22, "name", v30);
    xpc_object_t v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
    int64_t v32 = xpc_endpoint_create((xpc_connection_t)v9);
    if (v32 || (int64_t v32 = xpc_null_create()) != 0)
    {
      xpc_retain(v32);
      xpc_object_t v33 = v32;
    }
    else
    {
      xpc_object_t v33 = xpc_null_create();
      int64_t v32 = 0;
    }
    xpc_dictionary_set_value(v22, "endpoint", v33);
    xpc_object_t v34 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v34);
    xpc_release(v32);
    if (MEMORY[0x1A622CC50](*((void *)this + 14)) == v3)
    {
      int v36 = (std::__shared_weak_count *)*((void *)this + 2);
      if (!v36 || (uint64_t v37 = *((void *)this + 1), (v38 = std::__shared_weak_count::lock(v36)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      unint64_t v39 = v38;
      p_shared_weak_owners = &v38->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v39);
      }
      uint64_t v41 = (_xpc_connection_s *)*((void *)this + 14);
      unint64_t v42 = *((void *)this + 3);
      v43[0] = MEMORY[0x1E4F143A8];
      v43[1] = 1174405120;
      v43[2] = ___ZN3qmi6Client8XPCState23sendConnectMessage_syncEv_block_invoke;
      v43[3] = &__block_descriptor_tmp_20;
      v43[4] = this;
      v43[5] = v37;
      unint64_t v44 = v39;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      xpc_connection_send_message_with_reply(v41, v22, v42, v43);
      if (v44) {
        std::__shared_weak_count::__release_weak(v44);
      }
      std::__shared_weak_count::__release_weak(v39);
    }
    else
    {
      long long v35 = *((void *)this + 5);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)this + 79) < 0) {
          char v28 = (const char **)*v28;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v28;
        _os_log_error_impl(&dword_1A10C7000, v35, OS_LOG_TYPE_ERROR, "[%s] ****** Client connection has been lost!", (uint8_t *)&buf, 0xCu);
      }
    }
    xpc_release(v22);
    xpc_release(v9);
    return;
  }
  uint64_t v6 = *((void *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    xpc_object_t v7 = (void *)((char *)this + 56);
    if (*((char *)this + 79) < 0) {
      xpc_object_t v7 = (void *)*v7;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_1A10C7000, v6, OS_LOG_TYPE_DEFAULT, "#I [%s] Client reconnect skipped because server is not reachable.", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1A10DFFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, xpc_object_t object, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v25);
  xpc_release(v24);
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN3qmi6Client8XPCState23sendConnectMessage_syncEv_block_invoke(void *a1, xpc_object_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  xpc_object_t v27 = v6;
  if (!v6) {
    return;
  }
  xpc_object_t v7 = v6;
  if (!a1[5]) {
    goto LABEL_32;
  }
  xpc_object_t v8 = *(xpc_object_t **)(v5 + 288);
  if (!v8) {
    goto LABEL_32;
  }
  Listener = (xpc_object_t *)ctu::XpcServerHelper::getListener((ctu::XpcServerHelper *)(v5 + 120));
  if (!xpc_equal(*v8, *Listener)) {
    goto LABEL_32;
  }
  xpc_object_t v10 = xpc_null_create();
  int v11 = *(void ***)(v5 + 288);
  xpc_object_t v12 = xpc_null_create();
  uint64_t v13 = *v11;
  NSObject *v11 = v10;
  xpc_release(v13);
  xpc_release(v12);
  if (MEMORY[0x1A622CC50](a2) == MEMORY[0x1E4F145A8])
  {
    if (a2 == (xpc_object_t)MEMORY[0x1E4F14528])
    {
      xpc_object_t v22 = *(NSObject **)(v5 + 40);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      uint64_t v23 = (void *)(v5 + 56);
      if (*(char *)(v5 + 79) < 0) {
        uint64_t v23 = (void *)*v23;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v29 = v23;
      char v19 = "#E [%s] Client connection invalid.";
      unsigned int v20 = v22;
      goto LABEL_23;
    }
    xpc_object_t v15 = (xpc_object_t)MEMORY[0x1E4F14520];
    uint64_t v16 = *(NSObject **)(v5 + 40);
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (a2 == v15)
    {
      if (v17)
      {
        xpc_object_t v24 = (void *)(v5 + 56);
        if (*(char *)(v5 + 79) < 0) {
          xpc_object_t v24 = (void *)*v24;
        }
        *(_DWORD *)long long buf = 136315138;
        uint64_t v29 = v24;
        _os_log_impl(&dword_1A10C7000, v16, OS_LOG_TYPE_DEFAULT, "#I [%s] Client connection interrupted; retrying.",
          buf,
          0xCu);
      }
      (*(void (**)(uint64_t))(*(void *)v5 + 64))(v5);
      goto LABEL_32;
    }
    if (v17)
    {
      uint64_t v18 = (void *)(v5 + 56);
      if (*(char *)(v5 + 79) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v29 = v18;
      char v19 = "#I [%s] Client connection other error.";
      unsigned int v20 = v16;
LABEL_23:
      _os_log_impl(&dword_1A10C7000, v20, OS_LOG_TYPE_DEFAULT, v19, buf, 0xCu);
    }
LABEL_32:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  uint64_t v14 = MEMORY[0x1E4F14590];
  if (a2)
  {
    xpc_retain(a2);
  }
  else
  {
    a2 = xpc_null_create();
    if (!a2)
    {
      xpc_object_t v21 = xpc_null_create();
      a2 = 0;
      goto LABEL_30;
    }
  }
  if (MEMORY[0x1A622CC50](a2) == v14)
  {
    xpc_retain(a2);
    xpc_object_t v21 = a2;
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
  }
LABEL_30:
  xpc_release(a2);
  if (MEMORY[0x1A622CC50](v21) == v14)
  {
    if (xpc_dictionary_get_count(v21))
    {
      xpc_object_t v25 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        xpc_object_t v26 = (void *)(v5 + 56);
        if (*(char *)(v5 + 79) < 0) {
          xpc_object_t v26 = (void *)*v26;
        }
        *(_DWORD *)long long buf = 136315138;
        uint64_t v29 = v26;
        _os_log_impl(&dword_1A10C7000, v25, OS_LOG_TYPE_DEFAULT, "#E [%s] Client connection rejected!", buf, 0xCu);
      }
    }
  }
  xpc_release(v21);
  xpc_object_t v7 = v27;
  if (v27) {
    goto LABEL_32;
  }
}

void sub_1A10E0458(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Client::LocalState::LocalState(uint64_t a1, long long *a2, long long *a3, char a4, NSObject **a5, void *a6)
{
  uint64_t v8 = qmi::Client::State::State(a1, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &unk_1EF43CF58;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  uint64_t v9 = a6[1];
  *(void *)(v8 + 352) = *a6;
  *(void *)(v8 + 360) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = xpc_null_create();
  return a1;
}

{
  uint64_t v8;
  uint64_t v9;

  uint64_t v8 = qmi::Client::State::State(a1, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &unk_1EF43CF58;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  uint64_t v9 = a6[1];
  *(void *)(v8 + 352) = *a6;
  *(void *)(v8 + 360) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = xpc_null_create();
  return a1;
}

uint64_t qmi::Client::LocalState::LocalState(uint64_t a1, long long *a2, long long *a3, char a4, NSObject **a5, void *a6, void *a7)
{
  uint64_t v9 = qmi::Client::State::State(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v9 = &unk_1EF43CF58;
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  uint64_t v10 = a7[1];
  *(void *)(v9 + 352) = *a7;
  *(void *)(v9 + 360) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = xpc_null_create();
  return a1;
}

{
  uint64_t v9;
  uint64_t v10;

  uint64_t v9 = qmi::Client::State::State(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v9 = &unk_1EF43CF58;
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  uint64_t v10 = a7[1];
  *(void *)(v9 + 352) = *a7;
  *(void *)(v9 + 360) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = xpc_null_create();
  return a1;
}

void qmi::Client::LocalState::create(long long *a1@<X0>, long long *a2@<X1>, char a3@<W2>, NSObject **a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  *a6 = 0xAAAAAAAAAAAAAAAALL;
  a6[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v12 = operator new(0x180uLL);
  uint64_t v13 = (uint64_t)v12;
  uint64_t v14 = (std::__shared_weak_count *)a5[1];
  uint64_t v17 = *a5;
  uint64_t v18 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::State::State((uint64_t)v12, a1, a2, a3, a4);
  *(void *)uint64_t v13 = &unk_1EF43CF58;
  *(_OWORD *)(v13 + 288) = 0u;
  *(_OWORD *)(v13 + 304) = 0u;
  *(_OWORD *)(v13 + 320) = 0u;
  *(_OWORD *)(v13 + 336) = 0u;
  *(void *)(v13 + 352) = v17;
  *(void *)(v13 + 360) = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v13 + 368) = 0;
  *(void *)(v13 + 376) = xpc_null_create();
  *a6 = 0xAAAAAAAAAAAAAAAALL;
  a6[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Client::LocalState>::shared_ptr[abi:ne180100]<qmi::Client::LocalState,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState*)#1},void>(a6, v13);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    uint64_t v15 = *a6;
    uint64_t v19 = v15;
    if (*(unsigned char *)(v15 + 280)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v15 = *a6;
    uint64_t v19 = v15;
    if (*(unsigned char *)(v15 + 280))
    {
LABEL_8:
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v15 + 136));
      qmi::Client::LocalState::init(void)::$_0::operator()(v15);
      return;
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_10LocalState4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_67;
  block[4] = v15 + 8;
  void block[5] = &v19;
  uint64_t v16 = *(NSObject **)(v15 + 24);
  if (*(void *)(v15 + 32)) {
    dispatch_async_and_wait(v16, block);
  }
  else {
    dispatch_sync(v16, block);
  }
}

void sub_1A10E0878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10E0890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A10E08AC(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void qmi::Client::LocalState::init(dispatch_queue_t *this)
{
  uint64_t v3 = this;
  if (*((unsigned char *)this + 280))
  {
    dispatch_assert_queue_V2(this[17]);
    qmi::Client::LocalState::init(void)::$_0::operator()((uint64_t)this);
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_10LocalState4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    block[3] = &__block_descriptor_tmp_67;
    block[4] = this + 1;
    void block[5] = &v3;
    uint64_t v2 = this[3];
    if (this[4]) {
      dispatch_async_and_wait(v2, block);
    }
    else {
      dispatch_sync(v2, block);
    }
  }
}

void qmi::Client::LocalState::create(long long *a1@<X0>, long long *a2@<X1>, char a3@<W2>, NSObject **a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  *a7 = 0xAAAAAAAAAAAAAAAALL;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v14 = operator new(0x180uLL);
  uint64_t v15 = (uint64_t)v14;
  uint64_t v16 = (std::__shared_weak_count *)a6[1];
  uint64_t v19 = *a6;
  unsigned int v20 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::State::State((uint64_t)v14, a1, a2, a3, a4, a5);
  *(void *)uint64_t v15 = &unk_1EF43CF58;
  *(_OWORD *)(v15 + 288) = 0u;
  *(_OWORD *)(v15 + 304) = 0u;
  *(_OWORD *)(v15 + 320) = 0u;
  *(_OWORD *)(v15 + 336) = 0u;
  *(void *)(v15 + 352) = v19;
  *(void *)(v15 + 360) = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(v15 + 368) = 0;
  *(void *)(v15 + 376) = xpc_null_create();
  *a7 = 0xAAAAAAAAAAAAAAAALL;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Client::LocalState>::shared_ptr[abi:ne180100]<qmi::Client::LocalState,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState*)#1},void>(a7, v15);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    uint64_t v17 = *a7;
    uint64_t v21 = v17;
    if (*(unsigned char *)(v17 + 280)) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v17 = *a7;
    uint64_t v21 = v17;
    if (*(unsigned char *)(v17 + 280))
    {
LABEL_8:
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v17 + 136));
      qmi::Client::LocalState::init(void)::$_0::operator()(v17);
      return;
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_10LocalState4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_67;
  block[4] = v17 + 8;
  void block[5] = &v21;
  uint64_t v18 = *(NSObject **)(v17 + 24);
  if (*(void *)(v17 + 32)) {
    dispatch_async_and_wait(v18, block);
  }
  else {
    dispatch_sync(v18, block);
  }
}

void sub_1A10E0B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10E0B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1A10E0BAC(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void qmi::Client::LocalState::~LocalState(xpc_object_t *this)
{
  *this = &unk_1EF43CF58;
  qmi::Client::State::sendStopMessage_sync((qmi::Client::State *)this);
  xpc_release(this[47]);
  uint64_t v2 = this[46];
  this[46] = 0;
  this[47] = 0;
  if (v2)
  {
    uint64_t v3 = v2[1];
    if (v3)
    {
      uint64_t v4 = v2[2];
      uint64_t v5 = (void *)v2[1];
      if (v4 != v3)
      {
        uint64_t v6 = v2[2];
        do
        {
          xpc_object_t v7 = *(void **)(v6 - 8);
          v6 -= 8;
          xpc_release(v7);
          *(void *)(v4 - 8) = 0;
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        uint64_t v5 = (void *)v2[1];
      }
      v2[2] = v3;
      operator delete(v5);
    }
    operator delete(v2);
  }
  uint64_t v8 = (std::__shared_weak_count *)this[45];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)this[43];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)this[41];
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  int v11 = (std::__shared_weak_count *)this[39];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_object_t v12 = (std::__shared_weak_count *)this[37];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  qmi::Client::State::~State((qmi::Client::State *)this);
}

{
  void *v1;
  uint64_t vars8;

  qmi::Client::LocalState::~LocalState(this);

  operator delete(v1);
}

uint64_t qmi::Client::LocalState::handleNewClient(qmi::Client::State *this)
{
  if (*((unsigned char *)this + 144)) {
    qmi::Client::State::sendStartMessage_sync(this);
  }
  if (*((void *)this + 28) != *((void *)this + 29)) {
    qmi::Client::State::sendIndWakeSet_sync(this);
  }
  uint64_t v2 = (void *)*((void *)this + 46);
  if (v2)
  {
    uint64_t v3 = v2[1];
    uint64_t v4 = v2[2];
    if (v3 == v4)
    {
      *((void *)this + 46) = 0;
      uint64_t v5 = (char *)v2[1];
      if (!v5)
      {
LABEL_17:
        operator delete(v2);
        return 1;
      }
LABEL_12:
      uint64_t v6 = (char *)v2[2];
      xpc_object_t v7 = v5;
      if (v6 != v5)
      {
        uint64_t v8 = (char *)v2[2];
        do
        {
          uint64_t v9 = (void *)*((void *)v8 - 1);
          v8 -= 8;
          xpc_release(v9);
          *((void *)v6 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
          uint64_t v6 = v8;
        }
        while (v8 != v5);
        xpc_object_t v7 = (char *)v2[1];
      }
      v2[2] = v5;
      operator delete(v7);
      goto LABEL_17;
    }
    do
    {
      (*(void (**)(qmi::Client::State *, uint64_t))(*(void *)this + 56))(this, v3);
      v3 += 8;
    }
    while (v3 != v4);
    uint64_t v2 = (void *)*((void *)this + 46);
    *((void *)this + 46) = 0;
    if (v2)
    {
      uint64_t v5 = (char *)v2[1];
      if (!v5) {
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
  return 1;
}

uint64_t qmi::Client::LocalState::sendNowOrDrop_sync(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 360);
  if (!v4 || (v29 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v5 = *(void *)(a1 + 352), (v28 = v5) == 0))
  {
    uint64_t v14 = *(NSObject **)(a1 + 40);
    uint64_t v12 = 0;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    uint64_t v15 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    uint64_t v16 = (char *)MEMORY[0x1A622CB80](*a2);
    memset(__dst, 170, sizeof(__dst));
    size_t v17 = strlen(v16);
    if (v17 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = (void *)v17;
    if (v17 >= 0x17)
    {
      uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17) {
        uint64_t v20 = v17 | 7;
      }
      uint64_t v21 = v20 + 1;
      uint64_t v19 = (void **)operator new(v20 + 1);
      __dst[1] = v18;
      __dst[2] = (void *)(v21 | 0x8000000000000000);
      __dst[0] = v19;
    }
    else
    {
      HIBYTE(__dst[2]) = v17;
      uint64_t v19 = __dst;
      if (!v17) {
        goto LABEL_26;
      }
    }
    memcpy(v19, v16, (size_t)v18);
LABEL_26:
    *((unsigned char *)v18 + (void)v19) = 0;
    free(v16);
    xpc_object_t v22 = __dst;
    if (SHIBYTE(__dst[2]) < 0) {
      xpc_object_t v22 = (void **)__dst[0];
    }
    *(_DWORD *)long long buf = 136315394;
    xpc_object_t v31 = v15;
    __int16 v32 = 2080;
    xpc_object_t v33 = v22;
    _os_log_impl(&dword_1A10C7000, v14, OS_LOG_TYPE_DEFAULT, "#E [%s] ****** Client message DROPPED because of invalid local connection. Message: %s", buf, 0x16u);
    if (SHIBYTE(__dst[2]) < 0) {
      operator delete(__dst[0]);
    }
    goto LABEL_30;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 328);
  if (!v6 || (int v7 = *(unsigned __int8 *)(v5 + 112), v8 = std::__shared_weak_count::lock(v6), (__dst[1] = v8) == 0))
  {
LABEL_30:
    uint64_t v12 = 0;
    goto LABEL_31;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void **)(a1 + 320);
  __dst[0] = v10;
  if (v7) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v12 = !v11;
  if (!v11)
  {
    uint64_t v13 = (void *)*a2;
    xpc_object_t object = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v25 = v10[3];
    if (!v25) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v25 + 48))(v25, &object);
    xpc_release(object);
    xpc_object_t object = 0;
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_31:
  uint64_t v23 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return v12;
}

void sub_1A10E114C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void qmi::Client::LocalState::sendConnectMessage_sync(qmi::Client::LocalState *this)
{
  uint64_t v2 = (unsigned char *)*((void *)this + 46);
  if (v2)
  {
    if (*v2) {
      return;
    }
  }
  else
  {
    uint64_t v3 = operator new(0x20uLL);
    *uint64_t v3 = 0u;
    v3[1] = 0u;
    *((void *)this + 46) = v3;
  }
  (*(void (**)(qmi::Client::LocalState *, uint64_t))(*(void *)this + 16))(this, 1);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A622CC50](v4) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  uint64_t v6 = (char *)this + 80;
  if (*((char *)this + 103) < 0) {
    uint64_t v6 = *(const char **)v6;
  }
  xpc_object_t v7 = xpc_string_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, "connect", v7);
  xpc_object_t v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  xpc_object_t v9 = xpc_int64_create(*((unsigned __int8 *)this + 104));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, "svc_type", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  BOOL v11 = (char *)this + 56;
  if (*((char *)this + 79) < 0) {
    BOOL v11 = *(const char **)v11;
  }
  xpc_object_t v12 = xpc_string_create(v11);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, "name", v12);
  xpc_object_t v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v14 || (uint64_t v15 = *((void *)this + 1), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v17 = v16;
  p_shared_weak_owners = &v16->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v17);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v19 = operator new(0x38uLL);
  v19[1] = 0;
  v19[2] = 0;
  *uint64_t v19 = &unk_1EF43D378;
  void v19[3] = &unk_1EF43D3C8;
  v19[4] = v15;
  v19[5] = v17;
  void v19[6] = v19 + 3;
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 39);
  *((void *)this + 38) = v19 + 3;
  *((void *)this + 39) = v19;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 45);
    if (!v21) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 45);
    if (!v21) {
      goto LABEL_58;
    }
  }
  xpc_object_t v22 = std::__shared_weak_count::lock(v21);
  unint64_t v44 = v22;
  if (v22)
  {
    uint64_t v23 = (void *)*((void *)this + 44);
    if (v23)
    {
      xpc_object_t v24 = (std::__shared_weak_count *)*((void *)this + 2);
      if (!v24 || (uint64_t v25 = *((void *)this + 1), (v26 = std::__shared_weak_count::lock(v24)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      xpc_object_t v27 = v26;
      uint64_t v43 = v25;
      atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v27);
      }
      uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 37);
      uint64_t v42 = *((void *)this + 36);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = *((void *)this + 38);
      uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 39);
      uint64_t v41 = v29;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v5)
      {
        xpc_retain(v5);
        xpc_object_t v31 = v5;
        atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!v30) {
          goto LABEL_41;
        }
      }
      else
      {
        xpc_object_t v31 = xpc_null_create();
        atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!v30)
        {
LABEL_41:
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          __int16 v32 = (std::__shared_weak_count *)v23[2];
          if (!v32 || (uint64_t v33 = v23[1], (v34 = std::__shared_weak_count::lock(v32)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          long long v35 = v34;
          int v36 = operator new(0x40uLL);
          *int v36 = v23;
          v36[1] = v31;
          xpc_object_t object = xpc_null_create();
          v36[2] = v43;
          v36[3] = v27;
          v36[4] = v41;
          v36[5] = v30;
          v36[6] = v42;
          v36[7] = v28;
          uint64_t v37 = v23[3];
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          int64_t v38 = operator new(0x18uLL);
          *int64_t v38 = v36;
          v38[1] = v33;
          v38[2] = v35;
          dispatch_async_f(v37, v38, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BBServerConnection>::execute_wrapped<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}>(qmi::Client::State&&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State>)::{lambda(void *)#1}::__invoke);
          if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
          xpc_release(object);
          if (v30) {
            std::__shared_weak_count::__release_weak(v30);
          }
          if (v28) {
            std::__shared_weak_count::__release_weak(v28);
          }
          std::__shared_weak_count::__release_weak(v27);
          unint64_t v39 = v44;
          if (!v44 || atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            goto LABEL_58;
          }
          goto LABEL_57;
        }
      }
      atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_41;
    }
    unint64_t v39 = v22;
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_57:
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
LABEL_58:
  std::__shared_weak_count::__release_weak(v17);
  xpc_release(v5);
}

void sub_1A10E1730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::__release_weak(v6);
  xpc_release(v5);
  _Unwind_Resume(a1);
}

uint64_t qmi::Client::LocalState::setConnecting(uint64_t this, char a2)
{
  **(unsigned char **)(this + 368) = a2;
  return this;
}

uint64_t qmi::Client::Client(uint64_t a1, long long *a2, char a3, NSObject **a4, long long *a5, void *a6)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)a1 = 0u;
  qmi::sFixupServerConnection(&object, a6);
  qmi::Client::XPCState::create(a2, a5, &object, a3, a4, (uint64_t *)&v16);
  long long v11 = v16;
  long long v16 = 0uLL;
  xpc_object_t v12 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_object_t v13 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  xpc_release(object);
  return a1;
}

void sub_1A10E18F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v11);
  xpc_object_t v13 = *(std::__shared_weak_count **)(v10 + 8);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(a1);
}

xpc_object_t qmi::sFixupServerConnection(void *a1, void *a2)
{
  if (MEMORY[0x1A622CC50](*a2) == MEMORY[0x1E4F14578])
  {
    xpc_object_t v5 = (void *)*a2;
    *a1 = *a2;
    if (v5) {
      return xpc_retain(v5);
    }
    goto LABEL_6;
  }
  xpc_object_t result = xpc_connection_create_mach_service("com.apple.commcenter.atcs.xpc", 0, 2uLL);
  *a1 = result;
  if (!result)
  {
LABEL_6:
    xpc_object_t result = xpc_null_create();
    *a1 = result;
  }
  return result;
}

uint64_t qmi::Client::Client(uint64_t a1, long long *a2, char a3, NSObject **a4, long long *a5, void *a6, void *a7)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)a1 = 0u;
  qmi::sFixupServerConnection(&object, a7);
  qmi::Client::XPCState::create(a2, a5, &object, a3, a4, a6, (uint64_t *)&v18);
  long long v13 = v18;
  long long v18 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  xpc_release(object);
  return a1;
}

void sub_1A10E1AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v11);
  long long v13 = *(std::__shared_weak_count **)(v10 + 8);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t qmi::Client::Client(uint64_t a1, long long *a2, char a3, NSObject **a4, long long *a5, uint64_t *a6)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v7 = a6[1];
  uint64_t v13 = *a6;
  uint64_t v14 = (std::__shared_weak_count *)v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::Client::LocalState::create(a2, a5, a3, a4, &v13, (uint64_t *)&v15);
  long long v8 = v15;
  long long v15 = 0uLL;
  xpc_object_t v9 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = v14;
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_1A10E1CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v10);
  xpc_object_t v12 = *(std::__shared_weak_count **)(v9 + 8);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t qmi::Client::Client(uint64_t a1, long long *a2, char a3, NSObject **a4, long long *a5, void *a6, uint64_t *a7)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v8 = a7[1];
  uint64_t v14 = *a7;
  long long v15 = (std::__shared_weak_count *)v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::Client::LocalState::create(a2, a5, a3, a4, a6, &v14, (uint64_t *)&v16);
  long long v9 = v16;
  long long v16 = 0uLL;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_object_t v12 = v15;
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_1A10E1E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v10);
  xpc_object_t v12 = *(std::__shared_weak_count **)(v9 + 8);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t qmi::Client::Client(uint64_t a1, void *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    xpc_object_t v5 = std::__shared_weak_count::lock(v3);
    *(void *)(a1 + 24) = v5;
    if (v5) {
      *(void *)(a1 + 16) = *a2;
    }
  }
  return a1;
}

{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    xpc_object_t v5 = std::__shared_weak_count::lock(v3);
    *(void *)(a1 + 24) = v5;
    if (v5) {
      *(void *)(a1 + 16) = *a2;
    }
  }
  return a1;
}

void qmi::Client::~Client(qmi::Client *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
}

uint64_t qmi::Client::operator std::weak_ptr<qmi::Client::State>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 24);
  *a2 = *(void *)(result + 16);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void qmi::Client::create(dispatch_object_t object@<X2>, xpc_object_t a2@<X4>, long long *a3@<X0>, char a4@<W1>, long long *a5@<X3>, uint64_t a6@<X8>)
{
  uint64_t v13 = object;
  if (object) {
    dispatch_retain(object);
  }
  xpc_object_t v12 = a2;
  if (a2)
  {
    xpc_retain(a2);
  }
  else
  {
    a2 = xpc_null_create();
    xpc_object_t v12 = a2;
  }
  qmi::Client::Client(a6, a3, a4, &v13, a5, &v12);
  xpc_release(a2);
  if (object)
  {
    dispatch_release(object);
  }
}

void sub_1A10E2100(_Unwind_Exception *a1)
{
  xpc_release(v2);
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void qmi::Client::create(long long *a1@<X0>, char a2@<W1>, NSObject **a3@<X2>, long long *a4@<X3>, xpc_object_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *a3;
  uint64_t v14 = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  xpc_object_t v12 = *a5;
  xpc_object_t v13 = v12;
  if (v12)
  {
    xpc_retain(v12);
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v13 = v12;
  }
  qmi::Client::Client(a6, a1, a2, &v14, a4, &v13);
  xpc_release(v12);
  if (v11)
  {
    dispatch_release(v11);
  }
}

void sub_1A10E2200(_Unwind_Exception *a1)
{
  xpc_release(v2);
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void qmi::Client::createWithQueue(long long *a1@<X0>, char a2@<W1>, NSObject **a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *a3;
  long long v16 = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  *(_OWORD *)long long v15 = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  xpc_object_t v12 = xpc_null_create();
  if (MEMORY[0x1A622CC50]() == MEMORY[0x1E4F14578])
  {
    xpc_object_t v14 = v12;
    if (v12)
    {
      xpc_retain(v12);
      mach_service = v12;
      goto LABEL_9;
    }
  }
  else
  {
    mach_service = xpc_connection_create_mach_service("com.apple.commcenter.atcs.xpc", 0, 2uLL);
    xpc_object_t v14 = mach_service;
    if (mach_service) {
      goto LABEL_9;
    }
  }
  mach_service = xpc_null_create();
  xpc_object_t v14 = mach_service;
LABEL_9:
  qmi::Client::Client(a6, a1, a2, &v16, a4, v15, &v14);
  xpc_release(mach_service);
  xpc_release(v12);
  if (v15[1]) {
    std::__shared_weak_count::__release_weak(v15[1]);
  }
  if (v11)
  {
    dispatch_release(v11);
  }
}

void sub_1A10E2380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  xpc_release(v14);
  xpc_release(v13);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    if (!v12) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  dispatch_release(v12);
  _Unwind_Resume(a1);
}

void qmi::Client::createWithQueue(long long *a1@<X0>, char a2@<W1>, NSObject **a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, xpc_object_t *a6@<X5>, uint64_t a7@<X8>)
{
  xpc_object_t v13 = *a3;
  size_t v17 = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  *(_OWORD *)long long v16 = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  xpc_object_t v14 = *a6;
  xpc_object_t v15 = v14;
  if (v14)
  {
    xpc_retain(v14);
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    xpc_object_t v15 = v14;
  }
  qmi::Client::Client(a7, a1, a2, &v17, a4, v16, &v15);
  xpc_release(v14);
  if (v16[1]) {
    std::__shared_weak_count::__release_weak(v16[1]);
  }
  if (v13)
  {
    dispatch_release(v13);
  }
}

void sub_1A10E24D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  xpc_release(v13);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    if (!v12) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  dispatch_release(v12);
  _Unwind_Resume(a1);
}

void qmi::Client::createWithQueueLocal(long long *a1@<X0>, char a2@<W1>, NSObject **a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  xpc_object_t v13 = *a3;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  *(_OWORD *)uint64_t v19 = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  if (*(void *)a6
  {
    xpc_object_t v15 = *(std::__shared_weak_count **)(a6 + 8);
    size_t v17 = v14;
    long long v18 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    xpc_object_t v15 = 0;
    size_t v17 = 0;
    long long v18 = 0;
  }
  qmi::Client::Client(a7, a1, a2, &object, a4, v19, (uint64_t *)&v17);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v19[1]) {
    std::__shared_weak_count::__release_weak(v19[1]);
  }
  long long v16 = object;
  if (object)
  {
    dispatch_release(v16);
  }
}

void sub_1A10E26A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    if (!v12) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  dispatch_release(v12);
  _Unwind_Resume(a1);
}

void qmi::Client::set(qmi::Client *this, const char *a2, int a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    xpc_object_t xdict = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t xdict = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A622CC50](v7) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v8;
LABEL_9:
  xpc_release(v7);
  xpc_object_t v9 = xpc_int64_create(a3);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_object_t v10 = xdict;
  xpc_dictionary_set_value(xdict, a2, v9);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v11);
  qmi::Client::State::send(*((void **)this + 2), &xdict);
  xpc_release(v10);
}

void qmi::Client::set(qmi::Client *this, const char *a2, unsigned int a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    xpc_object_t xdict = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t xdict = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A622CC50](v7) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  xpc_object_t xdict = v8;
LABEL_9:
  xpc_release(v7);
  xpc_object_t v9 = xpc_int64_create(a3);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_object_t v10 = xdict;
  xpc_dictionary_set_value(xdict, a2, v9);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v11);
  qmi::Client::State::send(*((void **)this + 2), &xdict);
  xpc_release(v10);
}

void qmi::Client::setClientHandle(uint64_t a1, uint64_t *a2)
{
}

void qmi::Client::stop(qmi::Client::State **this)
{
}

void qmi::Client::start(qmi::Client::State **this)
{
}

void qmi::Client::release(qmi::Client *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void qmi::Client::setHandler(uint64_t a1, int a2, void *aBlock)
{
  if (a2 == 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Low power handler cannot take an XPC object paramter");
    __cxa_throw(exception, (struct type_info *)off_1E5A40DB8, MEMORY[0x1E4FBA1E8]);
  }
  xpc_object_t v4 = *(void **)(a1 + 16);
  if (aBlock)
  {
    xpc_object_t v5 = _Block_copy(aBlock);
    xpc_object_t v7 = v5;
    qmi::Client::State::setHandler(v4, a2, &v7);
    if (v5) {
      _Block_release(v5);
    }
  }
  else
  {
    xpc_object_t v7 = 0;
    qmi::Client::State::setHandler(v4, a2, &v7);
  }
}

void sub_1A10E2A98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  xpc_object_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

void qmi::Client::setHandler(uint64_t a1, unsigned int a2, void *aBlock)
{
  if (a2 <= 5)
  {
    if (a2 != 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "This event cannot take a dispatch parameter");
      __cxa_throw(exception, (struct type_info *)off_1E5A40DB8, MEMORY[0x1E4FBA1E8]);
    }
    uint64_t v3 = *(void **)(a1 + 16);
    if (aBlock)
    {
      xpc_object_t v4 = _Block_copy(aBlock);
      xpc_object_t v6 = v4;
      qmi::Client::State::setHandler(v3, 3, &v6);
      if (v4) {
        _Block_release(v4);
      }
    }
    else
    {
      xpc_object_t v6 = 0;
      qmi::Client::State::setHandler(v3, 3, &v6);
    }
  }
}

void sub_1A10E2BB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void qmi::Client::setHandler(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 <= 5)
  {
    if (a2 == 3)
    {
      if (a3)
      {
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = ___ZNK3qmi6Client10setHandlerENS0_5EventEU13block_pointerFvvE_block_invoke_24;
        aBlock[3] = &__block_descriptor_tmp_28;
        aBlock[4] = a3;
        xpc_object_t v4 = *(void **)(a1 + 16);
        xpc_object_t v5 = _Block_copy(aBlock);
        xpc_object_t v9 = v5;
        qmi::Client::State::setHandler(v4, 3, &v9);
        if (v5) {
          _Block_release(v5);
        }
      }
      else
      {
        xpc_object_t v6 = *(void **)(a1 + 16);
        xpc_object_t v9 = 0;
        qmi::Client::State::setHandler(v6, 3, &v9);
      }
    }
    else if (a3)
    {
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 1107296256;
      void v8[2] = ___ZNK3qmi6Client10setHandlerENS0_5EventEU13block_pointerFvvE_block_invoke;
      v8[3] = &__block_descriptor_tmp_23;
      v8[4] = a3;
      qmi::Client::setHandler(a1, a2, v8);
    }
    else
    {
      uint64_t v3 = *(void **)(a1 + 16);
      xpc_object_t v9 = 0;
      qmi::Client::State::setHandler(v3, a2, &v9);
    }
  }
}

void sub_1A10E2D58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3qmi6Client10setHandlerENS0_5EventEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_e8_32b(uint64_t a1)
{
}

uint64_t ___ZNK3qmi6Client10setHandlerENS0_5EventEU13block_pointerFvvE_block_invoke_24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void qmi::Client::setIndHandler(uint64_t a1, __int16 a2, void *aBlock)
{
  xpc_object_t v4 = *(void **)(a1 + 16);
  if (aBlock)
  {
    xpc_object_t v5 = _Block_copy(aBlock);
    xpc_object_t v6 = v5;
    qmi::Client::State::setIndHandler(v4, a2, &v6);
    if (v5) {
      _Block_release(v5);
    }
  }
  else
  {
    xpc_object_t v6 = 0;
    qmi::Client::State::setIndHandler(v4, a2, &v6);
  }
}

void qmi::Client::setIndShouldWake(qmi::Client::State **this, __int16 a2, char a3)
{
}

uint64_t qmi::Client::getName(qmi::Client *this)
{
  return *((void *)this + 2) + 56;
}

uint64_t qmi::Client::getSvcType(qmi::Client *this)
{
  return *(unsigned __int8 *)(*((void *)this + 2) + 104);
}

void qmi::Client::pushSendBarrier(qmi::Client *this)
{
  uint64_t v2 = dispatch_semaphore_create(0);
  uint64_t v3 = v2;
  xpc_object_t v4 = *(NSObject **)(*((void *)this + 2) + 24);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  v5[2] = ___ZNK3qmi6Client15pushSendBarrierEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_30;
  v5[4] = this;
  dispatch_object_t object = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  dispatch_sync(v4, v5);
  dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (object) {
    dispatch_release(object);
  }
  if (v3) {
    dispatch_release(v3);
  }
}

void ___ZNK3qmi6Client15pushSendBarrierEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (xpc_object_t *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 16) + 40))(*(void *)(*(void *)(a1 + 32) + 16));
  uint64_t v3 = (_xpc_connection_s *)*v2;
  if (*v2) {
    xpc_retain(*v2);
  }
  else {
    uint64_t v3 = (_xpc_connection_s *)xpc_null_create();
  }
  if (MEMORY[0x1A622CC50](v3) == MEMORY[0x1E4F14578])
  {
    barrier[0] = MEMORY[0x1E4F143A8];
    barrier[1] = 1174405120;
    barrier[2] = ___ZNK3qmi6Client15pushSendBarrierEv_block_invoke_2;
    barrier[3] = &__block_descriptor_tmp_29_0;
    xpc_object_t v4 = *(NSObject **)(a1 + 40);
    dispatch_object_t object = v4;
    if (v4) {
      dispatch_retain(v4);
    }
    xpc_connection_send_barrier(v3, barrier);
    if (object) {
      dispatch_release(object);
    }
  }
  else
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }
  xpc_release(v3);
}

void sub_1A10E302C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  xpc_release(v14);
  _Unwind_Resume(a1);
}

intptr_t ___ZNK3qmi6Client15pushSendBarrierEv_block_invoke_2(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void __copy_helper_block_e8_32c25_ZTSN8dispatch9semaphoreE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_32c25_ZTSN8dispatch9semaphoreE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 32);
  if (v1) {
    dispatch_release(v1);
  }
}

void __copy_helper_block_e8_40c25_ZTSN8dispatch9semaphoreE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_40c25_ZTSN8dispatch9semaphoreE(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

uint64_t qmi::Client::XPCState::getServerConnection(qmi::Client::XPCState *this)
{
  return (uint64_t)this + 128;
}

uint64_t qmi::Client::LocalState::getServerConnection(qmi::Client::LocalState *this)
{
  return (uint64_t)this + 376;
}

uint64_t std::__split_buffer<qmi::Client::State::Transaction>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    xpc_object_t v4 = *(atomic_uint **)(i - 16);
    if (v4)
    {
      int add = atomic_fetch_add(v4 + 2, 0xFFFFFFFF);
      if (add <= 0)
      {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
      }
      else if (add == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
    }
    xpc_object_t v6 = *(const void **)(i - 8);
    if (v6) {
      _Block_release(v6);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<qmi::Client::State::Transaction>,std::reverse_iterator<qmi::Client::State::Transaction*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    for (uint64_t i = *(void *)(*(void *)(a1 + 8) + 8); v3 != i; v3 += 24)
    {
      xpc_object_t v5 = *(atomic_uint **)(v3 + 8);
      if (v5)
      {
        int add = atomic_fetch_add(v5 + 2, 0xFFFFFFFF);
        if (add <= 0)
        {
          _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
        }
        else if (add == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
        }
      }
      xpc_object_t v7 = *(const void **)(v3 + 16);
      if (v7) {
        _Block_release(v7);
      }
    }
  }
  return a1;
}

xpc_object_t *std::vector<xpc::dict>::__emplace_back_slow_path<xpc::dict const&>(xpc_object_t **a1, void *a2)
{
  uint64_t v2 = a1[1] - *a1;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (!v7)
  {
    xpc_object_t v8 = 0;
    xpc_object_t v9 = (xpc_object_t *)(8 * v2);
    xpc_object_t *v9 = a2;
    if (a2) {
      goto LABEL_10;
    }
LABEL_20:
    xpc_object_t *v9 = xpc_null_create();
    xpc_object_t v10 = &v8[8 * v7];
    xpc_object_t v11 = v9 + 1;
    xpc_object_t v13 = *a1;
    xpc_object_t v12 = a1[1];
    if (v12 != *a1) {
      goto LABEL_11;
    }
LABEL_21:
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (xpc_object_t *)v10;
    if (!v12) {
      return v11;
    }
    goto LABEL_17;
  }
  if (v7 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  xpc_object_t v8 = (char *)operator new(8 * v7);
  xpc_object_t v9 = (xpc_object_t *)&v8[8 * v2];
  xpc_object_t *v9 = a2;
  if (!a2) {
    goto LABEL_20;
  }
LABEL_10:
  xpc_retain(a2);
  xpc_object_t v10 = &v8[8 * v7];
  xpc_object_t v11 = v9 + 1;
  xpc_object_t v13 = *a1;
  xpc_object_t v12 = a1[1];
  if (v12 == *a1) {
    goto LABEL_21;
  }
LABEL_11:
  xpc_object_t v14 = v12;
  do
  {
    xpc_object_t v15 = *--v14;
    *--xpc_object_t v9 = v15;
    *(v12 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = xpc_null_create();
    xpc_object_t v12 = v14;
  }
  while (v14 != v13);
  xpc_object_t v12 = *a1;
  long long v16 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = (xpc_object_t *)v10;
  if (v16 != v12)
  {
    size_t v17 = v16;
    do
    {
      long long v18 = *--v17;
      xpc_release(v18);
      *(v16 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
      long long v16 = v17;
    }
    while (v17 != v12);
  }
  if (v12) {
LABEL_17:
  }
    operator delete(v12);
  return v11;
}

void std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>>>::destroy(a1[1]);
    uint64_t v2 = (const void *)a1[5];
    if (v2) {
      _Block_release(v2);
    }
    operator delete(a1);
  }
}

void ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS3_15setClientHandleERKNSt3__18weak_ptrIvEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v1;
  uint64_t v2 = (uint64_t *)v1[1];
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v3 + 272);
  *(void *)(v3 + 264) = v5;
  *(void *)(v3 + 272) = v4;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  *(unsigned char *)(v3 + 256) = *(void *)(v1[1] + 8) != 0;
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::stop(void)::$_0>(qmi::Client::State::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::stop(void)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(qmi::Client::State ***)a1;
  qmi::Client::State::sendStopMessage_sync(**(qmi::Client::State ***)a1);
  operator delete(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void *)a1;
  }
  else
  {
    uint64_t v4 = (void *)a1;
  }
  operator delete(v4);
}

void sub_1A10E35C8(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::start(void)::$_0>(qmi::Client::State::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::start(void)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::start(void)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(qmi::Client::State ***)a1;
  uint64_t v3 = **(qmi::Client::State ***)a1;
  if (!*((unsigned char *)v3 + 144))
  {
    *((unsigned char *)v3 + 144) = 1;
    qmi::Client::State::sendStartMessage_sync(v3);
  }
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = a1;
  }
  else
  {
    uint64_t v5 = a1;
  }
  operator delete(v5);
}

void sub_1A10E36F8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*((unsigned char *)a1 + 16)) {
        BOOL v4 = *(void *)a1 == 0;
      }
      else {
        BOOL v4 = 0;
      }
      if (!v4) {
        goto LABEL_11;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (!*((unsigned char *)a1 + 16)) {
LABEL_11:
  }
    (*(void (**)(void))(*((void *)a1 + 3) + 16))();
LABEL_12:
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  xpc_release(*((xpc_object_t *)a1 + 4));
  *((void *)a1 + 4) = 0;
  uint64_t v5 = (const void *)*((void *)a1 + 3);
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  operator delete(a1);
}

void sub_1A10E3860(_Unwind_Exception *a1)
{
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(*(xpc_object_t *)(v1 + 32));
  *(void *)(v1 + 32) = 0;
  BOOL v4 = *(const void **)(v1 + 24);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(void *)(v2 + 40) = 0;
    uint64_t v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    BOOL v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    if (*(void *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(void *)v2) {
        dispatch_release(*(dispatch_object_t *)v2);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::async<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(unsigned char *)(a1 + 24)) {
        BOOL v4 = *(void *)(a1 + 8) == 0;
      }
      else {
        BOOL v4 = 0;
      }
      if (v4) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (!*(unsigned char *)(a1 + 24)) {
LABEL_11:
  }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_12:
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100](&v6);
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100](&v6);
}

void sub_1A10E3A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_2>(dispatch_group_s *,dispatch_queue_s *,qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(qmi::Client::State **)a1;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v3)
  {
    BOOL v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      if (*((unsigned char *)a1 + 24)) {
        BOOL v5 = *((void *)a1 + 1) == 0;
      }
      else {
        BOOL v5 = 0;
      }
      if (v5) {
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  if (*((unsigned char *)a1 + 24)) {
    goto LABEL_13;
  }
LABEL_11:
  if (*((unsigned char *)v2 + 144)) {
    qmi::Client::State::sendStartMessage_sync(v2);
  }
LABEL_13:
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  operator delete(a1);
}

void sub_1A10E3B98(_Unwind_Exception *a1)
{
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  BOOL v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(void *)(v2 + 40) = 0;
    uint64_t v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    BOOL v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    if (*(void *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(void *)v2) {
        dispatch_release(*(dispatch_object_t *)v2);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::async<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(unsigned char *)(a1 + 24)) {
        BOOL v4 = *(void *)(a1 + 8) == 0;
      }
      else {
        BOOL v4 = 0;
      }
      if (v4) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (!*(unsigned char *)(a1 + 24)) {
LABEL_11:
  }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_12:
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v6);
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v6);
}

void sub_1A10E3D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if ((*(char *)(v2 + 63) & 0x80000000) == 0)
  {
    uint64_t v3 = *(const void **)(v2 + 32);
    if (!v3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  operator delete(*(void **)(v2 + 40));
  uint64_t v3 = *(const void **)(v2 + 32);
  if (v3) {
LABEL_6:
  }
    _Block_release(v3);
LABEL_7:
  BOOL v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  if (*(void *)v2)
  {
    dispatch_group_leave(*(dispatch_group_t *)v2);
    if (*(void *)v2) {
      dispatch_release(*(dispatch_object_t *)v2);
    }
  }
  operator delete((void *)v2);
  return a1;
}

uint64_t *dispatch::async<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(unsigned char *)(a1 + 24)) {
        BOOL v4 = *(void *)(a1 + 8) == 0;
      }
      else {
        BOOL v4 = 0;
      }
      if (v4) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (!*(unsigned char *)(a1 + 24)) {
LABEL_11:
  }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_12:
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v6);
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v6);
}

void sub_1A10E3F38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::send(xpc::dict const&)::$_0>(qmi::Client::State::send(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::send(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::send(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (xpc_object_t *)(*a1 + 1);
  (*(void (**)(void, xpc_object_t *))(*(void *)**a1 + 48))(**a1, v3);
  xpc_release(*v3);
  operator delete(v2);
  BOOL v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    BOOL v5 = a1;
  }
  else
  {
    BOOL v5 = a1;
  }
  operator delete(v5);
}

void sub_1A10E4080(_Unwind_Exception *a1)
{
  BOOL v4 = v2;
  xpc_release(*v4);
  operator delete(v3);
  uint64_t v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS3_4sendERNS2_9SendProxyEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  uint64_t result = *(unsigned __int16 *)(v1 + 146);
  if ((((_WORD)result + 1) & 0xFFFE) != 0) {
    __int16 v3 = result + 1;
  }
  else {
    __int16 v3 = 1;
  }
  *(_WORD *)(v1 + 146) = v3;
  return result;
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFtvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_WORD **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFtvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_WORD **)(a1 + 32) = result;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0>(qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  switch(*(_DWORD *)(*(void *)a1 + 8))
  {
    case 1:
      BOOL v4 = (void *)v2[2];
      if (v4) {
        BOOL v4 = _Block_copy(v4);
      }
      BOOL v5 = *(const void **)(v3 + 184);
      *(void *)(v3 + 184) = v4;
      if (v5) {
        goto LABEL_5;
      }
      goto LABEL_32;
    case 2:
      uint64_t v6 = (void *)v2[2];
      if (v6) {
        uint64_t v6 = _Block_copy(v6);
      }
      BOOL v5 = *(const void **)(v3 + 176);
      *(void *)(v3 + 176) = v6;
      if (v5) {
LABEL_5:
      }
        _Block_release(v5);
      goto LABEL_32;
    case 4:
      unint64_t v7 = (void *)v2[2];
      if (v7) {
        unint64_t v7 = _Block_copy(v7);
      }
      xpc_object_t v8 = *(const void **)(v3 + 48);
      *(void *)(v3 + 48) = v7;
      if (v8) {
        _Block_release(v8);
      }
      if (!*(unsigned char *)(v3 + 144)) {
        goto LABEL_32;
      }
      xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v10 = v9;
      if (v9)
      {
        xpc_object_t xdict = v9;
      }
      else
      {
        xpc_object_t v10 = xpc_null_create();
        xpc_object_t xdict = v10;
        if (!v10)
        {
          xpc_object_t v14 = xpc_null_create();
          xpc_object_t v10 = 0;
          goto LABEL_28;
        }
      }
      if (MEMORY[0x1A622CC50](v10) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v10);
        goto LABEL_29;
      }
      xpc_object_t v14 = xpc_null_create();
LABEL_28:
      xpc_object_t xdict = v14;
LABEL_29:
      xpc_release(v10);
      xpc_object_t v15 = xpc_BOOL_create(v2[2] != 0);
      if (!v15) {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_object_t v16 = xdict;
      xpc_dictionary_set_value(xdict, "exit_low_power", v15);
      xpc_object_t v17 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v17);
      qmi::Client::State::send((void *)v3, &xdict);
      xpc_release(v16);
LABEL_32:
      long long v18 = (const void *)v2[2];
      if (v18) {
        _Block_release(v18);
      }
      operator delete(v2);
      uint64_t v19 = (std::__shared_weak_count *)*((void *)a1 + 2);
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      operator delete(a1);
      return;
    case 5:
      xpc_object_t v11 = (void *)v2[2];
      if (v11) {
        xpc_object_t v11 = _Block_copy(v11);
      }
      xpc_object_t v12 = *(const void **)(v3 + 192);
      *(void *)(v3 + 192) = v11;
      if (v12) {
        _Block_release(v12);
      }
      if (!*(void *)(v3 + 112))
      {
        xpc_object_t v13 = (void *)MEMORY[0x1E4F14528];
        xpc_retain(MEMORY[0x1E4F14528]);
        xpc_object_t v20 = v13;
        xpc_retain(v13);
        xpc_object_t xdict = 0;
        qmi::Client::State::sendServerFailure_sync(v3, &v20, (NSObject **)&xdict);
        xpc_release(MEMORY[0x1E4F14528]);
        xpc_release(MEMORY[0x1E4F14528]);
      }
      goto LABEL_32;
    default:
      goto LABEL_32;
  }
}

uint64_t *std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 40);
    if (v3) {
      _Block_release(v3);
    }
    BOOL v4 = *(std::__shared_weak_count **)(v2 + 24);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    BOOL v5 = *(NSObject **)(v2 + 8);
    if (v5)
    {
      dispatch_group_leave(v5);
      uint64_t v6 = *(NSObject **)(v2 + 8);
      if (v6) {
        dispatch_release(v6);
      }
    }
    xpc_release(*(xpc_object_t *)v2);
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::async<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(unsigned char *)(a1 + 32)) {
        BOOL v4 = *(void *)(a1 + 16) == 0;
      }
      else {
        BOOL v4 = 0;
      }
      if (v4) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (!*(unsigned char *)(a1 + 32)) {
LABEL_11:
  }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_12:
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100](&v6);
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100](&v6);
}

void sub_1A10E4604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0>(qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)*a1 + 2) == 3)
  {
    uint64_t v3 = *v2;
    BOOL v4 = (void *)v2[2];
    if (v4) {
      BOOL v4 = _Block_copy(v4);
    }
    BOOL v5 = *(const void **)(v3 + 248);
    *(void *)(v3 + 248) = v4;
    if (v5) {
      _Block_release(v5);
    }
    if (*(unsigned char *)(v3 + 144))
    {
      xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v7 = v6;
      if (v6)
      {
        xpc_object_t xdict = v6;
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
        xpc_object_t xdict = v7;
        if (!v7)
        {
          xpc_object_t v8 = xpc_null_create();
          xpc_object_t v7 = 0;
          goto LABEL_14;
        }
      }
      if (MEMORY[0x1A622CC50](v7) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v7);
LABEL_15:
        xpc_release(v7);
        xpc_object_t v9 = xpc_BOOL_create(v2[2] != 0);
        if (!v9) {
          xpc_object_t v9 = xpc_null_create();
        }
        xpc_dictionary_set_value(xdict, "low_power", v9);
        xpc_object_t v10 = xpc_null_create();
        xpc_release(v9);
        xpc_release(v10);
        (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v3 + 56))(v3, &xdict);
        xpc_release(xdict);
        goto LABEL_18;
      }
      xpc_object_t v8 = xpc_null_create();
LABEL_14:
      xpc_object_t xdict = v8;
      goto LABEL_15;
    }
  }
LABEL_18:
  xpc_object_t v11 = (const void *)v2[2];
  if (v11) {
    _Block_release(v11);
  }
  operator delete(v2);
  xpc_object_t v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

void sub_1A10E4830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_object_t v13 = (const void *)v11[2];
  if (v13) {
    _Block_release(v13);
  }
  operator delete(v11);
  xpc_object_t v14 = (std::__shared_weak_count *)v10[2];
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0>(qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  BOOL v4 = (const void *)(*a1)[2];
  if (v4)
  {
    BOOL v5 = _Block_copy(v4);
    xpc_object_t v7 = (void *)(v3 + 208);
    uint64_t v6 = *(void *)(v3 + 208);
    unsigned int v8 = *((unsigned __int16 *)v2 + 4);
    if (v6) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  BOOL v5 = 0;
  xpc_object_t v7 = (void *)(v3 + 208);
  uint64_t v6 = *(void *)(v3 + 208);
  unsigned int v8 = *((unsigned __int16 *)v2 + 4);
  if (!v6)
  {
LABEL_5:
    xpc_object_t v9 = v7;
LABEL_11:
    xpc_object_t v11 = operator new(0x30uLL);
    v11[16] = v8;
    *((void *)v11 + 5) = 0;
    *(void *)xpc_object_t v11 = 0;
    *((void *)v11 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
    *((void *)v11 + 2) = v9;
    void *v7 = v11;
    uint64_t v12 = **(void **)(v3 + 200);
    xpc_object_t v13 = (uint64_t *)v11;
    if (v12)
    {
      *(void *)(v3 + 200) = v12;
      xpc_object_t v13 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 208), v13);
    ++*(void *)(v3 + 216);
    xpc_object_t v14 = (const void *)*((void *)v11 + 5);
    *((void *)v11 + 5) = v5;
    if (!v14) {
      goto LABEL_17;
    }
LABEL_16:
    _Block_release(v14);
    goto LABEL_17;
  }
  while (1)
  {
LABEL_7:
    while (1)
    {
      xpc_object_t v9 = (void *)v6;
      unsigned int v10 = *(unsigned __int16 *)(v6 + 32);
      if (v8 >= v10) {
        break;
      }
      uint64_t v6 = *v9;
      xpc_object_t v7 = v9;
      if (!*v9) {
        goto LABEL_11;
      }
    }
    if (v10 >= v8) {
      break;
    }
    uint64_t v6 = v9[1];
    if (!v6)
    {
      xpc_object_t v7 = v9 + 1;
      goto LABEL_11;
    }
  }
  xpc_object_t v14 = (const void *)v9[5];
  v9[5] = v5;
  if (v14) {
    goto LABEL_16;
  }
LABEL_17:
  xpc_object_t v15 = (const void *)v2[2];
  if (v15) {
    _Block_release(v15);
  }
  operator delete(v2);
  xpc_object_t v16 = (std::__shared_weak_count *)a1[2];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }

  operator delete(a1);
}

void sub_1A10E4A78(_Unwind_Exception *a1)
{
  if (v3) {
    _Block_release(v3);
  }
  BOOL v5 = (const void *)v2[2];
  if (v5) {
    _Block_release(v5);
  }
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0>(qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(qmi::Client::State ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  BOOL v4 = (unsigned __int16 *)*((void *)v3 + 28);
  BOOL v5 = (unsigned __int16 *)*((void *)v3 + 29);
  uint64_t v6 = v5;
  if (v4 == v5)
  {
    xpc_object_t v7 = (unsigned __int16 *)*((void *)v3 + 28);
    if (*((unsigned char *)v2 + 10)) {
      goto LABEL_7;
    }
  }
  else
  {
    xpc_object_t v7 = (unsigned __int16 *)*((void *)v3 + 28);
    while (*v7 != *((unsigned __int16 *)v2 + 4))
    {
      if (++v7 == v5)
      {
        xpc_object_t v7 = (unsigned __int16 *)*((void *)v3 + 29);
        break;
      }
    }
    if (*((unsigned char *)v2 + 10))
    {
LABEL_7:
      if (v7 == v5)
      {
        unint64_t v8 = *((void *)v3 + 30);
        if ((unint64_t)v5 >= v8)
        {
          uint64_t v10 = (char *)v5 - (char *)v4;
          if ((char *)v5 - (char *)v4 <= -3) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v11 = v10 >> 1;
          unint64_t v12 = v8 - (void)v4;
          if (v12 <= (v10 >> 1) + 1) {
            unint64_t v13 = v11 + 1;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v14 = v13;
          }
          if (v14)
          {
            if (v14 < 0) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            xpc_object_t v15 = operator new(2 * v14);
          }
          else
          {
            xpc_object_t v15 = 0;
          }
          xpc_object_t v16 = &v15[2 * v11];
          xpc_object_t v17 = &v15[2 * v14];
          *xpc_object_t v16 = *((_WORD *)v2 + 4);
          xpc_object_t v9 = v16 + 1;
          if (v4 != v5)
          {
            if ((unint64_t)(v10 - 2) < 0x1E) {
              goto LABEL_46;
            }
            if ((char *)v5 - v15 - (v10 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
              goto LABEL_46;
            }
            unint64_t v18 = ((unint64_t)(v10 - 2) >> 1) + 1;
            unint64_t v19 = 2 * (v18 & 0xFFFFFFFFFFFFFFF0);
            uint64_t v6 = &v5[v19 / 0xFFFFFFFFFFFFFFFELL];
            xpc_object_t v16 = (_WORD *)((char *)v16 - v19);
            xpc_object_t v20 = &v15[2 * v11 - 16];
            uint64_t v21 = v5 - 8;
            unint64_t v22 = v18 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              long long v23 = *(_OWORD *)v21;
              *(v20 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v21 - 1);
              *xpc_object_t v20 = v23;
              v20 -= 2;
              v21 -= 16;
              v22 -= 16;
            }
            while (v22);
            if (v18 != (v18 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_46:
              do
              {
                __int16 v24 = *--v6;
                *--xpc_object_t v16 = v24;
              }
              while (v6 != v4);
            }
          }
          *((void *)v3 + 28) = v16;
          *((void *)v3 + 29) = v9;
          *((void *)v3 + 30) = v17;
          if (v4) {
            operator delete(v4);
          }
        }
        else
        {
          *BOOL v5 = *((_WORD *)v2 + 4);
          xpc_object_t v9 = v5 + 1;
        }
LABEL_35:
        *((void *)v3 + 29) = v9;
        qmi::Client::State::sendIndWakeSet_sync(v3);
        goto LABEL_36;
      }
      goto LABEL_36;
    }
  }
  if (v7 != v5)
  {
    if (v5 != v7 + 1) {
      memmove(v7, v7 + 1, (char *)v5 - (char *)(v7 + 1));
    }
    xpc_object_t v9 = v5 - 1;
    goto LABEL_35;
  }
LABEL_36:
  operator delete(v2);
  uint64_t v25 = (std::__shared_weak_count *)a1[2];
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }

  operator delete(a1);
}

void sub_1A10E4D50(_Unwind_Exception *a1)
{
  operator delete(v2);
  BOOL v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<qmi::Client::XPCState>::shared_ptr[abi:ne180100]<qmi::Client::XPCState,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  BOOL v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D138;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A10E4ECC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState*)#1}::operator() const(qmi::Client::XPCState*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A10E4EF4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<qmi::Client::XPCState *,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState *)#1},std::allocator<qmi::Client::XPCState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::Client::XPCState *,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState *)#1},std::allocator<qmi::Client::XPCState>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<qmi::Client::XPCState *,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState *)#1},std::allocator<qmi::Client::XPCState>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_8XPCStateEEENSt3__110shared_"
                     "ptrIT_EEPS9_EUlPS6_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_8XPCStateEEENSt3_"
                                "_110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_8XPCStateEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_8XPCStateEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState*)#1}::operator() const(qmi::Client::XPCState*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t qmi::Client::XPCState::init(xpc::connection const&)::$_0::operator()(xpc_object_t **a1)
{
  uint64_t v2 = a1[1];
  uint64_t result = MEMORY[0x1A622CC50](**a1);
  uint64_t v4 = MEMORY[0x1E4F14578];
  if (result != MEMORY[0x1E4F14578]) {
    return result;
  }
  xpc_object_t v5 = **a1;
  if (!v5)
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v6 = v2[3];
    if (!v6) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  xpc_retain(v5);
  uint64_t v6 = v2[3];
  if (v6) {
LABEL_4:
  }
    dispatch_retain(v6);
LABEL_5:
  xpc_object_t v7 = (std::__shared_weak_count *)v2[2];
  if (!v7 || (xpc_object_t v8 = v2[1], (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v10 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t object = v5;
    if (v5)
    {
LABEL_9:
      xpc_retain(v5);
      goto LABEL_14;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
    xpc_object_t object = v5;
    if (v5) {
      goto LABEL_9;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_14:
  ctu::XpcClientHelper::setServer_internal();
  xpc_release(object);
  xpc_object_t object = 0;
  if (MEMORY[0x1A622CC50](v2[14]) == v4)
  {
    uint64_t v11 = (_xpc_connection_s *)v2[14];
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN3ctu15XpcClientHelper9setServerIN3qmi6Client5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    handler[3] = &__block_descriptor_tmp_53;
    handler[4] = v2 + 14;
    void handler[5] = v8;
    unint64_t v13 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = v11;
    xpc_connection_set_event_handler(v11, handler);
    xpc_connection_set_target_queue(v11, v6);
    xpc_connection_resume(v11);
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::__shared_weak_count::__release_weak(v10);
  if (v6) {
    dispatch_release(v6);
  }
  xpc_release(v5);
  return (*((uint64_t (**)(xpc_object_t *))*v2 + 8))(v2);
}

void sub_1A10E5210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, xpc_object_t object)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_weak(v20);
  if (v19) {
    dispatch_release(v19);
  }
  xpc_release(v18);
  _Unwind_Resume(a1);
}

void ___ZN3ctu15XpcClientHelper9setServerIN3qmi6Client5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(void *a1, xpc_object_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  xpc_object_t v5 = (void *)a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  unint64_t v13 = v6;
  if (!v6) {
    return;
  }
  xpc_object_t v7 = v6;
  xpc_object_t v8 = (void *)a1[5];
  v12[1] = v8;
  if (v8)
  {
    uint64_t v9 = MEMORY[0x1A622CC50](a2);
    uint64_t v10 = MEMORY[0x1E4F14590];
    if (v9 != MEMORY[0x1E4F14590])
    {
      if (v9 == MEMORY[0x1E4F145A8] && *v5 == a1[7])
      {
        v12[0] = a2;
        if (a2)
        {
          xpc_retain(a2);
        }
        else
        {
          a2 = xpc_null_create();
          v12[0] = a2;
        }
        qmi::Client::State::handleServerError((uint64_t)v8, v12);
        xpc_release(a2);
      }
      goto LABEL_20;
    }
    if (a2)
    {
      xpc_retain(a2);
    }
    else
    {
      a2 = xpc_null_create();
      if (!a2)
      {
        xpc_object_t v11 = xpc_null_create();
        a2 = 0;
        goto LABEL_16;
      }
    }
    if (MEMORY[0x1A622CC50](a2) == v10)
    {
      xpc_retain(a2);
      xpc_object_t v11 = a2;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
LABEL_16:
    xpc_release(v11);
    xpc_release(a2);
    xpc_object_t v7 = v13;
    if (!v13) {
      return;
    }
  }
LABEL_20:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1A10E541C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_8XPCState4initERKN3xpc10connectionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke(uint64_t a1)
{
  return qmi::Client::XPCState::init(xpc::connection const&)::$_0::operator()(*(xpc_object_t ***)(a1 + 40));
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3ctu15XpcServerHelper13startListenerIN3qmi6Client5StateEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(void *a1, xpc_object_t a2)
{
  unint64_t v3 = (ctu::XpcServerHelper *)a1[4];
  uint64_t v14 = 0;
  xpc_object_t v15 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    xpc_object_t v15 = std::__shared_weak_count::lock(v4);
    if (!v15) {
      return;
    }
    uint64_t v6 = a1[5];
    uint64_t v14 = v6;
    if (v6)
    {
      uint64_t v7 = MEMORY[0x1A622CC50](a2);
      uint64_t v8 = MEMORY[0x1E4F14578];
      if (v7 != MEMORY[0x1E4F14578])
      {
        if (v7 == MEMORY[0x1E4F145A8] && *(void *)ctu::XpcServerHelper::getListener(v3) == a1[7])
        {
          if (a2) {
            xpc_retain(a2);
          }
          else {
            a2 = xpc_null_create();
          }
          xpc_release(a2);
        }
        goto LABEL_21;
      }
      if (a2)
      {
        xpc_retain(a2);
        xpc_object_t object = a2;
        xpc_object_t v9 = a2;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t object = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_16;
        }
      }
      if (MEMORY[0x1A622CC50](v9) == v8)
      {
        xpc_retain(v9);
        goto LABEL_17;
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_16:
      xpc_object_t object = v10;
LABEL_17:
      char v11 = (*(uint64_t (**)(uint64_t, xpc_object_t *))(*(void *)v6 + 24))(v6, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v9);
      if ((v11 & 1) == 0) {
        xpc_connection_cancel((xpc_connection_t)a2);
      }
    }
  }
LABEL_21:
  unint64_t v12 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1A10E5664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
}

void *std::shared_ptr<qmi::Client::LocalState>::shared_ptr[abi:ne180100]<qmi::Client::LocalState,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D218;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A10E57C8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState*)#1}::operator() const(qmi::Client::LocalState*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A10E57F0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<qmi::Client::LocalState *,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState *)#1},std::allocator<qmi::Client::LocalState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::Client::LocalState *,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState *)#1},std::allocator<qmi::Client::LocalState>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<qmi::Client::LocalState *,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState *)#1},std::allocator<qmi::Client::LocalState>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_10LocalStateEEENSt3__110shar"
                     "ed_ptrIT_EEPS9_EUlPS6_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_10LocalStateEEENS"
                                "t3__110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_10LocalStateEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_10LocalStateEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState*)#1}::operator() const(qmi::Client::LocalState*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void qmi::Client::LocalState::init(void)::$_0::operator()(uint64_t a1)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  if (TelephonyRadiosGetRadioVendor() == 1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2 || (uint64_t v3 = *(void *)(a1 + 8), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v5 = v4;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      memset(&v17, 170, sizeof(v17));
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      {
LABEL_6:
        std::string v17 = *(std::string *)(a1 + 56);
        goto LABEL_11;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
      memset(&v17, 170, sizeof(v17));
      if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
LABEL_11:
    uint64_t v14 = v3;
    xpc_object_t v15 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v17;
    }
    uint64_t v7 = operator new(0x38uLL);
    v7[1] = 0;
    v7[2] = 0;
    void *v7 = &unk_1EF43D268;
    uint64_t v9 = v14;
    uint64_t v8 = v15;
    uint64_t v14 = 0;
    xpc_object_t v15 = 0;
    v18[0] = __p.__r_.__value_.__l.__size_;
    std::string::size_type v10 = __p.__r_.__value_.__r.__words[0];
    *(void *)((char *)v18 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
    char v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memset(&__p, 0, sizeof(__p));
    v7[6] = 0;
    unint64_t v12 = operator new(0x30uLL);
    *unint64_t v12 = &unk_1EF43D2B8;
    v12[1] = v9;
    xpc_object_t v12[2] = v8;
    void v12[3] = v10;
    v12[4] = v18[0];
    *(void *)((char *)v12 + 39) = *(void *)((char *)v18 + 7);
    *((unsigned char *)v12 + 47) = v11;
    v7[6] = v12;
    unint64_t v13 = *(std::__shared_weak_count **)(a1 + 296);
    *(void *)(a1 + 288) = v7 + 3;
    *(void *)(a1 + 296) = v7;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if (v15) {
        std::__shared_weak_count::__release_weak(v15);
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      std::__shared_weak_count::__release_weak(v5);
      return;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_18;
  }
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v14) = 0;
    _os_log_fault_impl(&dword_1A10C7000, v6, OS_LOG_TYPE_FAULT, "Attemping to create a QMI client on a device that does not support it!\n", (uint8_t *)&v14, 2u);
  }
}

void sub_1A10E5BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

uint64_t qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}::~dict(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2) {
      return a1;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
LABEL_3:
  }
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__shared_ptr_emplace<std::function<void ()(xpc::dict)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::function<void ()(xpc::dict)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D268;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<std::function<void ()(xpc::dict)>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t result = *(void *)(a1 + 48);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF43D2B8;
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2) {
      return a1;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
LABEL_3:
  }
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::~__func(char *__p)
{
  *(void *)std::string __p = &unk_1EF43D2B8;
  if ((__p[47] & 0x80000000) == 0)
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*((void **)__p + 3));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v2) {
LABEL_3:
  }
    std::__shared_weak_count::__release_weak(v2);
LABEL_4:

  operator delete(__p);
}

std::string *std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::__clone(uint64_t a1)
{
  uint64_t v2 = (std::string *)operator new(0x30uLL);
  uint64_t v3 = v2;
  std::string::size_type v5 = *(void *)(a1 + 8);
  std::string::size_type v4 = *(void *)(a1 + 16);
  v2->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF43D2B8;
  v2->__r_.__value_.__l.__size_ = v5;
  v2->__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = v2 + 1;
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    v3[1].__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
  }
  return v3;
}

void sub_1A10E5F28(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::__clone(uint64_t a1, std::string *a2)
{
  std::string::size_type v3 = *(void *)(a1 + 8);
  std::string::size_type v2 = *(void *)(a1 + 16);
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF43D2B8;
  a2->__r_.__value_.__l.__size_ = v3;
  a2->__r_.__value_.__r.__words[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2 + 1, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    long long v4 = *(_OWORD *)(a1 + 24);
    a2[1].__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
    *(_OWORD *)&a2[1].__r_.__value_.__l.__data_ = v4;
  }
}

void sub_1A10E5FD4(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    std::string::size_type v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2) {
      return;
    }
  }
  else
  {
    std::string::size_type v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

void std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::destroy_deallocate(char *__p)
{
  if ((__p[47] & 0x80000000) == 0)
  {
    std::string::size_type v2 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*((void **)__p + 3));
  std::string::size_type v2 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v2) {
LABEL_3:
  }
    std::__shared_weak_count::__release_weak(v2);
LABEL_4:

  operator delete(__p);
}

uint64_t std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN3qmi6Client10LocalState4initEvENK3$_0clEvEUlN3xpc4dictEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZZN3qmi6Client10LocalState4initEvENK3$_0clEvEUlN3xpc4dictEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3qmi6Client10LocalState4initEvENK3$_0clEvEUlN3xpc4dictEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3qmi6Client10LocalState4initEvENK3$_0clEvEUlN3xpc4dictEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::target_type()
{
}

void ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_10LocalState4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  operator delete(v1);
}

void std::__shared_ptr_emplace<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D378;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t result = *(void *)(a1 + 48);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void *std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::~__func(void *a1)
{
  *a1 = &unk_1EF43D3C8;
  std::string::size_type v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::~__func(void *__p)
{
  void *__p = &unk_1EF43D3C8;
  std::string::size_type v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void *std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1EF43D3C8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF43D3C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  std::string::size_type v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void **)(a1 + 8);
      if (!v8) {
        goto LABEL_22;
      }
      uint64_t v9 = *(void *)(a1 + 16);
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
      }
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v10 = (std::__shared_weak_count *)v8[2];
      if (!v10 || (v11 = v8[1], (unint64_t v12 = std::__shared_weak_count::lock(v10)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      unint64_t v13 = v12;
      uint64_t v14 = operator new(0x20uLL);
      void *v14 = v8;
      v14[1] = v9;
      void v14[2] = v4;
      v14[3] = v3;
      xpc_object_t v15 = v8[3];
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      xpc_object_t v16 = operator new(0x18uLL);
      *xpc_object_t v16 = v14;
      v16[1] = v11;
      v16[2] = v13;
      dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1}>(qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1},std::default_delete<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
      if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_22:
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_12;
        }
LABEL_17:
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (!v3) {
          return;
        }
        goto LABEL_13;
      }
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_17;
      }
    }
  }
LABEL_12:
  if (!v3) {
    return;
  }
LABEL_13:

  std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3qmi6Client10LocalState23sendConnectMessage_syncEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3qmi6Client10LocalState23sendConnectMessage_syncEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3qmi6Client10LocalState23sendConnectMessage_syncEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3qmi6Client10LocalState23sendConnectMessage_syncEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::target_type()
{
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1}>(qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1},std::default_delete<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(const void ***a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (std::__shared_weak_count *)(*a1)[1];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      std::string::size_type v5 = v4;
      uint64_t v6 = *v2;
      if (*v2)
      {
        if (v7)
        {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v8 = v2[2];
          uint64_t v9 = (std::__shared_weak_count *)v2[3];
          if (v9)
          {
            atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::size_type v10 = (std::__shared_weak_count *)*((void *)v7 + 41);
          *((void *)v7 + 40) = v8;
          *((void *)v7 + 4qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v9;
          if (v10) {
            std::__shared_weak_count::__release_weak(v10);
          }
          if (v9) {
            std::__shared_weak_count::__release_weak(v9);
          }
          xpc_object_t object = xpc_null_create();
          (*(void (**)(const void *, xpc_object_t *))(*(void *)v6 + 24))(v6, &object);
          xpc_release(object);
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  uint64_t v11 = (std::__shared_weak_count *)v2[3];
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  unint64_t v12 = (std::__shared_weak_count *)v2[1];
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(v2);
  unint64_t v13 = (std::__shared_weak_count *)a1[2];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(a1);
}

void sub_1A10E67F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  p_shared_owners = &v12->__shared_owners_;
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_3:
      xpc_object_t v15 = (std::__shared_weak_count *)v11[3];
      if (!v15) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  xpc_object_t v15 = (std::__shared_weak_count *)v11[3];
  if (!v15)
  {
LABEL_4:
    xpc_object_t v16 = (std::__shared_weak_count *)v11[1];
    if (!v16) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v15);
  xpc_object_t v16 = (std::__shared_weak_count *)v11[1];
  if (!v16)
  {
LABEL_5:
    operator delete(v11);
    std::string v17 = (std::__shared_weak_count *)v10[2];
    if (!v17) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
LABEL_10:
  std::__shared_weak_count::__release_weak(v16);
  operator delete(v11);
  std::string v17 = (std::__shared_weak_count *)v10[2];
  if (!v17) {
    goto LABEL_13;
  }
LABEL_11:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_13:
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BBServerConnection>::execute_wrapped<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}>(qmi::Client::State&&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  xpc_object_t v3 = (xpc_object_t)(*a1)[1];
  if (v3)
  {
    xpc_retain(v3);
    unint64_t v19 = a1;
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  xpc_object_t v3 = xpc_null_create();
  unint64_t v19 = a1;
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  if (v6) {
LABEL_3:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
LABEL_4:
  uint64_t v8 = v2[4];
  uint64_t v7 = v2[5];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v2[6];
  uint64_t v10 = v2[7];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  std::string v17 = *(NSObject **)(v4 + 24);
  unint64_t v18 = *(NSObject **)(v4 + 72);
  uint64_t v11 = operator new(0x40uLL);
  void *v11 = v4;
  v11[1] = v3;
  xpc_object_t v12 = xpc_null_create();
  v11[2] = v5;
  v11[3] = v6;
  v11[4] = v8;
  void v11[5] = v7;
  v11[6] = v9;
  v11[7] = v10;
  dispatch_group_notify_f(v18, v17, v11, (dispatch_function_t)dispatch::detail::group_notify<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,qmi::Client::State&&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  xpc_release(v12);
  unint64_t v13 = (std::__shared_weak_count *)v2[7];
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)v2[5];
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  xpc_object_t v15 = (std::__shared_weak_count *)v2[3];
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  xpc_object_t v16 = (std::__shared_weak_count *)v19[2];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }

  operator delete(v19);
}

void sub_1A10E6AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, __int16 a13, char a14, char a15)
{
  void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::~((uint64_t)&a13);
  std::unique_ptr<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1},std::default_delete<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a12);
  xpc_object_t v16 = (std::__shared_weak_count *)__p[2];
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::~(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void dispatch::detail::group_notify<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,qmi::Client::State&&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = a1[2];
      if (v6)
      {
        uint64_t v7 = *(uint64_t **)(v3 + 48);
        if (v7 == *(uint64_t **)(v3 + 56))
        {
LABEL_15:
          xpc_object_t v12 = xpc_string_create("not accepted");
          if (!v12) {
            xpc_object_t v12 = xpc_null_create();
          }
          xpc_dictionary_set_value((xpc_object_t)a1[1], "error", v12);
          xpc_object_t v13 = xpc_null_create();
          xpc_release(v12);
          xpc_release(v13);
          uint64_t v14 = *(NSObject **)(v6 + 24);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 1174405120;
          block[2] = ___ZZZN19QMIServerConnection18acceptLocalMessageIN3qmi6Client5StateEEEvRKN3xpc4dictENSt3__18weak_ptrIT_EENS9_INS8_8functionIFvS5_EEEEENS9_INSC_IFvSF_EEEEEENKUlvE_clEvENKUlvE_clEv_block_invoke;
          block[3] = &__block_descriptor_tmp_79_0;
          block[4] = v6;
          uint64_t v21 = v5;
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          xpc_object_t v15 = (void *)a1[1];
          xpc_object_t object = v15;
          if (v15) {
            xpc_retain(v15);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          dispatch_async(v14, block);
          xpc_release(object);
          xpc_object_t object = 0;
          xpc_object_t v16 = v21;
          if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        else
        {
          while (1)
          {
            uint64_t v8 = *v7;
            uint64_t v9 = (std::__shared_weak_count *)a1[7];
            uint64_t v25 = a1[6];
            xpc_object_t v26 = v9;
            if (v9) {
              atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v10 = (std::__shared_weak_count *)a1[5];
            uint64_t v23 = a1[4];
            __int16 v24 = v10;
            if (v10) {
              atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            char v11 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v8 + 24))(v8, a1 + 1, &v25, &v23);
            if (v24) {
              std::__shared_weak_count::__release_weak(v24);
            }
            if (v26) {
              std::__shared_weak_count::__release_weak(v26);
            }
            if (v11) {
              break;
            }
            v7 += 2;
            if (v7 == *(uint64_t **)(v3 + 56)) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  std::string v17 = (std::__shared_weak_count *)a1[7];
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  unint64_t v18 = (std::__shared_weak_count *)a1[5];
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  unint64_t v19 = (std::__shared_weak_count *)a1[3];
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release((xpc_object_t)a1[1]);
  operator delete(a1);
}

void sub_1A10E6E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a18)
  {
    std::__shared_weak_count::__release_weak(a18);
    __int16 v24 = a20;
    if (!a20)
    {
LABEL_3:
      if (atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    __int16 v24 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v24);
  if (atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_4:
    uint64_t v25 = (std::__shared_weak_count *)v20[7];
    if (!v25) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  uint64_t v25 = (std::__shared_weak_count *)v20[7];
  if (!v25)
  {
LABEL_5:
    xpc_object_t v26 = (std::__shared_weak_count *)v20[5];
    if (!v26) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  std::__shared_weak_count::__release_weak(v25);
  xpc_object_t v26 = (std::__shared_weak_count *)v20[5];
  if (!v26)
  {
LABEL_6:
    xpc_object_t v27 = (std::__shared_weak_count *)v20[3];
    if (!v27) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_13:
  std::__shared_weak_count::__release_weak(v26);
  xpc_object_t v27 = (std::__shared_weak_count *)v20[3];
  if (!v27)
  {
LABEL_8:
    xpc_release(*v22);
    operator delete(v20);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_weak(v27);
  goto LABEL_8;
}

uint64_t ___ZZZN19QMIServerConnection18acceptLocalMessageIN3qmi6Client5StateEEEvRKN3xpc4dictENSt3__18weak_ptrIT_EENS9_INS8_8functionIFvS5_EEEEENS9_INSC_IFvSF_EEEEEENKUlvE_clEvENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_object_t v3 = xpc_null_create();
  qmi::Client::State::handleClientMessage(v2, v4, (xpc_object_t *)(a1 + 48));
  xpc_release(v3);
  uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a1 + 32) + 16);

  return v5();
}

void sub_1A10E6FC0(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c45_ZTSNSt3__110shared_ptrIN3qmi6Client5StateEEE48c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (void *)a2[6];
  a1[6] = v4;
  if (v4) {
    return xpc_retain(v4);
  }
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__110shared_ptrIN3qmi6Client5StateEEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t *std::unique_ptr<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1},std::default_delete<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 40);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v2 + 24);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void *qmi::EurTransport::EurTransport(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EF43D488;
  this[3] = 0;
  this[7] = 0;
  this[11] = 0;
  return this;
}

uint64_t qmi::EurTransport::handleServerError(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 88);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t qmi::EurTransport::setMessageHandler(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(a1 + 32);
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::__function::__value_func<void ()(xpc::dict)>::swap[abi:ne180100](v5, v2);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

uint64_t qmi::EurTransport::setServerErrorHandler(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(a1 + 64);
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::__function::__value_func<void ()(xpc::object const&)>::swap[abi:ne180100](v5, v2);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void qmi::EurTransport::setQueue(uint64_t a1, dispatch_object_t *a2)
{
  dispatch_object_t v3 = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  uint64_t v4 = *(NSObject **)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  if (v4)
  {
    dispatch_release(v4);
  }
}

qmi::EurTransportXPC *qmi::EurTransportXPC::EurTransportXPC(qmi::EurTransportXPC *this)
{
  *((void *)this + 7) = 0;
  *((void *)this + 1qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1EF43D4C8;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)this + 12) = xpc_null_create();
  return this;
}

{
  *((void *)this + 7) = 0;
  *((void *)this + 1qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1EF43D4C8;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)this + 12) = xpc_null_create();
  return this;
}

void qmi::EurTransportXPC::init_sync(void *a1, xpc_object_t *a2, dispatch_object_t *a3)
{
  uint64_t v6 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_retain(v6);
  }
  uint64_t v7 = a1[3];
  a1[3] = v6;
  if (v7) {
    dispatch_release(v7);
  }
  if (v6) {
    dispatch_release(v6);
  }
  xpc_object_t v8 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v9 = *a3;
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
  uint64_t v9 = *a3;
  if (v9) {
LABEL_9:
  }
    dispatch_retain(v9);
LABEL_10:
  uint64_t v11 = a1[1];
  uint64_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t object = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v12 = (_xpc_connection_s **)(a1 + 12);
  ctu::XpcClientHelper::setServer_internal();
  xpc_release(object);
  xpc_object_t object = 0;
  if (MEMORY[0x1A622CC50](*v12) == MEMORY[0x1E4F14578])
  {
    xpc_object_t v13 = *v12;
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN3ctu15XpcClientHelper9setServerIN3qmi12EurTransportEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    handler[3] = &__block_descriptor_tmp_7;
    handler[4] = v12;
    void handler[5] = v11;
    std::string v17 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v18 = v13;
    xpc_connection_set_event_handler(v13, handler);
    xpc_connection_set_target_queue(v13, v9);
    xpc_connection_resume(v13);
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v9) {
    dispatch_release(v9);
  }
  xpc_release(v8);
  xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
  if (v14 || (xpc_object_t v14 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A622CC50](v14) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v14);
      xpc_object_t v15 = v14;
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
    xpc_object_t v14 = 0;
  }
  xpc_release(v14);
  xpc_connection_send_message((xpc_connection_t)*a2, v15);
  xpc_release(v15);
}

void sub_1A10E7764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, xpc_object_t object)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v19) {
    dispatch_release(v19);
  }
  xpc_release(v18);
  _Unwind_Resume(a1);
}

uint64_t qmi::EurTransportXPC::clearServer(qmi::EurTransportXPC *this)
{
  return ctu::XpcClientHelper::setServer();
}

void qmi::EurTransportXPC::sendMessageWithReply(uint64_t a1, xpc_object_t *a2, xpc_handler_t handler)
{
}

double qmi::EurTransportLocal::EurTransportLocal(qmi::EurTransportLocal *this)
{
  *((void *)this + 7) = 0;
  *((void *)this + 1qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1EF43D508;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  double result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return result;
}

{
  double result;

  *((void *)this + 7) = 0;
  *((void *)this + 1qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1EF43D508;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  double result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return result;
}

void qmi::EurTransportLocal::init_sync(void *a1, uint64_t a2, dispatch_object_t *a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_retain(v4);
  }
  uint64_t v5 = a1[3];
  a1[3] = v4;
  if (v5) {
    dispatch_release(v5);
  }
  if (v4) {
    dispatch_release(v4);
  }
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A622CC50](v6) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v6);
      xpc_object_t v7 = v6;
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v6 = 0;
  }
  xpc_release(v6);
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(void *, xpc_object_t *))(*a1 + 24))(a1, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_object_t v8 = operator new(0x38uLL);
  v8[1] = 0;
  void v8[2] = 0;
  void *v8 = &unk_1EF43D268;
  uint64_t v9 = v8 + 3;
  uint64_t v10 = a1[7];
  if (v10)
  {
    if ((void *)v10 == a1 + 4)
    {
      v8[6] = v9;
      (*(void (**)(void *, void *))(a1[4] + 24))(a1 + 4, v9);
      goto LABEL_21;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
  }
  v8[6] = v10;
LABEL_21:
  uint64_t v11 = (std::__shared_weak_count *)a1[17];
  a1[16] = v9;
  a1[17] = v8;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    xpc_object_t v12 = (std::__shared_weak_count *)a1[15];
    if (!v12) {
      goto LABEL_34;
    }
  }
  else
  {
    xpc_object_t v12 = (std::__shared_weak_count *)a1[15];
    if (!v12) {
      goto LABEL_34;
    }
  }
  xpc_object_t v13 = std::__shared_weak_count::lock(v12);
  uint64_t v21 = v13;
  if (v13)
  {
    xpc_object_t v14 = v13;
    uint64_t v15 = a1[14];
    uint64_t v20 = v15;
    if (v15)
    {
      xpc_object_t v16 = (std::__shared_weak_count *)a1[17];
      uint64_t v18 = a1[16];
      unint64_t v19 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = *(void *)(v15 + 24);
      if (!v17) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v17 + 48))(v17, &v18);
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_34:
  xpc_release(v7);
}

void sub_1A10E7B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, xpc_object_t object)
{
  if (a11) {
    std::__shared_weak_count::__release_weak(a11);
  }
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  xpc_release(v14);
  _Unwind_Resume(a1);
}

void qmi::EurTransportLocal::sendMessageWithReply(uint64_t a1, void **a2)
{
  dispatch_object_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a1 + 24))(a1, &object);
  xpc_release(object);
}

void sub_1A10E7C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void qmi::EurTransportLocal::setSendToClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 104) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void qmi::EurTransportLocal::setProxyMessenger(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = v3;
  *(void *)(a1 + 120) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void qmi::EurTransportLocal::shutdown(qmi::EurTransportLocal *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 17);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *std::__function::__value_func<void ()(xpc::dict)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1A10E8000(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(xpc::object const&)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1A10E82A4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN3qmi12EurTransportEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN3qmi12EurTransportEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *BBServerConnection::BBServerConnection(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v3 = (const char *)a2;
  }
  else {
    uint64_t v3 = *(const char **)a2;
  }
  uint64_t v4 = dispatch_queue_create(v3, 0);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v6, "com.apple.telephony.bb", "server");
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  a1[4] = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 5), (const ctu::OsLogLogger *)v7);
  MEMORY[0x1A622BDE0](v7);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v6);
  if (v4) {
    dispatch_release(v4);
  }
  *a1 = &unk_1EF43D5E0;
  return a1;
}

void BBServerConnection::~BBServerConnection(BBServerConnection *this)
{
  MEMORY[0x1A622BDE0]((char *)this + 40);
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void QMIServerConnection::QMIServerConnection(QMIServerConnection *this)
{
  char v7 = 19;
  strcpy(__p, "QMIServerConnection");
  BBServerConnection::BBServerConnection(this, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)this = &unk_1EF43D610;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  xpc_object_t v2 = xpc_null_create();
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 1qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v2;
  *((unsigned char *)this + 112) = 0;
  uint64_t v3 = dispatch_group_create();
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = v3;
  if (v4)
  {
    dispatch_release(v4);
    uint64_t v3 = *((void *)this + 9);
  }
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  uint64_t v5 = *((void *)this + 10);
  *((void *)this + 10) = v3;
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_1A10E8544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMIServerConnection::~QMIServerConnection(xpc_connection_t *this)
{
  *this = (xpc_connection_t)&unk_1EF43D610;
  if (MEMORY[0x1A622CC50](this[11]) == MEMORY[0x1E4F14578])
  {
    xpc_connection_cancel(this[11]);
    xpc_object_t v2 = (_xpc_connection_s *)xpc_null_create();
    xpc_object_t v3 = xpc_null_create();
    xpc_connection_t v4 = this[11];
    this[11] = v2;
    xpc_release(v4);
    xpc_release(v3);
    uint64_t v5 = this[5];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1A10C7000, v5, OS_LOG_TYPE_DEFAULT, "#I XPC Listener: shutdown!", v17, 2u);
    }
  }
  xpc_object_t v6 = (std::__shared_weak_count *)this[13];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  xpc_release(this[11]);
  this[11] = 0;
  char v7 = this[10];
  if (v7)
  {
    dispatch_group_leave(v7);
    xpc_object_t v8 = this[10];
    if (v8) {
      dispatch_release(v8);
    }
  }
  uint64_t v9 = this[9];
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = this[6];
  if (v10)
  {
    xpc_connection_t v11 = this[7];
    xpc_connection_t v12 = this[6];
    if (v11 != v10)
    {
      do
      {
        xpc_object_t v13 = (std::__shared_weak_count *)*((void *)v11 - 1);
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        xpc_connection_t v11 = (xpc_connection_t)((char *)v11 - 16);
      }
      while (v11 != v10);
      xpc_connection_t v12 = this[6];
    }
    this[7] = v10;
    operator delete(v12);
  }
  MEMORY[0x1A622BDE0](this + 5);
  xpc_object_t v14 = this[4];
  if (v14) {
    dispatch_release(v14);
  }
  uint64_t v15 = this[3];
  if (v15) {
    dispatch_release(v15);
  }
  xpc_object_t v16 = (std::__shared_weak_count *)this[2];
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
}

{
  void *v1;
  uint64_t vars8;

  QMIServerConnection::~QMIServerConnection(this);

  operator delete(v1);
}

uint64_t QMIServerConnection::checkReady(QMIServerConnection *this)
{
  return *((unsigned __int8 *)this + 112);
}

void QMIServerConnection::init(void *a1, uint64_t *a2, xpc_object_t *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  int64_t v7 = v6 - *a2;
  if (v6 == *a2)
  {
    xpc_object_t v16 = 0;
    uint64_t v15 = 0;
    uint64_t v10 = 0;
    xpc_object_t v17 = *a3;
    if (*a3) {
      goto LABEL_8;
    }
LABEL_11:
    xpc_object_t v17 = xpc_null_create();
    uint64_t v18 = (std::__shared_weak_count *)a1[2];
    if (!v18) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  if (v7 < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 >> 4;
  uint64_t v9 = (char *)operator new(v7);
  uint64_t v10 = v9;
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = v5 + v11;
    xpc_object_t v13 = &v9[v11];
    uint64_t v14 = *(void *)(v5 + v11 + 8);
    *(void *)xpc_object_t v13 = *(void *)(v5 + v11);
    *((void *)v13 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    v11 += 16;
  }
  while (v12 + 16 != v6);
  uint64_t v15 = &v9[16 * v8];
  xpc_object_t v16 = &v9[v11];
  xpc_object_t v17 = *a3;
  if (!*a3) {
    goto LABEL_11;
  }
LABEL_8:
  xpc_retain(v17);
  uint64_t v18 = (std::__shared_weak_count *)a1[2];
  if (!v18) {
LABEL_16:
  }
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_12:
  uint64_t v19 = a1[1];
  uint64_t v20 = std::__shared_weak_count::lock(v18);
  if (!v20) {
    goto LABEL_16;
  }
  uint64_t v21 = v20;
  unint64_t v22 = operator new(0x28uLL);
  *unint64_t v22 = a1;
  v22[1] = v10;
  v22[2] = v16;
  v22[3] = v15;
  v22[4] = v17;
  xpc_object_t v23 = xpc_null_create();
  __int16 v24 = a1[3];
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v25 = operator new(0x18uLL);
  *uint64_t v25 = v22;
  v25[1] = v19;
  v25[2] = v21;
  dispatch_async_f(v24, v25, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BBServerConnection>::execute_wrapped<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>(QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0,std::default_delete<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  xpc_release(v23);
}

void QMIServerConnection::shutdown(QMIServerConnection *this)
{
  xpc_object_t v3 = this;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI18BBServerConnectionE20execute_wrapped_syncIZN19QMIServerConnection8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_tmp;
  block[4] = (char *)this + 8;
  void block[5] = &v3;
  xpc_object_t v2 = (char *)this + 24;
  uint64_t v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void QMIServerConnection::loadMappings_sync(capabilities::ipc *a1@<X0>, void *a2@<X1>, __CFDictionary **a3@<X8>)
{
  *((void *)&v128 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v129 = 0x5AAAAAAAAAAAAAALL;
  *(void *)&long long v128 = 0xAAAA003278756D71;
  memset(&v127[4], 170, 7);
  uint64_t v5 = (config::hw *)capabilities::ipc::supportsPCI(a1);
  if ((v5 & 1) != 0 || config::hw::watch(v5))
  {
    if ((SHIBYTE(v129) & 0x80000000) == 0)
    {
      uint64_t v6 = 0x3178756D71;
LABEL_8:
      unint64_t v8 = v6 & 0xFFFFFFFFFFFFLL | 0xAAAA000000000000;
      HIBYTE(v129) = 12;
      uint64_t v9 = (char *)&v128;
      goto LABEL_11;
    }
    uint64_t v7 = 0x3178756D71;
  }
  else
  {
    if ((SHIBYTE(v129) & 0x80000000) == 0)
    {
      uint64_t v6 = 0x3278756D71;
      goto LABEL_8;
    }
    uint64_t v7 = 0x3278756D71;
  }
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFLL | 0xAAAA000000000000;
  *((void *)&v128 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 12;
  uint64_t v9 = (char *)v128;
LABEL_11:
  strcpy(v9, "qmux_control");
  uint64_t v11 = a2 + 1;
  uint64_t v10 = (void *)a2[1];
  memset(v127, 170, 24);
  if (v10)
  {
    do
    {
      uint64_t v12 = v10;
      uint64_t v10 = (void *)v10[1];
    }
    while (v10);
  }
  else
  {
    xpc_object_t v13 = a2 + 1;
    do
    {
      uint64_t v12 = (void *)v13[2];
      BOOL v22 = *v12 == (void)v13;
      xpc_object_t v13 = v12;
    }
    while (v22);
  }
  int v103 = a3;
  QMux::getName((QMux *)(v12 + 4), (uint64_t)v127);
  if (v11 != (void *)*a2)
  {
    uint64_t v14 = a2 + 1;
    do
    {
      uint64_t v15 = (void *)*v14;
      xpc_object_t v16 = v14;
      if (*v14)
      {
        do
        {
          xpc_object_t v17 = v15;
          uint64_t v15 = (void *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          xpc_object_t v17 = (void *)v16[2];
          BOOL v22 = *v17 == (void)v16;
          xpc_object_t v16 = v17;
        }
        while (v22);
      }
      QMux::getName((QMux *)(v17 + 4), (uint64_t)v109);
      if (SHIBYTE(v127[2]) < 0) {
        operator delete((void *)v127[0]);
      }
      v127[2] = *(void *)&v109[16];
      *(_OWORD *)size_t v127 = *(_OWORD *)v109;
      uint64_t v18 = v109[23];
      if (v109[23] < 0) {
        uint64_t v18 = v127[1];
      }
      if (v18 != 12) {
        break;
      }
      uint64_t v19 = v109[23] >= 0 ? v127 : (void *)v127[0];
      uint64_t v20 = *v19;
      int v21 = *((_DWORD *)v19 + 2);
      BOOL v22 = v20 == 0x6E6F635F78756D71 && v21 == 1819243124;
      if (!v22) {
        break;
      }
      xpc_object_t v23 = (void *)*v14;
      if (*v14)
      {
        do
        {
          __int16 v24 = v23;
          xpc_object_t v23 = (void *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          __int16 v24 = (void *)v14[2];
          BOOL v22 = *v24 == (void)v14;
          uint64_t v14 = v24;
        }
        while (v22);
      }
      uint64_t v14 = v24;
    }
    while (v24 != (void *)*a2);
  }
  v126 = 0;
  uint64_t v25 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v28 = Mutable;
  if (Mutable) {
    v126 = Mutable;
  }
  if (SHIBYTE(v129) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
  }
  else
  {
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
  }
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"cellmonitor", (uint64_t)v109, v25, v27);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_48;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_48:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_51;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_51:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"radio", (uint64_t)v109, v25, v29);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_53;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_53:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_56;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_56:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"audio", (uint64_t)v109, v25, v30);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_58;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_58:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_61;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_61:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"voice", (uint64_t)v109, v25, v31);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v127[2]) & 0x80000000) == 0) {
      goto LABEL_63;
    }
  }
  else if ((SHIBYTE(v127[2]) & 0x80000000) == 0)
  {
LABEL_63:
    *(_OWORD *)unint64_t v109 = *(_OWORD *)v127;
    *(void *)&v109[16] = v127[2];
    goto LABEL_66;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v127[0], v127[1]);
LABEL_66:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"sms", (uint64_t)v109, v25, v32);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_68;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_68:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_71;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_71:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"location", (uint64_t)v109, v25, v33);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_73;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_73:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_76;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_76:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"sim", (uint64_t)v109, v25, v34);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_78;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_78:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_81;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_81:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"ims", (uint64_t)v109, v25, v35);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_83;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_83:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_86;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_86:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"coex", (uint64_t)v109, v25, v36);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_88;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_88:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_91;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_91:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"phonebook", (uint64_t)v109, v25, v37);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_93;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_93:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_96;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_96:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"vinyl", (uint64_t)v109, v25, v38);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_98;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_98:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_101;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_101:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"eos", (uint64_t)v109, v25, v39);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_103;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_103:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_106;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_106:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"diag", (uint64_t)v109, v25, v40);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_108;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_108:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_111;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_111:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"bsp", (uint64_t)v109, v25, v41);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_113;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_113:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_116;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_116:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"dms", (uint64_t)v109, v25, v42);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_118;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_118:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_121;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_121:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"awd", (uint64_t)v109, v25, v43);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_123;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_123:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_126;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_126:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"cat", (uint64_t)v109, v25, v44);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_128;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_128:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_131;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_131:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"elqm", (uint64_t)v109, v25, v45);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_133;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_133:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_136;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_136:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"pdc", (uint64_t)v109, v25, v46);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_138;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_138:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_141;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_141:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"dsd", (uint64_t)v109, v25, v47);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_143;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_143:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_146;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_146:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"antenna", (uint64_t)v109, v25, v48);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_148;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_148:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_151;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_151:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"p2p", (uint64_t)v109, v25, v49);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_153;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_153:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_156;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_156:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"at", (uint64_t)v109, v25, v50);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_158;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_158:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_161;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_161:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"media", (uint64_t)v109, v25, v51);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_163;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_163:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_166;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_166:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"wda", (uint64_t)v109, v25, v52);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_168;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_168:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_171;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_171:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"dfs", (uint64_t)v109, v25, v53);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_173;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_173:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_176;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_176:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"ssctl", (uint64_t)v109, v25, v54);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      goto LABEL_178;
    }
  }
  else if ((SHIBYTE(v129) & 0x80000000) == 0)
  {
LABEL_178:
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
    goto LABEL_181;
  }
  std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
LABEL_181:
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"stw", (uint64_t)v109, v25, v55);
  if ((v109[23] & 0x80000000) != 0) {
    operator delete(*(void **)v109);
  }
  *(void *)unint64_t v109 = v8;
  *(void *)&v109[8] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)&v109[16] = v127[4];
  *(_DWORD *)&v109[19] = *(_DWORD *)((char *)&v127[4] + 3);
  v109[23] = 5;
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"registration", (uint64_t)v109, v25, v56);
  if ((v109[23] & 0x80000000) != 0) {
    operator delete(*(void **)v109);
  }
  *(void *)unint64_t v109 = v8;
  *(void *)&v109[8] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)&v109[16] = v127[4];
  *(_DWORD *)&v109[19] = *(_DWORD *)((char *)&v127[4] + 3);
  v109[23] = 5;
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"ussd", (uint64_t)v109, v25, v57);
  if ((v109[23] & 0x80000000) != 0) {
    operator delete(*(void **)v109);
  }
  *(void *)unint64_t v109 = v8;
  *(void *)&v109[8] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)&v109[16] = v127[4];
  *(_DWORD *)&v109[19] = *(_DWORD *)((char *)&v127[4] + 3);
  v109[23] = 5;
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"supp", (uint64_t)v109, v25, v58);
  if ((v109[23] & 0x80000000) != 0) {
    operator delete(*(void **)v109);
  }
  *(void *)unint64_t v109 = v8;
  *(void *)&v109[8] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)&v109[16] = v127[4];
  *(_DWORD *)&v109[19] = *(_DWORD *)((char *)&v127[4] + 3);
  v109[23] = 5;
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"settings", (uint64_t)v109, v25, v59);
  if ((v109[23] & 0x80000000) != 0) {
    operator delete(*(void **)v109);
  }
  *(void *)unint64_t v109 = v8;
  *(void *)&v109[8] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)&v109[16] = v127[4];
  *(_DWORD *)&v109[19] = *(_DWORD *)((char *)&v127[4] + 3);
  v109[23] = 5;
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"desense", (uint64_t)v109, v25, v60);
  if ((v109[23] & 0x80000000) != 0) {
    operator delete(*(void **)v109);
  }
  ctu::cf::insert<char const*,char const*>(v28, (const __CFString **)"logchan", v25, v61, v62);
  ctu::cf::insert<char const*,char const*>(v28, (const __CFString **)"dormancy", v25, v63, v64);
  ctu::cf::insert<char const*,char const*>(v28, (const __CFString **)"aqm", v25, v65, v66);
  ctu::cf::insert<char const*,char const*>(v28, (const __CFString **)"subscriber", v25, v67, v68);
  if (!capabilities::ipc::supportsPCI(v69)) {
    goto LABEL_198;
  }
  if (SHIBYTE(v129) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v109, (const std::string::value_type *)v128, *((std::string::size_type *)&v128 + 1));
  }
  else
  {
    *(_OWORD *)unint64_t v109 = v128;
    *(void *)&v109[16] = v129;
  }
  ctu::cf::insert<char const*,std::string>(v28, (const __CFString **)"debug_ipc", (uint64_t)v109, v25, v70);
  if ((v109[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v109);
    BOOL v71 = (void *)*a2;
    if ((void *)*a2 != v11) {
      goto LABEL_199;
    }
  }
  else
  {
LABEL_198:
    BOOL v71 = (void *)*a2;
    if ((void *)*a2 != v11)
    {
LABEL_199:
      int v72 = 0;
      uint64_t v105 = *(void *)(MEMORY[0x1E4FBA408] + 64);
      uint64_t v106 = *MEMORY[0x1E4FBA408];
      uint64_t v104 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      while (1)
      {
        unint64_t v125 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v73 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v73 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v123 = v73;
        long long v124 = v73;
        long long v121 = v73;
        long long v122 = v73;
        long long v119 = v73;
        long long v120 = v73;
        long long v117 = v73;
        long long v118 = v73;
        long long v115 = v73;
        long long v116 = v73;
        *(_OWORD *)std::string __p = v73;
        long long v114 = v73;
        long long v111 = v73;
        long long v112 = v73;
        *(_OWORD *)&v109[16] = v73;
        long long v110 = v73;
        *(_OWORD *)unint64_t v109 = v73;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109[16], (uint64_t)"coredump_", 9);
        ++v72;
        std::ostream::operator<<();
        if ((BYTE8(v115) & 0x10) != 0)
        {
          uint64_t v76 = v115;
          uint64_t v77 = (const void **)&v112;
          if ((unint64_t)v115 < *((void *)&v112 + 1))
          {
            *(void *)&long long v115 = *((void *)&v112 + 1);
            uint64_t v76 = *((void *)&v112 + 1);
            uint64_t v77 = (const void **)&v112;
          }
        }
        else
        {
          if ((BYTE8(v115) & 8) == 0)
          {
            std::string::size_type v74 = 0;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
            p_dst = &__dst;
            goto LABEL_215;
          }
          uint64_t v76 = *((void *)&v111 + 1);
          uint64_t v77 = (const void **)&v110 + 1;
        }
        long long v78 = *v77;
        std::string::size_type v74 = v76 - (void)*v77;
        if (v74 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v74 >= 0x17) {
          break;
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v76 - *(unsigned char *)v77;
        p_dst = &__dst;
        if (v74) {
          goto LABEL_214;
        }
LABEL_215:
        p_dst->__r_.__value_.__s.__data_[v74] = 0;
        QMux::getName((QMux *)(v71 + 4), (uint64_t)&v107);
        int v81 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v131, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v131 = __dst;
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v130, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
        }
        else {
          std::string v130 = v107;
        }
        ctu::cf::insert<std::string,std::string>();
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v130.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_223:
            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_234;
            }
            goto LABEL_224;
          }
        }
        else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_223;
        }
        operator delete(v131.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_234:
          operator delete(v107.__r_.__value_.__l.__data_);
          if ((v81 & 0x80000000) == 0) {
            goto LABEL_225;
          }
          goto LABEL_235;
        }
LABEL_224:
        if ((v81 & 0x80000000) == 0) {
          goto LABEL_225;
        }
LABEL_235:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_225:
        *(void *)unint64_t v109 = v106;
        *(void *)&v109[*(void *)(v106 - 24)] = v105;
        *(void *)&v109[16] = v104;
        *(void *)&v109[24] = MEMORY[0x1E4FBA470] + 16;
        if (SHIBYTE(v114) < 0) {
          operator delete(__p[1]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1A622C370](&v116);
        unint64_t v125 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v82 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v82 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v123 = v82;
        long long v124 = v82;
        long long v121 = v82;
        long long v122 = v82;
        long long v119 = v82;
        long long v120 = v82;
        long long v117 = v82;
        long long v118 = v82;
        long long v115 = v82;
        long long v116 = v82;
        *(_OWORD *)std::string __p = v82;
        long long v114 = v82;
        long long v111 = v82;
        long long v112 = v82;
        *(_OWORD *)&v109[16] = v82;
        long long v110 = v82;
        *(_OWORD *)unint64_t v109 = v82;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109[16], (uint64_t)"data_", 5);
        std::ostream::operator<<();
        if ((BYTE8(v115) & 0x10) != 0)
        {
          uint64_t v85 = v115;
          uint64_t v86 = (const void **)&v112;
          if ((unint64_t)v115 < *((void *)&v112 + 1))
          {
            *(void *)&long long v115 = *((void *)&v112 + 1);
            uint64_t v85 = *((void *)&v112 + 1);
            uint64_t v86 = (const void **)&v112;
          }
        }
        else
        {
          if ((BYTE8(v115) & 8) == 0)
          {
            std::string::size_type v83 = 0;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
            uint64_t v84 = &__dst;
            goto LABEL_245;
          }
          uint64_t v85 = *((void *)&v111 + 1);
          uint64_t v86 = (const void **)&v110 + 1;
        }
        uint64_t v87 = *v86;
        std::string::size_type v83 = v85 - (void)*v86;
        if (v83 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v83 >= 0x17)
        {
          uint64_t v88 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v83 | 7) != 0x17) {
            uint64_t v88 = v83 | 7;
          }
          uint64_t v89 = v88 + 1;
          uint64_t v84 = (std::string *)operator new(v88 + 1);
          __dst.__r_.__value_.__l.__size_ = v83;
          __dst.__r_.__value_.__r.__words[2] = v89 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
LABEL_244:
          memmove(v84, v87, v83);
          goto LABEL_245;
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v85 - *(unsigned char *)v86;
        uint64_t v84 = &__dst;
        if (v83) {
          goto LABEL_244;
        }
LABEL_245:
        v84->__r_.__value_.__s.__data_[v83] = 0;
        QMux::getName((QMux *)(v71 + 4), (uint64_t)&v107);
        int v90 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v131, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v131 = __dst;
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v130, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
        }
        else {
          std::string v130 = v107;
        }
        ctu::cf::insert<std::string,std::string>();
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v130.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_253:
            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_264;
            }
            goto LABEL_254;
          }
        }
        else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_253;
        }
        operator delete(v131.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_264:
          operator delete(v107.__r_.__value_.__l.__data_);
          if ((v90 & 0x80000000) == 0) {
            goto LABEL_255;
          }
          goto LABEL_265;
        }
LABEL_254:
        if ((v90 & 0x80000000) == 0) {
          goto LABEL_255;
        }
LABEL_265:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_255:
        *(void *)unint64_t v109 = v106;
        *(void *)&v109[*(void *)(v106 - 24)] = v105;
        *(void *)&v109[16] = v104;
        *(void *)&v109[24] = MEMORY[0x1E4FBA470] + 16;
        if (SHIBYTE(v114) < 0) {
          operator delete(__p[1]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1A622C370](&v116);
        unint64_t v125 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v91 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v91 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v123 = v91;
        long long v124 = v91;
        long long v121 = v91;
        long long v122 = v91;
        long long v119 = v91;
        long long v120 = v91;
        long long v117 = v91;
        long long v118 = v91;
        long long v115 = v91;
        long long v116 = v91;
        *(_OWORD *)std::string __p = v91;
        long long v114 = v91;
        long long v111 = v91;
        long long v112 = v91;
        *(_OWORD *)&v109[16] = v91;
        long long v110 = v91;
        *(_OWORD *)unint64_t v109 = v91;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v109);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v109[16], (uint64_t)"qos_", 4);
        std::ostream::operator<<();
        if ((BYTE8(v115) & 0x10) != 0)
        {
          uint64_t v94 = v115;
          v95 = (const void **)&v112;
          if ((unint64_t)v115 < *((void *)&v112 + 1))
          {
            *(void *)&long long v115 = *((void *)&v112 + 1);
            uint64_t v94 = *((void *)&v112 + 1);
            v95 = (const void **)&v112;
          }
        }
        else
        {
          if ((BYTE8(v115) & 8) == 0)
          {
            std::string::size_type v92 = 0;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
            uint64_t v93 = &__dst;
            goto LABEL_275;
          }
          uint64_t v94 = *((void *)&v111 + 1);
          v95 = (const void **)&v110 + 1;
        }
        uint64_t v96 = *v95;
        std::string::size_type v92 = v94 - (void)*v95;
        if (v92 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v92 >= 0x17)
        {
          uint64_t v97 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v92 | 7) != 0x17) {
            uint64_t v97 = v92 | 7;
          }
          uint64_t v98 = v97 + 1;
          uint64_t v93 = (std::string *)operator new(v97 + 1);
          __dst.__r_.__value_.__l.__size_ = v92;
          __dst.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
LABEL_274:
          memmove(v93, v96, v92);
          goto LABEL_275;
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v94 - *(unsigned char *)v95;
        uint64_t v93 = &__dst;
        if (v92) {
          goto LABEL_274;
        }
LABEL_275:
        v93->__r_.__value_.__s.__data_[v92] = 0;
        QMux::getName((QMux *)(v71 + 4), (uint64_t)&v107);
        uint64_t v28 = v126;
        int v99 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v131, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v131 = __dst;
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v130, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
        }
        else {
          std::string v130 = v107;
        }
        ctu::cf::insert<std::string,std::string>();
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v130.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_283:
            if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_284;
            }
            goto LABEL_295;
          }
        }
        else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_283;
        }
        operator delete(v131.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_284:
          if (v99 < 0) {
            goto LABEL_296;
          }
          goto LABEL_285;
        }
LABEL_295:
        operator delete(v107.__r_.__value_.__l.__data_);
        if (v99 < 0) {
LABEL_296:
        }
          operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_285:
        *(void *)unint64_t v109 = v106;
        *(void *)&v109[*(void *)(v106 - 24)] = v105;
        *(void *)&v109[16] = v104;
        *(void *)&v109[24] = MEMORY[0x1E4FBA470] + 16;
        if (SHIBYTE(v114) < 0) {
          operator delete(__p[1]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1A622C370](&v116);
        unint64_t v100 = (void *)v71[1];
        if (v100)
        {
          do
          {
            unint64_t v101 = v100;
            unint64_t v100 = (void *)*v100;
          }
          while (v100);
        }
        else
        {
          do
          {
            unint64_t v101 = (void *)v71[2];
            BOOL v22 = *v101 == (void)v71;
            BOOL v71 = v101;
          }
          while (!v22);
        }
        BOOL v71 = v101;
        if (v101 == v11) {
          goto LABEL_298;
        }
      }
      uint64_t v79 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v74 | 7) != 0x17) {
        uint64_t v79 = v74 | 7;
      }
      uint64_t v80 = v79 + 1;
      p_dst = (std::string *)operator new(v79 + 1);
      __dst.__r_.__value_.__l.__size_ = v74;
      __dst.__r_.__value_.__r.__words[2] = v80 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_214:
      memmove(p_dst, v78, v74);
      goto LABEL_215;
    }
  }
LABEL_298:
  if (v28)
  {
    CFTypeID v102 = CFGetTypeID(v28);
    if (v102 == CFDictionaryGetTypeID())
    {
      *int v103 = v28;
      CFRetain(v28);
    }
    else
    {
      *int v103 = 0;
    }
    CFRelease(v28);
  }
  else
  {
    *int v103 = 0;
  }
  if ((SHIBYTE(v127[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v129) & 0x80000000) == 0) {
      return;
    }
LABEL_308:
    operator delete((void *)v128);
    return;
  }
  operator delete((void *)v127[0]);
  if (SHIBYTE(v129) < 0) {
    goto LABEL_308;
  }
}

void sub_1A10EA188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v40 - 232));
  if (*(char *)(v40 - 201) < 0)
  {
    operator delete(*(void **)(v40 - 224));
    if ((*(char *)(v40 - 161) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((*(char *)(v40 - 161) & 0x80000000) == 0)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v40 - 184));
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  unint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1A10EA6D0(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1A622C370](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A622C370](a1 + 128);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<BBServerConnection>::execute_wrapped<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>(QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0,std::default_delete<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *a1;
  CFAllocatorRef v43 = v2;
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 48;
  if ((void *)v4 == v2 + 1) {
    goto LABEL_50;
  }
  uint64_t v6 = (char *)v2[1];
  uint64_t v5 = (char *)v2[2];
  unint64_t v7 = (v5 - v6) >> 4;
  uint64_t v8 = *(void *)(v3 + 64);
  uint64_t v9 = *(char **)(v3 + 48);
  if (v7 > (v8 - (uint64_t)v9) >> 4)
  {
    if (v9)
    {
      uint64_t v10 = *(char **)(v3 + 56);
      uint64_t v11 = *(void **)(v3 + 48);
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = (std::__shared_weak_count *)*((void *)v10 - 1);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v10 -= 16;
        }
        while (v10 != v9);
        uint64_t v11 = *(void **)v4;
      }
      *(void *)(v3 + 56) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    uint64_t v1 = a1;
    if (v5 - v6 < 0) {
      goto LABEL_80;
    }
    uint64_t v23 = v8 >> 3;
    if (v8 >> 3 <= v7) {
      uint64_t v23 = (v5 - v6) >> 4;
    }
    unint64_t v24 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v23;
    if (v24 >> 60) {
LABEL_80:
    }
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    uint64_t v25 = operator new(16 * v24);
    *(void *)(v3 + 48) = v25;
    *(void *)(v3 + 56) = v25;
    for (*(void *)(v3 + 64) = &v25[2 * v24]; v6 != v5; v6 += 16)
    {
      *uint64_t v25 = *(void *)v6;
      uint64_t v26 = *((void *)v6 + 1);
      v25[1] = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      v25 += 2;
    }
    *(void *)(v3 + 56) = v25;
    xpc_object_t v27 = (xpc_object_t)v2[4];
    if (!v27) {
      goto LABEL_61;
    }
LABEL_51:
    xpc_retain(v27);
    goto LABEL_62;
  }
  xpc_object_t v13 = *(char **)(v3 + 56);
  unint64_t v14 = (v13 - v9) >> 4;
  if (v14 >= v7)
  {
    if (v6 == v5)
    {
      uint64_t v19 = *(char **)(v3 + 48);
      BOOL v31 = v13 == v9;
      uint64_t v1 = a1;
      if (v31) {
        goto LABEL_60;
      }
    }
    else
    {
      uint64_t v19 = *(char **)(v3 + 48);
      do
      {
        uint64_t v21 = *(void *)v6;
        uint64_t v20 = *((void *)v6 + 1);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        BOOL v22 = (std::__shared_weak_count *)*((void *)v9 + 1);
        *(void *)uint64_t v9 = v21;
        *((void *)v9 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v20;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v19 += 16;
        v6 += 16;
        v9 += 16;
      }
      while (v6 != v5);
      xpc_object_t v13 = *(char **)(v3 + 56);
      uint64_t v1 = a1;
      if (v13 == v19)
      {
LABEL_60:
        *(void *)(v3 + 56) = v19;
        xpc_object_t v27 = (xpc_object_t)v2[4];
        if (v27) {
          goto LABEL_51;
        }
        goto LABEL_61;
      }
    }
    do
    {
      CFAllocatorRef v32 = (std::__shared_weak_count *)*((void *)v13 - 1);
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      v13 -= 16;
    }
    while (v13 != v19);
    goto LABEL_60;
  }
  uint64_t v15 = &v6[16 * v14];
  if (v13 != v9)
  {
    do
    {
      uint64_t v17 = *(void *)v6;
      uint64_t v16 = *((void *)v6 + 1);
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v9 + 1);
      *(void *)uint64_t v9 = v17;
      *((void *)v9 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v16;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v6 += 16;
      v9 += 16;
    }
    while (v6 != v15);
    uint64_t v9 = *(char **)(v3 + 56);
  }
  uint64_t v28 = v9;
  if (v15 != v5)
  {
    uint64_t v28 = v9;
    CFAllocatorRef v29 = v9;
    do
    {
      *(void *)CFAllocatorRef v29 = *(void *)v15;
      uint64_t v30 = *((void *)v15 + 1);
      *((void *)v29 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v30;
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
      }
      v28 += 16;
      v15 += 16;
      v29 += 16;
    }
    while (v15 != v5);
  }
  *(void *)(v3 + 56) = v28;
  uint64_t v1 = a1;
LABEL_50:
  xpc_object_t v27 = (xpc_object_t)v2[4];
  if (v27) {
    goto LABEL_51;
  }
LABEL_61:
  xpc_object_t v27 = xpc_null_create();
LABEL_62:
  CFAllocatorRef v33 = *(void **)(v3 + 88);
  *(void *)(v3 + 88) = v27;
  xpc_release(v33);
  xpc_connection_suspend(*(xpc_connection_t *)(v3 + 88));
  CFAllocatorRef v34 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A10C7000, v34, OS_LOG_TYPE_DEFAULT, "#I XPC Listener: creating qmi::Server", buf, 2u);
  }
  qmi::Server::Server((uint64_t)buf, (xpc_object_t *)(v3 + 88));
  CFAllocatorRef v35 = *(std::__shared_weak_count **)(v3 + 104);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  CFAllocatorRef v36 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  CFAllocatorRef v37 = *(void **)(v3 + 48);
  for (uint64_t i = *(void **)(v3 + 56); v37 != i; v37 += 2)
    (*(void (**)(void, uint64_t))(*(void *)*v37 + 16))(*v37, v3 + 96);
  CFAllocatorRef v39 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1A10C7000, v39, OS_LOG_TYPE_DEFAULT, "#I XPC Listener: go!", buf, 2u);
  }
  xpc_connection_resume(*(xpc_connection_t *)(v3 + 88));
  uint64_t v40 = *(NSObject **)(v3 + 80);
  *(void *)(v3 + 80) = 0;
  if (v40)
  {
    dispatch_group_leave(v40);
    dispatch_release(v40);
  }
  *(unsigned char *)(v3 + 112) = 1;
  std::unique_ptr<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0,std::default_delete<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v43);
  CFAllocatorRef v41 = (std::__shared_weak_count *)v1[2];
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  operator delete(v1);
}

void sub_1A10EAE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0,std::default_delete<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  uint64_t v6 = (std::__shared_weak_count *)v4[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0,std::default_delete<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(void *)(v2 + 32) = 0;
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t v5 = *(void **)(v2 + 8);
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
          if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          v4 -= 16;
        }
        while (v4 != v3);
        uint64_t v5 = *(void **)(v2 + 8);
      }
      *(void *)(v2 + 16) = v3;
      operator delete(v5);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZNK3ctu20SharedSynchronizableI18BBServerConnectionE20execute_wrapped_syncIZN19QMIServerConnection8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  *(unsigned char *)(v1 + 112) = 0;
  if (MEMORY[0x1A622CC50](*(void *)(v1 + 88)) == MEMORY[0x1E4F14578])
  {
    xpc_connection_cancel(*(xpc_connection_t *)(v1 + 88));
    xpc_object_t v2 = xpc_null_create();
    xpc_object_t v3 = xpc_null_create();
    uint64_t v4 = *(void **)(v1 + 88);
    *(void *)(v1 + 88) = v2;
    xpc_release(v4);
    xpc_release(v3);
    uint64_t v5 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1A10C7000, v5, OS_LOG_TYPE_DEFAULT, "#I XPC Listener: shutdown!", v9, 2u);
    }
  }
  uint64_t v6 = *(uint64_t **)(v1 + 48);
  unint64_t v7 = *(uint64_t **)(v1 + 56);
  while (v6 != v7)
  {
    uint64_t v8 = *v6;
    v6 += 2;
    (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
  }
}

void ctu::cf::insert<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  uint64_t v6 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy();
  unint64_t v7 = value;
  if (v6) {
    BOOL v8 = value == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (!value) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_8:
  if (v6) {
    CFRelease(v6);
  }
}

void sub_1A10EB148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  xpc_object_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1A10EB16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void ctu::cf::insert<char const*,char const*>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a3, a5);
  unint64_t v7 = value;
  xpc_object_t value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, (const __CFString **)"qmux1", (const char *)0x8000100, a3, v8);
  uint64_t v9 = value;
  if (v7) {
    BOOL v10 = value == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (!value) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v7, value);
  }
  CFRelease(v9);
LABEL_8:
  if (v7) {
    CFRelease(v7);
  }
}

void sub_1A10EB264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  xpc_object_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1A10EB288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<std::string,std::string>()
{
}

void sub_1A10EB348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  xpc_object_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1A10EB36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ATCSThreadStartStub(void (**a1)(void))
{
  return 0;
}

pthread_t ATCSThreadSpawn(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  unint64_t v7 = operator new(0x10uLL);
  void *v7 = a2;
  v7[1] = a3;
  pthread_t v11 = (pthread_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v12.__opaque[24] = v8;
  *(_OWORD *)&v12.__opaque[40] = v8;
  *(_OWORD *)&v12.__sig = v8;
  *(_OWORD *)&v12.__opaque[8] = v8;
  pthread_attr_init(&v12);
  if (a4) {
    pthread_attr_setdetachstate(&v12, 2);
  }
  int v9 = pthread_create(&v11, &v12, (void *(__cdecl *)(void *))ATCSThreadStartStub, v7);
  pthread_attr_destroy(&v12);
  if (!v9) {
    return v11;
  }
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "pthread_create() failed, error = %d\n", v9);
  return 0;
}

BOOL ATCSThreadJoin(_opaque_pthread_t *a1)
{
  return pthread_join(a1, 0) == 0;
}

BOOL ATCSThreadKill(_opaque_pthread_t *a1)
{
  return pthread_kill(a1, 9) == 0;
}

void ATCSMutex::ATCSMutex(ATCSMutex *this, const char *a2)
{
  *(void *)this = 0;
  xpc_object_t v3 = (pthread_mutex_t *)operator new(0x48uLL);
  v3[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v3, 0);
  *(void *)this = v3;
}

{
  pthread_mutex_t *v3;

  *(void *)this = 0;
  xpc_object_t v3 = (pthread_mutex_t *)operator new(0x48uLL);
  v3[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v3, 0);
  *(void *)this = v3;
}

void ATCSMutex::~ATCSMutex(pthread_mutex_t **this)
{
  uint64_t v1 = *this;
  pthread_mutex_destroy(*this);
  if (v1) {
    operator delete(v1);
  }
}

{
  pthread_mutex_t *v1;

  uint64_t v1 = *this;
  pthread_mutex_destroy(*this);
  if (v1) {
    operator delete(v1);
  }
}

pthread_t ATCSMutex::lock(pthread_mutex_t **this)
{
  uint64_t v1 = *this;
  pthread_mutex_lock(*this);
  pthread_t result = pthread_self();
  v1[1].__sig = (uint64_t)result;
  return result;
}

uint64_t ATCSMutex::unlock(pthread_mutex_t **this)
{
  uint64_t v1 = *this;
  pthread_self();
  v1[1].__sig = 0;

  return pthread_mutex_unlock(v1);
}

BOOL ATCSMutex::isLocked(ATCSMutex *this)
{
  uint64_t v1 = *(void *)this;
  xpc_object_t v2 = pthread_self();
  return pthread_equal(v2, *(pthread_t *)(v1 + 64)) != 0;
}

BOOL ATCSMutex::isUnlocked(ATCSMutex *this)
{
  pthread_t v1 = *(pthread_t *)(*(void *)this + 64);
  return v1 != pthread_self();
}

void ATCSCondition::ATCSCondition(ATCSCondition *this, const char *a2)
{
  xpc_object_t v3 = (pthread_cond_t *)malloc(0x30uLL);
  *(void *)this = v3;
  pthread_cond_init(v3, 0);
}

{
  pthread_cond_t *v3;

  xpc_object_t v3 = (pthread_cond_t *)malloc(0x30uLL);
  *(void *)this = v3;
  pthread_cond_init(v3, 0);
}

void ATCSCondition::~ATCSCondition(pthread_cond_t **this)
{
}

{
  pthread_cond_destroy(*this);
  free(*this);
}

uint64_t ATCSCondition::wait(pthread_cond_t **this, pthread_mutex_t **a2, unsigned int a3)
{
  uint64_t v5 = *a2;
  pthread_t v6 = pthread_self();
  v5[1].__sig = 0;
  if ((a3 & 0x80000000) != 0)
  {
    int v7 = pthread_cond_wait(*this, v5);
  }
  else
  {
    v10.tv_sec = a3 / 0x3E8uLL;
    v10.tv_nsec = 1000000 * (a3 % 0x3E8);
    int v7 = pthread_cond_timedwait_relative_np(*this, v5, &v10);
  }
  v5[1].__sig = (uint64_t)v6;
  if (v7 == 60) {
    unsigned int v8 = 1;
  }
  else {
    unsigned int v8 = -1;
  }
  if (v7) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t ATCSCondition::broadcast(pthread_cond_t **this)
{
  return pthread_cond_broadcast(*this);
}

uint64_t ATCSCondition::signal(pthread_cond_t **this)
{
  return pthread_cond_signal(*this);
}

void ATCSIPCDriver::ATCSIPCDriver(ATCSIPCDriver *this)
{
  *(void *)this = &unk_1EF43D6F0;
  *((unsigned char *)this + 8) = 0;
}

uint64_t ATCSIPCDriver::bootstrapInternal(uint64_t this)
{
  *(unsigned char *)(this + 8) = 1;
  return this;
}

unsigned char *ATCSIPCDriver::bootstrap(unsigned char *this)
{
  if (!this[8]) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)this + 16))();
  }
  return this;
}

void Tlv::Tlv(Tlv *this, char a2, size_t __sz)
{
  *(unsigned char *)this = a2;
  *((_WORD *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = __sz;
  size_t v4 = __sz;
  uint64_t v5 = operator new[](__sz);
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v5;
  *((_WORD *)this + 8) = 0;
  bzero(v5, v4);
}

{
  size_t v4;
  void *v5;

  *(unsigned char *)this = a2;
  *((_WORD *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = __sz;
  size_t v4 = __sz;
  uint64_t v5 = operator new[](__sz);
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v5;
  *((_WORD *)this + 8) = 0;
  bzero(v5, v4);
}

void Tlv::Tlv(Tlv *this, char a2, size_t __sz, const void *a4)
{
  *(unsigned char *)this = a2;
  *((_WORD *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = __sz;
  size_t v6 = __sz;
  int v7 = (char *)operator new[](__sz);
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v7;
  *((_WORD *)this + 8) = 0;
  if (a4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1F, "src", "!=", "NULL", 0, 0);
    int v7 = (char *)*((void *)this + 1);
    uint64_t v8 = *((unsigned __int16 *)this + 8);
    size_t v6 = *((unsigned __int16 *)this + 1);
  }
  memcpy(&v7[v8], a4, v6);
}

{
  size_t v6;
  char *v7;
  uint64_t v8;

  *(unsigned char *)this = a2;
  *((_WORD *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = __sz;
  size_t v6 = __sz;
  int v7 = (char *)operator new[](__sz);
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v7;
  *((_WORD *)this + 8) = 0;
  if (a4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1F, "src", "!=", "NULL", 0, 0);
    int v7 = (char *)*((void *)this + 1);
    uint64_t v8 = *((unsigned __int16 *)this + 8);
    size_t v6 = *((unsigned __int16 *)this + 1);
  }
  memcpy(&v7[v8], a4, v6);
}

void Tlv::Tlv(Tlv *this, const void **a2)
{
  *(unsigned char *)this = *(unsigned char *)a2;
  size_t v4 = *((unsigned __int16 *)a2 + 1);
  *((_WORD *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v4;
  uint64_t v5 = operator new[](v4);
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v5;
  *((_WORD *)this + 8) = 0;
  memcpy(v5, a2[1], v4);
}

{
  size_t v4;
  void *v5;

  *(unsigned char *)this = *(unsigned char *)a2;
  size_t v4 = *((unsigned __int16 *)a2 + 1);
  *((_WORD *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v4;
  uint64_t v5 = operator new[](v4);
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v5;
  *((_WORD *)this + 8) = 0;
  memcpy(v5, a2[1], v4);
}

void Tlv::~Tlv(Tlv *this)
{
  pthread_t v1 = (void *)*((void *)this + 1);
  if (v1) {
    operator delete[](v1);
  }
}

{
  void *v1;

  pthread_t v1 = (void *)*((void *)this + 1);
  if (v1) {
    operator delete[](v1);
  }
}

_WORD *Tlv::create(Tlv *this, unsigned int a2)
{
  char v3 = (char)this;
  size_t v4 = operator new(0x18uLL);
  *(unsigned char *)size_t v4 = v3;
  v4[1] = a2;
  uint64_t v5 = operator new[](a2);
  *((void *)v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v5;
  v4[8] = 0;
  bzero(v5, a2);
  return v4;
}

void sub_1A10EBCD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

_WORD *Tlv::create(Tlv *this, unsigned int a2, const void *a3, const void *a4)
{
  char v6 = (char)this;
  int v7 = operator new(0x18uLL);
  *(unsigned char *)int v7 = v6;
  v7[1] = a2;
  uint64_t v8 = operator new[](a2);
  *((void *)v7 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v8;
  unsigned char v7[8] = 0;
  if (!a3) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1F, "src", "!=", "NULL", 0, 0);
  }
  memcpy(v8, a3, a2);
  return v7;
}

void sub_1A10EBD88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

_WORD *Tlv::create(const void **this, const Tlv *a2)
{
  char v3 = operator new(0x18uLL);
  *(unsigned char *)char v3 = *(unsigned char *)this;
  size_t v4 = *((unsigned __int16 *)this + 1);
  v3[1] = v4;
  uint64_t v5 = operator new[](v4);
  *((void *)v3 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v5;
  v3[8] = 0;
  memcpy(v5, this[1], v4);
  return v3;
}

void sub_1A10EBE00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Tlv::putByte(Tlv *this, char a2)
{
  uint64_t v4 = *((unsigned __int16 *)this + 8);
  uint64_t v5 = (const void *)*((unsigned __int16 *)this + 1);
  if (v4 >= v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x59, "(fIndex+1)", "<=", "fLength", (const char *)(v4 + 1), v5);
    LODWORD(v4) = *((unsigned __int16 *)this + 8);
  }
  uint64_t v6 = *((void *)this + 1);
  *((_WORD *)this + 8) = v4 + 1;
  *(unsigned char *)(v6 + v4) = a2;
}

void Tlv::putWord(Tlv *this, __int16 a2)
{
  uint64_t v4 = *((unsigned __int16 *)this + 8);
  uint64_t v5 = (const char *)(v4 + 2);
  uint64_t v6 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v4 + 2 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x6B, "(fIndex+2)", "<=", "fLength", v5, v6);
    LODWORD(v4) = *((unsigned __int16 *)this + 8);
    LODWORD(v6) = *((unsigned __int16 *)this + 1);
    LODWORD(v5) = v4 + 2;
  }
  if (v5 > v6) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xB3, "(index+2)", "<=", "fLength", (const char *)v5, (const void *)v6);
  }
  *(unsigned char *)(*((void *)this + 1) + v4) = a2;
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(v4 + 1)) = HIBYTE(a2);
  *((_WORD *)this + 8) = v4 + 2;
}

uint64_t Tlv::putWordAt(Tlv *this, __int16 a2, unsigned int a3)
{
  uint64_t v6 = (const char *)(a3 + 2);
  int v7 = (const void *)*((unsigned __int16 *)this + 1);
  if (v6 > v7) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xB3, "(index+2)", "<=", "fLength", v6, v7);
  }
  *(unsigned char *)(*((void *)this + 1) + a3) = a2;
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(a3 + 1)) = HIBYTE(a2);
  return (unsigned __int16)v6;
}

void Tlv::putDWord(Tlv *this, int a2)
{
  uint64_t v4 = *((unsigned __int16 *)this + 8);
  uint64_t v5 = (const char *)(v4 + 4);
  uint64_t v6 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v4 + 4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x7C, "(fIndex+4)", "<=", "fLength", v5, v6);
    LODWORD(v4) = *((unsigned __int16 *)this + 8);
    LODWORD(v6) = *((unsigned __int16 *)this + 1);
    LODWORD(v5) = v4 + 4;
  }
  if (v5 > v6) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xCA, "(index+4)", "<=", "fLength", (const char *)v5, (const void *)v6);
  }
  *(unsigned char *)(*((void *)this + 1) + v4) = a2;
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(v4 + 1)) = BYTE1(a2);
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(v4 + 2)) = BYTE2(a2);
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(v4 + 3)) = HIBYTE(a2);
  *((_WORD *)this + 8) = v4 + 4;
}

uint64_t Tlv::putDWordAt(Tlv *this, int a2, unsigned int a3)
{
  uint64_t v6 = (const char *)(a3 + 4);
  int v7 = (const void *)*((unsigned __int16 *)this + 1);
  if (v6 > v7) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xCA, "(index+4)", "<=", "fLength", v6, v7);
  }
  *(unsigned char *)(*((void *)this + 1) + a3) = a2;
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(a3 + 1)) = BYTE1(a2);
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(a3 + 2)) = BYTE2(a2);
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(a3 + 3)) = HIBYTE(a2);
  return (unsigned __int16)v6;
}

uint64_t Tlv::putQWord(Tlv *this, const unint64_t *a2)
{
  uint64_t v4 = *((unsigned __int16 *)this + 8);
  uint64_t v5 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v4 + 8 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x8D, "(fIndex+8)", "<=", "fLength", (const char *)(v4 + 8), v5);
    LODWORD(v4) = *((unsigned __int16 *)this + 8);
  }
  uint64_t result = Tlv::putQWordAt(this, a2, v4);
  *((_WORD *)this + 8) = result;
  return result;
}

uint64_t Tlv::putQWordAt(Tlv *this, const unint64_t *a2, unsigned int a3)
{
  uint64_t v6 = (const char *)(a3 + 8);
  int v7 = (const void *)*((unsigned __int16 *)this + 1);
  if (v6 > v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xE4, "(index+8)", "<=", "fLength", v6, v7);
    LODWORD(v7) = *((unsigned __int16 *)this + 1);
  }
  uint64_t v8 = *a2;
  if (a3 + 4 > v7) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xCA, "(index+4)", "<=", "fLength", (const char *)(a3 + 4), (const void *)v7);
  }
  *(unsigned char *)(*((void *)this + 1) + a3) = v8;
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(a3 + 1)) = BYTE1(v8);
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(a3 + 2)) = BYTE2(v8);
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(a3 + 3)) = BYTE3(v8);
  uint64_t v9 = *a2;
  timespec v10 = (const char *)((unsigned __int16)(a3 + 4) + 4);
  pthread_t v11 = (const void *)*((unsigned __int16 *)this + 1);
  if (v10 > v11) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xCA, "(index+4)", "<=", "fLength", v10, v11);
  }
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(a3 + 4)) = BYTE4(v9);
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(a3 + 5)) = BYTE5(v9);
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(a3 + 6)) = BYTE6(v9);
  *(unsigned char *)(*((void *)this + 1) + (unsigned __int16)(a3 + 7)) = HIBYTE(v9);
  return (unsigned __int16)(a3 + 8);
}

void Tlv::putByteAt(Tlv *this, char a2, unsigned int a3)
{
  uint64_t v5 = (const void *)*((unsigned __int16 *)this + 1);
  uint64_t v6 = a3;
  if (v5 <= a3) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x9F, "(index+1)", "<=", "fLength", (const char *)(a3 + 1), v5);
  }
  *(unsigned char *)(*((void *)this + 1) + v6) = a2;
}

char *Tlv::putStringField(uint64_t a1, uint64_t a2)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v5 = *(void *)(a2 + 8);
  }
  uint64_t v6 = *(unsigned __int16 *)(a1 + 16);
  int v7 = (const void *)*(unsigned __int16 *)(a1 + 2);
  if (v5 + v6 > (unint64_t)v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xFC, "(fIndex + strlen)", "<=", "fLength", (const char *)(v5 + v6), v7);
    uint64_t v6 = *(unsigned __int16 *)(a1 + 16);
    LOBYTE(v4) = *(unsigned char *)(a2 + 23);
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = (const char *)a2;
  }
  else {
    uint64_t v8 = *(const char **)a2;
  }
  uint64_t result = strncpy((char *)(*(void *)(a1 + 8) + v6), v8, v5);
  *(_WORD *)(a1 + 16) += v5;
  return result;
}

void *Tlv::putData(Tlv *this, const void *__src, size_t __n)
{
  unsigned int v3 = __n;
  uint64_t v6 = (const char *)(*((unsigned __int16 *)this + 8) + __n);
  int v7 = (const void *)*((unsigned __int16 *)this + 1);
  if (v6 > v7) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x110, "(fIndex + length)", "<=", "fLength", v6, v7);
  }
  if (!__src) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x111, "src", "!=", "NULL", 0, 0);
  }
  uint64_t result = memcpy((void *)(*((void *)this + 1) + *((unsigned __int16 *)this + 8)), __src, v3);
  *((_WORD *)this + 8) += v3;
  return result;
}

uint64_t Tlv::getByte(Tlv *this)
{
  uint64_t v2 = *((unsigned __int16 *)this + 8);
  unsigned int v3 = (const void *)*((unsigned __int16 *)this + 1);
  if (v2 >= v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x125, "(fIndex+1)", "<=", "fLength", (const char *)(v2 + 1), v3);
    LODWORD(v2) = *((unsigned __int16 *)this + 8);
  }
  uint64_t v4 = *((void *)this + 1);
  *((_WORD *)this + 8) = v2 + 1;
  return *(unsigned __int8 *)(v4 + v2);
}

uint64_t Tlv::getWord(Tlv *this)
{
  uint64_t v2 = *((unsigned __int16 *)this + 8);
  unsigned int v3 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v2 + 2 > v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x138, "(fIndex+2)", "<=", "fLength", (const char *)(v2 + 2), v3);
    LODWORD(v2) = *((unsigned __int16 *)this + 8);
  }
  uint64_t v4 = *((void *)this + 1);
  *((_WORD *)this + 8) = v2 + 1;
  __int16 v5 = *(unsigned __int8 *)(v4 + v2);
  *((_WORD *)this + 8) = v2 + 2;
  return (unsigned __int16)(v5 | (*(unsigned __int8 *)(v4 + (unsigned __int16)(v2 + 1)) << 8));
}

uint64_t Tlv::getDWord(Tlv *this)
{
  uint64_t v2 = *((unsigned __int16 *)this + 8);
  unsigned int v3 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v2 + 4 > v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x14E, "(fIndex+4)", "<=", "fLength", (const char *)(v2 + 4), v3);
    LODWORD(v2) = *((unsigned __int16 *)this + 8);
  }
  uint64_t v4 = *((void *)this + 1);
  *((_WORD *)this + 8) = v2 + 1;
  int v5 = *(unsigned __int8 *)(v4 + v2);
  *((_WORD *)this + 8) = v2 + 2;
  int v6 = *(unsigned __int8 *)(v4 + (unsigned __int16)(v2 + 1));
  *((_WORD *)this + 8) = v2 + 3;
  int v7 = *(unsigned __int8 *)(v4 + (unsigned __int16)(v2 + 2));
  *((_WORD *)this + 8) = v2 + 4;
  return v5 | (v6 << 8) | (v7 << 16) | (*(unsigned __int8 *)(v4 + (unsigned __int16)(v2 + 3)) << 24);
}

unint64_t Tlv::getQWord(Tlv *this)
{
  uint64_t v2 = *((unsigned __int16 *)this + 8);
  unsigned int v3 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v2 + 8 > v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x16A, "(fIndex+8)", "<=", "fLength", (const char *)(v2 + 8), v3);
    LODWORD(v2) = *((unsigned __int16 *)this + 8);
    LODWORD(v3) = *((unsigned __int16 *)this + 1);
  }
  uint64_t v4 = (const char *)(v2 + 4);
  if (v4 > v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x14E, "(fIndex+4)", "<=", "fLength", v4, (const void *)v3);
    LODWORD(v2) = *((unsigned __int16 *)this + 8);
    LODWORD(v3) = *((unsigned __int16 *)this + 1);
  }
  uint64_t v5 = *((void *)this + 1);
  *((_WORD *)this + 8) = v2 + 1;
  uint64_t v6 = *(unsigned __int8 *)(v5 + v2);
  *((_WORD *)this + 8) = v2 + 2;
  uint64_t v7 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 1));
  unsigned __int16 v8 = v2 + 3;
  *((_WORD *)this + 8) = v2 + 3;
  uint64_t v9 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 2));
  unsigned __int16 v10 = v2 + 4;
  *((_WORD *)this + 8) = v10;
  uint64_t v11 = *(unsigned __int8 *)(v5 + v8);
  pthread_attr_t v12 = (const char *)(v10 + 4);
  if (v12 > v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x14E, "(fIndex+4)", "<=", "fLength", v12, (const void *)v3);
    unsigned __int16 v10 = *((_WORD *)this + 8);
    uint64_t v5 = *((void *)this + 1);
  }
  *((_WORD *)this + 8) = v10 + 1;
  uint64_t v13 = *(unsigned __int8 *)(v5 + v10);
  *((_WORD *)this + 8) = v10 + 2;
  uint64_t v14 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 1));
  *((_WORD *)this + 8) = v10 + 3;
  uint64_t v15 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 2));
  *((_WORD *)this + 8) = v10 + 4;
  return v6 | (v7 << 8) | (v9 << 16) | (v11 << 24) | (v13 << 32) | (v14 << 40) | (v15 << 48) | ((unint64_t)*(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 3)) << 56);
}

uint64_t Tlv::getByteAt(Tlv *this, unsigned int a2)
{
  unsigned int v3 = (const void *)*((unsigned __int16 *)this + 1);
  uint64_t v4 = a2;
  if (v3 <= a2) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x17F, "(index+1)", "<=", "fLength", (const char *)(a2 + 1), v3);
  }
  return *(unsigned __int8 *)(*((void *)this + 1) + v4);
}

uint64_t Tlv::getWordAt(Tlv *this, unsigned int a2)
{
  uint64_t v4 = (const char *)(a2 + 2);
  uint64_t v5 = (const void *)*((unsigned __int16 *)this + 1);
  if (v4 > v5) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x191, "(index+2)", "<=", "fLength", v4, v5);
  }
  return (unsigned __int16)(*(unsigned __int8 *)(*((void *)this + 1) + a2) | (*(unsigned __int8 *)(*((void *)this + 1) + (unsigned __int16)(a2 + 1)) << 8));
}

uint64_t Tlv::getDWordAt(Tlv *this, unsigned int a2)
{
  uint64_t v4 = (const char *)(a2 + 4);
  uint64_t v5 = (const void *)*((unsigned __int16 *)this + 1);
  if (v4 > v5) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1A6, "(index+4)", "<=", "fLength", v4, v5);
  }
  uint64_t v6 = *((void *)this + 1);
  return *(unsigned __int8 *)(v6 + a2) | (*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 1)) << 8) | (*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 2)) << 16) | (*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 3)) << 24);
}

unint64_t Tlv::getQWordAt(Tlv *this, unsigned int a2)
{
  uint64_t v4 = (const char *)(a2 + 8);
  uint64_t v5 = (const void *)*((unsigned __int16 *)this + 1);
  if (v4 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1C2, "(index+8)", "<=", "fLength", v4, v5);
    LODWORD(v5) = *((unsigned __int16 *)this + 1);
  }
  if (a2 + 4 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1A6, "(index+4)", "<=", "fLength", (const char *)(a2 + 4), (const void *)v5);
    LODWORD(v5) = *((unsigned __int16 *)this + 1);
  }
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *(unsigned __int8 *)(v6 + a2);
  uint64_t v8 = *(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 1));
  uint64_t v9 = *(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 2));
  uint64_t v10 = *(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 3));
  uint64_t v11 = (const char *)((unsigned __int16)(a2 + 4) + 4);
  if (v11 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1A6, "(index+4)", "<=", "fLength", v11, (const void *)v5);
    uint64_t v6 = *((void *)this + 1);
  }
  return v7 | (v8 << 8) | (v9 << 16) | (v10 << 24) | ((unint64_t)*(unsigned __int8 *)(v6
                                                                                           + (unsigned __int16)(a2 + 4)) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 5)) << 40) | ((unint64_t)*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 6)) << 48) | ((unint64_t)*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 7)) << 56);
}

std::string *Tlv::getStringField@<X0>(Tlv *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v4 = *((unsigned __int16 *)this + 1);
  unsigned int v5 = *((unsigned __int16 *)this + 8);
  if (v4 <= (int)v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1DA, "(fLength - fIndex)", ">", "0", (const char *)(int)(v4 - v5), 0);
    LOWORD(v4) = *((_WORD *)this + 1);
    unsigned int v5 = *((unsigned __int16 *)this + 8);
  }
  uint64_t result = std::string::__assign_external((std::string *)a2, (const std::string::value_type *)(*((void *)this + 1) + v5), (unsigned __int16)(v4 - v5));
  __int16 v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0) {
    __int16 v7 = *(_WORD *)(a2 + 8);
  }
  *((_WORD *)this + 8) += v7;
  return result;
}

void sub_1A10ECC34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *Tlv::getStringFieldAt@<X0>(Tlv *this@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  int v6 = *((unsigned __int16 *)this + 1);
  if (v6 <= (int)a2)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1F4, "(fLength - index)", ">", "0", (const char *)(int)(v6 - a2), 0);
    LOWORD(v6) = *((_WORD *)this + 1);
  }
  return std::string::__assign_external(a3, (const std::string::value_type *)(*((void *)this + 1) + a2), (unsigned __int16)(v6 - a2));
}

void sub_1A10ECCE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Tlv::getData(Tlv *this, int a2)
{
  __int16 v2 = a2;
  unsigned int v4 = *((unsigned __int16 *)this + 8);
  unsigned int v5 = (const char *)(v4 + a2);
  int v6 = (const void *)*((unsigned __int16 *)this + 1);
  if (v5 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x20C, "(fIndex + length)", "<=", "fLength", v5, v6);
    unsigned int v4 = *((unsigned __int16 *)this + 8);
  }
  *((_WORD *)this + 8) = v4 + v2;
  return *((void *)this + 1) + v4;
}

uint64_t Tlv::getDataAt(Tlv *this, unsigned int a2, int a3)
{
  unsigned int v5 = (const char *)(a3 + a2);
  int v6 = (const void *)*((unsigned __int16 *)this + 1);
  if (v5 > v6) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x226, "(index + length)", "<=", "fLength", v5, v6);
  }
  return *((void *)this + 1) + a2;
}

void Tlv::Writer::putByte(Tlv::Writer *this, char a2)
{
  uint64_t v4 = *((unsigned __int16 *)this + 4);
  uint64_t v5 = *(void *)this;
  int v6 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v4 >= v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x230, "(fIndex+1)", "<=", "fTlv->getLength()", (const char *)(v4 + 1), v6);
    uint64_t v5 = *(void *)this;
    LODWORD(v4) = *((unsigned __int16 *)this + 4);
  }
  uint64_t v7 = *(void *)(v5 + 8);
  *((_WORD *)this + 4) = v4 + 1;
  *(unsigned char *)(v7 + v4) = a2;
}

void Tlv::Writer::putWord(Tlv::Writer *this, __int16 a2)
{
  uint64_t v4 = *((unsigned __int16 *)this + 4);
  uint64_t v5 = *(void *)this;
  int v6 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if ((int)v4 + 2 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x257, "(index+2)", "<=", "fTlv->getLength()", (const char *)(v4 + 2), v6);
    uint64_t v5 = *(void *)this;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  *(unsigned char *)(v7 + v4) = a2;
  *(unsigned char *)(v7 + (unsigned __int16)(v4 + 1)) = HIBYTE(a2);
  *((_WORD *)this + 4) = v4 + 2;
}

uint64_t Tlv::Writer::putWordAt(Tlv::Writer *this, __int16 a2, unsigned int a3)
{
  uint64_t v5 = (const char *)(a3 + 2);
  uint64_t v6 = *(void *)this;
  uint64_t v7 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v5 > v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x257, "(index+2)", "<=", "fTlv->getLength()", v5, v7);
    uint64_t v6 = *(void *)this;
  }
  uint64_t v9 = *(void *)(v6 + 8);
  *(unsigned char *)(v9 + a3) = a2;
  *(unsigned char *)(v9 + (unsigned __int16)(a3 + 1)) = HIBYTE(a2);
  return (unsigned __int16)v5;
}

void Tlv::Writer::putDWord(Tlv::Writer *this, int a2)
{
  uint64_t v4 = *((unsigned __int16 *)this + 4);
  uint64_t v5 = *(void *)this;
  uint64_t v6 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if ((int)v4 + 4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", (const char *)(v4 + 4), v6);
    uint64_t v5 = *(void *)this;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  *(unsigned char *)(v7 + v4) = a2;
  *(unsigned char *)(v7 + (unsigned __int16)(v4 + 1)) = BYTE1(a2);
  *(unsigned char *)(v7 + (unsigned __int16)(v4 + 2)) = BYTE2(a2);
  *(unsigned char *)(v7 + (unsigned __int16)(v4 + 3)) = HIBYTE(a2);
  *((_WORD *)this + 4) = v4 + 4;
}

uint64_t Tlv::Writer::putDWordAt(Tlv::Writer *this, int a2, unsigned int a3)
{
  uint64_t v5 = (const char *)(a3 + 4);
  uint64_t v6 = *(void *)this;
  uint64_t v7 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v5 > v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", v5, v7);
    uint64_t v6 = *(void *)this;
  }
  uint64_t v9 = *(void *)(v6 + 8);
  *(unsigned char *)(v9 + a3) = a2;
  *(unsigned char *)(v9 + (unsigned __int16)(a3 + 1)) = BYTE1(a2);
  *(unsigned char *)(v9 + (unsigned __int16)(a3 + 2)) = BYTE2(a2);
  *(unsigned char *)(v9 + (unsigned __int16)(a3 + 3)) = HIBYTE(a2);
  return (unsigned __int16)v5;
}

uint64_t Tlv::Writer::putQWord(Tlv::Writer *this, uint64_t a2)
{
  uint64_t result = Tlv::Writer::putQWordAt(this, a2, *((unsigned __int16 *)this + 4));
  *((_WORD *)this + 4) = result;
  return result;
}

uint64_t Tlv::Writer::putQWordAt(Tlv::Writer *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = (const char *)(a3 + 8);
  uint64_t v7 = *(void *)this;
  uint64_t v8 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v6 > v8)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x26F, "(index+8)", "<=", "fTlv->getLength()", v6, v8);
    uint64_t v7 = *(void *)this;
    LODWORD(v8) = *(unsigned __int16 *)(*(void *)this + 2);
  }
  if (a3 + 4 > v8)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", (const char *)(a3 + 4), (const void *)v8);
    uint64_t v7 = *(void *)this;
  }
  uint64_t v9 = *(void *)(v7 + 8);
  *(unsigned char *)(v9 + a3) = a2;
  *(unsigned char *)(v9 + (unsigned __int16)(a3 + 1)) = BYTE1(a2);
  *(unsigned char *)(v9 + (unsigned __int16)(a3 + 2)) = BYTE2(a2);
  *(unsigned char *)(v9 + (unsigned __int16)(a3 + 3)) = BYTE3(a2);
  uint64_t v10 = (const char *)((unsigned __int16)(a3 + 4) + 4);
  uint64_t v11 = *(void *)this;
  pthread_attr_t v12 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v10 > v12)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", v10, v12);
    uint64_t v11 = *(void *)this;
  }
  uint64_t v13 = *(void *)(v11 + 8);
  *(unsigned char *)(v13 + (unsigned __int16)(a3 + 4)) = BYTE4(a2);
  *(unsigned char *)(v13 + (unsigned __int16)(a3 + 5)) = BYTE5(a2);
  *(unsigned char *)(v13 + (unsigned __int16)(a3 + 6)) = BYTE6(a2);
  *(unsigned char *)(v13 + (unsigned __int16)(a3 + 7)) = HIBYTE(a2);
  return (unsigned __int16)(a3 + 8);
}

void Tlv::Writer::putFloat(Tlv::Writer *this, float a2)
{
  uint64_t v4 = *((unsigned __int16 *)this + 4);
  uint64_t v5 = *(void *)this;
  uint64_t v6 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if ((int)v4 + 4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", (const char *)(v4 + 4), v6);
    uint64_t v5 = *(void *)this;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  *(unsigned char *)(v7 + v4) = LOBYTE(a2);
  *(unsigned char *)(v7 + (unsigned __int16)(v4 + 1)) = BYTE1(a2);
  *(unsigned char *)(v7 + (unsigned __int16)(v4 + 2)) = BYTE2(a2);
  *(unsigned char *)(v7 + (unsigned __int16)(v4 + 3)) = HIBYTE(a2);
  *((_WORD *)this + 4) = v4 + 4;
}

uint64_t Tlv::Writer::putFloatAt(Tlv::Writer *this, float a2, unsigned int a3)
{
  uint64_t v5 = (const char *)(a3 + 4);
  uint64_t v6 = *(void *)this;
  uint64_t v7 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v5 > v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", v5, v7);
    uint64_t v6 = *(void *)this;
  }
  uint64_t v9 = *(void *)(v6 + 8);
  *(unsigned char *)(v9 + a3) = LOBYTE(a2);
  *(unsigned char *)(v9 + (unsigned __int16)(a3 + 1)) = BYTE1(a2);
  *(unsigned char *)(v9 + (unsigned __int16)(a3 + 2)) = BYTE2(a2);
  *(unsigned char *)(v9 + (unsigned __int16)(a3 + 3)) = HIBYTE(a2);
  return (unsigned __int16)v5;
}

uint64_t Tlv::Writer::putDouble(Tlv::Writer *this, double a2)
{
  uint64_t result = Tlv::Writer::putQWordAt(this, *(uint64_t *)&a2, *((unsigned __int16 *)this + 4));
  *((_WORD *)this + 4) = result;
  return result;
}

uint64_t Tlv::Writer::putDoubleAt(Tlv::Writer *this, double a2, unsigned int a3)
{
  return Tlv::Writer::putQWordAt(this, *(uint64_t *)&a2, a3);
}

void Tlv::Writer::putByteAt(Tlv::Writer *this, char a2, unsigned int a3)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  uint64_t v6 = a3;
  if (v5 <= a3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x24F, "(index+1)", "<=", "fTlv->getLength()", (const char *)(a3 + 1), v5);
    uint64_t v4 = *(void *)this;
  }
  *(unsigned char *)(*(void *)(v4 + 8) + v6) = a2;
}

void *Tlv::Writer::putStringField(unsigned __int16 *a1, const void **a2)
{
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (const void *)*(unsigned __int16 *)(*(void *)a1 + 2);
  if (v5 + v6 > (unint64_t)v8)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x289, "(fIndex + strlen)", "<=", "fTlv->getLength()", (const char *)(v5 + v6), v8);
    uint64_t v7 = *(void *)a1;
    uint64_t v6 = a1[4];
    LOBYTE(v4) = *((unsigned char *)a2 + 23);
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *a2;
  }
  uint64_t result = memcpy((void *)(*(void *)(v7 + 8) + v6), v9, v5);
  a1[4] += v5;
  return result;
}

void *Tlv::Writer::putData(Tlv::Writer *this, const void *__src, size_t __n)
{
  unsigned int v3 = __n;
  uint64_t v6 = (const char *)(*((unsigned __int16 *)this + 4) + __n);
  uint64_t v7 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v6 > v7) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x293, "(fIndex + length)", "<=", "fTlv->getLength()", v6, v7);
  }
  if (!__src) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x294, "src", "!=", "NULL", 0, 0);
  }
  uint64_t result = memcpy((void *)(*(void *)(*(void *)this + 8) + *((unsigned __int16 *)this + 4)), __src, v3);
  *((_WORD *)this + 4) += v3;
  return result;
}

uint64_t Tlv::Reader::getByte(Tlv::Reader *this)
{
  uint64_t v2 = *((unsigned __int16 *)this + 4);
  uint64_t v3 = *(void *)this;
  int v4 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v2 >= v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x29F, "(fIndex+1)", "<=", "fTlv->getLength()", (const char *)(v2 + 1), v4);
    uint64_t v3 = *(void *)this;
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
  }
  uint64_t v5 = *(void *)(v3 + 8);
  *((_WORD *)this + 4) = v2 + 1;
  return *(unsigned __int8 *)(v5 + v2);
}

uint64_t Tlv::Reader::getWord(Tlv::Reader *this)
{
  uint64_t v2 = *((unsigned __int16 *)this + 4);
  uint64_t v3 = *(void *)this;
  int v4 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if ((int)v2 + 2 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2A7, "(fIndex+2)", "<=", "fTlv->getLength()", (const char *)(v2 + 2), v4);
    uint64_t v3 = *(void *)this;
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
  }
  uint64_t v5 = *(void *)(v3 + 8);
  *((_WORD *)this + 4) = v2 + 1;
  __int16 v6 = *(unsigned __int8 *)(v5 + v2);
  *((_WORD *)this + 4) = v2 + 2;
  return (unsigned __int16)(v6 | (*(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 1)) << 8));
}

uint64_t Tlv::Reader::getDWord(Tlv::Reader *this)
{
  uint64_t v2 = *((unsigned __int16 *)this + 4);
  uint64_t v3 = *(void *)this;
  int v4 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if ((int)v2 + 4 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2B2, "(fIndex+4)", "<=", "fTlv->getLength()", (const char *)(v2 + 4), v4);
    uint64_t v3 = *(void *)this;
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
  }
  uint64_t v5 = *(void *)(v3 + 8);
  *((_WORD *)this + 4) = v2 + 1;
  int v6 = *(unsigned __int8 *)(v5 + v2);
  *((_WORD *)this + 4) = v2 + 2;
  int v7 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 1));
  *((_WORD *)this + 4) = v2 + 3;
  int v8 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 2));
  *((_WORD *)this + 4) = v2 + 4;
  return v6 | (v7 << 8) | (v8 << 16) | (*(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 3)) << 24);
}

unint64_t Tlv::Reader::getQWord(Tlv::Reader *this)
{
  uint64_t v2 = *((unsigned __int16 *)this + 4);
  uint64_t v3 = *(void *)this;
  int v4 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if ((int)v2 + 8 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2C2, "(fIndex+8)", "<=", "fTlv->getLength()", (const char *)(v2 + 8), v4);
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
    uint64_t v3 = *(void *)this;
    LODWORD(v4) = *(unsigned __int16 *)(*(void *)this + 2);
  }
  if ((int)v2 + 4 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2B2, "(fIndex+4)", "<=", "fTlv->getLength()", (const char *)(v2 + 4), (const void *)v4);
    uint64_t v3 = *(void *)this;
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
    LODWORD(v4) = *(unsigned __int16 *)(*(void *)this + 2);
  }
  uint64_t v5 = *(void *)(v3 + 8);
  *((_WORD *)this + 4) = v2 + 1;
  uint64_t v6 = *(unsigned __int8 *)(v5 + v2);
  *((_WORD *)this + 4) = v2 + 2;
  uint64_t v7 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 1));
  unsigned __int16 v8 = v2 + 3;
  *((_WORD *)this + 4) = v2 + 3;
  uint64_t v9 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 2));
  unsigned __int16 v10 = v2 + 4;
  *((_WORD *)this + 4) = v10;
  uint64_t v11 = *(unsigned __int8 *)(v5 + v8);
  if (v10 + 4 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2B2, "(fIndex+4)", "<=", "fTlv->getLength()", (const char *)(v10 + 4), (const void *)v4);
    unsigned __int16 v10 = *((_WORD *)this + 4);
    uint64_t v5 = *(void *)(*(void *)this + 8);
  }
  *((_WORD *)this + 4) = v10 + 1;
  uint64_t v12 = *(unsigned __int8 *)(v5 + v10);
  *((_WORD *)this + 4) = v10 + 2;
  uint64_t v13 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 1));
  *((_WORD *)this + 4) = v10 + 3;
  uint64_t v14 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 2));
  *((_WORD *)this + 4) = v10 + 4;
  return v6 | (v7 << 8) | (v9 << 16) | (v11 << 24) | (v12 << 32) | (v13 << 40) | (v14 << 48) | ((unint64_t)*(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 3)) << 56);
}

uint64_t Tlv::Reader::getByteAt(Tlv::Reader *this, unsigned int a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  uint64_t v4 = a2;
  if (v3 <= a2)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2CC, "(index+1)", "<=", "fTlv->getLength()", (const char *)(a2 + 1), v3);
    uint64_t v2 = *(void *)this;
  }
  return *(unsigned __int8 *)(*(void *)(v2 + 8) + v4);
}

uint64_t Tlv::Reader::getWordAt(Tlv::Reader *this, unsigned int a2)
{
  uint64_t v3 = (const char *)(a2 + 2);
  uint64_t v4 = *(void *)this;
  uint64_t v5 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v3 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2D4, "(index+2)", "<=", "fTlv->getLength()", v3, v5);
    uint64_t v4 = *(void *)this;
  }
  return (unsigned __int16)(*(unsigned __int8 *)(*(void *)(v4 + 8) + a2) | (*(unsigned __int8 *)(*(void *)(v4 + 8)
                                                                                                 + (unsigned __int16)(a2 + 1)) << 8));
}

uint64_t Tlv::Reader::getDWordAt(Tlv::Reader *this, unsigned int a2)
{
  uint64_t v3 = (const char *)(a2 + 4);
  uint64_t v4 = *(void *)this;
  uint64_t v5 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v3 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2DF, "(index+4)", "<=", "fTlv->getLength()", v3, v5);
    uint64_t v4 = *(void *)this;
  }
  uint64_t v7 = *(void *)(v4 + 8);
  return *(unsigned __int8 *)(v7 + a2) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 1)) << 8) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 2)) << 16) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 3)) << 24);
}

unint64_t Tlv::Reader::getQWordAt(Tlv::Reader *this, unsigned int a2)
{
  uint64_t v4 = (const char *)(a2 + 8);
  uint64_t v5 = *(void *)this;
  uint64_t v6 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2F0, "(index+8)", "<=", "fTlv->getLength()", v4, v6);
    uint64_t v5 = *(void *)this;
    LODWORD(v6) = *(unsigned __int16 *)(*(void *)this + 2);
  }
  if (a2 + 4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2DF, "(index+4)", "<=", "fTlv->getLength()", (const char *)(a2 + 4), (const void *)v6);
    uint64_t v5 = *(void *)this;
    LODWORD(v6) = *(unsigned __int16 *)(*(void *)this + 2);
  }
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + a2);
  uint64_t v9 = *(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 1));
  uint64_t v10 = *(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 2));
  uint64_t v11 = *(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 3));
  uint64_t v12 = (const char *)((unsigned __int16)(a2 + 4) + 4);
  if (v12 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2DF, "(index+4)", "<=", "fTlv->getLength()", v12, (const void *)v6);
    uint64_t v7 = *(void *)(*(void *)this + 8);
  }
  return v8 | (v9 << 8) | (v10 << 16) | (v11 << 24) | ((unint64_t)*(unsigned __int8 *)(v7
                                                                                            + (unsigned __int16)(a2 + 4)) << 32) | ((unint64_t)*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 5)) << 40) | ((unint64_t)*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 6)) << 48) | ((unint64_t)*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 7)) << 56);
}

float Tlv::Reader::getFloat(Tlv::Reader *this)
{
  uint64_t v2 = *((unsigned __int16 *)this + 4);
  uint64_t v3 = *(void *)this;
  uint64_t v4 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if ((int)v2 + 4 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2B2, "(fIndex+4)", "<=", "fTlv->getLength()", (const char *)(v2 + 4), v4);
    uint64_t v3 = *(void *)this;
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
  }
  uint64_t v5 = *(void *)(v3 + 8);
  *((_WORD *)this + 4) = v2 + 1;
  int v6 = *(unsigned __int8 *)(v5 + v2);
  *((_WORD *)this + 4) = v2 + 2;
  int v7 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 1));
  *((_WORD *)this + 4) = v2 + 3;
  int v8 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 2));
  *((_WORD *)this + 4) = v2 + 4;
  LODWORD(result) = v6 | (v7 << 8) | (v8 << 16) | (*(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 3)) << 24);
  return result;
}

float Tlv::Reader::getFloatAt(Tlv::Reader *this, unsigned int a2)
{
  uint64_t v3 = (const char *)(a2 + 4);
  uint64_t v4 = *(void *)this;
  uint64_t v5 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v3 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2DF, "(index+4)", "<=", "fTlv->getLength()", v3, v5);
    uint64_t v4 = *(void *)this;
  }
  uint64_t v7 = *(void *)(v4 + 8);
  LODWORD(result) = *(unsigned __int8 *)(v7 + a2) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 1)) << 8) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 2)) << 16) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 3)) << 24);
  return result;
}

double Tlv::Reader::getDouble(Tlv::Reader *this)
{
  return COERCE_DOUBLE(Tlv::Reader::getQWord(this));
}

double Tlv::Reader::getDoubleAt(Tlv::Reader *this, unsigned int a2)
{
  return COERCE_DOUBLE(Tlv::Reader::getQWordAt(this, a2));
}

void Tlv::Reader::getStringField(Tlv::Reader *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(unsigned __int16 *)(*(void *)this + 2);
  uint64_t v6 = *((unsigned __int16 *)this + 4);
  if (v5 <= v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x313, "(fTlv->getLength() - fIndex)", ">", "0", (const char *)(v5 - v6), 0);
    uint64_t v4 = *(void *)this;
    LODWORD(v5) = *(unsigned __int16 *)(*(void *)this + 2);
    LODWORD(v6) = *((unsigned __int16 *)this + 4);
  }
  memset(a2, 170, 24);
  uint64_t v7 = *(void *)(v4 + 8);
  size_t v8 = (unsigned __int16)(v5 - v6);
  if ((unsigned __int16)(v5 - v6) >= 0x17u)
  {
    if ((v8 | 7) == 0x17) {
      uint64_t v10 = ((unsigned __int16)v8 & 0xFFF8) + 8;
    }
    else {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v9 = operator new(v10 + 1);
    a2[1] = v8;
    a2[2] = v10 - 0x7FFFFFFFFFFFFFFFLL;
    *a2 = v9;
    goto LABEL_10;
  }
  *((unsigned char *)a2 + 23) = v5 - v6;
  uint64_t v9 = a2;
  if (v5 != v6) {
LABEL_10:
  }
    memmove(v9, (const void *)(v7 + v6), v8);
  *((unsigned char *)v9 + v8) = 0;
  __int16 v11 = *((unsigned __int8 *)a2 + 23);
  if ((v11 & 0x80u) != 0) {
    __int16 v11 = *((_WORD *)a2 + 4);
  }
  *((_WORD *)this + 4) += v11;
}

void Tlv::Reader::getStringFieldAt(Tlv::Reader *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)this;
  uint64_t v6 = *(unsigned __int16 *)(*(void *)this + 2);
  uint64_t v7 = a2;
  if (v6 <= a2)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x320, "(fTlv->getLength() - index)", ">", "0", (const char *)(v6 - a2), 0);
    uint64_t v5 = *(void *)this;
    LODWORD(v6) = *(unsigned __int16 *)(*(void *)this + 2);
  }
  uint64_t v9 = *(void *)(v5 + 8);
  size_t v10 = (unsigned __int16)(v6 - a2);
  if ((unsigned __int16)(v6 - a2) >= 0x17u)
  {
    if ((v10 | 7) == 0x17) {
      uint64_t v11 = ((unsigned __int16)v10 & 0xFFF8) + 8;
    }
    else {
      uint64_t v11 = v10 | 7;
    }
    uint64_t v12 = operator new(v11 + 1);
    a3[1] = v10;
    a3[2] = v11 - 0x7FFFFFFFFFFFFFFFLL;
    *a3 = v12;
    a3 = v12;
  }
  else
  {
    *((unsigned char *)a3 + 23) = v6 - a2;
    if (v6 == a2)
    {
      *((unsigned char *)a3 + v10) = 0;
      return;
    }
  }
  memmove(a3, (const void *)(v9 + v7), v10);
  *((unsigned char *)a3 + v10) = 0;
}

uint64_t Tlv::Reader::getData(Tlv::Reader *this, int a2)
{
  __int16 v2 = a2;
  unsigned int v4 = *((unsigned __int16 *)this + 4);
  uint64_t v5 = (const char *)(v4 + a2);
  uint64_t v6 = *(void *)this;
  uint64_t v7 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v5 > v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x32A, "(fIndex + length)", "<=", "fTlv->getLength()", v5, v7);
    unsigned int v4 = *((unsigned __int16 *)this + 4);
    uint64_t v6 = *(void *)this;
  }
  *((_WORD *)this + 4) = v4 + v2;
  return *(void *)(v6 + 8) + v4;
}

uint64_t Tlv::Reader::getDataAt(Tlv::Reader *this, unsigned int a2, int a3)
{
  unsigned int v4 = (const char *)(a3 + a2);
  uint64_t v5 = *(void *)this;
  uint64_t v6 = (const void *)*(unsigned __int16 *)(*(void *)this + 2);
  if (v4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x334, "(index + length)", "<=", "fTlv->getLength()", v4, v6);
    uint64_t v5 = *(void *)this;
  }
  return *(void *)(v5 + 8) + a2;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) < __n - v8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      unint64_t v8 = 22;
      uint64_t v9 = this;
LABEL_7:
      std::string::size_type v11 = 2 * v8;
      if (__n > 2 * v8) {
        std::string::size_type v11 = __n;
      }
      uint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v12 = v11 | 7;
      }
      if (v11 >= 0x17) {
        size_t v13 = v12 + 1;
      }
      else {
        size_t v13 = 23;
      }
      uint64_t v7 = operator new(v13);
      memcpy(v7, __s, __n);
      if (v8 != 22) {
        operator delete(v9);
      }
      this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_22:
      this->__r_.__value_.__l.__size_ = __n;
      goto LABEL_23;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_22;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_23:
  *((unsigned char *)v7 + __n) = 0;
  return this;
}

const char *qmi::asLongString()
{
  float result = "QMI Control Service";
  switch("QMI Control Service")
  {
    case 0u:
      return result;
    case 1u:
      float result = "QMI Wireless Data Service";
      break;
    case 2u:
      float result = "QMI Device Management Service";
      break;
    case 3u:
      float result = "QMI Network Access Service";
      break;
    case 4u:
      float result = "QMI Qos Service";
      break;
    case 5u:
      float result = "QMI Wireless Messaging Service";
      break;
    case 6u:
      float result = "QMI Position Determination Service";
      break;
    case 8u:
      float result = "QMI Access Terminal Service";
      break;
    case 9u:
      float result = "QMI Voice Service";
      break;
    case 0xAu:
      float result = "QMI Card App Toolkit";
      break;
    case 0xBu:
      float result = "QMI User Identity Module";
      break;
    case 0xCu:
      float result = "QMI Phonebook Manager Service";
      break;
    case 0x1Au:
      float result = "QMI Wireless Data Administrative Service";
      break;
    case 0x22u:
      float result = "QMI Coexistence Service";
      break;
    case 0x24u:
      float result = "QMI Persistent Device Service";
      break;
    case 0x28u:
      float result = "QMI 5WI 787 Service";
      break;
    case 0x2Au:
      float result = "QMI Data System Determination";
      break;
    case 0x2Bu:
      float result = "QMI Subsystem Control";
      break;
    case 0x2Cu:
      float result = "QMI Modem File System Extended Service";
      break;
    case 0x30u:
      float result = "QMI Data Filter Service";
      break;
    case 0x52u:
      float result = "QMI Media Service Extension";
      break;
    case 0xE1u:
      float result = "QMI Audio Service";
      break;
    case 0xE2u:
      float result = "QMI Board Support Package Service";
      break;
    case 0xE3u:
      float result = "QMI Carrier IQ Service";
      break;
    case 0xE4u:
      float result = "QMI Apple Wireless Diagnostics";
      break;
    case 0xE5u:
      float result = "QMI Vinyl Service";
      break;
    case 0xE6u:
      float result = "QMI Mav 5WI Service";
      break;
    case 0xE7u:
      float result = "QMI Enhnaced Link Quality Metric Service";
      break;
    case 0xE8u:
      float result = "QMI Mav P2P Service";
      break;
    case 0xE9u:
      float result = "QMI BSP APPS Service";
      break;
    case 0xEAu:
      float result = "QMI Stewie Service";
      break;
    default:
      float result = "Unknown Service";
      break;
  }
  return result;
}

uint64_t qmi::serviceTypeFromString(uint64_t a1)
{
  int v2 = *(char *)(a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 == 2)
  {
    if (v2 >= 0) {
      uint64_t v14 = (_WORD *)a1;
    }
    else {
      uint64_t v14 = *(_WORD **)a1;
    }
    if (!memcmp(v14, "AT", 2uLL)) {
      return 8;
    }
    if (*v14 == 21334) {
      return 9;
    }
  }
  else if (v3 == 3)
  {
    if (v2 >= 0) {
      unsigned int v4 = (unsigned char *)a1;
    }
    else {
      unsigned int v4 = *(unsigned char **)a1;
    }
    if (*(_WORD *)v4 == 21571 && v4[2] == 76) {
      return 0;
    }
    if (*(_WORD *)v4 == 17495 && v4[2] == 83) {
      return 1;
    }
    if (*(_WORD *)v4 == 19780 && v4[2] == 83) {
      return 2;
    }
    if (*(_WORD *)v4 == 16718 && v4[2] == 83) {
      return 3;
    }
    if (*(_WORD *)v4 == 20305 && v4[2] == 83) {
      return 4;
    }
    if (*(_WORD *)v4 == 19799 && v4[2] == 83) {
      return 5;
    }
    if (*(_WORD *)v4 == 17488 && v4[2] == 83) {
      return 6;
    }
    if (!memcmp(v4, "CAT", 3uLL)) {
      return 10;
    }
    if (*(_WORD *)v4 == 18773 && v4[2] == 77) {
      return 11;
    }
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "PBM")) {
    return 12;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "AUDIO")) {
    return 225;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "BSP")) {
    return 226;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "CIQ")) {
    return 227;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "AWD")) {
    return 228;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "COEX")) {
    return 34;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "DSD")) {
    return 42;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "MFSE")) {
    return 44;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "VINYL")) {
    return 229;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "MAVIMS")) {
    return 230;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "ELQM")) {
    return 231;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "PDC")) {
    return 36;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "P2P")) {
    return 232;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "MS")) {
    return 82;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "WDA")) {
    return 26;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "APPS")) {
    return 233;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "DFS")) {
    return 48;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "SSCTL")) {
    return 43;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "SFT")) {
    return -22;
  }
  else {
    return -1;
  }
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    unint64_t v6 = a1;
  }
  else {
    unint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

qmi::ClientRouter *qmi::ClientRouter::ClientRouter(qmi::ClientRouter *this, os_log_s *a2)
{
  int v4 = operator new(0x60uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EF43D758;
  uint64_t v5 = MEMORY[0x1A622BDA0](v4 + 3, a2);
  v4[7] = 0;
  v4[6] = 0;
  v4[4] = 0;
  v4[5] = v4 + 6;
  v4[11] = 0;
  *(void *)this = v5;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v4;
  return this;
}

{
  void *v4;
  uint64_t v5;

  int v4 = operator new(0x60uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EF43D758;
  uint64_t v5 = MEMORY[0x1A622BDA0](v4 + 3, a2);
  v4[7] = 0;
  v4[6] = 0;
  v4[4] = 0;
  v4[5] = v4 + 6;
  v4[11] = 0;
  *(void *)this = v5;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v4;
  return this;
}

void sub_1A10EF1B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1A10EF244(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void qmi::ClientRouter::remove(void *a1, int a2)
{
  uint64_t v2 = *a1;
  int v4 = (uint64_t **)(*a1 + 24);
  uint64_t v3 = *v4;
  if (*v4)
  {
    uint64_t v5 = v4;
    unint64_t v6 = *v4;
    do
    {
      int v7 = *((_DWORD *)v6 + 8);
      BOOL v8 = v7 < a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t **)v6;
      }
      else {
        uint64_t v9 = (uint64_t **)(v6 + 1);
      }
      if (!v8) {
        uint64_t v5 = (uint64_t **)v6;
      }
      unint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((_DWORD *)v5 + 8) <= a2)
    {
      unint64_t v10 = v5[1];
      if (v10)
      {
        do
        {
          std::string::size_type v11 = v10;
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v5;
        do
        {
          std::string::size_type v11 = v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = (uint64_t **)v11;
        }
        while (!v13);
      }
      if (*(uint64_t ***)(v2 + 16) == v5) {
        *(void *)(v2 + 16) = v11;
      }
      --*(void *)(v2 + 32);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, (uint64_t *)v5);
      uint64_t v14 = (std::__shared_weak_count *)v5[8];
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      uint64_t v15 = (std::__shared_weak_count *)v5[6];
      if (v15) {
        std::__shared_weak_count::__release_weak(v15);
      }
      operator delete(v5);
    }
  }
}

uint64_t qmi::ClientRouter::has(uint64_t a1, int a2)
{
  uint64_t v2 = *(uint64_t **)(*(void *)a1 + 24);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    int v4 = *((_DWORD *)v2 + 8);
    if (v4 <= a2) {
      break;
    }
LABEL_3:
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      return 0;
    }
  }
  if (v4 < a2)
  {
    ++v2;
    goto LABEL_3;
  }
  return 1;
}

uint64_t qmi::ClientRouter::setHandler(uint64_t *a1, int a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v17 = a2;
  int v4 = (void *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      uint64_t v19 = v18;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v18);
    }
    else
    {
      uint64_t v19 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v20 = (unsigned int *)&v17;
  uint64_t v5 = *a1;
  if (!*(void *)(*a1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempted to enumerate an empty client map");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5A40DB8, MEMORY[0x1E4FBA1E8]);
  }
  unint64_t v6 = *(void **)(v5 + 16);
  int v7 = (void *)(v5 + 24);
  if (v6 != (void *)(v5 + 24))
  {
    uint64_t v8 = MEMORY[0x1E4F143A8];
    while (1)
    {
      int v9 = *((_DWORD *)v6 + 8);
      uint64_t v10 = (uint64_t)v19;
      unsigned int v11 = *v20;
      v21[0] = v8;
      v21[1] = 1174405120;
      v21[2] = ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke;
      v21[3] = &__block_descriptor_tmp_8;
      if (!v19) {
        goto LABEL_13;
      }
      if (v19 != v18) {
        break;
      }
      uint64_t v23 = v22;
      (*(void (**)(void *, void *))(v18[0] + 24))(v18, v22);
LABEL_15:
      int v24 = v9;
      qmi::Client::setHandler((uint64_t)(v6 + 5), v11, (uint64_t)v21);
      if (v23 == v22)
      {
        (*(void (**)(void *))(v22[0] + 32))(v22);
        uint64_t v12 = (void *)v6[1];
        if (v12) {
          goto LABEL_21;
        }
      }
      else
      {
        if (v23) {
          (*(void (**)(void))(*v23 + 40))();
        }
        uint64_t v12 = (void *)v6[1];
        if (v12)
        {
          do
          {
LABEL_21:
            BOOL v13 = v12;
            uint64_t v12 = (void *)*v12;
          }
          while (v12);
          goto LABEL_9;
        }
      }
      do
      {
        BOOL v13 = (void *)v6[2];
        BOOL v14 = *v13 == (void)v6;
        unint64_t v6 = v13;
      }
      while (!v14);
LABEL_9:
      unint64_t v6 = v13;
      if (v13 == v7) {
        goto LABEL_26;
      }
    }
    uint64_t v10 = (*(uint64_t (**)(void))(*v19 + 16))();
LABEL_13:
    uint64_t v23 = (void *)v10;
    goto LABEL_15;
  }
LABEL_26:
  uint64_t result = (uint64_t)v19;
  if (v19 == v18) {
    return (*(uint64_t (**)(void *))(v18[0] + 32))(v18);
  }
  if (v19) {
    return (*(uint64_t (**)(void))(*v19 + 40))();
  }
  return result;
}

{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  BOOL v14;
  uint64_t result;
  std::logic_error *exception;
  int v17;
  void v18[3];
  void *v19;
  int *v20;
  void aBlock[4];
  void v22[3];
  void *v23;
  int v24;
  uint64_t v25;

  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v17 = a2;
  int v4 = (void *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      uint64_t v19 = v18;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v18);
    }
    else
    {
      uint64_t v19 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v20 = &v17;
  uint64_t v5 = *a1;
  if (!*(void *)(*a1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempted to enumerate an empty client map");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5A40DB8, MEMORY[0x1E4FBA1E8]);
  }
  unint64_t v6 = *(void **)(v5 + 16);
  int v7 = (void *)(v5 + 24);
  if (v6 != (void *)(v5 + 24))
  {
    uint64_t v8 = MEMORY[0x1E4F143A8];
    while (1)
    {
      int v9 = *((_DWORD *)v6 + 8);
      uint64_t v10 = (uint64_t)v19;
      unsigned int v11 = *v20;
      aBlock[0] = v8;
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEN3xpc6objectEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke;
      aBlock[3] = &__block_descriptor_tmp_18_0;
      if (!v19) {
        goto LABEL_13;
      }
      if (v19 != v18) {
        break;
      }
      uint64_t v23 = v22;
      (*(void (**)(void *, void *))(v18[0] + 24))(v18, v22);
LABEL_15:
      int v24 = v9;
      qmi::Client::setHandler((uint64_t)(v6 + 5), v11, aBlock);
      if (v23 == v22)
      {
        (*(void (**)(void *))(v22[0] + 32))(v22);
        uint64_t v12 = (void *)v6[1];
        if (v12) {
          goto LABEL_21;
        }
      }
      else
      {
        if (v23) {
          (*(void (**)(void))(*v23 + 40))();
        }
        uint64_t v12 = (void *)v6[1];
        if (v12)
        {
          do
          {
LABEL_21:
            BOOL v13 = v12;
            uint64_t v12 = (void *)*v12;
          }
          while (v12);
          goto LABEL_9;
        }
      }
      do
      {
        BOOL v13 = (void *)v6[2];
        BOOL v14 = *v13 == (void)v6;
        unint64_t v6 = v13;
      }
      while (!v14);
LABEL_9:
      unint64_t v6 = v13;
      if (v13 == v7) {
        goto LABEL_26;
      }
    }
    uint64_t v10 = (*(uint64_t (**)(void))(*v19 + 16))();
LABEL_13:
    uint64_t v23 = (void *)v10;
    goto LABEL_15;
  }
LABEL_26:
  uint64_t result = (uint64_t)v19;
  if (v19 == v18) {
    return (*(uint64_t (**)(void *))(v18[0] + 32))(v18);
  }
  if (v19) {
    return (*(uint64_t (**)(void))(*v19 + 40))();
  }
  return result;
}

{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  void *v13;
  BOOL v14;
  uint64_t result;
  std::logic_error *exception;
  int v17;
  void v18[3];
  void *v19;
  unsigned int *v20;
  void aBlock[4];
  void v22[3];
  void *v23;
  int v24;
  uint64_t v25;

  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v17 = a2;
  int v4 = (void *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      uint64_t v19 = v18;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v18);
    }
    else
    {
      uint64_t v19 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v20 = (unsigned int *)&v17;
  uint64_t v5 = *a1;
  if (!*(void *)(*a1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempted to enumerate an empty client map");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5A40DB8, MEMORY[0x1E4FBA1E8]);
  }
  unint64_t v6 = *(void **)(v5 + 16);
  int v7 = (void *)(v5 + 24);
  if (v6 != (void *)(v5 + 24))
  {
    uint64_t v8 = MEMORY[0x1E4F143A8];
    while (1)
    {
      int v9 = *((_DWORD *)v6 + 8);
      uint64_t v10 = (uint64_t)v19;
      unsigned int v11 = *v20;
      aBlock[0] = v8;
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEN8dispatch5groupEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke;
      aBlock[3] = &__block_descriptor_tmp_20_0;
      if (!v19) {
        goto LABEL_13;
      }
      if (v19 != v18) {
        break;
      }
      uint64_t v23 = v22;
      (*(void (**)(void *, void *))(v18[0] + 24))(v18, v22);
LABEL_15:
      int v24 = v9;
      qmi::Client::setHandler((uint64_t)(v6 + 5), v11, aBlock);
      if (v23 == v22)
      {
        (*(void (**)(void *))(v22[0] + 32))(v22);
        uint64_t v12 = (void *)v6[1];
        if (v12) {
          goto LABEL_21;
        }
      }
      else
      {
        if (v23) {
          (*(void (**)(void))(*v23 + 40))();
        }
        uint64_t v12 = (void *)v6[1];
        if (v12)
        {
          do
          {
LABEL_21:
            BOOL v13 = v12;
            uint64_t v12 = (void *)*v12;
          }
          while (v12);
          goto LABEL_9;
        }
      }
      do
      {
        BOOL v13 = (void *)v6[2];
        BOOL v14 = *v13 == (void)v6;
        unint64_t v6 = v13;
      }
      while (!v14);
LABEL_9:
      unint64_t v6 = v13;
      if (v13 == v7) {
        goto LABEL_26;
      }
    }
    uint64_t v10 = (*(uint64_t (**)(void))(*v19 + 16))();
LABEL_13:
    uint64_t v23 = (void *)v10;
    goto LABEL_15;
  }
LABEL_26:
  uint64_t result = (uint64_t)v19;
  if (v19 == v18) {
    return (*(uint64_t (**)(void *))(v18[0] + 32))(v18);
  }
  if (v19) {
    return (*(uint64_t (**)(void))(*v19 + 40))();
  }
  return result;
}

void sub_1A10EF708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *qmi::ClientRouter::setHandler(qmi::Client::Event,std::function<void ()(qmi::SubscriptionType)>)const::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_1A10EFB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *qmi::ClientRouter::setHandler(qmi::Client::Event,std::function<void ()(qmi::SubscriptionType,xpc::object)>)const::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_1A10EFFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *qmi::ClientRouter::setHandler(qmi::Client::Event,std::function<void ()(qmi::SubscriptionType,dispatch::group)>)const::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void qmi::ClientRouter::setHandler(uint64_t *a1, unsigned int a2)
{
  uint64_t v2 = *a1;
  if (!*(void *)(*a1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to enumerate an empty client map");
    __cxa_throw(exception, (struct type_info *)off_1E5A40DB8, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v3 = *(void **)(v2 + 16);
  int v4 = (void *)(v2 + 24);
  if (v3 != (void *)(v2 + 24))
  {
    do
    {
      qmi::Client::setHandler((uint64_t)(v3 + 5), a2, 0);
      unint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v4);
  }
}

void sub_1A10F01EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void qmi::ClientRouter::setIndShouldWake(qmi::ClientRouter *this, __int16 a2, char a3)
{
  uint64_t v3 = *(void *)this;
  if (!*(void *)(*(void *)this + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to enumerate an empty client map");
    __cxa_throw(exception, (struct type_info *)off_1E5A40DB8, MEMORY[0x1E4FBA1E8]);
  }
  int v4 = *(void **)(v3 + 16);
  uint64_t v5 = (void *)(v3 + 24);
  if (v4 != (void *)(v3 + 24))
  {
    do
    {
      qmi::Client::State::setIndShouldWake((qmi::Client::State *)v4[7], a2, a3);
      BOOL v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          int v4 = v9;
        }
        while (!v10);
      }
      int v4 = v9;
    }
    while (v9 != v5);
  }
}

void sub_1A10F02D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void qmi::ClientRouter::start(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  if (a2 == 3)
  {
    uint64_t v3 = *(void **)(v2 + 16);
    int v4 = (void *)(v2 + 24);
    if (v3 != (void *)(v2 + 24))
    {
      do
      {
        qmi::Client::State::start((qmi::Client::State *)v3[7]);
        uint64_t v5 = (void *)v3[1];
        if (v5)
        {
          do
          {
            unint64_t v6 = v5;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            unint64_t v6 = (void *)v3[2];
            BOOL v7 = *v6 == (void)v3;
            uint64_t v3 = v6;
          }
          while (!v7);
        }
        uint64_t v3 = v6;
      }
      while (v6 != v4);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v2 + 24);
    uint64_t v8 = v2 + 24;
    uint64_t v9 = v10;
    if (v10)
    {
      uint64_t v11 = v8;
      do
      {
        int v12 = *(_DWORD *)(v9 + 32);
        BOOL v13 = v12 < a2;
        if (v12 >= a2) {
          BOOL v14 = (uint64_t *)v9;
        }
        else {
          BOOL v14 = (uint64_t *)(v9 + 8);
        }
        if (!v13) {
          uint64_t v11 = v9;
        }
        uint64_t v9 = *v14;
      }
      while (*v14);
      if (v11 != v8 && *(_DWORD *)(v11 + 32) <= a2)
      {
        uint64_t v15 = *(qmi::Client::State **)(v11 + 56);
        qmi::Client::State::start(v15);
      }
    }
  }
}

void qmi::ClientRouter::stop(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  if (a2 == 3)
  {
    uint64_t v3 = *(void **)(v2 + 16);
    int v4 = (void *)(v2 + 24);
    if (v3 != (void *)(v2 + 24))
    {
      do
      {
        qmi::Client::State::stop((qmi::Client::State *)v3[7]);
        uint64_t v5 = (void *)v3[1];
        if (v5)
        {
          do
          {
            unint64_t v6 = v5;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            unint64_t v6 = (void *)v3[2];
            BOOL v7 = *v6 == (void)v3;
            uint64_t v3 = v6;
          }
          while (!v7);
        }
        uint64_t v3 = v6;
      }
      while (v6 != v4);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v2 + 24);
    uint64_t v8 = v2 + 24;
    uint64_t v9 = v10;
    if (v10)
    {
      uint64_t v11 = v8;
      do
      {
        int v12 = *(_DWORD *)(v9 + 32);
        BOOL v13 = v12 < a2;
        if (v12 >= a2) {
          BOOL v14 = (uint64_t *)v9;
        }
        else {
          BOOL v14 = (uint64_t *)(v9 + 8);
        }
        if (!v13) {
          uint64_t v11 = v9;
        }
        uint64_t v9 = *v14;
      }
      while (*v14);
      if (v11 != v8 && *(_DWORD *)(v11 + 32) <= a2)
      {
        uint64_t v15 = *(qmi::Client::State **)(v11 + 56);
        qmi::Client::State::stop(v15);
      }
    }
  }
}

void qmi::ClientRouter::reset(qmi::ClientRouter *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = 0;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void qmi::ClientRouter::addClient(uint64_t *a1, int a2, std::__shared_weak_count **this)
{
  qmi::Client::set((qmi::Client *)this, "sim", a2);
  uint64_t v6 = *a1;
  BOOL v7 = this[2];
  uint64_t v8 = this[3];
  uint64_t v26 = v8;
  this[2] = 0;
  this[3] = 0;
  uint64_t v10 = (uint64_t *)(v6 + 24);
  uint64_t v9 = *(void *)(v6 + 24);
  if (!v9)
  {
    int v17 = (uint64_t *)(v6 + 24);
    if (*(uint64_t **)(v6 + 16) != v10) {
      goto LABEL_19;
    }
    uint64_t v16 = 0;
    int v17 = (uint64_t *)(v6 + 24);
    uint64_t v19 = (uint64_t *)(v6 + 24);
LABEL_34:
    if (v16) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = v17;
    }
    if (v16) {
      uint64_t v10 = v19 + 1;
    }
    else {
      uint64_t v10 = v17;
    }
    if (*v10) {
      goto LABEL_44;
    }
    goto LABEL_41;
  }
  uint64_t v11 = (uint64_t *)(v6 + 24);
  int v12 = *(uint64_t **)(v6 + 24);
  do
  {
    int v13 = *((_DWORD *)v12 + 8);
    BOOL v14 = v13 < a2;
    if (v13 >= a2) {
      uint64_t v15 = (uint64_t **)v12;
    }
    else {
      uint64_t v15 = (uint64_t **)(v12 + 1);
    }
    if (!v14) {
      uint64_t v11 = v12;
    }
    int v12 = *v15;
  }
  while (*v15);
  uint64_t v16 = *(void **)(v6 + 24);
  int v17 = (uint64_t *)(v6 + 24);
  if (v11 != v10)
  {
    if (*((_DWORD *)v11 + 8) <= a2)
    {
      uint64_t v26 = 0;
      uint64_t v23 = (std::__shared_weak_count *)v11[8];
      v11[7] = (uint64_t)v7;
      v11[8] = (uint64_t)v8;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      goto LABEL_44;
    }
    uint64_t v16 = (void *)*v11;
    int v17 = v11;
  }
  if (*(uint64_t **)(v6 + 16) == v17)
  {
    uint64_t v19 = v17;
    goto LABEL_34;
  }
  if (v16)
  {
    uint64_t v18 = v16;
    do
    {
      uint64_t v19 = v18;
      uint64_t v18 = (uint64_t *)v18[1];
    }
    while (v18);
    if (*((_DWORD *)v19 + 8) < a2) {
      goto LABEL_34;
    }
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v19 = v17;
  do
  {
    uint64_t v20 = v19;
    uint64_t v19 = (uint64_t *)v19[2];
  }
  while ((uint64_t *)*v19 == v20);
  uint64_t v16 = 0;
  if (*((_DWORD *)v19 + 8) < a2) {
    goto LABEL_34;
  }
LABEL_22:
  uint64_t v21 = (uint64_t *)(v6 + 24);
  if (!v9)
  {
LABEL_41:
    int v24 = operator new(0x48uLL);
    v24[8] = a2;
    *((void *)v24 + 5) = 0;
    *((void *)v24 + 6) = 0;
    *((void *)v24 + 7) = v7;
    *((void *)v24 + 8) = v8;
    uint64_t v26 = 0;
    *(void *)int v24 = 0;
    *((void *)v24 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
    *((void *)v24 + 2) = v21;
    uint64_t *v10 = (uint64_t)v24;
    uint64_t v25 = **(void **)(v6 + 16);
    if (v25)
    {
      *(void *)(v6 + 16) = v25;
      int v24 = (_DWORD *)*v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 24), (uint64_t *)v24);
    ++*(void *)(v6 + 32);
    goto LABEL_44;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v21 = (uint64_t *)v9;
      int v22 = *(_DWORD *)(v9 + 32);
      if (v22 <= a2) {
        break;
      }
      uint64_t v9 = *v21;
      uint64_t v10 = v21;
      if (!*v21) {
        goto LABEL_41;
      }
    }
    if (v22 >= a2) {
      break;
    }
    uint64_t v9 = v21[1];
    if (!v9)
    {
      uint64_t v10 = v21 + 1;
      goto LABEL_41;
    }
  }
LABEL_44:
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1A10F07E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t qmi::ClientRouter::setIndHandlerInternal(uint64_t *a1, __int16 a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  __int16 v19 = a2;
  int v4 = (void *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      int v22 = v21;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v21);
    }
    else
    {
      int v22 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    int v22 = 0;
  }
  uint64_t v23 = &v19;
  uint64_t v5 = *a1;
  if (!*(void *)(*a1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempted to enumerate an empty client map");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5A40DB8, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v6 = *(void **)(v5 + 16);
  BOOL v7 = (void *)(v5 + 24);
  if (v6 != (void *)(v5 + 24))
  {
    uint64_t v8 = MEMORY[0x1E4F143A8];
    while (1)
    {
      int v9 = *((_DWORD *)v6 + 8);
      uint64_t v10 = (uint64_t)v22;
      __int16 v11 = *v23;
      aBlock[0] = v8;
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZZNK3qmi12ClientRouter21setIndHandlerInternalEtNSt3__18functionIFvNS_16SubscriptionTypeERK13QMIServiceMsgEEEENK3__0clIS3_NS_11ClientStateEEEDaT_RKT0__block_invoke;
      aBlock[3] = &__block_descriptor_tmp_22_0;
      if (!v22) {
        goto LABEL_13;
      }
      if (v22 != v21) {
        break;
      }
      uint64_t v26 = v25;
      (*(void (**)(void *, void *))(v21[0] + 24))(v21, v25);
LABEL_15:
      int v27 = v9;
      int v12 = (void *)v6[7];
      int v13 = _Block_copy(aBlock);
      uint64_t v20 = v13;
      qmi::Client::State::setIndHandler(v12, v11, &v20);
      if (v13) {
        _Block_release(v13);
      }
      if (v26 == v25)
      {
        (*(void (**)(void *))(v25[0] + 32))(v25);
        BOOL v14 = (void *)v6[1];
        if (v14) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v26) {
          (*(void (**)(void))(*v26 + 40))();
        }
        BOOL v14 = (void *)v6[1];
        if (v14)
        {
          do
          {
LABEL_23:
            uint64_t v15 = v14;
            BOOL v14 = (void *)*v14;
          }
          while (v14);
          goto LABEL_9;
        }
      }
      do
      {
        uint64_t v15 = (void *)v6[2];
        BOOL v16 = *v15 == (void)v6;
        uint64_t v6 = v15;
      }
      while (!v16);
LABEL_9:
      uint64_t v6 = v15;
      if (v15 == v7) {
        goto LABEL_28;
      }
    }
    uint64_t v10 = (*(uint64_t (**)(void))(*v22 + 16))();
LABEL_13:
    uint64_t v26 = (void *)v10;
    goto LABEL_15;
  }
LABEL_28:
  uint64_t result = (uint64_t)v22;
  if (v22 == v21) {
    return (*(uint64_t (**)(void *))(v21[0] + 32))(v21);
  }
  if (v22) {
    return (*(uint64_t (**)(void))(*v22 + 40))();
  }
  return result;
}

void sub_1A10F0B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *qmi::ClientRouter::setIndHandlerInternal(unsigned short,std::function<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>)const::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void std::__shared_ptr_emplace<qmi::ClientRouter::State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<qmi::ClientRouter::State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D758;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<qmi::ClientRouter::State>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 88);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    std::__tree<std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::__map_value_compare<qmi::SubscriptionType,std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::less<qmi::SubscriptionType>,true>,std::allocator<std::__value_type<qmi::SubscriptionType,qmi::ClientState>>>::destroy(*(void **)(a1 + 48));
    int v4 = *(void **)(a1 + 32);
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    std::__tree<std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::__map_value_compare<qmi::SubscriptionType,std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::less<qmi::SubscriptionType>,true>,std::allocator<std::__value_type<qmi::SubscriptionType,qmi::ClientState>>>::destroy(*(void **)(a1 + 48));
    int v4 = *(void **)(a1 + 32);
    if (!v4)
    {
LABEL_8:
      JUMPOUT(0x1A622BDE0);
    }
  }
  os_release(v4);
  goto LABEL_8;
}

void std::__tree<std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::__map_value_compare<qmi::SubscriptionType,std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::less<qmi::SubscriptionType>,true>,std::allocator<std::__value_type<qmi::SubscriptionType,qmi::ClientState>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::__map_value_compare<qmi::SubscriptionType,std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::less<qmi::SubscriptionType>,true>,std::allocator<std::__value_type<qmi::SubscriptionType,qmi::ClientState>>>::destroy(*a1);
    std::__tree<std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::__map_value_compare<qmi::SubscriptionType,std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::less<qmi::SubscriptionType>,true>,std::allocator<std::__value_type<qmi::SubscriptionType,qmi::ClientState>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[8];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = (std::__shared_weak_count *)a1[6];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(a1);
  }
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    int v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_10;
    }
    do
    {
      uint64_t v3 = v4;
      int v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    uint64_t v6 = (uint64_t **)v3[2];
    BOOL v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  uint64_t v6 = (uint64_t **)v3[2];
  BOOL v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  *uint64_t v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    BOOL v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
    goto LABEL_16;
  }
  BOOL v7 = 0;
  uint64_t result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    BOOL v14 = (uint64_t **)v7[2];
    if (*v14 != v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      BOOL v16 = (void *)*v7;
      if (*v7) {
        goto LABEL_48;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      uint64_t v20 = (uint64_t *)v7[1];
      void *v14 = v20;
      if (v20) {
        v20[2] = (uint64_t)v14;
      }
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      void v14[2] = v7;
      if (result == (uint64_t *)v14) {
        uint64_t result = v7;
      }
      BOOL v7 = *v14;
      BOOL v16 = (void *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((unsigned char *)v16 + 24)) {
          goto LABEL_71;
        }
      }
    }
    uint64_t v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v16 && !*((unsigned char *)v16 + 24))
      {
LABEL_71:
        uint64_t v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = *v21;
        v7[1] = *v21;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        *uint64_t v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        BOOL v16 = v7;
      }
      int v27 = (uint64_t *)v21[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v27 + 24);
      *((unsigned char *)v27 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v28 = *v27;
      uint64_t v29 = *(void *)(*v27 + 8);
      *int v27 = v29;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      *(void *)(v28 + 16) = v27[2];
      *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v28;
      *(void *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
LABEL_24:
    BOOL v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    uint64_t v15 = (void *)*v7;
    if (!*v7)
    {
LABEL_38:
      __int16 v19 = (uint64_t *)v7[1];
      if (v19 && !*((unsigned char *)v19 + 24)) {
        goto LABEL_67;
      }
      *((unsigned char *)v7 + 24) = 0;
      int v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        int v12 = result;
LABEL_61:
        *((unsigned char *)v12 + 24) = 1;
        return result;
      }
      if (!*((unsigned char *)v12 + 24)) {
        goto LABEL_61;
      }
      goto LABEL_24;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    int v17 = v14[1];
    uint64_t v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18) {
      v18[2] = (uint64_t)v14;
    }
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
    *int v17 = (uint64_t)v14;
    void v14[2] = v17;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    BOOL v7 = *(uint64_t **)(*v7 + 8);
    uint64_t v15 = (void *)*v7;
    if (!*v7) {
      goto LABEL_38;
    }
  }
  if (*((unsigned char *)v15 + 24)) {
    goto LABEL_38;
  }
  __int16 v19 = (uint64_t *)v7[1];
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_67:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    uint64_t *v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    __int16 v19 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  *uint64_t v25 = v24;
  *(void *)(v24 + 16) = v25;
  return result;
}

void std::__throw_out_of_range[abi:ne180100]()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_1E5A40DB0, MEMORY[0x1E4FBA1D0]);
}

void sub_1A10F11FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1)
{
  uint64_t result = std::logic_error::logic_error(a1, "map::at:  key not found");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

uint64_t ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke(uint64_t a1)
{
  int v3 = *(_DWORD *)(a1 + 64);
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v1 + 48))(v1, &v3);
}

uint64_t __copy_helper_block_e8_32c50_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(void *)(a1 + 56) = a1 + 32;
      int v4 = *(uint64_t (**)(void))(**(void **)(a2 + 56) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 56) = result;
    }
  }
  else
  {
    *(void *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c50_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEEEE(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t result = *(void *)(a1 + 56);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEN3xpc6objectEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke(uint64_t a1, xpc_object_t object)
{
  int v3 = *(_DWORD *)(a1 + 64);
  xpc_object_t objecta = object;
  if (!object)
  {
    xpc_object_t objecta = xpc_null_create();
    int v6 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  xpc_retain(object);
  int v6 = v3;
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    goto LABEL_5;
  }
LABEL_3:
  (*(void (**)(uint64_t, int *, xpc_object_t *))(*(void *)v4 + 48))(v4, &v6, &objecta);
  xpc_release(objecta);
}

void sub_1A10F1460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

uint64_t __copy_helper_block_e8_32c63_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEN3xpc6objectEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(void *)(a1 + 56) = a1 + 32;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 56) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 56) = result;
    }
  }
  else
  {
    *(void *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c63_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEN3xpc6objectEEEE(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t result = *(void *)(a1 + 56);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEN8dispatch5groupEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke(uint64_t a1, dispatch_object_t object)
{
  int v3 = *(_DWORD *)(a1 + 64);
  dispatch_object_t objecta = object;
  if (object) {
    dispatch_retain(object);
  }
  int v6 = v3;
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, int *, dispatch_object_t *))(*(void *)v4 + 48))(v4, &v6, &objecta);
  if (objecta) {
    dispatch_release(objecta);
  }
}

void sub_1A10F161C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c67_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEN8dispatch5groupEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(void *)(a1 + 56) = a1 + 32;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 56) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 56) = result;
    }
  }
  else
  {
    *(void *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c67_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEN8dispatch5groupEEEE(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t result = *(void *)(a1 + 56);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c67_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeERK13QMIServiceMsgEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(void *)(a1 + 56) = a1 + 32;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 56) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 56) = result;
    }
  }
  else
  {
    *(void *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c67_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeERK13QMIServiceMsgEEE(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  uint64_t result = *(void *)(a1 + 56);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void ATCSCommPortConfigurer::ATCSCommPortConfigurer(ATCSCommPortConfigurer *this, int a2, int a3, char a4, char a5, char a6)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = a3;
  *((unsigned char *)this + 8) = a4;
  *((unsigned char *)this + 9) = a5;
  *((unsigned char *)this + 10) = a6;
  ATCSCommPortConfigurer::configure(this);
}

{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = a3;
  *((unsigned char *)this + 8) = a4;
  *((unsigned char *)this + 9) = a5;
  *((unsigned char *)this + 10) = a6;
  ATCSCommPortConfigurer::configure(this);
}

uint64_t ATCSCommPortConfigurer::configure(ATCSCommPortConfigurer *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v13.c_ospeed = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v13.c_cc = v2;
  *(_OWORD *)&v13.c_cc[16] = v2;
  *(_OWORD *)&v13.c_iflag = v2;
  *(_OWORD *)&v13.c_cflag = v2;
  if (tcgetattr(*(_DWORD *)this, &v13))
  {
    int v5 = *__error();
    exception = (_ATCSException *)__cxa_allocate_exception(0x208uLL);
    BOOL v7 = strerror(v5);
    _ATCSException::_ATCSException(exception, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/Helpers/ATCSCommPortConfigurer.cpp", 44, "Failed get attributes, err = %s (%d)\n", v7, v5);
  }
  cfsetspeed(&v13, *((unsigned int *)this + 1));
  cfmakeraw(&v13);
  v13.c_iflag = v13.c_iflag & 0xFFFFFFFFFFFFF0CCLL | 1;
  v13.c_oflag &= ~1uLL;
  *(_WORD *)&v13.c_cc[16] = *((_WORD *)this + 4);
  uint64_t v3 = 248576;
  if (!*((unsigned char *)this + 10)) {
    uint64_t v3 = 51968;
  }
  v13.c_cflag = v3 | v13.c_cflag & 0xFFFFFFFFFFFC20FFLL;
  v13.c_lflag &= 0xFFFFFFFFFFFFFA77;
  uint64_t result = tcsetattr(*(_DWORD *)this, 0, &v13);
  if (result)
  {
    int v9 = *__error();
    uint64_t v10 = (_ATCSException *)__cxa_allocate_exception(0x208uLL);
    uint64_t v11 = strerror(v9);
    _ATCSException::_ATCSException(v10, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/Helpers/ATCSCommPortConfigurer.cpp", 89, "Failed set attributes, err = %s (%d)", v11, v9);
  }
  return result;
}

void sub_1A10F1A54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1A10F1A68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ATCSTimer::timerBootstrap(ATCSTimer *this, ATCSTimerDriver *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD830))
  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&_MergedGlobals, "timer list lock");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &_MergedGlobals, &dword_1A10C7000);
    __cxa_guard_release(&qword_1EBBDD830);
  }
  uint64_t v3 = _MergedGlobals;
  pthread_mutex_lock((pthread_mutex_t *)_MergedGlobals);
  uint64_t v4 = (ATCSLogger *)pthread_self();
  *(void *)(v3 + 64) = v4;
  Instance = (ATCSTimerDriver *)ATCSLogger::getInstance(v4);
  ATCSTimer::fLogger = (uint64_t)Instance;
  if (!ATCSTimer::fsDriver)
  {
    if (!this) {
      this = (ATCSTimer *)ATCSTimerDriver::create(Instance);
    }
    ATCSTimer::fsDriver = (uint64_t)this;
    *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = ATCSTimer::dispatchExpiredTimers;
  }
  int v6 = (pthread_mutex_t *)_MergedGlobals;
  pthread_self();
  v6[1].__sig = 0;
  return pthread_mutex_unlock(v6);
}

void sub_1A10F1BAC(_Unwind_Exception *a1)
{
}

void sub_1A10F1BC4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 2088);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

void *ATCSTimerDriver::create(ATCSTimerDriver *this)
{
  uint64_t v1 = operator new(0x28uLL);
  v1[2] = 0;
  void *v1 = &unk_1EF43D868;
  v1[1] = 0;
  long long v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  v1[2] = v2;
  uint64_t v3 = (pthread_cond_t *)malloc(0x30uLL);
  v1[3] = v3;
  pthread_cond_init(v3, 0);
  *((_DWORD *)v1 + 8) = 0;
  *((unsigned char *)v1 + 36) = 0;
  ATCSThreadSpawn((uint64_t)"ATCSTimer Thread", (uint64_t)ATCSTimerDriver::startATCSTimerDispatcher, (uint64_t)v1, 1);
  return v1;
}

void sub_1A10F1CCC(_Unwind_Exception *a1)
{
  ATCSCondition::~ATCSCondition(v3);
  ATCSMutex::~ATCSMutex(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A10F1CF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ATCSTimer::dispatchExpiredTimers(ATCSTimer *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD830))
  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&_MergedGlobals, "timer list lock");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &_MergedGlobals, &dword_1A10C7000);
    __cxa_guard_release(&qword_1EBBDD830);
  }
  uint64_t v1 = _MergedGlobals;
  pthread_mutex_lock((pthread_mutex_t *)_MergedGlobals);
  *(void *)(v1 + 64) = pthread_self();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)ATCSTimer::fsDriver + 24))(ATCSTimer::fsDriver);
  uint64_t v3 = ATCSTimer::fATCSTimerList;
  if (ATCSTimer::fATCSTimerList)
  {
    int v4 = v2;
    while (v4 >= *(_DWORD *)v3)
    {
      uint64_t v5 = *(void *)(v3 + 16);
      ATCSTimer::fATCSTimerList = v5;
      if (v5) {
        *(void *)(v5 + 24) = &ATCSTimer::fATCSTimerList;
      }
      *(unsigned char *)(v3 + 4) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)(v3 + 24) = 0;
      uint64_t v6 = *(void *)(v3 + 8);
      *(void *)(v3 + 8) = 0;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD830, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBBDD830))
      {
        ATCSMutex::ATCSMutex((ATCSMutex *)&_MergedGlobals, "timer list lock");
        __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &_MergedGlobals, &dword_1A10C7000);
        __cxa_guard_release(&qword_1EBBDD830);
      }
      BOOL v7 = (pthread_mutex_t *)_MergedGlobals;
      pthread_self();
      v7[1].__sig = 0;
      pthread_mutex_unlock(v7);
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD830, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBBDD830))
      {
        ATCSMutex::ATCSMutex((ATCSMutex *)&_MergedGlobals, "timer list lock");
        __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &_MergedGlobals, &dword_1A10C7000);
        __cxa_guard_release(&qword_1EBBDD830);
      }
      uint64_t v8 = _MergedGlobals;
      pthread_mutex_lock((pthread_mutex_t *)_MergedGlobals);
      *(void *)(v8 + 64) = pthread_self();
      uint64_t v9 = ATCSTimer::fATCSTimerList;
      if (ATCSTimer::fATCSTimerList == v3)
      {
        uint64_t v9 = v3;
        if (*(_DWORD *)v3 < v4)
        {
          _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0xA9, "TIME_GTE(fATCSTimerList->fDeadline, now)", "==", "true", 0, (const void *)1);
          uint64_t v9 = ATCSTimer::fATCSTimerList;
        }
      }
      uint64_t v3 = v9;
      if (!v9) {
        goto LABEL_18;
      }
    }
    (*(void (**)(uint64_t))(*(void *)ATCSTimer::fsDriver + 16))(ATCSTimer::fsDriver);
  }
LABEL_18:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD830))
  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&_MergedGlobals, "timer list lock");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &_MergedGlobals, &dword_1A10C7000);
    __cxa_guard_release(&qword_1EBBDD830);
  }
  uint64_t v10 = (pthread_mutex_t *)_MergedGlobals;
  pthread_self();
  v10[1].__sig = 0;

  return pthread_mutex_unlock(v10);
}

void sub_1A10F2064(_Unwind_Exception *a1)
{
}

void sub_1A10F207C(_Unwind_Exception *a1)
{
}

void sub_1A10F2094(_Unwind_Exception *a1)
{
}

void sub_1A10F20AC(_Unwind_Exception *a1)
{
}

void ATCSTimer::ATCSTimer(ATCSTimer *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  if (!ATCSTimer::fsDriver) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x39, "fsDriver", "!=", "NULL", 0, 0);
  }
}

{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  if (!ATCSTimer::fsDriver) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x39, "fsDriver", "!=", "NULL", 0, 0);
  }
}

void ATCSTimer::~ATCSTimer(ATCSTimer *this)
{
  if (*((unsigned char *)this + 4)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x3E, "fPending", "!=", "true", (const char *)1, (const void *)1);
  }
}

{
  if (*((unsigned char *)this + 4)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x3E, "fPending", "!=", "true", (const char *)1, (const void *)1);
  }
}

uint64_t ATCSTimer::set(uint64_t a1, int a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD830))
  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&_MergedGlobals, "timer list lock");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &_MergedGlobals, &dword_1A10C7000);
    __cxa_guard_release(&qword_1EBBDD830);
  }
  uint64_t v6 = _MergedGlobals;
  pthread_mutex_lock((pthread_mutex_t *)_MergedGlobals);
  *(void *)(v6 + 64) = pthread_self();
  if (a2 < 0) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x45, "relativeTimeoutMilliseconds", ">=", "0", (const char *)a2, 0);
  }
  ATCSTimer::cancel_nl((ATCSTimer *)a1);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)ATCSTimer::fsDriver + 24))(ATCSTimer::fsDriver) + a2;
  *(_DWORD *)a1 = v7;
  *(void *)(a1 + 8) = a3;
  uint64_t v8 = ATCSTimer::fATCSTimerList;
  if (!ATCSTimer::fATCSTimerList)
  {
    *(void *)(a1 + 16) = 0;
    ATCSTimer::fATCSTimerList = a1;
LABEL_11:
    *(void *)(a1 + 24) = &ATCSTimer::fATCSTimerList;
    (*(void (**)(uint64_t))(*(void *)ATCSTimer::fsDriver + 16))(ATCSTimer::fsDriver);
    goto LABEL_14;
  }
  if (*(_DWORD *)ATCSTimer::fATCSTimerList >= v7)
  {
    *(void *)(a1 + 16) = ATCSTimer::fATCSTimerList;
    ATCSTimer::fATCSTimerList = a1;
    *(void *)(v8 + 24) = a1 + 16;
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v9 = v8;
    uint64_t v8 = *(void *)(v8 + 16);
    if (!v8) {
      break;
    }
    if (*(_DWORD *)v8 > v7)
    {
      uint64_t v10 = v9 + 16;
      *(void *)(a1 + 16) = v8;
      *(void *)(v8 + 24) = a1 + 16;
      goto LABEL_13;
    }
  }
  uint64_t v10 = v9 + 16;
  *(void *)(a1 + 16) = 0;
LABEL_13:
  *(void *)(v9 + 16) = a1;
  *(void *)(a1 + 24) = v10;
LABEL_14:
  *(unsigned char *)(a1 + 4) = 1;
  uint64_t v11 = (pthread_mutex_t *)_MergedGlobals;
  pthread_self();
  v11[1].__sig = 0;
  return pthread_mutex_unlock(v11);
}

void sub_1A10F2470(_Unwind_Exception *a1)
{
}

void sub_1A10F2488(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 2088);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

BOOL ATCSTimer::cancel_nl(ATCSTimer *this)
{
  int v1 = *((unsigned __int8 *)this + 4);
  if (*((unsigned char *)this + 4))
  {
    int v4 = (char *)this + 16;
    uint64_t v3 = *((void *)this + 2);
    if (v3 && *(char **)(v3 + 24) != v4) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x7C, "fNext == NULL", "||", "fNext->fPrev == &fNext", 0, 0);
    }
    uint64_t v5 = (const char **)*((void *)this + 3);
    if (*v5 != (const char *)this)
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x7D, "*fPrev", "==", "this", *v5, this);
      uint64_t v5 = (const char **)*((void *)this + 3);
    }
    *uint64_t v5 = *(const char **)v4;
    if (*(void *)v4) {
      *(void *)(*(void *)v4 + 24) = *((void *)this + 3);
    }
    uint64_t v6 = *((void *)this + 1);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *((unsigned char *)this + 4) = 0;
  }
  return v1 != 0;
}

BOOL ATCSTimer::cancel(ATCSTimer *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD830))
  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&_MergedGlobals, "timer list lock");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &_MergedGlobals, &dword_1A10C7000);
    __cxa_guard_release(&qword_1EBBDD830);
  }
  uint64_t v2 = _MergedGlobals;
  pthread_mutex_lock((pthread_mutex_t *)_MergedGlobals);
  *(void *)(v2 + 64) = pthread_self();
  BOOL v3 = ATCSTimer::cancel_nl(this);
  int v4 = (pthread_mutex_t *)_MergedGlobals;
  pthread_self();
  v4[1].__sig = 0;
  pthread_mutex_unlock(v4);
  return v3;
}

void sub_1A10F2684(_Unwind_Exception *a1)
{
}

void sub_1A10F269C(_Unwind_Exception *a1)
{
  BOOL v3 = *(pthread_mutex_t **)(v1 + 2088);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSTimer::printTimerQueue(ATCSTimer *this)
{
  int v1 = (*(uint64_t (**)(uint64_t))(*(void *)ATCSTimer::fsDriver + 24))(ATCSTimer::fsDriver);
  uint64_t v2 = ATCSTimer::fATCSTimerList;
  if (ATCSTimer::fATCSTimerList)
  {
    int v3 = v1;
    do
    {
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)ATCSTimer::fLogger + 24))(ATCSTimer::fLogger, 3, " %d\n", *(_DWORD *)v2 - v3);
      uint64_t v2 = *(void *)(v2 + 16);
    }
    while (v2);
  }
  int v4 = *(uint64_t (**)(void))(*(void *)ATCSTimer::fLogger + 24);

  return v4();
}

void ATCSTimerDriver::ATCSTimerDriver(ATCSTimerDriver *this)
{
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EF43D868;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  uint64_t v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((void *)this + 2) = v2;
  int v3 = (pthread_cond_t *)malloc(0x30uLL);
  *((void *)this + 3) = v3;
  pthread_cond_init(v3, 0);
  *((_DWORD *)this + 8) = 0;
  *((unsigned char *)this + 36) = 0;
  ATCSThreadSpawn((uint64_t)"ATCSTimer Thread", (uint64_t)ATCSTimerDriver::startATCSTimerDispatcher, (uint64_t)this, 1);
}

{
  pthread_mutex_t *v2;
  pthread_cond_t *v3;

  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EF43D868;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  uint64_t v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((void *)this + 2) = v2;
  int v3 = (pthread_cond_t *)malloc(0x30uLL);
  *((void *)this + 3) = v3;
  pthread_cond_init(v3, 0);
  *((_DWORD *)this + 8) = 0;
  *((unsigned char *)this + 36) = 0;
  ATCSThreadSpawn((uint64_t)"ATCSTimer Thread", (uint64_t)ATCSTimerDriver::startATCSTimerDispatcher, (uint64_t)this, 1);
}

void sub_1A10F2898(_Unwind_Exception *a1)
{
  ATCSCondition::~ATCSCondition(v2);
  ATCSMutex::~ATCSMutex(v1);
  _Unwind_Resume(a1);
}

void sub_1A10F28B4(_Unwind_Exception *a1)
{
  ATCSMutex::~ATCSMutex(v1);
  _Unwind_Resume(a1);
}

void ATCSTimerDriver::startATCSTimerDispatcher(ATCSTimerDriver *this, void *a2)
{
  while (1)
  {
    int v3 = (pthread_mutex_t *)*((void *)this + 2);
    pthread_mutex_lock(v3);
    v3[1].__sig = (uint64_t)pthread_self();
    if (!systemtime(void)::denom) {
      break;
    }
    while (1)
    {
      uint64_t v4 = mach_absolute_time();
      if (!*((unsigned char *)this + 36)) {
        goto LABEL_16;
      }
LABEL_5:
      unint64_t v5 = systemtime(void)::numer * v4 / systemtime(void)::denom;
      int v6 = *((_DWORD *)this + 8);
      unsigned int v7 = v6 - v5;
      if (v6 <= (int)v5) {
        break;
      }
      uint64_t v8 = (pthread_mutex_t *)*((void *)this + 2);
      pthread_t v9 = pthread_self();
      v8[1].__sig = 0;
      if ((v7 & 0x80000000) != 0)
      {
LABEL_17:
        pthread_cond_wait(*((pthread_cond_t **)this + 3), v8);
        v8[1].__sig = (uint64_t)v9;
        if (!systemtime(void)::denom) {
          goto LABEL_8;
        }
      }
      else
      {
        v19.unsigned int tv_sec = v7 / 0x3E8uLL;
        v19.tv_nsec = 1000000 * (v7 % 0x3E8);
        pthread_cond_timedwait_relative_np(*((pthread_cond_t **)this + 3), v8, &v19);
        v8[1].__sig = (uint64_t)v9;
        if (!systemtime(void)::denom) {
          goto LABEL_8;
        }
      }
    }
    *((unsigned char *)this + 36) = 0;
    BOOL v16 = (pthread_mutex_t *)*((void *)this + 2);
    pthread_self();
    v16[1].__sig = 0;
    uint64_t v17 = pthread_mutex_unlock(v16);
    uint64_t v18 = (void (*)(uint64_t))*((void *)this + 1);
    if (v18) {
      v18(v17);
    }
  }
LABEL_8:
  v19.unsigned int tv_sec = 0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info((mach_timebase_info_t)&v19);
  if (HIDWORD(v19.tv_sec))
  {
    unsigned int tv_sec_high = HIDWORD(v19.tv_sec);
    unsigned int tv_sec = v19.tv_sec;
    do
    {
      unsigned int v12 = tv_sec_high;
      unsigned int tv_sec_high = tv_sec % tv_sec_high;
      unsigned int tv_sec = v12;
    }
    while (tv_sec_high);
  }
  else
  {
    unsigned int v12 = v19.tv_sec;
  }
  unsigned int v13 = 1000000;
  unsigned int v14 = LODWORD(v19.tv_sec) / v12;
  do
  {
    unsigned int v15 = v14;
    unsigned int v14 = v13;
    unsigned int v13 = v15 % v13;
  }
  while (v13);
  systemtime(void)::numer = LODWORD(v19.tv_sec) / v12 / v14;
  systemtime(void)::denom = 0xF4240 / v14 * (unint64_t)(HIDWORD(v19.tv_sec) / v12);
  uint64_t v4 = mach_absolute_time();
  if (*((unsigned char *)this + 36)) {
    goto LABEL_5;
  }
LABEL_16:
  uint64_t v8 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_t v9 = pthread_self();
  v8[1].__sig = 0;
  goto LABEL_17;
}

void sub_1A10F2B58(_Unwind_Exception *a1)
{
  ATCSCondition::~ATCSCondition(v2);
  ATCSMutex::~ATCSMutex(v1);
  _Unwind_Resume(a1);
}

void sub_1A10F2B74(_Unwind_Exception *a1)
{
  ATCSMutex::~ATCSMutex(v1);
  _Unwind_Resume(a1);
}

void ATCSTimerDriver::~ATCSTimerDriver(pthread_cond_t **this)
{
  *this = (pthread_cond_t *)&unk_1EF43D868;
  pthread_cond_destroy(this[3]);
  free(this[3]);
  uint64_t v2 = (pthread_mutex_t *)this[2];
  pthread_mutex_destroy(v2);
  if (v2) {
    operator delete(v2);
  }
}

{
  pthread_mutex_t *v2;

  *this = (pthread_cond_t *)&unk_1EF43D868;
  pthread_cond_destroy(this[3]);
  free(this[3]);
  uint64_t v2 = (pthread_mutex_t *)this[2];
  pthread_mutex_destroy(v2);
  if (v2) {
    operator delete(v2);
  }
}

{
  pthread_mutex_t *v2;
  uint64_t vars8;

  *this = (pthread_cond_t *)&unk_1EF43D868;
  pthread_cond_destroy(this[3]);
  free(this[3]);
  uint64_t v2 = (pthread_mutex_t *)this[2];
  pthread_mutex_destroy(v2);
  if (v2) {
    operator delete(v2);
  }

  operator delete(this);
}

uint64_t ATCSTimerDriver::setNextTimeout(ATCSTimerDriver *this, int a2)
{
  uint64_t v4 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v4);
  v4[1].__sig = (uint64_t)pthread_self();
  if (!*((unsigned char *)this + 36) || *((_DWORD *)this + 8) > a2) {
    pthread_cond_signal(*((pthread_cond_t **)this + 3));
  }
  *((_DWORD *)this + 8) = a2;
  *((unsigned char *)this + 36) = 1;
  unint64_t v5 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v5[1].__sig = 0;
  return pthread_mutex_unlock(v5);
}

void sub_1A10F2D64(_Unwind_Exception *a1)
{
  int v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSTimerDriver::getCurrentTime(ATCSTimerDriver *this)
{
  if (!systemtime(void)::denom)
  {
    mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
    mach_timebase_info(&info);
    if (info.denom)
    {
      uint32_t denom = info.denom;
      uint32_t numer = info.numer;
      do
      {
        uint32_t v3 = denom;
        uint32_t denom = numer % denom;
        uint32_t numer = v3;
      }
      while (denom);
    }
    else
    {
      uint32_t v3 = info.numer;
    }
    unsigned int v4 = 1000000;
    uint32_t v5 = info.numer / v3;
    do
    {
      uint32_t v6 = v5;
      uint32_t v5 = v4;
      unsigned int v4 = v6 % v4;
    }
    while (v4);
    systemtime(void)::uint32_t numer = info.numer / v3 / v5;
    systemtime(void)::uint32_t denom = 0xF4240 / v5 * (unint64_t)(info.denom / v3);
  }
  return systemtime(void)::numer * mach_absolute_time() / systemtime(void)::denom;
}

void ATCSTimerDriver::timerDispatcher(ATCSTimerDriver *this)
{
  while (1)
  {
    uint64_t v2 = (pthread_mutex_t *)*((void *)this + 2);
    pthread_mutex_lock(v2);
    v2[1].__sig = (uint64_t)pthread_self();
    if (!systemtime(void)::denom) {
      break;
    }
    while (1)
    {
      uint64_t v3 = mach_absolute_time();
      if (!*((unsigned char *)this + 36)) {
        goto LABEL_16;
      }
LABEL_5:
      unint64_t v4 = systemtime(void)::numer * v3 / systemtime(void)::denom;
      int v5 = *((_DWORD *)this + 8);
      unsigned int v6 = v5 - v4;
      if (v5 <= (int)v4) {
        break;
      }
      unsigned int v7 = (pthread_mutex_t *)*((void *)this + 2);
      pthread_t v8 = pthread_self();
      v7[1].__sig = 0;
      if ((v6 & 0x80000000) != 0)
      {
LABEL_17:
        pthread_cond_wait(*((pthread_cond_t **)this + 3), v7);
        v7[1].__sig = (uint64_t)v8;
        if (!systemtime(void)::denom) {
          goto LABEL_8;
        }
      }
      else
      {
        v18.unsigned int tv_sec = v6 / 0x3E8uLL;
        v18.tv_nsec = 1000000 * (v6 % 0x3E8);
        pthread_cond_timedwait_relative_np(*((pthread_cond_t **)this + 3), v7, &v18);
        v7[1].__sig = (uint64_t)v8;
        if (!systemtime(void)::denom) {
          goto LABEL_8;
        }
      }
    }
    *((unsigned char *)this + 36) = 0;
    unsigned int v15 = (pthread_mutex_t *)*((void *)this + 2);
    pthread_self();
    v15[1].__sig = 0;
    uint64_t v16 = pthread_mutex_unlock(v15);
    uint64_t v17 = (void (*)(uint64_t))*((void *)this + 1);
    if (v17) {
      v17(v16);
    }
  }
LABEL_8:
  v18.unsigned int tv_sec = 0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info((mach_timebase_info_t)&v18);
  if (HIDWORD(v18.tv_sec))
  {
    unsigned int tv_sec_high = HIDWORD(v18.tv_sec);
    unsigned int tv_sec = v18.tv_sec;
    do
    {
      unsigned int v11 = tv_sec_high;
      unsigned int tv_sec_high = tv_sec % tv_sec_high;
      unsigned int tv_sec = v11;
    }
    while (tv_sec_high);
  }
  else
  {
    unsigned int v11 = v18.tv_sec;
  }
  unsigned int v12 = 1000000;
  unsigned int v13 = LODWORD(v18.tv_sec) / v11;
  do
  {
    unsigned int v14 = v13;
    unsigned int v13 = v12;
    unsigned int v12 = v14 % v12;
  }
  while (v12);
  systemtime(void)::uint32_t numer = LODWORD(v18.tv_sec) / v11 / v13;
  systemtime(void)::uint32_t denom = 0xF4240 / v13 * (unint64_t)(HIDWORD(v18.tv_sec) / v11);
  uint64_t v3 = mach_absolute_time();
  if (*((unsigned char *)this + 36)) {
    goto LABEL_5;
  }
LABEL_16:
  unsigned int v7 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_t v8 = pthread_self();
  v7[1].__sig = 0;
  goto LABEL_17;
}

uint64_t strncasecmp_terminated(unint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!(a1 | a2)) {
    return 0;
  }
  unint64_t v4 = (char *)a2;
  if (!a1 && a2) {
    return -__tolower(*(char *)a2);
  }
  if (!a1 || a2)
  {
    if (a3)
    {
      uint64_t v7 = a3;
      uint64_t v8 = a3 - 1;
      pthread_t v9 = (char *)a1;
      while (1)
      {
        __darwin_ct_rune_t v10 = __tolower(*v9);
        __darwin_ct_rune_t v11 = *v4++;
        uint64_t result = (v10 - __tolower(v11));
        if (result) {
          break;
        }
        if (*v9++) {
          BOOL v13 = v8 == 0;
        }
        else {
          BOOL v13 = 1;
        }
        --v8;
        if (v13) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
LABEL_22:
      unint64_t v14 = *(unsigned __int8 *)(a1 + v7);
      if (((1 << v14) & 0x2401) == 0 || v14 > 0xF) {
        return (char)v14;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    __darwin_ct_rune_t v6 = *(char *)a1;
    return __tolower(v6);
  }
  return result;
}

int strcasecmp(const char *a1, const char *a2)
{
  if (!((unint64_t)a1 | (unint64_t)a2)) {
    return 0;
  }
  if (!a1 && a2)
  {
    __darwin_ct_rune_t v5 = *a2;
    return -__tolower(v5);
  }
  if (!a1 || a2)
  {
    LOBYTE(v7) = *a1;
    if (*a1)
    {
      uint64_t v8 = 0;
      pthread_t v9 = a1 + 1;
      while (1)
      {
        __darwin_ct_rune_t v10 = __tolower((char)v7);
        __darwin_ct_rune_t v11 = __tolower(a2[v8]);
        int v12 = v8 == 0xFFFFFFFFLL ? -1 : v2;
        int v2 = v10 == v11 ? v12 : v10 - v11;
        if (v8 == 0xFFFFFFFFLL || v10 != v11) {
          break;
        }
        uint64_t v13 = v8 + 1;
        int v7 = v9[v8++];
        if (!v7)
        {
          __darwin_ct_rune_t v5 = a2[v13];
          if (a2[v13]) {
            return -__tolower(v5);
          }
          return 0;
        }
      }
      return v2;
    }
    __darwin_ct_rune_t v5 = *a2;
    if (*a2) {
      return -__tolower(v5);
    }
    return 0;
  }
  else
  {
    __darwin_ct_rune_t v6 = *a1;
    return __tolower(v6);
  }
}

uint64_t systemtime(void)
{
  if (!systemtime(void)::denom)
  {
    mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
    mach_timebase_info(&info);
    if (info.denom)
    {
      uint32_t denom = info.denom;
      uint32_t numer = info.numer;
      do
      {
        uint32_t v2 = denom;
        uint32_t denom = numer % denom;
        uint32_t numer = v2;
      }
      while (denom);
    }
    else
    {
      uint32_t v2 = info.numer;
    }
    unsigned int v3 = 1000000;
    uint32_t v4 = info.numer / v2;
    do
    {
      uint32_t v5 = v4;
      uint32_t v4 = v3;
      unsigned int v3 = v5 % v3;
    }
    while (v3);
    systemtime(void)::uint32_t numer = info.numer / v2 / v4;
    systemtime(void)::uint32_t denom = 0xF4240 / v4 * (unint64_t)(info.denom / v2);
  }
  return systemtime(void)::numer * mach_absolute_time() / systemtime(void)::denom;
}

ssize_t writeToCompletion(int __fd, const unsigned __int8 *__buf, size_t __nbyte)
{
  while (__nbyte)
  {
    ssize_t result = write(__fd, __buf, __nbyte);
    __buf += result;
    __nbyte -= result;
    if (result < 0) {
      return result;
    }
  }
  return 0;
}

uint64_t config::hw::watch(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD778;
  if (!off_1EBBDD778)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v9, v1);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint32_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
    off_1EBBDD778 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint32_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD778;
  }
  __darwin_ct_rune_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
  if (*(&off_1EBBDD778 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD778 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 144))(v2);
  uint64_t v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_1A10F3508(_Unwind_Exception *a1)
{
}

void sub_1A10F3524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t config::hw::iPad(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD778;
  if (!off_1EBBDD778)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v9, v1);
    long long v3 = v9;
    long long v9 = 0uLL;
    uint32_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
    off_1EBBDD778 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint32_t v5 = (std::__shared_weak_count *)*((void *)&v9 + 1);
    if (*((void *)&v9 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD778;
  }
  __darwin_ct_rune_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
  if (*(&off_1EBBDD778 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD778 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v2);
  uint64_t v8 = result;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v8;
    }
  }
  return result;
}

void sub_1A10F36CC(_Unwind_Exception *a1)
{
}

void sub_1A10F36E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::product(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD778;
  if (!off_1EBBDD778)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint32_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
    off_1EBBDD778 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint32_t v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD778;
  }
  __darwin_ct_rune_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
  if (*(&off_1EBBDD778 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD778 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A10F3898(_Unwind_Exception *a1)
{
}

void sub_1A10F38B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::deviceMaterial(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD778;
  if (!off_1EBBDD778)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint32_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
    off_1EBBDD778 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint32_t v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD778;
  }
  __darwin_ct_rune_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
  if (*(&off_1EBBDD778 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD778 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 104))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A10F3A64(_Unwind_Exception *a1)
{
}

void sub_1A10F3A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::getBootArgs(std::string *a1@<X8>)
{
  memset(v27, 170, 24);
  long long v3 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v4 = off_1EBBDD778;
  if (!off_1EBBDD778)
  {
    ctu::Gestalt::create_default_global((uint64_t *)__p, v3);
    long long v5 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    __darwin_ct_rune_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
    off_1EBBDD778 = v5;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    long long v7 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v4 = off_1EBBDD778;
  }
  uint64_t v8 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
  v27[3] = v4;
  v27[4] = *(&off_1EBBDD778 + 1);
  if (*(&off_1EBBDD778 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD778 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v4 + 112))(v27, v4);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  HIBYTE(v26) = 9;
  strcpy((char *)__p, "boot-args");
  long long v9 = (uint64_t *)v27[1];
  if (v27[1])
  {
    while (1)
    {
      __darwin_ct_rune_t v11 = (uint64_t **)v9;
      unint64_t v14 = (const void *)v9[4];
      int v12 = v9 + 4;
      uint64_t v13 = v14;
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        uint64_t v16 = v12;
      }
      else {
        uint64_t v16 = v13;
      }
      if (v15 >= 0) {
        unint64_t v17 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        unint64_t v17 = v12[1];
      }
      if (v17 >= 9) {
        size_t v18 = 9;
      }
      else {
        size_t v18 = v17;
      }
      int v19 = memcmp(__p, v16, v18);
      if (v19)
      {
        if (v19 < 0) {
          goto LABEL_16;
        }
LABEL_30:
        int v20 = memcmp(v16, __p, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0) {
            goto LABEL_41;
          }
        }
        else if (v17 >= 9)
        {
LABEL_41:
          uint64_t v21 = (char *)v11;
          if (*((char *)v11 + 79) < 0) {
            goto LABEL_42;
          }
LABEL_40:
          long long v24 = *(_OWORD *)(v21 + 56);
          a1->__r_.__value_.__r.__words[2] = *((void *)v21 + 9);
          *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v24;
          goto LABEL_43;
        }
        long long v9 = v11[1];
        if (!v9)
        {
          __darwin_ct_rune_t v10 = v11 + 1;
          goto LABEL_37;
        }
      }
      else
      {
        if (v17 <= 9) {
          goto LABEL_30;
        }
LABEL_16:
        long long v9 = *v11;
        __darwin_ct_rune_t v10 = v11;
        if (!*v11) {
          goto LABEL_37;
        }
      }
    }
  }
  __darwin_ct_rune_t v10 = (uint64_t **)&v27[1];
  __darwin_ct_rune_t v11 = (uint64_t **)&v27[1];
LABEL_37:
  uint64_t v21 = (char *)operator new(0x50uLL);
  *((_OWORD *)v21 + 2) = *(_OWORD *)__p;
  uint64_t v22 = v26;
  __p[1] = 0;
  uint64_t v26 = 0;
  __p[0] = 0;
  *((void *)v21 + 6) = v22;
  *((void *)v21 + 7) = 0;
  *((void *)v21 + 8) = 0;
  *((void *)v21 + 9) = 0;
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)v21 + 2) = v11;
  pthread_mutex_t *v10 = (uint64_t *)v21;
  uint64_t v23 = (uint64_t *)v21;
  if (*(void *)v27[0])
  {
    v27[0] = *(void *)v27[0];
    uint64_t v23 = *v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v27[1], v23);
  ++v27[2];
  if ((v21[79] & 0x80000000) == 0) {
    goto LABEL_40;
  }
LABEL_42:
  std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)v21 + 7), *((void *)v21 + 8));
LABEL_43:
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v27[1]);
}

void sub_1A10F3DA8(_Unwind_Exception *a1)
{
}

void sub_1A10F3DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10F3DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a16);
  _Unwind_Resume(a1);
}

void config::hw::regionCode(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD778;
  if (!off_1EBBDD778)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
    off_1EBBDD778 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD778;
  }
  __darwin_ct_rune_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
  if (*(&off_1EBBDD778 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD778 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A10F3F98(_Unwind_Exception *a1)
{
}

void sub_1A10F3FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void config::hw::regionInfo(config::hw *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = off_1EBBDD778;
  if (!off_1EBBDD778)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
    off_1EBBDD778 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = off_1EBBDD778;
  }
  __darwin_ct_rune_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
  if (*(&off_1EBBDD778 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD778 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(void *)v2 + 64))(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A10F4164(_Unwind_Exception *a1)
{
}

void sub_1A10F4180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t config::build::carrier(config::build *this)
{
  uint64_t result = TelephonyUtilIsCarrierBuild();
  if (result) {
    return TelephonyUtilIsInternalBuild() ^ 1;
  }
  return result;
}

uint64_t config::build::internal_or_carrier(config::build *this)
{
  if (TelephonyUtilIsInternalBuild()) {
    return 1;
  }

  return TelephonyUtilIsCarrierBuild();
}

void config::build::version(config::build *this)
{
  uint64_t v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  uint64_t v2 = (void (***)(void))off_1EBBDD778;
  if (!off_1EBBDD778)
  {
    ctu::Gestalt::create_default_global((uint64_t *)&v7, v1);
    long long v3 = v7;
    long long v7 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
    off_1EBBDD778 = v3;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)&v7 + 1);
    if (*((void *)&v7 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v2 = (void (***)(void))off_1EBBDD778;
  }
  __darwin_ct_rune_t v6 = (std::__shared_weak_count *)*(&off_1EBBDD778 + 1);
  if (*(&off_1EBBDD778 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(&off_1EBBDD778 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (**v2)(v2);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1A10F4390(_Unwind_Exception *a1)
{
}

void sub_1A10F43AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_4:
        uint64_t v2 = (void *)a1;
LABEL_6:
        operator delete(v2);
        return;
      }
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 32));
    uint64_t v2 = (void *)a1;
    goto LABEL_6;
  }
}

uint64_t __cxx_global_var_init()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1A10C7000);
  }
  return result;
}

uint64_t qmi::QMuxClientIface::QMuxClientIface(uint64_t a1, long long *a2, char a3)
{
  *(void *)a1 = &unk_1EF43CC30;
  long long v5 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(unsigned char *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 33) = -1;
  *(void *)(a1 + 36) = 0x2FFFFFFFFLL;
  *(unsigned char *)(a1 + 44) = 1;
  return a1;
}

uint64_t qmi::QMuxClientIface::setLogLevel(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

uint64_t qmi::QMuxClientIface::setShouldResetOnTimeout(uint64_t this, char a2)
{
  *(unsigned char *)(this + 44) = a2;
  return this;
}

uint64_t qmi::QMuxClientIface::setMaxLogBytes(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void qmi::create_client_proxy_state(uint64_t *a1@<X0>, long long *a2@<X1>, char a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  _ZNSt3__115allocate_sharedB8ne180100IN3qmi15EurTransportXPCENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v18);
  uint64_t v8 = operator new(0x138uLL);
  uint64_t v9 = (uint64_t)v8;
  unint64_t v14 = v18;
  int v15 = (std::__shared_weak_count *)v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::QmiClientProxyAdapter::QmiClientProxyAdapter((uint64_t)v8, a1, a2, a3, (uint64_t *)&v14);
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::QmiClientProxyAdapter>::shared_ptr[abi:ne180100]<qmi::QmiClientProxyAdapter,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter*)#1},void>(&v16, v9);
  unint64_t v10 = v17;
  if (v16) {
    unint64_t v11 = v16 + 48;
  }
  else {
    unint64_t v11 = 0;
  }
  *a4 = v11;
  a4[1] = v10;
  unint64_t v16 = 0;
  unint64_t v17 = 0;
  int v12 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1A10F4780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1A10F479C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v13);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1A10F47C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void qmi::create_client_proxy_gcd_state(uint64_t *a1@<X0>, long long *a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X8>)
{
  int v12 = (char *)operator new(0xA8uLL);
  *((void *)v12 + 2) = 0;
  *((void *)v12 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *(void *)int v12 = &unk_1EF43D948;
  *((void *)v12 + 10) = 0;
  *((void *)v12 + 14) = 0;
  *((void *)v12 + 5) = v12;
  *((void *)v12 + 6) = 0;
  *((void *)v12 + 3) = &unk_1EF43D508;
  *((void *)v12 + 4) = v12 + 24;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  BOOL v31 = v12 + 24;
  CFAllocatorRef v32 = (std::__shared_weak_count *)v12;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 2, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add((atomic_ullong *volatile)v12 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v13 = (std::__shared_weak_count *)v12;
    (*(void (**)(char *))(*(void *)v12 + 16))(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  unint64_t v14 = v31;
  uint64_t v15 = *a4;
  unint64_t v16 = (std::__shared_weak_count *)a4[1];
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v17 = (std::__shared_weak_count *)*((void *)v31 + 13);
  *((void *)v31 + 12) = v15;
  v14[13] = v16;
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v18 = *a5;
  unint64_t v19 = (std::__shared_weak_count *)a5[1];
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v20 = (std::__shared_weak_count *)v14[15];
  v14[14] = v18;
  v14[15] = v19;
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v21 = operator new(0x138uLL);
  uint64_t v22 = (uint64_t)v21;
  int v27 = v14;
  uint64_t v28 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::QmiClientProxyAdapter::QmiClientProxyAdapter((uint64_t)v21, a1, a2, a3, (uint64_t *)&v27);
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::QmiClientProxyAdapter>::shared_ptr[abi:ne180100]<qmi::QmiClientProxyAdapter,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter*)#1},void>(&v29, v22);
  unint64_t v23 = v30;
  if (v29) {
    unint64_t v24 = v29 + 48;
  }
  else {
    unint64_t v24 = 0;
  }
  *a6 = v24;
  a6[1] = v23;
  unint64_t v29 = 0;
  unint64_t v30 = 0;
  uint64_t v25 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = v32;
  if (v32)
  {
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1A10F4A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1A10F4A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v13);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1A10F4A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN3qmi15EurTransportXPCENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x80uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = &v2->__shared_owners_;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D8A8;
  uint64_t v4 = v2 + 1;
  v2[3].__shared_owners_ = 0;
  v2[4].__shared_weak_owners_ = 0;
  v2[1].__shared_weak_owners_ = 0;
  v2[2].__vftable = 0;
  v2[1].__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D4C8;
  v2[5].__vftable = (std::__shared_weak_count_vtbl *)xpc_null_create();
  *a1 = v2 + 1;
  a1[1] = v2;
  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = (uint64_t)v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v2[1].__shared_owners_ = (uint64_t)v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);

  std::__shared_weak_count::__release_weak(v2);
}

void std::__shared_ptr_emplace<qmi::EurTransportXPC>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D8A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<qmi::EurTransportXPC>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D8A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<qmi::EurTransportXPC>::__on_zero_shared(void *a1)
{
  a1[3] = &unk_1EF43D4C8;
  MEMORY[0x1A622BE80](a1 + 15);
  a1[3] = &unk_1EF43D488;
  uint64_t v2 = (void *)a1[14];
  if (v2 == a1 + 11)
  {
    (*(void (**)(void *))(a1[11] + 32))(a1 + 11);
    long long v3 = a1 + 7;
    uint64_t v4 = (void *)a1[10];
    if (v4 != a1 + 7) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    long long v3 = a1 + 7;
    uint64_t v4 = (void *)a1[10];
    if (v4 != a1 + 7)
    {
LABEL_5:
      if (v4) {
        (*(void (**)(void *))(*v4 + 40))(v4);
      }
      long long v5 = a1[6];
      if (v5) {
        goto LABEL_8;
      }
      goto LABEL_9;
    }
  }
  (*(void (**)(void *))(*v3 + 32))(v3);
  long long v5 = a1[6];
  if (v5) {
LABEL_8:
  }
    dispatch_release(v5);
LABEL_9:
  long long v6 = (std::__shared_weak_count *)a1[5];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void *std::shared_ptr<qmi::QmiClientProxyAdapter>::shared_ptr[abi:ne180100]<qmi::QmiClientProxyAdapter,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D8F8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  long long v6 = *(std::__shared_weak_count **)(a2 + 64);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 56) = a2 + 48;
      *(void *)(a2 + 64) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 56) = a2 + 48;
  *(void *)(a2 + 64) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A10F4ED8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[9], v1, (dispatch_function_t)std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter*)#1}::operator() const(qmi::QmiClientProxyAdapter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A10F4F00(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<qmi::QmiClientProxyAdapter *,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter *)#1},std::allocator<qmi::QmiClientProxyAdapter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::QmiClientProxyAdapter *,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter *)#1},std::allocator<qmi::QmiClientProxyAdapter>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<qmi::QmiClientProxyAdapter *,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter *)#1},std::allocator<qmi::QmiClientProxyAdapter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15make_shared_ptrINS1_21QmiClientProxyAdapte"
                     "rEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15make_shared_ptrINS1_21QmiClient"
                                "ProxyAdapterEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15make_shared_ptrINS1_21QmiClientProxyAdapterEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15make_shared_ptrINS1_21QmiClientProxyAdapterEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter*)#1}::operator() const(qmi::QmiClientProxyAdapter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_emplace<qmi::EurTransportLocal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<qmi::EurTransportLocal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43D948;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<qmi::EurTransportLocal>::__on_zero_shared(void *a1)
{
  a1[3] = &unk_1EF43D508;
  uint64_t v2 = (std::__shared_weak_count *)a1[20];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v3 = (std::__shared_weak_count *)a1[18];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  unint64_t v3 = (std::__shared_weak_count *)a1[18];
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_5:
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  a1[3] = &unk_1EF43D488;
  long long v5 = (void *)a1[14];
  if (v5 == a1 + 11)
  {
    (*(void (**)(void *))(a1[11] + 32))(a1 + 11);
    long long v6 = a1 + 7;
    long long v7 = (void *)a1[10];
    if (v7 != a1 + 7) {
      goto LABEL_11;
    }
  }
  else
  {
    if (v5) {
      (*(void (**)(void *))(*v5 + 40))(v5);
    }
    long long v6 = a1 + 7;
    long long v7 = (void *)a1[10];
    if (v7 != a1 + 7)
    {
LABEL_11:
      if (v7) {
        (*(void (**)(void *))(*v7 + 40))(v7);
      }
      uint64_t v8 = a1[6];
      if (v8) {
        goto LABEL_14;
      }
      goto LABEL_15;
    }
  }
  (*(void (**)(void *))(*v6 + 32))(v6);
  uint64_t v8 = a1[6];
  if (v8) {
LABEL_14:
  }
    dispatch_release(v8);
LABEL_15:
  uint64_t v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    std::__shared_weak_count::__release_weak(v9);
  }
}

const char *asString(unsigned int a1)
{
  if (a1 > 6) {
    return "atcs";
  }
  else {
    return off_1E5A411F0[a1];
  }
}

void ATCSLogger::ATCSLogger(ATCSLogger *this)
{
  *(void *)this = &unk_1EF43D998;
}

void ATCSLogger::instantiate(ATCSLogger *this, ATCSLogger *a2)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN10ATCSLogger11instantiateEPS__block_invoke;
  block[3] = &__block_descriptor_tmp_0;
  block[4] = this;
  if (ATCSLogger::instantiate(ATCSLogger*)::onceToken != -1) {
    dispatch_once(&ATCSLogger::instantiate(ATCSLogger*)::onceToken, block);
  }
}

uint64_t ___ZN10ATCSLogger11instantiateEPS__block_invoke(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD840, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD840))
  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&_MergedGlobals_0, "ATCSLogger");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &_MergedGlobals_0, &dword_1A10C7000);
    __cxa_guard_release(&qword_1EBBDD840);
  }
  uint64_t v2 = _MergedGlobals_0;
  pthread_mutex_lock((pthread_mutex_t *)_MergedGlobals_0);
  *(void *)(v2 + 64) = pthread_self();
  if (ATCSLogger::fsInstance)
  {
    (*(void (**)(uint64_t))(*(void *)ATCSLogger::fsInstance + 8))(ATCSLogger::fsInstance);
    ATCSLogger::fsInstance = 0;
  }
  ATCSLogger::fsInstance = *(void *)(a1 + 32);
  unint64_t v3 = (pthread_mutex_t *)_MergedGlobals_0;
  pthread_self();
  v3[1].__sig = 0;
  return pthread_mutex_unlock(v3);
}

void sub_1A10F5470(_Unwind_Exception *a1)
{
}

void *ATCSLogger::getInstance(ATCSLogger *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD840, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD840))
  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&_MergedGlobals_0, "ATCSLogger");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &_MergedGlobals_0, &dword_1A10C7000);
    __cxa_guard_release(&qword_1EBBDD840);
  }
  uint64_t v1 = _MergedGlobals_0;
  pthread_mutex_lock((pthread_mutex_t *)_MergedGlobals_0);
  *(void *)(v1 + 64) = pthread_self();
  uint64_t v2 = (void *)ATCSLogger::fsInstance;
  if (!ATCSLogger::fsInstance)
  {
    uint64_t v2 = operator new(0x10uLL);
    *uint64_t v2 = &unk_1EF43D998;
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v2 + 1), "com.apple.telephony.bb", "atcs");
    *uint64_t v2 = &unk_1EF43DA28;
    ATCSLogger::fsInstance = (uint64_t)v2;
  }
  unint64_t v3 = (pthread_mutex_t *)_MergedGlobals_0;
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  return v2;
}

void sub_1A10F55AC(_Unwind_Exception *a1)
{
}

void sub_1A10F55C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  uint64_t v4 = *(pthread_mutex_t **)(v2 + 2104);
  pthread_self();
  v4[1].__sig = 0;
  pthread_mutex_unlock(v4);
  _Unwind_Resume(a1);
}

uint64_t ATCSLogger::logCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  size_t v12 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a6 + 16))(a6, a5);
  int v13 = MEMORY[0x1F4188790]();
  uint64_t v15 = &v19[-v14];
  if (v13) {
    memset(&v19[-v14], 170, v12);
  }
  unsigned int v20 = -1431655766;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, unsigned char *, size_t, uint64_t, uint64_t, unsigned int *))(*(void *)a6 + 24))(a6, v15, v12, a4, a5, &v20);
  if (v16)
  {
    uint64_t v17 = v20;
  }
  else
  {
    uint64_t v17 = 0;
    *uint64_t v15 = 0;
    unsigned int v20 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2, a3, v15, v16, v17, a4, a5);
}

void ATCSLoggerDefault::~ATCSLoggerDefault(ATCSLoggerDefault *this)
{
}

{
  uint64_t vars8;

  MEMORY[0x1A622BDE0]((char *)this + 8);

  operator delete(this);
}

void ATCSLoggerDefault::logWithLabel(uint64_t a1, unsigned int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  memset(&__dst, 170, sizeof(__dst));
  if (a2 > 6) {
    size_t v12 = "atcs";
  }
  else {
    size_t v12 = off_1E5A411F0[a2];
  }
  size_t v13 = strlen(v12);
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 < 0x17)
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
    if (v13)
    {
      memcpy(&__dst, v12, v13);
      __dst.__r_.__value_.__s.__data_[v14] = 0;
      if (!a3) {
        goto LABEL_16;
      }
    }
    else
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      if (!a3) {
        goto LABEL_16;
      }
    }
    goto LABEL_14;
  }
  uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v15 = v13 | 7;
  }
  __dst.__r_.__value_.__l.__size_ = v13;
  __dst.__r_.__value_.__r.__words[2] = (v15 + 1) | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v15 + 1);
  memcpy(__dst.__r_.__value_.__l.__data_, v12, v14);
  *(unsigned char *)(__dst.__r_.__value_.__r.__words[0] + v14) = 0;
  if (a3)
  {
LABEL_14:
    if (*a3)
    {
      std::string::push_back(&__dst, 46);
      size_t v16 = strlen(a3);
      std::string::append(&__dst, a3, v16);
    }
  }
LABEL_16:
  int v27 = &a9;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[1] = v17;
  v25[2] = v17;
  v25[0] = v17;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v25);
  MEMORY[0x1A622BED0](v24, a4, v27);
  ctu::LogMessageBuffer::operator=();
  MEMORY[0x1A622BEF0](v24);
  uint64_t v18 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type v20 = __dst.__r_.__value_.__r.__words[0];
    uint64_t v21 = ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)v25);
    p_dst = &__dst;
    if (v19 < 0) {
      p_dst = (std::string *)v20;
    }
    if (*(char *)(v21 + 23) >= 0) {
      uint64_t v23 = v21;
    }
    else {
      uint64_t v23 = *(void *)v21;
    }
    *(_DWORD *)long long buf = 136315394;
    unint64_t v30 = p_dst;
    __int16 v31 = 2080;
    uint64_t v32 = v23;
    _os_log_impl(&dword_1A10C7000, v18, OS_LOG_TYPE_DEFAULT, "#I %s: %s", buf, 0x16u);
  }
  MEMORY[0x1A622BEF0](v25);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1A10F5A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  MEMORY[0x1A622BEF0](va);
  if (*(char *)(v9 - 97) < 0)
  {
    operator delete(*(void **)(v9 - 120));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ATCSLoggerDefault::fault(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a2 > 6) {
    unint64_t v11 = "atcs";
  }
  else {
    unint64_t v11 = off_1E5A411F0[a2];
  }
  std::string::size_type v20 = &a9;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[1] = v12;
  v18[2] = v12;
  v18[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v18);
  MEMORY[0x1A622BED0](v17, a3, v20);
  ctu::LogMessageBuffer::operator=();
  MEMORY[0x1A622BEF0](v17);
  size_t v13 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)v18);
    if (*(char *)(v15 + 23) >= 0) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = *(void *)v15;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v22 = v11;
    __int16 v23 = 2080;
    uint64_t v24 = v16;
    _os_log_fault_impl(&dword_1A10C7000, v13, OS_LOG_TYPE_FAULT, "%s: %s", buf, 0x16u);
  }
  return MEMORY[0x1A622BEF0](v18);
}

void ATCSLoggerDefault::logCommandInternal(uint64_t a1, unsigned int a2, const char *a3, const void *a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  memset(&__dst, 170, sizeof(__dst));
  if (a2 > 6) {
    size_t v14 = "atcs";
  }
  else {
    size_t v14 = off_1E5A411F0[a2];
  }
  size_t v15 = strlen(v14);
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v16 = v15;
  uint64_t v17 = a7;
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v16;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
    p_dst = &__dst;
    if (!v15)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      if (!a3) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }
  memcpy(p_dst, v14, v16);
  p_dst->__r_.__value_.__s.__data_[v16] = 0;
  if (!a3) {
    goto LABEL_15;
  }
LABEL_13:
  if (*a3)
  {
    std::string::push_back(&__dst, 46);
    size_t v21 = strlen(a3);
    std::string::append(&__dst, a3, v21);
  }
LABEL_15:
  uint64_t v22 = *(NSObject **)(a1 + 8);
  if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_33;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v23 = &__dst;
  }
  else {
    __int16 v23 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  size_t v24 = a5;
  if (a5 >= 0x17)
  {
    uint64_t v26 = (a5 & 0xFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17) {
      uint64_t v26 = a5 | 7;
    }
    uint64_t v27 = v26 + 1;
    uint64_t v25 = operator new(v26 + 1);
    v37[1] = (void *)v24;
    unint64_t v38 = v27 | 0x8000000000000000;
    v37[0] = v25;
    goto LABEL_25;
  }
  HIBYTE(v3MEMORY[0x1A622BDE0]((char *)this + 8) = a5;
  uint64_t v25 = v37;
  if (a5) {
LABEL_25:
  }
    memcpy(v25, a4, v24);
  unint64_t v28 = a8 - a6;
  unint64_t v29 = (ctu *)(v17 + a6);
  *((unsigned char *)v25 + v24) = 0;
  int v30 = SHIBYTE(v38);
  __int16 v31 = (void **)v37[0];
  ctu::hex(v29, (const void *)v28);
  uint64_t v32 = v37;
  if (v30 < 0) {
    uint64_t v32 = v31;
  }
  if (v36 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  *(_DWORD *)long long buf = 136315650;
  CFAllocatorRef v41 = v23;
  __int16 v42 = 2080;
  CFAllocatorRef v43 = v32;
  __int16 v44 = 2080;
  CFAllocatorRef v45 = p_p;
  _os_log_impl(&dword_1A10C7000, v22, OS_LOG_TYPE_DEFAULT, "#I %s: %s [%s]", buf, 0x20u);
  if (v36 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(v37[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_34:
  }
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1A10F5EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Transaction::Transaction(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  *(void *)a1 = 0;
  long long v7 = *a4;
  if (*a4) {
    long long v7 = _Block_copy(v7);
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v7;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = 0;
  return a1;
}

{
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(void *)a1 = 0;
  long long v7 = *a4;
  if (*a4) {
    long long v7 = _Block_copy(v7);
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v7;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = 0;
  return a1;
}

void qmi::Transaction::~Transaction(qmi::Transaction *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if (*((void *)this + 1)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x2A, "!fCallback", "is not", "true", a6);
  }
  if (*(void *)this)
  {
    dispatch_source_cancel(*(dispatch_source_t *)this);
    long long v7 = *(NSObject **)this;
    *(void *)this = 0;
    if (v7) {
      dispatch_release(v7);
    }
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v9 = (const void *)*((void *)this + 1);
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  uint64_t v9 = (const void *)*((void *)this + 1);
  if (v9) {
LABEL_9:
  }
    _Block_release(v9);
LABEL_10:
  if (*(void *)this) {
    dispatch_release(*(dispatch_object_t *)this);
  }
}

void qmi::Transaction::cancelTimer(NSObject **this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    dispatch_source_cancel(v2);
    unint64_t v3 = *this;
    *this = 0;
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void qmi::Transaction::startTimer(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) && *(void *)(a1 + 8))
  {
    current_queue = dispatch_get_current_queue();
    long long v5 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, current_queue);
    long long v6 = *(NSObject **)a1;
    *(void *)a1 = v5;
    if (v6)
    {
      dispatch_release(v6);
      long long v5 = *(NSObject **)a1;
    }
    if (v5)
    {
      int64_t v7 = 1000000 * *(void *)(a1 + 32);
      __int16 v8 = *(_WORD *)(*(void *)(a1 + 16) + 26);
      dispatch_retain(v5);
      uint64_t v9 = *(NSObject **)a1;
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 1174405120;
      handler[2] = ___ZN3qmi11Transaction10startTimerEU13block_pointerFvtE_block_invoke;
      handler[3] = &__block_descriptor_tmp_9;
      __int16 v14 = v8;
      handler[4] = a2;
      dispatch_object_t object = v5;
      dispatch_retain(v5);
      dispatch_source_set_event_handler(v9, handler);
      unint64_t v10 = *(NSObject **)a1;
      dispatch_time_t v11 = dispatch_time(0, v7);
      dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
      dispatch_activate(*(dispatch_object_t *)a1);
      if (object) {
        dispatch_release(object);
      }
      dispatch_release(v5);
    }
  }
}

void ___ZN3qmi11Transaction10startTimerEU13block_pointerFvtE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(NSObject **)(a1 + 40);

  dispatch_source_cancel(v2);
}

void __copy_helper_block_e8_32b40c23_ZTSKN8dispatch6sourceE(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 7);
  uint64_t v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
  }
}

void __destroy_helper_block_e8_32b40c23_ZTSKN8dispatch6sourceE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 32);

  _Block_object_dispose(v3, 7);
}

void qmi::Transaction::invoke(NSObject **this, NSObject *a2, const qmi::ResponseBase *a3)
{
  long long v6 = *this;
  if (v6)
  {
    dispatch_source_cancel(v6);
    int64_t v7 = *this;
    *this = 0;
    if (v7) {
      dispatch_release(v7);
    }
  }
  __int16 v8 = this[1];
  this[1] = 0;
  if (v8)
  {
    uint64_t v9 = _Block_copy(v8);
    uint64_t v10 = *(void *)a3;
    uint64_t v11 = *((void *)a3 + 1);
    v14[0] = *(void *)a3;
    v14[1] = v11;
    uint64_t v12 = *((void *)a3 + 2);
    void v14[2] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    size_t v13 = operator new(0x20uLL);
    *size_t v13 = v9;
    v13[1] = v10;
    void v13[2] = v11;
    v13[3] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    dispatch_async_f(a2, v13, (dispatch_function_t)dispatch::async<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0,std::default_delete<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0>>)::{lambda(void *)#1}::__invoke);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)v14);
    _Block_release(v8);
  }
}

uint64_t qmi::TransactionQueue::State::State(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v6 = a4[1];
  *(void *)(a1 + 40) = *a4;
  *(void *)(a1 + 4MEMORY[0x1A622BDE0]((char *)this + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a5[1];
  *(void *)(a1 + 56) = *a5;
  *(void *)(a1 + 64) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 16MEMORY[0x1A622BDE0]((char *)this + 8) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24MEMORY[0x1A622BDE0]((char *)this + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 8MEMORY[0x1A622BDE0]((char *)this + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  int v8 = *(unsigned __int8 *)(*a5 + 32);
  *(unsigned char *)(a1 + 264) = v8;
  *(_WORD *)(a1 + 266) = 1;
  if (v8)
  {
    int v9 = 5;
  }
  else
  {
    uint64_t v10 = (capabilities::radio *)capabilities::radio::supportsQMuxSendWindow((capabilities::radio *)a1);
    if (v10) {
      int v9 = capabilities::radio::QMuxPendingRequestLimitCount(v10);
    }
    else {
      int v9 = 1024;
    }
  }
  *(_DWORD *)(a1 + 26MEMORY[0x1A622BDE0]((char *)this + 8) = v9;
  dispatch_retain(*(dispatch_object_t *)(a1 + 16));
  dispatch_retain(*(dispatch_object_t *)(a1 + 24));
  return a1;
}

void sub_1A10F653C(_Unwind_Exception *a1)
{
  std::vector<dispatch::group_session>::~vector[abi:ne180100](v5);
  std::vector<dispatch::group_session>::~vector[abi:ne180100](v6);
  boost::ptr_deque<qmi::Transaction,boost::heap_clone_allocator,std::allocator<void *>>::~ptr_deque(v4, v8, v9, v10, v11, v12);
  boost::ptr_deque<qmi::Transaction,boost::heap_clone_allocator,std::allocator<void *>>::~ptr_deque(v3, v13, v14, v15, v16, v17);
  boost::ptr_deque<qmi::Transaction,boost::heap_clone_allocator,std::allocator<void *>>::~ptr_deque(v2, v18, v19, v20, v21, v22);
  __int16 v23 = (std::__shared_weak_count *)v1[8];
  if (v23)
  {
    std::__shared_weak_count::__release_weak(v23);
    size_t v24 = (std::__shared_weak_count *)v1[6];
    if (!v24)
    {
LABEL_3:
      uint64_t v25 = (std::__shared_weak_count *)v1[1];
      if (!v25) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    size_t v24 = (std::__shared_weak_count *)v1[6];
    if (!v24) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v24);
  uint64_t v25 = (std::__shared_weak_count *)v1[1];
  if (!v25) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void **std::vector<dispatch::group_session>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      long long v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = *((void *)v5 - 1);
        v5 -= 8;
        uint64_t v6 = v7;
        if (v7)
        {
          dispatch_group_leave(v6);
          uint64_t v8 = *((void *)v3 - 1);
          if (v8) {
            dispatch_release(v8);
          }
        }
        unint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t boost::ptr_deque<qmi::Transaction,boost::heap_clone_allocator,std::allocator<void *>>::~ptr_deque(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v7 = a1[1];
  if (a1[2] != v7)
  {
    unint64_t v8 = a1[4];
    uint64_t v9 = (qmi::Transaction ***)(v7 + 8 * (v8 >> 9));
    uint64_t v10 = *v9;
    uint64_t v11 = &(*v9)[v8 & 0x1FF];
    uint64_t v12 = *(void *)(v7 + (((a1[5] + v8) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v8) & 0x1FF);
    while (v11 != (qmi::Transaction **)v12)
    {
      if (*v11)
      {
        qmi::Transaction::~Transaction(*v11, a2, a3, a4, a5, a6);
        operator delete(v13);
        uint64_t v10 = *v9;
      }
      if ((char *)++v11 - (char *)v10 == 4096)
      {
        uint64_t v14 = v9[1];
        ++v9;
        uint64_t v10 = v14;
        uint64_t v11 = v14;
      }
    }
  }

  return std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)a1);
}

void qmi::TransactionQueue::State::~State(dispatch_object_t *this)
{
  qmi::TransactionQueue::State::stop_sync((qmi::TransactionQueue::State *)this);
  dispatch_release(this[3]);
  dispatch_release(this[2]);
  uint64_t v7 = this[30];
  if (v7)
  {
    dispatch_object_t v8 = this[31];
    dispatch_object_t v9 = this[30];
    if (v8 != v7)
    {
      dispatch_object_t v10 = this[31];
      do
      {
        isa = v10[-1].isa;
        --v10;
        uint64_t v11 = isa;
        if (isa)
        {
          dispatch_group_leave(v11);
          uint64_t v13 = v8[-1].isa;
          if (v13) {
            dispatch_release(v13);
          }
        }
        dispatch_object_t v8 = v10;
      }
      while (v10 != v7);
      dispatch_object_t v9 = this[30];
    }
    this[31] = v7;
    operator delete(v9);
  }
  uint64_t v14 = this[27];
  if (v14)
  {
    dispatch_object_t v15 = this[28];
    dispatch_object_t v16 = this[27];
    if (v15 != v14)
    {
      dispatch_object_t v17 = this[28];
      do
      {
        uint64_t v19 = v17[-1].isa;
        --v17;
        uint64_t v18 = v19;
        if (v19)
        {
          dispatch_group_leave(v18);
          uint64_t v20 = v15[-1].isa;
          if (v20) {
            dispatch_release(v20);
          }
        }
        dispatch_object_t v15 = v17;
      }
      while (v17 != v14);
      dispatch_object_t v16 = this[27];
    }
    this[28] = v14;
    operator delete(v16);
  }
  uint64_t v21 = this[22];
  if (this[23] != v21)
  {
    unint64_t v22 = (unint64_t)this[25];
    __int16 v23 = &v21[v22 >> 9];
    size_t v24 = (qmi::Transaction **)v23->isa;
    uint64_t v25 = (qmi::Transaction **)((char *)v23->isa + 8 * (v22 & 0x1FF));
    uint64_t v26 = *(uint64_t *)((char *)&v21->isa + ((((unint64_t)this[26] + v22) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * (((unint64_t)this[26] + v22) & 0x1FF);
    while (v25 != (qmi::Transaction **)v26)
    {
      if (*v25)
      {
        qmi::Transaction::~Transaction(*v25, v2, v3, v4, v5, v6);
        operator delete(v27);
        size_t v24 = (qmi::Transaction **)v23->isa;
      }
      if ((char *)++v25 - (char *)v24 == 4096)
      {
        unint64_t v28 = (qmi::Transaction **)v23[1].isa;
        ++v23;
        size_t v24 = v28;
        uint64_t v25 = v28;
      }
    }
  }
  std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)(this + 21));
  CFAllocatorRef v34 = this[16];
  if (this[17] != v34)
  {
    unint64_t v35 = (unint64_t)this[19];
    char v36 = &v34[v35 >> 9];
    CFAllocatorRef v37 = (qmi::Transaction **)v36->isa;
    unint64_t v38 = (qmi::Transaction **)((char *)v36->isa + 8 * (v35 & 0x1FF));
    uint64_t v39 = *(uint64_t *)((char *)&v34->isa + ((((unint64_t)this[20] + v35) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * (((unint64_t)this[20] + v35) & 0x1FF);
    while (v38 != (qmi::Transaction **)v39)
    {
      if (*v38)
      {
        qmi::Transaction::~Transaction(*v38, v29, v30, v31, v32, v33);
        operator delete(v40);
        CFAllocatorRef v37 = (qmi::Transaction **)v36->isa;
      }
      if ((char *)++v38 - (char *)v37 == 4096)
      {
        CFAllocatorRef v41 = (qmi::Transaction **)v36[1].isa;
        ++v36;
        CFAllocatorRef v37 = v41;
        unint64_t v38 = v41;
      }
    }
  }
  std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)(this + 15));
  CFAllocatorRef v47 = this[10];
  if (this[11] != v47)
  {
    unint64_t v48 = (unint64_t)this[13];
    CFAllocatorRef v49 = &v47[v48 >> 9];
    CFAllocatorRef v50 = (qmi::Transaction **)v49->isa;
    CFAllocatorRef v51 = (qmi::Transaction **)((char *)v49->isa + 8 * (v48 & 0x1FF));
    uint64_t v52 = *(uint64_t *)((char *)&v47->isa + ((((unint64_t)this[14] + v48) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * (((unint64_t)this[14] + v48) & 0x1FF);
    while (v51 != (qmi::Transaction **)v52)
    {
      if (*v51)
      {
        qmi::Transaction::~Transaction(*v51, v42, v43, v44, v45, v46);
        operator delete(v53);
        CFAllocatorRef v50 = (qmi::Transaction **)v49->isa;
      }
      if ((char *)++v51 - (char *)v50 == 4096)
      {
        CFAllocatorRef v54 = (qmi::Transaction **)v49[1].isa;
        ++v49;
        CFAllocatorRef v50 = v54;
        CFAllocatorRef v51 = v54;
      }
    }
  }
  std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)(this + 9));
  CFAllocatorRef v55 = (std::__shared_weak_count *)this[8];
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  CFAllocatorRef v56 = (std::__shared_weak_count *)this[6];
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  CFAllocatorRef v57 = (std::__shared_weak_count *)this[1];
  if (v57) {
    std::__shared_weak_count::__release_weak(v57);
  }
}

void qmi::TransactionQueue::State::stop_sync(qmi::TransactionQueue::State *this)
{
  *((_DWORD *)this + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  if (*((void *)this + 14) || *((void *)this + 20) || *((void *)this + 26))
  {
    memset(v38, 170, sizeof(v38));
    qmi::MessageBase::MessageBase();
    uint64_t v7 = *((void *)this + 10);
    if (*((void *)this + 11) != v7)
    {
      unint64_t v8 = *((void *)this + 13);
      dispatch_object_t v9 = (void *)(v7 + 8 * (v8 >> 9));
      dispatch_object_t v10 = (NSObject ***)(*v9 + 8 * (v8 & 0x1FF));
      uint64_t v11 = *(void *)(v7 + (((*((void *)this + 14) + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*((void *)this + 14) + v8) & 0x1FF);
      while (v10 != (NSObject ***)v11)
      {
        uint64_t v12 = *v10++;
        qmi::Transaction::invoke(v12, *((NSObject **)this + 3), (const qmi::ResponseBase *)v38);
        if ((NSObject ***)((char *)v10 - *v9) == (NSObject ***)4096)
        {
          uint64_t v13 = (NSObject ***)v9[1];
          ++v9;
          dispatch_object_t v10 = v13;
        }
      }
    }
    boost::ptr_container_detail::reversible_ptr_container<boost::ptr_container_detail::sequence_config<qmi::Transaction,std::deque<void *>>,boost::heap_clone_allocator>::clear((void *)this + 9, v2, v3, v4, v5, v6);
    uint64_t v19 = *((void *)this + 16);
    if (*((void *)this + 17) != v19)
    {
      unint64_t v20 = *((void *)this + 19);
      uint64_t v21 = (void *)(v19 + 8 * (v20 >> 9));
      unint64_t v22 = (NSObject ***)(*v21 + 8 * (v20 & 0x1FF));
      uint64_t v23 = *(void *)(v19 + (((*((void *)this + 20) + v20) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*((void *)this + 20) + v20) & 0x1FF);
      while (v22 != (NSObject ***)v23)
      {
        size_t v24 = *v22++;
        qmi::Transaction::invoke(v24, *((NSObject **)this + 3), (const qmi::ResponseBase *)v38);
        if ((NSObject ***)((char *)v22 - *v21) == (NSObject ***)4096)
        {
          uint64_t v25 = (NSObject ***)v21[1];
          ++v21;
          unint64_t v22 = v25;
        }
      }
    }
    boost::ptr_container_detail::reversible_ptr_container<boost::ptr_container_detail::sequence_config<qmi::Transaction,std::deque<void *>>,boost::heap_clone_allocator>::clear((void *)this + 15, v14, v15, v16, v17, v18);
    uint64_t v31 = *((void *)this + 22);
    if (*((void *)this + 23) != v31)
    {
      unint64_t v32 = *((void *)this + 25);
      uint64_t v33 = (void *)(v31 + 8 * (v32 >> 9));
      CFAllocatorRef v34 = (NSObject ***)(*v33 + 8 * (v32 & 0x1FF));
      uint64_t v35 = *(void *)(v31 + (((*((void *)this + 26) + v32) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*((void *)this + 26) + v32) & 0x1FF);
      while (v34 != (NSObject ***)v35)
      {
        char v36 = *v34++;
        qmi::Transaction::invoke(v36, *((NSObject **)this + 3), (const qmi::ResponseBase *)v38);
        if ((NSObject ***)((char *)v34 - *v33) == (NSObject ***)4096)
        {
          CFAllocatorRef v37 = (NSObject ***)v33[1];
          ++v33;
          CFAllocatorRef v34 = v37;
        }
      }
    }
    boost::ptr_container_detail::reversible_ptr_container<boost::ptr_container_detail::sequence_config<qmi::Transaction,std::deque<void *>>,boost::heap_clone_allocator>::clear((void *)this + 21, v26, v27, v28, v29, v30);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)v38);
  }
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

std::__shared_weak_count_vtbl **qmi::TransactionQueue::State::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, std::__shared_weak_count_vtbl **a5@<X8>)
{
  dispatch_object_t v10 = (std::__shared_weak_count_vtbl *)operator new(0x110uLL);
  qmi::TransactionQueue::State::State((uint64_t)v10, a1, a2, a3, a4);

  return std::shared_ptr<qmi::TransactionQueue::State>::shared_ptr[abi:ne180100]<qmi::TransactionQueue::State,qmi::TransactionQueue::State::Deleter,void>(a5, v10);
}

void sub_1A10F6BDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void qmi::TransactionQueue::State::Deleter::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a2 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN3qmi16TransactionQueue5State7DeleterclEPS1__block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  block[4] = a2;
  dispatch_async(v2, block);
}

void ___ZN3qmi16TransactionQueue5State7DeleterclEPS1__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(dispatch_object_t **)(a1 + 32);
  if (v1)
  {
    qmi::TransactionQueue::State::~State(v1);
    operator delete(v2);
  }
}

void boost::ptr_container_detail::reversible_ptr_container<boost::ptr_container_detail::sequence_config<qmi::Transaction,std::deque<void *>>,boost::heap_clone_allocator>::clear(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v7 = (void **)a1[1];
  unint64_t v8 = (void **)a1[2];
  if (v8 == v7)
  {
    a1[5] = 0;
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v9 = a1[4];
    dispatch_object_t v10 = &v7[v9 >> 9];
    uint64_t v11 = *v10;
    uint64_t v12 = (qmi::Transaction **)((char *)*v10 + 8 * (v9 & 0x1FF));
    uint64_t v13 = *(uint64_t *)((char *)v7 + (((a1[5] + v9) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v9) & 0x1FF);
    if (v12 != (qmi::Transaction **)v13)
    {
      do
      {
        if (*v12)
        {
          qmi::Transaction::~Transaction(*v12, a2, a3, a4, a5, a6);
          operator delete(v14);
          uint64_t v11 = *v10;
        }
        if ((char *)++v12 - v11 == 4096)
        {
          uint64_t v15 = (qmi::Transaction **)v10[1];
          ++v10;
          uint64_t v11 = v15;
          uint64_t v12 = v15;
        }
      }
      while (v12 != (qmi::Transaction **)v13);
      uint64_t v7 = (void **)a1[1];
      unint64_t v8 = (void **)a1[2];
    }
    a1[5] = 0;
    unint64_t v16 = (char *)v8 - (char *)v7;
    if ((unint64_t)((char *)v8 - (char *)v7) >= 0x11)
    {
      do
      {
        operator delete(*v7);
        uint64_t v17 = a1[2];
        uint64_t v7 = (void **)(a1[1] + 8);
        a1[1] = v7;
        unint64_t v16 = v17 - (void)v7;
      }
      while (v16 > 0x10);
    }
  }
  if (v16 >> 3 == 1)
  {
    uint64_t v18 = 256;
  }
  else
  {
    if (v16 >> 3 != 2) {
      return;
    }
    uint64_t v18 = 512;
  }
  a1[4] = v18;
}

void qmi::TransactionQueue::State::checkFlushNotifiers_sync(qmi::TransactionQueue::State *this)
{
  if (!*((void *)this + 14) && !*((void *)this + 20))
  {
    uint64_t v2 = *((void *)this + 27);
    uint64_t v3 = *((void *)this + 28);
    if (v3 != v2)
    {
      uint64_t v4 = *((void *)this + 28);
      do
      {
        uint64_t v6 = *(NSObject **)(v4 - 8);
        v4 -= 8;
        uint64_t v5 = v6;
        if (v6)
        {
          dispatch_group_leave(v5);
          uint64_t v7 = *(NSObject **)(v3 - 8);
          if (v7) {
            dispatch_release(v7);
          }
        }
        uint64_t v3 = v4;
      }
      while (v4 != v2);
    }
    *((void *)this + 2MEMORY[0x1A622BDE0]((char *)this + 8) = v2;
    if (!*((void *)this + 26))
    {
      uint64_t v8 = *((void *)this + 30);
      uint64_t v9 = *((void *)this + 31);
      if (v9 != v8)
      {
        uint64_t v10 = *((void *)this + 31);
        do
        {
          uint64_t v12 = *(NSObject **)(v10 - 8);
          v10 -= 8;
          uint64_t v11 = v12;
          if (v12)
          {
            dispatch_group_leave(v11);
            uint64_t v13 = *(NSObject **)(v9 - 8);
            if (v13) {
              dispatch_release(v13);
            }
          }
          uint64_t v9 = v10;
        }
        while (v10 != v8);
      }
      *((void *)this + 3qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v8;
    }
  }
}

void *qmi::TransactionQueue::State::findSentTransaction_sync(qmi::TransactionQueue::State *this, __int16 a2)
{
  unint64_t v2 = *((void *)this + 13);
  uint64_t v3 = *((void *)this + 10);
  uint64_t v4 = (void *)(v3 + 8 * (v2 >> 9));
  if (*((void *)this + 11) == v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = (void *)(*v4 + 8 * (*((void *)this + 13) & 0x1FFLL));
    uint64_t v6 = *(void *)(v3 + (((*((void *)this + 14) + v2) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*((void *)this + 14) + v2) & 0x1FF);
  }
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  uint64_t v10 = ___ZN3qmi16TransactionQueue5State24findSentTransaction_syncEt_block_invoke;
  uint64_t v11 = &__block_descriptor_tmp_8;
  __int16 v12 = a2;
  while (v5 != (void *)v6)
  {
    if (((uint64_t (*)(void *, void))v10)(v9, *v5)) {
      break;
    }
    if ((void *)((char *)++v5 - *v4) == (void *)4096)
    {
      uint64_t v7 = (void *)v4[1];
      ++v4;
      uint64_t v5 = v7;
    }
  }
  return v4;
}

BOOL ___ZN3qmi16TransactionQueue5State24findSentTransaction_syncEt_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(void *)(a2 + 16) + 26) == *(unsigned __int16 *)(a1 + 32);
}

void *qmi::TransactionQueue::State::createTransaction_sync(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void **a5)
{
  __int16 v9 = *(_WORD *)(a1 + 266);
  *(_WORD *)(*a3 + 26) = v9;
  if ((unsigned __int16)(v9 + 1) == (*(unsigned char *)(a1 + 264) == 0) << 8) {
    __int16 v10 = 1;
  }
  else {
    __int16 v10 = v9 + 1;
  }
  *(_WORD *)(a1 + 266) = v10;
  uint64_t v11 = operator new(0x30uLL);
  void *v11 = 0;
  __int16 v12 = *a5;
  if (*a5) {
    __int16 v12 = _Block_copy(v12);
  }
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  v11[1] = v12;
  v11[2] = v14;
  v11[3] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  v11[4] = a4;
  long long v15 = *(_OWORD *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  *((unsigned char *)v11 + 40) = 0;
  uint64_t v17 = v15;
  if (v16 == (void)v15) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = ((v16 - (void)v15) << 6) - 1;
  }
  uint64_t v19 = *(void *)(a2 + 32);
  uint64_t v20 = *(void *)(a2 + 40);
  unint64_t v21 = v20 + v19;
  if (v18 == v20 + v19)
  {
    std::deque<void *>::__add_back_capacity(a2);
    uint64_t v17 = *(void *)(a2 + 8);
    uint64_t v19 = *(void *)(a2 + 32);
    uint64_t v20 = *(void *)(a2 + 40);
    unint64_t v21 = v19 + v20;
  }
  *(void *)(*(void *)(v17 + ((v21 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v21 & 0x1FF)) = v11;
  *(void *)(a2 + 40) = v20 + 1;
  unint64_t v22 = v20 + 1 + v19;
  uint64_t v23 = *(void *)(a2 + 8);
  uint64_t result = (void *)(v23 + 8 * (v22 >> 9));
  uint64_t v25 = *result + 8 * (v22 & 0x1FF);
  if (*(void *)(a2 + 16) == v23) {
    uint64_t v25 = 0;
  }
  if (v25 == *result) {
    --result;
  }
  return result;
}

void sub_1A10F70F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  boost::ptr_container_detail::static_move_ptr<qmi::Transaction,boost::ptr_container_detail::static_clone_deleter<boost::heap_clone_allocator>>::~static_move_ptr((qmi::Transaction **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

uint64_t qmi::TransactionQueue::State::push_sync(uint64_t a1, qmi::MutableMessageBase *this, uint64_t a3, void **a4)
{
  memset(__p, 170, sizeof(__p));
  qmi::MutableMessageBase::serialize((uint64_t *)__p, this);
  qmi::createRequest();
  uint64_t v10 = qmi::TransactionQueue::State::push_sync(a1, &v13, a3, a4, v7, v8, v9);
  uint64_t v11 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_1A10F71E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t qmi::TransactionQueue::State::push_sync(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, const char *a7)
{
  uint64_t v46 = 0;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v11
    || (__int16 v12 = (ATCSLogger *)std::__shared_weak_count::lock(v11), (v46 = (std::__shared_weak_count *)v12) == 0)
    || (uint64_t v13 = *(void *)(a1 + 56)) == 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0xCD, "client", "is not", "true", "QMIClient must still be alive if we're adding something!", a7);
    uint64_t v13 = 0;
  }
  int v14 = *(unsigned __int8 *)(v13 + 32);
  int v15 = *(unsigned __int8 *)(v13 + 33);
  int v16 = *(_DWORD *)(a1 + 32);
  if (!v16)
  {
    Instance = ATCSLogger::getInstance(v12);
    uint64_t v40 = (const char *)(v13 + 8);
    if (*(char *)(v13 + 31) < 0) {
      uint64_t v40 = *(const char **)v40;
    }
    (*(void (**)(void *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 6, "message discarded because stopped for svc=%d client=%d (msgid=0x%x) [%s]\n", v14, v15, *(unsigned __int16 *)(*a2 + 24), v40);
    qmi::TransactionQueue::State::createTransaction_sync(a1, a1 + 168, a2, a3, a4);
    qmi::TransactionQueue::State::stop_sync((qmi::TransactionQueue::State *)a1);
    goto LABEL_24;
  }
  if (v16 == 1)
  {
    Transaction_sync = (ATCSLogger *)qmi::TransactionQueue::State::createTransaction_sync(a1, a1 + 168, a2, a3, a4);
    uint64_t v21 = *(unsigned __int16 *)(*(void *)(*(void *)v42 + 16) + 26);
    uint64_t v43 = ATCSLogger::getInstance(Transaction_sync);
    uint64_t v44 = (const char *)(v13 + 8);
    if (*(char *)(v13 + 31) < 0) {
      uint64_t v44 = *(const char **)v44;
    }
    (*(void (**)(void *, uint64_t, const char *, ...))(*v43 + 24))(v43, 6, "message stalled for svc=%d client=%d (txid=%d msgid=0x%x) [%s]\n", v14, v15, v21, *(unsigned __int16 *)(*a2 + 24), v44);
    goto LABEL_28;
  }
  if (v16 != 2)
  {
LABEL_24:
    uint64_t v21 = 0;
    goto LABEL_28;
  }
  uint64_t v17 = (ATCSLogger *)qmi::TransactionQueue::State::createTransaction_sync(a1, a1 + 120, a2, a3, a4);
  uint64_t v19 = v18;
  uint64_t v20 = *v18;
  uint64_t v21 = *(unsigned __int16 *)(*(void *)(*v18 + 16) + 26);
  unint64_t v22 = *(void *)(a1 + 112);
  if (v22 < *(unsigned int *)(a1 + 268))
  {
    while (1)
    {
      if (!*(void *)(a1 + 160))
      {
LABEL_16:
        uint64_t v20 = *v19;
        break;
      }
      unint64_t v23 = *(void *)(a1 + 104) + v22;
      uint64_t v24 = *(void *)(a1 + 80);
      uint64_t v25 = (char *)(v24 + 8 * (v23 >> 9));
      if (*(void *)(a1 + 88) == v24)
      {
        uint64_t v26 = 0;
        unint64_t v27 = *(void *)(a1 + 152);
        uint64_t v31 = *(void *)(a1 + 128);
        uint64_t v29 = (char *)(v31 + 8 * (v27 >> 9));
        if (*(void *)(a1 + 136) == v31)
        {
LABEL_14:
          uint64_t v30 = 0;
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v26 = *(void *)v25 + 8 * (v23 & 0x1FF);
        unint64_t v27 = *(void *)(a1 + 152);
        uint64_t v28 = *(void *)(a1 + 128);
        uint64_t v29 = (char *)(v28 + 8 * (v27 >> 9));
        if (*(void *)(a1 + 136) == v28) {
          goto LABEL_14;
        }
      }
      uint64_t v30 = (char *)(*(void *)v29 + 8 * (v27 & 0x1FF));
LABEL_15:
      std::deque<void *>::insert(a1 + 72, v25, v26, v30);
      std::deque<void *>::erase(a1 + 120, v29, v30);
      qmi::TransactionQueue::State::sendNow_sync((qmi::TransactionQueue::State *)a1, v32, v33, v34, v35, v36);
      unint64_t v22 = *(void *)(a1 + 112);
      if (v22 >= *(unsigned int *)(a1 + 268)) {
        goto LABEL_16;
      }
    }
  }
  if (!*(unsigned char *)(v20 + 40))
  {
    CFAllocatorRef v37 = ATCSLogger::getInstance(v17);
    unint64_t v38 = (const char *)(v13 + 8);
    if (*(char *)(v13 + 31) < 0) {
      unint64_t v38 = *(const char **)v38;
    }
    (*(void (**)(void *, uint64_t, const char *, ...))(*v37 + 24))(v37, 6, "message pended due to send window for svc=%d client=%d (txid=%d msgid=0x%x) [%s]\n", v14, v15, v21, *(unsigned __int16 *)(*a2 + 24), v38);
  }
LABEL_28:
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  return v21;
}

void sub_1A10F7580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10F7594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10F75A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10F75BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10F75D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void qmi::TransactionQueue::State::sendIfPossible_sync(qmi::TransactionQueue::State *this)
{
  unint64_t v1 = *((void *)this + 14);
  if (v1 < *((unsigned int *)this + 67))
  {
    uint64_t v3 = (char *)this + 120;
    uint64_t v4 = (char *)this + 72;
    do
    {
      if (!*((void *)this + 20)) {
        return;
      }
      unint64_t v11 = *((void *)this + 13) + v1;
      uint64_t v12 = *((void *)this + 10);
      uint64_t v13 = (char *)(v12 + 8 * (v11 >> 9));
      if (*((void *)this + 11) == v12)
      {
        uint64_t v14 = 0;
        unint64_t v15 = *((void *)this + 19);
        uint64_t v18 = *((void *)this + 16);
        uint64_t v17 = (char *)(v18 + 8 * (v15 >> 9));
        if (*((void *)this + 17) != v18)
        {
LABEL_10:
          uint64_t v5 = (char *)(*(void *)v17 + 8 * (v15 & 0x1FF));
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v14 = *(void *)v13 + 8 * (v11 & 0x1FF);
        unint64_t v15 = *((void *)this + 19);
        uint64_t v16 = *((void *)this + 16);
        uint64_t v17 = (char *)(v16 + 8 * (v15 >> 9));
        if (*((void *)this + 17) != v16) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = 0;
LABEL_4:
      std::deque<void *>::insert((uint64_t)v4, v13, v14, v5);
      std::deque<void *>::erase((uint64_t)v3, v17, v5);
      qmi::TransactionQueue::State::sendNow_sync(this, v6, v7, v8, v9, v10);
      unint64_t v1 = *((void *)this + 14);
    }
    while (v1 < *((unsigned int *)this + 67));
  }
}

uint64_t qmi::TransactionQueue::State::forceSend_sync(uint64_t a1, qmi::MutableMessageBase *this, uint64_t a3, void **a4)
{
  memset(__p, 170, sizeof(__p));
  qmi::MutableMessageBase::serialize((uint64_t *)__p, this);
  qmi::createRequest();
  uint64_t v10 = qmi::TransactionQueue::State::forceSend_sync(a1, &v13, a3, a4, v7, v8, v9);
  unint64_t v11 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_1A10F77B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t qmi::TransactionQueue::State::forceSend_sync(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, const char *a7)
{
  uint64_t v30 = 0;
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 64);
  if (v11
    && (uint64_t v12 = (ATCSLogger *)std::__shared_weak_count::lock(v11), (v30 = v12) != 0)
    && (uint64_t v13 = *(void *)(a1 + 56)) != 0)
  {
    int v14 = *(unsigned __int8 *)(v13 + 32);
    int v15 = *(unsigned __int8 *)(v13 + 33);
    int v16 = *(_DWORD *)(a1 + 32);
    if ((v16 - 1) < 2) {
      goto LABEL_5;
    }
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0xFB, "client", "is not", "true", "QMIClient must still be alive if we're adding something!", a7);
    uint64_t v13 = 0;
    int v14 = MEMORY[0x20];
    int v15 = MEMORY[0x21];
    int v16 = *(_DWORD *)(a1 + 32);
    if ((v16 - 1) < 2)
    {
LABEL_5:
      qmi::TransactionQueue::State::createTransaction_sync(a1, a1 + 72, a2, a3, a4);
      uint64_t v18 = *(unsigned __int16 *)(*(void *)(*(void *)v17 + 16) + 26);
      qmi::TransactionQueue::State::sendNow_sync((qmi::TransactionQueue::State *)a1, v17, v19, v20, v21, v22);
      Instance = ATCSLogger::getInstance(v23);
      uint64_t v25 = (const char *)(v13 + 8);
      if (*(char *)(v13 + 31) < 0) {
        uint64_t v25 = *(const char **)v25;
      }
      (*(void (**)(void *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 6, "message force-sent for svc=%d client=%d (txid=%d msgid=0x%x) [%s]\n", v14, v15, v18, *(unsigned __int16 *)(*a2 + 24), v25);
      uint64_t v26 = (std::__shared_weak_count *)v30;
      if (!v30) {
        return v18;
      }
LABEL_15:
      if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      return v18;
    }
  }
  if (!v16)
  {
    unint64_t v27 = ATCSLogger::getInstance(v12);
    uint64_t v28 = (const char *)(v13 + 8);
    if (*(char *)(v13 + 31) < 0) {
      uint64_t v28 = *(const char **)v28;
    }
    (*(void (**)(void *, uint64_t, const char *, ...))(*v27 + 24))(v27, 6, "message discarded because stopped for svc=%d client=%d (msgid=0x%x) [%s]\n", v14, v15, *(unsigned __int16 *)(*a2 + 24), v28);
    qmi::TransactionQueue::State::createTransaction_sync(a1, a1 + 168, a2, a3, a4);
    qmi::TransactionQueue::State::stop_sync((qmi::TransactionQueue::State *)a1);
  }
  uint64_t v18 = 0;
  uint64_t v26 = (std::__shared_weak_count *)v30;
  if (v30) {
    goto LABEL_15;
  }
  return v18;
}

void sub_1A10F7A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10F7A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10F7A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void qmi::TransactionQueue::State::sendNow_sync(qmi::TransactionQueue::State *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  unint64_t v7 = *((void *)this + 13) + *((void *)this + 14);
  uint64_t v8 = *((void *)this + 10);
  uint64_t v9 = (void *)(v8 + 8 * (v7 >> 9));
  uint64_t v10 = *v9 + 8 * (v7 & 0x1FF);
  if (*((void *)this + 11) == v8) {
    uint64_t v10 = 0;
  }
  if (v10 == *v9) {
    uint64_t v10 = *(v9 - 1) + 4096;
  }
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(unsigned char *)(v11 + 40)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x167, "!tx.wasSent()", "is not", "true", a6);
  }
  *(unsigned char *)(v11 + 40) = 1;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v12)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v12);
    uint64_t v33 = v13;
    if (!v13) {
      goto LABEL_31;
    }
    uint64_t v32 = *((void *)this + 5);
    if (!(v32 ? QMux::BOOL_true_type : 0)) {
      goto LABEL_31;
    }
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v15 = (std::__shared_weak_count *)*((void *)this + 8);
    if (v15)
    {
      int v16 = std::__shared_weak_count::lock(v15);
      uint64_t v31 = v16;
      if (!v16)
      {
LABEL_30:
        uint64_t v13 = v33;
        goto LABEL_31;
      }
      uint64_t v21 = *((void *)this + 7);
      uint64_t v30 = v21;
      if (v21)
      {
        uint64_t v28 = v21;
        uint64_t v29 = v16;
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v22 = *(std::__shared_weak_count **)(v11 + 24);
        uint64_t v26 = *(void *)(v11 + 16);
        unint64_t v27 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        QMux::send(&v32, &v28, &v26, v17, v18, v19, v20);
        unint64_t v23 = v27;
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        uint64_t v24 = v29;
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    uint64_t v25 = v31;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    goto LABEL_30;
  }
  uint64_t v13 = 0;
LABEL_31:
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1A10F7CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
}

void qmi::TransactionQueue::State::sendTransactionResponse_sync(qmi::TransactionQueue::State *this, int a2, const qmi::ResponseBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  unint64_t v10 = *((void *)this + 13);
  uint64_t v11 = *((void *)this + 10);
  uint64_t v12 = *((void *)this + 11);
  uint64_t v13 = v11 + 8 * (v10 >> 9);
  if (v12 == v11)
  {
    int v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    int v14 = (char *)(*(void *)v13 + 8 * (*((void *)this + 13) & 0x1FFLL));
    uint64_t v15 = *(void *)(v11 + (((*((void *)this + 14) + v10) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*((void *)this + 14) + v10) & 0x1FF);
  }
  uint64_t v57 = MEMORY[0x1E4F143A8];
  uint64_t v58 = 0x40000000;
  CFAllocatorRef v59 = ___ZN3qmi16TransactionQueue5State24findSentTransaction_syncEt_block_invoke;
  CFAllocatorRef v60 = &__block_descriptor_tmp_8;
  __int16 v61 = a2;
  if (v14 == (char *)v15)
  {
    if (v12 != v11) {
      goto LABEL_6;
    }
  }
  else
  {
    while ((((uint64_t (*)(uint64_t *, void))v59)(&v57, *(void *)v14) & 1) == 0)
    {
      v14 += 8;
      if (&v14[-*(void *)v13] == (char *)4096)
      {
        uint64_t v34 = *(char **)(v13 + 8);
        v13 += 8;
        int v14 = v34;
      }
      if (v14 == (char *)v15)
      {
        int v14 = (char *)v15;
        break;
      }
    }
    uint64_t v11 = *((void *)this + 10);
    if (*((void *)this + 11) != v11)
    {
LABEL_6:
      unint64_t v16 = *((void *)this + 14) + *((void *)this + 13);
      if (v14 != (char *)(*(void *)(v11 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v16 & 0x1FF))) {
        goto LABEL_7;
      }
LABEL_38:
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      CFAllocatorRef v49 = (std::__shared_weak_count *)*((void *)this + 8);
      if (!v49
        || (CFAllocatorRef v50 = (ATCSLogger *)std::__shared_weak_count::lock(v49), (v58 = (uint64_t)v50) == 0)
        || (uint64_t v51 = *((void *)this + 7), (v57 = v51) == 0))
      {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x132, "client", "is not", "true", "QMIClient must still be alive if we're adding something!", a7);
        uint64_t v51 = 0;
      }
      int v52 = *(unsigned __int8 *)(v51 + 32);
      int v53 = *(unsigned __int8 *)(v51 + 33);
      Instance = ATCSLogger::getInstance(v50);
      CFAllocatorRef v55 = (const char *)(v51 + 8);
      if (*(char *)(v51 + 31) < 0) {
        CFAllocatorRef v55 = *(const char **)v55;
      }
      (*(void (**)(void *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 6, "No transaction found for message for svc=%d client=%d (txid=%d msgid=0x%x); dropping response [%s]\n",
        v52,
        v53,
        a2,
        *(unsigned __int16 *)a3,
        v55);
      CFAllocatorRef v56 = (std::__shared_weak_count *)v58;
      if (v58 && !atomic_fetch_add((atomic_ullong *volatile)(v58 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
      goto LABEL_47;
    }
  }
  if (!v14) {
    goto LABEL_38;
  }
LABEL_7:
  uint64_t v17 = *(NSObject ***)v14;
  if (!*(void *)(*(void *)v14 + 8))
  {
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v18
      || (uint64_t v19 = (ATCSLogger *)std::__shared_weak_count::lock(v18), (v58 = (uint64_t)v19) == 0)
      || (uint64_t v20 = *((void *)this + 7), (v57 = v20) == 0))
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x121, "client", "is not", "true", "QMIClient must still be alive if we're adding something!", a7);
      uint64_t v20 = 0;
    }
    int v21 = *(unsigned __int8 *)(v20 + 32);
    int v22 = *(unsigned __int8 *)(v20 + 33);
    unint64_t v23 = ATCSLogger::getInstance(v19);
    uint64_t v24 = (const char *)(v20 + 8);
    if (*(char *)(v20 + 31) < 0) {
      uint64_t v24 = *(const char **)v24;
    }
    (*(void (**)(void *, uint64_t, const char *, ...))(*v23 + 24))(v23, 6, "No callback for message for svc=%d client=%d (txid=%d msgid=0x%x); dropping response [%s]\n",
      v21,
      v22,
      a2,
      *(unsigned __int16 *)a3,
      v24);
    uint64_t v25 = (std::__shared_weak_count *)v58;
    if (v58 && !atomic_fetch_add((atomic_ullong *volatile)(v58 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    uint64_t v17 = *(NSObject ***)v14;
  }
  qmi::Transaction::invoke(v17, *((NSObject **)this + 3), a3);
  uint64_t v31 = *(qmi::Transaction **)v14;
  if (*(unsigned char *)(*(void *)v14 + 40)
    || (_ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x12A, "tx->wasSent()", "is not", "true", v30), (uint64_t v31 = *(qmi::Transaction **)v14) != 0))
  {
    qmi::Transaction::~Transaction(v31, v26, v27, v28, v29, v30);
    operator delete(v32);
  }
  std::deque<void *>::erase((uint64_t)this + 72, (char *)v13, v14);
  for (unint64_t i = *((void *)this + 14); i < *((unsigned int *)this + 67); unint64_t i = *((void *)this + 14))
  {
    if (!*((void *)this + 20)) {
      break;
    }
    unint64_t v41 = *((void *)this + 13) + i;
    uint64_t v42 = *((void *)this + 10);
    uint64_t v43 = (char *)(v42 + 8 * (v41 >> 9));
    if (*((void *)this + 11) == v42)
    {
      uint64_t v44 = 0;
      unint64_t v45 = *((void *)this + 19);
      uint64_t v48 = *((void *)this + 16);
      CFAllocatorRef v47 = (char *)(v48 + 8 * (v45 >> 9));
      if (*((void *)this + 17) == v48)
      {
LABEL_34:
        uint64_t v35 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v44 = *(void *)v43 + 8 * (v41 & 0x1FF);
      unint64_t v45 = *((void *)this + 19);
      uint64_t v46 = *((void *)this + 16);
      CFAllocatorRef v47 = (char *)(v46 + 8 * (v45 >> 9));
      if (*((void *)this + 17) == v46) {
        goto LABEL_34;
      }
    }
    uint64_t v35 = (char *)(*(void *)v47 + 8 * (v45 & 0x1FF));
LABEL_28:
    std::deque<void *>::insert((uint64_t)this + 72, v43, v44, v35);
    std::deque<void *>::erase((uint64_t)this + 120, v47, v35);
    qmi::TransactionQueue::State::sendNow_sync(this, v36, v37, v38, v39, v40);
  }
LABEL_47:
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

void sub_1A10F81B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10F81C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10F81DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10F81F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void qmi::TransactionQueue::State::start_sync(qmi::TransactionQueue::State *this)
{
  *((_DWORD *)this + MEMORY[0x1A622BDE0]((char *)this + 8) = 2;
  unint64_t v2 = *((void *)this + 19);
  uint64_t v3 = *((void *)this + 20);
  unint64_t v4 = v2 + v3;
  unint64_t v5 = (v2 + v3) >> 9;
  uint64_t v6 = (char *)*((void *)this + 16);
  unint64_t v7 = (char *)*((void *)this + 17);
  uint64_t v8 = &v6[8 * v5];
  if (v7 != v6)
  {
    uint64_t v9 = *(void *)v8 + 8 * (v4 & 0x1FF);
    unint64_t v10 = *((void *)this + 25);
    uint64_t v11 = *((void *)this + 22);
    uint64_t v12 = (char *)(v11 + 8 * (v10 >> 9));
    if (*((void *)this + 23) != v11) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v13 = 0;
    uint64_t v432 = 0;
    uint64_t v18 = *((void *)this + 26);
    uint64_t j = (const void **)(v11 + 8 * ((v18 + v10) >> 9));
    uint64_t v17 = (void **)((char *)this + 120);
    if (!v18) {
      goto LABEL_505;
    }
    goto LABEL_7;
  }
  uint64_t v9 = 0;
  unint64_t v10 = *((void *)this + 25);
  uint64_t v11 = *((void *)this + 22);
  uint64_t v12 = (char *)(v11 + 8 * (v10 >> 9));
  if (*((void *)this + 23) == v11) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v13 = (char *)(*(void *)v12 + 8 * (v10 & 0x1FF));
  uint64_t v14 = *((void *)this + 26);
  unint64_t v15 = v14 + v10;
  uint64_t j = (const void **)(v11 + 8 * (v15 >> 9));
  uint64_t v432 = (uint64_t)*j + 8 * (v15 & 0x1FF);
  uint64_t v17 = (void **)((char *)this + 120);
  if (!v14) {
    goto LABEL_505;
  }
LABEL_7:
  if ((char *)v432 == v13)
  {
    unint64_t v428 = 0;
    unint64_t v19 = v2 >> 9;
    uint64_t v20 = &v6[8 * (v2 >> 9)];
    int64_t v21 = v7 - v6;
    if (v7 != v6)
    {
LABEL_9:
      uint64_t v22 = *(void *)v20 + 8 * (*((void *)this + 19) & 0x1FFLL);
      if (v9 != v22) {
        goto LABEL_10;
      }
      goto LABEL_30;
    }
  }
  else
  {
    unint64_t v428 = ((v432 - (uint64_t)*j) >> 3) + (((char *)j - v12) << 6) - ((uint64_t)&v13[-*(void *)v12] >> 3);
    unint64_t v19 = v2 >> 9;
    uint64_t v20 = &v6[8 * (v2 >> 9)];
    int64_t v21 = v7 - v6;
    if (v7 != v6) {
      goto LABEL_9;
    }
  }
  uint64_t v22 = 0;
  if (v9)
  {
LABEL_10:
    unint64_t v23 = ((v9 - *(void *)v8) >> 3) + ((v8 - v20) << 6) - ((v22 - *(void *)v20) >> 3);
    v429 = v17;
    v430 = v12;
    v431 = j;
    unint64_t v427 = v23;
    if (v23 < v3 - v23) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  unint64_t v23 = 0;
  v429 = v17;
  v430 = v12;
  v431 = j;
  unint64_t v427 = 0;
  if (!v3)
  {
LABEL_31:
    uint64_t v37 = (v21 << 6) - 1;
    uint64_t v38 = v7 - v6;
    if (v7 == v6) {
      uint64_t v37 = 0;
    }
    unint64_t v39 = v37 - v4;
    BOOL v40 = v428 >= v39;
    unint64_t v41 = v428 - v39;
    if (v41 == 0 || !v40) {
      goto LABEL_364;
    }
    v426 = v13;
    if (v7 == v6) {
      unint64_t v42 = v41 + 1;
    }
    else {
      unint64_t v42 = v41;
    }
    if ((v42 & 0x1FF) != 0) {
      unint64_t v43 = (v42 >> 9) + 1;
    }
    else {
      unint64_t v43 = v42 >> 9;
    }
    if (v43 >= v19) {
      unint64_t v44 = v19;
    }
    else {
      unint64_t v44 = v43;
    }
    if (v43 > v19)
    {
      unint64_t v45 = v43 - v44;
      uint64_t v46 = *((void *)this + 18) - *((void *)this + 15);
      uint64_t v47 = v38 >> 3;
      if (v43 - v44 > (v46 >> 3) - (v38 >> 3))
      {
        unint64_t v48 = v46 >> 2;
        if (v48 <= v45 + v47) {
          unint64_t v49 = v45 + v47;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          if (v49 >> 61) {
            goto LABEL_515;
          }
          CFAllocatorRef v50 = (char *)operator new(8 * v49);
        }
        else
        {
          CFAllocatorRef v50 = 0;
        }
        unint64_t v424 = v44 << 9;
        v161 = &v50[8 * (v47 - v44)];
        uint64_t v162 = &v50[8 * v49];
        long long v163 = v161;
        uint64_t v164 = v50;
        while (1)
        {
          unint64_t v166 = operator new(0x1000uLL);
          if (v161 == v162)
          {
            if (v163 <= v164)
            {
              if (v162 == v164) {
                unint64_t v172 = 1;
              }
              else {
                unint64_t v172 = (v162 - v164) >> 2;
              }
              if (v172 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v173 = (char *)operator new(8 * v172);
              v174 = v164;
              unint64_t v175 = v172 >> 2;
              v176 = &v173[8 * (v172 >> 2)];
              v161 = v176;
              int64_t v177 = v162 - v163;
              if (v162 != v163)
              {
                v161 = &v176[v177 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v178 = v177 - 8;
                if (v178 < 0x38 || (uint64_t v179 = 8 * v175, (unint64_t)(&v173[8 * v175] - v163) < 0x20))
                {
                  v180 = &v173[8 * (v172 >> 2)];
                  v181 = v163;
                  goto LABEL_201;
                }
                uint64_t v183 = (v178 >> 3) + 1;
                uint64_t v184 = 8 * (v183 & 0x3FFFFFFFFFFFFFFCLL);
                v180 = &v176[v184];
                v181 = &v163[v184];
                v185 = (long long *)(v163 + 16);
                v186 = &v173[v179 + 16];
                uint64_t v187 = v183 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v188 = *v185;
                  *((_OWORD *)v186 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v185 - 1);
                  *(_OWORD *)v186 = v188;
                  v185 += 2;
                  v186 += 32;
                  v187 -= 4;
                }
                while (v187);
                if (v183 != (v183 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_201:
                    uint64_t v182 = *(void *)v181;
                    v181 += 8;
                    *(void *)v180 = v182;
                    v180 += 8;
                  }
                  while (v180 != v161);
                }
              }
              uint64_t v162 = &v173[8 * v172];
              if (v174) {
                operator delete(v174);
              }
              long long v163 = &v173[8 * (v172 >> 2)];
              uint64_t v164 = v173;
              goto LABEL_185;
            }
            uint64_t v167 = (v163 - v164) >> 3;
            if (v167 >= -1) {
              uint64_t v168 = v167 + 1;
            }
            else {
              uint64_t v168 = v167 + 2;
            }
            uint64_t v169 = v168 >> 1;
            v170 = &v163[-8 * (v168 >> 1)];
            v171 = v162;
            if (v162 != v163)
            {
              memmove(v170, v163, v162 - v163);
              v171 = v163;
            }
            uint64_t v165 = -v169;
            v161 = &v170[v162 - v163];
            long long v163 = &v171[8 * v165];
          }
LABEL_185:
          *(void *)v161 = v166;
          v161 += 8;
          if (!--v45)
          {
            v189 = (void *)*((void *)this + 16);
            if (!v44)
            {
              v190 = v163;
LABEL_211:
              v191 = (void *)*((void *)this + 17);
              if (v191 == v189)
              {
                v192 = v190;
                unint64_t v7 = v161;
              }
              else
              {
                do
                {
                  if (v190 == v164)
                  {
                    if (v161 >= v162)
                    {
                      if (v162 == v190) {
                        unint64_t v220 = 1;
                      }
                      else {
                        unint64_t v220 = (v162 - v190) >> 2;
                      }
                      if (v220 >> 61) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      v221 = (char *)operator new(8 * v220);
                      uint64_t v164 = v221;
                      unint64_t v222 = (v220 + 3) >> 2;
                      v216 = &v221[8 * v222];
                      unint64_t v7 = v216;
                      int64_t v223 = v161 - v190;
                      if (v161 != v190)
                      {
                        unint64_t v7 = &v216[v223 & 0xFFFFFFFFFFFFFFF8];
                        unint64_t v224 = v223 - 8;
                        v225 = &v221[8 * v222];
                        v226 = v190;
                        if (v224 < 0x38) {
                          goto LABEL_524;
                        }
                        uint64_t v227 = 8 * v222;
                        v225 = &v221[8 * v222];
                        v226 = v190;
                        if ((unint64_t)(v225 - v190) < 0x20) {
                          goto LABEL_524;
                        }
                        uint64_t v228 = (v224 >> 3) + 1;
                        uint64_t v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
                        v225 = &v216[v229];
                        v226 = &v190[v229];
                        v230 = (long long *)(v190 + 16);
                        v231 = &v221[v227 + 16];
                        uint64_t v232 = v228 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v233 = *v230;
                          *((_OWORD *)v231 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v230 - 1);
                          *(_OWORD *)v231 = v233;
                          v230 += 2;
                          v231 += 32;
                          v232 -= 4;
                        }
                        while (v232);
                        if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_524:
                          do
                          {
                            uint64_t v234 = *(void *)v226;
                            v226 += 8;
                            *(void *)v225 = v234;
                            v225 += 8;
                          }
                          while (v225 != v7);
                        }
                      }
                      uint64_t v162 = &v221[8 * v220];
                      if (v190) {
                        operator delete(v190);
                      }
                    }
                    else
                    {
                      uint64_t v218 = (v162 - v161) >> 3;
                      if (v218 >= -1) {
                        unint64_t v219 = v218 + 1;
                      }
                      else {
                        unint64_t v219 = v218 + 2;
                      }
                      unint64_t v7 = &v161[8 * (v219 >> 1)];
                      v216 = &v190[8 * (v219 >> 1)];
                      if (v161 == v190)
                      {
                        uint64_t v164 = v161;
                      }
                      else
                      {
                        memmove(&v190[8 * (v219 >> 1)], v190, v161 - v190);
                        uint64_t v164 = v190;
                      }
                    }
                  }
                  else
                  {
                    v216 = v190;
                    unint64_t v7 = v161;
                  }
                  uint64_t v217 = *--v191;
                  *((void *)v216 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v217;
                  v192 = v216 - 8;
                  v161 = v7;
                  v190 = v192;
                }
                while (v191 != *((void **)this + 16));
              }
              v193 = (void *)*((void *)this + 15);
              *((void *)this + 15) = v164;
              *((void *)this + 16) = v192;
              *((void *)this + 17) = v7;
              *((void *)this + 1MEMORY[0x1A622BDE0]((char *)this + 8) = v162;
              *((void *)this + 19) -= v424;
              uint64_t v17 = v429;
              if (v193)
              {
                operator delete(v193);
                unint64_t v7 = (char *)*((void *)this + 17);
              }
LABEL_363:
              uint64_t v3 = *((void *)this + 20);
              uint64_t v6 = (char *)*((void *)this + 16);
              unint64_t v4 = *((void *)this + 19) + v3;
              unint64_t v5 = v4 >> 9;
              uint64_t v13 = v426;
              uint64_t v12 = v430;
              uint64_t j = v431;
LABEL_364:
              v298 = &v6[8 * v5];
              if (v7 != v6)
              {
                v299 = (char *)(*(void *)v298 + 8 * (v4 & 0x1FF));
                v239 = (char *)v432;
                unint64_t v300 = v428;
                unint64_t v301 = v3 - v427;
                unint64_t v302 = v3 - v427 - v428;
                if (v3 - v427 < v428) {
                  goto LABEL_366;
                }
LABEL_393:
                v329 = v299;
                v330 = v298;
                v331 = v239;
                if (!v300) {
                  goto LABEL_469;
                }
                goto LABEL_413;
              }
              v299 = 0;
              v239 = (char *)v432;
              unint64_t v300 = v428;
              unint64_t v301 = v3 - v427;
              unint64_t v302 = v3 - v427 - v428;
              if (v3 - v427 >= v428) {
                goto LABEL_393;
              }
LABEL_366:
              if (v301 >= v300 >> 1)
              {
                uint64_t v303 = v302 + ((v239 - (unsigned char *)*j) >> 3);
                if (v303 < 1)
                {
                  unint64_t v332 = 511 - v303;
                  __int16 v333 = ~(_WORD)v332;
                  j -= v332 >> 9;
                  goto LABEL_401;
                }
                j += (unint64_t)v303 >> 9;
LABEL_397:
                v331 = (char *)*j + 8 * (v303 & 0x1FF);
              }
              else if (v301)
              {
                uint64_t v303 = v301 + ((uint64_t)&v13[-*(void *)v12] >> 3);
                if (v303 >= 1)
                {
                  uint64_t j = (const void **)&v12[8 * ((unint64_t)v303 >> 9)];
                  goto LABEL_397;
                }
                unint64_t v334 = 511 - v303;
                __int16 v333 = ~(_WORD)v334;
                uint64_t j = (const void **)&v12[-8 * (v334 >> 9)];
LABEL_401:
                v331 = (char *)*j + 8 * (v333 & 0x1FF);
              }
              else
              {
                uint64_t j = (const void **)v12;
                v331 = v13;
              }
              if (v331 == v239)
              {
                v329 = v299;
                v330 = v298;
                unint64_t v300 = v301;
                if (!v301) {
                  goto LABEL_469;
                }
                goto LABEL_413;
              }
              v335 = j;
              v336 = v331;
              v330 = v298;
              v329 = v299;
              while (2)
              {
                *v329++ = *(void *)v336;
                if ((void *)((char *)v329 - *(void *)v330) == (void *)4096)
                {
                  v337 = (void *)*((void *)v330 + 1);
                  v330 += 8;
                  v329 = v337;
                  v336 += 8;
                  if (v336 - (unsigned char *)*v335 == 4096)
                  {
LABEL_409:
                    v338 = (char *)v335[1];
                    ++v335;
                    v336 = v338;
                  }
                }
                else
                {
                  v336 += 8;
                  if (v336 - (unsigned char *)*v335 == 4096) {
                    goto LABEL_409;
                  }
                }
                ++v3;
                if (v336 == v239)
                {
                  *((void *)this + 20) = v3;
                  unint64_t v300 = v301;
                  if (!v301) {
                    goto LABEL_469;
                  }
LABEL_413:
                  unint64_t v339 = v300;
                  uint64_t v340 = ((uint64_t)&v299[-*(void *)v298] >> 3) - v300;
                  if (v340 < 1)
                  {
                    unint64_t v343 = 511 - v340;
                    v341 = (const void **)&v298[-8 * (v343 >> 9)];
                    v342 = (char *)*v341 + 8 * (~(_WORD)v343 & 0x1FF);
                    if (v342 == v299) {
                      goto LABEL_425;
                    }
                  }
                  else
                  {
                    v341 = (const void **)&v298[8 * ((unint64_t)v340 >> 9)];
                    v342 = (char *)*v341 + 8 * (v340 & 0x1FF);
                    if (v342 == v299)
                    {
LABEL_425:
                      if (v339 < v301)
                      {
                        uint64_t v348 = ((uint64_t)&v299[-*(void *)v298] >> 3) - v301;
                        if (v348 < 1)
                        {
                          unint64_t v351 = 511 - v348;
                          v349 = (const void **)&v298[-8 * (v351 >> 9)];
                          v350 = (char *)*v349 + 8 * (~(_WORD)v351 & 0x1FF);
                        }
                        else
                        {
                          v349 = (const void **)&v298[8 * ((unint64_t)v348 >> 9)];
                          v350 = (char *)*v349 + 8 * (v348 & 0x1FF);
                        }
                        *(void *)&long long v352 = 0xAAAAAAAAAAAAAAAALL;
                        *((void *)&v352 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
                        long long v433 = v352;
                        long long v434 = v352;
                        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,0>((const void ***)&v433, v349, v350, v341, v342, (const void **)v298, v299);
                        v299 = (char *)*((void *)&v434 + 1);
                        v298 = (char *)v434;
                      }
                      if (v12 == (char *)j)
                      {
                        if (v13 != v331)
                        {
                          v373 = *(char **)v298;
                          v372 = (char **)(v298 - 8);
                          v371 = v373;
                          while (1)
                          {
                            uint64_t v374 = (v299 - v371) >> 3;
                            if ((v331 - v13) >> 3 < v374) {
                              uint64_t v374 = (v331 - v13) >> 3;
                            }
                            v331 -= 8 * v374;
                            if (v374) {
                              memmove(&v299[-8 * v374], v331, 8 * v374);
                            }
                            if (v331 == v13) {
                              break;
                            }
                            v375 = *v372--;
                            v371 = v375;
                            v299 = v375 + 4096;
                          }
                        }
                        goto LABEL_469;
                      }
                      v353 = (char *)*j;
                      if (*j != v331)
                      {
                        v354 = *(char **)v298;
                        while (1)
                        {
                          uint64_t v355 = (v299 - v354) >> 3;
                          if ((v331 - v353) >> 3 < v355) {
                            uint64_t v355 = (v331 - v353) >> 3;
                          }
                          v331 -= 8 * v355;
                          v299 -= 8 * v355;
                          if (v355) {
                            memmove(v299, v331, 8 * v355);
                          }
                          if (v331 == v353) {
                            break;
                          }
                          v356 = (char *)*((void *)v298 - 1);
                          v298 -= 8;
                          v354 = v356;
                          v299 = v356 + 4096;
                        }
                        if ((char *)(*(void *)v298 + 4096) == v299)
                        {
                          v357 = (char *)*((void *)v298 + 1);
                          v298 += 8;
                          v299 = v357;
                        }
                      }
                      uint64_t v12 = v430;
                      v358 = (char *)(j - 1);
                      if (v358 != v430)
                      {
                        v359 = *(char **)v298;
                        do
                        {
                          while (1)
                          {
                            v360 = *(unsigned char **)v358;
                            v361 = (char *)(*(void *)v358 + 4096);
                            while (1)
                            {
                              uint64_t v362 = (v299 - v359) >> 3;
                              if ((v361 - v360) >> 3 < v362) {
                                uint64_t v362 = (v361 - v360) >> 3;
                              }
                              v361 -= 8 * v362;
                              v299 -= 8 * v362;
                              if (v362) {
                                memmove(v299, v361, 8 * v362);
                              }
                              if (v361 == v360) {
                                break;
                              }
                              v363 = (char *)*((void *)v298 - 1);
                              v298 -= 8;
                              v359 = v363;
                              v299 = v363 + 4096;
                            }
                            v359 = *(char **)v298;
                            if ((char *)(*(void *)v298 + 4096) == v299) {
                              break;
                            }
                            uint64_t v12 = v430;
                            v358 -= 8;
                            if (v358 == v430) {
                              goto LABEL_453;
                            }
                          }
                          v364 = (char *)*((void *)v298 + 1);
                          v298 += 8;
                          v359 = v364;
                          v299 = v364;
                          uint64_t v12 = v430;
                          v358 -= 8;
                        }
                        while (v358 != v430);
                      }
LABEL_453:
                      v365 = (unsigned char *)(*(void *)v12 + 4096);
                      if (v365 != v13)
                      {
                        v368 = *(char **)v298;
                        v367 = (char **)(v298 - 8);
                        v366 = v368;
                        while (1)
                        {
                          uint64_t v369 = (v299 - v366) >> 3;
                          if ((v365 - v13) >> 3 < v369) {
                            uint64_t v369 = (v365 - v13) >> 3;
                          }
                          v365 -= 8 * v369;
                          if (v369) {
                            memmove(&v299[-8 * v369], v365, 8 * v369);
                          }
                          if (v365 == v13) {
                            break;
                          }
                          v370 = *v367--;
                          v366 = v370;
                          v299 = v370 + 4096;
                        }
                      }
                      goto LABEL_469;
                    }
                  }
                  v344 = v341;
                  v345 = v342;
                  while (2)
                  {
                    *v329++ = *(void *)v345;
                    if ((void *)((char *)v329 - *(void *)v330) == (void *)4096)
                    {
                      v346 = (void *)*((void *)v330 + 1);
                      v330 += 8;
                      v329 = v346;
                      v345 += 8;
                      if (v345 - (unsigned char *)*v344 == 4096)
                      {
LABEL_423:
                        v347 = (char *)v344[1];
                        ++v344;
                        v345 = v347;
                      }
                    }
                    else
                    {
                      v345 += 8;
                      if (v345 - (unsigned char *)*v344 == 4096) {
                        goto LABEL_423;
                      }
                    }
                    ++v3;
                    if (v345 == v299)
                    {
                      *((void *)this + 20) = v3;
                      goto LABEL_425;
                    }
                    continue;
                  }
                }
                continue;
              }
            }
            while (2)
            {
              if (v161 != v162)
              {
                v190 = v163;
                goto LABEL_216;
              }
              if (v163 > v164)
              {
                uint64_t v194 = (v163 - v164) >> 3;
                if (v194 >= -1) {
                  uint64_t v195 = v194 + 1;
                }
                else {
                  uint64_t v195 = v194 + 2;
                }
                uint64_t v196 = v195 >> 1;
                v197 = &v163[-8 * (v195 >> 1)];
                v198 = v162;
                if (v162 != v163)
                {
                  memmove(v197, v163, v162 - v163);
                  v198 = v163;
                }
                uint64_t v199 = -v196;
                v161 = &v197[v162 - v163];
                v190 = &v198[8 * v199];
                goto LABEL_216;
              }
              if (v162 == v164) {
                unint64_t v200 = 1;
              }
              else {
                unint64_t v200 = (v162 - v164) >> 2;
              }
              if (v200 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v201 = (char *)operator new(8 * v200);
              v202 = v201;
              unint64_t v203 = v200 >> 2;
              v190 = &v201[8 * (v200 >> 2)];
              v161 = v190;
              int64_t v204 = v162 - v163;
              if (v162 != v163)
              {
                v161 = &v190[v204 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v205 = v204 - 8;
                if (v205 < 0x38 || (uint64_t v206 = 8 * v203, (unint64_t)(&v201[8 * v203] - v163) < 0x20))
                {
                  v207 = &v201[8 * (v200 >> 2)];
                  v208 = v163;
                  goto LABEL_233;
                }
                uint64_t v210 = (v205 >> 3) + 1;
                uint64_t v211 = 8 * (v210 & 0x3FFFFFFFFFFFFFFCLL);
                v207 = &v190[v211];
                v208 = &v163[v211];
                v212 = (long long *)(v163 + 16);
                v213 = &v201[v206 + 16];
                uint64_t v214 = v210 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v215 = *v212;
                  *((_OWORD *)v213 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v212 - 1);
                  *(_OWORD *)v213 = v215;
                  v212 += 2;
                  v213 += 32;
                  v214 -= 4;
                }
                while (v214);
                if (v210 != (v210 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_233:
                    uint64_t v209 = *(void *)v208;
                    v208 += 8;
                    *(void *)v207 = v209;
                    v207 += 8;
                  }
                  while (v207 != v161);
                }
              }
              uint64_t v162 = &v201[8 * v200];
              if (v164) {
                operator delete(v164);
              }
              uint64_t v164 = v202;
LABEL_216:
              *(void *)v161 = *v189;
              v161 += 8;
              v189 = (void *)(*((void *)this + 16) + 8);
              *((void *)this + 16) = v189;
              long long v163 = v190;
              if (!--v44) {
                goto LABEL_211;
              }
              continue;
            }
          }
        }
      }
      if (!v45) {
        goto LABEL_361;
      }
      do
      {
        if (*((void *)this + 18) == *((void *)this + 17))
        {
          for (uint64_t i = 0; i != v45; ++i)
          {
            *(void *)&long long v433 = operator new(0x1000uLL);
            std::__split_buffer<void **>::push_front(v17, &v433);
            unint64_t v7 = (char *)*((void *)this + 17);
            if (&v7[-*((void *)this + 16)] == (char *)8) {
              uint64_t v296 = 511;
            }
            else {
              uint64_t v296 = 512;
            }
            uint64_t v297 = v296 + *((void *)this + 19);
            *((void *)this + 19) = v297;
          }
          unint64_t v44 = v43;
          goto LABEL_362;
        }
        *(void *)&long long v433 = operator new(0x1000uLL);
        std::__split_buffer<void **>::push_back((char **)v17, &v433);
        --v43;
        --v45;
      }
      while (v45);
      unint64_t v7 = (char *)*((void *)this + 17);
LABEL_361:
      uint64_t v297 = *((void *)this + 19);
LABEL_362:
      *((void *)this + 19) = v297 - (v44 << 9);
      if (!v44) {
        goto LABEL_363;
      }
      while (1)
      {
        v305 = (void *)*((void *)this + 16);
        v307 = (char *)(v305 + 1);
        uint64_t v306 = *v305;
        *((void *)this + 16) = v305 + 1;
        if (v7 == *((char **)this + 18))
        {
          v308 = (char *)*v17;
          if (v307 <= *v17)
          {
            unint64_t v314 = (v7 - v308) >> 2;
            if (v7 == v308) {
              unint64_t v314 = 1;
            }
            if (v314 >> 61) {
              goto LABEL_515;
            }
            unint64_t v315 = v314 >> 2;
            uint64_t v316 = 8 * v314;
            v317 = (char *)operator new(8 * v314);
            v318 = &v317[8 * v315];
            int64_t v319 = v7 - v307;
            BOOL v67 = v7 == v307;
            unint64_t v7 = v318;
            if (!v67)
            {
              unint64_t v7 = &v318[v319 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v320 = v319 - 8;
              if ((unint64_t)(v319 - 8) < 0x38)
              {
                v321 = &v317[8 * v315];
                goto LABEL_389;
              }
              v321 = &v317[8 * v315];
              if ((unint64_t)(v321 - v307) < 0x20) {
                goto LABEL_525;
              }
              uint64_t v322 = (v320 >> 3) + 1;
              uint64_t v323 = 8 * (v322 & 0x3FFFFFFFFFFFFFFCLL);
              v321 = &v318[v323];
              v307 += v323;
              v324 = (long long *)(v305 + 3);
              v325 = &v317[8 * v315 + 16];
              uint64_t v326 = v322 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v327 = *v324;
                *((_OWORD *)v325 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v324 - 1);
                *(_OWORD *)v325 = v327;
                v324 += 2;
                v325 += 32;
                v326 -= 4;
              }
              while (v326);
              if (v322 != (v322 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_525:
                do
                {
LABEL_389:
                  uint64_t v328 = *(void *)v307;
                  v307 += 8;
                  *(void *)v321 = v328;
                  v321 += 8;
                }
                while (v321 != v7);
              }
            }
            *((void *)this + 15) = v317;
            *((void *)this + 16) = v318;
            *((void *)this + 17) = v7;
            *((void *)this + 1MEMORY[0x1A622BDE0]((char *)this + 8) = &v317[v316];
            if (v308)
            {
              operator delete(v308);
              unint64_t v7 = (char *)*((void *)this + 17);
            }
            goto LABEL_371;
          }
          uint64_t v309 = (v307 - (unsigned char *)*v17) >> 3;
          if (v309 >= -1) {
            uint64_t v310 = v309 + 1;
          }
          else {
            uint64_t v310 = v309 + 2;
          }
          uint64_t v311 = v310 >> 1;
          v312 = &v307[-8 * (v310 >> 1)];
          int64_t v313 = v7 - v307;
          if (v7 != v307)
          {
            memmove(&v307[-8 * (v310 >> 1)], v307, v7 - v307);
            unint64_t v7 = (char *)*((void *)this + 16);
          }
          v304 = &v7[-8 * v311];
          unint64_t v7 = &v312[v313];
          *((void *)this + 16) = v304;
          *((void *)this + 17) = &v312[v313];
        }
LABEL_371:
        *(void *)unint64_t v7 = v306;
        unint64_t v7 = (char *)(*((void *)this + 17) + 8);
        *((void *)this + 17) = v7;
        if (!--v44) {
          goto LABEL_363;
        }
      }
    }
    *((void *)this + 19) = v2 - (v44 << 9);
    if (!v44) {
      goto LABEL_363;
    }
    while (1)
    {
      int v53 = (void *)*((void *)this + 16);
      CFAllocatorRef v55 = (char *)(v53 + 1);
      uint64_t v54 = *v53;
      *((void *)this + 16) = v53 + 1;
      if (v7 == *((char **)this + 18))
      {
        CFAllocatorRef v56 = (char *)*v17;
        if (v55 <= *v17)
        {
          unint64_t v62 = (v7 - v56) >> 2;
          if (v7 == v56) {
            unint64_t v62 = 1;
          }
          if (v62 >> 61) {
            goto LABEL_515;
          }
          unint64_t v63 = v62 >> 2;
          uint64_t v64 = 8 * v62;
          uint64_t v65 = (char *)operator new(8 * v62);
          CFAllocatorRef v66 = &v65[8 * v63];
          int64_t v68 = v7 - v55;
          BOOL v67 = v7 == v55;
          unint64_t v7 = v66;
          if (!v67)
          {
            unint64_t v7 = &v66[v68 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v69 = v68 - 8;
            if ((unint64_t)(v68 - 8) < 0x38)
            {
              CFAllocatorRef v70 = &v65[8 * v63];
              goto LABEL_76;
            }
            CFAllocatorRef v70 = &v65[8 * v63];
            if ((unint64_t)(v70 - v55) < 0x20) {
              goto LABEL_526;
            }
            uint64_t v71 = (v69 >> 3) + 1;
            uint64_t v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
            CFAllocatorRef v70 = &v66[v72];
            v55 += v72;
            long long v73 = (long long *)(v53 + 3);
            std::string::size_type v74 = &v65[8 * v63 + 16];
            uint64_t v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v76 = *v73;
              *((_OWORD *)v74 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v73 - 1);
              *(_OWORD *)std::string::size_type v74 = v76;
              v73 += 2;
              v74 += 32;
              v75 -= 4;
            }
            while (v75);
            if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_526:
              do
              {
LABEL_76:
                uint64_t v77 = *(void *)v55;
                v55 += 8;
                *(void *)CFAllocatorRef v70 = v77;
                v70 += 8;
              }
              while (v70 != v7);
            }
          }
          *((void *)this + 15) = v65;
          *((void *)this + 16) = v66;
          *((void *)this + 17) = v7;
          *((void *)this + 1MEMORY[0x1A622BDE0]((char *)this + 8) = &v65[v64];
          if (v56)
          {
            operator delete(v56);
            unint64_t v7 = (char *)*((void *)this + 17);
          }
          goto LABEL_58;
        }
        uint64_t v57 = (v55 - (unsigned char *)*v17) >> 3;
        if (v57 >= -1) {
          uint64_t v58 = v57 + 1;
        }
        else {
          uint64_t v58 = v57 + 2;
        }
        uint64_t v59 = v58 >> 1;
        CFAllocatorRef v60 = &v55[-8 * (v58 >> 1)];
        int64_t v61 = v7 - v55;
        if (v7 != v55)
        {
          memmove(&v55[-8 * (v58 >> 1)], v55, v7 - v55);
          unint64_t v7 = (char *)*((void *)this + 16);
        }
        int v52 = &v7[-8 * v59];
        unint64_t v7 = &v60[v61];
        *((void *)this + 16) = v52;
        *((void *)this + 17) = &v60[v61];
      }
LABEL_58:
      *(void *)unint64_t v7 = v54;
      unint64_t v7 = (char *)(*((void *)this + 17) + 8);
      *((void *)this + 17) = v7;
      if (!--v44) {
        goto LABEL_363;
      }
    }
  }
LABEL_11:
  unint64_t v24 = v428 - v2;
  if (v428 <= v2) {
    goto LABEL_268;
  }
  v425 = v13;
  uint64_t v25 = (v21 << 6) - 1;
  if (v7 == v6)
  {
    uint64_t v25 = 0;
    ++v24;
  }
  if ((v24 & 0x1FF) != 0) {
    unint64_t v26 = (v24 >> 9) + 1;
  }
  else {
    unint64_t v26 = v24 >> 9;
  }
  unint64_t v27 = (v25 - v4) >> 9;
  if (v26 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = v26;
  }
  if (v26 <= v27)
  {
    *((void *)this + 19) = v2 + (v28 << 9);
    for (uint64_t j = v431; v28; --v28)
    {
      uint64_t v51 = *((void *)this + 17);
      *(void *)&long long v433 = *(void *)(v51 - 8);
      *((void *)this + 17) = v51 - 8;
      std::__split_buffer<void **>::push_front(v17, &v433);
    }
    goto LABEL_267;
  }
  unint64_t v29 = v26 - v28;
  uint64_t v30 = (char *)*((void *)this + 15);
  uint64_t v31 = *((void *)this + 18) - (void)v30;
  uint64_t v32 = (v7 - v6) >> 3;
  if (v26 - v28 <= (v31 >> 3) - v32)
  {
    if (v29)
    {
      if (v6 == v30)
      {
LABEL_86:
        unint64_t v80 = v29;
        do
        {
          *(void *)&long long v433 = operator new(0x1000uLL);
          std::__split_buffer<void **>::push_back((char **)v17, &v433);
          --v80;
        }
        while (v80);
        v28 += v29;
        unint64_t v2 = *((void *)this + 19);
      }
      else
      {
        while (1)
        {
          *(void *)&long long v433 = operator new(0x1000uLL);
          std::__split_buffer<void **>::push_front(v17, &v433);
          long long v78 = (void *)*((void *)this + 16);
          uint64_t v79 = *((void *)this + 17) - (void)v78 == 8 ? 511 : 512;
          unint64_t v2 = v79 + *((void *)this + 19);
          *((void *)this + 19) = v2;
          if (!--v29) {
            break;
          }
          if (v78 == *v17) {
            goto LABEL_86;
          }
        }
      }
    }
    uint64_t v12 = v430;
    uint64_t j = v431;
    for (*((void *)this + 19) = v2 + (v28 << 9); v28; --v28)
    {
      uint64_t v81 = *((void *)this + 17);
      *(void *)&long long v433 = *(void *)(v81 - 8);
      *((void *)this + 17) = v81 - 8;
      std::__split_buffer<void **>::push_front(v17, &v433);
    }
    goto LABEL_267;
  }
  BOOL v33 = v7 == v6;
  unint64_t v34 = v29 + v32;
  if (v31 >> 2 <= v34) {
    unint64_t v35 = v34;
  }
  else {
    unint64_t v35 = v31 >> 2;
  }
  if (!v35)
  {
    uint64_t v36 = 0;
    goto LABEL_97;
  }
  if (v35 >> 61) {
LABEL_515:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  uint64_t v36 = (char *)operator new(8 * v35);
LABEL_97:
  unint64_t v423 = (v26 << 9) - v33;
  long long v82 = &v36[8 * v35];
  std::string::size_type v83 = v36;
  uint64_t v84 = v36;
  uint64_t v85 = v36;
  do
  {
    while (1)
    {
      uint64_t v86 = operator new(0x1000uLL);
      if (v83 == v82) {
        break;
      }
LABEL_99:
      uint64_t v17 = v429;
      *(void *)std::string::size_type v83 = v86;
      v83 += 8;
      if (!--v29) {
        goto LABEL_124;
      }
    }
    if (v84 <= v85)
    {
      if (v82 == v85) {
        unint64_t v94 = 1;
      }
      else {
        unint64_t v94 = (v82 - v85) >> 2;
      }
      if (v94 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v95 = (char *)operator new(8 * v94);
      uint64_t v96 = v85;
      unint64_t v97 = v94 >> 2;
      uint64_t v98 = &v95[8 * (v94 >> 2)];
      std::string::size_type v83 = v98;
      int64_t v99 = v82 - v84;
      if (v82 == v84) {
        goto LABEL_118;
      }
      std::string::size_type v83 = &v98[v99 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v100 = v99 - 8;
      if (v100 >= 0x38 && (uint64_t v101 = 8 * v97, (unint64_t)(&v95[8 * v97] - v84) >= 0x20))
      {
        uint64_t v105 = (v100 >> 3) + 1;
        uint64_t v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        CFTypeID v102 = &v98[v106];
        int v103 = &v84[v106];
        std::string v107 = (long long *)(v84 + 16);
        int64_t v108 = &v95[v101 + 16];
        uint64_t v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v110 = *v107;
          *((_OWORD *)v108 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v107 - 1);
          *(_OWORD *)int64_t v108 = v110;
          v107 += 2;
          v108 += 32;
          v109 -= 4;
        }
        while (v109);
        if (v105 == (v105 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_118;
        }
      }
      else
      {
        CFTypeID v102 = &v95[8 * (v94 >> 2)];
        int v103 = v84;
      }
      do
      {
        uint64_t v104 = *(void *)v103;
        v103 += 8;
        *(void *)CFTypeID v102 = v104;
        v102 += 8;
      }
      while (v102 != v83);
LABEL_118:
      long long v82 = &v95[8 * v94];
      if (v96) {
        operator delete(v96);
      }
      uint64_t v84 = &v95[8 * (v94 >> 2)];
      uint64_t v85 = v95;
      goto LABEL_99;
    }
    uint64_t v87 = v85;
    uint64_t v88 = (v84 - v85) >> 3;
    if (v88 >= -1) {
      uint64_t v89 = v88 + 1;
    }
    else {
      uint64_t v89 = v88 + 2;
    }
    uint64_t v90 = v89 >> 1;
    long long v91 = &v84[-8 * (v89 >> 1)];
    std::string::size_type v92 = v82;
    if (v82 != v84)
    {
      memmove(v91, v84, v82 - v84);
      std::string::size_type v92 = v84;
    }
    uint64_t v93 = &v91[v82 - v84];
    uint64_t v84 = &v92[-8 * v90];
    uint64_t v85 = v87;
    uint64_t v17 = v429;
    *(void *)uint64_t v93 = v86;
    std::string::size_type v83 = v93 + 8;
    --v29;
  }
  while (v29);
LABEL_124:
  uint64_t v111 = *((void *)this + 17);
  if (v28)
  {
    while (v83 != v82)
    {
      long long v112 = v84;
LABEL_129:
      *(void *)std::string::size_type v83 = *(void *)(v111 - 8);
      v83 += 8;
      uint64_t v111 = *((void *)this + 17) - 8;
      *((void *)this + 17) = v111;
      uint64_t v84 = v112;
      if (!--v28) {
        goto LABEL_126;
      }
    }
    if (v84 > v85)
    {
      long long v114 = v85;
      uint64_t v115 = (v84 - v85) >> 3;
      if (v115 >= -1) {
        uint64_t v116 = v115 + 1;
      }
      else {
        uint64_t v116 = v115 + 2;
      }
      uint64_t v117 = v116 >> 1;
      long long v118 = &v84[-8 * (v116 >> 1)];
      long long v119 = v82;
      if (v82 != v84)
      {
        memmove(v118, v84, v82 - v84);
        long long v119 = v84;
      }
      std::string::size_type v83 = &v118[v82 - v84];
      long long v112 = &v119[-8 * v117];
      uint64_t v85 = v114;
LABEL_150:
      uint64_t v17 = v429;
      goto LABEL_129;
    }
    if (v82 == v85) {
      unint64_t v120 = 1;
    }
    else {
      unint64_t v120 = (v82 - v85) >> 2;
    }
    if (v120 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v121 = (char *)operator new(8 * v120);
    long long v122 = v121;
    unint64_t v123 = v120 >> 2;
    long long v112 = &v121[8 * (v120 >> 2)];
    std::string::size_type v83 = v112;
    int64_t v124 = v82 - v84;
    if (v82 != v84)
    {
      std::string::size_type v83 = &v112[v124 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v125 = v124 - 8;
      if (v125 >= 0x38 && (uint64_t v126 = 8 * v123, (unint64_t)(&v121[8 * v123] - v84) >= 0x20))
      {
        uint64_t v130 = (v125 >> 3) + 1;
        uint64_t v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
        size_t v127 = &v112[v131];
        long long v128 = &v84[v131];
        v132 = (long long *)(v84 + 16);
        v133 = &v121[v126 + 16];
        uint64_t v134 = v130 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v135 = *v132;
          *((_OWORD *)v133 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v132 - 1);
          *(_OWORD *)v133 = v135;
          v132 += 2;
          v133 += 32;
          v134 -= 4;
        }
        while (v134);
        if (v130 == (v130 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_147;
        }
      }
      else
      {
        size_t v127 = &v121[8 * (v120 >> 2)];
        long long v128 = v84;
      }
      do
      {
        uint64_t v129 = *(void *)v128;
        v128 += 8;
        *(void *)size_t v127 = v129;
        v127 += 8;
      }
      while (v127 != v83);
    }
LABEL_147:
    long long v82 = &v121[8 * v120];
    if (v85) {
      operator delete(v85);
    }
    uint64_t v85 = v122;
    goto LABEL_150;
  }
  long long v112 = v84;
LABEL_126:
  uint64_t v113 = (uint64_t *)*((void *)this + 16);
  if (v113 != (uint64_t *)v111)
  {
    unint64_t v23 = v427;
    while (1)
    {
      while (v83 != v82)
      {
        uint64_t v136 = v112;
        uint64_t v137 = *v113++;
        *(void *)std::string::size_type v83 = v137;
        v83 += 8;
        if (v113 == *((uint64_t **)this + 17)) {
          goto LABEL_265;
        }
      }
      if (v112 <= v85) {
        break;
      }
      uint64_t v138 = (v112 - v85) >> 3;
      if (v138 >= -1) {
        uint64_t v139 = v138 + 1;
      }
      else {
        uint64_t v139 = v138 + 2;
      }
      uint64_t v140 = v139 >> 1;
      int v141 = &v112[-8 * (v139 >> 1)];
      BOOL v142 = v82;
      if (v82 != v112)
      {
        memmove(v141, v112, v82 - v112);
        BOOL v142 = v112;
      }
      uint64_t v143 = &v141[v82 - v112];
      uint64_t v136 = &v142[-8 * v140];
LABEL_176:
      unint64_t v23 = v427;
      uint64_t v154 = *v113++;
      *(void *)uint64_t v143 = v154;
      std::string::size_type v83 = v143 + 8;
      long long v112 = v136;
      if (v113 == *((uint64_t **)this + 17)) {
        goto LABEL_265;
      }
    }
    if (v82 == v85) {
      unint64_t v144 = 1;
    }
    else {
      unint64_t v144 = (v82 - v85) >> 2;
    }
    if (v144 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v145 = (char *)operator new(8 * v144);
    char v146 = v145;
    unint64_t v147 = v144 >> 2;
    uint64_t v136 = &v145[8 * (v144 >> 2)];
    uint64_t v143 = v136;
    int64_t v148 = v82 - v112;
    if (v82 != v112)
    {
      uint64_t v143 = &v136[v148 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v149 = v148 - 8;
      if (v149 < 0x38 || (uint64_t v150 = 8 * v147, (unint64_t)(&v145[8 * v147] - v112) < 0x20))
      {
        v151 = &v145[8 * (v144 >> 2)];
        v152 = v112;
        goto LABEL_172;
      }
      uint64_t v155 = (v149 >> 3) + 1;
      uint64_t v156 = 8 * (v155 & 0x3FFFFFFFFFFFFFFCLL);
      v151 = &v136[v156];
      v152 = &v112[v156];
      uint64_t v157 = (long long *)(v112 + 16);
      uint64_t v158 = &v145[v150 + 16];
      uint64_t v159 = v155 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v160 = *v157;
        *((_OWORD *)v158 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v157 - 1);
        *(_OWORD *)uint64_t v158 = v160;
        v157 += 2;
        v158 += 32;
        v159 -= 4;
      }
      while (v159);
      if (v155 != (v155 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_172:
          uint64_t v153 = *(void *)v152;
          v152 += 8;
          *(void *)v151 = v153;
          v151 += 8;
        }
        while (v151 != v143);
      }
    }
    long long v82 = &v145[8 * v144];
    if (v85) {
      operator delete(v85);
    }
    uint64_t v85 = v146;
    goto LABEL_176;
  }
  uint64_t v136 = v112;
  unint64_t v23 = v427;
LABEL_265:
  v235 = (void *)*((void *)this + 15);
  *((void *)this + 15) = v85;
  *((void *)this + 16) = v136;
  *((void *)this + 17) = v83;
  *((void *)this + 1MEMORY[0x1A622BDE0]((char *)this + 8) = v82;
  *((void *)this + 19) += v423;
  uint64_t v12 = v430;
  uint64_t j = v431;
  if (v235) {
    operator delete(v235);
  }
LABEL_267:
  unint64_t v2 = *((void *)this + 19);
  uint64_t v6 = (char *)*((void *)this + 16);
  unint64_t v7 = (char *)*((void *)this + 17);
  unint64_t v19 = v2 >> 9;
  uint64_t v13 = v425;
LABEL_268:
  v236 = &v6[8 * v19];
  unint64_t v237 = v428;
  if (v7 != v6)
  {
    v238 = (char *)(*(void *)v236 + 8 * (v2 & 0x1FF));
    v239 = (char *)v432;
    unint64_t v240 = v428 - v23;
    if (v428 > v23) {
      goto LABEL_270;
    }
LABEL_275:
    v242 = v238;
    v243 = (char **)v236;
    uint64_t j = (const void **)v12;
    v244 = v13;
    if (!v428) {
      goto LABEL_469;
    }
    goto LABEL_294;
  }
  v238 = 0;
  v239 = (char *)v432;
  unint64_t v240 = v428 - v23;
  if (v428 <= v23) {
    goto LABEL_275;
  }
LABEL_270:
  if (v23 >= v428 >> 1)
  {
    uint64_t v241 = v240 + ((uint64_t)&v13[-*(void *)v12] >> 3);
    if (v241 < 1)
    {
      unint64_t v245 = 511 - v241;
      __int16 v246 = ~(_WORD)v245;
      uint64_t j = (const void **)&v12[-8 * (v245 >> 9)];
      goto LABEL_283;
    }
    uint64_t j = (const void **)&v12[8 * ((unint64_t)v241 >> 9)];
LABEL_279:
    v244 = (char *)*j + 8 * (v241 & 0x1FF);
  }
  else if (v23)
  {
    uint64_t v241 = ((v239 - (unsigned char *)*j) >> 3) - v23;
    if (v241 >= 1)
    {
      j += (unint64_t)v241 >> 9;
      goto LABEL_279;
    }
    unint64_t v247 = 511 - v241;
    __int16 v246 = ~(_WORD)v247;
    j -= v247 >> 9;
LABEL_283:
    v244 = (char *)*j + 8 * (v246 & 0x1FF);
  }
  else
  {
    v244 = v239;
  }
  if (v244 == v13)
  {
    v242 = v238;
    v243 = (char **)v236;
    unint64_t v237 = v427;
    if (!v427) {
      goto LABEL_469;
    }
    goto LABEL_294;
  }
  uint64_t v248 = *((void *)this + 20);
  v249 = j;
  v250 = v244;
  v243 = (char **)v236;
  v242 = v238;
  while (2)
  {
    while (2)
    {
      if (v242 == *v243)
      {
        uint64_t v251 = (uint64_t)*--v243;
        v242 = (char *)(v251 + 4096);
        if (v250 == *v249) {
          break;
        }
        goto LABEL_287;
      }
      if (v250 != *v249)
      {
LABEL_287:
        uint64_t v252 = *((void *)v250 - 1);
        v250 -= 8;
        *((void *)v242 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v252;
        v242 -= 8;
        --v2;
        ++v248;
        if (v250 == v13) {
          goto LABEL_291;
        }
        continue;
      }
      break;
    }
    uint64_t v253 = (uint64_t)*--v249;
    v250 = (char *)(v253 + 4088);
    *((void *)v242 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(void *)(v253 + 4088);
    v242 -= 8;
    --v2;
    ++v248;
    if ((char *)(v253 + 4088) != v13) {
      continue;
    }
    break;
  }
LABEL_291:
  *((void *)this + 19) = v2;
  *((void *)this + 20) = v248;
  unint64_t v237 = v427;
  if (!v427) {
    goto LABEL_469;
  }
LABEL_294:
  unint64_t v254 = v237;
  uint64_t v255 = v237 + ((uint64_t)&v238[-*(void *)v236] >> 3);
  if (v255 >= 1)
  {
    v256 = (const void **)&v236[8 * ((unint64_t)v255 >> 9)];
    v257 = (char *)*v256 + 8 * (v255 & 0x1FF);
    if (v257 == v238) {
      goto LABEL_305;
    }
LABEL_298:
    uint64_t v259 = *((void *)this + 20);
    v260 = v256;
    v261 = v257;
    while (1)
    {
      if (v242 == *v243)
      {
        uint64_t v262 = (uint64_t)*--v243;
        v242 = (char *)(v262 + 4096);
        if (v261 != *v260) {
          goto LABEL_300;
        }
      }
      else if (v261 != *v260)
      {
LABEL_300:
        uint64_t v263 = *((void *)v261 - 1);
        v261 -= 8;
        *((void *)v242 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v263;
        v242 -= 8;
        --v2;
        ++v259;
        if (v261 == v238) {
          goto LABEL_304;
        }
        continue;
      }
      uint64_t v264 = (uint64_t)*--v260;
      v261 = (unsigned char *)(v264 + 4088);
      *((void *)v242 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(void *)(v264 + 4088);
      v242 -= 8;
      --v2;
      ++v259;
      if ((char *)(v264 + 4088) == v238)
      {
LABEL_304:
        *((void *)this + 19) = v2;
        *((void *)this + 20) = v259;
        goto LABEL_305;
      }
    }
  }
  unint64_t v258 = 511 - v255;
  v256 = (const void **)&v236[-8 * (v258 >> 9)];
  v257 = (char *)*v256 + 8 * (~(_WORD)v258 & 0x1FF);
  if (v257 != v238) {
    goto LABEL_298;
  }
LABEL_305:
  if (v254 < v427)
  {
    uint64_t v265 = v427 + ((uint64_t)&v238[-*(void *)v236] >> 3);
    if (v265 < 1)
    {
      unint64_t v268 = 511 - v265;
      v266 = (const void **)&v236[-8 * (v268 >> 9)];
      v267 = (char *)*v266 + 8 * (~(_WORD)v268 & 0x1FF);
    }
    else
    {
      v266 = (const void **)&v236[8 * ((unint64_t)v265 >> 9)];
      v267 = (char *)*v266 + 8 * (v265 & 0x1FF);
    }
    *(void *)&long long v433 = v236;
    *((void *)&v433 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v238;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>>>(v256, v257, v266, v267, (uint64_t)&v433);
    v238 = (char *)*((void *)&v433 + 1);
    v236 = (char *)v433;
  }
  if (v431 == j)
  {
    uint64_t v12 = v430;
    if (v244 != v239)
    {
      v277 = *(char **)v236;
      v276 = (void **)(v236 + 8);
      v275 = v277;
      while (1)
      {
        uint64_t v278 = (v275 - v238 + 4096) >> 3;
        if ((v239 - v244) >> 3 >= v278) {
          uint64_t v279 = v278;
        }
        else {
          uint64_t v279 = (v239 - v244) >> 3;
        }
        if (v279) {
          memmove(v238, v244, 8 * v279);
        }
        v244 += 8 * v279;
        if (v244 == v239) {
          break;
        }
        v280 = (char *)*v276++;
        v275 = v280;
        v238 = v280;
      }
    }
  }
  else
  {
    uint64_t v269 = (uint64_t)*j + 4096;
    if ((char *)v269 != v244)
    {
      v271 = *(char **)v236;
      v236 += 8;
      v270 = v271;
      while (1)
      {
        uint64_t v272 = (v270 - v238 + 4096) >> 3;
        if ((v269 - (uint64_t)v244) >> 3 >= v272) {
          uint64_t v273 = v272;
        }
        else {
          uint64_t v273 = (v269 - (uint64_t)v244) >> 3;
        }
        if (v273) {
          memmove(v238, v244, 8 * v273);
        }
        v244 += 8 * v273;
        if (v244 == (char *)v269) {
          break;
        }
        v274 = *(char **)v236;
        v236 += 8;
        v270 = v274;
        v238 = v274;
      }
      v238 += 8 * v273;
      if ((char *)(*((void *)v236 - 1) + 4096) == v238) {
        v238 = *(char **)v236;
      }
      else {
        v236 -= 8;
      }
      v239 = (char *)v432;
    }
    v281 = j + 1;
    if (v281 != v431)
    {
      v282 = *(char **)v236;
      do
      {
        while (1)
        {
          uint64_t v283 = 0;
          v284 = (char *)*v281;
          for (v236 += 8; ; v236 += 8)
          {
            uint64_t v285 = (v282 - v238 + 4096) >> 3;
            if ((4096 - 8 * v283) >> 3 >= v285) {
              uint64_t v286 = v285;
            }
            else {
              uint64_t v286 = (4096 - 8 * v283) >> 3;
            }
            if (v286) {
              memmove(v238, &v284[8 * v283], 8 * v286);
            }
            v283 += v286;
            if (v283 == 512) {
              break;
            }
            v287 = *(char **)v236;
            v282 = v287;
            v238 = v287;
          }
          v238 += 8 * v286;
          v282 = (char *)*((void *)v236 - 1);
          if (v282 + 4096 != v238) {
            break;
          }
          v282 = *(char **)v236;
          v238 = *(char **)v236;
          v239 = (char *)v432;
          if (++v281 == v431) {
            goto LABEL_346;
          }
        }
        v236 -= 8;
        v239 = (char *)v432;
        ++v281;
      }
      while (v281 != v431);
    }
LABEL_346:
    uint64_t v12 = v430;
    v288 = (char *)*v431;
    if (*v431 != v239)
    {
      v291 = *(char **)v236;
      v290 = (void **)(v236 + 8);
      v289 = v291;
      while (1)
      {
        uint64_t v292 = (v289 - v238 + 4096) >> 3;
        if ((v239 - v288) >> 3 >= v292) {
          uint64_t v293 = v292;
        }
        else {
          uint64_t v293 = (v239 - v288) >> 3;
        }
        if (v293) {
          memmove(v238, v288, 8 * v293);
        }
        v288 += 8 * v293;
        if (v288 == v239) {
          break;
        }
        v294 = (char *)*v290++;
        v289 = v294;
        v238 = v294;
      }
    }
  }
LABEL_469:
  if (v239 == v13)
  {
    uint64_t v376 = 0;
    unint64_t v377 = *((void *)this + 25);
    uint64_t v378 = *((void *)this + 22);
    uint64_t v379 = *((void *)this + 23);
    v380 = (const void **)(v378 + 8 * (v377 >> 9));
    if (v379 == v378) {
      goto LABEL_477;
    }
LABEL_471:
    v381 = (char *)*v380 + 8 * (v377 & 0x1FF);
    if (v13 != v381) {
      goto LABEL_472;
    }
LABEL_478:
    unint64_t v383 = 0;
    v384 = v380;
    if (v376 >= 1) {
      goto LABEL_483;
    }
  }
  else
  {
    uint64_t v376 = ((v239 - (unsigned char *)*v431) >> 3) + (((char *)v431 - v12) << 6) - ((uint64_t)&v13[-*(void *)v12] >> 3);
    unint64_t v377 = *((void *)this + 25);
    uint64_t v378 = *((void *)this + 22);
    uint64_t v379 = *((void *)this + 23);
    v380 = (const void **)(v378 + 8 * (v377 >> 9));
    if (v379 != v378) {
      goto LABEL_471;
    }
LABEL_477:
    v381 = 0;
    if (!v13) {
      goto LABEL_478;
    }
LABEL_472:
    uint64_t v382 = ((uint64_t)&v13[-*(void *)v12] >> 3) + ((v12 - (char *)v380) << 6);
    unint64_t v383 = v382 - ((v381 - (unsigned char *)*v380) >> 3);
    if (v382 == (v381 - (unsigned char *)*v380) >> 3)
    {
      uint64_t v13 = v381;
      v384 = v380;
      if (v376 >= 1) {
        goto LABEL_483;
      }
    }
    else
    {
      if (v382 < 1)
      {
        unint64_t v385 = 511 - v382;
        v384 = &v380[-(v385 >> 9)];
        uint64_t v13 = (char *)*v384 + 8 * (~(_WORD)v385 & 0x1FF);
        if (v376 < 1) {
          goto LABEL_505;
        }
      }
      else
      {
        v384 = &v380[(unint64_t)v382 >> 9];
        uint64_t v13 = (char *)*v384 + 8 * (v382 & 0x1FF);
        if (v376 < 1) {
          goto LABEL_505;
        }
      }
LABEL_483:
      uint64_t v386 = *((void *)this + 26);
      uint64_t v387 = v376 + ((v13 - (unsigned char *)*v384) >> 3);
      if (v383 <= (unint64_t)(v386 - v376) >> 1)
      {
        if (v387 < 1)
        {
          v389 = &v384[-((unint64_t)(511 - v387) >> 9)];
          v390 = (char *)*v389;
          uint64_t v391 = ~(511 - (_WORD)v387) & 0x1FF;
        }
        else
        {
          v389 = &v384[(unint64_t)v387 >> 9];
          v390 = (char *)*v389;
          uint64_t v391 = v387 & 0x1FF;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,0>((const void ***)&v433, v380, v381, v384, v13, v389, &v390[8 * v391]);
        uint64_t v397 = *((void *)this + 26) - v376;
        unint64_t v398 = *((void *)this + 25) + v376;
        *((void *)this + 25) = v398;
        *((void *)this + 26) = v397;
        if (v398 >= 0x400)
        {
          v399 = (void **)*((void *)this + 22);
          do
          {
            operator delete(*v399);
            v399 = (void **)(*((void *)this + 22) + 8);
            *((void *)this + 22) = v399;
            unint64_t v400 = *((void *)this + 25) - 512;
            *((void *)this + 25) = v400;
          }
          while (v400 >= 0x400);
        }
      }
      else
      {
        if (v387 < 1)
        {
          unint64_t v392 = 511 - v387;
          LOWORD(v387) = ~(511 - v387);
          v388 = &v384[-(v392 >> 9)];
        }
        else
        {
          v388 = &v384[(unint64_t)v387 >> 9];
        }
        v393 = (char *)*v388 + 8 * (v387 & 0x1FF);
        unint64_t v394 = v386 + v377;
        v395 = (const void **)(v378 + 8 * (v394 >> 9));
        if (v379 == v378) {
          v396 = 0;
        }
        else {
          v396 = (char *)*v395 + 8 * (v394 & 0x1FF);
        }
        *(void *)&long long v433 = v384;
        *((void *)&v433 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v13;
        std::__for_each_segment[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>>>(v388, v393, v395, v396, (uint64_t)&v433);
        uint64_t v402 = *((void *)this + 22);
        uint64_t v401 = *((void *)this + 23);
        if (v401 == v402) {
          uint64_t v403 = 0;
        }
        else {
          uint64_t v403 = ((v401 - v402) << 6) - 1;
        }
        uint64_t v404 = *((void *)this + 25);
        uint64_t v405 = *((void *)this + 26) - v376;
        *((void *)this + 26) = v405;
        if ((unint64_t)(v403 - (v404 + v405)) >= 0x400)
        {
          do
          {
            operator delete(*(void **)(v401 - 8));
            uint64_t v406 = *((void *)this + 22);
            uint64_t v401 = *((void *)this + 23) - 8;
            *((void *)this + 23) = v401;
            if (v401 == v406) {
              uint64_t v407 = 0;
            }
            else {
              uint64_t v407 = ((v401 - v406) << 6) - 1;
            }
          }
          while ((unint64_t)(v407 - (*((void *)this + 26) + *((void *)this + 25))) > 0x3FF);
        }
      }
    }
  }
LABEL_505:
  unint64_t v408 = *((void *)this + 14);
  if (v408 < *((unsigned int *)this + 67))
  {
    while (2)
    {
      if (!*((void *)this + 20)) {
        return;
      }
      unint64_t v419 = *((void *)this + 13) + v408;
      uint64_t v420 = *((void *)this + 10);
      v421 = (char *)(v420 + 8 * (v419 >> 9));
      if (*((void *)this + 11) == v420)
      {
        uint64_t v409 = 0;
        unint64_t v410 = *((void *)this + 19);
        uint64_t v411 = *((void *)this + 16);
        v412 = (char *)(v411 + 8 * (v410 >> 9));
        if (*((void *)this + 17) == v411) {
          goto LABEL_513;
        }
      }
      else
      {
        uint64_t v409 = *(void *)v421 + 8 * (v419 & 0x1FF);
        unint64_t v410 = *((void *)this + 19);
        uint64_t v422 = *((void *)this + 16);
        v412 = (char *)(v422 + 8 * (v410 >> 9));
        if (*((void *)this + 17) == v422)
        {
LABEL_513:
          v413 = 0;
LABEL_509:
          std::deque<void *>::insert((uint64_t)this + 72, v421, v409, v413);
          std::deque<void *>::erase((uint64_t)v17, v412, v413);
          qmi::TransactionQueue::State::sendNow_sync(this, v414, v415, v416, v417, v418);
          unint64_t v408 = *((void *)this + 14);
          if (v408 >= *((unsigned int *)this + 67)) {
            return;
          }
          continue;
        }
      }
      break;
    }
    v413 = (char *)(*(void *)v412 + 8 * (v410 & 0x1FF));
    goto LABEL_509;
  }
}

void sub_1A10F9FB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A10F9FC8()
{
  if (!v0) {
    JUMPOUT(0x1A10FA080);
  }
  JUMPOUT(0x1A10FA078);
}

void sub_1A10F9FD8()
{
  if (!v0) {
    JUMPOUT(0x1A10FA080);
  }
  JUMPOUT(0x1A10FA078);
}

void sub_1A10F9FE4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A10FA034(void *a1)
{
  __cxa_begin_catch(a1);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    operator delete(v3);
  }
  __cxa_rethrow();
}

void sub_1A10FA05C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1A10FA06C()
{
}

void qmi::TransactionQueue::State::setSendWindowWidth_sync(qmi::TransactionQueue::State *this, unsigned int a2)
{
  *((_DWORD *)this + 67) = a2;
  if (*((_DWORD *)this + 8) == 2)
  {
    unint64_t v3 = *((void *)this + 14);
    if (v3 < a2)
    {
      do
      {
        if (!*((void *)this + 20)) {
          return;
        }
        unint64_t v10 = *((void *)this + 13) + v3;
        uint64_t v11 = *((void *)this + 10);
        uint64_t v12 = (char *)(v11 + 8 * (v10 >> 9));
        if (*((void *)this + 11) == v11)
        {
          uint64_t v13 = 0;
          unint64_t v14 = *((void *)this + 19);
          uint64_t v17 = *((void *)this + 16);
          unint64_t v16 = (char *)(v17 + 8 * (v14 >> 9));
          if (*((void *)this + 17) != v17)
          {
LABEL_11:
            unint64_t v4 = (char *)(*(void *)v16 + 8 * (v14 & 0x1FF));
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v13 = *(void *)v12 + 8 * (v10 & 0x1FF);
          unint64_t v14 = *((void *)this + 19);
          uint64_t v15 = *((void *)this + 16);
          unint64_t v16 = (char *)(v15 + 8 * (v14 >> 9));
          if (*((void *)this + 17) != v15) {
            goto LABEL_11;
          }
        }
        unint64_t v4 = 0;
LABEL_5:
        std::deque<void *>::insert((uint64_t)this + 72, v12, v13, v4);
        std::deque<void *>::erase((uint64_t)this + 120, v16, v4);
        qmi::TransactionQueue::State::sendNow_sync(this, v5, v6, v7, v8, v9);
        unint64_t v3 = *((void *)this + 14);
      }
      while (v3 < *((unsigned int *)this + 67));
    }
  }
}

uint64_t qmi::TransactionQueue::State::getSendWindowWidth_sync(qmi::TransactionQueue::State *this)
{
  return *((unsigned int *)this + 67);
}

uint64_t qmi::TransactionQueue::State::getSendable_sync(qmi::TransactionQueue::State *this)
{
  return *((unsigned int *)this + 67) - *((void *)this + 14);
}

uint64_t qmi::TransactionQueue::State::getQueueSize_sync(qmi::TransactionQueue::State *this)
{
  return *((void *)this + 20) + *((void *)this + 14) + *((void *)this + 26);
}

void qmi::TransactionQueue::State::sendTimeout_sync(qmi::TransactionQueue::State *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 13);
  uint64_t v5 = *((void *)this + 10);
  uint64_t v6 = *((void *)this + 11);
  uint64_t v7 = (void *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = (NSObject ***)(*v7 + 8 * (*((void *)this + 13) & 0x1FFLL));
    uint64_t v9 = *(void *)(v5 + (((*((void *)this + 14) + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*((void *)this + 14) + v4) & 0x1FF);
  }
  uint64_t v33 = MEMORY[0x1E4F143A8];
  uint64_t v34 = 0x40000000;
  unint64_t v35 = ___ZN3qmi16TransactionQueue5State24findSentTransaction_syncEt_block_invoke;
  uint64_t v36 = &__block_descriptor_tmp_8;
  __int16 v37 = a2;
  if (v8 == (NSObject ***)v9)
  {
    if (v6 != v5) {
      goto LABEL_6;
    }
  }
  else
  {
    while ((((uint64_t (*)(uint64_t *, NSObject **))v35)(&v33, *v8) & 1) == 0)
    {
      if ((NSObject ***)((char *)++v8 - *v7) == (NSObject ***)4096)
      {
        uint64_t v22 = (NSObject ***)v7[1];
        ++v7;
        uint64_t v8 = v22;
      }
      if (v8 == (NSObject ***)v9)
      {
        uint64_t v8 = (NSObject ***)v9;
        break;
      }
    }
    uint64_t v5 = *((void *)this + 10);
    if (*((void *)this + 11) != v5)
    {
LABEL_6:
      unint64_t v10 = *((void *)this + 14) + *((void *)this + 13);
      if (v8 != (NSObject ***)(*(void *)(v5 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF))) {
        goto LABEL_7;
      }
      goto LABEL_21;
    }
  }
  if (v8)
  {
LABEL_7:
    uint64_t v11 = *v8;
    uint64_t isa_low = LOWORD((*v8)[2][3].isa);
    uint64_t v13 = *((void *)this + 3);
    qmi::MessageBase::MessageBase();
    qmi::Transaction::invoke(v11, v13, (const qmi::ResponseBase *)&v33);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v33);
    if (*((unsigned char *)*v8 + 40))
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 8);
      if (v15)
      {
LABEL_9:
        uint64_t v15 = std::__shared_weak_count::lock(v15);
        unint64_t v16 = (atomic_ullong *)v15;
        uint64_t v34 = (uint64_t)v15;
        if (v15)
        {
          uint64_t v17 = *((void *)this + 7);
          uint64_t v33 = v17;
          if (v17)
          {
            int v18 = *(unsigned __int8 *)(v17 + 32);
            int v19 = *(unsigned __int8 *)(v17 + 33);
            Instance = ATCSLogger::getInstance((ATCSLogger *)v15);
            int64_t v21 = (const char *)(v17 + 8);
            if (*(char *)(v17 + 31) < 0) {
              int64_t v21 = *(const char **)v21;
            }
            (*(void (**)(void *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 6, "ATCS_TIMEOUT on message for svc=%d client=%d (txid=%d msgid=0x%x) [%s]\n", v18, v19, a2, isa_low, v21);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 64))(v17, a2, isa_low);
LABEL_30:
            if (!atomic_fetch_add(v16 + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(atomic_ullong *))(*v16 + 16))(v16);
              uint64_t v31 = (std::__shared_weak_count *)v16;
LABEL_36:
              std::__shared_weak_count::__release_weak(v31);
              goto LABEL_37;
            }
            goto LABEL_37;
          }
        }
LABEL_29:
        uint64_t v30 = ATCSLogger::getInstance((ATCSLogger *)v15);
        (*(void (**)(void *, uint64_t, const char *, ...))(*v30 + 24))(v30, 6, "ATCS_TIMEOUT for message but client dead (txid=%d msgid=0x%x)\n", a2, isa_low);
        if (!v16) {
          goto LABEL_37;
        }
        goto LABEL_30;
      }
    }
    else
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x17D, "tx->wasSent()", "is not", "true", v14);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 8);
      if (v15) {
        goto LABEL_9;
      }
    }
    unint64_t v16 = 0;
    goto LABEL_29;
  }
LABEL_21:
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  unint64_t v23 = (std::__shared_weak_count *)*((void *)this + 8);
  if (!v23)
  {
    unint64_t v24 = 0;
    goto LABEL_33;
  }
  unint64_t v23 = std::__shared_weak_count::lock(v23);
  unint64_t v24 = (atomic_ullong *)v23;
  uint64_t v34 = (uint64_t)v23;
  if (!v23 || (uint64_t v25 = *((void *)this + 7), (v33 = v25) == 0))
  {
LABEL_33:
    uint64_t v32 = ATCSLogger::getInstance((ATCSLogger *)v23);
    (*(void (**)(void *, uint64_t, const char *, ...))(*v32 + 24))(v32, 6, "Timeout fired, but no transaction found for message (txid=%d) but client is dead; ignoring\n",
      a2);
    if (!v24) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  int v26 = *(unsigned __int8 *)(v25 + 32);
  int v27 = *(unsigned __int8 *)(v25 + 33);
  unint64_t v28 = ATCSLogger::getInstance((ATCSLogger *)v23);
  unint64_t v29 = (const char *)(v25 + 8);
  if (*(char *)(v25 + 31) < 0) {
    unint64_t v29 = *(const char **)v29;
  }
  (*(void (**)(void *, uint64_t, const char *, ...))(*v28 + 24))(v28, 6, "Timeout fired, but no transaction found for svc=%d client=%d (txid=%d); ignoring [%s]\n",
    v26,
    v27,
    a2,
    v29);
LABEL_34:
  if (!atomic_fetch_add(v24 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(atomic_ullong *))(*v24 + 16))(v24);
    uint64_t v31 = (std::__shared_weak_count *)v24;
    goto LABEL_36;
  }
LABEL_37:
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

void sub_1A10FA5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10FA5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10FA608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10FA61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void qmi::TransactionQueue::State::startTimer_sync(qmi::TransactionQueue::State *this, __int16 a2)
{
  unint64_t v3 = *((void *)this + 13);
  uint64_t v4 = *((void *)this + 10);
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = (void *)(v4 + 8 * (v3 >> 9));
  if (v5 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = (uint64_t *)(*v6 + 8 * (*((void *)this + 13) & 0x1FFLL));
    uint64_t v8 = *(void *)(v4 + (((*((void *)this + 14) + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*((void *)this + 14) + v3) & 0x1FF);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  unint64_t v14 = ___ZN3qmi16TransactionQueue5State24findSentTransaction_syncEt_block_invoke;
  uint64_t v15 = &__block_descriptor_tmp_8;
  __int16 v16 = a2;
  if (v7 == (uint64_t *)v8)
  {
    if (v5 != v4) {
      goto LABEL_6;
    }
  }
  else
  {
    while ((((uint64_t (*)(void *, uint64_t))v14)(v13, *v7) & 1) == 0)
    {
      if ((uint64_t *)((char *)++v7 - *v6) == (uint64_t *)4096)
      {
        uint64_t v11 = (uint64_t *)v6[1];
        ++v6;
        uint64_t v7 = v11;
      }
      if (v7 == (uint64_t *)v8)
      {
        uint64_t v7 = (uint64_t *)v8;
        break;
      }
    }
    uint64_t v4 = *((void *)this + 10);
    if (*((void *)this + 11) != v4)
    {
LABEL_6:
      unint64_t v9 = *((void *)this + 14) + *((void *)this + 13);
      if (v7 == (uint64_t *)(*(void *)(v4 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF))) {
        return;
      }
      goto LABEL_7;
    }
  }
  if (!v7) {
    return;
  }
LABEL_7:
  uint64_t v10 = *v7;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  xpc_object_t v12[2] = ___ZN3qmi16TransactionQueue5State15startTimer_syncEt_block_invoke;
  void v12[3] = &__block_descriptor_tmp_24;
  v12[4] = this;
  qmi::Transaction::startTimer(v10, (uint64_t)v12);
}

void ___ZN3qmi16TransactionQueue5State15startTimer_syncEt_block_invoke(uint64_t a1, uint64_t a2)
{
}

void qmi::TransactionQueue::State::stall_sync(qmi::TransactionQueue::State *this)
{
  *((_DWORD *)this + MEMORY[0x1A622BDE0]((char *)this + 8) = 1;
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

void qmi::TransactionQueue::State::stall_sync(qmi::TransactionQueue::State *this, dispatch_object_t object)
{
  unint64_t v2 = object;
  uint64_t v8 = object;
  if (!object)
  {
    uint64_t v7 = (void *)*((void *)this + 28);
    uint64_t v4 = (dispatch_group_t **)((char *)this + 224);
    if ((unint64_t)v7 < *((void *)this + 29))
    {
      void *v7 = 0;
      uint64_t v6 = (dispatch_group_t *)(v7 + 1);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  dispatch_retain(object);
  uint64_t v5 = (dispatch_group_t *)*((void *)this + 28);
  uint64_t v4 = (dispatch_group_t **)((char *)this + 224);
  if ((unint64_t)v5 >= *((void *)this + 29))
  {
LABEL_8:
    uint64_t v6 = std::vector<dispatch::group_session>::__emplace_back_slow_path<dispatch::group>((dispatch_group_t **)this + 27, &v8);
    unint64_t v2 = v8;
    goto LABEL_9;
  }
  *uint64_t v5 = v2;
  dispatch_retain(v2);
  if (*v5) {
    dispatch_group_enter(*v5);
  }
  uint64_t v6 = v5 + 1;
LABEL_9:
  char *v4 = v6;
  if (v2) {
    dispatch_release(v2);
  }
  *((_DWORD *)this + MEMORY[0x1A622BDE0]((char *)this + 8) = 1;
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

void sub_1A10FA8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void qmi::TransactionQueue::State::flush_sync(qmi::TransactionQueue::State *this, dispatch_object_t object)
{
  unint64_t v2 = object;
  uint64_t v8 = object;
  if (!object)
  {
    uint64_t v7 = (void *)*((void *)this + 31);
    uint64_t v4 = (dispatch_group_t **)((char *)this + 248);
    if ((unint64_t)v7 < *((void *)this + 32))
    {
      void *v7 = 0;
      uint64_t v6 = (dispatch_group_t *)(v7 + 1);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  dispatch_retain(object);
  uint64_t v5 = (dispatch_group_t *)*((void *)this + 31);
  uint64_t v4 = (dispatch_group_t **)((char *)this + 248);
  if ((unint64_t)v5 >= *((void *)this + 32))
  {
LABEL_8:
    uint64_t v6 = std::vector<dispatch::group_session>::__emplace_back_slow_path<dispatch::group>((dispatch_group_t **)this + 30, &v8);
    unint64_t v2 = v8;
    goto LABEL_9;
  }
  *uint64_t v5 = v2;
  dispatch_retain(v2);
  if (*v5) {
    dispatch_group_enter(*v5);
  }
  uint64_t v6 = v5 + 1;
LABEL_9:
  char *v4 = v6;
  if (v2) {
    dispatch_release(v2);
  }
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

void sub_1A10FA980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::TransactionQueue::State::dumpState_sync@<X0>(qmi::TransactionQueue::State *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  v31[7] = v4;
  v31[8] = v4;
  v31[5] = v4;
  v31[6] = v4;
  v31[3] = v4;
  v31[4] = v4;
  v31[1] = v4;
  v31[2] = v4;
  long long v30 = v4;
  v31[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v29 = v4;
  long long v26 = v4;
  long long v27 = v4;
  long long v24 = v4;
  long long v25 = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"sendable=", 9);
  std::ostream::operator<<();
  uint64_t v5 = *((void *)this + 14);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 10);
    if (*((void *)this + 11) != v6)
    {
      unint64_t v7 = *((void *)this + 13);
      uint64_t v8 = (void *)(v6 + 8 * (v7 >> 9));
      uint64_t v9 = *v8 + 8 * (v7 & 0x1FF);
      uint64_t v10 = *(void *)(v6 + (((v7 + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v7 + v5) & 0x1FF);
      while (v9 != v10)
      {
        if (*(void *)(*(void *)v9 + 8)) {
          uint64_t v11 = " sent(";
        }
        else {
          uint64_t v11 = " timedout(";
        }
        if (*(void *)(*(void *)v9 + 8)) {
          uint64_t v12 = 6;
        }
        else {
          uint64_t v12 = 10;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)v11, v12);
        uint64_t v13 = (void *)std::ostream::operator<<();
        unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)":0x", 3);
        *(_DWORD *)((char *)v14 + *(void *)(*v14 - 24) + MEMORY[0x1A622BDE0]((char *)this + 8) = *(_DWORD *)((unsigned char *)v14 + *(void *)(*v14 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        uint64_t v15 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)")", 1);
        v9 += 8;
        if (v9 - *v8 == 4096)
        {
          uint64_t v16 = v8[1];
          ++v8;
          uint64_t v9 = v16;
        }
      }
    }
  }
  if (*((void *)this + 20))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)" pending=", 9);
    std::ostream::operator<<();
  }
  if (*((void *)this + 26))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)" stalled=", 9);
    std::ostream::operator<<();
  }
  if ((BYTE8(v30) & 0x10) != 0)
  {
    uint64_t v18 = v30;
    if ((unint64_t)v30 < *((void *)&v27 + 1))
    {
      *(void *)&long long v30 = *((void *)&v27 + 1);
      uint64_t v18 = *((void *)&v27 + 1);
    }
    int v19 = (const void *)v27;
    size_t v17 = v18 - v27;
    if ((unint64_t)(v18 - v27) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_35;
    }
  }
  else
  {
    if ((BYTE8(v30) & 8) == 0)
    {
      size_t v17 = 0;
      a2[23] = 0;
      goto LABEL_31;
    }
    int v19 = (const void *)*((void *)&v25 + 1);
    size_t v17 = *((void *)&v26 + 1) - *((void *)&v25 + 1);
    if (*((void *)&v26 + 1) - *((void *)&v25 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_35:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    uint64_t v22 = operator new(v20 + 1);
    *((void *)a2 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v17;
    *((void *)a2 + 2) = v21 | 0x8000000000000000;
    *(void *)a2 = v22;
    a2 = v22;
    goto LABEL_30;
  }
  a2[23] = v17;
  if (v17) {
LABEL_30:
  }
    memmove(a2, v19, v17);
LABEL_31:
  a2[v17] = 0;
  *(void *)&long long v24 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v24 + *(void *)(v24 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v24 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A622C370](v31);
}

void sub_1A10FAD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10FAD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *qmi::TransactionQueue::TransactionQueue(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

void *qmi::TransactionQueue::TransactionQueue(void *this, const qmi::TransactionQueue *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  *this = *(void *)a2;
  this[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)a2 + 1);
  *this = *(void *)a2;
  this[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void qmi::TransactionQueue::operator=(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t *qmi::TransactionQueue::swap(uint64_t *this, qmi::TransactionQueue *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v3;
  return this;
}

void qmi::TransactionQueue::~TransactionQueue(qmi::TransactionQueue *this)
{
  unint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  unint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

std::__shared_weak_count_vtbl **qmi::TransactionQueue::TransactionQueue(std::__shared_weak_count_vtbl **a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v10 = (std::__shared_weak_count_vtbl *)operator new(0x110uLL);
  qmi::TransactionQueue::State::State((uint64_t)v10, a2, a3, a4, a5);

  return std::shared_ptr<qmi::TransactionQueue::State>::shared_ptr[abi:ne180100]<qmi::TransactionQueue::State,qmi::TransactionQueue::State::Deleter,void>(a1, v10);
}

{
  std::__shared_weak_count_vtbl *v10;
  uint64_t vars8;

  uint64_t v10 = (std::__shared_weak_count_vtbl *)operator new(0x110uLL);
  qmi::TransactionQueue::State::State((uint64_t)v10, a2, a3, a4, a5);

  return std::shared_ptr<qmi::TransactionQueue::State>::shared_ptr[abi:ne180100]<qmi::TransactionQueue::State,qmi::TransactionQueue::State::Deleter,void>(a1, v10);
}

void sub_1A10FAF6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1A10FAFF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::TransactionQueue::send_sync(uint64_t *a1, void *a2, uint64_t a3, void *a4)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v12 = *a1;
  if (current_queue != *(dispatch_queue_t *)(*a1 + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x1FD, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v10);
    uint64_t v12 = *a1;
  }
  if (a4) {
    a4 = _Block_copy(a4);
  }
  uint64_t v15 = a4;
  uint64_t v13 = qmi::TransactionQueue::State::push_sync(v12, a2, a3, &v15, v9, (uint64_t)v10, v11);
  if (a4) {
    _Block_release(a4);
  }
  return v13;
}

void sub_1A10FB150(_Unwind_Exception *exception_object)
{
  if (v1) {
    _Block_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::TransactionQueue::forceSend_sync(uint64_t *a1, void *a2, uint64_t a3, void *a4)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v12 = *a1;
  if (current_queue != *(dispatch_queue_t *)(*a1 + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x203, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v10);
    uint64_t v12 = *a1;
  }
  if (a4) {
    a4 = _Block_copy(a4);
  }
  uint64_t v15 = a4;
  uint64_t v13 = qmi::TransactionQueue::State::forceSend_sync(v12, a2, a3, &v15, v9, (uint64_t)v10, v11);
  if (a4) {
    _Block_release(a4);
  }
  return v13;
}

void sub_1A10FB234(_Unwind_Exception *exception_object)
{
  if (v1) {
    _Block_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::TransactionQueue::send_sync(uint64_t *a1, qmi::MutableMessageBase *a2, uint64_t a3, void *a4)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v10 = *a1;
  if (current_queue != *(dispatch_queue_t *)(*a1 + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x209, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v9);
    uint64_t v10 = *a1;
  }
  if (a4) {
    a4 = _Block_copy(a4);
  }
  uint64_t v13 = a4;
  uint64_t v11 = qmi::TransactionQueue::State::push_sync(v10, a2, a3, &v13);
  if (a4) {
    _Block_release(a4);
  }
  return v11;
}

void sub_1A10FB318(_Unwind_Exception *exception_object)
{
  if (v1) {
    _Block_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::TransactionQueue::forceSend_sync(uint64_t *a1, qmi::MutableMessageBase *a2, uint64_t a3, void *a4)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v10 = *a1;
  if (current_queue != *(dispatch_queue_t *)(*a1 + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x20F, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v9);
    uint64_t v10 = *a1;
  }
  if (a4) {
    a4 = _Block_copy(a4);
  }
  uint64_t v13 = a4;
  uint64_t v11 = qmi::TransactionQueue::State::forceSend_sync(v10, a2, a3, &v13);
  if (a4) {
    _Block_release(a4);
  }
  return v11;
}

void sub_1A10FB3FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    _Block_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void qmi::TransactionQueue::stop_sync(qmi::TransactionQueue::State **this)
{
}

void qmi::TransactionQueue::startTimer_sync(qmi::TransactionQueue::State **this, __int16 a2)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v6 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x21B, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    uint64_t v6 = *this;
  }

  qmi::TransactionQueue::State::startTimer_sync(v6, a2);
}

void qmi::TransactionQueue::sendTransactionResponse_sync(qmi::TransactionQueue::State **this, int a2, const qmi::ResponseBase *a3)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v11 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x221, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v8);
    uint64_t v11 = *this;
  }

  qmi::TransactionQueue::State::sendTransactionResponse_sync(v11, a2, a3, v6, v7, (uint64_t)v8, v9);
}

void qmi::TransactionQueue::start_sync(qmi::TransactionQueue::State **this)
{
}

void qmi::TransactionQueue::stall_sync(qmi::TransactionQueue::State **this)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  long long v4 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x22C, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v2);
    long long v4 = *this;
  }
  *((_DWORD *)v4 + MEMORY[0x1A622BDE0]((char *)this + 8) = 1;

  qmi::TransactionQueue::State::checkFlushNotifiers_sync(v4);
}

void qmi::TransactionQueue::stall_sync(qmi::TransactionQueue::State **this, NSObject *a2)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v6 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x232, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    uint64_t v6 = *this;
  }

  qmi::TransactionQueue::State::stall_sync(v6, a2);
}

void qmi::TransactionQueue::flush_sync(qmi::TransactionQueue::State **this, NSObject *a2)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v6 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x238, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    uint64_t v6 = *this;
  }

  qmi::TransactionQueue::State::flush_sync(v6, a2);
}

void qmi::TransactionQueue::setSendWindowWidth_sync(qmi::TransactionQueue::State **this, unsigned int a2)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v6 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x23E, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    uint64_t v6 = *this;
  }

  qmi::TransactionQueue::State::setSendWindowWidth_sync(v6, a2);
}

uint64_t qmi::TransactionQueue::getSendWindowWidth_sync(qmi::TransactionQueue *this)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v4 = *(void *)this;
  if (current_queue != *(dispatch_queue_t *)(*(void *)this + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x244, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v3);
    uint64_t v4 = *(void *)this;
  }
  return *(unsigned int *)(v4 + 268);
}

uint64_t qmi::TransactionQueue::debugGetQueueSendableCount_sync(qmi::TransactionQueue *this)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v4 = *(void *)this;
  if (current_queue != *(dispatch_queue_t *)(*(void *)this + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x249, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v3);
    uint64_t v4 = *(void *)this;
  }
  return *(unsigned int *)(v4 + 268) - *(void *)(v4 + 112);
}

uint64_t qmi::TransactionQueue::debugGetQueueSize_sync(qmi::TransactionQueue *this)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v4 = *(void **)this;
  if (current_queue != *(dispatch_queue_t *)(*(void *)this + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x24E, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v3);
    uint64_t v4 = *(void **)this;
  }
  return v4[20] + v4[14] + v4[26];
}

uint64_t qmi::TransactionQueue::dumpState_sync@<X0>(qmi::TransactionQueue::State **this@<X0>, unsigned char *a2@<X8>)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v6 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x253, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    uint64_t v6 = *this;
  }

  return qmi::TransactionQueue::State::dumpState_sync(v6, a2);
}

dispatch_group_t *std::vector<dispatch::group_session>::__emplace_back_slow_path<dispatch::group>(dispatch_group_t **a1, NSObject **a2)
{
  uint64_t v2 = (char *)a1[1] - (char *)*a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (!v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (dispatch_group_t *)(8 * v3);
    uint64_t v11 = *a2;
    *(void *)(8 * v3) = *a2;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v8 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = (char *)operator new(8 * v8);
  uint64_t v10 = (dispatch_group_t *)&v9[8 * v3];
  uint64_t v11 = *a2;
  dispatch_group_t *v10 = *a2;
  if (v11)
  {
LABEL_12:
    dispatch_retain(v11);
    if (*v10) {
      dispatch_group_enter(*v10);
    }
  }
LABEL_14:
  uint64_t v12 = (dispatch_group_t *)&v9[8 * v8];
  uint64_t v13 = v10 + 1;
  unint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    unint64_t v16 = (char *)v15 - (char *)*a1 - 8;
    if (v16 < 0x78
      || &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v15
      && (dispatch_group_t *)((char *)v15 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) < v10)
    {
      goto LABEL_36;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v10 = (dispatch_group_t *)((char *)v10 - v18);
    int v19 = &v15[v18 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v20 = v15 - 2;
    uint64_t v21 = &v9[8 * v3 - 16];
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v20;
      *((_OWORD *)v21 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v20 - 1);
      *(_OWORD *)uint64_t v21 = v23;
      *((_OWORD *)v20 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0uLL;
      *(_OWORD *)uint64_t v20 = 0uLL;
      v20 -= 4;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    uint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_36:
      do
      {
        long long v24 = *--v15;
        *--uint64_t v10 = v24;
        *uint64_t v15 = 0;
      }
      while (v15 != v14);
    }
    uint64_t v15 = *a1;
    long long v25 = a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v12;
    if (v25 != v15)
    {
      long long v26 = v25;
      do
      {
        unint64_t v28 = *--v26;
        long long v27 = v28;
        if (v28)
        {
          dispatch_group_leave(v27);
          long long v29 = *(v25 - 1);
          if (v29) {
            dispatch_release(v29);
          }
        }
        long long v25 = v26;
      }
      while (v26 != v15);
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void dispatch::async<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0,std::default_delete<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0>>)::{lambda(void *)#1}::__invoke(const void **a1)
{
  uint64_t v2 = (qmi::MessageBase *)(a1 + 1);
  (*((void (**)(void))*a1 + 2))();
  qmi::MessageBase::~MessageBase(v2);
  if (*a1) {
    _Block_release(*a1);
  }

  operator delete(a1);
}

void sub_1A10FBB20(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  qmi::MessageBase::~MessageBase(v3);
  if (*v1) {
    _Block_release(*v1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **std::shared_ptr<qmi::TransactionQueue::State>::shared_ptr[abi:ne180100]<qmi::TransactionQueue::State,qmi::TransactionQueue::State::Deleter,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  *a1 = a2;
  unint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43DAE0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      a2->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  a2->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
  a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A10FBC68(void *a1)
{
  uint64_t v2 = __cxa_begin_catch(a1);
  qmi::TransactionQueue::State::Deleter::operator()((uint64_t)v2, v1);
  __cxa_rethrow();
}

void sub_1A10FBC7C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<qmi::TransactionQueue::State *,qmi::TransactionQueue::State::Deleter,std::allocator<qmi::TransactionQueue::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::TransactionQueue::State *,qmi::TransactionQueue::State::Deleter,std::allocator<qmi::TransactionQueue::State>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(NSObject **)(v1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN3qmi16TransactionQueue5State7DeleterclEPS1__block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t std::__shared_ptr_pointer<qmi::TransactionQueue::State *,qmi::TransactionQueue::State::Deleter,std::allocator<qmi::TransactionQueue::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A1126E5ALL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001A1126E5ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A1126E5ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A1126E5ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

qmi::Transaction **boost::ptr_container_detail::static_move_ptr<qmi::Transaction,boost::ptr_container_detail::static_clone_deleter<boost::heap_clone_allocator>>::~static_move_ptr(qmi::Transaction **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v7 = *a1;
  if (v7)
  {
    qmi::Transaction::~Transaction(v7, a2, a3, a4, a5, a6);
    operator delete(v8);
  }
  return a1;
}

void std::deque<void *>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v32 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v32 = 1;
      }
      if (!(v32 >> 61))
      {
        unint64_t v33 = v32 >> 2;
        uint64_t v34 = 8 * v32;
        unint64_t v35 = (char *)operator new(8 * v32);
        uint64_t v36 = &v35[8 * v33];
        __int16 v37 = &v35[v34];
        int64_t v39 = v5 - v7;
        BOOL v38 = v5 == v7;
        uint64_t v5 = v36;
        if (!v38)
        {
          uint64_t v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            long long v73 = &v35[8 * v33];
            unint64_t v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              uint64_t v74 = (v40 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v41 = &v36[v75];
              v7 += v75;
              long long v76 = (long long *)(v6 + 3);
              uint64_t v77 = v73 + 16;
              uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v76;
                *(v77 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v76 - 1);
                *uint64_t v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            unint64_t v41 = &v35[8 * v33];
          }
          do
          {
            uint64_t v80 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v89 = operator new(0x1000uLL);
      std::__split_buffer<void **>::push_back((char **)a1, &v89);
      return;
    }
    uint64_t v89 = operator new(0x1000uLL);
    std::__split_buffer<void **>::push_front((void **)a1, &v89);
    unint64_t v42 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v42 + 1);
    uint64_t v8 = *v42;
    *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v43 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v43 = 1;
      }
      if (!(v43 >> 61))
      {
        unint64_t v44 = v43 >> 2;
        uint64_t v45 = 8 * v43;
        unint64_t v35 = (char *)operator new(8 * v43);
        uint64_t v36 = &v35[8 * v44];
        __int16 v37 = &v35[v45];
        int64_t v46 = v5 - v7;
        BOOL v38 = v5 == v7;
        uint64_t v5 = v36;
        if (!v38)
        {
          uint64_t v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            uint64_t v81 = &v35[8 * v44];
            unint64_t v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              uint64_t v82 = (v47 >> 3) + 1;
              uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v48 = &v36[v83];
              v7 += v83;
              uint64_t v84 = (long long *)(v42 + 3);
              uint64_t v85 = v81 + 16;
              uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v87 = *v84;
                *(v85 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v84 - 1);
                _OWORD *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            unint64_t v48 = &v35[8 * v44];
          }
          do
          {
            uint64_t v88 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_76:
        *(void *)a1 = v35;
        *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v36;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_87;
  }
  long long v25 = (char *)operator new(8 * v24);
  long long v26 = operator new(0x1000uLL);
  long long v27 = &v25[8 * v21];
  unint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = v20 >> 2;
      }
      if (v49 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v27 = (char *)operator new(8 * v49);
      unint64_t v28 = &v27[8 * v49];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      long long v25 = v27;
      *(void *)long long v27 = v30;
      long long v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v31 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v31 = v21 + 1;
      }
      v27 -= 8 * (v31 >> 1);
      *(void *)long long v27 = v26;
      long long v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    goto LABEL_51;
  }
  *(void *)long long v27 = v26;
  long long v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_51:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25) {
            unint64_t v57 = 1;
          }
          else {
            unint64_t v57 = (v28 - v25) >> 2;
          }
          if (v57 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v58 = (char *)operator new(8 * v57);
          uint64_t v59 = v58;
          unint64_t v60 = (v57 + 3) >> 2;
          long long v27 = &v58[8 * v60];
          int64_t v61 = v29 - v25;
          BOOL v38 = v29 == v25;
          long long v29 = v27;
          if (!v38)
          {
            long long v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v62 = v61 - 8;
            unint64_t v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if (v62 < 0x38) {
              goto LABEL_91;
            }
            uint64_t v65 = 8 * v60;
            unint64_t v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20) {
              goto LABEL_91;
            }
            uint64_t v66 = (v62 >> 3) + 1;
            uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v63 = &v27[v67];
            uint64_t v64 = &v25[v67];
            int64_t v68 = (long long *)(v25 + 16);
            unint64_t v69 = &v58[v65 + 16];
            uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v71 = *v68;
              *((_OWORD *)v69 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v68 - 1);
              *(_OWORD *)unint64_t v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                uint64_t v72 = *(void *)v64;
                v64 += 8;
                *(void *)unint64_t v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          unint64_t v28 = &v58[8 * v57];
          operator delete(v25);
          long long v25 = v59;
        }
        else
        {
          uint64_t v53 = (v28 - v29) >> 3;
          if (v53 >= -1) {
            uint64_t v54 = v53 + 1;
          }
          else {
            uint64_t v54 = v53 + 2;
          }
          uint64_t v55 = v54 >> 1;
          long long v27 = &v25[8 * (v54 >> 1)];
          CFAllocatorRef v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            CFAllocatorRef v56 = v29;
          }
          long long v29 = (char *)v56 + 8 * v55;
        }
      }
      uint64_t v52 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v27 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(void *)(a1 + 8));
  }
LABEL_45:
  uint64_t v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v27;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_1A10FC344(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<void **>::push_back(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    long long v26 = &v6[v25];
    long long v27 = (long long *)(v6 + 16);
    unint64_t v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v27 - 1);
      *unint64_t v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<void **>::push_front(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      uint64_t v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        long long v26 = (long long *)(v4 + 16);
        long long v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v26 - 1);
          *long long v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        uint64_t v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      uint64_t v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = (char *)a1[1];
  }
  *((void *)v5 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<void *>::erase(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = (const void **)(v7 + 8 * (v6 >> 9));
  if (v8 != v7)
  {
    uint64_t v10 = (char *)*v9 + 8 * (*(void *)(a1 + 32) & 0x1FFLL);
    if (a3 != v10) {
      goto LABEL_3;
    }
LABEL_7:
    BOOL v12 = *v9;
    goto LABEL_8;
  }
  uint64_t v10 = 0;
  if (!a3) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v11 = ((uint64_t)&a3[-*(void *)a2] >> 3) + ((a2 - (char *)v9) << 6);
  BOOL v12 = *v9;
  unint64_t v13 = v11 - ((v10 - (unsigned char *)*v9) >> 3);
  if (!v13)
  {
LABEL_8:
    unint64_t v14 = (const void **)(v7 + 8 * (v6 >> 9));
    unint64_t v15 = (const void **)v10;
    goto LABEL_9;
  }
  if (v11 < 1)
  {
    unint64_t v23 = 511 - v11;
    LOWORD(v1qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = ~(511 - v11);
    unint64_t v14 = &v9[-(v23 >> 9)];
  }
  else
  {
    unint64_t v14 = &v9[(unint64_t)v11 >> 9];
  }
  BOOL v12 = *v14;
  unint64_t v15 = (const void **)((char *)*v14 + 8 * (v11 & 0x1FF));
  uint64_t v24 = *(void *)(a1 + 40);
  if (v13 > (unint64_t)(v24 - 1) >> 1)
  {
    uint64_t v25 = (char *)v15 - v12;
    uint64_t v26 = ((char *)v15 - v12) >> 3;
    if (v25 < -7)
    {
      unint64_t v33 = 510 - v26;
      uint64_t v28 = &v14[-(v33 >> 9)];
      long long v29 = (char *)*v28 + 8 * (~(_WORD)v33 & 0x1FF);
      __int16 v30 = v24 + v6;
      uint64_t v31 = (const void **)(v7 + 8 * ((v24 + v6) >> 9));
      if (v8 != v7) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v27 = v26 + 1;
      uint64_t v28 = &v14[v27 >> 9];
      long long v29 = (char *)*v28 + 8 * (v27 & 0x1FF);
      __int16 v30 = v24 + v6;
      uint64_t v31 = (const void **)(v7 + 8 * ((v24 + v6) >> 9));
      if (v8 != v7)
      {
LABEL_19:
        unint64_t v32 = (char *)*v31 + 8 * (v30 & 0x1FF);
LABEL_22:
        v41[0] = v14;
        v41[1] = v15;
        std::__for_each_segment[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>>>(v28, v29, v31, v32, (uint64_t)v41);
        uint64_t v35 = *(void *)(a1 + 8);
        uint64_t v34 = *(void *)(a1 + 16);
        uint64_t v36 = v34 - v35;
        BOOL v37 = v34 == v35;
        uint64_t v39 = *(void *)(a1 + 32);
        uint64_t v38 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v38 - 1;
        uint64_t v40 = (v36 << 6) - 1;
        if (v37) {
          uint64_t v40 = 0;
        }
        if ((unint64_t)(v40 - (v38 + v39) + 1) >= 0x400)
        {
          operator delete(*(void **)(v34 - 8));
          *(void *)(a1 + 16) -= 8;
        }
        return;
      }
    }
    unint64_t v32 = 0;
    goto LABEL_22;
  }
LABEL_9:
  uint64_t v16 = (char *)v15 - v12;
  uint64_t v17 = ((char *)v15 - v12) >> 3;
  if (v16 < -7)
  {
    unint64_t v21 = 510 - v17;
    uint64_t v19 = &v14[-(v21 >> 9)];
    unint64_t v20 = (char *)*v19 + 8 * (~(_WORD)v21 & 0x1FF);
  }
  else
  {
    unint64_t v18 = v17 + 1;
    uint64_t v19 = &v14[v18 >> 9];
    unint64_t v20 = (char *)*v19 + 8 * (v18 & 0x1FF);
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,0>(v41, v9, v10, v14, (char *)v15, v19, v20);
  int64x2_t v22 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1A1125FF0);
  *(int64x2_t *)(a1 + 32) = v22;
  if (v22.i64[0] >= 0x400uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
}

const void ***std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,0>(const void ***result, const void **a2, char *a3, const void **a4, char *a5, const void **a6, char *a7)
{
  uint64_t v8 = a6;
  BOOL v12 = result;
  if (a2 == a4)
  {
    if (a3 == a5) {
      goto LABEL_42;
    }
    uint64_t v31 = (uint64_t)*a6;
    unint64_t v32 = a5;
    while (1)
    {
      uint64_t v33 = (uint64_t)&a7[-v31] >> 3;
      if ((v32 - a3) >> 3 < v33) {
        uint64_t v33 = (v32 - a3) >> 3;
      }
      v32 -= 8 * v33;
      a7 -= 8 * v33;
      if (v33) {
        uint64_t result = (const void ***)memmove(a7, v32, 8 * v33);
      }
      if (v32 == a3) {
        break;
      }
      uint64_t v34 = (uint64_t)*--v8;
      uint64_t v31 = v34;
      a7 = (char *)(v34 + 4096);
    }
    goto LABEL_40;
  }
  unint64_t v14 = *a4;
  if (*a4 != a5)
  {
    uint64_t v15 = (uint64_t)*a6;
    uint64_t v16 = a5;
    while (1)
    {
      uint64_t v17 = (uint64_t)&a7[-v15] >> 3;
      if ((v16 - v14) >> 3 < v17) {
        uint64_t v17 = (v16 - v14) >> 3;
      }
      v16 -= 8 * v17;
      a7 -= 8 * v17;
      if (v17) {
        uint64_t result = (const void ***)memmove(a7, v16, 8 * v17);
      }
      if (v16 == v14) {
        break;
      }
      uint64_t v18 = (uint64_t)*--v8;
      uint64_t v15 = v18;
      a7 = (char *)(v18 + 4096);
    }
    if ((char *)*v8 + 4096 == a7)
    {
      uint64_t v19 = (char *)v8[1];
      ++v8;
      a7 = v19;
    }
  }
  unint64_t v20 = a4 - 1;
  if (a4 - 1 != a2)
  {
    unint64_t v21 = (char *)*v8;
    do
    {
      while (1)
      {
        int64x2_t v22 = *v20;
        unint64_t v23 = (char *)*v20 + 4096;
        while (1)
        {
          uint64_t v24 = (a7 - v21) >> 3;
          if ((v23 - v22) >> 3 < v24) {
            uint64_t v24 = (v23 - v22) >> 3;
          }
          v23 -= 8 * v24;
          a7 -= 8 * v24;
          if (v24) {
            uint64_t result = (const void ***)memmove(a7, v23, 8 * v24);
          }
          if (v23 == v22) {
            break;
          }
          uint64_t v25 = (char *)*--v8;
          unint64_t v21 = v25;
          a7 = v25 + 4096;
        }
        unint64_t v21 = (char *)*v8;
        if ((char *)*v8 + 4096 == a7) {
          break;
        }
        if (--v20 == a2) {
          goto LABEL_24;
        }
      }
      uint64_t v26 = (char *)v8[1];
      ++v8;
      unint64_t v21 = v26;
      a7 = v26;
      --v20;
    }
    while (v20 != a2);
  }
LABEL_24:
  unint64_t v27 = (char *)*a2 + 4096;
  if (v27 != a3)
  {
    uint64_t v28 = (uint64_t)*v8;
    while (1)
    {
      uint64_t v29 = (uint64_t)&a7[-v28] >> 3;
      if ((v27 - a3) >> 3 < v29) {
        uint64_t v29 = (v27 - a3) >> 3;
      }
      v27 -= 8 * v29;
      a7 -= 8 * v29;
      if (v29) {
        uint64_t result = (const void ***)memmove(a7, v27, 8 * v29);
      }
      if (v27 == a3) {
        break;
      }
      uint64_t v30 = (uint64_t)*--v8;
      uint64_t v28 = v30;
      a7 = (char *)(v30 + 4096);
    }
LABEL_40:
    if ((char *)*v8 + 4096 == a7)
    {
      uint64_t v35 = (char *)v8[1];
      ++v8;
      a7 = v35;
    }
  }
LABEL_42:
  *BOOL v12 = a4;
  v12[1] = (const void **)a5;
  xpc_object_t v12[2] = v8;
  void v12[3] = (const void **)a7;
  return result;
}

const void **std::__for_each_segment[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>>>(const void **result, unsigned char *__src, const void **a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v7 = __src;
  uint64_t v9 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (result != a3)
  {
    uint64_t v11 = result;
    BOOL v12 = (char *)*result + 4096;
    if (v12 != __src)
    {
      unint64_t v14 = (char *)*v9++;
      unint64_t v13 = v14;
      while (1)
      {
        uint64_t v15 = (v13 - v8 + 4096) >> 3;
        if ((v12 - v7) >> 3 >= v15) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = (v12 - v7) >> 3;
        }
        if (v16) {
          uint64_t result = (const void **)memmove(v8, v7, 8 * v16);
        }
        v7 += 8 * v16;
        if (v7 == v12) {
          break;
        }
        uint64_t v17 = (char *)*v9++;
        unint64_t v13 = v17;
        uint64_t v8 = v17;
      }
      v8 += 8 * v16;
      if ((char *)*(v9 - 1) + 4096 == v8)
      {
        uint64_t v8 = (char *)*v9;
        *(void *)a5 = v9;
        *(void *)(a5 + MEMORY[0x1A622BDE0]((char *)this + 8) = v8;
        uint64_t i = v11 + 1;
        if (v11 + 1 != a3) {
          goto LABEL_16;
        }
LABEL_39:
        uint64_t v33 = *a3;
        if (v33 == a4) {
          goto LABEL_50;
        }
        uint64_t v35 = (char *)*v9++;
        uint64_t v34 = v35;
        while (1)
        {
          uint64_t v36 = (v34 - v8 + 4096) >> 3;
          uint64_t v37 = (a4 - v33) >> 3 >= v36 ? v36 : (a4 - v33) >> 3;
          if (v37) {
            uint64_t result = (const void **)memmove(v8, v33, 8 * v37);
          }
          v33 += 8 * v37;
          if (v33 == a4) {
            break;
          }
          uint64_t v38 = (char *)*v9++;
          uint64_t v34 = v38;
          uint64_t v8 = v38;
        }
        v8 += 8 * v37;
        unint64_t v32 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8)
        {
LABEL_49:
          uint64_t v9 = v32;
          goto LABEL_50;
        }
        goto LABEL_37;
      }
      --v9;
    }
    *(void *)a5 = v9;
    *(void *)(a5 + MEMORY[0x1A622BDE0]((char *)this + 8) = v8;
    for (uint64_t i = v11 + 1; i != a3; ++i)
    {
LABEL_16:
      while (1)
      {
        uint64_t v19 = 0;
        unint64_t v20 = (char *)*i;
        int64x2_t v22 = (char *)*v9++;
        unint64_t v21 = v22;
        while (1)
        {
          uint64_t v23 = (v21 - v8 + 4096) >> 3;
          if ((4096 - 8 * v19) >> 3 >= v23) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = (4096 - 8 * v19) >> 3;
          }
          if (v24) {
            uint64_t result = (const void **)memmove(v8, &v20[8 * v19], 8 * v24);
          }
          v19 += v24;
          if (v19 == 512) {
            break;
          }
          uint64_t v25 = (char *)*v9++;
          unint64_t v21 = v25;
          uint64_t v8 = v25;
        }
        v8 += 8 * v24;
        uint64_t v26 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8) {
          break;
        }
        uint64_t v8 = (char *)*v9;
        *(void *)a5 = v9;
        *(void *)(a5 + MEMORY[0x1A622BDE0]((char *)this + 8) = v8;
        if (++i == a3) {
          goto LABEL_39;
        }
      }
      --v9;
      *(void *)a5 = v26;
      *(void *)(a5 + MEMORY[0x1A622BDE0]((char *)this + 8) = v8;
    }
    goto LABEL_39;
  }
  if (__src != a4)
  {
    uint64_t v28 = (char *)*v9++;
    unint64_t v27 = v28;
    while (1)
    {
      uint64_t v29 = (v27 - v8 + 4096) >> 3;
      if ((a4 - v7) >> 3 >= v29) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = (a4 - v7) >> 3;
      }
      if (v30) {
        uint64_t result = (const void **)memmove(v8, v7, 8 * v30);
      }
      v7 += 8 * v30;
      if (v7 == a4) {
        break;
      }
      uint64_t v31 = (char *)*v9++;
      unint64_t v27 = v31;
      uint64_t v8 = v31;
    }
    v8 += 8 * v30;
    unint64_t v32 = v9 - 1;
    if ((char *)*(v9 - 1) + 4096 != v8) {
      goto LABEL_49;
    }
LABEL_37:
    uint64_t v8 = (char *)*v9;
  }
LABEL_50:
  *(void *)a5 = v9;
  *(void *)(a5 + MEMORY[0x1A622BDE0]((char *)this + 8) = v8;
  return result;
}

void std::deque<void *>::insert(uint64_t a1, char *a2, uint64_t a3, char *a4)
{
  unint64_t v6 = *(void *)(a1 + 32);
  uint64_t v8 = *(char **)(a1 + 8);
  uint64_t v7 = *(char **)(a1 + 16);
  uint64_t v9 = &v8[8 * (v6 >> 9)];
  int64_t v10 = v7 - v8;
  if (v7 == v8)
  {
    uint64_t v11 = 0;
    if (a3)
    {
LABEL_3:
      unint64_t v12 = ((a3 - *(void *)a2) >> 3) + ((a2 - v9) << 6) - ((v11 - *(void *)v9) >> 3);
      unint64_t v13 = *(void *)(a1 + 40);
      unint64_t v14 = v13 - v12;
      if (v12 < v13 - v12) {
        goto LABEL_4;
      }
LABEL_11:
      uint64_t v16 = (v10 << 6) - 1;
      if (v7 == v8) {
        uint64_t v16 = 0;
      }
      if (v16 == v13 + v6)
      {
        std::deque<void *>::__add_back_capacity(a1);
        unint64_t v13 = *(void *)(a1 + 40);
        unint64_t v14 = v13 - v12;
      }
      if (v13 == v12)
      {
        *(void *)(*(void *)(*(void *)(a1 + 8) + (((*(void *)(a1 + 32) + v12) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((*(void *)(a1 + 32) + v12) & 0x1FF)) = *(void *)a4;
        *(void *)(a1 + 40) = v12 + 1;
        return;
      }
      unint64_t v17 = *(void *)(a1 + 32) + v13;
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v19 = (char *)(v18 + 8 * (v17 >> 9));
      uint64_t v20 = *(void *)v19 + 8 * (v17 & 0x1FF);
      if (*(void *)(a1 + 16) == v18) {
        unint64_t v21 = 0;
      }
      else {
        unint64_t v21 = (char *)v20;
      }
      uint64_t v22 = (uint64_t)&v21[-*(void *)v19];
      uint64_t v23 = v22 >> 3;
      if (v22 < 9)
      {
        unint64_t v27 = 512 - v23;
        uint64_t v25 = &v19[-8 * (v27 >> 9)];
        uint64_t v26 = (char *)(*(void *)v25 + 8 * (~(_WORD)v27 & 0x1FF));
      }
      else
      {
        unint64_t v24 = v23 - 1;
        uint64_t v25 = &v19[8 * (v24 >> 9)];
        uint64_t v26 = (char *)(*(void *)v25 + 8 * (v24 & 0x1FF));
      }
      if (v26 == a4) {
        a4 = v21;
      }
      *(void *)unint64_t v21 = *(void *)v26;
      *(void *)(a1 + 40) = v13 + 1;
      if (v14 < 2) {
        goto LABEL_69;
      }
      uint64_t v28 = ((uint64_t)&v21[-*(void *)v19] >> 3) - v14;
      if (v28 < 1)
      {
        uint64_t v29 = &v19[-8 * ((unint64_t)(511 - v28) >> 9)];
        uint64_t v30 = *(void *)v29;
        uint64_t v31 = *(void *)v29 + 8 * (~(511 - (_WORD)v28) & 0x1FF);
        if (v26 == (char *)v31) {
          goto LABEL_69;
        }
      }
      else
      {
        uint64_t v29 = &v19[8 * ((unint64_t)v28 >> 9)];
        uint64_t v30 = *(void *)v29;
        uint64_t v31 = *(void *)v29 + 8 * (v28 & 0x1FF);
        if (v26 == (char *)v31) {
          goto LABEL_69;
        }
      }
      uint64_t v35 = ((uint64_t)&v26[-*(void *)v25] >> 3) + ((v25 - v29) << 6) - ((v31 - v30) >> 3);
      if (v35 >= 1)
      {
        do
        {
          uint64_t v37 = *(char **)v25;
          if (v26 == *(char **)v25)
          {
            uint64_t v38 = (char *)*((void *)v25 - 1);
            v25 -= 8;
            uint64_t v37 = v38;
            uint64_t v26 = v38 + 4096;
          }
          uint64_t v39 = v26 - 8;
          uint64_t v40 = (v26 - v37) >> 3;
          if (v40 >= v35) {
            uint64_t v41 = v35;
          }
          else {
            uint64_t v41 = (v26 - v37) >> 3;
          }
          if (v40 <= v35) {
            unint64_t v42 = v37;
          }
          else {
            unint64_t v42 = &v26[-8 * v35];
          }
          if (a4 >= v26 || v42 > a4) {
            goto LABEL_52;
          }
          if (v39 == v21)
          {
            uint64_t v44 = ((a4 - v37) >> 3) - 1;
            if (v44 >= 1) {
              goto LABEL_51;
            }
          }
          else
          {
            uint64_t v43 = ~((v39 - v37) >> 3) + ((v19 - v25) << 6) + ((uint64_t)&v21[-*(void *)v19] >> 3);
            if (!v43) {
              goto LABEL_52;
            }
            uint64_t v44 = v43 + ((a4 - v37) >> 3);
            if (v44 >= 1)
            {
LABEL_51:
              a4 = (char *)(*(void *)&v25[((unint64_t)v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF));
LABEL_52:
              if (v42 != v26) {
                goto LABEL_53;
              }
              goto LABEL_62;
            }
          }
          a4 = (char *)(*(void *)&v25[-8 * ((unint64_t)(511 - v44) >> 9)] + 8 * (~(511 - (_WORD)v44) & 0x1FF));
          if (v42 != v26)
          {
LABEL_53:
            uint64_t v45 = *(void *)v19;
            while (1)
            {
              uint64_t v46 = (uint64_t)&v21[-v45] >> 3;
              if ((v26 - v42) >> 3 < v46) {
                uint64_t v46 = (v26 - v42) >> 3;
              }
              v26 -= 8 * v46;
              v21 -= 8 * v46;
              if (v46) {
                memmove(v21, v26, 8 * v46);
              }
              if (v26 == v42) {
                break;
              }
              uint64_t v47 = *((void *)v19 - 1);
              v19 -= 8;
              uint64_t v45 = v47;
              unint64_t v21 = (char *)(v47 + 4096);
            }
            if ((char *)(*(void *)v19 + 4096) == v21)
            {
              unint64_t v48 = (char *)*((void *)v19 + 1);
              v19 += 8;
              unint64_t v21 = v48;
            }
          }
LABEL_62:
          if (v41 == 1)
          {
            uint64_t v26 = v39;
          }
          else
          {
            uint64_t v49 = ((uint64_t)&v39[-*(void *)v25] >> 3) - (v41 - 1);
            if (v49 < 1)
            {
              unint64_t v50 = 511 - v49;
              v25 -= 8 * (v50 >> 9);
              uint64_t v26 = (char *)(*(void *)v25 + 8 * (~(_WORD)v50 & 0x1FF));
            }
            else
            {
              v25 += 8 * ((unint64_t)v49 >> 9);
              uint64_t v26 = (char *)(*(void *)v25 + 8 * (v49 & 0x1FF));
            }
          }
          BOOL v36 = v35 <= v41;
          v35 -= v41;
        }
        while (!v36);
      }
LABEL_69:
      if (v21 == *(char **)v19) {
        unint64_t v21 = (char *)(*((void *)v19 - 1) + 4096);
      }
      *((void *)v21 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(void *)a4;
      return;
    }
  }
  else
  {
    uint64_t v11 = *(void *)v9 + 8 * (*(void *)(a1 + 32) & 0x1FFLL);
    if (a3 != v11) {
      goto LABEL_3;
    }
  }
  unint64_t v12 = 0;
  unint64_t v13 = *(void *)(a1 + 40);
  unint64_t v14 = v13;
  if (!v13) {
    goto LABEL_11;
  }
LABEL_4:
  if (!v6)
  {
    uint64_t v15 = (v10 << 6) - 1;
    if (v7 == v8) {
      uint64_t v15 = 0;
    }
    if (v15 - v13 >= 0x200)
    {
      *(void *)(a1 + 32) = 512;
      unint64_t v125 = (void *)*((void *)v7 - 1);
      *(void *)(a1 + 16) = v7 - 8;
      std::__split_buffer<void **>::push_front((void **)a1, &v125);
      goto LABEL_114;
    }
    unint64_t v32 = *(char **)(a1 + 24);
    uint64_t v33 = *(char **)a1;
    uint64_t v34 = (uint64_t)&v32[-*(void *)a1];
    if (v7 - v8 < (unint64_t)v34)
    {
      if (v8 == v33)
      {
        unint64_t v125 = operator new(0x1000uLL);
        std::__split_buffer<void **>::push_back((char **)a1, &v125);
        uint64_t v82 = *(void *)(a1 + 16);
        unint64_t v125 = *(void **)(v82 - 8);
        *(void *)(a1 + 16) = v82 - 8;
        std::__split_buffer<void **>::push_front((void **)a1, &v125);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v125 = operator new(0x1000uLL);
        std::__split_buffer<void **>::push_front((void **)a1, &v125);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
        {
LABEL_32:
          *(void *)(a1 + 32) = 256;
          goto LABEL_114;
        }
      }
      *(void *)(a1 + 32) += 512;
      goto LABEL_114;
    }
    if (v32 == v33) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = v34 >> 2;
    }
    if (v51 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v52 = (char *)operator new(8 * v51);
    uint64_t v53 = operator new(0x1000uLL);
    uint64_t v54 = v53;
    if (v51)
    {
      uint64_t v55 = &v52[8 * v51];
      *(void *)uint64_t v52 = v53;
      CFAllocatorRef v56 = v52 + 8;
      if (v8 != v7)
      {
LABEL_78:
        unint64_t v57 = v52;
        while (1)
        {
          if (v56 == v55)
          {
            if (v57 <= v52)
            {
              if (v56 == v52) {
                unint64_t v66 = 1;
              }
              else {
                unint64_t v66 = (v56 - v52) >> 2;
              }
              if (v66 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v67 = (char *)operator new(8 * v66);
              int64_t v68 = v67;
              unint64_t v69 = v66 >> 2;
              uint64_t v58 = &v67[8 * (v66 >> 2)];
              int64_t v70 = v56 - v57;
              BOOL v115 = v56 == v57;
              CFAllocatorRef v56 = v58;
              if (!v115)
              {
                CFAllocatorRef v56 = &v58[v70 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v71 = v70 - 8;
                if (v71 < 0x38 || (uint64_t v72 = 8 * v69, (unint64_t)(&v67[8 * v69] - v57) < 0x20))
                {
                  long long v73 = &v67[8 * (v66 >> 2)];
                  uint64_t v74 = v57;
                  goto LABEL_97;
                }
                uint64_t v76 = (v71 >> 3) + 1;
                uint64_t v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
                long long v73 = &v58[v77];
                uint64_t v74 = &v57[v77];
                uint64_t v78 = (long long *)(v57 + 16);
                long long v79 = &v67[v72 + 16];
                uint64_t v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v81 = *v78;
                  *((_OWORD *)v79 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v78 - 1);
                  *(_OWORD *)long long v79 = v81;
                  v78 += 2;
                  v79 += 32;
                  v80 -= 4;
                }
                while (v80);
                if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_97:
                    uint64_t v75 = *(void *)v74;
                    v74 += 8;
                    *(void *)long long v73 = v75;
                    v73 += 8;
                  }
                  while (v73 != v56);
                }
              }
              uint64_t v55 = &v67[8 * v66];
              if (v52) {
                operator delete(v52);
              }
              uint64_t v52 = v68;
              goto LABEL_80;
            }
            uint64_t v60 = (v57 - v52) >> 3;
            if (v60 >= -1) {
              uint64_t v61 = v60 + 1;
            }
            else {
              uint64_t v61 = v60 + 2;
            }
            uint64_t v62 = v61 >> 1;
            unint64_t v63 = &v57[-8 * (v61 >> 1)];
            uint64_t v64 = v56;
            if (v56 != v57)
            {
              memmove(v63, v57, v56 - v57);
              uint64_t v64 = v57;
            }
            uint64_t v65 = -v62;
            uint64_t v55 = v56;
            CFAllocatorRef v56 = &v63[v56 - v57];
            uint64_t v58 = &v64[8 * v65];
          }
          else
          {
            uint64_t v58 = v57;
          }
LABEL_80:
          uint64_t v59 = *(void *)v8;
          v8 += 8;
          *(void *)CFAllocatorRef v56 = v59;
          v56 += 8;
          unint64_t v57 = v58;
          if (v8 == *(char **)(a1 + 16)) {
            goto LABEL_109;
          }
        }
      }
    }
    else
    {
      uint64_t v83 = (char *)operator new(8uLL);
      uint64_t v55 = v83 + 8;
      operator delete(v52);
      uint64_t v8 = *(char **)(a1 + 8);
      uint64_t v84 = *(char **)(a1 + 16);
      uint64_t v52 = v83;
      *(void *)uint64_t v83 = v54;
      CFAllocatorRef v56 = v83 + 8;
      if (v8 != v84) {
        goto LABEL_78;
      }
    }
    uint64_t v58 = v52;
LABEL_109:
    uint64_t v85 = *(char **)a1;
    *(void *)a1 = v52;
    *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v58;
    *(void *)(a1 + 16) = v56;
    *(void *)(a1 + 24) = v55;
    if (v56 - v58 == 8) {
      uint64_t v86 = 256;
    }
    else {
      uint64_t v86 = *(void *)(a1 + 32) + 512;
    }
    *(void *)(a1 + 32) = v86;
    if (v85) {
      operator delete(v85);
    }
  }
LABEL_114:
  unint64_t v87 = *(void *)(a1 + 32);
  uint64_t v88 = *(void *)(a1 + 8);
  uint64_t v89 = *(void *)(a1 + 16);
  uint64_t v90 = (char *)(v88 + 8 * (v87 >> 9));
  long long v91 = *(char **)v90;
  if (v12)
  {
    if (v89 == v88) {
      std::string::size_type v92 = 0;
    }
    else {
      std::string::size_type v92 = (char *)(*(void *)v90 + 8 * (*(void *)(a1 + 32) & 0x1FFLL));
    }
    uint64_t v93 = v92 - v91;
    uint64_t v94 = (v92 - v91) >> 3;
    if (v93 < 9) {
      v95 = (char *)(*(void *)&v90[-8 * ((unint64_t)(512 - v94) >> 9)] + 8 * (~(512 - (_WORD)v94) & 0x1FF));
    }
    else {
      v95 = (char *)(*(void *)&v90[((unint64_t)(v94 - 1) >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * ((v94 - 1) & 0x1FF));
    }
    if (v92 == a4) {
      a4 = v95;
    }
    *(void *)v95 = *(void *)v92;
    uint64_t v98 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v87 - 1;
    *(void *)(a1 + 40) = v98;
    if (v12 < 2) {
      goto LABEL_137;
    }
    uint64_t v99 = (uint64_t)&v92[-*(void *)v90];
    uint64_t v100 = v99 >> 3;
    if (v99 < -7)
    {
      uint64_t v101 = &v90[-8 * ((unint64_t)(510 - v100) >> 9)];
      uint64_t v102 = *(void *)v101;
      unint64_t v103 = *(void *)v101 + 8 * (~(510 - (_WORD)v100) & 0x1FF);
      unint64_t v104 = v100 + v12;
      if ((uint64_t)(v100 + v12) < 1)
      {
LABEL_132:
        uint64_t v105 = &v90[-8 * ((511 - v104) >> 9)];
        uint64_t v106 = *(void *)v105;
        uint64_t v107 = *(void *)v105 + 8 * (~(511 - (_WORD)v104) & 0x1FF);
        if (v107 == v103) {
          goto LABEL_137;
        }
LABEL_136:
        uint64_t v108 = ((v107 - v106) >> 3) + ((v105 - v101) << 6) - ((uint64_t)(v103 - v102) >> 3);
        if (v108 < 1) {
          goto LABEL_137;
        }
        while (1)
        {
          uint64_t v110 = *(void *)v101;
          uint64_t v111 = *(void *)v101 + 4096;
          uint64_t v112 = (uint64_t)(v111 - v103) >> 3;
          if (v112 >= v108) {
            uint64_t v113 = v108;
          }
          else {
            uint64_t v113 = (uint64_t)(v111 - v103) >> 3;
          }
          if (v112 <= v108) {
            unint64_t v114 = *(void *)v101 + 4096;
          }
          else {
            unint64_t v114 = v103 + 8 * v108;
          }
          if (v103 > (unint64_t)a4) {
            goto LABEL_154;
          }
          BOOL v115 = (unint64_t)a4 >= v114 || v103 == (void)v92;
          if (v115) {
            goto LABEL_154;
          }
          uint64_t v116 = ((uint64_t)&v92[-*(void *)v90] >> 3) - (((uint64_t)(v103 - v110) >> 3) + ((v101 - v90) << 6));
          if (!v116) {
            goto LABEL_154;
          }
          uint64_t v117 = v116 + ((uint64_t)&a4[-v110] >> 3);
          if (v117 >= 1) {
            break;
          }
          a4 = (char *)(*(void *)&v101[-8 * ((unint64_t)(511 - v117) >> 9)]
                      + 8 * (~(511 - (_WORD)v117) & 0x1FF));
          if (v103 != v114)
          {
LABEL_155:
            long long v119 = *(char **)v90;
            v90 += 8;
            long long v118 = v119;
            unint64_t v120 = (char *)v103;
            while (1)
            {
              uint64_t v121 = (v118 - v92 + 4096) >> 3;
              if ((uint64_t)(v114 - (void)v120) >> 3 >= v121) {
                uint64_t v122 = v121;
              }
              else {
                uint64_t v122 = (uint64_t)(v114 - (void)v120) >> 3;
              }
              if (v122) {
                memmove(v92, v120, 8 * v122);
              }
              v120 += 8 * v122;
              if (v120 == (char *)v114) {
                break;
              }
              unint64_t v123 = *(char **)v90;
              v90 += 8;
              long long v118 = v123;
              std::string::size_type v92 = v123;
            }
            v92 += 8 * v122;
            if ((char *)(*((void *)v90 - 1) + 4096) == v92) {
              std::string::size_type v92 = *(char **)v90;
            }
            else {
              v90 -= 8;
            }
          }
LABEL_166:
          if (v113)
          {
            uint64_t v124 = v113 + ((uint64_t)(v103 - *(void *)v101) >> 3);
            if (v124 < 1)
            {
              unint64_t v109 = 511 - v124;
              v101 -= 8 * (v109 >> 9);
              unint64_t v103 = *(void *)v101 + 8 * (~(_WORD)v109 & 0x1FF);
            }
            else
            {
              v101 += 8 * ((unint64_t)v124 >> 9);
              unint64_t v103 = *(void *)v101 + 8 * (v124 & 0x1FF);
            }
          }
          BOOL v36 = v108 <= v113;
          v108 -= v113;
          if (v36) {
            goto LABEL_137;
          }
        }
        a4 = (char *)(*(void *)&v101[((unint64_t)v117 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v117 & 0x1FF));
LABEL_154:
        if (v103 != v114) {
          goto LABEL_155;
        }
        goto LABEL_166;
      }
    }
    else
    {
      uint64_t v101 = &v90[8 * ((unint64_t)(v100 + 1) >> 9)];
      uint64_t v102 = *(void *)v101;
      unint64_t v103 = *(void *)v101 + 8 * ((v100 + 1) & 0x1FF);
      unint64_t v104 = v100 + v12;
      if ((uint64_t)(v100 + v12) < 1) {
        goto LABEL_132;
      }
    }
    uint64_t v105 = &v90[8 * (v104 >> 9)];
    uint64_t v106 = *(void *)v105;
    uint64_t v107 = *(void *)v105 + 8 * (v104 & 0x1FF);
    if (v107 == v103)
    {
LABEL_137:
      *(void *)std::string::size_type v92 = *(void *)a4;
      return;
    }
    goto LABEL_136;
  }
  if (v89 == v88) {
    uint64_t v96 = 0;
  }
  else {
    uint64_t v96 = *(void *)v90 + 8 * (*(void *)(a1 + 32) & 0x1FFLL);
  }
  if ((char *)v96 == v91) {
    uint64_t v96 = *((void *)v90 - 1) + 4096;
  }
  *(void *)(v96 - MEMORY[0x1A622BDE0]((char *)this + 8) = *(void *)a4;
  uint64_t v97 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v87 - 1;
  *(void *)(a1 + 40) = v97;
}

void sub_1A10FD7D8(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

const char *asString(int a1)
{
  if ((a1 - 1) > 9) {
    return "qmux";
  }
  else {
    return off_1E5A415A8[a1 - 1];
  }
}

uint64_t getMessageIdFromBuffer(unsigned __int16 *a1, unint64_t a2)
{
  if (a2 < 2) {
    return 0;
  }
  else {
    return *a1;
  }
}

uint64_t QMux::State::State(uint64_t a1, long long *a2, int a3, void *a4, int a5, char a6)
{
  *(void *)a1 = &unk_1EF43DC80;
  unint64_t v6 = (void *)(a1 + 8);
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = *((void *)a2 + 1);
  }
  unint64_t v9 = v8 + 17;
  memset(&v36, 170, sizeof(v36));
  if (v8 + 17 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 >= 0x17)
  {
    uint64_t v16 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v16 = v9 | 7;
    }
    uint64_t v17 = v16 + 1;
    uint64_t v18 = (char *)operator new(v16 + 1);
    v36.__r_.__value_.__l.__size_ = v8 + 17;
    v36.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    v18[16] = 39;
    *(_OWORD *)uint64_t v18 = *(_OWORD *)"ATCS.QMux.queue('";
    uint64_t v15 = v18 + 17;
  }
  else
  {
    v36.__r_.__value_.__r.__words[2] = 39;
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)"ATCS.QMux.queue('";
    uint64_t v15 = &v36.__r_.__value_.__s.__data_[17];
    if (!v8) {
      goto LABEL_15;
    }
  }
  if (v7 >= 0) {
    uint64_t v19 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v19 = *(const std::string::value_type **)a2;
  }
  memmove(v15, v19, v8);
LABEL_15:
  v15[v8] = 0;
  uint64_t v20 = std::string::append(&v36, "')", 2uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  int64_t v38 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (v38 >= 0) {
    uint64_t v22 = __p;
  }
  else {
    uint64_t v22 = (void **)__p[0];
  }
  uint64_t v23 = dispatch_queue_create((const char *)v22, 0);
  *unint64_t v6 = 0;
  v6[1] = 0;
  *(void *)(a1 + 24) = v23;
  if (v23)
  {
    unint64_t v24 = v23;
    dispatch_retain(v23);
    *(void *)(a1 + 32) = 0;
    dispatch_release(v24);
    if ((SHIBYTE(v38) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  *(void *)(a1 + 32) = 0;
  if (SHIBYTE(v38) < 0) {
LABEL_20:
  }
    operator delete(__p[0]);
LABEL_21:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v36.__r_.__value_.__l.__data_);
    *(void *)a1 = &unk_1EF43DB30;
    uint64_t v25 = (std::string *)(a1 + 40);
    if ((*((char *)a2 + 23) & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    *(void *)a1 = &unk_1EF43DB30;
    uint64_t v25 = (std::string *)(a1 + 40);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
LABEL_23:
      long long v26 = *a2;
      v25->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
      goto LABEL_28;
    }
  }
  std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_28:
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  Instance = ATCSLogger::getInstance((ATCSLogger *)v23);
  *(void *)(a1 + 80) = Instance;
  uint64_t v28 = operator new(0x20uLL);
  *uint64_t v28 = &unk_1EF43DD88;
  v28[1] = 0;
  v28[2] = 0;
  void v28[3] = Instance;
  *(void *)(a1 + 8MEMORY[0x1A622BDE0]((char *)this + 8) = v28;
  *(void *)(a1 + 96) = *a4;
  uint64_t v29 = a4[1];
  *(void *)(a1 + 104) = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 12MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16MEMORY[0x1A622BDE0]((char *)this + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = a5;
  *(void *)(a1 + 20MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 28MEMORY[0x1A622BDE0]((char *)this + 8) = a1 + 296;
  *(_WORD *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 314) = a6;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  if ((a3 - 1) > 9) {
    uint64_t v30 = "qmux";
  }
  else {
    uint64_t v30 = off_1E5A415A8[a3 - 1];
  }
  uint64_t v31 = (capabilities::radio *)ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 352), "com.apple.telephony.bb", v30);
  unint64_t v32 = (capabilities::radio *)capabilities::radio::supportsQMuxSendWindow(v31);
  *(unsigned char *)(a1 + 360) = (_BYTE)v32;
  *(_DWORD *)(a1 + 364) = capabilities::radio::QMuxPendingRequestLimitCount(v32);
  *(void *)(a1 + 36MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  ATCSTimer::timerBootstrap(0, v33);
  return a1;
}

void sub_1A10FDBD0()
{
}

void sub_1A10FDBF4()
{
}

void sub_1A10FDC04()
{
}

void sub_1A10FDC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1A10FDD1CLL);
}

void ctu::TrackedGroup::~TrackedGroup(ctu::TrackedGroup *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    unint64_t v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }
  if (*(void *)this) {
    dispatch_release(*(dispatch_object_t *)this);
  }
}

void QMux::State::~State(QMux::State *this)
{
  *(void *)this = &unk_1EF43DB30;
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = (void **)((char *)this + 40);
  unint64_t v4 = (char *)this + 40;
  if (*((char *)this + 63) < 0) {
    unint64_t v4 = (const char *)*v3;
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v2 + 24))(v2, 6, "[%s] Destroying QMux\n", v4);
  if (*((void *)this + 23))
  {
    unint64_t v9 = (char *)this + 40;
    if (*((char *)this + 63) < 0) {
      unint64_t v9 = (const char *)*v3;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] Warning! QMux destroyed while still attached to IPCDriver; attempting detach\n",
      v9);
    v32[1] = this;
    uint64_t v33 = 0;
    v32[0] = &v33;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_154;
    block[4] = (char *)this + 8;
    void block[5] = v32;
    int64_t v10 = *((void *)this + 3);
    if (*((void *)this + 4))
    {
      dispatch_async_and_wait(v10, block);
      uint64_t v12 = v33;
      if (!v33)
      {
LABEL_11:
        if (*((void *)this + 23)) {
          _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x142, "fDriver==NULL", "is not", "true", "QMux destroyed while still attached to IPCDriver", v11);
        }
        goto LABEL_13;
      }
    }
    else
    {
      dispatch_sync(v10, block);
      uint64_t v12 = v33;
      if (!v33) {
        goto LABEL_11;
      }
    }
    (*(void (**)(uint64_t, QMux::State *, char *))(*(void *)v12 + 48))(v12, this, (char *)this + 192);
    goto LABEL_11;
  }
LABEL_13:
  QMux::State::setMainState((uint64_t)this, 5, v5, v6, v7, v8);
  QMux::State::tearDown_sync(this);
  MEMORY[0x1A622BDE0]((char *)this + 352);
  unint64_t v13 = (void *)*((void *)this + 40);
  if (v13)
  {
    *((void *)this + 4qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v13;
    operator delete(v13);
  }
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((void **)this + 37));
  unint64_t v14 = *((void *)this + 35);
  if (v14) {
    dispatch_release(v14);
  }
  uint64_t v15 = *((void *)this + 32);
  if (v15)
  {
    uint64_t v16 = *((void *)this + 33);
    uint64_t v17 = (void *)*((void *)this + 32);
    if (v16 != v15)
    {
      do
      {
        uint64_t v18 = *(std::__shared_weak_count **)(v16 - 8);
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        v16 -= 16;
      }
      while (v16 != v15);
      uint64_t v17 = (void *)*((void *)this + 32);
    }
    *((void *)this + 33) = v15;
    operator delete(v17);
  }
  uint64_t v19 = *((void *)this + 31);
  if (v19) {
    dispatch_release(v19);
  }
  uint64_t v20 = *((void *)this + 30);
  if (v20)
  {
    dispatch_group_leave(v20);
    long long v21 = *((void *)this + 30);
    if (v21) {
      dispatch_release(v21);
    }
  }
  uint64_t v22 = *((void *)this + 29);
  if (v22)
  {
    dispatch_group_leave(v22);
    uint64_t v23 = *((void *)this + 29);
    if (v23) {
      dispatch_release(v23);
    }
  }
  unint64_t v24 = *((void *)this + 28);
  if (v24)
  {
    dispatch_group_leave(v24);
    uint64_t v25 = *((void *)this + 28);
    if (v25) {
      dispatch_release(v25);
    }
  }
  std::deque<QMuxQueueItem>::~deque[abi:ne180100]((uint64_t)this + 136);
  std::__tree<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::__map_value_compare<std::pair<qmi::ServiceType const,unsigned char const>,std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::less<std::pair<qmi::ServiceType const,unsigned char const>>,true>,std::allocator<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>>>::destroy(*((void **)this + 15));
  long long v26 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  unint64_t v27 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 9);
  if (!v28 || atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 63) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (*((char *)this + 63) < 0) {
LABEL_44:
  }
    operator delete(*v3);
LABEL_45:
  uint64_t v29 = *((void *)this + 4);
  if (v29) {
    dispatch_release(v29);
  }
  uint64_t v30 = *((void *)this + 3);
  if (v30) {
    dispatch_release(v30);
  }
  uint64_t v31 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
}

{
  void *v1;
  uint64_t vars8;

  QMux::State::~State(this);

  operator delete(v1);
}

void QMux::State::setDriverAndCookie(QMux::State *this, ATCSIPCDriver *a2, void *a3)
{
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  if (!a2)
  {
    uint64_t v7 = 0;
    size_t v8 = (QMux::State *)&v7;
    unint64_t v9 = (ATCSIPCDriver **)this;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v14 = 0x40000000;
    uint64_t v15 = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    uint64_t v16 = &__block_descriptor_tmp_154;
    uint64_t v17 = (char *)this + 8;
    uint64_t v18 = &v8;
    uint64_t v5 = *((void *)this + 3);
    if (*((void *)this + 4))
    {
      dispatch_async_and_wait(v5, &block);
      uint64_t v6 = v7;
      if (!v7) {
        return;
      }
    }
    else
    {
      dispatch_sync(v5, &block);
      uint64_t v6 = v7;
      if (!v7) {
        return;
      }
    }
    (*(void (**)(uint64_t, QMux::State *, char *))(*(void *)v6 + 48))(v6, this, (char *)this + 192);
    return;
  }
  size_t v8 = this;
  unint64_t v9 = &v12;
  int64_t v10 = &v11;
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v14 = 0x40000000;
  uint64_t v15 = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  uint64_t v16 = &__block_descriptor_tmp_153;
  uint64_t v17 = (char *)this + 8;
  uint64_t v18 = &v8;
  unint64_t v4 = *((void *)this + 3);
  if (*((void *)this + 4)) {
    dispatch_async_and_wait(v4, &block);
  }
  else {
    dispatch_sync(v4, &block);
  }
}

void QMux::State::setMainState(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v6 = *(_DWORD *)(a1 + 216);
  if (v6 != 5)
  {
    if (v6 == a2) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x241, "fMainState", "!=", "state", a6);
    }
    *(_DWORD *)(a1 + 216) = a2;
    if ((a2 - 1) > 4) {
      unint64_t v9 = "kStopped";
    }
    else {
      unint64_t v9 = off_1E5A41580[a2 - 1];
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), 6, "Setting state to %s", v9);
    switch(*(_DWORD *)(a1 + 216))
    {
      case 0:
        uint64_t v16 = *(NSObject **)(a1 + 224);
        *(void *)(a1 + 224) = 0;
        if (v16)
        {
          dispatch_group_leave(v16);
          dispatch_release(v16);
        }
        uint64_t v17 = *(NSObject **)(a1 + 232);
        *(void *)(a1 + 232) = 0;
        if (v17)
        {
          dispatch_group_leave(v17);
          dispatch_release(v17);
        }
        uint64_t v18 = *(NSObject **)(a1 + 248);
        *(void *)(a1 + 24MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
        if (v18) {
          dispatch_release(v18);
        }
        uint64_t v19 = *(void *)(a1 + 256);
        for (uint64_t i = *(void *)(a1 + 264); i != v19; i -= 16)
        {
          long long v21 = *(std::__shared_weak_count **)(i - 8);
          if (v21) {
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        goto LABEL_46;
      case 3:
        if (*(void *)(a1 + 224))
        {
          QMux::State::powerDown_sync((QMux::State *)a1, v10, v11, v12, v13, v14, v15);
        }
        return;
      case 4:
        uint64_t v22 = *(NSObject **)(a1 + 224);
        *(void *)(a1 + 224) = 0;
        if (v22)
        {
          dispatch_group_leave(v22);
          dispatch_release(v22);
        }
        uint64_t v23 = *(NSObject **)(a1 + 232);
        *(void *)(a1 + 232) = 0;
        if (v23)
        {
          dispatch_group_leave(v23);
          dispatch_release(v23);
        }
        unint64_t v24 = *(NSObject **)(a1 + 248);
        *(void *)(a1 + 24MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
        if (v24) {
          dispatch_release(v24);
        }
        uint64_t v25 = *(void *)(a1 + 256);
        for (uint64_t j = *(void *)(a1 + 264); j != v25; j -= 16)
        {
          unint64_t v27 = *(std::__shared_weak_count **)(j - 8);
          if (v27) {
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        *(void *)(a1 + 264) = v25;
        uint64_t v37 = *(NSObject **)(a1 + 280);
        if (!v37) {
          return;
        }
        dispatch_source_cancel(v37);
        std::string v36 = *(NSObject **)(a1 + 280);
        *(void *)(a1 + 280) = 0;
        if (!v36) {
          return;
        }
        break;
      case 5:
        uint64_t v28 = *(NSObject **)(a1 + 224);
        *(void *)(a1 + 224) = 0;
        if (v28)
        {
          dispatch_group_leave(v28);
          dispatch_release(v28);
        }
        uint64_t v29 = *(NSObject **)(a1 + 232);
        *(void *)(a1 + 232) = 0;
        if (v29)
        {
          dispatch_group_leave(v29);
          dispatch_release(v29);
        }
        uint64_t v30 = *(NSObject **)(a1 + 248);
        *(void *)(a1 + 24MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
        if (v30) {
          dispatch_release(v30);
        }
        uint64_t v19 = *(void *)(a1 + 256);
        for (uint64_t k = *(void *)(a1 + 264); k != v19; k -= 16)
        {
          unint64_t v32 = *(std::__shared_weak_count **)(k - 8);
          if (v32) {
            std::__shared_weak_count::__release_weak(v32);
          }
        }
LABEL_46:
        *(void *)(a1 + 264) = v19;
        uint64_t v33 = *(NSObject **)(a1 + 280);
        if (v33)
        {
          dispatch_source_cancel(v33);
          uint64_t v34 = *(NSObject **)(a1 + 280);
          *(void *)(a1 + 280) = 0;
          if (v34) {
            dispatch_release(v34);
          }
        }
        uint64_t v35 = *(NSObject **)(a1 + 240);
        *(void *)(a1 + 240) = 0;
        if (!v35) {
          return;
        }
        dispatch_group_leave(v35);
        std::string v36 = v35;
        break;
      default:
        return;
    }
    dispatch_release(v36);
  }
}

void QMux::State::tearDown_sync(QMux::State *this)
{
  QMux::State::clearQueues_sync(this);
  *((_WORD *)this + 156) = 0;
  atomic_store(0, (unsigned int *)this + 93);
  atomic_store(0, (unsigned int *)this + 92);
  uint64_t v2 = (char *)*((void *)this + 14);
  uint64_t v3 = (char *)this + 120;
  if (v2 != (char *)this + 120)
  {
    do
    {
      unint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 6);
      if (!v4) {
        goto LABEL_11;
      }
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      uint64_t v14 = v5;
      if (!v5) {
        goto LABEL_11;
      }
      int v6 = v5;
      uint64_t v7 = (unsigned char *)*((void *)v2 + 5);
      uint64_t v13 = v7;
      if (v7)
      {
        size_t v8 = (char *)this + 40;
        if (*((char *)this + 63) < 0) {
          size_t v8 = (const char *)*((void *)this + 5);
        }
        (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] Sending control indication to QMIClient(svcType=%d,clientId=%d) on sync\n", v8, v2[32], v2[33]);
        (*(void (**)(unsigned char *))(*(void *)v7 + 48))(v7);
        v7[33] = -1;
      }
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        unint64_t v9 = (char *)*((void *)v2 + 1);
        if (!v9)
        {
          do
          {
LABEL_15:
            uint64_t v10 = (char *)*((void *)v2 + 2);
            BOOL v11 = *(void *)v10 == (void)v2;
            uint64_t v2 = v10;
          }
          while (!v11);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_11:
        unint64_t v9 = (char *)*((void *)v2 + 1);
        if (!v9) {
          goto LABEL_15;
        }
      }
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = *(char **)v9;
      }
      while (v9);
LABEL_3:
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
  std::__tree<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::__map_value_compare<std::pair<qmi::ServiceType const,unsigned char const>,std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::less<std::pair<qmi::ServiceType const,unsigned char const>>,true>,std::allocator<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>>>::destroy(*((void **)this + 15));
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = v3;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 9);
  uint64_t v13 = (unsigned char *)*((void *)this + 8);
  uint64_t v14 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMux::State::notifyClientAdded_sync((uint64_t)this, &v13, 0);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A10FE828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10FE83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMux::State::create(long long *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, int a4@<W3>, char a5@<W4>, void *a6@<X8>)
{
  *a6 = 0xAAAAAAAAAAAAAAAALL;
  a6[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v12 = operator new(0x178uLL);
  uint64_t v13 = v12;
  uint64_t v14 = *a3;
  uint64_t v15 = (std::__shared_weak_count *)a3[1];
  v28[0] = v14;
  v28[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  QMux::State::State((uint64_t)v12, a1, a2, v28, a4, a5);
  *a6 = v13;
  uint64_t v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = &v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43DDD8;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v13;
  a6[1] = v16;
  uint64_t v18 = (std::__shared_weak_count *)*((void *)v13 + 2);
  if (!v18)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v13 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v13;
    *((void *)v13 + 2) = v16;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v18->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v13 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v13;
    *((void *)v13 + 2) = v16;
    std::__shared_weak_count::__release_weak(v18);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_8:
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_9:
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v20 = (void *)*a6;
  uint64_t v19 = a6[1];
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  long long v21 = (std::__shared_weak_count *)v20[2];
  if (!v21 || (uint64_t v22 = v20[1], (v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v24 = v23;
  uint64_t v25 = operator new(0x10uLL);
  *uint64_t v25 = v20;
  v25[1] = v19;
  long long v26 = v20[3];
  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v27 = operator new(0x18uLL);
  *unint64_t v27 = v25;
  v27[1] = v22;
  v27[2] = v24;
  dispatch_async_f(v26, v27, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0>(QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0,std::default_delete<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
}

void sub_1A10FEAD4()
{
}

void sub_1A10FEB04(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

void QMux::State::init_sync(QMux::State *this)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2 || (unint64_t v4 = std::__shared_weak_count::lock(v2), (v12 = v4) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v13 = 0;
  uint64_t v14 = std::__shared_weak_count::lock(v4);
  if (v14) {
    uint64_t v13 = v3;
  }
  v15[0] = (QMIControl *)0xAAAAAAAAAAAAAAAALL;
  v15[1] = (QMIControl *)0xAAAAAAAAAAAAAAAALL;
  int v6 = (QMIControl *)operator new(0xE0uLL);
  QMIControl::QMIControl(v6, (const QMux *)&v13);
  std::shared_ptr<QMIControl>::shared_ptr[abi:ne180100]<QMIControl,QMIControl::Deleter,void>(v15, (uint64_t)v6);
  QMIControl::init_sync(v15[0], (const QMux *)&v13);
  long long v7 = *(_OWORD *)v15;
  v15[0] = 0;
  v15[1] = 0;
  size_t v8 = (std::__shared_weak_count *)*((void *)this + 9);
  *((_OWORD *)this + 4) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  unint64_t v9 = (std::__shared_weak_count *)v15[1];
  if (v15[1] && !atomic_fetch_add((atomic_ullong *volatile)v15[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::__shared_weak_count::__release_weak(v5);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  BOOL v11 = (atomic_ullong *)*((void *)this + 9);
  v15[0] = *((QMIControl **)this + 8);
  v15[1] = (QMIControl *)v11;
  if (v11) {
    atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
  }
  QMux::State::notifyClientAdded_sync((uint64_t)this, v15, 0);
  if (v11)
  {
    if (!atomic_fetch_add(v11 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v11 + 16))(v11);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
    }
  }
}

void sub_1A10FEDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A10FEDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  QMux::~QMux((QMux *)&a11);
  std::__shared_weak_count::__release_weak(v13);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *QMux::QMux(void *a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    a1[1] = v5;
    if (v5) {
      *a1 = *a2;
    }
  }
  return a1;
}

{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;

  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    a1[1] = v5;
    if (v5) {
      *a1 = *a2;
    }
  }
  return a1;
}

void QMux::~QMux(QMux *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void QMux::State::notifyClientAdded_sync(uint64_t a1, void *a2, unsigned int a3)
{
  int v6 = (unsigned char *)*a2;
  v6[33] = a3;
  (*(void (**)(unsigned char *))(*(void *)v6 + 16))(v6);
  unsigned int v8 = *(unsigned __int8 *)(*a2 + 32);
  uint64_t v10 = (uint64_t **)(a1 + 120);
  unint64_t v9 = *(uint64_t **)(a1 + 120);
  if (!v9)
  {
    uint64_t v16 = (unsigned __int8 *)(a1 + 120);
    goto LABEL_56;
  }
  BOOL v11 = *(uint64_t ***)(a1 + 120);
  while (1)
  {
    unsigned int v12 = *((unsigned __int8 *)v11 + 32);
    if (v8 == v12)
    {
      unsigned int v13 = *((unsigned __int8 *)v11 + 33);
      BOOL v14 = v13 == a3;
      if (v13 > a3) {
        goto LABEL_5;
      }
      if (v13 >= a3) {
        char v15 = 1;
      }
      else {
        char v15 = -1;
      }
      if (v14) {
        char v15 = 0;
      }
    }
    else
    {
      if (v8 < v12) {
        goto LABEL_5;
      }
      char v15 = v12 >= v8 ? 1 : -1;
    }
    if ((v15 & 0x80) == 0) {
      break;
    }
    ++v11;
LABEL_5:
    BOOL v11 = (uint64_t **)*v11;
    if (!v11) {
      goto LABEL_37;
    }
  }
  uint64_t v17 = 1;
  do
  {
    unsigned int v18 = *((unsigned __int8 *)v9 + 32);
    if (v8 == v18)
    {
      unsigned int v19 = *((unsigned __int8 *)v9 + 33);
      BOOL v20 = v19 == a3;
      if (v19 > a3) {
        goto LABEL_22;
      }
      if (v19 >= a3) {
        char v21 = 1;
      }
      else {
        char v21 = -1;
      }
      if (v20) {
        char v21 = 0;
      }
    }
    else
    {
      if (v8 < v18) {
        goto LABEL_22;
      }
      if (v18 >= v8) {
        char v21 = 1;
      }
      else {
        char v21 = -1;
      }
    }
    if ((v21 & 0x80) == 0) {
      goto LABEL_36;
    }
    ++v9;
LABEL_22:
    unint64_t v9 = (uint64_t *)*v9;
  }
  while (v9);
  uint64_t v17 = 0;
LABEL_36:
  _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x1F8, "fClientMap.count(key)", "==", "0", (const char *)v17, 0);
  unint64_t v9 = *v10;
LABEL_37:
  uint64_t v16 = (unsigned __int8 *)(a1 + 120);
  if (v9)
  {
    while (1)
    {
      uint64_t v16 = (unsigned __int8 *)v9;
      unsigned int v22 = *((unsigned __int8 *)v9 + 32);
      if (v8 == v22)
      {
        unsigned int v23 = v16[33];
        BOOL v24 = v23 == a3;
        if (v23 > a3) {
          goto LABEL_39;
        }
        if (v23 >= a3) {
          char v25 = 1;
        }
        else {
          char v25 = -1;
        }
        if (v24) {
          char v25 = 0;
        }
        if ((v25 & 0x80) == 0) {
          goto LABEL_59;
        }
      }
      else
      {
        if (v8 < v22)
        {
LABEL_39:
          unint64_t v9 = *(uint64_t **)v16;
          uint64_t v10 = (uint64_t **)v16;
          if (!*(void *)v16) {
            break;
          }
          continue;
        }
        if (v22 >= v8) {
          char v26 = 1;
        }
        else {
          char v26 = -1;
        }
        if ((v26 & 0x80) == 0) {
          goto LABEL_59;
        }
      }
      unint64_t v9 = (uint64_t *)*((void *)v16 + 1);
      if (!v9)
      {
        uint64_t v10 = (uint64_t **)(v16 + 8);
        break;
      }
    }
  }
LABEL_56:
  unint64_t v27 = v16;
  uint64_t v16 = (unsigned __int8 *)operator new(0x38uLL);
  *((_WORD *)v16 + 16) = v8 | ((_WORD)a3 << 8);
  *((void *)v16 + 5) = 0;
  *((void *)v16 + 6) = 0;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)v16 + 2) = v27;
  std::__shared_weak_count *v10 = (uint64_t *)v16;
  uint64_t v28 = **(void **)(a1 + 112);
  uint64_t v29 = (uint64_t *)v16;
  if (v28)
  {
    *(void *)(a1 + 112) = v28;
    uint64_t v29 = *v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v29);
  ++*(void *)(a1 + 128);
LABEL_59:
  uint64_t v31 = *a2;
  uint64_t v30 = a2[1];
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v32 = (std::__shared_weak_count *)*((void *)v16 + 6);
  *((void *)v16 + 5) = v31;
  *((void *)v16 + 6) = v30;
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  if (*(_DWORD *)(a1 + 216) == 3 && *(void *)(a1 + 224))
  {
    if (!*(void *)(a1 + 232)) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x1FF, "fPowerDownClientsState", "is not", "true", v7);
    }
    uint64_t v33 = *(void (**)(void))(*(void *)*a2 + 88);
    v33();
  }
}

void QMux::State::join(NSObject **this)
{
  uint64_t v2 = dispatch_group_create();
  uint64_t v3 = v2;
  int v6 = (QMux::State *)this;
  dispatch_group_t group = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v3);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS2_4joinEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_tmp_148;
  block[4] = this + 1;
  void block[5] = &v6;
  unint64_t v4 = this[3];
  if (this[4])
  {
    dispatch_async_and_wait(v4, block);
    uint64_t v5 = group;
    if (!group) {
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_sync(v4, block);
    uint64_t v5 = group;
    if (!group) {
      goto LABEL_9;
    }
  }
  dispatch_group_leave(v5);
  if (group) {
    dispatch_release(group);
  }
LABEL_9:
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (v3) {
    dispatch_release(v3);
  }
}

void QMux::State::joinControl(NSObject **this)
{
  uint64_t v2 = dispatch_group_create();
  uint64_t v3 = v2;
  int v6 = (QMux::State *)this;
  dispatch_group_t group = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v3);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_11joinControlEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_tmp_150;
  block[4] = this + 1;
  void block[5] = &v6;
  unint64_t v4 = this[3];
  if (this[4])
  {
    dispatch_async_and_wait(v4, block);
    uint64_t v5 = group;
    if (!group) {
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_sync(v4, block);
    uint64_t v5 = group;
    if (!group) {
      goto LABEL_9;
    }
  }
  dispatch_group_leave(v5);
  if (group) {
    dispatch_release(group);
  }
LABEL_9:
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (v3) {
    dispatch_release(v3);
  }
}

void QMux::State::flush_sync(QMux::State *this, const group *a2)
{
  uint64_t v2 = (char *)*((void *)this + 14);
  uint64_t v3 = (char *)this + 120;
  if (v2 != (char *)this + 120)
  {
    do
    {
      uint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 6);
      if (!v5) {
        goto LABEL_9;
      }
      int v6 = std::__shared_weak_count::lock(v5);
      if (!v6) {
        goto LABEL_9;
      }
      long long v7 = v6;
      uint64_t v8 = *((void *)v2 + 5);
      if (v8) {
        (*(void (**)(uint64_t, char *))(*(void *)v8 + 80))(v8, a2->gr_name);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        unint64_t v9 = (char *)*((void *)v2 + 1);
        if (!v9)
        {
          do
          {
LABEL_13:
            uint64_t v10 = (char *)*((void *)v2 + 2);
            BOOL v11 = *(void *)v10 == (void)v2;
            uint64_t v2 = v10;
          }
          while (!v11);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_9:
        unint64_t v9 = (char *)*((void *)v2 + 1);
        if (!v9) {
          goto LABEL_13;
        }
      }
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = *(char **)v9;
      }
      while (v9);
LABEL_3:
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

void sub_1A10FF490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void QMux::State::clearQueues_sync(QMux::State *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = (char *)this + 40;
  if (*((char *)this + 63) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v2 + 24))(v2, 6, "[%s] Clearing all messages in the QMux send/pending queues\n", v3);
  unint64_t v4 = (void **)*((void *)this + 18);
  uint64_t v5 = (void **)*((void *)this + 19);
  if (v5 == v4)
  {
    *((void *)this + 22) = 0;
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v6 = *((void *)this + 21);
    long long v7 = &v4[v6 / 0xAA];
    unint64_t v8 = (unint64_t)*v7 + 24 * (v6 % 0xAA);
    unint64_t v9 = (unint64_t)v4[(*((void *)this + 22) + v6) / 0xAA] + 24 * ((*((void *)this + 22) + v6) % 0xAA);
    if (v8 != v9)
    {
      while (1)
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 16);
        if (v10)
        {
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        v8 += 24;
        if (v8 - (void)*v7 == 4080) {
          goto LABEL_10;
        }
LABEL_6:
        if (v8 == v9)
        {
          unint64_t v4 = (void **)*((void *)this + 18);
          uint64_t v5 = (void **)*((void *)this + 19);
          goto LABEL_14;
        }
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      v8 += 24;
      if (v8 - (void)*v7 != 4080) {
        goto LABEL_6;
      }
LABEL_10:
      unint64_t v11 = (unint64_t)v7[1];
      ++v7;
      unint64_t v8 = v11;
      goto LABEL_6;
    }
LABEL_14:
    *((void *)this + 22) = 0;
    unint64_t v12 = (char *)v5 - (char *)v4;
    if (v12 >= 0x11)
    {
      do
      {
        operator delete(*v4);
        uint64_t v13 = *((void *)this + 19);
        unint64_t v4 = (void **)(*((void *)this + 18) + 8);
        *((void *)this + 1MEMORY[0x1A622BDE0]((char *)this + 8) = v4;
        unint64_t v12 = v13 - (void)v4;
      }
      while (v12 > 0x10);
    }
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 85;
  }
  else
  {
    if (v12 >> 3 != 2) {
      return;
    }
    uint64_t v14 = 170;
  }
  *((void *)this + 2qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v14;
}

void QMux::State::add_sync(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 64);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIControl::add_sync(v2, &v5);
  unint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1A10FF728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void QMux::State::remove_sync(uint64_t a1, void *a2)
{
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  unsigned int v5 = *(unsigned __int8 *)(*a2 + 33);
  unsigned int v6 = *(unsigned __int8 *)(*a2 + 32);
  long long v7 = *(void **)(a1 + 64);
  uint64_t v93 = *a2;
  uint64_t v94 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIControl::remove_sync(v7, &v93);
  unint64_t v8 = v94;
  if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v5 == 255) {
      return;
    }
  }
  else if (v5 == 255)
  {
    return;
  }
  *(unsigned char *)(*a2 + 33) = -1;
  uint64_t v9 = *(void *)(a1 + 120);
  if (v9)
  {
    uint64_t v10 = a1 + 120;
    do
    {
      unsigned int v13 = *(unsigned __int8 *)(v9 + 32);
      BOOL v14 = v13 == v6;
      if (v13 >= v6) {
        char v15 = 1;
      }
      else {
        char v15 = -1;
      }
      if (v14)
      {
        unsigned int v16 = *(unsigned __int8 *)(v9 + 33);
        BOOL v17 = v16 == v5;
        char v15 = v16 >= v5 ? 1 : -1;
        if (v17) {
          char v15 = 0;
        }
      }
      BOOL v11 = (v15 & 0x80) == 0;
      if (v15 < 0) {
        unint64_t v12 = (uint64_t *)(v9 + 8);
      }
      else {
        unint64_t v12 = (uint64_t *)v9;
      }
      if (v11) {
        uint64_t v10 = v9;
      }
      uint64_t v9 = *v12;
    }
    while (*v12);
    if (v10 != a1 + 120)
    {
      unsigned int v18 = *(unsigned __int8 *)(v10 + 32);
      BOOL v19 = v6 == v18;
      if (v6 >= v18) {
        char v20 = 1;
      }
      else {
        char v20 = -1;
      }
      if (v19)
      {
        unsigned int v21 = *(unsigned __int8 *)(v10 + 33);
        BOOL v22 = v5 >= v21;
        BOOL v23 = v5 == v21;
        char v20 = -1;
        if (v22) {
          char v20 = 1;
        }
        if (v23) {
          char v20 = 0;
        }
      }
      if ((v20 & 0x80) == 0)
      {
        unint64_t v24 = *(void *)(a1 + 168);
        uint64_t v25 = *(void *)(a1 + 144);
        uint64_t v26 = *(void *)(a1 + 152);
        unint64_t v27 = (void *)(v25 + 8 * (v24 / 0xAA));
        if (v26 == v25)
        {
          int64_t v38 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = *(void *)(a1 + 176);
          unint64_t v33 = v30 + v24;
          uint64_t v35 = (uint64_t *)(v25 + 8 * ((v30 + v24) / 0xAA));
          char v36 = 1;
        }
        else
        {
          uint64_t v28 = *(unsigned __int8 **)(v25 + 8 * (v24 / 0xAA));
          uint64_t v29 = &v28[24 * (v24 % 0xAA)];
          uint64_t v30 = *(void *)(a1 + 176);
          unint64_t v31 = *(void *)(v25 + 8 * ((v30 + v24) / 0xAA)) + 24 * ((v30 + v24) % 0xAA);
          if (v29 != (unsigned __int8 *)v31)
          {
            if (*(_WORD *)(a1 + 312))
            {
              v29 += 24;
              if (v29 - v28 == 4080)
              {
                unint64_t v32 = (unsigned __int8 *)v27[1];
                ++v27;
                uint64_t v28 = v32;
                uint64_t v29 = v32;
              }
            }
          }
          if (v29 == (unsigned __int8 *)v31) {
            goto LABEL_43;
          }
          while (*v29 != v6 || v5 != v29[1])
          {
            v29 += 24;
            if (v29 - v28 == 4080)
            {
              uint64_t v45 = (unsigned __int8 *)v27[1];
              ++v27;
              uint64_t v28 = v45;
              uint64_t v29 = v45;
            }
            if (v29 == (unsigned __int8 *)v31) {
              goto LABEL_43;
            }
          }
          if (v29 == (unsigned __int8 *)v31)
          {
LABEL_43:
            uint64_t v29 = (unsigned __int8 *)(*(void *)(v25 + 8 * ((v30 + v24) / 0xAA)) + 24 * ((v30 + v24) % 0xAA));
          }
          else
          {
            CFAllocatorRef v56 = v29;
            for (i = (unsigned __int8 **)v27; ; uint64_t v28 = *i)
            {
              v56 += 24;
              if (v56 - v28 == 4080)
              {
                uint64_t v58 = i[1];
                ++i;
                CFAllocatorRef v56 = v58;
              }
              if (v56 == (unsigned __int8 *)v31) {
                break;
              }
              if (*v56 != v6 || v5 != v56[1])
              {
                *(_WORD *)uint64_t v29 = *(_WORD *)v56;
                uint64_t v60 = *((void *)v56 + 1);
                uint64_t v59 = *((void *)v56 + 2);
                if (v59) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v61 = (std::__shared_weak_count *)*((void *)v29 + 2);
                *((void *)v29 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v60;
                *((void *)v29 + 2) = v59;
                if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
                v29 += 24;
                if (&v29[-*v27] == (unsigned __int8 *)4080)
                {
                  uint64_t v62 = (unsigned __int8 *)v27[1];
                  ++v27;
                  uint64_t v29 = v62;
                }
              }
            }
            unint64_t v24 = *(void *)(a1 + 168);
            uint64_t v30 = *(void *)(a1 + 176);
            uint64_t v25 = *(void *)(a1 + 144);
            uint64_t v26 = *(void *)(a1 + 152);
          }
          unint64_t v33 = v30 + v24;
          unint64_t v34 = (v30 + v24) / 0xAA;
          uint64_t v35 = (uint64_t *)(v25 + 8 * v34);
          if (v26 == v25)
          {
            uint64_t v37 = 0;
            char v36 = 1;
            int64_t v38 = v29;
            if (v29)
            {
LABEL_46:
              uint64_t v39 = 170 * (v35 - v27)
                  - 0x5555555555555555 * ((v37 - *v35) >> 3)
                  + 0x5555555555555555 * ((uint64_t)&v38[-*v27] >> 3);
              unint64_t v40 = v24 / 0xAA;
              uint64_t v41 = (void *)(v25 + 8 * (v24 / 0xAA));
              if (v36) {
                goto LABEL_47;
              }
              goto LABEL_59;
            }
          }
          else
          {
            char v36 = 0;
            uint64_t v37 = *v35 + 24 * (v33 - 170 * v34);
            int64_t v38 = v29;
            if (v29 != (unsigned __int8 *)v37) {
              goto LABEL_46;
            }
          }
        }
        uint64_t v39 = 0;
        unint64_t v40 = v24 / 0xAA;
        uint64_t v41 = (void *)(v25 + 8 * (v24 / 0xAA));
        if (v36)
        {
LABEL_47:
          uint64_t v42 = 0;
          if (!v29) {
            goto LABEL_48;
          }
          goto LABEL_60;
        }
LABEL_59:
        uint64_t v42 = *v41 + 24 * (v24 - 170 * v40);
        if (v29 == (unsigned __int8 *)v42)
        {
LABEL_48:
          unint64_t v43 = 0;
          uint64_t v44 = v41;
          if (v39 < 1) {
            goto LABEL_127;
          }
LABEL_69:
          unint64_t v50 = v30 - v39;
          uint64_t v51 = v39 - 0x5555555555555555 * ((uint64_t)&v29[-*v44] >> 3);
          if (v43 > v50 >> 1)
          {
            if (v51 < 1)
            {
              unint64_t v63 = 169 - v51;
              uint64_t v52 = &v44[-(v63 / 0xAA)];
              uint64_t v53 = *v52 + 24 * (170 * (v63 / 0xAA) - v63) + 4056;
            }
            else
            {
              uint64_t v52 = &v44[v51 / 0xAAuLL];
              uint64_t v53 = *v52 + 24 * (v51 % 0xAAuLL);
            }
            if (v36) {
              uint64_t v64 = 0;
            }
            else {
              uint64_t v64 = *v35 + 24 * (v33 % 0xAA);
            }
            *(void *)&long long v65 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v65 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v95 = v65;
            long long v96 = v65;
            v66.n128_f64[0] = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,0>((uint64_t)&v95, v52, v53, v35, v64, (uint64_t)v44, (uint64_t)v29);
            uint64_t v67 = *((void *)&v96 + 1);
            uint64_t v69 = *(void *)(a1 + 144);
            uint64_t v68 = *(void *)(a1 + 152);
            if (v68 == v69)
            {
              unint64_t v71 = 0;
            }
            else
            {
              unint64_t v70 = *(void *)(a1 + 176) + *(void *)(a1 + 168);
              unint64_t v71 = *(void *)(v69 + 8 * (v70 / 0xAA)) + 24 * (v70 % 0xAA);
            }
            if (v71 == *((void *)&v96 + 1)) {
              goto LABEL_120;
            }
            long long v81 = (void *)v96;
            while (1)
            {
              uint64_t v82 = *(std::__shared_weak_count **)(v67 + 16);
              if (v82)
              {
                if (!atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                  break;
                }
              }
              v67 += 24;
              if (v67 - *v81 == 4080) {
                goto LABEL_116;
              }
LABEL_112:
              if (v67 == v71)
              {
                uint64_t v69 = *(void *)(a1 + 144);
                uint64_t v68 = *(void *)(a1 + 152);
LABEL_120:
                if (v68 == v69) {
                  uint64_t v84 = 0;
                }
                else {
                  uint64_t v84 = 170 * ((v68 - v69) >> 3) - 1;
                }
                uint64_t v85 = *(void *)(a1 + 168);
                uint64_t v86 = *(void *)(a1 + 176) - v39;
                *(void *)(a1 + 176) = v86;
                if ((unint64_t)(v84 - (v85 + v86)) >= 0x154)
                {
                  do
                  {
                    operator delete(*(void **)(v68 - 8));
                    uint64_t v68 = *(void *)(a1 + 152) - 8;
                    BOOL v11 = v68 == *(void *)(a1 + 144);
                    uint64_t v87 = 170 * ((v68 - *(void *)(a1 + 144)) >> 3) - 1;
                    *(void *)(a1 + 152) = v68;
                    if (v11) {
                      uint64_t v87 = 0;
                    }
                  }
                  while ((unint64_t)(v87 - (*(void *)(a1 + 176) + *(void *)(a1 + 168))) > 0x153);
                }
LABEL_127:
                uint64_t v88 = *(void **)(v10 + 8);
                if (v88)
                {
                  do
                  {
                    uint64_t v89 = v88;
                    uint64_t v88 = (void *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  uint64_t v90 = (void *)v10;
                  do
                  {
                    uint64_t v89 = (void *)v90[2];
                    BOOL v11 = *v89 == (void)v90;
                    uint64_t v90 = v89;
                  }
                  while (!v11);
                }
                if (*(void *)(a1 + 112) == v10) {
                  *(void *)(a1 + 112) = v89;
                }
                long long v91 = *(uint64_t **)(a1 + 120);
                --*(void *)(a1 + 128);
                std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v91, (uint64_t *)v10);
                std::string::size_type v92 = *(std::__shared_weak_count **)(v10 + 48);
                if (v92) {
                  std::__shared_weak_count::__release_weak(v92);
                }
                operator delete((void *)v10);
                return;
              }
            }
            ((void (*)(std::__shared_weak_count *, __n128))v82->__on_zero_shared)(v82, v66);
            std::__shared_weak_count::__release_weak(v82);
            v67 += 24;
            if (v67 - *v81 != 4080) {
              goto LABEL_112;
            }
LABEL_116:
            uint64_t v83 = v81[1];
            ++v81;
            uint64_t v67 = v83;
            goto LABEL_112;
          }
          if (v51 < 1)
          {
            unint64_t v72 = 169 - v51;
            uint64_t v54 = &v44[-(v72 / 0xAA)];
            uint64_t v55 = *v54 + 24 * (170 * (v72 / 0xAA) - v72) + 4056;
          }
          else
          {
            uint64_t v54 = &v44[v51 / 0xAAuLL];
            uint64_t v55 = *v54 + 24 * (v51 % 0xAAuLL);
          }
          *(void *)&long long v73 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v73 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v95 = v73;
          long long v96 = v73;
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,0>(&v95, v41, v42, v44, (uint64_t)v29, v54, v55);
          uint64_t v74 = *((void *)&v96 + 1);
          if (v42 == *((void *)&v96 + 1))
          {
LABEL_105:
            uint64_t v77 = *(void *)(a1 + 176) - v39;
            unint64_t v78 = *(void *)(a1 + 168) + v39;
            *(void *)(a1 + 16MEMORY[0x1A622BDE0]((char *)this + 8) = v78;
            *(void *)(a1 + 176) = v77;
            if (v78 >= 0x154)
            {
              long long v79 = *(void ***)(a1 + 144);
              do
              {
                operator delete(*v79);
                long long v79 = (void **)(*(void *)(a1 + 144) + 8);
                *(void *)(a1 + 144) = v79;
                unint64_t v80 = *(void *)(a1 + 168) - 170;
                *(void *)(a1 + 16MEMORY[0x1A622BDE0]((char *)this + 8) = v80;
              }
              while (v80 >= 0x154);
            }
            goto LABEL_127;
          }
          while (1)
          {
            uint64_t v75 = *(std::__shared_weak_count **)(v42 + 16);
            if (v75)
            {
              if (!atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                break;
              }
            }
            v42 += 24;
            if (v42 - *v41 == 4080) {
              goto LABEL_102;
            }
LABEL_98:
            if (v42 == v74) {
              goto LABEL_105;
            }
          }
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
          v42 += 24;
          if (v42 - *v41 != 4080) {
            goto LABEL_98;
          }
LABEL_102:
          uint64_t v76 = v41[1];
          ++v41;
          uint64_t v42 = v76;
          goto LABEL_98;
        }
LABEL_60:
        uint64_t v46 = 170 * (v27 - v41) - 0x5555555555555555 * ((uint64_t)&v38[-*v27] >> 3);
        uint64_t v47 = (v42 - *v41) >> 3;
        unint64_t v43 = v46 + 0x5555555555555555 * v47;
        if (v43)
        {
          uint64_t v48 = v43 - 0x5555555555555555 * v47;
          if (v48 < 1)
          {
            unint64_t v49 = 169 - v48;
            uint64_t v44 = &v41[-(v49 / 0xAA)];
            uint64_t v29 = (unsigned __int8 *)(*v44 + 24 * (170 * (v49 / 0xAA) - v49) + 4056);
            if (v39 < 1) {
              goto LABEL_127;
            }
          }
          else
          {
            uint64_t v44 = &v41[v48 / 0xAAuLL];
            uint64_t v29 = (unsigned __int8 *)(*v44 + 24 * (v48 % 0xAAuLL));
            if (v39 < 1) {
              goto LABEL_127;
            }
          }
        }
        else
        {
          uint64_t v29 = (unsigned __int8 *)v42;
          uint64_t v44 = v41;
          if (v39 < 1) {
            goto LABEL_127;
          }
        }
        goto LABEL_69;
      }
    }
  }
}

void sub_1A110004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void QMux::State::check_sync(QMux::State *this)
{
  uint64_t v1 = (char *)*((void *)this + 14);
  uint64_t v2 = (char *)this + 120;
  if (v1 != (char *)this + 120)
  {
    unint64_t v4 = (const char **)((char *)this + 40);
    while (1)
    {
      unsigned int v5 = (std::__shared_weak_count *)*((void *)v1 + 6);
      if (!v5) {
        break;
      }
      unsigned int v6 = std::__shared_weak_count::lock(v5);
      if (!v6 || !*((void *)v1 + 5)) {
        goto LABEL_13;
      }
      long long v7 = (char *)*((void *)v1 + 1);
      if (v7)
      {
        do
        {
          uint64_t v1 = v7;
          long long v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = v1;
          uint64_t v1 = (char *)*((void *)v1 + 2);
        }
        while (*(char **)v1 != v8);
      }
LABEL_30:
      if (v6)
      {
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (v1 == v2) {
        return;
      }
    }
    unsigned int v6 = 0;
LABEL_13:
    uint64_t v9 = (const char *)v4;
    if (*((char *)this + 63) < 0) {
      uint64_t v9 = *v4;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] QMIClient(svcType=%d,clientId=%d) is dead but still registered; recycling the id\n",
      v9,
      v1[32],
      v1[33]);
    QMIControl::releaseClientId_sync(*((void **)this + 8), v1[32], v1[33]);
    uint64_t v10 = (char *)*((void *)v1 + 1);
    BOOL v11 = v10;
    unint64_t v12 = v1;
    if (v10)
    {
      do
      {
        unsigned int v13 = v11;
        BOOL v11 = *(char **)v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        unsigned int v13 = (char *)*((void *)v12 + 2);
        BOOL v14 = *(void *)v13 == (void)v12;
        unint64_t v12 = v13;
      }
      while (!v14);
    }
    char v15 = v1;
    if (v10)
    {
      do
      {
        unsigned int v16 = v10;
        uint64_t v10 = *(char **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        unsigned int v16 = (char *)*((void *)v15 + 2);
        BOOL v14 = *(void *)v16 == (void)v15;
        char v15 = v16;
      }
      while (!v14);
    }
    if (*((char **)this + 14) == v1) {
      *((void *)this + 14) = v16;
    }
    BOOL v17 = (uint64_t *)*((void *)this + 15);
    --*((void *)this + 16);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v17, (uint64_t *)v1);
    unsigned int v18 = (std::__shared_weak_count *)*((void *)v1 + 6);
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    operator delete(v1);
    uint64_t v1 = v13;
    goto LABEL_30;
  }
}

void sub_1A1100268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t QMux::State::notifyClientAddFailure_sync(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 24))(*a2, a3);
}

void QMux::State::revokeClient_sync(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6)
  {
    uint64_t v7 = a1 + 120;
    do
    {
      unsigned int v10 = *(unsigned __int8 *)(v6 + 32);
      BOOL v11 = v10 == a2;
      if (v10 >= a2) {
        char v12 = 1;
      }
      else {
        char v12 = -1;
      }
      if (v11)
      {
        unsigned int v13 = *(unsigned __int8 *)(v6 + 33);
        BOOL v14 = v13 == a3;
        char v12 = v13 >= a3 ? 1 : -1;
        if (v14) {
          char v12 = 0;
        }
      }
      BOOL v8 = (v12 & 0x80) == 0;
      if (v12 < 0) {
        uint64_t v9 = (uint64_t *)(v6 + 8);
      }
      else {
        uint64_t v9 = (uint64_t *)v6;
      }
      if (v8) {
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v7 != a1 + 120)
    {
      unsigned int v15 = *(unsigned __int8 *)(v7 + 32);
      BOOL v16 = v15 == a2;
      if (v15 <= a2) {
        char v17 = 1;
      }
      else {
        char v17 = -1;
      }
      if (v16)
      {
        unsigned int v18 = *(unsigned __int8 *)(v7 + 33);
        BOOL v19 = v18 == a3;
        BOOL v20 = v18 > a3;
        char v17 = -1;
        if (!v20) {
          char v17 = 1;
        }
        if (v19) {
          char v17 = 0;
        }
      }
      if ((v17 & 0x80) == 0)
      {
        unsigned int v21 = *(std::__shared_weak_count **)(v7 + 48);
        if (v21)
        {
          BOOL v22 = std::__shared_weak_count::lock(v21);
          if (v22)
          {
            BOOL v23 = *(unsigned char **)(v7 + 40);
            if (v23)
            {
              unint64_t v24 = (const char *)(a1 + 40);
              if (*(char *)(a1 + 63) < 0) {
                unint64_t v24 = *(const char **)v24;
              }
              (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), 6, "[%s] Sending client id revocation to QMIClient(svcType=%d,clientId=%d)\n", v24, a2, a3);
              (*(void (**)(unsigned char *))(*(void *)v23 + 48))(v23);
              v23[33] = -1;
LABEL_45:
              uint64_t v28 = *(void **)(v7 + 8);
              if (v28)
              {
                do
                {
                  uint64_t v29 = v28;
                  uint64_t v28 = (void *)*v28;
                }
                while (v28);
              }
              else
              {
                uint64_t v30 = (void *)v7;
                do
                {
                  uint64_t v29 = (void *)v30[2];
                  BOOL v8 = *v29 == (void)v30;
                  uint64_t v30 = v29;
                }
                while (!v8);
              }
              if (*(void *)(a1 + 112) == v7) {
                *(void *)(a1 + 112) = v29;
              }
              unint64_t v31 = *(uint64_t **)(a1 + 120);
              --*(void *)(a1 + 128);
              std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v31, (uint64_t *)v7);
              unint64_t v32 = *(std::__shared_weak_count **)(v7 + 48);
              if (v32) {
                std::__shared_weak_count::__release_weak(v32);
              }
              operator delete((void *)v7);
              if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
              return;
            }
          }
        }
        else
        {
          BOOL v22 = 0;
        }
        unint64_t v27 = (const char *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          unint64_t v27 = *(const char **)v27;
        }
        (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), 6, "[%s] Could not revoke client id, because QMIClient(svcType=%d,clientId=%d) was attached but marked dead\n", v27, a2, a3);
        goto LABEL_45;
      }
    }
  }
  uint64_t v25 = *(void *)(a1 + 80);
  uint64_t v26 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v26 = *(const char **)v26;
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v25 + 24))(v25, 6, "[%s] Could not revoke client id, because QMIClient(svcType=%d,clientId=%d) isnt attached\n", v26, a2, a3);
}

void sub_1A110059C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMux::State::notifyControlMessageError_sync(uint64_t a1, int a2)
{
  if (!a2) {
    return;
  }
  uint64_t v2 = (QMuxFlowControl *)(a1 + 360);
  if (*(unsigned char *)(a1 + 360)
    && (a2 == 65537 || a2 == -559087616)
    && !atomic_fetch_add((atomic_uint *volatile)(a1 + 372), 0xFFFFFFFF))
  {
    atomic_store(0, (unsigned int *)(a1 + 372));
    uint64_t v3 = *(void *)(a1 + 80);
    unint64_t v4 = (const char *)(a1 + 40);
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = *(void *)(a1 + 80);
  unint64_t v4 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
LABEL_7:
  }
    unint64_t v4 = *(const char **)v4;
LABEL_8:
  unsigned int v5 = (const char *)qmi::asString();
  QMuxFlowControl::toString(v2, __p);
  if (v8 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v3 + 24))(v3, 6, "[%s] Control message error: %s%s\n", v4, v5, (const char *)v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1A11006D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMuxFlowControl::toString@<X0>(QMuxFlowControl *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  void v24[7] = v4;
  v24[8] = v4;
  v24[5] = v4;
  v24[6] = v4;
  v24[3] = v4;
  v24[4] = v4;
  v24[1] = v4;
  v24[2] = v4;
  long long v23 = v4;
  v24[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v22 = v4;
  long long v19 = v4;
  *(_OWORD *)__src = v4;
  long long v17 = v4;
  long long v18 = v4;
  long long v16 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v16);
  if (*(unsigned char *)this)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" |flow-control: tx-limit=", 25);
    unsigned int v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", pending-rx=", 13);
    atomic_load((unsigned int *)this + 3);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", pending-tx=", 13);
    atomic_load((unsigned int *)this + 2);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"|", 1);
  }
  if ((BYTE8(v23) & 0x10) != 0)
  {
    uint64_t v9 = (unsigned char *)v23;
    if ((void *)v23 < __src[1])
    {
      *(void **)&long long v23 = __src[1];
      uint64_t v9 = __src[1];
    }
    unsigned int v10 = __src[0];
    size_t v8 = v9 - (char *)__src[0];
    if ((unint64_t)(v9 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_20;
    }
  }
  else
  {
    if ((BYTE8(v23) & 8) == 0)
    {
      size_t v8 = 0;
      a2[23] = 0;
      goto LABEL_16;
    }
    unsigned int v10 = (const void *)*((void *)&v18 + 1);
    size_t v8 = *((void *)&v19 + 1) - *((void *)&v18 + 1);
    if (*((void *)&v19 + 1) - *((void *)&v18 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_20:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    unsigned int v13 = operator new(v11 + 1);
    *((void *)a2 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v8;
    *((void *)a2 + 2) = v12 | 0x8000000000000000;
    *(void *)a2 = v13;
    a2 = v13;
    goto LABEL_15;
  }
  a2[23] = v8;
  if (v8) {
LABEL_15:
  }
    memmove(a2, v10, v8);
LABEL_16:
  a2[v8] = 0;
  *(void *)&long long v16 = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v16 + *(void *)(v16 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&long long v17 = v14;
  *((void *)&v17 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A622C370](v24);
}

void sub_1A11009B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void QMux::State::stop_sync(QMux::State *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
  {
    uint64_t v3 = *(const char **)v3;
    unsigned int v4 = *((_DWORD *)this + 54) - 1;
    if (v4 <= 4) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v4 = *((_DWORD *)this + 54) - 1;
    if (v4 <= 4)
    {
LABEL_3:
      unsigned int v5 = off_1E5A41580[v4];
      goto LABEL_6;
    }
  }
  unsigned int v5 = "kStopped";
LABEL_6:
  QMux::State::powerStateString_sync((uint64_t)this, (char *)__p);
  if (v12 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v2 + 24))(v2, 6, "[%s] Stopping QMux (mainState=%s, powerState=%s)\n", v3, v5, (const char *)v6);
  if ((v12 & 0x80000000) == 0)
  {
    if ((*((_DWORD *)this + 54) - 1) >= 4) {
      return;
    }
LABEL_13:
    QMux::State::setMainState((uint64_t)this, 0, v7, v8, v9, v10);
    QMux::State::tearDown_sync(this);
    return;
  }
  operator delete(__p[0]);
  if ((*((_DWORD *)this + 54) - 1) < 4) {
    goto LABEL_13;
  }
}

void sub_1A1100B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *QMux::State::stateString_sync(QMux::State *this)
{
  unsigned int v1 = *((_DWORD *)this + 54) - 1;
  if (v1 > 4) {
    return "kStopped";
  }
  else {
    return off_1E5A41580[v1];
  }
}

uint64_t QMux::State::powerStateString_sync@<X0>(uint64_t this@<X0>, char *a2@<X8>)
{
  uint64_t v2 = a2;
  if (!*(void *)(this + 224))
  {
    if (!*(void *)(this + 240))
    {
      a2[23] = 6;
      strcpy(a2, "Stable");
      return this;
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v31 = v8;
    long long v32 = v8;
    long long v29 = v8;
    long long v30 = v8;
    long long v27 = v8;
    long long v28 = v8;
    long long v25 = v8;
    long long v26 = v8;
    long long v23 = v8;
    long long v24 = v8;
    *(_OWORD *)std::string __p = v8;
    long long v22 = v8;
    long long v19 = v8;
    long long v20 = v8;
    long long v17 = v8;
    long long v18 = v8;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"PoweringUp(", 11);
    *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + MEMORY[0x1A622BDE0]((char *)this + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 8;
    unsigned int v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
    if ((BYTE8(v23) & 0x10) != 0)
    {
      uint64_t v14 = v23;
      if ((unint64_t)v23 < *((void *)&v20 + 1))
      {
        *(void *)&long long v23 = *((void *)&v20 + 1);
        uint64_t v14 = *((void *)&v20 + 1);
      }
      char v12 = (const void *)v20;
      size_t v11 = v14 - v20;
      if ((unint64_t)(v14 - v20) > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_32;
      }
    }
    else
    {
      if ((BYTE8(v23) & 8) == 0) {
        goto LABEL_8;
      }
      char v12 = (const void *)*((void *)&v18 + 1);
      size_t v11 = *((void *)&v19 + 1) - *((void *)&v18 + 1);
      if (*((void *)&v19 + 1) - *((void *)&v18 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_32:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v11 >= 0x17)
    {
      uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v13 = v11 | 7;
      }
      goto LABEL_26;
    }
LABEL_22:
    v2[23] = v11;
    if (!v11) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v31 = v3;
  long long v32 = v3;
  long long v29 = v3;
  long long v30 = v3;
  long long v27 = v3;
  long long v28 = v3;
  long long v25 = v3;
  long long v26 = v3;
  long long v23 = v3;
  long long v24 = v3;
  *(_OWORD *)std::string __p = v3;
  long long v22 = v3;
  long long v19 = v3;
  long long v20 = v3;
  long long v17 = v3;
  long long v18 = v3;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"PoweringDown(", 13);
  *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + MEMORY[0x1A622BDE0]((char *)this + 8) = *(_DWORD *)((unsigned char *)v4 + *(void *)(*v4 - 24) + 8) & 0xFFFFFFB5 | 8;
  unsigned int v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)")", 1);
  if ((BYTE8(v23) & 0x10) != 0)
  {
    uint64_t v7 = v23;
    if ((unint64_t)v23 < *((void *)&v20 + 1))
    {
      *(void *)&long long v23 = *((void *)&v20 + 1);
      uint64_t v7 = *((void *)&v20 + 1);
    }
    uint64_t v6 = (const void **)&v20;
LABEL_12:
    char v12 = *v6;
    size_t v11 = v7 - (void)*v6;
    if (v11 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v11 >= 0x17)
    {
      uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v13 = v11 | 7;
      }
LABEL_26:
      uint64_t v15 = v13 + 1;
      long long v16 = (char *)operator new(v13 + 1);
      *((void *)v2 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v11;
      *((void *)v2 + 2) = v15 | 0x8000000000000000;
      *(void *)uint64_t v2 = v16;
      uint64_t v2 = v16;
LABEL_27:
      memmove(v2, v12, v11);
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  if ((BYTE8(v23) & 8) != 0)
  {
    uint64_t v6 = (const void **)&v18 + 1;
    uint64_t v7 = *((void *)&v19 + 1);
    goto LABEL_12;
  }
LABEL_8:
  size_t v11 = 0;
  v2[23] = 0;
LABEL_28:
  v2[v11] = 0;
  *(void *)&long long v17 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v17 + *(void *)(v17 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v17 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A622C370](&v24);
}

void sub_1A1100F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A1100F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void QMux::State::clearPowerDownWatchdog_sync(QMux::State *this)
{
  uint64_t v2 = *((void *)this + 31);
  *((void *)this + 3qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *((void *)this + 32);
  for (uint64_t i = *((void *)this + 33); i != v3; i -= 16)
  {
    unsigned int v5 = *(std::__shared_weak_count **)(i - 8);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *((void *)this + 33) = v3;
  uint64_t v6 = *((void *)this + 35);
  if (v6)
  {
    dispatch_source_cancel(v6);
    uint64_t v7 = *((void *)this + 35);
    *((void *)this + 35) = 0;
    if (v7)
    {
      dispatch_release(v7);
    }
  }
}

void QMux::State::powerDown_sync(QMux::State *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  if (!*((void *)this + 28)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x575, "fPowerDownState", "is not", "true", a6);
  }
  uint64_t v8 = *((void *)this + 40);
  if (v8 != *((void *)this + 41))
  {
    *((void *)this + 4qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v8;
    *((void *)this + 43) = 0;
  }
  unsigned int v9 = *((_DWORD *)this + 54);
  if (v9 <= 5)
  {
    if (((1 << v9) & 0x31) != 0)
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x584, "false", "is not", "true", "Can never reach here!", a7);
      return;
    }
    if (((1 << v9) & 6) != 0)
    {
      unsigned int v10 = (char *)this + 40;
      if (*((char *)this + 63) < 0) {
        unsigned int v10 = *(const char **)v10;
      }
      size_t v11 = "kStopped";
      if (v9 == 1) {
        size_t v11 = "kSync";
      }
      if (v9 == 2) {
        char v12 = "kInit";
      }
      else {
        char v12 = v11;
      }
      (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] Entering power mode %d; must wait until QMux is running (mainState=%s)\n",
        v10,
        1,
        v12);
      return;
    }
  }
  uint64_t v13 = (const char **)((char *)this + 40);
  uint64_t v14 = (char *)this + 40;
  if (*((char *)this + 63) < 0) {
    uint64_t v14 = *v13;
  }
  (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] Entering power mode %d; signalling all clients\n",
    v14,
    1);
  uint64_t v15 = *((void *)this + 10);
  long long v16 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
  {
    long long v16 = *v13;
    unsigned int v17 = *((_DWORD *)this + 54) - 1;
    if (v17 <= 4) {
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v17 = *((_DWORD *)this + 54) - 1;
    if (v17 <= 4)
    {
LABEL_23:
      long long v18 = off_1E5A41580[v17];
      goto LABEL_26;
    }
  }
  long long v18 = "kStopped";
LABEL_26:
  QMux::State::powerStateString_sync((uint64_t)this, (char *)&__p);
  if (SHIBYTE(v46) >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v15 + 24))(v15, 6, "[%s] fMainState=%s fPowerState=%s\n", v16, v18, p_p);
  if (SHIBYTE(v46) < 0) {
    operator delete(__p);
  }
  long long v20 = *((void *)this + 28);
  if (v20) {
    dispatch_retain(*((dispatch_object_t *)this + 28));
  }
  unsigned int v21 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v21 || (v43 = (void *)*((void *)this + 1), (long long v22 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v23 = v22;
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
  }
  long long v24 = dispatch_group_create();
  long long v25 = v24;
  if (v24)
  {
    dispatch_retain(v24);
    dispatch_group_enter(v25);
  }
  long long v26 = *((void *)this + 29);
  *((void *)this + 29) = v25;
  if (v26)
  {
    dispatch_group_leave(v26);
    dispatch_release(v26);
  }
  if (v25) {
    dispatch_release(v25);
  }
  QMux::State::startPowerDownWatchdog_sync(this);
  long long v27 = (QMux::State *)*((void *)this + 14);
  if (v27 != (QMux::State *)((char *)this + 120))
  {
    do
    {
      long long v28 = (char *)this + 40;
      if (*((char *)this + 63) < 0) {
        long long v28 = *v13;
      }
      (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] EXTRA:     -- signal QMIClient(svc=%d client=%d) to power down\n", v28, *((unsigned __int8 *)v27 + 32), *((unsigned __int8 *)v27 + 33));
      long long v29 = (std::__shared_weak_count *)*((void *)v27 + 6);
      if (!v29 || (long long v30 = std::__shared_weak_count::lock(v29), (v49 = v30) == 0))
      {
LABEL_55:
        unint64_t v34 = (QMux::State *)*((void *)v27 + 1);
        if (!v34) {
          goto LABEL_59;
        }
        goto LABEL_56;
      }
      long long v31 = v30;
      long long v32 = (const qmi::QMuxClientIface *)*((void *)v27 + 5);
      uint64_t v48 = v32;
      if (v32)
      {
        if (*((unsigned char *)v27 + 32))
        {
          std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
          QMux::State::getClientPowerDownSession_sync(this, v32, (NSObject **)&__p);
          unint64_t v33 = __p;
          (*(void (**)(const qmi::QMuxClientIface *, void *, uint64_t))(*(void *)v32 + 88))(v32, __p, 1);
          if (!v33) {
            goto LABEL_54;
          }
LABEL_53:
          dispatch_group_leave(v33);
          dispatch_release(v33);
          goto LABEL_54;
        }
        uint64_t v37 = dispatch_group_create();
        unint64_t v33 = v37;
        if (v37)
        {
          dispatch_retain(v37);
          dispatch_group_enter(v33);
          dispatch_release(v33);
        }
        (*(void (**)(const qmi::QMuxClientIface *, NSObject *, uint64_t))(*(void *)v32 + 88))(v32, v33, 1);
        std::string __p = v43;
        uint64_t v45 = v23;
        atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v46 = v20;
        if (v20) {
          dispatch_retain(v20);
        }
        int64_t v38 = *((void *)this + 3);
        uint64_t v39 = operator new(0x18uLL);
        *uint64_t v39 = v43;
        v39[1] = v23;
        v39[2] = v20;
        dispatch_group_notify_f(v33, v38, v39, (dispatch_function_t)dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
        if (v33) {
          goto LABEL_53;
        }
      }
LABEL_54:
      if (atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_55;
      }
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      unint64_t v34 = (QMux::State *)*((void *)v27 + 1);
      if (!v34)
      {
        do
        {
LABEL_59:
          uint64_t v35 = (QMux::State *)*((void *)v27 + 2);
          BOOL v36 = *(void *)v35 == (void)v27;
          long long v27 = v35;
        }
        while (!v36);
        goto LABEL_45;
      }
      do
      {
LABEL_56:
        uint64_t v35 = v34;
        unint64_t v34 = *(QMux::State **)v34;
      }
      while (v34);
LABEL_45:
      long long v27 = v35;
    }
    while (v35 != (QMux::State *)((char *)this + 120));
  }
  std::string __p = v43;
  uint64_t v45 = v23;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v46 = v20;
  if (v20) {
    dispatch_retain(v20);
  }
  uint64_t v47 = this;
  unint64_t v40 = *((void *)this + 29);
  uint64_t v41 = *((void *)this + 3);
  uint64_t v42 = operator new(0x20uLL);
  void *v42 = v43;
  v42[1] = v23;
  v42[2] = v20;
  v42[3] = this;
  dispatch_group_notify_f(v40, v41, v42, (dispatch_function_t)dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_1>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_1 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v23);
  if (v20) {
    dispatch_release(v20);
  }
}

void sub_1A11015F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  QMux::State::powerUp_sync(void)::$_0::~$_0((uint64_t)&__p);
  std::__shared_weak_count::__release_weak(v21);
  if (v20) {
    dispatch_release(v20);
  }
  _Unwind_Resume(a1);
}

void QMux::State::start_sync(QMux::State *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  int v7 = *((_DWORD *)this + 54);
  if (v7 == 5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x298, "false", "is not", "true", "Should never start() a QMux that is being destroyed!", a7);
  }
  else
  {
    if (v7 != 1)
    {
      if (v7) {
        return;
      }
      QMux::State::setMainState((uint64_t)this, 1, a3, a4, a5, a6);
    }
    unsigned int v9 = (QMIControl *)*((void *)this + 8);
    QMIControl::sendSync_sync(v9);
  }
}

void QMux::State::restart_sync(QMIControl **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  switch(*((_DWORD *)this + 54))
  {
    case 0:
      goto LABEL_5;
    case 1:
      goto LABEL_6;
    case 2:
    case 3:
    case 4:
      QMux::State::stop_sync((QMux::State *)this);
      int v8 = *((_DWORD *)this + 54);
      if (v8 == 5)
      {
        unsigned int v10 = "Should never start() a QMux that is being destroyed!";
        uint64_t v11 = 664;
LABEL_12:
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)v11, "false", "is not", "true", v10, a7);
      }
      else
      {
        if (v8 != 1)
        {
          if (v8) {
            return;
          }
LABEL_5:
          QMux::State::setMainState((uint64_t)this, 1, a3, a4, a5, a6);
        }
LABEL_6:
        unsigned int v9 = this[8];
        QMIControl::sendSync_sync(v9);
      }
      return;
    case 5:
      unsigned int v10 = "Should never restart() a QMux that is being destroyed!";
      uint64_t v11 = 687;
      goto LABEL_12;
    default:
      return;
  }
}

void QMux::State::notifySyncSuccess_sync(QMux::State *this)
{
  uint64_t v2 = (const char *)*((unsigned int *)this + 54);
  if (v2 != 1)
  {
    if (v2 == 5) {
      return;
    }
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x2BA, "fMainState", "==", "kSync", v2, (const void *)1);
  }
  uint64_t v3 = (char *)this + 40;
  if (*((char *)this + 63) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] QMux in sync with baseband. Starting clients.\n", v3);
  QMux::State::setMainState((uint64_t)this, 2, v4, v5, v6, v7);
  int v8 = dispatch_group_create();
  QMIControl::start_sync(*((QMIControl **)this + 8), *((unsigned char *)this + 314), v8);
  uint64_t v10 = *((void *)this + 1);
  unsigned int v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v9 || (uint64_t v11 = std::__shared_weak_count::lock(v9)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v12 = v11;
  uint64_t v13 = *((void *)this + 3);
  uint64_t v14 = operator new(0x10uLL);
  void *v14 = v10;
  v14[1] = v12;
  dispatch_group_notify_f(v8, v13, v14, (dispatch_function_t)dispatch::detail::group_notify<QMux::State::notifySyncSuccess_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::notifySyncSuccess_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (v8)
  {
    dispatch_release(v8);
  }
}

void sub_1A11019D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v3) {
    dispatch_release(v3);
  }
  _Unwind_Resume(a1);
}

void QMux::State::notifySyncFailure_sync(QMux::State *this)
{
  uint64_t v2 = (const char *)*((unsigned int *)this + 54);
  if (v2 != 1)
  {
    if (v2 == 5) {
      return;
    }
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x2D2, "fMainState", "==", "kSync", v2, (const void *)1);
  }
  uint64_t v3 = (QMIControl *)*((void *)this + 8);

  QMIControl::sendSync_sync(v3);
}

void QMux::State::dumpState_sync(QMux::State *this)
{
  uint64_t v2 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
  {
    uint64_t v2 = *(const char **)v2;
    unsigned int v3 = *((_DWORD *)this + 54) - 1;
    if (v3 <= 4) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v3 = *((_DWORD *)this + 54) - 1;
    if (v3 <= 4)
    {
LABEL_3:
      uint64_t v4 = off_1E5A41580[v3];
      goto LABEL_6;
    }
  }
  uint64_t v4 = "kStopped";
LABEL_6:
  uint64_t v5 = *((void *)this + 10);
  QMux::State::powerStateString_sync((uint64_t)this, (char *)v13);
  int v6 = v14;
  int v7 = (void **)v13[0];
  uint64_t v8 = *((void *)this + 16);
  QMuxFlowControl::toString((QMux::State *)((char *)this + 360), __p);
  if (v6 >= 0) {
    unsigned int v9 = v13;
  }
  else {
    unsigned int v9 = v7;
  }
  if (v12 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v5 + 24))(v5, 6, "[%s] QMux mainState=%s, powerState=%s, client count=%d%s\n", v2, v4, (const char *)v9, v8, (const char *)v10);
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_16:
    operator delete(v13[0]);
    goto LABEL_14;
  }
  if (v14 < 0) {
    goto LABEL_16;
  }
LABEL_14:
  QMux::State::dumpClientSummaryState_sync((uint64_t)this);
  QMux::State::dumpClientState_sync(this);
  QMux::State::dumpPowerDownState_sync(this);
}

void sub_1A1101BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t QMux::State::dumpClientSummaryState_sync(uint64_t this)
{
  unsigned int v1 = *(void **)(this + 112);
  uint64_t v2 = (void *)(this + 120);
  if (v1 != (void *)(this + 120))
  {
    uint64_t v3 = this;
    long long v26 = (const char **)(this + 40);
    uint64_t v24 = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v25 = *MEMORY[0x1E4FBA418];
    do
    {
      int v4 = *((unsigned __int8 *)v1 + 32);
      unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v5 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
      v37[7] = v5;
      v37[8] = v5;
      v37[5] = v5;
      v37[6] = v5;
      v37[3] = v5;
      v37[4] = v5;
      v37[1] = v5;
      v37[2] = v5;
      v37[0] = v5;
      long long v35 = v5;
      long long v36 = v5;
      long long v33 = v5;
      *(_OWORD *)std::string __p = v5;
      long long v31 = v5;
      long long v32 = v5;
      long long v30 = v5;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
      std::ostream::operator<<();
      int v6 = (void *)v1[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v1[2];
          BOOL v8 = *v7 == (void)v1;
          unsigned int v1 = v7;
        }
        while (!v8);
      }
      unsigned int v1 = v2;
      if (v7 == v2)
      {
LABEL_20:
        uint64_t v11 = (const char *)v26;
        if ((*(char *)(v3 + 63) & 0x80000000) == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        do
        {
          if (v4 != *((unsigned __int8 *)v7 + 32))
          {
            unsigned int v1 = v7;
            goto LABEL_20;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)",", 1);
          std::ostream::operator<<();
          unsigned int v9 = (void *)v7[1];
          if (v9)
          {
            do
            {
              uint64_t v10 = v9;
              unsigned int v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v10 = (void *)v7[2];
              BOOL v8 = *v10 == (void)v7;
              int v7 = v10;
            }
            while (!v8);
          }
          int v7 = v10;
        }
        while (v10 != v2);
        unsigned int v1 = v2;
        uint64_t v11 = (const char *)v26;
        if ((*(char *)(v3 + 63) & 0x80000000) == 0)
        {
LABEL_21:
          uint64_t v12 = *(void *)(v3 + 80);
          uint64_t v13 = qmi::asShortString();
          char v14 = BYTE8(v36);
          if ((BYTE8(v36) & 0x10) != 0) {
            goto LABEL_26;
          }
          goto LABEL_22;
        }
      }
      uint64_t v11 = *v26;
      uint64_t v12 = *(void *)(v3 + 80);
      uint64_t v13 = qmi::asShortString();
      char v14 = BYTE8(v36);
      if ((BYTE8(v36) & 0x10) != 0)
      {
LABEL_26:
        uint64_t v17 = v36;
        long long v18 = (const void **)&v33;
        if ((unint64_t)v36 < *((void *)&v33 + 1))
        {
          *(void *)&long long v36 = *((void *)&v33 + 1);
          uint64_t v17 = *((void *)&v33 + 1);
          long long v18 = (const void **)&v33;
        }
LABEL_29:
        long long v19 = *v18;
        size_t v15 = v17 - (void)*v18;
        if (v15 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        long long v27 = v13;
        if (v15 >= 0x17)
        {
          uint64_t v20 = v3;
          uint64_t v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17) {
            uint64_t v21 = v15 | 7;
          }
          uint64_t v22 = v21 + 1;
          long long v16 = (void **)operator new(v21 + 1);
          __dst[1] = (void *)v15;
          int64_t v29 = v22 | 0x8000000000000000;
          __dst[0] = v16;
          uint64_t v3 = v20;
        }
        else
        {
          HIBYTE(v29) = v17 - *(unsigned char *)v18;
          long long v16 = __dst;
          if (!v15) {
            goto LABEL_37;
          }
        }
        memmove(v16, v19, v15);
LABEL_37:
        uint64_t v13 = v27;
        goto LABEL_38;
      }
LABEL_22:
      if ((v14 & 8) != 0)
      {
        uint64_t v17 = *((void *)&v32 + 1);
        long long v18 = (const void **)&v31 + 1;
        goto LABEL_29;
      }
      size_t v15 = 0;
      HIBYTE(v29) = 0;
      long long v16 = __dst;
LABEL_38:
      *((unsigned char *)v16 + v15) = 0;
      long long v23 = (const char *)__dst;
      if (v29 < 0) {
        long long v23 = (const char *)__dst[0];
      }
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v12 + 24))(v12, 6, "[%s]     svc=%d (%s) registered ids={%s}\n", v11, v4, v13, v23);
      if (SHIBYTE(v29) < 0) {
        operator delete(__dst[0]);
      }
      *(void *)&long long v30 = v25;
      *(void *)((char *)&v30 + *(void *)(v25 - 24)) = v24;
      *((void *)&v30 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v35) < 0) {
        operator delete(__p[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      this = MEMORY[0x1A622C370](v37);
    }
    while (v1 != v2);
  }
  return this;
}

void sub_1A1102014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1102028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A110203C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void QMux::State::dumpClientState_sync(QMux::State *this)
{
  unsigned int v1 = (char *)*((void *)this + 14);
  uint64_t v2 = (char *)this + 120;
  if (v1 != (char *)this + 120)
  {
    do
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 6);
      if (!v3) {
        goto LABEL_9;
      }
      int v4 = std::__shared_weak_count::lock(v3);
      if (!v4) {
        goto LABEL_9;
      }
      long long v5 = v4;
      uint64_t v6 = *((void *)v1 + 5);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 112))(v6);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        int v7 = (char *)*((void *)v1 + 1);
        if (!v7)
        {
          do
          {
LABEL_13:
            BOOL v8 = (char *)*((void *)v1 + 2);
            BOOL v9 = *(void *)v8 == (void)v1;
            unsigned int v1 = v8;
          }
          while (!v9);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_9:
        int v7 = (char *)*((void *)v1 + 1);
        if (!v7) {
          goto LABEL_13;
        }
      }
      do
      {
        BOOL v8 = v7;
        int v7 = *(char **)v7;
      }
      while (v7);
LABEL_3:
      unsigned int v1 = v8;
    }
    while (v8 != v2);
  }
}

void sub_1A1102194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void QMux::State::dumpPowerDownState_sync(QMux::State *this)
{
  uint64_t v2 = (char *)*((void *)this + 32);
  uint64_t v3 = (char *)*((void *)this + 33);
  if (v2 == v3) {
    goto LABEL_27;
  }
  uint64_t v4 = 0;
  long long v5 = (char *)*((void *)this + 32);
  do
  {
    uint64_t v6 = *((void *)v5 + 1);
    if (v6 && *(void *)(v6 + 8) != -1) {
      ++v4;
    }
    v5 += 16;
  }
  while (v5 != v3);
  if (!v4)
  {
LABEL_27:
    uint64_t v15 = *((void *)this + 10);
    long long v16 = (char *)this + 40;
    if (*((char *)this + 63) < 0) {
      long long v16 = *(const char **)v16;
    }
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v15 + 24))(v15, 6, "[%s]     power down tags: %zu clients; all complete\n",
      v16,
      (v3 - v2) >> 4);
  }
  else
  {
    memset(&v19, 0, sizeof(v19));
    do
    {
      int v7 = (std::__shared_weak_count *)*((void *)v2 + 1);
      if (v7)
      {
        BOOL v8 = std::__shared_weak_count::lock(v7);
        uint64_t v21 = v8;
        if (v8)
        {
          BOOL v9 = v8;
          uint64_t v10 = *(void *)v2;
          uint64_t v20 = v10;
          if (v10)
          {
            std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
            if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v19.__r_.__value_.__l.__size_;
            }
            if (size) {
              std::string::push_back(&v19, 44);
            }
            int v12 = *(char *)(v10 + 23);
            if (v12 >= 0) {
              uint64_t v13 = (const std::string::value_type *)v10;
            }
            else {
              uint64_t v13 = *(const std::string::value_type **)v10;
            }
            if (v12 >= 0) {
              std::string::size_type v14 = *(unsigned __int8 *)(v10 + 23);
            }
            else {
              std::string::size_type v14 = *(void *)(v10 + 8);
            }
            std::string::append(&v19, v13, v14);
          }
          if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      v2 += 16;
    }
    while (v2 != v3);
    uint64_t v17 = (char *)this + 40;
    if (*((char *)this + 63) < 0) {
      uint64_t v17 = *(const char **)v17;
    }
    long long v18 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v18 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s]     power down tags: %zu clients; remaining={%s}\n",
      v17,
      (uint64_t)(*((void *)this + 33) - *((void *)this + 32)) >> 4,
      (const char *)v18);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1A11023C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMux::State::getDebugName(QMux::State *this)
{
  return (uint64_t)this + 40;
}

uint64_t QMux::State::getPrivateData(QMux::State *this)
{
  return *((void *)this + 24);
}

void QMux::State::invokeReset(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v3 = (std::__shared_weak_count *)a1[2];
    if (!v3) {
      goto LABEL_14;
    }
  }
  else
  {
    std::string __p = *(std::string *)a2;
    uint64_t v3 = (std::__shared_weak_count *)a1[2];
    if (!v3) {
LABEL_14:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = a1[1];
  long long v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_14;
  }
  uint64_t v6 = v5;
  int v7 = operator new(0x20uLL);
  void *v7 = a1;
  BOOL v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v7[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  BOOL v9 = a1[3];
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = v7;
  v10[1] = v4;
  v10[2] = v6;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::State::invokeReset(std::string)::$_0>(QMux::State::invokeReset(std::string)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::State::invokeReset(std::string)::$_0,std::default_delete<QMux::State::invokeReset(std::string)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void QMux::State::invokeReset_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 104);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    uint64_t v44 = v5;
    if (v5)
    {
      uint64_t v43 = *(void *)(a1 + 96);
      if (v43)
      {
        memset(&v42, 170, sizeof(v42));
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v42 = *(std::string *)a2;
        }
        std::string::size_type v14 = *(uint64_t **)(a1 + 256);
        uint64_t v15 = *(uint64_t **)(a1 + 264);
        if (v14 != v15)
        {
          uint64_t v16 = 0;
          uint64_t v17 = *(uint64_t **)(a1 + 256);
          do
          {
            uint64_t v18 = v17[1];
            if (v18 && *(void *)(v18 + 8) != -1) {
              ++v16;
            }
            v17 += 2;
          }
          while (v17 != v15);
          if (v16)
          {
            while (1)
            {
              std::string v19 = (std::__shared_weak_count *)v14[1];
              if (v19)
              {
                uint64_t v20 = std::__shared_weak_count::lock(v19);
                uint64_t v46 = v20;
                if (v20) {
                  break;
                }
              }
LABEL_25:
              v14 += 2;
              if (v14 == v15) {
                goto LABEL_55;
              }
            }
            uint64_t v45 = *v14;
            uint64_t v21 = (const void **)v45;
            if (!v45)
            {
              long long v26 = v20;
LABEL_53:
              if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
              goto LABEL_25;
            }
            int v22 = *(char *)(v45 + 23);
            if (v22 >= 0) {
              size_t v23 = *(unsigned __int8 *)(v45 + 23);
            }
            else {
              size_t v23 = *(void *)(v45 + 8);
            }
            unint64_t v24 = v23 + 3;
            memset(v47, 170, 24);
            if (v23 + 3 >= 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v24 >= 0x17)
            {
              uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v24 | 7) != 0x17) {
                uint64_t v27 = v24 | 7;
              }
              uint64_t v28 = v27 + 1;
              int64_t v29 = (char *)operator new(v27 + 1);
              v47[1] = (void *)(v23 + 3);
              v47[2] = (void *)(v28 | 0x8000000000000000);
              v47[0] = v29;
              uint64_t v25 = v29 + 3;
              *(_WORD *)int64_t v29 = 11552;
              v29[2] = 32;
            }
            else
            {
              v47[1] = 0;
              v47[2] = 0;
              v47[0] = (void *)2108704;
              HIBYTE(v47[2]) = v23 + 3;
              uint64_t v25 = (char *)v47 + 3;
              if (!v23) {
                goto LABEL_44;
              }
            }
            if (v22 >= 0) {
              long long v30 = v21;
            }
            else {
              long long v30 = *v21;
            }
            memmove(v25, v30, v23);
LABEL_44:
            v25[v23] = 0;
            if (SHIBYTE(v47[2]) >= 0) {
              long long v31 = (const std::string::value_type *)v47;
            }
            else {
              long long v31 = (const std::string::value_type *)v47[0];
            }
            if (SHIBYTE(v47[2]) >= 0) {
              std::string::size_type v32 = HIBYTE(v47[2]);
            }
            else {
              std::string::size_type v32 = (std::string::size_type)v47[1];
            }
            std::string::append(&v42, v31, v32);
            if (SHIBYTE(v47[2]) < 0) {
              operator delete(v47[0]);
            }
            long long v26 = v46;
            if (!v46) {
              goto LABEL_25;
            }
            goto LABEL_53;
          }
        }
LABEL_55:
        long long v33 = (const char *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          long long v33 = *(const char **)v33;
        }
        unint64_t v34 = &v42;
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v34 = (std::string *)v42.__r_.__value_.__r.__words[0];
        }
        (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), 6, "[%s] Triggering Reset with reason %s\n", v33, (const char *)v34);
        long long v35 = *(std::__shared_weak_count **)(a1 + 16);
        v47[0] = *(void **)(a1 + 8);
        if (!v35 || (v47[1] = std::__shared_weak_count::lock(v35)) == 0) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 1174405120;
        block[2] = ___ZN4QMux5State16invokeReset_syncERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
        block[3] = &__block_descriptor_tmp_90_0;
        block[4] = v43;
        unint64_t v40 = v44;
        if (v44) {
          atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v42;
        }
        global_queue = dispatch_get_global_queue(2, 0);
        dispatch_async(global_queue, block);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v37 = v40;
        if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
        unint64_t v38 = (std::__shared_weak_count *)v47[1];
        if (v47[1] && !atomic_fetch_add((atomic_ullong *volatile)v47[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v42.__r_.__value_.__l.__data_);
          long long v5 = v44;
          if (!v44) {
            return;
          }
        }
        else
        {
          long long v5 = v44;
          if (!v44) {
            return;
          }
        }
        goto LABEL_13;
      }
    }
  }
  else
  {
    long long v5 = 0;
  }
  uint64_t v6 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v6 = *(const char **)v6;
  }
  if (*(char *)(a2 + 23) >= 0) {
    int v7 = (const char *)a2;
  }
  else {
    int v7 = *(const char **)a2;
  }
  (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), 6, "[%s] No reset invoker available; resetting QMux for reason=%s\n",
    v6,
    v7);
  QMux::State::restart_sync((QMIControl **)a1, v8, v9, v10, v11, v12, v13);
  if (v5)
  {
LABEL_13:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1A1102A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v28);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v29 - 112);
  if (a26 < 0)
  {
    operator delete(__p);
    std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void QMux::State::handleBroadcastMessage_sync(uint64_t a1, uint64_t a2, const void *a3, size_t a4, unsigned __int16 *a5, unint64_t a6)
{
  size_t v7 = a4;
  if (a6 < 2) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = *a5;
  }
  sLogBinaryToOsLog(*(capabilities::abs **)(a1 + 352), *(_DWORD *)(a1 + 200), 2u, *(unsigned __int8 *)(a2 + 5), v10, 0, (uint64_t)a3, a4);
  uint64_t v11 = (const char *)*(unsigned int *)(a2 + 8);
  if (v11 != 2) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x45E, "header.msgType", "==", "qmi::QMuxHeader::IND", v11, (const void *)2);
  }
  uint64_t v13 = (void *)(a1 + 120);
  uint64_t v12 = *(void *)(a1 + 120);
  if (v12)
  {
    unsigned int v14 = *(unsigned __int8 *)(a2 + 5);
    uint64_t v15 = (void *)(a1 + 120);
    do
    {
      unsigned int v18 = *(unsigned __int8 *)(v12 + 32);
      BOOL v19 = v18 == v14;
      if (v18 >= v14) {
        unint64_t v20 = 1;
      }
      else {
        unint64_t v20 = 255;
      }
      if (v19) {
        unint64_t v20 = *(unsigned char *)(v12 + 33) != 0;
      }
      BOOL v16 = v20 >= 0x80;
      if (v20 >= 0x80) {
        uint64_t v17 = (uint64_t *)(v12 + 8);
      }
      else {
        uint64_t v17 = (uint64_t *)v12;
      }
      if (!v16) {
        uint64_t v15 = (void *)v12;
      }
      uint64_t v12 = *v17;
    }
    while (*v17);
    if (v15 != v13)
    {
      uint64_t v21 = (void **)(a1 + 320);
      if (a3) {
        BOOL v22 = v7 == 0;
      }
      else {
        BOOL v22 = 1;
      }
      int v23 = !v22;
      int v39 = v23;
      do
      {
        if (*((unsigned __int8 *)v15 + 32) != *(unsigned __int8 *)(a2 + 5)) {
          return;
        }
        unint64_t v24 = (std::__shared_weak_count *)v15[6];
        if (!v24) {
          goto LABEL_43;
        }
        uint64_t v25 = std::__shared_weak_count::lock(v24);
        if (!v25) {
          goto LABEL_43;
        }
        long long v26 = v25;
        uint64_t v27 = v15[5];
        if (v27)
        {
          uint64_t v28 = (const char *)(a1 + 40);
          if (*(char *)(a1 + 63) < 0) {
            uint64_t v28 = *(const char **)(a1 + 40);
          }
          (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), 6, "[%s] handleReadData: Broadcast IND for QMI client (svc=%d client=%d msgid=0x%x)\n", v28, *(unsigned __int8 *)(a2 + 5), *((unsigned __int8 *)v15 + 33), v10);
          (*(void (**)(uint64_t, unsigned __int16 *, unint64_t))(*(void *)v27 + 40))(v27, a5, a6);
          if (*(void *)(a1 + 320) == *(void *)(a1 + 328)
            && QMIControl::getPowerModeForMsg_sync(*(void *)(a1 + 64), *(unsigned __int8 *)(a2 + 5), v10) == 1)
          {
            uint64_t v29 = mach_absolute_time();
            if (v39)
            {
              if ((v7 & 0x8000000000000000) != 0) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v30 = v29;
              long long v31 = (char *)operator new(v7);
              size_t v32 = v7;
              long long v33 = v31;
              size_t v38 = v32;
              memcpy(v31, a3, v32);
              unint64_t v34 = *v21;
              if (*v21)
              {
                *(void *)(a1 + 32MEMORY[0x1A622BDE0]((char *)this + 8) = v34;
                operator delete(v34);
                *uint64_t v21 = 0;
                *(void *)(a1 + 32MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
                *(void *)(a1 + 336) = 0;
              }
              long long v35 = &v33[v38];
              *(void *)(a1 + 320) = v33;
              *(void *)(a1 + 32MEMORY[0x1A622BDE0]((char *)this + 8) = &v33[v38];
              size_t v7 = v38;
              *(void *)(a1 + 336) = v35;
              *(void *)(a1 + 344) = v30;
            }
          }
        }
        if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          long long v36 = (void *)v15[1];
          if (!v36)
          {
            do
            {
LABEL_47:
              uint64_t v37 = (void *)v15[2];
              BOOL v19 = *v37 == (void)v15;
              uint64_t v15 = v37;
            }
            while (!v19);
            goto LABEL_28;
          }
        }
        else
        {
LABEL_43:
          long long v36 = (void *)v15[1];
          if (!v36) {
            goto LABEL_47;
          }
        }
        do
        {
          uint64_t v37 = v36;
          long long v36 = (void *)*v36;
        }
        while (v36);
LABEL_28:
        uint64_t v15 = v37;
      }
      while (v37 != v13);
    }
  }
}

void sub_1A1102E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
    std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void QMux::getQMIWakeReason(QMux *this@<X0>, const char *a2@<X5>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *(void *)this;
  if (!*(void *)this)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x472, "fState", "is not", "true", a2);
    uint64_t v5 = *(void *)this;
  }
  size_t v7 = this;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  void v8[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS1_16getQMIWakeReasonEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  v8[3] = &__block_descriptor_tmp_161;
  v8[4] = v5 + 8;
  void v8[5] = &v7;
  uint64_t v9 = v8;
  uint64_t v6 = *(NSObject **)(v5 + 24);
  if (*(void *)(v5 + 32))
  {
    *a3 = 0uLL;
    a3[1] = 0uLL;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v11 = 0x40000000;
    uint64_t v12 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerF13QMIWakeReasonvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v13 = &__block_descriptor_tmp_163;
    unsigned int v14 = a3;
    uint64_t v15 = &v9;
    dispatch_async_and_wait(v6, &block);
  }
  else
  {
    *a3 = 0uLL;
    a3[1] = 0uLL;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v11 = 0x40000000;
    uint64_t v12 = ___ZN8dispatch9sync_implIRU13block_pointerF13QMIWakeReasonvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v13 = &__block_descriptor_tmp_162;
    unsigned int v14 = a3;
    uint64_t v15 = &v9;
    dispatch_sync(v6, &block);
  }
}

void *QMux::State::getQMIWakeReason@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = (unsigned char *)this[40];
  uint64_t v4 = (unsigned char *)this[41];
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    size_t v7 = (char *)operator new(v4 - v5);
    *a2 = v7;
    uint64_t v8 = &v7[v6];
    a2[2] = &v7[v6];
    this = memcpy(v7, v5, v6);
    a2[1] = v8;
  }
  a2[3] = v2[43];
  return this;
}

void sub_1A110340C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMux::State::getWriteData_sync(QMux::State *this, unsigned __int8 *a2, unsigned int a3)
{
  if (*((_DWORD *)this + 54) == 5 || (uint64_t result = QMux::State::getWriteDataInternal_sync(this, a2, a3), !result))
  {
    uint64_t result = *((void *)this + 23);
    if (result)
    {
      (*(void (**)(uint64_t, QMux::State *, void))(*(void *)result + 64))(result, this, *((void *)this + 26));
      return 0;
    }
  }
  return result;
}

uint64_t QMuxQueueItem::serialize(QMuxQueueItem *this, void *__dst, unsigned int a3, unsigned int a4)
{
  LOWORD(v4) = 0;
  if (a4)
  {
    uint64_t v5 = **((void **)this + 1);
    unint64_t v6 = *(void *)(*((void *)this + 1) + 8) - v5;
    BOOL v7 = v6 > a3;
    unint64_t v8 = v6 - a3;
    if (v7)
    {
      if (v8 >= a4) {
        size_t v4 = a4;
      }
      else {
        size_t v4 = v8;
      }
      memmove(__dst, (const void *)(v5 + a3), v4);
    }
  }
  return (unsigned __int16)v4;
}

uint64_t QMuxQueueItem::getLength(QMuxQueueItem *this)
{
  return (unsigned __int16)(*(_WORD *)(*((void *)this + 1) + 8) - **((_WORD **)this + 1));
}

void QMux::State::dumpSystemLog(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 104);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    uint64_t v15 = v5;
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 96);
      uint64_t v14 = v7;
      if (!v7) {
        goto LABEL_18;
      }
      memset(&v13, 170, sizeof(v13));
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v13 = *(std::string *)a2;
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 1174405120;
      block[2] = ___ZN4QMux5State13dumpSystemLogENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_86_0;
      block[4] = v7;
      uint64_t v11 = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v13;
      }
      global_queue = dispatch_get_global_queue(2, 0);
      dispatch_async(global_queue, block);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v9 = v11;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      unint64_t v6 = v15;
      if (v15)
      {
LABEL_18:
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_1A1103700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v24);
  if (a24 < 0)
  {
    operator delete(__p);
    std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v25 - 48);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v25 - 48);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4QMux5State13dumpSystemLogENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (void *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 24))(v2, *v3);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 24))(v2, v3);
  }
}

void __copy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrI16ATCSResetInvokerEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v2 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 48);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
}

void sub_1A1103810(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrI16ATCSResetInvokerEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    std::string::size_type v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2) {
      return;
    }
  }
  else
  {
    std::string::size_type v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2) {
      return;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t ___ZN4QMux5State16invokeReset_syncERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (void *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v2 + 16))(v2, *v3, 1);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v2 + 16))(v2, v3, 1);
  }
}

BOOL QMux::State::isRunning_sync(QMux::State *this)
{
  return *((_DWORD *)this + 54) == 3;
}

BOOL QMux::State::isPoweredDown_sync(QMux::State *this)
{
  return *((_DWORD *)this + 54) == 4;
}

void QMux::State::enterPowerMode_sync(QMux::State *this, dispatch_object_t object, char *a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  int v7 = (int)a3;
  switch(*((_DWORD *)this + 54))
  {
    case 0:
      uint64_t v20 = *((void *)this + 10);
      uint64_t v21 = (char *)this + 40;
      if (*((char *)this + 63) < 0) {
        uint64_t v21 = *(const char **)v21;
      }
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v20 + 24))(v20, 6, "[%s] enterPowerMode(%d) ignored (QMux is %s)\n", v21, a3, "kStopped");
      return;
    case 1:
    case 2:
    case 3:
      if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      {
        if (!*((void *)this + 28) && !*((void *)this + 30)) {
          goto LABEL_45;
        }
        uint64_t v16 = *((void *)this + 10);
        uint64_t v17 = (char *)this + 40;
        if (*((char *)this + 63) < 0)
        {
          uint64_t v17 = *(const char **)v17;
          unsigned int v18 = *((_DWORD *)this + 54) - 1;
          if (v18 <= 4) {
            goto LABEL_8;
          }
        }
        else
        {
          unsigned int v18 = *((_DWORD *)this + 54) - 1;
          if (v18 <= 4)
          {
LABEL_8:
            BOOL v19 = off_1E5A41580[v18];
LABEL_36:
            QMux::State::powerStateString_sync((uint64_t)this, (char *)__p);
            if (v34 >= 0) {
              int v23 = __p;
            }
            else {
              int v23 = (void **)__p[0];
            }
            (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v16 + 24))(v16, 6, "[%s] Error with mainState=%s, powerState=%s\n", v17, v19, (const char *)v23);
            if (v34 < 0) {
              operator delete(__p[0]);
            }
            uint64_t v24 = (char *)operator new(0x20uLL);
            long long v31 = v24;
            long long v32 = xmmword_1A1126ED0;
            strcpy(v24, "Baseband_QMI_LowPower_Error");
            QMux::State::dumpSystemLog((uint64_t)this, (uint64_t)&v31);
            operator delete(v24);
            uint64_t v25 = *((void *)this + 28);
            *((void *)this + 2MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
            if (v25)
            {
              dispatch_group_leave(v25);
              dispatch_release(v25);
            }
            long long v26 = *((void *)this + 30);
            *((void *)this + 30) = 0;
            if (v26)
            {
              dispatch_group_leave(v26);
              dispatch_release(v26);
            }
            goto LABEL_45;
          }
        }
        BOOL v19 = "kStopped";
        goto LABEL_36;
      }
      if (*((void *)this + 28)) {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x52B, "!fPowerDownState", "is not", "true", v14);
      }
      if (*((void *)this + 30)) {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x52C, "!fPowerUpState", "is not", "true", v14);
      }
LABEL_45:
      if (!v7)
      {
        uint64_t v28 = (char *)this + 40;
        if (*((char *)this + 63) < 0)
        {
          uint64_t v28 = *(const char **)v28;
          unsigned int v29 = *((_DWORD *)this + 54) - 1;
          if (v29 <= 4) {
            goto LABEL_55;
          }
        }
        else
        {
          unsigned int v29 = *((_DWORD *)this + 54) - 1;
          if (v29 <= 4)
          {
LABEL_55:
            uint64_t v30 = off_1E5A41580[v29];
LABEL_58:
            (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] enterPowerMode(%d) ignored (QMux is %s)\n", v28, 0, v30);
            return;
          }
        }
        uint64_t v30 = "kStopped";
        goto LABEL_58;
      }
      if (object)
      {
        dispatch_retain(object);
        dispatch_retain(object);
        dispatch_group_enter(object);
      }
      uint64_t v27 = *((void *)this + 28);
      *((void *)this + 2MEMORY[0x1A622BDE0]((char *)this + 8) = object;
      if (v27)
      {
        dispatch_group_leave(v27);
        dispatch_release(v27);
      }
      if (object) {
        dispatch_release(object);
      }
      QMux::State::powerDown_sync(this, v10, v11, v12, v13, v14, v15);
      return;
    case 4:
      if (a3) {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x515, "targetProfile", "==", "qmi::kQMIPower_Normal", (const char *)a3, 0);
      }
      if (*((void *)this + 28)) {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x516, "!fPowerDownState", "is not", "true", a6);
      }
      if (*((void *)this + 30)) {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x517, "!fPowerUpState", "is not", "true", a6);
      }
      if (object)
      {
        dispatch_retain(object);
        dispatch_retain(object);
        dispatch_group_enter(object);
      }
      BOOL v22 = *((void *)this + 30);
      *((void *)this + 30) = object;
      if (v22)
      {
        dispatch_group_leave(v22);
        dispatch_release(v22);
      }
      if (object) {
        dispatch_release(object);
      }
      QMux::State::powerUp_sync(this);
      return;
    case 5:
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x50D, "false", "is not", "true", "No way to call _sync functions after in kOffline; refs should be gone!",
        a7);
      return;
    default:
      return;
  }
}

void sub_1A1103E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  operator delete(v21);
  _Unwind_Resume(a1);
}

void QMux::State::powerUp_sync(QMux::State *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = (char *)this + 40;
  long long v4 = (char *)this + 40;
  if (*((char *)this + 63) < 0) {
    long long v4 = *(const char **)v3;
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v2 + 24))(v2, 6, "[%s] Exiting low power mode\n", v4);
  QMux::State::setMainState((uint64_t)this, 3, v5, v6, v7, v8);
  if (*((void *)this + 30))
  {
    QMIControl::setPowerMode_sync(*((void **)this + 8), 0);
    uint64_t v10 = *((void *)this + 10);
    if ((*((char *)this + 63) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x541, "fPowerUpState", "is not", "true", v9);
    QMIControl::setPowerMode_sync(*((void **)this + 8), 0);
    uint64_t v10 = *((void *)this + 10);
    if ((*((char *)this + 63) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  uint64_t v3 = *(const char **)v3;
LABEL_5:
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v10 + 24))(v10, 6, "[%s] EXTRA:     -- wait for QMIControl to set QMI to power up\n", v3);
  uint64_t v11 = *((void *)this + 30);
  if (v11) {
    dispatch_retain(*((dispatch_object_t *)this + 30));
  }
  uint64_t v12 = dispatch_group_create();
  (*(void (**)(void, NSObject *))(**((void **)this + 8) + 120))(*((void *)this + 8), v12);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v13 || (uint64_t v14 = std::__shared_weak_count::lock(v13)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v16 || (uint64_t v17 = *((void *)this + 1), (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v19 = v18;
  *(void *)&long long v22 = v17;
  *((void *)&v22 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v20 = *((void *)this + 3);
  uint64_t v21 = operator new(0x18uLL);
  *(_OWORD *)uint64_t v21 = v22;
  v21[2] = v11;
  dispatch_group_notify_f(v12, v20, v21, (dispatch_function_t)dispatch::detail::group_notify<QMux::State::powerUp_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerUp_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v15);
  if (v12) {
    dispatch_release(v12);
  }
  if (v11)
  {
    dispatch_release(v11);
  }
}

void sub_1A1104120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  QMux::State::powerUp_sync(void)::$_0::~$_0((uint64_t)va);
  std::__shared_weak_count::__release_weak(v5);
  if (v4)
  {
    dispatch_release(v4);
    if (!v3) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  dispatch_release(v3);
  _Unwind_Resume(a1);
}

uint64_t QMux::State::powerUp_sync(void)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void QMux::State::powerUp_signalClients_sync(QMux::State *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = (const char **)((char *)this + 40);
  long long v4 = (char *)this + 40;
  if (*((char *)this + 63) < 0) {
    long long v4 = *v3;
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v2 + 24))(v2, 6, "[%s] Normal power mode resumed; signalling all clients\n",
    v4);
  uint64_t v5 = (QMux::State *)*((void *)this + 14);
  if (v5 != (QMux::State *)((char *)this + 120))
  {
    do
    {
      uint64_t v6 = (char *)this + 40;
      if (*((char *)this + 63) < 0) {
        uint64_t v6 = *v3;
      }
      (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] EXTRA:     -- signal QMIClient(svc=%d client=%d) to resume\n", v6, *((unsigned __int8 *)v5 + 32), *((unsigned __int8 *)v5 + 33));
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
      if (!v7) {
        goto LABEL_13;
      }
      unint64_t v8 = std::__shared_weak_count::lock(v7);
      if (!v8) {
        goto LABEL_13;
      }
      uint64_t v9 = v8;
      uint64_t v10 = *((void *)v5 + 5);
      if (v10) {
        (*(void (**)(uint64_t, void, void))(*(void *)v10 + 88))(v10, *((void *)this + 30), 0);
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        uint64_t v11 = (QMux::State *)*((void *)v5 + 1);
        if (!v11)
        {
          do
          {
LABEL_17:
            uint64_t v12 = (QMux::State *)*((void *)v5 + 2);
            BOOL v13 = *(void *)v12 == (void)v5;
            uint64_t v5 = v12;
          }
          while (!v13);
          goto LABEL_5;
        }
      }
      else
      {
LABEL_13:
        uint64_t v11 = (QMux::State *)*((void *)v5 + 1);
        if (!v11) {
          goto LABEL_17;
        }
      }
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = *(QMux::State **)v11;
      }
      while (v11);
LABEL_5:
      uint64_t v5 = v12;
    }
    while (v12 != (QMux::State *)((char *)this + 120));
  }
}

void sub_1A110437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMux::State::getClientPowerDownSession_sync(QMux::State *this@<X0>, const qmi::QMuxClientIface *a2@<X1>, NSObject **a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string v38 = *(std::string *)((char *)a2 + 8);
  }
  v43[0] = v38.__r_.__value_.__l.__size_;
  std::string::size_type v5 = v38.__r_.__value_.__r.__words[0];
  *(void *)((char *)v43 + 7) = *(std::string::size_type *)((char *)&v38.__r_.__value_.__r.__words[1] + 7);
  char v6 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  memset(&v38, 0, sizeof(v38));
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v7 = dispatch_group_create();
  unint64_t v8 = v7;
  *a3 = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v8);
    dispatch_release(v8);
  }
  uint64_t v9 = operator new(0x30uLL);
  v9[1] = 0;
  void v9[2] = 0;
  void *v9 = &unk_1EF43DD38;
  v9[3] = v5;
  v9[4] = v43[0];
  *(void *)((char *)v9 + 39) = *(void *)((char *)v43 + 7);
  *((unsigned char *)v9 + 47) = v6;
  v43[0] = 0;
  *(void *)((char *)v43 + 7) = 0;
  *(void *)&long long v39 = v9 + 3;
  *((void *)&v39 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v9;
  uint64_t v10 = *((void *)this + 31);
  if (v10)
  {
    dispatch_retain(*((dispatch_object_t *)this + 31));
    dispatch_group_enter(v10);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  uint64_t v12 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  *(void *)&long long v44 = v9 + 3;
  *((void *)&v44 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v9;
  atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
  *(void *)dispatch_group_t group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  *(_OWORD *)&group[8] = v40;
  if (*((void *)&v42 + 1))
  {
    if (*((long long **)&v42 + 1) == &v41)
    {
      uint64_t v47 = v46;
      (*(void (**)(long long *, void *))(v41 + 24))(&v41, v46);
    }
    else
    {
      uint64_t v47 = (void *)*((void *)&v42 + 1);
      *((void *)&v42 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
    }
  }
  else
  {
    uint64_t v47 = 0;
  }
  long long v40 = 0uLL;
  BOOL v13 = (long long *)*((void *)&v42 + 1);
  *((void *)&v42 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  if (v13 == &v41)
  {
    (*(void (**)(long long *))(v41 + 32))(&v41);
  }
  else if (v13)
  {
    (*(void (**)(long long *))(*(void *)v13 + 40))(v13);
  }
  uint64_t v14 = (char *)operator new(0x48uLL);
  uint64_t v15 = v14;
  long long v16 = v44;
  long long v17 = *(_OWORD *)group;
  *(void *)dispatch_group_t group = 0;
  long long v44 = 0uLL;
  *(_OWORD *)uint64_t v14 = v16;
  *((_OWORD *)v14 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v17;
  unsigned int v18 = v47;
  *((void *)v14 + 4) = *(void *)&group[16];
  if (v18)
  {
    if (v18 == v46)
    {
      *((void *)v14 + MEMORY[0x1A622BDE0]((char *)this + 8) = v14 + 40;
      (*(void (**)(void *))(v46[0] + 24))(v46);
    }
    else
    {
      *((void *)v14 + MEMORY[0x1A622BDE0]((char *)this + 8) = v18;
      uint64_t v47 = 0;
    }
  }
  else
  {
    *((void *)v14 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  }
  *(void *)&group[8] = 0;
  *(void *)&group[16] = 0;
  BOOL v19 = v47;
  uint64_t v47 = 0;
  if (v19 == v46)
  {
    (*(void (**)(void *))(v46[0] + 32))(v46);
  }
  else if (v19)
  {
    (*(void (**)(void *))(*v19 + 40))(v19);
  }
  dispatch_group_notify_f(v8, v12, v15, (dispatch_function_t)dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)&group[8]);
  if (*(void *)group)
  {
    dispatch_group_leave(*(dispatch_group_t *)group);
    if (*(void *)group) {
      dispatch_release(*(dispatch_object_t *)group);
    }
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)&v44 + 1);
  if (*((void *)&v44 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v12) {
    dispatch_release(v12);
  }
  long long v22 = (char *)*((void *)this + 33);
  unint64_t v21 = *((void *)this + 34);
  if ((unint64_t)v22 >= v21)
  {
    uint64_t v25 = (char *)*((void *)this + 32);
    uint64_t v26 = (v22 - v25) >> 4;
    unint64_t v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v28 = v21 - (void)v25;
    if (v28 >> 3 > v27) {
      unint64_t v27 = v28 >> 3;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v37 = v39;
    uint64_t v30 = (char *)operator new(16 * v29);
    long long v31 = &v30[16 * v26];
    *(_OWORD *)long long v31 = v37;
    if (*((void *)&v37 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 16), 1uLL, memory_order_relaxed);
      uint64_t v25 = (char *)*((void *)this + 32);
      long long v22 = (char *)*((void *)this + 33);
    }
    long long v32 = &v30[16 * v29];
    uint64_t v24 = v31 + 16;
    if (v22 == v25)
    {
      *((void *)this + 32) = v31;
      *((void *)this + 33) = v24;
      *((void *)this + 34) = v32;
    }
    else
    {
      do
      {
        long long v33 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v31 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v33;
        v31 -= 16;
        *(void *)long long v22 = 0;
        *((void *)v22 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
      }
      while (v22 != v25);
      uint64_t v25 = (char *)*((void *)this + 32);
      char v34 = (char *)*((void *)this + 33);
      *((void *)this + 32) = v31;
      *((void *)this + 33) = v24;
      *((void *)this + 34) = v32;
      while (v34 != v25)
      {
        long long v35 = (std::__shared_weak_count *)*((void *)v34 - 1);
        if (v35) {
          std::__shared_weak_count::__release_weak(v35);
        }
        v34 -= 16;
      }
    }
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *(void *)long long v22 = v39;
    uint64_t v23 = *((void *)&v39 + 1);
    *((void *)v22 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((void *)&v39 + 1);
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = v22 + 16;
  }
  *((void *)this + 33) = v24;
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
  long long v36 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  if (!*((void *)&v39 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)&v40);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_66;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)&v40);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
LABEL_66:
  }
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_1A1104934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void QMux::State::startPowerDownWatchdog_sync(QMux::State *this)
{
  uint64_t v2 = *((void *)this + 31);
  *((void *)this + 3qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *((void *)this + 32);
  for (uint64_t i = *((void *)this + 33); i != v3; i -= 16)
  {
    std::string::size_type v5 = *(std::__shared_weak_count **)(i - 8);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *((void *)this + 33) = v3;
  char v6 = *((void *)this + 35);
  if (v6)
  {
    dispatch_source_cancel(v6);
    uint64_t v7 = *((void *)this + 35);
    *((void *)this + 35) = 0;
    if (v7) {
      dispatch_release(v7);
    }
  }
  uint64_t v8 = *((void *)this + 29);
  if (v8) {
    dispatch_retain(*((dispatch_object_t *)this + 29));
  }
  uint64_t v9 = *((void *)this + 31);
  *((void *)this + 3qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v8;
  if (v9) {
    dispatch_release(v9);
  }
  uint64_t v10 = *((void *)this + 32);
  for (uint64_t j = *((void *)this + 33); j != v10; j -= 16)
  {
    uint64_t v12 = *(std::__shared_weak_count **)(j - 8);
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *((void *)this + 33) = v10;
  dispatch_source_t v13 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *((dispatch_queue_t *)this + 3));
  uint64_t v14 = *((void *)this + 35);
  *((void *)this + 35) = v13;
  if (v14)
  {
    dispatch_release(v14);
    dispatch_source_t v13 = (dispatch_source_t)*((void *)this + 35);
  }
  if (v13)
  {
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v15 || (uint64_t v16 = *((void *)this + 1), (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unsigned int v18 = v17;
    p_shared_weak_owners = &v17->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v20 = *((void *)this + 35);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN4QMux5State27startPowerDownWatchdog_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_111;
    handler[4] = this;
    void handler[5] = v16;
    uint64_t v24 = v18;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    dispatch_source_set_event_handler(v20, handler);
    unint64_t v21 = *((void *)this + 35);
    dispatch_time_t v22 = dispatch_time(0, 9000000000);
    dispatch_source_set_timer(v21, v22, 0x218711A00uLL, 0x1DCD6500uLL);
    dispatch_activate(*((dispatch_object_t *)this + 35));
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    std::__shared_weak_count::__release_weak(v18);
  }
}

void ___ZN4QMux5State27startPowerDownWatchdog_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (QMux::State *)a1[4];
    long long v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      std::string::size_type v5 = v4;
      if (a1[5] && *((void *)v3 + 35)) {
        QMux::State::dumpPowerDownState_sync(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1A1104CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrIN4QMux5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 4MEMORY[0x1A622BDE0]((char *)this + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrIN4QMux5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void QMux::State::powerDown_configIndSet_sync(QMux::State *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = (char *)this + 40;
  if (*((char *)this + 63) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v2 + 24))(v2, 6, "[%s] Client power-down complete; configuring indication sets for power mode %d\n",
    v3,
    1);
  long long v4 = (char *)*((void *)this + 14);
  std::string::size_type v5 = (char *)this + 120;
  if (v4 != (char *)this + 120)
  {
    do
    {
      unsigned int v7 = v4[32];
      if (!v4[32])
      {
        dispatch_source_t v13 = (char *)*((void *)v4 + 1);
        if (v13)
        {
          do
          {
            char v6 = v13;
            dispatch_source_t v13 = *(char **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            char v6 = (char *)*((void *)v4 + 2);
            BOOL v12 = *(void *)v6 == (void)v4;
            long long v4 = v6;
          }
          while (!v12);
        }
        goto LABEL_7;
      }
      v15[0] = 0;
      v15[1] = 0;
      uint64_t v14 = v15;
      while (1)
      {
        uint64_t v8 = (std::__shared_weak_count *)*((void *)v4 + 6);
        if (v8)
        {
          uint64_t v9 = std::__shared_weak_count::lock(v8);
          if (v9)
          {
            uint64_t v10 = *((void *)v4 + 5);
            if (v10) {
              (*(void (**)(uint64_t, void ***, uint64_t))(*(void *)v10 + 96))(v10, &v14, 1);
            }
          }
          uint64_t v11 = (char *)*((void *)v4 + 1);
          if (!v11)
          {
            do
            {
LABEL_19:
              char v6 = (char *)*((void *)v4 + 2);
              BOOL v12 = *(void *)v6 == (void)v4;
              long long v4 = v6;
            }
            while (!v12);
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v9 = 0;
          uint64_t v11 = (char *)*((void *)v4 + 1);
          if (!v11) {
            goto LABEL_19;
          }
        }
        do
        {
          char v6 = v11;
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
LABEL_21:
        if (v9)
        {
          if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (v6 == v5) {
          break;
        }
        long long v4 = v6;
        if (v6[32] != v7) {
          goto LABEL_6;
        }
      }
      char v6 = (char *)this + 120;
LABEL_6:
      QMIControl::configurePowerMode_sync(*((void *)this + 8), (char *)1, v7, (char *)&v14);
      std::__tree<unsigned short>::destroy((uint64_t)&v14, v15[0]);
LABEL_7:
      long long v4 = v6;
    }
    while (v6 != v5);
  }
}

void sub_1A1104F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void sub_1A1104F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t QMux::State::powerDown_finish_sync(QMux::State *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if (*((void *)this + 28))
  {
    uint64_t v7 = *((void *)this + 10);
    uint64_t v8 = (char *)this + 40;
    uint64_t v9 = (char *)this + 40;
    if ((*((char *)this + 63) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x622, "fPowerDownState", "is not", "true", a6);
    uint64_t v7 = *((void *)this + 10);
    uint64_t v8 = (char *)this + 40;
    uint64_t v9 = (char *)this + 40;
    if ((*((char *)this + 63) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(const char **)v8;
LABEL_3:
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v7 + 24))(v7, 6, "[%s] Power-down configuration done; entering power-down mode %d\n",
    v9,
    1);
  if (*((void *)this + 22))
  {
    uint64_t v10 = v8;
    if (*((char *)this + 63) < 0) {
      uint64_t v10 = *(const char **)v8;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] ERROR: QMux should be powered down but the send queue is not empty!\n", v10);
    if (*((void *)this + 22)) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x62A, "fSendQueue.empty()", "==", "true", 0, (const void *)1);
    }
  }
  QMIControl::setPowerMode_sync(*((void **)this + 8), 1);
  if (*((char *)this + 63) < 0) {
    uint64_t v8 = *(const char **)v8;
  }
  (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 10) + 24))(*((void *)this + 10), 6, "[%s] EXTRA:     -- wait for QMIControl to set the power mode\n", v8);
  (*(void (**)(void, void))(**((void **)this + 8) + 120))(*((void *)this + 8), *((void *)this + 28));

  return QMux::State::setMainState(this, 4);
}

void QMux::State::setLogger_sync(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v3;
  *(void *)(a1 + 8MEMORY[0x1A622BDE0]((char *)this + 8) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void QMux::QMux(QMux *this)
{
  *(void *)this = 0;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
}

{
  *(void *)this = 0;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
}

QMux *QMux::QMux(QMux *a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t *a5, uint64_t a6, int a7, char a8)
{
  BOOL v12 = (std::__shared_weak_count *)a5[1];
  v19[0] = *a5;
  v19[1] = (uint64_t)v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (a7) {
    int v13 = 2;
  }
  else {
    int v13 = 1;
  }
  QMux::State::create(a4, 0, v19, v13, a8, a1);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (a2)
  {
    uint64_t v16 = *(void *)a1;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)a1 + 1);
    v19[2] = *(void *)a1;
    void v19[3] = (uint64_t)v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v16) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x69B, "ptr", "is not", "true", v14);
    }
    uint64_t v21 = a3;
    uint64_t v22 = a2;
    v20[0] = v16;
    v20[1] = &v22;
    v20[2] = &v21;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_153;
    block[4] = v16 + 8;
    void block[5] = v20;
    long long v17 = *(NSObject **)(v16 + 24);
    if (*(void *)(v16 + 32))
    {
      dispatch_async_and_wait(v17, block);
      if (!v15) {
        goto LABEL_19;
      }
    }
    else
    {
      dispatch_sync(v17, block);
      if (!v15)
      {
LABEL_19:
        QMux::start(a1);
        return a1;
      }
    }
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_19;
  }
  return a1;
}

{
  return QMux::QMux(a1, a2, a3, a4, a5, 0, a7, a8);
}

void sub_1A11053CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_1A11053E8(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void QMux::setDriverAndCookie(QMux *this, ATCSIPCDriver *a2, void *a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v9 = *(QMux::State **)this;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v9) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x69B, "ptr", "is not", "true", a6);
  }
  QMux::State::setDriverAndCookie(v9, a2, a3);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1A11054F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void QMux::start(QMux *this)
{
  uint64_t v1 = *(void **)this;
  if (*(void *)this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = (std::__shared_weak_count *)v1[2];
    if (!v3 || (uint64_t v4 = v1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    char v6 = v5;
    uint64_t v7 = operator new(0x10uLL);
    void *v7 = v1;
    v7[1] = v2;
    uint64_t v8 = v1[3];
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = operator new(0x18uLL);
    void *v9 = v7;
    v9[1] = v4;
    void v9[2] = v6;
    dispatch_async_f(v8, v9, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::start(void)::$_0>(QMux::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::start(void)::$_0,dispatch_queue_s *::default_delete<QMux::start(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

QMux *QMux::QMux(QMux *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, int a6, char a7)
{
  if ((a4 - 1) > 9) {
    uint64_t v14 = "qmux";
  }
  else {
    uint64_t v14 = off_1E5A415A8[a4 - 1];
  }
  size_t v15 = strlen(v14);
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v16 = v15;
  uint64_t v29 = a3;
  if (v15 >= 0x17)
  {
    uint64_t v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v22 = v15 | 7;
    }
    uint64_t v23 = v22 + 1;
    p_dst = (long long *)operator new(v22 + 1);
    *((void *)&__dst + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v16;
    unint64_t v38 = v23 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v3MEMORY[0x1A622BDE0]((char *)this + 8) = v15;
    p_dst = &__dst;
    if (!v15)
    {
      LOBYTE(__dst) = 0;
      uint64_t v18 = *a5;
      BOOL v19 = (std::__shared_weak_count *)a5[1];
      uint64_t v30 = v18;
      long long v31 = v19;
      if (!v19) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  memcpy(p_dst, v14, v16);
  *((unsigned char *)p_dst + v16) = 0;
  uint64_t v24 = *a5;
  BOOL v19 = (std::__shared_weak_count *)a5[1];
  uint64_t v30 = v24;
  long long v31 = v19;
  if (v19) {
LABEL_8:
  }
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_9:
  if (a6) {
    int v20 = 2;
  }
  else {
    int v20 = 1;
  }
  QMux::State::create(&__dst, a4, &v30, v20, a7, a1);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    if (!a2) {
      return a1;
    }
LABEL_23:
    uint64_t v25 = *(void *)a1;
    uint64_t v26 = (std::__shared_weak_count *)*((void *)a1 + 1);
    uint64_t v32 = *(void *)a1;
    long long v33 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v25) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x69B, "ptr", "is not", "true", v21);
    }
    uint64_t v35 = v29;
    uint64_t v36 = a2;
    v34[0] = v25;
    v34[1] = &v36;
    v34[2] = &v35;
    *(void *)&long long __dst = MEMORY[0x1E4F143A8];
    *((void *)&__dst + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0x40000000;
    unint64_t v38 = (unint64_t)___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    long long v39 = &__block_descriptor_tmp_153;
    uint64_t v40 = v25 + 8;
    long long v41 = v34;
    unint64_t v27 = *(NSObject **)(v25 + 24);
    if (*(void *)(v25 + 32))
    {
      dispatch_async_and_wait(v27, &__dst);
      if (!v26) {
        goto LABEL_33;
      }
    }
    else
    {
      dispatch_sync(v27, &__dst);
      if (!v26)
      {
LABEL_33:
        QMux::start(a1);
        return a1;
      }
    }
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    goto LABEL_33;
  }
  operator delete((void *)__dst);
  if (a2) {
    goto LABEL_23;
  }
  return a1;
}

void sub_1A11058B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_1A11058D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

QMux *QMux::QMux(QMux *a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t *a5, int a6, char a7)
{
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  v18[0] = *a5;
  v18[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (a6) {
    int v12 = 2;
  }
  else {
    int v12 = 1;
  }
  QMux::State::create(a4, 0, v18, v12, a7, a1);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (a2)
  {
    uint64_t v15 = *(void *)a1;
    uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 1);
    v18[2] = *(void *)a1;
    _OWORD v18[3] = (uint64_t)v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v15) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x69B, "ptr", "is not", "true", v13);
    }
    uint64_t v20 = a3;
    uint64_t v21 = a2;
    v19[0] = v15;
    v19[1] = &v21;
    v19[2] = &v20;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_153;
    block[4] = v15 + 8;
    void block[5] = v19;
    size_t v16 = *(NSObject **)(v15 + 24);
    if (*(void *)(v15 + 32))
    {
      dispatch_async_and_wait(v16, block);
      if (!v14) {
        goto LABEL_19;
      }
    }
    else
    {
      dispatch_sync(v16, block);
      if (!v14)
      {
LABEL_19:
        QMux::start(a1);
        return a1;
      }
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_19;
  }
  return a1;
}

{
  std::__shared_weak_count *v10;
  const char *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v16[4];
  void v17[3];
  uint64_t v18;
  uint64_t v19;
  void block[6];

  uint64_t v10 = (std::__shared_weak_count *)a5[1];
  v16[0] = *a5;
  v16[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  QMux::State::create(a4, 0, v16, a6, a7, a1);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  if (a2)
  {
    int v13 = *(void *)a1;
    int v12 = (std::__shared_weak_count *)*((void *)a1 + 1);
    v16[2] = *(void *)a1;
    v16[3] = (uint64_t)v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v13) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x69B, "ptr", "is not", "true", v11);
    }
    uint64_t v18 = a3;
    BOOL v19 = a2;
    v17[0] = v13;
    v17[1] = &v19;
    v17[2] = &v18;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_153;
    block[4] = v13 + 8;
    void block[5] = v17;
    uint64_t v14 = *(NSObject **)(v13 + 24);
    if (*(void *)(v13 + 32))
    {
      dispatch_async_and_wait(v14, block);
      if (!v12) {
        goto LABEL_16;
      }
    }
    else
    {
      dispatch_sync(v14, block);
      if (!v12)
      {
LABEL_16:
        QMux::start(a1);
        return a1;
      }
    }
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_16;
  }
  return a1;
}

void sub_1A1105AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_1A1105AC0(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void sub_1A1105C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_1A1105C98(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void QMux::join(QMux *this)
{
  uint64_t v2 = *(NSObject ***)this;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    QMux::State::join(v2);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void QMux::joinControl(QMux *this)
{
  uint64_t v2 = *(NSObject ***)this;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    QMux::State::joinControl(v2);
  }
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void QMux::flush(QMux *this, dispatch_object_t object)
{
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    if (object)
    {
      dispatch_retain(object);
      dispatch_retain(object);
      dispatch_group_enter(object);
      dispatch_release(object);
      uint64_t v2 = *(void **)this;
    }
    uint64_t v5 = *((void *)this + 1);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    if (object)
    {
      dispatch_retain(object);
      dispatch_group_enter(object);
    }
    char v6 = (std::__shared_weak_count *)v2[2];
    if (!v6 || (uint64_t v7 = v2[1], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v9 = v8;
    uint64_t v10 = operator new(0x18uLL);
    void *v10 = v2;
    v10[1] = v5;
    v10[2] = object;
    uint64_t v11 = v2[3];
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    int v12 = operator new(0x18uLL);
    *int v12 = v10;
    v12[1] = v7;
    xpc_object_t v12[2] = v9;
    dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::flush(dispatch_group_s *)::$_0>(QMux::flush(dispatch_group_s *)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::flush(dispatch_group_s *)::$_0,dispatch_queue_s *::default_delete<QMux::flush(dispatch_group_s *)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (!object) {
        return;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!object) {
        return;
      }
    }
    dispatch_group_leave(object);
    dispatch_release(object);
  }
}

void QMux::add(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v8 = (void *)*a1;
  if (!*a1)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x6A2, "fState", "is not", "true", a6);
    uint64_t v8 = (void *)*a1;
  }
  uint64_t v9 = a1[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  int v12 = (std::__shared_weak_count *)v8[2];
  if (!v12 || (uint64_t v13 = v8[1], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  size_t v16 = operator new(0x20uLL);
  *size_t v16 = v8;
  v16[1] = v9;
  v16[2] = v10;
  v16[3] = v11;
  long long v17 = v8[3];
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v18 = operator new(0x18uLL);
  *uint64_t v18 = v16;
  v18[1] = v13;
  v18[2] = v15;
  dispatch_async_f(v17, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0>(QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0,std::default_delete<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void QMux::remove(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v8 = (void *)*a1;
  if (!*a1)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x6AB, "fState", "is not", "true", a6);
    uint64_t v8 = (void *)*a1;
  }
  uint64_t v9 = a1[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  int v12 = (std::__shared_weak_count *)v8[2];
  if (!v12 || (uint64_t v13 = v8[1], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  size_t v16 = operator new(0x20uLL);
  *size_t v16 = v8;
  v16[1] = v9;
  v16[2] = v10;
  v16[3] = v11;
  long long v17 = v8[3];
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v18 = operator new(0x18uLL);
  *uint64_t v18 = v16;
  v18[1] = v13;
  v18[2] = v15;
  dispatch_async_f(v17, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0>(QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0,std::default_delete<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void QMux::restart(QMux *this)
{
  uint64_t v1 = *(void **)this;
  if (*(void *)this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = (std::__shared_weak_count *)v1[2];
    if (!v3 || (uint64_t v4 = v1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    char v6 = v5;
    uint64_t v7 = operator new(0x10uLL);
    void *v7 = v1;
    v7[1] = v2;
    uint64_t v8 = v1[3];
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = operator new(0x18uLL);
    void *v9 = v7;
    v9[1] = v4;
    void v9[2] = v6;
    dispatch_async_f(v8, v9, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::restart(void)::$_0>(QMux::restart(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::restart(void)::$_0,dispatch_queue_s *::default_delete<QMux::restart(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void QMux::stop(QMux *this)
{
  uint64_t v1 = *(void **)this;
  if (*(void *)this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = (std::__shared_weak_count *)v1[2];
    if (!v3 || (uint64_t v4 = v1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    char v6 = v5;
    uint64_t v7 = operator new(0x10uLL);
    void *v7 = v1;
    v7[1] = v2;
    uint64_t v8 = v1[3];
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = operator new(0x18uLL);
    void *v9 = v7;
    v9[1] = v4;
    void v9[2] = v6;
    dispatch_async_f(v8, v9, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::stop(void)::$_0>(QMux::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::stop(void)::$_0,dispatch_queue_s *::default_delete<QMux::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void QMux::shutdown(QMux *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
    uint64_t v5 = *(void *)this;
    char v6 = v2;
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS1_8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
    block[3] = &__block_descriptor_tmp_170;
    block[4] = v1 + 8;
    void block[5] = &v5;
    uint64_t v3 = *(NSObject **)(v1 + 24);
    if (*(void *)(v1 + 32))
    {
      dispatch_async_and_wait(v3, block);
      uint64_t v4 = v6;
      if (!v6) {
        return;
      }
    }
    else
    {
      dispatch_sync(v3, block);
      uint64_t v4 = v6;
      if (!v6) {
        return;
      }
    }
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void QMux::enterPowerMode(void *a1, dispatch_object_t object, int a3)
{
  uint64_t v3 = (void *)*a1;
  if (*a1)
  {
    if (object)
    {
      dispatch_retain(object);
      uint64_t v3 = (void *)*a1;
    }
    uint64_t v7 = a1[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    if (object)
    {
      dispatch_retain(object);
      dispatch_group_enter(object);
    }
    uint64_t v8 = (std::__shared_weak_count *)v3[2];
    if (!v8 || (uint64_t v9 = v3[1], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v11 = v10;
    int v12 = operator new(0x20uLL);
    *int v12 = v3;
    v12[1] = v7;
    xpc_object_t v12[2] = object;
    *((_DWORD *)v12 + 6) = a3;
    uint64_t v13 = v3[3];
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = operator new(0x18uLL);
    void *v14 = v12;
    v14[1] = v9;
    void v14[2] = v11;
    dispatch_async_f(v13, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0>(QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0,dispatch_queue_s *::default_delete<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (!object) {
        return;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!object) {
        return;
      }
    }
    dispatch_release(object);
  }
}

void QMux::invokeReset(void **a1, uint64_t a2, int a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    QMux::State::invokeReset(v5, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (a3)
  {
    exception = (_ATCSException *)__cxa_allocate_exception(0x208uLL);
    if (*(char *)(a2 + 23) >= 0) {
      _ATCSException::_ATCSException(exception, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", 1784, (const char *)a2, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
    }
    else {
      _ATCSException::_ATCSException(exception, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", 1784, *(const char **)a2, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
    }
  }
}

void sub_1A1106838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL QMux::isRunning(QMux *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v4 = this;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS1_9isRunningEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  void v5[3] = &__block_descriptor_tmp_172;
  v5[4] = v1 + 8;
  void v5[5] = &v4;
  char v6 = v5;
  uint64_t v2 = *(NSObject **)(v1 + 24);
  if (*(void *)(v1 + 32))
  {
    char v13 = -86;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0;
    uint64_t v10 = &__block_descriptor_tmp_174;
    uint64_t v11 = &v13;
    int v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    char v13 = -86;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0;
    uint64_t v10 = &__block_descriptor_tmp_173;
    uint64_t v11 = &v13;
    int v12 = &v6;
    dispatch_sync(v2, &block);
  }
  return v13 != 0;
}

BOOL QMux::isPoweredDown(QMux *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this) {
    return 0;
  }
  uint64_t v4 = this;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS1_13isPoweredDownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  void v5[3] = &__block_descriptor_tmp_175;
  v5[4] = v1 + 8;
  void v5[5] = &v4;
  char v6 = v5;
  uint64_t v2 = *(NSObject **)(v1 + 24);
  if (*(void *)(v1 + 32))
  {
    char v13 = -86;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0;
    uint64_t v10 = &__block_descriptor_tmp_174;
    uint64_t v11 = &v13;
    int v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    char v13 = -86;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0;
    uint64_t v10 = &__block_descriptor_tmp_173;
    uint64_t v11 = &v13;
    int v12 = &v6;
    dispatch_sync(v2, &block);
  }
  return v13 != 0;
}

void QMux::setLogger(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if (*a2)
  {
    uint64_t v8 = (void *)*a1;
    if (!*a1) {
      return;
    }
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x713, "logger.get()", "is not", "true", a6);
    uint64_t v8 = (void *)*a1;
    if (!*a1) {
      return;
    }
  }
  uint64_t v9 = a1[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  int v12 = (std::__shared_weak_count *)v8[2];
  if (!v12 || (uint64_t v13 = v8[1], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  size_t v16 = operator new(0x20uLL);
  *size_t v16 = v8;
  v16[1] = v9;
  v16[2] = v10;
  v16[3] = v11;
  long long v17 = v8[3];
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v18 = operator new(0x18uLL);
  *uint64_t v18 = v16;
  v18[1] = v13;
  v18[2] = v15;
  dispatch_async_f(v17, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0>(QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0,std::default_delete<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void QMux::dumpState(QMux *this)
{
  uint64_t v1 = *(void **)this;
  if (*(void *)this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = (std::__shared_weak_count *)v1[2];
    if (!v3 || (uint64_t v4 = v1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    char v6 = v5;
    uint64_t v7 = operator new(0x10uLL);
    void *v7 = v1;
    v7[1] = v2;
    uint64_t v8 = v1[3];
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = operator new(0x18uLL);
    void *v9 = v7;
    v9[1] = v4;
    void v9[2] = v6;
    dispatch_async_f(v8, v9, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::dumpState(void)::$_0>(QMux::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::dumpState(void)::$_0,dispatch_queue_s *::default_delete<QMux::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void QMux::getName(QMux *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    if (*(char *)(v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
    }
    else
    {
      long long v7 = *(_OWORD *)v6;
      *(void *)(a2 + 16) = *(void *)(v6 + 16);
      *(_OWORD *)a2 = v7;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 12;
    strcpy((char *)a2, "(empty QMux)");
  }
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1A1106ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void QMux::getQMIPowerDownMessages(QMux *this@<X0>, const char *a2@<X5>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)this;
  if (!*(void *)this)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x72F, "fState", "is not", "true", a2);
    uint64_t v5 = *(void *)this;
  }
  uint64_t v8 = this;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  void v9[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS1_23getQMIPowerDownMessagesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  v9[3] = &__block_descriptor_tmp_177;
  v9[4] = v5 + 8;
  v9[5] = &v8;
  uint64_t v10 = v9;
  uint64_t v6 = *(NSObject **)(v5 + 24);
  uint64_t v7 = *(void *)(v5 + 32);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = a3 + 1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  if (v7)
  {
    int v12 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__13setINS1_4pairIKN3qmi11ServiceTypeEKtEENS1_4lessIS8_EENS1_9allocatorIS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v13 = &__block_descriptor_tmp_179;
    uint64_t v14 = a3;
    uint64_t v15 = &v10;
    dispatch_async_and_wait(v6, block);
  }
  else
  {
    int v12 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__13setINS1_4pairIKN3qmi11ServiceTypeEKtEENS1_4lessIS8_EENS1_9allocatorIS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v13 = &__block_descriptor_tmp_178;
    uint64_t v14 = a3;
    uint64_t v15 = &v10;
    dispatch_sync(v6, block);
  }
}

void *QMux::State::getQMIPowerDownMessages@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this[37];
  *a2 = this[36];
  uint64_t v3 = this[38];
  a2[2] = v3;
  if (v3) {
    uint64_t v4 = (void *)(v2 + 16);
  }
  else {
    uint64_t v4 = a2;
  }
  a2[1] = v2;
  this[37] = 0;
  this[38] = 0;
  void *v4 = a2 + 1;
  this[36] = this + 37;
  return this;
}

uint64_t QMuxQueueItem::QMuxQueueItem(uint64_t a1, char a2, char a3, void *a4)
{
  *(unsigned char *)a1 = a2;
  *(unsigned char *)(a1 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = a3;
  uint64_t v5 = a4[1];
  *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = *a4;
  *(void *)(a1 + 16) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::fixupHeader();
  return a1;
}

{
  uint64_t v5;

  *(unsigned char *)a1 = a2;
  *(unsigned char *)(a1 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = a3;
  uint64_t v5 = a4[1];
  *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = *a4;
  *(void *)(a1 + 16) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::fixupHeader();
  return a1;
}

void sub_1A11070E4(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A1107144(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void QMuxQueueItem::~QMuxQueueItem(QMuxQueueItem *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t QMuxCommandFormatter::bufferSizeForCommandHeader(QMuxCommandFormatter *this)
{
  return 128;
}

uint64_t QMuxCommandFormatter::interpretCommandHeader(QMuxCommandFormatter *this, char *a2, unsigned int a3, const void *a4, unsigned int a5, unsigned int *a6)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  qmi::parse();
  uint64_t v6 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v6;
}

void sub_1A110735C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK20QMuxCommandFormatter22interpretCommandHeaderEPcjPKvjPj_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 40);
  size_t v5 = *(unsigned int *)(a1 + 56);
  int v6 = *(unsigned __int8 *)(a2 + 5);
  uint64_t v7 = qmi::asShortString();
  uint64_t result = snprintf(v4, v5, "%s:0x%02X Length:%u Flags:0x%02X ClientID:%u", v7, v6, *(unsigned __int16 *)(a2 + 2), *(unsigned __int8 *)(a2 + 4), *(unsigned __int8 *)(a2 + 6));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  **(_DWORD **)(a1 + 4MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 56);
  if (v10 >= *(_DWORD *)(v9 + 24)) {
    unsigned int v10 = *(_DWORD *)(v9 + 24);
  }
  *(_DWORD *)(v9 + 24) = v10;
  return result;
}

void *ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}::~signpost_interval(void *a1)
{
  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 3));
  uint64_t v2 = a1[2];
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = a1[2];
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43DD38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43DD38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  if (a1)
  {
    ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 3));
    uint64_t v2 = a1[2];
    if (v2)
    {
      dispatch_group_leave(v2);
      uint64_t v3 = a1[2];
      if (v3) {
        dispatch_release(v3);
      }
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[1];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      size_t v5 = a1;
    }
    else
    {
      size_t v5 = a1;
    }
    operator delete(v5);
  }
}

void ctu::os::signpost_interval::~signpost_interval(ctu::os::signpost_interval *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2 && *(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v8 = *(void *)this;
    uint64_t v9 = v3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v2 + 48))(v2, &v9, &v8);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4) {
    os_release(v4);
  }
  size_t v5 = (char *)this + 16;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  int v6 = (ctu::os::signpost_interval *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6 == (ctu::os::signpost_interval *)((char *)this + 16))
  {
    (*(void (**)(char *))(*(void *)v5 + 32))((char *)this + 16);
    uint64_t v7 = (char *)*((void *)this + 5);
    *(void *)this = 0;
    if (v7 != v5) {
      goto LABEL_9;
    }
LABEL_13:
    (*(void (**)(char *))(*(void *)v5 + 32))((char *)this + 16);
    return;
  }
  if (!v6)
  {
    *(void *)this = 0;
    return;
  }
  (*(void (**)(ctu::os::signpost_interval *))(*(void *)v6 + 40))(v6);
  uint64_t v7 = (char *)*((void *)this + 5);
  *(void *)this = 0;
  if (v7 == v5) {
    goto LABEL_13;
  }
LABEL_9:
  if (v7) {
    (*(void (**)(char *))(*(void *)v7 + 40))(v7);
  }
}

void std::__shared_ptr_pointer<ATCSLogger *,DummyDeleter,std::allocator<ATCSLogger>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ATCSLogger *,DummyDeleter,std::allocator<ATCSLogger>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A112704FLL) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001A112704FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A112704FLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A112704FLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__tree<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::__map_value_compare<std::pair<qmi::ServiceType const,unsigned char const>,std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::less<std::pair<qmi::ServiceType const,unsigned char const>>,true>,std::allocator<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::__map_value_compare<std::pair<qmi::ServiceType const,unsigned char const>,std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::less<std::pair<qmi::ServiceType const,unsigned char const>>,true>,std::allocator<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::__map_value_compare<std::pair<qmi::ServiceType const,unsigned char const>,std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::less<std::pair<qmi::ServiceType const,unsigned char const>>,true>,std::allocator<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(a1);
  }
}

uint64_t std::deque<QMuxQueueItem>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    size_t v5 = &v2[v4 / 0xAA];
    unint64_t v6 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v4) % 0xAA);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v6 + 16);
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        v6 += 24;
        if (v6 - (void)*v5 == 4080) {
          goto LABEL_8;
        }
LABEL_4:
        if (v6 == v7)
        {
          uint64_t v2 = *(void ***)(a1 + 8);
          uint64_t v3 = *(void ***)(a1 + 16);
          goto LABEL_12;
        }
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v6 += 24;
      if (v6 - (void)*v5 != 4080) {
        goto LABEL_4;
      }
LABEL_8:
      unint64_t v9 = (unint64_t)v5[1];
      ++v5;
      unint64_t v6 = v9;
      goto LABEL_4;
    }
LABEL_12:
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v3 = *(void ***)(a1 + 16);
        uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v2;
        unint64_t v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 85;
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 170;
LABEL_19:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*a1);
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__shared_ptr_pointer<QMux::State *,std::shared_ptr<QMux::State> ctu::SharedSynchronizable<QMux::State>::make_shared_ptr<QMux::State>(QMux::State*)::{lambda(QMux::State *)#1},std::allocator<QMux::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<QMux::State *,std::shared_ptr<QMux::State> ctu::SharedSynchronizable<QMux::State>::make_shared_ptr<QMux::State>(QMux::State*)::{lambda(QMux::State *)#1},std::allocator<QMux::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMux::State *,std::shared_ptr<QMux::State> ctu::SharedSynchronizable<QMux::State>::make_shared_ptr<QMux::State>(QMux::State*)::{lambda(QMux::State *)#1},std::allocator<QMux::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4QMux5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4QMux5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4QMux5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4QMux5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  }
  return 0;
}

uint64_t std::shared_ptr<QMux::State> ctu::SharedSynchronizable<QMux::State>::make_shared_ptr<QMux::State>(QMux::State*)::{lambda(QMux::State*)#1}::operator() const(QMux::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0>(QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0,std::default_delete<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(QMux::State ***)a1;
  QMux::State::init_sync(**(QMux::State ***)a1);
  unint64_t v3 = (std::__shared_weak_count *)v2[1];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(v2);
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    size_t v5 = (void *)a1;
  }
  else
  {
    size_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1A1107CA0(_Unwind_Exception *a1)
{
  unint64_t v4 = (std::__shared_weak_count *)v2[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  size_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS2_4joinEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v3 = *(void **)(*v1 + 112);
  uint64_t v4 = *v1 + 120;
  if (v3 != (void *)v4)
  {
    do
    {
      size_t v5 = (std::__shared_weak_count *)v3[6];
      if (!v5) {
        goto LABEL_9;
      }
      unint64_t v6 = std::__shared_weak_count::lock(v5);
      if (!v6) {
        goto LABEL_9;
      }
      unint64_t v7 = v6;
      uint64_t v8 = v3[5];
      if (v8) {
        (*(void (**)(uint64_t, void))(*(void *)v8 + 72))(v8, v1[1]);
      }
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        unint64_t v9 = (void *)v3[1];
        if (!v9)
        {
          do
          {
LABEL_13:
            unint64_t v10 = (void *)v3[2];
            BOOL v11 = *v10 == (void)v3;
            unint64_t v3 = v10;
          }
          while (!v11);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_9:
        unint64_t v9 = (void *)v3[1];
        if (!v9) {
          goto LABEL_13;
        }
      }
      do
      {
        unint64_t v10 = v9;
        unint64_t v9 = (void *)*v9;
      }
      while (v9);
LABEL_3:
      unint64_t v3 = v10;
    }
    while (v10 != (void *)v4);
  }
  uint64_t v12 = v1[1];
  uint64_t v13 = *(NSObject **)(v2 + 24);

  dispatch_group_async(v12, v13, &__block_literal_global);
}

void sub_1A1107E7C(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_11joinControlEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  unint64_t v6 = *(void **)(a1 + 40);
  uint64_t v8 = (void *)(*v6 + 120);
  unint64_t v7 = (void *)*v8;
  if (!*v8) {
    goto LABEL_6;
  }
  do
  {
    unint64_t v9 = v7;
    unint64_t v7 = (void *)*v7;
  }
  while (v7);
  if (v9 == v8 || *((unsigned char *)v9 + 32) || *((unsigned char *)v9 + 33))
  {
LABEL_6:
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x175, "i", "!=", "fClientMap.end()", a6);
    unint64_t v9 = v8;
  }
  unint64_t v10 = (std::__shared_weak_count *)v9[6];
  if (v10)
  {
    BOOL v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = v9[5];
      if (v13) {
        (*(void (**)(uint64_t, void))(*(void *)v13 + 72))(v13, v6[1]);
      }
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_1A1107FF0(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  unint64_t v3 = (void *)v1[1];
  *(void *)(v2 + 184) = *v3;
  uint64_t v4 = (void *)v1[2];
  *(void *)(v2 + 20MEMORY[0x1A622BDE0]((char *)this + 8) = *v4;
  (*(void (**)(void, uint64_t, void, uint64_t))(*(void *)*v3 + 40))(*v3, v2, *v4, v2 + 192);
  uint64_t result = *(unsigned char **)v1[1];
  if (!result[8])
  {
    unint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (unsigned char *)v6();
  }
  return result;
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  unint64_t v3 = *(uint64_t **)v1;
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *v3;
  *unint64_t v3 = *(void *)(v2 + 184);
  *(void *)(v2 + 184) = v4;
  return result;
}

double std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,0>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  uint64_t v10 = a1;
  *(void *)&long long v33 = a6;
  *((void *)&v33 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = a7;
  char v34 = (uint64_t **)&v33;
  if (a2 != a4)
  {
    BOOL v11 = a2 + 1;
    std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>>::operator()[abi:ne180100](&v34, a3, *a2 + 4080);
    if (v11 != v8)
    {
      uint64_t v12 = *((void *)&v33 + 1);
      uint64_t v13 = (uint64_t *)v33;
      uint64_t v30 = v8;
      do
      {
        while (1)
        {
          uint64_t v15 = 0;
          long long v31 = v11;
          uint64_t v32 = *v11;
          uint64_t v16 = *v13;
          while (1)
          {
            uint64_t v17 = v32 + 24 * v15;
            int64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v12 + 4080) >> 3);
            if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((4080 - 24 * v15) >> 3)) < v18) {
              int64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((4080 - 24 * v15) >> 3);
            }
            if (v18)
            {
              uint64_t v19 = v17 + 24 * v18;
              uint64_t v20 = v32 + 24 * v15;
              do
              {
                *(_WORD *)uint64_t v12 = *(_WORD *)v20;
                uint64_t v22 = *(void *)(v20 + 8);
                uint64_t v21 = *(void *)(v20 + 16);
                if (v21) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v23 = *(std::__shared_weak_count **)(v12 + 16);
                *(void *)(v12 + MEMORY[0x1A622BDE0]((char *)this + 8) = v22;
                *(void *)(v12 + 16) = v21;
                if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                  std::__shared_weak_count::__release_weak(v23);
                }
                v12 += 24;
                v20 += 24;
              }
              while (v20 != v19);
              v15 -= 0x5555555555555555 * ((v19 - v17) >> 3);
              if (v15 == 170) {
                break;
              }
            }
            uint64_t v24 = v13[1];
            ++v13;
            uint64_t v16 = v24;
            uint64_t v12 = v24;
          }
          if (*v13 + 4080 == v12) {
            break;
          }
          uint64_t v8 = v30;
          uint64_t v14 = v34;
          *char v34 = v13;
          v14[1] = (uint64_t *)v12;
          BOOL v11 = v31 + 1;
          if (v31 + 1 == v30) {
            goto LABEL_20;
          }
        }
        uint64_t v25 = (uint64_t *)v13[1];
        ++v13;
        uint64_t v12 = (uint64_t)v25;
        uint64_t v8 = v30;
        uint64_t v26 = v34;
        *char v34 = v13;
        v26[1] = v25;
        BOOL v11 = v31 + 1;
      }
      while (v31 + 1 != v30);
    }
LABEL_20:
    uint64_t v9 = *v8;
    uint64_t v10 = a1;
    uint64_t v7 = a5;
  }
  std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>>::operator()[abi:ne180100](&v34, v9, v7);
  *(void *)uint64_t v10 = v8;
  *(void *)(v10 + MEMORY[0x1A622BDE0]((char *)this + 8) = v7;
  double result = *(double *)&v33;
  *(_OWORD *)(v10 + 16) = v33;
  return result;
}

void std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>>::operator()[abi:ne180100](uint64_t ***a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *a1;
  uint64_t v4 = **a1;
  size_t v5 = (*a1)[1];
  if (a2 != a3)
  {
    uint64_t v7 = a2;
    uint64_t v8 = (uint64_t *)*v4;
    while (1)
    {
      int64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v5 + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a3 - v7) >> 3)) < v9) {
        int64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a3 - v7) >> 3);
      }
      if (v9)
      {
        uint64_t v10 = v7 + 24 * v9;
        do
        {
          *(_WORD *)size_t v5 = *(_WORD *)v7;
          uint64_t v12 = *(void *)(v7 + 8);
          uint64_t v11 = *(void *)(v7 + 16);
          if (v11) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v13 = (std::__shared_weak_count *)v5[2];
          v5[1] = v12;
          v5[2] = v11;
          if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
          v5 += 3;
          v7 += 24;
        }
        while (v7 != v10);
        uint64_t v7 = v10;
      }
      if (v7 == a3) {
        break;
      }
      uint64_t v14 = (uint64_t *)v4[1];
      ++v4;
      uint64_t v8 = v14;
      size_t v5 = v14;
    }
    if ((uint64_t *)(*v4 + 4080) == v5)
    {
      uint64_t v15 = (uint64_t *)v4[1];
      ++v4;
      size_t v5 = v15;
    }
    unint64_t v3 = *a1;
  }
  *unint64_t v3 = v4;
  v3[1] = v5;
}

void dispatch::detail::group_notify<QMux::State::notifySyncSuccess_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::notifySyncSuccess_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  uint64_t v2 = *__p;
  if (*(_DWORD *)(*__p + 216) == 2)
  {
    unint64_t v3 = (const char *)(v2 + 40);
    if (*(char *)(v2 + 63) < 0) {
      unint64_t v3 = *(const char **)v3;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(v2 + 80) + 24))(*(void *)(v2 + 80), 6, "[%s] All pending clients started! QMux fully initialized\n", v3);
    QMux::State::setMainState(*__p, 3, v4, v5, v6, v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)__p[1];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

  operator delete(__p);
}

void sub_1A1108574(_Unwind_Exception *a1)
{
  unint64_t v3 = (std::__shared_weak_count *)v1[1];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFjvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

void ***___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS1_16getQMIWakeReasonEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke@<X0>(void ***result@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (void *)**result[5];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v5 = (unsigned char *)v3[40];
  uint64_t v4 = (unsigned char *)v3[41];
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *a2 = v7;
    uint64_t v8 = &v7[v6];
    a2[2] = &v7[v6];
    uint64_t result = (void ***)memcpy(v7, v5, v6);
    a2[1] = v8;
  }
  a2[3] = v3[43];
  return result;
}

void sub_1A1108698(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double ___ZN8dispatch9sync_implIRU13block_pointerF13QMIWakeReasonvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + MEMORY[0x1A622BDE0]((char *)this + 8) = v3;
    operator delete(v3);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
    *(void *)(v2 + 16) = 0;
  }
  double result = *(double *)&v5;
  *(_OWORD *)uint64_t v2 = v5;
  *(void *)(v2 + 16) = v6;
  *(void *)(v2 + 24) = v7;
  return result;
}

double ___ZN8dispatch19async_and_wait_implIRU13block_pointerF13QMIWakeReasonvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + MEMORY[0x1A622BDE0]((char *)this + 8) = v3;
    operator delete(v3);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
    *(void *)(v2 + 16) = 0;
  }
  double result = *(double *)&v5;
  *(_OWORD *)uint64_t v2 = v5;
  *(void *)(v2 + 16) = v6;
  *(void *)(v2 + 24) = v7;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFivEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::State::invokeReset(std::string)::$_0>(QMux::State::invokeReset(std::string)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::State::invokeReset(std::string)::$_0,std::default_delete<QMux::State::invokeReset(std::string)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  unint64_t v3 = (void **)(*(void *)a1 + 8);
  QMux::State::invokeReset_sync(**(void **)a1, (uint64_t)v3);
  if (*((char *)v2 + 31) < 0) {
    operator delete(*v3);
  }
  operator delete(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    long long v5 = (void *)a1;
  }
  else
  {
    long long v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1A11088AC(_Unwind_Exception *a1)
{
  if (v2[31] < 0) {
    operator delete(*v3);
  }
  operator delete(v2);
  long long v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<QMux::State::powerUp_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerUp_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(QMux::State **__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[1];
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      long long v5 = *__p;
      if (*__p)
      {
        if (*((QMux::State **)v5 + 30) == __p[2])
        {
          QMux::State::powerUp_signalClients_sync(*__p);
          uint64_t v6 = *((void *)v5 + 30);
          *((void *)v5 + 30) = 0;
          if (v6)
          {
            dispatch_group_leave(v6);
            dispatch_release(v6);
          }
        }
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  uint64_t v7 = __p[2];
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)__p[1];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }

  operator delete(__p);
}

void sub_1A1108A08(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = v1[2];
    if (!v4) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v4 = v1[2];
    if (!v4)
    {
LABEL_3:
      long long v5 = (std::__shared_weak_count *)v1[1];
      if (!v5) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  dispatch_release(v4);
  long long v5 = (std::__shared_weak_count *)v1[1];
  if (!v5)
  {
LABEL_4:
    operator delete(v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_weak(v5);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[1];
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *__p;
      if (*__p)
      {
        if (*(void *)(v5 + 224) == __p[2])
        {
          uint64_t v6 = *(NSObject **)(v5 + 232);
          *(void *)(v5 + 232) = 0;
          if (v6)
          {
            dispatch_group_leave(v6);
            dispatch_release(v6);
          }
        }
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  uint64_t v7 = __p[2];
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)__p[1];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }

  operator delete(__p);
}

void dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_1>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_1 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[1];
  if (v2)
  {
    uint64_t v3 = __p[3];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*__p && *(void *)(*__p + 224) == __p[2])
      {
        QMux::State::powerDown_configIndSet_sync((QMux::State *)v3);
        uint64_t v6 = (const char *)(v3 + 40);
        if (*(char *)(v3 + 63) < 0) {
          uint64_t v6 = *(const char **)v6;
        }
        (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(v3 + 80) + 24))(*(void *)(v3 + 80), 6, "[%s] EXTRA:     -- wait for QMIControl to finish configuring IND sets\n", v6);
        uint64_t v7 = dispatch_group_create();
        (*(void (**)(void, NSObject *))(**(void **)(v3 + 64) + 120))(*(void *)(v3 + 64), v7);
        uint64_t v9 = *__p;
        uint64_t v8 = __p[1];
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = __p[2];
        if (v10) {
          dispatch_retain((dispatch_object_t)__p[2]);
        }
        uint64_t v11 = *(NSObject **)(v3 + 24);
        uint64_t v12 = operator new(0x20uLL);
        *uint64_t v12 = v9;
        v12[1] = v8;
        xpc_object_t v12[2] = v3;
        void v12[3] = v10;
        dispatch_group_notify_f(v7, v11, v12, (dispatch_function_t)dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_1::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_1::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
        if (v7) {
          dispatch_release(v7);
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  uint64_t v13 = __p[2];
  if (v13) {
    dispatch_release(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)__p[1];
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }

  operator delete(__p);
}

void sub_1A1108D34(_Unwind_Exception *a1)
{
  if (v5)
  {
    dispatch_release(v5);
    if (!v4)
    {
LABEL_3:
      if (!v3) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v4);
  if (!v3)
  {
LABEL_4:
    if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  dispatch_release(v3);
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_5:
    uint64_t v7 = v1[2];
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v7 = v1[2];
  if (!v7)
  {
LABEL_6:
    uint64_t v8 = (std::__shared_weak_count *)v1[1];
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  dispatch_release(v7);
  uint64_t v8 = (std::__shared_weak_count *)v1[1];
  if (!v8)
  {
LABEL_7:
    operator delete(v1);
    _Unwind_Resume(a1);
  }
LABEL_13:
  std::__shared_weak_count::__release_weak(v8);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_1::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_1::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[1];
  if (v2)
  {
    uint64_t v3 = (QMux::State *)__p[2];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v10 = v4;
      if (*__p && *(void *)(*__p + 224) == __p[3]) {
        QMux::State::powerDown_finish_sync(v3, v5, v6, v7, v8, v9);
      }
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  uint64_t v11 = __p[3];
  if (v11) {
    dispatch_release(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)__p[1];
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }

  operator delete(__p);
}

void sub_1A1108EEC(_Unwind_Exception *a1)
{
  if (atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = v1[3];
    if (!v4) {
      goto LABEL_3;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v4 = v1[3];
    if (!v4)
    {
LABEL_3:
      uint64_t v5 = (std::__shared_weak_count *)v1[1];
      if (!v5) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  dispatch_release(v4);
  uint64_t v5 = (std::__shared_weak_count *)v1[1];
  if (!v5)
  {
LABEL_4:
    operator delete(v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  std::__shared_weak_count::__release_weak(v5);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::flush(dispatch_group_s *)::$_0>(QMux::flush(dispatch_group_s *)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::flush(dispatch_group_s *)::$_0,dispatch_queue_s *::default_delete<QMux::flush(dispatch_group_s *)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(QMux::State ***)a1;
  uint64_t v3 = **(QMux::State ***)a1;
  uint64_t v4 = *(char **)(*(void *)a1 + 16);
  v9.gr_name = v4;
  if (v4) {
    dispatch_retain((dispatch_object_t)v4);
  }
  QMux::State::flush_sync(v3, &v9);
  if (v4) {
    dispatch_release((dispatch_object_t)v4);
  }
  uint64_t v5 = v2[2];
  if (v5)
  {
    dispatch_group_leave(v5);
    uint64_t v6 = v2[2];
    if (v6) {
      dispatch_release(v6);
    }
  }
  uint64_t v7 = (std::__shared_weak_count *)v2[1];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(v2);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

  operator delete(a1);
}

void sub_1A11090A0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v6 = v2[2];
  if (v6)
  {
    dispatch_group_leave(v6);
    uint64_t v7 = v2[2];
    if (v7) {
      dispatch_release(v7);
    }
  }
  uint64_t v8 = (std::__shared_weak_count *)v2[1];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(v2);
  group v9 = (std::__shared_weak_count *)v1[2];
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0>(QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0,std::default_delete<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)(*(void *)*a1 + 64);
  uint64_t v4 = (std::__shared_weak_count *)v2[3];
  uint64_t v9 = v2[2];
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMIControl::add_sync(v3, &v9);
  uint64_t v5 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v2[3];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v2[1];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(v2);
  uint64_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void sub_1A1109300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10 && !atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  uint64_t v13 = (std::__shared_weak_count *)v11[3];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)v11[1];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(v11);
  uint64_t v15 = (std::__shared_weak_count *)v10[2];
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0>(QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0,std::default_delete<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  QMux::State::remove_sync(**(void **)a1, (void *)(*(void *)a1 + 16));
  uint64_t v3 = (std::__shared_weak_count *)v2[3];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v2[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = (void *)a1;
  }
  else
  {
    uint64_t v6 = (void *)a1;
  }
  operator delete(v6);
}

void sub_1A110958C(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)v2[3];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v2[1];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(v2);
  uint64_t v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::restart(void)::$_0>(QMux::restart(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::restart(void)::$_0,dispatch_queue_s *::default_delete<QMux::restart(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  uint64_t v8 = *(QMIControl ****)a1;
  QMux::State::restart_sync(**(QMIControl ****)a1, a2, a3, a4, a5, a6, a7);
  uint64_t v9 = (std::__shared_weak_count *)v8[1];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(v8);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = (void *)a1;
  }
  else
  {
    uint64_t v11 = (void *)a1;
  }
  operator delete(v11);
}

void sub_1A1109784(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)v2[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::stop(void)::$_0>(QMux::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::stop(void)::$_0,dispatch_queue_s *::default_delete<QMux::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(QMux::State ***)a1;
  QMux::State::stop_sync(**(QMux::State ***)a1);
  uint64_t v3 = (std::__shared_weak_count *)v2[1];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (void *)a1;
  }
  else
  {
    uint64_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1A1109934(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)v2[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS1_8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::start(void)::$_0>(QMux::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::start(void)::$_0,dispatch_queue_s *::default_delete<QMux::start(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  uint64_t v8 = *a1;
  uint64_t v9 = **a1;
  int v10 = *(_DWORD *)(v9 + 216);
  switch(v10)
  {
    case 5:
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x298, "false", "is not", "true", "Should never start() a QMux that is being destroyed!", a7);
      break;
    case 1:
      goto LABEL_5;
    case 0:
      QMux::State::setMainState(**a1, 1, a3, a4, a5, a6);
LABEL_5:
      QMIControl::sendSync_sync(*(QMIControl **)(v9 + 64));
      break;
  }
  uint64_t v11 = (std::__shared_weak_count *)v8[1];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(v8);
  uint64_t v12 = (std::__shared_weak_count *)a1[2];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = a1;
  }
  else
  {
    uint64_t v13 = a1;
  }
  operator delete(v13);
}

void sub_1A1109B4C(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)v2[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0>(QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0,dispatch_queue_s *::default_delete<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  uint64_t v8 = *(QMux::State ***)a1;
  QMux::State::enterPowerMode_sync(**(QMux::State ***)a1, (dispatch_object_t)v8[2], (char *)*((unsigned int *)v8 + 6), a4, a5, a6, a7);
  uint64_t v9 = v8[2];
  if (v9)
  {
    dispatch_group_leave(v9);
    int v10 = v8[2];
    if (v10) {
      dispatch_release(v10);
    }
  }
  uint64_t v11 = (std::__shared_weak_count *)v8[1];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(v8);
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = (void *)a1;
  }
  else
  {
    uint64_t v13 = (void *)a1;
  }
  operator delete(v13);
}

void sub_1A1109D1C(_Unwind_Exception *a1)
{
  uint64_t v4 = v2[2];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = v2[2];
    if (v5) {
      dispatch_release(v5);
    }
  }
  uint64_t v6 = (std::__shared_weak_count *)v2[1];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS1_9isRunningEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  return *(_DWORD *)(***(void ***)(a1 + 40) + 216) == 3;
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

BOOL ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS1_13isPoweredDownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  return *(_DWORD *)(***(void ***)(a1 + 40) + 216) == 4;
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0>(QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0,std::default_delete<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)->__vftable;
  uint64_t shared_weak_owners = (*a1)->__shared_weak_owners_;
  uint64_t v4 = (*a1)[1].__vftable;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v4->~__shared_weak_count_0, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)v3[2].~__shared_weak_count_0;
  v3[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))shared_weak_owners;
  v3[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)v2[1].__vftable;
    if (!v7) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)v2[1].__vftable;
    if (!v7) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_9:
  shared_owners = (std::__shared_weak_count *)v2->__shared_owners_;
  if (shared_owners && !atomic_fetch_add(&shared_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
    std::__shared_weak_count::__release_weak(shared_owners);
    operator delete(v2);
    uint64_t v9 = a1[2];
    if (!v9)
    {
LABEL_13:
      int v10 = a1;
      goto LABEL_15;
    }
  }
  else
  {
    operator delete(v2);
    uint64_t v9 = a1[2];
    if (!v9) {
      goto LABEL_13;
    }
  }
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  int v10 = a1;

LABEL_15:
  operator delete(v10);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::dumpState(void)::$_0>(QMux::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::dumpState(void)::$_0,dispatch_queue_s *::default_delete<QMux::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(QMux::State ***)a1;
  QMux::State::dumpState_sync(**(QMux::State ***)a1);
  uint64_t v3 = (std::__shared_weak_count *)v2[1];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (void *)a1;
  }
  else
  {
    uint64_t v5 = (void *)a1;
  }
  operator delete(v5);
}

void sub_1A110A15C(_Unwind_Exception *a1)
{
  uint64_t v4 = (std::__shared_weak_count *)v2[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS1_23getQMIPowerDownMessagesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = ***(void ****)(result + 40);
  uint64_t v3 = v2[37];
  *a2 = v2[36];
  uint64_t v4 = v2[38];
  a2[2] = v4;
  if (v4) {
    uint64_t v5 = (void *)(v3 + 16);
  }
  else {
    uint64_t v5 = a2;
  }
  a2[1] = v3;
  v2[37] = 0;
  v2[38] = 0;
  *uint64_t v5 = a2 + 1;
  v2[36] = v2 + 37;
  return result;
}

void ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__13setINS1_4pairIKN3qmi11ServiceTypeEKtEENS1_4lessIS8_EENS1_9allocatorIS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 40) + 16))(&v6);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = v2 + 8;
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*(void **)(v2 + 8));
  *(void *)uint64_t v2 = v6;
  uint64_t v4 = v7;
  *(void *)(v2 + MEMORY[0x1A622BDE0]((char *)this + 8) = v7;
  uint64_t v5 = v8;
  *(void *)(v2 + 16) = v8;
  if (v5)
  {
    v4[2] = v3;
    uint64_t v6 = &v7;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(0);
  }
  else
  {
    *(void *)uint64_t v2 = v3;
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(v7);
  }
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__13setINS1_4pairIKN3qmi11ServiceTypeEKtEENS1_4lessIS8_EENS1_9allocatorIS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 40) + 16))(&v6);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = v2 + 8;
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*(void **)(v2 + 8));
  *(void *)uint64_t v2 = v6;
  uint64_t v4 = v7;
  *(void *)(v2 + MEMORY[0x1A622BDE0]((char *)this + 8) = v7;
  uint64_t v5 = v8;
  *(void *)(v2 + 16) = v8;
  if (v5)
  {
    v4[2] = v3;
    uint64_t v6 = &v7;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(0);
  }
  else
  {
    *(void *)uint64_t v2 = v3;
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(v7);
  }
}

void QMIServiceMsg::QMIServiceMsg(QMIServiceMsg *this, __int16 a2)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1EF43DE48;
  *((_WORD *)this + 6) = a2;
  *(void *)((char *)this + 14) = 0;
  *(void *)((char *)this + 30) = 0;
  *(void *)((char *)this + 22) = 0;
  *((_WORD *)this + 19) = 0;
  *((_DWORD *)this + 10) = 1;
  *((_WORD *)this + 22) = -1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
}

{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1EF43DE48;
  *((_WORD *)this + 6) = a2;
  *(void *)((char *)this + 14) = 0;
  *(void *)((char *)this + 30) = 0;
  *(void *)((char *)this + 22) = 0;
  *((_WORD *)this + 19) = 0;
  *((_DWORD *)this + 10) = 1;
  *((_WORD *)this + 22) = -1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
}

uint64_t QMIServiceMsg::decodeWord(QMIServiceMsg *this, const void *a2)
{
  return *(unsigned __int16 *)this;
}

uint64_t QMIServiceMsg::decodeByte(QMIServiceMsg *this, const void *a2)
{
  return *(unsigned __int8 *)this;
}

uint64_t QMIServiceMsg::setErrorValues(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void **)(this + 16);
  uint64_t v3 = *(void **)(this + 24);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  uint64_t v9 = ___ZNK13QMIServiceMsg6getTlvEh_block_invoke;
  int v10 = &__block_descriptor_tmp_11;
  char v11 = 2;
  if (v2 == v3) {
    goto LABEL_17;
  }
  while (1)
  {
    this = ((uint64_t (*)(void *, void))v9)(v8, *v2);
    if (this) {
      break;
    }
    if (++v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == *(void **)(v1 + 24)
    || ((uint64_t v4 = *v2, *(_WORD *)(v4 + 16) = 0, v4)
      ? (uint64_t v5 = Tlv::Reader::this_type_does_not_support_comparisons)
      : (uint64_t v5 = 0),
        !v5 || *(_WORD *)(v4 + 2) != 4))
  {
LABEL_17:
    *(_DWORD *)(v1 + 40) = 1;
    *(_WORD *)(v1 + 44) = 3;
  }
  else
  {
    *(_DWORD *)(v1 + 40) = 0;
    uint64_t v6 = *(_WORD **)(v4 + 8);
    if (*v6)
    {
      int v7 = (unsigned __int16)v6[1];
      *(_WORD *)(v1 + 44) = v7;
      if (!v7)
      {
        *(_DWORD *)(v1 + 40) = 1;
        *(_WORD *)(v1 + 44) = 4;
      }
    }
    else
    {
      *(_WORD *)(v1 + 44) = 0;
    }
  }
  return this;
}

double QMIServiceMsg::QMIServiceMsg(uint64_t a1, __int16 a2, int a3, __int16 a4)
{
  *(_DWORD *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *(void *)a1 = &unk_1EF43DE48;
  *(_WORD *)(a1 + 12) = a2;
  *(void *)(a1 + 14) = 0;
  *(void *)(a1 + 30) = 0;
  *(void *)(a1 + 22) = 0;
  *(_WORD *)(a1 + 3MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *(_DWORD *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 44) = a4;
  double result = 0.0;
  *(_OWORD *)(a1 + 4MEMORY[0x1A622BDE0]((char *)this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *(void *)a1 = &unk_1EF43DE48;
  *(_WORD *)(a1 + 12) = a2;
  *(void *)(a1 + 14) = 0;
  *(void *)(a1 + 30) = 0;
  *(void *)(a1 + 22) = 0;
  *(_WORD *)(a1 + 3MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *(_DWORD *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 44) = a4;
  double result = 0.0;
  *(_OWORD *)(a1 + 4MEMORY[0x1A622BDE0]((char *)this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return result;
}

uint64_t QMIServiceMsg::QMIServiceMsg(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *(void *)a1 = &unk_1EF43DE48;
  *(_OWORD *)(a1 + 2MEMORY[0x1A622BDE0]((char *)this + 8) = 0u;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_WORD *)(a1 + 44) = -1;
  *(_OWORD *)(a1 + 4MEMORY[0x1A622BDE0]((char *)this + 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(const void **)a2;
  int64_t v6 = v4 - *(void *)a2;
  if (v6 < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)operator new(v4 - *(void *)a2);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = &v8[v6];
  memcpy(v8, v5, v6);
  *(void *)(a1 + 64) = &v8[v6];
  *(unsigned char *)(a1 + 80) = a3;
  *(_WORD *)(a1 + 12) = *(_WORD *)&v8[a3];
  *(_WORD *)(a1 + 14) = v6 - a3 - 4;
  return a1;
}

void sub_1A110A74C(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v4;
    operator delete(v4);
    uint64_t v5 = *(void **)(v1 + 16);
    if (!v5)
    {
LABEL_3:
      ATCSCounted::~ATCSCounted((atomic_uint *)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v5 = *(void **)(v1 + 16);
    if (!v5) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 24) = v5;
  operator delete(v5);
  ATCSCounted::~ATCSCounted((atomic_uint *)v1);
  _Unwind_Resume(a1);
}

double QMIServiceMsg::create(QMIServiceMsg *this)
{
  __int16 v1 = (__int16)this;
  uint64_t v2 = (char *)operator new(0x58uLL);
  *((_DWORD *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EF43DE48;
  *((_WORD *)v2 + 6) = v1;
  *(void *)(v2 + 14) = 0;
  *(void *)(v2 + 30) = 0;
  *(void *)(v2 + 22) = 0;
  *((_WORD *)v2 + 19) = 0;
  *((_DWORD *)v2 + 10) = 1;
  *((_WORD *)v2 + 22) = -1;
  double result = 0.0;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  return result;
}

QMIServiceMsg *QMIServiceMsg::create(QMIServiceMsg *this, const void *a2)
{
  unsigned int v2 = a2;
  uint64_t v4 = (QMIServiceMsg *)operator new(0x58uLL);
  QMIServiceMsg::QMIServiceMsg(v4, (unsigned __int16 *)this, v2, 1);
  return v4;
}

void sub_1A110AA6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double QMIServiceMsg::create(__int16 a1, int a2, __int16 a3)
{
  int64_t v6 = (char *)operator new(0x58uLL);
  *((_DWORD *)v6 + 2) = 0;
  *(void *)int64_t v6 = &unk_1EF43DE48;
  *((_WORD *)v6 + 6) = a1;
  *(void *)(v6 + 14) = 0;
  *(void *)(v6 + 30) = 0;
  *(void *)(v6 + 22) = 0;
  *((_WORD *)v6 + 19) = 0;
  *((_DWORD *)v6 + 10) = a2;
  *((_WORD *)v6 + 22) = a3;
  double result = 0.0;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  return result;
}

QMIServiceMsg *QMIServiceMsg::createIndication(QMIServiceMsg *this, const void *a2)
{
  unsigned int v2 = a2;
  uint64_t v4 = (QMIServiceMsg *)operator new(0x58uLL);
  QMIServiceMsg::QMIServiceMsg(v4, (unsigned __int16 *)this, v2, 0);
  return v4;
}

void sub_1A110AB48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

QMIServiceMsg *QMIServiceMsg::createRequest(QMIServiceMsg *this, const void *a2)
{
  unsigned int v2 = a2;
  uint64_t v4 = (QMIServiceMsg *)operator new(0x58uLL);
  QMIServiceMsg::QMIServiceMsg(v4, (unsigned __int16 *)this, v2, 0);
  return v4;
}

void sub_1A110ABA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double QMIServiceMsg::create(QMIServiceMsg *this, const qmi::MessageBase *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3 && (uint64_t v4 = *(unsigned __int16 **)v3, v5 = *(void *)(v3 + 8) - *(void *)v3, v5 < 0xFFFF))
  {
    int64_t v6 = (QMIServiceMsg *)operator new(0x58uLL);
    QMIServiceMsg::QMIServiceMsg(v6, v4, (unsigned __int16)v5, 1);
  }
  else
  {
    int v8 = *((_DWORD *)this + 1);
    if (qmi::isInternalError())
    {
      __int16 v9 = 0;
      int v10 = 1;
      switch(v8)
      {
        case 65537:
          break;
        case 65538:
          __int16 v9 = 1;
          break;
        case 65539:
          __int16 v9 = 2;
          break;
        case 65542:
          __int16 v9 = 3;
          break;
        case 65552:
          __int16 v9 = 4;
          break;
        case 65553:
          __int16 v9 = 5;
          break;
        default:
          __int16 v9 = v8;
          int v10 = 1;
          break;
      }
    }
    else
    {
      int v10 = 0;
      __int16 v9 = v8;
    }
    __int16 v11 = *(_WORD *)this;
    uint64_t v12 = (char *)operator new(0x58uLL);
    *((_DWORD *)v12 + 2) = 0;
    *(void *)uint64_t v12 = &unk_1EF43DE48;
    *((_WORD *)v12 + 6) = v11;
    *(void *)(v12 + 14) = 0;
    *(void *)(v12 + 30) = 0;
    *(void *)(v12 + 22) = 0;
    *((_WORD *)v12 + 19) = 0;
    *((_DWORD *)v12 + 10) = v10;
    *((_WORD *)v12 + 22) = v9;
    double result = 0.0;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
  }
  return result;
}

void sub_1A110AD14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t QMIServiceMsg::createFromRawData(QMIServiceMsg *this, const unsigned __int8 *a2)
{
  return 0;
}

uint64_t QMIServiceMsg::createFromRawData()
{
  return 0;
}

uint64_t QMIServiceMsg::getTlv(QMIServiceMsg *this)
{
  __int16 v1 = (uint64_t *)*((void *)this + 6);
  if (v1 == *((uint64_t **)this + 3)) {
    return 0;
  }
  uint64_t v2 = *v1;
  *((void *)this + 6) = v1 + 1;
  return v2;
}

uint64_t QMIServiceMsg::getTlv(QMIServiceMsg *this, char a2)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  uint64_t v3 = (void *)*((void *)this + 3);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  int v7 = ___ZNK13QMIServiceMsg6getTlvEh_block_invoke;
  int v8 = &__block_descriptor_tmp_11;
  char v9 = a2;
  if (v2 == v3) {
    return 0;
  }
  while ((((uint64_t (*)(void *, void))v7)(v6, *v2) & 1) == 0)
  {
    if (++v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == *((void **)this + 3)) {
    return 0;
  }
  uint64_t result = *v2;
  *(_WORD *)(*v2 + 16) = 0;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t result;
  void v6[2];
  BOOL (*v7)(uint64_t, unsigned __int8 *);
  void *v8;
  char v9;

  uint64_t v2 = (void *)*((void *)this + 2);
  uint64_t v3 = (void *)*((void *)this + 3);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  int v7 = ___ZNK13QMIServiceMsg6getTlvEh_block_invoke;
  int v8 = &__block_descriptor_tmp_11;
  char v9 = a2;
  if (v2 == v3) {
    return 0;
  }
  while ((((uint64_t (*)(void *, void))v7)(v6, *v2) & 1) == 0)
  {
    if (++v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == *((void **)this + 3)) {
    return 0;
  }
  uint64_t result = *v2;
  *(_WORD *)(*v2 + 16) = 0;
  return result;
}

void QMIServiceMsg::addTlv(QMIServiceMsg *this, Tlv *a2)
{
  if (a2)
  {
    unint64_t v5 = (char *)*((void *)this + 3);
    unint64_t v4 = *((void *)this + 4);
    if ((unint64_t)v5 < v4)
    {
LABEL_3:
      *(void *)unint64_t v5 = a2;
      uint64_t v6 = (uint64_t)(v5 + 8);
      goto LABEL_25;
    }
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x120, "value", "!=", "NULL", 0, 0);
    unint64_t v5 = (char *)*((void *)this + 3);
    unint64_t v4 = *((void *)this + 4);
    if ((unint64_t)v5 < v4) {
      goto LABEL_3;
    }
  }
  int v7 = (char *)*((void *)this + 2);
  uint64_t v8 = (v5 - v7) >> 3;
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = v4 - (void)v7;
  if (v10 >> 2 > v9) {
    unint64_t v9 = v10 >> 2;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11)
  {
    if (v11 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(8 * v11);
    uint64_t v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)uint64_t v13 = a2;
    uint64_t v6 = (uint64_t)(v13 + 8);
    uint64_t v15 = (char *)(v5 - v7);
    if (v5 == v7) {
      goto LABEL_23;
    }
    goto LABEL_16;
  }
  uint64_t v12 = 0;
  uint64_t v13 = (char *)(8 * v8);
  uint64_t v14 = 0;
  *(void *)(8 * vMEMORY[0x1A622BDE0]((char *)this + 8) = a2;
  uint64_t v6 = 8 * v8 + 8;
  uint64_t v15 = (char *)(v5 - v7);
  if (v5 != v7)
  {
LABEL_16:
    unint64_t v16 = (unint64_t)(v15 - 8);
    if (v16 < 0x58) {
      goto LABEL_30;
    }
    if ((unint64_t)(v7 - v12) < 0x20) {
      goto LABEL_30;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v19 = &v5[-v18];
    v13 -= v18;
    uint64_t v20 = &v12[8 * v8 - 16];
    uint64_t v21 = v5 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v20 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v21 - 1);
      *(_OWORD *)uint64_t v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    unint64_t v5 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        uint64_t v24 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v13 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v24;
        v13 -= 8;
      }
      while (v5 != v7);
    }
    unint64_t v5 = (char *)*((void *)this + 2);
  }
LABEL_23:
  *((void *)this + 2) = v13;
  *((void *)this + 3) = v6;
  *((void *)this + 4) = v14;
  if (v5) {
    operator delete(v5);
  }
LABEL_25:
  *((void *)this + 3) = v6;
  *((_WORD *)this + 7) += *((_WORD *)a2 + 1) + 3;
  *((void *)this + 6) = *((void *)this + 2);
}

void QMIServiceMsg::createTlv(QMIServiceMsg *this@<X0>, char a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = operator new(0x18uLL);
  *(unsigned char *)uint64_t v8 = a2;
  v8[1] = a3;
  unint64_t v9 = operator new[](a3);
  *((void *)v8 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v9;
  v8[8] = 0;
  bzero(v9, a3);
  QMIServiceMsg::addTlv(this, (Tlv *)v8);
  *(void *)a4 = v8;
  *(_WORD *)(a4 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
}

void sub_1A110B19C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *QMIServiceMsg::encodeByte(void *this, unsigned __int8 **a2)
{
  *(unsigned char *)(*this)++ = (_BYTE)a2;
  return this;
}

unsigned char **QMIServiceMsg::encodeWord(unsigned char **this, unsigned __int8 **a2)
{
  **this = (_BYTE)a2;
  uint64_t v2 = (*this)++;
  v2[1] = BYTE1(a2);
  ++*this;
  return this;
}

void QMIServiceMsg::serialize(QMIServiceMsg *this, char *a2, uint64_t a3)
{
  if (!a2) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x16C, "buffer", "!=", "NULL", 0, 0);
  }
  *(_WORD *)a2 = *((_WORD *)this + 6);
  *((_WORD *)a2 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_WORD *)this + 7);
  uint64_t v6 = a2 + 4;
  int v7 = (char **)*((void *)this + 2);
  for (i = (char **)*((void *)this + 3); v7 != i; uint64_t v6 = &v11[v10])
  {
    unint64_t v9 = *v7++;
    size_t v10 = *((unsigned __int16 *)v9 + 1);
    *uint64_t v6 = *v9;
    *(_WORD *)(v6 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v10;
    unint64_t v11 = v6 + 3;
    memcpy(v6 + 3, *((const void **)v9 + 1), v10);
  }
  if (v6 > &a2[a3])
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x186, "buffer", "<=", "(uint8_t*)bufferPtr + bufferLen", v6, &a2[a3]);
  }
}

BOOL QMIServiceMsg::isError(QMIServiceMsg *this)
{
  return *((_DWORD *)this + 10) || *((_WORD *)this + 22) != 0;
}

uint64_t QMIServiceMsg::getNewError(QMIServiceMsg *this)
{
  int v1 = *((_DWORD *)this + 10);
  uint64_t result = *((unsigned __int16 *)this + 22);
  if (v1 == 1)
  {
    if (result < 6) {
      return dword_1A1127170[(__int16)result];
    }
    return result | 0xDEAD0000;
  }
  if (v1) {
    return result | 0xDEAD0000;
  }
  return result;
}

uint64_t QMIServiceMsg::getErrorString(QMIServiceMsg *this)
{
  return qmi::asString();
}

void _ATCSException::_ATCSException(_ATCSException *this, const char *a2, int a3, const char *a4, ...)
{
  va_start(va, a4);
  *(void *)this = &unk_1EF43DEA0;
  _ATCSException::constructCommon(this, a2, a3, a4, va);
}

{
  va_list va;

  va_start(va, a4);
  *(void *)this = &unk_1EF43DEA0;
  _ATCSException::constructCommon(this, a2, a3, a4, va);
}

uint64_t _ATCSException::constructCommon(_ATCSException *this, const char *a2, int a3, const char *a4, va_list a5)
{
  {
    int v16 = a3;
    a3 = v16;
    if (v17)
    {
      _ATCSException::constructCommon(char const*,unsigned int,char const*,char *)::trailerLength = 1;
      a3 = v16;
    }
  }
  uint64_t v9 = _ATCSException::constructCommon(char const*,unsigned int,char const*,char *)::trailerLength;
  unint64_t v10 = 512 - _ATCSException::constructCommon(char const*,unsigned int,char const*,char *)::trailerLength;
  unint64_t v11 = (char *)this + 8;
  uint64_t result = snprintf(v11, 512 - _ATCSException::constructCommon(char const*,unsigned int,char const*,char *)::trailerLength, "Exception at %s:%u: \n\t", a2, a3);
  if ((result & 0x80000000) == 0)
  {
    if (v10 <= result) {
      uint64_t v13 = 511 - v9;
    }
    else {
      uint64_t v13 = result;
    }
    unint64_t v14 = v10 - v13;
    if (v10 - v13 >= 2)
    {
      uint64_t result = vsnprintf(&v11[v13], v10 - v13, a4, a5);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unint64_t v15 = result;
      if (v14 <= result) {
        unint64_t v15 = v14 - 1;
      }
      v14 -= v15;
      v13 += v15;
    }
    return snprintf(&v11[v13], _ATCSException::constructCommon(char const*,unsigned int,char const*,char *)::trailerLength + v14, "%s", "\n");
  }
  return result;
}

void _ATCSException::append(_ATCSException *this, const char *a2, va_list a3)
{
  unint64_t v5 = (char *)this + 8;
  size_t v6 = strnlen((const char *)this + 8, 0x200uLL);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD860, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD860))
  {
    _MergedGlobals_2 = 1;
    __cxa_guard_release(&qword_1EBBDD860);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD870, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD870))
  {
    qword_1EBBDD868 = 1;
    __cxa_guard_release(&qword_1EBBDD870);
  }
  if (512 - v6 > qword_1EBBDD868 + _MergedGlobals_2)
  {
    size_t v7 = 512 - (v6 + _MergedGlobals_2 + qword_1EBBDD868);
    unsigned int v8 = snprintf(&v5[v6], v7, "%s", "\t");
    if ((v8 & 0x80000000) == 0)
    {
      size_t v9 = v7 - v8;
      size_t v10 = v6 + v8;
      if (v9 >= 2)
      {
        unsigned int v11 = vsnprintf(&v5[v10], v9, a2, a3);
        if ((v11 & 0x80000000) != 0) {
          return;
        }
        size_t v12 = v11;
        if (v9 <= v11) {
          size_t v12 = v9 - 1;
        }
        v9 -= v12;
        v10 += v12;
      }
      snprintf(&v5[v10], qword_1EBBDD868 + v9, "%s", "\n");
    }
  }
}

void _ATCSException::_ATCSException(_ATCSException *this, const _ATCSException *a2)
{
  *(void *)this = &unk_1EF43DEA0;
  strncpy((char *)this + 8, (const char *)a2 + 8, 0x200uLL);
}

{
  *(void *)this = &unk_1EF43DEA0;
  strncpy((char *)this + 8, (const char *)a2 + 8, 0x200uLL);
}

void _ATCSException::triggerAssertion(_ATCSException *this, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  int v9 = (int)a2;
  __b[65] = *(std::exception *)MEMORY[0x1E4F143B8];
  memset(__b, 170, 0x208uLL);
  _ATCSException::_ATCSException((_ATCSException *)__b, (const char *)this, v9, "Assertion failure %s %s %s", a3, a4, a5);
  pthread_mutex_lock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (qword_1EBBDD7C8) {
    goto LABEL_2;
  }
  size_t v12 = (void (**)(std::exception *))operator new(8uLL);
  *size_t v12 = 0;
  unsigned int v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43DEE0;
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
  *size_t v12 = (void (*)(std::exception *))DefaultATCSExceptionHandler;
  uint64_t v13 = (std::__shared_weak_count *)off_1EBBDD7D0;
  qword_1EBBDD7C8 = (uint64_t)v12;
  off_1EBBDD7D0 = v11;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_2:
    size_t v12 = (void (**)(std::exception *))qword_1EBBDD7C8;
    unsigned int v11 = (std::__shared_weak_count *)off_1EBBDD7D0;
    unint64_t v14 = (std::__shared_weak_count *)off_1EBBDD7D0;
    if (!off_1EBBDD7D0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unint64_t v14 = v11;
LABEL_8:
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_9:
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  (*v12)(__b);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  std::exception::~exception(__b);
}

void sub_1A110B98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, std::exception a15)
{
  operator delete(v15);
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  std::exception::~exception(&a15);
  _Unwind_Resume(a1);
}

void _ATCSException::triggerAssertion(_ATCSException *this, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6, const void *a7)
{
  int v12 = (int)a2;
  __b[65] = *(std::exception *)MEMORY[0x1E4F143B8];
  memset(__b, 170, 0x208uLL);
  _ATCSException::_ATCSException((_ATCSException *)__b, (const char *)this, v12, "Assertion failure %s %s %s, left operand %p right operand %p", a3, a4, a5, a6, a7);
  pthread_mutex_lock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (qword_1EBBDD7C8) {
    goto LABEL_2;
  }
  unint64_t v15 = (void (**)(std::exception *))operator new(8uLL);
  *unint64_t v15 = 0;
  unint64_t v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43DEE0;
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  *unint64_t v15 = (void (*)(std::exception *))DefaultATCSExceptionHandler;
  int v16 = (std::__shared_weak_count *)off_1EBBDD7D0;
  qword_1EBBDD7C8 = (uint64_t)v15;
  off_1EBBDD7D0 = v14;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_2:
    unint64_t v15 = (void (**)(std::exception *))qword_1EBBDD7C8;
    unint64_t v14 = (std::__shared_weak_count *)off_1EBBDD7D0;
    int v17 = (std::__shared_weak_count *)off_1EBBDD7D0;
    if (!off_1EBBDD7D0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v17 = v14;
LABEL_8:
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_9:
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  (*v15)(__b);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::exception::~exception(__b);
}

void sub_1A110BBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, std::exception a17)
{
  operator delete(v17);
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  std::exception::~exception(&a17);
  _Unwind_Resume(a1);
}

void _ATCSException::triggerAssertion(_ATCSException *this, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6, const char *a7, ...)
{
  va_start(va, a7);
  int v11 = (int)a2;
  __b[65] = *(std::exception *)MEMORY[0x1E4F143B8];
  memset(__b, 170, 0x208uLL);
  _ATCSException::_ATCSException((_ATCSException *)__b, (const char *)this, v11, "Assertion failure %s %s %s", a3, a4, a5);
  _ATCSException::append((_ATCSException *)__b, a6, va);
  pthread_mutex_lock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (qword_1EBBDD7C8) {
    goto LABEL_2;
  }
  unint64_t v14 = (void (**)(std::exception *))operator new(8uLL);
  std::__shared_weak_count *v14 = 0;
  uint64_t v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43DEE0;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  std::__shared_weak_count *v14 = (void (*)(std::exception *))DefaultATCSExceptionHandler;
  unint64_t v15 = (std::__shared_weak_count *)off_1EBBDD7D0;
  qword_1EBBDD7C8 = (uint64_t)v14;
  off_1EBBDD7D0 = v13;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
LABEL_2:
    unint64_t v14 = (void (**)(std::exception *))qword_1EBBDD7C8;
    uint64_t v13 = (std::__shared_weak_count *)off_1EBBDD7D0;
    int v16 = (std::__shared_weak_count *)off_1EBBDD7D0;
    if (!off_1EBBDD7D0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v16 = v13;
LABEL_8:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_9:
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  (*v14)(__b);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  std::exception::~exception(__b);
}

void sub_1A110BE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception a15)
{
  operator delete(v15);
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  std::exception::~exception(&a15);
  _Unwind_Resume(a1);
}

void _ATCSException::triggerAssertion(_ATCSException *this, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6, const void *a7, const char *a8, const char *a9, uint64_t a10, uint64_t a11, ...)
{
  int v17 = (int)a2;
  __b[65] = *(std::exception *)MEMORY[0x1E4F143B8];
  memset(__b, 170, 0x208uLL);
  _ATCSException::_ATCSException((_ATCSException *)__b, (const char *)this, v17, "Assertion failure %s %s %s, left operand %p right operand %p", a3, a4, a5, a6, a7);
  _ATCSException::append((_ATCSException *)__b, a8, (va_list)&a9);
  pthread_mutex_lock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (qword_1EBBDD7C8) {
    goto LABEL_2;
  }
  uint64_t v20 = (void (**)(std::exception *))operator new(8uLL);
  *uint64_t v20 = 0;
  uint64_t v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43DEE0;
  v19->__shared_owners_ = 0;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
  *uint64_t v20 = (void (*)(std::exception *))DefaultATCSExceptionHandler;
  uint64_t v21 = (std::__shared_weak_count *)off_1EBBDD7D0;
  qword_1EBBDD7C8 = (uint64_t)v20;
  off_1EBBDD7D0 = v19;
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_2:
    uint64_t v20 = (void (**)(std::exception *))qword_1EBBDD7C8;
    uint64_t v19 = (std::__shared_weak_count *)off_1EBBDD7D0;
    uint64_t v22 = (std::__shared_weak_count *)off_1EBBDD7D0;
    if (!off_1EBBDD7D0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v22 = v19;
LABEL_8:
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_9:
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  (*v20)(__b);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  std::exception::~exception(__b);
}

void sub_1A110C0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, std::exception a17)
{
  operator delete(v17);
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  std::exception::~exception(&a17);
  _Unwind_Resume(a1);
}

void _ATCSException::setExceptionHandler(_ATCSException *this, void (*a2)(_ATCSException *))
{
  pthread_mutex_lock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (!qword_1EBBDD7C8)
  {
    unint64_t v4 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
    v4->~__shared_weak_size_t count = 0;
    uint64_t v3 = (std::__shared_weak_count *)operator new(0x20uLL);
    v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43DEE0;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = v4;
    v4->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))DefaultATCSExceptionHandler;
    size_t v6 = (std::__shared_weak_count *)off_1EBBDD7D0;
    qword_1EBBDD7C8 = (uint64_t)v4;
    off_1EBBDD7D0 = v3;
    if (!v6) {
      goto LABEL_7;
    }
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  unint64_t v4 = (std::__shared_weak_count_vtbl *)qword_1EBBDD7C8;
  uint64_t v3 = (std::__shared_weak_count *)off_1EBBDD7D0;
  if (!off_1EBBDD7D0)
  {
    char v5 = 1;
    goto LABEL_8;
  }
LABEL_7:
  char v5 = 0;
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_8:
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (this) {
    size_t v7 = (void (*)(_ATCSException *))this;
  }
  else {
    size_t v7 = DefaultATCSExceptionHandler;
  }
  v4->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  if ((v5 & 1) == 0 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1A110C28C(_Unwind_Exception *a1)
{
  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t _ATCSException::what(_ATCSException *this)
{
  return (uint64_t)this + 8;
}

void _ATCSException::~_ATCSException(std::exception *this)
{
  std::exception::~exception(this);

  operator delete(v1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void DefaultATCSExceptionHandler(_ATCSException *a1)
{
  exception = (_ATCSException *)__cxa_allocate_exception(0x208uLL);
  _ATCSException::_ATCSException(exception, a1);
}

void std::__shared_ptr_pointer<ATCSExceptionHandlerGlobal *,std::shared_ptr<ATCSExceptionHandlerGlobal>::__shared_ptr_default_delete<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal>,std::allocator<ATCSExceptionHandlerGlobal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ATCSExceptionHandlerGlobal *,std::shared_ptr<ATCSExceptionHandlerGlobal>::__shared_ptr_default_delete<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal>,std::allocator<ATCSExceptionHandlerGlobal>>::__on_zero_shared(uint64_t a1)
{
  int v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ATCSExceptionHandlerGlobal *,std::shared_ptr<ATCSExceptionHandlerGlobal>::__shared_ptr_default_delete<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal>,std::allocator<ATCSExceptionHandlerGlobal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A1127224) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001A1127224 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A1127224)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A1127224 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t __cxx_global_var_init_0()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>::~PthreadMutexGuardPolicy, &ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance, &dword_1A10C7000);
  }
  return result;
}

ssize_t ReadBuffer::readFromFD(ReadBuffer *this, int a2)
{
  unsigned int v2 = *((_DWORD *)this + 2);
  unsigned int v3 = *((_DWORD *)this + 3) + *((_DWORD *)this + 4);
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  ssize_t v7 = read(a2, (void *)(*(void *)this + v3), v2 - v3);
  ssize_t v4 = v7;
  if (v7 < 0x80000000)
  {
    if (v7 <= 0) {
      return v4;
    }
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x58, "ret", "<=", "std::numeric_limits<int>::max()", (const char *)v7, (const void *)0x7FFFFFFF);
  }
  *((_DWORD *)this + 3) += v4;
  return v4;
}

void ReadBuffer::consume(ReadBuffer *this, char *a2)
{
  int v2 = (int)a2;
  ssize_t v4 = (const void *)*((unsigned int *)this + 3);
  if (v4 < a2)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x64, "amount", "<=", "fSize", (const char *)a2, v4);
    LODWORD(v4) = *((_DWORD *)this + 3);
  }
  unsigned int v5 = *((_DWORD *)this + 4) + v2;
  size_t v6 = (v4 - v2);
  *((_DWORD *)this + 3) = v6;
  *((_DWORD *)this + 4) = v5;
  if (v4 != v2)
  {
    if (v5 < *((_DWORD *)this + 2) >> 1) {
      return;
    }
    memmove(*(void **)this, (const void *)(*(void *)this + v5), v6);
  }
  *((_DWORD *)this + 4) = 0;
}

ATCSFileDescriptorIPCDriverPrivate *ATCSFileDescriptorIPCDriver::create(ATCSFileDescriptorIPCDriver *this, int a2, int a3)
{
  char v5 = (char)this;
  size_t v6 = (ATCSFileDescriptorIPCDriverPrivate *)operator new(0x128uLL);
  ATCSFileDescriptorIPCDriverPrivate::ATCSFileDescriptorIPCDriverPrivate(v6, v5, a2, a3);
  return v6;
}

void sub_1A110C6A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ATCSFileDescriptorIPCDriver::ATCSFileDescriptorIPCDriver(ATCSFileDescriptorIPCDriver *this)
{
  ATCSThreadedIPCDriver::ATCSThreadedIPCDriver(this);
  void *v1 = &unk_1EF43DF30;
}

void ATCSFileDescriptorIPCDriver::~ATCSFileDescriptorIPCDriver(pthread_cond_t **this)
{
  *this = (pthread_cond_t *)&unk_1EF43EA70;
  pthread_cond_destroy(this[5]);
  free(this[5]);
  int v2 = (pthread_mutex_t *)this[2];
  pthread_mutex_destroy(v2);
  if (v2) {
    operator delete(v2);
  }
}

void ATCSFileDescriptorIPCDriverPrivate::ATCSFileDescriptorIPCDriverPrivate(ATCSFileDescriptorIPCDriverPrivate *this, char a2, int a3, int a4)
{
  ATCSThreadedIPCDriver::ATCSThreadedIPCDriver(this);
  void *v8 = &unk_1EF43DFD8;
  int v9 = (pthread_cond_t *)malloc(0x30uLL);
  *((void *)this + MEMORY[0x1A622BDE0]((char *)this + 8) = v9;
  pthread_cond_init(v9, 0);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 9) = (char *)this + 80;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 1qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)this + 12) = (char *)this + 104;
  *((_DWORD *)this + 62) = -1;
  *((_DWORD *)this + 65) = 0;
  *((unsigned char *)this + 264) = a2;
  *((_DWORD *)this + 67) = a3;
  *((_DWORD *)this + 6MEMORY[0x1A622BDE0]((char *)this + 8) = a4;
  *((void *)this + 35) = 0;
  *((_WORD *)this + 144) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 16MEMORY[0x1A622BDE0]((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  int v10 = pipe((int *)this + 63);
  if (v10) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0xF6, "ret", "==", "0", (const char *)v10, 0);
  }
  int v11 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 62) = v11;
  if (__darwin_check_fd_set_overflow(v11, (char *)this + 120, 0)) {
    *(_DWORD *)((char *)this + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 120) |= 1 << v11;
  }
}

void sub_1A110C8B0(_Unwind_Exception *a1)
{
  ATCSFileDescriptorIPCDriver::~ATCSFileDescriptorIPCDriver(v1);
  _Unwind_Resume(a1);
}

void sub_1A110C8C4(_Unwind_Exception *a1)
{
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*v4);
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*v3);
  ATCSCondition::~ATCSCondition(v2);
  ATCSFileDescriptorIPCDriver::~ATCSFileDescriptorIPCDriver(v1);
  _Unwind_Resume(a1);
}

void ATCSFileDescriptorIPCDriverPrivate::~ATCSFileDescriptorIPCDriverPrivate(ATCSFileDescriptorIPCDriverPrivate *this)
{
  *(void *)this = &unk_1EF43DFD8;
  ATCSThreadedIPCDriver::tearDownInternal(this);
  close(*((_DWORD *)this + 63));
  close(*((_DWORD *)this + 64));
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((void **)this + 10));
  pthread_cond_destroy(*((pthread_cond_t **)this + 8));
  free(*((void **)this + 8));
  *(void *)this = &unk_1EF43EA70;
  pthread_cond_destroy(*((pthread_cond_t **)this + 5));
  free(*((void **)this + 5));
  int v2 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_destroy(v2);
  if (v2) {
    operator delete(v2);
  }
}

{
  void *v1;
  uint64_t vars8;

  ATCSFileDescriptorIPCDriverPrivate::~ATCSFileDescriptorIPCDriverPrivate(this);

  operator delete(v1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::getPrivateData(ATCSFileDescriptorIPCDriverPrivate *this, ATCSDispatcherCallback *a2)
{
  return (*(uint64_t (**)(ATCSDispatcherCallback *))(*(void *)a2 + 32))(a2);
}

void ATCSFileDescriptorIPCDriverPrivate::writeWorkerMainLoop(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  char v5 = pthread_self();
  if (!pthread_equal(v5, *(pthread_t *)(v4 + 64)))
  {
    uint64_t v6 = *(void *)(a1 + 16);
    ssize_t v7 = pthread_self();
    BOOL v8 = pthread_equal(v7, *(pthread_t *)(v6 + 64)) != 0;
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x114, "fLock.isLocked()", "==", "true", (const char *)v8, (const void *)1);
  }
  int v9 = (char *)operator new[](*(unsigned int *)(a1 + 272));
  int v10 = (void *)(a1 + 80);
  while (1)
  {
LABEL_4:
    if (*(unsigned char *)(a1 + 289))
    {
      *(unsigned char *)(a1 + 289) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, 1);
    }
    int v11 = *(_DWORD *)(a1 + 260);
    if (!v11) {
      break;
    }
    *(_DWORD *)(a1 + 260) = 0;
    int v12 = *(void **)(a1 + 72);
    if (v12 != v10) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    uint64_t v30 = *(pthread_mutex_t **)(a1 + 16);
    pthread_t v31 = pthread_self();
    v30[1].__sig = 0;
    pthread_cond_wait(*(pthread_cond_t **)(a1 + 64), v30);
    v30[1].__sig = (uint64_t)v31;
    if ((*(_DWORD *)(a1 + 56) & a2) != 0) {
      break;
    }
    if (*(unsigned char *)(a1 + 289))
    {
      *(unsigned char *)(a1 + 289) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, 1);
    }
    int v11 = *(_DWORD *)(a1 + 260);
    if (v11)
    {
      int v10 = (void *)(a1 + 80);
      *(_DWORD *)(a1 + 260) = 0;
      int v12 = *(void **)(a1 + 72);
      if (v12 == (void *)(a1 + 80)) {
        goto LABEL_4;
      }
LABEL_8:
      while (1)
      {
        int v13 = *((_DWORD *)v12 + 8);
        uint64_t v14 = v12[5];
        if (*(unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14)) {
          break;
        }
LABEL_20:
        unint64_t v27 = (void *)v12[1];
        if (v27)
        {
          do
          {
            uint64_t v28 = v27;
            unint64_t v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            uint64_t v28 = (void *)v12[2];
            BOOL v29 = *v28 == (void)v12;
            int v12 = v28;
          }
          while (!v29);
        }
        if (v28 != v10)
        {
          int v12 = v28;
          if (v11) {
            continue;
          }
        }
        goto LABEL_4;
      }
      --v11;
      while (1)
      {
        unint64_t v15 = *(pthread_mutex_t **)(a1 + 16);
        pthread_self();
        v15[1].__sig = 0;
        pthread_mutex_unlock(v15);
        int v16 = (*(uint64_t (**)(uint64_t, char *, void))(*(void *)v14 + 24))(v14, v9, *(unsigned int *)(a1 + 272));
        int v17 = *(pthread_mutex_t **)(a1 + 16);
        pthread_mutex_lock(v17);
        v17[1].__sig = (uint64_t)pthread_self();
        if ((*(_DWORD *)(a1 + 56) & a2) != 0) {
          goto LABEL_34;
        }
        size_t v18 = v16;
        if (v16 >= 1)
        {
          uint64_t v19 = *(pthread_mutex_t **)(a1 + 16);
          pthread_self();
          v19[1].__sig = 0;
          pthread_mutex_unlock(v19);
          uint64_t v20 = v9;
          do
          {
            if (!v18)
            {
              uint64_t v25 = *(pthread_mutex_t **)(a1 + 16);
              pthread_mutex_lock(v25);
              v25[1].__sig = (uint64_t)pthread_self();
              goto LABEL_10;
            }
            ssize_t v21 = write(v13, v20, v18);
            v20 += v21;
            v18 -= v21;
          }
          while ((v21 & 0x8000000000000000) == 0);
          ssize_t v22 = v21;
          long long v23 = *(pthread_mutex_t **)(a1 + 16);
          pthread_mutex_lock(v23);
          uint64_t v24 = (ATCSLogger *)pthread_self();
          v23[1].__sig = (uint64_t)v24;
          if (v22 < 0)
          {
            Instance = ATCSLogger::getInstance(v24);
            (*(void (**)(void *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 5, "Failed to write to completion, ret = %zd, fd = %d\n", v22, v13);
          }
        }
LABEL_10:
        if (!*(unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14))
        {
          int v10 = (void *)(a1 + 80);
          goto LABEL_20;
        }
      }
    }
  }
LABEL_34:

  operator delete[](v9);
}

pthread_t ATCSFileDescriptorIPCDriverPrivate::readWorkerMainLoop(uint64_t a1, int a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = pthread_self();
  if (!pthread_equal(v4, *(pthread_t *)(v3 + 64)))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = pthread_self();
    BOOL v7 = pthread_equal(v6, *(pthread_t *)(v5 + 64)) != 0;
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x16C, "fLock.isLocked()", "==", "true", (const char *)v7, (const void *)1);
  }
  int v53 = *(_DWORD *)(a1 + 248) + 1;
  long long v8 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)&v58.fds_bits[16] = *(_OWORD *)(a1 + 184);
  *(_OWORD *)&v58.fds_bits[20] = v8;
  long long v9 = *(_OWORD *)(a1 + 232);
  *(_OWORD *)&v58.fds_bits[24] = *(_OWORD *)(a1 + 216);
  *(_OWORD *)&v58.fds_bits[28] = v9;
  long long v10 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)v58.fds_bits = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v58.fds_bits[4] = v10;
  long long v11 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)&v58.fds_bits[8] = *(_OWORD *)(a1 + 152);
  *(_OWORD *)&v58.fds_bits[12] = v11;
  int v12 = (void *)(a1 + 80);
  int v13 = *(void **)(a1 + 72);
  if (v13 != (void *)(a1 + 80))
  {
    do
    {
      uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v13[5] + 32))(v13[5]);
      *(_DWORD *)(v14 + 20) = 0;
      *(_DWORD *)(v14 + 24) = 0;
      unint64_t v15 = (void *)v13[1];
      if (v15)
      {
        do
        {
          int v16 = v15;
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          int v16 = (void *)v13[2];
          BOOL v17 = *v16 == (void)v13;
          int v13 = v16;
        }
        while (!v17);
      }
      int v13 = v16;
    }
    while (v16 != v12);
  }
  while (1)
  {
LABEL_51:
    *(void *)&long long v45 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v45 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v57.fds_bits[24] = v45;
    *(_OWORD *)&v57.fds_bits[28] = v45;
    *(_OWORD *)&v57.fds_bits[16] = v45;
    *(_OWORD *)&v57.fds_bits[20] = v45;
    *(_OWORD *)&v57.fds_bits[8] = v45;
    *(_OWORD *)&v57.fds_bits[12] = v45;
    *(_OWORD *)v57.fds_bits = v45;
    *(_OWORD *)&v57.fds_bits[4] = v45;
    *(_OWORD *)&v56.fds_bits[24] = v45;
    *(_OWORD *)&v56.fds_bits[28] = v45;
    *(_OWORD *)&v56.fds_bits[16] = v45;
    *(_OWORD *)&v56.fds_bits[20] = v45;
    *(_OWORD *)&v56.fds_bits[8] = v45;
    *(_OWORD *)&v56.fds_bits[12] = v45;
    *(_OWORD *)v56.fds_bits = v45;
    *(_OWORD *)&v56.fds_bits[4] = v45;
    uint64_t v46 = *(pthread_mutex_t **)(a1 + 16);
    pthread_self();
    v46[1].__sig = 0;
    pthread_mutex_unlock(v46);
    fd_set v57 = v58;
    fd_set v56 = v58;
    int v19 = select(v53, &v57, 0, &v56, 0);
    uint64_t v47 = *(pthread_mutex_t **)(a1 + 16);
    pthread_mutex_lock(v47);
    pthread_t result = pthread_self();
    v47[1].__sig = (uint64_t)result;
    if ((*(_DWORD *)(a1 + 56) & a2) != 0) {
      return result;
    }
    if (v19 < 0) {
      break;
    }
    int v18 = *(_DWORD *)(a1 + 252);
    if (__darwin_check_fd_set_overflow(v18, &v57, 0)
      && ((*(unsigned int *)((char *)v57.fds_bits + (((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v18) & 1) != 0)
    {
      char v55 = -86;
      read(*(_DWORD *)(a1 + 252), &v55, 1uLL);
      --v19;
    }
    uint64_t v20 = *(void **)(a1 + 72);
    if (v20 != v12 && v19)
    {
      while (1)
      {
        int v21 = *((_DWORD *)v20 + 8);
        ssize_t v22 = (ATCSLogger *)__darwin_check_fd_set_overflow(v21, &v56, 0);
        if (v22)
        {
          if ((*(unsigned int *)((char *)v56.fds_bits + (((unint64_t)v21 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v21))
          {
            Instance = ATCSLogger::getInstance(v22);
            (*(void (**)(void *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 5, "select exception on FD %d\n", v21);
            if (*(void *)(a1 + 280))
            {
              uint64_t v24 = *(pthread_mutex_t **)(a1 + 16);
              pthread_self();
              v24[1].__sig = 0;
              pthread_mutex_unlock(v24);
              LOBYTE(v24) = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 280) + 24))(*(void *)(a1 + 280), v21, 0xFFFFFFFFLL);
              uint64_t v25 = *(pthread_mutex_t **)(a1 + 16);
              pthread_mutex_lock(v25);
              pthread_t result = pthread_self();
              v25[1].__sig = (uint64_t)result;
              if (v24) {
                return result;
              }
            }
          }
        }
        if (!__darwin_check_fd_set_overflow(v21, &v57, 0)
          || ((*(unsigned int *)((char *)v57.fds_bits + (((unint64_t)v21 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v21) & 1) == 0)
        {
          goto LABEL_45;
        }
        uint64_t v27 = v20[5];
        uint64_t v28 = *(pthread_mutex_t **)(a1 + 16);
        pthread_self();
        v28[1].__sig = 0;
        pthread_mutex_unlock(v28);
        uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 32))(v27);
        uint64_t v30 = v29;
        unsigned int v31 = *(_DWORD *)(v29 + 16);
        unsigned int v32 = *(_DWORD *)(v29 + 20) + *(_DWORD *)(v29 + 24);
        if (v31 >= v32)
        {
          ssize_t v34 = read(v21, (void *)(*(void *)(v29 + 8) + v32), v31 - v32);
          int v33 = v34;
          if (v34 >= 0x80000000)
          {
            _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x58, "ret", "<=", "std::numeric_limits<int>::max()", (const char *)v34, (const void *)0x7FFFFFFF);
LABEL_31:
            *(_DWORD *)(v30 + 20) += v33;
            goto LABEL_32;
          }
          if (v34 > 0) {
            goto LABEL_31;
          }
        }
        else
        {
          int v33 = -1;
        }
LABEL_32:
        uint64_t v35 = *(pthread_mutex_t **)(a1 + 16);
        pthread_mutex_lock(v35);
        pthread_t result = pthread_self();
        v35[1].__sig = (uint64_t)result;
        if ((*(_DWORD *)(a1 + 56) & a2) != 0) {
          return result;
        }
        if (v33 < 0)
        {
          if (*(void *)(a1 + 280))
          {
            uint64_t v48 = *(pthread_mutex_t **)(a1 + 16);
            pthread_self();
            v48[1].__sig = 0;
            pthread_mutex_unlock(v48);
            (*(void (**)(void, const char *))(**(void **)(a1 + 280) + 32))(*(void *)(a1 + 280), "Writing to read buffer failed");
            goto LABEL_57;
          }
          return result;
        }
        uint64_t v36 = *(pthread_mutex_t **)(a1 + 16);
        pthread_self();
        v36[1].__sig = 0;
        pthread_mutex_unlock(v36);
        if (*(_DWORD *)(v30 + 20))
        {
          unsigned int v37 = *(_DWORD *)(v30 + 24);
          do
          {
            unsigned int v38 = (*(uint64_t (**)(uint64_t, void))(*(void *)v27 + 16))(v27, *(void *)(v30 + 8) + v37);
            unsigned int v39 = v38;
            if (!v38) {
              break;
            }
            uint64_t v40 = (const void *)*(unsigned int *)(v30 + 20);
            if (v40 < v38)
            {
              _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x64, "amount", "<=", "fSize", (const char *)v38, v40);
              LODWORD(v40) = *(_DWORD *)(v30 + 20);
            }
            unsigned int v37 = *(_DWORD *)(v30 + 24) + v39;
            size_t v41 = v40 - v39;
            *(_DWORD *)(v30 + 20) = v41;
            *(_DWORD *)(v30 + 24) = v37;
            if (v40 != v39)
            {
              if (v37 < *(_DWORD *)(v30 + 16) >> 1) {
                continue;
              }
              memmove(*(void **)(v30 + 8), (const void *)(*(void *)(v30 + 8) + v37), v41);
              LODWORD(v4qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(_DWORD *)(v30 + 20);
            }
            unsigned int v37 = 0;
            *(_DWORD *)(v30 + 24) = 0;
          }
          while (v41);
        }
        long long v42 = *(pthread_mutex_t **)(a1 + 16);
        pthread_mutex_lock(v42);
        pthread_t result = pthread_self();
        v42[1].__sig = (uint64_t)result;
        if ((*(_DWORD *)(a1 + 56) & a2) != 0) {
          return result;
        }
LABEL_45:
        uint64_t v43 = (void *)v20[1];
        if (v43)
        {
          do
          {
            long long v44 = v43;
            uint64_t v43 = (void *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            long long v44 = (void *)v20[2];
            BOOL v17 = *v44 == (void)v20;
            uint64_t v20 = v44;
          }
          while (!v17);
        }
        uint64_t v20 = v44;
        if (v44 == v12) {
          goto LABEL_51;
        }
      }
    }
  }
  if (*(void *)(a1 + 280))
  {
    unint64_t v49 = *(pthread_mutex_t **)(a1 + 16);
    pthread_self();
    v49[1].__sig = 0;
    pthread_mutex_unlock(v49);
    uint64_t v50 = *(void *)(a1 + 280);
    uint64_t v51 = __error();
    (*(void (**)(uint64_t, void))(*(void *)v50 + 16))(v50, *v51);
LABEL_57:
    uint64_t v52 = *(pthread_mutex_t **)(a1 + 16);
    pthread_mutex_lock(v52);
    pthread_t result = pthread_self();
    v52[1].__sig = (uint64_t)result;
  }
  return result;
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::handleWriteReady(ATCSFileDescriptorIPCDriverPrivate *this, ATCSDispatcherCallback *a2, void *a3)
{
  uint64_t v5 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v5);
  v5[1].__sig = (uint64_t)pthread_self();
  if (!*((unsigned char *)this + 288))
  {
    *(unsigned char *)(*(uint64_t (**)(ATCSDispatcherCallback *))(*(void *)a2 + 32))(a2) = 1;
    ++*((_DWORD *)this + 65);
    pthread_cond_signal(*((pthread_cond_t **)this + 8));
  }
  uint64_t v6 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v6[1].__sig = 0;
  return pthread_mutex_unlock(v6);
}

void sub_1A110D4B0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::clearWriteReady(ATCSFileDescriptorIPCDriverPrivate *this, ATCSDispatcherCallback *a2, void *a3)
{
  uint64_t v5 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v5);
  v5[1].__sig = (uint64_t)pthread_self();
  *(unsigned char *)(*(uint64_t (**)(ATCSDispatcherCallback *))(*(void *)a2 + 32))(a2) = 0;
  uint64_t v6 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v6[1].__sig = 0;
  return pthread_mutex_unlock(v6);
}

void sub_1A110D558(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

void ATCSFileDescriptorIPCDriverPrivate::kickReader(ATCSFileDescriptorIPCDriverPrivate *this)
{
  __long long buf = -86;
  uint64_t v1 = (const char *)write(*((_DWORD *)this + 64), &__buf, 1uLL);
  __error();
  if (v1 != (const char *)1) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x234, "ret", "==", "sizeof( buff)", v1, (const void *)1);
  }
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::kickWriter(pthread_cond_t **this)
{
  return pthread_cond_signal(this[8]);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::registerDispatcher(ATCSFileDescriptorIPCDriverPrivate *this, ATCSDispatcherCallback *a2, void *a3, void **a4)
{
  int v5 = (int)a3;
  long long v8 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v8);
  v8[1].__sig = (uint64_t)pthread_self();
  if (*((unsigned char *)this + 264) && *((_DWORD *)this + 12)) {
    ATCSThreadedIPCDriver::stopWorkersInternal(this);
  }
  long long v11 = (uint64_t **)((char *)this + 80);
  long long v10 = (uint64_t *)*((void *)this + 10);
  if (v10)
  {
    int v12 = (uint64_t **)((char *)this + 80);
    int v13 = (char *)*((void *)this + 10);
    do
    {
      int v14 = *((_DWORD *)v13 + 8);
      BOOL v15 = v14 < v5;
      if (v14 >= v5) {
        int v16 = (char **)v13;
      }
      else {
        int v16 = (char **)(v13 + 8);
      }
      if (!v15) {
        int v12 = (uint64_t **)v13;
      }
      int v13 = *v16;
    }
    while (*v16);
    if (v12 == v11
      || *((_DWORD *)v12 + 8) > v5
      || (_ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x248, "i", "==", "fMap.end()", v9), v10 = *v11, BOOL v17 = (uint64_t **)((char *)this + 80), *v11))
    {
      while (1)
      {
        while (1)
        {
          BOOL v17 = (uint64_t **)v10;
          int v18 = *((_DWORD *)v10 + 8);
          if (v18 <= v5) {
            break;
          }
          long long v10 = *v17;
          long long v11 = v17;
          if (!*v17) {
            goto LABEL_23;
          }
        }
        if (v18 >= v5) {
          break;
        }
        long long v10 = v17[1];
        if (!v10)
        {
          long long v11 = v17 + 1;
          goto LABEL_23;
        }
      }
      v17[5] = (uint64_t *)a2;
      long long v23 = (void *)((char *)this + 104);
      ssize_t v22 = (void *)*((void *)this + 13);
      if (v22) {
        goto LABEL_30;
      }
      goto LABEL_26;
    }
  }
  else
  {
    BOOL v17 = (uint64_t **)((char *)this + 80);
  }
LABEL_23:
  int v19 = operator new(0x30uLL);
  v19[8] = v5;
  *((void *)v19 + 5) = 0;
  *(void *)int v19 = 0;
  *((void *)v19 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)v19 + 2) = v17;
  std::__shared_weak_count *v11 = (uint64_t *)v19;
  uint64_t v20 = **((void **)this + 9);
  int v21 = (uint64_t *)v19;
  if (v20)
  {
    *((void *)this + 9) = v20;
    int v21 = *v11;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 10), v21);
  ++*((void *)this + 11);
  *((void *)v19 + 5) = a2;
  long long v23 = (void *)((char *)this + 104);
  ssize_t v22 = (void *)*((void *)this + 13);
  if (!v22)
  {
LABEL_26:
    uint64_t v24 = v23;
LABEL_34:
    uint64_t v26 = operator new(0x30uLL);
    v26[4] = a2;
    *((_DWORD *)v26 + 10) = 0;
    *uint64_t v26 = 0;
    v26[1] = 0;
    void v26[2] = v24;
    *long long v23 = v26;
    uint64_t v27 = **((void **)this + 12);
    uint64_t v28 = v26;
    if (v27)
    {
      *((void *)this + 12) = v27;
      uint64_t v28 = (uint64_t *)*v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 13), v28);
    ++*((void *)this + 14);
    goto LABEL_38;
  }
  while (1)
  {
LABEL_30:
    while (1)
    {
      uint64_t v24 = v22;
      unint64_t v25 = v22[4];
      if (v25 <= (unint64_t)a2) {
        break;
      }
      ssize_t v22 = (void *)*v24;
      long long v23 = v24;
      if (!*v24) {
        goto LABEL_34;
      }
    }
    if (v25 >= (unint64_t)a2) {
      break;
    }
    ssize_t v22 = (void *)v24[1];
    if (!v22)
    {
      long long v23 = v24 + 1;
      goto LABEL_34;
    }
  }
  uint64_t v26 = v24;
LABEL_38:
  *((_DWORD *)v26 + 10) = v5;
  if (__darwin_check_fd_set_overflow(v5, (char *)this + 120, 0)) {
    *(_DWORD *)((char *)this + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 120) |= 1 << v5;
  }
  if (*((_DWORD *)this + 62) < v5) {
    *((_DWORD *)this + 62) = v5;
  }
  uint64_t v29 = operator new(0x20uLL);
  size_t v30 = *((unsigned int *)this + 67);
  *(unsigned char *)uint64_t v29 = 1;
  v29[1] = 0;
  *((_DWORD *)v29 + 5) = 0;
  *((_DWORD *)v29 + 6) = 0;
  *((_DWORD *)v29 + 4) = v30;
  v29[1] = operator new[](v30);
  *a4 = v29;
  ++*((_DWORD *)this + 65);
  if (*((unsigned char *)this + 264)) {
    ATCSThreadedIPCDriver::startWorkersInternal(this);
  }
  unsigned int v31 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v31[1].__sig = 0;
  return pthread_mutex_unlock(v31);
}

void sub_1A110D8D8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::unregisterDispatcher(ATCSFileDescriptorIPCDriverPrivate *this, ATCSDispatcherCallback *a2, void **a3)
{
  uint64_t v6 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v6);
  v6[1].__sig = (uint64_t)pthread_self();
  if (*((unsigned char *)this + 264) && *((_DWORD *)this + 12)) {
    ATCSThreadedIPCDriver::stopWorkersInternal(this);
  }
  long long v8 = (void *)*((void *)this + 13);
  if (!v8) {
    goto LABEL_15;
  }
  long long v9 = (char *)this + 104;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= (unint64_t)a2;
    if (v10 >= (unint64_t)a2) {
      int v12 = v8;
    }
    else {
      int v12 = v8 + 1;
    }
    if (v11) {
      long long v9 = (char *)v8;
    }
    long long v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 == (char *)this + 104 || *((void *)v9 + 4) > (unint64_t)a2)
  {
LABEL_15:
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x26A, "i", "!=", "fReverseMap.end()", v7);
    long long v9 = (char *)this + 104;
  }
  int v13 = (char *)*((void *)v9 + 1);
  if (v13)
  {
    do
    {
      int v14 = v13;
      int v13 = *(char **)v13;
    }
    while (v13);
  }
  else
  {
    BOOL v15 = v9;
    do
    {
      int v14 = (char *)*((void *)v15 + 2);
      BOOL v16 = *(void *)v14 == (void)v15;
      BOOL v15 = v14;
    }
    while (!v16);
  }
  unint64_t v17 = *((int *)v9 + 10);
  if (*((char **)this + 12) == v9) {
    *((void *)this + 12) = v14;
  }
  int v18 = (uint64_t *)*((void *)this + 13);
  --*((void *)this + 14);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v18, (uint64_t *)v9);
  operator delete(v9);
  uint64_t v20 = (char *)*((void *)this + 10);
  if (!v20) {
    goto LABEL_34;
  }
  int v21 = (char *)this + 80;
  do
  {
    int v22 = *((_DWORD *)v20 + 8);
    BOOL v23 = v22 < (int)v17;
    if (v22 >= (int)v17) {
      uint64_t v24 = (char **)v20;
    }
    else {
      uint64_t v24 = (char **)(v20 + 8);
    }
    if (!v23) {
      int v21 = v20;
    }
    uint64_t v20 = *v24;
  }
  while (*v24);
  if (v21 == (char *)this + 80 || (int)v17 < *((_DWORD *)v21 + 8))
  {
LABEL_34:
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x271, "j", "!=", "fMap.end()", v19);
    int v21 = (char *)this + 80;
  }
  unint64_t v25 = (char *)*((void *)v21 + 1);
  if (v25)
  {
    do
    {
      uint64_t v26 = v25;
      unint64_t v25 = *(char **)v25;
    }
    while (v25);
  }
  else
  {
    uint64_t v27 = v21;
    do
    {
      uint64_t v26 = (char *)*((void *)v27 + 2);
      BOOL v16 = *(void *)v26 == (void)v27;
      uint64_t v27 = v26;
    }
    while (!v16);
  }
  if (*((char **)this + 9) == v21) {
    *((void *)this + 9) = v26;
  }
  uint64_t v28 = (uint64_t *)*((void *)this + 10);
  --*((void *)this + 11);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v28, (uint64_t *)v21);
  operator delete(v21);
  uint64_t v29 = (char *)this + 120;
  if (__darwin_check_fd_set_overflow(v17, (char *)this + 120, 0)) {
    *(_DWORD *)&v29[(v17 >> 3) & 0x1FFFFFFFFFFFFFFCLL] &= ~(1 << v17);
  }
  if (v17 == *((_DWORD *)this + 62))
  {
    if ((int)v17 < 1)
    {
LABEL_52:
      unsigned int v31 = *((_DWORD *)this + 63);
    }
    else
    {
      int v30 = v17 + 1;
      while (1)
      {
        unsigned int v31 = v30 - 2;
        if (__darwin_check_fd_set_overflow(v30 - 2, (char *)this + 120, 0))
        {
          if ((*(_DWORD *)&v29[4 * (v31 >> 5)] >> v31)) {
            break;
          }
        }
        if (--v30 <= 1) {
          goto LABEL_52;
        }
      }
    }
    *((_DWORD *)this + 62) = v31;
  }
  unsigned int v32 = *a3;
  if (*a3)
  {
    int v33 = (void *)v32[1];
    if (v33
      || (_ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x31, "fBuffer", "!=", "NULL", 0, 0), (int v33 = (void *)v32[1]) != 0))
    {
      operator delete[](v33);
    }
    operator delete(v32);
  }
  *a3 = 0;
  if (*((unsigned char *)this + 264) && *((void *)this + 11)) {
    ATCSThreadedIPCDriver::startWorkersInternal(this);
  }
  ssize_t v34 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v34[1].__sig = 0;
  return pthread_mutex_unlock(v34);
}

void sub_1A110DC28(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::enterLowPower(ATCSFileDescriptorIPCDriverPrivate *this)
{
  int v2 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  *((unsigned char *)this + 28MEMORY[0x1A622BDE0]((char *)this + 8) = 1;
  (*(void (**)(ATCSFileDescriptorIPCDriverPrivate *, void))(*(void *)this + 152))(this, 0);
  uint64_t v3 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v3[1].__sig = 0;
  return pthread_mutex_unlock(v3);
}

void sub_1A110DCDC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::exitLowPower(ATCSFileDescriptorIPCDriverPrivate *this)
{
  int v2 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  *((_WORD *)this + 144) = 256;
  pthread_cond_signal(*((pthread_cond_t **)this + 8));
  uint64_t v3 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v3[1].__sig = 0;
  return pthread_mutex_unlock(v3);
}

void sub_1A110DD5C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::setErrorHandler(uint64_t result, uint64_t a2)
{
  *(void *)(result + 280) = a2;
  return result;
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::reconfigureWithMask(ATCSFileDescriptorIPCDriverPrivate *this, fd_set *__src)
{
  if (*((_DWORD *)this + 12))
  {
    ATCSThreadedIPCDriver::stopWorkersInternal(this);
    uint64_t v4 = (const char *)*((unsigned int *)this + 12);
    if (v4) {
      ATCSThreadedIPCDriver::stopWorkersInternal(this);
    }
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x2AE, "stopWorkersIfNeeded()", "==", "kNobody", v4, 0);
  }
  int v5 = (char *)this + 120;
  memmove((char *)this + 120, __src, 0x80uLL);
  int v6 = *((_DWORD *)this + 63);
  uint64_t result = __darwin_check_fd_set_overflow(v6, v5, 0);
  if (result) {
    *(_DWORD *)&v5[((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v6;
  }
  return result;
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::handleWriteReadyForAllInternal(uint64_t this, char a2)
{
  int v2 = *(void **)(this + 72);
  uint64_t v3 = (void *)(this + 80);
  if (v2 != (void *)(this + 80))
  {
    if (a2)
    {
      uint64_t v5 = this;
      do
      {
        this = (*(uint64_t (**)(void))(*(void *)v2[5] + 32))(v2[5]);
        *(unsigned char *)this = a2;
        ++*(_DWORD *)(v5 + 260);
        long long v9 = (void *)v2[1];
        if (v9)
        {
          do
          {
            unint64_t v10 = v9;
            long long v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            unint64_t v10 = (void *)v2[2];
            BOOL v8 = *v10 == (void)v2;
            int v2 = v10;
          }
          while (!v8);
        }
        int v2 = v10;
      }
      while (v10 != v3);
    }
    else
    {
      do
      {
        this = (*(uint64_t (**)(void))(*(void *)v2[5] + 32))(v2[5]);
        *(unsigned char *)this = a2;
        int v6 = (void *)v2[1];
        if (v6)
        {
          do
          {
            BOOL v7 = v6;
            int v6 = (void *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            BOOL v7 = (void *)v2[2];
            BOOL v8 = *v7 == (void)v2;
            int v2 = v7;
          }
          while (!v8);
        }
        int v2 = v7;
      }
      while (v7 != v3);
    }
  }
  return this;
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::handleWriteReadyForAll(ATCSFileDescriptorIPCDriverPrivate *this)
{
  int v2 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  (*(void (**)(ATCSFileDescriptorIPCDriverPrivate *, uint64_t))(*(void *)this + 152))(this, 1);
  uint64_t v3 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v3[1].__sig = 0;
  return pthread_mutex_unlock(v3);
}

void sub_1A110DFE8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::bootstrapInternal(_opaque_pthread_t *this)
{
  return ATCSThreadedIPCDriver::bootstrapInternal(this, this->__opaque[248]);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::startWorkers(ATCSFileDescriptorIPCDriverPrivate *this)
{
  if (*((unsigned char *)this + 264)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x9F, "fAutostart", "==", "false", (const char *)1, 0);
  }

  return ATCSThreadedIPCDriver::startRemainingWorkers((_opaque_pthread_t *)this);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::stopWorkers(ATCSFileDescriptorIPCDriverPrivate *this)
{
  int v2 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  if (*((unsigned char *)this + 264)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0xA6, "fAutostart", "==", "false", (const char *)1, 0);
  }
  if (*((_DWORD *)this + 12)) {
    ATCSThreadedIPCDriver::stopWorkersInternal(this);
  }
  uint64_t v3 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v3[1].__sig = 0;
  return pthread_mutex_unlock(v3);
}

void sub_1A110E114(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

qmi::Server::State *qmi::Server::State::State(qmi::Server::State *this)
{
  int v2 = dispatch_queue_create("qmi::Server", 0);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, "com.apple.telephony.bb", "server");
  *(void *)this = 0;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)this + 2) = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  *((void *)this + 3) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((qmi::Server::State *)((char *)this + 32), (const ctu::OsLogLogger *)v6);
  MEMORY[0x1A622BDE0](v6);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_object_t object = xpc_null_create();
  MEMORY[0x1A622BEA0]((char *)this + 40, &object);
  xpc_release(object);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  return this;
}

void sub_1A110E214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  ctu::SharedLoggable<qmi::ClientProxy::State,ctu::OsLogLogger>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void qmi::Server::State::~State(qmi::Server::State *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 7);
    uint64_t v4 = (void *)*((void *)this + 6);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v2;
    operator delete(v4);
  }
  MEMORY[0x1A622BEB0]((char *)this + 40);
  MEMORY[0x1A622BDE0]((char *)this + 32);
  int v6 = *((void *)this + 3);
  if (v6) {
    dispatch_release(v6);
  }
  BOOL v7 = *((void *)this + 2);
  if (v7) {
    dispatch_release(v7);
  }
  BOOL v8 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void qmi::Server::State::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (qmi::Server::State *)operator new(0x48uLL);
  qmi::Server::State::State(v4);
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Server::State>::shared_ptr[abi:ne180100]<qmi::Server::State,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State*)#1},void>((std::__shared_weak_count_vtbl **)a2, (std::__shared_weak_count_vtbl *)v4);
  qmi::Server::State::init_sync(*(uint64_t **)a2, a1);
}

void sub_1A110E390(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A110E3A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void qmi::Server::State::init_sync(uint64_t *a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v3 = (xpc_connection_t *)(a1 + 5);
  ctu::XpcServerHelper::setListener();
  xpc_release(object);
  uint64_t v4 = a1[2];
  if (v4) {
    dispatch_retain((dispatch_object_t)a1[2]);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (!v5 || (uint64_t v6 = *a1, (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v8 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (MEMORY[0x1A622CC50](*v3) == MEMORY[0x1E4F14578])
  {
    long long v9 = *v3;
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN3ctu15XpcServerHelper13startListenerIN3qmi6Server5StateEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    handler[3] = &__block_descriptor_tmp_10;
    handler[4] = v3;
    void handler[5] = v6;
    int v12 = v8;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v13 = v9;
    xpc_connection_set_event_handler(v9, handler);
    xpc_connection_set_target_queue(*v3, v4);
    xpc_connection_resume(*v3);
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  std::__shared_weak_count::__release_weak(v8);
  if (v4) {
    dispatch_release(v4);
  }
}

void sub_1A110E550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  std::__shared_weak_count::__release_weak(v18);
  if (v17) {
    dispatch_release(v17);
  }
  _Unwind_Resume(a1);
}

void qmi::Server::State::handleListenerError(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(NSObject **)(a1 + 32);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    return;
  }
  uint64_t v4 = (char *)MEMORY[0x1A622CB80](*a2);
  memset(__dst, 170, sizeof(__dst));
  size_t v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    BOOL v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    __dst[2] = (void *)(v9 | 0x8000000000000000);
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(__dst[2]) = v5;
    BOOL v7 = __dst;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memcpy(v7, v4, (size_t)v6);
LABEL_11:
  *((unsigned char *)v6 + (void)v7) = 0;
  free(v4);
  unint64_t v10 = __dst;
  if (SHIBYTE(__dst[2]) < 0) {
    unint64_t v10 = (void **)__dst[0];
  }
  *(_DWORD *)long long buf = 136315138;
  int v13 = v10;
  _os_log_debug_impl(&dword_1A10C7000, v3, OS_LOG_TYPE_DEBUG, "#D Connection error: %s", buf, 0xCu);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
}

uint64_t qmi::Server::State::handleNewClient(uint64_t *a1, xpc_object_t *a2)
{
  uint64_t v3 = (_xpc_connection_s *)*a2;
  if (!*a2)
  {
    uint64_t v3 = (_xpc_connection_s *)xpc_null_create();
    uint64_t v4 = a1[2];
    if (!v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  xpc_retain(*a2);
  uint64_t v4 = a1[2];
  if (v4) {
LABEL_3:
  }
    dispatch_retain(v4);
LABEL_4:
  size_t v5 = (std::__shared_weak_count *)a1[1];
  if (!v5 || (uint64_t v6 = *a1, (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  p_uint64_t shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZNK3ctu15XpcServerHelper12acceptClientIN3qmi6Server5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
  handler[3] = &__block_descriptor_tmp_10_0;
  handler[4] = v6;
  int v12 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v13 = v3;
  xpc_connection_set_event_handler(v3, handler);
  xpc_connection_set_target_queue(v3, v4);
  xpc_connection_resume(v3);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::__shared_weak_count::__release_weak(v8);
  if (v4) {
    dispatch_release(v4);
  }
  xpc_release(v3);
  return 1;
}

void sub_1A110E89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v17);
  if (v16) {
    dispatch_release(v16);
  }
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void qmi::Server::State::handleClientMessage(void *a1, uint64_t a2, xpc_object_t *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = (xpc_object_t *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = MEMORY[0x1A622CC50](*a3);
  uint64_t v7 = MEMORY[0x1E4F14590];
  if (v6 == MEMORY[0x1E4F14590])
  {
    xpc_object_t reply = xpc_dictionary_create_reply(*a3);
    if (reply || (xpc_object_t reply = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A622CC50](reply) == v7)
      {
        xpc_retain(reply);
        xpc_object_t v8 = reply;
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t reply = 0;
    }
    xpc_object_t v10 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v10);
    xpc_release(reply);
  }
  else
  {
    xpc_object_t v8 = v5;
  }
  if (MEMORY[0x1A622CC50](v8) == v7)
  {
    BOOL v11 = (xpc_object_t *)operator new(8uLL);
    xpc_object_t *v11 = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t *v11 = xpc_null_create();
    }
    int v12 = operator new(0x28uLL);
    *int v12 = &unk_1EF43E0B8;
    v12[1] = 0;
    xpc_object_t v12[2] = 0;
    void v12[3] = v11;
    v12[4] = MEMORY[0x1E4FBA1A0];
  }
  else
  {
    BOOL v11 = 0;
    int v12 = 0;
  }
  uint64_t v36 = v11;
  unint64_t v37 = (unint64_t)v12;
  xpc_release(v8);
  int v13 = (long long *)a1[6];
  while (v13 != (long long *)a1[7])
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v14 = (std::__shared_weak_count *)*((void *)v13 + 1);
    if (v14)
    {
      BOOL v15 = std::__shared_weak_count::lock(v14);
      __p[1] = v15;
      if (v15)
      {
        BOOL v16 = *(void **)v13;
        __p[0] = v16;
        if (v16)
        {
          int v17 = (*(uint64_t (**)(void *, xpc_object_t *, void *))(*(void *)v16 + 16))(v16, a3, a1 + 2);
          v13 += v17 ^ 1u;
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_38:
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
LABEL_18:
          if ((v17 | 2) != 2) {
            goto LABEL_45;
          }
          continue;
        }
      }
    }
    else
    {
      BOOL v15 = 0;
    }
    int v18 = v13 + 1;
    int v19 = (long long *)a1[7];
    if (v13 + 1 == v19)
    {
      uint64_t v20 = v13;
    }
    else
    {
      do
      {
        long long v21 = *v18;
        *(void *)int v18 = 0;
        *((void *)v18 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
        int v22 = (std::__shared_weak_count *)*((void *)v18 - 1);
        *(v18 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v21;
        if (v22) {
          std::__shared_weak_count::__release_weak(v22);
        }
        ++v18;
      }
      while (v18 != v19);
      uint64_t v20 = v18 - 1;
      int v18 = (long long *)a1[7];
    }
    while (v18 != v20)
    {
      BOOL v23 = (std::__shared_weak_count *)*((void *)v18 - 1);
      if (v23) {
        std::__shared_weak_count::__release_weak(v23);
      }
      --v18;
    }
    a1[7] = v20;
    if (v15)
    {
      int v17 = 2;
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_38;
      }
      goto LABEL_18;
    }
  }
  uint64_t v24 = a1[4];
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_1A10C7000, v24, OS_LOG_TYPE_DEFAULT, "#I Incoming connection was not accepted; dropped.",
      (uint8_t *)__p,
      2u);
    uint64_t v24 = a1[4];
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = (char *)MEMORY[0x1A622CB80](*a3);
    memset(__p, 170, 24);
    size_t v29 = strlen(v28);
    if (v29 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    int v30 = (void *)v29;
    if (v29 >= 0x17)
    {
      uint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v32 = v29 | 7;
      }
      uint64_t v33 = v32 + 1;
      unsigned int v31 = operator new(v32 + 1);
      __p[1] = v30;
      __p[2] = (void *)(v33 | 0x8000000000000000);
      __p[0] = v31;
    }
    else
    {
      HIBYTE(__p[2]) = v29;
      unsigned int v31 = __p;
      if (!v29) {
        goto LABEL_57;
      }
    }
    memcpy(v31, v28, (size_t)v30);
LABEL_57:
    *((unsigned char *)v30 + (void)v3qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
    free(v28);
    ssize_t v34 = __p;
    if (SHIBYTE(__p[2]) < 0) {
      ssize_t v34 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315138;
    unsigned int v39 = v34;
    _os_log_debug_impl(&dword_1A10C7000, v24, OS_LOG_TYPE_DEBUG, "#D  -- details of dropped connection: %s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  xpc_object_t v25 = xpc_string_create("not accepted");
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_dictionary_set_value(*v36, "error", v25);
  xpc_object_t v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
LABEL_45:
  uint64_t v27 = (std::__shared_weak_count *)v37;
  if (v37)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v37 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1A110EDB4()
{
}

void sub_1A110EDE4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1A110EE34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A110EE2C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1A110EE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1A110EE58);
}

void qmi::Server::State::getEndpoint(NSObject **this@<X0>, xpc_object_t *a2@<X8>)
{
  uint64_t v4 = (qmi::Server::State *)this;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Server5StateEE20execute_wrapped_syncIZNKS3_11getEndpointEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  void v5[3] = &__block_descriptor_tmp_12;
  v5[4] = this;
  void v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v3 = this[2];
  if (this[3])
  {
    *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a2 = xpc_null_create();
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    xpc_object_t v10 = &__block_descriptor_tmp_15;
    BOOL v11 = a2;
    int v12 = &v6;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a2 = xpc_null_create();
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch9sync_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    xpc_object_t v10 = &__block_descriptor_tmp_14;
    BOOL v11 = a2;
    int v12 = &v6;
    dispatch_sync(v3, &block);
  }
}

void qmi::Server::State::registerAccepter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v5 = (std::__shared_weak_count *)a1[1];
  if (!v5 || (uint64_t v6 = *a1, (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  uint64_t v9 = operator new(0x18uLL);
  void *v9 = a1;
  v9[1] = v3;
  void v9[2] = v4;
  xpc_object_t v10 = a1[2];
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v11 = operator new(0x18uLL);
  void *v11 = v9;
  v11[1] = v6;
  v11[2] = v8;
  dispatch_async_f(v10, v11, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Server::State>::execute_wrapped<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0>(qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0,std::default_delete<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

uint64_t qmi::Server::Server(uint64_t a1, xpc_object_t *a2)
{
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (qmi::Server::State *)operator new(0x48uLL);
  qmi::Server::State::State(v4);
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Server::State>::shared_ptr[abi:ne180100]<qmi::Server::State,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State*)#1},void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v4);
  qmi::Server::State::init_sync(*(uint64_t **)a1, a2);
  return a1;
}

void sub_1A110F140(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1A110F194(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void qmi::Server::~Server(qmi::Server *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t qmi::Server::create@<X0>(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  return qmi::Server::Server(a2, a1);
}

void qmi::Server::getEndpoint(NSObject ***this@<X0>, xpc_object_t *a2@<X8>)
{
}

void qmi::Server::registerAccepter(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v4[0] = *a2;
  v4[1] = (uint64_t)v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    qmi::Server::State::registerAccepter(v2, v4);
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    qmi::Server::State::registerAccepter(v2, v4);
  }
}

void std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A1127306) {
    return a1 + 32;
  }
  if (((v3 & 0x80000001A1127306 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A1127306)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A1127306 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 32;
  }
  return 0;
}

std::__shared_weak_count_vtbl **std::shared_ptr<qmi::Server::State>::shared_ptr[abi:ne180100]<qmi::Server::State,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State*)#1},void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43E108;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      a2->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
      a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  a2->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
  a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A110F514(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State*)#1}::operator() const(qmi::Server::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1A110F53C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<qmi::Server::State *,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State *)#1},std::allocator<qmi::Server::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::Server::State *,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State *)#1},std::allocator<qmi::Server::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<qmi::Server::State *,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State *)#1},std::allocator<qmi::Server::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3qmi6Server5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Server5StateEE15make_shared_ptrIS3_EENSt3__110shared_"
                                "ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3qmi6Server5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Server5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State*)#1}::operator() const(qmi::Server::State*)::{lambda(void *)#1}::__invoke(qmi::Server::State *a1)
{
  if (a1)
  {
    qmi::Server::State::~State(a1);
    operator delete(v1);
  }
}

void ___ZN3ctu15XpcServerHelper13startListenerIN3qmi6Server5StateEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(void *a1, xpc_object_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  xpc_object_t v5 = (ctu::XpcServerHelper *)a1[4];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  int v13 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = (void *)a1[5];
  v12[1] = v8;
  if (v8)
  {
    uint64_t v9 = MEMORY[0x1A622CC50](a2);
    uint64_t v10 = MEMORY[0x1E4F14578];
    if (v9 != MEMORY[0x1E4F14578])
    {
      if (v9 == MEMORY[0x1E4F145A8] && *(void *)ctu::XpcServerHelper::getListener(v5) == a1[7])
      {
        v12[0] = a2;
        if (a2)
        {
          xpc_retain(a2);
        }
        else
        {
          a2 = xpc_null_create();
          v12[0] = a2;
        }
        qmi::Server::State::handleListenerError((uint64_t)v8, v12);
        xpc_release(a2);
      }
      goto LABEL_21;
    }
    if (a2)
    {
      xpc_retain(a2);
      v12[0] = a2;
    }
    else
    {
      a2 = xpc_null_create();
      v12[0] = a2;
      if (!a2)
      {
        xpc_object_t v11 = xpc_null_create();
        a2 = 0;
        goto LABEL_16;
      }
    }
    if (MEMORY[0x1A622CC50](a2) == v10)
    {
      xpc_retain(a2);
      xpc_object_t v11 = a2;
      goto LABEL_17;
    }
    xpc_object_t v11 = xpc_null_create();
LABEL_16:
    v12[0] = v11;
LABEL_17:
    qmi::Server::State::handleNewClient((uint64_t *)v8, v12);
    xpc_release(v11);
    v12[0] = 0;
    xpc_release(a2);
    uint64_t v7 = v13;
    if (!v13) {
      return;
    }
  }
LABEL_21:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1A110F808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  xpc_release(v11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Server5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 4MEMORY[0x1A622BDE0]((char *)this + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Server5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZNK3ctu15XpcServerHelper12acceptClientIN3qmi6Server5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(uint64_t a1, xpc_object_t a2)
{
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    xpc_object_t v5 = std::__shared_weak_count::lock(v3);
    BOOL v15 = v5;
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void **)(a1 + 32);
      object[1] = v7;
      if (!v7) {
        goto LABEL_23;
      }
      uint64_t v8 = MEMORY[0x1A622CC50](a2);
      uint64_t v9 = MEMORY[0x1E4F14590];
      if (v8 != MEMORY[0x1E4F14590])
      {
        if (v8 != MEMORY[0x1E4F145A8]) {
          goto LABEL_23;
        }
        xpc_object_t v10 = *(xpc_object_t *)(a1 + 48);
        if (v10)
        {
          xpc_retain(*(xpc_object_t *)(a1 + 48));
          if (a2)
          {
LABEL_8:
            xpc_retain(a2);
LABEL_19:
            xpc_release(a2);
            xpc_release(v10);
LABEL_23:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        else
        {
          xpc_object_t v10 = xpc_null_create();
          if (a2) {
            goto LABEL_8;
          }
        }
        a2 = xpc_null_create();
        goto LABEL_19;
      }
      xpc_object_t v11 = *(xpc_object_t *)(a1 + 48);
      if (v11)
      {
        xpc_retain(*(xpc_object_t *)(a1 + 48));
        if (a2)
        {
LABEL_11:
          xpc_retain(a2);
          object[0] = a2;
          goto LABEL_14;
        }
      }
      else
      {
        xpc_object_t v11 = xpc_null_create();
        if (a2) {
          goto LABEL_11;
        }
      }
      a2 = xpc_null_create();
      object[0] = a2;
      if (!a2)
      {
        xpc_object_t v12 = xpc_null_create();
        a2 = 0;
        goto LABEL_21;
      }
LABEL_14:
      if (MEMORY[0x1A622CC50](a2) == v9)
      {
        xpc_retain(a2);
        goto LABEL_22;
      }
      xpc_object_t v12 = xpc_null_create();
LABEL_21:
      object[0] = v12;
LABEL_22:
      qmi::Server::State::handleClientMessage(v7, v13, object);
      xpc_release(object[0]);
      object[0] = 0;
      xpc_release(a2);
      xpc_release(v11);
      uint64_t v6 = v15;
      if (!v15) {
        return;
      }
      goto LABEL_23;
    }
  }
}

void sub_1A110FA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  xpc_release(v11);
  xpc_release(v12);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__18weak_ptrIN3qmi6Server5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__18weak_ptrIN3qmi6Server5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *___ZNK3ctu20SharedSynchronizableIN3qmi6Server5StateEE20execute_wrapped_syncIZNKS3_11getEndpointEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  Listener = (xpc_connection_t *)ctu::XpcServerHelper::getListener((ctu::XpcServerHelper *)(**(void **)(a1 + 40) + 40));
  uint64_t result = xpc_endpoint_create(*Listener);
  *a2 = result;
  if (!result)
  {
    uint64_t result = xpc_null_create();
    *a2 = result;
  }
  return result;
}

void ___ZN8dispatch9sync_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&object);
  uint64_t v2 = *(void ***)(a1 + 32);
  xpc_object_t v3 = object;
  xpc_object_t object = xpc_null_create();
  uint64_t v4 = *v2;
  *uint64_t v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&object);
  uint64_t v2 = *(void ***)(a1 + 32);
  xpc_object_t v3 = object;
  xpc_object_t object = xpc_null_create();
  uint64_t v4 = *v2;
  *uint64_t v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Server::State>::execute_wrapped<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0>(qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0,std::default_delete<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  xpc_object_t v3 = *(void **)*a1;
  xpc_object_t v5 = (char *)v3[7];
  unint64_t v4 = v3[8];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = (char *)v3[6];
    uint64_t v9 = (v5 - v8) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v21 = *(_OWORD *)(v2 + 1);
    uint64_t v13 = (char *)operator new(16 * v12);
    uint64_t v14 = &v13[16 * v9];
    *(_OWORD *)uint64_t v14 = v21;
    if (*((void *)&v21 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 16), 1uLL, memory_order_relaxed);
      uint64_t v8 = (char *)v3[6];
      xpc_object_t v5 = (char *)v3[7];
    }
    BOOL v15 = &v13[16 * v12];
    uint64_t v7 = v14 + 16;
    if (v5 == v8)
    {
      v3[6] = v14;
      v3[7] = v7;
      v3[8] = v15;
    }
    else
    {
      do
      {
        long long v16 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v14 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v16;
        v14 -= 16;
        *(void *)xpc_object_t v5 = 0;
        *((void *)v5 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
      }
      while (v5 != v8);
      uint64_t v8 = (char *)v3[6];
      int v17 = (char *)v3[7];
      v3[6] = v14;
      v3[7] = v7;
      v3[8] = v15;
      while (v17 != v8)
      {
        int v18 = (std::__shared_weak_count *)*((void *)v17 - 1);
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
        v17 -= 16;
      }
    }
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    uint64_t v6 = v2[2];
    *(void *)xpc_object_t v5 = v2[1];
    *((void *)v5 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = v5 + 16;
  }
  v3[7] = v7;
  int v19 = (std::__shared_weak_count *)v2[2];
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  operator delete(v2);
  uint64_t v20 = (std::__shared_weak_count *)a1[2];
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }

  operator delete(a1);
}

void sub_1A110FE00(_Unwind_Exception *a1)
{
  unint64_t v4 = (std::__shared_weak_count *)v2[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(v2);
  xpc_object_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::QMuxServerAccepter::State::State(uint64_t a1, void *a2, NSObject **a3, long long *a4)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.bb", "acceptor");
  *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v13);
  MEMORY[0x1A622BDE0](v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_1EF43E1B8;
  *(void *)(a1 + 4MEMORY[0x1A622BDE0]((char *)this + 8) = *a2;
  uint64_t v9 = a2[1];
  *(void *)(a1 + 56) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  long long v10 = *a4;
  *(void *)(a1 + 80) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 64) = v10;
  *((void *)a4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12MEMORY[0x1A622BDE0]((char *)this + 8) = 0u;
  return a1;
}

void qmi::QMuxServerAccepter::State::~State(qmi::QMuxServerAccepter::State *this)
{
  *(void *)this = &unk_1EF43E1B8;
  uint64_t v2 = *((void *)this + 15);
  if (!v2) {
    goto LABEL_13;
  }
  uint64_t v3 = *((void *)this + 16);
  unint64_t v4 = (void *)*((void *)this + 15);
  if (v3 == v2) {
    goto LABEL_12;
  }
  do
  {
    xpc_object_t v5 = *(std::__shared_weak_count **)(v3 - 8);
    if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v6 = *(std::__shared_weak_count **)(v3 - 24);
      if (!v6) {
        goto LABEL_4;
      }
LABEL_8:
      std::__shared_weak_count::__release_weak(v6);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = *(std::__shared_weak_count **)(v3 - 24);
    if (v6) {
      goto LABEL_8;
    }
LABEL_4:
    v3 -= 32;
  }
  while (v3 != v2);
  unint64_t v4 = (void *)*((void *)this + 15);
LABEL_12:
  *((void *)this + 16) = v2;
  operator delete(v4);
LABEL_13:
  uint64_t v7 = (qmi::QMuxServerAccepter::State *)*((void *)this + 14);
  if (v7 == (qmi::QMuxServerAccepter::State *)((char *)this + 88))
  {
    (*(void (**)(char *))(*((void *)this + 11) + 32))((char *)this + 88);
    if ((*((char *)this + 87) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_20:
    operator delete(*((void **)this + 8));
    uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v8) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (v7) {
    (*(void (**)(qmi::QMuxServerAccepter::State *))(*(void *)v7 + 40))(v7);
  }
  if (*((char *)this + 87) < 0) {
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v8)
  {
LABEL_22:
    MEMORY[0x1A622BDE0]((char *)this + 40);
    uint64_t v9 = *((void *)this + 4);
    if (v9) {
      goto LABEL_23;
    }
    goto LABEL_24;
  }
LABEL_21:
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  MEMORY[0x1A622BDE0]((char *)this + 40);
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
LABEL_23:
  }
    dispatch_release(v9);
LABEL_24:
  long long v10 = *((void *)this + 3);
  if (v10) {
    dispatch_release(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

{
  void *v1;
  uint64_t vars8;

  qmi::QMuxServerAccepter::State::~State(this);

  operator delete(v1);
}

void qmi::QMuxServerAccepter::State::create(void *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x90uLL);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  qmi::QMuxServerAccepter::State::State((uint64_t)v8, a1, a2, (long long *)&__p);
  *a4 = v8;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = &v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43E3B8;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = v9;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v8 + 2);
  if (v11)
  {
    if (v11->__shared_owners_ != -1) {
      goto LABEL_10;
    }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v8;
    *((void *)v8 + 2) = v9;
    std::__shared_weak_count::__release_weak(v11);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v8;
    *((void *)v8 + 2) = v9;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
LABEL_10:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1A111035C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  _Unwind_Resume(a1);
}

BOOL qmi::QMuxServerAccepter::State::accept(uint64_t a1, uint64_t a2)
{
  v5[0] = a2;
  v5[1] = a1;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  void v6[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE20execute_wrapped_syncIZNS3_6acceptERKN3xpc4dictERKN8dispatch5queueEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSF__block_invoke;
  void v6[3] = &__block_descriptor_tmp_18;
  void v6[4] = a1 + 8;
  void v6[5] = v5;
  uint64_t v7 = v6;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    char v14 = -86;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v9 = 0x40000000;
    long long v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_1;
    uint64_t v11 = &__block_descriptor_tmp_22;
    unint64_t v12 = &v14;
    uint64_t v13 = &v7;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    char v14 = -86;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v9 = 0x40000000;
    long long v10 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_1;
    uint64_t v11 = &__block_descriptor_tmp_21;
    unint64_t v12 = &v14;
    uint64_t v13 = &v7;
    dispatch_sync(v2, &block);
  }
  return v14 != 0;
}

BOOL qmi::QMuxServerAccepter::State::acceptLocal(uint64_t a1, xpc_object_t *a2, uint64_t *a3, uint64_t *a4)
{
  __p[5] = *(void **)MEMORY[0x1E4F143B8];
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t value = xpc_dictionary_get_value(*a2, "connect");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  uint64_t v9 = HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) >= 0) {
    long long v10 = (void *)HIBYTE(__s1[2]);
  }
  else {
    long long v10 = __s1[1];
  }
  uint64_t v11 = (void *)*(unsigned __int8 *)(a1 + 87);
  int v12 = (char)v11;
  if ((char)v11 < 0) {
    uint64_t v11 = *(void **)(a1 + 72);
  }
  if (v10 != v11) {
    goto LABEL_30;
  }
  uint64_t v13 = (void *)(a1 + 64);
  if (v12 >= 0) {
    char v14 = (unsigned __int8 *)(a1 + 64);
  }
  else {
    char v14 = *(unsigned __int8 **)(a1 + 64);
  }
  if ((HIBYTE(__s1[2]) & 0x80) != 0)
  {
    if (!memcmp(__s1[0], v14, (size_t)__s1[1])) {
      goto LABEL_20;
    }
LABEL_30:
    BOOL v20 = 0;
    goto LABEL_31;
  }
  if (HIBYTE(__s1[2]))
  {
    BOOL v15 = __s1;
    while (*(unsigned __int8 *)v15 == *v14)
    {
      BOOL v15 = (void **)((char *)v15 + 1);
      ++v14;
      if (!--v9) {
        goto LABEL_20;
      }
    }
    goto LABEL_30;
  }
LABEL_20:
  xpc_object_t v16 = xpc_dictionary_get_value(*a2, "svc_type");
  __p[0] = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    __p[0] = xpc_null_create();
  }
  unsigned __int8 v17 = xpc::dyn_cast_or_default();
  xpc_release(__p[0]);
  if (!v17)
  {
    int v19 = *(NSObject **)(a1 + 40);
    BOOL v20 = 0;
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    if (*(char *)(a1 + 87) < 0) {
      uint64_t v13 = (void *)*v13;
    }
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = v13;
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 0;
    _os_log_impl(&dword_1A10C7000, v19, OS_LOG_TYPE_DEFAULT, "#E QMux '%s' rejects incoming client due to bad service type 0x%x", (uint8_t *)__p, 0x12u);
    goto LABEL_30;
  }
  memset(&object, 170, sizeof(object));
  xpc_object_t v18 = xpc_dictionary_get_value(*a2, "name");
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(v49.__r_.__value_.__l.__data_);
  std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = object.__r_.__value_.__l.__size_;
  }
  BOOL v20 = size != 0;
  if (size)
  {
    std::string::append(&object, "::proxy", 7uLL);
    qmi::QMuxServerAccepter::State::tidyUp_sync((qmi::QMuxServerAccepter::State *)a1);
    BOOL v23 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 87) < 0) {
        uint64_t v13 = (void *)*v13;
      }
      p_std::string object = &object;
      if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = v13;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v17;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = p_object;
      _os_log_impl(&dword_1A10C7000, v23, OS_LOG_TYPE_DEFAULT, "#I QMux '%s' accepted client(svcType=0x%x, name='%s')", (uint8_t *)__p, 0x1Cu);
    }
    memset(&v49, 170, sizeof(v49));
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v49, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    }
    else {
      std::string v49 = object;
    }
    *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v26 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)std::string __p = v26;
    *(_OWORD *)&__p[2] = v26;
    uint64_t v27 = *a3;
    uint64_t v28 = (std::__shared_weak_count *)a3[1];
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = *a4;
    int v30 = (std::__shared_weak_count *)a4[1];
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v54 = v27;
    char v55 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v52 = v29;
    int v53 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    qmi::create_client_proxy_gcd_state((uint64_t *)(a1 + 48), (long long *)&object, v17, &v54, &v52, (unint64_t *)&v56);
    if (v53) {
      std::__shared_weak_count::__release_weak(v53);
    }
    if (v55) {
      std::__shared_weak_count::__release_weak(v55);
    }
    qmi::ClientProxy::ClientProxy(__p, &v56);
    unsigned int v31 = (std::__shared_weak_count *)v57;
    if (v57 && !atomic_fetch_add((atomic_ullong *volatile)(v57 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    if (v30) {
      std::__shared_weak_count::__release_weak(v30);
    }
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
    uint64_t v33 = *(char **)(a1 + 128);
    unint64_t v32 = *(void *)(a1 + 136);
    if ((unint64_t)v33 >= v32)
    {
      uint64_t v36 = *(char **)(a1 + 120);
      uint64_t v37 = (v33 - v36) >> 5;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 59) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v39 = v32 - (void)v36;
      if (v39 >> 4 > v38) {
        unint64_t v38 = v39 >> 4;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v40 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v38;
      }
      if (v40 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v41 = *(_OWORD *)&__p[2];
      long long v42 = (char *)operator new(32 * v40);
      uint64_t v43 = &v42[32 * v37];
      *(void *)uint64_t v43 = 0;
      *((void *)v43 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
      *((_OWORD *)v43 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v41;
      if (*((void *)&v41 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v36 = *(char **)(a1 + 120);
        uint64_t v33 = *(char **)(a1 + 128);
      }
      long long v44 = &v42[32 * v40];
      uint64_t v35 = v43 + 32;
      if (v33 == v36)
      {
        *(void *)(a1 + 120) = v43;
        *(void *)(a1 + 12MEMORY[0x1A622BDE0]((char *)this + 8) = v35;
        *(void *)(a1 + 136) = v44;
      }
      else
      {
        do
        {
          *((void *)v43 - 4) = 0;
          *((void *)v43 - 3) = 0;
          v43 -= 32;
          *((_OWORD *)v43 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v33 - 1);
          *((void *)v33 - 2) = 0;
          *((void *)v33 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
          v33 -= 32;
        }
        while (v33 != v36);
        uint64_t v36 = *(char **)(a1 + 120);
        long long v45 = *(char **)(a1 + 128);
        *(void *)(a1 + 120) = v43;
        *(void *)(a1 + 12MEMORY[0x1A622BDE0]((char *)this + 8) = v35;
        for (*(void *)(a1 + 136) = v44; v45 != v36; v45 -= 32)
        {
          uint64_t v46 = (std::__shared_weak_count *)*((void *)v45 - 1);
          if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
          uint64_t v47 = (std::__shared_weak_count *)*((void *)v45 - 3);
          if (v47) {
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      *(void *)uint64_t v33 = 0;
      *((void *)v33 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
      *((void **)v33 + 2) = __p[2];
      ssize_t v34 = (atomic_ullong *)__p[3];
      *((void **)v33 + 3) = __p[3];
      if (v34) {
        atomic_fetch_add_explicit(v34 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = v33 + 32;
    }
    *(void *)(a1 + 12MEMORY[0x1A622BDE0]((char *)this + 8) = v35;
    uint64_t v48 = (std::__shared_weak_count *)__p[3];
    if (__p[3] && !atomic_fetch_add((atomic_ullong *volatile)__p[3] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    if (__p[1]) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    xpc_object_t v25 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 87) < 0) {
        uint64_t v13 = (void *)*v13;
      }
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = v13;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v17;
      _os_log_impl(&dword_1A10C7000, v25, OS_LOG_TYPE_DEFAULT, "#E QMux '%s' rejects incoming client(svcType=0x%x) due to empty name", (uint8_t *)__p, 0x12u);
    }
  }
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(object.__r_.__value_.__l.__data_);
  }
LABEL_31:
  if (SHIBYTE(__s1[2]) < 0) {
    operator delete(__s1[0]);
  }
  return v20;
}

void sub_1A1110BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,xpc_object_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void qmi::QMuxServerAccepter::State::tidyUp_sync(qmi::QMuxServerAccepter::State *this)
{
  uint64_t v2 = *((void *)this + 15);
  uint64_t v3 = *((void *)this + 16);
  if (v2 == v3)
  {
    char v4 = 0;
    uint64_t v18 = *((void *)this + 16);
    if (v2 == v18) {
      goto LABEL_38;
    }
LABEL_41:
    if (v18 == v2)
    {
LABEL_50:
      *((void *)this + 16) = v2;
      if (v4) {
        goto LABEL_51;
      }
      return;
    }
    while (1)
    {
      int v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19)
      {
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      BOOL v20 = *(std::__shared_weak_count **)(v18 - 24);
      if (v20) {
        goto LABEL_47;
      }
LABEL_43:
      v18 -= 32;
      if (v18 == v2) {
        goto LABEL_50;
      }
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    BOOL v20 = *(std::__shared_weak_count **)(v18 - 24);
    if (!v20) {
      goto LABEL_43;
    }
LABEL_47:
    std::__shared_weak_count::__release_weak(v20);
    goto LABEL_43;
  }
  char v4 = 0;
  uint64_t v5 = v2 + 32;
  while (1)
  {
    uint64_t v7 = *(qmi::ClientProxy::State **)(v5 - 16);
    if (v7)
    {
      if (qmi::ClientProxy::State::isValid(v7)) {
        goto LABEL_10;
      }
      uint64_t v8 = *(qmi::ClientProxy::State **)(v5 - 16);
      if (v8) {
        break;
      }
    }
    char v4 = 1;
LABEL_4:
    BOOL v6 = v5 == v3;
    v5 += 32;
    if (v6)
    {
      uint64_t v2 = v3;
      goto LABEL_37;
    }
  }
  if (!qmi::ClientProxy::State::isStopped(v8)) {
    char v4 = 1;
  }
LABEL_10:
  uint64_t v9 = *(qmi::ClientProxy::State **)(v5 - 16);
  if (!v9) {
    goto LABEL_4;
  }
  if (qmi::ClientProxy::State::isValid(v9)) {
    goto LABEL_4;
  }
  long long v10 = *(qmi::ClientProxy::State **)(v5 - 16);
  if (!v10 || !qmi::ClientProxy::State::isStopped(v10)) {
    goto LABEL_4;
  }
  uint64_t v2 = v5 - 32;
  if (v5 - 32 != v3 && v5 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v11 = *(qmi::ClientProxy::State **)(v5 + 16);
        if (!v11)
        {
          char v4 = 1;
LABEL_29:
          long long v15 = *(_OWORD *)(v5 + 16);
          *(void *)(v5 + 16) = 0;
          *(void *)(v5 + 24) = 0;
          xpc_object_t v16 = *(std::__shared_weak_count **)(v2 + 24);
          *(_OWORD *)(v2 + 16) = v15;
          if (v16) {
            goto LABEL_30;
          }
          goto LABEL_32;
        }
        if (!qmi::ClientProxy::State::isValid(v11)) {
          break;
        }
LABEL_23:
        uint64_t v13 = *(qmi::ClientProxy::State **)(v5 + 16);
        if (!v13) {
          goto LABEL_29;
        }
        if (qmi::ClientProxy::State::isValid(v13)) {
          goto LABEL_29;
        }
        char v14 = *(qmi::ClientProxy::State **)(v5 + 16);
        if (!v14 || !qmi::ClientProxy::State::isStopped(v14)) {
          goto LABEL_29;
        }
        v5 += 32;
        if (v5 == v3) {
          goto LABEL_37;
        }
      }
      int v12 = *(qmi::ClientProxy::State **)(v5 + 16);
      if (v12)
      {
        if (!qmi::ClientProxy::State::isStopped(v12)) {
          char v4 = 1;
        }
        goto LABEL_23;
      }
      char v4 = 1;
      long long v17 = *(_OWORD *)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + 24) = 0;
      xpc_object_t v16 = *(std::__shared_weak_count **)(v2 + 24);
      *(_OWORD *)(v2 + 16) = v17;
      if (v16)
      {
LABEL_30:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
LABEL_32:
      v2 += 32;
      v5 += 32;
    }
    while (v5 != v3);
  }
LABEL_37:
  uint64_t v18 = *((void *)this + 16);
  if (v2 != v18) {
    goto LABEL_41;
  }
LABEL_38:
  if (!v4) {
    return;
  }
LABEL_51:
  long long v21 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v21 || (uint64_t v22 = *((void *)this + 1), (v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v24 = v23;
  p_uint64_t shared_weak_owners = &v23->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  dispatch_time_t v26 = dispatch_time(0, 250000000);
  uint64_t v27 = *((void *)this + 3);
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 1174405120;
  void v28[2] = ___ZN3qmi18QMuxServerAccepter5State11tidyUp_syncEv_block_invoke;
  void v28[3] = &__block_descriptor_tmp_11;
  v28[4] = v22;
  uint64_t v29 = v24;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_after(v26, v27, v28);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  std::__shared_weak_count::__release_weak(v24);
}

void ___ZN3qmi18QMuxServerAccepter5State11tidyUp_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      char v4 = v3;
      uint64_t v5 = *(qmi::QMuxServerAccepter::State **)(a1 + 32);
      if (v5) {
        qmi::QMuxServerAccepter::State::tidyUp_sync(v5);
      }
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1A11111CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3qmi18QMuxServerAccepter5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3qmi18QMuxServerAccepter5StateEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void qmi::QMuxServerAccepter::State::getAllClients(qmi::QMuxServerAccepter::State *this@<X0>, void *a2@<X8>)
{
  char v4 = this;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE20execute_wrapped_syncIZNKS3_13getAllClientsEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  void v5[3] = &__block_descriptor_tmp_25;
  v5[4] = (char *)this + 8;
  void v5[5] = &v4;
  BOOL v6 = v5;
  uint64_t v3 = (char *)this + 24;
  uint64_t v2 = *((void *)this + 3);
  if (*((void *)v3 + 1))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__16vectorIN3qmi11ClientProxyENS1_9allocatorIS4_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    long long v10 = &__block_descriptor_tmp_27;
    uint64_t v11 = a2;
    int v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__16vectorIN3qmi11ClientProxyENS1_9allocatorIS4_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    long long v10 = &__block_descriptor_tmp_26;
    uint64_t v11 = a2;
    int v12 = &v6;
    dispatch_sync(v2, &block);
  }
}

uint64_t qmi::QMuxServerAccepter::State::setValidationStrategy(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      xpc_object_t v16 = v15;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v15);
    }
    else
    {
      xpc_object_t v16 = (void *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    xpc_object_t v16 = 0;
  }
  char v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (uint64_t v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x28uLL);
  uint64_t v9 = v8;
  long long v10 = v16;
  void *v8 = a1;
  if (v10)
  {
    if (v10 == v15)
    {
      v8[4] = v8 + 1;
      (*(void (**)(void *))(v15[0] + 24))(v15);
    }
    else
    {
      v8[4] = v10;
      xpc_object_t v16 = 0;
    }
  }
  else
  {
    v8[4] = 0;
  }
  uint64_t v11 = a1[3];
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v12 = operator new(0x18uLL);
  *int v12 = v9;
  v12[1] = v5;
  xpc_object_t v12[2] = v7;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0>(qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0,std::default_delete<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t result = (uint64_t)v16;
    if (v16 != v15) {
      goto LABEL_15;
    }
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t result = (uint64_t)v16;
  if (v16 == v15) {
    return (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
LABEL_15:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1A1111578(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void qmi::QMuxServerAccepter::State::registerResponse(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1174405120;
  v10[2] = ___ZN3qmi18QMuxServerAccepter5State16registerResponseENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEtNS2_6vectorIhNS6_IhEEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_4;
  v10[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    __int16 v15 = a3;
    uint64_t v13 = 0;
    char v14 = 0;
    std::string __p = 0;
    uint64_t v7 = *(const void **)a4;
    size_t v8 = *(void *)(a4 + 8) - *(void *)a4;
    if (!v8) {
      goto LABEL_7;
    }
  }
  else
  {
    std::string v11 = *(std::string *)a2;
    __int16 v15 = a3;
    uint64_t v13 = 0;
    char v14 = 0;
    std::string __p = 0;
    uint64_t v7 = *(const void **)a4;
    size_t v8 = *(void *)(a4 + 8) - *(void *)a4;
    if (!v8) {
      goto LABEL_7;
    }
  }
  if ((v8 & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  std::string __p = operator new(v8);
  uint64_t v13 = __p;
  uint64_t v9 = (char *)__p + v8;
  char v14 = (char *)__p + v8;
  memcpy(__p, v7, v8);
  uint64_t v13 = v9;
LABEL_7:
  ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v10);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1A11116EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    operator delete(__p);
    if ((a19 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a19 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a14);
  _Unwind_Resume(exception_object);
}

void ___ZN3qmi18QMuxServerAccepter5State16registerResponseENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEtNS2_6vectorIhNS6_IhEEEE_block_invoke(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[15];
  uint64_t v3 = v1[16];
  if (v2 != v3)
  {
    uint64_t v5 = (const void **)(a1 + 40);
    while (1)
    {
      BOOL v6 = v1[5];
      BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
      uint64_t v8 = *(unsigned __int8 *)(a1 + 63);
      if (v7)
      {
        BOOL v23 = v5;
        if ((v8 & 0x80) != 0) {
          BOOL v23 = (void *)*v5;
        }
        uint64_t v24 = *(void *)(v2 + 16);
        uint64_t v27 = *(void *)(v24 + 48);
        uint64_t v25 = v24 + 48;
        uint64_t v26 = v27;
        if (*(char *)(v25 + 23) < 0) {
          uint64_t v25 = v26;
        }
        *(_DWORD *)long long buf = 136315394;
        unint64_t v32 = v23;
        __int16 v33 = 2080;
        uint64_t v34 = v25;
        _os_log_debug_impl(&dword_1A10C7000, v6, OS_LOG_TYPE_DEBUG, "#D Register response - Checking whether the client name matches: '%s' - '%s'", buf, 0x16u);
        uint64_t v8 = *(unsigned __int8 *)(a1 + 63);
      }
      uint64_t v9 = *(void *)(v2 + 16);
      if ((v8 & 0x80u) == 0) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = *(void *)(a1 + 48);
      }
      uint64_t v11 = *(unsigned __int8 *)(v9 + 71);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(v9 + 56);
      }
      if (v10 != v11) {
        goto LABEL_4;
      }
      uint64_t v15 = *(void *)(v9 + 48);
      uint64_t v13 = v9 + 48;
      uint64_t v14 = v15;
      xpc_object_t v16 = (unsigned __int8 *)(v12 >= 0 ? v13 : v14);
      if (((char)v8 & 0x80000000) == 0) {
        break;
      }
      if (!memcmp(*v5, v16, *(void *)(a1 + 48))) {
        goto LABEL_20;
      }
LABEL_4:
      v2 += 32;
      if (v2 == v3) {
        return;
      }
    }
    if (v8)
    {
      uint64_t v17 = v5;
      while (*(unsigned __int8 *)v17 == *v16)
      {
        uint64_t v17 = (const void **)((char *)v17 + 1);
        ++v16;
        if (!--v8) {
          goto LABEL_20;
        }
      }
      goto LABEL_4;
    }
LABEL_20:
    __int16 v18 = *(_WORD *)(a1 + 88);
    uint64_t v29 = 0;
    int v30 = 0;
    uint64_t v28 = 0;
    BOOL v20 = *(unsigned char **)(a1 + 64);
    int v19 = *(unsigned char **)(a1 + 72);
    size_t v21 = v19 - v20;
    if (v19 == v20)
    {
      uint64_t v22 = 0;
    }
    else
    {
      if ((v21 & 0x8000000000000000) != 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = (char *)operator new(v19 - v20);
      uint64_t v28 = v22;
      int v30 = &v22[v21];
      memcpy(v22, v20, v21);
      uint64_t v29 = &v22[v21];
    }
    qmi::ClientProxy::registerResponse(v2, v18, (uint64_t)&v28);
    if (v22)
    {
      uint64_t v29 = v22;
      operator delete(v22);
    }
    goto LABEL_4;
  }
}

void sub_1A1111938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    BOOL v6 = *(unsigned char **)(a2 + 64);
    uint64_t v8 = *(unsigned char **)(a2 + 72);
    size_t v7 = v8 - v6;
    if (v8 == v6) {
      return;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    BOOL v6 = *(unsigned char **)(a2 + 64);
    uint64_t v5 = *(unsigned char **)(a2 + 72);
    size_t v7 = v5 - v6;
    if (v5 == v6) {
      return;
    }
  }
  if ((v7 & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (char *)operator new(v7);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = &v9[v7];
  *(void *)(a1 + 80) = &v9[v7];
  memcpy(v9, v6, v7);
  *(void *)(a1 + 72) = v10;
}

void sub_1A1111A48(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 72) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 63) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    operator delete(v3);
  }
}

void qmi::QMuxServerAccepter::State::deregisterResponse(uint64_t a1, uint64_t a2, __int16 a3)
{
  long long v4 = (uint64_t *)(a1 + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  void v5[2] = ___ZN3qmi18QMuxServerAccepter5State18deregisterResponseENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEt_block_invoke;
  void v5[3] = &__block_descriptor_tmp_5_0;
  v5[4] = a1;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    std::string __p = *(std::string *)a2;
    __int16 v7 = a3;
    ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped(v4, (uint64_t)v5);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  __int16 v7 = a3;
  ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped(v4, (uint64_t)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_5;
  }
}

void ___ZN3qmi18QMuxServerAccepter5State18deregisterResponseENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEt_block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[15];
  uint64_t v3 = v1[16];
  if (v2 != v3)
  {
    uint64_t v5 = (const void **)(a1 + 40);
    do
    {
      __int16 v7 = v1[5];
      BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
      uint64_t v9 = *(unsigned __int8 *)(a1 + 63);
      if (v8)
      {
        xpc_object_t v16 = v5;
        if ((v9 & 0x80) != 0) {
          xpc_object_t v16 = (void *)*v5;
        }
        uint64_t v17 = *(void *)(v2 + 16);
        uint64_t v20 = *(void *)(v17 + 48);
        uint64_t v18 = v17 + 48;
        uint64_t v19 = v20;
        if (*(char *)(v18 + 23) < 0) {
          uint64_t v18 = v19;
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v18;
        _os_log_debug_impl(&dword_1A10C7000, v7, OS_LOG_TYPE_DEBUG, "#D Deregister response - Checking whether the client name matches: '%s' - '%s'", buf, 0x16u);
        uint64_t v9 = *(unsigned __int8 *)(a1 + 63);
      }
      uint64_t v10 = *(void *)(v2 + 16);
      if ((v9 & 0x80u) == 0) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = *(void *)(a1 + 48);
      }
      uint64_t v12 = *(unsigned __int8 *)(v10 + 71);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v10 + 56);
      }
      if (v11 != v12) {
        goto LABEL_4;
      }
      if (v13 >= 0) {
        uint64_t v14 = (unsigned __int8 *)(v10 + 48);
      }
      else {
        uint64_t v14 = *(unsigned __int8 **)(v10 + 48);
      }
      if ((char)v9 < 0)
      {
        if (memcmp(*v5, v14, *(void *)(a1 + 48))) {
          goto LABEL_4;
        }
      }
      else if (v9)
      {
        uint64_t v15 = v5;
        while (*(unsigned __int8 *)v15 == *v14)
        {
          uint64_t v15 = (const void **)((char *)v15 + 1);
          ++v14;
          if (!--v9) {
            goto LABEL_3;
          }
        }
        goto LABEL_4;
      }
LABEL_3:
      __int16 v6 = *(_WORD *)(a1 + 64);
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = ___ZN3qmi11ClientProxy5State18deregisterResponseEt_block_invoke;
      uint64_t v22 = &__block_descriptor_tmp_35;
      uint64_t v23 = v10;
      __int16 v24 = v6;
      ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped((uint64_t *)(v10 + 8), (uint64_t)buf);
LABEL_4:
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void qmi::QMuxServerAccepter::State::sendIndication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  void v8[2] = ___ZN3qmi18QMuxServerAccepter5State14sendIndicationENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_6vectorIhNS6_IhEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_8_0;
  v8[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    std::string __p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    if (!v6) {
      goto LABEL_7;
    }
  }
  else
  {
    std::string v9 = *(std::string *)a2;
    std::string __p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    if (!v6) {
      goto LABEL_7;
    }
  }
  if ((v6 & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  std::string __p = operator new(v6);
  uint64_t v11 = __p;
  __int16 v7 = (char *)__p + v6;
  uint64_t v12 = (char *)__p + v6;
  memcpy(__p, v5, v6);
  uint64_t v11 = v7;
LABEL_7:
  ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v8);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1A1111F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void ___ZN3qmi18QMuxServerAccepter5State14sendIndicationENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_6vectorIhNS6_IhEEEE_block_invoke(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[15];
  uint64_t v3 = v1[16];
  if (v2 != v3)
  {
    uint64_t v5 = (const void **)(a1 + 40);
    while (1)
    {
      size_t v6 = v1[5];
      BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
      uint64_t v8 = *(unsigned __int8 *)(a1 + 63);
      if (v7)
      {
        uint64_t v22 = v5;
        if ((v8 & 0x80) != 0) {
          uint64_t v22 = (void *)*v5;
        }
        uint64_t v23 = *(void *)(v2 + 16);
        uint64_t v26 = *(void *)(v23 + 48);
        uint64_t v24 = v23 + 48;
        uint64_t v25 = v26;
        if (*(char *)(v24 + 23) < 0) {
          uint64_t v24 = v25;
        }
        *(_DWORD *)long long buf = 136315394;
        unsigned int v31 = v22;
        __int16 v32 = 2080;
        uint64_t v33 = v24;
        _os_log_debug_impl(&dword_1A10C7000, v6, OS_LOG_TYPE_DEBUG, "#D Send indication - Checking whether the client name matches: '%s' - '%s'", buf, 0x16u);
        uint64_t v8 = *(unsigned __int8 *)(a1 + 63);
      }
      uint64_t v9 = *(void *)(v2 + 16);
      if ((v8 & 0x80u) == 0) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = *(void *)(a1 + 48);
      }
      uint64_t v11 = *(unsigned __int8 *)(v9 + 71);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(v9 + 56);
      }
      if (v10 != v11) {
        goto LABEL_4;
      }
      uint64_t v15 = *(void *)(v9 + 48);
      uint64_t v13 = v9 + 48;
      uint64_t v14 = v15;
      xpc_object_t v16 = (unsigned __int8 *)(v12 >= 0 ? v13 : v14);
      if (((char)v8 & 0x80000000) == 0) {
        break;
      }
      if (!memcmp(*v5, v16, *(void *)(a1 + 48))) {
        goto LABEL_20;
      }
LABEL_4:
      v2 += 32;
      if (v2 == v3) {
        return;
      }
    }
    if (v8)
    {
      uint64_t v17 = v5;
      while (*(unsigned __int8 *)v17 == *v16)
      {
        uint64_t v17 = (const void **)((char *)v17 + 1);
        ++v16;
        if (!--v8) {
          goto LABEL_20;
        }
      }
      goto LABEL_4;
    }
LABEL_20:
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v19 = *(unsigned char **)(a1 + 64);
    uint64_t v18 = *(unsigned char **)(a1 + 72);
    size_t v20 = v18 - v19;
    if (v18 == v19)
    {
      size_t v21 = 0;
    }
    else
    {
      if ((v20 & 0x8000000000000000) != 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      size_t v21 = (char *)operator new(v18 - v19);
      uint64_t v27 = v21;
      uint64_t v29 = &v21[v20];
      memcpy(v21, v19, v20);
      uint64_t v28 = &v21[v20];
    }
    qmi::ClientProxy::sendIndication(v2, (uint64_t)&v27);
    if (v21)
    {
      uint64_t v28 = v21;
      operator delete(v21);
    }
    goto LABEL_4;
  }
}

void sub_1A111219C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::QMuxServerAccepter::State::shutdown_sync(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 120);
  for (uint64_t i = *(void *)(this + 128); v1 != i; v1 += 32)
    this = (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16));
  return this;
}

void *qmi::QMuxServerAccepter::QMuxServerAccepter(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EF43E2A0;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EF43E2A0;
  return this;
}

qmi::QMuxServerAccepter *qmi::QMuxServerAccepter::QMuxServerAccepter(qmi::QMuxServerAccepter *this, const QMux *a2, NSObject **a3)
{
  *(void *)this = &unk_1EF43E2A0;
  uint64_t v5 = *a3;
  uint64_t v9 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  QMux::getName(a2, (uint64_t)__p);
  qmi::QMuxServerAccepter::State::create(a2, &v9, (uint64_t)__p, (void *)this + 1);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    dispatch_release(v5);
  }
  return this;
}

void sub_1A111231C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (!v14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

void *qmi::QMuxServerAccepter::QMuxServerAccepter(void *a1, void *a2, NSObject **a3, uint64_t a4)
{
  *a1 = &unk_1EF43E2A0;
  BOOL v7 = a1 + 1;
  char v8 = *a3;
  uint64_t v10 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  qmi::QMuxServerAccepter::State::create(a2, &v10, a4, v7);
  if (v8) {
    dispatch_release(v8);
  }
  return a1;
}

{
  void *v7;
  NSObject *v8;
  NSObject *v10;

  *a1 = &unk_1EF43E2A0;
  BOOL v7 = a1 + 1;
  char v8 = *a3;
  uint64_t v10 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  qmi::QMuxServerAccepter::State::create(a2, &v10, a4, v7);
  if (v8) {
    dispatch_release(v8);
  }
  return a1;
}

void sub_1A11123F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A11124A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void qmi::QMuxServerAccepter::~QMuxServerAccepter(qmi::QMuxServerAccepter *this)
{
  *(void *)this = &unk_1EF43E2A0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EF43E2A0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void qmi::QMuxServerAccepter::~QMuxServerAccepter(std::__shared_weak_count **this)
{
  uint64_t v1 = (qmi::QMuxServerAccepter *)this;
  *this = (std::__shared_weak_count *)&unk_1EF43E2A0;
  uint64_t v2 = this[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(this);
}

void qmi::QMuxServerAccepter::listen(qmi::QMuxServerAccepter *this, uint64_t **a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v4 = *a2;
    uint64_t v6 = v2;
    BOOL v7 = v3;
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    qmi::Server::State::registerAccepter(v4, &v6);
    std::__shared_weak_count::__release_weak(v3);
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    uint64_t v5 = *a2;
    uint64_t v6 = v2;
    BOOL v7 = 0;
    qmi::Server::State::registerAccepter(v5, &v6);
  }
}

void qmi::QMuxServerAccepter::getAllClients(qmi::QMuxServerAccepter::State **this@<X0>, void *a2@<X8>)
{
}

uint64_t qmi::QMuxServerAccepter::setValidationStrategy(uint64_t a1, void *a2)
{
  return qmi::QMuxServerAccepter::State::setValidationStrategy(*(void **)(a1 + 8), a2);
}

BOOL qmi::QMuxServerAccepter::acceptWithClientRef(uint64_t a1, xpc_object_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  v10[0] = *a3;
  v10[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a4[1];
  v9[0] = *a4;
  v9[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v7 = qmi::QMuxServerAccepter::State::acceptLocal(v4, a2, v10, v9);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return v7;
}

void sub_1A1112814(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    if (!v1) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::QMuxServerAccepter::shutdown(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  uint64_t v2 = *(void *)(v1 + 120);
  for (uint64_t i = *(void *)(v1 + 128); v2 != i; v2 += 32)
    this = (*(uint64_t (**)(void))(**(void **)(v2 + 16) + 16))(*(void *)(v2 + 16));
  return this;
}

void std::__shared_ptr_pointer<qmi::QMuxServerAccepter::State *,std::shared_ptr<qmi::QMuxServerAccepter::State> ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::make_shared_ptr<qmi::QMuxServerAccepter::State>(qmi::QMuxServerAccepter::State*)::{lambda(qmi::QMuxServerAccepter::State *)#1},std::allocator<qmi::QMuxServerAccepter::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::QMuxServerAccepter::State *,std::shared_ptr<qmi::QMuxServerAccepter::State> ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::make_shared_ptr<qmi::QMuxServerAccepter::State>(qmi::QMuxServerAccepter::State*)::{lambda(qmi::QMuxServerAccepter::State *)#1},std::allocator<qmi::QMuxServerAccepter::State>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<qmi::QMuxServerAccepter::State *,std::shared_ptr<qmi::QMuxServerAccepter::State> ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::make_shared_ptr<qmi::QMuxServerAccepter::State>(qmi::QMuxServerAccepter::State*)::{lambda(qmi::QMuxServerAccepter::State *)#1},std::allocator<qmi::QMuxServerAccepter::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15make_shared_ptrIS3_EENSt3__110share"
                     "d_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15make_shared_ptrIS3_EENSt"
                                "3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<qmi::QMuxServerAccepter::State> ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::make_shared_ptr<qmi::QMuxServerAccepter::State>(qmi::QMuxServerAccepter::State*)::{lambda(qmi::QMuxServerAccepter::State*)#1}::operator() const(qmi::QMuxServerAccepter::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

BOOL ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE20execute_wrapped_syncIZNS3_6acceptERKN3xpc4dictERKN8dispatch5queueEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSF__block_invoke(uint64_t a1)
{
  __p[5] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void ****)(a1 + 40);
  uint64_t v2 = v1[1];
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t value = xpc_dictionary_get_value(**v1, "connect");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  uint64_t v4 = HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) >= 0) {
    uint64_t v5 = (void *)HIBYTE(__s1[2]);
  }
  else {
    uint64_t v5 = __s1[1];
  }
  uint64_t v6 = (void *)*((unsigned __int8 *)v2 + 87);
  int v7 = (char)v6;
  if ((char)v6 < 0) {
    uint64_t v6 = v2[9];
  }
  if (v5 != v6) {
    goto LABEL_30;
  }
  char v8 = v2 + 8;
  if (v7 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(v2 + 8);
  }
  else {
    uint64_t v9 = (unsigned __int8 *)v2[8];
  }
  if ((HIBYTE(__s1[2]) & 0x80) != 0)
  {
    if (!memcmp(__s1[0], v9, (size_t)__s1[1])) {
      goto LABEL_20;
    }
LABEL_30:
    BOOL v15 = 0;
    goto LABEL_31;
  }
  if (HIBYTE(__s1[2]))
  {
    uint64_t v10 = __s1;
    while (*(unsigned __int8 *)v10 == *v9)
    {
      uint64_t v10 = (void **)((char *)v10 + 1);
      ++v9;
      if (!--v4) {
        goto LABEL_20;
      }
    }
    goto LABEL_30;
  }
LABEL_20:
  xpc_object_t v11 = xpc_dictionary_get_value(**v1, "svc_type");
  __p[0] = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    __p[0] = xpc_null_create();
  }
  unsigned __int8 v12 = xpc::dyn_cast_or_default();
  xpc_release(__p[0]);
  if (!v12)
  {
    uint64_t v14 = v2[5];
    BOOL v15 = 0;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    if (*((char *)v2 + 87) < 0) {
      char v8 = (void *)*v8;
    }
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = v8;
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 0;
    _os_log_impl(&dword_1A10C7000, v14, OS_LOG_TYPE_DEFAULT, "#E QMux '%s' rejects incoming client due to bad service type 0x%x", (uint8_t *)__p, 0x12u);
    goto LABEL_30;
  }
  memset(&object, 170, sizeof(object));
  xpc_object_t v13 = xpc_dictionary_get_value(**v1, "name");
  *(void *)&long long v56 = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    *(void *)&long long v56 = xpc_null_create();
  }
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  xpc_release((xpc_object_t)v56);
  std::string::size_type size = HIBYTE(object.__r_.__value_.__r.__words[2]);
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = object.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    size_t v21 = v2[5];
    BOOL v15 = 0;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_111;
    }
    if (*((char *)v2 + 87) < 0) {
      char v8 = (void *)*v8;
    }
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = v8;
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = v12;
    uint64_t v22 = "#E QMux '%s' rejects incoming client(svcType=0x%x) due to empty name";
    uint64_t v23 = v21;
    uint32_t v24 = 18;
    goto LABEL_54;
  }
  uint64_t v18 = v2[14];
  if (!v18
    || (__p[0] = **v1, ((*(uint64_t (**)(void *, void **))(*(void *)v18 + 48))(v18, __p) & 1) != 0))
  {
    xpc_object_t v19 = xpc_dictionary_get_value(**v1, "endpoint");
    xpc_object_t v20 = v19;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      xpc_object_t v20 = xpc_null_create();
    }
    uint64_t v27 = MEMORY[0x1A622CC50](v20);
    BOOL v15 = v27 != MEMORY[0x1E4F145D8];
    if (v27 == MEMORY[0x1E4F145D8])
    {
      __int16 v32 = v2[5];
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v2 + 87) < 0) {
          char v8 = (void *)*v8;
        }
        p_std::string object = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = v8;
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = v12;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = p_object;
        _os_log_impl(&dword_1A10C7000, v32, OS_LOG_TYPE_DEFAULT, "#E QMux '%s' rejects incoming client(svcType=0x%x, name='%s') because of a bad endpoint", (uint8_t *)__p, 0x1Cu);
      }
    }
    else
    {
      std::string::append(&object, "::proxy", 7uLL);
      qmi::QMuxServerAccepter::State::tidyUp_sync((qmi::QMuxServerAccepter::State *)v2);
      uint64_t v28 = v2[5];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v2 + 87) < 0) {
          char v8 = (void *)*v8;
        }
        uint64_t v29 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v29 = (std::string *)object.__r_.__value_.__r.__words[0];
        }
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = v8;
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = v12;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = v29;
        _os_log_impl(&dword_1A10C7000, v28, OS_LOG_TYPE_DEFAULT, "#I QMux '%s' accepted client(svcType=0x%x, name='%s')", (uint8_t *)__p, 0x1Cu);
      }
      uint64_t v30 = MEMORY[0x1E4F145A0];
      if (v20 && MEMORY[0x1A622CC50](v20) == v30)
      {
        xpc_retain(v20);
        unsigned int v31 = (_xpc_endpoint_s *)v20;
      }
      else
      {
        unsigned int v31 = (_xpc_endpoint_s *)xpc_null_create();
      }
      xpc_object_t v53 = xpc_null_create();
      if (MEMORY[0x1A622CC50](v31) == v30)
      {
        uint64_t v34 = xpc_connection_create_from_endpoint(v31);
        if (!v34) {
          uint64_t v34 = xpc_null_create();
        }
        xpc_object_t v35 = xpc_null_create();
        xpc_object_t v36 = v53;
        xpc_object_t v53 = v34;
        xpc_release(v36);
        xpc_release(v35);
      }
      *(void *)&long long v56 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v56 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
      qmi::create_client_proxy_state((uint64_t *)v2 + 6, (long long *)&object, v12, (unint64_t *)&v56);
      __p[0] = 0;
      __p[1] = 0;
      long long v37 = v56;
      *(_OWORD *)&__p[2] = v56;
      if (*((void *)&v56 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v56 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      qmi::ClientProxy::State::init(v37, &v53);
      if (*((void *)&v37 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v37 + 1) + 16))(*((void *)&v37 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
      }
      uint64_t v39 = (char *)v2[16];
      unint64_t v38 = (unint64_t)v2[17];
      if ((unint64_t)v39 >= v38)
      {
        long long v41 = (char *)v2[15];
        uint64_t v42 = (v39 - v41) >> 5;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 59) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v44 = v38 - (void)v41;
        if (v44 >> 4 > v43) {
          unint64_t v43 = v44 >> 4;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v45 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v46 = (char *)operator new(32 * v45);
        uint64_t v47 = &v46[32 * v42];
        *(void *)uint64_t v47 = 0;
        *((void *)v47 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
        *((_OWORD *)v47 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(_OWORD *)&__p[2];
        uint64_t v48 = &v46[32 * v45];
        *(_OWORD *)&__p[2] = 0uLL;
        unint64_t v40 = v47 + 32;
        if (v39 == v41)
        {
          v2[15] = v47;
          v2[16] = v40;
          v2[17] = v48;
        }
        else
        {
          do
          {
            *((void *)v47 - 4) = 0;
            *((void *)v47 - 3) = 0;
            v47 -= 32;
            *((_OWORD *)v47 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v39 - 1);
            *((void *)v39 - 2) = 0;
            *((void *)v39 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
            v39 -= 32;
          }
          while (v39 != v41);
          uint64_t v39 = (char *)v2[15];
          std::string v49 = (char *)v2[16];
          v2[15] = v47;
          v2[16] = v40;
          for (v2[17] = v48; v49 != v39; v49 -= 32)
          {
            uint64_t v50 = (std::__shared_weak_count *)*((void *)v49 - 1);
            if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
            uint64_t v51 = (std::__shared_weak_count *)*((void *)v49 - 3);
            if (v51) {
              std::__shared_weak_count::__release_weak(v51);
            }
          }
        }
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *(void *)uint64_t v39 = 0;
        *((void *)v39 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
        *((_OWORD *)v39 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(_OWORD *)&__p[2];
        *(_OWORD *)&__p[2] = 0uLL;
        unint64_t v40 = v39 + 32;
      }
      v2[16] = v40;
      uint64_t v52 = (std::__shared_weak_count *)__p[3];
      if (__p[3] && !atomic_fetch_add((atomic_ullong *volatile)__p[3] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
      }
      xpc_release(v53);
      xpc_object_t v53 = 0;
      xpc_release(v31);
    }
    xpc_release(v20);
    goto LABEL_111;
  }
  uint64_t v25 = v2[5];
  BOOL v15 = 0;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)v2 + 87) < 0) {
      char v8 = (void *)*v8;
    }
    uint64_t v26 = &object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v26 = (std::string *)object.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p[0]) = 136315650;
    *(void **)((char *)__p + 4) = v8;
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = v12;
    WORD1(__p[2]) = 2080;
    *(void **)((char *)&__p[2] + 4) = v26;
    uint64_t v22 = "#N QMux '%s' validation failed for incoming client(svcType=0x%x, name='%s')";
    uint64_t v23 = v25;
    uint32_t v24 = 28;
LABEL_54:
    _os_log_impl(&dword_1A10C7000, v23, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)__p, v24);
    BOOL v15 = 0;
  }
LABEL_111:
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(object.__r_.__value_.__l.__data_);
  }
LABEL_31:
  if (SHIBYTE(__s1[2]) < 0) {
    operator delete(__s1[0]);
  }
  return v15;
}

void sub_1A11131BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,uint64_t a24,xpc_object_t a25,std::__shared_weak_count *a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_1(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_1(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

int64_t ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE20execute_wrapped_syncIZNKS3_13getAllClientsEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke@<X0>(uint64_t a1@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 40);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v4 = *(void *)(v3 + 120);
  uint64_t v5 = *(void *)(v3 + 128);
  int64_t result = v5 - v4;
  if (v5 != v4)
  {
    if (result < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = result >> 5;
    int64_t result = (int64_t)operator new(result);
    uint64_t v8 = 0;
    *a2 = result;
    a2[1] = result;
    a2[2] = result + 32 * v7;
    do
    {
      uint64_t v9 = (void *)(result + v8);
      void *v9 = 0;
      v9[1] = 0;
      uint64_t v10 = *(void *)(v4 + v8 + 24);
      uint64_t v9[2] = *(void *)(v4 + v8 + 16);
      v9[3] = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      v8 += 32;
    }
    while (v4 + v8 != v5);
    a2[1] = result + v8;
  }
  return result;
}

double ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__16vectorIN3qmi11ClientProxyENS1_9allocatorIS4_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v9);
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = (char *)*v2;
  if (!*v2) {
    goto LABEL_13;
  }
  uint64_t v4 = (char *)v2[1];
  uint64_t v5 = *v2;
  if (v4 == v3) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 3);
      if (!v7) {
        goto LABEL_4;
      }
LABEL_8:
      std::__shared_weak_count::__release_weak(v7);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 3);
    if (v7) {
      goto LABEL_8;
    }
LABEL_4:
    v4 -= 32;
  }
  while (v4 != v3);
  uint64_t v5 = *v2;
LABEL_12:
  v2[1] = v3;
  operator delete(v5);
  *uint64_t v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
LABEL_13:
  double result = *(double *)&v9;
  *(_OWORD *)uint64_t v2 = v9;
  v2[2] = v10;
  return result;
}

double ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__16vectorIN3qmi11ClientProxyENS1_9allocatorIS4_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v9);
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = (char *)*v2;
  if (!*v2) {
    goto LABEL_13;
  }
  uint64_t v4 = (char *)v2[1];
  uint64_t v5 = *v2;
  if (v4 == v3) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 3);
      if (!v7) {
        goto LABEL_4;
      }
LABEL_8:
      std::__shared_weak_count::__release_weak(v7);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 3);
    if (v7) {
      goto LABEL_8;
    }
LABEL_4:
    v4 -= 32;
  }
  while (v4 != v3);
  uint64_t v5 = *v2;
LABEL_12:
  v2[1] = v3;
  operator delete(v5);
  *uint64_t v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
LABEL_13:
  double result = *(double *)&v9;
  *(_OWORD *)uint64_t v2 = v9;
  v2[2] = v10;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0>(qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0,std::default_delete<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 1);
  uint64_t v4 = **a1;
  uint64_t v7 = *(void **)(v4 + 112);
  uint64_t v6 = (void *)(v4 + 112);
  uint64_t v5 = v7;
  uint64_t v8 = v6 - 3;
  *uint64_t v6 = 0;
  if (v7 == v6 - 3)
  {
    (*(void (**)(void *))(*v8 + 32))(v6 - 3);
    uint64_t v10 = v2 + 4;
    uint64_t v9 = v2[4];
    if (!v9)
    {
LABEL_9:
      *uint64_t v6 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    if (v5) {
      (*(void (**)(void *))(*v5 + 40))(v5);
    }
    uint64_t v10 = v2 + 4;
    uint64_t v9 = v2[4];
    if (!v9) {
      goto LABEL_9;
    }
  }
  if (v9 != v3)
  {
    *uint64_t v6 = v9;
    uint64_t v6 = v10;
    goto LABEL_9;
  }
  *uint64_t v6 = v8;
  (*(void (**)(void, void *))(*(void *)*v10 + 24))(*v10, v6 - 3);
LABEL_11:
  uint64_t v11 = *v10;
  if (*v10 == v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
    operator delete(v2);
    unsigned __int8 v12 = (std::__shared_weak_count *)a1[2];
    if (!v12) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
  }
  operator delete(v2);
  unsigned __int8 v12 = (std::__shared_weak_count *)a1[2];
  if (v12)
  {
LABEL_17:
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_19:

  operator delete(a1);
}

void ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  void block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_28_0;
  void block[5] = v5;
  unsigned __int8 v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b40c59_ZTSNSt3__110shared_ptrIKN3qmi18QMuxServerAccepter5StateEEE(void *a1, uint64_t a2)
{
  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_32b40c59_ZTSNSt3__110shared_ptrIKN3qmi18QMuxServerAccepter5StateEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(const void **)(a1 + 32);
  }
  else
  {
    uint64_t v3 = *(const void **)(a1 + 32);
  }
  _Block_object_dispose(v3, 7);
}

void QMIControl::QMIControl(QMIControl *this, const QMux *a2)
{
  QMux::getName(a2, (uint64_t)&__p);
  uint64_t v4 = std::string::append(&__p, "::QMIControl", 0xCuLL);
  uint64_t v6 = (std::string::value_type *)v4->__r_.__value_.__r.__words[0];
  std::string::size_type size = v4->__r_.__value_.__l.__size_;
  v12[0] = v4->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v12 + 3) = *(_DWORD *)((char *)&v4->__r_.__value_.__r.__words[2] + 3);
  int v7 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  *(void *)this = &unk_1EF43CC30;
  if ((v7 & 0x80000000) == 0)
  {
    *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v6;
    *((void *)this + 2) = size;
    *((_DWORD *)this + 6) = v12[0];
    *(_DWORD *)((char *)this + 27) = *(_DWORD *)((char *)v12 + 3);
    *((unsigned char *)this + 3qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v7;
    *((_WORD *)this + 16) = -256;
    *(void *)((char *)this + 36) = 0x2FFFFFFFFLL;
    *((unsigned char *)this + 44) = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), v6, size);
  *((_WORD *)this + 16) = -256;
  *(void *)((char *)this + 36) = 0x2FFFFFFFFLL;
  *((unsigned char *)this + 44) = 1;
  operator delete(v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_3:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_4:
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *(void *)this = &unk_1EF43E438;
  *((void *)this + MEMORY[0x1A622BDE0]((char *)this + 8) = ATCSLogger::getInstance((ATCSLogger *)v4);
  *((void *)this + 9) = *(void *)a2;
  uint64_t v8 = *((void *)a2 + 1);
  *((void *)this + 10) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 1qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = dispatch_get_current_queue();
  dispatch_queue_t v9 = dispatch_queue_create("com.apple.CommCenter.ATCS.QMIControl.Callbacks", 0);
  *((void *)this + 13) = 0;
  *((void *)this + 12) = v9;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = 0;
  *(void *)((char *)this + 117) = 0;
  uint64_t v10 = (pthread_mutex_t *)operator new(0x48uLL);
  v10[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v10, 0);
  *((void *)this + 1MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *((void *)this + 16) = v10;
  *((void *)this + 17) = (char *)this + 144;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 2qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = (char *)this + 168;
  *((_DWORD *)this + 4MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 25) = (char *)this + 208;
  dispatch_retain(*((dispatch_object_t *)this + 11));
}

void sub_1A1113D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

QMIControl::ClientIdRequests *QMIControl::ClientIdRequests::ClientIdRequests(QMIControl::ClientIdRequests *this)
{
  *(void *)this = 0;
  uint64_t v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((void *)this + 2) = 0;
  *(void *)this = v2;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = (char *)this + 16;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = (char *)this + 40;
  return this;
}

{
  pthread_mutex_t *v2;

  *(void *)this = 0;
  uint64_t v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((void *)this + 2) = 0;
  *(void *)this = v2;
  *((void *)this + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = (char *)this + 16;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = (char *)this + 40;
  return this;
}

void QMIControl::~QMIControl(QMIControl *this)
{
  *(void *)this = &unk_1EF43E438;
  qmi::TransactionQueue::State::stop_sync(*((qmi::TransactionQueue::State **)this + 13));
  dispatch_release(*((dispatch_object_t *)this + 12));
  dispatch_release(*((dispatch_object_t *)this + 11));
  uint64_t v2 = *((void *)this + 23);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 23);
    *((void *)this + 23) = 0;
    if (v3) {
      dispatch_release(v3);
    }
  }
  std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(*((void **)this + 26));
  uint64_t v4 = *((void *)this + 23);
  if (v4) {
    dispatch_release(v4);
  }
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((void **)this + 21));
  std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(*((void **)this + 18));
  uint64_t v5 = (pthread_mutex_t *)*((void *)this + 16);
  pthread_mutex_destroy(v5);
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)this = &unk_1EF43CC30;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v1;
  uint64_t vars8;

  QMIControl::~QMIControl(this);

  operator delete(v1);
}

void QMIControl::ClientIdRequests::~ClientIdRequests(QMIControl::ClientIdRequests *this)
{
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((void **)this + 5));
  std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(*((void **)this + 2));
  uint64_t v2 = *(void **)this;
  pthread_mutex_destroy(*(pthread_mutex_t **)this);
  if (v2) {
    operator delete(v2);
  }
}

{
  void *v2;

  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((void **)this + 5));
  std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(*((void **)this + 2));
  uint64_t v2 = *(void **)this;
  pthread_mutex_destroy(*(pthread_mutex_t **)this);
  if (v2) {
    operator delete(v2);
  }
}

void QMIControl::Deleter::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a2 + 88);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  void block[2] = ___ZN10QMIControl7DeleterclEPS__block_invoke;
  block[3] = &__block_descriptor_tmp_2;
  block[4] = a2;
  dispatch_async(v2, block);
}

uint64_t ___ZN10QMIControl7DeleterclEPS__block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void QMIControl::init_sync(QMIControl *this, const QMux *a2)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v5 || (uint64_t v6 = *((void *)this + 6), (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  uint64_t v8 = (std::__shared_weak_count_vtbl *)operator new(0x110uLL);
  qmi::TransactionQueue::State::State((uint64_t)v8, (uint64_t)current_queue, (uint64_t)current_queue, a2, &v17);
  std::shared_ptr<qmi::TransactionQueue::State>::shared_ptr[abi:ne180100]<qmi::TransactionQueue::State,qmi::TransactionQueue::State::Deleter,void>(&v19, v8);
  uint64_t v10 = v19;
  dispatch_queue_t v9 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 14);
  *((void *)this + 13) = v10;
  *((void *)this + 14) = v9;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned __int8 v12 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_object_t v13 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  dispatch_queue_t v15 = dispatch_get_current_queue();
  uint64_t v16 = *((void *)this + 13);
  if (v15 != *(dispatch_queue_t *)(v16 + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x22C, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v14);
    uint64_t v16 = *((void *)this + 13);
  }
  *(_DWORD *)(v16 + 32) = 1;
  qmi::TransactionQueue::State::checkFlushNotifiers_sync((qmi::TransactionQueue::State *)v16);
}

void sub_1A11142B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  operator delete(v11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1A11142D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void QMIControl::create(QMIControl *this@<X0>, QMIControl **a2@<X8>)
{
  *a2 = (QMIControl *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (QMIControl *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = (QMIControl *)operator new(0xE0uLL);
  QMIControl::QMIControl(v5, this);
  std::shared_ptr<QMIControl>::shared_ptr[abi:ne180100]<QMIControl,QMIControl::Deleter,void>(a2, (uint64_t)v5);
  QMIControl::init_sync(*a2, this);
}

void sub_1A1114350(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A1114364(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void QMIControl::revokeRegistration(qmi::TransactionQueue::State **this)
{
  qmi::TransactionQueue::State::stop_sync(this[13]);
  std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(this[26]);
  this[25] = (qmi::TransactionQueue::State *)(this + 26);
  this[26] = 0;
  this[27] = 0;
  *((_WORD *)this + 6qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((unsigned char *)this + 124) = 0;
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v4 = this[13];
  if (current_queue != *((dispatch_queue_t *)v4 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x22C, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v2);
    uint64_t v4 = this[13];
  }
  *((_DWORD *)v4 + MEMORY[0x1A622BDE0]((char *)this + 8) = 1;

  qmi::TransactionQueue::State::checkFlushNotifiers_sync(v4);
}

void QMIControl::revokeRegistration_sync(qmi::TransactionQueue::State **this)
{
  qmi::TransactionQueue::State::stop_sync(this[13]);
  std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(this[26]);
  this[25] = (qmi::TransactionQueue::State *)(this + 26);
  this[26] = 0;
  this[27] = 0;
  *((_WORD *)this + 6qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((unsigned char *)this + 124) = 0;
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v4 = this[13];
  if (current_queue != *((dispatch_queue_t *)v4 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x22C, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v2);
    uint64_t v4 = this[13];
  }
  *((_DWORD *)v4 + MEMORY[0x1A622BDE0]((char *)this + 8) = 1;

  qmi::TransactionQueue::State::checkFlushNotifiers_sync(v4);
}

void QMIControl::start_sync(QMIControl *this, char a2, NSObject *a3)
{
  *((_DWORD *)this + 4MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  uint64_t v6 = *((void *)this + 23);
  if (v6)
  {
    dispatch_source_cancel(v6);
    uint64_t v6 = *((void *)this + 23);
    *((void *)this + 23) = 0;
    if (v6) {
      dispatch_release(v6);
    }
  }
  if ((capabilities::radio::supportsDataService((capabilities::radio *)v6) & 1) == 0) {
    QMIControl::setDataFormat_sync(this, a2);
  }
  QMIControl::setPowerMode_sync(this, 0);
  qmi::TransactionQueue::State::start_sync(*((qmi::TransactionQueue::State **)this + 13));
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  dispatch_queue_t v9 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v9 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x238, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v7);
    dispatch_queue_t v9 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  }

  qmi::TransactionQueue::State::flush_sync(v9, a3);
}

void QMIControl::setDataFormat_sync(QMIControl *this, char a2)
{
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4)
  {
    uint64_t v75 = std::__shared_weak_count::lock(v4);
    if (v75) {
      uint64_t v74 = *((void *)this + 9);
    }
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v5;
  long long v73 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v68[0] = MEMORY[0x1E4F143A8];
  v68[1] = 0x40000000;
  uint64_t v6 = (uint64_t (*)(uint64_t, char *))___ZN10QMIControl18setDataFormat_syncEb_block_invoke;
  uint64_t v69 = (uint64_t (*)(uint64_t, char *))___ZN10QMIControl18setDataFormat_syncEb_block_invoke;
  unint64_t v70 = &__block_descriptor_tmp_5;
  char v71 = a2;
  int v7 = (char *)__p[1];
  uint64_t v8 = (char *)v73;
  dispatch_queue_t v9 = (const void **)__p[1];
  if (__p[1] != (void *)v73)
  {
    dispatch_queue_t v9 = (const void **)__p[1];
    while (*((unsigned char *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v73) {
        goto LABEL_12;
      }
    }
  }
  if (v9 == (const void **)v73)
  {
LABEL_12:
    unsigned __int8 v12 = operator new(0x10uLL);
    xpc_object_t v13 = v12;
    v12[8] = 1;
    *(void *)unsigned __int8 v12 = &unk_1EF43E7B8;
    *((_DWORD *)v12 + 3) = 0;
    uint64_t v11 = v12 + 12;
    if ((unint64_t)v8 < *((void *)&v73 + 1))
    {
      *(void *)uint64_t v8 = v12;
      uint64_t v14 = (uint64_t)(v8 + 8);
LABEL_34:
      *(void *)&long long v73 = v14;
      uint64_t v6 = v69;
      goto LABEL_35;
    }
    int64_t v15 = v8 - v7;
    uint64_t v16 = (v8 - v7) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      goto LABEL_85;
    }
    uint64_t v18 = *((void *)&v73 + 1) - (void)v7;
    if ((uint64_t)(*((void *)&v73 + 1) - (void)v7) >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        goto LABEL_86;
      }
      xpc_object_t v20 = operator new(8 * v19);
      size_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      *size_t v21 = v13;
      uint64_t v14 = (uint64_t)(v21 + 1);
      if (v7 != v8)
      {
LABEL_23:
        if ((unint64_t)(v15 - 8) < 0x58) {
          goto LABEL_89;
        }
        if ((unint64_t)(v7 - v20) < 0x20) {
          goto LABEL_89;
        }
        unint64_t v23 = ((unint64_t)(v15 - 8) >> 3) + 1;
        uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v25 = &v8[-v24];
        size_t v21 = (void *)((char *)v21 - v24);
        uint64_t v26 = &v20[8 * v16 - 16];
        uint64_t v27 = v8 - 16;
        uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *(_OWORD *)v27;
          *(v26 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v27 - 1);
          *uint64_t v26 = v29;
          v26 -= 2;
          v27 -= 32;
          v28 -= 4;
        }
        while (v28);
        uint64_t v8 = v25;
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_89:
          do
          {
            uint64_t v30 = *((void *)v8 - 1);
            v8 -= 8;
            *--size_t v21 = v30;
          }
          while (v8 != v7);
        }
        int v7 = (char *)__p[1];
        __p[1] = v21;
        *(void *)&long long v73 = v14;
        *((void *)&v73 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v22;
        if (!v7) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }
    else
    {
      xpc_object_t v20 = 0;
      size_t v21 = (void *)(8 * v16);
      uint64_t v22 = 0;
      *(void *)(8 * v16) = v13;
      uint64_t v14 = 8 * v16 + 8;
      if (v7 != v8) {
        goto LABEL_23;
      }
    }
    __p[1] = v21;
    *(void *)&long long v73 = v14;
    *((void *)&v73 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v22;
    if (!v7) {
      goto LABEL_34;
    }
LABEL_33:
    operator delete(v7);
    goto LABEL_34;
  }
  if (!v10) {
    goto LABEL_84;
  }
  uint64_t v11 = v10 + 12;
LABEL_35:
  v6((uint64_t)v68, v11);
  unsigned int v31 = (char *)__p[1];
  __int16 v32 = (char *)v73;
  uint64_t v33 = (const void **)__p[1];
  if (__p[1] != (void *)v73)
  {
    uint64_t v33 = (const void **)__p[1];
    while (*((unsigned char *)*v33 + 8) != 16)
    {
      if (++v33 == (const void **)v73) {
        goto LABEL_43;
      }
    }
  }
  if (v33 == (const void **)v73)
  {
LABEL_43:
    xpc_object_t v36 = (char *)operator new(0x10uLL);
    long long v37 = v36;
    v36[8] = 16;
    *(void *)xpc_object_t v36 = &unk_1EF43E808;
    *((_DWORD *)v36 + 3) = 0;
    xpc_object_t v35 = v36 + 12;
    if ((unint64_t)v32 < *((void *)&v73 + 1))
    {
      *(void *)__int16 v32 = v36;
      *(void *)&long long v73 = v32 + 8;
      goto LABEL_66;
    }
    int64_t v38 = v32 - v31;
    uint64_t v39 = (v32 - v31) >> 3;
    unint64_t v40 = v39 + 1;
    if (!((unint64_t)(v39 + 1) >> 61))
    {
      uint64_t v41 = *((void *)&v73 + 1) - (void)v31;
      if ((uint64_t)(*((void *)&v73 + 1) - (void)v31) >> 2 > v40) {
        unint64_t v40 = v41 >> 2;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v40;
      }
      if (!v42)
      {
        unint64_t v43 = 0;
        uint64_t v44 = (void *)(8 * v39);
        unint64_t v45 = 0;
        *(void *)(8 * v39) = v37;
        uint64_t v46 = 8 * v39 + 8;
        if (v31 != v32) {
          goto LABEL_54;
        }
        goto LABEL_63;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = operator new(8 * v42);
        uint64_t v44 = &v43[8 * v39];
        unint64_t v45 = &v43[8 * v42];
        void *v44 = v37;
        uint64_t v46 = (uint64_t)(v44 + 1);
        if (v31 != v32)
        {
LABEL_54:
          if ((unint64_t)(v38 - 8) < 0x58) {
            goto LABEL_90;
          }
          if ((unint64_t)(v31 - v43) < 0x20) {
            goto LABEL_90;
          }
          unint64_t v47 = ((unint64_t)(v38 - 8) >> 3) + 1;
          uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          std::string v49 = &v32[-v48];
          uint64_t v44 = (void *)((char *)v44 - v48);
          uint64_t v50 = &v43[8 * v39 - 16];
          uint64_t v51 = v32 - 16;
          uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v53 = *(_OWORD *)v51;
            *(v50 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v51 - 1);
            *uint64_t v50 = v53;
            v50 -= 2;
            v51 -= 32;
            v52 -= 4;
          }
          while (v52);
          __int16 v32 = v49;
          if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_90:
            do
            {
              uint64_t v54 = *((void *)v32 - 1);
              v32 -= 8;
              *--uint64_t v44 = v54;
            }
            while (v32 != v31);
          }
          unsigned int v31 = (char *)__p[1];
          __p[1] = v44;
          *(void *)&long long v73 = v46;
          *((void *)&v73 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v45;
          if (!v31) {
            goto LABEL_65;
          }
          goto LABEL_64;
        }
LABEL_63:
        __p[1] = v44;
        *(void *)&long long v73 = v46;
        *((void *)&v73 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v45;
        if (!v31)
        {
LABEL_65:
          *(void *)&long long v73 = v46;
          goto LABEL_66;
        }
LABEL_64:
        operator delete(v31);
        goto LABEL_65;
      }
LABEL_86:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_85:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (!v34) {
LABEL_84:
  }
    __cxa_bad_cast();
  xpc_object_t v35 = v34 + 12;
LABEL_66:
  *xpc_object_t v35 = 2;
  uint64_t v56 = *((void *)this + 6);
  char v55 = (std::__shared_weak_count *)*((void *)this + 7);
  uint64_t v66 = v56;
  if (!v55 || (unint64_t v57 = std::__shared_weak_count::lock(v55), (v67 = v57) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v62[0] = MEMORY[0x1E4F143A8];
  v62[1] = 1174405120;
  v62[2] = ___ZN10QMIControl18setDataFormat_syncEb_block_invoke_3;
  v62[3] = &__block_descriptor_tmp_10_1;
  v62[4] = v56;
  unint64_t v63 = v57;
  atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v64 = v74;
  long long v65 = v75;
  if (v75) {
    atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::TransactionQueue::forceSend_sync((uint64_t *)this + 13, (qmi::MutableMessageBase *)__p, 25000, v62);
  fd_set v58 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  uint64_t v59 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
  uint64_t v60 = v67;
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v61 = v75;
  if (v75)
  {
    if (!atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_1A1114C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  QMux::~QMux(v26);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a25);
  QMux::~QMux((QMux *)(v27 - 96));
  _Unwind_Resume(a1);
}

void sub_1A1114C88(_Unwind_Exception *a1)
{
  QMux::~QMux((QMux *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_1A1114C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  QMux::~QMux((QMux *)(v17 - 96));
  _Unwind_Resume(a1);
}

void QMIControl::setPowerMode_sync(void *a1, int a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v43 = v4;
  long long v44 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v43);
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 0x40000000;
  long long v5 = (void (*)(uint64_t, char *))___ZN10QMIControl17setPowerMode_syncEN3qmi12PowerProfileE_block_invoke;
  unint64_t v40 = (void (*)(uint64_t, char *))___ZN10QMIControl17setPowerMode_syncEN3qmi12PowerProfileE_block_invoke;
  uint64_t v41 = &__block_descriptor_tmp_62;
  int v42 = a2;
  uint64_t v6 = (char *)*((void *)&v43 + 1);
  int v7 = (char *)v44;
  uint64_t v8 = (const void **)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1) != (void)v44)
  {
    uint64_t v8 = (const void **)*((void *)&v43 + 1);
    while (*((unsigned char *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v44) {
        goto LABEL_9;
      }
    }
  }
  if (v8 == (const void **)v44)
  {
LABEL_9:
    uint64_t v11 = operator new(0x10uLL);
    unsigned __int8 v12 = v11;
    v11[8] = 1;
    *(void *)uint64_t v11 = &unk_1EF43E9E8;
    *((_DWORD *)v11 + 3) = 0;
    uint64_t v10 = v11 + 12;
    if ((unint64_t)v7 < *((void *)&v44 + 1))
    {
      *(void *)int v7 = v11;
      uint64_t v13 = (uint64_t)(v7 + 8);
LABEL_22:
      *(void *)&long long v44 = v13;
      long long v5 = v40;
      goto LABEL_23;
    }
    int64_t v14 = v7 - v6;
    uint64_t v15 = (v7 - v6) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = *((void *)&v44 + 1) - (void)v6;
    if ((uint64_t)(*((void *)&v44 + 1) - (void)v6) >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v19 = operator new(8 * v18);
      xpc_object_t v20 = &v19[8 * v15];
      size_t v21 = &v19[8 * v18];
      *xpc_object_t v20 = v12;
      uint64_t v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_20:
        *((void *)&v43 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v20;
        *(void *)&long long v44 = v13;
        *((void *)&v44 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v21;
        if (!v6) {
          goto LABEL_22;
        }
LABEL_21:
        operator delete(v6);
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v19 = 0;
      xpc_object_t v20 = (void *)(8 * v15);
      size_t v21 = 0;
      *(void *)(8 * v15) = v12;
      uint64_t v13 = 8 * v15 + 8;
      if (v6 == v7) {
        goto LABEL_20;
      }
    }
    if ((unint64_t)(v14 - 8) < 0x58) {
      goto LABEL_47;
    }
    if ((unint64_t)(v6 - v19) < 0x20) {
      goto LABEL_47;
    }
    unint64_t v27 = ((unint64_t)(v14 - 8) >> 3) + 1;
    uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    long long v29 = &v7[-v28];
    xpc_object_t v20 = (void *)((char *)v20 - v28);
    uint64_t v30 = &v19[8 * v15 - 16];
    unsigned int v31 = v7 - 16;
    uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *(v30 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v31 - 1);
      *uint64_t v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 4;
    }
    while (v32);
    int v7 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        uint64_t v34 = *((void *)v7 - 1);
        v7 -= 8;
        *--xpc_object_t v20 = v34;
      }
      while (v7 != v6);
    }
    uint64_t v6 = (char *)*((void *)&v43 + 1);
    *((void *)&v43 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v20;
    *(void *)&long long v44 = v13;
    *((void *)&v44 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v21;
    if (!v6) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v10 = v9 + 12;
LABEL_23:
  v5((uint64_t)v39, v10);
  uint64_t v23 = a1[6];
  uint64_t v22 = (std::__shared_weak_count *)a1[7];
  uint64_t v37 = v23;
  if (!v22 || (uint64_t v24 = std::__shared_weak_count::lock(v22), (v38 = v24) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 1174405120;
  v35[2] = ___ZN10QMIControl17setPowerMode_syncEN3qmi12PowerProfileE_block_invoke_2;
  v35[3] = &__block_descriptor_tmp_65;
  v35[4] = v23;
  xpc_object_t v36 = v24;
  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  qmi::TransactionQueue::forceSend_sync(a1 + 13, (qmi::MutableMessageBase *)&v43, 25000, v35);
  uint64_t v25 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v43);
}

void sub_1A11150B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v8);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1A11150D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1A11150EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10QMIControl18setDataFormat_syncEb_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(unsigned __int8 *)(result + 32);
  return result;
}

void ___ZN10QMIControl18setDataFormat_syncEb_block_invoke_3(void *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    uint64_t v5 = *(void *)(a1[4] + 64);
    uint64_t v6 = (const char *)qmi::asString();
    uint64_t v7 = a1[4];
    uint64_t v8 = (const char *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v8 = *(const char **)v8;
    }
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v5 + 24))(v5, 6, "SetDataFormat::Response returned error 0x%x (%s) [%s]\n", v2, v6, v8);
    uint64_t v9 = a1[6];
    if (v9) {
      uint64_t v10 = QMux::BOOL_true_type;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      uint64_t v11 = (std::__shared_weak_count *)a1[7];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QMux::State::notifyControlMessageError_sync(v9, *(_DWORD *)(a2 + 4));
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_1A1115240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10QMIControlEE48c9_ZTS4QMux(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10QMIControlEE48c9_ZTS4QMux(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void QMIControl::add_sync(void *a1, void *a2)
{
  char v4 = *(unsigned char *)(*a2 + 32);
  if (QMIControl::ClientIdRequests::addRequest((uint64_t)(a1 + 16), a2))
  {
    QMIControl::requestClientId_sync(a1, v4);
    return;
  }
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[7] = v5;
  v43[8] = v5;
  v43[5] = v5;
  void v43[6] = v5;
  v43[3] = v5;
  v43[4] = v5;
  v43[1] = v5;
  void v43[2] = v5;
  long long v42 = v5;
  v43[0] = v5;
  *(_OWORD *)std::string __p = v5;
  long long v41 = v5;
  long long v38 = v5;
  long long v39 = v5;
  long long v36 = v5;
  long long v37 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v36);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"QMI client double request for ID", 32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" client=", 8);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" svc=", 5);
  uint64_t v8 = (void *)std::ostream::operator<<();
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" [", 2);
  int v10 = *(char *)(*a2 + 31);
  if (v10 >= 0) {
    uint64_t v11 = *a2 + 8;
  }
  else {
    uint64_t v11 = *(void *)(*a2 + 8);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(*a2 + 31);
  }
  else {
    uint64_t v12 = *(void *)(*a2 + 16);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
  uint64_t v34 = 0;
  xpc_object_t v35 = 0;
  uint64_t v15 = (std::__shared_weak_count *)a1[10];
  if (!v15
    || (xpc_object_t v35 = std::__shared_weak_count::lock(v15)) == 0
    || ((v34 = (void *)a1[9]) != 0 ? (uint64_t v16 = QMux::BOOL_true_type) : (uint64_t v16 = 0), !v16))
  {
    if ((BYTE8(v42) & 0x10) != 0)
    {
      uint64_t v25 = v42;
      if ((unint64_t)v42 < *((void *)&v39 + 1))
      {
        *(void *)&long long v42 = *((void *)&v39 + 1);
        uint64_t v25 = *((void *)&v39 + 1);
      }
      uint64_t v26 = (const void *)v39;
      size_t v19 = v25 - v39;
      if ((unint64_t)(v25 - v39) > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_59;
      }
    }
    else
    {
      if ((BYTE8(v42) & 8) == 0)
      {
        size_t v19 = 0;
        HIBYTE(v33) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_47;
      }
      uint64_t v26 = (const void *)*((void *)&v37 + 1);
      size_t v19 = *((void *)&v38 + 1) - *((void *)&v37 + 1);
      if (*((void *)&v38 + 1) - *((void *)&v37 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_59:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v19 >= 0x17)
    {
      uint64_t v27 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17) {
        uint64_t v27 = v19 | 7;
      }
      uint64_t v28 = v27 + 1;
      p_dst = (void **)operator new(v27 + 1);
      size_t v32 = v19;
      int64_t v33 = v28 | 0x8000000000000000;
      long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v19;
      p_dst = (void **)&__dst;
      if (!v19) {
        goto LABEL_47;
      }
    }
    memmove(p_dst, v26, v19);
LABEL_47:
    *((unsigned char *)p_dst + v19) = 0;
    long long v29 = (void **)&__dst;
    if (v33 < 0) {
      long long v29 = __dst;
    }
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0xBD, "false", "is not", "true", "%s", v14, v29);
    goto LABEL_50;
  }
  if ((BYTE8(v42) & 0x10) != 0)
  {
    uint64_t v21 = v42;
    if ((unint64_t)v42 < *((void *)&v39 + 1))
    {
      *(void *)&long long v42 = *((void *)&v39 + 1);
      uint64_t v21 = *((void *)&v39 + 1);
    }
    uint64_t v22 = (const void *)v39;
    size_t v17 = v21 - v39;
    if ((unint64_t)(v21 - v39) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_42;
    }
  }
  else
  {
    if ((BYTE8(v42) & 8) == 0)
    {
      size_t v17 = 0;
      HIBYTE(v33) = 0;
      unint64_t v18 = (void **)&__dst;
      goto LABEL_34;
    }
    uint64_t v22 = (const void *)*((void *)&v37 + 1);
    size_t v17 = *((void *)&v38 + 1) - *((void *)&v37 + 1);
    if (*((void *)&v38 + 1) - *((void *)&v37 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_42:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v17 >= 0x17)
  {
    uint64_t v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v23 = v17 | 7;
    }
    uint64_t v24 = v23 + 1;
    unint64_t v18 = (void **)operator new(v23 + 1);
    size_t v32 = v17;
    int64_t v33 = v24 | 0x8000000000000000;
    long long __dst = v18;
  }
  else
  {
    HIBYTE(v33) = v17;
    unint64_t v18 = (void **)&__dst;
    if (!v17) {
      goto LABEL_34;
    }
  }
  memmove(v18, v22, v17);
LABEL_34:
  *((unsigned char *)v18 + v17) = 0;
  QMux::invokeReset(&v34, (uint64_t)&__dst, 0);
LABEL_50:
  if (SHIBYTE(v33) < 0) {
    operator delete(__dst);
  }
  uint64_t v30 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  *(void *)&long long v36 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v36 + *(void *)(v36 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v36 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A622C370](v43);
}

void sub_1A1115870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
  {
    operator delete(__p);
    QMux::~QMux((QMux *)&a16);
    std::ostringstream::~ostringstream((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  QMux::~QMux((QMux *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1A11158C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t QMIControl::ClientIdRequests::addRequest(uint64_t a1, void *a2)
{
  char v4 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  v4[1].__sig = (uint64_t)pthread_self();
  unsigned int v5 = *(unsigned __int8 *)(*a2 + 32);
  uint64_t v7 = (uint64_t **)(a1 + 16);
  uint64_t v6 = *(uint64_t **)(a1 + 16);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        unsigned int v9 = *((unsigned __int8 *)v6 + 32);
        if (v5 >= v9) {
          break;
        }
        uint64_t v6 = (uint64_t *)*v8;
        uint64_t v7 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= v5) {
        break;
      }
      uint64_t v6 = (uint64_t *)v8[1];
      if (!v6)
      {
        uint64_t v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
    int v10 = v8;
    uint64_t v15 = v8 + 5;
    uint64_t v13 = (uint64_t *)v8[5];
    uint64_t v14 = (uint64_t *)v15[1];
    if (v13 != v14) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 16);
LABEL_8:
    int v10 = operator new(0x40uLL);
    v10[32] = v5;
    *((void *)v10 + 6) = 0;
    *((void *)v10 + 7) = 0;
    *((void *)v10 + 5) = 0;
    *(void *)int v10 = 0;
    *((void *)v10 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
    *((void *)v10 + 2) = v8;
    void *v7 = (uint64_t *)v10;
    uint64_t v11 = **(void **)(a1 + 8);
    uint64_t v12 = (uint64_t *)v10;
    if (v11)
    {
      *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v11;
      uint64_t v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v12);
    ++*(void *)(a1 + 24);
    uint64_t v13 = (uint64_t *)*((void *)v10 + 5);
    uint64_t v14 = (uint64_t *)*((void *)v10 + 6);
    if (v13 != v14)
    {
      do
      {
LABEL_16:
        uint64_t v16 = (std::__shared_weak_count *)v13[1];
        if (v16)
        {
          size_t v17 = std::__shared_weak_count::lock(v16);
          uint64_t v18 = *a2;
          if (v17)
          {
            size_t v19 = v17;
            uint64_t v20 = *v13;
            if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              if (v18 == v20) {
                goto LABEL_26;
              }
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v19);
              if (v18 == v20) {
                goto LABEL_26;
              }
            }
          }
          else if (!v18)
          {
            goto LABEL_26;
          }
        }
        else if (!*a2)
        {
          goto LABEL_26;
        }
        v13 += 2;
      }
      while (v13 != v14);
      uint64_t v13 = v14;
LABEL_26:
      if (v13 != *((uint64_t **)v10 + 6))
      {
        uint64_t v21 = 0;
        goto LABEL_50;
      }
    }
  }
  long long v22 = *(_OWORD *)a2;
  uint64_t v23 = a2[1];
  if (v23)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 16), 1uLL, memory_order_relaxed);
    uint64_t v13 = (uint64_t *)*((void *)v10 + 6);
  }
  unint64_t v24 = *((void *)v10 + 7);
  if ((unint64_t)v13 >= v24)
  {
    uint64_t v26 = *((void *)v10 + 5);
    uint64_t v27 = ((uint64_t)v13 - v26) >> 4;
    if ((unint64_t)(v27 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    long long v41 = v22;
    uint64_t v28 = v24 - v26;
    uint64_t v29 = v28 >> 3;
    if (v28 >> 3 <= (unint64_t)(v27 + 1)) {
      uint64_t v29 = v27 + 1;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v29;
    }
    if (v30 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unsigned int v31 = (char *)operator new(16 * v30);
    size_t v32 = &v31[16 * v27];
    int64_t v33 = &v31[16 * v30];
    *(_OWORD *)size_t v32 = v41;
    uint64_t v25 = v32 + 16;
    uint64_t v34 = (void *)*((void *)v10 + 5);
    xpc_object_t v35 = (void *)*((void *)v10 + 6);
    if (v35 == v34)
    {
      *((void *)v10 + 5) = v32;
      *((void *)v10 + 6) = v25;
      *((void *)v10 + 7) = v33;
    }
    else
    {
      do
      {
        long long v36 = *((_OWORD *)v35 - 1);
        v35 -= 2;
        *((_OWORD *)v32 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v36;
        v32 -= 16;
        *xpc_object_t v35 = 0;
        v35[1] = 0;
      }
      while (v35 != v34);
      xpc_object_t v35 = (void *)*((void *)v10 + 5);
      long long v37 = (void *)*((void *)v10 + 6);
      *((void *)v10 + 5) = v32;
      *((void *)v10 + 6) = v25;
      *((void *)v10 + 7) = v33;
      while (v37 != v35)
      {
        long long v38 = (std::__shared_weak_count *)*(v37 - 1);
        if (v38) {
          std::__shared_weak_count::__release_weak(v38);
        }
        v37 -= 2;
      }
    }
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *uint64_t v13 = v22;
    v13[1] = v23;
    uint64_t v25 = v13 + 2;
  }
  *((void *)v10 + 6) = v25;
  uint64_t v21 = 1;
LABEL_50:
  long long v39 = *(pthread_mutex_t **)a1;
  pthread_self();
  v39[1].__sig = 0;
  pthread_mutex_unlock(v39);
  return v21;
}

void sub_1A1115BC4(_Unwind_Exception *a1)
{
  uint64_t v3 = *v1;
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

void QMIControl::requestClientId_sync(void *a1, char a2)
{
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  char v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
  {
    uint64_t v52 = std::__shared_weak_count::lock(v4);
    if (v52) {
      uint64_t v51 = a1[9];
    }
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v5;
  long long v50 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v45[0] = MEMORY[0x1E4F143A8];
  v45[1] = 0x40000000;
  uint64_t v6 = ___ZN10QMIControl20requestClientId_syncEN3qmi11ServiceTypeE_block_invoke;
  uint64_t v46 = ___ZN10QMIControl20requestClientId_syncEN3qmi11ServiceTypeE_block_invoke;
  unint64_t v47 = &__block_descriptor_tmp_24_0;
  char v48 = a2;
  uint64_t v7 = (char *)__p[1];
  uint64_t v8 = (char *)v50;
  unsigned int v9 = (const void **)__p[1];
  if (__p[1] != (void *)v50)
  {
    unsigned int v9 = (const void **)__p[1];
    while (*((unsigned char *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v50) {
        goto LABEL_12;
      }
    }
  }
  if (v9 == (const void **)v50)
  {
LABEL_12:
    uint64_t v12 = operator new(0x10uLL);
    uint64_t v13 = v12;
    v12[4] = 1;
    *(void *)uint64_t v12 = &unk_1EF43E858;
    if ((unint64_t)v8 < *((void *)&v50 + 1))
    {
      *(void *)uint64_t v8 = v12;
      uint64_t v14 = (uint64_t)(v8 + 8);
LABEL_34:
      uint64_t v11 = (char *)v13 + 9;
      *(void *)&long long v50 = v14;
      uint64_t v6 = v46;
      goto LABEL_35;
    }
    int64_t v15 = v8 - v7;
    uint64_t v16 = (v8 - v7) >> 3;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = *((void *)&v50 + 1) - (void)v7;
    if ((uint64_t)(*((void *)&v50 + 1) - (void)v7) >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v20 = operator new(8 * v19);
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      *uint64_t v21 = v13;
      uint64_t v14 = (uint64_t)(v21 + 1);
      if (v7 != v8)
      {
LABEL_23:
        if ((unint64_t)(v15 - 8) < 0x58) {
          goto LABEL_58;
        }
        if ((unint64_t)(v7 - v20) < 0x20) {
          goto LABEL_58;
        }
        unint64_t v23 = ((unint64_t)(v15 - 8) >> 3) + 1;
        uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v25 = &v8[-v24];
        uint64_t v21 = (void *)((char *)v21 - v24);
        uint64_t v26 = &v20[8 * v16 - 16];
        uint64_t v27 = v8 - 16;
        uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *(_OWORD *)v27;
          *(v26 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v27 - 1);
          *uint64_t v26 = v29;
          v26 -= 2;
          v27 -= 32;
          v28 -= 4;
        }
        while (v28);
        uint64_t v8 = v25;
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_58:
          do
          {
            uint64_t v30 = *((void *)v8 - 1);
            v8 -= 8;
            *--uint64_t v21 = v30;
          }
          while (v8 != v7);
        }
        uint64_t v7 = (char *)__p[1];
        __p[1] = v21;
        *(void *)&long long v50 = v14;
        *((void *)&v50 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v22;
        if (!v7) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = (void *)(8 * v16);
      long long v22 = 0;
      *(void *)(8 * v16) = v13;
      uint64_t v14 = 8 * v16 + 8;
      if (v7 != v8) {
        goto LABEL_23;
      }
    }
    __p[1] = v21;
    *(void *)&long long v50 = v14;
    *((void *)&v50 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v22;
    if (!v7) {
      goto LABEL_34;
    }
LABEL_33:
    operator delete(v7);
    goto LABEL_34;
  }
  if (!v10) {
    __cxa_bad_cast();
  }
  uint64_t v11 = v10 + 9;
LABEL_35:
  v6((uint64_t)v45, v11);
  uint64_t v32 = a1[6];
  unsigned int v31 = (std::__shared_weak_count *)a1[7];
  uint64_t v43 = v32;
  if (!v31 || (int64_t v33 = std::__shared_weak_count::lock(v31), (v44 = v33) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 1174405120;
  v38[2] = ___ZN10QMIControl20requestClientId_syncEN3qmi11ServiceTypeE_block_invoke_2;
  void v38[3] = &__block_descriptor_tmp_27_0;
  v38[4] = v32;
  long long v39 = v33;
  atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  char v42 = a2;
  uint64_t v40 = v51;
  long long v41 = v52;
  if (v52) {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::TransactionQueue::send_sync(a1 + 13, (qmi::MutableMessageBase *)__p, 25000, v38);
  uint64_t v34 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  xpc_object_t v35 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  long long v36 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  long long v37 = v52;
  if (v52)
  {
    if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1A11160C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  QMux::~QMux(v26);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a25);
  QMux::~QMux((QMux *)(v27 - 96));
  _Unwind_Resume(a1);
}

void sub_1A11160F4(_Unwind_Exception *a1)
{
  QMux::~QMux((QMux *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_1A1116108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  QMux::~QMux((QMux *)(v17 - 96));
  _Unwind_Resume(a1);
}

void QMIControl::remove_sync(void *a1, uint64_t *a2)
{
  int v4 = *(unsigned __int8 *)(*a2 + 33);
  char v5 = *(unsigned char *)(*a2 + 32);
  int v6 = QMIControl::ClientIdRequests::removeRequestsForClient((uint64_t)(a1 + 16), a2);
  if (v4 != 255)
  {
    if (!v6)
    {
LABEL_62:
      QMIControl::releaseClientId_sync(a1, v5, v4);
      return;
    }
    unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
    v48[7] = v7;
    v48[8] = v7;
    v48[5] = v7;
    v48[6] = v7;
    v48[3] = v7;
    v48[4] = v7;
    v48[1] = v7;
    v48[2] = v7;
    long long v47 = v7;
    v48[0] = v7;
    *(_OWORD *)std::string __p = v7;
    long long v46 = v7;
    long long v43 = v7;
    long long v44 = v7;
    long long v41 = v7;
    long long v42 = v7;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v41);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"QMI client has an ID and is waiting for one,", 44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" client=", 8);
    unsigned int v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" svc=", 5);
    int v10 = (void *)std::ostream::operator<<();
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" [", 2);
    int v12 = *(char *)(*a2 + 31);
    if (v12 >= 0) {
      uint64_t v13 = *a2 + 8;
    }
    else {
      uint64_t v13 = *(void *)(*a2 + 8);
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(*a2 + 31);
    }
    else {
      uint64_t v14 = *(void *)(*a2 + 16);
    }
    int64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
    long long v39 = 0;
    uint64_t v40 = 0;
    uint64_t v17 = (std::__shared_weak_count *)a1[10];
    if (v17)
    {
      uint64_t v40 = std::__shared_weak_count::lock(v17);
      if (v40)
      {
        long long v39 = (void *)a1[9];
        if (v39 ? QMux::BOOL_true_type : 0)
        {
          if ((BYTE8(v47) & 0x10) != 0)
          {
            uint64_t v26 = v47;
            if ((unint64_t)v47 < *((void *)&v44 + 1))
            {
              *(void *)&long long v47 = *((void *)&v44 + 1);
              uint64_t v26 = *((void *)&v44 + 1);
            }
            uint64_t v27 = (const void *)v44;
            size_t v19 = v26 - v44;
            if ((unint64_t)(v26 - v44) > 0x7FFFFFFFFFFFFFF7) {
              goto LABEL_46;
            }
          }
          else
          {
            if ((BYTE8(v47) & 8) == 0)
            {
              size_t v19 = 0;
              HIBYTE(v3MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
              p_dst = (void **)&__dst;
              goto LABEL_38;
            }
            uint64_t v27 = (const void *)*((void *)&v42 + 1);
            size_t v19 = *((void *)&v43 + 1) - *((void *)&v42 + 1);
            if (*((void *)&v43 + 1) - *((void *)&v42 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_46:
            }
              std::string::__throw_length_error[abi:ne180100]();
          }
          if (v19 >= 0x17)
          {
            uint64_t v28 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17) {
              uint64_t v28 = v19 | 7;
            }
            uint64_t v29 = v28 + 1;
            p_dst = (void **)operator new(v28 + 1);
            size_t v37 = v19;
            int64_t v38 = v29 | 0x8000000000000000;
            long long __dst = p_dst;
          }
          else
          {
            HIBYTE(v3MEMORY[0x1A622BDE0]((char *)this + 8) = v19;
            p_dst = (void **)&__dst;
            if (!v19) {
              goto LABEL_38;
            }
          }
          memmove(p_dst, v27, v19);
LABEL_38:
          *((unsigned char *)p_dst + v19) = 0;
          QMux::invokeReset(&v39, (uint64_t)&__dst, 0);
LABEL_54:
          if (SHIBYTE(v38) < 0) {
            operator delete(__dst);
          }
          xpc_object_t v35 = v40;
          if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
          *(void *)&long long v41 = *MEMORY[0x1E4FBA418];
          *(void *)((char *)&v41 + *(void *)(v41 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
          *((void *)&v41 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = MEMORY[0x1E4FBA470] + 16;
          if (SHIBYTE(v46) < 0) {
            operator delete(__p[1]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1A622C370](v48);
          goto LABEL_62;
        }
      }
    }
    if ((BYTE8(v47) & 0x10) != 0)
    {
      uint64_t v30 = v47;
      if ((unint64_t)v47 < *((void *)&v44 + 1))
      {
        *(void *)&long long v47 = *((void *)&v44 + 1);
        uint64_t v30 = *((void *)&v44 + 1);
      }
      unsigned int v31 = (const void *)v44;
      size_t v24 = v30 - v44;
      if ((unint64_t)(v30 - v44) > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_65;
      }
    }
    else
    {
      if ((BYTE8(v47) & 8) == 0)
      {
        size_t v24 = 0;
        HIBYTE(v3MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
        uint64_t v25 = (void **)&__dst;
        goto LABEL_51;
      }
      unsigned int v31 = (const void *)*((void *)&v42 + 1);
      size_t v24 = *((void *)&v43 + 1) - *((void *)&v42 + 1);
      if (*((void *)&v43 + 1) - *((void *)&v42 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_65:
      }
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v24 >= 0x17)
    {
      uint64_t v32 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v32 = v24 | 7;
      }
      uint64_t v33 = v32 + 1;
      uint64_t v25 = (void **)operator new(v32 + 1);
      size_t v37 = v24;
      int64_t v38 = v33 | 0x8000000000000000;
      long long __dst = v25;
    }
    else
    {
      HIBYTE(v3MEMORY[0x1A622BDE0]((char *)this + 8) = v24;
      uint64_t v25 = (void **)&__dst;
      if (!v24) {
        goto LABEL_51;
      }
    }
    memmove(v25, v31, v24);
LABEL_51:
    *((unsigned char *)v25 + v24) = 0;
    uint64_t v34 = (void **)&__dst;
    if (v38 < 0) {
      uint64_t v34 = __dst;
    }
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0xE2, "false", "is not", "true", "%s", v16, v34);
    goto LABEL_54;
  }
  if (v6)
  {
    uint64_t v21 = a1[12];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    void block[2] = ___ZN10QMIControl11remove_syncENSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_21_0;
    uint64_t v22 = a2[1];
    block[4] = *a2;
    uint64_t v51 = (std::__shared_weak_count *)v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    dispatch_async(v21, block);
    unint64_t v23 = v51;
    if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1A11166DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
  {
    operator delete(__p);
    QMux::~QMux((QMux *)&a16);
    std::ostringstream::~ostringstream((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  QMux::~QMux((QMux *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1A111672C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t QMIControl::ClientIdRequests::removeRequestsForClient(uint64_t a1, uint64_t *a2)
{
  int v4 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  v4[1].__sig = (uint64_t)pthread_self();
  unsigned int v5 = *(unsigned __int8 *)(*a2 + 32);
  long long v7 = (uint64_t **)(a1 + 16);
  int v6 = *(uint64_t **)(a1 + 16);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        unsigned int v9 = *((unsigned __int8 *)v6 + 32);
        if (v5 >= v9) {
          break;
        }
        int v6 = (uint64_t *)*v8;
        long long v7 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= v5) {
        break;
      }
      int v6 = (uint64_t *)v8[1];
      if (!v6)
      {
        long long v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
    int v10 = v8;
    int64_t v15 = v8 + 5;
    uint64_t v13 = (uint64_t *)v8[5];
    uint64_t v14 = (uint64_t *)v15[1];
    if (v13 != v14) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
  uint64_t v8 = (uint64_t *)(a1 + 16);
LABEL_8:
  int v10 = operator new(0x40uLL);
  v10[32] = v5;
  *((void *)v10 + 6) = 0;
  *((void *)v10 + 7) = 0;
  *((void *)v10 + 5) = 0;
  *(void *)int v10 = 0;
  *((void *)v10 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)v10 + 2) = v8;
  char *v7 = (uint64_t *)v10;
  uint64_t v11 = **(void **)(a1 + 8);
  int v12 = (uint64_t *)v10;
  if (v11)
  {
    *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v11;
    int v12 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v12);
  ++*(void *)(a1 + 24);
  uint64_t v13 = (uint64_t *)*((void *)v10 + 5);
  uint64_t v14 = (uint64_t *)*((void *)v10 + 6);
  if (v13 == v14)
  {
LABEL_32:
    uint64_t v25 = 0;
    goto LABEL_39;
  }
  do
  {
LABEL_16:
    uint64_t v16 = (std::__shared_weak_count *)v13[1];
    if (v16)
    {
      uint64_t v17 = std::__shared_weak_count::lock(v16);
      uint64_t v18 = *a2;
      if (v17)
      {
        size_t v19 = v17;
        uint64_t v20 = *v13;
        if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (v18 == v20) {
            goto LABEL_26;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v19);
          if (v18 == v20) {
            goto LABEL_26;
          }
        }
      }
      else if (!v18)
      {
        goto LABEL_26;
      }
    }
    else if (!*a2)
    {
      goto LABEL_26;
    }
    v13 += 2;
  }
  while (v13 != v14);
  uint64_t v13 = v14;
LABEL_26:
  uint64_t v21 = (uint64_t *)*((void *)v10 + 6);
  if (v13 == v21) {
    goto LABEL_32;
  }
  uint64_t v22 = v13 + 2;
  if (v13 + 2 != v21)
  {
    do
    {
      long long v23 = *(_OWORD *)v22;
      *uint64_t v22 = 0;
      v22[1] = 0;
      size_t v24 = (std::__shared_weak_count *)*(v22 - 1);
      *((_OWORD *)v22 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v23;
      if (v24) {
        std::__shared_weak_count::__release_weak(v24);
      }
      v22 += 2;
    }
    while (v22 != v21);
    uint64_t v21 = (uint64_t *)*((void *)v10 + 6);
    uint64_t v13 = v22 - 2;
  }
  while (v21 != v13)
  {
    uint64_t v26 = (std::__shared_weak_count *)*(v21 - 1);
    if (v26) {
      std::__shared_weak_count::__release_weak(v26);
    }
    v21 -= 2;
  }
  *((void *)v10 + 6) = v13;
  uint64_t v25 = 1;
LABEL_39:
  uint64_t v27 = *(pthread_mutex_t **)a1;
  pthread_self();
  v27[1].__sig = 0;
  pthread_mutex_unlock(v27);
  return v25;
}

void sub_1A1116980(_Unwind_Exception *a1)
{
  uint64_t v3 = *v1;
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10QMIControl11remove_syncENSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), 65539);
}

uint64_t __copy_helper_block_e8_32c50_ZTSKNSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c50_ZTSKNSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void QMIControl::releaseClientId_sync(void *a1, char a2, char a3)
{
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  int v6 = (std::__shared_weak_count *)a1[10];
  if (v6)
  {
    uint64_t v54 = std::__shared_weak_count::lock(v6);
    if (v54) {
      uint64_t v53 = a1[9];
    }
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v7;
  long long v52 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 0x40000000;
  uint64_t v8 = ___ZN10QMIControl20releaseClientId_syncEN3qmi11ServiceTypeEh_block_invoke;
  long long v47 = ___ZN10QMIControl20releaseClientId_syncEN3qmi11ServiceTypeEh_block_invoke;
  char v48 = &__block_descriptor_tmp_29;
  char v49 = a2;
  char v50 = a3;
  unsigned int v9 = (char *)__p[1];
  int v10 = (char *)v52;
  uint64_t v11 = (const void **)__p[1];
  if (__p[1] != (void *)v52)
  {
    uint64_t v11 = (const void **)__p[1];
    while (*((unsigned char *)*v11 + 8) != 1)
    {
      if (++v11 == (const void **)v52) {
        goto LABEL_12;
      }
    }
  }
  if (v11 == (const void **)v52)
  {
LABEL_12:
    uint64_t v14 = operator new(0x10uLL);
    int64_t v15 = v14;
    void v14[4] = 1;
    *(void *)uint64_t v14 = &unk_1EF43E8A8;
    *((unsigned char *)v14 + 10) = 0;
    if ((unint64_t)v10 < *((void *)&v52 + 1))
    {
      *(void *)int v10 = v14;
      uint64_t v16 = (uint64_t)(v10 + 8);
LABEL_34:
      uint64_t v13 = (char *)v15 + 9;
      *(void *)&long long v52 = v16;
      uint64_t v8 = v47;
      goto LABEL_35;
    }
    int64_t v17 = v10 - v9;
    uint64_t v18 = (v10 - v9) >> 3;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = *((void *)&v52 + 1) - (void)v9;
    if ((uint64_t)(*((void *)&v52 + 1) - (void)v9) >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v22 = operator new(8 * v21);
      long long v23 = &v22[8 * v18];
      size_t v24 = &v22[8 * v21];
      *long long v23 = v15;
      uint64_t v16 = (uint64_t)(v23 + 1);
      if (v9 != v10)
      {
LABEL_23:
        if ((unint64_t)(v17 - 8) < 0x58) {
          goto LABEL_58;
        }
        if ((unint64_t)(v9 - v22) < 0x20) {
          goto LABEL_58;
        }
        unint64_t v25 = ((unint64_t)(v17 - 8) >> 3) + 1;
        uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v27 = &v10[-v26];
        long long v23 = (void *)((char *)v23 - v26);
        uint64_t v28 = &v22[8 * v18 - 16];
        uint64_t v29 = v10 - 16;
        uint64_t v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v31 = *(_OWORD *)v29;
          *(v28 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v29 - 1);
          *uint64_t v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 4;
        }
        while (v30);
        int v10 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_58:
          do
          {
            uint64_t v32 = *((void *)v10 - 1);
            v10 -= 8;
            *--long long v23 = v32;
          }
          while (v10 != v9);
        }
        unsigned int v9 = (char *)__p[1];
        __p[1] = v23;
        *(void *)&long long v52 = v16;
        *((void *)&v52 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v24;
        if (!v9) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v22 = 0;
      long long v23 = (void *)(8 * v18);
      size_t v24 = 0;
      *(void *)(8 * v1MEMORY[0x1A622BDE0]((char *)this + 8) = v15;
      uint64_t v16 = 8 * v18 + 8;
      if (v9 != v10) {
        goto LABEL_23;
      }
    }
    __p[1] = v23;
    *(void *)&long long v52 = v16;
    *((void *)&v52 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v24;
    if (!v9) {
      goto LABEL_34;
    }
LABEL_33:
    operator delete(v9);
    goto LABEL_34;
  }
  if (!v12) {
    __cxa_bad_cast();
  }
  uint64_t v13 = v12 + 9;
LABEL_35:
  v8((uint64_t)v46, v13);
  uint64_t v34 = a1[6];
  uint64_t v33 = (std::__shared_weak_count *)a1[7];
  uint64_t v44 = v34;
  if (!v33 || (xpc_object_t v35 = std::__shared_weak_count::lock(v33), (v45 = v35) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v40[0] = MEMORY[0x1E4F143A8];
  v40[1] = 1174405120;
  v40[2] = ___ZN10QMIControl20releaseClientId_syncEN3qmi11ServiceTypeEh_block_invoke_2;
  v40[3] = &__block_descriptor_tmp_33;
  v40[4] = v34;
  long long v41 = v35;
  atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v42 = v53;
  long long v43 = v54;
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::TransactionQueue::send_sync(a1 + 13, (qmi::MutableMessageBase *)__p, 25000, v40);
  long long v36 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  size_t v37 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  int64_t v38 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  long long v39 = v54;
  if (v54)
  {
    if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_1A1116F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  QMux::~QMux(v26);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a25);
  QMux::~QMux((QMux *)(v27 - 96));
  _Unwind_Resume(a1);
}

void sub_1A1116F6C(_Unwind_Exception *a1)
{
  QMux::~QMux((QMux *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_1A1116F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  QMux::~QMux((QMux *)(v17 - 96));
  _Unwind_Resume(a1);
}

uint64_t ___ZN10QMIControl20requestClientId_syncEN3qmi11ServiceTypeE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN10QMIControl20requestClientId_syncEN3qmi11ServiceTypeE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 64);
  int v6 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v11 = *(void *)a2;
  int v12 = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v11);
  QMIControl::handleClientIdRequest_sync(v4, v5, (qmi::MessageBase *)&v11);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v11);
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    unsigned int v9 = QMux::BOOL_true_type;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v9)
  {
    int v10 = *(std::__shared_weak_count **)(a1 + 56);
    uint64_t v11 = v8;
    int v12 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMux::State::notifyControlMessageError_sync(v8, *(_DWORD *)(a2 + 4));
    if (v10)
    {
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1A11170C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A11170D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1A11170EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIControl::handleClientIdRequest_sync(uint64_t a1, unsigned int a2, qmi::MessageBase *a3)
{
  uint64_t v49 = 0;
  char v50 = 0;
  int v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    char v50 = v7;
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 72);
      uint64_t v49 = v8;
      if (*((_DWORD *)a3 + 1) != 31) {
        goto LABEL_12;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0;
  if (*((_DWORD *)a3 + 1) != 31) {
    goto LABEL_12;
  }
LABEL_7:
  QMIControl::ClientIdRequests::addFailedRequestForSvcType(a1 + 128, a2);
  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 0x40000000;
  v48[2] = ___ZN10QMIControl26handleClientIdRequest_syncEN3qmi11ServiceTypeERKN3ctl11GetClientId8ResponseE_block_invoke;
  v48[3] = &__block_descriptor_tmp_79;
  v48[4] = a1;
  if (QMIControl::startRetryTimer_sync(a1, (uint64_t)v48))
  {
    unsigned int v9 = (const char *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unsigned int v9 = *(const char **)v9;
    }
    uint64_t v10 = *(void *)(a1 + 64);
    int v11 = *((_DWORD *)a3 + 1);
    int v12 = (const char *)qmi::asString();
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v10 + 24))(v10, 6, "[%s] Got error 0x%x (%s), will retry client request for svc type: %d in %d msec\n", v9, v11, v12, a2, 50);
    if (v7) {
      goto LABEL_61;
    }
    return;
  }
LABEL_12:
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  QMIControl::ClientIdRequests::popClientForSvcType(a1 + 128, a2, &v46);
  uint64_t v13 = (unsigned __int8 *)v46;
  int v14 = *((_DWORD *)a3 + 1);
  if (v46)
  {
    if (v8) {
      int64_t v15 = QMux::BOOL_true_type;
    }
    else {
      int64_t v15 = 0;
    }
    if (v14)
    {
      if (v15)
      {
        if (v14 == 31 || v14 == 5)
        {
          uint64_t v16 = (const char *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0) {
            uint64_t v16 = *(const char **)v16;
          }
          uint64_t v17 = *(void **)(a1 + 64);
          uint64_t v18 = (const char *)qmi::asString();
          unint64_t v19 = qmi::asShortString();
          uint64_t v20 = (void (**)(void *, uint64_t, const char *, ...))(*v17 + 32);
        }
        else
        {
          uint64_t v16 = (const char *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0) {
            uint64_t v16 = *(const char **)v16;
          }
          uint64_t v17 = *(void **)(a1 + 64);
          uint64_t v18 = (const char *)qmi::asString();
          unint64_t v19 = qmi::asShortString();
          uint64_t v20 = (void (**)(void *, uint64_t, const char *, ...))(*v17 + 24);
        }
        (*v20)(v17, 6, "[%s] Baseband did not allocate client for svc type: %s, error: 0x%x [%s]\n", v16, v19, v14, v18);
        uint64_t v44 = v49;
        unint64_t v45 = v50;
        if (v50) {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v27 = (std::__shared_weak_count *)v47;
        uint64_t v42 = v13;
        unint64_t v43 = v47;
        if (v47) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
        }
        (*(void (**)(unsigned __int8 *, void))(*(void *)v13 + 24))(v13, *((unsigned int *)a3 + 1));
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        uint64_t v28 = v45;
        if (!v45) {
          goto LABEL_57;
        }
LABEL_55:
        if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        goto LABEL_57;
      }
      uint64_t v23 = *(void *)(a1 + 64);
      size_t v24 = (const char *)qmi::asString();
      uint64_t v25 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v25 = *(const char **)v25;
      }
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v23 + 24))(v23, 6, "ERROR: handleClientIdRequest: 0x%x (%s) for type: %d. QMux dead; nothing happens now [%s]\n",
        v14,
        v24,
        v13[32],
        v25);
    }
    else if (v15)
    {
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 1174405120;
      long long v36 = ___ZN10QMIControl26handleClientIdRequest_syncEN3qmi11ServiceTypeERKN3ctl11GetClientId8ResponseE_block_invoke_2;
      size_t v37 = &__block_descriptor_tmp_83;
      uint64_t v38 = v8;
      long long v39 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v40 = v13;
      long long v41 = (std::__shared_weak_count *)v47;
      if (v47) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t TlvValue = qmi::MessageBase::findTlvValue(a3);
      if (TlvValue)
      {
        uint64_t v44 = TlvValue;
        __int16 v51 = tlv::parseV<ctl::tlv::AssignedId>();
        v36(v35, (uint64_t)&v51);
      }
      uint64_t v29 = v41;
      if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      uint64_t v28 = v39;
      if (v39) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v26 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v26 = *(const char **)v26;
      }
      (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64), 6, "handleClientIdRequest received, but QMux is dead; dropping [%s]\n",
        v26);
    }
  }
  else if (!v14)
  {
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 0x40000000;
    uint64_t v32 = ___ZN10QMIControl26handleClientIdRequest_syncEN3qmi11ServiceTypeERKN3ctl11GetClientId8ResponseE_block_invoke_85;
    uint64_t v33 = &__block_descriptor_tmp_87_0;
    uint64_t v34 = a1;
    uint64_t v21 = qmi::MessageBase::findTlvValue(a3);
    if (v21)
    {
      uint64_t v44 = v21;
      __int16 v51 = tlv::parseV<ctl::tlv::AssignedId>();
      v32((uint64_t)v31, (unsigned __int8 *)&v51);
    }
  }
LABEL_57:
  uint64_t v30 = (std::__shared_weak_count *)v47;
  if (v47 && !atomic_fetch_add((atomic_ullong *volatile)(v47 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  uint64_t v7 = v50;
  if (v50)
  {
LABEL_61:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1A1117798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v29 - 144);
  QMux::~QMux((QMux *)(v29 - 88));
  _Unwind_Resume(a1);
}

void sub_1A11177C4(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v2);
  QMux::~QMux(v1);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v3 - 144);
  QMux::~QMux((QMux *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1A11177F0(_Unwind_Exception *a1)
{
  QMux::~QMux((QMux *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1A1117804(_Unwind_Exception *a1)
{
  QMux::~QMux((QMux *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1A1117818(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1 - 144);
  QMux::~QMux((QMux *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1A1117834(_Unwind_Exception *a1)
{
  QMux::~QMux((QMux *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t ___ZN10QMIControl20releaseClientId_syncEN3qmi11ServiceTypeEh_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  a2[1] = *(unsigned char *)(result + 33);
  return result;
}

void ___ZN10QMIControl20releaseClientId_syncEN3qmi11ServiceTypeEh_block_invoke_2(void *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    uint64_t v5 = *(void *)(a1[4] + 64);
    int v6 = (const char *)qmi::asString();
    uint64_t v7 = a1[4];
    uint64_t v8 = (const char *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v8 = *(const char **)v8;
    }
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v5 + 24))(v5, 6, "ReleaseClientId::Response returned error 0x%x (%s) during removeClient_sync [%s]\n", v2, v6, v8);
    uint64_t v9 = a1[6];
    if (v9) {
      uint64_t v10 = QMux::BOOL_true_type;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      int v11 = (std::__shared_weak_count *)a1[7];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      QMux::State::notifyControlMessageError_sync(v9, *(_DWORD *)(a2 + 4));
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_1A1117994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMIControl::sendSync_sync(QMIControl *this)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    uint64_t v30 = v3;
    if (v3)
    {
      uint64_t v4 = *((void *)this + 9);
      uint64_t v29 = v4;
      if (!*((_WORD *)this + 60))
      {
LABEL_6:
        if (!*((unsigned char *)this + 124)) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v4 = 0;
      if (!*((_WORD *)this + 60)) {
        goto LABEL_6;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    if (!*((_WORD *)this + 60)) {
      goto LABEL_6;
    }
  }
  memset(v28, 170, 24);
  qmi::MessageBase::MessageBase();
  int v5 = *((unsigned __int16 *)this + 60);
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  int v11 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v11 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x221, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v8);
    int v11 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  }
  qmi::TransactionQueue::State::sendTransactionResponse_sync(v11, v5, (const qmi::ResponseBase *)v28, v6, v7, (uint64_t)v8, v9);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v28);
  if (*((unsigned char *)this + 124)) {
LABEL_12:
  }
    (*(void (**)(QMIControl *))(*(void *)this + 48))(this);
LABEL_13:
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)uint64_t v28 = v12;
  *(_OWORD *)&v28[16] = v12;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
  uint64_t v14 = *((void *)this + 6);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 7);
  uint64_t v26 = v14;
  if (!v13 || (int64_t v15 = std::__shared_weak_count::lock(v13), (v27 = v15) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 1174405120;
  v22[2] = ___ZN10QMIControl13sendSync_syncEv_block_invoke;
  void v22[3] = &__block_descriptor_tmp_36_0;
  v22[4] = v14;
  uint64_t v23 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v24 = v4;
  uint64_t v25 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v16 = qmi::TransactionQueue::forceSend_sync((uint64_t *)this + 13, (qmi::MutableMessageBase *)v28, 2000, v22);
  *((_WORD *)this + 60) = v16;
  if (*((_WORD *)this + 61))
  {
    if (*((unsigned __int16 *)this + 61) == v16) {
      *((unsigned char *)this + 124) = 1;
    }
    uint64_t v17 = v25;
    if (!v25) {
      goto LABEL_29;
    }
LABEL_27:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    goto LABEL_29;
  }
  __int16 v18 = v16 + 224;
  if (((v16 + 224) & 0xFF00) != 0) {
    __int16 v18 = v16 - 32;
  }
  if ((v18 & 0xFFFE) == 0) {
    __int16 v18 = 1;
  }
  *((_WORD *)this + 6qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v18;
  uint64_t v17 = v25;
  if (v25) {
    goto LABEL_27;
  }
LABEL_29:
  unint64_t v19 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
  uint64_t v21 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1A1117D28(_Unwind_Exception *a1)
{
  QMux::~QMux((QMux *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1A1117D3C(_Unwind_Exception *a1)
{
  QMux::~QMux((QMux *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1A1117D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  QMux::~QMux(v20);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  QMux::~QMux((QMux *)(v21 - 64));
  _Unwind_Resume(a1);
}

void sub_1A1117D84(_Unwind_Exception *a1)
{
  QMux::~QMux((QMux *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1A1117D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  QMux::~QMux((QMux *)(v11 - 64));
  _Unwind_Resume(a1);
}

void sub_1A1117DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  QMux::~QMux((QMux *)(v11 - 64));
  _Unwind_Resume(a1);
}

void ___ZN10QMIControl13sendSync_syncEv_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[4];
  int v5 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v10);
  QMIControl::handleSyncResponse_sync(v4, (uint64_t)&v10);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v10);
  uint64_t v7 = a1[6];
  if (v7) {
    uint64_t v8 = QMux::BOOL_true_type;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    uint64_t v9 = (std::__shared_weak_count *)a1[7];
    uint64_t v10 = v7;
    uint64_t v11 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    QMux::State::notifyControlMessageError_sync(v7, *(_DWORD *)(a2 + 4));
    if (v9)
    {
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1A1117EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1117EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1A1117F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIControl::handleSyncResponse_sync(uint64_t a1, uint64_t a2)
{
  int64_t v15 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v4
    || (int v5 = std::__shared_weak_count::lock(v4), (v15 = v5) == 0)
    || ((uint64_t v6 = *(void *)(a1 + 72)) != 0 ? (v7 = QMux::BOOL_true_type) : (v7 = 0),
        !v7 || (int v8 = *(_DWORD *)(a2 + 4), v8 == 65539)))
  {
LABEL_26:
    int v5 = v15;
    if (!v15) {
      return;
    }
    goto LABEL_27;
  }
  if (v8 == 65537)
  {
    uint64_t v9 = (const char *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v9 = *(const char **)v9;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64), 6, "Timeout waiting for response to QMI_CTL_SYNC; retrying. [%s]\n",
      v9);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = (const char *)*(unsigned int *)(v6 + 216);
    if (v10 != 1)
    {
      if (v10 == 5) {
        goto LABEL_25;
      }
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x2D2, "fMainState", "==", "kSync", v10, (const void *)1);
    }
  }
  else
  {
    if (!v8)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      QMux::State::notifySyncSuccess_sync((QMux::State *)v6);
      goto LABEL_25;
    }
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v12 = (const char *)qmi::asString();
    uint64_t v13 = (const char *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v13 = *(const char **)v13;
    }
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v11 + 24))(v11, 6, "Unable to synchronize with baseband QMI: error=%d (%s); retrying. [%s]\n",
      v8,
      v12,
      v13);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = (const char *)*(unsigned int *)(v6 + 216);
    if (v14 != 1)
    {
      if (v14 == 5) {
        goto LABEL_25;
      }
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x2D2, "fMainState", "==", "kSync", v14, (const void *)1);
    }
  }
  QMIControl::sendSync_sync(*(QMIControl **)(v6 + 64));
LABEL_25:
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
LABEL_27:
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1A1118218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  QMux::~QMux((QMux *)va1);
  _Unwind_Resume(a1);
}

void sub_1A111823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  QMux::~QMux((QMux *)va);
  _Unwind_Resume(a1);
}

void QMIControl::configurePowerMode_sync(uint64_t i, char *a2, unsigned int a3, char *a4)
{
  if (a2 != 1) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x163, "profile", "==", "qmi::kQMIPower_Low", (const char *)a2, (const void *)1);
  }
  uint64_t v8 = i + 208;
  uint64_t v7 = *(unsigned __int8 **)(i + 208);
  if (v7)
  {
    uint64_t v9 = i + 208;
    uint64_t v10 = *(void *)(i + 208);
    do
    {
      unsigned int v11 = *(unsigned __int8 *)(v10 + 32);
      BOOL v12 = v11 >= a3;
      if (v11 >= a3) {
        uint64_t v13 = (uint64_t *)v10;
      }
      else {
        uint64_t v13 = (uint64_t *)(v10 + 8);
      }
      if (v12) {
        uint64_t v9 = v10;
      }
      uint64_t v10 = *v13;
    }
    while (*v13);
    if (v9 != v8 && *(unsigned __int8 *)(v9 + 32) <= a3) {
      goto LABEL_18;
    }
  }
  uint64_t v9 = i + 208;
  uint64_t v14 = (uint64_t **)(i + 208);
  int64_t v15 = (char *)(i + 208);
  if (v7)
  {
LABEL_18:
    while (1)
    {
      while (1)
      {
        int64_t v15 = (char *)v7;
        unsigned int v16 = v7[32];
        if (v16 <= a3) {
          break;
        }
        uint64_t v7 = *(unsigned __int8 **)v15;
        uint64_t v14 = (uint64_t **)v15;
        if (!*(void *)v15) {
          goto LABEL_21;
        }
      }
      if (v16 >= a3) {
        break;
      }
      uint64_t v7 = (unsigned __int8 *)*((void *)v15 + 1);
      if (!v7)
      {
        uint64_t v14 = (uint64_t **)(v15 + 8);
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_21:
    uint64_t v17 = v15;
    int64_t v15 = (char *)operator new(0x40uLL);
    v15[32] = a3;
    *((void *)v15 + 7) = 0;
    *((void *)v15 + 6) = 0;
    *((void *)v15 + 5) = v15 + 48;
    *(void *)int64_t v15 = 0;
    *((void *)v15 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
    *((void *)v15 + 2) = v17;
    const char *v14 = (uint64_t *)v15;
    uint64_t v18 = **(void **)(i + 200);
    uint64_t v19 = (uint64_t *)v15;
    if (v18)
    {
      *(void *)(i + 200) = v18;
      uint64_t v19 = *v14;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(i + 208), v19);
    ++*(void *)(i + 216);
  }
  if (v9 != v8 && *((void *)v15 + 7) == *((void *)a4 + 2))
  {
    uint64_t v20 = (char *)*((void *)v15 + 5);
    if (v20 == v15 + 48) {
      return;
    }
    uint64_t v21 = *(void **)a4;
    while (*((unsigned __int16 *)v20 + 13) == *((unsigned __int16 *)v21 + 13))
    {
      uint64_t v22 = (char *)*((void *)v20 + 1);
      uint64_t v23 = v20;
      if (v22)
      {
        do
        {
          uint64_t v20 = v22;
          uint64_t v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v20 = (char *)*((void *)v23 + 2);
          BOOL v24 = *(void *)v20 == (void)v23;
          uint64_t v23 = v20;
        }
        while (!v24);
      }
      uint64_t v25 = (void *)v21[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (void *)v21[2];
          BOOL v24 = *v26 == (void)v21;
          uint64_t v21 = v26;
        }
        while (!v24);
      }
      uint64_t v21 = v26;
      if (v20 == v15 + 48) {
        return;
      }
    }
  }
  uint64_t v27 = (void **)(v15 + 40);
  if (v15 + 40 != a4)
  {
    uint64_t v29 = a4 + 8;
    uint64_t v28 = *(void **)a4;
    if (*((void *)v15 + 7))
    {
      uint64_t v127 = i;
      long long v31 = (uint64_t **)(v15 + 48);
      uint64_t v30 = *((void *)v15 + 6);
      uint64_t v32 = (void *)*((void *)v15 + 5);
      *((void *)v15 + 5) = v15 + 48;
      *(void *)(v30 + 16) = 0;
      *((void *)v15 + 6) = 0;
      *((void *)v15 + 7) = 0;
      if (v32[1]) {
        uint64_t v33 = (void *)v32[1];
      }
      else {
        uint64_t v33 = v32;
      }
      if (v33)
      {
        uint64_t v34 = (void *)v33[2];
        if (v34)
        {
          xpc_object_t v35 = (void *)*v34;
          if ((void *)*v34 == v33)
          {
            *uint64_t v34 = 0;
            while (1)
            {
              uint64_t v102 = (void *)v34[1];
              if (!v102) {
                break;
              }
              do
              {
                uint64_t v34 = v102;
                uint64_t v102 = (void *)*v102;
              }
              while (v102);
            }
          }
          else
          {
            for (v34[1] = 0; v35; xpc_object_t v35 = (void *)v34[1])
            {
              do
              {
                uint64_t v34 = v35;
                xpc_object_t v35 = (void *)*v35;
              }
              while (v35);
            }
          }
        }
        if (v28 != v29)
        {
          while (1)
          {
            long long v36 = v34;
            unsigned int v37 = *((unsigned __int16 *)v28 + 13);
            *((_WORD *)v33 + 13) = v37;
            uint64_t v38 = *v31;
            long long v39 = v15 + 48;
            uint64_t v40 = v15 + 48;
            if (*v31) {
              break;
            }
LABEL_54:
            *uint64_t v33 = 0;
            v33[1] = 0;
            v33[2] = v39;
            *uint64_t v40 = v33;
            long long v41 = (void *)**v27;
            if (v41) {
              goto LABEL_55;
            }
LABEL_56:
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v15 + 6), v33);
            ++*((void *)v15 + 7);
            if (v34)
            {
              uint64_t v34 = (void *)v34[2];
              if (v34)
              {
                uint64_t v44 = (void *)*v34;
                if ((void *)*v34 == v36)
                {
                  *uint64_t v34 = 0;
                  while (1)
                  {
                    unint64_t v45 = (void *)v34[1];
                    if (!v45) {
                      break;
                    }
                    do
                    {
                      uint64_t v34 = v45;
                      unint64_t v45 = (void *)*v45;
                    }
                    while (v45);
                  }
                }
                else
                {
                  for (v34[1] = 0; v44; uint64_t v44 = (void *)v34[1])
                  {
                    do
                    {
                      uint64_t v34 = v44;
                      uint64_t v44 = (void *)*v44;
                    }
                    while (v44);
                  }
                }
              }
            }
            else
            {
              uint64_t v34 = 0;
            }
            uint64_t v42 = (void *)v28[1];
            if (v42)
            {
              do
              {
                unint64_t v43 = v42;
                uint64_t v42 = (void *)*v42;
              }
              while (v42);
            }
            else
            {
              do
              {
                unint64_t v43 = (void *)v28[2];
                BOOL v24 = *v43 == (void)v28;
                uint64_t v28 = v43;
              }
              while (!v24);
            }
            if (v36)
            {
              uint64_t v33 = v36;
              uint64_t v28 = v43;
              if (v43 != v29) {
                continue;
              }
            }
            goto LABEL_87;
          }
          do
          {
            while (1)
            {
              long long v39 = v38;
              if (v37 >= *((unsigned __int16 *)v38 + 13)) {
                break;
              }
              uint64_t v38 = (uint64_t *)*v38;
              uint64_t v40 = v39;
              if (!*v39) {
                goto LABEL_54;
              }
            }
            uint64_t v38 = (uint64_t *)v38[1];
          }
          while (v38);
          uint64_t v40 = v39 + 1;
          *uint64_t v33 = 0;
          v33[1] = 0;
          v33[2] = v39;
          v39[1] = v33;
          long long v41 = (void *)**v27;
          if (!v41) {
            goto LABEL_56;
          }
LABEL_55:
          *uint64_t v27 = v41;
          uint64_t v33 = (void *)*v40;
          goto LABEL_56;
        }
        unint64_t v43 = v28;
        long long v36 = v33;
LABEL_87:
        std::__tree<unsigned short>::destroy((uint64_t)(v15 + 40), v36);
        if (v34)
        {
          unint64_t v46 = (void *)v34[2];
          for (i = v127; v46; unint64_t v46 = (void *)v46[2])
            uint64_t v34 = v46;
          std::__tree<unsigned short>::destroy((uint64_t)(v15 + 40), v34);
          if (v43 == v29) {
            goto LABEL_110;
          }
        }
        else
        {
          uint64_t i = v127;
          if (v43 == v29) {
            goto LABEL_110;
          }
        }
      }
      else
      {
        unint64_t v43 = v28;
        uint64_t i = v127;
        if (v28 == v29) {
          goto LABEL_110;
        }
      }
    }
    else
    {
      unint64_t v43 = *(void **)a4;
      if (v28 == v29) {
        goto LABEL_110;
      }
    }
    unint64_t v47 = (uint64_t ***)(v15 + 48);
    while (1)
    {
      char v48 = (uint64_t *)operator new(0x20uLL);
      uint64_t v49 = v48;
      unsigned int v50 = *((unsigned __int16 *)v43 + 13);
      *((_WORD *)v48 + 13) = v50;
      __int16 v51 = *v47;
      long long v52 = (uint64_t **)(v15 + 48);
      uint64_t v53 = (uint64_t **)(v15 + 48);
      if (*v47) {
        break;
      }
LABEL_96:
      *char v48 = 0;
      v48[1] = 0;
      v48[2] = (uint64_t)v52;
      *uint64_t v53 = v48;
      uint64_t v54 = (void *)**v27;
      if (v54) {
        goto LABEL_97;
      }
LABEL_98:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v15 + 6), v49);
      ++*((void *)v15 + 7);
      char v55 = (void *)v43[1];
      if (v55)
      {
        do
        {
          uint64_t v56 = v55;
          char v55 = (void *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          uint64_t v56 = (void *)v43[2];
          BOOL v24 = *v56 == (void)v43;
          unint64_t v43 = v56;
        }
        while (!v24);
      }
      unint64_t v43 = v56;
      if (v56 == v29) {
        goto LABEL_110;
      }
    }
    do
    {
      while (1)
      {
        long long v52 = v51;
        if (v50 >= *((unsigned __int16 *)v51 + 13)) {
          break;
        }
        __int16 v51 = (uint64_t **)*v51;
        uint64_t v53 = v52;
        if (!*v52) {
          goto LABEL_96;
        }
      }
      __int16 v51 = (uint64_t **)v51[1];
    }
    while (v51);
    uint64_t v53 = v52 + 1;
    *char v48 = 0;
    v48[1] = 0;
    v48[2] = (uint64_t)v52;
    v52[1] = v48;
    uint64_t v54 = (void *)**v27;
    if (!v54) {
      goto LABEL_98;
    }
LABEL_97:
    *uint64_t v27 = v54;
    uint64_t v49 = *v53;
    goto LABEL_98;
  }
LABEL_110:
  unint64_t v57 = (const char *)*((void *)a4 + 2);
  if ((unint64_t)v57 <= 0xA)
  {
    *(void *)&long long v58 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v58 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v150 = v58;
    long long v151 = v58;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v150);
    v146[0] = MEMORY[0x1E4F143A8];
    v146[1] = 0x40000000;
    uint64_t v59 = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke;
    unint64_t v147 = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke;
    int64_t v148 = &__block_descriptor_tmp_43;
    char v149 = a3;
    uint64_t v60 = (const void **)*((void *)&v150 + 1);
    if (*((void *)&v150 + 1) != (void)v151)
    {
      while (*((unsigned char *)*v60 + 8) != 1)
      {
        if (++v60 == (const void **)v151) {
          goto LABEL_123;
        }
      }
    }
    if (v60 == (const void **)v151)
    {
LABEL_123:
      long long v65 = qmi::MutableMessageBase::createTLV<ctl::tlv::PowerSaveDescriptor>(&v150);
      uint64_t v59 = v147;
    }
    else
    {
      if (!v64) {
        goto LABEL_213;
      }
      long long v65 = v64 + 12;
    }
    v59((uint64_t)v146, (uint64_t)v65);
    v142[0] = MEMORY[0x1E4F143A8];
    v142[1] = 0x40000000;
    uint64_t v66 = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_2;
    uint64_t v143 = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_2;
    unint64_t v144 = &__block_descriptor_tmp_45_0;
    int v145 = v15 + 40;
    uint64_t v68 = (char *)*((void *)&v150 + 1);
    uint64_t v67 = (char *)v151;
    uint64_t v69 = (const void **)*((void *)&v150 + 1);
    if (*((void *)&v150 + 1) != (void)v151)
    {
      uint64_t v69 = (const void **)*((void *)&v150 + 1);
      while (*((unsigned char *)*v69 + 8) != 17)
      {
        if (++v69 == (const void **)v151) {
          goto LABEL_132;
        }
      }
    }
    if (v69 != (const void **)v151)
    {
      if (v70)
      {
        char v71 = v70 + 16;
LABEL_186:
        v66((uint64_t)v142, (uint64_t)v71);
        uint64_t v112 = *(void *)(i + 48);
        uint64_t v111 = *(std::__shared_weak_count **)(i + 56);
        uint64_t v140 = v112;
        if (!v111 || (uint64_t v113 = std::__shared_weak_count::lock(v111), (v141 = v113) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        v138[0] = MEMORY[0x1E4F143A8];
        v138[1] = 1174405120;
        v138[2] = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_3;
        v138[3] = &__block_descriptor_tmp_47_0;
        v138[4] = v112;
        uint64_t v139 = v113;
        atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
        qmi::TransactionQueue::forceSend_sync((uint64_t *)(i + 104), (qmi::MutableMessageBase *)&v150, 25000, v138);
        unint64_t v114 = v139;
        if (!v139) {
          goto LABEL_206;
        }
        goto LABEL_204;
      }
LABEL_213:
      __cxa_bad_cast();
    }
LABEL_132:
    unint64_t v72 = operator new(0x28uLL);
    long long v73 = v72;
    v72[8] = 17;
    *(void *)unint64_t v72 = &unk_1EF43E948;
    *((void *)v72 + 2) = 0;
    char v71 = v72 + 16;
    *((void *)v72 + 3) = 0;
    *((void *)v72 + 4) = 0;
    if ((unint64_t)v67 < *((void *)&v151 + 1))
    {
      *(void *)uint64_t v67 = v72;
      uint64_t v74 = (uint64_t)(v67 + 8);
LABEL_185:
      *(void *)&long long v151 = v74;
      uint64_t v66 = v143;
      goto LABEL_186;
    }
    int64_t v86 = v67 - v68;
    uint64_t v87 = (v67 - v68) >> 3;
    unint64_t v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v89 = *((void *)&v151 + 1) - (void)v68;
    if ((uint64_t)(*((void *)&v151 + 1) - (void)v68) >> 2 > v88) {
      unint64_t v88 = v89 >> 2;
    }
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v90 = v88;
    }
    if (v90)
    {
      if (v90 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v91 = operator new(8 * v90);
      std::string::size_type v92 = &v91[8 * v87];
      uint64_t v93 = &v91[8 * v90];
      void *v92 = v73;
      uint64_t v74 = (uint64_t)(v92 + 1);
      if (v68 == v67) {
        goto LABEL_183;
      }
    }
    else
    {
      long long v91 = 0;
      std::string::size_type v92 = (void *)(8 * v87);
      uint64_t v93 = 0;
      *(void *)(8 * v87) = v73;
      uint64_t v74 = 8 * v87 + 8;
      if (v68 == v67)
      {
LABEL_183:
        *((void *)&v150 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v92;
        *(void *)&long long v151 = v74;
        *((void *)&v151 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v93;
        if (v68) {
          operator delete(v68);
        }
        goto LABEL_185;
      }
    }
    if ((unint64_t)(v86 - 8) < 0x58) {
      goto LABEL_221;
    }
    if ((unint64_t)(v68 - v91) < 0x20) {
      goto LABEL_221;
    }
    unint64_t v103 = ((unint64_t)(v86 - 8) >> 3) + 1;
    uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v105 = &v67[-v104];
    std::string::size_type v92 = (void *)((char *)v92 - v104);
    uint64_t v106 = &v91[8 * v87 - 16];
    uint64_t v107 = v67 - 16;
    uint64_t v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v109 = *(_OWORD *)v107;
      *(v106 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v107 - 1);
      *uint64_t v106 = v109;
      v106 -= 2;
      v107 -= 32;
      v108 -= 4;
    }
    while (v108);
    uint64_t v67 = v105;
    if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_221:
      do
      {
        uint64_t v110 = *((void *)v67 - 1);
        v67 -= 8;
        *--std::string::size_type v92 = v110;
      }
      while (v67 != v68);
    }
    uint64_t v68 = (char *)*((void *)&v150 + 1);
    goto LABEL_183;
  }
  if ((unint64_t)v57 <= 0xFF)
  {
    *(void *)&long long v61 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v61 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v150 = v61;
    long long v151 = v61;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v150);
    v134[0] = MEMORY[0x1E4F143A8];
    v134[1] = 0x40000000;
    uint64_t v62 = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_49;
    long long v135 = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_49;
    uint64_t v136 = &__block_descriptor_tmp_50;
    char v137 = a3;
    unint64_t v63 = (const void **)*((void *)&v150 + 1);
    if (*((void *)&v150 + 1) != (void)v151)
    {
      while (*((unsigned char *)*v63 + 8) != 1)
      {
        if (++v63 == (const void **)v151) {
          goto LABEL_140;
        }
      }
    }
    if (v63 == (const void **)v151)
    {
LABEL_140:
      uint64_t v76 = qmi::MutableMessageBase::createTLV<ctl::tlv::PowerSaveDescriptor>(&v150);
      uint64_t v62 = v135;
    }
    else
    {
      if (!v75) {
        goto LABEL_214;
      }
      uint64_t v76 = v75 + 12;
    }
    v62((uint64_t)v134, (uint64_t)v76);
    v130[0] = MEMORY[0x1E4F143A8];
    v130[1] = 0x40000000;
    uint64_t v77 = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_2_51;
    uint64_t v131 = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_2_51;
    v132 = &__block_descriptor_tmp_52;
    v133 = v15 + 40;
    long long v79 = (char *)*((void *)&v150 + 1);
    unint64_t v78 = (char *)v151;
    unint64_t v80 = (const void **)*((void *)&v150 + 1);
    if (*((void *)&v150 + 1) != (void)v151)
    {
      unint64_t v80 = (const void **)*((void *)&v150 + 1);
      while (*((unsigned char *)*v80 + 8) != 16)
      {
        if (++v80 == (const void **)v151) {
          goto LABEL_149;
        }
      }
    }
    if (v80 != (const void **)v151)
    {
      if (v81)
      {
        uint64_t v82 = v81 + 16;
LABEL_201:
        v77((uint64_t)v130, (uint64_t)v82);
        uint64_t v124 = *(void *)(i + 48);
        unint64_t v123 = *(std::__shared_weak_count **)(i + 56);
        uint64_t v140 = v124;
        if (!v123 || (v125 = std::__shared_weak_count::lock(v123), (int v141 = v125) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        v128[0] = MEMORY[0x1E4F143A8];
        v128[1] = 1174405120;
        v128[2] = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_3_53;
        v128[3] = &__block_descriptor_tmp_56;
        v128[4] = v124;
        uint64_t v129 = v125;
        atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
        qmi::TransactionQueue::forceSend_sync((uint64_t *)(i + 104), (qmi::MutableMessageBase *)&v150, 25000, v128);
        unint64_t v114 = v129;
        if (!v129) {
          goto LABEL_206;
        }
LABEL_204:
        if (!atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
LABEL_206:
        uint64_t v126 = v141;
        if (v141 && !atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v150);
        return;
      }
LABEL_214:
      __cxa_bad_cast();
    }
LABEL_149:
    uint64_t v83 = operator new(0x28uLL);
    uint64_t v84 = v83;
    v83[8] = 16;
    *(void *)uint64_t v83 = &unk_1EF43E998;
    *((void *)v83 + 2) = 0;
    uint64_t v82 = v83 + 16;
    *((void *)v83 + 3) = 0;
    *((void *)v83 + 4) = 0;
    if ((unint64_t)v78 < *((void *)&v151 + 1))
    {
      *(void *)unint64_t v78 = v83;
      uint64_t v85 = (uint64_t)(v78 + 8);
LABEL_200:
      *(void *)&long long v151 = v85;
      uint64_t v77 = v131;
      goto LABEL_201;
    }
    int64_t v94 = v78 - v79;
    uint64_t v95 = (v78 - v79) >> 3;
    unint64_t v96 = v95 + 1;
    if ((unint64_t)(v95 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v97 = *((void *)&v151 + 1) - (void)v79;
    if ((uint64_t)(*((void *)&v151 + 1) - (void)v79) >> 2 > v96) {
      unint64_t v96 = v97 >> 2;
    }
    if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v98 = v96;
    }
    if (v98)
    {
      if (v98 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v99 = operator new(8 * v98);
      uint64_t v100 = &v99[8 * v95];
      uint64_t v101 = &v99[8 * v98];
      void *v100 = v84;
      uint64_t v85 = (uint64_t)(v100 + 1);
      if (v79 == v78) {
        goto LABEL_198;
      }
    }
    else
    {
      uint64_t v99 = 0;
      uint64_t v100 = (void *)(8 * v95);
      uint64_t v101 = 0;
      *(void *)(8 * v95) = v84;
      uint64_t v85 = 8 * v95 + 8;
      if (v79 == v78)
      {
LABEL_198:
        *((void *)&v150 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v100;
        *(void *)&long long v151 = v85;
        *((void *)&v151 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v101;
        if (v79) {
          operator delete(v79);
        }
        goto LABEL_200;
      }
    }
    if ((unint64_t)(v94 - 8) < 0x58) {
      goto LABEL_222;
    }
    if ((unint64_t)(v79 - v99) < 0x20) {
      goto LABEL_222;
    }
    unint64_t v115 = ((unint64_t)(v94 - 8) >> 3) + 1;
    uint64_t v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v117 = &v78[-v116];
    uint64_t v100 = (void *)((char *)v100 - v116);
    long long v118 = &v99[8 * v95 - 16];
    long long v119 = v78 - 16;
    uint64_t v120 = v115 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v121 = *(_OWORD *)v119;
      *(v118 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *((_OWORD *)v119 - 1);
      _OWORD *v118 = v121;
      v118 -= 2;
      v119 -= 32;
      v120 -= 4;
    }
    while (v120);
    unint64_t v78 = v117;
    if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_222:
      do
      {
        uint64_t v122 = *((void *)v78 - 1);
        v78 -= 8;
        *--uint64_t v100 = v122;
      }
      while (v78 != v79);
    }
    long long v79 = (char *)*((void *)&v150 + 1);
    goto LABEL_198;
  }

  _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x19D, "indSet.size()", "<=", "255", v57, (const void *)0xFF);
}

void sub_1A1119094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v33);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v34 - 144));
  _Unwind_Resume(a1);
}

void sub_1A11190BC(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1A11190D0(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1A11190E4(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1A11190F8(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = 1;
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(result + 32);
  return result;
}

_WORD *___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)*v3;
  int v5 = v3 + 1;
  uint64_t v4 = v6;
  if (v6 == v5)
  {
    size_t v7 = 0;
    uint64_t v12 = a2;
  }
  else
  {
    size_t v7 = 0;
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v8[2];
          BOOL v11 = *v10 == (void)v8;
          uint64_t v8 = v10;
        }
        while (!v11);
      }
      ++v7;
      uint64_t v8 = v10;
    }
    while (v10 != v5);
    uint64_t v12 = a2;
  }
  return std::vector<unsigned short>::__assign_with_size[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>,std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(v12, v4, v5, v7);
}

void ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) && (qmi::isInternalError() & 1) == 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x182, "isInternalError(response.getError())", "is not", "true", v2);
  }
}

uint64_t __copy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10QMIControlEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10QMIControlEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_49(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = 1;
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(result + 32);
  return result;
}

_WORD *___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_2_51(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)*v3;
  int v5 = v3 + 1;
  uint64_t v4 = v6;
  if (v6 == v5)
  {
    size_t v7 = 0;
    uint64_t v12 = a2;
  }
  else
  {
    size_t v7 = 0;
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v8[2];
          BOOL v11 = *v10 == (void)v8;
          uint64_t v8 = v10;
        }
        while (!v11);
      }
      ++v7;
      uint64_t v8 = v10;
    }
    while (v10 != v5);
    uint64_t v12 = a2;
  }
  return std::vector<unsigned short>::__assign_with_size[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>,std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(v12, v4, v5, v7);
}

void ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_3_53(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) && (qmi::isInternalError() & 1) == 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x198, "isInternalError(response.getError())", "is not", "true", v2);
  }
}

void ___ZN10QMIControl17setPowerMode_syncEN3qmi12PowerProfileE_block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = (const char *)*(unsigned int *)(a1 + 32);
  if (v2)
  {
    if (v2 == 1) {
      *a2 = 1;
    }
    else {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x1B0, "profile", "==", "qmi::kQMIPower_Normal", v2, 0);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void ___ZN10QMIControl17setPowerMode_syncEN3qmi12PowerProfileE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4) && (qmi::isInternalError() & 1) == 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x1BA, "isInternalError(response.getError())", "is not", "true", v2);
  }
}

void QMIControl::enterPowerMode(uint64_t a1, NSObject *a2, int a3)
{
  if (a3)
  {
    dispatch_queue_t current_queue = dispatch_get_current_queue();
    size_t v7 = *(qmi::TransactionQueue::State **)(a1 + 104);
    if (current_queue != *((dispatch_queue_t *)v7 + 2))
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x232, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v5);
      size_t v7 = *(qmi::TransactionQueue::State **)(a1 + 104);
    }
    qmi::TransactionQueue::State::stall_sync(v7, a2);
  }
  else
  {
    uint64_t v8 = *(qmi::TransactionQueue::State **)(a1 + 104);
    qmi::TransactionQueue::State::start_sync(v8);
  }
}

void QMIControl::enterPowerMode_sync(uint64_t a1, NSObject *a2, int a3)
{
  if (a3)
  {
    dispatch_queue_t current_queue = dispatch_get_current_queue();
    size_t v7 = *(qmi::TransactionQueue::State **)(a1 + 104);
    if (current_queue != *((dispatch_queue_t *)v7 + 2))
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x232, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v5);
      size_t v7 = *(qmi::TransactionQueue::State **)(a1 + 104);
    }
    qmi::TransactionQueue::State::stall_sync(v7, a2);
  }
  else
  {
    uint64_t v8 = *(qmi::TransactionQueue::State **)(a1 + 104);
    qmi::TransactionQueue::State::start_sync(v8);
  }
}

void QMIControl::stall_sync(QMIControl *this, NSObject *a2)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v6 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v6 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x232, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    uint64_t v6 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  }

  qmi::TransactionQueue::State::stall_sync(v6, a2);
}

void QMIControl::appendPowerModeSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
}

void QMIControl::handleReceivedData(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  memset(v12, 170, sizeof(v12));
  MEMORY[0x1A622BFC0](v12, a3, a4);
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  BOOL v11 = *(qmi::TransactionQueue::State **)(a1 + 104);
  if (current_queue != *((dispatch_queue_t *)v11 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x221, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v8);
    BOOL v11 = *(qmi::TransactionQueue::State **)(a1 + 104);
  }
  qmi::TransactionQueue::State::sendTransactionResponse_sync(v11, a2, (const qmi::ResponseBase *)v12, v6, v7, (uint64_t)v8, v9);
  if (*(unsigned __int16 *)(a1 + 120) == a2) {
    *(_WORD *)(a1 + 120) = 0;
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v12);
}

void sub_1A11196C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIControl::handleReceivedData_sync(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  memset(v12, 170, sizeof(v12));
  MEMORY[0x1A622BFC0](v12, a3, a4);
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  BOOL v11 = *(qmi::TransactionQueue::State **)(a1 + 104);
  if (current_queue != *((dispatch_queue_t *)v11 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x221, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v8);
    BOOL v11 = *(qmi::TransactionQueue::State **)(a1 + 104);
  }
  qmi::TransactionQueue::State::sendTransactionResponse_sync(v11, a2, (const qmi::ResponseBase *)v12, v6, v7, (uint64_t)v8, v9);
  if (*(unsigned __int16 *)(a1 + 120) == a2) {
    *(_WORD *)(a1 + 120) = 0;
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v12);
}

void sub_1A1119784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIControl::handleInd_sync(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v3 = *(const char **)v3;
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v2 + 24))(v2, 6, "Received ctl::Sync::Indication [%s]\n", v3);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4)
  {
    int v5 = std::__shared_weak_count::lock(v4);
    uint64_t v8 = v5;
    if (v5)
    {
      uint64_t v7 = *(void *)(a1 + 72);
      if (v7 ? QMux::BOOL_true_type : 0)
      {
        QMux::restart((QMux *)&v7);
        int v5 = v8;
      }
    }
  }
  else
  {
    int v5 = 0;
  }
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1A11198D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  QMux::~QMux((QMux *)va);
  _Unwind_Resume(a1);
}

void QMIControl::handleInd_sync(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  int v5 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    int v5 = *(const char **)v5;
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v4 + 24))(v4, 6, "Received ctl::RevokeClientId::Indication [%s]\n", v5);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  uint64_t v19 = v7;
  if (!v7) {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v18 = v8;
  if (!(v8 ? QMux::BOOL_true_type : 0)) {
    goto LABEL_15;
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  uint64_t v14 = ___ZN10QMIControl14handleInd_syncERKN3ctl14RevokeClientId10IndicationE_block_invoke;
  int64_t v15 = &__block_descriptor_tmp_70_0;
  uint64_t v16 = v8;
  uint64_t v17 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
  if (TlvValue)
  {
    uint64_t v21 = TlvValue;
    __int16 v20 = tlv::parseV<ctl::tlv::AssignedId>();
    v14((uint64_t)v13, (unsigned __int8 *)&v20);
  }
  BOOL v11 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v12 = v19;
    if (!v19) {
      return;
    }
  }
  else
  {
LABEL_15:
    uint64_t v12 = v19;
    if (!v19) {
      return;
    }
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1A1119B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  QMux::~QMux(v17);
  QMux::~QMux((QMux *)&a17);
  _Unwind_Resume(a1);
}

void ___ZN10QMIControl14handleInd_syncERKN3ctl14RevokeClientId10IndicationE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMux::State::revokeClient_sync(v3, *a2, a2[1]);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1A1119C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_32c9_ZTS4QMux(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c9_ZTS4QMux(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void QMIControl::handleReceivedIndication_sync(uint64_t a1, const void *a2)
{
  memset(v11, 170, sizeof(v11));
  qmi::MessageBase::MessageBase((qmi::MessageBase *)v11, a2);
  if (LOWORD(v11[0]) == 36)
  {
    uint64_t v8 = v11[0];
    uint64_t v9 = v11[1];
    uint64_t v10 = v11[2];
    if (v11[2]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11[2] + 8), 1uLL, memory_order_relaxed);
    }
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v8);
    QMIControl::handleInd_sync(a1, (qmi::MessageBase *)&v8);
    goto LABEL_26;
  }
  if (LOWORD(v11[0]) == 39)
  {
    uint64_t v8 = v11[0];
    uint64_t v9 = v11[1];
    uint64_t v10 = v11[2];
    if (v11[2]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11[2] + 8), 1uLL, memory_order_relaxed);
    }
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v8);
    uint64_t v3 = (const char *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v3 = *(const char **)v3;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64), 6, "Received ctl::Sync::Indication [%s]\n", v3);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
    if (v4)
    {
      int v5 = std::__shared_weak_count::lock(v4);
      uint64_t v13 = v5;
      if (v5)
      {
        uint64_t v12 = *(void *)(a1 + 72);
        if (v12 ? QMux::BOOL_true_type : 0)
        {
          QMux::restart((QMux *)&v12);
          int v5 = v13;
        }
      }
    }
    else
    {
      int v5 = 0;
    }
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
LABEL_26:
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v8);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)v11);
    return;
  }
  uint64_t v7 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v7 = *(const char **)v7;
  }
  (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64), 6, "Received unknown QMI CTL indication (0x%04x) [%s]\n", LOWORD(v11[0]), v7);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v11);
}

void sub_1A1119EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  QMux::~QMux((QMux *)(v3 - 32));
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1A1119F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1A1119F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va1);
  _Unwind_Resume(a1);
}

void QMIControl::handleSentData(QMIControl *this, __int16 a2)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v6 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v6 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x21B, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    uint64_t v6 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  }

  qmi::TransactionQueue::State::startTimer_sync(v6, a2);
}

void QMIControl::handleSentData_sync(QMIControl *this, __int16 a2)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v6 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v6 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x21B, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    uint64_t v6 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  }

  qmi::TransactionQueue::State::startTimer_sync(v6, a2);
}

void QMIControl::handleTimeout(QMIControl *this, unsigned __int16 a2, int a3)
{
  if (!*((unsigned char *)this + 44)) {
    return;
  }
  if (a3 == 39)
  {
    uint64_t v4 = *((void *)this + 8);
    uint64_t v5 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      uint64_t v5 = *(const char **)v5;
    }
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v4 + 24))(v4, 6, "ATCS_TIMEOUT was for a ctl::Sync message; this is expected sometimes [%s]\n",
      v5);
    return;
  }
  long long v41 = 0;
  uint64_t v42 = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v6
    || (uint64_t v42 = std::__shared_weak_count::lock(v6)) == 0
    || ((v41 = (void *)*((void *)this + 9)) != 0 ? (uint64_t v7 = QMux::BOOL_true_type) : (uint64_t v7 = 0), !v7))
  {
    uint64_t v8 = (char *)this + 8;
    if (*((char *)this + 31) < 0) {
      uint64_t v8 = *(const char **)v8;
    }
    (*(void (**)(void, uint64_t, const char *, ...))(**((void **)this + 8) + 24))(*((void *)this + 8), 6, "ATCS_TIMEOUT should invoke reset but QMux is no longer alive [%s]\n", v8);
    uint64_t v9 = v42;
    if (!v42) {
      return;
    }
LABEL_41:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0xAAAAAAAAAAAAAAAALL;
  v39[7] = v10;
  v39[8] = v10;
  v39[5] = v10;
  v39[6] = v10;
  v39[3] = v10;
  v39[4] = v10;
  v39[1] = v10;
  void v39[2] = v10;
  v39[0] = v10;
  long long v37 = v10;
  long long v38 = v10;
  long long v35 = v10;
  *(_OWORD *)std::string __p = v10;
  long long v33 = v10;
  long long v34 = v10;
  long long v32 = v10;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"ATCS_TIMEOUT on message for svc=", 32);
  BOOL v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" client=", 8);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (txid=", 7);
  uint64_t v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" msgid=0x", 9);
  *(_DWORD *)((char *)v14 + *(void *)(*v14 - 24) + MEMORY[0x1A622BDE0]((char *)this + 8) = *(_DWORD *)((unsigned char *)v14 + *(void *)(*v14 - 24) + 8) & 0xFFFFFFB5 | 8;
  int64_t v15 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + MEMORY[0x1A622BDE0]((char *)this + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
  uint64_t v19 = *((void *)this + 1);
  uint64_t v18 = (char *)this + 8;
  uint64_t v17 = v19;
  int v20 = v18[23];
  if (v20 >= 0) {
    uint64_t v21 = (uint64_t)v18;
  }
  else {
    uint64_t v21 = v17;
  }
  if (v20 >= 0) {
    uint64_t v22 = v18[23];
  }
  else {
    uint64_t v22 = *((void *)v18 + 1);
  }
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v21, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
  if ((BYTE8(v38) & 0x10) != 0)
  {
    uint64_t v26 = v38;
    if ((unint64_t)v38 < *((void *)&v35 + 1))
    {
      *(void *)&long long v38 = *((void *)&v35 + 1);
      uint64_t v26 = *((void *)&v35 + 1);
    }
    uint64_t v27 = (const void *)v35;
    size_t v24 = v26 - v35;
    if ((unint64_t)(v26 - v35) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_44;
    }
  }
  else
  {
    if ((BYTE8(v38) & 8) == 0)
    {
      size_t v24 = 0;
      HIBYTE(v3qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
      uint64_t v25 = __dst;
      goto LABEL_36;
    }
    uint64_t v27 = (const void *)*((void *)&v33 + 1);
    size_t v24 = *((void *)&v34 + 1) - *((void *)&v33 + 1);
    if (*((void *)&v34 + 1) - *((void *)&v33 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_44:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v24 >= 0x17)
  {
    uint64_t v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v28 = v24 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v25 = (void **)operator new(v28 + 1);
    __dst[1] = (void *)v24;
    unint64_t v31 = v29 | 0x8000000000000000;
    __dst[0] = v25;
    goto LABEL_35;
  }
  HIBYTE(v3qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v24;
  uint64_t v25 = __dst;
  if (v24) {
LABEL_35:
  }
    memmove(v25, v27, v24);
LABEL_36:
  *((unsigned char *)v25 + v24) = 0;
  QMux::invokeReset(&v41, (uint64_t)__dst, 0);
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)&long long v32 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v32 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A622C370](v39);
  uint64_t v9 = v42;
  if (v42) {
    goto LABEL_41;
  }
}

void sub_1A111A4FC(_Unwind_Exception *a1)
{
  QMux::~QMux((QMux *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_1A111A510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    QMux::~QMux((QMux *)(v16 - 64));
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  QMux::~QMux((QMux *)(v16 - 64));
  _Unwind_Resume(a1);
}

uint64_t QMIControl::ClientIdRequests::addFailedRequestForSvcType(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  v4[1].__sig = (uint64_t)pthread_self();
  uint64_t v6 = (uint64_t **)(a1 + 40);
  uint64_t v5 = *(uint64_t **)(a1 + 40);
  if (v5)
  {
    uint64_t v7 = a1 + 40;
    uint64_t v8 = *(void *)(a1 + 40);
    do
    {
      unsigned int v9 = *(unsigned __int8 *)(v8 + 28);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        BOOL v11 = (uint64_t *)v8;
      }
      else {
        BOOL v11 = (uint64_t *)(v8 + 8);
      }
      if (v10) {
        uint64_t v7 = v8;
      }
      uint64_t v8 = *v11;
    }
    while (*v11);
    if ((uint64_t **)v7 == v6 || *(unsigned __int8 *)(v7 + 28) > a2)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v5;
          unsigned int v14 = *((unsigned __int8 *)v5 + 28);
          if (v14 <= a2) {
            break;
          }
          uint64_t v5 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_24;
          }
        }
        if (v14 >= a2) {
          break;
        }
        uint64_t v5 = v13[1];
        if (!v5)
        {
          uint64_t v6 = v13 + 1;
          goto LABEL_24;
        }
      }
      uint64_t v18 = v13;
      int v21 = 1;
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 40);
      do
      {
        while (1)
        {
          int64_t v15 = v12;
          unsigned int v16 = *((unsigned __int8 *)v12 + 28);
          if (v16 > a2) {
            break;
          }
          if (v16 >= a2)
          {
            int v25 = *((_DWORD *)v15 + 8);
            goto LABEL_35;
          }
          uint64_t v12 = (uint64_t *)v15[1];
          if (!v12)
          {
            uint64_t v17 = (uint64_t **)(v15 + 1);
            goto LABEL_29;
          }
        }
        uint64_t v12 = (uint64_t *)*v15;
      }
      while (*v15);
      uint64_t v17 = (uint64_t **)v15;
LABEL_29:
      uint64_t v22 = operator new(0x28uLL);
      v22[28] = a2;
      *((_DWORD *)v22 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
      *(void *)uint64_t v22 = 0;
      *((void *)v22 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
      *((void *)v22 + 2) = v15;
      *uint64_t v17 = (uint64_t *)v22;
      uint64_t v23 = **(void **)(a1 + 32);
      size_t v24 = (uint64_t *)v22;
      if (v23)
      {
        *(void *)(a1 + 32) = v23;
        size_t v24 = *v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v24);
      uint64_t v5 = *(uint64_t **)(a1 + 40);
      ++*(void *)(a1 + 48);
      int v25 = *((_DWORD *)v22 + 8);
      uint64_t v26 = (uint64_t **)(a1 + 40);
      if (v5)
      {
        while (1)
        {
LABEL_35:
          while (1)
          {
            uint64_t v26 = (uint64_t **)v5;
            unsigned int v27 = *((unsigned __int8 *)v5 + 28);
            if (v27 <= a2) {
              break;
            }
            uint64_t v5 = *v26;
            uint64_t v6 = v26;
            if (!*v26) {
              goto LABEL_39;
            }
          }
          if (v27 >= a2) {
            break;
          }
          uint64_t v5 = v26[1];
          if (!v5)
          {
            uint64_t v6 = v26 + 1;
            goto LABEL_39;
          }
        }
        uint64_t v18 = v26;
      }
      else
      {
LABEL_39:
        uint64_t v18 = operator new(0x28uLL);
        v18[28] = a2;
        *((_DWORD *)v18 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
        *(void *)uint64_t v18 = 0;
        *((void *)v18 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
        *((void *)v18 + 2) = v26;
        *uint64_t v6 = (uint64_t *)v18;
        uint64_t v28 = **(void **)(a1 + 32);
        uint64_t v29 = (uint64_t *)v18;
        if (v28)
        {
          *(void *)(a1 + 32) = v28;
          uint64_t v29 = *v6;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v29);
        ++*(void *)(a1 + 48);
      }
      int v21 = v25 + 1;
    }
  }
  else
  {
    uint64_t v13 = (uint64_t **)(a1 + 40);
LABEL_24:
    uint64_t v18 = operator new(0x28uLL);
    v18[28] = a2;
    *((_DWORD *)v18 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
    *(void *)uint64_t v18 = 0;
    *((void *)v18 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
    *((void *)v18 + 2) = v13;
    *uint64_t v6 = (uint64_t *)v18;
    uint64_t v19 = **(void **)(a1 + 32);
    int v20 = (uint64_t *)v18;
    if (v19)
    {
      *(void *)(a1 + 32) = v19;
      int v20 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v20);
    ++*(void *)(a1 + 48);
    int v21 = 1;
  }
  *((_DWORD *)v18 + MEMORY[0x1A622BDE0]((char *)this + 8) = v21;
  uint64_t v30 = *(pthread_mutex_t **)a1;
  pthread_self();
  v30[1].__sig = 0;
  return pthread_mutex_unlock(v30);
}

void sub_1A111A7EC(_Unwind_Exception *a1)
{
  uint64_t v3 = *v1;
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

BOOL QMIControl::startRetryTimer_sync(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 184))
  {
    unsigned int v3 = *(_DWORD *)(a1 + 192);
    if (v3 <= 9)
    {
      *(_DWORD *)(a1 + 192) = v3 + 1;
      uint64_t v5 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
      uint64_t v6 = v5;
      if (v5) {
        dispatch_retain(v5);
      }
      uint64_t v7 = *(NSObject **)(a1 + 184);
      *(void *)(a1 + 184) = v6;
      if (v7) {
        dispatch_release(v7);
      }
      if (v6)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(a1 + 56);
        if (!v8 || (uint64_t v9 = *(void *)(a1 + 48), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        BOOL v11 = v10;
        p_uint64_t shared_weak_owners = &v10->__shared_weak_owners_;
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v11);
        }
        handler[0] = MEMORY[0x1E4F143A8];
        handler[1] = 1174405120;
        handler[2] = ___ZN10QMIControl20startRetryTimer_syncEU13block_pointerFvvE_block_invoke;
        handler[3] = &__block_descriptor_tmp_93;
        void handler[5] = a1;
        void handler[6] = v9;
        int v21 = v11;
        atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
        dispatch_object_t object = v6;
        dispatch_retain(v6);
        handler[4] = a2;
        dispatch_source_set_event_handler(v6, handler);
        dispatch_time_t v13 = dispatch_time(0, 50000000);
        dispatch_source_set_timer(v6, v13, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC20uLL);
        dispatch_activate(v6);
        if (object) {
          dispatch_release(object);
        }
        if (v21) {
          std::__shared_weak_count::__release_weak(v21);
        }
        std::__shared_weak_count::__release_weak(v11);
        dispatch_release(v6);
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 184);
  int64_t v15 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    int64_t v15 = *(const char **)v15;
  }
  BOOL v16 = v14 == 0;
  BOOL v17 = v14 != 0;
  uint64_t v18 = " not ";
  if (!v16) {
    uint64_t v18 = " ";
  }
  (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64), 6, "[%s] Retry timer is%sactive, retry attempts %d of max %d\n", v15, v18, *(_DWORD *)(a1 + 192), 10);
  return v17;
}

void sub_1A111AA54(_Unwind_Exception *a1)
{
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10QMIControl26handleClientIdRequest_syncEN3qmi11ServiceTypeERKN3ctl11GetClientId8ResponseE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  for (uint64_t result = QMIControl::ClientIdRequests::popFailedRequest((pthread_mutex_t **)(v1 + 128));
        result != 255;
        uint64_t result = QMIControl::ClientIdRequests::popFailedRequest((pthread_mutex_t **)(v1 + 128)))
  {
    uint64_t v4 = (const char *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0) {
      uint64_t v4 = *(const char **)(v1 + 8);
    }
    uint64_t v3 = result;
    (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(v1 + 64) + 24))(*(void *)(v1 + 64), 6, "[%s] Retrying request for client, svc type: %d\n", v4, result);
    QMIControl::requestClientId_sync(v1, v3);
  }
  return result;
}

uint64_t QMIControl::ClientIdRequests::popFailedRequest(pthread_mutex_t **this)
{
  uint64_t v2 = *this;
  pthread_mutex_lock(*this);
  v2[1].__sig = (uint64_t)pthread_self();
  uint64_t v3 = this[6];
  if (v3)
  {
    uint64_t v5 = (uint64_t **)(this + 5);
    uint64_t v4 = (uint64_t)this[5];
    uint64_t v6 = this[4];
    uint64_t v7 = v6->__opaque[20];
    int v8 = *(_DWORD *)&v6->__opaque[24];
    int v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v4)
      {
        BOOL v17 = (char *)(this + 5);
        uint64_t v18 = this[5];
        do
        {
          unsigned int v19 = v18->__opaque[20];
          BOOL v20 = v19 >= v7;
          if (v19 >= v7) {
            opaque = (pthread_mutex_t **)v18;
          }
          else {
            opaque = (pthread_mutex_t **)v18->__opaque;
          }
          if (v20) {
            BOOL v17 = (char *)v18;
          }
          uint64_t v18 = *opaque;
        }
        while (*opaque);
        if (v17 != (char *)v5 && v7 >= v17[28])
        {
          uint64_t v22 = (pthread_mutex_t *)*((void *)v17 + 1);
          if (v22)
          {
            do
            {
              uint64_t v23 = v22;
              uint64_t v22 = (pthread_mutex_t *)v22->__sig;
            }
            while (v22);
          }
          else
          {
            size_t v24 = v17;
            do
            {
              uint64_t v23 = (pthread_mutex_t *)*((void *)v24 + 2);
              BOOL v25 = v23->__sig == (void)v24;
              size_t v24 = (char *)v23;
            }
            while (!v25);
          }
          if (v6 == (pthread_mutex_t *)v17) {
            this[4] = v23;
          }
          this[6] = (pthread_mutex_t *)((char *)v3 - 1);
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4, (uint64_t *)v17);
          operator delete(v17);
        }
      }
    }
    else
    {
      BOOL v10 = (uint64_t **)(this + 5);
      if (v4)
      {
        while (1)
        {
          while (1)
          {
            BOOL v10 = (uint64_t **)v4;
            unsigned int v11 = *(unsigned __int8 *)(v4 + 28);
            if (v7 >= v11) {
              break;
            }
            uint64_t v4 = *(void *)v4;
            uint64_t v5 = v10;
            if (!*v10) {
              goto LABEL_10;
            }
          }
          if (v11 >= v7) {
            break;
          }
          uint64_t v4 = *(void *)(v4 + 8);
          if (!v4)
          {
            uint64_t v5 = v10 + 1;
            goto LABEL_10;
          }
        }
        *(_DWORD *)(v4 + 32) = v9;
      }
      else
      {
LABEL_10:
        uint64_t v12 = operator new(0x28uLL);
        v12[28] = v7;
        *((_DWORD *)v12 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
        *(void *)uint64_t v12 = 0;
        *((void *)v12 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
        *((void *)v12 + 2) = v10;
        *uint64_t v5 = (uint64_t *)v12;
        sig = (pthread_mutex_t *)this[4]->__sig;
        uint64_t v14 = (uint64_t *)v12;
        if (sig)
        {
          this[4] = sig;
          uint64_t v14 = *v5;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(&this[5]->__sig, v14);
        this[6] = (pthread_mutex_t *)((char *)this[6] + 1);
        *((_DWORD *)v12 + MEMORY[0x1A622BDE0]((char *)this + 8) = v9;
      }
    }
  }
  else
  {
    uint64_t v7 = 255;
  }
  int64_t v15 = *this;
  pthread_self();
  v15[1].__sig = 0;
  pthread_mutex_unlock(v15);
  return v7;
}

void sub_1A111ACE0(_Unwind_Exception *a1)
{
  uint64_t v3 = *v1;
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t QMIControl::ClientIdRequests::popClientForSvcType@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  v6[1].__sig = (uint64_t)pthread_self();
  int v8 = (uint64_t **)(a1 + 16);
  uint64_t v7 = *(uint64_t **)(a1 + 16);
  if (!v7)
  {
    int v9 = (uint64_t **)(a1 + 16);
    goto LABEL_8;
  }
  do
  {
    while (1)
    {
      int v9 = (uint64_t **)v7;
      unsigned int v10 = *((unsigned __int8 *)v7 + 32);
      if (v10 <= a2) {
        break;
      }
      uint64_t v7 = *v9;
      int v8 = v9;
      if (!*v9) {
        goto LABEL_8;
      }
    }
    if (v10 >= a2)
    {
      unsigned int v11 = v9;
      if (v9[5] != v9[6]) {
        goto LABEL_15;
      }
      goto LABEL_35;
    }
    uint64_t v7 = v9[1];
  }
  while (v7);
  int v8 = v9 + 1;
LABEL_8:
  unsigned int v11 = operator new(0x40uLL);
  v11[32] = a2;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 5) = 0;
  *(void *)unsigned int v11 = 0;
  *((void *)v11 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
  *((void *)v11 + 2) = v9;
  std::__shared_weak_count *v8 = (uint64_t *)v11;
  uint64_t v12 = **(void **)(a1 + 8);
  dispatch_time_t v13 = (uint64_t *)v11;
  if (v12)
  {
    *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v12;
    dispatch_time_t v13 = *v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v13);
  ++*(void *)(a1 + 24);
  while (*((void *)v11 + 5) != *((void *)v11 + 6))
  {
LABEL_15:
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    a3[1] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v14 = (uint64_t *)*((void *)v11 + 5);
    *a3 = 0;
    a3[1] = 0;
    int64_t v15 = (std::__shared_weak_count *)v14[1];
    if (v15)
    {
      BOOL v16 = std::__shared_weak_count::lock(v15);
      a3[1] = v16;
      if (v16)
      {
        uint64_t v17 = *v14;
        *a3 = v17;
        uint64_t v18 = (long long *)*((void *)v11 + 5);
        unsigned int v19 = (long long *)*((void *)v11 + 6);
        BOOL v20 = v18 + 1;
        if (v18 + 1 != v19) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = (long long *)*((void *)v11 + 5);
        unsigned int v19 = (long long *)*((void *)v11 + 6);
        BOOL v20 = v18 + 1;
        if (v18 + 1 != v19)
        {
          do
          {
LABEL_24:
            long long v21 = *v20;
            *(void *)BOOL v20 = 0;
            *((void *)v20 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
            uint64_t v22 = (std::__shared_weak_count *)*((void *)v20 - 1);
            *(v20 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v21;
            if (v22) {
              std::__shared_weak_count::__release_weak(v22);
            }
            ++v20;
            ++v18;
          }
          while (v20 != v19);
          BOOL v20 = (long long *)*((void *)v11 + 6);
        }
      }
    }
    else
    {
      BOOL v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = (long long *)*((void *)v11 + 5);
      unsigned int v19 = (long long *)*((void *)v11 + 6);
      BOOL v20 = v18 + 1;
      if (v18 + 1 != v19) {
        goto LABEL_24;
      }
    }
    while (v20 != v18)
    {
      uint64_t v23 = (std::__shared_weak_count *)*((void *)v20 - 1);
      if (v23) {
        std::__shared_weak_count::__release_weak(v23);
      }
      --v20;
    }
    *((void *)v11 + 6) = v18;
    if (v17) {
      goto LABEL_36;
    }
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_35:
  *a3 = 0;
  a3[1] = 0;
LABEL_36:
  size_t v24 = *(pthread_mutex_t **)a1;
  pthread_self();
  v24[1].__sig = 0;
  return pthread_mutex_unlock(v24);
}

void sub_1A111AF54(_Unwind_Exception *a1)
{
  uint64_t v3 = *v1;
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

void ___ZN10QMIControl26handleClientIdRequest_syncEN3qmi11ServiceTypeERKN3ctl11GetClientId8ResponseE_block_invoke_2(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  QMux::State::notifyClientAdded_sync(v3, a1 + 6, *(unsigned __int8 *)(a2 + 1));
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1A111B030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *__copy_helper_block_e8_32c9_ZTS4QMux48c49_ZTSNSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c9_ZTS4QMux48c49_ZTSNSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN10QMIControl26handleClientIdRequest_syncEN3qmi11ServiceTypeERKN3ctl11GetClientId8ResponseE_block_invoke_85(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (const char *)(v3 + 8);
  if (*(char *)(v3 + 31) < 0) {
    uint64_t v4 = *(const char **)v4;
  }
  (*(void (**)(void, uint64_t, const char *, ...))(**(void **)(v3 + 64) + 24))(*(void *)(v3 + 64), 6, "Stale client id request received (no client still wants it: svc=%d new_id=%d); releasing it. [%s]\n",
    *a2,
    a2[1],
    v4);
  char v5 = *a2;
  char v6 = a2[1];

  QMIControl::releaseClientId_sync((void *)v3, v5, v6);
}

void QMIControl::join(dispatch_queue_t *this, dispatch_group_t group)
{
}

void QMIControl::join_sync(dispatch_queue_t *this, dispatch_group_t group)
{
}

void QMIControl::flush(QMIControl *this, NSObject *a2)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  char v6 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v6 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x238, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    char v6 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  }

  qmi::TransactionQueue::State::flush_sync(v6, a2);
}

void QMIControl::flush_sync(QMIControl *this, NSObject *a2)
{
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  char v6 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v6 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x238, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    char v6 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  }

  qmi::TransactionQueue::State::flush_sync(v6, a2);
}

void QMIControl::dumpState_sync(QMIControl *this)
{
  uint64_t v2 = (char *)*((void *)this + 25);
  uint64_t v3 = (char *)this + 208;
  memset(&__p, 0, sizeof(__p));
  if (v2 != (char *)this + 208)
  {
    __s[0] = v2[32];
    size_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = &v24;
    std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>((uint64_t *)&v23, *((unsigned __int16 **)v2 + 5), (unsigned __int16 *)v2 + 24);
    QMIControl::dumpState_sync(void)const::$_0::operator()(&v26, (unsigned __int8 *)__s);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v26;
    std::__tree<unsigned short>::destroy((uint64_t)&v23, v24);
    uint64_t v4 = (char *)*((void *)v2 + 1);
    if (v4)
    {
      do
      {
        char v5 = v4;
        uint64_t v4 = *(char **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        char v5 = (char *)*((void *)v2 + 2);
        BOOL v6 = *(void *)v5 == (void)v2;
        uint64_t v2 = v5;
      }
      while (!v6);
    }
    if (v5 != v3)
    {
      do
      {
        HIBYTE(v24) = 2;
        strcpy(__s, ", ");
        std::string::append(&__p, __s, 2uLL);
        if (SHIBYTE(v24) < 0) {
          operator delete(*(void **)__s);
        }
        __s[0] = v5[32];
        size_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v23 = &v24;
        std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>((uint64_t *)&v23, *((unsigned __int16 **)v5 + 5), (unsigned __int16 *)v5 + 24);
        QMIControl::dumpState_sync(void)const::$_0::operator()(&v26, (unsigned __int8 *)__s);
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v7 = &v26;
        }
        else {
          uint64_t v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
        }
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v26.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v7, size);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v26.__r_.__value_.__l.__data_);
          std::__tree<unsigned short>::destroy((uint64_t)&v23, v24);
          int v9 = (char *)*((void *)v5 + 1);
          if (v9)
          {
            do
            {
LABEL_24:
              unsigned int v10 = v9;
              int v9 = *(char **)v9;
            }
            while (v9);
            goto LABEL_11;
          }
        }
        else
        {
          std::__tree<unsigned short>::destroy((uint64_t)&v23, v24);
          int v9 = (char *)*((void *)v5 + 1);
          if (v9) {
            goto LABEL_24;
          }
        }
        do
        {
          unsigned int v10 = (char *)*((void *)v5 + 2);
          BOOL v6 = *(void *)v10 == (void)v5;
          char v5 = v10;
        }
        while (!v6);
LABEL_11:
        char v5 = v10;
      }
      while (v10 != v3);
    }
  }
  unsigned int v11 = (char *)this + 8;
  if (*((char *)this + 31) < 0) {
    unsigned int v11 = *(const char **)v11;
  }
  uint64_t v12 = *((void *)this + 8);
  dispatch_time_t v13 = (pthread_mutex_t *)*((void *)this + 16);
  pthread_mutex_lock(v13);
  v13[1].__sig = (uint64_t)pthread_self();
  uint64_t v14 = *((void *)this + 19);
  int64_t v15 = (pthread_mutex_t *)*((void *)this + 16);
  pthread_self();
  v15[1].__sig = 0;
  pthread_mutex_unlock(v15);
  dispatch_queue_t current_queue = dispatch_get_current_queue();
  uint64_t v18 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v18 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x253, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v16);
    uint64_t v18 = (qmi::TransactionQueue::State *)*((void *)this + 13);
  }
  qmi::TransactionQueue::State::dumpState_sync(v18, __s);
  if (SHIBYTE(v24) >= 0) {
    unsigned int v19 = __s;
  }
  else {
    unsigned int v19 = *(std::string::value_type **)__s;
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(void *)v12 + 24))(v12, 6, "[%s]   QMIControl(%zd clients pending) %s\n    ind_wake={%s}\n", v11, v14, v19, (const char *)p_p);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_42:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_42;
  }
}

void sub_1A111B624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__tree<unsigned short>::destroy(v28, a21);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

pthread_mutex_t *QMIControl::ClientIdRequests::count(pthread_mutex_t **this)
{
  uint64_t v2 = *this;
  pthread_mutex_lock(*this);
  v2[1].__sig = (uint64_t)pthread_self();
  uint64_t v3 = this[3];
  uint64_t v4 = *this;
  pthread_self();
  v4[1].__sig = 0;
  pthread_mutex_unlock(v4);
  return v3;
}

void ___ZN10QMIControl20startRetryTimer_syncEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (*(void *)(a1 + 48))
      {
        if (*(void *)(v3 + 184) == *(void *)(a1 + 64))
        {
          (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
          dispatch_source_cancel(*(dispatch_source_t *)(a1 + 64));
          BOOL v6 = *(NSObject **)(v3 + 184);
          *(void *)(v3 + 184) = 0;
          if (v6) {
            dispatch_release(v6);
          }
        }
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1A111B7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __copy_helper_block_e8_32b48c35_ZTSNSt3__18weak_ptrI10QMIControlEE64c22_ZTSN8dispatch6sourceE(void *a1, uint64_t a2)
{
  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  uint64_t v4 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  char v5 = *(NSObject **)(a2 + 64);
  a1[8] = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_32b48c35_ZTSNSt3__18weak_ptrI10QMIControlEE64c22_ZTSN8dispatch6sourceE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (const void *)a1[4];

  _Block_object_dispose(v4, 7);
}

uint64_t QMIControl::simSlot(QMIControl *this)
{
  return 0;
}

_WORD *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>,std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(uint64_t a1, void *a2, void *a3, size_t __sz)
{
  BOOL v6 = a2;
  size_t v8 = *(void *)(a1 + 16);
  int v9 = *(_WORD **)a1;
  if (__sz > (uint64_t)(v8 - *(void *)a1) >> 1)
  {
    if (v9)
    {
      *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v9;
      operator delete(v9);
      size_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if ((__sz & 0x8000000000000000) != 0) {
      goto LABEL_66;
    }
    if (v8 <= __sz) {
      size_t v10 = __sz;
    }
    else {
      size_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if ((v10 & 0x8000000000000000) != 0) {
LABEL_66:
    }
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    uint64_t v11 = v10;
    uint64_t result = operator new(2 * v10);
    *(void *)a1 = result;
    *(void *)(a1 + 16) = &result[v11];
    dispatch_time_t v13 = result;
    if (v6 != a3)
    {
      dispatch_time_t v13 = result;
      do
      {
        *dispatch_time_t v13 = *((_WORD *)v6 + 13);
        uint64_t v14 = (void *)v6[1];
        if (v14)
        {
          do
          {
            int64_t v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            int64_t v15 = (void *)v6[2];
            BOOL v16 = *v15 == (void)v6;
            BOOL v6 = v15;
          }
          while (!v16);
        }
        ++v13;
        BOOL v6 = v15;
      }
      while (v15 != a3);
    }
    *(void *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = v13;
    return result;
  }
  uint64_t v17 = (void *)(a1 + 8);
  uint64_t result = *(_WORD **)(a1 + 8);
  uint64_t v18 = result - v9;
  if (v18 < __sz)
  {
    if ((char *)result - (char *)v9 <= -2)
    {
      std::string v26 = a2;
      do
      {
        uint64_t v28 = (void *)*v26;
        if (*v26)
        {
          do
          {
            uint64_t v22 = v28;
            uint64_t v28 = (void *)v28[1];
          }
          while (v28);
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)v26[2];
            BOOL v16 = *v22 == (void)v26;
            std::string v26 = v22;
          }
          while (v16);
        }
        std::string v26 = v22;
      }
      while (!__CFADD__(v18++, 1));
    }
    else
    {
      if (result == v9) {
        goto LABEL_49;
      }
      unsigned int v19 = a2;
      do
      {
        long long v21 = (void *)v19[1];
        if (v21)
        {
          do
          {
            uint64_t v22 = v21;
            long long v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            uint64_t v22 = (void *)v19[2];
            BOOL v16 = *v22 == (void)v19;
            unsigned int v19 = v22;
          }
          while (!v16);
        }
        unsigned int v19 = v22;
      }
      while (v18-- > 1);
    }
    if (v22 != a2)
    {
      do
      {
        _WORD *v9 = *((_WORD *)v6 + 13);
        long long v32 = (void *)v6[1];
        if (v32)
        {
          do
          {
            long long v33 = v32;
            long long v32 = (void *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            long long v33 = (void *)v6[2];
            BOOL v16 = *v33 == (void)v6;
            BOOL v6 = v33;
          }
          while (!v16);
        }
        ++v9;
        BOOL v6 = v33;
      }
      while (v33 != v22);
      goto LABEL_50;
    }
LABEL_49:
    uint64_t v22 = a2;
LABEL_50:
    uint64_t v29 = result;
    if (v22 != a3)
    {
      do
      {
        *uint64_t v29 = *((_WORD *)v22 + 13);
        uint64_t v30 = (void *)v22[1];
        if (v30)
        {
          do
          {
            unint64_t v31 = v30;
            uint64_t v30 = (void *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            unint64_t v31 = (void *)v22[2];
            BOOL v16 = *v31 == (void)v22;
            uint64_t v22 = v31;
          }
          while (!v16);
        }
        ++v29;
        uint64_t v22 = v31;
      }
      while (v31 != a3);
    }
    *uint64_t v17 = v29;
    return result;
  }
  uint64_t v23 = v9;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v23 = *((_WORD *)v6 + 13);
      size_t v24 = (void *)v6[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          size_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (void *)v6[2];
          BOOL v16 = *v25 == (void)v6;
          BOOL v6 = v25;
        }
        while (!v16);
      }
      ++v23;
      BOOL v6 = v25;
    }
    while (v25 != a3);
  }
  *uint64_t v17 = v23;
  return result;
}

void std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(*a1);
    std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(a1[1]);
    std::__tree<unsigned short>::destroy((uint64_t)(a1 + 5), (void *)a1[6]);
    operator delete(a1);
  }
}

void *std::shared_ptr<QMIControl>::shared_ptr[abi:ne180100]<QMIControl,QMIControl::Deleter,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43E740;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  BOOL v6 = *(std::__shared_weak_count **)(a2 + 56);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 4MEMORY[0x1A622BDE0]((char *)this + 8) = a2;
      *(void *)(a2 + 56) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 4MEMORY[0x1A622BDE0]((char *)this + 8) = a2;
  *(void *)(a2 + 56) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1A111BE0C(void *a1)
{
  uint64_t v2 = __cxa_begin_catch(a1);
  QMIControl::Deleter::operator()((uint64_t)v2, v1);
  __cxa_rethrow();
}

void sub_1A111BE20(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIControl *,QMIControl::Deleter,std::allocator<QMIControl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<QMIControl *,QMIControl::Deleter,std::allocator<QMIControl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(NSObject **)(v1 + 88);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  void block[2] = ___ZN10QMIControl7DeleterclEPS__block_invoke;
  block[3] = &__block_descriptor_tmp_2;
  block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t std::__shared_ptr_pointer<QMIControl *,QMIControl::Deleter,std::allocator<QMIControl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000001A1127752) {
    return a1 + 24;
  }
  if (((v3 & 0x80000001A1127752 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001A1127752)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001A1127752 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::DataFormat>::getSize(uint64_t a1)
{
  return MEMORY[0x1F417D020](a1 + 12);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::DataFormat>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<ctl::tlv::DataFormat>();
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v7;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::DataFormat>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1EF43E7B8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::LinkLayerProtocol>::getSize(uint64_t a1)
{
  return MEMORY[0x1F417D048](a1 + 12);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::LinkLayerProtocol>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<ctl::tlv::LinkLayerProtocol>();
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v7;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::LinkLayerProtocol>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1EF43E808;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::ServiceType>::getSize(uint64_t a1)
{
  return MEMORY[0x1F417D028](a1 + 9);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::ServiceType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<ctl::tlv::ServiceType>();
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v7;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::ServiceType>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(void *)uint64_t result = &unk_1EF43E858;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::AssignedId>::getSize(uint64_t a1)
{
  return MEMORY[0x1F417D018](a1 + 9);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::AssignedId>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<ctl::tlv::AssignedId>();
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v7;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::AssignedId>::clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1EF43E8A8;
  *(_WORD *)(result + 9) = *(_WORD *)(a1 + 9);
  return result;
}

char *qmi::MutableMessageBase::createTLV<ctl::tlv::PowerSaveDescriptor>(void *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  char v3 = v2;
  v2[8] = 1;
  *((_DWORD *)v2 + 3) = 0;
  uint64_t v4 = v2 + 12;
  *(void *)uint64_t v2 = &unk_1EF43E8F8;
  v2[16] = 0;
  BOOL v6 = (char *)a1[2];
  unint64_t v5 = a1[3];
  uint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(void *)BOOL v6 = v2;
    uint64_t v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  int v9 = (char *)a1[1];
  uint64_t v10 = (v6 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v5 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(8 * v13);
    int64_t v15 = &v14[8 * v10];
    BOOL v16 = &v14[8 * v13];
    *(void *)int64_t v15 = v3;
    uint64_t v8 = (uint64_t)(v15 + 8);
    uint64_t v17 = (char *)(v6 - v9);
    if (v6 == v9) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  uint64_t v14 = 0;
  int64_t v15 = (char *)(8 * v10);
  BOOL v16 = 0;
  *(void *)(8 * v10) = v3;
  uint64_t v8 = 8 * v10 + 8;
  uint64_t v17 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58) {
      goto LABEL_28;
    }
    if ((unint64_t)(v9 - v14) < 0x20) {
      goto LABEL_28;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v7 = &v6[-v20];
    v15 -= v20;
    long long v21 = &v14[8 * v10 - 16];
    uint64_t v22 = (long long *)(v6 - 16);
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = *(v22 - 1);
      *(_OWORD *)long long v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        uint64_t v25 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v15 - qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v25;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    uint64_t v7 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v15;
  a1[2] = v8;
  a1[3] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_23:
  a1[2] = v8;
  return v4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveDescriptor>::getSize(uint64_t a1)
{
  return MEMORY[0x1F417D050](a1 + 12);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveDescriptor>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<ctl::tlv::PowerSaveDescriptor>();
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v7;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveDescriptor>::clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x18uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1EF43E8F8;
  *(void *)(result + 12) = *(void *)(a1 + 12);
  return result;
}

void *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSet>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1EF43E948;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSet>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1EF43E948;
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSet>::getSize(uint64_t a1)
{
  return MEMORY[0x1F417D030](a1 + 16);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSet>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<ctl::tlv::IndicationSet>();
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v7;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSet>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EF43E948;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  char v3 = *(unsigned char **)(a1 + 24);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    BOOL v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 2) = v6;
    *((void *)v2 + 3) = v6;
    uint64_t v7 = &v6[2 * (v5 >> 1)];
    *((void *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1A111C688(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSetExt>::~TlvWrapper(void *a1)
{
  *a1 = &unk_1EF43E998;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSetExt>::~TlvWrapper(void *__p)
{
  void *__p = &unk_1EF43E998;
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSetExt>::getSize(uint64_t a1)
{
  return MEMORY[0x1F417D040](a1 + 16);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSetExt>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<ctl::tlv::IndicationSetExt>();
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v7;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSetExt>::clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EF43E998;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  uint64_t v4 = *(unsigned char **)(a1 + 16);
  char v3 = *(unsigned char **)(a1 + 24);
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    BOOL v6 = (char *)operator new(v3 - v4);
    *((void *)v2 + 2) = v6;
    *((void *)v2 + 3) = v6;
    uint64_t v7 = &v6[2 * (v5 >> 1)];
    *((void *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((void *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1A111C86C(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveState>::getSize(uint64_t a1)
{
  return MEMORY[0x1F417D038](a1 + 12);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveState>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<ctl::tlv::PowerSaveState>();
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v7;
  return result;
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveState>::clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  result[8] = *(unsigned char *)(a1 + 8);
  *(void *)uint64_t result = &unk_1EF43E9E8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void QMIControl::dumpState_sync(void)const::$_0::operator()(std::string *a1, unsigned __int8 *a2)
{
  std::to_string(&v21, *a2);
  uint64_t v4 = std::string::append(&v21, ": [", 3uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  BOOL v6 = (unsigned __int8 *)*((void *)a2 + 1);
  uint64_t v7 = a2 + 16;
  memset(&__p, 0, sizeof(__p));
  if (v6 == v7) {
    goto LABEL_30;
  }
  std::to_string(&v24, *((unsigned __int16 *)v6 + 13));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::string __p = v24;
    uint64_t v8 = (unsigned __int8 *)*((void *)v6 + 1);
    if (!v8) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string __p = v24;
    uint64_t v8 = (unsigned __int8 *)*((void *)v6 + 1);
    if (!v8)
    {
      do
      {
LABEL_8:
        int v9 = (unsigned __int8 *)*((void *)v6 + 2);
        BOOL v10 = *(void *)v9 == (void)v6;
        BOOL v6 = v9;
      }
      while (!v10);
      goto LABEL_10;
    }
  }
  do
  {
    int v9 = v8;
    uint64_t v8 = *(unsigned __int8 **)v8;
  }
  while (v8);
LABEL_10:
  if (v9 != v7)
  {
    do
    {
      *((unsigned char *)&v24.__r_.__value_.__s + 23) = 1;
      LOWORD(v24.__r_.__value_.__l.__data_) = 44;
      std::string::append(&__p, (const std::string::value_type *)&v24, 1uLL);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      std::to_string(&v24, *((unsigned __int16 *)v9 + 13));
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v11 = &v24;
      }
      else {
        unint64_t v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v24.__r_.__value_.__l.__size_;
      }
      std::string::append(&__p, (const std::string::value_type *)v11, size);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v24.__r_.__value_.__l.__data_);
        unint64_t v13 = (unsigned __int8 *)*((void *)v9 + 1);
        if (v13)
        {
          do
          {
LABEL_25:
            uint64_t v14 = v13;
            unint64_t v13 = *(unsigned __int8 **)v13;
          }
          while (v13);
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v13 = (unsigned __int8 *)*((void *)v9 + 1);
        if (v13) {
          goto LABEL_25;
        }
      }
      do
      {
        uint64_t v14 = (unsigned __int8 *)*((void *)v9 + 2);
        BOOL v10 = *(void *)v14 == (void)v9;
        int v9 = v14;
      }
      while (!v10);
LABEL_12:
      int v9 = v14;
    }
    while (v14 != v7);
  }
LABEL_30:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::string::append(&v22, (const std::string::value_type *)p_p, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v23, "]", 1uLL);
  *a1 = *v19;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_39;
      }
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_39:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_44:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
LABEL_43:
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_44;
  }
}

void sub_1A111CBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(*a1);
    std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(a1[1]);
    uint64_t v2 = a1[5];
    if (v2)
    {
      uint64_t v3 = a1[6];
      uint64_t v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          long long v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5) {
            std::__shared_weak_count::__release_weak(v5);
          }
          v3 -= 16;
        }
        while (v3 != v2);
        uint64_t v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

uint64_t *GetOsLogContext(void)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD880))
  {
    qword_1EBBDD8A0 = 0;
    qword_1EBBDD898 = 0;
    __cxa_atexit(MEMORY[0x1E4FBA188], &qword_1EBBDD898, &dword_1A10C7000);
    __cxa_guard_release(&qword_1EBBDD880);
  }
  if (_MergedGlobals_3 != -1) {
    dispatch_once(&_MergedGlobals_3, &__block_literal_global_0);
  }
  return &qword_1EBBDD898;
}

void ___Z15GetOsLogContextv_block_invoke()
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v0, "com.apple.telephony.abm", "global");
  ctu::OsLogContext::operator=();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v0);
}

void *GetGlobalLogger(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD890, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD890))
  {
    MEMORY[0x1A622BE40](&unk_1EBBDD8A8);
    __cxa_atexit(MEMORY[0x1E4FBA190], &unk_1EBBDD8A8, &dword_1A10C7000);
    __cxa_guard_release(&qword_1EBBDD890);
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  void v5[2] = ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  void v5[3] = &__block_descriptor_tmp_3;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  v5[4] = *a1;
  BOOL v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (qword_1EBBDD888 == -1)
  {
    uint64_t v3 = v6;
    if (!v6) {
      return &unk_1EBBDD8A8;
    }
  }
  else
  {
    dispatch_once(&qword_1EBBDD888, v5);
    uint64_t v3 = v6;
    if (!v6) {
      return &unk_1EBBDD8A8;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return &unk_1EBBDD8A8;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return &unk_1EBBDD8A8;
}

void sub_1A111CF9C(_Unwind_Exception *a1)
{
}

void ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBBDD880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBBDD880))
  {
    qword_1EBBDD8A0 = 0;
    qword_1EBBDD898 = 0;
    __cxa_atexit(MEMORY[0x1E4FBA188], &qword_1EBBDD898, &dword_1A10C7000);
    __cxa_guard_release(&qword_1EBBDD880);
  }
  if (_MergedGlobals_3 != -1) {
    dispatch_once(&_MergedGlobals_3, &__block_literal_global_0);
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, (const ctu::OsLogContext *)&qword_1EBBDD898);
  MEMORY[0x1A622BE30](v6, v5, a1 + 32);
  ctu::LoggerCommonBase::operator=();
  uint64_t v3 = v7;
  uint64_t v2 = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)qword_1EBBDD8E0;
  qword_1EBBDD8D8 = v3;
  qword_1EBBDD8E0 = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  MEMORY[0x1A622BE50](v6);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
}

void sub_1A111D104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ATCSThreadedIPCDriver::ATCSThreadedIPCDriver(ATCSThreadedIPCDriver *this)
{
  *((unsigned char *)this + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *(void *)this = &unk_1EF43EA70;
  *((void *)this + 2) = 0;
  uint64_t v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = v2;
  uint64_t v3 = (pthread_cond_t *)malloc(0x30uLL);
  *((void *)this + 5) = v3;
  pthread_cond_init(v3, 0);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
}

void sub_1A111D268(_Unwind_Exception *a1)
{
  ATCSMutex::~ATCSMutex(v1);
  _Unwind_Resume(a1);
}

uint64_t ATCSThreadedIPCDriver::bootstrapInternal(_opaque_pthread_t *this, int a2)
{
  uint64_t v4 = *(pthread_mutex_t **)this->__opaque;
  pthread_mutex_lock(v4);
  v4[1].__sig = (uint64_t)pthread_self();
  if (a2)
  {
    int v5 = *(_DWORD *)&this->__opaque[32] & 3 ^ 3;
    if ((*(_DWORD *)&this->__opaque[32] & 3) == 0 || v5 == 0) {
      ATCSThreadedIPCDriver::startWorkersIfNeeded_nl(this, v5);
    }
  }
  LOBYTE(this->__cleanup_stack) = 1;
  uint64_t v7 = *(pthread_mutex_t **)this->__opaque;
  pthread_self();
  v7[1].__sig = 0;
  return pthread_mutex_unlock(v7);
}

void sub_1A111D2FC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

pthread_t ATCSThreadedIPCDriver::startRemainingWorkers_nl(pthread_t this)
{
  int v1 = *(_DWORD *)&this->__opaque[32] & 3 ^ 3;
  if ((*(_DWORD *)&this->__opaque[32] & 3) == 0 || v1 == 0) {
    return ATCSThreadedIPCDriver::startWorkersIfNeeded_nl(this, v1);
  }
  return this;
}

uint64_t ATCSThreadedIPCDriver::tearDownInternal(ATCSThreadedIPCDriver *this)
{
  uint64_t v2 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  ATCSThreadedIPCDriver::stopWorkersInternal(this);
  uint64_t v3 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v3[1].__sig = 0;
  return pthread_mutex_unlock(v3);
}

void sub_1A111D394(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

void ATCSThreadedIPCDriver::stopWorkersInternal(ATCSThreadedIPCDriver *this)
{
  while (1)
  {
    int v4 = *((_DWORD *)this + 12);
    *((_DWORD *)this + 14) = v4;
    if ((v4 & 3) == 0 && !*((_DWORD *)this + 13)) {
      break;
    }
    (*(void (**)(ATCSThreadedIPCDriver *))(*(void *)this + 96))(this);
    (*(void (**)(ATCSThreadedIPCDriver *))(*(void *)this + 104))(this);
    uint64_t v2 = (pthread_mutex_t *)*((void *)this + 2);
    pthread_t v3 = pthread_self();
    v2[1].__sig = 0;
    pthread_cond_wait(*((pthread_cond_t **)this + 5), v2);
    v2[1].__sig = (uint64_t)v3;
  }
  pthread_join(*((pthread_t *)this + 3), 0);
  *((void *)this + 3) = 0;
  pthread_join(*((pthread_t *)this + 4), 0);
  *((void *)this + 4) = 0;
  int v5 = (const char *)*((unsigned int *)this + 12);
  if (v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSThreadedIPCDriver.cpp", (const char *)0x5D, "fRunningWorkers", "==", "kNobody", v5, 0);
  }
}

pthread_t ATCSThreadedIPCDriver::startWorkersIfNeeded_nl(pthread_t result, int a2)
{
  if (a2)
  {
    uint64_t v2 = (uint64_t)result;
    pthread_t v3 = (const char *)*(unsigned int *)&result->__opaque[32];
    if (v3) {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSThreadedIPCDriver.cpp", (const char *)0x4A, "fRunningWorkers", "==", "kNobody", v3, 0);
    }
    *(_DWORD *)(v2 + 52) = 3;
    *(void *)(v2 + 24) = ATCSThreadSpawn((uint64_t)"atcsfdipc reader", (uint64_t)ATCSThreadedIPCDriver::readWorkerStatic, v2, 0);
    uint64_t result = ATCSThreadSpawn((uint64_t)"atcsfdipc writer", (uint64_t)ATCSThreadedIPCDriver::writeWorkerStatic, v2, 0);
    for (*(void *)(v2 + 32) = result; (*(unsigned char *)(v2 + 52) & 3) != 0; v4[1].__sig = (uint64_t)v5)
    {
      int v4 = *(pthread_mutex_t **)(v2 + 16);
      pthread_t v5 = pthread_self();
      v4[1].__sig = 0;
      uint64_t result = (pthread_t)pthread_cond_wait(*(pthread_cond_t **)(v2 + 40), v4);
    }
  }
  return result;
}

uint64_t ATCSThreadedIPCDriver::startRemainingWorkers(_opaque_pthread_t *this)
{
  uint64_t v2 = *(pthread_mutex_t **)this->__opaque;
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  int v3 = *(_DWORD *)&this->__opaque[32] & 3 ^ 3;
  if ((*(_DWORD *)&this->__opaque[32] & 3) == 0 || v3 == 0) {
    ATCSThreadedIPCDriver::startWorkersIfNeeded_nl(this, v3);
  }
  pthread_t v5 = *(pthread_mutex_t **)this->__opaque;
  pthread_self();
  v5[1].__sig = 0;
  return pthread_mutex_unlock(v5);
}

void sub_1A111D63C(_Unwind_Exception *a1)
{
  int v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

pthread_t ATCSThreadedIPCDriver::startWorkersInternal(ATCSThreadedIPCDriver *this)
{
  uint64_t v2 = (const char *)*((unsigned int *)this + 12);
  if (v2) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSThreadedIPCDriver.cpp", (const char *)0x4A, "fRunningWorkers", "==", "kNobody", v2, 0);
  }
  *((_DWORD *)this + 13) = 3;
  *((void *)this + 3) = ATCSThreadSpawn((uint64_t)"atcsfdipc reader", (uint64_t)ATCSThreadedIPCDriver::readWorkerStatic, (uint64_t)this, 0);
  pthread_t result = ATCSThreadSpawn((uint64_t)"atcsfdipc writer", (uint64_t)ATCSThreadedIPCDriver::writeWorkerStatic, (uint64_t)this, 0);
  for (*((void *)this + 4) = result; (*((unsigned char *)this + 52) & 3) != 0; v4[1].__sig = (uint64_t)v5)
  {
    int v4 = (pthread_mutex_t *)*((void *)this + 2);
    pthread_t v5 = pthread_self();
    v4[1].__sig = 0;
    pthread_t result = (pthread_t)pthread_cond_wait(*((pthread_cond_t **)this + 5), v4);
  }
  return result;
}

uint64_t ATCSThreadedIPCDriver::readWorkerStatic(ATCSThreadedIPCDriver *this, void *a2)
{
  return 0;
}

uint64_t ATCSThreadedIPCDriver::writeWorkerStatic(ATCSThreadedIPCDriver *this, void *a2)
{
  return 0;
}

uint64_t ATCSThreadedIPCDriver::readWorker(ATCSThreadedIPCDriver *this)
{
  uint64_t v2 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  LODWORD(v3) = *((void *)this + 6) | 1;
  HIDWORD(v3) = (*((void *)this + 6) & 0xFFFFFFFEFFFFFFFELL) >> 32;
  *((void *)this + 6) = v3;
  pthread_cond_broadcast(*((pthread_cond_t **)this + 5));
  (*(void (**)(ATCSThreadedIPCDriver *, uint64_t))(*(void *)this + 88))(this, 1);
  *((_DWORD *)this + 12) &= ~1u;
  *((_DWORD *)this + 14) &= ~1u;
  pthread_cond_broadcast(*((pthread_cond_t **)this + 5));
  int v4 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v4[1].__sig = 0;
  pthread_mutex_unlock(v4);
  return 0;
}

void sub_1A111D844(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSThreadedIPCDriver::writeWorker(ATCSThreadedIPCDriver *this)
{
  uint64_t v2 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  LODWORD(v3) = *((void *)this + 6) | 2;
  HIDWORD(v3) = (*((void *)this + 6) & 0xFFFFFFFDFFFFFFFDLL) >> 32;
  *((void *)this + 6) = v3;
  pthread_cond_broadcast(*((pthread_cond_t **)this + 5));
  (*(void (**)(ATCSThreadedIPCDriver *, uint64_t))(*(void *)this + 80))(this, 2);
  *((_DWORD *)this + 12) &= ~2u;
  *((_DWORD *)this + 14) &= ~2u;
  pthread_cond_broadcast(*((pthread_cond_t **)this + 5));
  int v4 = (pthread_mutex_t *)*((void *)this + 2);
  pthread_self();
  v4[1].__sig = 0;
  pthread_mutex_unlock(v4);
  return 0;
}

void sub_1A111D924(_Unwind_Exception *a1)
{
  uint64_t v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t *sGetWeakPtr(void)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_4, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&_MergedGlobals_4))
  {
    return &qword_1EBBDD8F0;
  }
  __cxa_atexit((void (*)(void *))std::weak_ptr<ATCSRouterIPCDriver>::~weak_ptr, &qword_1EBBDD8F0, &dword_1A10C7000);
  __cxa_guard_release(&_MergedGlobals_4);
  return &qword_1EBBDD8F0;
}

uint64_t std::weak_ptr<ATCSRouterIPCDriver>::~weak_ptr(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void ATCSRouterIPCDriver::create(uint64_t *a1@<X0>, std::__shared_weak_count **a2@<X8>)
{
  int v4 = (std::__shared_weak_count *)operator new(0x98uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43EC90;
  BOOL v6 = v4 + 1;
  ATCSRouterIPCDriver::ATCSRouterIPCDriver((uint64_t)&v4[1], a1);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43ECE0;
  uint64_t v7 = (std::__shared_weak_count *)v4[2].__vftable;
  if (v7)
  {
    if (v7->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v4[1].__shared_weak_owners_ = (uint64_t)v6;
      v4[2].__vftable = (std::__shared_weak_count_vtbl *)v4;
      std::__shared_weak_count::__release_weak(v7);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_6;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_weak_owners_ = (uint64_t)v6;
    v4[2].__vftable = (std::__shared_weak_count_vtbl *)v4;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_6:
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  shared_owners = v4[2].__shared_owners_;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  void block[2] = ___ZN19ATCSRouterIPCDriver4initEv_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  block[4] = v4 + 1;
  dispatch_sync(shared_owners, block);
  *a2 = v6;
  a2[1] = v4;
}

void sub_1A111DB8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ATCSRouterIPCDriver::init(ATCSRouterIPCDriver *this)
{
  uint64_t v1 = *((void *)this + 4);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  void block[2] = ___ZN19ATCSRouterIPCDriver4initEv_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  block[4] = this;
  dispatch_sync(v1, block);
}

uint64_t ATCSRouterIPCDriver::ATCSRouterIPCDriver(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + MEMORY[0x1A622BDE0]((char *)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF43EB28;
  int v4 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v5 = dispatch_queue_create("ATCSRouterIPCDriver", v4);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 40) = *a2;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 4MEMORY[0x1A622BDE0]((char *)this + 8) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = *(void *)(a1 + 40);
  }
  uint64_t v8 = **(unsigned int **)(v7 + 16);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  if (v8)
  {
    int v9 = (char *)operator new(8 * v8);
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = &v9[8 * v8];
    bzero(v9, 8 * v8);
    *(void *)(a1 + 72) = &v9[8 * v8];
  }
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  unint64_t v14 = 0;
  int v10 = (*(uint64_t (**)(void, unint64_t *))(**(void **)(v7 + 24) + 88))(*(void *)(v7 + 24), &v14);
  unint64_t v11 = a2[2];
  unint64_t v12 = v14;
  if (v11 < v14) {
    unint64_t v12 = a2[2];
  }
  if (!v10) {
    unint64_t v11 = v12;
  }
  *(void *)(a1 + 56) = v11;
  return a1;
}

void sub_1A111DD60(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v2);
  int v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (!v4) {
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void *std::function<void ()(std::string)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void ATCSRouterIPCDriver::~ATCSRouterIPCDriver(dispatch_object_t *this)
{
  *this = (dispatch_object_t)&unk_1EF43EB28;
  dispatch_release(this[4]);
  uint64_t v2 = (ATCSRouterIPCDriver *)this[14];
  if (v2 == (ATCSRouterIPCDriver *)(this + 11))
  {
    ((void (*)(char *))this[11][4].isa)((char *)this + 88);
    uint64_t v3 = this[8];
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (v2) {
    (*(void (**)(ATCSRouterIPCDriver *))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = this[8];
  if (v3)
  {
LABEL_5:
    this[9] = v3;
    operator delete(v3);
  }
LABEL_6:
  int v4 = (std::__shared_weak_count *)this[6];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    dispatch_queue_t v5 = (std::__shared_weak_count *)this[3];
    if (!v5) {
      return;
    }
  }
  else
  {
    dispatch_queue_t v5 = (std::__shared_weak_count *)this[3];
    if (!v5) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v5);
}

{
  void *v1;
  uint64_t vars8;

  ATCSRouterIPCDriver::~ATCSRouterIPCDriver(this);

  operator delete(v1);
}

void ___ZN19ATCSRouterIPCDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_4, memory_order_acquire) & 1) == 0)
  {
    uint64_t v7 = v1;
    int v8 = __cxa_guard_acquire(&_MergedGlobals_4);
    uint64_t v1 = v7;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::weak_ptr<ATCSRouterIPCDriver>::~weak_ptr, &qword_1EBBDD8F0, &dword_1A10C7000);
      __cxa_guard_release(&_MergedGlobals_4);
      uint64_t v1 = v7;
    }
  }
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
  if (!v2 || (uint64_t v3 = *(void *)(v1 + 16), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  dispatch_queue_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v6 = (std::__shared_weak_count *)qword_1EBBDD8F8;
  qword_1EBBDD8F0 = v3;
  qword_1EBBDD8F8 = (uint64_t)v5;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ATCSRouterIPCDriver::setCallback_sync(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)(*(void *)(a1 + 64) + 8 * a3) = a2;
  unsigned int v3 = mav_router_service_register_receive();
  if (v3) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x52, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v3, 0);
  }
  unsigned int v4 = mav_router_service_register_error_handler();
  if (v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x58, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v4, 0);
  }
}

uint64_t ATCSRouterIPCDriver::handleError(int a1, int a2, char *__s)
{
  memset(&__dst, 170, sizeof(__dst));
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memcpy(p_dst, __s, v5);
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_4, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_4))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<ATCSRouterIPCDriver>::~weak_ptr, &qword_1EBBDD8F0, &dword_1A10C7000);
    __cxa_guard_release(&_MergedGlobals_4);
  }
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  if (qword_1EBBDD8F8)
  {
    int v9 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1EBBDD8F8);
    unint64_t v18 = (unint64_t)v9;
    if (!v9) {
      goto LABEL_23;
    }
    unint64_t v17 = qword_1EBBDD8F0;
    if (qword_1EBBDD8F0)
    {
      int v10 = *(NSObject **)(qword_1EBBDD8F0 + 32);
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 1174405120;
      void v14[2] = ___ZN19ATCSRouterIPCDriver11handleErrorEP24mav_router_context_tag_t20mav_router_channel_tPKcPv_block_invoke;
      void v14[3] = &__block_descriptor_tmp_8_1;
      void v14[4] = qword_1EBBDD8F0;
      int64_t v15 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = __dst;
      }
      dispatch_async(v10, v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unint64_t v11 = v15;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  unint64_t v12 = (std::__shared_weak_count *)v18;
  if (v18 && !atomic_fetch_add((atomic_ullong *volatile)(v18 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    goto LABEL_26;
  }
LABEL_23:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return 0;
  }
LABEL_26:
  operator delete(__dst.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1A111E45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v10);
  _Unwind_Resume(a1);
}

void ___ZN19ATCSRouterIPCDriver11handleErrorEP24mav_router_context_tag_t20mav_router_channel_tPKcPv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 120) || !*(void *)(v1 + 112)) {
    return;
  }
  unsigned int v3 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    unsigned int v3 = *(const char **)v3;
  }
  size_t v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v11 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v1qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = v4;
    uint64_t v6 = __dst;
    if (!v4) {
      goto LABEL_14;
    }
  }
  memmove(v6, v3, (size_t)v5);
LABEL_14:
  *((unsigned char *)v5 + (void)v6) = 0;
  uint64_t v9 = *(void *)(v1 + 112);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 48))(v9, __dst);
  if (SHIBYTE(v11) < 0) {
    operator delete(__dst[0]);
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 120) = 1;
}

void sub_1A111E5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrI19ATCSRouterIPCDriverEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v2 = *(void *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v3 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 48);
    v3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
}

void sub_1A111E650(_Unwind_Exception *a1)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrI19ATCSRouterIPCDriverEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    std::string::size_type v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2) {
      return;
    }
  }
  else
  {
    std::string::size_type v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2) {
      return;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ATCSRouterIPCDriver::registerDispatcher(ATCSRouterIPCDriver *this, ATCSDispatcherCallback *a2, void *a3, void **a4)
{
  *a4 = a3;
  long long v4 = *((void *)this + 4);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  void block[2] = ___ZN19ATCSRouterIPCDriver18registerDispatcherEP22ATCSDispatcherCallbackPvRS2__block_invoke;
  block[3] = &__block_descriptor_tmp_9;
  block[4] = this;
  void block[5] = a3;
  void block[6] = a2;
  dispatch_sync(v4, block);
}

void ___ZN19ATCSRouterIPCDriver18registerDispatcherEP22ATCSDispatcherCallbackPvRS2__block_invoke(void *a1)
{
  *(void *)(*(void *)(a1[4] + 64) + 8 * a1[5]) = a1[6];
  unsigned int v1 = mav_router_service_register_receive();
  if (v1) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x52, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v1, 0);
  }
  unsigned int v2 = mav_router_service_register_error_handler();
  if (v2)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x58, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v2, 0);
  }
}

void ATCSRouterIPCDriver::unregisterDispatcher(ATCSRouterIPCDriver *this, ATCSDispatcherCallback *a2, void **a3)
{
  unsigned int v3 = *((void *)this + 4);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZN19ATCSRouterIPCDriver20unregisterDispatcherEP22ATCSDispatcherCallbackRPv_block_invoke;
  v4[3] = &__block_descriptor_tmp_10;
  v4[4] = this;
  v4[5] = a3;
  dispatch_sync(v3, v4);
}

void ___ZN19ATCSRouterIPCDriver20unregisterDispatcherEP22ATCSDispatcherCallbackRPv_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 64) + 8 * **(void **)(a1 + 40)) = 0;
  unsigned int v1 = mav_router_service_register_receive();
  if (v1) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x52, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v1, 0);
  }
  unsigned int v2 = mav_router_service_register_error_handler();
  if (v2)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x58, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v2, 0);
  }
}

uint64_t ATCSRouterIPCDriver::setErrorHandler(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(NSObject **)(a1 + 32);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1174405120;
  void v5[2] = ___ZN19ATCSRouterIPCDriver15setErrorHandlerENSt3__18functionIFvNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEEE_block_invoke;
  void v5[3] = &__block_descriptor_tmp_16_0;
  v5[4] = a1;
  unsigned int v3 = (void *)a2[3];
  if (!v3)
  {
    uint64_t v7 = 0;
    dispatch_sync(v2, v5);
    uint64_t result = (uint64_t)v7;
    if (v7 != v6) {
      goto LABEL_6;
    }
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
  if (v3 == a2)
  {
    uint64_t v7 = v6;
    (*(void (**)(void *, void *))(*a2 + 24))(a2, v6);
    dispatch_sync(v2, v5);
    uint64_t result = (uint64_t)v7;
    if (v7 != v6) {
      goto LABEL_6;
    }
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
  uint64_t v7 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
  dispatch_sync(v2, v5);
  uint64_t result = (uint64_t)v7;
  if (v7 == v6) {
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
LABEL_6:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

uint64_t ___ZN19ATCSRouterIPCDriver15setErrorHandlerENSt3__18functionIFvNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEEE_block_invoke(uint64_t a1)
{
  void v11[3] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = a1 + 40;
    if (v2 == v3)
    {
      int v10 = v9;
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v3, v9);
    }
    else
    {
      int v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
    }
  }
  else
  {
    int v10 = 0;
  }
  long long v4 = (void *)(v1 + 88);
  if ((void *)(v1 + 88) == v9)
  {
LABEL_15:
    uint64_t result = (uint64_t)v10;
    if (v10 != v9) {
      goto LABEL_16;
    }
    return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
  }
  std::string::size_type v5 = v10;
  uint64_t v6 = *(void **)(v1 + 112);
  if (v10 == v9)
  {
    if (v6 != v4)
    {
      (*(void (**)(void *, uint64_t))(v9[0] + 24))(v9, v1 + 88);
      (*(void (**)(void *))(*v10 + 32))(v10);
      int v10 = *(void **)(v1 + 112);
      uint64_t v8 = v10;
      *(void *)(v1 + 112) = v4;
      uint64_t result = (uint64_t)v8;
      if (v8 == v9) {
        return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
      }
      goto LABEL_16;
    }
    memset(v11, 170, 24);
    (*(void (**)(void *, void *))(v9[0] + 24))(v9, v11);
    (*(void (**)(void *))(*v10 + 32))(v10);
    int v10 = 0;
    (*(void (**)(void, void *))(**(void **)(v1 + 112) + 24))(*(void *)(v1 + 112), v9);
    (*(void (**)(void))(**(void **)(v1 + 112) + 32))(*(void *)(v1 + 112));
    *(void *)(v1 + 112) = 0;
    int v10 = v9;
    (*(void (**)(void *, uint64_t))(v11[0] + 24))(v11, v1 + 88);
    (*(void (**)(void *))(v11[0] + 32))(v11);
    *(void *)(v1 + 112) = v4;
    uint64_t result = (uint64_t)v10;
    if (v10 != v9) {
      goto LABEL_16;
    }
    return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
  }
  if (v6 == v4)
  {
    (*(void (**)(uint64_t, void *))(*v4 + 24))(v1 + 88, v9);
    (*(void (**)(void))(**(void **)(v1 + 112) + 32))(*(void *)(v1 + 112));
    *(void *)(v1 + 112) = v10;
    int v10 = v9;
    goto LABEL_15;
  }
  int v10 = *(void **)(v1 + 112);
  *(void *)(v1 + 112) = v5;
  uint64_t result = (uint64_t)v6;
  if (v6 == v9) {
    return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
  }
LABEL_16:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1A111EF1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t __copy_helper_block_e8_40c84_ZTSNSt3__18functionIFvNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 64);
  if (result)
  {
    if (result == a2 + 40)
    {
      *(void *)(a1 + 64) = a1 + 40;
      long long v4 = *(uint64_t (**)(void))(**(void **)(a2 + 64) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 64) = result;
    }
  }
  else
  {
    *(void *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c84_ZTSNSt3__18functionIFvNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v1 = a1 + 40;
  uint64_t result = *(void *)(a1 + 64);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t ATCSRouterIPCDriver::resetErrorState(uint64_t this)
{
  *(unsigned char *)(this + 120) = 0;
  return this;
}

void __copy_helper_block_e8_32r40r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
  long long v4 = *(const void **)(a2 + 40);

  _Block_object_assign((void *)(a1 + 40), v4, 8);
}

void __destroy_helper_block_e8_32r40r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 8);
  uint64_t v2 = *(const void **)(a1 + 32);

  _Block_object_dispose(v2, 8);
}

void std::__shared_ptr_emplace<ATCSRouterIPCDriverWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43EC90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ATCSRouterIPCDriverWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF43EC90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ATCSRouterIPCDriverWrapper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void ATCSRouterIPCDriverWrapper::~ATCSRouterIPCDriverWrapper(dispatch_object_t *this)
{
  ATCSRouterIPCDriver::~ATCSRouterIPCDriver(this);

  operator delete(v1);
}

void ATCSCounted::ATCSCounted(ATCSCounted *this)
{
  *(void *)this = &unk_1EF43ED58;
  *((_DWORD *)this + 2) = 0;
}

{
  *(void *)this = &unk_1EF43ED58;
  *((_DWORD *)this + 2) = 0;
}

void ATCSCounted::~ATCSCounted(atomic_uint *this)
{
  *(void *)this = &unk_1EF43ED58;
  if (atomic_fetch_add_explicit(this + 2, 0xA5A5A5A5, memory_order_relaxed)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)(int)atomic_fetch_add_explicit(this + 2, 0xA5A5A5A5, memory_order_relaxed), 0);
  }
}

{
  *(void *)this = &unk_1EF43ED58;
  if (atomic_fetch_add_explicit(this + 2, 0xA5A5A5A5, memory_order_relaxed)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)(int)atomic_fetch_add_explicit(this + 2, 0xA5A5A5A5, memory_order_relaxed), 0);
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF43ED58;
  if (atomic_fetch_add_explicit(this + 2, 0xA5A5A5A5, memory_order_relaxed)) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)(int)atomic_fetch_add_explicit(this + 2, 0xA5A5A5A5, memory_order_relaxed), 0);
  }

  operator delete(this);
}

void ATCSCounted::incRef(atomic_uint *this)
{
  signed int add_explicit = atomic_fetch_add_explicit(this + 2, 1u, memory_order_relaxed);
  if (add_explicit < 0) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)add_explicit, 0);
  }
}

{
  signed int add_explicit;

  signed int add_explicit = atomic_fetch_add_explicit(this + 2, 1u, memory_order_relaxed);
  if (add_explicit < 0) {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)add_explicit, 0);
  }
}

void ATCSCounted::decRef(atomic_uint *this)
{
  int add = atomic_fetch_add(this + 2, 0xFFFFFFFF);
  if (add <= 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
  }
  else if (this)
  {
    if (add == 1) {
      (*(void (**)(void))(*(void *)this + 8))();
    }
  }
}

{
  int add;

  int add = atomic_fetch_add(this + 2, 0xFFFFFFFF);
  if (add <= 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)add, 0);
  }
  else if (this)
  {
    if (add == 1) {
      (*(void (**)(void))(*(void *)this + 8))();
    }
  }
}

void CallbacksHandler::registerSendCallback(uint64_t **a1, unsigned int a2, void *aBlock)
{
  if (aBlock)
  {
    std::string::size_type v5 = _Block_copy(aBlock);
    uint64_t v7 = (uint64_t *)(a1 + 1);
    uint64_t v6 = a1[1];
    if (v6) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  std::string::size_type v5 = 0;
  uint64_t v7 = (uint64_t *)(a1 + 1);
  uint64_t v6 = a1[1];
  if (!v6)
  {
LABEL_5:
    uint64_t v8 = v7;
LABEL_11:
    int v10 = operator new(0x30uLL);
    v10[16] = a2;
    *((void *)v10 + 5) = 0;
    *(void *)int v10 = 0;
    *((void *)v10 + qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1) = 0;
    *((void *)v10 + 2) = v8;
    uint64_t *v7 = (uint64_t)v10;
    unint64_t v11 = (uint64_t *)**a1;
    unint64_t v12 = (uint64_t *)v10;
    if (v11)
    {
      *a1 = v11;
      unint64_t v12 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    unint64_t v13 = (const void *)*((void *)v10 + 5);
    *((void *)v10 + 5) = v5;
    if (!v13) {
      return;
    }
LABEL_16:
    _Block_release(v13);
    return;
  }
  while (1)
  {
LABEL_7:
    while (1)
    {
      uint64_t v8 = v6;
      unsigned int v9 = *((unsigned __int16 *)v6 + 16);
      if (v9 <= a2) {
        break;
      }
      uint64_t v6 = (uint64_t *)*v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_11;
      }
    }
    if (v9 >= a2) {
      break;
    }
    uint64_t v6 = (uint64_t *)v8[1];
    if (!v6)
    {
      uint64_t v7 = v8 + 1;
      goto LABEL_11;
    }
  }
  unint64_t v13 = (const void *)v8[5];
  void v8[5] = (uint64_t)v5;
  if (v13) {
    goto LABEL_16;
  }
}

void sub_1A111F628(_Unwind_Exception *exception_object)
{
  if (v1) {
    _Block_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void CallbacksHandler::deRegisterSendCallback(CallbacksHandler *this, unsigned int a2)
{
  long long v4 = (char *)this + 8;
  uint64_t v3 = (uint64_t *)*((void *)this + 1);
  if (v3)
  {
    std::string::size_type v5 = v4;
    uint64_t v6 = v3;
    do
    {
      unsigned int v7 = *((unsigned __int16 *)v6 + 16);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        unsigned int v9 = (uint64_t **)v6;
      }
      else {
        unsigned int v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        std::string::size_type v5 = (char *)v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((unsigned __int16 *)v5 + 16) <= a2)
    {
      int v10 = (char *)*((void *)v5 + 1);
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          int v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        unint64_t v12 = v5;
        do
        {
          unint64_t v11 = (char *)*((void *)v12 + 2);
          BOOL v13 = *(void *)v11 == (void)v12;
          unint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*(char **)this == v5) {
        *(void *)this = v11;
      }
      --*((void *)this + 2);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, (uint64_t *)v5);
      unint64_t v14 = (const void *)*((void *)v5 + 5);
      if (v14) {
        _Block_release(v14);
      }
      operator delete(v5);
    }
  }
}

void *CallbacksHandler::getSendCallback@<X0>(CallbacksHandler *this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = (char *)*((void *)this + 1);
  long long v4 = (char *)this + 8;
  std::string::size_type v5 = (char **)v6;
  if (!v6) {
    goto LABEL_13;
  }
  unsigned int v7 = v4;
  do
  {
    unsigned int v8 = *((unsigned __int16 *)v5 + 16);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      int v10 = v5;
    }
    else {
      int v10 = v5 + 1;
    }
    if (v9) {
      unsigned int v7 = (char *)v5;
    }
    std::string::size_type v5 = (char **)*v10;
  }
  while (*v10);
  if (v7 == v4)
  {
LABEL_13:
    uint64_t result = 0;
    *a3 = 0;
  }
  else if (*((unsigned __int16 *)v7 + 16) <= a2)
  {
    uint64_t result = (void *)*((void *)v7 + 5);
    if (result) {
      uint64_t result = _Block_copy(result);
    }
    *a3 = result;
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

uint64_t TelephonyRadiosGetRadioVendor()
{
  return MEMORY[0x1F417D8B0]();
}

uint64_t TelephonyUtilIsCarrierBuild()
{
  return MEMORY[0x1F417D8E8]();
}

uint64_t TelephonyUtilIsInternalBuild()
{
  return MEMORY[0x1F417D8F0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t capabilities::abs::shouldLogSIMSlot(capabilities::abs *this)
{
  return MEMORY[0x1F417D270](this);
}

uint64_t capabilities::ipc::supportsPCI(capabilities::ipc *this)
{
  return MEMORY[0x1F417D488](this);
}

uint64_t capabilities::radio::supportsDataService(capabilities::radio *this)
{
  return MEMORY[0x1F417D560](this);
}

uint64_t capabilities::radio::supportsQMuxSendWindow(capabilities::radio *this)
{
  return MEMORY[0x1F417D580](this);
}

uint64_t capabilities::radio::QMuxPendingRequestLimitCount(capabilities::radio *this)
{
  return MEMORY[0x1F417D598](this);
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, os_log_s *a2)
{
  return MEMORY[0x1F417D960](this, a2);
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const char *a2, const char *a3)
{
  return MEMORY[0x1F417D968](this, a2, a3);
}

uint64_t ctu::OsLogLogger::OsLogLogger()
{
  return MEMORY[0x1F417D970]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const ctu::OsLogLogger *a2)
{
  return MEMORY[0x1F417D978](this, a2);
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x1F417D990](this, a2, a3);
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  return MEMORY[0x1F417D998](this, a2);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
}

uint64_t ctu::OsLogContext::operator=()
{
  return MEMORY[0x1F417D9A8]();
}

uint64_t ctu::StaticLogger::StaticLogger()
{
  return MEMORY[0x1F417D9B0]();
}

uint64_t ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  return MEMORY[0x1F417D9B8](this);
}

void ctu::StaticLogger::~StaticLogger(ctu::StaticLogger *this)
{
}

uint64_t ctu::XpcClientHelper::setServer_internal()
{
  return MEMORY[0x1F417D9E0]();
}

uint64_t ctu::XpcClientHelper::setServer()
{
  return MEMORY[0x1F417D9E8]();
}

void ctu::XpcClientHelper::~XpcClientHelper(ctu::XpcClientHelper *this)
{
}

uint64_t ctu::XpcServerHelper::setListener()
{
  return MEMORY[0x1F417D9F8]();
}

uint64_t ctu::XpcServerHelper::XpcServerHelper()
{
  return MEMORY[0x1F417DA00]();
}

void ctu::XpcServerHelper::~XpcServerHelper(ctu::XpcServerHelper *this)
{
}

uint64_t ctu::LogMessageBuffer::str(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1F417DA20](this);
}

uint64_t ctu::LogMessageBuffer::vprintf(ctu::LogMessageBuffer *this, const char *a2, char *a3)
{
  return MEMORY[0x1F417DA28](this, a2, a3);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1F417DA30](this);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
}

uint64_t ctu::LogMessageBuffer::operator=()
{
  return MEMORY[0x1F417DA40]();
}

uint64_t ctu::LoggerCommonBase::operator=()
{
  return MEMORY[0x1F417DA68]();
}

uint64_t ctu::cf::convert_copy(ctu::cf *this, const __CFString **a2, const char *a3, uint64_t a4, const __CFAllocator *a5)
{
  return MEMORY[0x1F417DAA0](this, a2, a3, a4, a5);
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x1F417DAA8]();
}

uint64_t ctu::hex(ctu *this, const void *a2)
{
  return MEMORY[0x1F417DBB8](this, a2);
}

uint64_t ctu::Gestalt::create_default_global(ctu::Gestalt *this)
{
  return MEMORY[0x1F417DBF0](this);
}

uint64_t qmi::MessageBase::validateMsgId(qmi::MessageBase *this)
{
  return MEMORY[0x1F417CF58](this);
}

uint64_t qmi::MessageBase::MessageBase()
{
  return MEMORY[0x1F417CF68]();
}

{
  return MEMORY[0x1F417CF78]();
}

uint64_t qmi::MessageBase::MessageBase(qmi::MessageBase *this, const void *a2)
{
  return MEMORY[0x1F417CF70](this, a2);
}

void qmi::MessageBase::~MessageBase(qmi::MessageBase *this)
{
}

uint64_t qmi::fixupHeader()
{
  return MEMORY[0x1F417CF88]();
}

uint64_t qmi::ResponseBase::ResponseBase(qmi::ResponseBase *this, const void *a2)
{
  return MEMORY[0x1F417CF90](this, a2);
}

uint64_t qmi::createRequest()
{
  return MEMORY[0x1F417CFA8]();
}

uint64_t qmi::isInternalError()
{
  return MEMORY[0x1F417CFB0]();
}

uint64_t qmi::MutableMessageBase::MutableMessageBase(qmi::MutableMessageBase *this)
{
  return MEMORY[0x1F417CFD0](this);
}

void qmi::MutableMessageBase::~MutableMessageBase(qmi::MutableMessageBase *this)
{
}

uint64_t qmi::parse()
{
  return MEMORY[0x1F417CFE8]();
}

{
  return MEMORY[0x1F417CFF0]();
}

uint64_t qmi::asString()
{
  return MEMORY[0x1F417CFF8]();
}

{
  return MEMORY[0x1F417D000]();
}

uint64_t tlv::parseV<ctl::tlv::AssignedId>()
{
  return MEMORY[0x1F417D058]();
}

uint64_t tlv::writeV<ctl::tlv::AssignedId>()
{
  return MEMORY[0x1F417D060]();
}

uint64_t tlv::writeV<ctl::tlv::DataFormat>()
{
  return MEMORY[0x1F417D068]();
}

uint64_t tlv::writeV<ctl::tlv::ServiceType>()
{
  return MEMORY[0x1F417D070]();
}

uint64_t tlv::writeV<ctl::tlv::IndicationSet>()
{
  return MEMORY[0x1F417D078]();
}

uint64_t tlv::writeV<ctl::tlv::PowerSaveState>()
{
  return MEMORY[0x1F417D080]();
}

uint64_t tlv::writeV<ctl::tlv::IndicationSetExt>()
{
  return MEMORY[0x1F417D088]();
}

uint64_t tlv::writeV<ctl::tlv::LinkLayerProtocol>()
{
  return MEMORY[0x1F417D090]();
}

uint64_t tlv::writeV<ctl::tlv::PowerSaveDescriptor>()
{
  return MEMORY[0x1F417D098]();
}

uint64_t xpc::auto_reply::deleter()
{
  return MEMORY[0x1F417DCA0]();
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x1F417DCB0]();
}

{
  return MEMORY[0x1F417DCC0]();
}

{
  return MEMORY[0x1F417DCD0]();
}

{
  return MEMORY[0x1F417DCD8]();
}

{
  return MEMORY[0x1F417DCE8]();
}

uint64_t ctu::XpcServerHelper::getListener(ctu::XpcServerHelper *this)
{
  return MEMORY[0x1F417DD00](this);
}

uint64_t qmi::MessageBase::findTlvValue(qmi::MessageBase *this)
{
  return MEMORY[0x1F417D0A0](this);
}

uint64_t qmi::MutableMessageBase::serialize(qmi::MutableMessageBase *this)
{
  return MEMORY[0x1F417D0A8](this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E868]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8B0]();
}

{
  return MEMORY[0x1F417E8C0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x1F40C9B68](*(void *)&a1, a2, *(void *)&a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void bzero(void *a1, size_t a2)
{
}

void cfmakeraw(termios *a1)
{
}

int cfsetspeed(termios *a1, speed_t a2)
{
  return MEMORY[0x1F40CB380](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x1F40CBA00](data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1F40CBA48](data);
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBA58]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_group_notify_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

uint64_t mav_router_service_register_error_handler()
{
  return MEMORY[0x1F4180A28]();
}

uint64_t mav_router_service_register_receive()
{
  return MEMORY[0x1F4180A30]();
}

uint64_t mav_router_service_transmit()
{
  return MEMORY[0x1F4180A38]();
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_release(void *object)
{
}

int pipe(int a1[2])
{
  return MEMORY[0x1F40CD760](a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD918](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD930](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1F40CD940](a1, *(void *)&a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD978](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1F40CD9A0](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1F40CD9E0](a1, a2);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1F40CDA38](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_kill(pthread_t a1, int a2)
{
  return MEMORY[0x1F40CDA58](a1, *(void *)&a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x1F40CDED8](*(void *)&a1, a2, a3, a4, a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

int tcgetattr(int a1, termios *a2)
{
  return MEMORY[0x1F40CE4E8](*(void *)&a1, a2);
}

int tcsetattr(int a1, int a2, const termios *a3)
{
  return MEMORY[0x1F40CE4F8](*(void *)&a1, *(void *)&a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1F40CEAA8](xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1F40CEB10](value);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBA8](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBC0](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_barrier(xpc_connection_t connection, dispatch_block_t barrier)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

void xpc_connection_suspend(xpc_connection_t connection)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED90](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1F40CEDB0](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1F40CEDC0](xdata);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE40](original);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1F40CEE88](xdict);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1F40CF018](connection);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1F40CF040](object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF188](value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1F40CF190](xint);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1F40CF208]();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CF248](object);
}