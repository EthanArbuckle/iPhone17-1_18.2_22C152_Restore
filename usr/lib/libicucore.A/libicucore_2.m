uint64_t sub_18C8B3268(uint64_t *a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;

  if (a2 < 0)
  {
    v2 = *((_DWORD *)a1 + 5);
    *((_DWORD *)a1 + 3) = v2;
    *((unsigned char *)a1 + 28) = a2;
  }
  else
  {
    if (a2)
    {
      v2 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 3) = v2;
      *((unsigned char *)a1 + 28) = a2;
      goto LABEL_14;
    }
    v2 = *((_DWORD *)a1 + 3);
    if ((*((char *)a1 + 28) & 0x80000000) == 0)
    {
LABEL_14:
      v11 = *((_DWORD *)a1 + 4);
      if (v2 < v11)
      {
        v12 = *a1;
        v13 = v2 + 1;
        *((_DWORD *)a1 + 3) = v13;
        v6 = *(unsigned __int16 *)(v12 + 2 * v2);
        if ((v6 & 0xFC00) == 0xD800 && v13 != v11)
        {
          v15 = *(unsigned __int16 *)(v12 + 2 * v13);
          if ((v15 & 0xFC00) == 0xDC00)
          {
            *((_DWORD *)a1 + 3) = v2 + 2;
            v10 = v15 + (v6 << 10);
            return (v10 - 56613888);
          }
        }
        return v6;
      }
      return 0xFFFFFFFFLL;
    }
  }
  v3 = *((_DWORD *)a1 + 2);
  if (v3 >= v2) {
    return 0xFFFFFFFFLL;
  }
  v4 = *a1;
  v5 = v2 - 1;
  *((_DWORD *)a1 + 3) = v5;
  v6 = *(unsigned __int16 *)(v4 + 2 * v5);
  if ((int)v5 > v3 && (v6 & 0xFC00) == 56320)
  {
    v8 = v2 - 2;
    v9 = *(unsigned __int16 *)(v4 + 2 * v8);
    if ((v9 & 0xFC00) == 0xD800)
    {
      *((_DWORD *)a1 + 3) = v8;
      v10 = v6 + (v9 << 10);
      return (v10 - 56613888);
    }
  }
  return v6;
}

uint64_t sub_18C8B3364(uint64_t a1, uint64_t a2, int a3, unsigned int a4, __int16 *a5, unsigned int a6, __int16 a7, icu::Edits *this)
{
  int v10 = a4;
  if ((a4 & 0x80000000) != 0)
  {
    if (this) {
      icu::Edits::addUnchanged(this, a6);
    }
    if ((a7 & 0x4000) != 0) {
      return a2;
    }
    unsigned int v14 = ~v10;
    if ((int)a2 < a3 && v10 >= 0xFFFF0000) {
      goto LABEL_25;
    }
    int v10 = a6;
    goto LABEL_20;
  }
  if (a4 < 0x20)
  {
    unsigned int v14 = -1;
    if (!this) {
      goto LABEL_20;
    }
LABEL_19:
    icu::Edits::addReplace(this, a6, v10);
    goto LABEL_20;
  }
  if ((int)a2 >= a3 || HIWORD(a4))
  {
    unsigned int v14 = a4;
    if (a4 < 0x10000) {
      int v10 = 1;
    }
    else {
      int v10 = 2;
    }
    if (this) {
      goto LABEL_19;
    }
LABEL_20:
    if (v10 > (int)(a2 ^ 0x7FFFFFFF)) {
      return 0xFFFFFFFFLL;
    }
    if ((int)a2 >= a3) {
      return (v10 + a2);
    }
    if ((v14 & 0x80000000) == 0)
    {
      if (!HIWORD(v14))
      {
LABEL_25:
        uint64_t v16 = (a2 + 1);
        *(_WORD *)(a1 + 2 * (int)a2) = v14;
        return v16;
      }
      if (HIWORD(v14) <= 0x10u)
      {
        uint64_t v20 = (int)a2 + 1;
        if ((int)v20 < a3)
        {
          *(_WORD *)(a1 + 2 * (int)a2) = (v14 >> 10) - 10304;
          uint64_t v16 = (a2 + 2);
          *(_WORD *)(a1 + 2 * v20) = v14 & 0x3FF | 0xDC00;
          return v16;
        }
      }
      return (v10 + a2);
    }
    uint64_t v16 = (v10 + a2);
    if ((int)v16 > a3) {
      return v16;
    }
    if (v10 >= 1)
    {
      v17 = (_WORD *)(a1 + 2 * (int)a2);
      unsigned int v18 = v10 + 1;
      do
      {
        __int16 v19 = *a5++;
        *v17++ = v19;
        --v18;
      }
      while (v18 > 1);
      return v16;
    }
    return a2;
  }
  uint64_t v16 = (a2 + 1);
  *(_WORD *)(a1 + 2 * (int)a2) = a4;
  if (this) {
    icu::Edits::addReplace(this, a6, 1);
  }
  return v16;
}

uint64_t sub_18C8B3500(int a1, __int16 a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, icu::Edits *a9, _DWORD *a10)
{
  if (a1 == 1) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
    if ((a2 & 7) == 0) {
      goto LABEL_4;
    }
  }
  else if ((a1 & 0xFFFFFFFE) != 2)
  {
LABEL_4:
    v13 = &unk_18CA54AD4;
    goto LABEL_7;
  }
  v13 = &unk_18CA54C54;
LABEL_7:
  v38 = v13;
  v37 = sub_18C84AFEC();
  uint64_t v14 = 0;
  LODWORD(v15) = a7;
  while (2)
  {
    if ((int)v15 >= a8)
    {
      LOWORD(v18) = 0;
      LODWORD(v16) = v15;
      goto LABEL_43;
    }
    LODWORD(v16) = v15;
    uint64_t v17 = a7;
    while (1)
    {
      unint64_t v18 = *(unsigned __int16 *)(a5 + 2 * (int)v16);
      if (v18 <= 0x17E)
      {
        int v19 = (char)v38[v18];
        if (v19 == -128) {
          break;
        }
        uint64_t v16 = (v16 + 1);
        a7 = v16;
        if (v38[v18]) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      if (v18 >> 11 > 0x1A) {
        break;
      }
      unsigned int v20 = *((unsigned __int16 *)*v37
            + 4 * *(unsigned __int16 *)((char *)*v37 + ((v18 >> 4) & 0xFFE))
            + (v18 & 0x1F));
      if ((v20 & 8) != 0) {
        break;
      }
      uint64_t v16 = (v16 + 1);
      if (v20 >= 0x80 && (v20 & 2) != 0)
      {
        int v19 = (__int16)v20 >> 7;
        a7 = v16;
LABEL_22:
        int32_t v22 = a7 + ~v17;
        if (v22 < 1) {
          goto LABEL_29;
        }
        if (a9) {
          icu::Edits::addUnchanged(a9, a7 + ~v17);
        }
        if ((a2 & 0x4000) != 0)
        {
LABEL_29:
          int v23 = v14;
        }
        else
        {
          if ((v14 ^ 0x7FFFFFFF) < v22) {
            goto LABEL_73;
          }
          int v23 = v22 + v14;
          if (v22 + (int)v14 <= a4) {
            u_memcpy((UChar *)(a3 + 2 * (int)v14), (const UChar *)(a5 + 2 * (int)v17), v22);
          }
        }
        if (v23 < 0) {
          goto LABEL_73;
        }
        LOWORD(v18) = v19 + v18;
        if (v23 < a4)
        {
          *(_WORD *)(a3 + 2 * v23) = v18;
          goto LABEL_36;
        }
        if (v23 == 0x7FFFFFFF)
        {
          uint64_t v14 = 0xFFFFFFFFLL;
          if (!a9)
          {
LABEL_38:
            LODWORD(v16) = a7;
            if ((v14 & 0x80000000) != 0) {
              goto LABEL_73;
            }
            goto LABEL_39;
          }
        }
        else
        {
LABEL_36:
          uint64_t v14 = (v23 + 1);
          if (!a9) {
            goto LABEL_38;
          }
        }
        icu::Edits::addReplace(a9, 1, 1);
        goto LABEL_38;
      }
LABEL_21:
      a7 = v17;
LABEL_39:
      uint64_t v17 = a7;
      if ((int)v16 >= a8) {
        goto LABEL_43;
      }
    }
    a7 = v17;
LABEL_43:
    if ((int)v16 < a8)
    {
      uint64_t v15 = (v16 + 1);
      unsigned int v24 = (unsigned __int16)v18;
      if ((v18 & 0xFC00) == 0xD800 && (int)v15 < a8)
      {
        int v25 = *(unsigned __int16 *)(a5 + 2 * (int)v15);
        int v26 = a1;
        if ((v25 & 0xFC00) == 0xDC00)
        {
          unsigned int v24 = v25 + ((unsigned __int16)v18 << 10) - 56613888;
          uint64_t v15 = (v16 + 2);
        }
      }
      else
      {
        int v26 = a1;
      }
      *(void *)v41 = 0;
      if (v26 < 0)
      {
        unsigned int v27 = ucase_toFullFolding(v24, v41, a2);
      }
      else
      {
        *(_DWORD *)(a6 + 20) = v16;
        *(_DWORD *)(a6 + 24) = v15;
        unsigned int v27 = ucase_toFullLower(v24, (uint64_t (*)(uint64_t, void))sub_18C8B3268, a6, v41, v26);
      }
      unsigned int v28 = v27;
      if ((v27 & 0x80000000) == 0)
      {
        unsigned int v29 = v16 - a7;
        if ((int)v16 - (int)a7 < 1) {
          goto LABEL_60;
        }
        if (a9) {
          icu::Edits::addUnchanged(a9, v16 - a7);
        }
        if ((a2 & 0x4000) != 0)
        {
LABEL_60:
          uint64_t v30 = v14;
          goto LABEL_61;
        }
        if ((v14 ^ 0x7FFFFFFF) < v29) {
          goto LABEL_73;
        }
        uint64_t v30 = v29 + v14;
        if ((int)v30 <= a4) {
          u_memcpy((UChar *)(a3 + 2 * (int)v14), (const UChar *)(a5 + 2 * (int)a7), v16 - a7);
        }
LABEL_61:
        if ((v30 & 0x80000000) != 0) {
          goto LABEL_73;
        }
        uint64_t v14 = sub_18C8B3364(a3, v30, a4, v28, *(__int16 **)v41, (int)v15 - (int)v16, a2, a9);
        a7 = v15;
        if ((v14 & 0x80000000) != 0) {
          goto LABEL_73;
        }
      }
      continue;
    }
    break;
  }
  unsigned int v31 = v16 - a7;
  if ((int)v16 - (int)a7 < 1) {
    goto LABEL_71;
  }
  if (a9) {
    icu::Edits::addUnchanged(a9, v16 - a7);
  }
  if ((a2 & 0x4000) != 0)
  {
LABEL_71:
    uint64_t v32 = v14;
  }
  else
  {
    if ((v14 ^ 0x7FFFFFFF) < v31) {
      goto LABEL_73;
    }
    uint64_t v32 = v31 + v14;
    if ((int)v32 <= a4) {
      u_memcpy((UChar *)(a3 + 2 * (int)v14), (const UChar *)(a5 + 2 * (int)a7), v16 - a7);
    }
  }
  if ((v32 & 0x80000000) != 0)
  {
LABEL_73:
    uint64_t v32 = 0;
    *a10 = 8;
  }
  return v32;
}

uint64_t sub_18C8B38C0(unsigned int a1)
{
  if (a1 - 8487 < 0xFFFFE249 || (a1 - 1024) >> 8 < 0x1B) {
    return 0;
  }
  if (a1 <= 0x3FF) {
    return word_18CA86F40[a1 - 880];
  }
  if (!(a1 >> 13)) {
    return word_18CA87060[a1 - 7936];
  }
  if (a1 == 8486) {
    return 5033;
  }
  return 0;
}

uint64_t sub_18C8B3938(int a1)
{
  uint64_t result = 0x4000;
  if ((a1 - 768) <= 0x14)
  {
    if (((1 << a1) & 0x2000F) != 0) {
      return result;
    }
    if (((1 << a1) & 0x180050) != 0) {
      return 0x20000;
    }
    if (a1 == 776) {
      return 0x10000;
    }
  }
  switch(a1)
  {
    case 834:
      return result;
    case 835:
      return 0x20000;
    case 836:
      uint64_t result = 81920;
      break;
    case 837:
      uint64_t result = 0x2000;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

BOOL sub_18C8B39E4(uint64_t a1, int a2, int a3)
{
  while (a2 < a3)
  {
    uint64_t v5 = a2 + 1;
    unsigned int v6 = *(unsigned __int16 *)(a1 + 2 * a2);
    if ((v6 & 0xFC00) == 0xD800 && v5 != a3)
    {
      int v8 = *(unsigned __int16 *)(a1 + 2 * v5);
      BOOL v9 = (v8 & 0xFC00) == 56320;
      int v10 = v8 + (v6 << 10) - 56613888;
      if (v9) {
        LODWORD(v5) = a2 + 2;
      }
      if (v9) {
        unsigned int v6 = v10;
      }
    }
    int TypeOrIgnorable = ucase_getTypeOrIgnorable(v6);
    a2 = v5;
    if ((TypeOrIgnorable & 4) == 0) {
      return TypeOrIgnorable != 0;
    }
  }
  return 0;
}

uint64_t sub_18C8B3A88(__int16 a1, uint64_t a2, int a3, uint64_t a4, int a5, icu::Edits *a6, _DWORD *a7)
{
  if (a5 < 1) {
    return 0;
  }
  int v7 = a5;
  LODWORD(v10) = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  BOOL v14 = (a1 & 0x4000) == 0 && a6 == 0;
  BOOL v59 = v14;
  uint64_t v65 = a5;
  while (1)
  {
    uint64_t v15 = (int)v10;
    uint64_t v16 = (int)v10 + 1;
    unsigned int v17 = *(unsigned __int16 *)(a4 + 2 * (int)v10);
    BOOL v18 = (v17 & 0xFC00) != 0xD800 || v16 == v7;
    LODWORD(v10) = v10 + 1;
    if (!v18)
    {
      int v19 = *(unsigned __int16 *)(a4 + 2 * v16);
      BOOL v20 = (v19 & 0xFC00) == 56320;
      int v21 = v19 + (v17 << 10) - 56613888;
      LODWORD(v10) = v20 ? v15 + 2 : v16;
      if (v20) {
        unsigned int v17 = v21;
      }
    }
    uint64_t v64 = v15;
    int TypeOrIgnorable = ucase_getTypeOrIgnorable(v17);
    char v23 = v11;
    int v24 = v11 & 1;
    char v25 = TypeOrIgnorable != 0;
    if ((TypeOrIgnorable & 4) != 0) {
      char v25 = v11 & 1;
    }
    char v63 = v25;
    unsigned int v26 = sub_18C8B38C0(v17);
    if (!v26)
    {
      *(void *)v66 = 0;
      unsigned int v34 = ucase_toFullUpper(v17, 0, 0, v66, 4);
      uint64_t v35 = sub_18C8B3364(a2, v12, a3, v34, *(__int16 **)v66, (int)v10 - (int)v64, a1, a6);
      if ((v35 & 0x80000000) != 0) {
        break;
      }
      uint64_t v12 = v35;
      char v11 = v63;
      goto LABEL_113;
    }
    unsigned int v27 = v26;
    int v28 = v26 & 0x3FF;
    if ((v26 & 0x1000) != 0 && (v23 & 6) != 0 && (v28 == 933 || v28 == 921))
    {
      if ((v23 & 4) != 0) {
        int v29 = 0x8000;
      }
      else {
        int v29 = 0x10000;
      }
      unsigned int v27 = v26 | v29;
    }
    int v30 = (v27 >> 13) & 1;
    if ((int)v10 >= v7)
    {
      unsigned int v32 = v27;
    }
    else
    {
      int v31 = v26 & 0x3FF;
      uint64_t v10 = (int)v10;
      unsigned int v32 = v27;
      while (1)
      {
        unsigned int v33 = sub_18C8B3938(*(unsigned __int16 *)(a4 + 2 * v10));
        if (!v33) {
          break;
        }
        v32 |= v33;
        v30 += (v33 >> 13) & 1;
        if (v65 == ++v10)
        {
          LODWORD(v10) = v65;
          break;
        }
      }
      int v28 = v31;
    }
    if ((v27 & 0x4000) != 0) {
      char v36 = 4;
    }
    else {
      char v36 = 2;
    }
    if ((v32 & 0xD000) == 0x5000) {
      char v37 = v36;
    }
    else {
      char v37 = 0;
    }
    if (v28 != 919
      || (v32 & 0x4000) == 0
      || v30
      || v24
      || (v38 = v28, v39 = v37, v40 = sub_18C8B39E4(a4, v10, a5), v37 = v39, int v28 = v38, v40))
    {
      if ((v32 & 0x8000) != 0)
      {
        uint64_t v43 = v64;
        if (v28 == 933)
        {
          unsigned int v32 = 0;
          BOOL v41 = 0;
          LOBYTE(v42) = 1;
          int v28 = 939;
        }
        else if (v28 == 921)
        {
          unsigned int v32 = 0;
          BOOL v41 = 0;
          LOBYTE(v42) = 1;
          int v28 = 938;
        }
        else
        {
          BOOL v41 = 0;
          LOBYTE(v42) = 1;
        }
      }
      else
      {
        BOOL v41 = 0;
        LOBYTE(v42) = 1;
        uint64_t v43 = v64;
      }
    }
    else
    {
      int v42 = (unsigned __int16)(v27 & 0x4000) >> 14;
      if ((v27 & 0x4000) != 0) {
        int v28 = 905;
      }
      else {
        int v28 = 919;
      }
      uint64_t v43 = v64;
      BOOL v41 = (v27 & 0x4000) == 0;
    }
    char v11 = v37 | v63;
    if (!v59)
    {
      char v45 = v28 != *(unsigned __int16 *)(a4 + 2 * v43) || v30 != 0;
      if ((v32 & 0x18000) != 0)
      {
        BOOL v46 = (int)v16 >= (int)v10 || *(_WORD *)(a4 + 2 * (int)v16) != 776;
        v45 |= v46;
        LODWORD(v16) = v43 + 2;
      }
      if ((v42 & 1) == 0)
      {
        BOOL v47 = (int)v16 >= (int)v10 || *(_WORD *)(a4 + 2 * (int)v16) != 769;
        v45 |= v47;
        LODWORD(v16) = v16 + 1;
      }
      unsigned int v48 = v10 - v43;
      int v49 = v16 - v43 + v30;
      if ((v45 & 1) != 0 || v48 != v49)
      {
        if (a6)
        {
          __int16 v51 = v28;
          icu::Edits::addReplace(a6, v48, v49);
          LOWORD(v28) = v51;
        }
      }
      else
      {
        if (a6)
        {
          __int16 v50 = v28;
          icu::Edits::addUnchanged(a6, v48);
          LOWORD(v28) = v50;
        }
        if ((a1 & 0x4000) != 0) {
          goto LABEL_113;
        }
      }
    }
    if ((int)v12 >= a3)
    {
      if (v12 == 0x7FFFFFFF) {
        break;
      }
    }
    else
    {
      *(_WORD *)(a2 + 2 * (int)v12) = v28;
    }
    uint64_t v52 = (v12 + 1);
    if ((int)v12 >= -1 && (v32 & 0x18000) != 0)
    {
      if ((int)v52 >= a3)
      {
        if (v12 == 2147483646) {
          break;
        }
      }
      else
      {
        *(_WORD *)(a2 + 2 * v52) = 776;
      }
      uint64_t v52 = (v12 + 2);
    }
    char v53 = !v41;
    if ((int)v52 < 0) {
      char v53 = 1;
    }
    if ((v53 & 1) == 0)
    {
      if ((int)v52 >= a3)
      {
        if (v52 == 0x7FFFFFFF) {
          break;
        }
      }
      else
      {
        *(_WORD *)(a2 + 2 * v52) = 769;
      }
      uint64_t v52 = (v52 + 1);
    }
    if ((v52 & 0x80000000) != 0 || v30 < 1)
    {
      uint64_t v12 = v52;
    }
    else
    {
      v54 = (_WORD *)(a2 + 2 * (int)v52);
      do
      {
        if ((int)v52 >= a3)
        {
          if (v52 == 0x7FFFFFFF) {
            goto LABEL_115;
          }
        }
        else
        {
          _WORD *v54 = 921;
        }
        uint64_t v12 = (v52 + 1);
        if ((int)v52 < -1) {
          break;
        }
        ++v54;
        LODWORD(v52) = v52 + 1;
      }
      while (v30-- > 1);
    }
    if ((v12 & 0x80000000) != 0) {
      break;
    }
LABEL_113:
    int v7 = a5;
    if ((int)v10 >= a5) {
      return v12;
    }
  }
LABEL_115:
  uint64_t v12 = 0;
  *a7 = 8;
  return v12;
}

uint64_t sub_18C8B3F34(int a1, __int16 a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unsigned int a7, icu::Edits *a8, UErrorCode *a9)
{
  v14[3] = 0;
  v14[0] = a6;
  v14[1] = 0;
  v14[2] = a7;
  uint64_t v11 = sub_18C8B3500(a1, a2, a4, a5, a6, (uint64_t)v14, 0, a7, a8, a9);
  uint64_t v12 = v11;
  if (*(int *)a9 <= 0)
  {
    if ((int)v11 <= a5)
    {
      if (a8) {
        icu::Edits::copyErrorTo(a8, a9);
      }
    }
    else
    {
      *a9 = U_BUFFER_OVERFLOW_ERROR;
    }
  }
  return v12;
}

uint64_t sub_18C8B3FD4(int a1, __int16 a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, icu::Edits *a8, UErrorCode *a9)
{
  int v12 = a5;
  v13 = a9;
  if (a1 == 4)
  {
    uint64_t v14 = sub_18C8B3A88(a2, a4, a5, a6, a7, a8, a9);
    goto LABEL_58;
  }
  uint64_t v43 = 0;
  v41[0] = a6;
  v41[1] = 0;
  uint64_t v42 = a7;
  uint64_t v15 = &unk_18CA54DD4;
  if (a1 == 2) {
    uint64_t v15 = &unk_18CA54F54;
  }
  int v38 = v15;
  char v37 = sub_18C84AFEC();
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  LODWORD(v18) = 0;
  while (2)
  {
    if ((int)v18 >= a7)
    {
      LOWORD(v21) = 0;
      LODWORD(v19) = v18;
      goto LABEL_41;
    }
    LODWORD(v19) = v18;
    uint64_t v20 = v17;
    while (1)
    {
      unint64_t v21 = *(unsigned __int16 *)(a6 + 2 * (int)v19);
      if (v21 <= 0x17E)
      {
        int v22 = (char)v38[v21];
        if (v22 == -128) {
          break;
        }
        uint64_t v19 = (v19 + 1);
        uint64_t v17 = v19;
        if (v38[v21]) {
          goto LABEL_20;
        }
        goto LABEL_18;
      }
      if (v21 >> 11 > 0x1A) {
        break;
      }
      unsigned int v23 = *((unsigned __int16 *)*v37
            + 4 * *(unsigned __int16 *)((char *)*v37 + ((v21 >> 4) & 0xFFE))
            + (v21 & 0x1F));
      if ((v23 & 8) != 0) {
        break;
      }
      uint64_t v19 = (v19 + 1);
      if (v23 >= 0x80 && (v23 & 3) == 1)
      {
        int v22 = (__int16)v23 >> 7;
        uint64_t v17 = v19;
LABEL_20:
        int32_t v25 = v17 + ~v20;
        if (v25 < 1) {
          goto LABEL_27;
        }
        if (a8) {
          icu::Edits::addUnchanged(a8, v17 + ~v20);
        }
        if ((a2 & 0x4000) != 0)
        {
LABEL_27:
          int v26 = v16;
        }
        else
        {
          if ((v16 ^ 0x7FFFFFFF) < v25) {
            goto LABEL_57;
          }
          int v26 = v25 + v16;
          if (v25 + (int)v16 <= a5) {
            u_memcpy((UChar *)(a4 + 2 * (int)v16), (const UChar *)(a6 + 2 * (int)v20), v25);
          }
        }
        if (v26 < 0) {
          goto LABEL_57;
        }
        LOWORD(v21) = v22 + v21;
        if (v26 < a5)
        {
          *(_WORD *)(a4 + 2 * v26) = v21;
          goto LABEL_34;
        }
        if (v26 == 0x7FFFFFFF)
        {
          uint64_t v16 = 0xFFFFFFFFLL;
          if (!a8)
          {
LABEL_36:
            LODWORD(v19) = v17;
            if ((v16 & 0x80000000) != 0) {
              goto LABEL_57;
            }
            goto LABEL_37;
          }
        }
        else
        {
LABEL_34:
          uint64_t v16 = (v26 + 1);
          if (!a8) {
            goto LABEL_36;
          }
        }
        icu::Edits::addReplace(a8, 1, 1);
        goto LABEL_36;
      }
LABEL_18:
      uint64_t v17 = v20;
LABEL_37:
      uint64_t v20 = v17;
      if ((int)v19 >= a7) {
        goto LABEL_41;
      }
    }
    uint64_t v17 = v20;
LABEL_41:
    if ((int)v19 < a7)
    {
      uint64_t v18 = (v19 + 1);
      HIDWORD(v42) = v19;
      unsigned int v27 = (unsigned __int16)v21;
      if ((v21 & 0xFC00) == 0xD800 && (int)v18 < a7)
      {
        int v28 = *(unsigned __int16 *)(a6 + 2 * (int)v18);
        if ((v28 & 0xFC00) == 0xDC00)
        {
          unsigned int v27 = v28 + ((unsigned __int16)v21 << 10) - 56613888;
          uint64_t v18 = (v19 + 2);
        }
      }
      LODWORD(v43) = v18;
      *(void *)v44 = 0;
      unsigned int v29 = ucase_toFullUpper(v27, (uint64_t (*)(uint64_t, void))sub_18C8B3268, (uint64_t)v41, v44, a1);
      if ((v29 & 0x80000000) == 0)
      {
        unsigned int v30 = v29;
        unsigned int v31 = v19 - v17;
        if ((int)v19 - (int)v17 < 1) {
          goto LABEL_54;
        }
        if (a8) {
          icu::Edits::addUnchanged(a8, v19 - v17);
        }
        if ((a2 & 0x4000) != 0)
        {
LABEL_54:
          uint64_t v32 = v16;
          goto LABEL_55;
        }
        if ((v16 ^ 0x7FFFFFFF) < v31) {
          goto LABEL_57;
        }
        uint64_t v32 = v31 + v16;
        if ((int)v32 <= a5) {
          u_memcpy((UChar *)(a4 + 2 * (int)v16), (const UChar *)(a6 + 2 * (int)v17), v19 - v17);
        }
LABEL_55:
        if ((v32 & 0x80000000) != 0
          || (uint64_t v16 = sub_18C8B3364(a4, v32, a5, v30, *(__int16 **)v44, (int)v18 - (int)v19, a2, a8),
              uint64_t v17 = v18,
              (v16 & 0x80000000) != 0))
        {
LABEL_57:
          uint64_t v14 = 0;
          v13 = a9;
          *a9 = U_INDEX_OUTOFBOUNDS_ERROR;
          int v12 = a5;
          goto LABEL_58;
        }
      }
      continue;
    }
    break;
  }
  unsigned int v34 = v19 - v17;
  if ((int)v19 - (int)v17 < 1)
  {
    uint64_t v14 = v16;
    v13 = a9;
    int v12 = a5;
    goto LABEL_73;
  }
  if (a8) {
    icu::Edits::addUnchanged(a8, v19 - v17);
  }
  v13 = a9;
  int v12 = a5;
  if ((a2 & 0x4000) != 0)
  {
    uint64_t v14 = v16;
    goto LABEL_73;
  }
  if ((v16 ^ 0x7FFFFFFF) < v34) {
    goto LABEL_74;
  }
  uint64_t v14 = v34 + v16;
  if ((int)v14 <= a5) {
    u_memcpy((UChar *)(a4 + 2 * (int)v16), (const UChar *)(a6 + 2 * (int)v17), v34);
  }
LABEL_73:
  if ((v14 & 0x80000000) != 0)
  {
LABEL_74:
    uint64_t v14 = 0;
    UErrorCode *v13 = U_INDEX_OUTOFBOUNDS_ERROR;
  }
LABEL_58:
  if (*(int *)v13 <= 0)
  {
    if ((int)v14 <= v12)
    {
      if (a8) {
        icu::Edits::copyErrorTo(a8, v13);
      }
    }
    else
    {
      UErrorCode *v13 = U_BUFFER_OVERFLOW_ERROR;
    }
  }
  return v14;
}

uint64_t sub_18C8B43E8(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, icu::Edits *a8, UErrorCode *a9)
{
  uint64_t v11 = sub_18C8B3500(-1, a2, a4, a5, a6, 0, 0, a7, a8, a9);
  uint64_t v12 = v11;
  if (*(int *)a9 <= 0)
  {
    if ((int)v11 <= a5)
    {
      if (a8) {
        icu::Edits::copyErrorTo(a8, a9);
      }
    }
    else
    {
      *a9 = U_BUFFER_OVERFLOW_ERROR;
    }
  }
  return v12;
}

uint64_t sub_18C8B447C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, UChar *s, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, UChar *, uint64_t, icu::Edits *, int *), icu::Edits *a9, int *a10)
{
  if (*a10 > 0) {
    return 0;
  }
  if ((a5 & 0x80000000) != 0 || (a5 ? (v12 = a4 == 0) : (v12 = 0), v12 || !s || (uint64_t v14 = a7, (int)a7 <= -2)))
  {
LABEL_17:
    *a10 = 1;
    return 0;
  }
  if (a7 == -1)
  {
    uint64_t v14 = u_strlen(s);
    if (!a4) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  if (a4)
  {
LABEL_13:
    if (((unint64_t)s < a4 || a4 + 2 * a5 <= (unint64_t)s)
      && (a4 < (unint64_t)s || (unint64_t)&s[(int)v14] <= a4))
    {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
LABEL_19:
  if ((a2 & 0x2000) == 0 && a9) {
    icu::Edits::reset((uint64_t)a9);
  }
  uint64_t v20 = a8(a1, a2, a3, a4, a5, s, v14, a9, a10);

  return u_terminateUChars(a4, a5, v20, a10);
}

UChar *sub_18C8B45DC(uint64_t a1, uint64_t a2, uint64_t a3, UChar *a4, uint64_t a5, UChar *s, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, UChar *, uint64_t, UChar *, uint64_t, void, int *), int *a9)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*a9 > 0) {
    return 0;
  }
  if ((a5 & 0x80000000) != 0 || (a5 ? (v12 = a4 == 0) : (v12 = 0), v12 || !s || (uint64_t v14 = a7, (int)a7 <= -2)))
  {
    uint64_t result = 0;
    int v20 = 1;
    goto LABEL_20;
  }
  if (a7 == -1) {
    uint64_t v14 = u_strlen(s);
  }
  bzero(v23, 0x258uLL);
  if (a4 && (s >= a4 && &a4[a5] > s || a4 >= s && &s[(int)v14] > a4))
  {
    if (a5 < 0x12D)
    {
      uint64_t v19 = (UChar *)v23;
      goto LABEL_23;
    }
    uint64_t result = (UChar *)uprv_malloc((2 * a5));
    uint64_t v19 = result;
    if (result)
    {
LABEL_23:
      uint64_t v22 = a8(a1, a2, a3, v19, a5, s, v14, 0, a9);
      uint64_t v21 = v22;
      if (v19 != a4)
      {
        if (*a9 <= 0 && (int)v22 >= 1 && (int)v22 <= (int)a5) {
          u_memmove(a4, v19, v22);
        }
        if (v19 != (UChar *)v23) {
          uprv_free(v19);
        }
      }
      return (UChar *)u_terminateUChars((uint64_t)a4, a5, v21, a9);
    }
    int v20 = 7;
LABEL_20:
    *a9 = v20;
    return result;
  }
  uint64_t v21 = a8(a1, a2, a3, a4, a5, s, v14, 0, a9);
  return (UChar *)u_terminateUChars((uint64_t)a4, a5, v21, a9);
}

int32_t u_strFoldCase(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, uint32_t options, UErrorCode *pErrorCode)
{
  return sub_18C8B45DC(1, *(uint64_t *)&options, 0, dest, *(uint64_t *)&destCapacity, (UChar *)src, *(uint64_t *)&srcLength, (uint64_t (*)(uint64_t, uint64_t, uint64_t, UChar *, uint64_t, UChar *, uint64_t, void, int *))sub_18C8B43E8, (int *)pErrorCode);
}

uint64_t icu::CaseMap::fold(uint64_t a1, UChar *s, uint64_t a3, unint64_t a4, uint64_t a5, icu::Edits *a6, int *a7)
{
  return sub_18C8B447C(1, a1, 0, a4, a5, s, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, UChar *, uint64_t, icu::Edits *, int *))sub_18C8B43E8, a6, a7);
}

uint64_t sub_18C8B4884(UChar *a1, int a2, UChar *a3, int a4, __int16 a5, int *a6)
{
  return u_caseInsensitivePrefixMatch_0(a1, a2, a3, a4, a5, 0, 0, a6);
}

uint64_t u_caseInsensitivePrefixMatch_0(UChar *a1, int a2, UChar *a3, int a4, __int16 a5, _DWORD *a6, _DWORD *a7, int *a8)
{
  v64[5] = *MEMORY[0x1E4F143B8];
  src = 0;
  memset(v64, 0, 32);
  long long v63 = 0u;
  long long v61 = 0u;
  memset(v62, 0, sizeof(v62));
  long long v59 = 0u;
  long long v60 = 0u;
  *(_OWORD *)v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  *(_OWORD *)dest = 0u;
  long long v54 = 0u;
  if (*a8 > 0) {
    return 0;
  }
  if (a6)
  {
    *a6 = 0;
    *a7 = 0;
  }
  uint64_t v42 = 0;
  uint64_t v43 = a1;
  int v49 = 0;
  int v9 = 0;
  int v10 = 0;
  if (a2 == -1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = &a1[a2];
  }
  if (a4 == -1) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = &a3[a4];
  }
  v13 = a3;
  uint64_t v14 = a1;
  uint64_t v15 = a1;
  uint64_t v16 = a3;
  unsigned int v48 = a3;
  __int16 v50 = a5;
LABEL_12:
  unsigned int v17 = -1;
LABEL_17:
  while (1)
  {
    if (v14 != v11)
    {
      unsigned int v19 = *v14;
      BOOL v20 = (a5 & 0x1000) != 0 || v11 == 0;
      BOOL v21 = !v20;
      if (*v14 || v21) {
        break;
      }
    }
    if (!v9)
    {
      unsigned int v19 = -1;
      goto LABEL_28;
    }
    uint64_t v18 = (UChar **)&v64[3 * v9];
    do
    {
      uint64_t v15 = *(v18 - 5);
      --v9;
      v18 -= 3;
    }
    while (!v15);
    uint64_t v14 = *(v18 - 1);
    uint64_t v11 = *v18;
  }
  ++v14;
  if ((v17 & 0x80000000) != 0) {
    goto LABEL_35;
  }
  while (1)
  {
LABEL_47:
    if (v19 == v17)
    {
      if ((v19 & 0x80000000) != 0)
      {
        uint64_t result = 0;
        goto LABEL_126;
      }
      unsigned int v34 = v14;
      if (v9)
      {
        unsigned int v17 = -1;
        unsigned int v34 = v42;
        if (v14 != v11) {
          goto LABEL_17;
        }
      }
      unsigned int v17 = -1;
      if (!v34) {
        goto LABEL_17;
      }
      char v37 = v49;
      if (v13 != v12) {
        char v37 = 0;
      }
      if (!v10) {
        char v37 = v13;
      }
      int v38 = v43;
      if (v37) {
        int v38 = v34;
      }
      uint64_t v43 = v38;
      char v39 = v48;
      if (v37) {
        char v39 = v37;
      }
      unsigned int v48 = v39;
      goto LABEL_12;
    }
    if ((v19 & 0x80000000) != 0)
    {
      uint64_t result = 0xFFFFFFFFLL;
LABEL_126:
      BOOL v41 = a6;
      BOOL v40 = a7;
      goto LABEL_127;
    }
    if ((v17 & 0x80000000) != 0)
    {
      uint64_t result = 1;
      goto LABEL_126;
    }
    __int16 v51 = v11;
    unsigned int v25 = v19;
    if ((v19 & 0xFFFFF800) == 0xD800)
    {
      if ((v19 & 0x400) != 0)
      {
        unsigned int v25 = v19;
        if (v15 <= v14 - 2)
        {
          int v27 = *(v14 - 2);
          unsigned int v25 = v19;
          if ((v27 & 0xFC00) == 0xD800) {
            unsigned int v25 = v19 - 56613888 + (v27 << 10);
          }
        }
      }
      else
      {
        unsigned int v25 = v19;
        if (v14 != v11)
        {
          int v26 = *v14;
          unsigned int v25 = v19;
          if ((v26 & 0xFC00) == 0xDC00) {
            unsigned int v25 = (v19 << 10) - 56613888 + v26;
          }
        }
      }
    }
    unsigned int v28 = v17;
    if ((v17 & 0xFFFFF800) == 0xD800)
    {
      if ((v17 & 0x400) != 0)
      {
        unsigned int v28 = v17;
        if (v16 <= v13 - 2)
        {
          int v30 = *(v13 - 2);
          unsigned int v28 = v17;
          if ((v30 & 0xFC00) == 0xD800) {
            unsigned int v28 = v17 - 56613888 + (v30 << 10);
          }
        }
      }
      else
      {
        unsigned int v28 = v17;
        if (v13 != v12)
        {
          int v29 = *v13;
          unsigned int v28 = v17;
          if ((v29 & 0xFC00) == 0xDC00) {
            unsigned int v28 = (v17 << 10) - 56613888 + v29;
          }
        }
      }
    }
    if (!v9)
    {
      unsigned int v31 = ucase_toFullFolding(v25, &src, a5);
      a5 = v50;
      if ((v31 & 0x80000000) == 0)
      {
        if ((v19 & 0xFFFFF800) == 0xD800)
        {
          uint64_t v35 = v51;
          if ((v19 & 0x400) != 0)
          {
            unsigned int v17 = *(v13 - 2);
            --v13;
            --v48;
          }
          else
          {
            ++v14;
          }
        }
        else
        {
          uint64_t v35 = v51;
        }
        *(void *)&long long v63 = v15;
        *((void *)&v63 + 1) = v14;
        uint64_t v42 = v14;
        v64[0] = v35;
        if (v31 > 0x1F)
        {
          if (HIWORD(v31))
          {
            v57[0] = (v31 >> 10) - 10304;
            v57[1] = v31 & 0x3FF | 0xDC00;
            int v36 = 2;
          }
          else
          {
            v57[0] = v31;
            int v36 = 1;
          }
        }
        else
        {
          int v36 = v31;
          u_memcpy(v57, src, v31);
          a5 = v50;
        }
        uint64_t v14 = v57;
        uint64_t v11 = &v57[v36];
        int v9 = 1;
        uint64_t v15 = v57;
        goto LABEL_17;
      }
    }
    if (v10) {
      break;
    }
    unsigned int v32 = ucase_toFullFolding(v28, &src, a5);
    a5 = v50;
    if ((v32 & 0x80000000) != 0) {
      break;
    }
    int v33 = v32;
    if ((v17 & 0xFFFFF800) == 0xD800)
    {
      if ((v17 & 0x400) != 0)
      {
        unsigned int v19 = *(v14 - 2);
        --v14;
        --v48;
      }
      else
      {
        ++v13;
      }
    }
    *(void *)&long long v61 = v16;
    *((void *)&v61 + 1) = v13;
    v62[0] = v12;
    int v49 = v13;
    if (v32 > 0x1F)
    {
      if (HIWORD(v32))
      {
        dest[0] = (v32 >> 10) - 10304;
        dest[1] = v32 & 0x3FF | 0xDC00;
        int v33 = 2;
      }
      else
      {
        dest[0] = v32;
        int v33 = 1;
      }
    }
    else
    {
      u_memcpy(dest, src, v32);
      a5 = v50;
    }
    uint64_t v11 = v51;
    v13 = dest;
    BOOL v12 = &dest[v33];
    unsigned int v17 = -1;
    int v10 = 1;
    uint64_t v16 = dest;
    if ((v19 & 0x80000000) != 0) {
      goto LABEL_17;
    }
LABEL_28:
    if ((v17 & 0x80000000) != 0)
    {
LABEL_35:
      while (1)
      {
        if (v13 != v12)
        {
          unsigned int v17 = *v13;
          BOOL v23 = (a5 & 0x1000) != 0 || v12 == 0;
          BOOL v24 = !v23;
          if (*v13 || v24) {
            break;
          }
        }
        if (!v10)
        {
          unsigned int v17 = -1;
          goto LABEL_47;
        }
        uint64_t v22 = (UChar **)&v62[3 * v10];
        do
        {
          uint64_t v16 = *(v22 - 5);
          --v10;
          v22 -= 3;
        }
        while (!v16);
        v13 = *(v22 - 1);
        BOOL v12 = *v22;
      }
      ++v13;
    }
  }
  if (a5 < 0 && v19 >> 11 >= 0x1B && v17 >> 11 >= 0x1B)
  {
    if ((v19 >> 10 > 0x36 || v14 == v51 || (*v14 & 0xFC00) != 0xDC00)
      && (v19 >> 10 != 55 || v15 == v14 - 1 || (*(v14 - 2) & 0xFC00) != 0xD800))
    {
      v19 -= 10240;
    }
    if ((v17 >> 10 > 0x36 || v13 == v12 || (*v13 & 0xFC00) != 0xDC00)
      && (v17 >> 10 != 55 || v16 == v13 - 1 || (*(v13 - 2) & 0xFC00) != 0xD800))
    {
      v17 -= 10240;
    }
  }
  BOOL v41 = a6;
  BOOL v40 = a7;
  uint64_t result = v19 - v17;
LABEL_127:
  if (v41)
  {
    *BOOL v41 = (unint64_t)((char *)v43 - (char *)a1) >> 1;
    *BOOL v40 = (unint64_t)((char *)v48 - (char *)a3) >> 1;
  }
  return result;
}

int32_t u_strCaseCompare(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)
{
  if (pErrorCode && *(int *)pErrorCode <= 0)
  {
    if (s1 && length1 >= -1 && s2 && length2 > -2) {
      return u_caseInsensitivePrefixMatch_0((UChar *)s1, length1, (UChar *)s2, length2, options, 0, 0, (int *)pErrorCode);
    }
    *pErrorCode = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

int32_t u_strcasecmp(const UChar *s1, const UChar *s2, uint32_t options)
{
  int v4 = 0;
  return u_caseInsensitivePrefixMatch_0((UChar *)s1, -1, (UChar *)s2, -1, options, 0, 0, &v4);
}

int32_t u_memcasecmp(const UChar *s1, const UChar *s2, int32_t length, uint32_t options)
{
  int v5 = 0;
  return u_caseInsensitivePrefixMatch_0((UChar *)s1, length, (UChar *)s2, length, options, 0, 0, &v5);
}

int32_t u_strncasecmp(const UChar *s1, const UChar *s2, int32_t n, uint32_t options)
{
  int v5 = 0;
  return u_caseInsensitivePrefixMatch_0((UChar *)s1, n, (UChar *)s2, n, options | 0x1000, 0, 0, &v5);
}

uint64_t sub_18C8B4FD8(unsigned __int8 *Default)
{
  if (!Default) {
    Default = (unsigned __int8 *)uloc_getDefault(0);
  }
  if (!*Default) {
    return 1;
  }

  return sub_18C84BE60(Default);
}

int32_t u_strToLower(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  uint64_t v7 = *(void *)&srcLength;
  uint64_t v9 = *(void *)&destCapacity;
  uint64_t v11 = sub_18C8B4FD8((unsigned __int8 *)locale);
  return sub_18C8B45DC(v11, 0, 0, dest, v9, (UChar *)src, v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, UChar *, uint64_t, UChar *, uint64_t, void, int *))sub_18C8B3F34, (int *)pErrorCode);
}

int32_t u_strToUpper(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  uint64_t v7 = *(void *)&srcLength;
  uint64_t v9 = *(void *)&destCapacity;
  uint64_t v11 = sub_18C8B4FD8((unsigned __int8 *)locale);
  return sub_18C8B45DC(v11, 0, 0, dest, v9, (UChar *)src, v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, UChar *, uint64_t, UChar *, uint64_t, void, int *))sub_18C8B3FD4, (int *)pErrorCode);
}

uint64_t icu::CaseMap::toLower(unsigned __int8 *a1, uint64_t a2, UChar *a3, uint64_t a4, unint64_t a5, uint64_t a6, icu::Edits *a7, int *a8)
{
  uint64_t v15 = sub_18C8B4FD8(a1);
  return sub_18C8B447C(v15, a2, 0, a5, a6, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, UChar *, uint64_t, icu::Edits *, int *))sub_18C8B3F34, a7, a8);
}

uint64_t icu::CaseMap::toUpper(unsigned __int8 *a1, uint64_t a2, UChar *a3, uint64_t a4, unint64_t a5, uint64_t a6, icu::Edits *a7, int *a8)
{
  uint64_t v15 = sub_18C8B4FD8(a1);
  return sub_18C8B447C(v15, a2, 0, a5, a6, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, UChar *, uint64_t, icu::Edits *, int *))sub_18C8B3FD4, a7, a8);
}

uint64_t icu::StringEnumeration::StringEnumeration(uint64_t this)
{
  *(void *)this = &unk_1EDA48300;
  *(void *)(this + 8) = &unk_1EDA47700;
  *(_WORD *)(this + 16) = 2;
  *(void *)(this + 104) = this + 72;
  *(_DWORD *)(this + 112) = 32;
  return this;
}

void icu::StringEnumeration::~StringEnumeration(icu::StringEnumeration *this)
{
  *(void *)this = &unk_1EDA48300;
  v2 = (char *)*((void *)this + 13);
  if (v2) {
    BOOL v3 = v2 == (char *)this + 72;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    uprv_free(v2);
  }
  icu::UnicodeString::~UnicodeString((icu::StringEnumeration *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

uint64_t icu::StringEnumeration::clone(icu::StringEnumeration *this)
{
  return 0;
}

UChar *icu::StringEnumeration::next(UChar **this, int *a2, UErrorCode *a3)
{
  unsigned int v6 = (UChar **)(*((uint64_t (**)(UChar **, UErrorCode *))*this + 7))(this, a3);
  if (*(int *)a3 > 0 || v6 == 0) {
    return 0;
  }
  icu::UnicodeString::operator=(this + 1, v6);
  unsigned int v8 = *((unsigned __int16 *)this + 8);
  int v9 = (v8 & 0x8000) != 0 ? *((_DWORD *)this + 5) : v8 >> 5;
  icu::StringEnumeration::ensureCharsCapacity((int *)this, v9 + 1, a3);
  if (*(int *)a3 > 0) {
    return 0;
  }
  if (a2)
  {
    if ((__int16)this[2] < 0) {
      int v11 = *((_DWORD *)this + 5);
    }
    else {
      int v11 = *((unsigned __int16 *)this + 8) >> 5;
    }
    *a2 = v11;
  }
  icu::UnicodeString::extract((uint64_t)(this + 1), 0, 0x7FFFFFFFLL, (char *)this[13], *((_DWORD *)this + 28));
  return this[13];
}

int *icu::StringEnumeration::ensureCharsCapacity(int *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    BOOL v3 = this;
    int v4 = this[28];
    if (v4 < a2)
    {
      if (v4 >= 0) {
        int v6 = this[28];
      }
      else {
        int v6 = v4 + 1;
      }
      int v7 = v4 + (v6 >> 1);
      if (v7 <= a2) {
        int v8 = a2;
      }
      else {
        int v8 = v7;
      }
      int v9 = (char *)*((void *)this + 13);
      if (v9 != (char *)(v3 + 18)) {
        uprv_free(v9);
      }
      this = (int *)uprv_malloc(v8);
      *((void *)v3 + 13) = this;
      if (this)
      {
        v3[28] = v8;
      }
      else
      {
        *((void *)v3 + 13) = v3 + 18;
        v3[28] = 32;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return this;
}

uint64_t icu::StringEnumeration::unext(UChar **this, int *a2, UErrorCode *a3)
{
  int v6 = (UChar **)(*((uint64_t (**)(UChar **, UErrorCode *))*this + 7))(this, a3);
  if (*(int *)a3 > 0 || v6 == 0) {
    return 0;
  }
  icu::UnicodeString::operator=(this + 1, v6);
  if (a2)
  {
    if ((__int16)this[2] < 0) {
      int v9 = *((_DWORD *)this + 5);
    }
    else {
      int v9 = *((unsigned __int16 *)this + 8) >> 5;
    }
    *a2 = v9;
  }

  return icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(this + 1));
}

char *icu::StringEnumeration::snext(icu::StringEnumeration *this, UErrorCode *a2)
{
  int v6 = 0;
  int v4 = (const char *)(*(uint64_t (**)(icu::StringEnumeration *, int *, UErrorCode *))(*(void *)this + 40))(this, &v6, a2);
  return icu::StringEnumeration::setChars(this, v4, v6, a2);
}

char *icu::StringEnumeration::setChars(icu::StringEnumeration *this, const char *__s, int32_t a3, UErrorCode *a4)
{
  int v4 = 0;
  if (__s && *(int *)a4 <= 0)
  {
    int32_t v6 = a3;
    if (a3 < 0) {
      int32_t v6 = strlen(__s);
    }
    int v4 = (char *)this + 8;
    Buffer = (UChar *)icu::UnicodeString::getBuffer((icu::StringEnumeration *)((char *)this + 8), v6 + 1);
    if (Buffer)
    {
      int v10 = Buffer;
      u_charsToUChars(__s, Buffer, v6);
      v10[v6] = 0;
      icu::UnicodeString::releaseBuffer((uint64_t)v4, v6);
    }
    else
    {
      int v4 = 0;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return v4;
}

BOOL icu::StringEnumeration::operator==(void *a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v2 = *(void *)(*a1 - 8);
  uint64_t v3 = *(void *)(*a2 - 8);

  return sub_18C828FD8(v2, v3);
}

uint64_t icu::StringEnumeration::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1) ^ 1;
}

uint64_t *icu::UStringEnumeration::fromUEnumeration(void **a1, _DWORD *a2)
{
  uint64_t v3 = (uint64_t *)*a2;
  if ((int)v3 >= 1) {
    goto LABEL_2;
  }
  uint64_t result = icu::UMemory::operator new(v3, (icu::UMemory *)0x80, (unint64_t)a2);
  if (!result)
  {
    *a2 = 7;
LABEL_2:
    uenum_close(a1);
    return 0;
  }
  result[1] = (uint64_t)&unk_1EDA47700;
  *((_WORD *)result + 8) = 2;
  result[13] = (uint64_t)(result + 9);
  *((_DWORD *)result + 28) = 32;
  *uint64_t result = (uint64_t)&unk_1EDA48368;
  result[15] = (uint64_t)a1;
  return result;
}

uint64_t icu::UStringEnumeration::UStringEnumeration(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = &unk_1EDA47700;
  *(_WORD *)(result + 16) = 2;
  *(void *)(result + 104) = result + 72;
  *(_DWORD *)(result + 112) = 32;
  *(void *)uint64_t result = &unk_1EDA48368;
  *(void *)(result + 120) = a2;
  return result;
}

{
  *(void *)(result + 8) = &unk_1EDA47700;
  *(_WORD *)(result + 16) = 2;
  *(void *)(result + 104) = result + 72;
  *(_DWORD *)(result + 112) = 32;
  *(void *)uint64_t result = &unk_1EDA48368;
  *(void *)(result + 120) = a2;
  return result;
}

void icu::UStringEnumeration::~UStringEnumeration(void ***this)
{
  *this = (void **)&unk_1EDA48368;
  uenum_close(this[15]);

  icu::StringEnumeration::~StringEnumeration((icu::StringEnumeration *)this);
}

{
  uint64_t vars8;

  *this = (void **)&unk_1EDA48368;
  uenum_close(this[15]);

  icu::StringEnumeration::~StringEnumeration((icu::StringEnumeration *)this);
}

{
  void *v2;
  uint64_t vars8;

  *this = (void **)&unk_1EDA48368;
  uenum_close(this[15]);
  icu::StringEnumeration::~StringEnumeration((icu::StringEnumeration *)this);

  icu::UMemory::operator delete(v2);
}

uint64_t icu::UStringEnumeration::count(icu::UStringEnumeration *this, UErrorCode *a2)
{
  return uenum_count(*((void *)this + 15), (int *)a2);
}

uint64_t icu::UStringEnumeration::next(icu::UStringEnumeration *this, int *a2, UErrorCode *a3)
{
  return uenum_next(*((void *)this + 15), (uint64_t)a2, (int *)a3);
}

uint64_t icu::UStringEnumeration::snext(icu::UStringEnumeration *this, UErrorCode *a2)
{
  unsigned int v10 = 0;
  uint64_t v4 = uenum_unext(*((void *)this + 15), (uint64_t)&v10, (int *)a2);
  if (v4) {
    BOOL v5 = *a2 <= U_ZERO_ERROR;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v7 = v4;
  uint64_t v8 = v10;
  icu::UnicodeString::unBogus((uint64_t)this + 8);
  if (*((__int16 *)this + 8) < 0) {
    uint64_t v9 = *((unsigned int *)this + 5);
  }
  else {
    uint64_t v9 = *((unsigned __int16 *)this + 8) >> 5;
  }
  return icu::UnicodeString::doReplace((uint64_t)this + 8, 0, v9, v7, 0, v8);
}

uint64_t icu::UStringEnumeration::reset(icu::UStringEnumeration *this, UErrorCode *a2)
{
  return uenum_reset(*((void *)this + 15), (int *)a2);
}

void *icu::UStringEnumeration::getStaticClassID(icu::UStringEnumeration *this)
{
  return &unk_1E9191FA9;
}

void *icu::UStringEnumeration::getDynamicClassID(icu::UStringEnumeration *this)
{
  return &unk_1E9191FA9;
}

_OWORD *uenum_openFromStringEnumeration(uint64_t a1, int *a2)
{
  if (a1 && *a2 <= 0)
  {
    uint64_t result = uprv_malloc(0x38uLL);
    if (result)
    {
      long long v5 = *(_OWORD *)&off_1EDA483D0;
      *uint64_t result = xmmword_1EDA483C0;
      result[1] = v5;
      result[2] = xmmword_1EDA483E0;
      *((void *)result + 6) = off_1EDA483F0;
      *((void *)result + 1) = a1;
      return result;
    }
    *a2 = 7;
  }
  else if (!a1)
  {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  return 0;
}

_OWORD *uenum_openCharStringsEnumeration(uint64_t a1, int a2, int *a3)
{
  uint64_t result = 0;
  if ((a2 & 0x80000000) == 0 && *a3 <= 0)
  {
    if (a1 || !a2)
    {
      uint64_t result = uprv_malloc(0x40uLL);
      if (result)
      {
        long long v7 = *(_OWORD *)&off_1EDA48408;
        *uint64_t result = xmmword_1EDA483F8;
        result[1] = v7;
        result[2] = xmmword_1EDA48418;
        *((void *)result + 6) = off_1EDA48428;
        *((void *)result + 1) = a1;
        *((_DWORD *)result + 14) = 0;
        *((_DWORD *)result + 15) = a2;
      }
      else
      {
        *a3 = 7;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_OWORD *uenum_openUCharStringsEnumeration(uint64_t a1, int a2, int *a3)
{
  uint64_t result = 0;
  if ((a2 & 0x80000000) == 0 && *a3 <= 0)
  {
    if (a1 || !a2)
    {
      uint64_t result = uprv_malloc(0x40uLL);
      if (result)
      {
        long long v7 = *(_OWORD *)&off_1EDA48440;
        *uint64_t result = xmmword_1EDA48430;
        result[1] = v7;
        result[2] = xmmword_1EDA48450;
        *((void *)result + 6) = off_1EDA48460;
        *((void *)result + 1) = a1;
        *((_DWORD *)result + 14) = 0;
        *((_DWORD *)result + 15) = a2;
      }
      else
      {
        *a3 = 7;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_18C8B5C10(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  uprv_free(a1);
}

uint64_t sub_18C8B5C70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_18C8B5C98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

uint64_t sub_18C8B5CC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t sub_18C8B5CE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))();
}

uint64_t sub_18C8B5D14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_18C8B5D1C(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(int *)(a1 + 56);
  if ((int)v2 >= *(_DWORD *)(a1 + 60)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)(a1 + 56) = v2 + 1;
  uint64_t v4 = *(void *)(v3 + 8 * v2);
  if (a2) {
    *a2 = strlen(*(const char **)(v3 + 8 * v2));
  }
  return v4;
}

uint64_t sub_18C8B5D78(uint64_t result)
{
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_18C8B5D80(uint64_t a1, int32_t *a2)
{
  uint64_t v2 = *(int *)(a1 + 56);
  if ((int)v2 >= *(_DWORD *)(a1 + 60)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)(a1 + 56) = v2 + 1;
  uint64_t v4 = *(void *)(v3 + 8 * v2);
  if (a2) {
    *a2 = u_strlen(*(const UChar **)(v3 + 8 * v2));
  }
  return v4;
}

uint64_t uprv_itou(__int16 *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  long long v7 = a1;
  uint64_t v8 = 0;
  do
  {
    if ((int)(a3 % a4) >= 10) {
      __int16 v9 = 55;
    }
    else {
      __int16 v9 = 48;
    }
    ++v8;
    *a1++ = v9 + a3 % a4;
    if (a3 < a4) {
      break;
    }
    a3 /= a4;
  }
  while (v8 < a2);
  if ((int)v8 >= (int)a5)
  {
    uint64_t result = v8;
  }
  else
  {
    memset_pattern16(a1, a00000000aBEF, 2 * (~v8 + a5) + 2);
    uint64_t result = a5;
  }
  if ((int)result < a2) {
    v7[result] = 0;
  }
  if (result >= 2)
  {
    if ((int)a5 <= (int)v8) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = a5;
    }
    BOOL v12 = &v7[v11 - 1];
    unint64_t v13 = v11 >> 1;
    do
    {
      __int16 v14 = *v12;
      *v12-- = *v7;
      *v7++ = v14;
      --v13;
    }
    while (v13);
  }
  return result;
}

UChar *__cdecl u_strFindFirst(const UChar *s, int32_t length, const UChar *substring, int32_t subLength)
{
  if (!substring || subLength < -1) {
    return (UChar *)s;
  }
  int32_t v6 = 0;
  if (!s || length < -1) {
    return v6;
  }
  if ((subLength & length) < 0 != __OFSUB__(length, -1))
  {
    unsigned int v11 = *substring;
    if (*substring)
    {
      if (v11 >> 11 == 27 || substring[1])
      {
        UChar v20 = *s;
        if (!*s) {
          return 0;
        }
        BOOL v21 = s;
        while (1)
        {
          int32_t v6 = (UChar *)v21++;
          if (v11 == v20)
          {
            uint64_t v22 = v21;
            if (substring[1])
            {
              uint64_t v23 = 0;
              int v24 = substring[1];
              do
              {
                if (!v6[v23 + 1]) {
                  return 0;
                }
                if (v6[v23 + 1] != v24) {
                  goto LABEL_56;
                }
                int v24 = substring[v23 + 2];
                ++v23;
              }
              while (v24);
              uint64_t v22 = &v6[v23 + 1];
            }
            if ((v6 == s || (v11 & 0xFC00) != 0xDC00 || (*(v6 - 1) & 0xFC00) != 0xD800)
              && ((*(v22 - 1) & 0xFC00) != 0xD800 || (*v22 & 0xFC00) != 0xDC00))
            {
              return v6;
            }
          }
LABEL_56:
          int32_t v6 = 0;
          UChar v20 = *v21;
          if (!*v21) {
            return v6;
          }
        }
      }
LABEL_19:
      return u_strchr(s, v11);
    }
    return (UChar *)s;
  }
  if (subLength < 0)
  {
    subLength = -1;
    uint64_t v8 = substring;
    do
    {
      int v9 = *v8++;
      ++subLength;
    }
    while (v9);
  }
  if (!subLength) {
    return (UChar *)s;
  }
  int v10 = *substring;
  if (subLength == 1 && (v10 & 0xF800) != 0xD800)
  {
    LOWORD(v11) = *substring;
    if ((length & 0x80000000) == 0)
    {
      return u_memchr(s, v11, length);
    }
    goto LABEL_19;
  }
  uint64_t v13 = subLength - 1;
  if ((length & 0x80000000) == 0)
  {
    if (subLength <= length)
    {
      __int16 v14 = &s[length];
      uint64_t v15 = &v14[-v13];
      if (v15 != s)
      {
        uint64_t v16 = s;
        while (1)
        {
          int32_t v6 = (UChar *)v16;
          int v17 = *v16++;
          if (v17 == v10)
          {
            uint64_t v18 = v16;
            if (subLength == 1)
            {
LABEL_34:
              if ((v6 == s || (v10 & 0xFC00) != 0xDC00 || (*(v6 - 1) & 0xFC00) != 0xD800)
                && (v18 == v14 || (*(v18 - 1) & 0xFC00) != 0xD800 || (*v18 & 0xFC00) != 0xDC00))
              {
                return v6;
              }
            }
            else
            {
              unint64_t v19 = 1;
              while (v6[v19] == substring[v19])
              {
                if (-2 * v13 + ++v19 * 2 == 2)
                {
                  uint64_t v18 = &v6[v19];
                  goto LABEL_34;
                }
              }
            }
          }
          int32_t v6 = 0;
          if (v16 == v15) {
            return v6;
          }
        }
      }
    }
    return 0;
  }
  UChar v25 = *s;
  if (!*s) {
    return 0;
  }
  int v26 = s;
  while (1)
  {
    int32_t v6 = (UChar *)v26++;
    if (v10 == v25) {
      break;
    }
LABEL_68:
    int32_t v6 = 0;
    UChar v25 = *v26;
    if (!*v26) {
      return v6;
    }
  }
  int v27 = (UChar *)v26;
  if (!v13)
  {
LABEL_67:
    if (sub_18C8B623C(s, v6, v27, 0)) {
      return v6;
    }
    goto LABEL_68;
  }
  unint64_t v28 = 1;
  while (v6[v28])
  {
    if (v6[v28] != substring[v28]) {
      goto LABEL_68;
    }
    if (-2 * v13 + ++v28 * 2 == 2)
    {
      int v27 = &v6[v28];
      goto LABEL_67;
    }
  }
  return 0;
}

UChar *__cdecl u_strchr(UChar *s, UChar c)
{
  UChar substring = c;
  if ((c & 0xF800) == 0xD800) {
    return u_strFindFirst(s, -1, &substring, 1);
  }
  for (int i = *s; i != c; int i = v3)
  {
    if (!i) {
      return 0;
    }
    int v3 = s[1];
    ++s;
  }
  return s;
}

BOOL sub_18C8B623C(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4)
{
  return (a1 == a2 || (*a2 & 0xFC00) != 0xDC00 || (*(a2 - 1) & 0xFC00) != 0xD800)
      && (a3 == a4 || (*(a3 - 1) & 0xFC00) != 0xD800 || (*a3 & 0xFC00) != 0xDC00);
}

int32_t u_strlen(const UChar *s)
{
  int32_t result = -1;
  do
  {
    int v3 = *s++;
    ++result;
  }
  while (v3);
  return result;
}

UChar *__cdecl u_memchr(UChar *s, UChar c, int32_t count)
{
  UChar substring = c;
  if (count < 1) {
    return 0;
  }
  if ((c & 0xF800) == 0xD800) {
    return u_strFindFirst(s, count, &substring, 1);
  }
  uint64_t v3 = 2 * count;
  while (*s != c)
  {
    ++s;
    v3 -= 2;
    if (!v3) {
      return 0;
    }
  }
  return s;
}

UChar *__cdecl u_strstr(const UChar *s, const UChar *substring)
{
  return u_strFindFirst(s, -1, substring, -1);
}

UChar *__cdecl u_strchr32(UChar *s, UChar32 c)
{
  if (!HIWORD(c)) {
    return u_strchr(s, c);
  }
  if (HIWORD(c) > 0x10u) {
    return 0;
  }
  int v2 = *s;
  if (!*s) {
    return 0;
  }
  uint64_t v3 = s;
  while (1)
  {
    int v5 = v3[1];
    ++v3;
    int v4 = v5;
    if (v2 == (unsigned __int16)(c >> 10) + 55232 && (c & 0x3FF | 0xDC00) == v4) {
      break;
    }
    int v2 = v4;
    s = v3;
    if (!v4) {
      return 0;
    }
  }
  return s;
}

UChar *__cdecl u_memchr32(const UChar *s, UChar32 c, int32_t count)
{
  if (!HIWORD(c)) {
    return u_memchr(s, c, count);
  }
  int v4 = 0;
  if (HIWORD(c) <= 0x10u && count >= 2)
  {
    uint64_t v5 = 2 * count - 2;
    while (*s != (unsigned __int16)(c >> 10) + 55232 || (c & 0x3FF | 0xDC00) != s[1])
    {
      ++s;
      v5 -= 2;
      if (!v5) {
        return 0;
      }
    }
    return (UChar *)s;
  }
  return v4;
}

UChar *__cdecl u_strFindLast(const UChar *s, int32_t length, const UChar *substring, int32_t subLength)
{
  if (!substring || subLength < -1) {
    return (UChar *)s;
  }
  int v4 = 0;
  if (!s) {
    return v4;
  }
  int32_t v5 = length;
  if (length < -1) {
    return v4;
  }
  if (subLength < 0)
  {
    subLength = -1;
    int32_t v6 = substring;
    do
    {
      int v7 = *v6++;
      ++subLength;
    }
    while (v7);
  }
  if (!subLength) {
    return (UChar *)s;
  }
  uint64_t v8 = &substring[subLength];
  int v11 = *(v8 - 1);
  int v10 = v8 - 1;
  int v9 = v11;
  uint64_t v12 = subLength - 1;
  if (subLength != 1 || (v9 & 0xF800) == 0xD800)
  {
    if (v5 < 0)
    {
      int32_t v5 = -1;
      __int16 v14 = s;
      do
      {
        int v15 = *v14++;
        ++v5;
      }
      while (v15);
    }
    if (v5 >= subLength && v12 != v5)
    {
      uint64_t v16 = &s[v5];
      int v17 = &s[v12];
      uint64_t v18 = &substring[subLength - 2];
      unint64_t v19 = (UChar *)v16;
      uint64_t v20 = 2 - 2 * subLength;
      while (1)
      {
        BOOL v21 = v19;
        int v22 = *--v19;
        if (v22 == v9)
        {
          LOWORD(v23) = v9;
          int v4 = v19;
          if (v10 == substring)
          {
LABEL_29:
            if ((v4 == s || (v23 & 0xFC00) != 0xDC00 || (*(v4 - 1) & 0xFC00) != 0xD800)
              && (v21 == v16 || (v9 & 0xFC00) != 0xD800 || (*v21 & 0xFC00) != 0xDC00))
            {
              return v4;
            }
          }
          else
          {
            unint64_t v24 = 0;
            while (1)
            {
              int v23 = v21[v24 / 2 - 2];
              if (v23 != v18[v24 / 2]) {
                break;
              }
              v24 -= 2;
              if (v20 == v24)
              {
                int v4 = (UChar *)&v21[v24 / 2 - 1];
                goto LABEL_29;
              }
            }
          }
        }
        int v4 = 0;
        if (v17 == v19) {
          return v4;
        }
      }
    }
    return 0;
  }
  if (v5 < 0) {
    return u_strrchr(s, v9);
  }
  else {
    return u_memrchr(s, v9, v5);
  }
}

UChar *__cdecl u_strrchr(const UChar *s, UChar c)
{
  UChar substring = c;
  if ((c & 0xF800) == 0xD800) {
    return u_strFindLast(s, -1, &substring, 1);
  }
  int v2 = 0;
  uint64_t v3 = s;
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if (v5 == c) {
      int v2 = (UChar *)s;
    }
    s = v3;
  }
  while (v4);
  return v2;
}

UChar *__cdecl u_memrchr(const UChar *s, UChar c, int32_t count)
{
  UChar substring = c;
  if (count < 1) {
    return 0;
  }
  if ((c & 0xF800) == 0xD800) {
    return u_strFindLast(s, count, &substring, 1);
  }
  uint64_t v4 = count;
  while (s[v4 - 1] != c)
  {
    if (!(--v4 * 2)) {
      return 0;
    }
  }
  return (UChar *)&s[v4 - 1];
}

UChar *__cdecl u_strrstr(const UChar *s, const UChar *substring)
{
  return u_strFindLast(s, -1, substring, -1);
}

UChar *__cdecl u_strrchr32(const UChar *s, UChar32 c)
{
  if (!HIWORD(c)) {
    return u_strrchr(s, c);
  }
  if (HIWORD(c) > 0x10u) {
    return 0;
  }
  int v3 = *s;
  if (!*s) {
    return 0;
  }
  uint64_t v4 = 0;
  int v5 = s;
  do
  {
    int v7 = v5[1];
    ++v5;
    int v6 = v7;
    if ((c & 0x3FF | 0xDC00) == v7 && v3 == (unsigned __int16)(c >> 10) + 55232) {
      uint64_t v4 = (UChar *)s;
    }
    int v3 = v6;
    s = v5;
  }
  while (v6);
  return v4;
}

UChar *__cdecl u_memrchr32(const UChar *s, UChar32 c, int32_t count)
{
  if (!HIWORD(c)) {
    return u_memrchr(s, c, count);
  }
  uint64_t v4 = 0;
  if (HIWORD(c) <= 0x10u && count >= 2)
  {
    uint64_t v5 = count;
    while ((c & 0x3FF | 0xDC00) != s[v5 - 1] || s[v5 - 2] != (unsigned __int16)(c >> 10) + 55232)
    {
      if (--v5 == 1) {
        return 0;
      }
    }
    return (UChar *)&s[v5 - 2];
  }
  return v4;
}

UChar *__cdecl u_strpbrk(const UChar *string, const UChar *matchSet)
{
  int v3 = sub_18C8B679C(string, (uint64_t)matchSet, 1);
  if (v3 < 0) {
    return 0;
  }
  else {
    return (UChar *)&string[v3];
  }
}

uint64_t sub_18C8B679C(_WORD *a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  do
  {
    int v4 = *(unsigned __int16 *)(a2 + 2 * v3++);
    if (v4) {
      BOOL v5 = (v4 & 0xF800) == 55296;
    }
    else {
      BOOL v5 = 1;
    }
  }
  while (!v5);
  uint64_t v6 = v3;
  while (*(unsigned __int16 *)(a2 - 2 + 2 * v6++))
    ;
  unsigned int v8 = (unsigned __int16)*a1;
  if (*a1)
  {
    uint64_t v9 = 0;
    int v10 = v3 - 1;
    uint64_t v11 = v6 - 2;
    while (1)
    {
      uint64_t v12 = (v9 + 1);
      if ((v8 & 0xF800) == 0xD800)
      {
        if ((v8 & 0x400) == 0)
        {
          int v13 = (unsigned __int16)a1[(int)v12];
          if ((v13 & 0xFC00) == 0xDC00)
          {
            uint64_t v12 = (v9 + 2);
            unsigned int v8 = (v8 << 10) - 56613888 + v13;
          }
        }
        int v14 = v10;
        if (!a3)
        {
          while (v14 < (int)v11)
          {
            uint64_t v22 = v14 + 1;
            int v23 = *(unsigned __int16 *)(a2 + 2 * v14);
            if ((v23 & 0xFC00) == 0xD800 && v14 + 3 != v6)
            {
              int v25 = *(unsigned __int16 *)(a2 + 2 * v22);
              BOOL v26 = (v25 & 0xFC00) == 56320;
              int v27 = v14 + 2;
              int v28 = (v23 << 10) - 56613888 + v25;
              if (v26) {
                LODWORD(v22) = v27;
              }
              if (v26) {
                int v23 = v28;
              }
            }
            int v14 = v22;
            if (v8 == v23) {
              goto LABEL_47;
            }
          }
LABEL_56:
          if (v8 >= 0x10000) {
            int v31 = -2;
          }
          else {
            int v31 = -1;
          }
          return (v31 + v12);
        }
        while (v14 < (int)v11)
        {
          uint64_t v15 = v14 + 1;
          int v16 = *(unsigned __int16 *)(a2 + 2 * v14);
          if ((v16 & 0xFC00) == 0xD800 && v14 + 3 != v6)
          {
            int v18 = *(unsigned __int16 *)(a2 + 2 * v15);
            BOOL v19 = (v18 & 0xFC00) == 56320;
            int v20 = v14 + 2;
            int v21 = (v16 << 10) - 56613888 + v18;
            if (v19) {
              LODWORD(v15) = v20;
            }
            if (v19) {
              int v16 = v21;
            }
          }
          int v14 = v15;
          if (v8 == v16) {
            goto LABEL_56;
          }
        }
      }
      else if (a3)
      {
        if (v6 != 2)
        {
          uint64_t v29 = 0;
          while (v8 != *(unsigned __int16 *)(a2 + 2 * v29))
          {
            if (v11 == ++v29) {
              goto LABEL_47;
            }
          }
          return v9;
        }
      }
      else
      {
        if (v6 == 2) {
          return v9;
        }
        uint64_t v30 = 0;
        while (v8 != *(unsigned __int16 *)(a2 + 2 * v30))
        {
          if (v11 == ++v30) {
            return v9;
          }
        }
      }
LABEL_47:
      unsigned int v8 = (unsigned __int16)a1[(int)v12];
      uint64_t v9 = v12;
      if (!a1[(int)v12]) {
        return ~v12;
      }
    }
  }
  LODWORD(v12) = 0;
  return ~v12;
}

int32_t u_strcspn(const UChar *string, const UChar *matchSet)
{
  int v2 = sub_18C8B679C(string, (uint64_t)matchSet, 1);
  return v2 ^ (v2 >> 31);
}

int32_t u_strspn(const UChar *string, const UChar *matchSet)
{
  int v2 = sub_18C8B679C(string, (uint64_t)matchSet, 0);
  return v2 ^ (v2 >> 31);
}

UChar *__cdecl u_strtok_r(UChar *src, const UChar *delim, UChar **saveState)
{
  if (src)
  {
    BOOL v5 = src;
    *saveState = src;
  }
  else
  {
    BOOL v5 = *saveState;
    if (!*saveState) {
      return v5;
    }
  }
  int v6 = sub_18C8B679C(v5, (uint64_t)delim, 0);
  v5 += v6 ^ (v6 >> 31);
  if (*v5)
  {
    int v7 = sub_18C8B679C(v5, (uint64_t)delim, 1);
    if (v7 < 0)
    {
      uint64_t v9 = 0;
    }
    else
    {
      unsigned int v8 = &v5[v7];
      *unsigned int v8 = 0;
      uint64_t v9 = v8 + 1;
    }
  }
  else
  {
    uint64_t v9 = 0;
    BOOL v5 = 0;
  }
  *saveState = v9;
  return v5;
}

UChar *__cdecl u_strcat(UChar *dst, const UChar *src)
{
  int v2 = dst - 1;
  do
  {
    int v3 = v2[1];
    ++v2;
  }
  while (v3);
  uint64_t v4 = 0;
  do
  {
    int v5 = src[v4];
    v2[v4++] = v5;
  }
  while (v5);
  return dst;
}

UChar *__cdecl u_strncat(UChar *dst, const UChar *src, int32_t n)
{
  if (n >= 1)
  {
    int v3 = dst;
    do
      uint64_t v4 = v3;
    while (*v3++);
    int v6 = *src;
    *uint64_t v4 = v6;
    if (v6)
    {
      uint64_t v7 = 0;
      while (n - 1 != v7)
      {
        int v8 = src[v7 + 1];
        v3[v7++] = v8;
        if (!v8) {
          return dst;
        }
      }
      v3[v7] = 0;
    }
  }
  return dst;
}

int32_t u_strcmp(const UChar *s1, const UChar *s2)
{
  do
  {
    int v3 = *s1++;
    int v2 = v3;
    int v5 = *s2++;
    int v4 = v5;
    if (v2) {
      BOOL v6 = v2 == v4;
    }
    else {
      BOOL v6 = 0;
    }
  }
  while (v6);
  return v2 - v4;
}

uint64_t sub_18C8B6AC8(unsigned __int16 *a1, int a2, unsigned __int16 *a3, int a4, int a5, int a6)
{
  if ((a4 & a2) < 0 != v6)
  {
    if (a1 != a3)
    {
      unsigned int v11 = *a1;
      unsigned int v12 = *a3;
      if (v11 != v12)
      {
        uint64_t v7 = 0;
        int v16 = 0;
        int i = a3;
        uint64_t v9 = a1;
        if (!a6) {
          return (unsigned __int16)v11 - (unsigned __int16)v12;
        }
LABEL_44:
        if (v11 >> 11 >= 0x1B && v12 >> 11 >= 0x1B)
        {
          int v25 = v9 + 1;
          BOOL v26 = v11 >> 10 > 0x36 || v25 == v7;
          if ((v26 || (*v25 & 0xFC00) != 0xDC00)
            && (v9 == a1 || (v11 & 0xFC00) != 0xDC00 || (*(v9 - 1) & 0xFC00) != 0xD800))
          {
            LOWORD(v11) = v11 - 10240;
          }
          if ((v12 >> 10 > 0x36 || i + 1 == v16 || (i[1] & 0xFC00) != 0xDC00)
            && (v12 >> 10 != 55 || i == a3 || (*(i - 1) & 0xFC00) != 0xD800))
          {
            LOWORD(v12) = v12 - 10240;
          }
        }
        return (unsigned __int16)v11 - (unsigned __int16)v12;
      }
      uint64_t v9 = a1;
      int i = a3;
      while ((_WORD)v11)
      {
        unsigned int v14 = v9[1];
        ++v9;
        unsigned int v11 = v14;
        unsigned int v15 = i[1];
        ++i;
        unsigned int v12 = v15;
        if (v11 != v15)
        {
          uint64_t v7 = 0;
          int v16 = 0;
          if (a6) {
            goto LABEL_44;
          }
          return (unsigned __int16)v11 - (unsigned __int16)v12;
        }
      }
    }
    return 0;
  }
  if (a5)
  {
    if (a1 != a3 && a2)
    {
      uint64_t v7 = &a1[a2];
      uint64_t v8 = 2 * a2 - 2;
      uint64_t v9 = a1;
      int i = a3;
      while (1)
      {
        unsigned int v11 = *v9;
        unsigned int v12 = *i;
        if (v11 != v12) {
          break;
        }
        ++v9;
        ++i;
        if (v11) {
          BOOL v13 = v8 == 0;
        }
        else {
          BOOL v13 = 1;
        }
        v8 -= 2;
        if (v13) {
          return 0;
        }
      }
      int v16 = &a3[a2];
      if (!a6) {
        return (unsigned __int16)v11 - (unsigned __int16)v12;
      }
      goto LABEL_44;
    }
    return 0;
  }
  if (a2 < 0)
  {
    a2 = -1;
    int v18 = a1;
    do
    {
      int v19 = *v18++;
      ++a2;
    }
    while (v19);
  }
  if (a4 < 0)
  {
    a4 = -1;
    int v20 = a3;
    do
    {
      int v21 = *v20++;
      ++a4;
    }
    while (v21);
  }
  if (a2 >= a4) {
    int v22 = a4;
  }
  else {
    int v22 = a2;
  }
  if (a2 < a4) {
    uint64_t v17 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v17 = a2 != a4;
  }
  if (a1 != a3 && v22)
  {
    uint64_t v23 = 2 * v22;
    uint64_t v9 = a1;
    for (int i = a3; ; ++i)
    {
      unsigned int v11 = *v9;
      unsigned int v12 = *i;
      if (v11 != v12) {
        break;
      }
      ++v9;
      v23 -= 2;
      if (!v23) {
        return v17;
      }
    }
    uint64_t v7 = &a1[a2];
    int v16 = &a3[a4];
    if (!a6) {
      return (unsigned __int16)v11 - (unsigned __int16)v12;
    }
    goto LABEL_44;
  }
  return v17;
}

int32_t u_strCompareIter(UCharIterator *iter1, UCharIterator *iter2, UBool codePointOrder)
{
  int32_t result = 0;
  if (iter1 != iter2 && iter1 && iter2)
  {
    int v6 = codePointOrder;
    ((void (*)(UCharIterator *, void, void))iter1->move)(iter1, 0, 0);
    ((void (*)(UCharIterator *, void, void))iter2->move)(iter2, 0, 0);
    while (1)
    {
      int v7 = ((uint64_t (*)(UCharIterator *))iter1->next)(iter1);
      int v8 = ((uint64_t (*)(UCharIterator *))iter2->next)(iter2);
      if (v7 != v8) {
        break;
      }
      if (v7 == -1) {
        return 0;
      }
    }
    unsigned int v9 = v8;
    if (v6)
    {
      if (v7 >= 55296 && v8 >= 55296)
      {
        if (v7 >> 10 > 0x36
          || ((unsigned int (*)(UCharIterator *))iter1->current)(iter1) >> 10 != 55)
        {
          if (v7 >> 10 != 55
            || (((void (*)(UCharIterator *))iter1->previous)(iter1),
                ((unsigned int (*)(UCharIterator *))iter1->previous)(iter1) >> 10 != 54))
          {
            v7 -= 10240;
          }
        }
        if (v9 >> 10 > 0x36 || ((unsigned int (*)(UCharIterator *))iter2->current)(iter2) >> 10 != 55)
        {
          if (v9 >> 10 != 55
            || (((void (*)(UCharIterator *))iter2->previous)(iter2),
                ((unsigned int (*)(UCharIterator *))iter2->previous)(iter2) >> 10 != 54))
          {
            v9 -= 10240;
          }
        }
      }
    }
    return v7 - v9;
  }
  return result;
}

int32_t u_strCompare(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, UBool codePointOrder)
{
  if (s1 && length1 >= -1 && s2 && length2 >= -1) {
    return sub_18C8B6AC8((unsigned __int16 *)s1, length1, (unsigned __int16 *)s2, length2, 0, codePointOrder);
  }
  else {
    return 0;
  }
}

int32_t u_strcmpCodePointOrder(const UChar *s1, const UChar *s2)
{
  return sub_18C8B6AC8((unsigned __int16 *)s1, -1, (unsigned __int16 *)s2, -1, 0, 1);
}

int32_t u_strncmp(const UChar *ucs1, const UChar *ucs2, int32_t n)
{
  int v3 = n - 1;
  if (n < 1) {
    return 0;
  }
  int v5 = *ucs1;
  int32_t result = v5 - *ucs2;
  if (v5) {
    BOOL v7 = v5 == *ucs2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    int v8 = ucs2 + 1;
    unsigned int v9 = ucs1 + 1;
    while (v3)
    {
      int v11 = *v9++;
      int v10 = v11;
      int v12 = *v8++;
      int32_t result = v10 - v12;
      --v3;
      if (v10) {
        BOOL v13 = result == 0;
      }
      else {
        BOOL v13 = 0;
      }
      if (!v13) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

int32_t u_strncmpCodePointOrder(const UChar *s1, const UChar *s2, int32_t n)
{
  return sub_18C8B6AC8((unsigned __int16 *)s1, n, (unsigned __int16 *)s2, n, 1, 1);
}

UChar *__cdecl u_strcpy(UChar *dst, const UChar *src)
{
  uint64_t v2 = 0;
  do
  {
    int v3 = src[v2];
    dst[v2++] = v3;
  }
  while (v3);
  return dst;
}

UChar *__cdecl u_strncpy(UChar *dst, const UChar *src, int32_t n)
{
  if (n >= 1)
  {
    int v3 = dst;
    do
    {
      int v4 = *src++;
      *v3++ = v4;
      if (v4) {
        BOOL v5 = n > 1;
      }
      else {
        BOOL v5 = 0;
      }
      --n;
    }
    while (v5);
  }
  return dst;
}

int32_t u_countChar32(const UChar *s, int32_t length)
{
  int32_t result = 0;
  if (!s || length < -1) {
    return result;
  }
  if ((length & 0x80000000) == 0)
  {
    if (length)
    {
      int32_t result = 0;
      do
      {
        if (length != 1 && (*s & 0xFC00) == 0xD800 && (s[1] & 0xFC00) == 0xDC00)
        {
          int v4 = -2;
          uint64_t v5 = 2;
        }
        else
        {
          int v4 = -1;
          uint64_t v5 = 1;
        }
        s += v5;
        ++result;
        length += v4;
      }
      while (length);
      return result;
    }
    return 0;
  }
  UChar v6 = *s;
  if (!*s) {
    return 0;
  }
  int32_t result = 0;
  do
  {
    BOOL v7 = s + 1;
    if ((v6 & 0xFC00) == 0xD800)
    {
      int v8 = s[1] & 0xFC00;
      unsigned int v9 = s + 2;
      if (v8 == 56320) {
        BOOL v7 = v9;
      }
    }
    UChar v6 = *v7;
    ++result;
    s = v7;
  }
  while (*v7);
  return result;
}

UBool u_strHasMoreChar32Than(const UChar *s, int32_t length, int32_t number)
{
  if (number < 0) {
    return 1;
  }
  UBool v3 = 0;
  if (s && length >= -1)
  {
    if (length == -1)
    {
      UChar v4 = *s;
      if (*s)
      {
        int v5 = number + 1;
        while (--v5)
        {
          UChar v6 = s + 1;
          if ((v4 & 0xFC00) == 0xD800 && (s[1] & 0xFC00) == 0xDC00) {
            UChar v6 = s + 2;
          }
          UChar v4 = *v6;
          s = v6;
          if (!*v6) {
            return 0;
          }
        }
        return 1;
      }
    }
    else
    {
      if (number < (length + 1) >> 1) {
        return 1;
      }
      int v7 = length - number;
      if (length - number >= 1 && length)
      {
        int v8 = number + 1;
        unsigned int v9 = &s[length];
        while (--v8)
        {
          int v10 = s + 1;
          BOOL v11 = (*s & 0xFC00) != 0xD800 || v10 == v9;
          if (!v11 && (*v10 & 0xFC00) == 0xDC00)
          {
            if (v7 < 2) {
              return 0;
            }
            int v10 = s + 2;
            --v7;
          }
          UBool v3 = 0;
          s = v10;
          if (v10 == v9) {
            return v3;
          }
        }
        return 1;
      }
    }
    return 0;
  }
  return v3;
}

UBool u_strIsWellFormed(const UChar *s, int32_t length)
{
  UBool v2 = 0;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (s && length >= -1)
  {
    int v23 = 0;
    char v22 = 0;
    memset(v31, 0, sizeof(v31));
    long long v30 = 0u;
    long long v29 = 0u;
    long long v28 = 0u;
    long long v27 = 0u;
    long long v26 = 0u;
    long long v25 = 0u;
    uint64_t v21 = 0;
    char v24 = 0;
    unsigned int v4 = 0;
    if (length < 0)
    {
      BOOL v13 = s;
      while (1)
      {
        UChar32 v15 = *v13++;
        UChar32 v14 = v15;
        if (!v15) {
          break;
        }
        if ((v14 & 0xFC00) == 0xD800)
        {
          int v16 = *v13;
          BOOL v17 = (v16 & 0xFC00) == 56320;
          UChar32 v18 = (v14 << 10) - 56613888 + v16;
          if (v17) {
            BOOL v13 = s + 2;
          }
          if (v17) {
            UChar32 v14 = v18;
          }
        }
        BOOL v19 = sub_18C8B72D4(v14, v4, &v23, &v22, (uint64_t)&v24, (int *)&v21 + 1, (int *)&v21);
        s = v13;
        unsigned int v4 = v14;
        if (!v19) {
          return 0;
        }
      }
    }
    else
    {
      int v5 = &s[length];
      while (s < v5)
      {
        int v7 = s + 1;
        UChar32 v6 = *s;
        if ((v6 & 0xFC00) == 0xD800 && v7 < v5)
        {
          int v9 = *v7;
          BOOL v10 = (v9 & 0xFC00) == 56320;
          UChar32 v11 = (v6 << 10) - 56613888 + v9;
          if (v10) {
            int v7 = s + 2;
          }
          if (v10) {
            UChar32 v6 = v11;
          }
        }
        BOOL v12 = sub_18C8B72D4(v6, v4, &v23, &v22, (uint64_t)&v24, (int *)&v21 + 1, (int *)&v21);
        s = v7;
        unsigned int v4 = v6;
        if (!v12) {
          return 0;
        }
      }
    }
    return 1;
  }
  return v2;
}

BOOL sub_18C8B72D4(UChar32 c, unsigned int a2, _DWORD *a3, unsigned char *a4, uint64_t a5, int *a6, int *a7)
{
  if (*a4)
  {
    if (c == 917631)
    {
      *a4 = 0;
      return 1;
    }
    return (c - 917631) >= 0xFFFFFFA1;
  }
  if (c <= 767)
  {
    *a3 = 0;
    if (c != 10 && c != 13 && c != 133 && (c - 28) > 2) {
      return 1;
    }
    goto LABEL_17;
  }
  if ((c - 8233) < 6 || (c - 8294) < 4)
  {
    *a3 = 0;
    if (c == 8297)
    {
      if (*a7 >= 1)
      {
        int v11 = *a6;
        do
        {
          if (v11 < 1) {
            break;
          }
          *a6 = v11 - 1;
          int v12 = *(char *)(a5 + v11--);
        }
        while ((v12 & 0x80000000) == 0);
        --*a7;
      }
      return 1;
    }
    if (c == 8236)
    {
      uint64_t v13 = *a6;
      if ((int)v13 >= 1 && (*(char *)(a5 + v13) & 0x80000000) == 0) {
        *a6 = v13 - 1;
      }
      return 1;
    }
    if (c != 8233)
    {
      uint64_t v14 = *a6;
      int v15 = *(unsigned char *)(a5 + v14) & 0x7F;
      unsigned int v16 = v15 + 1;
      switch(c)
      {
        case 8234:
        case 8237:
          goto LABEL_41;
        case 8235:
        case 8238:
          goto LABEL_38;
        case 8236:
          goto LABEL_43;
        default:
          if (c == 8294) {
            goto LABEL_41;
          }
          if (c != 8295) {
            goto LABEL_43;
          }
LABEL_38:
          if ((v16 & 1) == 0) {
            goto LABEL_42;
          }
          if (c == 8294 || c == 8237)
          {
LABEL_41:
            if (v16) {
LABEL_42:
            }
              unsigned int v16 = v15 + 2;
          }
LABEL_43:
          BOOL result = 0;
          if ((int)v14 > 125 || v16 > 0x7D) {
            return result;
          }
          if ((c - 8294) <= 2)
          {
            LOBYTE(v16) = v16 | 0x80;
            ++*a7;
            LODWORD(v14) = *a6;
          }
          uint64_t v18 = (int)v14 + 1;
          *a6 = v18;
          *(unsigned char *)(a5 + v18) = v16;
          break;
      }
      return 1;
    }
LABEL_17:
    *a6 = 0;
    *a7 = 0;
    return 1;
  }
  if (c == 65039)
  {
    BOOL result = u_isEmoji(a2);
    if (result) {
      return 1;
    }
  }
  else
  {
    if ((c - 917536) > 0x5E)
    {
      if (c == 917631) {
        return 0;
      }
      unsigned __int8 v19 = u_charType(c);
      int v20 = ((v19 >> 1) | (v19 << 7));
      if ((v20 - 3) < 2)
      {
        if (u_getCombiningClass(c))
        {
          int v21 = (*a3)++;
          return v21 <= 29;
        }
      }
      else
      {
        BOOL result = 0;
        if (!v20 || v20 == 9) {
          return result;
        }
      }
      *a3 = 0;
      return 1;
    }
    BOOL result = u_isEmoji(a2);
    if (a2 == 65039 || result)
    {
      *a4 = 1;
      return 1;
    }
  }
  return result;
}

UChar *__cdecl u_memcpy(UChar *dest, const UChar *src, int32_t count)
{
  if (count >= 1) {
    memcpy(dest, src, 2 * count);
  }
  return dest;
}

UChar *__cdecl u_memmove(UChar *dest, const UChar *src, int32_t count)
{
  if (count >= 1) {
    memmove(dest, src, 2 * count);
  }
  return dest;
}

UChar *__cdecl u_memset(UChar *dest, UChar c, int32_t count)
{
  if (count >= 1)
  {
    UBool v3 = dest;
    do
      *v3++ = c;
    while (v3 < &dest[count]);
  }
  return dest;
}

int32_t u_memcmp(const UChar *buf1, const UChar *buf2, int32_t count)
{
  if (count < 1) {
    return 0;
  }
  UBool v3 = &buf1[count];
  while (1)
  {
    int32_t v4 = *buf1 - *buf2;
    if (v4) {
      break;
    }
    ++buf1;
    ++buf2;
    if (buf1 >= v3) {
      return 0;
    }
  }
  return v4;
}

int32_t u_memcmpCodePointOrder(const UChar *s1, const UChar *s2, int32_t count)
{
  return sub_18C8B6AC8((unsigned __int16 *)s1, count, (unsigned __int16 *)s2, count, 0, 1);
}

UChar32 u_unescapeAt(UNESCAPE_CHAR_AT charAt, int32_t *offset, int32_t length, void *context)
{
  UNESCAPE_CHAR_AT v5 = (UNESCAPE_CHAR_AT)*offset;
  if ((v5 & 0x80000000) != 0 || (int)v5 >= length) {
    goto LABEL_41;
  }
  *offset = v5 + 1;
  unsigned int v9 = ((uint64_t (*)(UNESCAPE_CHAR_AT, void *))charAt)(v5, context);
  UChar32 v10 = v9;
  int v11 = 4;
  if (v9 == 85)
  {
    int v36 = (int)v5;
    UNESCAPE_CHAR_AT v5 = charAt;
    char v37 = context;
    int v13 = 0;
    unsigned int v14 = 0;
    int v12 = 8;
    char v34 = 1;
    int v15 = 8;
LABEL_13:
    int v35 = v15;
    goto LABEL_16;
  }
  int v12 = 4;
  if (v9 == 117)
  {
LABEL_15:
    int v35 = v11;
    int v36 = (int)v5;
    UNESCAPE_CHAR_AT v5 = charAt;
    char v37 = context;
    int v13 = 0;
    unsigned int v14 = 0;
    LOBYTE(v11) = 4;
    char v34 = 1;
LABEL_16:
    int32_t v16 = length;
    if (*offset < length)
    {
      int v17 = v13;
      char v18 = v13;
      while (1)
      {
        UChar32 v19 = ((uint64_t (*)(void))v5)();
        UChar32 v10 = v19;
        if (v13)
        {
          if ((v19 & 0xFFF8) != 0x30) {
            goto LABEL_36;
          }
          int v20 = v19 - 48;
          if (v19 - 48 < 0) {
            goto LABEL_36;
          }
        }
        else
        {
          int v20 = v19 - 48;
          if ((v19 - 48) > 9)
          {
            if ((v19 - 65) > 5)
            {
              if ((v19 - 97) > 5) {
                goto LABEL_36;
              }
              int v20 = v19 - 87;
              if (v19 - 87 < 0) {
                goto LABEL_36;
              }
              goto LABEL_26;
            }
            int v20 = v19 - 55;
          }
          if (v20 < 0) {
            goto LABEL_36;
          }
        }
LABEL_26:
        unsigned int v14 = v20 | (v14 << v11);
        int32_t v21 = *offset + 1;
        *offset = v21;
        int v17 = ++v18;
        if (v21 >= v16 || v12 <= v18) {
          goto LABEL_36;
        }
      }
    }
    int v17 = v13;
LABEL_36:
    int v23 = v5;
    LODWORD(v5) = v36;
    if (v35 > v17) {
      goto LABEL_41;
    }
    if ((v34 & 1) == 0)
    {
      if (v10 != 125)
      {
LABEL_41:
        *offset = (int)v5;
        return -1;
      }
      ++*offset;
    }
    if (HIWORD(v14) > 0x10u) {
      goto LABEL_41;
    }
    uint64_t v25 = *offset;
    if ((int)v25 < v16 && (v14 & 0xFFFFFC00) == 0xD800)
    {
      int32_t offseta = v25 + 1;
      unsigned int v26 = ((uint64_t (*)(uint64_t, void *))v23)(v25, v37);
      if (v26 != 92)
      {
LABEL_51:
        if (v26 >> 10 == 55)
        {
          *offset = offseta;
          return v26 + (v14 << 10) - 56613888;
        }
        return v14;
      }
      if ((int)v25 + 1 < v16)
      {
        if ((int)v25 + 12 >= v16) {
          int32_t v27 = v16;
        }
        else {
          int32_t v27 = v25 + 12;
        }
        unsigned int v26 = u_unescapeAt(v23, &offseta, v27, v37);
        goto LABEL_51;
      }
    }
    return v14;
  }
  if (v9 == 120)
  {
    if (*offset < length && ((unsigned int (*)(void))charAt)() == 123)
    {
      int v36 = (int)v5;
      UNESCAPE_CHAR_AT v5 = charAt;
      char v37 = context;
      int v13 = 0;
      unsigned int v14 = 0;
      ++*offset;
      char v34 = 0;
      int v35 = 1;
      int v12 = 8;
      goto LABEL_16;
    }
    int v12 = 2;
    int v11 = 1;
    goto LABEL_15;
  }
  if (v9 >= 0x30 && (v9 & 0xFFF8) == 0x30)
  {
    int v36 = (int)v5;
    UNESCAPE_CHAR_AT v5 = charAt;
    char v37 = context;
    unsigned int v14 = v9 - 48;
    int v15 = 1;
    char v34 = 1;
    LOBYTE(v11) = 3;
    int v13 = 1;
    int v12 = 3;
    goto LABEL_13;
  }
  unint64_t v28 = 0;
  do
  {
    unsigned int v29 = (unsigned __int16)a00000000aBEF[v28 + 8];
    if (v9 == v29) {
      return (unsigned __int16)a00000000aBEF[v28 + 9];
    }
    BOOL v30 = v9 < v29 || v28 >= 0xE;
    v28 += 2;
  }
  while (!v30);
  if (v9 == 99)
  {
    if (*offset >= length)
    {
      return 99;
    }
    else
    {
      ++*offset;
      __int16 v31 = ((uint64_t (*)(void))charAt)();
      if ((v31 & 0xFC00) == 0xD800 && *offset < length)
      {
        __int16 v32 = ((uint64_t (*)(void))charAt)();
        if ((v32 & 0xFC00) == 0xDC00)
        {
          ++*offset;
          LOBYTE(v31) = v32;
        }
      }
      return v31 & 0x1F;
    }
  }
  else if ((v9 & 0xFC00) == 0xD800 && *offset < length)
  {
    int v33 = ((uint64_t (*)(void))charAt)();
    if ((v33 & 0xFC00) == 0xDC00)
    {
      ++*offset;
      return v33 + (v10 << 10) - 56613888;
    }
  }
  return v10;
}

int32_t u_unescape(const char *src, UChar *dest, int32_t destCapacity)
{
  int32_t v6 = 0;
LABEL_2:
  for (uint64_t i = 0; src[i]; ++i)
  {
    if (src[i] == 92)
    {
      int32_t offset = 0;
      if (i)
      {
        if (dest)
        {
          if (((destCapacity - v6) & ~((destCapacity - v6) >> 31)) >= (int)i) {
            int32_t v8 = i;
          }
          else {
            int32_t v8 = (destCapacity - v6) & ~((destCapacity - v6) >> 31);
          }
          u_charsToUChars(src, &dest[v6], v8);
        }
        v6 += i;
      }
      int32_t v9 = strlen(&src[i + 1]);
      unsigned int v10 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18C8B7C30, &offset, v9, (void *)&src[i + 1]);
      uint64_t v11 = offset;
      if (!offset)
      {
        int32_t v6 = 0;
        if (!dest || destCapacity < 1) {
          return v6;
        }
LABEL_36:
        *dest = 0;
        return v6;
      }
      if (dest && (v10 < 0x10000 ? (int v12 = 1) : (int v12 = 2), v12 <= destCapacity - v6))
      {
        if (HIWORD(v10))
        {
          unsigned int v14 = &dest[v6];
          *unsigned int v14 = (v10 >> 10) - 10304;
          v14[1] = v10 & 0x3FF | 0xDC00;
          int v13 = 2;
        }
        else
        {
          dest[v6] = v10;
          int v13 = 1;
        }
      }
      else if (v10 < 0x10000)
      {
        int v13 = 1;
      }
      else
      {
        int v13 = 2;
      }
      src += v11 + i + 1;
      v6 += v13;
      goto LABEL_2;
    }
  }
  if (i)
  {
    if (dest)
    {
      if (((destCapacity - v6) & ~((destCapacity - v6) >> 31)) >= (int)i) {
        int32_t v15 = i;
      }
      else {
        int32_t v15 = (destCapacity - v6) & ~((destCapacity - v6) >> 31);
      }
      u_charsToUChars(src, &dest[v6], v15);
    }
    v6 += i;
  }
  if (dest && v6 < destCapacity)
  {
    dest += v6;
    goto LABEL_36;
  }
  return v6;
}

uint64_t sub_18C8B7C30(int a1, uint64_t a2)
{
  UChar us = 0;
  u_charsToUChars((const char *)(a2 + a1), &us, 1);
  return us;
}

uint64_t u_asciiToUpper(int a1)
{
  if ((a1 - 97) >= 0x1A) {
    return (unsigned __int16)a1;
  }
  else {
    return (unsigned __int16)(a1 - 32);
  }
}

uint64_t u_terminateUChars(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  if (a4)
  {
    if ((a3 & 0x80000000) == 0)
    {
      int v4 = *a4;
      if (*a4 <= 0)
      {
        if ((int)a3 >= a2)
        {
          if (a3 == a2) {
            int v5 = -124;
          }
          else {
            int v5 = 15;
          }
        }
        else
        {
          int v5 = 0;
          *(_WORD *)(a1 + 2 * a3) = 0;
          if (v4 != -124) {
            return a3;
          }
        }
        *a4 = v5;
      }
    }
  }
  return a3;
}

uint64_t u_terminateChars(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  if (a4 && (a3 & 0x80000000) == 0 && *a4 <= 0)
  {
    if ((int)a3 >= a2)
    {
      if (a3 == a2) {
        int v4 = -124;
      }
      else {
        int v4 = 15;
      }
    }
    else
    {
      int v4 = 0;
      *(unsigned char *)(a1 + a3) = 0;
      if (*a4 != -124) {
        return a3;
      }
    }
    *a4 = v4;
  }
  return a3;
}

uint64_t u_terminateUChar32s(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  if (a4)
  {
    if ((a3 & 0x80000000) == 0)
    {
      int v4 = *a4;
      if (*a4 <= 0)
      {
        if ((int)a3 >= a2)
        {
          if (a3 == a2) {
            int v5 = -124;
          }
          else {
            int v5 = 15;
          }
        }
        else
        {
          int v5 = 0;
          *(_DWORD *)(a1 + 4 * a3) = 0;
          if (v4 != -124) {
            return a3;
          }
        }
        *a4 = v5;
      }
    }
  }
  return a3;
}

uint64_t u_terminateWChars(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  if (a4)
  {
    if ((a3 & 0x80000000) == 0)
    {
      int v4 = *a4;
      if (*a4 <= 0)
      {
        if ((int)a3 >= a2)
        {
          if (a3 == a2) {
            int v5 = -124;
          }
          else {
            int v5 = 15;
          }
        }
        else
        {
          int v5 = 0;
          *(_DWORD *)(a1 + 4 * a3) = 0;
          if (v4 != -124) {
            return a3;
          }
        }
        *a4 = v5;
      }
    }
  }
  return a3;
}

unsigned __int16 *ustr_hashUCharsN(unsigned __int16 *result, int a2)
{
  if (result)
  {
    int v2 = a2 - 1;
    if (a2 < 1)
    {
      return 0;
    }
    else
    {
      UBool v3 = result;
      LODWORD(result) = 0;
      int v4 = &v3[a2];
      if (a2 >= 32) {
        int v2 = a2 - 32;
      }
      uint64_t v5 = 2 * (v2 >> 5) + 2;
      do
      {
        BOOL result = (unsigned __int16 *)(*v3 + 37 * result);
        UBool v3 = (unsigned __int16 *)((char *)v3 + v5);
      }
      while (v3 < v4);
    }
  }
  return result;
}

unsigned __int8 *ustr_hashCharsN(unsigned __int8 *result, int a2)
{
  if (result)
  {
    int v2 = a2 - 1;
    if (a2 < 1)
    {
      return 0;
    }
    else
    {
      UBool v3 = result;
      LODWORD(result) = 0;
      int v4 = &v3[a2];
      if (a2 >= 32) {
        int v2 = a2 - 32;
      }
      uint64_t v5 = ((v2 >> 5) + 1);
      do
      {
        BOOL result = (unsigned __int8 *)(*v3 + 37 * result);
        v3 += v5;
      }
      while (v3 < v4);
    }
  }
  return result;
}

char *ustr_hashICharsN(char *result, int a2)
{
  if (result)
  {
    int v2 = a2 - 1;
    if (a2 < 1)
    {
      return 0;
    }
    else
    {
      UBool v3 = result;
      LODWORD(result) = 0;
      int v4 = &v3[a2];
      if (a2 >= 32) {
        int v2 = a2 - 32;
      }
      uint64_t v5 = ((v2 >> 5) + 1);
      do
      {
        BOOL result = (char *)(37 * result + uprv_asciitolower(*v3));
        v3 += v5;
      }
      while (v3 < v4);
    }
  }
  return result;
}

UChar *__cdecl u_strFromUTF32WithSub(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
{
  if (*(int *)pErrorCode > 0) {
    return 0;
  }
  if (src) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = srcLength == 0;
  }
  char v10 = !v9;
  if ((destCapacity & 0x80000000) == 0 && srcLength >= -1 && (v10 & 1) == 0)
  {
    int32_t v8 = dest;
    BOOL v11 = destCapacity && dest == 0;
    if (!v11 && subchar < 1114112 && (subchar & 0xFFFFF800) != 0xD800)
    {
      if (pNumSubstitutions) {
        *pNumSubstitutions = 0;
      }
      if (dest) {
        int v12 = &dest[destCapacity];
      }
      else {
        int v12 = 0;
      }
      if (srcLength < 0)
      {
        unsigned int v23 = *src;
        if (!*src)
        {
          int v13 = 0;
          int32_t v16 = 0;
          int32_t v15 = dest;
LABEL_64:
          uint64_t v25 = v13 + ((unint64_t)((char *)v15 - (char *)dest) >> 1);
          if (pDestLength) {
            *pDestLength = v25;
          }
          if (pNumSubstitutions) {
            *pNumSubstitutions = v16;
          }
          u_terminateUChars((uint64_t)dest, destCapacity, v25, (int *)pErrorCode);
          return v8;
        }
        int v13 = 0;
        int32_t v15 = dest;
        while (v23 >> 11 < 0x1B || (v23 & 0xFFFFE000) == 0xE000)
        {
          if (v15 >= v12) {
            ++v13;
          }
          else {
            *v15++ = v23;
          }
          UChar32 v24 = src[1];
          ++src;
          unsigned int v23 = v24;
          if (!v24) {
            goto LABEL_61;
          }
        }
        unsigned int v14 = src;
        do
        {
          UChar32 v26 = v14[1];
          ++v14;
        }
        while (v26);
      }
      else
      {
        int v13 = 0;
        if (src) {
          unsigned int v14 = &src[srcLength];
        }
        else {
          unsigned int v14 = 0;
        }
        int32_t v15 = dest;
      }
      if (src >= v14)
      {
LABEL_61:
        int32_t v16 = 0;
      }
      else
      {
        int32_t v16 = 0;
        BOOL v18 = subchar >> 11 < 0x1B || (subchar & 0xFFFFE000) == 57344;
        do
        {
          unsigned int v20 = *src++;
          unsigned int v19 = v20;
          if (v20 >> 11 < 0x1B || (v19 & 0xFFFFE000) == 0xE000)
          {
LABEL_41:
            if (v15 >= v12) {
              ++v13;
            }
            else {
              *v15++ = v19;
            }
          }
          else
          {
            while ((v19 - 0x10000) >> 20)
            {
              if (subchar < 0)
              {
                int32_t v8 = 0;
                UErrorCode v21 = U_INVALID_CHAR_FOUND;
                goto LABEL_51;
              }
              ++v16;
              unsigned int v19 = subchar;
              if (v18)
              {
                LOWORD(v19) = subchar;
                goto LABEL_41;
              }
            }
            if (v15 && v15 + 2 <= v12)
            {
              *int32_t v15 = (v19 >> 10) - 10304;
              v15[1] = v19 & 0x3FF | 0xDC00;
              v15 += 2;
            }
            else
            {
              v13 += 2;
            }
          }
        }
        while (src < v14);
      }
      goto LABEL_64;
    }
  }
  int32_t v8 = 0;
  UErrorCode v21 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_51:
  *pErrorCode = v21;
  return v8;
}

UChar *__cdecl u_strFromUTF32(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return u_strFromUTF32WithSub(dest, destCapacity, pDestLength, src, srcLength, -1, 0, pErrorCode);
}

UChar32 *__cdecl u_strToUTF32WithSub(UChar32 *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
{
  if (*(int *)pErrorCode > 0) {
    return 0;
  }
  if (src) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = srcLength == 0;
  }
  char v10 = !v9;
  if (destCapacity < 0
    || srcLength < -1
    || (v10 & 1) != 0
    || ((int32_t v8 = dest, destCapacity) ? (v11 = dest == 0) : (v11 = 0),
        v11 || subchar >= 1114112 || (subchar & 0xFFFFF800) == 0xD800))
  {
    int32_t v8 = 0;
    UErrorCode v16 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_29;
  }
  if (pNumSubstitutions) {
    *pNumSubstitutions = 0;
  }
  if (dest) {
    int v12 = &dest[destCapacity];
  }
  else {
    int v12 = 0;
  }
  int v13 = 0;
  if (srcLength < 0)
  {
    UChar32 v17 = *src;
    BOOL v18 = *src != 0;
    if (!*src || (v17 & 0xF800) == 0xD800)
    {
      unsigned int v19 = src;
      int32_t v15 = dest;
    }
    else
    {
      int v13 = 0;
      int32_t v15 = dest;
      do
      {
        if (v15 >= v12) {
          ++v13;
        }
        else {
          *v15++ = v17;
        }
        unsigned int v19 = src + 1;
        UChar32 v17 = src[1];
        BOOL v18 = src[1] != 0;
        if (src[1]) {
          BOOL v20 = (v17 & 0xF800) == 55296;
        }
        else {
          BOOL v20 = 1;
        }
        ++src;
      }
      while (!v20);
    }
    if (!v18)
    {
LABEL_62:
      int32_t v22 = 0;
LABEL_63:
      uint64_t v26 = v13 + ((unint64_t)((char *)v15 - (char *)v8) >> 2);
      if (pDestLength) {
        *pDestLength = v26;
      }
      if (pNumSubstitutions) {
        *pNumSubstitutions = v22;
      }
      u_terminateUChar32s((uint64_t)v8, destCapacity, v26, (int *)pErrorCode);
      return v8;
    }
    unsigned int v14 = v19;
    do
    {
      int v21 = v14[1];
      ++v14;
    }
    while (v21);
    src = v19;
  }
  else
  {
    if (src) {
      unsigned int v14 = &src[srcLength];
    }
    else {
      unsigned int v14 = 0;
    }
    int32_t v15 = dest;
  }
  if (src >= v14) {
    goto LABEL_62;
  }
  int32_t v22 = 0;
  while (1)
  {
    UChar32 v24 = src + 1;
    int v23 = *src;
    if ((v23 & 0xF800) != 0xD800)
    {
      ++src;
      goto LABEL_57;
    }
    if ((v23 & 0x400) != 0) {
      break;
    }
    if (v24 >= v14) {
      break;
    }
    int v25 = *v24;
    if ((v25 & 0xFC00) != 0xDC00) {
      break;
    }
    src += 2;
    int v23 = v25 + (v23 << 10) - 56613888;
LABEL_57:
    if (v15 >= v12) {
      ++v13;
    }
    else {
      *v15++ = v23;
    }
    if (src >= v14) {
      goto LABEL_63;
    }
  }
  if ((subchar & 0x80000000) == 0)
  {
    ++v22;
    ++src;
    int v23 = subchar;
    goto LABEL_57;
  }
  int32_t v8 = 0;
  UErrorCode v16 = U_INVALID_CHAR_FOUND;
LABEL_29:
  *pErrorCode = v16;
  return v8;
}

UChar32 *__cdecl u_strToUTF32(UChar32 *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return u_strToUTF32WithSub(dest, destCapacity, pDestLength, src, srcLength, -1, 0, pErrorCode);
}

UChar *__cdecl u_strFromUTF8WithSub(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
{
  if (*(int *)pErrorCode > 0) {
    return 0;
  }
  if (src) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = srcLength == 0;
  }
  char v14 = !v13;
  if (destCapacity < 0
    || srcLength < -1
    || (v14 & 1) != 0
    || ((v8 = dest, destCapacity) ? (BOOL v15 = dest == 0) : (BOOL v15 = 0),
        v15 || subchar >= 1114112 || (subchar & 0xFFFFF800) == 0xD800))
  {
    int32_t v8 = 0;
    UErrorCode v33 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_55:
    *pErrorCode = v33;
    return v8;
  }
  if (pNumSubstitutions) {
    *pNumSubstitutions = 0;
  }
  UChar32 v17 = &dest[destCapacity];
  if ((srcLength & 0x80000000) == 0)
  {
    int32_t v69 = 0;
    puint64_t i = 0;
    LODWORD(v18) = 0;
    if (srcLength / 3 >= destCapacity) {
      int v19 = destCapacity;
    }
    else {
      int v19 = srcLength / 3;
    }
    BOOL v20 = dest;
    if (v19 < 3)
    {
LABEL_25:
      int v21 = 0;
      if ((int)v18 < srcLength && v20 < v17)
      {
        while (1)
        {
          int v22 = v18;
          uint64_t v23 = (int)v18 + 1;
          puint64_t i = v18 + 1;
          UChar32 v24 = src[(int)v18];
          if ((v24 & 0x80) != 0)
          {
            if ((v24 & 0xF0) == 0xE0)
            {
              uint64_t v26 = (int)v18 + 2;
              if (v22 + 2 < srcLength)
              {
                unsigned int v27 = src[v23];
                if ((a00000000000000[v24 & 0xF] >> (v27 >> 5)))
                {
                  unsigned int v28 = src[v26] ^ 0x80;
                  if (v28 <= 0x3F)
                  {
                    *v20++ = ((_WORD)v24 << 12) | ((v27 & 0x3F) << 6) | v28;
                    int32_t v29 = v22 + 3;
LABEL_46:
                    puint64_t i = v29;
                    goto LABEL_29;
                  }
                }
              }
            }
            else if ((v24 + 32) >= 0xE2u && v23 != srcLength)
            {
              unsigned int v31 = src[v23] ^ 0x80;
              if (v31 <= 0x3F)
              {
                *v20++ = ((v24 & 0x1F) << 6) | v31;
                int32_t v29 = v22 + 2;
                goto LABEL_46;
              }
            }
            unsigned int v32 = utf8_nextCharSafeBody((const uint8_t *)src, &pi, srcLength, v24, -1);
            if ((v32 & 0x80000000) != 0)
            {
              if (subchar < 0) {
                goto LABEL_165;
              }
              ++v69;
              unsigned int v32 = subchar;
            }
            if (HIWORD(v32))
            {
              *BOOL v20 = (v32 >> 10) - 10304;
              if (v20 + 1 >= v17)
              {
                int v21 = 1;
                LODWORD(v18) = pi;
                ++v20;
                break;
              }
              v20[1] = v32 & 0x3FF | 0xDC00;
              v20 += 2;
            }
            else
            {
              *v20++ = v32;
            }
          }
          else
          {
            *v20++ = v24;
          }
LABEL_29:
          LODWORD(v18) = pi;
          if (pi >= srcLength || v20 >= v17)
          {
            int v21 = 0;
            break;
          }
        }
      }
      if ((int)v18 >= srcLength)
      {
LABEL_137:
        int32_t v61 = v69;
        goto LABEL_159;
      }
      while (1)
      {
        uint64_t v56 = (int)v18;
        UChar32 v57 = src[(int)v18];
        uint64_t v18 = (int)v18 + 1;
        puint64_t i = v18;
        if ((v57 & 0x80) != 0)
        {
          if ((v57 & 0xF0) == 0xE0)
          {
            if ((int)v56 + 2 >= srcLength
              || ((a00000000000000[v57 & 0xF] >> (src[v18] >> 5)) & 1) == 0
              || src[v56 + 2] > -65)
            {
              goto LABEL_129;
            }
            ++v21;
            LODWORD(v18) = v56 + 3;
          }
          else
          {
            BOOL v58 = (v57 + 32) < 0xE2u || v18 == srcLength;
            if (v58 || src[v18] > -65)
            {
LABEL_129:
              unsigned int v59 = utf8_nextCharSafeBody((const uint8_t *)src, &pi, srcLength, v57, -1);
              if ((v59 & 0x80000000) != 0)
              {
                if (subchar < 0) {
                  goto LABEL_165;
                }
                ++v69;
                unsigned int v59 = subchar;
              }
              if (v59 < 0x10000) {
                int v60 = 1;
              }
              else {
                int v60 = 2;
              }
              v21 += v60;
              LODWORD(v18) = pi;
              goto LABEL_136;
            }
            ++v21;
            LODWORD(v18) = v56 + 2;
          }
          puint64_t i = v18;
        }
        else
        {
          ++v21;
        }
LABEL_136:
        if ((int)v18 >= srcLength) {
          goto LABEL_137;
        }
      }
    }
    int32_t v69 = 0;
    BOOL v20 = dest;
    while (1)
    {
      int32_t v45 = pi;
      uint64_t v46 = ++pi;
      unsigned int v47 = src[v45];
      if ((v47 & 0x80) != 0)
      {
        if ((v47 & 0xF0) == 0xE0)
        {
          uint64_t v49 = v45 + 2;
          if ((int)v49 < srcLength)
          {
            unsigned int v50 = src[v46];
            if ((a00000000000000[v47 & 0xF] >> (v50 >> 5)))
            {
              unsigned int v51 = src[v49] ^ 0x80;
              if (v51 <= 0x3F)
              {
                *v20++ = ((_WORD)v47 << 12) | ((v50 & 0x3F) << 6) | v51;
                int32_t v52 = v45 + 3;
LABEL_103:
                puint64_t i = v52;
                goto LABEL_85;
              }
            }
          }
        }
        else if ((v47 + 32) >= 0xE2u && v46 != srcLength)
        {
          unsigned int v54 = src[v46] ^ 0x80;
          if (v54 <= 0x3F)
          {
            *v20++ = ((v47 & 0x1F) << 6) | v54;
            int32_t v52 = v45 + 2;
            goto LABEL_103;
          }
        }
        if ((subchar >= 0x10000 || v47 >= 0xF0) && !--v19)
        {
          puint64_t i = v45;
          goto LABEL_87;
        }
        unsigned int v55 = utf8_nextCharSafeBody((const uint8_t *)src, &pi, srcLength, v47, -1);
        if ((v55 & 0x80000000) != 0)
        {
          if (subchar < 0) {
            goto LABEL_165;
          }
          ++v69;
          unsigned int v55 = subchar;
        }
        if (HIWORD(v55))
        {
          *BOOL v20 = (v55 >> 10) - 10304;
          v20[1] = v55 & 0x3FF | 0xDC00;
          v20 += 2;
        }
        else
        {
          *v20++ = v55;
        }
      }
      else
      {
        *v20++ = v47;
      }
LABEL_85:
      BOOL v48 = __OFSUB__(v19--, 1);
      if ((v19 < 0) ^ v48 | (v19 == 0))
      {
LABEL_87:
        LODWORD(v18) = pi;
        if ((srcLength - pi) / 3 >= (int)((unint64_t)((char *)v17 - (char *)v20) >> 1)) {
          int v19 = (unint64_t)((char *)v17 - (char *)v20) >> 1;
        }
        else {
          int v19 = (srcLength - pi) / 3;
        }
        if (v19 <= 2) {
          goto LABEL_25;
        }
      }
    }
  }
  LODWORD(v34) = 0;
  int v35 = *(unsigned __int8 *)src;
  if (!*src || !destCapacity)
  {
    BOOL v20 = dest;
    int v21 = 0;
    int32_t v61 = 0;
    goto LABEL_140;
  }
  LODWORD(v34) = 0;
  int32_t v36 = 0;
  BOOL v20 = dest;
  while (1)
  {
    UChar32 v37 = v35;
    uint64_t v38 = (int)v34 + 1;
    int32_t v71 = v34 + 1;
    if ((v35 & 0x80) != 0) {
      break;
    }
    *v20++ = v35;
LABEL_61:
    LODWORD(v34) = v71;
    int v35 = src[v71];
    if (src[v71]) {
      BOOL v39 = v20 >= v17;
    }
    else {
      BOOL v39 = 1;
    }
    if (v39)
    {
      int v21 = 0;
      goto LABEL_139;
    }
  }
  if ((v35 & 0xF0) == 0xE0)
  {
    unsigned __int8 v40 = src[v38];
    if (((a00000000000000[v37 & 0xF] >> (v40 >> 5)) & 1) == 0) {
      goto LABEL_75;
    }
    unsigned int v41 = src[(int)v34 + 2] ^ 0x80;
    if (v41 > 0x3F) {
      goto LABEL_75;
    }
    *v20++ = ((_WORD)v37 << 12) | ((v40 & 0x3F) << 6) | v41;
    int32_t v42 = v34 + 3;
    goto LABEL_74;
  }
  if ((v35 + 62) <= 0x1Du)
  {
    unsigned int v43 = src[v38] ^ 0x80;
    if (v43 <= 0x3F)
    {
      *v20++ = ((v37 & 0x1F) << 6) | v43;
      int32_t v42 = v34 + 2;
LABEL_74:
      int32_t v71 = v42;
      goto LABEL_61;
    }
  }
LABEL_75:
  unsigned int v44 = utf8_nextCharSafeBody((const uint8_t *)src, &v71, -1, v37, -1);
  if ((v44 & 0x80000000) != 0)
  {
    if (subchar < 0)
    {
LABEL_165:
      int32_t v8 = 0;
      UErrorCode v33 = U_INVALID_CHAR_FOUND;
      goto LABEL_55;
    }
    ++v36;
    unsigned int v44 = subchar;
  }
  if (!HIWORD(v44))
  {
    *v20++ = v44;
    goto LABEL_61;
  }
  *BOOL v20 = (v44 >> 10) - 10304;
  if (v20 + 1 < v17)
  {
    v20[1] = v44 & 0x3FF | 0xDC00;
    v20 += 2;
    goto LABEL_61;
  }
  LODWORD(v34) = v71;
  int v35 = src[v71];
  int v21 = 1;
  ++v20;
LABEL_139:
  int32_t v61 = v36;
LABEL_140:
  if (v35)
  {
    while (2)
    {
      uint64_t v62 = (int)v34;
      uint64_t v34 = (int)v34 + 1;
      int32_t v71 = v34;
      if ((v35 & 0x80) == 0)
      {
        ++v21;
        goto LABEL_158;
      }
      if ((v35 & 0xF0) == 0xE0)
      {
        if (((a00000000000000[v35 & 0xF] >> (src[v34] >> 5)) & 1) != 0
          && src[v62 + 2] <= -65)
        {
          ++v21;
          LODWORD(v34) = v62 + 3;
          goto LABEL_150;
        }
LABEL_151:
        unsigned int v63 = utf8_nextCharSafeBody((const uint8_t *)src, &v71, -1, v35, -1);
        if ((v63 & 0x80000000) != 0)
        {
          if (subchar < 0) {
            goto LABEL_165;
          }
          ++v61;
          unsigned int v63 = subchar;
        }
        if (v63 < 0x10000) {
          int v64 = 1;
        }
        else {
          int v64 = 2;
        }
        v21 += v64;
        LODWORD(v34) = v71;
      }
      else
      {
        if ((v35 + 62) > 0x1Du || src[v34] > -65) {
          goto LABEL_151;
        }
        ++v21;
        LODWORD(v34) = v62 + 2;
LABEL_150:
        int32_t v71 = v34;
      }
LABEL_158:
      LOBYTE(v35) = src[(int)v34];
      if (!(_BYTE)v35) {
        break;
      }
      continue;
    }
  }
LABEL_159:
  if (pNumSubstitutions) {
    *pNumSubstitutions = v61;
  }
  uint64_t v65 = v21 + ((unint64_t)((char *)v20 - (char *)v8) >> 1);
  if (pDestLength) {
    *pDestLength = v65;
  }
  u_terminateUChars((uint64_t)v8, destCapacity, v65, (int *)pErrorCode);
  return v8;
}

UChar *__cdecl u_strFromUTF8(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return u_strFromUTF8WithSub(dest, destCapacity, pDestLength, src, srcLength, -1, 0, pErrorCode);
}

UChar *__cdecl u_strFromUTF8Lenient(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  if (*(int *)pErrorCode > 0) {
    return 0;
  }
  if (src) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = srcLength == 0;
  }
  char v8 = !v7;
  if (destCapacity < 0 || srcLength < -1 || (v8 & 1) != 0 || (int32_t v6 = dest) == 0 && destCapacity)
  {
    int32_t v6 = 0;
    UErrorCode v9 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_15:
    *pErrorCode = v9;
    return v6;
  }
  if ((srcLength & 0x80000000) == 0)
  {
    if (src) {
      BOOL v11 = &src[srcLength];
    }
    else {
      BOOL v11 = 0;
    }
    if (destCapacity < srcLength)
    {
      if (pDestLength) {
        *pDestLength = srcLength;
      }
      int32_t v6 = 0;
      UErrorCode v9 = U_BUFFER_OVERFLOW_ERROR;
      goto LABEL_15;
    }
    if (v11 - src < 4)
    {
      BOOL v15 = dest;
LABEL_65:
      while (src < v11)
      {
        BOOL v30 = src + 1;
        unsigned int v29 = *(unsigned __int8 *)src;
        if (v29 > 0xBF)
        {
          if (v29 > 0xDF)
          {
            uint64_t v32 = v11 - v30;
            if (v29 > 0xEF)
            {
              if (v32 < 3) {
                goto LABEL_78;
              }
              unsigned int v33 = (v29 << 18)
                  - 63447168
                  + (*((unsigned __int8 *)src + 1) << 12)
                  + (*((unsigned __int8 *)src + 2) << 6)
                  + *((unsigned __int8 *)src + 3);
              *BOOL v15 = (v33 >> 10) - 10304;
              v15[1] = v33 & 0x3FF | 0xDC00;
              v15 += 2;
              src += 8;
            }
            else
            {
              if (v32 < 2) {
                goto LABEL_78;
              }
              *v15++ = (*((unsigned __int8 *)src + 1) << 6) + ((_WORD)v29 << 12) + *((unsigned __int8 *)src + 2) - 8320;
              src += 6;
            }
          }
          else
          {
            if (v30 >= v11) {
              goto LABEL_78;
            }
            __int16 v31 = *((unsigned __int8 *)src + 1);
            src += 2;
            *v15++ = v31 + ((_WORD)v29 << 6) - 12416;
          }
        }
        else
        {
          *v15++ = v29;
          ++src;
        }
      }
      int v12 = 0;
      goto LABEL_97;
    }
    BOOL v15 = dest;
    while (1)
    {
      unsigned int v21 = *(unsigned __int8 *)src;
      if (v21 > 0xBF)
      {
        int v22 = *((unsigned __int8 *)src + 1);
        if (v21 > 0xDF)
        {
          if (v21 > 0xEF)
          {
            int v26 = *((unsigned __int8 *)src + 2);
            int v27 = *((unsigned __int8 *)src + 3);
            src += 4;
            unsigned int v28 = (v21 << 18) - 63447168 + (v22 << 12) + (v26 << 6) + v27;
            *BOOL v15 = (v28 >> 10) - 10304;
            v15[1] = v28 & 0x3FF | 0xDC00;
            v15 += 2;
            goto LABEL_61;
          }
          __int16 v24 = ((_WORD)v22 << 6) + ((_WORD)v21 << 12);
          __int16 v25 = *((unsigned __int8 *)src + 2);
          src += 3;
          UChar v23 = v24 + v25 - 8320;
        }
        else
        {
          src += 2;
          UChar v23 = v22 + ((_WORD)v21 << 6) - 12416;
        }
        *v15++ = v23;
      }
      else
      {
        *v15++ = v21;
        ++src;
      }
LABEL_61:
      if (src >= v11 - 3) {
        goto LABEL_65;
      }
    }
  }
  int v12 = 0;
  if (dest) {
    BOOL v13 = &dest[destCapacity];
  }
  else {
    BOOL v13 = 0;
  }
  unsigned int v14 = *(unsigned __int8 *)src;
  if (!*src || v13 <= dest)
  {
    BOOL v15 = dest;
    goto LABEL_94;
  }
  BOOL v15 = dest;
  while (1)
  {
    if (v14 <= 0xBF)
    {
      *v15++ = v14;
      ++src;
      goto LABEL_45;
    }
    if (v14 <= 0xDF)
    {
      if (!src[1]) {
        goto LABEL_78;
      }
      *v15++ = *((unsigned __int8 *)src + 1) + ((_WORD)v14 << 6) - 12416;
      src += 2;
      goto LABEL_45;
    }
    int v16 = *((unsigned __int8 *)src + 1);
    if (v14 > 0xEF) {
      break;
    }
    if (!src[1] || !src[2]) {
      goto LABEL_78;
    }
    *v15++ = ((_WORD)v16 << 6) + ((_WORD)v14 << 12) + *((unsigned __int8 *)src + 2) - 8320;
    src += 3;
LABEL_45:
    unsigned int v14 = *(unsigned __int8 *)src;
    if (*src) {
      BOOL v20 = v15 >= v13;
    }
    else {
      BOOL v20 = 1;
    }
    if (v20)
    {
      int v12 = 0;
      goto LABEL_94;
    }
  }
  if (!src[1] || (v17 = *((unsigned __int8 *)src + 2), !src[2]) || (int v18 = *((unsigned __int8 *)src + 3), !src[3]))
  {
LABEL_78:
    int v12 = 0;
    *v15++ = -3;
    goto LABEL_97;
  }
  src += 4;
  unsigned int v19 = (v14 << 18) - 63447168 + (v16 << 12) + (v17 << 6) + v18;
  *BOOL v15 = (v19 >> 10) - 10304;
  if (v15 + 1 < v13)
  {
    v15[1] = v19 & 0x3FF | 0xDC00;
    v15 += 2;
    goto LABEL_45;
  }
  unsigned int v14 = *(unsigned __int8 *)src;
  int v12 = 1;
  ++v15;
LABEL_94:
  while (v14)
  {
    if (v14 > 0xBF)
    {
      if (v14 > 0xDF)
      {
        if (v14 > 0xEF)
        {
          if (!src[1] || !src[2] || !src[3])
          {
LABEL_96:
            ++v12;
            break;
          }
          int v34 = 2;
          uint64_t v35 = 4;
        }
        else
        {
          if (!src[1] || !src[2]) {
            goto LABEL_96;
          }
          int v34 = 1;
          uint64_t v35 = 3;
        }
      }
      else
      {
        if (!src[1]) {
          goto LABEL_96;
        }
        int v34 = 1;
        uint64_t v35 = 2;
      }
    }
    else
    {
      int v34 = 1;
      uint64_t v35 = 1;
    }
    v12 += v34;
    src += v35;
    unsigned int v14 = *(unsigned __int8 *)src;
  }
LABEL_97:
  uint64_t v36 = v12 + ((unint64_t)((char *)v15 - (char *)v6) >> 1);
  if (pDestLength) {
    *pDestLength = v36;
  }
  u_terminateUChars((uint64_t)v6, destCapacity, v36, (int *)pErrorCode);
  return v6;
}

char *__cdecl u_strToUTF8WithSub(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
{
  BOOL result = 0;
  if (dest) {
    char v10 = &dest[destCapacity];
  }
  else {
    char v10 = 0;
  }
  if (*(int *)pErrorCode > 0) {
    return result;
  }
  if (src) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = srcLength == 0;
  }
  char v14 = !v13;
  if (destCapacity < 0
    || srcLength < -1
    || (v14 & 1) != 0
    || (destCapacity ? (BOOL v15 = dest == 0) : (BOOL v15 = 0), v15 || subchar >= 1114112 || (subchar & 0xFFFFF800) == 0xD800))
  {
    BOOL result = 0;
    UErrorCode v30 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_63:
    *pErrorCode = v30;
    return result;
  }
  if (pNumSubstitutions) {
    *pNumSubstitutions = 0;
  }
  if (srcLength == -1)
  {
    unsigned int v29 = *src;
    if (!*src)
    {
      int32_t v23 = 0;
      LODWORD(v24) = dest;
      goto LABEL_166;
    }
    int32_t v23 = 0;
    __int16 v24 = dest;
    while (1)
    {
      __int16 v31 = src + 1;
      if ((unsigned __int16)v29 > 0x7Fu)
      {
        if ((unsigned __int16)v29 > 0x7FFu)
        {
          if ((unsigned __int16)((unsigned __int16)(v29 + 0x2000) >> 11) <= 0x1Eu)
          {
            if (v10 - v24 < 3)
            {
              unsigned int v29 = 3;
              goto LABEL_173;
            }
            *__int16 v24 = ((unsigned __int16)v29 >> 12) | 0xE0;
            v24[1] = ((unsigned __int16)v29 >> 6) & 0x3F | 0x80;
            v24[2] = v29 & 0x3F | 0x80;
LABEL_76:
            v24 += 3;
            goto LABEL_96;
          }
          if ((v29 & 0x400) != 0 || (int v32 = *v31, (v32 & 0xFC00) != 0xDC00))
          {
            if (subchar < 0)
            {
LABEL_200:
              BOOL result = 0;
              UErrorCode v30 = U_INVALID_CHAR_FOUND;
              goto LABEL_63;
            }
            ++v23;
            unsigned int v33 = subchar;
          }
          else
          {
            __int16 v31 = src + 2;
            unsigned int v33 = v32 + ((unsigned __int16)v29 << 10) - 56613888;
          }
          if (v33 >= 0x80)
          {
            if (v33 >= 0x800)
            {
              if (v33 >> 11 >= 0x1B)
              {
                if (v33 - 1114112 >= 0xFFEFE000)
                {
                  if (v33 < 0x10000) {
                    unsigned int v29 = 3;
                  }
                  else {
                    unsigned int v29 = 4;
                  }
                }
                else
                {
                  unsigned int v29 = 0;
                }
              }
              else
              {
                unsigned int v29 = 3;
              }
            }
            else
            {
              unsigned int v29 = 2;
            }
          }
          else
          {
            unsigned int v29 = 1;
          }
          if (v10 - v24 < v29) {
            goto LABEL_173;
          }
          if ((int)v33 <= 127)
          {
            *v24++ = v33;
            goto LABEL_96;
          }
          if (v33 > 0x7FF)
          {
            if (HIWORD(v33))
            {
              *__int16 v24 = (v33 >> 18) | 0xF0;
              v24[1] = (v33 >> 12) & 0x3F | 0x80;
              v24[2] = (v33 >> 6) & 0x3F | 0x80;
              v24[3] = v33 & 0x3F | 0x80;
              v24 += 4;
              goto LABEL_96;
            }
            *__int16 v24 = (v33 >> 12) | 0xE0;
            v24[1] = (v33 >> 6) & 0x3F | 0x80;
            v24[2] = v33 & 0x3F | 0x80;
            goto LABEL_76;
          }
          *__int16 v24 = (v33 >> 6) | 0xC0;
          v24[1] = v33 & 0x3F | 0x80;
        }
        else
        {
          if (v10 - v24 < 2)
          {
            unsigned int v29 = 2;
            goto LABEL_173;
          }
          *__int16 v24 = ((unsigned __int16)v29 >> 6) | 0xC0;
          v24[1] = v29 & 0x3F | 0x80;
        }
        v24 += 2;
      }
      else
      {
        if (v24 >= v10)
        {
          unsigned int v29 = 1;
LABEL_173:
          unsigned int v49 = *v31;
          if (!*v31) {
            goto LABEL_166;
          }
          if (subchar < 0x10000) {
            int v50 = 3;
          }
          else {
            int v50 = 4;
          }
          if (subchar < 0x80) {
            int v51 = 1;
          }
          else {
            int v51 = 2;
          }
          if (subchar >= 0x800) {
            int v52 = 3;
          }
          else {
            int v52 = v51;
          }
          if (subchar < 0xE000) {
            int v50 = 0;
          }
          if (subchar >> 11 >= 0x1B) {
            int v52 = v50;
          }
          while (1)
          {
            char v53 = v31 + 1;
            if (v49 > 0x7F)
            {
              if (v49 > 0x7FF)
              {
                if ((v49 & 0xF800) == 0xD800)
                {
                  if ((v49 & 0x400) != 0 || (*v53 & 0xFC00) != 0xDC00)
                  {
                    if (subchar < 0) {
                      goto LABEL_200;
                    }
                    v29 += v52;
                    ++v23;
                  }
                  else
                  {
                    char v53 = v31 + 2;
                    v29 += 4;
                  }
                }
                else
                {
                  v29 += 3;
                }
              }
              else
              {
                v29 += 2;
              }
            }
            else
            {
              ++v29;
            }
            unsigned int v49 = *v53;
            __int16 v31 = v53;
            if (!*v53) {
              goto LABEL_166;
            }
          }
        }
        *v24++ = v29;
      }
LABEL_96:
      unsigned int v29 = *v31;
      src = v31;
      if (!*v31) {
        goto LABEL_166;
      }
    }
  }
  if (src) {
    unsigned int v19 = &src[srcLength];
  }
  else {
    unsigned int v19 = 0;
  }
  unint64_t v20 = (unsigned __int128)((v10 - dest) * (__int128)0x5555555555555556) >> 64;
  int v21 = v20 + (v20 >> 63);
  if (v21 >= (int)((unint64_t)((char *)v19 - (char *)src) >> 1)) {
    int v22 = (unint64_t)((char *)v19 - (char *)src) >> 1;
  }
  else {
    int v22 = v21;
  }
  if (v22 >= 3)
  {
    int32_t v23 = 0;
    unsigned int v34 = (subchar >> 6) & 0x3F | 0xFFFFFF80;
    char v35 = subchar & 0x3F | 0x80;
    __int16 v24 = dest;
    while (1)
    {
      uint64_t v36 = src + 1;
      unsigned int v37 = *src;
      if (v37 > 0x7F)
      {
        if (v37 > 0x7FF)
        {
          if ((unsigned __int16)((unsigned __int16)(v37 + 0x2000) >> 11) <= 0x1Eu)
          {
            *__int16 v24 = (v37 >> 12) | 0xE0;
            v24[1] = (v37 >> 6) & 0x3F | 0x80;
            v24[2] = v37 & 0x3F | 0x80;
LABEL_111:
            v24 += 3;
            goto LABEL_112;
          }
          if (!--v22) {
            goto LABEL_114;
          }
          if ((v37 & 0x400) == 0)
          {
            int v40 = *v36;
            if ((v40 & 0xFC00) == 0xDC00)
            {
              uint64_t v36 = src + 2;
              unsigned int v41 = (v37 << 10) - 56613888 + v40;
              *__int16 v24 = (v41 >> 18) | 0xF0;
              v24[1] = (v41 >> 12) & 0x3F | 0x80;
              v24[2] = (v41 >> 6) & 0x3F | 0x80;
              v24[3] = v40 & 0x3F | 0x80;
LABEL_130:
              v24 += 4;
              goto LABEL_112;
            }
          }
          if (subchar < 0) {
            goto LABEL_200;
          }
          ++v23;
          if (subchar <= 0x7F)
          {
            *v24++ = subchar;
            goto LABEL_112;
          }
          if (subchar > 0x7FF)
          {
            if (HIWORD(subchar))
            {
              *__int16 v24 = (subchar >> 18) | 0xF0;
              v24[1] = (subchar >> 12) & 0x3F | 0x80;
              v24[2] = v34;
              v24[3] = v35;
              goto LABEL_130;
            }
            *__int16 v24 = (subchar >> 12) | 0xE0;
            v24[1] = v34;
            v24[2] = v35;
            goto LABEL_111;
          }
          *__int16 v24 = (subchar >> 6) | 0xC0;
          v24[1] = v35;
        }
        else
        {
          *__int16 v24 = (v37 >> 6) | 0xC0;
          v24[1] = v37 & 0x3F | 0x80;
        }
        v24 += 2;
      }
      else
      {
        *v24++ = v37;
      }
LABEL_112:
      src = v36;
      BOOL v38 = __OFSUB__(v22--, 1);
      if ((v22 < 0) ^ v38 | (v22 == 0))
      {
LABEL_114:
        unint64_t v39 = (unsigned __int128)((v10 - v24) * (__int128)0x5555555555555556) >> 64;
        int v22 = v39 + (v39 >> 63);
        if (v22 >= (int)((unint64_t)((char *)v19 - (char *)src) >> 1)) {
          int v22 = (unint64_t)((char *)v19 - (char *)src) >> 1;
        }
        if (v22 < 3) {
          goto LABEL_31;
        }
      }
    }
  }
  int32_t v23 = 0;
  __int16 v24 = dest;
LABEL_31:
  if (src >= v19)
  {
LABEL_61:
    unsigned int v29 = 0;
    goto LABEL_138;
  }
  while (1)
  {
    int v26 = src + 1;
    unsigned int v25 = *src;
    if (v25 <= 0x7F)
    {
      if (v24 >= v10)
      {
        unsigned int v29 = 1;
        goto LABEL_137;
      }
      *v24++ = v25;
      goto LABEL_60;
    }
    if (v25 > 0x7FF) {
      break;
    }
    if (v10 - v24 < 2)
    {
      unsigned int v29 = 2;
      goto LABEL_137;
    }
    *__int16 v24 = (v25 >> 6) | 0xC0;
    v24[1] = v25 & 0x3F | 0x80;
    v24 += 2;
LABEL_60:
    src = v26;
    if (v26 >= v19) {
      goto LABEL_61;
    }
  }
  if ((unsigned __int16)((unsigned __int16)(v25 + 0x2000) >> 11) > 0x1Eu)
  {
    if ((v25 & 0x400) != 0 || v26 >= v19 || (int v27 = *v26, (v27 & 0xFC00) != 0xDC00))
    {
      if (subchar < 0) {
        goto LABEL_200;
      }
      ++v23;
      unsigned int v28 = subchar;
    }
    else
    {
      int v26 = src + 2;
      unsigned int v28 = v27 + (v25 << 10) - 56613888;
    }
    if (v28 >= 0x80)
    {
      if (v28 >= 0x800)
      {
        if (v28 >> 11 >= 0x1B)
        {
          if (v28 - 1114112 >= 0xFFEFE000)
          {
            if (v28 < 0x10000) {
              unsigned int v29 = 3;
            }
            else {
              unsigned int v29 = 4;
            }
          }
          else
          {
            unsigned int v29 = 0;
          }
        }
        else
        {
          unsigned int v29 = 3;
        }
      }
      else
      {
        unsigned int v29 = 2;
      }
    }
    else
    {
      unsigned int v29 = 1;
    }
    if (v10 - v24 < v29) {
      goto LABEL_137;
    }
    __int16 v24 = sub_18C8B9690(v24, v28);
    goto LABEL_60;
  }
  if (v10 - v24 >= 3)
  {
    *__int16 v24 = (v25 >> 12) | 0xE0;
    v24[1] = (v25 >> 6) & 0x3F | 0x80;
    v24[2] = v25 & 0x3F | 0x80;
    v24 += 3;
    goto LABEL_60;
  }
  unsigned int v29 = 3;
LABEL_137:
  src = v26;
LABEL_138:
  if (src < v19)
  {
    if (subchar < 0x10000) {
      int v42 = 3;
    }
    else {
      int v42 = 4;
    }
    if (subchar < 0x80) {
      int v43 = 1;
    }
    else {
      int v43 = 2;
    }
    if (subchar >= 0x800) {
      int v44 = 3;
    }
    else {
      int v44 = v43;
    }
    if (subchar < 0xE000) {
      int v42 = 0;
    }
    if (subchar >> 11 >= 0x1B) {
      int v44 = v42;
    }
    int32_t v45 = src;
    do
    {
      unsigned int v47 = *v45++;
      unsigned int v46 = v47;
      if (v47 > 0x7F)
      {
        if (v46 > 0x7FF)
        {
          if ((v46 & 0xF800) == 0xD800)
          {
            if ((v46 & 0x400) != 0 || v45 >= v19 || (*v45 & 0xFC00) != 0xDC00)
            {
              if (subchar < 0) {
                goto LABEL_200;
              }
              v29 += v44;
              ++v23;
            }
            else
            {
              int32_t v45 = src + 2;
              v29 += 4;
            }
          }
          else
          {
            v29 += 3;
          }
        }
        else
        {
          v29 += 2;
        }
      }
      else
      {
        ++v29;
      }
      src = v45;
    }
    while (v45 < v19);
  }
LABEL_166:
  if (pNumSubstitutions) {
    *pNumSubstitutions = v23;
  }
  uint64_t v48 = v29 + v24 - dest;
  if (pDestLength) {
    *pDestLength = v48;
  }
  u_terminateChars((uint64_t)dest, destCapacity, v48, (int *)pErrorCode);
  return dest;
}

unsigned char *sub_18C8B9690(unsigned char *a1, unsigned int a2)
{
  if ((int)a2 > 127)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        *a1 = (a2 >> 18) | 0xF0;
        a1[1] = (a2 >> 12) & 0x3F | 0x80;
        a1[2] = (a2 >> 6) & 0x3F | 0x80;
        a1[3] = a2 & 0x3F | 0x80;
        return a1 + 4;
      }
      else
      {
        *a1 = (a2 >> 12) | 0xE0;
        a1[1] = (a2 >> 6) & 0x3F | 0x80;
        a1[2] = a2 & 0x3F | 0x80;
        return a1 + 3;
      }
    }
    else
    {
      *a1 = (a2 >> 6) | 0xC0;
      a1[1] = a2 & 0x3F | 0x80;
      return a1 + 2;
    }
  }
  else
  {
    *a1 = a2;
    return a1 + 1;
  }
}

char *__cdecl u_strToUTF8(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return u_strToUTF8WithSub(dest, destCapacity, pDestLength, src, srcLength, -1, 0, pErrorCode);
}

UChar *__cdecl u_strFromJavaModifiedUTF8WithSub(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
{
  if (*(int *)pErrorCode > 0) {
    return 0;
  }
  int32_t v10 = srcLength;
  BOOL v11 = src;
  if (src) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = srcLength == 0;
  }
  char v13 = !v12;
  if (srcLength < -1
    || (v13 & 1) != 0
    || ((int32_t v14 = destCapacity, (v8 = dest) == 0) ? (v15 = destCapacity == 0) : (v15 = 1),
        v15 ? (char v16 = 0) : (char v16 = 1),
        destCapacity < 0 || (v16 & 1) != 0 || subchar >= 1114112 || (subchar & 0xFFFFF800) == 0xD800))
  {
    char v8 = 0;
    UErrorCode v21 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_26:
    *pErrorCode = v21;
    return v8;
  }
  if (pNumSubstitutions) {
    *pNumSubstitutions = 0;
  }
  unsigned int v19 = &dest[destCapacity];
  if (srcLength < 0)
  {
    int v23 = *(unsigned __int8 *)src;
    if (*src >= 1 && destCapacity)
    {
      unint64_t v20 = dest;
      do
      {
        *v20++ = v23;
        int v24 = *++v11;
        int v23 = v24;
      }
      while (v24 >= 1 && v20 < v19);
    }
    else
    {
      unint64_t v20 = dest;
    }
    if (!v23)
    {
      uint64_t v47 = (unint64_t)((char *)v20 - (char *)dest) >> 1;
      if (pDestLength) {
        *pDestLength = v47;
      }
      goto LABEL_141;
    }
    v70 = pDestLength;
    int32_t v71 = pNumSubstitutions;
    int32_t v10 = strlen(v11);
  }
  else
  {
    v70 = pDestLength;
    int32_t v71 = pNumSubstitutions;
    unint64_t v20 = dest;
  }
  int32_t v26 = 0;
  puint64_t i = 0;
LABEL_41:
  unint64_t v27 = (unint64_t)((char *)v19 - (char *)v20) >> 1;
  int32_t v28 = pi;
  int v29 = v10 - pi;
  if (v10 >= 1 && v29 <= (int)v27 && (*v11 & 0x80000000) == 0)
  {
    if (v10 <= pi)
    {
      int32_t v31 = pi;
    }
    else
    {
      UErrorCode v30 = &v11[pi];
      int32_t v31 = pi;
      while (1)
      {
        int v33 = *v30++;
        unsigned __int8 v32 = v33;
        if (v33 < 0) {
          break;
        }
        *v20++ = v32;
        puint64_t i = ++v31;
        if (v10 == v31)
        {
          int32_t v31 = v10;
          break;
        }
      }
    }
    int v34 = v31 - v28;
    LODWORD(v27) = v27 - v34;
    v29 -= v34;
  }
  if (subchar < 0x10000)
  {
    int v35 = v29 / 3;
    if ((int)v27 >= v35) {
      LODWORD(v27) = v35;
    }
    if ((int)v27 >= 3)
    {
      int v36 = v27 + 1;
      while (1)
      {
        uint64_t v37 = pi;
        uint64_t v38 = ++pi;
        unsigned int v39 = v11[v37];
        if (v11[v37] < 0)
        {
          if (v39 < 0xE0)
          {
            if (v39 < 0xC0 || (unsigned int v43 = v11[v38] ^ 0x80, v43 > 0x3F))
            {
LABEL_67:
              if (subchar < 0) {
                goto LABEL_142;
              }
              utf8_nextCharSafeBody((const uint8_t *)v11, &pi, v10, v39, -1);
              ++v26;
              *unint64_t v20 = subchar;
              goto LABEL_69;
            }
            *unint64_t v20 = ((v39 & 0x1F) << 6) | v43;
            int32_t v42 = v37 + 2;
          }
          else
          {
            if (v39 > 0xEF) {
              goto LABEL_67;
            }
            unsigned int v40 = v11[v38] ^ 0x80;
            if (v40 > 0x3F) {
              goto LABEL_67;
            }
            unsigned int v41 = v11[v37 + 2] ^ 0x80;
            if (v41 > 0x3F) {
              goto LABEL_67;
            }
            *unint64_t v20 = ((_WORD)v40 << 6) | ((_WORD)v39 << 12) | v41;
            int32_t v42 = v37 + 3;
          }
          puint64_t i = v42;
        }
        else
        {
          *unint64_t v20 = v39;
        }
LABEL_69:
        ++v20;
        if (--v36 <= 1) {
          goto LABEL_41;
        }
      }
    }
  }
  LODWORD(v44) = pi;
  if (pi >= v10 || v20 >= v19)
  {
    int v46 = 0;
    uint64_t v48 = v71;
    goto LABEL_112;
  }
  uint64_t v48 = v71;
  while (1)
  {
    while (1)
    {
      uint64_t v49 = (int)v44;
      uint64_t v50 = (int)v44 + 1;
      puint64_t i = v44 + 1;
      int v51 = v11[(int)v44];
      unsigned int v52 = v51;
      if ((v51 & 0x80000000) == 0)
      {
        *v20++ = v51;
        goto LABEL_106;
      }
      if (v51 >= 0xE0u) {
        break;
      }
      if (v51 < 0xC0u || (int)v50 >= v10) {
        goto LABEL_100;
      }
      unsigned int v60 = v11[v50] ^ 0x80;
      if (v60 > 0x3F) {
        goto LABEL_100;
      }
      UChar v57 = ((v52 & 0x1F) << 6) | v60;
      int v58 = 2;
LABEL_97:
      *v20++ = v57;
      LODWORD(v44) = v49 + v58;
      puint64_t i = v49 + v58;
      if ((int)v49 + v58 >= v10 || v20 >= v19) {
        goto LABEL_111;
      }
    }
    uint64_t v53 = v49 + 2;
    if (v52 <= 0xEF && (int)v53 < v10)
    {
      unsigned int v55 = v11[v50] ^ 0x80;
      if (v55 <= 0x3F)
      {
        unsigned int v56 = v11[v53] ^ 0x80;
        if (v56 <= 0x3F)
        {
          UChar v57 = ((_WORD)v55 << 6) | ((_WORD)v52 << 12) | v56;
          int v58 = 3;
          goto LABEL_97;
        }
      }
    }
LABEL_100:
    if (subchar < 0)
    {
LABEL_142:
      char v8 = 0;
      UErrorCode v21 = U_INVALID_CHAR_FOUND;
      goto LABEL_26;
    }
    utf8_nextCharSafeBody((const uint8_t *)v11, &pi, v10, v52, -1);
    ++v26;
    if (HIWORD(subchar)) {
      break;
    }
    *v20++ = subchar;
LABEL_106:
    LODWORD(v44) = pi;
    if (pi >= v10 || v20 >= v19)
    {
LABEL_111:
      int v46 = 0;
      goto LABEL_112;
    }
  }
  *unint64_t v20 = (subchar >> 10) - 10304;
  if (v20 + 1 < v19)
  {
    v20[1] = subchar & 0x3FF | 0xDC00;
    v20 += 2;
    goto LABEL_106;
  }
  LODWORD(v44) = pi;
  ++v20;
  int v46 = 1;
LABEL_112:
  while ((int)v44 < v10)
  {
    int v62 = v44;
    while (1)
    {
      uint64_t v63 = v62;
      uint64_t v44 = v62 + 1;
      puint64_t i = v62 + 1;
      int v64 = v11[v62];
      if ((v64 & 0x80000000) == 0) {
        break;
      }
      unsigned int v65 = v64;
      if (v64 < 0xE0u)
      {
        BOOL v69 = v64 >= 0xC0u && (int)v44 < v10;
        if (!v69 || v11[v44] >= -64)
        {
LABEL_133:
          if (subchar < 0) {
            goto LABEL_142;
          }
          utf8_nextCharSafeBody((const uint8_t *)v11, &pi, v10, v65, -1);
          ++v26;
          LODWORD(v44) = pi;
          break;
        }
        int v68 = 2;
      }
      else
      {
        uint64_t v66 = v63 + 2;
        BOOL v67 = v65 <= 0xEF && (int)v66 < v10;
        if (!v67 || v11[v44] > -65 || v11[v66] > -65) {
          goto LABEL_133;
        }
        int v68 = 3;
      }
      int v62 = v63 + v68;
      ++v46;
      puint64_t i = v63 + v68;
      if ((int)v63 + v68 >= v10) {
        goto LABEL_136;
      }
    }
    ++v46;
  }
LABEL_136:
  if (v48) {
    *uint64_t v48 = v26;
  }
  uint64_t v47 = v46 + ((unint64_t)((char *)v20 - (char *)v8) >> 1);
  if (v70) {
    int32_t *v70 = v47;
  }
  dest = v8;
  destCapacity = v14;
LABEL_141:
  u_terminateUChars((uint64_t)dest, destCapacity, v47, (int *)pErrorCode);
  return v8;
}

char *__cdecl u_strToJavaModifiedUTF8(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  if (*(int *)pErrorCode > 0) {
    return 0;
  }
  char v8 = src;
  if (src) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = srcLength == 0;
  }
  char v10 = !v9;
  if (srcLength < -1
    || (v10 & 1) != 0
    || ((int32_t v6 = dest) == 0 ? (v12 = destCapacity == 0) : (v12 = 1), v12 ? (v13 = 0) : (v13 = 1), destCapacity < 0 || v13))
  {
    int32_t v6 = 0;
    *pErrorCode = U_ILLEGAL_ARGUMENT_ERROR;
    return v6;
  }
  BOOL v15 = &dest[destCapacity];
  if (srcLength == -1)
  {
    int v17 = *src;
    if ((v17 - 1) <= 0x7E && destCapacity)
    {
      char v18 = *src;
      char v16 = dest;
      do
      {
        *v16++ = v18;
        int v19 = v8[1];
        ++v8;
        int v17 = v19;
        char v18 = v19;
      }
      while ((v19 - 1) <= 0x7E && v16 < v15);
    }
    else
    {
      char v16 = dest;
    }
    if (!v17)
    {
      uint64_t v38 = (v16 - dest);
      if (pDestLength) {
        goto LABEL_82;
      }
      goto LABEL_83;
    }
    srcLength = u_strlen(v8);
  }
  else
  {
    char v16 = dest;
  }
  UErrorCode v21 = &v8[srcLength];
  if (!v8) {
    UErrorCode v21 = 0;
  }
  while (1)
  {
    int v22 = v15 - v16;
    unint64_t v23 = (unint64_t)((char *)v21 - (char *)v8) >> 1;
    BOOL v24 = (int)v15 - (int)v16 < (int)v23 || (int)v23 < 1;
    if (!v24 && *v8 <= 0x7Fu)
    {
      unsigned int v25 = (char *)v8;
      if (v8 < v21)
      {
        do
        {
          int v26 = *(unsigned __int16 *)v25;
          if ((v26 - 1) > 0x7E) {
            break;
          }
          *v16++ = v26;
          v25 += 2;
        }
        while (v25 < (char *)v21);
      }
      unint64_t v27 = (unint64_t)(v25 - (char *)v8) >> 1;
      v22 -= v27;
      LODWORD(v23) = v23 - v27;
      char v8 = (const UChar *)v25;
    }
    int v28 = v22 / 3;
    if (v28 < (int)v23) {
      LODWORD(v23) = v28;
    }
    if ((int)v23 < 3) {
      break;
    }
    int v29 = v23 + 1;
    do
    {
      unsigned int v31 = *v8++;
      unsigned int v30 = v31;
      if (v31 - 1 > 0x7E)
      {
        char v32 = v30 & 0x3F | 0x80;
        if (v30 > 0x7FF)
        {
          *char v16 = (v30 >> 12) | 0xE0;
          v16[1] = (v30 >> 6) & 0x3F | 0x80;
          v16[2] = v32;
          v16 += 3;
        }
        else
        {
          *char v16 = (v30 >> 6) | 0xC0;
          v16[1] = v32;
          v16 += 2;
        }
      }
      else
      {
        *v16++ = v30;
      }
      --v29;
    }
    while (v29 > 1);
  }
  if (v8 >= v21)
  {
    int v37 = 0;
    goto LABEL_74;
  }
  while (1)
  {
    int v33 = v8;
    unsigned int v35 = *v8++;
    unsigned int v34 = v35;
    if (v35 - 1 <= 0x7E)
    {
      if (v16 >= v15)
      {
        int v37 = 1;
        goto LABEL_73;
      }
      *v16++ = v34;
      goto LABEL_65;
    }
    uint64_t v36 = v15 - v16;
    if (v34 > 0x7FF) {
      break;
    }
    if (v36 < 2)
    {
      int v37 = 2;
      goto LABEL_73;
    }
    *char v16 = (v34 >> 6) | 0xC0;
    v16[1] = v34 & 0x3F | 0x80;
    v16 += 2;
LABEL_65:
    if (v8 >= v21)
    {
      int v37 = 0;
      goto LABEL_73;
    }
  }
  if (v36 >= 3)
  {
    *char v16 = (v34 >> 12) | 0xE0;
    v16[1] = (v34 >> 6) & 0x3F | 0x80;
    v16[2] = v34 & 0x3F | 0x80;
    v16 += 3;
    goto LABEL_65;
  }
  int v37 = 3;
LABEL_73:
  char v8 = v33 + 1;
LABEL_74:
  while (v8 < v21)
  {
    unsigned int v39 = *v8++;
    unsigned int v40 = v39 - 1;
    if (v39 < 0x800) {
      int v41 = 2;
    }
    else {
      int v41 = 3;
    }
    if (v40 < 0x7F) {
      int v41 = 1;
    }
    v37 += v41;
  }
  uint64_t v38 = (v37 + v16 - v6);
  if (pDestLength) {
LABEL_82:
  }
    *pDestLength = v38;
LABEL_83:
  u_terminateChars((uint64_t)v6, destCapacity, v38, (int *)pErrorCode);
  return v6;
}

UBool utext_moveIndex32(UText *ut, int32_t delta)
{
  int32_t v2 = delta;
  if (delta < 1)
  {
    if (delta < 0)
    {
      do
      {
        int32_t chunkOffset = ut->chunkOffset;
        if (chunkOffset <= 0)
        {
          int v6 = ((uint64_t (*)(UText *, int64_t, void))ut->pFuncs->access)(ut, ut->chunkNativeStart, 0);
          if (!v6) {
            return v6;
          }
          int32_t chunkOffset = ut->chunkOffset;
        }
        int32_t v8 = chunkOffset - 1;
        if ((ut->chunkContents[v8] & 0xF800) == 0xD800)
        {
          if (utext_previous32(ut) == -1)
          {
LABEL_23:
            LOBYTE(v6) = 0;
            return v6;
          }
        }
        else
        {
          ut->int32_t chunkOffset = v8;
        }
      }
      while (!__CFADD__(v2++, 1));
    }
  }
  else
  {
    int v4 = delta + 1;
    do
    {
      int32_t v5 = ut->chunkOffset;
      if (v5 >= ut->chunkLength)
      {
        int v6 = ((uint64_t (*)(UText *, int64_t, uint64_t))ut->pFuncs->access)(ut, ut->chunkNativeLimit, 1);
        if (!v6) {
          return v6;
        }
        int32_t v5 = ut->chunkOffset;
      }
      if ((ut->chunkContents[v5] & 0xF800) == 0xD800)
      {
        if (utext_next32(ut) == -1) {
          goto LABEL_23;
        }
      }
      else
      {
        ut->int32_t chunkOffset = v5 + 1;
      }
      --v4;
    }
    while (v4 > 1);
  }
  LOBYTE(v6) = 1;
  return v6;
}

UChar32 utext_next32(UText *ut)
{
  int32_t chunkOffset = ut->chunkOffset;
  if (chunkOffset >= ut->chunkLength)
  {
    if (!((unsigned int (*)(UText *, int64_t, uint64_t))ut->pFuncs->access)(ut, ut->chunkNativeLimit, 1)) {
      return -1;
    }
    int32_t chunkOffset = ut->chunkOffset;
  }
  chunkContents = ut->chunkContents;
  int32_t v4 = chunkOffset + 1;
  ut->int32_t chunkOffset = chunkOffset + 1;
  UChar32 v5 = chunkContents[chunkOffset];
  if ((v5 & 0xFC00) == 0xD800)
  {
    if (v4 >= ut->chunkLength)
    {
      if (!((unsigned int (*)(UText *, int64_t, uint64_t))ut->pFuncs->access)(ut, ut->chunkNativeLimit, 1)) {
        return v5;
      }
      chunkContents = ut->chunkContents;
      int32_t v4 = ut->chunkOffset;
    }
    int v6 = chunkContents[v4];
    if ((v6 & 0xFC00) == 0xDC00)
    {
      UChar32 v5 = v6 + (v5 << 10) - 56613888;
      ut->int32_t chunkOffset = v4 + 1;
    }
  }
  return v5;
}

UChar32 utext_previous32(UText *ut)
{
  int32_t chunkOffset = ut->chunkOffset;
  if (chunkOffset <= 0)
  {
    if (!((unsigned int (*)(UText *, int64_t, void))ut->pFuncs->access)(ut, ut->chunkNativeStart, 0)) {
      return -1;
    }
    int32_t chunkOffset = ut->chunkOffset;
  }
  int32_t v3 = chunkOffset - 1;
  ut->int32_t chunkOffset = chunkOffset - 1;
  chunkContents = ut->chunkContents;
  UChar32 v5 = chunkContents[chunkOffset - 1];
  if ((v5 & 0xFC00) == 0xDC00)
  {
    if (chunkOffset <= 1)
    {
      if (!((unsigned int (*)(UText *, int64_t, void))ut->pFuncs->access)(ut, ut->chunkNativeStart, 0)) {
        return v5;
      }
      chunkContents = ut->chunkContents;
      int32_t v3 = ut->chunkOffset;
    }
    int32_t v6 = v3 - 1;
    int v7 = chunkContents[v6];
    if ((v7 & 0xFC00) == 0xD800)
    {
      UChar32 v5 = v5 + (v7 << 10) - 56613888;
      ut->int32_t chunkOffset = v6;
    }
  }
  return v5;
}

int64_t utext_nativeLength(UText *ut)
{
  return ((uint64_t (*)(void))ut->pFuncs->nativeLength)();
}

UBool utext_isLengthExpensive(const UText *ut)
{
  return (LOBYTE(ut->providerProperties) >> 1) & 1;
}

int64_t utext_getNativeIndex(const UText *ut)
{
  uint64_t chunkOffset = ut->chunkOffset;
  if ((int)chunkOffset <= ut->nativeIndexingLimit) {
    return ut->chunkNativeStart + chunkOffset;
  }
  else {
    return ((uint64_t (*)(void))ut->pFuncs->mapOffsetToNative)();
  }
}

void utext_setNativeIndex(UText *ut, int64_t nativeIndex)
{
  int64_t chunkNativeStart = ut->chunkNativeStart;
  if (nativeIndex < chunkNativeStart || ut->chunkNativeLimit <= nativeIndex)
  {
    ((void (*)(UText *))ut->pFuncs->access)(ut);
    int32_t chunkOffset = ut->chunkOffset;
  }
  else
  {
    int32_t chunkOffset = nativeIndex - chunkNativeStart;
    if (ut->nativeIndexingLimit < (int)nativeIndex - (int)chunkNativeStart) {
      int32_t chunkOffset = ((uint64_t (*)(UText *))ut->pFuncs->mapNativeIndexToUTF16)(ut);
    }
    ut->int32_t chunkOffset = chunkOffset;
  }
  if (chunkOffset < ut->chunkLength && (ut->chunkContents[chunkOffset] & 0xFC00) == 0xDC00)
  {
    if (!chunkOffset) {
      ((void (*)(UText *, int64_t, void))ut->pFuncs->access)(ut, ut->chunkNativeStart, 0);
    }
    int32_t v5 = ut->chunkOffset;
    BOOL v6 = __OFSUB__(v5, 1);
    int32_t v7 = v5 - 1;
    if (v7 < 0 == v6 && (ut->chunkContents[v7] & 0xFC00) == 0xD800) {
      ut->int32_t chunkOffset = v7;
    }
  }
}

int64_t utext_getPreviousNativeIndex(UText *ut)
{
  int32_t chunkOffset = ut->chunkOffset;
  uint64_t v3 = (chunkOffset - 1);
  if (chunkOffset < 1)
  {
    if (!chunkOffset && !ut->chunkNativeStart) {
      return 0;
    }
LABEL_7:
    utext_previous32(ut);
    uint64_t v5 = ut->chunkOffset;
    if ((int)v5 <= ut->nativeIndexingLimit) {
      int64_t v6 = ut->chunkNativeStart + v5;
    }
    else {
      int64_t v6 = ((uint64_t (*)(UText *))ut->pFuncs->mapOffsetToNative)(ut);
    }
    utext_next32(ut);
    return v6;
  }
  if ((ut->chunkContents[v3] & 0xFC00) == 0xDC00) {
    goto LABEL_7;
  }
  if ((int)v3 > ut->nativeIndexingLimit)
  {
    ut->int32_t chunkOffset = v3;
    int64_t result = ((uint64_t (*)(UText *))ut->pFuncs->mapOffsetToNative)(ut);
    ++ut->chunkOffset;
    return result;
  }
  return ut->chunkNativeStart + v3;
}

UChar32 utext_current32(UText *ut)
{
  int32_t chunkOffset = ut->chunkOffset;
  if (chunkOffset == ut->chunkLength)
  {
    if (!((unsigned int (*)(UText *, int64_t, uint64_t))ut->pFuncs->access)(ut, ut->chunkNativeLimit, 1)) {
      return -1;
    }
    int32_t chunkOffset = ut->chunkOffset;
  }
  chunkContents = ut->chunkContents;
  UChar32 v4 = chunkContents[chunkOffset];
  if ((v4 & 0xFC00) != 0xD800) {
    return v4;
  }
  uint64_t v5 = chunkOffset + 1;
  if ((int)v5 >= ut->chunkLength)
  {
    int64_t chunkNativeLimit = ut->chunkNativeLimit;
    if (((unsigned int (*)(UText *, int64_t, uint64_t))ut->pFuncs->access)(ut, chunkNativeLimit, 1)) {
      unsigned int v6 = ut->chunkContents[ut->chunkOffset];
    }
    else {
      unsigned int v6 = 0;
    }
    int v8 = ((uint64_t (*)(UText *, int64_t, void))ut->pFuncs->access)(ut, chunkNativeLimit, 0);
    ut->int32_t chunkOffset = ut->chunkLength - 1;
    if (v8) {
      goto LABEL_11;
    }
    return -1;
  }
  unsigned int v6 = chunkContents[v5];
LABEL_11:
  if (v6 >> 10 == 55) {
    return v6 + (v4 << 10) - 56613888;
  }
  return v4;
}

UChar32 utext_char32At(UText *ut, int64_t nativeIndex)
{
  int64_t chunkNativeStart = ut->chunkNativeStart;
  int32_t v5 = nativeIndex - chunkNativeStart;
  if (nativeIndex < chunkNativeStart || chunkNativeStart + ut->nativeIndexingLimit <= nativeIndex)
  {
    UChar32 v6 = -1;
  }
  else
  {
    ut->uint64_t chunkOffset = v5;
    UChar32 v6 = ut->chunkContents[v5];
    if ((v6 & 0xF800) != 0xD800) {
      return v6;
    }
  }
  utext_setNativeIndex(ut, nativeIndex);
  if (ut->chunkNativeStart > nativeIndex) {
    return v6;
  }
  uint64_t chunkOffset = ut->chunkOffset;
  if ((int)chunkOffset >= ut->chunkLength) {
    return v6;
  }
  UChar32 v6 = ut->chunkContents[chunkOffset];
  if ((v6 & 0xF800) != 0xD800) {
    return v6;
  }

  return utext_current32(ut);
}

UChar32 utext_next32From(UText *ut, int64_t nativeIndex)
{
  int64_t chunkNativeStart = ut->chunkNativeStart;
  int64_t v5 = nativeIndex - chunkNativeStart;
  if (nativeIndex < chunkNativeStart || ut->chunkNativeLimit <= nativeIndex)
  {
    if (!((unsigned int (*)(UText *, int64_t, uint64_t))ut->pFuncs->access)(ut, nativeIndex, 1)) {
      return -1;
    }
    LODWORD(v5) = ut->chunkOffset;
  }
  else if (v5 > ut->nativeIndexingLimit)
  {
    LODWORD(v5) = ((uint64_t (*)(UText *, int64_t))ut->pFuncs->mapNativeIndexToUTF16)(ut, nativeIndex);
  }
  chunkContents = ut->chunkContents;
  ut->uint64_t chunkOffset = v5 + 1;
  UChar32 result = chunkContents[(int)v5];
  if ((result & 0xF800) == 0xD800)
  {
    utext_setNativeIndex(ut, nativeIndex);
    return utext_next32(ut);
  }
  return result;
}

UChar32 utext_previous32From(UText *ut, int64_t nativeIndex)
{
  int64_t chunkNativeStart = ut->chunkNativeStart;
  BOOL v5 = __OFSUB__(nativeIndex, chunkNativeStart);
  uint64_t v6 = nativeIndex - chunkNativeStart;
  if (!((v6 < 0) ^ v5 | (v6 == 0)) && ut->chunkNativeLimit >= nativeIndex)
  {
    if (v6 <= ut->nativeIndexingLimit)
    {
      ut->uint64_t chunkOffset = v6;
      goto LABEL_9;
    }
    int32_t v8 = ((uint64_t (*)(UText *, int64_t))ut->pFuncs->mapNativeIndexToUTF16)(ut, nativeIndex);
    ut->uint64_t chunkOffset = v8;
    if (v8) {
      goto LABEL_9;
    }
  }
  if (!((unsigned int (*)(UText *, int64_t, void))ut->pFuncs->access)(ut, nativeIndex, 0)) {
    return -1;
  }
LABEL_9:
  uint64_t v9 = ut->chunkOffset - 1;
  ut->uint64_t chunkOffset = v9;
  UChar32 result = ut->chunkContents[v9];
  if ((result & 0xF800) == 0xD800)
  {
    utext_setNativeIndex(ut, nativeIndex);
    return utext_previous32(ut);
  }
  return result;
}

int32_t utext_extract(UText *ut, int64_t nativeStart, int64_t nativeLimit, UChar *dest, int32_t destCapacity, UErrorCode *status)
{
  return ((uint64_t (*)(void))ut->pFuncs->extract)();
}

UBool utext_equals(const UText *a, const UText *b)
{
  UBool v2 = 0;
  if (a && b)
  {
    if (a->magic == 878368812
      && b->magic == 878368812
      && (pFuncs = a->pFuncs, pFuncs == b->pFuncs)
      && a->context == b->context)
    {
      uint64_t chunkOffset = a->chunkOffset;
      if ((int)chunkOffset <= a->nativeIndexingLimit) {
        uint64_t v7 = a->chunkNativeStart + chunkOffset;
      }
      else {
        uint64_t v7 = ((uint64_t (*)(void))pFuncs->mapOffsetToNative)();
      }
      uint64_t v8 = b->chunkOffset;
      if ((int)v8 <= b->nativeIndexingLimit) {
        uint64_t v9 = b->chunkNativeStart + v8;
      }
      else {
        uint64_t v9 = ((uint64_t (*)(const UText *))b->pFuncs->mapOffsetToNative)(b);
      }
      return v7 == v9;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

UBool utext_isWritable(const UText *ut)
{
  return (LOBYTE(ut->providerProperties) >> 3) & 1;
}

void utext_freeze(UText *ut)
{
  ut->providerProperties &= ~8u;
}

UBool utext_hasMetaData(const UText *ut)
{
  return (LOBYTE(ut->providerProperties) >> 4) & 1;
}

int32_t utext_replace(UText *ut, int64_t nativeStart, int64_t nativeLimit, const UChar *replacementText, int32_t replacementLength, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if ((ut->providerProperties & 8) == 0)
  {
    *statUChar us = U_NO_WRITE_PERMISSION;
    return 0;
  }
  return ((uint64_t (*)(void))ut->pFuncs->replace)();
}

void utext_copy(UText *ut, int64_t nativeStart, int64_t nativeLimit, int64_t destIndex, UBool move, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if ((ut->providerProperties & 8) != 0) {
      ((void (*)(void))ut->pFuncs->copy)();
    }
    else {
      *statUChar us = U_NO_WRITE_PERMISSION;
    }
  }
}

UText *__cdecl utext_clone(UText *dest, const UText *src, UBool deep, UBool readOnly, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    int v6 = readOnly;
    dest = (UText *)((uint64_t (*)(UText *))src->pFuncs->clone)(dest);
    if (*(int *)status <= 0)
    {
      if (dest)
      {
        if (v6) {
          dest->providerProperties &= ~8u;
        }
      }
      else
      {
        *statUChar us = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return dest;
}

UText *__cdecl utext_setup(UText *ut, int32_t extraSpace, UErrorCode *status)
{
  uint64_t v3 = ut;
  if (*(int *)status > 0) {
    return v3;
  }
  if (!ut)
  {
    if (extraSpace <= 0) {
      int v9 = 144;
    }
    else {
      int v9 = extraSpace + 144;
    }
    char v10 = (UText *)uprv_malloc(v9);
    uint64_t v3 = v10;
    if (v10)
    {
      *(_OWORD *)&v10->r = xmmword_18CA87330;
      *(_OWORD *)&v10->a = unk_18CA87340;
      *(_OWORD *)&v10->privA = xmmword_18CA87350;
      *(_OWORD *)&v10->int64_t chunkNativeStart = xmmword_18CA872F0;
      *(_OWORD *)&v10->chunkContents = unk_18CA87300;
      *(_OWORD *)&v10->pExtra = xmmword_18CA87310;
      *(_OWORD *)&v10->p = unk_18CA87320;
      *(_OWORD *)&v10->magic = xmmword_18CA872D0;
      *(_OWORD *)&v10->int64_t chunkNativeLimit = unk_18CA872E0;
      v10->int32_t flags = 1;
      if (v9 >= 1)
      {
        v10->size_t extraSize = extraSpace;
        v10->pExtra = &v10[1];
      }
      goto LABEL_18;
    }
    goto LABEL_23;
  }
  if (ut->magic != 878368812)
  {
    UErrorCode v14 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_24:
    *statUChar us = v14;
    return v3;
  }
  int32_t flags = ut->flags;
  if ((flags & 4) != 0)
  {
    close = ut->pFuncs->close;
    if (close)
    {
      ((void (*)(UText *))close)(ut);
      int32_t flags = v3->flags;
    }
  }
  v3->int32_t flags = flags & 0xFFFFFFFB;
  if (v3->extraSize >= extraSpace) {
    goto LABEL_18;
  }
  if ((flags & 2) != 0)
  {
    uprv_free(v3->pExtra);
    v3->size_t extraSize = 0;
  }
  uint64_t v8 = uprv_malloc(extraSpace);
  v3->pExtra = v8;
  if (!v8)
  {
LABEL_23:
    UErrorCode v14 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_24;
  }
  v3->size_t extraSize = extraSpace;
  v3->flags |= 2u;
LABEL_18:
  if (*(int *)status <= 0)
  {
    unsigned int v11 = v3->flags | 4;
    v3->int64_t chunkNativeLimit = 0;
    *(void *)&v3->int32_t flags = v11;
    *(void *)&v3->nativeIndexingLimit = 0;
    *(void *)&v3->chunkLength = 0;
    *(int64_t *)((char *)&v3->chunkNativeStart + 4) = 0;
    HIDWORD(v3->chunkContents) = 0;
    *(_OWORD *)&v3->context = 0u;
    *(_OWORD *)&v3->q = 0u;
    *(_OWORD *)&v3->privP = 0u;
    *(_OWORD *)&v3->b = 0u;
    *(void *)&v3->privB = 0;
    pExtra = v3->pExtra;
    if (pExtra)
    {
      size_t extraSize = v3->extraSize;
      if ((int)extraSize >= 1) {
        bzero(pExtra, extraSize);
      }
    }
  }
  return v3;
}

UText *__cdecl utext_close(UText *ut)
{
  v1 = ut;
  if (ut)
  {
    if (ut->magic == 878368812)
    {
      int32_t flags = ut->flags;
      if ((flags & 4) != 0)
      {
        close = ut->pFuncs->close;
        if (close)
        {
          ((void (*)(UText *))close)(ut);
          int32_t flags = v1->flags;
        }
        LOBYTE(v4) = flags & 0xFB;
        v1->int32_t flags = flags & 0xFFFFFFFB;
        if ((flags & 2) != 0)
        {
          uprv_free(v1->pExtra);
          v1->pExtra = 0;
          unsigned int v4 = v1->flags & 0xFFFFFFFD;
          v1->int32_t flags = v4;
          v1->size_t extraSize = 0;
        }
        v1->pFuncs = 0;
        if (v4)
        {
          v1->magic = 0;
          uprv_free(v1);
          return 0;
        }
      }
    }
  }
  return v1;
}

UText *__cdecl utext_openUTF8(UText *ut, const char *s, int64_t length, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  int32_t v6 = length;
  if ((unint64_t)s | length) {
    uint64_t v7 = s;
  }
  else {
    uint64_t v7 = (const char *)&unk_18CA87360;
  }
  if ((unint64_t)(length - 0x80000000) >= 0xFFFFFFFF7FFFFFFFLL && v7)
  {
    UChar32 result = utext_setup(ut, 480, status);
    if (*(int *)status <= 0)
    {
      result->pFuncs = (const UTextFuncs *)&unk_1EDA48498;
      result->context = v7;
      result->b = v6;
      result->c = v6;
      if (v6 < 0)
      {
        result->c = 0;
        result->providerProperties |= 2u;
      }
      pExtra = (char *)result->pExtra;
      result->p = pExtra;
      result->q = pExtra + 240;
    }
  }
  else
  {
    UChar32 result = 0;
    *statUChar us = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return result;
}

UText *utext_openReplaceable(UText *a1, const void *a2, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (a2)
  {
    uint64_t v7 = utext_setup(a1, 22, status);
    uint64_t v3 = v7;
    if (*(int *)status <= 0)
    {
      v7->providerProperties = 8;
      if ((*(unsigned int (**)(const void *))(*(void *)a2 + 48))(a2)) {
        v3->providerProperties |= 0x10u;
      }
      v3->pFuncs = (const UTextFuncs *)&unk_1EDA48508;
      v3->context = a2;
    }
  }
  else
  {
    uint64_t v3 = 0;
    *statUChar us = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v3;
}

UText *utext_openUnicodeString(UText *a1, uint64_t a2, UErrorCode *a3)
{
  UChar32 result = utext_openConstUnicodeString(a1, a2, a3);
  if (*(int *)a3 <= 0) {
    result->providerProperties |= 8u;
  }
  return result;
}

UText *utext_openConstUnicodeString(UText *ut, uint64_t a2, UErrorCode *status)
{
  BOOL v5 = ut;
  if (*(int *)status <= 0 && (*(_WORD *)(a2 + 8) & 1) != 0)
  {
    utext_openUChars(ut, 0, 0, status);
    *statUChar us = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    int32_t v6 = utext_setup(ut, 0, status);
    BOOL v5 = v6;
    if (*(int *)status <= 0)
    {
      v6->pFuncs = (const UTextFuncs *)&unk_1EDA48578;
      v6->context = (const void *)a2;
      v6->providerProperties = 4;
      __int16 v7 = *(_WORD *)(a2 + 8);
      if ((v7 & 0x11) != 0)
      {
        uint64_t v8 = 0;
      }
      else if ((v7 & 2) != 0)
      {
        uint64_t v8 = (const UChar *)(a2 + 10);
      }
      else
      {
        uint64_t v8 = *(const UChar **)(a2 + 24);
      }
      v6->chunkContents = v8;
      if (*(__int16 *)(a2 + 8) < 0) {
        int v9 = *(_DWORD *)(a2 + 12);
      }
      else {
        int v9 = *(unsigned __int16 *)(a2 + 8) >> 5;
      }
      v6->chunkLength = v9;
      v6->int64_t chunkNativeStart = 0;
      v6->int64_t chunkNativeLimit = v9;
      v6->nativeIndexingLimit = v9;
    }
  }
  return v5;
}

UText *__cdecl utext_openUChars(UText *ut, const UChar *s, int64_t length, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if ((unint64_t)s | length) {
    __int16 v7 = s;
  }
  else {
    __int16 v7 = (const UChar *)&unk_18CA87362;
  }
  if ((unint64_t)(length - 0x80000000) >= 0xFFFFFFFF7FFFFFFFLL && v7)
  {
    UChar32 result = utext_setup(ut, 0, status);
    if (*(int *)status <= 0)
    {
      result->context = v7;
      if (length == -1) {
        int32_t v8 = 6;
      }
      else {
        int32_t v8 = 4;
      }
      result->providerProperties = v8;
      result->a = length;
      result->chunkContents = v7;
      result->pFuncs = (const UTextFuncs *)&unk_1EDA485E8;
      result->int64_t chunkNativeStart = 0;
      int64_t v9 = length & ~(length >> 63);
      result->int64_t chunkNativeLimit = v9;
      result->uint64_t chunkOffset = 0;
      result->chunkLength = v9;
      result->nativeIndexingLimit = v9;
    }
  }
  else
  {
    UChar32 result = 0;
    *statUChar us = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return result;
}

double utext_openCharacterIterator(UText *a1, int *a2, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (a2[4] < 1)
    {
      BOOL v5 = utext_setup(a1, 64, status);
      if (*(int *)status <= 0)
      {
        v5->a = a2[5];
        pExtra = (char *)v5->pExtra;
        v5->p = pExtra;
        v5->q = pExtra + 32;
        v5->providerProperties = 0;
        v5->context = a2;
        *(void *)&v5->b = -1;
        v5->chunkContents = (const UChar *)pExtra;
        v5->pFuncs = (const UTextFuncs *)&unk_1EDA48658;
        v5->int64_t chunkNativeStart = -1;
        v5->int64_t chunkNativeLimit = 0;
        *(void *)&double result = 1;
        *(void *)&v5->uint64_t chunkOffset = 1;
        v5->nativeIndexingLimit = 1;
      }
    }
    else
    {
      *statUChar us = U_UNSUPPORTED_ERROR;
    }
  }
  return result;
}

UText *sub_18C8BB040(UText *a1, unint64_t a2, int a3, UErrorCode *a4)
{
  __int16 v7 = sub_18C8BBBD8(a1, a2, a4);
  if (a3 && *(int *)a4 <= 0)
  {
    size_t v8 = (int)((*(uint64_t (**)(unint64_t))(*(void *)(a2 + 56) + 24))(a2) + 1);
    int64_t v9 = uprv_malloc(v8);
    if (v9)
    {
      char v10 = v9;
      memcpy(v9, *(const void **)(a2 + 72), v8);
      v7->context = v10;
      v7->providerProperties |= 0x20u;
    }
    else
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return v7;
}

uint64_t sub_18C8BB0E8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 120);
  if (v1 < 0)
  {
    uint64_t v2 = *(int *)(a1 + 124);
    while (*(unsigned __int8 *)(*(void *)(a1 + 72) + v2++))
      ;
    int v1 = v2 - 1;
    if (v2 - 1 >= 0x7FFFFFFF) {
      int v1 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 120) = v1;
    *(_DWORD *)(a1 + 8) &= ~2u;
  }
  return v1;
}

BOOL sub_18C8BB12C(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v4 = *(const uint8_t **)(a1 + 72);
  int32_t v5 = *(_DWORD *)(a1 + 120);
  uint64_t v6 = 0x7FFFFFFFLL;
  if (a2 < 0x7FFFFFFF) {
    uint64_t v6 = a2;
  }
  int32_t v7 = v6 & ~(v6 >> 63);
  if (v5 < v7)
  {
    if (v5 < 0)
    {
      int32_t v8 = *(_DWORD *)(a1 + 124);
      if (v8 <= v7)
      {
        if (v8 < v7)
        {
          int64_t v9 = &v4[v8];
          while (*v9++)
          {
            *(_DWORD *)(a1 + 124) = ++v8;
            if (v7 == v8)
            {
              int32_t v8 = v7;
              break;
            }
          }
        }
        if (!v4[v8])
        {
          *(_DWORD *)(a1 + 120) = v8;
          *(_DWORD *)(a1 + 8) &= ~2u;
          int32_t v5 = v8;
          int32_t v7 = v8;
        }
      }
    }
    else
    {
      int32_t v7 = *(_DWORD *)(a1 + 120);
    }
  }
  uint64_t v11 = v7;
  v78 = v4;
  if (!a3)
  {
    uint64_t v16 = *(void *)(a1 + 32);
    if (v16 == v7)
    {
      if (!v7)
      {
LABEL_97:
        BOOL result = 0;
        *(_DWORD *)(a1 + 40) = 0;
        return result;
      }
      uint64_t v13 = *(void *)(a1 + 88);
      int32_t v14 = *(_DWORD *)v13;
      if (v7 > *(_DWORD *)v13)
      {
        int32_t v15 = *(_DWORD *)(v13 + 4);
        if (v7 <= v15) {
          goto LABEL_40;
        }
      }
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 88);
      int32_t v14 = *(_DWORD *)v13;
    }
    if (v7 > v14)
    {
      int32_t v15 = *(_DWORD *)(v13 + 4);
      if (v7 <= v15) {
        goto LABEL_40;
      }
    }
    if (v7)
    {
      if (v16 < v7 && *(void *)(a1 + 16) >= v7)
      {
        int v51 = *(unsigned __int8 *)(*(void *)(a1 + 80) - *(int *)(*(void *)(a1 + 80) + 20) + v7 + 132)
            - *(_DWORD *)(*(void *)(a1 + 80) + 8);
        *(_DWORD *)(a1 + 40) = v51;
        return v51 != 0;
      }
      if (v7 != v5)
      {
        if ((char)v4[v7] > -65)
        {
          int32_t v5 = v7;
        }
        else
        {
          int32_t v18 = utf8_back1SafeBody(v4, 0, v7);
          unsigned int v4 = v78;
          int32_t v5 = v18;
          uint64_t v13 = *(void *)(a1 + 88);
        }
      }
      uint64_t v52 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = v13;
      *(void *)(a1 + 88) = v52;
      uint64_t v53 = v13 + 24;
      uint64_t v54 = v13 + 96;
      uint64_t v55 = v13 + 132;
      int v56 = v5 - 101;
      int32_t v75 = v5;
      puint64_t i = v5;
      *(unsigned char *)(v13 + 130) = 101;
      int v57 = 34;
      *(unsigned char *)(v13 + 233) = 34;
      int v58 = (int32_t *)v13;
      uint64_t v59 = v13 - (v5 - 101) + 132;
      int v60 = 34;
      do
      {
        int32_t v61 = pi;
        uint64_t v62 = (pi - 1);
        BOOL v63 = pi < 1 || pi - v56 < 6;
        if (v63) {
          goto LABEL_115;
        }
        --pi;
        unsigned int v64 = v60 - 1;
        UChar32 v65 = v4[v62];
        if ((char)v4[v62] < 0)
        {
          UChar32 v66 = utf8_prevCharSafeBody(v4, 0, &pi, v65, -3);
          if (v66 >= 0x10000)
          {
            *(_WORD *)(v53 + 2 * v64) = v66 & 0x3FF | 0xDC00;
            *(unsigned char *)(v54 + v64) = pi - v56;
            UChar32 v66 = (v66 >> 10) - 10304;
            unsigned int v64 = v60 - 2;
          }
          unsigned int v4 = v78;
          *(_WORD *)(v53 + 2 * v64) = v66;
          *(unsigned char *)(v54 + v64) = pi - v56;
          do
          {
            *(unsigned char *)(v59 + v62) = v64;
            BOOL v63 = v62-- <= pi;
          }
          while (!v63);
          int v60 = v64;
          int v57 = v64;
        }
        else
        {
          *(_WORD *)(v53 + 2 * v64) = v65;
          *(unsigned char *)(v55 + (int)v62 - v56) = v60 - 1;
          *(unsigned char *)(v54 + v64) = pi - v56;
          --v60;
        }
      }
      while (v60 > 2);
      int32_t v61 = pi;
LABEL_115:
      *int v58 = v61;
      v58[1] = v75;
      v58[2] = v60;
      v58[3] = 34;
      int v67 = v57 - v60;
      v58[4] = v67;
      v58[5] = v56;
      *(void *)(a1 + 48) = v53 + 2 * v60;
      *(_DWORD *)(a1 + 40) = 34 - v60;
      *(_DWORD *)(a1 + 44) = 34 - v60;
      *(void *)(a1 + 32) = v61;
      *(void *)(a1 + 16) = v75;
      BOOL result = 1;
      *(_DWORD *)(a1 + 28) = v67;
      return result;
    }
    if (!v14)
    {
LABEL_95:
      uint64_t v46 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = v13;
      *(void *)(a1 + 88) = v46;
      uint64_t v48 = *(int *)(v13 + 4);
      uint64_t v47 = *(int *)(v13 + 8);
      *(void *)(a1 + 48) = v13 + 2 * v47 + 24;
      int v49 = *(_DWORD *)(v13 + 16);
      int v50 = *(_DWORD *)(v13 + 12) - v47;
      *(_DWORD *)(a1 + 44) = v50;
      *(void *)(a1 + 32) = v14;
      *(void *)(a1 + 16) = v48;
      *(_DWORD *)(a1 + 28) = v49;
      if (v7 == v48)
      {
        BOOL result = 0;
        *(_DWORD *)(a1 + 40) = v50;
        return result;
      }
      goto LABEL_97;
    }
LABEL_94:
    *(_DWORD *)uint64_t v13 = v7;
    *(_DWORD *)(v13 + 4) = v7;
    *(void *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + 20) = v7;
    *(unsigned char *)(v13 + 96) = 0;
    *(unsigned char *)(v13 + 132) = 0;
    uint64_t v13 = *(void *)(a1 + 88);
    int32_t v14 = *(_DWORD *)v13;
    goto LABEL_95;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12 == v7)
  {
    if (v7 == v5)
    {
LABEL_30:
      BOOL result = 0;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 44);
      return result;
    }
    uint64_t v13 = *(void *)(a1 + 88);
    int32_t v14 = *(_DWORD *)v13;
    if (v7 >= *(_DWORD *)v13)
    {
      int32_t v15 = *(_DWORD *)(v13 + 4);
      if (v7 < v15) {
        goto LABEL_40;
      }
    }
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 88);
    int32_t v14 = *(_DWORD *)v13;
  }
  if (v7 >= v14)
  {
    int32_t v15 = *(_DWORD *)(v13 + 4);
    if (v7 < v15)
    {
LABEL_40:
      int v19 = *(_DWORD *)(v13 + 12);
      uint64_t v20 = *(int *)(v13 + 8);
      *(void *)(a1 + 48) = v13 + 2 * v20 + 24;
      uint64_t v21 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = v13;
      *(void *)(a1 + 88) = v21;
      *(_DWORD *)(a1 + 44) = v19 - v20;
      *(void *)(a1 + 32) = v14;
      *(void *)(a1 + 16) = v15;
      uint64_t v22 = *(int *)(v13 + 20);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(v13 + 16);
      int v23 = *(unsigned __int8 *)(v13 - v22 + v7 + 132) - v20;
LABEL_44:
      *(_DWORD *)(a1 + 40) = v23;
      return 1;
    }
  }
  if (v7 == v5)
  {
    if (v12 == v7) {
      goto LABEL_30;
    }
    if (v5 == *(_DWORD *)(v13 + 4)) {
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  if (v12 > v7 && *(void *)(a1 + 32) <= v7)
  {
    int v23 = *(unsigned __int8 *)(*(void *)(a1 + 80) - *(int *)(*(void *)(a1 + 80) + 20) + v7 + 132)
        - *(_DWORD *)(*(void *)(a1 + 80) + 8);
    goto LABEL_44;
  }
  if ((char)v4[v7] <= -65)
  {
    int32_t v24 = utf8_back1SafeBody(v4, 0, v7);
    unsigned int v4 = v78;
    uint64_t v13 = *(void *)(a1 + 88);
    int32_t v5 = *(_DWORD *)(a1 + 120);
    uint64_t v11 = v24;
    int32_t v7 = v24;
  }
  int v25 = 0;
  int v76 = 0;
  uint64_t v26 = *(void *)(a1 + 80);
  int32_t v74 = v5;
  if (v5 >= 0x7FFFFFFF) {
    int v27 = 0x7FFFFFFF;
  }
  else {
    int v27 = v5;
  }
  uint64_t v28 = v13 + 24;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v26;
  uint64_t v29 = v13 + 96;
  uint64_t v77 = v13 + 132;
  uint64_t v70 = v11;
  int32_t v71 = (int32_t *)v13;
  uint64_t v72 = v13 - v11 + 132;
  LODWORD(v30) = v7;
  int v73 = v27;
  while (1)
  {
    uint64_t v31 = (int)v30;
    unsigned int v32 = v4[(int)v30];
    if ((char)v4[(int)v30] < 1) {
      break;
    }
    *(_WORD *)(v28 + 2 * v25) = v32;
    uint64_t v33 = (int)v30 - (uint64_t)v7;
    *(unsigned char *)(v29 + v25) = v33;
    *(unsigned char *)(v77 + v33) = v25;
    LODWORD(v30) = v30 + 1;
    ++v25;
LABEL_90:
    if ((int)v30 >= v27 || v25 >= 32) {
      goto LABEL_117;
    }
  }
  if (!v76)
  {
    v71[4] = v25;
    unsigned int v32 = v4[(int)v30];
    int v76 = 1;
  }
  int v34 = v30 + 1;
  if ((v32 & 0x80) != 0)
  {
    if (v34 == v27)
    {
LABEL_65:
      unsigned int v32 = 65533;
      LODWORD(v30) = v27;
      goto LABEL_83;
    }
    if (v32 < 0xE0)
    {
      if (v32 >= 0xC2)
      {
        int v42 = v32 & 0x1F;
        LODWORD(v30) = v30 + 1;
LABEL_74:
        unsigned int v43 = v4[(int)v30] ^ 0x80;
        if (v43 <= 0x3F)
        {
          unsigned int v32 = v43 | (v42 << 6);
          LODWORD(v30) = v30 + 1;
          goto LABEL_60;
        }
        goto LABEL_82;
      }
    }
    else if (v32 > 0xEF)
    {
      if (v32 <= 0xF4)
      {
        unint64_t v44 = v4[v34];
        if ((byte_18CA87364[v44 >> 4] >> (v32 + 16)))
        {
          uint64_t v30 = (int)v30 + 2;
          if (v31 + 2 == v27) {
            goto LABEL_65;
          }
          unsigned int v41 = v4[v30] ^ 0x80;
          if (v41 > 0x3F)
          {
LABEL_82:
            unsigned int v32 = 65533;
            goto LABEL_83;
          }
          int v40 = v44 & 0x3F | ((v32 - 240) << 6);
          goto LABEL_70;
        }
      }
    }
    else
    {
      int v40 = v32 & 0xF;
      if ((a00000000000000[v32 & 0xF] >> (v4[v34] >> 5)))
      {
        unsigned int v41 = v4[v34] & 0x3F;
        LODWORD(v30) = v30 + 1;
LABEL_70:
        LODWORD(v30) = v30 + 1;
        if (v30 == v27) {
          goto LABEL_65;
        }
        int v42 = v41 | (v40 << 6);
        goto LABEL_74;
      }
    }
    unsigned int v32 = 65533;
    LODWORD(v30) = v30 + 1;
    goto LABEL_83;
  }
  LODWORD(v30) = v30 + 1;
LABEL_60:
  if ((v74 & 0x80000000) == 0 || v32)
  {
    if (HIWORD(v32))
    {
      int v35 = v25 + 1;
      uint64_t v36 = v25;
      *(_WORD *)(v28 + 2 * v25) = (v32 >> 10) - 10304;
      __int16 v37 = v32 & 0x3FF | 0xDC00;
      int v38 = v25 + 2;
      uint64_t v39 = v25 + 1;
LABEL_84:
      *(_WORD *)(v28 + 2 * v39) = v37;
      if (v38 > v35) {
        int v35 = v38;
      }
      memset((void *)(v29 + v36), v31 - v7, (v35 + ~v25) + 1);
      if ((int)v30 <= v34) {
        int v45 = v31 + 1;
      }
      else {
        int v45 = v30;
      }
      memset((void *)(v72 + v31), v25, (v45 + ~v31) + 1);
      int v25 = v38;
      unsigned int v4 = v78;
      int v27 = v73;
      goto LABEL_90;
    }
LABEL_83:
    int v35 = v25 + 1;
    uint64_t v39 = v25;
    __int16 v37 = v32;
    uint64_t v36 = v25;
    int v38 = v25 + 1;
    goto LABEL_84;
  }
  LODWORD(v30) = v30 - 1;
LABEL_117:
  uint64_t v68 = (int)v30 - (uint64_t)v7;
  *(unsigned char *)(v29 + v25) = v68;
  *(unsigned char *)(v77 + v68) = v25;
  *int32_t v71 = v7;
  v71[1] = v30;
  v71[2] = 0;
  v71[3] = v25;
  if (v76)
  {
    int v69 = v71[4];
  }
  else
  {
    v71[4] = v25;
    int v69 = v25;
  }
  v71[5] = v7;
  *(void *)(a1 + 48) = v28;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = v25;
  *(void *)(a1 + 32) = v70;
  *(void *)(a1 + 16) = (int)v30;
  *(_DWORD *)(a1 + 28) = v69;
  if (v74 < 0 && (int)v30 > *(_DWORD *)(a1 + 124))
  {
    *(_DWORD *)(a1 + 124) = v30;
    if (!v32)
    {
      *(_DWORD *)(a1 + 120) = v30;
      *(_DWORD *)(a1 + 8) &= ~2u;
    }
  }
  return 1;
}

uint64_t sub_18C8BB8A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5, int *a6)
{
  if (*a6 > 0) {
    return 0;
  }
  if ((a5 & 0x80000000) != 0 || (int v10 = a3, !a4) && a5)
  {
    uint64_t v6 = 0;
    int v12 = 1;
LABEL_7:
    *a6 = v12;
    return v6;
  }
  uint64_t v14 = *(int *)(a1 + 120);
  if (a2 < 0)
  {
    int v15 = 0;
  }
  else
  {
    int v15 = *(_DWORD *)(a1 + 120);
    if (v14 >= a2)
    {
      if ((a3 & 0x8000000000000000) == 0) {
        goto LABEL_12;
      }
LABEL_16:
      LODWORD(v14) = 0;
      goto LABEL_17;
    }
  }
  LODWORD(a2) = v15;
  if (a3 < 0) {
    goto LABEL_16;
  }
LABEL_12:
  if (v14 < a3) {
LABEL_17:
  }
    int v10 = v14;
  if ((int)a2 > v10)
  {
    uint64_t v6 = 0;
    int v12 = 8;
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 > (int)a2)
  {
    int v18 = 0;
    uint64_t v19 = (int)a2;
    while (1)
    {
      int v20 = *(char *)(v16 + v19);
      if ((v20 & 0x80000000) == 0) {
        break;
      }
      if ((v20 + 62) < 0x33 || v19 == 0) {
        break;
      }
      --v19;
      if (++v18 == 3)
      {
        LODWORD(a2) = a2 - 3;
        goto LABEL_30;
      }
    }
    LODWORD(a2) = a2 - v18;
  }
LABEL_30:
  if (v17 > v10)
  {
    int v22 = 0;
    uint64_t v23 = v10;
    while (1)
    {
      int v24 = *(char *)(v16 + v23);
      if ((v24 & 0x80000000) == 0) {
        break;
      }
      if ((v24 + 62) < 0x33 || v23 == 0) {
        break;
      }
      --v23;
      if (++v22 == 3)
      {
        v10 -= 3;
        goto LABEL_40;
      }
    }
    v10 -= v22;
  }
LABEL_40:
  int32_t v26 = 0;
  int v27 = (const uint8_t *)(v16 + (int)a2);
  int32_t v28 = v10 - a2;
  if (a4) {
    unint64_t v29 = a4 + 2 * a5;
  }
  else {
    unint64_t v29 = 0;
  }
  puint64_t i = 0;
  uint64_t v30 = (_WORD *)a4;
  int v31 = 0;
  if (v28 >= 1 && v29 > a4)
  {
    int32_t v26 = 0;
    uint64_t v30 = (_WORD *)a4;
    while (1)
    {
      puint64_t i = v26 + 1;
      UChar32 v32 = v27[v26];
      if ((char)v27[v26] < 0)
      {
        unsigned int v33 = utf8_nextCharSafeBody(v27, &pi, v28, v32, -3);
        if (HIWORD(v33))
        {
          *uint64_t v30 = (v33 >> 10) - 10304;
          if ((unint64_t)(v30 + 1) >= v29)
          {
            int v31 = 1;
            int32_t v26 = pi;
            ++v30;
            break;
          }
          v30[1] = v33 & 0x3FF | 0xDC00;
          v30 += 2;
        }
        else
        {
          *v30++ = v33;
        }
      }
      else
      {
        *v30++ = v32;
      }
      int32_t v26 = pi;
      if (pi >= v28 || (unint64_t)v30 >= v29)
      {
        int v31 = 0;
        break;
      }
    }
  }
  while (v26 < v28)
  {
    int32_t v35 = v26 + 1;
    puint64_t i = v26 + 1;
    int v36 = (char)v27[v26];
    if (v36 < 0)
    {
      if (utf8_nextCharSafeBody(v27, &pi, v28, v36, -3) < 0x10000) {
        int v37 = 1;
      }
      else {
        int v37 = 2;
      }
      v31 += v37;
      int32_t v26 = pi;
    }
    else
    {
      ++v31;
      int32_t v26 = v35;
    }
  }
  uint64_t v6 = v31 + (((unint64_t)v30 - a4) >> 1);
  u_terminateUChars(a4, a5, v6, a6);
  sub_18C8BB12C(a1, v10, 1);
  return v6;
}

unint64_t sub_18C8BBB60(uint64_t a1)
{
  return *(int *)(*(void *)(a1 + 80) + 20)
       + (unint64_t)*(unsigned __int8 *)(*(void *)(a1 + 80)
                                              + *(int *)(a1 + 40)
                                              + *(int *)(*(void *)(a1 + 80) + 8)
                                              + 96);
}

uint64_t sub_18C8BBB84(uint64_t a1, int a2)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 80) - *(int *)(*(void *)(a1 + 80) + 20) + a2 + 132)
       - *(_DWORD *)(*(void *)(a1 + 80) + 8);
}

void sub_18C8BBBA4(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 8) & 0x20) != 0)
  {
    uprv_free(*(void **)(a1 + 72));
    *(void *)(a1 + 72) = 0;
  }
}

UText *sub_18C8BBBD8(UText *a1, unint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    unint64_t v5 = a2;
    size_t v6 = *(unsigned int *)(a2 + 24);
    int32_t v7 = utext_setup(a1, *(_DWORD *)(a2 + 24), a3);
    uint64_t v3 = v7;
    if (*(int *)a3 > 0) {
      return v3;
    }
    pExtra = v7->pExtra;
    int32_t flags = v7->flags;
    int32_t sizeOfStruct = *(_DWORD *)(v5 + 12);
    if (sizeOfStruct >= v7->sizeOfStruct) {
      int32_t sizeOfStruct = v7->sizeOfStruct;
    }
    memcpy(v7, (const void *)v5, sizeOfStruct);
    v3->pExtra = pExtra;
    v3->int32_t flags = flags;
    if ((int)v6 >= 1) {
      memcpy(pExtra, *(const void **)(v5 + 64), v6);
    }
    unint64_t context = (unint64_t)v3->context;
    unint64_t v12 = *(void *)(v5 + 64);
    if (context < v12 || context >= v12 + *(int *)(v5 + 24))
    {
      if (context < v5 || (unint64_t v14 = v5, v13 = (char *)v3, context >= v5 + *(int *)(v5 + 12)))
      {
LABEL_14:
        unint64_t p = (unint64_t)v3->p;
        if (p < v12 || p >= v12 + *(int *)(v5 + 24))
        {
          if (p < v5 || (v17 = v5, uint64_t v16 = (char *)v3, p >= v5 + *(int *)(v5 + 12)))
          {
LABEL_20:
            unint64_t q = (unint64_t)v3->q;
            if (q < v12 || q >= v12 + *(int *)(v5 + 24))
            {
              if (q < v5 || (v20 = v5, uint64_t v19 = (char *)v3, q >= v5 + *(int *)(v5 + 12)))
              {
LABEL_26:
                unint64_t r = (unint64_t)v3->r;
                if (r < v12 || r >= v12 + *(int *)(v5 + 24))
                {
                  if (r < v5 || (v23 = v5, int v22 = (char *)v3, r >= v5 + *(int *)(v5 + 12)))
                  {
LABEL_32:
                    unint64_t chunkContents = (unint64_t)v3->chunkContents;
                    if (chunkContents < v12 || chunkContents >= v12 + *(int *)(v5 + 24))
                    {
                      if (chunkContents < v5) {
                        goto LABEL_38;
                      }
                      int v25 = (char *)v3;
                      if (chunkContents >= v5 + *(int *)(v5 + 12)) {
                        goto LABEL_38;
                      }
                    }
                    else
                    {
                      int v25 = (char *)v3->pExtra;
                      unint64_t v5 = v12;
                    }
                    v3->unint64_t chunkContents = (const UChar *)&v25[chunkContents - v5];
LABEL_38:
                    v3->providerProperties &= ~0x20u;
                    return v3;
                  }
                }
                else
                {
                  int v22 = (char *)v3->pExtra;
                  unint64_t v23 = v12;
                }
                v3->unint64_t r = &v22[r - v23];
                unint64_t v12 = *(void *)(v5 + 64);
                goto LABEL_32;
              }
            }
            else
            {
              uint64_t v19 = (char *)v3->pExtra;
              unint64_t v20 = v12;
            }
            v3->unint64_t q = &v19[q - v20];
            unint64_t v12 = *(void *)(v5 + 64);
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v16 = (char *)v3->pExtra;
          unint64_t v17 = v12;
        }
        v3->unint64_t p = &v16[p - v17];
        unint64_t v12 = *(void *)(v5 + 64);
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v13 = (char *)v3->pExtra;
      unint64_t v14 = *(void *)(v5 + 64);
    }
    v3->unint64_t context = &v13[context - v14];
    unint64_t v12 = *(void *)(v5 + 64);
    goto LABEL_14;
  }
  return 0;
}

UText *sub_18C8BBE48(UText *a1, unint64_t a2, int a3, UErrorCode *a4)
{
  int32_t v7 = sub_18C8BBBD8(a1, a2, a4);
  if (a3 && *(int *)a4 <= 0)
  {
    v7->unint64_t context = (const void *)(*(uint64_t (**)(void))(**(void **)(a2 + 72) + 56))(*(void *)(a2 + 72));
    v7->providerProperties |= 0x28u;
  }
  return v7;
}

uint64_t sub_18C8BBED4(uint64_t a1)
{
  return (*(int (**)(void))(**(void **)(a1 + 72) + 64))(*(void *)(a1 + 72));
}

uint64_t sub_18C8BBF14(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 72);
  LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
  uint64_t v8 = (int)v7;
  if (a2 < 0)
  {
    uint64_t v7 = 0;
    goto LABEL_5;
  }
  uint64_t v7 = (int)v7;
  if ((int)v7 < a2) {
LABEL_5:
  }
    a2 = v7;
  uint64_t v9 = *(void *)(a1 + 32);
  if (a3)
  {
    if (v9 > (int)a2 || *(void *)(a1 + 16) <= (int)a2)
    {
      if ((int)v8 <= (int)a2 && *(void *)(a1 + 16) == v8)
      {
        uint64_t result = 0;
        *(_DWORD *)(a1 + 40) = v8 - v9;
        return result;
      }
      uint64_t v11 = a2 + 9;
      if (a2 + 9 >= v8) {
        uint64_t v11 = v8;
      }
      *(void *)(a1 + 16) = v11;
      BOOL v12 = v11 < 10;
      uint64_t v13 = v11 - 10;
      if (v12) {
        uint64_t v13 = 0;
      }
      *(void *)(a1 + 32) = v13;
LABEL_28:
      uint64_t v16 = *(_WORD **)(a1 + 64);
      memset(v23, 0, sizeof(v23));
      icu::UnicodeString::UnicodeString(v23, v16, 0, 10);
      (*(void (**)(uint64_t, void, void, _OWORD *))(*(void *)v6 + 24))(v6, *(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 16), v23);
      *(void *)(a1 + 48) = v16;
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = v17 - v18;
      int v20 = a2 - v18;
      *(_DWORD *)(a1 + 40) = a2 - v18;
      *(_DWORD *)(a1 + 44) = v17 - v18;
      if (v17 < v8 && (uint64_t v21 = v19 - 1, (v16[v21] & 0xFC00) == 0xD800))
      {
        *(_DWORD *)(a1 + 44) = v21;
        *(void *)(a1 + 16) = v17 - 1;
        if (v20 >= v19)
        {
          *(_DWORD *)(a1 + 40) = v21;
          int v20 = v19 - 1;
        }
      }
      else
      {
        LODWORD(v21) = v17 - v18;
      }
      if (v18 >= 1 && (*v16 & 0xFC00) == 0xDC00)
      {
        *(void *)(a1 + 48) = ++v16;
        *(void *)(a1 + 32) = v18 + 1;
        LODWORD(v21) = v21 - 1;
        *(_DWORD *)(a1 + 40) = --v20;
        *(_DWORD *)(a1 + 44) = v21;
      }
      int v22 = v20 - 1;
      if (v20 >= 1 && (v16[v20] & 0xFC00) == 0xDC00 && (v16[v22] & 0xFC00) == 0xD800) {
        *(_DWORD *)(a1 + 40) = v22;
      }
      *(_DWORD *)(a1 + 28) = v21;
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v23);
      return 1;
    }
  }
  else if (v9 > (int)a2 || *(void *)(a1 + 16) < (int)a2)
  {
    if (!a2 && !v9)
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 40) = 0;
      return result;
    }
    uint64_t v14 = ((a2 << 32) - 0x900000000) >> 32;
    if ((int)a2 < 9) {
      uint64_t v14 = 0;
    }
    *(void *)(a1 + 32) = v14;
    uint64_t v15 = ((a2 << 32) + 0x100000000) >> 32;
    if ((int)v8 <= (int)a2) {
      uint64_t v15 = v8;
    }
    *(void *)(a1 + 16) = v15;
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 40) = a2 - v9;
  return 1;
}

uint64_t sub_18C8BC1CC(uint64_t a1, int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 72);
  LODWORD(v13) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v12);
  if (*a6 > 0) {
    return 0;
  }
  int v15 = v13;
  if ((a5 & 0x80000000) != 0 || !a4 && a5) {
    *a6 = 1;
  }
  if (a2 > a3)
  {
    uint64_t v14 = 0;
    *a6 = 8;
    return v14;
  }
  int64_t v16 = (int)v13;
  if (a2 < 0)
  {
    int64_t v13 = 0;
  }
  else
  {
    int64_t v13 = (int)v13;
    if ((int)v13 >= a2)
    {
      if ((a3 & 0x8000000000000000) == 0) {
        goto LABEL_12;
      }
LABEL_16:
      int64_t v16 = 0;
      goto LABEL_17;
    }
  }
  a2 = v13;
  if (a3 < 0) {
    goto LABEL_16;
  }
LABEL_12:
  if (v15 < a3) {
LABEL_17:
  }
    a3 = v16;
  if (v15 > (int)a2
    && ((*(uint64_t (**)(uint64_t, int64_t))(*(void *)v12 + 72))(v12, a2) & 0xFC00) == 0xDC00)
  {
    a2 = (__PAIR64__(a2, (*(unsigned int (**)(uint64_t, int64_t))(*(void *)v12 + 80))(v12, a2) - 0x10000)- 0x100000) >> 32;
  }
  if (v15 > (int)a3
    && ((*(uint64_t (**)(uint64_t, int64_t))(*(void *)v12 + 72))(v12, a3) & 0xFC00) == 0xDC00)
  {
    LODWORD(a3) = (__PAIR64__(a3, (*(unsigned int (**)(uint64_t, int64_t))(*(void *)v12 + 80))(v12, a3)- 0x10000)- 0x100000) >> 32;
  }
  uint64_t v17 = (a3 - a2);
  memset(&v20[2], 0, 32);
  if ((int)v17 <= (int)a5) {
    a3 = a3;
  }
  else {
    a3 = (a2 + a5);
  }
  memset(v20, 0, 32);
  icu::UnicodeString::UnicodeString(v20, a4, 0, a5);
  (*(void (**)(uint64_t, int64_t, int64_t, _OWORD *))(*(void *)v12 + 24))(v12, a2, a3, v20);
  sub_18C8BBF14(a1, (int)a3, 1);
  uint64_t v14 = u_terminateUChars(a4, a5, v17, a6);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v20);
  return v14;
}

uint64_t sub_18C8BC48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*a6 > 0) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 72);
  if (!a4 && a5)
  {
    uint64_t v6 = 0;
    int v14 = 1;
LABEL_8:
    *a6 = v14;
    return v6;
  }
  LODWORD(v15) = (*(uint64_t (**)(void))(*(void *)v13 + 64))(*(void *)(a1 + 72));
  if (a2 > a3)
  {
    uint64_t v6 = 0;
    int v14 = 8;
    goto LABEL_8;
  }
  int v16 = v15;
  uint64_t v17 = (int)v15;
  if (a2 < 0)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = (int)v15;
    if ((int)v15 >= a2)
    {
      if ((a3 & 0x8000000000000000) == 0) {
        goto LABEL_12;
      }
LABEL_16:
      uint64_t v17 = 0;
      goto LABEL_17;
    }
  }
  a2 = v15;
  if (a3 < 0) {
    goto LABEL_16;
  }
LABEL_12:
  if (v17 < a3) {
LABEL_17:
  }
    a3 = v17;
  if (v16 > (int)a2
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 72))(v13, a2) & 0xFC00) == 0xDC00
    && (int)a2 >= 1)
  {
    if (((*(uint64_t (**)(uint64_t, void))(*(void *)v13 + 72))(v13, (a2 - 1)) & 0xFC00) == 0xD800) {
      a2 = (a2 - 1);
    }
    else {
      a2 = a2;
    }
  }
  if (v16 > (int)a3
    && ((*(uint64_t (**)(uint64_t, void))(*(void *)v13 + 72))(v13, (a3 - 1)) & 0xFC00) == 0xD800)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 72))(v13, a3) & 0xFC00) == 0xDC00) {
      a3 = (a3 + 1);
    }
    else {
      a3 = a3;
    }
  }
  memset(v22, 0, sizeof(v22));
  uint64_t v21 = a4;
  icu::UnicodeString::UnicodeString(v22, a5 >> 31, &v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(void *)v13 + 32))(v13, a2, a3, v22);
  uint64_t v6 = (*(unsigned int (**)(uint64_t))(*(void *)v13 + 64))(v13) - v16;
  if (*(void *)(a1 + 16) > (int)a2)
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 36) = 0;
    *(void *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 44) = 0;
  }
  sub_18C8BBF14(a1, (int)v6 + (int)a3, 1);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
  return v6;
}

uint64_t sub_18C8BC788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v12);
  if (*a6 > 0) {
    return result;
  }
  if (a2 > a3 || a2 < a4 && a4 < a3)
  {
    *a6 = 8;
    return result;
  }
  uint64_t v14 = (int)result;
  if (a2 < 0)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (int)result;
    if ((int)result >= a2)
    {
      if ((a3 & 0x8000000000000000) == 0) {
        goto LABEL_9;
      }
LABEL_15:
      uint64_t v15 = 0;
      goto LABEL_16;
    }
  }
  a2 = result;
  if (a3 < 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v15 = v14;
  if (v14 >= a3)
  {
    if ((a4 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  a3 = v15;
  if ((a4 & 0x8000000000000000) == 0)
  {
LABEL_11:
    if (v14 >= a4) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v14 = 0;
LABEL_18:
  a4 = v14;
LABEL_19:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 40))(v12, a2, a3, a4);
  if (a5)
  {
    int v16 = a3 - a2;
    BOOL v17 = (int)a4 < (int)a2;
    if ((int)a4 >= (int)a2) {
      a2 = a2;
    }
    else {
      a2 = a3;
    }
    if (!v17) {
      int v16 = 0;
    }
    a3 = (v16 + a3);
    uint64_t v21 = &unk_1EDA47700;
    __int16 v22 = 2;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v12 + 32))(v12, a2, a3, &v21);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v21);
  }
  if (a5 != 0 && (int)a4 > (int)a2) {
    int v19 = a2;
  }
  else {
    int v19 = a4;
  }
  if (*(void *)(a1 + 16) > v19)
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 36) = 0;
    *(void *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 44) = 0;
  }
  int v20 = a4 - a2 + a3;
  if (a5 != 0 && (int)a4 > (int)a2) {
    int v20 = a4;
  }
  return sub_18C8BBF14(a1, v20, 1);
}

uint64_t sub_18C8BC9B8(uint64_t result)
{
  if ((*(unsigned char *)(result + 8) & 0x20) != 0)
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 72);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(void *)(v1 + 72) = 0;
  }
  return result;
}

UText *sub_18C8BCA10(UText *a1, unint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v8 = sub_18C8BBBD8(a1, a2, a4);
  if (a3)
  {
    uint64_t v9 = (uint64_t *)*(unsigned int *)a4;
    if ((int)v9 <= 0)
    {
      int v10 = *(UChar ***)(a2 + 72);
      uint64_t v11 = (icu::UnicodeString *)icu::UMemory::operator new(v9, (icu::UMemory *)0x40, v7);
      if (v11) {
        uint64_t v11 = icu::UnicodeString::UnicodeString(v11, v10);
      }
      v8->unint64_t context = v11;
      v8->providerProperties |= 0x28u;
    }
  }
  return v8;
}

uint64_t sub_18C8BCA8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (*(__int16 *)(v1 + 8) < 0) {
    return *(int *)(v1 + 12);
  }
  else {
    return *(unsigned __int16 *)(v1 + 8) >> 5;
  }
}

BOOL sub_18C8BCAB0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(int *)(a1 + 44);
  if (a2 < 0)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = *(int *)(a1 + 44);
    if (v3 >= a2) {
      goto LABEL_6;
    }
  }
  a2 = v4;
LABEL_6:
  *(_DWORD *)(a1 + 40) = a2;
  if (a3 && a2 < v3) {
    return 1;
  }
  if (a3) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a2 <= 0;
  }
  return !v6;
}

uint64_t sub_18C8BCAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  uint64_t v11 = *(void *)(a1 + 72);
  if (*(__int16 *)(v11 + 8) < 0) {
    int v12 = *(_DWORD *)(v11 + 12);
  }
  else {
    int v12 = *(unsigned __int16 *)(v11 + 8) >> 5;
  }
  if (*a6 > 0) {
    return 0;
  }
  if (a5 < 0 || !a4 && a5) {
    *a6 = 1;
  }
  if (a2 < 0 || a2 > a3)
  {
    uint64_t v13 = 0;
    *a6 = 8;
  }
  else
  {
    int Char32Start = v12;
    if (v12 > a2) {
      int Char32Start = icu::UnicodeString::getChar32Start((icu::UnicodeString *)v11, a2);
    }
    if (v12 > a3) {
      int v12 = icu::UnicodeString::getChar32Start((icu::UnicodeString *)v11, a3);
    }
    uint64_t v13 = (v12 - Char32Start);
    if (a4 && a5 >= 1)
    {
      if ((int)v13 >= a5) {
        int v15 = a5;
      }
      else {
        int v15 = v12 - Char32Start;
      }
      icu::UnicodeString::doExtract((char *)v11, Char32Start, v15, a4, 0);
      Char32Start += v15;
    }
    *(_DWORD *)(a1 + 40) = Char32Start;
    u_terminateUChars(a4, a5, v13, a6);
  }
  return v13;
}

uint64_t sub_18C8BCC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*a6 > 0) {
    return 0;
  }
  uint64_t v9 = a3;
  uint64_t Char32Start = a2;
  uint64_t v12 = *(void *)(a1 + 72);
  if (!a4 && a5) {
    *a6 = 1;
  }
  if (a2 > a3)
  {
    uint64_t result = 0;
    *a6 = 8;
    return result;
  }
  if (*(__int16 *)(v12 + 8) < 0) {
    int v13 = *(_DWORD *)(v12 + 12);
  }
  else {
    int v13 = *(unsigned __int16 *)(v12 + 8) >> 5;
  }
  int v14 = v13;
  if (a2 < 0)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = v13;
    if (v13 >= a2)
    {
      if ((a3 & 0x8000000000000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  uint64_t Char32Start = v15;
  if ((a3 & 0x8000000000000000) == 0)
  {
LABEL_14:
    uint64_t v16 = v13;
    if (v13 >= a3) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v16 = 0;
LABEL_19:
  uint64_t v9 = v16;
LABEL_20:
  if (v13 > (int)Char32Start) {
    uint64_t Char32Start = icu::UnicodeString::getChar32Start((icu::UnicodeString *)v12, Char32Start);
  }
  if (v14 > (int)v9) {
    LODWORD(v9) = icu::UnicodeString::getChar32Start((icu::UnicodeString *)v12, v9);
  }
  icu::UnicodeString::doReplace(v12, Char32Start, (v9 - Char32Start), a4, 0, a5);
  unsigned int v17 = *(unsigned __int16 *)(v12 + 8);
  if (*(__int16 *)(v12 + 8) < 0) {
    unsigned int v18 = *(_DWORD *)(v12 + 12);
  }
  else {
    unsigned int v18 = v17 >> 5;
  }
  if ((v17 & 0x11) != 0)
  {
    uint64_t v19 = 0;
  }
  else if ((v17 & 2) != 0)
  {
    uint64_t v19 = v12 + 10;
  }
  else
  {
    uint64_t v19 = *(void *)(v12 + 24);
  }
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 16) = (int)v18;
  *(_DWORD *)(a1 + 28) = v18;
  uint64_t result = v18 - v14;
  *(_DWORD *)(a1 + 40) = result + v9;
  *(_DWORD *)(a1 + 44) = v18;
  return result;
}

uint64_t sub_18C8BCDCC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  uint64_t v7 = a4;
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(result + 72);
  if (*(__int16 *)(v11 + 8) < 0) {
    LODWORD(v12) = *(_DWORD *)(v11 + 12);
  }
  else {
    LODWORD(v12) = *(unsigned __int16 *)(v11 + 8) >> 5;
  }
  if (*a6 > 0) {
    return result;
  }
  uint64_t v12 = (int)v12;
  if (a2 < 0)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = (int)v12;
    if ((int)v12 >= a2)
    {
      if ((a3 & 0x8000000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_14:
      uint64_t result = 0;
      goto LABEL_15;
    }
  }
  uint64_t v9 = v13;
  if (a3 < 0) {
    goto LABEL_14;
  }
LABEL_8:
  uint64_t result = (int)v12;
  if ((int)v12 >= a3)
  {
    if ((a4 & 0x8000000000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v8 = result;
  if ((a4 & 0x8000000000000000) == 0)
  {
LABEL_10:
    if ((int)v12 >= a4) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v12 = 0;
LABEL_17:
  uint64_t v7 = v12;
LABEL_18:
  uint64_t v14 = (v8 - v9);
  if ((int)v8 >= (int)v9 && ((int)v9 >= (int)v7 || (int)v7 >= (int)v8))
  {
    if (a5)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 40))(v11, v9, v8, v7);
      if ((int)v7 >= (int)v9) {
        uint64_t v9 = v9;
      }
      else {
        uint64_t v9 = v8;
      }
      if (v14 == 0x7FFFFFFF && (int)v9 <= 0)
      {
        if (*(_WORD *)(v11 + 8)) {
          __int16 v15 = 2;
        }
        else {
          __int16 v15 = *(_WORD *)(v11 + 8) & 0x1F;
        }
        *(_WORD *)(v11 + 8) = v15;
      }
      else
      {
        uint64_t result = icu::UnicodeString::doReplace(v11, v9, v14, 0, 0, 0);
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 40))(v11, v9, v8, v7);
    }
    __int16 v16 = *(_WORD *)(v11 + 8);
    if ((v16 & 0x11) != 0)
    {
      uint64_t v17 = 0;
    }
    else if ((v16 & 2) != 0)
    {
      uint64_t v17 = v11 + 10;
    }
    else
    {
      uint64_t v17 = *(void *)(v11 + 24);
    }
    *(void *)(v10 + 48) = v17;
    if (!a5)
    {
      uint64_t v18 = *(int *)(v10 + 44) + (uint64_t)((int)v8 - (int)v9);
      *(_DWORD *)(v10 + 44) = v18;
      *(void *)(v10 + 16) = v18;
      *(_DWORD *)(v10 + 28) = v18;
    }
    int v19 = v7 + v8 - v9;
    if ((int)v9 < (int)v7 && a5 != 0) {
      int v19 = v7;
    }
    *(_DWORD *)(v10 + 40) = v19;
  }
  else
  {
    *a6 = 8;
  }
  return result;
}

uint64_t sub_18C8BCFD8(uint64_t result)
{
  if ((*(unsigned char *)(result + 8) & 0x20) != 0)
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 72);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(void *)(v1 + 72) = 0;
  }
  return result;
}

UText *sub_18C8BD030(UText *a1, unint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v7 = sub_18C8BBBD8(a1, a2, a4);
  uint64_t v8 = v7;
  if (a3 && *(int *)a4 <= 0)
  {
    uint64_t v9 = ((uint64_t (*)(UText *))v7->pFuncs->nativeLength)(v7);
    uint64_t v10 = *(__int16 **)(a2 + 72);
    uint64_t v11 = uprv_malloc(((v9 << 32) + 0x100000000) >> 31);
    if (v11)
    {
      if (v9 << 32 >= 1)
      {
        if ((int)v9 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = (int)v9;
        }
        uint64_t v13 = v11;
        do
        {
          __int16 v14 = *v10++;
          *v13++ = v14;
          --v12;
        }
        while (v12);
      }
      v11[(int)v9] = 0;
      v8->unint64_t context = v11;
      v8->providerProperties |= 0x20u;
    }
    else
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return v8;
}

uint64_t sub_18C8BD0F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if (v1 < 0)
  {
    uint64_t v2 = *(void *)(a1 + 72);
    uint64_t v1 = *(void *)(a1 + 16);
    if (*(_WORD *)(v2 + 2 * v1))
    {
      uint64_t v3 = v2 + 2;
      while (*(unsigned __int16 *)(v3 + 2 * v1++))
        ;
      *(void *)(a1 + 16) = v1;
    }
    *(void *)(a1 + 112) = v1;
    *(_DWORD *)(a1 + 44) = v1;
    *(_DWORD *)(a1 + 28) = v1;
    *(_DWORD *)(a1 + 8) &= ~2u;
  }
  return v1;
}

BOOL sub_18C8BD144(uint64_t a1, uint64_t a2, int a3)
{
  if (a2 < 0)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 <= a2)
    {
      uint64_t v5 = *(void *)(a1 + 112);
      if (v5 < 0)
      {
        int v6 = a2 + 32;
        if ((unint64_t)a2 > 0x7FFFFFDF) {
          int v6 = 0x7FFFFFFF;
        }
        if (v6 <= (int)v4)
        {
LABEL_17:
          uint64_t v5 = a2 - 1;
          if (a2 >= 1 && (*(_WORD *)(v3 + 2 * a2) & 0xFC00) == 0xDC00)
          {
            if ((*(_WORD *)(v3 + 2 * v5) & 0xFC00) != 0xD800) {
              uint64_t v5 = a2;
            }
          }
          else
          {
            uint64_t v5 = a2;
          }
          if (v4 != 0x7FFFFFFF)
          {
            if ((*(_WORD *)(v3 + 2 * ((int)v4 - 1)) & 0xFC00) == 0xD800) {
              int v7 = v4 - 1;
            }
            else {
              int v7 = v4;
            }
            *(void *)(a1 + 16) = v7;
            *(_DWORD *)(a1 + 28) = v7;
            *(_DWORD *)(a1 + 44) = v7;
            goto LABEL_41;
          }
          *(void *)(a1 + 112) = 0x7FFFFFFFLL;
          *(_DWORD *)(a1 + 44) = 0x7FFFFFFF;
          *(_DWORD *)(a1 + 28) = 0x7FFFFFFF;
          if (v5 >= 0x7FFFFFFF) {
            uint64_t v5 = 0x7FFFFFFFLL;
          }
          *(void *)(a1 + 16) = 0x7FFFFFFFLL;
        }
        else
        {
          uint64_t v4 = (int)v4;
          while (*(_WORD *)(v3 + 2 * v4))
          {
            if (v6 == ++v4)
            {
              LODWORD(v4) = v6;
              goto LABEL_17;
            }
          }
          *(void *)(a1 + 112) = v4;
          *(_DWORD *)(a1 + 44) = v4;
          uint64_t v5 = v4;
          *(_DWORD *)(a1 + 28) = v4;
          if (v4 > a2)
          {
            uint64_t v5 = a2 - 1;
            if (a2 >= 1 && (*(_WORD *)(v3 + 2 * a2) & 0xFC00) == 0xDC00)
            {
              if ((*(_WORD *)(v3 + 2 * v5) & 0xFC00) != 0xD800) {
                uint64_t v5 = a2;
              }
            }
            else
            {
              uint64_t v5 = a2;
            }
          }
          *(void *)(a1 + 16) = v4;
        }
        *(_DWORD *)(a1 + 8) &= ~2u;
      }
    }
    else if (a2 && (*(_WORD *)(v3 + 2 * a2) & 0xFC00) == 0xDC00)
    {
      uint64_t v5 = a2 - 1;
      if ((*(_WORD *)(v3 + 2 * (a2 - 1)) & 0xFC00) != 0xD800) {
        uint64_t v5 = a2;
      }
    }
    else
    {
      uint64_t v5 = a2;
    }
  }
LABEL_41:
  *(_DWORD *)(a1 + 40) = v5;
  if (a3 && v5 < *(void *)(a1 + 16)) {
    return 1;
  }
  if (a3) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v5 <= 0;
  }
  return !v9;
}

uint64_t sub_18C8BD2FC(uint64_t a1, uint64_t a2, int64_t a3, uint64_t a4, int a5, int *a6)
{
  if (*a6 > 0) {
    return 0;
  }
  if (a5 < 0 || ((unint64_t v10 = a3, !a4) ? (v11 = a5 == 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), a3 < a2 || v12))
  {
    uint64_t v6 = 0;
    *a6 = 1;
    return v6;
  }
  sub_18C8BD144(a1, a2, 1);
  int v14 = *(_DWORD *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 112);
  if ((v15 & 0x80000000) != 0)
  {
    if ((v10 & 0x8000000000000000) != 0)
    {
      LODWORD(v10) = 0;
    }
    else if (v10 >> 31)
    {
      LODWORD(v10) = 0x7FFFFFFF;
    }
    goto LABEL_23;
  }
  if ((v10 & 0x8000000000000000) != 0)
  {
    unsigned int v16 = 0;
  }
  else
  {
    unsigned int v16 = *(void *)(a1 + 112);
    if (v16 >= v10) {
      goto LABEL_23;
    }
  }
  LODWORD(v10) = v16;
LABEL_23:
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v6 = (v10 - v14);
  if ((int)v10 <= v14)
  {
    uint64_t v6 = 0;
    LODWORD(v10) = *(_DWORD *)(a1 + 40);
  }
  else
  {
    unint64_t v18 = 0;
    uint64_t v19 = v17 + 2 * v14;
    while ((v15 & 0x80000000) == 0 || *(_WORD *)(v19 + 2 * v18))
    {
      if (v18 >= a5)
      {
        if ((v15 & 0x80000000) == 0) {
          goto LABEL_33;
        }
      }
      else
      {
        *(_WORD *)(a4 + 2 * v18) = *(_WORD *)(v19 + 2 * v18);
      }
      if (v6 == ++v18)
      {
        LODWORD(v10) = v14 + v18;
        goto LABEL_33;
      }
    }
    *(void *)(a1 + 112) = v14 + v18;
    LODWORD(v10) = v14 + v18;
    *(void *)(a1 + 16) = v14 + v18;
    *(_DWORD *)(a1 + 44) = v14 + v18;
    *(_DWORD *)(a1 + 28) = v14 + v18;
    uint64_t v6 = v18;
    LODWORD(v15) = v14 + v18;
  }
LABEL_33:
  if ((int)v10 >= 1
    && (*(_WORD *)(v17 + 2 * (v10 - 1)) & 0xFC00) == 0xD800
    && ((int)v10 < (int)v15 || (v15 & 0x80000000) != 0))
  {
    __int16 v20 = *(_WORD *)(v17 + 2 * v10);
    if ((v20 & 0xFC00) == 0xDC00)
    {
      if ((int)v6 < a5)
      {
        *(_WORD *)(a4 + 2 * (int)v6) = v20;
        uint64_t v6 = (v6 + 1);
      }
      LODWORD(v10) = v10 + 1;
    }
  }
  if (*(void *)(a1 + 16) >= (int)v10) {
    *(_DWORD *)(a1 + 40) = v10;
  }
  else {
    sub_18C8BD144(a1, (int)v10, 1);
  }
  u_terminateUChars(a4, a5, v6, a6);
  return v6;
}

void sub_18C8BD4D8(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 8) & 0x20) != 0)
  {
    uprv_free(*(void **)(a1 + 72));
    *(void *)(a1 + 72) = 0;
  }
}

UText *sub_18C8BD50C(UText *a1, uint64_t a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (a3)
  {
    uint64_t v4 = 0;
    *a4 = U_UNSUPPORTED_ERROR;
  }
  else
  {
    uint64_t v8 = (int *)(*(uint64_t (**)(void))(**(void **)(a2 + 72) + 64))(*(void *)(a2 + 72));
    double v9 = utext_openCharacterIterator(a1, v8, a4);
    uint64_t v4 = v10;
    if (*(int *)a4 <= 0)
    {
      uint64_t v11 = *(int *)(a2 + 40);
      if ((int)v11 <= *(_DWORD *)(a2 + 28)) {
        int64_t v12 = *(void *)(a2 + 32) + v11;
      }
      else {
        int64_t v12 = (*(uint64_t (**)(uint64_t, double))(*(void *)(a2 + 56) + 64))(a2, v9);
      }
      utext_setNativeIndex(v4, v12);
      v4->unint64_t r = v8;
    }
  }
  return v4;
}

uint64_t sub_18C8BD5F0(uint64_t a1)
{
  return *(int *)(a1 + 112);
}

BOOL sub_18C8BD5F8(uint64_t a1, unsigned int a2, int a3)
{
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (v4 <= a2) {
      int v5 = *(void *)(a1 + 112);
    }
    else {
      int v5 = a2;
    }
    BOOL v6 = v5 > 0;
    if (a3 || (int v7 = v5 - 1, v5 < 1))
    {
      if (!a3)
      {
        char v8 = 1;
        int v7 = v5;
        goto LABEL_17;
      }
      goto LABEL_11;
    }
LABEL_16:
    char v8 = 1;
    goto LABEL_17;
  }
  int v5 = 0;
  if (!a3)
  {
    int v7 = 0;
    goto LABEL_16;
  }
  BOOL v6 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
LABEL_11:
  char v8 = 0;
  BOOL v9 = v4 == v5 && v6;
  int v7 = v5 - v9;
LABEL_17:
  if (v7 <= 0) {
    int v10 = -(-v7 & 0xF);
  }
  else {
    int v10 = v7 & 0xF;
  }
  int v11 = v7 - v10;
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12 == v7 - v10) {
    goto LABEL_37;
  }
  uint64_t v12 = v11;
  if (*(_DWORD *)(a1 + 120) == v11)
  {
    uint64_t v13 = (uint64_t *)(a1 + 80);
  }
  else
  {
    if (*(_DWORD *)(a1 + 124) != v11)
    {
      uint64_t v15 = *(void *)(a1 + 72);
      uint64_t v14 = *(void *)(a1 + 80);
      if (v14 == *(void *)(a1 + 48)) {
        uint64_t v14 = *(void *)(a1 + 88);
      }
      (*(void (**)(void, void))(*(void *)v15 + 120))(*(void *)(a1 + 72), v11);
      uint64_t v16 = 0;
      int v17 = v7 - v10;
      do
      {
        *(_WORD *)(v14 + 2 * v16) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
        BOOL v18 = *(void *)(a1 + 112) < v17 + (int)v16 || v16 == 15;
        ++v16;
      }
      while (!v18);
      goto LABEL_34;
    }
    uint64_t v13 = (uint64_t *)(a1 + 88);
  }
  uint64_t v14 = *v13;
LABEL_34:
  *(void *)(a1 + 48) = v14;
  int v19 = 16;
  *(_DWORD *)(a1 + 44) = 16;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 16) = (int)v12 + 16;
  uint64_t v20 = *(void *)(a1 + 112);
  if (v20 < (int)v12 + 16)
  {
    *(void *)(a1 + 16) = v20;
    int v19 = v20 - v12;
    *(_DWORD *)(a1 + 44) = v20 - v12;
  }
  *(_DWORD *)(a1 + 28) = v19;
LABEL_37:
  int v21 = v5 - v12;
  *(_DWORD *)(a1 + 40) = v5 - v12;
  if (v8) {
    return v21 > 0;
  }
  else {
    return v21 < *(_DWORD *)(a1 + 44);
  }
}

uint64_t sub_18C8BD7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  if (*a6 > 0) {
    return 0;
  }
  if (a5 < 0 || ((signed int v10 = a3, !a4) ? (v11 = a5 == 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), a2 > a3 || v12))
  {
    uint64_t v6 = 0;
    *a6 = 1;
    return v6;
  }
  uint64_t v14 = *(int *)(a1 + 112);
  if (a2 < 0)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = *(int *)(a1 + 112);
    if (v14 >= a2)
    {
      if ((a3 & 0x8000000000000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_20;
    }
  }
  a2 = v15;
  if ((a3 & 0x8000000000000000) == 0)
  {
LABEL_15:
    if (v14 >= a3) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(v14) = 0;
LABEL_21:
  signed int v10 = v14;
LABEL_22:
  uint64_t v16 = *(_DWORD **)(a1 + 72);
  (*(void (**)(_DWORD *, uint64_t))(*(void *)v16 + 128))(v16, a2);
  signed int v17 = v16[3];
  if (v17 >= v10)
  {
    uint64_t v6 = 0;
  }
  else
  {
    LODWORD(v6) = 0;
    signed int v18 = v16[3];
    do
    {
      unsigned int v19 = (*(uint64_t (**)(_DWORD *))(*(void *)v16 + 48))(v16);
      if (v19 < 0x10000) {
        int v20 = 1;
      }
      else {
        int v20 = 2;
      }
      if (v20 + (int)v6 <= a5)
      {
        if (HIWORD(v19))
        {
          int v22 = v6 + 1;
          *(_WORD *)(a4 + 2 * (int)v6) = (v19 >> 10) - 10304;
          int v21 = 2;
          LOWORD(v19) = v19 & 0x3FF | 0xDC00;
        }
        else
        {
          int v21 = 1;
          int v22 = v6;
        }
        uint64_t v6 = (v6 + v21);
        *(_WORD *)(a4 + 2 * v22) = v19;
        v18 += v20;
        signed int v17 = v18;
      }
      else
      {
        *a6 = 15;
        v18 += v20;
        uint64_t v6 = (v20 + v6);
      }
    }
    while (v18 < v10);
  }
  sub_18C8BD5F8(a1, v17, 1);
  u_terminateUChars(a4, a5, v6, a6);
  return v6;
}

uint64_t sub_18C8BD9B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)(a1 + 96) = 0;
  return result;
}

UChar32 utf8_nextCharSafeBody(const uint8_t *s, int32_t *pi, int32_t length, UChar32 c, UBool strict)
{
  int32_t v5 = *pi;
  LODWORD(v6) = *pi;
  if (c <= 244 && v5 != length)
  {
    if (c < 240)
    {
      if (c < 224)
      {
        if (c >= 194)
        {
          unsigned int v14 = s[v5] ^ 0x80;
          if (v14 <= 0x3F)
          {
            *puint64_t i = v5 + 1;
            return ((c << 6) - 12288) | v14;
          }
        }
      }
      else
      {
        uint64_t v8 = c & 0xF;
        int v9 = s[v5];
        if (strict == -2)
        {
          unsigned int v10 = v9 ^ 0x80;
          if (v10 <= 0x3F && ((c & 0xF) != 0 || v10 >= 0x20))
          {
            uint64_t v11 = v5 + 1;
            LODWORD(v6) = length;
            if (v11 != length)
            {
              unsigned int v12 = s[v11] ^ 0x80;
              LODWORD(v6) = v5 + 1;
              if (v12 <= 0x3F)
              {
                *puint64_t i = v5 + 2;
                return (v10 << 6) | (v8 << 12) | v12;
              }
            }
          }
          goto LABEL_41;
        }
        if ((a00000000000000[v8] >> (s[v5] >> 5)))
        {
          LODWORD(v6) = length;
          if (v5 + 1 != length)
          {
            unsigned int v18 = s[v5 + 1] ^ 0x80;
            LODWORD(v6) = v5 + 1;
            if (v18 <= 0x3F)
            {
              LODWORD(v6) = v5 + 2;
              UChar32 result = (v8 << 12) | ((v9 & 0x3F) << 6) | v18;
              if (strict < 1 || result >> 4 < 0xFDD) {
                goto LABEL_44;
              }
              if (result >> 4 >= 0xFDF
                && (unsigned __int16)(((_WORD)v8 << 12) | ((v9 & 0x3F) << 6) | v18 & 0xFFFE) != 65534)
              {
                goto LABEL_44;
              }
              goto LABEL_40;
            }
          }
        }
      }
    }
    else
    {
      unint64_t v7 = s[v5];
      if ((byte_18CA87478[v7 >> 4] >> (c & 7)))
      {
        uint64_t v6 = v5 + 1;
        if (v5 + 1 == length)
        {
          LODWORD(v6) = length;
        }
        else
        {
          unsigned int v15 = s[v6] ^ 0x80;
          if (v15 <= 0x3F)
          {
            LODWORD(v6) = length;
            if (v5 + 2 != length)
            {
              unsigned int v16 = s[v5 + 2] ^ 0x80;
              LODWORD(v6) = v5 + 2;
              if (v16 <= 0x3F)
              {
                LODWORD(v6) = v5 + 3;
                UChar32 result = ((c & 7) << 18) | ((v7 & 0x3F) << 12) | (v15 << 6) | v16;
                if (strict < 1 || result >> 4 < 0xFDD) {
                  goto LABEL_44;
                }
                if (result >> 4 >= 0xFDF
                  && (HIWORD(result) > 0x10u
                   || (((v7 & 0x3F) << 12) & 0xFFFE | (v15 << 6) & 0xFFFE | (unsigned __int16)v16 & 0xFFFE) != 65534))
                {
                  goto LABEL_44;
                }
                goto LABEL_40;
              }
            }
          }
        }
      }
    }
  }
  if (strict < 0)
  {
LABEL_41:
    if (strict == -3) {
      UChar32 result = 65533;
    }
    else {
      UChar32 result = -1;
    }
    goto LABEL_44;
  }
LABEL_40:
  UChar32 result = dword_18CA8748C[(int)v6 - v5];
LABEL_44:
  *puint64_t i = v6;
  return result;
}

int32_t utf8_appendCharSafeBody(uint8_t *s, int32_t i, int32_t length, UChar32 c, UBool *pIsError)
{
  if (c > 0x7FF)
  {
    if (HIWORD(c))
    {
      if (HIWORD(c) > 0x10u) {
        goto LABEL_12;
      }
      uint64_t v6 = i + 3;
      if ((int)v6 >= length) {
        goto LABEL_12;
      }
      int v9 = &s[i];
      *int v9 = (c >> 18) | 0xF0;
      v9[1] = (c >> 12) & 0x3F | 0x80;
      v9[2] = (c >> 6) & 0x3F | 0x80;
      uint8_t v8 = c & 0x3F | 0x80;
      i += 4;
    }
    else
    {
      uint64_t v6 = i + 2;
      if ((int)v6 >= length || (c & 0xFFFFF800) == 0xD800) {
        goto LABEL_12;
      }
      unint64_t v7 = &s[i];
      *unint64_t v7 = (c >> 12) | 0xE0;
      v7[1] = (c >> 6) & 0x3F | 0x80;
      uint8_t v8 = c & 0x3F | 0x80;
      i += 3;
    }
    s[v6] = v8;
    return i;
  }
  uint64_t v5 = i + 1;
  if ((int)v5 < length)
  {
    s[i] = (c >> 6) | 0xC0;
    i += 2;
    s[v5] = c & 0x3F | 0x80;
    return i;
  }
LABEL_12:
  if (pIsError)
  {
    *pIsErrounint64_t r = 1;
  }
  else if (length - i >= 1)
  {
    if (length - i >= 3) {
      unsigned int v10 = 3;
    }
    else {
      unsigned int v10 = length - i;
    }
    uint64_t v11 = &s[i];
    unsigned int v12 = dword_18CA8748C[v10 - 1];
    if (v10 == 1)
    {
      *uint64_t v11 = v12;
      int v15 = 1;
    }
    else
    {
      if (v10 > 2)
      {
        unsigned int v13 = (v12 >> 12) | 0xFFFFFFE0;
        v11[1] = (v12 >> 6) & 0x3F | 0x80;
        unsigned int v14 = 2;
      }
      else
      {
        unsigned int v13 = (v12 >> 6) | 0xFFFFFFC0;
        unsigned int v14 = 1;
      }
      *uint64_t v11 = v13;
      uint8_t v16 = v12 & 0x3F | 0x80;
      int v15 = v14 + 1;
      v11[v14] = v16;
    }
    i += v15;
  }
  return i;
}

UChar32 utf8_prevCharSafeBody(const uint8_t *s, int32_t start, int32_t *pi, UChar32 c, UBool strict)
{
  if (c << 24 > -1073741825) {
    goto LABEL_43;
  }
  int32_t v5 = *pi;
  if (*pi <= start) {
    goto LABEL_43;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v5 - 1;
  unint64_t v8 = s[v7];
  if ((v8 + 62) <= 0x32u)
  {
    if (v8 <= 0xDF)
    {
      *puint64_t i = v7;
      return (c & 0x3F | (v8 << 6)) - 12288;
    }
    uint8_t v16 = &byte_18CA87478[c >> 4];
    signed int v17 = &a00000000000000[v8 & 0xF];
    if (v8 <= 0xEF)
    {
      LOBYTE(v8) = c >> 5;
      uint8_t v16 = (unsigned __int8 *)v17;
    }
    if ((*v16 >> (v8 & 7)))
    {
      *puint64_t i = v7;
      if ((strict & 0x80000000) == 0) {
        return 159;
      }
      goto LABEL_45;
    }
    goto LABEL_43;
  }
  if ((int)v7 <= start || (char)v8 > -65) {
    goto LABEL_43;
  }
  int v10 = c & 0x3F;
  int32_t v11 = v6 - 2;
  unint64_t v12 = s[v6 - 2];
  if ((v12 + 32) > 0x14u)
  {
    if (v11 <= start) {
      goto LABEL_43;
    }
    if ((char)v12 > -65) {
      goto LABEL_43;
    }
    int32_t v18 = v6 - 3;
    uint8_t v19 = s[v6 - 3];
    if ((v19 + 16) > 4u) {
      goto LABEL_43;
    }
    int v20 = v19 & 7;
    if (((byte_18CA87478[v12 >> 4] >> v20) & 1) == 0) {
      goto LABEL_43;
    }
    *puint64_t i = v18;
    UChar32 result = ((v12 & 0x3F) << 12) | (v20 << 18) | ((v8 & 0x3F) << 6) | v10;
    if (strict >= 1
      && result >> 4 >= 0xFDD
      && (result >> 4 < 0xFDF
       || HIWORD(result) <= 0x10u
       && (((v12 & 0x3F) << 12) & 0xFFFE | ((v8 & 0x3F) << 6) | c & 0x3E) == 0xFFFE))
    {
      return 1114111;
    }
  }
  else
  {
    if (v12 > 0xEF)
    {
      if ((byte_18CA87478[v8 >> 4] >> (v12 & 7)))
      {
        *puint64_t i = v11;
        if ((strict & 0x80000000) == 0) {
          return 0xFFFF;
        }
        goto LABEL_45;
      }
      goto LABEL_43;
    }
    uint64_t v13 = v12 & 0xF;
    if (strict == -2)
    {
      unsigned int v14 = v8 ^ 0x80;
      if (v14 > 0x1F || v13 != 0)
      {
        *puint64_t i = v11;
        return (v14 << 6) | (v13 << 12) | v10;
      }
LABEL_45:
      if (strict == -3) {
        return 65533;
      }
      else {
        return -1;
      }
    }
    if (((a00000000000000[v13] >> (v8 >> 5)) & 1) == 0)
    {
LABEL_43:
      if ((strict & 0x80000000) == 0) {
        return 21;
      }
      goto LABEL_45;
    }
    *puint64_t i = v11;
    UChar32 result = ((v8 & 0x3F) << 6) | (v13 << 12) | v10;
    if (strict >= 1
      && result >> 4 >= 0xFDD
      && ((~result & 0xFFFE) == 0 || result >> 4 < 0xFDF))
    {
      return 0xFFFF;
    }
  }
  return result;
}

int32_t utf8_back1SafeBody(const uint8_t *s, int32_t start, int32_t i)
{
  if (i <= start || (char)s[i] > -65) {
    return i;
  }
  uint64_t v3 = i - 1;
  unint64_t v4 = s[v3];
  if ((v4 + 62) > 0x32u)
  {
    if ((int)v3 <= start || (char)v4 > -65) {
      return i;
    }
    LODWORD(v3) = i - 2;
    unint64_t v9 = s[i - 2];
    if ((v9 + 32) > 0x14u)
    {
      if ((int)v3 <= start) {
        return i;
      }
      if ((char)v9 > -65) {
        return i;
      }
      LODWORD(v3) = i - 3;
      uint8_t v15 = s[i - 3];
      if ((v15 + 16) > 4u || ((byte_18CA87478[v9 >> 4] >> (v15 & 7)) & 1) == 0) {
        return i;
      }
    }
    else
    {
      BOOL v5 = v9 > 0xEF;
      int v10 = &byte_18CA87478[v4 >> 4];
      char v11 = v9 & 7;
      unint64_t v12 = &a00000000000000[v9 & 0xF];
      unsigned int v13 = v4 >> 5;
      if (v5) {
        LOBYTE(v13) = v11;
      }
      else {
        int v10 = (unsigned __int8 *)v12;
      }
      if (((*v10 >> v13) & 1) == 0) {
        return i;
      }
    }
    return v3;
  }
  if (v4 < 0xE0) {
    return v3;
  }
  BOOL v5 = v4 > 0xEF;
  char v6 = v4 & 7;
  uint64_t v7 = (unsigned __int8 *)&a00000000000000[v4 & 0xF];
  int v8 = s[i] >> 5;
  if (v5)
  {
    LOBYTE(v8) = v6;
    uint64_t v7 = &byte_18CA87478[s[i] >> 4];
  }
  if ((*v7 >> v8)) {
    return v3;
  }
  return i;
}

icu::ICU_Utility *icu::ICU_Utility::appendNumber(icu::ICU_Utility *this, icu::UnicodeString *a2, unsigned int a3, int a4)
{
  unint64_t v4 = this;
  if (a3 - 37 > 0xFFFFFFDC)
  {
    int v7 = (int)a2;
    if ((a2 & 0x80000000) != 0)
    {
      int v7 = -(int)a2;
      __int16 v14 = 45;
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v14, 0, 1);
    }
    int v8 = 1;
    if (v7 >= a3)
    {
      int v9 = v7;
      do
      {
        v9 /= a3;
        v8 *= a3;
        --a4;
      }
      while (v9 >= (int)a3);
    }
    if (a4 > 1)
    {
      unsigned int v10 = a4 + 1;
      do
      {
        __int16 v15 = 48;
        icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v15, 0, 1);
        --v10;
      }
      while (v10 > 2);
    }
    if (v8 >= 1)
    {
      do
      {
        __int16 v16 = a0123456789abcd_1[v7 / v8];
        icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v16, 0, 1);
        v7 %= v8;
        BOOL v11 = v8 >= a3;
        v8 /= a3;
      }
      while (v11);
    }
  }
  else
  {
    __int16 v13 = 63;
    return (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v13, 0, 1);
  }
  return v4;
}

BOOL icu::ICU_Utility::isUnprintable(icu::ICU_Utility *this)
{
  return (this - 127) < 0xFFFFFFA1;
}

BOOL icu::ICU_Utility::shouldAlwaysBeEscaped(icu::ICU_Utility *this)
{
  if ((int)this < 32) {
    return 1;
  }
  unsigned int v2 = this;
  if (this < 0x7F) {
    return 0;
  }
  if (this < 0xA0) {
    return 1;
  }
  if (this >> 11 < 0x1B) {
    return 0;
  }
  BOOL result = 1;
  if ((~v2 & 0xFFFE) != 0)
  {
    BOOL v3 = v2 - 64976 < 0x20 || HIWORD(v2) > 0x10u;
    return v2 < 0xE000 || v3;
  }
  return result;
}

uint64_t icu::ICU_Utility::escapeUnprintable(icu::ICU_Utility *this, icu::UnicodeString *a2)
{
  if ((a2 - 32) < 0x5F) {
    return 0;
  }
  icu::ICU_Utility::escape(this, a2);
  return 1;
}

icu::ICU_Utility *icu::ICU_Utility::escape(icu::ICU_Utility *this, icu::UnicodeString *a2)
{
  unsigned int v2 = a2;
  __int16 v6 = 92;
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
  if (v2 >= 0x10000)
  {
    __int16 v6 = 85;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
    __int16 v6 = a0123456789abcd_1[v2 >> 28];
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
    __int16 v6 = a0123456789abcd_1[HIBYTE(v2) & 0xF];
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
    __int16 v6 = a0123456789abcd_1[(v2 >> 20) & 0xF];
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
    __int16 v4 = a0123456789abcd_1[HIWORD(v2) & 0xF];
  }
  else
  {
    __int16 v4 = 117;
  }
  __int16 v6 = v4;
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
  __int16 v6 = a0123456789abcd_1[(unsigned __int16)v2 >> 12];
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
  __int16 v6 = a0123456789abcd_1[(v2 >> 8) & 0xF];
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
  __int16 v6 = a0123456789abcd_1[v2 >> 4];
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
  __int16 v6 = a0123456789abcd_1[v2 & 0xF];
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
  return this;
}

unint64_t icu::ICU_Utility::skipWhitespace(icu::ICU_Utility *this, const icu::UnicodeString *a2, int *a3)
{
  int v3 = (int)a3;
  unsigned int v5 = *((unsigned __int16 *)this + 4);
  if ((v5 & 0x11) != 0)
  {
    __int16 v6 = 0;
  }
  else if ((v5 & 2) != 0)
  {
    __int16 v6 = (char *)this + 10;
  }
  else
  {
    __int16 v6 = (char *)*((void *)this + 3);
  }
  int v7 = (__int16)v5;
  unsigned int v8 = v5 >> 5;
  if (v7 < 0) {
    unsigned int v8 = *((_DWORD *)this + 3);
  }
  unint64_t result = (unint64_t)((char *)icu::PatternProps::skipWhiteSpace((unsigned __int16 *)&v6[2 * *(int *)a2], v8 - *(_DWORD *)a2)- v6) >> 1;
  if (v3) {
    *(_DWORD *)a2 = result;
  }
  return result;
}

BOOL icu::ICU_Utility::parseChar(uint64_t a1, const icu::UnicodeString *a2, int a3)
{
  int v6 = *(_DWORD *)a2;
  icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
  uint64_t v7 = *(int *)a2;
  unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
  if ((v8 & 0x8000) != 0)
  {
    unsigned int v9 = *(_DWORD *)(a1 + 12);
    if (v7 != v9) {
      goto LABEL_6;
    }
LABEL_5:
    BOOL result = 0;
    goto LABEL_14;
  }
  if (v7 == v8 >> 5) {
    goto LABEL_5;
  }
  unsigned int v9 = v8 >> 5;
LABEL_6:
  if (v9 <= v7)
  {
    int v12 = 0xFFFF;
  }
  else
  {
    if ((v8 & 2) != 0) {
      uint64_t v11 = a1 + 10;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 24);
    }
    int v12 = *(unsigned __int16 *)(v11 + 2 * v7);
  }
  BOOL result = v12 == a3;
  if (v12 == a3) {
    int v6 = v7 + 1;
  }
LABEL_14:
  *(_DWORD *)a2 = v6;
  return result;
}

unint64_t icu::ICU_Utility::parsePattern(icu::ICU_Utility *this, const icu::UnicodeString *a2, unint64_t a3, int a4)
{
  unsigned int v5 = *((unsigned __int16 *)this + 4);
  int v6 = (__int16)v5;
  LODWORD(v7) = v5 >> 5;
  if (v6 >= 0) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = *((unsigned int *)this + 3);
  }
  if (v7)
  {
    unsigned int v11 = icu::UnicodeString::char32At((uint64_t *)v7, this, 0);
    if ((int)a3 < a4)
    {
      unsigned int v12 = v11;
      int v13 = 0;
      do
      {
        __int16 v14 = (icu::PatternProps *)(*(uint64_t (**)(const icu::UnicodeString *, unint64_t))(*(void *)a2 + 80))(a2, a3);
        unsigned int v15 = v14;
        if (v12 == 126)
        {
          if (icu::PatternProps::isWhiteSpace(v14))
          {
            if (v15 < 0x10000) {
              int v16 = 1;
            }
            else {
              int v16 = 2;
            }
            a3 = (v16 + a3);
            unsigned int v12 = 126;
            continue;
          }
          ++v13;
        }
        else
        {
          if (v14 != v12) {
            return 0xFFFFFFFFLL;
          }
          if (v12 < 0x10000) {
            int v17 = 1;
          }
          else {
            int v17 = 2;
          }
          a3 = (v17 + a3);
          v13 += v17;
        }
        unsigned int v18 = *((unsigned __int16 *)this + 4);
        int v19 = (__int16)v18;
        LODWORD(v20) = v18 >> 5;
        if (v19 >= 0) {
          unint64_t v20 = v20;
        }
        else {
          unint64_t v20 = *((unsigned int *)this + 3);
        }
        if (v13 == v20) {
          return a3;
        }
        unsigned int v12 = icu::UnicodeString::char32At((uint64_t *)v20, this, v13);
      }
      while ((int)a3 < a4);
    }
    return 0xFFFFFFFFLL;
  }
  return a3;
}

uint64_t icu::ICU_Utility::parseAsciiInteger(icu::ICU_Utility *this, const icu::UnicodeString *a2, int *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = *(int *)a2;
  for (uint64_t i = 2 * v4; ; i += 2)
  {
    unsigned int v6 = *((unsigned __int16 *)this + 4);
    if (*((__int16 *)this + 4) < 0)
    {
      int v7 = *((_DWORD *)this + 3);
      if ((int)v4 >= v7) {
        return v3;
      }
    }
    else
    {
      if ((int)v4 >= (int)(v6 >> 5)) {
        return v3;
      }
      int v7 = v6 >> 5;
    }
    if (v7 <= v4) {
      break;
    }
    unsigned int v8 = (v6 & 2) != 0 ? (icu::ICU_Utility *)((char *)this + 10) : (icu::ICU_Utility *)*((void *)this + 3);
    int v9 = *(unsigned __int16 *)((char *)v8 + i);
    if ((v9 - 48) > 9) {
      break;
    }
    uint64_t v3 = (v9 + 10 * v3 - 48);
    LODWORD(v4) = v4 + 1;
    *(_DWORD *)a2 = v4;
  }
  return v3;
}

icu::ICU_Utility *icu::ICU_Utility::appendToRule(icu::ICU_Utility *this, icu::UnicodeString *a2, int a3, int a4, icu::UnicodeString *a5, icu::UnicodeString *a6)
{
  int v9 = this;
  if (!a3 && ((a2 - 32) < 0x5F || !a4))
  {
    unsigned int v29 = *((unsigned __int16 *)a5 + 4);
    int v30 = (__int16)v29;
    int v31 = v29 >> 5;
    if (v30 < 0) {
      int v31 = *((_DWORD *)a5 + 3);
    }
    if (v31)
    {
      if (v31 > 0) {
        goto LABEL_87;
      }
    }
    else if (a2 == 92 || a2 == 39)
    {
      __int16 v47 = 92;
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v47, 0, 1);
LABEL_80:
      uint64_t v37 = (uint64_t)v9;
      unsigned int v38 = a2;
      return (icu::ICU_Utility *)icu::UnicodeString::append(v37, v38);
    }
    if (((a2 - 127) < 0xFFFFFFA2
       || (a2 - 48) < 0xA
       || (a2 & 0xFFFFFFDF) - 65 <= 0x19)
      && !icu::PatternProps::isWhiteSpace(a2))
    {
      uint64_t v39 = v9;
      unsigned int v40 = a2;
LABEL_89:
      return (icu::ICU_Utility *)icu::UnicodeString::append((uint64_t)v39, v40);
    }
LABEL_87:
    this = (icu::ICU_Utility *)icu::UnicodeString::append((uint64_t)a5, a2);
    if (a2 != 39) {
      return this;
    }
    uint64_t v39 = a5;
    unsigned int v40 = 39;
    goto LABEL_89;
  }
  unsigned int v10 = *((unsigned __int16 *)a5 + 4);
  int v11 = (__int16)v10;
  int v12 = v10 >> 5;
  if (v11 < 0) {
    int v12 = *((_DWORD *)a5 + 3);
  }
  if (v12 < 1) {
    goto LABEL_63;
  }
  if ((v11 & 0x8000) != 0) {
    goto LABEL_10;
  }
LABEL_8:
  if ((unsigned __int16)v11 >= 0x40u)
  {
    do
    {
      int v13 = (_WORD *)*((void *)a5 + 3);
      if ((v11 & 2) != 0) {
        int v13 = (_WORD *)((char *)a5 + 10);
      }
      if (*v13 != 39) {
        break;
      }
      unsigned int v14 = (v11 & 0x8000u) == 0 ? (unsigned __int16)v11 >> 5 : *((_DWORD *)a5 + 3);
      if (v14 < 2 || v13[1] != 39) {
        break;
      }
      __int16 v41 = 92;
      uint64_t v15 = icu::UnicodeString::doAppend((uint64_t)v9, (uint64_t)&v41, 0, 1);
      __int16 v42 = 39;
      icu::UnicodeString::doAppend(v15, (uint64_t)&v42, 0, 1);
      this = (icu::ICU_Utility *)icu::UnicodeString::doReplace((uint64_t)a5, 0, 2, 0, 0, 0);
      LOWORD(v11) = *((_WORD *)a5 + 4);
      if ((v11 & 0x8000) == 0) {
        goto LABEL_8;
      }
LABEL_10:
      ;
    }
    while (*((int *)a5 + 3) > 1);
  }
  for (int i = 1; ; ++i)
  {
    int v17 = (unsigned __int16)v11 >> 5;
    if ((v11 & 0x8000) != 0)
    {
      int v18 = *((_DWORD *)a5 + 3);
      if (v18 <= 1) {
        goto LABEL_44;
      }
    }
    else
    {
      if ((unsigned __int16)v11 < 0x40u) {
        goto LABEL_45;
      }
      int v18 = (unsigned __int16)v11 >> 5;
    }
    int v19 = v18 - 2;
    unint64_t v20 = (char *)*((void *)a5 + 3);
    if ((v11 & 2) != 0) {
      unint64_t v20 = (char *)a5 + 10;
    }
    if (*(_WORD *)&v20[2 * v19] != 39) {
      break;
    }
    if ((v11 & 0x8000) != 0)
    {
      unsigned int v21 = *((_DWORD *)a5 + 3);
      if (!v21) {
        goto LABEL_44;
      }
      if (*(_WORD *)&v20[2 * (v21 - 1)] != 39) {
        break;
      }
      int v22 = v21 - 2;
      if ((v11 & 1) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      if (*(_WORD *)&v20[2 * (v17 - 1)] != 39) {
        goto LABEL_45;
      }
      unsigned int v21 = (unsigned __int16)v11 >> 5;
      int v22 = v17 - 2;
      if ((v11 & 1) == 0) {
        goto LABEL_38;
      }
    }
    if (!v22)
    {
      this = (icu::ICU_Utility *)icu::UnicodeString::unBogus((uint64_t)a5);
      LOWORD(v11) = *((_WORD *)a5 + 4);
      continue;
    }
LABEL_38:
    if (v21 > v22)
    {
      if (v22 > 1023)
      {
        LOWORD(v11) = v11 | 0xFFE0;
        *((_WORD *)a5 + 4) = v11;
        *((_DWORD *)a5 + 3) = v22;
      }
      else
      {
        LOWORD(v11) = v11 & 0x1F | (32 * v22);
        *((_WORD *)a5 + 4) = v11;
      }
    }
  }
  if ((v11 & 0x8000) == 0) {
    goto LABEL_45;
  }
LABEL_44:
  int v17 = *((_DWORD *)a5 + 3);
LABEL_45:
  if (v17 >= 1)
  {
    __int16 v43 = 39;
    icu::UnicodeString::doAppend((uint64_t)v9, (uint64_t)&v43, 0, 1);
    unsigned int v23 = *((unsigned __int16 *)a5 + 4);
    int v24 = (__int16)v23;
    unsigned int v25 = v23 >> 5;
    if (v24 >= 0) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = *((unsigned int *)a5 + 3);
    }
    icu::UnicodeString::doAppend((uint64_t)v9, a5, 0, v26);
    __int16 v44 = 39;
    this = (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)v9, (uint64_t)&v44, 0, 1);
    unsigned int v27 = *((unsigned __int16 *)a5 + 4);
    if (v27)
    {
      this = (icu::ICU_Utility *)icu::UnicodeString::unBogus((uint64_t)a5);
    }
    else
    {
      if ((v27 & 0x8000u) == 0) {
        unsigned int v28 = v27 >> 5;
      }
      else {
        unsigned int v28 = *((_DWORD *)a5 + 3);
      }
      if (v28) {
        *((_WORD *)a5 + 4) &= 0x1Fu;
      }
    }
  }
  if (i != 1)
  {
    do
    {
      __int16 v45 = 92;
      uint64_t v32 = icu::UnicodeString::doAppend((uint64_t)v9, (uint64_t)&v45, 0, 1);
      __int16 v46 = 39;
      this = (icu::ICU_Utility *)icu::UnicodeString::doAppend(v32, (uint64_t)&v46, 0, 1);
      --i;
    }
    while (i > 1);
  }
LABEL_63:
  if (a2 == -1) {
    return this;
  }
  if (a2 != 32)
  {
    if ((a2 - 32) >= 0x5F && a4) {
      return icu::ICU_Utility::escape(v9, a2);
    }
    goto LABEL_80;
  }
  unsigned int v33 = *((unsigned __int16 *)v9 + 4);
  if ((*((__int16 *)v9 + 4) & 0x80000000) == 0)
  {
    if (v33 >= 0x20)
    {
      int v34 = v33 >> 5;
      goto LABEL_72;
    }
    return this;
  }
  int v34 = *((_DWORD *)v9 + 3);
  if (v34 <= 0) {
    return this;
  }
LABEL_72:
  unsigned int v35 = v34 - 1;
  if ((v33 & 2) != 0) {
    int v36 = (char *)v9 + 10;
  }
  else {
    int v36 = (char *)*((void *)v9 + 3);
  }
  if (*(_WORD *)&v36[2 * v35] != 32)
  {
    uint64_t v37 = (uint64_t)v9;
    unsigned int v38 = 32;
    return (icu::ICU_Utility *)icu::UnicodeString::append(v37, v38);
  }
  return this;
}

icu::ICU_Utility *icu::ICU_Utility::appendToRule(icu::ICU_Utility *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, int a4, icu::UnicodeString *a5, icu::UnicodeString *a6)
{
  int v8 = (int)a3;
  unsigned int v10 = this;
  unint64_t v11 = 0;
  int v12 = (char *)a2 + 10;
  while (1)
  {
    int v13 = *((__int16 *)a2 + 4);
    if (v13 < 0) {
      break;
    }
    if (v11 >= (unint64_t)*((unsigned __int16 *)a2 + 4) >> 5) {
      return this;
    }
    unint64_t v14 = (unint64_t)*((unsigned __int16 *)a2 + 4) >> 5;
LABEL_7:
    if (v14 <= v11)
    {
      uint64_t v16 = 0xFFFFLL;
    }
    else
    {
      if ((v13 & 2) != 0) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = (char *)*((void *)a2 + 3);
      }
      uint64_t v16 = *(unsigned __int16 *)&v15[2 * v11];
    }
    this = icu::ICU_Utility::appendToRule(v10, (icu::UnicodeString *)v16, v8, a4, a5, a6);
    ++v11;
  }
  if ((uint64_t)v11 < *((int *)a2 + 3))
  {
    unint64_t v14 = *((unsigned int *)a2 + 3);
    goto LABEL_7;
  }
  return this;
}

icu::ICU_Utility *icu::ICU_Utility::appendToRule(icu::ICU_Utility *this, icu::UnicodeString *a2, const icu::UnicodeMatcher *a3, icu::UnicodeString *a4, icu::UnicodeString *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v6 = (int)a3;
    int v7 = this;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v15 = 0;
    long long v14 = 0u;
    unint64_t v11 = &unk_1EDA47700;
    LOWORD(v12) = 2;
    int v8 = (icu::UnicodeString *)(*(uint64_t (**)(icu::UnicodeString *, void **, const icu::UnicodeMatcher *, icu::UnicodeString *, icu::UnicodeString *))(*(void *)a2 + 24))(a2, &v11, a3, a4, a5);
    icu::ICU_Utility::appendToRule(v7, v8, (const icu::UnicodeString *)1, v6, a4, v9);
    return (icu::ICU_Utility *)icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v11);
  }
  return this;
}

uint64_t icu::ICU_Utility::parseInteger(icu::ICU_Utility *this, const icu::UnicodeString *a2, int *a3)
{
  int v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 >= (int)a3) {
    goto LABEL_13;
  }
  unsigned int v6 = *((unsigned __int16 *)this + 4);
  unsigned int v7 = (v6 & 0x8000u) == 0 ? v6 >> 5 : *((_DWORD *)this + 3);
  if (v7 <= v5) {
    goto LABEL_13;
  }
  int v8 = (char *)this + 10;
  if ((v6 & 2) == 0) {
    int v8 = (char *)*((void *)this + 3);
  }
  if (*(_WORD *)&v8[2 * v5] == 48)
  {
    unsigned int v9 = v5 + 1;
    int v10 = 8;
    int v11 = 1;
    if (v5 + 1 < (int)a3 && v7 > v9 && (*(unsigned __int16 *)&v8[2 * v9] | 0x20) == 0x78)
    {
      int v11 = 0;
      v5 += 2;
      int v10 = 16;
    }
    else
    {
      ++v5;
    }
  }
  else
  {
LABEL_13:
    int v11 = 0;
    int v10 = 10;
  }
  uint64_t v12 = 0;
  uint64_t v13 = v5;
  if (v5 <= (int)a3) {
    int v14 = (int)a3;
  }
  else {
    int v14 = v5;
  }
  while (v14 != v13)
  {
    unsigned int v15 = *((unsigned __int16 *)this + 4);
    if ((v15 & 0x8000u) == 0) {
      unsigned int v16 = v15 >> 5;
    }
    else {
      unsigned int v16 = *((_DWORD *)this + 3);
    }
    if (v16 <= v13)
    {
      UChar32 v18 = 0xFFFF;
    }
    else
    {
      if ((v15 & 2) != 0) {
        int v17 = (char *)this + 10;
      }
      else {
        int v17 = (char *)*((void *)this + 3);
      }
      UChar32 v18 = *(unsigned __int16 *)&v17[2 * v13];
    }
    int32_t v19 = u_digit(v18, v10);
    if (v19 < 0) {
      goto LABEL_32;
    }
    ++v11;
    ++v13;
    BOOL v20 = v19 + (int)v12 * v10 <= (int)v12;
    uint64_t v12 = (v19 + v12 * v10);
    if (v20) {
      return 0;
    }
  }
  LODWORD(v13) = v14;
LABEL_32:
  if (v11) {
    *(_DWORD *)a2 = v13;
  }
  return v12;
}

uint64_t icu::ICU_Utility::parsePattern(icu::ICU_Utility *this, const icu::UnicodeString *a2, int *a3, uint64_t a4, const icu::UnicodeString *a5, int *a6)
{
  unint64_t v10 = 0;
  int v11 = 0;
  int v30 = (int)a2;
  uint64_t v12 = a4 + 10;
  uint64_t v13 = (char *)this + 10;
  while (1)
  {
    int v14 = *(__int16 *)(a4 + 8);
    if (v14 < 0) {
      break;
    }
    if (v10 >= (unint64_t)*(unsigned __int16 *)(a4 + 8) >> 5) {
      return v30;
    }
    unint64_t v15 = (unint64_t)*(unsigned __int16 *)(a4 + 8) >> 5;
LABEL_7:
    if (v15 <= v10)
    {
      int v17 = 0xFFFF;
    }
    else
    {
      if ((v14 & 2) != 0) {
        uint64_t v16 = v12;
      }
      else {
        uint64_t v16 = *(void *)(a4 + 24);
      }
      int v17 = *(unsigned __int16 *)(v16 + 2 * v10);
      switch(v17)
      {
        case '~':
          goto LABEL_40;
        case '#':
          int v29 = v30;
          *((_DWORD *)a5 + v11) = icu::ICU_Utility::parseInteger(this, (const icu::UnicodeString *)&v29, a3);
          if (v29 == v30) {
            return 0xFFFFFFFFLL;
          }
          ++v11;
          int v30 = v29;
          goto LABEL_41;
        case ' ':
          uint64_t v18 = v30;
          if (v30 >= (int)a3) {
            return 0xFFFFFFFFLL;
          }
          ++v30;
          unsigned int v19 = *((unsigned __int16 *)this + 4);
          unsigned int v20 = (v19 & 0x8000u) == 0 ? v19 >> 5 : *((_DWORD *)this + 3);
          if (v20 <= v18)
          {
            uint64_t v22 = 0xFFFFLL;
          }
          else
          {
            unsigned int v21 = (v19 & 2) != 0 ? v13 : (char *)*((void *)this + 3);
            uint64_t v22 = *(unsigned __int16 *)&v21[2 * v18];
          }
          if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)v22)) {
            return 0xFFFFFFFFLL;
          }
LABEL_40:
          int v30 = icu::ICU_Utility::skipWhitespace(this, (const icu::UnicodeString *)&v30, 0);
          goto LABEL_41;
      }
    }
    uint64_t v23 = v30;
    if (v30 >= (int)a3) {
      return 0xFFFFFFFFLL;
    }
    ++v30;
    unsigned int v24 = *((unsigned __int16 *)this + 4);
    unsigned int v25 = (v24 & 0x8000u) == 0 ? v24 >> 5 : *((_DWORD *)this + 3);
    if (v25 <= v23)
    {
      UChar32 v27 = 0xFFFF;
    }
    else
    {
      uint64_t v26 = (v24 & 2) != 0 ? v13 : (char *)*((void *)this + 3);
      UChar32 v27 = *(unsigned __int16 *)&v26[2 * v23];
    }
    if (v17 != (unsigned __int16)u_tolower(v27)) {
      return 0xFFFFFFFFLL;
    }
LABEL_41:
    ++v10;
  }
  if ((uint64_t)v10 < *(int *)(a4 + 12))
  {
    unint64_t v15 = *(unsigned int *)(a4 + 12);
    goto LABEL_7;
  }
  return v30;
}

uint64_t icu::ICU_Utility::parseUnicodeIdentifier@<X0>(uint64_t this@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a3;
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = &unk_1EDA47700;
  *(_WORD *)(a3 + 8) = 2;
  int v6 = *(_DWORD *)a2;
  unsigned int v7 = *(unsigned __int16 *)(this + 8);
  int v8 = (__int16)v7;
  LODWORD(a3) = v7 >> 5;
  if (v8 >= 0) {
    a3 = a3;
  }
  else {
    a3 = *(unsigned int *)(this + 12);
  }
  if (v6 >= (int)a3)
  {
LABEL_19:
    *(_DWORD *)a2 = v6;
    return this;
  }
  uint64_t v9 = this;
  while (1)
  {
    UChar32 v10 = icu::UnicodeString::char32At((uint64_t *)a3, (icu::UnicodeString *)v9, v6);
    unsigned int v11 = v10;
    unsigned int v12 = *(unsigned __int16 *)(v5 + 8);
    int v13 = (__int16)v12;
    unsigned int v14 = v12 >> 5;
    if (v13 < 0) {
      unsigned int v14 = *(_DWORD *)(v5 + 12);
    }
    if (v14)
    {
      this = u_isIDPart(v10);
      if (!this) {
        goto LABEL_19;
      }
      goto LABEL_12;
    }
    this = u_isIDStart(v10);
    if (!this) {
      break;
    }
LABEL_12:
    this = icu::UnicodeString::append(v5, v11);
    if (v11 < 0x10000) {
      int v15 = 1;
    }
    else {
      int v15 = 2;
    }
    v6 += v15;
    unsigned int v16 = *(unsigned __int16 *)(v9 + 8);
    int v17 = (__int16)v16;
    LODWORD(a3) = v16 >> 5;
    if (v17 >= 0) {
      a3 = a3;
    }
    else {
      a3 = *(unsigned int *)(v9 + 12);
    }
    if (v6 >= (int)a3) {
      goto LABEL_19;
    }
  }
  unsigned int v18 = *(unsigned __int16 *)(v5 + 8);
  if (v18)
  {
    return icu::UnicodeString::unBogus(v5);
  }
  else
  {
    if ((v18 & 0x8000u) == 0) {
      unsigned int v19 = v18 >> 5;
    }
    else {
      unsigned int v19 = *(_DWORD *)(v5 + 12);
    }
    if (v19) {
      *(_WORD *)(v5 + 8) &= 0x1Fu;
    }
  }
  return this;
}

uint64_t icu::ICU_Utility::parseNumber(icu::ICU_Utility *this, const icu::UnicodeString *a2, int *a3)
{
  int v3 = (int)a3;
  uint64_t v6 = 0;
  for (int i = *(_DWORD *)a2; ; ++i)
  {
    unsigned int v8 = *((unsigned __int16 *)this + 4);
    int v9 = (__int16)v8;
    LODWORD(v10) = v8 >> 5;
    UChar32 v10 = v9 >= 0 ? (uint64_t *)v10 : (uint64_t *)*((unsigned int *)this + 3);
    if (i >= (int)v10) {
      break;
    }
    UChar32 v11 = icu::UnicodeString::char32At(v10, this, i);
    int32_t v12 = u_digit(v11, v3);
    if (v12 < 0) {
      break;
    }
    uint64_t v6 = (v12 + v6 * v3);
    if ((v6 & 0x80000000) != 0) {
      return 0xFFFFFFFFLL;
    }
  }
  if (*(_DWORD *)a2 == i) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)a2 = i;
  return v6;
}

uint64_t utrace_entry(uint64_t result)
{
  if (off_1E9191FB0) {
    return off_1E9191FB0(qword_1E9191FB8, result);
  }
  return result;
}

uint64_t utrace_exit(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (off_1E9191FC0)
  {
    if (a2 <= 15)
    {
      if (!a2)
      {
        int v9 = "Returns.";
        return off_1E9191FC0(qword_1E9191FB8, result, v9, &a9);
      }
      if (a2 == 1)
      {
        int v9 = "Returns %d.";
        return off_1E9191FC0(qword_1E9191FB8, result, v9, &a9);
      }
    }
    else
    {
      switch(a2)
      {
        case 16:
          int v9 = "Returns.  Status = %d.";
          return off_1E9191FC0(qword_1E9191FB8, result, v9, &a9);
        case 17:
          int v9 = "Returns %d.  Status = %d.";
          return off_1E9191FC0(qword_1E9191FB8, result, v9, &a9);
        case 18:
          int v9 = "Returns %d.  Status = %p.";
          return off_1E9191FC0(qword_1E9191FB8, result, v9, &a9);
      }
    }
    abort();
  }
  return result;
}

uint64_t utrace_data(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (off_1E9191FC8) {
    return off_1E9191FC8(qword_1E9191FB8, result, a2, a3, &a9);
  }
  return result;
}

uint64_t utrace_vformat(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  uint64_t v9 = 0;
  int v10 = 0;
  unsigned int v64 = a5;
  int v63 = 0;
LABEL_2:
  uint64_t v11 = v10;
  int v12 = v10 + 3;
  int v13 = (unsigned __int8 *)(v5 + v10);
  uint64_t v14 = (v11 << 32) + 0x100000000;
  do
  {
    int v16 = *v13++;
    int v15 = v16;
    if (v16 == 37)
    {
      int v10 = v12 - 1;
      uint64_t v17 = v14 >> 32;
      uint64_t v5 = a4;
      int v18 = *(char *)(a4 + v17);
      if (v18 <= 97)
      {
        if (v18)
        {
          if (v18 == 83)
          {
            uint64_t v22 = v64++;
            uint64_t v23 = *v22;
            unsigned int v64 = v22 + 2;
            sub_18C8BFB58(v23, *((_DWORD *)v22 + 2), a1, &v63, a2, a3);
            goto LABEL_2;
          }
LABEL_49:
          uint64_t v35 = (char)v18;
        }
        else
        {
          int v10 = v12 - 2;
          uint64_t v35 = 37;
        }
LABEL_62:
        sub_18C8BFAB0(v35, a1, &v63, a2, a3);
      }
      else
      {
        switch(v18)
        {
          case 'b':
            unsigned int v19 = v64++;
            uint64_t v20 = *(int *)v19;
            for (uint64_t i = 4; i != -4; i -= 4)
              sub_18C8BFAB0(a0123456789abcd_0[(v20 >> i) & 0xF], a1, &v63, a2, 0);
            goto LABEL_2;
          case 'c':
            int v36 = v64++;
            uint64_t v35 = *(char *)v36;
            goto LABEL_62;
          case 'd':
            uint64_t v37 = v64++;
            uint64_t v38 = *(int *)v37;
            for (uint64_t j = 28; j != -4; j -= 4)
              sub_18C8BFAB0(a0123456789abcd_0[(v38 >> j) & 0xF], a1, &v63, a2, 0);
            goto LABEL_2;
          case 'e':
          case 'f':
          case 'g':
          case 'i':
          case 'j':
          case 'k':
          case 'm':
          case 'n':
          case 'o':
            goto LABEL_49;
          case 'h':
            unsigned int v40 = v64++;
            uint64_t v41 = *(int *)v40;
            for (uint64_t k = 12; k != -4; k -= 4)
              sub_18C8BFAB0(a0123456789abcd_0[(v41 >> k) & 0xF], a1, &v63, a2, 0);
            goto LABEL_2;
          case 'l':
            __int16 v43 = v64++;
            uint64_t v9 = *v43;
            for (uint64_t m = 60; m != -4; m -= 4)
              sub_18C8BFAB0(a0123456789abcd_0[(v9 >> m) & 0xF], a1, &v63, a2, 0);
            goto LABEL_2;
          case 'p':
            __int16 v45 = v64++;
            sub_18C8BFCEC(*v45, a1, &v63, a2);
            goto LABEL_2;
          default:
            if (v18 == 115)
            {
              __int16 v46 = (const char **)v64++;
              __int16 v47 = *v46;
              if (v47) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = "*NULL*";
              }
              do
              {
                unsigned int v49 = *v48++;
                sub_18C8BFAB0(v49, a1, &v63, a2, a3);
              }
              while (v49);
            }
            else
            {
              if (v18 != 118) {
                goto LABEL_49;
              }
              int v24 = *(char *)(a4 + v10);
              if (*(unsigned char *)(a4 + v10)) {
                int v10 = v12;
              }
              unsigned int v25 = v64++;
              uint64_t v26 = (uint64_t *)*v25;
              unsigned int v64 = v25 + 2;
              int v27 = *((_DWORD *)v25 + 2);
              int v60 = v26;
              if (v26)
              {
                if (v27 == -1 || v27 >= 1)
                {
                  int v29 = 0;
                  int v61 = 0;
                  int v57 = v26;
                  int v58 = v26;
                  int v56 = v26;
                  uint64_t v59 = v26;
                  int v55 = v24;
                  while (2)
                  {
                    switch(v24)
                    {
                      case 'b':
                        uint64_t v9 = *(char *)v59;
                        uint64_t v59 = (uint64_t *)((char *)v59 + 1);
                        int v30 = 2;
                        goto LABEL_40;
                      case 'c':
                        sub_18C8BFAB0(*(char *)v59, a1, &v63, a2, a3);
                        int v61 = 0;
                        uint64_t v9 = *(char *)v59;
                        uint64_t v59 = (uint64_t *)((char *)v59 + 1);
                        goto LABEL_36;
                      case 'd':
                        uint64_t v9 = *(int *)v57;
                        int v57 = (uint64_t *)((char *)v57 + 4);
                        int v30 = 8;
                        goto LABEL_40;
                      case 'e':
                      case 'f':
                      case 'g':
                      case 'i':
                      case 'j':
                      case 'k':
                      case 'm':
                      case 'n':
                      case 'o':
                        goto LABEL_33;
                      case 'h':
                        uint64_t v9 = *(__int16 *)v56;
                        int v56 = (uint64_t *)((char *)v56 + 2);
                        int v30 = 4;
                        goto LABEL_40;
                      case 'l':
                        uint64_t v9 = *v58++;
                        int v30 = 16;
                        goto LABEL_40;
                      case 'p':
                        int v34 = v60;
                        sub_18C8BFCEC(*v60, a1, &v63, a2);
                        goto LABEL_43;
                      default:
                        if (v24 == 83)
                        {
                          int v34 = v60;
                          sub_18C8BFB58(*v60, -1, a1, &v63, a2, a3);
                          sub_18C8BFAB0(10, a1, &v63, a2, a3);
LABEL_43:
                          int v61 = 0;
                          int v60 = v34 + 1;
                          uint64_t v9 = *v34 != 0;
                        }
                        else if (v24 == 115)
                        {
                          if (*v60) {
                            int v31 = (const char *)*v60;
                          }
                          else {
                            int v31 = "*NULL*";
                          }
                          do
                          {
                            unsigned int v32 = *v31++;
                            sub_18C8BFAB0(v32, a1, &v63, a2, a3);
                          }
                          while (v32);
                          sub_18C8BFAB0(10, a1, &v63, a2, a3);
                          int v61 = 0;
                          uint64_t v33 = *v60++;
                          uint64_t v9 = v33 != 0;
LABEL_36:
                          int v24 = v55;
                        }
                        else
                        {
LABEL_33:
                          int v30 = v61;
                          if (v61 >= 1)
                          {
LABEL_40:
                            int v61 = v30;
                            sub_18C8BFC70(v9, v30, a1, &v63, a2);
                            sub_18C8BFAB0(32, a1, &v63, a2, a3);
                          }
                        }
                        if (v27 == -1 && !v9) {
                          break;
                        }
                        ++v29;
                        if (v27 != -1 && v29 >= v27) {
                          break;
                        }
                        continue;
                    }
                    break;
                  }
                }
              }
              else
              {
                uint64_t v50 = 0;
                do
                {
                  uint64_t v51 = v50 + 1;
                  sub_18C8BFAB0(aNull[v50], a1, &v63, a2, a3);
                  uint64_t v50 = v51;
                }
                while (v51 != 8);
              }
              sub_18C8BFAB0(91, a1, &v63, a2, a3);
              for (uint64_t n = 28; n != -4; n -= 4)
                sub_18C8BFAB0(a0123456789abcd_0[(v27 >> n) & 0xFLL], a1, &v63, a2, 0);
              sub_18C8BFAB0(93, a1, &v63, a2, a3);
              uint64_t v5 = a4;
            }
            break;
        }
      }
      goto LABEL_2;
    }
    sub_18C8BFAB0((char)v15, a1, &v63, a2, a3);
    ++v12;
    v14 += 0x100000000;
  }
  while (v15);
  LODWORD(v53) = v63;
  if (!v63)
  {
    if (a3 < 1)
    {
      LODWORD(v53) = 0;
    }
    else
    {
      uint64_t v53 = 0;
      do
      {
        if ((int)v53 < a2) {
          *(unsigned char *)(a1 + v53) = 32;
        }
        ++v53;
      }
      while (a3 != v53);
    }
  }
  if ((int)v53 < a2) {
    *(unsigned char *)(a1 + (int)v53) = 0;
  }
  return (v53 + 1);
}

uint64_t sub_18C8BFAB0(uint64_t result, uint64_t a2, int *a3, int a4, int a5)
{
  int v5 = *a3;
  if (*a3)
  {
    if (!result) {
      goto LABEL_16;
    }
    if (result == 10)
    {
      if (v5 >= a4)
      {
        BOOL v6 = a5 == 0;
        BOOL v7 = a5 < 0;
      }
      else
      {
        BOOL v6 = 1;
        BOOL v7 = 0;
      }
      if (v7 || v6) {
        goto LABEL_16;
      }
      goto LABEL_13;
    }
    if (v5 >= a4 || *(unsigned char *)(v5 + a2 - 1) != 10) {
      goto LABEL_16;
    }
  }
  if (a5 < 1) {
    goto LABEL_16;
  }
  do
  {
LABEL_13:
    if (v5 < a4)
    {
      *(unsigned char *)(a2 + v5) = 32;
      int v5 = *a3;
    }
    *a3 = ++v5;
    --a5;
  }
  while (a5);
LABEL_16:
  if (v5 < a4) {
    *(unsigned char *)(a2 + v5) = result;
  }
  if (result) {
    ++*a3;
  }
  return result;
}

uint64_t sub_18C8BFB58(uint64_t result, int a2, uint64_t a3, int *a4, int a5, int a6)
{
  if (result)
  {
    uint64_t v11 = result;
    if (a2 == -1 || a2 >= 1)
    {
      for (uint64_t i = 0; a2 == -1 || (int)i < a2; ++i)
      {
        unint64_t v13 = *(unsigned __int16 *)(v11 + 2 * i);
        for (uint64_t j = 12; j != -4; j -= 4)
          sub_18C8BFAB0(a0123456789abcd_0[(v13 >> j) & 0xF], a3, a4, a5, 0);
        BOOL result = sub_18C8BFAB0(32, a3, a4, a5, a6);
        if (a2 == -1 && !v13) {
          break;
        }
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = v15 + 1;
      BOOL result = sub_18C8BFAB0(aNull_0[v15], a3, a4, a5, a6);
      uint64_t v15 = v16;
    }
    while (v16 != 7);
  }
  return result;
}

uint64_t sub_18C8BFC70(uint64_t result, int a2, uint64_t a3, int *a4, int a5)
{
  int v5 = 4 * a2 - 4;
  if (v5 >= 0)
  {
    uint64_t v9 = result;
    do
    {
      BOOL result = sub_18C8BFAB0(a0123456789abcd_0[(v9 >> v5) & 0xF], a3, a4, a5, 0);
      v5 -= 4;
    }
    while (v5 != -4);
  }
  return result;
}

uint64_t sub_18C8BFCEC(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v7 = 0;
  HIWORD(v12) = HIWORD(a1);
  unsigned int v8 = (char *)&v12 + 7;
  do
  {
    uint64_t v9 = *v8;
    for (uint64_t i = 4; i != -4; i -= 4)
      uint64_t result = sub_18C8BFAB0(a0123456789abcd_0[(v9 >> i) & 0xF], a2, a3, a4, 0);
    --v8;
    ++v7;
  }
  while (v7 != 8);
  return result;
}

uint64_t utrace_format(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return utrace_vformat(a1, a2, a3, a4, &a9);
}

uint64_t utrace_setFunctions(uint64_t result, uint64_t (*a2)(void, void), void *a3, uint64_t (*a4)(void, void, void, void, void))
{
  off_1E9191FB0 = a2;
  off_1E9191FC0 = a3;
  off_1E9191FC8 = a4;
  qword_1E9191FB8 = result;
  return result;
}

void *utrace_getFunctions(void *result, void *a2, void *a3, void *a4)
{
  *a2 = off_1E9191FB0;
  *a3 = off_1E9191FC0;
  *a4 = off_1E9191FC8;
  *uint64_t result = qword_1E9191FB8;
  return result;
}

uint64_t utrace_setLevel(uint64_t result)
{
  if ((int)result < 0) {
    int v1 = -1;
  }
  else {
    int v1 = result;
  }
  if (v1 >= 9) {
    int v1 = 9;
  }
  dword_1E9191FD0 = v1;
  return result;
}

uint64_t utrace_getLevel()
{
  return dword_1E9191FD0;
}

uint64_t sub_18C8BFE40()
{
  off_1E9191FB0 = 0;
  off_1E9191FC0 = 0;
  off_1E9191FC8 = 0;
  dword_1E9191FD0 = -1;
  qword_1E9191FB8 = 0;
  return 1;
}

const char *utrace_functionName(unsigned int a1)
{
  if (a1 <= 1)
  {
    int v1 = &off_1E5508950[a1];
    return *v1;
  }
  if ((a1 & 0xFFFFFFF8) == 0x1000)
  {
    unsigned int v2 = a1 - 4096;
    int v3 = off_1E5508968;
LABEL_9:
    int v1 = &v3[v2];
    return *v1;
  }
  unsigned int v2 = a1 - 0x2000;
  if (a1 - 0x2000 <= 8)
  {
    int v3 = off_1E55089B0;
    goto LABEL_9;
  }
  if ((a1 & 0xFFFFFFFC) == 0x3000)
  {
    unsigned int v2 = a1 - 12288;
    int v3 = off_1E5508A00;
    goto LABEL_9;
  }
  return "[BOGUS Trace Function Number]";
}

char **utrie_open(char **a1, char *a2, int a3, unsigned int a4, int a5, int a6)
{
  if (a3 < 32 || a3 <= 0x3FF && a6) {
    return 0;
  }
  uint64_t v12 = a1;
  if (a1 || (uint64_t v12 = (char **)uprv_malloc(0x44120uLL)) != 0)
  {
    uint64_t v14 = v12 + 17424;
    bzero(v12, 0x44120uLL);
    *((unsigned char *)v12 + 139416) = a1 == 0;
    if (a2)
    {
      char v15 = 0;
      *uint64_t v14 = a2;
    }
    else
    {
      uint64_t v16 = (char *)uprv_malloc(4 * a3);
      *uint64_t v14 = v16;
      if (!v16)
      {
        uprv_free(v12);
        return 0;
      }
      a2 = v16;
      char v15 = 1;
    }
    *((unsigned char *)v12 + 139417) = v15;
    if (a6)
    {
      *(_OWORD *)uint64_t v12 = xmmword_18CA87550;
      *((_OWORD *)v12 + 1) = xmmword_18CA87560;
      unsigned int v17 = 288;
    }
    else
    {
      unsigned int v17 = 32;
    }
    *((_DWORD *)v12 + 34853) = v17;
    int32x4_t v18 = vdupq_n_s32(a4);
    uint64_t v19 = 4 * v17;
    do
    {
      *(int32x4_t *)&a2[v19 - 16] = v18;
      v19 -= 16;
    }
    while (v19);
    *((_DWORD *)v12 + 34850) = a5;
    *((_DWORD *)v12 + 34851) = 34816;
    *((_DWORD *)v12 + 34852) = a3;
    *((unsigned char *)v12 + 139418) = a6;
    *((unsigned char *)v12 + 139419) = 0;
  }
  return v12;
}

char **utrie_clone(char **a1, uint64_t a2, char *a3, int a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v5 = a2 + 139392;
  BOOL v6 = *(unsigned int **)(a2 + 139392);
  if (!v6 || *(unsigned char *)(a2 + 139419)) {
    return 0;
  }
  uint64_t v9 = a3;
  int v11 = *(_DWORD *)(a2 + 139408);
  if (a3 && v11 <= a4)
  {
    char v12 = 0;
  }
  else
  {
    unint64_t v13 = (char *)uprv_malloc(4 * v11);
    if (!v13) {
      return 0;
    }
    uint64_t v9 = v13;
    BOOL v6 = *(unsigned int **)v5;
    char v12 = 1;
    a4 = v11;
  }
  uint64_t v14 = utrie_open(a1, v9, a4, *v6, *(_DWORD *)(v5 + 8), *(char *)(v5 + 26));
  int v7 = v14;
  if (v14)
  {
    char v15 = (void **)(v14 + 17424);
    memcpy(v14, (const void *)a2, 0x22080uLL);
    memcpy(*v15, *(const void **)v5, 4 * *(int *)(v5 + 20));
    *((_DWORD *)v7 + 34853) = *(_DWORD *)(v5 + 20);
    *((unsigned char *)v7 + 139417) = v12;
  }
  else
  {
    uprv_free(v9);
  }
  return v7;
}

void utrie_close(void **a1)
{
  if (a1)
  {
    unsigned int v2 = a1 + 17424;
    if (*((unsigned char *)a1 + 139417))
    {
      uprv_free(*v2);
      UChar *v2 = 0;
    }
    if (*((unsigned char *)v2 + 24))
    {
      uprv_free(a1);
    }
  }
}

uint64_t utrie_getData(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = (_DWORD *)(a1 + 139392);
      *a2 = v4[5];
      return *(void *)v4;
    }
  }
  return result;
}

uint64_t utrie_set32(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = 0;
  if (a1)
  {
    if (HIWORD(a2) <= 0x10u)
    {
      uint64_t v4 = (void *)(a1 + 139392);
      if (!*(unsigned char *)(a1 + 139419))
      {
        uint64_t v5 = a2 >> 5;
        int v6 = *(_DWORD *)(a1 + 4 * v5);
        LODWORD(v7) = v6;
        if (v6 <= 0)
        {
          uint64_t v7 = *(unsigned int *)(a1 + 139412);
          if ((int)v7 + 32 > *(_DWORD *)(a1 + 139408)) {
            return 0;
          }
          *(_DWORD *)(a1 + 139412) = v7 + 32;
          if ((v7 & 0x80000000) != 0) {
            return 0;
          }
          *(_DWORD *)(a1 + 4 * v5) = v7;
          unsigned int v8 = (long long *)(*v4 - 4 * v6);
          long long v9 = *v8;
          long long v11 = v8[2];
          long long v10 = v8[3];
          char v12 = (_OWORD *)(*v4 + 4 * v7);
          v12[1] = v8[1];
          v12[2] = v11;
          *char v12 = v9;
          long long v13 = v8[4];
          long long v14 = v8[5];
          long long v15 = v8[7];
          v12[6] = v8[6];
          v12[7] = v15;
          v12[4] = v13;
          v12[5] = v14;
          v12[3] = v10;
        }
        *(_DWORD *)(*v4 + 4 * (v7 + (a2 & 0x1F))) = a3;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t utrie_get32(uint64_t a1, unsigned int a2, BOOL *a3)
{
  if (!a1 || HIWORD(a2) > 0x10u || *(unsigned char *)(a1 + 139419))
  {
    uint64_t result = 0;
    if (a3) {
      *a3 = 1;
    }
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 4 * (a2 >> 5));
    if (a3) {
      *a3 = v3 == 0;
    }
    if (v3 < 0) {
      int v3 = -v3;
    }
    return *(unsigned int *)(*(void *)(a1 + 139392) + 4 * (v3 + (a2 & 0x1F)));
  }
  return result;
}

uint64_t utrie_setRange32(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v5 = 0;
  if (!a1) {
    return v5;
  }
  if ((int)a2 > (int)a3) {
    return v5;
  }
  if (a3 > 0x110000) {
    return v5;
  }
  if (WORD1(a2) > 0x10u) {
    return v5;
  }
  int v6 = (unsigned int **)(a1 + 139392);
  if (*(unsigned char *)(a1 + 139419)) {
    return v5;
  }
  if (a2 == a3) {
    return 1;
  }
  unsigned int v8 = *v6;
  unsigned int v9 = **v6;
  uint64_t v10 = a2 & 0x1F;
  if ((a2 & 0x1F) == 0) {
    goto LABEL_26;
  }
  uint64_t v11 = a2 >> 5;
  int v12 = *(_DWORD *)(a1 + 4 * v11);
  LODWORD(v13) = v12;
  if (v12 <= 0)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 139412);
    if ((int)v13 + 32 > *(_DWORD *)(a1 + 139408)) {
      return 0;
    }
    *(_DWORD *)(a1 + 139412) = v13 + 32;
    if ((v13 & 0x80000000) != 0) {
      return 0;
    }
    *(_DWORD *)(a1 + 4 * v11) = v13;
    int32x4_t v18 = &v8[-v12];
    long long v19 = *(_OWORD *)v18;
    long long v20 = *((_OWORD *)v18 + 1);
    long long v21 = *((_OWORD *)v18 + 3);
    uint64_t v22 = &v8[v13];
    *((_OWORD *)v22 + 2) = *((_OWORD *)v18 + 2);
    *((_OWORD *)v22 + 3) = v21;
    *(_OWORD *)uint64_t v22 = v19;
    *((_OWORD *)v22 + 1) = v20;
    long long v23 = *((_OWORD *)v18 + 4);
    long long v24 = *((_OWORD *)v18 + 5);
    long long v25 = *((_OWORD *)v18 + 7);
    *((_OWORD *)v22 + 6) = *((_OWORD *)v18 + 6);
    *((_OWORD *)v22 + 7) = v25;
    *((_OWORD *)v22 + 4) = v23;
    *((_OWORD *)v22 + 5) = v24;
  }
  LODWORD(a2) = (a2 & 0xFFFFFFE0) + 32;
  unsigned int v8 = *v6;
  uint64_t v14 = (uint64_t)&(*v6)[v13];
  if (a2 <= a3)
  {
    uint64_t v26 = 4 * v10;
    if (a5)
    {
      do
      {
        *(_DWORD *)(v14 + v26) = a4;
        v26 += 4;
      }
      while (v26 != 128);
    }
    else
    {
      do
      {
        if (*(_DWORD *)(v14 + v26) == v9) {
          *(_DWORD *)(v14 + v26) = a4;
        }
        v26 += 4;
      }
      while (v26 != 128);
    }
LABEL_26:
    if ((int)a2 < (int)(a3 & 0xFFFFFFE0))
    {
      if (v9 == a4) {
        LODWORD(v27) = 0;
      }
      else {
        LODWORD(v27) = -1;
      }
      a2 = a2;
      int32x4_t v28 = vdupq_n_s32(a4);
      int32x2_t v29 = vdup_n_s32(v9);
      do
      {
        unint64_t v30 = a2 >> 5;
        uint64_t v31 = *(unsigned int *)(a1 + 4 * (a2 >> 5));
        if ((int)v31 < 1)
        {
          uint64_t v35 = (int)v31;
          unsigned int v36 = v8[-(int)v31];
          if (a5) {
            BOOL v37 = 1;
          }
          else {
            BOOL v37 = v31 == 0;
          }
          int v38 = v37;
          if (v36 != a4 && v38 != 0)
          {
            if ((v27 & 0x80000000) != 0)
            {
              uint64_t v27 = *(unsigned int *)(a1 + 139412);
              if ((int)v27 + 32 > *(_DWORD *)(a1 + 139408)) {
                return 0;
              }
              *(_DWORD *)(a1 + 139412) = v27 + 32;
              if ((v27 & 0x80000000) != 0) {
                return 0;
              }
              uint64_t v40 = 0;
              *(_DWORD *)(a1 + 4 * v30) = v27;
              uint64_t v41 = &v8[-v35];
              __int16 v42 = &v8[v27];
              long long v43 = *(_OWORD *)v41;
              long long v44 = *((_OWORD *)v41 + 1);
              long long v45 = *((_OWORD *)v41 + 3);
              *((_OWORD *)v42 + 2) = *((_OWORD *)v41 + 2);
              *((_OWORD *)v42 + 3) = v45;
              *(_OWORD *)__int16 v42 = v43;
              *((_OWORD *)v42 + 1) = v44;
              long long v46 = *((_OWORD *)v41 + 4);
              long long v47 = *((_OWORD *)v41 + 5);
              long long v48 = *((_OWORD *)v41 + 7);
              *((_OWORD *)v42 + 6) = *((_OWORD *)v41 + 6);
              *((_OWORD *)v42 + 7) = v48;
              *((_OWORD *)v42 + 4) = v46;
              *((_OWORD *)v42 + 5) = v47;
              *(_DWORD *)(a1 + 4 * v30) = -(int)v27;
              unsigned int v8 = *v6;
              uint64_t v49 = (uint64_t)&(*v6)[v27];
              do
              {
                *(int32x4_t *)(v49 + v40) = v28;
                v40 += 16;
              }
              while (v40 != 128);
            }
            else
            {
              *(_DWORD *)(a1 + 4 * v30) = -(int)v27;
            }
          }
        }
        else
        {
          unsigned int v32 = &v8[v31];
          uint64_t v33 = 0;
          if (a5)
          {
            do
            {
              *(int32x4_t *)&v32[v33] = v28;
              v33 += 4;
            }
            while (v33 != 32);
          }
          else
          {
            do
            {
              int32x2_t v34 = vceq_s32(*(int32x2_t *)&v32[v33], v29);
              if (v34.i8[0]) {
                v32[v33] = a4;
              }
              if (v34.i8[4]) {
                v32[v33 + 1] = a4;
              }
              v33 += 2;
            }
            while (v33 != 32);
          }
        }
        a2 += 32;
      }
      while ((int)(a3 & 0x1FFFE0) > (int)a2);
    }
    if ((a3 & 0x1F) == 0) {
      return 1;
    }
    uint64_t v50 = a2 >> 5;
    uint64_t v51 = *(unsigned int *)(a1 + 4 * v50);
    if ((int)v51 >= 1) {
      goto LABEL_60;
    }
    uint64_t v54 = *(unsigned int *)(a1 + 139412);
    if ((int)v54 + 32 <= *(_DWORD *)(a1 + 139408))
    {
      *(_DWORD *)(a1 + 139412) = v54 + 32;
      if ((v54 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 4 * v50) = v54;
        int v55 = &v8[v54];
        int v56 = &v8[-(int)v51];
        long long v57 = *(_OWORD *)v56;
        long long v58 = *((_OWORD *)v56 + 1);
        long long v59 = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 3) = v59;
        *(_OWORD *)int v55 = v57;
        *((_OWORD *)v55 + 1) = v58;
        long long v60 = *((_OWORD *)v56 + 4);
        long long v61 = *((_OWORD *)v56 + 5);
        long long v62 = *((_OWORD *)v56 + 7);
        *((_OWORD *)v55 + 6) = *((_OWORD *)v56 + 6);
        *((_OWORD *)v55 + 7) = v62;
        *((_OWORD *)v55 + 4) = v60;
        *((_OWORD *)v55 + 5) = v61;
        unsigned int v8 = *v6;
        uint64_t v51 = v54;
LABEL_60:
        uint64_t v52 = &v8[v51];
        uint64_t v53 = &v52[a3 & 0x1F];
        if (a5)
        {
          uint64_t v5 = 1;
          do
            *v52++ = a4;
          while (v52 < v53);
        }
        else
        {
          do
          {
            if (*v52 == v9) {
              *uint64_t v52 = a4;
            }
            ++v52;
            uint64_t v5 = 1;
          }
          while (v52 < v53);
        }
        return v5;
      }
    }
    return 0;
  }
  unsigned int v15 = a3 & 0x1F;
  unint64_t v16 = v14 + 4 * (a3 & 0x1F);
  unsigned int v17 = (unsigned int *)(v14 + 4 * v10);
  if (a5)
  {
    if (v10 >= v15) {
      return 1;
    }
    uint64_t v5 = 1;
    do
      *v17++ = a4;
    while ((unint64_t)v17 < v16);
  }
  else
  {
    if (v10 >= v15) {
      return 1;
    }
    do
    {
      if (*v17 == v9) {
        unsigned int *v17 = a4;
      }
      ++v17;
      uint64_t v5 = 1;
    }
    while ((unint64_t)v17 < v16);
  }
  return v5;
}

uint64_t utrie_serialize(uint64_t a1, _DWORD *a2, int a3, uint64_t (*a4)(uint64_t a1, unsigned int a2, uint64_t a3), int a5, int *a6)
{
  if (!a6 || *a6 > 0) {
    return 0;
  }
  uint64_t v9 = a1;
  if (!a1 || a3 < 0 || !a2 && a3)
  {
    uint64_t v7 = 0;
    *a6 = 1;
    return v7;
  }
  uint64_t v13 = a1 + 139392;
  if (!*(unsigned char *)(a1 + 139419))
  {
    if (a4) {
      long long v25 = a4;
    }
    else {
      long long v25 = sub_18C8C0A74;
    }
    uint64_t v49 = v25;
    sub_18C8C0AEC(a1, 0, a6);
    unsigned int v26 = 0;
    long long v54 = *(_OWORD *)(v9 + 6976);
    long long v55 = *(_OWORD *)(v9 + 6992);
    long long v56 = *(_OWORD *)(v9 + 7008);
    long long v57 = *(_OWORD *)(v9 + 7024);
    long long v50 = *(_OWORD *)(v9 + 6912);
    long long v51 = *(_OWORD *)(v9 + 6928);
    long long v52 = *(_OWORD *)(v9 + 6944);
    long long v53 = *(_OWORD *)(v9 + 6960);
    unsigned int v27 = *(_DWORD *)(v9 + 139400);
    int32x4_t v28 = *(int **)v13;
    if (v27 != **(_DWORD **)v13)
    {
      uint64_t v29 = *(unsigned int *)(v9 + 139412);
      if ((int)v29 + 32 > *(_DWORD *)(v9 + 139408) || (*(_DWORD *)(v9 + 139412) = v29 + 32, (v29 & 0x80000000) != 0))
      {
        *a6 = 7;
        goto LABEL_75;
      }
      uint64_t v30 = 0;
      uint64_t v31 = &v28[v29];
      int32x4_t v32 = vdupq_n_s32(v27);
      do
      {
        *(int32x4_t *)&v31[v30] = v32;
        v30 += 4;
      }
      while (v30 != 32);
      unsigned int v26 = -(int)v29;
    }
    int32x4_t v33 = vdupq_n_s32(v26);
    uint64_t v34 = -128;
    do
    {
      *(int32x4_t *)(v9 + v34 + 7040) = v33;
      v34 += 16;
    }
    while (v34);
    signed int v35 = 0x10000;
    int v36 = 2048;
    do
    {
      if (*(_DWORD *)(v9 + 4 * (v35 >> 5)))
      {
        int v37 = (int)(v35 & 0xFFFFFC00) >> 5;
        LODWORD(i) = v36;
        if (v36 >= 2049)
        {
          uint64_t v39 = v9 + 0x2000;
          for (unint64_t i = 2048; i < v36; i += 32)
          {
            uint64_t v40 = 0;
            while (*(_DWORD *)(v39 + v40) == *(_DWORD *)(v9 + 4 * v37 + v40))
            {
              v40 += 4;
              if (v40 == 128) {
                goto LABEL_53;
              }
            }
            v39 += 128;
          }
          LODWORD(i) = v36;
        }
LABEL_53:
        int v41 = v49(v9, v35 & 0xFFFFFC00, (i + 32));
        unsigned int v42 = (unsigned __int16)((v35 >> 10) - 10304);
        if (*(unsigned char *)(v9 + 139419))
        {
          int v43 = 0;
        }
        else
        {
          int v44 = *(_DWORD *)(v9 + 4 * (v42 >> 5));
          if (v44 < 0) {
            int v44 = -v44;
          }
          int v43 = *(_DWORD *)(*(void *)(v9 + 139392) + 4 * (v44 + ((v35 >> 10) & 0x1F)));
        }
        if (v41 != v43)
        {
          if (!utrie_set32(v9, v42, v41))
          {
            int v45 = 7;
            goto LABEL_74;
          }
          if (i == v36)
          {
            memmove((void *)(v9 + 4 * v36), (const void *)(v9 + 4 * v37), 0x80uLL);
            v36 += 32;
          }
        }
        signed int v35 = (v35 & 0xFFFFFC00) + 1024;
      }
      else
      {
        v35 += 32;
      }
    }
    while (v35 < 1114112);
    if (v36 < 34816)
    {
      memmove((void *)(v9 + 8320), (const void *)(v9 + 0x2000), 4 * v36 - 0x2000);
      *(_OWORD *)(v9 + 8256) = v54;
      *(_OWORD *)(v9 + 8272) = v55;
      *(_OWORD *)(v9 + 8288) = v56;
      *(_OWORD *)(v9 + 8304) = v57;
      *(_OWORD *)(v9 + 0x2000) = v50;
      *(_OWORD *)(v9 + 8208) = v51;
      *(_OWORD *)(v9 + 8224) = v52;
      *(_OWORD *)(v9 + 8240) = v53;
      int v48 = v36 + 32;
      uint64_t v13 = v9 + 139392;
      *(_DWORD *)(v9 + 139404) = v48;
      goto LABEL_75;
    }
    int v45 = 8;
LABEL_74:
    *a6 = v45;
    uint64_t v13 = v9 + 139392;
LABEL_75:
    sub_18C8C0AEC(v9, 1, a6);
    *(unsigned char *)(v13 + 27) = 1;
    if (*a6 > 0) {
      return 0;
    }
  }
  int v14 = *(_DWORD *)(v13 + 20);
  int v15 = v14;
  if (a5) {
    int v15 = *(_DWORD *)(v13 + 12) + v14;
  }
  if (v15 >= 0x40000) {
    *a6 = 8;
  }
  int v16 = *(_DWORD *)(v13 + 12);
  if (a5) {
    char v17 = 1;
  }
  else {
    char v17 = 2;
  }
  uint64_t v7 = ((v14 << v17) + 2 * v16 + 16);
  if ((int)v7 <= a3)
  {
    int32x4_t v18 = a2 + 4;
    if (a5) {
      int v19 = 37;
    }
    else {
      int v19 = 293;
    }
    *a2 = 1416784229;
    a2[1] = v19;
    if (*(unsigned char *)(v13 + 26)) {
      a2[1] = v19 | 0x200;
    }
    a2[2] = v16;
    a2[3] = v14;
    if (a5)
    {
      if (v16 >= 1)
      {
        unsigned int v20 = v16 + 1;
        do
        {
          unsigned int v21 = *(_DWORD *)v9;
          v9 += 4;
          *v18++ = (v21 + v16) >> 2;
          --v20;
        }
        while (v20 > 1);
      }
      if (v14 >= 1)
      {
        uint64_t v22 = *(int **)v13;
        unsigned int v23 = v14 + 1;
        do
        {
          int v24 = *v22++;
          *v18++ = v24;
          --v23;
        }
        while (v23 > 1);
      }
    }
    else
    {
      if (v16 >= 1)
      {
        unsigned int v46 = v16 + 1;
        do
        {
          unsigned int v47 = *(_DWORD *)v9;
          v9 += 4;
          *v18++ = v47 >> 2;
          --v46;
        }
        while (v46 > 1);
      }
      memcpy(v18, *(const void **)v13, 4 * v14);
    }
  }
  return v7;
}

uint64_t sub_18C8C0A74(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3 = a2 + 1024;
  do
  {
    if (!a1)
    {
LABEL_10:
      int v4 = 32;
      goto LABEL_11;
    }
    int v4 = 32;
    if (HIWORD(a2) <= 0x10u && !*(unsigned char *)(a1 + 139419))
    {
      int v5 = *(_DWORD *)(a1 + 4 * (a2 >> 5));
      if (!v5) {
        goto LABEL_10;
      }
      if (v5 < 0) {
        int v5 = -v5;
      }
      if (*(_DWORD *)(*(void *)(a1 + 139392) + 4 * (v5 + (a2 & 0x1F))) != **(_DWORD **)(a1 + 139392)) {
        return a3;
      }
      int v4 = 1;
    }
LABEL_11:
    a2 += v4;
  }
  while ((int)a2 < v3);
  return 0;
}

uint64_t sub_18C8C0AEC(uint64_t result, int a2, int *a3)
{
  if (*a3 > 0) {
    return result;
  }
  int v3 = (int *)result;
  uint64_t v4 = result + 139392;
  if (*(unsigned char *)(result + 139419)) {
    return result;
  }
  uint64_t result = (uint64_t)memset((void *)(result + 139420), 255, 0x22084uLL);
  uint64_t v6 = *(unsigned int *)(v4 + 12);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = v3;
    do
    {
      int v9 = *v7++;
      unsigned int v8 = v9;
      if (v9 < 0) {
        unsigned int v8 = -v8;
      }
      v3[(v8 >> 5) + 34855] = 0;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(v4 + 28) = 0;
  int v10 = 32;
  if (*(unsigned char *)(v4 + 26)) {
    int v11 = 288;
  }
  else {
    int v11 = 32;
  }
  int v12 = *(_DWORD *)(v4 + 20);
  if (v12 < 33) {
    goto LABEL_49;
  }
  if (a2) {
    uint64_t v13 = 4;
  }
  else {
    uint64_t v13 = 32;
  }
  int v14 = 32;
  int v10 = 32;
  do
  {
    uint64_t v15 = 4 * v14;
    while (1)
    {
      int v16 = &v3[(v14 >> 5) + 34855];
      if ((*v16 & 0x80000000) == 0) {
        break;
      }
LABEL_29:
      v14 += 32;
      v15 += 128;
      if (v14 >= v12) {
        goto LABEL_49;
      }
    }
    if (v14 < v11) {
      goto LABEL_38;
    }
    uint64_t v17 = *(void *)v4;
    if (v10 >= 32)
    {
      uint64_t result = 0;
LABEL_21:
      int32x4_t v18 = (_DWORD *)(v17 + 4 * result);
      unsigned int v19 = 33;
      unsigned int v20 = (_DWORD *)(*(void *)v4 + 4 * v14);
      do
      {
        if (*v18 != *v20)
        {
          result += v13;
          if (result <= (v10 - 32)) {
            goto LABEL_21;
          }
          goto LABEL_31;
        }
        ++v18;
        ++v20;
        --v19;
      }
      while (v19 > 1);
      if ((result & 0x80000000) != 0) {
        goto LABEL_31;
      }
      *int v16 = result;
      int v12 = *(_DWORD *)(v4 + 20);
      goto LABEL_29;
    }
LABEL_31:
    if (a2)
    {
      int v21 = v14 + 28;
      int v22 = 29;
      uint64_t result = 5;
      unint64_t v23 = 28;
      while (2)
      {
        int v24 = (_DWORD *)(v17 + 4 * (v10 - v23));
        int v25 = v22;
        unsigned int v26 = (_DWORD *)(*(void *)v4 + 4 * v14);
        while (*v24 == *v26)
        {
          ++v24;
          ++v26;
          if (--v25 <= 1)
          {
            *int v16 = v10 - v23;
            if ((int)v23 > 31)
            {
              v14 += v23;
            }
            else
            {
              int v34 = 0;
              signed int v35 = (int *)(v17 + 4 * v21);
              int v36 = (_DWORD *)(v17 + 4 * v10);
              do
              {
                int v37 = *v35++;
                *v36++ = v37;
                --v34;
                uint64_t result = (result - 1);
              }
              while (result > 1);
              int v14 = v21 - v34;
              v10 -= v34;
            }
            goto LABEL_48;
          }
        }
        v21 -= 4;
        v22 -= 4;
        uint64_t result = (result + 4);
        BOOL v27 = v23 > 4;
        v23 -= 4;
        if (v27) {
          continue;
        }
        break;
      }
    }
LABEL_38:
    if (v10 >= v14)
    {
      *int v16 = v14;
      int v14 = v10 + 32;
      v10 += 32;
    }
    else
    {
      int v28 = 0;
      *int v16 = v10;
      uint64_t v29 = (int *)(*(void *)v4 + v15);
      uint64_t v30 = (_DWORD *)(*(void *)v4 + 4 * v10);
      do
      {
        int v31 = *v29++;
        *v30++ = v31;
        int v32 = v28 - 1;
        unsigned int v33 = v28 + 32;
        --v28;
      }
      while (v33 > 1);
      v14 -= v32;
      v10 -= v32;
    }
LABEL_48:
    int v12 = *(_DWORD *)(v4 + 20);
  }
  while (v14 < v12);
LABEL_49:
  if (*(int *)(v4 + 12) >= 1)
  {
    uint64_t v38 = 0;
    do
    {
      int v39 = v3[v38];
      if (v39 < 0) {
        int v39 = -v39;
      }
      v3[v38++] = v3[(v39 >> 5) + 34855];
    }
    while (v38 < *(int *)(v4 + 12));
  }
  *(_DWORD *)(v4 + 20) = v10;
  return result;
}

uint64_t utrie_unserialize(uint64_t a1, _DWORD *a2, int a3, int *a4)
{
  if (a4 && *a4 <= 0)
  {
    if (a3 > 15 && *a2 == 1416784229)
    {
      int v4 = a2[1];
      if (v4 == 37)
      {
        *(unsigned char *)(a1 + 36) = (v4 & 0x200) != 0;
        int v5 = a2[3];
        uint64_t v6 = (int)a2[2];
        *(_DWORD *)(a1 + 24) = v6;
        *(_DWORD *)(a1 + 28) = v5;
        if (a3 - 16 >= 2 * (int)v6)
        {
          *(void *)a1 = a2 + 4;
          uint64_t v7 = (_DWORD *)((char *)a2 + 2 * v6 + 16);
          int v8 = a3 - 16 - 2 * v6;
          if ((v4 & 0x100) != 0)
          {
            if (v8 >= 4 * v5)
            {
              *(void *)(a1 + 8) = v7;
              *(_DWORD *)(a1 + 32) = *v7;
              int v9 = 2 * v6 + 4 * v5;
              goto LABEL_15;
            }
          }
          else if (v8 >= 2 * v5)
          {
            *(void *)(a1 + 8) = 0;
            *(_DWORD *)(a1 + 32) = *(unsigned __int16 *)v7;
            int v9 = 2 * (v5 + v6);
LABEL_15:
            uint64_t v10 = (v9 + 16);
            *(void *)(a1 + 16) = utrie_defaultGetFoldingOffset;
            return v10;
          }
        }
      }
    }
    *a4 = 3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t utrie_unserializeDummy(uint64_t a1, char *__b, int a3, unsigned int a4, unsigned int a5, int a6, int *a7)
{
  if (a7 && *a7 <= 0)
  {
    if (a5 == a4) {
      int v13 = 256;
    }
    else {
      int v13 = 288;
    }
    *(_DWORD *)(a1 + 24) = 2080;
    *(_DWORD *)(a1 + 28) = v13;
    if (a6)
    {
      uint64_t v7 = (2 * v13 + 4160);
      if ((int)v7 <= a3)
      {
        *(unsigned char *)(a1 + 36) = 1;
        *(_DWORD *)(a1 + 32) = a4;
        *(void *)a1 = __b;
        memset_pattern16(__b, &unk_18CA87570, 0x1040uLL);
        if (a5 != a4) {
          memset_pattern16(__b + 3456, &unk_18CA87580, 0x40uLL);
        }
        uint64_t v14 = 0;
        *(void *)(a1 + 8) = 0;
        int16x8_t v15 = vdupq_n_s16(a4);
        do
        {
          *(int16x8_t *)&__b[v14 + 4160] = v15;
          v14 += 16;
        }
        while (v14 != 512);
        if (a5 != a4)
        {
          uint64_t v16 = 0;
          int16x8_t v17 = vdupq_n_s16(a5);
          do
          {
            *(int16x8_t *)&__b[v16 + 4672] = v17;
            v16 += 16;
          }
          while (v16 != 64);
        }
LABEL_27:
        *(void *)(a1 + 16) = utrie_defaultGetFoldingOffset;
        return v7;
      }
    }
    else
    {
      uint64_t v7 = (4 * v13) | 0x1040u;
      if ((int)v7 <= a3)
      {
        *(unsigned char *)(a1 + 36) = 1;
        *(_DWORD *)(a1 + 32) = a4;
        *(void *)a1 = __b;
        bzero(__b, 0x1040uLL);
        if (a5 != a4) {
          memset_pattern16(__b + 3456, asc_18CA87590, 0x40uLL);
        }
        uint64_t v18 = 0;
        uint64_t v19 = *(int *)(a1 + 24);
        unsigned int v20 = &__b[2 * v19];
        *(void *)(a1 + 8) = v20;
        int32x4_t v21 = vdupq_n_s32(a4);
        do
        {
          *(int32x4_t *)&v20[v18] = v21;
          v18 += 16;
        }
        while (v18 != 1024);
        if (a5 != a4)
        {
          uint64_t v22 = 0;
          int32x4_t v23 = vdupq_n_s32(a5);
          int v24 = &__b[2 * v19 + 1024];
          do
          {
            *(int32x4_t *)&v24[v22] = v23;
            v22 += 16;
          }
          while (v22 != 128);
        }
        goto LABEL_27;
      }
    }
    *a7 = 15;
    return v7;
  }
  return 0xFFFFFFFFLL;
}

uint64_t utrie_enum(uint64_t result, uint64_t (*a2)(uint64_t a1, uint64_t a2), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v47 = result;
  if (result)
  {
    uint64_t result = (uint64_t)a3;
    if (a3)
    {
      uint64_t v49 = *(void *)v47;
      if (*(void *)v47)
      {
        if (a2) {
          int v5 = a2;
        }
        else {
          int v5 = sub_18C8C1578;
        }
        uint64_t v6 = *(void *)(v47 + 8);
        long long v57 = v5;
        unsigned int v50 = v5(a4, *(unsigned int *)(v47 + 32));
        if (v6) {
          int v7 = 0;
        }
        else {
          int v7 = *(_DWORD *)(v47 + 24);
        }
        uint64_t v8 = v49;
        int v9 = 0;
        uint64_t v10 = 0;
        LODWORD(v11) = 0;
        int v12 = v7;
        uint64_t v13 = v50;
        uint64_t v56 = v6;
        int v48 = v7;
        do
        {
          if (v11 == 56320) {
            int v9 = 1760;
          }
          if (v11 == 55296) {
            int v14 = 2048;
          }
          else {
            int v14 = v9;
          }
          uint64_t v15 = *(unsigned __int16 *)(v8 + 2 * v14);
          if (4 * v15 == v12)
          {
            uint64_t v11 = (v11 + 32);
          }
          else
          {
            unsigned int v53 = v11;
            if (4 * v15 == v7)
            {
              if (v13 == v50)
              {
                uint64_t v16 = v10;
              }
              else
              {
                uint64_t v16 = v11;
                int v12 = v7;
                if ((int)v10 < (int)v11)
                {
                  uint64_t v16 = v11;
                  uint64_t result = a3(a4, v10, v11, v13);
                  int v12 = v48;
                  if (!result) {
                    return result;
                  }
                }
              }
              uint64_t v11 = (v11 + 32);
              uint64_t v13 = v50;
              uint64_t v10 = v16;
              uint64_t v8 = v49;
              uint64_t v6 = v56;
              int v7 = v48;
            }
            else
            {
              int v51 = v14;
              uint64_t v17 = 0;
              uint64_t v18 = v6 + 16 * v15;
              uint64_t v19 = v8 + 8 * v15;
              int v12 = 4 * v15;
              int v20 = v11;
              do
              {
                if (v6) {
                  uint64_t v21 = *(unsigned int *)(v18 + 4 * v17);
                }
                else {
                  uint64_t v21 = *(unsigned __int16 *)(v19 + 2 * v17);
                }
                uint64_t v22 = v57(a4, v21);
                if (v22 != v13)
                {
                  uint64_t v23 = v22;
                  if ((int)v10 < v20 + (int)v17)
                  {
                    uint64_t result = a3(a4, v10, v53 + v17, v13);
                    if (!result) {
                      return result;
                    }
                  }
                  if (v17) {
                    int v12 = -1;
                  }
                  uint64_t v13 = v23;
                  uint64_t v10 = v53 + v17;
                  uint64_t v6 = v56;
                }
                ++v17;
              }
              while (v17 != 32);
              uint64_t v11 = v53 + 32;
              uint64_t v8 = v49;
              int v7 = v48;
              int v14 = v51;
            }
          }
          int v9 = v14 + 1;
        }
        while ((int)v11 < 0x10000);
        int v24 = 55296;
        do
        {
          int v25 = 4 * *(unsigned __int16 *)(v8 + 2 * (v24 >> 5));
          if (v25 == v7)
          {
            int v26 = v24;
            if (v13 == v50)
            {
              int v27 = v11;
              uint64_t v28 = v10;
            }
            else
            {
              uint64_t v28 = v11;
              int v12 = v7;
              int v27 = v11;
              if ((int)v10 < (int)v11)
              {
                uint64_t v28 = v11;
                uint64_t result = a3(a4, v10, v11, v13);
                int v12 = v48;
                if (!result) {
                  return result;
                }
              }
            }
            int v24 = v26 + 32;
            uint64_t v11 = (v27 + 0x8000);
            uint64_t v13 = v50;
            uint64_t v10 = v28;
            uint64_t v8 = v49;
            uint64_t v6 = v56;
            int v7 = v48;
          }
          else
          {
            uint64_t v29 = v25 + (v24 & 0x1Fu);
            if (v6) {
              uint64_t v30 = *(unsigned int *)(v6 + 4 * v29);
            }
            else {
              uint64_t v30 = *(unsigned __int16 *)(v8 + 2 * v29);
            }
            int v45 = v24;
            int v31 = (*(uint64_t (**)(uint64_t))(v47 + 16))(v30);
            if (v31 >= 1)
            {
              int v32 = v31 + 31;
              uint64_t v33 = v31;
              if (__OFSUB__(v31, v31 + 31)) {
                int v32 = v31;
              }
              int v34 = v32 + 1;
              int v46 = v32 + 1;
              while (1)
              {
                uint64_t v35 = *(unsigned __int16 *)(v8 + 2 * v33);
                if (4 * v35 == v12)
                {
                  uint64_t v11 = (v11 + 32);
                }
                else
                {
                  unsigned int v54 = v11;
                  if (4 * v35 == v7)
                  {
                    if (v13 == v50)
                    {
                      uint64_t v36 = v10;
                    }
                    else
                    {
                      uint64_t v36 = v11;
                      int v12 = v7;
                      if ((int)v10 < (int)v11)
                      {
                        uint64_t v36 = v11;
                        uint64_t result = a3(a4, v10, v11, v13);
                        int v12 = v48;
                        if (!result) {
                          return result;
                        }
                      }
                    }
                    uint64_t v11 = (v11 + 32);
                    uint64_t v13 = v50;
                    uint64_t v10 = v36;
                    uint64_t v8 = v49;
                    uint64_t v6 = v56;
                  }
                  else
                  {
                    uint64_t v37 = 0;
                    uint64_t v38 = v6 + 16 * v35;
                    uint64_t v52 = v8 + 8 * v35;
                    int v12 = 4 * v35;
                    int v39 = v11;
                    do
                    {
                      if (v6) {
                        uint64_t v40 = *(unsigned int *)(v38 + 4 * v37);
                      }
                      else {
                        uint64_t v40 = *(unsigned __int16 *)(v52 + 2 * v37);
                      }
                      uint64_t v41 = v57(a4, v40);
                      if (v41 != v13)
                      {
                        uint64_t v42 = v41;
                        if ((int)v10 < v39 + (int)v37)
                        {
                          uint64_t result = a3(a4, v10, v54 + v37, v13);
                          if (!result) {
                            return result;
                          }
                        }
                        if (v37) {
                          int v12 = -1;
                        }
                        uint64_t v13 = v42;
                        uint64_t v10 = v54 + v37;
                        uint64_t v6 = v56;
                      }
                      ++v37;
                    }
                    while (v37 != 32);
                    uint64_t v11 = v54 + 32;
                    uint64_t v8 = v49;
                  }
                  int v7 = v48;
                  int v34 = v46;
                }
                if (v34 == ++v33) {
                  goto LABEL_79;
                }
              }
            }
            if (v13 == v50)
            {
              int v43 = v11;
              uint64_t v44 = v10;
            }
            else
            {
              uint64_t v44 = v11;
              int v12 = v7;
              int v43 = v11;
              if ((int)v10 < (int)v11)
              {
                uint64_t v44 = v11;
                uint64_t result = a3(a4, v10, v11, v13);
                int v12 = v48;
                if (!result) {
                  return result;
                }
              }
            }
            uint64_t v11 = (v43 + 1024);
            uint64_t v13 = v50;
            uint64_t v10 = v44;
            uint64_t v8 = v49;
            uint64_t v6 = v56;
            int v7 = v48;
LABEL_79:
            int v24 = v45 + 1;
          }
        }
        while (v24 < 56320);
        return a3(a4, v10, v11, v13);
      }
    }
  }
  return result;
}

uint64_t sub_18C8C1578(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t utrie2_get32(uint64_t *a1, unsigned int a2)
{
  if (a1[1])
  {
    uint64_t v2 = *a1;
    if (a2 >> 11 > 0x1A)
    {
      if (HIWORD(a2))
      {
        if (a2 >= 0x110000)
        {
          int v8 = *((_DWORD *)a1 + 6) + 128;
          return *(unsigned __int16 *)(v2 + 2 * v8);
        }
        if (*((_DWORD *)a1 + 11) <= (signed int)a2)
        {
          int v8 = *((_DWORD *)a1 + 12);
          return *(unsigned __int16 *)(v2 + 2 * v8);
        }
        unsigned int v3 = ((a2 >> 5) & 0x3F) + *(unsigned __int16 *)(v2 + 2 * ((a2 >> 11) + 2080));
      }
      else
      {
        if (a2 >> 10 >= 0x37) {
          int v7 = 0;
        }
        else {
          int v7 = 320;
        }
        unsigned int v3 = v7 + (a2 >> 5);
      }
    }
    else
    {
      unsigned int v3 = a2 >> 5;
    }
    int v8 = (a2 & 0x1F) + 4 * *(unsigned __int16 *)(v2 + 2 * v3);
    return *(unsigned __int16 *)(v2 + 2 * v8);
  }
  uint64_t v4 = a1[2];
  if (v4)
  {
    if (a2 >> 11 > 0x1A)
    {
      if (HIWORD(a2))
      {
        if (HIWORD(a2) > 0x10u)
        {
          int v12 = 128;
          return *(unsigned int *)(v4 + 4 * v12);
        }
        if (*((_DWORD *)a1 + 11) <= (signed int)a2)
        {
          int v12 = *((_DWORD *)a1 + 12);
          return *(unsigned int *)(v4 + 4 * v12);
        }
        int v11 = *(unsigned __int16 *)(*a1
                                  + 2 * (((a2 >> 5) & 0x3F) + *(unsigned __int16 *)(*a1 + 2 * ((a2 >> 11) + 2080))));
LABEL_24:
        int v12 = (a2 & 0x1F) + 4 * v11;
        return *(unsigned int *)(v4 + 4 * v12);
      }
      uint64_t v5 = *a1;
      if (a2 >> 10 >= 0x37) {
        int v10 = 0;
      }
      else {
        int v10 = 320;
      }
      unsigned int v6 = v10 + (a2 >> 5);
    }
    else
    {
      uint64_t v5 = *a1;
      unsigned int v6 = a2 >> 5;
    }
    int v11 = *(unsigned __int16 *)(v5 + 2 * v6);
    goto LABEL_24;
  }
  if (a2 < 0x110000) {
    return sub_18C8C16BC(a1[9], a2, 1);
  }
  else {
    return *((unsigned int *)a1 + 10);
  }
}

uint64_t sub_18C8C16BC(uint64_t a1, int a2, int a3)
{
  unsigned int v3 = a2 & 0xFFFFFC00;
  if (*(_DWORD *)(a1 + 144168) <= a2)
  {
    if (v3 != 55296 || a3)
    {
      int v5 = *(_DWORD *)(a1 + 144152) - 4;
      return *(unsigned int *)(*(void *)(a1 + 144128) + 4 * v5);
    }
    goto LABEL_7;
  }
  if (v3 != 55296 || !a3)
  {
LABEL_7:
    int v4 = *(_DWORD *)(a1 + 4 * (a2 >> 11)) + ((a2 >> 5) & 0x3F);
    goto LABEL_8;
  }
  int v4 = (a2 >> 5) + 320;
LABEL_8:
  int v5 = *(_DWORD *)(a1 + 4 * v4 + 2176) + (a2 & 0x1F);
  return *(unsigned int *)(*(void *)(a1 + 144128) + 4 * v5);
}

uint64_t utrie2_get32FromLeadSurrogateCodeUnit(uint64_t a1, unsigned int a2)
{
  if (a2 >> 10 != 54) {
    return *(unsigned int *)(a1 + 40);
  }
  if (*(void *)(a1 + 8)) {
    return *(unsigned __int16 *)(*(void *)a1
  }
                               + 2 * ((a2 & 0x1F) + 4 * *(unsigned __int16 *)(*(void *)a1 + 2 * (a2 >> 5))));
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    return *(unsigned int *)(v3 + 4 * ((a2 & 0x1F) + 4 * *(unsigned __int16 *)(*(void *)a1 + 2 * (a2 >> 5))));
  }
  else {
    return sub_18C8C16BC(*(void *)(a1 + 72), a2, 0);
  }
}

uint64_t utrie2_internalU8NextIndex(uint64_t *a1, UChar32 c, uint8_t *s, uint64_t a4)
{
  punint64_t i = 0;
  if (a4 - (uint64_t)s >= 8) {
    int32_t v6 = 7;
  }
  else {
    int32_t v6 = a4 - s;
  }
  unsigned int v7 = utf8_nextCharSafeBody(s, &pi, v6, c, -1);
  if (v7 >> 11 <= 0x1A)
  {
    uint64_t v8 = *a1;
    unsigned int v9 = v7 >> 5;
LABEL_11:
    int v11 = *(unsigned __int16 *)(v8 + 2 * v9);
LABEL_12:
    int v12 = (v7 & 0x1F) + 4 * v11;
    return pi | (8 * v12);
  }
  if (!HIWORD(v7))
  {
    uint64_t v8 = *a1;
    if (v7 >> 10 >= 0x37) {
      int v10 = 0;
    }
    else {
      int v10 = 320;
    }
    unsigned int v9 = v10 + (v7 >> 5);
    goto LABEL_11;
  }
  if (v7 < 0x110000)
  {
    if (*((_DWORD *)a1 + 11) <= (signed int)v7)
    {
      int v12 = *((_DWORD *)a1 + 12);
      return pi | (8 * v12);
    }
    int v11 = *(unsigned __int16 *)(*a1 + 2
                                    * (((v7 >> 5) & 0x3F) + *(unsigned __int16 *)(*a1 + 2 * ((v7 >> 11) + 2080))));
    goto LABEL_12;
  }
  if (a1[2]) {
    int v12 = 128;
  }
  else {
    int v12 = *((_DWORD *)a1 + 6) + 128;
  }
  return pi | (8 * v12);
}

uint64_t utrie2_internalU8PrevIndex(uint64_t *a1, UChar32 c, const uint8_t *a3, uint64_t a4)
{
  if (a4 - (uint64_t)a3 >= 8) {
    int32_t v5 = 7;
  }
  else {
    int32_t v5 = a4 - a3;
  }
  if (a4 - (uint64_t)a3 >= 8) {
    int32_t v6 = (const uint8_t *)(a4 - 7);
  }
  else {
    int32_t v6 = a3;
  }
  punint64_t i = v5;
  unsigned int v7 = utf8_prevCharSafeBody(v6, 0, &pi, c, -1);
  if (v7 >> 11 <= 0x1A)
  {
    uint64_t v8 = *a1;
    unsigned int v9 = v7 >> 5;
LABEL_14:
    int v11 = *(unsigned __int16 *)(v8 + 2 * v9);
LABEL_15:
    int v12 = (v7 & 0x1F) + 4 * v11;
    return (v5 - pi) | (8 * v12);
  }
  if (!HIWORD(v7))
  {
    uint64_t v8 = *a1;
    if (v7 >> 10 >= 0x37) {
      int v10 = 0;
    }
    else {
      int v10 = 320;
    }
    unsigned int v9 = v10 + (v7 >> 5);
    goto LABEL_14;
  }
  if (v7 < 0x110000)
  {
    if (*((_DWORD *)a1 + 11) <= (signed int)v7)
    {
      int v12 = *((_DWORD *)a1 + 12);
      return (v5 - pi) | (8 * v12);
    }
    int v11 = *(unsigned __int16 *)(*a1 + 2
                                    * (((v7 >> 5) & 0x3F) + *(unsigned __int16 *)(*a1 + 2 * ((v7 >> 11) + 2080))));
    goto LABEL_15;
  }
  if (a1[2]) {
    int v12 = 128;
  }
  else {
    int v12 = *((_DWORD *)a1 + 6) + 128;
  }
  return (v5 - pi) | (8 * v12);
}

void *utrie2_openFromSerialized(unsigned int a1, uint64_t a2, int a3, unsigned int *a4, int *a5)
{
  if (*a5 > 0) {
    return 0;
  }
  if (a3 < 1 || a1 > 1 || (a2 & 3) != 0)
  {
    uint64_t result = 0;
    int v12 = 1;
    goto LABEL_23;
  }
  if (a3 <= 0xF || *(_DWORD *)a2 != 1416784178 || (*(_WORD *)(a2 + 4) & 0xF) != a1) {
    goto LABEL_22;
  }
  unsigned int v9 = *(unsigned __int16 *)(a2 + 6);
  int v10 = *(unsigned __int16 *)(a2 + 8);
  if (a1) {
    int v11 = -4;
  }
  else {
    int v11 = v9 - 4;
  }
  int v12 = 3;
  if (a1) {
    char v13 = 4;
  }
  else {
    char v13 = 3;
  }
  unsigned int v14 = (v10 << v13) + 2 * v9 + 16;
  if (v14 > a3)
  {
    uint64_t result = 0;
LABEL_23:
    *a5 = v12;
    return result;
  }
  __int16 v20 = *(_WORD *)(a2 + 10);
  uint64_t v16 = *(unsigned __int16 *)(a2 + 12);
  int v17 = *(unsigned __int16 *)(a2 + 14);
  uint64_t result = uprv_malloc(0x50uLL);
  if (!result)
  {
    int v12 = 7;
    goto LABEL_23;
  }
  result[1] = 0;
  result[2] = 0;
  *((_DWORD *)result + 6) = v9;
  *((_DWORD *)result + 7) = 4 * v10;
  *((_WORD *)result + 16) = v20;
  *((_WORD *)result + 17) = v16;
  *(void *)((char *)result + 36) = 0;
  *((_DWORD *)result + 11) = v17 << 11;
  *((_DWORD *)result + 12) = v11 + 4 * v10;
  *(void *)((char *)result + 52) = 0;
  *(void *)((char *)result + 60) = 0;
  *(void *)((char *)result + 68) = 0;
  *((_DWORD *)result + 19) = 0;
  result[7] = a2;
  *((_DWORD *)result + 16) = v14;
  uint64_t v18 = a2 + 16 + 2 * v9;
  *uint64_t result = a2 + 16;
  if (a1 != 1)
  {
    if (!a1)
    {
      result[1] = v18;
      *((_DWORD *)result + 9) = *(unsigned __int16 *)(a2 + 16 + 2 * v16);
      int v19 = *(unsigned __int16 *)(v18 + 256);
      goto LABEL_27;
    }
LABEL_22:
    uint64_t result = 0;
    int v12 = 3;
    goto LABEL_23;
  }
  result[2] = v18;
  *((_DWORD *)result + 9) = *(_DWORD *)(v18 + 4 * v16);
  int v19 = *(_DWORD *)(v18 + 512);
LABEL_27:
  *((_DWORD *)result + 10) = v19;
  if (a4) {
    *a4 = v14;
  }
  return result;
}

void *utrie2_openDummy(unsigned int a1, unsigned int a2, unsigned int a3, int *a4)
{
  if (*a4 > 0) {
    return 0;
  }
  if (a1 >= 2) {
    goto LABEL_4;
  }
  if (a1) {
    size_t v10 = 5024;
  }
  else {
    size_t v10 = 4632;
  }
  int v11 = uprv_malloc(0x50uLL);
  int v4 = v11;
  if (!v11)
  {
LABEL_25:
    int v7 = 7;
    goto LABEL_26;
  }
  v11[3] = 0u;
  v11[4] = 0u;
  v11[1] = 0u;
  v11[2] = 0u;
  *int v11 = 0u;
  int v12 = (char *)uprv_malloc(v10);
  v4[7] = v12;
  if (!v12)
  {
    uprv_free(v4);
    int v4 = 0;
    goto LABEL_25;
  }
  *((_DWORD *)v4 + 16) = v10;
  *((unsigned char *)v4 + 68) = 1;
  if (a1) {
    unsigned int v13 = 0;
  }
  else {
    unsigned int v13 = 2112;
  }
  v4[3] = 0xC400000840;
  *((_WORD *)v4 + 16) = 0;
  *((_WORD *)v4 + 17) = v13;
  *((_DWORD *)v4 + 9) = a2;
  *((_DWORD *)v4 + 10) = a3;
  *((_DWORD *)v4 + 11) = 0;
  *((_DWORD *)v4 + 12) = v13 + 192;
  *(_DWORD *)int v12 = 1416784178;
  *((_WORD *)v12 + 2) = a1;
  *(_DWORD *)(v12 + 6) = 3213376;
  *((_WORD *)v12 + 5) = 0;
  *((_WORD *)v12 + 6) = v13;
  *((_WORD *)v12 + 7) = 0;
  int16x8_t v14 = vdupq_n_s16(v13 >> 2);
  uint64_t v15 = -4160;
  *int v4 = v12 + 16;
  do
  {
    *(int16x8_t *)&v12[v15 + 4176] = v14;
    v15 += 16;
  }
  while (v15);
  uint64_t v16 = 0;
  *((_WORD *)v12 + 2088) = v13 | 0x80;
  *((_WORD *)v12 + 2089) = v13 | 0x80;
  do
  {
    *(_WORD *)&v12[v16 + 4180] = v13;
    v16 += 2;
  }
  while (v16 != 60);
  int v17 = &v12[v16];
  uint64_t v18 = (uint64_t)&v12[v16 + 4180];
  if (a1 == 1)
  {
    uint64_t v25 = 0;
    int v26 = (int32x4_t *)(v17 + 4692);
    v4[1] = 0;
    v4[2] = v18;
    int32x4_t v27 = vdupq_n_s32(a2);
    do
    {
      *(int32x4_t *)&v12[v25 + 4180 + v16] = v27;
      v25 += 16;
    }
    while (v25 != 512);
    uint64_t v28 = (uint64_t)&v12[v16 + 4564];
    int32x4_t v29 = vdupq_n_s32(a3);
    uint64_t v30 = 64;
    do
    {
      *v26++ = v29;
      v30 -= 4;
    }
    while (v30);
    *(int32x4_t *)(v28 + 384) = v27;
  }
  else
  {
    if (a1)
    {
LABEL_4:
      int v4 = 0;
      int v7 = 1;
LABEL_26:
      *a4 = v7;
      return v4;
    }
    uint64_t v19 = 0;
    __int16 v20 = (int16x8_t *)(v17 + 4436);
    v4[1] = v18;
    v4[2] = 0;
    int16x8_t v21 = vdupq_n_s16(a2);
    do
    {
      *(int16x8_t *)&v12[v19 + 4180 + v16] = v21;
      v19 += 16;
    }
    while (v19 != 256);
    int16x8_t v22 = vdupq_n_s16(a3);
    uint64_t v23 = 64;
    do
    {
      *v20++ = v22;
      v23 -= 8;
    }
    while (v23);
    *(int16x4_t *)&v12[v16 + 4564] = vdup_n_s16(a2);
  }
  return v4;
}

void utrie2_close(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 68)) {
      uprv_free(*(void **)(a1 + 56));
    }
    uint64_t v2 = *(void *)(a1 + 72);
    if (v2)
    {
      uprv_free(*(void **)(v2 + 144128));
      uprv_free(*(void **)(a1 + 72));
    }
    uprv_free((void *)a1);
  }
}

BOOL utrie2_isFrozen(uint64_t a1)
{
  return *(void *)(a1 + 72) == 0;
}

uint64_t utrie2_serialize(uint64_t a1, void *__dst, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0;
  }
  if (!a1
    || !*(void *)(a1 + 56)
    || a3 < 0
    || *(void *)(a1 + 72)
    || a3 && (!__dst || (__dst & 3) != 0))
  {
    uint64_t result = 0;
    int v6 = 1;
    goto LABEL_13;
  }
  uint64_t result = *(unsigned int *)(a1 + 64);
  if ((int)result > a3)
  {
    int v6 = 15;
LABEL_13:
    *a4 = v6;
    return result;
  }
  memcpy(__dst, *(const void **)(a1 + 56), (int)result);
  return *(unsigned int *)(a1 + 64);
}

uint64_t utrie2_enum(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2), uint64_t (*a3)(uint64_t, uint64_t, void, uint64_t), uint64_t a4)
{
  return sub_18C8C1EAC(a1, 0, 1114112, a2, a3, a4);
}

uint64_t sub_18C8C1EAC(uint64_t result, uint64_t a2, int a3, uint64_t (*a4)(uint64_t a1, uint64_t a2), uint64_t (*a5)(uint64_t, uint64_t, void, uint64_t), uint64_t a6)
{
  int v52 = a3;
  uint64_t v53 = result;
  if (!a5) {
    return result;
  }
  if (a4) {
    int v7 = a4;
  }
  else {
    int v7 = sub_18C8C2354;
  }
  long long v57 = v7;
  uint64_t v8 = *(void *)(result + 72);
  if (v8)
  {
    uint64_t v54 = 0;
    uint64_t v9 = v8 + 144128;
    int v50 = *(_DWORD *)(v9 + 32);
    int v10 = *(_DWORD *)(v9 + 36);
  }
  else
  {
    uint64_t v54 = *(void *)result;
    uint64_t v9 = result + 16;
    int v50 = *(unsigned __int16 *)(result + 32);
    int v10 = *(unsigned __int16 *)(result + 34);
  }
  int v55 = v10;
  int v11 = a3;
  uint64_t v12 = *(void *)v9;
  int v13 = *(_DWORD *)(result + 44);
  unsigned int v14 = v57(a6, *(unsigned int *)(result + 36));
  uint64_t v15 = 0;
  BOOL v16 = (int)a2 < v52;
  if ((int)a2 < v52 && v13 > (int)a2)
  {
    unsigned int v51 = v14;
    uint64_t v15 = 0;
    int v17 = -1;
    int v18 = -1;
    uint64_t v19 = a2;
    int v47 = v13;
    while (1)
    {
      uint64_t v20 = (v19 + 2048);
      unsigned int v21 = (int)v20 >= v11 ? v11 : v19 + 2048;
      unsigned int v22 = v19 >> 11;
      if ((int)v19 < 0x10000) {
        break;
      }
      if (v54) {
        int v26 = *(unsigned __int16 *)(v54 + 2 * (v22 + 2080));
      }
      else {
        int v26 = *(_DWORD *)(*(void *)(v53 + 72) + 4 * v22);
      }
      if (v26 != v18 || (int)v19 - (int)a2 <= 2047) {
        goto LABEL_34;
      }
LABEL_73:
      int v11 = v52;
      BOOL v16 = (int)v20 < v52;
      if ((int)v20 < v52)
      {
        uint64_t v19 = v20;
        if ((int)v20 < v47) {
          continue;
        }
      }
      goto LABEL_77;
    }
    if ((v19 & 0x400) != 0) {
      int v23 = 1728;
    }
    else {
      int v23 = 2048;
    }
    if ((v19 & 0x400) != 0) {
      int v24 = 57344;
    }
    else {
      int v24 = 56320;
    }
    if (v24 >= v11) {
      int v24 = v11;
    }
    BOOL v25 = v22 == 27;
    if (v22 == 27) {
      int v26 = v23;
    }
    else {
      int v26 = (int)v19 >> 5;
    }
    if (v25) {
      unsigned int v21 = v24;
    }
LABEL_34:
    if (v26 == v50)
    {
      if (v15 == v51)
      {
        uint64_t v15 = v51;
        int v18 = v50;
      }
      else if ((int)v19 <= (int)a2)
      {
        int v18 = v50;
        uint64_t v15 = v51;
        a2 = v19;
        int v17 = v55;
      }
      else
      {
        uint64_t result = a5(a6, a2, (v19 - 1), v15);
        int v18 = v50;
        uint64_t v15 = v51;
        a2 = v19;
        int v17 = v55;
        if (!result) {
          return result;
        }
      }
    }
    else
    {
      uint64_t v27 = (v19 >> 5) & 0x3F;
      unsigned int v28 = v21 ^ v19;
      unsigned int v29 = (v21 >> 5) & 0x3F;
      if (v28 >= 0x800) {
        uint64_t v30 = 64;
      }
      else {
        uint64_t v30 = v29;
      }
      if (v27 >= v30)
      {
        uint64_t v20 = v19;
        int v18 = v26;
      }
      else
      {
        int v46 = v26;
        uint64_t v31 = v26;
        uint64_t v32 = v54;
        uint64_t v48 = v31;
        uint64_t v49 = v30;
        do
        {
          if (v32) {
            int v33 = 4 * *(unsigned __int16 *)(v32 + 2 * (v27 + v31));
          }
          else {
            int v33 = *(_DWORD *)(*(void *)(v53 + 72) + 4 * (v27 + v31) + 2176);
          }
          if (v33 == v17 && (int)v19 - (int)a2 >= 32)
          {
            uint64_t v19 = (v19 + 32);
          }
          else
          {
            if (v33 == v55)
            {
              if (v15 == v51)
              {
                uint64_t v34 = a2;
              }
              else
              {
                uint64_t v34 = v19;
                if ((int)v19 > (int)a2)
                {
                  uint64_t result = a5(a6, a2, (v19 - 1), v15);
                  uint64_t v34 = v19;
                  if (!result) {
                    return result;
                  }
                }
              }
              uint64_t v19 = (v19 + 32);
              uint64_t v15 = v51;
              a2 = v34;
              int v17 = v55;
            }
            else
            {
              uint64_t v35 = 0;
              uint64_t v36 = (unsigned int *)(v12 + 4 * v33);
              uint64_t v37 = v32 + 2 * v33;
              do
              {
                if (v12) {
                  uint64_t v38 = *v36;
                }
                else {
                  uint64_t v38 = *(unsigned __int16 *)(v37 + v35);
                }
                uint64_t v39 = v57(a6, v38);
                if (v39 != v15)
                {
                  uint64_t v40 = v39;
                  if ((int)a2 >= (int)v19)
                  {
                    uint64_t v15 = v39;
                    a2 = v19;
                  }
                  else
                  {
                    uint64_t result = a5(a6, a2, (v19 - 1), v15);
                    uint64_t v15 = v40;
                    a2 = v19;
                    if (!result) {
                      return result;
                    }
                  }
                }
                uint64_t v19 = (v19 + 1);
                ++v36;
                v35 += 2;
              }
              while (v35 != 64);
              int v17 = v33;
            }
            uint64_t v32 = v54;
            uint64_t v31 = v48;
            uint64_t v30 = v49;
          }
          ++v27;
        }
        while (v27 != v30);
        uint64_t v20 = v19;
        int v18 = v46;
      }
    }
    goto LABEL_73;
  }
  uint64_t v20 = a2;
LABEL_77:
  if ((int)v20 >= v11) {
    int v41 = v11;
  }
  else {
    int v41 = v20;
  }
  if (v16)
  {
    if (v54)
    {
      uint64_t v42 = *(int *)(v53 + 48);
      if (v12) {
        uint64_t v43 = *(unsigned int *)(v12 + 4 * v42);
      }
      else {
        uint64_t v43 = *(unsigned __int16 *)(v54 + 2 * v42);
      }
    }
    else
    {
      uint64_t v43 = *(unsigned int *)(*(void *)(*(void *)(v53 + 72) + 144128)
                            + 4 * *(int *)(*(void *)(v53 + 72) + 144152)
                            - 16);
    }
    uint64_t v45 = v57(a6, v43);
    if (v45 != v15)
    {
      uint64_t v44 = v45;
      if ((int)a2 < (int)v20)
      {
        uint64_t result = a5(a6, a2, (v20 - 1), v15);
        if (!result) {
          return result;
        }
      }
      goto LABEL_90;
    }
    uint64_t v44 = v15;
  }
  else
  {
    uint64_t v44 = v15;
    int v52 = v41;
  }
  uint64_t v20 = a2;
LABEL_90:

  return a5(a6, v20, (v52 - 1), v44);
}

uint64_t utrie2_enumForLeadSurrogate(uint64_t result, unsigned int a2, uint64_t (*a3)(uint64_t a1, uint64_t a2), uint64_t (*a4)(uint64_t, uint64_t, void, uint64_t), uint64_t a5)
{
  if (a2 >> 10 == 54) {
    return sub_18C8C1EAC(result, (a2 << 10) - 56557568, (a2 << 10) - 56556544, a3, a4, a5);
  }
  return result;
}

uint64_t sub_18C8C2354(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *utrie2_open(unsigned int a1, unsigned int a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  uint64_t v3 = uprv_malloc(0x50uLL);
  int v7 = uprv_malloc(0x453C0uLL);
  uint64_t v8 = (char *)uprv_malloc(0x10000uLL);
  uint64_t v9 = v8;
  if (v3 && v7 && v8)
  {
    uint64_t v10 = 0;
    v3[2] = 0u;
    v3[3] = 0u;
    *uint64_t v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 9) = a1;
    *((_DWORD *)v3 + 10) = a2;
    v7[36037] = 0x4000;
    *((_DWORD *)v3 + 11) = 1114112;
    *((void *)v3 + 8) = 0;
    *((void *)v3 + 9) = v7;
    *((void *)v7 + 18016) = v8;
    v7[36034] = a1;
    v7[36035] = a2;
    v7[36042] = 1114112;
    v7[36039] = 0;
    *((unsigned char *)v7 + 144172) = 0;
    int32x4_t v11 = vdupq_n_s32(a1);
    do
    {
      *(int32x4_t *)&v8[v10] = v11;
      v10 += 16;
    }
    while (v10 != 512);
    uint64_t v12 = 0;
    int32x4_t v13 = vdupq_n_s32(a2);
    do
    {
      *(int32x4_t *)&v8[v12 + 512] = v13;
      v12 += 16;
    }
    while (v12 != 256);
    for (uint64_t i = 0; i != 256; i += 16)
      *(int32x4_t *)&v8[i + 768] = v11;
    v7[36038] = 256;
    *((_OWORD *)v7 + 136) = xmmword_18CA875B0;
    *(void *)&long long v15 = 0x100000001;
    *((void *)&v15 + 1) = 0x100000001;
    *((_OWORD *)v7 + 9011) = v15;
    *((void *)v7 + 18024) = 0;
    *((void *)v7 + 18025) = 34845;
    memset_pattern16(v7 + 548, &unk_18CA875E0, 0x2070uLL);
    memset(v7 + 2624, 255, 0x900uLL);
    memset_pattern16(v7 + 3200, &unk_18CA875E0, 0x100uLL);
    uint64_t v16 = 0;
    *((void *)v7 + 18020) = 0xC000000A60;
    v7[36036] = 2720;
    int32x4_t v17 = (int32x4_t)xmmword_18CA875C0;
    v18.i64[0] = 0x10000000100;
    v18.i64[1] = 0x10000000100;
    do
    {
      *(int32x4_t *)&v7[v16] = v17;
      int32x4_t v17 = vaddq_s32(v17, v18);
      v16 += 4;
    }
    while (v16 != 32);
    memset_pattern16(v7 + 32, &unk_18CA875F0, 0x800uLL);
    unsigned int v19 = 96;
    do
    {
      v19 += 32;
      if (*a3 <= 0) {
        sub_18C8C35FC((uint64_t)v7, v19, 1, a1, a3);
      }
    }
    while (v19 < 0x7E0);
  }
  else
  {
    uprv_free(v3);
    uprv_free(v7);
    uprv_free(v9);
    uint64_t v3 = 0;
    *a3 = 7;
  }
  return v3;
}

uint64_t utrie2_set32(uint64_t result, unsigned int a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 < 0x110000) {
      return sub_18C8C35FC(*(void *)(result + 72), a2, 1, a3, a4);
    }
    else {
      *a4 = 1;
    }
  }
  return result;
}

void *utrie2_clone(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  if (!a1 || !*(void *)(a1 + 56) && !*(void *)(a1 + 72))
  {
    uint64_t v2 = 0;
    int v13 = 1;
LABEL_15:
    *a2 = v13;
    return v2;
  }
  int32_t v5 = uprv_malloc(0x50uLL);
  uint64_t v2 = v5;
  if (!v5)
  {
    int v13 = 7;
    goto LABEL_15;
  }
  long long v6 = *(_OWORD *)(a1 + 48);
  v5[2] = *(_OWORD *)(a1 + 32);
  v5[3] = v6;
  v5[4] = *(_OWORD *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 16);
  *int32_t v5 = *(_OWORD *)a1;
  v5[1] = v7;
  if (*(void *)(a1 + 56))
  {
    uint64_t v8 = (char *)uprv_malloc(*(int *)(a1 + 64));
    v2[7] = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      *((unsigned char *)v2 + 68) = 1;
      uint64_t v10 = *(const void **)(a1 + 56);
      memcpy(v8, v10, *(int *)(a1 + 64));
      uint64_t v11 = *(void *)(a1 + 8);
      void *v2 = &v9[*(void *)a1 - (void)v10];
      if (v11) {
        v2[1] = &v9[v11 - (void)v10];
      }
      uint64_t v12 = *(void *)(a1 + 16);
      if (v12) {
        v2[2] = &v9[v12 - (void)v10];
      }
      return v2;
    }
LABEL_25:
    if (v2[9]) {
      return v2;
    }
    *a2 = 7;
    uprv_free(v2);
    return 0;
  }
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v16 = (void **)uprv_malloc(0x453C0uLL);
  int32x4_t v17 = v16;
  if (v16)
  {
    int32x4_t v18 = v16 + 18016;
    unsigned int v19 = uprv_malloc(4 * *(int *)(v15 + 144148));
    *int32x4_t v18 = v19;
    if (v19)
    {
      *((_DWORD *)v17 + 36037) = *(_DWORD *)(v15 + 144148);
      memcpy(v17, (const void *)v15, 0x880uLL);
      uint64_t v20 = *(int *)(v15 + 144144);
      memcpy(v17 + 272, (const void *)(v15 + 2176), 4 * v20);
      *((_DWORD *)v17 + 36040) = *(_DWORD *)(v15 + 144160);
      *((_DWORD *)v17 + 36036) = v20;
      memcpy(*v18, *(const void **)(v15 + 144128), 4 * *(int *)(v15 + 144152));
      *((_DWORD *)v17 + 36041) = *(_DWORD *)(v15 + 144164);
      unint64_t v21 = *(int *)(v15 + 144152);
      *((_DWORD *)v17 + 36038) = v21;
      char v22 = *(unsigned char *)(v15 + 144172);
      if (v22)
      {
        int v23 = 0;
      }
      else
      {
        memcpy(v17 + 18022, (const void *)(v15 + 144176), (v21 >> 3) & 0x1FFFFFFFFFFFFFFCLL);
        int v23 = *(_DWORD *)(v15 + 144156);
      }
      *((_DWORD *)v17 + 36039) = v23;
      v17[18017] = *(void **)(v15 + 144136);
      *((_DWORD *)v17 + 36042) = *(_DWORD *)(v15 + 144168);
      *((unsigned char *)v17 + 144172) = v22;
    }
    else
    {
      uprv_free(v17);
      int32x4_t v17 = 0;
    }
  }
  v2[9] = v17;
  if (!v2[7]) {
    goto LABEL_25;
  }
  return v2;
}

void *utrie2_cloneAsThawed(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  if (!a1) {
    goto LABEL_23;
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 56))
  {
    if (!v5) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (!v5)
  {
LABEL_23:
    uint64_t result = 0;
    *a2 = 1;
    return result;
  }
LABEL_9:
  if (!*(unsigned char *)(v5 + 144172))
  {
    return utrie2_clone(a1, a2);
  }
LABEL_10:
  uint64_t v10 = utrie2_open(*(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 40), a2);
  if (*a2 > 0) {
    return 0;
  }
  uint64_t v11 = *a2;
  utrie2_enum(a1, 0, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_18C8C2988, (uint64_t)&v10);
  int v6 = 0;
  *a2 = v11;
  do
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = (v6 & 0x1F) + 4 * *(unsigned __int16 *)(*(void *)a1 + 2 * ((v6 + 55296) >> 5));
    if (v7) {
      int v9 = *(_DWORD *)(v7 + 4 * v8);
    }
    else {
      int v9 = *(unsigned __int16 *)(*(void *)a1 + 2 * v8);
    }
    if (v9 != *(_DWORD *)(a1 + 36) && *a2 <= 0)
    {
      if ((((_WORD)v6 - 10240) & 0xFC00) == 0xD800) {
        sub_18C8C35FC(*((void *)v10 + 9), v6 + 55296, 0, v9, a2);
      }
      else {
        *a2 = 1;
      }
    }
    ++v6;
  }
  while (v6 != 1024);
  uint64_t result = v10;
  if (*a2 >= 1)
  {
    utrie2_close((uint64_t)v10);
    return 0;
  }
  return result;
}

BOOL sub_18C8C2988(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v5 = *(void *)a1;
  if (*(_DWORD *)(v5 + 36) == a4) {
    return 1;
  }
  unsigned int v7 = a3 - (*(unsigned char *)(a1 + 12) != 0);
  uint64_t v8 = (int *)(a1 + 8);
  if (v7 == a2)
  {
    if (*v8 <= 0)
    {
      if (a2 < 0x110000) {
        sub_18C8C35FC(*(void *)(v5 + 72), a2, 1, a4, v8);
      }
      else {
        *uint64_t v8 = 1;
      }
    }
  }
  else
  {
    utrie2_setRange32(v5, a2, v7, a4, 1, (int *)(a1 + 8));
  }
  return *v8 < 1;
}

uint64_t utrie2_set32ForLeadSurrogateCodeUnit(uint64_t result, unsigned int a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 >> 10 == 54) {
      return sub_18C8C35FC(*(void *)(result + 72), a2, 0, a3, a4);
    }
    else {
      *a4 = 1;
    }
  }
  return result;
}

_OWORD *utrie2_fromUTrie(uint64_t a1, unsigned int a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  if (!a1)
  {
    uint64_t result = 0;
    *a3 = 1;
    return result;
  }
  uint64_t v11 = utrie2_open(*(_DWORD *)(a1 + 32), a2, a3);
  int v6 = *a3;
  if (*a3 > 0) {
    return 0;
  }
  int v13 = 1;
  int v12 = v6;
  utrie_enum(a1, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_18C8C2988, (uint64_t)&v11);
  int v7 = 0;
  *a3 = v12;
  do
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = (v7 & 0x1F) + 4 * *(unsigned __int16 *)(*(void *)a1 + 2 * ((v7 + 55296) >> 5));
    if (v8) {
      int v10 = *(_DWORD *)(v8 + 4 * v9);
    }
    else {
      int v10 = *(unsigned __int16 *)(*(void *)a1 + 2 * v9);
    }
    if (v10 != *(_DWORD *)(a1 + 32) && *a3 <= 0)
    {
      if ((((_WORD)v7 - 10240) & 0xFC00) == 0xD800) {
        sub_18C8C35FC(*((void *)v11 + 9), v7 + 55296, 0, v10, a3);
      }
      else {
        *a3 = 1;
      }
    }
    ++v7;
  }
  while (v7 != 1024);
  uint64_t result = v11;
  if (*a3 > 0 || (utrie2_freeze((uint64_t)v11, *(void *)(a1 + 8) != 0, a3), uint64_t result = v11, *a3 >= 1))
  {
    utrie2_close((uint64_t)result);
    return 0;
  }
  return result;
}

void utrie2_freeze(uint64_t a1, unsigned int a2, int *a3)
{
  if (*a3 > 0) {
    return;
  }
  if (!a1 || a2 >= 2) {
    goto LABEL_11;
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (!v6)
  {
    if ((*(void *)(a1 + 8) == 0) == a2) {
      return;
    }
    goto LABEL_11;
  }
  int v7 = (const void **)(v6 + 144128);
  if (*(unsigned char *)(v6 + 144172))
  {
LABEL_6:
    int v8 = *(_DWORD *)(a1 + 44);
    if (v8 > 0x10000)
    {
      int v10 = *(_DWORD *)(v6 + 144144);
      BOOL v9 = a2 == 0;
      if (a2) {
        signed int v11 = 0;
      }
      else {
        signed int v11 = *(_DWORD *)(v6 + 144144);
      }
      if (v10 >= 0x10000) {
        goto LABEL_101;
      }
    }
    else
    {
      BOOL v9 = a2 == 0;
      int v10 = 2112;
      if (a2) {
        signed int v11 = 0;
      }
      else {
        signed int v11 = 2112;
      }
    }
    if (v11 > 63359
      || *(_DWORD *)(v6 + 144164) + v11 >= 0x10000
      || (int v74 = *(_DWORD *)(v6 + 144152), v74 + v11 >= 262141))
    {
LABEL_101:
      int v12 = 8;
      goto LABEL_102;
    }
    if (v9) {
      char v75 = 1;
    }
    else {
      char v75 = 2;
    }
    int v76 = (v74 << v75) + 2 * v10 + 16;
    uint64_t v77 = (int16x8_t *)uprv_malloc(v76);
    *(void *)(a1 + 56) = v77;
    if (!v77)
    {
      int v12 = 7;
      goto LABEL_102;
    }
    *(_DWORD *)(a1 + 64) = v76;
    *(unsigned char *)(a1 + 68) = 1;
    uint64_t v78 = *(int *)(v6 + 144152);
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 28) = v78;
    if (v8 > 0x10000) {
      int v79 = *(_DWORD *)(v6 + 144160);
    }
    else {
      LOWORD(v79) = -1;
    }
    *(_WORD *)(a1 + 32) = v79;
    __int16 v110 = *(_DWORD *)(v6 + 144164) + v11;
    *(_WORD *)(a1 + 34) = v110;
    *(_DWORD *)(a1 + 48) = v11 + v78 - 4;
    v77->i32[0] = 1416784178;
    v77->i16[2] = a2;
    v77->i16[3] = v10;
    v77->i16[4] = v78 >> 2;
    v77->i16[5] = v79;
    v77->i16[6] = v110;
    v77->i16[7] = v8 >> 11;
    v111 = v77 + 1;
    *(void *)a1 = v77 + 1;
    int32x4_t v112 = vdupq_n_s32(v11);
    uint64_t v113 = -8320;
    do
    {
      *v111++ = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(*(int32x4_t *)(v6 + v113 + 10496), v112), 2uLL), vaddq_s32(*(int32x4_t *)(v6 + v113 + 10512), v112), 2uLL);
      v113 += 32;
    }
    while (v113);
    uint64_t v114 = 0;
    v77[261].i16[0] = v11 + 128;
    v77[261].i16[1] = v11 + 128;
    do
    {
      v77[261].i16[v114 + 2] = *(_WORD *)(v6 + 2 * v114 + 2192) + v11;
      ++v114;
    }
    while (v114 != 30);
    v115 = v77 + 265;
    unsigned int v116 = v8 - 0x10000;
    if (v8 > 0x10000)
    {
      unsigned int v117 = v116 >> 11;
      unsigned int v118 = (v116 >> 11) + 2112;
      if (v116 >= 0x800)
      {
        v119 = (int *)(v6 + 128);
        unsigned int v120 = v117 + 1;
        do
        {
          int v121 = *v119++;
          v115->i16[0] = v121;
          v115 = (int16x8_t *)((char *)v115 + 2);
          --v120;
        }
        while (v120 > 1);
      }
      int v122 = *(_DWORD *)(v6 + 144144);
      if ((int)(v122 - v118) >= 1)
      {
        v123 = (int *)(v6 + 2176 + 4 * v118);
        unsigned int v124 = v122 - v117 - 2111;
        do
        {
          int v125 = *v123++;
          v115->i16[0] = (v125 + v11) >> 2;
          v115 = (int16x8_t *)((char *)v115 + 2);
          --v124;
        }
        while (v124 > 1);
      }
    }
    if (a2 == 1)
    {
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = v115;
      memcpy(v115, *v7, 4 * v78);
      v126 = (void *)*v7;
LABEL_182:
      uprv_free(v126);
      uprv_free((void *)v6);
      *(void *)(a1 + 72) = 0;
      return;
    }
    if (!a2)
    {
      *(void *)(a1 + 8) = v115;
      *(void *)(a1 + 16) = 0;
      v126 = (void *)*v7;
      if ((int)v78 >= 1)
      {
        unsigned int v127 = v78 + 1;
        v128 = (int *)*v7;
        do
        {
          int v129 = *v128++;
          v115->i16[0] = v129;
          v115 = (int16x8_t *)((char *)v115 + 2);
          --v127;
        }
        while (v127 > 1);
      }
      goto LABEL_182;
    }
LABEL_11:
    int v12 = 1;
LABEL_102:
    *a3 = v12;
    return;
  }
  int v13 = utrie2_get32((uint64_t *)a1, 0x10FFFFu);
  int v14 = v13;
  int v15 = *(_DWORD *)(v6 + 144136);
  unsigned int v16 = *(_DWORD *)(v6 + 144164);
  if (v15 == v13) {
    int v17 = *(_DWORD *)(v6 + 144160);
  }
  else {
    int v17 = -1;
  }
  if (v15 == v13) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = 0xFFFFFFFFLL;
  }
  int v19 = 1114112;
  LODWORD(v20) = 544;
  while (1)
  {
    uint64_t v20 = (int)v20 - 1;
    while (1)
    {
      int v21 = *(_DWORD *)(v6 + 4 * v20);
      if (v21 != v17) {
        break;
      }
      --v20;
      BOOL v22 = __OFSUB__(v19, 2048);
      v19 -= 2048;
      if ((v19 < 0) ^ v22 | (v19 == 0))
      {
LABEL_40:
        signed int v29 = 0;
        *(_DWORD *)(v6 + 144168) = 0;
        *(_DWORD *)(a1 + 44) = 0;
        goto LABEL_41;
      }
    }
    if (v21 == *(_DWORD *)(v6 + 144160)) {
      break;
    }
    LODWORD(v23) = 64;
    do
    {
      uint64_t v24 = v18;
      uint64_t v25 = (int)v23;
      while (1)
      {
        uint64_t v23 = v25 - 1;
        uint64_t v18 = *(unsigned int *)(v6 + 2172 + 4 * v21 + 4 * v25);
        if (v18 != v24) {
          break;
        }
        v19 -= 32;
        --v25;
        if (v23 + 1 <= 1)
        {
          uint64_t v18 = v24;
          goto LABEL_39;
        }
      }
      if (v18 != v16)
      {
        uint64_t v26 = 31;
        int v27 = v19;
        while (*((_DWORD *)*v7 + (int)v18 + v26) == v14)
        {
          --v27;
          unint64_t v28 = v26-- + 1;
          if (v28 <= 1) {
            goto LABEL_38;
          }
        }
        goto LABEL_184;
      }
      if (v15 != v14) {
        goto LABEL_183;
      }
LABEL_38:
      v19 -= 32;
    }
    while ((int)v25 >= 2);
LABEL_39:
    int v17 = *(_DWORD *)(v6 + 4 * v20);
    if (v19 <= 0) {
      goto LABEL_40;
    }
  }
  if (v15 == v14)
  {
    v19 -= 2048;
    goto LABEL_39;
  }
LABEL_183:
  int v27 = v19;
LABEL_184:
  signed int v29 = (v27 + 2047) & 0xFFFFF800;
  if (v29 == 1114112)
  {
    int v14 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(v6 + 144168) = 1114112;
    *(_DWORD *)(a1 + 44) = 1114112;
  }
  else
  {
    *(_DWORD *)(v6 + 144168) = v29;
    *(_DWORD *)(a1 + 44) = v29;
    if (v29 < 1114112)
    {
LABEL_41:
      if (v29 <= 0x10000) {
        unsigned int v30 = 0x10000;
      }
      else {
        unsigned int v30 = v29;
      }
      utrie2_setRange32(a1, v30, 0x10FFFFu, *(_DWORD *)(a1 + 36), 1, a3);
      if (*a3 > 0) {
        return;
      }
    }
  }
  uint64_t v31 = 0;
  uint64_t v32 = (_DWORD *)(v6 + 144176);
  do
  {
    *v32++ = v31;
    v31 += 32;
  }
  while (v31 != 192);
  int v33 = *(_DWORD *)(v6 + 144152);
  if (v33 >= 193)
  {
    uint64_t v34 = v6 + 144176;
    uint64_t v35 = v6 + 144180;
    int v36 = 192;
    LODWORD(v37) = 64;
    int v38 = 2;
    int v39 = 192;
    while (1)
    {
      if (v39 == 2176) {
        uint64_t v37 = 32;
      }
      else {
        uint64_t v37 = v37;
      }
      if (v39 == 2176) {
        int v38 = 1;
      }
      if (*(int *)(v6 + 4 * (v39 >> 5) + 144176) > 0)
      {
        uint64_t v40 = (uint64_t)v39 >> 5;
        int v41 = (char *)*v7;
        if (v36 - (int)v37 < 0)
        {
LABEL_74:
          uint64_t v54 = v37 - 4;
          int v55 = v37 - 3;
          while (2)
          {
            uint64_t v56 = v54;
            long long v57 = &v41[4 * (v36 - v54)];
            int v58 = v55;
            long long v59 = &v41[4 * v39];
            while (*(_DWORD *)v57 == *(_DWORD *)v59)
            {
              v57 += 4;
              v59 += 4;
              if (--v58 <= 1) {
                goto LABEL_81;
              }
            }
            uint64_t v54 = v56 - 4;
            v55 -= 4;
            if (v56 >= 5) {
              continue;
            }
            break;
          }
          LODWORD(v56) = v56 - 4;
          if (v36 >= v39)
          {
            uint64_t v72 = (int *)(v34 + 4 * v40);
            int v73 = v38 + 1;
            do
            {
              *v72++ = v39;
              v39 += 32;
              --v73;
              int v36 = v39;
            }
            while (v73 > 1);
            goto LABEL_90;
          }
LABEL_81:
          unint64_t v60 = 0;
          unint64_t v61 = (v38 - 1);
          uint64_t v62 = (v61 + 2) & 0x1FFFFFFFELL;
          uint64x2_t v63 = (uint64x2_t)vdupq_n_s64(v61);
          unsigned int v64 = (_DWORD *)(v35 + 4 * v40);
          int v65 = v36 - v56;
          do
          {
            int32x2_t v66 = vmovn_s64((int64x2_t)vcgeq_u64(v63, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v60), (int8x16_t)xmmword_18CA875D0)));
            if (v66.i8[0]) {
              *(v64 - 1) = v65;
            }
            if (v66.i8[4]) {
              *unsigned int v64 = v65 + 32;
            }
            v60 += 2;
            v64 += 2;
            v65 += 64;
          }
          while (v62 != v60);
          v39 += v56;
          int v67 = v37 - v56;
          if (v67 >= 1)
          {
            uint64_t v68 = &v41[4 * v39];
            unsigned int v69 = v67 + 1;
            uint64_t v70 = &v41[4 * v36];
            do
            {
              int v71 = *(_DWORD *)v68;
              v68 += 4;
              *(_DWORD *)uint64_t v70 = v71;
              v70 += 4;
              ++v39;
              ++v36;
              --v69;
            }
            while (v69 > 1);
          }
LABEL_90:
          int v33 = *(_DWORD *)(v6 + 144152);
          goto LABEL_72;
        }
        int v42 = 0;
        uint64_t v43 = 0;
LABEL_57:
        uint64_t v44 = &v41[4 * v43];
        int v45 = v37 + 1;
        int v46 = &v41[4 * v39];
        do
        {
          if (*(_DWORD *)v44 != *(_DWORD *)v46)
          {
            v43 += 4;
            v42 += 4;
            if (v36 - (int)v37 >= (int)v43) {
              goto LABEL_57;
            }
            goto LABEL_74;
          }
          v44 += 4;
          v46 += 4;
          --v45;
        }
        while (v45 > 1);
        if ((v43 & 0x80000000) != 0) {
          goto LABEL_74;
        }
        unint64_t v47 = 0;
        unint64_t v48 = (v38 - 1);
        uint64_t v49 = (v48 + 2) & 0x1FFFFFFFELL;
        uint64x2_t v50 = (uint64x2_t)vdupq_n_s64(v48);
        uint64_t v51 = v34 + 4 * v40;
        uint64_t v52 = v35 + 4 * v40;
        do
        {
          int32x2_t v53 = vmovn_s64((int64x2_t)vcgeq_u64(v50, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v47), (int8x16_t)xmmword_18CA875D0)));
          if (v53.i8[0]) {
            *(_DWORD *)(v51 + 4 * v47) = v42;
          }
          if (v53.i8[4]) {
            *(_DWORD *)(v52 + 4 * v47) = v42 + 32;
          }
          v47 += 2;
          v42 += 64;
        }
        while (v49 != v47);
        int v33 = *(_DWORD *)(v6 + 144152);
      }
      v39 += v37;
LABEL_72:
      if (v39 >= v33) {
        goto LABEL_111;
      }
    }
  }
  int v36 = 192;
LABEL_111:
  if (*(int *)(v6 + 144144) >= 1)
  {
    int v80 = 0;
    do
    {
      if (v80 == 2080) {
        int v80 = 2656;
      }
      *(_DWORD *)(v6 + 4 * v80 + 2176) = *(_DWORD *)(v6 + 4 * (*(int *)(v6 + 4 * v80 + 2176) >> 5) + 144176);
      ++v80;
    }
    while (v80 < *(_DWORD *)(v6 + 144144));
  }
  *(_DWORD *)(v6 + 144164) = *(_DWORD *)(v6 + 4 * (*(int *)(v6 + 144164) >> 5) + 144176);
  if ((v36 & 3) != 0)
  {
    v81 = (char *)*v7 + 4 * v36;
    do
    {
      *v81++ = *(_DWORD *)(v6 + 144136);
      ++v36;
    }
    while ((v36 & 3) != 0);
  }
  *(_DWORD *)(v6 + 144152) = v36;
  if (v29 > 0x10000)
  {
    uint64_t v82 = 0;
    v83 = (_DWORD *)(v6 + 144176);
    do
    {
      *v83++ = v82;
      v82 += 64;
    }
    while (v82 != 2112);
    int v84 = ((*(_DWORD *)(v6 + 144168) - 0x10000) >> 11) + 2112;
    if (*(int *)(v6 + 144144) >= 2657)
    {
      uint64_t v85 = v6 + 2176;
      int v86 = 2656;
      while (1)
      {
        int v87 = 0;
        int v88 = v86;
        int v89 = v86;
        uint64_t v90 = v86;
LABEL_125:
        if (v84 >= 64) {
          break;
        }
        LODWORD(v90) = v86;
LABEL_136:
        int v95 = 64;
        unint64_t v96 = 63;
        while (2)
        {
          v97 = (_DWORD *)(v85 + 4 * (v84 - v96));
          int v98 = v95;
          v99 = (_DWORD *)(v85 + 4 * v88);
          while (*v97 == *v99)
          {
            ++v97;
            ++v99;
            if (--v98 <= 1)
            {
              *(_DWORD *)(v6 + 4 * ((int)v90 >> 6) + 144176) = v84 - v96;
              if ((int)v96 > 63)
              {
                int v86 = v90 + v96;
                goto LABEL_149;
              }
              goto LABEL_145;
            }
          }
          --v95;
          if (v96-- > 1) {
            continue;
          }
          break;
        }
        v101 = (int *)(v6 + 4 * ((int)v90 >> 6) + 144176);
        if (v84 >= (int)v90)
        {
          int *v101 = v90;
          int v86 = v90 + 64;
          int v84 = v90 + 64;
          goto LABEL_149;
        }
        LODWORD(v96) = 0;
        int *v101 = v84;
LABEL_145:
        v102 = (int *)(v85 + 4 * ((int)v96 + v89));
        v103 = (_DWORD *)(v85 + 4 * v84);
        unsigned int v104 = 65 - v96;
        int v84 = v84 - v96 + 64;
        v86 += (v87 << 6) + 64;
        do
        {
          int v105 = *v102++;
          *v103++ = v105;
          --v104;
        }
        while (v104 > 1);
LABEL_149:
        if (v86 >= *(_DWORD *)(v6 + 144144)) {
          goto LABEL_152;
        }
      }
      uint64_t v91 = 0;
LABEL_127:
      v92 = (_DWORD *)(v85 + 4 * v91);
      unsigned int v93 = 65;
      v94 = (_DWORD *)(v85 + 4 * v90);
      do
      {
        if (*v92 != *v94)
        {
          if (++v91 != v84 - 63) {
            goto LABEL_127;
          }
          int v88 = v90;
          goto LABEL_136;
        }
        ++v92;
        ++v94;
        --v93;
      }
      while (v93 > 1);
      *(_DWORD *)(v6 + 4 * ((int)v90 >> 6) + 144176) = v91;
      v90 += 64;
      v89 += 64;
      ++v87;
      if (v90 < *(int *)(v6 + 144144)) {
        goto LABEL_125;
      }
    }
LABEL_152:
    for (uint64_t i = 0; i != 2176; i += 4)
      *(_DWORD *)(v6 + i) = *(_DWORD *)(v6 + 4 * (*(int *)(v6 + i) >> 6) + 144176);
    *(_DWORD *)(v6 + 144160) = *(_DWORD *)(v6 + 4 * (*(int *)(v6 + 144160) >> 6) + 144176);
    if ((v84 & 3) != 0)
    {
      memset_pattern16((void *)(v6 + 4 * v84 + 2176), &unk_18CA87600, (~(4 * v84) & 0xCu) + 4);
      int v84 = (v84 | 3) + 1;
    }
    *(_DWORD *)(v6 + 144144) = v84;
    int v36 = *(_DWORD *)(v6 + 144152);
  }
  v107 = *v7;
  *(_DWORD *)(v6 + 144152) = v36 + 1;
  v107[v36] = v14;
  while (1)
  {
    int v108 = *(_DWORD *)(v6 + 144152);
    if ((v108 & 3) == 0) {
      break;
    }
    int v109 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(v6 + 144152) = v108 + 1;
    v107[v108] = v109;
  }
  *(unsigned char *)(v6 + 144172) = 1;
  if (*a3 <= 0) {
    goto LABEL_6;
  }
}

uint64_t sub_18C8C35FC(uint64_t result, unsigned int a2, int a3, int a4, int *a5)
{
  if (!result || (uint64_t v6 = (void *)(result + 144128), *(unsigned char *)(result + 144172)))
  {
    int v7 = 30;
LABEL_4:
    *a5 = v7;
    return result;
  }
  char v9 = a2;
  uint64_t result = sub_18C8C3AD0((_DWORD *)result, a2, a3);
  if ((result & 0x80000000) != 0)
  {
    int v7 = 7;
    goto LABEL_4;
  }
  *(_DWORD *)(*v6 + 4 * (result + (v9 & 0x1F))) = a4;
  return result;
}

uint64_t utrie2_setRange32(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int *a6)
{
  if (*a6 <= 0)
  {
    int v7 = a2;
    int v8 = 1;
    if ((int)a2 > (int)a3 || a2 > 0x10FFFF || a3 > 0x10FFFF)
    {
LABEL_8:
      *a6 = v8;
      return result;
    }
    uint64_t v9 = *(void *)(result + 72);
    if (!v9 || (int v10 = (void *)(v9 + 144128), *(unsigned char *)(v9 + 144172)))
    {
      int v8 = 30;
      goto LABEL_8;
    }
    if (a5 || *(_DWORD *)(v9 + 144136) != a4)
    {
      unsigned int v13 = a3 + 1;
      uint64_t v14 = a2 & 0x1F;
      if ((a2 & 0x1F) != 0)
      {
        uint64_t result = sub_18C8C3AD0(*(_DWORD **)(result + 72), a2, 1);
        if ((result & 0x80000000) != 0) {
          goto LABEL_85;
        }
        int v7 = (v7 + 31) & 0xFFFFFFE0;
        uint64_t v15 = *v10 + 4 * result;
        if (v7 > v13)
        {
          unsigned int v16 = v13 & 0x1F;
          unint64_t v17 = v15 + 4 * (v13 & 0x1F);
          uint64_t v18 = (unsigned int *)(v15 + 4 * v14);
          if (a5)
          {
            if (v14 < v16)
            {
              do
                *v18++ = a4;
              while ((unint64_t)v18 < v17);
            }
          }
          else if (v14 < v16)
          {
            int v20 = *(_DWORD *)(v9 + 144136);
            do
            {
              if (*v18 == v20) {
                *uint64_t v18 = a4;
              }
              ++v18;
            }
            while ((unint64_t)v18 < v17);
          }
          return result;
        }
        if (a5)
        {
          uint64_t v19 = 4 * v14;
          do
          {
            *(_DWORD *)(v15 + v19) = a4;
            v19 += 4;
          }
          while (v19 != 128);
        }
        else
        {
          int v21 = *(_DWORD *)(v9 + 144136);
          uint64_t v22 = 4 * v14;
          do
          {
            if (*(_DWORD *)(v15 + v22) == v21) {
              *(_DWORD *)(v15 + v22) = a4;
            }
            v22 += 4;
          }
          while (v22 != 128);
        }
      }
      char v65 = v13;
      signed int v23 = v13 & 0xFFFFFFE0;
      if (*(_DWORD *)(v9 + 144136) == a4) {
        uint64_t result = *(unsigned int *)(v9 + 144164);
      }
      else {
        uint64_t result = 0xFFFFFFFFLL;
      }
      if (v7 < v23)
      {
        uint64_t v24 = v9 + 2176;
        int32x4_t v25 = vdupq_n_s32(a4);
        uint64_t v26 = v9 + 144176;
        int32x4_t v64 = v25;
        do
        {
          unsigned int v27 = v7 & 0xFFFFFC00;
          if (*(_DWORD *)(v9 + 144136) != a4
            || (v27 != 55296
              ? (int v28 = *(_DWORD *)(v9 + 4 * (v7 >> 11)) + ((v7 >> 5) & 0x3F))
              : (int v28 = (v7 >> 5) + 320),
                *(_DWORD *)(v9 + 4 * v28 + 2176) != *(_DWORD *)(v9 + 144164)))
          {
            if (v27 == 55296)
            {
              int v29 = 2048;
            }
            else
            {
              int v30 = *(_DWORD *)(v9 + 4 * (v7 >> 11));
              if (v30 == *(_DWORD *)(v9 + 144160))
              {
                int v29 = *(_DWORD *)(v9 + 144144);
                if (v29 > 35424) {
                  goto LABEL_86;
                }
                *(_DWORD *)(v9 + 144144) = v29 + 64;
                uint64_t v31 = (_OWORD *)(v24 + 4 * v29);
                uint64_t v32 = (long long *)(v24 + 4 * v30);
                long long v33 = *v32;
                long long v34 = v32[1];
                long long v35 = v32[3];
                v31[2] = v32[2];
                v31[3] = v35;
                *uint64_t v31 = v33;
                v31[1] = v34;
                long long v36 = v32[4];
                long long v37 = v32[5];
                long long v38 = v32[7];
                v31[6] = v32[6];
                v31[7] = v38;
                v31[4] = v36;
                v31[5] = v37;
                long long v39 = v32[8];
                long long v40 = v32[9];
                long long v41 = v32[11];
                v31[10] = v32[10];
                v31[11] = v41;
                v31[8] = v39;
                v31[9] = v40;
                long long v42 = v32[12];
                long long v43 = v32[13];
                long long v44 = v32[15];
                v31[14] = v32[14];
                v31[15] = v44;
                v31[12] = v42;
                v31[13] = v43;
                if (v29 < 0)
                {
LABEL_86:
                  int v8 = 5;
                  goto LABEL_8;
                }
                *(_DWORD *)(v9 + 4 * ((uint64_t)v7 >> 11)) = v29;
              }
              else
              {
                int v29 = *(_DWORD *)(v9 + 4 * (v7 >> 11));
                if (v30 < 0) {
                  goto LABEL_86;
                }
              }
            }
            uint64_t v45 = v9 + 4 * (v29 + ((v7 >> 5) & 0x3F));
            uint64_t v46 = *(int *)(v45 + 2176);
            int v47 = *(_DWORD *)(v9 + 144164);
            if (v47 == v46 || *(_DWORD *)(v9 + 4 * ((int)v46 >> 5) + 144176) != 1)
            {
              BOOL v50 = v47 != v46 && a5 == 0;
              int v51 = *(_DWORD *)(*v10 + 4 * v46);
              if (!v50 && v51 != a4)
              {
LABEL_64:
                if ((result & 0x80000000) != 0)
                {
                  uint64_t result = sub_18C8C3AD0((_DWORD *)v9, v7, 1);
                  if ((result & 0x80000000) != 0) {
                    goto LABEL_85;
                  }
                  uint64_t v56 = 0;
                  uint64_t v57 = *v10 + 4 * result;
                  int32x4_t v25 = v64;
                  do
                  {
                    *(int32x4_t *)(v57 + v56) = v64;
                    v56 += 16;
                  }
                  while (v56 != 128);
                }
                else
                {
                  int32x2_t v53 = (int *)(v45 + 2176);
                  ++*(_DWORD *)(v26 + 4 * (result >> 5));
                  int v54 = *v53;
                  int v55 = (_DWORD *)(v26 + 4 * (*v53 >> 5));
                  BOOL v50 = (*v55)-- == 1;
                  if (v50)
                  {
                    *int v55 = -*(_DWORD *)(v9 + 144156);
                    *(_DWORD *)(v9 + 144156) = v54;
                  }
                  *int32x2_t v53 = result;
                }
              }
            }
            else
            {
              if (a5 && (int)v46 > 2175) {
                goto LABEL_64;
              }
              uint64_t v48 = *v10 + 4 * v46;
              uint64_t v49 = 0;
              if (a5)
              {
                do
                {
                  *(int32x4_t *)(v48 + v49) = v25;
                  v49 += 16;
                }
                while (v49 != 128);
              }
              else
              {
                int v58 = (const float *)(v9 + 144136);
                int32x2_t v59 = (int32x2_t)vld1_dup_f32(v58);
                do
                {
                  int32x2_t v60 = vceq_s32(*(int32x2_t *)(v48 + v49), v59);
                  if (v60.i8[0]) {
                    *(_DWORD *)(v48 + v49) = a4;
                  }
                  if (v60.i8[4]) {
                    *(_DWORD *)(v48 + v49 + 4) = a4;
                  }
                  v49 += 8;
                }
                while (v49 != 128);
              }
            }
          }
          v7 += 32;
        }
        while (v7 < v23);
      }
      if ((v65 & 0x1F) == 0) {
        return result;
      }
      uint64_t result = sub_18C8C3AD0((_DWORD *)v9, v7, 1);
      if ((result & 0x80000000) == 0)
      {
        unint64_t v61 = (unsigned int *)(*v10 + 4 * result);
        uint64_t v62 = &v61[v65 & 0x1F];
        if (a5)
        {
          do
            *v61++ = a4;
          while (v61 < v62);
        }
        else
        {
          int v63 = *(_DWORD *)(v9 + 144136);
          do
          {
            if (*v61 == v63) {
              *unint64_t v61 = a4;
            }
            ++v61;
          }
          while (v61 < v62);
        }
        return result;
      }
LABEL_85:
      int v8 = 7;
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_18C8C3AD0(_DWORD *a1, unsigned int a2, int a3)
{
  int v5 = sub_18C8C3C94((uint64_t)a1, a2, a3);
  if (v5 < 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = (const void **)(a1 + 36032);
  int v7 = &a1[v5 + ((a2 >> 5) & 0x3F)];
  int v8 = v7[544];
  if (a1[36041] != v8)
  {
    uint64_t v9 = v7[544];
    if (a1[(v8 >> 5) + 36044] == 1) {
      return v9;
    }
  }
  uint64_t v9 = a1[36039];
  if (v9)
  {
    uint64_t v10 = (uint64_t)(int)v9 >> 5;
    a1[36039] = -a1[((int)v9 >> 5) + 36044];
    goto LABEL_13;
  }
  int v11 = a1[36037];
  uint64_t v9 = a1[36038];
  if ((int)v9 + 32 > v11)
  {
    if (v11 >= 0x20000)
    {
      int v12 = 1115264;
      if (v11 >= 0x110480) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      int v12 = 0x20000;
    }
    unsigned int v13 = uprv_malloc((4 * v12));
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = (void *)*v6;
      memcpy(v13, *v6, 4 * (int)a1[36038]);
      uprv_free(v15);
      *uint64_t v6 = v14;
      a1[36037] = v12;
      goto LABEL_12;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  a1[36038] = v9 + 32;
  uint64_t v10 = (uint64_t)(int)v9 >> 5;
LABEL_13:
  unsigned int v16 = (long long *)((char *)*v6 + 4 * v8);
  long long v17 = *v16;
  long long v18 = v16[1];
  long long v19 = v16[3];
  int v20 = (char *)*v6 + 4 * (int)v9;
  v20[2] = v16[2];
  v20[3] = v19;
  *int v20 = v17;
  v20[1] = v18;
  long long v21 = v16[4];
  long long v22 = v16[5];
  long long v23 = v16[7];
  v20[6] = v16[6];
  v20[7] = v23;
  _OWORD v20[4] = v21;
  v20[5] = v22;
  a1[v10 + 36044] = 0;
  if ((v9 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  ++a1[(v9 >> 5) + 36044];
  int v24 = v7[544];
  int32x4_t v25 = &a1[(v24 >> 5) + 36044];
  if ((*v25)-- == 1)
  {
    *int32x4_t v25 = -a1[36039];
    a1[36039] = v24;
  }
  v7[544] = v9;
  return v9;
}

uint64_t sub_18C8C3C94(uint64_t a1, int a2, int a3)
{
  if (a2 >> 10 == 54 && a3) {
    return 2048;
  }
  int v4 = (_DWORD *)(a1 + 144144);
  uint64_t v5 = *(unsigned int *)(a1 + 4 * (a2 >> 11));
  uint64_t v3 = v5;
  if (v5 == *(_DWORD *)(a1 + 144160))
  {
    uint64_t v3 = *v4;
    if ((int)v3 > 35424) {
      return 0xFFFFFFFFLL;
    }
    *int v4 = v3 + 64;
    uint64_t v6 = (_OWORD *)(a1 + 2176 + 4 * (int)v3);
    int v7 = (long long *)(a1 + 2176 + 4 * (int)v5);
    long long v8 = *v7;
    long long v9 = v7[1];
    long long v10 = v7[3];
    v6[2] = v7[2];
    v6[3] = v10;
    *uint64_t v6 = v8;
    v6[1] = v9;
    long long v11 = v7[4];
    long long v12 = v7[5];
    long long v13 = v7[7];
    v6[6] = v7[6];
    v6[7] = v13;
    v6[4] = v11;
    v6[5] = v12;
    long long v14 = v7[8];
    long long v15 = v7[9];
    long long v16 = v7[11];
    v6[10] = v7[10];
    v6[11] = v16;
    v6[8] = v14;
    v6[9] = v15;
    long long v17 = v7[12];
    long long v18 = v7[13];
    long long v19 = v7[15];
    v6[14] = v7[14];
    v6[15] = v19;
    v6[12] = v17;
    v6[13] = v18;
    if ((v3 & 0x80000000) != 0) {
      return 0xFFFFFFFFLL;
    }
    else {
      *(_DWORD *)(a1 + 4 * ((uint64_t)a2 >> 11)) = v3;
    }
  }
  return v3;
}

uint64_t utrie_swap(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, int *a5)
{
  if (!a5 || *a5 > 0) {
    return 0;
  }
  if (!a1 || !a2 || (a3 & 0x80000000) == 0 && !a4)
  {
    uint64_t v6 = 0;
    int v11 = 1;
LABEL_9:
    *a5 = v11;
    return v6;
  }
  if (a3 <= 0xF)
  {
LABEL_12:
    uint64_t v6 = 0;
    int v11 = 8;
    goto LABEL_9;
  }
  int v13 = (*(uint64_t (**)(void))(a1 + 16))(*a2);
  __int16 v14 = (*(uint64_t (**)(void))(a1 + 16))(a2[1]);
  int Int32 = udata_readInt32(a1, a2[2]);
  int v16 = udata_readInt32(a1, a2[3]);
  if (v13 != 1416784229
    || (v14 & 0xF) != 5
    || (v14 & 0xF0) != 0x20
    || Int32 < 2048
    || (Int32 & 0x1F) != 0
    || (int v17 = v16, v16 < 32)
    || (v16 & 3) != 0
    || (v14 & 0x200) != 0 && v16 <= 0x11F)
  {
    uint64_t v6 = 0;
    int v11 = 3;
    goto LABEL_9;
  }
  if ((v14 & 0x100) != 0) {
    char v18 = 2;
  }
  else {
    char v18 = 1;
  }
  uint64_t v6 = ((v16 << v18) + 2 * Int32 + 16);
  if ((a3 & 0x80000000) == 0)
  {
    if ((int)v6 > a3) {
      goto LABEL_12;
    }
    (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, int *))(a1 + 56))(a1, a2, 16, a4, a5);
    long long v19 = *(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, int *))(a1 + 48);
    int v20 = a2 + 4;
    if ((v14 & 0x100) != 0)
    {
      uint64_t v25 = a4 + 16;
      v19(a1, v20, (2 * Int32), v25, a5);
      long long v19 = *(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, int *))(a1 + 56);
      int v24 = (unsigned int *)((char *)v20 + 2 * Int32);
      uint64_t v21 = (4 * v17);
      uint64_t v22 = v25 + 2 * Int32;
      uint64_t v23 = a1;
    }
    else
    {
      uint64_t v21 = (2 * (v17 + Int32));
      uint64_t v22 = a4 + 16;
      uint64_t v23 = a1;
      int v24 = v20;
    }
    v19(v23, v24, v21, v22, a5);
  }
  return v6;
}

uint64_t utrie2_swap(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4, int *a5)
{
  if (*a5 > 0) {
    return 0;
  }
  if (!a1 || !a2 || (a3 & 0x80000000) == 0 && !a4)
  {
    uint64_t v5 = 0;
    int v11 = 1;
LABEL_8:
    *a5 = v11;
    return v5;
  }
  if (a3 <= 0xF)
  {
LABEL_11:
    uint64_t v5 = 0;
    int v11 = 8;
    goto LABEL_8;
  }
  int v13 = (*(uint64_t (**)(void))(a1 + 16))(*(unsigned int *)a2);
  char v14 = (*(uint64_t (**)(void))(a1 + 8))(a2[2]);
  unsigned int v15 = (*(uint64_t (**)(void))(a1 + 8))(a2[3]);
  unsigned int v16 = (*(uint64_t (**)(void))(a1 + 8))(a2[4]);
  if (v13 != 1416784178) {
    goto LABEL_24;
  }
  unsigned int v17 = v14 & 0xF;
  if (v17 > 1) {
    goto LABEL_24;
  }
  if (v15 < 0x840) {
    goto LABEL_24;
  }
  unsigned int v18 = v16;
  if (v16 <= 0x2F) {
    goto LABEL_24;
  }
  if ((v14 & 0xF) != 0)
  {
    if (v17 == 1)
    {
      char v19 = 4;
      goto LABEL_20;
    }
LABEL_24:
    uint64_t v5 = 0;
    int v11 = 3;
    goto LABEL_8;
  }
  char v19 = 3;
LABEL_20:
  uint64_t v5 = 2 * v15 + 16 + (v16 << v19);
  if ((a3 & 0x80000000) != 0) {
    return v5;
  }
  if (v5 > a3) {
    goto LABEL_11;
  }
  uint64_t v20 = 2 * v15;
  (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t, int *))(a1 + 56))(a1, a2, 4, a4, a5);
  (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t, int *))(a1 + 48))(a1, a2 + 2, 12, a4 + 4, a5);
  if (v17 == 1)
  {
    uint64_t v21 = a2 + 8;
    uint64_t v22 = a4 + 16;
    (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t, int *))(a1 + 48))(a1, v21, v20, v22, a5);
    (*(void (**)(uint64_t, unsigned __int16 *, void, uint64_t, int *))(a1 + 56))(a1, &v21[v15], 16 * v18, v22 + 2 * v15, a5);
  }
  else
  {
    (*(void (**)(uint64_t, unsigned __int16 *, void, uint64_t, int *))(a1 + 48))(a1, a2 + 8, v20 + 8 * v18, a4 + 16, a5);
  }
  return v5;
}

uint64_t ucptrie_swap(uint64_t a1, unsigned __int16 *a2, unsigned int a3, unsigned __int16 *a4, int *a5)
{
  if (*a5 > 0) {
    return 0;
  }
  if (!a1 || !a2 || (a3 & 0x80000000) == 0 && !a4)
  {
    uint64_t v5 = 0;
    int v11 = 1;
LABEL_8:
    *a5 = v11;
    return v5;
  }
  if (a3 <= 0xF)
  {
LABEL_11:
    uint64_t v5 = 0;
    int v11 = 8;
    goto LABEL_8;
  }
  int v13 = (*(uint64_t (**)(void))(a1 + 16))(*(unsigned int *)a2);
  unsigned __int16 v14 = (*(uint64_t (**)(void))(a1 + 8))(a2[2]);
  unsigned int v15 = (*(uint64_t (**)(void))(a1 + 8))(a2[3]);
  int v16 = (*(uint64_t (**)(void))(a1 + 8))(a2[4]);
  int v11 = 3;
  if (v14 >> 6) {
    unsigned int v17 = 64;
  }
  else {
    unsigned int v17 = 1024;
  }
  if (v13 != 1416784179) {
    goto LABEL_27;
  }
  unsigned int v18 = v14 & 7;
  BOOL v19 = (v14 >> 6) <= 1u && (v14 & 0x38) == 0;
  BOOL v20 = !v19 || v18 > 2;
  if (v20 || v17 > v15) {
    goto LABEL_27;
  }
  size_t v22 = v16 & 0xFFF0FFFF | (v14 >> 12 << 16);
  if (v22 <= 0x7F) {
    goto LABEL_27;
  }
  if (v18 == 2)
  {
    unsigned int v23 = v16 & 0xFFF0FFFF | (v14 >> 12 << 16);
  }
  else
  {
    if (v18 != 1)
    {
      if ((v14 & 7) == 0)
      {
        unsigned int v23 = 2 * v22;
        goto LABEL_35;
      }
LABEL_27:
      uint64_t v5 = 0;
      goto LABEL_8;
    }
    unsigned int v23 = 4 * v22;
  }
LABEL_35:
  uint64_t v5 = 2 * v15 + 16 + v23;
  if ((a3 & 0x80000000) != 0) {
    return v5;
  }
  if (v5 > a3) {
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, unsigned __int16 *, int *))(a1 + 56))(a1, a2, 4, a4, a5);
  (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, unsigned __int16 *, int *))(a1 + 48))(a1, a2 + 2, 12, a4 + 2, a5);
  (*(void (**)(uint64_t, unsigned __int16 *, void, unsigned __int16 *, int *))(a1 + 48))(a1, a2 + 8, 2 * v15, a4 + 8, a5);
  int v24 = &a2[v15 + 8];
  uint64_t v25 = (uint64_t)&a4[v15 + 8];
  if (v18 == 2)
  {
    if (a2 != a4) {
      memmove(&a4[v15 + 8], v24, v22);
    }
  }
  else if (v18 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int16 *, void, uint64_t, int *))(a1 + 56))(a1, v24, (4 * v22), v25, a5);
  }
  else
  {
    (*(void (**)(uint64_t, unsigned __int16 *, void, uint64_t, int *))(a1 + 48))(a1, v24, (2 * v22), v25, a5);
  }
  return v5;
}

uint64_t utrie_swapAnyVersion(uint64_t a1, unsigned int *a2, int a3, unsigned __int16 *a4, int *a5)
{
  if (*a5 > 0) {
    return 0;
  }
  if (!a2 || a3 < 16 || (a2 & 3) != 0)
  {
LABEL_14:
    *a5 = 3;
    return 0;
  }
  unsigned int v5 = *a2;
  if ((int)*a2 > 1416784178)
  {
    if (v5 != 1416784179)
    {
      if (v5 == 1701409364 || v5 == 1416784229) {
        return utrie_swap(a1, a2, a3, (uint64_t)a4, a5);
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v5 == 845771348) {
      return utrie2_swap(a1, (unsigned __int16 *)a2, a3, (uint64_t)a4, a5);
    }
    if (v5 != 862548564)
    {
      if (v5 == 1416784178) {
        return utrie2_swap(a1, (unsigned __int16 *)a2, a3, (uint64_t)a4, a5);
      }
      goto LABEL_14;
    }
  }
  return ucptrie_swap(a1, (unsigned __int16 *)a2, a3, a4, a5);
}

void *icu::IDNA::labelToASCII_UTF8(void *result, const char *a2, int32_t a3, icu::ByteSink *a4, uint64_t a5, int *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*a6 <= 0)
  {
    long long v9 = result;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v18 = 0;
    long long v17 = 0u;
    unsigned __int16 v14 = &unk_1EDA47700;
    LOWORD(v15) = 2;
    icu::UnicodeString::fromUTF8(a2, a3, (uint64_t)v13);
    long long v10 = (icu::UnicodeString *)(*(uint64_t (**)(void *, unsigned char *, void **, uint64_t, int *))(*(void *)v9 + 24))(v9, v13, &v14, a5, a6);
    icu::UnicodeString::toUTF8(v10, a4);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v13);
    return icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v14);
  }
  return result;
}

void *icu::IDNA::labelToUnicodeUTF8(void *result, const char *a2, int32_t a3, icu::ByteSink *a4, uint64_t a5, int *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*a6 <= 0)
  {
    long long v9 = result;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v18 = 0;
    long long v17 = 0u;
    unsigned __int16 v14 = &unk_1EDA47700;
    LOWORD(v15) = 2;
    icu::UnicodeString::fromUTF8(a2, a3, (uint64_t)v13);
    long long v10 = (icu::UnicodeString *)(*(uint64_t (**)(void *, unsigned char *, void **, uint64_t, int *))(*(void *)v9 + 32))(v9, v13, &v14, a5, a6);
    icu::UnicodeString::toUTF8(v10, a4);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v13);
    return icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v14);
  }
  return result;
}

void *icu::IDNA::nameToASCII_UTF8(void *result, const char *a2, int32_t a3, icu::ByteSink *a4, uint64_t a5, int *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*a6 <= 0)
  {
    long long v9 = result;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v18 = 0;
    long long v17 = 0u;
    unsigned __int16 v14 = &unk_1EDA47700;
    LOWORD(v15) = 2;
    icu::UnicodeString::fromUTF8(a2, a3, (uint64_t)v13);
    long long v10 = (icu::UnicodeString *)(*(uint64_t (**)(void *, unsigned char *, void **, uint64_t, int *))(*(void *)v9 + 40))(v9, v13, &v14, a5, a6);
    icu::UnicodeString::toUTF8(v10, a4);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v13);
    return icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v14);
  }
  return result;
}

void *icu::IDNA::nameToUnicodeUTF8(void *result, const char *a2, int32_t a3, icu::ByteSink *a4, uint64_t a5, int *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*a6 <= 0)
  {
    long long v9 = result;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v18 = 0;
    long long v17 = 0u;
    unsigned __int16 v14 = &unk_1EDA47700;
    LOWORD(v15) = 2;
    icu::UnicodeString::fromUTF8(a2, a3, (uint64_t)v13);
    long long v10 = (icu::UnicodeString *)(*(uint64_t (**)(void *, unsigned char *, void **, uint64_t, int *))(*(void *)v9 + 48))(v9, v13, &v14, a5, a6);
    icu::UnicodeString::toUTF8(v10, a4);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v13);
    return icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v14);
  }
  return result;
}

uint64_t *icu::IDNA::createUTS46Instance(icu::IDNA *this, int *a2, UErrorCode *a3)
{
  uint64_t v3 = (uint64_t *)*a2;
  if ((int)v3 > 0) {
    return 0;
  }
  int v7 = (int)this;
  long long v8 = icu::UMemory::operator new(v3, (icu::UMemory *)0x18, (unint64_t)a2);
  int v4 = v8;
  if (!v8)
  {
    *a2 = 7;
    return v4;
  }
  *long long v8 = (uint64_t)&unk_1EDA486D8;
  v8[1] = icu::Normalizer2::getInstance(0, "uts46", 0, a2);
  *((_DWORD *)v4 + 4) = v7;
  if (*a2 >= 1)
  {
    (*(void (**)(uint64_t *))(*v4 + 8))(v4);
    return 0;
  }
  return v4;
}

void sub_18C8C4918(icu::UObject *a1)
{
  icu::UObject::~UObject(a1);

  icu::UMemory::operator delete(v1);
}

icu::UnicodeString *sub_18C8C4940(uint64_t a1, uint64_t a2, icu::UnicodeString *this, uint64_t a4, int *a5)
{
  return sub_18C8C4958(a1, a2, 1, 1u, this, a4, a5);
}

icu::UnicodeString *sub_18C8C4958(uint64_t a1, uint64_t a2, int a3, unsigned int a4, icu::UnicodeString *this, uint64_t a6, int *a7)
{
  if (*a7 >= 1) {
    goto LABEL_4;
  }
  __int16 v10 = *(_WORD *)(a2 + 8);
  if ((v10 & 0x11) != 0
    || ((v10 & 2) != 0 ? (long long v12 = (unsigned __int16 *)(a2 + 10)) : (long long v12 = *(unsigned __int16 **)(a2 + 24)),
        this == (icu::UnicodeString *)a2 || !v12))
  {
    *a7 = 1;
LABEL_4:
    icu::UnicodeString::setToBogus(this);
    return this;
  }
  if (*((_WORD *)this + 4)) {
    __int16 v14 = 2;
  }
  else {
    __int16 v14 = *((_WORD *)this + 4) & 0x1F;
  }
  *((_WORD *)this + 4) = v14;
  *(_WORD *)(a6 + 8) = 0;
  *(void *)a6 = 0;
  int v15 = 1;
  *(unsigned char *)(a6 + 10) = 1;
  unsigned int v16 = *(unsigned __int16 *)(a2 + 8);
  int v17 = (__int16)v16;
  unsigned int v18 = v16 >> 5;
  if (v17 >= 0) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = *(unsigned int *)(a2 + 12);
  }
  if (!v19)
  {
LABEL_74:
    *(_DWORD *)a6 = v15;
    return this;
  }
  Buffeunint64_t r = icu::UnicodeString::getBuffer(this, v19);
  if (!Buffer)
  {
    *a7 = 7;
    return this;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v26 = *(_DWORD *)a6;
  int v27 = *(_DWORD *)(a6 + 4);
  int v28 = *(_DWORD *)(a1 + 16) & 2;
  int v29 = v12;
  while (1)
  {
    unsigned int v31 = *v29++;
    uint64_t v30 = v31;
    if (v31 > 0x7F)
    {
LABEL_57:
      uint64_t v38 = v25;
      goto LABEL_58;
    }
    if ((unint64_t)(v30 - 65) <= 0x19)
    {
      *(_WORD *)(Buffer + 2 * v24) = v30 + 32;
      goto LABEL_41;
    }
    if (byte_18CA87628[v30] < 0 && v28) {
      goto LABEL_57;
    }
    *(_WORD *)(Buffer + 2 * v24) = v30;
    if (v30 != 46) {
      break;
    }
    if (a3) {
      goto LABEL_68;
    }
    BOOL v32 = (int)v24 - (int)v25 <= 63 || a4 == 0;
    int v33 = v27 | (v24 == v25);
    if (!v32) {
      v33 |= 2u;
    }
    v26 |= v33;
    *(_DWORD *)(a6 + 4) = 0;
    uint64_t v25 = (v24 + 1);
    int v27 = 0;
LABEL_41:
    ++v24;
    long long v12 = v29;
    if (v19 == v24)
    {
      if (a4)
      {
        unsigned int v34 = v24 - 1;
        if ((int)v19 - (int)v25 >= 64)
        {
          v27 |= 2u;
          *(_DWORD *)(a6 + 4) = v27;
        }
        BOOL v35 = (int)v25 < 254 || v34 > 0xFD;
        int v36 = v26 | 4;
        if (!v35) {
          int v36 = v26;
        }
        if (v34 >= 0xFD) {
          int v37 = v36;
        }
        else {
          int v37 = v26;
        }
        if (!a3) {
          int v26 = v37;
        }
      }
      *(_DWORD *)a6 = v26 | v27;
      icu::UnicodeString::releaseBuffer((uint64_t)this, v19);
      return this;
    }
  }
  if (v30 != 45) {
    goto LABEL_41;
  }
  if (v24 != v25 + 3 || *(v12 - 1) != 45)
  {
    if (v24 == v25)
    {
      v27 |= 8u;
      *(_DWORD *)(a6 + 4) = v27;
    }
    if (v19 - 1 == v24 || v12[1] == 46)
    {
      v27 |= 0x10u;
      *(_DWORD *)(a6 + 4) = v27;
    }
    goto LABEL_41;
  }
LABEL_68:
  uint64_t v38 = v25;
  LODWORD(v24) = v24 + 1;
LABEL_58:
  *(_DWORD *)a6 = v26 | v27;
  icu::UnicodeString::releaseBuffer((uint64_t)this, v24);
  sub_18C8C539C(a1, (icu::UnicodeString *)a2, v38, v24, a3, a4, (uint64_t)this, a6, a7);
  if (*(unsigned char *)(a6 + 9)) {
    BOOL v39 = *a7 <= 0;
  }
  else {
    BOOL v39 = 0;
  }
  if (v39)
  {
    int v40 = *(_DWORD *)a6;
    if ((*(_DWORD *)a6 & 0x7C0) == 0)
    {
      if (!*(unsigned char *)(a6 + 10)
        || (int)v38 >= 1
        && ((__int16 v41 = *((_WORD *)this + 4), (v41 & 0x11) == 0)
          ? ((int v43 = v38, (v41 & 2) != 0)
           ? (long long v42 = (char *)this + 10)
           : (long long v42 = (char *)*((void *)this + 3)))
          : (char *)(long long v42 = 0, v43 = v38),
            !sub_18C8C5738((uint64_t)v42, v43)))
      {
        int v15 = v40 | 0x800;
        goto LABEL_74;
      }
    }
  }
  return this;
}

icu::UnicodeString *sub_18C8C4C70(uint64_t a1, uint64_t a2, icu::UnicodeString *this, uint64_t a4, int *a5)
{
  return sub_18C8C4958(a1, a2, 1, 0, this, a4, a5);
}

icu::UnicodeString *sub_18C8C4C88(uint64_t a1, uint64_t a2, icu::UnicodeString *this, _DWORD *a4, int *a5)
{
  sub_18C8C4958(a1, a2, 0, 1u, this, (uint64_t)a4, a5);
  unsigned int v7 = *((unsigned __int16 *)this + 4);
  int v8 = *((_DWORD *)this + 3);
  if ((v7 & 0x8000u) == 0) {
    int v9 = v7 >> 5;
  }
  else {
    int v9 = *((_DWORD *)this + 3);
  }
  if (v9 >= 254 && (*a4 & 4) == 0)
  {
    if ((v7 & 0x11) != 0)
    {
      __int16 v10 = 0;
    }
    else if ((v7 & 2) != 0)
    {
      __int16 v10 = (unsigned __int16 *)((char *)this + 10);
    }
    else
    {
      __int16 v10 = (unsigned __int16 *)*((void *)this + 3);
    }
    int v11 = &v10[v9];
    while (v10 < v11)
    {
      unsigned int v12 = *v10++;
      if (v12 > 0x7F) {
        return this;
      }
    }
    if ((v7 & 0x8000) != 0)
    {
      if (v8 > 254)
      {
LABEL_24:
        *a4 |= 4u;
        return this;
      }
    }
    else
    {
      int v8 = v7 >> 5;
      if (v7 >> 5 > 0xFE) {
        goto LABEL_24;
      }
    }
    if (v8 < 0xFE) {
      goto LABEL_24;
    }
    int v13 = (v7 & 2) != 0 ? (icu::UnicodeString *)((char *)this + 10) : (icu::UnicodeString *)*((void *)this + 3);
    if (*((_WORD *)v13 + 253) != 46) {
      goto LABEL_24;
    }
  }
  return this;
}

icu::UnicodeString *sub_18C8C4D78(uint64_t a1, uint64_t a2, icu::UnicodeString *this, uint64_t a4, int *a5)
{
  return sub_18C8C4958(a1, a2, 0, 0, this, a4, a5);
}

void *sub_18C8C4D90(void *a1, const char *a2, uint64_t a3, icu::ByteSink *a4, uint64_t a5, int *a6)
{
  return sub_18C8C4DA8(a1, a2, a3, 1, 1u, a4, a5, a6);
}

void *sub_18C8C4DA8(void *result, const char *a2, uint64_t a3, int a4, unsigned int a5, icu::ByteSink *a6, uint64_t a7, int *a8)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  v42[0] = a2;
  v42[1] = a3;
  if (*a8 <= 0)
  {
    uint64_t v15 = (uint64_t)result;
    if (a2 || !a3)
    {
      *(_WORD *)(a7 + 8) = 0;
      *(void *)a7 = 0;
      *(unsigned char *)(a7 + 10) = 1;
      if (a3)
      {
        long long v46 = 0u;
        uint64_t v49 = 0;
        long long v48 = 0u;
        long long v47 = 0u;
        uint64_t v45 = &unk_1EDA47700;
        LOWORD(v46) = 2;
        if ((int)a3 > 256)
        {
          icu::UnicodeString::fromUTF8(a2, a3, (uint64_t)v44);
          sub_18C8C539C(v15, (icu::UnicodeString *)v44, 0, 0, a4, a5, (uint64_t)&v45, a7, a8);
          icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v44);
          LODWORD(v19) = 0;
LABEL_44:
          icu::UnicodeString::toUTF8((icu::UnicodeString *)&v45, a6);
          if (!a4 && a5)
          {
            int v32 = (v46 & 0x8000u) == 0 ? (unsigned __int16)v46 >> 5 : DWORD1(v46);
            if (v32 + (int)v19 >= 254)
            {
              if ((v46 & 0x11) != 0)
              {
                int v33 = 0;
              }
              else if ((v46 & 2) != 0)
              {
                int v33 = (unsigned __int16 *)&v46 + 1;
              }
              else
              {
                int v33 = (unsigned __int16 *)v47;
              }
              unsigned int v34 = &v33[v32];
              while (v33 < v34)
              {
                unsigned int v35 = *v33++;
                if (v35 > 0x7F) {
                  goto LABEL_67;
                }
              }
              if (v32 + (int)v19 > 254
                || (int)v19 <= 253
                && (v32 <= (253 - v19)
                 || ((v46 & 2) != 0 ? (int v36 = (char *)&v46 + 2) : (int v36 = (char *)v47),
                     *(_WORD *)&v36[2 * (253 - v19)] != 46)))
              {
                *(_DWORD *)a7 |= 4u;
              }
            }
          }
LABEL_67:
          int v26 = (void *)*(unsigned __int8 *)(a7 + 9);
          if (*(unsigned char *)(a7 + 9)) {
            BOOL v37 = *a8 <= 0;
          }
          else {
            BOOL v37 = 0;
          }
          if (v37)
          {
            int v38 = *(_DWORD *)a7;
            if ((*(_DWORD *)a7 & 0x7C0) == 0)
            {
              int v26 = (void *)*(unsigned __int8 *)(a7 + 10);
              if (!*(unsigned char *)(a7 + 10) || (int)v19 >= 1 && !sub_18C8C57DC((uint64_t)a2, v19))
              {
                int v26 = (void *)(v38 | 0x800u);
                *(_DWORD *)a7 = v26;
              }
            }
          }
        }
        else
        {
          memset(v44, 0, sizeof(v44));
          int v41 = 0;
          uint64_t v16 = (*(uint64_t (**)(icu::ByteSink *, uint64_t, void, _OWORD *, uint64_t, int *))(*(void *)a6 + 24))(a6, a3, (a3 + 20), v44, 256, &v41);
          uint64_t v17 = v16;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          BOOL v20 = a2 - 1;
          int v21 = *(_DWORD *)(v15 + 16) & 2;
          do
          {
            int v22 = a2[v18];
            if (v22 < 0)
            {
LABEL_43:
              *(_DWORD *)a7 |= *(_DWORD *)(a7 + 4);
              int v29 = v18 - v19;
              icu::UnicodeString::fromUTF8((const char *)(v16 + (int)v19), v18 - v19, (uint64_t)v43);
              icu::UnicodeString::operator=((icu::UnicodeString *)&v45, (icu::UnicodeString *)v43);
              icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v43);
              (*(void (**)(icu::ByteSink *, uint64_t, uint64_t))(*(void *)a6 + 16))(a6, v17, v19);
              icu::StringPiece::StringPiece((uint64_t)&v39, (const icu::StringPiece *)v42, v19);
              icu::UnicodeString::fromUTF8(v39, v40, (uint64_t)v43);
              sub_18C8C539C(v15, (icu::UnicodeString *)v43, 0, v29, a4, a5, (uint64_t)&v45, a7, a8);
              icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v43);
              goto LABEL_44;
            }
            if ((unint64_t)a2[v18] - 65 > 0x19)
            {
              if (byte_18CA87628[a2[v18]] < 0 && v21) {
                goto LABEL_43;
              }
              *(unsigned char *)(v16 + v18) = v22;
              if (v22 == 46)
              {
                if (a4) {
                  goto LABEL_43;
                }
                BOOL v23 = (int)v18 - (int)v19 <= 63 || a5 == 0;
                int v24 = *(_DWORD *)(a7 + 4) | (v18 == v19);
                if (!v23) {
                  v24 |= 2u;
                }
                *(void *)a7 = *(_DWORD *)a7 | v24;
                uint64_t v19 = (v18 + 1);
              }
              else if (v22 == 45)
              {
                if (v18 == v19 + 3 && v20[v18] == 45) {
                  goto LABEL_43;
                }
                if (v18 == v19) {
                  *(_DWORD *)(a7 + 4) |= 8u;
                }
                if (a3 - 1 == v18 || v20[v18 + 2] == 46) {
                  *(_DWORD *)(a7 + 4) |= 0x10u;
                }
              }
            }
            else
            {
              *(unsigned char *)(v16 + v18) = v22 + 32;
            }
            ++v18;
          }
          while (a3 != v18);
          if (a5)
          {
            if ((int)a3 - (int)v19 >= 64) {
              *(_DWORD *)(a7 + 4) |= 2u;
            }
            if (!a4)
            {
              unsigned int v25 = v18 - 1;
              if (v25 >= 0xFD && (v25 > 0xFD || (int)v19 <= 253)) {
                *(_DWORD *)a7 |= 4u;
              }
            }
          }
          *(_DWORD *)a7 |= *(_DWORD *)(a7 + 4);
          (*(void (**)(icu::ByteSink *, uint64_t, uint64_t))(*(void *)a6 + 16))(a6, v16, a3);
          (*(void (**)(icu::ByteSink *))(*(void *)a6 + 32))(a6);
        }
        return icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v45);
      }
      else
      {
        *(_DWORD *)a7 = 1;
        int v27 = *(uint64_t (**)(icu::ByteSink *))(*(void *)a6 + 32);
        return (void *)v27(a6);
      }
    }
    else
    {
      *a8 = 1;
    }
  }
  return result;
}

void *sub_18C8C5354(void *a1, const char *a2, uint64_t a3, icu::ByteSink *a4, uint64_t a5, int *a6)
{
  return sub_18C8C4DA8(a1, a2, a3, 1, 0, a4, a5, a6);
}

void *sub_18C8C536C(void *a1, const char *a2, uint64_t a3, icu::ByteSink *a4, uint64_t a5, int *a6)
{
  return sub_18C8C4DA8(a1, a2, a3, 0, 1u, a4, a5, a6);
}

void *sub_18C8C5384(void *a1, const char *a2, uint64_t a3, icu::ByteSink *a4, uint64_t a5, int *a6)
{
  return sub_18C8C4DA8(a1, a2, a3, 0, 0, a4, a5, a6);
}

uint64_t sub_18C8C539C(uint64_t a1, icu::UnicodeString *this, uint64_t a3, int a4, int a5, unsigned int a6, uint64_t a7, uint64_t a8, int *a9)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(void *)(a1 + 8);
  if (a4)
  {
    icu::UnicodeString::tempSubString(this, a4, 0x7FFFFFFF, (icu::UnicodeString *)v35);
    (*(void (**)(uint64_t, uint64_t, unsigned char *, int *))(*(void *)v15 + 40))(v15, a7, v35, a9);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v35);
  }
  else
  {
    (*(void (**)(void, icu::UnicodeString *, uint64_t, int *))(*(void *)v15 + 24))(*(void *)(a1 + 8), this, a7, a9);
  }
  if (*a9 > 0) {
    return a7;
  }
  if (a6) {
    int v18 = 16;
  }
  else {
    int v18 = 32;
  }
  BOOL v34 = (*(_DWORD *)(a1 + 16) & v18) == 0;
  unsigned int v19 = *(unsigned __int16 *)(a7 + 8);
  if ((v19 & 0x11) != 0)
  {
    uint64_t v20 = 0;
  }
  else if ((v19 & 2) != 0)
  {
    uint64_t v20 = a7 + 10;
  }
  else
  {
    uint64_t v20 = *(void *)(a7 + 24);
  }
  int v21 = (__int16)v19;
  int v22 = v19 >> 5;
  if (v21 >= 0) {
    int v23 = v22;
  }
  else {
    int v23 = *(_DWORD *)(a7 + 12);
  }
  if (v23 <= (int)a3)
  {
    uint64_t v24 = a3;
    if (!a3) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  uint64_t v24 = a3;
  do
  {
    unsigned int v25 = *(unsigned __int16 *)(v20 + 2 * (int)a3);
    if (a5 || v25 != 46)
    {
      if (v25 < 0xDF) {
        goto LABEL_52;
      }
      if (v25 > 0x200D || v25 >> 2 <= 0x802 && v25 != 962 && v25 != 223)
      {
        if ((v25 & 0xF800) == 0xD800)
        {
          if ((v25 & 0x400) == 0)
          {
            if (a3 + 1 != v23)
            {
              int v31 = *(_WORD *)(v20 + 2 * ((int)a3 + 1)) & 0xFC00;
              int v32 = 56320;
              goto LABEL_43;
            }
            goto LABEL_44;
          }
          if (a3 == v24) {
            goto LABEL_44;
          }
          int v31 = *(_WORD *)(v20 + 2 * (int)a3 - 2) & 0xFC00;
          int v32 = 55296;
LABEL_43:
          if (v31 != v32)
          {
LABEL_44:
            *(_DWORD *)(a8 + 4) |= 0x80u;
            icu::UnicodeString::setCharAt((icu::UnicodeString *)a7, a3, 65533);
            __int16 v33 = *(_WORD *)(a7 + 8);
            if ((v33 & 0x11) != 0)
            {
              uint64_t v20 = 0;
            }
            else if ((v33 & 2) != 0)
            {
              uint64_t v20 = a7 + 10;
            }
            else
            {
              uint64_t v20 = *(void *)(a7 + 24);
            }
          }
        }
LABEL_52:
        LODWORD(a3) = a3 + 1;
        continue;
      }
      *(unsigned char *)(a8 + 8) = 1;
      if (!v34) {
        goto LABEL_52;
      }
      int v29 = sub_18C8C6030(a1, (icu::UnicodeString *)a7, v24, a3, a9);
      if (*a9 > 0) {
        return a7;
      }
      int v23 = v29;
      __int16 v30 = *(_WORD *)(a7 + 8);
      if ((v30 & 0x11) != 0)
      {
        BOOL v34 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        BOOL v34 = 0;
        if ((v30 & 2) != 0) {
          uint64_t v20 = a7 + 10;
        }
        else {
          uint64_t v20 = *(void *)(a7 + 24);
        }
      }
    }
    else
    {
      a3 = (a3 - v24);
      int v26 = sub_18C8C588C(a1, (void **)a7, v24, a3, a6, a8, a9);
      *(_DWORD *)a8 |= *(_DWORD *)(a8 + 4);
      *(_DWORD *)(a8 + 4) = 0;
      if (*a9 > 0) {
        return a7;
      }
      __int16 v27 = *(_WORD *)(a7 + 8);
      uint64_t v28 = *(void *)(a7 + 24);
      if ((v27 & 2) != 0) {
        uint64_t v28 = a7 + 10;
      }
      if ((v27 & 0x11) != 0) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = v28;
      }
      int v23 = v23 - a3 + v26;
      uint64_t v24 = (v24 + v26 + 1);
      LODWORD(a3) = v24;
    }
  }
  while ((int)a3 < v23);
  if (!v24)
  {
LABEL_58:
    sub_18C8C588C(a1, (void **)a7, v24, (a3 - v24), a6, a8, a9);
    *(_DWORD *)a8 |= *(_DWORD *)(a8 + 4);
    return a7;
  }
LABEL_57:
  if ((int)a3 > (int)v24) {
    goto LABEL_58;
  }
  return a7;
}

BOOL sub_18C8C5738(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = 0;
    BOOL v3 = 0;
    int v4 = 0;
    while (1)
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 2 * v2);
      if (v5 == 46)
      {
        if (v2 > v4)
        {
          int v6 = *(unsigned __int16 *)(a1 + 2 * v2 - 2);
          unsigned int v7 = v6 - 97;
          unsigned int v8 = v6 - 48;
          if (v7 >= 0x1A && v8 > 9) {
            return v3;
          }
        }
        int v4 = v2 + 1;
      }
      else if (v2 == v4)
      {
        if (v5 - 97 >= 0x1A) {
          return v3;
        }
      }
      else if (v5 <= 0x20 && (v5 > 0x1B || v5 - 9 < 5))
      {
        return v3;
      }
      BOOL v3 = ++v2 >= (unint64_t)a2;
      if (a2 == v2) {
        return v3;
      }
    }
  }
  return 1;
}

BOOL sub_18C8C57DC(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = 0;
    BOOL v3 = 0;
    int v4 = 0;
    while (1)
    {
      int v5 = *(unsigned __int8 *)(a1 + v2);
      if (v5 == 46)
      {
        if (v2 > v4)
        {
          int v6 = *(unsigned __int8 *)(a1 + v2 - 1);
          if ((v6 - 48) >= 0xA && (v6 & 0xFFFFFFDF) - 65 > 0x19) {
            return v3;
          }
        }
        int v4 = v2 + 1;
      }
      else if (v2 == v4)
      {
        if ((v5 & 0xFFFFFFDF) - 65 >= 0x1A) {
          return v3;
        }
      }
      else
      {
        int v8 = (char)v5;
        if ((char)v5 <= 32)
        {
          unsigned int v9 = v5 - 9;
          if (v8 > 27 || v9 < 5) {
            return v3;
          }
        }
      }
      BOOL v3 = ++v2 >= (unint64_t)a2;
      if (a2 == v2) {
        return v3;
      }
    }
  }
  return 1;
}

uint64_t sub_18C8C588C(uint64_t a1, void **this, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int *a7)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (*a7 > 0) {
    return 0;
  }
  uint64_t v7 = a4;
  uint64_t v12 = a1;
  int v13 = 0;
  long long v70 = 0u;
  uint64_t v73 = 0;
  long long v72 = 0u;
  long long v71 = 0u;
  unsigned int v69 = &unk_1EDA47700;
  LOWORD(v70) = 2;
  __int16 v14 = *((_WORD *)this + 4);
  if ((v14 & 0x11) == 0)
  {
    if ((v14 & 2) != 0) {
      int v13 = (char *)this + 10;
    }
    else {
      int v13 = (char *)this[3];
    }
  }
  uint64_t v15 = (unsigned __int16 *)&v13[2 * (int)a3];
  BOOL v16 = (int)a4 < 4;
  int v63 = (icu::UnicodeString *)this;
  if ((int)a4 < 4)
  {
    uint64_t v17 = a4;
    uint64_t v18 = a3;
    unsigned int v19 = this;
    if (a4) {
      goto LABEL_9;
    }
LABEL_119:
    *(_DWORD *)(a6 + 4) |= 1u;
    uint64_t v45 = (icu::UnicodeString *)this;
    uint64_t v46 = a3;
    uint64_t v47 = v7;
    uint64_t v48 = (uint64_t)v19;
    uint64_t v49 = 0;
    goto LABEL_120;
  }
  if (*v15 != 120 || v15[1] != 110 || v15[2] != 45 || v15[3] != 45)
  {
    BOOL v16 = 1;
    uint64_t v17 = a4;
    uint64_t v18 = a3;
    unsigned int v19 = this;
    goto LABEL_21;
  }
  BOOL v61 = (int)a4 < 4;
  if (a4 == 4 || a4 >= 6 && v15[(a4 - 1)] == 45)
  {
    *(_DWORD *)(a6 + 4) |= 0x400u;
LABEL_19:
    int v20 = a3;
    uint64_t v21 = v7;
    int v22 = a5;
    goto LABEL_56;
  }
  Buffeunint64_t r = icu::UnicodeString::getBuffer((icu::UnicodeString *)&v69, -1);
  if (!Buffer) {
    goto LABEL_106;
  }
  LODWORD(v64) = 0;
  int v51 = v15 + 4;
  if ((v70 & 2) != 0) {
    int v52 = 27;
  }
  else {
    int v52 = DWORD2(v70);
  }
  int v53 = u_strFromPunycode(v51, (v7 - 4), Buffer, v52, 0, (int *)&v64);
  if (v64 == 15)
  {
    icu::UnicodeString::releaseBuffer((uint64_t)&v69, 0);
    uint64_t v54 = icu::UnicodeString::getBuffer((icu::UnicodeString *)&v69, v53);
    if (v54)
    {
      LODWORD(v64) = 0;
      if ((v70 & 2) != 0) {
        int v55 = 27;
      }
      else {
        int v55 = DWORD2(v70);
      }
      int v53 = u_strFromPunycode(v51, (v7 - 4), v54, v55, 0, (int *)&v64);
      goto LABEL_103;
    }
LABEL_106:
    uint64_t v36 = 7;
    *a7 = 7;
    goto LABEL_122;
  }
LABEL_103:
  icu::UnicodeString::releaseBuffer((uint64_t)&v69, v53);
  if ((int)v64 >= 1)
  {
    int v56 = *(_DWORD *)(a6 + 4) | 0x100;
LABEL_105:
    *(_DWORD *)(a6 + 4) = v56;
    a1 = v12;
    this = (void **)v63;
    goto LABEL_19;
  }
  int v57 = (*(uint64_t (**)(void, void **, int *))(**(void **)(v12 + 8) + 88))(*(void *)(v12 + 8), &v69, a7);
  uint64_t v36 = *a7;
  if ((int)v36 > 0) {
    goto LABEL_122;
  }
  if (!v57)
  {
    int v56 = *(_DWORD *)(a6 + 4) | 0x400;
    goto LABEL_105;
  }
  BOOL v16 = v61;
  this = (void **)v63;
  if ((v70 & 0x11) != 0)
  {
    uint64_t v15 = 0;
  }
  else if ((v70 & 2) != 0)
  {
    uint64_t v15 = (unsigned __int16 *)&v70 + 1;
  }
  else
  {
    uint64_t v15 = (unsigned __int16 *)v71;
  }
  uint64_t v18 = 0;
  if ((v70 & 0x8000u) == 0) {
    uint64_t v17 = (unsigned __int16)v70 >> 5;
  }
  else {
    uint64_t v17 = DWORD1(v70);
  }
  unsigned int v19 = &v69;
  if (!v17) {
    goto LABEL_119;
  }
LABEL_9:
  if ((int)v17 >= 4)
  {
LABEL_21:
    if (v15[2] == 45 && v15[3] == 45) {
      *(_DWORD *)(a6 + 4) |= 0x20u;
    }
  }
  if (*v15 == 45) {
    *(_DWORD *)(a6 + 4) |= 8u;
  }
  unsigned int v59 = a3;
  int v23 = *(_DWORD *)(a6 + 4);
  if (v15[(int)v17 - 1] == 45)
  {
    v23 |= 0x10u;
    *(_DWORD *)(a6 + 4) = v23;
  }
  unsigned int v24 = 0;
  int v25 = *(_DWORD *)(v12 + 16);
  int v26 = v15;
  do
  {
    uint64_t v27 = *v26;
    if (v27 > 0x7F)
    {
      v24 |= v27;
      if (v27 == 65533)
      {
        v23 |= 0x80u;
        *(_DWORD *)(a6 + 4) = v23;
      }
    }
    else
    {
      if (v27 == 46)
      {
        v23 |= 0x200u;
LABEL_32:
        *(_DWORD *)(a6 + 4) = v23;
        *int v26 = -3;
        goto LABEL_37;
      }
      if ((v25 & 2) != 0 && byte_18CA87628[v27] < 0)
      {
        v23 |= 0x80u;
        goto LABEL_32;
      }
    }
LABEL_37:
    ++v26;
  }
  while (v26 < &v15[(int)v17]);
  BOOL v62 = v16;
  UChar32 v28 = *v15;
  if ((v28 & 0xFC00) == 0xD800)
  {
    UChar32 v28 = v15[1] + (v28 << 10) - 56613888;
    uint64_t v29 = 2;
  }
  else
  {
    uint64_t v29 = 1;
  }
  uint64_t v30 = u_charType(v28);
  if (((1 << v30) & 0x1C0) != 0)
  {
    *(_DWORD *)(a6 + 4) |= 0x40u;
    LOWORD(v64) = -3;
    uint64_t v30 = icu::UnicodeString::doReplace((uint64_t)v19, v18, v29, (uint64_t)&v64, 0, 1);
    __int16 v31 = *((_WORD *)v19 + 4);
    if ((v31 & 0x11) != 0)
    {
      int v32 = 0;
      this = (void **)v63;
    }
    else
    {
      this = (void **)v63;
      if ((v31 & 2) != 0) {
        int v32 = (char *)v19 + 10;
      }
      else {
        int v32 = (char *)v19[3];
      }
    }
    uint64_t v15 = (unsigned __int16 *)&v32[2 * (int)v18];
    int v33 = v17 - v29;
    uint64_t v17 = (v17 - v29 + 1);
    if (v19 == this) {
      uint64_t v7 = (v33 + 1);
    }
    else {
      uint64_t v7 = v7;
    }
  }
  else
  {
    this = (void **)v63;
  }
  int v34 = *(_DWORD *)(a6 + 4);
  if ((v34 & 0x7C0) == 0)
  {
    int v37 = *(_DWORD *)(v12 + 16);
    if ((v37 & 4) != 0)
    {
      BOOL v38 = v62;
      if (!*(unsigned char *)(a6 + 9) || *(unsigned char *)(a6 + 10))
      {
        uint64_t v30 = sub_18C8C6538(v30, v15, v17, a6);
        this = (void **)v63;
        int v37 = *(_DWORD *)(v12 + 16);
      }
    }
    else
    {
      BOOL v38 = v62;
    }
    if ((v37 & 8) != 0 && (v24 & 0x200C) == 0x200C)
    {
      uint64_t v30 = sub_18C8C66EC(v12, (uint64_t)v15, v17);
      this = (void **)v63;
      if (!v30) {
        *(_DWORD *)(a6 + 4) |= 0x1000u;
      }
    }
    if ((*(unsigned char *)(v12 + 16) & 0x40) != 0 && v24 >= 0xB7)
    {
      sub_18C8C6910(v30, (uint64_t)v15, v17, a6);
      this = (void **)v63;
    }
    uint64_t v36 = a5;
    if (!a5) {
      goto LABEL_90;
    }
    if (!v38)
    {
      if ((int)v7 >= 64)
      {
        uint64_t v36 = *(_DWORD *)(a6 + 4) | 2u;
        *(_DWORD *)(a6 + 4) = v36;
      }
      goto LABEL_122;
    }
    if (v24 < 0x80)
    {
      if ((int)v17 >= 64) {
        *(_DWORD *)(a6 + 4) |= 2u;
      }
      goto LABEL_90;
    }
    long long v65 = 0u;
    uint64_t v68 = 0;
    long long v67 = 0u;
    long long v66 = 0u;
    int32x4_t v64 = &unk_1EDA47700;
    LOWORD(v65) = 2;
    BOOL v39 = (void *)icu::UnicodeString::getBuffer((icu::UnicodeString *)&v64, 63);
    if (v39)
    {
      *BOOL v39 = 0x2D002D006E0078;
      if ((v65 & 2) != 0) {
        int v40 = 23;
      }
      else {
        int v40 = DWORD2(v65) - 4;
      }
      int v41 = u_strToPunycode(v15, v17, (uint64_t)(v39 + 1), v40, 0, a7);
      if (*a7 != 15)
      {
LABEL_82:
        icu::UnicodeString::releaseBuffer((uint64_t)&v64, v41 + 4);
        uint64_t v44 = *a7;
        if ((int)v44 <= 0)
        {
          if (v41 >= 60) {
            *(_DWORD *)(a6 + 4) |= 2u;
          }
          uint64_t v7 = sub_18C8C64B0(v63, v59, v7, (uint64_t)&v64, (v41 + 4), a7);
        }
        goto LABEL_92;
      }
      *a7 = 0;
      icu::UnicodeString::releaseBuffer((uint64_t)&v64, 4);
      uint64_t v42 = icu::UnicodeString::getBuffer((icu::UnicodeString *)&v64, v41 + 4);
      if (v42)
      {
        if ((v65 & 2) != 0) {
          int v43 = 23;
        }
        else {
          int v43 = DWORD2(v65) - 4;
        }
        int v41 = u_strToPunycode(v15, v17, v42 + 8, v43, 0, a7);
        goto LABEL_82;
      }
    }
    uint64_t v44 = 7;
    *a7 = 7;
LABEL_92:
    icu::UnicodeString::~UnicodeString((void *)v44, (icu::UnicodeString *)&v64);
    goto LABEL_122;
  }
  if (v62)
  {
LABEL_90:
    uint64_t v45 = (icu::UnicodeString *)this;
    uint64_t v46 = v59;
    uint64_t v47 = v7;
    uint64_t v48 = (uint64_t)v19;
    uint64_t v49 = v17;
LABEL_120:
    uint64_t v35 = sub_18C8C64B0(v45, v46, v47, v48, v49, a7);
    goto LABEL_121;
  }
  *(_DWORD *)(a6 + 4) = v34 | 0x400;
  a1 = v12;
  int v20 = v59;
  int v22 = a5;
  uint64_t v21 = v7;
LABEL_56:
  uint64_t v35 = sub_18C8C634C(a1, (uint64_t)this, v20, v21, v22, a6, a7);
LABEL_121:
  uint64_t v7 = v35;
LABEL_122:
  icu::UnicodeString::~UnicodeString((void *)v36, (icu::UnicodeString *)&v69);
  return v7;
}

uint64_t sub_18C8C6030(uint64_t a1, icu::UnicodeString *this, unsigned int a3, unsigned int a4, int *a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 0;
  }
  signed int v8 = a4;
  unsigned int v12 = *((unsigned __int16 *)this + 4);
  if ((v12 & 0x8000u) == 0) {
    uint64_t v5 = v12 >> 5;
  }
  else {
    uint64_t v5 = *((unsigned int *)this + 3);
  }
  if (v5 <= a4)
  {
    BOOL v14 = 0;
  }
  else
  {
    if ((v12 & 2) != 0) {
      int v13 = (char *)this + 10;
    }
    else {
      int v13 = (char *)*((void *)this + 3);
    }
    BOOL v14 = *(unsigned __int16 *)&v13[2 * a4] == 223;
  }
  Buffeunint64_t r = icu::UnicodeString::getBuffer(this, v14 + (int)v5);
  if (!Buffer)
  {
LABEL_47:
    *a5 = 7;
    return v5;
  }
  uint64_t v16 = Buffer;
  uint64_t v31 = a1;
  unsigned int v32 = a3;
  int v17 = 0;
  if ((*((_WORD *)this + 4) & 2) != 0) {
    int v18 = 27;
  }
  else {
    int v18 = *((_DWORD *)this + 4);
  }
  int v19 = v8;
  do
  {
    signed int v20 = v8 + 1;
    int v21 = *(unsigned __int16 *)(v16 + 2 * v8);
    if ((v21 - 8204) >= 2)
    {
      if (v21 == 962)
      {
        *(_WORD *)(v16 + 2 * v19) = 963;
        int v24 = v19 + 1;
        int v17 = 1;
      }
      else
      {
        if (v21 == 223)
        {
          uint64_t v22 = v19 + 1;
          *(_WORD *)(v16 + 2 * v19) = 115;
          if (v19 == v8)
          {
            if (v5 == v18)
            {
              icu::UnicodeString::releaseBuffer((uint64_t)this, v5);
              uint64_t v23 = icu::UnicodeString::getBuffer(this, (int)v5 + 1);
              if (!v23) {
                goto LABEL_47;
              }
              uint64_t v16 = v23;
              if ((*((_WORD *)this + 4) & 2) != 0) {
                int v18 = 27;
              }
              else {
                int v18 = *((_DWORD *)this + 4);
              }
            }
            u_memmove((UChar *)(v16 + 2 * v22 + 2), (const UChar *)(v16 + 2 * v22), v5 - v22);
            signed int v20 = v8 + 2;
          }
          else
          {
            uint64_t v22 = (int)v22;
          }
          v19 += 2;
          *(_WORD *)(v16 + 2 * v22) = 115;
          uint64_t v5 = (v5 + 1);
          goto LABEL_34;
        }
        *(_WORD *)(v16 + 2 * v19) = v21;
        int v24 = v19 + 1;
      }
      int v19 = v24;
      goto LABEL_35;
    }
    uint64_t v5 = (v5 - 1);
LABEL_34:
    int v17 = 1;
LABEL_35:
    signed int v8 = v20;
  }
  while (v19 < (int)v5);
  icu::UnicodeString::releaseBuffer((uint64_t)this, v5);
  if (v17)
  {
    long long v35 = 0u;
    uint64_t v38 = 0;
    long long v37 = 0u;
    long long v36 = 0u;
    int v34 = &unk_1EDA47700;
    LOWORD(v35) = 2;
    uint64_t v25 = *(void *)(v31 + 8);
    icu::UnicodeString::tempSubString(this, v32, 0x7FFFFFFF, (icu::UnicodeString *)v33);
    (*(void (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v25 + 24))(v25, v33, &v34, a5);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v33);
    unint64_t v27 = *a5;
    if ((int)v27 <= 0)
    {
      if ((v35 & 0x8000u) == 0) {
        uint64_t v28 = (unsigned __int16)v35 >> 5;
      }
      else {
        uint64_t v28 = DWORD1(v35);
      }
      icu::UnicodeString::doReplace(this, v32, 0x7FFFFFFFLL, (const icu::UnicodeString *)&v34, 0, v28);
      unsigned int v29 = *((unsigned __int16 *)this + 4);
      if (v29)
      {
        *a5 = 7;
        unsigned int v29 = *((unsigned __int16 *)this + 4);
      }
      int v30 = (__int16)v29;
      unint64_t v27 = v29 >> 5;
      if (v30 >= 0) {
        uint64_t v5 = v27;
      }
      else {
        uint64_t v5 = *((unsigned int *)this + 3);
      }
    }
    icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)&v34);
  }
  return v5;
}

uint64_t sub_18C8C634C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int *a7)
{
  if (*a7 > 0) {
    return 0;
  }
  uint64_t v7 = a4;
  __int16 v11 = *(_WORD *)(a2 + 8);
  if ((v11 & 0x11) != 0)
  {
    uint64_t v12 = 0;
  }
  else if ((v11 & 2) != 0)
  {
    uint64_t v12 = a2 + 10;
  }
  else
  {
    uint64_t v12 = *(void *)(a2 + 24);
  }
  if ((int)a4 < 5)
  {
LABEL_20:
    __int16 v22 = -3;
    icu::UnicodeString::doReplace(a2, (a4 + a3), 0, (uint64_t)&v22, 0, 1);
    if ((*(_WORD *)(a2 + 8) & 1) == 0) {
      return (v7 + 1);
    }
    uint64_t v7 = 0;
    *a7 = 7;
    return v7;
  }
  uint64_t v13 = v12 + 2 * a3;
  unint64_t v14 = v13 + 2 * (int)a4;
  uint64_t v15 = (_WORD *)(v13 + 8);
  int v16 = *(_DWORD *)(a6 + 4);
  int v17 = 1;
  int v18 = *(_DWORD *)(a1 + 16) & 2;
  int v19 = 1;
  do
  {
    uint64_t v20 = (unsigned __int16)*v15;
    if (v20 > 0x7F)
    {
      int v19 = 0;
      int v17 = 0;
      goto LABEL_18;
    }
    if (v20 == 46)
    {
      v16 |= 0x200u;
      *(_DWORD *)(a6 + 4) = v16;
LABEL_17:
      int v19 = 0;
      int v17 = 0;
      *uint64_t v15 = -3;
      goto LABEL_18;
    }
    int v21 = byte_18CA87628[v20];
    v17 &= ~(v21 >> 31);
    if (v21 < 0 && v18) {
      goto LABEL_17;
    }
LABEL_18:
    ++v15;
  }
  while ((unint64_t)v15 < v14);
  if (v17) {
    goto LABEL_20;
  }
  if ((int)a4 >= 64 && a5 && v19) {
    *(_DWORD *)(a6 + 4) |= 2u;
  }
  return v7;
}

uint64_t sub_18C8C64B0(icu::UnicodeString *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*a6 > 0) {
    return 0;
  }
  uint64_t v6 = a5;
  if ((icu::UnicodeString *)a4 != this)
  {
    unsigned int v10 = *(unsigned __int16 *)(a4 + 8);
    int v11 = (__int16)v10;
    unsigned int v12 = v10 >> 5;
    if (v11 >= 0) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = *(unsigned int *)(a4 + 12);
    }
    icu::UnicodeString::doReplace(this, a2, a3, (const icu::UnicodeString *)a4, 0, v13);
    if (*((_WORD *)this + 4))
    {
      uint64_t v6 = 0;
      *a6 = 7;
    }
  }
  return v6;
}

uint64_t sub_18C8C6538(uint64_t a1, unsigned __int16 *a2, int a3, uint64_t a4)
{
  UChar32 v7 = *a2;
  if ((v7 & 0xFC00) == 0xD800)
  {
    UChar32 v7 = (v7 << 10) - 56613888 + a2[1];
    int v8 = 2;
  }
  else
  {
    int v8 = 1;
  }
  uint64_t result = u_charDirection(v7);
  int v10 = result;
  int v11 = 1 << result;
  if (((1 << result) & 0xFFFFDFFC) != 0) {
    *(unsigned char *)(a4 + 10) = 0;
  }
  do
  {
    if (v8 >= a3)
    {
      int v13 = v11;
      if (v10) {
        goto LABEL_12;
      }
      goto LABEL_14;
    }
    UChar32 v12 = a2[a3 - 1];
    if ((v12 & 0xFC00) == 0xDC00)
    {
      a3 -= 2;
      UChar32 v12 = v12 - 56613888 + (a2[a3] << 10);
    }
    else
    {
      --a3;
    }
    uint64_t result = u_charDirection(v12);
  }
  while (result == 17);
  int v13 = 1 << result;
  if (v10)
  {
LABEL_12:
    int v14 = -8231;
    goto LABEL_15;
  }
LABEL_14:
  int v14 = -6;
LABEL_15:
  if ((v13 & v14) != 0) {
    *(unsigned char *)(a4 + 10) = 0;
  }
  for (int i = v13 | v11; v8 < a3; i |= 1 << result)
  {
    uint64_t v16 = v8 + 1;
    UChar32 v17 = a2[v8];
    if ((v17 & 0xFC00) == 0xD800)
    {
      v8 += 2;
      UChar32 v17 = (v17 << 10) - 56613888 + a2[v16];
    }
    else
    {
      ++v8;
    }
    uint64_t result = u_charDirection(v17);
  }
  if (v10)
  {
    if ((i & 0xFFF9DB81) != 0) {
      *(unsigned char *)(a4 + 10) = 0;
    }
    if ((~i & 0x24) == 0) {
      goto LABEL_26;
    }
  }
  else if ((i & 0xFFF9FBA2) != 0)
  {
LABEL_26:
    *(unsigned char *)(a4 + 10) = 0;
  }
  if ((i & 0x2022) != 0) {
    *(unsigned char *)(a4 + 9) = 1;
  }
  return result;
}

BOOL sub_18C8C66EC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 < 1) {
    return 1;
  }
  unint64_t v6 = 0;
  BOOL v7 = 0;
  int v8 = 0;
  unint64_t v9 = a3;
  while (1)
  {
    int v10 = *(unsigned __int16 *)(a2 + 2 * v6);
    if (v10 != 8205) {
      break;
    }
    if (!v6) {
      return v7;
    }
    uint64_t v13 = a2 + 2 * v6;
    uint64_t v14 = *(unsigned __int16 *)(v13 - 2);
    if ((v14 & 0xFC00) == 0xDC00) {
      uint64_t v14 = (int)v14 - 56613888 + (*(unsigned __int16 *)(v13 - 4) << 10);
    }
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), v14) != 9) {
      return v7;
    }
LABEL_33:
    ++v6;
    ++v8;
    BOOL v7 = v6 >= v9;
    if (v6 == v9) {
      return v7;
    }
  }
  if (v10 != 8204) {
    goto LABEL_33;
  }
  if (!v6) {
    return v7;
  }
  uint64_t v11 = *(unsigned __int16 *)(a2 + 2 * v6 - 2);
  if ((v11 & 0xFC00) == 0xDC00)
  {
    LODWORD(v12) = v6 - 2;
    uint64_t v11 = (int)v11 - 56613888 + (*(unsigned __int16 *)(a2 + 2 * (v6 - 2)) << 10);
  }
  else
  {
    LODWORD(v12) = v8 - 1;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), v11) == 9) {
    goto LABEL_33;
  }
  unsigned int v15 = v11;
  while (1)
  {
    int v16 = sub_18C847324(v15);
    if (v16 != 5) {
      break;
    }
    if (!v12) {
      return v7;
    }
    uint64_t v17 = (int)v12;
    uint64_t v12 = (int)v12 - 1;
    unsigned int v15 = *(unsigned __int16 *)(a2 + 2 * v12);
    if ((v15 & 0xFC00) == 0xDC00)
    {
      LODWORD(v12) = v17 - 2;
      unsigned int v15 = v15 - 56613888 + (*(unsigned __int16 *)(a2 + 2 * (v17 - 2)) << 10);
    }
  }
  if ((v16 & 0xFFFFFFFE) == 2)
  {
    int v18 = v6 + 1;
    while (v18 != a3)
    {
      uint64_t v19 = v18 + 1;
      unsigned int v20 = *(unsigned __int16 *)(a2 + 2 * v18);
      if ((v20 & 0xFC00) == 0xD800)
      {
        v18 += 2;
        unsigned int v20 = (v20 << 10) - 56613888 + *(unsigned __int16 *)(a2 + 2 * v19);
      }
      else
      {
        ++v18;
      }
      int v21 = sub_18C847324(v20);
      if (v21 != 5)
      {
        if (v21 == 2 || v21 == 4) {
          goto LABEL_33;
        }
        return v7;
      }
    }
  }
  return v7;
}

void sub_18C8C6910(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v31 = (a3 - 1);
  if (a3 >= 1)
  {
    unint64_t v7 = 0;
    int v30 = 0;
    uint64_t v8 = a3;
    do
    {
      unsigned int v9 = *(unsigned __int16 *)(a2 + 2 * v7);
      if (v9 >= 0xB7)
      {
        if (v9 > 0x6F9)
        {
          if (v9 == 12539)
          {
            int v11 = 0;
            int v32 = 0;
            while (v11 < a3)
            {
              uint64_t v12 = v11 + 1;
              unsigned int v13 = *(unsigned __int16 *)(a2 + 2 * v11);
              BOOL v14 = (v13 & 0xFC00) != 0xD800 || v12 == a3;
              if (!v14)
              {
                int v15 = *(unsigned __int16 *)(a2 + 2 * v12);
                BOOL v16 = (v15 & 0xFC00) == 56320;
                int v17 = v11 + 2;
                unsigned int v18 = (v13 << 10) - 56613888 + v15;
                if (v16) {
                  unsigned int v13 = v18;
                }
                if (v16) {
                  LODWORD(v12) = v17;
                }
              }
              unsigned int Script = uscript_getScript(v13, &v32);
              BOOL v20 = Script > 0x16 || ((1 << Script) & 0x520000) == 0;
              int v11 = v12;
              if (!v20) {
                goto LABEL_51;
              }
            }
LABEL_50:
            *(_DWORD *)(a4 + 4) |= 0x2000u;
          }
        }
        else
        {
          if (v9 == 885)
          {
            if (v7 < v31)
            {
              int v34 = 0;
              unint64_t v21 = v7 + 2;
              unsigned int v22 = *(unsigned __int16 *)(a2 + 2 * v7 + 2);
              if ((v22 & 0xFC00) == 0xD800 && v21 != v8)
              {
                int v24 = *(unsigned __int16 *)(a2 + 2 * v21);
                BOOL v14 = (v24 & 0xFC00) == 56320;
                unsigned int v25 = (v22 << 10) - 56613888 + v24;
                if (v14) {
                  unsigned int v22 = v25;
                }
              }
              if (uscript_getScript(v22, &v34) == 14) {
                goto LABEL_51;
              }
            }
            goto LABEL_50;
          }
          if (v9 == 183)
          {
            if (v7)
            {
              BOOL v10 = *(_WORD *)(a2 + 2 * (v7 - 1)) != 108 || v7 >= v31;
              if (!v10 && *(_WORD *)(a2 + 2 * v7 + 2) == 108) {
                goto LABEL_51;
              }
            }
            goto LABEL_50;
          }
          if (v9 - 1523 <= 1)
          {
            if (v7)
            {
              int v33 = 0;
              unsigned int v26 = *(unsigned __int16 *)(a2 + 2 * (v7 - 1));
              if (v7 != 1 && (v26 & 0xFC00) == 0xDC00)
              {
                int v27 = *(unsigned __int16 *)(a2 + 2 * (v7 - 2));
                BOOL v14 = (v27 & 0xFC00) == 55296;
                int v28 = v26 - 56613888 + (v27 << 10);
                if (v14) {
                  unsigned int v26 = v28;
                }
              }
              if (uscript_getScript(v26, &v33) == 19) {
                goto LABEL_51;
              }
            }
            goto LABEL_50;
          }
          if (v9 >= 0x660)
          {
            if (v9 <= 0x669)
            {
              if (v30 >= 1) {
                *(_DWORD *)(a4 + 4) |= 0x4000u;
              }
              int v29 = -1;
LABEL_62:
              int v30 = v29;
              goto LABEL_51;
            }
            if (v9 >= 0x6F0)
            {
              if (v30 < 0) {
                *(_DWORD *)(a4 + 4) |= 0x4000u;
              }
              int v29 = 1;
              goto LABEL_62;
            }
          }
        }
      }
LABEL_51:
      ++v7;
    }
    while (v7 != v8);
  }
}

void uidna_close(UIDNA *idna)
{
  if (idna) {
    (*(void (**)(void))(*(void *)idna + 8))();
  }
}

int32_t uidna_labelToASCII(const UIDNA *idna, const UChar *label, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  uint64_t v9 = *(void *)&capacity;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!sub_18C8C6D58((uint64_t)label, length, (uint64_t)dest, capacity, (unsigned __int16 *)pInfo, (int *)pErrorCode))return 0; {
  memset(v23, 0, sizeof(v23));
  }
  unint64_t v21 = label;
  icu::UnicodeString::UnicodeString(v23, length >> 31, &v21);
  v17[1] = v21;
  memset(v22, 0, sizeof(v22));
  icu::UnicodeString::UnicodeString(v22, dest, 0, v9);
  int v20 = 0x10000;
  uint64_t v19 = 0;
  (*(void (**)(const UIDNA *, _OWORD *, _OWORD *, uint64_t *, UErrorCode *))(*(void *)idna + 24))(idna, v23, v22, &v19, pErrorCode);
  pInfo->isTransitionalDifferent = v20;
  pInfo->errors = v19;
  unsigned int v18 = dest;
  int32_t v14 = icu::UnicodeString::extract((uint64_t)v22, &v18, v9, (int *)pErrorCode);
  v17[0] = v18;
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v22);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v23);
  return v14;
}

uint64_t sub_18C8C6D58(uint64_t a1, int a2, uint64_t a3, int a4, unsigned __int16 *a5, int *a6)
{
  if (*a6 > 0) {
    return 0;
  }
  if (!a5 || (__int16)*a5 <= 15) {
    goto LABEL_15;
  }
  if (a1)
  {
    if (a2 < -1) {
      goto LABEL_15;
    }
  }
  else if (a2)
  {
    goto LABEL_15;
  }
  if (a3)
  {
    if (a4 < 0) {
      goto LABEL_15;
    }
  }
  else if (a4)
  {
    goto LABEL_15;
  }
  if (!a1 || a3 != a1)
  {
    bzero(a5 + 1, *a5 - 2);
    return 1;
  }
LABEL_15:
  uint64_t result = 0;
  *a6 = 1;
  return result;
}

int32_t uidna_labelToUnicode(const UIDNA *idna, const UChar *label, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  uint64_t v9 = *(void *)&capacity;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!sub_18C8C6D58((uint64_t)label, length, (uint64_t)dest, capacity, (unsigned __int16 *)pInfo, (int *)pErrorCode))return 0; {
  memset(v23, 0, sizeof(v23));
  }
  unint64_t v21 = label;
  icu::UnicodeString::UnicodeString(v23, length >> 31, &v21);
  v17[1] = v21;
  memset(v22, 0, sizeof(v22));
  icu::UnicodeString::UnicodeString(v22, dest, 0, v9);
  int v20 = 0x10000;
  uint64_t v19 = 0;
  (*(void (**)(const UIDNA *, _OWORD *, _OWORD *, uint64_t *, UErrorCode *))(*(void *)idna + 32))(idna, v23, v22, &v19, pErrorCode);
  pInfo->isTransitionalDifferent = v20;
  pInfo->errors = v19;
  unsigned int v18 = dest;
  int32_t v14 = icu::UnicodeString::extract((uint64_t)v22, &v18, v9, (int *)pErrorCode);
  v17[0] = v18;
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v22);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v23);
  return v14;
}

int32_t uidna_nameToASCII(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  uint64_t v9 = *(void *)&capacity;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!sub_18C8C6D58((uint64_t)name, length, (uint64_t)dest, capacity, (unsigned __int16 *)pInfo, (int *)pErrorCode))return 0; {
  memset(v23, 0, sizeof(v23));
  }
  unint64_t v21 = name;
  icu::UnicodeString::UnicodeString(v23, length >> 31, &v21);
  v17[1] = v21;
  memset(v22, 0, sizeof(v22));
  icu::UnicodeString::UnicodeString(v22, dest, 0, v9);
  int v20 = 0x10000;
  uint64_t v19 = 0;
  (*(void (**)(const UIDNA *, _OWORD *, _OWORD *, uint64_t *, UErrorCode *))(*(void *)idna + 40))(idna, v23, v22, &v19, pErrorCode);
  pInfo->isTransitionalDifferent = v20;
  pInfo->errors = v19;
  unsigned int v18 = dest;
  int32_t v14 = icu::UnicodeString::extract((uint64_t)v22, &v18, v9, (int *)pErrorCode);
  v17[0] = v18;
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v22);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v23);
  return v14;
}

int32_t uidna_nameToUnicode(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  uint64_t v9 = *(void *)&capacity;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!sub_18C8C6D58((uint64_t)name, length, (uint64_t)dest, capacity, (unsigned __int16 *)pInfo, (int *)pErrorCode))return 0; {
  memset(v23, 0, sizeof(v23));
  }
  unint64_t v21 = name;
  icu::UnicodeString::UnicodeString(v23, length >> 31, &v21);
  v17[1] = v21;
  memset(v22, 0, sizeof(v22));
  icu::UnicodeString::UnicodeString(v22, dest, 0, v9);
  int v20 = 0x10000;
  uint64_t v19 = 0;
  (*(void (**)(const UIDNA *, _OWORD *, _OWORD *, uint64_t *, UErrorCode *))(*(void *)idna + 48))(idna, v23, v22, &v19, pErrorCode);
  pInfo->isTransitionalDifferent = v20;
  pInfo->errors = v19;
  unsigned int v18 = dest;
  int32_t v14 = icu::UnicodeString::extract((uint64_t)v22, &v18, v9, (int *)pErrorCode);
  v17[0] = v18;
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v22);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v23);
  return v14;
}

int32_t uidna_labelToASCII_UTF8(const UIDNA *idna, const char *label, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  unsigned int v11 = length;
  if (!sub_18C8C6D58((uint64_t)label, length, (uint64_t)dest, capacity, (unsigned __int16 *)pInfo, (int *)pErrorCode))return 0; {
  if ((v11 & 0x80000000) != 0)
  }
    unsigned int v11 = strlen(label);
  long long v18 = 0u;
  long long v19 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v18, dest, capacity);
  int v17 = 0x10000;
  uint64_t v16 = 0;
  (*(void (**)(const UIDNA *, const char *, void, long long *, uint64_t *, UErrorCode *))(*(void *)idna + 56))(idna, label, v11, &v18, &v16, pErrorCode);
  pInfo->isTransitionalDifferent = v17;
  pInfo->errors = v16;
  int32_t v14 = u_terminateChars((uint64_t)dest, capacity, DWORD2(v19), (int *)pErrorCode);
  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v18);
  return v14;
}

int32_t uidna_labelToUnicodeUTF8(const UIDNA *idna, const char *label, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  unsigned int v11 = length;
  if (!sub_18C8C6D58((uint64_t)label, length, (uint64_t)dest, capacity, (unsigned __int16 *)pInfo, (int *)pErrorCode))return 0; {
  if ((v11 & 0x80000000) != 0)
  }
    unsigned int v11 = strlen(label);
  long long v18 = 0u;
  long long v19 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v18, dest, capacity);
  int v17 = 0x10000;
  uint64_t v16 = 0;
  (*(void (**)(const UIDNA *, const char *, void, long long *, uint64_t *, UErrorCode *))(*(void *)idna + 64))(idna, label, v11, &v18, &v16, pErrorCode);
  pInfo->isTransitionalDifferent = v17;
  pInfo->errors = v16;
  int32_t v14 = u_terminateChars((uint64_t)dest, capacity, DWORD2(v19), (int *)pErrorCode);
  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v18);
  return v14;
}

int32_t uidna_nameToASCII_UTF8(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  unsigned int v11 = length;
  if (!sub_18C8C6D58((uint64_t)name, length, (uint64_t)dest, capacity, (unsigned __int16 *)pInfo, (int *)pErrorCode))return 0; {
  if ((v11 & 0x80000000) != 0)
  }
    unsigned int v11 = strlen(name);
  long long v18 = 0u;
  long long v19 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v18, dest, capacity);
  int v17 = 0x10000;
  uint64_t v16 = 0;
  (*(void (**)(const UIDNA *, const char *, void, long long *, uint64_t *, UErrorCode *))(*(void *)idna + 72))(idna, name, v11, &v18, &v16, pErrorCode);
  pInfo->isTransitionalDifferent = v17;
  pInfo->errors = v16;
  int32_t v14 = u_terminateChars((uint64_t)dest, capacity, DWORD2(v19), (int *)pErrorCode);
  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v18);
  return v14;
}

int32_t uidna_nameToUnicodeUTF8(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  unsigned int v11 = length;
  if (!sub_18C8C6D58((uint64_t)name, length, (uint64_t)dest, capacity, (unsigned __int16 *)pInfo, (int *)pErrorCode))return 0; {
  if ((v11 & 0x80000000) != 0)
  }
    unsigned int v11 = strlen(name);
  long long v18 = 0u;
  long long v19 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v18, dest, capacity);
  int v17 = 0x10000;
  uint64_t v16 = 0;
  (*(void (**)(const UIDNA *, const char *, void, long long *, uint64_t *, UErrorCode *))(*(void *)idna + 80))(idna, name, v11, &v18, &v16, pErrorCode);
  pInfo->isTransitionalDifferent = v17;
  pInfo->errors = v16;
  int32_t v14 = u_terminateChars((uint64_t)dest, capacity, DWORD2(v19), (int *)pErrorCode);
  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v18);
  return v14;
}

const char *__cdecl u_errorName(UErrorCode code)
{
  if (code <= U_INPUT_TOO_LONG_ERROR)
  {
    int v1 = &off_1E5508A28[code];
    return *v1;
  }
  unsigned __int32 v2 = code + 128;
  if ((code + 128) <= 8)
  {
    BOOL v3 = off_1E5508B28;
LABEL_7:
    int v1 = &v3[v2];
    return *v1;
  }
  unsigned __int32 v2 = code - 0x10000;
  if ((code - 0x10000) <= 0x22)
  {
    BOOL v3 = off_1E5508B70;
    goto LABEL_7;
  }
  unsigned __int32 v5 = code - 65792;
  if ((code - 65792) <= 0x13)
  {
    unint64_t v6 = off_1E5508C88;
LABEL_17:
    int v1 = &v6[v5];
    return *v1;
  }
  if ((code - 66048) <= 0xD)
  {
    int v1 = &off_1E5508D28[code - 66048];
    return *v1;
  }
  unsigned __int32 v5 = code - 66304;
  if ((code - 66304) <= 0x15)
  {
    unint64_t v6 = off_1E5508D98;
    goto LABEL_17;
  }
  unsigned __int32 v5 = code - 66560;
  if ((code - 66560) <= 8)
  {
    unint64_t v6 = off_1E5508E48;
    goto LABEL_17;
  }
  if (code >> 1 == 33408)
  {
    unsigned __int32 v2 = code - 66816;
    BOOL v3 = off_1E5508E90;
    goto LABEL_7;
  }
  return "[BOGUS UErrorCode]";
}

void *icu::UVector::getStaticClassID(icu::UVector *this)
{
  return &unk_1E9191FD4;
}

void *icu::UVector::getDynamicClassID(icu::UVector *this)
{
  return &unk_1E9191FD4;
}

uint64_t icu::UVector::UVector(icu::UVector *this, UErrorCode *a2)
{
  return icu::UVector::UVector((uint64_t)this, 0, 0, 8u, (int *)a2);
}

{
  return icu::UVector::UVector((uint64_t)this, 0, 0, 8u, (int *)a2);
}

uint64_t icu::UVector::UVector(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int *a5)
{
  *(void *)a1 = &unk_1EDA487D8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  if (*a5 <= 0)
  {
    if (a4 - 0x10000000 >= 0xF0000001) {
      unsigned int v7 = a4;
    }
    else {
      unsigned int v7 = 8;
    }
    uint64_t v8 = uprv_malloc(8 * v7);
    *(void *)(a1 + 16) = v8;
    if (v8) {
      *(_DWORD *)(a1 + 12) = v7;
    }
    else {
      *a5 = 7;
    }
  }
  return a1;
}

uint64_t icu::UVector::UVector(icu::UVector *this, unsigned int a2, UErrorCode *a3)
{
  return icu::UVector::UVector((uint64_t)this, 0, 0, a2, (int *)a3);
}

{
  return icu::UVector::UVector((uint64_t)this, 0, 0, a2, (int *)a3);
}

uint64_t icu::UVector::UVector(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return icu::UVector::UVector(a1, a2, a3, 8u, a4);
}

{
  return icu::UVector::UVector(a1, a2, a3, 8u, a4);
}

void icu::UVector::~UVector(void **this)
{
  *this = &unk_1EDA487D8;
  icu::UVector::removeAllElements((uint64_t)this);
  uprv_free(this[2]);
  this[2] = 0;

  icu::UObject::~UObject((icu::UObject *)this);
}

{
  void *v1;
  uint64_t vars8;

  icu::UVector::~UVector(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::UVector::removeAllElements(uint64_t this)
{
  uint64_t v1 = this;
  if (*(void *)(this + 24))
  {
    int v2 = *(_DWORD *)(this + 8);
    if (v2 >= 1)
    {
      for (uint64_t i = 0; i < v2; ++i)
      {
        this = *(void *)(*(void *)(v1 + 16) + 8 * i);
        if (this)
        {
          this = (*(uint64_t (**)(void))(v1 + 24))();
          int v2 = *(_DWORD *)(v1 + 8);
        }
      }
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return this;
}

uint64_t icu::UVector::assign(icu::UVector *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), UErrorCode *a4)
{
  uint64_t result = icu::UVector::ensureCapacity(a1, *(_DWORD *)(a2 + 8), a4);
  if (result)
  {
    uint64_t result = icu::UVector::setSize((uint64_t (**)(void))a1, *(_DWORD *)(a2 + 8), a4);
    if (*(int *)a4 <= 0 && *(_DWORD *)(a2 + 8) >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = *((void *)a1 + 2);
        if (*(void *)(v12 + v10))
        {
          unsigned int v13 = (void (*)(void))*((void *)a1 + 3);
          if (v13)
          {
            v13();
            uint64_t v12 = *((void *)a1 + 2);
          }
        }
        uint64_t result = a3(v12 + v10, *(void *)(a2 + 16) + v10);
        ++v11;
        v10 += 8;
      }
      while (v11 < *(int *)(a2 + 8));
    }
  }
  return result;
}

uint64_t icu::UVector::ensureCapacity(icu::UVector *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  if (a2 < 0) {
    goto LABEL_10;
  }
  int v6 = *((_DWORD *)this + 3);
  if (v6 < a2)
  {
    if (v6 >= 0x40000000 || ((v7 = 2 * v6, v7 <= a2) ? (unsigned int v8 = a2) : (unsigned int v8 = v7), v8 >> 28))
    {
LABEL_10:
      uint64_t result = 0;
      UErrorCode v9 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_11:
      *a3 = v9;
      return result;
    }
    uint64_t result = (uint64_t)uprv_realloc(*((void **)this + 2), 8 * v8);
    if (!result)
    {
      UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_11;
    }
    *((void *)this + 2) = result;
    *((_DWORD *)this + 3) = v8;
  }
  return 1;
}

uint64_t icu::UVector::setSize(uint64_t (**this)(void), int a2, UErrorCode *a3)
{
  uint64_t result = icu::UVector::ensureCapacity((icu::UVector *)this, a2, a3);
  if (result)
  {
    int v6 = *((_DWORD *)this + 2);
    BOOL v7 = v6 <= a2;
    if (v6 >= a2)
    {
      while (!v7)
      {
        uint64_t result = icu::UVector::orphanElementAt((icu::UVector *)this, --v6);
        if (result)
        {
          UErrorCode v9 = this[3];
          if (v9) {
            uint64_t result = v9();
          }
        }
        BOOL v7 = v6 <= a2;
      }
    }
    else
    {
      uint64_t v8 = v6;
      do
        *((void *)this[2] + v8++) = 0;
      while (a2 != v8);
    }
    *((_DWORD *)this + 2) = a2;
  }
  return result;
}

BOOL icu::UVector::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    return 0;
  }
  if (*(void *)(a1 + 32)) {
    BOOL v4 = v2 < 1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 1;
  }
  uint64_t v7 = 0;
  do
  {
    int v8 = (*(uint64_t (**)(void, void))(a1 + 32))(*(void *)(*(void *)(a1 + 16) + 8 * v7), *(void *)(*(void *)(a2 + 16) + 8 * v7));
    BOOL result = v8 != 0;
    if (!v8) {
      break;
    }
    ++v7;
  }
  while (v7 < *(int *)(a1 + 8));
  return result;
}

uint64_t icu::UVector::addElement(icu::UVector *this, void *a2, UErrorCode *a3)
{
  uint64_t result = icu::UVector::ensureCapacity(this, *((_DWORD *)this + 2) + 1, a3);
  if (result)
  {
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = *((int *)this + 2);
    *((_DWORD *)this + 2) = v7 + 1;
    *(void *)(v6 + 8 * v7) = a2;
  }
  return result;
}

uint64_t icu::UVector::adoptElement(uint64_t (**this)(void *), void *a2, UErrorCode *a3)
{
  uint64_t result = icu::UVector::ensureCapacity((icu::UVector *)this, *((_DWORD *)this + 2) + 1, a3);
  if (result)
  {
    uint64_t v6 = this[2];
    uint64_t v7 = *((int *)this + 2);
    *((_DWORD *)this + 2) = v7 + 1;
    *((void *)v6 + v7) = a2;
  }
  else
  {
    int v8 = this[3];
    return v8(a2);
  }
  return result;
}

uint64_t icu::UVector::addElement(icu::UVector *this, int a2, UErrorCode *a3)
{
  uint64_t result = icu::UVector::ensureCapacity(this, *((_DWORD *)this + 2) + 1, a3);
  if (result)
  {
    *(void *)(*((void *)this + 2) + 8 * *((int *)this + 2)) = 0;
    *(_DWORD *)(*((void *)this + 2) + 8 * (int)(*((_DWORD *)this + 2))++) = a2;
  }
  return result;
}

uint64_t icu::UVector::setElementAt(uint64_t this, void *a2, unsigned int a3)
{
  uint64_t v4 = this;
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(this + 8) <= (signed int)a3)
  {
    int v8 = *(uint64_t (**)(void *))(this + 24);
    if (v8)
    {
      return v8(a2);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(this + 16);
    uint64_t v6 = a3;
    this = *(void *)(v5 + 8 * a3);
    if (this)
    {
      uint64_t v7 = *(uint64_t (**)(void))(v4 + 24);
      if (v7)
      {
        this = v7();
        uint64_t v5 = *(void *)(v4 + 16);
      }
    }
    *(void *)(v5 + 8 * v6) = a2;
  }
  return this;
}

uint64_t icu::UVector::setElementAt(uint64_t this, int a2, unsigned int a3)
{
  if ((a3 & 0x80000000) == 0 && *(_DWORD *)(this + 8) > (signed int)a3)
  {
    *(void *)(*(void *)(this + 16) + 8 * a3) = 0;
    *(_DWORD *)(*(void *)(this + 16) + 8 * a3) = a2;
  }
  return this;
}

uint64_t icu::UVector::insertElementAt(uint64_t (**this)(void *), void *a2, signed int a3, UErrorCode *a4)
{
  uint64_t result = icu::UVector::ensureCapacity((icu::UVector *)this, *((_DWORD *)this + 2) + 1, a4);
  if (!result) {
    goto LABEL_8;
  }
  if ((a3 & 0x80000000) == 0)
  {
    signed int v9 = *((_DWORD *)this + 2);
    if (v9 >= a3)
    {
      for (; v9 > a3; --v9)
        *((void *)this[2] + v9) = *((void *)this[2] + (v9 - 1));
      *((void *)this[2] + a3) = a2;
      ++*((_DWORD *)this + 2);
LABEL_8:
      if (*(int *)a4 < 1) {
        return result;
      }
      goto LABEL_9;
    }
  }
  *a4 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
  uint64_t v10 = this[3];
  if (v10)
  {
    return v10(a2);
  }
  return result;
}

uint64_t icu::UVector::insertElementAt(icu::UVector *this, int a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t result = icu::UVector::ensureCapacity(this, *((_DWORD *)this + 2) + 1, a4);
  if (result)
  {
    if ((a3 & 0x80000000) != 0 || (signed int v9 = *((_DWORD *)this + 2), v9 < (int)a3))
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      for (; v9 > (int)a3; --v9)
        *(void *)(*((void *)this + 2) + 8 * v9) = *(void *)(*((void *)this + 2)
                                                                                + 8 * (v9 - 1));
      *(void *)(*((void *)this + 2) + 8 * a3) = 0;
      *(_DWORD *)(*((void *)this + 2) + 8 * a3) = a2;
      ++*((_DWORD *)this + 2);
    }
  }
  return result;
}

uint64_t icu::UVector::elementAt(icu::UVector *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 2) <= (signed int)a2) {
    return 0;
  }
  else {
    return *(void *)(*((void *)this + 2) + 8 * a2);
  }
}

uint64_t icu::UVector::elementAti(icu::UVector *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 2) <= (signed int)a2) {
    return 0;
  }
  else {
    return *(unsigned int *)(*((void *)this + 2) + 8 * a2);
  }
}

BOOL icu::UVector::containsAll(icu::UVector *this, const icu::UVector *a2)
{
  if (*((int *)a2 + 2) < 1) {
    return 1;
  }
  uint64_t v4 = 0;
  do
  {
    int v5 = icu::UVector::indexOf((uint64_t)this, *(void *)(*((void *)a2 + 2) + 8 * v4), 0, 0);
    BOOL result = v5 >= 0;
    if (v5 < 0) {
      break;
    }
    ++v4;
  }
  while (v4 < *((int *)a2 + 2));
  return result;
}

uint64_t icu::UVector::indexOf(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (!*(void *)(a1 + 32))
  {
    int v7 = *(_DWORD *)(a1 + 8);
    if (v7 > (int)a3)
    {
      int v8 = (void *)(*(void *)(a1 + 16) + 8 * (int)a3);
      do
      {
        if (a4)
        {
          if (*v8 == a2) {
            return a3;
          }
        }
        else if (*(_DWORD *)v8 == a2)
        {
          return a3;
        }
        a3 = (a3 + 1);
        ++v8;
      }
      while (v7 != a3);
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 8) <= (int)a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = (int)a3;
  while (!(*(unsigned int (**)(uint64_t, void))(a1 + 32))(a2, *(void *)(*(void *)(a1 + 16) + 8 * v6)))
  {
    if (++v6 >= *(int *)(a1 + 8)) {
      return 0xFFFFFFFFLL;
    }
  }
  return v6;
}

uint64_t icu::UVector::containsNone(icu::UVector *this, const icu::UVector *a2)
{
  if (*((int *)a2 + 2) < 1) {
    return 1;
  }
  uint64_t v4 = 0;
  do
  {
    unsigned int v5 = icu::UVector::indexOf((uint64_t)this, *(void *)(*((void *)a2 + 2) + 8 * v4), 0, 0);
    uint64_t result = v5 >> 31;
    if ((v5 & 0x80000000) == 0) {
      break;
    }
    ++v4;
  }
  while (v4 < *((int *)a2 + 2));
  return result;
}

uint64_t icu::UVector::removeAll(icu::UVector *this, const icu::UVector *a2)
{
  if (*((int *)a2 + 2) < 1)
  {
    return 0;
  }
  else
  {
    uint64_t v4 = 0;
    char v5 = 0;
    do
    {
      int v6 = icu::UVector::indexOf((uint64_t)this, *(void *)(*((void *)a2 + 2) + 8 * v4), 0, 0);
      if ((v6 & 0x80000000) == 0)
      {
        if (icu::UVector::orphanElementAt(this, v6))
        {
          int v7 = (void (*)(void))*((void *)this + 3);
          if (v7) {
            v7();
          }
        }
        char v5 = 1;
      }
      ++v4;
    }
    while (v4 < *((int *)a2 + 2));
  }
  return v5;
}

uint64_t icu::UVector::removeElementAt(uint64_t (**this)(void), int a2)
{
  uint64_t result = icu::UVector::orphanElementAt((icu::UVector *)this, a2);
  if (result)
  {
    uint64_t v4 = this[3];
    if (v4)
    {
      return v4();
    }
  }
  return result;
}

uint64_t icu::UVector::retainAll(icu::UVector *this, const icu::UVector *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if ((int)v2 < 1)
  {
    return 0;
  }
  else
  {
    char v5 = 0;
    uint64_t v6 = v2 + 1;
    unsigned int v7 = v2 - 1;
    do
    {
      if ((icu::UVector::indexOf((uint64_t)a2, *(void *)(*((void *)this + 2) + 8 * v7), 0, 0) & 0x80000000) != 0)
      {
        if (icu::UVector::orphanElementAt(this, v7))
        {
          int v8 = (void (*)(void))*((void *)this + 3);
          if (v8) {
            v8();
          }
        }
        char v5 = 1;
      }
      --v6;
      --v7;
    }
    while (v6 > 1);
  }
  return v5;
}

uint64_t icu::UVector::orphanElementAt(icu::UVector *this, int a2)
{
  if (a2 < 0) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 2);
  if (v3 <= a2) {
    return 0;
  }
  uint64_t result = *(void *)(*((void *)this + 2) + 8 * a2);
  LODWORD(v5) = v3 - 1;
  if ((int)v5 > a2)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)(*((void *)this + 2) + 8 * v6) = *(void *)(*((void *)this + 2) + 8 * v6 + 8);
      uint64_t v5 = *((int *)this + 2) - 1;
      ++v6;
    }
    while (v6 < v5);
  }
  *((_DWORD *)this + 2) = v5;
  return result;
}

uint64_t icu::UVector::removeElement(icu::UVector *this, uint64_t a2)
{
  int v3 = icu::UVector::indexOf((uint64_t)this, a2, 0, 1);
  if (v3 < 0) {
    return 0;
  }
  if (icu::UVector::orphanElementAt(this, v3))
  {
    uint64_t v4 = (void (*)(void))*((void *)this + 3);
    if (v4) {
      v4();
    }
  }
  return 1;
}

uint64_t icu::UVector::indexOf(icu::UVector *this, uint64_t a2, uint64_t a3)
{
  return icu::UVector::indexOf((uint64_t)this, a2, a3, 1);
}

uint64_t icu::UVector::equals(icu::UVector *this, const icu::UVector *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 != *((_DWORD *)a2 + 2)) {
    return 0;
  }
  if (!*((void *)this + 4))
  {
    if ((int)v2 < 1) {
      return 1;
    }
    int v8 = (void *)*((void *)this + 2);
    for (uint64_t i = (void *)*((void *)a2 + 2); *v8 == *i; ++i)
    {
      ++v8;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  if ((int)v2 < 1) {
    return 1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t result = (*((uint64_t (**)(uint64_t, void))this + 4))(v5 + *((void *)a2 + 2), *(void *)(*((void *)this + 2) + v5));
    if (!result) {
      break;
    }
    ++v6;
    v5 += 8;
    if (v6 >= *((int *)this + 2)) {
      return 1;
    }
  }
  return result;
}

uint64_t icu::UVector::indexOf(icu::UVector *this, unsigned int a2, uint64_t a3)
{
  return icu::UVector::indexOf((uint64_t)this, a2, a3, 0);
}

void **icu::UVector::toArray(icu::UVector *this, void **a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8 * v2;
    do
    {
      a2[v3 / 8] = *(void **)(*((void *)this + 2) + v3);
      v3 += 8;
    }
    while (v4 != v3);
  }
  return a2;
}

uint64_t icu::UVector::setDeleter(icu::UVector *this, void (*a2)(void *))
{
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = a2;
  return v2;
}

uint64_t icu::UVector::setComparer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = a2;
  return v2;
}

uint64_t icu::UVector::sortedInsert(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, uint64_t), UErrorCode *a4)
{
  uint64_t result = icu::UVector::ensureCapacity((icu::UVector *)a1, *(_DWORD *)(a1 + 8) + 1, a4);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 8);
    if (!v8) {
      goto LABEL_14;
    }
    int v9 = 0;
    do
    {
      int v10 = v9 + v8;
      if (v9 + v8 < 0 != __OFADD__(v9, v8)) {
        ++v10;
      }
      int v11 = v10 >> 1;
      uint64_t result = a3(*(void *)(*(void *)(a1 + 16) + 8 * (v10 >> 1)), a2);
      if ((int)result <= 0) {
        int v9 = v11 + 1;
      }
      else {
        int v8 = v11;
      }
    }
    while (v9 != v8);
    uint64_t v12 = *(int *)(a1 + 8);
    if ((int)v12 > v8)
    {
      uint64_t v13 = v8;
      do
      {
        *(void *)(*(void *)(a1 + 16) + 8 * v12) = *(void *)(*(void *)(a1 + 16) + 8 * v12 - 8);
        --v12;
      }
      while (v12 > v8);
    }
    else
    {
LABEL_14:
      uint64_t v13 = v8;
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v13) = a2;
    ++*(_DWORD *)(a1 + 8);
  }
  else
  {
    int32_t v14 = *(uint64_t (**)(uint64_t))(a1 + 24);
    if (v14)
    {
      return v14(a2);
    }
  }
  return result;
}

uint64_t icu::UVector::sortedInsert(uint64_t a1, unsigned int a2, uint64_t (*a3)(void, uint64_t), UErrorCode *a4)
{
  return icu::UVector::sortedInsert(a1, a2, a3, a4);
}

void icu::UVector::sorti(icu::UVector *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0) {
    uprv_sortArray(*((void *)this + 2), *((unsigned int *)this + 2), 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18C8C86C4, 0, 0, (int *)a2);
  }
}

uint64_t sub_18C8C86C4(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 != *a3;
  }
}

void icu::UVector::sort(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (*a3 <= 0) {
    uprv_sortArray(*(void *)(a1 + 16), *(unsigned int *)(a1 + 8), 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18C8C8738, (uint64_t)&v3, 0, a3);
  }
}

uint64_t sub_18C8C8738(uint64_t (**a1)(void, void), void *a2, void *a3)
{
  return (*a1)(*a2, *a3);
}

void icu::UVector::sortWithUComparator(icu::UVector *this, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0) {
    uprv_sortArray(*((void *)this + 2), *((unsigned int *)this + 2), 8, a2, a3, 1, (int *)a4);
  }
}

void *icu::UVector32::getStaticClassID(icu::UVector32 *this)
{
  return &unk_1E9191FD5;
}

void *icu::UVector32::getDynamicClassID(icu::UVector32 *this)
{
  return &unk_1E9191FD5;
}

icu::UVector32 *icu::UVector32::UVector32(icu::UVector32 *this, UErrorCode *a2)
{
  *(void *)this = &unk_1EDA48818;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  icu::UVector32::_init(this, 8, a2);
  return this;
}

{
  *(void *)this = &unk_1EDA48818;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  icu::UVector32::_init(this, 8, a2);
  return this;
}

void *icu::UVector32::_init(icu::UVector32 *this, int a2, UErrorCode *a3)
{
  if (a2 >= 1) {
    int v5 = a2;
  }
  else {
    int v5 = 8;
  }
  int v6 = *((_DWORD *)this + 4);
  if (v6 >= v5 || v6 <= 0) {
    int v8 = v5;
  }
  else {
    int v8 = *((_DWORD *)this + 4);
  }
  if (v8 >= 0x20000000) {
    int v8 = uprv_min(8, v6);
  }
  uint64_t result = uprv_malloc(4 * v8);
  *((void *)this + 3) = result;
  if (result) {
    *((_DWORD *)this + 3) = v8;
  }
  else {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

icu::UVector32 *icu::UVector32::UVector32(icu::UVector32 *this, int a2, UErrorCode *a3)
{
  *(void *)this = &unk_1EDA48818;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  icu::UVector32::_init(this, a2, a3);
  return this;
}

{
  *(void *)this = &unk_1EDA48818;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  icu::UVector32::_init(this, a2, a3);
  return this;
}

void icu::UVector32::~UVector32(void **this)
{
  *this = &unk_1EDA48818;
  uprv_free(this[3]);
  this[3] = 0;

  icu::UObject::~UObject((icu::UObject *)this);
}

{
  uint64_t vars8;

  *this = &unk_1EDA48818;
  uprv_free(this[3]);
  this[3] = 0;

  icu::UObject::~UObject((icu::UObject *)this);
}

{
  void *v2;
  uint64_t vars8;

  *this = &unk_1EDA48818;
  uprv_free(this[3]);
  this[3] = 0;
  icu::UObject::~UObject((icu::UObject *)this);

  icu::UMemory::operator delete(v2);
}

void icu::UVector32::assign(icu::UVector32 *this, const icu::UVector32 *a2, UErrorCode *a3)
{
  int v5 = *((_DWORD *)a2 + 2);
  if (v5 < 0 || *((_DWORD *)this + 3) < v5)
  {
    if (!icu::UVector32::expandCapacity(this, v5, a3)) {
      return;
    }
    int v5 = *((_DWORD *)a2 + 2);
  }
  icu::UVector32::setSize(this, v5);
  if (*((int *)a2 + 2) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)a2 + 3);
    uint64_t v8 = *((void *)this + 3);
    do
    {
      *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v7 + 4 * v6);
      ++v6;
    }
    while (v6 < *((int *)a2 + 2));
  }
}

void icu::UVector32::setSize(icu::UVector32 *this, int a2)
{
  if ((a2 & 0x80000000) == 0)
  {
    int v4 = *((_DWORD *)this + 2);
    if (v4 < a2)
    {
      UErrorCode v5 = U_ZERO_ERROR;
      if (*((_DWORD *)this + 3) < a2)
      {
        if (!icu::UVector32::expandCapacity(this, a2, &v5)) {
          return;
        }
        int v4 = *((_DWORD *)this + 2);
      }
      if (v4 < a2) {
        bzero((void *)(*((void *)this + 3) + 4 * v4), 4 * (~v4 + a2) + 4);
      }
    }
    *((_DWORD *)this + 2) = a2;
  }
}

BOOL icu::UVector32::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    return 0;
  }
  if ((int)v2 < 1) {
    return 1;
  }
  uint64_t v3 = *(int **)(a1 + 24);
  int v4 = *(int **)(a2 + 24);
  uint64_t v5 = v2 - 1;
  do
  {
    int v7 = *v3++;
    int v6 = v7;
    int v9 = *v4++;
    int v8 = v9;
    BOOL v11 = v5-- != 0;
    BOOL result = v6 == v8;
  }
  while (v6 == v8 && v11);
  return result;
}

uint64_t icu::UVector32::setElementAt(uint64_t this, int a2, unsigned int a3)
{
  if ((a3 & 0x80000000) == 0 && *(_DWORD *)(this + 8) > (signed int)a3) {
    *(_DWORD *)(*(void *)(this + 24) + 4 * a3) = a2;
  }
  return this;
}

_DWORD *icu::UVector32::insertElementAt(_DWORD *this, int a2, signed int a3, UErrorCode *a4)
{
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v5 = this;
    signed int v6 = this[2];
    if (v6 >= a3)
    {
      if (this[3] <= v6)
      {
        this = (_DWORD *)icu::UVector32::expandCapacity((icu::UVector32 *)this, v6 + 1, a4);
        if (!this) {
          return this;
        }
        signed int v6 = v5[2];
      }
      for (uint64_t i = *((void *)v5 + 3); v6 > a3; --v6)
        *(_DWORD *)(i + 4 * v6) = *(_DWORD *)(i + 4 * (v6 - 1));
      *(_DWORD *)(i + 4 * a3) = a2;
      ++v5[2];
    }
  }
  return this;
}

BOOL icu::UVector32::containsAll(icu::UVector32 *this, const icu::UVector32 *a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if ((int)v2 < 1)
  {
    return 1;
  }
  else
  {
    uint64_t v3 = 0;
    BOOL v4 = 0;
    uint64_t v5 = *((unsigned int *)this + 2);
    while ((int)v5 >= 1)
    {
      uint64_t v6 = 0;
      while (*(_DWORD *)(*((void *)this + 3) + 4 * v6) != *(_DWORD *)(*((void *)a2 + 3) + 4 * v3))
      {
        if (v5 == ++v6) {
          return v4;
        }
      }
      if ((v6 & 0x80000000) == 0)
      {
        BOOL v4 = ++v3 >= v2;
        if (v3 != v2) {
          continue;
        }
      }
      return v4;
    }
    return 0;
  }
}

uint64_t icu::UVector32::indexOf(icu::UVector32 *this, int a2, uint64_t a3)
{
  int v3 = *((_DWORD *)this + 2);
  if (v3 <= (int)a3) {
    return 0xFFFFFFFFLL;
  }
  BOOL v4 = (int *)(*((void *)this + 3) + 4 * (int)a3);
  while (1)
  {
    int v5 = *v4++;
    if (v5 == a2) {
      break;
    }
    a3 = (a3 + 1);
    if (v3 == a3) {
      return 0xFFFFFFFFLL;
    }
  }
  return a3;
}

BOOL icu::UVector32::containsNone(icu::UVector32 *this, const icu::UVector32 *a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 2);
  if ((int)v2 < 1)
  {
    return 1;
  }
  else
  {
    uint64_t v3 = 0;
    BOOL v4 = 0;
    uint64_t v5 = *((unsigned int *)this + 2);
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t v6 = 0;
        while (*(_DWORD *)(*((void *)this + 3) + 4 * v6) != *(_DWORD *)(*((void *)a2 + 3) + 4 * v3))
        {
          if (v5 == ++v6) {
            goto LABEL_9;
          }
        }
        if ((v6 & 0x80000000) == 0) {
          break;
        }
      }
LABEL_9:
      BOOL v4 = ++v3 >= v2;
    }
    while (v3 != v2);
  }
  return v4;
}

uint64_t icu::UVector32::removeAll(icu::UVector32 *this, const icu::UVector32 *a2)
{
  int v2 = *((_DWORD *)a2 + 2);
  if (v2 < 1)
  {
    return 0;
  }
  else
  {
    uint64_t v3 = 0;
    char v4 = 0;
    uint64_t v5 = *((void *)a2 + 3);
    LODWORD(v6) = *((_DWORD *)this + 2);
    do
    {
      int v7 = v6;
      if ((int)v6 > 0)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *((void *)this + 3);
        while (*(_DWORD *)(v9 + 4 * v8) != *(_DWORD *)(v5 + 4 * v3))
        {
          if (v6 == ++v8) {
            goto LABEL_12;
          }
        }
        if ((v8 & 0x80000000) == 0)
        {
          LODWORD(v6) = v6 - 1;
          if (v7 - 1 > (int)v8)
          {
            do
            {
              *(_DWORD *)(v9 + 4 * v8) = *(_DWORD *)(v9 + 4 * v8 + 4);
              uint64_t v6 = *((int *)this + 2) - 1;
              ++v8;
            }
            while (v8 < v6);
          }
          *((_DWORD *)this + 2) = v6;
          int v2 = *((_DWORD *)a2 + 2);
          char v4 = 1;
        }
      }
LABEL_12:
      ++v3;
    }
    while (v3 < v2);
  }
  return v4;
}

uint64_t icu::UVector32::removeElementAt(uint64_t this, int a2)
{
  if ((a2 & 0x80000000) == 0)
  {
    LODWORD(v2) = *(_DWORD *)(this + 8) - 1;
    if ((int)v2 > a2)
    {
      uint64_t v3 = *(void *)(this + 24);
      uint64_t v4 = a2;
      do
      {
        *(_DWORD *)(v3 + 4 * v4) = *(_DWORD *)(v3 + 4 * v4 + 4);
        uint64_t v2 = *(int *)(this + 8) - 1;
        ++v4;
      }
      while (v4 < v2);
    }
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t icu::UVector32::retainAll(icu::UVector32 *this, const icu::UVector32 *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if ((int)v2 < 1)
  {
    return 0;
  }
  else
  {
    char v3 = 0;
    uint64_t v4 = *((void *)this + 3);
    uint64_t v5 = *((void *)a2 + 3);
    LODWORD(v6) = *((_DWORD *)this + 2);
    LODWORD(v7) = v6;
    do
    {
      uint64_t v7 = (v7 - 1);
      uint64_t v8 = *((unsigned int *)a2 + 2);
      if ((int)v8 < 1) {
        goto LABEL_9;
      }
      uint64_t v9 = 0;
      while (*(_DWORD *)(v5 + 4 * v9) != *(_DWORD *)(v4 + 4 * v7))
      {
        if (v8 == ++v9) {
          goto LABEL_9;
        }
      }
      if ((v9 & 0x80000000) != 0)
      {
LABEL_9:
        if (v2 >= (int)v6)
        {
          LODWORD(v6) = v6 - 1;
        }
        else
        {
          uint64_t v10 = v7;
          do
          {
            *(_DWORD *)(v4 + 4 * v10) = *(_DWORD *)(v4 + 4 * v10 + 4);
            uint64_t v6 = *((int *)this + 2) - 1;
            ++v10;
          }
          while (v10 < v6);
        }
        *((_DWORD *)this + 2) = v6;
        char v3 = 1;
      }
    }
    while (v2-- > 1);
  }
  return v3;
}

uint64_t icu::UVector32::removeAllElements(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t icu::UVector32::equals(icu::UVector32 *this, const icu::UVector32 *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 == *((_DWORD *)a2 + 2))
  {
    if ((int)v2 < 1) {
      return 1;
    }
    char v3 = (int *)*((void *)this + 3);
    uint64_t v4 = (int *)*((void *)a2 + 3);
    while (1)
    {
      int v6 = *v3++;
      int v5 = v6;
      int v7 = *v4++;
      if (v5 != v7) {
        break;
      }
      if (!--v2) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t icu::UVector32::expandCapacity(icu::UVector32 *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  if (a2 < 0) {
    goto LABEL_19;
  }
  int v6 = *((_DWORD *)this + 3);
  if (v6 < a2)
  {
    int v7 = *((_DWORD *)this + 4);
    if (v7 >= 1 && v7 < a2)
    {
      uint64_t result = 0;
      UErrorCode v12 = U_BUFFER_OVERFLOW_ERROR;
      goto LABEL_21;
    }
    if (v6 >= 0x40000000) {
      goto LABEL_19;
    }
    int v9 = 2 * v6;
    if (v9 <= a2) {
      int v9 = a2;
    }
    BOOL v10 = v9 <= v7 || v7 <= 0;
    int v11 = v10 ? v9 : *((_DWORD *)this + 4);
    if (v11 >= 0x20000000)
    {
LABEL_19:
      uint64_t result = 0;
      UErrorCode v12 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_21:
      *a3 = v12;
      return result;
    }
    uint64_t result = (uint64_t)uprv_realloc(*((void **)this + 3), 4 * v11);
    if (!result)
    {
      UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_21;
    }
    *((void *)this + 3) = result;
    *((_DWORD *)this + 3) = v11;
  }
  return 1;
}

void *icu::UVector32::setMaxCapacity(void *this, int a2)
{
  int v2 = a2 & ~(a2 >> 31);
  if (!(v2 >> 29))
  {
    uint64_t v3 = (uint64_t)this;
    *((_DWORD *)this + 4) = v2;
    if (a2 >= 1 && *((_DWORD *)this + 3) > v2)
    {
      this = uprv_realloc(*((void **)this + 3), 4 * (a2 & ~(a2 >> 31)));
      if (this)
      {
        *(void *)(v3 + 24) = this;
        int v4 = *(_DWORD *)(v3 + 16);
        *(_DWORD *)(v3 + 12) = v4;
        if (*(_DWORD *)(v3 + 8) > v4) {
          *(_DWORD *)(v3 + 8) = v4;
        }
      }
    }
  }
  return this;
}

uint64_t icu::UVector32::sortedInsert(uint64_t this, int a2, UErrorCode *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 8);
  if (!v5)
  {
    int v6 = 0;
    int v10 = 1;
    goto LABEL_12;
  }
  int v6 = 0;
  int v7 = *(_DWORD *)(this + 8);
  do
  {
    int v8 = v7 + v6;
    if (v7 + v6 < 0 != __OFADD__(v7, v6)) {
      ++v8;
    }
    int v9 = v8 >> 1;
    if (*(_DWORD *)(*(void *)(this + 24) + 4 * v9) > a2) {
      int v7 = v9;
    }
    else {
      int v6 = v9 + 1;
    }
  }
  while (v6 != v7);
  int v10 = v5 + 1;
  if (v5 >= -1)
  {
LABEL_12:
    if (*(_DWORD *)(this + 12) > v5) {
      goto LABEL_15;
    }
  }
  this = icu::UVector32::expandCapacity((icu::UVector32 *)this, v10, a3);
  if (!this) {
    return this;
  }
  int v5 = *(_DWORD *)(v4 + 8);
LABEL_15:
  uint64_t v11 = *(void *)(v4 + 24);
  if (v5 <= v6)
  {
    uint64_t v13 = v6;
  }
  else
  {
    uint64_t v12 = v5;
    uint64_t v13 = v6;
    do
    {
      *(_DWORD *)(v11 + 4 * v12) = *(_DWORD *)(v11 + 4 * v12 - 4);
      --v12;
    }
    while (v12 > v6);
  }
  *(_DWORD *)(v11 + 4 * v13) = a2;
  ++*(_DWORD *)(v4 + 8);
  return this;
}

void *icu::UVector64::getStaticClassID(icu::UVector64 *this)
{
  return &unk_1E9191FD6;
}

void *icu::UVector64::getDynamicClassID(icu::UVector64 *this)
{
  return &unk_1E9191FD6;
}

icu::UVector64 *icu::UVector64::UVector64(icu::UVector64 *this, UErrorCode *a2)
{
  *(void *)this = &unk_1EDA48858;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  icu::UVector64::_init(this, 8, a2);
  return this;
}

{
  *(void *)this = &unk_1EDA48858;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  icu::UVector64::_init(this, 8, a2);
  return this;
}

void *icu::UVector64::_init(icu::UVector64 *this, int a2, UErrorCode *a3)
{
  if (a2 >= 1) {
    int v5 = a2;
  }
  else {
    int v5 = 8;
  }
  int v6 = *((_DWORD *)this + 4);
  if (v6 >= v5 || v6 <= 0) {
    int v8 = v5;
  }
  else {
    int v8 = *((_DWORD *)this + 4);
  }
  if (v8 >= 0x10000000) {
    int v8 = uprv_min(8, v6);
  }
  uint64_t result = uprv_malloc(8 * v8);
  *((void *)this + 3) = result;
  if (result) {
    *((_DWORD *)this + 3) = v8;
  }
  else {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

icu::UVector64 *icu::UVector64::UVector64(icu::UVector64 *this, int a2, UErrorCode *a3)
{
  *(void *)this = &unk_1EDA48858;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  icu::UVector64::_init(this, a2, a3);
  return this;
}

{
  *(void *)this = &unk_1EDA48858;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  icu::UVector64::_init(this, a2, a3);
  return this;
}

void icu::UVector64::~UVector64(void **this)
{
  *this = &unk_1EDA48858;
  uprv_free(this[3]);
  this[3] = 0;

  icu::UObject::~UObject((icu::UObject *)this);
}

{
  uint64_t vars8;

  *this = &unk_1EDA48858;
  uprv_free(this[3]);
  this[3] = 0;

  icu::UObject::~UObject((icu::UObject *)this);
}

{
  void *v2;
  uint64_t vars8;

  *this = &unk_1EDA48858;
  uprv_free(this[3]);
  this[3] = 0;
  icu::UObject::~UObject((icu::UObject *)this);

  icu::UMemory::operator delete(v2);
}

void icu::UVector64::assign(icu::UVector64 *this, const icu::UVector64 *a2, UErrorCode *a3)
{
  int v5 = *((_DWORD *)a2 + 2);
  if (v5 < 0 || *((_DWORD *)this + 3) < v5)
  {
    if (!icu::UVector64::expandCapacity(this, v5, a3)) {
      return;
    }
    int v5 = *((_DWORD *)a2 + 2);
  }
  icu::UVector64::setSize(this, v5);
  uint64_t v6 = *((unsigned int *)a2 + 2);
  if ((int)v6 >= 1)
  {
    int v7 = (uint64_t *)*((void *)a2 + 3);
    int v8 = (void *)*((void *)this + 3);
    do
    {
      uint64_t v9 = *v7++;
      *v8++ = v9;
      --v6;
    }
    while (v6);
  }
}

void icu::UVector64::setSize(icu::UVector64 *this, int a2)
{
  if ((a2 & 0x80000000) == 0)
  {
    int v4 = *((_DWORD *)this + 2);
    if (v4 < a2)
    {
      UErrorCode v5 = U_ZERO_ERROR;
      if (*((_DWORD *)this + 3) < a2)
      {
        if (!icu::UVector64::expandCapacity(this, a2, &v5)) {
          return;
        }
        int v4 = *((_DWORD *)this + 2);
      }
      if (v4 < a2) {
        bzero((void *)(*((void *)this + 3) + 8 * v4), 8 * (~v4 + a2) + 8);
      }
    }
    *((_DWORD *)this + 2) = a2;
  }
}

BOOL icu::UVector64::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    return 0;
  }
  if ((int)v2 < 1) {
    return 1;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  int v4 = *(uint64_t **)(a2 + 24);
  uint64_t v5 = v2 - 1;
  do
  {
    uint64_t v7 = *v3++;
    uint64_t v6 = v7;
    uint64_t v9 = *v4++;
    uint64_t v8 = v9;
    BOOL v11 = v5-- != 0;
    BOOL result = v6 == v8;
  }
  while (v6 == v8 && v11);
  return result;
}

uint64_t icu::UVector64::setElementAt(uint64_t this, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) == 0 && *(_DWORD *)(this + 8) > (signed int)a3) {
    *(void *)(*(void *)(this + 24) + 8 * a3) = a2;
  }
  return this;
}

_DWORD *icu::UVector64::insertElementAt(_DWORD *this, uint64_t a2, signed int a3, UErrorCode *a4)
{
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v5 = this;
    int v6 = this[2];
    if (v6 >= a3)
    {
      if (this[3] <= v6)
      {
        this = (_DWORD *)icu::UVector64::expandCapacity((icu::UVector64 *)this, v6 + 1, a4);
        if (!this) {
          return this;
        }
        int v6 = v5[2];
      }
      uint64_t v8 = *((void *)v5 + 3);
      if (v6 > a3)
      {
        unsigned int v9 = v6;
        do
        {
          *(void *)(v8 + 8 * v9) = *(void *)(v8 + 8 * (v9 - 1));
          --v9;
        }
        while ((int)v9 > a3);
      }
      *(void *)(v8 + 8 * a3) = a2;
      v5[2] = v6 + 1;
    }
  }
  return this;
}

uint64_t icu::UVector64::removeAllElements(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t icu::UVector64::expandCapacity(icu::UVector64 *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  if (a2 < 0) {
    goto LABEL_19;
  }
  int v6 = *((_DWORD *)this + 3);
  if (v6 < a2)
  {
    int v7 = *((_DWORD *)this + 4);
    if (v7 >= 1 && v7 < a2)
    {
      uint64_t result = 0;
      UErrorCode v12 = U_BUFFER_OVERFLOW_ERROR;
      goto LABEL_21;
    }
    if (v6 >= 0x40000000) {
      goto LABEL_19;
    }
    int v9 = 2 * v6;
    if (v9 <= a2) {
      int v9 = a2;
    }
    BOOL v10 = v9 <= v7 || v7 <= 0;
    int v11 = v10 ? v9 : *((_DWORD *)this + 4);
    if (v11 >= 0x10000000)
    {
LABEL_19:
      uint64_t result = 0;
      UErrorCode v12 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_21:
      *a3 = v12;
      return result;
    }
    uint64_t result = (uint64_t)uprv_realloc(*((void **)this + 3), 8 * v11);
    if (!result)
    {
      UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_21;
    }
    *((void *)this + 3) = result;
    *((_DWORD *)this + 3) = v11;
  }
  return 1;
}

void *icu::UVector64::setMaxCapacity(void *this, int a2)
{
  int v2 = a2 & ~(a2 >> 31);
  if (!(v2 >> 28))
  {
    uint64_t v3 = (uint64_t)this;
    *((_DWORD *)this + 4) = v2;
    if (a2 >= 1 && *((_DWORD *)this + 3) > v2)
    {
      this = uprv_realloc(*((void **)this + 3), 8 * (a2 & ~(a2 >> 31)));
      if (this)
      {
        *(void *)(v3 + 24) = this;
        int v4 = *(_DWORD *)(v3 + 16);
        *(_DWORD *)(v3 + 12) = v4;
        if (*(_DWORD *)(v3 + 8) > v4) {
          *(_DWORD *)(v3 + 8) = v4;
        }
      }
    }
  }
  return this;
}

void sub_18C8C981C(icu::UObject *a1)
{
  *(void *)a1 = &unk_1EDA48898;
  uint64_t v2 = *((void *)a1 + 1);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    uint64_t v3 = *((void *)a1 + 1);
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)a1 + 2);
  if (v4) {
    BOOL v5 = v4 == v3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  icu::UObject::~UObject(a1);
}

void sub_18C8C98DC(icu::UObject *a1)
{
  sub_18C8C981C(a1);

  icu::UMemory::operator delete(v1);
}

void icu::AlphabeticIndex::ImmutableIndex::~ImmutableIndex(icu::AlphabeticIndex::ImmutableIndex *this)
{
  *(void *)this = &unk_1EDA488C0;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::AlphabeticIndex::ImmutableIndex::~ImmutableIndex(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::AlphabeticIndex::ImmutableIndex::getBucketCount(icu::AlphabeticIndex::ImmutableIndex *this)
{
  return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16) + 8);
}

uint64_t icu::AlphabeticIndex::ImmutableIndex::getBucketIndex(icu::AlphabeticIndex::ImmutableIndex *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  return sub_18C8C99F8(*((void *)this + 1), (uint64_t)a2, *((void *)this + 2), (uint64_t)a3);
}

uint64_t sub_18C8C99F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v5 = *(icu::UVector **)(a1 + 8);
  int v6 = *((_DWORD *)v5 + 2);
  if (v6 < 2)
  {
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    do
    {
      int v11 = v10 + v6;
      if ((int)(v10 + v6) < 0 != __OFADD__(v10, v6)) {
        ++v11;
      }
      int v12 = v11 >> 1;
      uint64_t v13 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), v11 >> 1);
      if ((*(int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 56))(a3, a2, v13 + 72, a4) >= 0) {
        unsigned int v10 = v12;
      }
      else {
        int v6 = v12;
      }
    }
    while ((int)(v10 + 1) < v6);
    BOOL v5 = *(icu::UVector **)(a1 + 8);
  }
  uint64_t v14 = icu::UVector::elementAt(v5, v10);
  uint64_t v15 = *(void *)(v14 + 144);
  if (!v15) {
    uint64_t v15 = v14;
  }
  return *(unsigned int *)(v15 + 152);
}

uint64_t icu::AlphabeticIndex::ImmutableIndex::getBucket(icu::AlphabeticIndex::ImmutableIndex *this, signed int a2)
{
  if (a2 < 0) {
    return 0;
  }
  uint64_t v2 = *(icu::UVector **)(*((void *)this + 1) + 16);
  if (*((_DWORD *)v2 + 2) <= a2) {
    return 0;
  }
  else {
    return icu::UVector::elementAt(v2, a2);
  }
}

icu::AlphabeticIndex *icu::AlphabeticIndex::AlphabeticIndex(icu::AlphabeticIndex *this, const icu::Locale *a2, UErrorCode *a3)
{
  *(void *)this = &unk_1EDA488E8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0xFFFFFFFFLL;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 99;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = &unk_1EDA47700;
  *((_WORD *)this + 44) = 2;
  *((void *)this + 18) = &unk_1EDA47700;
  *((_WORD *)this + 76) = 2;
  *((void *)this + 26) = &unk_1EDA47700;
  *((_WORD *)this + 108) = 2;
  *((void *)this + 34) = &unk_1EDA47700;
  *((_WORD *)this + 140) = 2;
  *((void *)this + 42) = &unk_1EDA47700;
  *((_WORD *)this + 172) = 2;
  icu::AlphabeticIndex::init(this, a2, a3);
  return this;
}

void icu::AlphabeticIndex::init(icu::AlphabeticIndex *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v3 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v3 > 0) {
    return;
  }
  if (!a2)
  {
    uint64_t v3 = (uint64_t *)*((void *)this + 7);
    if (!v3)
    {
LABEL_20:
      UErrorCode v21 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_25:
      *a3 = v21;
      return;
    }
  }
  int v7 = (icu::UnicodeSet *)icu::UMemory::operator new(v3, (icu::UMemory *)0xC8, (unint64_t)a2);
  if (!v7)
  {
    *((void *)this + 5) = 0;
    goto LABEL_24;
  }
  icu::UnicodeSet::UnicodeSet(v7);
  *((void *)this + 5) = v8;
  __int16 v24 = 8230;
  icu::UnicodeString::unBogus((uint64_t)this + 80);
  if (*((__int16 *)this + 44) < 0) {
    uint64_t v9 = *((unsigned int *)this + 23);
  }
  else {
    uint64_t v9 = *((unsigned __int16 *)this + 44) >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 80, 0, v9, (uint64_t)&v24, 0, 1);
  icu::UnicodeString::operator=((UChar **)this + 18, (UChar **)this + 10);
  icu::UnicodeString::operator=((UChar **)this + 26, (UChar **)this + 10);
  uint64_t v13 = (icu::RuleBasedCollator *)*((void *)this + 7);
  if (v13) {
    goto LABEL_10;
  }
  Instance = icu::Collator::createInstance(a2, (const icu::Locale *)a3, v11);
  int v20 = Instance;
  if (*(int *)a3 >= 1)
  {
    if (Instance) {
      (*(void (**)(icu::RuleBasedCollator *))(*(void *)Instance + 8))(Instance);
    }
    return;
  }
  if (!Instance)
  {
LABEL_24:
    UErrorCode v21 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_25;
  }
  uint64_t v22 = *(void *)Instance;
  *((void *)this + 7) = v13;
  if (!v13)
  {
    (*(void (**)(icu::RuleBasedCollator *))(v22 + 8))(v20);
    UErrorCode v21 = U_UNSUPPORTED_ERROR;
    goto LABEL_25;
  }
LABEL_10:
  uint64_t v14 = icu::RuleBasedCollator::clone(v13, v10, v12);
  *((void *)this + 8) = v14;
  if (!v14) {
    goto LABEL_24;
  }
  icu::RuleBasedCollator::setAttribute((uint64_t)v14, 5, 0, (int *)a3);
  StringsInunsigned int Script = icu::AlphabeticIndex::firstStringsInScript((uint64_t ***)this, a3);
  *((void *)this + 6) = StringsInScript;
  if (*(int *)a3 <= 0)
  {
    icu::UVector::sortWithUComparator(StringsInScript, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18C8CC3DC, *((void *)this + 8), a3);
    if (*(int *)a3 <= 0)
    {
      while (1)
      {
        uint64_t v16 = (icu::UVector *)*((void *)this + 6);
        if (!*((_DWORD *)v16 + 2)) {
          break;
        }
        int v17 = (icu::RuleBasedCollator *)*((void *)this + 8);
        long long v18 = (const icu::UnicodeString *)icu::UVector::elementAt(v16, 0);
        if (icu::RuleBasedCollator::compare(v17, v18, (icu::AlphabeticIndex *)((char *)this + 336), a3))
        {
          int v23 = icu::AlphabeticIndex::addChineseIndexCharacters(this, a3);
          if (a2)
          {
            if (!v23) {
              icu::AlphabeticIndex::addIndexExemplars((icu::UVector ***)this, (char **)a2, a3);
            }
          }
          return;
        }
        icu::UVector::removeElementAt(*((uint64_t (***)(void))this + 6), 0);
        if (*(int *)a3 >= 1) {
          return;
        }
      }
      goto LABEL_20;
    }
  }
}

icu::AlphabeticIndex *icu::AlphabeticIndex::AlphabeticIndex(icu::AlphabeticIndex *this, icu::RuleBasedCollator *a2, UErrorCode *a3)
{
  *(void *)this = &unk_1EDA488E8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0xFFFFFFFFLL;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 99;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = a2;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = &unk_1EDA47700;
  *((_WORD *)this + 44) = 2;
  *((void *)this + 18) = &unk_1EDA47700;
  *((_WORD *)this + 76) = 2;
  *((void *)this + 26) = &unk_1EDA47700;
  *((_WORD *)this + 108) = 2;
  *((void *)this + 34) = &unk_1EDA47700;
  *((_WORD *)this + 140) = 2;
  *((void *)this + 42) = &unk_1EDA47700;
  *((_WORD *)this + 172) = 2;
  icu::AlphabeticIndex::init(this, 0, a3);
  return this;
}

void icu::AlphabeticIndex::~AlphabeticIndex(icu::AlphabeticIndex *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1EDA488E8;
  uint64_t v3 = (icu::RuleBasedCollator *)*((void *)this + 7);
  if (v3)
  {
    icu::RuleBasedCollator::~RuleBasedCollator(v3);
    icu::UMemory::operator delete(v4);
  }
  BOOL v5 = (icu::RuleBasedCollator *)*((void *)this + 8);
  if (v5)
  {
    icu::RuleBasedCollator::~RuleBasedCollator(v5);
    icu::UMemory::operator delete(v6);
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  unint64_t v10 = (icu::UnicodeSet *)*((void *)this + 5);
  if (v10)
  {
    icu::UnicodeSet::~UnicodeSet(v10);
    icu::UMemory::operator delete(v11);
  }
  icu::UnicodeString::~UnicodeString(a2, (icu::AlphabeticIndex *)((char *)this + 336));
  icu::UnicodeString::~UnicodeString(v12, (icu::AlphabeticIndex *)((char *)this + 272));
  icu::UnicodeString::~UnicodeString(v13, (icu::AlphabeticIndex *)((char *)this + 208));
  icu::UnicodeString::~UnicodeString(v14, (icu::AlphabeticIndex *)((char *)this + 144));
  icu::UnicodeString::~UnicodeString(v15, (icu::AlphabeticIndex *)((char *)this + 80));

  icu::UObject::~UObject(this);
}

{
  void *v2;
  uint64_t vars8;

  icu::AlphabeticIndex::~AlphabeticIndex(this, a2);

  icu::UMemory::operator delete(v2);
}

icu::UVector ***icu::AlphabeticIndex::addLabels(icu::UVector ***this, const icu::UnicodeSet *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    icu::UnicodeSet::addAll(this[5], a2);
    uint64_t v4 = this[9];
    if (v4)
    {
      (*((void (**)(icu::UVector **))*v4 + 1))(v4);
      this[9] = 0;
      *((_DWORD *)this + 4) = -1;
      this[3] = 0;
    }
  }
  return this;
}

uint64_t icu::AlphabeticIndex::clearBuckets(icu::AlphabeticIndex *this)
{
  uint64_t result = *((void *)this + 9);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 4) = -1;
    *((void *)this + 3) = 0;
  }
  return result;
}

icu::UVector ***icu::AlphabeticIndex::addLabels(icu::UVector ***this, char **a2, UErrorCode *a3)
{
  icu::AlphabeticIndex::addIndexExemplars(this, a2, a3);
  uint64_t v4 = this[9];
  if (v4)
  {
    (*((void (**)(icu::UVector **))*v4 + 1))(v4);
    this[9] = 0;
    *((_DWORD *)this + 4) = -1;
    this[3] = 0;
  }
  return this;
}

void icu::AlphabeticIndex::addIndexExemplars(icu::UVector ***this, char **a2, UErrorCode *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v6 = ulocdata_open(a2[5], (int *)a3);
  if (*(int *)a3 <= 0)
  {
    uint64_t v40 = 0;
    memset(v39, 0, sizeof(v39));
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v39);
    ulocdata_getExemplarSet((uint64_t)v6, (icu::UnicodeSet *)v39, 0, 2, a3);
    if (*(int *)a3 <= 0)
    {
      icu::UnicodeSet::addAll(this[5], (const icu::UnicodeSet *)v39);
    }
    else
    {
      *a3 = U_ZERO_ERROR;
      ulocdata_getExemplarSet((uint64_t)v6, (icu::UnicodeSet *)v39, 0, 0, a3);
      if (*(int *)a3 <= 0)
      {
        if (!icu::UnicodeSet::containsNone((icu::UnicodeSet *)v39, 97, 122)
          || icu::UnicodeSet::isEmpty((icu::UnicodeSet *)v39))
        {
          icu::UnicodeSet::add((icu::UnicodeSet *)v39, 0x61u, 0x7Au);
        }
        if (!icu::UnicodeSet::containsNone((icu::UnicodeSet *)v39, 44032, 55203))
        {
          uint64_t v7 = icu::UnicodeSet::remove((icu::UnicodeSet *)v39, 0xAC00u, 0xD7A3u);
          uint64_t v8 = icu::UnicodeSet::add(v7, 0xAC00u);
          uint64_t v9 = icu::UnicodeSet::add(v8, 0xB098u);
          unint64_t v10 = icu::UnicodeSet::add(v9, 0xB2E4u);
          int v11 = icu::UnicodeSet::add(v10, 0xB77Cu);
          int v12 = icu::UnicodeSet::add(v11, 0xB9C8u);
          uint64_t v13 = icu::UnicodeSet::add(v12, 0xBC14u);
          uint64_t v14 = icu::UnicodeSet::add(v13, 0xC0ACu);
          uint64_t v15 = icu::UnicodeSet::add(v14, 0xC544u);
          uint64_t v16 = icu::UnicodeSet::add(v15, 0xC790u);
          int v17 = icu::UnicodeSet::add(v16, 0xCC28u);
          long long v18 = icu::UnicodeSet::add(v17, 0xCE74u);
          long long v19 = icu::UnicodeSet::add(v18, 0xD0C0u);
          int v20 = icu::UnicodeSet::add(v19, 0xD30Cu);
          icu::UnicodeSet::add(v20, 0xD558u);
        }
        if (!icu::UnicodeSet::containsNone((icu::UnicodeSet *)v39, 4608, 4991))
        {
          uint64_t v38 = 0;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          icu::UnicodeString::UnicodeString((uint64_t)&v41, (uint64_t)"[");
          icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v26, (const icu::UnicodeString *)&v41, a3);
          icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v41);
          icu::UnicodeSet::retainAll((icu::UVector **)&v26, (const icu::UnicodeSet *)v39);
          uint64_t v22 = (icu::UVector **)icu::UnicodeSet::remove((icu::UnicodeSet *)v39, 0x1200u, 0x137Fu);
          icu::UnicodeSet::addAll(v22, (const icu::UnicodeSet *)&v26);
          icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)&v26);
        }
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)&v26, (const icu::UnicodeSet *)v39);
        long long v42 = 0u;
        uint64_t v45 = 0;
        long long v44 = 0u;
        long long v43 = 0u;
        int v41 = (UChar *)&unk_1EDA47700;
        LOWORD(v42) = 2;
        while (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)&v26))
        {
          String = icu::UnicodeSetIterator::getString((icu::UnicodeSetIterator *)&v26, v23, v24);
          icu::UnicodeString::operator=(&v41, (UChar **)String);
          icu::UnicodeString::toUpper(&v41, (const icu::Locale *)a2);
          icu::UnicodeSet::add((icu::UnicodeSet *)this[5], (const icu::UnicodeString *)&v41);
        }
        icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v41);
        icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)&v26);
      }
    }
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v39);
  }
  if (v6) {
    ulocdata_close(v6);
  }
}

uint64_t *icu::AlphabeticIndex::buildImmutableIndex(icu::UVector **this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  BucketList = icu::AlphabeticIndex::createBucketList(this, a2);
  uint64_t v7 = icu::RuleBasedCollator::clone(this[8], v5, v6);
  unint64_t v10 = (icu::RuleBasedCollator *)v7;
  if (BucketList && v7)
  {
    uint64_t result = icu::UMemory::operator new(v9, (icu::UMemory *)0x18, v8);
    if (result)
    {
      *uint64_t result = (uint64_t)&unk_1EDA488C0;
      result[1] = (uint64_t)BucketList;
      result[2] = (uint64_t)v10;
      return result;
    }
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_9;
  }
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  if (v7)
  {
LABEL_9:
    icu::RuleBasedCollator::~RuleBasedCollator(v10);
    icu::UMemory::operator delete(v12);
  }
  if (BucketList) {
    (*(void (**)(uint64_t *))(*BucketList + 8))(BucketList);
  }
  return 0;
}

uint64_t *icu::AlphabeticIndex::createBucketList(icu::UVector **this, UErrorCode *a2)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  uint64_t v105 = 0;
  memset(v104, 0, sizeof(v104));
  icu::UVector::UVector((icu::UVector *)v104, a2);
  icu::UVector::setDeleter((icu::UVector *)v104, (void (*)(void *))uprv_deleteUObject);
  icu::AlphabeticIndex::initLabels(this, (UErrorCode *)v104, a2);
  uint64_t v4 = 0;
  if (*(int *)a2 <= 0)
  {
    memset(v103, 0, sizeof(v103));
    icu::UVector64::UVector64((icu::UVector64 *)v103, a2);
    if (icu::RuleBasedCollator::getAttribute((uint64_t)this[8], 1, (int *)a2) == 20) {
      VariableTounint64_t p = icu::RuleBasedCollator::getVariableTop(this[8], a2);
    }
    else {
      VariableTounint64_t p = 0;
    }
    memset(v114, 0, sizeof(v114));
    memset(v113, 0, sizeof(v113));
    unint64_t v8 = (icu::UVector *)icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
    if (!v8)
    {
      uint64_t v4 = 0;
      if (*(int *)a2 <= 0) {
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
      goto LABEL_124;
    }
    uint64_t v9 = (unsigned int *)v8;
    icu::UVector::UVector(v8, a2);
    if (*(int *)a2 > 0) {
      goto LABEL_7;
    }
    icu::UVector::setDeleter((icu::UVector *)v9, (void (*)(void *))uprv_deleteUObject);
    v102 = 0;
    int v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0xA8, v10);
    if (!v12)
    {
      if (*(int *)a2 <= 0) {
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
LABEL_7:
      uint64_t v4 = 0;
      goto LABEL_8;
    }
    uint64_t v13 = v12;
    uint64_t v14 = (UChar **)(*((uint64_t (**)(icu::UVector **))*this + 10))(this);
    uint64_t v15 = (const icu::UnicodeString *)(this + 42);
    *(void *)uint64_t v13 = &unk_1EDA489F0;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v13 + 2), v14);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v13 + 18), (UChar **)this + 42);
    v13[34] = 1;
    *((void *)v13 + 18) = 0;
    v13[38] = -1;
    *((void *)v13 + 20) = 0;
    v102 = v13;
    if (*(int *)a2 > 0)
    {
      uint64_t v4 = 0;
      goto LABEL_122;
    }
    v102 = 0;
    icu::UVector::adoptElement((uint64_t (**)(void *))v9, v13, a2);
    if (*(int *)a2 > 0)
    {
      uint64_t v4 = 0;
      goto LABEL_121;
    }
    long long v109 = 0u;
    uint64_t v112 = 0;
    long long v111 = 0u;
    long long v110 = 0u;
    int v108 = &unk_1EDA47700;
    LOWORD(v109) = 2;
    if (SDWORD2(v104[0]) >= 1)
    {
      unsigned int v17 = 0;
      v92 = (UChar **)(this + 42);
      uint64_t v93 = 0;
      int v18 = -1;
      while (1)
      {
        uint64_t v19 = icu::UVector::elementAt((icu::UVector *)v104, v17);
        if ((icu::RuleBasedCollator::compare(this[8], (const icu::UnicodeString *)v19, v15, a2) & 0x80000000) == 0)
        {
          LOBYTE(v21) = 1;
          do
          {
            char v22 = v21;
            unint64_t v23 = (const icu::UnicodeString *)icu::UVector::elementAt(this[6], ++v18);
            int v24 = icu::RuleBasedCollator::compare(this[8], (const icu::UnicodeString *)v19, v23, a2);
            uint64_t v21 = 0;
          }
          while ((v24 & 0x80000000) == 0);
          if ((v22 & 1) != 0 || (uint64_t v21 = v9[2], (int)v21 < 2))
          {
            uint64_t v15 = v23;
          }
          else
          {
            unsigned int v25 = (UChar **)v15;
            long long v26 = icu::UMemory::operator new((uint64_t *)v21, (icu::UMemory *)0xA8, v20);
            if (v26)
            {
              long long v27 = (UChar **)(*((uint64_t (**)(icu::UVector **))*this + 6))(this);
              *long long v26 = (uint64_t)&unk_1EDA489F0;
              icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v26 + 1), v27);
              icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v26 + 9), v25);
              *((_DWORD *)v26 + 34) = 2;
              v26[18] = 0;
              *((_DWORD *)v26 + 38) = -1;
              v26[20] = 0;
            }
            sub_18C7F5A70((uint64_t)&v102, (uint64_t)v26, (int *)a2);
            long long v28 = v102;
            v102 = 0;
            icu::UVector::adoptElement((uint64_t (**)(void *))v9, v28, a2);
            uint64_t v21 = *(unsigned int *)a2;
            uint64_t v15 = v23;
            if ((int)v21 > 0) {
              goto LABEL_119;
            }
          }
        }
        long long v29 = icu::UMemory::operator new((uint64_t *)v21, (icu::UMemory *)0xA8, v20);
        if (v29) {
          break;
        }
LABEL_60:
        sub_18C7F5A70((uint64_t)&v102, (uint64_t)v29, (int *)a2);
        long long v43 = v102;
        v102 = 0;
        icu::UVector::adoptElement((uint64_t (**)(void *))v9, v43, a2);
        uint64_t v21 = *(unsigned int *)a2;
        if ((int)v21 > 0) {
          goto LABEL_119;
        }
        unsigned int v44 = *(unsigned __int16 *)(v19 + 8);
        if (*(__int16 *)(v19 + 8) < 0)
        {
          if (*(_DWORD *)(v19 + 12) != 1) {
            goto LABEL_72;
          }
        }
        else if ((v44 & 0xFFE0) != 0x20)
        {
          goto LABEL_71;
        }
        if ((v44 & 2) != 0) {
          uint64_t v45 = (unsigned __int16 *)(v19 + 10);
        }
        else {
          uint64_t v45 = *(unsigned __int16 **)(v19 + 24);
        }
        int v46 = *v45;
        if ((v46 - 65) <= 0x19)
        {
          *((void *)v114 + (v46 - 65)) = icu::UVector::elementAt((icu::UVector *)v9, v9[2] - 1);
          goto LABEL_86;
        }
        if ((v44 & 0x8000) == 0)
        {
LABEL_71:
          unsigned int v47 = v44 >> 5;
          goto LABEL_73;
        }
LABEL_72:
        unsigned int v47 = *(_DWORD *)(v19 + 12);
LABEL_73:
        if (v47 == 2)
        {
          if (icu::UnicodeString::doEqualsSubstring(v19, 0, 1, (uint64_t)&unk_18CA876F2, 0, 1))
          {
            unsigned int v48 = *(unsigned __int16 *)(v19 + 8);
            if (*(__int16 *)(v19 + 8) < 0) {
              unsigned int v49 = *(_DWORD *)(v19 + 12);
            }
            else {
              unsigned int v49 = v48 >> 5;
            }
            if (v49 <= 1)
            {
              v100 = &unk_18CA876F2;
            }
            else
            {
              if ((v48 & 2) != 0) {
                uint64_t v50 = v19 + 10;
              }
              else {
                uint64_t v50 = *(void *)(v19 + 24);
              }
              uint64_t v51 = *(unsigned __int16 *)(v50 + 2);
              v99 = &unk_18CA876F2;
              if ((v51 - 65) <= 0x19)
              {
                *((void *)&v113[-32] + v51 - 1) = icu::UVector::elementAt((icu::UVector *)v9, v9[2] - 1);
                HIDWORD(v93) = 1;
              }
            }
          }
          else
          {
            int v98 = &unk_18CA876F2;
          }
        }
LABEL_86:
        if (icu::UnicodeString::doEqualsSubstring(v19, 0, 1, (uint64_t)&unk_18CA876F2, 0, 1)
          || !sub_18C8CBD7C(this[8], VariableTop, (const icu::UnicodeString *)v19, (icu::UVector64 *)v103, a2))
        {
          int v95 = &unk_18CA876F2;
        }
        else
        {
          unsigned int v52 = *(unsigned __int16 *)(v19 + 8);
          if (*(__int16 *)(v19 + 8) < 0) {
            unsigned int v53 = *(_DWORD *)(v19 + 12);
          }
          else {
            unsigned int v53 = v52 >> 5;
          }
          if (v53)
          {
            if ((v52 & 2) != 0) {
              uint64_t v54 = v19 + 10;
            }
            else {
              uint64_t v54 = *(void *)(v19 + 24);
            }
            int v55 = *(__int16 *)(v54 + 2 * (int)(v53 - 1));
            v97 = &unk_18CA876F2;
            if (v55 != -1)
            {
              unsigned int v56 = v9[2];
              uint64_t v57 = icu::UVector::elementAt((icu::UVector *)v9, v56 - 2);
              if (!*(_DWORD *)(v57 + 136))
              {
                uint64_t v58 = v57;
                v94 = v15;
                unsigned int v59 = v56 - 3;
                while (*(void *)(v58 + 144)
                     || sub_18C8CBD7C(this[8], VariableTop, (const icu::UnicodeString *)(v58 + 72), (icu::UVector64 *)v103, a2))
                {
                  uint64_t v58 = icu::UVector::elementAt((icu::UVector *)v9, v59--);
                  if (*(_DWORD *)(v58 + 136))
                  {
                    uint64_t v15 = v94;
                    goto LABEL_88;
                  }
                }
                BOOL v62 = icu::UMemory::operator new(v61, (icu::UMemory *)0xA8, v60);
                if (!v62)
                {
                  uint64_t v21 = *(unsigned int *)a2;
                  if ((int)v21 > 0) {
                    goto LABEL_119;
                  }
                  if (v102) {
                    (*(void (**)(void *))(*(void *)v102 + 8))(v102);
                  }
                  uint64_t v4 = 0;
                  v102 = 0;
LABEL_150:
                  uint64_t v21 = 7;
                  *a2 = U_MEMORY_ALLOCATION_ERROR;
LABEL_120:
                  icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v108);
LABEL_121:
                  uint64_t v13 = v102;
                  if (v102) {
LABEL_122:
                  }
                    (*(void (**)(_DWORD *))(*(void *)v13 + 8))(v13);
                  if (!v9)
                  {
LABEL_124:
                    icu::UVector64::~UVector64((void **)v103);
                    goto LABEL_125;
                  }
LABEL_8:
                  (*(void (**)(unsigned int *))(*(void *)v9 + 8))(v9);
                  goto LABEL_124;
                }
                uint64_t v63 = (uint64_t)v62;
                icu::UnicodeString::UnicodeString((icu::UnicodeString *)v107, (UChar **)v19);
                __int16 v106 = -1;
                int32x4_t v64 = (UChar **)icu::UnicodeString::doAppend((uint64_t)v107, (uint64_t)&v106, 0, 1);
                icu::AlphabeticIndex::Bucket::Bucket(v63, v92, v64, 0);
                sub_18C7F5A70((uint64_t)&v102, v63, (int *)a2);
                icu::UnicodeString::~UnicodeString(v65, (icu::UnicodeString *)v107);
                uint64_t v21 = *(unsigned int *)a2;
                if ((int)v21 >= 1) {
                  goto LABEL_119;
                }
                long long v66 = v102;
                *((void *)v102 + 18) = v58;
                v102 = 0;
                icu::UVector::adoptElement((uint64_t (**)(void *))v9, v66, a2);
                uint64_t v21 = *(unsigned int *)a2;
                uint64_t v15 = v94;
                if ((int)v21 >= 1) {
                  goto LABEL_119;
                }
                LODWORD(v93) = 1;
              }
            }
          }
          else
          {
            unint64_t v96 = &unk_18CA876F2;
          }
        }
LABEL_88:
        if ((int)++v17 >= SDWORD2(v104[0]))
        {
          uint64_t v21 = *(unsigned int *)a2;
          int v68 = v93;
          int v67 = HIDWORD(v93);
          if ((int)v21 > 0) {
            goto LABEL_119;
          }
          goto LABEL_112;
        }
      }
      BOOL v30 = icu::UnicodeString::doEqualsSubstring(v19, 0, 1, (uint64_t)&unk_18CA876F2, 0, 1);
      v101 = &unk_18CA876F2;
      long long v31 = (UChar **)v19;
      if (!v30)
      {
LABEL_59:
        *long long v29 = (uint64_t)&unk_1EDA489F0;
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v29 + 1), v31);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v29 + 9), (UChar **)v19);
        *((_DWORD *)v29 + 34) = 0;
        v29[18] = 0;
        *((_DWORD *)v29 + 38) = -1;
        v29[20] = 0;
        goto LABEL_60;
      }
      v94 = v15;
      unsigned int v32 = *(unsigned __int16 *)(v19 + 8);
      if ((v32 & 0x8000u) == 0) {
        unsigned int v33 = v32 >> 5;
      }
      else {
        unsigned int v33 = *(_DWORD *)(v19 + 12);
      }
      if (v33 >= 2)
      {
        uint64_t v34 = (v32 & 2) != 0 ? v19 + 10 : *(void *)(v19 + 24);
        unsigned int v35 = *(unsigned __int16 *)(v34 + 2);
        if (v35 - 10241 <= 0xFE)
        {
          __int16 v36 = *(_WORD *)(v34 + 2) / 0xAu;
          v107[0] = (v35 - 10 * v36) | 0x30;
          icu::UnicodeString::unBogus((uint64_t)&v108);
          if ((v109 & 0x8000u) == 0) {
            uint64_t v37 = (unsigned __int16)v109 >> 5;
          }
          else {
            uint64_t v37 = DWORD1(v109);
          }
          icu::UnicodeString::doReplace((uint64_t)&v108, 0, v37, (uint64_t)v107, 0, 1);
          if (v35 >= 0x280A)
          {
            v107[0] = (v36 - 10 * ((unsigned __int16)(26 * v36) >> 8)) | 0x30;
            icu::UnicodeString::doReplace((uint64_t)&v108, 0, 0, (uint64_t)v107, 0, 1);
            if (v35 - 10340 <= 0xFFFFFF9B)
            {
              v107[0] = (v35 / 0x64u) | 0x30;
              icu::UnicodeString::doReplace((uint64_t)&v108, 0, 0, (uint64_t)v107, 0, 1);
            }
          }
          v107[0] = 21123;
          long long v31 = (UChar **)icu::UnicodeString::doAppend((uint64_t)&v108, (uint64_t)v107, 0, 1);
          uint64_t v15 = v94;
          goto LABEL_59;
        }
      }
      icu::UnicodeString::unBogus((uint64_t)&v108);
      unsigned int v38 = *(unsigned __int16 *)(v19 + 8);
      if (*(__int16 *)(v19 + 8) < 0)
      {
        int v39 = *(_DWORD *)(v19 + 12);
        if (v39 < 1) {
          goto LABEL_53;
        }
      }
      else if (v38 <= 0x1F)
      {
        int v39 = 0;
LABEL_53:
        uint64_t v15 = v94;
        int v40 = (__int16)v38;
        if ((v109 & 0x8000u) == 0) {
          uint64_t v41 = (unsigned __int16)v109 >> 5;
        }
        else {
          uint64_t v41 = DWORD1(v109);
        }
        unsigned int v42 = v38 >> 5;
        if (v40 < 0) {
          unsigned int v42 = *(_DWORD *)(v19 + 12);
        }
        long long v31 = (UChar **)icu::UnicodeString::doReplace((icu::UnicodeString *)&v108, 0, v41, (const icu::UnicodeString *)v19, v39, v42 - v39);
        goto LABEL_59;
      }
      int v39 = 1;
      goto LABEL_53;
    }
    int v67 = 0;
    int v68 = 0;
LABEL_112:
    uint64_t v21 = v9[2];
    if (v21 == 1) {
      goto LABEL_113;
    }
    long long v72 = icu::UMemory::operator new((uint64_t *)v21, (icu::UMemory *)0xA8, v16);
    if (v72)
    {
      uint64_t v73 = (UChar **)(*((uint64_t (**)(icu::UVector **))*this + 8))(this);
      icu::AlphabeticIndex::Bucket::Bucket((uint64_t)v72, v73, (UChar **)v15, 3);
    }
    sub_18C7F5A70((uint64_t)&v102, (uint64_t)v72, (int *)a2);
    uint64_t v74 = v102;
    v102 = 0;
    icu::UVector::adoptElement((uint64_t (**)(void *))v9, v74, a2);
    uint64_t v21 = *(unsigned int *)a2;
    if ((int)v21 <= 0)
    {
      if (v67)
      {
        uint64_t v21 = 0;
        uint64_t v76 = 0;
        do
        {
          if (*(void *)((char *)v114 + v21)) {
            uint64_t v76 = *(void *)((char *)v114 + v21);
          }
          uint64_t v77 = *(void *)((char *)v113 + v21);
          if (v77) {
            BOOL v78 = v76 == 0;
          }
          else {
            BOOL v78 = 1;
          }
          if (!v78)
          {
            *(void *)(v77 + 144) = v76;
            int v68 = 1;
          }
          v21 += 8;
        }
        while (v21 != 208);
      }
      if (!v68)
      {
LABEL_113:
        unsigned int v69 = icu::UMemory::operator new((uint64_t *)v21, (icu::UMemory *)0x18, v16);
        uint64_t v4 = v69;
        if (!v69) {
          goto LABEL_150;
        }
        uint64_t v70 = (uint64_t)v9;
        long long v71 = (icu::UVector *)v9;
        goto LABEL_115;
      }
      int v79 = v9[2];
      int v80 = v79 - 1;
      uint64_t v81 = icu::UVector::elementAt((icu::UVector *)v9, v79 - 1);
      if (v79 >= 3)
      {
        uint64_t v84 = v81;
        do
        {
          uint64_t v85 = icu::UVector::elementAt((icu::UVector *)v9, --v80);
          v83 = *(uint64_t **)(v85 + 144);
          if (!v83)
          {
            v83 = (uint64_t *)*(unsigned int *)(v85 + 136);
            if (v83 == 2 && (v83 = (uint64_t *)*(unsigned int *)(v84 + 136), v83)) {
              *(void *)(v85 + 144) = v84;
            }
            else {
              uint64_t v84 = v85;
            }
          }
        }
        while (v80 > 1);
      }
      int v86 = (icu::UVector *)icu::UMemory::operator new(v83, (icu::UMemory *)0x28, v82);
      if (v86)
      {
        int v87 = v86;
        icu::UVector::UVector(v86, a2);
        if (*(int *)a2 <= 0)
        {
          int v89 = (uint64_t *)v9[2];
          if ((int)v89 < 1) {
            goto LABEL_157;
          }
          signed int v90 = 0;
          do
          {
            uint64_t v91 = (void *)icu::UVector::elementAt((icu::UVector *)v9, v90);
            if (!v91[18]) {
              icu::UVector::addElement(v87, v91, a2);
            }
            ++v90;
          }
          while (v90 < (int)v9[2]);
          int v89 = (uint64_t *)*(unsigned int *)a2;
          if ((int)v89 < 1)
          {
LABEL_157:
            unsigned int v69 = icu::UMemory::operator new(v89, (icu::UMemory *)0x18, v88);
            if (v69)
            {
              uint64_t v4 = v69;
              uint64_t v70 = (uint64_t)v9;
              long long v71 = v87;
LABEL_115:
              sub_18C8CCB30(v69, v70, v71);
              uint64_t v9 = 0;
              goto LABEL_120;
            }
            *a2 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
        (*(void (**)(icu::UVector *))(*(void *)v87 + 8))(v87);
      }
      else
      {
        uint64_t v21 = *(unsigned int *)a2;
        if ((int)v21 <= 0)
        {
          uint64_t v4 = 0;
          goto LABEL_150;
        }
      }
    }
LABEL_119:
    uint64_t v4 = 0;
    goto LABEL_120;
  }
LABEL_125:
  icu::UVector::~UVector((icu::UVector *)v104);
  return v4;
}

uint64_t icu::AlphabeticIndex::getBucketCount(icu::AlphabeticIndex *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0) {
    return *(unsigned int *)(*(void *)(*((void *)this + 9) + 16) + 8);
  }
  else {
    return 0;
  }
}

uint64_t *icu::AlphabeticIndex::initBuckets(uint64_t *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return this;
  }
  uint64_t v2 = this;
  if (this[9]) {
    return this;
  }
  this = icu::AlphabeticIndex::createBucketList((icu::UVector **)this, a2);
  v2[9] = (uint64_t)this;
  if (*(int *)a2 > 0) {
    return this;
  }
  this = (uint64_t *)v2[1];
  if (!this || !*((_DWORD *)this + 2)) {
    return this;
  }
  icu::UVector::sortWithUComparator((icu::UVector *)this, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18C8CBE40, v2[7], a2);
  uint64_t v4 = icu::UVector::elementAt(*(icu::UVector **)(v2[9] + 8), 0);
  unint64_t v5 = *(int **)(v2[9] + 8);
  if (v5[2] <= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    signed int v8 = 1;
  }
  else
  {
    uint64_t v6 = icu::UVector::elementAt((icu::UVector *)v5, 1u);
    uint64_t v7 = (const icu::UnicodeString *)(v6 + 72);
    signed int v8 = 2;
  }
  this = (uint64_t *)v2[1];
  if (*((int *)this + 2) < 1) {
    return this;
  }
  signed int v9 = 0;
  while (1)
  {
    uint64_t v11 = icu::UVector::elementAt((icu::UVector *)this, v9);
    if (v7
      && (icu::RuleBasedCollator::compare((icu::RuleBasedCollator *)v2[8], (const icu::UnicodeString *)(v11 + 8), v7, a2) & 0x80000000) == 0)
    {
      while (1)
      {
        uint64_t v4 = v6;
        int v12 = *(icu::UVector **)(v2[9] + 8);
        if (v8 >= *((_DWORD *)v12 + 2)) {
          break;
        }
        signed int v13 = v8 + 1;
        uint64_t v6 = icu::UVector::elementAt(v12, v8);
        uint64_t v7 = (const icu::UnicodeString *)(v6 + 72);
        ++v8;
        if ((icu::RuleBasedCollator::compare((icu::RuleBasedCollator *)v2[8], (const icu::UnicodeString *)(v11 + 8), (const icu::UnicodeString *)(v6 + 72), a2) & 0x80000000) != 0)
        {
          signed int v8 = v13;
          goto LABEL_18;
        }
      }
      uint64_t v7 = 0;
    }
LABEL_18:
    uint64_t v14 = *(uint64_t **)(v4 + 144);
    if (v14) {
      uint64_t v15 = *(void *)(v4 + 144);
    }
    else {
      uint64_t v15 = v4;
    }
    unint64_t v16 = *(icu::UVector **)(v15 + 160);
    if (v16) {
      goto LABEL_25;
    }
    this = icu::UMemory::operator new(v14, (icu::UMemory *)0x28, v10);
    if (!this) {
      break;
    }
    unint64_t v16 = (icu::UVector *)icu::UVector::UVector((icu::UVector *)this, a2);
    if (*(int *)a2 > 0)
    {
      unsigned int v17 = *(uint64_t (**)(void))(*(void *)v16 + 8);
      return (uint64_t *)v17();
    }
    *(void *)(v15 + 160) = v16;
LABEL_25:
    icu::UVector::addElement(v16, (void *)v11, a2);
    ++v9;
    this = (uint64_t *)v2[1];
    if (v9 >= *((_DWORD *)this + 2)) {
      return this;
    }
  }
  if (*(int *)a2 <= 0) {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return this;
}

uint64_t icu::AlphabeticIndex::getRecordCount(icu::AlphabeticIndex *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0 && (uint64_t v3 = *((void *)this + 1)) != 0) {
    return *(unsigned int *)(v3 + 8);
  }
  else {
    return 0;
  }
}

void icu::AlphabeticIndex::initLabels(icu::UVector **this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t NFKDInstance = icu::Normalizer2::getNFKDInstance((icu::Normalizer2 *)a3, a2);
  if (*(int *)a3 <= 0)
  {
    uint64_t v7 = NFKDInstance;
    signed int v8 = (const icu::UnicodeString *)icu::UVector::elementAt(this[6], 0);
    signed int v9 = (const icu::UnicodeString *)icu::UVector::elementAt(this[6], *((_DWORD *)this[6] + 2) - 1);
    memset(v63, 0, sizeof(v63));
    icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v63, this[5]);
    if (*(int *)a3 > 0) {
      goto LABEL_3;
    }
    BOOL v61 = v9;
    while (1)
    {
      if (!icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v63))
      {
        if (*(int *)a3 <= 0)
        {
          int v55 = *((_DWORD *)a2 + 2);
          int v56 = v55 - 1;
          if (v55 - 1 > *((_DWORD *)this + 8) && v55 >= 1)
          {
            int v58 = 0;
            int v59 = -1;
            int v60 = 1;
            do
            {
              if (*((_DWORD *)this + 8) * v60 / v56 == v59)
              {
                icu::UVector::removeElementAt((uint64_t (**)(void))a2, v58);
                int v55 = *((_DWORD *)a2 + 2);
              }
              else
              {
                ++v58;
                int v59 = *((_DWORD *)this + 8) * v60 / v56;
              }
              ++v60;
            }
            while (v58 < v55);
          }
        }
        goto LABEL_3;
      }
      String = icu::UnicodeSetIterator::getString((icu::UnicodeSetIterator *)v63, v10, v11);
      signed int v13 = (icu::UnicodeString *)String;
      BOOL v62 = 0;
      unsigned int v14 = *((unsigned __int16 *)String + 4);
      int v15 = (__int16)v14;
      int32_t v16 = v14 >> 5;
      if (v15 >= 0) {
        int32_t v17 = v16;
      }
      else {
        int32_t v17 = *((_DWORD *)String + 3);
      }
      char v18 = 1;
      if (icu::UnicodeString::hasMoreChar32Than((icu::UnicodeString *)String, 0, v17, 1))
      {
        uint64_t v20 = v17;
        uint64_t v21 = v17 - 1;
        unsigned int v22 = *((unsigned __int16 *)v13 + 4);
        if ((v22 & 0x8000u) == 0) {
          unsigned int v23 = v22 >> 5;
        }
        else {
          unsigned int v23 = *((_DWORD *)v13 + 3);
        }
        if (v23 > v21
          && ((v22 & 2) != 0 ? (int v24 = (char *)v13 + 10) : (int v24 = (char *)*((void *)v13 + 3)),
              *(_WORD *)&v24[2 * v21] == 42
           && ((unsigned int v25 = (uint64_t *)(v20 - 2), v23 <= v25)
            || (unsigned int v25 = (uint64_t *)*(unsigned __int16 *)&v24[2 * (void)v25], v25 != 42))))
        {
          __int16 v36 = (icu::UnicodeString *)icu::UMemory::operator new(v25, (icu::UMemory *)0x40, v19);
          if (!v36)
          {
            *a3 = U_MEMORY_ALLOCATION_ERROR;
            goto LABEL_3;
          }
          BOOL v62 = icu::UnicodeString::UnicodeString(v36, v13, 0, v21);
          signed int v13 = v62;
        }
        else
        {
          char v18 = 0;
        }
      }
      if ((icu::RuleBasedCollator::compare(this[8], v13, v8, a3) & 0x80000000) != 0) {
        goto LABEL_74;
      }
      if ((icu::RuleBasedCollator::compare(this[8], v13, v9, a3) & 0x80000000) == 0) {
        goto LABEL_74;
      }
      if ((v18 & 1) == 0)
      {
        long long v26 = this[8];
        icu::AlphabeticIndex::separated((uint64_t)v13, (uint64_t)&v70);
        LODWORD(v26) = icu::RuleBasedCollator::compare(v26, v13, (const icu::UnicodeString *)&v70, a3);
        icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v70);
        if (!v26) {
          goto LABEL_74;
        }
      }
      int v28 = *((_DWORD *)a2 + 2);
      if (!v28)
      {
        LODWORD(v32) = -1;
LABEL_56:
        int v46 = sub_18C8CBCA0((UChar **)v13, &v62, a3);
        icu::UVector::insertElementAt((uint64_t (**)(void *))a2, v46, ~v32, a3);
        goto LABEL_74;
      }
      uint64_t v29 = 0;
      BOOL v30 = this[8];
      while (1)
      {
        int v31 = v28 + v29;
        if (v28 + (int)v29 < 0 != __OFADD__(v28, v29)) {
          ++v31;
        }
        uint64_t v32 = (v31 >> 1);
        uint64_t v33 = icu::UVector::elementAt((icu::UVector *)a2, v31 >> 1);
        LODWORD(v70) = 0;
        int v34 = (*(uint64_t (**)(icu::UVector *, icu::UnicodeString *, uint64_t, void **))(*(void *)v30 + 56))(v30, v13, v33, &v70);
        if (!v34) {
          goto LABEL_40;
        }
        if ((v34 & 0x80000000) == 0) {
          break;
        }
        if (v32 == v29)
        {
          LODWORD(v32) = ~v29;
          if (~v29 < 0) {
            goto LABEL_55;
          }
          goto LABEL_41;
        }
        uint64_t v35 = v29;
        int v28 = v32;
LABEL_36:
        uint64_t v29 = v35;
      }
      uint64_t v35 = v32;
      if (v32 != v29) {
        goto LABEL_36;
      }
      LODWORD(v32) = -2 - v29;
LABEL_40:
      if ((v32 & 0x80000000) != 0)
      {
LABEL_55:
        signed int v9 = v61;
        goto LABEL_56;
      }
LABEL_41:
      uint64_t v37 = icu::UVector::elementAt((icu::UVector *)a2, v32);
      int v64 = 0;
      uint64_t v74 = 0;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v71 = 0u;
      uint64_t v70 = &unk_1EDA47700;
      LOWORD(v71) = 2;
      (*(void (**)(uint64_t, icu::UnicodeString *, void **, int *))(*(void *)v7 + 24))(v7, v13, &v70, &v64);
      uint64_t v69 = 0;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      long long v65 = &unk_1EDA47700;
      LOWORD(v66) = 2;
      (*(void (**)(uint64_t, uint64_t, void **, int *))(*(void *)v7 + 24))(v7, v37, &v65, &v64);
      int v38 = 0;
      unint64_t v39 = v64;
      if (v64 <= 0)
      {
        int v40 = icu::UnicodeString::countChar32((icu::UnicodeString *)&v70, 0, 0x7FFFFFFF);
        int v41 = icu::UnicodeString::countChar32((icu::UnicodeString *)&v65, 0, 0x7FFFFFFF);
        if (v40 == v41)
        {
          unint64_t v39 = (unsigned __int16)v66;
          if (v66)
          {
            unsigned int v45 = (v71 & 1) == 0;
          }
          else
          {
            if ((v71 & 0x8000u) == 0) {
              int v42 = (unsigned __int16)v71 >> 5;
            }
            else {
              int v42 = DWORD1(v71);
            }
            if ((v66 & 0x8000u) == 0) {
              int v43 = (unsigned __int16)v66 >> 5;
            }
            else {
              int v43 = DWORD1(v66);
            }
            if ((v66 & 2) != 0) {
              unsigned int v44 = (char *)&v66 + 2;
            }
            else {
              unsigned int v44 = (char *)v67;
            }
            unsigned int v45 = icu::UnicodeString::doCompareCodePointOrder((uint64_t)&v70, 0, v42, (uint64_t)v44, v43 & (v43 >> 31), v43 & ~(v43 >> 31));
          }
          if (v45)
          {
LABEL_71:
            int v38 = (v45 >> 7) & 1;
          }
          else
          {
            unint64_t v39 = *(unsigned __int16 *)(v37 + 8);
            if ((v39 & 1) == 0)
            {
              unsigned int v47 = *((unsigned __int16 *)v13 + 4);
              int v48 = (__int16)v47;
              int v49 = v47 >> 5;
              if (v48 >= 0) {
                int v50 = v49;
              }
              else {
                int v50 = *((_DWORD *)v13 + 3);
              }
              if ((v39 & 0x8000u) == 0) {
                signed int v51 = v39 >> 5;
              }
              else {
                signed int v51 = *(_DWORD *)(v37 + 12);
              }
              if ((v39 & 2) != 0) {
                uint64_t v52 = v37 + 10;
              }
              else {
                uint64_t v52 = *(void *)(v37 + 24);
              }
              unsigned int v45 = icu::UnicodeString::doCompareCodePointOrder((uint64_t)v13, 0, v50, v52, v51 & (v51 >> 31), v51 & ~(v51 >> 31));
              goto LABEL_71;
            }
            int v38 = 0;
          }
        }
        else
        {
          int v38 = v40 < v41;
        }
      }
      icu::UnicodeString::~UnicodeString((void *)v39, (icu::UnicodeString *)&v65);
      icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)&v70);
      signed int v9 = v61;
      if (v38)
      {
        uint64_t v54 = sub_18C8CBCA0((UChar **)v13, &v62, a3);
        icu::UVector::setElementAt((uint64_t)a2, v54, v32);
      }
LABEL_74:
      if (v62) {
        (*(void (**)(icu::UnicodeString *))(*(void *)v62 + 8))(v62);
      }
      if (*(int *)a3 > 0)
      {
LABEL_3:
        icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v63);
        return;
      }
    }
  }
}

uint64_t icu::AlphabeticIndex::separated@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  unsigned int v4 = *(unsigned __int16 *)(this + 8);
  int v5 = (__int16)v4;
  LODWORD(a2) = v4 >> 5;
  if (v5 >= 0) {
    a2 = a2;
  }
  else {
    a2 = *(unsigned int *)(this + 12);
  }
  if (a2)
  {
    uint64_t v6 = this;
    int v7 = 0;
    while (1)
    {
      unsigned int v8 = icu::UnicodeString::char32At((uint64_t *)a2, (icu::UnicodeString *)v6, v7);
      icu::UnicodeString::append(v3, v8);
      this = icu::UnicodeString::moveIndex32((icu::UnicodeString *)v6, v7, 1);
      unsigned int v9 = *(unsigned __int16 *)(v6 + 8);
      int v10 = (__int16)v9;
      int v11 = v9 >> 5;
      if (v10 < 0) {
        int v11 = *(_DWORD *)(v6 + 12);
      }
      if ((int)this >= v11) {
        break;
      }
      int v7 = this;
      __int16 v12 = 847;
      icu::UnicodeString::doAppend(v3, (uint64_t)&v12, 0, 1);
    }
  }
  return this;
}

icu::UnicodeString *sub_18C8CBCA0(UChar **a1, icu::UnicodeString **a2, _DWORD *a3)
{
  uint64_t v3 = (uint64_t *)*a3;
  if ((int)v3 > 0) {
    return 0;
  }
  uint64_t result = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t result = (icu::UnicodeString *)icu::UMemory::operator new(v3, (icu::UMemory *)0x40, (unint64_t)a2);
    if (result) {
      return icu::UnicodeString::UnicodeString(result, a1);
    }
    else {
      *a3 = 7;
    }
  }
  return result;
}

uint64_t icu::AlphabeticIndex::Bucket::Bucket(uint64_t a1, UChar **a2, UChar **a3, int a4)
{
  *(void *)a1 = &unk_1EDA489F0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 72), a3);
  *(_DWORD *)(a1 + 136) = a4;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = -1;
  *(void *)(a1 + 160) = 0;
  return a1;
}

{
  *(void *)a1 = &unk_1EDA489F0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 72), a3);
  *(_DWORD *)(a1 + 136) = a4;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = -1;
  *(void *)(a1 + 160) = 0;
  return a1;
}

BOOL sub_18C8CBD7C(icu::RuleBasedCollator *a1, unsigned int a2, const icu::UnicodeString *a3, icu::UVector64 *this, UErrorCode *a5)
{
  icu::UVector64::removeAllElements((uint64_t)this);
  icu::RuleBasedCollator::internalGetCEs(a1, a3, this, a5);
  if (*(int *)a5 > 0) {
    return 0;
  }
  unint64_t v11 = *((unsigned int *)this + 2);
  if ((int)v11 < 1)
  {
    return 0;
  }
  else
  {
    uint64_t v12 = 0;
    int v13 = 0;
    BOOL v14 = 1;
    do
    {
      if (*(_DWORD *)(*((void *)this + 3) + 8 * v12 + 4) > a2)
      {
        if (v13) {
          return v14;
        }
        int v13 = 1;
      }
      BOOL v14 = ++v12 < v11;
    }
    while (v11 != v12);
  }
  return v14;
}

uint64_t sub_18C8CBE40(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  int v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 56))(a1, v3 + 8, v4 + 8, &v6);
}

uint64_t icu::AlphabeticIndex::internalResetBucketIterator(uint64_t this)
{
  *(_DWORD *)(this + 16) = -1;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t icu::AlphabeticIndex::addChineseIndexCharacters(icu::AlphabeticIndex *this, UErrorCode *a2)
{
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v14);
  icu::RuleBasedCollator::internalAddContractions(*((uint64_t ***)this + 8), 64976, (icu::UnicodeSet *)v14, a2);
  if (*(int *)a2 > 0 || icu::UnicodeSet::isEmpty((icu::UnicodeSet *)v14))
  {
    uint64_t v4 = 0;
  }
  else
  {
    icu::UnicodeSet::addAll(*((icu::UVector ***)this + 5), (const icu::UnicodeSet *)v14);
    memset(v13, 0, sizeof(v13));
    icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v13, (const icu::UnicodeSet *)v14);
    while (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v13))
    {
      String = icu::UnicodeSetIterator::getString((icu::UnicodeSetIterator *)v13, v6, v7);
      unsigned int v9 = *((unsigned __int16 *)String + 4);
      if ((v9 & 0x8000u) == 0) {
        unsigned int v10 = v9 >> 5;
      }
      else {
        unsigned int v10 = *((_DWORD *)String + 3);
      }
      if (v10)
      {
        unsigned int v11 = v10 - 1;
        uint64_t v12 = (v9 & 2) != 0 ? (uint64_t)String + 10 : String[3];
        if (*(unsigned __int16 *)(v12 + 2 * (int)v11) - 65 <= 0x19)
        {
          icu::UnicodeSet::add(*((icu::UnicodeSet **)this + 5), 0x41u, 0x5Au);
          break;
        }
      }
    }
    icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v13);
    uint64_t v4 = 1;
  }
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v14);
  return v4;
}

uint64_t icu::AlphabeticIndex::operator==()
{
  return 0;
}

uint64_t icu::AlphabeticIndex::operator!=()
{
  return 0;
}

uint64_t icu::AlphabeticIndex::getCollator(icu::AlphabeticIndex *this)
{
  return *((void *)this + 7);
}

uint64_t icu::AlphabeticIndex::getInflowLabel(icu::AlphabeticIndex *this)
{
  return (uint64_t)this + 80;
}

uint64_t icu::AlphabeticIndex::getOverflowLabel(icu::AlphabeticIndex *this)
{
  return (uint64_t)this + 144;
}

uint64_t icu::AlphabeticIndex::getUnderflowLabel(icu::AlphabeticIndex *this)
{
  return (uint64_t)this + 208;
}

UChar **icu::AlphabeticIndex::setInflowLabel(UChar **this, UChar **a2, UErrorCode *a3)
{
  icu::UnicodeString::operator=(this + 10, a2);
  uint64_t v4 = this[9];
  if (v4)
  {
    (*(void (**)(UChar *))(*(void *)v4 + 8))(v4);
    this[9] = 0;
    *((_DWORD *)this + 4) = -1;
    this[3] = 0;
  }
  return this;
}

UChar **icu::AlphabeticIndex::setOverflowLabel(UChar **this, UChar **a2, UErrorCode *a3)
{
  icu::UnicodeString::operator=(this + 18, a2);
  uint64_t v4 = this[9];
  if (v4)
  {
    (*(void (**)(UChar *))(*(void *)v4 + 8))(v4);
    this[9] = 0;
    *((_DWORD *)this + 4) = -1;
    this[3] = 0;
  }
  return this;
}

UChar **icu::AlphabeticIndex::setUnderflowLabel(UChar **this, UChar **a2, UErrorCode *a3)
{
  icu::UnicodeString::operator=(this + 26, a2);
  uint64_t v4 = this[9];
  if (v4)
  {
    (*(void (**)(UChar *))(*(void *)v4 + 8))(v4);
    this[9] = 0;
    *((_DWORD *)this + 4) = -1;
    this[3] = 0;
  }
  return this;
}

uint64_t icu::AlphabeticIndex::getMaxLabelCount(icu::AlphabeticIndex *this)
{
  return *((unsigned int *)this + 8);
}

icu::AlphabeticIndex *icu::AlphabeticIndex::setMaxLabelCount(icu::AlphabeticIndex *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (a2 <= 0)
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      *((_DWORD *)this + 8) = a2;
      uint64_t v5 = *((void *)this + 9);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        *((void *)this + 9) = 0;
        *((_DWORD *)this + 4) = -1;
        *((void *)this + 3) = 0;
      }
    }
  }
  return this;
}

icu::UVector *icu::AlphabeticIndex::firstStringsInScript(uint64_t ***this, UErrorCode *a2)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 > 0) {
    return 0;
  }
  unint64_t v6 = (icu::UVector *)icu::UMemory::operator new(v2, (icu::UMemory *)0x28, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 <= 0)
    {
      uint64_t v3 = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return v3;
    }
    return 0;
  }
  int v7 = v6;
  icu::UVector::UVector(v6, a2);
  if (*(int *)a2 > 0) {
    goto LABEL_9;
  }
  icu::UVector::setDeleter(v7, (void (*)(void *))uprv_deleteUObject);
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v20);
  icu::RuleBasedCollator::internalAddContractions(this[8], 64977, (icu::UnicodeSet *)v20, a2);
  if (*(int *)a2 > 0)
  {
LABEL_8:
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v20);
LABEL_9:
    uint64_t v3 = 0;
LABEL_10:
    (*(void (**)(icu::UVector *))(*(void *)v7 + 8))(v7);
    return v3;
  }
  if (icu::UnicodeSet::isEmpty((icu::UnicodeSet *)v20))
  {
    *a2 = U_UNSUPPORTED_ERROR;
    goto LABEL_8;
  }
  memset(v19, 0, sizeof(v19));
  icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v19, (const icu::UnicodeSet *)v20);
  if (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v19))
  {
    while (1)
    {
      String = icu::UnicodeSetIterator::getString((icu::UnicodeSetIterator *)v19, v9, v10);
      UChar32 v13 = icu::UnicodeString::char32At(v12, (icu::UnicodeString *)String, 1);
      if (u_charType(v13) <= 5)
      {
        int32_t v16 = (icu::UnicodeString *)icu::UMemory::operator new(v15, (icu::UMemory *)0x40, v14);
        int32_t v17 = v16;
        if (v16)
        {
          icu::UnicodeString::UnicodeString(v16, (UChar **)String);
        }
        else if (*(int *)a2 <= 0)
        {
          *a2 = U_MEMORY_ALLOCATION_ERROR;
        }
        icu::UVector::adoptElement((uint64_t (**)(void *))v7, v17, a2);
        if (*(int *)a2 > 0) {
          break;
        }
      }
      if (!icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v19)) {
        goto LABEL_22;
      }
    }
    char v18 = v7;
    int v7 = 0;
  }
  else
  {
LABEL_22:
    char v18 = 0;
  }
  uint64_t v3 = v7;
  icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v19);
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v20);
  int v7 = v18;
  if (v18) {
    goto LABEL_10;
  }
  return v3;
}

uint64_t sub_18C8CC3DC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if (v3 == v4) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 0;
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
}

icu::AlphabeticIndex::Record *icu::AlphabeticIndex::Record::Record(icu::AlphabeticIndex::Record *this, UChar **a2, const void *a3)
{
  *((void *)this + 9) = a3;
  return this;
}

{
  icu::UnicodeString::UnicodeString((icu::AlphabeticIndex::Record *)((char *)this + 8), a2);
  *((void *)this + 9) = a3;
  return this;
}

void icu::AlphabeticIndex::Record::~Record(icu::AlphabeticIndex::Record *this)
{
}

{
  icu::UnicodeString::~UnicodeString((icu::AlphabeticIndex::Record *)((char *)this + 8));
}

icu::AlphabeticIndex *icu::AlphabeticIndex::addRecord(icu::AlphabeticIndex *this, UChar **a2, uint64_t a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return this;
  }
  unsigned int v8 = (uint64_t *)*((void *)this + 1);
  if (v8) {
    goto LABEL_3;
  }
  unsigned int v11 = (icu::UVector *)icu::UMemory::operator new(0, (icu::UMemory *)0x28, (unint64_t)a2);
  if (v11)
  {
    uint64_t v12 = (icu::UVector *)icu::UVector::UVector(v11, a4);
    if (*(int *)a4 > 0)
    {
      (*(void (**)(icu::UVector *))(*(void *)v12 + 8))(v12);
      return this;
    }
    *((void *)this + 1) = v12;
    icu::UVector::setDeleter(v12, (void (*)(void *))sub_18C8CC674);
LABEL_3:
    unint64_t v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x50, (unint64_t)a2);
    unsigned int v10 = v9;
    if (v9)
    {
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v9 + 1), a2);
      v10[9] = a3;
    }
    else if (*(int *)a4 <= 0)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
    icu::UVector::adoptElement(*((uint64_t (***)(void *))this + 1), v10, a4);
    if (*(int *)a4 <= 0)
    {
      uint64_t v13 = *((void *)this + 9);
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        *((void *)this + 9) = 0;
        *((_DWORD *)this + 4) = -1;
        *((void *)this + 3) = 0;
      }
    }
    return this;
  }
  if (*(int *)a4 <= 0) {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return this;
}

void sub_18C8CC674(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
    icu::UMemory::operator delete((void *)a1);
  }
}

icu::AlphabeticIndex *icu::AlphabeticIndex::clearRecords(icu::AlphabeticIndex *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v4 = *((void *)this + 1);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 8))
      {
        icu::UVector::removeAllElements(v4);
        uint64_t v5 = *((void *)this + 9);
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
          *((void *)this + 9) = 0;
          *((_DWORD *)this + 4) = -1;
          *((void *)this + 3) = 0;
        }
      }
    }
  }
  return this;
}

uint64_t icu::AlphabeticIndex::getBucketIndex(icu::AlphabeticIndex *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  icu::AlphabeticIndex::initBuckets((uint64_t *)this, a3);
  if (*(int *)a3 > 0) {
    return 0;
  }
  uint64_t v8 = *((void *)this + 8);
  uint64_t v7 = *((void *)this + 9);

  return sub_18C8C99F8(v7, (uint64_t)a2, v8, (uint64_t)a3);
}

uint64_t icu::AlphabeticIndex::getBucketIndex(icu::AlphabeticIndex *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t icu::AlphabeticIndex::nextBucket(icu::AlphabeticIndex *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  if (!*((void *)this + 9) && *((void *)this + 3))
  {
    uint64_t result = 0;
    *a2 = U_ENUM_OUT_OF_SYNC_ERROR;
    return result;
  }
  icu::AlphabeticIndex::initBuckets((uint64_t *)this, a2);
  if (*(int *)a2 > 0) {
    return 0;
  }
  signed int v5 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v5;
  int v6 = *(icu::UVector **)(*((void *)this + 9) + 16);
  signed int v7 = *((_DWORD *)v6 + 2);
  if (v5 >= v7)
  {
    uint64_t result = 0;
    *((_DWORD *)this + 4) = v7;
  }
  else
  {
    *((void *)this + 3) = icu::UVector::elementAt(v6, v5);
    (*(void (**)(icu::AlphabeticIndex *))(*(void *)this + 224))(this);
    return 1;
  }
  return result;
}

uint64_t icu::AlphabeticIndex::getBucketLabel(icu::AlphabeticIndex *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1) {
    return v1 + 8;
  }
  else {
    return (uint64_t)this + 336;
  }
}

uint64_t icu::AlphabeticIndex::getBucketLabelType(icu::AlphabeticIndex *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1) {
    return *(unsigned int *)(v1 + 136);
  }
  else {
    return 0;
  }
}

uint64_t icu::AlphabeticIndex::getBucketRecordCount(icu::AlphabeticIndex *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 160)) != 0) {
    return *(unsigned int *)(v2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t icu::AlphabeticIndex::resetBucketIterator(uint64_t this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    *(_DWORD *)(this + 16) = -1;
    *(void *)(this + 24) = 0;
  }
  return this;
}

uint64_t icu::AlphabeticIndex::nextRecord(icu::AlphabeticIndex *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 3);
  if (!v2)
  {
    UErrorCode v6 = U_INVALID_STATE_ERROR;
LABEL_12:
    *a2 = v6;
    return v2;
  }
  if (!*((void *)this + 9))
  {
    uint64_t v2 = 0;
    UErrorCode v6 = U_ENUM_OUT_OF_SYNC_ERROR;
    goto LABEL_12;
  }
  uint64_t v2 = *(void *)(v2 + 160);
  if (v2)
  {
    int v3 = *((_DWORD *)this + 5);
    int v4 = *(_DWORD *)(v2 + 8);
    uint64_t v2 = v3 + 1 < v4;
    if (v3 + 1 < v4) {
      int v5 = v3 + 1;
    }
    else {
      int v5 = v4;
    }
    *((_DWORD *)this + 5) = v5;
  }
  return v2;
}

uint64_t icu::AlphabeticIndex::getRecordName(icu::AlphabeticIndex *this)
{
  uint64_t result = (uint64_t)this + 336;
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    int v4 = *(icu::UVector **)(v3 + 160);
    if (v4)
    {
      signed int v5 = *((_DWORD *)this + 5);
      if ((v5 & 0x80000000) == 0 && v5 < *((_DWORD *)v4 + 2)) {
        return icu::UVector::elementAt(v4, v5) + 8;
      }
    }
  }
  return result;
}

icu::UVector *icu::AlphabeticIndex::getRecordData(icu::AlphabeticIndex *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t result = *(icu::UVector **)(v1 + 160);
  if (!result) {
    return result;
  }
  signed int v4 = *((_DWORD *)this + 5);
  if (v4 < 0 || v4 >= *((_DWORD *)result + 2)) {
    return 0;
  }
  else {
    return *(icu::UVector **)(icu::UVector::elementAt(result, v4) + 72);
  }
}

uint64_t icu::AlphabeticIndex::resetRecordIterator(uint64_t this)
{
  *(_DWORD *)(this + 20) = -1;
  return this;
}

void icu::AlphabeticIndex::Bucket::~Bucket(icu::AlphabeticIndex::Bucket *this)
{
  *(void *)this = &unk_1EDA489F0;
  uint64_t v2 = *((void *)this + 20);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  icu::UnicodeString::~UnicodeString((icu::AlphabeticIndex::Bucket *)((char *)this + 72));
  icu::UnicodeString::~UnicodeString((icu::AlphabeticIndex::Bucket *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::AlphabeticIndex::Bucket::~Bucket(this);

  icu::UMemory::operator delete(v1);
}

void *sub_18C8CCB30(void *a1, uint64_t a2, icu::UVector *this)
{
  *a1 = &unk_1EDA48898;
  a1[1] = a2;
  a1[2] = this;
  if (*((int *)this + 2) >= 1)
  {
    signed int v5 = 0;
    do
    {
      *(_DWORD *)(icu::UVector::elementAt(this, v5) + 152) = v5;
      ++v5;
    }
    while (v5 < *((_DWORD *)this + 2));
  }
  return a1;
}

uint64_t sub_18C8CCBB4(_DWORD *a1)
{
  uint64_t result = 0;
  int v9 = 0;
  int i = a1[6];
  a1[4] = -1;
  a1[5] = i;
  int v4 = a1[3];
  if (i != v4)
  {
    if (i <= a1[2]) {
      goto LABEL_7;
    }
    do
    {
      unsigned int v5 = (*(uint64_t (**)(void, void))(**(void **)a1 + 80))(*(void *)a1, (i - 1));
      if (uscript_getScript(v5, &v9) > 1) {
        break;
      }
      int i = a1[5] - 1;
      a1[5] = i;
    }
    while (i > a1[2]);
    for (int i = a1[6]; ; a1[6] = i)
    {
      int v4 = a1[3];
LABEL_7:
      if (i >= v4) {
        break;
      }
      unsigned int v6 = (*(uint64_t (**)(void))(**(void **)a1 + 80))();
      unsigned int Script = uscript_getScript(v6, &v9);
      if (Script >= 2)
      {
        int v8 = a1[4];
        if (v8 == -1)
        {
          a1[4] = Script;
        }
        else if (Script != v8)
        {
          return 1;
        }
      }
      int i = a1[6] + 1;
    }
    return 1;
  }
  return result;
}

void *icu::AnyTransliterator::getStaticClassID(icu::AnyTransliterator *this)
{
  return &unk_1E9191FD7;
}

void *sub_18C8CCCDC()
{
  return &unk_1E9191FD7;
}

icu::Transliterator *sub_18C8CCCE8(icu::Transliterator *a1, UChar **a2, UChar **a3, uint64_t a4, int a5, int *a6)
{
  unsigned int v11 = icu::Transliterator::Transliterator(a1, a2, 0);
  *(void *)unsigned int v11 = &unk_1EDA48A78;
  uint64_t v12 = (UChar **)((char *)v11 + 96);
  *((void *)v11 + 12) = &unk_1EDA47700;
  *((_WORD *)v11 + 52) = 2;
  *((_DWORD *)v11 + 40) = a5;
  uint64_t v13 = uhash_openSize((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, 7, a6);
  *((void *)a1 + 11) = v13;
  if (*a6 <= 0)
  {
    uhash_setValueDeleter((uint64_t)v13, (uint64_t)sub_18C8CCE44);
    icu::UnicodeString::operator=(v12, a3);
    unsigned int v14 = *(unsigned __int16 *)(a4 + 8);
    int v15 = (__int16)v14;
    int v16 = v14 >> 5;
    if (v15 < 0) {
      int v16 = *(_DWORD *)(a4 + 12);
    }
    if (v16 >= 1)
    {
      __int16 v23 = 47;
      uint64_t v17 = icu::UnicodeString::doAppend((uint64_t)v12, (uint64_t)&v23, 0, 1);
      unsigned int v18 = *(unsigned __int16 *)(a4 + 8);
      int v19 = (__int16)v18;
      unsigned int v20 = v18 >> 5;
      if (v19 >= 0) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = *(unsigned int *)(a4 + 12);
      }
      icu::UnicodeString::doAppend(v17, (const icu::UnicodeString *)a4, 0, v21);
    }
  }
  return a1;
}

uint64_t sub_18C8CCE44(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_18C8CCE70(unsigned char **a1)
{
  *a1 = &unk_1EDA48A78;
  uhash_close(a1[11]);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 12));

  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
}

void sub_18C8CCED4(unsigned char **a1)
{
  sub_18C8CCE70(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C8CCEFC(uint64_t a1, uint64_t a2)
{
  int v4 = icu::Transliterator::Transliterator((icu::Transliterator *)a1, (UChar **)a2);
  *(void *)int v4 = &unk_1EDA48A78;
  icu::UnicodeString::UnicodeString((icu::Transliterator *)((char *)v4 + 96), (UChar **)(a2 + 96));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  int v7 = 0;
  unsigned int v5 = uhash_openSize((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, 7, &v7);
  *(void *)(a1 + 88) = v5;
  if (v7 <= 0) {
    uhash_setValueDeleter((uint64_t)v5, (uint64_t)sub_18C8CCE44);
  }
  return a1;
}

uint64_t *sub_18C8CCFB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0xA8, a2);
  if (result) {
    return (uint64_t *)sub_18C8CCEFC((uint64_t)result, a1);
  }
  return result;
}

uint64_t sub_18C8CCFE8(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v9 = *((unsigned int *)a3 + 2);
  uint64_t v8 = *((unsigned int *)a3 + 3);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = a2;
  uint64_t v19 = *a3;
  LODWORD(v21) = v19;
  while (1)
  {
    uint64_t result = sub_18C8CCBB4(&v18);
    if (!result) {
      break;
    }
    int v11 = v21;
    if ((int)v21 > (int)v9)
    {
      uint64_t v12 = sub_18C8CD11C(a1, v20);
      if (v12)
      {
        uint64_t v13 = v12;
        BOOL v14 = v11 >= (int)v8 && a4 != 0;
        *((_DWORD *)a3 + 2) = uprv_max(v9, SHIDWORD(v20));
        int v15 = uprv_min(v8, v11);
        *((_DWORD *)a3 + 3) = v15;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, BOOL))(*(void *)v13 + 88))(v13, a2, a3, v14);
        int v16 = *((_DWORD *)a3 + 3) - v15;
        LODWORD(v21) = v16 + v11;
        HIDWORD(v19) += v16;
        BOOL v17 = v11 < (int)v8;
        uint64_t v8 = (v16 + v8);
        if (!v17) {
          break;
        }
      }
      else
      {
        *((_DWORD *)a3 + 2) = v11;
      }
    }
  }
  *((_DWORD *)a3 + 3) = v8;
  return result;
}

uint64_t sub_18C8CD11C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = 0;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a2 != -1 && *(_DWORD *)(a1 + 160) != a2)
  {
    umtx_lock(0);
    uint64_t v2 = uhash_iget(*(void *)(a1 + 88), a2);
    umtx_unlock(0);
    if (!v2)
    {
      UErrorCode v24 = U_ZERO_ERROR;
      memset(v27, 0, sizeof(v27));
      ShortName = uscript_getShortName(a2);
      icu::UnicodeString::UnicodeString(v27, ShortName, 0xFFFFFFFFLL, 0);
      memset(v26, 0, sizeof(v26));
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v26, (UChar **)v27);
      __int16 v25 = 45;
      uint64_t v6 = icu::UnicodeString::doAppend((uint64_t)v26, (uint64_t)&v25, 0, 1);
      unsigned int v7 = *(unsigned __int16 *)(a1 + 104);
      int v8 = (__int16)v7;
      unsigned int v9 = v7 >> 5;
      if (v8 >= 0) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = *(unsigned int *)(a1 + 108);
      }
      icu::UnicodeString::doAppend(v6, (const icu::UnicodeString *)(a1 + 96), 0, v10);
      uint64_t v11 = icu::Transliterator::createInstance((uint64_t)v26, 0, &v24);
      uint64_t v2 = v11;
      if (v24 > U_ZERO_ERROR || !v11)
      {
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        icu::UnicodeString::operator=((UChar **)v26, (UChar **)v27);
        uint64_t v12 = icu::UnicodeString::doAppend((uint64_t)v26, (uint64_t)"-", 0, 0xFFFFFFFFLL);
        unsigned int v13 = *(unsigned __int16 *)(a1 + 104);
        int v14 = (__int16)v13;
        unsigned int v15 = v13 >> 5;
        if (v14 >= 0) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = *(unsigned int *)(a1 + 108);
        }
        icu::UnicodeString::doAppend(v12, (const icu::UnicodeString *)(a1 + 96), 0, v16);
        uint64_t v17 = icu::Transliterator::createInstance((uint64_t)v26, 0, &v24);
        uint64_t v2 = v17;
        BOOL v18 = v24 > U_ZERO_ERROR || v17 == 0;
        uint64_t v19 = v18;
        if (v18 && v17)
        {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
LABEL_25:
          uint64_t v2 = 0;
LABEL_29:
          icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)v26);
          icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v27);
          return v2;
        }
        if (v19) {
          goto LABEL_25;
        }
      }
      umtx_lock(0);
      uint64_t v20 = uhash_iget(*(void *)(a1 + 88), a2);
      if (v20)
      {
        uint64_t v21 = v20;
        umtx_unlock(0);
        (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
        uint64_t v2 = v21;
      }
      else
      {
        uhash_iput(*(void *)(a1 + 88), a2, v2, (int *)&v24);
        umtx_unlock(0);
      }
      goto LABEL_29;
    }
  }
  return v2;
}

void sub_18C8CD3CC()
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  int v39 = 0;
  memset(&v38[1], 0, 88);
  v0 = (icu::Transliterator *)uhash_init((int32x2_t *)&v38[2], (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, &v39);
  if (v39 <= 0)
  {
    v38[1] = &v38[2];
    v0 = (icu::Transliterator *)uhash_setKeyDeleter((uint64_t)&v38[2], (uint64_t)uprv_deleteUObject);
  }
  int v32 = icu::Transliterator::_countAvailableSources(v0);
  if (v32 >= 1)
  {
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v55 = 0;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v52 = 0u;
      signed int v51 = (UChar *)&unk_1EDA47700;
      LOWORD(v52) = 2;
      int v33 = (int)v2;
      icu::Transliterator::_getAvailableSource(v2, &v51, v1);
      int v3 = (v52 & 0x8000u) == 0 ? (unsigned __int16)v52 >> 5 : DWORD1(v52);
      int v4 = icu::UnicodeString::doCaseCompare((uint64_t)&v51, 0, v3, (uint64_t)"A", 0, 3, 0);
      __int16 v36 = "A";
      uint64_t v6 = &v36;
      if (v4)
      {
        int v7 = icu::Transliterator::_countAvailableTargets((icu::Transliterator *)&v51, v5);
        if (v7 >= 1) {
          break;
        }
      }
LABEL_37:
      icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v51);
      uint64_t v2 = (icu::Transliterator *)(v33 + 1);
      if (v2 == v32) {
        goto LABEL_38;
      }
    }
    int v9 = v7;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v50 = 0;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v47 = 0u;
      int v46 = (UChar *)&unk_1EDA47700;
      LOWORD(v47) = 2;
      icu::Transliterator::_getAvailableTarget(v10, (uint64_t)&v51, (const icu::UnicodeString *)&v46, v8);
      if (!uhash_geti(v38[1], (uint64_t)&v46))
      {
        int v39 = 0;
        uint64_t v13 = v38[1];
        int v14 = (icu::UnicodeString *)icu::UMemory::operator new(v12, (icu::UMemory *)0x40, v11);
        uint64_t v15 = (uint64_t)v14;
        if (v14) {
          icu::UnicodeString::UnicodeString(v14, &v46);
        }
        uhash_puti(v13, v15, 1u, &v39);
        LODWORD(v40[0]) = 0;
        if ((v47 & 0x8000u) == 0) {
          uint64_t v16 = (unsigned __int16)v47 >> 5;
        }
        else {
          uint64_t v16 = DWORD1(v47);
        }
        uint64_t v17 = (char *)v48;
        if ((v47 & 2) != 0) {
          uint64_t v17 = (char *)&v47 + 2;
        }
        BOOL v18 = (v47 & 0x11) != 0 ? 0 : v17;
        if (uprv_isInvariantUString(v18, v16))
        {
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          memset(__s1, 0, sizeof(__s1));
          LODWORD(v41) = 0;
          icu::UnicodeString::extract((uint64_t)&v46, 0, v16, __s1, 128);
          HIBYTE(v60) = 0;
          if (uscript_getCode(__s1, (int32_t *)&v41, 1, (int *)v40) == 1)
          {
            uint64_t v12 = (uint64_t *)LODWORD(v40[0]);
            if (SLODWORD(v40[0]) < 1)
            {
              int v20 = (int)v41;
              if (v41 != -1)
              {
                int v21 = icu::Transliterator::_countAvailableVariants((icu::Transliterator *)&v51, (const icu::UnicodeString *)&v46, v19);
                if (v21 >= 1) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_12:
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v46);
      uint64_t v10 = (icu::Transliterator *)(v10 + 1);
      if (v10 == v9) {
        goto LABEL_37;
      }
    }
    int v23 = v21;
    UErrorCode v24 = 0;
    while (1)
    {
      memset(&__s1[8], 0, 56);
      *(void *)__s1 = &unk_1EDA47700;
      *(_WORD *)&__s1[8] = 2;
      icu::Transliterator::_getAvailableVariant(v24, (uint64_t)&v51, (const icu::UnicodeString *)&v46, (const icu::UnicodeString *)__s1, v22);
      uint64_t v45 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v42 = 0u;
      int v41 = (UChar *)&unk_1EDA47700;
      LOWORD(v42) = 2;
      v38[0] = "A";
      icu::UnicodeString::UnicodeString(v40, 1, v38);
      sub_18C9F3DF8(v40, (uint64_t)&v46, (uint64_t)__s1, (uint64_t)&v41);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v40);
      uint64_t v35 = v38[0];
      int v39 = 0;
      long long v27 = (icu::Transliterator *)icu::UMemory::operator new(&v35, (icu::UMemory *)0xA8, v26);
      if (v27)
      {
        long long v27 = sub_18C8CCCE8(v27, &v41, &v46, (uint64_t)__s1, v20, &v39);
        if (v39 < 1) {
          goto LABEL_34;
        }
        (*(void (**)(icu::Transliterator *))(*(void *)v27 + 8))(v27);
      }
      else
      {
        unint64_t v29 = v39;
        if (v39 < 1)
        {
LABEL_34:
          icu::Transliterator::_registerInstance(v27, v28);
          uint64_t v37 = "N";
          icu::UnicodeString::UnicodeString(v40, 1, &v37);
          icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)&v46, (const icu::UnicodeString *)v40, 0);
          icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v40);
          int v34 = v37;
          unint64_t v29 = (unint64_t)&v34;
        }
      }
      icu::UnicodeString::~UnicodeString((void *)v29, (icu::UnicodeString *)&v41);
      icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)__s1);
      UErrorCode v24 = (icu::Transliterator *)(v24 + 1);
      if (v23 == v24) {
        goto LABEL_12;
      }
    }
  }
LABEL_38:
  if (v38[1]) {
    uhash_close((unsigned char *)v38[1]);
  }
}

icu::CalendarAstronomer *icu::CalendarAstronomer::CalendarAstronomer(icu::CalendarAstronomer *this)
{
  icu::Calendar::getNow(this);
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 128) = 0;
  double NaN = uprv_getNaN();
  *((double *)this + 4) = NaN;
  *((double *)this + 5) = NaN;
  *((double *)this + 6) = NaN;
  *((double *)this + 7) = NaN;
  *((double *)this + 8) = NaN;
  *((double *)this + 9) = NaN;
  *((double *)this + 10) = NaN;
  *((double *)this + 11) = NaN;
  *((double *)this + 12) = NaN;
  *((double *)this + 13) = NaN;
  *((unsigned char *)this + 128) = 0;
  return this;
}

void icu::CalendarAstronomer::clearCache(icu::CalendarAstronomer *this)
{
  double NaN = uprv_getNaN();
  *((double *)this + 4) = NaN;
  *((double *)this + 5) = NaN;
  *((double *)this + 6) = NaN;
  *((double *)this + 7) = NaN;
  *((double *)this + 8) = NaN;
  *((double *)this + 9) = NaN;
  *((double *)this + 10) = NaN;
  *((double *)this + 11) = NaN;
  *((double *)this + 12) = NaN;
  *((double *)this + 13) = NaN;
  *((unsigned char *)this + 128) = 0;
}

icu::CalendarAstronomer *icu::CalendarAstronomer::CalendarAstronomer(icu::CalendarAstronomer *this, double a2)
{
  *(double *)this = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 128) = 0;
  double NaN = uprv_getNaN();
  *((double *)this + 4) = NaN;
  *((double *)this + 5) = NaN;
  *((double *)this + 6) = NaN;
  *((double *)this + 7) = NaN;
  *((double *)this + 8) = NaN;
  *((double *)this + 9) = NaN;
  *((double *)this + 10) = NaN;
  *((double *)this + 11) = NaN;
  *((double *)this + 12) = NaN;
  *((double *)this + 13) = NaN;
  *((unsigned char *)this + 128) = 0;
  return this;
}

{
  double NaN;

  *(double *)this = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 128) = 0;
  double NaN = uprv_getNaN();
  *((double *)this + 4) = NaN;
  *((double *)this + 5) = NaN;
  *((double *)this + 6) = NaN;
  *((double *)this + 7) = NaN;
  *((double *)this + 8) = NaN;
  *((double *)this + 9) = NaN;
  *((double *)this + 10) = NaN;
  *((double *)this + 11) = NaN;
  *((double *)this + 12) = NaN;
  *((double *)this + 13) = NaN;
  *((unsigned char *)this + 128) = 0;
  return this;
}

icu::CalendarAstronomer *icu::CalendarAstronomer::CalendarAstronomer(icu::CalendarAstronomer *this, double a2, double a3)
{
  icu::Calendar::getNow(this);
  *(void *)this = v6;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 128) = 0;
  *((double *)this + 1) = a2 * 0.0174532925
                        + 3.14159265
                        + uprv_floor((a2 * 0.0174532925 + 3.14159265) / 6.28318531) * -6.28318531
                        + -3.14159265;
  double v7 = a3 * 0.0174532925 + 3.14159265;
  double v8 = uprv_floor(v7 / 6.28318531);
  double v9 = *((double *)this + 1) * 24.0 * 3600000.0 / 6.28318531;
  *((double *)this + 2) = v7 + v8 * -6.28318531 + -3.14159265;
  *((double *)this + 3) = v9;
  double NaN = uprv_getNaN();
  *((double *)this + 4) = NaN;
  *((double *)this + 5) = NaN;
  *((double *)this + 6) = NaN;
  *((double *)this + 7) = NaN;
  *((double *)this + 8) = NaN;
  *((double *)this + 9) = NaN;
  *((double *)this + 10) = NaN;
  *((double *)this + 11) = NaN;
  *((double *)this + 12) = NaN;
  *((double *)this + 13) = NaN;
  *((unsigned char *)this + 128) = 0;
  return this;
}

void icu::CalendarAstronomer::setTime(icu::CalendarAstronomer *this, double a2)
{
  *(double *)this = a2;
  double NaN = uprv_getNaN();
  *((double *)this + 4) = NaN;
  *((double *)this + 5) = NaN;
  *((double *)this + 6) = NaN;
  *((double *)this + 7) = NaN;
  *((double *)this + 8) = NaN;
  *((double *)this + 9) = NaN;
  *((double *)this + 10) = NaN;
  *((double *)this + 11) = NaN;
  *((double *)this + 12) = NaN;
  *((double *)this + 13) = NaN;
  *((unsigned char *)this + 128) = 0;
}

void icu::CalendarAstronomer::setJulianDay(icu::CalendarAstronomer *this, double a2)
{
  *(double *)this = a2 * 86400000.0 + -2.1086676e14;
  double NaN = uprv_getNaN();
  *((double *)this + 6) = NaN;
  *((double *)this + 7) = NaN;
  *((double *)this + 8) = NaN;
  *((double *)this + 9) = NaN;
  *((double *)this + 10) = NaN;
  *((double *)this + 11) = NaN;
  *((double *)this + 12) = NaN;
  *((double *)this + 13) = NaN;
  *((unsigned char *)this + 128) = 0;
  *((double *)this + 4) = a2;
  *((double *)this + 5) = NaN;
}

uint64_t icu::CalendarAstronomer::setLocation(uint64_t this, double a2, double a3)
{
  *(double *)(this + 8) = a3;
  *(double *)(this + 16) = a2;
  return this;
}

uint64_t sub_18C8CDBB4(char *__s1, int a2, int a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (__s1)
  {
    int v5 = a3;
    int v6 = a2;
    if (a2 <= a3)
    {
      while (1)
      {
        int v7 = v5 - v6;
        int v8 = v5 >= v6 ? v5 - v6 : v7 + 1;
        uint64_t v9 = (v6 + (v8 >> 1));
        int v10 = strcmp(__s1, (&off_1E5508EA0)[3 * (int)v9]);
        if (!v10) {
          break;
        }
        if (v10 > 0)
        {
          int v6 = v9 + 1;
          uint64_t result = 0xFFFFFFFFLL;
          if ((int)v9 >= v5) {
            return result;
          }
        }
        else
        {
          int v5 = v9 - 1;
          if (v7 < 2) {
            return 0xFFFFFFFFLL;
          }
        }
      }
      return v9;
    }
  }
  return result;
}

int8x16_t icu::CalendarAstronomer::setLocation(icu::CalendarAstronomer *this, char *__s1)
{
  int v3 = sub_18C8CDBB4(__s1, 0, 244);
  if (v3 == -1) {
    int8x16_t v4 = 0uLL;
  }
  else {
    int8x16_t v4 = *(int8x16_t *)&(&off_1E5508EA0)[3 * v3 + 1];
  }
  int8x16_t result = vextq_s8(v4, v4, 8uLL);
  *(int8x16_t *)((char *)this + 8) = result;
  return result;
}

double icu::CalendarAstronomer::getTime(icu::CalendarAstronomer *this)
{
  return *(double *)this;
}

double icu::CalendarAstronomer::getJulianDay(icu::CalendarAstronomer *this)
{
  if (!uprv_isNaN(*((double *)this + 4))) {
    return *((double *)this + 4);
  }
  double result = (*(double *)this + 2.1086676e14) / 86400000.0;
  *((double *)this + 4) = result;
  return result;
}

double icu::CalendarAstronomer::getLocationLongitude(icu::CalendarAstronomer *this)
{
  return *((double *)this + 1);
}

double icu::CalendarAstronomer::getLocationLatitude(icu::CalendarAstronomer *this)
{
  return *((double *)this + 2);
}

double icu::CalendarAstronomer::getJulianCentury(icu::CalendarAstronomer *this)
{
  if (!uprv_isNaN(*((double *)this + 5))) {
    return *((double *)this + 5);
  }
  if (uprv_isNaN(*((double *)this + 4)))
  {
    double v2 = (*(double *)this + 2.1086676e14) / 86400000.0;
    *((double *)this + 4) = v2;
  }
  else
  {
    double v2 = *((double *)this + 4);
  }
  double result = (v2 + -2415020.0) / 36525.0;
  *((double *)this + 5) = result;
  return result;
}

void icu::CalendarAstronomer::getGreenwichSidereal(icu::CalendarAstronomer *this)
{
  if (uprv_isNaN(*((double *)this + 13)))
  {
    double v2 = *(double *)this / 3600000.0;
    double v3 = v2 + uprv_floor(v2 / 24.0) * -24.0;
    icu::CalendarAstronomer::getSiderealOffset(this);
    *((double *)this + 13) = v4 + v3 * 1.00273791 + uprv_floor((v4 + v3 * 1.00273791) / 24.0) * -24.0;
  }
}

void icu::CalendarAstronomer::getSiderealOffset(icu::CalendarAstronomer *this)
{
  if (uprv_isNaN(*((double *)this + 12)))
  {
    if (uprv_isNaN(*((double *)this + 4)))
    {
      double v2 = (*(double *)this + 2.1086676e14) / 86400000.0;
      *((double *)this + 4) = v2;
    }
    else
    {
      double v2 = *((double *)this + 4);
    }
    double v3 = uprv_floor(v2 + -0.5);
    double v4 = (v3 + 0.5 + -2451545.0) / 36525.0 * 2400.05134
       + 6.69737456
       + (v3 + 0.5 + -2451545.0) / 36525.0 * 0.000025862 * ((v3 + 0.5 + -2451545.0) / 36525.0);
    *((double *)this + 12) = v4 + uprv_floor(v4 / 24.0) * -24.0;
  }
}

double icu::CalendarAstronomer::getLocalSidereal(icu::CalendarAstronomer *this)
{
  icu::CalendarAstronomer::getGreenwichSidereal(this);
  double v3 = v2 + *((double *)this + 3) / 3600000.0;
  return v3 + uprv_floor(v3 / 24.0) * -24.0;
}

double icu::CalendarAstronomer::lstToUT(icu::CalendarAstronomer *this, double a2)
{
  icu::CalendarAstronomer::getSiderealOffset(this);
  double v5 = (a2 - v4) * 0.997269566 + uprv_floor((a2 - v4) * 0.997269566 / 24.0) * -24.0;
  return (double)(uint64_t)(v5 * 3600000.0)
       - (*((double *)this + 3)
        - uprv_floor((*(double *)this + *((double *)this + 3)) / 86400000.0) * 86400000.0);
}

icu::CalendarAstronomer::Equatorial *icu::CalendarAstronomer::eclipticToEquatorial(icu::CalendarAstronomer *this, icu::CalendarAstronomer::Equatorial *a2, const icu::CalendarAstronomer::Ecliptic *a3)
{
  return icu::CalendarAstronomer::eclipticToEquatorial(this, a2, *((double *)a3 + 1), *(long double *)a3);
}

icu::CalendarAstronomer::Equatorial *icu::CalendarAstronomer::eclipticToEquatorial(icu::CalendarAstronomer *this, icu::CalendarAstronomer::Equatorial *a2, double a3, long double a4)
{
  double v7 = icu::CalendarAstronomer::eclipticObliquity(this);
  __double2 v8 = __sincos_stret(v7);
  __double2 v9 = __sincos_stret(a3);
  __double2 v10 = __sincos_stret(a4);
  long double v11 = tan(a4);
  long double v12 = atan2(v9.__sinval * v8.__cosval - v11 * v8.__sinval, v9.__cosval);
  long double v13 = asin(v9.__sinval * (v10.__cosval * v8.__sinval) + v10.__sinval * v8.__cosval);
  *(long double *)a2 = v12;
  *((long double *)a2 + 1) = v13;
  return a2;
}

double icu::CalendarAstronomer::eclipticObliquity(icu::CalendarAstronomer *this)
{
  if (!uprv_isNaN(*((double *)this + 11))) {
    return *((double *)this + 11);
  }
  if (uprv_isNaN(*((double *)this + 4)))
  {
    double v2 = (*(double *)this + 2.1086676e14) / 86400000.0;
    *((double *)this + 4) = v2;
  }
  else
  {
    double v2 = *((double *)this + 4);
  }
  double v4 = (v2 + -2451545.0) / 36525.0;
  double result = (v4 * -0.0130041667 + 23.439292 + v4 * -0.000000166666667 * v4 + v4 * (v4 * 0.000000502777778) * v4)
         * 0.0174532925;
  *((double *)this + 11) = result;
  return result;
}

icu::CalendarAstronomer::Equatorial *icu::CalendarAstronomer::eclipticToEquatorial(icu::CalendarAstronomer *this, icu::CalendarAstronomer::Equatorial *a2, double a3)
{
  return icu::CalendarAstronomer::eclipticToEquatorial(this, a2, a3, 0.0);
}

icu::CalendarAstronomer::Horizon *icu::CalendarAstronomer::eclipticToHorizon(icu::CalendarAstronomer *this, icu::CalendarAstronomer::Horizon *a2, double a3)
{
  double v14 = 0.0;
  double v15 = 0.0;
  icu::CalendarAstronomer::eclipticToEquatorial(this, (icu::CalendarAstronomer::Equatorial *)&v14, a3, 0.0);
  icu::CalendarAstronomer::getGreenwichSidereal(this);
  double v6 = v5 + *((double *)this + 3) / 3600000.0;
  double v7 = uprv_floor(v6 / 24.0);
  __double2 v8 = __sincos_stret((v6 + v7 * -24.0) * 3.14159265 / 12.0 - v14);
  __double2 v9 = __sincos_stret(v15);
  __double2 v10 = __sincos_stret(*((double *)this + 2));
  long double v11 = asin(v9.__cosval * v10.__cosval * v8.__cosval + v9.__sinval * v10.__sinval);
  long double v12 = sin(v11);
  *(long double *)a2 = atan2(-(v9.__cosval * v10.__cosval) * v8.__sinval, v9.__sinval - v10.__sinval * v12);
  *((long double *)a2 + 1) = v11;
  return a2;
}

double icu::CalendarAstronomer::adjustSunLongitude(icu::CalendarAstronomer *this, double *a2, double a3)
{
  if (a3 < -2.20984944e12 || a3 >= 4.13310186e12) {
    return *(double *)this;
  }
  uint64_t v3 = (int)((a3 + 2.20984944e12) * 202.0 / 6.3429513e12);
  int v4 = (int)(a3 / 10000.0);
  uint64_t v5 = v3 << 32;
  double v6 = (int *)((char *)&unk_18CA879F0 + 4 * (int)v3 + 8);
  do
  {
    int v7 = *(v6 - 2);
    v5 -= 0x100000000;
    --v6;
  }
  while (v7 > v4);
  do
  {
    int v9 = *v6++;
    int v8 = v9;
    v5 += 0x100000000;
  }
  while (v9 <= v4);
  int v10 = *(v6 - 2);
  int v11 = v4 - v10;
  if (v11 > 1570331)
  {
    if (v11 > 0x244EC2)
    {
      double v12 = (double)(v11 - 2379459) / (double)(v8 - 2379459 - v10);
      long double v13 = (char *)&unk_18CA87D18 + 4 * (v5 >> 32) + 3;
      double v14 = (char *)&unk_18CA87D18 + 4 * ((v5 + 0x100000000) >> 32);
    }
    else
    {
      double v12 = (double)(v11 - 1570332) / 809127.0;
      uint64_t v16 = (char *)&unk_18CA87D18 + 4 * (v5 >> 32);
      long double v13 = v16 + 2;
      double v14 = v16 + 3;
    }
  }
  else if (v11 > 768902)
  {
    double v12 = (double)(v11 - 768903) / 801429.0;
    uint64_t v17 = (char *)&unk_18CA87D18 + 4 * (v5 >> 32);
    long double v13 = v17 + 1;
    double v14 = v17 + 2;
  }
  else
  {
    double v12 = (double)v11 / 768903.0;
    long double v13 = (char *)&unk_18CA87D18 + 4 * (v5 >> 32);
    double v14 = v13 + 1;
  }
  double result = *(double *)this + ((double)*v13 + v12 * (double)(*v14 - *v13)) / 100000.0;
  *(double *)this = result;
  double v18 = 6.28318531;
  if (result >= 6.28318531)
  {
    double v18 = -6.28318531;
    goto LABEL_18;
  }
  if (result < 0.0)
  {
LABEL_18:
    double result = result + v18;
    *(double *)this = result;
  }
  return result;
}

void icu::CalendarAstronomer::getSunLongitudeForTime(icu::CalendarAstronomer *this, double a2, uint64_t a3, double *a4)
{
  uint64_t v7 = 0;
  icu::CalendarAstronomer::getSunLongitude((icu::CalendarAstronomer *)&v7, (a2 + 2.1086676e14) / 86400000.0, &v6, a4);
  icu::CalendarAstronomer::adjustSunLongitude((icu::CalendarAstronomer *)&v7, v5, a2);
}

long double icu::CalendarAstronomer::getSunLongitude(icu::CalendarAstronomer *this, double a2, double *a3, double *a4)
{
  double v6 = (a2 + -2447891.5) * 0.0172027916
     + uprv_floor((a2 + -2447891.5) * 0.0172027916 / 6.28318531) * -6.28318531
     + 4.87650758
     + -4.93523998;
  double v7 = v6 + uprv_floor(v6 / 6.28318531) * -6.28318531;
  *a3 = v7;
  double v8 = v7;
  do
  {
    __double2 v9 = __sincos_stret(v8);
    double v10 = v8 + v9.__sinval * -0.016713 - v7;
    double v8 = v8 - v10 / (v9.__cosval * -0.016713 + 1.0);
  }
  while (uprv_fabs(v10) > 0.00001);
  long double v11 = tan(v8 * 0.5);
  long double v12 = atan(v11 * 1.01685503);
  long double result = v12 + v12 + 4.93523998 + uprv_floor((v12 + v12 + 4.93523998) / 6.28318531) * -6.28318531;
  *(long double *)this = result;
  return result;
}

double icu::CalendarAstronomer::getSunLongitude(icu::CalendarAstronomer *this)
{
  double v2 = (icu::CalendarAstronomer *)((char *)this + 48);
  if (uprv_isNaN(*((double *)this + 6)))
  {
    if (uprv_isNaN(*((double *)this + 4)))
    {
      double v5 = (*(double *)this + 2.1086676e14) / 86400000.0;
      *((double *)this + 4) = v5;
    }
    else
    {
      double v5 = *((double *)this + 4);
    }
    icu::CalendarAstronomer::getSunLongitude(v2, v5, (double *)this + 7, v4);
  }
  double v6 = *(double *)this;

  return icu::CalendarAstronomer::adjustSunLongitude(v2, v3, v6);
}

icu::CalendarAstronomer::Equatorial *icu::CalendarAstronomer::getSunPosition(icu::CalendarAstronomer *this, icu::CalendarAstronomer::Equatorial *a2)
{
  double SunLongitude = icu::CalendarAstronomer::getSunLongitude(this);

  return icu::CalendarAstronomer::eclipticToEquatorial(this, a2, SunLongitude, 0.0);
}

double icu::CalendarAstronomer::SUMMER_SOLSTICE(icu::CalendarAstronomer *this)
{
  return 1.57079633;
}

double icu::CalendarAstronomer::WINTER_SOLSTICE(icu::CalendarAstronomer *this)
{
  return 4.71238898;
}

double icu::CalendarAstronomer::getSunTime(icu::CalendarAstronomer *this, double a2, int a3)
{
  if (a2 == 4.71238898 && (double v3 = *(double *)this, *(double *)this >= -2.20984944e12) && v3 < 4.13310186e12)
  {
    int v4 = (int)(v3 / 10000.0);
    double v5 = (int *)((char *)&unk_18CA879F0 + 4 * (int)((v3 + 2.20984944e12) * 202.0 / 6.3429513e12) + 4);
    do
      int v6 = *--v5;
    while (v6 > v4);
    do
    {
      int v7 = v5[1];
      ++v5;
    }
    while (v7 <= v4);
    if (!a3) {
      --v5;
    }
    return (double)*v5 * 10000.0;
  }
  else
  {
    __double2 v9 = &unk_1EDA48B88;
    return icu::CalendarAstronomer::timeOfAngle(this, (icu::CalendarAstronomer::AngleFunc *)&v9, a2, 365.242191, 60000.0, a3);
  }
}

double icu::CalendarAstronomer::timeOfAngle(icu::CalendarAstronomer *this, icu::CalendarAstronomer::AngleFunc *a2, double a3, double a4, double a5, int a6)
{
  double v7 = a3;
  if (a6) {
    double v10 = 0.0;
  }
  else {
    double v10 = -6.28318531;
  }
  double v11 = a4 * 86400000.0;
  double v26 = a4 * 86400000.0 * 0.125;
  double v27 = a4 * 86400000.0;
  double v28 = v10;
LABEL_5:
  double v12 = (**(double (***)(icu::CalendarAstronomer::AngleFunc *, icu::CalendarAstronomer *))a2)(a2, this);
  double v13 = v11 * (v10 + v7 - v12 + uprv_floor((v7 - v12) / 6.28318531) * -6.28318531) / 6.28318531;
  double v29 = *(double *)this;
  *(double *)this = v29 + uprv_ceil(v13);
  double NaN = uprv_getNaN();
  *((double *)this + 4) = NaN;
  *((double *)this + 5) = NaN;
  *((double *)this + 6) = NaN;
  *((double *)this + 7) = NaN;
  *((double *)this + 8) = NaN;
  *((double *)this + 9) = NaN;
  *((double *)this + 10) = NaN;
  *((double *)this + 11) = NaN;
  *((double *)this + 12) = NaN;
  *((double *)this + 13) = NaN;
  *((unsigned char *)this + 128) = 0;
  do
  {
    double v15 = v13;
    double v16 = (**(double (***)(icu::CalendarAstronomer::AngleFunc *, icu::CalendarAstronomer *))a2)(a2, this);
    double v17 = v16 - v12 + 3.14159265;
    double v18 = uprv_floor(v17 / 6.28318531);
    double v19 = uprv_fabs(v15 / (v17 + v18 * -6.28318531 + -3.14159265));
    double v13 = v19 * (a3 - v16 + 3.14159265 + uprv_floor((a3 - v16 + 3.14159265) / 6.28318531) * -6.28318531 + -3.14159265);
    double v20 = uprv_fabs(v13);
    if (v20 > uprv_fabs(v15))
    {
      double v23 = uprv_ceil(v26);
      if (!a6) {
        double v23 = -v23;
      }
      *(double *)this = v29 + v23;
      double v24 = uprv_getNaN();
      *((double *)this + 4) = v24;
      *((double *)this + 5) = v24;
      *((double *)this + 6) = v24;
      *((double *)this + 7) = v24;
      *((double *)this + 8) = v24;
      *((double *)this + 9) = v24;
      *((double *)this + 10) = v24;
      *((double *)this + 11) = v24;
      *((double *)this + 12) = v24;
      *((double *)this + 13) = v24;
      *((unsigned char *)this + 128) = 0;
      double v7 = a3;
      double v11 = v27;
      double v10 = v28;
      goto LABEL_5;
    }
    double v21 = *(double *)this;
    *(double *)this = v21 + uprv_ceil(v13);
    double v22 = uprv_getNaN();
    *((double *)this + 4) = v22;
    *((double *)this + 5) = v22;
    *((double *)this + 6) = v22;
    *((double *)this + 7) = v22;
    *((double *)this + 8) = v22;
    *((double *)this + 9) = v22;
    *((double *)this + 10) = v22;
    *((double *)this + 11) = v22;
    *((double *)this + 12) = v22;
    *((double *)this + 13) = v22;
    *((unsigned char *)this + 128) = 0;
    double v12 = v16;
  }
  while (uprv_fabs(v13) > a5);
  return *(double *)this;
}

double icu::CalendarAstronomer::getSunRiseSet(icu::CalendarAstronomer *this, int a2)
{
  double v4 = *(double *)this;
  *(double *)this = dbl_18CA879D0[a2 == 0]
                  + 43200000.0
                  - (*((double *)this + 3)
                   - uprv_floor((*(double *)this + *((double *)this + 3)) / 86400000.0) * 86400000.0);
  double NaN = uprv_getNaN();
  *((double *)this + 4) = NaN;
  *((double *)this + 5) = NaN;
  *((double *)this + 6) = NaN;
  *((double *)this + 7) = NaN;
  *((double *)this + 8) = NaN;
  *((double *)this + 9) = NaN;
  *((double *)this + 10) = NaN;
  *((double *)this + 11) = NaN;
  *((double *)this + 12) = NaN;
  *((double *)this + 13) = NaN;
  *((unsigned char *)this + 128) = 0;
  __double2 v9 = &unk_1EDA48C08;
  double v6 = icu::CalendarAstronomer::riseOrSet(this, (icu::CalendarAstronomer::CoordFunc *)&v9, a2, 0.00930260491, 0.00989019909, 5000.0);
  *(double *)this = v4;
  double v7 = uprv_getNaN();
  *((double *)this + 4) = v7;
  *((double *)this + 5) = v7;
  *((double *)this + 6) = v7;
  *((double *)this + 7) = v7;
  *((double *)this + 8) = v7;
  *((double *)this + 9) = v7;
  *((double *)this + 10) = v7;
  *((double *)this + 11) = v7;
  *((double *)this + 12) = v7;
  *((double *)this + 13) = v7;
  *((unsigned char *)this + 128) = 0;
  return v6;
}

double icu::CalendarAstronomer::riseOrSet(icu::CalendarAstronomer *this, icu::CalendarAstronomer::CoordFunc *a2, int a3, double a4, double a5, double a6)
{
  double v26 = 0.0;
  long double __x = 0.0;
  double v12 = -tan(*((long double *)this + 2));
  int v13 = 5;
  do
  {
    (**(void (***)(icu::CalendarAstronomer::CoordFunc *, double *, icu::CalendarAstronomer *))a2)(a2, &v26, this);
    long double v14 = tan(__x);
    double v15 = acos(v14 * v12);
    if (a3) {
      double v15 = 6.28318531 - v15;
    }
    double v16 = icu::CalendarAstronomer::lstToUT(this, (v26 + v15) * 24.0 / 6.28318531);
    double v17 = *(double *)this;
    *(double *)this = v16;
    double NaN = uprv_getNaN();
    *((double *)this + 4) = NaN;
    *((double *)this + 5) = NaN;
    *((double *)this + 6) = NaN;
    *((double *)this + 7) = NaN;
    *((double *)this + 8) = NaN;
    *((double *)this + 9) = NaN;
    *((double *)this + 10) = NaN;
    *((double *)this + 11) = NaN;
    *((double *)this + 12) = NaN;
    *((double *)this + 13) = NaN;
    *((unsigned char *)this + 128) = 0;
    --v13;
  }
  while (v13 && uprv_fabs(v16 - v17) > a6);
  double v19 = cos(__x);
  long double v20 = sin(*((long double *)this + 2));
  long double v21 = acos(v20 / v19);
  double v22 = sin(a4 * 0.5 + a5);
  long double v23 = sin(v21);
  uint64_t v24 = (uint64_t)(asin(v22 / v23) * 240.0 * 57.2957795 / v19 * 1000.0);
  if (a3) {
    uint64_t v24 = -v24;
  }
  return *(double *)this + (double)v24;
}

uint64_t icu::CalendarAstronomer::getMoonPosition(icu::CalendarAstronomer *this)
{
  if (!*((unsigned char *)this + 128))
  {
    icu::CalendarAstronomer::getSunLongitude(this);
    if (uprv_isNaN(*((double *)this + 4)))
    {
      double v2 = (*(double *)this + 2.1086676e14) / 86400000.0;
      *((double *)this + 4) = v2;
    }
    else
    {
      double v2 = *((double *)this + 4);
    }
    double v3 = v2 + -2447891.5;
    double v19 = v2 + -2447891.5;
    double v4 = (v2 + -2447891.5) * 0.229971504
       + 5.55628444
       + uprv_floor(((v2 + -2447891.5) * 0.229971504 + 5.55628444) / 6.28318531) * -6.28318531;
    double v5 = v4
       + v3 * -0.00194436835
       + -0.634259806
       + uprv_floor((v4 + v3 * -0.00194436835 + -0.634259806) / 6.28318531) * -6.28318531;
    double v6 = *((double *)this + 6);
    long double v7 = sin(-(v5 - (v4 - v6) * 2.0)) * 0.0222337493;
    long double v8 = sin(*((long double *)this + 7));
    long double v9 = v8 * 0.00324282175;
    long double v10 = v5 + v7 - v8 * 0.00324282175 + v8 * -0.00645771823;
    *((long double *)this + 10) = v10;
    long double v11 = sin(v10) * 0.109756775;
    long double v12 = sin(v10 + v10) * 0.0037350046 + v4 + v7 + v11 - v9;
    *((long double *)this + 8) = v12 + sin(v12 - v6 + v12 - v6) * 0.0114895025;
    double v13 = v19 * -0.000924219907
        + 5.55905007
        + uprv_floor((v19 * -0.000924219907 + 5.55905007) / 6.28318531) * -6.28318531;
    long double v14 = v13 + sin(*((long double *)this + 7)) * -0.0027925268;
    __double2 v15 = __sincos_stret(*((double *)this + 8) - v14);
    double v16 = atan2(v15.__sinval * 0.995970368, v15.__cosval) + v14;
    *((double *)this + 9) = v16;
    long double v17 = asin(v15.__sinval * 0.0896829204);
    icu::CalendarAstronomer::eclipticToEquatorial(this, (icu::CalendarAstronomer *)((char *)this + 112), v16, v17);
    *((unsigned char *)this + 128) = 1;
  }
  return (uint64_t)this + 112;
}

void icu::CalendarAstronomer::getMoonAge(icu::CalendarAstronomer *this)
{
  double v2 = *(double *)this;
  if (*(double *)this < -2.21149158e12 || v2 >= 4.13644464e12)
  {
    icu::CalendarAstronomer::getMoonPosition(this);
    uprv_floor((*((double *)this + 9) - *((double *)this + 6)) / 6.28318531);
  }
  else
  {
    uint64_t v3 = (int)((v2 + 2.21149158e12) * 2489.0 / 6.34793622e12);
    int v4 = (int)(v2 / 10000.0);
    uint64_t v5 = v3 << 32;
    double v6 = (int *)((char *)&unk_18CA88040 + 4 * (int)v3 + 8);
    do
    {
      int v7 = *(v6 - 2);
      v5 -= 0x100000000;
      --v6;
    }
    while (v7 > v4);
    do
    {
      int v8 = *v6++;
      v5 += 0x100000000;
    }
    while (v8 <= v4);
  }
}

long double icu::CalendarAstronomer::getMoonPhase(icu::CalendarAstronomer *this)
{
  icu::CalendarAstronomer::getMoonAge(this);
  return (1.0 - cos(v1)) * 0.5;
}

double icu::CalendarAstronomer::NEW_MOON(icu::CalendarAstronomer *this)
{
  return 0.0;
}

double icu::CalendarAstronomer::FULL_MOON(icu::CalendarAstronomer *this)
{
  return 3.14159265;
}

double icu::CalendarAstronomer::getNewMoonTimeInRange(icu::CalendarAstronomer *this, double a2)
{
  double v2 = 0.0;
  if (a2 >= -2.21149158e12 && a2 < 4.13644464e12)
  {
    int v3 = (int)(a2 / 10000.0);
    int v4 = (int *)((char *)&unk_18CA88040 + 4 * (int)((a2 + 2.21149158e12) * 2489.0 / 6.34793622e12) + 4);
    do
      int v5 = *--v4;
    while (v5 > v3);
    do
    {
      int v6 = v4[1];
      ++v4;
    }
    while (v6 <= v3);
    if (!this) {
      --v4;
    }
    return (double)*v4 * 10000.0;
  }
  return v2;
}

void icu::CalendarAstronomer::getMoonTime(icu::CalendarAstronomer *this, double a2, icu::CalendarAstronomer *a3)
{
  int v3 = (int)a3;
  if (a2 != 0.0 || icu::CalendarAstronomer::getNewMoonTimeInRange(a3, *(double *)this) == 0.0)
  {
    int v6 = &unk_1EDA48C48;
    icu::CalendarAstronomer::timeOfAngle(this, (icu::CalendarAstronomer::AngleFunc *)&v6, a2, 29.5305889, 60000.0, v3);
  }
}

void icu::CalendarAstronomer::getMoonTime(icu::CalendarAstronomer *a1, double *a2, icu::CalendarAstronomer *a3)
{
}

double icu::CalendarAstronomer::getMoonRiseSet(icu::CalendarAstronomer *this, int a2)
{
  int v3 = &unk_1EDA48C88;
  return icu::CalendarAstronomer::riseOrSet(this, (icu::CalendarAstronomer::CoordFunc *)&v3, a2, 0.00930260491, 0.00989019909, 60000.0);
}

void icu::CalendarAstronomer::Ecliptic::toString(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA47700;
  *(_WORD *)(a1 + 8) = 2;
}

void icu::CalendarAstronomer::Equatorial::toString(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA47700;
  *(_WORD *)(a1 + 8) = 2;
}

void icu::CalendarAstronomer::Horizon::toString(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA47700;
  *(_WORD *)(a1 + 8) = 2;
}

void sub_18C8CF334(uint64_t **a1, int *a2)
{
  sub_18CA0A25C(0xBu, (uint64_t)sub_18C8CF438);
  if (!a1)
  {
    *a2 = 7;
    return;
  }
  int v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x10, v4);
  if (v6)
  {
    int v7 = v6;
    *int v6 = (uint64_t)&unk_1EDA48B28;
    v6[1] = (uint64_t)uhash_openSize((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, 32, a2);
    *a1 = v7;
    if (*a2 < 1) {
      return;
    }
    (*(void (**)(uint64_t *))(*v7 + 8))(v7);
  }
  else
  {
    *a1 = 0;
    if (*a2 < 1) {
      return;
    }
  }
  *a1 = 0;
}

uint64_t sub_18C8CF438()
{
  return 1;
}

uint64_t sub_18C8CF440(uint64_t **a1, unsigned int a2, int *a3)
{
  if (*a3 <= 0)
  {
    umtx_lock((atomic_ullong *)&unk_1E9191FD8);
    int v7 = *a1;
    if (!*a1)
    {
      sub_18C8CF334(a1, a3);
      if (*a3 > 0)
      {
        uint64_t v3 = 0;
        goto LABEL_7;
      }
      int v7 = *a1;
    }
    uint64_t v3 = uhash_igeti(v7[1], a2);
LABEL_7:
    umtx_unlock((std::mutex **)&unk_1E9191FD8);
    return v3;
  }
  return 0;
}

void sub_18C8CF4E0(uint64_t **a1, unsigned int a2, unsigned int a3, int *a4)
{
  if (*a4 > 0) {
    return;
  }
  umtx_lock((atomic_ullong *)&unk_1E9191FD8);
  int v8 = *a1;
  if (!*a1)
  {
    sub_18C8CF334(a1, a4);
    if (*a4 > 0) {
      goto LABEL_5;
    }
    int v8 = *a1;
  }
  uhash_iputi(v8[1], a2, a3, a4);
LABEL_5:

  umtx_unlock((std::mutex **)&unk_1E9191FD8);
}

void *sub_18C8CF594(void *a1)
{
  *a1 = &unk_1EDA48B28;
  double v2 = (unsigned char *)a1[1];
  if (v2) {
    uhash_close(v2);
  }
  return a1;
}

void sub_18C8CF5E0(void *a1)
{
  *a1 = &unk_1EDA48B28;
  double v2 = (unsigned char *)a1[1];
  if (v2) {
    uhash_close(v2);
  }

  icu::UMemory::operator delete(a1);
}

double sub_18C8CF63C(int a1, icu::CalendarAstronomer *this)
{
  return icu::CalendarAstronomer::getSunLongitude(this);
}

icu::CalendarAstronomer::Equatorial *sub_18C8CF644(int a1, icu::CalendarAstronomer::Equatorial *a2, icu::CalendarAstronomer *this)
{
  double SunLongitude = icu::CalendarAstronomer::getSunLongitude(this);

  return icu::CalendarAstronomer::eclipticToEquatorial(this, a2, SunLongitude, 0.0);
}

void sub_18C8CF68C(int a1, icu::CalendarAstronomer *this)
{
}

__n128 sub_18C8CF694(int a1, __n128 *a2, icu::CalendarAstronomer *this)
{
  MoonPositiouint64_t n = (__n128 *)icu::CalendarAstronomer::getMoonPosition(this);
  __n128 result = *MoonPosition;
  *a2 = *MoonPosition;
  return result;
}

void *icu::BasicTimeZone::BasicTimeZone(icu::BasicTimeZone *this)
{
  __n128 result = (void *)icu::TimeZone::TimeZone((uint64_t)this);
  *__n128 result = &unk_1EDA48CE0;
  return result;
}

icu::TimeZone *icu::BasicTimeZone::BasicTimeZone(icu::BasicTimeZone *this, UChar **a2)
{
  __n128 result = icu::TimeZone::TimeZone(this, a2);
  *(void *)__n128 result = &unk_1EDA48CE0;
  return result;
}

{
  icu::TimeZone *result;

  __n128 result = icu::TimeZone::TimeZone(this, a2);
  *(void *)__n128 result = &unk_1EDA48CE0;
  return result;
}

uint64_t icu::BasicTimeZone::hasEquivalentTransitions(icu::BasicTimeZone *this, const icu::BasicTimeZone *a2, double a3, double a4, int a5, UErrorCode *a6)
{
  if (*(int *)a6 > 0) {
    return 0;
  }
  if ((*(unsigned int (**)(icu::BasicTimeZone *))(*(void *)this + 88))(this)) {
    return 1;
  }
  long long v55 = 0uLL;
  (*(void (**)(icu::BasicTimeZone *, void, char *, char *, UErrorCode *, double))(*(void *)this + 48))(this, 0, (char *)&v55 + 12, (char *)&v55 + 4, a6, a3);
  uint64_t v6 = 0;
  if (*(int *)a6 <= 0)
  {
    (*(void (**)(const icu::BasicTimeZone *, void, char *, long long *, UErrorCode *, double))(*(void *)a2 + 48))(a2, 0, (char *)&v55 + 8, &v55, a6, a3);
    uint64_t v6 = 0;
    if (*(int *)a6 <= 0)
    {
      if (a5)
      {
        if (DWORD1(v55) + HIDWORD(v55) != v55 + DWORD2(v55)
          || DWORD1(v55) && !v55
          || !DWORD1(v55) && v55)
        {
          return 0;
        }
      }
      else if (__PAIR64__(HIDWORD(v55), v55) != *(void *)((char *)&v55 + 4))
      {
        return 0;
      }
      memset(v54, 0, sizeof(v54));
      icu::TimeZoneTransition::TimeZoneTransition(v54);
      memset(v53, 0, sizeof(v53));
      icu::TimeZoneTransition::TimeZoneTransition(v53);
      while (1)
      {
        int v14 = (*(uint64_t (**)(icu::BasicTimeZone *, void, _OWORD *, double))(*(void *)this + 112))(this, 0, v54, a3);
        int v15 = (*(uint64_t (**)(const icu::BasicTimeZone *, void, _OWORD *, double))(*(void *)a2 + 112))(a2, 0, v53, a3);
        if (a5)
        {
          if (v14)
          {
            while (icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v54) <= a4)
            {
              double v16 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v54);
              int RawOffset = icu::TimeZoneRule::getRawOffset(v16);
              double v18 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v54);
              int v19 = icu::TimeZoneRule::getDSTSavings(v18) + RawOffset;
              long double v20 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v54);
              int v21 = icu::TimeZoneRule::getRawOffset(v20);
              double v22 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v54);
              if (v19 != icu::TimeZoneRule::getDSTSavings(v22) + v21) {
                break;
              }
              long double v23 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v54);
              if (!icu::TimeZoneRule::getDSTSavings(v23)) {
                break;
              }
              uint64_t v24 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v54);
              if (!icu::TimeZoneRule::getDSTSavings(v24)) {
                break;
              }
              double Time = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v54);
              (*(void (**)(icu::BasicTimeZone *, void, _OWORD *, double))(*(void *)this + 112))(this, 0, v54, Time);
            }
          }
          if (v15)
          {
            while (icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v53) <= a4)
            {
              double v26 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v53);
              int v27 = icu::TimeZoneRule::getRawOffset(v26);
              double v28 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v53);
              int v29 = icu::TimeZoneRule::getDSTSavings(v28) + v27;
              BOOL v30 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v53);
              int v31 = icu::TimeZoneRule::getRawOffset(v30);
              int v32 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v53);
              if (v29 != icu::TimeZoneRule::getDSTSavings(v32) + v31) {
                break;
              }
              int v33 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v53);
              if (!icu::TimeZoneRule::getDSTSavings(v33)) {
                break;
              }
              int v34 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v53);
              if (!icu::TimeZoneRule::getDSTSavings(v34)) {
                break;
              }
              double v35 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v53);
              (*(void (**)(const icu::BasicTimeZone *, void, _OWORD *, double))(*(void *)a2 + 112))(a2, 0, v53, v35);
            }
          }
        }
        if (v14) {
          int v14 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v54) <= a4;
        }
        BOOL v36 = v15 && icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v53) <= a4;
        if ((v14 | v36) != 1) {
          break;
        }
        if ((v14 & v36) != 1) {
          goto LABEL_48;
        }
        double v37 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v54);
        if (v37 != icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v53)) {
          goto LABEL_48;
        }
        int v38 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v54);
        int v39 = icu::TimeZoneRule::getRawOffset(v38);
        if (a5)
        {
          int v40 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v54);
          int v41 = icu::TimeZoneRule::getDSTSavings(v40) + v39;
          long long v42 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v53);
          int v43 = icu::TimeZoneRule::getRawOffset(v42);
          long long v44 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v53);
          if (v41 != icu::TimeZoneRule::getDSTSavings(v44) + v43
            || (uint64_t v45 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v54),
                icu::TimeZoneRule::getDSTSavings(v45))
            && (int v46 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v53),
                !icu::TimeZoneRule::getDSTSavings(v46))
            || (long long v47 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v54),
                !icu::TimeZoneRule::getDSTSavings(v47))
            && (long long v48 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v53),
                icu::TimeZoneRule::getDSTSavings(v48)))
          {
LABEL_48:
            uint64_t v6 = 0;
            goto LABEL_50;
          }
        }
        else
        {
          long long v49 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v53);
          if (v39 != icu::TimeZoneRule::getRawOffset(v49)) {
            goto LABEL_48;
          }
          uint64_t v50 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v54);
          int DSTSavings = icu::TimeZoneRule::getDSTSavings(v50);
          long long v52 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v53);
          if (DSTSavings != icu::TimeZoneRule::getDSTSavings(v52)) {
            goto LABEL_48;
          }
        }
        a3 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v54);
      }
      uint64_t v6 = 1;
LABEL_50:
      icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v53);
      icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v54);
    }
  }
  return v6;
}

void *icu::BasicTimeZone::getSimpleRulesNear(void *this, double a2, icu::InitialTimeZoneRule **a3, icu::AnnualTimeZoneRule **a4, icu::AnnualTimeZoneRule **a5, UErrorCode *a6)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  if (*(int *)a6 <= 0)
  {
    uint64_t v11 = (uint64_t)this;
    long long v110 = 0u;
    uint64_t v113 = 0;
    long long v112 = 0u;
    long long v111 = 0u;
    uint64_t v108 = 0;
    long long v109 = (UChar *)&unk_1EDA47700;
    LOWORD(v110) = 2;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    uint64_t v103 = 0;
    unsigned int v104 = (UChar *)&unk_1EDA47700;
    LOWORD(v105) = 2;
    memset(v102, 0, sizeof(v102));
    icu::TimeZoneTransition::TimeZoneTransition(v102);
    if ((*(unsigned int (**)(uint64_t, void, _OWORD *, double))(*(void *)v11 + 112))(v11, 0, v102, a2))
    {
      long double v12 = (UChar **)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
      icu::TimeZoneRule::getName(v12, &v109);
      double v13 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
      int RawOffset = icu::TimeZoneRule::getRawOffset(v13);
      HIDWORD(v103) = RawOffset;
      int v15 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
      int DSTSavings = icu::TimeZoneRule::getDSTSavings(v15);
      LODWORD(v103) = DSTSavings;
      double Time = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v102);
      double v18 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
      if (icu::TimeZoneRule::getDSTSavings(v18)
        || (int v29 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102),
            !icu::TimeZoneRule::getDSTSavings(v29)))
      {
        int v19 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
        if (icu::TimeZoneRule::getDSTSavings(v19))
        {
          double v22 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
          long double v23 = 0;
          if (icu::TimeZoneRule::getDSTSavings(v22))
          {
            uint64_t v24 = 0;
            goto LABEL_54;
          }
          int v21 = (uint64_t *)&unk_18CA8B000;
          uint64_t v24 = 0;
          if (a2 + 3.1536e10 <= Time) {
            goto LABEL_54;
          }
          goto LABEL_13;
        }
      }
      else
      {
        int v21 = (uint64_t *)&unk_18CA8B000;
        if (a2 + 3.1536e10 > Time)
        {
LABEL_13:
          uint64_t v100 = 0;
          *(void *)v101 = 0;
          double v98 = 0.0;
          uint64_t v99 = 0;
          sub_18C93E568(&v101[1], v101, (_DWORD *)&v100 + 1, (int *)&v100, (int *)&v99 + 1, &v99, Time + (double)RawOffset + (double)DSTSavings);
          int v30 = sub_18C93E644(v101[1], v101[0], SHIDWORD(v100));
          int v33 = icu::UMemory::operator new(v32, (icu::UMemory *)0x28, v31);
          int v34 = (icu::DateTimeRule *)v33;
          if (v33) {
            icu::DateTimeRule::DateTimeRule((uint64_t)v33, v101[0], v30, v100, v99, 0);
          }
          double v35 = (UChar **)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
          icu::TimeZoneRule::getName(v35, &v104);
          long double v23 = (icu::AnnualTimeZoneRule *)icu::UMemory::operator new(v37, (icu::UMemory *)0x60, v36);
          if (v23)
          {
            int v38 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
            int v39 = icu::TimeZoneRule::getDSTSavings(v38);
            icu::AnnualTimeZoneRule::AnnualTimeZoneRule(v23, &v104, RawOffset, v39, v34, v101[1], 0x7FFFFFFF);
          }
          int v40 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
          if (icu::TimeZoneRule::getRawOffset(v40) == RawOffset
            && (*(unsigned int (**)(uint64_t, void, _OWORD *, double))(*(void *)v11 + 112))(v11, 0, v102, Time))
          {
            if ((int v41 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102),
                  !icu::TimeZoneRule::getDSTSavings(v41))
              && (long long v44 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102),
                  icu::TimeZoneRule::getDSTSavings(v44))
              || (long long v42 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102),
                  icu::TimeZoneRule::getDSTSavings(v42))
              && (int v43 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102),
                  !icu::TimeZoneRule::getDSTSavings(v43)))
            {
              if (Time + 3.1536e10 > icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v102))
              {
                double v45 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v102);
                int v46 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
                double v47 = v45 + (double)(int)icu::TimeZoneRule::getRawOffset(v46);
                long long v48 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
                int v49 = icu::TimeZoneRule::getDSTSavings(v48);
                sub_18C93E568(&v101[1], v101, (_DWORD *)&v100 + 1, (int *)&v100, (int *)&v99 + 1, &v99, v47 + (double)v49);
                int v50 = sub_18C93E644(v101[1], v101[0], SHIDWORD(v100));
                long long v53 = icu::UMemory::operator new(v52, (icu::UMemory *)0x28, v51);
                long long v54 = (icu::DateTimeRule *)v53;
                if (v53) {
                  icu::DateTimeRule::DateTimeRule((uint64_t)v53, v101[0], v50, v100, v99, 0);
                }
                long long v55 = (UChar **)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
                icu::TimeZoneRule::getName(v55, &v104);
                uint64_t v24 = icu::UMemory::operator new(v57, (icu::UMemory *)0x60, v56);
                if (v24)
                {
                  long long v58 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
                  int v59 = icu::TimeZoneRule::getRawOffset(v58);
                  long long v60 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
                  int v61 = icu::TimeZoneRule::getDSTSavings(v60);
                  icu::AnnualTimeZoneRule::AnnualTimeZoneRule((icu::AnnualTimeZoneRule *)v24, &v104, v59, v61, v54, v101[1] - 1, 0x7FFFFFFF);
                }
                BOOL v62 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
                uint64_t v63 = icu::TimeZoneRule::getRawOffset(v62);
                int v64 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
                uint64_t v65 = icu::TimeZoneRule::getDSTSavings(v64);
                if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t, uint64_t, double *, double))(*v24 + 80))(v24, v63, v65, 1, &v98, a2))
                {
                  v66.n128_f64[0] = v98;
                  if (v98 <= a2)
                  {
                    long long v67 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
                    if (RawOffset == icu::TimeZoneRule::getRawOffset(v67))
                    {
                      long long v68 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
                      if (DSTSavings == icu::TimeZoneRule::getDSTSavings(v68)) {
                        goto LABEL_50;
                      }
                    }
                  }
                }
                (*(void (**)(uint64_t *, __n128))(*v24 + 8))(v24, v66);
              }
            }
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t, _OWORD *, double))(*(void *)v11 + 120))(v11, 1, v102, a2))
          {
            if ((uint64_t v69 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102),
                  !icu::TimeZoneRule::getDSTSavings(v69))
              && (long long v72 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102),
                  icu::TimeZoneRule::getDSTSavings(v72))
              || (uint64_t v70 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102),
                  icu::TimeZoneRule::getDSTSavings(v70))
              && (long long v71 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102),
                  !icu::TimeZoneRule::getDSTSavings(v71)))
            {
              double v73 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v102);
              uint64_t v74 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
              double v75 = v73 + (double)(int)icu::TimeZoneRule::getRawOffset(v74);
              uint64_t v76 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
              int v77 = icu::TimeZoneRule::getDSTSavings(v76);
              sub_18C93E568(&v101[1], v101, (_DWORD *)&v100 + 1, (int *)&v100, (int *)&v99 + 1, &v99, v75 + (double)v77);
              int v78 = sub_18C93E644(v101[1], v101[0], SHIDWORD(v100));
              uint64_t v81 = icu::UMemory::operator new(v80, (icu::UMemory *)0x28, v79);
              unint64_t v82 = (icu::DateTimeRule *)v81;
              if (v81) {
                icu::DateTimeRule::DateTimeRule((uint64_t)v81, v101[0], v78, v100, v99, 0);
              }
              v83 = (UChar **)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
              icu::TimeZoneRule::getName(v83, &v104);
              uint64_t v24 = icu::UMemory::operator new(v85, (icu::UMemory *)0x60, v84);
              if (v24)
              {
                StartYeaunint64_t r = icu::AnnualTimeZoneRule::getStartYear(v23);
                icu::AnnualTimeZoneRule::AnnualTimeZoneRule((icu::AnnualTimeZoneRule *)v24, &v104, RawOffset, DSTSavings, v82, StartYear - 1, 0x7FFFFFFF);
              }
              int v87 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
              uint64_t v88 = icu::TimeZoneRule::getRawOffset(v87);
              int v89 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
              uint64_t v90 = icu::TimeZoneRule::getDSTSavings(v89);
              if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t, void, double *, double))(*v24 + 72))(v24, v88, v90, 0, &v98, a2))
              {
                v91.n128_f64[0] = v98;
                if (v98 > Time)
                {
LABEL_50:
                  icu::TimeZoneRule::getName((UChar **)v23, &v109);
                  HIDWORD(v103) = icu::TimeZoneRule::getRawOffset(v23);
                  int v28 = icu::TimeZoneRule::getDSTSavings(v23);
                  goto LABEL_10;
                }
              }
              (*(void (**)(uint64_t *, __n128))(*v24 + 8))(v24, v91);
            }
          }
          if (v23)
          {
            (*(void (**)(icu::AnnualTimeZoneRule *))(*(void *)v23 + 8))(v23);
            uint64_t v24 = 0;
            long double v23 = 0;
            goto LABEL_54;
          }
LABEL_25:
          uint64_t v24 = 0;
          goto LABEL_54;
        }
      }
    }
    else
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, _OWORD *, double))(*(void *)v11 + 120))(v11, 1, v102, a2))
      {
        __int16 v25 = (UChar **)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
        icu::TimeZoneRule::getName(v25, &v109);
        double v26 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
        HIDWORD(v103) = icu::TimeZoneRule::getRawOffset(v26);
        int v27 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
        int v28 = icu::TimeZoneRule::getDSTSavings(v27);
        long double v23 = 0;
        uint64_t v24 = 0;
LABEL_10:
        LODWORD(v103) = v28;
LABEL_54:
        v92 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new(v21, (icu::UMemory *)0x50, v20);
        if (v92) {
          v92 = icu::InitialTimeZoneRule::InitialTimeZoneRule(v92, &v109, SHIDWORD(v103), v103);
        }
        *a3 = v92;
        if (v23 && v24)
        {
          int v93 = icu::TimeZoneRule::getDSTSavings(v23);
          if (v93) {
            v94 = a5;
          }
          else {
            v94 = a4;
          }
          if (v93) {
            int v95 = a4;
          }
          else {
            int v95 = a5;
          }
          const icu::UnicodeString *v94 = v23;
          *int v95 = (icu::AnnualTimeZoneRule *)v24;
        }
        goto LABEL_65;
      }
      (*(void (**)(uint64_t, void, char *, uint64_t *, UErrorCode *, double))(*(void *)v11 + 48))(v11, 0, (char *)&v103 + 4, &v103, a6, a2);
      int v21 = (uint64_t *)*(unsigned int *)a6;
      if ((int)v21 > 0)
      {
LABEL_65:
        icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v102);
        icu::UnicodeString::~UnicodeString(v96, (icu::UnicodeString *)&v104);
        return icu::UnicodeString::~UnicodeString(v97, (icu::UnicodeString *)&v109);
      }
    }
    long double v23 = 0;
    goto LABEL_25;
  }
  return this;
}

void icu::BasicTimeZone::getTimeZoneRulesAfter(icu::BasicTimeZone *this, double a2, icu::InitialTimeZoneRule **a3, icu::UVector **a4, UErrorCode *a5)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 > 0) {
    return;
  }
  uint64_t v101 = 0;
  memset(v100, 0, sizeof(v100));
  icu::TimeZoneTransition::TimeZoneTransition(v100);
  int v99 = 0;
  long long v103 = 0u;
  uint64_t v106 = 0;
  long long v105 = 0u;
  long long v104 = 0u;
  v102 = (UChar *)&unk_1EDA47700;
  LOWORD(v103) = 2;
  double v97 = 0.0;
  double v98 = 0.0;
  double v96 = 0.0;
  *a3 = 0;
  *a4 = 0;
  int v99 = (*(uint64_t (**)(icu::BasicTimeZone *, UErrorCode *))(*(void *)this + 136))(this, a5);
  uint64_t v11 = *(unsigned int *)a5;
  if ((int)v11 > 0) {
    goto LABEL_118;
  }
  long double v12 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x28, v10);
  if (!v12)
  {
    uint64_t v11 = *(unsigned int *)a5;
    if ((int)v11 <= 0)
    {
      uint64_t v11 = 7;
      *a5 = U_MEMORY_ALLOCATION_ERROR;
    }
    goto LABEL_118;
  }
  double v13 = (uint64_t (**)(void *))v12;
  icu::UVector::UVector(v12, uprv_deleteUObject, 0, v99, a5);
  if (*(int *)a5 > 0) {
    goto LABEL_117;
  }
  int v14 = (void **)uprv_malloc(8 * v99);
  if (!v14)
  {
LABEL_107:
    *a5 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_116;
  }
  (*(void (**)(icu::BasicTimeZone *, uint64_t *, void **, int *, UErrorCode *))(*(void *)this + 144))(this, &v101, v14, &v99, a5);
  if (*(int *)a5 > 0) {
    goto LABEL_116;
  }
  if (v99 >= 1)
  {
    for (uint64_t i = 0; i < v99; ++i)
    {
      double v16 = (void *)(*(uint64_t (**)(void *))(*v14[i] + 24))(v14[i]);
      if (v16) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = *a5 <= U_ZERO_ERROR;
      }
      if (v17) {
        *a5 = U_MEMORY_ALLOCATION_ERROR;
      }
      icu::UVector::adoptElement(v13, v16, a5);
      if (*(int *)a5 >= 1) {
        goto LABEL_116;
      }
    }
  }
  if (!(*(unsigned int (**)(icu::BasicTimeZone *, uint64_t, _OWORD *, double))(*(void *)this + 120))(this, 1, v100, a2))
  {
    unint64_t v79 = (icu::InitialTimeZoneRule *)(*(uint64_t (**)(uint64_t))(*(void *)v101 + 24))(v101);
    *a3 = v79;
    if (v79)
    {
      *a4 = (icu::UVector *)v13;
      uprv_free(v14);
      goto LABEL_118;
    }
    goto LABEL_107;
  }
  unint64_t v20 = uprv_malloc(v99);
  if (!v20)
  {
LABEL_109:
    *a5 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_115;
  }
  int v21 = icu::UMemory::operator new(v19, (icu::UMemory *)0x28, v18);
  if (!v21)
  {
    if (*(int *)a5 > 0) {
      goto LABEL_115;
    }
    goto LABEL_109;
  }
  double v22 = (icu::UVector *)v21;
  icu::UVector::UVector((uint64_t)v21, (uint64_t)uprv_deleteUObject, 0, (int *)a5);
  if (*(int *)a5 > 0) {
    goto LABEL_114;
  }
  __n128 v91 = v20;
  long double v23 = (UChar **)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v100);
  icu::TimeZoneRule::getName(v23, &v102);
  double v26 = icu::UMemory::operator new(v25, (icu::UMemory *)0x50, v24);
  if (!v26)
  {
    if (*(int *)a5 <= 0) {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
    }
    goto LABEL_114;
  }
  int v27 = (icu::InitialTimeZoneRule *)v26;
  int v86 = v22;
  int v28 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v100);
  int RawOffset = icu::TimeZoneRule::getRawOffset(v28);
  int v30 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v100);
  int DSTSavings = icu::TimeZoneRule::getDSTSavings(v30);
  uint64_t v90 = v27;
  icu::InitialTimeZoneRule::InitialTimeZoneRule(v27, &v102, RawOffset, DSTSavings);
  if (*(int *)a5 > 0) {
    goto LABEL_113;
  }
  unint64_t v20 = v91;
  if (v99 >= 1)
  {
    for (uint64_t j = 0;
          j < v99;
          v91[j++] = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, double *, double))(*(void *)v33 + 72))(v33, v34, v35, 0, &v98, a2) == 0)
    {
      uint64_t v33 = icu::UVector::elementAt((icu::UVector *)v13, j);
      uint64_t v34 = icu::TimeZoneRule::getRawOffset(v90);
      uint64_t v35 = icu::TimeZoneRule::getDSTSavings(v90);
      unint64_t v20 = v91;
    }
  }
  int v36 = 0;
  int v89 = 0;
  double v98 = a2;
  while (1)
  {
    if (!(*(unsigned int (**)(icu::BasicTimeZone *, void, _OWORD *, double))(*(void *)this + 112))(this, 0, v100, v98))
    {
LABEL_102:
      *a3 = v90;
      *a4 = v86;
      goto LABEL_115;
    }
    double Time = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v100);
    if (Time == v98) {
      goto LABEL_112;
    }
    double v98 = Time;
    int v38 = (const void *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v100);
    int v39 = v99;
    if (v99 < 1)
    {
      unsigned int k = 0;
    }
    else
    {
      for (unsigned int k = 0; (int)k < v99; ++k)
      {
        uint64_t v41 = icu::UVector::elementAt((icu::UVector *)v13, k);
        char v42 = (*(uint64_t (**)(uint64_t, const void *))(*(void *)v41 + 32))(v41, v38);
        int v39 = v99;
        if (v42) {
          break;
        }
      }
    }
    if ((int)k >= v39)
    {
LABEL_112:
      *a5 = U_INVALID_STATE_ERROR;
      goto LABEL_113;
    }
    if (!v20[k]) {
      break;
    }
LABEL_100:
    if ((_BYTE)v89 && (_BYTE)v36) {
      goto LABEL_102;
    }
  }
  if (!v38)
  {
LABEL_99:
    v20[k] = 1;
    goto LABEL_100;
  }
  int v85 = v36;
  if (!v87)
  {
    if (v44)
    {
      double v45 = v44;
      int v46 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v100);
      uint64_t v47 = icu::TimeZoneRule::getRawOffset(v46);
      long long v48 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v100);
      uint64_t v49 = icu::TimeZoneRule::getDSTSavings(v48);
      (*((void (**)(UChar **, uint64_t, uint64_t, double *))*v45 + 7))(v45, v47, v49, &v96);
      double v50 = v96;
      if (v50 == icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v100))
      {
        unint64_t v51 = (void *)(*((uint64_t (**)(UChar **))*v45 + 3))(v45);
        if (v51) {
          BOOL v52 = 0;
        }
        else {
          BOOL v52 = *a5 <= U_ZERO_ERROR;
        }
        if (v52) {
          *a5 = U_MEMORY_ALLOCATION_ERROR;
        }
        icu::UVector::adoptElement((uint64_t (**)(void *))v86, v51, a5);
        if (*(int *)a5 >= 1) {
          goto LABEL_113;
        }
      }
      else
      {
        LODWORD(v95[0]) = 0;
        uint64_t v93 = 0;
        uint64_t v94 = 0;
        int v92 = 0;
        double v65 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v100);
        sub_18C93E568((int *)v95, (_DWORD *)&v94 + 1, &v94, (int *)&v93 + 1, (int *)&v93, &v92, v65);
        icu::TimeZoneRule::getName(v45, &v102);
        long long v68 = (icu::AnnualTimeZoneRule *)icu::UMemory::operator new(v67, (icu::UMemory *)0x60, v66);
        if (v68)
        {
          int v88 = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v45);
          int v84 = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v45);
          Rule = (const icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule((icu::AnnualTimeZoneRule *)v45);
          int v82 = v95[0];
          EndYeaunint64_t r = icu::AnnualTimeZoneRule::getEndYear((icu::AnnualTimeZoneRule *)v45);
          icu::AnnualTimeZoneRule::AnnualTimeZoneRule(v68, (const icu::UnicodeString *)&v102, v88, v84, Rule, v82, EndYear);
        }
        else if (*(int *)a5 <= 0)
        {
          *a5 = U_MEMORY_ALLOCATION_ERROR;
        }
        icu::UVector::adoptElement((uint64_t (**)(void *))v86, v68, a5);
        if (*(int *)a5 > 0) {
          goto LABEL_113;
        }
      }
      if (icu::AnnualTimeZoneRule::getEndYear((icu::AnnualTimeZoneRule *)v45) == 0x7FFFFFFF)
      {
        int v77 = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v45);
        int v78 = v89;
        if (!v77) {
          int v78 = 1;
        }
        int v89 = v78;
        int v36 = v85;
        if (v77) {
          int v36 = 1;
        }
        unint64_t v20 = v91;
        goto LABEL_99;
      }
    }
    unint64_t v20 = v91;
    goto LABEL_98;
  }
  memset(v95, 0, sizeof(v95));
  icu::TimeZoneTransition::TimeZoneTransition(v95);
  double v97 = a2;
  if (!(*(unsigned int (**)(icu::BasicTimeZone *, void, _OWORD *, double))(*(void *)this + 112))(this, 0, v95, a2))
  {
LABEL_97:
    icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v95);
LABEL_98:
    int v36 = v85;
    goto LABEL_99;
  }
  while (1)
  {
    uint64_t v43 = icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v95);
    if ((*(uint64_t (**)(uint64_t, icu::TimeZoneRule *))(*(void *)v43 + 32))(v43, v87)) {
      break;
    }
    double v97 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v95);
    if (!(*(unsigned int (**)(icu::BasicTimeZone *, void, _OWORD *))(*(void *)this + 112))(this, 0, v95))goto LABEL_97; {
  }
    }
  long long v53 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v100);
  uint64_t v54 = icu::TimeZoneRule::getRawOffset(v53);
  long long v55 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v100);
  uint64_t v56 = icu::TimeZoneRule::getDSTSavings(v55);
  (*(void (**)(icu::TimeZoneRule *, uint64_t, uint64_t, double *))(*(void *)v87 + 56))(v87, v54, v56, &v96);
  if (v96 > a2)
  {
    long long v57 = (void *)(*(uint64_t (**)(icu::TimeZoneRule *, double))(*(void *)v87 + 24))(v87, v96);
    if (v57) {
      BOOL v58 = 0;
    }
    else {
      BOOL v58 = *a5 <= U_ZERO_ERROR;
    }
    if (v58) {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
    }
    icu::UVector::adoptElement((uint64_t (**)(void *))v86, v57, a5);
    unint64_t v20 = v91;
    if (*(int *)a5 >= 1) {
      goto LABEL_122;
    }
    goto LABEL_97;
  }
  int started = icu::TimeArrayTimeZoneRule::countStartTimes(v87);
  unsigned int TimeType = icu::TimeArrayTimeZoneRule::getTimeType(v87);
  if (started >= 1)
  {
    unsigned int v60 = 0;
    while (1)
    {
      icu::TimeArrayTimeZoneRule::getStartTimeAt(v87, v60, &v97);
      if (TimeType)
      {
        if (TimeType != 1)
        {
          double v64 = v97;
          goto LABEL_70;
        }
        int v61 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v100);
        int v62 = icu::TimeZoneRule::getRawOffset(v61);
      }
      else
      {
        uint64_t v63 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v100);
        int v62 = icu::TimeZoneRule::getDSTSavings(v63);
      }
      double v64 = v97 - (double)v62;
      double v97 = v64;
LABEL_70:
      if (v64 > a2) {
        goto LABEL_76;
      }
      if (started == ++v60)
      {
        unsigned int v60 = started;
        goto LABEL_76;
      }
    }
  }
  unsigned int v60 = 0;
LABEL_76:
  unint64_t v20 = v91;
  if (*(int *)a5 > 0) {
    goto LABEL_122;
  }
  *(void *)v83 = started - v60;
  if (v83[0] < 1) {
    goto LABEL_97;
  }
  uint64_t v81 = (char *)uprv_malloc(8 * (started - v60));
  if (v81)
  {
    uint64_t v71 = 0;
    do
    {
      icu::TimeArrayTimeZoneRule::getStartTimeAt(v87, v60++, (double *)&v81[v71]);
      v71 += 8;
    }
    while (8 * *(void *)v83 != v71);
    icu::TimeZoneRule::getName((UChar **)v87, &v102);
    uint64_t v74 = icu::UMemory::operator new(v73, (icu::UMemory *)0x160, v72);
    if (v74)
    {
      uint64_t v75 = icu::TimeZoneRule::getRawOffset(v87);
      uint64_t v76 = icu::TimeZoneRule::getDSTSavings(v87);
      icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(v74, &v102, v75, v76, v81, *(void *)v83, TimeType);
    }
    else if (*(int *)a5 <= 0)
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
    }
    icu::UVector::adoptElement((uint64_t (**)(void *))v86, v74, a5);
    if (*(int *)a5 >= 1) {
      goto LABEL_121;
    }
    uprv_free(v81);
    unint64_t v20 = v91;
    goto LABEL_97;
  }
  *a5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_121:
  uprv_free(v81);
LABEL_122:
  icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v95);
LABEL_113:
  (*(void (**)(icu::TimeZoneRule *))(*(void *)v90 + 8))(v90);
  double v22 = v86;
  unint64_t v20 = v91;
LABEL_114:
  (*(void (**)(icu::UVector *))(*(void *)v22 + 8))(v22);
LABEL_115:
  uprv_free(v20);
LABEL_116:
  uprv_free(v14);
LABEL_117:
  (*((void (**)(uint64_t (**)(void *)))*v13 + 1))(v13);
LABEL_118:
  icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)&v102);
  icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v100);
}

void icu::BasicTimeZone::getOffsetFromLocal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*a6 <= 0) {
    *a6 = 16;
  }
}

uint64_t icu::BasicTimeZone::getOffsetFromLocal(icu::BasicTimeZone *this, double a2, uint64_t a3, uint64_t a4, int *a5, int *a6, UErrorCode *a7)
{
  return (*(uint64_t (**)(icu::BasicTimeZone *, uint64_t, uint64_t, int *, int *, UErrorCode *, double))(*(void *)this + 160))(this, a3, a4, a5, a6, a7, a2);
}

uint64_t sub_18C8D1108(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (a3 >= 1)
  {
    uint64_t v5 = a4;
    int v8 = 0;
    unsigned int v39 = 2 * a3;
    memset(v42, 0, sizeof(v42));
    int v41 = 0;
    while (1)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, _OWORD *, uint64_t, int *))(*(void *)v5 + 24))(v5, 1, v39, v42, 64, &v41);
      uint64_t v10 = v41;
      if (v41 > 15)
      {
        uint64_t v11 = (_OWORD *)v9;
      }
      else
      {
        int v41 = 64;
        uint64_t v11 = v42;
        uint64_t v10 = 64;
      }
      if (v8 < a3)
      {
        unint64_t v12 = (unint64_t)v11 + v10 - 4;
        if ((unint64_t)v11 <= v12) {
          break;
        }
      }
      LODWORD(v13) = v11;
LABEL_63:
      (*(void (**)(uint64_t, _OWORD *, void, uint64_t, uint64_t))(*(void *)a4 + 16))(a4, v11, (v13 - v11), 56320, 4238353408);
      uint64_t v5 = a4;
      if (v8 >= a3) {
        return a1;
      }
    }
    double v13 = v11;
    while (1)
    {
      if ((a1 - 40960) >= 0xFFFFAE00) {
        int v14 = -30292;
      }
      else {
        int v14 = a1 & 0xFFFFFF80 ^ 0xFFFFFFB0;
      }
      uint64_t v15 = v8 + 1;
      a1 = *(unsigned __int16 *)(a2 + 2 * v8);
      BOOL v16 = (a1 & 0xFC00) != 0xD800 || v15 == a3;
      if (v16 || (int v17 = *(unsigned __int16 *)(a2 + 2 * v15), (v17 & 0xFC00) != 0xDC00))
      {
        if (a1 == 65534)
        {
          a1 = 0;
          *v13++ = 2;
          ++v8;
          goto LABEL_59;
        }
        ++v8;
      }
      else
      {
        v8 += 2;
        a1 = (v17 + (a1 << 10) - 56613888);
      }
      unsigned int v18 = a1 + v14;
      if ((int)v18 < -80)
      {
        if (v18 >= 0xFFFFD654)
        {
          int v19 = -v18;
          unsigned int v20 = (unsigned __int16)v19 / 0xFDu;
          unsigned int v21 = (unsigned __int16)v19 % 0xFDu;
          int v22 = -v20;
          BOOL v23 = (unsigned __int16)v21 == 0;
          if ((_WORD)v21) {
            unsigned int v18 = -v21;
          }
          else {
            LOBYTE(v18) = 3;
          }
          if (!v23) {
            LOBYTE(v22) = ~(_BYTE)v20;
          }
          unsigned char *v13 = v22 + 49;
          goto LABEL_33;
        }
        unsigned int v24 = -v18 / 0xFD;
        if (-v18 == 253 * v24) {
          unsigned int v25 = -v18 / 0xFD;
        }
        else {
          unsigned int v25 = v24 + 1;
        }
        if (-v18 == 253 * v24) {
          LOBYTE(v26) = 3;
        }
        else {
          unsigned int v26 = -(-v18 % 0xFD);
        }
        if (v18 >= 0xFFFD0EEE)
        {
          v13[2] = v26;
          unsigned int v27 = (unsigned __int16)v25 / 0xFDu;
          unsigned int v28 = v25 - 253 * v27;
          unsigned int v29 = -v27;
          BOOL v30 = (unsigned __int16)v28 == 0;
          if ((_WORD)v28) {
            int v31 = -v28;
          }
          else {
            LOBYTE(v31) = 3;
          }
          v13[1] = v31;
          if (!v30) {
            LOBYTE(v29) = ~(_BYTE)v27;
          }
          LOBYTE(v29) = v29 + 7;
          goto LABEL_49;
        }
        v13[3] = v26;
        unsigned int v33 = v25 / 0xFD;
        unsigned int v34 = v25 % 0xFD;
        if (v34)
        {
          ++v33;
          int v35 = -v34;
        }
        else
        {
          LOBYTE(v35) = 3;
        }
        v13[2] = v35;
        unsigned int v36 = v33 - 253 * ((unsigned __int16)v33 / 0xFDu);
        if ((_WORD)v36) {
          int v37 = -v36;
        }
        else {
          LOBYTE(v37) = 3;
        }
        v13[1] = v37;
        unsigned char *v13 = 3;
      }
      else
      {
        if ((int)v18 <= 80)
        {
          *v13++ = v18 - 127;
          goto LABEL_59;
        }
        if (v18 >> 2 <= 0xA6A)
        {
          unsigned char *v13 = (unsigned __int16)v18 / 0xFDu - 46;
          LOBYTE(v18) = (unsigned __int16)v18 % 0xFDu + 3;
LABEL_33:
          v13[1] = v18;
          v13 += 2;
          goto LABEL_59;
        }
        unsigned int v32 = v18 % 0xFD + 3;
        if (v18 <= 0x2F111)
        {
          v13[2] = v32;
          v13[1] = (unsigned __int16)(v18 / 0xFD) % 0xFDu + 3;
          unsigned int v29 = v18 / 0xFA09 - 4;
LABEL_49:
          unsigned char *v13 = v29;
          v13 += 3;
          goto LABEL_59;
        }
        v13[3] = v32;
        v13[2] = v18 / 0xFD - -3 * ((33952311 * (unint64_t)(v18 / 0xFD)) >> 33) + 3;
        v13[1] = (unsigned __int16)(v18 / 0xFA09) % 0xFDu + 3;
        unsigned char *v13 = -1;
      }
      v13 += 4;
LABEL_59:
      if (v8 >= a3 || (unint64_t)v13 > v12) {
        goto LABEL_63;
      }
    }
  }
  return a1;
}

void *icu::BreakTransliterator::getStaticClassID(icu::BreakTransliterator *this)
{
  return &unk_1E9192028;
}

void *sub_18C8D1524()
{
  return &unk_1E9192028;
}

icu::Transliterator *sub_18C8D1530(icu::Transliterator *a1, icu::UnicodeFilter *a2)
{
  v7[8] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t v6 = L"Any-BreakInternal";
  icu::UnicodeString::UnicodeString(v7, 1, &v6);
  icu::Transliterator::Transliterator(a1, v7, a2);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
  *(void *)a1 = &unk_1EDA48DB0;
  *((void *)a1 + 11) = 0;
  *((void *)a1 + 12) = 0;
  icu::UnicodeString::UnicodeString((uint64_t)a1 + 104, 32);
  return a1;
}

void sub_18C8D1600(void *a1@<X0>, void *a2@<X8>)
{
  *a1 = &unk_1EDA48DB0;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 13));
  uint64_t v3 = a1[12];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[11];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
}

void sub_18C8D16B0(void *a1@<X0>, void *a2@<X8>)
{
  sub_18C8D1600(a1, a2);

  icu::UMemory::operator delete(v2);
}

icu::Transliterator *sub_18C8D16D8@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0xA8, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1);
    *(void *)uint64_t v5 = &unk_1EDA48DB0;
    *((void *)v5 + 11) = 0;
    *((void *)v5 + 12) = 0;
    icu::UnicodeString::UnicodeString((icu::Transliterator *)((char *)v5 + 104), a1 + 13);
  }
  return v5;
}

icu::UVector32 *sub_18C8D1744(uint64_t a1, uint64_t *a2, _DWORD *a3, int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  UErrorCode v35 = U_ZERO_ERROR;
  umtx_lock(0);
  WordInstance = *(char **)(a1 + 88);
  uint64_t v9 = *(icu::UVector32 **)(a1 + 96);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  umtx_unlock(0);
  if (WordInstance)
  {
    if (v9) {
      goto LABEL_3;
    }
LABEL_6:
    __n128 result = (icu::UVector32 *)icu::UMemory::operator new(v12, (icu::UMemory *)0x20, v11);
    if (!result) {
      goto LABEL_45;
    }
    uint64_t v9 = result;
    icu::UVector32::UVector32(result, &v35);
    if (!WordInstance) {
      goto LABEL_44;
    }
    goto LABEL_8;
  }
  English = (char **)icu::Locale::getEnglish(v10);
  WordInstance = icu::BreakIterator::createWordInstance(English, (const icu::Locale *)&v35, v14, v15);
  if (!v9) {
    goto LABEL_6;
  }
LABEL_3:
  if (!WordInstance) {
    goto LABEL_44;
  }
LABEL_8:
  if (v35 > U_ZERO_ERROR)
  {
LABEL_44:
    __n128 result = (icu::UVector32 *)(*(uint64_t (**)(icu::UVector32 *))(*(void *)v9 + 8))(v9);
    goto LABEL_45;
  }
  icu::UVector32::removeAllElements((uint64_t)v9);
  memset(v36, 0, sizeof(v36));
  sub_18C8D1AE8(a2, (uint64_t)v36);
  (*(void (**)(char *, _OWORD *))(*(void *)WordInstance + 56))(WordInstance, v36);
  (*(void (**)(char *, void))(*(void *)WordInstance + 128))(WordInstance, a3[2]);
  int v17 = (*(uint64_t (**)(char *))(*(void *)WordInstance + 104))(WordInstance);
  unsigned int v18 = (uint64_t *)a3[3];
  if (v17 != -1 && v17 < (int)v18)
  {
    int v20 = v17;
    while (1)
    {
      if (v20)
      {
        UChar32 v21 = icu::UnicodeString::char32At(v18, (icu::UnicodeString *)v36, v20 - 1);
        int v22 = (uint64_t *)(1 << u_charType(v21));
        if (((unsigned __int16)v22 & 0x1FE) != 0)
        {
          UChar32 v23 = icu::UnicodeString::char32At(v22, (icu::UnicodeString *)v36, v20);
          if (((1 << u_charType(v23)) & 0x1FE) != 0)
          {
            int v24 = *((_DWORD *)v9 + 2);
            if (v24 >= -1 && *((_DWORD *)v9 + 3) > v24) {
              goto LABEL_22;
            }
            if (icu::UVector32::expandCapacity(v9, v24 + 1, &v35)) {
              break;
            }
          }
        }
      }
LABEL_23:
      int v25 = (*(uint64_t (**)(char *))(*(void *)WordInstance + 104))(WordInstance);
      int v20 = v25;
      unsigned int v18 = (uint64_t *)a3[3];
      if (v25 == -1 || v25 >= (int)v18) {
        goto LABEL_27;
      }
    }
    int v24 = *((_DWORD *)v9 + 2);
LABEL_22:
    *(_DWORD *)(*((void *)v9 + 3) + 4 * v24) = v20;
    ++*((_DWORD *)v9 + 2);
    goto LABEL_23;
  }
LABEL_27:
  int v27 = *((_DWORD *)v9 + 2);
  if (!v27)
  {
    int v29 = 0;
LABEL_36:
    int v30 = 0;
    goto LABEL_37;
  }
  if (*(__int16 *)(a1 + 112) < 0) {
    int v28 = *(_DWORD *)(a1 + 116);
  }
  else {
    int v28 = *(unsigned __int16 *)(a1 + 112) >> 5;
  }
  int v29 = v28 * v27;
  if (v27 < 1) {
    goto LABEL_36;
  }
  int v30 = *(_DWORD *)(*((void *)v9 + 3) + 4 * (v27 - 1));
  do
  {
    *((_DWORD *)v9 + 2) = v27 - 1;
    uint64_t v31 = *(unsigned int *)(*((void *)v9 + 3) + 4 * (v27 - 1));
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*a2 + 32))(a2, v31, v31, a1 + 104);
    int v27 = *((_DWORD *)v9 + 2);
  }
  while (v27 > 0);
  LODWORD(v18) = a3[3];
LABEL_37:
  int v32 = a3[1] + v29;
  int v33 = v18 + v29;
  a3[3] = v33;
  if (a4) {
    int v33 = v30 + v29;
  }
  a3[1] = v32;
  a3[2] = v33;
  umtx_lock(0);
  if (!*(void *)(a1 + 88))
  {
    *(void *)(a1 + 88) = WordInstance;
    WordInstance = 0;
  }
  if (!*(void *)(a1 + 96))
  {
    *(void *)(a1 + 96) = v9;
    uint64_t v9 = 0;
  }
  umtx_unlock(0);
  __n128 result = (icu::UVector32 *)icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v36);
  if (v9) {
    goto LABEL_44;
  }
LABEL_45:
  if (WordInstance) {
    return (icu::UVector32 *)(*(uint64_t (**)(char *))(*(void *)WordInstance + 8))(WordInstance);
  }
  return result;
}

icu::UnicodeString *sub_18C8D1AE8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  uint64_t v4 = *a1;
  if (v5)
  {
    return icu::UnicodeString::operator=((UChar **)a2, v5);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t *))(v4 + 64))(a1);
    int v8 = *(uint64_t (**)(const void *, void, uint64_t, uint64_t))(*a1 + 24);
    return (icu::UnicodeString *)v8(a1, 0, v7, a2);
  }
}

uint64_t sub_18C8D1C10(uint64_t a1)
{
  return a1 + 104;
}

icu::UnicodeString *sub_18C8D1C18(uint64_t a1, UChar **a2)
{
  return icu::UnicodeString::operator=((UChar **)(a1 + 104), a2);
}

void *icu::BuddhistCalendar::getStaticClassID(icu::BuddhistCalendar *this)
{
  return &unk_1E919202C;
}

void *sub_18C8D1C2C()
{
  return &unk_1E919202C;
}

icu::GregorianCalendar *sub_18C8D1C38(icu::GregorianCalendar *a1, char **a2, UErrorCode *a3)
{
  uint64_t v5 = icu::GregorianCalendar::GregorianCalendar(a1, a2, a3);
  *(void *)uint64_t v5 = &unk_1EDA48E70;
  icu::Calendar::getNow(v5);
  icu::Calendar::setTimeInMillis((uint64_t)a1, v6, a3);
  return a1;
}

void sub_18C8D1C98(icu::GregorianCalendar *a1)
{
  icu::GregorianCalendar::~GregorianCalendar(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C8D1CC0(const icu::GregorianCalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::GregorianCalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x290, a2);
  if (v4)
  {
    icu::GregorianCalendar::GregorianCalendar(v4, a1);
    *uint64_t v5 = &unk_1EDA48E70;
  }
}

const char *sub_18C8D1D10()
{
  return "buddhist";
}

uint64_t sub_18C8D1D1C(_DWORD *a1)
{
  if (icu::Calendar::newerField((uint64_t)a1, 0x13u, 1u) == 19)
  {
    if ((int)a1[52] >= 1) {
      return a1[22];
    }
  }
  else if ((int)a1[34] >= 1)
  {
    return (a1[4] - 543);
  }
  return 1970;
}

double sub_18C8D1D80(uint64_t a1, int a2, UErrorCode *a3)
{
  icu::GregorianCalendar::handleComputeFields((_DWORD *)a1, a2, a3);
  int v4 = *(_DWORD *)(a1 + 88) + 543;
  *(_WORD *)(a1 + 108) = 257;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = v4;
  *(void *)&double result = 0x100000001;
  *(void *)(a1 + 132) = 0x100000001;
  return result;
}

uint64_t sub_18C8D1DC0(uint64_t a1, int a2, int a3)
{
  if (a2) {
    return icu::GregorianCalendar::handleGetLimit(a1, a2, a3);
  }
  else {
    return 0;
  }
}

uint64_t sub_18C8D1DD0()
{
  return 1;
}

double sub_18C8D1DD8()
{
  if (atomic_load_explicit(dword_1E9192030, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1E9192030))
  {
    sub_18C8D1E28();
    icu::umtx_initImplPostInit((unsigned int *)dword_1E9192030);
  }
  return *(double *)&qword_1EB20A6E0;
}

void sub_18C8D1E28()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  UErrorCode v3 = U_ZERO_ERROR;
  bzero(v5, 0x290uLL);
  icu::Locale::Locale((icu::Locale *)v4, "@calendar=buddhist", 0, 0, 0);
  sub_18C8D1C38((icu::GregorianCalendar *)v5, v4, &v3);
  icu::Locale::~Locale((icu::Locale *)v4);
  if (v3 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v0);
    icu::Calendar::setTimeInMillis((uint64_t)v5, v1, &v3);
    icu::Calendar::add(v5, 1u, -80, &v3);
    double TimeInMillis = icu::Calendar::getTimeInMillis((icu::Calendar *)v5, &v3);
    dword_1EB20A6E8 = icu::Calendar::get(v5, 1u, &v3);
    qword_1EB20A6E0 = *(void *)&TimeInMillis;
  }
  icu::GregorianCalendar::~GregorianCalendar((icu::GregorianCalendar *)v5);
}

uint64_t sub_18C8D1F2C()
{
  if (atomic_load_explicit(dword_1E9192030, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1E9192030))
  {
    sub_18C8D1E28();
    icu::umtx_initImplPostInit((unsigned int *)dword_1E9192030);
  }
  return dword_1EB20A6E8;
}

void icu::SharedCalendar::~SharedCalendar(icu::SharedCalendar *this)
{
  *(void *)this = &unk_1EDA49070;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::SharedObject::~SharedObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::SharedCalendar::~SharedCalendar(this);

  icu::UMemory::operator delete(v1);
}

uint64_t *icu::LocaleCacheKey<icu::SharedCalendar>::createObject(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  Instance = icu::Calendar::makeInstance((icu::Calendar *)(a1 + 16), a3, a3);
  uint64_t v6 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v6 > 0) {
    return 0;
  }
  uint64_t v9 = Instance;
  uint64_t v10 = icu::UMemory::operator new(v6, (icu::UMemory *)0x20, v5);
  if (v10)
  {
    uint64_t v7 = v10;
    v10[1] = 0;
    v10[2] = 0;
    *uint64_t v10 = (uint64_t)&unk_1EDA49070;
    v10[3] = (uint64_t)v9;
    icu::SharedObject::addRef((uint64_t)v10);
  }
  else
  {
    if (v9) {
      (*(void (**)(void *))(*(void *)v9 + 8))(v9);
    }
    uint64_t v7 = 0;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return v7;
}

void *icu::Calendar::makeInstance(icu::Calendar *this, UErrorCode *a2, UErrorCode *a3)
{
  v42[8] = *(void **)MEMORY[0x1E4F143B8];
  if (*(int *)a2 <= 0)
  {
    memset(v39, 0, sizeof(v39));
    icu::Locale::Locale((icu::Locale *)v39);
    uint64_t v6 = (char *)*((void *)this + 5);
    int v38 = 0;
    memset(&v42[1], 0, 56);
    v42[0] = (char *)&v42[1] + 5;
    LODWORD(v42[1]) = 40;
    v40[0] = 0;
    v40[1] = 0;
    icu::CharStringByteSink::CharStringByteSink(v40, (uint64_t)v42);
    ulocimp_canonicalize(v6);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v40);
    memset(&v40[1], 0, 48);
    uint64_t v41 = 0;
    v40[0] = (char *)&v40[1] + 5;
    LODWORD(v40[1]) = 40;
    v37[0] = 0;
    v37[1] = 0;
    icu::CharStringByteSink::CharStringByteSink(v37, (uint64_t)v40);
    ulocimp_getKeywordValue((char *)v42[0], "calendar", (uint64_t)v37, &v38);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v37);
    if (v38 > 0) {
      goto LABEL_9;
    }
    uint64_t v7 = 0;
    int v8 = v40[0];
    while (uprv_stricmp(v8, (unsigned __int8 *)off_1E550A5E8[v7]))
    {
      if (++v7 == 18) {
        goto LABEL_9;
      }
    }
    if (v7 == -1)
    {
LABEL_9:
      int v38 = 0;
      LODWORD(v37[0]) = 0;
      ulocimp_getRegionForSupplementalData((char *)v42[0], 1, (char *)v37, 4, &v38);
      LODWORD(v7) = 0;
      if (v38 <= 0)
      {
        uint64_t v10 = ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)&v38);
        ures_getByKey(v10, "calendarPreferenceData", v10, &v38);
        uint64_t v11 = ures_getByKey(v10, (const char *)v37, 0, &v38);
        if (v10 && v38 == 2)
        {
          int v38 = 0;
          uint64_t v11 = ures_getByKey(v10, "001", 0, &v38);
        }
        LODWORD(v41) = 0;
        *(unsigned char *)v40[0] = 0;
        LODWORD(v12) = -1;
        if (v38 <= 0 && v11)
        {
          int32_t v36 = 0;
          StringByIndex = (UChar *)ures_getStringByIndex(v11, 0, &v36, (UErrorCode *)&v38);
          icu::CharString::appendInvariantChars((int *)v40, StringByIndex, v36, (UErrorCode *)&v38);
          uint64_t v12 = 0;
          int v14 = v40[0];
          while (uprv_stricmp(v14, (unsigned __int8 *)off_1E550A5E8[v12]))
          {
            if (++v12 == 18)
            {
              LODWORD(v12) = -1;
              break;
            }
          }
        }
        ures_close(v11);
        ures_close(v10);
        if (v12 == -1) {
          LODWORD(v7) = 0;
        }
        else {
          LODWORD(v7) = v12;
        }
      }
    }
    if (BYTE4(v40[1])) {
      uprv_free(v40[0]);
    }
    if (BYTE4(v42[1])) {
      uprv_free(v42[0]);
    }
    uint64_t v15 = (uint64_t *)*(unsigned int *)a2;
    if ((int)v15 > 0) {
      goto LABEL_27;
    }
    v42[0] = 0;
    switch((int)v7)
    {
      case 0:
        BOOL v16 = (icu::GregorianCalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x290, v9);
        uint64_t v17 = (uint64_t)v16;
        if (v16) {
          icu::GregorianCalendar::GregorianCalendar(v16, this, a2);
        }
        goto LABEL_66;
      case 1:
        unsigned int v18 = icu::UMemory::operator new(v15, (icu::UMemory *)0x290, v9);
        uint64_t v17 = (uint64_t)v18;
        if (v18) {
          sub_18C942428(v18, this, a2);
        }
        goto LABEL_66;
      case 2:
        int v19 = (icu::GregorianCalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x290, v9);
        uint64_t v17 = (uint64_t)v19;
        if (v19) {
          sub_18C8D1C90(v19, (char **)this, a2);
        }
        goto LABEL_66;
      case 3:
        int v20 = icu::UMemory::operator new(v15, (icu::UMemory *)0x290, v9);
        uint64_t v17 = (uint64_t)v20;
        if (v20) {
          sub_18C9E485C(v20, this, a2);
        }
        goto LABEL_66;
      case 4:
        UChar32 v21 = icu::UMemory::operator new(v15, (icu::UMemory *)0x270, v9);
        uint64_t v17 = (uint64_t)v21;
        if (v21) {
          sub_18C999B5C(v21, this, a2);
        }
        goto LABEL_66;
      case 5:
        int v22 = (icu::IslamicCivilCalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x270, v9);
        uint64_t v17 = (uint64_t)v22;
        if (v22) {
          icu::IslamicCivilCalendar::IslamicCivilCalendar(v22, (char **)this, a2);
        }
        goto LABEL_66;
      case 6:
        UChar32 v23 = (icu::IslamicCalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x270, v9);
        uint64_t v17 = (uint64_t)v23;
        if (v23) {
          icu::IslamicCalendar::IslamicCalendar(v23, this, a2);
        }
        goto LABEL_66;
      case 7:
        int v24 = (icu::HebrewCalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x270, v9);
        uint64_t v17 = (uint64_t)v24;
        if (v24) {
          icu::HebrewCalendar::HebrewCalendar(v24, this, a2);
        }
        goto LABEL_66;
      case 8:
        int v25 = (icu::ChineseCalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x278, v9);
        uint64_t v17 = (uint64_t)v25;
        if (v25) {
          icu::ChineseCalendar::ChineseCalendar(v25, this, a2);
        }
        goto LABEL_66;
      case 9:
        unsigned int v26 = (icu::IndianCalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x270, v9);
        uint64_t v17 = (uint64_t)v26;
        if (v26) {
          icu::IndianCalendar::IndianCalendar(v26, this, a2);
        }
        goto LABEL_66;
      case 10:
        int v27 = (icu::CECalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x270, v9);
        uint64_t v17 = (uint64_t)v27;
        if (v27) {
          sub_18C8F8380(v27, (char **)this, a2);
        }
        goto LABEL_66;
      case 11:
        int v28 = (icu::CECalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x270, v9);
        uint64_t v17 = (uint64_t)v28;
        if (v28) {
          sub_18C934C60(v28, (char **)this, a2);
        }
        goto LABEL_66;
      case 12:
        int v29 = (icu::CECalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x270, v9);
        uint64_t v17 = (uint64_t)v29;
        if (v29) {
          sub_18C9350AC(v29, (char **)this, a2);
        }
        goto LABEL_66;
      case 13:
        int v30 = icu::UMemory::operator new(v15, (icu::UMemory *)0x290, v9);
        uint64_t v17 = (uint64_t)v30;
        if (v30) {
          sub_18C942238(v30, this, a2);
        }
        goto LABEL_66;
      case 14:
        uint64_t v31 = (icu::ChineseCalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x278, v9);
        uint64_t v17 = (uint64_t)v31;
        if (v31) {
          sub_18C8FF888(v31, (char **)this, a2);
        }
        goto LABEL_66;
      case 15:
        int v32 = (icu::IslamicUmalquraCalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x270, v9);
        uint64_t v17 = (uint64_t)v32;
        if (v32) {
          icu::IslamicUmalquraCalendar::IslamicUmalquraCalendar(v32, (char **)this, a2);
        }
        goto LABEL_66;
      case 16:
        int v33 = (icu::IslamicTBLACalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x270, v9);
        uint64_t v17 = (uint64_t)v33;
        if (v33) {
          icu::IslamicTBLACalendar::IslamicTBLACalendar(v33, (char **)this, a2);
        }
        goto LABEL_66;
      case 17:
        unsigned int v34 = (icu::IslamicRGSACalendar *)icu::UMemory::operator new(v15, (icu::UMemory *)0x270, v9);
        uint64_t v17 = (uint64_t)v34;
        if (v34) {
          icu::IslamicRGSACalendar::IslamicRGSACalendar(v34, (char **)this, a2);
        }
LABEL_66:
        sub_18C7F5A70((uint64_t)v42, v17, (int *)a2);
        break;
      default:
        *a2 = U_UNSUPPORTED_ERROR;
        break;
    }
    if (*(int *)a2 <= 0)
    {
      UErrorCode v3 = v42[0];
      if (v42[0]) {
        goto LABEL_71;
      }
    }
    if (*(int *)a2 > 0)
    {
LABEL_27:
      UErrorCode v3 = 0;
    }
    else
    {
      UErrorCode v3 = 0;
      *a2 = U_INTERNAL_PROGRAM_ERROR;
    }
LABEL_71:
    icu::Locale::~Locale((icu::Locale *)v39);
    return v3;
  }
  return 0;
}

icu::Calendar *icu::Calendar::Calendar(icu::Calendar *this, UErrorCode *a2)
{
  *(void *)this = &unk_1EDA49098;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 57) = 2;
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 240) = 1;
  *((void *)this + 31) = 0;
  int v4 = (icu::Locale **)((char *)this + 248);
  *((unsigned char *)this + 304) = 0;
  *((unsigned char *)this + 461) = 0;
  *((void *)this + 32) = 0;
  unint64_t v5 = (icu::TimeZone *)icu::Calendar::clear(this);
  if (*(int *)a2 <= 0)
  {
    Default = (icu::Locale *)icu::TimeZone::createDefault(v5);
    *int v4 = Default;
    if (!Default) {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
    uint64_t v7 = icu::Locale::getDefault(Default);
    icu::Calendar::setWeekData(this, (const icu::Locale *)v7, 0, a2);
  }
  return this;
}

unsigned char *icu::Calendar::clear(unsigned char *this)
{
  uint64_t v1 = (uint64_t)this;
  if (!this
  {
LABEL_5:
    int v3 = 0;
    goto LABEL_6;
  }
  UErrorCode v6 = U_ZERO_ERROR;
  double UTCtime = uprv_getUTCtime();
  this = (unsigned char *)icu::Calendar::setTimeInMillis(v1, UTCtime, &v6);
  int v3 = 0;
  if (v6 <= U_ZERO_ERROR)
  {
    this = icu::Calendar::complete((unsigned char *)v1, &v6);
    if (v6 <= U_ZERO_ERROR)
    {
      int v3 = *(_DWORD *)(v1 + 12);
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_6:
  *(void *)(v1 + 124) = 0;
  *(_OWORD *)(v1 + 108) = 0u;
  *(_OWORD *)(v1 + 92) = 0u;
  *(_OWORD *)(v1 + 76) = 0u;
  *(_OWORD *)(v1 + 60) = 0u;
  *(_OWORD *)(v1 + 44) = 0u;
  *(_OWORD *)(v1 + 28) = 0u;
  uint64_t v4 = 132;
  *(_OWORD *)(v1 + 12) = 0u;
  do
  {
    unint64_t v5 = (void *)(v1 + v4);
    *unint64_t v5 = 0;
    v5[1] = 0;
    v4 += 16;
  }
  while (v4 != 228);
  *(_DWORD *)(v1 + 8) = 0;
  if (v3 >= 1) {
    return icu::Calendar::set((unsigned char *)v1, 0, v3);
  }
  return this;
}

void icu::Calendar::setWeekData(icu::Calendar *this, const icu::Locale *a2, char *a3, UErrorCode *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return;
  }
  *((_DWORD *)this + 66) = 1;
  *((unsigned char *)this + 268) = 1;
  *((_OWORD *)this + 17) = xmmword_18CA8BBC0;
  UErrorCode v22 = U_ZERO_ERROR;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  icu::Locale::Locale((icu::Locale *)&v34, (uint64_t)a2);
  icu::Locale::minimizeSubtags((char **)&v34, &v22);
  memset(v33, 0, sizeof(v33));
  icu::Locale::Locale((icu::Locale *)v33);
  if (*((unsigned char *)a2 + 26) && (!*((unsigned char *)a2 + 20) || BYTE4(v35)))
  {
    icu::Locale::operator=((icu::Locale *)v33, (uint64_t)a2);
  }
  else
  {
    UErrorCode v22 = U_ZERO_ERROR;
    memset(v32, 0, sizeof(v32));
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    icu::Locale::Locale((icu::Locale *)&v24, (uint64_t)a2);
    icu::Locale::addLikelySubtags((icu::Locale *)&v24, &v22);
    icu::Locale::Locale((icu::Locale *)v23, (const char *)&v24 + 8, (const char *)&v25 + 10, 0, 0);
    icu::Locale::operator=((uint64_t)v33, (uint64_t)v23);
    icu::Locale::~Locale((icu::Locale *)v23);
    icu::Locale::~Locale((icu::Locale *)&v24);
  }
  BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)v33);
  uint64_t v9 = ures_open(0, BaseName, (int *)a4);
  ures_getByKey(v9, "calendar", v9, (int *)a4);
  if (!a3) {
    goto LABEL_14;
  }
  if (!*a3 || !strcmp(a3, "gregorian"))
  {
    a3 = 0;
LABEL_14:
    *a4 = U_ZERO_ERROR;
    a3 = (char *)ures_getByKeyWithFallback(v9, "gregorian", (uint64_t)a3, a4);
    ures_getByKeyWithFallback((uint64_t)a3, "monthNames", (uint64_t)a3, a4);
    int v10 = *a4;
    goto LABEL_15;
  }
  a3 = (char *)ures_getByKeyWithFallback(v9, a3, 0, a4);
  ures_getByKeyWithFallback((uint64_t)a3, "monthNames", (uint64_t)a3, a4);
  if (!a3) {
    goto LABEL_14;
  }
  int v10 = *a4;
  if (*a4 == U_MISSING_RESOURCE_ERROR) {
    goto LABEL_14;
  }
LABEL_15:
  if (v10 <= 0)
  {
    *(void *)&long long v24 = (char *)this + 304;
    *((void *)&v24 + 1) = (char *)this + 461;
    LocaleByType = (const char *)ures_getLocaleByType((uint64_t)a3, 1, (int *)a4);
    uint64_t v12 = (const char *)ures_getLocaleByType((uint64_t)a3, 0, (int *)a4);
    icu::LocaleBased::setLocaleIDs((char *)&v24, LocaleByType, v12);
    *(_DWORD *)UChar32 v23 = 0;
    ulocimp_getRegionForSupplementalData(*((char **)a2 + 5), 1, v23, 4, (int *)a4);
    uint64_t v13 = ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)a4);
    ures_getByKey(v13, "weekData", v13, (int *)a4);
    uint64_t v14 = ures_getByKey(v13, v23, 0, (int *)a4);
    int v15 = *a4;
    if (v13 && v15 == 2)
    {
      *a4 = U_ZERO_ERROR;
      uint64_t v14 = ures_getByKey(v13, "001", 0, (int *)a4);
      int v15 = *a4;
    }
    if (v15 >= 1)
    {
      *a4 = U_USING_FALLBACK_WARNING;
      goto LABEL_51;
    }
    int v21 = 0;
    IntVectounint64_t r = ures_getIntVector(v14, &v21, (int *)a4);
    if (*(int *)a4 <= 0
      && v21 == 6
      && (*IntVector - 1) <= 6
      && (int v17 = IntVector[1], (v17 - 1) <= 6)
      && (int v18 = IntVector[2], (v18 - 1) <= 6)
      && (IntVector[4] - 1) <= 6)
    {
      *((_DWORD *)this + 66) = *IntVector;
      *((unsigned char *)this + 268) = v17;
      *((_DWORD *)this + 68) = v18;
      *((_DWORD *)this + 69) = IntVector[3];
      *((void *)this + 35) = *((void *)IntVector + 2);
    }
    else
    {
      *a4 = U_INVALID_FORMAT_ERROR;
    }
    UErrorCode v20 = U_ZERO_ERROR;
    long long v31 = 0u;
    memset(v32, 0, 29);
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    icu::Locale::getKeywordValue((char **)a2, "fw", (char *)&v24, 157, &v20);
    if (v20 <= U_ZERO_ERROR)
    {
      switch(v24)
      {
        case 0x6E7573:
          int v19 = 1;
          break;
        case 0x6E6F6D:
          int v19 = 2;
          break;
        case 0x657574:
          int v19 = 3;
          break;
        case 0x646577:
          int v19 = 4;
          break;
        case 0x756874:
          int v19 = 5;
          break;
        case 0x697266:
          int v19 = 6;
          break;
        case 0x746173:
          int v19 = 7;
          break;
        default:
          goto LABEL_51;
      }
      *((_DWORD *)this + 66) = v19;
    }
LABEL_51:
    ures_close(v14);
    ures_close(v13);
    if (!a3) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  *a4 = U_USING_FALLBACK_WARNING;
  if (a3) {
LABEL_17:
  }
    ures_close((uint64_t)a3);
LABEL_18:
  if (v9) {
    ures_close(v9);
  }
  icu::Locale::~Locale((icu::Locale *)v33);
  icu::Locale::~Locale((icu::Locale *)&v34);
}

icu::Calendar *icu::Calendar::Calendar(icu::Calendar *this, icu::TimeZone *a2, const icu::Locale *a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA49098;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 57) = 2;
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 240) = 1;
  *((unsigned char *)this + 304) = 0;
  *((unsigned char *)this + 461) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  if (*(int *)a4 < 1)
  {
    if (a2)
    {
      icu::Calendar::clear(this);
      *((void *)this + 31) = a2;
      icu::Calendar::setWeekData(this, a3, 0, a4);
    }
    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  else if (a2)
  {
    (*(void (**)(icu::TimeZone *, icu::TimeZone *, const icu::Locale *))(*(void *)a2 + 8))(a2, a2, a3);
  }
  return this;
}

icu::Calendar *icu::Calendar::Calendar(icu::Calendar *this, const icu::TimeZone *a2, const icu::Locale *a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA49098;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 57) = 2;
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 240) = 1;
  *((unsigned char *)this + 304) = 0;
  *((unsigned char *)this + 461) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  if (*(int *)a4 <= 0)
  {
    icu::Calendar::clear(this);
    uint64_t v8 = (*(uint64_t (**)(const icu::TimeZone *))(*(void *)a2 + 96))(a2);
    *((void *)this + 31) = v8;
    if (!v8) {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
    icu::Calendar::setWeekData(this, a3, 0, a4);
  }
  return this;
}

void icu::Calendar::~Calendar(icu::Calendar *this)
{
  *(void *)this = &unk_1EDA49098;
  uint64_t v2 = *((void *)this + 31);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::UObject::~UObject(this);
}

uint64_t icu::Calendar::Calendar(uint64_t this, uint64_t a2)
{
  *(void *)this = &unk_1EDA49098;
  *(void *)(this + 248) = 0;
  return icu::Calendar::operator=(this, a2);
}

uint64_t icu::Calendar::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v4 = *(_OWORD *)(a2 + 12);
    *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
    *(_OWORD *)(a1 + 12) = v4;
    long long v5 = *(_OWORD *)(a2 + 44);
    long long v6 = *(_OWORD *)(a2 + 60);
    long long v7 = *(_OWORD *)(a2 + 76);
    *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
    *(_OWORD *)(a1 + 76) = v7;
    *(_OWORD *)(a1 + 60) = v6;
    *(_OWORD *)(a1 + 44) = v5;
    long long v8 = *(_OWORD *)(a2 + 108);
    *(void *)(a1 + 124) = *(void *)(a2 + 124);
    *(_OWORD *)(a1 + 108) = v8;
    long long v9 = *(_OWORD *)(a2 + 180);
    long long v10 = *(_OWORD *)(a2 + 196);
    long long v11 = *(_OWORD *)(a2 + 212);
    *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 164);
    *(_OWORD *)(a1 + 212) = v11;
    *(_OWORD *)(a1 + 196) = v10;
    *(_OWORD *)(a1 + 180) = v9;
    long long v12 = *(_OWORD *)(a2 + 132);
    *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 148);
    *(_OWORD *)(a1 + 132) = v12;
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    uint64_t v13 = *(void *)(a1 + 248);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    *(void *)(a1 + 248) = 0;
    uint64_t v14 = *(void *)(a2 + 248);
    if (v14) {
      *(void *)(a1 + 248) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 96))(v14);
    }
    *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
    *(unsigned char *)(a1 + 268) = *(unsigned char *)(a2 + 268);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
    strncpy((char *)(a1 + 304), (const char *)(a2 + 304), 0x9DuLL);
    strncpy((char *)(a1 + 461), (const char *)(a2 + 461), 0x9DuLL);
    *(unsigned char *)(a1 + 460) = 0;
    *(unsigned char *)(a1 + 617) = 0;
  }
  return a1;
}

uint64_t icu::Calendar::createInstance(icu::Calendar *this, UErrorCode *a2)
{
  Default = (icu::Locale *)icu::TimeZone::createDefault(this);
  long long v4 = icu::Locale::getDefault(Default);

  return icu::Calendar::createInstance(Default, (icu::TimeZone *)v4, (UErrorCode *)this, v5);
}

uint64_t icu::Calendar::createInstance(icu::Calendar *this, icu::TimeZone *a2, UErrorCode *a3, UErrorCode *a4)
{
  long long v10 = 0;
  sub_18C8D3480((uint64_t)a2, (UErrorCode *)&v10, a3);
  if (*(int *)a3 > 0)
  {
    if (!this) {
      return 0;
    }
LABEL_3:
    (*(void (**)(icu::Calendar *))(*(void *)this + 8))(this);
    return 0;
  }
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)v10 + 3) + 24))(*((void *)v10 + 3));
  icu::SharedObject::removeRef((uint64_t)v10);
  if (!v6)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    if (!this) {
      return 0;
    }
    goto LABEL_3;
  }
  if (this)
  {
    uint64_t v7 = *(void *)(v6 + 248);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    *(void *)(v6 + 248) = this;
    *(unsigned char *)(v6 + 9) = 0;
  }
  double UTCtime = uprv_getUTCtime();
  icu::Calendar::setTimeInMillis(v6, UTCtime, a3);
  return v6;
}

uint64_t icu::Calendar::createInstance(icu::Calendar *this, UErrorCode *a2, UErrorCode *a3)
{
  Default = icu::Locale::getDefault(this);

  return icu::Calendar::createInstance(this, (char **)Default, a2, v6);
}

uint64_t icu::Calendar::createInstance(icu::Calendar *this, char **a2, UErrorCode *a3, UErrorCode *a4)
{
  uint64_t v7 = (icu::Calendar *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  uint64_t Instance = icu::Calendar::createInstance(v7, (icu::TimeZone *)a2, a3, v8);
  uint64_t v10 = Instance;
  if (*(int *)a3 <= 0 && Instance != 0) {
    icu::Calendar::setTimeZone(Instance, (uint64_t)this);
  }
  return v10;
}

uint64_t icu::Calendar::createInstance(char **this, const icu::Locale *a2, UErrorCode *a3)
{
  long long v5 = (icu::Calendar *)icu::TimeZone::forLocaleOrDefault(this, a2);

  return icu::Calendar::createInstance(v5, (icu::TimeZone *)this, (UErrorCode *)a2, v6);
}

void sub_18C8D3480(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  v11[28] = *MEMORY[0x1E4F143B8];
  uint64_t Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    uint64_t v7 = (icu::SharedObject **)Instance;
    int v9 = 0;
    char v10 = 0;
    long long v8 = &unk_1EDA49290;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18C8D86FC(v7, (const icu::CacheKeyBase *)&v8, 0, (icu::SharedObject **)a2, this);
    long long v8 = &unk_1EDA49290;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }
}

void *icu::Calendar::adoptTimeZone(void *result, uint64_t a2)
{
  if (a2)
  {
    int v3 = result;
    double result = (void *)result[31];
    if (result) {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    v3[31] = a2;
    *((unsigned char *)v3 + 9) = 0;
  }
  return result;
}

uint64_t icu::Calendar::setTimeInMillis(uint64_t this, double a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v5 = this;
    double v6 = 1.83882169e17;
    if (a2 <= 1.83882169e17 && (double v6 = -1.84303903e17, a2 >= -1.84303903e17))
    {
      this = uprv_isNaN(a2);
      double v6 = a2;
      if (!this)
      {
LABEL_5:
        uint64_t v7 = 0;
        *(double *)(v5 + 232) = v6;
        *(_DWORD *)(v5 + 8) = 16777217;
        *(_OWORD *)(v5 + 12) = 0u;
        *(_OWORD *)(v5 + 28) = 0u;
        *(_OWORD *)(v5 + 44) = 0u;
        *(_OWORD *)(v5 + 60) = 0u;
        *(_OWORD *)(v5 + 76) = 0u;
        *(_OWORD *)(v5 + 92) = 0u;
        *(_OWORD *)(v5 + 108) = 0u;
        *(void *)(v5 + 124) = 0;
        do
        {
          long long v8 = (void *)(v5 + 132 + v7);
          *long long v8 = 0;
          v8[1] = 0;
          v7 += 16;
        }
        while (v7 != 96);
        return this;
      }
    }
    else if (*(unsigned char *)(this + 240))
    {
      goto LABEL_5;
    }
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return this;
}

uint64_t icu::Calendar::setTimeZone(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = *(void *)(a1 + 248);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(void *)(a1 + 248) = v4;
    *(unsigned char *)(a1 + 9) = 0;
  }
  return result;
}

void icu::Calendar::getCalendarTypeFromLocale(icu::Calendar *this, const icu::Locale *a2, char *a3, UErrorCode *a4, UErrorCode *a5)
{
  int v6 = (int)a3;
  int v9 = 0;
  sub_18C8D3480((uint64_t)this, (UErrorCode *)&v9, a4);
  if (*(int *)a4 <= 0)
  {
    long long v8 = (const char *)(*(uint64_t (**)(void))(**((void **)v9 + 3) + 184))(*((void *)v9 + 3));
    strncpy((char *)a2, v8, v6);
    icu::SharedObject::removeRef((uint64_t)v9);
    if (*((unsigned char *)a2 + v6 - 1)) {
      *a4 = U_BUFFER_OVERFLOW_ERROR;
    }
  }
}

uint64_t icu::Calendar::operator==(icu::Calendar *a1, icu::Calendar *a2)
{
  UErrorCode v6 = U_ZERO_ERROR;
  uint64_t result = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 40))(a1);
  if (result)
  {
    double TimeInMillis = icu::Calendar::getTimeInMillis(a1, &v6);
    return TimeInMillis == icu::Calendar::getTimeInMillis(a2, &v6) && v6 < U_ILLEGAL_ARGUMENT_ERROR;
  }
  return result;
}

double icu::Calendar::getTimeInMillis(icu::Calendar *this, UErrorCode *a2)
{
  double v2 = 0.0;
  if (*(int *)a2 <= 0)
  {
    if (*((unsigned char *)this + 8)) {
      return *((double *)this + 29);
    }
    icu::Calendar::updateTime(this, a2);
    if (*(int *)a2 <= 0) {
      return *((double *)this + 29);
    }
  }
  return v2;
}

uint64_t icu::Calendar::isEquivalentTo(icu::Calendar *this, const icu::Calendar *a2)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)this - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    if (*((unsigned __int8 *)this + 240) == *((unsigned __int8 *)a2 + 240)
      && *((_DWORD *)this + 64) == *((_DWORD *)a2 + 64)
      && *((_DWORD *)this + 65) == *((_DWORD *)a2 + 65)
      && *((_DWORD *)this + 66) == *((_DWORD *)a2 + 66)
      && *((unsigned __int8 *)this + 268) == *((unsigned __int8 *)a2 + 268)
      && *((_DWORD *)this + 68) == *((_DWORD *)a2 + 68)
      && *((_DWORD *)this + 69) == *((_DWORD *)a2 + 69)
      && *((_DWORD *)this + 70) == *((_DWORD *)a2 + 70)
      && *((_DWORD *)this + 71) == *((_DWORD *)a2 + 71))
    {
      return (*(uint64_t (**)(void, void))(**((void **)this + 31) + 24))(*((void *)this + 31), *((void *)a2 + 31));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL icu::Calendar::equals(icu::Calendar *this, const icu::Calendar *a2, UErrorCode *a3)
{
  if (this == a2) {
    return 1;
  }
  double TimeInMillis = icu::Calendar::getTimeInMillis(this, a3);
  return TimeInMillis == icu::Calendar::getTimeInMillis(a2, a3);
}

BOOL icu::Calendar::before(icu::Calendar *this, const icu::Calendar *a2, UErrorCode *a3)
{
  if (this == a2) {
    return 0;
  }
  double TimeInMillis = icu::Calendar::getTimeInMillis(this, a3);
  return TimeInMillis < icu::Calendar::getTimeInMillis(a2, a3);
}

BOOL icu::Calendar::after(icu::Calendar *this, const icu::Calendar *a2, UErrorCode *a3)
{
  if (this == a2) {
    return 0;
  }
  double TimeInMillis = icu::Calendar::getTimeInMillis(this, a3);
  return TimeInMillis > icu::Calendar::getTimeInMillis(a2, a3);
}

uint64_t *icu::Calendar::getKeywordValuesForLocale(icu::Calendar *this, char **a2, const icu::Locale *a3, int *a4, UErrorCode *a5)
{
  KeywordValuesForLocale = (void **)ucal_getKeywordValuesForLocale((uint64_t)this, a2[5], (int)a3, a4);
  uint64_t v8 = (uint64_t)KeywordValuesForLocale;
  int v9 = (uint64_t *)*a4;
  if ((int)v9 < 1)
  {
    uint64_t result = icu::UMemory::operator new(v9, (icu::UMemory *)0x80, v7);
    if (result) {
      return (uint64_t *)icu::UStringEnumeration::UStringEnumeration((uint64_t)result, v8);
    }
    else {
      *a4 = 7;
    }
  }
  else
  {
    uenum_close(KeywordValuesForLocale);
    return 0;
  }
  return result;
}

uint64_t icu::Calendar::updateTime(icu::Calendar *this, UErrorCode *a2)
{
  uint64_t result = (*(uint64_t (**)(icu::Calendar *))(*(void *)this + 248))(this);
  if (*(int *)a2 <= 0)
  {
    if (*((unsigned char *)this + 240) || !*((unsigned char *)this + 10)) {
      *((unsigned char *)this + 9) = 0;
    }
    *((unsigned char *)this + 8) = 1;
    *((unsigned char *)this + 11) = 0;
  }
  return result;
}

uint64_t icu::Calendar::isLenient(icu::Calendar *this)
{
  return *((char *)this + 240);
}

uint64_t icu::Calendar::get(unsigned char *a1, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  if (a2 < 0x18)
  {
    icu::Calendar::complete(a1, a3);
    if (*(int *)a3 > 0) {
      return 0;
    }
    return *(unsigned int *)&a1[4 * a2 + 12];
  }
  else
  {
    uint64_t result = 0;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return result;
}

unsigned char *icu::Calendar::complete(unsigned char *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    int v3 = this;
    if (this[8] || (this = (unsigned char *)icu::Calendar::updateTime((icu::Calendar *)this, a2), *(int *)a2 <= 0))
    {
      if (!v3[9])
      {
        this = (unsigned char *)(*(uint64_t (**)(unsigned char *, UErrorCode *))(*(void *)v3 + 256))(v3, a2);
        if (*(int *)a2 <= 0) {
          *(_WORD *)(v3 + 9) = 257;
        }
      }
    }
  }
  return this;
}

unsigned char *icu::Calendar::set(unsigned char *this, unsigned int a2, int a3)
{
  if (a2 <= 0x17)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v7 = (uint64_t)this;
    if (this[11])
    {
      int v9 = 0;
      this = (unsigned char *)(*(uint64_t (**)(unsigned char *, int *))(*(void *)this + 256))(this, &v9);
    }
    *(_DWORD *)(v7 + 4 * a2 + 12) = a3;
    int v8 = *(_DWORD *)(v7 + 228);
    if (v8 == 10000)
    {
      this = (unsigned char *)icu::Calendar::recalculateStamp(v7);
      int v8 = *(_DWORD *)(v7 + 228);
    }
    *(_DWORD *)(v7 + 228) = v8 + 1;
    *(_DWORD *)(v7 + 4 * a2 + 132) = v8;
    *(unsigned char *)(v7 + a2 + 108) = 1;
    *(unsigned char *)(v7 + 11) = 0;
    *(_WORD *)(v7 + 8) = 0;
  }
  return this;
}

uint64_t icu::Calendar::recalculateStamp(uint64_t this)
{
  int v1 = 0;
  *(_DWORD *)(this + 228) = 1;
  while (1)
  {
    uint64_t v2 = 0;
    int v3 = *(_DWORD *)(this + 228);
    unsigned int v4 = -1;
    int v5 = 10000;
    do
    {
      if (*(_DWORD *)(this + 132 + 4 * v2) > v3 && *(_DWORD *)(this + 132 + 4 * v2) < v5)
      {
        unsigned int v4 = v2;
        int v5 = *(_DWORD *)(this + 132 + 4 * v2);
      }
      ++v2;
    }
    while (v2 != 24);
    if ((v4 & 0x80000000) != 0) {
      break;
    }
    int v6 = v3 + 1;
    *(_DWORD *)(this + 228) = v6;
    *(_DWORD *)(this + 4 * v4 + 132) = v6;
    if (++v1 == 24)
    {
      int v3 = *(_DWORD *)(this + 228);
      break;
    }
  }
  *(_DWORD *)(this + 228) = v3 + 1;
  return this;
}

unsigned char *icu::Calendar::set(icu::Calendar *this, int a2, int a3, int a4)
{
  icu::Calendar::set(this, 1u, a2);
  icu::Calendar::set(this, 2u, a3);

  return icu::Calendar::set(this, 5u, a4);
}

unsigned char *icu::Calendar::set(icu::Calendar *this, int a2, int a3, int a4, int a5, int a6)
{
  icu::Calendar::set(this, 1u, a2);
  icu::Calendar::set(this, 2u, a3);
  icu::Calendar::set(this, 5u, a4);
  icu::Calendar::set(this, 0xBu, a5);

  return icu::Calendar::set(this, 0xCu, a6);
}

unsigned char *icu::Calendar::set(icu::Calendar *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  icu::Calendar::set(this, 1u, a2);
  icu::Calendar::set(this, 2u, a3);
  icu::Calendar::set(this, 5u, a4);
  icu::Calendar::set(this, 0xBu, a5);
  icu::Calendar::set(this, 0xCu, a6);

  return icu::Calendar::set(this, 0xDu, a7);
}

uint64_t icu::Calendar::getRelatedYear(icu::Calendar *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0 && (icu::Calendar::complete(this, a2), *(int *)a2 <= 0)) {
    return *((unsigned int *)this + 22);
  }
  else {
    return 0;
  }
}

unsigned char *icu::Calendar::setRelatedYear(icu::Calendar *this, int a2)
{
  return icu::Calendar::set(this, 0x13u, a2);
}

unsigned char *icu::Calendar::clear(unsigned char *result, unsigned int a2)
{
  if (a2 <= 0x17)
  {
    uint64_t v8 = v2;
    uint64_t v9 = v3;
    int v5 = result;
    if (result[11])
    {
      int v7 = 0;
      uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, int *))(*(void *)result + 256))(result, &v7);
    }
    int v6 = &v5[4 * a2];
    *((_DWORD *)v6 + 3) = 0;
    *((_DWORD *)v6 + 33) = 0;
    if (a2 == 23)
    {
      *((_DWORD *)v5 + 5) = 0;
      *((_DWORD *)v5 + 35) = 0;
      v5[110] = 0;
    }
    else if (a2 == 2)
    {
      *((_DWORD *)v5 + 26) = 0;
      *((_DWORD *)v5 + 56) = 0;
      v5[131] = 0;
    }
    *((_DWORD *)v5 + 2) = 0;
  }
  return result;
}

BOOL icu::Calendar::isSet(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x17) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 11)) {
    return 1;
  }
  return *(_DWORD *)(a1 + 4 * a2 + 132) != 0;
}

uint64_t icu::Calendar::newestStamp(uint64_t a1, int a2, int a3, uint64_t a4)
{
  if (a2 <= a3)
  {
    unsigned int v4 = (int *)(a1 + 4 * a2 + 132);
    int v5 = a3 - a2 + 1;
    do
    {
      int v7 = *v4++;
      unsigned int v6 = v7;
      if (v7 <= (int)a4) {
        a4 = a4;
      }
      else {
        a4 = v6;
      }
      --v5;
    }
    while (v5);
  }
  return a4;
}

unsigned char *icu::Calendar::pinField(unsigned char *result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (a2 >= 0x18)
    {
      *a3 = 1;
      return result;
    }
    int v5 = result;
    int v6 = (*(uint64_t (**)(unsigned char *, uint64_t, int *))(*(void *)result + 176))(result, a2, a3);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, int *))(*(void *)v5 + 168))(v5, a2, a3);
    int v7 = *(_DWORD *)&v5[4 * a2 + 12];
    if (v7 <= v6)
    {
      int v10 = (int)result;
      if (v7 >= (int)result) {
        return result;
      }
      uint64_t v8 = v5;
      unsigned int v9 = a2;
    }
    else
    {
      uint64_t v8 = v5;
      unsigned int v9 = a2;
      int v10 = v6;
    }
    return icu::Calendar::set(v8, v9, v10);
  }
  return result;
}

uint64_t icu::Calendar::computeFields(uint64_t this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v3 = this;
    double v4 = *(double *)(this + 232);
    uint64_t v14 = 0;
    this = (*(uint64_t (**)(void, void, char *, uint64_t *, UErrorCode *, double))(**(void **)(this + 248)
                                                                                              + 48))(*(void *)(this + 248), 0, (char *)&v14 + 4, &v14, a2, v4);
    if (*(int *)a2 <= 0)
    {
      uint64_t v5 = 0;
      double v6 = (double)((int)v14 + HIDWORD(v14));
      unsigned int v7 = 8912999;
      do
      {
        *(_DWORD *)(v3 + 4 * v5 + 132) = !(v7 & 1);
        *(unsigned char *)(v3 + v5 + 108) = (v7 & 1) == 0;
        v7 >>= 1;
        ++v5;
      }
      while (v5 != 24);
      int v13 = 0;
      int v8 = sub_18C93E158(86400000, &v13, v4 + v6);
      *(_DWORD *)(v3 + 92) = v8 + 2440588;
      *(_DWORD *)(v3 + 212) = 1;
      *(unsigned char *)(v3 + 128) = 1;
      icu::Calendar::computeGregorianAndDOWFields((icu::Calendar *)v3, v8 + 2440588, a2);
      (*(void (**)(uint64_t, void, UErrorCode *))(*(void *)v3 + 368))(v3, *(unsigned int *)(v3 + 92), a2);
      this = icu::Calendar::computeWeekFields(v3, a2);
      if (*(int *)a2 < 1)
      {
        int v9 = v13;
        int v10 = v13 % 1000;
        int v11 = v13 / 1000 % 60;
        *(_DWORD *)(v3 + 96) = v13;
        *(_DWORD *)(v3 + 64) = v11;
        *(_DWORD *)(v3 + 68) = v10;
        *(_DWORD *)(v3 + 56) = v9 / 3600000;
        *(_DWORD *)(v3 + 60) = v9 / 60000 % 60;
        *(_DWORD *)(v3 + 48) = v9 / 43200000;
        *(_DWORD *)(v3 + 52) = v9 / 3600000 % 12;
        int v12 = v14;
        *(_DWORD *)(v3 + 72) = HIDWORD(v14);
        *(_DWORD *)(v3 + 76) = v12;
      }
    }
  }
  return this;
}

uint64_t icu::Calendar::getTimeZone(icu::Calendar *this)
{
  return *((void *)this + 31);
}

void icu::Calendar::computeGregorianAndDOWFields(icu::Calendar *this, int a2, UErrorCode *a3)
{
  icu::Calendar::computeGregorianFields(this, a2, a3);
  if (*(int *)a3 <= 0)
  {
    int v6 = (int)uprv_fmod((double)a2 + 1.0, 7.0);
    if (v6 >= 0) {
      unsigned __int8 v7 = v6 + 1;
    }
    else {
      unsigned __int8 v7 = v6 + 8;
    }
    *((_DWORD *)this + 10) = v7;
    *((_DWORD *)this + 40) = 1;
    *((unsigned char *)this + 115) = 1;
    int v8 = *((_DWORD *)this + 66);
    BOOL v9 = __OFSUB__(v7, v8);
    int v10 = v7 - v8;
    if (v10 < 0 != v9) {
      int v11 = v10 + 8;
    }
    else {
      int v11 = v10 + 1;
    }
    *((_DWORD *)this + 51) = 1;
    *((unsigned char *)this + 126) = 1;
    *((_DWORD *)this + 21) = v11;
  }
}

uint64_t icu::Calendar::computeWeekFields(uint64_t this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v2 = this;
    LODWORD(v3) = *(_DWORD *)(this + 88);
    int v5 = *(_DWORD *)(this + 36);
    int v4 = *(_DWORD *)(this + 40);
    int v6 = *(_DWORD *)(this + 264);
    int v7 = (v4 - (v5 + v6) + 7001) % 7;
    if (7 - v7 < *(unsigned __int8 *)(this + 268)) {
      int v8 = (v5 + v7 - 1) / 7;
    }
    else {
      int v8 = (v5 + v7 - 1) / 7 + 1;
    }
    if (v8)
    {
      int v9 = (v4 - v6 + 7) % 7;
      this = (*(uint64_t (**)(uint64_t, void))(*(void *)this + 320))(this, *(unsigned int *)(this + 88));
      unsigned int v10 = *(unsigned __int8 *)(v2 + 268);
      unsigned int v11 = 6 - ((v9 - v5 + (int)this) % 7 + ((v9 - v5 + (int)this) % 7 < 0 ? 7 : 0));
      int v12 = v5 - v9 + 7;
      BOOL v13 = v12 <= (int)this;
      if (v12 <= (int)this) {
        int v14 = v3;
      }
      else {
        int v14 = v3 + 1;
      }
      if (v13) {
        int v15 = v8;
      }
      else {
        int v15 = 1;
      }
      BOOL v16 = v11 >= v10;
      if (v11 >= v10) {
        int v17 = v14;
      }
      else {
        int v17 = v3;
      }
      if (v16) {
        int v18 = v15;
      }
      else {
        int v18 = v8;
      }
      unsigned int v19 = *(unsigned __int8 *)(v2 + 268);
      if (v5 < (int)this - 5)
      {
        int v20 = v8;
      }
      else
      {
        LODWORD(v3) = v17;
        int v20 = v18;
      }
    }
    else
    {
      uint64_t v3 = (v3 - 1);
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)this + 320))(this, v3);
      int v21 = (v4 - *(_DWORD *)(v2 + 264) - ((int)this + v5) + 1) % 7;
      int v22 = v21 + (v21 < 0 ? 7 : 0);
      unsigned int v19 = *(unsigned __int8 *)(v2 + 268);
      if (7 - v22 < v19) {
        int v20 = ((int)this + v5 + v22 - 1) / 7;
      }
      else {
        int v20 = ((int)this + v5 + v22 - 1) / 7 + 1;
      }
    }
    *(_DWORD *)(v2 + 80) = v3;
    int v23 = *(_DWORD *)(v2 + 32);
    int v24 = (v4 - (v23 + *(_DWORD *)(v2 + 264)) + 1) % 7;
    int v25 = v24 + (v24 < 0 ? 7 : 0);
    int v26 = v23 - 1;
    if (7 - v25 < v19) {
      int v27 = (v25 + v26) / 7;
    }
    else {
      int v27 = (v25 + v26) / 7 + 1;
    }
    *(_DWORD *)(v2 + 24) = v20;
    *(_DWORD *)(v2 + 28) = v27;
    *(_DWORD *)(v2 + 44) = v26 / 7 + 1;
  }
  return this;
}

uint64_t icu::Calendar::julianDayToDayOfWeek(icu::Calendar *this, double a2)
{
  int v2 = (int)uprv_fmod(a2 + 1.0, 7.0);
  if (v2 >= 0) {
    return (v2 + 1);
  }
  else {
    return (v2 + 8);
  }
}

void icu::Calendar::computeGregorianFields(icu::Calendar *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v3 = 0;
    sub_18C93E314((int *)this + 72, (_DWORD *)this + 73, (_DWORD *)this + 75, &v3, (int *)this + 74, (double)(a2 - 2440588));
  }
}

uint64_t icu::Calendar::getFirstDayOfWeek(icu::Calendar *this)
{
  return *((unsigned int *)this + 66);
}

uint64_t icu::Calendar::getMinimalDaysInFirstWeek(icu::Calendar *this)
{
  return *((unsigned __int8 *)this + 268);
}

uint64_t icu::Calendar::weekNumber(icu::Calendar *this, int a2, int a3, int a4)
{
  int v4 = (a4 - a3 - *((_DWORD *)this + 66) + 1) % 7;
  int v5 = v4 + (v4 < 0 ? 7 : 0);
  unsigned int v6 = (a2 + v5 - 1) / 7;
  if (7 - v5 < *((unsigned __int8 *)this + 268)) {
    return v6;
  }
  else {
    return v6 + 1;
  }
}

uint64_t icu::Calendar::handleComputeFields(uint64_t this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v3 = *(_DWORD *)(this + 292);
    *(_DWORD *)(this + 20) = v3;
    *(_DWORD *)(this + 140) = 1;
    *(unsigned char *)(this + 110) = 1;
    *(_DWORD *)(this + 104) = v3;
    *(_DWORD *)(this + 224) = 1;
    *(unsigned char *)(this + 131) = 1;
    *(_WORD *)(this + 113) = 257;
    *(int32x2_t *)(this + 32) = vrev64_s32(*(int32x2_t *)(this + 296));
    *(void *)(this + 152) = 0x100000001;
    int v4 = *(_DWORD *)(this + 288);
    *(_DWORD *)(this + 88) = v4;
    *(_DWORD *)(this + 208) = 1;
    *(unsigned char *)(this + 127) = 1;
    BOOL v5 = v4 > 0;
    if (v4 <= 0) {
      int v4 = 1 - v4;
    }
    *(unsigned char *)(this + 108) = 1;
    *(_DWORD *)(this + 12) = v5;
    *(_DWORD *)(this + 16) = v4;
    *(void *)(this + 132) = 0x100000001;
    *(unsigned char *)(this + 109) = 1;
  }
  return this;
}

uint64_t icu::Calendar::roll(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

unsigned char *icu::Calendar::roll(unsigned char *result, uint64_t a2, int a3, UErrorCode *a4)
{
  if (a3)
  {
    int v5 = a3;
    uint64_t v7 = (uint64_t)result;
    uint64_t result = icu::Calendar::complete(result, a4);
    if (*(int *)a4 <= 0)
    {
      switch((int)a2)
      {
        case 0:
        case 5:
        case 9:
        case 12:
        case 13:
        case 14:
        case 21:
          int v9 = (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v7 + 168))(v7, a2, a4);
          int v10 = (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v7 + 176))(v7, a2, a4);
          int v11 = v5 - v9 + *(_DWORD *)(v7 + 4 * a2 + 12);
          int v12 = v11 % (v10 - v9 + 1) + v9 + ((v10 - v9 + 1) & ((v11 % (v10 - v9 + 1)) >> 31));
          BOOL v13 = (unsigned char *)v7;
          unsigned int v14 = a2;
          goto LABEL_9;
        case 1:
        case 17:
          icu::Calendar::complete((unsigned char *)v7, a4);
          if (*(int *)a4 <= 0)
          {
            int v16 = *(_DWORD *)(v7 + 12);
            if (v16) {
              goto LABEL_55;
            }
          }
          int v15 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 184))(v7);
          if (!strcmp(v15, "gregorian") || !strcmp(v15, "roc") || !strcmp(v15, "coptic"))
          {
            int v16 = 0;
            int v25 = 0;
            int v5 = -v5;
          }
          else
          {
            int v16 = 0;
LABEL_55:
            int v25 = 1;
          }
          int v59 = *(_DWORD *)(v7 + 4 * a2 + 12) + v5;
          if (v16 > 0 || v59 >= 1)
          {
            int v60 = (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v7 + 176))(v7, a2, a4);
            if (v60 >= 0x8000)
            {
              if (v59 <= 1) {
                int v59 = 1;
              }
            }
            else if (v59 <= 0)
            {
              int v59 = v59 % v60 + v60;
            }
            else if (v59 > v60)
            {
              int v59 = (v59 - 1) % v60 + 1;
            }
          }
          else if (!v25)
          {
            int v59 = 1;
          }
          icu::Calendar::set((unsigned char *)v7, a2, v59);
          (*(void (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v7 + 392))(v7, 2, a4);
          goto LABEL_82;
        case 2:
        case 23:
          int v17 = (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v7 + 176))(v7, 2, a4);
          int v18 = (*(_DWORD *)(v7 + 20) + v5) % (v17 + 1);
          icu::Calendar::set((unsigned char *)v7, 2u, ((v17 + 1) & (v18 >> 31)) + v18);
          goto LABEL_82;
        case 3:
          int v26 = *(_DWORD *)(v7 + 264);
          int v27 = *(_DWORD *)(v7 + 40);
          BOOL v28 = __OFSUB__(v27, v26);
          int v29 = v27 - v26;
          if (v29 < 0 != v28) {
            int v30 = v29 + 7;
          }
          else {
            int v30 = v29;
          }
          int v31 = (v30 - *(_DWORD *)(v7 + 36) + 1) % 7;
          int v32 = v31 + (v31 < 0 ? 7 : 0);
          if (7 - v32 >= *(unsigned __int8 *)(v7 + 268)) {
            int v33 = 1;
          }
          else {
            int v33 = 8;
          }
          int v34 = v33 - v32;
          uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v7 + 176))(v7, 6, a4);
          int v35 = *(_DWORD *)(v7 + 36);
          int v36 = result + 7 - (((int)result + v30 - v35) % 7 + v34);
          if (v36)
          {
            int v61 = (v35 - v5 + 8 * v5 - v34) % v36 + v34 + (v36 & (((v35 - v5 + 8 * v5 - v34) % v36) >> 31));
            if (v61 <= 1) {
              int v61 = 1;
            }
            if (v61 >= (int)result) {
              int v62 = (int)result;
            }
            else {
              int v62 = v61;
            }
            icu::Calendar::set((unsigned char *)v7, 6u, v62);
            icu::Calendar::clear((unsigned char *)v7, 2u);
            uint64_t result = icu::Calendar::clear((unsigned char *)v7, 0x17u);
          }
          else
          {
            UErrorCode v8 = U_INTERNAL_PROGRAM_ERROR;
LABEL_5:
            *a4 = v8;
          }
          break;
        case 4:
          int v37 = *(_DWORD *)(v7 + 40);
          int v38 = *(_DWORD *)(v7 + 264);
          BOOL v28 = __OFSUB__(v37, v38);
          int v39 = v37 - v38;
          if (v39 < 0 != v28) {
            int v40 = v39 + 7;
          }
          else {
            int v40 = v39;
          }
          int v41 = (v40 - *(_DWORD *)(v7 + 32) + 1) % 7;
          int v42 = v41 + (v41 < 0 ? 7 : 0);
          if (7 - v42 >= *(unsigned __int8 *)(v7 + 268)) {
            int v43 = 1;
          }
          else {
            int v43 = 8;
          }
          int v44 = v43 - v42;
          uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v7 + 176))(v7, 5, a4);
          int v45 = *(_DWORD *)(v7 + 32);
          int v46 = result + 7 - (((int)result + v40 - v45) % 7 + v44);
          if (v46)
          {
            int v63 = (v45 - v5 + 8 * v5 - v44) % v46 + v44 + (v46 & (((v45 - v5 + 8 * v5 - v44) % v46) >> 31));
            if (v63 <= 1) {
              int v63 = 1;
            }
            if (v63 >= (int)result) {
              int v12 = (int)result;
            }
            else {
              int v12 = v63;
            }
            BOOL v13 = (unsigned char *)v7;
            unsigned int v14 = 5;
LABEL_9:
            uint64_t result = icu::Calendar::set(v13, v14, v12);
          }
          else
          {
            *a4 = U_INTERNAL_PROGRAM_ERROR;
          }
          break;
        case 6:
          double v47 = (double)v5 * 86400000.0;
          double v48 = *(double *)(v7 + 232) - (double)(*(_DWORD *)(v7 + 36) - 1) * 86400000.0;
          double v49 = (double)(*(int (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v7 + 176))(v7, 6, a4)
              * 86400000.0;
          double v50 = *(double *)(v7 + 232);
          goto LABEL_40;
        case 7:
        case 18:
          int v19 = *(_DWORD *)(v7 + 4 * a2 + 12);
          if (a2 == 7) {
            int v20 = *(_DWORD *)(v7 + 264);
          }
          else {
            int v20 = 1;
          }
          BOOL v28 = __OFSUB__(v19, v20);
          int v55 = v19 - v20;
          if (v55 < 0 != v28) {
            v55 += 7;
          }
          double v56 = *(double *)(v7 + 232);
          double v57 = v56 + (double)v55 * -86400000.0;
          double v58 = uprv_fmod((double)v5 * 86400000.0 + v56 - v57, 604800000.0);
          if (v58 < 0.0) {
            double v58 = v58 + 604800000.0;
          }
          double v24 = v58 + v57;
          goto LABEL_51;
        case 8:
          double v47 = (double)v5 * 604800000.0;
          int v51 = (*(_DWORD *)(v7 + 32) - 1) / 7;
          int v52 = (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v7 + 176))(v7, 5, a4);
          double v50 = *(double *)(v7 + 232);
          double v48 = v50 - (double)v51 * 604800000.0;
          double v49 = (double)(v51 + (v52 - *(_DWORD *)(v7 + 32)) / 7 + 1) * 604800000.0;
LABEL_40:
          double v53 = uprv_fmod(v47 + v50 - v48, v49);
          double v54 = -0.0;
          if (v53 < 0.0) {
            double v54 = v49;
          }
          double v24 = v48 + v53 + v54;
          goto LABEL_51;
        case 10:
        case 11:
          double TimeInMillis = icu::Calendar::getTimeInMillis((icu::Calendar *)v7, a4);
          int v22 = *(_DWORD *)(v7 + 4 * a2 + 12);
          int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 128))(v7, a2);
          double v24 = TimeInMillis
              + (double)(3600000 * ((v22 + v5) % (v23 + 1) - v22 + ((v23 + 1) & (((v22 + v5) % (v23 + 1)) >> 31))));
LABEL_51:
          return (unsigned char *)icu::Calendar::setTimeInMillis(v7, v24, a4);
        case 19:
          icu::Calendar::set((unsigned char *)v7, 0x13u, *(_DWORD *)(v7 + 88) + v5);
          (*(void (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v7 + 392))(v7, 2, a4);
LABEL_82:
          double v64 = *(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v7 + 392);
          return (unsigned char *)v64(v7, 5, a4);
        case 20:
          int v12 = *(_DWORD *)(v7 + 92) + v5;
          BOOL v13 = (unsigned char *)v7;
          unsigned int v14 = 20;
          goto LABEL_9;
        default:
          UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
          goto LABEL_5;
      }
    }
  }
  return result;
}

unsigned char *icu::Calendar::add(unsigned char *result, unsigned int a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    if (a2 >= 0x18)
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
      return result;
    }
    int v6 = a3;
    if (a3)
    {
      char v7 = 1;
      uint64_t v8 = (uint64_t)result;
      int v9 = 0;
      int v10 = 0;
      double v11 = (double)a3;
      double v12 = 604800000.0;
      switch(a2)
      {
        case 0u:
          int v15 = icu::Calendar::get(result, 0, a4);
          icu::Calendar::set((unsigned char *)v8, 0, v15 + v6);
          int v16 = *(uint64_t (**)(uint64_t, void, UErrorCode *))(*(void *)v8 + 392);
          return (unsigned char *)v16(v8, 0, a4);
        case 1u:
        case 0x11u:
          icu::Calendar::complete(result, a4);
          if (*(int *)a4 > 0 || !*(_DWORD *)(v8 + 12))
          {
            BOOL v13 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 184))(v8);
            if (!strcmp(v13, "gregorian") || !strcmp(v13, "roc") || !strcmp(v13, "coptic")) {
              int v6 = -v6;
            }
          }
          goto LABEL_41;
        case 2u:
        case 0x13u:
        case 0x17u:
LABEL_41:
          int v25 = *(unsigned __int8 *)(v8 + 240);
          *(unsigned char *)(v8 + 240) = 1;
          int v26 = icu::Calendar::get((unsigned char *)v8, a2, a4);
          icu::Calendar::set((unsigned char *)v8, a2, v26 + v6);
          uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v8 + 392))(v8, 5, a4);
          if (!v25)
          {
            uint64_t result = icu::Calendar::complete((unsigned char *)v8, a4);
            *(unsigned char *)(v8 + 240) = 0;
          }
          return result;
        case 3u:
        case 4u:
        case 8u:
          goto LABEL_7;
        case 5u:
        case 6u:
        case 7u:
        case 0x12u:
        case 0x14u:
          double v12 = 86400000.0;
          goto LABEL_7;
        case 9u:
          double v12 = 43200000.0;
LABEL_7:
          double v11 = v12 * v11;
          icu::Calendar::complete(result, a4);
          if (*(int *)a4 > 0)
          {
            char v7 = 0;
            int v9 = 0;
LABEL_12:
            int v10 = 0;
            goto LABEL_26;
          }
          int v9 = *(_DWORD *)(v8 + 76);
          icu::Calendar::complete((unsigned char *)v8, a4);
          if (*(int *)a4 > 0 || (v9 += *(_DWORD *)(v8 + 72), icu::Calendar::complete((unsigned char *)v8, a4), *(int *)a4 > 0))
          {
            char v7 = 0;
            goto LABEL_12;
          }
          char v7 = 0;
          int v10 = *(_DWORD *)(v8 + 96);
LABEL_26:
          double TimeInMillis = icu::Calendar::getTimeInMillis((icu::Calendar *)v8, a4);
          uint64_t result = (unsigned char *)icu::Calendar::setTimeInMillis(v8, v11 + TimeInMillis, a4);
          if (v7) {
            return result;
          }
          UErrorCode v18 = *a4;
          if (*(int *)a4 <= 0 && (result = icu::Calendar::complete((unsigned char *)v8, a4), UErrorCode v18 = *a4, *(int *)a4 <= 0)) {
            int v19 = *(_DWORD *)(v8 + 96);
          }
          else {
            int v19 = 0;
          }
          if (v19 == v10) {
            return result;
          }
          double v20 = *(double *)(v8 + 232);
          if (v18 > U_ZERO_ERROR || (uint64_t result = icu::Calendar::complete((unsigned char *)v8, a4), *(int *)a4 > 0))
          {
            int v21 = 0;
LABEL_34:
            int v22 = 0;
            goto LABEL_35;
          }
          int v21 = *(_DWORD *)(v8 + 76);
          uint64_t result = icu::Calendar::complete((unsigned char *)v8, a4);
          if (*(int *)a4 > 0) {
            goto LABEL_34;
          }
          int v22 = *(_DWORD *)(v8 + 72);
LABEL_35:
          int v23 = v9 - (v22 + v21);
          if (!v23) {
            return result;
          }
          if (v23 < 0) {
            signed int v24 = v23 + 86400000 * (-v23 / 0x5265C00u);
          }
          else {
            signed int v24 = v23 % 0x5265C00u;
          }
          if (v24)
          {
            uint64_t result = (unsigned char *)icu::Calendar::setTimeInMillis(v8, v20 + (double)v24, a4);
            if (*(int *)a4 <= 0 && (uint64_t result = icu::Calendar::complete((unsigned char *)v8, a4), *(int *)a4 <= 0)) {
              int v19 = *(_DWORD *)(v8 + 96);
            }
            else {
              int v19 = 0;
            }
          }
          if (v19 == v10) {
            return result;
          }
          int v27 = *(_DWORD *)(v8 + 260);
          if (!v27)
          {
            if ((v24 & 0x80000000) == 0) {
              return result;
            }
LABEL_64:
            return (unsigned char *)icu::Calendar::setTimeInMillis(v8, v20, a4);
          }
          if (v27 != 2)
          {
            if (v27 != 1 || v24 < 1) {
              return result;
            }
            goto LABEL_64;
          }
          if (v24 >= 1) {
            double v20 = *(double *)(v8 + 232);
          }
          double v28 = 0.0;
          uint64_t result = (unsigned char *)icu::Calendar::getImmediatePreviousZoneTransition((icu::Calendar *)v8, v20, &v28, a4);
          if (*(int *)a4 <= 0 && result) {
            uint64_t result = (unsigned char *)icu::Calendar::setTimeInMillis(v8, v28, a4);
          }
          break;
        case 0xAu:
        case 0xBu:
          int v9 = 0;
          int v10 = 0;
          double v14 = 3600000.0;
          goto LABEL_25;
        case 0xCu:
          int v9 = 0;
          int v10 = 0;
          double v14 = 60000.0;
          goto LABEL_25;
        case 0xDu:
          int v9 = 0;
          int v10 = 0;
          double v14 = 1000.0;
LABEL_25:
          double v11 = v11 * v14;
          goto LABEL_26;
        case 0xEu:
        case 0x15u:
          goto LABEL_26;
        default:
          *a4 = U_ILLEGAL_ARGUMENT_ERROR;
          return result;
      }
    }
  }
  return result;
}

uint64_t icu::Calendar::setLenient(uint64_t this, char a2)
{
  *(unsigned char *)(this + 240) = a2;
  return this;
}

uint64_t icu::Calendar::getImmediatePreviousZoneTransition(icu::Calendar *this, double a2, double *a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  uint64_t result = (uint64_t)icu::Calendar::getBasicTimeZone(this);
  if (result)
  {
    uint64_t v8 = result;
    memset(v9, 0, sizeof(v9));
    icu::TimeZoneTransition::TimeZoneTransition(v9);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, _OWORD *, double))(*(void *)v8 + 120))(v8, 1, v9, a2))
    {
      *a4 = U_INTERNAL_PROGRAM_ERROR;
      icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v9);
      return 0;
    }
    *a3 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v9);
    icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v9);
    return 1;
  }
  else
  {
    *a4 = U_UNSUPPORTED_ERROR;
  }
  return result;
}

uint64_t icu::Calendar::fieldDifference(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t icu::Calendar::fieldDifference(icu::Calendar *a1, uint64_t a2, UErrorCode *a3, double a4)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  if (a2 < 0x18)
  {
    double TimeInMillis = icu::Calendar::getTimeInMillis(a1, a3);
    double v10 = TimeInMillis;
    if (TimeInMillis >= a4)
    {
      if (TimeInMillis <= a4)
      {
        uint64_t v11 = 0;
LABEL_38:
        icu::Calendar::setTimeInMillis((uint64_t)a1, v10, a3);
        (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 56))(a1, a2, v11, a3);
        if (*(int *)a3 <= 0) {
          return v11;
        }
        else {
          return 0;
        }
      }
      else
      {
        if (*(int *)a3 > 0)
        {
          uint64_t v11 = 0;
          LODWORD(v15) = -1;
          goto LABEL_23;
        }
        uint64_t v11 = 0;
        uint64_t v15 = 0xFFFFFFFFLL;
        while (1)
        {
          uint64_t v4 = v15;
          icu::Calendar::setTimeInMillis((uint64_t)a1, v10, a3);
          (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 56))(a1, a2, v15, a3);
          double v21 = icu::Calendar::getTimeInMillis(a1, a3);
          if (v21 == a4) {
            break;
          }
          if (v21 >= a4)
          {
            uint64_t v15 = (2 * v15);
            if (!v15)
            {
              *a3 = U_ILLEGAL_ARGUMENT_ERROR;
              uint64_t v11 = v4;
              goto LABEL_23;
            }
            uint64_t v11 = v4;
            if (*(int *)a3 < 1) {
              continue;
            }
          }
LABEL_23:
          while ((int)v11 - (int)v15 >= 2 && *a3 <= U_ZERO_ERROR)
          {
            int v17 = v15 - v11;
            if ((int)v15 < (int)v11) {
              ++v17;
            }
            uint64_t v4 = (v11 + (v17 >> 1));
            icu::Calendar::setTimeInMillis((uint64_t)a1, v10, a3);
            (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 56))(a1, a2, v4, a3);
            double v18 = icu::Calendar::getTimeInMillis(a1, a3);
            if (v18 >= a4) {
              uint64_t v11 = v4;
            }
            else {
              uint64_t v11 = v11;
            }
            if (v18 < a4) {
              LODWORD(v15) = v4;
            }
            if (v18 == a4) {
              return v4;
            }
          }
          goto LABEL_38;
        }
      }
    }
    else
    {
      if (*(int *)a3 > 0)
      {
        uint64_t v11 = 0;
        LODWORD(v12) = 1;
        goto LABEL_8;
      }
      uint64_t v11 = 0;
      uint64_t v12 = 1;
      while (1)
      {
        uint64_t v4 = v12;
        icu::Calendar::setTimeInMillis((uint64_t)a1, v10, a3);
        (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 56))(a1, a2, v12, a3);
        double v20 = icu::Calendar::getTimeInMillis(a1, a3);
        if (v20 == a4) {
          break;
        }
        if (v20 > a4) {
          goto LABEL_8;
        }
        if (v12 == 0x7FFFFFFF)
        {
          *a3 = U_ILLEGAL_ARGUMENT_ERROR;
          LODWORD(v12) = 0x7FFFFFFF;
          goto LABEL_8;
        }
        if ((2 * v12) >= 0x7FFFFFFF) {
          uint64_t v12 = 0x7FFFFFFFLL;
        }
        else {
          uint64_t v12 = (2 * v12);
        }
        uint64_t v11 = v4;
        if (*(int *)a3 >= 1)
        {
LABEL_8:
          while ((int)v12 - (int)v11 >= 2 && *a3 <= U_ZERO_ERROR)
          {
            uint64_t v4 = v11 + ((v12 - v11) >> 1);
            icu::Calendar::setTimeInMillis((uint64_t)a1, v10, a3);
            (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 56))(a1, a2, v4, a3);
            double v14 = icu::Calendar::getTimeInMillis(a1, a3);
            if (v14 <= a4) {
              uint64_t v11 = v4;
            }
            else {
              uint64_t v11 = v11;
            }
            if (v14 > a4) {
              LODWORD(v12) = v4;
            }
            if (v14 == a4) {
              return v4;
            }
          }
          goto LABEL_38;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v4;
}

uint64_t icu::Calendar::orphanTimeZone(icu::Calendar *this)
{
  uint64_t result = icu::TimeZone::createDefault(this);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = *((void *)this + 31);
    *((void *)this + 31) = v3;
  }
  return result;
}

uint64_t icu::Calendar::setRepeatedWallTimeOption(uint64_t result, unsigned int a2)
{
  if (a2 <= 1) {
    *(_DWORD *)(result + 256) = a2;
  }
  return result;
}

uint64_t icu::Calendar::getRepeatedWallTimeOption(icu::Calendar *this)
{
  return *((unsigned int *)this + 64);
}

uint64_t icu::Calendar::setSkippedWallTimeOption(uint64_t result, int a2)
{
  *(_DWORD *)(result + 260) = a2;
  return result;
}

uint64_t icu::Calendar::getSkippedWallTimeOption(icu::Calendar *this)
{
  return *((unsigned int *)this + 65);
}

uint64_t icu::Calendar::setFirstDayOfWeek(uint64_t result, int a2)
{
  if ((a2 - 1) <= 6 && *(_DWORD *)(result + 264) != a2)
  {
    *(_DWORD *)(result + 264) = a2;
    *(unsigned char *)(result + 9) = 0;
  }
  return result;
}

uint64_t icu::Calendar::getFirstDayOfWeek(icu::Calendar *this, UErrorCode *a2)
{
  return *((unsigned int *)this + 66);
}

uint64_t icu::Calendar::setMinimalDaysInFirstWeek(uint64_t this, unsigned int a2)
{
  if (a2 >= 7) {
    int v2 = 7;
  }
  else {
    int v2 = a2;
  }
  if (!a2) {
    int v2 = 1;
  }
  if (*(unsigned __int8 *)(this + 268) != v2)
  {
    *(unsigned char *)(this + 268) = v2;
    *(unsigned char *)(this + 9) = 0;
  }
  return this;
}

uint64_t icu::Calendar::getDayOfWeekType(_DWORD *a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  if ((a2 - 8) <= 0xFFFFFFF8)
  {
    uint64_t v3 = 0;
    *a3 = 1;
    return v3;
  }
  int v4 = a1[68];
  int v5 = a1[70];
  if (v4 == v5)
  {
    if (v4 == a2)
    {
LABEL_15:
      if (a1[69]) {
        return 2;
      }
      else {
        return 1;
      }
    }
    return 0;
  }
  if (v4 >= v5)
  {
    if (v4 > a2 && v5 < a2) {
      return 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (v4 > a2 || v5 < a2) {
      return v3;
    }
  }
  if (v4 == a2) {
    goto LABEL_15;
  }
  if (v5 != a2) {
    return 1;
  }
  if ((int)a1[71] > 86399999) {
    return 1;
  }
  return 3;
}

uint64_t icu::Calendar::getWeekendTransition(_DWORD *a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  if (a1[68] == a2) {
    return a1[69];
  }
  if (a1[70] == a2) {
    return a1[71];
  }
  uint64_t result = 0;
  *a3 = 1;
  return result;
}

uint64_t icu::Calendar::isWeekend(icu::Calendar *this, double a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  uint64_t v6 = (*(uint64_t (**)(icu::Calendar *))(*(void *)this + 24))(this);
  if (v6)
  {
    uint64_t v7 = v6;
    icu::Calendar::setTimeInMillis(v6, a2, a3);
    if (*(int *)a3 < 1) {
      uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 216))(v7);
    }
    else {
      uint64_t v3 = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  else
  {
    uint64_t v3 = 0;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return v3;
}

BOOL icu::Calendar::isWeekend(icu::Calendar *this)
{
  UErrorCode v8 = U_ZERO_ERROR;
  icu::Calendar::complete(this, &v8);
  uint64_t v2 = 0;
  if (v8 <= U_ZERO_ERROR) {
    uint64_t v2 = *((unsigned int *)this + 10);
  }
  int v3 = (*(uint64_t (**)(icu::Calendar *, uint64_t, UErrorCode *))(*(void *)this + 192))(this, v2, &v8);
  if (v8 > U_ZERO_ERROR) {
    return 0;
  }
  int v5 = v3;
  if ((v3 - 2) >= 2) {
    return v3 == 1;
  }
  int v6 = *((_DWORD *)this + 24);
  int v7 = (*(uint64_t (**)(icu::Calendar *, uint64_t, UErrorCode *))(*(void *)this + 200))(this, v2, &v8);
  if (v8 > U_ZERO_ERROR) {
    return 0;
  }
  if (v5 == 2) {
    return v6 >= v7;
  }
  else {
    return v6 < v7;
  }
}

uint64_t icu::Calendar::getMinimum(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 296))(a1, a2, 0);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 296))(a1, a2, 0);
}

uint64_t icu::Calendar::getMaximum(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 296))(a1, a2, 3);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 296))(a1, a2, 3);
}

uint64_t icu::Calendar::getGreatestMinimum(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 296))(a1, a2, 1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 296))(a1, a2, 1);
}

uint64_t icu::Calendar::getLeastMaximum(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 296))(a1, a2, 2);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 296))(a1, a2, 2);
}

uint64_t icu::Calendar::getActualMinimum(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t icu::Calendar::getLimit(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a2 <= 0x16)
  {
    if (((1 << a2) & 0x75FE80) != 0) {
      return dword_18CA8BC1C[4 * a2 + a3];
    }
    if (a2 == 4)
    {
      if (a3 != 1)
      {
        if (a3)
        {
          int v6 = a1[268];
          int v7 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)a1 + 288))(a1, 5, a3);
          if (v3 == 2) {
            int v8 = 7;
          }
          else {
            int v8 = 13;
          }
          int v9 = (unint64_t)(2454267027 * (v8 - v6 + v7)) >> 32;
          return (v9 >> 2) + (v9 >> 31);
        }
        else
        {
          return a1[268] == 1;
        }
      }
      return v3;
    }
  }
  int v5 = *(uint64_t (**)(void))(*(void *)a1 + 288);

  return v5();
}

uint64_t icu::Calendar::getActualMinimum(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  if (a2 >= 0x18)
  {
    uint64_t v3 = 0;
    int v6 = 1;
LABEL_5:
    *a3 = v6;
    return v3;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, a2);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, a2);
  if (v3 == v8) {
    return v3;
  }
  int v9 = v8;
  double v10 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (!v10)
  {
    uint64_t v3 = 0;
    int v6 = 7;
    goto LABEL_5;
  }
  uint64_t v11 = v10;
  v10[240] = 1;
  icu::Calendar::set(v10, a2, v3);
  if (icu::Calendar::get(v11, a2, a3) == v3)
  {
    do
    {
      unsigned int v12 = v3;
      if ((int)v3 <= v9) {
        break;
      }
      LODWORD(v3) = v3 - 1;
      icu::Calendar::set(v11, a2, v12 - 1);
    }
    while (v3 == icu::Calendar::get(v11, a2, a3));
  }
  else
  {
    unsigned int v12 = v3;
  }
  (*(void (**)(unsigned char *))(*(void *)v11 + 8))(v11);
  if (*(int *)a3 <= 0) {
    return v12;
  }
  else {
    return 0;
  }
}

uint64_t icu::Calendar::inDaylightTime(icu::Calendar *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 31) + 72))(*((void *)this + 31));
  if (result)
  {
    icu::Calendar::complete(this, a2);
    if (*(int *)a2 <= 0) {
      return *((_DWORD *)this + 19) != 0;
    }
    return 0;
  }
  return result;
}

BOOL icu::Calendar::inTemporalLeapYear(icu::Calendar *this, UErrorCode *a2)
{
  return (*(unsigned int (**)(icu::Calendar *, uint64_t, UErrorCode *))(*(void *)this + 176))(this, 6, a2) == 366;
}

char *icu::Calendar::getTemporalMonthCode(icu::Calendar *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0 && (icu::Calendar::complete(this, a2), *(int *)a2 <= 0)) {
    return off_1E550A580[*((int *)this + 5)];
  }
  else {
    return 0;
  }
}

uint64_t icu::Calendar::setTemporalMonthCode(uint64_t this, const char *__s, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v5 = (unsigned char *)this;
    this = strlen(__s);
    if (this == 3 && *__s == 77)
    {
      uint64_t v6 = 0;
      while (1)
      {
        this = strcmp(__s, off_1E550A580[v6]);
        if (!this) {
          break;
        }
        if (++v6 == 12) {
          goto LABEL_7;
        }
      }
      icu::Calendar::set(v5, 2u, v6);
      return (uint64_t)icu::Calendar::set(v5, 0x16u, 0);
    }
    else
    {
LABEL_7:
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

uint64_t icu::Calendar::validateFields(uint64_t this, UErrorCode *a2)
{
  int v2 = *a2;
  if (*(int *)a2 <= 0)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    do
    {
      if (*(int *)(v4 + 4 * v5 + 132) > 1)
      {
        this = (*(uint64_t (**)(uint64_t, unint64_t, UErrorCode *))(*(void *)v4 + 352))(v4, v5, a2);
        int v2 = *a2;
      }
      if (v2 >= 1) {
        break;
      }
    }
    while (v5++ < 0x17);
  }
  return this;
}

_DWORD *icu::Calendar::validateField(_DWORD *result, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return result;
  }
  if (a2 > 0x17)
  {
LABEL_3:
    *a3 = 1;
    return result;
  }
  unint64_t v5 = result;
  if (a2 != 8)
  {
    if (a2 == 6)
    {
      uint64_t v12 = (*(uint64_t (**)(_DWORD *))(*(void *)result + 328))(result);
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v5 + 320))(v5, v12);
      if (*a3 > 0) {
        return result;
      }
      int v8 = v5[9];
      goto LABEL_15;
    }
    if (a2 == 5)
    {
      uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)result + 328))(result);
      uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 264))(v5);
      uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v5 + 312))(v5, v6, v7);
      if (*a3 > 0) {
        return result;
      }
      int v8 = v5[8];
LABEL_15:
      if (v8 < 1 || v8 > (int)result) {
        goto LABEL_3;
      }
      return result;
    }
    int v13 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)result + 112))(result, a2);
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v5 + 128))(v5, a2);
    if (*a3 > 0) {
      return result;
    }
    int v10 = v5[a2 + 3];
    BOOL v11 = v10 < v13;
LABEL_20:
    if (v11 || v10 > (int)result) {
      goto LABEL_3;
    }
    return result;
  }
  if (!result[11]) {
    goto LABEL_3;
  }
  int v9 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)result + 112))(result, 8);
  uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v5 + 128))(v5, 8);
  if (*a3 <= 0)
  {
    int v10 = v5[11];
    BOOL v11 = v10 < v9;
    goto LABEL_20;
  }
  return result;
}

uint64_t icu::Calendar::validateField(uint64_t result, unsigned int a2, int a3, int a4, int *a5)
{
  if (*a5 <= 0)
  {
    if (a2 > 0x17 || ((int v5 = *(_DWORD *)(result + 4 * a2 + 12), v5 >= a3) ? (v6 = v5 <= a4) : (v6 = 0), !v6)) {
      *a5 = 1;
    }
  }
  return result;
}

void *icu::Calendar::getFieldResolutionTable(icu::Calendar *this)
{
  return &icu::Calendar::kDatePrecedence;
}

uint64_t icu::Calendar::newerField(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 132 + 4 * a3) <= *(_DWORD *)(a1 + 132 + 4 * a2)) {
    return a2;
  }
  else {
    return a3;
  }
}

uint64_t icu::Calendar::resolveFields(icu::Calendar *this, const int (*a2)[12][8])
{
  int v2 = *((_DWORD *)this + 40);
  if (v2 >= 2
    && (int v3 = *((_DWORD *)this + 38), v3 >= 2)
    && (int v4 = *((_DWORD *)this + 35), v4 >= 2)
    && *((_DWORD *)this + 36) == 1
    && *((_DWORD *)this + 37) == 1
    && *((_DWORD *)this + 41) == 1)
  {
    unsigned int v5 = v2 + ~v4;
    char v6 = 1;
    if (v5 <= 2)
    {
      int v7 = v2 - v3;
      if (v7 >= 1 && v7 <= 3)
      {
        char v6 = 0;
        *((void *)this + 18) = 0;
        *((_DWORD *)this + 41) = 0;
      }
    }
  }
  else
  {
    char v6 = 1;
  }
  if ((*a2)[0][0] == -1)
  {
    uint64_t v13 = 24;
    if (v6) {
      return v13;
    }
    goto LABEL_40;
  }
  uint64_t v8 = 0;
  int v9 = &(*a2)[0][1];
  do
  {
    uint64_t v10 = (*a2)[12 * v8][0];
    if (v10 == -1)
    {
      uint64_t v13 = 24;
    }
    else
    {
      uint64_t v11 = 0;
      int v12 = 0;
      uint64_t v13 = 24;
      double v14 = v9;
      do
      {
        int v15 = (*a2)[12 * v8][8 * v11 + ((int)v10 > 31)];
        if (v15 == -1)
        {
          int v16 = 0;
LABEL_24:
          if (v16 > v12)
          {
            if ((int)v10 >= 32 && (v10 &= 0x1Fu, v10 == 5) && *((_DWORD *)this + 37) >= *((_DWORD *)this + 38)) {
              LODWORD(v10) = 5;
            }
            else {
              uint64_t v13 = v10;
            }
            if (v13 == v10) {
              int v12 = v16;
            }
          }
        }
        else
        {
          int v16 = 0;
          int v17 = (int *)&v14[(int)v10 > 31];
          while (1)
          {
            int v18 = *((_DWORD *)this + v15 + 33);
            if (!v18) {
              break;
            }
            if (v18 > v16) {
              int v16 = v18;
            }
            int v19 = *v17++;
            int v15 = v19;
            if (v19 == -1) {
              goto LABEL_24;
            }
          }
        }
        ++v11;
        uint64_t v10 = (*a2)[12 * v8][8 * v11];
        v14 += 8;
      }
      while (v10 != -1);
    }
    ++v8;
    v9 += 96;
  }
  while ((*a2)[12 * v8][0] != -1 && v13 == 24);
  if ((v6 & 1) == 0)
  {
LABEL_40:
    *((void *)this + 18) = 0x100000001;
    *((_DWORD *)this + 41) = 1;
  }
  return v13;
}

void icu::Calendar::computeTime(icu::Calendar *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    if (*((unsigned char *)this + 240) || (icu::Calendar::validateFields((uint64_t)this, a2), *(int *)a2 <= 0))
    {
      double v4 = (double)(int)(icu::Calendar::computeJulianDay(this) - 2440588);
      int v5 = *((_DWORD *)this + 54);
      if (v5 < 2) {
        goto LABEL_9;
      }
      uint64_t v6 = 0;
      int v7 = 0;
      do
      {
        if (*(_DWORD *)((char *)this + v6 + 168) > v7) {
          int v7 = *(_DWORD *)((char *)this + v6 + 168);
        }
        v6 += 4;
      }
      while (v6 != 24);
      if (v7 <= v5) {
        double v8 = (double)*((int *)this + 24);
      }
      else {
LABEL_9:
      }
        double v8 = icu::Calendar::computeMillisInDay(this);
      double v9 = v4 * 86400000.0;
      if (*((int *)this + 48) <= 1 && *((int *)this + 49) < 2)
      {
        if (*((unsigned char *)this + 240) && *((_DWORD *)this + 65) != 2)
        {
          double v10 = v9 + v8 - (double)(int)icu::Calendar::computeZoneOffset(this, v9, v8, a2);
        }
        else
        {
          int v11 = icu::Calendar::computeZoneOffset(this, v9, v8, a2);
          double v12 = v9 + v8 - (double)v11;
          uint64_t v15 = 0;
          (*(void (**)(void, void, char *, uint64_t *, UErrorCode *, double))(**((void **)this + 31)
                                                                                          + 48))(*((void *)this + 31), 0, (char *)&v15 + 4, &v15, a2, v12);
          double v10 = 0.0;
          if (*(int *)a2 <= 0)
          {
            if (v11 == v15 + HIDWORD(v15))
            {
              double v10 = v12;
            }
            else if (*((unsigned char *)this + 240))
            {
              double v14 = 0.0;
              if (icu::Calendar::getImmediatePreviousZoneTransition(this, v12, &v14, a2)) {
                BOOL v13 = *a2 < U_ILLEGAL_ARGUMENT_ERROR;
              }
              else {
                BOOL v13 = 0;
              }
              double v10 = v14;
              if (!v13) {
                double v10 = 0.0;
              }
            }
            else
            {
              *a2 = U_ILLEGAL_ARGUMENT_ERROR;
            }
          }
        }
      }
      else
      {
        double v10 = v9 + v8 - (double)(*((_DWORD *)this + 19) + *((_DWORD *)this + 18));
      }
      if (*(int *)a2 <= 0) {
        *((double *)this + 29) = v10;
      }
    }
  }
}

uint64_t icu::Calendar::computeJulianDay(icu::Calendar *this)
{
  int v2 = *((_DWORD *)this + 53);
  if (v2 >= 2)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    do
    {
      if (*(_DWORD *)((char *)this + v3 + 132) > v4) {
        int v4 = *(_DWORD *)((char *)this + v3 + 132);
      }
      v3 += 4;
    }
    while (v3 != 36);
    for (uint64_t i = 0; i != 12; i += 4)
    {
      if (*(_DWORD *)((char *)this + i + 200) > v4) {
        int v4 = *(_DWORD *)((char *)this + i + 200);
      }
    }
    if (*((_DWORD *)this + 56) > v4) {
      int v4 = *((_DWORD *)this + 56);
    }
    if (v4 <= v2) {
      return *((unsigned int *)this + 23);
    }
  }
  uint64_t v6 = (const int (*)[12][8])(*(uint64_t (**)(icu::Calendar *))(*(void *)this + 360))(this);
  unsigned int v7 = icu::Calendar::resolveFields(this, v6);
  if (v7 == 24) {
    uint64_t v8 = 5;
  }
  else {
    uint64_t v8 = v7;
  }
  double v9 = *(uint64_t (**)(icu::Calendar *, uint64_t))(*(void *)this + 336);

  return v9(this, v8);
}

double icu::Calendar::computeMillisInDay(icu::Calendar *this)
{
  int v2 = *((_DWORD *)this + 43);
  int v1 = *((_DWORD *)this + 44);
  if (v2 <= *((_DWORD *)this + 42)) {
    int v2 = *((_DWORD *)this + 42);
  }
  if (v2 <= v1) {
    int v3 = *((_DWORD *)this + 44);
  }
  else {
    int v3 = v2;
  }
  if (v3)
  {
    if (v1 >= v2) {
      double v4 = (double)*((int *)this + 14);
    }
    else {
      double v4 = (double)*((int *)this + 13) + (double)(12 * *((_DWORD *)this + 12));
    }
  }
  else
  {
    double v4 = 0.0;
  }
  return ((v4 * 60.0 + (double)*((int *)this + 15)) * 60.0 + (double)*((int *)this + 16)) * 1000.0
       + (double)*((int *)this + 17);
}

uint64_t icu::Calendar::computeZoneOffset(icu::Calendar *this, double a2, double a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  uint64_t v15 = 0;
  double v7 = a2 + a3;
  BasicTimeZone = icu::Calendar::getBasicTimeZone(this);
  if (BasicTimeZone)
  {
    if (*((_DWORD *)this + 64) == 1) {
      uint64_t v9 = 4;
    }
    else {
      uint64_t v9 = 12;
    }
    if (*((_DWORD *)this + 65) == 1) {
      uint64_t v10 = 12;
    }
    else {
      uint64_t v10 = 4;
    }
    (*(void (**)(const void *, uint64_t, uint64_t, char *, uint64_t *, UErrorCode *, double))(*(void *)BasicTimeZone + 160))(BasicTimeZone, v10, v9, (char *)&v15 + 4, &v15, a4, v7);
  }
  else
  {
    uint64_t v11 = *((void *)this + 31);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t *, UErrorCode *, double))(*(void *)v11 + 48))(v11, 1, (char *)&v15 + 4, &v15, a4, v7);
    if (*((_DWORD *)this + 64) == 1
      && (uint64_t v14 = 0,
          (*(void (**)(uint64_t, void, char *, uint64_t *, UErrorCode *, double))(*(void *)v11 + 48))(v11, 0, (char *)&v14 + 4, &v14, a4, v7 - (double)((int)v15 + HIDWORD(v15)) + -21600000.0), int v13 = v15 + HIDWORD(v15) - (HIDWORD(v14) + v14), v13 < 0))
    {
      v12.n128_f64[0] = v7 + (double)v13;
      (*(void (**)(uint64_t, uint64_t, char *, uint64_t *, UErrorCode *, __n128))(*(void *)v11 + 48))(v11, 1, (char *)&v15 + 4, &v15, a4, v12);
    }
    else if (*((_DWORD *)this + 65) == 1)
    {
      v12.n128_f64[0] = v7 - (double)((int)v15 + HIDWORD(v15));
      (*(void (**)(uint64_t, void, char *, uint64_t *, UErrorCode *, __n128))(*(void *)v11 + 48))(v11, 0, (char *)&v15 + 4, &v15, a4, v12);
    }
  }
  return (v15 + HIDWORD(v15));
}

const void *icu::Calendar::getBasicTimeZone(icu::Calendar *this)
{
  int v1 = (const void *)*((void *)this + 31);
  if (v1
  {
    return 0;
  }
  return v1;
}

uint64_t icu::Calendar::handleComputeJulianDay(uint64_t a1, unsigned int a2)
{
  BOOL v5 = a2 == 8 || (a2 & 0xFFFFFFFE) == 4;
  if (a2 == 3 && *(_DWORD *)(a1 + 136) <= *(_DWORD *)(a1 + 200)) {
    uint64_t v6 = *(unsigned int *)(a1 + 80);
  }
  else {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 328))(a1);
  }
  *(_DWORD *)(a1 + 88) = v6;
  *(_DWORD *)(a1 + 208) = 1;
  *(unsigned char *)(a1 + 127) = 1;
  if (*(unsigned char *)(a1 + 11) || *(_DWORD *)(a1 + 140) || *(_DWORD *)(a1 + 224)) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1);
  }
  else {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 376))(a1, v6);
  }
  uint64_t v8 = v7;
  if (v5) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(void *)a1 + 304))(a1, v6, v9, v5);
  int v11 = v10;
  if (a2 == 6) {
    return (*(_DWORD *)(a1 + 36) + v10);
  }
  if (a2 != 5)
  {
    int v15 = *(_DWORD *)(a1 + 264);
    int v16 = (int)uprv_fmod((double)(v10 + 1) + 1.0, 7.0);
    if (v16 >= 0) {
      unsigned __int8 v17 = v16 + 1;
    }
    else {
      unsigned __int8 v17 = v16 + 8;
    }
    BOOL v18 = __OFSUB__(v17, v15);
    int v19 = v17 - v15;
    if (v19 < 0 != v18) {
      int v20 = v19 + 7;
    }
    else {
      int v20 = v19;
    }
    int LocalDOW = icu::Calendar::getLocalDOW((icu::Calendar *)a1);
    unsigned int v22 = LocalDOW - v20;
    int v23 = LocalDOW - v20 + 1;
    if (a2 == 8)
    {
      if (v22 <= 0x7FFFFFFE) {
        int v24 = LocalDOW - v20 + 1;
      }
      else {
        int v24 = v22 + 8;
      }
      if (*(int *)(a1 + 164) < 1)
      {
        int v27 = -7;
        int v25 = 1;
        return (v27 - v25 + 8 * v25 + v24 + v11);
      }
      int v25 = *(_DWORD *)(a1 + 44);
      if (v25 < 0)
      {
        uint64_t v26 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 272))(a1, 0);
        v25 += (int)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, v6, v26) - v24)
             / 7;
        int v27 = 7;
        return (v27 - v25 + 8 * v25 + v24 + v11);
      }
    }
    else
    {
      if (a2 == 3)
      {
        if ((int v28 = LocalDOW, !*(unsigned char *)(a1 + 11)) && !*(_DWORD *)(a1 + 200)
          || icu::Calendar::resolveFields((icu::Calendar *)a1, icu::Calendar::kYearPrecedence) != 17
          && *(_DWORD *)(a1 + 200) != 1)
        {
          int v39 = *(_DWORD *)(a1 + 24);
          int v38 = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a1 + 304))(a1, (v6 + 1), 0, 0);
          double v29 = (double)(v38 + 1);
          int v31 = (int)uprv_fmod(v29 + 1.0, 7.0);
          if (v31 >= 0) {
            unsigned __int8 v32 = v31 + 1;
          }
          else {
            unsigned __int8 v32 = v31 + 8;
          }
          BOOL v18 = __OFSUB__(v32, v15);
          int v33 = v32 - v15;
          if (v33 < 0 != v18) {
            v33 += 7;
          }
          if (v39 == 1)
          {
            if (v33 >= 1 && 7 - v33 >= *(unsigned __int8 *)(a1 + 268))
            {
              int v34 = icu::Calendar::julianDayToDayOfWeek(v30, v29);
              if (v34 >= v15) {
                int v20 = v34 - v15;
              }
              else {
                int v20 = v34 - v15 + 7;
              }
              int v23 = v28 - v20 + 1;
              int v11 = v38;
            }
          }
          else if (v39 >= (*(int (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, 3))
          {
            unsigned int v35 = 7 - v20 >= *(unsigned __int8 *)(a1 + 268) ? v23 : v22 + 8;
            if ((int)(v11 - v39 + 8 * v39 + v35 - 7) > v38)
            {
              int v36 = (icu::Calendar *)(*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a1 + 304))(a1, (v6 - 1), 0, 0);
              int v11 = (int)v36;
              int v37 = icu::Calendar::julianDayToDayOfWeek(v36, (double)((int)v36 + 1));
              if (v37 >= v15) {
                int v20 = v37 - v15;
              }
              else {
                int v20 = v37 - v15 + 7;
              }
              int v23 = v28 - v20 + 1;
            }
          }
        }
      }
      if (7 - v20 >= *(unsigned __int8 *)(a1 + 268)) {
        int v24 = v23;
      }
      else {
        int v24 = v23 + 7;
      }
      int v25 = *(_DWORD *)(a1 + 4 * a2 + 12);
    }
    int v27 = -7;
    return (v27 - v25 + 8 * v25 + v24 + v11);
  }
  int v12 = *(_DWORD *)(a1 + 152);
  if (*(unsigned char *)(a1 + 11) || v12)
  {
    if (v12 < 1) {
      int v13 = 1;
    }
    else {
      int v13 = *(_DWORD *)(a1 + 32);
    }
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 384))(a1, v6, v8);
  }
  return (v13 + v11);
}

uint64_t icu::Calendar::getLocalDOW(icu::Calendar *this)
{
  int v2 = icu::Calendar::resolveFields(this, icu::Calendar::kDOWPrecedence);
  if (v2 == 18)
  {
    int v3 = *((_DWORD *)this + 21) - 1;
  }
  else if (v2 == 7)
  {
    int v3 = *((_DWORD *)this + 10) - *((_DWORD *)this + 66);
  }
  else
  {
    int v3 = 0;
  }
  int v4 = v3 % 7;
  if (v4 >= 0) {
    return v4;
  }
  else {
    return (v4 + 7);
  }
}

uint64_t icu::Calendar::getDefaultMonthInYear(icu::Calendar *this)
{
  return 0;
}

uint64_t icu::Calendar::getDefaultDayInMonth(icu::Calendar *this)
{
  return 1;
}

uint64_t icu::Calendar::handleGetExtendedYearFromWeekFields(icu::Calendar *this, uint64_t a2, int a3)
{
  int v6 = icu::Calendar::resolveFields(this, icu::Calendar::kDatePrecedence);
  int LocalDOW = icu::Calendar::getLocalDOW(this);
  int v8 = *((_DWORD *)this + 66);
  int v9 = (*(uint64_t (**)(icu::Calendar *, uint64_t, void, void))(*(void *)this + 304))(this, a2, 0, 0);
  uint64_t v10 = (a2 + 1);
  int v11 = (*(uint64_t (**)(icu::Calendar *, uint64_t, void, void))(*(void *)this + 304))(this, v10, 0, 0);
  int v12 = (int)uprv_fmod((double)(v9 + 1) + 1.0, 7.0);
  if (v12 >= 0) {
    unsigned __int8 v13 = v12 + 1;
  }
  else {
    unsigned __int8 v13 = v12 + 8;
  }
  BOOL v14 = __OFSUB__(v13, v8);
  int v15 = v13 - v8;
  if (v15 < 0 != v14) {
    v15 += 7;
  }
  if (v6 == 5)
  {
    int v20 = (*(uint64_t (**)(icu::Calendar *))(*(void *)this + 264))(this);
    if (v20 || (*(int (**)(icu::Calendar *, uint64_t))(*(void *)this + 160))(this, 3) > a3)
    {
      if (a3 == 1)
      {
        BOOL v19 = v20 != 0;
        return (a2 - v19);
      }
      return a2;
    }
  }
  else
  {
    if (v6 != 3) {
      return a2;
    }
    int v16 = *((unsigned __int8 *)this + 268);
    int v17 = 7 - v15;
    if (a3 == 1)
    {
      BOOL v19 = v17 >= v16 && LocalDOW < v15;
      return (a2 - v19);
    }
    if ((*(int (**)(icu::Calendar *, uint64_t))(*(void *)this + 160))(this, 3) > a3) {
      return a2;
    }
    int v22 = LocalDOW - a3 + 8 * a3 + v9 + v17;
    int v23 = v22 - 7;
    int v24 = v22 - 14;
    if (v17 < v16) {
      int v24 = v23;
    }
    if (v24 + 1 >= v11) {
      return v10;
    }
    else {
      return a2;
    }
  }
  return v10;
}

uint64_t icu::Calendar::handleGetMonthLength(icu::Calendar *this, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(icu::Calendar *, uint64_t, void, uint64_t))(*(void *)this + 304))(this, a2, (a3 + 1), 1);
  return v6
       - (*(unsigned int (**)(icu::Calendar *, uint64_t, uint64_t, uint64_t))(*(void *)this + 304))(this, a2, a3, 1);
}

uint64_t icu::Calendar::handleGetYearLength(icu::Calendar *this, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(icu::Calendar *, void, void, void))(*(void *)this + 304))(this, (a2 + 1), 0, 0);
  return v4
       - (*(unsigned int (**)(icu::Calendar *, uint64_t, void, void))(*(void *)this + 304))(this, a2, 0, 0);
}

uint64_t icu::Calendar::getActualMaximum(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (a2 >= 0x18)
    {
      int v5 = 1;
LABEL_4:
      *a3 = v5;
      return 0;
    }
    switch((int)a2)
    {
      case 5:
        int v9 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        if (!v9) {
          goto LABEL_25;
        }
        uint64_t v10 = v9;
        v9[240] = 1;
        (*(void (**)(unsigned char *, uint64_t, void, UErrorCode *))(*(void *)v9 + 280))(v9, 5, 0, a3);
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        if (*(int *)a3 > 0) {
          goto LABEL_31;
        }
        icu::Calendar::complete(v10, a3);
        if (*(int *)a3 <= 0)
        {
          uint64_t v11 = *((unsigned int *)v10 + 22);
          icu::Calendar::complete(v10, a3);
          if (*(int *)a3 <= 0)
          {
            uint64_t v12 = *((unsigned int *)v10 + 5);
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
        uint64_t v12 = 0;
LABEL_31:
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, v11, v12);
        goto LABEL_34;
      case 6:
        unsigned __int8 v13 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        if (!v13)
        {
LABEL_25:
          int v5 = 7;
          goto LABEL_4;
        }
        uint64_t v10 = v13;
        v13[240] = 1;
        (*(void (**)(unsigned char *, uint64_t, void, UErrorCode *))(*(void *)v13 + 280))(v13, 6, 0, a3);
        uint64_t v14 = 0;
        if (*(int *)a3 <= 0)
        {
          icu::Calendar::complete(v10, a3);
          if (*(int *)a3 <= 0) {
            uint64_t v14 = *((unsigned int *)v10 + 22);
          }
          else {
            uint64_t v14 = 0;
          }
        }
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 320))(a1, v14);
LABEL_34:
        uint64_t v22 = v21;
        (*(void (**)(unsigned char *))(*(void *)v10 + 8))(v10);
        return v22;
      case 7:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 18:
      case 20:
      case 21:
        int v8 = *(uint64_t (**)(void))(*(void *)a1 + 128);
        return v8();
      case 23:
        int v17 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)a1 + 224))(a1, a3);
        uint64_t v18 = *(void *)a1;
        if (v17)
        {
          BOOL v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 128);
          uint64_t v20 = a1;
        }
        else
        {
          BOOL v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 160);
          uint64_t v20 = a1;
        }
        return v19(v20, 23);
      default:
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, a2);
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2);
        return icu::Calendar::getActualHelper(a1, a2, v15, v16, a3);
    }
  }
  return 0;
}

uint64_t icu::Calendar::getActualHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  if (a2 >= 0x18)
  {
    uint64_t v5 = 0;
    int v8 = 1;
LABEL_5:
    *a5 = v8;
    return v5;
  }
  uint64_t v5 = a3;
  if (a3 == a4) {
    return v5;
  }
  if ((int)a4 > (int)a3) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 0xFFFFFFFFLL;
  }
  uint64_t v11 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (!v11)
  {
    int v8 = 7;
    goto LABEL_5;
  }
  uint64_t v12 = v11;
  icu::Calendar::complete(v11, a5);
  v12[240] = 1;
  (*(void (**)(unsigned char *, uint64_t, BOOL, UErrorCode *))(*(void *)v12 + 280))(v12, a2, (int)a4 <= (int)v5, a5);
  icu::Calendar::set(v12, a2, v5);
  if ((icu::Calendar::get(v12, a2, a5) == v5 || a2 == 4 || (int)a4 <= (int)v5)
    && *a5 <= U_ZERO_ERROR)
  {
    while (1)
    {
      int v16 = v5 + v10;
      (*(void (**)(unsigned char *, uint64_t, uint64_t, UErrorCode *))(*(void *)v12 + 56))(v12, a2, v10, a5);
      if (v5 + v10 != icu::Calendar::get(v12, a2, a5) || *(int *)a5 > 0) {
        break;
      }
      uint64_t v5 = (v5 + v10);
      if (a4 == v16)
      {
        uint64_t v5 = a4;
        break;
      }
    }
  }
  (*(void (**)(unsigned char *))(*(void *)v12 + 8))(v12);
  return v5;
}

unsigned char *icu::Calendar::prepareGetActual(unsigned char *result, uint64_t a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    if (a2 < 0x18)
    {
      uint64_t v7 = result;
      icu::Calendar::set(result, 0x15u, 0);
      switch((int)a2)
      {
        case 1:
          goto LABEL_12;
        case 2:
          goto LABEL_18;
        case 3:
        case 4:
          int v8 = *((_DWORD *)v7 + 66);
          if (a3)
          {
            int v9 = (v8 + 6) % 7;
            if (v9 >= 1) {
              int v8 = (v8 + 6) % 7;
            }
            else {
              int v8 = v9 + 7;
            }
          }
          goto LABEL_16;
        case 5:
        case 6:
        case 7:
          goto LABEL_20;
        case 8:
          icu::Calendar::set(v7, 5u, 1);
          if (*(int *)a4 <= 0 && (icu::Calendar::complete(v7, a4), *(int *)a4 <= 0)) {
            int v8 = *((_DWORD *)v7 + 10);
          }
          else {
            int v8 = 0;
          }
LABEL_16:
          uint64_t v10 = v7;
          unsigned int v11 = 7;
          goto LABEL_19;
        default:
          if (a2 == 17)
          {
            int v12 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v7 + 144))(v7, 3);
            icu::Calendar::set(v7, 3u, v12);
LABEL_18:
            int v8 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v7 + 144))(v7, 5);
            uint64_t v10 = v7;
            unsigned int v11 = 5;
          }
          else
          {
            if (a2 != 19) {
              goto LABEL_20;
            }
LABEL_12:
            int v8 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v7 + 144))(v7, 6);
            uint64_t v10 = v7;
            unsigned int v11 = 6;
          }
LABEL_19:
          icu::Calendar::set(v10, v11, v8);
LABEL_20:
          int v13 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v7 + 144))(v7, a2);
          uint64_t result = icu::Calendar::set(v7, a2, v13);
          break;
      }
    }
    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return result;
}

uint64_t icu::Calendar::getLocale@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  v5[0] = (const char *)(a1 + 304);
  v5[1] = (const char *)(a1 + 461);
  return icu::LocaleBased::getLocale(v5, a2, a3, a4);
}

uint64_t icu::Calendar::getLocaleID(uint64_t a1, int a2, int *a3)
{
  v4[0] = a1 + 304;
  v4[1] = a1 + 461;
  return icu::LocaleBased::getLocaleID(v4, a2, a3);
}

uint64_t icu::Calendar::internalSet(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v3 = result + 4 * a2;
  *(_DWORD *)(v3 + 12) = a3;
  *(_DWORD *)(v3 + 132) = 1;
  *(unsigned char *)(result + a2 + 108) = 1;
  return result;
}

uint64_t icu::Calendar::internalGetMonth(icu::Calendar *this)
{
  int v2 = icu::Calendar::resolveFields(this, icu::Calendar::kMonthPrecedence);
  uint64_t v3 = 104;
  if (v2 == 2) {
    uint64_t v3 = 20;
  }
  return *(unsigned int *)((char *)this + v3);
}

uint64_t icu::Calendar::internalGetMonth(icu::Calendar *this, uint64_t a2)
{
  if (icu::Calendar::resolveFields(this, icu::Calendar::kMonthPrecedence) != 2)
  {
    int v4 = (char *)this + 104;
    return *(unsigned int *)v4;
  }
  if (*((int *)this + 35) >= 1)
  {
    int v4 = (char *)this + 20;
    return *(unsigned int *)v4;
  }
  return a2;
}

void sub_18C8D86A8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA49290;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));

  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

icu::SharedObject **sub_18C8D86FC(icu::SharedObject **result, const icu::CacheKeyBase *a2, void *a3, icu::SharedObject **a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    UErrorCode v9 = U_ZERO_ERROR;
    int v8 = 0;
    uint64_t result = (icu::SharedObject **)icu::UnifiedCache::_get(result, a2, &v8, a3, &v9);
    uint64_t v7 = v8;
    if (v9 <= U_ZERO_ERROR) {
      uint64_t result = (icu::SharedObject **)sub_18C8917C4(v8, a4);
    }
    if (v7) {
      uint64_t result = (icu::SharedObject **)icu::SharedObject::removeRef((uint64_t)v7);
    }
    if (*a5 == U_ZERO_ERROR || v9 >= U_ILLEGAL_ARGUMENT_ERROR) {
      *a5 = v9;
    }
  }
  return result;
}

void sub_18C8D8794(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA49290;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18C8D87EC(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)"N3icu14SharedCalendarE" & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu14SharedCalendarE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18C8D8848@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((unsigned char *)v4 + 12) = 0;
    *int v4 = (uint64_t)&unk_1EDA49290;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18C8D88B0(uint64_t a1, char *__dst, int a3)
{
  uint64_t result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18C8D88EC(void *a1, void *a2)
{
  BOOL result = sub_18C8D893C(a1, a2);
  if (result)
  {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

BOOL sub_18C8D893C(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v2 = *(void *)(*a1 - 8);
  uint64_t v3 = *(void *)(*a2 - 8);

  return sub_18C828FD8(v2, v3);
}

uint64_t sub_18C8D89A4(uint64_t *a1, int a2)
{
  char v2 = a2;
  uint64_t v4 = *a1;
  if (a2 < 0)
  {
    int v5 = *((_DWORD *)a1 + 5);
    *((_DWORD *)a1 + 3) = v5;
    *((unsigned char *)a1 + 28) = v2;
  }
  else
  {
    if (a2)
    {
      int v5 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 3) = v5;
      *((unsigned char *)a1 + 28) = v2;
LABEL_11:
      if (v5 < *((_DWORD *)a1 + 4))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4);
        if ((result & 0x80000000) == 0)
        {
          if (result < 0x10000) {
            int v7 = 1;
          }
          else {
            int v7 = 2;
          }
LABEL_16:
          *((_DWORD *)a1 + 3) += v7;
          return result;
        }
        *((_DWORD *)a1 + 4) = *((_DWORD *)a1 + 3);
      }
      *((unsigned char *)a1 + 29) = 1;
      return 0xFFFFFFFFLL;
    }
    int v5 = *((_DWORD *)a1 + 3);
    if ((*((char *)a1 + 28) & 0x80000000) == 0) {
      goto LABEL_11;
    }
  }
  if (*((_DWORD *)a1 + 2) < v5)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 80))(v4, (v5 - 1));
    if ((result & 0x80000000) == 0)
    {
      if (result >= 0x10000) {
        int v7 = -2;
      }
      else {
        int v7 = -1;
      }
      goto LABEL_16;
    }
    *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 3);
  }
  return 0xFFFFFFFFLL;
}

void *icu::CaseMapTransliterator::getStaticClassID(icu::CaseMapTransliterator *this)
{
  return &unk_1E9192038;
}

icu::Transliterator *sub_18C8D8AC0(icu::Transliterator *a1, UChar **a2, uint64_t a3)
{
  uint64_t result = icu::Transliterator::Transliterator(a1, a2, 0);
  *(void *)uint64_t result = &unk_1EDA49310;
  *((void *)result + 11) = a3;
  return result;
}

icu::Transliterator *sub_18C8D8B14(icu::Transliterator *a1, uint64_t a2)
{
  uint64_t result = icu::Transliterator::Transliterator(a1, (UChar **)a2);
  *(void *)uint64_t result = &unk_1EDA49310;
  *((void *)result + 11) = *(void *)(a2 + 88);
  return result;
}

uint64_t (**sub_18C8D8B5C(uint64_t (**result)(uint64_t), uint64_t a2, _DWORD *a3, int a4))(uint64_t)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3[2];
  if ((int)v4 < a3[3])
  {
    int v8 = result;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v21 = a2;
    uint64_t v22 = 0;
    int v9 = a3[1];
    LODWORD(v22) = *a3;
    LODWORD(v23) = v9;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v29 = 0;
    long long v28 = 0u;
    int v25 = &unk_1EDA47700;
    LOWORD(v26) = 2;
    uint64_t v20 = 0;
    while (1)
    {
      HIDWORD(v23) = v4;
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v4);
      int v11 = v10 < 0x10000 ? 1 : 2;
      uint64_t v12 = (v11 + v4);
      LODWORD(v24) = v11 + v4;
      unsigned int v13 = v8[11](v10);
      unsigned int v14 = v13;
      if (a4)
      {
        unint64_t v15 = BYTE5(v24);
        if (BYTE5(v24)) {
          break;
        }
      }
      if ((v13 & 0x80000000) != 0)
      {
        unint64_t v15 = a3[3];
      }
      else
      {
        if (v13 > 0x1F)
        {
          icu::UnicodeString::unBogus((uint64_t)&v25);
          if ((v26 & 0x8000u) == 0) {
            uint64_t v16 = (unsigned __int16)v26 >> 5;
          }
          else {
            uint64_t v16 = DWORD1(v26);
          }
          icu::UnicodeString::replace((icu::UnicodeString *)&v25, 0, v16, v14);
          if ((v26 & 0x8000) != 0) {
            unsigned int v14 = DWORD1(v26);
          }
          else {
            unsigned int v14 = (unsigned __int16)v26 >> 5;
          }
        }
        else
        {
          BOOL v19 = v20;
          icu::UnicodeString::setTo((icu::UnicodeString *)&v25, 0, &v19, v13);
        }
        (*(void (**)(uint64_t, void, void, void **))(*(void *)a2 + 32))(a2, HIDWORD(v23), (v11 + v4), &v25);
        unint64_t v15 = a3[3];
        unsigned int v17 = v14 - v11;
        if (v14 != v11)
        {
          uint64_t v12 = v14 + v4;
          unsigned int v18 = a3[1] + v17;
          a3[1] = v18;
          LODWORD(v23) = v18;
          unint64_t v15 = v15 + v17;
          a3[3] = v15;
        }
      }
      uint64_t v4 = v12;
      if ((int)v12 >= (int)v15) {
        goto LABEL_23;
      }
    }
    LODWORD(v12) = HIDWORD(v23);
LABEL_23:
    a3[2] = v12;
    return (uint64_t (**)(uint64_t))icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v25);
  }
  return result;
}

icu::CECalendar *icu::CECalendar::CECalendar(icu::CECalendar *this, char **a2, UErrorCode *a3)
{
  int v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  int v7 = icu::Calendar::Calendar(this, v6, (const icu::Locale *)a2, a3);
  *(void *)this = &unk_1EDA493C0;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)this, v8, a3);
  return this;
}

void *icu::CECalendar::CECalendar(icu::CECalendar *this, const icu::CECalendar *a2)
{
  uint64_t result = (void *)icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *uint64_t result = &unk_1EDA493C0;
  return result;
}

uint64_t icu::CECalendar::operator=(uint64_t a1, uint64_t a2)
{
  icu::Calendar::operator=(a1, a2);
  return a1;
}

uint64_t icu::CECalendar::handleComputeMonthStart(icu::CECalendar *this, icu::CECalendar *a2, int a3)
{
  int v5 = (*(uint64_t (**)(icu::CECalendar *))(*(void *)this + 440))(this);

  return icu::CECalendar::ceToJD(a2, a3, 0, v5);
}

uint64_t icu::CECalendar::ceToJD(icu::CECalendar *this, int a2, int a3, int a4)
{
  unsigned int v4 = ~a2 / 0xDu;
  if (a2 >= 0) {
    unsigned int v5 = a2 % 0xDu;
  }
  else {
    unsigned int v5 = a2 + 1 + 13 * v4 + 12;
  }
  if (a2 < 0) {
    unsigned int v6 = ~v4;
  }
  else {
    unsigned int v6 = a2 / 0xDu;
  }
  return a3 + a4 + 30 * v5 + sub_18C93E120(v6 + this, 4) + 365 * (v6 + this) - 1;
}

uint64_t icu::CECalendar::handleGetLimit(uint64_t a1, int a2, int a3)
{
  return dword_18CA8CBB8[4 * a2 + a3];
}

uint64_t icu::CECalendar::haveDefaultCentury(icu::CECalendar *this)
{
  return 1;
}

uint64_t icu::CECalendar::jdToCE(icu::CECalendar *this, int a2, _DWORD *a3, int *a4, int *a5, int *a6)
{
  int v14 = 0;
  uint64_t result = sub_18C93E158(1461, &v14, (double)((int)this - a2));
  uint64_t v10 = v14;
  int v11 = v14 / 365;
  *a3 = v14 / 365
      + 4 * result
      + ((int)(((unint64_t)(1282606671 * v14) >> 32) - v14) >> 10)
      + ((((unint64_t)(1282606671 * v14) >> 32) - v14) >> 31);
  int v12 = v10 - 365 * v11;
  if (v10 == 1460) {
    int v13 = 365;
  }
  else {
    int v13 = v12;
  }
  *a4 = ((__int16)((34953 * (__int16)v13) >> 16) >> 4)
      + (((v13 + ((-30583 * (__int16)v13) >> 16)) & 0x8000) >> 15);
  *a5 = (__int16)(v13
                - 30
                * (((__int16)((34953 * (__int16)v13) >> 16) >> 4)
                 + (((v13 + ((-30583 * (__int16)v13) >> 16)) & 0x8000) >> 15))
                + 1);
  return result;
}

char *icu::CECalendar::getTemporalMonthCode(icu::CECalendar *this, UErrorCode *a2)
{
  if (icu::Calendar::get(this, 2u, a2) == 12) {
    return "M13";
  }

  return icu::Calendar::getTemporalMonthCode(this, a2);
}

unsigned char *icu::CECalendar::setTemporalMonthCode(unsigned char *this, const char *__s1, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    unsigned int v5 = this;
    if (!strcmp(__s1, "M13"))
    {
      icu::Calendar::set(v5, 2u, 12);
      return icu::Calendar::set(v5, 0x16u, 0);
    }
    else
    {
      return (unsigned char *)icu::Calendar::setTemporalMonthCode((uint64_t)v5, __s1, a3);
    }
  }
  return this;
}

uint64_t *icu::ChineseCalendar::clone@<X0>(icu::ChineseCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x278, a2);
  if (result)
  {
    uint64_t result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *uint64_t result = (uint64_t)&unk_1EDA495A8;
    *((unsigned char *)result + 618) = *((unsigned char *)this + 618);
    *((_DWORD *)result + 155) = *((_DWORD *)this + 155);
    result[78] = *((void *)this + 78);
  }
  return result;
}

uint64_t icu::ChineseCalendar::ChineseCalendar(icu::ChineseCalendar *this, const icu::ChineseCalendar *a2)
{
  uint64_t result = icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *(void *)uint64_t result = &unk_1EDA495A8;
  *(unsigned char *)(result + 618) = *((unsigned char *)a2 + 618);
  *(_DWORD *)(result + 620) = *((_DWORD *)a2 + 155);
  *(void *)(result + 624) = *((void *)a2 + 78);
  return result;
}

{
  uint64_t result;

  uint64_t result = icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *(void *)uint64_t result = &unk_1EDA495A8;
  *(unsigned char *)(result + 618) = *((unsigned char *)a2 + 618);
  *(_DWORD *)(result + 620) = *((_DWORD *)a2 + 155);
  *(void *)(result + 624) = *((void *)a2 + 78);
  return result;
}

icu::ChineseCalendar *icu::ChineseCalendar::ChineseCalendar(icu::ChineseCalendar *this, char **a2, UErrorCode *a3)
{
  unsigned int v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  int v7 = icu::Calendar::Calendar(this, v6, (const icu::Locale *)a2, a3);
  *(void *)this = &unk_1EDA495A8;
  *((unsigned char *)this + 618) = 0;
  *((_DWORD *)this + 155) = -2636;
  ChineseCalZoneAstroCalc = (icu::Calendar *)icu::ChineseCalendar::getChineseCalZoneAstroCalc(v7);
  *((void *)this + 78) = ChineseCalZoneAstroCalc;
  icu::Calendar::getNow(ChineseCalZoneAstroCalc);
  icu::Calendar::setTimeInMillis((uint64_t)this, v9, a3);
  return this;
}

uint64_t icu::ChineseCalendar::getChineseCalZoneAstroCalc(icu::ChineseCalendar *this)
{
  if (atomic_load_explicit((atomic_uint *volatile)dword_1E9192064, memory_order_acquire) != 2)
  {
    uint64_t inited = icu::umtx_initImplPreInit((atomic_uint *)dword_1E9192064);
    if (inited)
    {
      sub_18C8D9488(inited, v2);
      icu::umtx_initImplPostInit(dword_1E9192064);
    }
  }
  return qword_1E9192040;
}

icu::ChineseCalendar *icu::ChineseCalendar::ChineseCalendar(icu::ChineseCalendar *this, char **a2, int a3, const icu::TimeZone *a4, UErrorCode *a5)
{
  uint64_t v10 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  int v11 = icu::Calendar::Calendar(this, v10, (const icu::Locale *)a2, a5);
  *(void *)this = &unk_1EDA495A8;
  *((unsigned char *)this + 618) = 0;
  *((_DWORD *)this + 155) = a3;
  *((void *)this + 78) = a4;
  icu::Calendar::getNow(v11);
  icu::Calendar::setTimeInMillis((uint64_t)this, v12, a5);
  return this;
}

void icu::ChineseCalendar::~ChineseCalendar(icu::ChineseCalendar *this)
{
  icu::Calendar::~Calendar(this);

  icu::UMemory::operator delete(v1);
}

const char *icu::ChineseCalendar::getType(icu::ChineseCalendar *this)
{
  return "chinese";
}

void sub_18C8D9488(uint64_t a1, unint64_t a2)
{
  unsigned int v6 = (uint64_t *)*MEMORY[0x1E4F143B8];
  unint64_t v2 = icu::UMemory::operator new(v6, (icu::UMemory *)0xA0, a2);
  if (v2)
  {
    uint64_t v3 = (icu::SimpleTimeZone *)v2;
    unsigned int v4 = L"CHINA_ZONE";
    icu::UnicodeString::UnicodeString(v5, 1, &v4);
    icu::SimpleTimeZone::SimpleTimeZone(v3, 28800000, (const icu::UnicodeString *)v5);
    qword_1E9192040 = (uint64_t)v3;
    icu::UnicodeString::~UnicodeString(qword_1E9192000, (icu::UnicodeString *)v5);
  }
  else
  {
    qword_1E9192040 = 0;
  }
  sub_18CA0A25C(9u, (uint64_t)sub_18C8D9F9C);
}

uint64_t icu::ChineseCalendar::handleGetLimit(uint64_t a1, int a2, int a3)
{
  return dword_18CA8CD80[4 * a2 + a3];
}

uint64_t icu::ChineseCalendar::handleGetExtendedYear(icu::ChineseCalendar *this)
{
  int v2 = icu::Calendar::newestStamp((uint64_t)this, 0, 1, 0);
  int v3 = *((_DWORD *)this + 52);
  if (v2 <= v3)
  {
    if (v3 < 1) {
      return 1;
    }
    else {
      return *((unsigned int *)this + 22);
    }
  }
  else
  {
    if (*((int *)this + 33) < 1) {
      int v4 = -2636;
    }
    else {
      int v4 = 60 * *((_DWORD *)this + 3) - 2696;
    }
    if (*((int *)this + 34) < 1) {
      int v6 = 1;
    }
    else {
      int v6 = *((_DWORD *)this + 4);
    }
    return (v4 + v6 - *((_DWORD *)this + 155));
  }
}

uint64_t icu::ChineseCalendar::handleGetMonthLength(icu::ChineseCalendar *this, uint64_t a2, uint64_t a3)
{
  int v4 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, uint64_t, uint64_t))(*(void *)this + 304))(this, a2, a3, 1);
  v5.n128_f64[0] = (double)(v4 - 2440562);
  return (*(unsigned int (**)(icu::ChineseCalendar *, uint64_t, __n128))(*(void *)this + 448))(this, 1, v5)- v4+ 2440587;
}

uint64_t icu::ChineseCalendar::handleComputeFields(icu::ChineseCalendar *this, int a2, UErrorCode *a3)
{
  return (*(uint64_t (**)(icu::ChineseCalendar *, void, void, void, uint64_t))(*(void *)this + 488))(this, (a2 - 2440588), *((unsigned int *)this + 72), *((unsigned int *)this + 73), 1);
}

void *icu::ChineseCalendar::getFieldResolutionTable(icu::ChineseCalendar *this)
{
  return &icu::ChineseCalendar::CHINESE_DATE_PRECEDENCE;
}

uint64_t icu::ChineseCalendar::handleComputeMonthStart(icu::ChineseCalendar *this, int a2, int a3, int a4)
{
  int v5 = a3;
  if (a3 >= 0xC)
  {
    double v17 = (double)a3;
    sub_18C93E1B8(&v17, (double)a3, 12.0);
    a2 += (int)v8;
    int v5 = (int)v17;
  }
  v9.n128_f64[0] = (double)(int)((*(uint64_t (**)(icu::ChineseCalendar *, void))(*(void *)this + 496))(this, (a2 + *((_DWORD *)this + 155) - 1))+ 29 * v5);
  uint64_t v10 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, __n128))(*(void *)this + 448))(this, 1, v9);
  int v11 = v10 + 2440588;
  int v12 = *((_DWORD *)this + 5);
  uint64_t v15 = *(void *)((char *)this + 100);
  if (a4) {
    int v13 = *(void *)((char *)this + 100);
  }
  else {
    int v13 = 0;
  }
  UErrorCode v16 = U_ZERO_ERROR;
  icu::Calendar::computeGregorianFields(this, v11, &v16);
  uint64_t result = 0;
  if (v16 <= U_ZERO_ERROR)
  {
    (*(void (**)(icu::ChineseCalendar *, uint64_t, void, void, void))(*(void *)this + 488))(this, v10, *((unsigned int *)this + 72), *((unsigned int *)this + 73), 0);
    if (v5 != *((_DWORD *)this + 5) || v13 != *((_DWORD *)this + 25)) {
      int v11 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, double))(*(void *)this + 448))(this, 1, (double)((int)v10 + 25))+ 2440588;
    }
    *((_DWORD *)this + 5) = v12;
    *((_DWORD *)this + 35) = 1;
    *((unsigned char *)this + 110) = 1;
    *(void *)((char *)this + 100) = v15;
    *(void *)((char *)this + 220) = 0x100000001;
    *((_WORD *)this + 65) = 257;
    return (v11 - 1);
  }
  return result;
}

unsigned char *icu::ChineseCalendar::add(unsigned char *result, unsigned int a2, uint64_t a3, UErrorCode *a4)
{
  int v6 = result;
  if (a2 == 23 || a2 == 2)
  {
    if (a3)
    {
      uint64_t result = (unsigned char *)icu::Calendar::get(result, 5u, a4);
      if (*(int *)a4 <= 0)
      {
        int v7 = result;
        uint64_t result = (unsigned char *)icu::Calendar::get(v6, 0x14u, a4);
        if (*(int *)a4 <= 0)
        {
          double v8 = *(uint64_t (**)(unsigned char *, void, unsigned char *, uint64_t, UErrorCode *))(*(void *)v6 + 504);
          return (unsigned char *)v8(v6, (result - v7 - 2440587), v7, a3, a4);
        }
      }
    }
  }
  else
  {
    return icu::Calendar::add(result, a2, a3, a4);
  }
  return result;
}

uint64_t icu::ChineseCalendar::add(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

unsigned char *icu::ChineseCalendar::roll(unsigned char *result, uint64_t a2, int a3, UErrorCode *a4)
{
  int v6 = result;
  if (a2 == 23 || a2 == 2)
  {
    if (!a3) {
      return result;
    }
    uint64_t result = (unsigned char *)icu::Calendar::get(result, 5u, a4);
    if (*(int *)a4 > 0) {
      return result;
    }
    int v7 = result;
    uint64_t result = (unsigned char *)icu::Calendar::get(v6, 0x14u, a4);
    if (*(int *)a4 > 0) {
      return result;
    }
    int v8 = (int)result;
    uint64_t result = (unsigned char *)icu::Calendar::get(v6, 2u, a4);
    if (*(int *)a4 > 0) {
      return result;
    }
    int v9 = (int)result;
    uint64_t v10 = (v8 - v7 - 2440587);
    if (v6[618])
    {
      uint64_t result = (unsigned char *)icu::Calendar::get(v6, 0x16u, a4);
      if (result == 1)
      {
        int v11 = 1;
      }
      else
      {
        uint64_t v13 = (*(uint64_t (**)(unsigned char *, uint64_t, double))(*(void *)v6 + 448))(v6, 1, (double)((int)v10 - (int)(((double)v9 + -0.5) * 29.5305889)));
        uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)v6 + 480))(v6, v13, v10);
        int v11 = result != 0;
      }
      if (*(int *)a4 > 0) {
        return result;
      }
      v9 += v11;
      if (v6[618]) {
        int v12 = 13;
      }
      else {
        int v12 = 12;
      }
    }
    else
    {
      int v12 = 12;
    }
    int v14 = (v12 & (((v9 + a3) % v12) >> 31)) + (v9 + a3) % v12;
    if (v14 != v9)
    {
      uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, unsigned char *, void, UErrorCode *))(*(void *)v6 + 504);
      return (unsigned char *)v15(v6, v10, v7, (v14 - v9), a4);
    }
  }
  else
  {
    return icu::Calendar::roll(result, a2, a3, a4);
  }
  return result;
}

uint64_t icu::ChineseCalendar::roll(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t icu::ChineseCalendar::daysToMillis(icu::ChineseCalendar *this, double a2)
{
  uint64_t result = *((void *)this + 78);
  if (result)
  {
    uint64_t v4 = 0;
    int v3 = 0;
    return (*(uint64_t (**)(uint64_t, void, char *, uint64_t *, int *, double))(*(void *)result + 48))(result, 0, (char *)&v4 + 4, &v4, &v3, a2 * 86400000.0);
  }
  return result;
}

void icu::ChineseCalendar::millisToDays(icu::ChineseCalendar *this, double a2)
{
  uint64_t v3 = *((void *)this + 78);
  if (v3
    && (uint64_t v6 = 0,
        int v5 = 0,
        (*(void (**)(uint64_t, void, char *, uint64_t *, int *, double))(*(void *)v3 + 48))(v3, 0, (char *)&v6 + 4, &v6, &v5, a2), v5 < 1))
  {
    double v4 = (double)((int)v6 + HIDWORD(v6)) + a2;
  }
  else
  {
    double v4 = a2 + 28800000.0;
  }
  uprv_floor(v4 / 86400000.0);
}

uint64_t icu::ChineseCalendar::winterSolstice(icu::ChineseCalendar *this, unsigned int a2)
{
  unsigned int v2 = a2 - 1900;
  if (a2 - 1900 > 0xC8)
  {
    int v22 = 0;
    unsigned int v9 = sub_18C8CF440((uint64_t **)&qword_1E9192048, a2, &v22);
    if (!v9)
    {
      double v10 = sub_18C93E22C(a2, 11, 1);
      icu::ChineseCalendar::daysToMillis(this, v10);
      double v12 = v11;
      umtx_lock((atomic_ullong *)&unk_1E9192070);
      uint64_t v15 = (icu::CalendarAstronomer *)qword_1E9192050;
      if (!qword_1E9192050)
      {
        UErrorCode v16 = (icu::CalendarAstronomer *)icu::UMemory::operator new(v14, (icu::UMemory *)0x88, v13);
        if (v16) {
          UErrorCode v16 = (icu::CalendarAstronomer *)icu::CalendarAstronomer::CalendarAstronomer(v16);
        }
        qword_1E9192050 = (uint64_t)v16;
        sub_18CA0A25C(9u, (uint64_t)sub_18C8D9F9C);
        uint64_t v15 = (icu::CalendarAstronomer *)qword_1E9192050;
      }
      icu::CalendarAstronomer::setTime(v15, v12);
      double v17 = (icu::CalendarAstronomer *)qword_1E9192050;
      double v19 = icu::CalendarAstronomer::WINTER_SOLSTICE(v18);
      Sundouble Time = icu::CalendarAstronomer::getSunTime(v17, v19, 1);
      umtx_unlock((std::mutex **)&unk_1E9192070);
      icu::ChineseCalendar::millisToDays(this, SunTime);
      unsigned int v9 = (int)v21;
      sub_18C8CF4E0((uint64_t **)&qword_1E9192048, a2, (int)v21, &v22);
    }
    if (v22 <= 0) {
      return v9;
    }
    else {
      return 0;
    }
  }
  else
  {
    int v3 = (int)((double)(int)v2 * 365.243 + -0.3);
    uint64_t result = (v3 - 25211);
    unsigned int v5 = v2 >> 4;
    if (v2 >> 4 != 2 && v5 != 4)
    {
      unsigned int v6 = v3 - 25212;
      if ((word_18CA8D380[v5] >> (v2 & 0xF))) {
        return v6;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_18C8D9F9C()
{
  if (qword_1E9192050)
  {
    icu::CalendarAstronomer::~CalendarAstronomer((icu::CalendarAstronomer *)qword_1E9192050);
    icu::UMemory::operator delete(v0);
    qword_1E9192050 = 0;
  }
  if (qword_1E9192048)
  {
    (*(void (**)(uint64_t))(*(void *)qword_1E9192048 + 8))(qword_1E9192048);
    qword_1E9192048 = 0;
  }
  if (qword_1E9192058)
  {
    (*(void (**)(uint64_t))(*(void *)qword_1E9192058 + 8))(qword_1E9192058);
    qword_1E9192058 = 0;
  }
  if (qword_1E9192040)
  {
    (*(void (**)(uint64_t))(*(void *)qword_1E9192040 + 8))(qword_1E9192040);
    qword_1E9192040 = 0;
  }
  atomic_store(0, dword_1E9192064);
  return 1;
}

uint64_t icu::ChineseCalendar::newMoonNear(icu::ChineseCalendar *this, double a2, icu::CalendarAstronomer *a3)
{
  icu::ChineseCalendar::daysToMillis(this, a2);
  double v6 = v5;
  double NewMoonTimeInRange = icu::CalendarAstronomer::getNewMoonTimeInRange(a3, v5);
  if (NewMoonTimeInRange == 0.0)
  {
    umtx_lock((atomic_ullong *)&unk_1E9192070);
    double v10 = (icu::CalendarAstronomer *)qword_1E9192050;
    if (!qword_1E9192050)
    {
      double v11 = (icu::CalendarAstronomer *)icu::UMemory::operator new(v9, (icu::UMemory *)0x88, v8);
      if (v11) {
        double v11 = (icu::CalendarAstronomer *)icu::CalendarAstronomer::CalendarAstronomer(v11);
      }
      qword_1E9192050 = (uint64_t)v11;
      sub_18CA0A25C(9u, (uint64_t)sub_18C8D9F9C);
      double v10 = (icu::CalendarAstronomer *)qword_1E9192050;
    }
    icu::CalendarAstronomer::setTime(v10, v6);
    double v12 = (icu::CalendarAstronomer *)qword_1E9192050;
    double v18 = icu::CalendarAstronomer::NEW_MOON(v13);
    icu::CalendarAstronomer::getMoonTime(v12, &v18, a3);
    double v15 = v14;
    umtx_unlock((std::mutex **)&unk_1E9192070);
  }
  else
  {
    double v15 = NewMoonTimeInRange;
  }
  icu::ChineseCalendar::millisToDays(this, v15);
  return (int)v16;
}

uint64_t icu::ChineseCalendar::synodicMonthsBetween(icu::ChineseCalendar *this, int a2, int a3)
{
  double v3 = (double)(a3 - a2) / 29.5305889;
  double v4 = -0.5;
  if (v3 >= 0.0) {
    double v4 = 0.5;
  }
  return (int)(v3 + v4);
}

uint64_t icu::ChineseCalendar::majorSolarTerm(icu::ChineseCalendar *this, int a2)
{
  unsigned int v2 = (icu::CalendarAstronomer *)icu::ChineseCalendar::daysToMillis(this, (double)a2);
  icu::CalendarAstronomer::getSunLongitudeForTime(v2, v5, v3, v4);
  int v7 = ((int)(v6 * 6.0 / 3.14159265) + 2) % 12;
  if (v7 >= 1) {
    return v7;
  }
  else {
    return (v7 + 12);
  }
}

BOOL icu::ChineseCalendar::hasNoMajorSolarTerm(icu::ChineseCalendar *this, int a2)
{
  int v4 = (*(uint64_t (**)(icu::ChineseCalendar *))(*(void *)this + 464))(this);
  v5.n128_f64[0] = (double)(a2 + 25);
  uint64_t v6 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, __n128))(*(void *)this + 448))(this, 1, v5);
  return v4 == (*(unsigned int (**)(icu::ChineseCalendar *, uint64_t))(*(void *)this + 464))(this, v6);
}

uint64_t icu::ChineseCalendar::isLeapMonthBetween(icu::ChineseCalendar *this, int a2, uint64_t a3)
{
  if ((int)a3 < a2) {
    return 0;
  }
  uint64_t v4 = a3;
  while (!(*(unsigned int (**)(icu::ChineseCalendar *, uint64_t))(*(void *)this + 472))(this, v4))
  {
    uint64_t v4 = (*(uint64_t (**)(icu::ChineseCalendar *, void, double))(*(void *)this + 448))(this, 0, (double)((int)v4 - 25));
    if ((int)v4 < a2) {
      return 0;
    }
  }
  return 1;
}

uint64_t icu::ChineseCalendar::computeChineseFields(icu::ChineseCalendar *this, int a2, uint64_t a3, int a4, int a5)
{
  int v10 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t))(*(void *)this + 440))(this, a3);
  double v11 = *(uint64_t (**)(icu::ChineseCalendar *, void))(*(void *)this + 440);
  if (v10 <= a2)
  {
    int v12 = v11(this, (a3 + 1));
  }
  else
  {
    int v12 = v10;
    int v10 = v11(this, (a3 - 1));
  }
  uint64_t v13 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, double))(*(void *)this + 448))(this, 1, (double)(v10 + 1));
  v14.n128_f64[0] = (double)(v12 + 1);
  uint64_t v15 = (*(uint64_t (**)(icu::ChineseCalendar *, void, __n128))(*(void *)this + 448))(this, 0, v14);
  int v16 = a2 + 1;
  v17.n128_f64[0] = (double)(a2 + 1);
  uint64_t v18 = (*(uint64_t (**)(icu::ChineseCalendar *, void, __n128))(*(void *)this + 448))(this, 0, v17);
  *((unsigned char *)this + 618) = (*(unsigned int (**)(icu::ChineseCalendar *, uint64_t, uint64_t))(*(void *)this + 456))(this, v13, v15) == 12;
  int v19 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, uint64_t))(*(void *)this + 456))(this, v13, v18);
  uint64_t v20 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t))(*(void *)this + 496))(this, a3);
  if ((int)v20 > a2) {
    uint64_t v20 = (*(uint64_t (**)(icu::ChineseCalendar *, void))(*(void *)this + 496))(this, (a3 - 1));
  }
  if (*((unsigned char *)this + 618)) {
    v19 -= (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, uint64_t))(*(void *)this + 480))(this, v13, v18) != 0;
  }
  if (v19 < 1) {
    v19 += 12;
  }
  uint64_t result = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, uint64_t))(*(void *)this + 456))(this, v20, v18);
  if ((int)result >= 0) {
    int v22 = result;
  }
  else {
    int v22 = result + 12;
  }
  int v23 = *((unsigned __int8 *)this + 618);
  if (*((unsigned char *)this + 618))
  {
    uint64_t result = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t))(*(void *)this + 472))(this, v18);
    if (result)
    {
      uint64_t v24 = (*(uint64_t (**)(icu::ChineseCalendar *, void, double))(*(void *)this + 448))(this, 0, (double)((int)v18 - 25));
      uint64_t result = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, uint64_t))(*(void *)this + 480))(this, v13, v24);
      int v23 = result == 0;
    }
    else
    {
      int v23 = 0;
    }
  }
  *((_DWORD *)this + 5) = v19 - 1;
  *((_DWORD *)this + 35) = 1;
  *((unsigned char *)this + 110) = 1;
  *((_DWORD *)this + 25) = v23;
  *((_DWORD *)this + 26) = v22;
  *(void *)((char *)this + 220) = 0x100000001;
  *((_WORD *)this + 65) = 257;
  if (a5)
  {
    BOOL v25 = a4 > 5 || v19 < 11;
    int v26 = v25;
    if (v25) {
      int v27 = a3 + 1;
    }
    else {
      int v27 = a3;
    }
    if (v26) {
      int v28 = 2637;
    }
    else {
      int v28 = 2636;
    }
    *((_DWORD *)this + 22) = v27 - *((_DWORD *)this + 155);
    *((_DWORD *)this + 52) = 1;
    *((unsigned char *)this + 127) = 1;
    int v31 = 0;
    int v29 = sub_18C93E158(60, &v31, (double)((int)a3 - 1 + v28));
    *((_WORD *)this + 54) = 257;
    int v30 = v31 + 1;
    *((_DWORD *)this + 3) = v29 + 1;
    *((_DWORD *)this + 4) = v30;
    *(void *)((char *)this + 132) = 0x100000001;
    *((_DWORD *)this + 8) = v16 - v18;
    *((_DWORD *)this + 38) = 1;
    *((unsigned char *)this + 113) = 1;
    uint64_t result = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t))(*(void *)this + 496))(this, a3);
    if ((int)result > a2) {
      uint64_t result = (*(uint64_t (**)(icu::ChineseCalendar *, void))(*(void *)this + 496))(this, (a3 - 1));
    }
    *((_DWORD *)this + 9) = v16 - result;
    *((_DWORD *)this + 39) = 1;
    *((unsigned char *)this + 114) = 1;
  }
  return result;
}

uint64_t icu::ChineseCalendar::newYear(icu::ChineseCalendar *this, uint64_t a2)
{
  if ((a2 - 1900) <= 0xC8) {
    return ((int)((double)((int)a2 - 1900) * 365.244) + byte_18CA8D39A[(a2 - 1900)] - 25532);
  }
  int v13 = 0;
  LODWORD(v5) = sub_18C8CF440((uint64_t **)&qword_1E9192058, a2, &v13);
  if (!v5)
  {
    int v6 = (*(uint64_t (**)(icu::ChineseCalendar *, void))(*(void *)this + 440))(this, (a2 - 1));
    int v7 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t))(*(void *)this + 440))(this, a2);
    v8.n128_f64[0] = (double)(v6 + 1);
    uint64_t v9 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, __n128))(*(void *)this + 448))(this, 1, v8);
    v10.n128_f64[0] = (double)((int)v9 + 25);
    uint64_t v5 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, __n128))(*(void *)this + 448))(this, 1, v10);
    v11.n128_f64[0] = (double)(v7 + 1);
    uint64_t v12 = (*(uint64_t (**)(icu::ChineseCalendar *, void, __n128))(*(void *)this + 448))(this, 0, v11);
    if ((*(unsigned int (**)(icu::ChineseCalendar *, uint64_t, uint64_t))(*(void *)this + 456))(this, v9, v12) == 12&& ((*(unsigned int (**)(icu::ChineseCalendar *, uint64_t))(*(void *)this + 472))(this, v9)|| (*(unsigned int (**)(icu::ChineseCalendar *, uint64_t))(*(void *)this + 472))(this, v5)))
    {
      LODWORD(v5) = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, double))(*(void *)this + 448))(this, 1, (double)((int)v5 + 25));
    }
    sub_18C8CF4E0((uint64_t **)&qword_1E9192058, a2, v5, &v13);
  }
  if (v13 <= 0) {
    return v5;
  }
  else {
    return 0;
  }
}

unsigned char *icu::ChineseCalendar::offsetMonth(unsigned char *this, int a2, int a3, int a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    double v6 = (double)a2 + 29.5305889 * ((double)a4 + -0.5);
    if (v6 < -2147483650.0 || v6 > 2147483650.0)
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      __n128 v8 = this;
      int v9 = a3
         + 2440587
         + (*(uint64_t (**)(unsigned char *, uint64_t, double))(*(void *)this + 448))(this, 1, (double)(int)v6);
      if (a3 < 30
        || (icu::Calendar::set(v8, 0x14u, v9 - 1), this = icu::Calendar::complete(v8, a5), *(int *)a5 <= 0)
        && ((this = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, UErrorCode *))(*(void *)v8 + 176))(v8, 5, a5), (int)this >= a3)? (BOOL v10 = *a5 <= U_ZERO_ERROR): (BOOL v10 = 0), v10))
      {
        return icu::Calendar::set(v8, 0x14u, v9);
      }
    }
  }
  return this;
}

uint64_t icu::ChineseCalendar::getRelatedYear(icu::ChineseCalendar *this, UErrorCode *a2)
{
  unsigned int v3 = icu::Calendar::get(this, 0x13u, a2) - 2637;
  if (*(int *)a2 <= 0) {
    return v3;
  }
  else {
    return 0;
  }
}

unsigned char *icu::ChineseCalendar::setRelatedYear(icu::ChineseCalendar *this, int a2)
{
  return icu::Calendar::set(this, 0x13u, a2 + 2637);
}

uint64_t icu::ChineseCalendar::haveDefaultCentury(icu::ChineseCalendar *this)
{
  return 1;
}

double icu::ChineseCalendar::internalGetDefaultCenturyStart(icu::ChineseCalendar *this)
{
  if (atomic_load_explicit(dword_1E91920C0, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1E91920C0))
  {
    sub_18C8DAEB0();
    icu::umtx_initImplPostInit((unsigned int *)dword_1E91920C0);
  }
  return *(double *)&qword_1EB20A6F0;
}

uint64_t icu::ChineseCalendar::internalGetDefaultCenturyStartYear(icu::ChineseCalendar *this)
{
  if (atomic_load_explicit(dword_1E91920C0, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1E91920C0))
  {
    sub_18C8DAEB0();
    icu::umtx_initImplPostInit((unsigned int *)dword_1E91920C0);
  }
  return dword_1EB20A6F8;
}

void sub_18C8DAEB0()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  UErrorCode v2 = U_ZERO_ERROR;
  bzero(v4, 0x278uLL);
  icu::Locale::Locale((icu::Locale *)v3, "@calendar=chinese", 0, 0, 0);
  icu::ChineseCalendar::ChineseCalendar((icu::ChineseCalendar *)v4, v3, &v2);
  icu::Locale::~Locale((icu::Locale *)v3);
  if (v2 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v0);
    icu::Calendar::setTimeInMillis((uint64_t)v4, v1, &v2);
    icu::Calendar::add(v4, 1u, -80, &v2);
    qword_1EB20A6F0 = icu::Calendar::getTimeInMillis((icu::Calendar *)v4, &v2);
    dword_1EB20A6F8 = icu::Calendar::get(v4, 1u, &v2);
  }
  icu::Calendar::~Calendar((icu::Calendar *)v4);
}

BOOL icu::ChineseCalendar::inTemporalLeapYear(icu::ChineseCalendar *this, UErrorCode *a2)
{
  int v3 = (*(uint64_t (**)(icu::ChineseCalendar *, uint64_t, UErrorCode *))(*(void *)this + 176))(this, 6, a2);
  return *(int *)a2 < 1 && v3 > 360;
}

void *icu::ChineseCalendar::getStaticClassID(icu::ChineseCalendar *this)
{
  return &unk_1E9192060;
}

void *icu::ChineseCalendar::getDynamicClassID(icu::ChineseCalendar *this)
{
  return &unk_1E9192060;
}

char *icu::ChineseCalendar::getTemporalMonthCode(icu::ChineseCalendar *this, UErrorCode *a2)
{
  int v4 = icu::Calendar::get(this, 0x16u, a2);
  if (*(int *)a2 > 0) {
    return 0;
  }
  if (v4)
  {
    int v6 = icu::Calendar::get(this, 2u, a2);
    if (*(int *)a2 > 0) {
      return 0;
    }
    return off_1E550A680[v6];
  }
  else
  {
    return icu::Calendar::getTemporalMonthCode(this, a2);
  }
}

uint64_t icu::ChineseCalendar::setTemporalMonthCode(uint64_t this, const char *__s, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v5 = (unsigned char *)this;
    if (strlen(__s) == 4 && *__s == 77 && __s[3] == 76)
    {
      uint64_t v6 = 0;
      while (1)
      {
        this = strcmp(__s, off_1E550A680[v6]);
        if (!this) {
          break;
        }
        if (++v6 == 12)
        {
          *a3 = U_ILLEGAL_ARGUMENT_ERROR;
          return this;
        }
      }
      icu::Calendar::set(v5, 2u, v6);
      return (uint64_t)icu::Calendar::set(v5, 0x16u, 1);
    }
    else
    {
      icu::Calendar::set(v5, 0x16u, 0);
      return icu::Calendar::setTemporalMonthCode((uint64_t)v5, __s, a3);
    }
  }
  return this;
}

uint64_t icu::ChineseCalendar::internalGetMonth(icu::ChineseCalendar *this)
{
  if (icu::Calendar::resolveFields(this, icu::Calendar::kMonthPrecedence) == 2) {
    return *((unsigned int *)this + 5);
  }
  int v3 = (unsigned char *)(*(uint64_t (**)(icu::ChineseCalendar *))(*(void *)this + 24))(this);
  icu::Calendar::set(v3, 2u, 0);
  icu::Calendar::set(v3, 0x16u, 0);
  icu::Calendar::set(v3, 5u, 1);
  UErrorCode v5 = U_ZERO_ERROR;
  (*(void (**)(unsigned char *, uint64_t, void, UErrorCode *))(*(void *)v3 + 72))(v3, 2, *((unsigned int *)this + 26), &v5);
  *((_DWORD *)this + 25) = icu::Calendar::get(v3, 0x16u, &v5);
  *((_DWORD *)this + 55) = 1;
  *((unsigned char *)this + 130) = 1;
  uint64_t v2 = icu::Calendar::get(v3, 2u, &v5);
  *((_DWORD *)this + 5) = v2;
  *((_DWORD *)this + 35) = 1;
  *((unsigned char *)this + 110) = 1;
  (*(void (**)(unsigned char *))(*(void *)v3 + 8))(v3);
  return v2;
}

uint64_t icu::ChineseCalendar::internalGetMonth(icu::ChineseCalendar *this, uint64_t a2)
{
  if (icu::Calendar::resolveFields(this, icu::Calendar::kMonthPrecedence) == 2)
  {
    if (*((int *)this + 35) >= 1) {
      return *((unsigned int *)this + 5);
    }
    return a2;
  }
  else
  {
    UErrorCode v5 = *(uint64_t (**)(icu::ChineseCalendar *))(*(void *)this + 264);
    return v5(this);
  }
}

void *icu::ChoiceFormat::getStaticClassID(icu::ChoiceFormat *this)
{
  return &unk_1E91920C8;
}

void *icu::ChoiceFormat::getDynamicClassID(icu::ChoiceFormat *this)
{
  return &unk_1E91920C8;
}

icu::ChoiceFormat *icu::ChoiceFormat::ChoiceFormat(icu::ChoiceFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  icu::NumberFormat::NumberFormat(this);
  *(void *)uint64_t v6 = &unk_1EDA497D0;
  *(UErrorCode *)(v6 + 356) = *a3;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v6 + 360), a3);
  (*(void (**)(icu::ChoiceFormat *, const icu::UnicodeString *, UErrorCode *))(*(void *)this + 304))(this, a2, a3);
  return this;
}

icu::ChoiceFormat *icu::ChoiceFormat::ChoiceFormat(icu::ChoiceFormat *this, const double *a2, const icu::UnicodeString *a3, uint64_t a4)
{
  icu::NumberFormat::NumberFormat(this);
  *(void *)uint64_t v8 = &unk_1EDA497D0;
  uint64_t v9 = v8 + 356;
  *(_DWORD *)(v8 + 356) = 0;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v8 + 360), (UErrorCode *)(v8 + 356));
  (*(void (**)(icu::ChoiceFormat *, const double *, void, const icu::UnicodeString *, uint64_t, uint64_t))(*(void *)this + 376))(this, a2, 0, a3, a4, v9);
  return this;
}

icu::ChoiceFormat *icu::ChoiceFormat::ChoiceFormat(icu::ChoiceFormat *this, const double *a2, const signed __int8 *a3, const icu::UnicodeString *a4, uint64_t a5)
{
  icu::NumberFormat::NumberFormat(this);
  *(void *)uint64_t v10 = &unk_1EDA497D0;
  uint64_t v11 = v10 + 356;
  *(_DWORD *)(v10 + 356) = 0;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v10 + 360), (UErrorCode *)(v10 + 356));
  (*(void (**)(icu::ChoiceFormat *, const double *, const signed __int8 *, const icu::UnicodeString *, uint64_t, uint64_t))(*(void *)this + 376))(this, a2, a3, a4, a5, v11);
  return this;
}

icu::ChoiceFormat *icu::ChoiceFormat::ChoiceFormat(icu::ChoiceFormat *this, const icu::ChoiceFormat *a2)
{
  uint64_t v4 = icu::NumberFormat::NumberFormat(this, a2);
  *(void *)uint64_t v4 = &unk_1EDA497D0;
  *(_DWORD *)(v4 + 356) = *((_DWORD *)a2 + 89);
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v4 + 360), (const icu::ChoiceFormat *)((char *)a2 + 360));
  return this;
}

{
  uint64_t v4;

  uint64_t v4 = icu::NumberFormat::NumberFormat(this, a2);
  *(void *)uint64_t v4 = &unk_1EDA497D0;
  *(_DWORD *)(v4 + 356) = *((_DWORD *)a2 + 89);
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v4 + 360), (const icu::ChoiceFormat *)((char *)a2 + 360));
  return this;
}

icu::ChoiceFormat *icu::ChoiceFormat::ChoiceFormat(icu::ChoiceFormat *this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4)
{
  icu::NumberFormat::NumberFormat(this);
  *(void *)uint64_t v8 = &unk_1EDA497D0;
  *(UErrorCode *)(v8 + 356) = *a4;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v8 + 360), a4);
  (*(void (**)(icu::ChoiceFormat *, const icu::UnicodeString *, UParseError *, UErrorCode *))(*(void *)this + 312))(this, a2, a3, a4);
  return this;
}

uint64_t icu::ChoiceFormat::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = icu::NumberFormat::operator==(a1, a2);
  if (result)
  {
    return icu::MessagePattern::operator==(a1 + 360, a2 + 360);
  }
  return result;
}

uint64_t icu::ChoiceFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::NumberFormat::operator=(a1, a2);
    *(_DWORD *)(a1 + 356) = *(_DWORD *)(a2 + 356);
    icu::MessagePattern::operator=(a1 + 360, a2 + 360);
  }
  return a1;
}

void icu::ChoiceFormat::~ChoiceFormat(icu::ChoiceFormat *this)
{
  *(void *)this = &unk_1EDA497D0;
  icu::MessagePattern::~MessagePattern((icu::ChoiceFormat *)((char *)this + 360));

  icu::NumberFormat::~NumberFormat(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDA497D0;
  icu::MessagePattern::~MessagePattern((icu::ChoiceFormat *)((char *)this + 360));

  icu::NumberFormat::~NumberFormat(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDA497D0;
  icu::MessagePattern::~MessagePattern((icu::ChoiceFormat *)((char *)this + 360));
  icu::NumberFormat::~NumberFormat(this);

  icu::UMemory::operator delete(v2);
}

icu::ChoiceFormat *icu::ChoiceFormat::dtos(icu::ChoiceFormat *this, double a2, icu::UnicodeString *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *(void *)__stunint64_t r = 0;
  uint64_t v16 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v4 = __str;
  snprintf(__str, 0x1FuLL, "%.*g", 15, a2);
  while (1)
  {
    uint64_t v5 = *v4;
    if (v5 != 45)
    {
      if (!*v4) {
        goto LABEL_9;
      }
      if ((v5 & 0x80) != 0 || (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v5 + 60) & 0x400) == 0) {
        break;
      }
    }
    ++v4;
  }
  if (v5 != 101) {
    *v4++ = 46;
  }
LABEL_9:
  for (uint64_t i = v4 + 1; *(i - 1); ++i)
  {
    if (*(i - 1) == 101)
    {
      int v7 = *i;
      if (v7 == 43 || v7 == 45) {
        ++i;
      }
      for (uint64_t j = i; ; ++j)
      {
        int v9 = *j;
        if (v9 != 48) {
          break;
        }
      }
      if (*j) {
        BOOL v10 = j == i;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10)
      {
        uint64_t v11 = 1;
        do
        {
          *i++ = v9;
          int v9 = j[v11++];
        }
        while (v9);
        *uint64_t i = 0;
      }
      break;
    }
  }
  icu::UnicodeString::UnicodeString(v14, __str, 0xFFFFFFFFLL, 0);
  icu::UnicodeString::operator=(this, (icu::UnicodeString *)v14);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v14);
  return this;
}

icu::MessagePattern *icu::ChoiceFormat::applyPattern(UErrorCode *this, UChar **a2, UErrorCode *a3)
{
  uint64_t result = icu::MessagePattern::parseChoiceStyle((icu::MessagePattern *)(this + 90), a2, 0, a3);
  this[89] = *a3;
  return result;
}

icu::MessagePattern *icu::ChoiceFormat::applyPattern(UErrorCode *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  uint64_t result = icu::MessagePattern::parseChoiceStyle((icu::MessagePattern *)(this + 90), a2, a3, a4);
  this[89] = *a4;
  return result;
}

icu::UnicodeString *icu::ChoiceFormat::toPattern(UChar **this, UChar **a2)
{
  return icu::UnicodeString::operator=(a2, this + 47);
}

uint64_t icu::ChoiceFormat::setChoices(icu::ChoiceFormat *this, const double *a2, const icu::UnicodeString *a3, uint64_t a4)
{
  int v5 = 0;
  return (*(uint64_t (**)(icu::ChoiceFormat *, const double *, void, const icu::UnicodeString *, uint64_t, int *))(*(void *)this + 376))(this, a2, 0, a3, a4, &v5);
}

uint64_t icu::ChoiceFormat::setChoices(icu::ChoiceFormat *this, const double *a2, const signed __int8 *a3, const icu::UnicodeString *a4, uint64_t a5)
{
  int v6 = 0;
  return (*(uint64_t (**)(icu::ChoiceFormat *, const double *, const signed __int8 *, const icu::UnicodeString *, uint64_t, int *))(*(void *)this + 376))(this, a2, a3, a4, a5, &v6);
}

void *icu::ChoiceFormat::setChoices(void *this, const double *a2, const signed __int8 *a3, const icu::UnicodeString *a4, int a5, UErrorCode *a6)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 <= 0)
  {
    int v6 = a2;
    if (a2 && (int v7 = a4) != 0)
    {
      uint64_t v32 = (uint64_t)this;
      long long v46 = 0u;
      uint64_t v49 = 0;
      long long v48 = 0u;
      long long v47 = 0u;
      int v45 = &unk_1EDA47700;
      LOWORD(v46) = 2;
      if (a5 >= 1)
      {
        uint64_t v8 = a3;
        uint64_t v9 = 0;
        int v34 = (char *)a4 + 10;
        uint64_t v35 = a5;
        while (1)
        {
          if (v9)
          {
            LOWORD(v40) = 124;
            icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v40, 0, 1);
          }
          uint64_t v44 = 0;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v41 = 0u;
          int v40 = &unk_1EDA47700;
          LOWORD(v41) = 2;
          if (uprv_isPositiveInfinity(v6[v9])) {
            goto LABEL_11;
          }
          if (uprv_isNegativeInfinity(v6[v9])) {
            break;
          }
          icu::ChoiceFormat::dtos((icu::ChoiceFormat *)&v40, v6[v9], v10);
          if ((v41 & 0x8000u) == 0) {
            uint64_t v12 = (unsigned __int16)v41 >> 5;
          }
          else {
            uint64_t v12 = DWORD1(v41);
          }
          icu::UnicodeString::doAppend((uint64_t)&v45, (const icu::UnicodeString *)&v40, 0, v12);
          if (!v8) {
            goto LABEL_18;
          }
LABEL_12:
          if (v8[v9])
          {
            __int16 v11 = 60;
            goto LABEL_19;
          }
LABEL_18:
          __int16 v11 = 35;
LABEL_19:
          __int16 v39 = v11;
          icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v39, 0, 1);
          int v13 = (char *)v7 + 64 * v9;
          __n128 v14 = (__int16 *)(v13 + 8);
          if (*((__int16 *)v13 + 4) < 0) {
            uint64_t v15 = (void *)*((unsigned int *)v13 + 3);
          }
          else {
            uint64_t v15 = (void *)(*((unsigned __int16 *)v13 + 4) >> 5);
          }
          if ((int)v15 >= 1)
          {
            unint64_t v16 = 0;
            int v17 = 0;
            uint64_t v18 = (char *)a4 + 64 * v9;
            int v19 = (unsigned int *)(v18 + 12);
            uint64_t v20 = (char **)(v18 + 24);
            uint64_t v21 = v15;
            while (1)
            {
              unsigned int v22 = (unsigned __int16)*v14;
              unsigned int v23 = *v14 < 0 ? *v19 : v22 >> 5;
              if (v16 >= v23) {
                break;
              }
              uint64_t v24 = &v34[64 * v9];
              if ((v22 & 2) == 0) {
                uint64_t v24 = *v20;
              }
              int v25 = *(unsigned __int16 *)&v24[2 * v16];
              if (v25 == 39 && v17 == 0)
              {
                LOWORD(v25) = 39;
                __int16 v39 = 39;
                icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v39, 0, 1);
                int v17 = 0;
LABEL_48:
                __int16 v39 = v25;
                int v28 = &v45;
                goto LABEL_49;
              }
              if (v25 != 124 || v17)
              {
                if (v25 == 123)
                {
                  ++v17;
                  goto LABEL_48;
                }
LABEL_38:
                int v30 = v25 == 125 && v17 > 0;
                v17 -= v30;
                goto LABEL_48;
              }
              __int16 v39 = 39;
              uint64_t v27 = icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v39, 0, 1);
              __int16 v39 = 124;
              int v28 = (void **)icu::UnicodeString::doAppend(v27, (uint64_t)&v39, 0, 1);
              __int16 v39 = 39;
LABEL_49:
              icu::UnicodeString::doAppend((uint64_t)v28, (uint64_t)&v39, 0, 1);
              if (v21 == ++v16) {
                goto LABEL_50;
              }
            }
            int v25 = 0xFFFF;
            goto LABEL_38;
          }
LABEL_50:
          icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v40);
          ++v9;
          int v6 = a2;
          uint64_t v8 = a3;
          int v7 = a4;
          if (v9 == v35) {
            goto LABEL_51;
          }
        }
        __int16 v39 = 45;
        icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v39, 0, 1);
LABEL_11:
        __int16 v39 = 8734;
        icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v39, 0, 1);
        if (!v8) {
          goto LABEL_18;
        }
        goto LABEL_12;
      }
LABEL_51:
      (*(void (**)(uint64_t, void **, UErrorCode *))(*(void *)v32 + 304))(v32, &v45, a6);
      return icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v45);
    }
    else
    {
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

uint64_t icu::ChoiceFormat::getLimits(icu::ChoiceFormat *this, int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t icu::ChoiceFormat::getClosures(icu::ChoiceFormat *this, int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t icu::ChoiceFormat::getFormats(icu::ChoiceFormat *this, int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t icu::ChoiceFormat::format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)a1 + 64))(a1, a3, a4, (double)a2);
}

uint64_t icu::ChoiceFormat::format(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)a1 + 64))(a1, a3, a4, (double)a2);
}

icu::UnicodeString *icu::ChoiceFormat::format(icu::ChoiceFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  if (!*((_DWORD *)this + 114)) {
    return a3;
  }
  int v6 = (icu::ChoiceFormat *)((char *)this + 360);
  SubMessage = (const icu::MessagePattern *)icu::ChoiceFormat::findSubMessage((icu::ChoiceFormat *)((char *)this + 360), 0, a2);
  if (*((_DWORD *)this + 92) != 1)
  {
    uint64_t v10 = *((void *)this + 56);
    uint64_t v11 = v10 + 16 * (int)SubMessage;
    int v12 = *(_DWORD *)(v11 + 4) + *(unsigned __int16 *)(v11 + 8);
    int v13 = *(_DWORD *)(v11 + 12);
    if (v13 <= (int)SubMessage) {
      int v13 = (int)SubMessage;
    }
    icu::UnicodeString::doAppend((uint64_t)a3, (icu::ChoiceFormat *)((char *)this + 376), v12, (*(_DWORD *)(v10 + 16 * v13 + 4) - v12));
    return a3;
  }

  return (icu::UnicodeString *)icu::MessageImpl::appendSubMessageWithoutSkipSyntax(v6, SubMessage, a3, v8);
}

uint64_t icu::ChoiceFormat::findSubMessage(icu::ChoiceFormat *this, const icu::MessagePattern *a2, double a3)
{
  int v3 = *((_DWORD *)this + 24);
  uint64_t v4 = (int)a2 + 2;
  uint64_t v5 = *((void *)this + 11);
  if (*(_DWORD *)(v5 + 16 * v4 + 12) <= (int)v4) {
    int v6 = a2 + 2;
  }
  else {
    int v6 = *(_DWORD *)(v5 + 16 * v4 + 12);
  }
  if (v6 + 1 < v3)
  {
    int v7 = (_DWORD *)(v5 + 16 * (v6 + 1));
    if (*v7 != 6)
    {
      uint64_t v10 = (char *)this + 26;
      do
      {
        double NumericValue = icu::MessagePattern::getNumericValue((uint64_t)this, (uint64_t)v7);
        uint64_t v12 = *((void *)this + 11);
        uint64_t v13 = *(int *)(v12 + 16 * v6 + 36);
        unsigned int v14 = *((unsigned __int16 *)this + 12);
        if ((v14 & 0x8000u) == 0) {
          unsigned int v15 = v14 >> 5;
        }
        else {
          unsigned int v15 = *((_DWORD *)this + 7);
        }
        if (v15 > v13
          && ((v14 & 2) != 0 ? (unint64_t v16 = v10) : (unint64_t v16 = (char *)*((void *)this + 5)), *(_WORD *)&v16[2 * v13] == 60))
        {
          if (NumericValue >= a3) {
            return v4;
          }
        }
        else if (NumericValue > a3)
        {
          return v4;
        }
        uint64_t v4 = v6 + 3;
        if (*(_DWORD *)(v12 + 16 * v4 + 12) <= (int)v4) {
          v6 += 3;
        }
        else {
          int v6 = *(_DWORD *)(v12 + 16 * v4 + 12);
        }
        if (v6 + 1 >= v3) {
          break;
        }
        int v7 = (_DWORD *)(v12 + 16 * (v6 + 1));
      }
      while (*v7 != 6);
    }
  }
  return v4;
}

icu::UnicodeString *icu::ChoiceFormat::format(icu::ChoiceFormat *this, const icu::Formattable *a2, unsigned int a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  if ((a3 & 0x80000000) != 0)
  {
    UErrorCode v13 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_11:
    *a6 = v13;
    return a4;
  }
  if (!*((_DWORD *)this + 114))
  {
    UErrorCode v13 = U_INVALID_STATE_ERROR;
    goto LABEL_11;
  }
  if (a3)
  {
    uint64_t v11 = a3;
    do
    {
      double Double = icu::Formattable::getDouble(a2, a6);
      if (*(int *)a6 <= 0) {
        (*(void (**)(icu::ChoiceFormat *, icu::UnicodeString *, icu::FieldPosition *, double))(*(void *)this + 64))(this, a4, a5, Double);
      }
      a2 = (const icu::Formattable *)((char *)a2 + 112);
      --v11;
    }
    while (v11);
  }
  return a4;
}

uint64_t icu::ChoiceFormat::parse(icu::ChoiceFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4, icu::ParsePosition *a5)
{
  double v6 = icu::ChoiceFormat::parseArgument((icu::ChoiceFormat *)((char *)this + 360), 0, (uint64_t)a2, a4, a5);

  return icu::Formattable::setDouble(a3, v6);
}

double icu::ChoiceFormat::parseArgument(icu::ChoiceFormat *this, const icu::MessagePattern *a2, uint64_t a3, const icu::UnicodeString *a4, icu::ParsePosition *a5)
{
  int v7 = (int)a2;
  uint64_t v9 = (const icu::UnicodeString *)*((unsigned int *)a4 + 2);
  double NaN = uprv_getNaN();
  int v11 = *((_DWORD *)this + 24);
  if (v11 <= v7) {
    goto LABEL_14;
  }
  int v12 = (int)v9;
  do
  {
    UErrorCode v13 = (_DWORD *)(*((void *)this + 11) + 16 * v7);
    if (*v13 == 6) {
      break;
    }
    double NumericValue = icu::MessagePattern::getNumericValue((uint64_t)this, (uint64_t)v13);
    unsigned int v15 = (const icu::MessagePattern *)(v7 + 2);
    int v16 = *(_DWORD *)(*((void *)this + 11) + 16 * (void)v15 + 12) <= v7 + 2
        ? (int)v15
        : *(_DWORD *)(*((void *)this + 11) + 16 * (v7 + 2) + 12);
    int matched = icu::ChoiceFormat::matchStringUntilLimitPart(this, v15, v16, a3, v9);
    if ((matched & 0x80000000) == 0 && matched + (int)v9 > v12)
    {
      unsigned int v18 = *(unsigned __int16 *)(a3 + 8);
      int v19 = (__int16)v18;
      unsigned int v20 = v18 >> 5;
      if (v19 < 0) {
        unsigned int v20 = *(_DWORD *)(a3 + 12);
      }
      int v12 = matched + v9;
      double NaN = NumericValue;
      if (matched + v9 == v20) {
        break;
      }
    }
    int v7 = v16 + 1;
  }
  while (v7 < v11);
  if (v12 == v9) {
LABEL_14:
  }
    *((_DWORD *)a4 + 3) = v9;
  else {
    *((_DWORD *)a4 + 2) = v12;
  }
  return NaN;
}

uint64_t icu::ChoiceFormat::matchStringUntilLimitPart(icu::ChoiceFormat *this, const icu::MessagePattern *a2, int a3, uint64_t a4, const icu::UnicodeString *a5)
{
  int v5 = (int)a5;
  LODWORD(v8) = 0;
  uint64_t v9 = *((void *)this + 11);
  uint64_t v10 = (int)a2;
  int v11 = *(_DWORD *)(v9 + 16 * (int)a2 + 4) + *(unsigned __int16 *)(v9 + 16 * (int)a2 + 8);
  int v12 = (char *)this + 26;
  uint64_t v13 = a3;
  while (1)
  {
    uint64_t v14 = v9 + 16 * v10 + 24;
    do
    {
      unsigned int v15 = (unsigned __int16 *)v14;
      if (v13 == ++v10) {
        break;
      }
      v14 += 16;
    }
    while (*((_DWORD *)v15 - 2) != 2);
    int v16 = *((_DWORD *)v15 - 1);
    int32_t v17 = v16 - v11;
    if (v16 == v11) {
      goto LABEL_25;
    }
    unsigned int v18 = *((unsigned __int16 *)this + 12);
    if ((v18 & 1) == 0) {
      break;
    }
    if ((*(_WORD *)(a4 + 8) & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
LABEL_25:
    uint64_t v8 = (v17 + v8);
    if (v13 == v10) {
      return v8;
    }
    int v11 = *((_DWORD *)v15 - 1) + *v15;
    uint64_t v9 = *((void *)this + 11);
  }
  if ((v18 & 0x8000u) == 0) {
    int v19 = v18 >> 5;
  }
  else {
    int v19 = *((_DWORD *)this + 7);
  }
  if (v11 < 0)
  {
    int v20 = 0;
  }
  else
  {
    int v20 = v19;
    if (v19 >= v11)
    {
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_19:
      int32_t v21 = 0;
      goto LABEL_20;
    }
  }
  int v11 = v20;
  if (v17 < 0) {
    goto LABEL_19;
  }
LABEL_13:
  int32_t v21 = v19 - v11;
  int32_t v22 = v17;
  if (v21 < v17) {
LABEL_20:
  }
    int32_t v22 = v21;
  if ((v18 & 2) != 0) {
    uint64_t v23 = (uint64_t)v12;
  }
  else {
    uint64_t v23 = *((void *)this + 5);
  }
  if (!icu::UnicodeString::doCompare(a4, v5, v17, v23, v11, v22)) {
    goto LABEL_25;
  }
  return 0xFFFFFFFFLL;
}

icu::NumberFormat *icu::ChoiceFormat::clone@<X0>(icu::ChoiceFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::NumberFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x1E8, a2);
  int v5 = v4;
  if (v4)
  {
    icu::NumberFormat::NumberFormat(v4, this);
    *(void *)int v5 = &unk_1EDA497D0;
    *((_DWORD *)v5 + 89) = *((_DWORD *)this + 89);
    icu::MessagePattern::MessagePattern((icu::NumberFormat *)((char *)v5 + 360), (icu::ChoiceFormat *)((char *)this + 360));
  }
  return v5;
}

uint64_t sub_18C8DC594(uint64_t a1)
{
  return *(char *)(a1 + 341);
}

void *icu::CollationElementIterator::getStaticClassID(icu::CollationElementIterator *this)
{
  return &unk_1E91920C9;
}

void *icu::CollationElementIterator::getDynamicClassID(icu::CollationElementIterator *this)
{
  return &unk_1E91920C9;
}

uint64_t icu::CollationElementIterator::CollationElementIterator(uint64_t this, uint64_t a2)
{
  *(void *)this = &unk_1EDA49978;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 21) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = &unk_1EDA47700;
  *(_WORD *)(this + 48) = 2;
  return icu::CollationElementIterator::operator=(this, a2);
}

{
  *(void *)this = &unk_1EDA49978;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 21) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = &unk_1EDA47700;
  *(_WORD *)(this + 48) = 2;
  return icu::CollationElementIterator::operator=(this, a2);
}

uint64_t icu::CollationElementIterator::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = *(const void **)(a2 + 8);
  if (v4)
  {
    if (v5)
    {
      uint64_t v8 = v5;
      uint64_t v9 = icu::UMemory::operator new(v7, (icu::UMemory *)0x210, v6);
      if (!v9) {
        goto LABEL_22;
      }
      uint64_t v10 = v9;
      __int16 v11 = *(_WORD *)(a1 + 48);
      if ((v11 & 0x11) != 0)
      {
        uint64_t v12 = 0;
      }
      else if ((v11 & 2) != 0)
      {
        uint64_t v12 = a1 + 50;
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 64);
      }
      icu::FCDUTF16CollationIterator::FCDUTF16CollationIterator(v9, v8, v12);
    }
    else
    {
      if (!v13) {
        goto LABEL_22;
      }
      int v16 = v13;
      int32_t v17 = icu::UMemory::operator new(v15, (icu::UMemory *)0x1A0, v14);
      if (!v17) {
        goto LABEL_22;
      }
      uint64_t v10 = v17;
      __int16 v18 = *(_WORD *)(a1 + 48);
      if ((v18 & 0x11) != 0)
      {
        uint64_t v19 = 0;
      }
      else if ((v18 & 2) != 0)
      {
        uint64_t v19 = a1 + 50;
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + 64);
      }
      icu::UTF16CollationIterator::UTF16CollationIterator(v17, v16, v19);
    }
    uint64_t v20 = *(void *)(a1 + 8);
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v21;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
    icu::UnicodeString::operator=((UChar **)(a1 + 40), (UChar **)(a2 + 40));
  }
LABEL_22:
  if (*(char *)(a2 + 28) < 0)
  {
    uint64_t v23 = *(unsigned int **)(a2 + 32);
    if (v23)
    {
      uint64_t v24 = (uint64_t *)v23[2];
      if (v24)
      {
        UErrorCode v27 = U_ZERO_ERROR;
        int v25 = *(icu::UVector32 **)(a1 + 32);
        if (!v25)
        {
          int v26 = (icu::UVector32 *)icu::UMemory::operator new(v24, (icu::UMemory *)0x20, (unint64_t)v23);
          if (!v26)
          {
            *(void *)(a1 + 32) = 0;
            return a1;
          }
          int v25 = icu::UVector32::UVector32(v26, *(_DWORD *)(*(void *)(a2 + 32) + 8), &v27);
          *(void *)(a1 + 32) = v25;
          uint64_t v23 = *(unsigned int **)(a2 + 32);
        }
        icu::UVector32::assign(v25, (const icu::UVector32 *)v23, &v27);
      }
    }
  }
  return a1;
}

void icu::CollationElementIterator::~CollationElementIterator(icu::CollationElementIterator *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::UnicodeString::~UnicodeString((icu::CollationElementIterator *)((char *)this + 40));

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::CollationElementIterator::~CollationElementIterator(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::CollationElementIterator::getOffset(icu::CollationElementIterator *this)
{
  if ((*((char *)this + 28) & 0x80000000) == 0) {
    return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
  }
  uint64_t v2 = *((void *)this + 4);
  if (!v2) {
    return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
  }
  int v3 = *(_DWORD *)(v2 + 8);
  if (!v3) {
    return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
  }
  unsigned int v4 = *(_DWORD *)(*((void *)this + 1) + 24);
  if (*((_DWORD *)this + 6)) {
    ++v4;
  }
  if ((v4 & 0x80000000) != 0) {
    return 0;
  }
  if (v3 >= 1)
  {
    BOOL v7 = __OFSUB__(v3, v4);
    BOOL v5 = v3 == v4;
    BOOL v6 = (int)(v3 - v4) < 0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v5 = 1;
    BOOL v6 = 0;
  }
  if (v6 ^ v7 | v5) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(v2 + 24) + 4 * v4);
  }
}

uint64_t icu::CollationElementIterator::next(icu::CollationElementIterator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (*((char *)this + 28) < 2)
  {
    if (*((unsigned __int8 *)this + 28) >= 2u)
    {
      *a2 = U_INVALID_STATE_ERROR;
      return 0xFFFFFFFFLL;
    }
    *((unsigned char *)this + 28) = 2;
  }
  else
  {
    uint64_t result = *((unsigned int *)this + 6);
    if (result)
    {
      *((_DWORD *)this + 6) = 0;
      return result;
    }
  }
  unsigned int v4 = (icu::CollationIterator::CEBuffer *)*((void *)this + 1);
  if (*((_DWORD *)v4 + 92) == *((_DWORD *)v4 + 6))
  {
    *((_DWORD *)v4 + 6) = 0;
    *((_DWORD *)v4 + 92) = 0;
  }
  unint64_t v5 = sub_18C8DCA60(v4, a2);
  if (v5 == 0x101000100) {
    return 0xFFFFFFFFLL;
  }
  char v6 = v5;
  unsigned int v7 = (v5 >> 8) & 0xFF00 | (HIDWORD(v5) << 16);
  uint64_t result = HIDWORD(v5) & 0xFFFF0000 | WORD1(v5) & 0xFF00 | BYTE1(v5);
  unsigned int v8 = v7 & 0xFFFFFFC0 | v6 & 0x3F;
  if (v8) {
    *((_DWORD *)this + 6) = v8 | 0xC0;
  }
  return result;
}

unint64_t sub_18C8DCA60(icu::CollationIterator::CEBuffer *this, UErrorCode *a2)
{
  unsigned int v4 = (int *)((char *)this + 24);
  int v3 = *((_DWORD *)this + 6);
  uint64_t v5 = *((int *)this + 92);
  if ((int)v5 < v3)
  {
    *((_DWORD *)this + 92) = v5 + 1;
    return *(void *)(*((void *)this + 4) + 8 * v5);
  }
  if (v3 >= 40)
  {
    if (!icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator::CEBuffer *)((char *)this + 24), 1, a2))return 0x101000100; {
    int v3 = *v4;
    }
  }
  *((_DWORD *)this + 6) = v3 + 1;
  int v13 = 0;
  uint64_t v8 = (*(uint64_t (**)(icu::CollationIterator::CEBuffer *, int *, UErrorCode *))(*(void *)this + 64))(this, &v13, a2);
  int v9 = v8;
  if (v8 <= 0xBFu)
  {
LABEL_7:
    uint64_t v10 = *((int *)this + 92);
    *((_DWORD *)this + 92) = v10 + 1;
    unint64_t result = (v8 << 16) & 0xFF000000 | ((unint64_t)((v8 & 0xFFFF0000) >> 16) << 48) | (v9 << 8);
    *(void *)(*((void *)this + 4) + 8 * v10) = result;
    return result;
  }
  if (v8 == 192)
  {
    if (v13 < 0)
    {
      unint64_t result = 0x101000100;
      uint64_t v12 = *((int *)this + 92);
      *((_DWORD *)this + 92) = v12 + 1;
      goto LABEL_18;
    }
    __int16 v11 = *(uint64_t **)(*((void *)this + 2) + 32);
    uint64_t v8 = sub_18C8DD7F8(v11, v13);
    int v9 = v8;
    if (v8 <= 0xBFu) {
      goto LABEL_7;
    }
  }
  else
  {
    __int16 v11 = (uint64_t *)*((void *)this + 2);
  }
  if (v9 != 193) {
    return icu::CollationIterator::nextCEFromCE32(this, (const icu::CollationData *)v11, v13, v8, a2);
  }
  uint64_t v12 = *((int *)this + 92);
  *((_DWORD *)this + 92) = v12 + 1;
  unint64_t result = ((unint64_t)(v8 - 193) << 32) | 0x5000500;
LABEL_18:
  *(void *)(*((void *)this + 4) + 8 * v12) = result;
  return result;
}

uint64_t icu::CollationElementIterator::operator!=(uint64_t a1, uint64_t a2)
{
  return icu::CollationElementIterator::operator==(a1, a2) ^ 1;
}

uint64_t icu::CollationElementIterator::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  unsigned int v4 = *(icu::RuleBasedCollator **)(a1 + 16);
  uint64_t v5 = *(icu::RuleBasedCollator **)(a2 + 16);
  if (v4 != v5)
  {
    uint64_t result = icu::RuleBasedCollator::operator==(v4, v5);
    if (!result) {
      return result;
    }
  }
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
    return 0;
  }
  uint64_t result = 0;
  int v7 = *(unsigned __int8 *)(a1 + 28);
  if (v7 == 1) {
    int v7 = 0;
  }
  int v8 = *(unsigned __int8 *)(a2 + 28);
  if (v8 == 1) {
    int v8 = 0;
  }
  if (v7 != v8) {
    return result;
  }
  unsigned int v9 = *(unsigned __int16 *)(a1 + 48);
  if (v9)
  {
    if (*(_WORD *)(a2 + 48))
    {
LABEL_24:
      int v13 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
      return v13();
    }
    return 0;
  }
  if ((v9 & 0x8000) != 0) {
    int v10 = *(_DWORD *)(a1 + 52);
  }
  else {
    int v10 = v9 >> 5;
  }
  uint64_t result = 0;
  unsigned int v11 = *(unsigned __int16 *)(a2 + 48);
  if ((v11 & 0x8000u) == 0) {
    unsigned int v12 = v11 >> 5;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a2 + 52);
  }
  if ((v11 & 1) == 0 && v10 == v12)
  {
    uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 40), (const icu::UnicodeString *)(a2 + 40), v10);
    if (result) {
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t icu::CollationElementIterator::previous(icu::CollationElementIterator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *((char *)this + 28);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 6);
    if (v2)
    {
      *((_DWORD *)this + 6) = 0;
      return v2;
    }
  }
  else
  {
    if (*((unsigned char *)this + 28) != 1)
    {
      if (*((unsigned char *)this + 28))
      {
        UErrorCode v9 = U_INVALID_STATE_ERROR;
        goto LABEL_36;
      }
      uint64_t v7 = *((void *)this + 1);
      if (*((__int16 *)this + 24) < 0) {
        uint64_t v8 = *((unsigned int *)this + 13);
      }
      else {
        uint64_t v8 = *((unsigned __int16 *)this + 24) >> 5;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v8);
    }
    uint64_t v6 = 255;
    *((unsigned char *)this + 28) = -1;
  }
  int v10 = (icu::UVector32 *)*((void *)this + 4);
  if (v10) {
    goto LABEL_18;
  }
  unsigned int v11 = (icu::UVector32 *)icu::UMemory::operator new((uint64_t *)v6, (icu::UMemory *)0x20, (unint64_t)a2);
  if (v11)
  {
    int v10 = v11;
    *((void *)this + 4) = icu::UVector32::UVector32(v11, a2);
LABEL_18:
    unsigned int v12 = (icu::CollationIterator *)*((void *)this + 1);
    if (*((_DWORD *)v12 + 6))
    {
      int v13 = 0;
    }
    else
    {
      int v13 = (*(uint64_t (**)(icu::CollationIterator *))(*(void *)v12 + 40))(v12);
      unsigned int v12 = (icu::CollationIterator *)*((void *)this + 1);
      int v10 = (icu::UVector32 *)*((void *)this + 4);
    }
    unint64_t v14 = icu::CollationIterator::previousCE(v12, v10, a2);
    if (v14 == 0x101000100) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v2 = HIDWORD(v14) & 0xFFFF0000 | WORD1(v14) & 0xFF00 | BYTE1(v14);
    int v15 = (v14 >> 8) & 0xFF00 | (HIDWORD(v14) << 16) | v14 & 0x3F;
    if (!v15) {
      return v2;
    }
    uint64_t v16 = *((void *)this + 4);
    if (*(_DWORD *)(v16 + 8)) {
      goto LABEL_34;
    }
    int v17 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
    int v18 = *(_DWORD *)(v16 + 8);
    if (v18 < -1 || *(_DWORD *)(v16 + 12) <= v18)
    {
      if (!icu::UVector32::expandCapacity((icu::UVector32 *)v16, v18 + 1, a2)) {
        goto LABEL_29;
      }
      int v18 = *(_DWORD *)(v16 + 8);
    }
    *(_DWORD *)(*(void *)(v16 + 24) + 4 * v18) = v17;
    ++*(_DWORD *)(v16 + 8);
LABEL_29:
    uint64_t v19 = *((void *)this + 4);
    int v20 = *(_DWORD *)(v19 + 8);
    if (v20 >= -1 && *(_DWORD *)(v19 + 12) > v20) {
      goto LABEL_33;
    }
    if (icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 4), v20 + 1, a2))
    {
      int v20 = *(_DWORD *)(v19 + 8);
LABEL_33:
      *(_DWORD *)(*(void *)(v19 + 24) + 4 * v20) = v13;
      ++*(_DWORD *)(v19 + 8);
    }
LABEL_34:
    *((_DWORD *)this + 6) = v2;
    return v15 | 0xC0u;
  }
  *((void *)this + 4) = 0;
  UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
LABEL_36:
  *a2 = v9;
  return 0xFFFFFFFFLL;
}

uint64_t icu::CollationElementIterator::reset(icu::CollationElementIterator *this)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**((void **)this + 1) + 32))(*((void *)this + 1), 0);
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 28) = 0;
  return result;
}

unint64_t icu::CollationElementIterator::setOffset(unint64_t this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    if ((int)a2 < 1) {
      goto LABEL_29;
    }
    int v6 = *(__int16 *)(this + 48) < 0 ? *(_DWORD *)(this + 52) : *(unsigned __int16 *)(this + 48) >> 5;
    if (v6 <= (int)a2) {
      goto LABEL_29;
    }
    uint64_t v7 = a2;
    do
    {
      unsigned int v8 = *(unsigned __int16 *)(v4 + 48);
      if (*(__int16 *)(v4 + 48) < 0) {
        unsigned int v9 = *(_DWORD *)(v4 + 52);
      }
      else {
        unsigned int v9 = v8 >> 5;
      }
      if (v9 <= v7)
      {
        int v11 = 0xFFFF;
      }
      else
      {
        uint64_t v10 = v4 + 50;
        if ((v8 & 2) == 0) {
          uint64_t v10 = *(void *)(v4 + 64);
        }
        int v11 = *(unsigned __int16 *)(v10 + 2 * v7);
      }
      if (!icu::RuleBasedCollator::isUnsafe(*(icu::RuleBasedCollator **)(v4 + 16), v11)) {
        break;
      }
      unsigned int v12 = (uint64_t *)((unsigned __int16)v11 & 0xFC00);
      if (v12 == 55296)
      {
        int v13 = *(icu::RuleBasedCollator **)(v4 + 16);
        int v14 = icu::UnicodeString::char32At(v12, (icu::UnicodeString *)(v4 + 40), v7);
        if (!icu::RuleBasedCollator::isUnsafe(v13, v14)) {
          break;
        }
      }
      uint64_t v7 = (v7 - 1);
    }
    while (v7);
    if ((int)v7 >= (int)a2)
    {
LABEL_29:
      uint64_t v7 = a2;
LABEL_30:
      this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 8) + 32))(*(void *)(v4 + 8), v7);
      *(_DWORD *)(v4 + 24) = 0;
      *(unsigned char *)(v4 + 28) = 1;
    }
    else
    {
LABEL_21:
      (*(void (**)(void, uint64_t))(**(void **)(v4 + 8) + 32))(*(void *)(v4 + 8), v7);
      while (1)
      {
        this = sub_18C8DCA60(*(icu::CollationIterator::CEBuffer **)(v4 + 8), a3);
        if (*(int *)a3 > 0) {
          break;
        }
        int v15 = (*(uint64_t (**)(void))(**(void **)(v4 + 8) + 40))(*(void *)(v4 + 8));
        if (v15 != v7)
        {
          if (v15 <= (int)a2) {
            uint64_t v7 = v15;
          }
          else {
            uint64_t v7 = v7;
          }
          if (v15 < (int)a2) {
            goto LABEL_21;
          }
          goto LABEL_30;
        }
      }
    }
  }
  return this;
}

uint64_t *icu::CollationElementIterator::setText(uint64_t *this, UChar **a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return this;
  }
  uint64_t v4 = this;
  icu::UnicodeString::operator=((UChar **)this + 5, a2);
  __int16 v6 = *((_WORD *)v4 + 24);
  if ((v6 & 0x11) != 0)
  {
    uint64_t v7 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    uint64_t v7 = (uint64_t)v4 + 50;
  }
  else
  {
    uint64_t v7 = v4[8];
  }
  unsigned int v8 = (uint64_t *)*(unsigned int *)(*(void *)(v4[2] + 16) + 24);
  unsigned int v9 = (v8 >> 1) & 1;
  if (v8)
  {
    this = icu::UMemory::operator new(v8, (icu::UMemory *)0x210, v5);
    if (this)
    {
      uint64_t v10 = this;
      if ((__int16)v4[6] < 0) {
        int v13 = *((_DWORD *)v4 + 13);
      }
      else {
        int v13 = *((unsigned __int16 *)v4 + 24) >> 5;
      }
      sub_18C8DD888((uint64_t)this, *(void **)(v4[2] + 8), v9, v7, v7, v7 + 2 * v13);
      goto LABEL_19;
    }
LABEL_14:
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return this;
  }
  this = icu::UMemory::operator new(v8, (icu::UMemory *)0x1A0, v5);
  if (!this) {
    goto LABEL_14;
  }
  uint64_t v10 = this;
  int v11 = *(uint64_t **)(v4[2] + 8);
  if ((__int16)v4[6] < 0) {
    int v12 = *((_DWORD *)v4 + 13);
  }
  else {
    int v12 = *((unsigned __int16 *)v4 + 24) >> 5;
  }
  this[1] = *v11;
  this[2] = (uint64_t)v11;
  *((_DWORD *)this + 6) = 0;
  this[4] = (uint64_t)(this + 6);
  *((_DWORD *)this + 10) = 40;
  *((unsigned char *)this + 44) = 0;
  *((_DWORD *)this + 92) = 0;
  this[47] = 0;
  *((_DWORD *)this + 96) = -1;
  *((unsigned char *)this + 388) = v9;
  *this = (uint64_t)&unk_1EDA54650;
  this[49] = v7;
  this[50] = v7;
  this[51] = v7 + 2 * v12;
LABEL_19:
  this = (uint64_t *)v4[1];
  if (this) {
    this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  v4[1] = (uint64_t)v10;
  *((_DWORD *)v4 + 6) = 0;
  *((unsigned char *)v4 + 28) = 0;
  return this;
}

uint64_t *icu::CollationElementIterator::setText(uint64_t *this, icu::CharacterIterator *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    unint64_t v5 = (UChar **)(this + 5);
    (*(void (**)(icu::CharacterIterator *, uint64_t *))(*(void *)a2 + 208))(a2, this + 5);
    return icu::CollationElementIterator::setText(v4, v5, a3);
  }
  return this;
}

uint64_t icu::CollationElementIterator::strengthOrder(icu::CollationElementIterator *this, uint64_t a2)
{
  int v2 = *(int *)(*(void *)(*((void *)this + 2) + 16) + 24) >> 12;
  if (v2 == 1) {
    return a2 & 0xFFFFFF00;
  }
  if (!v2) {
    return a2 & 0xFFFF0000;
  }
  return a2;
}

icu::CollationElementIterator *icu::CollationElementIterator::CollationElementIterator(icu::CollationElementIterator *this, UChar **a2, const icu::RuleBasedCollator *a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA49978;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a3;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 28) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = &unk_1EDA47700;
  *((_WORD *)this + 24) = 2;
  icu::CollationElementIterator::setText((uint64_t *)this, a2, a4);
  return this;
}

{
  *(void *)this = &unk_1EDA49978;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a3;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 28) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = &unk_1EDA47700;
  *((_WORD *)this + 24) = 2;
  icu::CollationElementIterator::setText((uint64_t *)this, a2, a4);
  return this;
}

icu::CollationElementIterator *icu::CollationElementIterator::CollationElementIterator(icu::CollationElementIterator *this, const icu::CharacterIterator *a2, const icu::RuleBasedCollator *a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA49978;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a3;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 28) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = &unk_1EDA47700;
  *((_WORD *)this + 24) = 2;
  icu::CollationElementIterator::setText((uint64_t *)this, a2, a4);
  return this;
}

{
  *(void *)this = &unk_1EDA49978;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a3;
  *((_DWORD *)this + 6) = 0;
  *((unsigned char *)this + 28) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = &unk_1EDA47700;
  *((_WORD *)this + 24) = 2;
  icu::CollationElementIterator::setText((uint64_t *)this, a2, a4);
  return this;
}

int32x2_t *icu::CollationElementIterator::computeMaxExpansions(icu::CollationElementIterator *this, const icu::CollationData *a2, UErrorCode *a3)
{
  v15[41] = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  unint64_t v5 = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, (uint64_t)uhash_compareLong, (int *)a2);
  if (*(int *)a2 > 0) {
    return 0;
  }
  __int16 v6 = v5;
  v11[0] = &unk_1EDA499B8;
  v11[1] = v5;
  v11[2] = a2;
  sub_18C8DDA20((uint64_t)v12, 0, 0, (uint64_t)v11, 1);
  sub_18C8F5D08((uint64_t)v12, (uint64_t *)this, (int *)a2);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v15);
  icu::UnicodeSet::~UnicodeSet(v9, (icu::UnicodeSet *)&v14);
  icu::UnicodeSet::~UnicodeSet(v10, (icu::UnicodeSet *)&v13);
  if (*(int *)a2 >= 1)
  {
    uhash_close(v6);
    __int16 v6 = 0;
  }
  nullsub_17(v11);
  return v6;
}

uint64_t icu::CollationElementIterator::getMaxExpansion(icu::CollationElementIterator *this, unsigned int a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v3 = *(void *)(*(void *)(*((void *)this + 2) + 24) + 384);
  if (!v3 || (uint64_t result = uhash_igeti(v3, a2), !result))
  {
    if ((~a2 & 0xC0) != 0) {
      return 1;
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t icu::CollationElementIterator::getMaxExpansion(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 1;
  }
  if (!a1 || (uint64_t result = uhash_igeti(a1, a2), !result))
  {
    if ((~a2 & 0xC0) != 0) {
      return 1;
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t sub_18C8DD7F8(uint64_t *a1, unsigned int a2)
{
  int v2 = (uint64_t *)*a1;
  if (a2 >> 11 <= 0x1A)
  {
    uint64_t v3 = *v2;
    unsigned int v4 = a2 >> 5;
LABEL_12:
    int v6 = (a2 & 0x1F) + 4 * *(unsigned __int16 *)(v3 + 2 * v4);
    return *(unsigned int *)(*(void *)(*a1 + 16) + 4 * v6);
  }
  if (!HIWORD(a2))
  {
    uint64_t v3 = *v2;
    if (a2 >> 10 >= 0x37) {
      int v5 = 0;
    }
    else {
      int v5 = 320;
    }
    unsigned int v4 = v5 + (a2 >> 5);
    goto LABEL_12;
  }
  if (HIWORD(a2) <= 0x10u)
  {
    if (*((_DWORD *)v2 + 11) <= (signed int)a2)
    {
      int v6 = *((_DWORD *)v2 + 12);
      return *(unsigned int *)(*(void *)(*a1 + 16) + 4 * v6);
    }
    uint64_t v3 = *v2;
    unsigned int v4 = ((a2 >> 5) & 0x3F) + *(unsigned __int16 *)(v3 + 2 * ((a2 >> 11) + 2080));
    goto LABEL_12;
  }
  int v6 = 128;
  return *(unsigned int *)(*(void *)(*a1 + 16) + 4 * v6);
}

uint64_t sub_18C8DD888(uint64_t result, void *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(result + 8) = *a2;
  *(void *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = result + 48;
  *(_DWORD *)(result + 40) = 40;
  *(unsigned char *)(result + 44) = 0;
  *(_DWORD *)(result + 368) = 0;
  *(void *)(result + 376) = 0;
  *(_DWORD *)(result + 384) = -1;
  *(unsigned char *)(result + 388) = a3;
  *(void *)(result + 392) = a4;
  *(void *)(result + 400) = a5;
  *(void *)(result + 408) = a6;
  *(void *)(result + 416) = a4;
  *(void *)uint64_t result = &unk_1EDA546E0;
  *(void *)(result + 424) = a5;
  *(void *)(result + 432) = 0;
  *(void *)(result + 440) = a6;
  *(void *)(result + 448) = a2[6];
  *(void *)(result + 456) = &unk_1EDA47700;
  *(_WORD *)(result + 464) = 2;
  *(unsigned char *)(result + 520) = 1;
  return result;
}

void sub_18C8DD920(uint64_t a1)
{
  double v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C8DD94C(uint64_t result, uint64_t *a2, int a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = result;
    signed int v4 = 0;
    int v5 = a2;
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = *v5++;
      if ((v7 & 0xFFFF00FF003FLL) != 0) {
        int v8 = 2;
      }
      else {
        int v8 = 1;
      }
      v4 += v8;
      --v6;
    }
    while (v6);
    unsigned int v9 = a2[a3 - 1];
    int v10 = HIDWORD(a2[a3 - 1]);
    int v11 = (v9 >> 8) & 0xFF00 | (v10 << 16) | v9 & 0x3F;
    unsigned int v12 = v10 & 0xFFFF0000 | HIWORD(v9) & 0xFF00 | BYTE1(v9);
    if (v11) {
      unsigned int v13 = v11 | 0xC0;
    }
    else {
      unsigned int v13 = v12;
    }
    uint64_t result = uhash_igeti(*(void *)(result + 8), v13);
    if (v4 > (int)result)
    {
      uint64_t v14 = *(void *)(v3 + 8);
      int v15 = *(int **)(v3 + 16);
      return uhash_iputi(v14, v13, v4, v15);
    }
  }
  return result;
}

uint64_t sub_18C8DDA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(unsigned char *)(a1 + 32) = a5;
  *(unsigned char *)(a1 + 33) = 0;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 40));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 240));
  *(void *)(a1 + 440) = &unk_1EDA47700;
  *(_WORD *)(a1 + 448) = 2;
  *(void *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 760) = 0;
  return a1;
}

icu::RuleBasedCollator *icu::Collator::createInstance(icu::Collator *this, UErrorCode *a2)
{
  Default = icu::Locale::getDefault(this);

  return icu::Collator::createInstance((icu::Collator *)Default, this, v4);
}

icu::RuleBasedCollator *icu::Collator::createInstance(icu::Collator *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  if (*((unsigned char *)this + 216))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = 1;
    return v3;
  }
  uint64_t Instance = icu::Collator::makeInstance(this, a2, a3);
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t v3 = Instance;
  int v8 = (const char *)*((void *)this + 5);
  BaseName = (const char *)icu::Locale::getBaseName(this);
  if (!strcmp(v8, BaseName)) {
    goto LABEL_100;
  }
  memset(__s1, 0, 25);
  bzero(__dst, 0x400uLL);
  for (uint64_t i = (unsigned __int8 *)*((void *)this + 5); ; ++i)
  {
    int v11 = *i;
    if ((v11 | 0x40) == 0x40) {
      break;
    }
  }
  unsigned int v12 = (char *)(v11 == 64 ? i + 1 : i);
  int v13 = *v12;
  if (!*v12) {
    goto LABEL_100;
  }
  while (1)
  {
    while (1)
    {
      if (!v13) {
        goto LABEL_44;
      }
      if (v13 != 32) {
        break;
      }
      int v14 = *++v12;
      int v13 = v14;
    }
    int v15 = strchr(v12, 61);
    uint64_t v16 = strchr(v12, 59);
    if (!v15) {
      goto LABEL_97;
    }
    int v17 = v16;
    if (v16)
    {
      if (v16 < v15) {
        goto LABEL_97;
      }
    }
    uint64_t v18 = v15 - v12;
    if (v15 - v12 > 24) {
      break;
    }
    if (v18 < 1) {
      goto LABEL_97;
    }
    uint64_t v19 = 0;
    int v20 = 0;
    do
    {
      int v21 = v12[v19];
      if (v21 != 32) {
        __s1[v20++] = uprv_asciitolower((char)v21);
      }
      ++v19;
    }
    while (v18 > v19);
    if (!v20) {
      goto LABEL_97;
    }
    __s1[v20] = 0;
    int v22 = v17 - v15 + 1;
    do
    {
      int v24 = *++v15;
      int v23 = v24;
      --v22;
    }
    while (v24 == 32);
    if (!v23 || v15 == v17)
    {
LABEL_97:
      int v45 = 3;
      goto LABEL_99;
    }
    if (!v17)
    {
      uint64_t v29 = (int)strlen(v15) - 1;
      while (v29 != -1)
      {
        int v30 = v15[v29--];
        if (v30 != 32)
        {
          unsigned int v12 = 0;
          int v28 = v29 + 2;
          goto LABEL_42;
        }
      }
      unsigned int v12 = 0;
      int v28 = 0;
      goto LABEL_43;
    }
    uint64_t v26 = 0;
    do
      int v27 = v17[--v26];
    while (v27 == 32);
    int v28 = v22 + v26;
    unsigned int v12 = v17 + 1;
LABEL_42:
    if (v28 >= 1025) {
      break;
    }
LABEL_43:
    strncpy(__dst, v15, v28);
    __dst[v28] = 0;
LABEL_44:
    if (*(int *)a2 > 0) {
      goto LABEL_100;
    }
    if (*(void *)__s1 != 0x6F6974616C6C6F63 || *(unsigned __int16 *)&__s1[8] != 110)
    {
      BOOL v33 = *(void *)__s1 == 0x67617269686C6F63
         && *(void *)&__s1[8] == 0x6574617571616E61
         && *(void *)&__s1[14] == 0x7972616E726574;
      if (v33 || (*(void *)__s1 == 0x656C626169726176 ? (BOOL v34 = *(_DWORD *)&__s1[8] == 7368564) : (BOOL v34 = 0), v34))
      {
        int v45 = 16;
        goto LABEL_99;
      }
      for (uint64_t j = 0; j != 14; j += 2)
      {
        if (!strcmp(__s1, (&off_1E550A6E8)[j]))
        {
          uint64_t v38 = 0;
          while (uprv_stricmp(__dst, (unsigned __int8 *)(&off_1E550A758)[v38]))
          {
            v38 += 2;
            if (v38 == 22) {
              goto LABEL_98;
            }
          }
          (*(void (**)(icu::RuleBasedCollator *, void, void, const icu::Locale *))(*(void *)v3 + 184))(v3, LODWORD((&off_1E550A6E8)[j + 1]), LODWORD((&off_1E550A758)[v38 + 1]), a2);
          goto LABEL_75;
        }
      }
      if (*(void *)__s1 == 0x64726F65726C6F63 && *(void *)&__s1[3] == 0x726564726F6572)
      {
        bzero(v46, 0x334uLL);
        uint64_t v39 = 0;
        int v40 = __dst;
        while (v39 != 205)
        {
          for (uint64_t k = 0; ; ++k)
          {
            int v42 = v40[k];
            if (!v40[k] || v42 == 45) {
              break;
            }
          }
          v40[k] = 0;
          if (k == 4)
          {
            PropertyValueEnuuint64_t m = u_getPropertyValueEnum(UCHAR_SCRIPT, v40);
          }
          else
          {
            uint64_t v44 = 0;
            while (uprv_stricmp(v40, (unsigned __int8 *)off_1E550A808[v44]))
            {
              if (++v44 == 5) {
                goto LABEL_98;
              }
            }
            PropertyValueEnuuint64_t m = v44 + 4096;
          }
          if (PropertyValueEnum < 0) {
            break;
          }
          v46[v39] = PropertyValueEnum;
          v40 += k + 1;
          ++v39;
          if (!v42)
          {
            (*(void (**)(icu::RuleBasedCollator *, _DWORD *))(*(void *)v3 + 168))(v3, v46);
            goto LABEL_75;
          }
        }
        goto LABEL_98;
      }
      if (!(*(unsigned __int16 *)__s1 ^ 0x766B | __s1[2]))
      {
        uint64_t v37 = sub_18C8DEC48(__dst);
        if ((v37 & 0x80000000) == 0)
        {
          (*(void (**)(icu::RuleBasedCollator *, uint64_t, const icu::Locale *))(*(void *)v3 + 200))(v3, v37, a2);
          goto LABEL_75;
        }
LABEL_98:
        int v45 = 1;
        goto LABEL_99;
      }
LABEL_75:
      if (*(int *)a2 >= 1) {
        *(_DWORD *)a2 = 1;
      }
    }
    if (v12)
    {
      int v13 = *v12;
      if (*v12) {
        continue;
      }
    }
    goto LABEL_100;
  }
  int v45 = 5;
LABEL_99:
  *(_DWORD *)a2 = v45;
LABEL_100:
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(icu::RuleBasedCollator *))(*(void *)v3 + 8))(v3);
    return 0;
  }
  return v3;
}

icu::RuleBasedCollator *icu::Collator::makeInstance(icu::Collator *this, const icu::Locale *a2, UErrorCode *a3)
{
  signed int v4 = sub_18CA0B544((uint64_t)this, a2);
  uint64_t v6 = (const icu::CollationCacheEntry *)v4;
  uint64_t v7 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v7 <= 0)
  {
    unsigned int v9 = (icu::RuleBasedCollator *)icu::UMemory::operator new(v7, (icu::UMemory *)0x110, v5);
    if (v9)
    {
      int v8 = v9;
      icu::RuleBasedCollator::RuleBasedCollator(v9, v6);
      icu::SharedObject::removeRef((uint64_t)v6);
      return v8;
    }
    *(_DWORD *)a2 = 7;
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v4)
  {
LABEL_3:
    icu::SharedObject::removeRef((uint64_t)v6);
  }
  return 0;
}

uint64_t icu::Collator::safeClone(icu::Collator *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 40))();
}

uint64_t icu::Collator::compare(icu::Collator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  int v4 = 0;
  return (*(uint64_t (**)(icu::Collator *, const icu::UnicodeString *, const icu::UnicodeString *, int *))(*(void *)this + 56))(this, a2, a3, &v4);
}

uint64_t icu::Collator::compare(icu::Collator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, uint64_t a4)
{
  int v5 = 0;
  return (*(uint64_t (**)(icu::Collator *, const icu::UnicodeString *, const icu::UnicodeString *, uint64_t, int *))(*(void *)this + 72))(this, a2, a3, a4, &v5);
}

uint64_t icu::Collator::compare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, a3, a4, a5, &v6);
}

uint64_t icu::Collator::compare(icu::Collator *this, UCharIterator *a2, UCharIterator *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0) {
    *a4 = U_UNSUPPORTED_ERROR;
  }
  return 0;
}

uint64_t icu::Collator::compareUTF8(icu::Collator *this, const icu::StringPiece *a2, const icu::StringPiece *a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  memset(&iter, 0, sizeof(iter));
  memset(&v8, 0, sizeof(v8));
  uiter_setUTF8(&iter, *(const char **)a2, *((_DWORD *)a2 + 2));
  uiter_setUTF8(&v8, *(const char **)a3, *((_DWORD *)a3 + 2));
  return (*(uint64_t (**)(icu::Collator *, UCharIterator *, UCharIterator *, UErrorCode *))(*(void *)this + 96))(this, &iter, &v8, a4);
}

BOOL icu::Collator::equals(icu::Collator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  int v4 = 0;
  return (*(unsigned int (**)(icu::Collator *, const icu::UnicodeString *, const icu::UnicodeString *, int *))(*(void *)this + 56))(this, a2, a3, &v4) == 0;
}

BOOL icu::Collator::greaterOrEqual(icu::Collator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  int v4 = 0;
  return (*(unsigned int (**)(icu::Collator *, const icu::UnicodeString *, const icu::UnicodeString *, int *))(*(void *)this + 56))(this, a2, a3, &v4) != -1;
}

BOOL icu::Collator::greater(icu::Collator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  int v4 = 0;
  return (*(unsigned int (**)(icu::Collator *, const icu::UnicodeString *, const icu::UnicodeString *, int *))(*(void *)this + 56))(this, a2, a3, &v4) == 1;
}

uint64_t icu::Collator::getAvailableLocales(icu::Collator *this, int *a2)
{
  int v4 = 0;
  *(_DWORD *)this = 0;
  if (!sub_18C8DE438(&v4)) {
    return 0;
  }
  uint64_t result = qword_1E91920D0;
  *(_DWORD *)this = dword_1E91920D8;
  return result;
}

BOOL sub_18C8DE438(int *a1)
{
  if (*a1 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E91920E0, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E91920E0))
    {
      if (dword_1E91920E4 >= 1) {
        *a1 = dword_1E91920E4;
      }
    }
    else
    {
      sub_18C8DECA4(a1);
      dword_1E91920E4 = *a1;
      icu::umtx_initImplPostInit(&dword_1E91920E0);
    }
  }
  return *a1 < 1;
}

icu::UnicodeString *icu::Collator::getDisplayName(icu::Collator *this, const icu::Locale *a2, icu::UnicodeString *a3)
{
  Default = icu::Locale::getDefault(this);

  return icu::Locale::getDisplayName((char **)this, (char **)Default, a2);
}

void *icu::Collator::Collator(void *this)
{
  *this = &unk_1EDA49A00;
  return this;
}

void *icu::Collator::Collator(void *result)
{
  *uint64_t result = &unk_1EDA49A00;
  return result;
}

void *icu::Collator::Collator(void *this, const icu::Collator *a2)
{
  *this = &unk_1EDA49A00;
  return this;
}

BOOL icu::Collator::operator==(void *a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v2 = *(void *)(*a1 - 8);
  uint64_t v3 = *(void *)(*a2 - 8);

  return sub_18C828FD8(v2, v3);
}

uint64_t icu::Collator::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) ^ 1;
}

icu::UnicodeSet *icu::Collator::getTailoredSet(icu::Collator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t result = (icu::UnicodeSet *)icu::UMemory::operator new((icu::UMemory *)0xC8, (unint64_t)a2);
  if (result) {
    return (icu::UnicodeSet *)icu::UnicodeSet::UnicodeSet(result, 0, 1114111);
  }
  return result;
}

void sub_18C8DE658(icu::StringEnumeration *a1)
{
  icu::StringEnumeration::~StringEnumeration(a1);

  icu::UMemory::operator delete(v1);
}

void *sub_18C8DE680()
{
  return &unk_1E91920DC;
}

uint64_t *icu::Collator::getAvailableLocales(icu::Collator *this)
{
  int v4 = 0;
  if (!sub_18C8DE438(&v4)) {
    return 0;
  }
  uint64_t result = icu::UMemory::operator new(v2, (icu::UMemory *)0x78, v1);
  if (result)
  {
    uint64_t result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
    *uint64_t result = (uint64_t)&unk_1EDA49B60;
    *((_DWORD *)result + 29) = 0;
  }
  return result;
}

uint64_t *icu::Collator::getKeywords(icu::Collator *this, UErrorCode *a2)
{
  Keywords = (void **)ucol_getKeywords((int *)this);

  return icu::UStringEnumeration::fromUEnumeration(Keywords, this);
}

uint64_t *icu::Collator::getKeywordValues(icu::Collator *this, char *a2, UErrorCode *a3)
{
  KeywordValues = (void **)ucol_getKeywordValues((const char *)this, (int *)a2);

  return icu::UStringEnumeration::fromUEnumeration(KeywordValues, a2);
}

uint64_t *icu::Collator::getKeywordValuesForLocale(icu::Collator *this, char **a2, const icu::Locale *a3, int *a4, UErrorCode *a5)
{
  KeywordValuesForLocale = (void **)ucol_getKeywordValuesForLocale((uint64_t)this, a2[5], (uint64_t)a3, a4);

  return icu::UStringEnumeration::fromUEnumeration(KeywordValuesForLocale, a4);
}

icu::Locale *icu::Collator::getFunctionalEquivalent@<X0>(icu::Collator *this@<X0>, const char *a2@<X1>, const icu::Locale *a3@<X2>, signed __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(v9, 0, 157);
  ucol_getFunctionalEquivalent((uint64_t)v9, 157, (uint64_t)this, *((void *)a2 + 5), (uint64_t)a3, (int *)a4);
  if (*(int *)a4 >= 1) {
    LOBYTE(v9[0]) = 0;
  }
  return icu::Locale::createFromName((icu::Locale *)v9, a5);
}

uint64_t icu::Collator::getStrength(icu::Collator *this)
{
  int v2 = 0;
  return (*(uint64_t (**)(icu::Collator *, uint64_t, int *))(*(void *)this + 192))(this, 5, &v2);
}

uint64_t icu::Collator::setStrength(uint64_t a1, uint64_t a2)
{
  int v3 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 184))(a1, 5, a2, &v3);
}

void icu::Collator::setMaxVariable(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    *a3 = 16;
  }
}

uint64_t icu::Collator::getMaxVariable(icu::Collator *this)
{
  return 4097;
}

uint64_t icu::Collator::getReorderCodes(icu::Collator *this, int *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0) {
    *a4 = U_UNSUPPORTED_ERROR;
  }
  return 0;
}

void icu::Collator::setReorderCodes(icu::Collator *this, const int *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0) {
    *a4 = U_UNSUPPORTED_ERROR;
  }
}

uint64_t icu::Collator::getEquivalentReorderCodes(icu::Collator *this, UErrorCode *a2, int *a3, icu::CollationRoot *a4, UErrorCode *a5)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  int v6 = (int)a3;
  if ((a3 & 0x80000000) != 0 || (unsigned int v8 = this, !a2) && a3)
  {
    *(_DWORD *)a4 = 1;
    return 0;
  }
  Data = (icu::CollationData *)icu::CollationRoot::getData(a4, a2);
  if (*(int *)a4 > 0) {
    return 0;
  }

  return icu::CollationData::getEquivalentScripts(Data, v8, (unsigned int *)a2, v6, (UErrorCode *)a4);
}

uint64_t icu::Collator::internalGetShortDefinitionString(icu::Collator *this, const char *a2, char *a3, int a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0) {
    *a5 = U_UNSUPPORTED_ERROR;
  }
  return 0;
}

uint64_t icu::Collator::internalCompareUTF8(icu::Collator *this, const char *__s, int a3, const char *a4, int a5, UErrorCode *a6)
{
  if (*(int *)a6 > 0) {
    return 0;
  }
  int v8 = a5;
  if ((__s || !a3) && (a4 || !a5))
  {
    if (a3 < 0) {
      a3 = strlen(__s);
    }
    int v14 = __s;
    int v15 = a3;
    if (v8 < 0) {
      int v8 = strlen(a4);
    }
    unsigned int v12 = a4;
    int v13 = v8;
    return (*(uint64_t (**)(icu::Collator *, const char **, const char **, UErrorCode *))(*(void *)this
                                                                                                  + 104))(this, &v14, &v12, a6);
  }
  else
  {
    uint64_t result = 0;
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return result;
}

uint64_t icu::Collator::internalNextSortKeyPart(icu::Collator *this, UCharIterator *a2, unsigned int *a3, unsigned __int8 *a4, int a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0) {
    *a6 = U_UNSUPPORTED_ERROR;
  }
  return 0;
}

uint64_t *sub_18C8DEAF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x78, a2);
  if (result)
  {
    uint64_t result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
    *uint64_t result = (uint64_t)&unk_1EDA49B60;
    *((_DWORD *)result + 29) = 0;
    *((_DWORD *)result + 29) = *(_DWORD *)(a1 + 116);
  }
  return result;
}

uint64_t sub_18C8DEB50()
{
  return dword_1E91920D8;
}

uint64_t sub_18C8DEB5C(uint64_t a1, _DWORD *a2)
{
  int v3 = *(_DWORD *)(a1 + 116);
  if (v3 >= dword_1E91920D8)
  {
    uint64_t v6 = 0;
    if (a2)
    {
      int v7 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = qword_1E91920D0;
    *(_DWORD *)(a1 + 116) = v3 + 1;
    uint64_t v5 = v4 + 224 * v3;
    uint64_t v6 = *(void *)(v5 + 40);
    if (a2)
    {
      int v7 = strlen(*(const char **)(v5 + 40));
LABEL_6:
      *a2 = v7;
    }
  }
  return v6;
}

char *sub_18C8DEBD0(icu::StringEnumeration *a1, UErrorCode *a2)
{
  int v6 = 0;
  uint64_t v4 = (const char *)(*(uint64_t (**)(icu::StringEnumeration *, int *, UErrorCode *))(*(void *)a1 + 40))(a1, &v6, a2);
  return icu::StringEnumeration::setChars(a1, v4, v6, a2);
}

uint64_t sub_18C8DEC40(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18C8DEC48(unsigned char *a1)
{
  uint64_t v2 = 0;
  while (uprv_stricmp(a1, (unsigned __int8 *)off_1E550A808[v2]))
  {
    if (++v2 == 5) {
      return 0xFFFFFFFFLL;
    }
  }
  return (v2 + 4096);
}

void sub_18C8DECA4(int *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v14);
  uint64_t v2 = ures_openDirect((uint64_t)"icudt74l-coll", (uint64_t)"res_index", (uint64_t)a1);
  ures_getByKey(v2, "InstalledLocales", (uint64_t)v14, a1);
  if (*a1 <= 0)
  {
    int Size = ures_getSize((uint64_t)v14);
    dword_1E91920D8 = Size;
    uint64_t v5 = Size;
    if (is_mul_ok(Size, 0xE0uLL)) {
      uint64_t v6 = (224 * Size) | 0x10;
    }
    else {
      uint64_t v6 = -1;
    }
    int v7 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v6, v4);
    if (v7)
    {
      *int v7 = 224;
      v7[1] = v5;
      uint64_t v8 = (uint64_t)(v7 + 2);
      if (v5)
      {
        uint64_t v9 = 224 * v5;
        uint64_t v10 = (icu::Locale *)(v7 + 2);
        do
        {
          uint64_t v10 = (icu::Locale *)(icu::Locale::Locale(v10) + 224);
          v9 -= 224;
        }
        while (v9);
      }
      qword_1E91920D0 = v8;
      ures_resetIterator((uint64_t)v14);
      if (ures_hasNext((BOOL)v14))
      {
        uint64_t v11 = 0;
        do
        {
          unsigned int v12 = 0;
          ures_getNextString((uint64_t)v14, 0, &v12, (UErrorCode *)a1);
          icu::Locale::Locale((icu::Locale *)v13, v12, 0, 0, 0);
          icu::Locale::operator=(qword_1E91920D0 + v11, (uint64_t)v13);
          icu::Locale::~Locale((icu::Locale *)v13);
          v11 += 224;
        }
        while (ures_hasNext((BOOL)v14));
      }
    }
    else
    {
      qword_1E91920D0 = 0;
    }
  }
  ures_close(v2);
  sub_18CA0A25C(0x1Bu, (uint64_t)sub_18C8DEE7C);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v14);
}

uint64_t sub_18C8DEE7C()
{
  if (qword_1E91920D0)
  {
    v0 = (void *)(qword_1E91920D0 - 16);
    uint64_t v1 = *(void *)(qword_1E91920D0 - 8);
    if (v1)
    {
      uint64_t v2 = 224 * v1;
      uint64_t v3 = qword_1E91920D0 - 224;
      do
      {
        icu::Locale::~Locale((icu::Locale *)(v3 + v2));
        v2 -= 224;
      }
      while (v2);
    }
    icu::UMemory::operator delete[](v0);
    qword_1E91920D0 = 0;
  }
  dword_1E91920D8 = 0;
  atomic_store(0, &dword_1E91920E0);
  return 1;
}

uint64_t icu::Collation::incTwoBytePrimaryByOffset(icu::Collation *this, int a2, int a3)
{
  int v3 = BYTE2(this) + a3;
  int v4 = (v3 - 2) / 254;
  int v5 = (v3 - 2) % 254;
  v3 -= 4;
  int v6 = v3 / 251;
  int v7 = v3 % 251;
  if (a2)
  {
    int v8 = 0x40000;
  }
  else
  {
    int v7 = v5;
    int v8 = 0x20000;
  }
  if (a2) {
    int v4 = v6;
  }
  return ((this & 0xFF000000) + (v4 << 24)) | (v8 + (v7 << 16));
}

uint64_t icu::Collation::incThreeBytePrimaryByOffset(icu::Collation *this, int a2, int a3)
{
  int v3 = a3 + BYTE1(this) - 2;
  int v4 = BYTE2(this) + v3 / 254;
  int v5 = (v4 - 2) / 254;
  int v6 = (v4 - 2) % 254;
  v4 -= 4;
  int v7 = v4 / 251;
  int v8 = v4 % 251;
  if (a2)
  {
    int v9 = 0x40000;
  }
  else
  {
    int v8 = v6;
    int v9 = 0x20000;
  }
  if (a2) {
    int v5 = v7;
  }
  return (v9 + (v8 << 16)) | (((v3 % 254) << 8) + 512) | ((this & 0xFF000000) + (v5 << 24));
}

uint64_t icu::Collation::decTwoBytePrimaryByOneStep(icu::Collation *this, int a2, int a3)
{
  int v3 = BYTE2(this) - a3;
  int v4 = v3 + 254;
  int v5 = this - 0x1000000;
  if (v3 <= 1) {
    int v6 = this - 0x1000000;
  }
  else {
    int v6 = (int)this;
  }
  if (v3 > 1) {
    int v4 = BYTE2(this) - a3;
  }
  if (v3 <= 3) {
    v3 += 251;
  }
  else {
    int v5 = (int)this;
  }
  if (!a2)
  {
    int v5 = v6;
    int v3 = v4;
  }
  return v5 & 0xFF000000 | (v3 << 16);
}

uint64_t icu::Collation::decThreeBytePrimaryByOneStep(icu::Collation *this, int a2, int a3)
{
  int v3 = BYTE1(this) - a3;
  int v4 = BYTE2(this) - 1;
  if (BYTE2(this) >= 3u) {
    int v5 = (int)this;
  }
  else {
    int v5 = this - 0x1000000;
  }
  if (BYTE2(this) >= 3u) {
    int v6 = BYTE2(this) - 1;
  }
  else {
    int v6 = 255;
  }
  if (BYTE2(this) >= 5u) {
    int v7 = (int)this;
  }
  else {
    int v7 = this - 0x1000000;
  }
  if (BYTE2(this) < 5u) {
    int v4 = 254;
  }
  if (!a2)
  {
    int v7 = v5;
    int v4 = v6;
  }
  unsigned int v8 = v7 & 0xFF000000 | ((v3 << 8) + 65024) | (v4 << 16);
  if (v3 >= 2) {
    return this & 0xFFFF0000 | (v3 << 8);
  }
  else {
    return v8;
  }
}

uint64_t icu::Collation::getThreeBytePrimaryForOffsetData(icu::Collation *this, unint64_t a2)
{
  return icu::Collation::incThreeBytePrimaryByOffset((icu::Collation *)HIDWORD(a2), (a2 >> 7) & 1, (this - ((int)a2 >> 8)) * (a2 & 0x7F));
}

uint64_t icu::Collation::unassignedPrimaryFromCodePoint(icu::Collation *this)
{
  return (14 * (((int)this + 1) % 18) + 2) | (((((int)this + 1) / 18 % 254) << 8) + 512) | (((((int)this + 1) / 4572
                                                                                            % 251) << 16)
                                                                                          + 0x40000) | 0xFE000000;
}

icu::RuleBasedCollator *icu::RuleBasedCollator::RuleBasedCollator(icu::RuleBasedCollator *this)
{
  uint64_t v2 = icu::Collator::Collator(this);
  void *v2 = &unk_1EDA522E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  icu::Locale::Locale((icu::Locale *)(v2 + 5), "", 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  *((unsigned char *)this + 268) = 0;
  return this;
}

icu::RuleBasedCollator *icu::RuleBasedCollator::RuleBasedCollator(icu::RuleBasedCollator *this, UErrorCode *a2, UErrorCode *a3)
{
  int v6 = icu::Collator::Collator(this);
  *int v6 = &unk_1EDA522E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  icu::Locale::Locale((icu::Locale *)(v6 + 5), "", 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  *((unsigned char *)this + 268) = 0;
  icu::RuleBasedCollator::internalBuildTailoring(this, a2, 0xFFFFFFFF, 0xFFFFFFFF, 0, 0, (icu::CollationRoot *)a3);
  return this;
}

void icu::RuleBasedCollator::internalBuildTailoring(icu::RuleBasedCollator *a1, UErrorCode *a2, unsigned int a3, unsigned int a4, UParseError *a5, icu::UnicodeString *a6, icu::CollationRoot *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t Root = icu::CollationRoot::getRoot(this, a2);
  if (*(int *)this <= 0)
  {
    uint64_t v15 = (UErrorCode *)Root;
    if (a6)
    {
      if (*((_WORD *)a6 + 4)) {
        __int16 v16 = 2;
      }
      else {
        __int16 v16 = *((_WORD *)a6 + 4) & 0x1F;
      }
      *((_WORD *)a6 + 4) = v16;
    }
    bzero(v22, 0x268uLL);
    icu::CollationBuilder::CollationBuilder((icu::CollationBuilder *)v22, v15, 0, (UErrorCode *)this);
    *(_DWORD *)int v21 = 0;
    int v20 = &unk_1EDA49C90;
    int v17 = icu::CollationBuilder::parseAndBuild((icu::CollationBuilder *)v22, (const icu::UnicodeString *)a2, v21, (icu::CollationRuleParser::Importer *)&v20, a5, (UErrorCode *)this);
    uint64_t v18 = (icu::CollationTailoring *)v17;
    if (*(int *)this < 1)
    {
      icu::Locale::setToBogus((icu::Locale *)(v17 + 13));
      icu::RuleBasedCollator::adoptTailoring(a1, v18, (UErrorCode *)this);
      if (a3 != -1) {
        icu::RuleBasedCollator::setAttribute((uint64_t)a1, 5, a3, (int *)this);
      }
      if (a4 != -1) {
        icu::RuleBasedCollator::setAttribute((uint64_t)a1, 4, a4, (int *)this);
      }
    }
    else
    {
      if (a6 && v23)
      {
        icu::UnicodeString::UnicodeString(v24, v23, 0xFFFFFFFFLL, 0);
        icu::UnicodeString::operator=(a6, (icu::UnicodeString *)v24);
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v24);
      }
      if (v18) {
        (*(void (**)(icu::CollationTailoring *))(*(void *)v18 + 8))(v18);
      }
    }
    icu::CollationRuleParser::Importer::~Importer((icu::CollationRuleParser::Importer *)&v20);
    icu::CollationBuilder::~CollationBuilder((icu::CollationBuilder *)v22);
  }
}

uint64_t icu::RuleBasedCollator::RuleBasedCollator(uint64_t a1, UErrorCode *a2, unsigned int a3, icu::CollationRoot *a4)
{
  unsigned int v8 = icu::Collator::Collator((void *)a1);
  *unsigned int v8 = &unk_1EDA522E0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  icu::Locale::Locale((icu::Locale *)(v8 + 5), "", 0, 0, 0);
  *(_DWORD *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 268) = 0;
  icu::RuleBasedCollator::internalBuildTailoring((icu::RuleBasedCollator *)a1, a2, a3, 0xFFFFFFFF, 0, 0, a4);
  return a1;
}

{
  void *v8;

  unsigned int v8 = icu::Collator::Collator((void *)a1);
  *unsigned int v8 = &unk_1EDA522E0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  icu::Locale::Locale((icu::Locale *)(v8 + 5), "", 0, 0, 0);
  *(_DWORD *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 268) = 0;
  icu::RuleBasedCollator::internalBuildTailoring((icu::RuleBasedCollator *)a1, a2, 0xFFFFFFFF, a3, 0, 0, a4);
  return a1;
}

uint64_t icu::RuleBasedCollator::RuleBasedCollator(uint64_t a1, UErrorCode *a2, unsigned int a3, unsigned int a4, icu::CollationRoot *a5)
{
  uint64_t v10 = icu::Collator::Collator((void *)a1);
  *uint64_t v10 = &unk_1EDA522E0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  icu::Locale::Locale((icu::Locale *)(v10 + 5), "", 0, 0, 0);
  *(_DWORD *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 268) = 0;
  icu::RuleBasedCollator::internalBuildTailoring((icu::RuleBasedCollator *)a1, a2, a3, a4, 0, 0, a5);
  return a1;
}

icu::RuleBasedCollator *icu::RuleBasedCollator::RuleBasedCollator(icu::RuleBasedCollator *this, UErrorCode *a2, UParseError *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  uint64_t v10 = icu::Collator::Collator(this);
  *uint64_t v10 = &unk_1EDA522E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  icu::Locale::Locale((icu::Locale *)(v10 + 5), "", 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  *((unsigned char *)this + 268) = 0;
  icu::RuleBasedCollator::internalBuildTailoring(this, a2, 0xFFFFFFFF, 0xFFFFFFFF, a3, a4, (icu::CollationRoot *)a5);
  return this;
}

icu::CollationBuilder *icu::CollationBuilder::CollationBuilder(icu::CollationBuilder *this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::CollationBuilder::CollationBuilder(this, a2, 0, a3);
}

{
  return icu::CollationBuilder::CollationBuilder(this, a2, 0, a3);
}

atomic_uint **icu::CollationBuilder::parseAndBuild(icu::CollationBuilder *this, const icu::UnicodeString *a2, const unsigned __int8 *a3, icu::CollationRuleParser::Importer *a4, UParseError *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    uint64_t v10 = *(uint64_t **)(*((void *)this + 5) + 128);
    if (!v10)
    {
      int v6 = 0;
      *a6 = U_MISSING_RESOURCE_ERROR;
      *((void *)this + 36) = "missing root elements data, tailoring not supported";
      return v6;
    }
    uint64_t v15 = (icu::CollationTailoring *)icu::UMemory::operator new(v10, (icu::UMemory *)0x190, (unint64_t)a2);
    __int16 v16 = (atomic_uint **)v15;
    if (!v15
      || (icu::CollationTailoring::CollationTailoring(v15, *(const icu::CollationSettings **)(*((void *)this + 4) + 32)), !v16[4]))
    {
      int v6 = 0;
      *a6 = U_MEMORY_ALLOCATION_ERROR;
      if (!v16) {
        return v6;
      }
LABEL_13:
      (*((void (**)(atomic_uint **))*v16 + 1))(v16);
      return v6;
    }
    long long v21 = 0u;
    long long v22 = 0u;
    memset(v20, 0, sizeof(v20));
    icu::CollationRuleParser::CollationRuleParser((icu::CollationRuleParser *)v20, *((UErrorCode **)this + 5), a6);
    if (*(int *)a6 > 0) {
      goto LABEL_9;
    }
    *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)(*((void *)this + 4) + 32) + 28);
    *((void *)&v21 + 1) = this;
    *(void *)&long long v22 = a4;
    int v17 = sub_18C8DFC68(v16 + 4);
    icu::CollationRuleParser::parse(v20, a2, (icu::CollationSettings *)v17, a5, a6);
    *((void *)this + 36) = v21;
    if (*(int *)a6 > 0) {
      goto LABEL_9;
    }
    if (*(unsigned char *)(*((void *)this + 9) + 616))
    {
      icu::CollationBuilder::makeTailoredCEs(this, a6);
      if (!*((unsigned char *)this + 81)) {
        icu::CollationBuilder::closeOverComposites(this, a6);
      }
      icu::CollationBuilder::finalizeCEs(this, a6);
      if (!*((unsigned char *)this + 81))
      {
        icu::UnicodeSet::add((icu::CollationBuilder *)((char *)this + 88), 0, 0x7Fu);
        icu::UnicodeSet::add((icu::CollationBuilder *)((char *)this + 88), 0xC0u, 0xFFu);
        icu::UnicodeSet::remove((icu::CollationBuilder *)((char *)this + 88), 0xAC00u, 0xD7A3u);
        icu::CollationDataBuilder::optimize(*((icu::CollationDataBuilder **)this + 9), (icu::CollationBuilder *)((char *)this + 88), a6);
      }
      icu::CollationTailoring::ensureOwnedData((icu::CollationTailoring *)v16, a6);
      if (*(int *)a6 > 0) {
        goto LABEL_9;
      }
      uint64_t v19 = (unsigned char *)*((void *)this + 9);
      if (*((unsigned char *)this + 80)) {
        v19[618] = 1;
      }
      (*(void (**)(unsigned char *, atomic_uint *, UErrorCode *))(*(void *)v19 + 40))(v19, v16[42], a6);
      v16[43] = (atomic_uint *)*((void *)this + 9);
      *((void *)this + 9) = 0;
      if (*(int *)a6 > 0)
      {
LABEL_9:
        uint64_t v18 = v16;
        __int16 v16 = 0;
        goto LABEL_10;
      }
    }
    else
    {
      v16[3] = (atomic_uint *)*((void *)this + 5);
    }
    v17[20] = icu::CollationFastLatin::getOptions((icu::CollationFastLatin *)v16[3], (const icu::CollationData *)v17, (const icu::CollationSettings *)(v17 + 21), (unsigned __int16 *)0x180);
    icu::UnicodeString::operator=((UChar **)v16 + 5, (UChar **)a2);
    icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(v16 + 5));
    icu::CollationTailoring::setVersion(v16, (const unsigned __int8 *)(*((void *)this + 4) + 328), a3);
    uint64_t v18 = 0;
LABEL_10:
    int v6 = v16;
    icu::CollationRuleParser::~CollationRuleParser((icu::CollationRuleParser *)v20);
    __int16 v16 = v18;
    if (!v18) {
      return v6;
    }
    goto LABEL_13;
  }
  return 0;
}

icu::CollationBuilder *icu::CollationBuilder::CollationBuilder(icu::CollationBuilder *this, UErrorCode *a2, signed __int8 a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA49BE0;
  *((void *)this + 1) = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a4, a2);
  *((void *)this + 2) = icu::Normalizer2Factory::getFCDInstance((icu::Normalizer2Factory *)a4, v8);
  *((void *)this + 3) = icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a4, v9);
  *((void *)this + 4) = a2;
  uint64_t v10 = *((void *)a2 + 3);
  uint64_t v11 = *(void *)(v10 + 128);
  int v12 = *(_DWORD *)(v10 + 136);
  *((void *)this + 5) = v10;
  *((void *)this + 6) = v11;
  *((_DWORD *)this + 14) = v12;
  *((_DWORD *)this + 16) = 0;
  int v14 = (icu::CollationDataBuilder *)icu::UMemory::operator new((uint64_t *)v10, (icu::UMemory *)0x280, v13);
  if (v14) {
    int v14 = (icu::CollationDataBuilder *)icu::CollationDataBuilder::CollationDataBuilder(v14, a3, a4);
  }
  *((void *)this + 9) = v14;
  *((unsigned char *)this + 80) = 1;
  *((unsigned char *)this + 81) = a3;
  icu::UnicodeSet::UnicodeSet((icu::CollationBuilder *)((char *)this + 88));
  *((void *)this + 36) = 0;
  *((_DWORD *)this + 136) = 0;
  icu::UVector32::UVector32((icu::CollationBuilder *)((char *)this + 552), a4);
  icu::UVector64::UVector64((icu::CollationBuilder *)((char *)this + 584), a4);
  icu::Normalizer2Impl::ensureCanonIterData(*((icu::Normalizer2Impl **)this + 3), a4);
  if (*(int *)a4 >= 1)
  {
    uint64_t v15 = "CollationBuilder fields initialization failed";
LABEL_5:
    *((void *)this + 36) = v15;
    return this;
  }
  int v17 = (icu::UnicodeSet *)*((void *)this + 9);
  if (!v17)
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    return this;
  }
  icu::CollationDataBuilder::initForTailoring(v17, *((const icu::CollationData **)this + 5), a4);
  if (*(int *)a4 >= 1)
  {
    uint64_t v15 = "CollationBuilder initialization failed";
    goto LABEL_5;
  }
  return this;
}

void icu::CollationBuilder::~CollationBuilder(icu::CollationBuilder *this)
{
  *(void *)this = &unk_1EDA49BE0;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  icu::UVector64::~UVector64((void **)this + 73);
  icu::UVector32::~UVector32((void **)this + 69);
  icu::UnicodeSet::~UnicodeSet(v3, (icu::CollationBuilder *)((char *)this + 88));

  icu::CollationRuleParser::Sink::~Sink(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::CollationBuilder::~CollationBuilder(this);

  icu::UMemory::operator delete(v1);
}

atomic_uint *sub_18C8DFC68(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if ((int)icu::SharedObject::getRefCount(*a1) >= 2)
  {
    int v5 = (icu::CollationSettings *)icu::UMemory::operator new(v4, (icu::UMemory *)0x358, v3);
    if (v5)
    {
      uint64_t v6 = (uint64_t)v5;
      icu::CollationSettings::CollationSettings(v5, (const icu::CollationSettings *)v2);
      icu::SharedObject::removeRef((uint64_t)v2);
      *a1 = (atomic_uint *)v6;
      icu::SharedObject::addRef(v6);
      return (atomic_uint *)v6;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void icu::CollationBuilder::makeTailoredCEs(icu::CollationBuilder *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return;
  }
  int v47 = 0;
  memset(v46, 0, sizeof(v46));
  icu::CollationWeights::CollationWeights((icu::CollationWeights *)v46);
  int v45 = 0;
  memset(v44, 0, sizeof(v44));
  icu::CollationWeights::CollationWeights((icu::CollationWeights *)v44);
  int v43 = 0;
  memset(v42, 0, sizeof(v42));
  icu::CollationWeights::CollationWeights((icu::CollationWeights *)v42);
  if (*((int *)this + 140) < 1) {
    return;
  }
  uint64_t v3 = 0;
  long long v41 = (icu::CollationBuilder *)((char *)this + 48);
  uint64_t v4 = *((void *)this + 76);
  uint64_t v37 = this;
  while (1)
  {
    unint64_t v5 = *(void *)(v4 + 8 * *(int *)(*((void *)this + 72) + 4 * v3));
    unint64_t Weight = HIDWORD(v5);
    LODWORD(v7) = HIDWORD(v5) ? 1280 : 0;
    uint64_t v39 = v3;
    unsigned int v40 = HIDWORD(v5) ? icu::CollationRootElements::findPrimary(v41, HIDWORD(v5)) : 0;
    uint64_t v8 = (v5 >> 8) & 0xFFFFF;
    if (v8) {
      break;
    }
LABEL_77:
    uint64_t v3 = v39 + 1;
    if (v39 + 1 >= *((int *)this + 140)) {
      return;
    }
  }
  int v9 = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  int v12 = 0;
  LODWORD(v13) = v7;
  while (1)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v8);
    uint64_t v15 = (v14 >> 8) & 0xFFFFF;
    uint64_t v16 = v14 & 3;
    if (v16 == 1)
    {
      if ((v14 & 8) == 0)
      {
        int v10 = 0;
        unint64_t v13 = HIWORD(v14);
        goto LABEL_66;
      }
      if (v10)
      {
LABEL_65:
        LODWORD(v13) = icu::CollationWeights::nextWeight((icu::CollationWeights *)v44);
        int v10 = 1;
LABEL_66:
        int v12 = 0;
        int v9 = 0;
        if (v13) {
          LODWORD(v7) = 1280;
        }
        else {
          LODWORD(v7) = 0;
        }
        if ((v14 & 8) == 0) {
          goto LABEL_71;
        }
LABEL_70:
        *(void *)(v4 + 8 * v8) = (v13 << 16) | (Weight << 32) | v7 | (unint64_t)(v12 << 6);
        goto LABEL_71;
      }
      uint64_t v23 = v11;
      int v24 = 0;
      if (v15)
      {
        unint64_t v25 = (v14 >> 8) & 0xFFFFF;
        do
        {
          uint64_t v26 = *(void *)(v4 + 8 * v25);
          if ((v26 & 3) == 1)
          {
            if ((v26 & 8) == 0) {
              break;
            }
            ++v24;
          }
          else if ((v26 & 3) == 0)
          {
            break;
          }
          unint64_t v25 = ((unint64_t)v26 >> 8) & 0xFFFFF;
        }
        while (v25);
      }
      if (v13)
      {
        if (v23)
        {
          if (v13 == 256)
          {
            LODWORD(v13) = 256;
            SecondaryAfteunint64_t r = 1280;
            goto LABEL_64;
          }
          SecondaryAfteunint64_t r = (*(_DWORD *)(*(void *)v41 + 16) >> 8) & 0xFF00;
        }
        else
        {
          SecondaryAfteunint64_t r = icu::CollationRootElements::getSecondaryAfter(v41, v40, v13);
        }
      }
      else
      {
        LODWORD(v13) = ((*(_DWORD *)(*(void *)v41 + 16) >> 8) & 0xFF00) - 256;
        SecondaryAfteunint64_t r = *(unsigned __int16 *)(*(void *)v41 + 4 * *(unsigned int *)(*(void *)v41 + 4) + 2);
      }
      if (v13 == 1280) {
        LODWORD(v13) = *(unsigned __int8 *)(*(void *)v41 + 19) << 8;
      }
LABEL_64:
      icu::CollationWeights::initForSecondary((icu::CollationWeights *)v44);
      BOOL v32 = icu::CollationWeights::allocWeights((icu::CollationWeights *)v44, v13, SecondaryAfter, v24 + 1);
      uint64_t v11 = v23;
      if (!v32)
      {
        uint64_t v35 = "secondary tailoring gap too small";
        goto LABEL_83;
      }
      goto LABEL_65;
    }
    if (v16 == 2) {
      break;
    }
    if (v16 == 3)
    {
      if (v12 == 3)
      {
        BOOL v34 = a2;
        uint64_t v35 = "quaternary tailoring gap too small";
        goto LABEL_84;
      }
      ++v12;
      if ((v14 & 8) != 0) {
        goto LABEL_70;
      }
    }
    else
    {
      if (!v11)
      {
        int v17 = 0;
        if (v15)
        {
          unint64_t v18 = (v14 >> 8) & 0xFFFFF;
          do
          {
            uint64_t v19 = *(void *)(v4 + 8 * v18);
            if ((v19 & 3) == 0)
            {
              if ((v19 & 8) == 0) {
                break;
              }
              ++v17;
            }
            unint64_t v18 = ((unint64_t)v19 >> 8) & 0xFFFFF;
          }
          while (v18);
        }
        int v20 = v17 + 1;
        int v21 = *(char *)(*(void *)(*((void *)this + 5) + 72) + ((unint64_t)Weight >> 24));
        PrimaryAfteunint64_t r = icu::CollationRootElements::getPrimaryAfter(v41, (icu::Collation *)Weight, v40, v21);
        icu::CollationWeights::initForPrimary((icu::CollationWeights *)v46, v21);
        if (!icu::CollationWeights::allocWeights((icu::CollationWeights *)v46, Weight, PrimaryAfter, v20))
        {
          uint64_t v35 = "primary tailoring gap too small";
          goto LABEL_83;
        }
      }
      unint64_t Weight = icu::CollationWeights::nextWeight((icu::CollationWeights *)v46);
      int v12 = 0;
      int v10 = 0;
      int v9 = 0;
      uint64_t v11 = 1;
      LODWORD(v13) = 1280;
      LODWORD(v7) = 1280;
      if ((v14 & 8) != 0) {
        goto LABEL_70;
      }
    }
LABEL_71:
    uint64_t v8 = (v14 >> 8) & 0xFFFFF;
    if (!v15) {
      goto LABEL_77;
    }
  }
  if ((v14 & 8) == 0)
  {
    int v12 = 0;
    int v9 = 0;
    unint64_t v7 = HIWORD(v14);
    goto LABEL_71;
  }
  if (v9) {
    goto LABEL_75;
  }
  int v28 = 0;
  if (v15)
  {
    unint64_t v29 = (v14 >> 8) & 0xFFFFF;
    do
    {
      uint64_t v30 = *(void *)(v4 + 8 * v29);
      if ((v30 & 3u) < 2uLL) {
        break;
      }
      if ((v30 & 3) == 2)
      {
        if ((v30 & 8) == 0) {
          break;
        }
        ++v28;
      }
      unint64_t v29 = ((unint64_t)v30 >> 8) & 0xFFFFF;
    }
    while (v29);
  }
  unsigned int v38 = v11;
  if (v7)
  {
    if (v11 | v10)
    {
      if (v7 == 256)
      {
        TertiaryAfteunint64_t r = 1280;
        LODWORD(v7) = 256;
      }
      else
      {
        TertiaryAfteunint64_t r = *(_DWORD *)(*(void *)v41 + 16) << 8;
      }
    }
    else
    {
      TertiaryAfteunint64_t r = icu::CollationRootElements::getTertiaryAfter((int **)v41, v40, v13, v7);
    }
  }
  else
  {
    LODWORD(v7) = (*(_DWORD *)(*(void *)v41 + 16) << 8) - 256;
    TertiaryAfteunint64_t r = *(_DWORD *)(*(void *)v41 + 4 * **(unsigned int **)v41) & 0x3F3F;
  }
  icu::CollationWeights::initForTertiary((icu::CollationWeights *)v42);
  BOOL v33 = icu::CollationWeights::allocWeights((icu::CollationWeights *)v42, v7, TertiaryAfter, v28 + 1);
  this = v37;
  uint64_t v11 = v38;
  if (v33)
  {
LABEL_75:
    LODWORD(v7) = icu::CollationWeights::nextWeight((icu::CollationWeights *)v42);
    int v12 = 0;
    int v9 = 1;
    if ((v14 & 8) == 0) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  uint64_t v35 = "tertiary tailoring gap too small";
LABEL_83:
  BOOL v34 = a2;
LABEL_84:
  *BOOL v34 = U_BUFFER_OVERFLOW_ERROR;
  *((void *)this + 36) = v35;
}

void icu::CollationBuilder::closeOverComposites(icu::CollationBuilder *this, UErrorCode *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  unint64_t v13 = "[";
  icu::UnicodeString::UnicodeString(&v21, 1, &v13);
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v14, (const icu::UnicodeString *)&v21, a2);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v21);
  if (*(int *)a2 <= 0)
  {
    icu::UnicodeSet::remove((icu::UnicodeSet *)v14, 0xAC00u, 0xD7A3u);
    long long v22 = 0u;
    uint64_t v25 = 0;
    long long v24 = 0u;
    long long v23 = 0u;
    uint64_t v20 = 0;
    int v21 = &unk_1EDA47700;
    LOWORD(v22) = 2;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    uint64_t v16 = &unk_1EDA47700;
    LOWORD(v17) = 2;
    memset(v12, 0, sizeof(v12));
    icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v12, (const icu::UnicodeSet *)v14);
    while (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v12))
    {
      (*(void (**)(void, void, void **))(**((void **)this + 1) + 56))(*((void *)this + 1), DWORD2(v12[0]), &v16);
      int CEs = icu::CollationDataBuilder::getCEs(*((icu::CollationDataBuilder **)this + 9), (const icu::UnicodeString *)&v16, (uint64_t *)this + 37, 0, v5);
      *((_DWORD *)this + 136) = CEs;
      if (CEs <= 31)
      {
        String = icu::UnicodeSetIterator::getString((icu::UnicodeSetIterator *)v12, v7, v8);
        icu::CollationBuilder::addIfDifferent((icu::CollationDataBuilder **)this, (const icu::UnicodeString *)&v21, (const icu::UnicodeString *)String, (const uint64_t *)this + 37, *((unsigned int *)this + 136), 0xFFFFFFFFLL, a2);
      }
    }
    icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v12);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v16);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v21);
  }
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v14);
}

void icu::CollationBuilder::finalizeCEs(icu::CollationBuilder *this, UErrorCode *a2)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 <= 0)
  {
    unint64_t v5 = (icu::CollationDataBuilder *)icu::UMemory::operator new(v2, (icu::UMemory *)0x280, (unint64_t)a2);
    if (v5)
    {
      uint64_t v6 = v5;
      icu::CollationDataBuilder::CollationDataBuilder(v5, *((unsigned char *)this + 81), a2);
      if (*(int *)a2 > 0)
      {
LABEL_6:
        (*(void (**)(icu::UnicodeSet *))(*(void *)v6 + 8))(v6);
        return;
      }
      icu::CollationDataBuilder::initForTailoring(v6, *((const icu::CollationData **)this + 5), a2);
      uint64_t v7 = *((void *)this + 76);
      v9[0] = &unk_1EDA49C40;
      v9[1] = v7;
      icu::CollationDataBuilder::copyFrom((uint64_t)v6, *((const icu::CollationDataBuilder **)this + 9), (const icu::CollationDataBuilder::CEModifier *)v9, a2);
      if (*(int *)a2 > 0)
      {
        icu::CollationDataBuilder::CEModifier::~CEModifier((icu::CollationDataBuilder::CEModifier *)v9);
        goto LABEL_6;
      }
      uint64_t v8 = *((void *)this + 9);
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      *((void *)this + 9) = v6;
      icu::CollationDataBuilder::CEModifier::~CEModifier((icu::CollationDataBuilder::CEModifier *)v9);
    }
    else if (*(int *)a2 <= 0)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
}

uint64_t icu::CollationBuilder::addReset(uint64_t this, signed int a2, const icu::UnicodeString *a3, const char **a4, UErrorCode *a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    uint64_t v8 = this;
    unsigned int v9 = *((unsigned __int16 *)a3 + 4);
    if ((v9 & 0x8000u) == 0) {
      unsigned int v10 = v9 >> 5;
    }
    else {
      unsigned int v10 = *((_DWORD *)a3 + 3);
    }
    if (v10)
    {
      uint64_t v11 = (v9 & 2) != 0
          ? (const icu::UnicodeString *)((char *)a3 + 10)
          : (const icu::UnicodeString *)*((void *)a3 + 3);
      if (*(__int16 *)v11 == -2)
      {
        this = icu::CollationBuilder::getSpecialResetPosition((icu::CollationData **)this, a3, a4, a5);
        *(void *)(v8 + 296) = this;
        *(_DWORD *)(v8 + 544) = 1;
        if (a2 == 15 || *(int *)a5 > 0) {
          return this;
        }
LABEL_20:
        this = icu::CollationBuilder::findOrInsertNodeForCEs((icu::CollationBuilder *)v8, a2, a4, a5);
        if (*(int *)a5 > 0) {
          return this;
        }
        uint64_t v17 = this;
        if ((this & 0x80000000) != 0 || *(_DWORD *)(v8 + 592) <= (int)this) {
          unint64_t v18 = 0;
        }
        else {
          unint64_t v18 = *(void *)(*(void *)(v8 + 608) + 8 * this);
        }
        for (signed int i = v18 & 3; i > a2; signed int i = v18 & 3)
        {
          uint64_t v17 = (v18 >> 28) & 0xFFFFF;
          if (*(_DWORD *)(v8 + 592) <= (int)v17) {
            unint64_t v18 = 0;
          }
          else {
            unint64_t v18 = *(void *)(*(void *)(v8 + 608) + 8 * v17);
          }
        }
        if ((v18 & 8) != 0 && i == a2)
        {
          uint64_t v20 = (v18 >> 28) & 0xFFFFF;
LABEL_33:
          if (*(int *)a5 < 1)
          {
            *(void *)(v8 + 8 * *(int *)(v8 + 544) + 288) = (((unint64_t)(v20 & 0x1FC0) << 42) & 0x80FFFFFFFFFFFFFFLL | ((((unint64_t)(v20 & 0xFE000) >> 13) & 0x7F) << 56) | ((v20 & 0x3F) << 24))
                                                             + (a2 << 8)
                                                             + 0x4040000006002000;
            return this;
          }
          int v21 = "inserting reset position for &[before n]";
LABEL_35:
          *a4 = v21;
          return this;
        }
        if (!a2)
        {
          if (!HIDWORD(v18))
          {
            *a5 = U_UNSUPPORTED_ERROR;
            int v21 = "reset primary-before ignorable not possible";
            goto LABEL_35;
          }
          this = v8 + 48;
          if (*(_DWORD *)(*(void *)(v8 + 48) + 4 * *(unsigned int *)(*(void *)(v8 + 48) + 8)) >= HIDWORD(v18))
          {
            *a5 = U_UNSUPPORTED_ERROR;
            int v21 = "reset primary-before first non-ignorable not supported";
            goto LABEL_35;
          }
          if (HIDWORD(v18) == -16645632)
          {
            *a5 = U_UNSUPPORTED_ERROR;
            int v21 = "reset primary-before [first trailing] not supported";
            goto LABEL_35;
          }
          uint64_t PrimaryBefore = icu::CollationRootElements::getPrimaryBefore((icu::CollationRootElements *)this, (icu::Collation *)HIDWORD(v18), *(char *)(*(void *)(*(void *)(v8 + 40) + 72) + HIBYTE(v18)));
          this = icu::CollationBuilder::findOrInsertNodeForPrimary((icu::CollationBuilder *)v8, PrimaryBefore, a5);
          while (1)
          {
            LODWORD(v20) = this;
            if ((this & 0x80000000) != 0 || *(_DWORD *)(v8 + 592) <= (int)this) {
              goto LABEL_83;
            }
            a2 = 0;
            this = (*(void *)(*(void *)(v8 + 608) + 8 * this) >> 8) & 0xFFFFF;
            if (!this) {
              goto LABEL_33;
            }
          }
        }
        this = icu::CollationBuilder::findCommonNode((icu::CollationBuilder *)v8, v17, 1);
        uint64_t v23 = this;
        if (a2 >= 2)
        {
          this = icu::CollationBuilder::findCommonNode((icu::CollationBuilder *)v8, this, 2);
          uint64_t v23 = this;
        }
        if ((v23 & 0x80000000) != 0 || *(_DWORD *)(v8 + 592) <= (int)v23) {
          unint64_t v24 = 0;
        }
        else {
          unint64_t v24 = *(void *)(*(void *)(v8 + 608) + 8 * v23);
        }
        if ((v24 & 3) == a2)
        {
          if (!HIWORD(v24))
          {
            *a5 = U_UNSUPPORTED_ERROR;
            int v21 = "reset secondary-before secondary ignorable not possible";
            if (a2 != 1) {
              int v21 = "reset tertiary-before completely ignorable not possible";
            }
            goto LABEL_35;
          }
          this = icu::CollationBuilder::getWeight16Before((icu::CollationBuilder *)v8, v22, v24, a2);
          uint64_t v20 = (v24 >> 28) & 0xFFFFF;
          LODWORD(v28) = v20;
          while (1)
          {
            if (*(_DWORD *)(v8 + 592) <= (int)v28) {
              unint64_t v29 = 0;
            }
            else {
              unint64_t v29 = *(void *)(*(void *)(v8 + 608) + 8 * v28);
            }
            if ((v29 & 3) < a2)
            {
              LODWORD(v30) = 1280;
              goto LABEL_76;
            }
            if ((v29 & 8) == 0 && (v29 & 3) == a2) {
              break;
            }
            uint64_t v28 = (v29 >> 28) & 0xFFFFF;
          }
          unint64_t v30 = HIWORD(v29);
LABEL_76:
          if (v30 == this) {
            goto LABEL_55;
          }
          this = icu::CollationBuilder::insertNodeBetween((icu::CollationBuilder *)v8, v20, v23, a2 | (unint64_t)(this << 48), a5);
        }
        else
        {
          uint64_t Weight16Before = icu::CollationBuilder::getWeight16Before((icu::CollationBuilder *)v8, v22, v24, a2);
          this = icu::CollationBuilder::findOrInsertWeakNode((icu::CollationBuilder *)v8, v23, Weight16Before, a2, a5);
        }
        LODWORD(v20) = this;
LABEL_55:
        unint64_t v26 = *(void *)(v8 + 8 * *(int *)(v8 + 544) + 288);
        if ((v26 - 1174405120) >> 30 == 3)
        {
          a2 = (v26 >> 8) & 3;
          goto LABEL_33;
        }
        if (!HIBYTE(v26))
        {
          if (v26) {
            int v27 = 2;
          }
          else {
            int v27 = 15;
          }
          if ((v26 & 0xFF000000) != 0) {
            a2 = 1;
          }
          else {
            a2 = v27;
          }
          goto LABEL_33;
        }
LABEL_83:
        a2 = 0;
        goto LABEL_33;
      }
    }
    uint64_t v12 = *(void *)(this + 8);
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v36 = 0;
    BOOL v32 = &unk_1EDA47700;
    LOWORD(v33) = 2;
    (*(void (**)(uint64_t, const icu::UnicodeString *, void **, UErrorCode *))(*(void *)v12 + 24))(v12, a3, &v32, a5);
    unint64_t v13 = (uint64_t *)*(unsigned int *)a5;
    if ((int)v13 <= 0)
    {
      int CEs = icu::CollationDataBuilder::getCEs(*(icu::CollationDataBuilder **)(v8 + 72), (const icu::UnicodeString *)&v32, (uint64_t *)(v8 + 296), 0, v13);
      *(_DWORD *)(v8 + 544) = CEs;
      if (CEs < 32)
      {
        this = (uint64_t)icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v32);
        if (a2 == 15) {
          return this;
        }
        goto LABEL_20;
      }
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
      unint64_t v14 = "reset position maps to too many collation elements (more than 31)";
    }
    else
    {
      unint64_t v14 = "normalizing the reset position";
    }
    *a4 = v14;
    return (uint64_t)icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v32);
  }
  return this;
}

unint64_t icu::CollationBuilder::getSpecialResetPosition(icu::CollationData **this, const icu::UnicodeString *a2, const char **a3, UErrorCode *a4)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  if ((v4 & 0x8000u) == 0) {
    unsigned int v5 = v4 >> 5;
  }
  else {
    unsigned int v5 = *((_DWORD *)a2 + 3);
  }
  if (v5 < 2) {
LABEL_89:
  }
    abort();
  if ((v4 & 2) != 0) {
    uint64_t v6 = (char *)a2 + 10;
  }
  else {
    uint64_t v6 = (char *)*((void *)a2 + 3);
  }
  int v7 = *((unsigned __int16 *)v6 + 1);
  unsigned int v10 = 0;
  unint64_t v11 = 0;
  unint64_t CEWithPrimaryAtLeast = 0xFF02020005000500;
  char v13 = 1;
  switch(v7)
  {
    case 10240:
    case 10241:
      return v11;
    case 10242:
      int inserted = icu::CollationBuilder::findOrInsertNodeForRootCE((icu::CollationBuilder *)this, 0, 2, a4);
      unint64_t v11 = 0;
      if (*(int *)a4 <= 0)
      {
        if (inserted < 0) {
          return *((_DWORD *)this[6] + *(unsigned int *)this[6]) & 0xFFFFFF7F;
        }
        int v15 = *((_DWORD *)this + 148);
        if (v15 <= inserted) {
          return *((_DWORD *)this[6] + *(unsigned int *)this[6]) & 0xFFFFFF7F;
        }
        uint64_t v16 = this[76];
        uint64_t v17 = *((void *)v16 + inserted);
        unsigned int v18 = (v17 >> 8) & 0xFFFFF;
        BOOL v19 = !v18 || v15 <= (int)v18;
        if (v19 || (*((void *)v16 + v18) & 0xBLL) != 0xA) {
          return *((_DWORD *)this[6] + *(unsigned int *)this[6]) & 0xFFFFFF7F;
        }
        else {
          return ((((unint64_t)((v17 >> 8) & 0x1FC0) << 42) & 0x80FFFFFFFFFFFFFFLL | ((((unint64_t)((v17 >> 8) & 0xFE000) >> 13) & 0x7F) << 56) | (((v17 >> 8) & 0x3F) << 24))
        }
                + 0x4040000006002000) | 0x200;
      }
      return v11;
    case 10243:
      char v13 = 0;
      unint64_t CEWithPrimaryAtLeast = *((_DWORD *)this[6] + (*((_DWORD *)this[6] + 1) - 1)) & 0xFFFFFF7F;
      unsigned int v10 = 2;
      goto LABEL_43;
    case 10244:
      unsigned int v20 = icu::CollationBuilder::findOrInsertNodeForRootCE((icu::CollationBuilder *)this, 0, 1, a4);
      unint64_t v11 = 0;
      if (*(int *)a4 > 0) {
        return v11;
      }
      if ((v20 & 0x80000000) != 0 || *((_DWORD *)this + 148) <= (signed int)v20) {
        LODWORD(v21) = 0;
      }
      else {
        uint64_t v21 = *((void *)this[76] + v20);
      }
      break;
    case 10245:
      char v13 = 0;
      uint64_t v22 = *((unsigned int *)this[6] + (*((_DWORD *)this[6] + 2) - 1));
      goto LABEL_42;
    case 10246:
      unsigned int v10 = 0;
      unint64_t CEWithPrimaryAtLeast = ((unint64_t)*((unsigned int *)this[6] + *((unsigned int *)this[6] + 2)) << 32) | 0x5000500;
      goto LABEL_43;
    case 10247:
      CEWithuint64_t PrimaryBefore = icu::CollationRootElements::lastCEWithPrimaryBefore((icu::CollationRootElements *)(this + 6), *((_DWORD *)this + 16) + 1);
      goto LABEL_29;
    case 10248:
      unint64_t CEWithPrimaryAtLeast = icu::CollationRootElements::firstCEWithPrimaryAtLeast((icu::CollationRootElements *)(this + 6), (*((_DWORD *)this + 16) + 1));
      goto LABEL_30;
    case 10249:
      FirstPrimaryForGrouunint64_t p = icu::CollationData::getFirstPrimaryForGroup(this[5], 0x11u);
      CEWithuint64_t PrimaryBefore = icu::CollationRootElements::firstCEWithPrimaryAtLeast((icu::CollationRootElements *)(this + 6), FirstPrimaryForGroup);
      goto LABEL_29;
    case 10250:
      CEWithuint64_t PrimaryBefore = icu::CollationData::getSingleCE(this[5], (icu::Collation *)0x4E00, a4);
LABEL_29:
      unint64_t CEWithPrimaryAtLeast = CEWithPrimaryBefore;
      char v13 = 0;
LABEL_30:
      unsigned int v10 = 0;
      goto LABEL_43;
    case 10251:
      unint64_t v11 = 0;
      *a4 = U_UNSUPPORTED_ERROR;
      uint64_t v25 = "reset to [last implicit] not supported";
      goto LABEL_33;
    case 10252:
      goto LABEL_43;
    case 10253:
      unint64_t v11 = 0;
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
      uint64_t v25 = "LDML forbids tailoring to U+FFFF";
LABEL_33:
      *a3 = v25;
      return v11;
    default:
      goto LABEL_89;
  }
  do
  {
    unsigned int v26 = (v21 >> 8) & 0xFFFFF;
    if (v26)
    {
      signed int v27 = *((_DWORD *)this + 148);
      if (v27 > (int)v26)
      {
        uint64_t v28 = this[76];
        uint64_t v21 = *((void *)v28 + v26);
        if ((*((_DWORD *)v28 + 2 * v26) & 3) != 0) {
          continue;
        }
      }
    }
    goto LABEL_41;
  }
  while ((v21 & 3) != 1);
  if ((v21 & 8) != 0)
  {
    if ((v21 & 0x20) != 0)
    {
      unsigned int v43 = (v21 >> 8) & 0xFFFFF;
      if (v27 <= (int)v43) {
        unsigned int v26 = 0;
      }
      else {
        unsigned int v26 = (*((void *)v28 + v43) >> 8) & 0xFFFFF;
      }
    }
    return ((((unint64_t)(v26 & 0x1FC0) << 42) & 0x80FFFFFFFFFFFFFFLL | ((((unint64_t)(v26 & 0xFE000) >> 13) & 0x7F) << 56) | ((v26 & 0x3F) << 24))
          + 0x4040000006002000) | 0x100;
  }
  else
  {
LABEL_41:
    char v13 = 0;
    uint64_t v22 = *((unsigned int *)this[6] + *((unsigned int *)this[6] + 1));
LABEL_42:
    unint64_t CEWithPrimaryAtLeast = v22 & 0xFFFFFFFFFFFFFF7FLL;
    unsigned int v10 = 1;
LABEL_43:
    signed int v29 = icu::CollationBuilder::findOrInsertNodeForRootCE((icu::CollationBuilder *)this, CEWithPrimaryAtLeast, v10, a4);
    if (*(int *)a4 > 0) {
      return 0;
    }
    if (v29 < 0 || *((_DWORD *)this + 148) <= v29)
    {
      LODWORD(v30) = 0;
      if (v7)
      {
LABEL_48:
        for (i = (v30 >> 8) & 0xFFFFF; i; signed int v29 = v32)
        {
          unsigned int v32 = i;
          if (*((_DWORD *)this + 148) <= (signed int)i) {
            LODWORD(v33) = 0;
          }
          else {
            uint64_t v33 = *((void *)this[76] + i);
          }
          if ((v33 & 3u) < v10) {
            break;
          }
          unsigned int i = (v33 >> 8) & 0xFFFFF;
          LOBYTE(v30) = v33;
        }
        unint64_t v11 = CEWithPrimaryAtLeast;
        if ((v30 & 8) == 0) {
          return v11;
        }
        return ((v10 << 8) | 0x4040000006002000)
             + ((unint64_t)(v29 & 0xFE000) << 43)
             + ((unint64_t)(v29 & 0x1FC0) << 42)
             + ((v29 & 0x3F) << 24);
      }
    }
    else
    {
      uint64_t v30 = *((void *)this[76] + v29);
      if (v7) {
        goto LABEL_48;
      }
    }
    char v34 = v13 ^ 1;
    if ((v30 & 0x60) != 0) {
      char v34 = 1;
    }
    if ((v34 & 1) == 0)
    {
      signed int v29 = (v30 >> 8) & 0xFFFFF;
      if (v29)
      {
        unsigned int v35 = v30 >> 8;
        if (*((_DWORD *)this + 148) <= v29) {
          LODWORD(v30) = 0;
        }
        else {
          uint64_t v30 = *((void *)this[76] + v29);
        }
        unint64_t CEWithPrimaryAtLeast = ((v10 << 8) | 0x4040000006002000)
                             + ((unint64_t)(v35 & 0xFE000) << 43)
                             + ((unint64_t)(v35 & 0x1FC0) << 42)
                             + ((v35 & 0x3F) << 24);
      }
      else
      {
        int Primary = icu::CollationRootElements::findPrimary((icu::CollationRootElements *)(this + 6), HIDWORD(CEWithPrimaryAtLeast));
        PrimaryAfteunint64_t r = icu::CollationRootElements::getPrimaryAfter((icu::CollationRootElements *)(this + 6), (icu::Collation *)HIDWORD(CEWithPrimaryAtLeast), Primary, *(char *)(*((void *)this[5] + 9) + HIBYTE(CEWithPrimaryAtLeast)));
        if (*(int *)a4 > 0) {
          return 0;
        }
        uint64_t v38 = PrimaryAfter;
        signed int v29 = icu::CollationBuilder::findOrInsertNodeForPrimary((icu::CollationBuilder *)this, PrimaryAfter, a4);
        if (*(int *)a4 > 0) {
          return 0;
        }
        unint64_t CEWithPrimaryAtLeast = (v38 << 32) | 0x5000500;
        if (v29 < 0 || *((_DWORD *)this + 148) <= v29) {
          return CEWithPrimaryAtLeast;
        }
        uint64_t v30 = *((void *)this[76] + v29);
      }
    }
    unint64_t v11 = CEWithPrimaryAtLeast;
    if ((v30 & 0x60) != 0)
    {
      if ((v30 & 0x40) != 0)
      {
        unsigned int v39 = (v30 >> 8) & 0xFFFFF;
        signed int v40 = *((_DWORD *)this + 148);
        if (v40 <= (int)v39) {
          signed int v29 = 0;
        }
        else {
          signed int v29 = (*((void *)this[76] + v39) >> 8) & 0xFFFFF;
        }
        if (v40 <= v29) {
          return ((v10 << 8) | 0x4040000006002000)
        }
               + ((unint64_t)(v29 & 0xFE000) << 43)
               + ((unint64_t)(v29 & 0x1FC0) << 42)
               + ((v29 & 0x3F) << 24);
        uint64_t v30 = *((void *)this[76] + v29);
      }
      if ((v30 & 0x20) != 0)
      {
        unsigned int v41 = (v30 >> 8) & 0xFFFFF;
        if (*((_DWORD *)this + 148) <= (signed int)v41) {
          signed int v29 = 0;
        }
        else {
          signed int v29 = (*((void *)this[76] + v41) >> 8) & 0xFFFFF;
        }
      }
      return ((v10 << 8) | 0x4040000006002000)
           + ((unint64_t)(v29 & 0xFE000) << 43)
           + ((unint64_t)(v29 & 0x1FC0) << 42)
           + ((v29 & 0x3F) << 24);
    }
  }
  return v11;
}

unint64_t icu::CollationBuilder::findOrInsertNodeForCEs(icu::CollationBuilder *this, int a2, const char **a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  uint64_t v6 = *((int *)this + 136);
  if (!v6)
  {
LABEL_17:
    unint64_t v10 = 0;
    *((void *)this + 37) = 0;
    *((_DWORD *)this + 136) = 1;
    return icu::CollationBuilder::findOrInsertNodeForRootCE(this, v10, a2, a4);
  }
  int v7 = (char *)this + 8 * v6;
  int v8 = v6 - 1;
  unsigned int v9 = (unint64_t *)(v7 + 288);
  while (1)
  {
    unint64_t v11 = *v9--;
    unint64_t v10 = v11;
    if ((v11 - 1174405120) >> 30 != 3) {
      break;
    }
    if ((int)((v10 >> 8) & 3) <= a2) {
      return ((v10 - 0x4040000006002000) >> 43) & 0xFE000 | ((v10 - 0x4040000006002000) >> 42) & 0x1FC0 | ((v10 - 100671488) >> 24) & 0x3F;
    }
LABEL_16:
    *((_DWORD *)this + 136) = v8--;
    if (v8 == -1) {
      goto LABEL_17;
    }
  }
  unint64_t v12 = HIBYTE(v10);
  if (v10) {
    int v13 = 2;
  }
  else {
    int v13 = 15;
  }
  if ((v10 & 0xFF000000) != 0) {
    int v13 = 1;
  }
  if (v12) {
    int v13 = 0;
  }
  if (v13 > a2) {
    goto LABEL_16;
  }
  if (v12 != 254) {
    return icu::CollationBuilder::findOrInsertNodeForRootCE(this, v10, a2, a4);
  }
  unint64_t result = 0;
  *a4 = U_UNSUPPORTED_ERROR;
  *a3 = "tailoring relative to an unassigned code point not supported";
  return result;
}

uint64_t icu::CollationBuilder::findOrInsertNodeForPrimary(icu::CollationBuilder *this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  int v7 = *((_DWORD *)this + 140);
  uint64_t v8 = *((void *)this + 76);
  if (!v7)
  {
    int v11 = -1;
    goto LABEL_25;
  }
  uint64_t v9 = *((void *)this + 72);
  if (v7 >= 0) {
    int v10 = *((_DWORD *)this + 140);
  }
  else {
    int v10 = v7 + 1;
  }
  int v11 = v10 >> 1;
  unsigned int v12 = *(_DWORD *)(v8 + 8 * *(int *)(v9 + 4 * (v10 >> 1)) + 4);
  if (v12 == a2)
  {
LABEL_20:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_21;
    }
LABEL_25:
    uint64_t v3 = *((unsigned int *)this + 148);
    int v16 = v3 + 1;
    if ((int)v3 < -1 || *((_DWORD *)this + 149) <= (int)v3)
    {
      if (!icu::UVector64::expandCapacity((icu::CollationBuilder *)((char *)this + 584), v16, a3))
      {
LABEL_31:
        icu::UVector32::insertElementAt((_DWORD *)this + 138, v3, ~v11, a3);
        return v3;
      }
      int v17 = *((_DWORD *)this + 148);
      int v16 = v17 + 1;
      uint64_t v8 = *((void *)this + 76);
    }
    else
    {
      int v17 = *((_DWORD *)this + 148);
    }
    *(void *)(v8 + 8 * v17) = a2 << 32;
    *((_DWORD *)this + 148) = v16;
    goto LABEL_31;
  }
  int v13 = 0;
  int v14 = *((_DWORD *)this + 140);
  while (v12 <= a2)
  {
    if (v11 == v13)
    {
      int v11 = -2 - v11;
      goto LABEL_20;
    }
    int v13 = v11;
LABEL_14:
    int v15 = v14 + v13;
    if (v14 + v13 < 0 != __OFADD__(v14, v13)) {
      ++v15;
    }
    int v11 = v15 >> 1;
    unsigned int v12 = *(_DWORD *)(v8 + 8 * *(int *)(v9 + 4 * (v15 >> 1)) + 4);
    if (v12 == a2) {
      goto LABEL_20;
    }
  }
  if (v11 != v13)
  {
    int v14 = v11;
    goto LABEL_14;
  }
  int v11 = ~v11;
  if (v11 < 0) {
    goto LABEL_25;
  }
LABEL_21:
  uint64_t v3 = 0;
  if (v7 >= 1 && v7 > v11) {
    return *(unsigned int *)(v9 + 4 * v11);
  }
  return v3;
}

uint64_t icu::CollationBuilder::findCommonNode(icu::CollationBuilder *this, uint64_t a2, int a3)
{
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 148) <= (int)a2) {
    LODWORD(v3) = 0;
  }
  else {
    uint64_t v3 = *(void *)(*((void *)this + 76) + 8 * a2);
  }
  if ((v3 & 3) < a3)
  {
    if (a3 == 1)
    {
      if ((v3 & 0x40) == 0) {
        return a2;
      }
    }
    else if ((v3 & 0x20) == 0)
    {
      return a2;
    }
    unsigned int v4 = (v3 >> 8) & 0xFFFFF;
    int v5 = *((_DWORD *)this + 148);
    if (v5 <= (int)v4) {
      LODWORD(v6) = 0;
    }
    else {
      unint64_t v6 = *(void *)(*((void *)this + 76) + 8 * v4);
    }
    do
    {
      do
      {
        a2 = (v6 >> 8) & 0xFFFFF;
        LODWORD(v6) = 0;
      }
      while (v5 <= (int)a2);
      unint64_t v6 = *(void *)(*((void *)this + 76) + 8 * a2);
    }
    while ((v6 & 8) != 0 || (v6 & 3) > a3 || HIWORD(v6) < 0x500);
  }
  return a2;
}

uint64_t icu::CollationBuilder::getWeight16Before(icu::CollationBuilder *this, int a2, unint64_t a3, int a4)
{
  if ((a3 & 3) == 2) {
    int v4 = HIWORD(a3);
  }
  else {
    int v4 = 1280;
  }
  unsigned int v5 = a3 & 3;
  if (v5 >= 2)
  {
    while (1)
    {
      uint64_t v6 = (a3 >> 28) & 0xFFFFF;
      if (*((_DWORD *)this + 148) <= (int)v6) {
        break;
      }
      a3 = *(void *)(*((void *)this + 76) + 8 * v6);
      unsigned int v5 = a3 & 3;
      if (v5 <= 1) {
        goto LABEL_7;
      }
    }
    HIDWORD(a3) = 0;
    unsigned int v7 = 1280;
    goto LABEL_18;
  }
LABEL_7:
  if ((a3 & 8) != 0) {
    return 256;
  }
  if (v5 == 1) {
    unsigned int v7 = HIWORD(a3);
  }
  else {
    unsigned int v7 = 1280;
  }
  if ((a3 & 3) != 0)
  {
    while (1)
    {
      uint64_t v8 = (a3 >> 28) & 0xFFFFF;
      if (*((_DWORD *)this + 148) <= (int)v8) {
        break;
      }
      a3 = *(void *)(*((void *)this + 76) + 8 * v8);
      if ((a3 & 3) == 0) {
        goto LABEL_14;
      }
    }
    HIDWORD(a3) = 0;
    goto LABEL_18;
  }
LABEL_14:
  if ((a3 & 8) != 0) {
    return 256;
  }
LABEL_18:
  int v10 = (icu::CollationBuilder *)((char *)this + 48);
  if (a4 == 1) {
    return icu::CollationRootElements::getSecondaryBefore(v10, HIDWORD(a3), v7);
  }
  else {
    return icu::CollationRootElements::getTertiaryBefore(v10, HIDWORD(a3), v7, v4);
  }
}

uint64_t icu::CollationBuilder::insertNodeBetween(icu::CollationBuilder *this, signed int a2, unsigned int a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  int v10 = (char *)this + 584;
  uint64_t v11 = *((unsigned int *)this + 148);
  int v12 = v11 + 1;
  if ((int)v11 < -1 || *((_DWORD *)this + 149) <= (int)v11)
  {
    if (!icu::UVector64::expandCapacity((icu::CollationBuilder *)((char *)this + 584), v12, a5)) {
      goto LABEL_8;
    }
    int v13 = *((_DWORD *)this + 148);
    int v12 = v13 + 1;
  }
  else
  {
    int v13 = *((_DWORD *)this + 148);
  }
  *(void *)(*((void *)this + 76) + 8 * v13) = a4 | ((uint64_t)a2 << 28) | (int)(a3 << 8);
  *((_DWORD *)this + 148) = v12;
LABEL_8:
  if (*(int *)a5 > 0) {
    return 0;
  }
  if (a2 < 0 || *((_DWORD *)this + 148) <= a2) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = *(void *)(*((void *)this + 76) + 8 * a2) & 0xFFFFFFFFF00000FFLL;
  }
  icu::UVector64::setElementAt((uint64_t)v10, v15 | (int)(v11 << 8), a2);
  if (a3)
  {
    if ((a3 & 0x80000000) != 0 || *((_DWORD *)this + 148) <= (signed int)a3) {
      unint64_t v16 = 0;
    }
    else {
      unint64_t v16 = *(void *)(*((void *)this + 76) + 8 * a3) & 0xFFFF00000FFFFFFFLL;
    }
    icu::UVector64::setElementAt((uint64_t)v10, v16 | ((uint64_t)(int)v11 << 28), a3);
  }
  return v11;
}

uint64_t icu::CollationBuilder::findOrInsertWeakNode(icu::CollationBuilder *this, uint64_t a2, uint64_t a3, int a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  signed int v8 = a2;
  if (a3 == 1280)
  {
    return icu::CollationBuilder::findCommonNode(this, a2, a4);
  }
  else
  {
    if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 148) <= (int)a2) {
      unint64_t v11 = 0;
    }
    else {
      unint64_t v11 = *(void *)(*((void *)this + 76) + 8 * a2);
    }
    if ((a3 - 1) <= 0x4FE)
    {
      uint64_t v12 = 32;
      if (a4 == 1) {
        uint64_t v12 = 64;
      }
      if ((v11 & v12) == 0)
      {
        unint64_t v16 = (char *)this + 584;
        uint64_t v17 = a4;
        if (a4 == 1) {
          unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFDFLL;
        }
        else {
          unint64_t v18 = v11;
        }
        if (a4 == 1) {
          unint64_t v19 = v11 & 0x20;
        }
        else {
          unint64_t v19 = 0;
        }
        uint64_t v20 = v19 | a4 | 0x500000000000000;
        icu::UVector64::setElementAt((uint64_t)v16, v18 | v12, a2);
        unsigned int v21 = (v18 >> 8) & 0xFFFFF;
        uint64_t inserted = icu::CollationBuilder::insertNodeBetween(this, v8, v21, v17 | (a3 << 48), a5);
        icu::CollationBuilder::insertNodeBetween(this, inserted, v21, v20, a5);
        return inserted;
      }
    }
    while (1)
    {
      unsigned int v13 = (v11 >> 8) & 0xFFFFF;
      if (!v13) {
        break;
      }
      if (*((_DWORD *)this + 148) <= (signed int)v13) {
        unint64_t v11 = 0;
      }
      else {
        unint64_t v11 = *(void *)(*((void *)this + 76) + 8 * v13);
      }
      if ((v11 & 3) > a4) {
        goto LABEL_32;
      }
      if ((v11 & 3) < a4) {
        break;
      }
      if ((v11 & 8) != 0) {
        goto LABEL_32;
      }
      if (HIWORD(v11) <= a3) {
        int v14 = 0;
      }
      else {
        int v14 = 3;
      }
      if (HIWORD(v11) == a3) {
        uint64_t inserted = v13;
      }
      else {
        uint64_t inserted = inserted;
      }
      if (HIWORD(v11) == a3) {
        int v14 = 1;
      }
      if (HIWORD(v11) < a3)
      {
LABEL_32:
        int v14 = 0;
        signed int v8 = v13;
      }
      if (v14)
      {
        if (v14 != 3) {
          return inserted;
        }
        break;
      }
    }
    uint64_t v15 = a4 | (unint64_t)(a3 << 48);
    return icu::CollationBuilder::insertNodeBetween(this, v8, v13, v15, a5);
  }
}

uint64_t icu::CollationBuilder::ceStrength(unint64_t this)
{
  if (this) {
    int v1 = 2;
  }
  else {
    int v1 = 15;
  }
  if ((this & 0xFF000000) != 0) {
    int v1 = 1;
  }
  if (HIBYTE(this)) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = v1;
  }
  if ((this - 1174405120) >> 30 == 3) {
    return (this >> 8) & 3;
  }
  else {
    return v2;
  }
}

uint64_t icu::CollationBuilder::findOrInsertNodeForRootCE(icu::CollationBuilder *this, unint64_t a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  int v8 = a2;
  uint64_t inserted = icu::CollationBuilder::findOrInsertNodeForPrimary(this, HIDWORD(a2), a4);
  if (a3 < 1) {
    return inserted;
  }
  uint64_t inserted = icu::CollationBuilder::findOrInsertWeakNode(this, inserted, HIWORD(v8), 1, a4);
  if (a3 == 1) {
    return inserted;
  }

  return icu::CollationBuilder::findOrInsertWeakNode(this, inserted, v8 & 0x3F3F, 2, a4);
}

void **icu::CollationBuilder::addRelation(void **this, int a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, const icu::UnicodeString *a5, char **a6, UErrorCode *a7)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (*(int *)a7 <= 0)
  {
    uint64_t v13 = (uint64_t)this;
    long long v14 = 0uLL;
    long long v54 = 0u;
    uint64_t v57 = 0;
    long long v56 = 0u;
    long long v55 = 0u;
    double v53 = &unk_1EDA47700;
    LOWORD(v54) = 2;
    if (*((unsigned __int16 *)a3 + 4) >= 0x20u)
    {
      (*(void (**)(void *, const icu::UnicodeString *, void **, UErrorCode *))(*this[1] + 24))(this[1], a3, &v53, a7);
      long long v14 = 0uLL;
      if (*(int *)a7 >= 1)
      {
        uint64_t v15 = "normalizing the relation prefix";
        *a6 = "normalizing the relation prefix";
        return (void **)icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v53);
      }
    }
    uint64_t v16 = *(void *)(v13 + 8);
    long long v49 = v14;
    long long v50 = v14;
    long long v51 = v14;
    uint64_t v52 = 0;
    long long v48 = &unk_1EDA47700;
    LOWORD(v49) = 2;
    (*(void (**)(uint64_t, const icu::UnicodeString *, void **, UErrorCode *))(*(void *)v16 + 24))(v16, a4, &v48, a7);
    if (*(int *)a7 >= 1)
    {
      uint64_t v17 = "normalizing the relation string";
LABEL_7:
      *a6 = v17;
LABEL_8:
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v48);
      return (void **)icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v53);
    }
    if ((__int16)v49 < 0)
    {
      int v18 = DWORD1(v49);
      if (SDWORD1(v49) <= 1) {
        goto LABEL_30;
      }
    }
    else
    {
      if ((unsigned __int16)v49 < 0x40u) {
        goto LABEL_30;
      }
      int v18 = (unsigned __int16)v49 >> 5;
    }
    unint64_t v19 = (unsigned __int16 *)&v49 + 1;
    if ((v49 & 2) == 0) {
      unint64_t v19 = (unsigned __int16 *)v50;
    }
    int v20 = *v19;
    unsigned int v21 = v20 - 4371;
    unsigned int v22 = v20 - 4470;
    if (v21 > 0xFFFFFFEC || v22 >= 0xFFFFFFEB)
    {
      *a7 = U_UNSUPPORTED_ERROR;
      uint64_t v17 = "contractions starting with conjoining Jamo L or V not supported";
      goto LABEL_7;
    }
    unsigned int v24 = v18 - 1;
    unsigned int v25 = (unsigned __int16)v49 >> 5;
    if ((v49 & 0x8000u) != 0) {
      unsigned int v25 = DWORD1(v49);
    }
    if (v25 > v24)
    {
      int v26 = v19[v24];
      if ((v26 - 4371) > 0xFFFFFFEC
        || (v26 - 4470) >= 0xFFFFFFEB
        && (unsigned int v27 = v18 - 2, v25 > v27)
        && v19[v27] - 4371 >= 0xFFFFFFED)
      {
        *a7 = U_UNSUPPORTED_ERROR;
        uint64_t v17 = "contractions ending with conjoining Jamo L or L+V not supported";
        goto LABEL_7;
      }
    }
LABEL_30:
    if (a2 != 15)
    {
      unint64_t inserted = icu::CollationBuilder::findOrInsertNodeForCEs((icu::CollationBuilder *)v13, a2, (const char **)a6, a7);
      unint64_t v33 = *(void *)(v13 + 8 * *(int *)(v13 + 544) + 288);
      if (a2)
      {
        BOOL v34 = v33 == 0;
        if (a2 == 3 && !v33)
        {
          *a7 = U_UNSUPPORTED_ERROR;
          uint64_t v17 = "tailoring quaternary after tertiary ignorables not supported";
          goto LABEL_7;
        }
      }
      else
      {
        if ((v33 - 1174405120) >> 30 != 3 && HIDWORD(v33) == 0)
        {
          *a7 = U_UNSUPPORTED_ERROR;
          uint64_t v17 = "tailoring primary after ignorables not supported";
          goto LABEL_7;
        }
        BOOL v34 = v33 == 0;
      }
      uint64_t v36 = icu::CollationBuilder::insertTailoredNodeAfter((icu::CollationBuilder *)v13, inserted, a2, a7);
      if (*(int *)a7 >= 1)
      {
        uint64_t v17 = "modifying collation elements";
        goto LABEL_7;
      }
      if ((v33 - 1174405120) >> 30 == 3)
      {
        signed int v37 = (v33 >> 8) & 3;
      }
      else if (HIBYTE(v33))
      {
        signed int v37 = 0;
      }
      else
      {
        if (v34) {
          signed int v37 = 15;
        }
        else {
          signed int v37 = 2;
        }
        if ((v33 & 0xFF000000) != 0) {
          signed int v37 = 1;
        }
      }
      if (v37 >= a2) {
        signed int v37 = a2;
      }
      *(void *)(v13 + 8 * *(int *)(v13 + 544) + 288) = (((unint64_t)(v36 & 0x1FC0) << 42) & 0x80FFFFFFFFFFFFFFLL | ((((unint64_t)(v36 & 0xFE000) >> 13) & 0x7F) << 56) | ((v36 & 0x3F) << 24))
                                                         + (v37 << 8)
                                                         + 0x4040000006002000;
    }
    icu::CollationBuilder::setCaseBits((icu::CollationBuilder *)v13, (const icu::UnicodeString *)&v48, (const char **)a6, a7);
    uint64_t v17 = (char *)*(unsigned int *)a7;
    if ((int)v17 > 0) {
      goto LABEL_8;
    }
    int v28 = *(_DWORD *)(v13 + 544);
    if (*((unsigned __int16 *)a5 + 4) >= 0x20u)
    {
      uint64_t v29 = *(void *)(v13 + 8);
      long long v44 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      uint64_t v47 = 0;
      unsigned int v43 = &unk_1EDA47700;
      LOWORD(v44) = 2;
      (*(void (**)(uint64_t, const icu::UnicodeString *, void **, UErrorCode *))(*(void *)v29 + 24))(v29, a5, &v43, a7);
      uint64_t v30 = (uint64_t *)*(unsigned int *)a7;
      if ((int)v30 > 0)
      {
        int v31 = "normalizing the relation extension";
LABEL_58:
        *a6 = v31;
        icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v43);
        goto LABEL_8;
      }
      int CEs = icu::CollationDataBuilder::getCEs(*(icu::CollationDataBuilder **)(v13 + 72), (const icu::UnicodeString *)&v43, (uint64_t *)(v13 + 296), *(unsigned int *)(v13 + 544), v30);
      *(_DWORD *)(v13 + 544) = CEs;
      if (CEs >= 32)
      {
        *a7 = U_ILLEGAL_ARGUMENT_ERROR;
        int v31 = "extension string adds too many collation elements (more than 31 total)";
        goto LABEL_58;
      }
      icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v43);
    }
    if (*(unsigned char *)(v13 + 81))
    {
      uint64_t v40 = *(unsigned int *)(v13 + 544);
      uint64_t v41 = 0xFFFFFFFFLL;
      goto LABEL_75;
    }
    if (sub_18C8A1B58((uint64_t)a3, (uint64_t)&v53))
    {
      if (*(int *)a7 > 0)
      {
LABEL_73:
        uint64_t v41 = 0xFFFFFFFFLL;
        goto LABEL_74;
      }
    }
    else
    {
      int v42 = sub_18C8A1B58((uint64_t)a4, (uint64_t)&v48);
      uint64_t v41 = 0xFFFFFFFFLL;
      if (!v42 || *(int *)a7 >= 1) {
        goto LABEL_74;
      }
    }
    if (!(*(unsigned int (**)(void, const icu::UnicodeString *, UErrorCode *))(**(void **)(v13 + 16)
                                                                                           + 88))(*(void *)(v13 + 16), a3, a7)|| icu::CollationBuilder::ignoreString((icu::CollationBuilder *)v13, a4, a7))
    {
      goto LABEL_73;
    }
    uint64_t v41 = icu::CollationBuilder::addIfDifferent((icu::CollationDataBuilder **)v13, a3, a4, (const uint64_t *)(v13 + 296), *(unsigned int *)(v13 + 544), 0xFFFFFFFFLL, a7);
LABEL_74:
    uint64_t v40 = *(unsigned int *)(v13 + 544);
    if (!*(unsigned char *)(v13 + 81))
    {
      icu::CollationBuilder::addWithClosure((icu::CollationDataBuilder **)v13, (const icu::UnicodeString *)&v53, (const icu::UnicodeString *)&v48, (const uint64_t *)(v13 + 296), v40, v41, a7);
      goto LABEL_76;
    }
LABEL_75:
    icu::CollationBuilder::addIfDifferent((icu::CollationDataBuilder **)v13, (const icu::UnicodeString *)&v53, (const icu::UnicodeString *)&v48, (const uint64_t *)(v13 + 296), v40, v41, a7);
LABEL_76:
    uint64_t v17 = (char *)*(unsigned int *)a7;
    if ((int)v17 < 1)
    {
      *(_DWORD *)(v13 + 544) = v28;
      goto LABEL_8;
    }
    uint64_t v17 = "writing collation elements";
    goto LABEL_7;
  }
  return this;
}

uint64_t icu::CollationBuilder::insertTailoredNodeAfter(icu::CollationBuilder *this, uint64_t CommonNode, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (a3 >= 1)
  {
    CommonNode = icu::CollationBuilder::findCommonNode(this, CommonNode, 1);
    if (a3 != 1) {
      LODWORD(CommonNode) = icu::CollationBuilder::findCommonNode(this, CommonNode, 2);
    }
  }
  if ((CommonNode & 0x80000000) != 0
    || (int v8 = *((_DWORD *)this + 148), v8 <= (int)CommonNode)
    || (unsigned int v9 = (*(void *)(*((void *)this + 76) + 8 * CommonNode) >> 8) & 0xFFFFF) == 0)
  {
LABEL_15:
    unsigned int v10 = 0;
  }
  else
  {
    while (1)
    {
      unsigned int v10 = v9;
      if (v8 <= (int)v9) {
        LODWORD(v11) = 0;
      }
      else {
        uint64_t v11 = *(void *)(*((void *)this + 76) + 8 * v9);
      }
      if ((v11 & 3) <= a3) {
        break;
      }
      unsigned int v9 = (v11 >> 8) & 0xFFFFF;
      LODWORD(CommonNode) = v10;
      if (!v9)
      {
        LODWORD(CommonNode) = v10;
        goto LABEL_15;
      }
    }
  }

  return icu::CollationBuilder::insertNodeBetween(this, CommonNode, v10, a3 | 8, a4);
}

void icu::CollationBuilder::setCaseBits(icu::CollationBuilder *this, const icu::UnicodeString *a2, const char **a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return;
  }
  int v5 = *((_DWORD *)this + 136);
  if (v5 < 1) {
    return;
  }
  uint64_t v8 = 0;
  unsigned int v9 = (unint64_t *)((char *)this + 296);
  uint64_t v10 = *((unsigned int *)this + 136);
  do
  {
    unint64_t v12 = *v9++;
    unint64_t v11 = v12;
    if ((v12 - 1174405120) >> 30 != 3)
    {
      if (!HIBYTE(v11)) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t v8 = (v8 + 1);
      goto LABEL_8;
    }
    if ((v11 & 0x300) == 0) {
      goto LABEL_7;
    }
LABEL_8:
    --v10;
  }
  while (v10);
  if ((int)v8 <= 0)
  {
    uint64_t v15 = 0;
    goto LABEL_38;
  }
  unsigned int v13 = *((unsigned __int16 *)a2 + 4);
  if ((v13 & 0x11) != 0)
  {
    long long v14 = 0;
  }
  else if ((v13 & 2) != 0)
  {
    long long v14 = (char *)a2 + 10;
  }
  else
  {
    long long v14 = (char *)*((void *)a2 + 3);
  }
  long long v37 = 0u;
  long long v38 = 0u;
  int v16 = (__int16)v13;
  memset(v36, 0, sizeof(v36));
  long long v35 = 0u;
  uint64_t v17 = (void *)*((void *)this + 5);
  unsigned int v18 = v13 >> 5;
  if (v16 < 0) {
    unsigned int v18 = *((_DWORD *)a2 + 3);
  }
  v34[1] = *v17;
  v34[2] = v17;
  *((void *)&v35 + 1) = (char *)v36 + 8;
  LODWORD(v36[0]) = 40;
  DWORD2(v37) = 0;
  DWORD2(v38) = -1;
  v34[0] = &unk_1EDA54650;
  unsigned int v39 = v14;
  uint64_t v40 = v14;
  uint64_t v41 = &v14[2 * v18];
  int CEs = icu::CollationIterator::fetchCEs((icu::CollationIterator *)v34, a4);
  if (*(int *)a4 > 0)
  {
    *a3 = "fetching root CEs for tailored string";
    icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)v34);
    return;
  }
  if (CEs < 2)
  {
    uint64_t v22 = 0;
    unsigned int v21 = 0;
    LODWORD(v27) = 0;
    goto LABEL_35;
  }
  uint64_t v20 = 0;
  unsigned int v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = (CEs - 1);
  unsigned int v24 = (unint64_t *)*((void *)&v35 + 1);
  while (2)
  {
    unint64_t v26 = *v24++;
    unsigned __int16 v25 = v26;
    if (!HIDWORD(v26))
    {
      uint64_t v27 = v20;
      goto LABEL_32;
    }
    uint64_t v27 = (v20 + 1);
    uint64_t v28 = v25 >> 14;
    if ((int)v27 < (int)v8)
    {
      v22 |= v28 << (2 * v20);
      goto LABEL_32;
    }
    if (v27 == v8)
    {
      unsigned int v21 = v28;
      uint64_t v27 = v8;
      goto LABEL_32;
    }
    if (v28 == v21)
    {
LABEL_32:
      uint64_t v20 = v27;
      if (!--v23) {
        goto LABEL_35;
      }
      continue;
    }
    break;
  }
  unsigned int v21 = 1;
LABEL_35:
  unint64_t v29 = (unint64_t)v21 << (2 * v8 - 2);
  if ((int)v27 < (int)v8) {
    unint64_t v29 = 0;
  }
  uint64_t v15 = v29 | v22;
  icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)v34);
  int v5 = *((_DWORD *)this + 136);
LABEL_38:
  if (v5 >= 1)
  {
    uint64_t v30 = v5;
    for (unsigned int i = (unint64_t *)((char *)this + 296); ; ++i)
    {
      unint64_t v32 = *i & 0xFFFFFFFFFFFF3FFFLL;
      if ((v32 - 1174405120) >> 30 != 3) {
        break;
      }
      unsigned int v33 = (v32 >> 8) & 3;
      if (v33 == 2) {
        goto LABEL_48;
      }
      if (!v33) {
        goto LABEL_47;
      }
LABEL_49:
      *unsigned int i = v32;
      if (!--v30) {
        return;
      }
    }
    if (!HIBYTE(v32))
    {
      if ((*i & 0xFF000000) != 0 || !v32) {
        goto LABEL_49;
      }
LABEL_48:
      v32 |= 0x8000uLL;
      goto LABEL_49;
    }
LABEL_47:
    v32 |= (unint64_t)(v15 & 3) << 14;
    v15 >>= 2;
    goto LABEL_49;
  }
}

BOOL icu::CollationBuilder::ignorePrefix(icu::CollationBuilder *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  return *(int *)a3 > 0
      || (*(unsigned int (**)(void, const icu::UnicodeString *))(**((void **)this + 2) + 88))(*((void *)this + 2), a2) == 0;
}

BOOL icu::CollationBuilder::ignoreString(icu::CollationBuilder *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0
    || !(*(unsigned int (**)(void))(**((void **)this + 2) + 88))(*((void *)this + 2)))
  {
    return 1;
  }
  unsigned int v5 = *((unsigned __int16 *)a2 + 4);
  if ((v5 & 0x8000u) == 0) {
    unsigned int v6 = v5 >> 5;
  }
  else {
    unsigned int v6 = *((_DWORD *)a2 + 3);
  }
  if (!v6) {
    return 0;
  }
  if ((v5 & 2) != 0) {
    unsigned int v7 = (unsigned __int16 *)((char *)a2 + 10);
  }
  else {
    unsigned int v7 = (unsigned __int16 *)*((void *)a2 + 3);
  }
  return (*v7 - 44032) >> 2 < 0xAE9;
}

uint64_t icu::CollationBuilder::addIfDifferent(icu::CollationDataBuilder **this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, const uint64_t *a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(int *)a7 <= 0)
  {
    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
    if (icu::CollationDataBuilder::getCEs(this[9], a2, a3, (uint64_t *)v19, 0) != a5) {
      goto LABEL_9;
    }
    if ((int)a5 >= 1)
    {
      if (*a4 != *(void *)&v19[0]) {
        goto LABEL_9;
      }
      uint64_t v14 = 1;
      do
      {
        unint64_t v15 = v14;
        if (a5 == v14) {
          break;
        }
        uint64_t v16 = a4[v14];
        uint64_t v17 = *((void *)v19 + v14++);
      }
      while (v16 == v17);
      if (v15 < a5)
      {
LABEL_9:
        if (a6 == -1) {
          a6 = (*(uint64_t (**)(icu::CollationDataBuilder *, const uint64_t *, uint64_t, UErrorCode *))(*(void *)this[9] + 32))(this[9], a4, a5, a7);
        }
        icu::CollationDataBuilder::addCE32((uint64_t)this[9], a2, a3, a6, a7);
      }
    }
  }
  return a6;
}

uint64_t icu::CollationBuilder::addWithClosure(icu::CollationDataBuilder **this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, const uint64_t *a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  uint64_t v13 = icu::CollationBuilder::addIfDifferent(this, a2, a3, a4, a5, a6, a7);
  uint64_t v14 = icu::CollationBuilder::addOnlyClosure(this, a2, a3, a4, a5, v13, a7);
  icu::CollationBuilder::addTailComposites(this, a2, a3, a7);
  return v14;
}

void icu::CollationBuilder::suppressContractions(uint64_t ***this, const icu::UnicodeSet *a2, const char **a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    icu::CollationDataBuilder::suppressContractions(this[9], a2, a4);
    if (*(int *)a4 >= 1) {
      *a3 = "application of [suppressContractions [set]] failed";
    }
  }
}

icu::UnicodeSet *icu::CollationBuilder::optimize(icu::UnicodeSet *this, const icu::UnicodeSet *a2, const char **a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0) {
    return icu::UnicodeSet::addAll((icu::UVector **)this + 11, a2);
  }
  return this;
}

uint64_t icu::CollationBuilder::addOnlyClosure(icu::CollationDataBuilder **this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, const uint64_t *a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (*(int *)a7 > 0) {
    return a6;
  }
  if (*((unsigned __int16 *)a2 + 4) <= 0x1Fu)
  {
    uint64_t v52 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    icu::CanonicalIterator::CanonicalIterator((icu::CanonicalIterator *)&v40, a3, a7);
    if (*(int *)a7 >= 1) {
      goto LABEL_64;
    }
    memset((char *)v34 + 8, 0, 56);
    *(void *)&v34[0] = &unk_1EDA47700;
    WORD4(v34[0]) = 2;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    icu::CanonicalIterator::next((icu::CanonicalIterator *)&v40, (icu::UnicodeString *)&v36);
    uint64_t v14 = WORD4(v36);
    if (BYTE8(v36)) {
      goto LABEL_25;
    }
    int v15 = 0;
    while (1)
    {
      if (!icu::CollationBuilder::ignoreString((icu::CollationBuilder *)this, (const icu::UnicodeString *)&v36, a7))
      {
        if (BYTE8(v36))
        {
          uint64_t v14 = *((unsigned __int16 *)a3 + 4);
          if (v14) {
            goto LABEL_24;
          }
        }
        else
        {
          if ((SWORD4(v36) & 0x8000u) == 0) {
            int v16 = WORD4(v36) >> 5;
          }
          else {
            int v16 = HIDWORD(v36);
          }
          unsigned int v17 = *((unsigned __int16 *)a3 + 4);
          if ((v17 & 0x8000u) == 0) {
            unsigned int v18 = v17 >> 5;
          }
          else {
            unsigned int v18 = *((_DWORD *)a3 + 3);
          }
          if ((v17 & 1) == 0 && v16 == v18 && icu::UnicodeString::doEquals((icu::UnicodeString *)&v36, a3, v16)) {
            goto LABEL_24;
          }
        }
        if (v15 >= 6561)
        {
          uint64_t v14 = 31;
          *a7 = U_INPUT_TOO_LONG_ERROR;
LABEL_25:
          icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v36);
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v34);
          goto LABEL_64;
        }
        a6 = icu::CollationBuilder::addIfDifferent(this, (const icu::UnicodeString *)v34, (const icu::UnicodeString *)&v36, a4, a5, a6, a7);
        uint64_t v14 = *(unsigned int *)a7;
        if ((int)v14 >= 1) {
          goto LABEL_25;
        }
        ++v15;
      }
LABEL_24:
      icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v36);
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      icu::CanonicalIterator::next((icu::CanonicalIterator *)&v40, (icu::UnicodeString *)&v36);
      uint64_t v14 = WORD4(v36);
      if (BYTE8(v36)) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v52 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  icu::CanonicalIterator::CanonicalIterator((icu::CanonicalIterator *)&v40, a2, a7);
  uint64_t v35 = 0;
  memset(v34, 0, sizeof(v34));
  icu::CanonicalIterator::CanonicalIterator((icu::CanonicalIterator *)v34, a3, a7);
  if (*(int *)a7 > 0) {
    goto LABEL_63;
  }
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  icu::CanonicalIterator::next((icu::CanonicalIterator *)&v40, (icu::UnicodeString *)&v36);
  uint64_t v20 = (void *)WORD4(v36);
  if (BYTE8(v36))
  {
LABEL_62:
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v36);
    goto LABEL_63;
  }
  int v21 = 0;
  while (1)
  {
    uint64_t v22 = (void *)*(unsigned int *)a7;
    if ((int)v22 <= 0)
    {
      if ((*(unsigned int (**)(icu::CollationDataBuilder *, long long *, UErrorCode *))(*(void *)this[2]
                                                                                                 + 88))(this[2], &v36, a7))
      {
        break;
      }
    }
LABEL_61:
    icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v36);
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    icu::CanonicalIterator::next((icu::CanonicalIterator *)&v40, (icu::UnicodeString *)&v36);
    uint64_t v20 = (void *)WORD4(v36);
    if (BYTE8(v36)) {
      goto LABEL_62;
    }
  }
  if (BYTE8(v36))
  {
    int v23 = *((_WORD *)a2 + 4) & 1;
  }
  else
  {
    int v23 = 0;
    if ((SWORD4(v36) & 0x8000u) == 0) {
      int v24 = WORD4(v36) >> 5;
    }
    else {
      int v24 = HIDWORD(v36);
    }
    unsigned int v25 = *((unsigned __int16 *)a2 + 4);
    if ((v25 & 0x8000u) == 0) {
      unsigned int v26 = v25 >> 5;
    }
    else {
      unsigned int v26 = *((_DWORD *)a2 + 3);
    }
    if ((v25 & 1) == 0 && v24 == v26) {
      int v23 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v36, a2, v24);
    }
  }
  while (1)
  {
    memset(v33, 0, sizeof(v33));
    icu::CanonicalIterator::next((icu::CanonicalIterator *)v34, (icu::UnicodeString *)v33);
    if (BYTE8(v33[0]))
    {
      icu::UnicodeString::~UnicodeString((void *)WORD4(v33[0]), (icu::UnicodeString *)v33);
      icu::CanonicalIterator::reset((uint64_t)v34);
      goto LABEL_61;
    }
    if (icu::CollationBuilder::ignoreString((icu::CollationBuilder *)this, (const icu::UnicodeString *)v33, a7)) {
      goto LABEL_58;
    }
    if (v23)
    {
      if (BYTE8(v33[0]))
      {
        uint64_t v27 = *((unsigned __int16 *)a3 + 4);
        if (v27) {
          goto LABEL_58;
        }
      }
      else
      {
        if ((SWORD4(v33[0]) & 0x8000u) == 0) {
          int v28 = WORD4(v33[0]) >> 5;
        }
        else {
          int v28 = HIDWORD(v33[0]);
        }
        unsigned int v29 = *((unsigned __int16 *)a3 + 4);
        if ((v29 & 0x8000u) == 0) {
          unsigned int v30 = v29 >> 5;
        }
        else {
          unsigned int v30 = *((_DWORD *)a3 + 3);
        }
        if ((v29 & 1) == 0 && v28 == v30 && icu::UnicodeString::doEquals((icu::UnicodeString *)v33, a3, v28)) {
          goto LABEL_58;
        }
      }
    }
    if (v21 >= 6561) {
      break;
    }
    a6 = icu::CollationBuilder::addIfDifferent(this, (const icu::UnicodeString *)&v36, (const icu::UnicodeString *)v33, a4, a5, a6, a7);
    uint64_t v27 = *(unsigned int *)a7;
    if ((int)v27 >= 1) {
      goto LABEL_67;
    }
    ++v21;
LABEL_58:
    icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)v33);
  }
  uint64_t v27 = 31;
  *a7 = U_INPUT_TOO_LONG_ERROR;
LABEL_67:
  icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)v33);
  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v36);
LABEL_63:
  icu::CanonicalIterator::~CanonicalIterator((icu::CanonicalIterator *)v34);
LABEL_64:
  icu::CanonicalIterator::~CanonicalIterator((icu::CanonicalIterator *)&v40);
  return a6;
}

void *icu::CollationBuilder::addTailComposites(void *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    unsigned int v5 = *((unsigned __int16 *)a3 + 4);
    int v6 = (__int16)v5;
    uint64_t v7 = v5 >> 5;
    uint64_t v8 = v6 >= 0 ? v7 : *((unsigned int *)a3 + 3);
    if (v8)
    {
      uint64_t v11 = (uint64_t)this;
      while (1)
      {
        unint64_t v12 = icu::UnicodeString::char32At((uint64_t *)v7, a3, (int)v8 - 1);
        this = (void *)(*(uint64_t (**)(void, uint64_t *))(**(void **)(v11 + 8) + 80))(*(void *)(v11 + 8), v12);
        if (!this) {
          break;
        }
        if (v12 >= 0x10000) {
          uint64_t v7 = 4294967294;
        }
        else {
          uint64_t v7 = 0xFFFFFFFFLL;
        }
        uint64_t v8 = (v7 + v8);
        if (!v8) {
          return this;
        }
      }
      if ((v12 - 4371) <= 0xFFFFFFEC)
      {
        uint64_t v23 = 0;
        memset(v22, 0, sizeof(v22));
        icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v22);
        if (icu::Normalizer2Impl::getCanonStartSet(*(icu::Normalizer2Impl **)(v11 + 24), v12, (icu::UnicodeSet *)v22))
        {
          long long v51 = 0u;
          uint64_t v54 = 0;
          long long v53 = 0u;
          long long v52 = 0u;
          uint64_t v49 = 0;
          long long v50 = &unk_1EDA47700;
          LOWORD(v51) = 2;
          long long v46 = 0u;
          long long v48 = 0u;
          long long v47 = 0u;
          long long v45 = &unk_1EDA47700;
          LOWORD(v46) = 2;
          long long v41 = 0u;
          uint64_t v44 = 0;
          long long v43 = 0u;
          long long v42 = 0u;
          long long v40 = &unk_1EDA47700;
          LOWORD(v41) = 2;
          uint64_t v39 = 0;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          *(_OWORD *)int v24 = 0u;
          memset(v21, 0, sizeof(v21));
          icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v21, (const icu::UnicodeSet *)v22);
          while (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v21))
          {
            unsigned int v14 = DWORD2(v21[0]);
            (*(void (**)(void, void, void **))(**(void **)(v11 + 8) + 56))(*(void *)(v11 + 8), DWORD2(v21[0]), &v50);
            if (icu::CollationBuilder::mergeCompositeIntoString((icu::CollationBuilder *)v11, a3, v8, v14, (const icu::UnicodeString *)&v50, (icu::UnicodeString *)&v45, (icu::UnicodeString *)&v40, a4))
            {
              int CEs = icu::CollationDataBuilder::getCEs(*(icu::CollationDataBuilder **)(v11 + 72), a2, (const icu::UnicodeString *)&v45, v24, 0);
              if ((int)CEs <= 31)
              {
                uint64_t v16 = (uint64_t)CEs;
                uint64_t v17 = icu::CollationBuilder::addIfDifferent((icu::CollationDataBuilder **)v11, a2, (const icu::UnicodeString *)&v40, v24, (uint64_t)CEs, 0xFFFFFFFFLL, a4);
                if (v17 != -1) {
                  icu::CollationBuilder::addOnlyClosure((icu::CollationDataBuilder **)v11, a2, (const icu::UnicodeString *)&v45, v24, v16, v17, a4);
                }
              }
            }
          }
          icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v21);
          icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v40);
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v45);
          icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v50);
        }
        return icu::UnicodeSet::~UnicodeSet(v13, (icu::UnicodeSet *)v22);
      }
    }
  }
  return this;
}

uint64_t icu::CollationBuilder::mergeCompositeIntoString(icu::CollationBuilder *this, const icu::UnicodeString *a2, uint64_t a3, unsigned int a4, const icu::UnicodeString *a5, icu::UnicodeString *a6, icu::UnicodeString *a7, UErrorCode *a8)
{
  if (*(int *)a8 > 0) {
    return 0;
  }
  int v16 = icu::UnicodeString::moveIndex32(a5, 0, 1);
  uint64_t result = 0;
  unsigned int v17 = *((unsigned __int16 *)a5 + 4);
  if ((v17 & 0x8000u) == 0) {
    int v18 = v17 >> 5;
  }
  else {
    int v18 = *((_DWORD *)a5 + 3);
  }
  if (v16 == v18) {
    return result;
  }
  if ((v17 & 1) == 0)
  {
    if (v16 < 0)
    {
      int v19 = 0;
    }
    else
    {
      int v19 = v18;
      int v20 = v16;
      if (v18 >= v16)
      {
LABEL_15:
        if ((v17 & 2) != 0) {
          int v21 = (char *)a5 + 10;
        }
        else {
          int v21 = (char *)*((void *)a5 + 3);
        }
        uint64_t result = icu::UnicodeString::doCompare((uint64_t)a2, a3, 0x7FFFFFFF, (uint64_t)v21, v20, v18 - v20);
        if (result) {
          goto LABEL_19;
        }
        return result;
      }
    }
    int v20 = v19;
    goto LABEL_15;
  }
  uint64_t result = (*((_WORD *)a2 + 4) & 1) == 0;
  if ((*((_WORD *)a2 + 4) & 1) == 0)
  {
LABEL_19:
    icu::UnicodeString::unBogus((uint64_t)a6);
    unsigned int v22 = *((unsigned __int16 *)a6 + 4);
    int v23 = (__int16)v22;
    unsigned int v24 = v22 >> 5;
    if (v23 >= 0) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = *((unsigned int *)a6 + 3);
    }
    icu::UnicodeString::doReplace(a6, 0, v25, a2, 0, a3);
    icu::UnicodeString::unBogus((uint64_t)a7);
    unsigned int v26 = *((unsigned __int16 *)a7 + 4);
    int v27 = (__int16)v26;
    unsigned int v28 = v26 >> 5;
    if (v27 >= 0) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = *((unsigned int *)a7 + 3);
    }
    uint64_t v49 = a7;
    uint64_t v30 = icu::UnicodeString::doReplace(a7, 0, v29, a2, 0, (a3 - v16));
    icu::UnicodeString::append(v30, a4);
    unsigned __int8 v31 = 0;
LABEL_26:
    unsigned int v32 = *((unsigned __int16 *)a2 + 4);
    int v33 = (__int16)v32;
    LODWORD(v34) = v32 >> 5;
    if (v33 >= 0) {
      unint64_t v34 = v34;
    }
    else {
      unint64_t v34 = *((unsigned int *)a2 + 3);
    }
    if ((int)a3 >= (int)v34)
    {
      LODWORD(v38) = *((unsigned __int16 *)a5 + 4);
      signed int v40 = *((_DWORD *)a5 + 3);
      unsigned int v39 = v38 >> 5;
    }
    else
    {
      long long v35 = icu::UnicodeString::char32At((uint64_t *)v34, a2, a3);
      unsigned __int8 v36 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 1) + 80))(*((void *)this + 1), v35);
      while (1)
      {
        unsigned int v37 = *((unsigned __int16 *)a5 + 4);
        long long v38 = (uint64_t *)(__int16)v37;
        unsigned int v39 = v37 >> 5;
        signed int v40 = *((_DWORD *)a5 + 3);
        int v41 = (int)v38 >= 0 ? v39 : *((_DWORD *)a5 + 3);
        if (v16 >= v41) {
          break;
        }
        long long v42 = icu::UnicodeString::char32At(v38, a5, v16);
        unsigned int v43 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 1) + 80))(*((void *)this + 1), v42);
        if ((v43 - 1) >= v36) {
          return 0;
        }
        unsigned __int8 v31 = v43;
        if (v43 >= v36)
        {
          if (v42 != v35) {
            return 0;
          }
          icu::UnicodeString::append((uint64_t)a6, v35);
          if (v35 < 0x10000) {
            int v44 = 1;
          }
          else {
            int v44 = 2;
          }
          LODWORD(a3) = v44 + a3;
          LODWORD(v35) = -1;
        }
        else
        {
          icu::UnicodeString::append((uint64_t)a6, v42);
          if (v42 < 0x10000) {
            int v44 = 1;
          }
          else {
            int v44 = 2;
          }
        }
        v16 += v44;
        if ((v35 & 0x80000000) != 0) {
          goto LABEL_26;
        }
      }
      if ((v35 & 0x80000000) == 0)
      {
        if (v36 < v31) {
          return 0;
        }
        icu::UnicodeString::doAppend((uint64_t)a6, a2, a3, 0x7FFFFFFFLL);
        long long v45 = v49;
        long long v46 = a2;
        int v47 = a3;
        goto LABEL_56;
      }
    }
    if ((__int16)v38 >= 0) {
      signed int v48 = v39;
    }
    else {
      signed int v48 = v40;
    }
    if (v16 >= v48) {
      return 1;
    }
    long long v45 = a6;
    long long v46 = a5;
    int v47 = v16;
LABEL_56:
    icu::UnicodeString::doAppend((uint64_t)v45, v46, v47, 0x7FFFFFFFLL);
    return 1;
  }
  return result;
}

BOOL icu::CollationBuilder::isFCD(icu::CollationBuilder *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  return *(int *)a3 <= 0
      && (*(unsigned int (**)(void, const icu::UnicodeString *))(**((void **)this + 2) + 88))(*((void *)this + 2), a2) != 0;
}

BOOL icu::CollationBuilder::sameCEs(icu::CollationBuilder *this, const uint64_t *a2, void *a3, const uint64_t *a4)
{
  if (a2 != a4) {
    return 0;
  }
  if ((int)a2 < 1) {
    return 1;
  }
  if (*(void *)this != *a3) {
    return 0;
  }
  uint64_t v4 = 1;
  do
  {
    unint64_t v5 = v4;
    if (a2 == v4) {
      break;
    }
    uint64_t v6 = *((void *)this + v4);
    uint64_t v7 = a3[v4++];
  }
  while (v6 == v7);
  return v5 >= a2;
}

uint64_t icu::CollationBuilder::countTailoredNodes(icu::CollationBuilder *this, const uint64_t *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v5 = *((void *)this + (int)a2);
    if ((v5 & 3) < a3) {
      break;
    }
    if ((v5 & 3) == a3)
    {
      if ((v5 & 8) == 0) {
        return result;
      }
      uint64_t result = (result + 1);
    }
    LODWORD(a2) = (v5 >> 8) & 0xFFFFF;
  }
  while (a2);
  return result;
}

void sub_18C8E3144(icu::CollationDataBuilder::CEModifier *a1)
{
  icu::CollationDataBuilder::CEModifier::~CEModifier(a1);

  icu::UMemory::operator delete(v1);
}

icu::RuleBasedCollator *ucol_openRules(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, UParseError *a5, icu::CollationRoot *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t *)*(unsigned int *)a6;
  if ((int)v6 > 0) {
    return 0;
  }
  unsigned int v12 = a2;
  if (!a1 && a2)
  {
    uint64_t v7 = 0;
    int v14 = 1;
LABEL_11:
    *(_DWORD *)a6 = v14;
    return v7;
  }
  int v15 = (icu::RuleBasedCollator *)icu::UMemory::operator new(v6, (icu::UMemory *)0x110, a2);
  uint64_t v7 = v15;
  if (!v15)
  {
    int v14 = 7;
    goto LABEL_11;
  }
  icu::RuleBasedCollator::RuleBasedCollator(v15);
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = a1;
  icu::UnicodeString::UnicodeString(v20, v12 >> 31, &v19);
  icu::RuleBasedCollator::internalBuildTailoring(v7, (UErrorCode *)v20, a4, a3, a5, 0, a6);
  int v16 = (void *)*(unsigned int *)a6;
  if ((int)v16 >= 1)
  {
    icu::RuleBasedCollator::~RuleBasedCollator(v7);
    icu::UMemory::operator delete(v17);
    uint64_t v7 = 0;
  }
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v20);
  return v7;
}

uint64_t ucol_getUnsafeSet(void *a1, icu::UnicodeSet *a2, UErrorCode *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  bzero(v21, 0x400uLL);
  uset_clear(a2);
  uset_applyPattern(a2, (uint64_t)"[", 24, 1u, a3);
  uset_addRange(a2, 55296, 57343);
  uint64_t v6 = uset_open(0, 0);
  int v20 = (int *)a3;
  ucol_getContractionsAndExpansions(a1, v6, 0, 0, a3);
  int v7 = uset_size(v6);
  if (v7 >= 1)
  {
    int v8 = v7;
    for (int i = 0; i != v8; ++i)
    {
      Iteuint64_t m = uset_getItem(v6, i, 0, 0, v21, 512, v20);
      if (Item >= 1)
      {
        int v11 = Item;
        int v12 = 0;
        while (1)
        {
          uint64_t v13 = v12 + 1;
          uint64_t v14 = v21[v12];
          if ((v14 & 0xFC00) != 0xD800 || v13 == v11)
          {
            ++v12;
          }
          else
          {
            int v16 = v21[v13];
            BOOL v17 = (v16 & 0xFC00) == 56320;
            unsigned int v18 = v16 + (v14 << 10) - 56613888;
            if (v17) {
              v12 += 2;
            }
            else {
              ++v12;
            }
            uint64_t v14 = v17 ? v18 : v14;
          }
          if (v12 >= v11) {
            break;
          }
          uset_add(a2, v14);
        }
      }
    }
  }
  uset_close(v6);
  return uset_size(a2);
}

uint64_t sub_18C8E3468(uint64_t a1, unsigned int a2)
{
  uint64_t result = 0x101000100;
  if ((a2 & 0xFE) != 0 && ((a2 >> 8) & 0xFE) - 70 >= 0xFFFFFFC0) {
    return *(void *)(*(void *)(a1 + 8)
  }
                     + 8
                     * (((a2 - 1077937696) >> 11) & 0xFE000 | ((a2 - 1077937696) >> 10) & 0x1FC0 | ((a2 - 1077937696) >> 8) & 0x3F)) | (a2 << 8) & 0xC000;
  return result;
}

uint64_t sub_18C8E34C8(uint64_t a1, uint64_t a2)
{
  if ((a2 - 1174405120) >> 30 == 3) {
    return *(void *)(*(void *)(a1 + 8)
  }
                     + 8
                     * (((unint64_t)(a2 - 0x4040000006002000) >> 43) & 0xFE000 | ((unint64_t)(a2 - 0x4040000006002000) >> 42) & 0x1FC0 | ((unint64_t)(a2 - 0x4040000006002000) >> 24) & 0x3F)) | (unsigned __int16)a2 & 0xC000;
  else {
    return 0x101000100;
  }
}

void sub_18C8E3520(icu::CollationRuleParser::Importer *a1)
{
  icu::CollationRuleParser::Importer::~Importer(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C8E3548(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5, int *a6)
{
}

unint64_t icu::CollationCompare::compareUpToQuaternary(icu::CollationCompare *this, icu::CollationIterator *a2, icu::CollationIterator *a3, UErrorCode *a4, UErrorCode *a5)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  int v10 = 0;
  int v93 = *((_DWORD *)a3 + 6);
  if ((v93 & 0xC) != 0) {
    unsigned int v11 = *((_DWORD *)a3 + 7) + 1;
  }
  else {
    unsigned int v11 = 0;
  }
  do
  {
    while (1)
    {
      unint64_t v12 = sub_18C8DCA60(this, a4);
      uint64_t i = HIDWORD(v12);
      if (v11 > HIDWORD(v12) && HIDWORD(v12) >= 0x2000001) {
        break;
      }
      if (HIDWORD(v12)) {
        goto LABEL_16;
      }
    }
    do
    {
      *(void *)(*((void *)this + 4) + 8 * *((int *)this + 92) - 8) = v12 & 0xFFFFFFFF00000000;
      unint64_t v12 = sub_18C8DCA60(this, a4);
      for (uint64_t i = HIDWORD(v12); !HIDWORD(v12); uint64_t i = HIDWORD(v12))
      {
        *(void *)(*((void *)this + 4) + 8 * *((int *)this + 92) - 8) = 0;
        unint64_t v12 = sub_18C8DCA60(this, a4);
      }
      int v10 = 1;
    }
    while (v11 > i && i > 0x2000000);
LABEL_16:
    while (1)
    {
      unint64_t result = sub_18C8DCA60(a2, a4);
      unint64_t j = HIDWORD(result);
      if (v11 > HIDWORD(result) && HIDWORD(result) >= 0x2000001) {
        break;
      }
      if (HIDWORD(result)) {
        goto LABEL_26;
      }
    }
    do
    {
      *(void *)(*((void *)a2 + 4) + 8 * *((int *)a2 + 92) - 8) = result & 0xFFFFFFFF00000000;
      unint64_t result = sub_18C8DCA60(a2, a4);
      for (unint64_t j = HIDWORD(result); !HIDWORD(result); unint64_t j = HIDWORD(result))
      {
        *(void *)(*((void *)a2 + 4) + 8 * *((int *)a2 + 92) - 8) = 0;
        unint64_t result = sub_18C8DCA60(a2, a4);
      }
      int v10 = 1;
    }
    while (v11 > j && j > 0x2000000);
LABEL_26:
    if (i != j)
    {
      uint64_t v28 = *((void *)a3 + 4);
      if (v28)
      {
        if (i < 2 || *(unsigned char *)(v28 + ((unint64_t)i >> 24)))
        {
          LODWORD(i) = i & 0xFFFFFF | (*(unsigned __int8 *)(v28 + ((unint64_t)i >> 24)) << 24);
        }
        else
        {
          LODWORD(i) = icu::CollationSettings::reorderEx(a3, i);
          uint64_t v28 = *((void *)a3 + 4);
        }
        int v29 = *(unsigned __int8 *)(v28 + ((unint64_t)j >> 24));
        if (j < 2 || v29) {
          LODWORD(j) = j & 0xFFFFFF | (v29 << 24);
        }
        else {
          LODWORD(j) = icu::CollationSettings::reorderEx(a3, j);
        }
      }
      BOOL v30 = i >= j;
      goto LABEL_58;
    }
  }
  while (i != 1);
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (v93 < 4096)
  {
LABEL_104:
    if ((v93 & 0x400) != 0)
    {
      LODWORD(v54) = 0;
      LODWORD(v55) = 0;
      uint64_t v56 = *((void *)this + 4);
      uint64_t v57 = *((void *)a2 + 4);
      while (1)
      {
        uint64_t v54 = (int)v54;
        if (v93 >= 0x1000)
        {
          do
            unint64_t v58 = *(void *)(v56 + 8 * v54++);
          while (v58 < 0x10000);
          uint64_t v55 = (int)v55;
          do
            unint64_t v60 = *(void *)(v57 + 8 * v55++);
          while (v60 < 0x10000);
        }
        else
        {
          do
          {
            unint64_t v58 = *(void *)(v56 + 8 * v54++);
            if (HIDWORD(v58)) {
              BOOL v59 = v58 == 0;
            }
            else {
              BOOL v59 = 1;
            }
          }
          while (v59);
          uint64_t v55 = (int)v55;
          do
          {
            unint64_t v60 = *(void *)(v57 + 8 * v55++);
            if (HIDWORD(v60)) {
              BOOL v61 = v60 == 0;
            }
            else {
              BOOL v61 = 1;
            }
          }
          while (v61);
        }
        unsigned int v62 = v60 & 0xC000;
        if ((v58 & 0xC000) != v62) {
          break;
        }
        if (WORD1(v58) == 256) {
          goto LABEL_122;
        }
      }
      BOOL v30 = (v58 & 0xC000) >= v62;
      if ((v93 & 0x100) != 0)
      {
        unsigned int v31 = 1;
LABEL_59:
        if (v30) {
          return -v31;
        }
        else {
          return v31;
        }
      }
    }
    else
    {
LABEL_122:
      if (v93 < 0x2000) {
        return 0;
      }
      LODWORD(v63) = 0;
      LODWORD(v64) = 0;
      int v65 = 0;
      if ((v93 & 0x600) == 0x200) {
        int v66 = 65343;
      }
      else {
        int v66 = 16191;
      }
      uint64_t v67 = *((void *)this + 4);
      uint64_t v68 = *((void *)a2 + 4);
      do
      {
        uint64_t v63 = (int)v63;
        do
        {
          uint64_t v69 = *(void *)(v67 + 8 * v63++);
          v65 |= v69;
          unsigned int v70 = v66 & v69;
        }
        while ((v66 & v69) == 0);
        uint64_t v64 = (int)v64;
        do
        {
          uint64_t v71 = *(void *)(v68 + 8 * v64++);
          v65 |= v71;
          unsigned int v72 = v66 & v71;
        }
        while ((v66 & v71) == 0);
        if (v70 != v72)
        {
          int v87 = v93 & 0x700;
          int v88 = v70 + 0x4000;
          if (v69 >= 0x10000) {
            int v88 = v70 ^ 0xC000;
          }
          if (v70 < 0x101) {
            int v88 = v66 & v69;
          }
          int v89 = v72 + 0x4000;
          if (v71 >= 0x10000) {
            int v89 = v72 ^ 0xC000;
          }
          if (v72 < 0x101) {
            int v89 = v66 & v71;
          }
          BOOL v90 = v87 == 768;
          if (v87 == 768) {
            unsigned int v91 = v88;
          }
          else {
            unsigned int v91 = v66 & v69;
          }
          if (v90) {
            unsigned int v92 = v89;
          }
          else {
            unsigned int v92 = v66 & v71;
          }
          BOOL v30 = v91 >= v92;
          goto LABEL_58;
        }
      }
      while (v70 != 256);
      if (v93 < 12288 || !(v10 | v65 & 0xC0)) {
        return 0;
      }
      LODWORD(v73) = 0;
      LODWORD(v74) = 0;
      while (1)
      {
        uint64_t v73 = (int)v73;
        do
        {
          uint64_t v75 = (_DWORD *)(v67 + 8 * v73++);
          int v77 = v75;
          LODWORD(v75) = *v75;
          unsigned int v76 = v77[1];
          unsigned int v78 = (unsigned __int16)v75;
          unsigned int v79 = v75 | 0xFFFFFF3F;
          if (v78 >= 0x101) {
            uint64_t v80 = v79;
          }
          else {
            uint64_t v80 = v76;
          }
        }
        while (!v80);
        uint64_t v74 = (int)v74;
        do
        {
          uint64_t v81 = (_DWORD *)(v68 + 8 * v74++);
          v83 = v81;
          LODWORD(v81) = *v81;
          unsigned int v82 = v83[1];
          unsigned int v84 = (unsigned __int16)v81;
          unsigned int v85 = v81 | 0xFFFFFF3F;
          if (v84 >= 0x101) {
            uint64_t v86 = v85;
          }
          else {
            uint64_t v86 = v82;
          }
        }
        while (!v86);
        if (v80 != v86) {
          break;
        }
        unint64_t result = 0;
        if (v80 == 1) {
          return result;
        }
      }
      if (*((void *)a3 + 4))
      {
        LODWORD(v80) = sub_18C8E3B3C(a3, v80);
        LODWORD(v86) = sub_18C8E3B3C(a3, v86);
      }
      BOOL v30 = v80 >= v86;
    }
LABEL_58:
    unsigned int v31 = -1;
    goto LABEL_59;
  }
  uint64_t v17 = *((void *)this + 4);
  uint64_t v18 = *((void *)a2 + 4);
  if ((v93 & 0x800) != 0)
  {
    int v32 = 0;
    int v33 = 0;
    do
    {
      int v34 = v32;
      uint64_t v35 = v17 + 8 * v32;
      do
      {
        unsigned int v36 = *(_DWORD *)(v35 + 4) - 33554433;
        ++v34;
        v35 += 8;
      }
      while (v36 >> 25 != 127);
      int v37 = v33;
      uint64_t v38 = v18 + 8 * v33;
      do
      {
        int v39 = *(_DWORD *)(v38 + 4);
        ++v37;
        v38 += 8;
      }
      while ((v39 - 33554433) >> 25 != 127);
      int v40 = v34 - 1;
      int v41 = v37 - 1;
      do
      {
        if (v40 <= v32)
        {
          unsigned int v46 = 0;
          BOOL v44 = 1;
        }
        else
        {
          uint64_t v42 = v40 - 1;
          do
          {
            uint64_t v43 = *(void *)(v17 + 8 * v42);
            BOOL v44 = v43 < 0x10000;
            --v40;
            if (WORD1(v43)) {
              BOOL v45 = 1;
            }
            else {
              BOOL v45 = v42 <= v32;
            }
            --v42;
          }
          while (!v45);
          unsigned int v46 = WORD1(v43);
        }
        if (v41 <= v33)
        {
          unsigned int v50 = 0;
        }
        else
        {
          uint64_t v47 = v41 - 1;
          do
          {
            uint64_t v48 = *(void *)(v18 + 8 * v47);
            --v41;
            if (WORD1(v48)) {
              BOOL v49 = 1;
            }
            else {
              BOOL v49 = v47 <= v33;
            }
            --v47;
          }
          while (!v49);
          unsigned int v50 = WORD1(v48);
        }
        if (v44) {
          int v51 = 28;
        }
        else {
          int v51 = 0;
        }
        BOOL v52 = v46 == v50;
        if (v46 < v50) {
          unsigned int v53 = -1;
        }
        else {
          unsigned int v53 = 1;
        }
        if (v52) {
          unint64_t result = result;
        }
        else {
          unint64_t result = v53;
        }
        if (!v52) {
          int v51 = 1;
        }
      }
      while (!v51);
      if (v51 == 28)
      {
        if (v39 == 1) {
          goto LABEL_104;
        }
        int v51 = 0;
        int v32 = v34;
        int v33 = v37;
      }
    }
    while (!v51);
  }
  else
  {
    LODWORD(v19) = 0;
    LODWORD(v20) = 0;
    do
    {
      uint64_t v19 = (int)v19;
      do
        uint64_t v21 = *(void *)(v17 + 8 * v19++);
      while (v21 < 0x10000);
      uint64_t v20 = (int)v20;
      do
        uint64_t v22 = *(void *)(v18 + 8 * v20++);
      while (v22 < 0x10000);
      unsigned int v23 = WORD1(v21);
      BOOL v24 = v23 == 256;
      BOOL v25 = v23 == WORD1(v22);
      if (v23 < WORD1(v22)) {
        unsigned int v26 = -1;
      }
      else {
        unsigned int v26 = 1;
      }
      if (v25) {
        unint64_t result = result;
      }
      else {
        unint64_t result = v26;
      }
      if (v25) {
        int v27 = 16 * v24;
      }
      else {
        int v27 = 1;
      }
    }
    while (!v27);
    if (v27 == 16) {
      goto LABEL_104;
    }
  }
  return result;
}

uint64_t sub_18C8E3B3C(icu::CollationSettings *a1, uint64_t a2)
{
  if (a2 < 2 || *(unsigned char *)(*((void *)a1 + 4) + ((unint64_t)a2 >> 24))) {
    return a2 & 0xFFFFFF | (*(unsigned __int8 *)(*((void *)a1 + 4) + ((unint64_t)a2 >> 24)) << 24);
  }
  else {
    return icu::CollationSettings::reorderEx(a1, a2);
  }
}

uint64_t icu::CollationData::getIndirectCE32(icu::CollationData *this, uint64_t a2)
{
  int v2 = a2 & 0xF;
  switch(v2)
  {
    case 13:
      return 0xFFFFFFFFLL;
    case 11:
      return **((unsigned int **)this + 1);
    case 10:
      return *(unsigned int *)(*((void *)this + 1) + 4 * (a2 >> 13));
  }
  return a2;
}

uint64_t icu::CollationData::getFinalCE32(icu::CollationData *this, uint64_t a2)
{
  if ((~a2 & 0xC0) == 0)
  {
    int v2 = a2 & 0xF;
    switch(v2)
    {
      case 13:
        return 0xFFFFFFFFLL;
      case 11:
        return **((unsigned int **)this + 1);
      case 10:
        return *(unsigned int *)(*((void *)this + 1) + 4 * (a2 >> 13));
    }
  }
  return a2;
}

uint64_t icu::CollationData::getSingleCE(icu::CollationData *this, icu::Collation *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  uint64_t v6 = (uint64_t *)this;
  unsigned int v7 = sub_18C8DD7F8((uint64_t *)this, a2);
  if (v7 == 192)
  {
    uint64_t v6 = (uint64_t *)v6[4];
    unsigned int v7 = sub_18C8DD7F8(v6, a2);
  }
  while (2)
  {
    if ((~v7 & 0xC0) != 0) {
      return (v7 << 16) & 0xFF000000 | ((unint64_t)((v7 & 0xFFFF0000) >> 16) << 48) | (v7 << 8);
    }
    switch(v7 & 0xF)
    {
      case 1u:
        return ((unint64_t)((v7 & 0xFFFFFF00) >> 8) << 40) | 0x5000500;
      case 2u:
        return v7 & 0xFFFFFF00;
      case 4u:
      case 7u:
      case 8u:
      case 9u:
      case 0xCu:
      case 0xDu:
        goto LABEL_18;
      case 5u:
        if ((v7 & 0x1F00) == 0x100) {
          goto LABEL_8;
        }
        goto LABEL_18;
      case 6u:
        if ((v7 & 0x1F00) == 0x100)
        {
          uint64_t result = *(void *)(v6[2] + 8 * (v7 >> 13));
        }
        else
        {
LABEL_18:
          uint64_t result = 0;
          UErrorCode v9 = U_UNSUPPORTED_ERROR;
LABEL_19:
          *a3 = v9;
        }
        break;
      case 0xAu:
LABEL_8:
        int v8 = (unsigned int *)(v6[1] + 4 * (v7 >> 13));
        goto LABEL_10;
      case 0xBu:
        int v8 = (unsigned int *)v6[1];
LABEL_10:
        unsigned int v7 = *v8;
        continue;
      case 0xEu:
        uint64_t ThreeBytePrimaryForOffsetData = icu::Collation::getThreeBytePrimaryForOffsetData(a2, *(void *)(v6[2] + 8 * (v7 >> 13)));
        return (ThreeBytePrimaryForOffsetData << 32) | 0x5000500;
      case 0xFu:
        uint64_t ThreeBytePrimaryForOffsetData = icu::Collation::unassignedPrimaryFromCodePoint(a2);
        return (ThreeBytePrimaryForOffsetData << 32) | 0x5000500;
      default:
        uint64_t result = 0;
        UErrorCode v9 = U_INTERNAL_PROGRAM_ERROR;
        goto LABEL_19;
    }
    return result;
  }
}

uint64_t icu::CollationData::getFirstPrimaryForGroup(icu::CollationData *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  int v2 = *((_DWORD *)this + 25);
  if (v2 <= (int)a2)
  {
    if ((a2 & 0xFFFFFFF8) != 0x1000) {
      return 0;
    }
    uint64_t v3 = (unsigned __int16 *)(*((void *)this + 13) + 2 * (int)(a2 + v2 - 4096));
  }
  else
  {
    uint64_t v3 = (unsigned __int16 *)(*((void *)this + 13) + 2 * a2);
  }
  uint64_t v4 = *v3;
  if (v4) {
    return *(unsigned __int16 *)(*((void *)this + 14) + 2 * v4) << 16;
  }
  return 0;
}

uint64_t icu::CollationData::getScriptIndex(icu::CollationData *this, unsigned int a2)
{
  if ((a2 & 0x80000000) == 0)
  {
    int v2 = *((_DWORD *)this + 25);
    if (v2 > (int)a2)
    {
      uint64_t v3 = (unsigned __int16 *)(*((void *)this + 13) + 2 * a2);
      return *v3;
    }
    if ((a2 & 0xFFFFFFF8) == 0x1000)
    {
      uint64_t v3 = (unsigned __int16 *)(*((void *)this + 13) + 2 * (int)(a2 + v2 - 4096));
      return *v3;
    }
  }
  return 0;
}

uint64_t icu::CollationData::getLastPrimaryForGroup(icu::CollationData *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  int v2 = *((_DWORD *)this + 25);
  if (v2 <= (int)a2)
  {
    if ((a2 & 0xFFFFFFF8) != 0x1000) {
      return 0;
    }
    uint64_t v3 = (unsigned __int16 *)(*((void *)this + 13) + 2 * (int)(a2 + v2 - 4096));
  }
  else
  {
    uint64_t v3 = (unsigned __int16 *)(*((void *)this + 13) + 2 * a2);
  }
  uint64_t v4 = *v3;
  if (v4) {
    return (*(unsigned __int16 *)(*((void *)this + 14) + 2 * v4 + 2) << 16) - 1;
  }
  return 0;
}

uint64_t icu::CollationData::getGroupForPrimary(icu::CollationData *this, unsigned int a2)
{
  unsigned int v2 = HIWORD(a2);
  uint64_t v3 = *((void *)this + 14);
  if (HIWORD(a2) < *(unsigned __int16 *)(v3 + 2) || v2 >= *(unsigned __int16 *)(v3 + 2 * *((int *)this + 30) - 2)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 4;
  do
    unsigned int v6 = *(unsigned __int16 *)(v5 + 2 * v4++);
  while (v6 <= v2);
  uint64_t v7 = *((unsigned int *)this + 25);
  uint64_t v8 = *((void *)this + 13);
  if ((int)v7 < 1)
  {
LABEL_9:
    uint64_t v10 = 0;
    uint64_t v11 = v8 + 2 * (int)v7;
    while (*(unsigned __int16 *)(v11 + 2 * v10) != v4)
    {
      if (++v10 == 8) {
        return 0xFFFFFFFFLL;
      }
    }
    return (v10 + 4096);
  }
  else
  {
    uint64_t result = 0;
    while (*(unsigned __int16 *)(v8 + 2 * result) != v4)
    {
      if (v7 == ++result) {
        goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t icu::CollationData::getEquivalentScripts(icu::CollationData *this, unsigned int a2, unsigned int *a3, int a4, UErrorCode *a5)
{
  uint64_t v5 = 0;
  if ((a2 & 0x80000000) != 0 || *(int *)a5 > 0) {
    return v5;
  }
  int v6 = *((_DWORD *)this + 25);
  if (v6 <= (int)a2)
  {
    if ((a2 & 0xFFFFFFF8) != 0x1000) {
      return 0;
    }
    uint64_t v7 = *((void *)this + 13);
    uint64_t v8 = (_WORD *)(v7 + 2 * (int)(a2 + v6 - 4096));
  }
  else
  {
    uint64_t v7 = *((void *)this + 13);
    uint64_t v8 = (_WORD *)(v7 + 2 * a2);
  }
  int v9 = (unsigned __int16)*v8;
  if (!*v8) {
    return 0;
  }
  if (a2 <= 0xFFF)
  {
    if (v6 < 1)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v5 = 0;
      do
      {
        if (v9 == *(unsigned __int16 *)(v7 + 2 * v10))
        {
          if ((int)v5 < a4)
          {
            a3[(int)v5] = v10;
            int v6 = *((_DWORD *)this + 25);
          }
          uint64_t v5 = (v5 + 1);
        }
        ++v10;
      }
      while (v10 < v6);
    }
    if ((int)v5 > a4) {
      *a5 = U_BUFFER_OVERFLOW_ERROR;
    }
  }
  else
  {
    if (a4 < 1) {
      *a5 = U_BUFFER_OVERFLOW_ERROR;
    }
    else {
      *a3 = a2;
    }
    return 1;
  }
  return v5;
}

uint64_t icu::CollationData::makeReorderRanges(icu::CollationData *this, const int *a2, int a3, icu::UVector32 *a4, UErrorCode *a5)
{
  return icu::CollationData::makeReorderRanges((uint64_t)this, a2, a3, 0, a4, a5);
}

uint64_t icu::CollationData::makeReorderRanges(uint64_t this, const int *a2, int a3, int a4, icu::UVector32 *a5, UErrorCode *a6)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 > 0) {
    return this;
  }
  uint64_t v11 = this;
  this = icu::UVector32::removeAllElements((uint64_t)a5);
  if (!a3 || a3 == 1 && *a2 == 103) {
    return this;
  }
  memset(v55, 0, sizeof(v55));
  uint64_t v12 = *(void *)(v11 + 104);
  uint64_t v13 = *(int *)(v11 + 100);
  if (*(_WORD *)(v12 + 2 * v13 + 28)) {
    *((unsigned char *)v55 + *(unsigned __int16 *)(v12 + 2 * v13 + 2icu::UnicodeString::~UnicodeString((icu::AlphabeticIndex::Record *)((char *)this + 8)) = -1;
  }
  if (*(_WORD *)(v12 + 2 * ((int)v13 + 15))) {
    *((unsigned char *)v55 + *(unsigned __int16 *)(v12 + 2 * ((int)v13 + 15))) = -1;
  }
  uint64_t v14 = *(void *)(v11 + 112);
  signed int v15 = *(unsigned __int16 *)(v14 + 2);
  int v16 = *(_DWORD *)(v11 + 120);
  uint64_t v17 = (v16 - 1);
  signed int v18 = *(unsigned __int16 *)(v14 + 2 * (int)v17);
  uint64_t v19 = a3;
  if (a3 < 1)
  {
    unsigned int v20 = 0;
  }
  else
  {
    unsigned int v20 = 0;
    uint64_t v21 = a3;
    uint64_t v22 = a2;
    do
    {
      int v23 = *v22++;
      int v24 = 1 << v23;
      if ((v23 & 0xFFFFFFF8) != 0x1000) {
        int v24 = 0;
      }
      v20 |= v24;
      --v21;
    }
    while (v21);
  }
  uint64_t v25 = 0;
  this = v12 + 2 * v13;
  do
  {
    uint64_t v26 = *(unsigned __int16 *)(this + 2 * v25);
    if (*(_WORD *)(this + 2 * v25) && ((v20 >> v25) & 1) == 0)
    {
      int v27 = (__int16 *)(v14 + 2 * v26);
      __int16 v28 = *v27;
      if (*v27 < v15) {
        LOWORD(v15) = v15 + 256;
      }
      *((unsigned char *)v55 + v26) = BYTE1(v15);
      signed int v15 = (((v27[1] & 0xFF00) - (v28 & 0xFF00)) & 0xFFFFFF00 | v27[1]) + (v15 & 0xFF00);
    }
    ++v25;
  }
  while (v25 != 8);
  if (v20)
  {
    unsigned int v20 = 0;
  }
  else if (!a4 && *a2 == 25)
  {
    unsigned int v20 = (*(_WORD *)(v14 + 2 * *(unsigned __int16 *)(v12 + 50)) - (_WORD)v15) & 0xFF00;
    signed int v15 = *(unsigned __int16 *)(v14 + 2 * *(unsigned __int16 *)(v12 + 50));
  }
  if (a3 < 1)
  {
    BOOL v30 = 1;
    goto LABEL_61;
  }
  uint64_t v29 = 0;
  BOOL v30 = 0;
  this = (v13 - 4096);
  while (1)
  {
    uint64_t v31 = a2[v29];
    if (v31 == -1)
    {
LABEL_96:
      UErrorCode v46 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_97:
      *a6 = v46;
      return this;
    }
    if (v31 == 103) {
      break;
    }
    if ((v31 & 0x80000000) == 0)
    {
      if ((int)v13 > (int)v31) {
        goto LABEL_37;
      }
      if ((v31 & 0xFFFFFFF8) == 0x1000)
      {
        uint64_t v31 = (int)this + (int)v31;
LABEL_37:
        uint64_t v32 = *(unsigned __int16 *)(v12 + 2 * v31);
        if (*(_WORD *)(v12 + 2 * v31))
        {
          if (*((unsigned char *)v55 + v32)) {
            goto LABEL_96;
          }
          int v33 = (__int16 *)(v14 + 2 * v32);
          __int16 v34 = *v33;
          if (*v33 < v15) {
            LOWORD(v15) = v15 + 256;
          }
          *((unsigned char *)v55 + v32) = BYTE1(v15);
          signed int v15 = (((v33[1] & 0xFF00) - (v34 & 0xFF00)) & 0xFFFFFF00 | v33[1]) + (v15 & 0xFF00);
        }
      }
    }
    BOOL v30 = ++v29 >= (unint64_t)a3;
    if (a3 == v29) {
      goto LABEL_61;
    }
  }
  if ((int)v29 + 1 < a3)
  {
    uint64_t v35 = v29 + 1;
    while (1)
    {
      uint64_t v36 = a2[v19 - 1];
      BOOL v37 = v36 == 103 || v36 == -1;
      if (v37) {
        goto LABEL_96;
      }
      if ((v36 & 0x80000000) == 0)
      {
        if ((int)v13 > (int)v36) {
          goto LABEL_55;
        }
        if ((v36 & 0xFFFFFFF8) == 0x1000) {
          break;
        }
      }
LABEL_60:
      if (v35 >= --v19) {
        goto LABEL_61;
      }
    }
    uint64_t v36 = (int)this + (int)v36;
LABEL_55:
    uint64_t v38 = *(unsigned __int16 *)(v12 + 2 * v36);
    if (v38)
    {
      if (*((unsigned char *)v55 + v38)) {
        goto LABEL_96;
      }
      int v39 = (__int16 *)(v14 + 2 * v38);
      __int16 v40 = v39[1];
      if (v40 > v18) {
        LOWORD(v18) = v18 - 256;
      }
      __int16 v41 = *v39;
      unsigned int v42 = (v18 & 0xFF00) + (v41 & 0xFF00) - (v40 & 0xFF00);
      unsigned int v43 = v42 >> 8;
      signed int v18 = v42 & 0xFFFFFF00 | v41;
      *((unsigned char *)v55 + v38) = v43;
    }
    goto LABEL_60;
  }
LABEL_61:
  if (v16 >= 3)
  {
    uint64_t v44 = 1;
    do
    {
      if (*((unsigned char *)v55 + v44))
      {
        ++v44;
      }
      else
      {
        signed int v45 = *(unsigned __int16 *)(v14 + 2 * v44);
        if (v30 && v15 < v45) {
          LOWORD(v15) = *(_WORD *)(v14 + 2 * v44);
        }
        if (*(_WORD *)(v14 + 2 * v44) < v15) {
          LOWORD(v15) = v15 + 256;
        }
        *((unsigned char *)v55 + v44++) = BYTE1(v15);
        this = *(unsigned __int16 *)(v14 + 2 * v44);
        signed int v15 = (((this & 0xFF00) - (v45 & 0xFF00)) & 0xFFFFFF00 | *(_WORD *)(v14 + 2 * v44))
            + (v15 & 0xFF00);
      }
    }
    while (v44 != v17);
  }
  if (v15 <= v18)
  {
    uint64_t v47 = 0;
    LODWORD(v48) = 1;
    while (1)
    {
      uint64_t v49 = v47;
      int v50 = v16 - 1;
      if ((int)v48 >= v50)
      {
LABEL_81:
        uint64_t v47 = v49;
        if (!v49) {
          goto LABEL_82;
        }
      }
      else
      {
        uint64_t v48 = (int)v48;
        while (1)
        {
          int v51 = *((unsigned __int8 *)v55 + v48);
          if (v51 != 255)
          {
            uint64_t v47 = v51 - *(unsigned __int8 *)(*(void *)(v11 + 112) + 2 * v48 + 1);
            if (v47 != v49) {
              break;
            }
          }
          if (v50 == ++v48)
          {
            LODWORD(v48) = v50;
            goto LABEL_81;
          }
        }
        if (!v49)
        {
LABEL_82:
          if ((int)v48 >= v50) {
            goto LABEL_91;
          }
        }
      }
      unsigned __int16 v52 = *(_WORD *)(*(void *)(v11 + 112) + 2 * (int)v48);
      int v53 = *((_DWORD *)a5 + 2);
      if (v53 >= -1 && *((_DWORD *)a5 + 3) > v53) {
        goto LABEL_90;
      }
      this = icu::UVector32::expandCapacity(a5, v53 + 1, a6);
      if (this)
      {
        int v53 = *((_DWORD *)a5 + 2);
LABEL_90:
        *(_DWORD *)(*((void *)a5 + 3) + 4 * v53) = (unsigned __int16)v49 | (v52 << 16);
        ++*((_DWORD *)a5 + 2);
      }
LABEL_91:
      int v16 = *(_DWORD *)(v11 + 120);
      BOOL v37 = v48 == v16 - 1;
      LODWORD(v48) = v48 + 1;
      if (v37) {
        return this;
      }
    }
  }
  if ((int)(v15 - v20) > v18)
  {
    UErrorCode v46 = U_BUFFER_OVERFLOW_ERROR;
    goto LABEL_97;
  }
  return icu::CollationData::makeReorderRanges((icu::CollationData *)v11, a2, a3, 1, a5, a6);
}

uint64_t icu::CollationData::addLowScriptRange(icu::CollationData *this, unsigned __int8 *a2, int a3, __int16 a4)
{
  __int16 v4 = *(_WORD *)(*((void *)this + 14) + 2 * a3);
  if (v4 >= a4) {
    __int16 v5 = a4;
  }
  else {
    __int16 v5 = a4 + 256;
  }
  a2[a3] = HIBYTE(v5);
  return ((*(_WORD *)(*((void *)this + 14) + 2 * a3 + 2) & 0xFF00) - (v4 & 0xFF00) + (v5 & 0xFF00)) & 0xFFFFFF00 | *(_WORD *)(*((void *)this + 14) + 2 * a3 + 2);
}

uint64_t icu::CollationData::addHighScriptRange(icu::CollationData *this, unsigned __int8 *a2, int a3, __int16 a4)
{
  __int16 v4 = (__int16 *)(*((void *)this + 14) + 2 * a3);
  __int16 v5 = v4[1];
  if (v5 <= a4) {
    __int16 v6 = a4;
  }
  else {
    __int16 v6 = a4 - 256;
  }
  __int16 v7 = *v4;
  unsigned int v8 = (v6 & 0xFF00) + (v7 & 0xFF00) - (v5 & 0xFF00);
  unsigned int v9 = v8 >> 8;
  uint64_t result = v8 & 0xFFFFFF00 | v7;
  a2[a3] = v9;
  return result;
}

void sub_18C8E45A4(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
    icu::UMemory::operator delete((void *)a1);
  }
}

uint64_t sub_18C8E45E8(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0;
  *(void *)(result + 8) = *(void *)(result + 400);
  *(void *)(result + 16) = result + 400;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = result + 48;
  *(_DWORD *)(result + 40) = 40;
  *(unsigned char *)(result + 44) = 0;
  *(_DWORD *)(result + 368) = 0;
  *(void *)(result + 376) = 0;
  *(_DWORD *)(result + 384) = -1;
  *(unsigned char *)(result + 388) = 0;
  *(void *)uint64_t result = &unk_1EDA49CD8;
  *(void *)(result + 392) = a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(_OWORD *)(result + 400) = 0u;
  *(_OWORD *)(result + 416) = 0u;
  *(_OWORD *)(result + 432) = 0u;
  *(void *)(result + 448) = v3;
  *(_DWORD *)(result + 456) = 301989888;
  *(void *)(result + 528) = 0;
  *(_DWORD *)(result + 536) = 0;
  *(_OWORD *)(result + 460) = 0u;
  *(_OWORD *)(result + 476) = 0u;
  *(_OWORD *)(result + 492) = 0u;
  *(_OWORD *)(result + 508) = 0u;
  *(void *)(result + 816) = 0;
  *(_DWORD *)(result + 824) = 0;
  __int16 v4 = (_DWORD *)(result + 548);
  *(void *)(result + 432) = *(void *)(a2 + 16);
  int64x2_t v5 = (int64x2_t)xmmword_18CA875D0;
  int64x2_t v6 = vdupq_n_s64(2uLL);
  uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(0x43uLL);
  do
  {
    if (vmovn_s64((int64x2_t)vcgtq_u64(v7, (uint64x2_t)v5)).u8[0])
    {
      if (v2 >= 0x28) {
        int v8 = 4480;
      }
      else {
        int v8 = 4430;
      }
      if (v2 < 0x13) {
        int v8 = 4352;
      }
      *(v4 - 1) = ((v2 + v8) << 13) | 0x1C7;
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x43uLL), *(uint64x2_t *)&v5)).i32[1])
    {
      if (v2 + 1 >= 0x28) {
        int v9 = 4480;
      }
      else {
        int v9 = 4430;
      }
      if (v2 + 1 >= 0x13) {
        int v10 = v9;
      }
      else {
        int v10 = 4352;
      }
      *__int16 v4 = ((v2 + v10) << 13) + 8647;
    }
    v2 += 2;
    int64x2_t v5 = vaddq_s64(v5, v6);
    v4 += 2;
  }
  while (v2 != 68);
  *(void *)(result + 440) = result + 544;
  return result;
}

void sub_18C8E473C(icu::CollationIterator *a1@<X0>, void *a2@<X8>)
{
  icu::CollationIterator::~CollationIterator(a1, a2);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18C8E4764(icu::CollationIterator *this, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *((void *)this + 49);
  uint64_t v11 = (uint64_t *)((char *)this + 400);
  uint64_t v12 = *(void *)(v10 + 96);
  *((void *)this + 51) = *(void *)(v10 + 64);
  *((void *)this + 52) = v12;
  __int16 v13 = *(_WORD *)(v10 + 352);
  if ((v13 & 0x11) != 0)
  {
    uint64_t v14 = 0;
  }
  else if ((v13 & 2) != 0)
  {
    uint64_t v14 = v10 + 354;
  }
  else
  {
    uint64_t v14 = *(void *)(v10 + 368);
  }
  *((void *)this + 53) = v14;
  icu::CollationIterator::reset((uint64_t)this);
  *((void *)this + 102) = a2;
  *((_DWORD *)this + 206) = a3;
  UErrorCode v27 = U_ZERO_ERROR;
  do
  {
    uint64_t v15 = *((void *)this + 102);
    if (*(__int16 *)(v15 + 8) < 0) {
      int v16 = (uint64_t *)*(unsigned int *)(v15 + 12);
    }
    else {
      int v16 = (uint64_t *)(*(unsigned __int16 *)(v15 + 8) >> 5);
    }
    int v17 = *((_DWORD *)this + 206);
    if (v17 >= (int)v16) {
      break;
    }
    *((_DWORD *)this + 6) = 0;
    *((_DWORD *)this + 92) = 0;
    signed int v18 = icu::UnicodeString::char32At(v16, (icu::UnicodeString *)v15, v17);
    if (v18 < 0x10000) {
      int v19 = 1;
    }
    else {
      int v19 = 2;
    }
    *((_DWORD *)this + 206) += v19;
    uint64_t v20 = utrie2_get32(*(uint64_t **)(*((void *)this + 49) + 32), v18);
    uint64_t v21 = v11;
    if (v20 == 192)
    {
      uint64_t v21 = *(uint64_t **)(*((void *)this + 49) + 16);
      uint64_t v20 = sub_18C8DD7F8(v21, v18);
    }
    icu::CollationIterator::appendCEsFromCE32(this, (const icu::CollationData *)v21, (uint64_t)v18, v20, 1, &v27);
    uint64_t v22 = *((unsigned int *)this + 6);
    if ((int)v22 >= 1)
    {
      int v23 = (uint64_t *)*((void *)this + 4);
      do
      {
        uint64_t v25 = *v23++;
        uint64_t v24 = v25;
        if (v25)
        {
          if ((int)a5 <= 30) {
            *(void *)(a4 + 8 * (int)a5) = v24;
          }
          a5 = (a5 + 1);
        }
        --v22;
      }
      while (v22);
    }
  }
  while (v27 <= U_ZERO_ERROR);
  return a5;
}

uint64_t sub_18C8E48E8(uint64_t a1, int a2)
{
  uint64_t result = icu::CollationIterator::reset(a1);
  *(_DWORD *)(a1 + 824) = a2;
  return result;
}

uint64_t sub_18C8E4914(uint64_t a1)
{
  return *(unsigned int *)(a1 + 824);
}

uint64_t *sub_18C8E491C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 824);
  uint64_t v3 = *(void *)(a1 + 816);
  if (*(__int16 *)(v3 + 8) < 0) {
    __int16 v4 = (uint64_t *)*(unsigned int *)(v3 + 12);
  }
  else {
    __int16 v4 = (uint64_t *)(*(unsigned __int16 *)(v3 + 8) >> 5);
  }
  if (v2 == v4) {
    return (uint64_t *)0xFFFFFFFFLL;
  }
  uint64_t result = icu::UnicodeString::char32At(v4, (icu::UnicodeString *)v3, v2);
  if (result < 0x10000) {
    int v6 = 1;
  }
  else {
    int v6 = 2;
  }
  *(_DWORD *)(a1 + 824) += v6;
  return result;
}

uint64_t *sub_18C8E4988(uint64_t a1)
{
  int v1 = (uint64_t *)*(unsigned int *)(a1 + 824);
  if (!v1) {
    return (uint64_t *)0xFFFFFFFFLL;
  }
  uint64_t result = icu::UnicodeString::char32At(v1, *(icu::UnicodeString **)(a1 + 816), (int)v1 - 1);
  if (result >= 0x10000) {
    int v4 = -2;
  }
  else {
    int v4 = -1;
  }
  *(_DWORD *)(a1 + 824) += v4;
  return result;
}

uint64_t sub_18C8E49DC(uint64_t a1, int a2)
{
  uint64_t result = icu::UnicodeString::moveIndex32(*(icu::UnicodeString **)(a1 + 816), *(_DWORD *)(a1 + 824), a2);
  *(_DWORD *)(a1 + 824) = result;
  return result;
}

uint64_t sub_18C8E4A10(uint64_t a1, int a2)
{
  uint64_t result = icu::UnicodeString::moveIndex32(*(icu::UnicodeString **)(a1 + 816), *(_DWORD *)(a1 + 824), -a2);
  *(_DWORD *)(a1 + 824) = result;
  return result;
}

uint64_t sub_18C8E4A48(uint64_t a1, unsigned int a2)
{
  return utrie2_get32(*(uint64_t **)(*(void *)(a1 + 392) + 32), a2);
}

uint64_t sub_18C8E4A54(uint64_t a1, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  if ((a2 & 0x100) != 0)
  {
    unsigned int v12 = a2 >> 13;
    __int16 v13 = *(uint64_t **)(*(void *)(a1 + 392) + 32);
    return utrie2_get32(v13, v12);
  }
  else
  {
    uint64_t result = icu::UVector::elementAt((icu::UVector *)(*(void *)(a1 + 392) + 104), a2 >> 13);
    if (result)
    {
      uint64_t v6 = result;
      uint64_t result = *(unsigned int *)(result + 80);
      if (result == 1 || *(_DWORD *)(v6 + 84) != *(_DWORD *)(*(void *)(a1 + 392) + 408))
      {
        uint64_t result = icu::CollationDataBuilder::buildContext(*(void *)(a1 + 392), v6, a3);
        *(_DWORD *)(v6 + 80) = result;
        if (*a3 == U_BUFFER_OVERFLOW_ERROR)
        {
          *a3 = U_ZERO_ERROR;
          uint64_t v7 = *(void *)(a1 + 392);
          if (*(_WORD *)(v7 + 352)) {
            __int16 v8 = 2;
          }
          else {
            __int16 v8 = *(_WORD *)(v7 + 352) & 0x1F;
          }
          *(_WORD *)(v7 + 352) = v8;
          ++*(_DWORD *)(v7 + 408);
          uint64_t result = icu::CollationDataBuilder::buildContext(*(void *)(a1 + 392), v6, a3);
          *(_DWORD *)(v6 + 80) = result;
        }
        uint64_t v9 = *(void *)(a1 + 392);
        *(_DWORD *)(v6 + 84) = *(_DWORD *)(v9 + 408);
        __int16 v10 = *(_WORD *)(v9 + 352);
        if ((v10 & 0x11) != 0)
        {
          uint64_t v11 = 0;
        }
        else if ((v10 & 2) != 0)
        {
          uint64_t v11 = v9 + 354;
        }
        else
        {
          uint64_t v11 = *(void *)(v9 + 368);
        }
        *(void *)(a1 + 424) = v11;
      }
    }
    else
    {
      *a3 = U_INTERNAL_PROGRAM_ERROR;
    }
  }
  return result;
}

uint64_t icu::CollationDataBuilder::buildContext(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 > 0) {
    return 0;
  }
  memset(v75, 0, sizeof(v75));
  icu::UCharsTrieBuilder::UCharsTrieBuilder((icu::UCharsTrieBuilder *)v75, a3);
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v68 = 0u;
  icu::UCharsTrieBuilder::UCharsTrieBuilder((icu::UCharsTrieBuilder *)&v68, a3);
  if (*(int *)a3 > 0) {
    goto LABEL_4;
  }
  uint64_t v59 = a2;
  while (2)
  {
    unsigned int v8 = *(unsigned __int16 *)(a2 + 16);
    if (*(__int16 *)(a2 + 16) < 0) {
      unsigned int v9 = *(_DWORD *)(a2 + 20);
    }
    else {
      unsigned int v9 = v8 >> 5;
    }
    if (v9)
    {
      if ((v8 & 2) != 0) {
        __int16 v10 = (unsigned __int16 *)(a2 + 18);
      }
      else {
        __int16 v10 = *(unsigned __int16 **)(a2 + 32);
      }
      int v11 = *v10;
    }
    else
    {
      int v11 = 0xFFFF;
    }
    long long v66 = 0uLL;
    long long v67 = 0uLL;
    int v61 = v11;
    int v12 = v11 + 1;
    long long v64 = 0uLL;
    long long v65 = 0uLL;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v64, (const icu::UnicodeString *)(a2 + 8), 0, (v11 + 1));
    uint64_t v13 = a2;
    while (1)
    {
      uint64_t v14 = v13;
      *(_DWORD *)(v13 + 76) = 1;
      unsigned int v15 = *(_DWORD *)(v13 + 88);
      if ((v15 & 0x80000000) != 0) {
        break;
      }
      uint64_t v16 = icu::UVector::elementAt((icu::UVector *)(a1 + 104), v15);
      uint64_t v13 = v16;
      if ((SWORD4(v64) & 0x8000u) == 0) {
        int32_t v17 = WORD4(v64) >> 5;
      }
      else {
        int32_t v17 = HIDWORD(v64);
      }
      if (BYTE8(v64))
      {
        if ((*(unsigned char *)(v16 + 16) & 1) == 0) {
          break;
        }
      }
      else
      {
        int v18 = v17 & (v17 >> 31);
        if (v17 < 0)
        {
          int32_t v19 = 0;
LABEL_29:
          int32_t v20 = v19;
          goto LABEL_30;
        }
        int32_t v19 = v17 - v18;
        int32_t v20 = v17;
        if (v17 - v18 < v17) {
          goto LABEL_29;
        }
LABEL_30:
        if (*(_WORD *)(v16 + 16)) {
          break;
        }
        uint64_t v21 = v16 + 8;
        uint64_t v22 = (BYTE8(v64) & 2) != 0 ? (long long *)((char *)&v64 + 10) : (long long *)*((void *)&v65 + 1);
        if (!icu::UnicodeString::doEqualsSubstring(v21, 0, v17, (uint64_t)v22, v18, v20)) {
          break;
        }
      }
    }
    if (*(__int16 *)(v14 + 16) < 0) {
      int v23 = *(_DWORD *)(v14 + 20);
    }
    else {
      int v23 = *(unsigned __int16 *)(v14 + 16) >> 5;
    }
    int v24 = v61;
    if (v23 == v12)
    {
      uint64_t v3 = *(unsigned int *)(v14 + 72);
      goto LABEL_118;
    }
    if (BYTE8(v69)) {
      __int16 v25 = 2;
    }
    else {
      __int16 v25 = BYTE8(v69) & 0x1F;
    }
    WORD4(v69) = v25;
    HIDWORD(v73) = 0;
    HIDWORD(v74) = 0;
    if (*(__int16 *)(a2 + 16) < 0) {
      int v26 = *(_DWORD *)(a2 + 20);
    }
    else {
      int v26 = *(unsigned __int16 *)(a2 + 16) >> 5;
    }
    uint64_t v60 = a2;
    if (v26 == v12)
    {
      unsigned int v62 = *(_DWORD *)(a2 + 72);
      UErrorCode v27 = (unsigned int *)icu::UVector::elementAt((icu::UVector *)(a1 + 104), *(_DWORD *)(a2 + 88));
      int v28 = 512;
      goto LABEL_88;
    }
    unsigned int v62 = 0;
    uint64_t v29 = v59;
    while (2)
    {
      unsigned int v30 = *(unsigned __int16 *)(v29 + 16);
      if (*(__int16 *)(v29 + 16) < 0) {
        unsigned int v31 = *(_DWORD *)(v29 + 20);
      }
      else {
        unsigned int v31 = v30 >> 5;
      }
      long long v32 = 0uLL;
      if (v31)
      {
        if ((v30 & 2) != 0) {
          int v33 = (unsigned __int16 *)(v29 + 18);
        }
        else {
          int v33 = *(unsigned __int16 **)(v29 + 32);
        }
        int v34 = *v33;
      }
      else
      {
        int v34 = 0xFFFF;
      }
      if (v34 != v61)
      {
        if (*(_DWORD *)(v29 + 76) == 1) {
          goto LABEL_83;
        }
        if (!v34)
        {
          unsigned int v62 = *(_DWORD *)(v29 + 76);
          goto LABEL_83;
        }
        int v35 = v30 >> 5;
        if ((v30 & 0x8000u) != 0) {
          int v35 = *(_DWORD *)(v29 + 20);
        }
        if (v35 >= 1) {
          int v36 = 1;
        }
        else {
          int v36 = v35;
        }
        if (v35 - v36 >= v34) {
          int32_t v37 = v34;
        }
        else {
          int32_t v37 = v35 - v36;
        }
        int v38 = WORD4(v64) >> 5;
        if (SWORD4(v64) < 0) {
          int v38 = HIDWORD(v64);
        }
        if (v30)
        {
          if ((BYTE8(v64) & 1) == 0) {
            goto LABEL_83;
          }
        }
        else
        {
          int v39 = v36 & ~(v36 >> 31);
          if (v37 < 0)
          {
            int v40 = 0;
          }
          else
          {
            int v40 = v35 - v39;
            int32_t v41 = v37;
            if (v40 >= v37)
            {
              if ((BYTE8(v64) & 1) == 0) {
                goto LABEL_75;
              }
LABEL_83:
              uint64_t v29 = icu::UVector::elementAt((icu::UVector *)(a1 + 104), *(_DWORD *)(v29 + 88));
              continue;
            }
          }
          int32_t v41 = v40;
          if (BYTE8(v64)) {
            goto LABEL_83;
          }
LABEL_75:
          if ((v30 & 2) != 0) {
            uint64_t v42 = v29 + 18;
          }
          else {
            uint64_t v42 = *(void *)(v29 + 32);
          }
          if (!icu::UnicodeString::doEqualsSubstring((uint64_t)&v64, v38 - v37, v37, v42, v39, v41)) {
            goto LABEL_83;
          }
        }
        unsigned int v62 = *(_DWORD *)(v29 + 76);
        goto LABEL_83;
      }
      break;
    }
    int v28 = 768;
    UErrorCode v27 = (unsigned int *)a2;
    while (1)
    {
      v63[2] = v32;
      v63[3] = v32;
      v63[0] = v32;
      v63[1] = v32;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v63, (const icu::UnicodeString *)(v27 + 2), v12);
      uint64_t v43 = *(void *)(a1 + 8);
      signed int v45 = icu::UnicodeString::char32At(v44, (icu::UnicodeString *)v63, 0);
      if (sub_18C818388(v43, v45) < 0x100) {
        v28 &= ~0x200u;
      }
      uint64_t v46 = *(void *)(a1 + 8);
      LODWORD(v47) = WORD4(v63[0]) >> 5;
      if ((SWORD4(v63[0]) & 0x8000u) == 0) {
        unint64_t v47 = v47;
      }
      else {
        unint64_t v47 = HIDWORD(v63[0]);
      }
      signed int v48 = icu::UnicodeString::char32At((uint64_t *)v47, (icu::UnicodeString *)v63, (int)v47 - 1);
      if (sub_18C818388(v46, v48) > 0xFF) {
        v28 |= 0x400u;
      }
      if (*(unsigned char *)(a1 + 617) && (v28 & 0x800) == 0)
      {
        LODWORD(v49) = WORD4(v63[0]) >> 5;
        unint64_t v49 = (SWORD4(v63[0]) & 0x8000u) == 0 ? v49 : HIDWORD(v63[0]);
        if ((int)v49 >= 1)
        {
          int v50 = 0;
          while (1)
          {
            UChar32 v51 = icu::UnicodeString::char32At((uint64_t *)v49, (icu::UnicodeString *)v63, v50);
            if (!u_getCombiningClass(v51)) {
              break;
            }
            if (v51 < 0x10000) {
              int v52 = 1;
            }
            else {
              int v52 = 2;
            }
            v50 += v52;
            LODWORD(v49) = WORD4(v63[0]) >> 5;
            if ((SWORD4(v63[0]) & 0x8000u) == 0) {
              unint64_t v49 = v49;
            }
            else {
              unint64_t v49 = HIDWORD(v63[0]);
            }
            if (v50 >= (int)v49) {
              goto LABEL_113;
            }
          }
          v28 |= 0x800u;
        }
      }
LABEL_113:
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)&v68, (const icu::UnicodeString *)v63, v27[18], a3);
      if (v27 == (unsigned int *)v14) {
        break;
      }
      UErrorCode v27 = (unsigned int *)icu::UVector::elementAt((icu::UVector *)(a1 + 104), v27[22]);
      icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)v63);
LABEL_88:
      long long v32 = 0uLL;
    }
    icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)v63);
    int v55 = icu::CollationDataBuilder::addContextTrie((icu::CollationDataBuilder *)a1, v62, (icu::UCharsTrieBuilder *)&v68, a3);
    uint64_t v56 = *(unsigned int *)a3;
    if ((int)v56 > 0)
    {
      uint64_t v3 = 0;
LABEL_132:
      icu::UnicodeString::~UnicodeString((void *)v56, (icu::UnicodeString *)&v64);
      goto LABEL_5;
    }
    if (v55 >= 0x80000)
    {
      uint64_t v3 = 0;
      uint64_t v56 = 15;
      *a3 = U_BUFFER_OVERFLOW_ERROR;
      goto LABEL_132;
    }
    uint64_t v3 = v28 | (v55 << 13) | 0xC9u;
    a2 = v60;
    int v24 = v61;
LABEL_118:
    *(_DWORD *)(a2 + 76) = v3;
    if (!v24)
    {
      uint64_t v56 = *(unsigned int *)(v14 + 88);
      if ((v56 & 0x80000000) != 0) {
        goto LABEL_132;
      }
LABEL_125:
      icu::UnicodeString::~UnicodeString((void *)v56, (icu::UnicodeString *)&v64);
      a2 = icu::UVector::elementAt((icu::UVector *)(a1 + 104), *(_DWORD *)(v14 + 88));
      if (*(int *)a3 >= 1) {
        goto LABEL_4;
      }
      continue;
    }
    break;
  }
  icu::UnicodeString::doReplace((uint64_t)&v64, 0, 1, 0, 0, 0);
  if ((SWORD4(v64) & 0x8000u) == 0) {
    int v57 = WORD4(v64) >> 5;
  }
  else {
    int v57 = HIDWORD(v64);
  }
  icu::UnicodeString::doReverse((icu::UnicodeString *)&v64, 0, v57);
  icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v75, (const icu::UnicodeString *)&v64, v3, a3);
  uint64_t v56 = *(unsigned int *)(v14 + 88);
  if ((v56 & 0x80000000) == 0) {
    goto LABEL_125;
  }
  icu::UnicodeString::~UnicodeString((void *)v56, (icu::UnicodeString *)&v64);
  int v58 = icu::CollationDataBuilder::addContextTrie((icu::CollationDataBuilder *)a1, *(_DWORD *)(v59 + 76), (icu::UCharsTrieBuilder *)v75, a3);
  if (*(int *)a3 > 0)
  {
LABEL_4:
    uint64_t v3 = 0;
    goto LABEL_5;
  }
  if (v58 < 0x80000)
  {
    uint64_t v3 = (v58 << 13) | 0xC8u;
  }
  else
  {
    uint64_t v3 = 0;
    *a3 = U_BUFFER_OVERFLOW_ERROR;
  }
LABEL_5:
  icu::UCharsTrieBuilder::~UCharsTrieBuilder((icu::UCharsTrieBuilder *)&v68);
  icu::UCharsTrieBuilder::~UCharsTrieBuilder((icu::UCharsTrieBuilder *)v75);
  return v3;
}

uint64_t icu::CollationDataBuilder::clearContexts(uint64_t this)
{
  if (*(_WORD *)(this + 352)) {
    __int16 v1 = 2;
  }
  else {
    __int16 v1 = *(_WORD *)(this + 352) & 0x1F;
  }
  *(_WORD *)(this + 352) = v1;
  ++*(_DWORD *)(this + 408);
  return this;
}

icu::CollationDataBuilder *icu::CollationDataBuilder::CollationDataBuilder(icu::CollationDataBuilder *this, UErrorCode *a2, UErrorCode *a3)
{
  int v4 = (int)a2;
  *(void *)this = &unk_1EDA49D68;
  *((void *)this + 1) = icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a3, a2);
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  icu::UVector32::UVector32((icu::CollationDataBuilder *)((char *)this + 40), a3);
  icu::UVector64::UVector64((icu::CollationDataBuilder *)((char *)this + 72), a3);
  icu::UVector::UVector((icu::CollationDataBuilder *)((char *)this + 104), a3);
  icu::UnicodeSet::UnicodeSet((icu::CollationDataBuilder *)((char *)this + 144));
  *((void *)this + 43) = &unk_1EDA47700;
  *((_WORD *)this + 176) = 2;
  *((_DWORD *)this + 102) = 0;
  icu::UnicodeSet::UnicodeSet((icu::CollationDataBuilder *)((char *)this + 416));
  *((unsigned char *)this + 616) = 0;
  *((unsigned char *)this + 617) = v4;
  *((unsigned char *)this + 618) = 0;
  *((_OWORD *)this + 39) = 0u;
  if (!v4)
  {
    int v6 = *((_DWORD *)this + 12);
    if (v6 >= -1 && *((_DWORD *)this + 13) > v6) {
      goto LABEL_6;
    }
    if (icu::UVector32::expandCapacity((icu::CollationDataBuilder *)((char *)this + 40), v6 + 1, a3))
    {
      int v6 = *((_DWORD *)this + 12);
LABEL_6:
      *(_DWORD *)(*((void *)this + 8) + 4 * v6) = 0;
      ++*((_DWORD *)this + 12);
    }
  }
  icu::UVector::setDeleter((icu::CollationDataBuilder *)((char *)this + 104), (void (*)(void *))sub_18C8E45A4);
  return this;
}

void icu::CollationDataBuilder::~CollationDataBuilder(icu::CollationDataBuilder *this)
{
  *(void *)this = &unk_1EDA49D68;
  utrie2_close(*((void *)this + 4));
  uint64_t v3 = *((void *)this + 78);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 79);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  icu::UnicodeSet::~UnicodeSet(v2, (icu::CollationDataBuilder *)((char *)this + 416));
  icu::UnicodeString::~UnicodeString(v5, (icu::CollationDataBuilder *)((char *)this + 344));
  icu::UnicodeSet::~UnicodeSet(v6, (icu::CollationDataBuilder *)((char *)this + 144));
  icu::UVector::~UVector((icu::CollationDataBuilder *)((char *)this + 104));
  icu::UVector64::~UVector64((void **)this + 9);
  icu::UVector32::~UVector32((void **)this + 5);

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::CollationDataBuilder::~CollationDataBuilder(this);

  icu::UMemory::operator delete(v1);
}

icu::UnicodeSet *icu::CollationDataBuilder::initForTailoring(icu::UnicodeSet *this, const icu::CollationData *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    if (*((void *)this + 4))
    {
      UErrorCode v5 = U_INVALID_STATE_ERROR;
LABEL_4:
      *a3 = v5;
      return this;
    }
    if (!a2)
    {
      UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_4;
    }
    *((void *)this + 2) = a2;
    if (*((unsigned char *)this + 617)) {
      unsigned int v7 = 192;
    }
    else {
      unsigned int v7 = -195323;
    }
    this = (icu::UnicodeSet *)utrie2_open(0xC0u, v7, (int *)a3);
    *((void *)v4 + 4) = this;
    if (!*((unsigned char *)v4 + 617))
    {
      for (unsigned int i = 192; i != 256; ++i)
        utrie2_set32(*((void *)v4 + 4), i, 192, (int *)a3);
      utrie2_setRange32(*((void *)v4 + 4), 0xAC00u, 0xD7A3u, 0xCCu, 1, (int *)a3);
      unsigned int v9 = (const icu::UnicodeSet *)*((void *)a2 + 10);
      return icu::UnicodeSet::addAll((icu::UVector **)v4 + 52, v9);
    }
  }
  return this;
}

uint64_t icu::CollationDataBuilder::maybeSetPrimaryRange(icu::CollationDataBuilder *this, signed int a2, signed int a3, uint64_t a4, unsigned int a5, UErrorCode *a6)
{
  if (*(int *)a6 > 0 || a5 - 2 > 0x7D) {
    return 0;
  }
  int v10 = (a3 >> 5) - (a2 >> 5);
  if (v10 > 2 || (uint64_t v11 = 0, (a3 & 0x1Fu) >= 3) && (a2 & 0x1Fu) <= 0x1C && v10 >= 1)
  {
    uint64_t v12 = (a2 << 8) | (unint64_t)(a4 << 32) | a5;
    if ((*(unsigned int (**)(icu::CollationDataBuilder *, void))(*(void *)this + 24))(this, BYTE3(a4))) {
      uint64_t v13 = v12 | 0x80;
    }
    else {
      uint64_t v13 = v12;
    }
    int v14 = icu::CollationDataBuilder::addCE(this, v13, a6);
    if (*(int *)a6 > 0) {
      return 0;
    }
    if (v14 < 0x80000)
    {
      uint64_t v11 = 1;
      utrie2_setRange32(*((void *)this + 4), a2, a3, (v14 << 13) | 0xCE, 1, (int *)a6);
      *((unsigned char *)this + 616) = 1;
    }
    else
    {
      uint64_t v11 = 0;
      *a6 = U_BUFFER_OVERFLOW_ERROR;
    }
  }
  return v11;
}

uint64_t icu::CollationDataBuilder::addCE(icu::CollationDataBuilder *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v5 = *((unsigned int *)this + 20);
  if ((int)v5 < 1)
  {
LABEL_5:
    int v7 = v5 + 1;
    if ((int)v5 < -1 || *((_DWORD *)this + 21) <= (int)v5)
    {
      if (!icu::UVector64::expandCapacity((icu::CollationDataBuilder *)((char *)this + 72), v7, a3)) {
        return v5;
      }
      int v8 = *((_DWORD *)this + 20);
      int v7 = v8 + 1;
    }
    else
    {
      int v8 = *((_DWORD *)this + 20);
    }
    *(void *)(*((void *)this + 12) + 8 * v8) = a2;
    *((_DWORD *)this + 20) = v7;
    return v5;
  }
  uint64_t v6 = 0;
  while (*(void *)(*((void *)this + 12) + 8 * v6) != a2)
  {
    if (v5 == ++v6) {
      goto LABEL_5;
    }
  }
  return v6;
}

uint64_t icu::CollationDataBuilder::setPrimaryRangeAndReturnNext(icu::CollationDataBuilder *this, signed int a2, signed int a3, uint64_t a4, unsigned int a5, UErrorCode *a6)
{
  if (*(int *)a6 > 0) {
    return 0;
  }
  uint64_t v6 = a4;
  int v13 = (*(uint64_t (**)(icu::CollationDataBuilder *, void))(*(void *)this + 24))(this, BYTE3(a4));
  if (!icu::CollationDataBuilder::maybeSetPrimaryRange(this, a2, a3, v6, a5, a6))
  {
    if (a3 <= a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = a3;
    }
    int v15 = v14 + 1;
    do
    {
      utrie2_set32(*((void *)this + 4), a2++, v6 | 0xC1, (int *)a6);
      uint64_t v6 = icu::Collation::incThreeBytePrimaryByOffset((icu::Collation *)v6, v13, a5);
    }
    while (v15 != a2);
    return v6;
  }

  return icu::Collation::incThreeBytePrimaryByOffset((icu::Collation *)v6, v13, a5 + a5 * (a3 - a2));
}

uint64_t icu::CollationDataBuilder::getCE32FromOffsetCE32(icu::CollationDataBuilder *this, int a2, icu::Collation *a3, unsigned int a4)
{
  unsigned int v4 = a4 >> 13;
  if (a2)
  {
    uint64_t v5 = (void *)(*((void *)this + 2) + 16);
  }
  else
  {
    if (*((_DWORD *)this + 20) <= (signed int)v4)
    {
      unint64_t v6 = 0;
      return icu::Collation::getThreeBytePrimaryForOffsetData(a3, v6) | 0xC1;
    }
    uint64_t v5 = (void *)((char *)this + 96);
  }
  unint64_t v6 = *(void *)(*v5 + 8 * v4);
  return icu::Collation::getThreeBytePrimaryForOffsetData(a3, v6) | 0xC1;
}

uint64_t icu::CollationDataBuilder::isCompressibleLeadByte(icu::CollationDataBuilder *this, unsigned int a2)
{
  return *(char *)(*(void *)(*((void *)this + 2) + 72) + a2);
}

BOOL icu::CollationDataBuilder::isAssigned(uint64_t **this, unsigned int a2)
{
  int v2 = utrie2_get32(this[4], a2);
  return v2 != 192 && v2 != -1;
}

uint64_t icu::CollationDataBuilder::getLongPrimaryIfSingleCE(uint64_t **this, unsigned int a2)
{
  int v2 = utrie2_get32(this[4], a2);
  if ((v2 & 0xCF) == 0xC1) {
    return v2 & 0xFFFFFF00;
  }
  else {
    return 0;
  }
}

uint64_t icu::CollationDataBuilder::getSingleCE(uint64_t **this, icu::Collation *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  unsigned int v7 = utrie2_get32(this[4], a2);
  unsigned int v8 = v7;
  if (v7 == 192) {
    unsigned int v7 = sub_18C8DD7F8(this[2], a2);
  }
  if ((~v7 & 0xC0) == 0)
  {
    while (1)
    {
      switch(v7 & 0xF)
      {
        case 1u:
          return ((unint64_t)((v7 & 0xFFFFFF00) >> 8) << 40) | 0x5000500;
        case 2u:
          return v7 & 0xFFFFFF00;
        case 4u:
        case 7u:
        case 8u:
        case 9u:
        case 0xCu:
        case 0xDu:
          goto LABEL_39;
        case 5u:
          if ((v7 & 0x1F00) != 0x100) {
            goto LABEL_39;
          }
          int v9 = v7 >> 13;
          if (v8 != 192) {
            goto LABEL_11;
          }
          int v10 = (uint64_t *)this[2][1];
          goto LABEL_16;
        case 6u:
          if ((v7 & 0x1F00) == 0x100)
          {
            signed int v18 = v7 >> 13;
            if (v8 == 192)
            {
              int32_t v19 = (uint64_t *)this[2][2];
            }
            else
            {
              if (*((_DWORD *)this + 20) <= v18) {
                return 0;
              }
              int32_t v19 = this[12];
            }
            return v19[v18];
          }
          else
          {
LABEL_39:
            uint64_t result = 0;
            UErrorCode v17 = U_UNSUPPORTED_ERROR;
LABEL_40:
            *a3 = v17;
          }
          return result;
        case 0xAu:
          int v9 = v7 >> 13;
LABEL_11:
          int v11 = *((_DWORD *)this + 12);
          if (v11 < 1 || v11 <= v9) {
            goto LABEL_31;
          }
          int v10 = this[8];
LABEL_16:
          unsigned int v7 = *((_DWORD *)v10 + v9);
          goto LABEL_28;
        case 0xBu:
          if (v8 == 192)
          {
            int v13 = (uint64_t *)this[2][1];
          }
          else
          {
            if (*((int *)this + 12) < 1)
            {
LABEL_31:
              unsigned int v7 = 0;
              return (v7 << 16) & 0xFF000000 | ((unint64_t)((v7 & 0xFFFF0000) >> 16) << 48) | (v7 << 8);
            }
            int v13 = this[8];
          }
          unsigned int v7 = *(_DWORD *)v13;
LABEL_28:
          if ((~v7 & 0xC0) != 0) {
            return (v7 << 16) & 0xFF000000 | ((unint64_t)((v7 & 0xFFFF0000) >> 16) << 48) | (v7 << 8);
          }
          break;
        case 0xEu:
          unsigned int v14 = v7 >> 13;
          if (v8 == 192)
          {
            int v15 = this[2] + 2;
LABEL_25:
            unint64_t v16 = *(void *)(*v15 + 8 * v14);
            goto LABEL_27;
          }
          int v15 = this + 12;
          if (*((_DWORD *)this + 20) > (signed int)v14) {
            goto LABEL_25;
          }
          unint64_t v16 = 0;
LABEL_27:
          unsigned int v7 = icu::Collation::getThreeBytePrimaryForOffsetData(a2, v16) | 0xC1;
          goto LABEL_28;
        case 0xFu:
          return (icu::Collation::unassignedPrimaryFromCodePoint(a2) << 32) | 0x5000500;
        default:
          uint64_t result = 0;
          UErrorCode v17 = U_INTERNAL_PROGRAM_ERROR;
          goto LABEL_40;
      }
    }
  }
  return (v7 << 16) & 0xFF000000 | ((unint64_t)((v7 & 0xFFFF0000) >> 16) << 48) | (v7 << 8);
}

uint64_t icu::CollationDataBuilder::addCE32(icu::CollationDataBuilder *this, int a2, UErrorCode *a3)
{
  uint64_t v5 = *((unsigned int *)this + 12);
  if ((int)v5 < 1)
  {
LABEL_5:
    if ((int)v5 < -1 || (int v7 = *((_DWORD *)this + 12), *((_DWORD *)this + 13) <= (int)v5))
    {
      if (!icu::UVector32::expandCapacity((icu::CollationDataBuilder *)((char *)this + 40), (int)v5 + 1, a3))return v5; {
      int v7 = *((_DWORD *)this + 12);
      }
    }
    *(_DWORD *)(*((void *)this + 8) + 4 * v7) = a2;
    ++*((_DWORD *)this + 12);
    return v5;
  }
  uint64_t v6 = 0;
  while (*(_DWORD *)(*((void *)this + 8) + 4 * v6) != a2)
  {
    if (v5 == ++v6) {
      goto LABEL_5;
    }
  }
  return v6;
}

uint64_t icu::CollationDataBuilder::addConditionalCE32(icu::CollationDataBuilder *this, UChar **a2, int a3, UErrorCode *a4)
{
  unsigned int v4 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v4 > 0) {
    return 0xFFFFFFFFLL;
  }
  int v6 = *((_DWORD *)this + 28);
  if (v6 >= 0x80000)
  {
    *a4 = U_BUFFER_OVERFLOW_ERROR;
    return 0xFFFFFFFFLL;
  }
  int v10 = (uint64_t (**)(void *))((char *)this + 104);
  int v11 = icu::UMemory::operator new(v4, (icu::UMemory *)0x60, (unint64_t)a2);
  uint64_t v12 = v11;
  if (v11)
  {
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v11 + 1), a2);
    *((_DWORD *)v12 + 18) = a3;
    *(_OWORD *)((char *)v12 + 76) = xmmword_18CA8D590;
  }
  else if (*(int *)a4 <= 0)
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  icu::UVector::adoptElement(v10, v12, a4);
  if (*(int *)a4 >= 1) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v6;
  }
}

uint64_t icu::CollationDataBuilder::add(icu::CollationDataBuilder *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, const uint64_t *a4, uint64_t a5, UErrorCode *a6)
{
  int v10 = (*(uint64_t (**)(icu::CollationDataBuilder *, const uint64_t *, uint64_t, UErrorCode *))(*(void *)this + 32))(this, a4, a5, a6);

  return icu::CollationDataBuilder::addCE32((uint64_t)this, a2, a3, v10, a6);
}

uint64_t icu::CollationDataBuilder::addCE32(uint64_t this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 > 0) {
    return this;
  }
  if (*((unsigned __int16 *)a3 + 4) <= 0x1Fu)
  {
    UErrorCode v11 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_7;
  }
  uint64_t v7 = this;
  this = *(void *)(this + 32);
  if (!this || (this = utrie2_isFrozen(this), this))
  {
    UErrorCode v11 = U_INVALID_STATE_ERROR;
LABEL_7:
    *a5 = v11;
    return this;
  }
  uint64_t v12 = (icu::Collation *)icu::UnicodeString::char32At(v10, a3, 0);
  BOOL v13 = 1;
  if (v12 < 0x10000) {
    int v14 = 1;
  }
  else {
    int v14 = 2;
  }
  unsigned int v16 = utrie2_get32(*(uint64_t **)(v7 + 32), v12);
  if (*((unsigned __int16 *)a2 + 4) <= 0x1Fu)
  {
    unsigned int v17 = *((unsigned __int16 *)a3 + 4);
    int v18 = (__int16)v17;
    int v19 = v17 >> 5;
    if (v18 < 0) {
      int v19 = *((_DWORD *)a3 + 3);
    }
    BOOL v13 = v19 > v14;
  }
  if (!*(unsigned char *)(v7 + 617)) {
    goto LABEL_70;
  }
  NFDuint64_t Instance = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a5, v15);
  memset((char *)v66 + 8, 0, 56);
  *(void *)&v66[0] = &unk_1EDA47700;
  WORD4(v66[0]) = 2;
  (*(void (**)(uint64_t, const icu::UnicodeString *, _OWORD *, UErrorCode *))(*(void *)NFDInstance + 24))(NFDInstance, a3, v66, a5);
  unsigned int v21 = *((unsigned __int16 *)a3 + 4);
  if (v21)
  {
    if (BYTE8(v66[0])) {
      goto LABEL_27;
    }
    goto LABEL_38;
  }
  if ((v21 & 0x8000u) == 0) {
    int v22 = v21 >> 5;
  }
  else {
    int v22 = *((_DWORD *)a3 + 3);
  }
  if ((SWORD4(v66[0]) & 0x8000u) == 0) {
    int v23 = WORD4(v66[0]) >> 5;
  }
  else {
    int v23 = HIDWORD(v66[0]);
  }
  if ((BYTE8(v66[0]) & 1) != 0 || v22 != v23) {
    goto LABEL_39;
  }
  if (!icu::UnicodeString::doEquals(a3, (const icu::UnicodeString *)v66, v22))
  {
LABEL_38:
    LOWORD(v21) = *((_WORD *)a3 + 4);
LABEL_39:
    if ((v21 & 0x8000) != 0)
    {
      if (*((_DWORD *)a3 + 3) != 2) {
        goto LABEL_67;
      }
    }
    else if ((v21 & 0xFFE0) != 0x40)
    {
      goto LABEL_67;
    }
    if ((v21 & 2) != 0) {
      uint64_t v29 = (char *)a3 + 10;
    }
    else {
      uint64_t v29 = (char *)*((void *)a3 + 3);
    }
    uint64_t v28 = *((unsigned __int16 *)v29 + 1);
    if ((v28 - 3955) <= 0xE && ((1 << (v28 - 115)) & 0x4005) != 0
      || v12 == 64977 && v28 == 44032)
    {
      return (uint64_t)icu::UnicodeString::~UnicodeString((void *)v28, (icu::UnicodeString *)v66);
    }
LABEL_67:
    uint64_t v28 = 16;
    *a5 = U_UNSUPPORTED_ERROR;
    return (uint64_t)icu::UnicodeString::~UnicodeString((void *)v28, (icu::UnicodeString *)v66);
  }
LABEL_27:
  if (*((unsigned __int16 *)a2 + 4) >= 0x20u)
  {
    memset((char *)v65 + 8, 0, 56);
    *(void *)&v65[0] = &unk_1EDA47700;
    WORD4(v65[0]) = 2;
    (*(void (**)(uint64_t, const icu::UnicodeString *, _OWORD *, UErrorCode *))(*(void *)NFDInstance + 24))(NFDInstance, a2, v65, a5);
    if (sub_18C8A1B58((uint64_t)a2, (uint64_t)v65)) {
      goto LABEL_34;
    }
    int v24 = icu::UnicodeString::countChar32(a2, 0, 0x7FFFFFFF);
    if (v24 > 2) {
      goto LABEL_34;
    }
    int v25 = v24;
    *(void *)c = 0;
    uint64_t v64 = 0;
    if (icu::UnicodeString::toUTF32(a2, c, 4, a5) != v24)
    {
      uint64_t v27 = 27;
      goto LABEL_35;
    }
    if (u_getCombiningClass(c[0]) || v25 >= 2 && (unint64_t v26 = (c[1] - 12441), v26 >= 2))
    {
LABEL_34:
      uint64_t v27 = 16;
LABEL_35:
      *a5 = v27;
      goto LABEL_36;
    }
    icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)v65);
  }
  unint64_t v30 = *((unsigned __int16 *)a3 + 4);
  if ((v30 & 0x8000u) == 0) {
    int v31 = v30 >> 5;
  }
  else {
    int v31 = *((_DWORD *)a3 + 3);
  }
  if (v31 > v14)
  {
    unint64_t v32 = 0;
    int v33 = (char *)a3 + 10;
    if ((v30 & 2) == 0) {
      int v33 = (char *)*((void *)a3 + 3);
    }
    do
    {
      if ((v30 & 0x8000) != 0)
      {
        unint64_t v34 = *((unsigned int *)a3 + 3);
        if ((uint64_t)v32 >= *((int *)a3 + 3)) {
          goto LABEL_69;
        }
      }
      else
      {
        unint64_t v34 = v30 >> 5;
        if (v32 >= v30 >> 5) {
          goto LABEL_69;
        }
      }
      if (v34 <= v32) {
        unsigned int v35 = 0xFFFF;
      }
      else {
        unsigned int v35 = *(unsigned __int16 *)&v33[2 * v32];
      }
      ++v32;
    }
    while ((vmaxv_u16(vcgt_u16((uint16x4_t)0x2BA4001C00130015, (uint16x4_t)vadd_s16(vdup_n_s16(v35), (int16x4_t)0x5400EE59EF00EE9FLL))) & 1) == 0);
    goto LABEL_67;
  }
LABEL_69:
  icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)v66);
LABEL_70:
  if (v16 == 192)
  {
    int v36 = *(uint64_t **)(v7 + 16);
    uint64_t v37 = sub_18C8DD7F8(v36, v12);
    uint64_t FinalCE32 = icu::CollationData::getFinalCE32((icu::CollationData *)v36, v37);
    int v39 = (FinalCE32 & 0xCE) == 0xC8 || v13;
    if (v39 != 1) {
      goto LABEL_82;
    }
    unsigned int v16 = icu::CollationDataBuilder::copyFromBaseCE32((icu::CollationDataBuilder *)v7, v12, FinalCE32, 1u, a5);
    this = utrie2_set32(*(void *)(v7 + 32), v12, v16, (int *)a5);
    if (*(int *)a5 > 0) {
      return this;
    }
  }
  int v40 = v16 & 0xCF;
  if (!v13)
  {
    if (v40 == 199)
    {
      this = icu::UVector::elementAt((icu::UVector *)(v7 + 104), v16 >> 13);
      *(_DWORD *)(this + 80) = 1;
      *(_DWORD *)(this + 72) = a4;
LABEL_115:
      *(unsigned char *)(v7 + 616) = 1;
      return this;
    }
LABEL_82:
    this = utrie2_set32(*(void *)(v7 + 32), v12, a4, (int *)a5);
    goto LABEL_115;
  }
  if (v40 == 199)
  {
    uint64_t v41 = icu::UVector::elementAt((icu::UVector *)(v7 + 104), v16 >> 13);
    *(_DWORD *)(v41 + 80) = 1;
  }
  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v66, 0);
    unsigned int v42 = icu::CollationDataBuilder::addConditionalCE32((icu::CollationDataBuilder *)v7, (UChar **)v66, v16, a5);
    this = (uint64_t)icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)v66);
    if (*(int *)a5 > 0) {
      return this;
    }
    utrie2_set32(*(void *)(v7 + 32), v12, (v42 << 13) | 0xC7, (int *)a5);
    icu::UnicodeSet::add((icu::UnicodeSet *)(v7 + 144), v12);
    uint64_t v41 = icu::UVector::elementAt((icu::UVector *)(v7 + 104), v42);
  }
  memset(v66, 0, sizeof(v66));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v66, a3, v14);
  memset(v65, 0, sizeof(v65));
  unsigned int v44 = *((unsigned __int16 *)a2 + 4);
  int v45 = (__int16)v44;
  unsigned int v46 = v44 >> 5;
  if (v45 < 0) {
    LOWORD(v46) = *((_DWORD *)a2 + 3);
  }
  icu::UnicodeString::UnicodeString((uint64_t)v65, v46);
  unsigned int v47 = *((unsigned __int16 *)a2 + 4);
  int v48 = (__int16)v47;
  unsigned int v49 = v47 >> 5;
  if (v48 >= 0) {
    uint64_t v50 = v49;
  }
  else {
    uint64_t v50 = *((unsigned int *)a2 + 3);
  }
  uint64_t v51 = icu::UnicodeString::doAppend((uint64_t)v65, a2, 0, v50);
  if ((SWORD4(v66[0]) & 0x8000u) == 0) {
    uint64_t v52 = WORD4(v66[0]) >> 5;
  }
  else {
    uint64_t v52 = HIDWORD(v66[0]);
  }
  icu::UnicodeString::doAppend(v51, (const icu::UnicodeString *)v66, 0, v52);
  icu::UnicodeSet::addAll((icu::UnicodeSet *)(v7 + 416), (const icu::UnicodeString *)v66);
  while (1)
  {
    int v53 = *(_DWORD *)(v41 + 88);
    if (v53 < 0)
    {
      int v60 = icu::CollationDataBuilder::addConditionalCE32((icu::CollationDataBuilder *)v7, (UChar **)v65, a4, a5);
      uint64_t v27 = *(unsigned int *)a5;
      if ((int)v27 > 0) {
        goto LABEL_36;
      }
      *(_DWORD *)(v41 + 88) = v60;
      goto LABEL_114;
    }
    uint64_t v54 = icu::UVector::elementAt((icu::UVector *)(v7 + 104), *(_DWORD *)(v41 + 88));
    uint64_t v55 = v54;
    uint64_t v27 = *(unsigned __int16 *)(v54 + 16);
    if ((v27 & 1) == 0) {
      break;
    }
    int v59 = (BYTE8(v65[0]) & 1) == 0;
LABEL_108:
    uint64_t v41 = v55;
    if (!v59)
    {
      *(_DWORD *)(v55 + 72) = a4;
LABEL_114:
      icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)v65);
      this = (uint64_t)icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)v66);
      goto LABEL_115;
    }
  }
  if ((SWORD4(v65[0]) & 0x8000u) == 0) {
    int32_t v56 = WORD4(v65[0]) >> 5;
  }
  else {
    int32_t v56 = HIDWORD(v65[0]);
  }
  if ((v27 & 0x8000u) == 0) {
    signed int v57 = v27 >> 5;
  }
  else {
    signed int v57 = *(_DWORD *)(v54 + 20);
  }
  if ((v27 & 2) != 0) {
    uint64_t v58 = v54 + 18;
  }
  else {
    uint64_t v58 = *(void *)(v54 + 32);
  }
  int v59 = icu::UnicodeString::doCompare((uint64_t)v65, 0, v56, v58, v57 & (v57 >> 31), v57 & ~(v57 >> 31));
  if ((v59 & 0x80000000) == 0) {
    goto LABEL_108;
  }
  unsigned int v61 = icu::CollationDataBuilder::addConditionalCE32((icu::CollationDataBuilder *)v7, (UChar **)v65, a4, a5);
  uint64_t v27 = *(unsigned int *)a5;
  if ((int)v27 <= 0)
  {
    *(_DWORD *)(v41 + 88) = v61;
    *(_DWORD *)(icu::UVector::elementAt((icu::UVector *)(v7 + 104), v61) + 88) = v53;
    goto LABEL_114;
  }
LABEL_36:
  icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)v65);
  return (uint64_t)icu::UnicodeString::~UnicodeString((void *)v28, (icu::UnicodeString *)v66);
}

uint64_t icu::CollationDataBuilder::copyFromBaseCE32(icu::CollationDataBuilder *this, icu::Collation *a2, uint64_t a3, unsigned __int8 a4, UErrorCode *a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 > 0) {
    return 0;
  }
  uint64_t v5 = a3;
  if ((~a3 & 0xC0) == 0)
  {
    unsigned int v7 = a2;
    int v9 = a4;
    while (1)
    {
      switch(v5 & 0xF)
      {
        case 1:
        case 2:
        case 4:
          return v5;
        case 5:
          return icu::CollationDataBuilder::encodeExpansion32(this, (const int *)(*(void *)(*((void *)this + 2) + 8) + 4 * (v5 >> 13)), (v5 >> 8) & 0x1F, a5);
        case 6:
          return icu::CollationDataBuilder::encodeExpansion(this, (const uint64_t *)(*(void *)(*((void *)this + 2) + 16) + 8 * (v5 >> 13)), (v5 >> 8) & 0x1F, a5);
        case 8:
          int v10 = (unsigned __int16 *)(*(void *)(*((void *)this + 2) + 24) + 2 * (v5 >> 13));
          int v11 = v10[1];
          uint64_t v5 = v11 | (*v10 << 16);
          if (!v9) {
            goto LABEL_10;
          }
          *(void *)&long long v38 = 0;
          long long v39 = 0u;
          memset(v42, 0, sizeof(v42));
          long long v40 = 0u;
          long long v41 = 0u;
          *((void *)&v38 + 1) = &unk_1EDA47700;
          LOWORD(v39) = 2;
          *(_OWORD *)&v42[3] = xmmword_18CA8D590;
          memset(v37, 0, sizeof(v37));
          icu::UnicodeString::UnicodeString((uint64_t)v37, 0);
          if ((v11 & 0xCF) == 0xC9)
          {
            unsigned int v15 = icu::CollationDataBuilder::copyContractionsFromBaseCE32(this, (uint64_t)v37, v7, v5, (uint64_t)&v38, a5);
          }
          else
          {
            uint64_t v5 = icu::CollationDataBuilder::copyFromBaseCE32(this, v7, v5, 1, a5);
            unsigned int v15 = icu::CollationDataBuilder::addConditionalCE32(this, v37, v5, a5);
            v42[6] = v15;
          }
          int v18 = (void *)*(unsigned int *)a5;
          if ((int)v18 > 0)
          {
            int v19 = 1;
            goto LABEL_38;
          }
          uint64_t v20 = icu::UVector::elementAt((icu::CollationDataBuilder *)((char *)this + 104), v15);
          uint64_t v36 = 0;
          *(_OWORD *)unsigned int v35 = 0u;
          long long v33 = 0u;
          memset(v34, 0, sizeof(v34));
          long long v31 = 0u;
          long long v32 = 0u;
          long long v30 = 0u;
          uint64_t v28 = (uint64_t)(v10 + 2);
          icu::UCharsTrie::Iterator::Iterator(&v30, &v28, 0, a5);
          uint64_t v27 = v28;
          if (!icu::UCharsTrie::Iterator::next(&v27, (icu::UCharsTrie::Iterator *)&v30, a5)) {
            goto LABEL_35;
          }
          while (1)
          {
            icu::UnicodeString::operator=(v37, (UChar **)&v32 + 1);
            if (SLOWORD(v37[1]) >= 0) {
              int v21 = LOWORD(v37[1]) >> 5;
            }
            else {
              int v21 = HIDWORD(v37[1]);
            }
            icu::UnicodeString::doReverse((icu::UnicodeString *)v37, 0, v21);
            int v22 = LOWORD(v37[1]) >> 5;
            if (SLOWORD(v37[1]) < 0) {
              LOWORD(v22) = WORD2(v37[1]);
            }
            __int16 v29 = v22;
            icu::UnicodeString::doReplace((uint64_t)v37, 0, 0, (uint64_t)&v29, 0, 1);
            uint64_t v5 = v35[3];
            if ((v35[3] & 0xCF) == 0xC9)
            {
              unsigned int v23 = icu::CollationDataBuilder::copyContractionsFromBaseCE32(this, (uint64_t)v37, v7, v35[3], v20, a5);
            }
            else
            {
              uint64_t v5 = icu::CollationDataBuilder::copyFromBaseCE32(this, v7, v35[3], 1, a5);
              unsigned int v23 = icu::CollationDataBuilder::addConditionalCE32(this, v37, v5, a5);
              *(_DWORD *)(v20 + 88) = v23;
            }
            if (*(int *)a5 > 0) {
              break;
            }
            uint64_t v20 = icu::UVector::elementAt((icu::CollationDataBuilder *)((char *)this + 104), v23);
            if (!icu::UCharsTrie::Iterator::next(v24, (icu::UCharsTrie::Iterator *)&v30, a5))
            {
LABEL_35:
              uint64_t v5 = (v42[6] << 13) | 0xC7u;
              icu::UnicodeSet::add((icu::CollationDataBuilder *)((char *)this + 144), v7);
              int v19 = 2;
              goto LABEL_37;
            }
          }
          int v19 = 1;
LABEL_37:
          icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)&v30);
LABEL_38:
          icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v37);
          icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)((char *)&v38 + 8));
          if (v19 != 1) {
            return v5;
          }
          return 0;
        case 9:
          if (v9)
          {
            *(void *)&long long v30 = 0;
            long long v31 = 0u;
            v34[0] = 0u;
            HIDWORD(v34[1]) = 0;
            long long v32 = 0u;
            long long v33 = 0u;
            *((void *)&v30 + 1) = &unk_1EDA47700;
            LOWORD(v31) = 2;
            *(_OWORD *)((char *)v34 + 12) = xmmword_18CA8D590;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            icu::UnicodeString::UnicodeString((uint64_t)&v38, 0);
            icu::CollationDataBuilder::copyContractionsFromBaseCE32(this, (uint64_t)&v38, v7, v5, (uint64_t)&v30, a5);
            uint64_t v5 = (DWORD2(v34[1]) << 13) | 0xC7u;
            icu::UnicodeSet::add((icu::CollationDataBuilder *)((char *)this + 144), v7);
            icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v38);
            icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)((char *)&v30 + 8));
            return v5;
          }
          uint64_t v12 = (unsigned __int16 *)(*(void *)(*((void *)this + 2) + 24) + 2 * (v5 >> 13));
          uint64_t v5 = v12[1] | (*v12 << 16);
LABEL_10:
          int v9 = 0;
          if ((~v5 & 0xC0) != 0) {
            return v5;
          }
          break;
        case 0xCLL:
          *a5 = U_UNSUPPORTED_ERROR;
          return v5;
        case 0xELL:
          return icu::Collation::getThreeBytePrimaryForOffsetData(a2, *(void *)(*(void *)(*((void *)this + 2) + 16) + 8 * (v5 >> 13))) | 0xC1;
        case 0xFLL:
          uint64_t v14 = icu::Collation::unassignedPrimaryFromCodePoint(a2);
          return icu::CollationDataBuilder::encodeOneCE(this, (icu::CollationDataBuilder *)((v14 << 32) | 0x5000500), a5);
        default:
          abort();
      }
    }
  }
  return v5;
}

uint64_t icu::CollationDataBuilder::encodeOneCEAsCE32(unint64_t this)
{
  if (this | HIDWORD(this)) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = this | 0xC2;
  }
  if ((this & 0xFFFFFFFFFFLL) == 0x5000500) {
    unsigned int v2 = HIDWORD(this) | 0xC1;
  }
  else {
    unsigned int v2 = v1;
  }
  if ((this & 0xFFFF00FF00FFLL) != 0) {
    return v2;
  }
  else {
    return BYTE1(this) | WORD1(this) | HIDWORD(this);
  }
}

uint64_t icu::CollationDataBuilder::encodeOneCE(icu::CollationDataBuilder *this, icu::CollationDataBuilder *a2, UErrorCode *a3)
{
  uint64_t result = icu::CollationDataBuilder::encodeOneCEAsCE32((unint64_t)a2);
  if (result == 1)
  {
    int v7 = icu::CollationDataBuilder::addCE(this, (uint64_t)a2, a3);
    if (*(int *)a3 <= 0)
    {
      if (v7 < 0x80000)
      {
        return (v7 << 13) | 0x1C6u;
      }
      else
      {
        uint64_t result = 0;
        *a3 = U_BUFFER_OVERFLOW_ERROR;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t icu::CollationDataBuilder::encodeCEs(icu::CollationDataBuilder *this, unint64_t *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  uint64_t v4 = a3;
  if (a3 >= 0x20)
  {
    uint64_t v4 = 0;
    UErrorCode v6 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_8:
    *a4 = v6;
    return v4;
  }
  uint64_t v8 = *((void *)this + 4);
  if (!v8 || utrie2_isFrozen(v8))
  {
    uint64_t v4 = 0;
    UErrorCode v6 = U_INVALID_STATE_ERROR;
    goto LABEL_8;
  }
  if (!v4) {
    return v4;
  }
  if (v4 == 2)
  {
    if (!*((unsigned char *)this + 617))
    {
      unint64_t v12 = *a2;
      if ((*a2 & 0xFFFFFFFFFF00FFLL) == 0x5000000)
      {
        unint64_t v13 = a2[1];
        if ((v13 & 0xFFFFFFFF00FFFFFFLL) == 0x500)
        {
          if (HIDWORD(v12)) {
            return (v12 << 8) & 0xFF0000 | HIDWORD(v12) | (v13 >> 16) | 0xC4;
          }
        }
      }
    }
LABEL_21:
    uint64_t v14 = 0;
    memset(v17, 0, 124);
    while (1)
    {
      int v15 = icu::CollationDataBuilder::encodeOneCEAsCE32(a2[v14]);
      if (v15 == 1) {
        break;
      }
      *((_DWORD *)v17 + v14++) = v15;
      if (v4 == v14) {
        return icu::CollationDataBuilder::encodeExpansion32(this, (const int *)v17, v4, a4);
      }
    }
    return icu::CollationDataBuilder::encodeExpansion(this, (const uint64_t *)a2, v4, a4);
  }
  if (v4 != 1) {
    goto LABEL_21;
  }
  int v11 = (icu::CollationDataBuilder *)*a2;

  return icu::CollationDataBuilder::encodeOneCE(this, v11, a4);
}

uint64_t icu::CollationDataBuilder::encodeExpansion32(icu::CollationDataBuilder *this, const int *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  int v7 = a2;
  uint64_t v9 = *((int *)this + 12);
  if ((int)v9 >= a3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 1;
    do
    {
      int v12 = 0;
      if ((int)v9 >= 1 && (uint64_t)v10 < v9) {
        int v12 = *(_DWORD *)(*((void *)this + 8) + 4 * v10);
      }
      if (*a2 == v12)
      {
        if (v10 >> 19) {
          goto LABEL_5;
        }
        uint64_t v13 = a3 - 1;
        uint64_t v14 = a2 + 1;
        uint64_t v15 = v11;
        if (a3 == 1)
        {
LABEL_21:
          int v17 = (a3 << 8) | (v10 << 13);
          return v17 | 0xC5u;
        }
        while (1)
        {
          int v16 = 0;
          if ((int)v9 >= 1 && (int)v9 > (int)v15) {
            int v16 = *(_DWORD *)(*((void *)this + 8) + 4 * v15);
          }
          if (v16 != *v14) {
            break;
          }
          ++v15;
          ++v14;
          if (!--v13) {
            goto LABEL_21;
          }
        }
      }
      ++v10;
      ++v11;
    }
    while (v10 != v9 - a3 + 1);
  }
  if ((int)v9 >= 0x80000)
  {
LABEL_5:
    uint64_t result = 0;
    *a4 = U_BUFFER_OVERFLOW_ERROR;
    return result;
  }
  if (a3 >= 1)
  {
    uint64_t v18 = a3;
    while (1)
    {
      int v20 = *v7++;
      int v19 = v20;
      int v21 = *((_DWORD *)this + 12);
      if (v21 >= -1 && *((_DWORD *)this + 13) > v21) {
        goto LABEL_28;
      }
      if (icu::UVector32::expandCapacity((icu::CollationDataBuilder *)((char *)this + 40), v21 + 1, a4)) {
        break;
      }
LABEL_29:
      if (!--v18) {
        goto LABEL_30;
      }
    }
    int v21 = *((_DWORD *)this + 12);
LABEL_28:
    *(_DWORD *)(*((void *)this + 8) + 4 * v21) = v19;
    ++*((_DWORD *)this + 12);
    goto LABEL_29;
  }
LABEL_30:
  int v17 = (a3 << 8) | (v9 << 13);
  return v17 | 0xC5u;
}

uint64_t icu::CollationDataBuilder::encodeExpansion(icu::CollationDataBuilder *this, const uint64_t *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  int v7 = a2;
  uint64_t v9 = *((int *)this + 20);
  if ((int)v9 >= a3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 1;
    do
    {
      if ((uint64_t)v10 >= v9) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = *(void *)(*((void *)this + 12) + 8 * v10);
      }
      if (*a2 == v12)
      {
        if (v10 >> 19) {
          goto LABEL_5;
        }
        uint64_t v13 = a3 - 1;
        uint64_t v14 = a2 + 1;
        uint64_t v15 = v11;
        if (a3 == 1)
        {
LABEL_21:
          int v17 = (a3 << 8) | (v10 << 13);
          return v17 | 0xC6u;
        }
        while (1)
        {
          uint64_t v16 = (int)v9 <= (int)v15 ? 0 : *(void *)(*((void *)this + 12) + 8 * v15);
          if (v16 != *v14) {
            break;
          }
          ++v15;
          ++v14;
          if (!--v13) {
            goto LABEL_21;
          }
        }
      }
      ++v10;
      ++v11;
    }
    while (v10 != v9 - a3 + 1);
  }
  if ((int)v9 >= 0x80000)
  {
LABEL_5:
    uint64_t result = 0;
    *a4 = U_BUFFER_OVERFLOW_ERROR;
    return result;
  }
  if (a3 >= 1)
  {
    uint64_t v18 = a3;
    while (1)
    {
      uint64_t v20 = *v7++;
      uint64_t v19 = v20;
      int v21 = *((_DWORD *)this + 20);
      int v22 = v21 + 1;
      if (v21 >= -1 && *((_DWORD *)this + 21) > v21) {
        goto LABEL_28;
      }
      if (icu::UVector64::expandCapacity((icu::CollationDataBuilder *)((char *)this + 72), v22, a4)) {
        break;
      }
LABEL_29:
      if (!--v18) {
        goto LABEL_30;
      }
    }
    int v21 = *((_DWORD *)this + 20);
    int v22 = v21 + 1;
LABEL_28:
    *(void *)(*((void *)this + 12) + 8 * v21) = v19;
    *((_DWORD *)this + 20) = v22;
    goto LABEL_29;
  }
LABEL_30:
  int v17 = (a3 << 8) | (v9 << 13);
  return v17 | 0xC6u;
}

uint64_t icu::CollationDataBuilder::copyContractionsFromBaseCE32(icu::CollationDataBuilder *this, uint64_t a2, int a3, unsigned int a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 > 0) {
    return 0;
  }
  uint64_t v12 = (unsigned __int16 *)(*(void *)(*((void *)this + 2) + 24) + 2 * (a4 >> 13));
  if ((a4 & 0x100) != 0)
  {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  else
  {
    int v13 = icu::CollationDataBuilder::copyFromBaseCE32(this, a3, v12[1] | (*v12 << 16), 1, a6);
    uint64_t v14 = icu::CollationDataBuilder::addConditionalCE32(this, (UChar **)a2, v13, a6);
    *(_DWORD *)(a5 + 88) = v14;
    if (*(int *)a6 > 0) {
      return 0;
    }
    uint64_t v6 = v14;
    a5 = icu::UVector::elementAt((icu::CollationDataBuilder *)((char *)this + 104), v14);
  }
  unsigned int v15 = *(unsigned __int16 *)(a2 + 8);
  int v16 = (__int16)v15;
  int v17 = v15 >> 5;
  if (v16 >= 0) {
    int v18 = v17;
  }
  else {
    int v18 = *(_DWORD *)(a2 + 12);
  }
  uint64_t v33 = 0;
  long long v31 = 0u;
  *(_OWORD *)long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  memset(v27, 0, sizeof(v27));
  uint64_t v26 = (uint64_t)(v12 + 2);
  icu::UCharsTrie::Iterator::Iterator(v27, &v26, 0, a6);
  uint64_t v25 = v26;
  if (icu::UCharsTrie::Iterator::next(&v25, (icu::UCharsTrie::Iterator *)v27, a6))
  {
    while (1)
    {
      uint64_t v19 = (v29 & 0x8000u) == 0 ? (unsigned __int16)v29 >> 5 : DWORD1(v29);
      icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)((char *)&v28 + 8), 0, v19);
      int v20 = icu::CollationDataBuilder::copyFromBaseCE32(this, a3, v32[3], 1, a6);
      uint64_t v21 = icu::CollationDataBuilder::addConditionalCE32(this, (UChar **)a2, v20, a6);
      *(_DWORD *)(a5 + 88) = v21;
      if (*(int *)a6 > 0) {
        break;
      }
      uint64_t v6 = v21;
      a5 = icu::UVector::elementAt((icu::CollationDataBuilder *)((char *)this + 104), v21);
      int v22 = (uint64_t *)*(unsigned __int16 *)(a2 + 8);
      if (v18 || (v22 & 1) == 0)
      {
        if ((__int16)v22 >= 0) {
          unsigned int v23 = v22 >> 5;
        }
        else {
          unsigned int v23 = *(_DWORD *)(a2 + 12);
        }
        if (v23 > v18)
        {
          if (v18 > 1023)
          {
            int v22 = (uint64_t *)(v22 | 0xFFE0);
            *(_WORD *)(a2 + 8) = (_WORD)v22;
            *(_DWORD *)(a2 + 12) = v18;
          }
          else
          {
            int v22 = (uint64_t *)(v22 & 0x1F | (32 * v18));
            *(_WORD *)(a2 + 8) = (_WORD)v22;
          }
        }
      }
      else
      {
        icu::UnicodeString::unBogus(a2);
      }
      if (!icu::UCharsTrie::Iterator::next(v22, (icu::UCharsTrie::Iterator *)v27, a6)) {
        goto LABEL_28;
      }
    }
    uint64_t v6 = 0;
  }
LABEL_28:
  icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v27);
  return v6;
}

uint64_t icu::CollationDataBuilder::copyFrom(uint64_t this, const icu::CollationDataBuilder *a2, const icu::CollationDataBuilder::CEModifier *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    uint64_t v5 = this;
    this = *(void *)(this + 32);
    if (this && (this = utrie2_isFrozen(this), !this))
    {
      long long v24 = 0u;
      long long v23 = 0u;
      long long v22 = 0u;
      long long v21 = 0u;
      long long v20 = 0u;
      long long v19 = 0u;
      long long v18 = 0u;
      long long v17 = 0u;
      long long v16 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v9 = 0u;
      v8[0] = a2;
      v8[1] = v5;
      v8[2] = a3;
      SDWORD2(v24) = *a4;
      this = utrie2_enum(*((void *)a2 + 4), 0, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_18C8E736C, (uint64_t)v8);
      *a4 = SDWORD2(v24);
      *(unsigned char *)(v5 + 616) |= *((unsigned char *)a2 + 616);
    }
    else
    {
      *a4 = U_INVALID_STATE_ERROR;
    }
  }
  return this;
}

BOOL sub_18C8E736C(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  BOOL result = 1;
  if (a4 != -1 && a4 != 192) {
    return sub_18C8E8568(a1, a2, a3, a4);
  }
  return result;
}

void icu::CollationDataBuilder::optimize(icu::CollationDataBuilder *this, const icu::UnicodeSet *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0 && !icu::UnicodeSet::isEmpty(a2))
  {
    memset(v11, 0, sizeof(v11));
    icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v11, a2);
    while (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v11))
    {
      uint64_t v6 = (icu::Collation *)DWORD2(v11[0]);
      if ((DWORD2(v11[0]) & 0x80000000) != 0) {
        break;
      }
      if (utrie2_get32(*((uint64_t **)this + 4), DWORD2(v11[0])) == 192)
      {
        int v7 = (uint64_t *)*((void *)this + 2);
        uint64_t v8 = sub_18C8DD7F8(v7, v6);
        uint64_t FinalCE32 = icu::CollationData::getFinalCE32((icu::CollationData *)v7, v8);
        int v10 = icu::CollationDataBuilder::copyFromBaseCE32(this, v6, FinalCE32, 1u, a3);
        utrie2_set32(*((void *)this + 4), v6, v10, (int *)a3);
      }
    }
    *((unsigned char *)this + 616) = 1;
    icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v11);
  }
}

void icu::CollationDataBuilder::suppressContractions(uint64_t **this, const icu::UnicodeSet *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0 && !icu::UnicodeSet::isEmpty(a2))
  {
    memset(v13, 0, sizeof(v13));
    icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v13, a2);
    while (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v13))
    {
      uint64_t v6 = (icu::Collation *)DWORD2(v13[0]);
      if ((DWORD2(v13[0]) & 0x80000000) != 0) {
        break;
      }
      unsigned int v7 = utrie2_get32(this[4], DWORD2(v13[0]));
      if (v7 == 192)
      {
        uint64_t v8 = this[2];
        uint64_t v9 = sub_18C8DD7F8(v8, v6);
        uint64_t FinalCE32 = icu::CollationData::getFinalCE32((icu::CollationData *)v8, v9);
        if ((FinalCE32 & 0xCE) == 0xC8)
        {
          int v11 = icu::CollationDataBuilder::copyFromBaseCE32((icu::CollationDataBuilder *)this, v6, FinalCE32, 0, a3);
          utrie2_set32((uint64_t)this[4], v6, v11, (int *)a3);
        }
      }
      else if ((v7 & 0xCF) == 0xC7)
      {
        uint64_t v12 = icu::UVector::elementAt((icu::UVector *)(this + 13), v7 >> 13);
        utrie2_set32((uint64_t)this[4], v6, *(_DWORD *)(v12 + 72), (int *)a3);
        icu::UnicodeSet::remove((icu::UnicodeSet *)(this + 18), v6);
      }
    }
    *((unsigned char *)this + 616) = 1;
    icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v13);
  }
}

BOOL icu::CollationDataBuilder::getJamoCE32s(icu::CollationDataBuilder *this, unsigned int *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  unint64_t v6 = 0;
  char v7 = 0;
  char v8 = *((void *)this + 2) == 0;
  long long v23 = (char *)this + 96;
  while (2)
  {
    if (v6 >= 0x28) {
      LODWORD(v9) = 4480;
    }
    else {
      LODWORD(v9) = 4430;
    }
    if (v6 >= 0x13) {
      uint64_t v9 = v9;
    }
    else {
      uint64_t v9 = 4352;
    }
    int v10 = (icu::Collation *)(v6 + v9);
    unsigned int v11 = utrie2_get32(*((uint64_t **)this + 4), (int)v6 + (int)v9);
    unsigned int v12 = v11;
    BOOL v13 = v11 != -1 && v11 != 192;
    if (v11 == 192) {
      unsigned int v11 = sub_18C8DD7F8(*((uint64_t **)this + 2), v10);
    }
    switch(v11 & 0xF)
    {
      case 0u:
      case 3u:
      case 7u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
        BOOL result = 0;
        *a3 = U_INTERNAL_PROGRAM_ERROR;
        return result;
      case 5u:
      case 6u:
      case 8u:
      case 9u:
        if (v12 == 192) {
          char v7 = 1;
        }
        unsigned int v11 = v12;
        goto LABEL_19;
      case 0xEu:
        unsigned int v14 = v11 >> 13;
        if (v12 == 192)
        {
          long long v15 = (void *)(*((void *)this + 2) + 16);
LABEL_25:
          unint64_t v16 = *(void *)(*v15 + 8 * v14);
          goto LABEL_27;
        }
        long long v15 = v23;
        if (*((_DWORD *)this + 20) > (signed int)v14) {
          goto LABEL_25;
        }
        unint64_t v16 = 0;
LABEL_27:
        unsigned int v11 = icu::Collation::getThreeBytePrimaryForOffsetData(v10, v16) | 0xC1;
LABEL_19:
        v8 |= v13;
        a2[v6++] = v11;
        if (v6 != 67) {
          continue;
        }
        if (v8) {
          BOOL v17 = v7 == 0;
        }
        else {
          BOOL v17 = 1;
        }
        if (!v17)
        {
          for (unint64_t i = 0; i != 67; ++i)
          {
            if (a2[i] == 192)
            {
              if (i >= 0x28) {
                int v19 = 4480;
              }
              else {
                int v19 = 4430;
              }
              if (i < 0x13) {
                int v19 = 4352;
              }
              long long v20 = (icu::Collation *)(i + v19);
              uint64_t v21 = sub_18C8DD7F8(*((uint64_t **)this + 2), (int)i + v19);
              a2[i] = icu::CollationDataBuilder::copyFromBaseCE32(this, v20, v21, 1u, a3);
            }
          }
        }
        if (v8) {
          BOOL v22 = *a3 < U_ILLEGAL_ARGUMENT_ERROR;
        }
        else {
          BOOL v22 = 0;
        }
        BOOL result = v22;
        break;
      case 0xFu:
        unsigned int v11 = 192;
        char v7 = 1;
        goto LABEL_19;
      default:
        goto LABEL_19;
    }
    return result;
  }
}

void *icu::CollationDataBuilder::setDigitTags(uint64_t **this, UErrorCode *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  unsigned int v14 = L"[:Nd:]";
  icu::UnicodeString::UnicodeString(v17, 1, &v14);
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v15, (const icu::UnicodeString *)v17, a2);
  uint64_t v5 = (icu::UnicodeSetIterator *)icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v17);
  unint64_t v6 = (void *)*(unsigned int *)a2;
  if ((int)v6 > 0) {
    return icu::UnicodeSet::~UnicodeSet(v6, (icu::UnicodeSet *)v15);
  }
  memset(v17, 0, sizeof(v17));
  char v7 = icu::UnicodeSetIterator::UnicodeSetIterator(v5, (const icu::UnicodeSet *)v15);
  if (!icu::UnicodeSetIterator::next(v7)) {
    goto LABEL_11;
  }
  while (1)
  {
    unsigned int v8 = DWORD2(v17[0]);
    int v9 = utrie2_get32(this[4], DWORD2(v17[0]));
    if (v9 == -1 || v9 == 192) {
      goto LABEL_8;
    }
    int v10 = icu::CollationDataBuilder::addCE32((icu::CollationDataBuilder *)this, v9, a2);
    if (*(int *)a2 > 0) {
      goto LABEL_11;
    }
    int v11 = v10;
    if (v10 >= 0x80000) {
      break;
    }
    int32_t v12 = u_charDigitValue(v8);
    utrie2_set32((uint64_t)this[4], v8, (v11 << 13) | (v12 << 8) | 0xCA, (int *)a2);
LABEL_8:
    if (!icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v17)) {
      goto LABEL_11;
    }
  }
  *a2 = U_BUFFER_OVERFLOW_ERROR;
LABEL_11:
  icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v17);
  return icu::UnicodeSet::~UnicodeSet(v6, (icu::UnicodeSet *)v15);
}

uint64_t icu::CollationDataBuilder::setLeadSurrogates(icu::CollationDataBuilder *this, UErrorCode *a2)
{
  for (int i = 0; i != 1024; ++i)
  {
    int v6 = -1;
    utrie2_enumForLeadSurrogate(*((void *)this + 4), i + 55296, 0, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_18C8E7A8C, (uint64_t)&v6);
    uint64_t result = utrie2_set32ForLeadSurrogateCodeUnit(*((void *)this + 4), i + 55296, v6 | 0xCDu, (int *)a2);
  }
  return result;
}

uint64_t sub_18C8E7A8C(int *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == -1)
  {
    int v4 = 0;
  }
  else
  {
    if (a4 != 192) {
      goto LABEL_8;
    }
    int v4 = 256;
  }
  if (*a1 < 0)
  {
    uint64_t v5 = 1;
    goto LABEL_10;
  }
  if (*a1 != v4)
  {
LABEL_8:
    uint64_t v5 = 0;
    int v4 = 512;
LABEL_10:
    *a1 = v4;
    return v5;
  }
  return 1;
}

uint64_t icu::CollationDataBuilder::build(icu::CollationDataBuilder *this, icu::CollationData *a2, UErrorCode *a3)
{
  icu::CollationDataBuilder::buildMappings(this, a2, a3);
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    *((_DWORD *)a2 + 14) = *(_DWORD *)(v6 + 56);
    *((void *)a2 + 9) = *(void *)(v6 + 72);
    *((_DWORD *)a2 + 25) = *(_DWORD *)(v6 + 100);
    *(_OWORD *)((char *)a2 + 104) = *(_OWORD *)(v6 + 104);
    *((_DWORD *)a2 + 30) = *(_DWORD *)(v6 + 120);
  }

  return icu::CollationDataBuilder::buildFastLatinTable((uint64_t)this, a2, a3);
}

void icu::CollationDataBuilder::buildMappings(icu::CollationDataBuilder *this, icu::CollationData *a2, UErrorCode *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 > 0) {
    return;
  }
  uint64_t v5 = *((void *)this + 4);
  if (!v5 || utrie2_isFrozen(v5))
  {
    *a3 = U_INVALID_STATE_ERROR;
    return;
  }
  icu::CollationDataBuilder::buildContexts(this, a3);
  long long v38 = 0u;
  memset(v39, 0, 188);
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)uint64_t v34 = 0u;
  long long v35 = 0u;
  if (!icu::CollationDataBuilder::getJamoCE32s(this, v34, a3))
  {
    unsigned int v12 = 44032;
    do
    {
      unsigned int v13 = sub_18C8DD7F8(*((uint64_t **)this + 2), v12);
      utrie2_setRange32(*((void *)this + 4), v12, v12 + 587, v13, 1, (int *)a3);
      BOOL v14 = v12 >= 0xD558;
      v12 += 588;
    }
    while (!v14);
    unsigned int v15 = -1;
    goto LABEL_33;
  }
  uint64_t v7 = 0;
  int v8 = *((_DWORD *)this + 12);
  int v9 = v8;
  while (1)
  {
    unsigned int v10 = v34[v7];
    if (v9 < -1 || *((_DWORD *)this + 13) <= v9)
    {
      if (!icu::UVector32::expandCapacity((icu::CollationDataBuilder *)((char *)this + 40), v9 + 1, a3)) {
        goto LABEL_13;
      }
      int v9 = *((_DWORD *)this + 12);
    }
    *(_DWORD *)(*((void *)this + 8) + 4 * v9) = v10;
    ++*((_DWORD *)this + 12);
LABEL_13:
    if (v7 == 66) {
      break;
    }
    int v9 = *((_DWORD *)this + 12);
    ++v7;
  }
  unsigned int v33 = v8;
  if ((~HIDWORD(v38) & 0xC0) != 0)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = v16;
      if (v16 == 47) {
        break;
      }
      int v18 = *((_DWORD *)v39 + v16++);
    }
    while ((~v18 & 0xC0) != 0);
    BOOL v11 = (unint64_t)(v17 + 19) > 0x41;
  }
  else
  {
    BOOL v11 = 0;
  }
  uint64_t v19 = 0;
  unsigned int v20 = 44032;
  do
  {
    if (v11)
    {
      if ((~v34[v19] & 0xC0) != 0) {
        unsigned int v21 = 460;
      }
      else {
        unsigned int v21 = 204;
      }
    }
    else
    {
      unsigned int v21 = 204;
    }
    utrie2_setRange32(*((void *)this + 4), v20, v20 + 587, v21, 1, (int *)a3);
    ++v19;
    v20 += 588;
  }
  while (v19 != 19);
  unsigned int v15 = v33;
LABEL_33:
  icu::CollationDataBuilder::setDigitTags((uint64_t **)this, a3);
  icu::CollationDataBuilder::setLeadSurrogates(this, a3);
  if (!*((unsigned char *)this + 617))
  {
    int v22 = utrie2_get32(*((uint64_t **)this + 4), 0);
    icu::UVector32::setElementAt((uint64_t)this + 40, v22, 0);
    utrie2_set32(*((void *)this + 4), 0, 203, (int *)a3);
  }
  utrie2_freeze(*((void *)this + 4), 1u, (int *)a3);
  if (*(int *)a3 <= 0)
  {
    int v23 = 0x10000;
    unsigned int v24 = 55296;
    do
    {
      if (!icu::UnicodeSet::containsNone((icu::CollationDataBuilder *)((char *)this + 416), v23, v23 + 1023)) {
        icu::UnicodeSet::add((icu::CollationDataBuilder *)((char *)this + 416), v24);
      }
      ++v24;
      BOOL v25 = v23 == 1113088;
      v23 += 1024;
    }
    while (!v25);
    icu::UnicodeSet::freeze((icu::CollationDataBuilder *)((char *)this + 416));
    *(void *)a2 = *((void *)this + 4);
    uint64_t v26 = *((void *)this + 8);
    *((void *)a2 + 1) = v26;
    *((void *)a2 + 2) = *((void *)this + 12);
    __int16 v27 = *((_WORD *)this + 176);
    if ((v27 & 0x11) != 0)
    {
      long long v28 = 0;
    }
    else if ((v27 & 2) != 0)
    {
      long long v28 = (char *)this + 354;
    }
    else
    {
      long long v28 = (char *)*((void *)this + 46);
    }
    *((void *)a2 + 3) = v28;
    *((_DWORD *)a2 + 15) = *((_DWORD *)this + 12);
    *((_DWORD *)a2 + 16) = *((_DWORD *)this + 20);
    unsigned int v29 = *((unsigned __int16 *)this + 176);
    if ((v29 & 0x8000) != 0) {
      unsigned int v30 = *((_DWORD *)this + 89);
    }
    else {
      unsigned int v30 = v29 >> 5;
    }
    *((_DWORD *)a2 + 17) = v30;
    uint64_t v31 = *((void *)this + 2);
    *((void *)a2 + 4) = v31;
    if ((v15 & 0x80000000) != 0) {
      uint64_t v32 = *(void *)(v31 + 40);
    }
    else {
      uint64_t v32 = v26 + 4 * v15;
    }
    *((void *)a2 + 5) = v32;
    *((void *)a2 + 10) = (char *)this + 416;
  }
}

uint64_t icu::CollationDataBuilder::buildFastLatinTable(uint64_t this, icu::CollationData *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v3 = this;
    int v4 = (uint64_t *)*(unsigned __int8 *)(this + 618);
    if (*(unsigned char *)(this + 618))
    {
      uint64_t v7 = *(void *)(this + 624);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      this = (uint64_t)icu::UMemory::operator new(v4, (icu::UMemory *)0x1CD0, (unint64_t)a2);
      if (this)
      {
        int v8 = (icu::CollationFastLatinBuilder *)icu::CollationFastLatinBuilder::CollationFastLatinBuilder((icu::CollationFastLatinBuilder *)this, a3);
        *(void *)(v3 + 624) = v8;
        this = icu::CollationFastLatinBuilder::forData(v8, a2, a3);
        uint64_t v9 = *(void *)(v3 + 624);
        if (this)
        {
          unsigned int v10 = *(unsigned __int16 *)(v9 + 7312);
          if ((v10 & 0x11) != 0)
          {
            BOOL v11 = 0;
          }
          else if ((v10 & 2) != 0)
          {
            BOOL v11 = (const void *)(v9 + 7314);
          }
          else
          {
            BOOL v11 = *(const void **)(v9 + 7328);
          }
          if ((v10 & 0x8000) != 0) {
            unsigned int v12 = *(_DWORD *)(v9 + 7316);
          }
          else {
            unsigned int v12 = v10 >> 5;
          }
          uint64_t v13 = *(void *)(v3 + 16);
          if (v13 && v12 == *(_DWORD *)(v13 + 96))
          {
            this = memcmp(v11, *(const void **)(v13 + 88), (int)(2 * v12));
            if (!this)
            {
              this = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
              *(void *)(v3 + 624) = 0;
              BOOL v11 = *(const void **)(*(void *)(v3 + 16) + 88);
            }
          }
          *((void *)a2 + 11) = v11;
          *((_DWORD *)a2 + 24) = v12;
        }
        else
        {
          if (v9) {
            this = (*(uint64_t (**)(void))(*(void *)v9 + 8))(*(void *)(v3 + 624));
          }
          *(void *)(v3 + 624) = 0;
        }
      }
      else
      {
        *(void *)(v3 + 624) = 0;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return this;
}

void icu::CollationDataBuilder::buildContexts(icu::CollationDataBuilder *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    if (*((_WORD *)this + 176)) {
      __int16 v4 = 2;
    }
    else {
      __int16 v4 = *((_WORD *)this + 176) & 0x1F;
    }
    *((_WORD *)this + 176) = v4;
    ++*((_DWORD *)this + 102);
    memset(v9, 0, sizeof(v9));
    icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v9, (icu::CollationDataBuilder *)((char *)this + 144));
    if (*(int *)a2 <= 0)
    {
      while (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v9))
      {
        unsigned int v5 = DWORD2(v9[0]);
        unsigned int v6 = utrie2_get32(*((uint64_t **)this + 4), DWORD2(v9[0]));
        if ((v6 & 0xCF) != 0xC7)
        {
          *a2 = U_INTERNAL_PROGRAM_ERROR;
          break;
        }
        uint64_t v7 = icu::UVector::elementAt((icu::CollationDataBuilder *)((char *)this + 104), v6 >> 13);
        int v8 = icu::CollationDataBuilder::buildContext((uint64_t)this, v7, a2);
        utrie2_set32(*((void *)this + 4), v5, v8, (int *)a2);
        if (*(int *)a2 >= 1) {
          break;
        }
      }
    }
    icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v9);
  }
}

uint64_t icu::CollationDataBuilder::addContextTrie(icu::CollationDataBuilder *this, int a2, icu::UCharsTrieBuilder *a3, UErrorCode *a4)
{
  __int16 v6 = a2;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v32 = 0;
  long long v31 = 0u;
  long long v28 = &unk_1EDA47700;
  LOWORD(v29) = 2;
  LOWORD(v23) = HIWORD(a2);
  uint64_t v8 = icu::UnicodeString::doAppend((uint64_t)&v28, (uint64_t)&v23, 0, 1);
  LOWORD(v23) = v6;
  icu::UnicodeString::doAppend(v8, (uint64_t)&v23, 0, 1);
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v27 = 0;
  long long v26 = 0u;
  int v23 = &unk_1EDA47700;
  LOWORD(v24) = 2;
  uint64_t v9 = icu::UCharsTrieBuilder::buildUnicodeString((uint64_t)a3, 1, (icu::UnicodeString *)&v23, a4);
  unsigned int v10 = *((unsigned __int16 *)v9 + 4);
  int v11 = (__int16)v10;
  unsigned int v12 = v10 >> 5;
  if (v11 >= 0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = *((unsigned int *)v9 + 3);
  }
  icu::UnicodeString::doAppend((uint64_t)&v28, v9, 0, v13);
  BOOL v14 = (void *)*(unsigned int *)a4;
  if ((int)v14 > 0)
  {
    uint64_t v15 = 0xFFFFFFFFLL;
    goto LABEL_26;
  }
  if ((v29 & 0x8000u) == 0) {
    int32_t v16 = (unsigned __int16)v29 >> 5;
  }
  else {
    int32_t v16 = DWORD1(v29);
  }
  int v17 = *((__int16 *)this + 176);
  if (v17 < 0)
  {
    int32_t v18 = *((_DWORD *)this + 89);
    if (v29)
    {
LABEL_19:
      if ((v17 & 0x8000) != 0) {
        uint64_t v15 = *((unsigned int *)this + 89);
      }
      else {
        uint64_t v15 = (unsigned __int16)v17 >> 5;
      }
      if ((v29 & 0x8000u) == 0) {
        uint64_t v20 = (unsigned __int16)v29 >> 5;
      }
      else {
        uint64_t v20 = DWORD1(v29);
      }
      icu::UnicodeString::doAppend((uint64_t)this + 344, (const icu::UnicodeString *)&v28, 0, v20);
      goto LABEL_26;
    }
  }
  else
  {
    int32_t v18 = *((unsigned __int16 *)this + 176) >> 5;
    if (v29) {
      goto LABEL_19;
    }
  }
  if (v16 < 1) {
    goto LABEL_19;
  }
  if ((v29 & 2) != 0) {
    uint64_t v19 = (char *)&v29 + 2;
  }
  else {
    uint64_t v19 = (char *)v30;
  }
  uint64_t v15 = icu::UnicodeString::indexOf((uint64_t)this + 344, (uint64_t)v19, 0, v16, 0, v18);
  if ((v15 & 0x80000000) != 0)
  {
    LOWORD(v17) = *((_WORD *)this + 176);
    goto LABEL_19;
  }
LABEL_26:
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v23);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v28);
  return v15;
}

uint64_t *icu::CollationDataBuilder::getCEs@<X0>(icu::CollationDataBuilder *this@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return icu::CollationDataBuilder::getCEs(this, a2, a3, 0, a4, a5);
}

uint64_t *icu::CollationDataBuilder::getCEs@<X0>(icu::CollationDataBuilder *this@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t *a3@<X3>, int a4@<W2>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  int v11 = (icu::CollationIterator *)*((void *)this + 79);
  if (!v11)
  {
    uint64_t result = icu::UMemory::operator new(a6, (icu::UMemory *)0x340, (unint64_t)a2);
    if (!result)
    {
      *((void *)this + 79) = 0;
      return result;
    }
    int v11 = (icu::CollationIterator *)sub_18C8E45E8((uint64_t)result, (uint64_t)this);
    *((void *)this + 79) = v11;
  }

  return (uint64_t *)sub_18C8E4764(v11, (uint64_t)a2, a4, (uint64_t)a3, a5);
}

uint64_t *icu::CollationDataBuilder::getCEs(icu::CollationDataBuilder *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, uint64_t *a4, uint64_t a5)
{
  int v17 = (uint64_t *)*MEMORY[0x1E4F143B8];
  unsigned int v8 = *((unsigned __int16 *)a2 + 4);
  int v9 = (__int16)v8;
  int v10 = v8 >> 5;
  if (v9 >= 0) {
    int v11 = v10;
  }
  else {
    int v11 = *((_DWORD *)a2 + 3);
  }
  if (v11)
  {
    icu::operator+((uint64_t)a2, (uint64_t)a3, (uint64_t)v16);
    int CEs = icu::CollationDataBuilder::getCEs(this, (const icu::UnicodeString *)v16, a4, v11, a5, v12);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v16);
    return CEs;
  }
  else
  {
    return icu::CollationDataBuilder::getCEs(this, a3, a4, 0, a5, v17);
  }
}

BOOL sub_18C8E8568(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v7 = sub_18C8E8600(a1, a4);
  char v8 = v7;
  utrie2_setRange32(*(void *)(*(void *)(a1 + 8) + 32), a2, a3, v7, 1, (int *)(a1 + 272));
  if ((v8 & 0xCF) == 0xC7) {
    icu::UnicodeSet::add((icu::UnicodeSet *)(*(void *)(a1 + 8) + 144), a2, a3);
  }
  return *(_DWORD *)(a1 + 272) < 1;
}

uint64_t sub_18C8E8600(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if ((~a2 & 0xC0) != 0)
  {
    uint64_t v19 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), a2);
    if (v19 != 0x101000100)
    {
      uint64_t v20 = (icu::CollationDataBuilder *)v19;
      unsigned int v21 = *(icu::CollationDataBuilder **)(a1 + 8);
      return icu::CollationDataBuilder::encodeOneCE(v21, v20, (UErrorCode *)(a1 + 272));
    }
    return v2;
  }
  int v4 = a2 & 0xF;
  if (v4 == 7)
  {
    uint64_t v22 = icu::UVector::elementAt((icu::UVector *)(*(void *)a1 + 104), a2 >> 13);
    int v23 = *(icu::CollationDataBuilder **)(a1 + 8);
    int v24 = sub_18C8E8600(a1, *(unsigned int *)(v22 + 72));
    unsigned int v25 = icu::CollationDataBuilder::addConditionalCE32(v23, (UChar **)(v22 + 8), v24, (UErrorCode *)(a1 + 272));
    uint64_t v2 = (v25 << 13) | 0xC7;
    unsigned int v26 = *(_DWORD *)(v22 + 88);
    if ((v26 & 0x80000000) != 0) {
      return v2;
    }
    unsigned int v27 = v25;
    while (1)
    {
      uint64_t v28 = icu::UVector::elementAt((icu::UVector *)(*(void *)a1 + 104), v26);
      uint64_t v29 = icu::UVector::elementAt((icu::UVector *)(*(void *)(a1 + 8) + 104), v27);
      long long v30 = *(icu::CollationDataBuilder **)(a1 + 8);
      int v31 = sub_18C8E8600(a1, *(unsigned int *)(v28 + 72));
      unsigned int v27 = icu::CollationDataBuilder::addConditionalCE32(v30, (UChar **)(v28 + 8), v31, (UErrorCode *)(a1 + 272));
      unsigned int v32 = *(unsigned __int16 *)(v28 + 16);
      if ((v32 & 0x8000) != 0)
      {
        if (*(_DWORD *)(v28 + 20))
        {
LABEL_39:
          if ((v32 & 2) != 0) {
            uint64_t v33 = (unsigned __int16 *)(v28 + 18);
          }
          else {
            uint64_t v33 = *(unsigned __int16 **)(v28 + 32);
          }
          int v34 = *v33;
          goto LABEL_45;
        }
      }
      else if (v32 >> 5)
      {
        goto LABEL_39;
      }
      int v34 = 0xFFFF;
LABEL_45:
      long long v35 = (icu::UnicodeSet *)(*(void *)(a1 + 8) + 416);
      icu::UnicodeString::tempSubString((icu::UnicodeString *)(v28 + 8), v34 + 1, 0x7FFFFFFF, (icu::UnicodeString *)v47);
      icu::UnicodeSet::addAll(v35, (const icu::UnicodeString *)v47);
      icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v47);
      *(_DWORD *)(v29 + 88) = v27;
      unsigned int v26 = *(_DWORD *)(v28 + 88);
      if ((v26 & 0x80000000) != 0) {
        return v2;
      }
    }
  }
  if (v4 == 6)
  {
    long long v37 = (const uint64_t *)(*(void *)(*(void *)a1 + 96) + 8 * (a2 >> 13));
    uint64_t v38 = (a2 >> 8) & 0x1F;
    if (!v38)
    {
LABEL_59:
      int v45 = *(icu::CollationDataBuilder **)(a1 + 8);
      return icu::CollationDataBuilder::encodeExpansion(v45, v37, v38, (UErrorCode *)(a1 + 272));
    }
    uint64_t v39 = 0;
    int v40 = 0;
    while (1)
    {
      uint64_t v41 = v37[v39];
      uint64_t v42 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v41);
      if (v42 != 0x101000100) {
        break;
      }
      uint64_t v42 = v41;
      if (v40) {
        goto LABEL_56;
      }
      char v43 = 1;
LABEL_57:
      if (++v39 == v38)
      {
        if ((v43 & 1) == 0) {
          goto LABEL_62;
        }
        goto LABEL_59;
      }
    }
    if (!v40 && v39)
    {
      for (uint64_t i = 0; i != v39; ++i)
        *(void *)(a1 + 24 + 8 * i) = v37[i];
    }
LABEL_56:
    char v43 = 0;
    *(void *)(a1 + 8 * v39 + 24) = v42;
    int v40 = 1;
    goto LABEL_57;
  }
  if (v4 != 5) {
    return v2;
  }
  unsigned int v5 = (const int *)(*(void *)(*(void *)a1 + 64) + 4 * (a2 >> 13));
  uint64_t v6 = (a2 >> 8) & 0x1F;
  if (!v6) {
    goto LABEL_28;
  }
  uint64_t v7 = 0;
  int v8 = 0;
  do
  {
    int v9 = v5[v7];
    if ((~v9 & 0xC0) != 0
      && (uint64_t v10 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), v5[v7]), v10 != 0x101000100))
    {
      if (!v8 && v7)
      {
        for (uint64_t j = 0; j != v7; ++j)
        {
          int v13 = v5[j];
          unsigned int v14 = v13;
          unint64_t v15 = v13 & 0xFFFFFF00;
          if ((v13 & 0xF) == 1) {
            unint64_t v15 = ((unint64_t)(v13 & 0xFFFFFF00) << 32) | 0x5000500;
          }
          unint64_t v16 = (v13 << 16) & 0xFF000000 | ((unint64_t)((v13 & 0xFFFF0000) >> 16) << 48) | ((unint64_t)v13 << 8);
          if (v14 > 0xBF) {
            unint64_t v16 = v15;
          }
          *(void *)(a1 + 24 + 8 * j) = v16;
        }
      }
    }
    else
    {
      if (!v8)
      {
        char v11 = 1;
        goto LABEL_26;
      }
      if (v9 > 0xBFu)
      {
        if ((v9 & 0xF) == 1) {
          uint64_t v10 = ((unint64_t)(v9 & 0xFFFFFF00) << 32) | 0x5000500;
        }
        else {
          uint64_t v10 = v9 & 0xFFFFFF00;
        }
      }
      else
      {
        uint64_t v10 = (v9 << 16) & 0xFF000000 | ((unint64_t)((v9 & 0xFFFF0000) >> 16) << 48) | ((unint64_t)v9 << 8);
      }
    }
    char v11 = 0;
    *(void *)(a1 + 8 * v7 + 24) = v10;
    int v8 = 1;
LABEL_26:
    ++v7;
  }
  while (v7 != v6);
  if (v11)
  {
LABEL_28:
    int v17 = *(icu::CollationDataBuilder **)(a1 + 8);
    return icu::CollationDataBuilder::encodeExpansion32(v17, v5, v6, (UErrorCode *)(a1 + 272));
  }
LABEL_62:
  unsigned int v46 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v46();
}

uint64_t icu::CollationDataReader::read(uint64_t this, const icu::CollationTailoring *a2, const unsigned __int8 *a3, uint64_t a4, UErrorCode *a5, UErrorCode *a6)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 > 0) {
    return this;
  }
  int v8 = (int)a3;
  int v9 = a2;
  uint64_t v10 = (icu::CollationTailoring *)this;
  if (this)
  {
    if (!a2 || a3 <= 0x17) {
      goto LABEL_13;
    }
    if (*((unsigned __int8 *)a2 + 2) != 218) {
      goto LABEL_30;
    }
    if (*((unsigned char *)a2 + 3) != 39) {
      goto LABEL_30;
    }
    this = icu::CollationDataReader::isAcceptable((_DWORD *)(a4 + 328), (uint64_t)a2, (uint64_t)a3, (unsigned __int16 *)a2 + 2);
    if (!this) {
      goto LABEL_30;
    }
    UCAVersiouint64_t n = icu::CollationTailoring::getUCAVersion(v10);
    this = icu::CollationTailoring::getUCAVersion((icu::CollationTailoring *)a4);
    if (UCAVersion != this)
    {
      int v13 = 28;
      goto LABEL_31;
    }
    uint64_t v12 = *(unsigned __int16 *)v9;
    int v9 = (const icu::CollationTailoring *)((char *)v9 + v12);
    if (v8 < 0)
    {
      BOOL v14 = 0;
      goto LABEL_15;
    }
    v8 -= v12;
  }
  else if (!a2)
  {
LABEL_13:
    int v13 = 1;
LABEL_31:
    *a5 = v13;
    return this;
  }
  if (v8 <= 7) {
    goto LABEL_13;
  }
  BOOL v14 = v8 >= 0;
LABEL_15:
  int v15 = *(_DWORD *)v9;
  if (*(int *)v9 < 2) {
    goto LABEL_30;
  }
  if (v8 < 4 * v15 && v14) {
    goto LABEL_30;
  }
  if (v15 > 0x13)
  {
    uint64_t v17 = 19;
LABEL_24:
    int v18 = *((_DWORD *)v9 + v17);
    goto LABEL_27;
  }
  if (v15 >= 6)
  {
    uint64_t v17 = (v15 - 1);
    goto LABEL_24;
  }
  int v18 = 0;
LABEL_27:
  if (v8 >= v18) {
    BOOL v14 = 0;
  }
  if (v14) {
    goto LABEL_30;
  }
  if (v10) {
    uint64_t v19 = *((void *)v10 + 3);
  }
  else {
    uint64_t v19 = 0;
  }
  if (v15 < 6)
  {
    int v21 = 0;
    int v20 = -1;
    goto LABEL_40;
  }
  int v20 = *((_DWORD *)v9 + 5);
  if (v15 == 6)
  {
    int v21 = 0;
LABEL_40:
    int v22 = -1;
    goto LABEL_43;
  }
  int v22 = *((_DWORD *)v9 + 6);
  int v21 = 1;
LABEL_43:
  unsigned int v23 = v22 - v20;
  if (v22 - v20 < 4)
  {
    unsigned int v25 = 0;
    LODWORD(v26) = 0;
LABEL_50:
    uint64_t v29 = 0;
    LODWORD(v28) = 0;
  }
  else
  {
    if (!v19) {
      goto LABEL_30;
    }
    uint64_t v24 = 0;
    unsigned int v25 = (char *)v9 + v20;
    uint64_t v26 = v23 >> 2;
    uint64_t v27 = (uint64_t)v9 + 4 * v26 + v20 - 4;
    while (*(_DWORD *)(v27 + 4 * v24) >= 0x10000u)
    {
      if (-v26 == --v24)
      {
        LODWORD(v28) = v23 >> 2;
        goto LABEL_53;
      }
    }
    if (!v24) {
      goto LABEL_50;
    }
    uint64_t v28 = -v24;
LABEL_53:
    LODWORD(v26) = v26 - v28;
    uint64_t v29 = (const unsigned int *)&v25[4 * (int)v26];
  }
  if (v21) {
    int v30 = *((_DWORD *)v9 + 6);
  }
  else {
    int v30 = -1;
  }
  if (v15 < 8) {
    int v31 = -1;
  }
  else {
    int v31 = *((_DWORD *)v9 + 7);
  }
  if (v31 - v30 < 256)
  {
    unsigned int v32 = 0;
  }
  else
  {
    if (!v26) {
      goto LABEL_30;
    }
    unsigned int v32 = (const unsigned __int8 *)v9 + v30;
  }
  if (v19 && *(_DWORD *)(v19 + 56) != *((unsigned __int8 *)v9 + 7) << 24) {
    goto LABEL_30;
  }
  if (v15 < 8)
  {
    int v33 = -1;
  }
  else
  {
    int v33 = *((_DWORD *)v9 + 7);
    if (v15 != 8)
    {
      int v34 = *((_DWORD *)v9 + 8);
      goto LABEL_71;
    }
  }
  int v34 = -1;
LABEL_71:
  int v35 = v34 - v33;
  if (v34 - v33 < 8)
  {
    if (!v19) {
      goto LABEL_30;
    }
    uint64_t v38 = 0;
    *(void *)(a4 + 24) = v19;
  }
  else
  {
    double v96 = v32;
    __s1 = v25;
    uint64_t v36 = v19;
    int v95 = v26;
    int v37 = v28;
    this = icu::CollationTailoring::ensureOwnedData((icu::CollationTailoring *)a4, a5);
    if (!this) {
      return this;
    }
    uint64_t v26 = *(void *)(a4 + 336);
    *(void *)(v26 + 32) = v36;
    *(_DWORD *)(v26 + 56) = *((unsigned __int8 *)v9 + 7) << 24;
    this = (uint64_t)utrie2_openFromSerialized(1u, (uint64_t)v9 + v33, v35, 0, (int *)a5);
    *(void *)(a4 + 368) = this;
    *(void *)uint64_t v26 = this;
    if (*(int *)a5 >= 1) {
      return this;
    }
    uint64_t v38 = v26;
    LODWORD(v28) = v37;
    LODWORD(v26) = v95;
    unsigned int v32 = v96;
    uint64_t v19 = v36;
    unsigned int v25 = __s1;
  }
  if (v15 < 10)
  {
    int v39 = -1;
  }
  else
  {
    int v39 = *((_DWORD *)v9 + 9);
    if (v15 != 10)
    {
      int v40 = *((_DWORD *)v9 + 10);
      goto LABEL_82;
    }
  }
  int v40 = -1;
LABEL_82:
  int v41 = v40 - v39;
  if (v41 >= 8)
  {
    if (!v38) {
      goto LABEL_30;
    }
    *(void *)(v38 + 16) = (char *)v9 + v39;
    *(_DWORD *)(v38 + 64) = v41 >> 3;
  }
  if (v15 < 12)
  {
    int v43 = 0;
    int v42 = -1;
    goto LABEL_89;
  }
  int v42 = *((_DWORD *)v9 + 11);
  if (v15 == 12)
  {
    int v43 = 0;
LABEL_89:
    int v44 = -1;
    goto LABEL_91;
  }
  int v44 = *((_DWORD *)v9 + 12);
  int v43 = 1;
LABEL_91:
  int v45 = v44 - v42;
  if (v45 >= 4)
  {
    if (!v38) {
      goto LABEL_30;
    }
    *(void *)(v38 + 8) = (char *)v9 + v42;
    *(_DWORD *)(v38 + 60) = v45 >> 2;
  }
  if (v15 <= 4 || (uint64_t v46 = *((unsigned int *)v9 + 4), (v46 & 0x80000000) != 0))
  {
    if (!v38) {
      goto LABEL_103;
    }
    if (!v19) {
      goto LABEL_30;
    }
    uint64_t v48 = *(void *)(v19 + 40);
  }
  else
  {
    if (!v38) {
      goto LABEL_30;
    }
    uint64_t v47 = *(void *)(v38 + 8);
    if (!v47) {
      goto LABEL_30;
    }
    uint64_t v48 = v47 + 4 * v46;
  }
  *(void *)(v38 + 40) = v48;
LABEL_103:
  if (v43) {
    int v49 = *((_DWORD *)v9 + 12);
  }
  else {
    int v49 = -1;
  }
  if (v15 < 14) {
    int v50 = -1;
  }
  else {
    int v50 = *((_DWORD *)v9 + 13);
  }
  int v51 = v50 - v49;
  if (v51 >= 4)
  {
    if (!v38) {
      goto LABEL_30;
    }
    if (v51 <= 0x13) {
      goto LABEL_30;
    }
    uint64_t v52 = (char *)v9 + v49;
    *(void *)(v38 + 128) = v52;
    *(_DWORD *)(v38 + 136) = v51 >> 2;
    if (*((_DWORD *)v52 + 3) != 83887360 || v52[19] <= 0x44u) {
      goto LABEL_30;
    }
  }
  if (v15 < 14)
  {
    int v54 = 0;
    int v53 = -1;
    goto LABEL_118;
  }
  int v53 = *((_DWORD *)v9 + 13);
  if (v15 == 14)
  {
    int v54 = 0;
LABEL_118:
    int v55 = -1;
    goto LABEL_120;
  }
  int v55 = *((_DWORD *)v9 + 14);
  int v54 = 1;
LABEL_120:
  int v56 = v55 - v53;
  if (v56 >= 2)
  {
    if (!v38) {
      goto LABEL_30;
    }
    *(void *)(v38 + 24) = (char *)v9 + v53;
    *(_DWORD *)(v38 + 68) = v56 >> 1;
  }
  if (v54) {
    int v57 = *((_DWORD *)v9 + 14);
  }
  else {
    int v57 = -1;
  }
  if (v15 < 16) {
    uint64_t v58 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v58 = *((unsigned int *)v9 + 15);
  }
  unsigned int v59 = v58 - v57;
  uint64_t v60 = v38;
  double v97 = v32;
  __s1a = (const int *)v25;
  int v93 = v29;
  int v94 = v28;
  if ((int)v58 - v57 < 2)
  {
    if (!v38)
    {
      uint64_t v61 = v19;
      char v71 = 0;
      goto LABEL_162;
    }
    if (!v19) {
      goto LABEL_30;
    }
    uint64_t v61 = v19;
    uint64_t v68 = *(void *)(v19 + 80);
  }
  else
  {
    if (!v38) {
      goto LABEL_30;
    }
    uint64_t v61 = v19;
    if (v19)
    {
      this = (uint64_t)icu::UnicodeSet::cloneAsThawed(*(icu::UnicodeSet **)(v19 + 80), (unint64_t)a2, (uint64_t *)v58);
      *(void *)(a4 + 376) = this;
      if (!this) {
        goto LABEL_206;
      }
    }
    else
    {
      this = (uint64_t)icu::UMemory::operator new((uint64_t *)v58, (icu::UMemory *)0xC8, (unint64_t)a2);
      if (!this)
      {
        *(void *)(a4 + 376) = 0;
        goto LABEL_206;
      }
      this = icu::UnicodeSet::UnicodeSet(this, &unk_18CA8D61C, 850, 0, a5);
      *(void *)(a4 + 376) = this;
      if (*(int *)a5 >= 1) {
        return this;
      }
    }
    memset(v101, 0, 32);
    this = uset_getSerializedSet((uint64_t)v101, (__int16 *)((char *)v9 + v57), v59 >> 1);
    if (!this) {
      goto LABEL_30;
    }
    int SerializedRangeCount = uset_getSerializedRangeCount((uint64_t)v101);
    if (SerializedRangeCount >= 1)
    {
      int v63 = SerializedRangeCount;
      for (int i = 0; i != v63; ++i)
      {
        uint64_t v100 = 0;
        uset_getSerializedRange((uint64_t *)v101, i, (int *)&v100 + 1, (int *)&v100);
        icu::UnicodeSet::add(*(icu::UnicodeSet **)(a4 + 376), HIDWORD(v100), v100);
      }
    }
    int v65 = 0x10000;
    unsigned int v66 = 55296;
    do
    {
      if (!icu::UnicodeSet::containsNone(*(icu::UnicodeSet **)(a4 + 376), v65, v65 + 1023)) {
        icu::UnicodeSet::add(*(icu::UnicodeSet **)(a4 + 376), v66);
      }
      ++v66;
      BOOL v67 = v65 == 1113088;
      v65 += 1024;
    }
    while (!v67);
    this = (uint64_t)icu::UnicodeSet::freeze(*(icu::UnicodeSet **)(a4 + 376));
    uint64_t v68 = *(void *)(a4 + 376);
  }
  *(void *)(v60 + 80) = v68;
  *(void *)(v60 + 88) = 0;
  *(_DWORD *)(v60 + 96) = 0;
  if (*((unsigned __int8 *)v9 + 6) << 16 == 0x20000)
  {
    if (v15 < 16)
    {
      int v69 = -1;
    }
    else
    {
      int v69 = *((_DWORD *)v9 + 15);
      if (v15 != 16)
      {
        int v70 = *((_DWORD *)v9 + 16);
        goto LABEL_156;
      }
    }
    int v70 = -1;
LABEL_156:
    int v72 = v70 - v69;
    if (v72 < 2)
    {
      if (v61)
      {
        *(void *)(v60 + 88) = *(void *)(v61 + 88);
        *(_DWORD *)(v60 + 96) = *(_DWORD *)(v61 + 96);
      }
    }
    else
    {
      long long v73 = (char *)v9 + v69;
      *(void *)(v60 + 88) = v73;
      *(_DWORD *)(v60 + 96) = v72 >> 1;
      if (v73[1] << 8 != 512) {
        goto LABEL_30;
      }
    }
  }
  char v71 = 1;
LABEL_162:
  if (v15 < 17)
  {
    int v75 = 0;
    int v74 = -1;
    goto LABEL_166;
  }
  int v74 = *((_DWORD *)v9 + 16);
  if (v15 == 17)
  {
    int v75 = 0;
LABEL_166:
    int v76 = -1;
    goto LABEL_168;
  }
  int v76 = *((_DWORD *)v9 + 17);
  int v75 = 1;
LABEL_168:
  unsigned int v77 = v76 - v74;
  if (v76 - v74 < 2)
  {
    char v85 = v71 ^ 1;
    if (!v61) {
      char v85 = 1;
    }
    if ((v85 & 1) == 0)
    {
      *(_DWORD *)(v60 + 100) = *(_DWORD *)(v61 + 100);
      *(_OWORD *)(v60 + 104) = *(_OWORD *)(v61 + 104);
      *(_DWORD *)(v60 + 120) = *(_DWORD *)(v61 + 120);
    }
  }
  else
  {
    if (!v60) {
      goto LABEL_30;
    }
    unsigned int v78 = (unsigned __int16 *)((char *)v9 + v74);
    uint64_t v79 = *v78;
    *(_DWORD *)(v60 + 100) = v79;
    int v80 = (v77 >> 1) - v79;
    int v81 = v80 - 17;
    *(_DWORD *)(v60 + 120) = v80 - 17;
    if ((v80 - 274) <= 0xFFFFFF01) {
      goto LABEL_30;
    }
    unsigned int v82 = v78 + 1;
    *(void *)(v60 + 104) = v82;
    v83 = &v82[v79];
    int v84 = v83[16];
    *(void *)(v60 + 112) = v83 + 16;
    if (v84 || v83[17] != 768 || (__int16)v83[v81 - 1 + 16] != -256) {
      goto LABEL_30;
    }
  }
  if (v75) {
    int v86 = *((_DWORD *)v9 + 17);
  }
  else {
    int v86 = -1;
  }
  if (v15 < 19) {
    int v87 = -1;
  }
  else {
    int v87 = *((_DWORD *)v9 + 18);
  }
  if (v87 - v86 < 256)
  {
    if (!v60) {
      goto LABEL_192;
    }
    if (!v61) {
      goto LABEL_30;
    }
    int v88 = *(char **)(v61 + 72);
  }
  else
  {
    if (!v60) {
      goto LABEL_30;
    }
    int v88 = (char *)v9 + v86;
  }
  *(void *)(v60 + 72) = v88;
LABEL_192:
  uint64_t v89 = *(void *)(a4 + 32);
  unsigned int v90 = *((_DWORD *)v9 + 1);
  bzero(v101, 0x300uLL);
  this = icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(a4 + 24), (const icu::CollationData *)v89, (const icu::CollationSettings *)v101, (unsigned __int16 *)0x180);
  if ((unsigned __int16)v90 != *(_DWORD *)(v89 + 24)
    || !*(_DWORD *)(v89 + 28)
    || v26 != *(_DWORD *)(v89 + 72)
    || (int v91 = this, v26) && (this = memcmp(__s1a, *(const void **)(v89 + 64), 4 * (int)v26), this)
    || v91 != *(_DWORD *)(v89 + 80)
    || (v91 & 0x80000000) == 0 && (this = memcmp(v101, (const void *)(v89 + 84), 0x300uLL), this))
  {
    this = (uint64_t)sub_18C8DFC68((atomic_uint **)(a4 + 32));
    if (this)
    {
      uint64_t v92 = this;
      *(_DWORD *)(this + 24) = (unsigned __int16)v90;
      this = icu::CollationData::getLastPrimaryForGroup(*(icu::CollationData **)(a4 + 24), (v90 >> 4) & 7 | 0x1000);
      *(_DWORD *)(v92 + 28) = this;
      if (this)
      {
        if (v26) {
          icu::CollationSettings::aliasReordering((void **)v92, (const icu::CollationData *)v61, __s1a, v26, v93, v94, v97, a5);
        }
        this = icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(a4 + 24), (const icu::CollationData *)v92, (const icu::CollationSettings *)(v92 + 84), (unsigned __int16 *)0x180);
        *(_DWORD *)(v92 + 80) = this;
        return this;
      }
LABEL_30:
      int v13 = 3;
      goto LABEL_31;
    }
LABEL_206:
    int v13 = 7;
    goto LABEL_31;
  }
  return this;
}

uint64_t icu::CollationDataReader::isAcceptable(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  if (*a4 < 0x14u
    || *((unsigned char *)a4 + 4)
    || *((unsigned char *)a4 + 5)
    || *((unsigned char *)a4 + 8) != 85
    || *((unsigned char *)a4 + 9) != 67
    || *((unsigned char *)a4 + 10) != 111
    || *((unsigned char *)a4 + 11) != 108
    || *((unsigned char *)a4 + 12) != 5)
  {
    return 0;
  }
  if (a1) {
    *a1 = *((_DWORD *)a4 + 4);
  }
  return 1;
}

int *icu::RuleBasedCollator::cloneRuleData(icu::RuleBasedCollator *this, int *a2, UErrorCode *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    uint64_t v7 = (int *)uprv_malloc(0x4E20uLL);
    if (v7)
    {
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      *(_OWORD *)unint64_t v16 = 0u;
      LODWORD(v14) = 20000;
      int v8 = icu::CollationDataWriter::write(0, (int *)(*((void *)this + 3) + 328), *(unsigned __int8 **)(*((void *)this + 3) + 24), *((const icu::CollationData **)this + 2), 0, 0, (int *)v16, v7, v14, a3, 0);
      *a2 = v8;
      UErrorCode v9 = *a3;
      if (*a3 != U_BUFFER_OVERFLOW_ERROR)
      {
LABEL_8:
        if (v9 >= U_ILLEGAL_ARGUMENT_ERROR) {
          uint64_t v3 = 0;
        }
        else {
          uint64_t v3 = v7;
        }
        if (v9 < U_ILLEGAL_ARGUMENT_ERROR) {
          uint64_t v7 = 0;
        }
        goto LABEL_15;
      }
      if (v8 >= 1)
      {
        uint64_t v10 = (int *)uprv_malloc(v8);
        if (v10)
        {
          char v11 = v10;
          uprv_free(v7);
          *a3 = U_ZERO_ERROR;
          int v12 = *a2;
          long long v19 = 0u;
          long long v20 = 0u;
          long long v17 = 0u;
          long long v18 = 0u;
          *(_OWORD *)unint64_t v16 = 0u;
          LODWORD(v15) = v12;
          *a2 = icu::CollationDataWriter::write(0, (int *)(*((void *)this + 3) + 328), *(unsigned __int8 **)(*((void *)this + 3) + 24), *((const icu::CollationData **)this + 2), 0, 0, (int *)v16, v11, v15, a3, 0);
          UErrorCode v9 = *a3;
          uint64_t v7 = v11;
          goto LABEL_8;
        }
      }
    }
    uint64_t v3 = 0;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
LABEL_15:
    uprv_free(v7);
    return v3;
  }
  return 0;
}

uint64_t icu::RuleBasedCollator::cloneBinary(icu::RuleBasedCollator *this, unsigned __int8 *a2, int a3, UErrorCode *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  LODWORD(v5) = a3;
  return icu::CollationDataWriter::write(0, (int *)(*((void *)this + 3) + 328), *(unsigned __int8 **)(*((void *)this + 3) + 24), *((const icu::CollationData **)this + 2), 0, 0, (int *)v6, (int *)a2, v5, a4, 0);
}

uint64_t icu::CollationDataWriter::writeTailoring(icu::CollationDataWriter *this, const icu::CollationTailoring *a2, const icu::CollationSettings *a3, int *a4, unsigned __int8 *a5, UErrorCode *a6, UErrorCode *a7)
{
  LODWORD(v8) = a5;
  return icu::CollationDataWriter::write(0, (int *)this + 82, *((unsigned __int8 **)this + 3), a2, 0, 0, (int *)a3, a4, v8, a6, vars0);
}

uint64_t icu::CollationDataWriter::writeBase(icu::CollationDataWriter *this, const icu::CollationData *a2, const icu::CollationSettings *a3, const void *a4, int *a5, int *a6, unsigned __int8 *a7, UErrorCode *a8, UErrorCode *a9)
{
  LODWORD(v10) = a7;
  return icu::CollationDataWriter::write((icu::CollationDataWriter *)1, 0, (unsigned __int8 *)this, a2, a3, a4, a5, a6, v10, a8, vars0);
}

uint64_t icu::CollationDataWriter::write(icu::CollationDataWriter *this, int *a2, unsigned __int8 *a3, const icu::CollationData *a4, const icu::CollationSettings *a5, const void *a6, int *a7, int *a8, unsigned __int8 *a9, UErrorCode *a10, UErrorCode *a11)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  if (*(int *)a10 <= 0)
  {
    if ((a9 & 0x80000000) != 0 || (int v14 = (int)a6, v18 = (int)this, !a8) && a9)
    {
      uint64_t v11 = 0;
      *a10 = U_ILLEGAL_ARGUMENT_ERROR;
      return v11;
    }
    int v86 = (int)a9;
    uint64_t v90 = 0;
    memset(v89, 0, sizeof(v89));
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v89);
    uint64_t v19 = *((void *)a3 + 4);
    int v82 = *((void *)a3 + 11) != 0;
    __dst = a8;
    uint64_t v80 = v19;
    if (v18)
    {
      icu::UnicodeSet::operator=((icu::UnicodeSet *)v89, *((const icu::UnicodeSet **)a3 + 10));
      int v85 = 0;
      int v81 = *((_DWORD *)a3 + 24);
      int v20 = 20;
    }
    else if (v19)
    {
      if (*((_DWORD *)a3 + 17)) {
        int v20 = 15;
      }
      else {
        int v20 = 13;
      }
      uint64_t v28 = (icu::UVector **)icu::UnicodeSet::addAll((icu::UVector **)v89, *((const icu::UnicodeSet **)a3 + 10));
      icu::UnicodeSet::removeAll(v28, *(const icu::UnicodeSet **)(v19 + 80));
      if (!icu::UnicodeSet::isEmpty((icu::UnicodeSet *)v89)) {
        int v20 = 16;
      }
      int v85 = 0;
      if (*((void *)a3 + 11) == *(void *)(v19 + 88))
      {
        int v81 = 0;
      }
      else
      {
        int v81 = *((_DWORD *)a3 + 24);
        int v20 = 17;
      }
    }
    else
    {
      int v81 = 0;
      if (*((_DWORD *)a4 + 18)) {
        int v20 = 8;
      }
      else {
        int v20 = 2;
      }
      int v85 = 1;
    }
    long long v87 = 0u;
    long long v88 = 0u;
    icu::UVector32::UVector32((icu::UVector32 *)&v87, a10);
    int v22 = (const int *)*((void *)a4 + 8);
    uint64_t v23 = *((unsigned int *)a4 + 18);
    uint64_t v24 = (icu::CollationSettings *)*((void *)a4 + 4);
    if (v24 && icu::CollationSettings::reorderTableHasSplitBytes(v24, v21))
    {
      int v77 = v20;
      icu::CollationData::makeReorderRanges((icu::CollationData *)a3, v22, v23, (icu::UVector32 *)&v87, a10);
      if ((int)v23 >= 1)
      {
        for (uint64_t i = 0; i != v23; ++i)
          icu::UVector32::insertElementAt(&v87, v22[i], i, a10);
      }
      int v26 = v85;
      if (*(int *)a10 >= 1)
      {
        uint64_t v11 = 0;
LABEL_112:
        icu::UVector32::~UVector32((void **)&v87);
        icu::UnicodeSet::~UnicodeSet(v74, (icu::UnicodeSet *)v89);
        return v11;
      }
      int v22 = (const int *)*((void *)&v88 + 1);
      LODWORD(v23) = DWORD2(v87);
      int v20 = v77;
    }
    else
    {
      int v26 = v85;
    }
    int v27 = v82 << 17;
    if (v18)
    {
      int v83 = 0;
    }
    else
    {
      if (*((_DWORD *)a3 + 16)) {
        int v29 = v26;
      }
      else {
        int v29 = 1;
      }
      int v78 = v20;
      if ((((_BYTE)v23 + (_BYTE)v20) & 1) == 0) {
        int v29 = 1;
      }
      if (v29) {
        int v30 = 24;
      }
      else {
        int v30 = 28;
      }
      int v83 = v30;
      if ((int)a9 >= v30)
      {
        int v86 = a9 - v30;
        int v31 = *a2;
        *(_WORD *)__dst = v30;
        int v76 = v27;
        *((_WORD *)__dst + 1) = 10202;
        *(_OWORD *)(__dst + 1) = xmmword_18CA8DCC0;
        __dst[5] = v31;
        bzero(__dst + 6, (v30 - 24));
        int v27 = v76;
        int v26 = v85;
        __dst = (int *)((char *)__dst + v30);
      }
      else
      {
        int v86 = 0;
        __dst = 0;
      }
      int v20 = v78;
    }
    *a7 = v20;
    int v32 = *((_DWORD *)a3 + 14) | v27 | *((_DWORD *)a4 + 6);
    *((void *)a7 + 1) = 0;
    a7[1] = v32;
    size_t v33 = (4 * v20);
    if ((v26 & 1) != 0 || (uint64_t v35 = *((void *)a3 + 5), !v18) && v35 == *(void *)(v80 + 40)) {
      LODWORD(v34) = -1;
    }
    else {
      unint64_t v34 = (unint64_t)(v35 - *((void *)a3 + 1)) >> 2;
    }
    a7[4] = v34;
    a7[5] = v33;
    int v36 = 4 * (v23 + v20);
    a7[6] = v36;
    if (*((void *)a4 + 4)) {
      int v37 = v36 + 256;
    }
    else {
      int v37 = 4 * (v23 + v20);
    }
    a7[7] = v37;
    if (v26)
    {
      a7[8] = v37;
      a7[9] = v37;
    }
    else
    {
      v92[0] = U_ZERO_ERROR;
      int v38 = v86 - v37;
      if (v86 <= v37)
      {
        int v39 = 0;
        int v38 = 0;
      }
      else
      {
        int v39 = (char *)__dst + v37;
      }
      int v40 = utrie2_serialize(*(void *)a3, v39, v38, (int *)v92);
      UErrorCode v41 = v92[0];
      if (v92[0] >= U_ILLEGAL_ARGUMENT_ERROR && v92[0] != U_BUFFER_OVERFLOW_ERROR) {
        goto LABEL_77;
      }
      a7[8] = v40 + v37;
      a7[9] = v40 + v37;
      int v42 = *((_DWORD *)a3 + 16);
      if (v42) {
        v37 += v40 + 8 * v42;
      }
      else {
        v37 += v40;
      }
      int v26 = v85;
    }
    a7[10] = v37;
    a7[11] = v37;
    int v43 = 4 * *((_DWORD *)a3 + 15);
    if (v26) {
      int v43 = 0;
    }
    int v44 = v43 + v37;
    int v45 = v43 + v37 + 4 * v14;
    a7[12] = v44;
    a7[13] = v45;
    uint64_t v46 = 2 * *((int *)a3 + 17) + v45;
    if (v26) {
      int v47 = v45;
    }
    else {
      int v47 = 2 * *((_DWORD *)a3 + 17) + v45;
    }
    a7[14] = v47;
    if (v26) {
      goto LABEL_79;
    }
    if (icu::UnicodeSet::isEmpty((icu::UnicodeSet *)v89))
    {
      int v45 = v46;
LABEL_79:
      a7[15] = v45;
      int v51 = v45 + 2 * v81;
      long long v93 = 0u;
      uint64_t v96 = 0;
      long long v95 = 0u;
      long long v94 = 0u;
      *(void *)uint64_t v92 = &unk_1EDA47700;
      LOWORD(v93) = 2;
      a7[16] = v51;
      if (v18)
      {
        __int16 v91 = *((_DWORD *)a3 + 25);
        icu::UnicodeString::doAppend((uint64_t)v92, (uint64_t)&v91, 0, 1);
        icu::UnicodeString::doAppend((uint64_t)v92, *((void *)a3 + 13), 0, (*((_DWORD *)a3 + 25) + 16));
        icu::UnicodeString::doAppend((uint64_t)v92, *((void *)a3 + 14), 0, *((unsigned int *)a3 + 30));
        int v52 = (unsigned __int16)v93 >> 5;
        if ((v93 & 0x8000u) != 0) {
          int v52 = DWORD1(v93);
        }
        v51 += 2 * v52;
      }
      if (v18) {
        int v53 = v51 + 256;
      }
      else {
        int v53 = v51;
      }
      a7[17] = v51;
      a7[18] = v53;
      a7[19] = v53;
      if (v53 <= v86)
      {
        memcpy(__dst, a7, v33);
        int v56 = a7[6];
        uint64_t v57 = a7[5];
        if (v56 > (int)v57)
        {
          memcpy((char *)__dst + v57, v22, v56 - (int)v57);
          int v56 = a7[6];
        }
        int v58 = a7[7];
        BOOL v59 = __OFSUB__(v58, v56);
        int v60 = v58 - v56;
        if (!((v60 < 0) ^ v59 | (v60 == 0))) {
          memcpy((char *)__dst + v56, *((const void **)a4 + 4), v60);
        }
        int v61 = a7[10];
        uint64_t v62 = a7[9];
        if (v61 > (int)v62) {
          memcpy((char *)__dst + v62, *((const void **)a3 + 2), v61 - (int)v62);
        }
        int v63 = a7[12];
        uint64_t v64 = a7[11];
        int v55 = v83;
        if (v63 > (int)v64)
        {
          memcpy((char *)__dst + v64, *((const void **)a3 + 1), v63 - (int)v64);
          int v63 = a7[12];
        }
        int v65 = a7[13];
        if (v65 > v63)
        {
          memcpy((char *)__dst + v63, a5, v65 - v63);
          int v65 = a7[13];
        }
        int v66 = a7[14];
        BOOL v59 = __OFSUB__(v66, v65);
        int v67 = v66 - v65;
        if (!((v67 < 0) ^ v59 | (v67 == 0))) {
          memcpy((char *)__dst + v65, *((const void **)a3 + 3), v67);
        }
        int v68 = a7[16];
        uint64_t v69 = a7[15];
        if (v68 > (int)v69) {
          memcpy((char *)__dst + v69, *((const void **)a3 + 11), v68 - (int)v69);
        }
        if ((v93 & 0x11) != 0)
        {
          int v70 = 0;
        }
        else if ((v93 & 2) != 0)
        {
          int v70 = (char *)&v93 + 2;
        }
        else
        {
          int v70 = (char *)v94;
        }
        uint64_t v54 = a7[17];
        uint64_t v71 = a7[16];
        if ((int)v54 > (int)v71)
        {
          memcpy((char *)__dst + v71, v70, (int)v54 - (int)v71);
          uint64_t v54 = a7[17];
        }
        int v72 = a7[18];
        BOOL v59 = __OFSUB__(v72, v54);
        int v73 = v72 - v54;
        if (!((v73 < 0) ^ v59 | (v73 == 0))) {
          memcpy((char *)__dst + (int)v54, *((const void **)a3 + 9), v73);
        }
      }
      else
      {
        uint64_t v54 = 15;
        *a10 = U_BUFFER_OVERFLOW_ERROR;
        int v55 = v83;
      }
      uint64_t v11 = (v53 + v55);
      icu::UnicodeString::~UnicodeString((void *)v54, (icu::UnicodeString *)v92);
      goto LABEL_112;
    }
    v92[0] = U_ZERO_ERROR;
    if (v86 <= (int)v46)
    {
      uint64_t v48 = 0;
      int v49 = 0;
    }
    else
    {
      uint64_t v48 = (unsigned __int16 *)((char *)__dst + v46);
      int v49 = (v86 - (int)v46) / 2;
    }
    int v50 = icu::UnicodeSet::serialize((icu::UnicodeSet *)v89, v48, v49, v92);
    UErrorCode v41 = v92[0];
    if (v92[0] < U_ILLEGAL_ARGUMENT_ERROR || v92[0] == U_BUFFER_OVERFLOW_ERROR)
    {
      int v45 = v46 + 2 * v50;
      goto LABEL_79;
    }
LABEL_77:
    uint64_t v11 = 0;
    *a10 = v41;
    goto LABEL_112;
  }
  return 0;
}

char *icu::CollationDataWriter::copyData(char *this, const int *a2, void *__src, char *a4, unsigned __int8 *a5)
{
  unsigned int v5 = &this[4 * (int)a2];
  int v6 = *(_DWORD *)v5;
  int v7 = *((_DWORD *)v5 + 1);
  if (v7 > v6) {
    return (char *)memcpy(&a4[v6], __src, v7 - v6);
  }
  return this;
}

uint64_t icu::CollationFastLatin::getOptions(icu::CollationFastLatin *this, const icu::CollationData *a2, const icu::CollationSettings *a3, unsigned __int16 *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a4 == 384)
  {
    int v6 = (unsigned __int8 *)*((void *)this + 11);
    if (v6)
    {
      unint64_t v9 = *((unsigned int *)a2 + 6);
      if ((v9 & 0xC) != 0)
      {
        uint64_t v10 = ((v9 >> 4) & 7) + 1;
        if (v10 >= *v6) {
          return result;
        }
        unsigned int v11 = *(unsigned __int16 *)&v6[2 * v10];
      }
      else
      {
        unsigned int v11 = 3071;
      }
      uint64_t v12 = *((void *)a2 + 4);
      if (v12)
      {
        int v13 = 0;
        unsigned int v14 = 0;
        unsigned int v15 = 0;
        unsigned int v16 = 0;
        unsigned int v17 = 0;
        do
        {
          FirstPrimaryForGrouunint64_t p = icu::CollationData::getFirstPrimaryForGroup(this, v13 + 4096);
          int v19 = *(unsigned __int8 *)(*((void *)a2 + 4) + ((unint64_t)FirstPrimaryForGroup >> 24));
          if (FirstPrimaryForGroup >= 2 && v19 == 0) {
            unsigned int v21 = icu::CollationSettings::reorderEx(a2, FirstPrimaryForGroup);
          }
          else {
            unsigned int v21 = FirstPrimaryForGroup & 0xFFFFFF | (v19 << 24);
          }
          if (v13 == 4)
          {
            unsigned int v16 = v17;
            unsigned int v15 = v21;
          }
          else if (v21)
          {
            if (v21 < v17) {
              return 0xFFFFFFFFLL;
            }
            if (v17 == v16) {
              unsigned int v22 = v21;
            }
            else {
              unsigned int v22 = 0;
            }
            if (v14) {
              unsigned int v22 = v14;
            }
            if (v15) {
              unsigned int v14 = v22;
            }
            unsigned int v17 = v21;
          }
          ++v13;
        }
        while (v13 != 8);
        uint64_t v23 = icu::CollationData::getFirstPrimaryForGroup(this, 0x19u);
        if (v23 < 2 || *(unsigned char *)(*((void *)a2 + 4) + ((unint64_t)v23 >> 24))) {
          unsigned int v24 = v23 & 0xFFFFFF | (*(unsigned __int8 *)(*((void *)a2 + 4) + ((unint64_t)v23 >> 24)) << 24);
        }
        else {
          unsigned int v24 = icu::CollationSettings::reorderEx(a2, v23);
        }
        if (v24 < v17) {
          return 0xFFFFFFFFLL;
        }
        if (v14) {
          unsigned int v25 = v14;
        }
        else {
          unsigned int v25 = v24;
        }
        LODWORD(v12) = v16 >= v15 || v15 >= v25;
      }
      uint64_t v27 = 0;
      uint64_t v28 = &v6[2 * *v6];
      do
      {
        unsigned int v29 = *(unsigned __int16 *)&v28[v27];
        __int16 v30 = v29 & 0xFFF8;
        if (v11 >= v29) {
          __int16 v30 = 0;
        }
        if (v29 <= 0xFFF) {
          __int16 v31 = v30;
        }
        else {
          __int16 v31 = v29 & 0xFC00;
        }
        *(_WORD *)((char *)a3 + v27) = v31;
        v27 += 2;
      }
      while (v27 != 768);
      int v32 = *((_DWORD *)a2 + 6);
      if (v12 || (v32 & 2) != 0)
      {
        *((void *)a3 + 12) = 0;
        *((void *)a3 + 13) = 0;
        *((_DWORD *)a3 + 28) = 0;
      }
      return v32 | (v11 << 16);
    }
  }
  return result;
}

uint64_t icu::CollationFastLatin::compareUTF16(unsigned __int8 *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  __int16 v9 = a3;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  int v90 = a7;
  int v91 = a5;
  uint64_t v13 = (uint64_t)&a1[2 * *a1];
  unsigned int v14 = (icu::CollationFastLatin *)HIWORD(a3);
  unsigned int v88 = (unsigned __int16)a3;
  uint64_t v89 = 0;
  while (2)
  {
    if (!v11)
    {
      while (1)
      {
        uint64_t v18 = SHIDWORD(v89);
        if (HIDWORD(v89) == v91)
        {
          unsigned int v11 = 2;
          goto LABEL_3;
        }
        ++HIDWORD(v89);
        uint64_t v19 = *(unsigned __int16 *)(a4 + 2 * v18);
        if (v19 <= 0x17F) {
          break;
        }
        if ((v19 & 0xFFC0) == 0x2000)
        {
          uint64_t v20 = (v19 - 7808);
LABEL_25:
          uint64_t v17 = *(unsigned __int16 *)(v13 + 2 * v20);
          goto LABEL_26;
        }
        if (v19 == 0xFFFF) {
          uint64_t v17 = 64680;
        }
        else {
          uint64_t v17 = 1;
        }
        if (v19 == 65534)
        {
          uint64_t v17 = 3;
          goto LABEL_27;
        }
LABEL_26:
        if (v17 >= 0x1000)
        {
          unsigned int v11 = v17 & 0xFC00;
          goto LABEL_3;
        }
LABEL_27:
        if (v17 > v14)
        {
          unsigned int v11 = v17 & 0xFF8;
          goto LABEL_3;
        }
        unsigned int v21 = icu::CollationFastLatin::nextPair(v13, v19, v17, a4, 0, (int *)&v89 + 1, &v91);
        if (v21 == 1) {
          return 4294967294;
        }
        if ((unsigned __int16)v21 <= 0xBFFu) {
          unsigned int v22 = v21;
        }
        else {
          unsigned int v22 = 0;
        }
        if ((unsigned __int16)v21 > v14) {
          unsigned int v22 = v21 & 0xFFF8FFF8;
        }
        if ((unsigned __int16)v21 >= 0x1000u) {
          unsigned int v11 = v21 & 0xFC00FC00;
        }
        else {
          unsigned int v11 = v22;
        }
        if (v11) {
          goto LABEL_3;
        }
      }
      unsigned int v11 = *(unsigned __int16 *)(a2 + 2 * v19);
      if (*(_WORD *)(a2 + 2 * v19)) {
        goto LABEL_3;
      }
      if ((v9 & 2) != 0)
      {
        uint64_t v20 = *(unsigned __int16 *)(a4 + 2 * v18);
        if ((v19 - 58) >= 0xFFFFFFF6) {
          return 4294967294;
        }
      }
      else
      {
        uint64_t v20 = *(unsigned __int16 *)(a4 + 2 * v18);
      }
      goto LABEL_25;
    }
LABEL_3:
    if (v12) {
      goto LABEL_4;
    }
    while (1)
    {
      uint64_t v24 = (int)v89;
      if (v89 == v90)
      {
        unsigned int v12 = 2;
        goto LABEL_4;
      }
      LODWORD(v89) = v89 + 1;
      uint64_t v25 = *(unsigned __int16 *)(a6 + 2 * v24);
      if (v25 <= 0x17F)
      {
        unsigned int v12 = *(unsigned __int16 *)(a2 + 2 * v25);
        if (*(_WORD *)(a2 + 2 * v25)) {
          goto LABEL_4;
        }
        if ((v9 & 2) != 0)
        {
          uint64_t v26 = *(unsigned __int16 *)(a6 + 2 * v24);
          if ((v25 - 58) >= 0xFFFFFFF6) {
            return 4294967294;
          }
        }
        else
        {
          uint64_t v26 = *(unsigned __int16 *)(a6 + 2 * v24);
        }
        goto LABEL_53;
      }
      if ((v25 & 0xFFC0) == 0x2000)
      {
        uint64_t v26 = (v25 - 7808);
LABEL_53:
        uint64_t v23 = *(unsigned __int16 *)(v13 + 2 * v26);
        goto LABEL_54;
      }
      if (v25 == 0xFFFF) {
        uint64_t v23 = 64680;
      }
      else {
        uint64_t v23 = 1;
      }
      if (v25 == 65534)
      {
        uint64_t v23 = 3;
        goto LABEL_55;
      }
LABEL_54:
      if (v23 >= 0x1000) {
        break;
      }
LABEL_55:
      if (v23 > v14)
      {
        unsigned int v12 = v23 & 0xFF8;
        goto LABEL_4;
      }
      unsigned int v27 = icu::CollationFastLatin::nextPair(v13, v25, v23, a6, 0, (int *)&v89, &v90);
      if (v27 == 1) {
        return 4294967294;
      }
      if ((unsigned __int16)v27 <= 0xBFFu) {
        unsigned int v28 = v27;
      }
      else {
        unsigned int v28 = 0;
      }
      if ((unsigned __int16)v27 > v14) {
        unsigned int v28 = v27 & 0xFFF8FFF8;
      }
      if ((unsigned __int16)v27 >= 0x1000u) {
        unsigned int v12 = v27 & 0xFC00FC00;
      }
      else {
        unsigned int v12 = v28;
      }
      if (v12) {
        goto LABEL_4;
      }
    }
    unsigned int v12 = v23 & 0xFC00;
LABEL_4:
    if (v11 == v12)
    {
      unsigned int v12 = 0;
      BOOL v15 = v11 == 2;
      unsigned int v11 = 0;
      if (!v15) {
        continue;
      }
    }
    else
    {
      unsigned int v16 = (unsigned __int16)v11;
      if ((unsigned __int16)v11 != (unsigned __int16)v12)
      {
        unsigned int v43 = (unsigned __int16)v12;
        goto LABEL_123;
      }
      if (v11 != 2)
      {
        v11 >>= 16;
        v12 >>= 16;
        continue;
      }
    }
    break;
  }
  if (v88 >= 0x1000)
  {
    unsigned int v44 = 0;
    unsigned int v45 = 0;
    uint64_t v89 = 0;
    while (v44)
    {
LABEL_128:
      if (v45) {
        goto LABEL_129;
      }
      while (1)
      {
        uint64_t v53 = (int)v89;
        if (v89 == v90)
        {
          unsigned int v45 = 2;
          goto LABEL_129;
        }
        LODWORD(v89) = v89 + 1;
        unsigned int v54 = *(unsigned __int16 *)(a6 + 2 * v53);
        if (v54 <= 0x17F)
        {
          uint64_t v55 = *(unsigned __int16 *)(a6 + 2 * v53);
LABEL_161:
          uint64_t v52 = *(unsigned __int16 *)(v13 + 2 * v55);
          goto LABEL_162;
        }
        if ((v54 & 0xFFC0) == 0x2000)
        {
          uint64_t v55 = v54 - 7808;
          goto LABEL_161;
        }
        if (v54 == 0xFFFF) {
          uint64_t v52 = 64680;
        }
        else {
          uint64_t v52 = 1;
        }
        if (v54 == 65534)
        {
          uint64_t v52 = 3;
          goto LABEL_163;
        }
LABEL_162:
        if (v52 >= 0x1000) {
          break;
        }
LABEL_163:
        if (v52 > v14)
        {
          unsigned int v45 = 192;
          goto LABEL_129;
        }
        unsigned int v56 = icu::CollationFastLatin::nextPair(v13, v54, v52, a6, 0, (int *)&v89, &v90);
        unsigned int Secondaries = icu::CollationFastLatin::getSecondaries(v14, v56);
        if (Secondaries)
        {
          unsigned int v45 = Secondaries;
          goto LABEL_129;
        }
      }
      if (((unsigned __int16)v52 & 0x3E0u) >= 0x180) {
        unsigned int v45 = ((v52 & 0x3E0) << 16) + 2097344;
      }
      else {
        unsigned int v45 = (v52 & 0x3E0) + 32;
      }
LABEL_129:
      if (v44 != v45)
      {
        if ((unsigned __int16)v44 != (unsigned __int16)v45)
        {
          if ((unsigned __int16)v44 < (unsigned __int16)v45) {
            unsigned int v71 = -1;
          }
          else {
            unsigned int v71 = 1;
          }
          if ((v9 & 0x800) != 0) {
            return 4294967294;
          }
          else {
            return v71;
          }
        }
        if (v44 != 2)
        {
          v44 >>= 16;
          v45 >>= 16;
          continue;
        }
        goto LABEL_75;
      }
      unsigned int v45 = 0;
      BOOL v15 = v44 == 2;
      unsigned int v44 = 0;
      if (v15) {
        goto LABEL_75;
      }
    }
    while (1)
    {
      uint64_t v47 = SHIDWORD(v89);
      if (HIDWORD(v89) == v91)
      {
        unsigned int v44 = 2;
        goto LABEL_128;
      }
      ++HIDWORD(v89);
      unsigned int v48 = *(unsigned __int16 *)(a4 + 2 * v47);
      if (v48 <= 0x17F) {
        break;
      }
      if ((v48 & 0xFFC0) == 0x2000)
      {
        uint64_t v49 = v48 - 7808;
        goto LABEL_146;
      }
      if (v48 == 0xFFFF) {
        uint64_t v46 = 64680;
      }
      else {
        uint64_t v46 = 1;
      }
      if (v48 == 65534)
      {
        uint64_t v46 = 3;
        goto LABEL_148;
      }
LABEL_147:
      if (v46 >= 0x1000)
      {
        if (((unsigned __int16)v46 & 0x3E0u) >= 0x180) {
          unsigned int v44 = ((v46 & 0x3E0) << 16) + 2097344;
        }
        else {
          unsigned int v44 = (v46 & 0x3E0) + 32;
        }
        goto LABEL_128;
      }
LABEL_148:
      if (v46 > v14)
      {
        unsigned int v44 = 192;
        goto LABEL_128;
      }
      unsigned int v50 = icu::CollationFastLatin::nextPair(v13, v48, v46, a4, 0, (int *)&v89 + 1, &v91);
      unsigned int v51 = icu::CollationFastLatin::getSecondaries(v14, v50);
      if (v51)
      {
        unsigned int v44 = v51;
        goto LABEL_128;
      }
    }
    uint64_t v49 = *(unsigned __int16 *)(a4 + 2 * v47);
LABEL_146:
    uint64_t v46 = *(unsigned __int16 *)(v13 + 2 * v49);
    goto LABEL_147;
  }
LABEL_75:
  if ((v9 & 0x400) == 0) {
    goto LABEL_76;
  }
  unsigned int v58 = 0;
  unsigned int v59 = 0;
  BOOL v60 = v88 < 0x1000;
  uint64_t v89 = 0;
  while (1)
  {
LABEL_177:
    if (v58) {
      goto LABEL_194;
    }
    do
    {
      uint64_t v61 = SHIDWORD(v89);
      if (HIDWORD(v89) == v91)
      {
        unsigned int v58 = 2;
        if (v59) {
          goto LABEL_214;
        }
        while (1)
        {
LABEL_195:
          uint64_t v66 = (int)v89;
          if (v89 == v90)
          {
            unsigned int v59 = 2;
            goto LABEL_214;
          }
          LODWORD(v89) = v89 + 1;
          unsigned int v67 = *(unsigned __int16 *)(a6 + 2 * v66);
          if (v67 <= 0x17F) {
            break;
          }
          if ((v67 & 0xFFC0) == 0x2000)
          {
            uint64_t v68 = v67 - 7808;
            goto LABEL_200;
          }
          if (v67 == 0xFFFF) {
            uint64_t v69 = 64680;
          }
          else {
            uint64_t v69 = 1;
          }
          if (v67 != 65534) {
            goto LABEL_201;
          }
          uint64_t v69 = 3;
LABEL_208:
          LODWORD(v69) = icu::CollationFastLatin::nextPair(v13, v67, v69, a6, 0, (int *)&v89, &v90);
LABEL_209:
          unsigned int Cases = icu::CollationFastLatin::getCases(v14, v60, v69);
          if (Cases)
          {
            unsigned int v59 = Cases;
            goto LABEL_214;
          }
        }
        uint64_t v68 = *(unsigned __int16 *)(a6 + 2 * v66);
LABEL_200:
        uint64_t v69 = *(unsigned __int16 *)(v13 + 2 * v68);
LABEL_201:
        if (v69 > 0xBFF) {
          goto LABEL_209;
        }
        goto LABEL_208;
      }
      ++HIDWORD(v89);
      unsigned int v62 = *(unsigned __int16 *)(a4 + 2 * v61);
      if (v62 <= 0x17F)
      {
        uint64_t v63 = *(unsigned __int16 *)(a4 + 2 * v61);
LABEL_183:
        uint64_t v64 = *(unsigned __int16 *)(v13 + 2 * v63);
        goto LABEL_184;
      }
      if ((v62 & 0xFFC0) == 0x2000)
      {
        uint64_t v63 = v62 - 7808;
        goto LABEL_183;
      }
      if (v62 == 0xFFFF) {
        uint64_t v64 = 64680;
      }
      else {
        uint64_t v64 = 1;
      }
      if (v62 == 65534)
      {
        uint64_t v64 = 3;
LABEL_191:
        LODWORD(v64) = icu::CollationFastLatin::nextPair(v13, v62, v64, a4, 0, (int *)&v89 + 1, &v91);
        goto LABEL_192;
      }
LABEL_184:
      if (v64 <= 0xBFF) {
        goto LABEL_191;
      }
LABEL_192:
      unsigned int v65 = icu::CollationFastLatin::getCases(v14, v60, v64);
    }
    while (!v65);
    unsigned int v58 = v65;
LABEL_194:
    if (!v59) {
      goto LABEL_195;
    }
LABEL_214:
    if (v58 == v59) {
      break;
    }
    if ((unsigned __int16)v58 != (unsigned __int16)v59)
    {
      if ((unsigned __int16)v58 < (unsigned __int16)v59) {
        unsigned int v72 = 1;
      }
      else {
        unsigned int v72 = -1;
      }
      if ((unsigned __int16)v58 < (unsigned __int16)v59) {
        unsigned int v73 = -1;
      }
      else {
        unsigned int v73 = 1;
      }
      if ((v9 & 0x100) != 0) {
        return v72;
      }
      else {
        return v73;
      }
    }
    if (v58 == 2) {
      goto LABEL_76;
    }
    v58 >>= 16;
    v59 >>= 16;
  }
  unsigned int v59 = 0;
  BOOL v15 = v58 == 2;
  unsigned int v58 = 0;
  if (!v15) {
    goto LABEL_177;
  }
LABEL_76:
  if (v88 < 0x2000) {
    return 0;
  }
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  BOOL v32 = (v9 & 0x600) == 512;
  uint64_t v89 = 0;
  while (2)
  {
    while (2)
    {
      if (v30) {
        goto LABEL_95;
      }
      while (2)
      {
        uint64_t v33 = SHIDWORD(v89);
        if (HIDWORD(v89) == v91)
        {
          unsigned int v30 = 2;
          if (v31) {
            goto LABEL_115;
          }
          while (1)
          {
LABEL_96:
            uint64_t v38 = (int)v89;
            if (v89 == v90)
            {
              unsigned int v31 = 2;
              goto LABEL_115;
            }
            LODWORD(v89) = v89 + 1;
            unsigned int v39 = *(unsigned __int16 *)(a6 + 2 * v38);
            if (v39 <= 0x17F) {
              break;
            }
            if ((v39 & 0xFFC0) == 0x2000)
            {
              uint64_t v40 = v39 - 7808;
              goto LABEL_101;
            }
            if (v39 == 0xFFFF) {
              uint64_t v41 = 64680;
            }
            else {
              uint64_t v41 = 1;
            }
            if (v39 != 65534) {
              goto LABEL_102;
            }
            uint64_t v41 = 3;
LABEL_109:
            LODWORD(v41) = icu::CollationFastLatin::nextPair(v13, v39, v41, a6, 0, (int *)&v89, &v90);
LABEL_110:
            unsigned int Tertiaries = icu::CollationFastLatin::getTertiaries(v14, v32, v41);
            if (Tertiaries)
            {
              unsigned int v31 = Tertiaries;
              goto LABEL_115;
            }
          }
          uint64_t v40 = *(unsigned __int16 *)(a6 + 2 * v38);
LABEL_101:
          uint64_t v41 = *(unsigned __int16 *)(v13 + 2 * v40);
LABEL_102:
          if (v41 > 0xBFF) {
            goto LABEL_110;
          }
          goto LABEL_109;
        }
        ++HIDWORD(v89);
        unsigned int v34 = *(unsigned __int16 *)(a4 + 2 * v33);
        if (v34 <= 0x17F)
        {
          uint64_t v35 = *(unsigned __int16 *)(a4 + 2 * v33);
          goto LABEL_84;
        }
        if ((v34 & 0xFFC0) != 0x2000)
        {
          if (v34 == 0xFFFF) {
            uint64_t v36 = 64680;
          }
          else {
            uint64_t v36 = 1;
          }
          if (v34 != 65534) {
            goto LABEL_85;
          }
          uint64_t v36 = 3;
          goto LABEL_92;
        }
        uint64_t v35 = v34 - 7808;
LABEL_84:
        uint64_t v36 = *(unsigned __int16 *)(v13 + 2 * v35);
LABEL_85:
        if (v36 <= 0xBFF) {
LABEL_92:
        }
          LODWORD(v36) = icu::CollationFastLatin::nextPair(v13, v34, v36, a4, 0, (int *)&v89 + 1, &v91);
        unsigned int v37 = icu::CollationFastLatin::getTertiaries(v14, v32, v36);
        if (!v37) {
          continue;
        }
        break;
      }
      unsigned int v30 = v37;
LABEL_95:
      if (!v31) {
        goto LABEL_96;
      }
LABEL_115:
      if (v30 != v31)
      {
        unsigned int v16 = (unsigned __int16)v30;
        if ((unsigned __int16)v30 != (unsigned __int16)v31)
        {
          unsigned int v43 = (unsigned __int16)v31;
          int v74 = (unsigned __int16)v30 ^ 0x18;
          if ((unsigned __int16)v30 <= 3u) {
            int v74 = (unsigned __int16)v30;
          }
          int v75 = (unsigned __int16)v31 ^ 0x18;
          if ((unsigned __int16)v31 <= 3u) {
            int v75 = (unsigned __int16)v31;
          }
          if ((v9 & 0x700) == 0x300)
          {
            unsigned int v16 = v74;
            unsigned int v43 = v75;
          }
          goto LABEL_123;
        }
        if (v30 == 2) {
          goto LABEL_221;
        }
        v30 >>= 16;
        v31 >>= 16;
        continue;
      }
      break;
    }
    unsigned int v31 = 0;
    BOOL v15 = v30 == 2;
    unsigned int v30 = 0;
    if (!v15) {
      continue;
    }
    break;
  }
LABEL_221:
  if (v88 < 0x3000) {
    return 0;
  }
  unsigned int v76 = 0;
  unsigned int v77 = 0;
  uint64_t v89 = 0;
  while (2)
  {
    while (2)
    {
      if (!v76)
      {
        while (1)
        {
          uint64_t v78 = SHIDWORD(v89);
          if (HIDWORD(v89) == v91)
          {
            unsigned int v76 = 2;
            goto LABEL_246;
          }
          ++HIDWORD(v89);
          unsigned int v79 = *(unsigned __int16 *)(a4 + 2 * v78);
          if (v79 <= 0x17F) {
            break;
          }
          if ((v79 & 0xFFC0) == 0x2000)
          {
            uint64_t v80 = v79 - 7808;
            goto LABEL_256;
          }
          if (v79 == 0xFFFF) {
            uint64_t v81 = 64680;
          }
          else {
            uint64_t v81 = 1;
          }
          if (v79 == 65534)
          {
            uint64_t v81 = 3;
LABEL_264:
            unsigned int v82 = icu::CollationFastLatin::nextPair(v13, v79, v81, a4, 0, (int *)&v89 + 1, &v91);
            LODWORD(v81) = v82;
            if (!HIWORD(v82)) {
              goto LABEL_265;
            }
            if (v14 < (unsigned __int16)v82)
            {
              unsigned int v76 = -67044352;
              goto LABEL_246;
            }
            unsigned int v76 = v82 & 0xFFF8FFF8;
            if ((v82 & 0xFFF8FFF8) != 0) {
              goto LABEL_246;
            }
          }
          else
          {
LABEL_257:
            if (v81 <= 0xBFF) {
              goto LABEL_264;
            }
LABEL_265:
            if (v81 >= 0x1000)
            {
              if (((unsigned __int16)v81 & 0x380u) <= 0x17F) {
                unsigned int v76 = 64512;
              }
              else {
                unsigned int v76 = -67044352;
              }
              goto LABEL_246;
            }
            if (v81 > v14)
            {
              unsigned int v76 = 64512;
              goto LABEL_246;
            }
            if (v81 <= 0xBFF) {
              unsigned int v76 = v81;
            }
            else {
              unsigned int v76 = v81 & 0xFF8;
            }
            if (v76) {
              goto LABEL_246;
            }
          }
        }
        uint64_t v80 = *(unsigned __int16 *)(a4 + 2 * v78);
LABEL_256:
        uint64_t v81 = *(unsigned __int16 *)(v13 + 2 * v80);
        goto LABEL_257;
      }
LABEL_246:
      if (v77) {
        goto LABEL_247;
      }
      while (2)
      {
        while (2)
        {
          uint64_t v83 = (int)v89;
          if (v89 == v90)
          {
            unsigned int v77 = 2;
            goto LABEL_247;
          }
          LODWORD(v89) = v89 + 1;
          unsigned int v84 = *(unsigned __int16 *)(a6 + 2 * v83);
          if (v84 <= 0x17F)
          {
            uint64_t v85 = *(unsigned __int16 *)(a6 + 2 * v83);
            goto LABEL_280;
          }
          if ((v84 & 0xFFC0) == 0x2000)
          {
            uint64_t v85 = v84 - 7808;
LABEL_280:
            uint64_t v86 = *(unsigned __int16 *)(v13 + 2 * v85);
LABEL_281:
            if (v86 > 0xBFF) {
              break;
            }
          }
          else
          {
            if (v84 == 0xFFFF) {
              uint64_t v86 = 64680;
            }
            else {
              uint64_t v86 = 1;
            }
            if (v84 != 65534) {
              goto LABEL_281;
            }
            uint64_t v86 = 3;
          }
          unsigned int v87 = icu::CollationFastLatin::nextPair(v13, v84, v86, a6, 0, (int *)&v89, &v90);
          LODWORD(v86) = v87;
          if (HIWORD(v87))
          {
            if (v14 < (unsigned __int16)v87)
            {
              unsigned int v77 = -67044352;
              goto LABEL_247;
            }
            unsigned int v77 = v87 & 0xFFF8FFF8;
            if ((v87 & 0xFFF8FFF8) != 0) {
              goto LABEL_247;
            }
            continue;
          }
          break;
        }
        if (v86 < 0x1000)
        {
          if (v86 > v14)
          {
            unsigned int v77 = 64512;
            goto LABEL_247;
          }
          if (v86 <= 0xBFF) {
            unsigned int v77 = v86;
          }
          else {
            unsigned int v77 = v86 & 0xFF8;
          }
          if (v77) {
            goto LABEL_247;
          }
          continue;
        }
        break;
      }
      if (((unsigned __int16)v86 & 0x380u) <= 0x17F) {
        unsigned int v77 = 64512;
      }
      else {
        unsigned int v77 = -67044352;
      }
LABEL_247:
      if (v76 == v77)
      {
        unsigned int v77 = 0;
        uint64_t result = 0;
        BOOL v15 = v76 == 2;
        unsigned int v76 = 0;
        if (v15) {
          return result;
        }
        continue;
      }
      break;
    }
    unsigned int v16 = (unsigned __int16)v76;
    if ((unsigned __int16)v76 == (unsigned __int16)v77)
    {
      if (v76 != 2)
      {
        v76 >>= 16;
        v77 >>= 16;
        continue;
      }
      return 0;
    }
    break;
  }
  unsigned int v43 = (unsigned __int16)v77;
LABEL_123:
  if (v16 < v43) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

uint64_t icu::CollationFastLatin::lookup(icu::CollationFastLatin *this, const unsigned __int16 *a2)
{
  if ((a2 & 0xFFFFFFC0) == 0x2000) {
    return *((unsigned __int16 *)this + (a2 - 7808));
  }
  if (a2 == 0xFFFF) {
    unsigned int v3 = 64680;
  }
  else {
    unsigned int v3 = 1;
  }
  if (a2 == 65534) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t icu::CollationFastLatin::nextPair(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, int *a7)
{
  if ((a3 - 3072) < 0xFFFFF800) {
    return a3;
  }
  if (a3 >= 0x800) {
    return *(unsigned __int16 *)(a1 + 2 * ((a3 & 0x3FF) + 448)) | (*(unsigned __int16 *)(a1 + 2 * ((a3 & 0x3FF) + 449)) << 16);
  }
  int v7 = *a7;
  if (!a2 && v7 < 0)
  {
    *a7 = *a6 - 1;
    return 2;
  }
  unsigned int v8 = (a3 & 0x3FF) + 448;
  int v9 = *a6;
  if (*a6 != v7)
  {
    uint64_t v10 = v9 + 1;
    if (a4)
    {
      unsigned int v11 = *(unsigned __int16 *)(a4 + 2 * v9);
      if (v11 >= 0x180)
      {
        if ((v11 & 0xFFC0) != 0x2000)
        {
          if (v11 <= 0xFFFD) {
            return 1;
          }
          goto LABEL_17;
        }
        v11 -= 7808;
        if (v11) {
          goto LABEL_18;
        }
LABEL_15:
        if (v7 < 0)
        {
          *a7 = v9;
LABEL_17:
          unsigned int v11 = -1;
        }
LABEL_18:
        unsigned int v12 = *(unsigned __int16 *)(a1 + 2 * v8);
        unsigned int v13 = (a3 & 0x3FF) + 448;
        do
        {
          v13 += v12 >> 9;
          unsigned int v12 = *(unsigned __int16 *)(a1 + 2 * v13);
        }
        while ((unsigned __int16)(v12 & 0x1FF) < (int)v11);
        if ((v12 & 0x1FF) == v11)
        {
          *a6 = v10;
          unsigned int v8 = v13;
        }
        goto LABEL_22;
      }
    }
    else
    {
      unsigned int v11 = *(unsigned __int8 *)(a5 + v9);
      if (*(char *)(a5 + v9) < 0)
      {
        BOOL v17 = (v11 + 58) < 0xFCu || v10 == v7;
        if (v17 || *(char *)(a5 + v10) > -65)
        {
          uint64_t v18 = v9 + 2;
          if ((v7 & 0x80000000) == 0 && (int)v18 >= v7) {
            return 1;
          }
          if (v11 == 239)
          {
            if (*(unsigned __int8 *)(a5 + v10) != 191 || (*(unsigned char *)(a5 + v18) & 0xFE) != 0xBE) {
              return 1;
            }
            unsigned int v11 = -1;
          }
          else
          {
            if (v11 != 226 || *(unsigned __int8 *)(a5 + v10) != 128 || *(char *)(a5 + v18) > -65) {
              return 1;
            }
            unsigned int v11 = *(unsigned __int8 *)(a5 + v18) | 0x100;
          }
          LODWORD(v10) = v9 + 3;
          goto LABEL_18;
        }
        unsigned int v11 = *(unsigned __int8 *)(a5 + v10) + (v11 << 6) - 12416;
        LODWORD(v10) = v9 + 2;
        if (v11) {
          goto LABEL_18;
        }
        goto LABEL_15;
      }
    }
    if (v11) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
LABEL_22:
  int v14 = *(unsigned __int16 *)(a1 + 2 * (int)v8) >> 9;
  if (v14 == 1) {
    return 1;
  }
  uint64_t v15 = a1 + 2 * (int)v8;
  a3 = *(unsigned __int16 *)(v15 + 2);
  if (v14 != 2) {
    return a3 | (*(unsigned __int16 *)(v15 + 4) << 16);
  }
  return a3;
}

uint64_t icu::CollationFastLatin::getSecondaries(icu::CollationFastLatin *this, unsigned int a2)
{
  if ((unsigned __int16)a2 <= this) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = 12583104;
  }
  if ((a2 & 0xF000) != 0) {
    unsigned int v2 = (a2 & 0x3E003E0) + 2097184;
  }
  if (a2 <= 0xBFF) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = 0;
  }
  if (a2 <= this) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 192;
  }
  int v5 = ((a2 & 0x3E0) << 16) + 2097344;
  if ((a2 & 0x3E0) < 0x180) {
    int v5 = (a2 & 0x3E0) + 32;
  }
  if (a2 >= 0x1000) {
    unsigned int v4 = v5;
  }
  if (HIWORD(a2)) {
    return v2;
  }
  else {
    return v4;
  }
}

uint64_t icu::CollationFastLatin::getCases(icu::CollationFastLatin *this, int a2, unsigned int a3)
{
  if (HIWORD(a3))
  {
    if ((unsigned __int16)a3 < 0x1000u)
    {
      if ((unsigned __int16)a3 <= this) {
        return 0;
      }
      else {
        return 524296;
      }
    }
    else if (!a2 || a3 >> 26)
    {
      return a3 & 0x180018;
    }
    else
    {
      return a3 & 0x18;
    }
  }
  else
  {
    if (a3 <= 0xBFF) {
      unsigned int v3 = a3;
    }
    else {
      unsigned int v3 = 0;
    }
    if (a3 <= this) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = 8;
    }
    unsigned int v5 = a3 & 0x18;
    if ((a3 & 0x380) > 0x17F && a2 == 0) {
      v5 |= 0x80000u;
    }
    if (a3 >= 0x1000) {
      return v5;
    }
    else {
      return v4;
    }
  }
}

uint64_t icu::CollationFastLatin::getTertiaries(icu::CollationFastLatin *this, int a2, unsigned int a3)
{
  if (HIWORD(a3))
  {
    if (a2) {
      int v10 = 2621480;
    }
    else {
      int v10 = 2097184;
    }
    unsigned int v11 = a3 & 0x70007 | v10;
    if ((unsigned __int16)a3 <= this) {
      unsigned int v11 = 0;
    }
    if (a2) {
      int v12 = 2031647;
    }
    else {
      int v12 = 458759;
    }
    unsigned int v13 = v12 & a3 | 0x200020;
    if ((unsigned __int16)a3 >= 0x1000u) {
      return v13;
    }
    else {
      return v11;
    }
  }
  else
  {
    if (a3 <= 0xBFF) {
      unsigned int v3 = a3;
    }
    else {
      unsigned int v3 = 0;
    }
    if (a2) {
      int v4 = 40;
    }
    else {
      int v4 = 32;
    }
    unsigned int v5 = v4 & 0xFFFFFFF8 | a3 & 7;
    if (a3 > this) {
      unsigned int v3 = v5;
    }
    if ((a3 & 0x380) <= 0x17F) {
      int v6 = 32;
    }
    else {
      int v6 = 2097184;
    }
    int v7 = 2621472;
    if ((a3 & 0x380) <= 0x17F) {
      int v7 = 32;
    }
    unsigned int v8 = v7 | a3 & 0x1F;
    if (!a2) {
      unsigned int v8 = v6 | a3 & 7;
    }
    if (a3 >= 0x1000) {
      return v8;
    }
    else {
      return v3;
    }
  }
}

uint64_t icu::CollationFastLatin::getQuaternaries(icu::CollationFastLatin *this, unsigned int a2)
{
  unsigned int v2 = a2 & 0xFFF8FFF8;
  if (this < (unsigned __int16)a2) {
    unsigned int v2 = -67044352;
  }
  int v3 = a2 & 0xFFF8;
  if (a2 <= 0xBFF) {
    int v3 = a2;
  }
  if (a2 > this) {
    int v3 = 64512;
  }
  if ((a2 & 0x380) <= 0x17F) {
    unsigned int v4 = 64512;
  }
  else {
    unsigned int v4 = -67044352;
  }
  if (a2 < 0x1000) {
    unsigned int v4 = v3;
  }
  if (HIWORD(a2)) {
    return v2;
  }
  else {
    return v4;
  }
}

uint64_t icu::CollationFastLatin::compareUTF8(icu::CollationFastLatin *this, const unsigned __int16 *a2, const unsigned __int16 *a3, uint64_t a4, const unsigned __int8 *a5, uint64_t a6, const unsigned __int8 *a7)
{
  __int16 v9 = (__int16)a3;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  unsigned int v108 = a7;
  v109[0] = (int)a5;
  unsigned int v13 = (icu::CollationFastLatin *)((char *)this + 2 * *(unsigned __int8 *)this);
  int v14 = (icu::CollationFastLatin *)(a3 >> 16);
  unsigned int v106 = (unsigned __int16)a3;
  *(void *)uint64_t v107 = 0;
  while (1)
  {
    while (1)
    {
      if (!v11)
      {
        while (1)
        {
          uint64_t v15 = *(int *)&v107[4];
          if (*(_DWORD *)&v107[4] == v109[0])
          {
            unsigned int v11 = 2;
            goto LABEL_3;
          }
          uint64_t v16 = *(int *)&v107[4] + 1;
          ++*(_DWORD *)&v107[4];
          uint64_t v17 = *(unsigned __int8 *)(a4 + v15);
          if ((v17 & 0x80) != 0)
          {
            BOOL v19 = (v17 + 58) < 0xFCu || v16 == v109[0];
            if (v19 || (int v20 = *(char *)(a4 + v16), v20 > -65))
            {
              uint64_t v18 = icu::CollationFastLatin::lookupUTF8(v13, (const unsigned __int16 *)*(unsigned __int8 *)(a4 + v15), a4, &v107[4], (int *)v109[0]);
            }
            else
            {
              *(_DWORD *)&v107[4] = v15 + 2;
              uint64_t v17 = v20 + (v17 << 6) - 12416;
              unsigned int v11 = a2[v17];
              if (a2[v17]) {
                goto LABEL_3;
              }
              uint64_t v18 = *((unsigned __int16 *)v13 + v17);
            }
          }
          else
          {
            unsigned int v11 = a2[v17];
            if (a2[v17]) {
              goto LABEL_3;
            }
            if ((v9 & 2) != 0 && (v17 - 58) > 0xF5u) {
              return 4294967294;
            }
            uint64_t v18 = *((unsigned __int16 *)v13 + v17);
          }
          if (v18 >= 0x1000)
          {
            unsigned int v11 = v18 & 0xFC00;
            goto LABEL_3;
          }
          if (v18 > v14) {
            break;
          }
          Paiunint64_t r = icu::CollationFastLatin::nextPair((uint64_t)v13, v17, v18, 0, a4, (int *)&v107[4], v109);
          if (Pair == 1) {
            return 4294967294;
          }
          if ((unsigned __int16)Pair <= 0xBFFu) {
            unsigned int v22 = Pair;
          }
          else {
            unsigned int v22 = 0;
          }
          if ((unsigned __int16)Pair > v14) {
            unsigned int v22 = Pair & 0xFFF8FFF8;
          }
          if ((unsigned __int16)Pair >= 0x1000u) {
            unsigned int v11 = Pair & 0xFC00FC00;
          }
          else {
            unsigned int v11 = v22;
          }
          if (v11) {
            goto LABEL_3;
          }
        }
        unsigned int v11 = v18 & 0xFF8;
      }
LABEL_3:
      if (!v12)
      {
        while (1)
        {
          uint64_t v23 = *(int *)v107;
          if (*(_DWORD *)v107 == v108)
          {
            unsigned int v12 = 2;
            goto LABEL_4;
          }
          uint64_t v24 = *(int *)v107 + 1;
          ++*(_DWORD *)v107;
          uint64_t v25 = *(unsigned __int8 *)(a6 + v23);
          if ((v25 & 0x80) != 0)
          {
            BOOL v27 = (v25 + 58) < 0xFCu || v24 == v108;
            if (v27 || (int v28 = *(char *)(a6 + v24), v28 > -65))
            {
              uint64_t v26 = icu::CollationFastLatin::lookupUTF8(v13, (const unsigned __int16 *)*(unsigned __int8 *)(a6 + v23), a6, v107, (int *)v108);
            }
            else
            {
              *(_DWORD *)uint64_t v107 = v23 + 2;
              uint64_t v25 = v28 + (v25 << 6) - 12416;
              unsigned int v12 = a2[v25];
              if (a2[v25]) {
                goto LABEL_4;
              }
              uint64_t v26 = *((unsigned __int16 *)v13 + v25);
            }
          }
          else
          {
            unsigned int v12 = a2[v25];
            if (a2[v25]) {
              goto LABEL_4;
            }
            if ((v9 & 2) != 0 && (v25 - 58) > 0xF5u) {
              return 4294967294;
            }
            uint64_t v26 = *((unsigned __int16 *)v13 + v25);
          }
          if (v26 >= 0x1000)
          {
            unsigned int v12 = v26 & 0xFC00;
            goto LABEL_4;
          }
          if (v26 > v14) {
            break;
          }
          unsigned int v29 = icu::CollationFastLatin::nextPair((uint64_t)v13, v25, v26, 0, a6, (int *)v107, (int *)&v108);
          if (v29 == 1) {
            return 4294967294;
          }
          if ((unsigned __int16)v29 <= 0xBFFu) {
            unsigned int v30 = v29;
          }
          else {
            unsigned int v30 = 0;
          }
          if ((unsigned __int16)v29 > v14) {
            unsigned int v30 = v29 & 0xFFF8FFF8;
          }
          if ((unsigned __int16)v29 >= 0x1000u) {
            unsigned int v12 = v29 & 0xFC00FC00;
          }
          else {
            unsigned int v12 = v30;
          }
          if (v12) {
            goto LABEL_4;
          }
        }
        unsigned int v12 = v26 & 0xFF8;
      }
LABEL_4:
      if (v11 != v12) {
        break;
      }
      unsigned int v12 = 0;
      BOOL v19 = v11 == 2;
      unsigned int v11 = 0;
      if (v19) {
        goto LABEL_72;
      }
    }
    unsigned int v31 = (unsigned __int16)v11;
    if ((unsigned __int16)v11 != (unsigned __int16)v12)
    {
      unsigned int v50 = (unsigned __int16)v12;
      goto LABEL_119;
    }
    if (v11 == 2) {
      break;
    }
    v11 >>= 16;
    v12 >>= 16;
  }
LABEL_72:
  if (v106 < 0x1000) {
    goto LABEL_73;
  }
  unsigned int v51 = 0;
  unsigned int v52 = 0;
  *(void *)uint64_t v107 = 0;
  while (2)
  {
    if (v51) {
      goto LABEL_124;
    }
    while (2)
    {
      uint64_t v54 = *(int *)&v107[4];
      if (*(_DWORD *)&v107[4] == v109[0])
      {
        unsigned int v51 = 2;
        goto LABEL_124;
      }
      ++*(_DWORD *)&v107[4];
      uint64_t v55 = *(unsigned __int8 *)(a4 + v54);
      if ((v55 & 0x80) == 0)
      {
        uint64_t v56 = *(unsigned __int8 *)(a4 + v54);
LABEL_141:
        uint64_t v53 = *((unsigned __int16 *)v13 + v56);
        if (v53 >= 0x1000) {
          goto LABEL_163;
        }
LABEL_142:
        if (v53 > v14)
        {
          unsigned int v51 = 192;
          goto LABEL_124;
        }
        unsigned int v59 = icu::CollationFastLatin::nextPair((uint64_t)v13, v55, v53, 0, a4, (int *)&v107[4], v109);
        unsigned int Secondaries = icu::CollationFastLatin::getSecondaries(v14, v59);
        if (Secondaries)
        {
          unsigned int v51 = Secondaries;
          goto LABEL_124;
        }
        continue;
      }
      break;
    }
    if (v55 <= 0xC5)
    {
      uint64_t v57 = *(unsigned __int8 *)(a4 + v54 + 1) + (v55 << 6);
      *(_DWORD *)&v107[4] = v54 + 2;
      uint64_t v56 = v57 - 12416;
      goto LABEL_141;
    }
    uint64_t v58 = *(unsigned __int8 *)(v54 + a4 + 2);
    *(_DWORD *)&v107[4] = v54 + 3;
    if (v55 == 226)
    {
      uint64_t v56 = v58 | 0x100;
      goto LABEL_141;
    }
    if (v58 == 190)
    {
      uint64_t v53 = 3;
      goto LABEL_142;
    }
    LOWORD(v53) = -856;
LABEL_163:
    if (((unsigned __int16)v53 & 0x3E0u) >= 0x180) {
      unsigned int v51 = ((v53 & 0x3E0) << 16) + 2097344;
    }
    else {
      unsigned int v51 = (v53 & 0x3E0) + 32;
    }
LABEL_124:
    if (v52) {
      goto LABEL_125;
    }
    while (2)
    {
      uint64_t v62 = *(int *)v107;
      if (*(_DWORD *)v107 == v108)
      {
        unsigned int v52 = 2;
        goto LABEL_125;
      }
      ++*(_DWORD *)v107;
      uint64_t v63 = *(unsigned __int8 *)(a6 + v62);
      if ((v63 & 0x80) == 0)
      {
        uint64_t v64 = *(unsigned __int8 *)(a6 + v62);
LABEL_154:
        uint64_t v61 = *((unsigned __int16 *)v13 + v64);
        if (v61 >= 0x1000) {
          goto LABEL_167;
        }
LABEL_155:
        if (v61 > v14)
        {
          unsigned int v52 = 192;
          goto LABEL_125;
        }
        unsigned int v67 = icu::CollationFastLatin::nextPair((uint64_t)v13, v63, v61, 0, a6, (int *)v107, (int *)&v108);
        unsigned int v68 = icu::CollationFastLatin::getSecondaries(v14, v67);
        if (v68)
        {
          unsigned int v52 = v68;
          goto LABEL_125;
        }
        continue;
      }
      break;
    }
    if (v63 <= 0xC5)
    {
      uint64_t v65 = *(unsigned __int8 *)(a6 + v62 + 1) + (v63 << 6);
      *(_DWORD *)uint64_t v107 = v62 + 2;
      uint64_t v64 = v65 - 12416;
      goto LABEL_154;
    }
    uint64_t v66 = *(unsigned __int8 *)(v62 + a6 + 2);
    *(_DWORD *)uint64_t v107 = v62 + 3;
    if (v63 == 226)
    {
      uint64_t v64 = v66 | 0x100;
      goto LABEL_154;
    }
    if (v66 == 190)
    {
      uint64_t v61 = 3;
      goto LABEL_155;
    }
    LOWORD(v61) = -856;
LABEL_167:
    if (((unsigned __int16)v61 & 0x3E0u) >= 0x180) {
      unsigned int v52 = ((v61 & 0x3E0) << 16) + 2097344;
    }
    else {
      unsigned int v52 = (v61 & 0x3E0) + 32;
    }
LABEL_125:
    if (v51 == v52)
    {
      unsigned int v52 = 0;
      BOOL v19 = v51 == 2;
      unsigned int v51 = 0;
      if (!v19) {
        continue;
      }
    }
    else
    {
      if ((unsigned __int16)v51 != (unsigned __int16)v52)
      {
        if ((unsigned __int16)v51 < (unsigned __int16)v52) {
          unsigned int v85 = -1;
        }
        else {
          unsigned int v85 = 1;
        }
        if ((v9 & 0x800) != 0) {
          return 4294967294;
        }
        else {
          return v85;
        }
      }
      if (v51 != 2)
      {
        v51 >>= 16;
        v52 >>= 16;
        continue;
      }
    }
    break;
  }
LABEL_73:
  if ((v9 & 0x400) == 0) {
    goto LABEL_74;
  }
  unsigned int v69 = 0;
  unsigned int v70 = 0;
  *(void *)uint64_t v107 = 0;
  while (2)
  {
    while (2)
    {
      if (v69) {
        goto LABEL_187;
      }
      while (2)
      {
        uint64_t v72 = *(int *)&v107[4];
        if (*(_DWORD *)&v107[4] == v109[0])
        {
          unsigned int v69 = 2;
          if (v70) {
            goto LABEL_206;
          }
          while (1)
          {
LABEL_194:
            uint64_t v79 = *(int *)v107;
            if (*(_DWORD *)v107 == v108)
            {
              unsigned int v70 = 2;
              goto LABEL_206;
            }
            ++*(_DWORD *)v107;
            uint64_t v80 = *(unsigned __int8 *)(a6 + v79);
            if ((v80 & 0x80) == 0)
            {
              uint64_t v81 = *(unsigned __int8 *)(a6 + v79);
              goto LABEL_201;
            }
            if (v80 <= 0xC5) {
              break;
            }
            uint64_t v83 = *(unsigned __int8 *)(v79 + a6 + 2);
            *(_DWORD *)uint64_t v107 = v79 + 3;
            if (v80 == 226)
            {
              uint64_t v81 = v83 | 0x100;
LABEL_201:
              uint64_t v78 = *((unsigned __int16 *)v13 + v81);
              if (v78 <= 0xBFF) {
                goto LABEL_202;
              }
              goto LABEL_203;
            }
            if (v83 == 190)
            {
              uint64_t v78 = 3;
LABEL_202:
              LODWORD(v78) = icu::CollationFastLatin::nextPair((uint64_t)v13, v80, v78, 0, a6, (int *)v107, (int *)&v108);
              goto LABEL_203;
            }
            LODWORD(v78) = 64680;
LABEL_203:
            unsigned int Cases = icu::CollationFastLatin::getCases(v14, v106 < 0x1000, v78);
            if (Cases)
            {
              unsigned int v70 = Cases;
              goto LABEL_206;
            }
          }
          uint64_t v82 = *(unsigned __int8 *)(a6 + v79 + 1) + (v80 << 6);
          *(_DWORD *)uint64_t v107 = v79 + 2;
          uint64_t v81 = v82 - 12416;
          goto LABEL_201;
        }
        ++*(_DWORD *)&v107[4];
        uint64_t v73 = *(unsigned __int8 *)(a4 + v72);
        if ((v73 & 0x80) == 0)
        {
          uint64_t v74 = *(unsigned __int8 *)(a4 + v72);
          goto LABEL_183;
        }
        if (v73 <= 0xC5)
        {
          uint64_t v75 = *(unsigned __int8 *)(a4 + v72 + 1) + (v73 << 6);
          *(_DWORD *)&v107[4] = v72 + 2;
          uint64_t v74 = v75 - 12416;
          goto LABEL_183;
        }
        uint64_t v76 = *(unsigned __int8 *)(v72 + a4 + 2);
        *(_DWORD *)&v107[4] = v72 + 3;
        if (v73 == 226)
        {
          uint64_t v74 = v76 | 0x100;
LABEL_183:
          uint64_t v71 = *((unsigned __int16 *)v13 + v74);
          if (v71 <= 0xBFF) {
LABEL_184:
          }
            LODWORD(v71) = icu::CollationFastLatin::nextPair((uint64_t)v13, v73, v71, 0, a4, (int *)&v107[4], v109);
        }
        else
        {
          if (v76 == 190)
          {
            uint64_t v71 = 3;
            goto LABEL_184;
          }
          LODWORD(v71) = 64680;
        }
        unsigned int v77 = icu::CollationFastLatin::getCases(v14, v106 < 0x1000, v71);
        if (!v77) {
          continue;
        }
        break;
      }
      unsigned int v69 = v77;
LABEL_187:
      if (!v70) {
        goto LABEL_194;
      }
LABEL_206:
      if (v69 != v70)
      {
        if ((unsigned __int16)v69 != (unsigned __int16)v70)
        {
          if ((unsigned __int16)v69 < (unsigned __int16)v70) {
            unsigned int v86 = 1;
          }
          else {
            unsigned int v86 = -1;
          }
          if ((unsigned __int16)v69 < (unsigned __int16)v70) {
            unsigned int v87 = -1;
          }
          else {
            unsigned int v87 = 1;
          }
          if ((v9 & 0x100) != 0) {
            return v86;
          }
          else {
            return v87;
          }
        }
        if (v69 == 2) {
          goto LABEL_74;
        }
        v69 >>= 16;
        v70 >>= 16;
        continue;
      }
      break;
    }
    unsigned int v70 = 0;
    BOOL v19 = v69 == 2;
    unsigned int v69 = 0;
    if (!v19) {
      continue;
    }
    break;
  }
LABEL_74:
  if (v106 < 0x2000) {
    return 0;
  }
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  BOOL v35 = (v9 & 0x600) == 512;
  *(void *)uint64_t v107 = 0;
  while (2)
  {
    while (2)
    {
      if (v33) {
        goto LABEL_92;
      }
      while (2)
      {
        uint64_t v37 = *(int *)&v107[4];
        if (*(_DWORD *)&v107[4] == v109[0])
        {
          unsigned int v33 = 2;
          if (v34) {
            goto LABEL_111;
          }
          while (1)
          {
LABEL_99:
            uint64_t v44 = *(int *)v107;
            if (*(_DWORD *)v107 == v108)
            {
              unsigned int v34 = 2;
              goto LABEL_111;
            }
            ++*(_DWORD *)v107;
            uint64_t v45 = *(unsigned __int8 *)(a6 + v44);
            if ((v45 & 0x80) == 0)
            {
              uint64_t v46 = *(unsigned __int8 *)(a6 + v44);
              goto LABEL_106;
            }
            if (v45 <= 0xC5) {
              break;
            }
            uint64_t v48 = *(unsigned __int8 *)(v44 + a6 + 2);
            *(_DWORD *)uint64_t v107 = v44 + 3;
            if (v45 == 226)
            {
              uint64_t v46 = v48 | 0x100;
LABEL_106:
              uint64_t v43 = *((unsigned __int16 *)v13 + v46);
              if (v43 <= 0xBFF) {
                goto LABEL_107;
              }
              goto LABEL_108;
            }
            if (v48 == 190)
            {
              uint64_t v43 = 3;
LABEL_107:
              LODWORD(v43) = icu::CollationFastLatin::nextPair((uint64_t)v13, v45, v43, 0, a6, (int *)v107, (int *)&v108);
              goto LABEL_108;
            }
            LODWORD(v43) = 64680;
LABEL_108:
            unsigned int Tertiaries = icu::CollationFastLatin::getTertiaries(v14, v35, v43);
            if (Tertiaries)
            {
              unsigned int v34 = Tertiaries;
              goto LABEL_111;
            }
          }
          uint64_t v47 = *(unsigned __int8 *)(a6 + v44 + 1) + (v45 << 6);
          *(_DWORD *)uint64_t v107 = v44 + 2;
          uint64_t v46 = v47 - 12416;
          goto LABEL_106;
        }
        ++*(_DWORD *)&v107[4];
        uint64_t v38 = *(unsigned __int8 *)(a4 + v37);
        if ((v38 & 0x80) == 0)
        {
          uint64_t v39 = *(unsigned __int8 *)(a4 + v37);
          goto LABEL_88;
        }
        if (v38 <= 0xC5)
        {
          uint64_t v40 = *(unsigned __int8 *)(a4 + v37 + 1) + (v38 << 6);
          *(_DWORD *)&v107[4] = v37 + 2;
          uint64_t v39 = v40 - 12416;
          goto LABEL_88;
        }
        uint64_t v41 = *(unsigned __int8 *)(v37 + a4 + 2);
        *(_DWORD *)&v107[4] = v37 + 3;
        if (v38 == 226)
        {
          uint64_t v39 = v41 | 0x100;
LABEL_88:
          uint64_t v36 = *((unsigned __int16 *)v13 + v39);
          if (v36 <= 0xBFF) {
LABEL_89:
          }
            LODWORD(v36) = icu::CollationFastLatin::nextPair((uint64_t)v13, v38, v36, 0, a4, (int *)&v107[4], v109);
        }
        else
        {
          if (v41 == 190)
          {
            uint64_t v36 = 3;
            goto LABEL_89;
          }
          LODWORD(v36) = 64680;
        }
        unsigned int v42 = icu::CollationFastLatin::getTertiaries(v14, v35, v36);
        if (!v42) {
          continue;
        }
        break;
      }
      unsigned int v33 = v42;
LABEL_92:
      if (!v34) {
        goto LABEL_99;
      }
LABEL_111:
      if (v33 != v34)
      {
        unsigned int v31 = (unsigned __int16)v33;
        if ((unsigned __int16)v33 == (unsigned __int16)v34)
        {
          if (v33 == 2) {
            goto LABEL_213;
          }
          v33 >>= 16;
          v34 >>= 16;
          continue;
        }
        unsigned int v50 = (unsigned __int16)v34;
        int v88 = (unsigned __int16)v33 ^ 0x18;
        if ((unsigned __int16)v33 <= 3u) {
          int v88 = (unsigned __int16)v33;
        }
        int v89 = (unsigned __int16)v34 ^ 0x18;
        if ((unsigned __int16)v34 <= 3u) {
          int v89 = (unsigned __int16)v34;
        }
        if ((v9 & 0x700) == 0x300)
        {
          unsigned int v31 = v88;
          unsigned int v50 = v89;
        }
LABEL_119:
        if (v31 < v50) {
          return 0xFFFFFFFFLL;
        }
        else {
          return 1;
        }
      }
      break;
    }
    unsigned int v34 = 0;
    BOOL v19 = v33 == 2;
    unsigned int v33 = 0;
    if (!v19) {
      continue;
    }
    break;
  }
LABEL_213:
  if (v106 < 0x3000) {
    return 0;
  }
  unsigned int v90 = 0;
  unsigned int v91 = 0;
  *(void *)uint64_t v107 = 0;
  while (2)
  {
    while (2)
    {
      if (v90) {
        goto LABEL_238;
      }
      while (2)
      {
        uint64_t v92 = *(int *)&v107[4];
        if (*(_DWORD *)&v107[4] == v109[0])
        {
          unsigned int v90 = 2;
          goto LABEL_238;
        }
        ++*(_DWORD *)&v107[4];
        uint64_t v93 = *(unsigned __int8 *)(a4 + v92);
        if ((v93 & 0x80) == 0)
        {
          uint64_t v94 = *(unsigned __int8 *)(a4 + v92);
          goto LABEL_250;
        }
        if (v93 <= 0xC5)
        {
          uint64_t v95 = *(unsigned __int8 *)(a4 + v92 + 1) + (v93 << 6);
          *(_DWORD *)&v107[4] = v92 + 2;
          uint64_t v94 = v95 - 12416;
          goto LABEL_250;
        }
        uint64_t v96 = *(unsigned __int8 *)(v92 + a4 + 2);
        *(_DWORD *)&v107[4] = v92 + 3;
        if (v93 == 226)
        {
          uint64_t v94 = v96 | 0x100;
LABEL_250:
          uint64_t v97 = *((unsigned __int16 *)v13 + v94);
          if (v97 <= 0xBFF)
          {
LABEL_251:
            unsigned int v98 = icu::CollationFastLatin::nextPair((uint64_t)v13, v93, v97, 0, a4, (int *)&v107[4], v109);
            LODWORD(v97) = v98;
            if (HIWORD(v98))
            {
              if (v14 < (unsigned __int16)v98)
              {
                unsigned int v90 = -67044352;
                goto LABEL_238;
              }
              unsigned int v90 = v98 & 0xFFF8FFF8;
              if ((v98 & 0xFFF8FFF8) != 0) {
                goto LABEL_238;
              }
              continue;
            }
          }
          if (v97 >= 0x1000) {
            goto LABEL_295;
          }
          if (v97 > v14)
          {
            unsigned int v90 = 64512;
            goto LABEL_238;
          }
          if (v97 <= 0xBFF) {
            unsigned int v90 = v97;
          }
          else {
            unsigned int v90 = v97 & 0xFF8;
          }
          if (v90) {
            goto LABEL_238;
          }
          continue;
        }
        break;
      }
      if (v96 == 190)
      {
        uint64_t v97 = 3;
        goto LABEL_251;
      }
      LOWORD(v97) = -856;
LABEL_295:
      if (((unsigned __int16)v97 & 0x380u) <= 0x17F) {
        unsigned int v90 = 64512;
      }
      else {
        unsigned int v90 = -67044352;
      }
LABEL_238:
      if (v91) {
        goto LABEL_239;
      }
      while (2)
      {
        uint64_t v99 = *(int *)v107;
        if (*(_DWORD *)v107 == v108)
        {
          unsigned int v91 = 2;
          goto LABEL_239;
        }
        ++*(_DWORD *)v107;
        uint64_t v100 = *(unsigned __int8 *)(a6 + v99);
        if ((v100 & 0x80) == 0)
        {
          uint64_t v101 = *(unsigned __int8 *)(a6 + v99);
          goto LABEL_271;
        }
        if (v100 <= 0xC5)
        {
          uint64_t v102 = *(unsigned __int8 *)(a6 + v99 + 1) + (v100 << 6);
          *(_DWORD *)uint64_t v107 = v99 + 2;
          uint64_t v101 = v102 - 12416;
          goto LABEL_271;
        }
        uint64_t v103 = *(unsigned __int8 *)(v99 + a6 + 2);
        *(_DWORD *)uint64_t v107 = v99 + 3;
        if (v100 == 226)
        {
          uint64_t v101 = v103 | 0x100;
LABEL_271:
          uint64_t v104 = *((unsigned __int16 *)v13 + v101);
          if (v104 <= 0xBFF)
          {
LABEL_272:
            unsigned int v105 = icu::CollationFastLatin::nextPair((uint64_t)v13, v100, v104, 0, a6, (int *)v107, (int *)&v108);
            LODWORD(v104) = v105;
            if (HIWORD(v105))
            {
              if (v14 < (unsigned __int16)v105)
              {
                unsigned int v91 = -67044352;
                goto LABEL_239;
              }
              unsigned int v91 = v105 & 0xFFF8FFF8;
              if ((v105 & 0xFFF8FFF8) != 0) {
                goto LABEL_239;
              }
              continue;
            }
          }
          if (v104 >= 0x1000) {
            goto LABEL_299;
          }
          if (v104 > v14)
          {
            unsigned int v91 = 64512;
            goto LABEL_239;
          }
          if (v104 <= 0xBFF) {
            unsigned int v91 = v104;
          }
          else {
            unsigned int v91 = v104 & 0xFF8;
          }
          if (v91) {
            goto LABEL_239;
          }
          continue;
        }
        break;
      }
      if (v103 == 190)
      {
        uint64_t v104 = 3;
        goto LABEL_272;
      }
      LOWORD(v104) = -856;
LABEL_299:
      if (((unsigned __int16)v104 & 0x380u) <= 0x17F) {
        unsigned int v91 = 64512;
      }
      else {
        unsigned int v91 = -67044352;
      }
LABEL_239:
      if (v90 != v91)
      {
        unsigned int v31 = (unsigned __int16)v90;
        if ((unsigned __int16)v90 == (unsigned __int16)v91)
        {
          if (v90 != 2)
          {
            v90 >>= 16;
            v91 >>= 16;
            continue;
          }
          return 0;
        }
        unsigned int v50 = (unsigned __int16)v91;
        goto LABEL_119;
      }
      break;
    }
    unsigned int v91 = 0;
    uint64_t result = 0;
    BOOL v19 = v90 == 2;
    unsigned int v90 = 0;
    if (!v19) {
      continue;
    }
    return result;
  }
}

uint64_t icu::CollationFastLatin::lookupUTF8(icu::CollationFastLatin *this, const unsigned __int16 *a2, uint64_t a3, unsigned __int8 *a4, int *a5)
{
  uint64_t v5 = *(int *)a4;
  uint64_t v6 = v5 + 1;
  if ((a5 & 0x80000000) == 0 && (int)v6 >= (int)a5) {
    return 1;
  }
  int v8 = *(unsigned __int8 *)(a3 + v5);
  int v9 = *(char *)(a3 + v6);
  unsigned int v10 = *(unsigned __int8 *)(a3 + v6);
  *(_DWORD *)a4 = v5 + 2;
  if (a2 == 226 && v8 == 128 && v9 < 0 && v10 <= 0xBF) {
    return *((unsigned __int16 *)this + v9 + 256);
  }
  uint64_t result = 1;
  if (a2 == 239 && v8 == 191)
  {
    if (v10 == 190)
    {
      return 3;
    }
    else if (v10 == 191)
    {
      return 64680;
    }
  }
  return result;
}

uint64_t icu::CollationFastLatin::lookupUTF8Unsafe(icu::CollationFastLatin *this, const unsigned __int16 *a2, uint64_t a3, unsigned __int8 *a4, int *a5)
{
  if ((int)a2 > 197)
  {
    uint64_t v7 = *(int *)a4;
    uint64_t v8 = *(unsigned __int8 *)(v7 + a3 + 1);
    *(_DWORD *)a4 = v7 + 2;
    if (a2 == 226)
    {
      return *((unsigned __int16 *)this + v8 + 256);
    }
    else if (v8 == 190)
    {
      return 3;
    }
    else
    {
      return 64680;
    }
  }
  else
  {
    uint64_t v5 = *(int *)a4;
    *(_DWORD *)a4 = v5 + 1;
    return *((unsigned __int16 *)this + 64 * (int)a2 + *(unsigned __int8 *)(a3 + v5) - 12416);
  }
}

icu::CollationFastLatinBuilder *icu::CollationFastLatinBuilder::CollationFastLatinBuilder(icu::CollationFastLatinBuilder *this, UErrorCode *a2)
{
  *(void *)this = &unk_1EDA49E28;
  *(_OWORD *)((char *)this + 8) = 0u;
  icu::UVector64::UVector64((icu::CollationFastLatinBuilder *)((char *)this + 7192), a2);
  icu::UVector64::UVector64((icu::CollationFastLatinBuilder *)((char *)this + 7224), a2);
  *((void *)this + 907) = 0;
  *((_OWORD *)this + 455) = 0u;
  *((unsigned char *)this + 7296) = 0;
  *((void *)this + 913) = &unk_1EDA47700;
  *((_WORD *)this + 3656) = 2;
  *((_DWORD *)this + 1842) = 0;
  return this;
}

void icu::CollationFastLatinBuilder::~CollationFastLatinBuilder(void **this)
{
  *this = &unk_1EDA49E28;
  uprv_free(this[907]);
  icu::UnicodeString::~UnicodeString((void *)0x1C88, (icu::UnicodeString *)(this + 913));
  icu::UVector64::~UVector64(this + 903);
  icu::UVector64::~UVector64(this + 899);

  icu::UObject::~UObject((icu::UObject *)this);
}

{
  void *v1;
  uint64_t vars8;

  icu::CollationFastLatinBuilder::~CollationFastLatinBuilder(this);

  icu::UMemory::operator delete(v1);
}

BOOL icu::CollationFastLatinBuilder::forData(icu::CollationFastLatinBuilder *this, const icu::CollationData *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*((unsigned __int16 *)this + 3656) >= 0x20u)
    {
      BOOL v3 = 0;
      *a3 = U_INVALID_STATE_ERROR;
      return v3;
    }
    if (icu::CollationFastLatinBuilder::loadGroups(this, a2, a3))
    {
      *((_DWORD *)this + 1823) = *((_DWORD *)this + 1820);
      icu::CollationFastLatinBuilder::getCEs((uint64_t)this, a2, a3);
      if (icu::CollationFastLatinBuilder::encodeUniqueCEs((void **)this, a3))
      {
        if (!*((unsigned char *)this + 7296))
        {
LABEL_11:
          if (icu::CollationFastLatinBuilder::encodeCharCEs(this, a3))
          {
            BOOL v3 = icu::CollationFastLatinBuilder::encodeContractions(this, a3) != 0;
LABEL_14:
            icu::UVector64::removeAllElements((uint64_t)this + 7192);
            icu::UVector64::removeAllElements((uint64_t)this + 7224);
            return v3;
          }
LABEL_13:
          BOOL v3 = 0;
          goto LABEL_14;
        }
        *((_DWORD *)this + 1823) = *((_DWORD *)this + 1821);
        icu::CollationFastLatinBuilder::resetCEs(this);
        icu::CollationFastLatinBuilder::getCEs((uint64_t)this, a2, a3);
        if (icu::CollationFastLatinBuilder::encodeUniqueCEs((void **)this, a3))
        {
          if (*((unsigned char *)this + 7296)) {
            goto LABEL_13;
          }
          goto LABEL_11;
        }
      }
    }
  }
  return 0;
}

uint64_t icu::CollationFastLatinBuilder::loadGroups(icu::CollationFastLatinBuilder *this, const icu::CollationData *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  *((_DWORD *)this + 1842) = 5;
  uint64_t v6 = (char *)this + 7304;
  __int16 v8 = 517;
  icu::UnicodeString::doAppend((uint64_t)this + 7304, (uint64_t)&v8, 0, 1);
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t result = icu::CollationData::getLastPrimaryForGroup(a2, (int)v7 + 4096);
    *((_DWORD *)this + v7 + 1816) = result;
    if (!result) {
      break;
    }
    __int16 v9 = 0;
    icu::UnicodeString::doAppend((uint64_t)v6, (uint64_t)&v9, 0, 1);
    if (++v7 == 4)
    {
      *((_DWORD *)this + 1820) = icu::CollationData::getFirstPrimaryForGroup(a2, 0x1004u);
      *((_DWORD *)this + 1821) = icu::CollationData::getFirstPrimaryForGroup(a2, 0x19u);
      *((_DWORD *)this + 1822) = icu::CollationData::getLastPrimaryForGroup(a2, 0x19u);
      if (!*((_DWORD *)this + 1820)) {
        return 0;
      }
      return *((_DWORD *)this + 1821) != 0;
    }
  }
  return result;
}

uint64_t icu::CollationFastLatinBuilder::getCEs(uint64_t this, const icu::CollationData *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return this;
  }
  uint64_t v5 = this;
  unsigned __int16 v6 = 0;
  uint64_t v7 = 24;
  while (v6 == 384)
  {
    unsigned __int16 v6 = 0x2000;
LABEL_7:
    __int16 v8 = (icu::Collation *)v6;
    uint64_t v9 = sub_18C8DD7F8((uint64_t *)a2, v6);
    unsigned int v10 = (uint64_t *)a2;
    if (v9 == 192)
    {
      unsigned int v10 = (uint64_t *)*((void *)a2 + 4);
      uint64_t v9 = sub_18C8DD7F8(v10, v8);
    }
    this = icu::CollationFastLatinBuilder::getCEsFromCE32((icu::CollationFastLatinBuilder *)v5, (const icu::CollationData *)v10, v8, v9, a3);
    if (this)
    {
      long long v11 = *(_OWORD *)(v5 + 8);
      *(_OWORD *)(v5 + v7) = v11;
      icu::CollationFastLatinBuilder::addUniqueCE((_DWORD *)v5, v11, a3);
      this = (uint64_t)icu::CollationFastLatinBuilder::addUniqueCE((_DWORD *)v5, *(void *)(v5 + 16), a3);
      if (v8) {
        goto LABEL_16;
      }
    }
    else
    {
      *(_OWORD *)(v5 + 8) = xmmword_18CA8DCE0;
      *(_OWORD *)(v5 + v7) = xmmword_18CA8DCE0;
      if (v8) {
        goto LABEL_16;
      }
    }
    unint64_t v12 = *(void *)(v5 + 8);
    if (v12 == 0x101000100 || (v12 & 0xFFFFFFFF00000000) != 0x100000000)
    {
      this = (uint64_t)icu::CollationFastLatinBuilder::addContractionEntry((icu::CollationFastLatinBuilder *)v5, 511, v12, *(void *)(v5 + 16), a3);
      *(_OWORD *)(v5 + 24) = xmmword_18CA8DCF0;
    }
LABEL_16:
    unsigned __int16 v6 = (_WORD)v8 + 1;
    v7 += 16;
  }
  if (v6 != 8256) {
    goto LABEL_7;
  }
  int v13 = *(_DWORD *)(v5 + 7200);
  int v14 = v13 + 1;
  if (v13 >= -1 && *(_DWORD *)(v5 + 7204) > v13)
  {
LABEL_21:
    *(void *)(*(void *)(v5 + 7216) + 8 * v13) = 511;
    *(_DWORD *)(v5 + 7200) = v14;
  }
  else
  {
    this = icu::UVector64::expandCapacity((icu::UVector64 *)(v5 + 7192), v14, a3);
    if (this)
    {
      int v13 = *(_DWORD *)(v5 + 7200);
      int v14 = v13 + 1;
      goto LABEL_21;
    }
  }
  return this;
}

void *icu::CollationFastLatinBuilder::encodeUniqueCEs(void **this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uprv_free(this[907]);
  uint64_t result = uprv_malloc(2 * *((int *)this + 1808));
  this[907] = result;
  if (result)
  {
    uint64_t v23 = a2;
    if (*((int *)this + 1808) >= 1)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 0;
      unsigned int v8 = 0;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      uint64_t v11 = 0;
      unsigned int v12 = *((_DWORD *)this + 1816);
      while (1)
      {
        unint64_t v13 = *((void *)this[906] + v5);
        unint64_t v14 = HIDWORD(v13);
        if (v10 == HIDWORD(v13))
        {
          uint64_t v15 = v11;
          unint64_t v14 = v10;
          uint64_t v16 = v9;
          goto LABEL_32;
        }
        if (v12 >= HIDWORD(v13))
        {
          uint64_t v15 = v11;
        }
        else
        {
          uint64_t v25 = v9;
          unsigned int v26 = v7;
          unsigned int v27 = v6;
          uint64_t v17 = (int)v11;
          int v18 = (int)v11 <= 3 ? 3 : v11;
          unsigned int v24 = v18 + 1;
          if ((int)v11 <= 3) {
            uint64_t v17 = 3;
          }
          uint64_t v19 = v17 - (int)v11;
          int v20 = (unsigned int *)this + (int)v11 + 1817;
          while (1)
          {
            uint64_t v11 = (v11 + 1);
            icu::UnicodeString::setCharAt((icu::UnicodeString *)(this + 913), v11, v8);
            if (!v19) {
              break;
            }
            unsigned int v21 = *v20++;
            unsigned int v12 = v21;
            --v19;
            if (v21 >= HIDWORD(v13))
            {
              uint64_t v15 = v11;
              unsigned int v7 = v26;
              unsigned int v6 = v27;
              goto LABEL_20;
            }
          }
          unsigned int v12 = -1;
          unsigned int v7 = v26;
          unsigned int v6 = v27;
          uint64_t v15 = v24;
LABEL_20:
          uint64_t v9 = v25;
        }
        if (*((_DWORD *)this + 1823) > HIDWORD(v13)) {
          break;
        }
        if (v8 >= 0x1000)
        {
          if (v8 >> 11 > 0x1E)
          {
            __int16 v22 = 1;
            *((unsigned char *)this + 7296) = 1;
            goto LABEL_56;
          }
          unsigned int v6 = 0;
          v8 += 1024;
LABEL_29:
          unsigned int v7 = 160;
          goto LABEL_31;
        }
        unsigned int v6 = 0;
        unsigned int v7 = 160;
        unsigned int v8 = 4096;
LABEL_31:
        uint64_t v16 = 1280;
LABEL_32:
        uint64_t v9 = WORD1(v13);
        if (WORD1(v13) == v16)
        {
          uint64_t v9 = v16;
        }
        else
        {
          if (!v8)
          {
            if (!v7)
            {
              unsigned int v6 = 0;
              unsigned int v7 = 384;
              goto LABEL_34;
            }
            if (v7 > 0x3DF)
            {
              unsigned int v8 = 0;
LABEL_59:
              __int16 v22 = 1;
              uint64_t v9 = v16;
              goto LABEL_60;
            }
            goto LABEL_52;
          }
          if (BYTE3(v13) > 4u)
          {
            if (WORD1(v13) != 1280)
            {
              if (v7 < 0xC0)
              {
                unsigned int v6 = 0;
                unsigned int v7 = 192;
                goto LABEL_34;
              }
              if (v7 > 0x15F) {
                goto LABEL_59;
              }
              goto LABEL_52;
            }
            unsigned int v6 = 0;
            unsigned int v7 = 160;
            uint64_t v9 = 1280;
          }
          else
          {
            if (v7 != 160)
            {
              if (v7 > 0x7F) {
                goto LABEL_59;
              }
LABEL_52:
              unsigned int v6 = 0;
              v7 += 32;
              goto LABEL_34;
            }
            unsigned int v7 = 0;
            unsigned int v6 = 0;
          }
        }
LABEL_34:
        if ((v13 & 0x3F3F) < 0x501) {
          goto LABEL_37;
        }
        if (v6 <= 6)
        {
          ++v6;
LABEL_37:
          __int16 v22 = v6 | v8;
          if (v8 - 3072 > 0x3F8) {
            __int16 v22 = v7 | v8 | v6;
          }
          goto LABEL_60;
        }
        __int16 v22 = 1;
LABEL_60:
        *((_WORD *)this[907] + v5++) = v22;
        unint64_t v10 = v14;
        uint64_t v11 = v15;
        if (v5 >= *((int *)this + 1808)) {
          return (void *)(*v23 < U_ILLEGAL_ARGUMENT_ERROR);
        }
      }
      if (!v8)
      {
        unsigned int v6 = 0;
        unsigned int v7 = 160;
        unsigned int v8 = 3072;
        goto LABEL_31;
      }
      if (v8 > 0xFF7)
      {
        __int16 v22 = 1;
LABEL_56:
        unint64_t v14 = v10;
        goto LABEL_60;
      }
      unsigned int v6 = 0;
      v8 += 8;
      goto LABEL_29;
    }
    return (void *)(*v23 < U_ILLEGAL_ARGUMENT_ERROR);
  }
  else
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t icu::CollationFastLatinBuilder::resetCEs(icu::CollationFastLatinBuilder *this)
{
  icu::UVector64::removeAllElements((uint64_t)this + 7192);
  uint64_t result = icu::UVector64::removeAllElements((uint64_t)this + 7224);
  *((unsigned char *)this + 7296) = 0;
  int v3 = *((_DWORD *)this + 1842);
  unsigned int v4 = *((unsigned __int16 *)this + 3656);
  if (v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = (v4 & 1) == 0;
  }
  if (v5)
  {
    if ((v4 & 0x8000) != 0) {
      unsigned int v6 = *((_DWORD *)this + 1829);
    }
    else {
      unsigned int v6 = v4 >> 5;
    }
    if (v6 > v3)
    {
      if (v3 > 1023)
      {
        *((_WORD *)this + 3656) = v4 | 0xFFE0;
        *((_DWORD *)this + 1829) = v3;
      }
      else
      {
        *((_WORD *)this + 3656) = *((_WORD *)this + 3656) & 0x1F | (32 * v3);
      }
    }
  }
  else
  {
    return icu::UnicodeString::unBogus((uint64_t)this + 7304);
  }
  return result;
}

BOOL icu::CollationFastLatinBuilder::encodeCharCEs(icu::CollationFastLatinBuilder *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  BOOL v5 = (icu::CollationFastLatinBuilder *)((char *)this + 7304);
  if (*((__int16 *)this + 3656) < 0) {
    int v6 = *((_DWORD *)this + 1829);
  }
  else {
    int v6 = *((unsigned __int16 *)this + 3656) >> 5;
  }
  int v7 = 448;
  do
  {
    __int16 v17 = 0;
    icu::UnicodeString::doAppend((uint64_t)v5, (uint64_t)&v17, 0, 1);
    --v7;
  }
  while (v7);
  if (*((__int16 *)this + 3656) < 0) {
    int v8 = *((_DWORD *)this + 1829);
  }
  else {
    int v8 = *((unsigned __int16 *)this + 3656) >> 5;
  }
  uint64_t v9 = -7168;
  do
  {
    uint64_t v10 = *(void *)((char *)this + v9 + 7192);
    if (v10 == 0x101000100 || (v10 & 0xFFFFFFFF00000000) != 0x100000000)
    {
      unsigned int v12 = icu::CollationFastLatinBuilder::encodeTwoCEs(this, v10, *(void *)((char *)this + v9 + 7200));
      __int16 v13 = v12;
      if (v12 >= 0x10000)
      {
        if (*((__int16 *)this + 3656) < 0) {
          int v14 = *((_DWORD *)this + 1829);
        }
        else {
          int v14 = *((unsigned __int16 *)this + 3656) >> 5;
        }
        __int16 v15 = v14 - v8;
        if (v14 - v8 <= 1023)
        {
          __int16 v18 = HIWORD(v12);
          uint64_t v16 = icu::UnicodeString::doAppend((uint64_t)v5, (uint64_t)&v18, 0, 1);
          __int16 v19 = v13;
          icu::UnicodeString::doAppend(v16, (uint64_t)&v19, 0, 1);
          __int16 v13 = v15 | 0x800;
        }
        else
        {
          __int16 v13 = 1;
        }
      }
      icu::UnicodeString::setCharAt(v5, v6, v13);
    }
    ++v6;
    v9 += 16;
  }
  while (v9);
  return *a2 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t icu::CollationFastLatinBuilder::encodeContractions(icu::CollationFastLatinBuilder *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  unsigned int v4 = (icu::CollationFastLatinBuilder *)((char *)this + 7304);
  if (*((__int16 *)this + 3656) < 0) {
    int v5 = *((_DWORD *)this + 1829);
  }
  else {
    int v5 = *((unsigned __int16 *)this + 3656) >> 5;
  }
  int v26 = v5;
  uint64_t v6 = 0;
  int v7 = *((_DWORD *)this + 1842);
  do
  {
    uint64_t v8 = *((void *)this + 2 * v6 + 3);
    if (v8 != 0x101000100 && (v8 & 0xFFFFFFFF00000000) == 0x100000000)
    {
      if (*((__int16 *)this + 3656) < 0) {
        int v10 = *((_DWORD *)this + 1829);
      }
      else {
        int v10 = *((unsigned __int16 *)this + 3656) >> 5;
      }
      int v11 = v10 - v7 - 448;
      if (v11 >= 1024)
      {
        icu::UnicodeString::setCharAt(v4, *((_DWORD *)this + 1842) + v6, 1);
        goto LABEL_35;
      }
      uint64_t v12 = *((void *)this + 2 * v6 + 3) & 0x7FFFFFFFLL;
      for (int i = 1; ; int i = 0)
      {
        uint64_t v14 = *((int *)this + 1800);
        if (v12 >= v14)
        {
          LOWORD(v15) = 0;
        }
        else
        {
          uint64_t v15 = *(unsigned int *)(*((void *)this + 902) + 8 * v12);
          if (((v15 == 511) & ~i) != 0)
          {
            icu::UnicodeString::setCharAt(v4, *((_DWORD *)this + 1842) + v6, v11 | 0x400);
            goto LABEL_35;
          }
        }
        uint64_t v16 = (int)v14 <= (int)v12 + 1 ? 0 : *(void *)(*((void *)this + 902) + 8 * v12 + 8);
        uint64_t v17 = (int)v14 <= (int)v12 + 2 ? 0 : *(void *)(*((void *)this + 902) + 8 * v12 + 16);
        unsigned int v18 = icu::CollationFastLatinBuilder::encodeTwoCEs(this, v16, v17);
        if (v18 == 1) {
          break;
        }
        __int16 v20 = v18;
        unsigned int v21 = HIWORD(v18);
        if (!HIWORD(v18))
        {
          __int16 v28 = v15 | 0x400;
          icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v28, 0, 1);
          __int16 v29 = v20;
          __int16 v19 = &v29;
          goto LABEL_32;
        }
        __int16 v30 = v15 | 0x600;
        icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v30, 0, 1);
        __int16 v31 = v21;
        uint64_t v22 = icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v31, 0, 1);
        __int16 v32 = v20;
        __int16 v19 = &v32;
LABEL_34:
        icu::UnicodeString::doAppend(v22, (uint64_t)v19, 0, 1);
        v12 += 3;
      }
      __int16 v27 = v15 | 0x200;
      __int16 v19 = &v27;
LABEL_32:
      uint64_t v22 = (uint64_t)v4;
      goto LABEL_34;
    }
LABEL_35:
    ++v6;
  }
  while (v6 != 448);
  unsigned int v23 = *((unsigned __int16 *)this + 3656);
  if (*((__int16 *)this + 3656) < 0) {
    int v24 = *((_DWORD *)this + 1829);
  }
  else {
    int v24 = v23 >> 5;
  }
  if (v24 > v26)
  {
    __int16 v33 = 511;
    icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v33, 0, 1);
    LOWORD(v23) = *((_WORD *)this + 3656);
  }
  if ((v23 & 1) == 0) {
    return 1;
  }
  uint64_t result = 0;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

BOOL icu::CollationFastLatinBuilder::inSameGroup(icu::CollationFastLatinBuilder *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *((_DWORD *)this + 1823);
  if (v3 <= a2) {
    return v3 <= a3;
  }
  if (v3 <= a3) {
    return 0;
  }
  unsigned int v4 = *((_DWORD *)this + 1819);
  BOOL v5 = v4 < a3 && v4 < a2;
  if (v4 >= a2 && v4 >= a3)
  {
    unsigned int v7 = *((_DWORD *)this + 1816);
    if (v7 >= a2) {
      return v7 >= a3;
    }
    uint64_t v8 = (unsigned int *)((char *)this + 7268);
    while (v7 < a3)
    {
      unsigned int v9 = *v8++;
      unsigned int v7 = v9;
      if (v9 >= a2) {
        return v7 >= a3;
      }
    }
    return 0;
  }
  return v5;
}

uint64_t icu::CollationFastLatinBuilder::getCEsFromCE32(icu::CollationFastLatinBuilder *this, const icu::CollationData *a2, icu::Collation *a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  unsigned int FinalCE32 = icu::CollationData::getFinalCE32(a2, a4);
  unsigned int v11 = FinalCE32;
  *((void *)this + 2) = 0;
  int v12 = FinalCE32 & 0xF;
  if ((~FinalCE32 & 0xC0) == 0 && (v12 - 3) < 0xFFFFFFFE)
  {
    uint64_t result = 0;
    switch(v12)
    {
      case 4:
        unint64_t v13 = (unsigned __int16)(v11 >> 8) & 0xFF00 | ((unint64_t)((v11 & 0xFF000000) >> 24) << 56) | 0x5000000;
        *((void *)this + 1) = v13;
        *((void *)this + 2) = (BYTE1(v11) << 24) | 0x500u;
        goto LABEL_15;
      case 5:
        unsigned int v20 = (v11 >> 8) & 0x1F;
        if (v20 > 2) {
          return 0;
        }
        unsigned int v21 = (int *)(*((void *)a2 + 1) + 4 * (v11 >> 13));
        unint64_t v13 = sub_18C8ECFA0(*v21);
        *((void *)this + 1) = v13;
        if (v20 == 2)
        {
          *((void *)this + 2) = sub_18C8ECFA0(v21[1]);
          unint64_t v13 = *((void *)this + 1);
        }
        goto LABEL_14;
      case 6:
        unsigned int v22 = (v11 >> 8) & 0x1F;
        if (v22 > 2) {
          return 0;
        }
        unsigned int v23 = (unint64_t *)(*((void *)a2 + 2) + 8 * (v11 >> 13));
        unint64_t v13 = *v23;
        *((void *)this + 1) = *v23;
        if (v22 == 2) {
          *((void *)this + 2) = v23[1];
        }
        goto LABEL_14;
      case 9:
        return icu::CollationFastLatinBuilder::getCEsFromContractionCE32(this, a2, v11, a5);
      case 14:
        unint64_t v13 = (icu::Collation::getThreeBytePrimaryForOffsetData(a3, *(void *)(*((void *)a2 + 2) + 8 * (v11 >> 13))) << 32) | 0x5000500;
        *((void *)this + 1) = v13;
        goto LABEL_15;
      default:
        return result;
    }
  }
  BOOL v19 = v12 == 1;
  unint64_t v14 = ((unint64_t)(FinalCE32 & 0xFFFFFF00) << 32) | 0x5000500;
  if (!v19) {
    unint64_t v14 = FinalCE32 & 0xFFFFFF00;
  }
  if (FinalCE32 <= 0xBFu) {
    unint64_t v13 = (FinalCE32 << 16) & 0xFF000000 | ((unint64_t)((FinalCE32 & 0xFFFF0000) >> 16) << 48) | (FinalCE32 << 8);
  }
  else {
    unint64_t v13 = v14;
  }
  *((void *)this + 1) = v13;
LABEL_14:
  if (!v13) {
    return *((void *)this + 2) == 0;
  }
LABEL_15:
  if (!HIDWORD(v13) || *((_DWORD *)this + 1822) < HIDWORD(v13)) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v15 = *((_DWORD *)this + 1823);
  BOOL v17 = v13 >> 14 != 5120 && v15 > HIDWORD(v13);
  if ((v13 & 0x3F00) >= 0x500 && !v17)
  {
    uint64_t v18 = *((void *)this + 2);
    if (!v18) {
      return ((v18 | v13) & 0xC0) == 0;
    }
    if (HIDWORD(v18))
    {
      uint64_t result = icu::CollationFastLatinBuilder::inSameGroup(this, HIDWORD(v13), HIDWORD(v18));
      if (!result) {
        return result;
      }
      if (v18 < 0x10000 || v15 > HIDWORD(v18) && (v18 & 0xFFFFC000) != 0x5000000) {
        return 0;
      }
      goto LABEL_48;
    }
    uint64_t result = 0;
    if (v15 <= HIDWORD(v13) && v18 >= 0x10000)
    {
LABEL_48:
      if (((unsigned __int16)v18 & 0x3F00u) >= 0x500) {
        return ((v18 | v13) & 0xC0) == 0;
      }
      return 0;
    }
  }
  return result;
}

_DWORD *icu::CollationFastLatinBuilder::addUniqueCE(_DWORD *this, unint64_t a2, UErrorCode *a3)
{
  if (HIDWORD(a2) == 1 || a2 == 0 || *a3 > U_ZERO_ERROR) {
    return this;
  }
  unint64_t v5 = a2 & 0xFFFFFFFFFFFF3FFFLL;
  int v6 = this[1808];
  if (!v6)
  {
    int v9 = -1;
    return icu::UVector64::insertElementAt(this + 1806, v5, ~v9, a3);
  }
  uint64_t v7 = *((void *)this + 906);
  if (v6 >= 0) {
    int v8 = this[1808];
  }
  else {
    int v8 = v6 + 1;
  }
  int v9 = v8 >> 1;
  unint64_t v10 = *(void *)(v7 + 8 * v9);
  if (v10 == v5)
  {
LABEL_26:
    if (v9 < 0) {
      return icu::UVector64::insertElementAt(this + 1806, v5, ~v9, a3);
    }
    return this;
  }
  int v11 = 0;
  while (v10 > v5)
  {
    if (v9 == v11)
    {
      int v9 = ~v9;
      goto LABEL_26;
    }
    int v6 = v9;
LABEL_20:
    int v12 = v11 + v6;
    if (v11 + v6 < 0 != __OFADD__(v11, v6)) {
      ++v12;
    }
    int v9 = v12 >> 1;
    unint64_t v10 = *(void *)(v7 + 8 * v9);
    if (v10 == v5) {
      goto LABEL_26;
    }
  }
  if (v9 != v11)
  {
    int v11 = v9;
    goto LABEL_20;
  }
  int v9 = -2 - v9;
  if (v9 < 0) {
    return icu::UVector64::insertElementAt(this + 1806, v5, ~v9, a3);
  }
  return this;
}

_DWORD *icu::CollationFastLatinBuilder::addContractionEntry(icu::CollationFastLatinBuilder *this, int a2, unint64_t a3, unint64_t a4, UErrorCode *a5)
{
  unint64_t v10 = (icu::CollationFastLatinBuilder *)((char *)this + 7192);
  int v11 = *((_DWORD *)this + 1800);
  int v12 = v11 + 1;
  if (v11 >= -1 && *((_DWORD *)this + 1801) > v11) {
    goto LABEL_5;
  }
  int v13 = icu::UVector64::expandCapacity((icu::CollationFastLatinBuilder *)((char *)this + 7192), v12, a5);
  int v11 = *((_DWORD *)this + 1800);
  if (v13)
  {
    int v12 = v11 + 1;
LABEL_5:
    *(void *)(*((void *)this + 902) + 8 * v11) = a2;
    *((_DWORD *)this + 1800) = v12;
    int v11 = v12;
  }
  int v14 = v11 + 1;
  if (v11 >= -1 && *((_DWORD *)this + 1801) > v11) {
    goto LABEL_10;
  }
  int v15 = icu::UVector64::expandCapacity(v10, v14, a5);
  int v11 = *((_DWORD *)this + 1800);
  if (v15)
  {
    int v14 = v11 + 1;
LABEL_10:
    *(void *)(*((void *)this + 902) + 8 * v11) = a3;
    *((_DWORD *)this + 1800) = v14;
    int v11 = v14;
  }
  int v16 = v11 + 1;
  if (v11 < -1 || *((_DWORD *)this + 1801) <= v11)
  {
    if (!icu::UVector64::expandCapacity(v10, v16, a5)) {
      goto LABEL_16;
    }
    int v11 = *((_DWORD *)this + 1800);
    int v16 = v11 + 1;
  }
  *(void *)(*((void *)this + 902) + 8 * v11) = a4;
  *((_DWORD *)this + 1800) = v16;
LABEL_16:
  icu::CollationFastLatinBuilder::addUniqueCE(this, a3, a5);

  return icu::CollationFastLatinBuilder::addUniqueCE(this, a4, a5);
}

unint64_t sub_18C8ECFA0(int a1)
{
  uint64_t v1 = a1 & 0xFFFFFF00;
  if ((a1 & 0xF) == 1) {
    uint64_t v1 = (v1 << 32) | 0x5000500;
  }
  if (a1 <= 0xBFu) {
    return (a1 << 16) & 0xFF000000 | ((unint64_t)((a1 & 0xFFFF0000) >> 16) << 48) | (a1 << 8);
  }
  else {
    return v1;
  }
}

uint64_t icu::CollationFastLatinBuilder::getCEsFromContractionCE32(icu::CollationFastLatinBuilder *this, const icu::CollationData *a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  int v8 = (unsigned __int16 *)(*((void *)a2 + 3) + 2 * (a3 >> 13));
  uint64_t v9 = *((int *)this + 1800);
  if (icu::CollationFastLatinBuilder::getCEsFromCE32(this, a2, -1, v8[1] | (*v8 << 16), a4))
  {
    unint64_t v10 = *((void *)this + 1);
    unint64_t v11 = *((void *)this + 2);
    int v12 = this;
  }
  else
  {
    int v12 = this;
    unint64_t v10 = 0x101000100;
    unint64_t v11 = 0;
  }
  icu::CollationFastLatinBuilder::addContractionEntry(v12, 511, v10, v11, a4);
  uint64_t v30 = 0;
  long long v28 = 0u;
  *(_OWORD *)__int16 v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  memset(v25, 0, sizeof(v25));
  uint64_t v24 = (uint64_t)(v8 + 2);
  icu::UCharsTrie::Iterator::Iterator(v25, &v24, 0, a4);
  uint64_t v23 = v24;
  if (!icu::UCharsTrie::Iterator::next(&v23, (icu::UCharsTrie::Iterator *)v25, a4)) {
    goto LABEL_34;
  }
  int v13 = 0;
  uint64_t v14 = 0xFFFFFFFFLL;
  do
  {
    int v15 = (uint64_t *)(unsigned __int16)v26;
    int v16 = (unsigned __int16)v26 >> 5;
    int v17 = DWORD1(v26);
    if ((v26 & 0x8000u) == 0) {
      int v18 = (unsigned __int16)v26 >> 5;
    }
    else {
      int v18 = DWORD1(v26);
    }
    if (v18)
    {
      BOOL v19 = (unsigned __int16 *)v27;
      if ((v26 & 2) != 0) {
        BOOL v19 = (unsigned __int16 *)&v26 + 1;
      }
      uint64_t v20 = *v19;
      if (v20 < 0x180) {
        goto LABEL_18;
      }
      if ((v20 & 0xFFC0) == 0x2000 && v20 >> 7 >= 0x3D)
      {
        uint64_t v20 = (v20 - 7808);
LABEL_18:
        if (v20 == v14)
        {
          if (!v13) {
            continue;
          }
          uint64_t v20 = v14;
        }
        else
        {
          if (v13)
          {
            icu::CollationFastLatinBuilder::addContractionEntry(this, v14, *((void *)this + 1), *((void *)this + 2), a4);
            LOWORD(v15) = v26;
            int v17 = DWORD1(v26);
            int v16 = (unsigned __int16)v26 >> 5;
          }
          if ((__int16)v15 >= 0) {
            int v21 = v16;
          }
          else {
            int v21 = v17;
          }
          if (v21 == 1 && icu::CollationFastLatinBuilder::getCEsFromCE32(this, a2, -1, v29[3], a4))
          {
            int v13 = 1;
LABEL_30:
            uint64_t v14 = v20;
            continue;
          }
        }
        icu::CollationFastLatinBuilder::addContractionEntry(this, v20, 0x101000100uLL, 0, a4);
        int v13 = 0;
        goto LABEL_30;
      }
    }
  }
  while (icu::UCharsTrie::Iterator::next(v15, (icu::UCharsTrie::Iterator *)v25, a4));
  if (v13) {
    icu::CollationFastLatinBuilder::addContractionEntry(this, v14, *((void *)this + 1), *((void *)this + 2), a4);
  }
LABEL_34:
  if (*(int *)a4 <= 0)
  {
    *((void *)this + 1) = v9 | 0x180000000;
    *((void *)this + 2) = 0;
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v25);
  return v4;
}

uint64_t icu::CollationFastLatinBuilder::getMiniCE(icu::CollationFastLatinBuilder *this, uint64_t a2)
{
  int v2 = *((_DWORD *)this + 1808);
  if (v2)
  {
    unint64_t v3 = a2 & 0xFFFFFFFFFFFF3FFFLL;
    uint64_t v4 = *((void *)this + 906);
    if (v2 >= 0) {
      int v5 = *((_DWORD *)this + 1808);
    }
    else {
      int v5 = v2 + 1;
    }
    int v6 = v5 >> 1;
    unint64_t v7 = *(void *)(v4 + 8 * v6);
    if (v7 != v3)
    {
      int v8 = 0;
      do
      {
        if (v7 <= v3)
        {
          if (v6 == v8)
          {
            int v6 = -2 - v6;
            return *(unsigned __int16 *)(*((void *)this + 907) + 2 * v6);
          }
          int v8 = v6;
        }
        else
        {
          if (v6 == v8)
          {
            int v6 = ~v6;
            return *(unsigned __int16 *)(*((void *)this + 907) + 2 * v6);
          }
          int v2 = v6;
        }
        int v9 = v8 + v2;
        if (v8 + v2 < 0 != __OFADD__(v8, v2)) {
          ++v9;
        }
        int v6 = v9 >> 1;
        unint64_t v7 = *(void *)(v4 + 8 * v6);
      }
      while (v7 != v3);
    }
  }
  else
  {
    int v6 = -1;
  }
  return *(unsigned __int16 *)(*((void *)this + 907) + 2 * v6);
}

uint64_t icu::CollationFastLatinBuilder::encodeTwoCEs(icu::CollationFastLatinBuilder *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (a2 == 0x101000100) {
      return 1;
    }
    unsigned int MiniCE = icu::CollationFastLatinBuilder::getMiniCE(this, a2);
    if (MiniCE == 1) {
      return 1;
    }
    unsigned int v7 = ((v3 >> 11) & 0x18) + 8;
    if (MiniCE <= 0xFFF) {
      unsigned int v7 = 0;
    }
    uint64_t v3 = v7 | MiniCE;
    if (a3)
    {
      unsigned int v8 = icu::CollationFastLatinBuilder::getMiniCE(this, a3);
      if (v8 == 1) {
        return 1;
      }
      unsigned int v10 = a3 & 0xC000;
      if (v3 < 0x1000 || (v3 & 0x3E0) != 0xA0 || (v8 & 0x3E0) < 0x180 || v8 & 7 | v10)
      {
        int v11 = (v10 >> 11) + 8;
        if (v8 - 4096 >= 0xFFFFF3E1) {
          int v11 = 0;
        }
        return v11 | (v3 << 16) | v8;
      }
      else
      {
        return v8 & 0x3E0 | v3 & 0xFC1F;
      }
    }
  }
  return v3;
}

void icu::CollationIterator::CEBuffer::~CEBuffer(void **this)
{
  if (*((unsigned char *)this + 20)) {
    uprv_free(this[1]);
  }
}

{
  if (*((unsigned char *)this + 20)) {
    uprv_free(this[1]);
  }
}

uint64_t icu::CollationIterator::CEBuffer::ensureAppendCapacity(icu::CollationIterator::CEBuffer *this, int a2, UErrorCode *a3)
{
  int v3 = *((_DWORD *)this + 4);
  int v4 = *(_DWORD *)this;
  int v5 = *(_DWORD *)this + a2;
  if (v5 <= v3) {
    return 1;
  }
  if (*(int *)a3 > 0) {
    return 0;
  }
  do
  {
    int v9 = v3;
    if (v3 >= 1000) {
      char v10 = 1;
    }
    else {
      char v10 = 2;
    }
    v3 <<= v10;
  }
  while (v3 < v5);
  if (v9 >= 1 && (int v11 = uprv_malloc(8 * v3)) != 0)
  {
    int v12 = v11;
    if (v4 >= 1)
    {
      int v13 = *((_DWORD *)this + 4);
      if (v13 >= v4) {
        int v13 = v4;
      }
      if (v13 >= v3) {
        int v13 = v3;
      }
      memcpy(v11, *((const void **)this + 1), 8 * v13);
    }
    if (*((unsigned char *)this + 20)) {
      uprv_free(*((void **)this + 1));
    }
    *((void *)this + 1) = v12;
    *((_DWORD *)this + 4) = v3;
    uint64_t result = 1;
    *((unsigned char *)this + 20) = 1;
  }
  else
  {
    uint64_t result = 0;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t icu::CollationIterator::CollationIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDA49E68;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  int v3 = (_DWORD *)(a1 + 24);
  *(void *)(a1 + 32) = a1 + 48;
  *(_DWORD *)(a1 + 40) = 40;
  *(unsigned char *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  *(void *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  *(unsigned char *)(a1 + 388) = *(unsigned char *)(a2 + 388);
  UErrorCode v11 = U_ZERO_ERROR;
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if ((int)v4 >= 1
    && icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator::CEBuffer *)(a1 + 24), *(_DWORD *)(a2 + 24), &v11))
  {
    int v6 = *(uint64_t **)(a2 + 32);
    unsigned int v7 = *(void **)(a1 + 32);
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v7++ = v9;
      --v8;
    }
    while (v8);
    *int v3 = v4;
  }
  else
  {
    *(_DWORD *)(a1 + 368) = 0;
  }
  return a1;
}

void icu::CollationIterator::~CollationIterator(icu::CollationIterator *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1EDA49E68;
  uint64_t v3 = *((void *)this + 47);
  if (v3)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(v3 + 72));
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(v3 + 8));
    icu::UMemory::operator delete((void *)v3);
  }
  if (*((unsigned char *)this + 44)) {
    uprv_free(*((void **)this + 4));
  }

  icu::UObject::~UObject(this);
}

uint64_t icu::CollationIterator::operator==(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    unint64_t v5 = *(unsigned int *)(a1 + 24);
    if (v5 != *(_DWORD *)(a2 + 24)
      || *(_DWORD *)(a1 + 368) != *(_DWORD *)(a2 + 368)
      || *(_DWORD *)(a1 + 384) != *(_DWORD *)(a2 + 384)
      || *(unsigned __int8 *)(a1 + 388) != *(unsigned __int8 *)(a2 + 388))
    {
      return 0;
    }
    if ((int)v5 < 1) {
      return 1;
    }
    int v6 = *(void **)(a1 + 32);
    unsigned int v7 = *(void **)(a2 + 32);
    if (*v6 == *v7)
    {
      uint64_t v8 = 1;
      do
      {
        unint64_t v9 = v8;
        if (v5 == v8) {
          break;
        }
        uint64_t v10 = v6[v8];
        uint64_t v11 = v7[v8++];
      }
      while (v10 == v11);
      return v9 >= v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t icu::CollationIterator::reset(uint64_t this)
{
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 368) = 0;
  uint64_t v1 = *(void *)(this + 376);
  if (v1)
  {
    if (*(_WORD *)(v1 + 16)) {
      __int16 v2 = 2;
    }
    else {
      __int16 v2 = *(_WORD *)(v1 + 16) & 0x1F;
    }
    *(_WORD *)(v1 + 16) = v2;
    *(_DWORD *)(v1 + 136) = 0;
  }
  return this;
}

uint64_t icu::CollationIterator::fetchCEs(icu::CollationIterator *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    do
    {
      if (sub_18C8DCA60(this, a2) == 0x101000100) {
        break;
      }
      *((_DWORD *)this + 92) = *((_DWORD *)this + 6);
    }
    while (*(int *)a2 < 1);
  }
  return *((unsigned int *)this + 6);
}

uint64_t icu::CollationIterator::handleNextCE32(uint64_t **this, int *a2, UErrorCode *a3)
{
  int v5 = ((uint64_t (*)(uint64_t **, UErrorCode *))(*this)[6])(this, a3);
  *a2 = v5;
  if (v5 < 0) {
    return 192;
  }
  unsigned int v6 = v5;
  unsigned int v7 = this[2];

  return sub_18C8DD7F8(v7, v6);
}

uint64_t icu::CollationIterator::handleGetTrailSurrogate(icu::CollationIterator *this)
{
  return 0;
}

uint64_t icu::CollationIterator::foundNULTerminator(icu::CollationIterator *this)
{
  return 0;
}

uint64_t icu::CollationIterator::forbidSurrogateCodePoints(icu::CollationIterator *this)
{
  return 0;
}

uint64_t icu::CollationIterator::getDataCE32(uint64_t **this, unsigned int a2)
{
  return sub_18C8DD7F8(this[2], a2);
}

uint64_t icu::CollationIterator::getCE32FromBuilderData(icu::CollationIterator *this, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0) {
    *a3 = U_INTERNAL_PROGRAM_ERROR;
  }
  return 0;
}

uint64_t icu::CollationIterator::nextCEFromCE32(icu::CollationIterator *this, const icu::CollationData *a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  --*((_DWORD *)this + 6);
  uint64_t v7 = 1;
  icu::CollationIterator::appendCEsFromCE32(this, a2, a3, a4, 1, a5);
  if (*(int *)a5 <= 0)
  {
    uint64_t v8 = *((int *)this + 92);
    *((_DWORD *)this + 92) = v8 + 1;
    return *(void *)(*((void *)this + 4) + 8 * v8);
  }
  return v7;
}

void icu::CollationIterator::appendCEsFromCE32(icu::CollationIterator *this, const icu::CollationData *a2, uint64_t a3, uint64_t a4, int a5, UErrorCode *a6)
{
  uint64_t v7 = a4;
  if ((~a4 & 0xC0) == 0)
  {
    while (1)
    {
      switch(v7 & 0xF)
      {
        case 1:
          int v30 = *((_DWORD *)this + 6);
          if (v30 < 40) {
            goto LABEL_61;
          }
          if (icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator *)((char *)this + 24), 1, a6))
          {
            int v30 = *((_DWORD *)this + 6);
LABEL_61:
            unint64_t v31 = ((unint64_t)((v7 & 0xFFFFFF00) >> 8) << 40) | 0x5000500;
            *((_DWORD *)this + 6) = v30 + 1;
            uint64_t v32 = *((void *)this + 4);
            goto LABEL_115;
          }
          return;
        case 2:
          int v28 = *((_DWORD *)this + 6);
          if (v28 < 40) {
            goto LABEL_65;
          }
          if (!icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator *)((char *)this + 24), 1, a6))return; {
          int v28 = *((_DWORD *)this + 6);
          }
LABEL_65:
          unint64_t v29 = v7 & 0xFFFFFF00;
          goto LABEL_54;
        case 4:
          if (icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator *)((char *)this + 24), 2, a6))
          {
            uint64_t v33 = *((int *)this + 6);
            uint64_t v34 = *((void *)this + 4);
            *(void *)(v34 + 8 * v33) = (unsigned __int16)(v7 >> 8) & 0xFF00 | ((unint64_t)((v7 & 0xFF000000) >> 24) << 56) | 0x5000000;
            *(void *)(v34 + 8 * ((int)v33 + 1)) = (BYTE1(v7) << 24) | 0x500u;
            *((_DWORD *)this + 6) = v33 + 2;
          }
          return;
        case 5:
          uint64_t v35 = *((void *)a2 + 1);
          if (icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator *)((char *)this + 24), (v7 >> 8) & 0x1F, a6))
          {
            uint64_t v36 = (int *)(v35 + 4 * (v7 >> 13));
            uint64_t v37 = *((int *)this + 6);
            uint64_t v38 = (unint64_t *)(*((void *)this + 4) + 8 * v37);
            int v39 = v37 + 1;
            signed int v40 = ((v7 >> 8) & 0x1F) + 1;
            do
            {
              int v42 = *v36++;
              int v41 = v42;
              uint64_t v43 = v42;
              uint64_t v44 = v42 & 0xFFFFFF00;
              if ((v42 & 0xF) == 1) {
                uint64_t v44 = (v44 << 32) | 0x5000500;
              }
              unint64_t v45 = (v41 << 16) & 0xFF000000 | ((unint64_t)((v41 & 0xFFFF0000) >> 16) << 48) | (v43 << 8);
              if (v43 > 0xBF) {
                unint64_t v45 = v44;
              }
              *((_DWORD *)this + 6) = v39;
              *v38++ = v45;
              ++v39;
              --v40;
            }
            while (v40 > 1);
          }
          return;
        case 6:
          uint64_t v46 = *((void *)a2 + 2);
          if (icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator *)((char *)this + 24), (v7 >> 8) & 0x1F, a6))
          {
            uint64_t v47 = (uint64_t *)(v46 + 8 * (v7 >> 13));
            uint64_t v48 = *((int *)this + 6);
            uint64_t v49 = (void *)(*((void *)this + 4) + 8 * v48);
            unsigned int v50 = ((v7 >> 8) & 0x1F) + 1;
            do
            {
              uint64_t v51 = *v47++;
              *v49++ = v51;
              LODWORD(v48) = v48 + 1;
              --v50;
            }
            while (v50 > 1);
            *((_DWORD *)this + 6) = v48;
          }
          return;
        case 7:
          uint64_t v12 = (*(uint64_t (**)(icu::CollationIterator *, uint64_t, UErrorCode *))(*(void *)this + 120))(this, v7, a6);
          if (*(int *)a6 > 0) {
            return;
          }
          uint64_t CE32FromPrefix = v12;
          if (v12 != 192) {
            goto LABEL_31;
          }
          a2 = *(const icu::CollationData **)(*((void *)this + 2) + 32);
          uint64_t v14 = sub_18C8DD7F8((uint64_t *)a2, a3);
          goto LABEL_30;
        case 8:
          if (a5)
          {
            (*(void (**)(icu::CollationIterator *, uint64_t, UErrorCode *))(*(void *)this + 104))(this, 1, a6);
            uint64_t CE32FromPrefix = icu::CollationIterator::getCE32FromPrefix(this, a2, v7, a6);
            (*(void (**)(icu::CollationIterator *, uint64_t, UErrorCode *))(*(void *)this + 96))(this, 1, a6);
            goto LABEL_31;
          }
          uint64_t v14 = icu::CollationIterator::getCE32FromPrefix(this, a2, v7, a6);
          goto LABEL_30;
        case 9:
          int v15 = (unsigned __int16 *)(*((void *)a2 + 3) + 2 * (v7 >> 13));
          uint64_t CE32FromPrefix = v15[1] | (*v15 << 16);
          if (!a5) {
            goto LABEL_31;
          }
          if (!*((void *)this + 47) && (*((_DWORD *)this + 96) & 0x80000000) != 0)
          {
            unsigned int v26 = (*(uint64_t (**)(icu::CollationIterator *, UErrorCode *))(*(void *)this + 48))(this, a6);
            if ((v26 & 0x80000000) != 0) {
              goto LABEL_31;
            }
            int v17 = v26;
            if ((v7 & 0x200) != 0)
            {
              if (v26 < 0x300
                || (!HIWORD(v26) ? (unint64_t v27 = v26) : (unint64_t v27 = (unsigned __int16)((v26 >> 10) - 10304)),
                    !icu::CollationFCD::lcccIndex[v27 >> 5]
                 || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[v27 >> 5]] >> v27) & 1) == 0))
              {
                (*(void (**)(icu::CollationIterator *, uint64_t, UErrorCode *))(*(void *)this + 104))(this, 1, a6);
                goto LABEL_31;
              }
            }
          }
          else
          {
            unsigned int SkippedCodePoint = icu::CollationIterator::nextSkippedCodePoint(this, a6);
            if ((SkippedCodePoint & 0x80000000) != 0) {
              goto LABEL_31;
            }
            int v17 = SkippedCodePoint;
            if ((v7 & 0x200) != 0)
            {
              if (SkippedCodePoint < 0x300
                || (!HIWORD(SkippedCodePoint)
                  ? (unint64_t v25 = SkippedCodePoint)
                  : (unint64_t v25 = (unsigned __int16)((SkippedCodePoint >> 10) - 10304)),
                    !icu::CollationFCD::lcccIndex[v25 >> 5]
                 || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[v25 >> 5]] >> v25) & 1) == 0))
              {
                icu::CollationIterator::backwardNumSkipped(this, 1, a6);
                goto LABEL_31;
              }
            }
          }
          uint64_t CE32FromPrefix = icu::CollationIterator::nextCE32FromContraction(this, (uint64_t *)a2, v7, (uint64_t)(v15 + 2), CE32FromPrefix, v17, a6);
          if (CE32FromPrefix == 1) {
            return;
          }
          goto LABEL_31;
        case 0xALL:
          if (*((unsigned char *)this + 388))
          {
            icu::CollationIterator::appendNumericCEs((uint64_t **)this, v7, a5, a6);
            return;
          }
          uint64_t CE32FromPrefix = *(unsigned int *)(*((void *)a2 + 1) + 4 * (v7 >> 13));
          goto LABEL_31;
        case 0xBLL:
          if (a5 && (*(unsigned int (**)(icu::CollationIterator *))(*(void *)this + 80))(this))
          {
            int v30 = *((_DWORD *)this + 6);
            if (v30 < 40)
            {
LABEL_114:
              *((_DWORD *)this + 6) = v30 + 1;
              uint64_t v32 = *((void *)this + 4);
              unint64_t v31 = 0x101000100;
LABEL_115:
              *(void *)(v32 + 8 * v30) = v31;
            }
            else if (icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator *)((char *)this + 24), 1, a6))
            {
              int v30 = *((_DWORD *)this + 6);
              goto LABEL_114;
            }
            return;
          }
          uint64_t CE32FromPrefix = **((unsigned int **)a2 + 1);
LABEL_31:
          uint64_t v7 = CE32FromPrefix;
          if ((~CE32FromPrefix & 0xC0) != 0) {
            goto LABEL_50;
          }
          break;
        case 0xCLL:
          uint64_t v18 = *((void *)a2 + 5);
          int v19 = a3 - 44032;
          int v20 = ((int)a3 - 44032) / 28;
          int v21 = ((int)a3 - 44032) % 28;
          int v22 = v20 % 21;
          int v23 = v19 / 588;
          if ((v7 & 0x100) != 0)
          {
            uint64_t v53 = (int *)((char *)this + 24);
            if (v21) {
              int v54 = 3;
            }
            else {
              int v54 = 2;
            }
            if (icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator *)((char *)this + 24), v54, a6))
            {
              uint64_t v55 = *v53;
              int v56 = *(_DWORD *)(v18 + 4 * v23);
              unsigned int v57 = v56;
              unint64_t v58 = v56 & 0xFFFFFF00;
              if ((v56 & 0xF) == 1) {
                unint64_t v58 = ((unint64_t)(v56 & 0xFFFFFF00) << 32) | 0x5000500;
              }
              unint64_t v59 = (v56 << 16) & 0xFF000000 | ((unint64_t)((v56 & 0xFFFF0000) >> 16) << 48) | ((unint64_t)v56 << 8);
              if (v57 <= 0xBF) {
                unint64_t v60 = v59;
              }
              else {
                unint64_t v60 = v58;
              }
              uint64_t v61 = *((void *)this + 4);
              *(void *)(v61 + 8 * v55) = v60;
              int v62 = *(_DWORD *)(v18 + 4 * v22 + 76);
              unsigned int v63 = v62;
              unint64_t v64 = v62 & 0xFFFFFF00;
              if ((v62 & 0xF) == 1) {
                unint64_t v64 = ((unint64_t)(v62 & 0xFFFFFF00) << 32) | 0x5000500;
              }
              unint64_t v65 = (v62 << 16) & 0xFF000000 | ((unint64_t)((v62 & 0xFFFF0000) >> 16) << 48) | ((unint64_t)v62 << 8);
              if (v63 > 0xBF) {
                unint64_t v65 = v64;
              }
              *(void *)(v61 + 8 * (v55 + 1)) = v65;
              *uint64_t v53 = v55 + 2;
              if (v21)
              {
                int v66 = *(_DWORD *)(v18 + 4 * (v21 + 39));
                unsigned int v67 = v66;
                unint64_t v68 = v66 & 0xFFFFFF00;
                if ((v66 & 0xF) == 1) {
                  unint64_t v68 = ((unint64_t)(v66 & 0xFFFFFF00) << 32) | 0x5000500;
                }
                unint64_t v69 = (v66 << 16) & 0xFF000000 | ((unint64_t)((v66 & 0xFFFF0000) >> 16) << 48) | ((unint64_t)v66 << 8);
                if (v67 > 0xBF) {
                  unint64_t v69 = v68;
                }
                *uint64_t v53 = v55 + 3;
                *(void *)(v61 + 8 * ((int)v55 + 2)) = v69;
              }
            }
            return;
          }
          icu::CollationIterator::appendCEsFromCE32(this, a2, -1, *(_DWORD *)(v18 + 4 * v23), a5, a6);
          icu::CollationIterator::appendCEsFromCE32(this, a2, -1, *(_DWORD *)(v18 + 4 * v22 + 76), a5, a6);
          if (!v21) {
            return;
          }
          uint64_t CE32FromPrefix = *(unsigned int *)(v18 + 4 * (v21 + 39));
          a3 = 0xFFFFFFFFLL;
          goto LABEL_31;
        case 0xDLL:
          int v24 = (*(uint64_t (**)(icu::CollationIterator *))(*(void *)this + 72))(this);
          if ((v24 & 0xFC00) == 0xDC00 && (a3 = (v24 + (a3 << 10) - 56613888), (v7 & 0x300) != 0))
          {
            if ((v7 & 0x300) == 0x100 || (uint64_t v14 = sub_18C8EEB30((uint64_t *)a2, a3), v14 == 192))
            {
              a2 = (const icu::CollationData *)*((void *)a2 + 4);
              uint64_t v14 = sub_18C8EEB30((uint64_t *)a2, a3);
            }
LABEL_30:
            uint64_t CE32FromPrefix = v14;
          }
          else
          {
            uint64_t CE32FromPrefix = 0xFFFFFFFFLL;
          }
          goto LABEL_31;
        case 0xELL:
          uint64_t ThreeBytePrimaryForOffsetData = icu::Collation::getThreeBytePrimaryForOffsetData((icu::Collation *)a3, *(void *)(*((void *)a2 + 2) + 8 * (v7 >> 13)));
          goto LABEL_107;
        case 0xFLL:
          if (a3 >> 11 == 27
            && (*(unsigned int (**)(icu::CollationIterator *))(*(void *)this + 88))(this))
          {
            LODWORD(CE32FromPrefix) = -195323;
            goto LABEL_50;
          }
          uint64_t ThreeBytePrimaryForOffsetData = icu::Collation::unassignedPrimaryFromCodePoint((icu::Collation *)a3);
LABEL_107:
          uint64_t v70 = ThreeBytePrimaryForOffsetData;
          int v28 = *((_DWORD *)this + 6);
          if (v28 < 40) {
            goto LABEL_110;
          }
          if (!icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator *)((char *)this + 24), 1, a6))return; {
          int v28 = *((_DWORD *)this + 6);
          }
LABEL_110:
          unint64_t v29 = (v70 << 32) | 0x5000500;
          goto LABEL_54;
        default:
          if (*(int *)a6 <= 0) {
            *a6 = U_INTERNAL_PROGRAM_ERROR;
          }
          return;
      }
    }
  }
  LODWORD(CE32FromPrefix) = a4;
LABEL_50:
  int v28 = *((_DWORD *)this + 6);
  if (v28 >= 40)
  {
    if (!icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator *)((char *)this + 24), 1, a6))return; {
    int v28 = *((_DWORD *)this + 6);
    }
  }
  unint64_t v29 = (CE32FromPrefix << 16) & 0xFF000000 | ((unint64_t)((CE32FromPrefix & 0xFFFF0000) >> 16) << 48) | (CE32FromPrefix << 8);
LABEL_54:
  *((_DWORD *)this + 6) = v28 + 1;
  *(void *)(*((void *)this + 4) + 8 * v28) = v29;
}

uint64_t icu::CollationIterator::getCE32FromPrefix(icu::CollationIterator *this, const icu::CollationData *a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t v6 = 0;
  uint64_t v7 = (unsigned __int16 *)(*((void *)a2 + 3) + 2 * (a3 >> 13));
  uint64_t v8 = v7[1] | (*v7 << 16);
  v16[0] = 0;
  v16[1] = v7 + 2;
  int v17 = v7 + 2;
  uint64_t v18 = 0xFFFFFFFFLL;
  do
  {
    int v9 = (*(uint64_t (**)(icu::CollationIterator *, UErrorCode *))(*(void *)this + 56))(this, a4);
    if (v9 < 0) {
      break;
    }
    int v10 = icu::UCharsTrie::nextForCodePoint((icu::UCharsTrie *)v16, v9);
    if (v10 >= 2)
    {
      uint64_t v11 = v17 + 1;
      unsigned int v12 = *v17;
      if ((__int16)*v17 < 0)
      {
        uint64_t v8 = v12 & 0x7FFF;
        if (v8 >= 0x4000)
        {
          if (v8 == 0x7FFF)
          {
            int v14 = v17[1] << 16;
            uint64_t v11 = v17 + 2;
          }
          else
          {
            int v14 = (v8 << 16) - 0x40000000;
          }
          uint64_t v8 = v14 | *v11;
        }
      }
      else
      {
        unsigned int v13 = v12 >> 6;
        if (v13 > 0x100)
        {
          if (v13 > 0x1FE) {
            uint64_t v8 = v17[2] | (v17[1] << 16);
          }
          else {
            uint64_t v8 = (*v11 | ((unsigned __int16)(v13 & 0x1FF) << 16)) - 16842752;
          }
        }
        else
        {
          uint64_t v8 = v13 - 1;
        }
      }
    }
    uint64_t v6 = (v6 + 1);
  }
  while ((v10 & 1) != 0);
  (*(void (**)(icu::CollationIterator *, uint64_t, UErrorCode *))(*(void *)this + 96))(this, v6, a4);
  icu::UCharsTrie::~UCharsTrie(v16);
  return v8;
}

uint64_t icu::CollationIterator::nextSkippedCodePoint(icu::CollationIterator *this, UErrorCode *a2)
{
  uint64_t v3 = *((void *)this + 47);
  if (v3
    && ((uint64_t v4 = (uint64_t *)*(unsigned int *)(v3 + 136), *(__int16 *)(v3 + 16) < 0)
      ? (int v5 = *(_DWORD *)(v3 + 20))
      : (int v5 = *(unsigned __int16 *)(v3 + 16) >> 5),
        (int)v4 < v5))
  {
    uint64_t result = (uint64_t)icu::UnicodeString::char32At(v4, (icu::UnicodeString *)(v3 + 8), *(_DWORD *)(v3 + 136));
    if (result < 0x10000) {
      int v7 = 1;
    }
    else {
      int v7 = 2;
    }
    *(_DWORD *)(v3 + 136) += v7;
  }
  else if (*((_DWORD *)this + 96))
  {
    uint64_t result = (*(uint64_t (**)(icu::CollationIterator *, UErrorCode *))(*(void *)this + 48))(this, a2);
    uint64_t v8 = *((void *)this + 47);
    if (v8 && *(unsigned __int16 *)(v8 + 16) >= 0x20u && (result & 0x80000000) == 0) {
      ++*(_DWORD *)(v8 + 136);
    }
    int v9 = *((_DWORD *)this + 96);
    BOOL v10 = __OFSUB__(v9, 1);
    int v11 = v9 - 1;
    if (v11 < 0 == v10 && (result & 0x80000000) == 0) {
      *((_DWORD *)this + 96) = v11;
    }
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t icu::CollationIterator::backwardNumSkipped(icu::CollationIterator *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *((void *)this + 47);
  if (v6 && *(unsigned __int16 *)(v6 + 16) >= 0x20u) {
    uint64_t v4 = sub_18C8EEB78(v6, a2);
  }
  uint64_t result = (*(uint64_t (**)(icu::CollationIterator *, uint64_t, UErrorCode *))(*(void *)this + 104))(this, v4, a3);
  int v8 = *((_DWORD *)this + 96);
  if ((v8 & 0x80000000) == 0) {
    *((_DWORD *)this + 96) = v8 + v4;
  }
  return result;
}

uint64_t icu::CollationIterator::nextCE32FromContraction(icu::CollationIterator *a1, uint64_t *a2, __int16 a3, uint64_t a4, uint64_t CE32FromDiscontiguousContraction, int a6, UErrorCode *a7)
{
  unsigned int v8 = a6;
  unsigned int v26 = 0;
  *(void *)&long long v27 = a4;
  *((void *)&v27 + 1) = a4;
  uint64_t v28 = 0xFFFFFFFFLL;
  uint64_t v13 = *((void *)a1 + 47);
  if (v13 && *(unsigned __int16 *)(v13 + 16) >= 0x20u)
  {
    *(void *)(v13 + 144) = a4;
    *(void *)(v13 + 152) = a4;
    *(_DWORD *)(v13 + 160) = -1;
  }
  int v14 = icu::UCharsTrie::firstForCodePoint((icu::UCharsTrie *)&v26, a6);
  uint64_t v15 = 1;
  int v16 = 2;
  while (v14 >= 2)
  {
    int v17 = (unsigned __int16 *)(*((void *)&v27 + 1) + 2);
    unsigned int v18 = (unsigned __int16)**((_WORD **)&v27 + 1);
    if ((__int16)**((_WORD **)&v27 + 1) < 0)
    {
      CE32FromDiscontiguousContractiouint64_t n = v18 & 0x7FFF;
      if (CE32FromDiscontiguousContraction >= 0x4000)
      {
        if (CE32FromDiscontiguousContraction == 0x7FFF)
        {
          int v21 = *(unsigned __int16 *)(*((void *)&v27 + 1) + 2) << 16;
          int v17 = (unsigned __int16 *)(*((void *)&v27 + 1) + 4);
        }
        else
        {
          int v21 = (CE32FromDiscontiguousContraction << 16) - 0x40000000;
        }
        CE32FromDiscontiguousContractiouint64_t n = v21 | *v17;
      }
    }
    else
    {
      unsigned int v19 = v18 >> 6;
      if (v19 > 0x100)
      {
        if (v19 > 0x1FE) {
          CE32FromDiscontiguousContractiouint64_t n = *(unsigned __int16 *)(*((void *)&v27 + 1) + 4) | (*(unsigned __int16 *)(*((void *)&v27 + 1) + 2) << 16);
        }
        else {
          CE32FromDiscontiguousContractiouint64_t n = (*v17 | ((unsigned __int16)(v19 & 0x1FF) << 16)) - 16842752;
        }
      }
      else
      {
        CE32FromDiscontiguousContractiouint64_t n = v19 - 1;
      }
    }
    if ((v14 & 1) == 0) {
      goto LABEL_35;
    }
    unsigned int SkippedCodePoint = icu::CollationIterator::nextSkippedCodePoint(a1, a7);
    if ((SkippedCodePoint & 0x80000000) != 0) {
      goto LABEL_35;
    }
    unsigned int v8 = SkippedCodePoint;
    uint64_t v23 = *((void *)a1 + 47);
    if (v23)
    {
      if (*(unsigned __int16 *)(v23 + 16) >= 0x20u)
      {
        *(_OWORD *)(v23 + 144) = v27;
        *(_DWORD *)(v23 + 160) = v28;
      }
    }
    uint64_t v15 = 1;
LABEL_26:
    int v14 = icu::UCharsTrie::nextForCodePoint((icu::UCharsTrie *)&v26, v8);
    ++v16;
  }
  if (v14)
  {
    unsigned int v20 = icu::CollationIterator::nextSkippedCodePoint(a1, a7);
    if ((v20 & 0x80000000) == 0)
    {
      uint64_t v15 = (v15 + 1);
      unsigned int v8 = v20;
      goto LABEL_26;
    }
  }
  if ((a3 & 0x400) == 0) {
    goto LABEL_34;
  }
  int v24 = v16 - 1;
  if ((a3 & 0x100) != 0 && (int)v15 >= v24) {
    goto LABEL_34;
  }
  if ((int)v15 >= 2)
  {
    icu::CollationIterator::backwardNumSkipped(a1, v15, a7);
    unsigned int v8 = icu::CollationIterator::nextSkippedCodePoint(a1, a7);
    int v24 = v16 - v15;
    uint64_t v15 = 1;
  }
  if (sub_18C818388(a2[6], v8) < 0x100) {
LABEL_34:
  }
    icu::CollationIterator::backwardNumSkipped(a1, v15, a7);
  else {
    CE32FromDiscontiguousContractiouint64_t n = icu::CollationIterator::nextCE32FromDiscontiguousContraction(a1, (const icu::CollationData *)a2, (icu::UCharsTrie *)&v26, CE32FromDiscontiguousContraction, v24, v8, a7);
  }
LABEL_35:
  icu::UCharsTrie::~UCharsTrie(&v26);
  return CE32FromDiscontiguousContraction;
}

void icu::CollationIterator::appendNumericCEs(uint64_t **this, __int16 a2, int a3, UErrorCode *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(&v26[1], 0, 48);
  uint64_t v27 = 0;
  v26[0] = (char *)&v26[1] + 5;
  LODWORD(v26[1]) = 40;
  if (a3)
  {
    icu::CharString::append((icu::CharString *)v26, HIBYTE(a2) & 0xF, a4);
    while (*((_DWORD *)this + 96))
    {
      unsigned int v6 = ((uint64_t (*)(uint64_t **, UErrorCode *))(*this)[6])(this, a4);
      if ((v6 & 0x80000000) != 0) {
        break;
      }
      unsigned int v7 = v6;
      int v8 = sub_18C8DD7F8(this[2], v6);
      if (v8 == 192) {
        LOWORD(v8) = sub_18C8DD7F8((uint64_t *)this[2][4], v7);
      }
      if ((v8 & 0xCF) != 0xCA)
      {
        ((void (*)(uint64_t **, uint64_t, UErrorCode *))(*this)[13])(this, 1, a4);
        break;
      }
      int v9 = *((_DWORD *)this + 96);
      BOOL v10 = __OFSUB__(v9, 1);
      int v11 = v9 - 1;
      if (v11 < 0 == v10) {
        *((_DWORD *)this + 96) = v11;
      }
      icu::CharString::append((icu::CharString *)v26, BYTE1(v8) & 0xF, a4);
    }
  }
  else
  {
    while (1)
    {
      icu::CharString::append((icu::CharString *)v26, HIBYTE(a2) & 0xF, a4);
      unsigned int v12 = ((uint64_t (*)(uint64_t **, UErrorCode *))(*this)[7])(this, a4);
      if ((v12 & 0x80000000) != 0) {
        break;
      }
      unsigned int v13 = v12;
      int v14 = sub_18C8DD7F8(this[2], v12);
      a2 = v14;
      if (v14 == 192) {
        a2 = sub_18C8DD7F8((uint64_t *)this[2][4], v13);
      }
      if ((a2 & 0xCF) != 0xCA)
      {
        ((void (*)(uint64_t **, uint64_t, UErrorCode *))(*this)[12])(this, 1, a4);
        break;
      }
    }
    uint64_t v15 = (char *)v26[0] + (int)v27 - 1;
    if (v26[0] < v15)
    {
      int v16 = (char *)v26[0] + 1;
      do
      {
        char v17 = *(v16 - 1);
        *(v16 - 1) = *v15;
        *v15-- = v17;
      }
      while (v16++ < v15);
    }
  }
  if (*(int *)a4 <= 0)
  {
    int v19 = 0;
    int v20 = v27;
    do
    {
      if (v19 < v20 - 1)
      {
        int v21 = (char *)v26[0] + v19;
        uint64_t v22 = ~(uint64_t)v19 + v20;
        while (!*v21++)
        {
          ++v19;
          if (!--v22)
          {
            int v19 = v20 - 1;
            break;
          }
        }
      }
      int v24 = v20 - v19;
      if (v24 >= 254) {
        int v25 = 254;
      }
      else {
        int v25 = v24;
      }
      icu::CollationIterator::appendNumericSegmentCEs((uint64_t)this, (const char *)v26[0] + v19, v25, a4);
      if (*(int *)a4 > 0) {
        break;
      }
      v19 += v25;
      int v20 = v27;
    }
    while (v19 < (int)v27);
  }
  if (BYTE4(v26[1])) {
    uprv_free(v26[0]);
  }
}

uint64_t sub_18C8EEB30(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  if (*(_DWORD *)(*a1 + 44) <= a2) {
    int v3 = *(_DWORD *)(v2 + 48);
  }
  else {
    int v3 = (a2 & 0x1F)
  }
       + 4
       * *(unsigned __int16 *)(*(void *)v2
                             + 2
                             * (((a2 >> 5) & 0x3F)
                              + *(unsigned __int16 *)(*(void *)v2 + 2 * ((a2 >> 11) + 2080))));
  return *(unsigned int *)(*(void *)(*a1 + 16) + 4 * v3);
}

uint64_t sub_18C8EEB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (icu::UnicodeString *)(a1 + 8);
  if (*(__int16 *)(a1 + 16) < 0) {
    int v5 = *(_DWORD *)(a1 + 20);
  }
  else {
    int v5 = *(unsigned __int16 *)(a1 + 16) >> 5;
  }
  int v6 = *(_DWORD *)(a1 + 136);
  uint64_t v7 = (v6 - v5);
  if ((int)v7 < 1)
  {
    int v8 = icu::UnicodeString::moveIndex32(v4, *(_DWORD *)(a1 + 136), -(int)a2);
    a2 = 0;
  }
  else if ((int)v7 >= (int)a2)
  {
    int v8 = v6 - a2;
  }
  else
  {
    int v8 = icu::UnicodeString::moveIndex32(v4, v5, (int)v7 - (int)a2);
    a2 = v7;
  }
  *(_DWORD *)(a1 + 136) = v8;
  return a2;
}

uint64_t icu::CollationIterator::nextCE32FromDiscontiguousContraction(icu::CollationIterator *this, const icu::CollationData *a2, icu::UCharsTrie *a3, uint64_t a4, int a5, unsigned int a6, UErrorCode *a7)
{
  if (*(int *)a7 > 0) {
    return 0;
  }
  uint64_t v7 = a4;
  unsigned int v12 = a2;
  LOBYTE(v14) = sub_18C818388(*((void *)a2 + 6), a6);
  signed int SkippedCodePoint = icu::CollationIterator::nextSkippedCodePoint(this, a7);
  if (SkippedCodePoint < 0)
  {
    int v20 = this;
    uint64_t v21 = 1;
    goto LABEL_7;
  }
  unsigned int v16 = SkippedCodePoint;
  unsigned int v17 = sub_18C818388(*((void *)v12 + 6), SkippedCodePoint);
  if (v17 <= 0xFF)
  {
    int v20 = this;
    uint64_t v21 = 2;
LABEL_7:
    icu::CollationIterator::backwardNumSkipped(v20, v21, a7);
    return v7;
  }
  __int16 v23 = v17;
  int v24 = (uint64_t *)*((void *)this + 47);
  if (!v24)
  {
    int v24 = icu::UMemory::operator new(v19, (icu::UMemory *)0xA8, v18);
    if (!v24)
    {
      uint64_t v7 = 0;
      *((void *)this + 47) = 0;
      *a7 = U_MEMORY_ALLOCATION_ERROR;
      return v7;
    }
    v24[1] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v24 + 8) = 2;
    v24[9] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v24 + 40) = 2;
    v24[17] = 0;
    v24[18] = 0;
    *((void *)this + 47) = v24;
    goto LABEL_16;
  }
  if (*((unsigned __int16 *)v24 + 8) <= 0x1Fu)
  {
LABEL_16:
    unint64_t v26 = *((void *)a3 + 1);
    *((void *)a3 + 2) = v26;
    int v27 = -1;
    *((_DWORD *)a3 + 6) = -1;
    if (a5 < 2)
    {
      int64x2_t v31 = vdupq_n_s64(v26);
    }
    else
    {
      (*(void (**)(icu::CollationIterator *, void, UErrorCode *))(*(void *)this + 104))(this, (a5 + 1), a7);
      int v28 = (*(uint64_t (**)(icu::CollationIterator *, UErrorCode *))(*(void *)this + 48))(this, a7);
      icu::UCharsTrie::firstForCodePoint(a3, v28);
      for (int i = a5 - 2; i; --i)
      {
        int v30 = (*(uint64_t (**)(icu::CollationIterator *, UErrorCode *))(*(void *)this + 48))(this, a7);
        icu::UCharsTrie::nextForCodePoint(a3, v30);
      }
      (*(void (**)(icu::CollationIterator *, uint64_t, UErrorCode *))(*(void *)this + 96))(this, 2, a7);
      int v24 = (uint64_t *)*((void *)this + 47);
      int64x2_t v31 = *(int64x2_t *)((char *)a3 + 8);
      int v27 = *((_DWORD *)a3 + 6);
    }
    *((int64x2_t *)v24 + 9) = v31;
    *((_DWORD *)v24 + 40) = v27;
    goto LABEL_22;
  }
  uint64_t v25 = *((void *)a3 + 1);
  if (v25 && v25 == v24[18])
  {
    *((void *)a3 + 2) = v24[19];
    *((_DWORD *)a3 + 6) = *((_DWORD *)v24 + 40);
  }
LABEL_22:
  unsigned __int16 v14 = v14;
  sub_18C8EF118((uint64_t)v24, a6);
  uint64_t v32 = 2;
  while (1)
  {
    if (HIBYTE(v23) <= v14 || (int v33 = icu::UCharsTrie::nextForCodePoint(a3, v16), v33 < 2))
    {
      icu::UnicodeString::append(*((void *)this + 47) + 72, v16);
      uint64_t v38 = *((void *)this + 47);
      uint64_t v39 = *((void *)a3 + 1);
      if (v39) {
        BOOL v40 = v39 == *(void *)(v38 + 144);
      }
      else {
        BOOL v40 = 0;
      }
      if (v40)
      {
        *((void *)a3 + 2) = *(void *)(v38 + 152);
        *((_DWORD *)a3 + 6) = *(_DWORD *)(v38 + 160);
      }
      unsigned __int16 v14 = v23;
      goto LABEL_48;
    }
    uint64_t v34 = (unsigned __int16 *)*((void *)a3 + 2);
    uint64_t v35 = v34 + 1;
    unsigned int v36 = *v34;
    if ((__int16)*v34 < 0)
    {
      uint64_t v7 = v36 & 0x7FFF;
      if (v7 >= 0x4000)
      {
        if (v7 == 0x7FFF)
        {
          int v41 = v34[1] << 16;
          uint64_t v35 = v34 + 2;
        }
        else
        {
          int v41 = (v7 << 16) - 0x40000000;
        }
        uint64_t v7 = v41 | *v35;
      }
    }
    else
    {
      unsigned int v37 = v36 >> 6;
      if (v37 > 0x100) {
        uint64_t v7 = v37 > 0x1FE ? v34[2] | (v34[1] << 16) : (*v35 | ((unsigned __int16)(v37 & 0x1FF) << 16)) - 16842752;
      }
      else {
        uint64_t v7 = v37 - 1;
      }
    }
    uint64_t v42 = *((void *)this + 47);
    int v43 = *(__int16 *)(v42 + 80) < 0 ? *(_DWORD *)(v42 + 84) : *(unsigned __int16 *)(v42 + 80) >> 5;
    *(_DWORD *)(v42 + 140) = v43;
    uint64_t v32 = 0;
    if ((v33 & 1) == 0) {
      break;
    }
    *(void *)(v42 + 144) = *((void *)a3 + 1);
    *(void *)(v42 + 152) = v34;
    *(_DWORD *)(v42 + 160) = *((_DWORD *)a3 + 6);
LABEL_48:
    signed int v44 = icu::CollationIterator::nextSkippedCodePoint(this, a7);
    if ((v44 & 0x80000000) == 0)
    {
      unsigned int v16 = v44;
      uint64_t v32 = (v32 + 1);
      unsigned int v45 = sub_18C818388(*((void *)v12 + 6), v44);
      __int16 v23 = v45;
      if (v45 > 0xFF) {
        continue;
      }
    }
    break;
  }
  icu::CollationIterator::backwardNumSkipped(this, v32, a7);
  uint64_t v46 = *((void *)this + 47);
  unsigned int v47 = *(unsigned __int16 *)(v46 + 16);
  icu::UnicodeString::doReplace((icu::UnicodeString *)(v46 + 8), 0, *(unsigned int *)(v46 + 136), (const icu::UnicodeString *)(v46 + 72), 0, *(unsigned int *)(v46 + 140));
  *(_DWORD *)(v46 + 136) = 0;
  if (v47 <= 0x1F && *(unsigned __int16 *)(*((void *)this + 47) + 16) >= 0x20u)
  {
    LODWORD(v48) = -1;
    while (1)
    {
      icu::CollationIterator::appendCEsFromCE32(this, v12, (int)v48, v7, 1, a7);
      uint64_t v49 = *((void *)this + 47);
      int v50 = *(_DWORD *)(v49 + 136);
      uint64_t v51 = (uint64_t *)*(unsigned __int16 *)(v49 + 16);
      int v52 = *(__int16 *)(v49 + 16) < 0 ? *(_DWORD *)(v49 + 20) : v51 >> 5;
      if (v50 >= v52) {
        break;
      }
      uint64_t v48 = icu::UnicodeString::char32At(v51, (icu::UnicodeString *)(v49 + 8), v50);
      if (v48 < 0x10000) {
        int v53 = 1;
      }
      else {
        int v53 = 2;
      }
      *(_DWORD *)(v49 + 136) += v53;
      LODWORD(v7) = (*(uint64_t (**)(icu::CollationIterator *, uint64_t *))(*(void *)this + 112))(this, v48);
      unsigned int v12 = (const icu::CollationData *)*((void *)this + 2);
      if (v7 == 192)
      {
        unsigned int v12 = (const icu::CollationData *)*((void *)v12 + 4);
        LODWORD(v7) = sub_18C8DD7F8((uint64_t *)v12, v48);
      }
    }
    if (v51) {
      __int16 v54 = 2;
    }
    else {
      __int16 v54 = *(_WORD *)(v49 + 16) & 0x1F;
    }
    *(_WORD *)(v49 + 16) = v54;
    *(_DWORD *)(v49 + 136) = 0;
    return 1;
  }
  return v7;
}

uint64_t sub_18C8EF118(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)(a1 + 140) = 0;
  uint64_t v4 = (icu::UnicodeString *)(a1 + 72);
  icu::UnicodeString::unBogus(a1 + 72);
  if (*(__int16 *)(a1 + 80) < 0) {
    uint64_t v5 = *(unsigned int *)(a1 + 84);
  }
  else {
    uint64_t v5 = *(unsigned __int16 *)(a1 + 80) >> 5;
  }

  return icu::UnicodeString::replace(v4, 0, v5, a2);
}

uint64_t icu::CollationIterator::appendNumericSegmentCEs(uint64_t this, const char *a2, int a3, UErrorCode *a4)
{
  uint64_t v5 = this;
  unsigned int v6 = *(_DWORD *)(*(void *)(this + 16) + 56);
  if (a3 <= 7)
  {
    int v7 = *a2;
    if (a3 >= 2)
    {
      int v8 = a2 + 1;
      uint64_t v9 = a3 - 1;
      do
      {
        int v10 = *v8++;
        int v7 = v10 + 10 * v7;
        --v9;
      }
      while (v9);
    }
    unsigned __int16 v11 = v7 - 74;
    if (v7 < 74)
    {
      uint64_t v12 = ((v7 << 16) + 0x20000) | v6;
LABEL_12:
      unsigned int v17 = (icu::CollationIterator::CEBuffer *)(this + 24);
      int v16 = *(_DWORD *)(this + 24);
      uint64_t v18 = (v12 << 32) | 0x5000500;
      goto LABEL_34;
    }
    if (v7 <= 0x27F9)
    {
      unsigned int v13 = ((v11 % 0xFEu) << 8) + 512;
      unsigned int v14 = (((v11 / 0xFEu) << 16) + 4980736) | v6;
LABEL_11:
      uint64_t v12 = v13 | v14;
      goto LABEL_12;
    }
    if (v7 <= 0xFE839)
    {
      unsigned int v15 = v7 - 10234;
      unsigned int v14 = ((v15 / 0xFE
                             + (((33027 * ((unsigned __int16)(v15 / 0xFE) >> 1)) >> 21) & 0xFE)) << 8)
          + 512;
      unsigned int v13 = (v15 % 0xFE + 2) | (((16 * ((1090717717 * (unint64_t)(v15 >> 2)) >> 32)) & 0xFFFF0000) + 7602176) | v6;
      goto LABEL_11;
    }
  }
  int v19 = a3 + 2;
  if (a3 >= -1) {
    int v19 = a3 + 1;
  }
  unsigned int v20 = v6 | (((v19 << 15) & 0xFFFF0000) + 0x800000);
  uint64_t v21 = &a2[a3 - 1];
  uint64_t v22 = v21;
  do
  {
    int v23 = a3;
    int v24 = *(unsigned __int8 *)v22;
    v22 -= 2;
    if (v24) {
      break;
    }
    int v25 = *((unsigned __int8 *)v21 - 1);
    a3 -= 2;
    uint64_t v21 = v22;
  }
  while (!v25);
  int v26 = *a2;
  if (v23)
  {
    int v27 = 1;
  }
  else
  {
    int v26 = a2[1] + 10 * v26;
    int v27 = 2;
  }
  int v28 = 2 * v26;
  if (v27 < v23)
  {
    unint64_t v29 = (int *)(this + 24);
    int v30 = 8;
    uint64_t v31 = v27;
    while (1)
    {
      int v32 = v28 + 11;
      if (!v30) {
        break;
      }
      v20 |= v32 << v30;
      v30 -= 8;
LABEL_30:
      int v34 = a2[v31 + 1] + 10 * a2[v31];
      v31 += 2;
      int v28 = 2 * v34;
      if ((int)v31 >= v23) {
        goto LABEL_33;
      }
    }
    int v33 = *v29;
    if (*v29 >= 40)
    {
      this = icu::CollationIterator::CEBuffer::ensureAppendCapacity((icu::CollationIterator::CEBuffer *)(v5 + 24), 1, a4);
      if (!this)
      {
LABEL_29:
        int v30 = 16;
        unsigned int v20 = v6;
        goto LABEL_30;
      }
      int v33 = *v29;
    }
    *(_DWORD *)(v5 + 24) = v33 + 1;
    *(void *)(*(void *)(v5 + 32) + 8 * v33) = ((unint64_t)(v32 | v20) << 32) | 0x5000500;
    goto LABEL_29;
  }
  LOBYTE(v30) = 8;
LABEL_33:
  uint64_t v35 = ((v28 + 10) << v30) | v20;
  unsigned int v17 = (icu::CollationIterator::CEBuffer *)(v5 + 24);
  int v16 = *(_DWORD *)(v5 + 24);
  uint64_t v18 = (v35 << 32) | 0x5000500;
LABEL_34:
  if (v16 >= 40)
  {
    this = icu::CollationIterator::CEBuffer::ensureAppendCapacity(v17, 1, a4);
    if (!this) {
      return this;
    }
    int v16 = *(_DWORD *)v17;
  }
  *(_DWORD *)(v5 + 24) = v16 + 1;
  *(void *)(*(void *)(v5 + 32) + 8 * v16) = v18;
  return this;
}

unint64_t icu::CollationIterator::previousCE(icu::CollationIterator *this, icu::UVector32 *a2, UErrorCode *a3)
{
  int v4 = *((_DWORD *)this + 6);
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5)
  {
    icu::UVector32::removeAllElements((uint64_t)a2);
    int v10 = (*(uint64_t (**)(icu::CollationIterator *))(*(void *)this + 40))(this);
    uint64_t v11 = (*(uint64_t (**)(icu::CollationIterator *, UErrorCode *))(*(void *)this + 56))(this, a3);
    if ((v11 & 0x80000000) != 0)
    {
      return 0x101000100;
    }
    else
    {
      uint64_t v12 = v11;
      if (sub_18C8EF6C8(*((void *)this + 2), v11, *((char *)this + 388)))
      {
        return icu::CollationIterator::previousCEUnsafe(this, v13, a2, a3);
      }
      else
      {
        uint64_t v14 = sub_18C8DD7F8(*((uint64_t **)this + 2), v12);
        unsigned int v15 = (uint64_t *)*((void *)this + 2);
        if (v14 == 192)
        {
          unsigned int v15 = (uint64_t *)v15[4];
          uint64_t v14 = sub_18C8DD7F8(v15, v12);
        }
        int v16 = v14 & 0xF;
        if ((~v14 & 0xC0) != 0 || (v14 & 0xF) - 3 >= 0xFFFFFFFE)
        {
          if (v14 > 0xBFu)
          {
            unint64_t result = v14 & 0xFFFFFF00;
            if (v16 == 1) {
              return (result << 32) | 0x5000500;
            }
          }
          else
          {
            return (v14 << 16) & 0xFF000000 | ((unint64_t)((v14 & 0xFFFF0000) >> 16) << 48) | (v14 << 8);
          }
        }
        else
        {
          icu::CollationIterator::appendCEsFromCE32(this, (const icu::CollationData *)v15, v12, v14, 0, a3);
          if (*(int *)a3 <= 0)
          {
            int v18 = *((_DWORD *)this + 6);
            if (v18 >= 2)
            {
              int v19 = (*(uint64_t (**)(icu::CollationIterator *))(*(void *)this + 40))(this);
              sub_18C7F5B30(a2, v19, a3);
              int v20 = *((_DWORD *)a2 + 2);
              while (1)
              {
                int v18 = *((_DWORD *)this + 6);
                if (v20 > v18) {
                  break;
                }
                if (v20 < -1 || *((_DWORD *)a2 + 3) <= v20)
                {
                  int v21 = icu::UVector32::expandCapacity(a2, v20 + 1, a3);
                  int v20 = *((_DWORD *)a2 + 2);
                  if (!v21) {
                    continue;
                  }
                }
                *(_DWORD *)(*((void *)a2 + 3) + 4 * v20) = v10;
                int v20 = *((_DWORD *)a2 + 2) + 1;
                *((_DWORD *)a2 + 2) = v20;
              }
            }
            *((_DWORD *)this + 6) = v18 - 1;
            return *(void *)(*((void *)this + 4) + 8 * (v18 - 1));
          }
          else
          {
            return 1;
          }
        }
      }
    }
  }
  else
  {
    *((_DWORD *)this + 6) = v6;
    return *(void *)(*((void *)this + 4) + 8 * v6);
  }
  return result;
}

uint64_t sub_18C8EF6C8(uint64_t a1, int a2, int a3)
{
  if (icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 80), a2)) {
    return 1;
  }
  if (!a3) {
    return 0;
  }
  if (a2 > 1631) {
    return (sub_18C8DD7F8((uint64_t *)a1, a2) & 0xCF) == 202;
  }
  return (a2 - 48) < 0xA;
}

uint64_t icu::CollationIterator::previousCEUnsafe(icu::CollationIterator *this, int a2, icu::UVector32 *a3, UErrorCode *a4)
{
  uint64_t v7 = 1;
  do
  {
    int v8 = (*(uint64_t (**)(icu::CollationIterator *, UErrorCode *))(*(void *)this + 56))(this, a4);
    if (v8 < 0) {
      break;
    }
    uint64_t v7 = (v7 + 1);
  }
  while (sub_18C8EF6C8(*((void *)this + 2), v8, *((char *)this + 388)));
  *((_DWORD *)this + 96) = v7;
  *((_DWORD *)this + 92) = 0;
  int v9 = (*(uint64_t (**)(icu::CollationIterator *))(*(void *)this + 40))(this);
  int v10 = *((_DWORD *)this + 96);
  if (v10 > 0)
  {
    while (1)
    {
      *((_DWORD *)this + 96) = v10 - 1;
      sub_18C8DCA60(this, a4);
      *((_DWORD *)this + 92) = *((_DWORD *)this + 6);
      int v11 = *((_DWORD *)a3 + 2);
      if (v11 < -1 || *((_DWORD *)a3 + 3) <= v11)
      {
        if (!icu::UVector32::expandCapacity(a3, v11 + 1, a4)) {
          goto LABEL_13;
        }
        int v11 = *((_DWORD *)a3 + 2);
      }
      *(_DWORD *)(*((void *)a3 + 3) + 4 * v11) = v9;
      ++*((_DWORD *)a3 + 2);
LABEL_13:
      int v9 = (*(uint64_t (**)(icu::CollationIterator *))(*(void *)this + 40))(this);
      int v13 = *((_DWORD *)a3 + 2);
      while (v13 < *((_DWORD *)this + 6))
      {
        if (v13 < -1 || *((_DWORD *)a3 + 3) <= v13)
        {
          int v14 = icu::UVector32::expandCapacity(a3, v13 + 1, a4);
          int v13 = *((_DWORD *)a3 + 2);
          if (!v14) {
            continue;
          }
        }
        *(_DWORD *)(*((void *)a3 + 3) + 4 * v13) = v9;
        int v13 = *((_DWORD *)a3 + 2) + 1;
        *((_DWORD *)a3 + 2) = v13;
      }
      int v10 = *((_DWORD *)this + 96);
      if (v10 < 1) {
        goto LABEL_22;
      }
    }
  }
  int v13 = *((_DWORD *)a3 + 2);
LABEL_22:
  if (v13 < -1 || *((_DWORD *)a3 + 3) <= v13)
  {
    if (!icu::UVector32::expandCapacity(a3, v13 + 1, a4)) {
      goto LABEL_27;
    }
    int v13 = *((_DWORD *)a3 + 2);
  }
  *(_DWORD *)(*((void *)a3 + 3) + 4 * v13) = v9;
  ++*((_DWORD *)a3 + 2);
LABEL_27:
  *((_DWORD *)this + 96) = -1;
  (*(void (**)(icu::CollationIterator *, uint64_t, UErrorCode *))(*(void *)this + 104))(this, v7, a4);
  *((_DWORD *)this + 92) = 0;
  if (*(int *)a4 > 0) {
    return 1;
  }
  uint64_t v16 = *((int *)this + 6) - 1;
  *((_DWORD *)this + 6) = v16;
  return *(void *)(*((void *)this + 4) + 8 * v16);
}

_DWORD *sub_18C8EF9A4(_DWORD *result, char *a2, size_t __n)
{
  if (a2 && (int)__n >= 1)
  {
    uint64_t v3 = result[6];
    if ((int)v3 >= 1)
    {
      result[6] = (v3 - __n) & ~(((int)v3 - (int)__n) >> 31);
      if (((v3 - __n) & 0x80000000) == 0) {
        return result;
      }
      a2 += v3;
      LODWORD(__n) = __n - v3;
    }
    uint64_t v4 = (int)result[5];
    result[5] = v4 + __n;
    if ((char *)(*((void *)result + 1) + v4) != a2)
    {
      if ((int)__n <= result[4] - (int)v4) {
        return memcpy((void *)(*((void *)result + 1) + v4), a2, __n);
      }
      else {
        return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 40))();
      }
    }
  }
  return result;
}

uint64_t sub_18C8EFA34(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  if (a2 < 1 || a5 < a2)
  {
    a4 = 0;
    *a6 = 0;
    return a4;
  }
  if (*(int *)(a1 + 24) < 1)
  {
    int v10 = *(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 20);
    if (v10 >= a2)
    {
      *a6 = v10;
    }
    else
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)a1 + 48))(a1, a3, *(unsigned int *)(a1 + 20)))goto LABEL_4; {
      *a6 = *(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 20);
      }
    }
    return *(void *)(a1 + 8) + *(int *)(a1 + 20);
  }
LABEL_4:
  *a6 = a5;
  return a4;
}

uint64_t icu::CollationKeys::LevelCallback::needToWrite()
{
  return 1;
}

void icu::CollationKeys::writeSortKeyUpToQuaternary(icu::CollationIterator::CEBuffer *this, uint64_t a2, uint64_t a3, _DWORD *a4, char a5, uint64_t a6, int a7, UErrorCode *a8)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  if (*(int *)a8 > 0) {
    return;
  }
  int v9 = *(_DWORD *)(a3 + 24);
  int v10 = (v9 >> 7) & 8 | dword_18CA8F050[v9 >> 12];
  char v11 = v10 & (-1 << a5);
  if ((v10 & (-1 << a5)) == 0) {
    return;
  }
  unsigned int v121 = 0;
  int v118 = 0;
  int v116 = 0;
  int v14 = 0;
  int v15 = 0;
  int v16 = *(_DWORD *)(a3 + 28);
  memset(&v131[1], 0, 48);
  uint64_t v132 = 0;
  int v106 = v9 & 0xC;
  int v107 = 0;
  LODWORD(v131[1]) = 40;
  if ((v9 & 0xC) != 0) {
    unsigned int v17 = v16 + 1;
  }
  else {
    unsigned int v17 = 0;
  }
  unsigned int v109 = v9;
  LODWORD(v132) = 0;
  unsigned int v104 = 0;
  int v105 = v9 & 0x600;
  BYTE4(v132) = 1;
  v129[0] = 0uLL;
  if (v105 == 512) {
    int v18 = 65343;
  }
  else {
    int v18 = 16191;
  }
  int v108 = v18;
  uint64_t v130 = 0x100000000;
  v131[0] = (char *)&v131[1] + 5;
  memset(&v129[1], 0, 32);
  v128 = (char *)v129 + 5;
  LODWORD(v129[0]) = 40;
  memset(&v126[1], 0, 48);
  uint64_t v127 = 0x100000000;
  uint64_t v125 = 0x100000000;
  v126[0] = (char *)&v126[1] + 5;
  LODWORD(v126[1]) = 40;
  memset(&v124[1], 0, 48);
  v124[0] = (char *)&v124[1] + 5;
  LODWORD(v124[1]) = 40;
  do
  {
    int v117 = v15;
    do
    {
      if (*((_DWORD *)this + 92) == *((_DWORD *)this + 6))
      {
        *((_DWORD *)this + 6) = 0;
        *((_DWORD *)this + 92) = 0;
      }
      unint64_t v19 = sub_18C8DCA60(this, a8);
      uint64_t v20 = HIDWORD(v19);
      if (v17 > HIDWORD(v19) && HIDWORD(v19) >= 0x2000001)
      {
        if (v14)
        {
          if (v14 < 114)
          {
            char v22 = v14 - 1;
          }
          else
          {
            unsigned int v21 = v14 + 112;
            do
            {
              sub_18C8F0888((uint64_t)v124, 140);
              v21 -= 113;
            }
            while (v21 > 0xE1);
            char v22 = v21 - 113;
          }
          sub_18C8F0888((uint64_t)v124, v22 + 28);
        }
        while (1)
        {
          if ((v11 & 0x20) != 0)
          {
            uint64_t v23 = *(void *)(a3 + 32);
            if (v23)
            {
              int v24 = *(unsigned __int8 *)(v23 + ((unint64_t)v20 >> 24));
              if (v24) {
                LODWORD(v20) = v20 & 0xFFFFFF | (v24 << 24);
              }
              else {
                LODWORD(v20) = icu::CollationSettings::reorderEx((icu::CollationSettings *)a3, v20);
              }
            }
            if (BYTE3(v20) >= 0x1Bu) {
              sub_18C8F0888((uint64_t)v124, 27);
            }
            if ((_BYTE)v20) {
              int v25 = 4;
            }
            else {
              int v25 = 3;
            }
            if ((v20 & 0xFF00) == 0) {
              int v25 = 2;
            }
            if ((v20 & 0xFF0000) != 0) {
              int v26 = v25;
            }
            else {
              int v26 = 1;
            }
            int v27 = v125;
            if ((int)v125 + v26 <= SLODWORD(v124[1])) {
              goto LABEL_41;
            }
            if (sub_18C8F09F4((uint64_t)v124, v26)) {
              break;
            }
          }
          do
          {
LABEL_45:
            unint64_t v31 = sub_18C8DCA60(this, a8);
            uint64_t v20 = HIDWORD(v31);
          }
          while (!HIDWORD(v31));
          LODWORD(v19) = v31;
          int v14 = 0;
          if (v17 <= HIDWORD(v31) || HIDWORD(v31) <= 0x2000000) {
            goto LABEL_48;
          }
        }
        int v27 = v125;
LABEL_41:
        LODWORD(v125) = v27 + 1;
        *((unsigned char *)v124[0] + v27) = BYTE3(v20);
        if ((v20 & 0xFF0000) != 0)
        {
          uint64_t v28 = (int)v125;
          LODWORD(v125) = v125 + 1;
          *((unsigned char *)v124[0] + v28) = BYTE2(v20);
          if ((v20 & 0xFF00) != 0)
          {
            uint64_t v29 = (int)v125;
            LODWORD(v125) = v125 + 1;
            *((unsigned char *)v124[0] + v29) = BYTE1(v20);
            if ((_BYTE)v20)
            {
              uint64_t v30 = (int)v125;
              LODWORD(v125) = v125 + 1;
              *((unsigned char *)v124[0] + v30) = v20;
            }
          }
        }
        goto LABEL_45;
      }
LABEL_48:
      if ((v11 & 2) != 0 && v20 >= 2)
      {
        unint64_t v32 = (unint64_t)v20 >> 24;
        int v33 = *(unsigned __int8 *)(a2 + v32);
        uint64_t v34 = *(void *)(a3 + 32);
        if (v34)
        {
          int v35 = *(unsigned __int8 *)(v34 + v32);
          if (v35) {
            LODWORD(v20) = v20 & 0xFFFFFF | (v35 << 24);
          }
          else {
            LODWORD(v20) = icu::CollationSettings::reorderEx((icu::CollationSettings *)a3, v20);
          }
        }
        unsigned int v36 = BYTE3(v20);
        if (v33) {
          BOOL v37 = v36 == HIBYTE(v121);
        }
        else {
          BOOL v37 = 0;
        }
        if (v37)
        {
LABEL_68:
          if ((v20 & 0xFF0000) != 0)
          {
            v123[0] = BYTE2(v20);
            v123[1] = BYTE1(v20);
            v123[2] = v20;
            if ((_BYTE)v20) {
              unsigned int v40 = 3;
            }
            else {
              unsigned int v40 = 2;
            }
            if (BYTE1(v20)) {
              uint64_t v41 = v40;
            }
            else {
              uint64_t v41 = 1;
            }
            (*(void (**)(_DWORD *, unsigned char *, uint64_t))(*(void *)a4 + 16))(a4, v123, v41);
          }
          if (!a7 && a4[5] > a4[4])
          {
            if (*(int *)a8 <= 0) {
              goto LABEL_246;
            }
            goto LABEL_248;
          }
          continue;
        }
        if (v121)
        {
          if (v20 >= v121)
          {
            char v38 = -1;
            goto LABEL_63;
          }
          if (v36 >= 3)
          {
            char v38 = 3;
LABEL_63:
            sub_18C8F08E0(a4, v38);
          }
        }
        sub_18C8F08E0(a4, SBYTE3(v20));
        if (v33) {
          unsigned int v39 = v20;
        }
        else {
          unsigned int v39 = 0;
        }
        unsigned int v121 = v39;
        goto LABEL_68;
      }
    }
    while (!v19);
    unsigned int v42 = BYTE3(v19);
    if ((v11 & 4) == 0) {
      goto LABEL_80;
    }
    int v43 = v118;
    if (v19 < 0x10000)
    {
LABEL_92:
      if ((v11 & 8) == 0) {
        goto LABEL_164;
      }
      goto LABEL_93;
    }
    unsigned int v44 = WORD1(v19);
    BOOL v46 = (v109 & 0x800) == 0 || v20 != 0x2000000;
    if (v44 == 1280 && v46)
    {
      ++v107;
      goto LABEL_92;
    }
    if ((v109 & 0x800) == 0)
    {
      if (v107)
      {
        if (v107 < 34)
        {
          char v51 = v107 - 1;
        }
        else
        {
          unsigned int v50 = v107 + 32;
          do
          {
            sub_18C8F0888((uint64_t)&v128, 37);
            v50 -= 33;
          }
          while (v50 > 0x41);
          char v51 = v50 - 33;
          unsigned int v42 = BYTE3(v19);
        }
        char v66 = v51 + 5;
        char v67 = 69 - v51;
        if (v42 >= 5) {
          char v68 = v67;
        }
        else {
          char v68 = v66;
        }
        sub_18C8F0888((uint64_t)&v128, v68);
        LOWORD(v44) = WORD1(v19);
      }
      sub_18C8F096C((uint64_t)&v128, v44);
      int v107 = 0;
      goto LABEL_80;
    }
    if (v107)
    {
      int v54 = (v107 - 1) % 33;
      if (v104 >= 0x500) {
        char v55 = 69 - v54;
      }
      else {
        char v55 = v54 + 5;
      }
      sub_18C8F0888((uint64_t)&v128, v55);
      int v56 = 33 * ((v107 - 1) / 33);
      if (v56 >= 1)
      {
        unsigned int v57 = v107 - v54 + 32;
        do
        {
          sub_18C8F0888((uint64_t)&v128, 37);
          v57 -= 33;
          int v56 = v57 - 33;
        }
        while (v57 > 0x21);
      }
      int v107 = v56;
      unsigned int v44 = WORD1(v19);
    }
    else
    {
      int v107 = 0;
    }
    if ((v20 - 1) >> 25)
    {
      if ((v19 & 0xFF0000) != 0) {
        int v62 = 2;
      }
      else {
        int v62 = 1;
      }
      int v63 = v130;
      if ((int)v130 + v62 <= SLODWORD(v129[0]))
      {
LABEL_143:
        if ((v19 & 0xFF0000) != 0)
        {
          v128[v63] = v44;
          v128[(int)v130 + 1] = BYTE3(v19);
          LODWORD(v130) = v130 + 2;
        }
        else
        {
          LODWORD(v130) = v63 + 1;
          v128[v63] = BYTE3(v19);
        }
        unsigned int v104 = v44;
      }
      else
      {
        unsigned int v102 = v44;
        if (sub_18C8F09F4((uint64_t)&v128, v62))
        {
          int v63 = v130;
          unsigned int v44 = v102;
          goto LABEL_143;
        }
        unsigned int v104 = v102;
      }
      int v43 = v118;
      unsigned int v42 = BYTE3(v19);
      if ((v11 & 8) == 0) {
        goto LABEL_164;
      }
LABEL_93:
      if (v109 > 0xFFF)
      {
        if (v19 < 0x10000) {
          goto LABEL_164;
        }
      }
      else if (!v20)
      {
        goto LABEL_164;
      }
      char v47 = BYTE1(v19);
      if ((v19 & 0xC000) == 0 && BYTE1(v19) >= 2u)
      {
        ++v43;
        goto LABEL_164;
      }
      if ((v109 & 0x100) != 0)
      {
        if (v43)
        {
          if (v43 < 14)
          {
            char v53 = v43 - 1;
          }
          else
          {
            unsigned int v111 = v42;
            unsigned int v52 = v43 + 12;
            do
            {
              sub_18C8F0888((uint64_t)v131, 48);
              v52 -= 13;
            }
            while (v52 > 0x19);
            char v53 = v52 - 13;
            unsigned int v42 = v111;
          }
          sub_18C8F0888((uint64_t)v131, 16 * v53 + 48);
        }
        BOOL v64 = BYTE1(v19) >= 2u;
        unsigned int v65 = ~(v19 >> 10) & 0x30;
      }
      else
      {
        if (v43)
        {
          if (BYTE1(v19) <= 1u && !v132)
          {
LABEL_163:
            sub_18C8F0888((uint64_t)v131, v47);
            int v43 = v118;
            goto LABEL_164;
          }
          if (v43 < 8)
          {
            char v49 = v43 - 1;
          }
          else
          {
            unsigned int v110 = v42;
            unsigned int v48 = v43 + 6;
            do
            {
              sub_18C8F0888((uint64_t)v131, 112);
              v48 -= 7;
            }
            while (v48 > 0xD);
            char v49 = v48 - 7;
            unsigned int v42 = v110;
          }
          if (BYTE1(v19) < 2u) {
            char v69 = v49 + 1;
          }
          else {
            char v69 = 13 - v49;
          }
          sub_18C8F0888((uint64_t)v131, 16 * v69);
        }
        BOOL v64 = BYTE1(v19) >= 2u;
        unsigned int v65 = ((v19 >> 10) & 0x30) + 208;
      }
      int v118 = 0;
      if (v64) {
        char v47 = v65;
      }
      goto LABEL_163;
    }
    unsigned int v42 = BYTE3(v19);
    if (v117 < (int)v130 - 1)
    {
      unint64_t v58 = &v128[v117];
      unint64_t v59 = &v128[(int)v130 - 2];
      do
      {
        char v60 = *v58;
        *v58++ = v59[1];
        v59[1] = v60;
        BOOL v64 = v58 >= v59--;
      }
      while (!v64);
    }
    if (v20 == 1) {
      char v61 = 1;
    }
    else {
      char v61 = 2;
    }
    sub_18C8F0888((uint64_t)&v128, v61);
    unsigned int v104 = 0;
    int v117 = v130;
LABEL_80:
    int v43 = v118;
    if ((v11 & 8) != 0) {
      goto LABEL_93;
    }
LABEL_164:
    int v118 = v43;
    if ((v11 & 0x10) == 0)
    {
      int v70 = v116;
      int v15 = v117;
      goto LABEL_215;
    }
    unsigned int v71 = v108 & v19;
    int v72 = v116;
    if ((v108 & v19) != 0x500)
    {
      if (v105 == 512)
      {
        if ((v109 & 0x100) == 0)
        {
          if (v116)
          {
            if (v116 < 34)
            {
              char v74 = v116 - 1;
            }
            else
            {
              unsigned int v112 = v42;
              unsigned int v73 = v116 + 32;
              do
              {
                sub_18C8F0888((uint64_t)v126, 37);
                v73 -= 33;
              }
              while (v73 > 0x41);
              char v74 = v73 - 33;
              unsigned int v42 = v112;
            }
            char v81 = v74 + 5;
            char v82 = 69 - v74;
            if (v71 >= 0x500) {
              char v83 = v82;
            }
            else {
              char v83 = v81;
            }
            sub_18C8F0888((uint64_t)v126, v83);
          }
          __int16 v80 = v71 + 0x4000;
          goto LABEL_198;
        }
        if (v71 >= 0x101)
        {
          if (v19 < 0x10000)
          {
            v71 += 0x4000;
          }
          else
          {
            if ((v71 ^ 0xC000) >> 8 >= 0xC5) {
              v71 ^= 0xC000u;
            }
            else {
              unsigned int v71 = (v71 ^ 0xC000) - 0x4000;
            }
            int v72 = v116;
          }
        }
        if (v72)
        {
          if (v72 < 34)
          {
            char v86 = v72 - 1;
          }
          else
          {
            unsigned int v114 = v42;
            unsigned int v85 = v72 + 32;
            do
            {
              sub_18C8F0888((uint64_t)v126, 165);
              v85 -= 33;
            }
            while (v85 > 0x41);
            char v86 = v85 - 33;
            unsigned int v42 = v114;
          }
          char v87 = v86 - 123;
          char v88 = -59 - v86;
          if (v71 >> 8 >= 0x85) {
            char v89 = v88;
          }
          else {
            char v89 = v87;
          }
          sub_18C8F0888((uint64_t)v126, v89);
        }
        __int16 v84 = v71;
      }
      else
      {
        if (v116)
        {
          if (v116 < 98)
          {
            char v76 = v116 - 1;
          }
          else
          {
            unsigned int v113 = v42;
            unsigned int v75 = v116 + 96;
            do
            {
              sub_18C8F0888((uint64_t)v126, 101);
              v75 -= 97;
            }
            while (v75 > 0xC1);
            char v76 = v75 - 97;
            unsigned int v42 = v113;
          }
          char v77 = v76 + 5;
          char v78 = -59 - v76;
          if (v71 >= 0x500) {
            char v79 = v78;
          }
          else {
            char v79 = v77;
          }
          sub_18C8F0888((uint64_t)v126, v79);
        }
        __int16 v80 = v71 - 0x4000;
LABEL_198:
        if (v71 <= 0x500) {
          __int16 v84 = v108 & v19;
        }
        else {
          __int16 v84 = v80;
        }
      }
      sub_18C8F096C((uint64_t)v126, v84);
      int v70 = 0;
      goto LABEL_214;
    }
    int v70 = v116 + 1;
LABEL_214:
    int v15 = v117;
LABEL_215:
    int v116 = v70;
    if ((v11 & 0x20) != 0)
    {
      unsigned int v115 = v42;
      int v90 = (unsigned __int16)v19;
      if ((v19 & 0xC0) != 0 || (unsigned __int16)v19 < 0x101u)
      {
        if (v106 || (unsigned __int16)v19 != 256 || v125)
        {
          if ((unsigned __int16)v19 == 256) {
            char v91 = 1;
          }
          else {
            char v91 = (v19 >> 6) | 0xFC;
          }
          if (v14)
          {
            if (v14 < 114)
            {
              char v93 = v14 - 1;
            }
            else
            {
              unsigned int v92 = v14 + 112;
              do
              {
                sub_18C8F0888((uint64_t)v124, 140);
                v92 -= 113;
              }
              while (v92 > 0xE1);
              char v93 = v92 - 113;
            }
            char v94 = v93 + 28;
            char v95 = -4 - v93;
            if (v90 == 256) {
              char v96 = v94;
            }
            else {
              char v96 = v95;
            }
            sub_18C8F0888((uint64_t)v124, v96);
          }
          sub_18C8F0888((uint64_t)v124, v91);
          int v14 = 0;
        }
        else
        {
          sub_18C8F0888((uint64_t)v124, 1);
        }
      }
      else
      {
        ++v14;
      }
      unsigned int v42 = v115;
    }
  }
  while (v42 != 1);
  if (*(int *)a8 > 0) {
    goto LABEL_248;
  }
  if ((v11 & 4) != 0)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a6 + 16))(a6, 2)) {
      goto LABEL_248;
    }
    int v97 = BYTE4(v130) & 1;
    sub_18C8F08E0(a4, 1);
    (*(void (**)(_DWORD *, unsigned char *, void))(*(void *)a4 + 16))(a4, v128, (v130 - 1));
  }
  else
  {
    int v97 = 1;
  }
  if ((v11 & 8) != 0)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a6 + 16))(a6, 3)) {
      goto LABEL_248;
    }
    int v97 = (BYTE4(v132) & v97);
    sub_18C8F08E0(a4, 1);
    if ((int)v132 >= 2)
    {
      uint64_t v98 = 0;
      int v99 = 0;
      uint64_t v100 = (v132 - 1);
      do
      {
        int v101 = *((unsigned __int8 *)v131[0] + v98);
        if (v99)
        {
          sub_18C8F08E0(a4, v99 | (*((unsigned char *)v131[0] + v98) >> 4));
          int v101 = 0;
        }
        ++v98;
        int v99 = v101;
      }
      while (v100 != v98);
      if (v101) {
        sub_18C8F08E0(a4, v101);
      }
    }
  }
  if ((v11 & 0x10) != 0)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a6 + 16))(a6, 4)) {
      goto LABEL_248;
    }
    int v97 = (BYTE4(v127) & v97);
    sub_18C8F08E0(a4, 1);
    (*(void (**)(_DWORD *, void *, void))(*(void *)a4 + 16))(a4, v126[0], (v127 - 1));
  }
  if ((v11 & 0x20) != 0)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a6 + 16))(a6, 5)) {
      goto LABEL_248;
    }
    int v97 = (BYTE4(v125) & v97);
    sub_18C8F08E0(a4, 1);
    (*(void (**)(_DWORD *, void *, void))(*(void *)a4 + 16))(a4, v124[0], (v125 - 1));
  }
  if (v97)
  {
LABEL_246:
    if (*((void *)a4 + 1)) {
      goto LABEL_248;
    }
  }
  *a8 = U_MEMORY_ALLOCATION_ERROR;
LABEL_248:
  if (BYTE4(v124[1])) {
    uprv_free(v124[0]);
  }
  if (BYTE4(v126[1])) {
    uprv_free(v126[0]);
  }
  if (BYTE4(v129[0])) {
    uprv_free(v128);
  }
  if (BYTE4(v131[1])) {
    uprv_free(v131[0]);
  }
}

uint64_t sub_18C8F0888(uint64_t result, char a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 56);
  if (v4 >= *(_DWORD *)(result + 8))
  {
    unint64_t result = sub_18C8F09F4(result, 1);
    if (!result) {
      return result;
    }
    int v4 = *(_DWORD *)(v3 + 56);
  }
  *(_DWORD *)(v3 + 56) = v4 + 1;
  *(unsigned char *)(*(void *)v3 + v4) = a2;
  return result;
}

_DWORD *sub_18C8F08E0(_DWORD *result, char a2)
{
  uint64_t v2 = result;
  int v3 = result[6];
  BOOL v4 = __OFSUB__(v3, 1);
  int v5 = v3 - 1;
  if (v5 < 0 == v4)
  {
    result[6] = v5;
    return result;
  }
  int v7 = result[5];
  if (v7 < result[4]) {
    goto LABEL_6;
  }
  unint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)result + 48))(result, 1);
  if (result)
  {
    int v7 = v2[5];
LABEL_6:
    *(unsigned char *)(*((void *)v2 + 1) + v7) = a2;
  }
  ++v2[5];
  return result;
}

uint64_t sub_18C8F096C(uint64_t result, __int16 a2)
{
  uint64_t v3 = result;
  int v4 = a2;
  if ((_BYTE)a2) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  int v6 = *(_DWORD *)(result + 56);
  if (v6 + v5 > *(_DWORD *)(result + 8))
  {
    unint64_t result = sub_18C8F09F4(result, v5);
    if (!result) {
      return result;
    }
    int v6 = *(_DWORD *)(v3 + 56);
  }
  *(_DWORD *)(v3 + 56) = v6 + 1;
  *(unsigned char *)(*(void *)v3 + v6) = HIBYTE(a2);
  if (v4)
  {
    uint64_t v7 = *(int *)(v3 + 56);
    *(_DWORD *)(v3 + 56) = v7 + 1;
    *(unsigned char *)(*(void *)v3 + v7) = a2;
  }
  return result;
}

uint64_t sub_18C8F09F4(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 60)) {
    return 0;
  }
  int v3 = 2 * *(_DWORD *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 56);
  if (v3 <= v4 + 2 * a2) {
    int v3 = v4 + 2 * a2;
  }
  if (v3 <= 200) {
    size_t v5 = 200;
  }
  else {
    size_t v5 = v3;
  }
  uint64_t result = (uint64_t)uprv_malloc(v5);
  if (result)
  {
    uint64_t v7 = result;
    if (v4 >= 1)
    {
      int v8 = *(_DWORD *)(a1 + 8);
      if (v8 >= v4) {
        int v8 = v4;
      }
      if (v8 >= (int)v5) {
        int v8 = v5;
      }
      memcpy((void *)result, *(const void **)a1, v8);
    }
    if (*(unsigned char *)(a1 + 12)) {
      uprv_free(*(void **)a1);
    }
    *(void *)a1 = v7;
    *(_DWORD *)(a1 + 8) = v5;
    uint64_t result = 1;
    *(unsigned char *)(a1 + 12) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 60) = 0;
  }
  return result;
}

void *icu::CollationRoot::loadFromFile(icu::CollationRoot *this, char *a2, UErrorCode *a3)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t v8 = 0;
  long long v7 = 0u;
  memset(v6, 0, sizeof(v6));
  if (!uprv_mapFile(v6, (const char *)this, (int *)a2))
  {
    uint64_t result = 0;
    int v5 = 2;
    goto LABEL_10;
  }
  if (__PAIR64__(*(unsigned __int8 *)(*((void *)&v6[0] + 1) + 3), *(unsigned __int8 *)(*((void *)&v6[0] + 1) + 2)) != 0x27000000DALL|| !icu::CollationDataReader::isAcceptable(0, (uint64_t)"icu", (uint64_t)"ucadata", (unsigned __int16 *)(*((void *)&v6[0] + 1) + 4)))
  {
    uint64_t result = 0;
    int v5 = 3;
LABEL_10:
    *(_DWORD *)a2 = v5;
    return result;
  }
  uint64_t result = UDataMemory_createNewInstance((int *)a2);
  if (*(int *)a2 > 0) {
    return 0;
  }
  result[1] = *((void *)&v6[0] + 1);
  *((_OWORD *)result + 2) = v7;
  return result;
}

icu::CollationTailoring *icu::CollationRoot::load(icu::CollationTailoring *this, char *a2, UErrorCode *a3)
{
  int v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 <= 0)
  {
    int v5 = this;
    this = (icu::CollationTailoring *)icu::UMemory::operator new(v3, (icu::UMemory *)0x190, (unint64_t)a2);
    if (!this)
    {
      *(_DWORD *)a2 = 7;
      return this;
    }
    int v6 = (uint64_t *)this;
    if (*(void *)(icu::CollationTailoring::CollationTailoring(this, 0) + 32))
    {
      if (v5) {
        uint64_t v8 = icu::CollationRoot::loadFromFile(v5, a2, v7);
      }
      else {
        uint64_t v8 = udata_openChoice("icudt74l-coll", "icu", "ucadata", (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))icu::CollationDataReader::isAcceptable, (uint64_t)(v6 + 41), (UErrorCode *)a2);
      }
      v6[44] = (uint64_t)v8;
      if (*(int *)a2 <= 0)
      {
        Memory = (const icu::CollationTailoring *)udata_getMemory((uint64_t)v8);
        Length = (const unsigned __int8 *)udata_getLength(v6[44]);
        icu::CollationDataReader::read(0, Memory, Length, (uint64_t)v6, (UErrorCode *)a2, v11);
        if (*(int *)a2 <= 0)
        {
          sub_18CA0A25C(0x1Eu, (uint64_t)sub_18C8F0D1C);
          int v15 = (icu::Locale *)icu::UMemory::operator new(v14, (icu::UMemory *)0x100, v13);
          if (v15)
          {
            int v16 = v15;
            uint64_t Root = icu::Locale::getRoot(v15);
            int v18 = sub_18C8F0F00(v16, Root, (uint64_t)v6);
            this = (icu::CollationTailoring *)icu::SharedObject::addRef((uint64_t)v18);
            qword_1EB20B6F0 = (uint64_t)v16;
            return this;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a2 = 7;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t *))(*v6 + 8);
    return (icu::CollationTailoring *)v12(v6);
  }
  return this;
}

uint64_t sub_18C8F0D1C()
{
  if (qword_1EB20B6F0)
  {
    icu::SharedObject::removeRef(qword_1EB20B6F0);
    qword_1EB20B6F0 = 0;
  }
  atomic_store(0, (unsigned int *)&unk_1EB20B6F8);
  return 1;
}

uint64_t icu::CollationRoot::getRootCacheEntry(icu::CollationRoot *this, UErrorCode *a2)
{
  if (*(int *)this >= 1) {
    return 0;
  }
  else {
    return qword_1EB20B6F0;
  }
}

uint64_t icu::CollationRoot::getRoot(icu::CollationRoot *this, UErrorCode *a2)
{
  sub_18C7EFEB0((unsigned int *)&unk_1EB20B6F8, (void (*)(uint64_t, int *))icu::CollationRoot::load, 0, (int *)this);
  uint64_t result = 0;
  if (*(int *)this <= 0) {
    return *(void *)(qword_1EB20B6F0 + 248);
  }
  return result;
}

uint64_t icu::CollationRoot::getData(icu::CollationRoot *this, UErrorCode *a2)
{
  sub_18C7EFEB0((unsigned int *)&unk_1EB20B6F8, (void (*)(uint64_t, int *))icu::CollationRoot::load, 0, (int *)this);
  uint64_t result = 0;
  if (*(int *)this <= 0) {
    return *(void *)(*(void *)(qword_1EB20B6F0 + 248) + 24);
  }
  return result;
}

uint64_t icu::CollationRoot::getSettings(icu::CollationRoot *this, UErrorCode *a2)
{
  sub_18C7EFEB0((unsigned int *)&unk_1EB20B6F8, (void (*)(uint64_t, int *))icu::CollationRoot::load, 0, (int *)this);
  uint64_t result = 0;
  if (*(int *)this <= 0) {
    return *(void *)(*(void *)(qword_1EB20B6F0 + 248) + 32);
  }
  return result;
}

void icu::CollationRoot::forceLoadFromFile(icu::CollationRoot *this, char *a2, UErrorCode *a3)
{
}

void *sub_18C8F0F00(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDA4A090;
  icu::Locale::Locale((icu::Locale *)(a1 + 3), a2);
  a1[31] = a3;
  if (a3) {
    icu::SharedObject::addRef(a3);
  }
  return a1;
}

unint64_t icu::CollationRootElements::lastCEWithPrimaryBefore(icu::CollationRootElements *this, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  int v4 = icu::CollationRootElements::findP(this, a2);
  uint64_t v5 = *(void *)this;
  uint64_t v6 = *(_DWORD *)(*(void *)this + 4 * v4) & 0xFFFFFF00;
  if (v6 == a2)
  {
    int v7 = *(_DWORD *)(v5 + 4 * v4 - 4);
    if ((v7 & 0x80) != 0)
    {
      uint64_t v12 = (int *)(v5 + 4 * (v4 - 2));
      do
      {
        int v14 = *v12--;
        int v13 = v14;
      }
      while ((v14 & 0x80) != 0);
      uint64_t v6 = v13 & 0xFFFFFF00;
    }
    else
    {
      uint64_t v6 = v7 & 0xFFFFFF00;
      int v7 = 83887360;
    }
  }
  else
  {
    int v9 = 83887360;
    int v10 = (int *)(v5 + 4 * v4 + 4);
    do
    {
      int v7 = v9;
      int v11 = *v10++;
      int v9 = v11;
    }
    while ((v11 & 0x80) != 0);
  }
  return v7 & 0xFFFFFF7F | (unint64_t)(v6 << 32);
}

uint64_t icu::CollationRootElements::findP(icu::CollationRootElements *this, unsigned int a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t result = *(unsigned int *)(*(void *)this + 8);
  int v5 = *((_DWORD *)this + 2) - 1;
  while ((int)result + 1 < v5)
  {
    if (v5 + (int)result < 0 != __OFADD__(v5, result)) {
      int v6 = v5 + result + 1;
    }
    else {
      int v6 = v5 + result;
    }
    LODWORD(v7) = v6 >> 1;
    int v8 = *(_DWORD *)(v3 + 4 * (v6 >> 1));
    if ((v8 & 0x80) != 0)
    {
      if (v7 + 1 == v5)
      {
LABEL_11:
        LODWORD(v7) = v7 - 1;
        if (v7 == result) {
          return result;
        }
        uint64_t v7 = (int)v7;
        while (1)
        {
          int v8 = *(_DWORD *)(v3 + 4 * v7);
          if ((v8 & 0x80) == 0) {
            break;
          }
          if (result == --v7) {
            return result;
          }
        }
      }
      else
      {
        uint64_t v9 = ((uint64_t)v6 >> 1) + 1;
        while (1)
        {
          int v8 = *(_DWORD *)(v3 + 4 * v9);
          if ((v8 & 0x80) == 0) {
            break;
          }
          if (v5 == ++v9) {
            goto LABEL_11;
          }
        }
        LODWORD(v7) = v9;
      }
    }
    unsigned int v10 = v8 & 0xFFFFFF00;
    if (v10 <= a2) {
      uint64_t result = v7;
    }
    else {
      uint64_t result = result;
    }
    if (v10 > a2) {
      int v5 = v7;
    }
  }
  return result;
}

uint64_t icu::CollationRootElements::firstCEWithPrimaryAtLeast(icu::CollationRootElements *this, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  int v4 = icu::CollationRootElements::findP(this, a2);
  if ((*(_DWORD *)(*(void *)this + 4 * v4) & 0xFFFFFF00) != v2)
  {
    int v5 = (unsigned int *)(*(void *)this + 4 * v4 + 4);
    do
    {
      unsigned int v6 = *v5++;
      uint64_t v2 = v6;
    }
    while ((v6 & 0x80) != 0);
  }
  return (v2 << 32) | 0x5000500;
}

uint64_t icu::CollationRootElements::getPrimaryBefore(icu::CollationRootElements *this, icu::Collation *a2, int a3)
{
  int v6 = icu::CollationRootElements::findP(this, a2);
  uint64_t v7 = *(void *)this;
  int v8 = *(_DWORD *)(*(void *)this + 4 * v6);
  if ((v8 & 0xFFFFFF00) == a2)
  {
    int v9 = *(_DWORD *)(*(void *)this + 4 * v6) & 0x7F;
    if ((v8 & 0x7F) == 0)
    {
      unsigned int v10 = (int *)(v7 + 4 * v6 - 4);
      do
      {
        int v12 = *v10--;
        int v11 = v12;
      }
      while ((v12 & 0x80) != 0);
      return v11 & 0xFFFFFF00;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(v7 + 4 * (v6 + 1)) & 0x7F;
  }
  if ((_WORD)a2)
  {
    return icu::Collation::decThreeBytePrimaryByOneStep(a2, a3, v9);
  }
  else
  {
    return icu::Collation::decTwoBytePrimaryByOneStep(a2, a3, v9);
  }
}

uint64_t icu::CollationRootElements::getSecondaryBefore(icu::CollationRootElements *this, unsigned int a2, unsigned int a3)
{
  if (a2)
  {
    LODWORD(v5) = icu::CollationRootElements::findP(this, a2) + 1;
    uint64_t v6 = *(void *)this;
    int v7 = *(_DWORD *)(*(void *)this + 4 * (int)v5);
    unsigned int v8 = v7 & 0xFFFFFF7F;
    if ((v7 & 0xFFFFFF7F) >= 0x5000500) {
      unsigned int v8 = 83887360;
    }
    if ((v7 & 0x80) != 0) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = 83887360;
    }
    uint64_t result = 256;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v6 = *(void *)this;
    uint64_t v5 = *(int *)(*(void *)this + 4);
    unsigned int v9 = *(_DWORD *)(*(void *)this + 4 * v5);
  }
  uint64_t v11 = HIWORD(v9);
  if (v11 < a3)
  {
    int v12 = (unsigned int *)(v6 + 4 * (int)v5);
    do
    {
      uint64_t result = v11;
      unsigned int v13 = *v12++;
      uint64_t v11 = HIWORD(v13);
    }
    while (v11 < a3);
  }
  return result;
}

uint64_t icu::CollationRootElements::getFirstSecTerForPrimary(icu::CollationRootElements *this, int a2)
{
  int v2 = *(_DWORD *)(*(void *)this + 4 * a2);
  unsigned int v3 = v2 & 0xFFFFFF7F;
  if ((v2 & 0xFFFFFF7F) >= 0x5000500) {
    unsigned int v3 = 83887360;
  }
  if ((v2 & 0x80) != 0) {
    return v3;
  }
  else {
    return 83887360;
  }
}

uint64_t icu::CollationRootElements::getTertiaryBefore(icu::CollationRootElements *this, unsigned int a2, int a3, int a4)
{
  if (a2)
  {
    LODWORD(v7) = icu::CollationRootElements::findP(this, a2) + 1;
    uint64_t v8 = *(void *)this;
    int v9 = *(_DWORD *)(*(void *)this + 4 * (int)v7);
    unsigned int v10 = v9 & 0xFFFFFF7F;
    if ((v9 & 0xFFFFFF7F) >= 0x5000500) {
      unsigned int v10 = 83887360;
    }
    if ((v9 & 0x80) == 0) {
      unsigned int v10 = 83887360;
    }
    unsigned __int16 v11 = 256;
  }
  else
  {
    uint64_t v8 = *(void *)this;
    unsigned __int16 v11 = (a3 != 0) << 8;
    uint64_t v7 = *(int *)(*(void *)this + 4 * (a3 != 0));
    unsigned int v10 = *(_DWORD *)(*(void *)this + 4 * v7) & 0xFFFFFF7F;
  }
  unsigned int v12 = a4 | (a3 << 16);
  if (v12 > v10)
  {
    unsigned int v13 = (int *)(v8 + 4 * (int)v7);
    do
    {
      if (a3 == HIWORD(v10)) {
        unsigned __int16 v11 = v10;
      }
      int v14 = *v13++;
      unsigned int v10 = v14 & 0xFFFFFF7F;
    }
    while (v12 > (v14 & 0xFFFFFF7F));
  }
  return v11;
}

uint64_t icu::CollationRootElements::getPrimaryAfter(icu::CollationRootElements *this, icu::Collation *a2, int a3, int a4)
{
  uint64_t v4 = *(void *)this;
  uint64_t result = *(unsigned int *)(*(void *)this + 4 * (a3 + 1));
  if ((result & 0x80) != 0)
  {
    uint64_t v7 = (unsigned int *)(v4 + 4 * a3 + 8);
    do
    {
      unsigned int v8 = *v7++;
      uint64_t result = v8;
    }
    while ((v8 & 0x80) != 0);
  }
  else
  {
    int v6 = result & 0x7F;
    if ((result & 0x7F) != 0)
    {
      if ((_WORD)a2) {
        return icu::Collation::incThreeBytePrimaryByOffset(a2, a4, v6);
      }
      else {
        return icu::Collation::incTwoBytePrimaryByOffset(a2, a4, v6);
      }
    }
  }
  return result;
}

uint64_t icu::CollationRootElements::getSecondaryAfter(icu::CollationRootElements *this, uint64_t a2, unsigned int a3)
{
  if (a2)
  {
    uint64_t v3 = *(void *)this;
    int v4 = *(_DWORD *)(*(void *)this + 4 * ((int)a2 + 1));
    unsigned int v5 = v4 & 0xFFFFFF7F;
    if ((v4 & 0xFFFFFF7F) >= 0x5000500) {
      unsigned int v5 = 83887360;
    }
    if ((v4 & 0x80) != 0) {
      unsigned int v6 = v5;
    }
    else {
      unsigned int v6 = 83887360;
    }
    uint64_t result = (*(_DWORD *)(v3 + 16) >> 8) & 0xFF00;
  }
  else
  {
    uint64_t v3 = *(void *)this;
    a2 = *(int *)(*(void *)this + 4);
    unsigned int v6 = *(_DWORD *)(*(void *)this + 4 * a2);
    uint64_t result = 0x10000;
  }
  for (int i = (unsigned int *)(v3 + 4 * (int)a2 + 4); ; ++i)
  {
    uint64_t v9 = HIWORD(v6);
    if (v9 > a3) {
      break;
    }
    unsigned int v10 = *i;
    unsigned int v6 = v10;
    if ((v10 & 0x80) == 0) {
      return result;
    }
  }
  return v9;
}

uint64_t icu::CollationRootElements::getTertiaryAfter(int **this, uint64_t a2, unsigned int a3, int a4)
{
  int v4 = *this;
  if (a2)
  {
    int v5 = v4[(int)a2 + 1];
    unsigned int v6 = v5 & 0xFFFFFF7F;
    if ((v5 & 0xFFFFFF7F) >= 0x5000500) {
      unsigned int v6 = 83887360;
    }
    if ((v5 & 0x80) != 0) {
      unsigned int v7 = v6;
    }
    else {
      unsigned int v7 = 83887360;
    }
    uint64_t result = v4[4] << 8;
  }
  else
  {
    if (a3)
    {
      uint64_t v9 = v4 + 1;
      uint64_t result = v4[4] << 8;
    }
    else
    {
      uint64_t result = 0x4000;
      uint64_t v9 = v4;
    }
    a2 = *v9;
    unsigned int v7 = v4[a2] & 0xFFFFFF7F;
  }
  unsigned int v10 = a4 | (a3 << 16);
  if (v7 > v10) {
    return (unsigned __int16)v7;
  }
  unsigned __int16 v11 = &v4[(int)a2 + 1];
  while (1)
  {
    unsigned int v13 = *v11++;
    unsigned int v12 = v13;
    if ((v13 & 0x80) == 0 || HIWORD(v12) > a3) {
      break;
    }
    unsigned int v7 = v12 & 0xFFFFFF7F;
    if (v7 > v10) {
      return (unsigned __int16)v7;
    }
  }
  return result;
}

icu::CollationRuleParser *icu::CollationRuleParser::CollationRuleParser(icu::CollationRuleParser *this, UErrorCode *a2, UErrorCode *a3)
{
  *(void *)this = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a3, a2);
  *((void *)this + 1) = icu::Normalizer2::getNFCInstance((icu::Normalizer2 *)a3, v6);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  return this;
}

{
  UErrorCode *v6;

  *(void *)this = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a3, a2);
  *((void *)this + 1) = icu::Normalizer2::getNFCInstance((icu::Normalizer2 *)a3, v6);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  return this;
}

void *icu::CollationRuleParser::parse(void *this, const icu::UnicodeString *a2, icu::CollationSettings *a3, UParseError *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    this[4] = a3;
    this[5] = a4;
    if (a4)
    {
      *(void *)&a4->line = 0xFFFFFFFF00000000;
      a4->preContext[0] = 0;
      a4->postContext[0] = 0;
    }
    this[6] = 0;
    return (void *)icu::CollationRuleParser::parse((uint64_t)this, a2, a5);
  }
  return this;
}

uint64_t icu::CollationRuleParser::parse(uint64_t this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    int v5 = 0;
    *(void *)(this + 16) = a2;
    *(_DWORD *)(this + 72) = 0;
    while (1)
    {
      unsigned int v6 = *((unsigned __int16 *)a2 + 4);
      if (*((__int16 *)a2 + 4) < 0)
      {
        int v7 = *((_DWORD *)a2 + 3);
        if (v5 >= v7) {
          return this;
        }
      }
      else
      {
        if (v5 >= (int)(v6 >> 5)) {
          return this;
        }
        int v7 = v6 >> 5;
      }
      if (v7 <= v5)
      {
        uint64_t v9 = 0xFFFFLL;
      }
      else
      {
        if ((v6 & 2) != 0) {
          unsigned int v8 = (char *)a2 + 10;
        }
        else {
          unsigned int v8 = (char *)*((void *)a2 + 3);
        }
        uint64_t v9 = *(unsigned __int16 *)&v8[2 * v5];
      }
      this = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v9);
      if (this)
      {
        int v5 = *(_DWORD *)(v4 + 72) + 1;
        *(_DWORD *)(v4 + 72) = v5;
        goto LABEL_32;
      }
      if ((int)v9 <= 37)
      {
        if (v9 == 33) {
          goto LABEL_26;
        }
        if (v9 != 35)
        {
LABEL_27:
          if (*(int *)a3 > 0) {
            return this;
          }
          *a3 = U_INVALID_FORMAT_ERROR;
          *(void *)(v4 + 48) = "expected a reset or setting or comment";
          if (!*(void *)(v4 + 40)) {
            return this;
          }
          this = (uint64_t)icu::CollationRuleParser::setErrorContext((char *)v4);
          goto LABEL_30;
        }
        this = icu::CollationRuleParser::skipComment((icu::CollationRuleParser *)v4, *(_DWORD *)(v4 + 72) + 1);
        *(_DWORD *)(v4 + 72) = this;
      }
      else
      {
        switch(v9)
        {
          case '[':
            this = (uint64_t)icu::CollationRuleParser::parseSetting((icu::CollationRuleParser *)v4, a3);
            break;
          case '@':
            this = icu::CollationSettings::setFlag(*(void *)(v4 + 32), 2048, 17, 0, (int *)a3);
LABEL_26:
            ++*(_DWORD *)(v4 + 72);
            break;
          case '&':
            this = icu::CollationRuleParser::parseRuleChain((icu::CollationRuleParser *)v4, a3);
            break;
          default:
            goto LABEL_27;
        }
      }
LABEL_30:
      if (*(int *)a3 > 0) {
        return this;
      }
      int v5 = *(_DWORD *)(v4 + 72);
LABEL_32:
      a2 = *(const icu::UnicodeString **)(v4 + 16);
    }
  }
  return this;
}

uint64_t icu::CollationRuleParser::parseRuleChain(icu::CollationRuleParser *this, UErrorCode *a2)
{
  int v4 = icu::CollationRuleParser::parseResetAndPosition(this, a2);
  uint64_t result = icu::CollationRuleParser::parseRelationOperator(this, a2);
  if (*(int *)a2 > 0) {
    return result;
  }
  int v6 = 1;
  while ((result & 0x80000000) == 0)
  {
    uint64_t v7 = result & 0xF;
    if (v4 <= 14)
    {
      if (v6)
      {
        if (v7 != v4)
        {
          *a2 = U_INVALID_FORMAT_ERROR;
          int v14 = "reset-before strength differs from its first relation";
          goto LABEL_30;
        }
      }
      else if ((int)v7 < v4)
      {
        *a2 = U_INVALID_FORMAT_ERROR;
        int v14 = "reset-before strength followed by a stronger relation";
        goto LABEL_30;
      }
    }
    int v13 = *((_DWORD *)this + 18) + (result >> 8);
    if ((result & 0x10) != 0) {
      uint64_t result = (uint64_t)icu::CollationRuleParser::parseStarredCharacters(this, v7, v13, a2);
    }
    else {
      uint64_t result = (uint64_t)icu::CollationRuleParser::parseRelationStrings(this, v7, v13, a2);
    }
    if (*(int *)a2 > 0) {
      return result;
    }
    int v6 = 0;
LABEL_25:
    uint64_t result = icu::CollationRuleParser::parseRelationOperator(this, a2);
    if (*(int *)a2 >= 1) {
      return result;
    }
  }
  uint64_t v8 = *((int *)this + 18);
  uint64_t v9 = *((void *)this + 2);
  unsigned int v10 = *(unsigned __int16 *)(v9 + 8);
  if (*(__int16 *)(v9 + 8) < 0)
  {
    int v11 = *(_DWORD *)(v9 + 12);
    if ((int)v8 >= v11) {
      goto LABEL_27;
    }
  }
  else
  {
    if ((int)v8 >= (int)(v10 >> 5)) {
      goto LABEL_27;
    }
    int v11 = v10 >> 5;
  }
  if (v11 > v8)
  {
    uint64_t v12 = (v10 & 2) != 0 ? v9 + 10 : *(void *)(v9 + 24);
    if (*(_WORD *)(v12 + 2 * v8) == 35)
    {
      *((_DWORD *)this + 18) = icu::CollationRuleParser::skipComment(this, (int)v8 + 1);
      goto LABEL_25;
    }
  }
LABEL_27:
  if (!v6) {
    return result;
  }
  *a2 = U_INVALID_FORMAT_ERROR;
  int v14 = "reset not followed by a relation";
LABEL_30:
  *((void *)this + 6) = v14;
  if (*((void *)this + 5))
  {
    return (uint64_t)icu::CollationRuleParser::setErrorContext((char *)this);
  }
  return result;
}

icu::CollationRuleParser *icu::CollationRuleParser::parseSetting(icu::CollationRuleParser *this, UErrorCode *a2)
{
  v172[5] = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 <= 0)
  {
    uint64_t v3 = (uint64_t)this;
    long long v171 = 0u;
    memset(v172, 0, 40);
    v170 = &unk_1EDA47700;
    LOWORD(v171) = 2;
    int v4 = *((_DWORD *)this + 18) + 1;
    int Words = icu::CollationRuleParser::readWords(this, v4, (icu::UnicodeString *)&v170);
    if (Words <= v4)
    {
      if (*(int *)a2 > 0) {
        goto LABEL_9;
      }
    }
    else if ((unsigned __int16)v171 > 0x1Fu || *(int *)a2 >= 1)
    {
      goto LABEL_9;
    }
    *a2 = U_INVALID_FORMAT_ERROR;
    *(void *)(v3 + 48) = "expected a setting/option at '['";
    if (*(void *)(v3 + 40)) {
      icu::CollationRuleParser::setErrorContext((char *)v3);
    }
LABEL_9:
    uint64_t v6 = *(void *)(v3 + 16);
    unsigned int v7 = *(unsigned __int16 *)(v6 + 8);
    unsigned int v8 = v7 >> 5;
    if (*(__int16 *)(v6 + 8) < 0) {
      unsigned int v9 = *(_DWORD *)(v6 + 12);
    }
    else {
      unsigned int v9 = v7 >> 5;
    }
    if (v9 > Words)
    {
      uint64_t v10 = (v7 & 2) != 0 ? v6 + 10 : *(void *)(v6 + 24);
      if (*(_WORD *)(v10 + 2 * Words) == 93)
      {
        int v11 = Words + 1;
        v144 = L"reorder";
        icu::UnicodeString::UnicodeString(&__src, 1, &v144);
        if ((SWORD4(__src) & 0x8000u) == 0) {
          int32_t v12 = WORD4(__src) >> 5;
        }
        else {
          int32_t v12 = HIDWORD(__src);
        }
        if (BYTE8(__src))
        {
          BOOL v24 = v171 & 1;
          goto LABEL_51;
        }
        int v13 = v12 & (v12 >> 31);
        if (v12 < 0)
        {
          int32_t v14 = 0;
        }
        else
        {
          int32_t v14 = v12 - v13;
          int32_t v15 = v12;
          if (v12 - v13 >= v12)
          {
LABEL_45:
            if (v171)
            {
              BOOL v24 = 0;
            }
            else
            {
              if ((BYTE8(__src) & 2) != 0) {
                int v25 = (char *)&__src + 10;
              }
              else {
                int v25 = (char *)*((void *)&v146 + 1);
              }
              BOOL v24 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v170, 0, v12, (uint64_t)v25, v13, v15);
            }
LABEL_51:
            if (!v24)
            {
              icu::UnicodeString::~UnicodeString((void *)v24, (icu::UnicodeString *)&__src);
              v120[9] = (uint64_t)v144;
              goto LABEL_66;
            }
            uint64_t v26 = (unsigned __int16)v171;
            if ((__int16)v171 < 0)
            {
              unsigned int v27 = DWORD1(v171);
              if (DWORD1(v171) != 7)
              {
LABEL_58:
                if (v27 < 8)
                {
                  int v28 = 0xFFFF;
                }
                else
                {
                  if ((v171 & 2) != 0) {
                    uint64_t v26 = (uint64_t)v172;
                  }
                  else {
                    uint64_t v26 = v172[0] + 14;
                  }
                  int v28 = *(unsigned __int16 *)v26;
                }
                icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)&__src);
                v120[11] = (uint64_t)v144;
                if (v28 == 32) {
                  goto LABEL_65;
                }
LABEL_66:
                v143 = L"backwards 2";
                icu::UnicodeString::UnicodeString(&__src, 1, &v143);
                if (v171)
                {
                  unint64_t v32 = (void *)WORD4(__src);
                  int v33 = BYTE8(__src) & 1;
                }
                else
                {
                  if ((v171 & 0x8000u) == 0) {
                    int v30 = (unsigned __int16)v171 >> 5;
                  }
                  else {
                    int v30 = DWORD1(v171);
                  }
                  if ((SWORD4(__src) & 0x8000u) == 0) {
                    unint64_t v31 = (void *)(WORD4(__src) >> 5);
                  }
                  else {
                    unint64_t v31 = (void *)HIDWORD(__src);
                  }
                  if ((BYTE8(__src) & 1) != 0 || v30 != v31)
                  {
                    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&__src);
                    v120[8] = (uint64_t)v143;
                    goto LABEL_84;
                  }
                  int v33 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v170, (const icu::UnicodeString *)&__src, v30);
                }
                icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&__src);
                v120[7] = (uint64_t)v143;
                if (v33)
                {
                  icu::CollationSettings::setFlag(*(void *)(v3 + 32), 2048, 17, 0, (int *)a2);
                  goto LABEL_79;
                }
LABEL_84:
                long long v166 = 0u;
                uint64_t v169 = 0;
                long long v168 = 0u;
                long long v167 = 0u;
                v165 = &unk_1EDA47700;
                LOWORD(v166) = 2;
                if ((v171 & 0x8000u) == 0) {
                  int32_t v35 = (unsigned __int16)v171 >> 5;
                }
                else {
                  int32_t v35 = DWORD1(v171);
                }
                unsigned int IndexOf = icu::UnicodeString::doLastIndexOf((uint64_t)&v170, 0x20u, 0, v35);
                if ((IndexOf & 0x80000000) != 0) {
                  goto LABEL_116;
                }
                unsigned int v37 = IndexOf;
                int v38 = IndexOf + 1;
                icu::UnicodeString::unBogus((uint64_t)&v165);
                if ((__int16)v171 < 0)
                {
                  int v39 = DWORD1(v171);
                  if (SDWORD1(v171) <= (int)v37) {
                    goto LABEL_92;
                  }
                }
                else if (v37 >= (unsigned __int16)v171 >> 5)
                {
                  int v39 = (unsigned __int16)v171 >> 5;
LABEL_92:
                  int v38 = v39;
                }
                if ((v166 & 0x8000u) == 0) {
                  uint64_t v40 = (unsigned __int16)v166 >> 5;
                }
                else {
                  uint64_t v40 = DWORD1(v166);
                }
                int v41 = (unsigned __int16)v171 >> 5;
                if ((v171 & 0x8000u) != 0) {
                  int v41 = DWORD1(v171);
                }
                icu::UnicodeString::doReplace((icu::UnicodeString *)&v165, 0, v40, (const icu::UnicodeString *)&v170, v38, (v41 - v38));
                if (v37 || (v171 & 1) == 0)
                {
                  if ((v171 & 0x8000u) == 0) {
                    unsigned int v42 = (unsigned __int16)v171 >> 5;
                  }
                  else {
                    unsigned int v42 = DWORD1(v171);
                  }
                  if (v42 > v37)
                  {
                    if (v37 > 0x3FF)
                    {
                      LOWORD(v171) = v171 | 0xFFE0;
                      DWORD1(v171) = v37;
                    }
                    else
                    {
                      LOWORD(v171) = v171 & 0x1F | (32 * v37);
                    }
                  }
                }
                else
                {
                  icu::UnicodeString::unBogus((uint64_t)&v170);
                }
LABEL_116:
                v142 = L"strength";
                icu::UnicodeString::UnicodeString(&__src, 1, &v142);
                if (v171)
                {
                  BOOL v46 = (void *)WORD4(__src);
                  if (BYTE8(__src)) {
                    goto LABEL_126;
                  }
                }
                else
                {
                  if ((v171 & 0x8000u) == 0) {
                    int v45 = (unsigned __int16)v171 >> 5;
                  }
                  else {
                    int v45 = DWORD1(v171);
                  }
                  if ((SWORD4(__src) & 0x8000u) == 0) {
                    BOOL v46 = (void *)(WORD4(__src) >> 5);
                  }
                  else {
                    BOOL v46 = (void *)HIDWORD(__src);
                  }
                  if ((BYTE8(__src) & 1) == 0
                    && v45 == v46
                    && icu::UnicodeString::doEquals((icu::UnicodeString *)&v170, (const icu::UnicodeString *)&__src, v45))
                  {
LABEL_126:
                    if ((v166 & 0x8000u) == 0) {
                      int v47 = (unsigned __int16)v166 >> 5;
                    }
                    else {
                      int v47 = DWORD1(v166);
                    }
                    icu::UnicodeString::~UnicodeString((void *)((unsigned __int16)v166 >> 5), (icu::UnicodeString *)&__src);
                    v120[6] = (uint64_t)v142;
                    if (v47 == 1)
                    {
                      unint64_t v48 = (unsigned __int16)v166;
                      if ((v166 & 0x8000u) == 0) {
                        int v49 = (unsigned __int16)v166 >> 5;
                      }
                      else {
                        int v49 = DWORD1(v166);
                      }
                      if (v49)
                      {
                        if ((v166 & 2) != 0) {
                          unsigned int v50 = (unsigned __int16 *)&v166 + 1;
                        }
                        else {
                          unsigned int v50 = (unsigned __int16 *)v167;
                        }
                        __int16 v51 = *v50;
                        unint64_t v48 = *v50;
                        if (v48 == 73)
                        {
                          unsigned int v52 = 15;
LABEL_173:
                          icu::CollationSettings::setStrength(*(void *)(v3 + 32), v52, 0, a2);
                          goto LABEL_189;
                        }
                        if ((unsigned __int16)(v51 - 53) >= 0xFFFCu)
                        {
                          unsigned int v52 = v48 - 49;
                          if (v48 != 48) {
                            goto LABEL_173;
                          }
                        }
                      }
                      goto LABEL_211;
                    }
LABEL_141:
                    v141 = "a";
                    icu::UnicodeString::UnicodeString(&__src, 1, &v141);
                    if (v171)
                    {
                      char v55 = (void *)WORD4(__src);
                      int v56 = BYTE8(__src) & 1;
                    }
                    else
                    {
                      if ((v171 & 0x8000u) == 0) {
                        int v53 = (unsigned __int16)v171 >> 5;
                      }
                      else {
                        int v53 = DWORD1(v171);
                      }
                      if ((SWORD4(__src) & 0x8000u) == 0) {
                        int v54 = (void *)(WORD4(__src) >> 5);
                      }
                      else {
                        int v54 = (void *)HIDWORD(__src);
                      }
                      if ((BYTE8(__src) & 1) != 0 || v53 != v54)
                      {
                        icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)&__src);
                        v120[4] = (uint64_t)v141;
                        goto LABEL_156;
                      }
                      int v56 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v170, (const icu::UnicodeString *)&__src, v53);
                    }
                    icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)&__src);
                    v120[3] = (uint64_t)v141;
                    if (v56)
                    {
                      v140 = "n";
                      icu::UnicodeString::UnicodeString(&__src, 1, &v140);
                      BOOL v57 = sub_18C830FC4((uint64_t)&v165, (uint64_t)&__src);
                      icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)&__src);
                      v113[1] = v140;
                      if (v57)
                      {
                        int v59 = 21;
LABEL_164:
                        icu::CollationSettings::setAlternateHandling(*(void *)(v3 + 32), v59, 0, (int *)a2);
LABEL_189:
                        *(_DWORD *)(v3 + 72) = v11;
LABEL_190:
                        icu::UnicodeString::~UnicodeString((void *)v48, (icu::UnicodeString *)&v165);
                        return (icu::CollationRuleParser *)icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v170);
                      }
                      v139 = "s";
                      icu::UnicodeString::UnicodeString(&__src, 1, &v139);
                      BOOL v70 = sub_18C830FC4((uint64_t)&v165, (uint64_t)&__src);
                      icu::UnicodeString::~UnicodeString(v71, (icu::UnicodeString *)&__src);
                      v113[0] = v139;
                      unint64_t v48 = (unint64_t)v113;
                      if (v70)
                      {
                        int v59 = 20;
                        goto LABEL_164;
                      }
                      goto LABEL_211;
                    }
LABEL_156:
                    v138 = "m";
                    icu::UnicodeString::UnicodeString(&__src, 1, &v138);
                    BOOL v60 = sub_18C830FC4((uint64_t)&v170, (uint64_t)&__src);
                    icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)&__src);
                    v120[2] = (uint64_t)v138;
                    if (v60)
                    {
                      v137 = "s";
                      icu::UnicodeString::UnicodeString(&__src, 1, &v137);
                      BOOL v62 = sub_18C830FC4((uint64_t)&v165, (uint64_t)&__src);
                      icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)&__src);
                      v114[3] = v137;
                      if (v62)
                      {
                        unsigned int v64 = 0;
                      }
                      else
                      {
                        v136 = "p";
                        unsigned int v64 = 1;
                        icu::UnicodeString::UnicodeString(&__src, 1, &v136);
                        BOOL v72 = sub_18C830FC4((uint64_t)&v165, (uint64_t)&__src);
                        icu::UnicodeString::~UnicodeString(v73, (icu::UnicodeString *)&__src);
                        v114[2] = v136;
                        if (!v72)
                        {
                          v135 = "s";
                          icu::UnicodeString::UnicodeString(&__src, 1, &v135);
                          BOOL v74 = sub_18C830FC4((uint64_t)&v165, (uint64_t)&__src);
                          icu::UnicodeString::~UnicodeString(v75, (icu::UnicodeString *)&__src);
                          v114[1] = v135;
                          if (v74)
                          {
                            unsigned int v64 = 2;
                          }
                          else
                          {
                            v134 = L"currency";
                            icu::UnicodeString::UnicodeString(&__src, 1, &v134);
                            BOOL v89 = sub_18C830FC4((uint64_t)&v165, (uint64_t)&__src);
                            icu::UnicodeString::~UnicodeString(v90, (icu::UnicodeString *)&__src);
                            v114[0] = v134;
                            unint64_t v48 = (unint64_t)v114;
                            if (!v89) {
                              goto LABEL_211;
                            }
                            unsigned int v64 = 3;
                          }
                        }
                      }
                      icu::CollationSettings::setMaxVariable(*(void *)(v3 + 32), v64, 0, a2);
                      LastPrimaryForGrouunint64_t p = icu::CollationData::getLastPrimaryForGroup(*(icu::CollationData **)(v3 + 24), v64 | 0x1000);
                      unint64_t v48 = *(void *)(v3 + 32);
                      *(_DWORD *)(v48 + 28) = LastPrimaryForGroup;
                      goto LABEL_189;
                    }
                    uint64_t v133 = "c";
                    icu::UnicodeString::UnicodeString(&__src, 1, &v133);
                    BOOL v65 = sub_18C830FC4((uint64_t)&v170, (uint64_t)&__src);
                    icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&__src);
                    v120[1] = (uint64_t)v133;
                    if (v65)
                    {
                      uint64_t v132 = "o";
                      icu::UnicodeString::UnicodeString(&__src, 1, &v132);
                      BOOL v67 = sub_18C830FC4((uint64_t)&v165, (uint64_t)&__src);
                      icu::UnicodeString::~UnicodeString(v68, (icu::UnicodeString *)&__src);
                      v115[2] = v132;
                      if (v67)
                      {
                        int v69 = 16;
                      }
                      else
                      {
                        v131 = "l";
                        icu::UnicodeString::UnicodeString(&__src, 1, &v131);
                        BOOL v83 = sub_18C830FC4((uint64_t)&v165, (uint64_t)&__src);
                        icu::UnicodeString::~UnicodeString(v84, (icu::UnicodeString *)&__src);
                        v115[1] = v131;
                        if (v83)
                        {
                          int v69 = 24;
                        }
                        else
                        {
                          uint64_t v130 = "u";
                          icu::UnicodeString::UnicodeString(&__src, 1, &v130);
                          BOOL v92 = sub_18C830FC4((uint64_t)&v165, (uint64_t)&__src);
                          icu::UnicodeString::~UnicodeString(v93, (icu::UnicodeString *)&__src);
                          v115[0] = v130;
                          unint64_t v48 = (unint64_t)v115;
                          if (!v92) {
                            goto LABEL_211;
                          }
                          int v69 = 25;
                        }
                      }
                      icu::CollationSettings::setCaseFirst(*(void *)(v3 + 32), v69, 0, (int *)a2);
                      goto LABEL_189;
                    }
                    int v129 = "c";
                    icu::UnicodeString::UnicodeString(&__src, 1, &v129);
                    BOOL v76 = sub_18C830FC4((uint64_t)&v170, (uint64_t)&__src);
                    icu::UnicodeString::~UnicodeString(v77, (icu::UnicodeString *)&__src);
                    v120[0] = (uint64_t)v129;
                    if (v76)
                    {
                      unsigned int v79 = icu::CollationRuleParser::getOnOffValue(v120, (icu::CollationRuleParser *)&v165, v78);
                      if (v79 == -1) {
                        goto LABEL_211;
                      }
                      int v80 = v79;
                      uint64_t v81 = *(void *)(v3 + 32);
                      int v82 = 1024;
LABEL_188:
                      icu::CollationSettings::setFlag(v81, v82, v80, 0, (int *)a2);
                      goto LABEL_189;
                    }
                    v128 = "n";
                    icu::UnicodeString::UnicodeString(&__src, 1, &v128);
                    BOOL v85 = sub_18C830FC4((uint64_t)&v170, (uint64_t)&__src);
                    icu::UnicodeString::~UnicodeString(v86, (icu::UnicodeString *)&__src);
                    v119 = v128;
                    if (v85)
                    {
                      unsigned int v88 = icu::CollationRuleParser::getOnOffValue((uint64_t *)&v119, (icu::CollationRuleParser *)&v165, v87);
                      if (v88 == -1) {
                        goto LABEL_211;
                      }
                      int v80 = v88;
                      uint64_t v81 = *(void *)(v3 + 32);
                      int v82 = 1;
                      goto LABEL_188;
                    }
                    uint64_t v127 = "n";
                    icu::UnicodeString::UnicodeString(&__src, 1, &v127);
                    BOOL v94 = sub_18C830FC4((uint64_t)&v170, (uint64_t)&__src);
                    icu::UnicodeString::~UnicodeString(v95, (icu::UnicodeString *)&__src);
                    int v118 = v127;
                    if (v94)
                    {
                      unsigned int v97 = icu::CollationRuleParser::getOnOffValue((uint64_t *)&v118, (icu::CollationRuleParser *)&v165, v96);
                      if (v97 == -1) {
                        goto LABEL_211;
                      }
                      int v80 = v97;
                      uint64_t v81 = *(void *)(v3 + 32);
                      int v82 = 2;
                      goto LABEL_188;
                    }
                    v126 = "h";
                    icu::UnicodeString::UnicodeString(&__src, 1, &v126);
                    BOOL v98 = sub_18C830FC4((uint64_t)&v170, (uint64_t)&__src);
                    icu::UnicodeString::~UnicodeString(v99, (icu::UnicodeString *)&__src);
                    int v117 = v126;
                    if (v98)
                    {
                      unsigned int v101 = icu::CollationRuleParser::getOnOffValue((uint64_t *)&v117, (icu::CollationRuleParser *)&v165, v100);
                      if (v101 != -1)
                      {
                        if (v101 == 17)
                        {
                          unint64_t v48 = *(unsigned int *)a2;
                          if ((int)v48 <= 0)
                          {
                            *a2 = U_INVALID_FORMAT_ERROR;
                            *(void *)(v3 + 48) = "[hiraganaQ on] is not supported";
                            unint64_t v48 = *(void *)(v3 + 40);
                            if (v48) {
                              icu::CollationRuleParser::setErrorContext((char *)v3);
                            }
                          }
                        }
                        goto LABEL_189;
                      }
                      goto LABEL_211;
                    }
                    uint64_t v125 = "i";
                    icu::UnicodeString::UnicodeString(&__src, 1, &v125);
                    BOOL v102 = sub_18C830FC4((uint64_t)&v170, (uint64_t)&__src);
                    icu::UnicodeString::~UnicodeString(v103, (icu::UnicodeString *)&__src);
                    int v116 = v125;
                    unint64_t v48 = (unint64_t)&v116;
                    if (!v102)
                    {
LABEL_211:
                      icu::UnicodeString::~UnicodeString((void *)v48, (icu::UnicodeString *)&v165);
LABEL_212:
                      uint64_t v29 = (void *)*(unsigned int *)a2;
                      if ((int)v29 <= 0)
                      {
                        *a2 = U_INVALID_FORMAT_ERROR;
                        *(void *)(v3 + 48) = "not a valid setting/option";
                        uint64_t v29 = *(void **)(v3 + 40);
                        if (v29) {
                          icu::CollationRuleParser::setErrorContext((char *)v3);
                        }
                      }
                      return (icu::CollationRuleParser *)icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v170);
                    }
                    memset(&__s[1], 0, 48);
                    __s[0] = (char *)&__s[1] + 5;
                    LODWORD(__s[1]) = 40;
                    uint64_t v164 = 0;
                    icu::CharString::appendInvariantChars((icu::CharString *)__s, (const icu::UnicodeString *)&v165, a2);
                    if (*a2 == U_MEMORY_ALLOCATION_ERROR)
                    {
LABEL_221:
                      unint64_t v48 = BYTE4(__s[1]);
                      if (BYTE4(__s[1])) {
                        uprv_free(__s[0]);
                      }
                      goto LABEL_190;
                    }
                    memset(&v162[1], 0, 56);
                    v162[0] = (char *)&v162[1] + 5;
                    LODWORD(v162[1]) = 40;
                    int v124 = 0;
                    long long __src = 0uLL;
                    icu::CharStringByteSink::CharStringByteSink(&__src, (uint64_t)v162);
                    ulocimp_forLanguageTag(__s[0], -1, (uint64_t)&__src, &v124, (int *)a2);
                    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&__src);
                    if (*(int *)a2 > 0) {
                      goto LABEL_217;
                    }
                    if (v124 != v164) {
                      goto LABEL_217;
                    }
                    long long v152 = 0u;
                    memset(v153, 0, 29);
                    long long v150 = 0u;
                    long long v151 = 0u;
                    long long v148 = 0u;
                    long long v149 = 0u;
                    long long v146 = 0u;
                    long long v147 = 0u;
                    long long __src = 0u;
                    int BaseName = uloc_getBaseName((char *)v162[0], (char *)&__src, 157, a2);
                    if (*(int *)a2 > 0 || BaseName >= 96)
                    {
LABEL_217:
                      *a2 = U_INVALID_FORMAT_ERROR;
                      *(void *)(v3 + 48) = "expected language tag in [import langTag]";
                      if (*(void *)(v3 + 40)) {
                        icu::CollationRuleParser::setErrorContext((char *)v3);
                      }
                      goto LABEL_219;
                    }
                    if (!BaseName
                      || BaseName == 3
                      && ((unsigned __int16)__src == 28277 ? (BOOL v105 = BYTE2(__src) == 100) : (BOOL v105 = 0), v105))
                    {
                      strcpy((char *)&__src, "root");
                    }
                    else if (__src == 95)
                    {
                      memmove((char *)&__src + 3, &__src, BaseName + 1);
                      qmemcpy(&__src, "und", 3);
                    }
                    memset(&v160[1], 0, 48);
                    v160[0] = (char *)&v160[1] + 5;
                    LODWORD(v160[1]) = 40;
                    uint64_t v161 = 0;
                    *(void *)&long long v156 = 0;
                    v155 = 0;
                    icu::CharStringByteSink::CharStringByteSink(&v155, (uint64_t)v160);
                    ulocimp_getKeywordValue((char *)v162[0], "collation", (uint64_t)&v155, (int *)a2);
                    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v155);
                    if (*(int *)a2 < 1)
                    {
                      uint64_t v107 = *(void *)(v3 + 64);
                      if (v107)
                      {
                        uint64_t v159 = 0;
                        long long v157 = 0u;
                        long long v158 = 0u;
                        long long v156 = 0u;
                        v155 = &unk_1EDA47700;
                        LOWORD(v156) = 2;
                        if (v161) {
                          int v108 = (const char *)v160[0];
                        }
                        else {
                          int v108 = "standard";
                        }
                        unsigned int v109 = (void *)(v3 + 48);
                        (*(void (**)(uint64_t, long long *, const char *, void **, uint64_t, UErrorCode *))(*(void *)v107 + 24))(v107, &__src, v108, &v155, v3 + 48, a2);
                        if (*(int *)a2 < 1)
                        {
                          uint64_t v111 = *(void *)(v3 + 16);
                          int v112 = *(_DWORD *)(v3 + 72);
                          icu::CollationRuleParser::parse((icu::CollationRuleParser *)v3, (const icu::UnicodeString *)&v155, a2);
                          unsigned int v110 = (_DWORD *)*(unsigned int *)a2;
                          if ((int)v110 >= 1)
                          {
                            unsigned int v110 = *(_DWORD **)(v3 + 40);
                            if (v110) {
                              v110[1] = v112;
                            }
                          }
                          *(void *)(v3 + 16) = v111;
                          *(_DWORD *)(v3 + 72) = v11;
                        }
                        else
                        {
                          if (!*v109) {
                            *unsigned int v109 = "[import langTag] failed";
                          }
                          icu::CollationRuleParser::setErrorContext((char *)v3);
                        }
                        icu::UnicodeString::~UnicodeString(v110, (icu::UnicodeString *)&v155);
                        goto LABEL_242;
                      }
                      *a2 = U_INVALID_FORMAT_ERROR;
                      int v106 = "[import langTag] is not supported";
                    }
                    else
                    {
                      *a2 = U_INVALID_FORMAT_ERROR;
                      int v106 = "expected language tag in [import langTag]";
                    }
                    *(void *)(v3 + 48) = v106;
                    if (*(void *)(v3 + 40)) {
                      icu::CollationRuleParser::setErrorContext((char *)v3);
                    }
LABEL_242:
                    if (BYTE4(v160[1])) {
                      uprv_free(v160[0]);
                    }
LABEL_219:
                    if (BYTE4(v162[1])) {
                      uprv_free(v162[0]);
                    }
                    goto LABEL_221;
                  }
                }
                icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&__src);
                v120[5] = (uint64_t)v142;
                goto LABEL_141;
              }
            }
            else if ((v171 & 0xFFE0) != 0xE0)
            {
              unsigned int v27 = (unsigned __int16)v171 >> 5;
              goto LABEL_58;
            }
            icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v171, (icu::UnicodeString *)&__src);
            v120[10] = (uint64_t)v144;
LABEL_65:
            icu::CollationRuleParser::parseReordering((icu::CollationRuleParser *)v3, (const icu::UnicodeString *)&v170, a2);
LABEL_79:
            *(_DWORD *)(v3 + 72) = v11;
            return (icu::CollationRuleParser *)icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v170);
          }
        }
        int32_t v15 = v14;
        goto LABEL_45;
      }
    }
    if ((v7 & 0x8000) != 0) {
      unsigned int v8 = *(_DWORD *)(v6 + 12);
    }
    if (v8 <= Words) {
      goto LABEL_212;
    }
    uint64_t v16 = (v7 & 2) != 0 ? v6 + 10 : *(void *)(v6 + 24);
    if (*(_WORD *)(v16 + 2 * Words) != 91) {
      goto LABEL_212;
    }
    uint64_t v154 = 0;
    memset(v153, 0, sizeof(v153));
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long __src = 0u;
    long long v146 = 0u;
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&__src);
    int v17 = icu::CollationRuleParser::parseUnicodeSet((icu::CollationRuleParser *)v3, Words, (icu::UnicodeSet *)&__src, a2);
    if (*(int *)a2 > 0)
    {
LABEL_113:
      ((void (*)(icu::UnicodeSet *__hidden))icu::UnicodeSet::~UnicodeSet)((icu::UnicodeSet *)&__src);
      return (icu::CollationRuleParser *)icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v170);
    }
    int v18 = v17;
    v123 = L"optimize";
    unint64_t v19 = (icu::UnicodeString *)icu::UnicodeString::UnicodeString(&v165, 1, &v123);
    if (v171)
    {
      unint64_t v22 = (unsigned __int16)v166;
      BOOL v23 = v166 & 1;
    }
    else
    {
      if ((v171 & 0x8000u) == 0) {
        int v20 = (unsigned __int16)v171 >> 5;
      }
      else {
        int v20 = DWORD1(v171);
      }
      if ((v166 & 0x8000u) == 0) {
        unsigned int v21 = (void *)((unsigned __int16)v166 >> 5);
      }
      else {
        unsigned int v21 = (void *)DWORD1(v166);
      }
      if ((v166 & 1) != 0 || v20 != v21)
      {
        uint64_t v34 = icu::UnicodeString::~UnicodeString(v21, v19);
        v121[2] = v123;
        goto LABEL_108;
      }
      BOOL v23 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v170, (const icu::UnicodeString *)&v165, v20);
    }
    uint64_t v34 = icu::UnicodeString::~UnicodeString((void *)v22, (icu::UnicodeString *)&v165);
    v121[1] = v123;
    if (v23)
    {
      (*(void (**)(void, long long *, uint64_t, UErrorCode *))(**(void **)(v3 + 56) + 48))(*(void *)(v3 + 56), &__src, v3 + 48, a2);
LABEL_110:
      if (*(int *)a2 >= 1) {
        icu::CollationRuleParser::setErrorContext((char *)v3);
      }
      *(_DWORD *)(v3 + 72) = v18;
      goto LABEL_113;
    }
LABEL_108:
    int v122 = "s";
    icu::UnicodeString::UnicodeString(v34, 1, &v122);
    BOOL v43 = sub_18C830FC4((uint64_t)&v170, (uint64_t)&v165);
    icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v165);
    v121[0] = v122;
    if (!v43)
    {
      icu::UnicodeSet::~UnicodeSet(v121, (icu::UnicodeSet *)&__src);
      goto LABEL_212;
    }
    (*(void (**)(void, long long *, uint64_t, UErrorCode *))(**(void **)(v3 + 56) + 40))(*(void *)(v3 + 56), &__src, v3 + 48, a2);
    goto LABEL_110;
  }
  return this;
}

uint64_t icu::CollationRuleParser::skipComment(icu::CollationRuleParser *this, int a2)
{
  uint64_t v2 = *((void *)this + 2);
  unint64_t v3 = *(unsigned __int16 *)(v2 + 8);
  uint64_t result = a2;
  if ((v3 & 0x8000) != 0) {
    goto LABEL_4;
  }
LABEL_2:
  uint64_t v5 = v3 >> 5;
  if (result < (uint64_t)(v3 >> 5))
  {
    while (1)
    {
      if (v5 > result)
      {
        uint64_t v6 = v2 + 10;
        if ((v3 & 2) == 0) {
          uint64_t v6 = *(void *)(v2 + 24);
        }
        unsigned int v7 = *(unsigned __int16 *)(v6 + 2 * result);
        BOOL v8 = v7 > 0xD || ((1 << v7) & 0x3400) == 0;
        BOOL v9 = v8 && v7 - 8232 >= 2;
        if (!v9 || v7 == 133) {
          return (result + 1);
        }
      }
      ++result;
      if ((v3 & 0x8000) == 0) {
        goto LABEL_2;
      }
LABEL_4:
      uint64_t v5 = *(int *)(v2 + 12);
      if (result >= v5) {
        return result;
      }
    }
  }
  return result;
}

char *icu::CollationRuleParser::setParseError(char *this, const char *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    *a3 = U_INVALID_FORMAT_ERROR;
    *((void *)this + 6) = a2;
    if (*((void *)this + 5)) {
      return icu::CollationRuleParser::setErrorContext(this);
    }
  }
  return this;
}

uint64_t icu::CollationRuleParser::parseResetAndPosition(icu::CollationRuleParser *this, UErrorCode *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = icu::CollationRuleParser::skipWhiteSpace(this, *((_DWORD *)this + 18) + 1);
  if (icu::UnicodeString::doCompare(*((void *)this + 2), v6, 7, (uint64_t)"[", 0, 7)) {
    goto LABEL_5;
  }
  int v10 = v6 + 7;
  uint64_t v11 = *((void *)this + 2);
  unsigned int v12 = *(unsigned __int16 *)(v11 + 8);
  if (*(__int16 *)(v11 + 8) < 0)
  {
    unsigned int v13 = *(_DWORD *)(v11 + 12);
    if (v10 >= (int)v13) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v10 >= (int)(v12 >> 5)) {
      goto LABEL_5;
    }
    unsigned int v13 = v12 >> 5;
  }
  if (v13 <= v10)
  {
    uint64_t v20 = 0xFFFFLL;
  }
  else
  {
    if ((v12 & 2) != 0) {
      uint64_t v16 = v11 + 10;
    }
    else {
      uint64_t v16 = *(void *)(v11 + 24);
    }
    uint64_t v20 = *(unsigned __int16 *)(v16 + 2 * v10);
  }
  if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)v20)) {
    goto LABEL_5;
  }
  signed int v21 = icu::CollationRuleParser::skipWhiteSpace(this, (int)v6 + 8);
  uint64_t v22 = v21 + 1;
  uint64_t v23 = *((void *)this + 2);
  unsigned int v24 = *(unsigned __int16 *)(v23 + 8);
  if ((v24 & 0x8000) != 0)
  {
    int v25 = *(_DWORD *)(v23 + 12);
    if ((int)v22 < v25) {
      goto LABEL_41;
    }
LABEL_5:
    uint64_t v2 = 15;
    goto LABEL_6;
  }
  if ((int)v22 >= (int)(v24 >> 5)) {
    goto LABEL_5;
  }
  int v25 = v24 >> 5;
LABEL_41:
  if (v25 <= v21) {
    goto LABEL_5;
  }
  uint64_t v26 = (v24 & 2) != 0 ? v23 + 10 : *(void *)(v23 + 24);
  uint64_t v2 = *(unsigned __int16 *)(v26 + 2 * v21) - 49;
  if (v2 > 2) {
    goto LABEL_5;
  }
  unsigned int v27 = (v24 & 0x8000) != 0 ? *(_DWORD *)(v23 + 12) : v24 >> 5;
  if (v27 <= v22) {
    goto LABEL_5;
  }
  uint64_t v28 = (v24 & 2) != 0 ? v23 + 10 : *(void *)(v23 + 24);
  if (*(_WORD *)(v28 + 2 * v22) != 93) {
    goto LABEL_5;
  }
  uint64_t v6 = icu::CollationRuleParser::skipWhiteSpace(this, v21 + 2);
LABEL_6:
  uint64_t v7 = *((void *)this + 2);
  unsigned int v8 = *(unsigned __int16 *)(v7 + 8);
  if (*(__int16 *)(v7 + 8) < 0) {
    int v9 = *(_DWORD *)(v7 + 12);
  }
  else {
    int v9 = v8 >> 5;
  }
  if ((int)v6 >= v9)
  {
    if (*(int *)a2 <= 0)
    {
      *a2 = U_INVALID_FORMAT_ERROR;
      *((void *)this + 6) = "reset without position";
      if (*((void *)this + 5)) {
        icu::CollationRuleParser::setErrorContext((char *)this);
      }
    }
    return 0xFFFFFFFFLL;
  }
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v33 = 0;
  long long v32 = 0u;
  uint64_t v29 = &unk_1EDA47700;
  LOWORD(v30) = 2;
  if ((v8 & 0x8000) != 0) {
    unsigned int v14 = *(_DWORD *)(v7 + 12);
  }
  else {
    unsigned int v14 = v8 >> 5;
  }
  if (v14 > v6
    && ((v8 & 2) != 0 ? (uint64_t v15 = v7 + 10) : (uint64_t v15 = *(void *)(v7 + 24)), *(_WORD *)(v15 + 2 * (int)v6) == 91))
  {
    int v17 = icu::CollationRuleParser::parseSpecialPosition(this, v6, (icu::UnicodeString *)&v29, a2);
  }
  else
  {
    int v17 = icu::CollationRuleParser::parseTailoringString(this, v6, (icu::UnicodeString *)&v29, a2);
  }
  int v18 = v17;
  (*(void (**)(void, uint64_t, void **, char *, UErrorCode *))(**((void **)this + 7) + 24))(*((void *)this + 7), v2, &v29, (char *)this + 48, a2);
  unint64_t v19 = (void *)*(unsigned int *)a2;
  if ((int)v19 >= 1) {
    icu::CollationRuleParser::setErrorContext((char *)this);
  }
  *((_DWORD *)this + 18) = v18;
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v29);
  return v2;
}

uint64_t icu::CollationRuleParser::parseRelationOperator(icu::CollationRuleParser *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  int v5 = icu::CollationRuleParser::skipWhiteSpace(this, *((_DWORD *)this + 18));
  *((_DWORD *)this + 18) = v5;
  uint64_t v6 = *((void *)this + 2);
  unsigned int v7 = *(unsigned __int16 *)(v6 + 8);
  if (*(__int16 *)(v6 + 8) < 0)
  {
    unsigned int v8 = *(_DWORD *)(v6 + 12);
    if (v5 >= (int)v8) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if (v5 >= (int)(v7 >> 5)) {
      return 0xFFFFFFFFLL;
    }
    unsigned int v8 = v7 >> 5;
  }
  if (v8 > v5)
  {
    uint64_t v9 = v5 + 1;
    if ((v7 & 2) != 0) {
      uint64_t v10 = v6 + 10;
    }
    else {
      uint64_t v10 = *(void *)(v6 + 24);
    }
    int v11 = *(unsigned __int16 *)(v10 + 2 * v5);
    uint64_t v2 = 0xFFFFFFFFLL;
    if (v11 <= 59)
    {
      if (v11 == 44)
      {
        int v12 = 2;
      }
      else
      {
        if (v11 != 59) {
          return v2;
        }
        int v12 = 1;
      }
      return v12 | ((v9 - v5) << 8);
    }
    if (v11 != 61)
    {
      if (v11 != 60) {
        return v2;
      }
      if ((v7 & 0x8000) != 0)
      {
        int v13 = *(_DWORD *)(v6 + 12);
        if ((int)v9 >= v13)
        {
          int v12 = 0;
          goto LABEL_55;
        }
      }
      else
      {
        int v13 = v7 >> 5;
        if ((int)v9 >= (int)(v7 >> 5))
        {
          int v12 = 0;
LABEL_56:
          if ((int)v9 < v13 && v13 > v9)
          {
            if ((v7 & 2) != 0) {
              uint64_t v19 = v6 + 10;
            }
            else {
              uint64_t v19 = *(void *)(v6 + 24);
            }
            if (*(_WORD *)(v19 + 2 * (int)v9) == 42)
            {
              v12 |= 0x10u;
              LODWORD(v9) = v9 + 1;
            }
          }
          return v12 | ((v9 - v5) << 8);
        }
      }
      if (v13 > v9
        && ((v7 & 2) != 0 ? (uint64_t v15 = v6 + 10) : (uint64_t v15 = *(void *)(v6 + 24)), *(_WORD *)(v15 + 2 * v9) == 60))
      {
        uint64_t v9 = v5 + 2;
        if ((v7 & 0x8000) != 0)
        {
          int v13 = *(_DWORD *)(v6 + 12);
          if ((int)v9 >= v13)
          {
            int v12 = 1;
            goto LABEL_55;
          }
        }
        else
        {
          int v13 = v7 >> 5;
          if ((int)v9 >= (int)(v7 >> 5))
          {
            int v12 = 1;
            goto LABEL_56;
          }
        }
        if (v13 > v9
          && ((v7 & 2) != 0 ? (uint64_t v18 = v6 + 10) : (uint64_t v18 = *(void *)(v6 + 24)), *(_WORD *)(v18 + 2 * v9) == 60))
        {
          uint64_t v9 = v5 + 3;
          if ((v7 & 0x8000) != 0)
          {
            int v13 = *(_DWORD *)(v6 + 12);
            if ((int)v9 >= v13)
            {
              int v12 = 2;
              goto LABEL_55;
            }
          }
          else
          {
            int v13 = v7 >> 5;
            if ((int)v9 >= (int)(v7 >> 5))
            {
              int v12 = 2;
              goto LABEL_56;
            }
          }
          if (v13 <= v9)
          {
            int v12 = 2;
          }
          else
          {
            if ((v7 & 2) != 0) {
              uint64_t v20 = v6 + 10;
            }
            else {
              uint64_t v20 = *(void *)(v6 + 24);
            }
            BOOL v21 = *(unsigned __int16 *)(v20 + 2 * v9) == 60;
            if (*(_WORD *)(v20 + 2 * v9) == 60) {
              int v12 = 3;
            }
            else {
              int v12 = 2;
            }
            if (v21) {
              LODWORD(v9) = v5 + 4;
            }
          }
        }
        else
        {
          int v12 = 1;
        }
      }
      else
      {
        int v12 = 0;
      }
      if ((v7 & 0x8000) == 0)
      {
        int v13 = v7 >> 5;
        goto LABEL_56;
      }
LABEL_55:
      int v13 = *(_DWORD *)(v6 + 12);
      goto LABEL_56;
    }
    if ((v7 & 0x8000) != 0)
    {
      int v14 = *(_DWORD *)(v6 + 12);
      if ((int)v9 < v14)
      {
LABEL_30:
        if (v14 > v9)
        {
          if ((v7 & 2) != 0) {
            uint64_t v16 = v6 + 10;
          }
          else {
            uint64_t v16 = *(void *)(v6 + 24);
          }
          BOOL v17 = *(unsigned __int16 *)(v16 + 2 * (int)v9) == 42;
          if (*(_WORD *)(v16 + 2 * (int)v9) == 42) {
            int v12 = 31;
          }
          else {
            int v12 = 15;
          }
          if (v17) {
            LODWORD(v9) = v5 + 2;
          }
          return v12 | ((v9 - v5) << 8);
        }
      }
    }
    else if ((int)v9 < (int)(v7 >> 5))
    {
      int v14 = v7 >> 5;
      goto LABEL_30;
    }
    int v12 = 15;
    return v12 | ((v9 - v5) << 8);
  }
  return 0xFFFFFFFFLL;
}

void *icu::CollationRuleParser::parseRelationStrings(icu::CollationRuleParser *this, uint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  uint64_t v40 = 0;
  long long v39 = 0u;
  long long v38 = 0u;
  uint64_t v35 = 0;
  unsigned int v36 = (UChar *)&unk_1EDA47700;
  LOWORD(v37) = 2;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v30 = 0;
  long long v31 = (UChar *)&unk_1EDA47700;
  LOWORD(v32) = 2;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v26 = &unk_1EDA47700;
  LOWORD(v27) = 2;
  int v7 = icu::CollationRuleParser::parseTailoringString(this, a3, (icu::UnicodeString *)&v31, a4);
  unsigned int v8 = (void *)*(unsigned int *)a4;
  if ((int)v8 > 0) {
    goto LABEL_32;
  }
  int v9 = v7;
  uint64_t v10 = *((void *)this + 2);
  unsigned int v11 = *(unsigned __int16 *)(v10 + 8);
  if (*(__int16 *)(v10 + 8) < 0)
  {
    unsigned int v12 = *(_DWORD *)(v10 + 12);
    if (v7 >= (int)v12) {
      goto LABEL_23;
    }
  }
  else
  {
    if (v7 >= (int)(v11 >> 5)) {
      goto LABEL_23;
    }
    unsigned int v12 = v11 >> 5;
  }
  if (v12 > v7)
  {
    if ((v11 & 2) != 0) {
      uint64_t v13 = v10 + 10;
    }
    else {
      uint64_t v13 = *(void *)(v10 + 24);
    }
    int v14 = *(unsigned __int16 *)(v13 + 2 * v7);
    if (v14 != 124)
    {
LABEL_21:
      if (v14 == 47) {
        int v9 = icu::CollationRuleParser::parseTailoringString(this, v9 + 1, (icu::UnicodeString *)&v26, a4);
      }
      goto LABEL_23;
    }
    icu::UnicodeString::operator=(&v36, &v31);
    int v15 = icu::CollationRuleParser::parseTailoringString(this, v9 + 1, (icu::UnicodeString *)&v31, a4);
    unsigned int v8 = (void *)*(unsigned int *)a4;
    if ((int)v8 > 0) {
      goto LABEL_32;
    }
    int v9 = v15;
    uint64_t v16 = *((void *)this + 2);
    unsigned int v17 = *(unsigned __int16 *)(v16 + 8);
    if (*(__int16 *)(v16 + 8) < 0)
    {
      unsigned int v18 = *(_DWORD *)(v16 + 12);
      if (v15 >= (int)v18) {
        goto LABEL_23;
      }
    }
    else
    {
      if (v15 >= (int)(v17 >> 5)) {
        goto LABEL_23;
      }
      unsigned int v18 = v17 >> 5;
    }
    if (v18 > v15)
    {
      if ((v17 & 2) != 0) {
        uint64_t v19 = v16 + 10;
      }
      else {
        uint64_t v19 = *(void *)(v16 + 24);
      }
      int v14 = *(unsigned __int16 *)(v19 + 2 * v15);
      goto LABEL_21;
    }
  }
LABEL_23:
  if ((unsigned __int16)v37 < 0x20u
    || (uint64_t v20 = icu::UnicodeString::char32At((uint64_t *)(unsigned __int16)v37, (icu::UnicodeString *)&v36, 0),
        uint64_t v22 = icu::UnicodeString::char32At(v21, (icu::UnicodeString *)&v31, 0),
        (*(unsigned int (**)(void, uint64_t *))(**((void **)this + 1) + 120))(*((void *)this + 1), v20))&& (*(unsigned int (**)(void, uint64_t *))(**((void **)this + 1) + 120))(*((void *)this + 1), v22))
  {
    (*(void (**)(void, uint64_t, UChar **, UChar **, void **, char *, UErrorCode *))(**((void **)this + 7)
                                                                                               + 32))(*((void *)this + 7), a2, &v36, &v31, &v26, (char *)this + 48, a4);
    unsigned int v8 = (void *)*(unsigned int *)a4;
    if ((int)v8 >= 1) {
      icu::CollationRuleParser::setErrorContext((char *)this);
    }
    *((_DWORD *)this + 18) = v9;
  }
  else
  {
    unsigned int v8 = (void *)*(unsigned int *)a4;
    if ((int)v8 <= 0)
    {
      *a4 = U_INVALID_FORMAT_ERROR;
      *((void *)this + 6) = "in 'prefix|str', prefix and str must each start with an NFC boundary";
      unsigned int v8 = (void *)*((void *)this + 5);
      if (v8) {
        icu::CollationRuleParser::setErrorContext((char *)this);
      }
    }
  }
LABEL_32:
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v26);
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v31);
  return icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v36);
}

void *icu::CollationRuleParser::parseStarredCharacters(icu::CollationRuleParser *this, uint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  long long v46 = 0u;
  uint64_t v49 = 0;
  long long v48 = 0u;
  long long v47 = 0u;
  uint64_t v44 = 0;
  int v45 = &unk_1EDA47700;
  LOWORD(v46) = 2;
  long long v41 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  uint64_t v40 = &unk_1EDA47700;
  LOWORD(v41) = 2;
  uint64_t v7 = icu::CollationRuleParser::skipWhiteSpace(this, a3);
  int v8 = icu::CollationRuleParser::parseString(this, v7, (icu::UnicodeString *)&v40, a4);
  int v9 = (void *)*(unsigned int *)a4;
  if ((int)v9 <= 0)
  {
    unsigned int v10 = (unsigned __int16)v41;
    if ((unsigned __int16)v41 < 0x20u)
    {
      *a4 = U_INVALID_FORMAT_ERROR;
      uint64_t v30 = "missing starred-relation string";
    }
    else
    {
      int v11 = v8;
      int v12 = 0;
      while (1)
      {
        int v13 = (__int16)v10;
        LODWORD(v14) = v10 >> 5;
        if (v13 >= 0) {
          unint64_t v14 = v14;
        }
        else {
          unint64_t v14 = DWORD1(v41);
        }
        if (v12 < (int)v14)
        {
          while (1)
          {
            int v15 = icu::UnicodeString::char32At((uint64_t *)v14, (icu::UnicodeString *)&v40, v12);
            if (!(*(unsigned int (**)(void, uint64_t *))(**(void **)this + 136))(*(void *)this, v15)) {
              break;
            }
            uint64_t v16 = *((void *)this + 7);
            icu::UnicodeString::UnicodeString((uint64_t)&v35, v15);
            (*(void (**)(uint64_t, uint64_t, void **, void **, void **, char *, UErrorCode *))(*(void *)v16 + 32))(v16, a2, &v45, &v35, &v45, (char *)this + 48, a4);
            icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v35);
            if (*(int *)a4 >= 1) {
              goto LABEL_48;
            }
            if (v15 < 0x10000) {
              int v18 = 1;
            }
            else {
              int v18 = 2;
            }
            v12 += v18;
            LODWORD(v14) = (unsigned __int16)v41 >> 5;
            if ((v41 & 0x8000u) == 0) {
              unint64_t v14 = v14;
            }
            else {
              unint64_t v14 = DWORD1(v41);
            }
            if (v12 >= (int)v14) {
              goto LABEL_19;
            }
          }
          int v9 = (void *)*(unsigned int *)a4;
          if ((int)v9 <= 0)
          {
            *a4 = U_INVALID_FORMAT_ERROR;
            uint64_t v30 = "starred-relation string is not all NFD-inert";
            goto LABEL_47;
          }
          goto LABEL_60;
        }
        LODWORD(v15) = -1;
LABEL_19:
        uint64_t v19 = *((void *)this + 2);
        unsigned int v20 = *(unsigned __int16 *)(v19 + 8);
        if (*(__int16 *)(v19 + 8) < 0)
        {
          int v21 = *(_DWORD *)(v19 + 12);
          if (v11 >= v21) {
            goto LABEL_61;
          }
        }
        else
        {
          if (v11 >= (int)(v20 >> 5)) {
            goto LABEL_61;
          }
          int v21 = v20 >> 5;
        }
        if (v21 <= v11
          || ((v20 & 2) != 0 ? (uint64_t v22 = v19 + 10) : (uint64_t v22 = *(void *)(v19 + 24)), *(_WORD *)(v22 + 2 * v11) != 45))
        {
LABEL_61:
          *((_DWORD *)this + 18) = icu::CollationRuleParser::skipWhiteSpace(this, v11);
          goto LABEL_60;
        }
        if ((v15 & 0x80000000) != 0)
        {
          int v9 = (void *)*(unsigned int *)a4;
          if ((int)v9 > 0) {
            goto LABEL_60;
          }
          *a4 = U_INVALID_FORMAT_ERROR;
          uint64_t v30 = "range without start in starred-relation string";
          goto LABEL_47;
        }
        int v23 = icu::CollationRuleParser::parseString(this, (v11 + 1), (icu::UnicodeString *)&v40, a4);
        int v9 = (void *)*(unsigned int *)a4;
        if ((int)v9 > 0) {
          goto LABEL_60;
        }
        if ((unsigned __int16)v41 <= 0x1Fu)
        {
          *a4 = U_INVALID_FORMAT_ERROR;
          uint64_t v30 = "range without end in starred-relation string";
          goto LABEL_47;
        }
        int v11 = v23;
        int v24 = icu::UnicodeString::char32At((uint64_t *)(unsigned __int16)v41, (icu::UnicodeString *)&v40, 0);
        if (v24 < (int)v15) {
          break;
        }
        unsigned int v25 = v24;
        uint64_t v39 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v36 = 0u;
        uint64_t v35 = &unk_1EDA47700;
        uint64_t v26 = 2;
        LOWORD(v36) = 2;
        while (v25 != v15)
        {
          uint64_t v27 = (v15 + 1);
          if (!(*(unsigned int (**)(void, uint64_t))(**(void **)this + 136))(*(void *)this, v27))
          {
            long long v31 = (void *)*(unsigned int *)a4;
            if ((int)v31 > 0) {
              goto LABEL_59;
            }
            *a4 = U_INVALID_FORMAT_ERROR;
            long long v32 = "starred-relation string range is not all NFD-inert";
            goto LABEL_57;
          }
          if (v27 >> 11 == 27)
          {
            long long v31 = (void *)*(unsigned int *)a4;
            if ((int)v31 > 0) {
              goto LABEL_59;
            }
            *a4 = U_INVALID_FORMAT_ERROR;
            long long v32 = "starred-relation string range contains a surrogate";
LABEL_57:
            *((void *)this + 6) = v32;
            long long v31 = (void *)*((void *)this + 5);
            if (v31) {
LABEL_58:
            }
              icu::CollationRuleParser::setErrorContext((char *)this);
            goto LABEL_59;
          }
          unsigned int v28 = v27 - 65533;
          if (v28 <= 2)
          {
            long long v31 = (void *)*(unsigned int *)a4;
            if ((int)v31 <= 0)
            {
              *a4 = U_INVALID_FORMAT_ERROR;
              long long v32 = "starred-relation string range contains U+FFFD, U+FFFE or U+FFFF";
              goto LABEL_57;
            }
LABEL_59:
            icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v35);
            goto LABEL_60;
          }
          icu::UnicodeString::unBogus((uint64_t)&v35);
          if ((v36 & 0x8000u) == 0) {
            uint64_t v29 = (unsigned __int16)v36 >> 5;
          }
          else {
            uint64_t v29 = DWORD1(v36);
          }
          LODWORD(v15) = v28 + 65533;
          icu::UnicodeString::replace((icu::UnicodeString *)&v35, 0, v29, v15);
          (*(void (**)(void, uint64_t, void **, void **, void **, char *, UErrorCode *))(**((void **)this + 7) + 32))(*((void *)this + 7), a2, &v45, &v35, &v45, (char *)this + 48, a4);
          uint64_t v26 = *(unsigned int *)a4;
          if ((int)v26 >= 1) {
            goto LABEL_58;
          }
        }
        if (v25 < 0x10000) {
          int v12 = 1;
        }
        else {
          int v12 = 2;
        }
        icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)&v35);
        unsigned int v10 = (unsigned __int16)v41;
      }
      int v9 = (void *)*(unsigned int *)a4;
      if ((int)v9 > 0) {
        goto LABEL_60;
      }
      *a4 = U_INVALID_FORMAT_ERROR;
      uint64_t v30 = "range start greater than end in starred-relation string";
    }
LABEL_47:
    *((void *)this + 6) = v30;
    int v9 = (void *)*((void *)this + 5);
    if (v9) {
LABEL_48:
    }
      icu::CollationRuleParser::setErrorContext((char *)this);
  }
LABEL_60:
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v40);
  return icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v45);
}

uint64_t icu::CollationRuleParser::skipWhiteSpace(icu::CollationRuleParser *this, int a2)
{
  int64_t v3 = a2;
  do
  {
    int64_t v4 = v3;
    uint64_t v5 = *((void *)this + 2);
    int v6 = *(__int16 *)(v5 + 8);
    if (v6 < 0)
    {
      int64_t v7 = *(int *)(v5 + 12);
      if (v3 >= v7) {
        return v4;
      }
    }
    else
    {
      if (v3 >= (uint64_t)((unint64_t)*(unsigned __int16 *)(v5 + 8) >> 5)) {
        return v4;
      }
      int64_t v7 = (unint64_t)*(unsigned __int16 *)(v5 + 8) >> 5;
    }
    if (v7 <= v3)
    {
      uint64_t v9 = 0xFFFFLL;
    }
    else
    {
      if ((v6 & 2) != 0) {
        uint64_t v8 = v5 + 10;
      }
      else {
        uint64_t v8 = *(void *)(v5 + 24);
      }
      uint64_t v9 = *(unsigned __int16 *)(v8 + 2 * v3);
    }
    ++v3;
  }
  while (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v9));
  return v4;
}

uint64_t icu::CollationRuleParser::parseSpecialPosition(icu::CollationRuleParser *this, uint64_t a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    long long v36 = 0u;
    uint64_t v39 = 0;
    long long v38 = 0u;
    long long v37 = 0u;
    uint64_t v35 = &unk_1EDA47700;
    LOWORD(v36) = 2;
    int Words = icu::CollationRuleParser::readWords(this, (int)a2 + 1, (icu::UnicodeString *)&v35);
    if (Words <= (int)a2
      || ((uint64_t v10 = *((void *)this + 2), v11 = *(unsigned __int16 *)(v10 + 8), *(__int16 *)(v10 + 8) < 0)
        ? (unsigned int v12 = *(_DWORD *)(v10 + 12))
        : (unsigned int v12 = v11 >> 5),
          v12 <= Words
       || ((v11 & 2) != 0 ? (uint64_t v13 = v10 + 10) : (uint64_t v13 = *(void *)(v10 + 24)),
           *(_WORD *)(v13 + 2 * Words) != 93 || (unsigned __int16)v36 < 0x20u)))
    {
LABEL_47:
      unsigned int v28 = (void *)*(unsigned int *)a4;
      if ((int)v28 <= 0)
      {
        *a4 = U_INVALID_FORMAT_ERROR;
        *((void *)this + 6) = "not a valid special reset position";
        unsigned int v28 = (void *)*((void *)this + 5);
        if (v28) {
          icu::CollationRuleParser::setErrorContext((char *)this);
        }
      }
      uint64_t v4 = a2;
      goto LABEL_51;
    }
    uint64_t v14 = 0;
    uint64_t v4 = (Words + 1);
    do
    {
      icu::UnicodeString::UnicodeString(&v32, off_1E550A830[v14], 0xFFFFFFFFLL, 0);
      if (v36)
      {
        char v19 = v33;
        icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v36, (icu::UnicodeString *)&v32);
        if (v19)
        {
LABEL_39:
          uint64_t v24 = sub_18C8F4658((uint64_t)a3, 65534);
          __int16 v25 = v14 + 10240;
          goto LABEL_46;
        }
      }
      else
      {
        if ((v36 & 0x8000u) == 0) {
          int v15 = (unsigned __int16)v36 >> 5;
        }
        else {
          int v15 = DWORD1(v36);
        }
        if ((v33 & 0x8000u) == 0) {
          unint64_t v16 = v33 >> 5;
        }
        else {
          unint64_t v16 = v34;
        }
        if ((v33 & 1) != 0 || v15 != v16)
        {
          icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v32);
        }
        else
        {
          BOOL v17 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v35, (const icu::UnicodeString *)&v32, v15);
          icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v32);
          if (v17) {
            goto LABEL_39;
          }
        }
      }
      ++v14;
    }
    while (v14 != 14);
    long long v31 = "t";
    icu::UnicodeString::UnicodeString(&v32, 1, &v31);
    if (v36)
    {
      unint64_t v22 = v33;
      int v23 = v33 & 1;
    }
    else
    {
      if ((v36 & 0x8000u) == 0) {
        int v20 = (unsigned __int16)v36 >> 5;
      }
      else {
        int v20 = DWORD1(v36);
      }
      if ((v33 & 0x8000u) == 0) {
        unint64_t v21 = v33 >> 5;
      }
      else {
        unint64_t v21 = v34;
      }
      if ((v33 & 1) != 0 || v20 != v21)
      {
        icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v32);
        goto LABEL_44;
      }
      int v23 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v35, (const icu::UnicodeString *)&v32, v20);
    }
    icu::UnicodeString::~UnicodeString((void *)v22, (icu::UnicodeString *)&v32);
    if (v23)
    {
      uint64_t v24 = sub_18C8F4658((uint64_t)a3, 65534);
      __int16 v25 = 10249;
LABEL_46:
      __int16 v32 = v25;
      icu::UnicodeString::doAppend(v24, (uint64_t)&v32, 0, 1);
LABEL_51:
      icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v35);
      return v4;
    }
LABEL_44:
    uint64_t v30 = "v";
    icu::UnicodeString::UnicodeString(&v32, 1, &v30);
    BOOL v26 = sub_18C830FC4((uint64_t)&v35, (uint64_t)&v32);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v32);
    if (!v26) {
      goto LABEL_47;
    }
    uint64_t v24 = sub_18C8F4658((uint64_t)a3, 65534);
    __int16 v25 = 10247;
    goto LABEL_46;
  }
  return 0;
}

uint64_t icu::CollationRuleParser::parseTailoringString(icu::CollationRuleParser *this, int a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  uint64_t v7 = icu::CollationRuleParser::skipWhiteSpace(this, a2);
  int v8 = icu::CollationRuleParser::parseString(this, v7, a3, a4);
  if (*(int *)a4 <= 0 && *((unsigned __int16 *)a3 + 4) <= 0x1Fu)
  {
    *a4 = U_INVALID_FORMAT_ERROR;
    *((void *)this + 6) = "missing relation string";
    if (*((void *)this + 5)) {
      icu::CollationRuleParser::setErrorContext((char *)this);
    }
  }

  return icu::CollationRuleParser::skipWhiteSpace(this, v8);
}

char *icu::CollationRuleParser::setErrorContext(char *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 5);
  if (v1)
  {
    uint64_t v2 = this;
    unsigned int v3 = 0;
    int v4 = *((_DWORD *)this + 18);
    _DWORD *v1 = 0;
    v1[1] = v4;
    uint64_t v5 = *((void *)this + 2);
    if (v4 >= 16)
    {
      unsigned int v3 = v4 - 15;
      unsigned int v6 = *(unsigned __int16 *)(v5 + 8);
      unsigned int v7 = *(__int16 *)(v5 + 8) < 0 ? *(_DWORD *)(v5 + 12) : v6 >> 5;
      if (v7 > v3)
      {
        uint64_t v8 = (v6 & 2) != 0 ? v5 + 10 : *(void *)(v5 + 24);
        if (*(_WORD *)(v8 + 2 * v3) >> 10 == 55) {
          unsigned int v3 = v4 - 14;
        }
      }
    }
    signed int v9 = v4 - v3;
    icu::UnicodeString::doExtract((char *)v5, v3, v4 - v3, (uint64_t)(v1 + 2), 0);
    uint64_t v10 = *((void *)v2 + 5);
    *(_WORD *)(v10 + 2 * v9 + 8) = 0;
    uint64_t v11 = *((void *)v2 + 2);
    unsigned int v12 = *(unsigned __int16 *)(v11 + 8);
    int v13 = *((_DWORD *)v2 + 18);
    if (*(__int16 *)(v11 + 8) < 0)
    {
      unsigned int v14 = *(_DWORD *)(v11 + 12);
      int v15 = v14 - v13;
      if ((int)(v14 - v13) <= 15)
      {
LABEL_24:
        this = icu::UnicodeString::doExtract((char *)v11, v13, v15, v10 + 40, 0);
        *(_WORD *)(*((void *)v2 + 5) + 2 * v15 + 40) = 0;
        return this;
      }
    }
    else
    {
      unsigned int v14 = v12 >> 5;
      int v15 = (v12 >> 5) - v13;
      if (v15 < 16) {
        goto LABEL_24;
      }
    }
    if (v14 <= v13 + 14)
    {
      int v15 = 15;
    }
    else
    {
      if ((v12 & 2) != 0) {
        uint64_t v16 = v11 + 10;
      }
      else {
        uint64_t v16 = *(void *)(v11 + 24);
      }
      if ((*(_WORD *)(v16 + 2 * (v13 + 14)) & 0xFC00) == 0xD800) {
        int v15 = 14;
      }
      else {
        int v15 = 15;
      }
    }
    goto LABEL_24;
  }
  return this;
}

uint64_t icu::CollationRuleParser::parseString(icu::CollationRuleParser *this, uint64_t a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return a2;
  }
  if (*((_WORD *)a3 + 4)) {
    __int16 v10 = 2;
  }
  else {
    __int16 v10 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v10;
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_8:
        uint64_t v11 = *((void *)this + 2);
        unsigned int v12 = *(unsigned __int16 *)(v11 + 8);
        if (*(__int16 *)(v11 + 8) < 0)
        {
          int v13 = *(_DWORD *)(v11 + 12);
          if ((int)a2 >= v13) {
            goto LABEL_66;
          }
        }
        else
        {
          if ((int)a2 >= (int)(v12 >> 5)) {
            goto LABEL_66;
          }
          int v13 = v12 >> 5;
        }
        uint64_t v5 = (int)a2 + 1;
        if (v13 <= a2)
        {
          uint64_t v15 = 0xFFFFLL;
          goto LABEL_55;
        }
        uint64_t v14 = (v12 & 2) != 0 ? v11 + 10 : *(void *)(v11 + 24);
        uint64_t v15 = *(unsigned __int16 *)(v14 + 2 * (int)a2);
        if ((v15 - 33) <= 0x5D) {
          break;
        }
LABEL_55:
        if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v15))
        {
LABEL_66:
          unsigned int v28 = *((unsigned __int16 *)a3 + 4);
          int v29 = (__int16)v28;
          LODWORD(v30) = v28 >> 5;
          if (v29 >= 0) {
            unint64_t v30 = v30;
          }
          else {
            unint64_t v30 = *((unsigned int *)a3 + 3);
          }
          if ((int)v30 < 1) {
            return a2;
          }
          int v31 = 0;
          while (1)
          {
            unsigned int v32 = icu::UnicodeString::char32At((uint64_t *)v30, a3, v31);
            if (v32 >> 11 == 27) {
              break;
            }
            if (v32 - 65533 <= 2)
            {
              if (*(int *)a4 <= 0)
              {
                *a4 = U_INVALID_FORMAT_ERROR;
                long long v36 = "string contains U+FFFD, U+FFFE or U+FFFF";
LABEL_88:
                *((void *)this + 6) = v36;
                uint64_t v20 = a2;
                uint64_t v5 = a2;
                if (*((void *)this + 5)) {
                  goto LABEL_89;
                }
                return v5;
              }
              return a2;
            }
            if (v32 < 0x10000) {
              int v33 = 1;
            }
            else {
              int v33 = 2;
            }
            v31 += v33;
            unsigned int v34 = *((unsigned __int16 *)a3 + 4);
            int v35 = (__int16)v34;
            LODWORD(v30) = v34 >> 5;
            if (v35 >= 0) {
              unint64_t v30 = v30;
            }
            else {
              unint64_t v30 = *((unsigned int *)a3 + 3);
            }
            if (v31 >= (int)v30) {
              return a2;
            }
          }
          if (*(int *)a4 <= 0)
          {
            *a4 = U_INVALID_FORMAT_ERROR;
            long long v36 = "string contains an unpaired surrogate";
            goto LABEL_88;
          }
          return a2;
        }
        __int16 v39 = v15;
        icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v39, 0, 1);
        a2 = (int)a2 + 1;
      }
      if (v15 < 0x30) {
        goto LABEL_19;
      }
      uint64_t v17 = (v15 - 58);
      if (v17 > 0x26) {
        break;
      }
      if (v17 != 34)
      {
        if (((1 << (v15 - 58)) & 0x7A0000007FLL) != 0) {
          goto LABEL_66;
        }
        break;
      }
      if ((v12 & 0x8000) != 0) {
        int v18 = (uint64_t *)*(unsigned int *)(v11 + 12);
      }
      else {
        int v18 = (uint64_t *)(v12 >> 5);
      }
      if (v5 == v18)
      {
        if (*(int *)a4 <= 0)
        {
          *a4 = U_INVALID_FORMAT_ERROR;
          *((void *)this + 6) = "backslash escape at the end of the rule string";
          uint64_t v20 = (int)a2 + 1;
          if (*((void *)this + 5)) {
            goto LABEL_89;
          }
        }
        return v5;
      }
      unsigned int v26 = icu::UnicodeString::char32At(v18, (icu::UnicodeString *)v11, (int)a2 + 1);
      icu::UnicodeString::append((uint64_t)a3, v26);
      if (v26 < 0x10000) {
        int v27 = 1;
      }
      else {
        int v27 = 2;
      }
      a2 = (v27 + v5);
    }
    if (v15 < 0x7B) {
      goto LABEL_55;
    }
LABEL_19:
    if (v15 != 39) {
      goto LABEL_66;
    }
    if ((v12 & 0x8000) != 0)
    {
      int v16 = *(_DWORD *)(v11 + 12);
      if ((int)v5 >= v16) {
        goto LABEL_31;
      }
    }
    else
    {
      if ((int)v5 >= (int)(v12 >> 5)) {
        goto LABEL_31;
      }
      int v16 = v12 >> 5;
    }
    if (v16 <= v5)
    {
LABEL_31:
      uint64_t v20 = (int)a2 + 1;
      break;
    }
    uint64_t v19 = (v12 & 2) != 0 ? v11 + 10 : *(void *)(v11 + 24);
    uint64_t v20 = (int)a2 + 1;
    if (*(_WORD *)(v19 + 2 * v5) != 39) {
      break;
    }
    __int16 v37 = 39;
    icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v37, 0, 1);
    a2 = (a2 + 2);
  }
  while ((v12 & 0x8000) == 0)
  {
    if (v20 == v12 >> 5) {
      goto LABEL_81;
    }
    unsigned int v21 = v12 >> 5;
LABEL_36:
    a2 = (int)v20 + 1;
    if (v21 <= v20)
    {
      LOWORD(v23) = -1;
    }
    else
    {
      if ((v12 & 2) != 0) {
        uint64_t v22 = v11 + 10;
      }
      else {
        uint64_t v22 = *(void *)(v11 + 24);
      }
      int v23 = *(unsigned __int16 *)(v22 + 2 * (int)v20);
      if (v23 == 39)
      {
        if ((v12 & 0x8000) != 0)
        {
          int v24 = *(_DWORD *)(v11 + 12);
          if ((int)a2 >= v24) {
            goto LABEL_8;
          }
        }
        else
        {
          if ((int)a2 >= (int)(v12 >> 5)) {
            goto LABEL_8;
          }
          int v24 = v12 >> 5;
        }
        if (v24 <= a2) {
          goto LABEL_8;
        }
        uint64_t v25 = (v12 & 2) != 0 ? v11 + 10 : *(void *)(v11 + 24);
        if (*(_WORD *)(v25 + 2 * a2) != 39) {
          goto LABEL_8;
        }
        a2 = (v20 + 2);
        LOWORD(v23) = 39;
      }
    }
    __int16 v38 = v23;
    icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v38, 0, 1);
    uint64_t v11 = *((void *)this + 2);
    unsigned int v12 = *(unsigned __int16 *)(v11 + 8);
    uint64_t v20 = a2;
  }
  unsigned int v21 = *(_DWORD *)(v11 + 12);
  if (v20 != v21) {
    goto LABEL_36;
  }
LABEL_81:
  if (*(int *)a4 <= 0)
  {
    *a4 = U_INVALID_FORMAT_ERROR;
    *((void *)this + 6) = "quoted literal text missing terminating apostrophe";
    uint64_t v5 = v20;
    if (!*((void *)this + 5)) {
      return v5;
    }
LABEL_89:
    icu::CollationRuleParser::setErrorContext((char *)this);
  }
  return v20;
}

BOOL icu::CollationRuleParser::isSyntaxChar(icu::CollationRuleParser *this)
{
  if ((this - 33) > 0x5D) {
    return 0;
  }
  if (this < 0x30
    || (this - 58) < 0x27 && ((0x7E0000007FuLL >> (this - 58)) & 1) != 0)
  {
    return 1;
  }
  return this > 0x7A;
}

uint64_t icu::CollationRuleParser::readWords(icu::CollationRuleParser *this, int a2, icu::UnicodeString *a3)
{
  if (*((_WORD *)a3 + 4)) {
    __int16 v5 = 2;
  }
  else {
    __int16 v5 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v5;
  uint64_t v6 = icu::CollationRuleParser::skipWhiteSpace(this, a2);
  while (1)
  {
    uint64_t v7 = *((void *)this + 2);
    unsigned int v8 = *(unsigned __int16 *)(v7 + 8);
    if (*(__int16 *)(v7 + 8) < 0)
    {
      int v9 = *(_DWORD *)(v7 + 12);
      if ((int)v6 >= v9) {
        return 0;
      }
    }
    else
    {
      if ((int)v6 >= (int)(v8 >> 5)) {
        return 0;
      }
      int v9 = v8 >> 5;
    }
    if (v9 <= v6)
    {
      uint64_t v11 = 0xFFFFLL;
      goto LABEL_22;
    }
    uint64_t v10 = (v8 & 2) != 0 ? v7 + 10 : *(void *)(v7 + 24);
    uint64_t v11 = *(unsigned __int16 *)(v10 + 2 * (int)v6);
    if ((v11 - 33) <= 0x5D) {
      break;
    }
LABEL_22:
    uint64_t v6 = (v6 + 1);
    if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v11))
    {
      __int16 v20 = 32;
      icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v20, 0, 1);
      uint64_t v6 = icu::CollationRuleParser::skipWhiteSpace(this, v6);
    }
    else
    {
      __int16 v21 = v11;
      icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v21, 0, 1);
    }
  }
  if (v11 < 0x30)
  {
LABEL_16:
    if (v11 != 45) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  uint64_t v12 = (v11 - 58);
  if (v12 > 0x26) {
    goto LABEL_21;
  }
  if (v12 == 37) {
    goto LABEL_22;
  }
  if (((1 << (v11 - 58)) & 0x5E0000007FLL) == 0)
  {
LABEL_21:
    if (v11 < 0x7B) {
      goto LABEL_22;
    }
    goto LABEL_16;
  }
LABEL_26:
  unsigned int v13 = *((unsigned __int16 *)a3 + 4);
  if (v13 >= 0x20)
  {
    int v14 = (__int16)v13;
    unsigned int v15 = v13 >> 5;
    if (v14 < 0) {
      unsigned int v15 = *((_DWORD *)a3 + 3);
    }
    if (icu::UnicodeString::doEqualsSubstring((uint64_t)a3, v15 - 1, 1, (uint64_t)" ", 0, 1))
    {
      unsigned int v16 = *((unsigned __int16 *)a3 + 4);
      if (*((__int16 *)a3 + 4) < 0) {
        unsigned int v17 = *((_DWORD *)a3 + 3);
      }
      else {
        unsigned int v17 = v16 >> 5;
      }
      int v18 = v17 - 1;
      if ((v16 & 1) != 0 && v17 == 1)
      {
        icu::UnicodeString::unBogus((uint64_t)a3);
      }
      else if (v17 > v18)
      {
        if (v18 > 1023)
        {
          *((_WORD *)a3 + 4) = v16 | 0xFFE0;
          *((_DWORD *)a3 + 3) = v18;
        }
        else
        {
          *((_WORD *)a3 + 4) = *((_WORD *)a3 + 4) & 0x1F | (32 * v18);
        }
      }
    }
  }
  return v6;
}

uint64_t sub_18C8F4658(uint64_t a1, __int16 a2)
{
  __int16 v5 = a2;
  icu::UnicodeString::unBogus(a1);
  if (*(__int16 *)(a1 + 8) < 0) {
    uint64_t v3 = *(unsigned int *)(a1 + 12);
  }
  else {
    uint64_t v3 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  return icu::UnicodeString::doReplace(a1, 0, v3, (uint64_t)&v5, 0, 1);
}

void icu::CollationRuleParser::parseReordering(icu::CollationRuleParser *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 > 0) {
    return;
  }
  unsigned int v5 = *((unsigned __int16 *)a2 + 4);
  int v6 = (__int16)v5;
  unsigned int v7 = v5 >> 5;
  if (v6 < 0) {
    unsigned int v7 = *((_DWORD *)a2 + 3);
  }
  if (v7 == 7)
  {
    uint64_t v8 = *((void *)this + 4);
    icu::CollationSettings::resetReordering(v8);
    return;
  }
  *(_OWORD *)int v23 = 0u;
  *(_OWORD *)int v24 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)v23, a3);
  if (*(int *)a3 > 0) {
    goto LABEL_44;
  }
  memset(&v26[1], 0, 48);
  v26[0] = (icu::CollationRuleParser *)((char *)&v26[1] + 5);
  LODWORD(v26[1]) = 40;
  int v10 = 7;
  uint64_t v27 = 0;
  while (1)
  {
    unsigned int v11 = *((unsigned __int16 *)a2 + 4);
    int v12 = (__int16)v11;
    unsigned int v13 = v11 >> 5;
    if (v12 >= 0) {
      int v14 = v13;
    }
    else {
      int v14 = *((_DWORD *)a2 + 3);
    }
    if (v10 >= v14)
    {
      icu::CollationSettings::setReordering(*((icu::CollationSettings **)this + 4), *((const icu::CollationData **)this + 3), v24[1], v23[2], a3);
      goto LABEL_42;
    }
    int v15 = v10 + 1;
    if (v10 < -1)
    {
      int v16 = 0;
      int v17 = 0;
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    if (v12 < 0)
    {
      if (*((_DWORD *)a2 + 3) >= v15) {
        int v16 = v10 + 1;
      }
      else {
        int v16 = *((_DWORD *)a2 + 3);
      }
LABEL_24:
      int v17 = v16;
      unsigned int v13 = *((_DWORD *)a2 + 3);
      goto LABEL_25;
    }
    int v17 = v13 >= v15 ? v10 + 1 : v13;
LABEL_25:
    int v10 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x20u, v17, v13 - v17);
    if (v10 < 0)
    {
      if (*((__int16 *)a2 + 4) < 0) {
        int v10 = *((_DWORD *)a2 + 3);
      }
      else {
        int v10 = *((unsigned __int16 *)a2 + 4) >> 5;
      }
    }
    LODWORD(v27) = 0;
    *(unsigned char *)v26[0] = 0;
    icu::UnicodeString::tempSubString(a2, v15, v10 - v15, (icu::UnicodeString *)v25);
    icu::CharString::appendInvariantChars((icu::CharString *)v26, (const icu::UnicodeString *)v25, a3);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v25);
    if (*(int *)a3 > 0) {
      goto LABEL_42;
    }
    int ReorderCode = icu::CollationRuleParser::getReorderCode(v26[0], v19);
    if (ReorderCode < 0) {
      break;
    }
    int v21 = ReorderCode;
    int v22 = v23[2];
    if (v23[2] >= -1 && v23[3] > v23[2]) {
      goto LABEL_35;
    }
    if (icu::UVector32::expandCapacity((icu::UVector32 *)v23, v23[2] + 1, a3))
    {
      int v22 = v23[2];
LABEL_35:
      v24[1][v22] = v21;
      ++v23[2];
    }
    if (*(int *)a3 >= 1) {
      goto LABEL_42;
    }
  }
  if (*(int *)a3 <= 0)
  {
    *a3 = U_INVALID_FORMAT_ERROR;
    *((void *)this + 6) = "unknown script or reorder code";
    if (*((void *)this + 5)) {
      icu::CollationRuleParser::setErrorContext((char *)this);
    }
  }
LABEL_42:
  if (BYTE4(v26[1])) {
    uprv_free(v26[0]);
  }
LABEL_44:
  icu::UVector32::~UVector32((void **)v23);
}

uint64_t icu::CollationRuleParser::getOnOffValue(icu::CollationRuleParser *this, const icu::UnicodeString *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v18 = L"on";
  icu::UnicodeString::UnicodeString(v19, 1, &v18);
  unsigned int v3 = *((unsigned __int16 *)this + 4);
  if (v3)
  {
    unint64_t v8 = v20;
    char v9 = v20 & 1;
  }
  else
  {
    int v4 = (__int16)v3;
    int v5 = v3 >> 5;
    if (v4 >= 0) {
      int v6 = v5;
    }
    else {
      int v6 = *((_DWORD *)this + 3);
    }
    if ((v20 & 0x8000u) == 0) {
      unint64_t v7 = v20 >> 5;
    }
    else {
      unint64_t v7 = v21;
    }
    if ((v20 & 1) != 0 || v6 != v7)
    {
      icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v19);
      goto LABEL_15;
    }
    char v9 = icu::UnicodeString::doEquals(this, (const icu::UnicodeString *)v19, v6);
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)v19);
  if (v9) {
    return 17;
  }
LABEL_15:
  int v17 = "o";
  icu::UnicodeString::UnicodeString(v19, 1, &v17);
  unsigned int v11 = *((unsigned __int16 *)this + 4);
  if (v11)
  {
    unint64_t v16 = v20;
    int v12 = v20 & 1;
  }
  else
  {
    int v12 = 0;
    int v13 = (__int16)v11;
    int v14 = v11 >> 5;
    if (v13 >= 0) {
      int v15 = v14;
    }
    else {
      int v15 = *((_DWORD *)this + 3);
    }
    if ((v20 & 0x8000u) == 0) {
      unint64_t v16 = v20 >> 5;
    }
    else {
      unint64_t v16 = v21;
    }
    if ((v20 & 1) == 0 && v15 == v16) {
      int v12 = icu::UnicodeString::doEquals(this, (const icu::UnicodeString *)v19, v15);
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)v19);
  if (v12) {
    return 16;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t icu::CollationRuleParser::parseUnicodeSet(icu::CollationRuleParser *this, int a2, icu::UnicodeSet *a3, UErrorCode *a4)
{
  int v7 = 0;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *((void *)this + 2);
  unint64_t v9 = *(unsigned __int16 *)(v8 + 8);
  uint64_t v10 = a2;
  if ((v9 & 0x8000) != 0) {
    goto LABEL_4;
  }
LABEL_2:
  unint64_t v11 = v9 >> 5;
  if (v9 >> 5 == v10)
  {
LABEL_15:
    if (*(int *)a4 >= 1) {
      return v10;
    }
    *a4 = U_INVALID_FORMAT_ERROR;
    int v14 = "unbalanced UnicodeSet pattern brackets";
    goto LABEL_17;
  }
  while (1)
  {
    if (v11 <= v10) {
      goto LABEL_11;
    }
    uint64_t v12 = v8 + 10;
    if ((v9 & 2) == 0) {
      uint64_t v12 = *(void *)(v8 + 24);
    }
    int v13 = *(unsigned __int16 *)(v12 + 2 * v10);
    if (v13 == 93) {
      break;
    }
    if (v13 == 91) {
      ++v7;
    }
LABEL_11:
    ++v10;
    if ((v9 & 0x8000) == 0) {
      goto LABEL_2;
    }
LABEL_4:
    LODWORD(v11) = *(_DWORD *)(v8 + 12);
    if (v10 == v11) {
      goto LABEL_15;
    }
  }
  if (--v7) {
    goto LABEL_11;
  }
  icu::UnicodeString::tempSubString((icu::UnicodeString *)v8, a2, v10 - a2 + 1, (icu::UnicodeString *)v22);
  icu::UnicodeSet::applyPattern(a3, (const icu::UnicodeString *)v22, a4);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v22);
  if (*(int *)a4 < 1)
  {
    uint64_t v17 = icu::CollationRuleParser::skipWhiteSpace(this, (int)v10 + 1);
    uint64_t v10 = v17;
    uint64_t v18 = *((void *)this + 2);
    unsigned int v19 = *(unsigned __int16 *)(v18 + 8);
    if ((v19 & 0x8000) != 0)
    {
      unsigned int v20 = *(_DWORD *)(v18 + 12);
      if (v17 != v20) {
        goto LABEL_28;
      }
    }
    else if (v17 != v19 >> 5)
    {
      unsigned int v20 = v19 >> 5;
LABEL_28:
      if (v20 > v17)
      {
        uint64_t v21 = (v19 & 2) != 0 ? v18 + 10 : *(void *)(v18 + 24);
        if (*(_WORD *)(v21 + 2 * (int)v17) == 93) {
          return (v17 + 1);
        }
      }
    }
    if (*(int *)a4 > 0) {
      return v10;
    }
    *a4 = U_INVALID_FORMAT_ERROR;
    int v14 = "missing option-terminating ']' after UnicodeSet pattern";
LABEL_17:
    *((void *)this + 6) = v14;
    if (*((void *)this + 5)) {
      icu::CollationRuleParser::setErrorContext((char *)this);
    }
    return v10;
  }
  *a4 = U_INVALID_FORMAT_ERROR;
  *((void *)this + 6) = "not a valid UnicodeSet pattern";
  if (*((void *)this + 5)) {
    icu::CollationRuleParser::setErrorContext((char *)this);
  }
  return ++v10;
}

uint64_t icu::CollationRuleParser::getReorderCode(icu::CollationRuleParser *this, const char *a2)
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (!uprv_stricmp(this, (unsigned __int8 *)off_1E550A8A0[i])) {
      return (i + 4096);
    }
  }
  uint64_t result = u_getPropertyValueEnum(UCHAR_SCRIPT, (const char *)this);
  if ((result & 0x80000000) != 0)
  {
    if (uprv_stricmp(this, "others")) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 103;
    }
  }
  return result;
}

uint64_t sub_18C8F4DB4(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  if ((int)*a3 <= 0)
  {
    uint64_t v4 = result;
    *(_DWORD *)(result + 96) = *a3;
    uint64_t v5 = a2[4];
    *(void *)uint64_t result = a2;
    *(void *)(result + 8) = v5;
    uint64_t result = utrie2_enum(*a2, 0, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_18C8F4E18, result);
    *a3 = *(_DWORD *)(v4 + 96);
  }
  return result;
}

BOOL sub_18C8F4E18(uint64_t a1, icu::Collation *a2, int a3, uint64_t a4)
{
  return a4 == 192 || sub_18C8F4E2C(a1, a2, a3, a4);
}

BOOL sub_18C8F4E2C(uint64_t a1, icu::Collation *a2, int a3, uint64_t a4)
{
  unsigned int IndirectCE32 = a4;
  if ((~a4 & 0xC0) != 0
    || (unsigned int IndirectCE32 = icu::CollationData::getIndirectCE32(*(icu::CollationData **)a1, a4), IndirectCE32 != 192))
  {
    unsigned int v8 = IndirectCE32 & 0xF;
    if (a3 <= (int)a2) {
      int v9 = (int)a2;
    }
    else {
      int v9 = a3;
    }
    int v10 = v9 + 1;
    do
    {
      unint64_t v11 = *(uint64_t **)(a1 + 8);
      uint64_t v12 = sub_18C8DD7F8(v11, a2);
      unsigned int FinalCE32 = icu::CollationData::getFinalCE32((icu::CollationData *)v11, v12);
      if ((IndirectCE32 & 0xC0) == 0xC0 && (v8 > 4 || ((1 << v8) & 0x16) == 0)
        || (~FinalCE32 & 0xC0) == 0
        && ((FinalCE32 & 0xF) <= 4 ? (BOOL v14 = ((1 << (FinalCE32 & 0xF)) & 0x16) == 0) : (BOOL v14 = 1), v14))
      {
        sub_18C8F4F54(a1, a2, IndirectCE32, FinalCE32);
      }
      else if (IndirectCE32 != FinalCE32)
      {
        icu::UnicodeSet::add(*(icu::UnicodeSet **)(a1 + 16), a2);
      }
      a2 = (icu::Collation *)(a2 + 1);
    }
    while (v10 != a2);
  }
  return *(_DWORD *)(a1 + 96) < 1;
}

void sub_18C8F4F54(uint64_t a1, icu::Collation *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = a4;
  unsigned int FinalCE32 = a3;
  if ((a3 & 0xCF) == 0xC8)
  {
    unsigned int v8 = (unsigned __int16 *)(*(void *)(*(void *)a1 + 24) + 2 * (a3 >> 13));
    unsigned int FinalCE32 = icu::CollationData::getFinalCE32(*(icu::CollationData **)a1, v8[1] | (*v8 << 16));
    if ((v4 & 0xCF) == 0xC8)
    {
      int v9 = *(icu::CollationData **)(a1 + 8);
      int v10 = (unsigned __int16 *)(*((void *)v9 + 3) + 2 * (v4 >> 13));
      unsigned int v4 = icu::CollationData::getFinalCE32(v9, v10[1] | (*v10 << 16));
      sub_18C8F5330(a1, (uint64_t)a2, (uint64_t)(v8 + 2), (uint64_t)(v10 + 2));
      goto LABEL_8;
    }
    uint64_t v12 = *(icu::CollationData **)a1;
  }
  else
  {
    if ((a4 & 0xCF) != 0xC8) {
      goto LABEL_8;
    }
    unint64_t v11 = *(icu::CollationData **)(a1 + 8);
    unsigned int v8 = (unsigned __int16 *)(*((void *)v11 + 3) + 2 * (a4 >> 13));
    unsigned int v4 = icu::CollationData::getFinalCE32(v11, v8[1] | (*v8 << 16));
    uint64_t v12 = *(icu::CollationData **)(a1 + 8);
  }
  sub_18C8F55B4(a1, v12, a2, (uint64_t)(v8 + 2));
LABEL_8:
  if ((FinalCE32 & 0xCF) != 0xC9)
  {
    if ((v4 & 0xCF) != 0xC9) {
      goto LABEL_20;
    }
    BOOL v14 = *(icu::CollationData **)(a1 + 8);
    int v13 = (unsigned __int16 *)(*((void *)v14 + 3) + 2 * (v4 >> 13));
    unsigned int v4 = icu::CollationData::getFinalCE32(v14, v13[1] | (*v13 << 16));
    goto LABEL_17;
  }
  int v13 = (unsigned __int16 *)(*(void *)(*(void *)a1 + 24) + 2 * (FinalCE32 >> 13));
  if ((FinalCE32 & 0x100) != 0) {
    unsigned int FinalCE32 = 1;
  }
  else {
    unsigned int FinalCE32 = icu::CollationData::getFinalCE32(*(icu::CollationData **)a1, v13[1] | (*v13 << 16));
  }
  if ((v4 & 0xCF) != 0xC9)
  {
LABEL_17:
    sub_18C8F591C(a1, a2, (uint64_t)(v13 + 2));
    goto LABEL_20;
  }
  int v15 = *(icu::CollationData **)(a1 + 8);
  unint64_t v16 = (unsigned __int16 *)(*((void *)v15 + 3) + 2 * (v4 >> 13));
  if ((v4 & 0x100) != 0) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = icu::CollationData::getFinalCE32(v15, v16[1] | (*v16 << 16));
  }
  sub_18C8F56A8(a1, (uint64_t)a2, (uint64_t)(v13 + 2), (uint64_t)(v16 + 2));
LABEL_20:
  if ((~FinalCE32 & 0xC0) != 0) {
    int v17 = -1;
  }
  else {
    int v17 = FinalCE32 & 0xF;
  }
  if ((~v4 & 0xC0) != 0)
  {
    int v18 = -1;
  }
  else
  {
    int v18 = v4 & 0xF;
    if (v18 == 14)
    {
      if ((FinalCE32 & 0xCF) != 0xC1
        || (FinalCE32 & 0xFFFFFF00) != icu::Collation::getThreeBytePrimaryForOffsetData(a2, *(void *)(*(void *)(*(void *)(a1 + 8) + 16)+ 8 * (v4 >> 13))))
      {
        goto LABEL_52;
      }
      int v18 = 14;
    }
  }
  if (v17 == v18)
  {
    switch(v17)
    {
      case 12:
        int v25 = a2 - 44032;
        if (!icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 16), (unsigned __int16)(((int)a2 - 44032) / 588 + 4352))&& !icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 16), v25 / 28 % 21 + 4449)&& (!(v25 % 28) || !icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 16), v25 % 28 + 4519)))
        {
          return;
        }
        break;
      case 6:
        uint64_t v26 = (FinalCE32 >> 8) & 0x1F;
        if (v26 == ((v4 >> 8) & 0x1F))
        {
          if (!v26) {
            return;
          }
          uint64_t v27 = (uint64_t *)(*(void *)(*(void *)a1 + 16) + 8 * (FinalCE32 >> 13));
          uint64_t v28 = (uint64_t *)(*(void *)(*(void *)(a1 + 8) + 16) + 8 * (v4 >> 13));
          while (1)
          {
            uint64_t v30 = *v27++;
            uint64_t v29 = v30;
            uint64_t v31 = *v28++;
            if (v29 != v31) {
              break;
            }
            if (!--v26) {
              return;
            }
          }
        }
        break;
      case 5:
        uint64_t v19 = (FinalCE32 >> 8) & 0x1F;
        if (v19 == ((v4 >> 8) & 0x1F))
        {
          if (!v19) {
            return;
          }
          unsigned int v20 = (int *)(*(void *)(*(void *)a1 + 8) + 4 * (FinalCE32 >> 13));
          uint64_t v21 = (int *)(*(void *)(*(void *)(a1 + 8) + 8) + 4 * (v4 >> 13));
          while (1)
          {
            int v23 = *v20++;
            int v22 = v23;
            int v24 = *v21++;
            if (v22 != v24) {
              break;
            }
            if (!--v19) {
              return;
            }
          }
        }
        break;
      default:
        if (FinalCE32 == v4) {
          return;
        }
        break;
    }
  }
LABEL_52:

  sub_18C8F59FC(a1, a2);
}

void sub_18C8F5330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  long long v25 = 0u;
  memset(v24, 0, sizeof(v24));
  uint64_t v19 = a3;
  int v7 = (UErrorCode *)(a1 + 96);
  icu::UCharsTrie::Iterator::Iterator(v24, &v19, 0, a1 + 96);
  uint64_t v23 = 0;
  long long v22 = 0u;
  memset(v21, 0, sizeof(v21));
  uint64_t v18 = a4;
  icu::UCharsTrie::Iterator::Iterator(v21, &v18, 0, v7);
  memset(v20, 0, sizeof(v20));
  icu::UnicodeString::UnicodeString((uint64_t)v20, 0xFFFF);
  int v9 = 0;
  int v10 = 0;
  while (1)
  {
    if (v9)
    {
      if (v10) {
        goto LABEL_11;
      }
    }
    else
    {
      if (icu::UCharsTrie::Iterator::next((uint64_t *)v8, (icu::UCharsTrie::Iterator *)v24, v7)) {
        int v9 = (char *)&v24[2] + 8;
      }
      else {
        int v9 = (char *)v20;
      }
      if (v10) {
        goto LABEL_11;
      }
    }
    int v10 = (char *)&v21[2] + 8;
    if (icu::UCharsTrie::Iterator::next((uint64_t *)v8, (icu::UCharsTrie::Iterator *)v21, v7)) {
      goto LABEL_13;
    }
    int v10 = (char *)v20;
LABEL_11:
    if (v9 == (char *)v20 && v10 == (char *)v20) {
      break;
    }
LABEL_13:
    unsigned int v11 = *((unsigned __int16 *)v9 + 4);
    if (*((__int16 *)v9 + 4) < 0) {
      int32_t v12 = *((_DWORD *)v9 + 3);
    }
    else {
      int32_t v12 = v11 >> 5;
    }
    unsigned int v13 = *((unsigned __int16 *)v10 + 4);
    if (v13)
    {
      if (v11) {
        goto LABEL_27;
      }
LABEL_25:
      sub_18C8F5B0C(a1, *(icu::CollationData **)(a1 + 8), (UChar **)v10, a2, HIDWORD(v22));
      int v10 = 0;
    }
    else
    {
      if ((v13 & 0x8000u) == 0) {
        int v14 = v13 >> 5;
      }
      else {
        int v14 = *((_DWORD *)v10 + 3);
      }
      if ((v13 & 2) != 0) {
        uint64_t v15 = (uint64_t)(v10 + 10);
      }
      else {
        uint64_t v15 = *((void *)v10 + 3);
      }
      int v16 = icu::UnicodeString::doCompare((uint64_t)v9, 0, v12, v15, v14 & (v14 >> 31), v14 & ~(v14 >> 31));
      if (v16 < 0)
      {
        sub_18C8F5B0C(a1, *(icu::CollationData **)a1, (UChar **)v9, a2, HIDWORD(v25));
        int v9 = 0;
      }
      else
      {
        if (v16) {
          goto LABEL_25;
        }
LABEL_27:
        sub_18C8F5BFC(a1, (UChar **)v9);
        sub_18C8F4F54(a1, a2, HIDWORD(v25), HIDWORD(v22));
        int v9 = 0;
        int v10 = 0;
        __int16 v17 = *(_WORD *)(a1 + 32);
        if (v17) {
          uint64_t v8 = 2;
        }
        else {
          uint64_t v8 = v17 & 0x1F;
        }
        *(_WORD *)(a1 + 32) = v8;
      }
    }
  }
  icu::UnicodeString::~UnicodeString((void *)(v10 == (char *)v20), (icu::UnicodeString *)v20);
  icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v21);
  icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v24);
}

void sub_18C8F55B4(uint64_t a1, icu::CollationData *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = a4;
  int v7 = (UErrorCode *)(a1 + 96);
  icu::UCharsTrie::Iterator::Iterator(v11, &v10, 0, a1 + 96);
  uint64_t v9 = v10;
  if (icu::UCharsTrie::Iterator::next(&v9, (icu::UCharsTrie::Iterator *)v11, v7))
  {
    do
      sub_18C8F5B0C(a1, a2, (UChar **)&v11[2] + 1, a3, HIDWORD(v12));
    while (icu::UCharsTrie::Iterator::next(v8, (icu::UCharsTrie::Iterator *)v11, v7));
  }
  icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v11);
}

void sub_18C8F56A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  long long v25 = 0u;
  memset(v24, 0, sizeof(v24));
  uint64_t v18 = a3;
  int v7 = (UErrorCode *)(a1 + 96);
  icu::UCharsTrie::Iterator::Iterator(v24, &v18, 0, a1 + 96);
  uint64_t v23 = 0;
  long long v22 = 0u;
  memset(v21, 0, sizeof(v21));
  uint64_t v17 = a4;
  icu::UCharsTrie::Iterator::Iterator(v21, &v17, 0, v7);
  memset(v20, 0, sizeof(v20));
  icu::UnicodeString::UnicodeString((uint64_t)v20, 0xFFFF);
  __int16 v19 = -1;
  icu::UnicodeString::doAppend((uint64_t)v20, (uint64_t)&v19, 0, 1);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  while (1)
  {
    if (v9)
    {
      if (v10) {
        goto LABEL_11;
      }
    }
    else
    {
      if (icu::UCharsTrie::Iterator::next(v8, (icu::UCharsTrie::Iterator *)v24, v7)) {
        uint64_t v9 = &v24[40];
      }
      else {
        uint64_t v9 = v20;
      }
      if (v10) {
        goto LABEL_11;
      }
    }
    uint64_t v10 = (char *)&v21[2] + 8;
    if (icu::UCharsTrie::Iterator::next(v8, (icu::UCharsTrie::Iterator *)v21, v7)) {
      goto LABEL_13;
    }
    uint64_t v10 = (char *)v20;
LABEL_11:
    if (v9 == (unsigned char *)v20 && v10 == (char *)v20) {
      break;
    }
LABEL_13:
    unsigned int v11 = *((unsigned __int16 *)v9 + 4);
    if (*((__int16 *)v9 + 4) < 0) {
      int32_t v12 = *((_DWORD *)v9 + 3);
    }
    else {
      int32_t v12 = v11 >> 5;
    }
    unsigned int v13 = *((unsigned __int16 *)v10 + 4);
    if (v13)
    {
      if (v11) {
        goto LABEL_27;
      }
LABEL_25:
      sub_18C8F5C54(a1, a2, (uint64_t)v10);
      uint64_t v10 = 0;
    }
    else
    {
      if ((v13 & 0x8000u) == 0) {
        int v14 = v13 >> 5;
      }
      else {
        int v14 = *((_DWORD *)v10 + 3);
      }
      if ((v13 & 2) != 0) {
        uint64_t v15 = (uint64_t)(v10 + 10);
      }
      else {
        uint64_t v15 = *((void *)v10 + 3);
      }
      int v16 = icu::UnicodeString::doCompare((uint64_t)v9, 0, v12, v15, v14 & (v14 >> 31), v14 & ~(v14 >> 31));
      if (v16 < 0)
      {
        sub_18C8F5C54(a1, a2, (uint64_t)v9);
        uint64_t v9 = 0;
      }
      else
      {
        if (v16) {
          goto LABEL_25;
        }
LABEL_27:
        *(void *)(a1 + 88) = v9;
        sub_18C8F4F54(a1, a2, HIDWORD(v25), HIDWORD(v22));
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        *(void *)(a1 + 88) = 0;
      }
    }
  }
  icu::UnicodeString::~UnicodeString((void *)(v10 == (char *)v20), (icu::UnicodeString *)v20);
  icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v21);
  icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v24);
}

void sub_18C8F591C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t v8 = a3;
  uint64_t v5 = (UErrorCode *)(a1 + 96);
  icu::UCharsTrie::Iterator::Iterator(v9, &v8, 0, a1 + 96);
  uint64_t v7 = v8;
  if (icu::UCharsTrie::Iterator::next(&v7, (icu::UCharsTrie::Iterator *)v9, v5))
  {
    do
      sub_18C8F5C54(a1, a2, (uint64_t)&v9[2] + 8);
    while (icu::UCharsTrie::Iterator::next(v6, (icu::UCharsTrie::Iterator *)v9, v5));
  }
  icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v9);
}

icu::UnicodeSet *sub_18C8F59FC(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int16 *)(a1 + 32) > 0x1Fu || *(void *)(a1 + 88))
  {
    memset(v12, 0, sizeof(v12));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v12, (UChar **)(a1 + 24));
    icu::UnicodeString::append((uint64_t)v12, a2);
    uint64_t v4 = *(void *)(a1 + 88);
    if (v4)
    {
      unsigned int v5 = *(unsigned __int16 *)(v4 + 8);
      int v6 = (__int16)v5;
      unsigned int v7 = v5 >> 5;
      if (v6 >= 0) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = *(unsigned int *)(v4 + 12);
      }
      icu::UnicodeString::doAppend((uint64_t)v12, (const icu::UnicodeString *)v4, 0, v8);
    }
    icu::UnicodeSet::add(*(icu::UnicodeSet **)(a1 + 16), (const icu::UnicodeString *)v12);
    return (icu::UnicodeSet *)icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
  }
  else
  {
    uint64_t v11 = *(icu::UnicodeSet **)(a1 + 16);
    return icu::UnicodeSet::add(v11, a2);
  }
}

void *sub_18C8F5B0C(uint64_t a1, icu::CollationData *a2, UChar **a3, unsigned int a4, uint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  sub_18C8F5BFC(a1, a3);
  unsigned int FinalCE32 = icu::CollationData::getFinalCE32(a2, a5);
  if ((FinalCE32 & 0xCF) == 0xC9) {
    sub_18C8F591C(a1, a4, *((void *)a2 + 3) + 2 * (FinalCE32 >> 13) + 4);
  }
  uint64_t v10 = *(icu::UnicodeSet **)(a1 + 16);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v15, (UChar **)(a1 + 24));
  uint64_t v11 = (const icu::UnicodeString *)icu::UnicodeString::append((uint64_t)v15, a4);
  icu::UnicodeSet::add(v10, v11);
  uint64_t result = icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
  if (*(_WORD *)(a1 + 32)) {
    __int16 v14 = 2;
  }
  else {
    __int16 v14 = *(_WORD *)(a1 + 32) & 0x1F;
  }
  *(_WORD *)(a1 + 32) = v14;
  return result;
}

icu::UnicodeString *sub_18C8F5BFC(uint64_t a1, UChar **a2)
{
  unsigned int v3 = (icu::UnicodeString *)(a1 + 24);
  icu::UnicodeString::operator=((UChar **)(a1 + 24), a2);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 32);
  if ((v4 & 0x8000) != 0) {
    int v5 = *(_DWORD *)(a1 + 36);
  }
  else {
    int v5 = v4 >> 5;
  }

  return icu::UnicodeString::doReverse(v3, 0, v5);
}

void *sub_18C8F5C54(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v5 = *(icu::UnicodeSet **)(a1 + 16);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v14, (UChar **)(a1 + 24));
  uint64_t v6 = icu::UnicodeString::append((uint64_t)v14, a2);
  unsigned int v7 = *(unsigned __int16 *)(a3 + 8);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  if (v8 >= 0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = *(unsigned int *)(a3 + 12);
  }
  uint64_t v11 = (const icu::UnicodeString *)icu::UnicodeString::doAppend(v6, (const icu::UnicodeString *)a3, 0, v10);
  icu::UnicodeSet::add(v5, v11);
  return icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v14);
}

uint64_t sub_18C8F5D08(uint64_t result, uint64_t *a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v5 = result;
    *(_DWORD *)(result + 760) = *a3;
    if (a2[4]) {
      *(unsigned char *)(result + 33) = -1;
    }
    *(void *)uint64_t result = a2;
    uint64_t result = utrie2_enum(*a2, 0, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_18C8F5DD0, result);
    int v6 = *(_DWORD *)(v5 + 760);
    if (a2[4])
    {
      if (v6 <= 0)
      {
        icu::UnicodeSet::freeze((icu::UnicodeSet *)(v5 + 40));
        *(unsigned char *)(v5 + 33) = 1;
        unsigned int v7 = (uint64_t *)a2[4];
        *(void *)uint64_t v5 = v7;
        uint64_t result = utrie2_enum(*v7, 0, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_18C8F5DD0, v5);
        int v6 = *(_DWORD *)(v5 + 760);
      }
    }
    *a3 = v6;
  }
  return result;
}

BOOL sub_18C8F5DD0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!*(unsigned char *)(a1 + 33)) {
    goto LABEL_14;
  }
  if (*(char *)(a1 + 33) < 0)
  {
    if (a4 == 192) {
      return 1;
    }
    icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 40), a2, a3);
  }
  else
  {
    if (a2 == a3)
    {
      if (!icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 40), a2)) {
        goto LABEL_14;
      }
      return 1;
    }
    if (!icu::UnicodeSet::containsNone((icu::UnicodeSet *)(a1 + 40), a2, a3))
    {
      unsigned int v9 = (icu::UVector **)icu::UnicodeSet::set((icu::UnicodeSet *)(a1 + 240), a2, a3);
      icu::UnicodeSet::removeAll(v9, (const icu::UnicodeSet *)(a1 + 40));
      int RangeCount = icu::UnicodeSet::getRangeCount((icu::UnicodeSet *)(a1 + 240));
      if (RangeCount >= 1)
      {
        int v11 = RangeCount;
        for (int i = 0; i != v11; ++i)
        {
          uint64_t RangeStart = icu::UnicodeSet::getRangeStart((icu::UnicodeSet *)(a1 + 240), i);
          uint64_t RangeEnd = icu::UnicodeSet::getRangeEnd((icu::UnicodeSet *)(a1 + 240), i);
          sub_18C8F5F88((void **)a1, RangeStart, RangeEnd, a4);
        }
      }
      return *(_DWORD *)(a1 + 760) < 1;
    }
  }
LABEL_14:
  sub_18C8F5F88((void **)a1, a2, a3, a4);
  return *(_DWORD *)(a1 + 760) < 1;
}

void sub_18C8F5F00(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  if ((int)*a4 <= 0)
  {
    int v6 = a2;
    *(_DWORD *)(a1 + 760) = *a4;
    unsigned int v8 = sub_18C8DD7F8(a2, a3);
    if (v8 == 192)
    {
      int v6 = (uint64_t *)v6[4];
      unsigned int v8 = sub_18C8DD7F8(v6, a3);
    }
    *(void *)a1 = v6;
    sub_18C8F5F88((void **)a1, a3, a3, v8);
    *a4 = *(_DWORD *)(a1 + 760);
  }
}

void sub_18C8F5F88(void **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if ((~a4 & 0xC0) != 0)
  {
LABEL_7:
    unsigned int v8 = a1[3];
    if (v8)
    {
LABEL_8:
      unsigned int v9 = *(void (**)(void))(*v8 + 16);
      v9();
    }
  }
  else
  {
    unsigned int v5 = a3;
    unsigned int v6 = a2;
    while (2)
    {
      switch(a4 & 0xF)
      {
        case 1u:
          unsigned int v8 = a1[3];
          if (v8) {
            goto LABEL_8;
          }
          return;
        case 2u:
          unsigned int v8 = a1[3];
          if (v8) {
            goto LABEL_8;
          }
          return;
        case 3u:
        case 7u:
        case 0xDu:
          if (*((int *)a1 + 190) <= 0) {
            *((_DWORD *)a1 + 190) = 5;
          }
          return;
        case 4u:
          uint64_t v10 = a1[3];
          if (!v10) {
            goto LABEL_31;
          }
          a1[64] = (void *)((a4 >> 8) & 0xFF00 | ((unint64_t)((a4 & 0xFF000000) >> 24) << 56) | 0x5000000);
          a1[65] = (void *)((BYTE1(a4) << 24) | 0x500u);
          int v11 = *(void (**)(void))(*v10 + 24);
          goto LABEL_30;
        case 5u:
          int32_t v12 = a1[3];
          if (!v12) {
            goto LABEL_31;
          }
          if (((a4 >> 8) & 0x1F) != 0)
          {
            uint64_t v13 = (int *)((*a1)[1] + 4 * (a4 >> 13));
            __int16 v14 = (unint64_t *)(a1 + 64);
            uint64_t v15 = (a4 >> 8) & 0x1F;
            do
            {
              int v17 = *v13++;
              int v16 = v17;
              uint64_t v18 = v17;
              uint64_t v19 = v17 & 0xFFFFFF00;
              if ((v17 & 0xF) == 1) {
                uint64_t v19 = (v19 << 32) | 0x5000500;
              }
              unint64_t v20 = (v16 << 16) & 0xFF000000 | ((unint64_t)((v16 & 0xFFFF0000) >> 16) << 48) | (v18 << 8);
              if (v18 > 0xBF) {
                unint64_t v20 = v19;
              }
              *v14++ = v20;
              --v15;
            }
            while (v15);
          }
          int v11 = *(void (**)(void))(*v12 + 24);
          goto LABEL_30;
        case 6u:
          uint64_t v21 = a1[3];
          if (!v21) {
            goto LABEL_31;
          }
          int v11 = *(void (**)(void))(*v21 + 24);
LABEL_30:
          v11();
LABEL_31:
          if (*((unsigned __int16 *)a1 + 224) <= 0x1Fu)
          {
            sub_18C8F6484((uint64_t)a1, v6, v5);
          }
          return;
        case 8u:
          sub_18C8F64B0((uint64_t)a1, a2, a3, a4);
          return;
        case 9u:
          sub_18C8F6618(a1, a2, a3, a4);
          return;
        case 0xAu:
          unsigned int v7 = (unsigned int *)((*a1)[1] + 4 * (a4 >> 13));
          goto LABEL_6;
        case 0xBu:
          unsigned int v7 = (unsigned int *)(*a1)[1];
LABEL_6:
          a4 = *v7;
          if ((~*v7 & 0xC0) != 0) {
            goto LABEL_7;
          }
          continue;
        case 0xCu:
          if (!a1[3]) {
            goto LABEL_47;
          }
          long long v31 = 0u;
          long long v32 = 0u;
          memset(v30, 0, sizeof(v30));
          long long v29 = 0u;
          uint64_t v22 = (uint64_t)*a1;
          v28[1] = **a1;
          v28[2] = v22;
          *((void *)&v29 + 1) = (char *)v30 + 8;
          LODWORD(v30[0]) = 40;
          DWORD2(v31) = 0;
          DWORD2(v32) = -1;
          v28[0] = &unk_1EDA54650;
          unsigned int v34 = 0;
          int v35 = 0;
          int v33 = 0;
          if ((int)a2 > (int)a3) {
            goto LABEL_46;
          }
          uint64_t v23 = (int *)(a1 + 95);
          int v24 = a3 + 1;
          int v25 = a2;
          break;
        default:
          return;
      }
      break;
    }
    do
    {
      __int16 v27 = v25;
      icu::CollationIterator::reset((uint64_t)v28);
      int v33 = &v27;
      unsigned int v34 = &v27;
      int v35 = v28;
      int CEs = icu::CollationIterator::fetchCEs((icu::CollationIterator *)v28, (UErrorCode *)a1 + 190);
      if (*v23 > 0)
      {
        icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)v28);
        return;
      }
      (*(void (**)(void *, void, void))(*a1[3] + 24))(a1[3], *((void *)&v29 + 1), (CEs - 1));
      ++v25;
    }
    while (v24 != v25);
LABEL_46:
    icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)v28);
LABEL_47:
    if (*((unsigned __int16 *)a1 + 224) <= 0x1Fu) {
      sub_18C8F6484((uint64_t)a1, v6, v5);
    }
  }
}

icu::UnicodeSet *sub_18C8F6484(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(unsigned __int16 *)(a1 + 448) > 0x1Fu || *(void *)(a1 + 504)) {
    return (icu::UnicodeSet *)sub_18C8F67D0((UChar **)a1, a2, a3, *(icu::UnicodeSet **)(a1 + 16));
  }
  uint64_t result = *(icu::UnicodeSet **)(a1 + 16);
  if (result) {
    return icu::UnicodeSet::add(result, a2, a3);
  }
  return result;
}

void sub_18C8F64B0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(*(void *)a1 + 24) + 2 * (a4 >> 13);
  ((void (*)(void))sub_18C8F5F88)();
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v14 = 0;
    long long v13 = 0u;
    memset(v12, 0, sizeof(v12));
    uint64_t v11 = v7 + 4;
    icu::UCharsTrie::Iterator::Iterator(v12, &v11, 0, a1 + 760);
    uint64_t v10 = v11;
    if (icu::UCharsTrie::Iterator::next(&v10, (icu::UCharsTrie::Iterator *)v12, (UErrorCode *)(a1 + 760)))
    {
      do
      {
        sub_18C8F6778(a1, (UChar **)&v12[2] + 1);
        sub_18C8F67D0((UChar **)a1, a2, a3, *(icu::UnicodeSet **)(a1 + 8));
        sub_18C8F67D0((UChar **)a1, a2, a3, *(icu::UnicodeSet **)(a1 + 16));
        sub_18C8F5F88(a1, a2, a3, HIDWORD(v13));
      }
      while (icu::UCharsTrie::Iterator::next(v8, (icu::UCharsTrie::Iterator *)v12, (UErrorCode *)(a1 + 760)));
    }
    if (*(_WORD *)(a1 + 448)) {
      __int16 v9 = 2;
    }
    else {
      __int16 v9 = *(_WORD *)(a1 + 448) & 0x1F;
    }
    *(_WORD *)(a1 + 448) = v9;
    icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v12);
  }
}

void sub_18C8F6618(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (unsigned __int16 *)(*(void *)(*a1 + 24) + 2 * (a4 >> 13));
  if ((a4 & 0x100) == 0) {
    sub_18C8F5F88(a1, a2, a3, v7[1] | (*v7 << 16));
  }
  uint64_t v13 = 0;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = (uint64_t)(v7 + 2);
  icu::UCharsTrie::Iterator::Iterator(v11, &v10, 0, a1 + 95);
  uint64_t v9 = v10;
  if (icu::UCharsTrie::Iterator::next(&v9, (icu::UCharsTrie::Iterator *)v11, (UErrorCode *)a1 + 190))
  {
    do
    {
      a1[63] = (char *)&v11[2] + 8;
      sub_18C8F67D0((UChar **)a1, a2, a3, (icu::UnicodeSet *)a1[1]);
      if (*((unsigned __int16 *)a1 + 224) >= 0x20u) {
        sub_18C8F67D0((UChar **)a1, a2, a3, (icu::UnicodeSet *)a1[2]);
      }
      sub_18C8F5F88(a1, a2, a3, HIDWORD(v12));
    }
    while (icu::UCharsTrie::Iterator::next(v8, (icu::UCharsTrie::Iterator *)v11, (UErrorCode *)a1 + 190));
  }
  a1[63] = 0;
  icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v11);
}

icu::UnicodeString *sub_18C8F6778(uint64_t a1, UChar **a2)
{
  unsigned int v3 = (icu::UnicodeString *)(a1 + 440);
  icu::UnicodeString::operator=((UChar **)(a1 + 440), a2);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 448);
  if ((v4 & 0x8000) != 0) {
    int v5 = *(_DWORD *)(a1 + 452);
  }
  else {
    int v5 = v4 >> 5;
  }

  return icu::UnicodeString::doReverse(v3, 0, v5);
}

UChar **sub_18C8F67D0(UChar **result, signed int a2, signed int a3, icu::UnicodeSet *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v7 = result;
    memset(v18, 0, sizeof(v18));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v18, result + 55);
    if (a3 <= a2) {
      signed int v8 = a2;
    }
    else {
      signed int v8 = a3;
    }
    int v9 = v8 + 1;
    do
    {
      icu::UnicodeString::append((uint64_t)v18, a2);
      uint64_t v10 = v7[63];
      if (v10)
      {
        unsigned int v11 = v10[4];
        int v12 = (__int16)v11;
        unsigned int v13 = v11 >> 5;
        if (v12 >= 0) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = *((unsigned int *)v10 + 3);
        }
        icu::UnicodeString::doAppend((uint64_t)v18, (const icu::UnicodeString *)v10, 0, v14);
      }
      icu::UnicodeSet::add(a4, (const icu::UnicodeString *)v18);
      unsigned int v15 = *((unsigned __int16 *)v7 + 224);
      if ((v15 & 0x8000) != 0) {
        int v16 = (void *)*((unsigned int *)v7 + 113);
      }
      else {
        int v16 = (void *)(v15 >> 5);
      }
      if (v16 || (BYTE8(v18[0]) & 1) == 0)
      {
        if ((SWORD4(v18[0]) & 0x8000u) == 0) {
          unsigned int v17 = WORD4(v18[0]) >> 5;
        }
        else {
          unsigned int v17 = HIDWORD(v18[0]);
        }
        if (v17 > v16)
        {
          if ((int)v16 > 1023)
          {
            WORD4(v18[0]) = BYTE8(v18[0]) | 0xFFE0;
            HIDWORD(v18[0]) = v16;
          }
          else
          {
            WORD4(v18[0]) = BYTE8(v18[0]) & 0x1F | (32 * (_WORD)v16);
          }
        }
      }
      else
      {
        icu::UnicodeString::unBogus((uint64_t)v18);
      }
      ++a2;
    }
    while (v9 != a2);
    return (UChar **)icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v18);
  }
  return result;
}

icu::CollationSettings *icu::CollationSettings::CollationSettings(icu::CollationSettings *this, const icu::CollationSettings *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDA4A028;
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  UErrorCode v5 = U_ZERO_ERROR;
  icu::CollationSettings::copyReorderingFrom(this, a2, &v5);
  if ((*((_DWORD *)this + 20) & 0x80000000) == 0) {
    memcpy((char *)this + 84, (char *)a2 + 84, 0x300uLL);
  }
  return this;
}

_DWORD *icu::CollationSettings::copyReorderingFrom(_DWORD *this, const icu::CollationSettings *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    unsigned int v3 = (const unsigned __int8 *)*((void *)a2 + 4);
    if (v3)
    {
      this[10] = *((_DWORD *)a2 + 10);
      if (*((_DWORD *)a2 + 19))
      {
        return icu::CollationSettings::setReorderArrays(this, *((const int **)a2 + 8), *((_DWORD *)a2 + 18), *((const unsigned int **)a2 + 6), *((_DWORD *)a2 + 14), v3, a3);
      }
      else
      {
        *((void *)this + 4) = v3;
        *((void *)this + 6) = *((void *)a2 + 6);
        this[14] = *((_DWORD *)a2 + 14);
        *((void *)this + 8) = *((void *)a2 + 8);
        this[18] = *((_DWORD *)a2 + 18);
      }
    }
    else
    {
      *((void *)this + 4) = 0;
      this[10] = 0;
      this[14] = 0;
      this[18] = 0;
    }
  }
  return this;
}

void icu::CollationSettings::~CollationSettings(void **this)
{
  *this = &unk_1EDA4A028;
  if (*((_DWORD *)this + 19)) {
    uprv_free(this[8]);
  }

  icu::SharedObject::~SharedObject((icu::SharedObject *)this);
}

{
  void *v1;
  uint64_t vars8;

  icu::CollationSettings::~CollationSettings(this);

  icu::UMemory::operator delete(v1);
}

BOOL icu::CollationSettings::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 != *(_DWORD *)(a2 + 24) || (v2 & 0xC) != 0 && *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
    return 0;
  }
  unint64_t v3 = *(unsigned int *)(a1 + 72);
  if (v3 != *(_DWORD *)(a2 + 72)) {
    return 0;
  }
  if ((int)v3 < 1) {
    return 1;
  }
  unsigned int v4 = *(_DWORD **)(a1 + 64);
  UErrorCode v5 = *(_DWORD **)(a2 + 64);
  if (*v4 != *v5) {
    return 0;
  }
  uint64_t v6 = 1;
  do
  {
    unint64_t v7 = v6;
    if (v3 == v6) {
      break;
    }
    int v8 = v4[v6];
    int v9 = v5[v6++];
  }
  while (v8 == v9);
  return v7 >= v3;
}

uint64_t icu::CollationSettings::hashCode(icu::CollationSettings *this)
{
  int v2 = *((_DWORD *)this + 6);
  int v3 = v2 << 8;
  if ((v2 & 0xC) != 0) {
    v3 ^= *((_DWORD *)this + 7);
  }
  uint64_t v4 = *((unsigned int *)this + 18);
  uint64_t result = v4 ^ v3;
  if ((int)v4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)this + 8);
    do
    {
      uint64_t result = (*(_DWORD *)(v7 + 4 * v6) << v6) ^ result;
      ++v6;
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t icu::CollationSettings::resetReordering(uint64_t this)
{
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void icu::CollationSettings::aliasReordering(void **this, const icu::CollationData *a2, const int *a3, int a4, const unsigned int *a5, int a6, const unsigned __int8 *a7, UErrorCode *a8)
{
  if (*(int *)a8 > 0) {
    return;
  }
  if (!a7) {
    goto LABEL_13;
  }
  if (a6)
  {
    if (a6 < 2 || *(_WORD *)a5 || !LOWORD(a5[a6 - 1]))
    {
LABEL_13:
      icu::CollationSettings::setReordering((icu::CollationSettings *)this, a2, a3, a4, a8);
      return;
    }
  }
  else
  {
    if (!a7[1]) {
      goto LABEL_13;
    }
    unint64_t v14 = 0;
    while (v14 != 254)
    {
      if (!a7[v14++ + 2])
      {
        if (v14 >= 0xFF) {
          break;
        }
        goto LABEL_13;
      }
    }
  }
  if (*((_DWORD *)this + 19))
  {
    uprv_free(this[8]);
    *((_DWORD *)this + 19) = 0;
  }
  this[4] = (void *)a7;
  this[8] = (void *)a3;
  *((_DWORD *)this + 18) = a4;
  if (a6 < 1)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    uint64_t v16 = 0;
    while (!(BYTE2(a5[v16]) << 16))
    {
      if (a6 == ++v16) {
        goto LABEL_25;
      }
    }
  }
  if (a6 == v16)
  {
LABEL_25:
    *((_DWORD *)this + 10) = 0;
    this[6] = 0;
    *((_DWORD *)this + 14) = 0;
  }
  else
  {
    *((_DWORD *)this + 10) = HIWORD(a5[a6 - 1]) << 16;
    this[6] = (void *)&a5[v16];
    *((_DWORD *)this + 14) = a6 - v16;
  }
}

BOOL icu::CollationSettings::reorderTableHasSplitBytes(icu::CollationSettings *this, const unsigned __int8 *a2)
{
  if (!*((unsigned char *)this + 1)) {
    return 1;
  }
  uint64_t v2 = 2;
  do
  {
    uint64_t v3 = v2;
    if (v2 == 256) {
      break;
    }
    ++v2;
  }
  while (*((unsigned char *)this + v3));
  return (unint64_t)(v3 - 1) < 0xFF;
}

void icu::CollationSettings::setReordering(icu::CollationSettings *this, const icu::CollationData *a2, const int *a3, int a4, UErrorCode *a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    if (!a4 || a4 == 1 && *a3 == 103)
    {
      *((void *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      *((_DWORD *)this + 14) = 0;
      *((_DWORD *)this + 18) = 0;
      return;
    }
    long long v23 = 0u;
    long long v24 = 0u;
    icu::UVector32::UVector32((icu::UVector32 *)&v23, a5);
    icu::CollationData::makeReorderRanges(a2, a3, a4, (icu::UVector32 *)&v23, a5);
    if (*(int *)a5 > 0) {
      goto LABEL_28;
    }
    uint64_t v10 = DWORD2(v23);
    if (!DWORD2(v23))
    {
      *((void *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      *((_DWORD *)this + 14) = 0;
      *((_DWORD *)this + 18) = 0;
LABEL_28:
      icu::UVector32::~UVector32((void **)&v23);
      return;
    }
    uint64_t v11 = *((void *)&v24 + 1);
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)int v25 = 0u;
    long long v26 = 0u;
    *((_DWORD *)this + 10) = *(unsigned __int16 *)(*((void *)&v24 + 1) + 4 * (DWORD2(v23) - 1) + 2) << 16;
    if ((int)v10 < 1)
    {
      LODWORD(v13) = 0;
      int v14 = -1;
    }
    else
    {
      uint64_t v12 = 0;
      LODWORD(v13) = 0;
      int v14 = -1;
      do
      {
        unint64_t v15 = *(unsigned int *)(v11 + 4 * v12);
        unint64_t v16 = v15 >> 24;
        if ((int)v13 < SHIBYTE(*(_DWORD *)(v11 + 4 * v12)))
        {
          unsigned int v17 = &v25[v13];
          int v18 = v13 + v15;
          unint64_t v19 = v16 - v13;
          do
          {
            *v17++ = v18++;
            --v19;
          }
          while (v19);
          unint64_t v13 = v15 >> 24;
        }
        if ((v15 & 0xFF0000) != 0)
        {
          v25[v16] = 0;
          LODWORD(v13) = v16 + 1;
          if (v14 < 0) {
            int v14 = v12;
          }
        }
        ++v12;
      }
      while (v12 != v10);
      if ((int)v13 > 255) {
        goto LABEL_24;
      }
    }
    uint64_t v20 = v13;
    do
    {
      v25[v20] = v20;
      ++v20;
    }
    while (v20 != 256);
LABEL_24:
    int v21 = v10 - v14;
    if (v14 >= 0) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    icu::CollationSettings::setReorderArrays(this, a3, a4, (const unsigned int *)(v11 + 4 * (v14 & ~(v14 >> 31))), v22, v25, a5);
    goto LABEL_28;
  }
}

_DWORD *icu::CollationSettings::setReorderArrays(_DWORD *this, const int *a2, int a3, const unsigned int *a4, int a5, const unsigned __int8 *a6, UErrorCode *a7)
{
  if (*(int *)a7 <= 0)
  {
    uint64_t v12 = (uint64_t)this;
    signed int v13 = this[19];
    if (a5 + a3 <= v13)
    {
      unint64_t v15 = (char *)*((void *)this + 8);
LABEL_8:
      unint64_t v16 = &v15[4 * v13];
      long long v17 = *(_OWORD *)a6;
      long long v18 = *((_OWORD *)a6 + 1);
      long long v19 = *((_OWORD *)a6 + 3);
      *((_OWORD *)v16 + 2) = *((_OWORD *)a6 + 2);
      *((_OWORD *)v16 + 3) = v19;
      *(_OWORD *)unint64_t v16 = v17;
      *((_OWORD *)v16 + 1) = v18;
      long long v20 = *((_OWORD *)a6 + 4);
      long long v21 = *((_OWORD *)a6 + 5);
      long long v22 = *((_OWORD *)a6 + 7);
      *((_OWORD *)v16 + 6) = *((_OWORD *)a6 + 6);
      *((_OWORD *)v16 + 7) = v22;
      *((_OWORD *)v16 + 4) = v20;
      *((_OWORD *)v16 + 5) = v21;
      long long v23 = *((_OWORD *)a6 + 8);
      long long v24 = *((_OWORD *)a6 + 9);
      long long v25 = *((_OWORD *)a6 + 11);
      *((_OWORD *)v16 + 10) = *((_OWORD *)a6 + 10);
      *((_OWORD *)v16 + 11) = v25;
      *((_OWORD *)v16 + 8) = v23;
      *((_OWORD *)v16 + 9) = v24;
      long long v26 = *((_OWORD *)a6 + 12);
      long long v27 = *((_OWORD *)a6 + 13);
      long long v28 = *((_OWORD *)a6 + 15);
      *((_OWORD *)v16 + 14) = *((_OWORD *)a6 + 14);
      *((_OWORD *)v16 + 15) = v28;
      *((_OWORD *)v16 + 12) = v26;
      *((_OWORD *)v16 + 13) = v27;
      memcpy(v15, a2, 4 * a3);
      this = memcpy(&v15[4 * a3], a4, 4 * a5);
      *(void *)(v12 + 32) = *(void *)(v12 + 64) + 4 * *(int *)(v12 + 76);
      *(_DWORD *)(v12 + 72) = a3;
      *(void *)(v12 + 48) = &v15[4 * a3];
      *(_DWORD *)(v12 + 56) = a5;
      return this;
    }
    signed int v13 = (a5 + a3 + 3) & 0xFFFFFFFC;
    this = uprv_malloc(4 * v13 + 256);
    if (this)
    {
      unint64_t v15 = (char *)this;
      if (*(_DWORD *)(v12 + 76)) {
        uprv_free(*(void **)(v12 + 64));
      }
      *(void *)(v12 + 64) = v15;
      *(_DWORD *)(v12 + 76) = v13;
      goto LABEL_8;
    }
    *(void *)(v12 + 32) = 0;
    *(_DWORD *)(v12 + 40) = 0;
    *(_DWORD *)(v12 + 56) = 0;
    *(_DWORD *)(v12 + 72) = 0;
    *a7 = U_MEMORY_ALLOCATION_ERROR;
  }
  return this;
}

uint64_t icu::CollationSettings::reorderEx(icu::CollationSettings *this, uint64_t a2)
{
  if (*((_DWORD *)this + 10) > a2)
  {
    uint64_t v2 = (unsigned int *)*((void *)this + 6);
    do
    {
      unsigned int v4 = *v2++;
      unsigned int v3 = v4;
    }
    while ((a2 | 0xFFFF) >= v4);
    return a2 + (v3 << 24);
  }
  return a2;
}

uint64_t icu::CollationSettings::setStrength(uint64_t this, unsigned int a2, __int16 a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    unsigned int v4 = *(_DWORD *)(this + 24) & 0xFFFF0FFF;
    if (a2 < 4) {
      goto LABEL_5;
    }
    if (a2 == -1)
    {
      int v5 = v4 | a3 & 0xF000;
      goto LABEL_6;
    }
    if (a2 == 15)
    {
LABEL_5:
      int v5 = v4 | (a2 << 12);
LABEL_6:
      *(_DWORD *)(this + 24) = v5;
      return this;
    }
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return this;
}

uint64_t icu::CollationSettings::setFlag(uint64_t result, int a2, int a3, int a4, int *a5)
{
  if (*a5 <= 0)
  {
    switch(a3)
    {
      case -1:
        int v5 = *(_DWORD *)(result + 24) & ~a2 | a4 & a2;
        goto LABEL_8;
      case 16:
        int v5 = *(_DWORD *)(result + 24) & ~a2;
        goto LABEL_8;
      case 17:
        int v5 = *(_DWORD *)(result + 24) | a2;
LABEL_8:
        *(_DWORD *)(result + 24) = v5;
        return result;
    }
    *a5 = 1;
  }
  return result;
}

uint64_t icu::CollationSettings::setCaseFirst(uint64_t result, int a2, __int16 a3, int *a4)
{
  if (*a4 <= 0)
  {
    int v4 = *(_DWORD *)(result + 24);
    unsigned int v5 = v4 & 0xFFFFFCFF;
    if (a2 > 23)
    {
      if (a2 == 24)
      {
        v5 |= 0x200u;
      }
      else
      {
        if (a2 != 25)
        {
LABEL_12:
          *a4 = 1;
          return result;
        }
        unsigned int v5 = v4 | 0x300;
      }
    }
    else if (a2 == -1)
    {
      v5 |= a3 & 0x300;
    }
    else if (a2 != 16)
    {
      goto LABEL_12;
    }
    *(_DWORD *)(result + 24) = v5;
  }
  return result;
}

uint64_t icu::CollationSettings::setAlternateHandling(uint64_t result, int a2, char a3, int *a4)
{
  if (*a4 <= 0)
  {
    unsigned int v4 = *(_DWORD *)(result + 24) & 0xFFFFFFF3;
    switch(a2)
    {
      case -1:
        v4 |= a3 & 0xC;
        break;
      case 20:
        v4 |= 4u;
        break;
      case 21:
        break;
      default:
        *a4 = 1;
        return result;
    }
    *(_DWORD *)(result + 24) = v4;
  }
  return result;
}

uint64_t icu::CollationSettings::setMaxVariable(uint64_t this, unsigned int a2, char a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    unsigned int v4 = *(_DWORD *)(this + 24) & 0xFFFFFF8F;
    if (a2 < 4)
    {
      int v5 = v4 | (16 * a2);
LABEL_6:
      *(_DWORD *)(this + 24) = v5;
      return this;
    }
    if (a2 == -1)
    {
      int v5 = v4 | a3 & 0x70;
      goto LABEL_6;
    }
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return this;
}

icu::CollationTailoring *icu::CollationTailoring::CollationTailoring(icu::CollationTailoring *this, const icu::CollationSettings *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDA4A068;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = a2;
  unsigned int v4 = (icu::CollationTailoring *)((char *)this + 40);
  *((void *)this + 5) = &unk_1EDA47700;
  *((_WORD *)this + 24) = 2;
  icu::Locale::Locale((icu::CollationTailoring *)((char *)this + 104), "", 0, 0, 0);
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  if (a2)
  {
    uint64_t v7 = (uint64_t *)*((void *)this + 4);
    if (v7) {
LABEL_3:
    }
      icu::SharedObject::addRef((uint64_t)v7);
  }
  else
  {
    uint64_t v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x358, v5);
    if (v7)
    {
      v7[1] = 0;
      v7[2] = 0;
      *uint64_t v7 = (uint64_t)&unk_1EDA4A028;
      *((_DWORD *)v7 + 6) = 8208;
      v7[6] = 0;
      *((_DWORD *)v7 + 14) = 0;
      *(uint64_t *)((char *)v7 + 36) = 0;
      *(uint64_t *)((char *)v7 + 28) = 0;
      v7[8] = 0;
      v7[9] = 0;
      *((_DWORD *)v7 + 20) = -1;
    }
    *((void *)this + 4) = v7;
    if (v7) {
      goto LABEL_3;
    }
  }
  icu::UnicodeString::getTerminatedBuffer(v4);
  *((_DWORD *)this + 82) = 0;
  atomic_store(0, (unsigned int *)this + 98);
  return this;
}

void icu::CollationTailoring::~CollationTailoring(icu::CollationTailoring *this)
{
  *(void *)this = &unk_1EDA4A068;
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    icu::SharedObject::removeRef(v2);
    *((void *)this + 4) = 0;
  }
  unsigned int v3 = (void *)*((void *)this + 42);
  if (v3) {
    icu::UMemory::operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 43);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  udata_close(*((_OWORD **)this + 44));
  ures_close(*((void *)this + 45));
  utrie2_close(*((void *)this + 46));
  uint64_t v6 = (icu::UnicodeSet *)*((void *)this + 47);
  if (v6)
  {
    uint64_t v7 = icu::UnicodeSet::~UnicodeSet(v5, v6);
    icu::UMemory::operator delete(v7);
  }
  uhash_close(*((unsigned char **)this + 48));
  atomic_store(0, (unsigned int *)this + 98);
  icu::Locale::~Locale((icu::CollationTailoring *)((char *)this + 104));
  icu::UnicodeString::~UnicodeString(v8, (icu::CollationTailoring *)((char *)this + 40));

  icu::SharedObject::~SharedObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::CollationTailoring::~CollationTailoring(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::CollationTailoring::ensureOwnedData(icu::CollationTailoring *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t result = *((void *)this + 42);
  if (result) {
    goto LABEL_4;
  }
  uint64_t NFCImpl = icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a2, a2);
  uint64_t v7 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v7 > 0) {
    return 0;
  }
  uint64_t v8 = NFCImpl;
  uint64_t result = (uint64_t)icu::UMemory::operator new(v7, (icu::UMemory *)0x90, v6);
  if (result)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(void *)(result + 48) = v8;
    *(_DWORD *)(result + 56) = 301989888;
    *(void *)(result + 128) = 0;
    *(_DWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 60) = 0u;
    *(_OWORD *)(result + 76) = 0u;
    *(_OWORD *)(result + 92) = 0u;
    *(_OWORD *)(result + 108) = 0u;
    *((void *)this + 42) = result;
LABEL_4:
    *((void *)this + 3) = result;
    return 1;
  }
  *((void *)this + 42) = 0;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

unsigned char *icu::CollationTailoring::makeBaseVersion(unsigned char *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  *a2 = 9;
  a2[1] = this[1] + 8 * *this;
  a2[2] = this[2] << 6;
  a2[3] = 0;
  return this;
}

unsigned char *icu::CollationTailoring::setVersion(unsigned char *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  this[328] = 9;
  this[329] = a2[1];
  this[330] = a2[2] & 0xC0 | (*a3 + (*a3 >> 6)) & 0x3F;
  this[331] = ((a3[1] >> 5) | (8 * a3[1])) + a3[2] + 16 * a3[3] + (a3[3] >> 4);
  return this;
}

uint64_t icu::CollationTailoring::getUCAVersion(icu::CollationTailoring *this)
{
  return (*((unsigned __int8 *)this + 330) >> 6) | (16 * *((unsigned __int8 *)this + 329));
}

void icu::CollationCacheEntry::~CollationCacheEntry(icu::CollationCacheEntry *this)
{
  *(void *)this = &unk_1EDA4A090;
  uint64_t v2 = *((void *)this + 31);
  if (v2)
  {
    icu::SharedObject::removeRef(v2);
    *((void *)this + 31) = 0;
  }
  icu::Locale::~Locale((icu::CollationCacheEntry *)((char *)this + 24));

  icu::SharedObject::~SharedObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::CollationCacheEntry::~CollationCacheEntry(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::CollationWeights::CollationWeights(uint64_t this)
{
  *(_DWORD *)(this + 156) = 0;
  *(_DWORD *)(this + 160) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  uint64_t v1 = 24;
  *(void *)this = 0;
  do
  {
    *(_DWORD *)(this + v1) = 0;
    v1 += 4;
  }
  while (v1 != 44);
  return this;
}

double icu::CollationWeights::CollationWeights(icu::CollationWeights *this)
{
  *((_DWORD *)this + 39) = 0;
  *((_DWORD *)this + 40) = 0;
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  return result;
}

double icu::CollationWeights::initForPrimary(icu::CollationWeights *this, int a2)
{
  *(_DWORD *)this = 1;
  if (a2) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  *((_DWORD *)this + 2) = 3;
  *((_DWORD *)this + 3) = v2;
  if (a2) {
    int v3 = 254;
  }
  else {
    int v3 = 255;
  }
  *((_DWORD *)this + 7) = 255;
  *((_DWORD *)this + 8) = v3;
  *((void *)this + 2) = 0x200000002;
  *(void *)&double result = 0xFF000000FFLL;
  *(void *)((char *)this + 36) = 0xFF000000FFLL;
  return result;
}

double icu::CollationWeights::initForSecondary(icu::CollationWeights *this)
{
  *(_DWORD *)this = 3;
  *(_OWORD *)((char *)this + 8) = xmmword_18CA8F1A0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 28) = xmmword_18CA8F1B0;
  return result;
}

double icu::CollationWeights::initForTertiary(icu::CollationWeights *this)
{
  *(_DWORD *)this = 3;
  *(_OWORD *)((char *)this + 8) = xmmword_18CA8F1A0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 28) = xmmword_18CA8F1C0;
  return result;
}

uint64_t icu::CollationWeights::incWeight(icu::CollationWeights *this, unsigned int a2, uint64_t a3)
{
  char v3 = 8 * a3;
  unsigned int v4 = (a2 >> (-8 * a3));
  if (v4 >= *((_DWORD *)this + (int)a3 + 6))
  {
    a3 = (int)a3;
    char v6 = 40 - v3;
    uint64_t v7 = (unsigned int *)((char *)this + 4 * (int)a3 + 20);
    do
    {
      unsigned int v8 = 0xFFFFFFFF >> v3;
      if (a3 >= 4) {
        unsigned int v8 = 0;
      }
      a2 = (*(v7 - 4) << (v6 - 8)) | (v8 | (-256 << (v6 - 8))) & a2;
      --a3;
      unsigned int v4 = (a2 >> v6);
      unsigned int v9 = *v7--;
      v6 += 8;
      v3 -= 8;
    }
    while (v4 >= v9);
    char v5 = v6 - 8;
  }
  else
  {
    char v5 = 32 - 8 * a3;
  }
  unsigned int v10 = v4 + 1;
  unsigned int v11 = 0xFFFFFFFF >> v3;
  if ((int)a3 >= 4) {
    unsigned int v11 = 0;
  }
  return (v10 << v5) | (v11 | (-256 << v5)) & a2;
}

uint64_t icu::CollationWeights::incWeightByOffset(icu::CollationWeights *this, unsigned int a2, uint64_t a3, int a4)
{
  char v4 = 8 * a3;
  unsigned int v5 = a4 + (a2 >> (-8 * a3));
  unsigned int v6 = *((_DWORD *)this + (int)a3 + 6);
  if (v5 <= v6)
  {
    char v16 = 32 - 8 * a3;
  }
  else
  {
    a3 = (int)a3;
    char v7 = 40 - v4;
    unsigned int v8 = (unsigned int *)((char *)this + 4 * (int)a3 + 20);
    do
    {
      int v9 = *(v8 - 4);
      int v10 = v5 - v9;
      int v11 = v6 - v9 + 1;
      int v12 = v10 / v11;
      int v13 = v10 % v11 + v9;
      unsigned int v14 = 0xFFFFFFFF >> v4;
      if (a3 >= 4) {
        unsigned int v14 = 0;
      }
      a2 = (v13 << (v7 - 8)) | (v14 | (-256 << (v7 - 8))) & a2;
      --a3;
      unsigned int v5 = v12 + (a2 >> v7);
      unsigned int v15 = *v8--;
      unsigned int v6 = v15;
      v7 += 8;
      v4 -= 8;
    }
    while (v5 > v15);
    char v16 = v7 - 8;
  }
  unsigned int v17 = 0xFFFFFFFF >> v4;
  if ((int)a3 >= 4) {
    unsigned int v17 = 0;
  }
  return (v5 << v16) | (v17 | (-256 << v16)) & a2;
}

uint64_t icu::CollationWeights::lengthenRange(uint64_t result, int *a2)
{
  int v2 = a2[3];
  uint64_t v3 = a2[2] + 1;
  uint64_t v4 = result + 4 * v3;
  int v5 = -256 << (-8 * v3);
  int v6 = a2[1];
  *a2 = v5 & *a2 | (*(_DWORD *)(v4 + 4) << (-8 * v3));
  a2[1] = (*(_DWORD *)(v4 + 24) << (-8 * v3)) | v5 & v6;
  int v7 = v2 + v2 * (*(_DWORD *)(v4 + 24) - *(_DWORD *)(v4 + 4));
  a2[2] = v3;
  a2[3] = v7;
  return result;
}

BOOL icu::CollationWeights::getWeightRanges(icu::CollationWeights *this, unsigned int a2, unsigned int a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if ((_BYTE)a2) {
    LODWORD(v3) = 4;
  }
  else {
    LODWORD(v3) = 3;
  }
  if (!(_WORD)a2) {
    LODWORD(v3) = 2;
  }
  if ((a2 & 0xFFFFFF) != 0) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = 1;
  }
  if ((_BYTE)a3) {
    LODWORD(v4) = 4;
  }
  else {
    LODWORD(v4) = 3;
  }
  if (!(_WORD)a3) {
    LODWORD(v4) = 2;
  }
  if ((a3 & 0xFFFFFF) != 0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 1;
  }
  if (a2 >= a3) {
    return 0;
  }
  if (v3 >= v4 || (BOOL result = 0, ((-1 << (-8 * v3)) & a3) != a2))
  {
    memset(v44, 0, sizeof(v44));
    long long v45 = 0u;
    memset(v42, 0, sizeof(v42));
    int v7 = *(_DWORD *)this;
    long long v43 = 0u;
    if ((int)v3 > v7)
    {
      char v8 = 40 - 8 * v3;
      int v9 = (_DWORD *)((unint64_t)&v44[v3] | 8);
      do
      {
        char v10 = v8 - 8;
        unsigned int v11 = *((_DWORD *)this + v3 + 6);
        if (v11 > (a2 >> (v8 - 8)))
        {
          *(v9 - 2) = a2 + (1 << v10);
          *(v9 - 1) = (v11 << v10) | (-256 << v10) & a2;
          *int v9 = v3;
          v9[1] = v11 - (a2 >> (v8 - 8));
        }
        --v3;
        a2 &= -1 << v8;
        v8 += 8;
        v9 -= 4;
      }
      while (v3 > v7);
    }
    char v12 = 32 - 8 * v7;
    unsigned int v13 = a2 + (1 << v12);
    if (HIBYTE(a2) == 255) {
      unsigned int v13 = -1;
    }
    if ((int)v4 > v7)
    {
      char v14 = 40 - 8 * v4;
      unsigned int v15 = (_DWORD *)((unint64_t)&v42[v4] | 8);
      do
      {
        char v16 = v14 - 8;
        unsigned int v17 = (a3 >> (v14 - 8));
        unsigned int v18 = *((_DWORD *)this + v4 + 1);
        BOOL v19 = v17 >= v18;
        unsigned int v20 = v17 - v18;
        if (v20 != 0 && v19)
        {
          *(v15 - 2) = (v18 << v16) | (-256 << v16) & a3;
          *(v15 - 1) = a3 + (-1 << v16);
          *unsigned int v15 = v4;
          v15[1] = v20;
        }
        --v4;
        a3 &= -1 << v14;
        v14 += 8;
        v15 -= 4;
      }
      while (v4 > v7);
    }
    unsigned int v21 = a3 + (-1 << v12);
    if (v21 >= v13)
    {
      unsigned int v30 = (v21 - v13) >> v12;
      *((_DWORD *)this + 40) = 0;
      long long v31 = (int *)((char *)this + 160);
      if ((v30 & 0x80000000) != 0)
      {
        int v32 = 0;
      }
      else
      {
        *((_DWORD *)this + 11) = v13;
        *((_DWORD *)this + 12) = v21;
        *((_DWORD *)this + 13) = v7;
        *((_DWORD *)this + 14) = v30 + 1;
        int v32 = 1;
        *((_DWORD *)this + 40) = 1;
      }
    }
    else
    {
      if (v7 <= 3)
      {
        char v22 = 0;
        long long v23 = (int *)&v45 + 3;
        long long v24 = (int *)&v43 + 3;
        uint64_t v25 = 4;
        while (1)
        {
          int v26 = *v23;
          if (*v23 >= 1)
          {
            int v27 = *v24;
            if (*v24 >= 1)
            {
              unsigned int v28 = *(v23 - 2);
              unsigned int v29 = *(v24 - 3);
              if (v28 > v29)
              {
                unsigned int v33 = *(v24 - 2);
                *(v23 - 2) = v33;
                int v34 = (v33 >> v22) - (*(v23 - 3) >> v22) + 1;
                goto LABEL_49;
              }
              if (v28 != v29 && icu::CollationWeights::incWeight(this, v28, v25) == v29) {
                break;
              }
            }
          }
          --v25;
          v22 += 8;
          v23 -= 4;
          v24 -= 4;
          if (v25 <= v7) {
            goto LABEL_52;
          }
        }
        *(v23 - 2) = *(v24 - 2);
        int v34 = v27 + v26;
LABEL_49:
        *long long v23 = v34;
        *long long v24 = 0;
        if ((int)v25 - 1 > v7)
        {
          uint64_t v35 = (int)v25 - 1;
          long long v36 = (_DWORD *)&v42[(int)v25 - 1] + 3;
          long long v37 = (_DWORD *)&v44[(int)v25 - 1] + 3;
          do
          {
            *long long v36 = 0;
            v36 -= 4;
            *long long v37 = 0;
            v37 -= 4;
            --v35;
          }
          while (v35 > v7);
        }
      }
LABEL_52:
      int v32 = 0;
      *((_DWORD *)this + 40) = 0;
      long long v31 = (int *)((char *)this + 160);
    }
    if (v7 <= 3)
    {
      long long v38 = (char *)this + 44;
      uint64_t v39 = v7 - 4;
      long long v40 = (int *)&v42[v7 + 1];
      uint64_t v41 = (int *)&v44[v7 + 1];
      do
      {
        if (v40[3] >= 1)
        {
          *(_OWORD *)&v38[16 * v32] = *(_OWORD *)v40;
          int v32 = *v31 + 1;
          *long long v31 = v32;
        }
        if (v41[3] >= 1)
        {
          *(_OWORD *)&v38[16 * v32] = *(_OWORD *)v41;
          int v32 = *v31 + 1;
          *long long v31 = v32;
        }
        v40 += 4;
        v41 += 4;
        BOOL v19 = __CFADD__(v39++, 1);
      }
      while (!v19);
    }
    return v32 > 0;
  }
  return result;
}

uint64_t icu::CollationWeights::allocWeightsInShortRanges(icu::CollationWeights *this, int a2, int a3)
{
  uint64_t v3 = *((unsigned int *)this + 40);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    int v5 = (_DWORD *)((char *)this + 56);
    do
    {
      int v6 = *(v5 - 1);
      if (v6 > a3 + 1) {
        break;
      }
      int v7 = a2 - *v5;
      if (a2 <= *v5)
      {
        if (v6 > a3) {
          *int v5 = a2;
        }
        *((_DWORD *)this + 40) = v4 + 1;
        if (v4)
        {
          int v9 = 0;
          uprv_sortArray((uint64_t)this + 44, v4 + 1, 16, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18C8F7E40, 0, 0, &v9);
        }
        return 1;
      }
      v5 += 4;
      ++v4;
      a2 = v7;
    }
    while (v3 != v4);
  }
  return 0;
}

uint64_t sub_18C8F7E40(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 > *a3;
  }
}

uint64_t icu::CollationWeights::allocWeightsInMinLengthRanges(icu::CollationWeights *this, int a2, uint64_t a3)
{
  uint64_t v5 = *((unsigned int *)this + 40);
  if ((int)v5 < 1)
  {
    int v7 = 0;
    LODWORD(v6) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    int v7 = 0;
    char v8 = (int *)((char *)this + 56);
    while (*(v8 - 1) == a3)
    {
      int v9 = *v8;
      v8 += 4;
      v7 += v9;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *((_DWORD *)this + 40);
        break;
      }
    }
  }
  int v10 = *((_DWORD *)this + (int)a3 + 7) - *((_DWORD *)this + (int)a3 + 2) + 1;
  if (v10 * v7 < a2) {
    return 0;
  }
  unsigned int v13 = *((_DWORD *)this + 11);
  unsigned int v14 = *((_DWORD *)this + 12);
  char v12 = (int *)((char *)this + 44);
  if (v6 >= 2)
  {
    uint64_t v15 = v6;
    char v16 = (unsigned int *)((char *)this + 64);
    uint64_t v17 = v15 - 1;
    do
    {
      if (*(v16 - 1) < v13) {
        unsigned int v13 = *(v16 - 1);
      }
      unsigned int v19 = *v16;
      v16 += 4;
      unsigned int v18 = v19;
      if (v19 > v14) {
        unsigned int v14 = v18;
      }
      --v17;
    }
    while (v17);
  }
  int v20 = (a2 - v7) / (*((_DWORD *)this + (int)a3 + 7) - *((_DWORD *)this + (int)a3 + 2));
  int v21 = v7 - v20 + v20 * v10;
  if (v20) {
    BOOL v22 = v21 < a2;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22) {
    int v23 = v20 + 1;
  }
  else {
    int v23 = (a2 - v7) / (*((_DWORD *)this + (int)a3 + 7) - *((_DWORD *)this + (int)a3 + 2));
  }
  if (v22) {
    int v24 = v7 - v20 - 1;
  }
  else {
    int v24 = v7 - v20;
  }
  *char v12 = v13;
  if (v24)
  {
    unsigned int v25 = icu::CollationWeights::incWeightByOffset(this, v13, a3, v24 - 1);
    *((_DWORD *)this + 12) = v25;
    *((_DWORD *)this + 14) = v24;
    *((_DWORD *)this + 15) = icu::CollationWeights::incWeight(this, v25, a3);
    *((_DWORD *)this + 16) = v14;
    char v12 = (int *)((char *)this + 60);
    *((_DWORD *)this + 17) = a3;
    *((_DWORD *)this + 18) = v23;
    int v26 = 2;
  }
  else
  {
    *((_DWORD *)this + 12) = v14;
    *((_DWORD *)this + 14) = v7;
    int v26 = 1;
  }
  icu::CollationWeights::lengthenRange((uint64_t)this, v12);
  *((_DWORD *)this + 40) = v26;
  return 1;
}

BOOL icu::CollationWeights::allocWeights(icu::CollationWeights *this, unsigned int a2, unsigned int a3, int a4)
{
  BOOL result = icu::CollationWeights::getWeightRanges(this, a2, a3);
  if (result)
  {
    uint64_t v7 = *((unsigned int *)this + 13);
    if (icu::CollationWeights::allocWeightsInShortRanges(this, a4, *((_DWORD *)this + 13)))
    {
LABEL_3:
      *((_DWORD *)this + 39) = 0;
      return 1;
    }
    else
    {
      while (v7 != 4)
      {
        if (!icu::CollationWeights::allocWeightsInMinLengthRanges(this, a4, v7))
        {
          if (*((int *)this + 40) >= 1)
          {
            uint64_t v8 = 0;
            int v9 = (int *)((char *)this + 44);
            do
            {
              if (v9[2] != v7) {
                break;
              }
              icu::CollationWeights::lengthenRange((uint64_t)this, v9);
              ++v8;
              v9 += 4;
            }
            while (v8 < *((int *)this + 40));
          }
          uint64_t v7 = *((unsigned int *)this + 13);
          if (!icu::CollationWeights::allocWeightsInShortRanges(this, a4, *((_DWORD *)this + 13))) {
            continue;
          }
        }
        goto LABEL_3;
      }
      return 0;
    }
  }
  return result;
}

uint64_t icu::CollationWeights::nextWeight(icu::CollationWeights *this)
{
  uint64_t v1 = *((int *)this + 39);
  if ((int)v1 >= *((_DWORD *)this + 40)) {
    return 0xFFFFFFFFLL;
  }
  int v2 = (char *)this + 16 * v1;
  unsigned int v5 = *((_DWORD *)v2 + 11);
  uint64_t v4 = v2 + 44;
  uint64_t v3 = v5;
  int v6 = v4[3] - 1;
  v4[3] = v6;
  if (v6) {
    *uint64_t v4 = icu::CollationWeights::incWeight(this, v3, *((unsigned int *)this + 4 * v1 + 13));
  }
  else {
    *((_DWORD *)this + 39) = v1 + 1;
  }
  return v3;
}

void *icu::CompactDecimalFormat::getStaticClassID(icu::CompactDecimalFormat *this)
{
  return &unk_1E91920E8;
}

void *icu::CompactDecimalFormat::getDynamicClassID(icu::CompactDecimalFormat *this)
{
  return &unk_1E91920E8;
}

icu::DecimalFormat *icu::CompactDecimalFormat::createInstance@<X0>(const icu::Locale *a1@<X0>, unint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  int v5 = a2;
  BOOL result = (icu::DecimalFormat *)icu::UMemory::operator new(a4, (icu::UMemory *)0x170, a2);
  if (result) {
    return icu::CompactDecimalFormat::CompactDecimalFormat(result, a1, v5, a3, v8);
  }
  return result;
}

icu::DecimalFormat *icu::CompactDecimalFormat::CompactDecimalFormat@<X0>(icu::DecimalFormat *a1@<X0>, const icu::Locale *a2@<X1>, int a3@<W2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  int v9 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(a5, (icu::UMemory *)0xB48, (unint64_t)a2);
  int v10 = v9;
  if (v9) {
    icu::DecimalFormatSymbols::DecimalFormatSymbols(v9, a2, a4);
  }
  icu::DecimalFormat::DecimalFormat(a1, v10, a4);
  *(void *)a1 = &unk_1EDA4A0E8;
  if (*(int *)a4 <= 0)
  {
    uint64_t v11 = *((void *)a1 + 45);
    *(_DWORD *)(v11 + 12) = a3;
    *(unsigned char *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 84) = -2;
    *(_DWORD *)(v11 + 116) = 2;
    icu::DecimalFormat::touch(a1, a4);
  }
  return a1;
}

icu::DecimalFormat *icu::CompactDecimalFormat::CompactDecimalFormat(icu::CompactDecimalFormat *this, uint64_t **a2)
{
  BOOL result = icu::DecimalFormat::DecimalFormat(this, a2);
  *(void *)BOOL result = &unk_1EDA4A0E8;
  return result;
}

{
  icu::DecimalFormat *result;

  BOOL result = icu::DecimalFormat::DecimalFormat(this, a2);
  *(void *)BOOL result = &unk_1EDA4A0E8;
  return result;
}

void icu::CompactDecimalFormat::~CompactDecimalFormat(icu::CompactDecimalFormat *this)
{
  icu::DecimalFormat::~DecimalFormat(this);

  icu::UMemory::operator delete(v1);
}

void *icu::CompactDecimalFormat::operator=(void *a1, void *a2)
{
  icu::DecimalFormat::operator=(a1, a2);
  return a1;
}

icu::DecimalFormat *icu::CompactDecimalFormat::clone@<X0>(uint64_t **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = (icu::DecimalFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x170, a2);
  if (result)
  {
    BOOL result = icu::DecimalFormat::DecimalFormat(result, this);
    *(void *)BOOL result = &unk_1EDA4A0E8;
  }
  return result;
}

void icu::CompactDecimalFormat::parse(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 16;
}

uint64_t icu::CompactDecimalFormat::parseCurrency(icu::CompactDecimalFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  return 0;
}

void *icu::CopticCalendar::getStaticClassID(icu::CopticCalendar *this)
{
  return &unk_1E91920EC;
}

void *sub_18C8F8374()
{
  return &unk_1E91920EC;
}

icu::CECalendar *sub_18C8F8380(icu::CECalendar *a1, char **a2, UErrorCode *a3)
{
  BOOL result = icu::CECalendar::CECalendar(a1, a2, a3);
  *(void *)BOOL result = &unk_1EDA4A370;
  return result;
}

void sub_18C8F83B8(icu::CECalendar *a1)
{
  icu::CECalendar::~CECalendar(a1);

  icu::UMemory::operator delete(v1);
}

icu::CECalendar *sub_18C8F83E0@<X0>(const icu::CECalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = (icu::CECalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    BOOL result = (icu::CECalendar *)icu::CECalendar::CECalendar(result, a1);
    *(void *)BOOL result = &unk_1EDA4A370;
  }
  return result;
}

const char *sub_18C8F8430()
{
  return "coptic";
}

uint64_t sub_18C8F843C(_DWORD *a1)
{
  if (icu::Calendar::newerField((uint64_t)a1, 0x13u, 1u) == 19)
  {
    if ((int)a1[52] >= 1) {
      return a1[22];
    }
    return 1;
  }
  if ((int)a1[33] < 1 || a1[3])
  {
    if ((int)a1[34] >= 1) {
      return a1[4];
    }
    return 1;
  }
  if ((int)a1[34] < 1) {
    return 0;
  }
  else {
    return (1 - a1[4]);
  }
}

double sub_18C8F84D4(uint64_t a1, icu::CECalendar *a2)
{
  *(void *)unsigned int v14 = 0;
  int v13 = 0;
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 440))(a1);
  icu::CECalendar::jdToCE(a2, v4, &v14[1], v14, &v13, v5);
  int v6 = v14[1];
  int v7 = 1 - v14[1];
  BOOL v8 = v14[1] <= 0;
  *(_DWORD *)(a1 + 88) = v14[1];
  int v9 = !v8;
  if (v8) {
    int v6 = v7;
  }
  *(_DWORD *)(a1 + 208) = 1;
  *(unsigned char *)(a1 + 127) = 1;
  *(unsigned char *)(a1 + 108) = 1;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v6;
  *(void *)&double result = 0x100000001;
  *(void *)(a1 + 132) = 0x100000001;
  *(_WORD *)(a1 + 109) = 257;
  int v12 = v13;
  int v11 = v14[0];
  *(_DWORD *)(a1 + 20) = v14[0];
  *(_DWORD *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 104) = v11;
  *(_DWORD *)(a1 + 224) = 1;
  *(unsigned char *)(a1 + 131) = 1;
  *(unsigned char *)(a1 + 113) = 1;
  *(_DWORD *)(a1 + 32) = v12;
  *(_DWORD *)(a1 + 36) = v12 + 30 * v11;
  *(void *)(a1 + 152) = 0x100000001;
  *(unsigned char *)(a1 + 114) = 1;
  return result;
}

uint64_t sub_18C8F85B8(unsigned char *a1, UErrorCode *a2)
{
  unsigned int v3 = icu::Calendar::get(a1, 0x13u, a2) + 284;
  if (*(int *)a2 <= 0) {
    return v3;
  }
  else {
    return 0;
  }
}

unsigned char *sub_18C8F85F4(unsigned char *a1, int a2)
{
  return icu::Calendar::set(a1, 0x13u, a2 - 284);
}

double sub_18C8F8600()
{
  if (atomic_load_explicit(dword_1EB20B700, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20B700))
  {
    sub_18C8F8650();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B700);
  }
  return *(double *)&qword_1EB20A700;
}

void sub_18C8F8650()
{
  v4[78] = *MEMORY[0x1E4F143B8];
  UErrorCode v2 = U_ZERO_ERROR;
  bzero(v4, 0x270uLL);
  icu::Locale::Locale((icu::Locale *)v3, "@calendar=coptic", 0, 0, 0);
  icu::CECalendar::CECalendar((icu::CECalendar *)v4, v3, &v2);
  v4[0] = &unk_1EDA4A370;
  icu::Locale::~Locale((icu::Locale *)v3);
  if (v2 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v0);
    icu::Calendar::setTimeInMillis((uint64_t)v4, v1, &v2);
    icu::Calendar::add(v4, 1u, -80, &v2);
    qword_1EB20A700 = icu::Calendar::getTimeInMillis((icu::Calendar *)v4, &v2);
    dword_1EB20A708 = icu::Calendar::get(v4, 1u, &v2);
  }
  icu::CECalendar::~CECalendar((icu::CECalendar *)v4);
}

uint64_t sub_18C8F8768()
{
  if (atomic_load_explicit(dword_1EB20B700, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20B700))
  {
    sub_18C8F8650();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B700);
  }
  return dword_1EB20A708;
}

uint64_t sub_18C8F87B8()
{
  return 1824665;
}

void *icu::CompoundTransliterator::getStaticClassID(icu::CompoundTransliterator *this)
{
  return &unk_1E91920F0;
}

void *icu::CompoundTransliterator::getDynamicClassID(icu::CompoundTransliterator *this)
{
  return &unk_1E91920F0;
}

icu::CompoundTransliterator *icu::CompoundTransliterator::CompoundTransliterator(icu::CompoundTransliterator *this, icu::Transliterator *const *a2, int a3, icu::UnicodeFilter *a4)
{
  v10[8] = *(UChar **)MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EDA4A558;
  icu::CompoundTransliterator::joinIDs(a2, a3, (uint64_t)v10);
  icu::Transliterator::Transliterator(this, v10, a4);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
  *(void *)this = &unk_1EDA4A558;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  icu::CompoundTransliterator::setTransliterators(this, a2, a3);
  return this;
}

void icu::CompoundTransliterator::joinIDs(icu::Transliterator *const *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = &unk_1EDA47700;
  *(_WORD *)(a3 + 8) = 2;
  if (a2 >= 1)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 8 * a2;
    do
    {
      if (v6)
      {
        __int16 v13 = 59;
        icu::UnicodeString::doAppend(a3, (uint64_t)&v13, 0, 1);
      }
      uint64_t v8 = (*(uint64_t (**)(icu::Transliterator *const))(*(void *)a1[v6 / 8] + 104))(a1[v6 / 8]);
      unsigned int v9 = *(unsigned __int16 *)(v8 + 8);
      int v10 = (__int16)v9;
      unsigned int v11 = v9 >> 5;
      if (v10 >= 0) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = *(unsigned int *)(v8 + 12);
      }
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)v8, 0, v12);
      v6 += 8;
    }
    while (v7 != v6);
  }
}

void icu::CompoundTransliterator::setTransliterators(icu::CompoundTransliterator *this, icu::Transliterator *const *a2, int a3)
{
  unint64_t v6 = (icu::Transliterator **)uprv_malloc(8 * a3);
  if (v6)
  {
    uint64_t v7 = v6;
    if (a3 < 1) {
      goto LABEL_11;
    }
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = (*(uint64_t (**)(icu::Transliterator *const))(*(void *)a2[v8] + 24))(a2[v8]);
      v7[v8] = (icu::Transliterator *)v9;
      if (!v9) {
        break;
      }
      if (a3 == ++v8) {
        goto LABEL_11;
      }
    }
    if (v8)
    {
      uint64_t v10 = v8 + 1;
      do
      {
        uprv_free(v7[(v10 - 2)]);
        v7[(v10-- - 2)] = 0;
      }
      while (v10 > 1);
    }
    else
    {
LABEL_11:
      icu::CompoundTransliterator::adoptTransliterators(this, v7, a3);
    }
  }
}

icu::Transliterator *icu::CompoundTransliterator::CompoundTransliterator(icu::Transliterator *a1, UChar **a2, int a3, icu::UnicodeFilter *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v10 = icu::Transliterator::Transliterator(a1, a2, a4);
  *(void *)uint64_t v10 = &unk_1EDA4A558;
  *((void *)v10 + 11) = 0;
  *((_DWORD *)v10 + 25) = 0;
  icu::CompoundTransliterator::init(v10, (uint64_t)a2, a3, 1, a6);
  return a1;
}

{
  icu::Transliterator *v10;

  uint64_t v10 = icu::Transliterator::Transliterator(a1, a2, a4);
  *(void *)uint64_t v10 = &unk_1EDA4A558;
  *((void *)v10 + 11) = 0;
  *((_DWORD *)v10 + 25) = 0;
  icu::CompoundTransliterator::init(v10, (uint64_t)a2, a3, 1, a6);
  return a1;
}

void icu::CompoundTransliterator::init(icu::Transliterator *a1, uint64_t a2, int a3, int a4, UErrorCode *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    icu::UVector::UVector((icu::UVector *)v13, a5);
    uint64_t v12 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v19 = 0;
    long long v18 = 0u;
    uint64_t v15 = &unk_1EDA47700;
    LOWORD(v16) = 2;
    if (sub_18C9F34A4(a2, a3, (uint64_t)&v15, (icu::UVector *)v13, &v12))
    {
      sub_18C9F37F8((icu::UVector *)v13, a5);
      icu::CompoundTransliterator::init(a1, (int *)v13, a3, a4, (int *)a5);
      if (v12) {
        icu::Transliterator::adoptFilter(a1, v12);
      }
    }
    else
    {
      uint64_t v10 = 65569;
      *a5 = U_INVALID_ID;
      if (v12)
      {
        unsigned int v11 = icu::UnicodeSet::~UnicodeSet((void *)0x10021, v12);
        icu::UMemory::operator delete(v11);
      }
    }
    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v15);
    icu::UVector::~UVector((icu::UVector *)v13);
  }
}

icu::CompoundTransliterator *icu::CompoundTransliterator::CompoundTransliterator(icu::CompoundTransliterator *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  uint64_t v7 = icu::Transliterator::Transliterator(this, a2, 0);
  *(void *)uint64_t v7 = &unk_1EDA4A558;
  *((void *)v7 + 11) = 0;
  *((_DWORD *)v7 + 25) = 0;
  icu::CompoundTransliterator::init(v7, (uint64_t)a2, 0, 1, a4);
  return this;
}

icu::CompoundTransliterator *icu::CompoundTransliterator::CompoundTransliterator(icu::CompoundTransliterator *this, UChar **a2, icu::UVector *a3, icu::UnicodeFilter *a4, int a5, UParseError *a6, UErrorCode *a7)
{
  unsigned int v11 = icu::Transliterator::Transliterator(this, a2, a4);
  *(void *)unsigned int v11 = &unk_1EDA4A558;
  *((void *)v11 + 11) = 0;
  *((_DWORD *)v11 + 25) = a5;
  icu::CompoundTransliterator::init(v11, (int *)a3, 0, 0, (int *)a7);
  return this;
}

{
  icu::Transliterator *v11;

  unsigned int v11 = icu::Transliterator::Transliterator(this, a2, a4);
  *(void *)unsigned int v11 = &unk_1EDA4A558;
  *((void *)v11 + 11) = 0;
  *((_DWORD *)v11 + 25) = a5;
  icu::CompoundTransliterator::init(v11, (int *)a3, 0, 0, (int *)a7);
  return this;
}

_DWORD *icu::CompoundTransliterator::init(_DWORD *result, int *a2, int a3, int a4, int *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*a5 <= 0)
  {
    uint64_t v9 = result;
    uint64_t v10 = a2[2];
    result[24] = v10;
    double result = uprv_malloc(8 * v10);
    *((void *)v9 + 11) = result;
    if (result)
    {
      if (*a5 <= 0)
      {
        LODWORD(v11) = v9[24];
        if ((int)v11 >= 1)
        {
          uint64_t v12 = 0;
          int v13 = -1;
          do
          {
            unsigned int v14 = v11 + v13;
            if (a3) {
              unsigned int v15 = v14;
            }
            else {
              unsigned int v15 = v12;
            }
            *(void *)(*((void *)v9 + 11) + 8 * v12++) = icu::UVector::elementAt((icu::UVector *)a2, v15);
            uint64_t v11 = (int)v9[24];
            --v13;
          }
          while (v12 < v11);
        }
        if (a3 == 1 && a4)
        {
          long long v28 = 0u;
          long long v29 = 0u;
          uint64_t v31 = 0;
          long long v30 = 0u;
          int v27 = (UChar *)&unk_1EDA47700;
          LOWORD(v28) = 2;
          if ((int)v11 >= 1)
          {
            uint64_t v16 = 0;
            do
            {
              if (v16)
              {
                __int16 v26 = 59;
                icu::UnicodeString::doAppend((uint64_t)&v27, (uint64_t)&v26, 0, 1);
              }
              uint64_t v17 = *(void *)(*((void *)v9 + 11) + 8 * v16);
              uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 104))(v17);
              unsigned int v19 = *(unsigned __int16 *)(v18 + 8);
              int v20 = (__int16)v19;
              unsigned int v21 = v19 >> 5;
              if (v20 >= 0) {
                uint64_t v22 = v21;
              }
              else {
                uint64_t v22 = *(unsigned int *)(v18 + 12);
              }
              icu::UnicodeString::doAppend((uint64_t)&v27, (const icu::UnicodeString *)v18, 0, v22);
              ++v16;
            }
            while (v16 < (int)v9[24]);
          }
          icu::UnicodeString::operator=((UChar **)v9 + 1, &v27);
          __int16 v26 = 0;
          icu::UnicodeString::doAppend((uint64_t)(v9 + 2), (uint64_t)&v26, 0, 1);
          int v23 = (void *)*((unsigned __int16 *)v9 + 8);
          if ((__int16)v9[4] < 0) {
            unsigned int v24 = v9[5];
          }
          else {
            unsigned int v24 = v23 >> 5;
          }
          int v25 = v24 - 1;
          if ((v23 & 1) != 0 && v24 == 1)
          {
            icu::UnicodeString::unBogus((uint64_t)(v9 + 2));
          }
          else if (v24 > v25)
          {
            if (v25 > 1023)
            {
              int v23 = (void *)(v23 | 0xFFE0);
              *((_WORD *)v9 + 8) = (_WORD)v23;
              v9[5] = v25;
            }
            else
            {
              int v23 = (void *)(v23 & 0x1F | (32 * v25));
              *((_WORD *)v9 + 8) = (_WORD)v23;
            }
          }
          icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v27);
        }
        return (_DWORD *)icu::CompoundTransliterator::computeMaximumContextLength((icu::CompoundTransliterator *)v9);
      }
    }
    else
    {
      *a5 = 7;
    }
  }
  return result;
}

icu::CompoundTransliterator *icu::CompoundTransliterator::CompoundTransliterator(icu::CompoundTransliterator *this, icu::UVector *a2, UParseError *a3, UErrorCode *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (UChar *)&unk_1EDA47700;
  __int16 v10 = 2;
  icu::Transliterator::Transliterator(this, &v9, 0);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v9);
  *(void *)this = &unk_1EDA4A558;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 25) = 0;
  icu::CompoundTransliterator::init(this, (int *)a2, 0, 0, (int *)a4);
  return this;
}

icu::CompoundTransliterator *icu::CompoundTransliterator::CompoundTransliterator(icu::CompoundTransliterator *this, icu::UVector *a2, int a3, UParseError *a4, UErrorCode *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = (UChar *)&unk_1EDA47700;
  __int16 v12 = 2;
  icu::Transliterator::Transliterator(this, &v11, 0);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v11);
  *(void *)this = &unk_1EDA4A558;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 25) = a3;
  icu::CompoundTransliterator::init(this, (int *)a2, 0, 0, (int *)a5);
  return this;
}

uint64_t icu::CompoundTransliterator::computeMaximumContextLength(icu::CompoundTransliterator *this)
{
  uint64_t v1 = *((unsigned int *)this + 24);
  if ((int)v1 < 1)
  {
    int v2 = 0;
  }
  else
  {
    int v2 = 0;
    unsigned int v3 = (uint64_t *)*((void *)this + 11);
    do
    {
      uint64_t v4 = *v3++;
      int v5 = *(_DWORD *)(v4 + 80);
      if (v5 > v2) {
        int v2 = v5;
      }
      --v1;
    }
    while (v1);
  }
  return icu::Transliterator::setMaximumContextLength((uint64_t)this, v2);
}

uint64_t icu::CompoundTransliterator::CompoundTransliterator(icu::CompoundTransliterator *this, UChar **a2)
{
  unsigned int v3 = icu::Transliterator::Transliterator(this, a2);
  *(void *)unsigned int v3 = &unk_1EDA4A558;
  *((void *)v3 + 11) = 0;
  *((void *)v3 + 12) = 0xFFFFFFFF00000000;

  return icu::CompoundTransliterator::operator=((uint64_t)v3, (uint64_t)a2);
}

{
  icu::Transliterator *v3;
  uint64_t vars8;

  unsigned int v3 = icu::Transliterator::Transliterator(this, a2);
  *(void *)unsigned int v3 = &unk_1EDA4A558;
  *((void *)v3 + 11) = 0;
  *((void *)v3 + 12) = 0xFFFFFFFF00000000;

  return icu::CompoundTransliterator::operator=((uint64_t)v3, (uint64_t)a2);
}

uint64_t icu::CompoundTransliterator::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::Transliterator::operator=(a1, a2);
    int v4 = *(_DWORD *)(a1 + 96);
    if (*(void *)(a1 + 88)) {
      BOOL v5 = v4 < 1;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(a1 + 88);
        uint64_t v8 = *(void *)(v7 + 8 * v6);
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          uint64_t v7 = *(void *)(a1 + 88);
          int v4 = *(_DWORD *)(a1 + 96);
        }
        *(void *)(v7 + 8 * v6++) = 0;
      }
      while (v6 < v4);
    }
    int v9 = *(_DWORD *)(a2 + 96);
    __int16 v10 = *(void **)(a1 + 88);
    if (v9 > v4)
    {
      if (v10)
      {
        uprv_free(v10);
        int v9 = *(_DWORD *)(a2 + 96);
      }
      __int16 v10 = uprv_malloc(8 * v9);
      *(void *)(a1 + 88) = v10;
      int v9 = *(_DWORD *)(a2 + 96);
    }
    *(_DWORD *)(a1 + 96) = v9;
    if (v10 && v9 >= 1)
    {
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *(void *)(*(void *)(a2 + 88) + 8 * v11);
        *(void *)(*(void *)(a1 + 88) + 8 * v11) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
        if (!*(void *)(*(void *)(a1 + 88) + 8 * v11)) {
          break;
        }
        if (++v11 >= *(int *)(a1 + 96)) {
          goto LABEL_23;
        }
      }
      if (v11)
      {
        uint64_t v13 = v11 + 1;
        do
        {
          uprv_free(*(void **)(*(void *)(a1 + 88) + 8 * (v13 - 2)));
          *(void *)(*(void *)(a1 + 88) + 8 * (v13-- - 2)) = 0;
        }
        while (v13 > 1);
      }
    }
LABEL_23:
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  }
  return a1;
}

void icu::CompoundTransliterator::~CompoundTransliterator(icu::CompoundTransliterator *this)
{
  *(void *)this = &unk_1EDA4A558;
  icu::CompoundTransliterator::freeTransliterators(this);

  icu::Transliterator::~Transliterator(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDA4A558;
  icu::CompoundTransliterator::freeTransliterators(this);

  icu::Transliterator::~Transliterator(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDA4A558;
  icu::CompoundTransliterator::freeTransliterators(this);
  icu::Transliterator::~Transliterator(this);

  icu::UMemory::operator delete(v2);
}

void icu::CompoundTransliterator::freeTransliterators(icu::CompoundTransliterator *this)
{
  int v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    int v3 = *((_DWORD *)this + 24);
    if (v3 >= 1)
    {
      for (uint64_t i = 0; i < v3; ++i)
      {
        uint64_t v5 = *(void *)(*((void *)this + 11) + 8 * i);
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
          int v3 = *((_DWORD *)this + 24);
        }
      }
      int v2 = (void *)*((void *)this + 11);
    }
    uprv_free(v2);
  }
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
}

icu::Transliterator *icu::CompoundTransliterator::clone@<X0>(UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x68, a2);
  if (result)
  {
    uint64_t v5 = icu::Transliterator::Transliterator(result, this);
    *(void *)uint64_t v5 = &unk_1EDA4A558;
    *((void *)v5 + 11) = 0;
    *((void *)v5 + 12) = 0xFFFFFFFF00000000;
    return (icu::Transliterator *)icu::CompoundTransliterator::operator=((uint64_t)v5, (uint64_t)this);
  }
  return result;
}

uint64_t icu::CompoundTransliterator::getCount(icu::CompoundTransliterator *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t icu::CompoundTransliterator::getTransliterator(icu::CompoundTransliterator *this, int a2)
{
  return *(void *)(*((void *)this + 11) + 8 * a2);
}

void *icu::CompoundTransliterator::adoptTransliterators(icu::CompoundTransliterator *this, icu::Transliterator **a2, int a3)
{
  v11[8] = *(UChar **)MEMORY[0x1E4F143B8];
  icu::CompoundTransliterator::freeTransliterators(this);
  *((void *)this + 11) = a2;
  *((_DWORD *)this + 24) = a3;
  icu::CompoundTransliterator::computeMaximumContextLength(this);
  icu::CompoundTransliterator::joinIDs(*((icu::Transliterator *const **)this + 11), *((_DWORD *)this + 24), (uint64_t)v11);
  icu::UnicodeString::operator=((UChar **)this + 1, v11);
  __int16 v10 = 0;
  icu::UnicodeString::doAppend((uint64_t)this + 8, (uint64_t)&v10, 0, 1);
  uint64_t v6 = (void *)*((unsigned __int16 *)this + 8);
  if (*((__int16 *)this + 8) < 0) {
    unsigned int v7 = *((_DWORD *)this + 5);
  }
  else {
    unsigned int v7 = v6 >> 5;
  }
  int v8 = v7 - 1;
  if ((v6 & 1) != 0 && v7 == 1)
  {
    icu::UnicodeString::unBogus((uint64_t)this + 8);
  }
  else if (v7 > v8)
  {
    if (v8 > 1023)
    {
      uint64_t v6 = (void *)(v6 | 0xFFE0);
      *((_WORD *)this + 8) = (_WORD)v6;
      *((_DWORD *)this + 5) = v8;
    }
    else
    {
      uint64_t v6 = (void *)(v6 & 0x1F | (32 * v8));
      *((_WORD *)this + 8) = (_WORD)v6;
    }
  }
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v11);
}

icu::UnicodeString *icu::CompoundTransliterator::toRules(icu::CompoundTransliterator *this, icu::UnicodeString *a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  if (v6)
  {
    icu::UnicodeString::unBogus((uint64_t)a2);
  }
  else
  {
    if ((v6 & 0x8000u) == 0) {
      unsigned int v7 = v6 >> 5;
    }
    else {
      unsigned int v7 = *((_DWORD *)a2 + 3);
    }
    if (v7) {
      *((_WORD *)a2 + 4) &= 0x1Fu;
    }
  }
  if (*((int *)this + 25) >= 1 && icu::Transliterator::getFilter(this))
  {
    long long v40 = 0u;
    uint64_t v43 = 0;
    long long v42 = 0u;
    long long v41 = 0u;
    uint64_t v39 = &unk_1EDA47700;
    LOWORD(v40) = 2;
    uint64_t v8 = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"::", 0, 2);
    Filteunint64_t r = icu::Transliterator::getFilter(this);
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(Filter + 8) + 24))();
    unsigned int v11 = *(unsigned __int16 *)(v10 + 8);
    int v12 = (__int16)v11;
    unsigned int v13 = v11 >> 5;
    if (v12 >= 0) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = *(unsigned int *)(v10 + 12);
    }
    uint64_t v15 = icu::UnicodeString::doAppend(v8, (const icu::UnicodeString *)v10, 0, v14);
    v38[0] = 59;
    icu::UnicodeString::doAppend(v15, (uint64_t)v38, 0, 1);
    uint64_t v35 = L"::";
    icu::UnicodeString::~UnicodeString(&v35, (icu::UnicodeString *)&v39);
  }
  if (*((int *)this + 24) >= 1)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v43 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      uint64_t v39 = &unk_1EDA47700;
      LOWORD(v40) = 2;
      uint64_t v17 = *(void *)(*((void *)this + 11) + 8 * v16);
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 104))(v17);
      BOOL v19 = icu::UnicodeString::doEqualsSubstring(v18, 0, 5, (uint64_t)L"%Pass", 0, 5);
      uint64_t v20 = **(void **)(*((void *)this + 11) + 8 * v16);
      if (v19)
      {
        (*(void (**)(void))(v20 + 112))();
        if (v16)
        {
          if (*((int *)this + 25) >= 2)
          {
            uint64_t v21 = *(void *)(*((void *)this + 11) + 8 * (v16 - 1));
            uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 104))(v21);
            if (icu::UnicodeString::doEqualsSubstring(v22, 0, 5, (uint64_t)L"%Pass", 0, 5))
            {
              long long v36 = ":";
              icu::UnicodeString::UnicodeString(v37, 1, &v36);
              icu::operator+((uint64_t)v37, (uint64_t)&v39, (uint64_t)v38);
              icu::UnicodeString::operator=((icu::UnicodeString *)&v39, (icu::UnicodeString *)v38);
              icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v38);
              icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v37);
            }
          }
        }
      }
      else
      {
        uint64_t v25 = (*(uint64_t (**)(void))(v20 + 104))();
        unsigned int v26 = *(unsigned __int16 *)(v25 + 8);
        int v27 = (__int16)v26;
        int32_t v28 = v26 >> 5;
        if (v27 >= 0) {
          int32_t v29 = v28;
        }
        else {
          int32_t v29 = *(_DWORD *)(v25 + 12);
        }
        int v30 = icu::UnicodeString::doIndexOf(v25, 0x3Bu, 0, v29);
        uint64_t v31 = *(icu::Transliterator **)(*((void *)this + 11) + 8 * v16);
        if (v30 < 0) {
          icu::Transliterator::toRules(v31, (icu::UnicodeString *)&v39, a3);
        }
        else {
          (*(void (**)(icu::Transliterator *, void **, uint64_t))(*(void *)v31 + 112))(v31, &v39, a3);
        }
      }
      sub_18C8F9C14((uint64_t)a2, 10);
      if ((v40 & 0x8000u) == 0) {
        uint64_t v32 = (unsigned __int16)v40 >> 5;
      }
      else {
        uint64_t v32 = DWORD1(v40);
      }
      icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v39, 0, v32);
      sub_18C8F9C14((uint64_t)a2, 59);
      icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v39);
      ++v16;
    }
    while (v16 < *((int *)this + 24));
  }
  return a2;
}

uint64_t sub_18C8F9C14(uint64_t result, int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(result + 8);
  if (*(__int16 *)(result + 8) < 0)
  {
    unsigned int v3 = *(_DWORD *)(result + 12);
    if (!v3) {
      return result;
    }
  }
  else
  {
    if (v2 < 0x20) {
      return result;
    }
    unsigned int v3 = v2 >> 5;
  }
  signed int v4 = v3 - 1;
  if ((v2 & 2) != 0) {
    uint64_t v5 = result + 10;
  }
  else {
    uint64_t v5 = *(void *)(result + 24);
  }
  if (*(unsigned __int16 *)(v5 + 2 * v4) != a2)
  {
    __int16 v6 = a2;
    return icu::UnicodeString::doAppend(result, (uint64_t)&v6, 0, 1);
  }
  return result;
}

void *icu::CompoundTransliterator::handleGetSourceSet(icu::CompoundTransliterator *this, icu::UnicodeSet *a2)
{
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v8);
  icu::UnicodeSet::clear(a2);
  uint64_t v4 = *((unsigned int *)this + 24);
  if ((int)v4 >= 1)
  {
    for (uint64_t i = 0; i < v4; ++i)
    {
      SourceSet = icu::Transliterator::getSourceSet(*(icu::Transliterator **)(*((void *)this + 11) + 8 * i), (icu::UVector **)v8);
      icu::UnicodeSet::addAll((icu::UVector **)a2, (const icu::UnicodeSet *)SourceSet);
      if (!icu::UnicodeSet::isEmpty(a2)) {
        break;
      }
      uint64_t v4 = *((int *)this + 24);
    }
  }
  return icu::UnicodeSet::~UnicodeSet((void *)v4, (icu::UnicodeSet *)v8);
}

icu::UnicodeSet *icu::CompoundTransliterator::getTargetSet(icu::CompoundTransliterator *this, icu::UnicodeSet *a2)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v9);
  icu::UnicodeSet::clear(a2);
  uint64_t v4 = *((unsigned int *)this + 24);
  if ((int)v4 >= 1)
  {
    for (uint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *(void *)(*((void *)this + 11) + 8 * i);
      unsigned int v7 = (const icu::UnicodeSet *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v6 + 128))(v6, v9);
      icu::UnicodeSet::addAll((icu::UVector **)a2, v7);
      uint64_t v4 = *((int *)this + 24);
    }
  }
  icu::UnicodeSet::~UnicodeSet((void *)v4, (icu::UnicodeSet *)v9);
  return a2;
}

uint64_t icu::CompoundTransliterator::handleTransliterate(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(_DWORD *)(a3 + 12);
  if (*(int *)(result + 96) <= 0)
  {
    *(_DWORD *)(a3 + 8) = v5;
  }
  else
  {
    uint64_t v8 = result;
    uint64_t v9 = 0;
    int v10 = 0;
    int v11 = *(_DWORD *)(a3 + 8);
    int v12 = *(_DWORD *)(a3 + 12);
    do
    {
      *(_DWORD *)(a3 + 8) = v11;
      if (v11 == v12) {
        break;
      }
      uint64_t v13 = *(void *)(*(void *)(v8 + 88) + 8 * v9);
      double result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 88))(v13, a2, a3, a4);
      if (a4)
      {
        int v14 = *(_DWORD *)(a3 + 8);
        int v15 = *(_DWORD *)(a3 + 12);
        *(_DWORD *)(a3 + 12) = v14;
      }
      else
      {
        int v14 = *(_DWORD *)(a3 + 12);
        if (*(_DWORD *)(a3 + 8) != v14) {
          *(_DWORD *)(a3 + 8) = v14;
        }
        int v15 = v14;
      }
      int v10 = v10 - v12 + v15;
      ++v9;
      int v12 = v14;
    }
    while (v9 < *(int *)(v8 + 96));
    *(_DWORD *)(a3 + 12) = v10 + v5;
  }
  return result;
}

void sub_18C8F9F08(int *a1)
{
  if (*a1 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192108, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192108))
    {
      if (dword_1E919210C >= 1) {
        *a1 = dword_1E919210C;
      }
    }
    else
    {
      sub_18C8F9FA0(a1);
      dword_1E919210C = *a1;
      icu::umtx_initImplPostInit(&dword_1E9192108);
    }
  }
}

char *sub_18C8F9FA0(_DWORD *a1)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  sub_18CA0A25C(0x1Du, (uint64_t)sub_18C8FAF2C);
  uint64_t v6 = icu::UMemory::operator new(v3, (icu::UMemory *)0x10, v2);
  if (v6)
  {
    unsigned int v7 = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)8, v4);
    if (v7) {
      *unsigned int v7 = (uint64_t)&unk_1EDA4B190;
    }
    *uint64_t v6 = (uint64_t)v7;
    uint64_t v5 = 1;
    *((unsigned char *)v6 + 8) = 1;
  }
  v119[0] = v6;
  int v10 = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x10, v4);
  if (v10)
  {
    int v11 = icu::UMemory::operator new((uint64_t *)v9, (icu::UMemory *)8, v8);
    if (v11) {
      *int v11 = (uint64_t)&unk_1EDA4B028;
    }
    *int v10 = (uint64_t)v11;
    uint64_t v9 = 1;
    *((unsigned char *)v10 + 8) = 1;
  }
  v119[1] = v10;
  int v14 = icu::UMemory::operator new((uint64_t *)v9, (icu::UMemory *)0x10, v8);
  if (v14)
  {
    int v15 = icu::UMemory::operator new((uint64_t *)v13, (icu::UMemory *)8, v12);
    if (v15) {
      *int v15 = (uint64_t)&unk_1EDA4B078;
    }
    *int v14 = (uint64_t)v15;
    uint64_t v13 = 1;
    *((unsigned char *)v14 + 8) = 1;
  }
  long long v131 = 0u;
  long long v132 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v120 = 0u;
  *(void *)&long long v120 = v14;
  uint64_t v18 = icu::UMemory::operator new((uint64_t *)v13, (icu::UMemory *)0x10, v12);
  if (v18)
  {
    BOOL v19 = icu::UMemory::operator new((uint64_t *)v17, (icu::UMemory *)8, v16);
    if (v19) {
      *BOOL v19 = (uint64_t)&unk_1EDA4B0E0;
    }
    *uint64_t v18 = (uint64_t)v19;
    uint64_t v17 = 1;
    *((unsigned char *)v18 + 8) = 1;
  }
  *((void *)&v120 + 1) = v18;
  uint64_t v22 = icu::UMemory::operator new((uint64_t *)v17, (icu::UMemory *)0x10, v16);
  if (v22)
  {
    int v23 = icu::UMemory::operator new((uint64_t *)v21, (icu::UMemory *)8, v20);
    if (v23) {
      *int v23 = (uint64_t)&unk_1EDA4B138;
    }
    *uint64_t v22 = (uint64_t)v23;
    uint64_t v21 = 1;
    *((unsigned char *)v22 + 8) = 1;
  }
  *(void *)&long long v121 = v22;
  unsigned int v26 = icu::UMemory::operator new((uint64_t *)v21, (icu::UMemory *)0x10, v20);
  if (v26)
  {
    int v27 = icu::UMemory::operator new((uint64_t *)v25, (icu::UMemory *)8, v24);
    if (v27)
    {
      *int v27 = 0;
      int v27 = sub_18C8FC52C(v27);
      *int v27 = (uint64_t)&unk_1EDA4AA40;
    }
    *unsigned int v26 = (uint64_t)v27;
    uint64_t v25 = 1;
    *((unsigned char *)v26 + 8) = 1;
  }
  *((void *)&v121 + 1) = v26;
  int v30 = icu::UMemory::operator new((uint64_t *)v25, (icu::UMemory *)0x10, v24);
  if (v30)
  {
    uint64_t v31 = icu::UMemory::operator new((uint64_t *)v29, (icu::UMemory *)8, v28);
    if (v31)
    {
      *uint64_t v31 = 0;
      uint64_t v31 = sub_18C8FC52C(v31);
      *uint64_t v31 = (uint64_t)&unk_1EDA4AA98;
    }
    *int v30 = (uint64_t)v31;
    uint64_t v29 = 1;
    *((unsigned char *)v30 + 8) = 1;
  }
  *(void *)&long long v122 = v30;
  int v34 = icu::UMemory::operator new((uint64_t *)v29, (icu::UMemory *)0x10, v28);
  if (v34)
  {
    uint64_t v35 = icu::UMemory::operator new((uint64_t *)v33, (icu::UMemory *)8, v32);
    if (v35)
    {
      *uint64_t v35 = 0;
      uint64_t v35 = sub_18C8FC52C(v35);
      *uint64_t v35 = (uint64_t)&unk_1EDA4AB08;
    }
    *int v34 = (uint64_t)v35;
    uint64_t v33 = 1;
    *((unsigned char *)v34 + 8) = 1;
  }
  *((void *)&v122 + 1) = v34;
  long long v38 = icu::UMemory::operator new((uint64_t *)v33, (icu::UMemory *)0x10, v32);
  if (v38)
  {
    uint64_t v39 = icu::UMemory::operator new((uint64_t *)v37, (icu::UMemory *)8, v36);
    if (v39)
    {
      *uint64_t v39 = 0;
      uint64_t v39 = sub_18C8FC52C(v39);
      *uint64_t v39 = (uint64_t)&unk_1EDA4AB78;
    }
    uint64_t *v38 = (uint64_t)v39;
    uint64_t v37 = 1;
    *((unsigned char *)v38 + 8) = 1;
  }
  *(void *)&long long v123 = v38;
  long long v42 = icu::UMemory::operator new((uint64_t *)v37, (icu::UMemory *)0x10, v36);
  if (v42)
  {
    uint64_t v43 = icu::UMemory::operator new((uint64_t *)v41, (icu::UMemory *)8, v40);
    if (v43)
    {
      *uint64_t v43 = 0;
      uint64_t v43 = sub_18C8FC52C(v43);
      *uint64_t v43 = (uint64_t)&unk_1EDA4ABE8;
    }
    *long long v42 = (uint64_t)v43;
    uint64_t v41 = 1;
    *((unsigned char *)v42 + 8) = 1;
  }
  *((void *)&v123 + 1) = v42;
  uint64_t v46 = icu::UMemory::operator new((uint64_t *)v41, (icu::UMemory *)0x10, v40);
  if (v46)
  {
    long long v47 = icu::UMemory::operator new((uint64_t *)v45, (icu::UMemory *)8, v44);
    if (v47)
    {
      *long long v47 = 0;
      long long v47 = sub_18C8FC52C(v47);
      *long long v47 = (uint64_t)&unk_1EDA4AC58;
    }
    *uint64_t v46 = (uint64_t)v47;
    uint64_t v45 = 1;
    *((unsigned char *)v46 + 8) = 1;
  }
  *(void *)&long long v124 = v46;
  uint64_t v50 = icu::UMemory::operator new((uint64_t *)v45, (icu::UMemory *)0x10, v44);
  if (v50)
  {
    __int16 v51 = icu::UMemory::operator new((uint64_t *)v49, (icu::UMemory *)8, v48);
    if (v51)
    {
      *__int16 v51 = 0;
      __int16 v51 = sub_18C8FC52C(v51);
      *__int16 v51 = (uint64_t)&unk_1EDA4ACB0;
    }
    *uint64_t v50 = (uint64_t)v51;
    uint64_t v49 = 1;
    *((unsigned char *)v50 + 8) = 1;
  }
  *((void *)&v124 + 1) = v50;
  int v54 = icu::UMemory::operator new((uint64_t *)v49, (icu::UMemory *)0x10, v48);
  if (v54)
  {
    char v55 = icu::UMemory::operator new((uint64_t *)v53, (icu::UMemory *)8, v52);
    if (v55)
    {
      *char v55 = 0;
      char v55 = sub_18C8FC52C(v55);
      *char v55 = (uint64_t)&unk_1EDA4ADD0;
    }
    uint64_t *v54 = (uint64_t)v55;
    uint64_t v53 = 1;
    *((unsigned char *)v54 + 8) = 1;
  }
  *(void *)&long long v125 = v54;
  unint64_t v58 = icu::UMemory::operator new((uint64_t *)v53, (icu::UMemory *)0x10, v52);
  if (v58)
  {
    int v59 = icu::UMemory::operator new((uint64_t *)v57, (icu::UMemory *)8, v56);
    if (v59)
    {
      *int v59 = 0;
      int v59 = sub_18C8FC52C(v59);
      *int v59 = (uint64_t)&unk_1EDA4AD78;
    }
    *unint64_t v58 = (uint64_t)v59;
    uint64_t v57 = 1;
    *((unsigned char *)v58 + 8) = 1;
  }
  *((void *)&v125 + 1) = v58;
  BOOL v62 = icu::UMemory::operator new((uint64_t *)v57, (icu::UMemory *)0x10, v56);
  if (v62)
  {
    int v63 = icu::UMemory::operator new((uint64_t *)v61, (icu::UMemory *)8, v60);
    if (v63)
    {
      *int v63 = 0;
      int v63 = sub_18C8FC52C(v63);
      *int v63 = (uint64_t)&unk_1EDA4AE28;
    }
    *BOOL v62 = (uint64_t)v63;
    uint64_t v61 = 1;
    *((unsigned char *)v62 + 8) = 1;
  }
  *(void *)&long long v126 = v62;
  char v66 = icu::UMemory::operator new((uint64_t *)v61, (icu::UMemory *)0x10, v60);
  if (v66)
  {
    BOOL v67 = icu::UMemory::operator new((uint64_t *)v65, (icu::UMemory *)8, v64);
    if (v67)
    {
      *BOOL v67 = 0;
      BOOL v67 = sub_18C8FC52C(v67);
      *BOOL v67 = (uint64_t)&unk_1EDA4AD20;
    }
    *char v66 = (uint64_t)v67;
    uint64_t v65 = 1;
    *((unsigned char *)v66 + 8) = 1;
  }
  *((void *)&v126 + 1) = v66;
  BOOL v70 = icu::UMemory::operator new((uint64_t *)v65, (icu::UMemory *)0x10, v64);
  if (v70)
  {
    unsigned int v71 = icu::UMemory::operator new((uint64_t *)v69, (icu::UMemory *)8, v68);
    if (v71) {
      *unsigned int v71 = (uint64_t)&unk_1EDA4A788;
    }
    uint64_t *v70 = (uint64_t)v71;
    uint64_t v69 = 1;
    *((unsigned char *)v70 + 8) = 1;
  }
  *(void *)&long long v127 = v70;
  BOOL v74 = icu::UMemory::operator new((uint64_t *)v69, (icu::UMemory *)0x10, v68);
  if (v74)
  {
    unsigned int v75 = icu::UMemory::operator new((uint64_t *)v73, (icu::UMemory *)8, v72);
    if (v75) {
      *unsigned int v75 = (uint64_t)&unk_1EDA4A900;
    }
    *BOOL v74 = (uint64_t)v75;
    uint64_t v73 = 1;
    *((unsigned char *)v74 + 8) = 1;
  }
  *((void *)&v127 + 1) = v74;
  char v78 = icu::UMemory::operator new((uint64_t *)v73, (icu::UMemory *)0x10, v72);
  if (v78)
  {
    unsigned int v79 = icu::UMemory::operator new((uint64_t *)v77, (icu::UMemory *)8, v76);
    if (v79) {
      *unsigned int v79 = (uint64_t)&unk_1EDA4A7F8;
    }
    uint64_t *v78 = (uint64_t)v79;
    uint64_t v77 = 1;
    *((unsigned char *)v78 + 8) = 1;
  }
  *(void *)&long long v128 = v78;
  int v82 = icu::UMemory::operator new((uint64_t *)v77, (icu::UMemory *)0x10, v76);
  if (v82)
  {
    BOOL v83 = icu::UMemory::operator new((uint64_t *)v81, (icu::UMemory *)8, v80);
    if (v83) {
      uint64_t *v83 = (uint64_t)&unk_1EDA4A850;
    }
    *int v82 = (uint64_t)v83;
    uint64_t v81 = 1;
    *((unsigned char *)v82 + 8) = 1;
  }
  *((void *)&v128 + 1) = v82;
  char v86 = icu::UMemory::operator new((uint64_t *)v81, (icu::UMemory *)0x10, v80);
  if (v86)
  {
    char v87 = icu::UMemory::operator new((uint64_t *)v85, (icu::UMemory *)8, v84);
    if (v87) {
      *char v87 = (uint64_t)&unk_1EDA4A8A8;
    }
    *char v86 = (uint64_t)v87;
    uint64_t v85 = 1;
    *((unsigned char *)v86 + 8) = 1;
  }
  *(void *)&long long v129 = v86;
  int v90 = icu::UMemory::operator new((uint64_t *)v85, (icu::UMemory *)0x10, v84);
  if (v90)
  {
    char v91 = icu::UMemory::operator new((uint64_t *)v89, (icu::UMemory *)8, v88);
    if (v91) {
      *char v91 = (uint64_t)&unk_1EDA4A650;
    }
    *int v90 = (uint64_t)v91;
    uint64_t v89 = 1;
    *((unsigned char *)v90 + 8) = 1;
  }
  *((void *)&v129 + 1) = v90;
  BOOL v94 = icu::UMemory::operator new((uint64_t *)v89, (icu::UMemory *)0x10, v88);
  if (v94)
  {
    char v95 = icu::UMemory::operator new((uint64_t *)v93, (icu::UMemory *)8, v92);
    if (v95) {
      *char v95 = (uint64_t)&unk_1EDA4A6B8;
    }
    uint64_t *v94 = (uint64_t)v95;
    uint64_t v93 = 1;
    *((unsigned char *)v94 + 8) = 1;
  }
  *(void *)&long long v130 = v94;
  BOOL v98 = icu::UMemory::operator new((uint64_t *)v93, (icu::UMemory *)0x10, v92);
  if (v98)
  {
    int v99 = icu::UMemory::operator new((uint64_t *)v97, (icu::UMemory *)8, v96);
    if (v99) {
      uint64_t *v99 = (uint64_t)&unk_1EDA4A708;
    }
    *BOOL v98 = (uint64_t)v99;
    uint64_t v97 = 1;
    *((unsigned char *)v98 + 8) = 1;
  }
  *((void *)&v130 + 1) = v98;
  BOOL v102 = icu::UMemory::operator new((uint64_t *)v97, (icu::UMemory *)0x10, v96);
  if (v102)
  {
    uint64_t v103 = icu::UMemory::operator new(v101, (icu::UMemory *)8, v100);
    if (v103)
    {
      uint64_t *v103 = 0;
      uint64_t v103 = sub_18C8FC52C(v103);
      uint64_t *v103 = (uint64_t)&unk_1EDA4AE98;
    }
    uint64_t *v102 = (uint64_t)v103;
    *((unsigned char *)v102 + 8) = 0;
  }
  *(void *)&long long v131 = v102;
  int v106 = icu::UMemory::operator new(v101, (icu::UMemory *)0x10, v100);
  if (v106)
  {
    uint64_t v107 = icu::UMemory::operator new(v105, (icu::UMemory *)8, v104);
    if (v107)
    {
      uint64_t *v107 = 0;
      uint64_t v107 = sub_18C8FC52C(v107);
      uint64_t *v107 = (uint64_t)&unk_1EDA4AEF0;
    }
    *int v106 = (uint64_t)v107;
    *((unsigned char *)v106 + 8) = 0;
  }
  *((void *)&v131 + 1) = v106;
  unsigned int v110 = icu::UMemory::operator new(v105, (icu::UMemory *)0x10, v104);
  if (v110)
  {
    uint64_t v111 = icu::UMemory::operator new(v109, (icu::UMemory *)8, v108);
    if (v111)
    {
      uint64_t *v111 = 0;
      uint64_t v111 = sub_18C8FC52C(v111);
      uint64_t *v111 = (uint64_t)&unk_1EDA4AF60;
    }
    *unsigned int v110 = (uint64_t)v111;
    *((unsigned char *)v110 + 8) = 0;
  }
  *(void *)&long long v132 = v110;
  unsigned int v114 = icu::UMemory::operator new(v109, (icu::UMemory *)0x10, v108);
  if (v114)
  {
    unsigned int v115 = icu::UMemory::operator new(v113, (icu::UMemory *)8, v112);
    if (v115)
    {
      uint64_t *v115 = 0;
      unsigned int v115 = sub_18C8FC52C(v115);
      uint64_t *v115 = (uint64_t)&unk_1EDA4AFB8;
    }
    *unsigned int v114 = (uint64_t)v115;
    *((unsigned char *)v114 + 8) = 0;
  }
  *((void *)&v132 + 1) = v114;
  double result = (char *)uprv_malloc(0xE0uLL);
  qword_1E9192100 = (uint64_t)result;
  if (result)
  {
    uint64_t v117 = 0;
    byte_1E91920F8 = 1;
    do
    {
      int64x2_t v118 = *(int64x2_t *)&v119[v117];
      *(int64x2_t *)&result[v117 * 8] = v118;
      *(int32x2_t *)v118.i8 = vmovn_s64(vceqzq_s64(v118));
      if (vorr_s8(*(int8x8_t *)v118.i8, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v118.i8, 1)).u32[0]) {
        *a1 = 7;
      }
      v117 += 2;
    }
    while (v117 != 28);
  }
  else
  {
    *a1 = 7;
  }
  return result;
}

uint64_t **sub_18C8FA8EC@<X0>(uint64_t **a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = icu::UMemory::operator new(a3, (icu::UMemory *)0x38, (unint64_t)a2);
  if (v5) {
    uint64_t v5 = (uint64_t *)sub_18C9403A0(v5, a2);
  }
  *a1 = v5;
  a1[1] = 0;
  uint64_t v6 = a1 + 1;
  a1[3] = 0;
  *(uint64_t **)((char *)a1 + 14) = 0;
  if (*a2 <= 0)
  {
    sub_18C8F9F08(a2);
    if (*a2 <= 0)
    {
      if (byte_1E91920F8) {
        size_t v7 = 224;
      }
      else {
        size_t v7 = 0;
      }
      unint64_t v8 = uprv_malloc(v7);
      *uint64_t v6 = v8;
      if (!v8)
      {
LABEL_20:
        *a2 = 7;
        return a1;
      }
      int v10 = (uint64_t *)byte_1E91920F8;
      if (byte_1E91920F8 == 1)
      {
        for (unint64_t i = 0; ; ++i)
        {
          unint64_t v12 = icu::UMemory::operator new(v10, (icu::UMemory *)0x20, v9);
          if (v12) {
            unint64_t v12 = (uint64_t *)sub_18C8FB2B4((uint64_t)v12);
          }
          *(void *)(*v6 + 8 * i) = v12;
          if (!*(void *)(*v6 + 8 * i)) {
            break;
          }
          int v10 = (uint64_t *)byte_1E91920F8;
          if (byte_1E91920F8 != 1 || i > 0x1A) {
            return a1;
          }
        }
        goto LABEL_20;
      }
    }
  }
  return a1;
}

uint64_t sub_18C8FA9E4(uint64_t a1)
{
  if (*(void *)a1)
  {
    unint64_t v2 = (void *)sub_18C9403E0();
    icu::UMemory::operator delete(v2);
  }
  if (byte_1E91920F8 == 1)
  {
    unint64_t v3 = 0;
    do
    {
      unint64_t v4 = *(void **)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        icu::UMemory::operator delete(v4);
        if (!byte_1E91920F8) {
          break;
        }
      }
    }
    while (v3++ < 0x1B);
  }
  uprv_free(*(void **)(a1 + 8));
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6) {
    uprv_free(v6);
  }
  return a1;
}

size_t sub_18C8FAA80(uint64_t a1, char *a2, int a3)
{
  size_t result = sub_18C9403E4(*(void *)a1, a2, a3);
  *(unsigned char *)(a1 + 21) = 1;
  return result;
}

uint64_t sub_18C8FAAB0(uint64_t a1, char a2)
{
  uint64_t v2 = *(char *)(a1 + 20);
  *(unsigned char *)(a1 + 20) = a2;
  *(unsigned char *)(a1 + 21) = 1;
  return v2;
}

uint64_t sub_18C8FAAC8(uint64_t a1)
{
  return *(char *)(a1 + 20);
}

char *sub_18C8FAAD0(char **a1, char *a2, int a3)
{
  return sub_18C940428(*a1, a2, a3);
}

uint64_t sub_18C8FAAD8(uint64_t a1, int *a2)
{
  int v4 = 0;
  sub_18C8FAB2C((void *)a1, &v4, a2);
  if (v4 < 1) {
    return 0;
  }
  else {
    return **(void **)(a1 + 8);
  }
}

uint64_t sub_18C8FAB2C(void *a1, _DWORD *a2, int *a3)
{
  if (sub_18C9404A4(*a1))
  {
    if (*((unsigned char *)a1 + 21))
    {
      sub_18C9404B4((unsigned __int8 **)*a1, *((char *)a1 + 20));
      *((_DWORD *)a1 + 4) = 0;
      if (byte_1E91920F8 == 1)
      {
        unint64_t v6 = 0;
        do
        {
          if ((*(unsigned int (**)(void, void, void))(***(void ***)(qword_1E9192100 + 8 * v6) + 16))(**(void **)(qword_1E9192100 + 8 * v6), *a1, *(void *)(a1[1] + 8 * *((int *)a1 + 4))))
          {
            ++*((_DWORD *)a1 + 4);
          }
        }
        while (byte_1E91920F8 == 1 && v6++ < 0x1B);
        uint64_t v8 = *((unsigned int *)a1 + 4);
        if ((int)v8 >= 2) {
          uprv_sortArray(a1[1], v8, 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18C8FAC64, 0, 1, a3);
        }
      }
      *((unsigned char *)a1 + 21) = 0;
    }
    int v9 = *((_DWORD *)a1 + 4);
    *a2 = v9;
    if (v9) {
      return a1[1];
    }
    uint64_t result = 0;
    int v11 = 10;
  }
  else
  {
    uint64_t result = 0;
    int v11 = 2;
  }
  *a3 = v11;
  return result;
}

uint64_t sub_18C8FAC64(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v4 = sub_18C8FB374(*a3);
  return v4 - sub_18C8FB374(*a2);
}

void *ucsdet_setDetectableCharset_0(void *result, const char *a2, unsigned __int8 a3, int *a4)
{
  if (*a4 > 0) {
    return result;
  }
  if (byte_1E91920F8 != 1)
  {
LABEL_10:
    int v12 = 1;
    goto LABEL_11;
  }
  size_t v7 = result;
  unint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = *(void *)(qword_1E9192100 + 8 * v8);
    int v10 = (const char *)(***(uint64_t (****)(void))v9)();
    uint64_t result = (void *)strcmp(v10, a2);
    if (!result) {
      break;
    }
    BOOL v11 = byte_1E91920F8 != 1 || v8++ >= 0x1B;
    if (v11) {
      goto LABEL_10;
    }
  }
  uint64_t result = (void *)v7[3];
  if (!result && *(unsigned __int8 *)(v9 + 8) != a3)
  {
    if (byte_1E91920F8) {
      size_t v13 = 28;
    }
    else {
      size_t v13 = 0;
    }
    uint64_t result = uprv_malloc(v13);
    v7[3] = result;
    if (result)
    {
      if (byte_1E91920F8 != 1)
      {
LABEL_25:
        *((unsigned char *)result + v8) = a3;
        return result;
      }
      unint64_t v14 = 0;
      uint64_t v15 = qword_1E9192100;
      do
      {
        *(unsigned char *)(v7[3] + v14) = *(unsigned char *)(*(void *)(v15 + 8 * v14) + 8);
        BOOL v11 = v14++ >= 0x1B;
      }
      while (!v11);
      uint64_t result = (void *)v7[3];
      goto LABEL_24;
    }
    int v12 = 7;
LABEL_11:
    *a4 = v12;
    return result;
  }
LABEL_24:
  if (result) {
    goto LABEL_25;
  }
  return result;
}

void *sub_18C8FADD8(int *a1)
{
  sub_18C8F9F08(a1);
  if (*a1 <= 0)
  {
    int v4 = uprv_malloc(0x38uLL);
    uint64_t v2 = v4;
    if (!v4)
    {
      *a1 = 7;
      return v2;
    }
    long long v5 = *(_OWORD *)&off_1EDA4A618;
    *(_OWORD *)int v4 = xmmword_1EDA4A608;
    *((_OWORD *)v4 + 1) = v5;
    *((_OWORD *)v4 + 2) = xmmword_1EDA4A628;
    v4[6] = off_1EDA4A638;
    unint64_t v6 = uprv_malloc(0x10uLL);
    v2[1] = v6;
    if (v6)
    {
      *unint64_t v6 = 0;
      v6[1] = 0;
      *((unsigned char *)v6 + 4) = 1;
      return v2;
    }
    *a1 = 7;
    uprv_free(v2);
  }
  return 0;
}

void *ucsdet_getDetectableCharsets_0(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
  {
    unint64_t v6 = uprv_malloc(0x38uLL);
    uint64_t v2 = v6;
    if (!v6)
    {
      *a2 = 7;
      return v2;
    }
    long long v7 = *(_OWORD *)&off_1EDA4A618;
    *(_OWORD *)unint64_t v6 = xmmword_1EDA4A608;
    *((_OWORD *)v6 + 1) = v7;
    *((_OWORD *)v6 + 2) = xmmword_1EDA4A628;
    v6[6] = off_1EDA4A638;
    unint64_t v8 = uprv_malloc(0x10uLL);
    v2[1] = v8;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 24);
      *unint64_t v8 = 0;
      v8[1] = v9;
      return v2;
    }
    *a2 = 7;
    uprv_free(v2);
  }
  return 0;
}

uint64_t sub_18C8FAF2C()
{
  v0 = (void *)qword_1E9192100;
  if (qword_1E9192100)
  {
    if (byte_1E91920F8 == 1)
    {
      unint64_t v1 = 0;
      do
      {
        uint64_t v2 = (void *)v0[v1];
        if (v2)
        {
          if (*v2) {
            (*(void (**)(void))(*(void *)*v2 + 32))(*v2);
          }
          icu::UMemory::operator delete(v2);
          v0 = (void *)qword_1E9192100;
          int v3 = byte_1E91920F8;
        }
        else
        {
          int v3 = 1;
        }
        v0[v1] = 0;
        if (!v3) {
          break;
        }
      }
      while (v1++ < 0x1B);
    }
    uprv_free(v0);
    qword_1E9192100 = 0;
    byte_1E91920F8 = 0;
  }
  atomic_store(0, &dword_1E9192108);
  return 1;
}

void sub_18C8FAFF0(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2) {
    uprv_free(v2);
  }

  uprv_free(a1);
}

uint64_t sub_18C8FB030(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 4))
  {
    if (byte_1E91920F8) {
      return 28;
    }
    else {
      return 0;
    }
  }
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3)
  {
    if (byte_1E91920F8)
    {
      unint64_t v4 = 0;
      LODWORD(result) = 0;
      do
      {
        if (*(unsigned char *)(v3 + v4)) {
          uint64_t result = (result + 1);
        }
        else {
          uint64_t result = result;
        }
        BOOL v5 = v4++ >= 0x1B;
      }
      while (!v5);
      return result;
    }
    return 0;
  }
  if (!byte_1E91920F8) {
    return 0;
  }
  unint64_t v6 = 0;
  LODWORD(result) = 0;
  do
  {
    if (*(unsigned char *)(*(void *)(qword_1E9192100 + 8 * v6) + 8)) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    BOOL v5 = v6++ >= 0x1B;
  }
  while (!v5);
  return result;
}

const char *sub_18C8FB0D0(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)v3;
  char v5 = byte_1E91920F8;
  if (byte_1E91920F8) {
    int v6 = 28;
  }
  else {
    int v6 = 0;
  }
  if (v4 < v6)
  {
    if (*(unsigned char *)(v3 + 4))
    {
      unint64_t v8 = **(uint64_t (*****)(void))(qword_1E9192100 + 8 * v4);
      uint64_t v9 = (const char *)(**v8)(v8);
      ++**(_DWORD **)(a1 + 8);
      goto LABEL_27;
    }
    uint64_t v10 = *(void *)(v3 + 8);
    if (v10)
    {
      while (1)
      {
        int v11 = (v5 & 1) != 0 ? 28 : 0;
        if (v4 >= v11) {
          break;
        }
        if (*(unsigned char *)(v10 + v4))
        {
          int v12 = **(uint64_t (*****)(void))(qword_1E9192100 + 8 * v4);
          uint64_t v9 = (const char *)(**v12)(v12);
          char v5 = byte_1E91920F8;
          uint64_t v3 = *(void *)(a1 + 8);
          int v4 = *(_DWORD *)v3;
        }
        else
        {
          uint64_t v9 = 0;
        }
        *(_DWORD *)uint64_t v3 = ++v4;
        if (v9) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      while (1)
      {
        int v13 = (v5 & 1) != 0 ? 28 : 0;
        if (v4 >= v13) {
          break;
        }
        uint64_t v14 = *(void *)(qword_1E9192100 + 8 * v4);
        if (*(unsigned char *)(v14 + 8))
        {
          uint64_t v9 = (const char *)(***(uint64_t (****)(void))v14)();
          char v5 = byte_1E91920F8;
          uint64_t v3 = *(void *)(a1 + 8);
          int v4 = *(_DWORD *)v3;
        }
        else
        {
          uint64_t v9 = 0;
        }
        *(_DWORD *)uint64_t v3 = ++v4;
        if (v9) {
          goto LABEL_27;
        }
      }
    }
  }
  uint64_t v9 = 0;
LABEL_27:
  if (a2)
  {
    if (v9) {
      int v15 = strlen(v9);
    }
    else {
      int v15 = 0;
    }
    *a2 = v15;
  }
  return v9;
}

uint64_t sub_18C8FB2A8(uint64_t result)
{
  **(_DWORD **)(result + 8) = 0;
  return result;
}

uint64_t sub_18C8FB2B4(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_18C8FB2C4(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = a4;
  *(void *)(result + 16) = a5;
  *(void *)(result + 24) = a6;
  if (a3)
  {
    uint64_t v7 = result;
    if (a5)
    {
      if (a6) {
        return result;
      }
LABEL_6:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 8))(a3);
      *(void *)(v7 + 24) = result;
      return result;
    }
    uint64_t result = (**(uint64_t (***)(uint64_t))a3)(a3);
    *(void *)(v7 + 16) = result;
    if (!*(void *)(v7 + 24)) {
      goto LABEL_6;
    }
  }
  return result;
}

uint64_t sub_18C8FB364(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_18C8FB36C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_18C8FB374(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_18C8FB37C(unsigned __int8 **a1, unint64_t a2, int a3, UErrorCode *a4)
{
  unint64_t v8 = ucnv_open(a1[2], a4);
  uint64_t v9 = ucnv_toUChars((uint64_t)v8, a2, a3, *((const char **)*a1 + 5), *((_DWORD *)*a1 + 12), (int *)a4);
  ucnv_close(v8);
  return v9;
}

uint64_t sub_18C8FB3F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3 < 1) {
    return 0;
  }
  int v6 = 0;
  int v7 = 0;
  uint64_t v23 = a2 + 1;
  uint64_t v24 = 0;
  uint64_t v22 = (unsigned __int8 *)(a4 + 1);
  uint64_t v25 = a5;
  do
  {
    int v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 == 27)
    {
      uint64_t v9 = a5;
      if ((int)a5 >= 1)
      {
        uint64_t v10 = 0;
        int v11 = v22;
        do
        {
          uint64_t v12 = a4;
          int v13 = strlen((const char *)(a4 + 5 * v10));
          if (a3 - v7 >= v13)
          {
            if (v13 < 2)
            {
LABEL_13:
              ++HIDWORD(v24);
              int v7 = v7 + v13 - 1;
              a5 = v9;
              a4 = v12;
              goto LABEL_17;
            }
            uint64_t v14 = v13 - 1;
            int v15 = v11;
            unint64_t v16 = (unsigned __int8 *)(v23 + v7);
            while (1)
            {
              int v18 = *v15++;
              int v17 = v18;
              int v19 = *v16++;
              if (v17 != v19) {
                break;
              }
              if (!--v14) {
                goto LABEL_13;
              }
            }
          }
          ++v10;
          v11 += 5;
          a4 = v12;
        }
        while (v10 != v25);
      }
      LODWORD(v24) = v24 + 1;
      a5 = v9;
    }
    if ((v8 & 0xFE) == 0xE) {
      ++v6;
    }
LABEL_17:
    ++v7;
  }
  while (v7 < a3);
  if (!HIDWORD(v24)) {
    return 0;
  }
  if (v6 + HIDWORD(v24) >= 5) {
    int v20 = 0;
  }
  else {
    int v20 = -10 * (5 - (v6 + HIDWORD(v24)));
  }
  return (100 * (HIDWORD(v24) - (int)v24) / ((int)v24 + HIDWORD(v24)) + v20) & ~((100
                                                                                              * (HIDWORD(v24) - (int)v24)
                                                                                              / ((int)v24 + HIDWORD(v24))
                                                                                              + v20) >> 31);
}

void sub_18C8FB598(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FB5C0()
{
  return "ISO-2022-JP";
}

BOOL sub_18C8FB5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_18C8FB3F4(a1, *(void *)a2, *(_DWORD *)(a2 + 8), (uint64_t)"\x1B$(C", 12);
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

void sub_18C8FB640(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FB668()
{
  return "ISO-2022-KR";
}

BOOL sub_18C8FB674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_18C8FB3F4(a1, *(void *)a2, *(_DWORD *)(a2 + 8), (uint64_t)"\x1B$)C", 1);
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

void sub_18C8FB6E8(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FB710()
{
  return "ISO-2022-CN";
}

BOOL sub_18C8FB71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_18C8FB3F4(a1, *(void *)a2, *(_DWORD *)(a2 + 8), (uint64_t)"\x1B$)A", 11);
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

const char *sub_18C8FB78C()
{
  return "";
}

uint64_t sub_18C8FB798(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5)
{
  int v10 = 0;
  unsigned int v11 = 0;
  int v12 = 0;
  int v39 = 0;
  int v13 = 0;
  unint64_t v40 = 0xFFFFFFFF00000000;
  uint64_t v41 = 0;
  int v14 = a4 - 1;
  while ((*(unsigned int (**)(uint64_t, unint64_t *, uint64_t))(*(void *)a1 + 40))(a1, &v40, a2))
  {
    if (BYTE4(v41))
    {
      ++v10;
    }
    else if (v40 >= 0x100)
    {
      if (a3 && a4 >= 1)
      {
        int v15 = 0;
        int v16 = v14;
        int v17 = v14;
        while (1)
        {
          int v18 = v16 >= 0 ? v16 : v16 + 1;
          int v19 = v18 >> 1;
          unsigned int v20 = *(unsigned __int16 *)(a3 + 2 * v19);
          if (v20 == (unsigned __int16)v40) {
            break;
          }
          if (v20 >= (unsigned __int16)v40) {
            int v17 = v19 - 1;
          }
          else {
            int v15 = v19 + 1;
          }
          int v16 = v15 + v17;
          if (v15 > v17) {
            goto LABEL_21;
          }
        }
        int v21 = v39;
        if (v16 > -2) {
          int v21 = v39 + 1;
        }
        int v39 = v21;
      }
LABEL_21:
      if (v13 <= 19)
      {
        unsigned __int8 v22 = *a5;
        if (*a5)
        {
          uint64_t v23 = 0;
          uint64_t v24 = *(void *)(a2 + 40);
          uint64_t v25 = v24 + SHIDWORD(v40);
          uint64_t v26 = *(int *)(a2 + 48);
          unint64_t v27 = v24 + v26;
          unint64_t v28 = a5;
          do
          {
            if (SHIDWORD(v40) < (int)v26)
            {
              uint64_t v29 = 0;
              int v30 = 0;
              while (*(unsigned __int8 *)(v25 + v29) == v22)
              {
                uint64_t v31 = &v28[v29++];
                unsigned __int8 v22 = v31[1];
                v30 += 5;
                if (v22) {
                  BOOL v32 = v29 + v25 >= v27;
                }
                else {
                  BOOL v32 = 1;
                }
                if (v32)
                {
                  if (v22) {
                    int v33 = 0;
                  }
                  else {
                    int v33 = v30;
                  }
                  goto LABEL_36;
                }
              }
            }
            int v33 = 0;
LABEL_36:
            v12 += v33;
            ++v23;
            unsigned __int8 v22 = a5[16 * v23];
            v28 += 16;
          }
          while (v22);
        }
      }
      ++v13;
    }
    ++v11;
    if (v10 >= 2 && 5 * v10 >= v13) {
      return 0;
    }
  }
  if (!v10 && v13 <= 10)
  {
    if (v13 || v11 >= 0xA)
    {
      if ((v12 - 1) >= 0x45) {
        int v34 = v12;
      }
      else {
        int v34 = v12 + 20;
      }
      unsigned int v35 = v34 + 10;
      if (v12 <= 90) {
        return v35;
      }
      else {
        return 100;
      }
    }
    return 0;
  }
  if (v13 < 20 * v10) {
    return 0;
  }
  if (a3)
  {
    long double v37 = 90.0 / log((double)v13 * 0.25);
    int v38 = v12 + (int)(log((double)v39 + 1.0) * v37 + 10.0);
  }
  else
  {
    int v38 = v12 - 20 * v10 + v13 + 30;
  }
  if (v38 >= 100) {
    int v38 = 100;
  }
  return v38 & ~(v38 >> 31);
}

void sub_18C8FBA48(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C8FBA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a2 + 8);
  *(_DWORD *)(a2 + 4) = v3;
  *(unsigned char *)(a2 + 12) = 0;
  int v4 = *(_DWORD *)(a3 + 48);
  if ((int)v3 >= v4)
  {
    uint64_t result = 0;
    *(unsigned char *)(a2 + 13) = 1;
    *(_DWORD *)a2 = -1;
  }
  else
  {
    uint64_t v5 = *(void *)(a3 + 40);
    uint64_t v6 = v3 + 1;
    *(_DWORD *)(a2 + 8) = v3 + 1;
    int v7 = *(char *)(v5 + v3);
    int v8 = *(unsigned __int8 *)(v5 + v3);
    *(_DWORD *)a2 = v8;
    uint64_t result = 1;
    if (v7 < 0 && (v8 - 161) >= 0x3F)
    {
      if ((int)v6 >= v4)
      {
        *(unsigned char *)(a2 + 13) = 1;
        int v10 = -1;
      }
      else
      {
        *(_DWORD *)(a2 + 8) = v3 + 2;
        int v10 = *(unsigned __int8 *)(v5 + v6);
        *(_DWORD *)a2 = v10 | (v8 << 8);
      }
      if ((v10 & 0xFFFFFFC0) != 0x40 && (v10 - 128) >= 0x7F) {
        *(unsigned char *)(a2 + 12) = 1;
      }
    }
  }
  return result;
}

BOOL sub_18C8FBB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_18C8FB798(a1, a2, (uint64_t)&unk_18CA8F340, 57, byte_18CA8F787);
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

const char *sub_18C8FBB88()
{
  return "Shift_JIS";
}

const char *sub_18C8FBB94()
{
  return "ja";
}

uint64_t sub_18C8FBBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a2 + 8);
  *(_DWORD *)(a2 + 4) = v3;
  *(unsigned char *)(a2 + 12) = 0;
  int v4 = *(_DWORD *)(a3 + 48);
  if ((int)v3 >= v4)
  {
    uint64_t result = 0;
    *(unsigned char *)(a2 + 13) = 1;
    *(_DWORD *)a2 = -1;
    return result;
  }
  uint64_t v5 = *(void *)(a3 + 40);
  uint64_t v6 = v3 + 1;
  *(_DWORD *)(a2 + 8) = v3 + 1;
  unsigned int v7 = *(unsigned __int8 *)(v5 + v3);
  *(_DWORD *)a2 = v7;
  if (v7 < 0x8E) {
    return 1;
  }
  if ((int)v6 >= v4)
  {
    *(unsigned char *)(a2 + 13) = 1;
    if (v7 - 161 < 0x5E)
    {
LABEL_20:
      uint64_t result = 1;
LABEL_21:
      *(unsigned char *)(a2 + 12) = 1;
      return result;
    }
    int v10 = -1;
    int v11 = v7;
  }
  else
  {
    int v9 = v3 + 2;
    *(_DWORD *)(a2 + 8) = v3 + 2;
    int v10 = *(unsigned __int8 *)(v5 + v6);
    int v11 = v10 | (v7 << 8);
    *(_DWORD *)a2 = v11;
    if (v7 - 161 < 0x5E)
    {
      if (v10 > 0xA0) {
        return 1;
      }
      goto LABEL_20;
    }
    LODWORD(v6) = v9;
  }
  if (v7 == 143)
  {
    if ((int)v6 >= v4)
    {
      *(unsigned char *)(a2 + 13) = 1;
      *(_DWORD *)a2 = -1;
    }
    else
    {
      *(_DWORD *)(a2 + 8) = v6 + 1;
      unsigned int v12 = *(unsigned __int8 *)(v5 + (int)v6);
      *(_DWORD *)a2 = v12 | (v11 << 8);
      if (v12 > 0xA0) {
        return 1;
      }
    }
    goto LABEL_20;
  }
  if (v7 != 142) {
    return 1;
  }
  uint64_t result = 1;
  if (v10 <= 160) {
    goto LABEL_21;
  }
  return result;
}

void sub_18C8FBCB4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FBCDC()
{
  return "EUC-JP";
}

const char *sub_18C8FBCE8()
{
  return "ja";
}

BOOL sub_18C8FBCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_18C8FB798(a1, a2, (uint64_t)&unk_18CA8F3B2, 100, byte_18CA8F7B7);
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

void sub_18C8FBD68(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FBD90()
{
  return "EUC-KR";
}

const char *sub_18C8FBD9C()
{
  return "ko";
}

BOOL sub_18C8FBDA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_18C8FB798(a1, a2, (uint64_t)&unk_18CA8F47A, 100, byte_18CA8F7E7);
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

void sub_18C8FBE1C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C8FBE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a2 + 8);
  *(_DWORD *)(a2 + 4) = v3;
  *(unsigned char *)(a2 + 12) = 0;
  int v4 = *(_DWORD *)(a3 + 48);
  if ((int)v3 >= v4)
  {
    uint64_t result = 0;
    *(unsigned char *)(a2 + 13) = 1;
    *(_DWORD *)a2 = -1;
  }
  else
  {
    uint64_t v5 = *(void *)(a3 + 40);
    uint64_t v6 = v3 + 1;
    *(_DWORD *)(a2 + 8) = v3 + 1;
    int v7 = *(char *)(v5 + v3);
    int v8 = *(unsigned __int8 *)(v5 + v3);
    *(_DWORD *)a2 = v8;
    if (v7 > -2) {
      return 1;
    }
    if ((int)v6 >= v4)
    {
      *(unsigned char *)(a2 + 13) = 1;
    }
    else
    {
      *(_DWORD *)(a2 + 8) = v3 + 2;
      unsigned int v10 = *(unsigned __int8 *)(v5 + v6);
      *(_DWORD *)a2 = v10 | (v8 << 8);
      if (v10 >= 0x40 && (v10 & 0x7F) != 0x7F) {
        return 1;
      }
    }
    uint64_t result = 1;
    *(unsigned char *)(a2 + 12) = 1;
  }
  return result;
}

const char *sub_18C8FBEE4()
{
  return "Big5";
}

const char *sub_18C8FBEF0()
{
  return "zh";
}

BOOL sub_18C8FBEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_18C8FB798(a1, a2, (uint64_t)&unk_18CA8F542, 96, byte_18CA8F827);
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

void sub_18C8FBF70(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C8FBF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a2 + 8);
  *(_DWORD *)(a2 + 4) = v3;
  *(unsigned char *)(a2 + 12) = 0;
  int v4 = *(_DWORD *)(a3 + 48);
  if ((int)v3 >= v4)
  {
    uint64_t result = 0;
    *(unsigned char *)(a2 + 13) = 1;
    int v9 = -1;
LABEL_5:
    *(_DWORD *)a2 = v9;
    return result;
  }
  uint64_t v5 = *(void *)(a3 + 40);
  uint64_t v6 = v3 + 1;
  *(_DWORD *)(a2 + 8) = v3 + 1;
  unsigned int v7 = *(unsigned __int8 *)(v5 + v3);
  *(_DWORD *)a2 = v7;
  if (v7 < 0x81) {
    return 1;
  }
  if ((int)v6 >= v4)
  {
    *(unsigned char *)(a2 + 13) = 1;
    int v11 = -1;
    int v12 = v7;
  }
  else
  {
    int v10 = v3 + 2;
    *(_DWORD *)(a2 + 8) = v3 + 2;
    int v11 = *(unsigned __int8 *)(v5 + v6);
    int v12 = v11 | (v7 << 8);
    *(_DWORD *)a2 = v12;
    LODWORD(v6) = v10;
  }
  uint64_t result = 1;
  if (v7 != 255 && (v11 - 64) >= 0xBF)
  {
    if ((v11 - 48) <= 9)
    {
      if ((int)v6 >= v4)
      {
LABEL_17:
        *(unsigned char *)(a2 + 13) = 1;
        goto LABEL_18;
      }
      uint64_t v13 = (int)v6 + 1;
      *(_DWORD *)(a2 + 8) = v13;
      int v14 = *(unsigned __int8 *)(v5 + (int)v6);
      if ((v14 - 129) <= 0x7D)
      {
        if ((int)v13 < v4)
        {
          *(_DWORD *)(a2 + 8) = v6 + 2;
          int v15 = *(unsigned __int8 *)(v5 + v13);
          if ((v15 - 48) <= 9)
          {
            int v9 = (v12 << 16) | (v14 << 8) | v15;
            goto LABEL_5;
          }
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
LABEL_18:
    *(unsigned char *)(a2 + 12) = 1;
  }
  return result;
}

const char *sub_18C8FC0AC()
{
  return "GB18030";
}

const char *sub_18C8FC0B8()
{
  return "zh";
}

BOOL sub_18C8FC0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = sub_18C8FB798(a1, a2, (uint64_t)&unk_18CA8F602, 100, byte_18CA8F867);
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

uint64_t sub_18C8FC13C(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3 = 32 * (*(_DWORD *)(a2 + 128) <= a3);
  if (*(_DWORD *)(a2 + 4 * (v3 | 0x10)) <= a3) {
    unsigned int v3 = (32 * (*(_DWORD *)(a2 + 128) <= a3)) | 0x10;
  }
  if (*(_DWORD *)(a2 + 4 * (v3 | 8)) <= a3) {
    v3 |= 8u;
  }
  if (*(_DWORD *)(a2 + 4 * (v3 | 4)) <= a3) {
    v3 |= 4u;
  }
  if (*(_DWORD *)(a2 + 4 * (v3 + 2)) <= a3) {
    v3 += 2;
  }
  if (*(_DWORD *)(a2 + 4 * (v3 + 1)) <= a3) {
    ++v3;
  }
  int v4 = v3 - (*(_DWORD *)(a2 + 4 * v3) > a3);
  if (v4 < 0) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a2 + 4 * v4) == a3) {
    return v4;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18C8FC1CC(uint64_t a1, int a2)
{
  ++*(_DWORD *)(a1 + 24);
  uint64_t result = sub_18C8FC13C(a1, *(void *)(a1 + 16), a2);
  if ((result & 0x80000000) == 0) {
    ++*(_DWORD *)(a1 + 28);
  }
  return result;
}

uint64_t sub_18C8FC214(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(int *)(a1 + 32);
  if ((int)v2 >= *((_DWORD *)a2 + 2)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *a2;
  *(_DWORD *)(a1 + 32) = v2 + 1;
  return *(unsigned __int8 *)(v3 + v2);
}

uint64_t sub_18C8FC240(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((result & 0x80000000) == 0)
  {
    char v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = *(unsigned __int8 *)(v6 + result);
      if (*(unsigned char *)(v6 + result))
      {
        BOOL v8 = v7 == 32;
        if (((v7 == 32) & v5) != 0)
        {
          char v5 = 1;
        }
        else
        {
          unsigned int v9 = v7 & 0xFF0000FF | ((unsigned __int16)*(_DWORD *)(a1 + 8) << 8);
          *(_DWORD *)(a1 + 8) = v9;
          sub_18C8FC1CC(a1, v9);
          char v5 = v8;
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2);
    }
    while ((result & 0x80000000) == 0);
  }
  return result;
}

uint64_t sub_18C8FC304(_DWORD *a1)
{
  (*(void (**)(_DWORD *))(*(void *)a1 + 24))(a1);
  int v2 = ((unsigned __int16)a1[2] << 8) | 0x20;
  a1[2] = v2;
  sub_18C8FC1CC((uint64_t)a1, v2);
  double v3 = (double)(int)a1[7] / (double)(int)a1[6];
  if (v3 <= 0.33) {
    return (int)(v3 * 300.0);
  }
  else {
    return 98;
  }
}

uint64_t sub_18C8FC39C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(int *)(a1 + 32);
  if ((int)v2 < *((_DWORD *)a2 + 2))
  {
    uint64_t v3 = *a2;
    if (*(unsigned char *)(*a2 + v2))
    {
      int v4 = *(unsigned char *)(*a2 + v2) & 0xFE;
      switch(v4)
      {
        case 178:
          int v5 = 71;
          break;
        case 184:
          int v5 = 86;
          break;
        case 180:
          int v5 = 73;
          break;
        default:
          *(_DWORD *)(a1 + 48) = 0;
          uint64_t v6 = byte_18CA8F8A8[*(unsigned __int8 *)(v3 + v2)];
          goto LABEL_12;
      }
      *(_DWORD *)(a1 + 48) = v5;
      uint64_t v6 = 177;
LABEL_12:
      *(_DWORD *)(a1 + 32) = v2 + 1;
      return v6;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18C8FC420(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((result & 0x80000000) == 0)
  {
    char v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = *(unsigned __int8 *)(v6 + result);
      if (*(unsigned char *)(v6 + result))
      {
        BOOL v8 = v7 == 32;
        if (((v7 == 32) & v5) != 0)
        {
          char v5 = 1;
        }
        else
        {
          unsigned int v9 = v7 & 0xFF0000FF | ((unsigned __int16)*(_DWORD *)(a1 + 8) << 8);
          *(_DWORD *)(a1 + 8) = v9;
          sub_18C8FC1CC(a1, v9);
          char v5 = v8;
        }
      }
      if (*(_DWORD *)(a1 + 48))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        uint64_t v11 = *(_DWORD *)(a1 + 48);
        int v12 = *(unsigned __int8 *)(v10 + v11);
        if (*(unsigned char *)(v10 + v11))
        {
          BOOL v13 = v12 == 32;
          if (((v12 == 32) & v5) != 0)
          {
            char v5 = 1;
          }
          else
          {
            unsigned int v14 = v12 & 0xFF0000FF | ((unsigned __int16)*(_DWORD *)(a1 + 8) << 8);
            *(_DWORD *)(a1 + 8) = v14;
            sub_18C8FC1CC(a1, v14);
            char v5 = v13;
          }
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2);
    }
    while ((result & 0x80000000) == 0);
  }
  return result;
}

void *sub_18C8FC52C(void *result)
{
  *uint64_t result = &unk_1EDA4A9B8;
  return result;
}

uint64_t sub_18C8FC554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = 0u;
  v5[1] = 0;
  v5[0] = &unk_1EDA4A958;
  v5[2] = a3;
  uint64_t v7 = a4;
  DWORD2(v6) = 0;
  LODWORD(v6) = 0;
  return sub_18C8FC304(v5);
}

void sub_18C8FC5B8(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

BOOL sub_18C8FC5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  if (*(unsigned char *)(a2 + 24)) {
    uint64_t v7 = "windows-1252";
  }
  else {
    uint64_t v7 = "ISO-8859-1";
  }
  int v8 = -1;
  do
  {
    uint64_t v9 = *(void *)((char *)&unk_1E550A8C8 + v6 + 256);
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2);
    if (v10 > v8)
    {
      int v11 = v10;
      sub_18C8FB2C4(a3, a2, a1, v10, (uint64_t)v7, v9);
      int v8 = v11;
    }
    v6 += 264;
  }
  while (v6 != 2640);
  if (v8 <= 9 && *(unsigned char *)(a2 + 25))
  {
    int v8 = 15;
    sub_18C8FB2C4(a3, a2, a1, 15, (uint64_t)v7, 0);
  }
  return v8 > 0;
}

const char *sub_18C8FC704()
{
  return "ISO-8859-1";
}

void sub_18C8FC714(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

BOOL sub_18C8FC73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  if (*(unsigned char *)(a2 + 24)) {
    uint64_t v7 = "windows-1250";
  }
  else {
    uint64_t v7 = "ISO-8859-2";
  }
  int v8 = -1;
  do
  {
    uint64_t v9 = *(void *)((char *)&unk_1E550B318 + v6 + 256);
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2);
    if (v10 > v8)
    {
      int v11 = v10;
      sub_18C8FB2C4(a3, a2, a1, v10, (uint64_t)v7, v9);
      int v8 = v11;
    }
    v6 += 264;
  }
  while (v6 != 1056);
  return v8 > 0;
}

const char *sub_18C8FC830()
{
  return "ISO-8859-2";
}

const char *sub_18C8FC83C()
{
  return "ISO-8859-5";
}

void sub_18C8FC84C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FC874()
{
  return "ru";
}

BOOL sub_18C8FC880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, void *, const char *))(*(void *)a1 + 40))(a1, a2, &unk_18CA8FBA8, "                                       ");
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

const char *sub_18C8FC90C()
{
  return "ISO-8859-6";
}

void sub_18C8FC91C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FC944()
{
  return "ar";
}

BOOL sub_18C8FC950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, void *, const char *))(*(void *)a1 + 40))(a1, a2, &unk_18CA8FDA8, "                                       ");
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

const char *sub_18C8FC9DC()
{
  return "ISO-8859-7";
}

void sub_18C8FC9EC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FCA14()
{
  return "el";
}

BOOL sub_18C8FCA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 24)) {
    int v6 = "windows-1253";
  }
  else {
    int v6 = "ISO-8859-7";
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  sub_18C8FB2C4(a3, a2, a1, v7, (uint64_t)v6, (uint64_t)"el");
  return v7 > 0;
}

const char *sub_18C8FCAD4()
{
  return "ISO-8859-8";
}

void sub_18C8FCAE4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FCB0C()
{
  return "ISO-8859-8-I";
}

const char *sub_18C8FCB18()
{
  return "he";
}

BOOL sub_18C8FCB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 24)) {
    int v6 = "windows-1255";
  }
  else {
    int v6 = "ISO-8859-8-I";
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  sub_18C8FB2C4(a3, a2, a1, v7, (uint64_t)v6, (uint64_t)"he");
  return v7 > 0;
}

void sub_18C8FCBDC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FCC04()
{
  return "he";
}

BOOL sub_18C8FCC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 24)) {
    int v6 = "windows-1255";
  }
  else {
    int v6 = "ISO-8859-8";
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  sub_18C8FB2C4(a3, a2, a1, v7, (uint64_t)v6, (uint64_t)"he");
  return v7 > 0;
}

const char *sub_18C8FCCC4()
{
  return "ISO-8859-9";
}

void sub_18C8FCCD4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FCCFC()
{
  return "tr";
}

BOOL sub_18C8FCD08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 24)) {
    int v6 = "windows-1254";
  }
  else {
    int v6 = "ISO-8859-9";
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  sub_18C8FB2C4(a3, a2, a1, v7, (uint64_t)v6, (uint64_t)"tr");
  return v7 > 0;
}

void sub_18C8FCDC0(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FCDE8()
{
  return "windows-1256";
}

const char *sub_18C8FCDF4()
{
  return "ar";
}

BOOL sub_18C8FCE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, void *, const char *))(*(void *)a1 + 40))(a1, a2, &unk_18CA906A8, "                                       ");
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

void sub_18C8FCE90(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FCEB8()
{
  return "windows-1251";
}

const char *sub_18C8FCEC4()
{
  return "ru";
}

BOOL sub_18C8FCED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, void *, const char *))(*(void *)a1 + 40))(a1, a2, &unk_18CA908A8, "                                       ");
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

void sub_18C8FCF60(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FCF88()
{
  return "KOI8-R";
}

const char *sub_18C8FCF94()
{
  return "ru";
}

BOOL sub_18C8FCFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, void *, const char *))(*(void *)a1 + 40))(a1, a2, &unk_18CA90AA8, "                                       ");
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

const char *sub_18C8FD02C()
{
  return "he";
}

void sub_18C8FD03C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FD064()
{
  return "IBM424_rtl";
}

BOOL sub_18C8FD070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, void *, const char *))(*(void *)a1 + 40))(a1, a2, &unk_18CA90CA8, "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ABCDEFGHI@@@@@@@QRSTUVWXY@@@@@@@@bcdefghi@@@@@@@q@@@@@@@@@@@");
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

void sub_18C8FD100(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FD128()
{
  return "IBM424_ltr";
}

BOOL sub_18C8FD134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, void *, const char *))(*(void *)a1 + 40))(a1, a2, &unk_18CA90EA8, "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ABCDEFGHI@@@@@@@QRSTUVWXY@@@@@@@@bcdefghi@@@@@@@q@@@@@@@@@@@");
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

const char *sub_18C8FD1C0()
{
  return "ar";
}

uint64_t sub_18C8FD1CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v5[1] = 0;
  long long v6 = 0u;
  v5[2] = a3;
  long long v7 = a4;
  LODWORD(v6) = 0;
  v5[0] = &unk_1EDA4A988;
  return sub_18C8FC304(v5);
}

void sub_18C8FD22C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FD254()
{
  return "IBM420_rtl";
}

BOOL sub_18C8FD260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void *))(*(void *)a1 + 40))(a1, a2, &unk_18CA90FA8, &unk_18CA910A8);
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

void sub_18C8FD2F0(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FD318()
{
  return "IBM420_ltr";
}

BOOL sub_18C8FD324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void *))(*(void *)a1 + 40))(a1, a2, &unk_18CA911A8, &unk_18CA910A8);
  sub_18C8FB2C4(a3, a2, a1, v6, 0, 0);
  return v6 > 0;
}

void sub_18C8FD3B4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FD3DC()
{
  return "UTF-16BE";
}

BOOL sub_18C8FD3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 48);
  if (v3 >= 30) {
    int v3 = 30;
  }
  if (v3 < 2)
  {
    unsigned int v5 = 10;
  }
  else
  {
    uint64_t v4 = 0;
    unsigned int v5 = 10;
    while (1)
    {
      unsigned int v6 = __rev16(*(unsigned __int16 *)(*(void *)(a2 + 40) + v4));
      if (!v4 && v6 == 65279) {
        break;
      }
      BOOL v7 = v6 - 32 < 0xE0 || v6 == 10;
      unsigned int v8 = v5 + 10;
      if (!v7) {
        unsigned int v8 = v5;
      }
      int v9 = v5 - 10;
      if (v6) {
        int v9 = v8;
      }
      if (v9 >= 100) {
        int v9 = 100;
      }
      unsigned int v5 = v9 & ~(v9 >> 31);
      if (v5)
      {
        v4 += 2;
        if (v5 != 100 && v3 - 1 > (int)v4) {
          continue;
        }
      }
      goto LABEL_25;
    }
    unsigned int v5 = 100;
  }
LABEL_25:
  if (v5 < 0x64 && v3 < 4) {
    int v12 = 0;
  }
  else {
    int v12 = v5;
  }
  sub_18C8FB2C4(a3, a2, a1, v12, 0, 0);
  return v12 != 0;
}

void sub_18C8FD4CC(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FD4F4()
{
  return "UTF-16LE";
}

BOOL sub_18C8FD500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a2 + 48);
  if (v5 >= 30) {
    int v6 = 30;
  }
  else {
    int v6 = *(_DWORD *)(a2 + 48);
  }
  if (v6 < 2)
  {
    unsigned int v9 = 10;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a2 + 40);
    unsigned int v9 = 10;
    while (1)
    {
      int v10 = *(unsigned __int16 *)(v8 + v7);
      if (!v7 && v10 == 65279) {
        break;
      }
      BOOL v11 = (v10 - 32) < 0xE0 || v10 == 10;
      unsigned int v12 = v9 + 10;
      if (!v11) {
        unsigned int v12 = v9;
      }
      int v13 = v9 - 10;
      if (*(_WORD *)(v8 + v7)) {
        int v13 = v12;
      }
      if (v13 >= 100) {
        int v13 = 100;
      }
      unsigned int v9 = v13 & ~(v13 >> 31);
      if (v9)
      {
        v7 += 2;
        if (v9 != 100 && v6 - 1 > (int)v7) {
          continue;
        }
      }
      goto LABEL_25;
    }
    if (v5 < 4)
    {
      unsigned int v9 = 100;
    }
    else
    {
      unsigned int v9 = 100;
      if (!*(unsigned char *)(v8 + 2))
      {
        if (*(unsigned char *)(v8 + 3)) {
          unsigned int v9 = 100;
        }
        else {
          unsigned int v9 = 0;
        }
      }
    }
  }
LABEL_25:
  if (v9 < 0x64 && v6 < 4) {
    int v16 = 0;
  }
  else {
    int v16 = v9;
  }
  sub_18C8FB2C4(a3, a2, a1, v16, 0, 0);
  return v16 != 0;
}

uint64_t sub_18C8FD600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 48);
  int v7 = v6 + 3;
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(a2 + 48);
  }
  if (v6 < 4)
  {
    char v18 = 0;
    int v17 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 40);
    signed int v9 = v7 & 0xFFFFFFFC;
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 40))(a1, v8, 0);
    uint64_t v11 = 0;
    int v12 = 0;
    unsigned int v13 = 0;
    do
    {
      unsigned int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v8, v11);
      BOOL v15 = v14 >= 0x10FFFF || v14 >> 11 == 27;
      int v16 = !v15;
      if (!v15) {
        ++v13;
      }
      v12 += v16 ^ 1;
      uint64_t v11 = (v11 + 4);
    }
    while ((int)v11 < v9);
    if (v10 == 65279 && !v12) {
      goto LABEL_16;
    }
    if (v10 == 65279 && v13 > 10 * v12)
    {
      int v17 = 80;
      goto LABEL_21;
    }
    if (v13 >= 4 && v12 == 0)
    {
LABEL_16:
      int v17 = 100;
LABEL_21:
      char v18 = 1;
      goto LABEL_22;
    }
    if (v13) {
      BOOL v21 = v12 == 0;
    }
    else {
      BOOL v21 = 0;
    }
    char v22 = v21;
    char v18 = v22 | (v13 > 10 * v12);
    if (v13 <= 10 * v12) {
      int v23 = 0;
    }
    else {
      int v23 = 25;
    }
    if (v22) {
      int v17 = 80;
    }
    else {
      int v17 = v23;
    }
  }
LABEL_22:
  sub_18C8FB2C4(a3, a2, a1, v17, 0, 0);
  return v18 & 1;
}

void sub_18C8FD7A0(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FD7C8()
{
  return "UTF-32BE";
}

uint64_t sub_18C8FD7D4(uint64_t a1, uint64_t a2, int a3)
{
  return bswap32(*(_DWORD *)(a2 + a3));
}

void sub_18C8FD7E4(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FD80C()
{
  return "UTF-32LE";
}

uint64_t sub_18C8FD818(uint64_t a1, uint64_t a2, int a3)
{
  return *(unsigned int *)(a2 + a3);
}

void sub_18C8FD824(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

const char *sub_18C8FD84C()
{
  return "UTF-8";
}

BOOL sub_18C8FD858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 **)(a2 + 40);
  uint64_t v4 = *(unsigned int *)(a2 + 48);
  if ((int)v4 < 3)
  {
    if ((int)v4 < 1)
    {
      BOOL v14 = 1;
      goto LABEL_40;
    }
    goto LABEL_6;
  }
  if (*v3 != 239 || v3[1] != 187)
  {
LABEL_6:
    BOOL v5 = 0;
    goto LABEL_7;
  }
  BOOL v5 = v3[2] == 191;
LABEL_7:
  LODWORD(v6) = 0;
  int v7 = 0;
  int v8 = 0;
  do
  {
    int v9 = (char)v3[(int)v6];
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    if ((v9 & 0xE0) == 0xC0)
    {
      int v10 = 1;
    }
    else if ((v9 & 0xF0) == 0xE0)
    {
      int v10 = 2;
    }
    else
    {
      if ((v9 & 0xF8) != 0xF0)
      {
LABEL_20:
        ++v7;
        goto LABEL_21;
      }
      int v10 = 3;
    }
    int v11 = v6 + v10;
    uint64_t v6 = (int)v6 + 1;
    while (v6 < v4)
    {
      if ((v3[v6] & 0xC0) != 0x80) {
        goto LABEL_20;
      }
      ++v6;
      if (!--v10)
      {
        ++v8;
        LODWORD(v6) = v11;
        break;
      }
    }
LABEL_21:
    LODWORD(v6) = v6 + 1;
  }
  while ((int)v6 < (int)v4);
  if (v7) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = v5;
  }
  if (v12)
  {
LABEL_26:
    int v13 = 100;
    goto LABEL_29;
  }
  if (!v5 || v8 <= 10 * v7)
  {
    if (v8 >= 4 && !v7) {
      goto LABEL_26;
    }
    if (v8 < 1 || v7)
    {
      BOOL v14 = (v8 | v7) == 0 || v8 > 10 * v7;
      if (v8 <= 10 * v7) {
        int v13 = 0;
      }
      else {
        int v13 = 25;
      }
      if (v8 | v7) {
        goto LABEL_41;
      }
LABEL_40:
      int v13 = 15;
      goto LABEL_41;
    }
  }
  int v13 = 80;
LABEL_29:
  BOOL v14 = 1;
LABEL_41:
  sub_18C8FB2C4(a3, a2, a1, v13, 0, 0);
  return v14;
}

icu::Measure *icu::CurrencyAmount::CurrencyAmount@<X0>(icu::Measure *a1@<X0>, const icu::Formattable *a2@<X1>, uint64_t *a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  int v9 = icu::UMemory::operator new(a5, (icu::UMemory *)0x20, (unint64_t)a2);
  if (v9)
  {
    int v10 = (icu::MeasureUnit *)v9;
    uint64_t v12 = *a3;
    icu::CurrencyUnit::CurrencyUnit(v9, &v12, a4);
    icu::Measure::Measure(a1, a2, v10, a4);
  }
  else
  {
    icu::Measure::Measure(a1, a2, 0, a4);
  }
  *(void *)a1 = &unk_1EDA4B1E0;
  return a1;
}

icu::Measure *icu::CurrencyAmount::CurrencyAmount(icu::Measure *a1, uint64_t *a2, UErrorCode *a3, double a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  icu::Formattable::Formattable((icu::Formattable *)v13, a4);
  int v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x20, v7);
  if (v9)
  {
    int v10 = (icu::MeasureUnit *)v9;
    uint64_t v12 = *a2;
    icu::CurrencyUnit::CurrencyUnit(v9, &v12, a3);
    icu::Measure::Measure(a1, (const icu::Formattable *)v13, v10, a3);
  }
  else
  {
    icu::Measure::Measure(a1, (const icu::Formattable *)v13, 0, a3);
  }
  icu::Formattable::~Formattable((icu::Formattable *)v13);
  *(void *)a1 = &unk_1EDA4B1E0;
  return a1;
}

void *icu::CurrencyAmount::CurrencyAmount(icu::CurrencyAmount *this, const icu::CurrencyAmount *a2)
{
  uint64_t result = (void *)icu::Measure::Measure(this, a2);
  *uint64_t result = &unk_1EDA4B1E0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)icu::Measure::Measure(this, a2);
  *uint64_t result = &unk_1EDA4B1E0;
  return result;
}

uint64_t icu::CurrencyAmount::operator=(uint64_t a1, uint64_t a2)
{
  icu::Measure::operator=(a1, a2);
  return a1;
}

icu::Measure *icu::CurrencyAmount::clone@<X0>(icu::CurrencyAmount *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Measure *)icu::UMemory::operator new(a3, (icu::UMemory *)0x80, a2);
  if (result)
  {
    uint64_t result = (icu::Measure *)icu::Measure::Measure(result, this);
    *(void *)uint64_t result = &unk_1EDA4B1E0;
  }
  return result;
}

void icu::CurrencyAmount::~CurrencyAmount(icu::CurrencyAmount *this)
{
  icu::Measure::~Measure(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::CurrencyAmount::getCurrency(icu::CurrencyAmount *this)
{
  return *((void *)this + 15);
}

void *icu::CurrencyAmount::getStaticClassID(icu::CurrencyAmount *this)
{
  return &unk_1E9192110;
}

void *icu::CurrencyAmount::getDynamicClassID(icu::CurrencyAmount *this)
{
  return &unk_1E9192110;
}

void *sub_18C8FDCD0(uint64_t a1, const char **a2, UErrorCode *a3)
{
  uint64_t result = (void *)icu::MeasureFormat::MeasureFormat(a1, a2, 0, a3);
  *uint64_t result = &unk_1EDA4B228;
  return result;
}

void sub_18C8FDD10(icu::MeasureFormat *a1)
{
  icu::MeasureFormat::~MeasureFormat(a1);

  icu::UMemory::operator delete(v1);
}

icu::MeasureFormat *sub_18C8FDD38@<X0>(const icu::MeasureFormat *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::MeasureFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x178, a2);
  if (result)
  {
    uint64_t result = icu::MeasureFormat::MeasureFormat(result, a1);
    *(void *)uint64_t result = &unk_1EDA4B228;
  }
  return result;
}

uint64_t sub_18C8FDD88(icu::MeasureFormat *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)icu::MeasureFormat::getCurrencyFormatInternal(a1) + 40);

  return v1();
}

icu::UObject *sub_18C8FDE00(icu::MeasureFormat *a1, uint64_t a2, icu::Formattable *a3, uint64_t a4)
{
  uint64_t CurrencyFormatInternal = icu::MeasureFormat::getCurrencyFormatInternal(a1);
  uint64_t result = (icu::UObject *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)CurrencyFormatInternal
                                                                                + 176))(CurrencyFormatInternal, a2, a4);
  if (result)
  {
    return (icu::UObject *)icu::Formattable::adoptObject(a3, result);
  }
  return result;
}

void *sub_18C8FDE8C()
{
  return &unk_1E9192111;
}

void *icu::CurrencyPluralInfo::getStaticClassID(icu::CurrencyPluralInfo *this)
{
  return &unk_1E9192112;
}

void *icu::CurrencyPluralInfo::getDynamicClassID(icu::CurrencyPluralInfo *this)
{
  return &unk_1E9192112;
}

icu::CurrencyPluralInfo *icu::CurrencyPluralInfo::CurrencyPluralInfo(icu::CurrencyPluralInfo *this, UErrorCode *a2)
{
  *(void *)this = &unk_1EDA4B290;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  Default = icu::Locale::getDefault(this);
  icu::CurrencyPluralInfo::initialize(this, (const icu::Locale *)Default, a2);
  return this;
}

{
  uint64_t *Default;

  *(void *)this = &unk_1EDA4B290;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  Default = icu::Locale::getDefault(this);
  icu::CurrencyPluralInfo::initialize(this, (const icu::Locale *)Default, a2);
  return this;
}

void icu::CurrencyPluralInfo::initialize(icu::CurrencyPluralInfo *this, const icu::Locale *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v6 = *((void *)this + 3);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *((void *)this + 3) = 0;
    uint64_t v7 = *((void *)this + 2);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    *((void *)this + 2) = 0;
    int v8 = icu::Locale::clone(a2, (unint64_t)a2);
    *((void *)this + 3) = v8;
    if (v8 && (*((unsigned char *)a2 + 216) || !*((unsigned char *)v8 + 216)))
    {
      *((void *)this + 2) = icu::PluralRules::forLocale(a2, (const icu::Locale *)a3, v9);
      icu::CurrencyPluralInfo::setupCurrencyPluralPattern(this, (char **)a2, a3);
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
}

icu::CurrencyPluralInfo *icu::CurrencyPluralInfo::CurrencyPluralInfo(icu::CurrencyPluralInfo *this, const icu::Locale *a2, UErrorCode *a3)
{
  *(void *)this = &unk_1EDA4B290;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  icu::CurrencyPluralInfo::initialize(this, a2, a3);
  return this;
}

{
  *(void *)this = &unk_1EDA4B290;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  icu::CurrencyPluralInfo::initialize(this, a2, a3);
  return this;
}

uint64_t icu::CurrencyPluralInfo::CurrencyPluralInfo(uint64_t this, uint64_t a2)
{
  *(void *)this = &unk_1EDA4B290;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return icu::CurrencyPluralInfo::operator=(this, a2);
}

{
  *(void *)this = &unk_1EDA4B290;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return icu::CurrencyPluralInfo::operator=(this, a2);
}

uint64_t icu::CurrencyPluralInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v4 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 32) = v4;
    BOOL v5 = (_DWORD *)(a1 + 32);
    if (v4 <= 0)
    {
      icu::CurrencyPluralInfo::deleteHash(a1, *(uint64_t ***)(a1 + 8));
      uint64_t inited = (uint64_t *)icu::CurrencyPluralInfo::initHash(v6, (UErrorCode *)(a1 + 32));
      *(void *)(a1 + 8) = inited;
      icu::CurrencyPluralInfo::copyHash((uint64_t)inited, *(uint64_t ***)(a2 + 8), inited, (int *)(a1 + 32));
      int v9 = (uint64_t *)*(unsigned int *)(a1 + 32);
      if ((int)v9 <= 0)
      {
        uint64_t v10 = *(void *)(a1 + 16);
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        *(void *)(a1 + 16) = 0;
        uint64_t v11 = *(void *)(a1 + 24);
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        *(void *)(a1 + 24) = 0;
        uint64_t v12 = *(icu::PluralRules **)(a2 + 16);
        if (v12 && (int v13 = icu::PluralRules::clone(v12, v9), (*(void *)(a1 + 16) = v13) == 0)
          || (uint64_t v14 = *(icu::Locale **)(a2 + 24)) != 0
          && ((BOOL v15 = icu::Locale::clone(v14, v8), (*(void *)(a1 + 24) = v15) == 0)
           || !*(unsigned char *)(*(void *)(a2 + 24) + 216) && *((unsigned char *)v15 + 216)))
        {
          *BOOL v5 = 7;
        }
      }
    }
  }
  return a1;
}

void icu::CurrencyPluralInfo::deleteHash(uint64_t a1, uint64_t **a2)
{
  if (a2)
  {
    int v5 = -1;
    while (1)
    {
      uint64_t v3 = uhash_nextElement(*a2, &v5);
      if (!v3) {
        break;
      }
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
    if (*a2) {
      uhash_close(*a2);
    }
    icu::UMemory::operator delete(a2);
  }
}

int32x2_t *icu::CurrencyPluralInfo::initHash(icu::CurrencyPluralInfo *this, UErrorCode *a2)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 <= 0)
  {
    int v5 = (int32x2_t *)icu::UMemory::operator new(v2, (icu::UMemory *)0x58, (unint64_t)a2);
    uint64_t v3 = v5;
    if (!v5)
    {
      int v9 = 0;
      if (*(int *)a2 <= 0)
      {
        uint64_t v3 = 0;
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
      goto LABEL_12;
    }
    *int v5 = 0;
    if (*(int *)a2 <= 0
      && (uint64_t v6 = v5 + 1,
          uhash_init(v5 + 1, (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, (int *)a2), *(int *)a2 <= 0))
    {
      *uint64_t v3 = (int32x2_t)v6;
      uhash_setKeyDeleter((uint64_t)&v3[1], (uint64_t)uprv_deleteUObject);
      int v7 = *a2;
      int v9 = v3;
      if (v7 <= 0)
      {
        uhash_setValueComparator((uint64_t)*v3, (uint64_t)sub_18C8FF280);
        int v9 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      int v9 = v3;
    }
    uint64_t v3 = 0;
LABEL_12:
    sub_18C8FF2F0((unsigned char ***)&v9);
    return v3;
  }
  return 0;
}

void icu::CurrencyPluralInfo::copyHash(uint64_t a1, uint64_t **a2, uint64_t *a3, int *a4)
{
  v21[8] = *(UChar **)MEMORY[0x1E4F143B8];
  if (*a4 <= 0)
  {
    int v20 = -1;
    if (a2)
    {
      do
      {
        uint64_t v7 = uhash_nextElement(*a2, &v20);
        if (!v7) {
          break;
        }
        uint64_t v11 = *(UChar ***)(v7 + 8);
        uint64_t v10 = *(UChar ***)(v7 + 16);
        uint64_t v12 = (icu::UnicodeString *)icu::UMemory::operator new(v9, (icu::UMemory *)0x40, v8);
        if (!v12)
        {
          if (*a4 <= 0) {
            *a4 = 7;
          }
          return;
        }
        uint64_t v13 = (uint64_t)v12;
        icu::UnicodeString::UnicodeString(v12, v11);
        if (*a4 > 0)
        {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
          return;
        }
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v21, v10);
        uint64_t v14 = *a3;
        int v17 = (icu::UnicodeString *)icu::UMemory::operator new(v16, (icu::UMemory *)0x40, v15);
        uint64_t v18 = (uint64_t)v17;
        if (v17) {
          icu::UnicodeString::UnicodeString(v17, v21);
        }
        uhash_put(v14, v18, v13, a4);
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v21);
      }
      while (*a4 < 1);
    }
  }
}

void icu::CurrencyPluralInfo::~CurrencyPluralInfo(uint64_t ***this)
{
  *this = (uint64_t **)&unk_1EDA4B290;
  icu::CurrencyPluralInfo::deleteHash((uint64_t)this, this[1]);
  this[1] = 0;
  uint64_t v2 = this[2];
  if (v2) {
    ((void (*)(uint64_t **))(*v2)[1])(v2);
  }
  uint64_t v3 = this[3];
  if (v3) {
    ((void (*)(uint64_t **))(*v3)[1])(v3);
  }
  this[2] = 0;
  this[3] = 0;

  icu::UObject::~UObject((icu::UObject *)this);
}

{
  void *v1;
  uint64_t vars8;

  icu::CurrencyPluralInfo::~CurrencyPluralInfo(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::CurrencyPluralInfo::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), *(void *)(a2 + 16));
  if (result)
  {
    uint64_t result = icu::Locale::operator==(*(void *)(a1 + 24), *(void *)(a2 + 24));
    if (result) {
      return uhash_equals(**(void **)(a1 + 8), **(void **)(a2 + 8)) != 0;
    }
  }
  return result;
}

uint64_t *icu::CurrencyPluralInfo::clone@<X0>(icu::CurrencyPluralInfo *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x28, a2);
  if (result)
  {
    *uint64_t result = (uint64_t)&unk_1EDA4B290;
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    *((_DWORD *)result + 8) = 0;
    uint64_t result = (uint64_t *)icu::CurrencyPluralInfo::operator=((uint64_t)result, (uint64_t)this);
    if (*((int *)result + 8) >= 1)
    {
      (*(void (**)(uint64_t *))(*result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t icu::CurrencyPluralInfo::getPluralRules(icu::CurrencyPluralInfo *this)
{
  return *((void *)this + 2);
}

UChar **icu::CurrencyPluralInfo::getCurrencyPluralPattern(icu::CurrencyPluralInfo *this, const icu::UnicodeString *a2, UChar **a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (UChar **)uhash_get(**((void **)this + 1), (uint64_t)a2);
  if (v6) {
    goto LABEL_2;
  }
  unsigned int v7 = *((unsigned __int16 *)a2 + 4);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  int32_t v10 = v8 >= 0 ? v9 : *((_DWORD *)a2 + 3);
  if (icu::UnicodeString::doCompare((uint64_t)a2, 0, v10, (uint64_t)L"other", 0, 5)
    && (uint64_t v11 = (uint64_t *)*((void *)this + 1),
        unint64_t v15 = L"other",
        icu::UnicodeString::UnicodeString(v16, 1, &v15),
        uint64_t v6 = (UChar **)uhash_get(*v11, (uint64_t)v16),
        icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v16),
        v6))
  {
LABEL_2:
    icu::UnicodeString::operator=(a3, v6);
  }
  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v16, (uint64_t)a0_1);
    icu::UnicodeString::operator=((icu::UnicodeString *)a3, (icu::UnicodeString *)v16);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v16);
  }
  return a3;
}

uint64_t icu::CurrencyPluralInfo::getLocale(icu::CurrencyPluralInfo *this)
{
  return *((void *)this + 3);
}

uint64_t *icu::CurrencyPluralInfo::setPluralRules(uint64_t *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v5 = this;
    uint64_t v6 = this[2];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    this = icu::PluralRules::createRules(a2, (const icu::UnicodeString *)a3, a3);
    v5[2] = (uint64_t)this;
  }
  return this;
}

uint64_t **icu::CurrencyPluralInfo::setCurrencyPluralPattern(uint64_t **this, UChar **a2, UChar **a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    unsigned int v7 = this;
    uint64_t v8 = uhash_get(*this[1], (uint64_t)a2);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    this = (uint64_t **)icu::UMemory::operator new(v10, (icu::UMemory *)0x40, v9);
    if (this)
    {
      uint64_t v11 = (uint64_t)this;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)this, a3);
      if (*(int *)a4 <= 0)
      {
        uint64_t v14 = v7[1];
        uint64_t v15 = *v14;
        int v16 = (icu::UnicodeString *)icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v12);
        uint64_t v17 = (uint64_t)v16;
        if (v16) {
          icu::UnicodeString::UnicodeString(v16, a2);
        }
        return (uint64_t **)uhash_put(v15, v17, v11, (int *)a4);
      }
      else
      {
        uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 8);
        return (uint64_t **)v13(v11);
      }
    }
    else if (*(int *)a4 <= 0)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

void icu::CurrencyPluralInfo::setupCurrencyPluralPattern(icu::CurrencyPluralInfo *this, char **a2, UErrorCode *a3)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    icu::CurrencyPluralInfo::deleteHash((uint64_t)this, *((uint64_t ***)this + 1));
    *((void *)this + 1) = icu::CurrencyPluralInfo::initHash(v6, a3);
    if (*(int *)a3 <= 0)
    {
      uint64_t Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)a2, a3, v7);
      UErrorCode v9 = *a3;
      if (!Instance && v9 <= U_ZERO_ERROR)
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        return;
      }
      if (v9 > U_ZERO_ERROR) {
        goto LABEL_85;
      }
      UErrorCode v79 = U_ZERO_ERROR;
      uint64_t v10 = ures_open(0, a2[5], (int *)&v79);
      uint64_t v11 = ures_getByKeyWithFallback(v10, "NumberElements", 0, &v79);
      Name = (char *)icu::NumberingSystem::getName(Instance);
      ures_getByKeyWithFallback(v11, Name, v10, &v79);
      ures_getByKeyWithFallback(v10, "patterns", v10, &v79);
      unsigned int v78 = 0;
      StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v10, "decimalFormat", (int *)&v78, &v79);
      UErrorCode v14 = v79;
      if (v79 == U_MISSING_RESOURCE_ERROR)
      {
        uint64_t v15 = StringByKeyWithFallback;
        int v16 = (const char *)icu::NumberingSystem::getName(Instance);
        int v17 = strcmp(v16, "latn");
        StringByKeyWithFallbacuint64_t k = v15;
        if (v17)
        {
          UErrorCode v79 = U_ZERO_ERROR;
          ures_getByKeyWithFallback(v11, "latn", v10, &v79);
          ures_getByKeyWithFallback(v10, "patterns", v10, &v79);
          StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v10, "decimalFormat", (int *)&v78, &v79);
        }
        UErrorCode v14 = v79;
      }
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = v78;
      if (v14 > U_ZERO_ERROR || (int)v78 < 1)
      {
        int v22 = 0;
      }
      else
      {
        unsigned int v21 = 0;
        int v22 = 0;
        LODWORD(v18) = 0;
        uint64_t v19 = 0;
        int v23 = StringByKeyWithFallback + 1;
        uint64_t v24 = v78;
        do
        {
          int v25 = *(v23 - 1);
          if (v25 == 59) {
            uint64_t v20 = v21;
          }
          else {
            uint64_t v20 = v20;
          }
          if (v25 == 59)
          {
            uint64_t v19 = (uint64_t)v23;
            uint64_t v18 = (v24 - 1);
          }
          else
          {
            uint64_t v18 = v18;
          }
          if (v25 == 59) {
            int v22 = 1;
          }
          ++v21;
          ++v23;
          --v24;
        }
        while (v24);
      }
      if (v14 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        if (v14 == U_MEMORY_ALLOCATION_ERROR) {
          *a3 = U_MEMORY_ALLOCATION_ERROR;
        }
LABEL_81:
        if (v11) {
          ures_close(v11);
        }
        if (v10) {
          ures_close(v10);
        }
LABEL_85:
        if (Instance) {
          (*(void (**)(icu::NumberingSystem *))(*(void *)Instance + 8))(Instance);
        }
        return;
      }
      uint64_t v64 = (uint64_t)StringByKeyWithFallback;
      uint64_t v26 = ures_open("icudt74l-curr", a2[5], (int *)&v79);
      uint64_t v67 = ures_getByKeyWithFallback(v26, "CurrencyUnitPatterns", 0, &v79);
      uint64_t Keywords = icu::PluralRules::getKeywords(*((icu::PluralRules **)this + 2), &v79);
      UErrorCode v28 = v79;
      uint64_t v68 = Keywords;
      if (Keywords || v79 > U_ZERO_ERROR)
      {
        if (v79 <= U_ZERO_ERROR)
        {
          uint64_t v29 = (*(uint64_t (**)(uint64_t, void, UErrorCode *))(*(void *)Keywords + 40))(Keywords, 0, &v79);
          if (v29)
          {
            int v30 = (char *)v29;
            uint64_t v62 = v26;
            uint64_t v63 = v11;
            while (1)
            {
              UErrorCode v28 = v79;
              if (v79 > U_ZERO_ERROR) {
                break;
              }
              uint64_t v77 = 0;
              uint64_t v65 = v30;
              uint64_t v31 = ures_getStringByKeyWithFallback(v67, v30, (int *)&v77 + 1, (UErrorCode *)&v77);
              UErrorCode v33 = (int)v77;
              if (v77 == 7 || v31 == 0) {
                goto LABEL_71;
              }
              if ((int)v77 <= 0 && SHIDWORD(v77) >= 1)
              {
                uint64_t v36 = (uint64_t)v31;
                long double v37 = icu::UMemory::operator new((uint64_t *)v77, (icu::UMemory *)0x40, v32);
                if (!v37)
                {
                  UErrorCode v33 = U_MEMORY_ALLOCATION_ERROR;
LABEL_71:
                  uint64_t v11 = v63;
                  UErrorCode v79 = v33;
                  goto LABEL_72;
                }
                char v66 = (icu::UnicodeString *)v37;
                icu::UnicodeString::UnicodeString((uint64_t)v37, v36, HIDWORD(v77));
                unint64_t v76 = "{";
                icu::UnicodeString::UnicodeString(v84, 1, &v76);
                icu::UnicodeString::UnicodeString((uint64_t)&v81, v64, v20);
                if (*((__int16 *)v66 + 4) < 0) {
                  int32_t v38 = *((_DWORD *)v66 + 3);
                }
                else {
                  int32_t v38 = *((unsigned __int16 *)v66 + 4) >> 5;
                }
                if ((SWORD4(v84[0]) & 0x8000u) == 0) {
                  uint64_t v39 = WORD4(v84[0]) >> 5;
                }
                else {
                  uint64_t v39 = HIDWORD(v84[0]);
                }
                int v40 = v82 >> 5;
                if ((v82 & 0x8000u) != 0) {
                  int v40 = v83;
                }
                icu::UnicodeString::findAndReplace(v66, 0, v38, (const icu::UnicodeString *)v84, 0, v39, (const icu::UnicodeString *)&v81, 0, v40);
                icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v81);
                uint64_t v43 = icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v84);
                v70[1] = v76;
                unsigned int v75 = "{";
                icu::UnicodeString::UnicodeString(v43, 1, &v75);
                BOOL v74 = &unk_18CA9170A;
                icu::UnicodeString::UnicodeString(&v81, 1, &v74);
                if (*((__int16 *)v66 + 4) < 0) {
                  int32_t v44 = *((_DWORD *)v66 + 3);
                }
                else {
                  int32_t v44 = *((unsigned __int16 *)v66 + 4) >> 5;
                }
                if ((SWORD4(v84[0]) & 0x8000u) == 0) {
                  uint64_t v45 = WORD4(v84[0]) >> 5;
                }
                else {
                  uint64_t v45 = HIDWORD(v84[0]);
                }
                int v46 = v82 >> 5;
                if ((v82 & 0x8000u) != 0) {
                  int v46 = v83;
                }
                icu::UnicodeString::findAndReplace(v66, 0, v44, (const icu::UnicodeString *)v84, 0, v45, (const icu::UnicodeString *)&v81, 0, v46);
                icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v81);
                v70[0] = v74;
                unint64_t v48 = icu::UnicodeString::~UnicodeString(v70, (icu::UnicodeString *)v84);
                v69[2] = v75;
                if (v22)
                {
                  memset(v84, 0, sizeof(v84));
                  icu::UnicodeString::UnicodeString((uint64_t)v48, v36, HIDWORD(v77));
                  uint64_t v73 = "{";
                  icu::UnicodeString::UnicodeString(&v81, 1, &v73);
                  icu::UnicodeString::UnicodeString((uint64_t)v80, v19, v18);
                  sub_18C8FF200((uint64_t)v84, (icu::UnicodeString *)&v81, (icu::UnicodeString *)v80);
                  icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)v80);
                  __int16 v51 = icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)&v81);
                  v69[1] = v73;
                  unint64_t v72 = "{";
                  icu::UnicodeString::UnicodeString(v51, 1, &v72);
                  unsigned int v71 = &unk_18CA9170A;
                  icu::UnicodeString::UnicodeString(v80, 1, &v71);
                  sub_18C8FF200((uint64_t)v84, (icu::UnicodeString *)&v81, (icu::UnicodeString *)v80);
                  icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)v80);
                  v69[0] = v71;
                  icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)&v81);
                  __int16 v81 = 59;
                  icu::UnicodeString::doAppend((uint64_t)v66, (uint64_t)&v81, 0, 1);
                  if ((SWORD4(v84[0]) & 0x8000u) == 0) {
                    uint64_t v53 = WORD4(v84[0]) >> 5;
                  }
                  else {
                    uint64_t v53 = HIDWORD(v84[0]);
                  }
                  icu::UnicodeString::doAppend((uint64_t)v66, (const icu::UnicodeString *)v84, 0, v53);
                  unint64_t v48 = icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)v84);
                }
                char v55 = (uint64_t *)*((void *)this + 1);
                icu::UnicodeString::UnicodeString(v48, v65, 0xFFFFFFFFLL, 0);
                uint64_t v56 = *v55;
                int v59 = (icu::UnicodeString *)icu::UMemory::operator new(v58, (icu::UMemory *)0x40, v57);
                uint64_t v60 = (uint64_t)v59;
                if (v59) {
                  icu::UnicodeString::UnicodeString(v59, (UChar **)v84);
                }
                uhash_put(v56, v60, (uint64_t)v66, (int *)a3);
                icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)v84);
                uint64_t v26 = v62;
              }
              int v30 = (char *)(*(uint64_t (**)(uint64_t, void, UErrorCode *))(*(void *)v68 + 40))(v68, 0, &v79);
              uint64_t v11 = v63;
              if (!v30) {
                goto LABEL_72;
              }
            }
          }
          else
          {
LABEL_72:
            UErrorCode v28 = v79;
          }
        }
        if (v28 != U_MEMORY_ALLOCATION_ERROR) {
          goto LABEL_75;
        }
      }
      else
      {
        UErrorCode v79 = U_MEMORY_ALLOCATION_ERROR;
      }
      *a3 = U_MEMORY_ALLOCATION_ERROR;
LABEL_75:
      if (v68) {
        (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
      }
      if (v67) {
        ures_close(v67);
      }
      if (v26) {
        ures_close(v26);
      }
      goto LABEL_81;
    }
  }
}

icu::UnicodeString *sub_18C8FF200(uint64_t a1, icu::UnicodeString *a2, icu::UnicodeString *a3)
{
  if (*(__int16 *)(a1 + 8) < 0) {
    int32_t v4 = *(_DWORD *)(a1 + 12);
  }
  else {
    int32_t v4 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  unsigned int v5 = *((unsigned __int16 *)a2 + 4);
  int v6 = (__int16)v5;
  unsigned int v7 = v5 >> 5;
  if (v6 >= 0) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = *((unsigned int *)a2 + 3);
  }
  unsigned int v9 = *((unsigned __int16 *)a3 + 4);
  int v10 = (__int16)v9;
  int v11 = v9 >> 5;
  if (v10 < 0) {
    int v11 = *((_DWORD *)a3 + 3);
  }
  return icu::UnicodeString::findAndReplace((icu::UnicodeString *)a1, 0, v4, a2, 0, v8, a3, 0, v11);
}

BOOL sub_18C8FF280(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 8);
  if (v2) {
    return *(_WORD *)(a2 + 8) & 1;
  }
  if ((v2 & 0x8000) != 0) {
    int v3 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v3 = v2 >> 5;
  }
  uint64_t v4 = 0;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
  if ((v5 & 0x8000u) == 0) {
    unsigned int v6 = v5 >> 5;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a2 + 12);
  }
  if ((v5 & 1) == 0 && v3 == v6) {
    return icu::UnicodeString::doEquals((icu::UnicodeString *)a1, (const icu::UnicodeString *)a2, v3);
  }
  return v4;
}

unsigned char ***sub_18C8FF2F0(unsigned char ***a1)
{
  unsigned int v2 = *a1;
  if (*a1)
  {
    if (*v2) {
      uhash_close(*v2);
    }
    icu::UMemory::operator delete(v2);
  }
  return a1;
}

uint64_t icu::CurrencyUnit::CurrencyUnit(uint64_t a1, _WORD **a2, int *a3)
{
  *(void *)icu::MeasureUnit::MeasureUnit(a1) = &unk_1EDA4B2D0;
  if (*a3 > 0) {
    goto LABEL_2;
  }
  unsigned int v7 = *a2;
  if (!*a2 || !*v7) {
    goto LABEL_2;
  }
  if (!v7[1] || !v7[2])
  {
    int v9 = 1;
LABEL_14:
    *a3 = v9;
LABEL_2:
    *(void *)(a1 + 20) = 0x5800580058;
    goto LABEL_3;
  }
  if (!uprv_isInvariantUString(v7, 3))
  {
    int v9 = 26;
    goto LABEL_14;
  }
  for (uint64_t i = 0; i != 3; ++i)
    *(_WORD *)(a1 + 20 + i * 2) = u_asciiToUpper((unsigned __int16)(*a2)[i]);
  *(_WORD *)(a1 + 26) = 0;
LABEL_3:
  *(_DWORD *)__s = 0;
  u_UCharsToChars((const UChar *)(a1 + 20), __s, 4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v10, __s);
  icu::MeasureUnit::initCurrency(a1, v10, v11);
  return a1;
}

uint64_t icu::CurrencyUnit::CurrencyUnit(uint64_t a1, char *a2, int a3, int *a4)
{
  *(void *)icu::MeasureUnit::MeasureUnit(a1) = &unk_1EDA4B2D0;
  int v14 = 0;
  if (a3 != 3 || memchr(a2, 0, 3uLL))
  {
    int v8 = 1;
LABEL_4:
    *a4 = v8;
    int v9 = "XXX";
    goto LABEL_5;
  }
  if (!uprv_isInvariantString((unsigned __int8 *)a2, 3))
  {
    int v8 = 26;
    goto LABEL_4;
  }
  for (uint64_t i = 0; i != 3; ++i)
    *((unsigned char *)&v14 + i) = uprv_toupper(a2[i]);
  HIBYTE(v14) = 0;
  int v9 = (const char *)&v14;
LABEL_5:
  u_charsToUChars(v9, (UChar *)(a1 + 20), 4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v12, v9);
  icu::MeasureUnit::initCurrency(a1, v12, v13);
  return a1;
}

icu::CurrencyUnit *icu::CurrencyUnit::CurrencyUnit(icu::CurrencyUnit *this, const UChar *a2)
{
  uint64_t v4 = icu::MeasureUnit::MeasureUnit((uint64_t)this, (unint64_t)a2);
  *(void *)uint64_t v4 = &unk_1EDA4B2D0;
  u_strcpy((UChar *)(v4 + 20), a2 + 10);
  return this;
}

{
  uint64_t v4;

  uint64_t v4 = icu::MeasureUnit::MeasureUnit((uint64_t)this, (unint64_t)a2);
  *(void *)uint64_t v4 = &unk_1EDA4B2D0;
  u_strcpy((UChar *)(v4 + 20), a2 + 10);
  return this;
}

icu::CurrencyUnit *icu::CurrencyUnit::CurrencyUnit(icu::CurrencyUnit *this, const icu::MeasureUnit *a2, UErrorCode *a3)
{
  unsigned int v5 = (icu::MeasureUnit *)icu::MeasureUnit::MeasureUnit((uint64_t)this, (unint64_t)a2);
  *(void *)unsigned int v5 = &unk_1EDA4B2D0;
  unsigned int v6 = (UChar *)((char *)v5 + 20);
  Type = icu::MeasureUnit::getType(v5);
  if (!strcmp("currency", Type))
  {
    Subtype = icu::MeasureUnit::getSubtype(this);
    u_charsToUChars(Subtype, v6, 4);
    *((_WORD *)this + 13) = 0;
  }
  else
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    *unsigned int v6 = 0;
  }
  return this;
}

icu::CurrencyUnit *icu::CurrencyUnit::CurrencyUnit(icu::CurrencyUnit *this)
{
  uint64_t v2 = icu::MeasureUnit::MeasureUnit((uint64_t)this);
  *(void *)uint64_t v2 = &unk_1EDA4B2D0;
  int v3 = (const UChar *)(v2 + 20);
  u_strcpy((UChar *)(v2 + 20), (const UChar *)"X");
  *(_DWORD *)__s = 0;
  u_UCharsToChars(v3, __s, 4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v5, __s);
  icu::MeasureUnit::initCurrency((uint64_t)this, v5, v6);
  return this;
}

uint64_t icu::CurrencyUnit::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    icu::MeasureUnit::operator=(a1, a2);
    u_strcpy((UChar *)(a1 + 20), (const UChar *)(a2 + 20));
  }
  return a1;
}

uint64_t *icu::CurrencyUnit::clone@<X0>(const UChar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x20, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    uint64_t v6 = icu::MeasureUnit::MeasureUnit((uint64_t)v4, (unint64_t)this);
    *(void *)uint64_t v6 = &unk_1EDA4B2D0;
    u_strcpy((UChar *)(v6 + 20), this + 10);
  }
  return v5;
}

void icu::CurrencyUnit::~CurrencyUnit(icu::CurrencyUnit *this)
{
  icu::MeasureUnit::~MeasureUnit(this);

  icu::UMemory::operator delete(v1);
}

void *icu::CurrencyUnit::getStaticClassID(icu::CurrencyUnit *this)
{
  return &unk_1E9192113;
}

void *icu::CurrencyUnit::getDynamicClassID(icu::CurrencyUnit *this)
{
  return &unk_1E9192113;
}

uint64_t sub_18C8FF7FC(uint64_t a1, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192124, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192124))
    {
      if (dword_1E9192128 >= 1) {
        *a2 = dword_1E9192128;
      }
    }
    else
    {
      sub_18C8FF984(a2, v3);
      dword_1E9192128 = *a2;
      icu::umtx_initImplPostInit(&dword_1E9192124);
    }
  }
  return qword_1E9192118;
}

icu::ChineseCalendar *sub_18C8FF888(icu::ChineseCalendar *a1, char **a2, UErrorCode *a3)
{
  *(void *)a1 = &unk_1EDA4B320;
  uint64_t v6 = (const icu::TimeZone *)sub_18C8FF7FC((uint64_t)a1, a3);
  uint64_t result = icu::ChineseCalendar::ChineseCalendar(a1, a2, -2332, v6, a3);
  *(void *)a1 = &unk_1EDA4B320;
  return result;
}

void sub_18C8FF900(icu::ChineseCalendar *a1)
{
  icu::ChineseCalendar::~ChineseCalendar(a1);

  icu::UMemory::operator delete(v1);
}

icu::ChineseCalendar *sub_18C8FF928@<X0>(const icu::ChineseCalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::ChineseCalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x278, a2);
  if (result)
  {
    uint64_t result = (icu::ChineseCalendar *)icu::ChineseCalendar::ChineseCalendar(result, a1);
    *(void *)uint64_t result = &unk_1EDA4B320;
  }
  return result;
}

const char *sub_18C8FF978()
{
  return "dangi";
}

void sub_18C8FF984(UErrorCode *a1, unint64_t a2)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  v25[0] = 0xC280C00C2C600000;
  unint64_t v24 = 0xC280854EA3000000;
  unint64_t v23 = 0xC27A9DE23F800000;
  uint64_t v4 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new((uint64_t *)0xC27A9DE23F800000, (icu::UMemory *)0x50, a2);
  if (v4)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v22, (uint64_t)"G");
    icu::InitialTimeZoneRule::InitialTimeZoneRule(v4, v22, 28800000, 0);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v22);
  }
  else
  {
    uint64_t v6 = *(unsigned int *)a1;
    if ((int)v6 <= 0)
    {
      uint64_t v6 = 7;
      *a1 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  int v8 = (icu::TimeZoneRule *)icu::UMemory::operator new((uint64_t *)v6, (icu::UMemory *)0x160, v3);
  if (v8)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v22, (uint64_t)"K");
    icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(v8, v22, 25200000, 0, v25, 1, 1);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v22);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)a1;
    if ((int)v10 <= 0)
    {
      uint64_t v10 = 7;
      *a1 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  unint64_t v12 = (icu::TimeZoneRule *)icu::UMemory::operator new((uint64_t *)v10, (icu::UMemory *)0x160, v7);
  if (v12)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v22, (uint64_t)"K");
    icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(v12, v22, 28800000, 0, &v24, 1, 1);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v22);
  }
  else
  {
    uint64_t v14 = *(unsigned int *)a1;
    if ((int)v14 <= 0)
    {
      uint64_t v14 = 7;
      *a1 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  int v16 = (icu::TimeZoneRule *)icu::UMemory::operator new((uint64_t *)v14, (icu::UMemory *)0x160, v11);
  if (v16)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v22, (uint64_t)L"Korean 1912-");
    icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(v16, v22, 32400000, 0, &v23, 1, 1);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v22);
  }
  else
  {
    uint64_t v18 = *(unsigned int *)a1;
    if ((int)v18 <= 0)
    {
      uint64_t v18 = 7;
      *a1 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  uint64_t v19 = icu::UMemory::operator new((uint64_t *)v18, (icu::UMemory *)0x70, v15);
  if (v19)
  {
    uint64_t v20 = (icu::RuleBasedTimeZone *)v19;
    icu::UnicodeString::UnicodeString((uint64_t)v22, (uint64_t)"K");
    icu::RuleBasedTimeZone::RuleBasedTimeZone(v20, v22, v4);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v22);
    if (*(int *)a1 <= 0)
    {
      icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v20, v8, a1);
      icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v20, v12, a1);
      icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v20, v16, a1);
      icu::RuleBasedTimeZone::complete((uint64_t)v20, a1);
      if (*(int *)a1 <= 0)
      {
        qword_1E9192118 = (uint64_t)v20;
        sub_18CA0A25C(0xCu, (uint64_t)sub_18C8FFDC4);
        return;
      }
      sub_18CA0A25C(0xCu, (uint64_t)sub_18C8FFDC4);
      int v16 = 0;
      unint64_t v12 = 0;
      int v8 = 0;
    }
    (*(void (**)(icu::RuleBasedTimeZone *))(*(void *)v20 + 8))(v20);
    uint64_t v4 = 0;
  }
  else if (*(int *)a1 <= 0)
  {
    *a1 = U_MEMORY_ALLOCATION_ERROR;
  }
  if (v16) {
    (*(void (**)(icu::TimeZoneRule *))(*(void *)v16 + 8))(v16);
  }
  if (v12) {
    (*(void (**)(icu::TimeZoneRule *))(*(void *)v12 + 8))(v12);
  }
  if (v8) {
    (*(void (**)(icu::TimeZoneRule *))(*(void *)v8 + 8))(v8);
  }
  if (v4) {
    (*(void (**)(icu::InitialTimeZoneRule *))(*(void *)v4 + 8))(v4);
  }
}

uint64_t sub_18C8FFD64(unsigned char *a1, UErrorCode *a2)
{
  unsigned int v3 = icu::Calendar::get(a1, 0x13u, a2) - 2333;
  if (*(int *)a2 <= 0) {
    return v3;
  }
  else {
    return 0;
  }
}

unsigned char *sub_18C8FFDA0(unsigned char *a1, int a2)
{
  return icu::Calendar::set(a1, 0x13u, a2 + 2333);
}

void *icu::DangiCalendar::getStaticClassID(icu::DangiCalendar *this)
{
  return &unk_1E9192120;
}

void *sub_18C8FFDB8()
{
  return &unk_1E9192120;
}

uint64_t sub_18C8FFDC4()
{
  if (qword_1E9192118)
  {
    (*(void (**)(uint64_t))(*(void *)qword_1E9192118 + 8))(qword_1E9192118);
    qword_1E9192118 = 0;
  }
  atomic_store(0, &dword_1E9192124);
  return 1;
}

void sub_18C8FFE24(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4B548;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 24));

  icu::SharedObject::~SharedObject((icu::SharedObject *)a1);
}

void sub_18C8FFE78(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA4B548;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 24));
  icu::SharedObject::~SharedObject((icu::SharedObject *)a1);

  icu::UMemory::operator delete(v3);
}

uint64_t sub_18C8FFED0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 16;
  return 0;
}

void sub_18C8FFEE0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4B570;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 240));
  *(void *)a1 = &unk_1EDA4B730;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));

  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18C8FFF5C(uint64_t a1)
{
  sub_18C8FFEE0(a1);

  icu::UMemory::operator delete(v1);
}

void *icu::DateFormat::DateFormat(icu::DateFormat *this)
{
  uint64_t result = (void *)icu::Format::Format((uint64_t)this);
  *uint64_t result = &unk_1EDA4B5C0;
  result[41] = 0;
  result[42] = 0;
  result[43] = 0x10000000000;
  return result;
}

void *icu::DateFormat::DateFormat(icu::DateFormat *this, const icu::DateFormat *a2)
{
  unsigned int v3 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *unsigned int v3 = &unk_1EDA4B5C0;
  v3[41] = 0;
  v3[42] = 0;
  v3[43] = 0x10000000000;

  return icu::DateFormat::operator=(v3, a2);
}

void *icu::DateFormat::operator=(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1[41];
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = a1[42];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = a2[41];
    if (v6) {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
    }
    a1[41] = v6;
    uint64_t v7 = a2[42];
    if (v7) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
    a1[42] = v7;
    a1[43] = a2[43];
  }
  return a1;
}

void icu::DateFormat::~DateFormat(icu::DateFormat *this)
{
  *(void *)this = &unk_1EDA4B5C0;
  uint64_t v2 = *((void *)this + 41);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 42);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  icu::Format::~Format(this);
}

uint64_t icu::DateFormat::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = icu::Format::operator==((void *)a1, (void *)a2);
  if (result)
  {
    uint64_t result = *(void *)(a1 + 328);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 40))(result, *(void *)(a2 + 328));
      if (result)
      {
        uint64_t result = *(void *)(a1 + 336);
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 24))(result, *(void *)(a2 + 336));
          if (result) {
            return *(_DWORD *)(a1 + 348) == *(_DWORD *)(a2 + 348);
          }
        }
      }
    }
  }
  return result;
}

icu::UnicodeString *icu::DateFormat::format(icu::DateFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    unsigned int Type = icu::Formattable::getType(a2);
    if (Type == 2)
    {
      double v11 = (double)*((int *)a2 + 2);
    }
    else
    {
      if (Type > 1)
      {
        *a5 = U_ILLEGAL_ARGUMENT_ERROR;
        return a3;
      }
      double v11 = *((double *)a2 + 1);
    }
    icu::DateFormat::format(this, (uint64_t)a3, (uint64_t)a4, v11);
  }
  return a3;
}

uint64_t icu::DateFormat::format(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6 = a1[41];
  if (v6)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
    if (v9)
    {
      uint64_t v10 = v9;
      UErrorCode v12 = U_ZERO_ERROR;
      icu::Calendar::setTimeInMillis(v9, a4, &v12);
      if (v12 <= U_ZERO_ERROR) {
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 64))(a1, v10, a2, a3);
      }
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  return a2;
}

icu::UnicodeString *icu::DateFormat::format(icu::DateFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    unsigned int Type = icu::Formattable::getType(a2);
    if (Type == 2)
    {
      double v11 = (double)*((int *)a2 + 2);
    }
    else
    {
      if (Type > 1)
      {
        *a5 = U_ILLEGAL_ARGUMENT_ERROR;
        return a3;
      }
      double v11 = *((double *)a2 + 1);
    }
    icu::DateFormat::format(this, (uint64_t)a3, (uint64_t)a4, a5, v11);
  }
  return a3;
}

uint64_t icu::DateFormat::format(void *a1, uint64_t a2, uint64_t a3, UErrorCode *a4, double a5)
{
  uint64_t v7 = a1[41];
  if (v7)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
    if (v11)
    {
      uint64_t v12 = v11;
      icu::Calendar::setTimeInMillis(v11, a5, a4);
      if (*(int *)a4 <= 0) {
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, UErrorCode *))(*a1 + 72))(a1, v12, a2, a3, a4);
      }
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  return a2;
}

uint64_t icu::DateFormat::format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result = a3;
  if (*a5 <= 0) {
    *a5 = 16;
  }
  return result;
}

icu::UnicodeString *icu::DateFormat::format(icu::DateFormat *this, double a2, icu::UnicodeString *a3)
{
  v5[2] = 0;
  v5[0] = &unk_1EDA4C7F0;
  v5[1] = 0xFFFFFFFFLL;
  icu::DateFormat::format(this, (uint64_t)a3, (uint64_t)v5, a2);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v5);
  return a3;
}

double icu::DateFormat::parse(icu::DateFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  uint64_t v4 = *((void *)this + 41);
  double v5 = 0.0;
  if (v4)
  {
    int v8 = (icu::Calendar *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      int v10 = *((_DWORD *)a3 + 2);
      icu::Calendar::clear(v8);
      (*(void (**)(icu::DateFormat *, const icu::UnicodeString *, icu::Calendar *, icu::ParsePosition *))(*(void *)this + 88))(this, a2, v9, a3);
      if (*((_DWORD *)a3 + 2) != v10)
      {
        UErrorCode v13 = U_ZERO_ERROR;
        v11.n128_f64[0] = icu::Calendar::getTimeInMillis(v9, &v13);
        if (v13 < U_ILLEGAL_ARGUMENT_ERROR)
        {
          double v5 = v11.n128_f64[0];
        }
        else
        {
          *((_DWORD *)a3 + 2) = v10;
          *((_DWORD *)a3 + 3) = v10;
        }
      }
      (*(void (**)(icu::Calendar *, __n128))(*(void *)v9 + 8))(v9, v11);
    }
  }
  return v5;
}

double icu::DateFormat::parse(icu::DateFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  double v3 = 0.0;
  if (*(int *)a3 <= 0)
  {
    uint64_t v6 = &unk_1EDA44670;
    unint64_t v7 = 0xFFFFFFFF00000000;
    double v3 = icu::DateFormat::parse(this, a2, (icu::ParsePosition *)&v6);
    if (!v7) {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v6);
  }
  return v3;
}

uint64_t icu::DateFormat::parseObject(icu::DateFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  double v5 = icu::DateFormat::parse(this, a2, a4);

  return icu::Formattable::setDate(a3, v5);
}

icu::SimpleDateFormat *icu::DateFormat::createTimeInstance(uint64_t a1, const icu::Locale *a2)
{
  return icu::DateFormat::create(a1, 0xFFFFFFFFuLL, a2);
}

icu::SimpleDateFormat *icu::DateFormat::createDateTimeInstance(int a1, uint64_t a2, const icu::Locale *a3)
{
  if (a1 == -1) {
    unint64_t v4 = 0xFFFFFFFFLL;
  }
  else {
    unint64_t v4 = (a1 + 4);
  }
  return icu::DateFormat::create(a2, v4, a3);
}

icu::SimpleDateFormat *icu::DateFormat::createDateInstance(int a1, const icu::Locale *a2)
{
  if (a1 == -1) {
    unint64_t v3 = 0xFFFFFFFFLL;
  }
  else {
    unint64_t v3 = (a1 + 4);
  }
  return icu::DateFormat::create(0xFFFFFFFFLL, v3, a2);
}

icu::SimpleDateFormat *icu::DateFormat::create(uint64_t a1, unint64_t a2, const icu::Locale *a3)
{
  UErrorCode v9 = U_ZERO_ERROR;
  if (a2 != -1 && ((a2 - 4) & 0x80) != 0)
  {
    uint64_t result = (icu::SimpleDateFormat *)icu::UMemory::operator new((icu::UMemory *)0x2F8, a2);
    if (!result) {
      return result;
    }
    uint64_t result = (icu::SimpleDateFormat *)sub_18C9BF380(result, a1, (a2 - 4), a3, &v9);
    if (v9 < U_ILLEGAL_ARGUMENT_ERROR) {
      return result;
    }
    (*(void (**)(icu::SimpleDateFormat *))(*(void *)result + 8))(result);
    UErrorCode v9 = U_ZERO_ERROR;
  }
  uint64_t v7 = icu::UMemory::operator new((icu::UMemory *)0x340, a2);
  if (v7)
  {
    uint64_t result = (icu::SimpleDateFormat *)icu::SimpleDateFormat::SimpleDateFormat(v7, a1, a2, a3, &v9);
    if (v9 <= U_ZERO_ERROR) {
      return result;
    }
    (*(void (**)(icu::SimpleDateFormat *))(*(void *)result + 8))(result);
  }
  else if (v9 <= U_ZERO_ERROR)
  {
    return 0;
  }
  UErrorCode v9 = U_ZERO_ERROR;
  uint64_t result = (icu::SimpleDateFormat *)icu::UMemory::operator new((icu::UMemory *)0x340, v8);
  if (result)
  {
    uint64_t result = (icu::SimpleDateFormat *)icu::SimpleDateFormat::SimpleDateFormat(result, a3, &v9);
    if (v9 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      (*(void (**)(icu::SimpleDateFormat *))(*(void *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

icu::SimpleDateFormat *icu::DateFormat::createInstance(icu::DateFormat *this)
{
  Default = icu::Locale::getDefault(this);

  return icu::DateFormat::create(3, 7uLL, (const icu::Locale *)Default);
}

void icu::DateFormat::getBestPattern(icu::DateFormat *this@<X0>, UErrorCode *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  v12[38] = *MEMORY[0x1E4F143B8];
  uint64_t Instance = icu::UnifiedCache::getInstance(a3, a2);
  if (*(int *)a3 < 1)
  {
    int v10 = (icu::SharedObject **)Instance;
    memset(&v12[1], 0, 296);
    icu::Locale::Locale((icu::Locale *)&v12[2], (uint64_t)this);
    v12[0] = &unk_1EDA4B570;
    icu::DateTimePatternGenerator::staticGetSkeleton((icu::DateTimePatternGenerator *)a2, (uint64_t)&v12[30]);
    __n128 v11 = 0;
    sub_18C8D86FC(v10, (const icu::CacheKeyBase *)v12, 0, &v11, a3);
    if (*(int *)a3 < 1)
    {
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (UChar **)v11 + 3);
      icu::SharedObject::removeRef((uint64_t)v11);
    }
    else
    {
      *(void *)a4 = &unk_1EDA47700;
      *(_WORD *)(a4 + 8) = 2;
    }
    sub_18C8FFEE0((uint64_t)v12);
  }
  else
  {
    *(void *)a4 = &unk_1EDA47700;
    *(_WORD *)(a4 + 8) = 2;
  }
}

icu::SimpleDateFormat *icu::DateFormat::createInstanceForSkeleton(icu::DateFormat *this, UErrorCode *a2, const icu::UnicodeString *a3, UErrorCode *a4, UErrorCode *a5)
{
  double v5 = this;
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0)
  {
    uint64_t v6 = 0;
    if (!this) {
      return v6;
    }
LABEL_9:
    (*(void (**)(icu::DateFormat *, UErrorCode *, const icu::UnicodeString *))(*(void *)v5 + 8))(v5, a2, a3);
    return v6;
  }
  if (!this)
  {
    uint64_t v6 = 0;
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    return v6;
  }
  memset(v13, 0, sizeof(v13));
  icu::Locale::Locale((icu::Locale *)v13, (uint64_t)a3);
  UErrorCode v9 = (char *)(*(uint64_t (**)(icu::DateFormat *))(*(void *)v5 + 184))(v5);
  icu::Locale::setKeywordValue((char **)v13, "calendar", v9, a4);
  if (*(int *)a4 <= 0
    && (InstanceForSkeletouint64_t n = icu::DateFormat::createInstanceForSkeleton(a2, (const icu::UnicodeString *)v13, a4, v10),
        *(int *)a4 <= 0))
  {
    uint64_t v6 = InstanceForSkeleton;
    (*(void (**)(icu::SimpleDateFormat *, icu::DateFormat *))(*(void *)InstanceForSkeleton + 136))(InstanceForSkeleton, v5);
    double v5 = 0;
  }
  else
  {
    uint64_t v6 = 0;
  }
  icu::Locale::~Locale((icu::Locale *)v13);
  if (v5) {
    goto LABEL_9;
  }
  return v6;
}

icu::SimpleDateFormat *icu::DateFormat::createInstanceForSkeleton(UErrorCode *this, const icu::UnicodeString *a2, UErrorCode *a3, UErrorCode *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v4 <= 0)
  {
    int v10 = icu::UMemory::operator new(v4, (icu::UMemory *)0x340, (unint64_t)a2);
    if (v10)
    {
      double v5 = (icu::SimpleDateFormat *)v10;
      icu::DateFormat::getBestPattern(a2, this, a3, (uint64_t)v12);
      icu::SimpleDateFormat::SimpleDateFormat(v5, (const icu::UnicodeString *)v12, a2, a3);
      icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v12);
      if (*(int *)a3 < 1) {
        return v5;
      }
      (*(void (**)(icu::SimpleDateFormat *))(*(void *)v5 + 8))(v5);
    }
    else if (*(int *)a3 <= 0)
    {
      double v5 = 0;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      return v5;
    }
  }
  return 0;
}

icu::SimpleDateFormat *icu::DateFormat::createInstanceForSkeleton(icu::DateFormat *this, UErrorCode *a2, UErrorCode *a3)
{
  Default = icu::Locale::getDefault(this);

  return icu::DateFormat::createInstanceForSkeleton((UErrorCode *)this, (const icu::UnicodeString *)Default, a2, v6);
}

uint64_t icu::DateFormat::adoptCalendar(icu::DateFormat *this, icu::Calendar *a2)
{
  uint64_t result = *((void *)this + 41);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 41) = a2;
  return result;
}

uint64_t icu::DateFormat::setCalendar(icu::DateFormat *this, const icu::Calendar *a2)
{
  uint64_t v4 = *((void *)this + 41);
  if (!v4
    || (uint64_t result = (*(uint64_t (**)(uint64_t, const icu::Calendar *))(*(void *)v4 + 40))(v4, a2),
        !result))
  {
    uint64_t result = (*(uint64_t (**)(const icu::Calendar *))(*(void *)a2 + 24))(a2);
    if (result)
    {
      uint64_t v6 = *(uint64_t (**)(icu::DateFormat *, uint64_t))(*(void *)this + 136);
      return v6(this, result);
    }
  }
  return result;
}

uint64_t icu::DateFormat::getCalendar(icu::DateFormat *this)
{
  return *((void *)this + 41);
}

uint64_t icu::DateFormat::adoptNumberFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 336);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(void *)(a1 + 336) = a2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 184))(a2, 1);
  double v5 = *(uint64_t (**)(uint64_t, void))(*(void *)a2 + 208);

  return v5(a2, 0);
}

uint64_t icu::DateFormat::setNumberFormat(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 160);
    return v4(a1, result);
  }
  return result;
}

uint64_t icu::DateFormat::getNumberFormat(icu::DateFormat *this)
{
  return *((void *)this + 42);
}

void *icu::DateFormat::adoptTimeZone(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a1 + 328);
  if (result) {
    return icu::Calendar::adoptTimeZone(result, a2);
  }
  return result;
}

uint64_t icu::DateFormat::setTimeZone(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 328);
  if (result) {
    return icu::Calendar::setTimeZone(result, a2);
  }
  return result;
}

uint64_t icu::DateFormat::getTimeZone(icu::DateFormat *this)
{
  uint64_t v1 = (icu::Calendar *)*((void *)this + 41);
  if (v1) {
    return icu::Calendar::getTimeZone(v1);
  }
  else {
    return icu::TimeZone::createDefault(0);
  }
}

uint64_t icu::DateFormat::setLenient(icu::DateFormat *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 41);
  if (v4) {
    icu::Calendar::setLenient(v4, a2);
  }
  int v6 = 0;
  (*(void (**)(icu::DateFormat *, void, uint64_t, int *))(*(void *)this + 216))(this, 0, a2, &v6);
  return (*(uint64_t (**)(icu::DateFormat *, uint64_t, uint64_t, int *))(*(void *)this + 216))(this, 1, a2, &v6);
}

uint64_t icu::DateFormat::isLenient(icu::DateFormat *this)
{
  uint64_t v2 = (icu::Calendar *)*((void *)this + 41);
  if (v2)
  {
    uint64_t result = icu::Calendar::isLenient(v2);
    int v4 = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    int v4 = 0;
  }
  uint64_t result = (*(uint64_t (**)(icu::DateFormat *, void, int *))(*(void *)this + 224))(this, 0, &v4);
  if (result) {
    return (*(unsigned int (**)(icu::DateFormat *, uint64_t, int *))(*(void *)this + 224))(this, 1, &v4) != 0;
  }
  return result;
}

uint64_t icu::DateFormat::setCalendarLenient(icu::DateFormat *this, char a2)
{
  uint64_t result = *((void *)this + 41);
  if (result) {
    return icu::Calendar::setLenient(result, a2);
  }
  return result;
}

icu::Calendar *icu::DateFormat::isCalendarLenient(icu::DateFormat *this)
{
  uint64_t result = (icu::Calendar *)*((void *)this + 41);
  if (result) {
    return (icu::Calendar *)icu::Calendar::isLenient(result);
  }
  return result;
}

uint64_t icu::DateFormat::setContext(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if ((a2 & 0xFFFFFF00) == 0x100) {
      *(_DWORD *)(result + 348) = a2;
    }
    else {
      *a3 = 1;
    }
  }
  return result;
}

uint64_t icu::DateFormat::getContext(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  if (a2 == 1) {
    return *(unsigned int *)(a1 + 348);
  }
  uint64_t result = 0;
  *a3 = 1;
  return result;
}

uint64_t icu::DateFormat::setBooleanAttribute(uint64_t result, char a2, unsigned int a3, _DWORD *a4)
{
  if (a3 < 2)
  {
    if (a3) {
      int v4 = 1 << a2;
    }
    else {
      int v4 = 0;
    }
    *(_DWORD *)(result + 344) = *(_DWORD *)(result + 344) & ~(1 << a2) | v4;
  }
  else
  {
    *a4 = 1;
  }
  return result;
}

uint64_t icu::DateFormat::getBooleanAttribute(uint64_t a1, char a2)
{
  return (*(_DWORD *)(a1 + 344) >> a2) & 1;
}

uint64_t sub_18C90134C(uint64_t a1)
{
  int v2 = sub_18C9016B0(a1);
  return icu::UnicodeString::doHashCode((icu::UnicodeString *)(a1 + 240)) + 37 * v2;
}

uint64_t *sub_18C90138C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x130, a2);
  if (result) {
    return (uint64_t *)sub_18C9017C4((uint64_t)result, a1);
  }
  return result;
}

uint64_t *sub_18C9013C0(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  v12[8] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t Instance = icu::DateTimePatternGenerator::createInstance((const char **)(a1 + 16), a3, 0);
  uint64_t v7 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v7 > 0) {
    goto LABEL_2;
  }
  int v10 = icu::UMemory::operator new(v7, (icu::UMemory *)0x58, v5);
  if (v10)
  {
    unint64_t v8 = v10;
    icu::DateTimePatternGenerator::getBestPattern(Instance, (const icu::UnicodeString *)(a1 + 240), a3, (icu::UnicodeString *)v12);
    v8[1] = 0;
    v8[2] = 0;
    *unint64_t v8 = (uint64_t)&unk_1EDA4B548;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 3), v12);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v12);
    if (*(int *)a3 > 0)
    {
      (*(void (**)(uint64_t *))(*v8 + 8))(v8);
LABEL_2:
      unint64_t v8 = 0;
      goto LABEL_3;
    }
    icu::SharedObject::addRef((uint64_t)v8);
  }
  else
  {
    if (*(int *)a3 > 0) {
      goto LABEL_2;
    }
    unint64_t v8 = 0;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
LABEL_3:
  if (Instance) {
    (*(void (**)(icu::DateTimePatternGenerator *))(*(void *)Instance + 8))(Instance);
  }
  return v8;
}

char *sub_18C90152C(uint64_t a1, char *__dst, int a3)
{
  uint64_t result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18C901568(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_18C8D893C((void *)a1, (void *)a2);
  if (result)
  {
    BOOL result = icu::Locale::operator==(a1 + 16, a2 + 16);
    if (result)
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 248);
      if (v5)
      {
        return *(_WORD *)(a2 + 248) & 1;
      }
      else
      {
        if ((v5 & 0x8000) != 0) {
          int v6 = *(_DWORD *)(a1 + 252);
        }
        else {
          int v6 = v5 >> 5;
        }
        BOOL result = 0;
        unsigned int v7 = *(unsigned __int16 *)(a2 + 248);
        if ((v7 & 0x8000u) == 0) {
          unsigned int v8 = v7 >> 5;
        }
        else {
          unsigned int v8 = *(_DWORD *)(a2 + 252);
        }
        if ((v7 & 1) == 0 && v6 == v8) {
          return icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 240), (const icu::UnicodeString *)(a2 + 240), v6);
        }
      }
    }
  }
  return result;
}

void sub_18C901604(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4B730;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));

  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18C901658(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4B730;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18C9016B0(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)"N3icu18DateFmtBestPatternE" & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu18DateFmtBestPatternE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18C90170C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((unsigned char *)v4 + 12) = 0;
    *int v4 = (uint64_t)&unk_1EDA4B730;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

BOOL sub_18C901774(void *a1, void *a2)
{
  BOOL result = sub_18C8D893C(a1, a2);
  if (result)
  {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

uint64_t sub_18C9017C4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1EDA4B730;
  icu::Locale::Locale((icu::Locale *)(a1 + 16), a2 + 16);
  *(void *)a1 = &unk_1EDA4B570;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 240), (UChar **)(a2 + 240));
  return a1;
}

void sub_18C901848(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C901874(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C90189C()
{
  v0 = (unsigned char **)qword_1E9192130;
  uint64_t v1 = *(void **)(qword_1E9192130 + 8);
  if (v1)
  {
    icu::UMemory::operator delete[](v1);
    v0 = (unsigned char **)qword_1E9192130;
  }
  uhash_close(*v0);
  if (qword_1E9192130) {
    icu::UMemory::operator delete((void *)qword_1E9192130);
  }
  qword_1E9192130 = 0;
  return 1;
}

void sub_18C9018EC(int *a1, unint64_t a2)
{
  int v2 = (uint64_t *)*a1;
  if ((int)v2 <= 0)
  {
    int v4 = icu::UMemory::operator new(v2, (icu::UMemory *)0x18, a2);
    if (v4)
    {
      *int v4 = 0;
      v4[1] = 0;
      *((_DWORD *)v4 + 4) = 0;
    }
    qword_1E9192130 = (uint64_t)v4;
    *int v4 = (uint64_t)uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, a1);
    uint64_t v5 = ures_openDirect(0, (uint64_t)"dayPeriods", (uint64_t)a1);
    unint64_t v15 = &unk_1EDA4B7C8;
    ures_getAllItemsWithFallback(v5, "rules", (uint64_t)&v15, a1);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v6 = &unk_1EDA4B780;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    ures_getAllItemsWithFallback(v5, "", (uint64_t)&v6, a1);
    sub_18CA0A25C(0x18u, (uint64_t)sub_18C90189C);
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v6);
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v15);
    if (v5) {
      ures_close(v5);
    }
  }
}

uint64_t sub_18C901A4C(icu::Locale *a1, int *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*a2 > 0) {
    return 0;
  }
  if (atomic_load_explicit(&dword_1EB20B708, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit(&dword_1EB20B708))
  {
    int v6 = dword_1EB20B70C;
    if (dword_1EB20B70C >= 1)
    {
      uint64_t result = 0;
LABEL_8:
      *a2 = v6;
      return result;
    }
  }
  else
  {
    sub_18C9018EC(a2, v5);
    dword_1EB20B70C = *a2;
    icu::umtx_initImplPostInit((unsigned int *)&dword_1EB20B708);
  }
  if (*a2 > 0) {
    return 0;
  }
  int BaseName = (const char *)icu::Locale::getBaseName(a1);
  long long v21 = 0u;
  memset(v22, 0, sizeof(v22));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)__dst = 0u;
  if (strlen(BaseName) > 0x9C)
  {
    uint64_t result = 0;
    int v6 = 15;
    goto LABEL_8;
  }
  strcpy(__dst, BaseName);
  if (!__dst[0]) {
    strcpy(__dst, "root");
  }
  while (1)
  {
    int v8 = uhash_geti(*(void *)qword_1E9192130, (uint64_t)__dst);
    if (v8) {
      break;
    }
    int v13 = 0;
    memset(&v11[1], 0, 48);
    v10[1] = 0;
    v11[0] = (char *)&v11[1] + 5;
    LODWORD(v11[1]) = 40;
    int v12 = 0;
    v10[0] = 0;
    icu::CharStringByteSink::CharStringByteSink(v10, (uint64_t)v11);
    ulocimp_getParent(__dst, (uint64_t)v10, a2);
    int v9 = v12;
    if (v12) {
      icu::CharString::extract(v11, __dst, 157, (UErrorCode *)a2);
    }
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v10);
    if (BYTE4(v11[1])) {
      uprv_free(v11[0]);
    }
    uint64_t result = 0;
    if (!v9 || !__dst[0]) {
      return result;
    }
  }
  if (v8 < 1) {
    return 0;
  }
  if (*(_DWORD *)(*(void *)(qword_1E9192130 + 8) + 100 * v8 + 4) == -1) {
    return 0;
  }
  else {
    return *(void *)(qword_1E9192130 + 8) + 100 * v8;
  }
}

double sub_18C901C70(uint64_t a1, uint64_t a2, int *a3)
{
  double v3 = -1.0;
  if (*a3 <= 0)
  {
    int v7 = sub_18C901D14(a1, a2, a3);
    int v8 = sub_18C901DB4(a1, a2, a3);
    if (*a3 <= 0)
    {
      double v3 = (double)(v8 + v7) * 0.5;
      if (v7 > v8)
      {
        double v3 = v3 + 12.0;
        if (v3 >= 24.0) {
          return v3 + -24.0;
        }
      }
    }
  }
  return v3;
}

uint64_t sub_18C901D14(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a2) {
    return a2;
  }
  if (a2 == 1) {
    return 12;
  }
  if (*(_DWORD *)(a1 + 4) == a2 && *(_DWORD *)(a1 + 96) == a2)
  {
    uint64_t result = 23;
    while (1)
    {
      unsigned int v5 = result - 1;
      if (*(_DWORD *)(a1 + 4 * (result - 1) + 4) != a2) {
        break;
      }
      uint64_t result = (result - 1);
      if (v5 <= 1) {
        goto LABEL_17;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    uint64_t v6 = a1 + 4;
    while (*(_DWORD *)(v6 + 4 * result) != a2)
    {
      if (++result == 24)
      {
LABEL_17:
        *a3 = 1;
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t sub_18C901DB4(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (a2)
  {
    if (a2 == 1)
    {
      return 12;
    }
    else if (*(_DWORD *)(a1 + 4) == a2 && *(_DWORD *)(a1 + 96) == a2)
    {
      uint64_t v4 = 2;
      while (*(_DWORD *)(a1 + 4 * v4) == a2)
      {
        if (++v4 == 24) {
          goto LABEL_16;
        }
      }
      return (v4 - 1);
    }
    else
    {
      uint64_t v5 = 24;
      while (*(_DWORD *)(a1 + 4 * (v5 - 1) + 4) != a2)
      {
        uint64_t v5 = (v5 - 1);
        if (!v5)
        {
LABEL_16:
          *a3 = 1;
          return 0xFFFFFFFFLL;
        }
      }
      return v5;
    }
  }
  return a2;
}

uint64_t sub_18C901E54(const char *a1)
{
  uint64_t result = strcmp(a1, "midnight");
  if (result)
  {
    if (!strcmp(a1, "noon"))
    {
      return 1;
    }
    else if (!strcmp(a1, "morning1"))
    {
      return 2;
    }
    else if (!strcmp(a1, "afternoon1"))
    {
      return 3;
    }
    else if (!strcmp(a1, "evening1"))
    {
      return 4;
    }
    else if (!strcmp(a1, "night1"))
    {
      return 5;
    }
    else if (!strcmp(a1, "morning2"))
    {
      return 6;
    }
    else if (!strcmp(a1, "afternoon2"))
    {
      return 7;
    }
    else if (!strcmp(a1, "evening2"))
    {
      return 8;
    }
    else if (!strcmp(a1, "night2"))
    {
      return 9;
    }
    else if (!strcmp(a1, "am"))
    {
      return 10;
    }
    else if (!strcmp(a1, "pm"))
    {
      return 11;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void *sub_18C901FB8(void *a1, char *a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  __s1 = a2;
  memset(v24, 0, sizeof(v24));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v24, a3, a5);
  if (*(int *)a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v24, 0, (const char **)&__s1, a3);
    if (result)
    {
      int v9 = 0;
      do
      {
        long long v10 = __s1;
        if (!strcmp(__s1, "locales"))
        {
          uint64_t v23 = 0;
          memset(v22, 0, sizeof(v22));
          uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v22, a3, a5);
          if (*(int *)a5 > 0) {
            return result;
          }
          int KeyAndValue = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v22, 0, (const char **)&__s1, a3);
          long long v17 = 0uLL;
          if (KeyAndValue)
          {
            unsigned int v18 = 1;
            do
            {
              long long v31 = v17;
              long long v32 = v17;
              long long v30 = v17;
              long long v29 = v17;
              int v28 = 0;
              uint64_t v27 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32))(a3, &v28, a5);
              icu::UnicodeString::UnicodeString(&v29, 1, &v27);
              unsigned int v19 = sub_18C9023CC((icu::UnicodeString *)&v29, a5);
              uhash_puti(*(void *)qword_1E9192130, (uint64_t)__s1, v19, (int *)a5);
              icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v29);
              int v21 = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v22, v18, (const char **)&__s1, a3);
              long long v17 = 0uLL;
              ++v18;
            }
            while (v21);
          }
        }
        else if (!strcmp(v10, "rules"))
        {
          unint64_t v12 = *(int *)(qword_1E9192130 + 16) + 1;
          if (is_mul_ok(v12, 0x64uLL)) {
            uint64_t v13 = 100 * v12;
          }
          else {
            uint64_t v13 = -1;
          }
          uint64_t result = (void *)icu::UMemory::operator new[]((icu::UMemory *)v13, v11);
          if (!result)
          {
            *(void *)(qword_1E9192130 + 8) = 0;
            *a5 = U_MEMORY_ALLOCATION_ERROR;
            return result;
          }
          *(void *)&long long v14 = -1;
          *((void *)&v14 + 1) = -1;
          if (v12)
          {
            long long v15 = result;
            do
            {
              *(_WORD *)long long v15 = 0;
              *(_OWORD *)((char *)v15 + 4) = v14;
              *(_OWORD *)((char *)v15 + 20) = v14;
              *(_OWORD *)((char *)v15 + 36) = v14;
              *(_OWORD *)((char *)v15 + 52) = v14;
              *(_OWORD *)((char *)v15 + 68) = v14;
              *(_OWORD *)((char *)v15 + 84) = v14;
              long long v15 = (void *)((char *)v15 + 100);
            }
            while (v15 != (void *)((char *)result + 100 * v12));
          }
          *(void *)(qword_1E9192130 + 8) = result;
          *(void *)&long long v31 = 0;
          long long v30 = 0u;
          long long v29 = 0u;
          (*(void (**)(long long *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(&v29, a3, a5);
          uint64_t result = sub_18C90247C(a1, (icu::ResourceTable *)&v29, __s1, a3, (int *)a5);
          if (*(int *)a5 > 0) {
            return result;
          }
        }
        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v24, ++v9, (const char **)&__s1, a3);
      }
      while (result);
    }
  }
  return result;
}

void *sub_18C9022F4(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v11 = 0;
  unint64_t v12 = a2;
  memset(v10, 0, sizeof(v10));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v10, a3, a5);
  if (*a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v10, 0, (const char **)&v12, a3);
    if (result)
    {
      unsigned int v8 = 1;
      do
      {
        int v9 = sub_18C9028B4((uint64_t)v12, a5);
        if (v9 > *(_DWORD *)(qword_1E9192130 + 16)) {
          *(_DWORD *)(qword_1E9192130 + 16) = v9;
        }
        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v10, v8++, (const char **)&v12, a3);
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_18C9023CC(icu::UnicodeString *a1, UErrorCode *a2)
{
  v5[8] = *(void **)MEMORY[0x1E4F143B8];
  memset(&v5[1], 0, 56);
  v5[0] = (char *)&v5[1] + 5;
  LODWORD(v5[1]) = 40;
  icu::CharString::appendInvariantChars((icu::CharString *)v5, a1, a2);
  uint64_t v3 = sub_18C9028B4((uint64_t)v5[0], (int *)a2);
  if (BYTE4(v5[1])) {
    uprv_free(v5[0]);
  }
  return v3;
}

void *sub_18C90247C(void *result, icu::ResourceTable *this, char *a3, icu::ResourceValue *a4, int *a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v32 = a3;
  if (*a5 > 0) {
    return result;
  }
  uint64_t v8 = (uint64_t)result;
  uint64_t result = (void *)icu::ResourceTable::getKeyAndValue(this, 0, (const char **)&v32, a4);
  if (!result) {
    return result;
  }
  int v9 = 0;
  while (1)
  {
    *(_DWORD *)(v8 + 108) = sub_18C9028B4((uint64_t)v32, a5);
    uint64_t v31 = 0;
    memset(v30, 0, sizeof(v30));
    uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a4 + 88))(v30, a4, a5);
    if (*a5 > 0) {
      return result;
    }
    int v25 = v9;
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v30, 0, (const char **)&v32, a4);
    if (result) {
      break;
    }
LABEL_22:
    uint64_t v20 = *(void *)(qword_1E9192130 + 8);
    int v21 = *(_DWORD *)(v8 + 108);
    if (*(_DWORD *)(v20 + 100 * v21 + 4) == -1)
    {
LABEL_29:
      *a5 = 3;
      return result;
    }
    uint64_t v22 = v20 + 100 * v21;
    uint64_t v23 = 2;
    while (v23 != 25)
    {
      int v24 = *(_DWORD *)(v22 + 4 * v23++);
      if (v24 == -1)
      {
        if ((unint64_t)(v23 - 3) <= 0x16) {
          goto LABEL_29;
        }
        break;
      }
    }
    int v9 = v25 + 1;
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue(this, v25 + 1, (const char **)&v32, a4);
    if (!result) {
      return result;
    }
  }
  unsigned int v10 = 0;
  while (1)
  {
    uint64_t result = (void *)sub_18C901E54(v32);
    *(_DWORD *)(v8 + 112) = result;
    if (result == -1) {
      goto LABEL_29;
    }
    uint64_t v29 = 0;
    memset(v28, 0, sizeof(v28));
    uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a4 + 88))(v28, a4, a5);
    if (*a5 > 0) {
      return result;
    }
    if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v28, 0, (const char **)&v32, a4)) {
      break;
    }
LABEL_21:
    sub_18C902A4C(v8, a5);
    *(_DWORD *)(v8 + 104) = 0;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    ++v10;
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v30, v10, (const char **)&v32, a4);
    if (!result) {
      goto LABEL_22;
    }
  }
  int v11 = 0;
  while (1)
  {
    int v12 = (*(uint64_t (**)(icu::ResourceValue *))(*(void *)a4 + 24))(a4);
    int v13 = sub_18C902944(v32);
    int v14 = v13;
    if (!v12)
    {
      LODWORD(v33) = 0;
      v26[0] = (*(uint64_t (**)(icu::ResourceValue *, uint64_t *, int *))(*(void *)a4 + 32))(a4, &v33, a5);
      icu::UnicodeString::UnicodeString(v35, 1, v26);
      sub_18C9029C8(v8, v14, (uint64_t)v35, a5);
      uint64_t result = icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v35);
      if (*a5 >= 1) {
        return result;
      }
      goto LABEL_20;
    }
    *(_DWORD *)(v8 + 116) = v13;
    v26[0] = 0;
    v26[1] = 0;
    uint64_t v27 = 0;
    uint64_t result = (*(void *(**)(void *__return_ptr, icu::ResourceValue *, int *))(*(void *)a4 + 80))(v26, a4, a5);
    if (*a5 > 0) {
      return result;
    }
    int v15 = v27;
    if ((int)v27 >= 1) {
      break;
    }
LABEL_20:
    if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v28, ++v11, (const char **)&v32, a4)) {
      goto LABEL_21;
    }
  }
  unsigned int v16 = 0;
  while (1)
  {
    icu::ResourceArray::getValue((icu::ResourceArray *)v26, v16, a4);
    int v17 = *(_DWORD *)(v8 + 116);
    int v34 = 0;
    uint64_t v33 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a4 + 32))(a4, &v34, a5);
    icu::UnicodeString::UnicodeString(v35, 1, &v33);
    sub_18C9029C8(v8, v17, (uint64_t)v35, a5);
    uint64_t result = icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v35);
    if (*a5 >= 1) {
      return result;
    }
    if (v15 == ++v16) {
      goto LABEL_20;
    }
  }
}

uint64_t sub_18C9028B4(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
  {
    if (!strncmp((const char *)a1, "set", 3uLL))
    {
      int v5 = *(unsigned __int8 *)(a1 + 3);
      if (*(unsigned char *)(a1 + 3))
      {
        LODWORD(result) = 0;
        uint64_t v6 = (unsigned __int8 *)(a1 + 4);
        while ((v5 - 48) <= 9)
        {
          uint64_t result = (v5 + 10 * result - 48);
          int v7 = *v6++;
          int v5 = v7;
          if (!v7)
          {
            if (result) {
              return result;
            }
            break;
          }
        }
      }
    }
    *a2 = 3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18C902944(const char *a1)
{
  if (!strcmp(a1, "from")) {
    return 2;
  }
  uint64_t result = strcmp(a1, "before");
  if (result)
  {
    if (!strcmp(a1, "after"))
    {
      return 1;
    }
    else if (!strcmp(a1, "at"))
    {
      return 3;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_18C9029C8(uint64_t result, int a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    char v5 = a2;
    if (a2 == -1)
    {
      *a4 = 3;
    }
    else
    {
      uint64_t v6 = result;
      uint64_t result = sub_18C902B2C(a3, a4);
      if (*a4 <= 0) {
        *(_DWORD *)(v6 + 4 * (int)result + 8) |= 1 << v5;
      }
    }
  }
  return result;
}

uint64_t sub_18C902A4C(uint64_t result, _DWORD *a2)
{
  unsigned int v2 = 0;
  uint64_t v3 = *(void *)(qword_1E9192130 + 8);
  int v4 = *(_DWORD *)(result + 108);
  char v5 = (unsigned char *)(v3 + 100 * v4);
  while (1)
  {
    int v6 = *(_DWORD *)(result + 4 * v2 + 8);
    if ((v6 & 8) != 0)
    {
      if (v2 == 12)
      {
        if (*(_DWORD *)(result + 112) != 1) {
          goto LABEL_24;
        }
        v5[1] = 1;
      }
      else
      {
        if (v2 || *(_DWORD *)(result + 112)) {
          goto LABEL_24;
        }
        *char v5 = 1;
      }
    }
    if ((v6 & 6) != 0) {
      break;
    }
LABEL_16:
    if (v2 > 0x17) {
      return result;
    }
LABEL_23:
    ++v2;
  }
  signed int v7 = v2;
  while (++v7 != v2)
  {
    if (v7 == 25) {
      signed int v7 = 0;
    }
    if (*(_DWORD *)(result + 4 * v7 + 8))
    {
      if (v2 == v7) {
        goto LABEL_16;
      }
      int v8 = *(_DWORD *)(result + 112);
      signed int v9 = v2;
      do
      {
        if (v9 == 24) {
          signed int v9 = 0;
        }
        *(_DWORD *)(v3 + 100 * v4 + 4 * v9++ + 4) = v8;
      }
      while (v9 != v7);
      if (v2 >= 0x18) {
        return result;
      }
      goto LABEL_23;
    }
  }
LABEL_24:
  *a2 = 3;
  return result;
}

uint64_t sub_18C902B2C(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0) {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
  }
  else {
    unsigned int v4 = v3 >> 5;
  }
  if (v4 - 6 < 0xFFFFFFFE) {
    goto LABEL_17;
  }
  unsigned int v5 = v4 - 3;
  int v6 = (unsigned __int16 *)(a1 + 10);
  if ((v3 & 2) == 0) {
    int v6 = *(unsigned __int16 **)(a1 + 24);
  }
  if (v6[v5] != 58) {
    goto LABEL_17;
  }
  int v7 = (__int16)v3;
  unsigned int v8 = v4 - 2;
  unsigned int v9 = v3 >> 5;
  if (v7 < 0) {
    unsigned int v9 = *(_DWORD *)(a1 + 12);
  }
  if (v9 <= v8
    || v6[v8] != 48
    || (unsigned int v10 = v4 - 1, v9 <= v10)
    || v6[v10] != 48
    || (int v11 = *v6, (v11 - 58) < 0xFFFFFFF6)
    || (uint64_t result = (v11 - 48), v5 == 2)
    && (v9 < 2
     || (int v12 = v6[1], (v12 - 58) < 0xFFFFFFF6)
     || (uint64_t result = (v12 + 10 * result - 48), (int)result >= 25)))
  {
LABEL_17:
    uint64_t result = 0;
    *a2 = 3;
  }
  return result;
}

void *icu::DecimalFormatSymbols::getStaticClassID(icu::DecimalFormatSymbols *this)
{
  return &unk_1E9192138;
}

void *icu::DecimalFormatSymbols::getDynamicClassID(icu::DecimalFormatSymbols *this)
{
  return &unk_1E9192138;
}

icu::DecimalFormatSymbols *icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::DecimalFormatSymbols *this, UErrorCode *a2)
{
  *(void *)this = &unk_1EDA4B810;
  uint64_t v4 = 8;
  do
  {
    unsigned int v5 = (char *)this + v4;
    *(void *)unsigned int v5 = &unk_1EDA47700;
    *((_WORD *)v5 + 4) = 2;
    v4 += 64;
  }
  while (v5 + 64 != (char *)this + 1864);
  *((void *)this + 233) = &unk_1EDA47700;
  *((_WORD *)this + 936) = 2;
  icu::Locale::Locale((icu::DecimalFormatSymbols *)((char *)this + 1936));
  *((void *)this + 310) = 0;
  uint64_t v6 = 2488;
  do
  {
    int v7 = (char *)this + v6;
    *(void *)int v7 = &unk_1EDA47700;
    *((_WORD *)v7 + 4) = 2;
    v6 += 64;
  }
  while (v7 + 64 != (char *)this + 2680);
  uint64_t v8 = 2680;
  do
  {
    unsigned int v9 = (char *)this + v8;
    *(void *)unsigned int v9 = &unk_1EDA47700;
    *((_WORD *)v9 + 4) = 2;
    v8 += 64;
  }
  while (v9 + 64 != (char *)this + 2872);
  *((unsigned char *)this + 2882) = 0;
  *(void *)((char *)this + 2874) = 0;
  icu::DecimalFormatSymbols::initialize(this, (char **)this + 242, a2, 1, 0, 0);
  return this;
}

void icu::DecimalFormatSymbols::initialize(icu::DecimalFormatSymbols *this, char **a2, UErrorCode *a3, int a4, const icu::NumberingSystem *a5, char a6)
{
  v79[9] = *(UChar **)MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    *((unsigned char *)this + 2160) = 0;
    *((unsigned char *)this + 2317) = 0;
    icu::DecimalFormatSymbols::initialize(this);
    if (a5)
    {
      uint64_t Instance = 0;
    }
    else
    {
      uint64_t Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)a2, a3, v12);
      a5 = Instance;
    }
    if (*(int *)a3 <= 0
      && icu::NumberingSystem::getRadix(a5) == 10
      && !icu::NumberingSystem::isAlgorithmic(a5))
    {
      char v55 = a6;
      Name = (const char *)icu::NumberingSystem::getName(a5);
      memset(v79, 0, 64);
      (*(void (**)(UChar **__return_ptr, const icu::NumberingSystem *))(*(void *)a5 + 24))(v79, a5);
      unsigned int v48 = icu::UnicodeString::char32At(v47, (icu::UnicodeString *)v79, 0);
      icu::UnicodeString::unBogus((uint64_t)this + 264);
      if (*((__int16 *)this + 136) < 0) {
        uint64_t v49 = *((unsigned int *)this + 69);
      }
      else {
        uint64_t v49 = *((unsigned __int16 *)this + 136) >> 5;
      }
      icu::UnicodeString::replace((icu::DecimalFormatSymbols *)((char *)this + 264), 0, v49, v48);
      uint64_t v50 = 0;
      int v51 = 0;
      do
      {
        if (v48 < 0x10000) {
          uint64_t v52 = 1;
        }
        else {
          uint64_t v52 = 2;
        }
        v51 += v52;
        unsigned int v48 = icu::UnicodeString::char32At((uint64_t *)v52, (icu::UnicodeString *)v79, v51);
        icu::UnicodeString::unBogus((uint64_t)this + v50 + 1160);
        if (*(__int16 *)((unsigned char *)this + v50 + 1168) < 0) {
          uint64_t v53 = *(unsigned int *)((char *)this + v50 + 1172);
        }
        else {
          uint64_t v53 = *(unsigned __int16 *)((char *)this + v50 + 1168) >> 5;
        }
        icu::UnicodeString::replace((icu::DecimalFormatSymbols *)((char *)this + v50 + 1160), 0, v53, v48);
        v50 += 64;
      }
      while (v50 != 576);
      icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)v79);
      if (v55)
      {
LABEL_18:
        if (Instance) {
          (*(void (**)(icu::NumberingSystem *))(*(void *)Instance + 8))(Instance);
        }
        return;
      }
    }
    else
    {
      Name = "latn";
    }
    strcpy((char *)this + 2874, Name);
    int v15 = a2[5];
    uint64_t v16 = ures_open(0, v15, (int *)a3);
    uint64_t v17 = ures_getByKeyWithFallback(v16, "NumberElements", 0, a3);
    uint64_t v18 = ures_openWithCountryFallback(0, v15, 0, (int *)a3);
    if (*(int *)a3 < 1)
    {
      unint64_t v57 = Instance;
      v68[0] = (char *)this + 2317;
      v68[1] = (char *)this + 2160;
      LocaleByunsigned int Type = (const char *)ures_getLocaleByType(v17, 1, (int *)a3);
      uint64_t v56 = v17;
      uint64_t v20 = (const char *)ures_getLocaleByType(v17, 0, (int *)a3);
      icu::LocaleBased::setLocaleIDs((char *)v68, LocaleByType, v20);
      unsigned int v75 = &unk_1EDA4B850;
      unint64_t v76 = this;
      *(void *)&long long v78 = 0;
      HIDWORD(v78) = 0;
      long long v77 = 0uLL;
      *(void *)((char *)&v78 + 5) = 0;
      if (v18) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = v16;
      }
      if (v21)
      {
        do
        {
          if (strcmp(Name, "latn"))
          {
            memset(&v79[1], 0, 56);
            v79[0] = (UChar *)((char *)&v79[1] + 5);
            LODWORD(v79[1]) = 40;
            icu::StringPiece::StringPiece((icu::StringPiece *)&v66, "NumberElements");
            uint64_t v22 = icu::CharString::append((icu::CharString *)v79, v66, v67, a3);
            uint64_t v23 = icu::CharString::append(v22, 47, a3);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v64, Name);
            int v24 = icu::CharString::append(v23, v64, v65, a3);
            int v25 = icu::CharString::append(v24, 47, a3);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v62, "symbols");
            icu::CharString::append(v25, v62, v63, a3);
            ures_getAllItemsWithFallback(v21, (char *)v79[0], (uint64_t)&v75, (int *)a3);
            if (*a3 == U_MISSING_RESOURCE_ERROR)
            {
              *a3 = U_ZERO_ERROR;
            }
            else if (*(int *)a3 > 0)
            {
              if (BYTE4(v79[1])) {
                uprv_free(v79[0]);
              }
              goto LABEL_69;
            }
            if (BYTE4(v79[1])) {
              uprv_free(v79[0]);
            }
          }
          if ((_BYTE)v77)
          {
            uint64_t v26 = 0;
            while (v26 != 28)
            {
              if (!*((unsigned __int8 *)&v77 + ++v26))
              {
                if ((unint64_t)(v26 - 1) > 0x1B) {
                  break;
                }
                goto LABEL_36;
              }
            }
          }
          else
          {
LABEL_36:
            ures_getAllItemsWithFallback(v21, "NumberElements/latn/symbols", (uint64_t)&v75, (int *)a3);
            if (*(int *)a3 > 0) {
              goto LABEL_69;
            }
          }
          if (v21 == v18)
          {
            BYTE3(v77) = 0;
            BYTE11(v77) = 0;
            HIWORD(v77) = 0;
            *(_DWORD *)((char *)&v77 + 6) = 0;
          }
          if (v21 == v16) {
            break;
          }
          uint64_t v21 = v16;
        }
        while (v16);
        if (BYTE10(v77)) {
          goto LABEL_43;
        }
      }
      icu::UnicodeString::operator=((UChar **)v76 + 81, (UChar **)this + 1);
LABEL_43:
      if (!BYTE1(v78)) {
        icu::UnicodeString::operator=((UChar **)v76 + 137, (UChar **)this + 9);
      }
      uint64_t v28 = 0;
      uint64_t v29 = (char *)this + 1096;
      int v30 = -1;
      while (1)
      {
        uint64_t v31 = v28 ? (icu::UnicodeString *)v29 : (icu::DecimalFormatSymbols *)((char *)this + 264);
        if (icu::UnicodeString::countChar32(v31, 0, 0x7FFFFFFF) != 1) {
          break;
        }
        unsigned int v33 = icu::UnicodeString::char32At(v32, v31, 0);
        if (v28)
        {
          if (v28 + v30 != v33) {
            break;
          }
        }
        else
        {
          int v30 = v33;
        }
        ++v28;
        v29 += 64;
        if (v28 == 10) {
          goto LABEL_57;
        }
      }
      int v30 = -1;
LABEL_57:
      *((_DWORD *)this + 482) = v30;
      int v61 = 0;
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      uint64_t v69 = &unk_1EDA47700;
      LOWORD(v70) = 2;
      int v34 = ucurr_forLocale(v15, (UChar *)&v74, 4, &v61);
      if (v61 <= 0 && v34 == 3) {
        icu::DecimalFormatSymbols::setCurrency((char **)this, (const UChar *)&v74, (int *)a3);
      }
      uint64_t v35 = ures_open("icudt74l-curr", v15, (int *)a3);
      int v59 = this;
      uint64_t v60 = 0;
      unint64_t v58 = &unk_1EDA4B898;
      ures_getAllItemsWithFallback(v35, "currencySpacing", (uint64_t)&v58, (int *)a3);
      if (!(_BYTE)v60 || !BYTE1(v60))
      {
        uint64_t v36 = off_1E550B820;
        for (uint64_t i = 2680; i != 2872; i += 64)
        {
          int32_t v38 = v59;
          uint64_t v39 = (uint64_t)*v36++;
          icu::UnicodeString::UnicodeString(v79, v39, 0xFFFFFFFFLL, 0);
          icu::UnicodeString::operator=((UChar **)((char *)v38 + i), v79);
          icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v79);
        }
        uint64_t v41 = off_1E550B820;
        for (uint64_t j = 2488; j != 2680; j += 64)
        {
          uint64_t v43 = v59;
          uint64_t v44 = (uint64_t)*v41++;
          icu::UnicodeString::UnicodeString(v79, v44, 0xFFFFFFFFLL, 0);
          icu::UnicodeString::operator=((UChar **)((char *)v43 + j), v79);
          icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)v79);
        }
      }
      icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v58);
      if (v35) {
        ures_close(v35);
      }
      icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v69);
LABEL_69:
      icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v75);
      uint64_t v17 = v56;
      uint64_t Instance = v57;
      if (!v18) {
        goto LABEL_14;
      }
    }
    else
    {
      if (a4)
      {
        *a3 = U_USING_DEFAULT_WARNING;
        icu::DecimalFormatSymbols::initialize(this);
      }
      if (!v18) {
        goto LABEL_14;
      }
    }
    ures_close(v18);
LABEL_14:
    if (v17) {
      ures_close(v17);
    }
    if (v16) {
      ures_close(v16);
    }
    goto LABEL_18;
  }
}

icu::DecimalFormatSymbols *icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::DecimalFormatSymbols *this, const icu::Locale *a2, UErrorCode *a3)
{
  *(void *)this = &unk_1EDA4B810;
  uint64_t v5 = 8;
  do
  {
    uint64_t v6 = (char *)this + v5;
    *(void *)uint64_t v6 = &unk_1EDA47700;
    *((_WORD *)v6 + 4) = 2;
    v5 += 64;
  }
  while (v6 + 64 != (char *)this + 1864);
  *((void *)this + 233) = &unk_1EDA47700;
  *((_WORD *)this + 936) = 2;
  icu::Locale::Locale((icu::DecimalFormatSymbols *)((char *)this + 1936), (uint64_t)a2);
  *((void *)this + 310) = 0;
  uint64_t v7 = 2488;
  do
  {
    uint64_t v8 = (char *)this + v7;
    *(void *)uint64_t v8 = &unk_1EDA47700;
    *((_WORD *)v8 + 4) = 2;
    v7 += 64;
  }
  while (v8 + 64 != (char *)this + 2680);
  uint64_t v9 = 2680;
  do
  {
    unsigned int v10 = (char *)this + v9;
    *(void *)unsigned int v10 = &unk_1EDA47700;
    *((_WORD *)v10 + 4) = 2;
    v9 += 64;
  }
  while (v10 + 64 != (char *)this + 2872);
  *((unsigned char *)this + 2882) = 0;
  *(void *)((char *)this + 2874) = 0;
  icu::DecimalFormatSymbols::initialize(this, (char **)this + 242, a3, 0, 0, 0);
  return this;
}

icu::DecimalFormatSymbols *icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::DecimalFormatSymbols *this, const icu::Locale *a2, const icu::NumberingSystem *a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA4B810;
  uint64_t v7 = 8;
  do
  {
    uint64_t v8 = (char *)this + v7;
    *(void *)uint64_t v8 = &unk_1EDA47700;
    *((_WORD *)v8 + 4) = 2;
    v7 += 64;
  }
  while (v8 + 64 != (char *)this + 1864);
  *((void *)this + 233) = &unk_1EDA47700;
  *((_WORD *)this + 936) = 2;
  icu::Locale::Locale((icu::DecimalFormatSymbols *)((char *)this + 1936), (uint64_t)a2);
  *((void *)this + 310) = 0;
  uint64_t v9 = 2488;
  do
  {
    unsigned int v10 = (char *)this + v9;
    *(void *)unsigned int v10 = &unk_1EDA47700;
    *((_WORD *)v10 + 4) = 2;
    v9 += 64;
  }
  while (v10 + 64 != (char *)this + 2680);
  uint64_t v11 = 2680;
  do
  {
    int v12 = (char *)this + v11;
    *(void *)int v12 = &unk_1EDA47700;
    *((_WORD *)v12 + 4) = 2;
    v11 += 64;
  }
  while (v12 + 64 != (char *)this + 2872);
  *((unsigned char *)this + 2882) = 0;
  *(void *)((char *)this + 2874) = 0;
  icu::DecimalFormatSymbols::initialize(this, (char **)this + 242, a4, 0, a3, 0);
  return this;
}

icu::DecimalFormatSymbols *icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::DecimalFormatSymbols *this, const icu::Locale *a2, const icu::NumberingSystem *a3, char a4, UErrorCode *a5)
{
  *(void *)this = &unk_1EDA4B810;
  uint64_t v9 = 8;
  do
  {
    unsigned int v10 = (char *)this + v9;
    *(void *)unsigned int v10 = &unk_1EDA47700;
    *((_WORD *)v10 + 4) = 2;
    v9 += 64;
  }
  while (v10 + 64 != (char *)this + 1864);
  *((void *)this + 233) = &unk_1EDA47700;
  *((_WORD *)this + 936) = 2;
  icu::Locale::Locale((icu::DecimalFormatSymbols *)((char *)this + 1936), (uint64_t)a2);
  *((void *)this + 310) = 0;
  uint64_t v11 = 2488;
  do
  {
    int v12 = (char *)this + v11;
    *(void *)int v12 = &unk_1EDA47700;
    *((_WORD *)v12 + 4) = 2;
    v11 += 64;
  }
  while (v12 + 64 != (char *)this + 2680);
  uint64_t v13 = 2680;
  do
  {
    int v14 = (char *)this + v13;
    *(void *)int v14 = &unk_1EDA47700;
    *((_WORD *)v14 + 4) = 2;
    v13 += 64;
  }
  while (v14 + 64 != (char *)this + 2872);
  *((unsigned char *)this + 2882) = 0;
  *(void *)((char *)this + 2874) = 0;
  icu::DecimalFormatSymbols::initialize(this, (char **)this + 242, a5, 0, a3, a4);
  return this;
}

icu::DecimalFormatSymbols *icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::DecimalFormatSymbols *this)
{
  *(void *)this = &unk_1EDA4B810;
  uint64_t v2 = 8;
  do
  {
    unsigned int v3 = (char *)this + v2;
    *(void *)unsigned int v3 = &unk_1EDA47700;
    *((_WORD *)v3 + 4) = 2;
    v2 += 64;
  }
  while (v3 + 64 != (char *)this + 1864);
  *((void *)this + 233) = &unk_1EDA47700;
  *((_WORD *)this + 936) = 2;
  uint64_t Root = icu::Locale::getRoot(this);
  icu::Locale::Locale((icu::DecimalFormatSymbols *)((char *)this + 1936), Root);
  *((void *)this + 310) = 0;
  uint64_t v5 = 2488;
  do
  {
    uint64_t v6 = (char *)this + v5;
    *(void *)uint64_t v6 = &unk_1EDA47700;
    *((_WORD *)v6 + 4) = 2;
    v5 += 64;
  }
  while (v6 + 64 != (char *)this + 2680);
  uint64_t v7 = 2680;
  do
  {
    uint64_t v8 = (char *)this + v7;
    *(void *)uint64_t v8 = &unk_1EDA47700;
    *((_WORD *)v8 + 4) = 2;
    v7 += 64;
  }
  while (v8 + 64 != (char *)this + 2872);
  *((unsigned char *)this + 2882) = 0;
  *(void *)((char *)this + 2874) = 0;
  *((unsigned char *)this + 2160) = 0;
  *((unsigned char *)this + 2317) = 0;
  icu::DecimalFormatSymbols::initialize(this);
  return this;
}

uint64_t icu::DecimalFormatSymbols::initialize(icu::DecimalFormatSymbols *this)
{
  uint64_t v2 = (char *)this + 8;
  __int16 v59 = 46;
  unsigned int v3 = *((unsigned __int16 *)this + 8);
  if ((v3 & 0x8000) != 0) {
    uint64_t v4 = *((unsigned int *)this + 5);
  }
  else {
    uint64_t v4 = v3 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)v2, 0, v4, (uint64_t)&v59, 0, 1);
  if (*((_WORD *)this + 40)) {
    __int16 v5 = 2;
  }
  else {
    __int16 v5 = *((_WORD *)this + 40) & 0x1F;
  }
  *((_WORD *)this + 40) = v5;
  __int16 v59 = 59;
  unsigned int v6 = *((unsigned __int16 *)this + 72);
  if ((v6 & 0x8000) != 0) {
    uint64_t v7 = *((unsigned int *)this + 37);
  }
  else {
    uint64_t v7 = v6 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 136, 0, v7, (uint64_t)&v59, 0, 1);
  __int16 v59 = 37;
  unsigned int v8 = *((unsigned __int16 *)this + 104);
  if ((v8 & 0x8000) != 0) {
    uint64_t v9 = *((unsigned int *)this + 53);
  }
  else {
    uint64_t v9 = v8 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 200, 0, v9, (uint64_t)&v59, 0, 1);
  __int16 v59 = 48;
  unsigned int v10 = *((unsigned __int16 *)this + 136);
  if ((v10 & 0x8000) != 0) {
    uint64_t v11 = *((unsigned int *)this + 69);
  }
  else {
    uint64_t v11 = v10 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 264, 0, v11, (uint64_t)&v59, 0, 1);
  __int16 v59 = 49;
  unsigned int v12 = *((unsigned __int16 *)this + 584);
  if ((v12 & 0x8000) != 0) {
    uint64_t v13 = *((unsigned int *)this + 293);
  }
  else {
    uint64_t v13 = v12 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 1160, 0, v13, (uint64_t)&v59, 0, 1);
  __int16 v59 = 50;
  unsigned int v14 = *((unsigned __int16 *)this + 616);
  if ((v14 & 0x8000) != 0) {
    uint64_t v15 = *((unsigned int *)this + 309);
  }
  else {
    uint64_t v15 = v14 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 1224, 0, v15, (uint64_t)&v59, 0, 1);
  __int16 v59 = 51;
  unsigned int v16 = *((unsigned __int16 *)this + 648);
  if ((v16 & 0x8000) != 0) {
    uint64_t v17 = *((unsigned int *)this + 325);
  }
  else {
    uint64_t v17 = v16 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 1288, 0, v17, (uint64_t)&v59, 0, 1);
  __int16 v59 = 52;
  unsigned int v18 = *((unsigned __int16 *)this + 680);
  if ((v18 & 0x8000) != 0) {
    uint64_t v19 = *((unsigned int *)this + 341);
  }
  else {
    uint64_t v19 = v18 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 1352, 0, v19, (uint64_t)&v59, 0, 1);
  __int16 v59 = 53;
  unsigned int v20 = *((unsigned __int16 *)this + 712);
  if ((v20 & 0x8000) != 0) {
    uint64_t v21 = *((unsigned int *)this + 357);
  }
  else {
    uint64_t v21 = v20 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 1416, 0, v21, (uint64_t)&v59, 0, 1);
  __int16 v59 = 54;
  unsigned int v22 = *((unsigned __int16 *)this + 744);
  if ((v22 & 0x8000) != 0) {
    uint64_t v23 = *((unsigned int *)this + 373);
  }
  else {
    uint64_t v23 = v22 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 1480, 0, v23, (uint64_t)&v59, 0, 1);
  __int16 v59 = 55;
  unsigned int v24 = *((unsigned __int16 *)this + 776);
  if ((v24 & 0x8000) != 0) {
    uint64_t v25 = *((unsigned int *)this + 389);
  }
  else {
    uint64_t v25 = v24 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 1544, 0, v25, (uint64_t)&v59, 0, 1);
  __int16 v59 = 56;
  unsigned int v26 = *((unsigned __int16 *)this + 808);
  if ((v26 & 0x8000) != 0) {
    uint64_t v27 = *((unsigned int *)this + 405);
  }
  else {
    uint64_t v27 = v26 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 1608, 0, v27, (uint64_t)&v59, 0, 1);
  __int16 v59 = 57;
  unsigned int v28 = *((unsigned __int16 *)this + 840);
  if ((v28 & 0x8000) != 0) {
    uint64_t v29 = *((unsigned int *)this + 421);
  }
  else {
    uint64_t v29 = v28 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 1672, 0, v29, (uint64_t)&v59, 0, 1);
  __int16 v59 = 35;
  unsigned int v30 = *((unsigned __int16 *)this + 168);
  if ((v30 & 0x8000) != 0) {
    uint64_t v31 = *((unsigned int *)this + 85);
  }
  else {
    uint64_t v31 = v30 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 328, 0, v31, (uint64_t)&v59, 0, 1);
  __int16 v59 = 43;
  unsigned int v32 = *((unsigned __int16 *)this + 232);
  if ((v32 & 0x8000) != 0) {
    uint64_t v33 = *((unsigned int *)this + 117);
  }
  else {
    uint64_t v33 = v32 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 456, 0, v33, (uint64_t)&v59, 0, 1);
  __int16 v59 = 45;
  unsigned int v34 = *((unsigned __int16 *)this + 200);
  if ((v34 & 0x8000) != 0) {
    uint64_t v35 = *((unsigned int *)this + 101);
  }
  else {
    uint64_t v35 = v34 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 392, 0, v35, (uint64_t)&v59, 0, 1);
  __int16 v59 = 164;
  unsigned int v36 = *((unsigned __int16 *)this + 264);
  if ((v36 & 0x8000) != 0) {
    uint64_t v37 = *((unsigned int *)this + 133);
  }
  else {
    uint64_t v37 = v36 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 520, 0, v37, (uint64_t)&v59, 0, 1);
  unint64_t v58 = (const UChar *)&unk_18CA91894;
  icu::UnicodeString::setTo((icu::DecimalFormatSymbols *)((char *)this + 584), 1, &v58, 2);
  __int16 v59 = 46;
  unsigned int v38 = *((unsigned __int16 *)this + 328);
  if ((v38 & 0x8000) != 0) {
    uint64_t v39 = *((unsigned int *)this + 165);
  }
  else {
    uint64_t v39 = v38 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 648, 0, v39, (uint64_t)&v59, 0, 1);
  __int16 v59 = 69;
  unsigned int v40 = *((unsigned __int16 *)this + 360);
  if ((v40 & 0x8000) != 0) {
    uint64_t v41 = *((unsigned int *)this + 181);
  }
  else {
    uint64_t v41 = v40 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 712, 0, v41, (uint64_t)&v59, 0, 1);
  __int16 v59 = 8240;
  unsigned int v42 = *((unsigned __int16 *)this + 392);
  if ((v42 & 0x8000) != 0) {
    uint64_t v43 = *((unsigned int *)this + 197);
  }
  else {
    uint64_t v43 = v42 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 776, 0, v43, (uint64_t)&v59, 0, 1);
  __int16 v59 = 42;
  unsigned int v44 = *((unsigned __int16 *)this + 424);
  if ((v44 & 0x8000) != 0) {
    uint64_t v45 = *((unsigned int *)this + 213);
  }
  else {
    uint64_t v45 = v44 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 840, 0, v45, (uint64_t)&v59, 0, 1);
  __int16 v59 = 8734;
  unsigned int v46 = *((unsigned __int16 *)this + 456);
  if ((v46 & 0x8000) != 0) {
    uint64_t v47 = *((unsigned int *)this + 229);
  }
  else {
    uint64_t v47 = v46 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 904, 0, v47, (uint64_t)&v59, 0, 1);
  __int16 v59 = -3;
  unsigned int v48 = *((unsigned __int16 *)this + 488);
  if ((v48 & 0x8000) != 0) {
    uint64_t v49 = *((unsigned int *)this + 245);
  }
  else {
    uint64_t v49 = v48 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 968, 0, v49, (uint64_t)&v59, 0, 1);
  __int16 v59 = 64;
  unsigned int v50 = *((unsigned __int16 *)this + 520);
  if ((v50 & 0x8000) != 0) {
    uint64_t v51 = *((unsigned int *)this + 261);
  }
  else {
    uint64_t v51 = v50 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 1032, 0, v51, (uint64_t)&v59, 0, 1);
  if (*((_WORD *)this + 552)) {
    __int16 v52 = 2;
  }
  else {
    __int16 v52 = *((_WORD *)this + 552) & 0x1F;
  }
  *((_WORD *)this + 552) = v52;
  __int16 v59 = 215;
  unsigned int v53 = *((unsigned __int16 *)this + 872);
  if ((v53 & 0x8000) != 0) {
    uint64_t v54 = *((unsigned int *)this + 437);
  }
  else {
    uint64_t v54 = v53 >> 5;
  }
  icu::UnicodeString::doReplace((uint64_t)this + 1736, 0, v54, (uint64_t)&v59, 0, 1);
  __int16 v59 = 126;
  unsigned int v55 = *((unsigned __int16 *)this + 904);
  if ((v55 & 0x8000) != 0) {
    uint64_t v56 = *((unsigned int *)this + 453);
  }
  else {
    uint64_t v56 = v55 >> 5;
  }
  uint64_t result = icu::UnicodeString::doReplace((uint64_t)this + 1800, 0, v56, (uint64_t)&v59, 0, 1);
  *((_WORD *)this + 1436) = 0;
  *((_DWORD *)this + 482) = 48;
  *((void *)this + 310) = 0;
  *((unsigned char *)this + 2874) = 0;
  return result;
}

icu::DecimalFormatSymbols *icu::DecimalFormatSymbols::createWithLastResortData(icu::DecimalFormatSymbols *this, UErrorCode *a2)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)this;
  if ((int)v2 > 0) {
    return 0;
  }
  uint64_t result = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v2, (icu::UMemory *)0xB48, (unint64_t)a2);
  if (result) {
    return icu::DecimalFormatSymbols::DecimalFormatSymbols(result);
  }
  *(_DWORD *)this = 7;
  return result;
}

void icu::DecimalFormatSymbols::~DecimalFormatSymbols(icu::DecimalFormatSymbols *this)
{
  *(void *)this = &unk_1EDA4B810;
  for (uint64_t i = 2808; i != 2616; i -= 64)
    icu::UnicodeString::~UnicodeString((icu::DecimalFormatSymbols *)((char *)this + i));
  do
  {
    icu::UnicodeString::~UnicodeString((icu::DecimalFormatSymbols *)((char *)this + i));
    i -= 64;
  }
  while (i != 2424);
  icu::Locale::~Locale((icu::DecimalFormatSymbols *)((char *)this + 1936));
  icu::UnicodeString::~UnicodeString((icu::DecimalFormatSymbols *)((char *)this + 1864));
  for (uint64_t j = 1800; j != -56; j -= 64)
    icu::UnicodeString::~UnicodeString((icu::DecimalFormatSymbols *)((char *)this + j));

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::DecimalFormatSymbols::~DecimalFormatSymbols(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::DecimalFormatSymbols::DecimalFormatSymbols(icu::DecimalFormatSymbols *this, const icu::DecimalFormatSymbols *a2)
{
  *(void *)this = &unk_1EDA4B810;
  uint64_t v4 = 8;
  do
  {
    __int16 v5 = (char *)this + v4;
    *(void *)__int16 v5 = &unk_1EDA47700;
    *((_WORD *)v5 + 4) = 2;
    v4 += 64;
  }
  while (v5 + 64 != (char *)this + 1864);
  *((void *)this + 233) = &unk_1EDA47700;
  *((_WORD *)this + 936) = 2;
  icu::Locale::Locale((icu::DecimalFormatSymbols *)((char *)this + 1936));
  *((void *)this + 310) = 0;
  uint64_t v6 = 2488;
  do
  {
    uint64_t v7 = (char *)this + v6;
    *(void *)uint64_t v7 = &unk_1EDA47700;
    *((_WORD *)v7 + 4) = 2;
    v6 += 64;
  }
  while (v7 + 64 != (char *)this + 2680);
  uint64_t v8 = 2680;
  do
  {
    uint64_t v9 = (char *)this + v8;
    *(void *)uint64_t v9 = &unk_1EDA47700;
    *((_WORD *)v9 + 4) = 2;
    v8 += 64;
  }
  while (v9 + 64 != (char *)this + 2872);
  *((unsigned char *)this + 2882) = 0;
  *(void *)((char *)this + 2874) = 0;

  return icu::DecimalFormatSymbols::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::DecimalFormatSymbols::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    for (uint64_t i = 8; i != 1864; i += 64)
      icu::UnicodeString::fastCopyFrom((UChar **)(a1 + i), (UChar **)(a2 + i));
    uint64_t v5 = -192;
    do
    {
      icu::UnicodeString::fastCopyFrom((UChar **)(a1 + v5 + 2680), (UChar **)(a2 + v5 + 2680));
      icu::UnicodeString::fastCopyFrom((UChar **)(a1 + v5 + 2872), (UChar **)(a2 + v5 + 2872));
      v5 += 64;
    }
    while (v5);
    icu::Locale::operator=((icu::Locale *)(a1 + 1936), a2 + 1936);
    strcpy((char *)(a1 + 2317), (const char *)(a2 + 2317));
    strcpy((char *)(a1 + 2160), (const char *)(a2 + 2160));
    *(_WORD *)(a1 + 2872) = *(_WORD *)(a2 + 2872);
    *(_DWORD *)(a1 + 1928) = *(_DWORD *)(a2 + 1928);
    *(void *)(a1 + 2480) = *(void *)(a2 + 2480);
    strcpy((char *)(a1 + 2874), (const char *)(a2 + 2874));
  }
  return a1;
}

uint64_t icu::DecimalFormatSymbols::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 2872) != *(unsigned __int8 *)(a2 + 2872)
    || *(unsigned __int8 *)(a1 + 2873) != *(unsigned __int8 *)(a2 + 2873))
  {
    return 0;
  }
  for (uint64_t i = 0; i != 1856; i += 64)
  {
    uint64_t v5 = a2 + i;
    unsigned int v6 = *(unsigned __int16 *)(a1 + i + 16);
    if (v6)
    {
      if ((*(_WORD *)(v5 + 16) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if ((v6 & 0x8000) != 0) {
        int v7 = *(_DWORD *)(a1 + i + 20);
      }
      else {
        int v7 = v6 >> 5;
      }
      uint64_t result = 0;
      unsigned int v9 = *(unsigned __int16 *)(a2 + i + 16);
      unsigned int v10 = *(_DWORD *)(a2 + i + 20);
      if ((v9 & 0x8000u) == 0) {
        unsigned int v10 = v9 >> 5;
      }
      if (v9) {
        return result;
      }
      if (v7 != v10) {
        return result;
      }
      uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + i + 8), (const icu::UnicodeString *)(v5 + 8), v7);
      if (!result) {
        return result;
      }
    }
  }
  for (uint64_t j = 0; j != 192; j += 64)
  {
    uint64_t v12 = a2 + j;
    unsigned int v13 = *(unsigned __int16 *)(a1 + j + 2496);
    if (v13)
    {
      if ((*(_WORD *)(v12 + 2496) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if ((v13 & 0x8000) != 0) {
        int v14 = *(_DWORD *)(a1 + j + 2500);
      }
      else {
        int v14 = v13 >> 5;
      }
      uint64_t result = 0;
      unsigned int v15 = *(unsigned __int16 *)(a2 + j + 2496);
      unsigned int v16 = *(_DWORD *)(a2 + j + 2500);
      if ((v15 & 0x8000u) == 0) {
        unsigned int v16 = v15 >> 5;
      }
      if (v15) {
        return result;
      }
      if (v14 != v16) {
        return result;
      }
      uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + j + 2488), (const icu::UnicodeString *)(v12 + 2488), v14);
      if (!result) {
        return result;
      }
    }
    uint64_t v17 = a2 + j;
    unsigned int v18 = *(unsigned __int16 *)(a1 + j + 2688);
    if (v18)
    {
      if ((*(_WORD *)(v17 + 2688) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if ((v18 & 0x8000) != 0) {
        int v19 = *(_DWORD *)(a1 + j + 2692);
      }
      else {
        int v19 = v18 >> 5;
      }
      uint64_t result = 0;
      unsigned int v20 = *(unsigned __int16 *)(a2 + j + 2688);
      unsigned int v21 = *(_DWORD *)(a2 + j + 2692);
      if ((v20 & 0x8000u) == 0) {
        unsigned int v21 = v20 >> 5;
      }
      if (v20) {
        return result;
      }
      if (v19 != v21) {
        return result;
      }
      uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + j + 2680), (const icu::UnicodeString *)(v17 + 2680), v19);
      if (!result) {
        return result;
      }
    }
  }
  uint64_t result = icu::Locale::operator==(a1 + 1936, a2 + 1936);
  if (result)
  {
    if (!strcmp((const char *)(a1 + 2317), (const char *)(a2 + 2317))) {
      return strcmp((const char *)(a1 + 2160), (const char *)(a2 + 2160)) == 0;
    }
    return 0;
  }
  return result;
}

char **icu::DecimalFormatSymbols::setCurrency(char **result, const UChar *a2, int *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v5 = result;
    long long v30 = 0u;
    uint64_t v33 = 0;
    long long v32 = 0u;
    long long v31 = 0u;
    uint64_t v29 = (UChar *)&unk_1EDA47700;
    LOWORD(v30) = 2;
    uprv_getStaticCurrencyName(a2, result[247], (uint64_t)&v29, a3);
    if (*a3 <= 0)
    {
      icu::UnicodeString::unBogus((uint64_t)(v5 + 73));
      if ((__int16)v5[74] < 0) {
        uint64_t v6 = *((unsigned int *)v5 + 149);
      }
      else {
        uint64_t v6 = *((unsigned __int16 *)v5 + 296) >> 5;
      }
      icu::UnicodeString::doReplace((uint64_t)(v5 + 73), 0, v6, (uint64_t)a2, 0, 3);
      icu::UnicodeString::operator=((UChar **)v5 + 65, &v29);
    }
    *(_DWORD *)unsigned int v16 = 0;
    u_UCharsToChars(a2, v16, 3);
    int v15 = 0;
    uint64_t v7 = ures_open("icudt74l-curr", v5[247], &v15);
    uint64_t v8 = ures_getByKeyWithFallback(v7, "Currencies", 0, (UErrorCode *)&v15);
    ures_getByKeyWithFallback(v8, v16, v8, (UErrorCode *)&v15);
    unint64_t v9 = v15;
    if (v15 <= 0 && (int)ures_getSize(v8) >= 3)
    {
      ures_getByIndex(v8, 2, v8, (UErrorCode *)&v15);
      int v14 = 0;
      v5[310] = (char *)ures_getStringByIndex(v8, 0, &v14, (UErrorCode *)&v15);
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      uint64_t v28 = 0;
      unsigned int v24 = (UChar *)&unk_1EDA47700;
      LOWORD(v25) = 2;
      LODWORD(v17) = 0;
      StringByIndex = (UChar *)ures_getStringByIndex(v8, 1, (int *)&v17, (UErrorCode *)&v15);
      if (v15 <= 0)
      {
        int v19 = StringByIndex;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v24, 1, (const UChar **)&v19, (int)v17);
      }
      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v24);
      }
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      uint64_t v23 = 0;
      int v19 = (UChar *)&unk_1EDA47700;
      LOWORD(v20) = 2;
      int v18 = 0;
      uint64_t v11 = ures_getStringByIndex(v8, 2, &v18, (UErrorCode *)&v15);
      if (v15 <= 0)
      {
        uint64_t v17 = v11;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v19, 1, &v17, v18);
      }
      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v19);
      }
      unint64_t v12 = v15;
      if (v15 <= 0)
      {
        icu::UnicodeString::operator=((UChar **)v5 + 137, &v19);
        icu::UnicodeString::operator=((UChar **)v5 + 81, &v24);
      }
      icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v19);
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v24);
    }
    if (v8) {
      ures_close(v8);
    }
    if (v7) {
      ures_close(v7);
    }
    return (char **)icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v29);
  }
  return result;
}

uint64_t icu::DecimalFormatSymbols::getLocale@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  v5[0] = (const char *)(a1 + 2317);
  v5[1] = (const char *)(a1 + 2160);
  return icu::LocaleBased::getLocale(v5, a2, a3, a4);
}

uint64_t icu::DecimalFormatSymbols::getPatternForCurrencySpacing(uint64_t a1, int a2, int a3, int *a4)
{
  uint64_t v4 = a1 + ((uint64_t)a2 << 6);
  uint64_t v5 = v4 + 2680;
  uint64_t v6 = v4 + 2488;
  if (!a3) {
    uint64_t v6 = v5;
  }
  if (*a4 >= 1) {
    return a1 + 1864;
  }
  else {
    return v6;
  }
}

icu::UnicodeString *icu::DecimalFormatSymbols::setPatternForCurrencySpacing(uint64_t a1, int a2, int a3, UChar **a4)
{
  uint64_t v4 = a1 + ((uint64_t)a2 << 6);
  uint64_t v5 = (UChar **)(v4 + 2680);
  uint64_t v6 = (UChar **)(v4 + 2488);
  if (a3) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v5;
  }
  return icu::UnicodeString::operator=(v7, a4);
}

void sub_18C90497C(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void *sub_18C9049A4(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  v20[8] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  __s1 = a2;
  memset(v15, 0, sizeof(v15));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v15, a3, a5);
  if (*a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v15, 0, (const char **)&__s1, a3);
    if (result)
    {
      int v9 = 0;
      uint64_t v10 = a1 + 16;
      while (2)
      {
        uint64_t v11 = 0;
        unint64_t v12 = __s1;
        while (((0x7FD2334uLL >> v11) & 1) != 0 || strcmp(v12, off_1E550B738[v11]))
        {
          if (++v11 == 29) {
            goto LABEL_11;
          }
        }
        if (!*(unsigned char *)(v10 + v11))
        {
          *(unsigned char *)(v10 + v11) = 1;
          unsigned int v13 = *(icu::UnicodeString **)(a1 + 8);
          int v19 = 0;
          uint64_t v18 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32))(a3, &v19, a5);
          icu::UnicodeString::UnicodeString(v20, 1, &v18);
          sub_18C904B78(v13, v11, v20, 1);
          uint64_t result = icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v20);
          if (*a5 >= 1) {
            return result;
          }
        }
LABEL_11:
        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v15, ++v9, (const char **)&__s1, a3);
        if (result) {
          continue;
        }
        break;
      }
    }
  }
  return result;
}

icu::UnicodeString *sub_18C904B78(icu::UnicodeString *result, int a2, UChar **a3, int a4)
{
  uint64_t v6 = result;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2 == 9)
  {
    *((unsigned char *)result + 2873) = 1;
  }
  else
  {
    if (a2 != 8)
    {
      if (a2 > 28) {
        return result;
      }
      uint64_t result = icu::UnicodeString::operator=((UChar **)result + 8 * (unint64_t)a2 + 1, a3);
      if (a2 == 4)
      {
        uint64_t result = (icu::UnicodeString *)icu::UnicodeString::char32At(v9, (icu::UnicodeString *)a3, 0);
        if (a4)
        {
          int v10 = (int)result;
          uint64_t result = (icu::UnicodeString *)u_charDigitValue((UChar32)result);
          if (!result)
          {
            uint64_t result = (icu::UnicodeString *)icu::UnicodeString::countChar32((icu::UnicodeString *)a3, 0, 0x7FFFFFFF);
            if (result == 1)
            {
              uint64_t v11 = 0;
              *((_DWORD *)v6 + 482) = v10;
              unint64_t v12 = (icu::UnicodeString *)((char *)v6 + 1160);
              int v13 = v10 + 1;
              do
              {
                icu::UnicodeString::UnicodeString((uint64_t)v15, v13 + v11);
                icu::UnicodeString::operator=(v12, (icu::UnicodeString *)v15);
                uint64_t result = (icu::UnicodeString *)icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v15);
                unint64_t v12 = (icu::UnicodeString *)((char *)v12 + 64);
                ++v11;
              }
              while (v11 != 9);
              return result;
            }
          }
        }
      }
      else if ((a2 - 18) > 8)
      {
        return result;
      }
      *((_DWORD *)v6 + 482) = -1;
      return result;
    }
    *((unsigned char *)result + 2872) = 1;
  }
  uint64_t v7 = (UChar **)((char *)result + 64 * (unint64_t)a2 + 8);

  return icu::UnicodeString::operator=(v7, a3);
}

void sub_18C904D00(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C904D28(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  v31[8] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t v27 = 0;
  __s1 = a2;
  memset(v26, 0, sizeof(v26));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v26, a3, a5);
  uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v26, 0, (const char **)&__s1, a3);
  if (result)
  {
    int v9 = 0;
    do
    {
      int v10 = __s1;
      int v11 = strcmp(__s1, "beforeCurrency");
      if (v11)
      {
        if (strcmp(v10, "afterCurrency")) {
          goto LABEL_26;
        }
        *(unsigned char *)(a1 + 17) = 1;
      }
      else
      {
        *(unsigned char *)(a1 + 16) = 1;
      }
      uint64_t v25 = 0;
      memset(v24, 0, sizeof(v24));
      (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v24, a3, a5);
      if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v24, 0, (const char **)&__s1, a3))
      {
        unsigned int v12 = 1;
        while (1)
        {
          int v13 = __s1;
          if (!strcmp(__s1, "currencyMatch")) {
            break;
          }
          if (!strcmp(v13, "surroundingMatch"))
          {
            uint64_t v14 = 1;
LABEL_15:
            uint64_t v15 = *(void *)(a1 + 8);
            if (*a5 < 1)
            {
              uint64_t v17 = v15 + (v14 << 6);
              if (v11) {
                uint64_t v16 = v17 + 2680;
              }
              else {
                uint64_t v16 = v17 + 2488;
              }
            }
            else
            {
              uint64_t v16 = v15 + 1864;
            }
            if (*(unsigned __int16 *)(v16 + 8) <= 0x1Fu)
            {
              int v30 = 0;
              uint64_t v29 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32))(a3, &v30, a5);
              icu::UnicodeString::UnicodeString(v31, 1, &v29);
              uint64_t v18 = v15 + (v14 << 6);
              int v19 = (UChar **)(v18 + 2680);
              long long v20 = (UChar **)(v18 + 2488);
              if (v11) {
                long long v21 = v19;
              }
              else {
                long long v21 = v20;
              }
              icu::UnicodeString::operator=(v21, v31);
              icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v31);
            }
            goto LABEL_25;
          }
          if (!strcmp(v13, "insertBetween"))
          {
            uint64_t v14 = 2;
            goto LABEL_15;
          }
LABEL_25:
          if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v24, v12++, (const char **)&__s1, a3))goto LABEL_26; {
        }
          }
        uint64_t v14 = 0;
        goto LABEL_15;
      }
LABEL_26:
      uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v26, ++v9, (const char **)&__s1, a3);
    }
    while (result);
  }
  return result;
}

uint64_t uprv_decContextClearStatus(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) &= ~a2;
  return result;
}

uint64_t uprv_decContextDefault(uint64_t result, int a2)
{
  *(_OWORD *)uint64_t result = xmmword_18CA91960;
  *(void *)(result + 16) = 8927;
  *(unsigned char *)(result + 24) = 0;
  HIDWORD(v2) = a2;
  LODWORD(v2) = a2;
  switch((v2 >> 5))
  {
    case 0u:
      return result;
    case 1u:
      long long v3 = xmmword_18CA91990;
      goto LABEL_6;
    case 2u:
      long long v3 = xmmword_18CA91980;
      goto LABEL_6;
    case 4u:
      long long v3 = xmmword_18CA91970;
LABEL_6:
      *(_OWORD *)uint64_t result = v3;
      *(_DWORD *)(result + 16) = 0;
      *(unsigned char *)(result + 24) = 1;
      break;
    default:
      *(_DWORD *)(result + 20) = 128;
      break;
  }
  return result;
}

uint64_t uprv_decContextSetStatus(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) |= a2;
  return result;
}

uint64_t uprv_decContextGetRounding(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t uprv_decContextGetStatus(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t uprv_decContextRestoreStatus(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 20) = *(_DWORD *)(result + 20) & ~a3 | a3 & a2;
  return result;
}

uint64_t uprv_decContextSaveStatus(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 20) & a2;
}

uint64_t uprv_decContextSetRounding(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = a2;
  return result;
}

uint64_t uprv_decContextSetStatusFromString(uint64_t a1, char *__s1)
{
  if (!strcmp(__s1, "Conversion syntax"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 1;
LABEL_30:
    *(_DWORD *)(a1 + 20) = v4;
    return a1;
  }
  if (!strcmp(__s1, "Division by zero"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 2;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Division impossible"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 4;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Division undefined"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 8;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Inexact"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x20;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Insufficient storage"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x10;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Invalid context"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x40;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Invalid operation"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x80;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Overflow"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x200;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Clamped"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x400;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Rounded"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x800;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Subnormal"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x1000;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Underflow"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x2000;
    goto LABEL_30;
  }
  if (strcmp(__s1, "No status")) {
    return 0;
  }
  return a1;
}

uint64_t uprv_decContextSetStatusFromStringQuiet(uint64_t a1, char *__s1)
{
  if (!strcmp(__s1, "Conversion syntax"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 1;
LABEL_30:
    *(_DWORD *)(a1 + 20) = v4;
    return a1;
  }
  if (!strcmp(__s1, "Division by zero"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 2;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Division impossible"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 4;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Division undefined"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 8;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Inexact"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x20;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Insufficient storage"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x10;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Invalid context"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x40;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Invalid operation"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x80;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Overflow"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x200;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Clamped"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x400;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Rounded"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x800;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Subnormal"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x1000;
    goto LABEL_30;
  }
  if (!strcmp(__s1, "Underflow"))
  {
    int v4 = *(_DWORD *)(a1 + 20) | 0x2000;
    goto LABEL_30;
  }
  if (strcmp(__s1, "No status")) {
    return 0;
  }
  return a1;
}

uint64_t uprv_decContextSetStatusQuiet(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) |= a2;
  return result;
}

const char *uprv_decContextStatusToString(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if (v1 > 63)
  {
    if (v1 <= 1023)
    {
      switch(v1)
      {
        case 64:
          return "Invalid context";
        case 128:
          return "Invalid operation";
        case 512:
          return "Overflow";
      }
    }
    else if (v1 > 4095)
    {
      if (v1 == 4096) {
        return "Subnormal";
      }
      if (v1 == 0x2000) {
        return "Underflow";
      }
    }
    else
    {
      if (v1 == 1024) {
        return "Clamped";
      }
      if (v1 == 2048) {
        return "Rounded";
      }
    }
    return "Multiple status";
  }
  switch(v1)
  {
    case 0:
      return "No status";
    case 1:
      return "Conversion syntax";
    case 2:
      return "Division by zero";
    case 3:
    case 5:
    case 6:
    case 7:
      return "Multiple status";
    case 4:
      return "Division impossible";
    case 8:
      return "Division undefined";
    default:
      if (v1 == 16)
      {
        uint64_t result = "Insufficient storage";
      }
      else
      {
        if (v1 != 32) {
          return "Multiple status";
        }
        uint64_t result = "Inexact";
      }
      break;
  }
  return result;
}

BOOL uprv_decContextTestSavedStatus(int a1, int a2)
{
  return (a2 & a1) != 0;
}

BOOL uprv_decContextTestStatus(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 20) & a2) != 0;
}

uint64_t uprv_decContextZeroStatus(uint64_t result)
{
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t uprv_decNumberFromInt32(uint64_t a1, signed int a2)
{
  signed int v2 = a2;
  if (a2 < 0) {
    a2 = -a2;
  }
  uint64_t result = uprv_decNumberFromUInt32(a1, a2);
  if (v2 < 0) {
    *(unsigned char *)(result + 8) = 0x80;
  }
  return result;
}

uint64_t uprv_decNumberFromUInt32(uint64_t result, unsigned int a2)
{
  *(_WORD *)(result + 8) = 0;
  *(void *)uint64_t result = 1;
  if (a2)
  {
    uint64_t v2 = 0;
    unint64_t v3 = result + 9;
    do
    {
      *(unsigned char *)(result + v2++ + 9) = a2 % 0xA;
      BOOL v4 = a2 > 9;
      a2 /= 0xAu;
    }
    while (v4);
    if ((int)v2 > 0)
    {
      uint64_t v5 = (unsigned char *)(v3 + (v2 - 1));
      do
      {
        if (*v5) {
          BOOL v6 = 1;
        }
        else {
          BOOL v6 = v2 == 1;
        }
        if (v6) {
          break;
        }
        LODWORD(v2) = v2 - 1;
        --v5;
      }
      while ((unint64_t)v5 >= v3);
    }
    *(_DWORD *)uint64_t result = v2;
  }
  return result;
}

double uprv_decNumberZero(uint64_t a1)
{
  *(_WORD *)(a1 + 8) = 0;
  *(void *)&double result = 1;
  *(void *)a1 = 1;
  return result;
}

uint64_t uprv_decNumberToInt32(unsigned int *a1, uint64_t a2)
{
  if ((a1[2] & 0x70) != 0) {
    goto LABEL_4;
  }
  uint64_t v2 = *a1;
  if ((int)v2 > 10 || a1[1]) {
    goto LABEL_4;
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + 9);
  if ((int)v2 < 2)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    BOOL v6 = (unsigned __int8 *)a1 + 10;
    uint64_t v7 = v2 - 1;
    uint64_t v8 = dword_18CA919D8;
    do
    {
      int v10 = *v6++;
      int v9 = v10;
      int v11 = *v8++;
      v5 += v11 * v9;
      --v7;
    }
    while (v7);
    if (v5 > 0xCCCCCCC)
    {
LABEL_4:
      uprv_decContextSetStatus(a2, 128);
      return 0;
    }
    if (v5 == 214748364 && v4 >= 8)
    {
      if ((a1[2] & 0x80) != 0 && v4 == 8) {
        return 0x80000000;
      }
      goto LABEL_4;
    }
  }
  unsigned int v13 = v4 + 10 * v5;
  if (*((char *)a1 + 8) >= 0) {
    return v13;
  }
  else {
    return -v13;
  }
}

uint64_t uprv_decNumberToUInt32(unsigned int *a1, uint64_t a2)
{
  if ((a1[2] & 0x70) != 0) {
    goto LABEL_4;
  }
  uint64_t v2 = *a1;
  if ((int)v2 > 10 || a1[1]) {
    goto LABEL_4;
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + 9);
  if ((a1[2] & 0x80) == 0)
  {
    if ((int)v2 >= 2)
    {
      unsigned int v5 = 0;
      BOOL v6 = (unsigned __int8 *)a1 + 10;
      uint64_t v7 = v2 - 1;
      uint64_t v8 = dword_18CA919D8;
      do
      {
        int v10 = *v6++;
        int v9 = v10;
        int v11 = *v8++;
        v5 += v11 * v9;
        --v7;
      }
      while (v7);
      if (v5 > 0x19999999) {
        goto LABEL_4;
      }
      if (v5 == 429496729 && v4 > 5) {
        goto LABEL_4;
      }
      return v4 + 10 * v5;
    }
LABEL_18:
    unsigned int v5 = 0;
    return v4 + 10 * v5;
  }
  if (v2 == 1 && !*((unsigned char *)a1 + 9)) {
    goto LABEL_18;
  }
LABEL_4:
  uprv_decContextSetStatus(a2, 128);
  return 0;
}

unsigned char *uprv_decNumberToString(unint64_t a1, unsigned char *a2)
{
  return a2;
}

unint64_t sub_18C9058A8(unint64_t result, unsigned char *a2, int a3)
{
  unint64_t v3 = a2;
  unsigned int v4 = *(_DWORD *)result;
  if (*(int *)result <= 49) {
    unsigned int v4 = byte_18CA91A00[v4];
  }
  int v5 = *(_DWORD *)(result + 4);
  int v6 = *(char *)(result + 8);
  if (v6 < 0)
  {
    *a2 = 45;
    unint64_t v3 = a2 + 1;
    LOBYTE(v6) = *(unsigned char *)(result + 8);
  }
  if ((v6 & 0x70) == 0)
  {
    int v7 = *(_DWORD *)result;
    goto LABEL_14;
  }
  if ((v6 & 0x40) != 0)
  {
    *(_DWORD *)unint64_t v3 = 6712905;
    strcpy(v3 + 3, "inity");
    return result;
  }
  if ((v6 & 0x10) != 0) {
    *v3++ = 115;
  }
  *(_DWORD *)unint64_t v3 = 5136718;
  if (!v5)
  {
    v3 += 3;
    int v7 = *(_DWORD *)result;
    if (*(unsigned char *)(result + 9) || v7 != 1)
    {
LABEL_14:
      uint64_t v8 = (unsigned __int8 *)(result + 9);
      int v9 = (unsigned __int8 *)(result + 9 + v4 - 1);
      int v10 = v7;
      if (v7 <= 49) {
        int v10 = byte_18CA91A00[v7];
      }
      unsigned int v11 = v7 - v10;
      if (!v5)
      {
        for (; v9 >= v8; --v9)
        {
          if ((v11 & 0x80000000) == 0)
          {
            unsigned int v31 = *v9;
            uint64_t v32 = v11;
            do
            {
              int v33 = 48;
              *unint64_t v3 = 48;
              int v34 = dword_18CA919D8[v32];
              if (v31 <= 2 * v34)
              {
                unsigned int v39 = 2 * v34;
              }
              else
              {
                unsigned int v35 = 8 * v34;
                if (v31 < 8 * v34) {
                  int v33 = 48;
                }
                else {
                  int v33 = 56;
                }
                if (v31 < 8 * v34) {
                  int v36 = 0;
                }
                else {
                  int v36 = 8 * v34;
                }
                unsigned int v37 = v31 - v36;
                double result = 4 * (v34 & 0x1FFFFFFFu);
                if (v37 < v35 >> 1)
                {
                  int v38 = 0;
                }
                else
                {
                  v33 |= 4u;
                  int v38 = 4 * (v34 & 0x1FFFFFFF);
                }
                if (v31 >= 8 * v34 || v37 >= result) {
                  *unint64_t v3 = v33;
                }
                unsigned int v31 = v37 - v38;
                unsigned int v39 = v35 >> 2;
              }
              if (v31 < v39) {
                unsigned int v40 = 0;
              }
              else {
                unsigned int v40 = v39;
              }
              unsigned int v41 = v31 - v40;
              unsigned int v42 = v39 >> 1;
              if (v41 < v39 >> 1) {
                unsigned int v43 = 0;
              }
              else {
                unsigned int v43 = v39 >> 1;
              }
              if (v31 >= v39 || v41 >= v42)
              {
                double result = (v33 + 2);
                if (v31 < v39) {
                  char v45 = v33;
                }
                else {
                  char v45 = v33 + 2;
                }
                if (v41 >= v42) {
                  ++v45;
                }
                *unint64_t v3 = v45;
              }
              unsigned int v31 = v41 - v43;
              ++v3;
            }
            while (v32-- > 0);
          }
          unsigned int v11 = 0;
        }
        *unint64_t v3 = 0;
        return result;
      }
      int v12 = v7 + v5;
      if (v5 <= 0 && v12 > -6)
      {
        unsigned int v13 = 0;
        int v14 = v7 + v5;
        goto LABEL_20;
      }
      unsigned int v13 = v12 - 1;
      int v14 = 1;
      if (a3 && v12 != 1)
      {
        unsigned int v47 = ((1 - v12) % 3u) ^ 3;
        if (!((1 - v12) % 3u)) {
          unsigned int v47 = 0;
        }
        if (v12 > 0) {
          unsigned int v47 = v13 % 3;
        }
        v13 -= v47;
        if (v7 != 1 || *v8 || (*(unsigned char *)(result + 8) & 0x70) != 0)
        {
          int v14 = v47 + 1;
        }
        else
        {
          if (v47)
          {
            v13 += 3;
            int v14 = v47 - 2;
LABEL_20:
            unsigned int v15 = *v9;
            if (v14 < 1)
            {
              *(_WORD *)unint64_t v3 = 11824;
              uint64_t v16 = v3 + 2;
              if (v14 < 0)
              {
                uint64_t v17 = ~v14;
                double result = (unint64_t)memset(v3 + 2, 48, v17 + 1);
                uint64_t v16 = &v3[v17 + 3];
              }
              if ((v11 & 0x80000000) == 0) {
                goto LABEL_26;
              }
              while (v9 != v8)
              {
                unsigned int v11 = 0;
                unsigned int v18 = *--v9;
                unsigned int v15 = v18;
                do
                {
LABEL_26:
                  char v19 = 48;
                  *uint64_t v16 = 48;
                  int v20 = dword_18CA919D8[v11];
                  if (v15 <= 2 * v20)
                  {
                    unsigned int v25 = 2 * v20;
                  }
                  else
                  {
                    unsigned int v21 = 8 * v20;
                    if (v15 < 8 * v20) {
                      char v19 = 48;
                    }
                    else {
                      char v19 = 56;
                    }
                    if (v15 < 8 * v20) {
                      int v22 = 0;
                    }
                    else {
                      int v22 = 8 * v20;
                    }
                    unsigned int v23 = v15 - v22;
                    if (v23 < v21 >> 1)
                    {
                      int v24 = 0;
                    }
                    else
                    {
                      v19 |= 4u;
                      int v24 = 4 * (v20 & 0x1FFFFFFF);
                    }
                    if (v15 >= 8 * v20 || v23 >= 4 * (v20 & 0x1FFFFFFFu)) {
                      *uint64_t v16 = v19;
                    }
                    unsigned int v15 = v23 - v24;
                    unsigned int v25 = v21 >> 2;
                  }
                  if (v15 < v25) {
                    unsigned int v26 = 0;
                  }
                  else {
                    unsigned int v26 = v25;
                  }
                  unsigned int v27 = v15 - v26;
                  unsigned int v28 = v25 >> 1;
                  if (v27 < v25 >> 1) {
                    unsigned int v29 = 0;
                  }
                  else {
                    unsigned int v29 = v25 >> 1;
                  }
                  if (v15 >= v25 || v27 >= v28)
                  {
                    if (v15 >= v25) {
                      v19 += 2;
                    }
                    if (v27 >= v28) {
                      ++v19;
                    }
                    *uint64_t v16 = v19;
                  }
                  unsigned int v15 = v27 - v29;
                  ++v16;
                  --v11;
                }
                while ((v11 & 0x80000000) == 0);
              }
              goto LABEL_187;
            }
            goto LABEL_110;
          }
          int v14 = 1;
        }
      }
      unsigned int v15 = *v9;
LABEL_110:
      uint64_t v48 = 0;
      uint64_t v49 = 1;
      while (1)
      {
        if ((v11 & 0x80000000) != 0)
        {
          if (v9 == v8)
          {
            uint64_t v16 = &v3[v48];
            if (v14 >= *(_DWORD *)result)
            {
              size_t v76 = v14 - v48;
              double result = (unint64_t)memset(v16, 48, v76);
              v16 += v76;
              goto LABEL_187;
            }
            int v9 = (unsigned __int8 *)(result + 9);
LABEL_150:
            *v16++ = 46;
            if ((v11 & 0x80000000) == 0) {
              goto LABEL_153;
            }
            while (v9 != v8)
            {
              unsigned int v11 = 0;
              unsigned int v63 = *--v9;
              unsigned int v15 = v63;
              do
              {
LABEL_153:
                char v64 = 48;
                *uint64_t v16 = 48;
                int v65 = dword_18CA919D8[v11];
                if (v15 <= 2 * v65)
                {
                  unsigned int v70 = 2 * v65;
                }
                else
                {
                  unsigned int v66 = 8 * v65;
                  if (v15 < 8 * v65) {
                    char v64 = 48;
                  }
                  else {
                    char v64 = 56;
                  }
                  if (v15 < 8 * v65) {
                    int v67 = 0;
                  }
                  else {
                    int v67 = 8 * v65;
                  }
                  unsigned int v68 = v15 - v67;
                  if (v68 < v66 >> 1)
                  {
                    int v69 = 0;
                  }
                  else
                  {
                    v64 |= 4u;
                    int v69 = 4 * (v65 & 0x1FFFFFFF);
                  }
                  if (v15 >= 8 * v65 || v68 >= 4 * (v65 & 0x1FFFFFFFu)) {
                    *uint64_t v16 = v64;
                  }
                  unsigned int v15 = v68 - v69;
                  unsigned int v70 = v66 >> 2;
                }
                if (v15 < v70) {
                  unsigned int v71 = 0;
                }
                else {
                  unsigned int v71 = v70;
                }
                unsigned int v72 = v15 - v71;
                unsigned int v73 = v70 >> 1;
                if (v72 < v70 >> 1) {
                  unsigned int v74 = 0;
                }
                else {
                  unsigned int v74 = v70 >> 1;
                }
                if (v15 >= v70 || v72 >= v73)
                {
                  if (v15 >= v70) {
                    v64 += 2;
                  }
                  if (v72 >= v73) {
                    ++v64;
                  }
                  *uint64_t v16 = v64;
                }
                unsigned int v15 = v72 - v74;
                --v11;
                ++v16;
              }
              while ((v11 & 0x80000000) == 0);
            }
LABEL_187:
            if (v13)
            {
              *(_WORD *)uint64_t v16 = 11077;
              if ((v13 & 0x80000000) != 0)
              {
                v16[1] = 45;
                unsigned int v13 = -v13;
              }
              char v77 = 0;
              uint64_t v78 = 9u;
              v16 += 2;
              do
              {
                *uint64_t v16 = 48;
                int v79 = dword_18CA919D8[v78];
                if (v13 <= 2 * v79)
                {
                  unsigned int v85 = 2 * v79;
                  int v81 = 48;
                }
                else
                {
                  unsigned int v80 = 8 * v79;
                  if (v13 < 8 * v79) {
                    int v81 = 48;
                  }
                  else {
                    int v81 = 56;
                  }
                  if (v13 < 8 * v79) {
                    int v82 = 0;
                  }
                  else {
                    int v82 = 8 * v79;
                  }
                  unsigned int v83 = v13 - v82;
                  double result = 4 * (v79 & 0x1FFFFFFFu);
                  if (v83 < v80 >> 1)
                  {
                    int v84 = 0;
                  }
                  else
                  {
                    v81 |= 4u;
                    int v84 = 4 * (v79 & 0x1FFFFFFF);
                  }
                  if (v13 >= 8 * v79 || v83 >= result) {
                    *uint64_t v16 = v81;
                  }
                  unsigned int v13 = v83 - v84;
                  unsigned int v85 = v80 >> 2;
                }
                if (v13 < v85)
                {
                  unsigned int v86 = 0;
                }
                else
                {
                  v81 += 2;
                  unsigned int v86 = v85;
                }
                unsigned int v87 = v13 - v86;
                if (v87 < v85 >> 1)
                {
                  unsigned int v88 = 0;
                }
                else
                {
                  ++v81;
                  unsigned int v88 = v85 >> 1;
                }
                if (v13 >= v85 || v87 >= v85 >> 1) {
                  *uint64_t v16 = v81;
                }
                unsigned int v13 = v87 - v88;
                if (v77) {
                  BOOL v90 = 0;
                }
                else {
                  BOOL v90 = v81 == 48;
                }
                char v77 = !v90;
                if (!v90) {
                  ++v16;
                }
                --v78;
              }
              while (v78 != -1);
            }
            *uint64_t v16 = 0;
            return result;
          }
          unsigned int v11 = 0;
          unsigned int v50 = *--v9;
          unsigned int v15 = v50;
        }
        char v51 = 48;
        v3[v48] = 48;
        int v52 = dword_18CA919D8[v11];
        if (v15 <= 2 * v52)
        {
          unsigned int v57 = 2 * v52;
        }
        else
        {
          unsigned int v53 = 8 * v52;
          if (v15 < 8 * v52) {
            char v51 = 48;
          }
          else {
            char v51 = 56;
          }
          if (v15 < 8 * v52) {
            int v54 = 0;
          }
          else {
            int v54 = 8 * v52;
          }
          unsigned int v55 = v15 - v54;
          if (v55 < v53 >> 1)
          {
            int v56 = 0;
          }
          else
          {
            v51 |= 4u;
            int v56 = 4 * (v52 & 0x1FFFFFFF);
          }
          if (v15 >= 8 * v52 || v55 >= 4 * (v52 & 0x1FFFFFFFu)) {
            v3[v48] = v51;
          }
          unsigned int v15 = v55 - v56;
          unsigned int v57 = v53 >> 2;
        }
        if (v15 < v57) {
          unsigned int v58 = 0;
        }
        else {
          unsigned int v58 = v57;
        }
        unsigned int v59 = v15 - v58;
        unsigned int v60 = v57 >> 1;
        if (v59 < v57 >> 1) {
          unsigned int v61 = 0;
        }
        else {
          unsigned int v61 = v57 >> 1;
        }
        if (v15 >= v57 || v59 >= v60)
        {
          if (v15 >= v57) {
            v51 += 2;
          }
          if (v59 >= v60) {
            ++v51;
          }
          v3[v48] = v51;
        }
        unsigned int v15 = v59 - v61;
        --v11;
        ++v48;
        if (v14 + (int)--v49 <= 1)
        {
          uint64_t v16 = &v3[v48];
          if (v14 >= *(_DWORD *)result) {
            goto LABEL_187;
          }
          goto LABEL_150;
        }
      }
    }
  }
  return result;
}

unsigned char *uprv_decNumberToEngString(unint64_t a1, unsigned char *a2)
{
  return a2;
}

uint64_t uprv_decNumberFromString(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = 0;
  char v6 = 0;
  int v7 = 0u;
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v48 = 0;
  uint64_t j = a2;
  while (1)
  {
    unsigned int v11 = &a2[v5];
    int v12 = a2[v5];
    if ((v12 - 48) <= 9)
    {
      ++v7;
      goto LABEL_17;
    }
    if (v12 != 46 || v8 != 0) {
      break;
    }
    if (v11 == j) {
      ++j;
    }
    uint64_t v8 = &a2[v5];
LABEL_16:
    unsigned int v11 = v9;
LABEL_17:
    ++v5;
    int v9 = v11;
  }
  if (!v5)
  {
    if (v12 == 43)
    {
      ++j;
    }
    else
    {
      if (v12 != 45) {
        goto LABEL_19;
      }
      ++j;
      char v6 = 0x80;
    }
    goto LABEL_16;
  }
  a2 += v5;
LABEL_19:
  memset(v50, 0, 45);
  int v49 = 0;
  if (v9)
  {
    if (!v12)
    {
      int v28 = 0;
      goto LABEL_56;
    }
    int v14 = 1;
    int v48 = 1;
    if ((v12 | 0x20) != 0x65) {
      goto LABEL_98;
    }
    uint64_t v16 = a2 + 1;
    int v15 = a2[1];
    BOOL v17 = v15 == 45 || v15 == 43;
    uint64_t v18 = 1;
    if (v17)
    {
      uint64_t v18 = 2;
      uint64_t v16 = a2 + 2;
    }
    int v19 = a2[v18];
    if (v19)
    {
      int v20 = v16 + 1;
      do
      {
        char v21 = v19;
        int v22 = v20;
        if (v19 != 48) {
          break;
        }
        ++v20;
        int v19 = *v22;
      }
      while (*v22);
      int v23 = *(v22 - 1);
      if ((v23 - 58) >= 0xFFFFFFF6)
      {
        int v25 = 0;
        uint64_t v29 = 0;
        do
        {
          int v25 = v23 + 10 * v25 - 48;
          unint64_t v24 = v29 + 1;
          int v23 = v22[v29++];
        }
        while ((v23 - 58) > 0xFFFFFFF5);
      }
      else
      {
        unint64_t v24 = 0;
        int v25 = 0;
      }
      if (!v23)
      {
        if (v24 == 10 && v21 <= 49) {
          int v31 = v25;
        }
        else {
          int v31 = 1999999998;
        }
        if (v24 < 0xA) {
          int v31 = v25;
        }
        if (v15 == 45) {
          int v28 = -v31;
        }
        else {
          int v28 = v31;
        }
LABEL_55:
        int v48 = 0;
LABEL_56:
        if (*j == 48 && j < v9)
        {
          int64_t v32 = v9 - j;
          do
          {
            int v33 = *j;
            if (v33 != 46)
            {
              if (v33 != 48) {
                goto LABEL_64;
              }
              --v7;
            }
            ++j;
            --v32;
          }
          while (v32);
          uint64_t j = v9;
        }
LABEL_64:
        if (v8 >= v9 || v8 == 0) {
          int v35 = 0;
        }
        else {
          int v35 = v8 - v9;
        }
        if (v7 <= *(_DWORD *)a3)
        {
          int v38 = 0;
          unsigned int v37 = (char *)(a1 + 9);
        }
        else
        {
          unsigned int v36 = v7;
          if (v7 > 49) {
            goto LABEL_74;
          }
          if ((unint64_t)(v7 - 46) > 3)
          {
            int v38 = 0;
            unsigned int v37 = (char *)v50;
          }
          else
          {
            unsigned int v36 = byte_18CA91A00[v7];
LABEL_74:
            unsigned int v37 = (char *)uprv_malloc(v36);
            int v38 = v37;
            if (!v37)
            {
              int v14 = 16;
              goto LABEL_98;
            }
          }
        }
        int v41 = v35 + v28;
        if (v9 >= j)
        {
          unsigned int v42 = v37;
          do
          {
            int v43 = *v9;
            if (v43 != 46) {
              *v42++ = v43 - 48;
            }
            --v9;
          }
          while (v9 >= j);
        }
        *(unsigned char *)(a1 + 8) = v6;
        *(_DWORD *)a1 = v7;
        *(_DWORD *)(a1 + 4) = v41;
        if (v7 > *(_DWORD *)a3)
        {
          int v49 = 0;
          sub_18C906460((unsigned char *)a1, (int *)a3, v37, v7, &v49, &v48);
          goto LABEL_94;
        }
        if (v41 <= *(_DWORD *)(a3 + 8) - v7 || v41 - 1 > *(_DWORD *)(a3 + 4) - *(_DWORD *)a3)
        {
          int v49 = 0;
LABEL_94:
          sub_18C9066E0((unsigned int *)a1, a3, &v49, &v48);
        }
        if (v38) {
          uprv_free(v38);
        }
      }
    }
LABEL_97:
    int v14 = v48;
    if (v48) {
LABEL_98:
    }
      sub_18C90684C(a1, v14, a3);
  }
  else
  {
    int v14 = 1;
    int v48 = 1;
    if (!v12 || v8) {
      goto LABEL_98;
    }
    uint64_t v26 = 0;
    *(_WORD *)(a1 + 8) = 0;
    *(void *)a1 = 1;
    while (1)
    {
      int v27 = a2[v26];
      if (v27 != aInfinity[v26] && v27 != aInfinity_0[v26]) {
        break;
      }
      if (!a2[v26])
      {
LABEL_82:
        *(unsigned char *)(a1 + 8) = v6 | 0x40;
        return a1;
      }
      ++v26;
    }
    for (uint64_t i = 0; ; ++i)
    {
      int v40 = a2[i];
      if (v40 != aInf[i] && v40 != aInf_0[i]) {
        break;
      }
      if (!a2[i]) {
        goto LABEL_82;
      }
    }
    *(unsigned char *)(a1 + 8) = v6 | 0x20;
    int v45 = *a2;
    if ((v45 | 0x20) == 0x73)
    {
      v6 |= 0x10u;
      *(unsigned char *)(a1 + 8) = v6;
      int v46 = *++a2;
      int v45 = v46;
    }
    else
    {
      v6 |= 0x20u;
    }
    if ((v45 | 0x20) != 0x6E || (a2[1] | 0x20) != 0x61 || (a2[2] | 0x20) != 0x6E) {
      goto LABEL_97;
    }
    for (uint64_t j = a2 + 3; ; ++j)
    {
      int v47 = *j;
      if (v47 != 48) {
        break;
      }
    }
    if (*j)
    {
      if ((v47 - 58) >= 0xFFFFFFF6)
      {
        int v9 = j - 1;
        do
        {
          ++v7;
          int v47 = v9[2];
          ++v9;
        }
        while ((v47 - 58) > 0xFFFFFFF5);
      }
      else
      {
        int v9 = 0;
      }
      if (!v47 && (v7 < *(_DWORD *)a3 || !*(unsigned char *)(a3 + 24) && v7 <= *(_DWORD *)a3))
      {
        int v28 = 0;
        goto LABEL_55;
      }
      goto LABEL_97;
    }
  }
  return a1;
}

unsigned char *sub_18C906460(unsigned char *result, int *a2, char *a3, int a4, int *a5, int *a6)
{
  int v6 = *a2;
  int v7 = a4 - *a2;
  if (v7 >= 1)
  {
    *((_DWORD *)result + 1) += v7;
    *a6 |= 0x800u;
    int v8 = *a5;
    if (*a5 <= 1)
    {
      if (v6 < 0)
      {
        if (v8 <= 0)
        {
          if (a4 < 1)
          {
LABEL_51:
            if (!v8) {
              goto LABEL_34;
            }
          }
          else
          {
            int v35 = a4 + 1;
            while (!*a3)
            {
              ++a3;
              if (--v35 <= 1) {
                goto LABEL_51;
              }
            }
            *a5 = 1;
          }
        }
LABEL_33:
        *a6 |= 0x20u;
LABEL_34:
        result[9] = 0;
        *(_DWORD *)double result = 1;
        return result;
      }
    }
    else
    {
      int v8 = 1;
      *a5 = 1;
      if (v6 < 0) {
        goto LABEL_33;
      }
    }
    if (v7 < 2)
    {
      int v14 = 0;
    }
    else
    {
      int v13 = a4 - 1 - v6;
      do
      {
        if (*a3)
        {
          int v8 = 1;
          *a5 = 1;
        }
        ++a3;
        --v13;
      }
      while (v13);
      int v14 = v6 - (a4 - 1);
    }
    unsigned int v15 = v14 + v7;
    unsigned int v16 = *a3;
    unsigned int v17 = v15 - 1;
    if (v15 != 1)
    {
      unsigned int v18 = (v16 >> v17) * dword_18CA91A34[v17];
      if ((v18 >> 17) * dword_18CA919D8[v17] != v16) {
        int v8 = 1;
      }
      unsigned int v19 = (6554 * (v18 >> 17)) >> 16;
      *a5 = v8 + byte_18CA91AFD[(v18 >> 17) + -10 * v19];
      int v20 = *a2;
      int v21 = *a2 - 1;
      if (*a2 >= 1)
      {
        *(_DWORD *)double result = v20;
        result[9] = v19;
        if ((int)(v20 - (1 - v15)) >= 1)
        {
          int v22 = dword_18CA91A34[v15];
          int v23 = dword_18CA919D8[v15];
          unint64_t v24 = result + 10;
          int v25 = (unsigned __int8 *)(a3 + 1);
          int v26 = dword_18CA919D8[1 - v15];
          do
          {
            unsigned int v27 = *v25++;
            unsigned int v28 = ((v27 >> v15) * v22) >> 17;
            *(v24 - 1) = v19 + (v27 - v28 * v23) * v26;
            BOOL v29 = __OFSUB__(v21--, 1);
            if (v21 < 0 != v29) {
              break;
            }
            *v24++ = v28;
            LOBYTE(v19) = v28;
          }
          while ((int)(v15 + v21) >= 1);
        }
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    if (v16 < 5)
    {
      if (!*a3) {
        goto LABEL_38;
      }
      int v30 = 3;
    }
    else
    {
      int v30 = v8 + 5;
      if (v16 != 5) {
        int v30 = 7;
      }
    }
    *a5 = v30;
LABEL_38:
    int v31 = *a2;
    if (*a2 >= 1)
    {
      *(_DWORD *)double result = v31;
      result += 9;
      unsigned int v32 = v31 + 1;
      int v33 = a3 + 1;
      do
      {
        char v34 = *v33++;
        *result++ = v34;
        --v32;
      }
      while (v32 > 1);
      goto LABEL_43;
    }
LABEL_42:
    result[9] = 0;
    *(_DWORD *)double result = 1;
LABEL_43:
    if (!*a5) {
      return result;
    }
    int v12 = *a6 | 0x20;
    goto LABEL_45;
  }
  int v9 = result + 9;
  if (result + 9 != a3)
  {
    if (a4 >= 1)
    {
      unsigned int v10 = a4 + 1;
      do
      {
        char v11 = *a3++;
        *v9++ = v11;
        --v10;
      }
      while (v10 > 1);
    }
    *(_DWORD *)double result = a4;
  }
  if (*a5)
  {
    int v12 = *a6 | 0x820;
LABEL_45:
    *a6 = v12;
  }
  return result;
}

void sub_18C9066E0(unsigned int *a1, uint64_t a2, int *a3, int *a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  signed int v9 = a1[1];
  signed int v10 = v8 - *a1;
  if (v9 <= v10 + 1)
  {
    int v20 = 0;
    if (v9 > v10)
    {
      BYTE1(v20) = 1;
      v19[0] = 1;
      v19[1] = v8;
      int v17 = sub_18C90A814((uint64_t)a1, (uint64_t)v19, 1);
      if (v17 == 0x80000000)
      {
        int v18 = *a4 | 0x10;
LABEL_17:
        *a4 = v18;
        return;
      }
      int v11 = *a3;
      if (v17 || (v11 & 0x80000000) == 0) {
        goto LABEL_3;
      }
      sub_18C90D2CC((uint64_t)a1, (_DWORD *)a2, v11, a4);
    }
    sub_18C90D748(a1, a2, a3, a4);
    return;
  }
  int v11 = *a3;
LABEL_3:
  if (v11) {
    sub_18C90D2CC((uint64_t)a1, (_DWORD *)a2, v11, a4);
  }
  int v12 = a1[1];
  int v13 = *(_DWORD *)(a2 + 4);
  int v14 = v13 - *(_DWORD *)a2 + 1;
  int v15 = v12 - v14;
  if (v12 > v14)
  {
    uint64_t v16 = *a1;
    if (v12 > v13 - (int)v16 + 1)
    {
      sub_18C90D63C(a1, a2, a4);
      return;
    }
    if (*(unsigned char *)(a2 + 24))
    {
      if (v16 != 1 || *((unsigned char *)a1 + 9) || (a1[2] & 0x70) != 0)
      {
        *a1 = sub_18C90B2C8((unsigned char *)a1 + 9, v16, v12 - v14);
        int v12 = a1[1];
      }
      a1[1] = v12 - v15;
      int v18 = *a4 | 0x400;
      goto LABEL_17;
    }
  }
}

uint64_t sub_18C90684C(uint64_t a1, int a2, uint64_t a3)
{
  if ((a2 & 0xDD) != 0)
  {
    if ((a2 & 0x40000000) != 0)
    {
      a2 &= ~0x40000000u;
    }
    else
    {
      *(void *)a1 = 1;
      *(_WORD *)(a1 + 8) = 32;
    }
  }
  return uprv_decContextSetStatus(a3, a2);
}

int *uprv_decNumberAbs(int *a1, uint64_t a2, int *a3)
{
  v8[2] = 0;
  int v5 = *(_DWORD *)(a2 + 4);
  int v7 = 0;
  v8[0] = 1;
  v8[1] = v5;
  sub_18C9068F8(a1, v8, a2, a3, *(unsigned char *)(a2 + 8) & 0x80, &v7);
  if (v7) {
    sub_18C90684C((uint64_t)a1, v7, (uint64_t)a3);
  }
  return a1;
}

int *sub_18C9068F8(int *a1, int *a2, uint64_t a3, int *a4, char a5, int *a6)
{
  int v8 = (int *)a3;
  signed int v9 = a2;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v11 = *((unsigned char *)a2 + 8);
  unsigned __int8 v12 = *(unsigned char *)(a3 + 8);
  unsigned __int8 v13 = v12 ^ a5;
  char v14 = v12 ^ a5 ^ v11;
  if (((v12 | v11) & 0x70) != 0)
  {
    if (((v12 | v11) & 0x30) != 0)
    {
      sub_18C909E68((uint64_t)a1, (uint64_t)a2, a3, a4, a6);
      return a1;
    }
    if ((a2[2] & 0x40) == 0
      || (unsigned __int8 v13 = *((unsigned char *)a2 + 8), (*(unsigned char *)(a3 + 8) & 0x40) == 0)
      || (((v12 ^ a5) ^ v11) & 0x80) == 0)
    {
      *(void *)a1 = 1;
      *((_WORD *)a1 + 4) = v13 & 0x80 | 0x40;
      return a1;
    }
    int v37 = *a6 | 0x80;
LABEL_111:
    *a6 = v37;
    return a1;
  }
  int v16 = *a4;
  int v69 = 0;
  memset(v70, 0, 92);
  int v17 = *((unsigned __int8 *)a2 + 9);
  if (!*((unsigned char *)a2 + 9) && (v11 & 0x70) == 0 && *a2 == 1)
  {
    char v31 = v13 ^ v11;
    int v32 = a2[1];
    int v69 = 0;
    *((unsigned char *)a1 + 8) = v12;
    a1[1] = *(_DWORD *)(a3 + 4);
    sub_18C906460(a1, a4, (char *)(a3 + 9), *(_DWORD *)a3, &v69, a6);
    char v33 = *((unsigned char *)a1 + 8) ^ a5;
    *((unsigned char *)a1 + 8) = v33;
    int v34 = v32 - a1[1];
    int v35 = (char *)a1 + 9;
    if (!*((unsigned char *)a1 + 9) && *a1 == 1 && (v33 & 0x70) == 0)
    {
      if (v34 < 0) {
        a1[1] = v32;
      }
      if ((v31 & 0x80) == 0) {
        goto LABEL_42;
      }
      if (a4[3] != 6)
      {
        *((unsigned char *)a1 + 8) = 0;
        goto LABEL_42;
      }
      char v30 = 0x80;
      goto LABEL_23;
    }
    if ((v34 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    uint64_t v36 = *a1;
    if ((int)v36 - v34 > *a4)
    {
      int v34 = v36 - *a4;
      *a6 |= 0x800u;
      uint64_t v36 = *a1;
    }
LABEL_41:
    int v39 = sub_18C90B2C8(v35, v36, -v34);
    unsigned int v40 = a1[1] + v34;
    *a1 = v39;
    a1[1] = v40;
    goto LABEL_42;
  }
  int v18 = *(unsigned __int8 *)(a3 + 9);
  if (!*(unsigned char *)(a3 + 9) && (v12 & 0x70) == 0 && *(_DWORD *)a3 == 1)
  {
    int v38 = *(_DWORD *)(a3 + 4);
    int v69 = 0;
    *((unsigned char *)a1 + 8) = v11;
    a1[1] = a2[1];
    sub_18C906460(a1, a4, (char *)a2 + 9, *a2, &v69, a6);
    int v34 = v38 - a1[1];
    if (v34 >= 0) {
      goto LABEL_42;
    }
    uint64_t v36 = *a1;
    if ((int)v36 - v34 > *a4)
    {
      int v34 = v36 - *a4;
      *a6 |= 0x800u;
      uint64_t v36 = *a1;
    }
    int v35 = (char *)a1 + 9;
    goto LABEL_41;
  }
  int v19 = *(_DWORD *)(a3 + 4);
  int v20 = a2[1];
  int v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 >= 0)
    {
      uint64_t v22 = v21;
    }
    else
    {
      unsigned __int8 v11 = v13;
      uint64_t v22 = (v20 - v19);
    }
    if (v21 < 0) {
      int v23 = a2;
    }
    else {
      int v23 = (int *)a3;
    }
    if (v21 < 0) {
      signed int v9 = (int *)a3;
    }
    int v24 = *v23;
    int v25 = *v9;
    if (*v23 + (int)v22 > v16 + *v9 + 1)
    {
      int v26 = v16 - v24;
      if (v14 < 0) {
        int v27 = -1;
      }
      else {
        int v27 = 1;
      }
      int v69 = v27;
      *((unsigned char *)a1 + 8) = *((unsigned char *)v23 + 8);
      a1[1] = v23[1];
      sub_18C906460(a1, a4, (char *)v23 + 9, v24, &v69, a6);
      if (v26 >= 1)
      {
        int v28 = sub_18C90B2C8((unsigned char *)a1 + 9, *a1, v26);
        unsigned int v29 = a1[1] - v26;
        *a1 = v28;
        a1[1] = v29;
      }
      if (v21 < 0) {
        goto LABEL_42;
      }
      char v30 = *((unsigned char *)a1 + 8) ^ a5;
LABEL_23:
      *((unsigned char *)a1 + 8) = v30;
LABEL_42:
      sub_18C9066E0((unsigned int *)a1, (uint64_t)a4, &v69, a6);
      return a1;
    }
    uint64_t v44 = v22 + 1;
    if (v22 <= 0x30) {
      LODWORD(v44) = byte_18CA91A00[v44];
    }
    int v42 = v44 - 1;
    int v43 = dword_18CA919D8[(int)v22 - ((int)v44 - 1)];
    int v8 = v23;
LABEL_52:
    if (v14 < 0) {
      int v45 = -v43;
    }
    else {
      int v45 = v43;
    }
    int v46 = v24 + v22;
    if (v25 > v46) {
      int v46 = v25;
    }
    int v47 = (char *)a1 + 9;
    char v67 = v14;
    if (v46 >= v16 || v42 >= 1 && v8 == a1)
    {
      if (v46 <= 49) {
        int v46 = byte_18CA91A00[v46];
      }
      if (v46 < 0x5C)
      {
        unsigned int v68 = 0;
        int v49 = (char *)v70;
      }
      else
      {
        int v66 = v45;
        int v48 = (char *)uprv_malloc((v46 + 1));
        if (!v48)
        {
          int v37 = *a6 | 0x10;
          goto LABEL_111;
        }
        int v49 = v48;
        int v25 = *v9;
        unsigned int v68 = v48;
        int v45 = v66;
      }
    }
    else
    {
      unsigned int v68 = 0;
      int v49 = (char *)a1 + 9;
    }
    *((unsigned char *)a1 + 8) = v11 & 0x80;
    a1[1] = v9[1];
    if (v25 <= 49) {
      int v25 = byte_18CA91A00[v25];
    }
    int v52 = *v8;
    uint64_t v51 = (unsigned __int8 *)v8 + 9;
    int v50 = v52;
    if (v52 <= 49) {
      int v50 = byte_18CA91A00[v50];
    }
    int v53 = sub_18C90CF10((char *)v9 + 9, v25, v51, v50, v42, v49, v45);
    int v54 = v53;
    *a1 = v53;
    if (v53 < 0)
    {
      int v54 = -v53;
      *a1 = -v53;
      *((unsigned char *)a1 + 8) ^= 0x80u;
    }
    int v69 = 0;
    if (v49 == v47)
    {
LABEL_86:
      if (v54 <= 49)
      {
        if (!v54)
        {
LABEL_95:
          *a1 = v54;
          sub_18C9066E0((unsigned int *)a1, (uint64_t)a4, &v69, a6);
          if (!*((unsigned char *)a1 + 9) && *a1 == 1 && v67 < 0 && (a1[2] & 0x70) == 0 && (*(unsigned char *)a6 & 0x20) == 0) {
            *((unsigned char *)a1 + 8) = a1[2] & 0x7F | ((a4[3] == 6) << 7);
          }
          if (v68) {
            uprv_free(v68);
          }
          return a1;
        }
        int v54 = byte_18CA91A00[v54];
      }
      unsigned int v57 = &v47[v54 - 1];
      do
      {
        if (*v57) {
          BOOL v58 = 1;
        }
        else {
          BOOL v58 = v54 == 1;
        }
        if (v58) {
          break;
        }
        --v54;
        --v57;
      }
      while (v57 >= v47);
      goto LABEL_95;
    }
    if (v54 <= v16)
    {
LABEL_85:
      sub_18C906460(a1, a4, v49, v54, &v69, a6);
      int v54 = *a1;
      goto LABEL_86;
    }
    if (v54 <= 0x31)
    {
      if (!v54)
      {
LABEL_84:
        *a1 = v54;
        goto LABEL_85;
      }
      int v54 = byte_18CA91A00[v54];
    }
    unsigned int v55 = &v49[v54 - 1];
    do
    {
      if (*v55) {
        BOOL v56 = 1;
      }
      else {
        BOOL v56 = v54 == 1;
      }
      if (v56) {
        break;
      }
      --v54;
      --v55;
    }
    while (v55 >= v49);
    goto LABEL_84;
  }
  int v24 = *(_DWORD *)a3;
  if (*(int *)a3 > 1 || v19 < a4[2] || v19 > a4[1] - v16 + 1 || v24 > v16 || (uint64_t v41 = *a2, (int)v41 > v16))
  {
LABEL_48:
    int v42 = 0;
    LODWORD(v22) = 0;
    int v25 = *a2;
    int v43 = 1;
    goto LABEL_52;
  }
  if (v14 < 0)
  {
    char v61 = v17 - v18;
    if (v17 - v18 < 1) {
      goto LABEL_48;
    }
    if (a1 != a2) {
      uprv_decNumberCopy((uint64_t)a1, (unsigned int *)a2);
    }
    *((unsigned char *)a1 + 9) = v61;
    uint64_t v62 = (char *)a1 + 9;
    int v63 = *a1;
    if (*a1 <= 49)
    {
      if (!v63)
      {
LABEL_133:
        *a1 = v63;
        return a1;
      }
      int v63 = byte_18CA91A00[v63];
    }
    char v64 = &v62[v63 - 1];
    do
    {
      if (*v64) {
        BOOL v65 = 1;
      }
      else {
        BOOL v65 = v63 == 1;
      }
      if (v65) {
        break;
      }
      --v63;
      --v64;
    }
    while (v64 >= v62);
    goto LABEL_133;
  }
  int v60 = v18 + v17;
  if ((v18 + v17) > 9 || (int)v41 <= 0 && v60 >= dword_18CA919D8[v41]) {
    goto LABEL_48;
  }
  if (a1 != a2) {
    uprv_decNumberCopy((uint64_t)a1, (unsigned int *)a2);
  }
  *((unsigned char *)a1 + 9) = v60;
  return a1;
}

int *uprv_decNumberAdd(int *a1, int *a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C9068F8(a1, a2, a3, a4, 0, &v7);
  if (v7) {
    sub_18C90684C((uint64_t)a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t uprv_decNumberAnd(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (*(_DWORD *)(a2 + 4)
    || *(unsigned __int8 *)(a2 + 8) > 0xFu
    || *(_DWORD *)(a3 + 4)
    || *(unsigned __int8 *)(a3 + 8) >= 0x10u)
  {
LABEL_31:
    *(void *)a1 = 1;
    *(_WORD *)(a1 + 8) = 32;
    uprv_decContextSetStatus((uint64_t)a4, 128);
    return a1;
  }
  unsigned int v5 = *(_DWORD *)a2;
  if (*(int *)a2 <= 49) {
    unsigned int v5 = byte_18CA91A00[v5];
  }
  unsigned int v6 = *(_DWORD *)a3;
  if (*(int *)a3 <= 49) {
    unsigned int v6 = byte_18CA91A00[v6];
  }
  unint64_t v7 = a1 + 9;
  unsigned int v8 = *a4;
  if ((int)*a4 <= 49) {
    unsigned int v8 = byte_18CA91A00[v8];
  }
  unint64_t v9 = v7 + v8 - 1;
  int v10 = a1 + 9;
  if (v7 <= v9)
  {
    unint64_t v11 = a2 + 9 + v5 - 1;
    unint64_t v12 = a3 + 9 + v6 - 1;
    uint64_t v13 = 9;
    do
    {
      unsigned int v14 = a2 + v13 <= v11 ? *(unsigned __int8 *)(a2 + v13) : 0;
      unsigned int v15 = a3 + v13 <= v12 ? *(unsigned __int8 *)(a3 + v13) : 0;
      *(unsigned char *)(a1 + v13) = 0;
      if (v15 | v14)
      {
        *(unsigned char *)(a1 + v13) = v14 & v15 & 1;
        if (((v15 - 10 * ((429496730 * (unint64_t)v15) >> 32)) | (v14 - 10 * ((429496730 * (unint64_t)v14) >> 32))) >= 2) {
          goto LABEL_31;
        }
      }
      int v10 = a1 + ++v13;
    }
    while (a1 + v13 <= v9);
  }
  int v16 = v10 - v7;
  if (v10 - (int)v7 >= 1)
  {
    int v17 = (unsigned char *)(v7 + (v16 - 1));
    int v18 = v10 - a1 - 10;
    do
    {
      if (*v17) {
        BOOL v19 = 1;
      }
      else {
        BOOL v19 = v18 == 0;
      }
      if (v19) {
        break;
      }
      --v17;
      --v18;
    }
    while ((unint64_t)v17 >= v7);
    int v16 = v18 + 1;
  }
  *(_DWORD *)a1 = v16;
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 0;
  return a1;
}

uint64_t uprv_decNumberCompare(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C90723C(a1, a2, a3, a4, 1, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t sub_18C90723C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int a5, int *a6)
{
  unsigned __int8 v12 = *(unsigned char *)(a2 + 8);
  if (a5 == 4)
  {
    unsigned __int8 v13 = *(unsigned char *)(a3 + 8);
    if ((*(unsigned char *)(a2 + 8) & 0x80) != 0)
    {
      if ((*(unsigned char *)(a3 + 8) & 0x80) == 0)
      {
        int v14 = -1;
LABEL_63:
        *(unsigned char *)(a1 + 8) = 0;
        int v20 = (unsigned char *)(a1 + 8);
        *(void *)a1 = 1;
        int v21 = (unsigned char *)(a1 + 9);
LABEL_64:
        *int v21 = 1;
        if (v14 < 0) {
          *int v20 = 0x80;
        }
        return a1;
      }
    }
    else if ((*(unsigned char *)(a3 + 8) & 0x80) != 0)
    {
      int v14 = 1;
      goto LABEL_63;
    }
  }
  else
  {
    unsigned __int8 v13 = *(unsigned char *)(a3 + 8);
  }
  if (((v13 | v12) & 0x30) == 0)
  {
    int v14 = sub_18C90A814(a2, a3, (a5 - 7) < 2);
    if (v14 == 0x80000000)
    {
      *a6 |= 0x10u;
      return a1;
    }
    goto LABEL_39;
  }
  if (a5 == 1)
  {
LABEL_10:
    sub_18C909E68(a1, a2, a3, a4, a6);
    return a1;
  }
  if (a5 == 6)
  {
    *a6 |= 0x40000080u;
    goto LABEL_10;
  }
  if (a5 != 4)
  {
    if (((v13 | v12) & 0x10) == 0 && ((*(unsigned char *)(a2 + 8) & 0x30) == 0 || (v13 & 0x30) == 0))
    {
      if ((*(unsigned char *)(a2 + 8) & 0x20) != 0) {
        int v14 = -1;
      }
      else {
        int v14 = 1;
      }
      int v36 = 0;
LABEL_72:
      if (v14 <= 0) {
        uint64_t v28 = a3;
      }
      else {
        uint64_t v28 = a2;
      }
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(v28 + 8);
      int v29 = *(_DWORD *)v28;
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(v28 + 4);
      sub_18C906460((unsigned char *)a1, a4, (char *)(v28 + 9), v29, &v36, a6);
      sub_18C9066E0((unsigned int *)a1, (uint64_t)a4, &v36, a6);
      return a1;
    }
    goto LABEL_10;
  }
  if ((*(unsigned char *)(a2 + 8) & 0x30) == 0)
  {
LABEL_20:
    int v15 = -1;
    goto LABEL_36;
  }
  if ((v13 & 0x30) != 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 0x10) != 0 && (v13 & 0x20) != 0) {
      goto LABEL_20;
    }
    if ((*(unsigned char *)(a2 + 8) & 0x20) == 0 || (v13 & 0x10) == 0)
    {
      unsigned int v16 = *(_DWORD *)a2;
      if (*(int *)a2 <= 49) {
        unsigned int v16 = byte_18CA91A00[v16];
      }
      unsigned int v17 = *(_DWORD *)a3;
      if (*(int *)a3 <= 49) {
        unsigned int v17 = byte_18CA91A00[v17];
      }
      if (v16 <= v17)
      {
        if (v16 >= v17)
        {
          uint64_t v31 = v16 + 8;
          int v32 = (unsigned __int8 *)(a2 + v31);
          char v33 = (unsigned __int8 *)(a3 + v31);
          int v15 = -1;
          while ((unint64_t)v32 >= a2 + 9)
          {
            unsigned int v34 = *v32;
            unsigned int v35 = *v33;
            if (v34 > v35) {
              goto LABEL_35;
            }
            --v32;
            --v33;
            if (v34 < v35) {
              goto LABEL_36;
            }
          }
          int v15 = 0;
          goto LABEL_36;
        }
        goto LABEL_20;
      }
    }
  }
LABEL_35:
  int v15 = 1;
LABEL_36:
  if ((v12 & 0x80u) == 0) {
    int v14 = v15;
  }
  else {
    int v14 = -v15;
  }
LABEL_39:
  switch(a5)
  {
    case 1:
    case 4:
    case 6:
      if (a5 == 4 && !v14)
      {
        int v18 = *(_DWORD *)(a2 + 4);
        int v19 = *(_DWORD *)(a3 + 4);
        if (v18 == v19)
        {
          *(_WORD *)(a1 + 8) = 0;
          *(void *)a1 = 1;
          return a1;
        }
        if (v18 < v19) {
          int v27 = -1;
        }
        else {
          int v27 = 1;
        }
        if (*(char *)(a2 + 8) >= 0) {
          int v14 = v27;
        }
        else {
          int v14 = -v27;
        }
        goto LABEL_63;
      }
      *(_WORD *)(a1 + 8) = 0;
      int v20 = (unsigned char *)(a1 + 8);
      *(void *)a1 = 1;
      int v21 = (unsigned char *)(a1 + 9);
      if (v14) {
        goto LABEL_64;
      }
      break;
    case 5:
      return a1;
    default:
      int v36 = 0;
      if (!v14)
      {
        char v22 = *(unsigned char *)(a2 + 8);
        char v23 = *(unsigned char *)(a3 + 8);
        if ((v22 & 0x80) == (v23 & 0x80))
        {
          char v24 = v23 & v22;
          if (*(_DWORD *)(a2 + 4) > *(_DWORD *)(a3 + 4)) {
            int v25 = 1;
          }
          else {
            int v25 = -1;
          }
          if (*(_DWORD *)(a2 + 4) <= *(_DWORD *)(a3 + 4)) {
            int v26 = 1;
          }
          else {
            int v26 = -1;
          }
          if (v24 < 0) {
            int v14 = v26;
          }
          else {
            int v14 = v25;
          }
        }
        else if ((*(unsigned char *)(a2 + 8) & 0x80) != 0)
        {
          int v14 = -1;
        }
        else
        {
          int v14 = 1;
        }
      }
      if (a5 == 8 || a5 == 3) {
        int v14 = -v14;
      }
      goto LABEL_72;
  }
  return a1;
}

uint64_t uprv_decNumberCompareSignal(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C90723C(a1, a2, a3, a4, 6, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t uprv_decNumberCompareTotal(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C90723C(a1, a2, a3, a4, 4, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t uprv_decNumberCompareTotalMag(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unsigned int v6 = (unsigned int *)a2;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v18 = 0;
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  if ((*(char *)(a2 + 8) & 0x80000000) == 0)
  {
    unsigned int v8 = 0;
    goto LABEL_10;
  }
  int v9 = *(_DWORD *)a2;
  if (*(int *)a2 > 49) {
    goto LABEL_6;
  }
  if ((unint64_t)(v9 - 38) <= 0xB)
  {
    int v9 = byte_18CA91A00[v9];
LABEL_6:
    int v10 = uprv_malloc((v9 + 11));
    unsigned int v8 = v10;
    if (!v10)
    {
      int v11 = 16;
LABEL_25:
      sub_18C90684C(a1, v11, (uint64_t)a4);
      return a1;
    }
    goto LABEL_9;
  }
  unsigned int v8 = 0;
  int v10 = v20;
LABEL_9:
  uint64_t v12 = uprv_decNumberCopy((uint64_t)v10, v6);
  *(unsigned char *)(v12 + 8) &= ~0x80u;
  unsigned int v6 = (unsigned int *)v12;
LABEL_10:
  if ((*(char *)(a3 + 8) & 0x80000000) == 0)
  {
    unsigned __int8 v13 = 0;
    goto LABEL_20;
  }
  int v14 = *(_DWORD *)a3;
  if (*(int *)a3 <= 49)
  {
    if ((unint64_t)(v14 - 38) > 0xB)
    {
      unsigned __int8 v13 = 0;
      int v15 = v19;
      goto LABEL_19;
    }
    int v14 = byte_18CA91A00[v14];
  }
  int v15 = uprv_malloc((v14 + 11));
  unsigned __int8 v13 = v15;
  if (v15)
  {
LABEL_19:
    uint64_t v16 = uprv_decNumberCopy((uint64_t)v15, (unsigned int *)a3);
    *(unsigned char *)(v16 + 8) &= ~0x80u;
    a3 = v16;
LABEL_20:
    sub_18C90723C(a1, (uint64_t)v6, a3, a4, 4, &v18);
    if (!v8) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  int v18 = 16;
  if (v8) {
LABEL_21:
  }
    uprv_free(v8);
LABEL_22:
  if (v13) {
    uprv_free(v13);
  }
  int v11 = v18;
  if (v18) {
    goto LABEL_25;
  }
  return a1;
}

uint64_t uprv_decNumberCopy(uint64_t result, unsigned int *a2)
{
  if ((unsigned int *)result != a2)
  {
    *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
    *(void *)double result = *(void *)a2;
    *(unsigned char *)(result + 9) = *((unsigned char *)a2 + 9);
    uint64_t v2 = *a2;
    if ((int)v2 >= 2)
    {
      if (v2 <= 0x31) {
        LODWORD(v2) = byte_18CA91A00[v2];
      }
      unint64_t v3 = (char *)a2 + 10;
      if ((char *)a2 + 10 < (char *)a2 + v2 + 9)
      {
        unsigned int v4 = (unsigned char *)(result + 10);
        uint64_t v5 = v2 - 1;
        do
        {
          char v6 = *v3++;
          *v4++ = v6;
          --v5;
        }
        while (v5);
      }
    }
  }
  return result;
}

uint64_t uprv_decNumberDivide(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C9078D8(a1, a2, a3, a4, 128, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t sub_18C9078D8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int a5, int *a6)
{
  uint64_t v9 = a1;
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  memset(v139, 0, 47);
  memset(v138, 0, 73);
  int v137 = 0;
  unsigned __int8 v10 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v11 = *(unsigned char *)(a3 + 8);
  char v12 = (v11 ^ v10) & 0x80;
  if (((v11 | v10) & 0x70) != 0)
  {
    if (((v11 | v10) & 0x30) != 0)
    {
      sub_18C909E68(a1, a2, a3, a4, a6);
      return v9;
    }
    if ((*(unsigned char *)(a2 + 8) & 0x40) == 0)
    {
      if ((a5 & 0x50) == 0)
      {
        *(void *)a1 = 1;
        *(unsigned char *)(a1 + 9) = 0;
        *(unsigned char *)(a1 + 8) = v12;
        if ((a5 & 0x80) != 0)
        {
          *(_DWORD *)(a1 + 4) = a4[2] - *a4 + 1;
          *a6 |= 0x400u;
        }
        goto LABEL_87;
      }
      *(unsigned char *)(a1 + 8) = v10;
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
      char v24 = (char *)(a2 + 9);
      int v16 = *(_DWORD *)a2;
      int v25 = a4;
LABEL_18:
      sub_18C906460((unsigned char *)a1, v25, v24, v16, &v137, a6);
LABEL_87:
      BOOL v58 = (unsigned int *)v9;
LABEL_88:
      sub_18C9066E0(v58, (uint64_t)a4, &v137, a6);
      return v9;
    }
    if (!(a5 & 0x50 | v11 & 0x40))
    {
      *(void *)a1 = 1;
      *(unsigned char *)(a1 + 9) = 0;
      goto LABEL_26;
    }
    int v26 = *a6;
LABEL_63:
    int v48 = v26 | 0x80;
LABEL_164:
    *a6 = v48;
    return v9;
  }
  int v13 = *a4;
  int v14 = (unsigned __int8 *)(a3 + 9);
  if (!*(unsigned char *)(a3 + 9) && (*(unsigned char *)(a3 + 8) & 0x70) == 0 && *(_DWORD *)a3 == 1)
  {
    if (!*(unsigned char *)(a2 + 9) && (*(unsigned char *)(a2 + 8) & 0x70) == 0 && *(_DWORD *)a2 == 1)
    {
      *(_WORD *)(a1 + 8) = 0;
      *(void *)a1 = 1;
      int v48 = *a6 | 8;
      goto LABEL_164;
    }
    *(_WORD *)(a1 + 8) = 0;
    *(void *)a1 = 1;
    int v26 = *a6;
    if ((a5 & 0x50) == 0)
    {
      *a6 = v26 | 2;
LABEL_26:
      *(unsigned char *)(a1 + 8) = v12 | 0x40;
      return v9;
    }
    goto LABEL_63;
  }
  unint64_t v15 = a2 + 9;
  int v16 = *(_DWORD *)a2;
  if (!*(unsigned char *)(a2 + 9) && (*(unsigned char *)(a2 + 8) & 0x70) == 0 && v16 == 1)
  {
    if ((a5 & 0x80) != 0)
    {
      int v91 = *(_DWORD *)(a2 + 4) - *(_DWORD *)(a3 + 4);
      BOOL v58 = (unsigned int *)uprv_decNumberCopy(a1, (unsigned int *)a2);
      *(unsigned char *)(v9 + 8) = v12;
      *(_DWORD *)(v9 + 4) = v91;
      goto LABEL_88;
    }
    if ((a5 & 0x20) == 0)
    {
      int v27 = *(_DWORD *)(a3 + 4);
      uprv_decNumberCopy(a1, (unsigned int *)a2);
      if (v27 < *(_DWORD *)(v9 + 4)) {
        *(_DWORD *)(v9 + 4) = v27;
      }
      return v9;
    }
LABEL_47:
    *(void *)a1 = 1;
    *(unsigned char *)(a1 + 9) = 0;
    *(unsigned char *)(a1 + 8) = v12;
    return v9;
  }
  int v17 = *(_DWORD *)(a2 + 4);
  int v18 = *(_DWORD *)a3;
  int v19 = *(_DWORD *)(a3 + 4);
  int v20 = v16 + v17 - (v19 + *(_DWORD *)a3);
  char v126 = a5;
  if (a5 != 128 && v20 < 0)
  {
    if ((a5 & 0x20) != 0) {
      goto LABEL_47;
    }
    if (v17 <= v19 && ((a5 & 0x40) != 0 || v20 != -1))
    {
      *(unsigned char *)(a1 + 8) = v10;
      *(_DWORD *)(a1 + 4) = v17;
      int v25 = a4;
      char v24 = (char *)v15;
      goto LABEL_18;
    }
  }
  uint64_t v21 = v13 + 1;
  if (v13 >= 49)
  {
    size_t v22 = v21;
  }
  else
  {
    size_t v22 = byte_18CA91A00[v21];
    if ((v13 - 47) > 1)
    {
      char v23 = 0;
      size_t v128 = byte_18CA91A00[v21];
      long long v131 = v139;
      goto LABEL_36;
    }
  }
  char v23 = uprv_malloc(v22);
  if (!v23)
  {
    int v48 = *a6 | 0x10;
    goto LABEL_164;
  }
  size_t v128 = v22;
  long long v131 = v23;
  int v18 = *(_DWORD *)a3;
  int v16 = *(_DWORD *)a2;
LABEL_36:
  int v28 = v18 + v13;
  int v29 = v18 + v13 - 1;
  if (v16 >= v28) {
    int v30 = v16;
  }
  else {
    int v30 = v29;
  }
  if (v30 <= 49) {
    int v30 = byte_18CA91A00[v30];
  }
  int v125 = v13;
  long long v121 = a6;
  long long v122 = (int *)a3;
  long long v120 = v23;
  char v116 = v12;
  uint64_t v117 = (uint64_t)a4;
  uint64_t v31 = (v30 + 3);
  if (v126 < 0) {
    uint64_t v32 = (v30 + 2);
  }
  else {
    uint64_t v32 = v31;
  }
  if (v32 < 0x49)
  {
    int64x2_t v118 = 0;
    uint64_t v119 = v9;
    unsigned int v34 = (char *)v138;
LABEL_49:
    unsigned int v35 = &v34[v32 - 1];
    if (v16 <= 49) {
      int v16 = byte_18CA91A00[v16];
    }
    unint64_t v36 = (unint64_t)&v34[v32 - 1];
    if (v15 + v16 - 1 >= v15)
    {
      uint64_t v37 = a2 + v16;
      uint64_t v38 = v37 + 7;
      if (v37 + 7 >= (unint64_t)(a2 + 8)) {
        uint64_t v38 = a2 + 8;
      }
      int v39 = &v34[v38 + v32 - v37];
      memcpy(v39 - 8, (const void *)(v38 + 1), v37 - v38 + 8);
      unint64_t v36 = (unint64_t)(v39 - 9);
    }
    if (v36 >= (unint64_t)v34)
    {
      unsigned int v40 = (char *)(v36 - 1);
      if (v36 - 1 >= (unint64_t)(v34 - 1)) {
        unsigned int v40 = v34 - 1;
      }
      bzero(v40 + 1, v36 - (void)v40);
    }
    uint64_t v41 = *v122;
    if ((int)v41 >= 50)
    {
      LODWORD(v43) = v14[v41 - 1];
      v135 = &v14[v41 - 1];
      int v44 = 10 * v43;
      uint64_t v42 = *v122;
    }
    else
    {
      uint64_t v42 = byte_18CA91A00[(int)v41];
      uint64_t v43 = v14[v42 - 1];
      v135 = &v14[v42 - 1];
      int v44 = 10 * v43;
      unsigned int v45 = *v135;
      unsigned int v46 = v45;
      int v136 = byte_18CA91A00[(int)v41];
      BOOL v47 = v41 >= 2;
      LODWORD(v41) = v136;
      if (!v47)
      {
LABEL_69:
        unsigned int v50 = *v35;
        if (v50 >= 0xA)
        {
          uint64_t v51 = &dword_18CA919E0;
          do
          {
            --v20;
            unsigned int v52 = *v51++;
          }
          while (v52 <= v50);
        }
        if (v45 >= 0xA)
        {
          int v53 = &dword_18CA919E0;
          do
          {
            ++v20;
            unsigned int v54 = *v53++;
          }
          while (v54 <= v45);
        }
        int v134 = v44;
        if (v126 < 0)
        {
          int v124 = *(_DWORD *)(a2 + 4) - v122[1];
          if (v50 < v46) {
            LODWORD(v31) = v30 + 1;
          }
          else {
            LODWORD(v31) = v30 + 2;
          }
          int v115 = 0;
          if (v50 < v46) {
            --v20;
          }
        }
        else
        {
          uint64_t v55 = v43;
          unsigned int v56 = *(_DWORD *)a2;
          if (*(int *)a2 <= 49) {
            unsigned int v56 = byte_18CA91A00[v56];
          }
          if (v20 < 0) {
            size_t v57 = -v20;
          }
          else {
            size_t v57 = 1;
          }
          sub_18C90BE04(v34, v31, v57);
          v20 += v57;
          int v115 = v31 - v57 - v56;
          if ((int)v57 >= 1) {
            bzero(&v34[v32 + ~(unint64_t)(v57 - 1)], v57);
          }
          int v124 = 0;
          uint64_t v43 = v55;
        }
        unsigned int v59 = v131;
        int v132 = v20;
        int v127 = 0;
        int v60 = 0;
        long long v129 = (unsigned __int8 *)v59 + v128 - 1;
        for (uint64_t i = (int)v31; ; --i)
        {
          unsigned __int8 v62 = 0;
          while (1)
          {
            int v63 = *v35;
            if (v35 > v34 && !*v35)
            {
              char v64 = (unsigned __int8 *)(v35 - 1);
              do
              {
                uint64_t v32 = (v32 - 1);
                BOOL v65 = v64 > (unsigned __int8 *)v34;
                int v66 = *v64--;
                int v63 = v66;
              }
              while (v65 && !v63);
              unsigned int v35 = (char *)(v64 + 1);
            }
            if (i > (int)v32) {
              break;
            }
            unsigned int v67 = v43;
            if (v32 == i)
            {
              unsigned int v68 = v35;
              for (uint64_t j = v135; ; --j)
              {
                unsigned int v70 = j >= v14 ? *j : 0;
                unsigned int v71 = *v68;
                if (v71 != v70 || v68 == v34) {
                  break;
                }
                --v68;
              }
              if (v71 < v70) {
                break;
              }
              unsigned int v67 = v134;
              if (v71 == v70)
              {
                ++v62;
                *unsigned int v34 = 0;
                uint64_t v32 = 1;
                break;
              }
            }
            unsigned int v73 = (*(v35 - 1) + 10 * v63) / v67;
            if (v73 <= 1) {
              unsigned int v73 = 1;
            }
            v62 += v73;
            uint64_t v74 = v43;
            sub_18C90CF10(&v34[i - v136], v32 - (i - v136), v14, v136, 0, &v34[i - v136], -v73);
            uint64_t v43 = v74;
          }
          unsigned int v75 = v129;
          if (v127 || v62)
          {
            *long long v129 = v62;
            if (v127)
            {
              ++v60;
              int v77 = v132;
            }
            else
            {
              unsigned int v78 = v62;
              int v79 = &dword_18CA919DC;
              int v77 = v132;
              do
              {
                ++v60;
                unsigned int v80 = *v79++;
              }
              while (v80 <= v78);
            }
            int v76 = v127 + 1;
            unsigned int v75 = v129 - 1;
            if (v60 > v125) {
              goto LABEL_144;
            }
          }
          else
          {
            int v76 = 0;
            int v77 = v132;
          }
          if (*v34 || v32 != 1) {
            break;
          }
          BOOL v82 = v126 >= 0;
          BOOL v83 = v77 > v124 || v126 >= 0;
          if (v77) {
            BOOL v82 = 0;
          }
          if ((v126 & 0x50) != 0 || !v83 || v82) {
            goto LABEL_144;
          }
LABEL_143:
          int v127 = v76;
          long long v129 = v75;
          int v132 = v77 - 1;
        }
        if (v126 < 0 || v77) {
          goto LABEL_143;
        }
LABEL_144:
        uint64_t v9 = v119;
        if (v76)
        {
          ++v75;
        }
        else
        {
          *unsigned int v75 = 0;
          int v60 = 1;
        }
        int v137 = 0;
        if (v126 < 0)
        {
          unsigned int v86 = (char *)v75;
          if (*v34 || (int)v32 >= 2) {
            int v137 = 1;
          }
        }
        else
        {
          if (v60 + v77 > v125)
          {
LABEL_149:
            int v84 = v121;
            int v85 = *v121 | 4;
LABEL_150:
            *int v84 = v85;
LABEL_160:
            uint64_t v89 = v120;
            BOOL v90 = v118;
            goto LABEL_172;
          }
          if ((v126 & 0x50) != 0)
          {
            char v87 = *(unsigned char *)(a2 + 8);
            if (!*v34 && v32 == 1)
            {
              int v88 = *(_DWORD *)(a2 + 4);
              if (v122[1] < v88) {
                int v88 = v122[1];
              }
              *(unsigned char *)(v119 + 9) = 0;
              *(_DWORD *)uint64_t v119 = 1;
              *(_DWORD *)(v119 + 4) = v88;
              *(unsigned char *)(v119 + 8) = v87 & 0x80;
              sub_18C9066E0((unsigned int *)v119, v117, &v137, v121);
              goto LABEL_160;
            }
            unsigned __int8 v95 = *v75;
            if (v115 >= v77 + v115 - *(_DWORD *)(a2 + 4) + v122[1]) {
              int v96 = v77 + v115 - *(_DWORD *)(a2 + 4) + v122[1];
            }
            else {
              int v96 = v115;
            }
            int v97 = sub_18C90BE04(v34, v32, v96);
            int v98 = v97;
            if (v97 < 1) {
              goto LABEL_188;
            }
            int v99 = &v34[v97 - 1];
            do
            {
              if (*v99) {
                BOOL v100 = 1;
              }
              else {
                BOOL v100 = v98 == 1;
              }
              if (v100) {
                break;
              }
              --v98;
              --v99;
            }
            while (v99 >= v34);
            int v101 = v98;
            if (v98 <= 49) {
LABEL_188:
            }
              int v101 = byte_18CA91A00[v98];
            int v102 = *(_DWORD *)(a2 + 4);
            if (v122[1] < v102) {
              int v102 = v122[1];
            }
            int v133 = v102;
            if ((v126 & 0x10) == 0)
            {
              unsigned int v86 = v34;
              int v60 = v98;
              uint64_t v89 = v120;
              unint64_t v92 = v121;
              uint64_t v93 = (int *)v117;
              BOOL v90 = v118;
              int v77 = v102;
              goto LABEL_171;
            }
            long long v130 = v75;
            int v103 = sub_18C90CF10(v34, v101, (unsigned __int8 *)v34, v101, 0, v34, 1);
            int v104 = *v122;
            if (*v122 <= 49) {
              int v104 = byte_18CA91A00[v104];
            }
            int v77 = v133;
            int v105 = sub_18C90D104(v34, v103, v14, v104, v122[1] - v133);
            if (v105 == 0x80000000)
            {
              int v84 = v121;
              int v85 = *v121 | 0x10;
              goto LABEL_150;
            }
            if (v103 >= 1)
            {
              int v106 = v34;
              do
              {
                char v107 = *v106;
                *int v106 = *v106 >> 1;
                if (v107) {
                  *(v106 - 1) += 5;
                }
                ++v106;
              }
              while (v106 < &v34[v103]);
            }
            if (v105 > 0 || (v95 & (v105 == 0)) != 0)
            {
              unint64_t v108 = v130;
              if (v60 == v125)
              {
                if (v125 < 2)
                {
                  unsigned int v109 = v130;
LABEL_212:
                  if (dword_18CA919D8[v125] - 1 == *v109) {
                    goto LABEL_149;
                  }
                }
                else
                {
                  unsigned int v109 = &v130[v125 - 2 + 1];
                  int v110 = v125 + 1;
                  while (*v108 == 9)
                  {
                    ++v108;
                    if (--v110 <= 2)
                    {
                      int v125 = 1;
                      goto LABEL_212;
                    }
                  }
                }
              }
              int v111 = *v122;
              if (*v122 <= 49) {
                int v111 = byte_18CA91A00[v111];
              }
              int v112 = sub_18C90CF10(v34, v101, v14, v111, v122[1] - v133, v34, -1);
              int v60 = -v112;
              if (v112 < 0)
              {
                unsigned int v113 = &v34[~v112];
                do
                {
                  if (*v113) {
                    BOOL v114 = 1;
                  }
                  else {
                    BOOL v114 = v60 == 1;
                  }
                  if (v114) {
                    break;
                  }
                  --v60;
                  --v113;
                }
                while (v113 >= v34);
              }
              v87 ^= 0x80u;
              unsigned int v86 = v34;
            }
            else
            {
              unsigned int v86 = v34;
              int v60 = v98;
            }
            unint64_t v92 = v121;
            uint64_t v93 = (int *)v117;
LABEL_170:
            uint64_t v89 = v120;
            BOOL v90 = v118;
LABEL_171:
            *(_DWORD *)(v119 + 4) = v77;
            *(unsigned char *)(v119 + 8) = v87 & 0x80;
            sub_18C906460((unsigned char *)v119, v93, v86, v60, &v137, v92);
            sub_18C9066E0((unsigned int *)v119, (uint64_t)v93, &v137, v92);
LABEL_172:
            if (v90) {
              uprv_free(v90);
            }
            goto LABEL_174;
          }
          unsigned int v86 = (char *)v75;
        }
        unint64_t v92 = v121;
        uint64_t v93 = (int *)v117;
        char v87 = v116;
        goto LABEL_170;
      }
    }
    unsigned int v46 = v43;
    unsigned int v45 = v43;
    uint64_t v43 = (v43 + 1);
    int v49 = v44 + v14[v42 - 2];
    if (v41 == 2) {
      int v44 = v49;
    }
    else {
      int v44 = v49 + 1;
    }
    int v136 = v41;
    goto LABEL_69;
  }
  char v33 = (char *)uprv_malloc((v32 + 1));
  if (v33)
  {
    unsigned int v34 = v33;
    int64x2_t v118 = v33;
    uint64_t v119 = v9;
    int v16 = *(_DWORD *)a2;
    goto LABEL_49;
  }
  uint64_t v89 = v120;
  *a6 |= 0x10u;
LABEL_174:
  if (v89) {
    uprv_free(v89);
  }
  return v9;
}

uint64_t uprv_decNumberDivideInteger(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C9078D8(a1, a2, a3, a4, 32, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t uprv_decNumberExp(uint64_t a1, uint64_t a2, int *a3)
{
  int v7 = 0;
  if (!sub_18C908580(a2, a3, &v7)) {
    sub_18C908634(a1, a2, (uint64_t)a3, &v7);
  }
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a3);
  }
  return a1;
}

BOOL sub_18C908580(uint64_t a1, int *a2, int *a3)
{
  int v3 = *a3;
  if (*a2 > 999999 || a2[1] > 999999 || a2[2] < -999999)
  {
    int v4 = 64;
    goto LABEL_5;
  }
  int v7 = *(_DWORD *)a1;
  if (*(int *)a1 > 999999)
  {
LABEL_8:
    int v4 = 128;
    goto LABEL_5;
  }
  if ((v7 - 1000001 + *(_DWORD *)(a1 + 4)) > 0xFFD23942)
  {
    int v5 = *a3;
    return v5 != v3;
  }
  int v4 = 128;
  if (v7 == 1 && !*(unsigned char *)(a1 + 9))
  {
    int v5 = *a3;
    if ((*(unsigned char *)(a1 + 8) & 0x70) == 0) {
      return v5 != v3;
    }
    goto LABEL_8;
  }
LABEL_5:
  int v5 = v3 | v4;
  *a3 = v5;
  return v5 != v3;
}

uint64_t sub_18C908634(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v6 = a2;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v51 = 0;
  char v8 = *(unsigned char *)(a2 + 8);
  if ((v8 & 0x70) != 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 0x40) == 0)
    {
      sub_18C909E68(a1, a2, 0, (int *)a3, a4);
      return a1;
    }
    if ((*(unsigned char *)(a2 + 8) & 0x80) == 0)
    {
      uprv_decNumberCopy(a1, (unsigned int *)a2);
      return a1;
    }
    *(_WORD *)(a1 + 8) = 0;
LABEL_18:
    *(void *)a1 = 1;
    return a1;
  }
  if (!*(unsigned char *)(a2 + 9) && *(_DWORD *)a2 == 1)
  {
    *(_WORD *)(a1 + 8) = 256;
    goto LABEL_18;
  }
  long long v47 = 0uLL;
  int v49 = 0;
  uint64_t v48 = 0;
  memset(v46, 0, 28);
  memset(v60, 0, sizeof(v60));
  int v61 = 0;
  memset(v59, 0, sizeof(v59));
  int v58 = 0;
  memset(v57, 0, sizeof(v57));
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  int v56 = 0;
  uint64_t v53 = 1024;
  uint64_t v43 = 0;
  int v44 = 0;
  BOOL v9 = v8 < 0;
  int v10 = -*(_DWORD *)a3;
  if (v9) {
    int v10 = ~*(_DWORD *)a3;
  }
  LODWORD(v52) = 1;
  HIDWORD(v52) = v10;
  int v11 = sub_18C90A814((uint64_t)&v52, a2, 1);
  if (v11 == 0x80000000) {
    goto LABEL_13;
  }
  if ((v11 & 0x80000000) == 0)
  {
    int v13 = *(_DWORD *)a3;
    *(_WORD *)(a1 + 8) = 256;
    *(void *)a1 = 1;
    *(_DWORD *)a1 = sub_18C90B2C8((unsigned char *)(a1 + 9), 1, v13 - 1);
    *(_DWORD *)(a1 + 4) = 1 - v13;
    int v12 = *a4 | 0x820;
    goto LABEL_16;
  }
  int v50 = 0;
  memset(v45, 0, 28);
  uprv_decContextDefault((uint64_t)&v47, 64);
  *(void *)((char *)&v47 + 4) = *(void *)(a3 + 4);
  LOBYTE(v49) = 0;
  int v15 = *(_DWORD *)v6;
  int v16 = *(_DWORD *)(v6 + 4);
  int v17 = *(_DWORD *)v6 + v16;
  if (v17 >= 9)
  {
    WORD4(v57[0]) = 512;
    *(void *)&v57[0] = 1;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v18 = 0;
    if (*(char *)(v6 + 8) < 0) {
      DWORD1(v57[0]) = -2;
    }
    char v24 = v59;
    int v25 = v57;
    LODWORD(v26) = 9;
    int v27 = 8;
    goto LABEL_58;
  }
  int v19 = 0;
  int v20 = v15 > 8;
  if (8 - v17 < v20) {
    int v20 = 8 - v17;
  }
  int v21 = v20 + v17;
  if (v20 + v17 >= 0)
  {
    int v22 = -v15 - v20;
    if (v16 != v22)
    {
      if (v15 <= 49) {
        int v15 = byte_18CA91A00[v15];
      }
      if (v15 < 0x4A)
      {
        int v19 = 0;
        char v23 = v60;
      }
      else
      {
        char v23 = uprv_malloc((v15 + 11));
        int v19 = v23;
        if (!v23)
        {
LABEL_13:
          int v12 = *a4 | 0x10;
LABEL_16:
          *a4 = v12;
          return a1;
        }
      }
      int v28 = (int *)uprv_decNumberCopy((uint64_t)v23, (unsigned int *)v6);
      v28[1] = v22;
      int v15 = *v28;
      uint64_t v6 = (uint64_t)v28;
    }
  }
  int v27 = v21 & ~(v21 >> 31);
  if (v15 <= *(_DWORD *)a3) {
    int v15 = *(_DWORD *)a3;
  }
  int v29 = v15 + v27;
  uint64_t v26 = v15 + v27 + 2;
  int v30 = 2 * v26;
  if (v29 <= 22) {
    int v30 = byte_18CA91A00[2 * v26];
  }
  size_t v31 = (v30 + 11);
  if (v31 < 0xB5)
  {
    uint64_t v42 = 0;
    int v25 = v57;
LABEL_44:
    uint64_t v33 = v29 + 4;
    if (v29 <= 45) {
      LODWORD(v33) = byte_18CA91A00[v33];
    }
    uint64_t v41 = v19;
    if (v33 < 0x56)
    {
      int v18 = 0;
      char v24 = v59;
    }
    else
    {
      int v18 = uprv_malloc((v33 + 11));
      char v24 = v18;
      if (!v18)
      {
        *a4 |= 0x10u;
        int v19 = v41;
LABEL_82:
        uint64_t v32 = v42;
        goto LABEL_83;
      }
    }
    uprv_decNumberCopy((uint64_t)v24, (unsigned int *)v6);
    *((_WORD *)v25 + 4) = 256;
    *(void *)int v25 = 1;
    LOWORD(v53) = 512;
    uint64_t v52 = 1;
    LOWORD(v44) = 256;
    uint64_t v43 = 1;
    uprv_decContextDefault((uint64_t)v46, 64);
    v45[0] = v46[0];
    *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)((char *)v46 + 12);
    LODWORD(v47) = 2 * v26;
    LODWORD(v46[0]) = v26;
    DWORD2(v46[0]) = -999999999;
    while (1)
    {
      sub_18C9068F8((int *)v25, (int *)v25, (uint64_t)v24, (int *)&v47, 0, a4);
      uint64_t v34 = sub_18C908E7C((uint64_t)v24, (uint64_t)v24, v6, (int *)v46, &v51);
      sub_18C9078D8(v34, (uint64_t)v24, (uint64_t)&v52, (int *)v46, 128, &v51);
      if (*(_DWORD *)v25 >= (int)v26
        && *((_DWORD *)v25 + 1) + *(_DWORD *)v25 > *(_DWORD *)v24 + (int)v26 + *((_DWORD *)v24 + 1))
      {
        break;
      }
      sub_18C9068F8((int *)&v52, (int *)&v52, (uint64_t)&v43, (int *)v45, 0, &v51);
    }
    if (v21 >= 1)
    {
LABEL_58:
      int v36 = 0;
      int v37 = dword_18CA919D8[v27];
      LODWORD(v47) = v26 + 2;
      *((_WORD *)v24 + 4) = 256;
      *(void *)char v24 = 1;
      for (int i = 30; ; --i)
      {
        if ((*a4 & 0x2200) != 0
          && ((*a4 & 0x200) != 0 || !*((unsigned char *)v24 + 9) && *(_DWORD *)v24 == 1 && (*((unsigned char *)v24 + 8) & 0x70) == 0))
        {
LABEL_72:
          int v25 = v24;
          goto LABEL_73;
        }
        v37 *= 2;
        if (v37 < 0) {
          break;
        }
        if (!i) {
          goto LABEL_72;
        }
        if (v36) {
          goto LABEL_70;
        }
LABEL_71:
        ;
      }
      sub_18C908E7C((uint64_t)v24, (uint64_t)v24, (uint64_t)v25, (int *)&v47, a4);
      if (!i) {
        goto LABEL_72;
      }
      int v36 = 1;
LABEL_70:
      sub_18C908E7C((uint64_t)v24, (uint64_t)v24, (uint64_t)v24, (int *)&v47, a4);
      goto LABEL_71;
    }
LABEL_73:
    int v50 = 1;
    int v39 = *(_DWORD *)v25;
    if (*((unsigned char *)v25 + 9)) {
      BOOL v40 = 0;
    }
    else {
      BOOL v40 = v39 == 1;
    }
    int v19 = v41;
    if (v40)
    {
      if ((*((unsigned char *)v25 + 8) & 0x70) != 0)
      {
        int v39 = 1;
      }
      else
      {
        int v50 = 0;
        int v39 = *(_DWORD *)v25;
      }
    }
    LODWORD(v47) = *(_DWORD *)a3;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)v25 + 8);
    *(_DWORD *)(a1 + 4) = *((_DWORD *)v25 + 1);
    sub_18C906460((unsigned char *)a1, (int *)&v47, (char *)v25 + 9, v39, &v50, a4);
    sub_18C9066E0((unsigned int *)a1, a3, &v50, a4);
    goto LABEL_82;
  }
  int v25 = uprv_malloc(v31);
  uint64_t v42 = v25;
  if (v25) {
    goto LABEL_44;
  }
  int v18 = 0;
  uint64_t v32 = 0;
  *a4 |= 0x10u;
LABEL_83:
  if (v19) {
    uprv_free(v19);
  }
  if (v32) {
    uprv_free(v32);
  }
  if (v18) {
    uprv_free(v18);
  }
  return a1;
}

uint64_t uprv_decNumberFMA(uint64_t a1, int *a2, int *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v18 = 0;
  int v20 = 0;
  memset(v19, 0, sizeof(v19));
  int v16 = 0;
  uint64_t v15 = 0;
  if (((a2[2] & 0x70) != 0 || !sub_18C908580((uint64_t)a2, (int *)a5, &v18))
    && ((a3[2] & 0x70) != 0 || !sub_18C908580((uint64_t)a3, (int *)a5, &v18))
    && ((a4[1] & 0x70) != 0 || !sub_18C908580((uint64_t)a4, (int *)a5, &v18)))
  {
    *(_OWORD *)int v17 = *(_OWORD *)a5;
    *(_OWORD *)&v17[12] = *(_OWORD *)(a5 + 12);
    uint64_t v10 = *a3 + (uint64_t)*a2;
    *(_DWORD *)int v17 = v10;
    *(void *)&_OWORD v17[4] = 0xC46536013B9AC9FFLL;
    if ((int)v10 <= 49) {
      LODWORD(v10) = byte_18CA91A00[v10];
    }
    if (v10 < 0x4A)
    {
      int v11 = 0;
      int v12 = (int *)v19;
    }
    else
    {
      int v11 = (int *)uprv_malloc((v10 + 11));
      int v12 = v11;
      if (!v11)
      {
        int v13 = v18 | 0x10;
LABEL_24:
        sub_18C90684C(a1, v13, a5);
        return a1;
      }
    }
    sub_18C908E7C((uint64_t)v12, (uint64_t)a2, (uint64_t)a3, (int *)v17, &v18);
    if ((v18 & 0x80) != 0)
    {
      if ((v18 & 0x40000000) == 0)
      {
        *(void *)a1 = 1;
        *(_WORD *)(a1 + 8) = 32;
        if (!v11) {
          goto LABEL_23;
        }
LABEL_22:
        uprv_free(v11);
        goto LABEL_23;
      }
      LOWORD(v16) = 0;
      uint64_t v15 = 1;
      a4 = &v15;
    }
    sub_18C9068F8((int *)a1, v12, (uint64_t)a4, (int *)a5, 0, &v18);
    if (!v11) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_23:
  int v13 = v18;
  if (v18) {
    goto LABEL_24;
  }
  return a1;
}

uint64_t sub_18C908E7C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v6 = a4;
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  int v111 = 0;
  unsigned __int8 v8 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v9 = *(unsigned char *)(a3 + 8);
  char v10 = (v9 ^ v8) & 0x80;
  if (((v9 | v8) & 0x70) != 0)
  {
    if (((v9 | v8) & 0x30) != 0)
    {
      sub_18C909E68(a1, a2, a3, a4, a5);
      return a1;
    }
    if (((*(unsigned char *)(a2 + 8) & 0x40) != 0
       || *(unsigned char *)(a2 + 9)
       || (*(unsigned char *)(a2 + 8) & 0x70) != 0
       || *(_DWORD *)a2 != 1)
      && ((*(unsigned char *)(a3 + 8) & 0x40) != 0
       || *(unsigned char *)(a3 + 9)
       || (*(unsigned char *)(a3 + 8) & 0x70) != 0
       || *(_DWORD *)a3 != 1))
    {
      *(void *)a1 = 1;
      *(unsigned char *)(a1 + 9) = 0;
      *(unsigned char *)(a1 + 8) = v10 | 0x40;
      return a1;
    }
    int v92 = *a5 | 0x80;
LABEL_108:
    *a5 = v92;
    return a1;
  }
  memset(v117, 0, 145);
  memset(v115, 0, sizeof(v115));
  uint64_t v116 = 0;
  memset(v113, 0, sizeof(v113));
  uint64_t v114 = 0;
  memset(v112, 0, 128);
  int v11 = *(_DWORD *)a2;
  int v12 = *(_DWORD *)a3;
  if (*(_DWORD *)a2 >= *(_DWORD *)a3) {
    int v13 = *(_DWORD *)a3;
  }
  else {
    int v13 = *(_DWORD *)a2;
  }
  if (v11 <= v12) {
    int v14 = *(_DWORD *)a3;
  }
  else {
    int v14 = *(_DWORD *)a2;
  }
  if (v11 > v12) {
    uint64_t v15 = (_DWORD *)a3;
  }
  else {
    uint64_t v15 = (_DWORD *)a2;
  }
  if (v11 > v12) {
    int v16 = (int *)a2;
  }
  else {
    int v16 = (int *)a3;
  }
  memset(&v112[8], 0, 32);
  if (v13 >= 3)
  {
    unsigned int v109 = v15;
    int v17 = (v14 + 8) / 9;
    unsigned int v18 = (v13 + 8) / 9u;
    int v19 = v16;
    if (v14 < 91)
    {
      int v103 = 0;
      int v20 = (unsigned int *)v115;
    }
    else
    {
      int v20 = (unsigned int *)uprv_malloc((4 * v17));
      int v103 = v20;
    }
    char v107 = v6;
    int v27 = v17 + v18;
    if (v13 < 0x5B)
    {
      int v102 = 0;
      int v28 = v113;
    }
    else
    {
      int v28 = (char *)uprv_malloc(4 * v18);
      int v102 = v28;
    }
    if (v27 >= -7) {
      int v31 = v27 + 7;
    }
    else {
      int v31 = v27 + 14;
    }
    size_t v32 = (8 * (v27 + (v31 >> 3)));
    if ((int)v32 < 161)
    {
      uint64_t v33 = 0;
      int v25 = (char *)v112;
    }
    else
    {
      uint64_t v33 = (char *)uprv_malloc(v32);
      int v25 = v33;
    }
    int v16 = v19;
    if (!v20 || !v28 || !v25)
    {
      *a5 |= 0x10u;
      int v79 = v102;
      unsigned int v78 = v103;
      if (!v33) {
        goto LABEL_126;
      }
      goto LABEL_125;
    }
    int v34 = v31 >> 3;
    int v35 = *v19;
    int v36 = v20;
    if (*v19 >= 1)
    {
      int v37 = (unsigned __int8 *)v19 + 9;
      int v36 = v20;
      do
      {
        unsigned int v38 = 0;
        *int v36 = 0;
        int v39 = v35 - 1;
        if ((v35 - 1) >= 8) {
          int v39 = 8;
        }
        uint64_t v40 = (v39 + 1);
        uint64_t v41 = dword_18CA919D8;
        do
        {
          int v43 = *v37++;
          int v42 = v43;
          int v44 = *v41++;
          v38 += v44 * v42;
          *int v36 = v38;
          --v35;
          --v40;
        }
        while (v40);
        ++v36;
      }
      while (v35 + 1 > 1);
    }
    char v105 = v10;
    unsigned int v45 = &v25[8 * v34];
    int v46 = *v109;
    long long v47 = v28;
    if (*v109 >= 1)
    {
      uint64_t v48 = (unsigned __int8 *)v109 + 9;
      long long v47 = v28;
      do
      {
        int v49 = 0;
        *(_DWORD *)long long v47 = 0;
        int v50 = v46 - 1;
        if ((v46 - 1) >= 8) {
          int v50 = 8;
        }
        uint64_t v51 = (v50 + 1);
        uint64_t v52 = dword_18CA919D8;
        do
        {
          int v54 = *v48++;
          int v53 = v54;
          int v55 = *v52++;
          v49 += v55 * v53;
          *(_DWORD *)long long v47 = v49;
          --v46;
          --v51;
        }
        while (v51);
        v47 += 4;
      }
      while (v46 + 1 > 1);
    }
    int v106 = v33;
    int v56 = v47 - 4;
    if (v27 >= 1)
    {
      size_t v57 = &v25[8 * v34];
      int v58 = &v57[8 * v27];
      unsigned int v59 = v57 + 8;
      if (v58 > v59) {
        unsigned int v59 = v58;
      }
      bzero(v45, ((unint64_t)&v59[~(unint64_t)v25 + -8 * v34] & 0xFFFFFFFFFFFFFFF8) + 8);
      int v16 = v19;
    }
    int v60 = (unint64_t *)&v45[8 * v27];
    if (v28 <= v56)
    {
      int v61 = v36 - 1;
      int v62 = 18;
      int v63 = v28;
      do
      {
        if (v20 <= v61)
        {
          char v64 = &v45[2 * (v63 - v28)];
          unsigned int v65 = *(_DWORD *)v63;
          int v66 = v20;
          do
          {
            unsigned int v67 = *v66++;
            *(void *)v64 += v65 * (unint64_t)v67;
            v64 += 8;
          }
          while (v66 <= v61);
        }
        BOOL v68 = __OFSUB__(v62--, 1);
        if ((v62 < 0) ^ v68 | (v62 == 0)) {
          char v69 = 0;
        }
        else {
          char v69 = 1;
        }
        int v70 = v69 & (v63 != v56);
        if (!v70) {
          int v62 = 18;
        }
        if ((v70 & 1) == 0 && v27 >= 1)
        {
          unsigned int v71 = (unint64_t *)v45;
          do
          {
            unint64_t v72 = *v71;
            if (*v71 >= 0x3B9ACA00)
            {
              unint64_t v73 = v72 / 0x3B9ACA00;
              if (v72 >= 0xDE0B6B3A7640000)
              {
                unint64_t v74 = v72 / 0xDE0B6B3A7640000;
                v71[2] += v72 / 0xDE0B6B3A7640000;
                v72 %= 0xDE0B6B3A7640000uLL;
                LODWORD(v73) = v73 - 1000000000 * v74;
              }
              uint64_t v75 = v73;
              unint64_t v76 = v71[1] + v73;
              *unsigned int v71 = v72 - 1000000000 * v75;
              v71[1] = v76;
            }
            ++v71;
          }
          while (v71 < v60);
          int v62 = 18;
        }
        v63 += 4;
      }
      while (v63 <= v56);
    }
    if (v27 < 1)
    {
      int v84 = (int)v25;
      uint64_t v15 = v109;
      uint64_t v6 = v107;
      int v79 = v102;
      unsigned int v78 = v103;
    }
    else
    {
      int v77 = v25;
      uint64_t v15 = v109;
      uint64_t v6 = v107;
      int v79 = v102;
      unsigned int v78 = v103;
      do
      {
        uint64_t v80 = 0;
        unsigned int v81 = *(_DWORD *)v45;
        do
        {
          char v82 = v81;
          v81 /= 0xAu;
          v77[v80++] = v82 - 10 * v81;
        }
        while (v80 != 8);
        BOOL v83 = &v77[v80];
        char *v83 = v81;
        int v77 = v83 + 1;
        v45 += 8;
      }
      while (v45 < (char *)v60);
      int v84 = v83 + 1;
    }
    int v89 = v84 - v25;
    char v91 = v105;
LABEL_111:
    *(unsigned char *)(a1 + 8) = v91;
    if (v89 < 1) {
      goto LABEL_118;
    }
    goto LABEL_112;
  }
  int v21 = v14;
  if (v14 <= 49) {
    int v21 = byte_18CA91A00[v14];
  }
  size_t v22 = v21 + byte_18CA91A00[v13];
  if (v22 < 0x92)
  {
    uint64_t v26 = 0;
    int v25 = v117;
  }
  else
  {
    char v23 = v16;
    char v24 = (char *)uprv_malloc(v22);
    if (!v24)
    {
      int v92 = *a5 | 0x10;
      goto LABEL_108;
    }
    int v25 = v24;
    int v16 = v23;
    int v14 = *v23;
    uint64_t v26 = v24;
  }
  *int v25 = 0;
  if (v14 <= 49) {
    int v14 = byte_18CA91A00[v14];
  }
  int v30 = (char *)v15 + 9;
  unsigned int v29 = *v15;
  int v106 = v26;
  if ((int)*v15 > 49)
  {
    unint64_t v108 = v6;
    int v110 = v15;
    char v104 = v10;
LABEL_95:
    int v85 = 0;
    uint64_t v86 = 0;
    char v87 = v16;
    int v88 = (unsigned __int8 *)v16 + 9;
    int v89 = 1;
    BOOL v90 = &v30[v29];
    do
    {
      if (v30[v86]) {
        int v89 = v86 + sub_18C90CF10(&v25[v86], v89 + v85, v88, v14, 0, &v25[v86], v30[v86]);
      }
      else {
        v25[v89++] = 0;
      }
      ++v86;
      --v85;
    }
    while (&v30[v86] < v90);
    unsigned int v78 = 0;
    int v79 = 0;
    char v91 = v104;
    uint64_t v6 = v108;
    uint64_t v15 = v110;
    int v16 = v87;
    goto LABEL_111;
  }
  if (v29)
  {
    unint64_t v108 = v6;
    int v110 = v15;
    char v104 = v10;
    unsigned int v29 = byte_18CA91A00[v29];
    goto LABEL_95;
  }
  int v79 = 0;
  unsigned int v78 = 0;
  *(unsigned char *)(a1 + 8) = v10;
  int v89 = 1;
LABEL_112:
  uint64_t v93 = &v25[v89 - 1];
  do
  {
    if (*v93) {
      BOOL v94 = 1;
    }
    else {
      BOOL v94 = v89 == 1;
    }
    if (v94) {
      break;
    }
    --v89;
    --v93;
  }
  while (v93 >= v25);
LABEL_118:
  *(_DWORD *)a1 = v89;
  int v95 = v16[1];
  int v96 = v15[1];
  int v97 = v96 + v95;
  int v98 = v95 & v96;
  if (v97 > 0 && v98 < 0) {
    int v100 = -1999999998;
  }
  else {
    int v100 = v97;
  }
  *(_DWORD *)(a1 + 4) = v100;
  sub_18C906460((unsigned char *)a1, v6, v25, v89, &v111, a5);
  sub_18C9066E0((unsigned int *)a1, (uint64_t)v6, &v111, a5);
  uint64_t v33 = v106;
  if (!v106) {
    goto LABEL_126;
  }
LABEL_125:
  uprv_free(v33);
LABEL_126:
  if (v79) {
    uprv_free(v79);
  }
  if (v78) {
    uprv_free(v78);
  }
  return a1;
}

uint64_t uprv_decNumberInvert(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  if (*(_DWORD *)(a2 + 4) || *(unsigned __int8 *)(a2 + 8) >= 0x10u)
  {
LABEL_25:
    *(void *)a1 = 1;
    *(_WORD *)(a1 + 8) = 32;
    uprv_decContextSetStatus((uint64_t)a3, 128);
  }
  else
  {
    unsigned int v4 = *(_DWORD *)a2;
    if (*(int *)a2 <= 49) {
      unsigned int v4 = byte_18CA91A00[v4];
    }
    unint64_t v5 = a1 + 9;
    unsigned int v6 = *a3;
    if ((int)*a3 <= 49) {
      unsigned int v6 = byte_18CA91A00[v6];
    }
    unint64_t v7 = v5 + v6 - 1;
    int v8 = a1 + 9;
    if (v5 <= v7)
    {
      unint64_t v9 = a2 + 9 + v4 - 1;
      uint64_t v10 = 9;
      do
      {
        if (a2 + v10 <= v9)
        {
          unsigned int v11 = *(unsigned __int8 *)(a2 + v10);
          if (v11)
          {
            char v12 = 0;
            goto LABEL_14;
          }
        }
        else
        {
          unsigned int v11 = 0;
        }
        char v12 = 1;
LABEL_14:
        *(unsigned char *)(a1 + v10) = v12;
        if ((v11 - 10 * ((429496730 * (unint64_t)v11) >> 32)) >= 2) {
          goto LABEL_25;
        }
        int v8 = a1 + ++v10;
      }
      while (a1 + v10 <= v7);
    }
    int v13 = v8 - v5;
    if (v8 - (int)v5 >= 1)
    {
      int v14 = (unsigned char *)(v5 + (v13 - 1));
      int v15 = v8 - a1 - 10;
      do
      {
        if (*v14) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = v15 == 0;
        }
        if (v16) {
          break;
        }
        --v14;
        --v15;
      }
      while ((unint64_t)v14 >= v5);
      int v13 = v15 + 1;
    }
    *(_DWORD *)a1 = v13;
    *(_DWORD *)(a1 + 4) = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t uprv_decNumberLn(uint64_t a1, uint64_t a2, int *a3)
{
  int v7 = 0;
  if (!sub_18C908580(a2, a3, &v7)) {
    sub_18C909768(a1, a2, (uint64_t)a3, &v7);
  }
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a3);
  }
  return a1;
}

uint64_t sub_18C909768(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int v46 = 0;
  if ((*(unsigned char *)(a2 + 8) & 0x70) != 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 0x40) == 0)
    {
      sub_18C909E68(a1, a2, 0, (int *)a3, a4);
      return a1;
    }
    if ((*(unsigned char *)(a2 + 8) & 0x80) == 0)
    {
      uprv_decNumberCopy(a1, (unsigned int *)a2);
      return a1;
    }
    goto LABEL_16;
  }
  int v8 = *(unsigned __int8 *)(a2 + 9);
  if (!*(unsigned char *)(a2 + 9) && *(_DWORD *)a2 == 1)
  {
    *(void *)a1 = 1;
    *(_WORD *)(a1 + 8) = 192;
    return a1;
  }
  if ((*(unsigned char *)(a2 + 8) & 0x80) != 0)
  {
LABEL_16:
    int v11 = *a4 | 0x80;
LABEL_17:
    *a4 = v11;
    return a1;
  }
  memset(v48, 0, 60);
  memset(v47, 0, sizeof(v47));
  uint64_t v43 = 0;
  int v44 = 0;
  uint64_t v41 = 0;
  int v42 = 0;
  memset(v40, 0, 28);
  int v9 = *(_DWORD *)a3;
  if (!*(_DWORD *)(a2 + 4) && v9 <= 40)
  {
    if (v8)
    {
      if (v8 == 2 && *(_DWORD *)a2 == 1)
      {
        v40[0] = *(_OWORD *)a3;
        *(_OWORD *)((char *)v40 + 12) = *(_OWORD *)(a3 + 12);
        HIDWORD(v40[0]) = 3;
        uint64_t v10 = "0.6931471805599453094172321214581765680755";
LABEL_21:
        uprv_decNumberFromString(a1, (unsigned __int8 *)v10, (uint64_t)v40);
        int v11 = *a4 | 0x820;
        goto LABEL_17;
      }
    }
    else if (*(unsigned char *)(a2 + 10) == 1 && *(_DWORD *)a2 == 2)
    {
      v40[0] = *(_OWORD *)a3;
      *(_OWORD *)((char *)v40 + 12) = *(_OWORD *)(a3 + 12);
      HIDWORD(v40[0]) = 3;
      uint64_t v10 = "2.302585092994045684017991454684364207601";
      goto LABEL_21;
    }
  }
  unsigned int v12 = *(_DWORD *)a2;
  if (v9 <= *(_DWORD *)a2) {
    int v9 = *(_DWORD *)a2;
  }
  if (v9 <= 7) {
    int v9 = 7;
  }
  int v13 = v9 + 2;
  if (v9 + 2 <= 16) {
    unsigned int v14 = 16;
  }
  else {
    unsigned int v14 = v9 + 2;
  }
  if (v14 >= 0x32)
  {
    int v15 = uprv_malloc(v14 + 11);
    if (!v15)
    {
      int v11 = *a4 | 0x10;
      goto LABEL_17;
    }
    unsigned int v12 = *(_DWORD *)a2;
    BOOL v16 = v15;
  }
  else
  {
    int v15 = 0;
    BOOL v16 = v48;
  }
  int v17 = v12 + v13;
  if (v17 <= 16) {
    int v17 = 16;
  }
  if (v17 <= 0x31) {
    int v17 = byte_18CA91A00[v17];
  }
  unsigned int v38 = v15;
  memset(v39, 0, 28);
  BOOL v45 = 0;
  if (v17 < 0x56)
  {
    unsigned int v18 = 0;
    int v19 = v47;
  }
  else
  {
    unsigned int v18 = uprv_malloc((v17 + 11));
    int v19 = v18;
    if (!v18)
    {
      *a4 |= 0x10u;
      int v20 = v38;
      goto LABEL_82;
    }
  }
  uprv_decContextDefault((uint64_t)v40, 64);
  int v21 = *(_DWORD *)a2 + *(_DWORD *)(a2 + 4);
  if (v21 >= 0) {
    unsigned int v22 = *(_DWORD *)a2 + *(_DWORD *)(a2 + 4);
  }
  else {
    unsigned int v22 = -v21;
  }
  uprv_decNumberFromUInt32((uint64_t)v16, v22);
  if (v21 < 0) {
    *((unsigned char *)v16 + 8) = 0x80;
  }
  uprv_decNumberFromUInt32((uint64_t)v19, 0x232279u);
  *((_DWORD *)v19 + 1) = -6;
  sub_18C908E7C((uint64_t)v16, (uint64_t)v16, (uint64_t)v19, (int *)v40, &v46);
  BOOL v45 = 0;
  LODWORD(v40[0]) = 2;
  HIDWORD(v40[0]) = 5;
  *((unsigned char *)v19 + 8) = *(unsigned char *)(a2 + 8);
  int v23 = *(_DWORD *)a2;
  *((_DWORD *)v19 + 1) = *(_DWORD *)(a2 + 4);
  sub_18C906460(v19, (int *)v40, (char *)(a2 + 9), v23, (int *)&v45, &v46);
  *((_DWORD *)v19 + 1) = 0;
  int v24 = sub_18C90B41C((int *)v19);
  int v25 = 10 * v24;
  if (v24 >= 10) {
    int v25 = v24;
  }
  unsigned int v26 = word_18CA91A48[v25 - 10];
  uprv_decNumberFromUInt32((uint64_t)v19, v26 >> 2);
  *((_DWORD *)v19 + 1) = -3 - (v26 & 3);
  *((unsigned char *)v19 + 8) = 0x80;
  LODWORD(v40[0]) = 16;
  HIDWORD(v40[0]) = 3;
  sub_18C9068F8((int *)v16, (int *)v16, (uint64_t)v19, (int *)v40, 0, &v46);
  LOWORD(v44) = 256;
  uint64_t v43 = 1;
  *(void *)((char *)v40 + 4) = *(void *)(a3 + 4);
  BYTE8(v40[1]) = 0;
  LODWORD(v39[0]) = v40[0];
  *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)((char *)v40 + 12);
  *(void *)((char *)v39 + 4) = 0xFFE17B82001E847ELL;
  int v27 = 9;
  LODWORD(v40[0]) = 9;
  LODWORD(v39[0]) = *(_DWORD *)a2 + 9;
  int v28 = (char *)v16 + 9;
  while (1)
  {
    *((unsigned char *)v16 + 8) ^= 0x80u;
    uint64_t v29 = sub_18C908634((uint64_t)v19, (uint64_t)v16, (uint64_t)v39, &v46);
    *((unsigned char *)v16 + 8) ^= 0x80u;
    int v30 = (int *)sub_18C908E7C(v29, (uint64_t)v19, a2, (int *)v39, &v46);
    sub_18C9068F8(v30, (int *)v19, (uint64_t)&v43, (int *)v39, 128, &v46);
    int v31 = *(_DWORD *)v19;
    BOOL v32 = !*((unsigned char *)v19 + 9) && v31 == 1;
    BOOL v33 = v32;
    if (v32 && (*((unsigned char *)v19 + 8) & 0x70) == 0)
    {
      int v34 = *(_DWORD *)v16;
    }
    else
    {
      int v34 = *(_DWORD *)v16;
      if (*((_DWORD *)v16 + 1) + *(_DWORD *)v16 <= *((_DWORD *)v19 + 1) + v31 + *(_DWORD *)a3) {
        goto LABEL_68;
      }
    }
    if (v34 == v13) {
      goto LABEL_77;
    }
    if (v34 == 1 && !*v28 && (*((unsigned char *)v16 + 8) & 0x70) == 0) {
      break;
    }
    if (v33 && (*((unsigned char *)v19 + 8) & 0x70) == 0) {
      *((_DWORD *)v19 + 1) = *((_DWORD *)v16 + 1) - v13;
    }
LABEL_68:
    sub_18C9068F8((int *)v16, (int *)v16, (uint64_t)v19, (int *)v40, 0, &v46);
    if (v27 != v13)
    {
      if (2 * v27 >= v13) {
        int v27 = v13;
      }
      else {
        v27 *= 2;
      }
      LODWORD(v40[0]) = v27;
      LODWORD(v39[0]) = *(_DWORD *)a2 + v27;
    }
  }
  sub_18C90723C((uint64_t)&v41, a2, (uint64_t)&v43, (int *)v40, 1, &v46);
  if (BYTE1(v42)) {
    *a4 |= 0x820u;
  }
  else {
    *((_DWORD *)v16 + 1) = 0;
  }
LABEL_77:
  BOOL v45 = 1;
  if (*v28)
  {
    char v35 = *((unsigned char *)v16 + 8);
    int v36 = *(_DWORD *)v16;
    int v20 = v38;
  }
  else
  {
    int v36 = *(_DWORD *)v16;
    char v35 = *((unsigned char *)v16 + 8);
    int v20 = v38;
    if (*(_DWORD *)v16 == 1)
    {
      BOOL v45 = (v35 & 0x70) != 0;
      int v36 = 1;
    }
  }
  LODWORD(v40[0]) = *(_DWORD *)a3;
  *(unsigned char *)(a1 + 8) = v35;
  *(_DWORD *)(a1 + 4) = *((_DWORD *)v16 + 1);
  sub_18C906460((unsigned char *)a1, (int *)v40, (char *)v16 + 9, v36, (int *)&v45, a4);
  sub_18C9066E0((unsigned int *)a1, a3, (int *)&v45, a4);
LABEL_82:
  if (v20) {
    uprv_free(v20);
  }
  if (v18) {
    uprv_free(v18);
  }
  return a1;
}

uint64_t uprv_decNumberLogB(uint64_t a1, uint64_t a2, int *a3)
{
  int v13 = 0;
  if ((*(unsigned char *)(a2 + 8) & 0x30) != 0)
  {
    sub_18C909E68(a1, a2, 0, a3, &v13);
    int v5 = v13;
    if (v13)
    {
LABEL_3:
      sub_18C90684C(a1, v5, (uint64_t)a3);
      return a1;
    }
    return a1;
  }
  if ((*(unsigned char *)(a2 + 8) & 0x40) != 0)
  {
    uprv_decNumberCopy(a1, (unsigned int *)a2);
    char v11 = *(unsigned char *)(a1 + 8) & 0x7F;
    goto LABEL_18;
  }
  unsigned int v6 = *(_DWORD *)a2;
  if (*(unsigned char *)(a2 + 9)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = (*(unsigned char *)(a2 + 8) & 0x70) == 0;
  }
  if (v7 && v6 == 1)
  {
    *(void *)a1 = 1;
    *(_WORD *)(a1 + 8) = 192;
    int v5 = 2;
    goto LABEL_3;
  }
  int v9 = v6 + *(_DWORD *)(a2 + 4);
  if (v9 - 1 < 0) {
    unsigned int v10 = 1 - v9;
  }
  else {
    unsigned int v10 = v9 - 1;
  }
  uprv_decNumberFromUInt32(a1, v10);
  if (v9 <= 0)
  {
    char v11 = 0x80;
LABEL_18:
    *(unsigned char *)(a1 + 8) = v11;
  }
  return a1;
}

uint64_t sub_18C909E68(uint64_t result, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5)
{
  if ((*(unsigned char *)(a2 + 8) & 0x10) != 0)
  {
    *a5 |= 0x40000080u;
  }
  else if (a3)
  {
    if ((*(unsigned char *)(a3 + 8) & 0x10) != 0)
    {
      *a5 |= 0x40000080u;
      a2 = a3;
    }
    else if ((*(unsigned char *)(a2 + 8) & 0x20) == 0)
    {
      a2 = a3;
    }
  }
  int v5 = *a4;
  if (*(_DWORD *)a2 <= *a4)
  {
    double result = uprv_decNumberCopy(result, (unsigned int *)a2);
    goto LABEL_20;
  }
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  if (v5 > 49) {
    goto LABEL_13;
  }
  if (v5)
  {
    int v5 = byte_18CA91A00[v5];
LABEL_13:
    unint64_t v6 = result + 9 + v5;
    uint64_t v7 = 9;
    do
    {
      *(unsigned char *)(result + v7) = *(unsigned char *)(a2 + v7);
      ++v7;
    }
    while (result + v7 < v6);
    int v5 = *a4;
    if (*a4 >= 50)
    {
      *(_DWORD *)double result = v5;
      goto LABEL_20;
    }
  }
  int v8 = byte_18CA91A00[v5];
  *(_DWORD *)double result = v8;
  if (v8 > v5) {
    double result = (uint64_t)sub_18C90C220((int *)result, v8 - v5);
  }
LABEL_20:
  *(unsigned char *)(result + 8) = *(unsigned char *)(result + 8) & 0xCF | 0x20;
  *(_DWORD *)(result + 4) = 0;
  return result;
}

uint64_t uprv_decNumberCopyAbs(uint64_t a1, unsigned int *a2)
{
  uint64_t result = uprv_decNumberCopy(a1, a2);
  *(unsigned char *)(result + 8) &= ~0x80u;
  return result;
}

uint64_t uprv_decNumberLog10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  memset(v30, 0, 60);
  memset(v29, 0, 60);
  v28[0] = 0;
  v28[1] = 0;
  long long v23 = 0uLL;
  int v25 = 0;
  uint64_t v24 = 0;
  if (sub_18C908580(a2, a3, (int *)&v26 + 1)) {
    goto LABEL_38;
  }
  uprv_decContextDefault((uint64_t)&v23, 64);
  unsigned int v6 = *(unsigned __int8 *)(a2 + 8);
  int v7 = *(_DWORD *)a2;
  if (v6 > 0xF)
  {
    int v8 = *(_DWORD *)a2;
  }
  else
  {
    int v8 = 1;
    if (*(unsigned char *)(a2 + 9) || v7 != 1)
    {
      uint64_t v22 = 0;
      LODWORD(v23) = 1;
      LOBYTE(v28[0]) = v6;
      HIDWORD(v27) = *(_DWORD *)(a2 + 4);
      sub_18C906460(&v27, (int *)&v23, (char *)(a2 + 9), v7, (int *)&v22 + 1, (int *)&v22);
      if ((v22 & 0x20) == 0 && BYTE1(v28[0]) == 1)
      {
        int v9 = HIDWORD(v27);
        if (v27 >= 0) {
          unsigned int v10 = HIDWORD(v27);
        }
        else {
          unsigned int v10 = -HIDWORD(v27);
        }
        uprv_decNumberFromUInt32((uint64_t)&v27, v10);
        if (v9 < 0)
        {
          char v11 = 0x80;
          LOBYTE(v28[0]) = 0x80;
        }
        else
        {
          char v11 = v28[0];
        }
        HIDWORD(v22) = 0;
        *(unsigned char *)(a1 + 8) = v11;
        int v20 = v27;
        *(_DWORD *)(a1 + 4) = HIDWORD(v27);
        sub_18C906460((unsigned char *)a1, a3, (char *)v28 + 1, v20, (int *)&v22 + 1, (int *)&v26 + 1);
        sub_18C9066E0((unsigned int *)a1, (uint64_t)a3, (int *)&v22 + 1, (int *)&v26 + 1);
        goto LABEL_38;
      }
      int v8 = *(_DWORD *)a2;
    }
  }
  if (v8 + 6 <= *a3) {
    int v12 = *a3;
  }
  else {
    int v12 = v8 + 6;
  }
  if (v12 >= 47)
  {
    int v13 = (unsigned int *)uprv_malloc((v12 + 14));
    unsigned int v14 = v13;
    if (!v13)
    {
      int v17 = HIDWORD(v26) | 0x10;
LABEL_39:
      sub_18C90684C(a1, v17, (uint64_t)a3);
      return a1;
    }
  }
  else
  {
    int v13 = 0;
    unsigned int v14 = (unsigned int *)v30;
  }
  LODWORD(v23) = v12 + 3;
  *(void *)((char *)&v23 + 4) = 0xFFF0BDC1000F423FLL;
  LOBYTE(v25) = 0;
  sub_18C909768((uint64_t)v14, a2, (uint64_t)&v23, (int *)&v26 + 1);
  int v15 = HIDWORD(v26);
  if ((v26 & 0xDD00000000) != 0 && (v26 & 0x4000000000000000) == 0) {
    goto LABEL_24;
  }
  if ((v14[2] & 0x70) != 0 || !*((unsigned char *)v14 + 9) && *v14 == 1)
  {
    uprv_decNumberCopy(a1, v14);
LABEL_24:
    BOOL v16 = 0;
    goto LABEL_25;
  }
  int v18 = *a3;
  if (*a3 >= 47)
  {
    BOOL v16 = uprv_malloc((v18 + 14));
    int v19 = v16;
    if (!v16)
    {
      HIDWORD(v26) = v15 | 0x10;
      goto LABEL_25;
    }
  }
  else
  {
    BOOL v16 = 0;
    int v19 = v29;
  }
  LOWORD(v28[0]) = 0;
  BYTE2(v28[0]) = 1;
  uint64_t v27 = 2;
  LODWORD(v23) = v18 + 3;
  sub_18C909768((uint64_t)v19, (uint64_t)&v27, (uint64_t)&v23, (int *)&v26);
  LODWORD(v23) = *a3;
  sub_18C9078D8(a1, (uint64_t)v14, (uint64_t)v19, (int *)&v23, 128, (int *)&v26 + 1);
LABEL_25:
  if (v13) {
    uprv_free(v13);
  }
  if (v16) {
    uprv_free(v16);
  }
LABEL_38:
  int v17 = HIDWORD(v26);
  if (HIDWORD(v26)) {
    goto LABEL_39;
  }
  return a1;
}

uint64_t uprv_decNumberMax(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C90723C(a1, a2, a3, a4, 2, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t uprv_decNumberMaxMag(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C90723C(a1, a2, a3, a4, 7, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t uprv_decNumberMin(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C90723C(a1, a2, a3, a4, 3, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t uprv_decNumberMinMag(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C90723C(a1, a2, a3, a4, 8, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

int *uprv_decNumberMinus(int *a1, uint64_t a2, int *a3)
{
  v8[2] = 0;
  int v5 = *(_DWORD *)(a2 + 4);
  int v7 = 0;
  v8[0] = 1;
  v8[1] = v5;
  sub_18C9068F8(a1, v8, a2, a3, 128, &v7);
  if (v7) {
    sub_18C90684C((uint64_t)a1, v7, (uint64_t)a3);
  }
  return a1;
}

int *uprv_decNumberNextMinus(int *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)int v7 = *(_OWORD *)a3;
  *(_OWORD *)&v7[3] = *(_OWORD *)(a3 + 12);
  int v6 = 0;
  if ((*(unsigned char *)(a2 + 8) & 0xC0) == 0x40)
  {
    sub_18C90A534((uint64_t)a1, (int *)a3);
  }
  else
  {
    int v9 = 256;
    unint64_t v8 = 0xC465360000000001;
    v7[3] = 6;
    sub_18C9068F8(a1, (int *)a2, (uint64_t)&v8, v7, 128, &v6);
    if ((v6 & 0x40000080) != 0) {
      sub_18C90684C((uint64_t)a1, v6 & 0x40000080, a3);
    }
  }
  return a1;
}

unsigned char *sub_18C90A534(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_DWORD *)a1 = *a2;
  uint64_t result = (unsigned char *)(a1 + 9);
  uint64_t v6 = (v4 - 2);
  if (v4 >= 2)
  {
    memset(result, 9, (v4 - 1));
    uint64_t result = (unsigned char *)(v6 + a1 + 10);
    int v4 = 1;
  }
  *uint64_t result = dword_18CA919D8[v4] - 1;
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = a2[1] - *a2 + 1;
  return result;
}

uint64_t uprv_decNumberNextPlus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)int v7 = *(_OWORD *)a3;
  *(_OWORD *)&v7[3] = *(_OWORD *)(a3 + 12);
  int v6 = 0;
  if (*(unsigned __int8 *)(a2 + 8) < 0xC0u)
  {
    int v9 = 256;
    unint64_t v8 = 0xC465360000000001;
    v7[3] = 0;
    sub_18C9068F8((int *)a1, (int *)a2, (uint64_t)&v8, v7, 0, &v6);
    if ((v6 & 0x40000080) != 0) {
      sub_18C90684C(a1, v6 & 0x40000080, a3);
    }
  }
  else
  {
    sub_18C90A534(a1, (int *)a3);
    *(unsigned char *)(a1 + 8) = 0x80;
  }
  return a1;
}

uint64_t uprv_decNumberNextToward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v19 = 0;
  unint64_t v18 = 0;
  *(_OWORD *)int v17 = *(_OWORD *)a4;
  *(_OWORD *)&v17[3] = *(_OWORD *)(a4 + 12);
  int v16 = 0;
  if ((*(unsigned char *)(a2 + 8) & 0x30) != 0 || (*(unsigned char *)(a3 + 8) & 0x30) != 0)
  {
    sub_18C909E68(a1, a2, a3, (int *)a4, &v16);
  }
  else
  {
    int v10 = sub_18C90A814(a2, a3, 0);
    if (v10 == 0x80000000)
    {
      int v8 = 16;
      goto LABEL_5;
    }
    if (v10)
    {
      unsigned int v12 = *(unsigned __int8 *)(a2 + 8);
      if (v10 < 0)
      {
        if (v12 >= 0xC0)
        {
          sub_18C90A534(a1, (int *)a4);
          *(unsigned char *)(a1 + 8) = 0x80;
          return a1;
        }
        int v14 = 0;
        char v13 = 0;
      }
      else
      {
        if ((v12 & 0xC0) == 0x40)
        {
          sub_18C90A534(a1, (int *)a4);
          return a1;
        }
        char v13 = 0x80;
        int v14 = 6;
      }
      v17[3] = v14;
      LOWORD(v19) = 256;
      unint64_t v18 = 0xC465360000000001;
      sub_18C9068F8((int *)a1, (int *)a2, (uint64_t)&v18, v17, v13, &v16);
      if ((*(unsigned char *)(a1 + 8) & 0x70) == 0)
      {
        int v15 = *(_DWORD *)a1;
        if ((*(unsigned char *)(a1 + 9) || v15 != 1) && *(_DWORD *)(a1 + 4) + v15 > *(_DWORD *)(a4 + 8)) {
          return a1;
        }
      }
    }
    else
    {
      char v11 = *(unsigned char *)(a3 + 8);
      uprv_decNumberCopy(a1, (unsigned int *)a2);
      *(unsigned char *)(a1 + 8) = v11 & 0x80 | *(unsigned char *)(a1 + 8) & 0x7F;
    }
  }
  int v8 = v16;
  if (v16) {
LABEL_5:
  }
    sub_18C90684C(a1, v8, a4);
  return a1;
}

uint64_t sub_18C90A814(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(unsigned char *)(a1 + 9) && *(_DWORD *)a1 == 1)
  {
    BOOL v3 = (*(unsigned char *)(a1 + 8) & 0x70) == 0;
    BOOL v4 = (*(unsigned char *)(a1 + 8) & 0x70) != 0;
    if (!a3) {
      goto LABEL_4;
    }
LABEL_7:
    if (*(unsigned char *)(a2 + 9) || *(_DWORD *)a2 != 1)
    {
      if (v3) {
        return 0xFFFFFFFFLL;
      }
      int v6 = *(unsigned __int8 *)(a2 + 8);
    }
    else
    {
      int v6 = *(unsigned __int8 *)(a2 + 8);
      char v7 = (v6 & 0x70) == 0 || v3;
      if ((v6 & 0x70) != 0) {
        uint64_t v8 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v8 = v4;
      }
      if (v7) {
        return v8;
      }
    }
    int v5 = 1;
    goto LABEL_35;
  }
  BOOL v3 = 0;
  BOOL v4 = 1;
  if (a3) {
    goto LABEL_7;
  }
LABEL_4:
  if (v3) {
    int v5 = 0;
  }
  else {
    int v5 = (*(char *)(a1 + 8) >> 31) | 1;
  }
  if (*(unsigned char *)(a2 + 9) || *(_DWORD *)a2 != 1 || (int v6 = *(unsigned __int8 *)(a2 + 8), (v6 & 0x70) != 0))
  {
    int v6 = *(unsigned __int8 *)(a2 + 8);
    int v9 = ((char)v6 >> 7) | 1;
  }
  else
  {
    int v9 = 0;
  }
  BOOL v10 = v5 < v9;
  if (v5 > v9) {
    return 1;
  }
  char v11 = v5 < v9 || v3;
  if (v10) {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v8 = 0;
  }
  if ((v11 & 1) == 0)
  {
LABEL_35:
    int v12 = *(unsigned __int8 *)(a1 + 8);
    if (((v6 | v12) & 0x40) != 0)
    {
      if ((v12 & 0x40) != 0) {
        LODWORD(v8) = 0;
      }
      else {
        LODWORD(v8) = -v5;
      }
      if ((v6 & 0x40) != 0) {
        return v8;
      }
      else {
        return v5;
      }
    }
    else
    {
      int v13 = *(_DWORD *)(a1 + 4);
      int v14 = *(_DWORD *)(a2 + 4);
      BOOL v15 = v13 <= v14;
      if (v13 <= v14) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = a1;
      }
      if (v15) {
        uint64_t v17 = a1;
      }
      else {
        uint64_t v17 = a2;
      }
      if (v15) {
        int v18 = v5;
      }
      else {
        int v18 = -v5;
      }
      int v19 = *(_DWORD *)v17;
      if (*(int *)v17 <= 49) {
        int v19 = byte_18CA91A00[v19];
      }
      int v20 = *(_DWORD *)v16;
      if (*(int *)v16 <= 49) {
        int v20 = byte_18CA91A00[v20];
      }
      int v21 = sub_18C90D104((char *)(v17 + 9), v19, (unsigned __int8 *)(v16 + 9), v20, *(_DWORD *)(v16 + 4) - *(_DWORD *)(v17 + 4));
      LODWORD(v8) = v21 * v18;
      if (v21 == 0x80000000) {
        return 0x80000000;
      }
      else {
        return v8;
      }
    }
  }
  return v8;
}

uint64_t uprv_decNumberCopySign(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  char v3 = *(unsigned char *)(a3 + 8);
  uint64_t result = uprv_decNumberCopy(a1, a2);
  *(unsigned char *)(result + 8) = v3 & 0x80 | *(unsigned char *)(result + 8) & 0x7F;
  return result;
}

BOOL uprv_decNumberIsNormal(int *a1, uint64_t a2)
{
  if ((a1[2] & 0x70) != 0) {
    return 0;
  }
  int v2 = *a1;
  return (*((unsigned char *)a1 + 9) || v2 != 1) && v2 + a1[1] > *(_DWORD *)(a2 + 8);
}

uint64_t uprv_decNumberOr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (*(_DWORD *)(a2 + 4)
    || *(unsigned __int8 *)(a2 + 8) > 0xFu
    || *(_DWORD *)(a3 + 4)
    || *(unsigned __int8 *)(a3 + 8) >= 0x10u)
  {
LABEL_33:
    *(void *)a1 = 1;
    *(_WORD *)(a1 + 8) = 32;
    uprv_decContextSetStatus((uint64_t)a4, 128);
    return a1;
  }
  unsigned int v5 = *(_DWORD *)a2;
  if (*(int *)a2 <= 49) {
    unsigned int v5 = byte_18CA91A00[v5];
  }
  unsigned int v6 = *(_DWORD *)a3;
  if (*(int *)a3 <= 49) {
    unsigned int v6 = byte_18CA91A00[v6];
  }
  unint64_t v7 = a1 + 9;
  unsigned int v8 = *a4;
  if ((int)*a4 <= 49) {
    unsigned int v8 = byte_18CA91A00[v8];
  }
  unint64_t v9 = v7 + v8 - 1;
  int v10 = a1 + 9;
  if (v7 <= v9)
  {
    unint64_t v11 = a2 + 9 + v5 - 1;
    unint64_t v12 = a3 + 9 + v6 - 1;
    uint64_t v13 = 9;
    do
    {
      unsigned int v14 = a2 + v13 <= v11 ? *(unsigned __int8 *)(a2 + v13) : 0;
      unsigned int v15 = a3 + v13 <= v12 ? *(unsigned __int8 *)(a3 + v13) : 0;
      *(unsigned char *)(a1 + v13) = 0;
      if (v15 | v14)
      {
        if ((v15 | v14)) {
          *(unsigned char *)(a1 + v13) = 1;
        }
        if (((v15 - 10 * ((429496730 * (unint64_t)v15) >> 32)) | (v14 - 10 * ((429496730 * (unint64_t)v14) >> 32))) >= 2) {
          goto LABEL_33;
        }
      }
      int v10 = a1 + ++v13;
    }
    while (a1 + v13 <= v9);
  }
  int v16 = v10 - v7;
  if (v10 - (int)v7 >= 1)
  {
    uint64_t v17 = (unsigned char *)(v7 + (v16 - 1));
    int v18 = v10 - a1 - 10;
    do
    {
      if (*v17) {
        BOOL v19 = 1;
      }
      else {
        BOOL v19 = v18 == 0;
      }
      if (v19) {
        break;
      }
      --v17;
      --v18;
    }
    while ((unint64_t)v17 >= v7);
    int v16 = v18 + 1;
  }
  *(_DWORD *)a1 = v16;
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 0;
  return a1;
}

int *uprv_decNumberPlus(int *a1, uint64_t a2, int *a3)
{
  v8[2] = 0;
  int v5 = *(_DWORD *)(a2 + 4);
  int v7 = 0;
  v8[0] = 1;
  v8[1] = v5;
  sub_18C9068F8(a1, v8, a2, a3, 0, &v7);
  if (v7) {
    sub_18C90684C((uint64_t)a1, v7, (uint64_t)a3);
  }
  return a1;
}

uint64_t uprv_decNumberMultiply(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C908E7C(a1, a2, a3, a4, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t uprv_decNumberPower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = (_OWORD *)a2;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)a4;
  uint64_t v39 = 0;
  memset(v38, 0, 28);
  int v37 = 0;
  uint64_t v36 = 0;
  memset(v41, 0, 60);
  memset(v40, 0, 60);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v10 = *(unsigned char *)(a3 + 8);
  if (((v10 | v9) & 0x70) != 0)
  {
    if (((v10 | v9) & 0x30) != 0)
    {
      sub_18C909E68(a1, a2, a3, (int *)a4, &v39);
      goto LABEL_66;
    }
    if ((*(unsigned char *)(a3 + 8) & 0x40) != 0)
    {
      if ((*(unsigned char *)(a2 + 8) & 0x80) != 0)
      {
        if (*(unsigned char *)(a2 + 9)) {
          goto LABEL_46;
        }
        int v18 = 128;
        if ((v9 & 0x70) != 0 || *(_DWORD *)v6 != 1) {
          goto LABEL_67;
        }
      }
      LOWORD(v37) = 256;
      uint64_t v36 = 1;
      uprv_decNumberCompare((uint64_t)v41, (uint64_t)v6, (uint64_t)&v36, (int *)a4);
      *(_WORD *)(a1 + 8) = 0;
      *(void *)a1 = 1;
      if (SBYTE8(v41[0]) < 0)
      {
        if ((v10 & 0x80) == 0) {
          goto LABEL_66;
        }
      }
      else
      {
        if (!BYTE9(v41[0]))
        {
          int v23 = *(_DWORD *)a4;
          *(unsigned char *)(a1 + 9) = 1;
          *(_DWORD *)a1 = sub_18C90B2C8((unsigned char *)(a1 + 9), 1, v23 - 1);
          *(_DWORD *)(a1 + 4) = 1 - v23;
          int v18 = 2080;
          goto LABEL_67;
        }
        if ((v10 & 0x80) != 0) {
          goto LABEL_66;
        }
      }
      char v17 = 64;
LABEL_23:
      *(unsigned char *)(a1 + 8) = v17;
      goto LABEL_66;
    }
  }
  int v11 = sub_18C90B41C((int *)a3);
  int v12 = v11;
  if ((((v9 & 0x80u) != 0) & v11) != 0) {
    char v13 = 0x80;
  }
  else {
    char v13 = 0;
  }
  if ((v9 & 0x40) != 0)
  {
    *(_WORD *)(a1 + 8) = 0;
    *(void *)a1 = 1;
    if (!v11)
    {
      *(unsigned char *)(a1 + 9) = 1;
      goto LABEL_66;
    }
    if (v11 != 0x80000000 || (*((char *)v6 + 8) & 0x80000000) == 0)
    {
      char v17 = v13 | 0x40;
      if ((v10 & 0x80u) != 0) {
        char v17 = v13;
      }
      goto LABEL_23;
    }
    goto LABEL_46;
  }
  if (!*((unsigned char *)v6 + 9) && (v9 & 0x70) == 0 && *(_DWORD *)v6 == 1)
  {
    if (v11)
    {
      char v17 = v13 | 0x40;
      *(void *)a1 = 1;
      if ((v10 & 0x80u) == 0) {
        char v17 = v13;
      }
      *(unsigned char *)(a1 + 9) = 0;
      goto LABEL_23;
    }
LABEL_46:
    int v18 = 128;
    goto LABEL_67;
  }
  if (v11 + 0x80000000 > 3 || v11 == -2147483647)
  {
    if (!v11)
    {
      *(_WORD *)(a1 + 8) = 256;
      *(void *)a1 = 1;
      goto LABEL_66;
    }
    if (v11 >= 0) {
      int v16 = v11;
    }
    else {
      int v16 = -v11;
    }
    *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)(a4 + 12);
    v38[0] = *(_OWORD *)a4;
    int v19 = *(_DWORD *)a3 + v8 + *(_DWORD *)(a3 + 4);
    int v15 = v19 + 2;
    HIDWORD(v38[0]) = 3;
    LODWORD(v38[0]) = v19 + 2;
    if (v19 > 999999997) {
      goto LABEL_46;
    }
  }
  else
  {
    if ((v9 & 0x80) != 0) {
      goto LABEL_46;
    }
    if (sub_18C908580((uint64_t)v6, (int *)a4, (int *)&v39) || sub_18C908580(a3, (int *)a4, (int *)&v39)) {
      goto LABEL_66;
    }
    uprv_decContextDefault((uint64_t)v38, 64);
    *(void *)((char *)v38 + 4) = 0xFFF0BDC1000F423FLL;
    BYTE8(v38[1]) = 0;
    int v14 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 <= *(_DWORD *)a4) {
      int v14 = *(_DWORD *)a4;
    }
    int v15 = v14 + 10;
    LODWORD(v38[0]) = v14 + 10;
    int v16 = v12;
  }
  if (v15 <= 49)
  {
    uint64_t v22 = 0;
    size_t v20 = byte_18CA91A00[v15] + 11;
    int v21 = v41;
  }
  else
  {
    size_t v20 = (v15 + 11);
    int v21 = uprv_malloc(v20);
    uint64_t v22 = v21;
    if (!v21)
    {
      int v18 = v39 | 0x10;
      goto LABEL_67;
    }
  }
  char v35 = v22;
  if (v12 + 0x80000000 <= 3 && v12 != -2147483647)
  {
    uint64_t v24 = sub_18C909768((uint64_t)v21, (uint64_t)v6, (uint64_t)v38, (int *)&v39);
    int v26 = *(unsigned __int8 *)(v24 + 9);
    int v25 = (unsigned char *)(v24 + 9);
    if (v26 || *(_DWORD *)v21 != 1 || (*((unsigned char *)v21 + 8) & 0x70) != 0)
    {
      uint64_t v27 = sub_18C908E7C((uint64_t)v21, (uint64_t)v21, a3, (int *)v38, (int *)&v39);
      sub_18C908634(v27, (uint64_t)v21, (uint64_t)v38, (int *)&v39);
    }
    else
    {
      *int v25 = 1;
      if (v12 == 0x80000000)
      {
        int v31 = *(_DWORD *)a4;
        int v28 = 0;
        *(_DWORD *)int v21 = sub_18C90B2C8(v25, 1, *(_DWORD *)a4 - 1);
        *((_DWORD *)v21 + 1) = 1 - v31;
        LODWORD(v39) = v39 | 0x820;
        goto LABEL_61;
      }
    }
    int v28 = 0;
LABEL_61:
    *(unsigned char *)(a1 + 8) = *((unsigned char *)v21 + 8);
    int v29 = *(_DWORD *)v21;
    *(_DWORD *)(a1 + 4) = *((_DWORD *)v21 + 1);
    sub_18C906460((unsigned char *)a1, (int *)a4, (char *)v21 + 9, v29, (int *)&v39 + 1, (int *)&v39);
    sub_18C9066E0((unsigned int *)a1, a4, (int *)&v39 + 1, (int *)&v39);
    goto LABEL_62;
  }
  *((_WORD *)v21 + 4) = 256;
  *(void *)int v21 = 1;
  if (*(char *)(a3 + 8) < 0)
  {
    uprv_decNumberCopy((uint64_t)&v36, (unsigned int *)v21);
    sub_18C9078D8((uint64_t)v21, (uint64_t)&v36, (uint64_t)v6, (int *)v38, 128, (int *)&v39);
    if (v15 < 50)
    {
      int v28 = 0;
      unsigned int v6 = v40;
    }
    else
    {
      int v28 = uprv_malloc(v20);
      unsigned int v6 = v28;
      if (!v28)
      {
        LODWORD(v39) = v39 | 0x10;
        goto LABEL_62;
      }
    }
    uprv_decNumberCopy((uint64_t)v6, (unsigned int *)v21);
    uprv_decNumberCopy((uint64_t)v21, (unsigned int *)&v36);
  }
  else
  {
    int v28 = 0;
  }
  int v32 = 0;
  for (int i = 30; ; --i)
  {
    int v34 = v39 & 0x2200;
    if ((v39 & 0x2200) != 0
      && ((v39 & 0x200) != 0 || !*((unsigned char *)v21 + 9) && *(_DWORD *)v21 == 1 && (*((unsigned char *)v21 + 8) & 0x70) == 0))
    {
      break;
    }
    v16 *= 2;
    if (v16 < 0)
    {
      sub_18C908E7C((uint64_t)v21, (uint64_t)v21, (uint64_t)v6, (int *)v38, (int *)&v39);
      if (!i)
      {
        int v34 = v39 & 0x2200;
LABEL_93:
        if (!v34) {
          goto LABEL_61;
        }
        break;
      }
      int v32 = 1;
LABEL_90:
      sub_18C908E7C((uint64_t)v21, (uint64_t)v21, (uint64_t)v21, (int *)v38, (int *)&v39);
      continue;
    }
    if (!i) {
      goto LABEL_93;
    }
    if (v32) {
      goto LABEL_90;
    }
  }
  *((unsigned char *)v21 + 8) = *((unsigned char *)v21 + 8) & 0x7F | v13;
  sub_18C9066E0((unsigned int *)v21, a4, (int *)&v39 + 1, (int *)&v39);
  uprv_decNumberCopy(a1, (unsigned int *)v21);
LABEL_62:
  if (v35) {
    uprv_free(v35);
  }
  if (v28) {
    uprv_free(v28);
  }
LABEL_66:
  int v18 = v39;
  if (v39) {
LABEL_67:
  }
    sub_18C90684C(a1, v18, a4);
  return a1;
}

uint64_t sub_18C90B2C8(unsigned char *a1, uint64_t a2, int a3)
{
  if (!a3) {
    return a2;
  }
  uint64_t result = (a3 + a2);
  if ((int)result > 1)
  {
    if ((int)a2 <= 49) {
      LODWORD(a2) = byte_18CA91A00[(int)a2];
    }
    int v5 = &a1[a2 - 1];
    unsigned int v6 = a3;
    if (a3 <= 49) {
      unsigned int v6 = byte_18CA91A00[a3];
    }
    uint64_t v7 = v6;
    int v8 = &v5[v6];
    unsigned int v9 = a3 - v6;
    unsigned int v10 = v9 + 1;
    if (v9)
    {
      int v12 = result;
      if (result <= 0x31) {
        int v12 = byte_18CA91A00[result];
      }
      if (v5 < a1) {
        goto LABEL_22;
      }
      char v11 = 0;
      uint64_t v13 = 1 - (int)v10;
      uint64_t v14 = (int)v10;
      unint64_t v15 = (unint64_t)&a1[v12 - 1];
      int v16 = dword_18CA91A34[v13];
      int v17 = dword_18CA919D8[v13];
      int v18 = dword_18CA919D8[v14];
      do
      {
        unsigned int v19 = *v5;
        unsigned int v20 = ((v19 >> v13) * v16) >> 17;
        if ((unint64_t)&v5[v7] <= v15) {
          v5[v7] = v20 + v11;
        }
        char v11 = v18 * (v19 - v20 * v17);
        --v5;
      }
      while (v5 >= a1);
    }
    else
    {
      if (v5 < a1) {
        goto LABEL_22;
      }
      do
      {
        v5[v7] = *v5;
        --v5;
      }
      while (v5 >= a1);
      char v11 = 0;
    }
    int v8 = &v5[v7];
    while (v8 >= a1)
    {
      *v8-- = v11;
LABEL_22:
      char v11 = 0;
    }
  }
  else
  {
    *a1 *= dword_18CA919D8[a3];
  }
  return result;
}

uint64_t sub_18C90B41C(int *a1)
{
  int v1 = *a1;
  char v2 = *((unsigned char *)a1 + 8);
  char v3 = (char *)a1 + 9;
  if (*((unsigned char *)a1 + 9)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v1 == 1;
  }
  if (v4 && (v2 & 0x70) == 0) {
    return 0;
  }
  int v6 = a1[1];
  if (v6 < 0)
  {
    if (-v6 < 1) {
      int v10 = -v6;
    }
    else {
      int v10 = 1;
    }
    int v11 = 1 - v6;
    do
    {
      if (*v3) {
        return 0x80000000;
      }
      ++v3;
      --v11;
    }
    while (v11 > 1);
    if (v10 == 1) {
      goto LABEL_21;
    }
    unsigned int v12 = *v3++;
    if ((((v12 >> (v10 - 1)) * dword_18CA91A34[v10 - 1]) >> 17) * dword_18CA919D8[v10 - 1] != v12) {
      return 0x80000000;
    }
    int v7 = 2 - v10;
    if (2 != v10) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
  int v7 = a1[1];
  if (!v6)
  {
LABEL_21:
    int v13 = *v3++;
    int v8 = v13;
    int v7 = 1;
    goto LABEL_22;
  }
LABEL_10:
  int v8 = 0;
LABEL_22:
  int v14 = v6 + v1;
  if (v14 > 10) {
    return v8 & 1 | 0x80000002;
  }
  if (v7 >= v14)
  {
    int v17 = v8;
  }
  else
  {
    unint64_t v15 = &dword_18CA919D8[v7];
    uint64_t v16 = v14 - (uint64_t)v7;
    int v17 = v8;
    do
    {
      int v19 = *v3++;
      int v18 = v19;
      int v20 = *v15++;
      v17 += v20 * v18;
      --v16;
    }
    while (v16);
    int v7 = v14;
  }
  if (v14 == 10)
  {
    int v21 = v17 / dword_18CA919D8[v7 - 1];
    int v22 = *(v3 - 1);
    BOOL v23 = v2 >= 0 || v17 <= 1999999997;
    BOOL v24 = !v23;
    if (v21 != v22 || v24) {
      return v8 & 1 | 0x80000002;
    }
    if (v17 > 999999999 && v2 > -1) {
      return v8 & 1 | 0x80000002;
    }
  }
  if (v2 >= 0) {
    return v17;
  }
  return -v17;
}

unsigned int *uprv_decNumberQuantize(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = 0;
  sub_18C90B5FC(a1, a2, a3, a4, 1, &v7);
  if (v7) {
    sub_18C90684C((uint64_t)a1, v7, a4);
  }
  return a1;
}

unsigned int *sub_18C90B5FC(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  int v10 = *(_DWORD *)a4;
  int v28 = 0;
  int v11 = *(unsigned __int8 *)(a2 + 8);
  int v12 = *(unsigned __int8 *)(a3 + 8);
  if (((v12 | v11) & 0x70) == 0)
  {
    int v13 = *(_DWORD *)(a4 + 8) - v10 + 1;
    if (a5) {
      int v14 = *(_DWORD *)(a3 + 4);
    }
    else {
      int v14 = sub_18C90B41C((int *)a3);
    }
    BOOL v16 = v14 + 0x80000000 <= 3 && v14 != -2147483647 || v14 < v13;
    if (!v16 && v14 <= *(_DWORD *)(a4 + 4))
    {
      int v20 = *(_DWORD *)a2;
      if (!*(unsigned char *)(a2 + 9) && (v11 & 0x70) == 0 && v20 == 1)
      {
        uprv_decNumberCopy((uint64_t)a1, (unsigned int *)a2);
        goto LABEL_36;
      }
      unsigned int v21 = *(_DWORD *)(a2 + 4);
      int v22 = v14 - v21;
      if ((int)(v20 - (v14 - v21)) <= v10)
      {
        if (v22 >= 1)
        {
          *(_OWORD *)uint64_t v27 = *(_OWORD *)a4;
          *(_OWORD *)&v27[12] = *(_OWORD *)(a4 + 12);
          *(_DWORD *)uint64_t v27 = v20 - (v14 - v21);
          *((unsigned char *)a1 + 8) = v11;
          a1[1] = v21;
          sub_18C906460(a1, (int *)v27, (char *)(a2 + 9), v20, &v28, a6);
          sub_18C90D2CC((uint64_t)a1, v27, v28, a6);
          int v28 = 0;
          int v23 = a1[1];
          if (v23 > v14)
          {
            uint64_t v24 = *a1;
            if (v24 == v10)
            {
              unsigned int v17 = *a6 & 0xFFFFF75F;
              goto LABEL_18;
            }
            unsigned int v25 = sub_18C90B2C8((unsigned char *)a1 + 9, v24, 1);
            int v23 = a1[1] - 1;
            *a1 = v25;
            a1[1] = v23;
          }
          int v14 = v23;
          goto LABEL_37;
        }
        uprv_decNumberCopy((uint64_t)a1, (unsigned int *)a2);
        if ((v22 & 0x80000000) == 0)
        {
          int v14 = a1[1];
          goto LABEL_37;
        }
        unsigned int v26 = sub_18C90B2C8((unsigned char *)a1 + 9, *a1, -v22);
        int v14 = a1[1] + v22;
        *a1 = v26;
LABEL_36:
        a1[1] = v14;
LABEL_37:
        if (v14 <= (int)(*(_DWORD *)(a4 + 4) - *a1 + 1))
        {
          sub_18C9066E0(a1, a4, &v28, a6);
          unsigned int v18 = *a6 & 0xFFFFDFFF;
          goto LABEL_19;
        }
      }
    }
LABEL_17:
    unsigned int v17 = *a6;
LABEL_18:
    unsigned int v18 = v17 | 0x80;
LABEL_19:
    *a6 = v18;
    return a1;
  }
  if (((v12 | v11) & 0x30) == 0)
  {
    if (((v12 ^ v11) & 0x40) == 0)
    {
      uprv_decNumberCopy((uint64_t)a1, (unsigned int *)a2);
      return a1;
    }
    goto LABEL_17;
  }
  sub_18C909E68((uint64_t)a1, a2, a3, (int *)a4, a6);
  return a1;
}

uint64_t uprv_decNumberReduce(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v8 = 0;
  if ((*(unsigned char *)(a2 + 8) & 0x30) != 0)
  {
    sub_18C909E68(a1, a2, 0, a3, (_DWORD *)&v8 + 1);
  }
  else
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    int v5 = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    sub_18C906460((unsigned char *)a1, a3, (char *)(a2 + 9), v5, (int *)&v8, (int *)&v8 + 1);
    sub_18C9066E0((unsigned int *)a1, (uint64_t)a3, (int *)&v8, (int *)&v8 + 1);
    sub_18C90B900((unsigned int *)a1, (uint64_t)a3, 1, 0, &v7);
  }
  if (HIDWORD(v8)) {
    sub_18C90684C(a1, SHIDWORD(v8), (uint64_t)a3);
  }
  return a1;
}

unsigned int *sub_18C90B900(unsigned int *a1, uint64_t a2, int a3, int a4, int *a5)
{
  *a5 = 0;
  if ((a1[2] & 0x70) == 0)
  {
    int v6 = (char *)a1 + 9;
    if ((*((unsigned char *)a1 + 9) & 1) == 0)
    {
      uint64_t v8 = *a1;
      if (*((unsigned char *)a1 + 9)) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = v8 == 1;
      }
      if (v9)
      {
        a1[1] = 0;
      }
      else if ((int)v8 >= 2)
      {
        uint64_t v11 = 0;
        int v12 = v8 - 1;
        int v13 = a1[1];
        while (!(-10 * ((26215 * (*((unsigned __int8 *)a1 + v11 + 9) >> 1)) >> 17)
                + *((unsigned __int8 *)a1 + v11 + 9)))
        {
          if (!a3 && v13 <= 0)
          {
            if (!v13) {
              break;
            }
            ++v13;
          }
          if (v12 == ++v11) {
            goto LABEL_19;
          }
        }
        int v12 = v11;
LABEL_19:
        if (v12)
        {
          if (a4 || !*(unsigned char *)(a2 + 24)) {
            goto LABEL_25;
          }
          int v15 = *(_DWORD *)(a2 + 4) - (a1[1] + *(_DWORD *)a2);
          if (v12 >= v15 + 1) {
            int v12 = v15 + 1;
          }
          if (v15 + 1 >= 1)
          {
LABEL_25:
            if ((int)v8 <= 49) {
              uint64_t v8 = byte_18CA91A00[(int)v8];
            }
            sub_18C90BE04(v6, v8, v12);
            unsigned int v16 = a1[1] + v12;
            *a1 -= v12;
            a1[1] = v16;
            *a5 = v12;
          }
        }
      }
    }
  }
  return a1;
}

unsigned int *uprv_decNumberRescale(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = 0;
  sub_18C90B5FC(a1, a2, a3, a4, 0, &v7);
  if (v7) {
    sub_18C90684C((uint64_t)a1, v7, a4);
  }
  return a1;
}

uint64_t uprv_decNumberRemainder(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C9078D8(a1, a2, a3, a4, 64, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t uprv_decNumberRemainderNear(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C9078D8(a1, a2, a3, a4, 16, &v7);
  if (v7) {
    sub_18C90684C(a1, v7, (uint64_t)a4);
  }
  return a1;
}

uint64_t uprv_decNumberRotate(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v39 = 0;
  if ((*(unsigned char *)(a2 + 8) & 0x30) != 0 || (*(unsigned char *)(a3 + 8) & 0x30) != 0)
  {
    sub_18C909E68(a1, a2, a3, a4, &v39);
    int v7 = v39;
    if (!v39) {
      return a1;
    }
    goto LABEL_10;
  }
  if ((*(unsigned char *)(a3 + 8) & 0x40) != 0
    || *(_DWORD *)(a3 + 4)
    || (int v8 = sub_18C90B41C((int *)a3), v9 = v8, v8 + 0x80000000 <= 3) && v8 != -2147483647
    || (v8 >= 0 ? (int v11 = v8) : (int v11 = -v8), v11 > *a4))
  {
    int v7 = 128;
LABEL_10:
    sub_18C90684C(a1, v7, (uint64_t)a4);
    return a1;
  }
  uprv_decNumberCopy(a1, (unsigned int *)a2);
  if (v9 < 0) {
    v9 += *a4;
  }
  if (v9)
  {
    int v12 = *a4;
    if (v9 != *a4 && (*(unsigned char *)(a1 + 8) & 0x40) == 0)
    {
      int v14 = (unsigned __int8 *)(a1 + 9);
      unsigned int v13 = *(_DWORD *)a1;
      if (*(int *)a1 <= 49) {
        unsigned int v13 = byte_18CA91A00[v13];
      }
      int v15 = &v14[v13];
      unsigned int v16 = *a4;
      if (v12 <= 49) {
        unsigned int v16 = byte_18CA91A00[v12];
      }
      unsigned int v17 = &v14[v16 - 1];
      if (v15 <= v17)
      {
        uint64_t v18 = a1 + v13;
        unint64_t v19 = a1 + v16 + 9;
        if (v18 + 10 > v19) {
          unint64_t v19 = v18 + 10;
        }
        bzero(v15, v19 - v18 - 9);
        int v12 = *a4;
      }
      *(_DWORD *)a1 = v12;
      int v20 = v12;
      if (v12 <= 49) {
        int v20 = byte_18CA91A00[v12];
      }
      uint64_t v21 = (v12 - v9);
      if (v12 != v9)
      {
        int v22 = v12 - v20;
        int v23 = v22 + 1;
        if (v22)
        {
          unsigned int v24 = *v14 % dword_18CA919D8[-v22];
          sub_18C90BE04((unsigned char *)(a1 + 9), v21, -v22);
          *v17 += dword_18CA919D8[v23] * v24;
        }
        unsigned int v25 = &v14[v21];
        if (v25 < v17)
        {
          unint64_t v26 = v21 + a1 + 10;
          uint64_t v27 = v17;
          do
          {
            unsigned __int8 v28 = *(unsigned char *)(v26 - 1);
            *(unsigned char *)(v26 - 1) = *v27;
            *v27-- = v28;
            BOOL v29 = v26++ >= (unint64_t)v27;
          }
          while (!v29);
        }
        int v30 = v25 - 1;
        if (v14 < v30)
        {
          unint64_t v31 = a1 + 10;
          do
          {
            unsigned __int8 v32 = *(unsigned char *)(v31 - 1);
            *(unsigned char *)(v31 - 1) = *v30;
            *v30-- = v32;
            BOOL v29 = v31++ >= (unint64_t)v30;
          }
          while (!v29);
        }
        if (v14 < v17)
        {
          unint64_t v33 = a1 + 10;
          int v34 = v17;
          do
          {
            unsigned __int8 v35 = *(unsigned char *)(v33 - 1);
            *(unsigned char *)(v33 - 1) = *v34;
            *v34-- = v35;
            BOOL v29 = v33++ >= (unint64_t)v34;
          }
          while (!v29);
        }
      }
      int v36 = v17 - v14 + 1;
      if ((v17 - v14) <= 0x7FFFFFFE)
      {
        int v37 = &v14[v17 - v14];
        do
        {
          if (*v37) {
            BOOL v38 = 1;
          }
          else {
            BOOL v38 = v36 == 1;
          }
          if (v38) {
            break;
          }
          --v36;
          --v37;
        }
        while (v37 >= v14);
      }
      *(_DWORD *)a1 = v36;
    }
  }
  return a1;
}

uint64_t sub_18C90BE04(unsigned char *a1, uint64_t a2, int a3)
{
  if (!a3) {
    return a2;
  }
  if (a3 == a2)
  {
    *a1 = 0;
    return 1;
  }
  if (a3 > 49)
  {
    LODWORD(v3) = a3;
  }
  else
  {
    uint64_t v3 = byte_18CA91A00[a3];
    uint64_t v4 = a3 - (v3 - 1);
    if (v4 != 1)
    {
      uint64_t v5 = byte_18CA91A00[v3 - 1];
      int v6 = dword_18CA91A34[v4];
      unsigned int v7 = ((a1[v5] >> v4) * v6) >> 17;
      uint64_t v8 = v3 - a3;
      *a1 = v7;
      int v9 = a2 - a3 - (1 - v4);
      LODWORD(v10) = a1;
      if (v9 >= 1)
      {
        int v11 = dword_18CA919D8[v4];
        int v12 = dword_18CA919D8[v8];
        int v13 = ~a3 + a2;
        uint64_t v14 = v5 + 1;
        int v10 = a1;
        do
        {
          unsigned int v15 = v10[v14];
          unsigned int v16 = ((v15 >> v4) * v6) >> 17;
          *int v10 = v7 + (v15 - v16 * v11) * v12;
          BOOL v17 = __OFSUB__(v13--, 1);
          if (v13 < 0 != v17) {
            break;
          }
          *++int v10 = v16;
          int v9 = v9 - v4 - v8;
          unsigned int v7 = ((v15 >> v4) * v6) >> 17;
        }
        while (v9 > 0);
      }
      return (v10 - a1 + 1);
    }
  }
  LODWORD(v18) = a1;
  if (v3 < (uint64_t)(int)a2)
  {
    uint64_t v18 = a1;
    do
    {
      *uint64_t v18 = v18[v3];
      ++v18;
    }
    while (&v18[v3] < &a1[(int)a2]);
  }
  return (v18 - a1);
}

double uprv_decNumberSameQuantum(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3 = *(unsigned char *)(a2 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a3 + 8);
  if (((v4 | v3) & 0x70) != 0)
  {
    int v5 = v3 & 0x30;
    int v6 = v4 & 0x30;
    int v7 = (v4 >> 6) & 1;
    if ((*(unsigned char *)(a2 + 8) & 0x40) != 0) {
      BOOL v8 = v7;
    }
    else {
      BOOL v8 = 0;
    }
    if (v5) {
      BOOL v9 = v6 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      BOOL v8 = 1;
    }
  }
  else
  {
    BOOL v8 = *(_DWORD *)(a2 + 4) == *(_DWORD *)(a3 + 4);
  }
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)&double result = 1;
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 9) = v8;
  return result;
}

uint64_t uprv_decNumberScaleB(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v13 = 0;
  if ((*(unsigned char *)(a2 + 8) & 0x30) != 0 || (*(unsigned char *)(a3 + 8) & 0x30) != 0)
  {
    sub_18C909E68(a1, a2, a3, a4, &v13);
    goto LABEL_4;
  }
  if ((*(unsigned char *)(a3 + 8) & 0x40) == 0 && !*(_DWORD *)(a3 + 4))
  {
    int v8 = sub_18C90B41C((int *)a3);
    int v9 = v8;
    if (v8 + 0x80000000 > 3 || v8 == -2147483647)
    {
      int v11 = v8 >= 0 ? v8 : -v8;
      if (v11 <= 2 * (a4[1] + *a4))
      {
        uprv_decNumberCopy(a1, (unsigned int *)a2);
        if ((*(unsigned char *)(a1 + 8) & 0x40) == 0)
        {
          *(_DWORD *)(a1 + 4) += v9;
          int v12 = 0;
          sub_18C9066E0((unsigned int *)a1, (uint64_t)a4, &v12, &v13);
        }
LABEL_4:
        int v7 = v13;
        if (!v13) {
          return a1;
        }
        goto LABEL_11;
      }
    }
  }
  int v7 = 128;
LABEL_11:
  sub_18C90684C(a1, v7, (uint64_t)a4);
  return a1;
}

unsigned int *uprv_decNumberShift(unsigned int *a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v18 = 0;
  if ((*(unsigned char *)(a2 + 8) & 0x30) != 0 || (*(unsigned char *)(a3 + 8) & 0x30) != 0)
  {
    sub_18C909E68((uint64_t)a1, a2, a3, a4, &v18);
    int v7 = v18;
    if (!v18) {
      return a1;
    }
    goto LABEL_10;
  }
  if ((*(unsigned char *)(a3 + 8) & 0x40) != 0
    || *(_DWORD *)(a3 + 4)
    || (int v8 = sub_18C90B41C((int *)a3), v9 = v8, v8 + 0x80000000 <= 3) && v8 != -2147483647
    || (v8 >= 0 ? (int v11 = v8) : (int v11 = -v8), v11 > *a4))
  {
    int v7 = 128;
LABEL_10:
    sub_18C90684C((uint64_t)a1, v7, (uint64_t)a4);
    return a1;
  }
  uprv_decNumberCopy((uint64_t)a1, (unsigned int *)a2);
  if (v9 && (a1[2] & 0x40) == 0)
  {
    if (v9 < 1)
    {
      uint64_t v16 = *a1;
      if ((int)v16 > -v9)
      {
        if ((int)v16 <= 49) {
          uint64_t v16 = byte_18CA91A00[(int)v16];
        }
        sub_18C90BE04((unsigned char *)a1 + 9, v16, -v9);
        int v17 = *a1 + v9;
        goto LABEL_30;
      }
    }
    else
    {
      int v12 = *a4;
      if (v9 != *a4)
      {
        uint64_t v13 = *a1;
        BOOL v14 = __OFSUB__(v13 + v9, v12);
        int v15 = v13 + v9 - v12;
        if (!((v15 < 0) ^ v14 | (v15 == 0)))
        {
          sub_18C90C220((int *)a1, v15);
          uint64_t v13 = *a1;
        }
        if ((int)v13 > 1 || *((unsigned char *)a1 + 9)) {
          *a1 = sub_18C90B2C8((unsigned char *)a1 + 9, v13, v9);
        }
        return a1;
      }
    }
    *((unsigned char *)a1 + 9) = 0;
    int v17 = 1;
LABEL_30:
    *a1 = v17;
  }
  return a1;
}

int *sub_18C90C220(int *result, int a2)
{
  char v2 = (char *)result + 9;
  uint64_t v3 = *result;
  if ((int)v3 <= a2)
  {
    unsigned char *v2 = 0;
    int v7 = 1;
  }
  else
  {
    uint64_t v4 = v3 - a2;
    int v5 = v4;
    if ((int)v4 <= 49) {
      int v5 = byte_18CA91A00[v4];
    }
    int v6 = v4 - v5 + 1;
    if (v6 != 1) {
      v2[v5 - 1] = v2[v5 - 1] % dword_18CA919D8[v6];
    }
    int v7 = v5;
    if ((v5 - 1) <= 0x7FFFFFFE)
    {
      int v8 = &v2[v5 - 1];
      do
      {
        if (*v8) {
          BOOL v9 = 1;
        }
        else {
          BOOL v9 = v7 == 1;
        }
        if (v9) {
          break;
        }
        --v7;
        --v8;
      }
      while (v8 >= v2);
    }
  }
  *double result = v7;
  return result;
}

uint64_t uprv_decNumberSquareRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  long long v72 = 0uLL;
  int v74 = 0;
  uint64_t v73 = 0;
  int v70 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  int v67 = 0;
  memset(v80, 0, 48);
  memset(v79, 0, 60);
  memset(v78, 0, 60);
  unint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  if ((*(unsigned char *)(a2 + 8) & 0x70) != 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 0x40) == 0)
    {
      sub_18C909E68(a1, a2, 0, (int *)a3, &v68);
      goto LABEL_71;
    }
    if ((*(unsigned char *)(a2 + 8) & 0x80) == 0)
    {
      uprv_decNumberCopy(a1, (unsigned int *)a2);
      goto LABEL_71;
    }
    goto LABEL_21;
  }
  int v6 = *(int *)(a2 + 4) >> 1;
  if (!*(unsigned char *)(a2 + 9) && *(_DWORD *)a2 == 1)
  {
    int v7 = (unsigned int *)uprv_decNumberCopy(a1, (unsigned int *)a2);
    *(_DWORD *)(a1 + 4) = v6;
    sub_18C9066E0(v7, a3, (int *)&v68 + 1, (int *)&v68);
    goto LABEL_71;
  }
  if ((*(unsigned char *)(a2 + 8) & 0x80) != 0)
  {
LABEL_21:
    int v14 = 128;
    goto LABEL_72;
  }
  int v8 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 + 1 > *(_DWORD *)a2) {
    int v9 = *(_DWORD *)a3 + 1;
  }
  else {
    int v9 = *(_DWORD *)a2;
  }
  if (v9 <= 7) {
    uint64_t v10 = 7;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v8 <= 49) {
    int v8 = byte_18CA91A00[v8];
  }
  size_t v11 = (v8 + 11);
  if ((int)v11 < 49)
  {
    int v12 = 0;
    uint64_t v13 = v80;
  }
  else
  {
    int v12 = uprv_malloc(v11);
    uint64_t v13 = v12;
    if (!v12)
    {
      int v14 = 16;
LABEL_72:
      sub_18C90684C(a1, v14, a3);
      return a1;
    }
  }
  uint64_t v15 = v10 + 2;
  int v16 = v10 + 2;
  if (v10 <= 0x2F) {
    int v16 = byte_18CA91A00[v15];
  }
  memset(v71, 0, 28);
  int v65 = 0;
  int v66 = 0;
  size_t v17 = (v16 + 11);
  if ((int)v17 < 61)
  {
    int v60 = v6;
    int v61 = 0;
    int v62 = 0;
    uint64_t v21 = (int *)v78;
    int v18 = (unsigned int *)v79;
    goto LABEL_30;
  }
  int v18 = (unsigned int *)uprv_malloc((v16 + 11));
  unint64_t v19 = uprv_malloc(v17);
  int v20 = v19;
  if (v18 && v19)
  {
    int v60 = v6;
    int v61 = v19;
    int v62 = v18;
    uint64_t v21 = (int *)v19;
LABEL_30:
    uprv_decNumberCopy((uint64_t)v13, (unsigned int *)a2);
    int v22 = *v13 + v13[1];
    v13[1] = -*v13;
    uprv_decContextDefault((uint64_t)&v72, 64);
    *(void *)((char *)&v72 + 4) = 0xC46536013B9AC9FFLL;
    LODWORD(v72) = v10;
    LOBYTE(v76) = 0;
    LODWORD(v75) = 3;
    *((unsigned char *)v18 + 8) = 0;
    *int v18 = 3;
    if (v22)
    {
      ++v22;
      char v23 = 2;
      char v24 = 5;
      --v13[1];
      char v25 = 8;
      char v26 = 1;
      int v28 = -2;
      int v27 = -4;
    }
    else
    {
      char v23 = 8;
      char v24 = 1;
      char v25 = 2;
      char v26 = 5;
      int v27 = -3;
      int v28 = -3;
    }
    HIDWORD(v75) = v27;
    v18[1] = v28;
    BYTE1(v76) = 9;
    BYTE2(v76) = v26;
    BYTE3(v76) = v25;
    *((unsigned char *)v18 + 9) = 9;
    int v63 = (char *)v18 + 9;
    *((unsigned char *)v18 + 10) = v24;
    *((unsigned char *)v18 + 11) = v23;
    BOOL v29 = (int *)sub_18C908E7C((uint64_t)v18, (uint64_t)v18, (uint64_t)v13, (int *)&v72, &v67);
    sub_18C9068F8(v29, (int *)v18, (uint64_t)&v75, (int *)&v72, 0, &v67);
    LOWORD(v70) = 0;
    uint64_t v69 = 1;
    LOWORD(v76) = 1280;
    unint64_t v75 = 0xFFFFFFFF00000001;
    int v30 = 3;
    do
    {
      int v31 = 2 * v30 - 2;
      if (v31 >= (int)v15) {
        int v31 = v10 + 2;
      }
      LODWORD(v72) = v31;
      unsigned __int8 v32 = (int *)sub_18C9078D8((uint64_t)v21, (uint64_t)v13, (uint64_t)v18, (int *)&v72, 128, &v67);
      sub_18C9068F8(v32, v21, (uint64_t)v18, (int *)&v72, 0, &v67);
      sub_18C908E7C((uint64_t)v18, (uint64_t)v21, (uint64_t)&v75, (int *)&v72, &v67);
      int v30 = v72;
    }
    while ((int)v72 < (int)v15);
    v71[0] = *(_OWORD *)a3;
    *(_OWORD *)((char *)v71 + 12) = *(_OWORD *)(a3 + 12);
    HIDWORD(v71[0]) = 3;
    int v34 = v22;
    int v33 = v22 + (v22 < 0);
    int v35 = *v18;
    int v36 = v18[1] + v34 / 2;
    int v66 = 0;
    HIDWORD(v68) = 0;
    v18[1] = v36;
    sub_18C906460(v18, (int *)v71, v63, v35, (int *)&v68 + 1, &v66);
    sub_18C9066E0(v18, (uint64_t)v71, (int *)&v68 + 1, &v66);
    int v37 = v66;
    if ((v66 & 0x200) != 0)
    {
      LODWORD(v68) = v66;
      uprv_decNumberCopy(a1, v18);
      int v20 = v61;
LABEL_64:
      int v18 = v62;
      goto LABEL_65;
    }
    unsigned int v59 = v12;
    unsigned int v38 = v33 >> 1;
    unsigned int v58 = v66 & 0xFFFFF7DF;
    LODWORD(v68) = v66 & 0xFFFFF7DF;
    int v39 = *v18;
    v18[1] -= v33 >> 1;
    LODWORD(v72) = v72 - 1;
    HIDWORD(v75) = ~v39;
    char v40 = 0x80;
    uint64_t v41 = sub_18C9068F8(v21, (int *)v18, (uint64_t)&v75, (int *)&v72, 128, &v67);
    HIDWORD(v72) = 1;
    uint64_t v42 = sub_18C908E7C((uint64_t)v41, (uint64_t)v21, (uint64_t)v21, (int *)&v72, &v67);
    sub_18C90723C(v42, (uint64_t)v13, (uint64_t)v21, (int *)&v72, 1, &v67);
    if (((char)v21[2] & 0x80000000) == 0)
    {
      uint64_t v43 = sub_18C9068F8(v21, (int *)v18, (uint64_t)&v75, (int *)&v72, 0, &v67);
      HIDWORD(v72) = 5;
      uint64_t v44 = sub_18C908E7C((uint64_t)v43, (uint64_t)v21, (uint64_t)v21, (int *)&v72, &v67);
      sub_18C90723C(v44, (uint64_t)v21, (uint64_t)v13, (int *)&v72, 1, &v67);
      if (((char)v21[2] & 0x80000000) == 0) {
        goto LABEL_42;
      }
      char v40 = 0;
    }
    ++HIDWORD(v75);
    BYTE1(v76) = 1;
    BOOL v45 = sub_18C9068F8((int *)v18, (int *)v18, (uint64_t)&v75, (int *)&v72, v40, &v67);
    *(int32x2_t *)((char *)v71 + 4) = vsub_s32(*(int32x2_t *)((char *)v71 + 4), vdup_n_s32(v38));
    sub_18C9068F8(v45, (int *)&v69, (uint64_t)v18, (int *)v71, 0, &v67);
LABEL_42:
    v18[1] += v38;
    int v46 = (unsigned int *)uprv_decNumberCopy((uint64_t)v21, v18);
    sub_18C90B900(v46, a3, 1, 1, &v65);
    if (2 * *v21 - 1 <= (int)v10)
    {
      int v64 = 0;
      sub_18C908E7C((uint64_t)v21, (uint64_t)v21, (uint64_t)v21, (int *)&v72, &v64);
      int v20 = v61;
      if ((v64 & 0x200) != 0)
      {
        unsigned int v47 = v37 | 0x820;
        LODWORD(v68) = v37 | 0x820;
        int v12 = v59;
      }
      else
      {
        sub_18C90723C((uint64_t)&v75, (uint64_t)v21, a2, (int *)&v72, 1, &v64);
        int v12 = v59;
        if (BYTE1(v76) || v75 != 1 || (v76 & 0x70) != 0)
        {
          unsigned int v47 = v37 | 0x820;
        }
        else
        {
          unsigned int v53 = v18[1];
          int v54 = v60 - v53;
          if ((int)(v60 - v53) >= 0)
          {
            int v55 = *(_DWORD *)(a3 + 4) - (v53 + *(_DWORD *)a3) + 1;
            unsigned int v47 = v58;
            if (v54 > v55 && *(unsigned char *)(a3 + 24))
            {
              unsigned int v47 = v58 | 0x400;
              LODWORD(v68) = v58 | 0x400;
              int v54 = v55;
            }
            if (v65 < v54)
            {
              v47 |= 0x400u;
              LODWORD(v68) = v47;
              int v54 = v65;
            }
            if (v54 >= 1)
            {
              uint64_t v56 = *v18;
              if ((int)v56 <= 49) {
                uint64_t v56 = byte_18CA91A00[(int)v56];
              }
              sub_18C90BE04(v63, v56, v54);
              unsigned int v57 = v18[1] + v54;
              *v18 -= v54;
              v18[1] = v57;
              unsigned int v47 = v68;
            }
            goto LABEL_53;
          }
          unsigned int v47 = v58 | 0x800;
        }
        LODWORD(v68) = v47;
      }
    }
    else
    {
      unsigned int v47 = v37 | 0x820;
      LODWORD(v68) = v37 | 0x820;
      int v12 = v59;
      int v20 = v61;
    }
LABEL_53:
    if ((v47 & 0x2000) != 0)
    {
      int v48 = *(_DWORD *)a2 + *(_DWORD *)(a2 + 4);
      int v49 = *(_DWORD *)(a3 + 8);
      BOOL v50 = v48 <= 2 * v49;
      unsigned int v51 = v48 <= 2 * v49 ? v47 : v47 & 0xFFFFCFFF;
      if (!v50 || (v51 & 0x20) == 0)
      {
        if ((v51 & 0x20) == 0) {
          v51 &= ~0x2000u;
        }
        LODWORD(v68) = v51;
      }
    }
    uprv_decNumberCopy(a1, v18);
    goto LABEL_64;
  }
  LODWORD(v68) = 16;
LABEL_65:
  if (v12) {
    uprv_free(v12);
  }
  if (v18) {
    uprv_free(v18);
  }
  if (v20) {
    uprv_free(v20);
  }
LABEL_71:
  int v14 = v68;
  if (v68) {
    goto LABEL_72;
  }
  return a1;
}

int *uprv_decNumberSubtract(int *a1, int *a2, uint64_t a3, int *a4)
{
  int v7 = 0;
  sub_18C9068F8(a1, a2, a3, a4, 128, &v7);
  if (v7) {
    sub_18C90684C((uint64_t)a1, v7, (uint64_t)a4);
  }
  return a1;
}

unsigned int *uprv_decNumberToIntegralExact(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  int v10 = 0;
  uint64_t v9 = 0;
  memset(v8, 0, 28);
  int v7 = 0;
  if ((*(unsigned char *)(a2 + 8) & 0x70) != 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 0x40) == 0)
    {
      sub_18C909E68((uint64_t)a1, a2, 0, (int *)a3, &v7);
      int v5 = v7;
      if (!v7) {
        return a1;
      }
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if ((*(_DWORD *)(a2 + 4) & 0x80000000) == 0)
  {
LABEL_6:
    uprv_decNumberCopy((uint64_t)a1, (unsigned int *)a2);
    return a1;
  }
  v8[0] = *(_OWORD *)a3;
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a3 + 12);
  LODWORD(v8[0]) = *(_DWORD *)a2;
  LODWORD(v8[1]) = 0;
  LOWORD(v10) = 0;
  uint64_t v9 = 1;
  uprv_decNumberQuantize(a1, a2, (uint64_t)&v9, (uint64_t)v8);
  int v5 = DWORD1(v8[1]);
  if (DWORD1(v8[1])) {
LABEL_8:
  }
    sub_18C90684C((uint64_t)a1, v5, a3);
  return a1;
}

unsigned int *uprv_decNumberToIntegralValue(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)&v5[12] = *(_OWORD *)(a3 + 12);
  *(_OWORD *)int v5 = *(_OWORD *)a3;
  *(_DWORD *)&v5[16] = 0;
  double result = uprv_decNumberToIntegralExact(a1, a2, (uint64_t)v5);
  *(_DWORD *)(a3 + 20) |= v5[20] & 0x80;
  return result;
}

uint64_t uprv_decNumberXor(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (*(_DWORD *)(a2 + 4)
    || *(unsigned __int8 *)(a2 + 8) > 0xFu
    || *(_DWORD *)(a3 + 4)
    || *(unsigned __int8 *)(a3 + 8) >= 0x10u)
  {
LABEL_33:
    *(void *)a1 = 1;
    *(_WORD *)(a1 + 8) = 32;
    uprv_decContextSetStatus((uint64_t)a4, 128);
    return a1;
  }
  unsigned int v5 = *(_DWORD *)a2;
  if (*(int *)a2 <= 49) {
    unsigned int v5 = byte_18CA91A00[v5];
  }
  unsigned int v6 = *(_DWORD *)a3;
  if (*(int *)a3 <= 49) {
    unsigned int v6 = byte_18CA91A00[v6];
  }
  unint64_t v7 = a1 + 9;
  unsigned int v8 = *a4;
  if ((int)*a4 <= 49) {
    unsigned int v8 = byte_18CA91A00[v8];
  }
  unint64_t v9 = v7 + v8 - 1;
  int v10 = a1 + 9;
  if (v7 <= v9)
  {
    unint64_t v11 = a2 + 9 + v5 - 1;
    unint64_t v12 = a3 + 9 + v6 - 1;
    uint64_t v13 = 9;
    do
    {
      unsigned int v14 = a2 + v13 <= v11 ? *(unsigned __int8 *)(a2 + v13) : 0;
      unsigned int v15 = a3 + v13 <= v12 ? *(unsigned __int8 *)(a3 + v13) : 0;
      *(unsigned char *)(a1 + v13) = 0;
      if (v15 | v14)
      {
        if ((v15 ^ v14)) {
          *(unsigned char *)(a1 + v13) = 1;
        }
        if (((v15 - 10 * ((429496730 * (unint64_t)v15) >> 32)) | (v14 - 10 * ((429496730 * (unint64_t)v14) >> 32))) >= 2) {
          goto LABEL_33;
        }
      }
      int v10 = a1 + ++v13;
    }
    while (a1 + v13 <= v9);
  }
  int v16 = v10 - v7;
  if (v10 - (int)v7 >= 1)
  {
    size_t v17 = (unsigned char *)(v7 + (v16 - 1));
    int v18 = v10 - a1 - 10;
    do
    {
      if (*v17) {
        BOOL v19 = 1;
      }
      else {
        BOOL v19 = v18 == 0;
      }
      if (v19) {
        break;
      }
      --v17;
      --v18;
    }
    while ((unint64_t)v17 >= v7);
    int v16 = v18 + 1;
  }
  *(_DWORD *)a1 = v16;
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 0;
  return a1;
}

const char *uprv_decNumberClassToString(unsigned int a1)
{
  if (a1 > 9) {
    return "Invalid";
  }
  else {
    return off_1E550B838[a1];
  }
}

uint64_t uprv_decNumberCopyNegate(uint64_t a1, unsigned int *a2)
{
  uint64_t result = uprv_decNumberCopy(a1, a2);
  *(unsigned char *)(result + 8) ^= 0x80u;
  return result;
}

unint64_t uprv_decNumberGetBCD(int *a1, unint64_t a2)
{
  char v2 = (unsigned char *)(a2 + *a1 - 1);
  if ((unint64_t)v2 >= a2)
  {
    uint64_t v3 = (char *)a1 + 9;
    do
    {
      char v4 = *v3++;
      *v2-- = v4;
    }
    while ((unint64_t)v2 >= a2);
  }
  return a2;
}

unsigned int *uprv_decNumberSetBCD(unsigned int *result, char *a2, unsigned int a3)
{
  unsigned int v3 = *result;
  if ((int)*result <= 49) {
    unsigned int v3 = byte_18CA91A00[v3];
  }
  if (a3)
  {
    char v4 = &a2[a3];
    unsigned int v5 = (char *)result + v3 + 8;
    do
    {
      char v6 = *a2++;
      *v5-- = v6;
    }
    while (a2 < v4);
  }
  *uint64_t result = a3;
  return result;
}

BOOL uprv_decNumberIsSubnormal(int *a1, uint64_t a2)
{
  if ((a1[2] & 0x70) != 0) {
    return 0;
  }
  int v2 = *a1;
  return (*((unsigned char *)a1 + 9) || v2 != 1) && v2 + a1[1] <= *(_DWORD *)(a2 + 8);
}

unsigned int *uprv_decNumberTrim(unsigned int *a1)
{
  memset(v3, 0, sizeof(v3));
  int v4 = 0;
  uprv_decContextDefault((uint64_t)v3, 0);
  return sub_18C90B900(a1, (uint64_t)v3, 0, 1, &v5);
}

const char *uprv_decNumberVersion()
{
  return "decNumber 3.61";
}

uint64_t sub_18C90CF10(char *a1, int a2, unsigned __int8 *a3, int a4, int a5, char *a6, int a7)
{
  unint64_t v7 = (unint64_t)&a6[a2];
  unsigned int v8 = &a6[a4];
  if (!a5) {
    goto LABEL_12;
  }
  v8 += a5;
  unint64_t v9 = &a6[a5];
  if (a5 <= a2 && a1 == a6)
  {
    int v10 = &a6[a5];
    goto LABEL_13;
  }
  if (a5 >= 1)
  {
    int v10 = a1;
    unint64_t v11 = a6;
    do
    {
      if (v10 >= &a1[a2]) {
        char v12 = 0;
      }
      else {
        char v12 = *v10;
      }
      *v11++ = v12;
      ++v10;
    }
    while (v11 < v9);
    unint64_t v9 = v11;
  }
  else
  {
LABEL_12:
    unint64_t v9 = a6;
    int v10 = a1;
  }
LABEL_13:
  if ((unint64_t)v8 <= v7) {
    unint64_t v13 = (unint64_t)v8;
  }
  else {
    unint64_t v13 = (unint64_t)&a6[a2];
  }
  if ((unint64_t)v8 > v7) {
    unint64_t v7 = (unint64_t)v8;
  }
  if ((unint64_t)v9 < v13)
  {
    signed int v14 = 0;
    while (1)
    {
      int v15 = *v10++;
      int v16 = v14 + v15;
      int v17 = *a3++;
      unsigned int v18 = v16 + v17 * a7;
      if (v18 > 9)
      {
        if ((v18 & 0x80000000) != 0)
        {
          char v19 = v18 + 100;
          unsigned int v20 = (26215 * ((v18 + 100) >> 1)) >> 17;
          *unint64_t v9 = v19 - 10 * v20;
          signed int v14 = v20 - 10;
          goto LABEL_25;
        }
        signed int v14 = (26215 * (v18 >> 1)) >> 17;
        LOBYTE(v18) = v18 - 10 * v14;
      }
      else
      {
        signed int v14 = 0;
      }
      *unint64_t v9 = v18;
LABEL_25:
      if ((unint64_t)++v9 >= v13) {
        goto LABEL_29;
      }
    }
  }
  signed int v14 = 0;
LABEL_29:
  while ((unint64_t)v9 < v7)
  {
    if (v10 >= &a1[a2])
    {
      int v23 = *a3++;
      int v21 = v23 * a7;
    }
    else
    {
      int v22 = *v10++;
      int v21 = v22;
    }
    unsigned int v24 = v21 + v14;
    if (v24 > 9)
    {
      if ((v24 & 0x80000000) != 0)
      {
        char v25 = v24 + 100;
        unsigned int v26 = (26215 * ((v24 + 100) >> 1)) >> 17;
        *unint64_t v9 = v25 - 10 * v26;
        signed int v14 = v26 - 10;
        goto LABEL_38;
      }
      signed int v14 = (26215 * (v24 >> 1)) >> 17;
      LOBYTE(v24) = v24 - 10 * v14;
    }
    else
    {
      signed int v14 = 0;
    }
    *unint64_t v9 = v24;
LABEL_38:
    ++v9;
  }
  if (v14)
  {
    if (v14 <= 0)
    {
      BOOL v27 = 1;
      for (int i = a6; (unint64_t)i < v7; ++i)
      {
        int v29 = v27 - *i;
        int v30 = v29 + 9;
        BOOL v31 = v29 < 0;
        BOOL v27 = v29 + 9 > 9;
        if (!(v31 ^ __OFSUB__(v30, 9) | (v30 == 9))) {
          LOBYTE(v30) = 0;
        }
        *int i = v30;
      }
      int v32 = v27 + ~v14;
      if (v32)
      {
        *int i = v32;
        LODWORD(i) = i + 1;
      }
      LODWORD(v9) = a6;
      LODWORD(a6) = i;
    }
    else
    {
      *unint64_t v9 = v14;
      LODWORD(v9) = v9 + 1;
    }
  }
  return (v9 - a6);
}

uint64_t sub_18C90D104(char *a1, int a2, unsigned __int8 *a3, int a4, int a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    if (a5 > 49) {
      int v10 = a5 + a4;
    }
    else {
      int v10 = byte_18CA91A00[a5] + a4;
    }
    if (v10 < a2) {
      return 1;
    }
    if (a2 + 1 < v10) {
      return 0xFFFFFFFFLL;
    }
    unsigned int v17 = v10 + 2;
    if (v17 < 0x4A)
    {
      char v19 = 0;
      unsigned int v18 = (char *)v24;
    }
    else
    {
      unsigned int v18 = (char *)uprv_malloc((int)v17);
      char v19 = v18;
      if (!v18) {
        return 0x80000000;
      }
    }
    memset(v24, 0, 73);
    uint64_t v16 = 0xFFFFFFFFLL;
    unsigned int v20 = sub_18C90CF10(a1, a2, a3, a4, a5, v18, -1);
    if ((v20 & 0x80000000) == 0)
    {
      unint64_t v21 = (unint64_t)&v18[v20 - 1];
      if ((unint64_t)v18 < v21)
      {
        uint64_t v22 = v20 - 1;
        while (!*v18)
        {
          ++v18;
          if (!--v22)
          {
            unsigned int v18 = (char *)v21;
            break;
          }
        }
      }
      uint64_t v16 = *v18 != 0;
    }
    if (v19) {
      uprv_free(v19);
    }
  }
  else
  {
    if (a2 > a4) {
      return 1;
    }
    if (a2 < a4) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = a2 - 1;
    char v12 = (unsigned __int8 *)&a1[v11];
    unint64_t v13 = &a3[v11];
    while (v12 >= (unsigned __int8 *)a1)
    {
      unsigned int v14 = *v12;
      unsigned int v15 = *v13;
      if (v14 > v15) {
        return 1;
      }
      --v12;
      --v13;
      if (v14 < v15) {
        return 0xFFFFFFFFLL;
      }
    }
    return 0;
  }
  return v16;
}

void sub_18C90D2CC(uint64_t a1, _DWORD *a2, int a3, int *a4)
{
  if (!a3) {
    return;
  }
  switch(a2[3])
  {
    case 0:
      if (*(char *)(a1 + 8) < 0) {
        goto LABEL_17;
      }
      goto LABEL_4;
    case 1:
      goto LABEL_4;
    case 2:
      if (a3 <= 4) {
        return;
      }
      goto LABEL_39;
    case 3:
      if (a3 <= 5 && (a3 != 5 || (*(unsigned char *)(a1 + 9) & 1) == 0)) {
        return;
      }
      goto LABEL_39;
    case 4:
      if (a3 <= 5) {
        return;
      }
      goto LABEL_39;
    case 5:
      goto LABEL_17;
    case 6:
      if (*(char *)(a1 + 8) < 0)
      {
LABEL_4:
        if (a3 <= 0) {
          return;
        }
LABEL_39:
        int v9 = *(_DWORD *)a1;
        if (*(_DWORD *)a1 >= 2u)
        {
          char v19 = (unsigned char *)((v9 - 2) + a1 + 10);
          unsigned int v21 = *(_DWORD *)a1;
          uint64_t v22 = (unsigned char *)(a1 + 9);
          do
          {
            if (*v22 != 9) {
              goto LABEL_55;
            }
            --v21;
            ++v22;
          }
          while (v21 >= 2);
          int v20 = 1;
        }
        else
        {
          char v19 = (unsigned char *)(a1 + 9);
          int v20 = *(_DWORD *)a1;
        }
        if (dword_18CA919D8[v20] - 1 == *v19)
        {
          *char v19 = dword_18CA919D8[v20 - 1];
          if ((unint64_t)(v19 - 1) >= a1 + 9)
          {
            uint64_t v23 = (uint64_t)(v19 - 2);
            if ((unint64_t)(v19 - 2) >= a1 + 8) {
              uint64_t v23 = a1 + 8;
            }
            bzero((void *)(v23 + 1), (size_t)&v19[~v23]);
            int v9 = *(_DWORD *)a1;
          }
          int v24 = *(_DWORD *)(a1 + 4) + 1;
          *(_DWORD *)(a1 + 4) = v24;
          if (v9 + v24 > a2[1] + 1)
          {
            sub_18C90D63C((unsigned char *)a1, (uint64_t)a2, a4);
          }
          return;
        }
LABEL_55:
        int v18 = 1;
LABEL_56:
        uint64_t v25 = (char *)(a1 + 9);
        if (v9 <= 49) {
          int v9 = byte_18CA91A00[v9];
        }
        sub_18C90CF10(v25, v9, (unsigned __int8 *)&unk_18CA91AFC, 1, 0, (char *)(a1 + 9), v18);
        return;
      }
LABEL_17:
      if ((a3 & 0x80000000) == 0) {
        return;
      }
LABEL_21:
      int v9 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 >= 2u)
      {
        int v10 = (unsigned char *)((v9 - 2) + a1 + 10);
        unsigned int v12 = *(_DWORD *)a1;
        unint64_t v13 = (unsigned char *)(a1 + 9);
        do
        {
          if (*v13) {
            goto LABEL_36;
          }
          --v12;
          ++v13;
        }
        while (v12 >= 2);
        int v11 = 1;
      }
      else
      {
        int v10 = (unsigned char *)(a1 + 9);
        int v11 = *(_DWORD *)a1;
      }
      int v14 = *v10;
      if (dword_18CA919D8[v11 - 1] != v14)
      {
LABEL_36:
        int v18 = -1;
        goto LABEL_56;
      }
      *int v10 = LOBYTE(dword_18CA919D8[v11]) - 1;
      if ((unint64_t)(v10 - 1) >= a1 + 9)
      {
        uint64_t v15 = (uint64_t)(v10 - 2);
        if ((unint64_t)(v10 - 2) >= a1 + 8) {
          uint64_t v15 = a1 + 8;
        }
        memset((void *)(v15 + 1), 9, (size_t)&v10[~v15]);
      }
      int v16 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v16 - 1;
      if (v16 == a2[2] - *a2 + 1)
      {
        int v17 = *(_DWORD *)a1;
        if (v11 && v17 == 1)
        {
          *int v10 = 0;
        }
        else
        {
          *int v10 = v14 - 1;
          *(_DWORD *)a1 = v17 - 1;
        }
        *(_DWORD *)(a1 + 4) = v16;
        int v7 = *a4 | 0x3820;
LABEL_7:
        *a4 = v7;
      }
      return;
    case 7:
      unsigned int v8 = *(unsigned __int8 *)(a1 + 9) % 5u;
      if (a3 < 0 && v8 != 1) {
        goto LABEL_21;
      }
      if (a3 >= 1 && !v8) {
        goto LABEL_39;
      }
      return;
    default:
      int v7 = *a4 | 0x40;
      goto LABEL_7;
  }
}

unsigned char *sub_18C90D63C(unsigned char *result, uint64_t a2, _DWORD *a3)
{
  int v4 = result;
  char v5 = result[8];
  if (result[9] || (*(_DWORD *)result == 1 ? (BOOL v6 = (v5 & 0x70) == 0) : (BOOL v6 = 0), !v6))
  {
    char v7 = v5 & 0x80;
    *((_WORD *)result + 4) = 0;
    *(void *)uint64_t result = 1;
    switch(*(_DWORD *)(a2 + 12))
    {
      case 0:
        if (v5 < 0) {
          goto LABEL_7;
        }
        goto LABEL_15;
      case 5:
      case 7:
        goto LABEL_7;
      case 6:
        if (v5 < 0) {
          goto LABEL_15;
        }
LABEL_7:
        uint64_t result = sub_18C90A534((uint64_t)result, (int *)a2);
        break;
      default:
LABEL_15:
        v7 |= 0x40u;
        break;
    }
    v4[8] = v7;
    int v9 = 2592;
    goto LABEL_17;
  }
  int v8 = *(_DWORD *)(a2 + 4);
  if (*(unsigned char *)(a2 + 24)) {
    int v8 = v8 - *(_DWORD *)a2 + 1;
  }
  if (*((_DWORD *)result + 1) > v8)
  {
    *((_DWORD *)result + 1) = v8;
    int v9 = 1024;
LABEL_17:
    *a3 |= v9;
  }
  return result;
}

void sub_18C90D748(unsigned int *a1, uint64_t a2, int *a3, int *a4)
{
  int v7 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2 + 1;
  int v8 = (char *)a1 + 9;
  if (!*((unsigned char *)a1 + 9) && *a1 == 1 && (a1[2] & 0x70) == 0)
  {
    if ((int)a1[1] >= v7) {
      return;
    }
    a1[1] = v7;
    goto LABEL_17;
  }
  int v9 = *a4;
  *a4 |= 0x1000u;
  unsigned int v10 = a1[1];
  BOOL v11 = __OFSUB__(v7, v10);
  int v12 = v7 - v10;
  if ((v12 < 0) ^ v11 | (v12 == 0))
  {
    if ((v9 & 0x20) == 0) {
      return;
    }
    int v16 = v9 | 0x3000;
    goto LABEL_18;
  }
  *(_OWORD *)int v17 = *(_OWORD *)a2;
  *(_OWORD *)&v17[3] = *(_OWORD *)(a2 + 12);
  int v13 = *a1;
  v17[0] = *a1 - v12;
  v17[2] -= v12;
  sub_18C906460(a1, v17, (char *)a1 + 9, v13, a3, a4);
  sub_18C90D2CC((uint64_t)a1, v17, *a3, a4);
  if ((*a4 & 0x20) != 0) {
    *a4 |= 0x2000u;
  }
  if ((int)a1[1] > v7)
  {
    unsigned int v14 = sub_18C90B2C8(v8, *a1, 1);
    int v15 = a1[1] - 1;
    *a1 = v14;
    a1[1] = v15;
  }
  if (!*v8 && *a1 == 1 && (a1[2] & 0x70) == 0)
  {
LABEL_17:
    int v16 = *a4 | 0x400;
LABEL_18:
    *a4 = v16;
  }
}

void *icu::DecimalFormat::getStaticClassID(icu::DecimalFormat *this)
{
  return &unk_1E9192139;
}

void *icu::DecimalFormat::getDynamicClassID(icu::DecimalFormat *this)
{
  return &unk_1E9192139;
}

icu::DecimalFormat *icu::DecimalFormat::DecimalFormat(icu::DecimalFormat *this, UErrorCode *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = icu::DecimalFormat::DecimalFormat(this, 0, a2);
  if (*(int *)a2 <= 0)
  {
    char v5 = (const char *)icu::Locale::getDefault(v4)[5];
    uint64_t Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)a2, v6);
    memset(v13, 0, sizeof(v13));
    icu::Locale::Locale((icu::Locale *)v12, v5, 0, 0, 0);
    Name = (const char *)icu::NumberingSystem::getName(Instance);
    int v9 = sub_18C9867BC((uint64_t)v12, Name, 0, (int *)a2);
    icu::UnicodeString::UnicodeString((uint64_t)v13, (uint64_t)v9);
    icu::Locale::~Locale((icu::Locale *)v12);
    if (*(int *)a2 <= 0) {
      icu::number::impl::PatternParser::parseToExistingProperties(v13, *((void *)this + 45) + 8);
    }
    icu::DecimalFormat::touch(this, a2);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v13);
    if (Instance) {
      (*(void (**)(icu::NumberingSystem *))(*(void *)Instance + 8))(Instance);
    }
  }
  return this;
}

{
  icu::Locale *v4;
  const char *v5;
  UErrorCode *v6;
  icu::NumberingSystem *Instance;
  const char *Name;
  const UChar *v9;
  void *v10;
  unsigned char v12[224];
  _OWORD v13[4];
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = icu::DecimalFormat::DecimalFormat(this, 0, a2);
  if (*(int *)a2 <= 0)
  {
    char v5 = (const char *)icu::Locale::getDefault(v4)[5];
    uint64_t Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)a2, v6);
    memset(v13, 0, sizeof(v13));
    icu::Locale::Locale((icu::Locale *)v12, v5, 0, 0, 0);
    Name = (const char *)icu::NumberingSystem::getName(Instance);
    int v9 = sub_18C9867BC((uint64_t)v12, Name, 0, (int *)a2);
    icu::UnicodeString::UnicodeString((uint64_t)v13, (uint64_t)v9);
    icu::Locale::~Locale((icu::Locale *)v12);
    if (*(int *)a2 <= 0) {
      icu::number::impl::PatternParser::parseToExistingProperties(v13, *((void *)this + 45) + 8);
    }
    icu::DecimalFormat::touch(this, a2);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v13);
    if (Instance) {
      (*(void (**)(icu::NumberingSystem *))(*(void *)Instance + 8))(Instance);
    }
  }
  return this;
}

icu::DecimalFormat *icu::DecimalFormat::DecimalFormat(icu::DecimalFormat *this, const icu::DecimalFormatSymbols *a2, UErrorCode *a3)
{
  v7.n128_f64[0] = icu::NumberFormat::NumberFormat(this);
  *int v8 = &unk_1EDA4B8E0;
  v8[45] = 0;
  int v9 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v9 <= 0)
  {
    unsigned int v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x11C0, v6);
    if (!v10)
    {
      *((void *)this + 45) = 0;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      if (!a2) {
        return this;
      }
      goto LABEL_3;
    }
    uint64_t v11 = sub_18C913A08((uint64_t)v10);
    *((void *)this + 45) = v11;
    uint64_t v14 = v11 + 768;
    if (!a2)
    {
      int v15 = (const icu::DecimalFormatSymbols *)icu::UMemory::operator new(v13, (icu::UMemory *)0xB48, v12);
      a2 = v15;
      if (v15) {
        icu::DecimalFormatSymbols::DecimalFormatSymbols(v15, a3);
      }
    }
    sub_18C7F5A70(v14, (uint64_t)a2, (int *)a3);
    if (*(int *)a3 >= 1)
    {
      int v16 = (void *)*((void *)this + 45);
      if (v16)
      {
        sub_18C914194(v16 + 471);
        uint64_t v17 = v16[470];
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
        sub_18C913CF8(v16 + 162);
        icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(v16 + 97));
        uint64_t v18 = v16[96];
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        sub_18C914194(v16 + 1);
        icu::UMemory::operator delete(v16);
      }
      *((void *)this + 45) = 0;
    }
  }
  else if (a2)
  {
LABEL_3:
    (*(void (**)(const icu::DecimalFormatSymbols *, __n128))(*(void *)a2 + 8))(a2, v7);
  }
  return this;
}

uint64_t icu::DecimalFormat::setPropertiesFromPattern(uint64_t this, const icu::UnicodeString *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0) {
    return icu::number::impl::PatternParser::parseToExistingProperties(a2, *(void *)(this + 360) + 8);
  }
  return this;
}

void *icu::DecimalFormat::touch(void *this, UErrorCode *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 <= 0)
  {
    unsigned int v3 = this;
    if (this[45])
    {
      int v4 = (const icu::DecimalFormatSymbols *)(*(uint64_t (**)(void *))(*this + 320))(this);
      memset(v5, 0, sizeof(v5));
      icu::Locale::Locale((icu::Locale *)v5, (uint64_t)v4 + 1936);
      sub_18C975A84(v3[45] + 8, v4, v3[45] + 1288, v3[45] + 3768, (const icu::UnicodeString *)a2);
    }
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return this;
}

icu::DecimalFormat *icu::DecimalFormat::DecimalFormat(icu::DecimalFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    icu::number::impl::PatternParser::parseToExistingProperties(a2, *((void *)this + 45) + 8);
    icu::DecimalFormat::touch(this, a3);
  }
  return this;
}

{
  icu::DecimalFormat::DecimalFormat(this, 0, a3);
  if (*(int *)a3 <= 0)
  {
    icu::number::impl::PatternParser::parseToExistingProperties(a2, *((void *)this + 45) + 8);
    icu::DecimalFormat::touch(this, a3);
  }
  return this;
}

icu::DecimalFormat *icu::DecimalFormat::DecimalFormat(icu::DecimalFormat *this, const icu::UnicodeString *a2, icu::DecimalFormatSymbols *a3, UErrorCode *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  icu::DecimalFormat::DecimalFormat(this, a3, a4);
  if (*(int *)a4 <= 0)
  {
    icu::Locale::Locale((icu::Locale *)v9, (uint64_t)a3 + 1936);
    icu::DecimalFormat::setPropertiesFromPattern((uint64_t)this, a2, 1, (const icu::Locale *)v9, a4);
    icu::Locale::~Locale((icu::Locale *)v9);
    icu::DecimalFormat::touch(this, a4);
  }
  return this;
}

{
  unsigned char v9[224];
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x1E4F143B8];
  icu::DecimalFormat::DecimalFormat(this, a3, a4);
  if (*(int *)a4 <= 0)
  {
    icu::Locale::Locale((icu::Locale *)v9, (uint64_t)a3 + 1936);
    icu::DecimalFormat::setPropertiesFromPattern((uint64_t)this, a2, 1, (const icu::Locale *)v9, a4);
    icu::Locale::~Locale((icu::Locale *)v9);
    icu::DecimalFormat::touch(this, a4);
  }
  return this;
}

uint64_t icu::DecimalFormat::setPropertiesFromPattern(uint64_t this, const icu::UnicodeString *a2, int a3, const icu::Locale *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    uint64_t v7 = this;
    this = icu::number::impl::PatternParser::parseToExistingProperties(a2, *(void *)(this + 360) + 8);
    if (*(int *)a5 <= 0)
    {
      this = sub_18C986B2C((uint64_t)a4);
      *(_DWORD *)(*(void *)(v7 + 360) + 116) = this;
    }
  }
  return this;
}

icu::DecimalFormat *icu::DecimalFormat::DecimalFormat(icu::DecimalFormat *a1, const icu::UnicodeString *a2, icu::DecimalFormatSymbols *a3, unsigned int a4, UErrorCode *a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  icu::DecimalFormat::DecimalFormat(a1, a3, a5);
  if (*(int *)a5 <= 0)
  {
    if (a4 > 0x10 || ((1 << a4) & 0x13C04) == 0)
    {
      icu::Locale::Locale((icu::Locale *)v17, (uint64_t)a3 + 1936);
      icu::DecimalFormat::setPropertiesFromPattern((uint64_t)a1, a2, 1, (const icu::Locale *)v17, a5);
      icu::Locale::~Locale((icu::Locale *)v17);
      goto LABEL_14;
    }
    icu::Locale::Locale((icu::Locale *)v17, (uint64_t)a3 + 1936);
    icu::DecimalFormat::setPropertiesFromPattern((uint64_t)a1, a2, 2, (const icu::Locale *)v17, a5);
    icu::Locale::~Locale((icu::Locale *)v17);
    if (a4 != 11)
    {
LABEL_14:
      icu::DecimalFormat::touch(a1, a5);
      return a1;
    }
    unint64_t v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0x28, v10);
    if (v12)
    {
      int v13 = (icu::CurrencyPluralInfo *)v12;
      icu::Locale::Locale((icu::Locale *)v17, *(void *)(*((void *)a1 + 45) + 768) + 1936);
      icu::CurrencyPluralInfo::CurrencyPluralInfo(v13, (const icu::Locale *)v17, a5);
      icu::Locale::~Locale((icu::Locale *)v17);
      if (*(int *)a5 > 0)
      {
        (*(void (**)(icu::CurrencyPluralInfo *))(*(void *)v13 + 8))(v13);
        return a1;
      }
      uint64_t v14 = *((void *)a1 + 45);
      uint64_t v15 = *(void *)(v14 + 56);
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      *(void *)(v14 + 56) = v13;
      goto LABEL_14;
    }
    if (*(int *)a5 <= 0) {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return a1;
}

{
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  icu::CurrencyPluralInfo *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char v17[224];
  uint64_t v18;

  uint64_t v18 = *MEMORY[0x1E4F143B8];
  icu::DecimalFormat::DecimalFormat(a1, a3, a5);
  if (*(int *)a5 <= 0)
  {
    if (a4 > 0x10 || ((1 << a4) & 0x13C04) == 0)
    {
      icu::Locale::Locale((icu::Locale *)v17, (uint64_t)a3 + 1936);
      icu::DecimalFormat::setPropertiesFromPattern((uint64_t)a1, a2, 1, (const icu::Locale *)v17, a5);
      icu::Locale::~Locale((icu::Locale *)v17);
      goto LABEL_14;
    }
    icu::Locale::Locale((icu::Locale *)v17, (uint64_t)a3 + 1936);
    icu::DecimalFormat::setPropertiesFromPattern((uint64_t)a1, a2, 2, (const icu::Locale *)v17, a5);
    icu::Locale::~Locale((icu::Locale *)v17);
    if (a4 != 11)
    {
LABEL_14:
      icu::DecimalFormat::touch(a1, a5);
      return a1;
    }
    unint64_t v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0x28, v10);
    if (v12)
    {
      int v13 = (icu::CurrencyPluralInfo *)v12;
      icu::Locale::Locale((icu::Locale *)v17, *(void *)(*((void *)a1 + 45) + 768) + 1936);
      icu::CurrencyPluralInfo::CurrencyPluralInfo(v13, (const icu::Locale *)v17, a5);
      icu::Locale::~Locale((icu::Locale *)v17);
      if (*(int *)a5 > 0)
      {
        (*(void (**)(icu::CurrencyPluralInfo *))(*(void *)v13 + 8))(v13);
        return a1;
      }
      uint64_t v14 = *((void *)a1 + 45);
      uint64_t v15 = *(void *)(v14 + 56);
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      *(void *)(v14 + 56) = v13;
      goto LABEL_14;
    }
    if (*(int *)a5 <= 0) {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return a1;
}

uint64_t icu::DecimalFormat::setParseAllInput(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 360);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 480) != a2) {
      *(_DWORD *)(v2 + 480) = a2;
    }
  }
  return result;
}

icu::DecimalFormat *icu::DecimalFormat::setAttribute(icu::DecimalFormat *this, int a2, uint64_t a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    uint64_t v6 = *((void *)this + 45);
    if (v6)
    {
      switch(a2)
      {
        case 0:
          (*(void (**)(icu::DecimalFormat *, BOOL))(*(void *)this + 184))(this, a3 != 0);
          return this;
        case 1:
          (*(void (**)(icu::DecimalFormat *, BOOL))(*(void *)this + 208))(this, a3 != 0);
          return this;
        case 2:
          (*(void (**)(icu::DecimalFormat *, BOOL))(*(void *)this + 536))(this, a3 != 0);
          return this;
        case 3:
          goto LABEL_18;
        case 4:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 224))(this, a3);
          return this;
        case 5:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 224))(this, a3);
LABEL_18:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 216))(this, a3);
          return this;
        case 6:
          goto LABEL_21;
        case 7:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 240))(this, a3);
          return this;
        case 8:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 240))(this, a3);
LABEL_21:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 232))(this, a3);
          break;
        case 9:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 400))(this, a3);
          break;
        case 10:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 520))(this, a3);
          break;
        case 11:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 280))(this, a3);
          break;
        case 12:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
LABEL_10:
          int v8 = 16;
          goto LABEL_7;
        case 13:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 432))(this, a3);
          break;
        case 14:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 464))(this, a3);
          break;
        case 15:
          (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)this + 528))(this, a3);
          break;
        case 16:
          icu::DecimalFormat::setSignificantDigitsUsed(this, a3 != 0);
          break;
        case 17:
          icu::DecimalFormat::setMinimumSignificantDigits(this, a3);
          break;
        case 18:
          icu::DecimalFormat::setMaximumSignificantDigits(this, a3);
          break;
        case 19:
          (*(void (**)(icu::DecimalFormat *, BOOL))(*(void *)this + 192))(this, a3 != 0);
          break;
        case 20:
          if (*(_DWORD *)(v6 + 480) != a3) {
            *(_DWORD *)(v6 + 480) = a3;
          }
          break;
        case 21:
          icu::DecimalFormat::setMultiplierScale(this, a3);
          break;
        case 22:
          icu::DecimalFormat::setMinimumGroupingDigits(this, a3);
          break;
        case 23:
          icu::DecimalFormat::setCurrencyUsage(this, a3, a4);
          break;
        case 48:
          int v9 = a3 != 0;
          if (*(unsigned __int8 *)(v6 + 765) != v9)
          {
            *(unsigned char *)(v6 + 765) = v9;
            UErrorCode v10 = U_ZERO_ERROR;
            icu::DecimalFormat::touch(this, &v10);
          }
          break;
        default:
          switch(a2)
          {
            case 4096:
              icu::DecimalFormat::setFormatFailIfMoreThanMaxDigits(this, a3);
              break;
            case 4097:
              icu::DecimalFormat::setParseNoExponent(this, a3);
              break;
            case 4098:
              (*(void (**)(icu::DecimalFormat *, void))(*(void *)this + 544))(this, (char)a3);
              break;
            case 4099:
              icu::DecimalFormat::setParseCaseSensitive(this, a3);
              break;
            case 4100:
              icu::DecimalFormat::setSignAlwaysShown(this, a3);
              break;
            default:
              goto LABEL_10;
          }
          break;
      }
    }
    else
    {
      int v8 = 7;
LABEL_7:
      *a4 = v8;
    }
  }
  return this;
}

void *icu::DecimalFormat::setSignificantDigitsUsed(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 124);
    if (a2)
    {
      if (v3 == -1 && *(_DWORD *)(v2 + 104) == -1)
      {
        int v4 = 1;
        int v5 = 6;
LABEL_9:
        *(_DWORD *)(v2 + 124) = v4;
        *(_DWORD *)(v2 + 104) = v5;
        UErrorCode v6 = U_ZERO_ERROR;
        return icu::DecimalFormat::touch(this, &v6);
      }
    }
    else if (v3 != -1 || *(_DWORD *)(v2 + 104) != -1)
    {
      int v5 = -1;
      int v4 = -1;
      goto LABEL_9;
    }
  }
  return this;
}

void *icu::DecimalFormat::setMaximumSignificantDigits(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2 && *(_DWORD *)(v2 + 104) != a2)
  {
    int v3 = *(_DWORD *)(v2 + 124);
    if ((v3 & 0x80000000) == 0 && v3 > a2) {
      *(_DWORD *)(v2 + 124) = a2;
    }
    *(_DWORD *)(v2 + 104) = a2;
    UErrorCode v4 = U_ZERO_ERROR;
    return icu::DecimalFormat::touch(this, &v4);
  }
  return this;
}

void *icu::DecimalFormat::setMinimumSignificantDigits(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2 && *(_DWORD *)(v2 + 124) != a2)
  {
    int v3 = *(_DWORD *)(v2 + 104);
    if ((v3 & 0x80000000) == 0 && v3 < a2) {
      *(_DWORD *)(v2 + 104) = a2;
    }
    *(_DWORD *)(v2 + 124) = a2;
    UErrorCode v4 = U_ZERO_ERROR;
    return icu::DecimalFormat::touch(this, &v4);
  }
  return this;
}

void *icu::DecimalFormat::setMultiplierScale(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(_DWORD *)(v2 + 132) != a2)
    {
      *(_DWORD *)(v2 + 132) = a2;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

void *icu::DecimalFormat::setParseNoExponent(void *this, unsigned __int8 a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 476) != a2)
    {
      *(unsigned char *)(v2 + 476) = a2 != 0;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

void *icu::DecimalFormat::setCurrencyUsage(void *result, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v3 = result[45];
    if (v3)
    {
      if (*(unsigned char *)(v3 + 64) || *(_DWORD *)(v3 + 68) != a2)
      {
        *(_DWORD *)(v3 + 68) = a2;
        *(unsigned char *)(v3 + 64) = 0;
        return icu::DecimalFormat::touch(result, a3);
      }
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return result;
}

void *icu::DecimalFormat::setMinimumGroupingDigits(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(_DWORD *)(v2 + 116) != a2)
    {
      *(_DWORD *)(v2 + 116) = a2;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

void *icu::DecimalFormat::setParseCaseSensitive(void *this, unsigned __int8 a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 464) != a2)
    {
      *(unsigned char *)(v2 + 464) = a2 != 0;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

void *icu::DecimalFormat::setSignAlwaysShown(void *this, unsigned __int8 a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 764) != a2)
    {
      *(unsigned char *)(v2 + 764) = a2 != 0;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

void *icu::DecimalFormat::setFormatFailIfMoreThanMaxDigits(void *this, unsigned __int8 a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 76) != a2)
    {
      *(unsigned char *)(v2 + 76) = a2 != 0;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

void *icu::DecimalFormat::touchNoError(icu::DecimalFormat *this)
{
  UErrorCode v2 = U_ZERO_ERROR;
  return icu::DecimalFormat::touch(this, &v2);
}

uint64_t icu::DecimalFormat::getAttribute(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)(a1 + 360);
  if (!v4)
  {
    int v5 = 7;
LABEL_10:
    *a3 = v5;
    return 0xFFFFFFFFLL;
  }
  switch(a2)
  {
    case 0:
      return *(char *)(a1 + 340);
    case 1:
      return icu::NumberFormat::isGroupingUsed((icu::NumberFormat *)a1);
    case 2:
      return *(unsigned __int8 *)(v4 + 73);
    case 3:
      return icu::NumberFormat::getMaximumIntegerDigits((icu::NumberFormat *)a1);
    case 4:
    case 5:
      return icu::NumberFormat::getMinimumIntegerDigits((icu::NumberFormat *)a1);
    case 6:
      return icu::NumberFormat::getMaximumFractionDigits((icu::NumberFormat *)a1);
    case 7:
    case 8:
      return icu::NumberFormat::getMinimumFractionDigits((icu::NumberFormat *)a1);
    case 9:
      return icu::DecimalFormat::getMultiplier((icu::DecimalFormat *)a1);
    case 10:
      int v6 = *(_DWORD *)(v4 + 84);
      goto LABEL_40;
    case 11:
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)a1 + 272);
      goto LABEL_38;
    case 12:
    case 20:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
LABEL_16:
      int v5 = 16;
      goto LABEL_10;
    case 13:
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)a1 + 424);
      goto LABEL_38;
    case 14:
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)a1 + 456);
LABEL_38:
      uint64_t result = v7();
      break;
    case 15:
      int v6 = *(_DWORD *)(v4 + 760);
LABEL_40:
      uint64_t result = v6 & ~(v6 >> 31);
      break;
    case 16:
      uint64_t result = *(_DWORD *)(v4 + 124) != -1 || *(_DWORD *)(v4 + 104) != -1;
      break;
    case 17:
      uint64_t result = *(unsigned int *)(v4 + 3884);
      break;
    case 18:
      uint64_t result = *(unsigned int *)(v4 + 3864);
      break;
    case 19:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      break;
    case 21:
      uint64_t result = *(unsigned int *)(v4 + 132);
      break;
    case 22:
      uint64_t result = *(unsigned int *)(v4 + 116);
      break;
    case 23:
      if (*(unsigned char *)(v4 + 64)) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = *(unsigned int *)(v4 + 68);
      }
      break;
    case 48:
      uint64_t result = *(unsigned __int8 *)(v4 + 765);
      break;
    default:
      switch(a2)
      {
        case 4096:
          uint64_t result = *(unsigned __int8 *)(v4 + 76);
          break;
        case 4097:
          uint64_t result = *(unsigned __int8 *)(v4 + 476);
          break;
        case 4098:
          uint64_t result = *(unsigned __int8 *)(v4 + 72);
          break;
        case 4099:
          uint64_t result = *(unsigned __int8 *)(v4 + 464);
          break;
        case 4100:
          uint64_t result = *(unsigned __int8 *)(v4 + 764);
          break;
        default:
          goto LABEL_16;
      }
      break;
  }
  return result;
}

uint64_t icu::DecimalFormat::isDecimalSeparatorAlwaysShown(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (char *)(v1 + 73);
  }
  else {
    UErrorCode v2 = (char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 65;
  }
  return *v2;
}

BOOL icu::DecimalFormat::areSignificantDigitsUsed(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    Default = (_DWORD *)(v1 + 8);
  }
  else {
    Default = icu::number::impl::DecimalFormatProperties::getDefault(this);
  }
  return Default[29] != -1 || Default[24] != -1;
}

uint64_t icu::DecimalFormat::getMaximumSignificantDigits(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (unsigned int *)(v1 + 3864);
  }
  else {
    UErrorCode v2 = (unsigned int *)((char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 96);
  }
  return *v2;
}

uint64_t icu::DecimalFormat::getMinimumSignificantDigits(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (unsigned int *)(v1 + 3884);
  }
  else {
    UErrorCode v2 = (unsigned int *)((char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 116);
  }
  return *v2;
}

uint64_t icu::DecimalFormat::getMultiplier(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    Default = (unsigned int *)(v1 + 8);
  }
  else {
    Default = (unsigned int *)icu::number::impl::DecimalFormatProperties::getDefault(this);
  }
  uint64_t v3 = Default[30];
  if (v3 == 1)
  {
    int v4 = Default[21];
    if (v4) {
      return (int)uprv_pow10(v4);
    }
    else {
      return 1;
    }
  }
  return v3;
}

uint64_t icu::DecimalFormat::getMultiplierScale(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (unsigned int *)(v1 + 132);
  }
  else {
    UErrorCode v2 = (unsigned int *)((char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 124);
  }
  return *v2;
}

uint64_t icu::DecimalFormat::getGroupingSize(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (int *)(v1 + 84);
  }
  else {
    UErrorCode v2 = (int *)((char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 76);
  }
  return *v2 & ~(*v2 >> 31);
}

uint64_t icu::DecimalFormat::getSecondaryGroupingSize(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (int *)(v1 + 760);
  }
  else {
    UErrorCode v2 = (int *)((char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 752);
  }
  return *v2 & ~(*v2 >> 31);
}

uint64_t icu::DecimalFormat::isParseNoExponent(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (char *)(v1 + 476);
  }
  else {
    UErrorCode v2 = (char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 468;
  }
  return *v2;
}

uint64_t icu::DecimalFormat::isDecimalPatternMatchRequired(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (char *)(v1 + 72);
  }
  else {
    UErrorCode v2 = (char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 64;
  }
  return *v2;
}

uint64_t icu::DecimalFormat::getCurrencyUsage(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1 && !*(unsigned char *)(v1 + 64)) {
    return *(unsigned int *)(v1 + 68);
  }
  else {
    return 0;
  }
}

uint64_t icu::DecimalFormat::getMinimumGroupingDigits(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (unsigned int *)(v1 + 116);
  }
  else {
    UErrorCode v2 = (unsigned int *)((char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 108);
  }
  return *v2;
}

uint64_t icu::DecimalFormat::isParseCaseSensitive(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (char *)(v1 + 464);
  }
  else {
    UErrorCode v2 = (char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 456;
  }
  return *v2;
}

uint64_t icu::DecimalFormat::isSignAlwaysShown(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (char *)(v1 + 764);
  }
  else {
    UErrorCode v2 = (char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 756;
  }
  return *v2;
}

uint64_t icu::DecimalFormat::isFormatFailIfMoreThanMaxDigits(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    UErrorCode v2 = (char *)(v1 + 76);
  }
  else {
    UErrorCode v2 = (char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 68;
  }
  return *v2;
}

void *icu::DecimalFormat::setGroupingUsed(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2 && *(unsigned __int8 *)(v2 + 88) != a2)
  {
    int v4 = this;
    icu::NumberFormat::setGroupingUsed((uint64_t)this, a2);
    uint64_t v5 = v4[45];
    *(unsigned char *)(v5 + 88) = a2 != 0;
    if (*(int *)(v5 + 84) <= 0) {
      *(_DWORD *)(v5 + 84) = 3;
    }
    UErrorCode v6 = U_ZERO_ERROR;
    return icu::DecimalFormat::touch(v4, &v6);
  }
  return this;
}

void *icu::DecimalFormat::setParseIntegerOnly(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 465) != a2)
    {
      int v4 = this;
      icu::NumberFormat::setParseIntegerOnly((uint64_t)this, a2);
      *(unsigned char *)(v4[45] + 465) = a2 != 0;
      UErrorCode v5 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(v4, &v5);
    }
  }
  return this;
}

void *icu::DecimalFormat::setLenient(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    uint64_t v3 = this;
    int v4 = a2 == 0;
    if (*(unsigned char *)(v2 + 468) || *(_DWORD *)(v2 + 472) != v4)
    {
      icu::NumberFormat::setLenient((uint64_t)this, a2);
      uint64_t v5 = v3[45];
      *(_DWORD *)(v5 + 472) = v4;
      *(unsigned char *)(v5 + 468) = 0;
      UErrorCode v6 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(v3, &v6);
    }
  }
  return this;
}

icu::DecimalFormat *icu::DecimalFormat::DecimalFormat(icu::DecimalFormat *this, const icu::UnicodeString *a2, icu::DecimalFormatSymbols *a3, UParseError *a4, UErrorCode *a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  icu::DecimalFormat::DecimalFormat(this, a3, a5);
  if (*(int *)a5 <= 0)
  {
    icu::Locale::Locale((icu::Locale *)v10, (uint64_t)a3 + 1936);
    icu::DecimalFormat::setPropertiesFromPattern((uint64_t)this, a2, 1, (const icu::Locale *)v10, a5);
    icu::Locale::~Locale((icu::Locale *)v10);
    icu::DecimalFormat::touch(this, a5);
  }
  return this;
}

{
  void *v9;
  unsigned char v11[224];
  uint64_t v12;

  unint64_t v12 = *MEMORY[0x1E4F143B8];
  icu::DecimalFormat::DecimalFormat(this, a3, a5);
  if (*(int *)a5 <= 0)
  {
    icu::Locale::Locale((icu::Locale *)v11, (uint64_t)a3 + 1936);
    icu::DecimalFormat::setPropertiesFromPattern((uint64_t)this, a2, 1, (const icu::Locale *)v11, a5);
    icu::Locale::~Locale(v9, (icu::Locale *)v11);
    icu::DecimalFormat::touch(this, a5);
  }
  return this;
}

icu::DecimalFormat *icu::DecimalFormat::DecimalFormat(icu::DecimalFormat *this, const icu::UnicodeString *a2, const icu::DecimalFormatSymbols *a3, UErrorCode *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  icu::DecimalFormat::DecimalFormat(this, 0, a4);
  int v9 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v9 > 0) {
    return this;
  }
  UErrorCode v10 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v9, (icu::UMemory *)0xB48, v8);
  uint64_t v11 = v10;
  if (v10)
  {
    icu::DecimalFormatSymbols::DecimalFormatSymbols(v10, a3);
    if (*(int *)a4 < 1)
    {
      uint64_t v12 = *((void *)this + 45);
      uint64_t v13 = *(void *)(v12 + 768);
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      *(void *)(v12 + 768) = v11;
      icu::Locale::Locale((icu::Locale *)v18, (uint64_t)a3 + 1936);
      icu::DecimalFormat::setPropertiesFromPattern((uint64_t)this, a2, 1, (const icu::Locale *)v18, a4);
      icu::Locale::~Locale((icu::Locale *)v18);
      icu::DecimalFormat::touch(this, a4);
      return this;
    }
  }
  else if (*(int *)a4 <= 0)
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  uint64_t v14 = (void *)*((void *)this + 45);
  if (v14)
  {
    sub_18C914194(v14 + 471);
    uint64_t v15 = v14[470];
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    sub_18C913CF8(v14 + 162);
    icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(v14 + 97));
    uint64_t v16 = v14[96];
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    sub_18C914194(v14 + 1);
    icu::UMemory::operator delete(v14);
  }
  *((void *)this + 45) = 0;
  *a4 = U_MEMORY_ALLOCATION_ERROR;
  if (v11) {
    (*(void (**)(icu::DecimalFormatSymbols *))(*(void *)v11 + 8))(v11);
  }
  return this;
}

{
  unint64_t v8;
  uint64_t *v9;
  icu::DecimalFormatSymbols *v10;
  icu::DecimalFormatSymbols *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[224];
  uint64_t v19;

  uint64_t v19 = *MEMORY[0x1E4F143B8];
  icu::DecimalFormat::DecimalFormat(this, 0, a4);
  int v9 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v9 > 0) {
    return this;
  }
  UErrorCode v10 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v9, (icu::UMemory *)0xB48, v8);
  uint64_t v11 = v10;
  if (v10)
  {
    icu::DecimalFormatSymbols::DecimalFormatSymbols(v10, a3);
    if (*(int *)a4 < 1)
    {
      uint64_t v12 = *((void *)this + 45);
      uint64_t v13 = *(void *)(v12 + 768);
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      *(void *)(v12 + 768) = v11;
      icu::Locale::Locale((icu::Locale *)v18, (uint64_t)a3 + 1936);
      icu::DecimalFormat::setPropertiesFromPattern((uint64_t)this, a2, 1, (const icu::Locale *)v18, a4);
      icu::Locale::~Locale((icu::Locale *)v18);
      icu::DecimalFormat::touch(this, a4);
      return this;
    }
  }
  else if (*(int *)a4 <= 0)
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  uint64_t v14 = (void *)*((void *)this + 45);
  if (v14)
  {
    sub_18C914194(v14 + 471);
    uint64_t v15 = v14[470];
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    sub_18C913CF8(v14 + 162);
    icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(v14 + 97));
    uint64_t v16 = v14[96];
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    sub_18C914194(v14 + 1);
    icu::UMemory::operator delete(v14);
  }
  *((void *)this + 45) = 0;
  *a4 = U_MEMORY_ALLOCATION_ERROR;
  if (v11) {
    (*(void (**)(icu::DecimalFormatSymbols *))(*(void *)v11 + 8))(v11);
  }
  return this;
}

icu::DecimalFormat *icu::DecimalFormat::DecimalFormat(icu::DecimalFormat *this, uint64_t **a2)
{
  int v4 = (void *)icu::NumberFormat::NumberFormat(this, (const icu::NumberFormat *)a2);
  *int v4 = &unk_1EDA4B8E0;
  v4[45] = 0;
  UErrorCode v6 = a2[45];
  if (v6)
  {
    uint64_t v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x11C0, v5);
    if (v7)
    {
      uint64_t v8 = sub_18C913E08((uint64_t)v7, (uint64_t)(a2[45] + 1));
      *((void *)this + 45) = v8;
      UErrorCode v18 = U_ZERO_ERROR;
      uint64_t v9 = v8 + 768;
      uint64_t v12 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v11, (icu::UMemory *)0xB48, v10);
      if (v12)
      {
        uint64_t v13 = (const icu::DecimalFormatSymbols *)((uint64_t (*)(uint64_t **))(*a2)[40])(a2);
        icu::DecimalFormatSymbols::DecimalFormatSymbols(v12, v13);
      }
      sub_18C7F5A70(v9, (uint64_t)v12, (int *)&v18);
      if (v18 < U_ILLEGAL_ARGUMENT_ERROR)
      {
        icu::DecimalFormat::touch(this, &v18);
        return this;
      }
      uint64_t v14 = (void *)*((void *)this + 45);
      if (v14)
      {
        sub_18C914194(v14 + 471);
        uint64_t v15 = v14[470];
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        sub_18C913CF8(v14 + 162);
        icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(v14 + 97));
        uint64_t v16 = v14[96];
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
        sub_18C914194(v14 + 1);
        icu::UMemory::operator delete(v14);
      }
    }
    *((void *)this + 45) = 0;
  }
  return this;
}

void *icu::DecimalFormat::operator=(void *a1, void *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1[45];
    if (v3)
    {
      uint64_t v5 = a2[45];
      if (v5)
      {
        sub_18C91007C(v3 + 8, (unsigned __int8 *)(v5 + 8));
        icu::number::impl::DecimalFormatProperties::clear((icu::number::impl::DecimalFormatProperties *)(a1[45] + 3768));
        UErrorCode v17 = U_ZERO_ERROR;
        uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0xB48, v6);
        if (v8)
        {
          uint64_t v9 = (icu::DecimalFormatSymbols *)v8;
          unint64_t v10 = (const icu::DecimalFormatSymbols *)(*(uint64_t (**)(void *))(*a2 + 320))(a2);
          icu::DecimalFormatSymbols::DecimalFormatSymbols(v9, v10);
          uint64_t v11 = a1[45];
          uint64_t v12 = *(void *)(v11 + 768);
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
          }
          *(void *)(v11 + 768) = v9;
          icu::DecimalFormat::touch(a1, &v17);
        }
        else
        {
          uint64_t v13 = (void *)a1[45];
          if (v13)
          {
            sub_18C914194(v13 + 471);
            uint64_t v14 = v13[470];
            if (v14) {
              (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            }
            sub_18C913CF8(v13 + 162);
            icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(v13 + 97));
            uint64_t v15 = v13[96];
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
            }
            sub_18C914194(v13 + 1);
            icu::UMemory::operator delete(v13);
          }
          a1[45] = 0;
        }
      }
    }
  }
  return a1;
}

uint64_t sub_18C91007C(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  *(unsigned char *)a1 = v4;
  if (!v4) {
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
  }
  int v5 = a2[8];
  *(unsigned char *)(a1 + 8) = v5;
  if (!v5) {
    icu::CurrencyUnit::operator=(a1 + 16, (unint64_t)(a2 + 16));
  }
  sub_18C91401C((uint64_t **)(a1 + 48), (uint64_t **)a2 + 6);
  int v6 = a2[56];
  *(unsigned char *)(a1 + 56) = v6;
  if (!v6) {
    *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
  }
  long long v7 = *((_OWORD *)a2 + 4);
  long long v8 = *((_OWORD *)a2 + 5);
  long long v9 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  icu::UnicodeString::operator=((UChar **)(a1 + 128), (UChar **)a2 + 16);
  icu::UnicodeString::operator=((UChar **)(a1 + 192), (UChar **)a2 + 24);
  icu::UnicodeString::operator=((UChar **)(a1 + 256), (UChar **)a2 + 32);
  icu::UnicodeString::operator=((UChar **)(a1 + 320), (UChar **)a2 + 40);
  int v10 = a2[384];
  *(unsigned char *)(a1 + 384) = v10;
  if (!v10) {
    *(_DWORD *)(a1 + 388) = *((_DWORD *)a2 + 97);
  }
  icu::UnicodeString::operator=((UChar **)(a1 + 392), (UChar **)a2 + 49);
  *(_WORD *)(a1 + 456) = *((_WORD *)a2 + 228);
  int v11 = a2[460];
  *(unsigned char *)(a1 + 460) = v11;
  if (!v11) {
    *(_DWORD *)(a1 + 464) = *((_DWORD *)a2 + 116);
  }
  *(void *)(a1 + 468) = *(void *)(a2 + 468);
  icu::UnicodeString::operator=((UChar **)(a1 + 480), (UChar **)a2 + 60);
  icu::UnicodeString::operator=((UChar **)(a1 + 544), (UChar **)a2 + 68);
  icu::UnicodeString::operator=((UChar **)(a1 + 608), (UChar **)a2 + 76);
  icu::UnicodeString::operator=((UChar **)(a1 + 672), (UChar **)a2 + 84);
  *(void *)(a1 + 736) = *((void *)a2 + 92);
  int v12 = a2[744];
  *(unsigned char *)(a1 + 744) = v12;
  if (!v12) {
    *(_DWORD *)(a1 + 748) = *((_DWORD *)a2 + 187);
  }
  int v13 = *((_DWORD *)a2 + 188);
  *(_WORD *)(a1 + 756) = *((_WORD *)a2 + 378);
  *(_DWORD *)(a1 + 752) = v13;
  return a1;
}

void icu::DecimalFormat::~DecimalFormat(icu::DecimalFormat *this)
{
  *(void *)this = &unk_1EDA4B8E0;
  uint64_t v2 = *((void *)this + 45);
  if (v2)
  {
    unint64_t v3 = atomic_exchange((atomic_ullong *volatile)(v2 + 1272), 0);
    if (v3) {
      (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
    }
    unint64_t v4 = atomic_exchange((atomic_ullong *volatile)(*((void *)this + 45) + 1280), 0);
    if (v4) {
      (*(void (**)(unint64_t))(*(void *)v4 + 8))(v4);
    }
    int v5 = (void *)*((void *)this + 45);
    if (v5)
    {
      sub_18C914194(v5 + 471);
      uint64_t v6 = v5[470];
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      sub_18C913CF8(v5 + 162);
      icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(v5 + 97));
      uint64_t v7 = v5[96];
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      sub_18C914194(v5 + 1);
      icu::UMemory::operator delete(v5);
    }
  }

  icu::NumberFormat::~NumberFormat(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::DecimalFormat::~DecimalFormat(this);

  icu::UMemory::operator delete(v1);
}

icu::DecimalFormat *icu::DecimalFormat::clone(icu::DecimalFormat *this, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 45);
  if (!v2) {
    return 0;
  }
  uint64_t result = (icu::DecimalFormat *)icu::UMemory::operator new(v2, (icu::UMemory *)0x170, a2);
  if (result)
  {
    uint64_t result = icu::DecimalFormat::DecimalFormat(result, (uint64_t **)this);
    if (!*((void *)result + 45))
    {
      (*(void (**)(icu::DecimalFormat *))(*(void *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t icu::DecimalFormat::operator==(void *a1, void *lpsrc)
{
  if (!v3) {
    return 0;
  }
  uint64_t v4 = a1[45];
  if (!v4) {
    return 0;
  }
  int v5 = v3;
  uint64_t v6 = v3[45];
  if (!v6
    || !icu::number::impl::DecimalFormatProperties::_equals((icu::number::impl::DecimalFormatProperties *)(v4 + 8), (const icu::number::impl::DecimalFormatProperties *)(v6 + 8), 0))
  {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 320))(a1);
  uint64_t v8 = (*(uint64_t (**)(void *))(*v5 + 320))(v5);

  return icu::DecimalFormatSymbols::operator==(v7, v8);
}

icu::UnicodeString *icu::DecimalFormat::format(icu::DecimalFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  v17[13] = *(void **)MEMORY[0x1E4F143B8];
  if (*((void *)this + 45))
  {
    if (*((_DWORD *)a4 + 2) != -1 || (icu::DecimalFormat::fastFormatDouble(this, a2, a3) & 1) == 0)
    {
      UErrorCode v15 = U_ZERO_ERROR;
      memset(v17, 0, 104);
      memset(v16, 0, sizeof(v16));
      sub_18C9140A8((uint64_t)v16);
      icu::number::impl::DecimalQuantity::setToDouble(v17, a2);
      icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(*((void *)this + 45) + 776), (icu::number::impl::UFormattedNumberData *)v16, &v15);
      unsigned int v9 = *((unsigned __int16 *)a3 + 4);
      int v10 = (__int16)v9;
      unsigned int v11 = v9 >> 5;
      if (v10 >= 0) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = *((unsigned int *)a3 + 3);
      }
      icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)v16, a4, (icu::FieldPosition *)v12, &v15, v8);
      v14[0] = &unk_1EDA47768;
      v14[1] = a3;
      icu::FormattedValueStringBuilderImpl::appendTo((icu::FormattedValueStringBuilderImpl *)v16, (icu::Appendable *)v14, &v15);
      icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v14);
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v16);
    }
  }
  else
  {
    icu::UnicodeString::setToBogus(a3);
  }
  return a3;
}

uint64_t icu::DecimalFormat::fastFormatDouble(icu::DecimalFormat *this, double a2, icu::UnicodeString *a3)
{
  if (!*(unsigned char *)(*((void *)this + 45) + 4528)) {
    return 0;
  }
  double v6 = uprv_trunc(a2);
  BOOL v7 = a2 <= 2147483650.0 && a2 > -2147483650.0;
  if (!v7 || v6 != a2) {
    return 0;
  }
  icu::DecimalFormat::doFastFormatInt32(this, (int)a2, *(void *)&a2 >> 63, a3);
  return 1;
}

icu::FormattedValueStringBuilderImpl *icu::DecimalFormat::fieldPositionHelper(icu::FormattedValueStringBuilderImpl *this, const icu::number::impl::UFormattedNumberData *a2, icu::FieldPosition *a3, UErrorCode *a4, UErrorCode *a5)
{
  if (*(int *)a4 <= 0)
  {
    int v5 = (int)a3;
    *((_DWORD *)a2 + 3) = 0;
    *((_DWORD *)a2 + 4) = 0;
    this = (icu::FormattedValueStringBuilderImpl *)icu::FormattedValueStringBuilderImpl::nextFieldPosition(this, a2, a4);
    if (v5)
    {
      if (this)
      {
        memset(v7, 0, sizeof(v7));
        sub_18C93A930((uint64_t)v7, (uint64_t)a2);
        sub_18C93A9A4((uint64_t)v7, v5);
        return (icu::FormattedValueStringBuilderImpl *)nullsub_32(v7);
      }
    }
  }
  return this;
}

icu::UnicodeString *icu::DecimalFormat::format(icu::DecimalFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    if (*((void *)this + 45))
    {
      if (*((_DWORD *)a4 + 2) != -1 || (icu::DecimalFormat::fastFormatDouble(this, a2, a3) & 1) == 0)
      {
        uint64_t v19 = 0;
        memset(v18, 0, sizeof(v18));
        memset(v17, 0, sizeof(v17));
        sub_18C9140A8((uint64_t)v17);
        icu::number::impl::DecimalQuantity::setToDouble((void **)v18, a2);
        icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(*((void *)this + 45) + 776), (icu::number::impl::UFormattedNumberData *)v17, a5);
        unsigned int v11 = *((unsigned __int16 *)a3 + 4);
        int v12 = (__int16)v11;
        unsigned int v13 = v11 >> 5;
        if (v12 >= 0) {
          unint64_t v14 = v13;
        }
        else {
          unint64_t v14 = *((unsigned int *)a3 + 3);
        }
        icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)v17, a4, (icu::FieldPosition *)v14, a5, v10);
        v16[0] = &unk_1EDA47768;
        v16[1] = a3;
        icu::FormattedValueStringBuilderImpl::appendTo((icu::FormattedValueStringBuilderImpl *)v17, (icu::Appendable *)v16, a5);
        icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v16);
        icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v17);
      }
    }
    else
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
      icu::UnicodeString::setToBogus(a3);
    }
  }
  return a3;
}

icu::UnicodeString *icu::DecimalFormat::format(icu::DecimalFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    if (*((void *)this + 45))
    {
      if (a4 || (icu::DecimalFormat::fastFormatDouble(this, a2, a3) & 1) == 0)
      {
        uint64_t v19 = 0;
        memset(v18, 0, sizeof(v18));
        memset(v17, 0, sizeof(v17));
        sub_18C9140A8((uint64_t)v17);
        icu::number::impl::DecimalQuantity::setToDouble((void **)v18, a2);
        icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(*((void *)this + 45) + 776), (icu::number::impl::UFormattedNumberData *)v17, a5);
        unsigned int v11 = *((unsigned __int16 *)a3 + 4);
        int v12 = (__int16)v11;
        unsigned int v13 = v11 >> 5;
        if (v12 >= 0) {
          unint64_t v14 = v13;
        }
        else {
          unint64_t v14 = *((unsigned int *)a3 + 3);
        }
        icu::DecimalFormat::fieldPositionIteratorHelper((icu::DecimalFormat *)v17, a4, (icu::FieldPositionIterator *)v14, a5, v10);
        v16[0] = &unk_1EDA47768;
        v16[1] = a3;
        icu::FormattedValueStringBuilderImpl::appendTo((icu::FormattedValueStringBuilderImpl *)v17, (icu::Appendable *)v16, a5);
        icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v16);
        icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v17);
      }
    }
    else
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
      icu::UnicodeString::setToBogus(a3);
    }
  }
  return a3;
}

void icu::DecimalFormat::fieldPositionIteratorHelper(icu::DecimalFormat *this, const icu::number::impl::UFormattedNumberData *a2, icu::FieldPositionIterator *a3, UErrorCode *a4, UErrorCode *a5)
{
  if (a2)
  {
    if (*(int *)a4 <= 0)
    {
      int v6 = (int)a3;
      uint64_t v9 = 0;
      memset(v8, 0, sizeof(v8));
      icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v8, a2, a4);
      icu::FieldPositionHandler::setShift((uint64_t)v8, v6);
      icu::FormattedValueStringBuilderImpl::getAllFieldPositions(this, (icu::FieldPositionIteratorHandler *)v8, a4);
      icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v8);
    }
  }
}

uint64_t icu::DecimalFormat::format(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 112))(a1, a2);
}

{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 120))(a1, a2);
}

{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 128))(a1, a2);
}

icu::UnicodeString *icu::DecimalFormat::format(icu::DecimalFormat *this, unint64_t __x, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  v18[13] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 45);
  if (v5)
  {
    if (*((_DWORD *)a4 + 2) == -1 && __x + 0x7FFFFFFF <= 0xFFFFFFFE && *(unsigned char *)(v5 + 4528))
    {
      icu::DecimalFormat::doFastFormatInt32(this, __x, __x >> 63, a3);
    }
    else
    {
      UErrorCode v16 = U_ZERO_ERROR;
      memset(v18, 0, 104);
      memset(v17, 0, sizeof(v17));
      sub_18C9140A8((uint64_t)v17);
      icu::number::impl::DecimalQuantity::setToLong(v18, __x);
      icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(*((void *)this + 45) + 776), (icu::number::impl::UFormattedNumberData *)v17, &v16);
      unsigned int v10 = *((unsigned __int16 *)a3 + 4);
      int v11 = (__int16)v10;
      unsigned int v12 = v10 >> 5;
      if (v11 >= 0) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = *((unsigned int *)a3 + 3);
      }
      icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)v17, a4, (icu::FieldPosition *)v13, &v16, v9);
      v15[0] = &unk_1EDA47768;
      v15[1] = a3;
      icu::FormattedValueStringBuilderImpl::appendTo((icu::FormattedValueStringBuilderImpl *)v17, (icu::Appendable *)v15, &v16);
      icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v15);
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v17);
    }
  }
  else
  {
    icu::UnicodeString::setToBogus(a3);
  }
  return a3;
}

uint64_t icu::DecimalFormat::fastFormatInt64(icu::DecimalFormat *this, unint64_t a2, icu::UnicodeString *a3)
{
  BOOL v3 = a2 + 0x7FFFFFFF >= 0xFFFFFFFF || *(unsigned char *)(*((void *)this + 45) + 4528) == 0;
  uint64_t v4 = !v3;
  if (!v3) {
    icu::DecimalFormat::doFastFormatInt32(this, a2, a2 >> 63, a3);
  }
  return v4;
}

icu::UnicodeString *icu::DecimalFormat::format(icu::DecimalFormat *this, unint64_t __x, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    uint64_t v8 = *((void *)this + 45);
    if (v8)
    {
      if (*((_DWORD *)a4 + 2) == -1 && __x + 0x7FFFFFFF <= 0xFFFFFFFE && *(unsigned char *)(v8 + 4528))
      {
        icu::DecimalFormat::doFastFormatInt32(this, __x, __x >> 63, a3);
      }
      else
      {
        uint64_t v20 = 0;
        memset(v19, 0, sizeof(v19));
        memset(v18, 0, sizeof(v18));
        sub_18C9140A8((uint64_t)v18);
        icu::number::impl::DecimalQuantity::setToLong((void **)v19, __x);
        icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(*((void *)this + 45) + 776), (icu::number::impl::UFormattedNumberData *)v18, a5);
        unsigned int v12 = *((unsigned __int16 *)a3 + 4);
        int v13 = (__int16)v12;
        unsigned int v14 = v12 >> 5;
        if (v13 >= 0) {
          unint64_t v15 = v14;
        }
        else {
          unint64_t v15 = *((unsigned int *)a3 + 3);
        }
        icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)v18, a4, (icu::FieldPosition *)v15, a5, v11);
        v17[0] = &unk_1EDA47768;
        v17[1] = a3;
        icu::FormattedValueStringBuilderImpl::appendTo((icu::FormattedValueStringBuilderImpl *)v18, (icu::Appendable *)v17, a5);
        icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v17);
        icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v18);
      }
    }
    else
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
      icu::UnicodeString::setToBogus(a3);
    }
  }
  return a3;
}

icu::UnicodeString *icu::DecimalFormat::format(icu::DecimalFormat *this, unint64_t __x, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    uint64_t v8 = *((void *)this + 45);
    if (v8)
    {
      if (a4 || __x + 0x7FFFFFFF > 0xFFFFFFFE || !*(unsigned char *)(v8 + 4528))
      {
        uint64_t v20 = 0;
        memset(v19, 0, sizeof(v19));
        memset(v18, 0, sizeof(v18));
        sub_18C9140A8((uint64_t)v18);
        icu::number::impl::DecimalQuantity::setToLong((void **)v19, __x);
        icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(*((void *)this + 45) + 776), (icu::number::impl::UFormattedNumberData *)v18, a5);
        unsigned int v12 = *((unsigned __int16 *)a3 + 4);
        int v13 = (__int16)v12;
        unsigned int v14 = v12 >> 5;
        if (v13 >= 0) {
          unint64_t v15 = v14;
        }
        else {
          unint64_t v15 = *((unsigned int *)a3 + 3);
        }
        icu::DecimalFormat::fieldPositionIteratorHelper((icu::DecimalFormat *)v18, a4, (icu::FieldPositionIterator *)v15, a5, v11);
        v17[0] = &unk_1EDA47768;
        v17[1] = a3;
        icu::FormattedValueStringBuilderImpl::appendTo((icu::FormattedValueStringBuilderImpl *)v18, (icu::Appendable *)v17, a5);
        icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v17);
        icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v18);
      }
      else
      {
        icu::DecimalFormat::doFastFormatInt32(this, __x, __x >> 63, a3);
      }
    }
    else
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
      icu::UnicodeString::setToBogus(a3);
    }
  }
  return a3;
}

uint64_t icu::DecimalFormat::format(uint64_t a1, const char *a2, int a3, uint64_t a4, const icu::number::impl::UFormattedNumberData *a5, UErrorCode *a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 <= 0)
  {
    if (*(void *)(a1 + 360))
    {
      uint64_t v21 = 0;
      memset(v20, 0, sizeof(v20));
      memset(v19, 0, sizeof(v19));
      sub_18C9140A8((uint64_t)v19);
      icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v20, a2, a3, a6);
      icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(*(void *)(a1 + 360) + 776), (icu::number::impl::UFormattedNumberData *)v19, a6);
      unsigned int v13 = *(unsigned __int16 *)(a4 + 8);
      int v14 = (__int16)v13;
      unsigned int v15 = v13 >> 5;
      if (v14 >= 0) {
        unint64_t v16 = v15;
      }
      else {
        unint64_t v16 = *(unsigned int *)(a4 + 12);
      }
      icu::DecimalFormat::fieldPositionIteratorHelper((icu::DecimalFormat *)v19, a5, (icu::FieldPositionIterator *)v16, a6, v12);
      v18[0] = &unk_1EDA47768;
      v18[1] = a4;
      icu::FormattedValueStringBuilderImpl::appendTo((icu::FormattedValueStringBuilderImpl *)v19, (icu::Appendable *)v18, a6);
      icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v18);
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v19);
    }
    else
    {
      *a6 = U_MEMORY_ALLOCATION_ERROR;
      icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
    }
  }
  return a4;
}

icu::UnicodeString *icu::DecimalFormat::format(icu::DecimalFormat *this, const icu::number::impl::DecimalQuantity *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    if (*((void *)this + 45))
    {
      uint64_t v19 = 0;
      memset(v18, 0, sizeof(v18));
      memset(v17, 0, sizeof(v17));
      sub_18C9140A8((uint64_t)v17);
      icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)v18, (uint64_t)a2);
      icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(*((void *)this + 45) + 776), (icu::number::impl::UFormattedNumberData *)v17, a5);
      unsigned int v11 = *((unsigned __int16 *)a3 + 4);
      int v12 = (__int16)v11;
      unsigned int v13 = v11 >> 5;
      if (v12 >= 0) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = *((unsigned int *)a3 + 3);
      }
      icu::DecimalFormat::fieldPositionIteratorHelper((icu::DecimalFormat *)v17, a4, (icu::FieldPositionIterator *)v14, a5, v10);
      v16[0] = &unk_1EDA47768;
      v16[1] = a3;
      icu::FormattedValueStringBuilderImpl::appendTo((icu::FormattedValueStringBuilderImpl *)v17, (icu::Appendable *)v16, a5);
      icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v16);
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v17);
    }
    else
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
      icu::UnicodeString::setToBogus(a3);
    }
  }
  return a3;
}

icu::UnicodeString *icu::DecimalFormat::format(icu::DecimalFormat *this, const icu::number::impl::DecimalQuantity *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    if (*((void *)this + 45))
    {
      uint64_t v19 = 0;
      memset(v18, 0, sizeof(v18));
      memset(v17, 0, sizeof(v17));
      sub_18C9140A8((uint64_t)v17);
      icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)v18, (uint64_t)a2);
      icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(*((void *)this + 45) + 776), (icu::number::impl::UFormattedNumberData *)v17, a5);
      unsigned int v11 = *((unsigned __int16 *)a3 + 4);
      int v12 = (__int16)v11;
      unsigned int v13 = v11 >> 5;
      if (v12 >= 0) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = *((unsigned int *)a3 + 3);
      }
      icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)v17, a4, (icu::FieldPosition *)v14, a5, v10);
      v16[0] = &unk_1EDA47768;
      v16[1] = a3;
      icu::FormattedValueStringBuilderImpl::appendTo((icu::FormattedValueStringBuilderImpl *)v17, (icu::Appendable *)v16, a5);
      icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v16);
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v17);
    }
    else
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
      icu::UnicodeString::setToBogus(a3);
    }
  }
  return a3;
}

void icu::DecimalFormat::parse(icu::DecimalFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 45)) {
    return;
  }
  int v6 = *((_DWORD *)a4 + 2);
  unsigned int v7 = *((unsigned __int16 *)a2 + 4);
  if (v6 < 0)
  {
    unsigned int v9 = *((_DWORD *)a2 + 3);
    unsigned int v8 = v7 >> 5;
  }
  else
  {
    unsigned int v8 = v7 >> 5;
    unsigned int v9 = *((_DWORD *)a2 + 3);
    if ((v7 & 0x8000u) == 0) {
      signed int v10 = v7 >> 5;
    }
    else {
      signed int v10 = *((_DWORD *)a2 + 3);
    }
    if (v6 < v10)
    {
      uint64_t v20 = &unk_1EDA43700;
      uint64_t v21 = 0;
      uint64_t v26 = 0;
      memset(v25, 0, sizeof(v25));
      memset(v24, 0, sizeof(v24));
      long long v23 = 0u;
      memset(v22, 0, sizeof(v22));
      icu::numparse::impl::ParsedNumber::ParsedNumber((icu::numparse::impl::ParsedNumber *)v22);
      int v13 = *((_DWORD *)a4 + 2);
      Parseunint64_t r = icu::DecimalFormat::getParser(this, (UErrorCode *)&v21);
      unint64_t v15 = v21;
      if ((int)v21 <= 0)
      {
        unint64_t v16 = (icu::numparse::impl::NumberParserImpl *)Parser;
        icu::numparse::impl::NumberParserImpl::parse(Parser, a2, v13, 1, (icu::numparse::impl::ParsedNumber *)v22, (UErrorCode *)&v21);
        unint64_t v15 = v21;
        if ((int)v21 <= 0)
        {
          if (icu::numparse::impl::ParsedNumber::success((icu::numparse::impl::ParsedNumber *)v22))
          {
            *((_DWORD *)a4 + 2) = DWORD2(v23);
            char ParseFlags = icu::numparse::impl::NumberParserImpl::getParseFlags(v16);
            icu::numparse::impl::ParsedNumber::populateFormattable((icu::numparse::impl::ParsedNumber *)v22, a3, ParseFlags);
          }
          else
          {
            unint64_t v15 = (DWORD2(v23) + v13);
            *((_DWORD *)a4 + 3) = v15;
          }
        }
      }
      icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)v25);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v24);
      icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v22);
      icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v20);
      return;
    }
  }
  if ((v7 & 0x8000u) == 0) {
    unsigned int v18 = v8;
  }
  else {
    unsigned int v18 = v9;
  }
  if (v6 == v18) {
    *((_DWORD *)a4 + 3) = v6;
  }
}

unint64_t icu::DecimalFormat::getParser(icu::DecimalFormat *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  unint64_t result = atomic_load((unint64_t *)(*((void *)this + 45) + 1272));
  if (!result)
  {
    uint64_t v5 = (icu::numparse::impl::NumberParserImpl *)(*((void *)this + 45) + 8);
    int v6 = (const icu::number::impl::DecimalFormatProperties *)(*(uint64_t (**)(icu::DecimalFormat *))(*(void *)this + 320))(this);
    unint64_t result = icu::numparse::impl::NumberParserImpl::createParserFromProperties(v5, v6, 0, (BOOL)a2, v7);
    if (*(int *)a2 > 0) {
      return 0;
    }
    if (result)
    {
      uint64_t v8 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*((void *)this + 45) + 1272), (unint64_t *)&v8, result);
      if (v8)
      {
        (*(void (**)(unint64_t))(*(void *)result + 8))(result);
        return v8;
      }
    }
    else
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return result;
}

uint64_t *icu::DecimalFormat::parseCurrency(icu::DecimalFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  v29[1] = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 45))
  {
    int v4 = *((_DWORD *)a3 + 2);
    if ((v4 & 0x80000000) == 0)
    {
      unsigned int v6 = *((unsigned __int16 *)a2 + 4);
      int v7 = (__int16)v6;
      signed int v8 = v6 >> 5;
      if (v7 < 0) {
        signed int v8 = *((_DWORD *)a2 + 3);
      }
      if (v4 < v8)
      {
        uint64_t v22 = &unk_1EDA43700;
        uint64_t v23 = 0;
        v29[0] = 0;
        memset(v28, 0, sizeof(v28));
        memset(v27, 0, sizeof(v27));
        long long v26 = 0u;
        memset(v25, 0, sizeof(v25));
        icu::numparse::impl::ParsedNumber::ParsedNumber((icu::numparse::impl::ParsedNumber *)v25);
        int v10 = *((_DWORD *)a3 + 2);
        CurrencyParseunint64_t r = icu::DecimalFormat::getCurrencyParser(this, (UErrorCode *)&v23);
        int v12 = 0;
        unint64_t v13 = v23;
        if ((int)v23 > 0)
        {
LABEL_19:
          icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v28);
          icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v27);
          icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v25);
          icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v22);
          return v12;
        }
        unint64_t v14 = (icu::numparse::impl::NumberParserImpl *)CurrencyParser;
        icu::numparse::impl::NumberParserImpl::parse(CurrencyParser, a2, v10, 1, (icu::numparse::impl::ParsedNumber *)v25, (UErrorCode *)&v23);
        unint64_t v13 = v23;
        if ((int)v23 > 0)
        {
          int v12 = 0;
          goto LABEL_19;
        }
        if (!icu::numparse::impl::ParsedNumber::success((icu::numparse::impl::ParsedNumber *)v25))
        {
          int v12 = 0;
          unint64_t v13 = (DWORD2(v26) + v10);
          *((_DWORD *)a3 + 3) = v13;
          goto LABEL_19;
        }
        *((_DWORD *)a3 + 2) = DWORD2(v26);
        memset(v24, 0, sizeof(v24));
        icu::Formattable::Formattable((icu::Formattable *)v24);
        char ParseFlags = icu::numparse::impl::NumberParserImpl::getParseFlags(v14);
        icu::numparse::impl::ParsedNumber::populateFormattable((icu::numparse::impl::ParsedNumber *)v25, (icu::Formattable *)v24, ParseFlags);
        uint64_t v19 = icu::UMemory::operator new(v18, (icu::UMemory *)0x80, v17);
        if (v19)
        {
          int v12 = v19;
          uint64_t v21 = v29;
          icu::CurrencyAmount::CurrencyAmount(v19, v24, &v21, &v23);
          if ((int)v23 < 1)
          {
LABEL_18:
            icu::Formattable::~Formattable((icu::Formattable *)v24);
            goto LABEL_19;
          }
          (*(void (**)(uint64_t *))(*v12 + 8))(v12);
        }
        else if ((int)v23 <= 0)
        {
          int v12 = 0;
          LODWORD(v23) = 7;
          goto LABEL_18;
        }
        int v12 = 0;
        goto LABEL_18;
      }
    }
  }
  return 0;
}

unint64_t icu::DecimalFormat::getCurrencyParser(icu::DecimalFormat *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  unint64_t result = atomic_load((unint64_t *)(*((void *)this + 45) + 1280));
  if (!result)
  {
    uint64_t v5 = (icu::numparse::impl::NumberParserImpl *)(*((void *)this + 45) + 8);
    unsigned int v6 = (const icu::number::impl::DecimalFormatProperties *)(*(uint64_t (**)(icu::DecimalFormat *))(*(void *)this + 320))(this);
    unint64_t result = icu::numparse::impl::NumberParserImpl::createParserFromProperties(v5, v6, (const icu::DecimalFormatSymbols *)1, (BOOL)a2, v7);
    if (result)
    {
      uint64_t v8 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*((void *)this + 45) + 1280), (unint64_t *)&v8, result);
      if (v8)
      {
        (*(void (**)(unint64_t))(*(void *)result + 8))(result);
        return v8;
      }
    }
    else
    {
      uint64_t v9 = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(*((void *)this + 45) + 1280), (unint64_t *)&v9, 0);
      if (v9) {
        return v9;
      }
    }
  }
  return result;
}

uint64_t icu::DecimalFormat::getDecimalFormatSymbols(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (!v1) {
    return 0;
  }
  uint64_t result = *(void *)(v1 + 768);
  if (!result) {
    return icu::number::LocalizedNumberFormatter::getDecimalFormatSymbols((icu::number::LocalizedNumberFormatter *)(v1 + 776));
  }
  return result;
}

void *icu::DecimalFormat::adoptDecimalFormatSymbols(void *this, icu::DecimalFormatSymbols *a2)
{
  if (a2)
  {
    BOOL v3 = this;
    uint64_t v4 = this[45];
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 768);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      *(void *)(v4 + 768) = a2;
      UErrorCode v7 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(v3, &v7);
    }
    else
    {
      unsigned int v6 = *(uint64_t (**)(icu::DecimalFormatSymbols *))(*(void *)a2 + 8);
      return (void *)v6(a2);
    }
  }
  return this;
}

void icu::DecimalFormat::setDecimalFormatSymbols(icu::DecimalFormat *this, const icu::DecimalFormatSymbols *a2)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 45);
  if (v2)
  {
    uint64_t v5 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v2, (icu::UMemory *)0xB48, (unint64_t)a2);
    if (v5)
    {
      unsigned int v6 = v5;
      icu::DecimalFormatSymbols::DecimalFormatSymbols(v5, a2);
      uint64_t v7 = *((void *)this + 45);
      uint64_t v8 = *(void *)(v7 + 768);
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      *(void *)(v7 + 768) = v6;
      UErrorCode v12 = U_ZERO_ERROR;
      icu::DecimalFormat::touch(this, &v12);
    }
    else
    {
      uint64_t v9 = (void *)*((void *)this + 45);
      if (v9)
      {
        sub_18C914194(v9 + 471);
        uint64_t v10 = v9[470];
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        sub_18C913CF8(v9 + 162);
        icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(v9 + 97));
        uint64_t v11 = v9[96];
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        sub_18C914194(v9 + 1);
        icu::UMemory::operator delete(v9);
      }
      *((void *)this + 45) = 0;
    }
  }
}

uint64_t icu::DecimalFormat::getCurrencyPluralInfo(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    return *(void *)(v1 + 56);
  }
  else {
    return 0;
  }
}

void *icu::DecimalFormat::adoptCurrencyPluralInfo(void *this, icu::CurrencyPluralInfo *a2)
{
  uint64_t v3 = this[45];
  if (v3)
  {
    uint64_t v4 = this;
    uint64_t v5 = *(void *)(v3 + 56);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *(void *)(v3 + 56) = a2;
    UErrorCode v7 = U_ZERO_ERROR;
    return icu::DecimalFormat::touch(v4, &v7);
  }
  else if (a2)
  {
    unsigned int v6 = *(uint64_t (**)(icu::CurrencyPluralInfo *))(*(void *)a2 + 8);
    return (void *)v6(a2);
  }
  return this;
}

void *icu::DecimalFormat::setCurrencyPluralInfo@<X0>(void *this@<X0>, const icu::CurrencyPluralInfo *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = this[45];
  if (v3)
  {
    uint64_t v4 = this;
    uint64_t v5 = *(void *)(v3 + 56);
    if (v5)
    {
      icu::CurrencyPluralInfo::operator=(v5, (uint64_t)a2);
    }
    else
    {
      unsigned int v6 = icu::CurrencyPluralInfo::clone(a2, (unint64_t)a2, a3);
      uint64_t v7 = *(void *)(v3 + 56);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      *(void *)(v3 + 56) = v6;
    }
    UErrorCode v8 = U_ZERO_ERROR;
    return icu::DecimalFormat::touch(v4, &v8);
  }
  return this;
}

icu::UnicodeString *icu::DecimalFormat::getPositivePrefix(icu::DecimalFormat *this, icu::UnicodeString *a2)
{
  uint64_t v3 = *((void *)this + 45);
  if (!v3
    || (UErrorCode v5 = U_ZERO_ERROR,
        icu::number::LocalizedNumberFormatter::getAffixImpl((icu::number::LocalizedNumberFormatter *)(v3 + 776), 1, 0, a2, &v5), v5 >= U_ILLEGAL_ARGUMENT_ERROR))
  {
    icu::UnicodeString::setToBogus(a2);
  }
  return a2;
}

uint64_t icu::DecimalFormat::setPositivePrefix(uint64_t this, const icu::UnicodeString *a2)
{
  uint64_t v2 = *(void *)(this + 360);
  if (v2)
  {
    uint64_t v4 = (void *)this;
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    if (v5)
    {
      if (*(_WORD *)(v2 + 496)) {
        return this;
      }
    }
    else
    {
      int v6 = (__int16)v5;
      int v7 = v5 >> 5;
      if (v6 >= 0) {
        int v8 = v7;
      }
      else {
        int v8 = *((_DWORD *)a2 + 3);
      }
      unsigned int v9 = *(unsigned __int16 *)(v2 + 496);
      if ((v9 & 0x8000u) == 0) {
        unsigned int v10 = v9 >> 5;
      }
      else {
        unsigned int v10 = *(_DWORD *)(v2 + 500);
      }
      if ((v9 & 1) == 0 && v8 == v10)
      {
        this = icu::UnicodeString::doEquals(a2, (const icu::UnicodeString *)(v2 + 488), v8);
        if (this) {
          return this;
        }
        uint64_t v2 = v4[45];
      }
    }
    icu::UnicodeString::operator=((UChar **)(v2 + 488), (UChar **)a2);
    UErrorCode v11 = U_ZERO_ERROR;
    return (uint64_t)icu::DecimalFormat::touch(v4, &v11);
  }
  return this;
}

icu::UnicodeString *icu::DecimalFormat::getNegativePrefix(icu::DecimalFormat *this, icu::UnicodeString *a2)
{
  uint64_t v3 = *((void *)this + 45);
  if (!v3
    || (UErrorCode v5 = U_ZERO_ERROR,
        icu::number::LocalizedNumberFormatter::getAffixImpl((icu::number::LocalizedNumberFormatter *)(v3 + 776), 1, 1, a2, &v5), v5 >= U_ILLEGAL_ARGUMENT_ERROR))
  {
    icu::UnicodeString::setToBogus(a2);
  }
  return a2;
}

uint64_t icu::DecimalFormat::setNegativePrefix(uint64_t this, const icu::UnicodeString *a2)
{
  uint64_t v2 = *(void *)(this + 360);
  if (v2)
  {
    uint64_t v4 = (void *)this;
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    if (v5)
    {
      if (*(_WORD *)(v2 + 144)) {
        return this;
      }
    }
    else
    {
      int v6 = (__int16)v5;
      int v7 = v5 >> 5;
      if (v6 >= 0) {
        int v8 = v7;
      }
      else {
        int v8 = *((_DWORD *)a2 + 3);
      }
      unsigned int v9 = *(unsigned __int16 *)(v2 + 144);
      if ((v9 & 0x8000u) == 0) {
        unsigned int v10 = v9 >> 5;
      }
      else {
        unsigned int v10 = *(_DWORD *)(v2 + 148);
      }
      if ((v9 & 1) == 0 && v8 == v10)
      {
        this = icu::UnicodeString::doEquals(a2, (const icu::UnicodeString *)(v2 + 136), v8);
        if (this) {
          return this;
        }
        uint64_t v2 = v4[45];
      }
    }
    icu::UnicodeString::operator=((UChar **)(v2 + 136), (UChar **)a2);
    UErrorCode v11 = U_ZERO_ERROR;
    return (uint64_t)icu::DecimalFormat::touch(v4, &v11);
  }
  return this;
}

icu::UnicodeString *icu::DecimalFormat::getPositiveSuffix(icu::DecimalFormat *this, icu::UnicodeString *a2)
{
  uint64_t v3 = *((void *)this + 45);
  if (!v3
    || (UErrorCode v5 = U_ZERO_ERROR,
        icu::number::LocalizedNumberFormatter::getAffixImpl((icu::number::LocalizedNumberFormatter *)(v3 + 776), 0, 0, a2, &v5), v5 >= U_ILLEGAL_ARGUMENT_ERROR))
  {
    icu::UnicodeString::setToBogus(a2);
  }
  return a2;
}

uint64_t icu::DecimalFormat::setPositiveSuffix(uint64_t this, const icu::UnicodeString *a2)
{
  uint64_t v2 = *(void *)(this + 360);
  if (v2)
  {
    uint64_t v4 = (void *)this;
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    if (v5)
    {
      if (*(_WORD *)(v2 + 624)) {
        return this;
      }
    }
    else
    {
      int v6 = (__int16)v5;
      int v7 = v5 >> 5;
      if (v6 >= 0) {
        int v8 = v7;
      }
      else {
        int v8 = *((_DWORD *)a2 + 3);
      }
      unsigned int v9 = *(unsigned __int16 *)(v2 + 624);
      if ((v9 & 0x8000u) == 0) {
        unsigned int v10 = v9 >> 5;
      }
      else {
        unsigned int v10 = *(_DWORD *)(v2 + 628);
      }
      if ((v9 & 1) == 0 && v8 == v10)
      {
        this = icu::UnicodeString::doEquals(a2, (const icu::UnicodeString *)(v2 + 616), v8);
        if (this) {
          return this;
        }
        uint64_t v2 = v4[45];
      }
    }
    icu::UnicodeString::operator=((UChar **)(v2 + 616), (UChar **)a2);
    UErrorCode v11 = U_ZERO_ERROR;
    return (uint64_t)icu::DecimalFormat::touch(v4, &v11);
  }
  return this;
}

icu::UnicodeString *icu::DecimalFormat::getNegativeSuffix(icu::DecimalFormat *this, icu::UnicodeString *a2)
{
  uint64_t v3 = *((void *)this + 45);
  if (!v3
    || (UErrorCode v5 = U_ZERO_ERROR,
        icu::number::LocalizedNumberFormatter::getAffixImpl((icu::number::LocalizedNumberFormatter *)(v3 + 776), 0, 1, a2, &v5), v5 >= U_ILLEGAL_ARGUMENT_ERROR))
  {
    icu::UnicodeString::setToBogus(a2);
  }
  return a2;
}

uint64_t icu::DecimalFormat::setNegativeSuffix(uint64_t this, const icu::UnicodeString *a2)
{
  uint64_t v2 = *(void *)(this + 360);
  if (v2)
  {
    uint64_t v4 = (void *)this;
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    if (v5)
    {
      if (*(_WORD *)(v2 + 272)) {
        return this;
      }
    }
    else
    {
      int v6 = (__int16)v5;
      int v7 = v5 >> 5;
      if (v6 >= 0) {
        int v8 = v7;
      }
      else {
        int v8 = *((_DWORD *)a2 + 3);
      }
      unsigned int v9 = *(unsigned __int16 *)(v2 + 272);
      if ((v9 & 0x8000u) == 0) {
        unsigned int v10 = v9 >> 5;
      }
      else {
        unsigned int v10 = *(_DWORD *)(v2 + 276);
      }
      if ((v9 & 1) == 0 && v8 == v10)
      {
        this = icu::UnicodeString::doEquals(a2, (const icu::UnicodeString *)(v2 + 264), v8);
        if (this) {
          return this;
        }
        uint64_t v2 = v4[45];
      }
    }
    icu::UnicodeString::operator=((UChar **)(v2 + 264), (UChar **)a2);
    UErrorCode v11 = U_ZERO_ERROR;
    return (uint64_t)icu::DecimalFormat::touch(v4, &v11);
  }
  return this;
}

void *icu::DecimalFormat::setMultiplier(void *this, unsigned int a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    int v3 = 0;
    if (a2 <= 1) {
      int v4 = 1;
    }
    else {
      int v4 = a2;
    }
    int v5 = v4;
    while (v5 != 1)
    {
      ++v3;
      BOOL v6 = 10 * (v5 / 10) == v5;
      v5 /= 10;
      if (!v6)
      {
        int v3 = 0;
        goto LABEL_10;
      }
    }
    int v4 = 1;
LABEL_10:
    *(_DWORD *)(v2 + 92) = v3;
    *(_DWORD *)(v2 + 128) = v4;
    UErrorCode v7 = U_ZERO_ERROR;
    return icu::DecimalFormat::touch(this, &v7);
  }
  return this;
}

double icu::DecimalFormat::getRoundingIncrement(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    uint64_t v2 = (char *)(v1 + 4504);
  }
  else {
    uint64_t v2 = (char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 736;
  }
  return *(double *)v2;
}

void *icu::DecimalFormat::setRoundingIncrement(void *this, double a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(double *)(v2 + 744) != a2)
    {
      *(double *)(v2 + 744) = a2;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

uint64_t icu::DecimalFormat::getRoundingMode(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    uint64_t v2 = (unsigned int *)(v1 + 4516);
  }
  else {
    uint64_t v2 = (unsigned int *)((char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 748);
  }
  return *v2;
}

void *icu::DecimalFormat::setRoundingMode(void *this, uint64_t a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    int v3 = a2;
    int v4 = this;
    if (*(unsigned char *)(v2 + 752) || *(_DWORD *)(v2 + 756) != a2)
    {
      icu::NumberFormat::setMaximumIntegerDigits((icu::NumberFormat *)this, a2);
      uint64_t v5 = v4[45];
      *(_DWORD *)(v5 + 756) = v3;
      *(unsigned char *)(v5 + 752) = 0;
      UErrorCode v6 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(v4, &v6);
    }
  }
  return this;
}

uint64_t icu::DecimalFormat::getFormatWidth(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    uint64_t v2 = (unsigned int *)(v1 + 80);
  }
  else {
    uint64_t v2 = (unsigned int *)((char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 72);
  }
  return *v2;
}

void *icu::DecimalFormat::setFormatWidth(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(_DWORD *)(v2 + 80) != a2)
    {
      *(_DWORD *)(v2 + 80) = a2;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

icu::UnicodeString *icu::DecimalFormat::getPadCharacterString@<X0>(icu::DecimalFormat *this@<X0>, icu::UnicodeString *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 45);
  if (!v4 || (*(_WORD *)(v4 + 408) & 1) != 0)
  {
    UErrorCode v6 = " ";
    return (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a2, 1, &v6);
  }
  else
  {
    return icu::UnicodeString::UnicodeString(a2, (UChar **)(v4 + 400));
  }
}

uint64_t icu::DecimalFormat::setPadCharacter(uint64_t this, const icu::UnicodeString *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(this + 360);
  if (v2)
  {
    uint64_t v4 = (void *)this;
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    if (v5)
    {
      if (*(_WORD *)(v2 + 408)) {
        return this;
      }
    }
    else
    {
      if ((v5 & 0x8000u) == 0) {
        int v6 = v5 >> 5;
      }
      else {
        int v6 = *((_DWORD *)a2 + 3);
      }
      unsigned int v7 = *(unsigned __int16 *)(v2 + 408);
      if ((v7 & 0x8000u) == 0) {
        unsigned int v8 = v7 >> 5;
      }
      else {
        unsigned int v8 = *(_DWORD *)(v2 + 412);
      }
      if ((v7 & 1) == 0 && v6 == v8)
      {
        this = icu::UnicodeString::doEquals(a2, (const icu::UnicodeString *)(v2 + 400), v6);
        if (this) {
          return this;
        }
        unsigned int v5 = *((unsigned __int16 *)a2 + 4);
      }
    }
    int v9 = (__int16)v5;
    LODWORD(v10) = v5 >> 5;
    if (v9 >= 0) {
      unint64_t v10 = v10;
    }
    else {
      unint64_t v10 = *((unsigned int *)a2 + 3);
    }
    if ((int)v10 < 1)
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)(v4[45] + 400));
    }
    else
    {
      unsigned int v11 = icu::UnicodeString::char32At((uint64_t *)v10, a2, 0);
      icu::UnicodeString::UnicodeString((uint64_t)v13, v11);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v4[45] + 400), (icu::UnicodeString *)v13);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v13);
    }
    v13[0] = U_ZERO_ERROR;
    return (uint64_t)icu::DecimalFormat::touch(v4, v13);
  }
  return this;
}

uint64_t icu::DecimalFormat::getPadPosition(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1 && !*(unsigned char *)(v1 + 392)) {
    return *(unsigned int *)(v1 + 396);
  }
  else {
    return 0;
  }
}

void *icu::DecimalFormat::setPadPosition(void *result, int a2)
{
  uint64_t v2 = result[45];
  if (v2 && (*(unsigned char *)(v2 + 392) || *(_DWORD *)(v2 + 396) != a2))
  {
    *(_DWORD *)(v2 + 396) = a2;
    *(unsigned char *)(v2 + 392) = 0;
    UErrorCode v3 = U_ZERO_ERROR;
    return icu::DecimalFormat::touch(result, &v3);
  }
  return result;
}

BOOL icu::DecimalFormat::isScientificNotation(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    uint64_t v2 = (_DWORD *)(v1 + 108);
  }
  else {
    uint64_t v2 = (char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 100;
  }
  return *v2 != -1;
}

void *icu::DecimalFormat::setScientificNotation(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (a2) {
      int v3 = 1;
    }
    else {
      int v3 = -1;
    }
    if (*(_DWORD *)(v2 + 108) != v3)
    {
      *(_DWORD *)(v2 + 108) = v3;
      UErrorCode v4 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v4);
    }
  }
  return this;
}

uint64_t icu::DecimalFormat::getMinimumExponentDigits(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    uint64_t v2 = (char *)(v1 + 108);
  }
  else {
    uint64_t v2 = (char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 100;
  }
  return *v2;
}

void *icu::DecimalFormat::setMinimumExponentDigits(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(_DWORD *)(v2 + 108) != a2)
    {
      *(_DWORD *)(v2 + 108) = a2;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

uint64_t icu::DecimalFormat::isExponentSignAlwaysShown(icu::DecimalFormat *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    uint64_t v2 = (char *)(v1 + 74);
  }
  else {
    uint64_t v2 = (char *)icu::number::impl::DecimalFormatProperties::getDefault(this) + 66;
  }
  return *v2;
}

void *icu::DecimalFormat::setExponentSignAlwaysShown(void *this, unsigned __int8 a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 74) != a2)
    {
      *(unsigned char *)(v2 + 74) = a2 != 0;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

void *icu::DecimalFormat::setGroupingSize(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(_DWORD *)(v2 + 84) != a2)
    {
      *(_DWORD *)(v2 + 84) = a2;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

void *icu::DecimalFormat::setSecondaryGroupingSize(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(_DWORD *)(v2 + 760) != a2)
    {
      *(_DWORD *)(v2 + 760) = a2;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

void *icu::DecimalFormat::setDecimalSeparatorAlwaysShown(void *this, unsigned __int8 a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 73) != a2)
    {
      *(unsigned char *)(v2 + 73) = a2 != 0;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

void *icu::DecimalFormat::setDecimalPatternMatchRequired(void *this, unsigned __int8 a2)
{
  uint64_t v2 = this[45];
  if (v2)
  {
    if (*(unsigned __int8 *)(v2 + 72) != a2)
    {
      *(unsigned char *)(v2 + 72) = a2 != 0;
      UErrorCode v3 = U_ZERO_ERROR;
      return icu::DecimalFormat::touch(this, &v3);
    }
  }
  return this;
}

icu::UnicodeString *icu::DecimalFormat::toPattern(icu::DecimalFormat *this, icu::UnicodeString *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 45);
  if (v3)
  {
    uint64_t v20 = &unk_1EDA43700;
    uint64_t v21 = 0;
    bzero(v24, 0x2F0uLL);
    uint64_t v6 = *(void *)(v3 + 8);
    uint64_t v5 = v3 + 8;
    uint64_t v23 = v6;
    v24[0] = *(unsigned char *)(v5 + 8);
    icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)&v25, (const UChar *)(v5 + 16));
    sub_18C91410C(&v26, (uint64_t **)(v5 + 48));
    long long v7 = *(_OWORD *)(v5 + 72);
    long long v8 = *(_OWORD *)(v5 + 88);
    long long v9 = *(_OWORD *)(v5 + 104);
    uint64_t v31 = *(void *)(v5 + 120);
    long long v27 = *(_OWORD *)(v5 + 56);
    long long v30 = v9;
    long long v29 = v8;
    long long v28 = v7;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v32, (UChar **)(v5 + 128));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v33, (UChar **)(v5 + 192));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v34, (UChar **)(v5 + 256));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v35, (UChar **)(v5 + 320));
    v35[8] = *(void *)(v5 + 384);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v36, (UChar **)(v5 + 392));
    int v10 = *(_DWORD *)(v5 + 472);
    _OWORD v36[4] = *(_OWORD *)(v5 + 456);
    int v37 = v10;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v38, (UChar **)(v5 + 480));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v39, (UChar **)(v5 + 544));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v40, (UChar **)(v5 + 608));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v41, (UChar **)(v5 + 672));
    long long v12 = *(_OWORD *)(v5 + 736);
    *(void *)&v42[14] = *(void *)(v5 + 750);
    *(_OWORD *)uint64_t v42 = v12;
    if (!v24[0]
      || v26
      || !(_BYTE)v27
      || BYTE11(v27)
      || (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)v39, (const icu::UnicodeString *)&v21, v11) & 1) != 0|| (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)v41, (const icu::UnicodeString *)&v21, v13) & 1) != 0|| (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)v33, (const icu::UnicodeString *)&v21, v14) & 1) != 0|| icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)v35, (const icu::UnicodeString *)&v21, v15))
    {
      uint64_t v16 = *((void *)this + 45);
      int v17 = *(_DWORD *)(v16 + 3856);
      LODWORD(v30) = *(_DWORD *)(v16 + 3872);
      LODWORD(v29) = v17;
      *(void *)uint64_t v42 = *(void *)(v16 + 4504);
    }
    icu::number::impl::PatternStringUtils::propertiesToPatternString((icu::number::impl::PatternStringUtils *)&v23, (const icu::number::impl::DecimalFormatProperties *)&v21, (uint64_t)v22);
    icu::UnicodeString::operator=(a2, (icu::UnicodeString *)v22);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v22);
    sub_18C914194(&v23);
    icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v20);
  }
  else
  {
    icu::UnicodeString::setToBogus(a2);
  }
  return a2;
}

UChar **icu::DecimalFormat::toLocalizedPattern(icu::DecimalFormat *this, UChar **a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 45))
  {
    long long v8 = &unk_1EDA43700;
    uint64_t v9 = 0;
    UErrorCode v4 = (UChar **)(*(uint64_t (**)(icu::DecimalFormat *, UChar **))(*(void *)this + 552))(this, a2);
    icu::UnicodeString::operator=(a2, v4);
    uint64_t v5 = (UChar **)(*(uint64_t (**)(icu::DecimalFormat *))(*(void *)this + 320))(this);
    icu::number::impl::PatternStringUtils::convertLocalized((icu::number::impl::PatternStringUtils *)a2, v5, (const icu::DecimalFormatSymbols *)1, &v9, (uint64_t)v10);
    icu::UnicodeString::operator=((icu::UnicodeString *)a2, (icu::UnicodeString *)v10);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v10);
    icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v8);
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a2);
  }
  return a2;
}

uint64_t icu::DecimalFormat::applyPattern(icu::DecimalFormat *this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4)
{
  return (*(uint64_t (**)(icu::DecimalFormat *, const icu::UnicodeString *, UErrorCode *))(*(void *)this + 576))(this, a2, a4);
}

void *icu::DecimalFormat::applyPattern(void *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    UErrorCode v4 = this;
    uint64_t v5 = this[45];
    if (v5)
    {
      icu::number::impl::PatternParser::parseToExistingProperties(a2, v5 + 8);
      return icu::DecimalFormat::touch(v4, a3);
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

uint64_t icu::DecimalFormat::applyLocalizedPattern(icu::DecimalFormat *this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4)
{
  return (*(uint64_t (**)(icu::DecimalFormat *, const icu::UnicodeString *, UErrorCode *))(*(void *)this + 592))(this, a2, a4);
}

void *icu::DecimalFormat::applyLocalizedPattern(void *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    UErrorCode v4 = this;
    if (this[45])
    {
      memset(v8, 0, sizeof(v8));
      uint64_t v6 = (UChar **)(*(uint64_t (**)(void *))(*this + 320))(this);
      icu::number::impl::PatternStringUtils::convertLocalized(a2, v6, 0, a3, (uint64_t)v8);
      (*(void (**)(void *, _OWORD *, UErrorCode *))(*v4 + 576))(v4, v8, a3);
      return icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v8);
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

void *icu::DecimalFormat::setMaximumIntegerDigits(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2 && *(_DWORD *)(v2 + 100) != a2)
  {
    int v3 = *(_DWORD *)(v2 + 120);
    if ((v3 & 0x80000000) == 0 && v3 > a2) {
      *(_DWORD *)(v2 + 120) = a2;
    }
    *(_DWORD *)(v2 + 100) = a2;
    UErrorCode v4 = U_ZERO_ERROR;
    return icu::DecimalFormat::touch(this, &v4);
  }
  return this;
}

void *icu::DecimalFormat::setMinimumIntegerDigits(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2 && *(_DWORD *)(v2 + 120) != a2)
  {
    int v3 = *(_DWORD *)(v2 + 100);
    if ((v3 & 0x80000000) == 0 && v3 < a2) {
      *(_DWORD *)(v2 + 100) = a2;
    }
    *(_DWORD *)(v2 + 120) = a2;
    UErrorCode v4 = U_ZERO_ERROR;
    return icu::DecimalFormat::touch(this, &v4);
  }
  return this;
}

void *icu::DecimalFormat::setMaximumFractionDigits(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2 && *(_DWORD *)(v2 + 96) != a2)
  {
    if (a2 >= 340) {
      int v3 = 340;
    }
    else {
      int v3 = a2;
    }
    int v4 = *(_DWORD *)(v2 + 112);
    if ((v4 & 0x80000000) == 0 && v4 > v3) {
      *(_DWORD *)(v2 + 112) = v3;
    }
    *(_DWORD *)(v2 + 96) = v3;
    UErrorCode v5 = U_ZERO_ERROR;
    return icu::DecimalFormat::touch(this, &v5);
  }
  return this;
}

void *icu::DecimalFormat::setMinimumFractionDigits(void *this, int a2)
{
  uint64_t v2 = this[45];
  if (v2 && *(_DWORD *)(v2 + 112) != a2)
  {
    int v3 = *(_DWORD *)(v2 + 96);
    if ((v3 & 0x80000000) == 0 && v3 < a2) {
      *(_DWORD *)(v2 + 96) = a2;
    }
    *(_DWORD *)(v2 + 112) = a2;
    UErrorCode v4 = U_ZERO_ERROR;
    return icu::DecimalFormat::touch(this, &v4);
  }
  return this;
}

void *icu::DecimalFormat::setDateSettings(void *this)
{
  uint64_t v1 = this[45];
  if (v1)
  {
    uint64_t v2 = this;
    int v3 = *(unsigned __int8 *)(v1 + 88);
    if (*(unsigned char *)(v1 + 88))
    {
      this = (void *)icu::NumberFormat::setGroupingUsed((uint64_t)this, 0);
      uint64_t v1 = v2[45];
      *(unsigned char *)(v1 + 88) = 0;
      int v3 = 1;
    }
    if (*(unsigned char *)(v1 + 73))
    {
      *(unsigned char *)(v1 + 73) = 0;
      int v3 = 1;
    }
    if (*(unsigned char *)(v1 + 465))
    {
      int v5 = *(_DWORD *)(v1 + 112);
      uint64_t v4 = v1 + 112;
      if (!v5)
      {
        if (!v3) {
          return this;
        }
LABEL_12:
        UErrorCode v8 = U_ZERO_ERROR;
        return icu::DecimalFormat::touch(v2, &v8);
      }
    }
    else
    {
      icu::NumberFormat::setParseIntegerOnly((uint64_t)v2, 1);
      uint64_t v6 = v2[45];
      int v7 = *(_DWORD *)(v6 + 112);
      uint64_t v4 = v6 + 112;
      *(unsigned char *)(v4 + 353) = 1;
      if (!v7) {
        goto LABEL_12;
      }
    }
    *(_DWORD *)uint64_t v4 = 0;
    goto LABEL_12;
  }
  return this;
}

void icu::DecimalFormat::setCurrency(UChar *a1, const UChar *a2, int *a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if (*a3 <= 0)
  {
    if (*((void *)a1 + 45))
    {
      int v5 = a2;
      v20[0] = 0;
      if (!a2 || !*a2)
      {
        v15[0] = 0;
        uint64_t v6 = (*(uint64_t (**)(UChar *))(*(void *)a1 + 320))(a1);
        icu::Locale::Locale((icu::Locale *)&v17, v6 + 1936);
        int v7 = ucurr_forLocale(v19, (UChar *)v20, 4, v15);
        icu::Locale::~Locale((icu::Locale *)&v17);
        if (v15[0] <= 0 && v7 == 3)
        {
          HIWORD(v20[0]) = 0;
          int v5 = (const UChar *)v20;
        }
      }
      long long v17 = 0u;
      long long v18 = 0u;
      uint64_t v16 = v5;
      icu::CurrencyUnit::CurrencyUnit(&v17, &v16, a3);
      if (*a3 <= 0)
      {
        uint64_t v8 = *((void *)a1 + 45);
        if (*(unsigned char *)(v8 + 16)
          || (icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v15, (const UChar *)(v8 + 24)),
              char v9 = icu::MeasureUnit::operator==((uint64_t)v15, (uint64_t)&v17),
              icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v15),
              (v9 & 1) == 0))
        {
          icu::NumberFormat::setCurrency(a1, v5, a3);
          uint64_t v10 = *((void *)a1 + 45);
          icu::CurrencyUnit::operator=(v10 + 24, (unint64_t)&v17);
          *(unsigned char *)(v10 + 16) = 0;
          unint64_t v13 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v12, (icu::UMemory *)0xB48, v11);
          if (v13)
          {
            uint64_t v14 = (const icu::DecimalFormatSymbols *)(*(uint64_t (**)(UChar *))(*(void *)a1 + 320))(a1);
            icu::DecimalFormatSymbols::DecimalFormatSymbols(v13, v14);
          }
          else if (*a3 <= 0)
          {
            *a3 = 7;
          }
          icu::DecimalFormatSymbols::setCurrency((char **)v13, (const UChar *)&v18 + 2, a3);
          sub_18C7F5A70(*((void *)a1 + 45) + 768, (uint64_t)v13, a3);
          icu::DecimalFormat::touch(a1, (UErrorCode *)a3);
        }
      }
      icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v17);
    }
    else
    {
      *a3 = 7;
    }
  }
}

void icu::DecimalFormat::setCurrency(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = &unk_1EDA43700;
  uint64_t v3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 248))(a1, a2, &v3);
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v2);
}

void icu::DecimalFormat::formatToDecimalQuantity(icu::DecimalFormat *this, double a2, icu::number::impl::DecimalQuantity *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    uint64_t v5 = *((void *)this + 45);
    if (v5)
    {
      icu::number::LocalizedNumberFormatter::formatDouble((uint64_t *)(v5 + 776), a2, a4, (uint64_t)v7);
      icu::number::FormattedNumber::getDecimalQuantity((icu::number::impl::DecimalQuantity *)v7, a3, a4);
      icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v7);
    }
    else
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
}

void icu::DecimalFormat::formatToDecimalQuantity(icu::DecimalFormat *this, const icu::Formattable *a2, icu::number::impl::DecimalQuantity *a3, UErrorCode *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    if (*((void *)this + 45))
    {
      uint64_t v10 = 0;
      memset(v9, 0, sizeof(v9));
      memset(v8, 0, sizeof(v8));
      sub_18C9140A8((uint64_t)v8);
      icu::Formattable::populateDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)v9, a4);
      icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(*((void *)this + 45) + 776), (icu::number::impl::UFormattedNumberData *)v8, a4);
      icu::number::impl::DecimalQuantity::operator=(a3, (uint64_t)v9);
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v8);
    }
    else
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
}

uint64_t icu::DecimalFormat::toNumberFormatter(icu::DecimalFormat *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 45);
  if (v3) {
    return v3 + 776;
  }
  uint64_t result = 0;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

uint64_t icu::DecimalFormat::setupFastFormat(icu::DecimalFormat *this)
{
  uint64_t result = icu::number::impl::DecimalFormatProperties::equalsDefaultExceptFastFormat((icu::number::impl::DecimalFormatProperties *)(*((void *)this + 45) + 8));
  uint64_t v3 = *((void *)this + 45);
  if ((result & 1) == 0) {
    goto LABEL_28;
  }
  __int16 v4 = *(_WORD *)(v3 + 208);
  if (v4)
  {
    BOOL v5 = 1;
  }
  else
  {
    if ((*(_WORD *)(v3 + 208) & 0x8000) != 0)
    {
      if (*(_DWORD *)(v3 + 212) != 1)
      {
LABEL_28:
        *(unsigned char *)(v3 + 4528) = 0;
        return result;
      }
    }
    else if ((v4 & 0xFFE0) != 0x20)
    {
      goto LABEL_28;
    }
    if ((v4 & 2) != 0) {
      uint64_t v6 = (unsigned __int16 *)(v3 + 210);
    }
    else {
      uint64_t v6 = *(unsigned __int16 **)(v3 + 224);
    }
    BOOL v5 = *v6 == 45;
  }
  BOOL v8 = *(unsigned __int16 *)(v3 + 560) > 0x1Fu || *(unsigned __int16 *)(v3 + 688) > 0x1Fu || !v5;
  if (v8 || *(unsigned __int16 *)(v3 + 336) >= 0x20u) {
    goto LABEL_28;
  }
  uint64_t result = (*(uint64_t (**)(icu::DecimalFormat *))(*(void *)this + 320))(this);
  uint64_t v9 = *((void *)this + 45);
  uint64_t v10 = (unsigned char *)(v9 + 4528);
  int v11 = *(unsigned __int8 *)(v9 + 88);
  int v12 = *(_DWORD *)(v9 + 84);
  if ((!*(unsigned char *)(v9 + 88)
     || (v12 >= 1 ? (BOOL v13 = v12 == 3) : (BOOL v13 = 1),
         v13
      && (*(__int16 *)(result + 80) < 0
        ? (int v14 = *(_DWORD *)(result + 84))
        : (int v14 = *(unsigned __int16 *)(result + 80) >> 5),
          v14 == 1)))
    && (int v15 = *(_DWORD *)(v9 + 3880), v15 < 11)
    && *(int *)(v9 + 3872) < 1
    && (*(__int16 *)(result + 400) < 0
      ? (int v16 = *(_DWORD *)(result + 404))
      : (int v16 = *(unsigned __int16 *)(result + 400) >> 5),
        v16 == 1 && (unsigned int v17 = *(_DWORD *)(result + 1928), v17 < 0x10000)))
  {
    __int16 v18 = 0;
    unsigned int v19 = *(_DWORD *)(v9 + 3860);
    *uint64_t v10 = 1;
    *(_WORD *)(v9 + 4530) = v17;
    if (v11 && v12 == 3)
    {
      unsigned int v20 = *(unsigned __int16 *)(result + 80);
      if (*(__int16 *)(result + 80) < 0) {
        unsigned int v21 = *(_DWORD *)(result + 84);
      }
      else {
        unsigned int v21 = v20 >> 5;
      }
      if (v21)
      {
        if ((v20 & 2) != 0) {
          uint64_t v22 = (__int16 *)(result + 82);
        }
        else {
          uint64_t v22 = *(__int16 **)(result + 96);
        }
        __int16 v18 = *v22;
      }
      else
      {
        __int16 v18 = -1;
      }
    }
    *(_WORD *)(v9 + 4532) = v18;
    unsigned int v23 = *(unsigned __int16 *)(result + 400);
    if (*(__int16 *)(result + 400) < 0) {
      unsigned int v24 = *(_DWORD *)(result + 404);
    }
    else {
      unsigned int v24 = v23 >> 5;
    }
    if (v24)
    {
      if ((v23 & 2) != 0) {
        uint64_t v25 = (__int16 *)(result + 402);
      }
      else {
        uint64_t v25 = *(__int16 **)(result + 416);
      }
      __int16 v26 = *v25;
    }
    else
    {
      __int16 v26 = -1;
    }
    *(_WORD *)(v9 + 4534) = v26;
    *(unsigned char *)(v9 + 4536) = v15 & ~(v15 >> 31);
    if (v19 >= 0x7F) {
      char v27 = 127;
    }
    else {
      char v27 = v19;
    }
    v10[9] = v27;
  }
  else
  {
    *uint64_t v10 = 0;
  }
  return result;
}

uint64_t icu::DecimalFormat::doFastFormatInt32(icu::DecimalFormat *this, uint64_t __x, int a3, icu::UnicodeString *a4)
{
  *(void *)&_OWORD v18[6] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    LOWORD(v16[0]) = *(_WORD *)(*((void *)this + 45) + 4534);
    icu::UnicodeString::doAppend((uint64_t)a4, (uint64_t)v16, 0, 1);
    long double __x = -(int)__x;
  }
  memset(v16, 0, sizeof(v16));
  __int16 v17 = 0;
  int v7 = v18;
  uint64_t v8 = *((void *)this + 45);
  int v9 = *(char *)(v8 + 4536);
  if (v9 <= 1) {
    LOBYTE(v9) = 1;
  }
  int v10 = *(char *)(v8 + 4537);
  if (v10 >= 1)
  {
    LOBYTE(v11) = 0;
    char v12 = 0;
    unsigned int v13 = v9;
    do
    {
      if (v13 <= v11 && __x == 0) {
        break;
      }
      if (v12 == 3)
      {
        if (*(_WORD *)(v8 + 4532))
        {
          *((_WORD *)v7 - 1) = *(_WORD *)(v8 + 4532);
          v7 -= 2;
          char v12 = 1;
        }
        else
        {
          char v12 = 4;
        }
      }
      else
      {
        ++v12;
      }
      long double __x = div(__x, 10).quot;
      *((_WORD *)v7 - 1) = *(_WORD *)(v8 + 4530) + WORD2(__x);
      v7 -= 2;
      int v11 = (char)(v11 + 1);
    }
    while (v11 < v10);
  }
  return icu::UnicodeString::doAppend((uint64_t)a4, (uint64_t)v7, 0, 13 - ((unint64_t)(v7 - (unsigned char *)v16) >> 1));
}

uint64_t sub_18C913A08(uint64_t a1)
{
  *(void *)(a1 + 768) = 0;
  sub_18C913B28(a1 + 776);
  *(void *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(void *)(a1 + 1296) = &unk_1EDA4F2F0;
  *(void *)(a1 + 1304) = &unk_1EDA47700;
  *(_WORD *)(a1 + 1312) = 2;
  *(void *)(a1 + 1368) = &unk_1EDA47700;
  *(_WORD *)(a1 + 1376) = 2;
  *(void *)(a1 + 1432) = &unk_1EDA47700;
  *(_WORD *)(a1 + 1440) = 2;
  *(void *)(a1 + 1496) = &unk_1EDA47700;
  *(_WORD *)(a1 + 1504) = 2;
  *(unsigned char *)(a1 + 1562) = 1;
  sub_18C913BF0((void *)(a1 + 1568));
  *(void *)(a1 + 3760) = 0;
  icu::number::impl::DecimalFormatProperties::DecimalFormatProperties((icu::number::impl::DecimalFormatProperties *)(a1 + 3768));
  *(unsigned char *)(a1 + 4528) = 0;
  return a1;
}

uint64_t sub_18C913B28(uint64_t a1)
{
  *(_DWORD *)(a1 + 4) = 2;
  *(void *)(a1 + 8) = 0;
  icu::MeasureUnit::MeasureUnit(a1 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 4;
  *(_WORD *)(a1 + 100) = -3;
  *(_DWORD *)(a1 + 112) = -2;
  *(unsigned char *)(a1 + 132) = 0;
  *(_WORD *)(a1 + 124) = -1;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0x900000007;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 164) = 2;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_WORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 216) = 0;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 220) = 0;
  *(void *)(a1 + 236) = 0x300000000;
  *(_WORD *)(a1 + 244) = 0;
  icu::Locale::Locale((icu::Locale *)(a1 + 248));
  return a1;
}

void *sub_18C913BF0(void *result)
{
  uint64_t v1 = 0;
  *uint64_t result = &unk_1EDA4F398;
  uint64_t v2 = result + 273;
  do
  {
    uint64_t v3 = &result[v1 + 1];
    *uint64_t v3 = &unk_1EDA4F2F0;
    v3[1] = &unk_1EDA47700;
    *((_WORD *)v3 + 8) = 2;
    v3[9] = &unk_1EDA47700;
    *((_WORD *)v3 + 40) = 2;
    v3[17] = &unk_1EDA47700;
    *((_WORD *)v3 + 72) = 2;
    v3[25] = &unk_1EDA47700;
    *((_WORD *)v3 + 104) = 2;
    *((unsigned char *)v3 + 266) = 1;
    v1 += 34;
  }
  while (v3 + 34 != (void *)v2);
  unsigned char *v2 = 1;
  return result;
}

void sub_18C913CF8(void *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = (icu::number::impl::AffixPatternProvider *)(a1 + 34);
  a1[34] = &unk_1EDA4F398;
  do
  {
    a1[v2 + 273] = &unk_1EDA4F2F0;
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&a1[v2 + 298]);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&a1[v2 + 290]);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&a1[v2 + 282]);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&a1[v2 + 274]);
    icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)&a1[v2 + 273]);
    v2 -= 34;
  }
  while (v2 != -272);
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider(v3);
  *a1 = &unk_1EDA4F2F0;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 25));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 17));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 9));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));

  icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)a1);
}

uint64_t sub_18C913E08(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)a2;
  uint64_t v4 = a1 + 8;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 8);
  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)(a1 + 24), (const UChar *)(a2 + 16));
  sub_18C91410C((uint64_t **)(a1 + 56), (uint64_t **)(a2 + 48));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 88);
  long long v7 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 128) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 136), (UChar **)(a2 + 128));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 200), (UChar **)(a2 + 192));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 264), (UChar **)(a2 + 256));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 328), (UChar **)(a2 + 320));
  *(void *)(a1 + 392) = *(void *)(a2 + 384);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 400), (UChar **)(a2 + 392));
  long long v8 = *(_OWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 480) = *(_DWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 464) = v8;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 488), (UChar **)(a2 + 480));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 552), (UChar **)(a2 + 544));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 616), (UChar **)(a2 + 608));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 680), (UChar **)(a2 + 672));
  long long v9 = *(_OWORD *)(a2 + 736);
  *(void *)(v4 + 750) = *(void *)(a2 + 750);
  *(_OWORD *)(v4 + 736) = v9;
  *(void *)(a1 + 768) = 0;
  sub_18C913B28(a1 + 776);
  *(void *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(void *)(a1 + 1296) = &unk_1EDA4F2F0;
  *(void *)(a1 + 1304) = &unk_1EDA47700;
  *(_WORD *)(a1 + 1312) = 2;
  *(void *)(a1 + 1368) = &unk_1EDA47700;
  *(_WORD *)(a1 + 1376) = 2;
  *(void *)(a1 + 1432) = &unk_1EDA47700;
  *(_WORD *)(a1 + 1440) = 2;
  *(void *)(a1 + 1496) = &unk_1EDA47700;
  *(_WORD *)(a1 + 1504) = 2;
  *(unsigned char *)(a1 + 1562) = 1;
  sub_18C913BF0((void *)(a1 + 1568));
  *(void *)(a1 + 3760) = 0;
  icu::number::impl::DecimalFormatProperties::DecimalFormatProperties((icu::number::impl::DecimalFormatProperties *)(a1 + 3768));
  *(unsigned char *)(a1 + 4528) = 0;
  return a1;
}

uint64_t **sub_18C91401C(uint64_t **a1, uint64_t **a2)
{
  if (a1 != a2 && *a2)
  {
    uint64_t v4 = icu::UMemory::operator new(*a2, (icu::UMemory *)0x28, (unint64_t)a2);
    long long v5 = v4;
    if (v4) {
      icu::CurrencyPluralInfo::CurrencyPluralInfo((uint64_t)v4, (uint64_t)*a2);
    }
    if (*a1) {
      (*(void (**)(uint64_t *))(**a1 + 8))(*a1);
    }
    *a1 = v5;
  }
  return a1;
}

uint64_t sub_18C9140A8(uint64_t a1)
{
  uint64_t v2 = (void *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl(a1, 0);
  void *v2 = &unk_1EDA4F800;
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)(v2 + 38));
  icu::MeasureUnit::MeasureUnit(a1 + 376);
  *(void *)(a1 + 400) = "";
  return a1;
}

uint64_t **sub_18C91410C(uint64_t **a1, uint64_t **a2)
{
  *a1 = 0;
  if (*a2)
  {
    uint64_t v4 = icu::UMemory::operator new(*a2, (icu::UMemory *)0x28, (unint64_t)a2);
    long long v5 = v4;
    if (v4) {
      icu::CurrencyPluralInfo::CurrencyPluralInfo((uint64_t)v4, (uint64_t)*a2);
    }
    if (*a1) {
      (*(void (**)(uint64_t *))(**a1 + 8))(*a1);
    }
    *a1 = v5;
  }
  return a1;
}

void *sub_18C914194(void *a1)
{
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 84));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 76));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 68));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 60));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 49));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 40));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 32));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 24));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 16));
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)(a1 + 2));
  return a1;
}

void icu::DisplayOptions::builder(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t icu::DisplayOptions::Builder::Builder(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

double icu::DisplayOptions::copyToBuilder@<D0>(icu::DisplayOptions *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)this;
  double result = *((double *)this + 2);
  *(double *)(a2 + 16) = result;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)this + 6);
  return result;
}

double icu::DisplayOptions::Builder::Builder(icu::DisplayOptions::Builder *this, const icu::DisplayOptions *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  double result = *((double *)a2 + 2);
  *((double *)this + 2) = result;
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return result;
}

{
  double result;

  *(_OWORD *)this = *(_OWORD *)a2;
  double result = *((double *)a2 + 2);
  *((double *)this + 2) = result;
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return result;
}

double icu::DisplayOptions::DisplayOptions(icu::DisplayOptions *this, const icu::DisplayOptions::Builder *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  double result = *((double *)a2 + 2);
  *((double *)this + 2) = result;
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return result;
}

{
  double result;

  *(_OWORD *)this = *(_OWORD *)a2;
  double result = *((double *)a2 + 2);
  *((double *)this + 2) = result;
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return result;
}

const char *udispopt_getGrammaticalCaseIdentifier(unsigned int a1)
{
  if (a1 > 0xE) {
    return "undefined";
  }
  else {
    return off_1E550B888[a1];
  }
}

uint64_t udispopt_fromGrammaticalCaseIdentifier(char *__s1)
{
  uint64_t v2 = 0;
  while (strcmp(__s1, off_1E550B888[v2]))
  {
    if (++v2 == 15) {
      return 0;
    }
  }
  return v2;
}

const char *udispopt_getPluralCategoryIdentifier(unsigned int a1)
{
  if (a1 > 6) {
    return "undefined";
  }
  else {
    return off_1E550B900[a1];
  }
}

uint64_t udispopt_fromPluralCategoryIdentifier(char *__s1)
{
  uint64_t v2 = 0;
  while (strcmp(__s1, off_1E550B900[v2]))
  {
    if (++v2 == 7) {
      return 0;
    }
  }
  return v2;
}

const char *udispopt_getNounClassIdentifier(unsigned int a1)
{
  if (a1 > 8) {
    return "undefined";
  }
  else {
    return off_1E550B938[a1];
  }
}

uint64_t udispopt_fromNounClassIdentifier(char *__s1)
{
  uint64_t v2 = 0;
  while (strcmp(__s1, off_1E550B938[v2]))
  {
    if (++v2 == 9) {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_18C914464(uint64_t result, int a2, unsigned char *a3, uint64_t a4, int *a5, int *a6, double a7)
{
  unsigned int v12 = result;
  float v13 = a7;
  int v14 = ((*(void *)&a7 >> 52) & 0x7FF) - 1075;
  uint64_t v15 = *(void *)&a7 & 0xFFFFFFFFFFFFFLL;
  if ((*(void *)&a7 & 0x7FF0000000000000) != 0) {
    uint64_t v15 = *(void *)&a7 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  else {
    int v14 = -1074;
  }
  BOOL v16 = (*(void *)&a7 & 0x7FE0000000000000) != 0 && (*(void *)&a7 & 0xFFFFFFFFFFFFFLL) == 0;
  int v17 = (LODWORD(v13) >> 23) - 150;
  LODWORD(v18) = LODWORD(v13) & 0x7FFFFF;
  if ((LODWORD(v13) & 0x7F800000) != 0) {
    unint64_t v18 = LODWORD(v13) & 0x7FFFFF | 0x800000u;
  }
  else {
    unint64_t v18 = v18;
  }
  if ((LODWORD(v13) & 0x7F800000) == 0) {
    int v17 = -149;
  }
  BOOL v19 = (LODWORD(v13) & 0x7F000000) != 0 && (LODWORD(v13) & 0x7FFFFF) == 0;
  if (result == 1) {
    BOOL v20 = v19;
  }
  else {
    BOOL v20 = v16;
  }
  if (result == 1) {
    int v21 = v17;
  }
  else {
    int v21 = v14;
  }
  if (result == 1) {
    unint64_t v22 = v18;
  }
  else {
    unint64_t v22 = v15;
  }
  int v23 = v21 - __clz(v22 & 0xFFFFFFFFFFFFFLL) + 11;
  if ((v22 & 0x10000000000000) != 0) {
    int v23 = v21;
  }
  int v24 = vcvtpd_s64_f64((double)(v23 + 52) * 0.301029996 + -1.0e-10);
  if (result == 2 && ~v24 > a2)
  {
    *a3 = 0;
    *a5 = 0;
    *a6 = -a2;
    return result;
  }
  bzero(v47, 0x204uLL);
  bzero(v46, 0x204uLL);
  bzero(v45, 0x204uLL);
  bzero(v44, 0x204uLL);
  if (v21 < 0)
  {
    if (v24 < 0)
    {
      uint64_t v43 = a4;
      sub_18C915470((__int16 *)v47, 0xAu, -v24);
      if (v12 > 1)
      {
        sub_18C915250(v47, v22);
        sub_18C914AFC(v46, 1);
        int v25 = -v21;
      }
      else
      {
        sub_18C914B44(v44, (__int16 *)v47);
        sub_18C914B44(v45, (__int16 *)v47);
        sub_18C915250(v47, v22);
        int v25 = 1;
        sub_18C914AFC(v46, 1);
        sub_18C9150E0(v46, -v21);
        sub_18C9150E0(v47, 1);
      }
      sub_18C9150E0(v46, v25);
      a4 = v43;
    }
    else
    {
      sub_18C914B14(v47, v22);
      sub_18C915470(v46, 0xAu, v24);
      sub_18C9150E0(v46, -v21);
      if (v12 > 1) {
        goto LABEL_43;
      }
      sub_18C9150E0(v46, 1);
      sub_18C9150E0(v47, 1);
      sub_18C914AFC(v44, 1);
      sub_18C914AFC(v45, 1);
    }
  }
  else
  {
    sub_18C914B14(v47, v22);
    sub_18C9150E0(v47, v21);
    sub_18C915470(v46, 0xAu, v24);
    if (v12 > 1) {
      goto LABEL_43;
    }
    sub_18C9150E0(v46, 1);
    sub_18C9150E0(v47, 1);
    sub_18C914AFC(v44, 1);
    sub_18C9150E0(v44, v21);
    sub_18C914AFC(v45, 1);
    sub_18C9150E0(v45, v21);
  }
  char v26 = !v20;
  if (v12 > 1) {
    char v26 = 1;
  }
  if ((v26 & 1) == 0)
  {
    sub_18C9150E0(v46, 1);
    sub_18C9150E0(v47, 1);
    sub_18C9150E0(v44, 1);
  }
LABEL_43:
  double result = sub_18C915980((__int16 *)v47, v44, v46);
  if ((v22 & 1) == 0)
  {
    if ((result & 0x80000000) != 0) {
      goto LABEL_45;
    }
LABEL_48:
    *a6 = v24 + 1;
    goto LABEL_49;
  }
  if ((int)result >= 1) {
    goto LABEL_48;
  }
LABEL_45:
  *a6 = v24;
  sub_18C9151B4((__int16 *)v47, 0xAu);
  int v27 = sub_18C9158D8((uint64_t)v45, v44);
  sub_18C9151B4(v45, 0xAu);
  if (v27) {
    double result = (uint64_t)sub_18C9151B4(v44, 0xAu);
  }
  else {
    double result = (uint64_t)sub_18C914B44(v44, v45);
  }
LABEL_49:
  if (v12 < 2)
  {
    long long v29 = v45;
    int v30 = sub_18C9158D8((uint64_t)v45, v44);
    if (v30) {
      long long v29 = v44;
    }
    int v31 = (v22 & 1) == 0;
    *a5 = 0;
    if (v22) {
      int v32 = 0;
    }
    else {
      int v32 = -1;
    }
    while (1)
    {
      char v33 = sub_18C91560C(v47, v46);
      uint64_t v34 = *a5;
      *a5 = v34 + 1;
      a3[v34] = v33 + 48;
      int v35 = sub_18C9158D8((uint64_t)v47, v45);
      double result = sub_18C915980((__int16 *)v47, v29, v46);
      if (v35 < v31 || (int)result > v32) {
        break;
      }
      sub_18C9151B4((__int16 *)v47, 0xAu);
      sub_18C9151B4(v45, 0xAu);
      if (v30) {
        sub_18C9151B4(v44, 0xAu);
      }
    }
    if (v35 >= v31 || (int)result <= v32)
    {
      if (v35 < v31) {
        goto LABEL_80;
      }
      uint64_t v41 = &a3[*a5];
      char v42 = *(v41 - 1);
      int v37 = v41 - 1;
      char v38 = v42;
    }
    else
    {
      double result = sub_18C915980((__int16 *)v47, (__int16 *)v47, v46);
      if ((result & 0x80000000) != 0) {
        goto LABEL_80;
      }
      int v36 = &a3[*a5];
      char v39 = *(v36 - 1);
      int v37 = v36 - 1;
      char v38 = v39;
      if (!result && (v38 & 1) == 0) {
        goto LABEL_80;
      }
    }
    *int v37 = v38 + 1;
    goto LABEL_80;
  }
  if (v12 != 2)
  {
    if (v12 != 3) {
      abort();
    }
    int v28 = a2;
    goto LABEL_79;
  }
  int v40 = -*a6;
  if (v40 <= a2)
  {
    if (v40 != a2)
    {
      int v28 = *a6 + a2;
LABEL_79:
      double result = sub_18C9149A8(v28, a6, v47, v46, a3, a4, a5);
      goto LABEL_80;
    }
    sub_18C9151B4(v46, 0xAu);
    double result = sub_18C915980((__int16 *)v47, (__int16 *)v47, v46);
    if ((result & 0x80000000) == 0)
    {
      *a3 = 49;
      *a5 = 1;
      ++*a6;
      goto LABEL_80;
    }
  }
  else
  {
    *a6 = -a2;
  }
  *a5 = 0;
LABEL_80:
  a3[*a5] = 0;
  return result;
}

uint64_t sub_18C9149A8(int a1, _DWORD *a2, unsigned __int16 *a3, __int16 *a4, unsigned char *a5, uint64_t a6, int *a7)
{
  uint64_t v13 = (a1 - 1);
  uint64_t v14 = (a1 - 2);
  if (a1 < 2)
  {
    char v23 = sub_18C91560C(a3, a4);
    uint64_t result = sub_18C915980((__int16 *)a3, (__int16 *)a3, a4);
    a5[(int)v13] = v23 + ((int)result >= 0) + 48;
  }
  else
  {
    uint64_t v15 = (a1 - 1);
    BOOL v16 = a5;
    do
    {
      *v16++ = sub_18C91560C(a3, a4) + 48;
      sub_18C9151B4((__int16 *)a3, 0xAu);
      --v15;
    }
    while (v15);
    uint64_t v17 = sub_18C91560C(a3, a4);
    uint64_t result = sub_18C915980((__int16 *)a3, (__int16 *)a3, a4);
    a5[(int)v13] = v17 + ((int)result >= 0) + 48;
    BOOL v19 = &a5[v13];
    char v20 = a5[v13];
    int v21 = &a5[v14];
    int v22 = a1;
    do
    {
      if (v20 != 58) {
        break;
      }
      *v19-- = 48;
      char v20 = *v21 + 1;
      *v21-- = v20;
      --v22;
    }
    while (v22 > 1);
  }
  if (*a5 == 58)
  {
    *a5 = 49;
    ++*a2;
  }
  *a7 = a1;
  return result;
}

_DWORD *sub_18C914AFC(_DWORD *result, int a2)
{
  *uint64_t result = 0;
  if (a2)
  {
    result[1] = a2;
    *(_WORD *)uint64_t result = 1;
  }
  return result;
}

_DWORD *sub_18C914B14(_DWORD *result, unint64_t a2)
{
  *uint64_t result = 0;
  if (a2)
  {
    __int16 v2 = 0;
    uint64_t v3 = 1;
    do
    {
      result[v3] = a2 & 0xFFFFFFF;
      a2 >>= 28;
      ++v2;
      ++v3;
    }
    while (a2);
    *(_WORD *)uint64_t result = v2;
  }
  return result;
}

_WORD *sub_18C914B44(_WORD *result, __int16 *a2)
{
  result[1] = a2[1];
  int v2 = *a2;
  if (v2 >= 1)
  {
    uint64_t v3 = (unsigned __int16)*a2;
    uint64_t v4 = result + 2;
    long long v5 = (int *)(a2 + 2);
    do
    {
      int v6 = *v5++;
      *v4++ = v6;
      --v3;
    }
    while (v3);
  }
  *uint64_t result = v2;
  return result;
}

void sub_18C914B7C(unsigned __int16 *a1, uint64_t a2, int a3)
{
  int v3 = a3;
  *(_DWORD *)a1 = 0;
  if (a3 < 19)
  {
    unsigned int v6 = 0;
    int v10 = a3;
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v7 = a2;
    do
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
        unint64_t v9 = *(char *)(v7 + v8++) + 10 * v9 - 48;
      while (v8 != 19);
      v6 += 19;
      int v10 = v3 - 19;
      sub_18C914CC4(a1, 19);
      sub_18C914DA8(a1, v9);
      v7 += 19;
      BOOL v11 = v3 <= 37;
      v3 -= 19;
    }
    while (!v11);
  }
  if (v10 < 1)
  {
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v13 = v6;
    do
      unint64_t v12 = *(char *)(a2 + v13++) + 10 * v12 - 48;
    while (v13 < (int)(v10 + v6));
  }
  sub_18C914CC4(a1, v10);
  sub_18C914DA8(a1, v12);
  int v14 = (__int16)*a1;
  if (v14 < 1)
  {
    if (!*a1) {
LABEL_19:
    }
      a1[1] = 0;
  }
  else
  {
    while (!*(_DWORD *)&a1[2 * (unsigned __int16)v14])
    {
      int v15 = (__int16)v14;
      LOWORD(v14) = v14 - 1;
      *a1 = v14;
      if (v15 <= 1) {
        goto LABEL_19;
      }
    }
  }
}

unsigned __int16 *sub_18C914CC4(unsigned __int16 *result, int a2)
{
  if (a2)
  {
    int v2 = result;
    if (*result)
    {
      int v4 = a2;
      if (a2 >= 27)
      {
        unsigned int v5 = a2;
        do
        {
          sub_18C915250(v2, 0x6765C793FA10079DuLL);
          int v4 = v5 - 27;
          BOOL v6 = v5 > 0x35;
          v5 -= 27;
        }
        while (v6);
      }
      if (v4 < 13)
      {
        int v7 = v4;
      }
      else
      {
        do
        {
          sub_18C9151B4((__int16 *)v2, 0x48C27395u);
          int v7 = v4 - 13;
          BOOL v6 = v4 > 0x19;
          v4 -= 13;
        }
        while (v6);
      }
      BOOL v8 = __OFSUB__(v7, 1);
      int v9 = v7 - 1;
      if (v9 < 0 == v8) {
        sub_18C9151B4((__int16 *)v2, dword_18CA91B40[v9]);
      }
      return sub_18C9150E0(v2, a2);
    }
  }
  return result;
}

void sub_18C914DA8(unsigned __int16 *a1, unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    bzero(v5, 0x204uLL);
    uint64_t v4 = 0;
    do
    {
      *(_DWORD *)&v5[2 * v4 + 2] = v2 & 0xFFFFFFF;
      v2 >>= 28;
      ++v4;
    }
    while (v2);
    v5[0] = v4;
    sub_18C914E20(a1, v5);
  }
}

void sub_18C914E20(unsigned __int16 *a1, __int16 *a2)
{
  sub_18C914F50(a1, (uint64_t)a2);
  int v4 = (__int16)*a1;
  int v5 = (__int16)a1[1];
  int v6 = v5 + v4;
  uint64_t v7 = *a2;
  int v8 = a2[1];
  if (v5 + v4 <= v8 + (int)v7) {
    int v6 = v8 + v7;
  }
  if (v6 - v5 >= 128) {
    abort();
  }
  int v9 = v8 - v5;
  if (v8 - v5 > v4) {
    bzero(&a1[2 * (__int16)*a1 + 2], 4 * (~v5 + v8 - (__int16)*a1) + 4);
  }
  if ((int)v7 >= 1)
  {
    unsigned int v10 = 0;
    BOOL v11 = (__int16 *)(a1 + 2);
    uint64_t v12 = v9;
    uint64_t v13 = (int *)(a2 + 2);
    do
    {
      if (v12 >= v4) {
        int v14 = 0;
      }
      else {
        int v14 = *(_DWORD *)&v11[2 * v12];
      }
      int v15 = *v13++;
      unsigned int v16 = v14 + v10 + v15;
      *(_DWORD *)&v11[2 * v12] = v16 & 0xFFFFFFF;
      unsigned int v10 = v16 >> 28;
      ++v12;
      --v7;
    }
    while (v7);
    if (v10)
    {
      uint64_t v17 = (__int16 *)(a1 + 2);
      do
      {
        if (v12 >= v4) {
          int v18 = 0;
        }
        else {
          int v18 = *(_DWORD *)&v17[2 * v12];
        }
        unsigned int v19 = v18 + v10;
        *(_DWORD *)&v17[2 * v12] = v19 & 0xFFFFFFF;
        unsigned int v10 = v19 >> 28;
        ++v12;
      }
      while (v10);
    }
    int v9 = v12;
  }
  if (v9 <= v4) {
    unsigned __int16 v20 = v4;
  }
  else {
    unsigned __int16 v20 = v9;
  }
  *a1 = v20;
}

void sub_18C914F50(unsigned __int16 *a1, uint64_t a2)
{
  int v2 = (__int16)a1[1];
  int v3 = *(__int16 *)(a2 + 2);
  int v4 = v2 - v3;
  if (v2 > v3)
  {
    int v6 = (__int16)*a1;
    if (v4 + v6 > 128) {
      abort();
    }
    int v7 = *a1;
    if ((__int16)v6 >= 1)
    {
      uint64_t v8 = 2 * (v2 + v7 - v3);
      unint64_t v9 = *a1;
      do
      {
        *(_DWORD *)&a1[v8] = *(_DWORD *)&a1[2 * v9];
        v8 -= 2;
      }
      while (v9-- > 1);
    }
    if (v4 >= 1) {
      bzero(a1 + 2, 4 * (~v3 + v2) + 4);
    }
    *a1 = v7 + v4;
    a1[1] = v2 - v4;
  }
}

void sub_18C915000(unsigned __int16 *a1, __int16 *a2)
{
  sub_18C914F50(a1, (uint64_t)a2);
  uint64_t v4 = *a2;
  if (v4 >= 1)
  {
    int v5 = 0;
    int v6 = a2[1];
    int v7 = (__int16)a1[1];
    uint64_t v8 = v4;
    unint64_t v9 = (int *)&a1[2 * (v6 - v7) + 2];
    unsigned int v10 = (int *)(a2 + 2);
    do
    {
      int v11 = *v10++;
      int v12 = *v9 + v5 - v11;
      *v9++ = v12 & 0xFFFFFFF;
      int v5 = v12 >> 31;
      --v8;
    }
    while (v8);
    if (v12 < 0)
    {
      int v13 = v4 + v6 - v7;
      do
      {
        int v14 = (__int16 *)&a1[2 * v13++];
        int v15 = *((_DWORD *)v14 + 1) - 1;
        *((_DWORD *)v14 + 1) = v15 & 0xFFFFFFF;
      }
      while (v15 < 0);
    }
  }
  int v16 = (__int16)*a1;
  if (v16 < 1)
  {
    if (!*a1) {
LABEL_12:
    }
      a1[1] = 0;
  }
  else
  {
    while (!*(_DWORD *)&a1[2 * (unsigned __int16)v16])
    {
      int v17 = (__int16)v16;
      LOWORD(v16) = v16 - 1;
      *a1 = v16;
      if (v17 <= 1) {
        goto LABEL_12;
      }
    }
  }
}

_WORD *sub_18C9150E0(_WORD *result, int a2)
{
  int v2 = (__int16)*result;
  if (*result)
  {
    result[1] += a2 / 28;
    if (v2 >= 128) {
      abort();
    }
    char v3 = a2 % 28;
    return sub_18C915150(result, v3);
  }
  return result;
}

_WORD *sub_18C915150(_WORD *result, char a2)
{
  if ((__int16)*result >= 1)
  {
    uint64_t v2 = 0;
    unsigned int v3 = 0;
    uint64_t v4 = (unsigned __int16)*result;
    do
    {
      unsigned int v5 = *(_DWORD *)&result[v2 + 2];
      unsigned int v6 = (v5 << a2) + v3;
      unsigned int v3 = v5 >> (28 - a2);
      *(_DWORD *)&result[v2 + 2] = v6 & 0xFFFFFFF;
      v2 += 2;
    }
    while (2 * v4 != v2);
    if (v3)
    {
      *(_DWORD *)&result[2 * (__int16)v4 + 2] = v3;
      *uint64_t result = v4 + 1;
    }
  }
  return result;
}

__int16 *sub_18C9151B4(__int16 *result, unsigned int a2)
{
  if (a2 != 1)
  {
    if (a2)
    {
      int v2 = *result;
      if (v2 >= 1)
      {
        uint64_t v3 = 0;
        unint64_t v4 = 0;
        do
        {
          unint64_t v5 = v4 + *(unsigned int *)&result[v3 + 2] * (unint64_t)a2;
          *(_DWORD *)&result[v3 + 2] = v5 & 0xFFFFFFF;
          unint64_t v4 = v5 >> 28;
          v3 += 2;
        }
        while (2 * (unsigned __int16)v2 != v3);
        for (; v4; v4 >>= 28)
        {
          if ((__int16)v2 >= 128) {
            abort();
          }
          *(_DWORD *)&result[2 * (__int16)v2 + 2] = v4 & 0xFFFFFFF;
          LOWORD(v2) = v2 + 1;
          *uint64_t result = v2;
        }
      }
    }
    else
    {
      *(_DWORD *)uint64_t result = 0;
    }
  }
  return result;
}

unsigned __int16 *sub_18C915250(unsigned __int16 *result, unint64_t a2)
{
  if (a2 != 1)
  {
    if (a2)
    {
      uint64_t v2 = *result;
      unsigned __int16 v3 = *result;
      if (*result) {
        BOOL v4 = (__int16)v2 < 1;
      }
      else {
        BOOL v4 = 1;
      }
      if (!v4)
      {
        unint64_t v5 = 0;
        unint64_t v6 = 0;
        uint64_t v7 = 4 * v2;
        do
        {
          uint64_t v8 = *(unsigned int *)&result[v5 / 2 + 2];
          unint64_t v9 = (v6 & 0xFFFFFFF) + a2 * (unint64_t)v8;
          *(_DWORD *)&result[v5 / 2 + 2] = v9 & 0xFFFFFFF;
          unint64_t v6 = ((a2 >> 28) & 0xFFFFFFFF0) * v8 + (v6 >> 28) + (v9 >> 28);
          v5 += 4;
        }
        while (v7 != v5);
        for (; v6; v6 >>= 28)
        {
          if ((__int16)v3 >= 128) {
            abort();
          }
          *(_DWORD *)&result[2 * (__int16)v3++ + 2] = v6 & 0xFFFFFFF;
          *uint64_t result = v3;
        }
      }
    }
    else
    {
      *(_DWORD *)uint64_t result = 0;
    }
  }
  return result;
}

__int16 *sub_18C915304(__int16 *result)
{
  uint64_t v1 = *result;
  if ((int)v1 > 64) {
    abort();
  }
  uint64_t v2 = *result;
  uint64_t v3 = 2 * v2;
  if ((int)v1 < 1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v4 = (unsigned __int16)*result;
    unint64_t v5 = result + 2;
    uint64_t v6 = *result;
    do
    {
      v5[v4] = *v5;
      ++v5;
      --v6;
    }
    while (v6);
    unint64_t v7 = 0;
    uint64_t v8 = 4;
    unint64_t v9 = &result[2 * v4];
    do
    {
      uint64_t v10 = 2;
      uint64_t v11 = v8;
      do
      {
        v7 += *(unsigned int *)&v9[v10] * (unint64_t)*(unsigned int *)((char *)v9 + v11);
        v10 += 2;
        v11 -= 4;
      }
      while (v11);
      *(_DWORD *)&result[2 * v6 + 2] = v7 & 0xFFFFFFF;
      v7 >>= 28;
      ++v6;
      v8 += 4;
    }
    while (v6 != v1);
  }
  if ((int)v3 > (int)v1)
  {
    uint64_t v12 = (uint64_t)&result[2 * (int)v1 + 4];
    uint64_t v13 = 1;
    do
    {
      if (v2 < 2 * (int)v1 - 1)
      {
        uint64_t v14 = v1;
        int v15 = (unsigned int *)v12;
        int v16 = &result[4 * (int)v1];
        do
        {
          unsigned int v18 = *(_DWORD *)v16;
          v16 -= 2;
          unsigned int v17 = v18;
          unsigned int v19 = *v15++;
          v7 += v19 * (unint64_t)v17;
          --v14;
        }
        while (v13 != v14);
      }
      *(_DWORD *)&result[2 * v2 + 2] = v7 & 0xFFFFFFF;
      v7 >>= 28;
      ++v2;
      ++v13;
      v12 += 4;
    }
    while (v2 != v3);
  }
  *uint64_t result = v3;
  result[1] *= 2;
  if ((__int16)v3 < 1)
  {
    if (!(2 * (_WORD)v1)) {
LABEL_22:
    }
      result[1] = 0;
  }
  else
  {
    while (!*(_DWORD *)&result[2 * (unsigned __int16)v3])
    {
      int v20 = (__int16)v3;
      LOWORD(v3) = v3 - 1;
      *uint64_t result = v3;
      if (v20 <= 1) {
        goto LABEL_22;
      }
    }
  }
  return result;
}

__int16 *sub_18C915470(__int16 *result, unsigned int a2, int a3)
{
  uint64_t v3 = result;
  if (a3)
  {
    unsigned int v5 = a2;
    *(_DWORD *)uint64_t result = 0;
    int v6 = 0;
    if ((a2 & 1) == 0)
    {
      do
      {
        unsigned int v7 = v5 >> 1;
        unsigned int v5 = (unsigned __int16)v5 >> 1;
        ++v6;
      }
      while ((v7 & 1) == 0);
    }
    int v8 = 0;
    char v9 = 64;
    unsigned int v10 = v5;
    do
    {
      --v9;
      v8 += a3;
      BOOL v11 = v10 > 1;
      v10 >>= 1;
    }
    while (v11);
    if (v8 > 3555) {
      abort();
    }
    int v12 = 1;
    do
    {
      int v13 = v12;
      v12 *= 2;
    }
    while (v13 <= a3);
    int v14 = v13 >> 2;
    if (v13 >= 4)
    {
      int v15 = 0;
      uint64_t v17 = -1 << v9;
      unint64_t v16 = v5;
      do
      {
        unsigned int v18 = v14;
        v16 *= v16;
        if ((v16 & v17) != 0) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = v5;
        }
        uint64_t v20 = v19 * v16;
        int v21 = ((v16 & v17) != 0) | v15;
        if ((v14 & a3) != 0)
        {
          unint64_t v16 = v20;
          int v15 = v21;
        }
        v14 >>= 1;
      }
      while (v18 >= 2 && !HIDWORD(v16));
    }
    else
    {
      LOBYTE(v15) = 0;
      unint64_t v16 = v5;
    }
    if (v16)
    {
      uint64_t v22 = 0;
      do
      {
        *(_DWORD *)&result[2 * v22 + 2] = v16 & 0xFFFFFFF;
        v16 >>= 28;
        ++v22;
      }
      while (v16);
      *uint64_t result = v22;
    }
    if (v15) {
      sub_18C9151B4(result, v5);
    }
    if (v14)
    {
      do
      {
        sub_18C915304(v3);
        if ((v14 & a3) != 0) {
          sub_18C9151B4(v3, v5);
        }
        BOOL v11 = v14 > 1;
        v14 >>= 1;
      }
      while (v11);
    }
    return sub_18C9150E0(v3, v6 * a3);
  }
  else
  {
    *(void *)uint64_t result = 0x100000001;
  }
  return result;
}

uint64_t sub_18C91560C(unsigned __int16 *a1, __int16 *a2)
{
  if ((__int16)a1[1] + (__int16)*a1 >= a2[1] + *a2)
  {
    sub_18C914F50(a1, (uint64_t)a2);
    int v6 = (__int16)*a1;
    int v7 = *a2;
    if ((__int16)a1[1] + v6 <= a2[1] + v7)
    {
      int v2 = 0;
    }
    else
    {
      int v2 = 0;
      do
      {
        int v8 = *(_DWORD *)&a1[2 * v6];
        v2 += v8;
        sub_18C9157A0(a1, a2, v8);
        int v6 = (__int16)*a1;
        int v7 = *a2;
      }
      while ((__int16)a1[1] + v6 > a2[1] + v7);
    }
    int v9 = (unsigned __int16)v6;
    unsigned int v10 = (unsigned int *)&a1[2 * v6];
    unsigned int v11 = *v10;
    unsigned int v12 = *(_DWORD *)&a2[2 * v7];
    if ((unsigned __int16)v7 == 1)
    {
      *unsigned int v10 = v11 % v12;
      v2 += v11 / v12;
      if ((__int16)v9 < 1)
      {
        if (!v9) {
LABEL_19:
        }
          a1[1] = 0;
      }
      else
      {
        while (!*(_DWORD *)&a1[2 * (unsigned __int16)v9])
        {
          int v13 = (__int16)v9;
          LOWORD(v9) = v9 - 1;
          *a1 = v9;
          if (v13 <= 1) {
            goto LABEL_19;
          }
        }
      }
    }
    else
    {
      unsigned int v14 = v11 / (v12 + 1);
      LOWORD(v2) = v2 + v14;
      sub_18C9157A0(a1, a2, v14);
      if (v12 + v12 * v14 <= v11 && (int)sub_18C9158D8((uint64_t)a2, (__int16 *)a1) <= 0)
      {
        do
        {
          sub_18C915000(a1, a2);
          LOWORD(v2) = v2 + 1;
        }
        while ((int)sub_18C9158D8((uint64_t)a2, (__int16 *)a1) < 1);
      }
    }
  }
  else
  {
    LOWORD(v2) = 0;
  }
  return (unsigned __int16)v2;
}

void sub_18C9157A0(unsigned __int16 *a1, __int16 *a2, int a3)
{
  int v3 = a3;
  if (a3 > 2)
  {
    int v6 = a2[1] - (__int16)a1[1];
    int v7 = *a2;
    if (v7 < 1)
    {
      unsigned int v8 = 0;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = (int *)&a1[2 * v6 + 2];
      unsigned int v10 = (unsigned int *)(a2 + 2);
      uint64_t v11 = *a2;
      do
      {
        unsigned int v12 = *v10++;
        unint64_t v13 = v12 * (unint64_t)a3 + v8;
        unsigned int v14 = *v9 - (v13 & 0xFFFFFFF);
        *v9++ = v14 & 0xFFFFFFF;
        unsigned int v8 = (v13 >> 28) + (v14 >> 31);
        --v11;
      }
      while (v11);
    }
    LODWORD(v15) = v6 + v7;
    uint64_t v16 = (__int16)*a1;
    if ((int)v15 >= (int)v16)
    {
LABEL_14:
      if ((int)v16 < 1)
      {
        if (!v16) {
LABEL_19:
        }
          a1[1] = 0;
      }
      else
      {
        while (!*(_DWORD *)&a1[2 * (unsigned __int16)v16])
        {
          int v19 = (__int16)v16;
          LOWORD(v16) = v16 - 1;
          *a1 = v16;
          if (v19 <= 1) {
            goto LABEL_19;
          }
        }
      }
    }
    else
    {
      uint64_t v15 = (int)v15;
      uint64_t v17 = (__int16 *)(a1 + 2);
      while (v8)
      {
        unsigned int v18 = *(_DWORD *)&v17[2 * v15] - v8;
        *(_DWORD *)&v17[2 * v15] = v18 & 0xFFFFFFF;
        unsigned int v8 = v18 >> 31;
        if (++v15 >= v16) {
          goto LABEL_14;
        }
      }
    }
  }
  else if (a3 >= 1)
  {
    do
    {
      sub_18C915000(a1, a2);
      --v3;
    }
    while (v3);
  }
}

uint64_t sub_18C9158D8(uint64_t result, __int16 *a2)
{
  uint64_t v2 = *(__int16 *)result;
  uint64_t v3 = *(__int16 *)(result + 2);
  uint64_t v4 = v3 + v2;
  uint64_t v5 = a2[1];
  uint64_t v6 = v5 + *a2;
  if ((int)v3 + (int)v2 < (int)v6) {
    return 0xFFFFFFFFLL;
  }
  if ((int)v3 + (int)v2 > (int)v6) {
    return 1;
  }
  if ((int)v5 >= (int)v3) {
    int v7 = *(__int16 *)(result + 2);
  }
  else {
    int v7 = a2[1];
  }
  uint64_t v8 = v2 + v3;
  int v9 = (unsigned int *)(result + 4 * v2);
  while (v8 > v7)
  {
    unsigned int v10 = 0;
    if (v8 > v3 && v8 <= v4) {
      unsigned int v10 = *v9;
    }
    unsigned int v11 = 0;
    if (v8 > v5 && v8 <= v6) {
      unsigned int v11 = *(_DWORD *)&a2[2 * v8 + -2 * v5];
    }
    --v9;
    --v8;
    BOOL v12 = v10 >= v11;
    BOOL v13 = v10 == v11;
    if (v10 > v11) {
      unsigned int v14 = 1;
    }
    else {
      unsigned int v14 = result;
    }
    if (v12) {
      uint64_t result = v14;
    }
    else {
      uint64_t result = 0xFFFFFFFFLL;
    }
    if (!v13) {
      return result;
    }
  }
  return 0;
}

uint64_t sub_18C915980(__int16 *a1, __int16 *a2, __int16 *a3)
{
  __int16 v3 = *a1;
  __int16 v4 = a1[1];
  do
  {
    uint64_t v5 = a2;
    a2 = a1;
    int v6 = v4;
    int v7 = v4 + v3;
    __int16 v3 = *v5;
    int v8 = v5[1];
    __int16 v4 = v5[1];
    int v9 = v8 + *v5;
    a1 = v5;
  }
  while (v7 < v9);
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v12 = v11 + v10;
  if (v7 + 1 < (int)v11 + (int)v10) {
    return 0xFFFFFFFFLL;
  }
  if (v7 > (int)v12) {
    return 1;
  }
  if (v9 <= v6 && v7 < (int)v12) {
    return 0xFFFFFFFFLL;
  }
  __int16 v14 = a2[1];
  if (v8 < v6) {
    __int16 v14 = v5[1];
  }
  if ((int)v11 >= v14) {
    LODWORD(v15) = v14;
  }
  else {
    LODWORD(v15) = a3[1];
  }
  if ((int)v12 > (int)v15)
  {
    unsigned int v16 = 0;
    uint64_t v17 = v6;
    uint64_t v18 = v10 + v11;
    uint64_t v15 = (__int16)v15;
    int v19 = &a3[2 * v10];
    uint64_t v20 = &v5[-2 * v5[1]];
    int v21 = &a2[-2 * v6];
    while (1)
    {
      int v22 = 0;
      if (v18 > v17 && v18 <= v7) {
        int v22 = *(_DWORD *)&v21[2 * v18];
      }
      int v23 = 0;
      if (v18 > v8 && v18 <= v9) {
        int v23 = *(_DWORD *)&v20[2 * v18];
      }
      int v24 = 0;
      if (v18 > v11 && v18 <= v12) {
        int v24 = *(_DWORD *)v19;
      }
      unsigned int v25 = v23 + v22;
      unsigned int v26 = v24 + v16;
      unsigned int v27 = v24 + v16 - v25;
      if (v26 < v25) {
        break;
      }
      if (v27 > 1) {
        return 0xFFFFFFFFLL;
      }
      --v18;
      unsigned int v16 = v27 << 28;
      v19 -= 2;
      if (v18 <= v15)
      {
        if (v26 == v25) {
          return 0;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_18C915AC8(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  signed int v4 = vcvtpd_s64_f64((double)((int)result + 63) * 0.301029996);
  int v6 = v4 + 347;
  BOOL v5 = v4 < -347;
  int v7 = v4 + 354;
  if (!v5) {
    int v7 = v6;
  }
  int v8 = (char *)&unk_18CA91B70 + 16 * (v7 >> 3);
  uint64_t v9 = *((void *)v8 + 2);
  int v10 = *((__int16 *)v8 + 12);
  *a4 = *((__int16 *)v8 + 13);
  *(void *)a3 = v9;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t sub_18C915B18(uint64_t result, uint64_t a2, _DWORD *a3)
{
  int v3 = result + 348;
  if ((int)result < -348) {
    int v3 = result + 355;
  }
  signed int v4 = (char *)&unk_18CA91B70 + 16 * (v3 >> 3);
  uint64_t v5 = *(void *)v4;
  int v6 = *((__int16 *)v4 + 4);
  LODWORD(v4) = *((__int16 *)v4 + 5);
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *a3 = v4;
  return result;
}

uint64_t icu::double_conversion::DoubleToStringConverter::DoubleToAscii(uint64_t result, int a2, unsigned char *a3, unsigned int a4, BOOL *a5, int *a6, int *a7, double a8)
{
  if (a8 >= 0.0) {
    double v12 = a8;
  }
  else {
    double v12 = -a8;
  }
  *a5 = a8 < 0.0;
  if (result != 3 || a2)
  {
    if (v12 == 0.0)
    {
      *(_WORD *)a3 = 48;
      *a6 = 1;
      *a7 = 1;
    }
    else
    {
      if (result) {
        abort();
      }
      uint64_t v13 = a4;
      uint64_t result = sub_18C915C38(0, 0, (uint64_t)a3, a4, a6, a7, v12);
      if ((result & 1) == 0)
      {
        uint64_t result = sub_18C914464(0, a2, a3, v13, a6, a7, v12);
        a3[*a6] = 0;
      }
    }
  }
  else
  {
    *a3 = 0;
    *a6 = 0;
  }
  return result;
}

BOOL sub_18C915C38(unsigned int a1, int a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6, double a7)
{
  if (a1 >= 2)
  {
    if (a1 != 2) {
      abort();
    }
    double v60 = a7;
    uint64_t v18 = sub_18C916158(&v60);
    int v20 = v19;
    double v60 = 0.0;
    uint64_t v61 = 0;
    LODWORD(v59[0]) = 0;
    sub_18C915AC8((-124 - v19), (-96 - v19), (uint64_t)&v60, v59);
    unint64_t v21 = ((LODWORD(v60) * (unint64_t)HIDWORD(v18)) >> 32)
        + HIDWORD(v60) * (unint64_t)HIDWORD(v18)
        + ((HIDWORD(v60) * (unint64_t)v18) >> 32)
        + ((((LODWORD(v60) * (unint64_t)v18) >> 32)
          + (LODWORD(v60) * HIDWORD(v18))
          + (HIDWORD(v60) * v18)
          + 0x80000000) >> 32);
    char v22 = -64 - (v20 + v61);
    int v23 = -(v20 + v61);
    unint64_t v24 = v21 >> -(char)(v20 + v61);
    int v25 = 1233 * (v20 + v61 + 64) + 80145;
    int v26 = v25 >> 12;
    uint64_t v27 = ((uint64_t)v25 >> 12) + 1;
    if (dword_18CA920E0[v27] > v24) {
      LODWORD(v27) = v26;
    }
    unsigned int v28 = dword_18CA920E0[(int)v27];
    unint64_t v29 = 1 << v23;
    uint64_t v30 = (1 << v23) - 1;
    unint64_t v31 = v21 & v30;
    LODWORD(v57) = v27;
    *a5 = 0;
    if ((int)v27 < 1)
    {
      int v32 = 0;
      if (a2)
      {
LABEL_30:
        if (a2 < 1 || v31 < 2) {
          return 0;
        }
        unint64_t v52 = 1;
        do
        {
          unsigned int v53 = a2;
          v52 *= 10;
          *(unsigned char *)(a3 + v32) = ((10 * v31) >> v22) + 48;
          int v32 = *a5 + 1;
          *a5 = v32;
          --a2;
          unint64_t v31 = v30 & (10 * v31);
          LODWORD(v27) = v27 - 1;
        }
        while (v53 >= 2 && v31 > v52);
        LODWORD(v57) = v27;
        if (a2) {
          return 0;
        }
        int v54 = (unsigned char *)a3;
        uint64_t v55 = a4;
LABEL_39:
        if (sub_18C9163AC(v54, v55, v32, v31, v29, v52, &v57))
        {
          int v51 = LODWORD(v57) - LODWORD(v59[0]);
          goto LABEL_41;
        }
        return 0;
      }
    }
    else
    {
      int v32 = 0;
      while (1)
      {
        *(unsigned char *)(a3 + v32) = v24 / v28 + 48;
        int v32 = *a5 + 1;
        *a5 = v32;
        LODWORD(v24) = v24 % v28;
        LODWORD(v27) = v27 - 1;
        if (!--a2) {
          break;
        }
        v28 /= 0xAu;
        if ((v27 + 1) <= 1)
        {
          LODWORD(v57) = v27;
          goto LABEL_30;
        }
      }
      LODWORD(v57) = v27;
    }
    v31 += (unint64_t)v24 << v22;
    unint64_t v29 = (unint64_t)v28 << v22;
    int v54 = (unsigned char *)a3;
    uint64_t v55 = a4;
    unint64_t v52 = 1;
    goto LABEL_39;
  }
  double v60 = a7;
  uint64_t v13 = sub_18C916158(&v60);
  int v15 = v14;
  double v60 = 0.0;
  uint64_t v61 = 0;
  v59[0] = 0;
  v59[1] = 0;
  if (a1)
  {
    float v16 = a7;
    *(float *)&double v57 = v16;
    sub_18C91623C((int *)&v57, (uint64_t)&v60, (uint64_t)v59);
  }
  else
  {
    double v57 = a7;
    sub_18C91619C(&v57, (uint64_t)&v60, (uint64_t)v59);
  }
  double v57 = 0.0;
  uint64_t v58 = 0;
  int v56 = 0;
  sub_18C915AC8((-124 - v15), (-96 - v15), (uint64_t)&v57, &v56);
  unint64_t v33 = ((LODWORD(v57) * (unint64_t)HIDWORD(v13)) >> 32)
      + HIDWORD(v57) * (unint64_t)HIDWORD(v13)
      + ((HIDWORD(v57) * (unint64_t)v13) >> 32)
      + ((((LODWORD(v57) * (unint64_t)v13) >> 32)
        + (LODWORD(v57) * HIDWORD(v13))
        + (HIDWORD(v57) * v13)
        + 0x80000000) >> 32);
  unint64_t v34 = ((HIDWORD(v59[0]) * (unint64_t)LODWORD(v57)) >> 32)
      + HIDWORD(v59[0]) * (unint64_t)HIDWORD(v57)
      + ((LODWORD(v59[0]) * (unint64_t)HIDWORD(v57)) >> 32)
      + ((((LODWORD(v59[0]) * (unint64_t)LODWORD(v57)) >> 32)
        + (HIDWORD(v59[0]) * LODWORD(v57))
        + (LODWORD(v59[0]) * HIDWORD(v57))
        + 0x80000000) >> 32);
  unint64_t v35 = v34 + 1;
  unint64_t v36 = v34
      - (((HIDWORD(v60) * (unint64_t)LODWORD(v57)) >> 32)
       + HIDWORD(v60) * (unint64_t)HIDWORD(v57)
       + ((LODWORD(v60) * (unint64_t)HIDWORD(v57)) >> 32)
       + ((((LODWORD(v60) * (unint64_t)LODWORD(v57)) >> 32)
         + (HIDWORD(v60) * LODWORD(v57))
         + (LODWORD(v60) * HIDWORD(v57))
         + 0x80000000) >> 32))
      + 2;
  char v37 = -64 - (v15 + v58);
  unint64_t v38 = 1 << -(char)(v15 + v58);
  unint64_t v39 = v35 >> -(char)(v15 + v58);
  unint64_t v40 = v35 & (v38 - 1);
  int v41 = 1233 * (v15 + v58 + 64) + 80145;
  int v42 = v41 >> 12;
  uint64_t v43 = ((uint64_t)v41 >> 12) + 1;
  if (dword_18CA920E0[v43] <= v39) {
    int v44 = v43;
  }
  else {
    int v44 = v42;
  }
  unsigned int v45 = dword_18CA920E0[v44];
  *a5 = 0;
  if (v44 >= 1)
  {
    int v46 = 0;
    int v47 = v44 + 1;
    while (1)
    {
      *(unsigned char *)(a3 + v46) = v39 / v45 + 48;
      int v46 = *a5 + 1;
      *a5 = v46;
      unint64_t v39 = v39 % v45;
      if ((v39 << v37) + v40 < v36) {
        break;
      }
      v45 /= 0xAu;
      if (--v47 <= 1)
      {
        int v44 = 0;
        goto LABEL_23;
      }
    }
    if (sub_18C9162DC(a3, a4, v46, v35 - v33, v36, (v39 << v37) + v40, (unint64_t)v45 << v37, 1))
    {
      int v51 = v47 - v56 - 2;
      goto LABEL_41;
    }
    return 0;
  }
  int v46 = 0;
LABEL_23:
  uint64_t v48 = 1;
  do
  {
    v48 *= 10;
    uint64_t v49 = 5 * v36;
    v36 *= 10;
    *(unsigned char *)(a3 + v46) = ((10 * v40) >> v37) + 48;
    int v46 = *a5 + 1;
    *a5 = v46;
    unint64_t v40 = (v38 - 1) & (10 * v40);
    --v44;
  }
  while (v40 >= 2 * v49);
  BOOL result = sub_18C9162DC(a3, a4, v46, v48 * (v35 - v33), v36, v40, v38, v48);
  if (result)
  {
    int v51 = v44 - v56;
LABEL_41:
    *a6 = *a5 + v51;
    *(unsigned char *)(a3 + *a5) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_18C916158(void *a1)
{
  uint64_t v1 = (*a1 & 0xFFFFFFFFFFFFFLL) << (__clz(*a1 & 0xFFFFFFFFFFFFFLL) - 11);
  if ((*a1 & 0x7FF0000000000000) != 0) {
    uint64_t v2 = *a1 | 0x10000000000000;
  }
  else {
    uint64_t v2 = v1;
  }
  return v2 << 11;
}

void *sub_18C91619C(void *result, uint64_t a2, uint64_t a3)
{
  if ((*result & 0x7FF0000000000000) != 0) {
    uint64_t v3 = *result & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  else {
    uint64_t v3 = *result & 0xFFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 2 * v3;
  unint64_t v5 = (2 * (v3 & 0x1FFFFFFFFFFFFFLL)) | 1;
  if ((*result & 0x7FF0000000000000) != 0) {
    int v6 = ((*result >> 52) & 0x7FF) - 1075;
  }
  else {
    int v6 = -1074;
  }
  char v7 = v6 - 1;
  int v8 = v6 - 1;
  do
  {
    unint64_t v9 = v5 >> 44;
    v5 <<= 10;
    v8 -= 10;
  }
  while (!v9);
  for (; (v5 & 0x8000000000000000) == 0; --v8)
    v5 *= 2;
  BOOL v10 = (*result & 0xFFFFFFFFFFFFFLL) == 0;
  BOOL v11 = (*result & 0x7FE0000000000000) != 0;
  uint64_t v12 = 4 * v3;
  char v13 = v6 - 2;
  BOOL v14 = !v10 || !v11;
  if (v10 && v11) {
    char v15 = v13;
  }
  else {
    char v15 = v7;
  }
  if (v14) {
    uint64_t v16 = v4;
  }
  else {
    uint64_t v16 = v12;
  }
  *(void *)a3 = v5;
  *(_DWORD *)(a3 + 8) = v8;
  *(void *)a2 = (v16 - 1) << (v15 - v8);
  *(_DWORD *)(a2 + 8) = v8;
  return result;
}

int *sub_18C91623C(int *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  unsigned int v4 = *result & 0x7FFFFF;
  LODWORD(v5) = v4 | 0x800000;
  if ((*result & 0x7F800000) != 0) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 0x7F800000) != 0) {
    int v6 = (*result >> 23) - 150;
  }
  else {
    int v6 = -149;
  }
  uint64_t v7 = 2 * v5;
  unint64_t v8 = (2 * (v5 & 0xFFFFFF)) | 1;
  char v9 = v6 - 1;
  int v10 = v6 - 1;
  do
  {
    unint64_t v11 = v8 >> 44;
    v8 <<= 10;
    v10 -= 10;
  }
  while (!v11);
  for (; (v8 & 0x8000000000000000) == 0; --v10)
    v8 *= 2;
  BOOL v12 = v4 == 0;
  BOOL v13 = (v3 & 0x7F000000) != 0;
  uint64_t v14 = 4 * v5;
  char v15 = v6 - 2;
  BOOL v16 = !v12 || !v13;
  if (v12 && v13) {
    char v17 = v15;
  }
  else {
    char v17 = v9;
  }
  if (v16) {
    uint64_t v18 = v7;
  }
  else {
    uint64_t v18 = v14;
  }
  *(void *)a3 = v8;
  *(_DWORD *)(a3 + 8) = v10;
  *(void *)a2 = (v18 - 1) << (v17 - v10);
  *(_DWORD *)(a2 + 8) = v10;
  return result;
}

BOOL sub_18C9162DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v8 = a4 - a8;
  unint64_t v9 = a8 + a4;
  BOOL v10 = a5 - a6 < a7;
  if (a4 - a8 > a6 && a5 - a6 >= a7)
  {
    uint64_t v11 = -(uint64_t)a6;
    uint64_t v12 = a5 - a7;
    while (1)
    {
      unint64_t v13 = a6 + a7;
      if (a6 + a7 >= v8 && v8 + v11 < a8 - a4 + a7 + a6) {
        break;
      }
      --*(unsigned char *)(a1 + a3 - 1);
      unint64_t v14 = v12 + v11;
      BOOL v10 = v12 + v11 < a7;
      if (v13 < v8)
      {
        v11 -= a7;
        a6 += a7;
        if (v14 >= a7) {
          continue;
        }
      }
      goto LABEL_11;
    }
    BOOL v10 = 0;
  }
  unint64_t v13 = a6;
LABEL_11:
  unint64_t v15 = v9 - v13;
  if (v9 > v13 && !v10)
  {
    BOOL v16 = v13 + a7 >= v9;
    unint64_t v17 = v13 + a7 - v9;
    if (!v16 || v15 > v17) {
      return 0;
    }
  }
  return v13 >= 2 * a8 && v13 <= a5 - 4 * a8;
}

uint64_t sub_18C9163AC(unsigned char *a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, unint64_t a6, _DWORD *a7)
{
  uint64_t v7 = 0;
  if (a5 > a6 && a5 - a6 > a6)
  {
    if (a5 - a4 <= a4 || a5 - 2 * a4 < 2 * a6)
    {
      if (a4 <= a6 || a5 - (a4 - a6) > a4 - a6) {
        return 0;
      }
      uint64_t v8 = a3 - 1;
      ++a1[v8];
      if (a3 >= 2)
      {
        unint64_t v9 = &a1[v8];
        char v10 = *v9;
        uint64_t v11 = &a1[a3 - 2];
        do
        {
          if (v10 != 58) {
            break;
          }
          *v9-- = 48;
          char v10 = *v11 + 1;
          *v11-- = v10;
          --a3;
        }
        while (a3 > 1);
      }
      if (*a1 == 58)
      {
        *a1 = 49;
        ++*a7;
      }
    }
    return 1;
  }
  return v7;
}

double sub_18C916474(double *a1, unsigned __int8 *a2, int a3, _DWORD *a4)
{
  return sub_18C916480(a1, a2, a3, 1, a4);
}

double sub_18C916480(double *a1, unsigned __int8 *a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  int v6 = (char *)&a2[a3];
  uint64_t v77 = v6;
  *(void *)unsigned int v78 = a2;
  *a5 = 0;
  if (!a3) {
    return a1[1];
  }
  unsigned int v10 = *(_DWORD *)a1;
  int v11 = (*(_DWORD *)a1 >> 4) & 1;
  uint64_t v12 = a2;
  if ((*(_DWORD *)a1 & 8) == 0)
  {
    uint64_t v12 = a2;
    if (!v11)
    {
      int v13 = *a2;
      uint64_t v12 = a2;
      goto LABEL_5;
    }
  }
LABEL_15:
  uint64_t v18 = 0;
  int v13 = *v12;
  do
  {
    if (byte_18CA9210C[v18] == v13)
    {
      if (++v12 == (unsigned __int8 *)v6)
      {
        *a5 = a3;
        return a1[1];
      }
      goto LABEL_15;
    }
    ++v18;
  }
  while (v18 != 6);
  *(void *)unsigned int v78 = v12;
  if ((v10 & 8) == 0 && v12 != a2) {
    return a1[2];
  }
LABEL_5:
  uint64_t v14 = a3;
  if (v13 == 45 || v13 == 43)
  {
    BOOL v15 = v13 == 45;
    *(void *)unsigned int v78 = v12 + 1;
    if (v12 + 1 == (unsigned __int8 *)v6) {
      return a1[2];
    }
    uint64_t v16 = 1;
LABEL_9:
    for (uint64_t i = 0; i != 6; ++i)
    {
      if (byte_18CA9210C[i] == v12[v16])
      {
        if (++v16 == &a2[a3] - v12) {
          return a1[2];
        }
        goto LABEL_9;
      }
    }
    if ((v10 & 0x20) == 0 && v16 != 1) {
      return a1[2];
    }
    v12 += v16;
    *(void *)unsigned int v78 = v12;
  }
  else
  {
    BOOL v15 = 0;
  }
  int v20 = (unsigned __int8 *)*((void *)a1 + 3);
  if (!v20)
  {
    unint64_t v24 = (unsigned __int8 *)*((void *)a1 + 4);
    if (!v24)
    {
      int v21 = *v12;
      goto LABEL_58;
    }
    if ((v10 & 0x40) == 0)
    {
      int v21 = *v12;
      goto LABEL_46;
    }
LABEL_201:
    abort();
  }
  if ((v10 & 0x40) != 0) {
    goto LABEL_201;
  }
  int v21 = *v12;
  if (*v20 == v21)
  {
    if ((sub_18C917620((uint64_t *)v78, (unsigned __int8 *)v6, (uint64_t)v20, 0) & 1) == 0) {
      return a1[2];
    }
    char v22 = *(char **)v78;
    if ((v11 | ((v10 & 4) >> 2)))
    {
      if ((v10 & 4) != 0 || *(char **)v78 == v6)
      {
        LODWORD(v6) = *(_DWORD *)v78;
      }
      else
      {
        do
        {
          uint64_t v23 = 0;
          while (byte_18CA9210C[v23] != *v22)
          {
            if (++v23 == 6) {
              return a1[2];
            }
          }
          ++v22;
        }
        while (v22 != v6);
        LODWORD(v6) = a2 + v14;
      }
    }
    else if (*(char **)v78 != v6)
    {
      return a1[2];
    }
    *a5 = v6 - a2;
    BOOL v43 = !v15;
    double result = INFINITY;
    unint64_t v44 = 0xFFF0000000000000;
LABEL_116:
    double v45 = *(double *)&v44;
    goto LABEL_197;
  }
  unint64_t v24 = (unsigned __int8 *)*((void *)a1 + 4);
  if (v24)
  {
LABEL_46:
    if (*v24 == v21)
    {
      if ((sub_18C917620((uint64_t *)v78, (unsigned __int8 *)v6, (uint64_t)v24, 0) & 1) == 0) {
        return a1[2];
      }
      int v25 = *(char **)v78;
      if ((v11 | ((v10 & 4) >> 2)))
      {
        if ((v10 & 4) != 0 || *(char **)v78 == v6)
        {
          LODWORD(v6) = *(_DWORD *)v78;
        }
        else
        {
          do
          {
            uint64_t v26 = 0;
            while (byte_18CA9210C[v26] != *v25)
            {
              if (++v26 == 6) {
                return a1[2];
              }
            }
            ++v25;
          }
          while (v25 != v6);
          LODWORD(v6) = a2 + v14;
        }
      }
      else if (*(char **)v78 != v6)
      {
        return a1[2];
      }
      *a5 = v6 - a2;
      BOOL v43 = !v15;
      double result = NAN;
      unint64_t v44 = 0xFFF8000000000000;
      goto LABEL_116;
    }
  }
LABEL_58:
  int v73 = v21;
  if (v21 != 48)
  {
    int v69 = v11;
    int v70 = a4;
    uint64_t v68 = v14;
    int v71 = v15;
    long long v72 = a5;
    LOBYTE(v27) = 0;
    goto LABEL_60;
  }
  int v34 = *((unsigned __int16 *)a1 + 20);
  if (sub_18C9176A0((char **)v78, v34, 10, &v77))
  {
LABEL_73:
    *a5 = *(_DWORD *)v78 - a2;
    BOOL v35 = !v15;
LABEL_74:
    double result = -0.0;
    if (v35) {
      return 0.0;
    }
    return result;
  }
  if ((v10 & 0x81) == 0 || (uint64_t v36 = *(void *)v78, (**(unsigned char **)v78 | 0x20) != 0x78))
  {
    while (**(unsigned char **)v78 == 48)
    {
      if (sub_18C9176A0((char **)v78, v34, 10, &v77)) {
        goto LABEL_73;
      }
    }
    int v69 = v11;
    int v70 = a4;
    uint64_t v68 = v14;
    int v71 = v15;
    long long v72 = a5;
    int v27 = (v10 >> 1) & 1;
LABEL_60:
    char v74 = 0;
    unsigned int v28 = 0;
    int v29 = 0;
    int v30 = 0;
    while (1)
    {
      unint64_t v31 = *(unsigned __int8 **)v78;
      int v32 = **(unsigned char **)v78;
      if ((v32 - 48) > 9)
      {
        int v27 = (v30 != 0) & v27;
        if (v32 != 46)
        {
          int v33 = 0;
          goto LABEL_97;
        }
        if (v27 && (v10 & 4) == 0) {
          return a1[2];
        }
        if ((v27 & 1) == 0)
        {
          int v67 = *((unsigned __int16 *)a1 + 20);
          if (sub_18C9176A0((char **)v78, v67, 10, &v77))
          {
            int v33 = 0;
            if (v30 || v73 == 48) {
              goto LABEL_186;
            }
            return a1[2];
          }
          if (v30 || **(unsigned char **)v78 != 48)
          {
            int v33 = 0;
            goto LABEL_141;
          }
          int v33 = 0;
          do
          {
            if (sub_18C9176A0((char **)v78, v67, 10, &v77))
            {
              *long long v72 = *(_DWORD *)v78 - a2;
              BOOL v35 = v71 == 0;
              goto LABEL_74;
            }
            --v33;
          }
          while (**(unsigned char **)v78 == 48);
LABEL_141:
          while (1)
          {
            unint64_t v31 = *(unsigned __int8 **)v78;
            int v32 = **(unsigned char **)v78;
            if ((v32 - 48) > 9) {
              break;
            }
            if (v30 > 771)
            {
              v74 |= v32 != 48;
            }
            else
            {
              v79[v28++] = v32;
              ++v30;
              --v33;
            }
            if (sub_18C9176A0((char **)v78, v67, 10, &v77)) {
              goto LABEL_186;
            }
          }
LABEL_97:
          if (v73 != 48 && !v33 && !v30) {
            return a1[2];
          }
          if ((v32 | 0x20) != 0x65) {
            goto LABEL_164;
          }
          if (v27 && (v10 & 4) == 0) {
            return a1[2];
          }
          if ((v27 & 1) == 0)
          {
            int v41 = (char *)(v31 + 1);
            *(void *)unsigned int v78 = v31 + 1;
            if (v31 + 1 == (unsigned __int8 *)v6) {
              goto LABEL_150;
            }
            int v42 = *v41;
            if (v42 == 45 || v42 == 43)
            {
              int v41 = (char *)(v31 + 2);
              *(void *)unsigned int v78 = v31 + 2;
              if (v31 + 2 == (unsigned __int8 *)v6) {
                goto LABEL_150;
              }
            }
            else
            {
              int v42 = 43;
            }
            if (v41 == v6 || (unsigned int v51 = *v41, v51 - 58 < 0xFFFFFFF6))
            {
LABEL_150:
              if ((v10 & 4) == 0) {
                return a1[2];
              }
              *(void *)unsigned int v78 = v31;
LABEL_186:
              int v60 = v33 + v29;
              if (v74)
              {
                v79[v28++] = 49;
                --v60;
              }
              v79[v28] = 0;
              uint64_t v61 = v28;
              while ((int)v61 >= 1)
              {
                int v62 = v61 - 1;
                int v63 = *((unsigned __int8 *)&v78[4] + v61-- + 1);
                if (v63 != 48)
                {
                  int v64 = v62 + 1;
                  goto LABEL_193;
                }
              }
              int v64 = 0;
LABEL_193:
              uint64_t v65 = v28 - v64 + v60;
              if (v70)
              {
                double result = sub_18C918B50((uint64_t)v79, v64, v65);
              }
              else
              {
                sub_18C919160((uint64_t)v79, v64, v65);
                double result = v66;
              }
              *long long v72 = *(_DWORD *)v78 - a2;
              double v45 = -result;
              BOOL v43 = v71 == 0;
LABEL_197:
              if (!v43) {
                return v45;
              }
              return result;
            }
            int v52 = 0;
            unint64_t v31 = &a2[v68];
            unsigned int v53 = v41 + 1;
            while (1)
            {
              if (v52 <= 107374181 || (int v54 = 0x3FFFFFFF, v52 == 107374182) && v51 <= 0x33) {
                int v54 = v51 + 10 * v52 - 48;
              }
              if (v53 == v6) {
                break;
              }
              unsigned int v55 = *v53++;
              unsigned int v51 = v55;
              int v52 = v54;
              if (v55 - 48 >= 0xA)
              {
                unint64_t v31 = (unsigned __int8 *)(v53 - 1);
                break;
              }
            }
            *(void *)unsigned int v78 = v31;
            if (v42 == 45) {
              int v56 = -v54;
            }
            else {
              int v56 = v54;
            }
            v33 += v56;
LABEL_164:
            if (((v69 | ((v10 & 4) >> 2)) & 1) == 0)
            {
              if (v31 != (unsigned __int8 *)v6) {
                return a1[2];
              }
              goto LABEL_185;
            }
            if ((v10 & 4) != 0 || v31 == (unsigned __int8 *)v6)
            {
              double v57 = (char *)v31;
            }
            else
            {
              double v57 = (char *)&a2[v68];
              do
              {
                uint64_t v58 = 0;
                while (byte_18CA9210C[v58] != *v31)
                {
                  if (++v58 == 6) {
                    return a1[2];
                  }
                }
                ++v31;
              }
              while (v31 != (unsigned __int8 *)v6);
              *(void *)unsigned int v78 = &a2[v68];
            }
            if ((v10 & 0x10) == 0 || v57 == v6)
            {
LABEL_69:
              if (!v27) {
                goto LABEL_186;
              }
            }
            else
            {
              do
              {
                uint64_t v59 = 0;
                while (byte_18CA9210C[v59] != *v57)
                {
                  if (++v59 == 6)
                  {
                    *(void *)unsigned int v78 = v57;
                    goto LABEL_185;
                  }
                }
                ++v57;
              }
              while (v57 != v6);
              *(void *)unsigned int v78 = &a2[v68];
LABEL_185:
              if ((v27 & 1) == 0) {
                goto LABEL_186;
              }
            }
            LODWORD(v31) = *(_DWORD *)v78;
          }
        }
        unint64_t v75 = v79;
        double result = sub_18C917E98(&v75, &v79[v28], v71, *((unsigned __int16 *)a1 + 20), (v10 & 4) != 0, v70, &v76, a1[2]);
        *long long v72 = v31 - a2;
        return result;
      }
      if (v30 > 771)
      {
        ++v29;
        v74 |= v32 != 48;
        if (v27)
        {
LABEL_66:
          int v27 = (char)*v31 < 56;
          goto LABEL_67;
        }
      }
      else
      {
        v79[v28++] = v32;
        ++v30;
        if (v27) {
          goto LABEL_66;
        }
      }
      int v27 = 0;
LABEL_67:
      if (sub_18C9176A0((char **)v78, *((unsigned __int16 *)a1 + 20), 10, &v77))
      {
        int v33 = 0;
        goto LABEL_69;
      }
    }
  }
  char v37 = (char *)++*(void *)v78;
  if ((char *)(v36 + 1) == v6) {
    return a1[2];
  }
  int v38 = (v10 >> 2) & 1;
  if ((v10 & 0x80) != 0
    && (v39 = sub_18C917774((char *)(v36 + 1), v6, v34, (v10 & 4) != 0), int v38 = (v10 >> 2) & 1, (v39 & 1) != 0))
  {
    int v40 = 1;
  }
  else
  {
    int v46 = *v37;
    if ((v46 - 48) >= 0xA || v46 >= 64)
    {
      unsigned int v48 = v46 - 65;
      if (v48 >= 0x26 || ((0x3F0000003FuLL >> v48) & 1) == 0) {
        return a1[2];
      }
    }
    int v40 = 0;
  }
  v79[0] = 0;
  double result = sub_18C917A18((char **)v78, v6, v15, v34, v40, v38, a4, v79, a1[2]);
  if (!v79[0])
  {
    uint64_t v49 = *(char **)v78;
    if ((v10 & 0x10) != 0 && *(char **)v78 != v6)
    {
      do
      {
        uint64_t v50 = 0;
        while (byte_18CA9210C[v50] != *v49)
        {
          if (++v50 == 6) {
            goto LABEL_133;
          }
        }
        ++v49;
      }
      while (v49 != v6);
      LODWORD(v49) = a2 + v14;
    }
LABEL_133:
    *a5 = v49 - a2;
  }
  return result;
}

double sub_18C916DC8(double *a1, unsigned __int16 *a2, int a3, _DWORD *a4)
{
  return sub_18C916DD4(a1, a2, a3, 1, a4);
}

double sub_18C916DD4(double *a1, unsigned __int16 *a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v6 = &a2[a3];
  int v64 = v6;
  *(void *)uint64_t v65 = a2;
  *a5 = 0;
  if (!a3) {
    return a1[1];
  }
  unsigned int v10 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x18) != 0)
  {
    int v11 = a2;
    while (1)
    {
      unsigned int v12 = *v11;
      if (v12 >= 0x80) {
        break;
      }
      uint64_t v13 = 0;
      while (byte_18CA9210C[v13] != v12)
      {
        if (++v13 == 6) {
          goto LABEL_16;
        }
      }
LABEL_13:
      if (++v11 == v6)
      {
        *a5 = a3;
        return a1[1];
      }
    }
    for (uint64_t i = 0; i != 20; ++i)
    {
      if ((unsigned __int16)word_18CA92112[i] == v12) {
        goto LABEL_13;
      }
    }
LABEL_16:
    *(void *)uint64_t v65 = v11;
    if ((v10 & 8) == 0 && v11 != a2) {
      return a1[2];
    }
  }
  else
  {
    unsigned int v12 = *a2;
    int v11 = a2;
  }
  if (v12 == 45 || v12 == 43)
  {
    BOOL v16 = v12 == 45;
    if (v11 + 1 == v6) {
      return a1[2];
    }
    uint64_t v17 = 1;
    while (1)
    {
      unsigned int v12 = v11[v17];
      if (v12 >= 0x80) {
        break;
      }
      uint64_t v18 = 0;
      while (byte_18CA9210C[v18] != v12)
      {
        if (++v18 == 6) {
          goto LABEL_35;
        }
      }
LABEL_33:
      if (&v11[++v17] == v6) {
        return a1[2];
      }
    }
    for (uint64_t j = 0; j != 20; ++j)
    {
      if ((unsigned __int16)word_18CA92112[j] == v12) {
        goto LABEL_33;
      }
    }
LABEL_35:
    if ((v10 & 0x20) == 0 && v17 != 1) {
      return a1[2];
    }
    *(void *)uint64_t v65 = &v11[v17];
  }
  else
  {
    BOOL v16 = 0;
  }
  int v20 = (unsigned __int8 *)*((void *)a1 + 3);
  if (v20)
  {
    if ((v10 & 0x40) == 0)
    {
      if (*v20 == v12)
      {
        if ((sub_18C918328((uint64_t *)v65, (unsigned __int8 *)v6, (uint64_t)v20, 0) & 1) == 0) {
          return a1[2];
        }
        if ((v10 & 0x14) != 0)
        {
          if ((v10 & 4) != 0)
          {
LABEL_110:
            *a5 = (*(void *)v65 - (void)a2) >> 1;
            BOOL v41 = !v16;
            double v42 = INFINITY;
            unint64_t v43 = 0xFFF0000000000000;
LABEL_121:
            double v46 = *(double *)&v43;
            goto LABEL_122;
          }
        }
        else if (*(unsigned __int16 **)v65 != v6)
        {
          return a1[2];
        }
        if (sub_18C9182A0((unsigned __int16 **)v65, v6)) {
          return a1[2];
        }
        goto LABEL_110;
      }
      int v21 = (unsigned __int8 *)*((void *)a1 + 4);
      if (!v21) {
        goto LABEL_55;
      }
      goto LABEL_50;
    }
LABEL_48:
    abort();
  }
  int v21 = (unsigned __int8 *)*((void *)a1 + 4);
  if (!v21) {
    goto LABEL_55;
  }
  if ((v10 & 0x40) != 0) {
    goto LABEL_48;
  }
LABEL_50:
  if (*v21 == v12)
  {
    if ((sub_18C918328((uint64_t *)v65, (unsigned __int8 *)v6, (uint64_t)v21, 0) & 1) == 0) {
      return a1[2];
    }
    if ((v10 & 0x14) != 0)
    {
      if ((v10 & 4) != 0)
      {
LABEL_120:
        *a5 = (*(void *)v65 - (void)a2) >> 1;
        BOOL v41 = !v16;
        double v42 = NAN;
        unint64_t v43 = 0xFFF8000000000000;
        goto LABEL_121;
      }
    }
    else if (*(unsigned __int16 **)v65 != v6)
    {
      return a1[2];
    }
    if (sub_18C9182A0((unsigned __int16 **)v65, v6)) {
      return a1[2];
    }
    goto LABEL_120;
  }
LABEL_55:
  if (v12 != 48)
  {
    int v58 = a4;
    int v59 = v16;
    int v60 = a5;
    LOBYTE(v22) = 0;
LABEL_57:
    char v61 = 0;
    unsigned int v23 = 0;
    int v24 = 0;
    int v25 = 0;
    while (1)
    {
      uint64_t v26 = *(unsigned __int16 **)v65;
      int v27 = (unsigned __int16)**(_WORD **)v65;
      if ((v27 - 48) > 9)
      {
        int v22 = (v25 != 0) & v22;
        if (v27 != 46)
        {
          int v28 = 0;
          goto LABEL_96;
        }
        if (v22 && (v10 & 4) == 0) {
          return a1[2];
        }
        if ((v22 & 1) == 0)
        {
          int v57 = *((unsigned __int16 *)a1 + 20);
          if (sub_18C9183A8((unsigned __int16 **)v65, v57, 10, &v64))
          {
            int v28 = 0;
            if (v25 || v12 == 48) {
              goto LABEL_67;
            }
            return a1[2];
          }
          if (v25 || **(_WORD **)v65 != 48)
          {
            int v28 = 0;
            goto LABEL_144;
          }
          int v28 = 0;
          do
          {
            if (sub_18C9183A8((unsigned __int16 **)v65, v57, 10, &v64))
            {
              *int v60 = (*(void *)v65 - (void)a2) >> 1;
              BOOL v35 = v59 == 0;
              goto LABEL_75;
            }
            --v28;
          }
          while (**(_WORD **)v65 == 48);
LABEL_144:
          while (1)
          {
            uint64_t v26 = *(unsigned __int16 **)v65;
            int v27 = (unsigned __int16)**(_WORD **)v65;
            if ((v27 - 48) > 9) {
              break;
            }
            if (v25 > 771)
            {
              v61 |= v27 != 48;
            }
            else
            {
              v66[v23++] = v27;
              ++v25;
              --v28;
            }
            if (sub_18C9183A8((unsigned __int16 **)v65, v57, 10, &v64)) {
              goto LABEL_67;
            }
          }
LABEL_96:
          if (v12 != 48 && !v28 && !v25) {
            return a1[2];
          }
          if ((v27 | 0x20) != 0x65) {
            goto LABEL_169;
          }
          if (v22 && (v10 & 4) == 0) {
            return a1[2];
          }
          if ((v22 & 1) == 0)
          {
            char v39 = v26 + 1;
            if (v26 + 1 == v6) {
              goto LABEL_153;
            }
            int v40 = *v39;
            if (v40 == 45 || v40 == 43)
            {
              char v39 = v26 + 2;
              if (v26 + 2 == v6) {
                goto LABEL_153;
              }
            }
            else
            {
              LOBYTE(v40) = 43;
            }
            if (v39 == v6 || (unsigned int v51 = *v39, v51 - 58 < 0xFFFFFFF6))
            {
LABEL_153:
              if ((v10 & 4) == 0) {
                return a1[2];
              }
              *(void *)uint64_t v65 = v26;
LABEL_67:
              int v29 = v28 + v24;
              if (v61)
              {
                v66[v23++] = 49;
                --v29;
              }
              v66[v23] = 0;
              uint64_t v30 = v23;
              while ((int)v30 >= 1)
              {
                int v31 = v30 - 1;
                int v32 = *((unsigned __int8 *)&v65[4] + v30-- + 1);
                if (v32 != 48)
                {
                  int v33 = v31 + 1;
                  goto LABEL_112;
                }
              }
              int v33 = 0;
LABEL_112:
              uint64_t v44 = v23 - v33 + v29;
              if (v58)
              {
                double v42 = sub_18C918B50((uint64_t)v66, v33, v44);
              }
              else
              {
                sub_18C919160((uint64_t)v66, v33, v44);
                double v42 = v45;
              }
              *int v60 = (*(void *)v65 - (void)a2) >> 1;
              double v46 = -v42;
              BOOL v41 = v59 == 0;
LABEL_122:
              if (v41) {
                return v42;
              }
              else {
                return v46;
              }
            }
            int v52 = 0;
            unsigned int v53 = v39 + 1;
            while (1)
            {
              if (v52 <= 107374181 || (int v54 = 0x3FFFFFFF, v52 == 107374182) && v51 <= 0x33) {
                int v54 = v51 + 10 * v52 - 48;
              }
              if (v53 == v6) {
                break;
              }
              unsigned int v55 = *v53++;
              unsigned int v51 = v55;
              int v52 = v54;
              if (v55 - 48 >= 0xA)
              {
                uint64_t v26 = v53 - 1;
                goto LABEL_165;
              }
            }
            uint64_t v26 = v6;
LABEL_165:
            *(void *)uint64_t v65 = v26;
            if (v40 == 45) {
              int v56 = -v54;
            }
            else {
              int v56 = v54;
            }
            v28 += v56;
LABEL_169:
            if ((v10 & 0x14) != 0)
            {
              if ((v10 & 4) != 0)
              {
LABEL_174:
                if ((v10 & 0x10) != 0)
                {
                  sub_18C9182A0((unsigned __int16 **)v65, v6);
                  if ((v22 & 1) == 0) {
                    goto LABEL_67;
                  }
                }
                else
                {
LABEL_66:
                  if (!v22) {
                    goto LABEL_67;
                  }
                }
                goto LABEL_176;
              }
            }
            else if (v26 != v6)
            {
              return a1[2];
            }
            if (sub_18C9182A0((unsigned __int16 **)v65, v6)) {
              return a1[2];
            }
            goto LABEL_174;
          }
        }
LABEL_176:
        int v62 = v66;
        double v15 = sub_18C917E98(&v62, &v66[v23], v59, *((unsigned __int16 *)a1 + 20), (v10 & 4) != 0, v58, &v63, a1[2]);
        *int v60 = (*(void *)v65 - (void)a2) >> 1;
        return v15;
      }
      if (v25 > 771)
      {
        ++v24;
        v61 |= v27 != 48;
        if (v22)
        {
LABEL_63:
          int v22 = *v26 < 0x38u;
          goto LABEL_64;
        }
      }
      else
      {
        v66[v23++] = v27;
        ++v25;
        if (v22) {
          goto LABEL_63;
        }
      }
      int v22 = 0;
LABEL_64:
      if (sub_18C9183A8((unsigned __int16 **)v65, *((unsigned __int16 *)a1 + 20), 10, &v64))
      {
        int v28 = 0;
        goto LABEL_66;
      }
    }
  }
  int v34 = *((unsigned __int16 *)a1 + 20);
  if (sub_18C9183A8((unsigned __int16 **)v65, v34, 10, &v64))
  {
LABEL_74:
    *a5 = (*(void *)v65 - (void)a2) >> 1;
    BOOL v35 = !v16;
LABEL_75:
    if (v35) {
      return 0.0;
    }
    else {
      return -0.0;
    }
  }
  if ((v10 & 0x81) == 0 || (uint64_t v36 = *(void *)v65, ((unsigned __int16)**(_WORD **)v65 | 0x20) != 0x78))
  {
    while (**(_WORD **)v65 == 48)
    {
      if (sub_18C9183A8((unsigned __int16 **)v65, v34, 10, &v64)) {
        goto LABEL_74;
      }
    }
    int v58 = a4;
    int v59 = v16;
    int v60 = a5;
    int v22 = (v10 >> 1) & 1;
    goto LABEL_57;
  }
  char v37 = (unsigned __int16 *)(*(void *)v65 + 2);
  *(void *)v65 += 2;
  if ((unsigned __int16 *)(v36 + 2) == v6) {
    return a1[2];
  }
  if (v10 & 0x80) != 0 && (sub_18C91847C((unsigned __int16 *)(v36 + 2), v6, v34, (v10 & 4) != 0))
  {
    int v38 = 1;
  }
  else
  {
    unsigned int v48 = *v37;
    if (v48 - 48 >= 0xA || v48 >= 0x40)
    {
      unsigned int v50 = v48 - 65;
      if (v50 >= 0x26 || ((0x3F0000003FuLL >> v50) & 1) == 0) {
        return a1[2];
      }
    }
    int v38 = 0;
  }
  v66[0] = 0;
  double v15 = sub_18C91867C((unsigned __int16 **)v65, v6, v16, *((unsigned __int16 *)a1 + 20), v38, (v10 & 4) != 0, a4, v66, a1[2]);
  if (!v66[0])
  {
    if ((v10 & 0x10) != 0) {
      sub_18C9182A0((unsigned __int16 **)v65, v6);
    }
    *a5 = (*(void *)v65 - (void)a2) >> 1;
  }
  return v15;
}

uint64_t sub_18C917620(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  if (a4)
  {
    int v4 = *(unsigned __int8 *)(a3 + 1);
    uint64_t v5 = *a1 + 1;
    *a1 = v5;
    if (v4)
    {
      if ((unsigned __int8 *)v5 != a2) {
        abort();
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)(*a1 + 1);
    uint64_t v8 = (unsigned char *)(a3 + 1);
    do
    {
      BOOL v9 = *v8 == 0;
      BOOL v6 = *v8 == 0;
      *a1 = (uint64_t)v7;
      BOOL v9 = v9 || v7 == a2;
      if (v9) {
        break;
      }
      int v11 = *v7++;
      int v10 = v11;
      int v12 = *v8++;
    }
    while (v10 == v12);
  }
  return v6;
}

uint64_t sub_18C9176A0(char **a1, int a2, int a3, char **a4)
{
  BOOL v6 = *a1;
  if (!a2)
  {
    *a1 = v6 + 1;
    return v6 + 1 == *a4;
  }
  BOOL v9 = v6 + 1;
  LODWORD(result) = sub_18C9179BC(*v6, a3);
  int v11 = result;
  *a1 = v6 + 1;
  int v12 = *a4;
  if (v6 + 1 == *a4) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = result;
  }
  if (v11) {
    BOOL v13 = v9 == v12;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    uint64_t v14 = v6 + 2;
    if (v14 == v12) {
      return 0;
    }
    if (*v9 == a2 && sub_18C9179BC(*v14, a3))
    {
      *a1 = v14;
      int v12 = *a4;
      BOOL v9 = v14;
    }
    return v9 == v12;
  }
  return result;
}

uint64_t sub_18C917774(char *a1, char *a2, int a3, char a4)
{
  char v7 = 0;
  int v21 = a1;
  int v22 = a2;
  while (1)
  {
    int v8 = *v21;
    if ((v8 - 48) >= 0xA || v8 >= 64)
    {
      if (*v21 - 46 > 0x38) {
        goto LABEL_25;
      }
      if (((1 << (v8 - 46)) & 0x1F8000001F80000) == 0) {
        break;
      }
    }
    char v7 = 1;
    if (sub_18C9176A0(&v21, a3, 16, &v22)) {
      return 0;
    }
  }
  if (*v21 == 46)
  {
    if (sub_18C9176A0(&v21, a3, 16, &v22)) {
      return 0;
    }
    while (1)
    {
      int v8 = *v21;
      BOOL v11 = v8 >= 64 || (v8 - 48) >= 0xA;
      BOOL v12 = !v11;
      if ((v8 - 97) >= 6 && !v12 && (v8 <= 64 || v8 > 0x46)) {
        break;
      }
      char v13 = sub_18C9176A0(&v21, a3, 16, &v22);
      uint64_t result = 0;
      char v7 = 1;
      if (v13) {
        return result;
      }
    }
  }
LABEL_25:
  if (v7 & 1) == 0 || (v8 | 0x20) != 0x70 || (sub_18C9176A0(&v21, a3, 16, &v22)) {
    return 0;
  }
  int v14 = *v21;
  if (v14 != 45 && v14 != 43) {
    goto LABEL_32;
  }
  if (sub_18C9176A0(&v21, a3, 16, &v22)) {
    return 0;
  }
  LOBYTE(v14) = *v21;
LABEL_32:
  if ((char)v14 > 57 || ((char)v14 - 48) > 9) {
    return 0;
  }
  if (sub_18C9176A0(&v21, a3, 16, &v22)) {
    return 1;
  }
  while (1)
  {
    BOOL v16 = v21;
    int v17 = *v21;
    if (v17 > 57 || (v17 - 48) > 9) {
      break;
    }
    char v19 = sub_18C9176A0(&v21, a3, 16, &v22);
    uint64_t result = 1;
    if (v19) {
      return result;
    }
  }
  uint64_t result = 1;
  if (v21 != a2 && (a4 & 1) == 0)
  {
    do
    {
      uint64_t v20 = 0;
      while (byte_18CA9210C[v20] != *v16)
      {
        uint64_t result = 0;
        if (++v20 == 6) {
          return result;
        }
      }
      ++v16;
      uint64_t result = 1;
    }
    while (v16 != a2);
  }
  return result;
}

uint64_t sub_18C9179BC(int a1, int a2)
{
  if ((a1 - 48) <= 9 && a2 + 48 > a1 || a1 >= 97 && a2 >= 11 && a2 + 87 > a1) {
    return 1;
  }
  BOOL v3 = a2 + 55 > a1;
  if (a2 < 11) {
    BOOL v3 = 0;
  }
  return a1 >= 65 && v3;
}

double sub_18C917A18(char **a1, char *a2, int a3, int a4, int a5, char a6, int a7, unsigned char *a8, double a9)
{
  unsigned int v53 = a2;
  *a8 = 1;
  while (1)
  {
    uint64_t v18 = *a1;
    int v19 = **a1;
    if (v19 != 48) {
      break;
    }
    if (sub_18C9176A0(a1, a4, 16, &v53))
    {
      *a8 = 0;
      if (a3) {
        return -0.0;
      }
      else {
        return 0.0;
      }
    }
  }
  char v52 = a6;
  int v20 = 0;
  int64_t v21 = 0;
  char v22 = 0;
  if (a7) {
    char v23 = 53;
  }
  else {
    char v23 = 24;
  }
  while (1)
  {
    unsigned int v24 = (char)v19 - 48;
    if (v24 < 0xA) {
      goto LABEL_15;
    }
    if (((char)v19 - 97) <= 5)
    {
      unsigned int v24 = (char)v19 - 87;
      goto LABEL_15;
    }
    if (((char)v19 - 65) > 5) {
      break;
    }
    unsigned int v24 = (char)v19 - 55;
LABEL_15:
    if (v22) {
      v20 -= 4;
    }
    int64_t v21 = 16 * v21 + v24;
    uint64_t v25 = v21 >> v23;
    if ((v21 >> v23))
    {
      int v50 = a3;
      int v26 = 1;
      if ((int)v25 >= 2)
      {
        do
        {
          ++v26;
          BOOL v31 = v25 > 3;
          LODWORD(v25) = v25 >> 1;
        }
        while (v31);
      }
      unsigned int v51 = a2;
      int v27 = v26 + v20;
      if (sub_18C9176A0(a1, a4, 16, &v53))
      {
        char v28 = 1;
LABEL_43:
        if ((a5 & 1) == 0 && (v52 & 1) == 0)
        {
          for (uint64_t i = *a1; i != v51; *a1 = i)
          {
            uint64_t v34 = 0;
            while (byte_18CA9210C[v34] != *i)
            {
              if (++v34 == 6) {
                return a9;
              }
            }
            ++i;
          }
        }
        int v35 = v21 & ~(-1 << v26);
        int v36 = 1 << (v26 - 1);
        uint64_t v37 = (v21 >> v26) + ((v21 >> v26) & 1u | ((v28 & 1) == 0));
        if (v35 != v36) {
          uint64_t v37 = v21 >> v26;
        }
        if (v35 > v36) {
          uint64_t v38 = (v21 >> v26) + 1;
        }
        else {
          uint64_t v38 = v37;
        }
        int v20 = v27 + (((unint64_t)v38 >> v23) & 1);
        int64_t v21 = v38 >> (((unint64_t)v38 >> v23) & 1);
        a3 = v50;
        goto LABEL_57;
      }
      char v28 = 1;
      while (2)
      {
        int v29 = *a1;
        if (a5)
        {
          int v30 = *v29;
          if (v30 == 46)
          {
            sub_18C9176A0(a1, a4, 16, &v53);
            int v29 = *a1;
            char v22 = 1;
            goto LABEL_31;
          }
        }
        else
        {
LABEL_31:
          int v30 = *v29;
        }
        BOOL v31 = ((char)v30 - 48) < 0xA && (char)v30 < 64;
        if (!v31 && ((v30 - 65) > 0x25 || ((1 << (v30 - 65)) & 0x3F0000003FLL) == 0)) {
          goto LABEL_43;
        }
        v28 &= v30 == 48;
        if ((v22 & 1) == 0) {
          v27 += 4;
        }
        if (sub_18C9176A0(a1, a4, 16, &v53)) {
          goto LABEL_43;
        }
        continue;
      }
    }
    if (sub_18C9176A0(a1, a4, 16, &v53)) {
      goto LABEL_57;
    }
LABEL_19:
    uint64_t v18 = *a1;
    LOBYTE(v19) = **a1;
  }
  if (!a5) {
    goto LABEL_91;
  }
  if ((char)v19 == 46)
  {
    sub_18C9176A0(a1, a4, 16, &v53);
    char v22 = 1;
    goto LABEL_19;
  }
  if (v19 != 80 && v19 != 112)
  {
LABEL_91:
    if (v18 != a2 && (v52 & 1) == 0)
    {
      do
      {
        uint64_t v49 = 0;
        while (byte_18CA9210C[v49] != *v18)
        {
          if (++v49 == 6) {
            return a9;
          }
        }
        *a1 = ++v18;
      }
      while (v18 != a2);
    }
LABEL_57:
    *a8 = 0;
    if (a5) {
      goto LABEL_62;
    }
    goto LABEL_78;
  }
  *a8 = 0;
LABEL_62:
  sub_18C9176A0(a1, a4, 16, &v53);
  int v39 = 0;
  int v40 = **a1;
  if (v40 == 43)
  {
LABEL_65:
    sub_18C9176A0(a1, a4, 16, &v53);
  }
  else if (v40 == 45)
  {
    int v39 = 1;
    goto LABEL_65;
  }
  int v41 = 0;
  do
  {
    int v42 = **a1;
    if ((v42 - 48) > 9) {
      break;
    }
    if (v41 >= 0) {
      unsigned int v43 = v41;
    }
    else {
      unsigned int v43 = -v41;
    }
    int v44 = v42 + 10 * v41 - 48;
    if (v43 < 0x17BB1) {
      int v41 = v44;
    }
  }
  while (!sub_18C9176A0(a1, a4, 16, &v53));
  if (v39) {
    int v45 = -v41;
  }
  else {
    int v45 = v41;
  }
  v20 += v45;
LABEL_78:
  if (v20) {
    BOOL v46 = v21 == 0;
  }
  else {
    BOOL v46 = 1;
  }
  if (v46)
  {
    if (a3)
    {
      if (!v21) {
        return -0.0;
      }
      return (double)-v21;
    }
    return (double)v21;
  }
  else
  {
    double v47 = COERCE_DOUBLE(sub_18C918164(v21, v20));
    if (a3) {
      return -v47;
    }
    else {
      return v47;
    }
  }
}

double sub_18C917E98(char **a1, char *a2, int a3, int a4, char a5, int a6, unsigned char *a7, double a8)
{
  int v39 = a2;
  *a7 = 1;
  while (**a1 == 48)
  {
    if (sub_18C9181FC(a1, a4, &v39))
    {
      *a7 = 0;
      if (a3) {
        return -0.0;
      }
      else {
        return 0.0;
      }
    }
  }
  int64_t v16 = 0;
  if (a6) {
    char v17 = 53;
  }
  else {
    char v17 = 24;
  }
  while (1)
  {
    uint64_t v18 = *a1;
    int v19 = **a1;
    if (v19 > 55 || (v19 - 48) >= 0xA)
    {
      if (v18 != a2 && (a5 & 1) == 0)
      {
        do
        {
          uint64_t v22 = 0;
          while (byte_18CA9210C[v22] != *v18)
          {
            if (++v22 == 6) {
              return a8;
            }
          }
          *a1 = ++v18;
        }
        while (v18 != a2);
      }
LABEL_24:
      *a7 = 0;
      BOOL v23 = v16 == 0;
      goto LABEL_25;
    }
    int64_t v16 = **a1 + 8 * v16 - 48;
    uint64_t v21 = v16 >> v17;
    if ((v16 >> v17)) {
      break;
    }
    if (sub_18C9181FC(a1, a4, &v39)) {
      goto LABEL_24;
    }
  }
  int v24 = 1;
  if ((int)v21 >= 2)
  {
    do
    {
      ++v24;
      BOOL v28 = v21 > 3;
      LODWORD(v21) = v21 >> 1;
    }
    while (v28);
  }
  int v38 = a3;
  char v25 = 1;
  for (int i = v24; !sub_18C9181FC(a1, a4, &v39); i += 3)
  {
    int v27 = **a1;
    BOOL v28 = v27 > 55 || (v27 - 48) > 9;
    if (v28) {
      break;
    }
    v25 &= v27 == 48;
  }
  if ((a5 & 1) == 0)
  {
    for (uint64_t j = *a1; j != a2; *a1 = j)
    {
      uint64_t v30 = 0;
      while (byte_18CA9210C[v30] != *j)
      {
        if (++v30 == 6) {
          return a8;
        }
      }
      ++j;
    }
  }
  int v31 = v16 & ~(-1 << v24);
  int v32 = 1 << (v24 - 1);
  uint64_t v33 = (v16 >> v24) + ((v16 >> v24) & 1u | ((v25 & 1) == 0));
  if (v31 != v32) {
    uint64_t v33 = v16 >> v24;
  }
  if (v31 > v32) {
    uint64_t v34 = (v16 >> v24) + 1;
  }
  else {
    uint64_t v34 = v33;
  }
  uint64_t v35 = ((unint64_t)v34 >> v17) & 1;
  int64_t v16 = v34 >> (((unint64_t)v34 >> v17) & 1);
  *a7 = 0;
  BOOL v23 = v16 == 0;
  a3 = v38;
  if (i + v35 && v16)
  {
    double v36 = COERCE_DOUBLE(sub_18C918164(v16, i + (int)v35));
    if (v38) {
      return -v36;
    }
    else {
      return v36;
    }
  }
LABEL_25:
  if (a3)
  {
    if (v23) {
      return -0.0;
    }
    return (double)-v16;
  }
  return (double)v16;
}

unint64_t sub_18C918164(unint64_t a1, int a2)
{
  if (a1 >> 53)
  {
    do
    {
      unint64_t v2 = a1 >> 1;
      ++a2;
      unint64_t v3 = a1 >> 54;
      a1 >>= 1;
    }
    while (v3);
  }
  else
  {
    unint64_t v2 = a1;
  }
  if (a2 > 971) {
    return 0x7FF0000000000000;
  }
  if (a2 < -1074) {
    return 0;
  }
  BOOL v5 = (v2 & 0x10000000000000) == 0;
  if (a2 != -1074 && (v2 & 0x10000000000000) == 0)
  {
    do
    {
      int v6 = a2;
      uint64_t v8 = v2 & 0x8000000000000;
      BOOL v7 = (v2 & 0x8000000000000) == 0;
      v2 *= 2;
      --a2;
      BOOL v5 = v7;
    }
    while (v6 >= -1072 && !v8);
  }
  if (a2 == -1074 && v5) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = (unint64_t)(a2 + 1075) << 52;
  }
  return v9 & 0xFFF0000000000000 | v2 & 0xFFFFFFFFFFFFFLL;
}

BOOL sub_18C9181FC(char **a1, int a2, char **a3)
{
  unint64_t v3 = *a1;
  if (!a2)
  {
    *a1 = v3 + 1;
    return v3 + 1 == *a3;
  }
  BOOL v5 = v3 + 1;
  int v4 = *v3;
  BOOL v7 = v4 > 55 || (v4 - 58) < 0xFFFFFFF6;
  *a1 = v5;
  uint64_t v8 = *a3;
  LODWORD(v9) = !v7;
  if (v5 == *a3) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v9;
  }
  if (!v7 && v5 != v8)
  {
    int v10 = v3 + 2;
    if (v3 + 2 == v8) {
      return 0;
    }
    if (*v5 == a2)
    {
      int v11 = *v10;
      if (v11 <= 55 && (v11 - 48) <= 9)
      {
        *a1 = v10;
        uint64_t v8 = *a3;
        BOOL v5 = v10;
      }
    }
    return v5 == v8;
  }
  return v9;
}

uint64_t sub_18C9182A0(unsigned __int16 **a1, unsigned __int16 *a2)
{
  for (int i = *a1; i != a2; *a1 = i)
  {
    unsigned int v3 = *i;
    if (v3 >= 0x80)
    {
      uint64_t v5 = 0;
      while ((unsigned __int16)word_18CA92112[v5] != v3)
      {
        if (++v5 == 20) {
          return 1;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      while (byte_18CA9210C[v4] != v3)
      {
        if (++v4 == 6) {
          return 1;
        }
      }
    }
    ++i;
  }
  return 0;
}

uint64_t sub_18C918328(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  if (a4)
  {
    int v4 = *(unsigned __int8 *)(a3 + 1);
    uint64_t v5 = *a1 + 2;
    *a1 = v5;
    if (v4)
    {
      if ((unsigned __int8 *)v5 != a2) {
        abort();
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    BOOL v7 = (unsigned __int8 *)(*a1 + 2);
    uint64_t v8 = (unsigned char *)(a3 + 1);
    do
    {
      BOOL v9 = *v8 == 0;
      BOOL v6 = *v8 == 0;
      *a1 = (uint64_t)v7;
      BOOL v9 = v9 || v7 == a2;
      if (v9) {
        break;
      }
      int v11 = *v7;
      v7 += 2;
      int v10 = v11;
      int v12 = *v8++;
    }
    while (v12 == v10);
  }
  return v6;
}

uint64_t sub_18C9183A8(unsigned __int16 **a1, int a2, int a3, unsigned __int16 **a4)
{
  BOOL v6 = *a1;
  if (!a2)
  {
    *a1 = v6 + 1;
    return v6 + 1 == *a4;
  }
  BOOL v9 = v6 + 1;
  LODWORD(result) = sub_18C9179BC(*v6, a3);
  int v11 = result;
  *a1 = v6 + 1;
  int v12 = *a4;
  if (v6 + 1 == *a4) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = result;
  }
  if (v11) {
    BOOL v13 = v9 == v12;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    int v14 = v6 + 2;
    if (v14 == v12) {
      return 0;
    }
    if (*v9 == a2 && sub_18C9179BC(*v14, a3))
    {
      *a1 = v14;
      int v12 = *a4;
      BOOL v9 = v14;
    }
    return v9 == v12;
  }
  return result;
}

uint64_t sub_18C91847C(unsigned __int16 *a1, unsigned __int16 *a2, int a3, char a4)
{
  char v7 = 0;
  int v19 = a1;
  int v20 = a2;
  while (1)
  {
    unsigned int v8 = *v19;
    if (v8 - 48 >= 0xA || v8 >= 0x40)
    {
      if (v8 - 46 > 0x38) {
        goto LABEL_25;
      }
      if (((1 << (v8 - 46)) & 0x1F8000001F80000) == 0) {
        break;
      }
    }
    char v7 = 1;
    if (sub_18C9183A8(&v19, a3, 16, &v20)) {
      return 0;
    }
  }
  if (v8 == 46)
  {
    if (sub_18C9183A8(&v19, a3, 16, &v20)) {
      return 0;
    }
    while (1)
    {
      unsigned int v8 = *v19;
      BOOL v11 = v8 >= 0x40 || v8 - 48 >= 0xA;
      BOOL v12 = !v11;
      if (v8 - 97 >= 6 && !v12 && (v8 <= 0x40 || v8 > 0x46)) {
        break;
      }
      char v13 = sub_18C9183A8(&v19, a3, 16, &v20);
      uint64_t result = 0;
      char v7 = 1;
      if (v13) {
        return result;
      }
    }
  }
LABEL_25:
  if (v7 & 1) == 0 || (v8 | 0x20) != 0x70 || (sub_18C9183A8(&v19, a3, 16, &v20)) {
    return 0;
  }
  unsigned int v14 = *v19;
  if (v14 != 45 && v14 != 43) {
    goto LABEL_32;
  }
  if (sub_18C9183A8(&v19, a3, 16, &v20)) {
    return 0;
  }
  unsigned int v14 = *v19;
LABEL_32:
  if (v14 > 0x39 || v14 - 48 > 9) {
    return 0;
  }
  if (sub_18C9183A8(&v19, a3, 16, &v20)) {
    return 1;
  }
  do
  {
    unsigned int v16 = *v19;
    if (v16 > 0x39 || v16 - 48 > 9) {
      break;
    }
    char v18 = sub_18C9183A8(&v19, a3, 16, &v20);
    uint64_t result = 1;
  }
  while ((v18 & 1) == 0);
  if (a4) {
    return 1;
  }
  else {
    return sub_18C9182A0(&v19, a2) ^ 1;
  }
}

double sub_18C91867C(unsigned __int16 **a1, unsigned __int16 *a2, int a3, int a4, int a5, char a6, int a7, unsigned char *a8, double a9)
{
  int v58 = a2;
  *a8 = 1;
  while (1)
  {
    char v18 = *a1;
    int v19 = **a1;
    if (v19 != 48) {
      break;
    }
    if (sub_18C9183A8(a1, a4, 16, &v58))
    {
      *a8 = 0;
      if (a3) {
        return -0.0;
      }
      else {
        return 0.0;
      }
    }
  }
  char v57 = a6;
  int v20 = 0;
  int64_t v21 = 0;
  char v22 = 0;
  if (a7) {
    char v23 = 53;
  }
  else {
    char v23 = 24;
  }
  while (1)
  {
    unsigned int v24 = v19 - 48;
    if ((v19 - 48) < 0xA) {
      goto LABEL_15;
    }
    if ((v19 - 97) <= 5)
    {
      unsigned int v24 = v19 - 87;
      goto LABEL_15;
    }
    if ((v19 - 65) > 5) {
      break;
    }
    unsigned int v24 = v19 - 55;
LABEL_15:
    if (v22) {
      v20 -= 4;
    }
    int64_t v21 = 16 * v21 + v24;
    uint64_t v25 = v21 >> v23;
    if ((v21 >> v23))
    {
      int v55 = a3;
      int v26 = 1;
      if ((int)v25 >= 2)
      {
        do
        {
          ++v26;
          BOOL v27 = v25 > 3;
          LODWORD(v25) = v25 >> 1;
        }
        while (v27);
      }
      int v56 = a2;
      int v28 = v26 + v20;
      if (sub_18C9183A8(a1, a4, 16, &v58))
      {
        char v29 = 1;
LABEL_44:
        if ((a5 & 1) == 0 && (v57 & 1) == 0)
        {
          for (int i = *a1; i != v56; *a1 = i)
          {
            unsigned int v35 = *i;
            if (v35 >= 0x80)
            {
              uint64_t v37 = 0;
              while ((unsigned __int16)word_18CA92112[v37] != v35)
              {
                if (++v37 == 20) {
                  return a9;
                }
              }
            }
            else
            {
              uint64_t v36 = 0;
              while (byte_18CA9210C[v36] != v35)
              {
                if (++v36 == 6) {
                  return a9;
                }
              }
            }
            ++i;
          }
        }
        int v38 = v21 & ~(-1 << v26);
        int v39 = 1 << (v26 - 1);
        uint64_t v40 = (v21 >> v26) + ((v21 >> v26) & 1u | ((v29 & 1) == 0));
        if (v38 != v39) {
          uint64_t v40 = v21 >> v26;
        }
        if (v38 > v39) {
          uint64_t v41 = (v21 >> v26) + 1;
        }
        else {
          uint64_t v41 = v40;
        }
        int v20 = v28 + (((unint64_t)v41 >> v23) & 1);
        int64_t v21 = v41 >> (((unint64_t)v41 >> v23) & 1);
        a3 = v55;
        goto LABEL_63;
      }
      char v29 = 1;
      while (2)
      {
        uint64_t v30 = *a1;
        if (a5)
        {
          unsigned int v31 = *v30;
          if (v31 == 46)
          {
            sub_18C9183A8(a1, a4, 16, &v58);
            uint64_t v30 = *a1;
            char v22 = 1;
            goto LABEL_31;
          }
        }
        else
        {
LABEL_31:
          unsigned int v31 = *v30;
        }
        if ((v31 - 48 >= 0xA || v31 >= 0x40)
          && (v31 - 65 > 0x25 || ((1 << (v31 - 65)) & 0x3F0000003FLL) == 0))
        {
          goto LABEL_44;
        }
        v29 &= v31 == 48;
        if ((v22 & 1) == 0) {
          v28 += 4;
        }
        if (sub_18C9183A8(a1, a4, 16, &v58)) {
          goto LABEL_44;
        }
        continue;
      }
    }
    if (sub_18C9183A8(a1, a4, 16, &v58)) {
      goto LABEL_63;
    }
LABEL_19:
    char v18 = *a1;
    int v19 = **a1;
  }
  if (!a5) {
    goto LABEL_97;
  }
  if (v19 == 46)
  {
    sub_18C9183A8(a1, a4, 16, &v58);
    char v22 = 1;
    goto LABEL_19;
  }
  if (v19 != 80 && v19 != 112)
  {
LABEL_97:
    if (v18 != a2 && (v57 & 1) == 0)
    {
      do
      {
        unsigned int v52 = *v18;
        if (v52 >= 0x80)
        {
          uint64_t v54 = 0;
          while ((unsigned __int16)word_18CA92112[v54] != v52)
          {
            if (++v54 == 20) {
              return a9;
            }
          }
        }
        else
        {
          uint64_t v53 = 0;
          while (byte_18CA9210C[v53] != v52)
          {
            if (++v53 == 6) {
              return a9;
            }
          }
        }
        *a1 = ++v18;
      }
      while (v18 != a2);
    }
LABEL_63:
    *a8 = 0;
    if (a5) {
      goto LABEL_68;
    }
    goto LABEL_84;
  }
  *a8 = 0;
LABEL_68:
  sub_18C9183A8(a1, a4, 16, &v58);
  int v42 = 0;
  int v43 = **a1;
  if (v43 == 43)
  {
LABEL_71:
    sub_18C9183A8(a1, a4, 16, &v58);
  }
  else if (v43 == 45)
  {
    int v42 = 1;
    goto LABEL_71;
  }
  int v44 = 0;
  do
  {
    int v45 = **a1;
    if ((v45 - 48) > 9) {
      break;
    }
    if (v44 >= 0) {
      unsigned int v46 = v44;
    }
    else {
      unsigned int v46 = -v44;
    }
    int v47 = v45 + 10 * v44 - 48;
    if (v46 < 0x17BB1) {
      int v44 = v47;
    }
  }
  while (!sub_18C9183A8(a1, a4, 16, &v58));
  if (v42) {
    int v48 = -v44;
  }
  else {
    int v48 = v44;
  }
  v20 += v48;
LABEL_84:
  if (v20) {
    BOOL v49 = v21 == 0;
  }
  else {
    BOOL v49 = 1;
  }
  if (v49)
  {
    if (a3)
    {
      if (!v21) {
        return -0.0;
      }
      return (double)-v21;
    }
    return (double)v21;
  }
  else
  {
    double v50 = COERCE_DOUBLE(sub_18C918164(v21, v20));
    if (a3) {
      return -v50;
    }
    else {
      return v50;
    }
  }
}

double sub_18C918B50(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = a3;
  double v14 = 0.0;
  BOOL v6 = sub_18C918C28(a1, a2, a3, &v14);
  double v7 = v14;
  if (!v6)
  {
    uint64_t v8 = 2 * (*(void *)&v14 & 0xFFFFFFFFFFFFFLL);
    if ((*(void *)&v14 & 0x7FF0000000000000) != 0)
    {
      uint64_t v8 = (2 * (*(void *)&v14 & 0xFFFFFFFFFFFFFLL)) | 0x20000000000000;
      int v9 = ((*(void *)&v14 >> 52) & 0x7FF) - 1076;
    }
    else
    {
      int v9 = -1075;
    }
    int v10 = sub_18C91909C(a1, a2, v3, v8 | 1, v9);
    if (v10 & 0x80000000) == 0 && (v10 || (LOBYTE(v7)))
    {
      *(void *)&double v11 = *(void *)&v7 + 1;
      *(void *)&double v12 = *(void *)&v7 - 1;
      if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        double v12 = 0.0;
      }
      if (v7 < 0.0) {
        double v11 = v12;
      }
      if (v7 == INFINITY) {
        return INFINITY;
      }
      else {
        return v11;
      }
    }
  }
  return v7;
}

BOOL sub_18C918C28(uint64_t a1, int a2, uint64_t a3, double *a4)
{
  if (!a2) {
    goto LABEL_42;
  }
  uint64_t v6 = a3;
  int v7 = a2 + a3;
  if (a2 + (int)a3 >= 310)
  {
    *a4 = INFINITY;
    return 1;
  }
  if (v7 <= -324) {
    goto LABEL_42;
  }
  if (a2 >= 16) {
    goto LABEL_28;
  }
  if (a3 >= 0xFFFFFFEA)
  {
    if (a2 < 1)
    {
      double v10 = 0.0;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        unint64_t v9 = *(char *)(a1 + v8) + 10 * v9 - 48;
        if (v8 + 1 >= a2) {
          break;
        }
        ++v8;
      }
      while (v9 < 0x1999999999999999);
      double v10 = (double)v9;
    }
    double v18 = v10 / dbl_18CA92150[-(int)a3];
    goto LABEL_81;
  }
  if (a3 <= 0x16)
  {
    if (a2 < 1)
    {
      double v13 = 0.0;
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        unint64_t v12 = *(char *)(a1 + v11) + 10 * v12 - 48;
        if (v11 + 1 >= a2) {
          break;
        }
        ++v11;
      }
      while (v12 < 0x1999999999999999);
      double v13 = (double)v12;
    }
    double v46 = dbl_18CA92150[a3];
LABEL_80:
    double v18 = v13 * v46;
LABEL_81:
    *a4 = v18;
    return 1;
  }
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v14 = 15 - a2;
    if ((int)a3 - (int)v14 <= 22)
    {
      if (a2 < 1)
      {
        double v17 = 0.0;
      }
      else
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        do
        {
          unint64_t v16 = *(char *)(a1 + v15) + 10 * v16 - 48;
          if (v15 + 1 >= a2) {
            break;
          }
          ++v15;
        }
        while (v16 < 0x1999999999999999);
        double v17 = (double)v16;
      }
      double v13 = v17 * dbl_18CA92150[v14];
      double v46 = dbl_18CA92150[(int)a3 - (int)v14];
      goto LABEL_80;
    }
  }
  if (a2 < 1)
  {
    LODWORD(v19) = 0;
    unint64_t v20 = 0;
  }
  else
  {
LABEL_28:
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(char *)(a1 + v19++);
      unint64_t v20 = v21 + 10 * v20 - 48;
    }
    while (v19 < a2 && v20 < 0x1999999999999999);
  }
  if (v19 == a2)
  {
    uint64_t v22 = 0;
  }
  else
  {
    if (*(char *)(a1 + (int)v19) > 52) {
      ++v20;
    }
    uint64_t v6 = (v7 - v19);
    uint64_t v22 = 4;
  }
  int v23 = 0;
  if (!(v20 >> 54))
  {
    unint64_t v24 = v20;
    do
    {
      unint64_t v20 = v24 << 10;
      v23 -= 10;
      unint64_t v25 = v24 >> 44;
      v24 <<= 10;
    }
    while (!v25);
  }
  for (; (v20 & 0x8000000000000000) == 0; --v23)
    v20 *= 2;
  if ((int)v6 <= -349)
  {
LABEL_42:
    *a4 = 0.0;
    return 1;
  }
  uint64_t v27 = v22 << -(char)v23;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  int v47 = 0;
  sub_18C915B18(v6, (uint64_t)&v48, &v47);
  int v28 = v6 - v47;
  if (v6 != v47)
  {
    int v29 = v28 - 1;
    if ((v28 - 1) >= 7) {
      abort();
    }
    v23 += dword_18CA92208[v29];
    unint64_t v20 = qword_18CA92228[v29] * HIDWORD(v20)
        + ((qword_18CA92228[v29] * (unint64_t)v20) >> 32)
        + ((((qword_18CA92228[v29] * v20) & 0x80000000uLL) + 0x80000000) >> 32);
    if (19 - a2 < v28) {
      v27 += 4;
    }
  }
  unint64_t v30 = ((v48 * (unint64_t)HIDWORD(v20)) >> 32)
      + HIDWORD(v48) * (unint64_t)HIDWORD(v20)
      + ((HIDWORD(v48) * (unint64_t)v20) >> 32)
      + ((((v48 * (unint64_t)v20) >> 32)
        + (v48 * HIDWORD(v20))
        + (HIDWORD(v48) * v20)
        + 0x80000000) >> 32);
  if (v27) {
    uint64_t v31 = 9;
  }
  else {
    uint64_t v31 = 8;
  }
  if (v30 >> 54)
  {
    int v32 = v23 + v49 + 64;
    unint64_t v33 = ((v48 * (unint64_t)HIDWORD(v20)) >> 32)
        + HIDWORD(v48) * (unint64_t)HIDWORD(v20)
        + ((HIDWORD(v48) * (unint64_t)v20) >> 32)
        + ((((v48 * (unint64_t)v20) >> 32)
          + (v48 * HIDWORD(v20))
          + (HIDWORD(v48) * v20)
          + 0x80000000) >> 32);
  }
  else
  {
    int v32 = v23 + v49 + 64;
    do
    {
      unint64_t v33 = v30 << 10;
      v32 -= 10;
      unint64_t v34 = v30 >> 44;
      v30 <<= 10;
    }
    while (!v34);
  }
  for (uint64_t i = v31 + v27; (v33 & 0x8000000000000000) == 0; --v32)
    v33 *= 2;
  unint64_t v36 = i << (v23 + v49 + 64 - v32);
  int v37 = v32 + 1138;
  if (v32 < -1137) {
    int v37 = 0;
  }
  if (v32 > -1086) {
    int v37 = 53;
  }
  uint64_t v38 = (v36 >> (4 - v37)) + 9;
  BOOL v39 = v37 <= 3;
  if (v37 > 3)
  {
    int v40 = 64 - v37;
  }
  else
  {
    v32 += 4 - v37;
    v33 >>= 4 - v37;
    int v40 = 60;
  }
  if (v39) {
    uint64_t v41 = v38;
  }
  else {
    uint64_t v41 = v36;
  }
  uint64_t v42 = v33 & ~(-1 << v40);
  uint64_t v43 = 8 << (v40 - 1);
  if (8 * v42 < (unint64_t)(v43 + v41)) {
    unint64_t v44 = v33 >> v40;
  }
  else {
    unint64_t v44 = (v33 >> v40) + 1;
  }
  double v45 = COERCE_DOUBLE(sub_18C918164(v44, v40 + v32));
  *a4 = v45;
  BOOL result = 1;
  if (v43 - v41 < (unint64_t)(8 * v42) && 8 * v42 < (unint64_t)(v43 + v41)) {
    return v45 == INFINITY;
  }
  return result;
}

uint64_t sub_18C91909C(uint64_t a1, int a2, int a3, unint64_t a4, int a5)
{
  bzero(v16, 0x204uLL);
  bzero(v15, 0x204uLL);
  sub_18C914B7C(v16, a1, a2);
  sub_18C914B14(v15, a4);
  if (a3 < 0)
  {
    int v11 = -a3;
    double v10 = (unsigned __int16 *)v15;
  }
  else
  {
    double v10 = v16;
    int v11 = a3;
  }
  sub_18C914CC4(v10, v11);
  if (a5 < 1)
  {
    int v13 = -a5;
    unint64_t v12 = v16;
  }
  else
  {
    unint64_t v12 = (unsigned __int16 *)v15;
    int v13 = a5;
  }
  sub_18C9150E0(v12, v13);
  return sub_18C9158D8((uint64_t)v16, v15);
}

uint64_t sub_18C919160(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = a3;
  double v22 = 0.0;
  uint64_t result = sub_18C918C28(a1, a2, a3, &v22);
  if (v22 >= 3.40282347e38)
  {
    if (v22 >= 3.40282357e38) {
      int v8 = 2139095040;
    }
    else {
      int v8 = 2139095039;
    }
    float v7 = *(float *)&v8;
  }
  else
  {
    float v7 = v22;
  }
  if (v22 == v7) {
    return result;
  }
  if (v22 == INFINITY)
  {
    uint64_t v9 = -1;
    double v10 = INFINITY;
    goto LABEL_19;
  }
  if ((*(void *)&v22 & 0x8000000000000000) == 0)
  {
    *(void *)&double v10 = *(void *)&v22 + 1;
    if (v22 != 0.0)
    {
      uint64_t v9 = -1;
      goto LABEL_19;
    }
    double v11 = -0.0;
LABEL_20:
    float v12 = v11;
    goto LABEL_25;
  }
  if ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    *(void *)&double v10 = *(void *)&v22 - 1;
    if (v22 == -INFINITY)
    {
      double v11 = -INFINITY;
      goto LABEL_20;
    }
  }
  else
  {
    double v10 = 0.0;
  }
  uint64_t v9 = 1;
LABEL_19:
  *(void *)&double v11 = v9 + *(void *)&v22;
  if (COERCE_DOUBLE(v9 + *(void *)&v22) < 3.40282347e38) {
    goto LABEL_20;
  }
  if (v11 >= 3.40282357e38) {
    int v13 = 2139095040;
  }
  else {
    int v13 = 2139095039;
  }
  float v12 = *(float *)&v13;
LABEL_25:
  if (v10 < 3.40282347e38)
  {
    float v14 = v10;
    if (result) {
      goto LABEL_44;
    }
LABEL_32:
    if (v10 == INFINITY) {
      goto LABEL_33;
    }
    if ((*(void *)&v10 & 0x8000000000000000) != 0)
    {
      if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      {
        double v18 = 0.0;
        goto LABEL_43;
      }
      uint64_t v17 = -1;
    }
    else
    {
      uint64_t v17 = 1;
    }
    *(void *)&double v18 = v17 + *(void *)&v10;
    if (v18 >= 3.40282347e38)
    {
      if (v18 < 3.40282357e38)
      {
        int v16 = 2139095039;
        goto LABEL_34;
      }
LABEL_33:
      int v16 = 2139095040;
LABEL_34:
      float v14 = *(float *)&v16;
      goto LABEL_44;
    }
LABEL_43:
    float v14 = v18;
    goto LABEL_44;
  }
  if (v10 >= 3.40282357e38) {
    int v15 = 2139095040;
  }
  else {
    int v15 = 2139095039;
  }
  float v14 = *(float *)&v15;
  if ((result & 1) == 0) {
    goto LABEL_32;
  }
LABEL_44:
  if (v12 != v14)
  {
    if (v12 == 0.0)
    {
      unint64_t v19 = 0x10000000000000;
      int v20 = -202;
    }
    else
    {
      if ((LODWORD(v12) & 0x7F800000) != 0) {
        int v21 = (2 * (LODWORD(v12) & 0x7FFFFF)) | 0x1000000;
      }
      else {
        int v21 = 2 * (LODWORD(v12) & 0x7FFFFF);
      }
      unint64_t v19 = v21 | 1u;
      if ((LODWORD(v12) & 0x7F800000) != 0) {
        int v20 = (LODWORD(v12) >> 23) - 151;
      }
      else {
        int v20 = -150;
      }
    }
    return sub_18C91909C(a1, a2, v3, v19, v20);
  }
  return result;
}

void icu::SharedDateFormatSymbols::~SharedDateFormatSymbols(icu::SharedDateFormatSymbols *this)
{
  *(void *)this = &unk_1EDA4BB68;
  icu::DateFormatSymbols::~DateFormatSymbols((icu::SharedDateFormatSymbols *)((char *)this + 24));

  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDA4BB68;
  icu::DateFormatSymbols::~DateFormatSymbols((icu::SharedDateFormatSymbols *)((char *)this + 24));

  icu::SharedObject::~SharedObject(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDA4BB68;
  icu::DateFormatSymbols::~DateFormatSymbols((icu::SharedDateFormatSymbols *)((char *)this + 24));
  icu::SharedObject::~SharedObject(this);

  icu::UMemory::operator delete(v2);
}

uint64_t icu::LocaleCacheKey<icu::SharedDateFormatSymbols>::createObject(uint64_t a1, int a2, UErrorCode *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (const icu::Locale *)(a1 + 16);
  memset(v12, 0, sizeof(v12));
  icu::Calendar::getCalendarTypeFromLocale((icu::Calendar *)(a1 + 16), (const icu::Locale *)v12, (char *)0x100, a3, a5);
  int v8 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v8 <= 0)
  {
    double v11 = icu::UMemory::operator new(v8, (icu::UMemory *)0x510, v7);
    uint64_t v9 = (uint64_t)v11;
    if (!v11)
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      return v9;
    }
    v11[1] = 0;
    v11[2] = 0;
    *double v11 = (uint64_t)&unk_1EDA4BB68;
    icu::DateFormatSymbols::DateFormatSymbols((icu::DateFormatSymbols *)(v11 + 3), v6, (const char *)v12, a3);
    if (*(int *)a3 < 1)
    {
      icu::SharedObject::addRef(v9);
      return v9;
    }
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return 0;
}

void *icu::DateFormatSymbols::getStaticClassID(icu::DateFormatSymbols *this)
{
  return &unk_1E9192140;
}

void *icu::DateFormatSymbols::getDynamicClassID(icu::DateFormatSymbols *this)
{
  return &unk_1E9192140;
}

icu::DateFormatSymbols *icu::DateFormatSymbols::createForLocale(icu::DateFormatSymbols *this, UErrorCode *a2, UErrorCode *a3)
{
  int v8 = 0;
  sub_18C919694((uint64_t)this, (UErrorCode *)&v8, a2);
  uint64_t v5 = 0;
  uint64_t v6 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v6 <= 0)
  {
    uint64_t v5 = (icu::DateFormatSymbols *)icu::UMemory::operator new(v6, (icu::UMemory *)0x4F8, v4);
    if (v5)
    {
      icu::DateFormatSymbols::DateFormatSymbols(v5, (icu::SharedObject *)((char *)v8 + 24));
      icu::SharedObject::removeRef((uint64_t)v8);
    }
    else
    {
      icu::SharedObject::removeRef((uint64_t)v8);
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return v5;
}

void sub_18C919694(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  v11[28] = *MEMORY[0x1E4F143B8];
  uint64_t Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    unint64_t v7 = (icu::SharedObject **)Instance;
    int v9 = 0;
    char v10 = 0;
    int v8 = &unk_1EDA4BC30;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18C8D86FC(v7, (const icu::CacheKeyBase *)&v8, 0, (icu::SharedObject **)a2, this);
    int v8 = &unk_1EDA4BC30;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }
}

icu::DateFormatSymbols *icu::DateFormatSymbols::DateFormatSymbols(icu::DateFormatSymbols *this, const icu::Locale *a2, UErrorCode *a3)
{
  *(void *)this = &unk_1EDA4BB90;
  *((void *)this + 39) = &unk_1EDA47700;
  *((_WORD *)this + 160) = 2;
  icu::Locale::Locale((icu::DateFormatSymbols *)((char *)this + 544));
  *((void *)this + 96) = &unk_1EDA47700;
  *((_WORD *)this + 388) = 2;
  icu::DateFormatSymbols::initializeData(this, a2, 0, a3, 0);
  return this;
}

void icu::DateFormatSymbols::initializeData(icu::DateFormatSymbols *this, const icu::Locale *a2, const char *a3, UErrorCode *a4, int a5)
{
  uint64_t v247 = *MEMORY[0x1E4F143B8];
  int v213 = 0;
  *((void *)this + 1) = 0;
  uint64_t v6 = (char *)this + 8;
  *((_DWORD *)this + 4) = 0;
  v195 = (unsigned int *)((char *)this + 16);
  *((void *)this + 3) = 0;
  v180 = (uint64_t *)((char *)this + 24);
  *((_DWORD *)this + 8) = 0;
  v179 = (icu::UnicodeString **)((char *)this + 32);
  *((void *)this + 5) = 0;
  v182 = (uint64_t *)((char *)this + 40);
  *((_DWORD *)this + 12) = 0;
  v181 = (icu::UnicodeString **)((char *)this + 48);
  *((void *)this + 7) = 0;
  v197 = (uint64_t *)((char *)this + 56);
  *((_DWORD *)this + 16) = 0;
  v196 = (unsigned int *)((char *)this + 64);
  *((void *)this + 9) = 0;
  v199 = (uint64_t *)((char *)this + 72);
  *((_DWORD *)this + 20) = 0;
  v178 = (unsigned int *)((char *)this + 80);
  *((void *)this + 11) = 0;
  v184 = (uint64_t *)((char *)this + 88);
  *((_DWORD *)this + 24) = 0;
  v183 = (unsigned int *)((char *)this + 96);
  *((void *)this + 13) = 0;
  v186 = (uint64_t *)((char *)this + 104);
  *((_DWORD *)this + 28) = 0;
  v185 = (icu::UnicodeString **)((char *)this + 112);
  *((void *)this + 15) = 0;
  v188 = (uint64_t *)((char *)this + 120);
  *((_DWORD *)this + 32) = 0;
  v187 = (icu::UnicodeString **)((char *)this + 128);
  *((void *)this + 17) = 0;
  v190 = (uint64_t *)((char *)this + 136);
  *((_DWORD *)this + 36) = 0;
  v189 = (unsigned int *)((char *)this + 144);
  *((void *)this + 19) = 0;
  v191 = (uint64_t *)((char *)this + 152);
  *((_DWORD *)this + 40) = 0;
  v198 = (unsigned int *)((char *)this + 160);
  *((void *)this + 21) = 0;
  v194 = (uint64_t *)((char *)this + 168);
  *((_DWORD *)this + 44) = 0;
  v193 = (unsigned int *)((char *)this + 176);
  *((void *)this + 23) = 0;
  v192 = (uint64_t *)((char *)this + 184);
  *((_DWORD *)this + 48) = 0;
  v200 = (icu::UnicodeString **)((char *)this + 192);
  *((void *)this + 25) = 0;
  unint64_t v7 = (uint64_t *)((char *)this + 200);
  *((_DWORD *)this + 52) = 0;
  int v8 = (unsigned int *)((char *)this + 208);
  *((void *)this + 27) = 0;
  int v9 = (uint64_t *)((char *)this + 216);
  *((_DWORD *)this + 56) = 0;
  char v10 = (icu::UnicodeString **)((char *)this + 224);
  *((void *)this + 29) = 0;
  double v11 = (uint64_t *)((char *)this + 232);
  *((_DWORD *)this + 60) = 0;
  float v12 = (icu::UnicodeString **)((char *)this + 240);
  *((void *)this + 31) = 0;
  uint64_t v13 = (uint64_t *)((char *)this + 248);
  *((_DWORD *)this + 64) = 0;
  float v14 = (icu::UnicodeString **)((char *)this + 256);
  *((void *)this + 33) = 0;
  *((_DWORD *)this + 68) = 0;
  *((void *)this + 35) = 0;
  *((_DWORD *)this + 72) = 0;
  *((void *)this + 37) = 0;
  *((_DWORD *)this + 76) = 0;
  v174 = (icu::DateFormatSymbols *)((char *)this + 312);
  icu::UnicodeString::setToBogus((icu::DateFormatSymbols *)((char *)this + 312));
  *((void *)v6 + 46) = 0;
  *((_DWORD *)v6 + 94) = 0;
  *((void *)v6 + 48) = 0;
  *((_DWORD *)v6 + 98) = 0;
  *((void *)v6 + 50) = 0;
  *((_DWORD *)v6 + 102) = 0;
  *((void *)v6 + 52) = 0;
  *((_DWORD *)v6 + 106) = 0;
  *((void *)v6 + 54) = 0;
  *((_DWORD *)v6 + 110) = 0;
  *((void *)v6 + 56) = 0;
  *((_DWORD *)v6 + 114) = 0;
  *((void *)v6 + 58) = 0;
  *((_DWORD *)v6 + 118) = 0;
  *((void *)v6 + 60) = 0;
  *((_DWORD *)v6 + 122) = 0;
  *((void *)v6 + 62) = 0;
  *((_DWORD *)v6 + 126) = 0;
  *((void *)v6 + 107) = 0;
  *((_DWORD *)v6 + 216) = 0;
  *((void *)v6 + 109) = 0;
  *((_DWORD *)v6 + 220) = 0;
  *((void *)v6 + 111) = 0;
  *((_DWORD *)v6 + 224) = 0;
  *((void *)v6 + 113) = 0;
  *((_DWORD *)v6 + 228) = 0;
  *((void *)v6 + 115) = 0;
  *((_DWORD *)v6 + 232) = 0;
  *((void *)v6 + 117) = 0;
  *((_DWORD *)v6 + 236) = 0;
  *((_DWORD *)v6 + 212) = 0;
  *((void *)v6 + 105) = 0;
  *(_OWORD *)(v6 + 824) = 0u;
  *((void *)v6 + 66) = 0;
  *((_OWORD *)v6 + 32) = 0u;
  icu::Locale::operator=((icu::Locale *)(v6 + 536), (uint64_t)a2);
  if (*(int *)a4 <= 0)
  {
    v201 = v6;
    long long v167 = v7;
    uint64_t v169 = v9;
    long long v166 = v12;
    bzero(v229, 0x248uLL);
    v227 = &unk_1EDA4BBE8;
    v228 = 0;
    uhash_init(v229, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a4);
    v170 = v13;
    long long v168 = v10;
    if (*(int *)a4 < 1)
    {
      v228 = v229;
      uhash_setKeyDeleter((uint64_t)v229, (uint64_t)uprv_deleteUObject);
      int v17 = *a4;
      v230 = 0;
      int v15 = a2;
      int v16 = v11;
      if (v17 <= 0
        && (uhash_init(v231, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a4),
            *(int *)a4 < 1))
      {
        v230 = v231;
        uhash_setKeyDeleter((uint64_t)v231, (uint64_t)uprv_deleteUObject);
        int v81 = *a4;
        v232 = 0;
        if (v81 <= 0)
        {
          uhash_init(v233, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a4);
          if (*(int *)a4 <= 0)
          {
            v232 = v233;
            uhash_setKeyDeleter((uint64_t)v233, (uint64_t)uprv_deleteUObject);
          }
        }
      }
      else
      {
        v232 = 0;
      }
    }
    else
    {
      v230 = 0;
      v232 = 0;
      int v15 = a2;
      int v16 = v11;
    }
    int v234 = 0;
    v235 = &v238;
    int v236 = 8;
    char v237 = 0;
    icu::UVector::UVector((uint64_t)v239, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)a4);
    v240 = (UChar *)&unk_1EDA47700;
    __int16 v241 = 2;
    v242 = (UChar *)&unk_1EDA47700;
    __int16 v243 = 2;
    uint64_t v244 = 0;
    v245 = &unk_1EDA47700;
    __int16 v246 = 2;
    int BaseName = (char *)icu::Locale::getBaseName(v15);
    uint64_t v19 = ures_open(0, BaseName, (int *)a4);
    uint64_t v20 = ures_getByKey(v19, "calendar", 0, (int *)a4);
    if (*(int *)a4 > 0) {
      goto LABEL_181;
    }
    memset(v226, 0, sizeof(v226));
    int v21 = "gregorian";
    uint64_t v171 = v20;
    uint64_t v164 = v16;
    v165 = v14;
    uint64_t v152 = v19;
    if (a3 && *a3) {
      int v21 = a3;
    }
    icu::UnicodeString::UnicodeString(v226, v21, 0xFFFFFFFFLL, 0);
    if (((uint64_t)v226[1] & 1) == 0)
    {
      while (1)
      {
        long long v223 = 0u;
        long long v224 = 0u;
        long long v222 = 0u;
        v221 = (char *)&v222 + 5;
        LODWORD(v222) = 40;
        uint64_t v225 = 0;
        icu::CharString::appendInvariantChars((icu::CharString *)&v221, (const icu::UnicodeString *)v226, a4);
        UErrorCode v23 = *a4;
        if (*(int *)a4 <= 0)
        {
          unint64_t v25 = v221;
          uint64_t v26 = ures_getByKeyWithFallback(v171, v221, 0, a4);
          uint64_t v27 = v26;
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            ures_close(v26);
            if (!strcmp(v25, "gregorian"))
            {
              int v24 = 1;
            }
            else
            {
              v212 = (const UChar *)aGregorian_2;
              icu::UnicodeString::setTo((icu::UnicodeString *)v226, 0, &v212, 9);
              if (v244) {
                (*(void (**)(uint64_t))(*(void *)v244 + 8))(v244);
              }
              uint64_t v244 = 0;
              *a4 = v23;
              int v24 = 2;
            }
          }
          else
          {
            icu::UnicodeString::operator=(&v240, v226);
            icu::UnicodeString::setToBogus((icu::UnicodeString *)&v242);
            icu::UVector::removeAllElements((uint64_t)v239);
            ures_getAllItemsWithFallback(v27, "", (uint64_t)&v227, (int *)a4);
            ures_close(v27);
            if (*(int *)a4 > 0 || !strcmp(v25, "gregorian"))
            {
              int v24 = 3;
            }
            else
            {
              icu::UnicodeString::operator=(v226, &v242);
              if ((uint64_t)v226[1])
              {
                v211 = (const UChar *)aGregorian_2;
                icu::UnicodeString::setTo((icu::UnicodeString *)v226, 0, &v211, 9);
                if (v244) {
                  (*(void (**)(uint64_t))(*(void *)v244 + 8))(v244);
                }
                int v24 = 0;
                uint64_t v244 = 0;
              }
              else
              {
                int v24 = 0;
              }
            }
          }
        }
        else
        {
          int v24 = 1;
        }
        int v28 = (void *)BYTE4(v222);
        if (BYTE4(v222)) {
          uprv_free(v221);
        }
        if (v24 && v24 != 2) {
          break;
        }
        if ((uint64_t)v226[1]) {
          goto LABEL_35;
        }
      }
      if (v24 != 3)
      {
LABEL_180:
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v226);
LABEL_181:
        sub_18C9200F0((uint64_t *)&v227);
        return;
      }
    }
LABEL_35:
    int v29 = (uint64_t *)(v6 + 480);
    unint64_t v30 = v201 + 488;
    long long v222 = 0u;
    long long v224 = 0u;
    long long v223 = 0u;
    v221 = (char *)&v222 + 5;
    LODWORD(v222) = 40;
    uint64_t v225 = 0;
    UErrorCode v210 = *a4;
    uint64_t v31 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x1D0, v22);
    if (v31)
    {
      *uint64_t v31 = xmmword_18CA92260;
      int v32 = (char *)(v31 + 1);
      unint64_t v33 = v31 + 1;
      unint64_t v34 = v31 + 1;
      do
      {
        *(void *)unint64_t v34 = &unk_1EDA47700;
        *((_WORD *)v34 + 4) = 2;
        v33 += 4;
        v34 += 4;
      }
      while (v34 != v31 + 29);
      *((void *)this + 59) = v32;
      unsigned int v35 = sub_18C91FA40((icu::CharString *)&v221, "monthPatterns", "format", "wide", &v210);
      sub_18C91F904(v32, 0, (uint64_t)&v227, v35, (int *)&v210);
      unint64_t v36 = (char *)*((void *)this + 59);
      int v37 = sub_18C91FA40((icu::CharString *)&v221, "monthPatterns", "format", "abbreviated", &v210);
      sub_18C91F904(v36, 1u, (uint64_t)&v227, v37, (int *)&v210);
      uint64_t v38 = (char *)*((void *)this + 59);
      BOOL v39 = sub_18C91FA40((icu::CharString *)&v221, "monthPatterns", "format", "narrow", &v210);
      sub_18C91F904(v38, 2u, (uint64_t)&v227, v39, (int *)&v210);
      int v40 = (char *)*((void *)this + 59);
      uint64_t v41 = sub_18C91FA40((icu::CharString *)&v221, "monthPatterns", "stand-alone", "wide", &v210);
      sub_18C91F904(v40, 3u, (uint64_t)&v227, v41, (int *)&v210);
      uint64_t v42 = (char *)*((void *)this + 59);
      uint64_t v43 = sub_18C91FA40((icu::CharString *)&v221, "monthPatterns", "stand-alone", "abbreviated", &v210);
      sub_18C91F904(v42, 4u, (uint64_t)&v227, v43, (int *)&v210);
      unint64_t v44 = (char *)*((void *)this + 59);
      double v45 = sub_18C91FA40((icu::CharString *)&v221, "monthPatterns", "stand-alone", "narrow", &v210);
      sub_18C91F904(v44, 5u, (uint64_t)&v227, v45, (int *)&v210);
      double v46 = (char *)*((void *)this + 59);
      int v47 = sub_18C91FA40((icu::CharString *)&v221, "monthPatterns", "numeric", "all", &v210);
      sub_18C91F904(v46, 6u, (uint64_t)&v227, v47, (int *)&v210);
      uint64_t v48 = *((void *)this + 59);
      if (v210 <= U_ZERO_ERROR)
      {
        uint64_t v49 = (char **)a2;
        if (*(unsigned __int16 *)(v48 + 72) <= 0x1Fu)
        {
          icu::UnicodeString::copyFrom((UChar **)(v48 + 64), (UChar **)v48, 0);
          uint64_t v48 = *((void *)this + 59);
        }
        uint64_t v54 = v174;
        unint64_t v30 = v201 + 488;
        if (*(unsigned __int16 *)(v48 + 136) <= 0x1Fu)
        {
          icu::UnicodeString::copyFrom((UChar **)(v48 + 128), (UChar **)(v48 + 320), 0);
          uint64_t v48 = *((void *)this + 59);
        }
        if (*(unsigned __int16 *)(v48 + 200) <= 0x1Fu)
        {
          icu::UnicodeString::copyFrom((UChar **)(v48 + 192), (UChar **)v48, 0);
          uint64_t v48 = *((void *)this + 59);
        }
        if (*(unsigned __int16 *)(v48 + 264) <= 0x1Fu) {
          icu::UnicodeString::copyFrom((UChar **)(v48 + 256), (UChar **)(v48 + 64), 0);
        }
        *((_DWORD *)this + 120) = 7;
      }
      else
      {
        uint64_t v49 = (char **)a2;
        if (v48)
        {
          double v50 = (void *)(v48 - 16);
          unsigned int v51 = *(void **)(v48 - 8);
          if (v51)
          {
            uint64_t v52 = (void)v51 << 6;
            uint64_t v53 = v48 - 64;
            do
            {
              icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)(v53 + v52));
              v52 -= 64;
            }
            while (v52);
          }
          icu::UMemory::operator delete[](v50);
        }
        *((void *)this + 59) = 0;
        uint64_t v54 = v174;
        unint64_t v30 = v201 + 488;
        int v29 = (uint64_t *)(v201 + 480);
      }
    }
    else
    {
      *((void *)this + 59) = 0;
      uint64_t v54 = v174;
      uint64_t v49 = (char **)a2;
    }
    UErrorCode v210 = *a4;
    int v55 = sub_18C91FB7C((icu::CharString *)&v221, "years", &v210);
    sub_18C91FA94(v29, v30, (uint64_t)&v227, v55, (int *)&v210);
    int v56 = sub_18C91FB7C((icu::CharString *)&v221, "zodiacs", &v210);
    sub_18C91FA94((uint64_t *)v201 + 62, (_DWORD *)v201 + 126, (uint64_t)&v227, v56, (int *)&v210);
    UErrorCode v210 = U_ZERO_ERROR;
    uint64_t v57 = ures_open(0, v49[5], (int *)&v210);
    if (v210 <= U_ZERO_ERROR)
    {
      uint64_t v58 = v57;
      uint64_t v59 = ures_getByKeyWithFallback(v57, "contextTransforms", 0, &v210);
      if (v210 <= U_ZERO_ERROR)
      {
        uint64_t v61 = v59;
        NextResource = ures_getNextResource(v59, 0, &v210);
        if (NextResource)
        {
          char v63 = NextResource;
          do
          {
            IntVectounint64_t r = ures_getIntVector((uint64_t)v63, &v213, (int *)a4);
            if (v210 <= U_ZERO_ERROR && IntVector != 0 && v213 >= 2)
            {
              uint64_t v67 = IntVector;
              uint64_t Key = ures_getKey((uint64_t)v63);
              if (Key)
              {
                int v69 = (const char *)Key;
                int v70 = &off_1E550B990;
                int v71 = "day-format-except-narrow";
                while (1)
                {
                  int v72 = strcmp(v69, v71);
                  if (v72 < 1) {
                    break;
                  }
                  int v73 = *v70;
                  v70 += 2;
                  int v71 = v73;
                  if (!v73) {
                    goto LABEL_73;
                  }
                }
                if (!v72)
                {
                  char v74 = (char *)this + 2 * *((unsigned int *)v70 - 2);
                  v74[832] = *v67;
                  v74[833] = v67[1];
                }
              }
            }
LABEL_73:
            UErrorCode v210 = U_ZERO_ERROR;
            ures_close((uint64_t)v63);
            char v63 = ures_getNextResource(v61, 0, &v210);
          }
          while (v63);
        }
        ures_close(v61);
        uint64_t v54 = v174;
        uint64_t v49 = (char **)a2;
      }
      UErrorCode v210 = U_ZERO_ERROR;
      unint64_t v75 = icu::NumberingSystem::createInstance((icu::NumberingSystem *)v49, &v210, v60);
      if (v75 || v210 > U_ZERO_ERROR)
      {
        if (v210 <= U_ZERO_ERROR)
        {
          uint64_t v76 = ures_getByKeyWithFallback(v58, "NumberElements", 0, &v210);
          Name = (char *)icu::NumberingSystem::getName(v75);
          uint64_t v78 = ures_getByKeyWithFallback(v76, Name, 0, &v210);
          uint64_t v79 = ures_getByKeyWithFallback(v78, "symbols", 0, &v210);
          long long v217 = 0u;
          long long v218 = 0u;
          long long v219 = 0u;
          uint64_t v220 = 0;
          v216 = &unk_1EDA47700;
          LOWORD(v217) = 2;
          int v215 = 0;
          StringByuint64_t Key = ures_getStringByKey(v79, "timeSeparator", &v215, (int *)&v210);
          if (v210 <= U_ZERO_ERROR)
          {
            v214 = StringByKey;
            icu::UnicodeString::setTo((icu::UnicodeString *)&v216, 1, &v214, v215);
          }
          else
          {
            icu::UnicodeString::setToBogus((icu::UnicodeString *)&v216);
          }
          icu::UnicodeString::operator=(v54, (icu::UnicodeString *)&v216);
          icu::UnicodeString::~UnicodeString(v82, (icu::UnicodeString *)&v216);
          if (v210 >= U_ILLEGAL_ARGUMENT_ERROR) {
            icu::UnicodeString::setToBogus(v54);
          }
          if (v79) {
            ures_close(v79);
          }
          if (v78) {
            ures_close(v78);
          }
          if (v76) {
            ures_close(v76);
          }
        }
        ures_close(v58);
        if (v75) {
          (*(void (**)(icu::NumberingSystem *))(*(void *)v75 + 8))(v75);
        }
      }
      else
      {
        UErrorCode v210 = U_MEMORY_ALLOCATION_ERROR;
        ures_close(v58);
      }
    }
    BOOL v83 = this;
    int v84 = (int *)(v201 + 864);
    int v85 = v201 + 880;
    uint64_t v86 = v201 + 896;
    char v87 = v201 + 912;
    int v88 = v201 + 928;
    int v89 = v201 + 944;
    if (*((_WORD *)this + 160))
    {
      LOWORD(v216) = 58;
      icu::UnicodeString::unBogus((uint64_t)v54);
      if (*((__int16 *)this + 160) < 0) {
        uint64_t v90 = *((unsigned int *)this + 81);
      }
      else {
        uint64_t v90 = *((unsigned __int16 *)this + 160) >> 5;
      }
      icu::UnicodeString::doReplace((uint64_t)v54, 0, v90, (uint64_t)&v216, 0, 1);
      BOOL v83 = this;
    }
    char v91 = sub_18C91FA40((icu::CharString *)&v221, "dayPeriod", "format", "abbreviated", a4);
    *((void *)v83 + 108) = sub_18C91FBE4((uint64_t)&v227, v91, v84, (int *)a4);
    int v92 = sub_18C91FA40((icu::CharString *)&v221, "dayPeriod", "format", "wide", a4);
    *((void *)v83 + 110) = sub_18C91FBE4((uint64_t)&v227, v92, v85, (int *)a4);
    uint64_t v93 = sub_18C91FA40((icu::CharString *)&v221, "dayPeriod", "format", "narrow", a4);
    *((void *)v83 + 112) = sub_18C91FBE4((uint64_t)&v227, v93, v86, (int *)a4);
    BOOL v94 = sub_18C91FA40((icu::CharString *)&v221, "dayPeriod", "stand-alone", "abbreviated", a4);
    *((void *)v83 + 114) = sub_18C91FBE4((uint64_t)&v227, v94, v87, (int *)a4);
    int v95 = sub_18C91FA40((icu::CharString *)&v221, "dayPeriod", "stand-alone", "wide", a4);
    *((void *)v83 + 116) = sub_18C91FBE4((uint64_t)&v227, v95, v88, (int *)a4);
    int v96 = sub_18C91FA40((icu::CharString *)&v221, "dayPeriod", "stand-alone", "narrow", a4);
    *((void *)v83 + 118) = sub_18C91FBE4((uint64_t)&v227, v96, v89, (int *)a4);
    if (*(int *)a4 <= 0 && *v84 >= 1)
    {
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      do
      {
        if (v98 < (int)*v85)
        {
          uint64_t v99 = *((void *)v83 + 110);
          if (v99)
          {
            if (*(_WORD *)(v99 + v97 + 8))
            {
              icu::UnicodeString::fastCopyFrom((UChar **)(v99 + v97), (UChar **)(*((void *)v83 + 108) + v97));
              BOOL v83 = this;
            }
          }
        }
        if (v98 < (int)*v86)
        {
          uint64_t v100 = *((void *)v83 + 112);
          if (v100)
          {
            if (*(_WORD *)(v100 + v97 + 8))
            {
              icu::UnicodeString::fastCopyFrom((UChar **)(v100 + v97), (UChar **)(*((void *)v83 + 108) + v97));
              BOOL v83 = this;
            }
          }
        }
        if (v98 < (int)*v87)
        {
          uint64_t v101 = *((void *)v83 + 114);
          if (v101)
          {
            if (*(_WORD *)(v101 + v97 + 8))
            {
              icu::UnicodeString::fastCopyFrom((UChar **)(v101 + v97), (UChar **)(*((void *)v83 + 108) + v97));
              BOOL v83 = this;
            }
          }
        }
        if (v98 < (int)*v88)
        {
          uint64_t v102 = *((void *)v83 + 116);
          if (v102)
          {
            if (*(_WORD *)(v102 + v97 + 8))
            {
              icu::UnicodeString::fastCopyFrom((UChar **)(v102 + v97), (UChar **)(*((void *)v83 + 114) + v97));
              BOOL v83 = this;
            }
          }
        }
        if (v98 < (int)*v89)
        {
          uint64_t v103 = *((void *)v83 + 118);
          if (v103)
          {
            if (*(_WORD *)(v103 + v97 + 8))
            {
              icu::UnicodeString::fastCopyFrom((UChar **)(v103 + v97), (UChar **)(*((void *)v83 + 114) + v97));
              BOOL v83 = this;
            }
          }
        }
        ++v98;
        v97 += 64;
      }
      while (v98 < *v84);
    }
    v216 = (char *)v83 + 956;
    *(void *)&long long v217 = (char *)v83 + 1113;
    LocaleByunsigned int Type = (const char *)ures_getLocaleByType(v171, 1, (int *)a4);
    char v105 = (const char *)ures_getLocaleByType(v171, 0, (int *)a4);
    icu::LocaleBased::setLocaleIDs((char *)&v216, LocaleByType, v105);
    int v106 = sub_18C91FDC4((icu::CharString *)&v221, "eras", "abbreviated", a4);
    sub_18C91FA94((uint64_t *)v201, v195, (uint64_t)&v227, v106, (int *)a4);
    UErrorCode v107 = *a4;
    unint64_t v108 = sub_18C91FDC4((icu::CharString *)&v221, "eras", "wide", a4);
    sub_18C91FA94(v180, v179, (uint64_t)&v227, v108, (int *)a4);
    UErrorCode v109 = *a4;
    if (*a4 == U_MISSING_RESOURCE_ERROR)
    {
      *a4 = v107;
      icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v180, v179, *(int **)v201, (const icu::UnicodeString *)*v195);
      UErrorCode v109 = *a4;
    }
    int v110 = sub_18C91FDC4((icu::CharString *)&v221, "eras", "narrow", a4);
    sub_18C91FA94(v182, v181, (uint64_t)&v227, v110, (int *)a4);
    int v111 = v178;
    if (*a4 == U_MISSING_RESOURCE_ERROR)
    {
      *a4 = v109;
      icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v182, v181, *(int **)v201, (const icu::UnicodeString *)*v195);
    }
    int v112 = sub_18C91FA40((icu::CharString *)&v221, "monthNames", "format", "wide", a4);
    sub_18C91FA94(v197, v196, (uint64_t)&v227, v112, (int *)a4);
    unsigned int v113 = sub_18C91FA40((icu::CharString *)&v221, "monthNames", "format", "abbreviated", a4);
    sub_18C91FA94(v199, v178, (uint64_t)&v227, v113, (int *)a4);
    uint64_t v114 = sub_18C91FA40((icu::CharString *)&v221, "monthNames", "stand-alone", "wide", a4);
    sub_18C91FA94(v186, v185, (uint64_t)&v227, v114, (int *)a4);
    if (*a4 == U_MISSING_RESOURCE_ERROR)
    {
      *a4 = U_ZERO_ERROR;
      icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v186, v185, (int *)*v197, (const icu::UnicodeString *)*v196);
    }
    int v115 = sub_18C91FA40((icu::CharString *)&v221, "monthNames", "stand-alone", "abbreviated", a4);
    sub_18C91FA94(v188, v187, (uint64_t)&v227, v115, (int *)a4);
    int v116 = *a4;
    if (*a4 == U_MISSING_RESOURCE_ERROR)
    {
      *a4 = U_ZERO_ERROR;
      icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v188, v187, (int *)*v199, (const icu::UnicodeString *)*v178);
      int v116 = *a4;
    }
    v153 = (uint64_t *)(v201 + 288);
    v172 = (icu::UnicodeString **)(v201 + 296);
    v162 = (unsigned int *)(v201 + 280);
    v163 = (uint64_t *)(v201 + 272);
    LODWORD(v214) = v116;
    int v215 = v116;
    uint64_t v117 = sub_18C91FA40((icu::CharString *)&v221, "monthNames", "format", "narrow", (UErrorCode *)&v214);
    sub_18C91FA94(v184, v183, (uint64_t)&v227, v117, (int *)&v214);
    uint64_t v118 = sub_18C91FA40((icu::CharString *)&v221, "monthNames", "stand-alone", "narrow", (UErrorCode *)&v214);
    sub_18C91FA94(v190, v189, (uint64_t)&v227, v118, &v215);
    if (v214 != 2 || v215 == 2)
    {
      if (v214 == 2 || v215 != 2)
      {
        if (v214 != 2 || v215 != 2)
        {
LABEL_143:
          UErrorCode v209 = U_ZERO_ERROR;
          LODWORD(v225) = 0;
          char *v221 = 0;
          long long v123 = icu::CharString::append((icu::CharString *)&v221, "AmPmMarkers", -1, &v209);
          sub_18C91FA94(v163, v162, (uint64_t)&v227, v123, (int *)&v209);
          if (v209 >= U_ILLEGAL_ARGUMENT_ERROR)
          {
            LODWORD(v225) = 0;
            char *v221 = 0;
            int v124 = icu::CharString::append((icu::CharString *)&v221, "AmPmMarkersAbbr", -1, a4);
            sub_18C91FA94(v163, v162, (uint64_t)&v227, v124, (int *)a4);
          }
          UErrorCode v209 = U_ZERO_ERROR;
          LODWORD(v225) = 0;
          char *v221 = 0;
          int v125 = icu::CharString::append((icu::CharString *)&v221, "AmPmMarkersNarrow", -1, &v209);
          sub_18C91FA94(v153, v172, (uint64_t)&v227, v125, (int *)&v209);
          if (v209 >= U_ILLEGAL_ARGUMENT_ERROR)
          {
            LODWORD(v225) = 0;
            char *v221 = 0;
            char v126 = icu::CharString::append((icu::CharString *)&v221, "AmPmMarkersAbbr", -1, a4);
            sub_18C91FA94(v153, v172, (uint64_t)&v227, v126, (int *)a4);
          }
          v160 = (icu::UnicodeString **)(v201 + 424);
          uint64_t v161 = (uint64_t *)(v201 + 416);
          int v127 = (uint64_t *)(v201 + 368);
          size_t v128 = (unsigned int *)(v201 + 376);
          v175 = (icu::UnicodeString **)(v201 + 392);
          v177 = (uint64_t *)(v201 + 384);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v153, v172, (int *)*v163, (const icu::UnicodeString *)*v162);
          }
          long long v158 = (icu::UnicodeString **)(v201 + 440);
          uint64_t v159 = (uint64_t *)(v201 + 432);
          long long v129 = sub_18C91FA40((icu::CharString *)&v221, "quarters", "format", "wide", a4);
          sub_18C91FA94(v127, v128, (uint64_t)&v227, v129, (int *)a4);
          long long v130 = sub_18C91FA40((icu::CharString *)&v221, "quarters", "format", "abbreviated", a4);
          sub_18C91FA94(v177, v175, (uint64_t)&v227, v130, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v177, v175, (int *)*v127, (const icu::UnicodeString *)*v128);
          }
          long long v156 = (icu::UnicodeString **)(v201 + 408);
          long long v157 = (uint64_t *)(v201 + 400);
          long long v131 = sub_18C91FA40((icu::CharString *)&v221, "quarters", "stand-alone", "wide", a4);
          sub_18C91FA94(v161, v160, (uint64_t)&v227, v131, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v161, v160, (int *)*v127, (const icu::UnicodeString *)*v128);
          }
          uint64_t v154 = (unsigned int *)(v201 + 456);
          v155 = (uint64_t *)(v201 + 448);
          int v132 = sub_18C91FA40((icu::CharString *)&v221, "quarters", "stand-alone", "abbreviated", a4);
          sub_18C91FA94(v159, v158, (uint64_t)&v227, v132, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v159, v158, (int *)*v177, (const icu::UnicodeString *)*(unsigned int *)v175);
          }
          int v133 = sub_18C91FA40((icu::CharString *)&v221, "quarters", "stand-alone", "narrow", a4);
          sub_18C91FA94(v155, v154, (uint64_t)&v227, v133, (int *)a4);
          int v134 = sub_18C91FA40((icu::CharString *)&v221, "quarters", "format", "narrow", a4);
          sub_18C91FA94(v157, v156, (uint64_t)&v227, v134, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v157, v156, (int *)*v155, (const icu::UnicodeString *)*v154);
          }
          v208 = (const UChar *)L"GyMdkHmsSEDFwWahKzYeugAZvcLQqVUOXxrbB";
          v203 = (icu::DateFormatSymbols *)((char *)this + 768);
          icu::UnicodeString::setTo(v203, 1, &v208, 37);
          v135 = sub_18C91FA40((icu::CharString *)&v221, "dayNames", "format", "wide", a4);
          sub_18C91FE24(v191, v198, (uint64_t)&v227, v135, (int *)a4);
          int v136 = sub_18C91FA40((icu::CharString *)&v221, "dayNames", "format", "abbreviated", a4);
          sub_18C91FE24(v194, v193, (uint64_t)&v227, v136, (int *)a4);
          int v137 = sub_18C91FA40((icu::CharString *)&v221, "dayNames", "format", "short", a4);
          sub_18C91FE24(v192, v200, (uint64_t)&v227, v137, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v192, v200, (int *)*v194, (const icu::UnicodeString *)*v193);
          }
          v138 = sub_18C91FA40((icu::CharString *)&v221, "dayNames", "stand-alone", "wide", a4);
          sub_18C91FE24(v169, v168, (uint64_t)&v227, v138, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v169, v168, (int *)*v191, (const icu::UnicodeString *)*v198);
          }
          v139 = sub_18C91FA40((icu::CharString *)&v221, "dayNames", "stand-alone", "abbreviated", a4);
          sub_18C91FE24(v164, v166, (uint64_t)&v227, v139, (int *)a4);
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v164, v166, (int *)*v194, (const icu::UnicodeString *)*v193);
          }
          uint64_t v140 = (uint64_t *)(v201 + 256);
          v141 = (icu::UnicodeString **)(v201 + 264);
          v142 = sub_18C91FA40((icu::CharString *)&v221, "dayNames", "stand-alone", "short", a4);
          sub_18C91FE24(v170, v165, (uint64_t)&v227, v142, (int *)a4);
          int v143 = *a4;
          if (*a4 == U_MISSING_RESOURCE_ERROR)
          {
            *a4 = U_ZERO_ERROR;
            icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v170, v165, (int *)*v192, (const icu::UnicodeString *)*(unsigned int *)v200);
            int v143 = *a4;
          }
          int v207 = v143;
          v144 = sub_18C91FA40((icu::CharString *)&v221, "dayNames", "format", "narrow", a4);
          sub_18C91FE24(v167, v8, (uint64_t)&v227, v144, &v207);
          int v206 = *a4;
          v145 = sub_18C91FA40((icu::CharString *)&v221, "dayNames", "stand-alone", "narrow", a4);
          sub_18C91FE24(v140, v141, (uint64_t)&v227, v145, &v206);
          if (v207 != 2 || v206 == 2)
          {
            long long v148 = (icu::UnicodeString *)v169;
            int v149 = a5;
            if (v207 == 2 || v206 != 2)
            {
              long long v147 = v8;
              long long v146 = (icu::UnicodeString *)v167;
              if (v207 != 2 || v206 != 2) {
                goto LABEL_175;
              }
              icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v167, (icu::UnicodeString **)v8, (int *)*v194, (const icu::UnicodeString *)*v193);
              long long v150 = (int *)*v194;
              int v111 = v178;
              unint64_t v151 = *v193;
              int v149 = a5;
            }
            else
            {
              long long v147 = v8;
              long long v146 = (icu::UnicodeString *)v167;
              long long v150 = (int *)*v167;
              unint64_t v151 = *v8;
            }
            icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v140, v141, v150, (const icu::UnicodeString *)v151);
          }
          else
          {
            long long v147 = v8;
            long long v146 = (icu::UnicodeString *)v167;
            icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v167, (icu::UnicodeString **)v8, (int *)*v140, (const icu::UnicodeString *)*(unsigned int *)v141);
            long long v148 = (icu::UnicodeString *)v169;
            int v149 = a5;
          }
LABEL_175:
          if (v149 && *(int *)a4 >= 1)
          {
            *a4 = U_USING_FALLBACK_WARNING;
            sub_18C91FFB8((icu::UnicodeString *)v201, v195, (const UChar *)L"BC", 2u, 3, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v180, (unsigned int *)v179, (const UChar *)L"BC", 2u, 3, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v182, (unsigned int *)v181, (const UChar *)L"BC", 2u, 3, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v197, v196, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v199, v111, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v184, v183, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v186, (unsigned int *)v185, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v188, (unsigned int *)v187, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v190, v189, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v191, v198, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v194, v193, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v192, (unsigned int *)v200, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_18C91FFB8(v146, v147, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_18C91FFB8(v148, (unsigned int *)v168, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v164, (unsigned int *)v166, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v170, (unsigned int *)v165, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v140, (unsigned int *)v141, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v163, v162, word_18CA92486, 2u, 3, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v153, (unsigned int *)v172, word_18CA92486, 2u, 3, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v127, v128, word_18CA92492, 4u, 2, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v177, (unsigned int *)v175, word_18CA92492, 4u, 2, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v157, (unsigned int *)v156, word_18CA92492, 4u, 2, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v161, (unsigned int *)v160, word_18CA92492, 4u, 2, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v159, (unsigned int *)v158, word_18CA92492, 4u, 2, (int *)a4);
            sub_18C91FFB8((icu::UnicodeString *)v155, v154, word_18CA92492, 4u, 2, (int *)a4);
            v205 = (const UChar *)L"GyMdkHmsSEDFwWahKzYeugAZvcLQqVUOXxrbB";
            icu::UnicodeString::setTo(v203, 1, &v205, 37);
          }
          ures_close(v171);
          ures_close(v152);
          int v28 = (void *)BYTE4(v222);
          if (BYTE4(v222)) {
            uprv_free(v221);
          }
          goto LABEL_180;
        }
        icu::DateFormatSymbols::assignArray((icu::UnicodeString *)v184, (icu::UnicodeString **)v183, (int *)*v199, (const icu::UnicodeString *)*v178);
        uint64_t v119 = (int *)*v199;
        int v111 = v178;
        unint64_t v120 = *v178;
      }
      else
      {
        uint64_t v119 = (int *)*v184;
        unint64_t v120 = *v183;
      }
      long long v121 = (icu::UnicodeString *)v190;
      long long v122 = (icu::UnicodeString **)v189;
    }
    else
    {
      uint64_t v119 = (int *)*v190;
      unint64_t v120 = *v189;
      long long v121 = (icu::UnicodeString *)v184;
      long long v122 = (icu::UnicodeString **)v183;
    }
    icu::DateFormatSymbols::assignArray(v121, v122, v119, (const icu::UnicodeString *)v120);
    goto LABEL_143;
  }
}

icu::DateFormatSymbols *icu::DateFormatSymbols::DateFormatSymbols(icu::DateFormatSymbols *this, UErrorCode *a2)
{
  *(void *)this = &unk_1EDA4BB90;
  *((void *)this + 39) = &unk_1EDA47700;
  *((_WORD *)this + 160) = 2;
  unint64_t v4 = (icu::Locale *)icu::Locale::Locale((icu::DateFormatSymbols *)((char *)this + 544));
  *((void *)this + 96) = &unk_1EDA47700;
  *((_WORD *)this + 388) = 2;
  Default = icu::Locale::getDefault(v4);
  icu::DateFormatSymbols::initializeData(this, (const icu::Locale *)Default, 0, a2, 1);
  return this;
}

icu::DateFormatSymbols *icu::DateFormatSymbols::DateFormatSymbols(icu::DateFormatSymbols *this, const icu::Locale *a2, const char *a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA4BB90;
  *((void *)this + 39) = &unk_1EDA47700;
  *((_WORD *)this + 160) = 2;
  icu::Locale::Locale((icu::DateFormatSymbols *)((char *)this + 544));
  *((void *)this + 96) = &unk_1EDA47700;
  *((_WORD *)this + 388) = 2;
  icu::DateFormatSymbols::initializeData(this, a2, a3, a4, 0);
  return this;
}

icu::DateFormatSymbols *icu::DateFormatSymbols::DateFormatSymbols(icu::DateFormatSymbols *this, const char *a2, UErrorCode *a3)
{
  *(void *)this = &unk_1EDA4BB90;
  *((void *)this + 39) = &unk_1EDA47700;
  *((_WORD *)this + 160) = 2;
  uint64_t v6 = (icu::Locale *)icu::Locale::Locale((icu::DateFormatSymbols *)((char *)this + 544));
  *((void *)this + 96) = &unk_1EDA47700;
  *((_WORD *)this + 388) = 2;
  Default = icu::Locale::getDefault(v6);
  icu::DateFormatSymbols::initializeData(this, (const icu::Locale *)Default, a2, a3, 1);
  return this;
}

icu::DateFormatSymbols *icu::DateFormatSymbols::DateFormatSymbols(icu::DateFormatSymbols *this, const icu::DateFormatSymbols *a2)
{
  *(void *)this = &unk_1EDA4BB90;
  *((void *)this + 39) = &unk_1EDA47700;
  *((_WORD *)this + 160) = 2;
  icu::Locale::Locale((icu::DateFormatSymbols *)((char *)this + 544));
  *((void *)this + 96) = &unk_1EDA47700;
  *((_WORD *)this + 388) = 2;
  icu::DateFormatSymbols::copyData(this, a2);
  return this;
}

__n128 icu::DateFormatSymbols::copyData(icu::DateFormatSymbols *this, const icu::DateFormatSymbols *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v12 = 0;
  v11[0] = (char *)this + 956;
  v11[1] = (char *)this + 1113;
  unint64_t v4 = (char *)a2 + 956;
  uint64_t v5 = (char *)a2 + 1113;
  v14[0] = (char *)a2 + 956;
  v14[1] = (char *)a2 + 1113;
  icu::LocaleBased::getLocale(v14, 1, &v12, (icu::Locale *)v15);
  v13[0] = v4;
  v13[1] = v5;
  icu::LocaleBased::getLocale(v13, 0, &v12, (icu::Locale *)v14);
  icu::LocaleBased::setLocaleIDs(v11, (uint64_t)v15, (uint64_t)v14);
  icu::Locale::~Locale((icu::Locale *)v14);
  icu::Locale::~Locale((icu::Locale *)v15);
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 8), (icu::UnicodeString **)this + 2, *((int **)a2 + 1), (const icu::UnicodeString *)*((unsigned int *)a2 + 4));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 24), (icu::UnicodeString **)this + 4, *((int **)a2 + 3), (const icu::UnicodeString *)*((unsigned int *)a2 + 8));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 40), (icu::UnicodeString **)this + 6, *((int **)a2 + 5), (const icu::UnicodeString *)*((unsigned int *)a2 + 12));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 56), (icu::UnicodeString **)this + 8, *((int **)a2 + 7), (const icu::UnicodeString *)*((unsigned int *)a2 + 16));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 72), (icu::UnicodeString **)this + 10, *((int **)a2 + 9), (const icu::UnicodeString *)*((unsigned int *)a2 + 20));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 88), (icu::UnicodeString **)this + 12, *((int **)a2 + 11), (const icu::UnicodeString *)*((unsigned int *)a2 + 24));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 104), (icu::UnicodeString **)this + 14, *((int **)a2 + 13), (const icu::UnicodeString *)*((unsigned int *)a2 + 28));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 120), (icu::UnicodeString **)this + 16, *((int **)a2 + 15), (const icu::UnicodeString *)*((unsigned int *)a2 + 32));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 136), (icu::UnicodeString **)this + 18, *((int **)a2 + 17), (const icu::UnicodeString *)*((unsigned int *)a2 + 36));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 152), (icu::UnicodeString **)this + 20, *((int **)a2 + 19), (const icu::UnicodeString *)*((unsigned int *)a2 + 40));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 168), (icu::UnicodeString **)this + 22, *((int **)a2 + 21), (const icu::UnicodeString *)*((unsigned int *)a2 + 44));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 184), (icu::UnicodeString **)this + 24, *((int **)a2 + 23), (const icu::UnicodeString *)*((unsigned int *)a2 + 48));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 200), (icu::UnicodeString **)this + 26, *((int **)a2 + 25), (const icu::UnicodeString *)*((unsigned int *)a2 + 52));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 216), (icu::UnicodeString **)this + 28, *((int **)a2 + 27), (const icu::UnicodeString *)*((unsigned int *)a2 + 56));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 232), (icu::UnicodeString **)this + 30, *((int **)a2 + 29), (const icu::UnicodeString *)*((unsigned int *)a2 + 60));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 248), (icu::UnicodeString **)this + 32, *((int **)a2 + 31), (const icu::UnicodeString *)*((unsigned int *)a2 + 64));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 264), (icu::UnicodeString **)this + 34, *((int **)a2 + 33), (const icu::UnicodeString *)*((unsigned int *)a2 + 68));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 280), (icu::UnicodeString **)this + 36, *((int **)a2 + 35), (const icu::UnicodeString *)*((unsigned int *)a2 + 72));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 296), (icu::UnicodeString **)this + 38, *((int **)a2 + 37), (const icu::UnicodeString *)*((unsigned int *)a2 + 76));
  icu::UnicodeString::fastCopyFrom((UChar **)this + 39, (UChar **)a2 + 39);
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 376), (icu::UnicodeString **)this + 48, *((int **)a2 + 47), (const icu::UnicodeString *)*((unsigned int *)a2 + 96));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 392), (icu::UnicodeString **)this + 50, *((int **)a2 + 49), (const icu::UnicodeString *)*((unsigned int *)a2 + 100));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 408), (icu::UnicodeString **)this + 52, *((int **)a2 + 51), (const icu::UnicodeString *)*((unsigned int *)a2 + 104));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 424), (icu::UnicodeString **)this + 54, *((int **)a2 + 53), (const icu::UnicodeString *)*((unsigned int *)a2 + 108));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 440), (icu::UnicodeString **)this + 56, *((int **)a2 + 55), (const icu::UnicodeString *)*((unsigned int *)a2 + 112));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 456), (icu::UnicodeString **)this + 58, *((int **)a2 + 57), (const icu::UnicodeString *)*((unsigned int *)a2 + 116));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 880), (icu::UnicodeString **)this + 111, *((int **)a2 + 110), (const icu::UnicodeString *)*((unsigned int *)a2 + 222));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 896), (icu::UnicodeString **)this + 113, *((int **)a2 + 112), (const icu::UnicodeString *)*((unsigned int *)a2 + 226));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 864), (icu::UnicodeString **)this + 109, *((int **)a2 + 108), (const icu::UnicodeString *)*((unsigned int *)a2 + 218));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 928), (icu::UnicodeString **)this + 117, *((int **)a2 + 116), (const icu::UnicodeString *)*((unsigned int *)a2 + 234));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 944), (icu::UnicodeString **)this + 119, *((int **)a2 + 118), (const icu::UnicodeString *)*((unsigned int *)a2 + 238));
  icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 912), (icu::UnicodeString **)this + 115, *((int **)a2 + 114), (const icu::UnicodeString *)*((unsigned int *)a2 + 230));
  uint64_t v6 = (int *)*((void *)a2 + 59);
  if (v6)
  {
    icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 472), (icu::UnicodeString **)this + 60, v6, (const icu::UnicodeString *)*((unsigned int *)a2 + 120));
  }
  else
  {
    *((void *)this + 59) = 0;
    *((_DWORD *)this + 120) = 0;
  }
  unint64_t v7 = (int *)*((void *)a2 + 61);
  if (v7)
  {
    icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 488), (icu::UnicodeString **)this + 62, v7, (const icu::UnicodeString *)*((unsigned int *)a2 + 124));
  }
  else
  {
    *((void *)this + 61) = 0;
    *((_DWORD *)this + 124) = 0;
  }
  int v8 = (int *)*((void *)a2 + 63);
  if (v8)
  {
    icu::DateFormatSymbols::assignArray((icu::DateFormatSymbols *)((char *)this + 504), (icu::UnicodeString **)this + 64, v8, (const icu::UnicodeString *)*((unsigned int *)a2 + 128));
  }
  else
  {
    *((void *)this + 63) = 0;
    *((_DWORD *)this + 128) = 0;
  }
  int v9 = (const icu::UnicodeString *const *)*((void *)a2 + 65);
  if (v9)
  {
    *((void *)this + 67) = *((void *)a2 + 67);
    icu::DateFormatSymbols::createZoneStrings(this, v9);
  }
  else
  {
    *((void *)this + 65) = 0;
    *((void *)this + 67) = 0;
  }
  icu::Locale::operator=((icu::DateFormatSymbols *)((char *)this + 544), (uint64_t)a2 + 544);
  *((void *)this + 66) = 0;
  icu::UnicodeString::fastCopyFrom((UChar **)this + 96, (UChar **)a2 + 96);
  __n128 result = *(__n128 *)((char *)a2 + 844);
  *((_OWORD *)this + 52) = *((_OWORD *)a2 + 52);
  *(__n128 *)((char *)this + 844) = result;
  return result;
}

icu::UnicodeString *icu::DateFormatSymbols::assignArray(icu::UnicodeString *this, icu::UnicodeString **a2, int *a3, const icu::UnicodeString *a4)
{
  unint64_t v4 = this;
  if (!a3)
  {
    *(_DWORD *)a2 = 0;
LABEL_16:
    *(void *)unint64_t v4 = 0;
    return this;
  }
  int v5 = (int)a4;
  *(_DWORD *)a2 = a4;
  if (a4 <= 1) {
    int v7 = 1;
  }
  else {
    int v7 = (int)a4;
  }
  uint64_t v8 = v7;
  if (v7 < 0) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = ((uint64_t)v7 << 6) | 0x10;
  }
  this = (icu::UnicodeString *)icu::UMemory::operator new[]((icu::UMemory *)v9, (unint64_t)a2);
  if (!this) {
    goto LABEL_16;
  }
  *(void *)this = 64;
  *((void *)this + 1) = v8;
  char v10 = (char *)this + 16;
  double v11 = (_WORD *)((char *)this + 16);
  do
  {
    *(void *)double v11 = &unk_1EDA47700;
    _OWORD v11[4] = 2;
    v10 += 64;
    v11 += 32;
  }
  while (v11 != (_WORD *)((char *)this + 64 * v8 + 16));
  *(void *)unint64_t v4 = (char *)this + 16;
  if (v5 >= 1)
  {
    unint64_t v12 = 0;
    unint64_t v13 = (unint64_t)v5 << 6;
    do
    {
      this = icu::UnicodeString::fastCopyFrom((UChar **)(*(void *)v4 + v12), (UChar **)&a3[v12 / 4]);
      v12 += 64;
    }
    while (v13 != v12);
  }
  return this;
}

void icu::DateFormatSymbols::createZoneStrings(icu::DateFormatSymbols *this, const icu::UnicodeString *const *a2)
{
  unint64_t v4 = uprv_malloc(8 * *((int *)this + 134));
  *((void *)this + 65) = v4;
  if (v4 && *((int *)this + 134) >= 1)
  {
    uint64_t v6 = 0;
    LODWORD(v7) = *((_DWORD *)this + 135);
    while (1)
    {
      if (v7 <= 1) {
        LODWORD(v7) = 1;
      }
      uint64_t v8 = (int)v7;
      uint64_t v9 = (icu::UMemory *)((int)v7 < 0 ? -1 : ((uint64_t)(int)v7 << 6) | 0x10);
      char v10 = (void *)icu::UMemory::operator new[](v9, v5);
      if (v10)
      {
        *char v10 = 64;
        v10[1] = v8;
        double v11 = v10 + 2;
        unint64_t v12 = v10 + 2;
        unint64_t v13 = v10 + 2;
        do
        {
          void *v13 = &unk_1EDA47700;
          *((_WORD *)v13 + 4) = 2;
          v12 += 8;
          v13 += 8;
        }
        while (v13 != &v10[8 * v8 + 2]);
      }
      else
      {
        double v11 = 0;
      }
      *(void *)(*((void *)this + 65) + 8 * v6) = v11;
      if (!*(void *)(*((void *)this + 65) + 8 * v6)) {
        break;
      }
      LODWORD(v7) = *((_DWORD *)this + 135);
      if ((int)v7 >= 1)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        do
        {
          icu::UnicodeString::fastCopyFrom((UChar **)(*(void *)(*((void *)this + 65) + 8 * v6) + v14), (UChar **)((char *)a2[v6] + v14));
          ++v15;
          uint64_t v7 = *((int *)this + 135);
          v14 += 64;
        }
        while (v15 < v7);
      }
      if (++v6 >= *((int *)this + 134)) {
        return;
      }
    }
    do
    {
      uint64_t v16 = *(void *)(*((void *)this + 65) + 8 * v6);
      if (v16)
      {
        int v17 = *(void **)(v16 - 8);
        if (v17)
        {
          uint64_t v18 = (void)v17 << 6;
          do
          {
            icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)(v16 - 64 + v18));
            v18 -= 64;
          }
          while (v18);
        }
        icu::UMemory::operator delete[]((void *)(v16 - 16));
      }
    }
    while (v6-- > 0);
    uprv_free(*((void **)this + 65));
    *((void *)this + 65) = 0;
  }
}

uint64_t icu::DateFormatSymbols::getLocale@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  v5[0] = (const char *)(a1 + 956);
  v5[1] = (const char *)(a1 + 1113);
  return icu::LocaleBased::getLocale(v5, a2, a3, a4);
}

icu::DateFormatSymbols *icu::DateFormatSymbols::operator=(icu::DateFormatSymbols *this, const icu::DateFormatSymbols *a2)
{
  if (this != a2)
  {
    icu::DateFormatSymbols::dispose(this);
    icu::DateFormatSymbols::copyData(this, a2);
  }
  return this;
}

void icu::DateFormatSymbols::dispose(icu::DateFormatSymbols *this)
{
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    int v3 = (char *)(v2 - 2);
    uint64_t v4 = *(v2 - 1);
    if (v4)
    {
      uint64_t v5 = v4 << 6;
      uint64_t v6 = (char *)(v2 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)&v6[v5]);
        v5 -= 64;
      }
      while (v5);
    }
    icu::UMemory::operator delete[](v3);
  }
  uint64_t v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = (char *)(v7 - 2);
    uint64_t v9 = *(v7 - 1);
    if (v9)
    {
      uint64_t v10 = v9 << 6;
      double v11 = (char *)(v7 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v11[v10]);
        v10 -= 64;
      }
      while (v10);
    }
    icu::UMemory::operator delete[](v8);
  }
  unint64_t v12 = (void *)*((void *)this + 5);
  if (v12)
  {
    unint64_t v13 = (char *)(v12 - 2);
    uint64_t v14 = *(v12 - 1);
    if (v14)
    {
      uint64_t v15 = v14 << 6;
      uint64_t v16 = (char *)(v12 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v16[v15]);
        v15 -= 64;
      }
      while (v15);
    }
    icu::UMemory::operator delete[](v13);
  }
  int v17 = (void *)*((void *)this + 7);
  if (v17)
  {
    uint64_t v18 = (char *)(v17 - 2);
    uint64_t v19 = *(v17 - 1);
    if (v19)
    {
      uint64_t v20 = v19 << 6;
      int v21 = (char *)(v17 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v21[v20]);
        v20 -= 64;
      }
      while (v20);
    }
    icu::UMemory::operator delete[](v18);
  }
  unint64_t v22 = (void *)*((void *)this + 9);
  if (v22)
  {
    UErrorCode v23 = (char *)(v22 - 2);
    uint64_t v24 = *(v22 - 1);
    if (v24)
    {
      uint64_t v25 = v24 << 6;
      uint64_t v26 = (char *)(v22 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v26[v25]);
        v25 -= 64;
      }
      while (v25);
    }
    icu::UMemory::operator delete[](v23);
  }
  uint64_t v27 = (void *)*((void *)this + 11);
  if (v27)
  {
    int v28 = (char *)(v27 - 2);
    uint64_t v29 = *(v27 - 1);
    if (v29)
    {
      uint64_t v30 = v29 << 6;
      uint64_t v31 = (char *)(v27 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v31[v30]);
        v30 -= 64;
      }
      while (v30);
    }
    icu::UMemory::operator delete[](v28);
  }
  int v32 = (void *)*((void *)this + 13);
  if (v32)
  {
    unint64_t v33 = (char *)(v32 - 2);
    uint64_t v34 = *(v32 - 1);
    if (v34)
    {
      uint64_t v35 = v34 << 6;
      unint64_t v36 = (char *)(v32 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v36[v35]);
        v35 -= 64;
      }
      while (v35);
    }
    icu::UMemory::operator delete[](v33);
  }
  int v37 = (void *)*((void *)this + 15);
  if (v37)
  {
    uint64_t v38 = (char *)(v37 - 2);
    uint64_t v39 = *(v37 - 1);
    if (v39)
    {
      uint64_t v40 = v39 << 6;
      uint64_t v41 = (char *)(v37 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v41[v40]);
        v40 -= 64;
      }
      while (v40);
    }
    icu::UMemory::operator delete[](v38);
  }
  uint64_t v42 = (void *)*((void *)this + 17);
  if (v42)
  {
    uint64_t v43 = (char *)(v42 - 2);
    uint64_t v44 = *(v42 - 1);
    if (v44)
    {
      uint64_t v45 = v44 << 6;
      double v46 = (char *)(v42 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v46[v45]);
        v45 -= 64;
      }
      while (v45);
    }
    icu::UMemory::operator delete[](v43);
  }
  int v47 = (void *)*((void *)this + 19);
  if (v47)
  {
    uint64_t v48 = (char *)(v47 - 2);
    uint64_t v49 = *(v47 - 1);
    if (v49)
    {
      uint64_t v50 = v49 << 6;
      unsigned int v51 = (char *)(v47 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v51[v50]);
        v50 -= 64;
      }
      while (v50);
    }
    icu::UMemory::operator delete[](v48);
  }
  uint64_t v52 = (void *)*((void *)this + 21);
  if (v52)
  {
    uint64_t v53 = (char *)(v52 - 2);
    uint64_t v54 = *(v52 - 1);
    if (v54)
    {
      uint64_t v55 = v54 << 6;
      int v56 = (char *)(v52 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)&v56[v55]);
        v55 -= 64;
      }
      while (v55);
    }
    icu::UMemory::operator delete[](v53);
  }
  uint64_t v57 = (void *)*((void *)this + 23);
  if (v57)
  {
    uint64_t v58 = (char *)(v57 - 2);
    uint64_t v59 = *(v57 - 1);
    if (v59)
    {
      uint64_t v60 = v59 << 6;
      uint64_t v61 = (char *)(v57 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)&v61[v60]);
        v60 -= 64;
      }
      while (v60);
    }
    icu::UMemory::operator delete[](v58);
  }
  int v62 = (void *)*((void *)this + 25);
  if (v62)
  {
    char v63 = (char *)(v62 - 2);
    uint64_t v64 = *(v62 - 1);
    if (v64)
    {
      uint64_t v65 = v64 << 6;
      float v66 = (char *)(v62 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)&v66[v65]);
        v65 -= 64;
      }
      while (v65);
    }
    icu::UMemory::operator delete[](v63);
  }
  uint64_t v67 = (void *)*((void *)this + 27);
  if (v67)
  {
    uint64_t v68 = (char *)(v67 - 2);
    uint64_t v69 = *(v67 - 1);
    if (v69)
    {
      uint64_t v70 = v69 << 6;
      int v71 = (char *)(v67 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)&v71[v70]);
        v70 -= 64;
      }
      while (v70);
    }
    icu::UMemory::operator delete[](v68);
  }
  int v72 = (void *)*((void *)this + 29);
  if (v72)
  {
    int v73 = (char *)(v72 - 2);
    uint64_t v74 = *(v72 - 1);
    if (v74)
    {
      uint64_t v75 = v74 << 6;
      uint64_t v76 = (char *)(v72 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v72, (icu::UnicodeString *)&v76[v75]);
        v75 -= 64;
      }
      while (v75);
    }
    icu::UMemory::operator delete[](v73);
  }
  uint64_t v77 = (void *)*((void *)this + 31);
  if (v77)
  {
    uint64_t v78 = (char *)(v77 - 2);
    uint64_t v79 = *(v77 - 1);
    if (v79)
    {
      uint64_t v80 = v79 << 6;
      int v81 = (char *)(v77 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v77, (icu::UnicodeString *)&v81[v80]);
        v80 -= 64;
      }
      while (v80);
    }
    icu::UMemory::operator delete[](v78);
  }
  char v82 = (void *)*((void *)this + 33);
  if (v82)
  {
    BOOL v83 = (char *)(v82 - 2);
    uint64_t v84 = *(v82 - 1);
    if (v84)
    {
      uint64_t v85 = v84 << 6;
      uint64_t v86 = (char *)(v82 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v82, (icu::UnicodeString *)&v86[v85]);
        v85 -= 64;
      }
      while (v85);
    }
    icu::UMemory::operator delete[](v83);
  }
  char v87 = (void *)*((void *)this + 35);
  if (v87)
  {
    int v88 = (char *)(v87 - 2);
    uint64_t v89 = *(v87 - 1);
    if (v89)
    {
      uint64_t v90 = v89 << 6;
      char v91 = (char *)(v87 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v87, (icu::UnicodeString *)&v91[v90]);
        v90 -= 64;
      }
      while (v90);
    }
    icu::UMemory::operator delete[](v88);
  }
  int v92 = (void *)*((void *)this + 37);
  if (v92)
  {
    uint64_t v93 = (char *)(v92 - 2);
    uint64_t v94 = *(v92 - 1);
    if (v94)
    {
      uint64_t v95 = v94 << 6;
      int v96 = (char *)(v92 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v92, (icu::UnicodeString *)&v96[v95]);
        v95 -= 64;
      }
      while (v95);
    }
    icu::UMemory::operator delete[](v93);
  }
  uint64_t v97 = (void *)*((void *)this + 47);
  if (v97)
  {
    uint64_t v98 = (char *)(v97 - 2);
    uint64_t v99 = *(v97 - 1);
    if (v99)
    {
      uint64_t v100 = v99 << 6;
      uint64_t v101 = (char *)(v97 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v97, (icu::UnicodeString *)&v101[v100]);
        v100 -= 64;
      }
      while (v100);
    }
    icu::UMemory::operator delete[](v98);
  }
  uint64_t v102 = (void *)*((void *)this + 49);
  if (v102)
  {
    uint64_t v103 = (char *)(v102 - 2);
    uint64_t v104 = *(v102 - 1);
    if (v104)
    {
      uint64_t v105 = v104 << 6;
      int v106 = (char *)(v102 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v102, (icu::UnicodeString *)&v106[v105]);
        v105 -= 64;
      }
      while (v105);
    }
    icu::UMemory::operator delete[](v103);
  }
  UErrorCode v107 = (void *)*((void *)this + 51);
  if (v107)
  {
    unint64_t v108 = (char *)(v107 - 2);
    uint64_t v109 = *(v107 - 1);
    if (v109)
    {
      uint64_t v110 = v109 << 6;
      int v111 = (char *)(v107 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v107, (icu::UnicodeString *)&v111[v110]);
        v110 -= 64;
      }
      while (v110);
    }
    icu::UMemory::operator delete[](v108);
  }
  int v112 = (void *)*((void *)this + 53);
  if (v112)
  {
    unsigned int v113 = (char *)(v112 - 2);
    uint64_t v114 = *(v112 - 1);
    if (v114)
    {
      uint64_t v115 = v114 << 6;
      int v116 = (char *)(v112 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v112, (icu::UnicodeString *)&v116[v115]);
        v115 -= 64;
      }
      while (v115);
    }
    icu::UMemory::operator delete[](v113);
  }
  uint64_t v117 = (void *)*((void *)this + 55);
  if (v117)
  {
    uint64_t v118 = (char *)(v117 - 2);
    uint64_t v119 = *(v117 - 1);
    if (v119)
    {
      uint64_t v120 = v119 << 6;
      long long v121 = (char *)(v117 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v117, (icu::UnicodeString *)&v121[v120]);
        v120 -= 64;
      }
      while (v120);
    }
    icu::UMemory::operator delete[](v118);
  }
  long long v122 = (void *)*((void *)this + 57);
  if (v122)
  {
    long long v123 = (char *)(v122 - 2);
    uint64_t v124 = *(v122 - 1);
    if (v124)
    {
      uint64_t v125 = v124 << 6;
      char v126 = (char *)(v122 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v122, (icu::UnicodeString *)&v126[v125]);
        v125 -= 64;
      }
      while (v125);
    }
    icu::UMemory::operator delete[](v123);
  }
  int v127 = (void *)*((void *)this + 59);
  if (v127)
  {
    size_t v128 = (char *)(v127 - 2);
    uint64_t v129 = *(v127 - 1);
    if (v129)
    {
      uint64_t v130 = v129 << 6;
      long long v131 = (char *)(v127 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v127, (icu::UnicodeString *)&v131[v130]);
        v130 -= 64;
      }
      while (v130);
    }
    icu::UMemory::operator delete[](v128);
  }
  int v132 = (void *)*((void *)this + 61);
  if (v132)
  {
    int v133 = (char *)(v132 - 2);
    uint64_t v134 = *(v132 - 1);
    if (v134)
    {
      uint64_t v135 = v134 << 6;
      int v136 = (char *)(v132 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v132, (icu::UnicodeString *)&v136[v135]);
        v135 -= 64;
      }
      while (v135);
    }
    icu::UMemory::operator delete[](v133);
  }
  int v137 = (void *)*((void *)this + 63);
  if (v137)
  {
    v138 = (char *)(v137 - 2);
    uint64_t v139 = *(v137 - 1);
    if (v139)
    {
      uint64_t v140 = v139 << 6;
      v141 = (char *)(v137 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v137, (icu::UnicodeString *)&v141[v140]);
        v140 -= 64;
      }
      while (v140);
    }
    icu::UMemory::operator delete[](v138);
  }
  v142 = (void *)*((void *)this + 108);
  if (v142)
  {
    int v143 = (char *)(v142 - 2);
    uint64_t v144 = *(v142 - 1);
    if (v144)
    {
      uint64_t v145 = v144 << 6;
      long long v146 = (char *)(v142 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v142, (icu::UnicodeString *)&v146[v145]);
        v145 -= 64;
      }
      while (v145);
    }
    icu::UMemory::operator delete[](v143);
  }
  long long v147 = (void *)*((void *)this + 110);
  if (v147)
  {
    long long v148 = (char *)(v147 - 2);
    uint64_t v149 = *(v147 - 1);
    if (v149)
    {
      uint64_t v150 = v149 << 6;
      unint64_t v151 = (char *)(v147 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v147, (icu::UnicodeString *)&v151[v150]);
        v150 -= 64;
      }
      while (v150);
    }
    icu::UMemory::operator delete[](v148);
  }
  uint64_t v152 = (void *)*((void *)this + 112);
  if (v152)
  {
    v153 = (char *)(v152 - 2);
    uint64_t v154 = *(v152 - 1);
    if (v154)
    {
      uint64_t v155 = v154 << 6;
      long long v156 = (char *)(v152 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v152, (icu::UnicodeString *)&v156[v155]);
        v155 -= 64;
      }
      while (v155);
    }
    icu::UMemory::operator delete[](v153);
  }
  long long v157 = (void *)*((void *)this + 114);
  if (v157)
  {
    long long v158 = (char *)(v157 - 2);
    uint64_t v159 = *(v157 - 1);
    if (v159)
    {
      uint64_t v160 = v159 << 6;
      uint64_t v161 = (char *)(v157 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v157, (icu::UnicodeString *)&v161[v160]);
        v160 -= 64;
      }
      while (v160);
    }
    icu::UMemory::operator delete[](v158);
  }
  v162 = (void *)*((void *)this + 116);
  if (v162)
  {
    v163 = (char *)(v162 - 2);
    uint64_t v164 = *(v162 - 1);
    if (v164)
    {
      uint64_t v165 = v164 << 6;
      long long v166 = (char *)(v162 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v162, (icu::UnicodeString *)&v166[v165]);
        v165 -= 64;
      }
      while (v165);
    }
    icu::UMemory::operator delete[](v163);
  }
  long long v167 = (void *)*((void *)this + 118);
  if (v167)
  {
    long long v168 = (char *)(v167 - 2);
    uint64_t v169 = *(v167 - 1);
    if (v169)
    {
      uint64_t v170 = v169 << 6;
      uint64_t v171 = (char *)(v167 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v167, (icu::UnicodeString *)&v171[v170]);
        v170 -= 64;
      }
      while (v170);
    }
    icu::UMemory::operator delete[](v168);
  }

  icu::DateFormatSymbols::disposeZoneStrings(this);
}

void icu::DateFormatSymbols::~DateFormatSymbols(icu::DateFormatSymbols *this)
{
  icu::DateFormatSymbols::dispose(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::DateFormatSymbols *)((char *)this + 768));
  icu::Locale::~Locale((icu::DateFormatSymbols *)((char *)this + 544));
  icu::UnicodeString::~UnicodeString(v3, (icu::DateFormatSymbols *)((char *)this + 312));

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::DateFormatSymbols::~DateFormatSymbols(this);

  icu::UMemory::operator delete(v1);
}

void icu::DateFormatSymbols::disposeZoneStrings(icu::DateFormatSymbols *this)
{
  unint64_t v2 = (void **)((char *)this + 520);
  int v3 = (void *)*((void *)this + 65);
  if (v3)
  {
    int v4 = *((_DWORD *)this + 134);
    if (v4 >= 1)
    {
      for (uint64_t i = 0; i < v4; ++i)
      {
        uint64_t v6 = *((void *)*v2 + i);
        if (v6)
        {
          uint64_t v7 = *(void **)(v6 - 8);
          if (v7)
          {
            uint64_t v8 = (void)v7 << 6;
            do
            {
              icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(v6 - 64 + v8));
              v8 -= 64;
            }
            while (v8);
          }
          icu::UMemory::operator delete[]((void *)(v6 - 16));
          int v4 = *((_DWORD *)this + 134);
        }
      }
      int v3 = *v2;
    }
    uprv_free(v3);
  }
  uint64_t v9 = (void *)*((void *)this + 66);
  if (v9)
  {
    int v10 = *((_DWORD *)this + 134);
    if (v10 >= 1)
    {
      for (uint64_t j = 0; j < v10; ++j)
      {
        uint64_t v12 = *(void *)(*((void *)this + 66) + 8 * j);
        if (v12)
        {
          unint64_t v13 = *(void **)(v12 - 8);
          if (v13)
          {
            uint64_t v14 = (void)v13 << 6;
            do
            {
              icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)(v12 - 64 + v14));
              v14 -= 64;
            }
            while (v14);
          }
          icu::UMemory::operator delete[]((void *)(v12 - 16));
          int v10 = *((_DWORD *)this + 134);
        }
      }
      uint64_t v9 = (void *)*((void *)this + 66);
    }
    uprv_free(v9);
  }
  void *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
}

BOOL icu::DateFormatSymbols::arrayCompare(icu::DateFormatSymbols *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  BOOL result = 1;
  if (this != a2)
  {
    int v5 = (int)a3;
    if ((int)a3 >= 1)
    {
      uint64_t v6 = a2;
      unint64_t v7 = (unint64_t)a3 << 6;
      do
      {
        uint64_t v8 = (char *)v6 + v7;
        unsigned int v9 = *(unsigned __int16 *)((char *)this + v7 - 56);
        if (v9)
        {
          if ((*((_WORD *)v8 - 28) & 1) == 0) {
            return 0;
          }
        }
        else
        {
          if ((v9 & 0x8000) != 0) {
            int v10 = *(_DWORD *)((char *)this + v7 - 52);
          }
          else {
            int v10 = v9 >> 5;
          }
          BOOL result = 0;
          unsigned int v11 = *(unsigned __int16 *)((char *)v6 + v7 - 56);
          unsigned int v12 = *(_DWORD *)((char *)v6 + v7 - 52);
          if ((v11 & 0x8000u) == 0) {
            unsigned int v12 = v11 >> 5;
          }
          if (v11) {
            return result;
          }
          if (v10 != v12) {
            return result;
          }
          BOOL result = icu::UnicodeString::doEquals((icu::DateFormatSymbols *)((char *)this + v7 - 64), (const icu::UnicodeString *)(v8 - 64), v10);
          if (!result) {
            return result;
          }
        }
        uint64_t v6 = (const icu::UnicodeString *)((char *)v6 - 64);
        this = (icu::DateFormatSymbols *)((char *)this - 64);
        BOOL v13 = __OFSUB__(v5--, 1);
      }
      while (!((v5 < 0) ^ v13 | (v5 == 0)));
      return 1;
    }
  }
  return result;
}

BOOL icu::DateFormatSymbols::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  unint64_t v2 = (const icu::UnicodeString *)*(unsigned int *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)
    || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)
    || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)
    || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128)
    || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144)
    || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160)
    || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176)
    || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192)
    || *(_DWORD *)(a1 + 208) != *(_DWORD *)(a2 + 208)
    || *(_DWORD *)(a1 + 224) != *(_DWORD *)(a2 + 224)
    || *(_DWORD *)(a1 + 240) != *(_DWORD *)(a2 + 240)
    || *(_DWORD *)(a1 + 256) != *(_DWORD *)(a2 + 256)
    || *(_DWORD *)(a1 + 272) != *(_DWORD *)(a2 + 272)
    || *(_DWORD *)(a1 + 288) != *(_DWORD *)(a2 + 288)
    || *(_DWORD *)(a1 + 304) != *(_DWORD *)(a2 + 304)
    || *(_DWORD *)(a1 + 384) != *(_DWORD *)(a2 + 384)
    || *(_DWORD *)(a1 + 400) != *(_DWORD *)(a2 + 400)
    || *(_DWORD *)(a1 + 416) != *(_DWORD *)(a2 + 416)
    || *(_DWORD *)(a1 + 432) != *(_DWORD *)(a2 + 432)
    || *(_DWORD *)(a1 + 448) != *(_DWORD *)(a2 + 448)
    || *(_DWORD *)(a1 + 464) != *(_DWORD *)(a2 + 464)
    || *(_DWORD *)(a1 + 480) != *(_DWORD *)(a2 + 480)
    || *(_DWORD *)(a1 + 496) != *(_DWORD *)(a2 + 496)
    || *(_DWORD *)(a1 + 512) != *(_DWORD *)(a2 + 512)
    || *(_DWORD *)(a1 + 872) != *(_DWORD *)(a2 + 872)
    || *(_DWORD *)(a1 + 888) != *(_DWORD *)(a2 + 888)
    || *(_DWORD *)(a1 + 904) != *(_DWORD *)(a2 + 904)
    || *(_DWORD *)(a1 + 920) != *(_DWORD *)(a2 + 920)
    || *(_DWORD *)(a1 + 936) != *(_DWORD *)(a2 + 936)
    || *(_DWORD *)(a1 + 952) != *(_DWORD *)(a2 + 952))
  {
    return 0;
  }
  BOOL v3 = *(void *)(a1 + 832) == *(void *)(a2 + 832) && *(void *)(a1 + 840) == *(void *)(a2 + 840);
  BOOL v4 = v3 && *(void *)(a1 + 848) == *(void *)(a2 + 848);
  if (!v4 || *(_DWORD *)(a1 + 856) != (unint64_t)*(unsigned int *)(a2 + 856)) {
    return 0;
  }
  BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 8), *(const icu::UnicodeString **)(a2 + 8), v2);
  if (result)
  {
    BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 24), *(const icu::UnicodeString **)(a2 + 24), (const icu::UnicodeString *)*(unsigned int *)(a1 + 32));
    if (result)
    {
      BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 40), *(const icu::UnicodeString **)(a2 + 40), (const icu::UnicodeString *)*(unsigned int *)(a1 + 48));
      if (result)
      {
        BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 56), *(const icu::UnicodeString **)(a2 + 56), (const icu::UnicodeString *)*(unsigned int *)(a1 + 64));
        if (result)
        {
          BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 72), *(const icu::UnicodeString **)(a2 + 72), (const icu::UnicodeString *)*(unsigned int *)(a1 + 80));
          if (result)
          {
            BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 88), *(const icu::UnicodeString **)(a2 + 88), (const icu::UnicodeString *)*(unsigned int *)(a1 + 96));
            if (result)
            {
              BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 104), *(const icu::UnicodeString **)(a2 + 104), (const icu::UnicodeString *)*(unsigned int *)(a1 + 112));
              if (result)
              {
                BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 120), *(const icu::UnicodeString **)(a2 + 120), (const icu::UnicodeString *)*(unsigned int *)(a1 + 128));
                if (result)
                {
                  BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 136), *(const icu::UnicodeString **)(a2 + 136), (const icu::UnicodeString *)*(unsigned int *)(a1 + 144));
                  if (result)
                  {
                    BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 152), *(const icu::UnicodeString **)(a2 + 152), (const icu::UnicodeString *)*(unsigned int *)(a1 + 160));
                    if (result)
                    {
                      BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 168), *(const icu::UnicodeString **)(a2 + 168), (const icu::UnicodeString *)*(unsigned int *)(a1 + 176));
                      if (result)
                      {
                        BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 184), *(const icu::UnicodeString **)(a2 + 184), (const icu::UnicodeString *)*(unsigned int *)(a1 + 192));
                        if (result)
                        {
                          BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 200), *(const icu::UnicodeString **)(a2 + 200), (const icu::UnicodeString *)*(unsigned int *)(a1 + 208));
                          if (result)
                          {
                            BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 216), *(const icu::UnicodeString **)(a2 + 216), (const icu::UnicodeString *)*(unsigned int *)(a1 + 224));
                            if (result)
                            {
                              BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 232), *(const icu::UnicodeString **)(a2 + 232), (const icu::UnicodeString *)*(unsigned int *)(a1 + 240));
                              if (result)
                              {
                                BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 248), *(const icu::UnicodeString **)(a2 + 248), (const icu::UnicodeString *)*(unsigned int *)(a1 + 256));
                                if (result)
                                {
                                  BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 264), *(const icu::UnicodeString **)(a2 + 264), (const icu::UnicodeString *)*(unsigned int *)(a1 + 272));
                                  if (result)
                                  {
                                    BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 280), *(const icu::UnicodeString **)(a2 + 280), (const icu::UnicodeString *)*(unsigned int *)(a1 + 288));
                                    if (result)
                                    {
                                      BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 296), *(const icu::UnicodeString **)(a2 + 296), (const icu::UnicodeString *)*(unsigned int *)(a1 + 304));
                                      if (result)
                                      {
                                        BOOL result = sub_18C830FC4(a1 + 312, a2 + 312);
                                        if (result)
                                        {
                                          BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 376), *(const icu::UnicodeString **)(a2 + 376), (const icu::UnicodeString *)*(unsigned int *)(a1 + 384));
                                          if (result)
                                          {
                                            BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 392), *(const icu::UnicodeString **)(a2 + 392), (const icu::UnicodeString *)*(unsigned int *)(a1 + 400));
                                            if (result)
                                            {
                                              BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 408), *(const icu::UnicodeString **)(a2 + 408), (const icu::UnicodeString *)*(unsigned int *)(a1 + 416));
                                              if (result)
                                              {
                                                BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 424), *(const icu::UnicodeString **)(a2 + 424), (const icu::UnicodeString *)*(unsigned int *)(a1 + 432));
                                                if (result)
                                                {
                                                  BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 440), *(const icu::UnicodeString **)(a2 + 440), (const icu::UnicodeString *)*(unsigned int *)(a1 + 448));
                                                  if (result)
                                                  {
                                                    BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 456), *(const icu::UnicodeString **)(a2 + 456), (const icu::UnicodeString *)*(unsigned int *)(a1 + 464));
                                                    if (result)
                                                    {
                                                      BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 472), *(const icu::UnicodeString **)(a2 + 472), (const icu::UnicodeString *)*(unsigned int *)(a1 + 480));
                                                      if (result)
                                                      {
                                                        BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 488), *(const icu::UnicodeString **)(a2 + 488), (const icu::UnicodeString *)*(unsigned int *)(a1 + 496));
                                                        if (result)
                                                        {
                                                          BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 504), *(const icu::UnicodeString **)(a2 + 504), (const icu::UnicodeString *)*(unsigned int *)(a1 + 512));
                                                          if (result)
                                                          {
                                                            BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 864), *(const icu::UnicodeString **)(a2 + 864), (const icu::UnicodeString *)*(unsigned int *)(a1 + 872));
                                                            if (result)
                                                            {
                                                              BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 880), *(const icu::UnicodeString **)(a2 + 880), (const icu::UnicodeString *)*(unsigned int *)(a1 + 888));
                                                              if (result)
                                                              {
                                                                BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 896), *(const icu::UnicodeString **)(a2 + 896), (const icu::UnicodeString *)*(unsigned int *)(a1 + 904));
                                                                if (result)
                                                                {
                                                                  BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 912), *(const icu::UnicodeString **)(a2 + 912), (const icu::UnicodeString *)*(unsigned int *)(a1 + 920));
                                                                  if (result)
                                                                  {
                                                                    BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 928), *(const icu::UnicodeString **)(a2 + 928), (const icu::UnicodeString *)*(unsigned int *)(a1 + 936));
                                                                    if (result)
                                                                    {
                                                                      BOOL result = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(a1 + 944), *(const icu::UnicodeString **)(a2 + 944), (const icu::UnicodeString *)*(unsigned int *)(a1 + 936));
                                                                      if (result)
                                                                      {
                                                                        uint64_t v7 = *(void *)(a1 + 520);
                                                                        uint64_t v8 = *(void *)(a2 + 520);
                                                                        if (!(v7 | v8)) {
                                                                          return icu::Locale::operator==(a1 + 544, a2 + 544);
                                                                        }
                                                                        if (!v7) {
                                                                          return 0;
                                                                        }
                                                                        if (!v8) {
                                                                          return 0;
                                                                        }
                                                                        int v9 = *(_DWORD *)(a1 + 536);
                                                                        if (v9 != *(_DWORD *)(a2 + 536)
                                                                          || *(_DWORD *)(a1 + 540) != *(_DWORD *)(a2 + 540))
                                                                        {
                                                                          return 0;
                                                                        }
                                                                        if (v9 < 1) {
                                                                          return 1;
                                                                        }
                                                                        uint64_t v10 = 0;
                                                                        do
                                                                        {
                                                                          BOOL v11 = icu::DateFormatSymbols::arrayCompare(*(icu::DateFormatSymbols **)(*(void *)(a1 + 520) + 8 * v10), *(const icu::UnicodeString **)(*(void *)(a2 + 520) + 8 * v10), (const icu::UnicodeString *)*(unsigned int *)(a1 + 540));
                                                                          BOOL result = v11;
                                                                        }
                                                                        while (++v10 < *(int *)(a1 + 536) && v11);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t icu::DateFormatSymbols::getEras(icu::DateFormatSymbols *this, int *a2)
{
  *a2 = *((_DWORD *)this + 4);
  return *((void *)this + 1);
}

uint64_t icu::DateFormatSymbols::getEraNames(icu::DateFormatSymbols *this, int *a2)
{
  *a2 = *((_DWORD *)this + 8);
  return *((void *)this + 3);
}

uint64_t icu::DateFormatSymbols::getNarrowEras(icu::DateFormatSymbols *this, int *a2)
{
  *a2 = *((_DWORD *)this + 12);
  return *((void *)this + 5);
}

uint64_t icu::DateFormatSymbols::getMonths(icu::DateFormatSymbols *this, int *a2)
{
  *a2 = *((_DWORD *)this + 16);
  return *((void *)this + 7);
}

uint64_t icu::DateFormatSymbols::getShortMonths(icu::DateFormatSymbols *this, int *a2)
{
  *a2 = *((_DWORD *)this + 20);
  return *((void *)this + 9);
}

uint64_t icu::DateFormatSymbols::getMonths(_DWORD *a1, _DWORD *a2, int a3, int a4)
{
  if (a3 == 1)
  {
    switch(a4)
    {
      case 0:
      case 3:
        *a2 = a1[32];
        BOOL v4 = a1 + 30;
        break;
      case 1:
        *a2 = a1[28];
        BOOL v4 = a1 + 26;
        break;
      case 2:
        *a2 = a1[36];
        BOOL v4 = a1 + 34;
        break;
      default:
        return 0;
    }
    return *(void *)v4;
  }
  else
  {
    if (!a3)
    {
      switch(a4)
      {
        case 0:
        case 3:
          *a2 = a1[20];
          BOOL v4 = a1 + 18;
          return *(void *)v4;
        case 1:
          *a2 = a1[16];
          BOOL v4 = a1 + 14;
          return *(void *)v4;
        case 2:
          *a2 = a1[24];
          BOOL v4 = a1 + 22;
          return *(void *)v4;
        default:
          return 0;
      }
    }
    return 0;
  }
}

uint64_t icu::DateFormatSymbols::getWeekdays(icu::DateFormatSymbols *this, int *a2)
{
  *a2 = *((_DWORD *)this + 40);
  return *((void *)this + 19);
}

uint64_t icu::DateFormatSymbols::getShortWeekdays(icu::DateFormatSymbols *this, int *a2)
{
  *a2 = *((_DWORD *)this + 44);
  return *((void *)this + 21);
}

uint64_t icu::DateFormatSymbols::getWeekdays(_DWORD *a1, _DWORD *a2, int a3, int a4)
{
  if (a3 == 1)
  {
    switch(a4)
    {
      case 0:
        *a2 = a1[60];
        BOOL v4 = a1 + 58;
        break;
      case 1:
        *a2 = a1[56];
        BOOL v4 = a1 + 54;
        break;
      case 2:
        *a2 = a1[68];
        BOOL v4 = a1 + 66;
        break;
      case 3:
        *a2 = a1[64];
        BOOL v4 = a1 + 62;
        break;
      default:
        return 0;
    }
    return *(void *)v4;
  }
  else
  {
    if (!a3)
    {
      switch(a4)
      {
        case 0:
          *a2 = a1[44];
          BOOL v4 = a1 + 42;
          return *(void *)v4;
        case 1:
          *a2 = a1[40];
          BOOL v4 = a1 + 38;
          return *(void *)v4;
        case 2:
          *a2 = a1[52];
          BOOL v4 = a1 + 50;
          return *(void *)v4;
        case 3:
          *a2 = a1[48];
          BOOL v4 = a1 + 46;
          return *(void *)v4;
        default:
          return 0;
      }
    }
    return 0;
  }
}

uint64_t icu::DateFormatSymbols::getQuarters(_DWORD *a1, _DWORD *a2, int a3, int a4)
{
  if (a3 == 1)
  {
    switch(a4)
    {
      case 0:
      case 3:
        *a2 = a1[112];
        BOOL v4 = a1 + 110;
        break;
      case 1:
        *a2 = a1[108];
        BOOL v4 = a1 + 106;
        break;
      case 2:
        *a2 = a1[116];
        BOOL v4 = a1 + 114;
        break;
      default:
        return 0;
    }
    return *(void *)v4;
  }
  else
  {
    if (!a3)
    {
      switch(a4)
      {
        case 0:
        case 3:
          *a2 = a1[100];
          BOOL v4 = a1 + 98;
          return *(void *)v4;
        case 1:
          *a2 = a1[96];
          BOOL v4 = a1 + 94;
          return *(void *)v4;
        case 2:
          *a2 = a1[104];
          BOOL v4 = a1 + 102;
          return *(void *)v4;
        default:
          return 0;
      }
    }
    return 0;
  }
}

icu::UnicodeString *icu::DateFormatSymbols::getTimeSeparatorString(UChar **this, UChar **a2)
{
  return icu::UnicodeString::fastCopyFrom(a2, this + 39);
}

uint64_t icu::DateFormatSymbols::getAmPmStrings(icu::DateFormatSymbols *this, int *a2)
{
  *a2 = *((_DWORD *)this + 72);
  return *((void *)this + 35);
}

uint64_t icu::DateFormatSymbols::getLeapMonthPatterns(icu::DateFormatSymbols *this, int *a2)
{
  *a2 = *((_DWORD *)this + 120);
  return *((void *)this + 59);
}

uint64_t icu::DateFormatSymbols::getYearNames(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 496);
  return *(void *)(a1 + 488);
}

uint64_t icu::DateFormatSymbols::setYearNames(uint64_t result, unint64_t a2, int a3, int a4, int a5)
{
  if (!(a5 | a4))
  {
    uint64_t v6 = (UChar **)a2;
    uint64_t v7 = result;
    uint64_t v8 = *(void **)(result + 488);
    if (v8)
    {
      int v9 = (char *)(v8 - 2);
      uint64_t v10 = *(v8 - 1);
      if (v10)
      {
        uint64_t v11 = v10 << 6;
        unsigned int v12 = (char *)(v8 - 8);
        do
        {
          icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v12[v11]);
          v11 -= 64;
        }
        while (v11);
      }
      icu::UMemory::operator delete[](v9);
    }
    if (a3 <= 1) {
      int v13 = 1;
    }
    else {
      int v13 = a3;
    }
    uint64_t v14 = v13;
    if (v13 < 0) {
      uint64_t v15 = -1;
    }
    else {
      uint64_t v15 = ((uint64_t)v13 << 6) | 0x10;
    }
    BOOL result = icu::UMemory::operator new[]((icu::UMemory *)v15, a2);
    if (result)
    {
      *(void *)BOOL result = 64;
      *(void *)(result + 8) = v14;
      result += 16;
      uint64_t v16 = result;
      uint64_t v17 = result;
      do
      {
        *(void *)uint64_t v17 = &unk_1EDA47700;
        *(_WORD *)(v17 + 8) = 2;
        v16 += 64;
        v17 += 64;
      }
      while (v17 != result + (v14 << 6));
    }
    *(void *)(v7 + 488) = result;
    if (a3 >= 1)
    {
      unsigned int v18 = a3 + 1;
      do
      {
        uint64_t v19 = result + 64;
        icu::UnicodeString::operator=((UChar **)result, v6);
        --v18;
        BOOL result = v19;
        v6 += 8;
      }
      while (v18 > 1);
    }
    *(_DWORD *)(v7 + 496) = a3;
  }
  return result;
}

uint64_t icu::DateFormatSymbols::getZodiacNames(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 512);
  return *(void *)(a1 + 504);
}

uint64_t icu::DateFormatSymbols::setZodiacNames(uint64_t result, unint64_t a2, int a3, int a4, int a5)
{
  if (!(a5 | a4))
  {
    uint64_t v6 = (UChar **)a2;
    uint64_t v7 = result;
    uint64_t v8 = *(void **)(result + 504);
    if (v8)
    {
      int v9 = (char *)(v8 - 2);
      uint64_t v10 = *(v8 - 1);
      if (v10)
      {
        uint64_t v11 = v10 << 6;
        unsigned int v12 = (char *)(v8 - 8);
        do
        {
          icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v12[v11]);
          v11 -= 64;
        }
        while (v11);
      }
      icu::UMemory::operator delete[](v9);
    }
    if (a3 <= 1) {
      int v13 = 1;
    }
    else {
      int v13 = a3;
    }
    uint64_t v14 = v13;
    if (v13 < 0) {
      uint64_t v15 = -1;
    }
    else {
      uint64_t v15 = ((uint64_t)v13 << 6) | 0x10;
    }
    BOOL result = icu::UMemory::operator new[]((icu::UMemory *)v15, a2);
    if (result)
    {
      *(void *)BOOL result = 64;
      *(void *)(result + 8) = v14;
      result += 16;
      uint64_t v16 = result;
      uint64_t v17 = result;
      do
      {
        *(void *)uint64_t v17 = &unk_1EDA47700;
        *(_WORD *)(v17 + 8) = 2;
        v16 += 64;
        v17 += 64;
      }
      while (v17 != result + (v14 << 6));
    }
    *(void *)(v7 + 504) = result;
    if (a3 >= 1)
    {
      unsigned int v18 = a3 + 1;
      do
      {
        uint64_t v19 = result + 64;
        icu::UnicodeString::operator=((UChar **)result, v6);
        --v18;
        BOOL result = v19;
        v6 += 8;
      }
      while (v18 > 1);
    }
    *(_DWORD *)(v7 + 512) = a3;
  }
  return result;
}

uint64_t icu::DateFormatSymbols::setEras(icu::DateFormatSymbols *this, UChar **a2, int a3)
{
  BOOL v4 = a2;
  uint64_t v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    uint64_t v7 = (char *)(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    if (v8)
    {
      uint64_t v9 = v8 << 6;
      uint64_t v10 = (char *)(v6 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10[v9]);
        v9 -= 64;
      }
      while (v9);
    }
    icu::UMemory::operator delete[](v7);
  }
  if (a3 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a3;
  }
  uint64_t v12 = v11;
  if (v11 < 0) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = ((uint64_t)v11 << 6) | 0x10;
  }
  uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v13, (unint64_t)a2);
  if (result)
  {
    *(void *)uint64_t result = 64;
    *(void *)(result + 8) = v12;
    result += 16;
    uint64_t v15 = result;
    uint64_t v16 = result;
    do
    {
      *(void *)uint64_t v16 = &unk_1EDA47700;
      *(_WORD *)(v16 + 8) = 2;
      v15 += 64;
      v16 += 64;
    }
    while (v16 != result + (v12 << 6));
  }
  *((void *)this + 1) = result;
  if (a3 >= 1)
  {
    unsigned int v17 = a3 + 1;
    do
    {
      uint64_t v18 = result + 64;
      icu::UnicodeString::operator=((UChar **)result, v4);
      --v17;
      uint64_t result = v18;
      v4 += 8;
    }
    while (v17 > 1);
  }
  *((_DWORD *)this + 4) = a3;
  return result;
}

uint64_t icu::DateFormatSymbols::setEraNames(icu::DateFormatSymbols *this, UChar **a2, int a3)
{
  BOOL v4 = a2;
  uint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = (char *)(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    if (v8)
    {
      uint64_t v9 = v8 << 6;
      uint64_t v10 = (char *)(v6 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10[v9]);
        v9 -= 64;
      }
      while (v9);
    }
    icu::UMemory::operator delete[](v7);
  }
  if (a3 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a3;
  }
  uint64_t v12 = v11;
  if (v11 < 0) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = ((uint64_t)v11 << 6) | 0x10;
  }
  uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v13, (unint64_t)a2);
  if (result)
  {
    *(void *)uint64_t result = 64;
    *(void *)(result + 8) = v12;
    result += 16;
    uint64_t v15 = result;
    uint64_t v16 = result;
    do
    {
      *(void *)uint64_t v16 = &unk_1EDA47700;
      *(_WORD *)(v16 + 8) = 2;
      v15 += 64;
      v16 += 64;
    }
    while (v16 != result + (v12 << 6));
  }
  *((void *)this + 3) = result;
  if (a3 >= 1)
  {
    unsigned int v17 = a3 + 1;
    do
    {
      uint64_t v18 = result + 64;
      icu::UnicodeString::operator=((UChar **)result, v4);
      --v17;
      uint64_t result = v18;
      v4 += 8;
    }
    while (v17 > 1);
  }
  *((_DWORD *)this + 8) = a3;
  return result;
}

uint64_t icu::DateFormatSymbols::setNarrowEras(icu::DateFormatSymbols *this, UChar **a2, int a3)
{
  BOOL v4 = a2;
  uint64_t v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    uint64_t v7 = (char *)(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    if (v8)
    {
      uint64_t v9 = v8 << 6;
      uint64_t v10 = (char *)(v6 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10[v9]);
        v9 -= 64;
      }
      while (v9);
    }
    icu::UMemory::operator delete[](v7);
  }
  if (a3 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a3;
  }
  uint64_t v12 = v11;
  if (v11 < 0) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = ((uint64_t)v11 << 6) | 0x10;
  }
  uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v13, (unint64_t)a2);
  if (result)
  {
    *(void *)uint64_t result = 64;
    *(void *)(result + 8) = v12;
    result += 16;
    uint64_t v15 = result;
    uint64_t v16 = result;
    do
    {
      *(void *)uint64_t v16 = &unk_1EDA47700;
      *(_WORD *)(v16 + 8) = 2;
      v15 += 64;
      v16 += 64;
    }
    while (v16 != result + (v12 << 6));
  }
  *((void *)this + 5) = result;
  if (a3 >= 1)
  {
    unsigned int v17 = a3 + 1;
    do
    {
      uint64_t v18 = result + 64;
      icu::UnicodeString::operator=((UChar **)result, v4);
      --v17;
      uint64_t result = v18;
      v4 += 8;
    }
    while (v17 > 1);
  }
  *((_DWORD *)this + 12) = a3;
  return result;
}