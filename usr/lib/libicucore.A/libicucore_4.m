void sub_18C992818(icu::numparse::impl::NumberParseMatcher *a1)
{
  void *v1;
  uint64_t vars8;

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C992844(icu::numparse::impl::NumberParseMatcher *a1)
{
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C99286C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA50A50;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 8));

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C9928C0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA50A50;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v2);
}

uint64_t *unumrf_openResult(_DWORD *a1, unint64_t a2)
{
  v2 = (uint64_t *)*a1;
  if ((int)v2 > 0) {
    return 0;
  }
  v5 = icu::UMemory::operator new(v2, (icu::UMemory *)0x1F8, a2);
  v3 = v5;
  if (v5)
  {
    *(_DWORD *)v5 = 1430672896;
    v5[1] = 0;
    *((_DWORD *)v5 + 4) = 1178881536;
    v5[3] = (uint64_t)&unk_1EDA4F840;
    v5[4] = (uint64_t)(v5 + 6);
    *((_DWORD *)v5 + 10) = 0;
    sub_18C9932A4((uint64_t)(v5 + 6));
    v3[1] = (uint64_t)(v3 + 3);
  }
  else
  {
    *a1 = 7;
  }
  return v3;
}

uint64_t unumrf_resultAsValue(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1178881536) {
      goto LABEL_8;
    }
    int v2 = 3;
  }
  else
  {
    int v2 = 1;
  }
  result = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0;
  }
  return result;
}

void unumrf_closeResult(_DWORD *a1)
{
  if (a1 && a1[4] == 1178881536)
  {
    *((void *)a1 + 4) = 0;
    sub_18C9799BC((void **)a1 + 6);
    icu::number::FormattedNumberRange::~FormattedNumberRange((icu::number::FormattedNumberRange *)(a1 + 6));
    a1[4] = 0;
    *a1 = 0;
    icu::UMemory::operator delete(a1);
  }
}

uint64_t sub_18C992A7C(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    a1 = 0;
    goto LABEL_8;
  }
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1178881536) {
      goto LABEL_8;
    }
    int v2 = 3;
  }
  else
  {
    int v2 = 1;
  }
  a1 = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0;
  }
  else {
    return a1 + 48;
  }
}

uint64_t unumrf_openForSkeletonWithCollapseAndIdentityFallback(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  int v9 = v8;
  uint64_t v10 = v1;
  v24 = (uint64_t *)*MEMORY[0x1E4F143B8];
  v11 = icu::UMemory::operator new(v24, (icu::UMemory *)0x4C8, v8);
  v12 = v11;
  if (v11)
  {
    bzero(v11, 0x4C8uLL);
    *(_DWORD *)v12 = 1314014720;
    sub_18C993304((uint64_t)(v12 + 1));
    v12[152] = 0;
    memset(v23, 0, 64);
    uint64_t v19 = v10;
    icu::UnicodeString::UnicodeString(v23, v9 == -1, &v19);
    uint64_t v16 = v19;
    uint64_t v18 = 0;
    memset(v17, 0, sizeof(v17));
    icu::Locale::Locale(&v16, (icu::Locale *)v21, v7, 0, 0, 0);
    icu::number::NumberRangeFormatter::withLocale((icu::number::NumberRangeFormatter *)v21, (uint64_t)v22);
    if (v5) {
      v14 = v5;
    }
    else {
      v14 = (const icu::UnicodeString *)v17;
    }
    icu::number::NumberFormatter::forSkeleton(v20, (icu::number::NumberFormatter *)v23, v14, v3, v13);
    icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterBoth();
  }
  v3->line = 7;
  return 0;
}

_DWORD *unumrf_formatDoubleRange(_DWORD *result, uint64_t a2, UErrorCode *a3, double a4, double a5)
{
  if (*(int *)a3 > 0) {
    return result;
  }
  v6 = result;
  if (!result) {
    goto LABEL_9;
  }
  if (*result != 1314014720)
  {
LABEL_10:
    int v13 = 3;
    goto LABEL_11;
  }
  if (!a2)
  {
LABEL_9:
    int v13 = 1;
LABEL_11:
    *a3 = v13;
    return result;
  }
  if (*(_DWORD *)(a2 + 16) != 1178881536) {
    goto LABEL_10;
  }
  uint64_t v10 = (_DWORD *)(a2 + 48);
  icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a2 + 48));
  v11 = (void **)(a2 + 352);
  icu::number::impl::DecimalQuantity::clear((void **)(a2 + 352));
  v12 = (void **)(a2 + 424);
  icu::number::impl::DecimalQuantity::clear(v12);
  icu::number::impl::DecimalQuantity::setToDouble(v11, a4);
  icu::number::impl::DecimalQuantity::setToDouble(v12, a5);

  return (_DWORD *)icu::number::LocalizedNumberRangeFormatter::formatImpl((icu::number::LocalizedNumberRangeFormatter *)(v6 + 2), v10, a4 == a5, a3);
}

_DWORD *unumrf_formatDecimalRange(_DWORD *result, const char *a2, int a3, const char *a4, int a5, uint64_t a6, UErrorCode *a7)
{
  if (*(int *)a7 > 0) {
    return result;
  }
  unint64_t v8 = result;
  if (!result) {
    goto LABEL_9;
  }
  if (*result != 1314014720)
  {
LABEL_10:
    int v17 = 3;
    goto LABEL_11;
  }
  if (!a6)
  {
LABEL_9:
    int v17 = 1;
LABEL_11:
    *a7 = v17;
    return result;
  }
  if (*(_DWORD *)(a6 + 16) != 1178881536) {
    goto LABEL_10;
  }
  v14 = (_DWORD *)(a6 + 48);
  icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a6 + 48));
  uint64_t v15 = a6 + 352;
  icu::number::impl::DecimalQuantity::clear((void **)(a6 + 352));
  uint64_t v16 = (void **)(a6 + 424);
  icu::number::impl::DecimalQuantity::clear(v16);
  icu::number::impl::DecimalQuantity::setToDecNumber(v15, a2, a3, a7);
  icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v16, a4, a5, a7);

  return (_DWORD *)icu::number::LocalizedNumberRangeFormatter::formatImpl((icu::number::LocalizedNumberRangeFormatter *)(v8 + 2), v14, a2 == a4, a7);
}

uint64_t unumrf_resultGetIdentityResult(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
  {
    if (a1)
    {
      if (*(_DWORD *)(a1 + 16) == 1178881536) {
        return *(unsigned int *)(a1 + 496);
      }
      int v3 = 3;
    }
    else
    {
      int v3 = 1;
    }
    *a2 = v3;
  }
  return 3;
}

uint64_t unumrf_resultGetFirstDecimalNumber(uint64_t a1, char *a2, int a3, UErrorCode *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (!a1)
  {
    int v10 = 1;
LABEL_11:
    uint64_t v4 = 0;
    *a4 = v10;
    return v4;
  }
  if (*(_DWORD *)(a1 + 16) != 1178881536)
  {
    int v10 = 3;
    goto LABEL_11;
  }
  memset(v14, 0, sizeof(v14));
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v14);
  int v9 = icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(a1 + 352), (icu::number::impl::DecNum *)v14, a4);
  memset(&v13[1], 0, 56);
  v12[1] = 0;
  v13[0] = (char *)&v13[1] + 5;
  LODWORD(v13[1]) = 40;
  v12[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v12, (uint64_t)v13);
  icu::number::impl::DecNum::toString(v9, (icu::ByteSink *)v12, a4);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v12);
  uint64_t v4 = icu::CharString::extract(v13, a2, a3, a4);
  if (BYTE4(v13[1])) {
    uprv_free(v13[0]);
  }
  if (BYTE12(v14[0])) {
    uprv_free(*(void **)&v14[0]);
  }
  return v4;
}

uint64_t unumrf_resultGetSecondDecimalNumber(uint64_t a1, char *a2, int a3, UErrorCode *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (!a1)
  {
    int v10 = 1;
LABEL_11:
    uint64_t v4 = 0;
    *a4 = v10;
    return v4;
  }
  if (*(_DWORD *)(a1 + 16) != 1178881536)
  {
    int v10 = 3;
    goto LABEL_11;
  }
  memset(v14, 0, sizeof(v14));
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v14);
  int v9 = icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(a1 + 424), (icu::number::impl::DecNum *)v14, a4);
  memset(&v13[1], 0, 56);
  v12[1] = 0;
  v13[0] = (char *)&v13[1] + 5;
  LODWORD(v13[1]) = 40;
  v12[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v12, (uint64_t)v13);
  icu::number::impl::DecNum::toString(v9, (icu::ByteSink *)v12, a4);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v12);
  uint64_t v4 = icu::CharString::extract(v13, a2, a3, a4);
  if (BYTE4(v13[1])) {
    uprv_free(v13[0]);
  }
  if (BYTE12(v14[0])) {
    uprv_free(*(void **)&v14[0]);
  }
  return v4;
}

void unumrf_close(_DWORD *a1)
{
  if (a1 && *a1 == 1314014720)
  {
    icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter((icu::number::LocalizedNumberRangeFormatter *)(a1 + 2));
    *a1 = 0;
    icu::UMemory::operator delete(a1);
  }
}

uint64_t sub_18C9932A4(uint64_t a1)
{
  int v2 = (void *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl(a1, 0);
  void *v2 = &unk_1EDA4F880;
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)(v2 + 38));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)(a1 + 376));
  *(_DWORD *)(a1 + 448) = 3;
  return a1;
}

uint64_t sub_18C993304(uint64_t a1)
{
  *(unsigned char *)(a1 + 968) = 1;
  *(void *)(a1 + 972) = 0x200000000;
  icu::Locale::Locale((icu::Locale *)(a1 + 984));
  return a1;
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::numberFormatterBoth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::numberFormatterFirst@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::numberFormatterSecond@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::collapse@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::identityFallback@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

uint64_t *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::clone@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)result, a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

{
  uint64_t *result;

  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)result, a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

BOOL icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::copyErrorTo(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 1;
  }
  sub_18C993B58(a1, a2);
  return *a2 > 0;
}

BOOL sub_18C993B58(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 1;
  }
  sub_18C9692F0(a1 + 8, a2);
  if (*a2 > 0) {
    return 1;
  }
  sub_18C9692F0(a1 + 488, a2);
  return *a2 > 0;
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterBoth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterFirst@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterSecond@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  uint64_t vars8;

  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));

  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::collapse@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::identityFallback@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

uint64_t *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::clone@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)result, a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

{
  uint64_t *result;

  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)result, a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

BOOL icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::copyErrorTo(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 1;
  }
  sub_18C993B58(a1, a2);
  return *a2 > 0;
}

uint64_t icu::number::NumberRangeFormatter::with@<X0>(void *a1@<X8>)
{
  bzero(a1, 0x4C0uLL);

  return sub_18C993304((uint64_t)a1);
}

void **icu::number::NumberRangeFormatter::withLocale@<X0>(icu::number::NumberRangeFormatter *this@<X0>, uint64_t a2@<X8>)
{
  v6[152] = *(void **)MEMORY[0x1E4F143B8];
  bzero(v6, 0x4C0uLL);
  sub_18C993304((uint64_t)v6);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(a2, (uint64_t)v6, (uint64_t)this);
  return sub_18C994D70(v6);
}

uint64_t icu::number::UnlocalizedNumberRangeFormatter::locale@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(a3, a1, a2);
}

{
  return icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(a3, a1, a2);
}

uint64_t icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter(uint64_t a1, uint64_t a2)
{
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((icu::number::UnlocalizedNumberFormatter *)(a1 + 8), (const icu::number::UnlocalizedNumberFormatter *)(a2 + 8));
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((icu::number::UnlocalizedNumberFormatter *)(a1 + 488), (const icu::number::UnlocalizedNumberFormatter *)(a2 + 488));
  uint64_t v4 = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = v4;
  icu::Locale::Locale((icu::Locale *)(a1 + 984), a2 + 984);
  return a1;
}

{
  uint64_t v4;

  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 488, a2 + 488);
  uint64_t v4 = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = v4;
  icu::Locale::Locale(a1 + 984, a2 + 984);
  return a1;
}

uint64_t icu::number::UnlocalizedNumberRangeFormatter::operator=(uint64_t a1, uint64_t a2)
{
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  int v4 = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v4;
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a2 + 984);
  return a1;
}

{
  int v4;

  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  int v4 = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v4;
  icu::Locale::operator=(a1 + 984, a2 + 984);
  return a1;
}

uint64_t icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(uint64_t a1, uint64_t a2)
{
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((icu::number::UnlocalizedNumberFormatter *)(a1 + 8), (const icu::number::UnlocalizedNumberFormatter *)(a2 + 8));
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((icu::number::UnlocalizedNumberFormatter *)(a1 + 488), (const icu::number::UnlocalizedNumberFormatter *)(a2 + 488));
  uint64_t v4 = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = v4;
  icu::Locale::Locale((icu::Locale *)(a1 + 984), a2 + 984);
  *(void *)(a1 + 1208) = 0;
  return a1;
}

{
  uint64_t v4;
  unint64_t v5;

  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 488, a2 + 488);
  uint64_t v4 = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = v4;
  icu::Locale::Locale(a1 + 984, a2 + 984);
  *(void *)(a1 + 1208) = 0;
  v5 = atomic_exchange((atomic_ullong *volatile)(a1 + 1208), atomic_exchange((atomic_ullong *volatile)(a2 + 1208), 0));
  if (v5)
  {
    if (*(unsigned char *)(v5 + 1908)) {
      uprv_free(*(void **)(v5 + 1896));
    }
    sub_18C96C62C((void *)(v5 + 1296));
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v5 + 1224));
    sub_18C96C62C((void *)(v5 + 608));
    sub_18C96C62C((void *)(v5 + 8));
    icu::UMemory::operator delete((void *)v5);
  }
  return a1;
}

uint64_t sub_18C99473C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1908)) {
    uprv_free(*(void **)(a1 + 1896));
  }
  sub_18C96C62C((void *)(a1 + 1296));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 1224));
  sub_18C96C62C((void *)(a1 + 608));
  sub_18C96C62C((void *)(a1 + 8));
  return a1;
}

uint64_t icu::number::LocalizedNumberRangeFormatter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
    icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
    int v4 = *(_DWORD *)(a2 + 976);
    *(void *)(a1 + 968) = *(void *)(a2 + 968);
    *(_DWORD *)(a1 + 976) = v4;
    icu::Locale::operator=((icu::Locale *)(a1 + 984), a2 + 984);
    unint64_t v5 = atomic_exchange((atomic_ullong *volatile)(a1 + 1208), 0);
    if (v5)
    {
      if (*(unsigned char *)(v5 + 1908)) {
        uprv_free(*(void **)(v5 + 1896));
      }
      sub_18C96C62C((void *)(v5 + 1296));
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v5 + 1224));
      sub_18C96C62C((void *)(v5 + 608));
      sub_18C96C62C((void *)(v5 + 8));
      icu::UMemory::operator delete((void *)v5);
    }
  }
  return a1;
}

{
  int v4;
  unint64_t v5;

  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  int v4 = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v4;
  icu::Locale::operator=(a1 + 984, a2 + 984);
  unint64_t v5 = atomic_exchange((atomic_ullong *volatile)(a1 + 1208), atomic_exchange((atomic_ullong *volatile)(a2 + 1208), 0));
  if (v5)
  {
    if (*(unsigned char *)(v5 + 1908)) {
      uprv_free(*(void **)(v5 + 1896));
    }
    sub_18C96C62C((void *)(v5 + 1296));
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v5 + 1224));
    sub_18C96C62C((void *)(v5 + 608));
    sub_18C96C62C((void *)(v5 + 8));
    icu::UMemory::operator delete((void *)v5);
  }
  return a1;
}

void icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter(atomic_ullong *this)
{
  unint64_t v2 = atomic_exchange(this + 151, 0);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 1908)) {
      uprv_free(*(void **)(v2 + 1896));
    }
    sub_18C96C62C((void *)(v2 + 1296));
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v2 + 1224));
    sub_18C96C62C((void *)(v2 + 608));
    sub_18C96C62C((void *)(v2 + 8));
    icu::UMemory::operator delete((void *)v2);
  }

  sub_18C994D70((void **)this);
}

uint64_t icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18C993304(a1);
  *(void *)(v6 + 1208) = 0;
  icu::number::UnlocalizedNumberFormatter::operator=(v6 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  int v7 = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v7;
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a2 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a3);
  icu::Locale::operator=((icu::Locale *)(a1 + 256), a1 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 736), a1 + 984);
  return a1;
}

{
  uint64_t v6;
  int v7;

  uint64_t v6 = sub_18C993304(a1);
  *(void *)(v6 + 1208) = 0;
  icu::number::UnlocalizedNumberFormatter::operator=(v6 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  int v7 = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v7;
  icu::Locale::operator=(a1 + 984, a2 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a3);
  icu::Locale::operator=((icu::Locale *)(a1 + 256), a1 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 736), a1 + 984);
  return a1;
}

void icu::number::LocalizedNumberRangeFormatter::formatFormattableRange(icu::number::LocalizedNumberRangeFormatter *this@<X0>, const icu::Formattable *a2@<X1>, const icu::Formattable *a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 <= 0)
  {
    int v13 = icu::UMemory::operator new(v6, (icu::UMemory *)0x1C8, (unint64_t)a2);
    int v7 = v13;
    if (v13)
    {
      sub_18C9932A4((uint64_t)v13);
      icu::Formattable::populateDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)(v7 + 38), a4);
      UErrorCode v8 = *a4;
      if (*(int *)a4 <= 0
        && (icu::Formattable::populateDecimalQuantity(a3, (icu::number::impl::DecimalQuantity *)(v7 + 47), a4),
            UErrorCode v8 = *a4,
            *(int *)a4 <= 0))
      {
        int v14 = icu::Formattable::operator==((uint64_t)a2, (uint64_t)a3);
        icu::number::LocalizedNumberRangeFormatter::formatImpl(this, v7, v14, a4);
        if (*(int *)a4 < 1)
        {
          UErrorCode v8 = U_ZERO_ERROR;
        }
        else
        {
          (*(void (**)(uint64_t *))(*v7 + 8))(v7);
          int v7 = 0;
          UErrorCode v8 = *a4;
        }
      }
      else
      {
        int v7 = 0;
      }
    }
    else
    {
      UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    int v7 = 0;
    UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(void *)a5 = &unk_1EDA4F840;
  *(void *)(a5 + 8) = v7;
  *(_DWORD *)(a5 + 16) = v8;
}

uint64_t icu::number::LocalizedNumberRangeFormatter::formatImpl(icu::number::LocalizedNumberRangeFormatter *a1, _DWORD *a2, int a3, UErrorCode *a4)
{
  uint64_t result = icu::number::LocalizedNumberRangeFormatter::getFormatter(a1, a4);
  if (*(int *)a4 <= 0)
  {
    if (result)
    {
      uint64_t result = sub_18C995350(result, a2, a3, a4);
      if (*(int *)a4 <= 0)
      {
        return icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(a2 + 2), a4);
      }
    }
    else
    {
      *a4 = U_INTERNAL_PROGRAM_ERROR;
    }
  }
  return result;
}

unint64_t icu::number::LocalizedNumberRangeFormatter::getFormatter(icu::number::LocalizedNumberRangeFormatter *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  unint64_t v2 = atomic_load((unint64_t *)this + 151);
  if (v2) {
    return v2;
  }
  uint64_t v6 = icu::UMemory::operator new((uint64_t *)this + 151, (icu::UMemory *)0x7A8, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 < 1)
    {
      unint64_t v2 = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return v2;
    }
    return 0;
  }
  unint64_t v2 = (unint64_t)v6;
  sub_18C99534C(v6, this, a2);
  if (*(int *)a2 >= 1)
  {
    if (*(unsigned char *)(v2 + 1908)) {
      uprv_free(*(void **)(v2 + 1896));
    }
    sub_18C96C62C((void *)(v2 + 1296));
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v2 + 1224));
    sub_18C96C62C((void *)(v2 + 608));
    sub_18C96C62C((void *)(v2 + 8));
    icu::UMemory::operator delete((void *)v2);
    return 0;
  }
  uint64_t v7 = 0;
  atomic_compare_exchange_strong((atomic_ullong *volatile)this + 151, (unint64_t *)&v7, v2);
  if (v7)
  {
    UErrorCode v8 = (void *)sub_18C99473C(v2);
    icu::UMemory::operator delete(v8);
    return v7;
  }
  return v2;
}

void **sub_18C994D70(void **a1)
{
  return a1;
}

uint64_t sub_18C994E0C(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  sub_18C96CBBC(a1 + 8, a2 + 8, a3);
  sub_18C96CBBC(a1 + 608, a2 + 488, a3);
  *(unsigned char *)(a1 + 1208) = *(unsigned char *)(a2 + 968);
  *(void *)(a1 + 1212) = *(void *)(a2 + 972);
  icu::UnicodeString::UnicodeString(a1 + 1232, 0);
  *(void *)(a1 + 1296) = 0;
  sub_18C96E7C8(a1 + 1304);
  long long v6 = 0uLL;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(void *)(a1 + 1896) = a1 + 1912;
  *(_DWORD *)(a1 + 1904) = 3;
  *(unsigned char *)(a1 + 1908) = 0;
  *(_DWORD *)(a1 + 1952) = 0;
  if (*(unsigned char *)(a1 + 1208) || (int v8 = strcmp((const char *)(a1 + 188), (const char *)(a1 + 788)), v6 = 0uLL, !v8))
  {
    uint64_t v31 = 0;
    v30[2] = v6;
    v30[3] = v6;
    v30[0] = v6;
    v30[1] = v6;
    icu::UnicodeString::UnicodeString((uint64_t)v30 + 8, 0);
    if (*(int *)a3 <= 0)
    {
      uint64_t v7 = ures_open(0, *(char **)(a2 + 1024), (int *)a3);
      if (*(int *)a3 <= 0)
      {
        int v17 = &unk_1EDA50CA0;
        uint64_t v18 = v30;
        memset(&v32[1], 0, 56);
        v32[0] = (char *)&v32[1] + 5;
        LODWORD(v32[1]) = 40;
        icu::CharString::append((icu::CharString *)v32, "NumberElements/", -1, a3);
        icu::CharString::append((icu::CharString *)v32, (const char *)(a1 + 188), -1, a3);
        icu::CharString::append((icu::CharString *)v32, "/miscPatterns", -1, a3);
        if (*(int *)a3 <= 0)
        {
          UErrorCode v16 = U_ZERO_ERROR;
          ures_getAllItemsWithFallback(v7, (char *)v32[0], (uint64_t)&v17, (int *)&v16);
          if (v16 < U_ILLEGAL_ARGUMENT_ERROR || v16 == U_MISSING_RESOURCE_ERROR)
          {
            if (!sub_18C9964CC((uint64_t)&v17)) {
              ures_getAllItemsWithFallback(v7, "NumberElements/latn/miscPatterns", (uint64_t)&v17, (int *)a3);
            }
            if (!sub_18C9964CC((uint64_t)&v17))
            {
              icu::UnicodeString::UnicodeString((uint64_t)v33, (uint64_t)"{");
              __src[1] = &unk_1EDA47700;
              LOWORD(v20) = 2;
              icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)__src, (const icu::UnicodeString *)v33, 0, 0x7FFFFFFF, 0, a3);
              icu::SimpleFormatter::operator=((uint64_t)v18, (uint64_t)__src);
              icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)__src);
              icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v33);
            }
          }
          else
          {
            *a3 = v16;
          }
        }
        if (BYTE4(v32[1])) {
          uprv_free(v32[0]);
        }
        icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v17);
      }
      if (v7) {
        ures_close(v7);
      }
      if (*(int *)a3 <= 0)
      {
        icu::SimpleFormatter::operator=(a1 + 1224, (uint64_t)v30);
        if (*(unsigned char *)(a1 + 1208) && (*(_DWORD *)(a1 + 1216) - 1) <= 1)
        {
          uint64_t v29 = 0;
          memset(v28, 0, sizeof(v28));
          long long v27 = 0u;
          memset(v26, 0, sizeof(v26));
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          *(_OWORD *)__src = 0u;
          long long v20 = 0u;
          *(void **)((char *)__src + 4) = *(void **)(a2 + 12);
          HIDWORD(__src[1]) = *(_DWORD *)(a2 + 20);
          long long v21 = 0u;
          icu::MeasureUnit::MeasureUnit((uint64_t)&v20, a2 + 24);
          icu::MeasureUnit::MeasureUnit((uint64_t)&v21 + 8, a2 + 48);
          long long v10 = *(_OWORD *)(a2 + 104);
          long long v24 = *(_OWORD *)(a2 + 88);
          long long v25 = v10;
          v26[0] = *(_OWORD *)(a2 + 120);
          *(void *)((char *)v26 + 13) = *(void *)(a2 + 133);
          long long v23 = *(_OWORD *)(a2 + 72);
          icu::number::impl::SymbolsWrapper::SymbolsWrapper((icu::number::impl::SymbolsWrapper *)((char *)&v26[1] + 8), (const icu::number::impl::SymbolsWrapper *)(a2 + 144));
          *(_OWORD *)((char *)&v26[2] + 8) = *(_OWORD *)(a2 + 160);
          icu::number::Scale::Scale((icu::number::Scale *)((char *)&v26[3] + 8), (const icu::number::Scale *)(a2 + 176));
          icu::number::impl::StringProp::StringProp((uint64_t)&v27, a2 + 200);
          icu::number::impl::StringProp::StringProp((uint64_t)v28, a2 + 216);
          v28[1] = *(_OWORD *)(a2 + 232);
          *(void *)((char *)&v28[1] + 14) = *(void *)(a2 + 246);
          icu::Locale::Locale((icu::Locale *)((char *)&v28[2] + 8), a2 + 256);
          LOBYTE(v26[3]) = 1;
          v11 = sub_18C96C62C((void *)(a1 + 1296));
          sub_18C96CBBC((uint64_t)v11, (uint64_t)__src, a3);
          icu::Locale::~Locale((icu::Locale *)((char *)&v28[2] + 8));
          icu::number::impl::StringProp::~StringProp((void **)v28);
          icu::number::impl::StringProp::~StringProp((void **)&v27);
          icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v26[3] + 8));
          icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)((char *)&v26[1] + 8));
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)((char *)&v21 + 8));
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v20);
        }
        sub_18C99A058(a2 + 984, a3, (uint64_t)__src);
        if (*(unsigned char *)(a1 + 1908)) {
          uprv_free(*(void **)(a1 + 1896));
        }
        uint64_t v12 = SLODWORD(__src[1]);
        *(_DWORD *)(a1 + 1904) = __src[1];
        int v13 = BYTE4(__src[1]);
        *(unsigned char *)(a1 + 1908) = BYTE4(__src[1]);
        int v14 = __src[0];
        if (__src[0] == &v20)
        {
          *(void *)(a1 + 1896) = a1 + 1912;
          memcpy((void *)(a1 + 1912), v14, 12 * v12);
          *(_DWORD *)(a1 + 1952) = DWORD2(v22);
          if (v13) {
            uprv_free(v14);
          }
        }
        else
        {
          *(void **)(a1 + 1896) = __src[0];
          __src[0] = &v20;
          LODWORD(__src[1]) = 3;
          BYTE4(__src[1]) = 0;
          *(_DWORD *)(a1 + 1952) = DWORD2(v22);
        }
      }
    }
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v30);
  }
  else
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return a1;
}

uint64_t sub_18C995350(uint64_t result, _DWORD *a2, int a3, UErrorCode *a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    uint64_t v7 = result;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    memset(v31, 0, sizeof(v31));
    sub_18C96E7C8((uint64_t)v31);
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    memset(v11, 0, sizeof(v11));
    sub_18C96E7C8((uint64_t)v11);
    sub_18C96D44C((uint64_t *)(v7 + 8), (icu::number::impl::DecimalQuantity *)(a2 + 76), (uint64_t)v31, a4);
    if (*(unsigned char *)(v7 + 1208)) {
      int v8 = (uint64_t *)(v7 + 8);
    }
    else {
      int v8 = (uint64_t *)(v7 + 608);
    }
    sub_18C96D44C(v8, (icu::number::impl::DecimalQuantity *)(a2 + 94), (uint64_t)v11, a4);
    if (*(int *)a4 > 0) {
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(void, void))(*(void *)v33 + 64))(v33, v13)
      && (*(unsigned int (**)(void, void))(**((void **)&v32 + 1) + 64))(*((void *)&v32 + 1), *((void *)&v12 + 1))&& ((*(uint64_t (**)(void, void))(*(void *)v32 + 64))(v32, v12) & 1) != 0)
    {
      if (a3)
      {
        int v9 = 0;
        a2[112] = 0;
      }
      else if (icu::number::impl::DecimalQuantity::operator==((icu::number::impl::DecimalQuantity *)(a2 + 76), (uint64_t)(a2 + 94)))
      {
        a2[112] = 1;
        int v9 = 0x10000000;
      }
      else
      {
        a2[112] = 2;
        int v9 = 0x20000000;
      }
      unsigned int v10 = (v9 | (*(_DWORD *)(v7 + 1216) << 24)) >> 24;
      if (v10 > 0x23) {
        goto LABEL_24;
      }
      if (((1 << v10) & 0xF00080008) != 0)
      {
        sub_18C99566C(v7, (uint64_t)a2, (void **)v31, (uint64_t *)v11, a4);
        goto LABEL_12;
      }
      if (((1 << v10) & 0x10003) != 0)
      {
        sub_18C996110(v7, (uint64_t)a2, (void **)v31, (uint64_t *)v11, a4);
        goto LABEL_12;
      }
      if (((1 << v10) & 0x60004) == 0) {
LABEL_24:
      }
        abort();
      sub_18C995F00(v7, (uint64_t)a2, (void **)v31, (uint64_t *)v11, a4);
    }
    else
    {
      sub_18C99566C(v7, (uint64_t)a2, (void **)v31, (uint64_t *)v11, a4);
      a2[112] = 2;
    }
LABEL_12:
    sub_18C96C86C((uint64_t)v11);
    return sub_18C96C86C((uint64_t)v31);
  }
  return result;
}

void sub_18C99566C(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4, UErrorCode *a5)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 > 0) {
    return;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 1212);
  BOOL v11 = v10 > 3 || v10 == 1;
  if (v11 || !(*(unsigned int (**)(void *, uint64_t))(*a3[24] + 64))(a3[24], a4[24]))
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    goto LABEL_21;
  }
  if (!(*(unsigned int (**)(void *, uint64_t))(*a3[25] + 64))(a3[25], a4[25])) {
    goto LABEL_12;
  }
  long long v12 = a3[25];
  int v13 = *(_DWORD *)(a1 + 1212);
  if (v13)
  {
    if (v13 != 2)
    {
LABEL_16:
      if (v13 == 3) {
        int v14 = (*(uint64_t (**)(void *, uint64_t))(*a3[26] + 64))(a3[26], a4[26]);
      }
      else {
        int v14 = 0;
      }
      int v15 = 1;
      goto LABEL_20;
    }
    if (((*(uint64_t (**)(void *, uint64_t))(*v12 + 48))(a3[25], 39) & 1) == 0
      && ((*(uint64_t (**)(void *, uint64_t))(*v12 + 48))(v12, 40) & 1) == 0)
    {
      goto LABEL_12;
    }
LABEL_15:
    int v13 = *(_DWORD *)(a1 + 1212);
    goto LABEL_16;
  }
  if ((*(int (**)(void *))(*v12 + 32))(a3[25]) > 1) {
    goto LABEL_15;
  }
LABEL_12:
  int v14 = 0;
  int v15 = 0;
LABEL_20:
  int v16 = 1;
LABEL_21:
  *(void *)v58 = 0;
  int v17 = icu::number::impl::SimpleModifier::formatTwoArgPattern(a1 + 1224, (icu::FormattedStringBuilder *)(a2 + 8), 0, &v58[1], v58, 0, a5);
  if (*(int *)a5 < 1)
  {
    int v18 = v17;
    int v56 = v15;
    int v57 = v16;
    int v19 = v14;
    int v20 = v58[0];
    int v21 = v58[1];
    int v54 = v19;
    BOOL v22 = (v19 & 1) == 0 && (*(int (**)(void *))(*a3[26] + 32))(a3[26]) > 0;
    int v23 = v21 + v20;
    BOOL v24 = (v56 & 1) == 0 && (*(int (**)(void *))(*a3[25] + 32))(a3[25]) > 0;
    int v25 = v18 - v23;
    BOOL v26 = (v57 & 1) == 0 && (*(int (**)(void *))(*a3[24] + 32))(a3[24]) > 0;
    int v27 = v58[1];
    if (v22 || v24 || v26)
    {
      uint64_t v28 = *(void *)(a2 + 16);
      if (!*(unsigned char *)(a2 + 8)) {
        uint64_t v28 = a2 + 16;
      }
      if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)*(unsigned __int16 *)(v28
                                                                                     + 2
                                                                                     * (*(_DWORD *)(a2 + 136) + v58[1]))))
        v25 += icu::FormattedStringBuilder::insertCodePoint((void *)(a2 + 8), v58[1], 0x20u, 0, a5);
      if (*(unsigned char *)(a2 + 8)) {
        uint64_t v29 = *(void *)(a2 + 16);
      }
      else {
        uint64_t v29 = a2 + 16;
      }
      BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)*(unsigned __int16 *)(v29
                                                                                              + 2
                                                                                              * (v25
                                                                                               + v58[1]
                                                                                               + *(_DWORD *)(a2 + 136)
                                                                                               - 1)));
      int v27 = v58[1];
      if (!isWhiteSpace)
      {
        v25 += icu::FormattedStringBuilder::insertCodePoint((void *)(a2 + 8), v58[1] + v25, 0x20u, 0, a5);
        int v27 = v58[1];
      }
    }
    int v31 = sub_18C96CE00((uint64_t)(a3 + 1), (icu::number::impl::DecimalQuantity *)(a2 + 304), (icu::FormattedStringBuilder *)(a2 + 8), v27, a5);
    uint64_t v60 = 0;
    memset(v59, 0, sizeof(v59));
    icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v59);
    sub_18C96CE00((uint64_t)(a4 + 1), (icu::number::impl::DecimalQuantity *)(a2 + 376), (icu::FormattedStringBuilder *)v59, 0, a5);
    int v32 = icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(a2 + 8), v31 + v25 + v58[1], (const icu::FormattedStringBuilder *)v59, a5);
    uint64_t v33 = (uint64_t)a3[26];
    if (v54)
    {
      int v55 = v25;
      uint64_t v34 = sub_18C9961CC(a1, v33, a4[26]);
      int v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, a2 + 8);
      v58[0] += v35;
      int v36 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 24))(v34);
      v58[1] += v36;
      long long v37 = *(uint64_t (**)(uint64_t))(*(void *)v34 + 24);
      uint64_t v38 = v34;
      int v25 = v55;
      int v39 = v37(v38);
      v58[0] -= v39;
    }
    else
    {
      v31 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)v33 + 16))(v33, a2 + 8, v58[1], (v58[1] + v31), a5);
      v32 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)a4[26] + 16))(a4[26], a2 + 8, (v31 + v25 + v58[1]), (v58[0] + v32 + v31 + v25 + v58[1]), a5);
    }
    uint64_t v40 = (uint64_t)a3[25];
    if (v56)
    {
      int v41 = v25;
      uint64_t v42 = sub_18C9961CC(a1, v40, a4[25]);
      int v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, a2 + 8);
      v58[0] += v43;
      int v44 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 24))(v42);
      v58[1] += v44;
      long long v45 = *(uint64_t (**)(uint64_t))(*(void *)v42 + 24);
      uint64_t v46 = v42;
      int v25 = v41;
      int v47 = v45(v46);
      v58[0] -= v47;
    }
    else
    {
      v31 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)v40 + 16))(v40, a2 + 8, v58[1], (v58[1] + v31), a5);
      v32 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)a4[25] + 16))(a4[25], a2 + 8, (v31 + v25 + v58[1]), (v58[0] + v32 + v31 + v25 + v58[1]), a5);
    }
    uint64_t v48 = (uint64_t)a3[24];
    if (v57)
    {
      uint64_t v49 = sub_18C9961CC(a1, v48, a4[24]);
      int v50 = v31 + v25;
      int v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, a2 + 8);
      v58[0] += v51;
      int v52 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 24))(v49);
      v58[1] += v52;
      int v53 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 24))(v49);
      v58[0] -= v53;
    }
    else
    {
      v31 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)v48 + 16))(v48, a2 + 8, v58[1], (v58[1] + v31), a5);
      int v50 = v31 + v25;
      v32 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)a4[24] + 16))(a4[24], a2 + 8, (v31 + v25 + v58[1]), (v58[0] + v32 + v31 + v25 + v58[1]), a5);
    }
    icu::FormattedValueStringBuilderImpl::appendSpanInfo(a2, 4098, 0, v58[1], v31, (int *)a5);
    icu::FormattedValueStringBuilderImpl::appendSpanInfo(a2, 4098, 1, v50 + v58[1], v32, (int *)a5);
    icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v59);
  }
}

void sub_18C995F00(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4, UErrorCode *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    if (*(unsigned char *)(a1 + 1208))
    {
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v14 = 0u;
      memset(v13, 0, sizeof(v13));
      sub_18C96E7C8((uint64_t)v13);
      int v8 = (icu::number::impl::DecimalQuantity *)(a2 + 304);
      icu::number::impl::DecimalQuantity::resetExponent((icu::number::impl::DecimalQuantity *)(a2 + 304));
      sub_18C96D44C((uint64_t *)(a1 + 1296), (icu::number::impl::DecimalQuantity *)(a2 + 304), (uint64_t)v13, a5);
      int v9 = (icu::FormattedStringBuilder *)(a2 + 8);
      uint64_t v10 = sub_18C96CE00((uint64_t)v13 + 8, v8, v9, 0, a5);
      uint64_t v11 = (*(unsigned int (**)(void, icu::FormattedStringBuilder *, void, uint64_t, UErrorCode *))(*(void *)v15 + 16))(v15, v9, 0, v10, a5)+ v10;
      int v12 = (*(uint64_t (**)(void, icu::FormattedStringBuilder *, void, uint64_t, UErrorCode *))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1), v9, 0, v11, a5);
      (*(void (**)(void, icu::FormattedStringBuilder *, void, void, UErrorCode *))(*(void *)v14 + 16))(v14, v9, 0, (v12 + v11), a5);
      sub_18C96C86C((uint64_t)v13);
    }
    else
    {
      sub_18C99566C(a1, a2, a3, a4, a5);
    }
  }
}

void sub_18C996110(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (*(unsigned char *)(a1 + 1208))
    {
      uint64_t v7 = (icu::FormattedStringBuilder *)(a2 + 8);
      int v8 = sub_18C96CE00((uint64_t)(a3 + 1), (icu::number::impl::DecimalQuantity *)(a2 + 304), (icu::FormattedStringBuilder *)(a2 + 8), 0, a5);
      sub_18C96D038((uint64_t)a3, v7, 0, v8, a5);
    }
    else
    {
      sub_18C99566C(a1, a2, a3, a4, a5);
    }
  }
}

uint64_t sub_18C9961CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  icu::number::impl::Modifier::Parameters::Parameters(&v9);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 56))(a2, &v9);
  if (v9)
  {
    int v6 = HIDWORD(v10);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a3 + 56))(a3, &v9);
    if (v9)
    {
      uint64_t v7 = sub_18C99A43C((unsigned int *)(a1 + 1896), v6, SHIDWORD(v10));
      return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 16))(v9, v10, v7);
    }
  }
  return a2;
}

void sub_18C9962C8(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void *sub_18C9962F0(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  __s1 = a2;
  memset(v11, 0, sizeof(v11));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v11, a3, a5);
  if (*(int *)a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, 0, (const char **)&__s1, a3);
    if (result)
    {
      unsigned int v9 = 1;
      do
      {
        if (!strcmp(__s1, "range") && !sub_18C9964CC(a1))
        {
          int v15 = 0;
          uint64_t v14 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32))(a3, &v15, a5);
          icu::UnicodeString::UnicodeString(v16, 1, &v14);
          long long v18 = &unk_1EDA47700;
          __int16 v19 = 2;
          icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v17, (const icu::UnicodeString *)v16, 0, 0x7FFFFFFF, 0, a5);
          icu::SimpleFormatter::operator=(*(void *)(a1 + 8), (uint64_t)v17);
          icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v17);
          icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
        }
        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, v9++, (const char **)&__s1, a3);
      }
      while (result);
    }
  }
  return result;
}

BOOL sub_18C9964CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unsigned int v2 = *(unsigned __int16 *)(v1 + 16);
  if ((v2 & 0x11) != 0)
  {
    int v3 = 0;
    if ((v2 & 0x8000) != 0)
    {
LABEL_9:
      if (!*(_DWORD *)(v1 + 20)) {
        return 0;
      }
      return *v3 != 0;
    }
  }
  else if ((v2 & 2) != 0)
  {
    int v3 = (_WORD *)(v1 + 18);
    if ((v2 & 0x8000) != 0) {
      goto LABEL_9;
    }
  }
  else
  {
    int v3 = *(_WORD **)(v1 + 32);
    if ((v2 & 0x8000) != 0) {
      goto LABEL_9;
    }
  }
  if (v2 >> 5) {
    return *v3 != 0;
  }
  return 0;
}

void *icu::NumberingSystem::getStaticClassID(icu::NumberingSystem *this)
{
  return &unk_1E9192518;
}

void *icu::NumberingSystem::getDynamicClassID(icu::NumberingSystem *this)
{
  return &unk_1E9192518;
}

void *sub_18C996540()
{
  return &unk_1E9192519;
}

icu::NumberingSystem *icu::NumberingSystem::NumberingSystem(icu::NumberingSystem *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EDA50CE8;
  unsigned int v2 = (UChar **)((char *)this + 8);
  *((void *)this + 1) = &unk_1EDA47700;
  *((_WORD *)this + 8) = 2;
  *((_DWORD *)this + 18) = 10;
  *((unsigned char *)this + 76) = 0;
  memset(v5, 0, sizeof(v5));
  int v4 = "0";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  icu::UnicodeString::copyFrom(v2, (UChar **)v5, 0);
  strcpy((char *)this + 77, "latn");
  icu::UnicodeString::~UnicodeString((void *)0x6E74616C, (icu::UnicodeString *)v5);
  return this;
}

icu::NumberingSystem *icu::NumberingSystem::NumberingSystem(icu::NumberingSystem *this, const icu::NumberingSystem *a2)
{
  *(void *)this = &unk_1EDA50CE8;
  *((void *)this + 1) = &unk_1EDA47700;
  *((_WORD *)this + 8) = 2;
  icu::UnicodeString::operator=((UChar **)this + 1, (UChar **)a2 + 1);
  uint64_t v4 = *(void *)((char *)a2 + 78);
  *((void *)this + 9) = *((void *)a2 + 9);
  *(void *)((char *)this + 78) = v4;
  return this;
}

{
  uint64_t v4;

  *(void *)this = &unk_1EDA50CE8;
  *((void *)this + 1) = &unk_1EDA47700;
  *((_WORD *)this + 8) = 2;
  icu::UnicodeString::operator=((UChar **)this + 1, (UChar **)a2 + 1);
  uint64_t v4 = *(void *)((char *)a2 + 78);
  *((void *)this + 9) = *((void *)a2 + 9);
  *(void *)((char *)this + 78) = v4;
  return this;
}

icu::NumberingSystem *icu::NumberingSystem::createInstance(icu::NumberingSystem *this, unint64_t a2, icu::UnicodeString *a3, const icu::UnicodeString *a4, UErrorCode *a5)
{
  unint64_t v5 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v5 > 0) {
    return 0;
  }
  int v8 = (int)this;
  if ((int)this <= 1
    || (char v12 = a2, !a2) && icu::UnicodeString::countChar32(a3, 0, 0x7FFFFFFF) != this)
  {
    uint64_t v6 = 0;
    int v9 = 1;
LABEL_5:
    *(_DWORD *)a4 = v9;
    return v6;
  }
  int v13 = (icu::NumberingSystem *)icu::UMemory::operator new(v5, (icu::UMemory *)0x58, a2);
  if (v13)
  {
    uint64_t v6 = v13;
    icu::NumberingSystem::NumberingSystem(v13);
    if (*(int *)a4 <= 0)
    {
      *((_DWORD *)v6 + 18) = v8;
      icu::UnicodeString::copyFrom((UChar **)v6 + 1, (UChar **)a3, 0);
      *((unsigned char *)v6 + 76) = v12;
      *((unsigned char *)v6 + 77) = 0;
      return v6;
    }
    (*(void (**)(icu::NumberingSystem *))(*(void *)v6 + 8))(v6);
    return 0;
  }
  if (*(int *)a4 <= 0)
  {
    uint64_t v6 = 0;
    int v9 = 7;
    goto LABEL_5;
  }
  return 0;
}

uint64_t icu::NumberingSystem::setRadix(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

icu::UnicodeString *icu::NumberingSystem::setDesc(UChar **this, UChar **a2)
{
  return icu::UnicodeString::copyFrom(this + 1, a2, 0);
}

uint64_t icu::NumberingSystem::setAlgorithmic(uint64_t this, char a2)
{
  *(unsigned char *)(this + 76) = a2;
  return this;
}

char *icu::NumberingSystem::setName(icu::NumberingSystem *this, const char *a2)
{
  uint64_t result = (char *)this + 77;
  if (a2)
  {
    strncpy(result, a2, 8uLL);
    uint64_t result = (char *)this + 85;
  }
  *uint64_t result = 0;
  return result;
}

icu::NumberingSystem *icu::NumberingSystem::createInstance(icu::NumberingSystem *this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  *(_OWORD *)uint64_t v46 = 0u;
  long long v47 = 0u;
  int KeywordValue = icu::Locale::getKeywordValue((char **)this, "numbers", v46, 96, a2);
  length[1] = KeywordValue;
  if (*(int *)a2 > 0 || *a2 == U_STRING_NOT_TERMINATED_WARNING)
  {
    length[1] = 0;
    *a2 = U_ZERO_ERROR;
    goto LABEL_20;
  }
  if (KeywordValue < 1)
  {
LABEL_20:
    strcpy(v46, "default");
    goto LABEL_21;
  }
  v46[KeywordValue] = 0;
  if (*(void *)v46 != 0x746C7561666564 && (*(_DWORD *)v46 != 1769234798 || *(_DWORD *)&v46[3] != 6649449))
  {
    BOOL v8 = *(void *)v46 == 0x6F69746964617274 && *(_DWORD *)&v46[8] == 7102830;
    BOOL v9 = !v8;
    if (*(void *)v46 != 0x65636E616E6966 && v9) {
      return icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)v46, (char *)a2, v6);
    }
  }
LABEL_21:
  length[0] = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  memset(v33, 0, sizeof(v33));
  icu::Locale::Locale((icu::Locale *)v33, (uint64_t)this);
  *(void *)__s = 0;
  if ((int)ulocimp_getRegionForSupplementalData(*((char **)this + 5), 0, __s, 8, (int *)a2) >= 1)
  {
    UErrorCode v28 = U_ZERO_ERROR;
    memset(v31, 0, sizeof(v31));
    icu::LocaleBuilder::LocaleBuilder(v31);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v26, (const char *)this + 8);
    icu::LocaleBuilder::setLanguage((uint64_t)v31, v26, v27);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v24, (const char *)this + 20);
    icu::LocaleBuilder::setScript((uint64_t)v31, v24, v25);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v22, __s);
    icu::LocaleBuilder::setRegion((uint64_t)v31, v22, v23);
    memset(v30, 0, sizeof(v30));
    icu::LocaleBuilder::build((icu::LocaleBuilder *)v31, &v28, (icu::Locale *)v30);
    if (v28 <= U_ZERO_ERROR) {
      icu::Locale::operator=((icu::Locale *)v33, (uint64_t)v30);
    }
    icu::Locale::~Locale((icu::Locale *)v30);
    icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)v31);
  }
  uint64_t v10 = ures_open(0, *((char **)&v34 + 1), length);
  uint64_t v11 = ures_getByKey(v10, "NumberElements", 0, length);
  uint64_t v12 = v11;
  if (length[0] == 7)
  {
    int v13 = 0;
    goto LABEL_49;
  }
  *(void *)length = 0;
  StringByKeyWithFallback = ures_getStringByKeyWithFallback(v11, v46, &length[1], (UErrorCode *)length);
  if (length[0] == 7)
  {
LABEL_48:
    int v13 = 0;
LABEL_49:
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    char v21 = 1;
    if (!v12) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  while ((length[1] - 1) > 0x5E)
  {
    if (*(_DWORD *)v46 == 1769234798 && *(_DWORD *)&v46[3] == 6649449 || *(void *)v46 == 0x65636E616E6966)
    {
      strcpy(v46, "default");
    }
    else
    {
      if (*(void *)v46 != 0x6F69746964617274 || *(unsigned int *)&v46[8] != 7102830)
      {
        char v21 = 0;
        goto LABEL_61;
      }
      strcpy(v46, "native");
    }
    *(void *)length = 0;
    StringByKeyWithFallback = ures_getStringByKeyWithFallback(v12, v46, &length[1], (UErrorCode *)length);
    if (length[0] == 7) {
      goto LABEL_48;
    }
  }
  u_UCharsToChars(StringByKeyWithFallback, v46, length[1]);
  v46[length[1]] = 0;
  char v21 = 1;
LABEL_61:
  int v13 = 1;
  if (v12) {
LABEL_50:
  }
    ures_close(v12);
LABEL_51:
  if (v10) {
    ures_close(v10);
  }
  icu::Locale::~Locale((icu::Locale *)v33);
  if (!v13) {
    return 0;
  }
  if (v21) {
    return icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)v46, (char *)a2, v6);
  }
  *a2 = U_USING_FALLBACK_WARNING;
  uint64_t result = (icu::NumberingSystem *)icu::UMemory::operator new((uint64_t *)0xFFFFFF80, (icu::UMemory *)0x58, v19);
  if (result) {
    return icu::NumberingSystem::NumberingSystem(result);
  }
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

icu::NumberingSystem *icu::NumberingSystem::createInstanceByName(icu::NumberingSystem *this, char *a2, UErrorCode *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = ures_openDirect(0, (uint64_t)"numberingSystems", (uint64_t)a2);
  uint64_t v6 = ures_getByKey(v5, "numberingSystems", 0, (int *)a2);
  uint64_t v7 = ures_getByKey(v6, (const char *)this, 0, (int *)a2);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v23 = 0;
  unint64_t v19 = &unk_1EDA47700;
  LOWORD(v20) = 2;
  int v18 = 0;
  StringByKey = ures_getStringByKey(v7, "desc", &v18, (int *)a2);
  if (*(int *)a2 <= 0)
  {
    long long v17 = StringByKey;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v19, 1, &v17, v18);
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v19);
  }
  ures_getByKey(v7, "radix", v6, (int *)a2);
  Int = (icu::NumberingSystem *)ures_getInt(v6, (int *)a2);
  ures_getByKey(v7, "algorithmic", v6, (int *)a2);
  int v10 = ures_getInt(v6, (int *)a2);
  uint64_t v12 = *(unsigned int *)a2;
  if ((int)v12 >= 1)
  {
    if (v12 == 7)
    {
LABEL_6:
      int v13 = 0;
      goto LABEL_12;
    }
    int v13 = 0;
    uint64_t v12 = 16;
    goto LABEL_11;
  }
  Instance = icu::NumberingSystem::createInstance(Int, v10 == 1, (icu::UnicodeString *)&v19, (const icu::UnicodeString *)a2, v11);
  int v13 = Instance;
  uint64_t v12 = *(unsigned int *)a2;
  if (!Instance && (int)v12 <= 0)
  {
    int v13 = 0;
    uint64_t v12 = 7;
LABEL_11:
    *(_DWORD *)a2 = v12;
    goto LABEL_12;
  }
  if ((int)v12 <= 0)
  {
    long long v16 = (char *)Instance + 77;
    if (this)
    {
      strncpy(v16, (const char *)this, 8uLL);
      long long v16 = (char *)v13 + 85;
    }
    *long long v16 = 0;
  }
  else if (Instance)
  {
    (*(void (**)(icu::NumberingSystem *))(*(void *)Instance + 8))(Instance);
    goto LABEL_6;
  }
LABEL_12:
  icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v19);
  if (v7) {
    ures_close(v7);
  }
  if (v6) {
    ures_close(v6);
  }
  if (v5) {
    ures_close(v5);
  }
  return v13;
}

icu::NumberingSystem *icu::NumberingSystem::createInstance(icu::NumberingSystem *this, UErrorCode *a2)
{
  Default = icu::Locale::getDefault(this);

  return icu::NumberingSystem::createInstance((icu::NumberingSystem *)Default, (UErrorCode *)this, v4);
}

void icu::NumberingSystem::~NumberingSystem(icu::NumberingSystem *this)
{
  *(void *)this = &unk_1EDA50CE8;
  icu::UnicodeString::~UnicodeString((icu::NumberingSystem *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDA50CE8;
  icu::UnicodeString::~UnicodeString((icu::NumberingSystem *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

void icu::NumberingSystem::~NumberingSystem(icu::NumberingSystem *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1EDA50CE8;
  icu::UnicodeString::~UnicodeString(a2, (icu::NumberingSystem *)((char *)this + 8));
  icu::UObject::~UObject(this);

  icu::UMemory::operator delete(v3);
}

uint64_t icu::NumberingSystem::getRadix(icu::NumberingSystem *this)
{
  return *((unsigned int *)this + 18);
}

icu::UnicodeString *icu::NumberingSystem::getDescription@<X0>(UChar **this@<X0>, icu::UnicodeString *a2@<X8>)
{
  return icu::UnicodeString::UnicodeString(a2, this + 1);
}

uint64_t icu::NumberingSystem::getName(icu::NumberingSystem *this)
{
  return (uint64_t)this + 77;
}

uint64_t icu::NumberingSystem::isAlgorithmic(icu::NumberingSystem *this)
{
  return *((char *)this + 76);
}

uint64_t sub_18C9970B8()
{
  if (qword_1E9192520) {
    (*(void (**)(uint64_t))(*(void *)qword_1E9192520 + 8))(qword_1E9192520);
  }
  qword_1E9192520 = 0;
  atomic_store(0, &dword_1E9192528);
  return 1;
}

void sub_18C997118(int *a1)
{
  sub_18CA0A25C(0x23u, (uint64_t)sub_18C9970B8);
  uint64_t v4 = icu::UMemory::operator new(v3, (icu::UMemory *)0x28, v2);
  if (!v4)
  {
    if (*a1 <= 0) {
      *a1 = 7;
    }
    return;
  }
  uint64_t v5 = (uint64_t (**)(void *))v4;
  icu::UVector::UVector((uint64_t)v4, (uint64_t)uprv_deleteUObject, 0, a1);
  if (*a1 > 0) {
    goto LABEL_23;
  }
  int v18 = 0;
  uint64_t v6 = ures_openDirect(0, (uint64_t)"numberingSystems", (uint64_t)&v18);
  uint64_t v7 = ures_getByKey(v6, "numberingSystems", v6, &v18);
  uint64_t v8 = v7;
  if (v18 > 0)
  {
    if (v18 == 7) {
      int v9 = 7;
    }
    else {
      int v9 = 2;
    }
    *a1 = v9;
    ures_close(v7);
LABEL_23:
    (*((void (**)(uint64_t (**)(void *)))*v5 + 1))(v5);
    return;
  }
  while (ures_hasNext(v8) && *a1 <= 0)
  {
    NextResource = ures_getNextResource(v8, 0, (UErrorCode *)&v18);
    uint64_t v11 = (uint64_t)NextResource;
    int v12 = v18;
    if (v18 == 7)
    {
      *a1 = 7;
      if (!NextResource) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t Key = ures_getKey((uint64_t)NextResource);
      long long v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x40, v14);
      long long v17 = v16;
      if (v16)
      {
        icu::UnicodeString::UnicodeString(v16, Key, 0xFFFFFFFFLL, 0);
      }
      else if (*a1 <= 0)
      {
        *a1 = 7;
      }
      icu::UVector::adoptElement(v5, v17, (UErrorCode *)a1);
      if (!v11) {
        goto LABEL_21;
      }
    }
    ures_close(v11);
LABEL_21:
    if (v12 == 7) {
      break;
    }
  }
  ures_close(v8);
  if (*a1 > 0) {
    goto LABEL_23;
  }
  qword_1E9192520 = (uint64_t)v5;
}

uint64_t *icu::NumberingSystem::getAvailableNames(icu::NumberingSystem *this, UErrorCode *a2)
{
  unint64_t v3 = *(unsigned int *)this;
  if ((int)v3 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192528, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192528))
    {
      unint64_t v3 = dword_1E919252C;
      if (dword_1E919252C >= 1) {
        *(_DWORD *)this = dword_1E919252C;
      }
    }
    else
    {
      sub_18C997118((int *)this);
      dword_1E919252C = *(_DWORD *)this;
      icu::umtx_initImplPostInit(&dword_1E9192528);
    }
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)v3, (icu::UMemory *)0x78, (unint64_t)a2);
  if (result)
  {
    uint64_t result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
    *uint64_t result = (uint64_t)&unk_1EDA50D18;
    *((_DWORD *)result + 29) = 0;
  }
  else if (*(int *)this <= 0)
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

uint64_t sub_18C9973DC(uint64_t a1, int *a2)
{
  unint64_t v2 = (icu::UVector *)qword_1E9192520;
  if (*a2 > 0 || qword_1E9192520 == 0) {
    return 0;
  }
  signed int v4 = *(_DWORD *)(a1 + 116);
  if (v4 >= *(_DWORD *)(qword_1E9192520 + 8)) {
    return 0;
  }
  *(_DWORD *)(a1 + 116) = v4 + 1;
  return icu::UVector::elementAt(v2, v4);
}

uint64_t sub_18C99741C(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18C997424()
{
  if (qword_1E9192520) {
    return *(unsigned int *)(qword_1E9192520 + 8);
  }
  else {
    return 0;
  }
}

void sub_18C997444(icu::StringEnumeration *a1)
{
  icu::StringEnumeration::~StringEnumeration(a1);

  icu::UMemory::operator delete(v1);
}

void *icu::OlsonTimeZone::getStaticClassID(icu::OlsonTimeZone *this)
{
  return &unk_1E9192530;
}

void *icu::OlsonTimeZone::getDynamicClassID(icu::OlsonTimeZone *this)
{
  return &unk_1E9192530;
}

uint64_t icu::OlsonTimeZone::constructEmpty(uint64_t this)
{
  *(void *)(this + 152) = 0;
  *(_WORD *)(this + 76) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(void *)(this + 88) = 0;
  *(void *)(this + 96) = 0;
  *(void *)(this + 80) = 0;
  *(_WORD *)(this + 104) = 1;
  *(void *)(this + 120) = 0;
  *(void *)(this + 128) = 0;
  *(void *)(this + 112) = &unk_18CA95920;
  return this;
}

uint64_t icu::OlsonTimeZone::OlsonTimeZone(uint64_t a1, uint64_t a2, uint64_t a3, UChar **a4, int *a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v10 = icu::BasicTimeZone::BasicTimeZone((icu::BasicTimeZone *)a1, a4);
  *(void *)int v10 = &unk_1EDA50DB0;
  *((void *)v10 + 16) = 0;
  *((void *)v10 + 20) = 0;
  *((void *)v10 + 21) = 0;
  *((_WORD *)v10 + 88) = 0;
  *((void *)v10 + 23) = 0;
  *((void *)v10 + 24) = 0;
  *((_WORD *)v10 + 100) = 0;
  *((void *)v10 + 26) = 0;
  *((void *)v10 + 27) = 0;
  atomic_store(0, (unsigned int *)v10 + 54);
  if (a3) {
    BOOL v11 = a2 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = *a5;
  if (v11 && v12 <= 0)
  {
    *a5 = 1;
LABEL_50:
    *(void *)(a1 + 152) = 0;
    *(_WORD *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 104) = 1;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 112) = &unk_18CA95920;
    return a1;
  }
  if (v12 > 0) {
    goto LABEL_50;
  }
  unsigned int v36 = 0;
  uint64_t v44 = 0;
  memset(v43, 0, sizeof(v43));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v43);
  ures_getByKey(a3, "transPre32", (uint64_t)v43, a5);
  *(void *)(a1 + 80) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  unsigned int v13 = v36;
  *(_WORD *)(a1 + 72) = v36 >> 1;
  if (*a5 == 2)
  {
    int v14 = 0;
    *(void *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 72) = 0;
LABEL_14:
    *a5 = v14;
    goto LABEL_15;
  }
  if (*a5 <= 0 && (v13 & 0xFFFF8001) != 0)
  {
    int v14 = 3;
    goto LABEL_14;
  }
LABEL_15:
  ures_getByKey(a3, "trans", (uint64_t)v43, a5);
  *(void *)(a1 + 88) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  unsigned int v15 = v36;
  *(_WORD *)(a1 + 74) = v36;
  if (*a5 == 2)
  {
    int v16 = 0;
    *(void *)(a1 + 88) = 0;
    *(_WORD *)(a1 + 74) = 0;
LABEL_20:
    *a5 = v16;
    goto LABEL_21;
  }
  if (*a5 <= 0 && v15 >= 0x8000)
  {
    int v16 = 3;
    goto LABEL_20;
  }
LABEL_21:
  ures_getByKey(a3, "transPost32", (uint64_t)v43, a5);
  *(void *)(a1 + 96) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  unsigned int v17 = v36;
  *(_WORD *)(a1 + 76) = v36 >> 1;
  if (*a5 == 2)
  {
    int v18 = 0;
    *(void *)(a1 + 96) = 0;
    *(_WORD *)(a1 + 76) = 0;
LABEL_26:
    *a5 = v18;
    goto LABEL_27;
  }
  if (*a5 <= 0 && (v17 & 0xFFFF8001) != 0)
  {
    int v18 = 3;
    goto LABEL_26;
  }
LABEL_27:
  ures_getByKey(a3, "typeOffsets", (uint64_t)v43, a5);
  *(void *)(a1 + 112) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  int v20 = *a5;
  __int16 v21 = v36;
  if (*a5 <= 0 && (v36 - 2 > 0x7FFC || (v36 & 1) != 0))
  {
    int v20 = 3;
    *a5 = 3;
  }
  *(_WORD *)(a1 + 104) = v21 >> 1;
  *(void *)(a1 + 120) = 0;
  if ((__int16)(*(_WORD *)(a1 + 74) + *(_WORD *)(a1 + 72) + *(_WORD *)(a1 + 76)) < 1)
  {
    if (v20 > 0) {
      goto LABEL_49;
    }
    goto LABEL_38;
  }
  ures_getByKey(a3, "typeMap", (uint64_t)v43, a5);
  *(void *)(a1 + 120) = ures_getBinary((uint64_t)v43, (int *)&v36, a5);
  if (*a5 == 2)
  {
LABEL_33:
    *a5 = 3;
    goto LABEL_49;
  }
  if (*a5 <= 0)
  {
    if (v36 != (__int16)(*(_WORD *)(a1 + 74) + *(_WORD *)(a1 + 72) + *(_WORD *)(a1 + 76))) {
      goto LABEL_33;
    }
LABEL_38:
    StringByuint64_t Key = ures_getStringByKey(a3, "finalRule", (int *)&v36, a5);
    ures_getByKey(a3, "finalRaw", (uint64_t)v43, a5);
    int Int = ures_getInt((uint64_t)v43, a5);
    ures_getByKey(a3, "finalYear", (uint64_t)v43, a5);
    int v24 = ures_getInt((uint64_t)v43, a5);
    if (*a5 <= 0)
    {
      int v25 = v24;
      memset(v42, 0, sizeof(v42));
      long long v35 = StringByKey;
      icu::UnicodeString::UnicodeString(v42, 1, &v35);
      uint64_t Rule = icu::TimeZone::loadRule(a2, (uint64_t)v42, 0, a5);
      IntVector = ures_getIntVector(Rule, (int *)&v36, a5);
      if (*a5 <= 0 && v36 == 11)
      {
        long long v29 = IntVector;
        long long v38 = 0u;
        uint64_t v41 = 0;
        long long v40 = 0u;
        long long v39 = 0u;
        long long v37 = (UChar *)&unk_1EDA47700;
        LOWORD(v38) = 2;
        long long v30 = (icu::BasicTimeZone *)icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0xA0, v28);
        if (v30)
        {
          *(void *)(a1 + 128) = icu::SimpleTimeZone::SimpleTimeZone(v30, 1000 * Int, &v37, *(unsigned char *)v29, *((unsigned char *)v29 + 4), *((unsigned char *)v29 + 8), 1000 * v29[3], v29[4], v29[5], v29[6], v29[7], 1000 * v29[8], v29[9], 1000 * v29[10], (UErrorCode *)a5);
          *(_DWORD *)(a1 + 144) = v25;
          double v31 = sub_18C93E22C(v25, 0, 1);
          uint64_t v32 = (uint64_t)&word_18CA86F40[96];
          *(double *)(a1 + 136) = v31 * 86400000.0;
        }
        else
        {
          *(void *)(a1 + 128) = 0;
          uint64_t v32 = 7;
          *a5 = 7;
        }
        icu::UnicodeString::~UnicodeString((void *)v32, (icu::UnicodeString *)&v37);
      }
      else
      {
        *a5 = 3;
      }
      ures_close(Rule);
      icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v42);
    }
    else if (*a5 == 2)
    {
      *a5 = 0;
    }
  }
LABEL_49:
  *(void *)(a1 + 152) = icu::ZoneMeta::getCanonicalCLDRID((icu::ZoneMeta *)a4, (const icu::UnicodeString *)a5, v19);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v43);
  if (*a5 >= 1) {
    goto LABEL_50;
  }
  return a1;
}

void icu::OlsonTimeZone::clearTransitionRules(icu::OlsonTimeZone *this)
{
  *((void *)this + 26) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((_WORD *)this + 88) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((_WORD *)this + 100) = 0;
  atomic_store(0, (unsigned int *)this + 54);
}

uint64_t icu::OlsonTimeZone::OlsonTimeZone(icu::OlsonTimeZone *this, UChar **a2)
{
  unint64_t v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)unint64_t v3 = &unk_1EDA50DB0;
  *((void *)v3 + 16) = 0;
  *((void *)v3 + 27) = 0;

  return icu::OlsonTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

{
  icu::TimeZone *v3;
  uint64_t vars8;

  unint64_t v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)unint64_t v3 = &unk_1EDA50DB0;
  *((void *)v3 + 16) = 0;
  *((void *)v3 + 27) = 0;

  return icu::OlsonTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

uint64_t icu::OlsonTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
    *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    uint64_t v4 = *(void *)(a1 + 128);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *(void *)(a2 + 128);
    if (v5) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
    }
    *(void *)(a1 + 128) = v5;
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 208) = 0;
    *(_WORD *)(a1 + 176) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    *(_WORD *)(a1 + 200) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    atomic_store(0, (unsigned int *)(a1 + 216));
  }
  return a1;
}

void icu::OlsonTimeZone::~OlsonTimeZone(icu::OlsonTimeZone *this)
{
  *(void *)this = &unk_1EDA50DB0;
  icu::OlsonTimeZone::deleteTransitionRules(this);
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::OlsonTimeZone::~OlsonTimeZone(this);

  icu::UMemory::operator delete(v1);
}

void icu::OlsonTimeZone::deleteTransitionRules(icu::OlsonTimeZone *this)
{
  unint64_t v3 = (char *)this + 160;
  uint64_t v2 = *((void *)this + 20);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v4 = *((void *)this + 21);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 23);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 26);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 24);
  if (v7)
  {
    int v8 = *((__int16 *)this + 100);
    if (v8 >= 1)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void *)(*((void *)this + 24) + 8 * v9);
        if (v10)
        {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
          LOWORD(v8) = *((_WORD *)this + 100);
        }
        ++v9;
      }
      while (v9 < (__int16)v8);
      uint64_t v7 = (void *)*((void *)this + 24);
    }
    uprv_free(v7);
  }
  *((void *)this + 26) = 0;
  *(void *)unint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  *((_WORD *)v3 + 8) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((_WORD *)this + 100) = 0;
  atomic_store(0, (unsigned int *)this + 54);
}

uint64_t icu::OlsonTimeZone::operator==(uint64_t a1, void *a2)
{
  if ((void *)a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*a2 - 8));
  if (result)
  {
    uint64_t result = icu::TimeZone::operator==(a1, (uint64_t)a2);
    if (result) {
      return (*(unsigned int (**)(uint64_t, void *))(*(void *)a1 + 88))(a1, a2) != 0;
    }
  }
  return result;
}

icu::BasicTimeZone *icu::OlsonTimeZone::clone@<X0>(UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::BasicTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0xE0, a2);
  if (result)
  {
    uint64_t v5 = icu::BasicTimeZone::BasicTimeZone(result, this);
    *(void *)uint64_t v5 = &unk_1EDA50DB0;
    *((void *)v5 + 16) = 0;
    *((void *)v5 + 27) = 0;
    return (icu::BasicTimeZone *)icu::OlsonTimeZone::operator=((uint64_t)v5, (uint64_t)this);
  }
  return result;
}

uint64_t icu::OlsonTimeZone::getOffset(icu::OlsonTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, UErrorCode *a8)
{
  if (a4 < 0xC) {
    return (*(uint64_t (**)(icu::OlsonTimeZone *))(*(void *)this + 40))(this);
  }
  if (*(int *)a8 <= 0) {
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

uint64_t icu::OlsonTimeZone::getOffset(icu::OlsonTimeZone *this, unsigned int a2, int a3, unsigned int a4, int a5, char a6, int a7, int a8, UErrorCode *a9)
{
  if (*(int *)a9 > 0) {
    return 0;
  }
  if (a2 > 1
    || a4 > 0xB
    || a5 < 1
    || (a8 - 32) < 0xFFFFFFFC
    || a7 > 0x5265BFF
    || (a6 - 8) < 0xF9u
    || a5 > a8)
  {
    uint64_t result = 0;
    *a9 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    if (!a2) {
      a3 = -a3;
    }
    uint64_t v12 = *((void *)this + 16);
    if (v12 && a3 >= *((_DWORD *)this + 36))
    {
      int v14 = *(uint64_t (**)(void))(*(void *)v12 + 40);
      return v14();
    }
    else
    {
      double v13 = sub_18C93E22C(a3, a4, a5);
      *(void *)unsigned int v15 = 0;
      icu::OlsonTimeZone::getHistoricalOffset(this, (double)a7 + v13 * 86400000.0, 1, 3, 1, &v15[1], v15);
      return (v15[0] + v15[1]);
    }
  }
  return result;
}

void icu::OlsonTimeZone::getHistoricalOffset(icu::OlsonTimeZone *this, double a2, int a3, char a4, char a5, int *a6, int *a7)
{
  int v10 = (__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38));
  if (v10 >= 1
    && ((double v14 = uprv_floor(a2 / 1000.0), a3)
     || v14 >= (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(this, 0)))
  {
    int v18 = a4 & 3;
    int v19 = a5 & 3;
    int v41 = a5 & 0xC;
    int v42 = a4 & 0xC;
    unsigned __int16 v20 = v10;
    while ((__int16)v20 >= 1)
    {
      unsigned __int16 v21 = v20 - 1;
      int64_t v22 = icu::OlsonTimeZone::transitionTimeInSeconds(this, (__int16)(v20 - 1));
      if (a3 && v14 >= (double)(v22 - 86400))
      {
        uint64_t v23 = (_DWORD *)*((void *)this + 14);
        uint64_t v24 = *((void *)this + 15);
        if (v20 <= 1u)
        {
          int v25 = v23[1];
          int v26 = v25 + *v23;
        }
        else
        {
          int v25 = v23[(2 * *(unsigned __int8 *)(v24 + (unsigned __int16)(v20 - 2))) | 1];
          int v26 = v25 + v23[2 * *(unsigned __int8 *)(v24 + (unsigned __int16)(v20 - 2))];
        }
        int v27 = *(unsigned __int8 *)(v24 + (unsigned __int16)(v20 - 1));
        int v28 = v23[(2 * v27) | 1];
        if (v28) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v25 != 0;
        }
        int v30 = v28 + v23[2 * v27];
        if (v25) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 != 0;
        }
        if (v30 >= v26)
        {
          BOOL v35 = v18 == 1 && v29;
          BOOL v36 = v18 == 3 && v31;
          if (v35 || v36)
          {
            int v30 = v26;
          }
          else
          {
            if (v18 != 1) {
              BOOL v31 = 0;
            }
            if (v18 != 3) {
              BOOL v29 = 0;
            }
            int v37 = v31 || v29;
            if (v42 != 12) {
              int v26 = v30;
            }
            if (!v37) {
              int v30 = v26;
            }
          }
        }
        else
        {
          BOOL v32 = v19 == 1 && v29;
          BOOL v33 = v19 == 3 && v31;
          if (!v32 && !v33)
          {
            if (v19 != 1) {
              BOOL v31 = 0;
            }
            if (v19 != 3) {
              BOOL v29 = 0;
            }
            int v34 = v31 || v29;
            if (v41 == 4) {
              int v34 = 1;
            }
            if (v34) {
              int v30 = v26;
            }
          }
        }
        v22 += v30;
      }
      --v20;
      if (v14 >= (double)v22)
      {
        long long v38 = (_DWORD *)*((void *)this + 14);
        uint64_t v39 = *((void *)this + 15);
        *a6 = 1000 * v38[2 * *(unsigned __int8 *)(v39 + v21)];
        uint64_t v40 = (2 * *(unsigned __int8 *)(v39 + v21)) | 1;
        goto LABEL_57;
      }
    }
    long long v38 = (_DWORD *)*((void *)this + 14);
    *a6 = 1000 * *v38;
    uint64_t v40 = 1;
LABEL_57:
    int v16 = &v38[v40];
  }
  else
  {
    unsigned int v15 = (int *)*((void *)this + 14);
    int v17 = *v15;
    int v16 = v15 + 1;
    *a6 = 1000 * v17;
  }
  *a7 = 1000 * *v16;
}

void icu::OlsonTimeZone::getOffset(icu::OlsonTimeZone *this, double a2, uint64_t a3, int *a4, int *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    uint64_t v6 = *((void *)this + 16);
    if (v6 && *((double *)this + 17) <= a2) {
      (*(void (**)(void, uint64_t, int *, int *))(*(void *)v6 + 48))(*((void *)this + 16), a3, a4, a5);
    }
    else {
      icu::OlsonTimeZone::getHistoricalOffset(this, a2, a3, 4, 12, a4, a5);
    }
  }
}

void icu::OlsonTimeZone::getOffsetFromLocal(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, int *a6, double a7)
{
  if (*a6 <= 0)
  {
    uint64_t v7 = *(void *)(a1 + 128);
    if (v7 && *(double *)(a1 + 136) <= a7) {
      (*(void (**)(void, uint64_t, uint64_t, int *, int *))(*(void *)v7 + 160))(*(void *)(a1 + 128), a2, a3, a4, a5);
    }
    else {
      icu::OlsonTimeZone::getHistoricalOffset((icu::OlsonTimeZone *)a1, a7, 1, a2, a3, a4, a5);
    }
  }
}

uint64_t icu::OlsonTimeZone::getRawOffset(icu::OlsonTimeZone *this)
{
  uint64_t v5 = 0;
  int v4 = 0;
  double UTCtime = uprv_getUTCtime();
  (*(void (**)(icu::OlsonTimeZone *, void, uint64_t *, int *, char *, double))(*(void *)this + 48))(this, 0, &v5, &v4, (char *)&v5 + 4, UTCtime);
  return v5;
}

unint64_t icu::OlsonTimeZone::transitionTimeInSeconds(icu::OlsonTimeZone *this, int a2)
{
  int v2 = *((__int16 *)this + 36);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 != v3) {
    return *(unsigned int *)(*((void *)this + 10) + 8 * a2 + 4) | ((unint64_t)*(unsigned int *)(*((void *)this + 10) + 8 * a2) << 32);
  }
  int v6 = (__int16)v4;
  int v7 = *((__int16 *)this + 37);
  BOOL v3 = __OFSUB__(v6, v7);
  int v8 = v6 - v7;
  if (v8 < 0 != v3) {
    return *(int *)(*((void *)this + 11) + 4 * v6);
  }
  else {
    return *(unsigned int *)(*((void *)this + 12) + 8 * (__int16)v8 + 4) | ((unint64_t)*(unsigned int *)(*((void *)this + 12) + 8 * (__int16)v8) << 32);
  }
}

uint64_t icu::OlsonTimeZone::useDaylightTime(icu::OlsonTimeZone *this)
{
  double UTCtime = uprv_getUTCtime();
  uint64_t v3 = *((void *)this + 16);
  if (v3 && UTCtime >= *((double *)this + 17))
  {
    double v13 = *(uint64_t (**)(void))(*(void *)v3 + 72);
    return v13();
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    sub_18C93E568((int *)&v16 + 1, &v16, (_DWORD *)&v15 + 1, (int *)&v15, (int *)&v14 + 1, &v14, UTCtime);
    double v4 = sub_18C93E22C(SHIDWORD(v16), 0, 1);
    double v5 = sub_18C93E22C(HIDWORD(v16) + 1, 0, 1);
    if ((__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38)) >= 1)
    {
      uint64_t v6 = 0;
      double v7 = v4 * 86400.0;
      double v8 = v5 * 86400.0;
      uint64_t v9 = (unsigned __int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38));
      do
      {
        double v10 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(this, (__int16)v6);
        if (v8 <= v10) {
          break;
        }
        if (v7 <= v10
          && *(_DWORD *)(*((void *)this + 14) + 8 * *(unsigned __int8 *)(*((void *)this + 15) + v6) + 4))
        {
          return 1;
        }
        if (v7 < v10)
        {
          uint64_t v11 = v6 ? (2 * *(unsigned __int8 *)(*((void *)this + 15) + (unsigned __int16)(v6 - 1))) | 1 : 1;
          if (*(_DWORD *)(*((void *)this + 14) + 4 * v11)) {
            return 1;
          }
        }
        ++v6;
      }
      while (v9 != v6);
    }
    return 0;
  }
}

uint64_t icu::OlsonTimeZone::getDSTSavings(icu::OlsonTimeZone *this)
{
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 104))();
  }
  else {
    return icu::TimeZone::getDSTSavings(this);
  }
}

BOOL icu::OlsonTimeZone::inDaylightTime(icu::OlsonTimeZone *this, double a2, UErrorCode *a3)
{
  int v5 = 0;
  int v4 = 0;
  (*(void (**)(icu::OlsonTimeZone *, void, int *, int *, UErrorCode *, double))(*(void *)this + 48))(this, 0, &v5, &v4, a3, a2);
  return v4 != 0;
}

uint64_t icu::OlsonTimeZone::hasSameRules(icu::OlsonTimeZone *this, const icu::TimeZone *lpsrc)
{
  if (this == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (*((void *)this + 15) == *(void *)(result + 120)) {
    return 1;
  }
  uint64_t v5 = *((void *)this + 16);
  uint64_t v6 = *(void *)(v4 + 128);
  if (v5)
  {
    if (!v6) {
      return 0;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    if (!result) {
      return result;
    }
    if (*((void *)this + 16)
      && (*((_DWORD *)this + 36) != *(_DWORD *)(v4 + 144) || *((double *)this + 17) != *(double *)(v4 + 136)))
    {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  int v7 = *((unsigned __int16 *)this + 52);
  if (v7 != *(unsigned __int16 *)(v4 + 104)) {
    return 0;
  }
  int v8 = *((unsigned __int16 *)this + 36);
  if (v8 != *(unsigned __int16 *)(v4 + 72)) {
    return 0;
  }
  int v9 = *((unsigned __int16 *)this + 37);
  if (v9 != *(unsigned __int16 *)(v4 + 74)) {
    return 0;
  }
  int v10 = *((unsigned __int16 *)this + 38);
  if (v10 != *(unsigned __int16 *)(v4 + 76)) {
    return 0;
  }
  __int16 v11 = *((_WORD *)this + 36);
  uint64_t result = sub_18C9989C4(*((void *)this + 10), *(void *)(v4 + 80), 8 * (__int16)v8);
  if (result)
  {
    uint64_t result = sub_18C9989C4(*((void *)this + 11), *(void *)(v4 + 88), 4 * (__int16)v9);
    if (result)
    {
      uint64_t result = sub_18C9989C4(*((void *)this + 12), *(void *)(v4 + 96), 8 * (__int16)v10);
      if (result)
      {
        uint64_t result = sub_18C9989C4(*((void *)this + 14), *(void *)(v4 + 112), 8 * (__int16)v7);
        if (result) {
          return sub_18C9989C4(*((void *)this + 15), *(void *)(v4 + 120), (__int16)(v9 + v11 + v10));
        }
      }
    }
  }
  return result;
}

BOOL sub_18C9989C4(unint64_t __s1, unint64_t a2, int a3)
{
  if (!(__s1 | a2)) {
    return 1;
  }
  BOOL result = 0;
  BOOL v5 = __s1 == 0;
  if (a2)
  {
    BOOL v6 = 1;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v6 = __s1 == 0;
  }
  if (v6 && !v5)
  {
    if (__s1 == a2) {
      return 1;
    }
    return memcmp((const void *)__s1, (const void *)a2, a3) == 0;
  }
  return result;
}

void icu::OlsonTimeZone::checkTransitionRules(icu::OlsonTimeZone *this, UErrorCode *a2)
{
}

icu::OlsonTimeZone *icu::OlsonTimeZone::initTransitionRules(icu::OlsonTimeZone *this, UErrorCode *a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return this;
  }
  uint64_t v3 = this;
  icu::OlsonTimeZone::deleteTransitionRules(this);
  uint64_t v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v66 = 0u;
  v65 = (UChar *)&unk_1EDA47700;
  LOWORD(v66) = 2;
  icu::UnicodeString::operator=(&v65, (UChar **)v3 + 1);
  memset(v64, 0, 64);
  uint64_t v61 = L"(STD)";
  icu::UnicodeString::UnicodeString(v63, 1, &v61);
  icu::operator+((uint64_t)&v65, (uint64_t)v63, (uint64_t)v64);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v63);
  memset(v63, 0, sizeof(v63));
  uint64_t v60 = L"(DST)";
  icu::UnicodeString::UnicodeString(v62, 1, &v60);
  icu::operator+((uint64_t)&v65, (uint64_t)v62, (uint64_t)v63);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v62);
  BOOL v6 = (uint64_t *)*((void *)v3 + 14);
  int v7 = *(_DWORD *)v6;
  int v8 = *((_DWORD *)v6 + 1);
  int v10 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new(v6, (icu::UMemory *)0x50, v9);
  if (!v10)
  {
    *((void *)v3 + 20) = 0;
    goto LABEL_12;
  }
  if (v8) {
    __int16 v11 = (UChar **)v63;
  }
  else {
    __int16 v11 = (UChar **)v64;
  }
  *((void *)v3 + 20) = icu::InitialTimeZoneRule::InitialTimeZoneRule(v10, v11, 1000 * v7, 1000 * v8);
  int v12 = *((unsigned __int16 *)v3 + 38);
  double v13 = (char *)(*((unsigned __int16 *)v3 + 37) + *((unsigned __int16 *)v3 + 36) + v12);
  int v14 = (__int16)(*((_WORD *)v3 + 37) + *((_WORD *)v3 + 36) + v12);
  if (v14 < 1) {
    goto LABEL_40;
  }
  double v13 = 0;
  *((_WORD *)v3 + 88) = 0;
  uint64_t v15 = *((void *)v3 + 15);
  while (!v13[v15])
  {
    *((_WORD *)v3 + 88) = (_WORD)++v13;
    if ((char *)(unsigned __int16)v14 == v13) {
      goto LABEL_40;
    }
  }
  if ((unsigned __int16)v14 == (unsigned __int16)v13)
  {
LABEL_40:
    uint64_t v39 = *((void *)v3 + 16);
    if (!v39) {
      goto LABEL_54;
    }
    double v40 = *((double *)v3 + 17);
    double Time = v40;
    int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 72))(v39);
    uint64_t v42 = (*(uint64_t (**)(void))(**((void **)v3 + 16) + 96))(*((void *)v3 + 16));
    *((void *)v3 + 26) = v42;
    if (v41)
    {
      if (!v42) {
        goto LABEL_12;
      }
      icu::SimpleTimeZone::setStartYear(v42, *((_DWORD *)v3 + 36));
      memset(v62, 0, 32);
      icu::TimeZoneTransition::TimeZoneTransition(v62);
      (*(void (**)(void, void, _OWORD *, double))(**((void **)v3 + 26) + 112))(*((void *)v3 + 26), 0, v62, v40);
      uint64_t v43 = icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v62);
      uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 24))(v43);
      if (!v44)
      {
        *a2 = U_MEMORY_ALLOCATION_ERROR;
        icu::OlsonTimeZone::deleteTransitionRules(v3);
        icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v62);
        goto LABEL_54;
      }
      uint64_t v45 = (icu::TimeZoneRule *)v44;
      double Time = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v62);
      icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v62);
    }
    else
    {
      if (!v42) {
        goto LABEL_12;
      }
      icu::UnicodeString::operator=(&v65, (UChar **)(*((void *)v3 + 16) + 8));
      long long v49 = icu::UMemory::operator new(v48, (icu::UMemory *)0x160, v47);
      if (!v49) {
        goto LABEL_12;
      }
      uint64_t v45 = (icu::TimeZoneRule *)v49;
      uint64_t v50 = (*(uint64_t (**)(void))(**((void **)v3 + 16) + 64))(*((void *)v3 + 16));
      icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(v45, &v65, v50, 0, &Time, 1, 2);
    }
    unint64_t v51 = (v14 - 1);
    if (v14 < 1
      || (unint64_t v51 = *(unsigned __int8 *)(*((void *)v3 + 15) + v51),
          (uint64_t v52 = *(void *)(*((void *)v3 + 24) + 8 * v51)) == 0))
    {
      uint64_t v52 = *((void *)v3 + 20);
    }
    int v53 = icu::UMemory::operator new((uint64_t *)v51, (icu::UMemory *)0x20, v46);
    if (v53)
    {
      int v54 = icu::TimeZoneTransition::TimeZoneTransition(v53);
      *((void *)v3 + 23) = v54;
      icu::TimeZoneTransition::setTime((uint64_t)v54, Time);
      int v55 = (icu::TimeZoneTransition *)*((void *)v3 + 23);
      int v56 = (icu::TimeZoneRule *)(*(uint64_t (**)(uint64_t))(*(void *)v52 + 24))(v52);
      icu::TimeZoneTransition::adoptFrom(v55, v56);
      icu::TimeZoneTransition::adoptTo(*((icu::TimeZoneTransition **)v3 + 23), v45);
      goto LABEL_54;
    }
    *((void *)v3 + 23) = 0;
LABEL_12:
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    icu::OlsonTimeZone::deleteTransitionRules(v3);
    goto LABEL_54;
  }
  uint64_t v16 = uprv_malloc(8 * v14);
  if (!v16) {
    goto LABEL_12;
  }
  int v18 = v16;
  int v19 = *((__int16 *)v3 + 52);
  if (v19 < 1)
  {
LABEL_38:
    uprv_free(v18);
    BOOL v33 = (uint64_t *)*((void *)v3 + 15);
    uint64_t v34 = *((unsigned __int8 *)v33 + *((__int16 *)v3 + 88));
    BOOL v36 = icu::UMemory::operator new(v33, (icu::UMemory *)0x20, v35);
    if (!v36)
    {
      *((void *)v3 + 21) = 0;
      goto LABEL_12;
    }
    int v37 = (icu::TimeZoneTransition *)v36;
    int64_t v38 = icu::OlsonTimeZone::transitionTimeInSeconds(v3, *((__int16 *)v3 + 88));
    icu::TimeZoneTransition::TimeZoneTransition(v37, (double)v38 * 1000.0, *((const icu::TimeZoneRule **)v3 + 20), *(const icu::TimeZoneRule **)(*((void *)v3 + 24) + 8 * v34));
    *((void *)v3 + 21) = v37;
    goto LABEL_40;
  }
  uint64_t v20 = 0;
  while (1)
  {
    if (*((__int16 *)v3 + 88) >= v14) {
      goto LABEL_37;
    }
    uint64_t v21 = 0;
    uint64_t v22 = *((__int16 *)v3 + 88);
    uint64_t v23 = *((void *)v3 + 15);
    do
    {
      if (v20 == *(unsigned __int8 *)(v23 + v22))
      {
        double v24 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(v3, (__int16)v22) * 1000.0;
        if (!*((void *)v3 + 16) || v24 <= *((double *)v3 + 17))
        {
          *((double *)v18 + (int)v21) = v24;
          uint64_t v21 = (v21 + 1);
        }
      }
      ++v22;
    }
    while (v22 < v14);
    if ((int)v21 < 1) {
      goto LABEL_37;
    }
    int v25 = (int *)(*((void *)v3 + 14) + 8 * v20);
    int v27 = *v25;
    int v26 = v25[1];
    int v28 = (uint64_t *)*((void *)v3 + 24);
    if (!v28) {
      break;
    }
LABEL_30:
    BOOL v31 = icu::UMemory::operator new(v28, (icu::UMemory *)0x160, v17);
    if (v31)
    {
      if (v26) {
        BOOL v32 = v63;
      }
      else {
        BOOL v32 = v64;
      }
      BOOL v31 = (uint64_t *)icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(v31, v32, (1000 * v27), (1000 * v26), v18, v21, 2);
    }
    *(void *)(*((void *)v3 + 24) + 8 * v20) = v31;
    if (!*(void *)(*((void *)v3 + 24) + 8 * v20)) {
      goto LABEL_12;
    }
    LOWORD(v19) = *((_WORD *)v3 + 52);
LABEL_37:
    if (++v20 >= (__int16)v19) {
      goto LABEL_38;
    }
  }
  *((_WORD *)v3 + 100) = v19;
  BOOL v29 = uprv_malloc(8 * (__int16)v19);
  *((void *)v3 + 24) = v29;
  if (v29)
  {
    if (*((__int16 *)v3 + 100) >= 1)
    {
      int v28 = 0;
      uint64_t v30 = 8 * *((unsigned __int16 *)v3 + 100);
      do
        *(uint64_t *)((char *)v28++ + *((void *)v3 + 24)) = 0;
      while ((uint64_t *)v30 != v28);
    }
    goto LABEL_30;
  }
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  icu::OlsonTimeZone::deleteTransitionRules(v3);
  uprv_free(v18);
LABEL_54:
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v63);
  icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)v64);
  return (icu::OlsonTimeZone *)icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)&v65);
}

uint64_t icu::OlsonTimeZone::getNextTransition(icu::OlsonTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v30 = 0;
  sub_18C7EFEB0((unsigned int *)this + 54, (void (*)(uint64_t, int *))sub_18C998A4C, (uint64_t)this, &v30);
  uint64_t v8 = 0;
  if (v30 <= 0)
  {
    if (!*((void *)this + 16)) {
      goto LABEL_7;
    }
    if (a3 && icu::TimeZoneTransition::getTime(*((icu::TimeZoneTransition **)this + 23)) == a2)
    {
      uint64_t v9 = *((void *)this + 23);
LABEL_23:
      icu::TimeZoneTransition::operator=(a4, v9);
      return 1;
    }
    if (icu::TimeZoneTransition::getTime(*((icu::TimeZoneTransition **)this + 23)) <= a2)
    {
      if (!(*(unsigned int (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16))) {
        return 0;
      }
      return (*(uint64_t (**)(void, uint64_t, icu::TimeZoneTransition *, double))(**((void **)this + 26)
                                                                                           + 112))(*((void *)this + 26), a3, a4, a2);
    }
    else
    {
LABEL_7:
      uint64_t v8 = *((void *)this + 24);
      if (v8)
      {
        __int16 v10 = *((_WORD *)this + 38);
        int v11 = (__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + v10) - 1;
        int v12 = *((__int16 *)this + 88);
        if (v12 > (__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + v10 - 1))
        {
          int v13 = (__int16)v11;
LABEL_19:
          if (v11 != v13)
          {
            uint64_t v9 = *((void *)this + 21);
            goto LABEL_23;
          }
          goto LABEL_22;
        }
        LOWORD(v13) = *((_WORD *)this + 37) + *((_WORD *)this + 36) + v10 - 1;
        while (1)
        {
          double v14 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(this, (__int16)v13) * 1000.0;
          BOOL v15 = v14 == a2 && a3 == 0;
          if (v14 < a2 || v15) {
            break;
          }
          int v13 = (__int16)(v13 - 1);
          if (v13 < v12) {
            goto LABEL_19;
          }
        }
        if (v11 == (__int16)v13)
        {
LABEL_22:
          uint64_t v9 = *((void *)this + 23);
          if (v9) {
            goto LABEL_23;
          }
          return 0;
        }
        uint64_t v16 = *((void *)this + 15);
        uint64_t v17 = (__int16)v13 + 1;
        int v18 = *(UChar ***)(v8 + 8 * *(unsigned __int8 *)(v16 + v17));
        int v19 = *(UChar ***)(v8 + 8 * *(unsigned __int8 *)(v16 + (__int16)v13));
        double v20 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(this, (__int16)v17) * 1000.0;
        long long v37 = 0u;
        long long v38 = 0u;
        uint64_t v40 = 0;
        long long v39 = 0u;
        uint64_t v35 = 0;
        BOOL v36 = (UChar *)&unk_1EDA47700;
        LOWORD(v37) = 2;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        BOOL v31 = (UChar *)&unk_1EDA47700;
        LOWORD(v32) = 2;
        icu::TimeZoneRule::getName(v19, &v36);
        icu::TimeZoneRule::getName(v18, &v31);
        if (v37)
        {
          if ((v32 & 1) == 0) {
            goto LABEL_40;
          }
        }
        else
        {
          if ((v37 & 0x8000u) == 0) {
            int v21 = (unsigned __int16)v37 >> 5;
          }
          else {
            int v21 = DWORD1(v37);
          }
          if ((v32 & 0x8000u) == 0) {
            int v22 = (unsigned __int16)v32 >> 5;
          }
          else {
            int v22 = DWORD1(v32);
          }
          if ((v32 & 1) != 0
            || v21 != v22
            || !icu::UnicodeString::doEquals((icu::UnicodeString *)&v36, (const icu::UnicodeString *)&v31, v21))
          {
            goto LABEL_40;
          }
        }
        int RawOffset = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v19);
        if (RawOffset == icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v18))
        {
          int DSTSavings = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v19);
          if (DSTSavings == icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v18))
          {
            uint64_t v8 = (*(uint64_t (**)(icu::OlsonTimeZone *, void, icu::TimeZoneTransition *, double))(*(void *)this + 112))(this, 0, a4, v20);
LABEL_41:
            icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v31);
            icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v36);
            return v8;
          }
        }
LABEL_40:
        icu::TimeZoneTransition::setTime((uint64_t)a4, v20);
        int v26 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v19 + 3))(v19);
        icu::TimeZoneTransition::adoptFrom(a4, v26);
        int v27 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v18 + 3))(v18);
        icu::TimeZoneTransition::adoptTo(a4, v27);
        uint64_t v8 = 1;
        goto LABEL_41;
      }
    }
  }
  return v8;
}

uint64_t icu::OlsonTimeZone::getPreviousTransition(icu::OlsonTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v28 = 0;
  sub_18C7EFEB0((unsigned int *)this + 54, (void (*)(uint64_t, int *))sub_18C998A4C, (uint64_t)this, &v28);
  uint64_t v8 = 0;
  if (v28 > 0) {
    return v8;
  }
  if (!*((void *)this + 16)) {
    goto LABEL_9;
  }
  if (!a3 || icu::TimeZoneTransition::getTime(*((icu::TimeZoneTransition **)this + 23)) != a2)
  {
    if (icu::TimeZoneTransition::getTime(*((icu::TimeZoneTransition **)this + 23)) < a2)
    {
      if ((*(unsigned int (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16))) {
        return (*(uint64_t (**)(void, uint64_t, icu::TimeZoneTransition *, double))(**((void **)this + 26)
      }
                                                                                             + 120))(*((void *)this + 26), a3, a4, a2);
      goto LABEL_21;
    }
LABEL_9:
    uint64_t v8 = *((void *)this + 24);
    if (!v8) {
      return v8;
    }
    LOWORD(v10) = *((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38);
    int v11 = *((__int16 *)this + 88);
    do
    {
      int v10 = (__int16)(v10 - 1);
      if (v10 < v11) {
        return 0;
      }
      double v12 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(this, v10) * 1000.0;
      BOOL v13 = v12 == a2 && a3 != 0;
    }
    while (v12 >= a2 && !v13);
    if (v10 == v11)
    {
      uint64_t v15 = *((void *)this + 21);
      goto LABEL_22;
    }
    uint64_t v16 = (unsigned __int8 *)(*((void *)this + 15) + v10);
    uint64_t v17 = *(UChar ***)(v8 + 8 * *v16);
    int v18 = *(UChar ***)(v8 + 8 * *(v16 - 1));
    double v19 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(this, v10) * 1000.0;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v38 = 0;
    long long v37 = 0u;
    uint64_t v33 = 0;
    long long v34 = (UChar *)&unk_1EDA47700;
    LOWORD(v35) = 2;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    BOOL v29 = (UChar *)&unk_1EDA47700;
    LOWORD(v30) = 2;
    icu::TimeZoneRule::getName(v18, &v34);
    icu::TimeZoneRule::getName(v17, &v29);
    if (v35)
    {
      if ((v30 & 1) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      if ((v35 & 0x8000u) == 0) {
        int v20 = (unsigned __int16)v35 >> 5;
      }
      else {
        int v20 = DWORD1(v35);
      }
      if ((v30 & 0x8000u) == 0) {
        int v21 = (unsigned __int16)v30 >> 5;
      }
      else {
        int v21 = DWORD1(v30);
      }
      if ((v30 & 1) != 0
        || v20 != v21
        || !icu::UnicodeString::doEquals((icu::UnicodeString *)&v34, (const icu::UnicodeString *)&v29, v20))
      {
        goto LABEL_39;
      }
    }
    int RawOffset = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v18);
    if (RawOffset == icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v17))
    {
      int DSTSavings = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v18);
      if (DSTSavings == icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v17))
      {
        uint64_t v8 = (*(uint64_t (**)(icu::OlsonTimeZone *, void, icu::TimeZoneTransition *, double))(*(void *)this + 120))(this, 0, a4, v19);
LABEL_40:
        icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v29);
        icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v34);
        return v8;
      }
    }
LABEL_39:
    icu::TimeZoneTransition::setTime((uint64_t)a4, v19);
    int v25 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v18 + 3))(v18);
    icu::TimeZoneTransition::adoptFrom(a4, v25);
    int v26 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v17 + 3))(v17);
    icu::TimeZoneTransition::adoptTo(a4, v26);
    uint64_t v8 = 1;
    goto LABEL_40;
  }
LABEL_21:
  uint64_t v15 = *((void *)this + 23);
LABEL_22:
  icu::TimeZoneTransition::operator=(a4, v15);
  return 1;
}

uint64_t icu::OlsonTimeZone::countTransitionRules(icu::OlsonTimeZone *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  sub_18C7EFEB0((unsigned int *)this + 54, (void (*)(uint64_t, int *))sub_18C998A4C, (uint64_t)this, (int *)a2);
  if (*(int *)a2 > 0) {
    return 0;
  }
  BOOL v6 = (void *)*((void *)this + 24);
  if (v6 && *((__int16 *)this + 100) >= 1)
  {
    LODWORD(v4) = 0;
    uint64_t v7 = *((unsigned __int16 *)this + 100);
    do
    {
      if (*v6++) {
        uint64_t v4 = (v4 + 1);
      }
      else {
        uint64_t v4 = v4;
      }
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v9 = *((void *)this + 16);
  if (v9)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 72))(v9)) {
      return (v4 + 2);
    }
    else {
      return (v4 + 1);
    }
  }
  return v4;
}

void icu::OlsonTimeZone::getTimeZoneRules(icu::OlsonTimeZone *this, const icu::InitialTimeZoneRule **a2, const icu::TimeZoneRule **a3, int *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    sub_18C7EFEB0((unsigned int *)this + 54, (void (*)(uint64_t, int *))sub_18C998A4C, (uint64_t)this, (int *)a5);
    if (*(int *)a5 <= 0)
    {
      int v10 = 0;
      *a2 = (const icu::InitialTimeZoneRule *)*((void *)this + 20);
      int v11 = *a4;
      if (*((void *)this + 24) && v11 >= 1)
      {
        if (*((__int16 *)this + 100) < 1)
        {
          int v10 = 0;
        }
        else
        {
          uint64_t v12 = 0;
          int v10 = 0;
          uint64_t v13 = 8 * *((unsigned __int16 *)this + 100);
          do
          {
            double v14 = *(const icu::TimeZoneRule **)(*((void *)this + 24) + v12);
            if (v14)
            {
              a3[v10++] = v14;
              if (v10 >= v11) {
                break;
              }
            }
            v12 += 8;
          }
          while (v13 != v12);
          int v11 = *a4;
        }
      }
      uint64_t v15 = *((void *)this + 26);
      if (v15) {
        BOOL v16 = v11 <= v10;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        int v18 = 0;
        uint64_t v17 = (v11 - v10);
        (*(void (**)(uint64_t, char *, const icu::TimeZoneRule **, uint64_t *, UErrorCode *))(*(void *)v15 + 144))(v15, (char *)&v17 + 4, &a3[v10], &v17, a5);
        if (*(int *)a5 > 0) {
          return;
        }
        v10 += v17;
      }
      *a4 = v10;
    }
  }
}

const char *sub_18C999A84()
{
  return "persian";
}

uint64_t *sub_18C999A90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    BOOL result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, a1);
    *BOOL result = (uint64_t)&unk_1EDA50E80;
  }
  return result;
}

icu::Calendar *sub_18C999AE0(icu::Calendar *a1, char **a2, UErrorCode *a3)
{
  BOOL v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  uint64_t v7 = icu::Calendar::Calendar(a1, v6, (const icu::Locale *)a2, a3);
  *(void *)a1 = &unk_1EDA50E80;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)a1, v8, a3);
  return a1;
}

void sub_18C999B64(icu::Calendar *a1)
{
  icu::Calendar::~Calendar(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C999B8C(uint64_t a1, int a2, int a3)
{
  return dword_18CA95940[4 * a2 + a3];
}

uint64_t sub_18C999BA0(uint64_t a1, int a2, int a3)
{
  int v3 = a2;
  int v6 = a3;
  if (a3 >= 0xC) {
    int v3 = sub_18C93E158(12, &v6, (double)a3) + a2;
  }
  int v7 = 0;
  sub_18C93E158(33, &v7, (double)(25 * v3 + 11));
  if (v7 <= 7) {
    uint64_t v4 = (char *)&unk_18CA95AC0;
  }
  else {
    uint64_t v4 = (char *)&unk_18CA95ACC;
  }
  return v4[v6];
}

uint64_t sub_18C999C2C(uint64_t a1, int a2)
{
  int v3 = 0;
  sub_18C93E158(33, &v3, (double)(25 * a2 + 11));
  if (v3 > 7) {
    return 365;
  }
  else {
    return 366;
  }
}

uint64_t sub_18C999C78(uint64_t a1, int a2, int a3)
{
  int v3 = a2;
  int v5 = a3;
  if (a3 >= 0xC) {
    int v3 = sub_18C93E158(12, &v5, (double)a3) + a2;
  }
  uint64_t result = sub_18C93E120(8 * v3 + 21, 33) + 365 * v3 + 1947954;
  if (v5) {
    return (result + word_18CA95AD8[v5]);
  }
  return result;
}

uint64_t sub_18C999CF8(uint64_t a1)
{
  if (icu::Calendar::newerField(a1, 0x13u, 1u) == 19)
  {
    if (*(int *)(a1 + 208) >= 1)
    {
      uint64_t v2 = (unsigned int *)(a1 + 88);
      return *v2;
    }
  }
  else if (*(int *)(a1 + 136) >= 1)
  {
    uint64_t v2 = (unsigned int *)(a1 + 16);
    return *v2;
  }
  return 1;
}

double sub_18C999D5C(uint64_t a1, int a2)
{
  int v3 = a2 - 1948320;
  int v4 = sub_18C93E13C(33 * (a2 - 1948320) + 3, 12053);
  int v5 = v4 + 1;
  int v6 = v3 - sub_18C93E120(8 * (v4 + 1) + 21, 33) - 365 * v4;
  unsigned int v7 = (v6 - 6) / 0x1Eu;
  if (v6 <= 215) {
    unsigned int v7 = v6 / 31;
  }
  int v8 = word_18CA95AD8[v7];
  *(unsigned char *)(a1 + 108) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = v5;
  *(void *)&double result = 0x100000001;
  *(void *)(a1 + 132) = 0x100000001;
  *(_WORD *)(a1 + 109) = 257;
  *(_DWORD *)(a1 + 88) = v5;
  *(_DWORD *)(a1 + 208) = 1;
  *(unsigned char *)(a1 + 127) = 1;
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 140) = 1;
  int v10 = v6 + 1;
  *(_DWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 224) = 1;
  *(unsigned char *)(a1 + 131) = 1;
  *(_WORD *)(a1 + 113) = 257;
  *(_DWORD *)(a1 + 32) = v10 - v8;
  *(_DWORD *)(a1 + 36) = v10;
  *(void *)(a1 + 152) = 0x100000001;
  return result;
}

uint64_t sub_18C999E58(unsigned char *a1, UErrorCode *a2)
{
  unsigned int v3 = icu::Calendar::get(a1, 0x13u, a2) + 622;
  if (*(int *)a2 <= 0) {
    return v3;
  }
  else {
    return 0;
  }
}

unsigned char *sub_18C999E94(unsigned char *a1, int a2)
{
  return icu::Calendar::set(a1, 0x13u, a2 - 622);
}

uint64_t sub_18C999EA0()
{
  return 1;
}

double sub_18C999EA8()
{
  if (atomic_load_explicit(dword_1EB20BB10, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20BB10))
  {
    sub_18C999EF8();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20BB10);
  }
  return *(double *)&qword_1EB20A760;
}

void sub_18C999EF8()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  UErrorCode v3 = U_ZERO_ERROR;
  bzero(v5, 0x270uLL);
  icu::Locale::Locale(v0, (icu::Locale *)v4, "@calendar=persian", 0, 0, 0);
  sub_18C999AE0((icu::Calendar *)v5, v4, &v3);
  icu::Locale::~Locale((icu::Locale *)v4);
  if (v3 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v1);
    icu::Calendar::setTimeInMillis((uint64_t)v5, v2, &v3);
    icu::Calendar::add(v5, 1u, -80, &v3);
    qword_1EB20A760 = icu::Calendar::getTimeInMillis((icu::Calendar *)v5, &v3);
    dword_1EB20A768 = icu::Calendar::get(v5, 1u, &v3);
  }
  icu::Calendar::~Calendar((icu::Calendar *)v5);
}

uint64_t sub_18C999FF0()
{
  if (atomic_load_explicit(dword_1EB20BB10, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20BB10))
  {
    sub_18C999EF8();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20BB10);
  }
  return dword_1EB20A768;
}

void *icu::PersianCalendar::getStaticClassID(icu::PersianCalendar *this)
{
  return &unk_1E9192534;
}

void *sub_18C99A04C()
{
  return &unk_1E9192534;
}

void sub_18C99A058(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = a3 + 16;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 56) = 0;
  uint64_t v6 = ures_openDirect(0, (uint64_t)"pluralRanges", (uint64_t)a2);
  if (*(int *)a2 <= 0)
  {
    memset(&v11[1], 0, 48);
    uint64_t v12 = 0;
    v11[0] = (char *)&v11[1] + 5;
    LODWORD(v11[1]) = 40;
    icu::CharString::append((icu::CharString *)v11, "locales/", -1, a2);
    icu::CharString::append((icu::CharString *)v11, (const char *)(a1 + 8), -1, a2);
    if (*(int *)a2 <= 0)
    {
      uint64_t v10 = 0;
      StringByKeyWithFallback = ures_getStringByKeyWithFallback(v6, (char *)v11[0], (int *)&v10 + 1, (UErrorCode *)&v10);
      if ((int)v10 <= 0)
      {
        int v8 = (UChar *)StringByKeyWithFallback;
        LODWORD(v12) = 0;
        *(unsigned char *)v11[0] = 0;
        icu::CharString::append((icu::CharString *)v11, "rules/", -1, a2);
        icu::CharString::appendInvariantChars((int *)v11, v8, SHIDWORD(v10), a2);
        if (*(int *)a2 <= 0)
        {
          v9[0] = &unk_1EDA51060;
          v9[1] = a3;
          ures_getAllItemsWithFallback(v6, (char *)v11[0], (uint64_t)v9, (int *)a2);
          icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v9);
        }
      }
    }
    if (BYTE4(v11[1])) {
      uprv_free(v11[0]);
    }
  }
  if (v6) {
    ures_close(v6);
  }
}

void *sub_18C99A228@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  int v5 = (void *)(a3 + 16);
  *(void *)a3 = a3 + 16;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 56) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 56);
  if ((int)v6 < 4)
  {
LABEL_6:
    double result = memcpy(v5, *(const void **)a1, 12 * (int)v6);
    *(_DWORD *)(a3 + 56) = v6;
    return result;
  }
  double result = uprv_malloc(12 * v6);
  if (result)
  {
    int v5 = result;
    if (*(unsigned char *)(a3 + 12)) {
      uprv_free(*(void **)a3);
    }
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = v6;
    *(unsigned char *)(a3 + 12) = 1;
    LODWORD(v6) = *(_DWORD *)(a1 + 56);
    goto LABEL_6;
  }
  *a2 = 7;
  return result;
}

uint64_t *sub_18C99A2F0@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  double result = icu::UMemory::operator new(a3, (icu::UMemory *)0x40, (unint64_t)a2);
  if (result)
  {
    unsigned int v7 = result;
    *double result = *(void *)a1;
    *((_DWORD *)result + 2) = *(_DWORD *)(a1 + 8);
    *((unsigned char *)result + 12) = *(unsigned char *)(a1 + 12);
    int v8 = *(const void **)a1;
    if (*(void *)a1 == a1 + 16)
    {
      *double result = (uint64_t)(result + 2);
      double result = (uint64_t *)memcpy(result + 2, v8, 12 * *(int *)(a1 + 8));
    }
    else
    {
      *(void *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
      *(unsigned char *)(a1 + 12) = 0;
    }
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a1 + 56);
    *a3 = (uint64_t)v7;
  }
  else
  {
    *a3 = 0;
    if (*a2 <= 0) {
      *a2 = 7;
    }
  }
  return result;
}

void sub_18C99A3AC(uint64_t a1, int a2, int *a3)
{
  if (*a3 <= 0 && *(_DWORD *)(a1 + 8) < a2)
  {
    if (a2 >= 1 && (uint64_t v6 = uprv_malloc(12 * a2)) != 0)
    {
      unsigned int v7 = v6;
      if (*(unsigned char *)(a1 + 12)) {
        uprv_free(*(void **)a1);
      }
      *(void *)a1 = v7;
      *(_DWORD *)(a1 + 8) = a2;
      *(unsigned char *)(a1 + 12) = 1;
    }
    else
    {
      *a3 = 7;
    }
  }
}

uint64_t sub_18C99A43C(unsigned int *a1, int a2, int a3)
{
  uint64_t v3 = a1[14];
  if ((int)v3 < 1) {
    return 5;
  }
  for (i = (unsigned int *)(*(void *)a1 + 8); *(i - 2) != a2 || *(i - 1) != a3; i += 3)
  {
    if (!--v3) {
      return 5;
    }
  }
  return *i;
}

void sub_18C99A480(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C99A4A8(uint64_t a1, uint64_t a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  (*(void (**)(void *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 80))(v24, a3, a5);
  if (*a5 <= 0)
  {
    sub_18C99A3AC(*(void *)(a1 + 8), v25, a5);
    if (*a5 <= 0)
    {
      if (icu::ResourceArray::getValue((icu::ResourceArray *)v24, 0, a3))
      {
        unsigned int v8 = 1;
        while (1)
        {
          v22[0] = 0;
          v22[1] = 0;
          uint64_t v23 = 0;
          (*(void (**)(void *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 80))(v22, a3, a5);
          if (*a5 > 0) {
            break;
          }
          if (v23 != 3)
          {
            *a5 = 17;
            return;
          }
          icu::ResourceArray::getValue((icu::ResourceArray *)v22, 0, a3);
          int v27 = 0;
          uint64_t v26 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32))(a3, &v27, a5);
          icu::UnicodeString::UnicodeString(v28, 1, &v26);
          int v10 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v28, (const icu::UnicodeString *)a5, v9);
          icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v28);
          if (*a5 <= 0)
          {
            icu::ResourceArray::getValue((icu::ResourceArray *)v22, 1u, a3);
            int v27 = 0;
            uint64_t v26 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32))(a3, &v27, a5);
            icu::UnicodeString::UnicodeString(v28, 1, &v26);
            int v13 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v28, (const icu::UnicodeString *)a5, v12);
            icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v28);
            if (*a5 <= 0)
            {
              icu::ResourceArray::getValue((icu::ResourceArray *)v22, 2u, a3);
              int v27 = 0;
              uint64_t v26 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32))(a3, &v27, a5);
              icu::UnicodeString::UnicodeString(v28, 1, &v26);
              int v16 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v28, (const icu::UnicodeString *)a5, v15);
              icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v28);
              if (*a5 < 1)
              {
                uint64_t v18 = *(void *)(a1 + 8);
                int v19 = *(_DWORD *)(v18 + 56);
                int v20 = (_DWORD *)(*(void *)v18 + 12 * v19);
                *int v20 = v10;
                v20[1] = v13;
                v20[2] = v16;
                *(_DWORD *)(v18 + 56) = v19 + 1;
                if (icu::ResourceArray::getValue((icu::ResourceArray *)v24, v8++, a3)) {
                  continue;
                }
              }
            }
          }
          return;
        }
      }
    }
  }
}

void *icu::PluralFormat::getStaticClassID(icu::PluralFormat *this)
{
  return &unk_1E9192538;
}

void *icu::PluralFormat::getDynamicClassID(icu::PluralFormat *this)
{
  return &unk_1E9192538;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, UErrorCode *a2)
{
  int v4 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(void *)int v4 = &unk_1EDA510A8;
  int v5 = (icu::Locale *)((char *)v4 + 328);
  Default = icu::Locale::getDefault(v4);
  icu::Locale::Locale(v5, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a2);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 87) = &unk_1EDA51100;
  *((void *)this + 88) = 0;
  icu::PluralFormat::init(this, 0, 0, (icu::UnifiedCache *)a2);
  return this;
}

void *icu::PluralFormat::init(void *result, icu::PluralRules *this, unint64_t a3, icu::UnifiedCache *a4)
{
  int v4 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v4 <= 0)
  {
    uint64_t v6 = (uint64_t)result;
    if (this)
    {
      double result = icu::PluralRules::clone(this, v4);
      *(void *)(v6 + 704) = result;
      if (!result)
      {
        *(_DWORD *)a4 = 7;
        return result;
      }
    }
    else
    {
      result[88] = icu::PluralRules::forLocale((icu::Locale *)(result + 41), a3, a4);
    }
    double result = icu::NumberFormat::createInstance((char **)(v6 + 328), (UErrorCode *)a4, v7);
    *(void *)(v6 + 680) = result;
  }
  return result;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v6 = (void *)icu::Format::Format((uint64_t)this);
  void *v6 = &unk_1EDA510A8;
  icu::Locale::Locale((icu::Locale *)(v6 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a3);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 87) = &unk_1EDA51100;
  *((void *)this + 88) = 0;
  icu::PluralFormat::init(this, 0, 0, (icu::UnifiedCache *)a3);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::PluralRules *a2, UErrorCode *a3)
{
  uint64_t v6 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(void *)uint64_t v6 = &unk_1EDA510A8;
  unsigned int v7 = (icu::Locale *)((char *)v6 + 328);
  Default = icu::Locale::getDefault(v6);
  icu::Locale::Locale(v7, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a3);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 87) = &unk_1EDA51100;
  *((void *)this + 88) = 0;
  icu::PluralFormat::init(this, a2, 2uLL, (icu::UnifiedCache *)a3);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::Locale *a2, const icu::PluralRules *a3, UErrorCode *a4)
{
  unsigned int v8 = (void *)icu::Format::Format((uint64_t)this);
  *unsigned int v8 = &unk_1EDA510A8;
  icu::Locale::Locale((icu::Locale *)(v8 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a4);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 87) = &unk_1EDA51100;
  *((void *)this + 88) = 0;
  icu::PluralFormat::init(this, a3, 2uLL, (icu::UnifiedCache *)a4);
  return this;
}

uint64_t icu::PluralFormat::PluralFormat(uint64_t a1, uint64_t a2, unint64_t a3, UErrorCode *a4)
{
  unsigned int v8 = (void *)icu::Format::Format(a1);
  *unsigned int v8 = &unk_1EDA510A8;
  icu::Locale::Locale((icu::Locale *)(v8 + 41), a2);
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(a1 + 552), a4);
  *(_OWORD *)(a1 + 680) = 0u;
  *(void *)(a1 + 696) = &unk_1EDA51100;
  *(void *)(a1 + 704) = 0;
  icu::PluralFormat::init((void *)a1, 0, a3, (icu::UnifiedCache *)a4);
  return a1;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, UChar **a2, UErrorCode *a3)
{
  uint64_t v6 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(void *)uint64_t v6 = &unk_1EDA510A8;
  unsigned int v7 = (icu::Locale *)((char *)v6 + 328);
  Default = icu::Locale::getDefault(v6);
  icu::Locale::Locale(v7, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a3);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 87) = &unk_1EDA51100;
  *((void *)this + 88) = 0;
  icu::PluralFormat::init(this, 0, 0, (icu::UnifiedCache *)a3);
  icu::PluralFormat::applyPattern(this, a2, a3);
  return this;
}

void icu::PluralFormat::applyPattern(icu::PluralFormat *this, UChar **a2, UErrorCode *a3)
{
  int v5 = (icu::PluralFormat *)((char *)this + 552);
  icu::MessagePattern::parsePluralStyle((icu::PluralFormat *)((char *)this + 552), a2, 0, a3);
  if (*(int *)a3 < 1)
  {
    double PluralOffset = icu::MessagePattern::getPluralOffset(v5, 0);
  }
  else
  {
    icu::MessagePattern::clear((uint64_t)v5);
    double PluralOffset = 0.0;
  }
  *((double *)this + 86) = PluralOffset;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::Locale *a2, UChar **a3, UErrorCode *a4)
{
  unsigned int v8 = (void *)icu::Format::Format((uint64_t)this);
  *unsigned int v8 = &unk_1EDA510A8;
  icu::Locale::Locale((icu::Locale *)(v8 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a4);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 87) = &unk_1EDA51100;
  *((void *)this + 88) = 0;
  icu::PluralFormat::init(this, 0, 0, (icu::UnifiedCache *)a4);
  icu::PluralFormat::applyPattern(this, a3, a4);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::PluralRules *a2, UChar **a3, UErrorCode *a4)
{
  unsigned int v8 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(void *)unsigned int v8 = &unk_1EDA510A8;
  uint64_t v9 = (icu::Locale *)((char *)v8 + 328);
  Default = icu::Locale::getDefault(v8);
  icu::Locale::Locale(v9, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a4);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 87) = &unk_1EDA51100;
  *((void *)this + 88) = 0;
  icu::PluralFormat::init(this, a2, 2uLL, (icu::UnifiedCache *)a4);
  icu::PluralFormat::applyPattern(this, a3, a4);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::Locale *a2, const icu::PluralRules *a3, UChar **a4, UErrorCode *a5)
{
  int v10 = (void *)icu::Format::Format((uint64_t)this);
  *int v10 = &unk_1EDA510A8;
  icu::Locale::Locale((icu::Locale *)(v10 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a5);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 87) = &unk_1EDA51100;
  *((void *)this + 88) = 0;
  icu::PluralFormat::init(this, a3, 2uLL, (icu::UnifiedCache *)a5);
  icu::PluralFormat::applyPattern(this, a4, a5);
  return this;
}

uint64_t icu::PluralFormat::PluralFormat(uint64_t a1, uint64_t a2, unint64_t a3, UChar **a4, UErrorCode *a5)
{
  int v10 = (void *)icu::Format::Format(a1);
  *int v10 = &unk_1EDA510A8;
  icu::Locale::Locale((icu::Locale *)(v10 + 41), a2);
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(a1 + 552), a5);
  *(_OWORD *)(a1 + 680) = 0u;
  *(void *)(a1 + 696) = &unk_1EDA51100;
  *(void *)(a1 + 704) = 0;
  icu::PluralFormat::init((void *)a1, 0, a3, (icu::UnifiedCache *)a5);
  icu::PluralFormat::applyPattern((icu::PluralFormat *)a1, a4, a5);
  return a1;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::PluralFormat *a2)
{
  int v4 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  void *v4 = &unk_1EDA510A8;
  icu::Locale::Locale((icu::Locale *)(v4 + 41), (uint64_t)a2 + 328);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), (const icu::PluralFormat *)((char *)a2 + 552));
  *((void *)this + 85) = 0;
  *((void *)this + 86) = *((void *)a2 + 86);
  *((void *)this + 87) = &unk_1EDA51100;
  *((void *)this + 88) = 0;
  icu::PluralFormat::copyObjects(this, a2, v5);
  return this;
}

void *icu::PluralFormat::copyObjects(icu::PluralFormat *this, const icu::PluralFormat *a2, UErrorCode *a3)
{
  int v13 = 0;
  uint64_t v5 = *((void *)this + 85);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 88);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)a2 + 85);
  if (v7) {
    Instance = (icu::Format *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
  }
  else {
    Instance = icu::NumberFormat::createInstance((char **)this + 41, (UErrorCode *)&v13, a3);
  }
  *((void *)this + 85) = Instance;
  int v11 = (icu::PluralRules *)*((void *)a2 + 88);
  if (v11) {
    double result = icu::PluralRules::clone(v11, v10);
  }
  else {
    double result = icu::PluralRules::forLocale((icu::PluralFormat *)((char *)this + 328), (const icu::Locale *)&v13, v9);
  }
  *((void *)this + 88) = result;
  return result;
}

void icu::PluralFormat::~PluralFormat(icu::PluralFormat *this)
{
  *(void *)this = &unk_1EDA510A8;
  uint64_t v2 = *((void *)this + 85);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 87) = &unk_1EDA51100;
  uint64_t v3 = *((void *)this + 88);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::MessagePattern::~MessagePattern((icu::PluralFormat *)((char *)this + 552));
  icu::Locale::~Locale((icu::PluralFormat *)((char *)this + 328));

  icu::Format::~Format(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::PluralFormat::~PluralFormat(this);

  icu::UMemory::operator delete(v1);
}

void icu::PluralFormat::PluralSelectorAdapter::~PluralSelectorAdapter(icu::PluralFormat::PluralSelectorAdapter *this)
{
  *(void *)this = &unk_1EDA51100;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_1EDA51100;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDA51100;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::UMemory::operator delete(this);
}

icu::UnicodeString *icu::PluralFormat::format(icu::PluralFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return a3;
  }
  if (!icu::Formattable::isNumeric(a2))
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return a3;
  }
  v11.n128_u64[0] = *((void *)a2 + 1);

  return icu::PluralFormat::format(this, a2, v11, a3, a4, a5);
}

icu::UnicodeString *icu::PluralFormat::format(icu::PluralFormat *this, const icu::Formattable *a2, __n128 a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 > 0) {
    return a4;
  }
  if (*((_DWORD *)this + 162))
  {
    double v10 = a3.n128_f64[0];
    double v11 = a3.n128_f64[0] - *((double *)this + 86);
    uint64_t v42 = 0;
    memset(v41, 0, sizeof(v41));
    memset(v40, 0, sizeof(v40));
    sub_18C9140A8((uint64_t)v40);
    if (*((double *)this + 86) == 0.0) {
      icu::Formattable::populateDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)v41, a6);
    }
    else {
      icu::number::impl::DecimalQuantity::setToDouble((void **)v41, v11);
    }
    long long v36 = 0u;
    uint64_t v39 = 0;
    long long v38 = 0u;
    long long v37 = 0u;
    long long v35 = &unk_1EDA47700;
    LOWORD(v36) = 2;
    double v14 = (icu::Format *)*((void *)this + 85);
    if (v14
    {
      int v16 = (icu::number::LocalizedNumberFormatter *)icu::DecimalFormat::toNumberFormatter(v15, a6);
      uint64_t v17 = (void *)*(unsigned int *)a6;
      if ((int)v17 > 0
        || (icu::number::LocalizedNumberFormatter::formatImpl(v16, (icu::number::impl::UFormattedNumberData *)v40, a6),
            uint64_t v17 = (void *)*(unsigned int *)a6,
            (int)v17 > 0))
      {
LABEL_32:
        icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v35);
        icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v40);
        return a4;
      }
      icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v40 + 8), (uint64_t)v34);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v35, (icu::UnicodeString *)v34);
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v34);
    }
    else if (*((double *)this + 86) == 0.0)
    {
      icu::Format::format(v14, a2, (icu::UnicodeString *)&v35, a6);
    }
    else
    {
      icu::Formattable::Formattable((icu::Formattable *)v34, v11);
      icu::Format::format(v14, (const icu::Formattable *)v34, (icu::UnicodeString *)&v35, a6);
      icu::Formattable::~Formattable((icu::Formattable *)v34);
    }
    int SubMessage = icu::PluralFormat::findSubMessage((icu::PluralFormat *)((char *)this + 552), 0, (uint64_t)this + 696, (const icu::PluralFormat::PluralSelector *)v41, (int *)a6, v10, v19);
    uint64_t v17 = (void *)*(unsigned int *)a6;
    if ((int)v17 <= 0)
    {
      LODWORD(v21) = SubMessage;
      uint64_t v22 = *((void *)this + 80);
      int v23 = *(_DWORD *)(v22 + 16 * SubMessage + 4) + *(unsigned __int16 *)(v22 + 16 * SubMessage + 8);
      while (1)
      {
        uint64_t v21 = (int)v21 + 1;
        uint64_t v24 = v22 + 16 * v21;
        unsigned int v27 = *(_DWORD *)(v24 + 4);
        uint64_t v26 = (_DWORD *)(v24 + 4);
        uint64_t v25 = (const icu::UnicodeString *)v27;
        switch(*(_DWORD *)(v22 + 16 * v21))
        {
          case 1:
            a4 = (icu::UnicodeString *)icu::UnicodeString::doAppend((uint64_t)a4, (icu::PluralFormat *)((char *)this + 568), v23, (v25 - v23));
            goto LABEL_32;
          case 2:
            if (*((_DWORD *)this + 140) != 1) {
              goto LABEL_30;
            }
            uint64_t v28 = (v25 - v23);
            uint64_t v29 = a4;
            long long v30 = (icu::PluralFormat *)((char *)this + 568);
            int v31 = v23;
            goto LABEL_26;
          case 4:
            icu::UnicodeString::doAppend((uint64_t)a4, (icu::PluralFormat *)((char *)this + 568), v23, (v25 - v23));
            if ((v36 & 0x8000u) == 0) {
              uint64_t v28 = (unsigned __int16)v36 >> 5;
            }
            else {
              uint64_t v28 = DWORD1(v36);
            }
            long long v30 = (const icu::UnicodeString *)&v35;
            uint64_t v29 = a4;
            int v31 = 0;
LABEL_26:
            icu::UnicodeString::doAppend((uint64_t)v29, v30, v31, v28);
            int v23 = *v26 + *(unsigned __int16 *)(v22 + 16 * v21 + 8);
            goto LABEL_30;
          case 5:
            icu::UnicodeString::doAppend((uint64_t)a4, (icu::PluralFormat *)((char *)this + 568), v23, (v25 - v23));
            uint64_t v33 = *((void *)this + 80);
            if (*(_DWORD *)(v33 + 16 * v21 + 12) > (int)v21) {
              LODWORD(v21) = *(_DWORD *)(v33 + 16 * v21 + 12);
            }
            int v23 = *(_DWORD *)(v33 + 16 * (int)v21 + 4) + *(unsigned __int16 *)(v33 + 16 * (int)v21 + 8);
            icu::MessageImpl::appendReducedApostrophes((icu::PluralFormat *)((char *)this + 568), v25, v23, (uint64_t)a4, v32);
            goto LABEL_30;
          default:
LABEL_30:
            uint64_t v22 = *((void *)this + 80);
            break;
        }
      }
    }
    goto LABEL_32;
  }
  uint64_t v12 = *(uint64_t (**)(__n128))(**((void **)this + 85) + 40);

  return (icu::UnicodeString *)v12(a3);
}

void icu::PluralFormat::format(icu::PluralFormat *this@<X0>, UErrorCode *a2@<X2>, int a3@<W1>, icu::UnicodeString *a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  _OWORD v11[2] = 0;
  v11[0] = &unk_1EDA4C7F0;
  v11[1] = 0xFFFFFFFFLL;
  long long v14 = 0u;
  uint64_t v17 = 0;
  long long v16 = 0u;
  long long v15 = 0u;
  int v13 = &unk_1EDA47700;
  LOWORD(v14) = 2;
  icu::Formattable::Formattable((icu::Formattable *)v12, a3);
  v8.n128_f64[0] = (double)a3;
  uint64_t v9 = (UChar **)icu::PluralFormat::format(this, (const icu::Formattable *)v12, v8, (icu::UnicodeString *)&v13, (icu::FieldPosition *)v11, a2);
  icu::UnicodeString::UnicodeString(a4, v9);
  icu::Formattable::~Formattable((icu::Formattable *)v12);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v13);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v11);
}

void icu::PluralFormat::format(icu::PluralFormat *this@<X0>, double a2@<D0>, UErrorCode *a3@<X1>, icu::UnicodeString *a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  _OWORD v11[2] = 0;
  v11[0] = &unk_1EDA4C7F0;
  v11[1] = 0xFFFFFFFFLL;
  long long v14 = 0u;
  uint64_t v17 = 0;
  long long v16 = 0u;
  long long v15 = 0u;
  int v13 = &unk_1EDA47700;
  LOWORD(v14) = 2;
  icu::Formattable::Formattable((icu::Formattable *)v12, a2);
  v8.n128_f64[0] = a2;
  uint64_t v9 = (UChar **)icu::PluralFormat::format(this, (const icu::Formattable *)v12, v8, (icu::UnicodeString *)&v13, (icu::FieldPosition *)v11, a3);
  icu::UnicodeString::UnicodeString(a4, v9);
  icu::Formattable::~Formattable((icu::Formattable *)v12);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v13);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v11);
}

icu::UnicodeString *icu::PluralFormat::format(icu::PluralFormat *this, int a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  icu::Formattable::Formattable((icu::Formattable *)v13, a2);
  v10.n128_f64[0] = (double)a2;
  double v11 = icu::PluralFormat::format(this, (const icu::Formattable *)v13, v10, a3, a4, a5);
  icu::Formattable::~Formattable((icu::Formattable *)v13);
  return v11;
}

icu::UnicodeString *icu::PluralFormat::format(icu::PluralFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  icu::Formattable::Formattable((icu::Formattable *)v13, a2);
  v10.n128_f64[0] = a2;
  double v11 = icu::PluralFormat::format(this, (const icu::Formattable *)v13, v10, a3, a4, a5);
  icu::Formattable::~Formattable((icu::Formattable *)v13);
  return v11;
}

uint64_t icu::PluralFormat::findSubMessage(icu::PluralFormat *this, const icu::MessagePattern *a2, uint64_t a3, const icu::PluralFormat::PluralSelector *a4, int *a5, double a6, UErrorCode *a7)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*a5 <= 0)
  {
    int v12 = (int)a2;
    int v14 = *((_DWORD *)this + 24);
    long long v15 = (_DWORD *)(*((void *)this + 11) + 16 * (int)a2);
    double NumericValue = 0.0;
    if ((*v15 & 0xFFFFFFFE) == 0xC)
    {
      double NumericValue = icu::MessagePattern::getNumericValue((uint64_t)this, (uint64_t)v15);
      ++v12;
    }
    long long v44 = 0u;
    uint64_t v47 = 0;
    long long v46 = 0u;
    long long v45 = 0u;
    uint64_t v43 = &unk_1EDA47700;
    LOWORD(v44) = 2;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = L"other";
    icu::UnicodeString::UnicodeString(&v39, 0, &v37);
    BOOL v17 = 0;
    uint64_t v7 = 0;
    double v18 = a6 - NumericValue;
    int v19 = (char *)*((void *)this + 11);
    while (1)
    {
      int v20 = &v19[16 * v12];
      if (*(_DWORD *)v20 == 6)
      {
LABEL_51:
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v39);
        icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v43);
        return v7;
      }
      uint64_t v21 = v12 + 1;
      uint64_t v22 = &v19[16 * v21];
      if ((*(_DWORD *)v22 & 0xFFFFFFFE) == 0xC)
      {
        uint64_t v23 = (v12 + 2);
        if (icu::MessagePattern::getNumericValue((uint64_t)this, (uint64_t)v22) == a6)
        {
          uint64_t v7 = v23;
          goto LABEL_51;
        }
        uint64_t v21 = (int)v23;
      }
      else
      {
        LODWORD(v23) = v12 + 1;
        if (v17) {
          goto LABEL_11;
        }
        if (sub_18C952C24((uint64_t)this, (uint64_t)v20, (uint64_t)&v39))
        {
          if (v7)
          {
            BOOL v17 = 0;
          }
          else
          {
            if (BYTE8(v39))
            {
              int v33 = (v44 & 1) == 0;
            }
            else
            {
              if ((v44 & 0x8000u) == 0) {
                int32_t v30 = (unsigned __int16)v44 >> 5;
              }
              else {
                int32_t v30 = DWORD1(v44);
              }
              if ((SWORD4(v39) & 0x8000u) == 0) {
                int v31 = WORD4(v39) >> 5;
              }
              else {
                int v31 = HIDWORD(v39);
              }
              if ((BYTE8(v39) & 2) != 0) {
                unint64_t v32 = (unint64_t)&v39 | 0xA;
              }
              else {
                unint64_t v32 = *((void *)&v40 + 1);
              }
              int v33 = icu::UnicodeString::doCompare((uint64_t)&v43, 0, v30, v32, v31 & (v31 >> 31), v31 & ~(v31 >> 31));
            }
            BOOL v17 = v33 == 0;
            uint64_t v7 = v21;
          }
          goto LABEL_12;
        }
        if ((unsigned __int16)v44 <= 0x1Fu
          && ((*(void (**)(void *__return_ptr, uint64_t, const icu::PluralFormat::PluralSelector *, int *, double))(*(void *)a3 + 16))(v38, a3, a4, a5, v18), icu::UnicodeString::operator=((icu::UnicodeString *)&v43, (icu::UnicodeString *)v38), icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v38), v7)&& ((BYTE8(v39) & 1) != 0? (v29 = (v44 & 1) == 0): ((v44 & 0x8000u) == 0 ? (v26 = (unsigned __int16)v44 >> 5) : (v26 = DWORD1(v44)), (SWORD4(v39) & 0x8000u) == 0 ? (int v27 = WORD4(v39) >> 5) : (int v27 = HIDWORD(v39)), (BYTE8(v39) & 2) != 0 ? (v28 = (unint64_t)&v39 | 0xA) : (v28 = *((void *)&v40 + 1)), v29 = icu::UnicodeString::doCompare((uint64_t)&v43, 0, v26, v28, v27 & (v27 >> 31),
                       v27 & ~(v27 >> 31))),
              !v29))
        {
LABEL_11:
          BOOL v17 = 1;
        }
        else
        {
          BOOL v34 = sub_18C952C24((uint64_t)this, (uint64_t)v20, (uint64_t)&v43);
          BOOL v17 = v34;
          if (v34) {
            uint64_t v7 = v21;
          }
          else {
            uint64_t v7 = v7;
          }
        }
      }
LABEL_12:
      int v19 = (char *)*((void *)this + 11);
      int v24 = *(_DWORD *)&v19[16 * v21 + 12];
      if (v24 <= (int)v23) {
        int v24 = v23;
      }
      int v12 = v24 + 1;
      if (v24 + 1 >= v14) {
        goto LABEL_51;
      }
    }
  }
  return 0;
}

icu::UnicodeString *icu::PluralFormat::toPattern(icu::PluralFormat *this, icu::UnicodeString *a2)
{
  if (*((_DWORD *)this + 162))
  {
    unsigned int v3 = *((unsigned __int16 *)this + 288);
    int v4 = (__int16)v3;
    unsigned int v5 = v3 >> 5;
    if (v4 >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *((unsigned int *)this + 145);
    }
    icu::UnicodeString::doAppend((uint64_t)a2, (icu::PluralFormat *)((char *)this + 568), 0, v6);
  }
  else
  {
    icu::UnicodeString::setToBogus(a2);
  }
  return a2;
}

void *icu::PluralFormat::setLocale(void *this, const icu::Locale *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v4 = this;
    icu::Locale::operator=((icu::Locale *)(this + 41), (uint64_t)a2);
    icu::MessagePattern::clear((uint64_t)(v4 + 69));
    uint64_t v5 = v4[85];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    v4[85] = 0;
    v4[86] = 0;
    uint64_t v6 = v4[88];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    v4[88] = 0;
    return icu::PluralFormat::init(v4, 0, 0, (icu::UnifiedCache *)a3);
  }
  return this;
}

uint64_t icu::PluralFormat::PluralSelectorAdapter::reset(icu::PluralFormat::PluralSelectorAdapter *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 1) = 0;
  return result;
}

uint64_t icu::PluralFormat::setNumberFormat(uint64_t this, const icu::NumberFormat *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    this = (*(uint64_t (**)(const icu::NumberFormat *))(*(void *)a2 + 32))(a2);
    if (this)
    {
      uint64_t v5 = this;
      this = *(void *)(v4 + 680);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      *(void *)(v4 + 680) = v5;
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

icu::PluralFormat *icu::PluralFormat::clone@<X0>(icu::PluralFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::PluralFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x2C8, a2);
  if (result) {
    return icu::PluralFormat::PluralFormat(result, this);
  }
  return result;
}

const icu::PluralFormat *icu::PluralFormat::operator=(const icu::PluralFormat *a1, const icu::PluralFormat *a2)
{
  if (a1 != a2)
  {
    icu::Locale::operator=((const icu::PluralFormat *)((char *)a1 + 328), (uint64_t)a2 + 328);
    icu::MessagePattern::operator=((uint64_t)a1 + 552, (uint64_t)a2 + 552);
    *((void *)a1 + 86) = *((void *)a2 + 86);
    icu::PluralFormat::copyObjects(a1, a2, v4);
  }
  return a1;
}

uint64_t icu::PluralFormat::operator==(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = icu::Format::operator==(a1, a2);
  if (result)
  {
    uint64_t result = icu::Locale::operator==((uint64_t)(a1 + 41), (uint64_t)(a2 + 41));
    if (result)
    {
      uint64_t result = icu::MessagePattern::operator==((uint64_t)(a1 + 69), (uint64_t)(a2 + 69));
      if (result)
      {
        uint64_t v5 = a1[85];
        if ((v5 == 0) == (a2[85] != 0))
        {
          return 0;
        }
        else if (!v5 || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5), result))
        {
          uint64_t v6 = a1[88];
          uint64_t v7 = a2[88];
          uint64_t result = (v6 == 0) == (v7 == 0);
          if (v6)
          {
            if (v7)
            {
              __n128 v8 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 24);
              uint64_t v9 = a1[88];
              return v8(v9);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t icu::PluralFormat::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) ^ 1;
}

void icu::PluralFormat::parseObject(icu::PluralFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  *((_DWORD *)a4 + 3) = *((_DWORD *)a4 + 2);
}

double icu::PluralFormat::parseType(uint64_t a1, uint64_t a2, uint64_t a3, icu::Formattable *a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v6 = *(_DWORD *)(a1 + 648);
  if (!v6)
  {
    double result = NAN;
    *(void *)(a5 + 12) = -1;
    return result;
  }
  uint64_t v7 = (_DWORD *)*(unsigned int *)(a5 + 12);
  long long v55 = 0u;
  uint64_t v58 = 0;
  long long v57 = 0u;
  long long v56 = 0u;
  int v54 = (UChar *)&unk_1EDA47700;
  LOWORD(v55) = 2;
  long long v50 = 0u;
  uint64_t v53 = 0;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v49 = (UChar *)&unk_1EDA47700;
  LOWORD(v50) = 2;
  if (v6 < 1)
  {
LABEL_70:
    *(void *)(a5 + 12) = -1;
    goto LABEL_71;
  }
  int v10 = 0;
  uint64_t v11 = v7 & ~((int)v7 >> 31);
  long long v42 = (icu::UnicodeString *)(a1 + 568);
  int v41 = -1;
  do
  {
    uint64_t v12 = v10 + 1;
    uint64_t v7 = *(_DWORD **)(a1 + 640);
    if (v7[4 * v10] != 11)
    {
      ++v10;
      continue;
    }
    uint64_t v13 = v10 + 2;
    if (v7[4 * v12])
    {
      v10 += 2;
      continue;
    }
    v10 += 3;
    if (v7[4 * v13] == 1)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      int v14 = (char *)&v7[4 * v12];
      int v16 = *((_DWORD *)v14 + 1);
      long long v15 = v14 + 4;
      int v17 = v16 + *((unsigned __int16 *)v15 + 2);
      double v18 = (char *)&v7[4 * v13];
      int v20 = *((_DWORD *)v18 + 1);
      int v19 = v18 + 4;
      icu::UnicodeString::tempSubString(v42, v17, v20 - v17, (icu::UnicodeString *)&v45);
      unsigned int v21 = *(unsigned __int16 *)(a2 + 8);
      if (a3)
      {
        if ((v21 & 0x8000) != 0)
        {
          int v22 = *(_DWORD *)(a2 + 12);
          char v23 = BYTE8(v45);
          if ((SWORD4(v45) & 0x8000u) == 0) {
            int32_t v24 = WORD4(v45) >> 5;
          }
          else {
            int32_t v24 = HIDWORD(v45);
          }
          if (v22 >= (int)v11) {
            int v25 = v11;
          }
          else {
            int v25 = *(_DWORD *)(a2 + 12);
          }
          if (BYTE8(v45)) {
            goto LABEL_42;
          }
        }
        else
        {
          int v22 = v21 >> 5;
          char v23 = BYTE8(v45);
          if ((SWORD4(v45) & 0x8000u) == 0) {
            int32_t v24 = WORD4(v45) >> 5;
          }
          else {
            int32_t v24 = HIDWORD(v45);
          }
          if (v11 >= v21 >> 5) {
            int v25 = v21 >> 5;
          }
          else {
            int v25 = v11;
          }
          if (BYTE8(v45))
          {
LABEL_42:
            v44[0] = -1;
            int v32 = sub_18C95BD64(a3, a2, (uint64_t)&v45, v11, v44);
LABEL_55:
            int v31 = v32;
            goto LABEL_56;
          }
        }
        if (v24 >= 1)
        {
          int32_t v30 = (v23 & 2) != 0 ? (long long *)((char *)&v45 + 10) : (long long *)*((void *)&v46 + 1);
          int v31 = icu::UnicodeString::indexOf(a2, (uint64_t)v30, 0, v24, v25, v22 - v25);
          if ((v31 & 0x80000000) == 0)
          {
LABEL_56:
            if ((v31 & 0x80000000) == 0)
            {
              unint64_t v26 = v41;
              if (v31 >= v41)
              {
                LODWORD(v26) = WORD4(v45) >> 5;
                if ((SWORD4(v45) & 0x8000u) == 0) {
                  unint64_t v26 = v26;
                }
                else {
                  unint64_t v26 = HIDWORD(v45);
                }
                int v34 = (unsigned __int16)v50 >> 5;
                if ((v50 & 0x8000u) != 0) {
                  int v34 = DWORD1(v50);
                }
                if ((int)v26 > v34)
                {
                  icu::UnicodeString::operator=(&v49, (UChar **)&v45);
                  int v35 = *(_DWORD *)v15 + *((unsigned __int16 *)v15 + 2);
                  icu::UnicodeString::tempSubString(v42, v35, *v19 - v35, (icu::UnicodeString *)v44);
                  icu::UnicodeString::operator=((icu::UnicodeString *)&v54, (icu::UnicodeString *)v44);
                  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v44);
                  int v41 = v31;
                }
              }
            }
            goto LABEL_65;
          }
        }
        goto LABEL_42;
      }
      if ((v21 & 0x8000) != 0)
      {
        unint64_t v26 = *(unsigned int *)(a2 + 12);
        char v27 = BYTE8(v45);
        if ((SWORD4(v45) & 0x8000u) == 0) {
          int32_t v28 = WORD4(v45) >> 5;
        }
        else {
          int32_t v28 = HIDWORD(v45);
        }
        if ((int)v26 >= (int)v11) {
          int v29 = v11;
        }
        else {
          int v29 = *(_DWORD *)(a2 + 12);
        }
        if (BYTE8(v45)) {
          goto LABEL_65;
        }
      }
      else
      {
        unint64_t v26 = v21 >> 5;
        char v27 = BYTE8(v45);
        if ((SWORD4(v45) & 0x8000u) == 0) {
          int32_t v28 = WORD4(v45) >> 5;
        }
        else {
          int32_t v28 = HIDWORD(v45);
        }
        if (v11 >= v21 >> 5) {
          int v29 = v21 >> 5;
        }
        else {
          int v29 = v11;
        }
        if (BYTE8(v45)) {
          goto LABEL_65;
        }
      }
      if (v28 >= 1)
      {
        if ((v27 & 2) != 0) {
          int v33 = (char *)&v45 + 10;
        }
        else {
          int v33 = (char *)*((void *)&v46 + 1);
        }
        int v32 = icu::UnicodeString::indexOf(a2, (uint64_t)v33, 0, v28, v29, (int)v26 - v29);
        goto LABEL_55;
      }
LABEL_65:
      icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)&v45);
    }
  }
  while (v10 < v6);
  if (v41 < 0) {
    goto LABEL_70;
  }
  int v37 = (unsigned __int16)v50 >> 5;
  if ((v50 & 0x8000u) != 0) {
    int v37 = DWORD1(v50);
  }
  *(_DWORD *)(a5 + 12) = v41;
  *(_DWORD *)(a5 + 16) = v37 + v41;
  icu::Formattable::setString(a4, &v54);
LABEL_71:
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v49);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v54);
  return result;
}

icu::UnicodeString *icu::PluralFormat::PluralSelectorAdapter::select@<X0>(icu::PluralRules **this@<X0>, const icu::IFixedDecimal *a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  return icu::PluralRules::select(this[1], a2, a3);
}

void *icu::PluralRules::getStaticClassID(icu::PluralRules *this)
{
  return &unk_1E9192539;
}

void *icu::PluralRules::getDynamicClassID(icu::PluralRules *this)
{
  return &unk_1E9192539;
}

void *sub_18C99C890()
{
  return &unk_1E919253A;
}

uint64_t icu::PluralRules::PluralRules(uint64_t this, UErrorCode *a2)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDA51198;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDA51198;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t icu::PluralRules::PluralRules(uint64_t this, unint64_t a2)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDA51198;
  *(_DWORD *)(this + 24) = 0;
  return icu::PluralRules::operator=(this, a2);
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDA51198;
  *(_DWORD *)(this + 24) = 0;
  return icu::PluralRules::operator=(this, a2);
}

uint64_t icu::PluralRules::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *(void *)(a1 + 8) = 0;
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5)
    {
      if (*(unsigned char *)(v5 + 12)) {
        uprv_free(*(void **)v5);
      }
      icu::UMemory::operator delete((void *)v5);
    }
    int v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 24) = v6;
    *(void *)(a1 + 16) = 0;
    if (v6 <= 0)
    {
      __n128 v8 = *(uint64_t **)(a2 + 8);
      if (v8)
      {
        uint64_t v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0xE0, a2);
        if (v9)
        {
          uint64_t v10 = sub_18C9A0AB8((uint64_t)v9, *(void *)(a2 + 8));
          *(void *)(a1 + 8) = v10;
          int v11 = *(_DWORD *)(v10 + 220);
          if (v11 < 1) {
            goto LABEL_16;
          }
        }
        else
        {
          *(void *)(a1 + 8) = 0;
          int v11 = 7;
        }
        *(_DWORD *)(a1 + 24) = v11;
      }
LABEL_16:
      uint64_t v12 = *(void *)(a2 + 16);
      if (v12)
      {
        sub_18C99A228(v12, (_DWORD *)(a1 + 24), (uint64_t)&v14);
        sub_18C99A2F0((uint64_t)&v14, (int *)(a1 + 24), &v16);
        uint64_t v13 = v16;
        uint64_t v16 = 0;
        *(void *)(a1 + 16) = v13;
        sub_18C80C034(&v16);
        if (v15) {
          uprv_free(v14);
        }
      }
    }
  }
  return a1;
}

void icu::PluralRules::~PluralRules(icu::PluralRules *this)
{
  *(void *)this = &unk_1EDA51198;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 12)) {
      uprv_free(*(void **)v3);
    }
    icu::UMemory::operator delete((void *)v3);
  }

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::PluralRules::~PluralRules(this);

  icu::UMemory::operator delete(v1);
}

void icu::SharedPluralRules::~SharedPluralRules(icu::SharedPluralRules *this)
{
  *(void *)this = &unk_1EDA511C8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::SharedObject::~SharedObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::SharedPluralRules::~SharedPluralRules(this);

  icu::UMemory::operator delete(v1);
}

_DWORD *icu::PluralRules::clone@<X0>(icu::PluralRules *this@<X0>, uint64_t *a2@<X8>)
{
  UErrorCode v3 = U_ZERO_ERROR;
  return icu::PluralRules::clone(this, &v3, a2);
}

_DWORD *icu::PluralRules::clone@<X0>(icu::PluralRules *this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = icu::UMemory::operator new(a3, (icu::UMemory *)0x20, (unint64_t)a2);
  if (v5)
  {
    v5[1] = 0;
    v5[2] = 0;
    uint64_t *v5 = (uint64_t)&unk_1EDA51198;
    *((_DWORD *)v5 + 6) = 0;
    double result = (_DWORD *)icu::PluralRules::operator=((uint64_t)v5, (unint64_t)this);
    if (*(int *)a2 <= 0)
    {
      UErrorCode v7 = result[6];
      if (v7 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        *a2 = v7;
        (*(void (**)(_DWORD *))(*(void *)result + 8))(result);
        return 0;
      }
    }
  }
  else
  {
    if (*(int *)a2 > 0) {
      return 0;
    }
    double result = 0;
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

icu::PluralAvailableLocalesEnumeration *icu::PluralRules::getAvailableLocales(UErrorCode *this, UErrorCode *a2)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)this;
  if ((int)v2 > 0) {
    return 0;
  }
  uint64_t v5 = (icu::PluralAvailableLocalesEnumeration *)icu::UMemory::operator new(v2, (icu::UMemory *)0x88, (unint64_t)a2);
  if (!v5)
  {
    if (*(int *)this <= 0)
    {
      double result = 0;
      *this = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
    return 0;
  }
  double result = icu::PluralAvailableLocalesEnumeration::PluralAvailableLocalesEnumeration(v5, this);
  if (*(int *)this >= 1)
  {
    (*(void (**)(icu::PluralAvailableLocalesEnumeration *))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t *icu::PluralRules::createRules(icu::PluralRules *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 <= 0)
  {
    v11[1] = 2;
    long long v14 = 0u;
    long long v13 = 0u;
    long long v12 = 0u;
    long long v10 = 0u;
    uint64_t v9 = &unk_1EDA51250;
    v11[0] = &unk_1EDA47700;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v15 = 0;
    uint64_t v18 = -1;
    int v6 = icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0x20, (unint64_t)a2);
    if (v6)
    {
      UErrorCode v3 = v6;
      v6[1] = 0;
      v6[2] = 0;
      uint64_t *v6 = (uint64_t)&unk_1EDA51198;
      *((_DWORD *)v6 + 6) = 0;
      if (*(int *)a2 <= 0)
      {
        sub_18C99CF08((uint64_t)&v9, (uint64_t)this, (uint64_t)v6, (int *)a2);
        uint64_t v7 = *(unsigned int *)a2;
        if ((int)v7 < 1) {
          goto LABEL_9;
        }
      }
      (*(void (**)(uint64_t *))(*v3 + 8))(v3);
    }
    else
    {
      uint64_t v7 = *(unsigned int *)a2;
      if ((int)v7 <= 0)
      {
        UErrorCode v3 = 0;
        uint64_t v7 = 7;
        *(_DWORD *)a2 = 7;
        goto LABEL_9;
      }
    }
    UErrorCode v3 = 0;
LABEL_9:
    uint64_t v9 = &unk_1EDA51250;
    icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v11);
    return v3;
  }
  return 0;
}

void sub_18C99CF08(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 > 0) {
    return;
  }
  *(void *)(a1 + 8) = a2;
  int v6 = (UChar **)(a1 + 24);
  uint64_t v7 = (uint64_t *)(a3 + 8);
  while (2)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    if (*(__int16 *)(v8 + 8) < 0) {
      int v9 = *(_DWORD *)(v8 + 12);
    }
    else {
      int v9 = *(unsigned __int16 *)(v8 + 8) >> 5;
    }
    if (*(_DWORD *)(a1 + 16) >= v9) {
      return;
    }
    sub_18C99F4A8((int *)a1, a4);
    if (*a4 > 0) {
      return;
    }
    sub_18C99F838(a1, a4);
    uint64_t v11 = *a4;
    if ((int)v11 > 0) {
      return;
    }
    int v12 = *(_DWORD *)(a1 + 88);
    switch(v12)
    {
      case 1:
        uint64_t v13 = *(void *)(a1 + 96);
        if (*(_DWORD *)(v13 + 8) == 1 && *(_DWORD *)(v13 + 12) == -1)
        {
          *(_DWORD *)(*(void *)(a1 + 96) + 12) = sub_18C99FB5C((uint64_t)v6);
          goto LABEL_119;
        }
        uint64_t v14 = *(void *)(v13 + 24);
        if (!v14)
        {
          *(_DWORD *)(*(void *)(a1 + 96) + 16) = sub_18C99FB5C((uint64_t)v6);
          goto LABEL_119;
        }
        uint64_t v15 = *(unsigned int *)(a1 + 112);
        if ((v15 & 0x80000000) == 0)
        {
          int v16 = *(_DWORD *)(v14 + 8);
          BOOL v17 = v16 < 1 || v16 <= (int)v15;
          if (!v17 && *(_DWORD *)(*(void *)(v14 + 24) + 4 * v15) == -1)
          {
            int v64 = sub_18C99FB5C((uint64_t)v6);
            icu::UVector32::setElementAt(v14, v64, *(_DWORD *)(a1 + 112));
            uint64_t v65 = *(void *)(*(void *)(a1 + 96) + 24);
            int v66 = sub_18C99FB5C((uint64_t)v6);
            icu::UVector32::setElementAt(v65, v66, *(_DWORD *)(a1 + 116));
            goto LABEL_119;
          }
        }
        int v18 = sub_18C99FB5C((uint64_t)v6);
        icu::UVector32::setElementAt(v14, v18, *(_DWORD *)(a1 + 116));
        uint64_t v19 = *(void *)(*(void *)(a1 + 96) + 24);
        uint64_t v20 = *(unsigned int *)(a1 + 112);
        if ((v20 & 0x80000000) != 0
          || ((int v21 = *(_DWORD *)(v19 + 8), v21 >= 1) ? (v22 = v21 <= (int)v20) : (v22 = 1), v22))
        {
          int v60 = 0;
        }
        else
        {
          int v60 = *(_DWORD *)(*(void *)(v19 + 24) + 4 * v20);
        }
        uint64_t v61 = *(unsigned int *)(a1 + 116);
        if ((v61 & 0x80000000) != 0)
        {
          int v62 = 0;
        }
        else
        {
          int v62 = 0;
          int v63 = *(_DWORD *)(v19 + 8);
          if (v63 >= 1 && v63 > (int)v61) {
            int v62 = *(_DWORD *)(*(void *)(v19 + 24) + 4 * v61);
          }
        }
        if (v60 > v62) {
          goto LABEL_123;
        }
        goto LABEL_119;
      case 2:
        uint64_t v23 = *(void *)(a1 + 96);
        if (v23)
        {
          uint64_t v24 = *(void *)(v23 + 24);
          if (v24)
          {
            int v25 = *(_DWORD *)(v24 + 8);
            *(_DWORD *)(a1 + 112) = v25;
            if (v25 >= -1 && *(_DWORD *)(v24 + 12) > v25) {
              goto LABEL_34;
            }
            if (icu::UVector32::expandCapacity((icu::UVector32 *)v24, v25 + 1, (UErrorCode *)a4))
            {
              int v25 = *(_DWORD *)(v24 + 8);
LABEL_34:
              *(_DWORD *)(*(void *)(v24 + 24) + 4 * v25) = -1;
              ++*(_DWORD *)(v24 + 8);
            }
            uint64_t v26 = *(void *)(*(void *)(a1 + 96) + 24);
            int v27 = *(_DWORD *)(v26 + 8);
            *(_DWORD *)(a1 + 116) = v27;
            if (v27 < -1 || *(_DWORD *)(v26 + 12) <= v27)
            {
              if (!icu::UVector32::expandCapacity((icu::UVector32 *)v26, v27 + 1, (UErrorCode *)a4)) {
                goto LABEL_119;
              }
              int v27 = *(_DWORD *)(v26 + 8);
            }
            *(_DWORD *)(*(void *)(v26 + 24) + 4 * v27) = -1;
            ++*(_DWORD *)(v26 + 8);
LABEL_119:
            LODWORD(v11) = *a4;
LABEL_120:
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 88);
            if ((int)v11 >= 1) {
              return;
            }
            continue;
          }
        }
LABEL_123:
        int v67 = 65792;
LABEL_126:
        *a4 = v67;
LABEL_127:
        *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 88);
        return;
      case 10:
        int32_t v28 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0xE0, v10);
        if (!v28) {
          goto LABEL_125;
        }
        int v29 = v28;
        *int32_t v28 = (uint64_t)&unk_1EDA51230;
        v28[1] = (uint64_t)&unk_1EDA47700;
        *((_WORD *)v28 + 8) = 2;
        v28[9] = 0;
        v28[10] = 0;
        v28[11] = (uint64_t)&unk_1EDA47700;
        *((_WORD *)v28 + 48) = 2;
        v28[19] = (uint64_t)&unk_1EDA47700;
        *((_WORD *)v28 + 80) = 2;
        *((_WORD *)v28 + 108) = 0;
        *((_DWORD *)v28 + 55) = 0;
        icu::UnicodeString::operator=((UChar **)v28 + 1, v6);
        uint64_t v32 = *v7;
        int v33 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_109;
        }
        while (1)
        {
          uint64_t v31 = *(void *)(v32 + 72);
          int v33 = (uint64_t **)(v32 + 72);
          if (!v31) {
            break;
          }
          if (*(__int16 *)(v31 + 16) < 0) {
            int32_t v34 = *(_DWORD *)(v31 + 20);
          }
          else {
            int32_t v34 = *(unsigned __int16 *)(v31 + 16) >> 5;
          }
          int v35 = icu::UnicodeString::doCompare(v31 + 8, 0, v34, (uint64_t)"o", 0, 5);
          uint64_t v32 = (uint64_t)*v33;
          if (!v35) {
            goto LABEL_108;
          }
        }
        uint64_t v32 = 0;
LABEL_108:
        v29[9] = v32;
LABEL_109:
        *int v33 = v29;
        uint64_t v58 = icu::UMemory::operator new((uint64_t *)v31, (icu::UMemory *)0x20, v30);
        if (!v58) {
          goto LABEL_125;
        }
        int v58[2] = 0;
        v58[3] = 0;
        uint64_t *v58 = (uint64_t)&unk_1EDA51210;
        v58[1] = 0;
        *((_DWORD *)v58 + 6) = 0;
        v29[10] = (uint64_t)v58;
        sub_18C99FAB8((uint64_t)v58, a4);
        *(void *)(a1 + 96) = v59;
        *(void *)(a1 + 104) = v29;
        goto LABEL_119;
      case 11:
        sub_18C99FA1C(*(void *)(a1 + 96), a4);
        goto LABEL_53;
      case 12:
        uint64_t v37 = *(void *)(*(void *)(a1 + 104) + 80);
        do
        {
          uint64_t v38 = v37;
          uint64_t v37 = *(void *)(v37 + 16);
        }
        while (v37);
        long long v39 = icu::UMemory::operator new(0, (icu::UMemory *)0x20, v10);
        if (!v39)
        {
          *(void *)(v38 + 16) = 0;
LABEL_125:
          int v67 = 7;
          goto LABEL_126;
        }
        v39[2] = 0;
        v39[3] = 0;
        *long long v39 = (uint64_t)&unk_1EDA51210;
        v39[1] = 0;
        *((_DWORD *)v39 + 6) = 0;
        *(void *)(v38 + 16) = v39;
        v39[2] = 0;
        sub_18C99FAB8((uint64_t)v39, a4);
LABEL_53:
        *(void *)(a1 + 96) = v36;
        goto LABEL_119;
      case 13:
        *(_DWORD *)(*(void *)(a1 + 96) + 8) = 1;
        goto LABEL_119;
      case 14:
        *(unsigned char *)(*(void *)(a1 + 96) + 32) = 1;
        goto LABEL_119;
      case 15:
      case 16:
      case 19:
        goto LABEL_57;
      case 17:
        uint64_t v11 = *(void *)(a1 + 96);
        *(unsigned char *)(v11 + 32) = 1;
LABEL_57:
        long long v40 = (icu::UVector32 *)icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x20, v10);
        if (v40)
        {
          int v41 = v40;
          icu::UVector32::UVector32(v40, (UErrorCode *)a4);
          if (*a4 > 0)
          {
            (*(void (**)(icu::UVector32 *))(*(void *)v41 + 8))(v41);
            goto LABEL_119;
          }
          *(void *)(*(void *)(a1 + 96) + 24) = v41;
          int v54 = *((_DWORD *)v41 + 2);
          if (v54 >= -1 && *((_DWORD *)v41 + 3) > v54)
          {
LABEL_100:
            *(_DWORD *)(*((void *)v41 + 3) + 4 * v54) = -1;
            ++*((_DWORD *)v41 + 2);
          }
          else if (icu::UVector32::expandCapacity(v41, v54 + 1, (UErrorCode *)a4))
          {
            int v54 = *((_DWORD *)v41 + 2);
            goto LABEL_100;
          }
          uint64_t v55 = *(void *)(*(void *)(a1 + 96) + 24);
          int v56 = *(_DWORD *)(v55 + 8);
          if (v56 >= -1 && *(_DWORD *)(v55 + 12) > v56)
          {
LABEL_105:
            *(_DWORD *)(*(void *)(v55 + 24) + 4 * v56) = -1;
            ++*(_DWORD *)(v55 + 8);
          }
          else if (icu::UVector32::expandCapacity(*(icu::UVector32 **)(*(void *)(a1 + 96) + 24), v56 + 1, (UErrorCode *)a4))
          {
            int v56 = *(_DWORD *)(v55 + 8);
            goto LABEL_105;
          }
          *(void *)(a1 + 112) = 0x100000000;
          uint64_t v57 = *(void *)(a1 + 96);
          *(_DWORD *)(v57 + 16) = 0x7FFFFFFF;
          *(unsigned char *)(v57 + 33) = *(_DWORD *)(a1 + 88) != 19;
          goto LABEL_119;
        }
        if (*a4 <= 0) {
          *a4 = 7;
        }
        goto LABEL_119;
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
        *(_DWORD *)(*(void *)(a1 + 96) + 36) = v12;
        goto LABEL_119;
      case 28:
        sub_18C99F4A8((int *)a1, a4);
        if (*a4 > 0) {
          goto LABEL_127;
        }
        while (2)
        {
          int v42 = *(_DWORD *)(a1 + 88);
          if (v42 > 8)
          {
            if (v42 == 9)
            {
              *(unsigned char *)(*(void *)(a1 + 104) + 216) = 1;
            }
            else
            {
              if (v42 == 30) {
                goto LABEL_119;
              }
LABEL_73:
              unsigned int v44 = *(unsigned __int16 *)(a1 + 32);
              int v45 = (__int16)v44;
              unsigned int v46 = v44 >> 5;
              if (v45 >= 0) {
                uint64_t v47 = v46;
              }
              else {
                uint64_t v47 = *(unsigned int *)(a1 + 36);
              }
              icu::UnicodeString::doAppend(*(void *)(a1 + 104) + 88, (const icu::UnicodeString *)v6, 0, v47);
            }
            sub_18C99F4A8((int *)a1, a4);
            if (*a4 >= 1) {
              goto LABEL_127;
            }
            continue;
          }
          break;
        }
        if (v42 != 3 && v42 != 6) {
          goto LABEL_73;
        }
        goto LABEL_119;
      case 29:
        sub_18C99F4A8((int *)a1, a4);
        if (*a4 > 0) {
          goto LABEL_127;
        }
        while (2)
        {
          int v48 = *(_DWORD *)(a1 + 88);
          if (v48 > 8)
          {
            if (v48 == 9)
            {
              *(unsigned char *)(*(void *)(a1 + 104) + 217) = 1;
            }
            else
            {
              if (v48 == 30) {
                goto LABEL_119;
              }
LABEL_90:
              unsigned int v50 = *(unsigned __int16 *)(a1 + 32);
              int v51 = (__int16)v50;
              unsigned int v52 = v50 >> 5;
              if (v51 >= 0) {
                uint64_t v53 = v52;
              }
              else {
                uint64_t v53 = *(unsigned int *)(a1 + 36);
              }
              icu::UnicodeString::doAppend(*(void *)(a1 + 104) + 152, (const icu::UnicodeString *)v6, 0, v53);
            }
            sub_18C99F4A8((int *)a1, a4);
            if (*a4 >= 1) {
              goto LABEL_127;
            }
            continue;
          }
          break;
        }
        if (v48 != 3 && v48 != 6) {
          goto LABEL_90;
        }
        goto LABEL_119;
      default:
        goto LABEL_120;
    }
  }
}

void *sub_18C99D6F4(void *a1)
{
  *a1 = &unk_1EDA51250;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 3));
  return a1;
}

uint64_t *icu::PluralRules::createDefaultRules(icu::PluralRules *this, UErrorCode *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = L"other: n";
  icu::UnicodeString::UnicodeString(v8, 1, &v7);
  Rules = icu::PluralRules::createRules((icu::PluralRules *)v8, this, v3);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v8);
  return Rules;
}

uint64_t *icu::LocaleCacheKey<icu::SharedPluralRules>::createObject(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v11 = (uint64_t *)*MEMORY[0x1E4F143B8];
  icu::Locale::Locale(v11, (icu::Locale *)v10, *(const char **)(a1 + 56), 0, 0, 0);
  uint64_t v4 = icu::PluralRules::internalForLocale((icu::Locale *)v10, 0, a3);
  if (!v4 && *a3 <= 0) {
    *a3 = 7;
  }
  icu::Locale::~Locale((icu::Locale *)v10);
  int v6 = (uint64_t *)*a3;
  if ((int)v6 <= 0)
  {
    uint64_t v9 = icu::UMemory::operator new(v6, (icu::UMemory *)0x20, v5);
    if (v9)
    {
      uint64_t v7 = v9;
      v9[1] = 0;
      void v9[2] = 0;
      *uint64_t v9 = (uint64_t)&unk_1EDA511C8;
      v9[3] = (uint64_t)v4;
      if (*a3 <= 0)
      {
        icu::SharedObject::addRef((uint64_t)v9);
        return v7;
      }
      (*(void (**)(uint64_t *))(*v9 + 8))(v9);
    }
    else if (*a3 <= 0)
    {
      *a3 = 7;
    }
  }
  if (v4) {
    (*(void (**)(uint64_t *))(*v4 + 8))(v4);
  }
  return 0;
}

uint64_t *icu::PluralRules::internalForLocale(icu::Locale *a1, unint64_t a2, int *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  UErrorCode v3 = (uint64_t *)*a3;
  if ((int)v3 > 0) {
    return 0;
  }
  int v6 = a2;
  if ((int)a2 >= 2)
  {
    uint64_t v4 = 0;
    int v7 = 1;
LABEL_5:
    *a3 = v7;
    return v4;
  }
  unint64_t v10 = icu::UMemory::operator new(v3, (icu::UMemory *)0x20, a2);
  if (!v10)
  {
    if (*a3 <= 0)
    {
      uint64_t v4 = 0;
      int v7 = 7;
      goto LABEL_5;
    }
    return 0;
  }
  uint64_t v4 = v10;
  v10[1] = 0;
  v10[2] = 0;
  *unint64_t v10 = (uint64_t)&unk_1EDA51198;
  *((_DWORD *)v10 + 6) = 0;
  if (*a3 > 0)
  {
LABEL_9:
    (*(void (**)(uint64_t *))(*v4 + 8))(v4);
    return 0;
  }
  memset(v30, 0, sizeof(v30));
  icu::PluralRules::getRuleFromResource(a1, v6, a3, (uint64_t)v30);
  int v11 = WORD4(v30[0]) >> 5;
  if (SWORD4(v30[0]) < 0) {
    int v11 = HIDWORD(v30[0]);
  }
  if (!v11)
  {
    unint64_t v12 = *a3;
    if (v12 == 7)
    {
      icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v30);
      goto LABEL_9;
    }
    icu::UnicodeString::UnicodeString((uint64_t)&v20, (uint64_t)L"other: n");
    icu::UnicodeString::operator=((icu::UnicodeString *)v30, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v20);
    *a3 = 0;
  }
  v22[1] = 2;
  long long v23 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  uint64_t v20 = &unk_1EDA51250;
  v22[0] = &unk_1EDA47700;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  uint64_t v29 = -1;
  sub_18C99CF08((uint64_t)&v20, (uint64_t)v30, (uint64_t)v4, a3);
  sub_18C99A058((uint64_t)a1, (UErrorCode *)a3, (uint64_t)&v17);
  sub_18C99A2F0((uint64_t)&v17, a3, &v19);
  uint64_t v14 = v19;
  uint64_t v19 = 0;
  v4[2] = v14;
  sub_18C80C034(&v19);
  unint64_t v15 = v18;
  if (v18) {
    uprv_free(v17);
  }
  uint64_t v20 = &unk_1EDA51250;
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)v22);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v30);
  return v4;
}

uint64_t icu::PluralRules::createSharedInstance(uint64_t a1, int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  if (a2)
  {
    uint64_t result = 0;
    *a3 = U_UNSUPPORTED_ERROR;
  }
  else
  {
    uint64_t v4 = 0;
    sub_18C99DC1C(a1, (UErrorCode *)&v4, a3);
    return v4;
  }
  return result;
}

void sub_18C99DC1C(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  v11[28] = *MEMORY[0x1E4F143B8];
  uint64_t Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    int v7 = (icu::SharedObject **)Instance;
    int v9 = 0;
    char v10 = 0;
    uint64_t v8 = &unk_1EDA514A0;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18C8D86FC(v7, (const icu::CacheKeyBase *)&v8, 0, (icu::SharedObject **)a2, this);
    uint64_t v8 = &unk_1EDA514A0;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }
}

uint64_t *icu::PluralRules::forLocale(icu::PluralRules *this, const icu::Locale *a2, UErrorCode *a3)
{
  return icu::PluralRules::forLocale(this, 0, a2);
}

uint64_t *icu::PluralRules::forLocale(icu::Locale *a1, unint64_t a2, icu::UnifiedCache *this)
{
  if (a2)
  {
    return icu::PluralRules::internalForLocale(a1, a2, (int *)this);
  }
  else
  {
    if (*(int *)this > 0) {
      return 0;
    }
    uint64_t v8 = 0;
    sub_18C99DC1C((uint64_t)a1, (UErrorCode *)&v8, (UErrorCode *)this);
    unint64_t v5 = 0;
    int v6 = (uint64_t *)*(unsigned int *)this;
    if ((int)v6 <= 0)
    {
      uint64_t v7 = v8;
      unint64_t v5 = icu::PluralRules::clone(*(icu::PluralRules **)(v8 + 24), (UErrorCode *)this, v6);
      icu::SharedObject::removeRef(v7);
    }
    return (uint64_t *)v5;
  }
}

void *icu::PluralRules::getRuleFromResource@<X0>(icu::Locale *a1@<X1>, int a2@<W2>, int *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  long long v56 = 0u;
  uint64_t v59 = 0;
  long long v58 = 0u;
  long long v57 = 0u;
  uint64_t v55 = &unk_1EDA47700;
  LOWORD(v56) = 2;
  if (*a3 >= 1)
  {
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
    return icu::UnicodeString::~UnicodeString((void *)v5, (icu::UnicodeString *)&v55);
  }
  uint64_t v9 = ures_openDirect(0, (uint64_t)"plurals", (uint64_t)a3);
  uint64_t v10 = v9;
  if (*a3 >= 1) {
    goto LABEL_4;
  }
  if (!a2)
  {
    unint64_t v12 = "locales";
LABEL_12:
    uint64_t v13 = ures_getByKey(v9, v12, 0, a3);
    if (*a3 >= 1) {
      goto LABEL_13;
    }
    int v34 = 0;
    BaseName = (const char *)icu::Locale::getBaseName(a1);
    StringByuint64_t Key = ures_getStringByKey(v13, BaseName, &v34, a3);
    if (StringByKey) {
      goto LABEL_29;
    }
    v31[0] = U_ZERO_ERROR;
    int v16 = (const char *)icu::Locale::getBaseName(a1);
    memset(&__s[1], 0, 56);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v32, v16);
    __s[0] = (char *)&__s[1] + 5;
    LODWORD(__s[1]) = 40;
    WORD2(__s[1]) = 0;
    LODWORD(__s[7]) = 0;
    icu::CharString::append((icu::CharString *)__s, v32, v33, v31);
    while (1)
    {
      uint64_t v54 = 0;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v51 = 0u;
      unsigned int v50 = (char *)&v51 + 5;
      LODWORD(v51) = 40;
      v36[0] = 0uLL;
      icu::CharStringByteSink::CharStringByteSink(v36, (uint64_t)&v50);
      ulocimp_getParent(__s[0], (uint64_t)v36, (int *)v31);
      int v17 = v54;
      if (v54) {
        icu::CharString::operator=((uint64_t)__s, (uint64_t)&v50);
      }
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v36);
      if (BYTE4(v51)) {
        uprv_free(v50);
      }
      if (!v17)
      {
        StringByuint64_t Key = 0;
        goto LABEL_26;
      }
      int v34 = 0;
      unsigned __int8 v18 = ures_getStringByKey(v13, __s[0], &v34, (int *)v31);
      if (v18) {
        break;
      }
      v31[0] = U_ZERO_ERROR;
    }
    StringByuint64_t Key = v18;
    *a3 = 0;
LABEL_26:
    if (BYTE4(__s[1])) {
      uprv_free(__s[0]);
    }
    if (StringByKey)
    {
LABEL_29:
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      memset(__s, 0, sizeof(__s));
      u_UCharsToChars(StringByKey, (char *)__s, v34 + 1);
      uint64_t v19 = ures_getByKey(v10, "rules", 0, a3);
      uint64_t v20 = v19;
      if (*a3 < 1)
      {
        uint64_t v21 = ures_getByKey(v19, (const char *)__s, 0, a3);
        uint64_t v22 = v21;
        if (*a3 < 1)
        {
          int Size = ures_getSize(v21);
          long long v24 = 0uLL;
          *(_OWORD *)(a4 + 8) = 0u;
          *(_OWORD *)(a4 + 24) = 0u;
          *(_OWORD *)(a4 + 40) = 0u;
          *(void *)(a4 + 56) = 0;
          *(void *)a4 = &unk_1EDA47700;
          uint64_t v5 = 2;
          *(_WORD *)(a4 + 8) = 2;
          *(void *)uint64_t v31 = 0;
          if (Size >= 1)
          {
            int v25 = Size;
            do
            {
              uint64_t v54 = 0;
              long long v52 = v24;
              long long v53 = v24;
              long long v51 = v24;
              unsigned int v50 = &unk_1EDA47700;
              LOWORD(v51) = 2;
              int v35 = 0;
              NextString = ures_getNextString(v22, &v35, v31, (UErrorCode *)a3);
              if (*a3 <= 0)
              {
                *(void *)&v36[0] = NextString;
                icu::UnicodeString::setTo((icu::UnicodeString *)&v50, 1, (const UChar **)v36, v35);
              }
              else
              {
                icu::UnicodeString::setToBogus((icu::UnicodeString *)&v50);
              }
              memset(v36, 0, sizeof(v36));
              icu::UnicodeString::UnicodeString(v36, *(void *)v31, 0xFFFFFFFFLL, 0);
              if ((SWORD4(v36[0]) & 0x8000u) == 0) {
                uint64_t v27 = WORD4(v36[0]) >> 5;
              }
              else {
                uint64_t v27 = HIDWORD(v36[0]);
              }
              icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v36, 0, v27);
              LOWORD(v35) = 58;
              icu::UnicodeString::doAppend(a4, (uint64_t)&v35, 0, 1);
              if ((v51 & 0x8000u) == 0) {
                uint64_t v28 = (unsigned __int16)v51 >> 5;
              }
              else {
                uint64_t v28 = DWORD1(v51);
              }
              icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)&v50, 0, v28);
              LOWORD(v35) = 59;
              icu::UnicodeString::doAppend(a4, (uint64_t)&v35, 0, 1);
              icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v36);
              icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v50);
              long long v24 = 0uLL;
              --v25;
            }
            while (v25);
          }
        }
        else
        {
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
        }
        if (v22) {
          ures_close(v22);
        }
      }
      else
      {
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
      }
      if (v20) {
        ures_close(v20);
      }
    }
    else
    {
LABEL_13:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
    }
    if (v13) {
      ures_close(v13);
    }
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    unint64_t v12 = "locales_ordinals";
    goto LABEL_12;
  }
  *a3 = 1;
LABEL_4:
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
LABEL_5:
  if (v10) {
    ures_close(v10);
  }
  return icu::UnicodeString::~UnicodeString((void *)v5, (icu::UnicodeString *)&v55);
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  uint64_t v5 = &unk_1EDA512D8;
  int v6 = &unk_1EDA51318;
  icu::FixedDecimal::init((icu::FixedDecimal *)&v5, (double)a2);
  icu::PluralRules::select(this, (const icu::IFixedDecimal *)&v5, a3);
  icu::UObject::~UObject((icu::UObject *)&v6);
  icu::IFixedDecimal::~IFixedDecimal((icu::IFixedDecimal *)&v5);
}

icu::UnicodeString *icu::PluralRules::select@<X0>(icu::PluralRules *this@<X0>, const icu::IFixedDecimal *a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    return sub_18C99E640(v3, (uint64_t)a2, a3);
  }
  else
  {
    uint64_t v5 = L"other: n";
    return (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a3, 1, &v5);
  }
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2)
{
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  icu::FixedDecimal::init(this, a2);
  return this;
}

{
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  icu::FixedDecimal::init(this, a2);
  return this;
}

void icu::FixedDecimal::~FixedDecimal(icu::FixedDecimal *this)
{
  icu::UObject::~UObject((icu::FixedDecimal *)((char *)this + 8));

  icu::IFixedDecimal::~IFixedDecimal(this);
}

{
  uint64_t vars8;

  icu::UObject::~UObject((icu::FixedDecimal *)((char *)this + 8));

  icu::IFixedDecimal::~IFixedDecimal(this);
}

{
  void *v2;
  uint64_t vars8;

  icu::UObject::~UObject((icu::FixedDecimal *)((char *)this + 8));
  icu::IFixedDecimal::~IFixedDecimal(this);

  icu::UMemory::operator delete(v2);
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, double a2@<D0>, icu::UnicodeString *a3@<X8>)
{
  uint64_t v5 = &unk_1EDA512D8;
  int v6 = &unk_1EDA51318;
  icu::FixedDecimal::init((icu::FixedDecimal *)&v5, a2);
  icu::PluralRules::select(this, (const icu::IFixedDecimal *)&v5, a3);
  icu::UObject::~UObject((icu::UObject *)&v6);
  icu::IFixedDecimal::~IFixedDecimal((icu::IFixedDecimal *)&v5);
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, const icu::number::FormattedNumber *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v9);
  icu::number::FormattedNumber::getDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)v9, a3);
  if (*(int *)a3 < 1)
  {
    UErrorCode v8 = *((_DWORD *)this + 6);
    if (v8 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      icu::PluralRules::select(this, (const icu::IFixedDecimal *)v9, (icu::UnicodeString *)a4);
      goto LABEL_6;
    }
    *a3 = v8;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(void *)(a4 + 56) = 0;
  }
  else
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)(a4 + 56) = 0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
  }
  *(void *)a4 = &unk_1EDA47700;
  *(_WORD *)(a4 + 8) = 2;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
LABEL_6:
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v9);
}

icu::UnicodeString *sub_18C99E640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2) & 1) != 0
    || !a1)
  {
LABEL_2:
    uint64_t v7 = "o";
    return (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a3, 1, &v7);
  }
  else
  {
    while (!sub_18C9A0A48(*(void *)(a1 + 80), a2))
    {
      a1 = *(void *)(a1 + 72);
      if (!a1) {
        goto LABEL_2;
      }
    }
    return icu::UnicodeString::UnicodeString(a3, (UChar **)(a1 + 8));
  }
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, const icu::number::FormattedNumberRange *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t Data = icu::number::FormattedNumberRange::getData(a2, a3);

  icu::PluralRules::select(this, Data, (const icu::UnicodeString *)a3, a4);
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, uint64_t a2@<X1>, const icu::UnicodeString *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 < 1)
  {
    int v7 = *((_DWORD *)this + 6);
    if (v7 < 1)
    {
      if (*((void *)this + 2))
      {
        icu::PluralRules::select(this, (const icu::IFixedDecimal *)(a2 + 304), (icu::UnicodeString *)v17);
        int v10 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v17, a3, v9);
        icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
        icu::PluralRules::select(this, (const icu::IFixedDecimal *)(a2 + 376), (icu::UnicodeString *)v17);
        int v13 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v17, a3, v12);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v17);
        if (*(int *)a3 < 1)
        {
          int v15 = sub_18C99A43C(*((unsigned int **)this + 2), v10, v13);
          Keyword = icu::StandardPlural::getKeyword(v15);
          icu::UnicodeString::UnicodeString(a4, Keyword, 0xFFFFFFFFLL, 0);
        }
        else
        {
          *(_OWORD *)(a4 + 8) = 0u;
          *(void *)(a4 + 56) = 0;
          *(_OWORD *)(a4 + 40) = 0u;
          *(_OWORD *)(a4 + 24) = 0u;
          *(void *)a4 = &unk_1EDA47700;
          *(_WORD *)(a4 + 8) = 2;
          icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
        }
        return;
      }
      int v7 = 16;
    }
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(void *)(a4 + 56) = 0;
  }
  else
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)(a4 + 56) = 0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
  }
  *(void *)a4 = &unk_1EDA47700;
  *(_WORD *)(a4 + 8) = 2;

  icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
}

uint64_t icu::PluralRules::getKeywords(icu::PluralRules *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)*((unsigned int *)this + 6);
  if ((int)v5 >= 1)
  {
    uint64_t result = 0;
LABEL_5:
    *a2 = (int)v5;
    return result;
  }
  int v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 <= 0)
    {
      uint64_t result = 0;
      LODWORD(v5) = 7;
      goto LABEL_5;
    }
    return 0;
  }
  uint64_t result = sub_18C9A131C((uint64_t)v6, *((void *)this + 1), a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

double icu::PluralRules::getUniqueKeywordValue(icu::PluralRules *this, const icu::UnicodeString *a2)
{
  return -0.00123456777;
}

uint64_t icu::PluralRules::getAllKeywordValues(icu::PluralRules *this, const icu::UnicodeString *a2, double *a3, int a4, UErrorCode *a5)
{
  *a5 = U_UNSUPPORTED_ERROR;
  return 0;
}

uint64_t *icu::PluralRules::getSamples(icu::PluralRules *this, const icu::UnicodeString *a2, double *a3, int a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  int v7 = (uint64_t *)*((unsigned int *)this + 6);
  if ((int)v7 >= 1)
  {
    uint64_t result = 0;
LABEL_14:
    *a5 = (int)v7;
    return result;
  }
  if (!a3)
  {
    if (!a4) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t result = 0;
    LODWORD(v7) = 1;
    goto LABEL_14;
  }
  if (a4 < 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t result = icu::PluralRules::rulesForKeyword(v7, this, a2);
  if (result)
  {
    int v10 = result;
    uint64_t result = (uint64_t *)sub_18C99EBC0((uint64_t)(result + 19), (uint64_t)a3, 0, a4, a5);
    if (!result)
    {
      return (uint64_t *)sub_18C99EBC0((uint64_t)(v10 + 11), (uint64_t)a3, 0, a4, a5);
    }
  }
  return result;
}

uint64_t icu::PluralRules::rulesForKeyword(icu::PluralRules *this, const icu::UnicodeString *a2)
{
  for (uint64_t i = *((void *)this + 1); i; uint64_t i = *(void *)(i + 72))
  {
    unsigned int v4 = *(unsigned __int16 *)(i + 16);
    if (v4)
    {
      if (*((_WORD *)a2 + 4)) {
        return i;
      }
    }
    else
    {
      if ((v4 & 0x8000) != 0) {
        int v5 = *(_DWORD *)(i + 20);
      }
      else {
        int v5 = v4 >> 5;
      }
      unsigned int v6 = *((unsigned __int16 *)a2 + 4);
      if ((v6 & 0x8000u) == 0) {
        unsigned int v7 = v6 >> 5;
      }
      else {
        unsigned int v7 = *((_DWORD *)a2 + 3);
      }
      if ((v6 & 1) == 0 && v5 == v7 && icu::UnicodeString::doEquals((icu::UnicodeString *)(i + 8), a2, v5)) {
        return i;
      }
    }
  }
  return i;
}

uint64_t sub_18C99EBC0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, UErrorCode *a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (a2 | a3)
  {
    int v6 = a4;
    uint64_t v7 = a3;
    if (!a2 || !a3)
    {
      uint64_t v9 = 0;
      int v11 = 0;
      while (1)
      {
        if ((int)v9 >= v6) {
          return v9;
        }
        unsigned int v12 = *(unsigned __int16 *)(a1 + 8);
        int v13 = (__int16)v12;
        unsigned int v14 = v12 >> 5;
        int v15 = v13 >= 0 ? v14 : *(_DWORD *)(a1 + 12);
        if (v11 >= v15) {
          return v9;
        }
        if (v11 < 0) {
          break;
        }
        if (v13 < 0)
        {
          if (*(_DWORD *)(a1 + 12) >= v11) {
            int v17 = v11;
          }
          else {
            int v17 = *(_DWORD *)(a1 + 12);
          }
LABEL_22:
          int v16 = v17;
          unsigned int v14 = *(_DWORD *)(a1 + 12);
          goto LABEL_23;
        }
        if (v14 >= v11) {
          int v16 = v11;
        }
        else {
          int v16 = v14;
        }
LABEL_23:
        int v18 = icu::UnicodeString::doIndexOf(a1, 0x2Cu, v16, v14 - v16);
        if (v18 == -1)
        {
          if (*(__int16 *)(a1 + 8) < 0) {
            int v18 = *(_DWORD *)(a1 + 12);
          }
          else {
            int v18 = *(unsigned __int16 *)(a1 + 8) >> 5;
          }
        }
        icu::UnicodeString::tempSubString((icu::UnicodeString *)a1, v11, v18 - v11, (icu::UnicodeString *)&v59);
        if ((v60 & 0x8000u) == 0) {
          int32_t v19 = v60 >> 5;
        }
        else {
          int32_t v19 = v61;
        }
        int32_t v20 = icu::UnicodeString::doIndexOf((uint64_t)&v59, 0x7Eu, 0, v19);
        if (v20 < 0)
        {
          *(void *)&long long v54 = 0;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          int v25 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)v58, &v59);
          icu::number::impl::DecimalQuantity::fromExponentString((uint64_t)v25, a5, (uint64_t)&v50);
          icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v58);
          if (a2)
          {
            double v27 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)&v50);
            if (v27 != floor(v27)
              || (int)icu::number::impl::DecimalQuantity::fractionCount((icu::number::impl::DecimalQuantity *)&v50) <= 0)
            {
              *(double *)(a2 + 8 * (int)v9) = v27;
              uint64_t v9 = (v9 + 1);
              int v6 = a4;
            }
          }
          else
          {
            icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)(v7 + 72 * (int)v9), (uint64_t)&v50);
            uint64_t v9 = (v9 + 1);
          }
          icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)&v50);
LABEL_44:
          int v29 = 0;
          int v11 = v18 + 1;
          goto LABEL_45;
        }
        int32_t v21 = v20;
        uint64_t v49 = 0;
        memset(v48, 0, sizeof(v48));
        icu::UnicodeString::tempSubString((icu::UnicodeString *)&v59, 0, v20, (icu::UnicodeString *)v57);
        icu::number::impl::DecimalQuantity::fromExponentString((uint64_t)v57, a5, (uint64_t)v48);
        icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v57);
        uint64_t v47 = 0;
        memset(v46, 0, sizeof(v46));
        icu::UnicodeString::tempSubString((icu::UnicodeString *)&v59, v21 + 1, 2147483646 - v21, (icu::UnicodeString *)v56);
        icu::number::impl::DecimalQuantity::fromExponentString((uint64_t)v56, a5, (uint64_t)v46);
        icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v56);
        if (*(int *)a5 > 0)
        {
          int v24 = 0;
LABEL_39:
          int v29 = 2;
          goto LABEL_40;
        }
        double v28 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v46);
        if (v28 < icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v48))
        {
          int v24 = 0;
          *a5 = U_INVALID_FORMAT_ERROR;
          goto LABEL_39;
        }
        uint64_t v45 = 0;
        memset(v44, 0, sizeof(v44));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v44);
        icu::number::impl::DecimalQuantity::setToInt((void **)v44, 1);
        int LowerDisplayMagnitude = icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude((icu::number::impl::DecimalQuantity *)v48);
        int Exponent = icu::number::impl::DecimalQuantity::getExponent((icu::number::impl::DecimalQuantity *)v48);
        icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v44, Exponent + LowerDisplayMagnitude);
        double v33 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v44);
        uint64_t v43 = 0;
        memset(v42, 0, sizeof(v42));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v42, (uint64_t)v48);
        double v34 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v42);
        double v35 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v46);
        if (v34 <= v35)
        {
          double v36 = v35;
          while (a2)
          {
            if (v34 != floor(v34)
              || (int)icu::number::impl::DecimalQuantity::fractionCount((icu::number::impl::DecimalQuantity *)v42) <= 0)
            {
              *(double *)(a2 + 8 * (int)v9) = v34;
              uint64_t v9 = (v9 + 1);
LABEL_54:
              int v6 = a4;
            }
            if ((int)v9 < v6)
            {
              long long v54 = 0u;
              long long v55 = 0u;
              long long v52 = 0u;
              long long v53 = 0u;
              long long v50 = 0u;
              long long v51 = 0u;
              icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)&v50);
              icu::number::impl::DecNum::setTo((icu::number::impl::DecNum *)&v50, v33 + v34, a5);
              uint64_t v41 = 0;
              memset(v40, 0, sizeof(v40));
              icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v40);
              icu::number::impl::DecimalQuantity::setToDecNum((void **)v40, (const icu::number::impl::DecNum *)&v50, a5);
              icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)v40, -LowerDisplayMagnitude);
              icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)v40, LowerDisplayMagnitude, 4u, (int *)a5);
              icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v40, -Exponent);
              icu::number::impl::DecimalQuantity::adjustExponent((uint64_t)v40, Exponent);
              double v34 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v40);
              icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)v42, (uint64_t)v40);
              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v40);
              if (BYTE12(v50)) {
                uprv_free((void *)v50);
              }
              if (v34 <= v36) {
                continue;
              }
            }
            goto LABEL_59;
          }
          icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)(a3 + 72 * (int)v9), (uint64_t)v42);
          uint64_t v9 = (v9 + 1);
          goto LABEL_54;
        }
LABEL_59:
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v42);
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v44);
        int v29 = 0;
        int v24 = 1;
        uint64_t v7 = a3;
LABEL_40:
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v46);
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v48);
        if (v24) {
          goto LABEL_44;
        }
LABEL_45:
        icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v59);
        if (v29) {
          return v9;
        }
      }
      int v17 = 0;
      int v16 = 0;
      if ((v13 & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  uint64_t v9 = 0;
  *a5 = U_INTERNAL_PROGRAM_ERROR;
  return v9;
}

uint64_t icu::PluralRules::getSamples(icu::PluralRules *this, const icu::UnicodeString *a2, icu::number::impl::DecimalQuantity *a3, int a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  UErrorCode v7 = *((_DWORD *)this + 6);
  if (v7 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    uint64_t result = 0;
LABEL_14:
    *a5 = v7;
    return result;
  }
  if (!a3)
  {
    if (!a4) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t result = 0;
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_14;
  }
  if (a4 < 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t result = icu::PluralRules::rulesForKeyword(this, a2);
  if (result)
  {
    uint64_t v10 = result;
    uint64_t result = sub_18C99EBC0(result + 152, 0, (uint64_t)a3, a4, a5);
    if (!result)
    {
      return sub_18C99EBC0(v10 + 88, 0, (uint64_t)a3, a4, a5);
    }
  }
  return result;
}

BOOL icu::PluralRules::isKeyword(icu::PluralRules *this, const icu::UnicodeString *a2)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  int v5 = (__int16)v4;
  int32_t v6 = v4 >> 5;
  if (v5 >= 0) {
    int32_t v7 = v6;
  }
  else {
    int32_t v7 = *((_DWORD *)a2 + 3);
  }
  uint64_t v9 = "o";
  return !icu::UnicodeString::doCompare((uint64_t)a2, 0, v7, (uint64_t)"o", 0, 5)
      || icu::PluralRules::rulesForKeyword((uint64_t *)&v9, this, a2) != 0;
}

uint64_t icu::PluralRules::getKeywordOther@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = "o";
  return icu::UnicodeString::UnicodeString(a1, 1, &v3);
}

uint64_t icu::PluralRules::operator==(icu::PluralRules *a1, icu::PluralRules *a2)
{
  UErrorCode v11 = U_ZERO_ERROR;
  if (a1 == a2) {
    return 1;
  }
  uint64_t Keywords = icu::PluralRules::getKeywords(a1, &v11);
  uint64_t v5 = icu::PluralRules::getKeywords(a2, &v11);
  if (v11 <= U_ZERO_ERROR)
  {
    int v7 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)Keywords + 32))(Keywords, &v11);
    if (v7 == (*(unsigned int (**)(uint64_t, UErrorCode *))(*(void *)v5 + 32))(v5, &v11))
    {
      (*(void (**)(uint64_t, UErrorCode *))(*(void *)Keywords + 64))(Keywords, &v11);
      while (1)
      {
        UErrorCode v8 = (const icu::UnicodeString *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)Keywords + 56))(Keywords, &v11);
        if (!v8) {
          break;
        }
        if (!icu::PluralRules::isKeyword(a2, v8)) {
          goto LABEL_3;
        }
      }
      (*(void (**)(uint64_t, UErrorCode *))(*(void *)v5 + 64))(v5, &v11);
      while (1)
      {
        uint64_t v9 = (const icu::UnicodeString *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)v5 + 56))(v5, &v11);
        if (!v9) {
          break;
        }
        if (!icu::PluralRules::isKeyword(a1, v9)) {
          goto LABEL_4;
        }
      }
      BOOL v6 = v11 < U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  else
  {
LABEL_3:
    if (!v5)
    {
      BOOL v6 = 0;
      if (!Keywords) {
        return v6;
      }
      goto LABEL_20;
    }
LABEL_4:
    BOOL v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  if (Keywords) {
LABEL_20:
  }
    (*(void (**)(uint64_t))(*(void *)Keywords + 8))(Keywords);
  return v6;
}

int *sub_18C99F4A8(int *result, int *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*a2 <= 0)
  {
    uint64_t v3 = result;
    uint64_t v4 = *((void *)result + 1);
    uint64_t v5 = v4 + 10;
    for (uint64_t i = result[4]; ; v3[4] = i)
    {
      unsigned int v7 = *(unsigned __int16 *)(v4 + 8);
      if (*(__int16 *)(v4 + 8) < 0)
      {
        int v8 = *(_DWORD *)(v4 + 12);
        if ((int)i >= v8) {
          goto LABEL_16;
        }
      }
      else
      {
        if ((int)i >= (int)(v7 >> 5)) {
          goto LABEL_15;
        }
        int v8 = v7 >> 5;
      }
      if (v8 <= i)
      {
        int v10 = 0xFFFF;
      }
      else
      {
        uint64_t v9 = v4 + 10;
        if ((v7 & 2) == 0) {
          uint64_t v9 = *(void *)(v4 + 24);
        }
        int v10 = *(unsigned __int16 *)(v9 + 2 * i);
      }
      uint64_t result = (int *)sub_18C9A1204(v10);
      v3[22] = result;
      if (result != 4) {
        break;
      }
      ++i;
    }
    unsigned int v7 = *(unsigned __int16 *)(v4 + 8);
    if ((*(__int16 *)(v4 + 8) & 0x80000000) == 0)
    {
LABEL_15:
      int v11 = 0;
      int v12 = v7 >> 5;
      goto LABEL_17;
    }
LABEL_16:
    int v12 = *(_DWORD *)(v4 + 12);
    int v11 = 1;
LABEL_17:
    if ((int)i >= v12)
    {
      v3[22] = 30;
    }
    else
    {
      int64_t v13 = i + 1;
      switch(v3[22])
      {
        case 1:
          while (1)
          {
            int64_t v14 = v13;
            if (*(__int16 *)(v4 + 8) < 0)
            {
              int64_t v15 = *(int *)(v4 + 12);
              if (v13 >= v15) {
                goto LABEL_30;
              }
            }
            else
            {
              if (v13 >= (uint64_t)((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 5)) {
                goto LABEL_30;
              }
              int64_t v15 = (unint64_t)*(unsigned __int16 *)(v4 + 8) >> 5;
            }
            if (v15 <= v13)
            {
              int v17 = 0xFFFF;
            }
            else
            {
              uint64_t v16 = v4 + 10;
              if ((*(_WORD *)(v4 + 8) & 2) == 0) {
                uint64_t v16 = *(void *)(v4 + 24);
              }
              int v17 = *(unsigned __int16 *)(v16 + 2 * v13);
            }
            int v18 = sub_18C9A1204(v17);
            v3[22] = v18;
            int64_t v13 = v14 + 1;
            if (v18 != 1)
            {
LABEL_30:
              int v19 = 1;
              goto LABEL_42;
            }
          }
        case 2:
        case 3:
        case 5:
        case 6:
        case 9:
        case 0xD:
        case 0x10:
        case 0x12:
          goto LABEL_19;
        case 7:
          LODWORD(v14) = i + 1;
          if (v11)
          {
            int v24 = *(_DWORD *)(v4 + 12);
            if ((int)v14 >= v24) {
              goto LABEL_66;
            }
          }
          else
          {
            if ((int)v14 >= (int)(v7 >> 5)) {
              goto LABEL_66;
            }
            int v24 = v7 >> 5;
          }
          if (v24 <= v14) {
            goto LABEL_66;
          }
          uint64_t v26 = v4 + 10;
          if ((v7 & 2) == 0) {
            uint64_t v26 = *(void *)(v4 + 24);
          }
          if (*(_WORD *)(v26 + 2 * (int)v14) != 46) {
            goto LABEL_66;
          }
          LODWORD(v14) = i + 2;
          if (v11)
          {
            int v27 = *(_DWORD *)(v4 + 12);
            if ((int)v14 >= v27) {
              goto LABEL_75;
            }
          }
          else
          {
            if ((int)v14 >= (int)(v7 >> 5)) {
              goto LABEL_75;
            }
            int v27 = v7 >> 5;
          }
          if (v27 > v14)
          {
            if ((v7 & 2) == 0) {
              uint64_t v5 = *(void *)(v4 + 24);
            }
            if (*(_WORD *)(v5 + 2 * (int)v14) == 46)
            {
              v3[22] = 9;
              LODWORD(v14) = i + 3;
              goto LABEL_66;
            }
          }
LABEL_75:
          v3[22] = 8;
          goto LABEL_66;
        case 0xA:
          goto LABEL_31;
        case 0x11:
          LODWORD(v14) = i + 1;
          if (v11) {
            unsigned int v25 = *(_DWORD *)(v4 + 12);
          }
          else {
            unsigned int v25 = v7 >> 5;
          }
          if (v25 <= v14) {
            goto LABEL_65;
          }
          if ((v7 & 2) == 0) {
            uint64_t v5 = *(void *)(v4 + 24);
          }
          if (*(_WORD *)(v5 + 2 * (int)v14) == 61) {
            LODWORD(v14) = i + 2;
          }
          else {
LABEL_65:
          }
            v3[22] = 0;
          goto LABEL_66;
        default:
          *a2 = 65792;
LABEL_19:
          LODWORD(v14) = i + 1;
          goto LABEL_66;
      }
      do
      {
LABEL_31:
        int64_t v14 = v13;
        if (*(__int16 *)(v4 + 8) < 0)
        {
          int64_t v20 = *(int *)(v4 + 12);
          if (v13 >= v20) {
            break;
          }
        }
        else
        {
          if (v13 >= (uint64_t)((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 5)) {
            break;
          }
          int64_t v20 = (unint64_t)*(unsigned __int16 *)(v4 + 8) >> 5;
        }
        if (v20 <= v13)
        {
          int v22 = 0xFFFF;
        }
        else
        {
          uint64_t v21 = v4 + 10;
          if ((*(_WORD *)(v4 + 8) & 2) == 0) {
            uint64_t v21 = *(void *)(v4 + 24);
          }
          int v22 = *(unsigned __int16 *)(v21 + 2 * v13);
        }
        int v23 = sub_18C9A1204(v22);
        v3[22] = v23;
        int64_t v13 = v14 + 1;
      }
      while (v23 == 10);
      int v19 = 10;
LABEL_42:
      v3[22] = v19;
LABEL_66:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v29, (const icu::UnicodeString *)v4, i, (v14 - i));
      icu::UnicodeString::operator=((icu::UnicodeString *)(v3 + 6), (icu::UnicodeString *)v29);
      uint64_t result = (int *)icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v29);
      v3[4] = v14;
    }
  }
  return result;
}

uint64_t sub_18C99F838(uint64_t result, int *a2)
{
  if (*a2 <= 0)
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(result + 92);
    if (v4) {
      BOOL v5 = v4 == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t result = sub_18C9A0DE4(result + 24, *(unsigned int *)(result + 88));
      *(_DWORD *)(v3 + 88) = result;
      int v4 = *(_DWORD *)(v3 + 92);
    }
    switch(v4)
    {
      case 0:
      case 3:
        int v9 = *(_DWORD *)(v3 + 88);
        if (v9 != 10 && v9 != 30) {
          goto LABEL_41;
        }
        return result;
      case 1:
        unsigned int v11 = *(_DWORD *)(v3 + 88);
        BOOL v7 = v11 > 0x1E;
        int v12 = 1 << v11;
        int v13 = 1075566924;
        goto LABEL_30;
      case 2:
      case 8:
      case 13:
      case 15:
      case 16:
      case 17:
      case 19:
        if (*(_DWORD *)(v3 + 88) != 1) {
          goto LABEL_41;
        }
        return result;
      case 5:
        int v14 = *(_DWORD *)(v3 + 88);
        if ((v14 - 21) >= 7 && v14 != 6) {
          goto LABEL_41;
        }
        return result;
      case 6:
        if ((*(_DWORD *)(v3 + 88) & 0xFFFFFFFE) != 0x1C) {
          goto LABEL_41;
        }
        return result;
      case 10:
        if (*(_DWORD *)(v3 + 88) != 5) {
          goto LABEL_41;
        }
        return result;
      case 11:
      case 12:
        if ((*(_DWORD *)(v3 + 88) - 21) >= 7) {
          goto LABEL_41;
        }
        return result;
      case 14:
        unsigned int v16 = *(_DWORD *)(v3 + 88);
        BOOL v7 = v16 > 0x13;
        int v12 = 1 << v16;
        int v13 = 557058;
LABEL_30:
        int v8 = v12 & v13;
        goto LABEL_31;
      case 20:
        int v18 = *(_DWORD *)(v3 + 88);
        if (v18 != 1 && v18 != 14) {
          goto LABEL_41;
        }
        return result;
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
        unsigned int v6 = *(_DWORD *)(v3 + 88);
        BOOL v7 = v6 > 0x14;
        int v8 = (1 << v6) & 0x1BE000;
LABEL_31:
        if (!v7 && v8 != 0) {
          return result;
        }
        goto LABEL_41;
      default:
LABEL_41:
        *a2 = 65792;
        break;
    }
  }
  return result;
}

double sub_18C99FA1C(uint64_t a1, int *a2)
{
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3 >= 1) {
    goto LABEL_2;
  }
  uint64_t v5 = icu::UMemory::operator new((icu::UMemory *)0x38, (unint64_t)a2);
  if (!v5)
  {
    *(void *)(a1 + 40) = 0;
    int v3 = 7;
LABEL_2:
    *a2 = v3;
    return result;
  }
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 48) = 0;
  *(void *)uint64_t v5 = &unk_1EDA511F0;
  double result = NAN;
  *(void *)(v5 + 8) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v5 + 16) = -1;
  *(unsigned char *)(v5 + 32) = 0;
  *(void *)(v5 + 36) = 0;
  *(void *)(v5 + 44) = 0;
  *(void *)(a1 + 40) = v5;
  return result;
}

double sub_18C99FAB8(uint64_t a1, int *a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 > 0) {
    goto LABEL_2;
  }
  do
  {
    uint64_t v4 = a1;
    a1 = *(void *)(a1 + 16);
  }
  while (a1);
  uint64_t v5 = icu::UMemory::operator new((icu::UMemory *)0x38, (unint64_t)a2);
  if (!v5)
  {
    *(void *)(v4 + 8) = 0;
    int v3 = 7;
LABEL_2:
    *a2 = v3;
    return result;
  }
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 48) = 0;
  *(void *)uint64_t v5 = &unk_1EDA511F0;
  double result = NAN;
  *(void *)(v5 + 8) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v5 + 16) = -1;
  *(unsigned char *)(v5 + 32) = 0;
  *(void *)(v5 + 36) = 0;
  *(void *)(v5 + 44) = 0;
  *(void *)(v4 + 8) = v5;
  return result;
}

uint64_t sub_18C99FB5C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  memset(v6, 0, sizeof(v6));
  unsigned int v1 = *(unsigned __int16 *)(a1 + 8);
  int v2 = (__int16)v1;
  unsigned int v3 = v1 >> 5;
  if (v2 >= 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
  }
  *((unsigned char *)v6 + (int)icu::UnicodeString::extract(a1, 0, v4, (char *)v6, 128)) = 0;
  return atoi((const char *)v6);
}

void *icu::PluralRules::getRules@<X0>(icu::PluralRules *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  double result = (void *)*((void *)this + 1);
  if (result) {
    return sub_18C99FC48(result, a2);
  }
  return result;
}

void *sub_18C99FC48(void *result, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  memset(v78, 0, sizeof(v78));
  long long v58 = result;
  if (result[10])
  {
    unsigned int v3 = *((unsigned __int16 *)result + 8);
    int v4 = (__int16)v3;
    unsigned int v5 = v3 >> 5;
    uint64_t v6 = v4 >= 0 ? v5 : *((unsigned int *)result + 5);
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)(result + 1), 0, v6);
    __int16 v75 = 58;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v75, 0, 1);
    __int16 v75 = 32;
    double result = (void *)icu::UnicodeString::doAppend(a2, (uint64_t)&v75, 0, 1);
    uint64_t v7 = v58[10];
    if (v7)
    {
      while (1)
      {
        uint64_t v59 = v7;
        uint64_t v8 = *(void *)(v7 + 8);
        if (v8) {
          break;
        }
LABEL_92:
        uint64_t v7 = *(void *)(v59 + 16);
        if (!v7) {
          goto LABEL_97;
        }
        uint64_t v62 = " ";
        icu::UnicodeString::UnicodeString(&v75, 1, &v62);
        if ((v76 & 0x8000u) == 0) {
          uint64_t v54 = v76 >> 5;
        }
        else {
          uint64_t v54 = v77;
        }
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v54);
        double result = icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)&v75);
        v60[1] = v62;
      }
      while (*(_DWORD *)(v8 + 8) || *(void *)(v8 + 24))
      {
        sub_18C9A0C9C(*(_DWORD *)(v8 + 36), (uint64_t)&v75);
        if ((v76 & 0x8000u) == 0) {
          uint64_t v9 = v76 >> 5;
        }
        else {
          uint64_t v9 = v77;
        }
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v9);
        icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v75);
        __int16 v75 = 32;
        icu::UnicodeString::doAppend(a2, (uint64_t)&v75, 0, 1);
        if (*(_DWORD *)(v8 + 8) == 1)
        {
          v72 = L"mod ";
          icu::UnicodeString::UnicodeString(&v75, 1, &v72);
          if ((v76 & 0x8000u) == 0) {
            uint64_t v11 = v76 >> 5;
          }
          else {
            uint64_t v11 = v77;
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v11);
          icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v75);
          v60[13] = v72;
          uprv_itou((__int16 *)v78, 16, *(_DWORD *)(v8 + 12), 0xAu, 0);
          icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
          if ((v76 & 0x8000u) == 0) {
            uint64_t v13 = v76 >> 5;
          }
          else {
            uint64_t v13 = v77;
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v13);
          icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v75);
        }
        if (!*(void *)(v8 + 24))
        {
          if (*(unsigned char *)(v8 + 32))
          {
            v71 = " ";
            icu::UnicodeString::UnicodeString(&v75, 1, &v71);
            if ((v76 & 0x8000u) == 0) {
              uint64_t v17 = v76 >> 5;
            }
            else {
              uint64_t v17 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v17);
            icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v75);
            v60[6] = v71;
          }
          else
          {
            uint64_t v70 = L" is ";
            icu::UnicodeString::UnicodeString(&v75, 1, &v70);
            if ((v76 & 0x8000u) == 0) {
              uint64_t v31 = v76 >> 5;
            }
            else {
              uint64_t v31 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v31);
            icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v75);
            v60[5] = v70;
          }
LABEL_57:
          uprv_itou((__int16 *)v78, 16, *(_DWORD *)(v8 + 16), 0xAu, 0);
          icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
          if ((v76 & 0x8000u) == 0) {
            uint64_t v33 = v76 >> 5;
          }
          else {
            uint64_t v33 = v77;
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v33);
          double result = icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v75);
          goto LABEL_87;
        }
        if (*(unsigned char *)(v8 + 32))
        {
          if (*(unsigned char *)(v8 + 33))
          {
            uint64_t v69 = L" not in ";
            icu::UnicodeString::UnicodeString(&v75, 1, &v69);
            if ((v76 & 0x8000u) == 0) {
              uint64_t v15 = v76 >> 5;
            }
            else {
              uint64_t v15 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v15);
            double result = icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v75);
            v60[12] = v69;
          }
          else
          {
            long long v68 = " ";
            icu::UnicodeString::UnicodeString(&v75, 1, &v68);
            if ((v76 & 0x8000u) == 0) {
              uint64_t v29 = v76 >> 5;
            }
            else {
              uint64_t v29 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v29);
            double result = icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v75);
            v60[11] = v68;
          }
        }
        else if (*(unsigned char *)(v8 + 33))
        {
          int v67 = L" in ";
          icu::UnicodeString::UnicodeString(&v75, 1, &v67);
          if ((v76 & 0x8000u) == 0) {
            uint64_t v19 = v76 >> 5;
          }
          else {
            uint64_t v19 = v77;
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v19);
          double result = icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v75);
          v60[10] = v67;
        }
        else
        {
          int v66 = " ";
          icu::UnicodeString::UnicodeString(&v75, 1, &v66);
          if ((v76 & 0x8000u) == 0) {
            uint64_t v35 = v76 >> 5;
          }
          else {
            uint64_t v35 = v77;
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v35);
          double result = icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v75);
          v60[9] = v66;
        }
        uint64_t v37 = *(void *)(v8 + 24);
        uint64_t v38 = *(unsigned int *)(v37 + 8);
        if ((int)v38 >= 1)
        {
          uint64_t v39 = 0;
          while ((int)v38 >= 1)
          {
            uint64_t v40 = *(void *)(v37 + 24);
            unsigned int v41 = *(_DWORD *)(v40 + 4 * v39);
            if (v39 + 1 >= v38) {
              goto LABEL_71;
            }
            unsigned int v42 = *(_DWORD *)(v40 + 4 * v39 + 4);
LABEL_72:
            uprv_itou((__int16 *)v78, 16, v41, 0xAu, 0);
            icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
            if ((v76 & 0x8000u) == 0) {
              uint64_t v43 = v76 >> 5;
            }
            else {
              uint64_t v43 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v43);
            uint64_t v45 = icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v75);
            uint64_t v65 = L"..";
            icu::UnicodeString::UnicodeString(v45, 1, &v65);
            if ((v76 & 0x8000u) == 0) {
              uint64_t v46 = v76 >> 5;
            }
            else {
              uint64_t v46 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v46);
            icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v75);
            v60[8] = v65;
            uprv_itou((__int16 *)v78, 16, v42, 0xAu, 0);
            icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
            if ((v76 & 0x8000u) == 0) {
              uint64_t v48 = v76 >> 5;
            }
            else {
              uint64_t v48 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v48);
            double result = icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v75);
            v39 += 2;
            uint64_t v37 = *(void *)(v8 + 24);
            uint64_t v38 = *(unsigned int *)(v37 + 8);
            if ((int)v38 > (int)v39)
            {
              int v64 = L", ";
              icu::UnicodeString::UnicodeString(result, 1, &v64);
              if ((v76 & 0x8000u) == 0) {
                uint64_t v50 = v76 >> 5;
              }
              else {
                uint64_t v50 = v77;
              }
              icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v50);
              double result = icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)&v75);
              v60[7] = v64;
              uint64_t v37 = *(void *)(v8 + 24);
              uint64_t v38 = *(unsigned int *)(v37 + 8);
            }
            if ((int)v38 <= (int)v39) {
              goto LABEL_87;
            }
          }
          unsigned int v41 = 0;
LABEL_71:
          unsigned int v42 = 0;
          goto LABEL_72;
        }
LABEL_87:
        uint64_t v8 = *(void *)(v8 + 40);
        if (!v8) {
          goto LABEL_92;
        }
        int v63 = " ";
        icu::UnicodeString::UnicodeString(&v75, 1, &v63);
        if ((v76 & 0x8000u) == 0) {
          uint64_t v52 = v76 >> 5;
        }
        else {
          uint64_t v52 = v77;
        }
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v52);
        double result = icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)&v75);
        v60[2] = v63;
      }
      if (*(_DWORD *)(v8 + 16) == -1) {
        goto LABEL_87;
      }
      sub_18C9A0C9C(*(_DWORD *)(v8 + 36), (uint64_t)&v75);
      if ((v76 & 0x8000u) == 0) {
        uint64_t v21 = v76 >> 5;
      }
      else {
        uint64_t v21 = v77;
      }
      icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v21);
      int v23 = icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v75);
      v74 = L" is ";
      icu::UnicodeString::UnicodeString(v23, 1, &v74);
      if ((v76 & 0x8000u) == 0) {
        uint64_t v24 = v76 >> 5;
      }
      else {
        uint64_t v24 = v77;
      }
      icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v24);
      uint64_t v26 = icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v75);
      v60[4] = v74;
      if (*(unsigned char *)(v8 + 32))
      {
        v73 = "n";
        icu::UnicodeString::UnicodeString(v26, 1, &v73);
        if ((v76 & 0x8000u) == 0) {
          uint64_t v27 = v76 >> 5;
        }
        else {
          uint64_t v27 = v77;
        }
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v27);
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v75);
        v60[3] = v73;
      }
      goto LABEL_57;
    }
  }
LABEL_97:
  if (v58[9])
  {
    int32_t v61 = L"; ";
    icu::UnicodeString::UnicodeString(&v75, 1, &v61);
    if ((v76 & 0x8000u) == 0) {
      uint64_t v56 = v76 >> 5;
    }
    else {
      uint64_t v56 = v77;
    }
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v56);
    icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)&v75);
    v60[0] = v61;
    return sub_18C99FC48(v60, v58[9], a2);
  }
  return result;
}

uint64_t sub_18C9A0524(uint64_t a1, unint64_t a2)
{
  *(void *)a1 = &unk_1EDA511F0;
  *(void *)(a1 + 8) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 44) = 0;
  *(void *)(a1 + 36) = 0;
  int v3 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 48) = v3;
  int v4 = (UErrorCode *)(a1 + 48);
  if (v3 > 0) {
    return a1;
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(uint64_t **)(a2 + 24);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = (icu::UVector32 *)icu::UMemory::operator new(v7, (icu::UMemory *)0x20, a2);
  if (v8)
  {
    uint64_t v9 = icu::UVector32::UVector32(v8, v4);
    if (*(int *)v4 > 0)
    {
      (*(void (**)(icu::UVector32 *))(*(void *)v9 + 8))(v9);
      return a1;
    }
    *(void *)(a1 + 24) = v9;
    icu::UVector32::assign(v9, *(const icu::UVector32 **)(a2 + 24), v4);
LABEL_10:
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    int v10 = *(uint64_t **)(a2 + 40);
    if (v10)
    {
      uint64_t v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x38, a2);
      if (v11)
      {
        *(void *)(a1 + 40) = sub_18C9A0524(v11, *(void *)(a2 + 40));
      }
      else
      {
        *(void *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 7;
      }
    }
    return a1;
  }
  if (*(int *)v4 <= 0) {
    UErrorCode *v4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return a1;
}

void *sub_18C9A0670(void *a1)
{
  *a1 = &unk_1EDA511F0;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  a1[3] = 0;
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  a1[5] = 0;
  return a1;
}

void sub_18C9A0714(void *a1)
{
  unsigned int v1 = sub_18C9A0670(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9A073C(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 36);
  if (!v3) {
    return 1;
  }
  uint64_t v5 = sub_18C9A087C(v3);
  double v6 = (*(double (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5);
  long double v7 = v6;
  if (!*(unsigned char *)(a1 + 33) || v6 == uprv_floor(v6))
  {
    if (*(_DWORD *)(a1 + 8) == 1) {
      long double v7 = fmod(v7, (double)*(int *)(a1 + 12));
    }
    uint64_t v8 = *(void *)(a1 + 24);
    if (!v8)
    {
      int v14 = *(_DWORD *)(a1 + 16);
      BOOL v12 = v7 == (double)v14 || v14 == -1;
      return v12 ^ (*(unsigned char *)(a1 + 32) != 0);
    }
    uint64_t v9 = *(unsigned int *)(v8 + 8);
    if ((int)v9 >= 1)
    {
      uint64_t v10 = 0;
      while (1)
      {
        if (v7 >= (double)*(int *)(*(void *)(v8 + 24) + 4 * v10))
        {
          int v11 = v10 + 1 >= v9 ? 0 : *(_DWORD *)(*(void *)(v8 + 24) + 4 * v10 + 4);
          if (v7 <= (double)v11) {
            break;
          }
        }
        v10 += 2;
        if ((int)v9 <= (int)v10) {
          goto LABEL_15;
        }
      }
      BOOL v12 = 1;
      return v12 ^ (*(unsigned char *)(a1 + 32) != 0);
    }
  }
LABEL_15:
  BOOL v12 = 0;
  return v12 ^ (*(unsigned char *)(a1 + 32) != 0);
}

uint64_t sub_18C9A087C(int a1)
{
  if ((a1 - 21) >= 7) {
    abort();
  }
  return dword_18CA95D98[a1 - 21];
}

uint64_t sub_18C9A08AC(uint64_t a1, unint64_t a2)
{
  *(void *)a1 = &unk_1EDA51210;
  *(void *)(a1 + 8) = 0;
  int v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  int v4 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = 0;
  int v5 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 <= 0)
  {
    long double v7 = *(uint64_t **)(a2 + 8);
    if (v7)
    {
      uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x38, a2);
      if (!v8) {
        goto LABEL_10;
      }
      uint64_t *v3 = sub_18C9A0524((uint64_t)v8, *(void *)(a2 + 8));
    }
    uint64_t v9 = *(uint64_t **)(a2 + 16);
    if (v9)
    {
      uint64_t v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x20, a2);
      if (v10)
      {
        uint64_t v11 = sub_18C9A08AC(v10, *(void *)(a2 + 16));
        uint64_t *v4 = v11;
        int v12 = *(_DWORD *)(v11 + 24);
        if (v12 < 1) {
          return a1;
        }
        goto LABEL_11;
      }
      int v3 = v4;
LABEL_10:
      uint64_t *v3 = 0;
      int v12 = 7;
LABEL_11:
      *(_DWORD *)(a1 + 24) = v12;
    }
  }
  return a1;
}

void *sub_18C9A097C(void *a1)
{
  *a1 = &unk_1EDA51210;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  a1[1] = 0;
  uint64_t v3 = a1[2];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  a1[2] = 0;
  return a1;
}

void sub_18C9A0A20(void *a1)
{
  unsigned int v1 = sub_18C9A097C(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9A0A48(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (!v4) {
        break;
      }
      do
      {
        double result = sub_18C9A073C(v4, a2);
        uint64_t v4 = *(void *)(v4 + 40);
        if (v4) {
          BOOL v5 = result == 0;
        }
        else {
          BOOL v5 = 1;
        }
      }
      while (!v5);
      uint64_t v3 = *(void *)(v3 + 16);
      if (v3) {
        BOOL v6 = result == 0;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        return result;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_18C9A0AB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDA51230;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), (UChar **)(a2 + 8));
  *(void *)(a1 + 72) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 72);
  *(void *)(a1 + 80) = 0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 88), (UChar **)(a2 + 88));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 152), (UChar **)(a2 + 152));
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  int v6 = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 220) = v6;
  if (v6 <= 0)
  {
    long double v7 = *(uint64_t **)(a2 + 80);
    if (v7)
    {
      uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x20, v5);
      if (v8)
      {
        uint64_t v9 = sub_18C9A08AC((uint64_t)v8, *(void *)(a2 + 80));
        *(void *)(a1 + 80) = v9;
        int v10 = *(_DWORD *)(v9 + 24);
        if (v10 > 0)
        {
LABEL_12:
          *(_DWORD *)(a1 + 220) = v10;
          return a1;
        }
      }
      else
      {
        *(void *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 220) = 7;
      }
    }
    uint64_t v11 = *(uint64_t **)(a2 + 72);
    if (v11)
    {
      int v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0xE0, v5);
      if (v12)
      {
        uint64_t v13 = sub_18C9A0AB8(v12, *(void *)(a2 + 72));
        uint64_t *v4 = v13;
        int v10 = *(_DWORD *)(v13 + 220);
        if (v10 < 1) {
          return a1;
        }
      }
      else
      {
        uint64_t *v4 = 0;
        int v10 = 7;
      }
      goto LABEL_12;
    }
  }
  return a1;
}

void *sub_18C9A0BC0(void *a1)
{
  *a1 = &unk_1EDA51230;
  uint64_t v2 = a1[9];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[10];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 19));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 11));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

void sub_18C9A0C74(void *a1)
{
  unsigned int v1 = sub_18C9A0BC0(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9A0C9C@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  switch(a1)
  {
    case 21:
      __int16 v4 = 110;
      break;
    case 22:
      __int16 v4 = 105;
      break;
    case 23:
      __int16 v4 = 102;
      break;
    case 24:
      __int16 v4 = 118;
      break;
    case 25:
      __int16 v4 = 116;
      break;
    case 26:
      __int16 v4 = 101;
      break;
    case 27:
      __int16 v4 = 99;
      break;
    default:
      __int16 v4 = 126;
      break;
  }
  __int16 v6 = v4;
  return icu::UnicodeString::doAppend(a2, (uint64_t)&v6, 0, 1);
}

void sub_18C9A0D90(void *a1@<X0>, void *a2@<X8>)
{
  *a1 = &unk_1EDA51250;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 3));

  icu::UMemory::operator delete(a1);
}

uint64_t sub_18C9A0DE4(uint64_t a1, uint64_t a2)
{
  if (a2 == 10)
  {
    v42[3] = v2;
    _OWORD v42[4] = v3;
    unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
    int v6 = (__int16)v5;
    int32_t v7 = v5 >> 5;
    if (v6 >= 0) {
      int32_t v8 = v7;
    }
    else {
      int32_t v8 = *(_DWORD *)(a1 + 12);
    }
    if (icu::UnicodeString::doCompare(a1, 0, v8, (uint64_t)"n", 0, 1))
    {
      unsigned int v9 = *(unsigned __int16 *)(a1 + 8);
      int v10 = (__int16)v9;
      int32_t v11 = v9 >> 5;
      if (v10 >= 0) {
        int32_t v12 = v11;
      }
      else {
        int32_t v12 = *(_DWORD *)(a1 + 12);
      }
      if (icu::UnicodeString::doCompare(a1, 0, v12, (uint64_t)"i", 0, 1))
      {
        unsigned int v13 = *(unsigned __int16 *)(a1 + 8);
        int v14 = (__int16)v13;
        int32_t v15 = v13 >> 5;
        if (v14 >= 0) {
          int32_t v16 = v15;
        }
        else {
          int32_t v16 = *(_DWORD *)(a1 + 12);
        }
        if (icu::UnicodeString::doCompare(a1, 0, v16, (uint64_t)"f", 0, 1))
        {
          unsigned int v17 = *(unsigned __int16 *)(a1 + 8);
          int v18 = (__int16)v17;
          int32_t v19 = v17 >> 5;
          if (v18 >= 0) {
            int32_t v20 = v19;
          }
          else {
            int32_t v20 = *(_DWORD *)(a1 + 12);
          }
          if (icu::UnicodeString::doCompare(a1, 0, v20, (uint64_t)"t", 0, 1))
          {
            unsigned int v21 = *(unsigned __int16 *)(a1 + 8);
            int v22 = (__int16)v21;
            int32_t v23 = v21 >> 5;
            if (v22 >= 0) {
              int32_t v24 = v23;
            }
            else {
              int32_t v24 = *(_DWORD *)(a1 + 12);
            }
            if (icu::UnicodeString::doCompare(a1, 0, v24, (uint64_t)"e", 0, 1))
            {
              unsigned int v25 = *(unsigned __int16 *)(a1 + 8);
              int v26 = (__int16)v25;
              int32_t v27 = v25 >> 5;
              if (v26 >= 0) {
                int32_t v28 = v27;
              }
              else {
                int32_t v28 = *(_DWORD *)(a1 + 12);
              }
              if (icu::UnicodeString::doCompare(a1, 0, v28, (uint64_t)"c", 0, 1))
              {
                unsigned int v29 = *(unsigned __int16 *)(a1 + 8);
                int v30 = (__int16)v29;
                int32_t v31 = v29 >> 5;
                if (v30 >= 0) {
                  int32_t v32 = v31;
                }
                else {
                  int32_t v32 = *(_DWORD *)(a1 + 12);
                }
                if (icu::UnicodeString::doCompare(a1, 0, v32, (uint64_t)"v", 0, 1))
                {
                  v42[0] = (uint64_t)"i";
                  if (sub_18C7EFDE8(a1, v42, 2))
                  {
                    unsigned int v41 = L"and";
                    if (sub_18C7EFDE8(a1, (uint64_t *)&v41, 3))
                    {
                      uint64_t v40 = L"in";
                      if (sub_18C7EFDE8(a1, (uint64_t *)&v40, 2))
                      {
                        uint64_t v39 = "w";
                        if (sub_18C7EFDE8(a1, (uint64_t *)&v39, 6))
                        {
                          uint64_t v38 = L"not";
                          if (sub_18C7EFDE8(a1, (uint64_t *)&v38, 3))
                          {
                            uint64_t v37 = L"mod";
                            if (sub_18C7EFDE8(a1, (uint64_t *)&v37, 3))
                            {
                              double v36 = L"or";
                              if (sub_18C7EFDE8(a1, (uint64_t *)&v36, 2))
                              {
                                uint64_t v35 = "d";
                                if (sub_18C7EFDE8(a1, (uint64_t *)&v35, 7))
                                {
                                  double v34 = "i";
                                  if (sub_18C7EFDE8(a1, (uint64_t *)&v34, 7)) {
                                    return 10;
                                  }
                                  else {
                                    return 29;
                                  }
                                }
                                else
                                {
                                  return 28;
                                }
                              }
                              else
                              {
                                return 12;
                              }
                            }
                            else
                            {
                              return 13;
                            }
                          }
                          else
                          {
                            return 14;
                          }
                        }
                        else
                        {
                          return 19;
                        }
                      }
                      else
                      {
                        return 15;
                      }
                    }
                    else
                    {
                      return 11;
                    }
                  }
                  else
                  {
                    return 20;
                  }
                }
                else
                {
                  return 24;
                }
              }
              else
              {
                return 27;
              }
            }
            else
            {
              return 26;
            }
          }
          else
          {
            return 25;
          }
        }
        else
        {
          return 23;
        }
      }
      else
      {
        return 22;
      }
    }
    else
    {
      return 21;
    }
  }
  return a2;
}

uint64_t sub_18C9A1204(int a1)
{
  if ((a1 - 48) < 0xA) {
    return 1;
  }
  if ((a1 - 97) < 0x1A) {
    return 10;
  }
  if (a1 <= 57)
  {
    if (a1 <= 36)
    {
      if (a1 == 32) {
        return 4;
      }
      if (a1 == 33) {
        return 17;
      }
    }
    else
    {
      switch(a1)
      {
        case '%':
          return 13;
        case ',':
          return 2;
        case '.':
          return 7;
      }
    }
    return 0;
  }
  int v2 = a1 - 58;
  uint64_t result = 5;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 3;
      break;
    case 3:
      uint64_t result = 16;
      break;
    case 6:
      uint64_t result = 6;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t sub_18C9A131C(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v6 = icu::StringEnumeration::StringEnumeration(a1);
  *(void *)uint64_t v6 = &unk_1EDA51270;
  *(_DWORD *)(v6 + 116) = 0;
  int32_t v7 = (icu::UVector *)(v6 + 120);
  icu::UVector::UVector((icu::UVector *)(v6 + 120), a3);
  if (*(int *)a3 <= 0)
  {
    icu::UVector::setDeleter(v7, (void (*)(void *))uprv_deleteUObject);
    if (a2)
    {
      char v10 = 1;
      while (1)
      {
        int32_t v11 = icu::UnicodeString::clone((UChar **)(a2 + 8), v8, v9);
        if (!v11 && *(int *)a3 <= 0) {
          *a3 = U_MEMORY_ALLOCATION_ERROR;
        }
        icu::UVector::adoptElement((uint64_t (**)(void *))v7, v11, a3);
        if (*(int *)a3 > 0) {
          break;
        }
        if (*(__int16 *)(a2 + 16) < 0) {
          int32_t v12 = *(_DWORD *)(a2 + 20);
        }
        else {
          int32_t v12 = *(unsigned __int16 *)(a2 + 16) >> 5;
        }
        if (!icu::UnicodeString::doCompare(a2 + 8, 0, v12, (uint64_t)"o", 0, 5)) {
          char v10 = 0;
        }
        a2 = *(void *)(a2 + 72);
        if (!a2)
        {
          if (!v10) {
            return a1;
          }
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_15:
      unsigned int v13 = icu::UMemory::operator new(v9, (icu::UMemory *)0x40, v8);
      int v14 = v13;
      if (v13)
      {
        icu::UnicodeString::UnicodeString((uint64_t)v13, (uint64_t)"o");
      }
      else if (*(int *)a3 <= 0)
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
      icu::UVector::adoptElement((uint64_t (**)(void *))v7, v14, a3);
    }
  }
  return a1;
}

uint64_t sub_18C9A14B0(_DWORD *a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  signed int v2 = a1[29];
  if (v2 >= a1[32]) {
    return 0;
  }
  a1[29] = v2 + 1;
  return icu::UVector::elementAt((icu::UVector *)(a1 + 30), v2);
}

uint64_t sub_18C9A14E8(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18C9A14F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

void sub_18C9A14F8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA51270;
  icu::UVector::~UVector((icu::UVector *)(a1 + 120));

  icu::StringEnumeration::~StringEnumeration((icu::StringEnumeration *)a1);
}

void sub_18C9A154C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA51270;
  icu::UVector::~UVector((icu::UVector *)(a1 + 120));
  icu::StringEnumeration::~StringEnumeration((icu::StringEnumeration *)a1);

  icu::UMemory::operator delete(v2);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5, int a6)
{
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a6);
  return this;
}

{
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a6);
  return this;
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5, int a6)
{
  *((unsigned char *)this + 61) = a2 < 0.0;
  double v11 = fabs(a2);
  *((double *)this + 2) = v11;
  *((unsigned char *)this + 62) = uprv_isNaN(v11);
  BOOL result = uprv_isInfinite(*((double *)this + 2));
  *((unsigned char *)this + 63) = result;
  if (a5) {
    int v13 = a5;
  }
  else {
    int v13 = a6;
  }
  *((_DWORD *)this + 14) = v13;
  if (*((unsigned char *)this + 62) | result)
  {
    a4 = 0;
    *((void *)this + 6) = 0;
    *((unsigned char *)this + 60) = 0;
    *((_DWORD *)this + 6) = 0;
    *((void *)this + 4) = 0;
  }
  else
  {
    double v14 = *((double *)this + 2);
    *((void *)this + 6) = (uint64_t)v14;
    *((unsigned char *)this + 60) = v14 == (double)(uint64_t)v14;
    *((_DWORD *)this + 6) = a3;
    *((void *)this + 4) = a4;
    if (a4 && __ROR8__(0xCCCCCCCCCCCCCCCDLL * a4 + 0x1999999999999998, 1) <= 0x1999999999999998uLL)
    {
      do
        a4 /= 10;
      while (__ROR8__(0x1999999999999998 - 0x3333333333333333 * a4, 1) < 0x1999999999999999uLL);
    }
  }
  *((void *)this + 5) = a4;
  return result;
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5)
{
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a5);
  return this;
}

{
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a5);
  return this;
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5)
{
  return icu::FixedDecimal::init(this, a2, a3, a4, a5, a5);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2, int a3, uint64_t a4)
{
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  icu::FixedDecimal::init(this, a2, a3, a4, 0, 0);
  return this;
}

{
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  icu::FixedDecimal::init(this, a2, a3, a4, 0, 0);
  return this;
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2, int a3, uint64_t a4)
{
  return icu::FixedDecimal::init(this, a2, a3, a4, 0, 0);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2, icu::FixedDecimal *a3)
{
  int v3 = (int)a3;
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  unint64_t FractionalDigits = icu::FixedDecimal::getFractionalDigits(a3, a2);
  icu::FixedDecimal::init(this, a2, v3, FractionalDigits, 0, 0);
  return this;
}

unint64_t icu::FixedDecimal::getFractionalDigits(icu::FixedDecimal *this, double a2)
{
  int v2 = (int)this;
  unint64_t result = 0;
  if (!v2 || floor(a2) == a2) {
    return result;
  }
  if (uprv_isNaN(a2) || uprv_isPositiveInfinity(a2)) {
    return 0;
  }
  double v5 = fabs(a2);
  double v6 = v5 - floor(v5);
  switch(v2)
  {
    case 3:
      double v8 = 1000.0;
      return (uint64_t)(v6 * v8 + 0.5);
    case 2:
      double v8 = 100.0;
      return (uint64_t)(v6 * v8 + 0.5);
    case 1:
      return (uint64_t)(v6 * 10.0 + 0.5);
  }
  double v9 = v6 * __exp10((double)v2) + 0.5;
  unint64_t v10 = vcvtmd_s64_f64(v9);
  if (floor(v9) >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    return v10;
  }
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2)
{
  __int16 v4 = (icu::FixedDecimal *)icu::FixedDecimal::decimals(this, a2);
  int v5 = (int)v4;
  unint64_t FractionalDigits = icu::FixedDecimal::getFractionalDigits(v4, a2);

  return icu::FixedDecimal::init(this, a2, v5, FractionalDigits, 0, 0);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this)
{
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  icu::FixedDecimal::init(this, 0.0, 0, 0, 0, 0);
  return this;
}

{
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  icu::FixedDecimal::init(this, 0.0, 0, 0, 0, 0);
  return this;
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EDA512D8;
  *((void *)this + 1) = &unk_1EDA51318;
  memset(&v46[1], 0, 48);
  uint64_t v47 = 0;
  v46[0] = (char *)&v46[1] + 5;
  LODWORD(v46[1]) = 40;
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  int v7 = (__int16)v6;
  int32_t v8 = v6 >> 5;
  if (v7 >= 0) {
    int32_t v9 = v8;
  }
  else {
    int32_t v9 = *((_DWORD *)a2 + 3);
  }
  int32_t v10 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x65u, 0, v9);
  if (v10 < 0)
  {
    unsigned int v11 = *((unsigned __int16 *)a2 + 4);
    int v12 = (__int16)v11;
    int32_t v13 = v11 >> 5;
    if (v12 >= 0) {
      int32_t v14 = v13;
    }
    else {
      int32_t v14 = *((_DWORD *)a2 + 3);
    }
    int32_t v10 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x45u, 0, v14);
  }
  unsigned int v15 = *((unsigned __int16 *)a2 + 4);
  int v16 = (__int16)v15;
  int32_t v17 = v15 >> 5;
  if (v16 >= 0) {
    int32_t v18 = v17;
  }
  else {
    int32_t v18 = *((_DWORD *)a2 + 3);
  }
  int32_t v19 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x63u, 0, v18);
  if (v19 < 0)
  {
    unsigned int v23 = *((unsigned __int16 *)a2 + 4);
    int v24 = (__int16)v23;
    int32_t v25 = v23 >> 5;
    if (v24 >= 0) {
      int32_t v26 = v25;
    }
    else {
      int32_t v26 = *((_DWORD *)a2 + 3);
    }
    int32_t v19 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x43u, 0, v26);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_14;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
LABEL_14:
    icu::UnicodeString::tempSubString(a2, 0, v10, (icu::UnicodeString *)v44);
    icu::CharString::appendInvariantChars((icu::CharString *)v46, (const icu::UnicodeString *)v44, a3);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v44);
    LODWORD(v44[0]) = v10 + 1;
    int v22 = icu::ICU_Utility::parseAsciiInteger(a2, (const icu::UnicodeString *)v44, v21);
    goto LABEL_22;
  }
  if (v19 < 0)
  {
    icu::CharString::appendInvariantChars((icu::CharString *)v46, a2, a3);
    int v22 = 0;
  }
  else
  {
    icu::UnicodeString::tempSubString(a2, 0, v19, (icu::UnicodeString *)v44);
    icu::CharString::appendInvariantChars((icu::CharString *)v46, (const icu::UnicodeString *)v44, a3);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v44);
    LODWORD(v44[0]) = v19 + 1;
    int v22 = icu::ICU_Utility::parseAsciiInteger(a2, (const icu::UnicodeString *)v44, v28);
    int32_t v10 = v19;
  }
LABEL_22:
  uint64_t v45 = 0;
  memset(v44, 0, sizeof(v44));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v44);
  icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v44, (const char *)v46[0], v47, a3);
  if (*(int *)a3 < 1)
  {
    unsigned int v35 = *((unsigned __int16 *)a2 + 4);
    int v36 = (__int16)v35;
    int32_t v37 = v35 >> 5;
    if (v36 >= 0) {
      int32_t v38 = v37;
    }
    else {
      int32_t v38 = *((_DWORD *)a2 + 3);
    }
    int v39 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x2Eu, 0, v38);
    double v29 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v44);
    double v40 = v29;
    if (v39 == -1)
    {
      int v30 = this;
      int v31 = 0;
      unint64_t FractionalDigits = 0;
    }
    else
    {
      if (v10 < 0)
      {
        if (*((__int16 *)a2 + 4) < 0) {
          int v41 = *((_DWORD *)a2 + 3);
        }
        else {
          int v41 = *((unsigned __int16 *)a2 + 4) >> 5;
        }
      }
      else
      {
        int v41 = v47;
      }
      unsigned int v42 = v41 + ~v39;
      unint64_t FractionalDigits = icu::FixedDecimal::getFractionalDigits((icu::FixedDecimal *)v42, v29);
      int v30 = this;
      double v29 = v40;
      int v31 = v42;
    }
    int v33 = v22;
    int v34 = v22;
  }
  else
  {
    double v29 = 0.0;
    int v30 = this;
    int v31 = 0;
    unint64_t FractionalDigits = 0;
    int v33 = 0;
    int v34 = 0;
  }
  icu::FixedDecimal::init(v30, v29, v31, FractionalDigits, v33, v34);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v44);
  if (BYTE4(v46[1])) {
    uprv_free(v46[0]);
  }
  return this;
}

__n128 icu::FixedDecimal::FixedDecimal(__n128 *this, __n128 *a2)
{
  this->n128_u64[0] = (unint64_t)&unk_1EDA512D8;
  this->n128_u64[1] = (unint64_t)&unk_1EDA51318;
  this[1].n128_u64[0] = a2[1].n128_u64[0];
  this[1].n128_u32[2] = a2[1].n128_u32[2];
  __n128 result = a2[2];
  this[2] = result;
  this[3].n128_u64[0] = a2[3].n128_u64[0];
  this[3].n128_u32[2] = a2[3].n128_u32[2];
  this[3].n128_u32[3] = a2[3].n128_u32[3];
  return result;
}

void non-virtual thunk to'icu::FixedDecimal::~FixedDecimal(icu::FixedDecimal *this)
{
  unsigned int v1 = (icu::FixedDecimal *)((char *)this - 8);
  icu::UObject::~UObject(this);

  icu::IFixedDecimal::~IFixedDecimal(v1);
}

{
  icu::IFixedDecimal *v1;
  void *v2;
  uint64_t vars8;

  unsigned int v1 = (icu::FixedDecimal *)((char *)this - 8);
  icu::UObject::~UObject(this);
  icu::IFixedDecimal::~IFixedDecimal(v1);

  icu::UMemory::operator delete(v2);
}

BOOL icu::FixedDecimal::createWithExponent@<W0>(icu::FixedDecimal *this@<X0>, double a2@<D0>, int a3@<W1>, icu::FixedDecimal *a4@<X8>)
{
  int v5 = (int)this;
  unint64_t FractionalDigits = icu::FixedDecimal::getFractionalDigits(this, a2);
  *(void *)a4 = &unk_1EDA512D8;
  *((void *)a4 + 1) = &unk_1EDA51318;

  return icu::FixedDecimal::init(a4, a2, v5, FractionalDigits, a3, a3);
}

uint64_t icu::FixedDecimal::decimals(icu::FixedDecimal *this, double a2)
{
  uint64_t result = 0;
  v10[2] = *MEMORY[0x1E4F143B8];
  double v3 = fabs(a2);
  while (1)
  {
    double v4 = v3 * (double)dword_18CA95C44[result];
    if (v4 == floor(v4)) {
      break;
    }
    if (++result == 4)
    {
      *(void *)__str = 0;
      uint64_t v9 = 0;
      *(void *)((char *)v10 + 6) = 0;
      v10[0] = 0;
      snprintf(__str, 0x1EuLL, "%1.15e", v3);
      int v5 = atoi((const char *)v10 + 2);
      if (LOBYTE(v10[0]) == 48)
      {
        uint64_t v6 = 15;
        do
          int v7 = __str[v6--];
        while (v7 == 48);
      }
      else
      {
        LODWORD(v6) = 15;
      }
      return (v6 - v5);
    }
  }
  return result;
}

uint64_t icu::FixedDecimal::quickInit(icu::FixedDecimal *this, double a2)
{
  double v3 = fabs(a2);
  if (v3 == floor(v3))
  {
    double v4 = 0;
    BOOL v5 = 0;
LABEL_7:
    uint64_t v7 = 1;
    if (!v5)
    {
      unint64_t FractionalDigits = icu::FixedDecimal::getFractionalDigits(v4, v3);
      icu::FixedDecimal::init(this, v3, (int)v4, FractionalDigits, 0, 0);
    }
  }
  else
  {
    double v4 = 0;
    while (v4 != (icu::FixedDecimal *)3)
    {
      double v6 = v3 * (double)dword_18CA95C44[(void)v4 + 1];
      double v4 = (icu::FixedDecimal *)((char *)v4 + 1);
      if (v6 == floor(v6))
      {
        BOOL v5 = (unint64_t)v4 - 1 > 2;
        goto LABEL_7;
      }
    }
    return 0;
  }
  return v7;
}

uint64_t icu::FixedDecimal::adjustForMinFractionDigits(uint64_t this, int a2)
{
  int v2 = *(_DWORD *)(this + 24);
  if (a2 - v2 >= 1)
  {
    uint64_t v3 = *(void *)(this + 32);
    do
    {
      if (v3 > 0x16345785D89FFFFLL) {
        break;
      }
      v3 *= 10;
      *(void *)(this + 32) = v3;
      ++v2;
    }
    while (a2 != v2);
    *(_DWORD *)(this + 24) = a2;
  }
  return this;
}

double icu::FixedDecimal::getPluralOperand(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      int v3 = *(_DWORD *)(a1 + 56);
      double v4 = *(double *)(a1 + 16);
      if (v3) {
        return v4 * __exp10((double)v3);
      }
      return v4;
    case 1:
      int v5 = *(_DWORD *)(a1 + 56);
      if (v5) {
        return (double)(uint64_t)(__exp10((double)v5) * (double)*(uint64_t *)(a1 + 48));
      }
      else {
        return (double)*(uint64_t *)(a1 + 48);
      }
    case 2:
      return (double)*(uint64_t *)(a1 + 32);
    case 3:
      return (double)*(uint64_t *)(a1 + 40);
    case 4:
      return (double)*(int *)(a1 + 24);
    case 6:
    case 7:
      return (double)*(int *)(a1 + 56);
    default:
      abort();
  }
}

uint64_t icu::FixedDecimal::longValue(icu::FixedDecimal *this)
{
  int v1 = *((_DWORD *)this + 14);
  if (v1) {
    return (uint64_t)(__exp10((double)v1) * (double)*((uint64_t *)this + 6));
  }
  else {
    return *((void *)this + 6);
  }
}

BOOL icu::FixedDecimal::isNaN(icu::FixedDecimal *this)
{
  return *((unsigned char *)this + 62) != 0;
}

BOOL icu::FixedDecimal::isInfinite(icu::FixedDecimal *this)
{
  return *((unsigned char *)this + 63) != 0;
}

BOOL icu::FixedDecimal::hasIntegerValue(icu::FixedDecimal *this)
{
  return *((unsigned char *)this + 60) != 0;
}

BOOL icu::FixedDecimal::isNanOrInfinity(icu::FixedDecimal *this)
{
  return *((unsigned char *)this + 62) || *((unsigned char *)this + 63) != 0;
}

uint64_t icu::FixedDecimal::getVisibleFractionDigitCount(icu::FixedDecimal *this)
{
  return *((unsigned int *)this + 6);
}

BOOL icu::FixedDecimal::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32)
      && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
}

uint64_t icu::FixedDecimal::toString@<X0>(icu::FixedDecimal *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)__str = 0;
  uint64_t v5 = 0;
  int v6 = 0;
  if (*((_DWORD *)this + 14)) {
    snprintf(__str, 0x14uLL, "%.*fe%d");
  }
  else {
    snprintf(__str, 0x14uLL, "%.*f");
  }
  return icu::UnicodeString::UnicodeString(a2, __str, 0xFFFFFFFFLL, 0);
}

double icu::FixedDecimal::doubleValue(icu::FixedDecimal *this)
{
  if (*((unsigned char *)this + 61)) {
    double v1 = -*((double *)this + 2);
  }
  else {
    double v1 = *((double *)this + 2);
  }
  return v1 * __exp10((double)*((int *)this + 14));
}

icu::PluralAvailableLocalesEnumeration *icu::PluralAvailableLocalesEnumeration::PluralAvailableLocalesEnumeration(icu::PluralAvailableLocalesEnumeration *this, UErrorCode *a2)
{
  uint64_t v4 = icu::StringEnumeration::StringEnumeration((uint64_t)this);
  *(void *)uint64_t v4 = &unk_1EDA51340;
  *(void *)(v4 + 120) = 0;
  uint64_t v5 = (uint64_t *)(v4 + 120);
  *(void *)(v4 + 128) = 0;
  *(UErrorCode *)(v4 + 116) = *a2;
  int v6 = (int *)(v4 + 116);
  if (*(int *)a2 <= 0)
  {
    int *v6 = 0;
    uint64_t v7 = ures_openDirect(0, (uint64_t)"plurals", (uint64_t)v6);
    uint64_t *v5 = ures_getByKey(v7, "locales", 0, v6);
    if (v7) {
      ures_close(v7);
    }
  }
  return this;
}

void icu::PluralAvailableLocalesEnumeration::~PluralAvailableLocalesEnumeration(icu::PluralAvailableLocalesEnumeration *this)
{
  *(void *)this = &unk_1EDA51340;
  ures_close(*((void *)this + 15));
  ures_close(*((void *)this + 16));
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;

  icu::StringEnumeration::~StringEnumeration(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::PluralAvailableLocalesEnumeration::~PluralAvailableLocalesEnumeration(this);

  icu::UMemory::operator delete(v1);
}

const char *icu::PluralAvailableLocalesEnumeration::next(icu::PluralAvailableLocalesEnumeration *this, int *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  UErrorCode v6 = *((_DWORD *)this + 29);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    int v3 = 0;
    *a3 = v6;
    return v3;
  }
  NextResource = ures_getNextResource(*((void *)this + 15), *((void *)this + 16), a3);
  *((void *)this + 16) = NextResource;
  UErrorCode v10 = *a3;
  if (NextResource) {
    BOOL v11 = v10 < U_ILLEGAL_ARGUMENT_ERROR;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11)
  {
    if (v10 == U_INDEX_OUTOFBOUNDS_ERROR)
    {
      int v3 = 0;
      *a3 = U_ZERO_ERROR;
      return v3;
    }
    return 0;
  }
  uint64_t Key = (const char *)ures_getKey((uint64_t)NextResource);
  int v3 = Key;
  if (a2) {
    *a2 = strlen(Key);
  }
  return v3;
}

uint64_t icu::PluralAvailableLocalesEnumeration::reset(uint64_t this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    UErrorCode v2 = *(_DWORD *)(this + 116);
    if (v2 < U_ILLEGAL_ARGUMENT_ERROR) {
      return ures_resetIterator(*(void *)(this + 120));
    }
    else {
      *a2 = v2;
    }
  }
  return this;
}

uint64_t icu::PluralAvailableLocalesEnumeration::count(icu::PluralAvailableLocalesEnumeration *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  UErrorCode v2 = *((_DWORD *)this + 29);
  if (v2 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a2 = v2;
    return 0;
  }
  return ures_getSize(*((void *)this + 15));
}

void sub_18C9A28F0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA514A0;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));

  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18C9A2944(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA514A0;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18C9A299C(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)"N3icu17SharedPluralRulesE" & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu17SharedPluralRulesE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18C9A29F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((unsigned char *)v4 + 12) = 0;
    uint64_t *v4 = (uint64_t)&unk_1EDA514A0;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18C9A2A60(uint64_t a1, char *__dst, int a3)
{
  uint64_t result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18C9A2A9C(void *a1, void *a2)
{
  BOOL result = sub_18C8D893C(a1, a2);
  if (result)
  {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

void *sub_18C9A2AEC()
{
  return &unk_1E919253B;
}

uint64_t sub_18C9A2AF8(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(void *)BOOL result = &unk_1EDA51520;
  *(void *)(result + 8) = &unk_1EDA51588;
  *(void *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

void sub_18C9A2B3C(void *a1)
{
  *a1 = &unk_1EDA51520;
  int v2 = (icu::UnicodeMatcher *)(a1 + 1);
  a1[1] = &unk_1EDA51588;
  uint64_t v3 = a1[2];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::UnicodeMatcher::~UnicodeMatcher(v2);

  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
}

void sub_18C9A2BE4(uint64_t a1)
{
}

void sub_18C9A2BEC(void *a1)
{
  sub_18C9A2B3C(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C9A2C14(uint64_t a1)
{
  sub_18C9A2B3C((void *)(a1 - 8));

  icu::UMemory::operator delete(v1);
}

void *sub_18C9A2C40(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (void *)icu::UMemory::operator new((icu::UMemory *)0x20, a2);
  uint64_t v4 = v3;
  if (v3)
  {
    void *v3 = &unk_1EDA51520;
    v3[1] = &unk_1EDA51588;
    v3[2] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
    v4[3] = *(void *)(a1 + 24);
  }
  return v4;
}

uint64_t sub_18C9A2CE4(uint64_t a1)
{
  if (a1) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_18C9A2CF4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10 = 0;
  int v11 = *a3;
  int v12 = *a3;
  while (1)
  {
    int v13 = v12;
    if (v10 >= *(_DWORD *)(a1 + 28))
    {
LABEL_5:
      if (!a5) {
        goto LABEL_11;
      }
      goto LABEL_6;
    }
    uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, a2, a3, a4, a5);
    if (result != 2) {
      break;
    }
    ++v10;
    int v12 = *a3;
    if (v13 == *a3) {
      goto LABEL_5;
    }
  }
  if (!a5 || result != 1)
  {
    int v13 = *a3;
    if (!a5)
    {
LABEL_11:
      if (v10 >= *(_DWORD *)(a1 + 24)) {
        return 2;
      }
      uint64_t result = 0;
      *a3 = v11;
      return result;
    }
LABEL_6:
    if (v13 == a4) {
      return 1;
    }
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_18C9A2E10(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  return sub_18C9A2CF4(a1 - 8, a2, a3, a4, a5);
}

icu::ICU_Utility *sub_18C9A2E18(uint64_t a1, icu::UnicodeString *this, uint64_t a3)
{
  uint64_t v4 = this;
  unsigned int v6 = *((unsigned __int16 *)this + 4);
  if (v6)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v6 & 0x8000u) == 0) {
      unsigned int v7 = v6 >> 5;
    }
    else {
      unsigned int v7 = *((_DWORD *)this + 3);
    }
    if (v7) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
  (*(void (**)(uint64_t, icu::ICU_Utility *, uint64_t))(*(void *)v8 + 24))(v8, v4, a3);
  int v9 = *(_DWORD *)(a1 + 24);
  if (v9 == 1)
  {
    if (*(_DWORD *)(a1 + 28) == 0x7FFFFFFF)
    {
      __int16 v16 = 43;
      int v11 = &v16;
      return (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)v11, 0, 1);
    }
  }
  else if (!v9)
  {
    int v10 = *(_DWORD *)(a1 + 28);
    if (v10 == 0x7FFFFFFF)
    {
      __int16 v15 = 42;
      int v11 = &v15;
      return (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)v11, 0, 1);
    }
    if (v10 == 1)
    {
      __int16 v14 = 63;
      int v11 = &v14;
      return (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)v11, 0, 1);
    }
  }
  __int16 v17 = 123;
  icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v17, 0, 1);
  icu::ICU_Utility::appendNumber(v4, (icu::UnicodeString *)*(unsigned int *)(a1 + 24), 0xAu, 1);
  __int16 v18 = 44;
  icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v18, 0, 1);
  int v12 = (icu::UnicodeString *)*(unsigned int *)(a1 + 28);
  if (v12 != 0x7FFFFFFF) {
    icu::ICU_Utility::appendNumber(v4, v12, 0xAu, 1);
  }
  __int16 v19 = 125;
  icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v19, 0, 1);
  return v4;
}

icu::ICU_Utility *sub_18C9A2FE0(uint64_t a1, icu::UnicodeString *a2, uint64_t a3)
{
  return sub_18C9A2E18(a1 - 8, a2, a3);
}

BOOL sub_18C9A2FE8(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 24)) {
    return 1;
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16));
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, a2) != 0;
}

BOOL sub_18C9A3070(uint64_t a1, uint64_t a2)
{
  return sub_18C9A2FE8(a1 - 8, a2);
}

uint64_t sub_18C9A3078(uint64_t result)
{
  if (*(_DWORD *)(result + 28))
  {
    double v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(result + 16) + 32))(*(void *)(result + 16))
                             + 40);
    return v1();
  }
  return result;
}

uint64_t sub_18C9A3108(uint64_t a1)
{
  return sub_18C9A3078(a1 - 8);
}

uint64_t sub_18C9A3110(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

double icu::QuantityFormatter::QuantityFormatter(icu::QuantityFormatter *this)
{
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

icu::QuantityFormatter *icu::QuantityFormatter::QuantityFormatter(icu::QuantityFormatter *this, const icu::QuantityFormatter *a2)
{
  for (uint64_t i = 0; i != 64; i += 8)
  {
    uint64_t v5 = *(uint64_t **)((char *)a2 + i);
    if (v5)
    {
      unsigned int v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x48, (unint64_t)a2);
      unsigned int v7 = v6;
      if (v6) {
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v6 + 1), (UChar **)(*(void *)((char *)a2 + i) + 8));
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    *(void *)((char *)this + i) = v7;
  }
  return this;
}

uint64_t icu::QuantityFormatter::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    for (uint64_t i = 0; i != 64; i += 8)
    {
      uint64_t v5 = *(icu::SimpleFormatter **)(a1 + i);
      if (v5)
      {
        icu::SimpleFormatter::~SimpleFormatter(v5);
        icu::UMemory::operator delete(v6);
      }
      unsigned int v7 = *(uint64_t **)(a2 + i);
      if (v7)
      {
        uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x48, a2);
        int v9 = v8;
        if (v8) {
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 1), (UChar **)(*(void *)(a2 + i) + 8));
        }
      }
      else
      {
        int v9 = 0;
      }
      *(void *)(a1 + i) = v9;
    }
  }
  return a1;
}

void icu::QuantityFormatter::~QuantityFormatter(icu::QuantityFormatter *this)
{
  for (uint64_t i = 0; i != 64; i += 8)
  {
    uint64_t v3 = *(icu::SimpleFormatter **)((char *)this + i);
    if (v3)
    {
      icu::SimpleFormatter::~SimpleFormatter(v3);
      icu::UMemory::operator delete(v4);
    }
  }
}

void icu::QuantityFormatter::reset(icu::QuantityFormatter *this)
{
  for (uint64_t i = 0; i != 64; i += 8)
  {
    uint64_t v3 = *(icu::SimpleFormatter **)((char *)this + i);
    if (v3)
    {
      icu::SimpleFormatter::~SimpleFormatter(v3);
      icu::UMemory::operator delete(v4);
    }
    *(void *)((char *)this + i) = 0;
  }
}

uint64_t icu::QuantityFormatter::addIfAbsent(icu::QuantityFormatter *this, icu::StandardPlural *a2, UErrorCode *a3, UErrorCode *a4)
{
  int v7 = icu::StandardPlural::indexFromString(a2, (char *)a4, a3);
  if (*(int *)a4 > 0) {
    return 0;
  }
  int v10 = v7;
  if (*((void *)this + v7)) {
    return 1;
  }
  uint64_t result = (uint64_t)icu::UMemory::operator new(0, (icu::UMemory *)0x48, v8);
  if (result)
  {
    int v11 = (icu::SimpleFormatter *)result;
    *(void *)(result + 8) = &unk_1EDA47700;
    *(_WORD *)(result + 16) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)result, (const icu::UnicodeString *)a3, 0, 1, 0, a4);
    if (*(int *)a4 >= 1)
    {
      icu::SimpleFormatter::~SimpleFormatter(v11);
      icu::UMemory::operator delete(v12);
      return 0;
    }
    *((void *)this + v10) = v11;
    return 1;
  }
  *a4 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

BOOL icu::QuantityFormatter::isValid(icu::QuantityFormatter *this)
{
  return *((void *)this + 5) != 0;
}

uint64_t icu::QuantityFormatter::getByVariant(icu::QuantityFormatter *this, icu::StandardPlural *a2)
{
  int v3 = icu::StandardPlural::indexOrNegativeFromString(a2, (const char *)a2);
  if (v3 < 0) {
    int v4 = 5;
  }
  else {
    int v4 = v3;
  }
  uint64_t result = *((void *)this + v4);
  if (!result) {
    return *((void *)this + 5);
  }
  return result;
}

icu::UnicodeString *icu::QuantityFormatter::format(icu::QuantityFormatter *this, const icu::Formattable *a2, const icu::NumberFormat *a3, const icu::PluralRules *a4, icu::UnicodeString *a5, icu::FieldPosition *a6, UErrorCode *a7)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v20 = 0;
  long long v19 = 0u;
  __int16 v16 = &unk_1EDA47700;
  LOWORD(v17) = 2;
  unsigned int v11 = icu::QuantityFormatter::selectPlural(a2, a3, a4, (const icu::PluralRules *)&v16, a6, a7, a7);
  uint64_t v13 = *(unsigned int *)a7;
  if ((int)v13 <= 0)
  {
    __int16 v14 = (icu::QuantityFormatter *)*((void *)this + v11);
    if (v14 || (__int16 v14 = (icu::QuantityFormatter *)*((void *)this + 5)) != 0)
    {
      icu::QuantityFormatter::format(v14, (const icu::SimpleFormatter *)&v16, a5, a6, a7, v12);
    }
    else
    {
      uint64_t v13 = 27;
      *a7 = U_INVALID_STATE_ERROR;
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v16);
  return a5;
}

uint64_t icu::QuantityFormatter::selectPlural(icu::QuantityFormatter *this, const icu::Formattable *lpsrc, const icu::NumberFormat *a3, const icu::PluralRules *a4, icu::UnicodeString *a5, UErrorCode *a6, UErrorCode *a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 <= 0)
  {
    long long v27 = 0u;
    uint64_t v30 = 0;
    long long v29 = 0u;
    long long v28 = 0u;
    int32_t v26 = &unk_1EDA47700;
    LOWORD(v27) = 2;
    if (v14)
    {
      __int16 v15 = v14;
      uint64_t v25 = 0;
      memset(v24, 0, sizeof(v24));
      icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v24);
      icu::DecimalFormat::formatToDecimalQuantity(v15, this, (icu::number::impl::DecimalQuantity *)v24, a6);
      if (*(int *)a6 > 0)
      {
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v24);
LABEL_6:
        uint64_t v7 = 5;
LABEL_19:
        icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v26);
        return v7;
      }
      icu::PluralRules::select(a3, (const icu::IFixedDecimal *)v24, (icu::UnicodeString *)v23);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v26, (icu::UnicodeString *)v23);
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v23);
      (*(void (**)(icu::DecimalFormat *, icu::QuantityFormatter *, const icu::PluralRules *, icu::UnicodeString *, UErrorCode *))(*(void *)v15 + 40))(v15, this, a4, a5, a6);
      icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v24);
LABEL_16:
      int v21 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)&v26, v19);
      uint64_t v16 = 5;
      if (v21 < 0) {
        uint64_t v7 = 5;
      }
      else {
        uint64_t v7 = v21;
      }
      goto LABEL_19;
    }
    if (icu::Formattable::getType(this) == 1)
    {
      double v17 = *((double *)this + 1);
    }
    else
    {
      if (icu::Formattable::getType(this) == 2)
      {
        icu::PluralRules::select(a3, *((_DWORD *)this + 2), (icu::UnicodeString *)v24);
LABEL_15:
        icu::UnicodeString::operator=((icu::UnicodeString *)&v26, (icu::UnicodeString *)v24);
        icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v24);
        (*(void (**)(const icu::Formattable *, icu::QuantityFormatter *, const icu::PluralRules *, icu::UnicodeString *, UErrorCode *))(*(void *)lpsrc + 40))(lpsrc, this, a4, a5, a6);
        goto LABEL_16;
      }
      if (icu::Formattable::getType(this) != 5)
      {
        uint64_t v16 = 1;
        *a6 = U_ILLEGAL_ARGUMENT_ERROR;
        goto LABEL_6;
      }
      double v17 = (double)*((uint64_t *)this + 1);
    }
    icu::PluralRules::select(a3, v17, (icu::UnicodeString *)v24);
    goto LABEL_15;
  }
  return 5;
}

const icu::UnicodeString *icu::QuantityFormatter::format(icu::QuantityFormatter *this, const icu::SimpleFormatter *a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, UErrorCode *a5, UErrorCode *a6)
{
  if (*(int *)a5 <= 0)
  {
    uint64_t v13 = a2;
    int __b = 0;
    icu::SimpleFormatter::formatAndAppend(this, &v13, 1u, a3, &__b, 1, a5);
    int v8 = *((_DWORD *)a4 + 4);
    if (*(void *)((char *)a4 + 12))
    {
      int v9 = __b;
      if (__b < 0)
      {
        int v10 = 0;
        *((_DWORD *)a4 + 3) = 0;
      }
      else
      {
        *((_DWORD *)a4 + 3) += __b;
        int v10 = v8 + v9;
      }
      *((_DWORD *)a4 + 4) = v10;
    }
  }
  return a3;
}

void *icu::QuantityFormatter::formatAndSelect(void *a1, icu::PluralRules *a2, int *a3, _DWORD *a4, UErrorCode *a5, double a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v32 = 0u;
  uint64_t v35 = 0;
  long long v34 = 0u;
  long long v33 = 0u;
  uint64_t v31 = &unk_1EDA47700;
  LOWORD(v32) = 2;
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v30 = 0;
    memset(v29, 0, sizeof(v29));
    memset(v28, 0, sizeof(v28));
    sub_18C9140A8((uint64_t)v28);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v29, a6);
    __int16 v14 = (icu::number::LocalizedNumberFormatter *)icu::DecimalFormat::toNumberFormatter(v13, a5);
    if (*(int *)a5 > 0
      || (icu::number::LocalizedNumberFormatter::formatImpl(v14, (icu::number::impl::UFormattedNumberData *)v28, a5),
          *(int *)a5 > 0))
    {
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v28);
      return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v31);
    }
    icu::FormattedStringBuilder::operator=((uint64_t)a3, (uint64_t)v28 + 8);
    icu::PluralRules::select(a2, (const icu::IFixedDecimal *)v29, (icu::UnicodeString *)&v23);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v31, (icu::UnicodeString *)&v23);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v23);
    icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v28);
  }
  else
  {
    long long v24 = 0u;
    uint64_t v27 = 0;
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned int v23 = &unk_1EDA47700;
    LOWORD(v24) = 2;
    icu::Formattable::Formattable((icu::Formattable *)v28, a6);
    icu::Format::format((icu::Format *)a1, (const icu::Formattable *)v28, (icu::UnicodeString *)&v23, a5);
    icu::Formattable::~Formattable((icu::Formattable *)v28);
    uint64_t v16 = (void *)*(unsigned int *)a5;
    if ((int)v16 > 0
      || (icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)a3, a3[33], (uint64_t)&v23, 1, 0, a5),
          uint64_t v16 = (void *)*(unsigned int *)a5,
          (int)v16 > 0))
    {
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v23);
      return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v31);
    }
    icu::PluralRules::select(a2, a6, (icu::UnicodeString *)v28);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v31, (icu::UnicodeString *)v28);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v28);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v23);
  }
  int v21 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)&v31, v18);
  if (v21 < 0) {
    uint64_t v15 = 5;
  }
  else {
    uint64_t v15 = v21;
  }
  *a4 = v15;
  return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v31);
}

void *icu::RuleBasedNumberFormat::getStaticClassID(icu::RuleBasedNumberFormat *this)
{
  return &unk_1E919253C;
}

void *icu::RuleBasedNumberFormat::getDynamicClassID(icu::RuleBasedNumberFormat *this)
{
  return &unk_1E919253C;
}

uint64_t sub_18C9A3B44(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a1 != a2)
  {
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
      return 0;
    }
    if (v4 >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        unsigned int v6 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v5);
        uint64_t v7 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v5);
        if (v7 != v6)
        {
          BOOL v8 = !v6 || v7 == 0;
          if (v8 || u_strcmp(v6, v7)) {
            return 0;
          }
        }
        uint64_t v5 = (v5 + 1);
      }
      while (v4 != v5);
    }
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (v9 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 40))(a2)) {
      return 0;
    }
    if (v9 >= 1)
    {
      uint64_t v10 = 0;
      while (1)
      {
        unsigned int v11 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v10);
        uint64_t v12 = (*(uint64_t (**)(uint64_t, const UChar *))(*(void *)a2 + 64))(a2, v11);
        uint64_t v13 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2, v12);
        if (v13 != v11)
        {
          BOOL v14 = !v11 || v13 == 0;
          if (v14 || u_strcmp(v11, v13)) {
            return 0;
          }
        }
        if (v4 >= 1)
        {
          uint64_t v15 = 0;
          do
          {
            uint64_t v16 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 56))(a1, v10, v15);
            double v17 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v12, v15);
            if (v17 != v16)
            {
              BOOL v18 = !v16 || v17 == 0;
              if (v18 || u_strcmp(v16, v17)) {
                return 0;
              }
            }
            uint64_t v15 = (v15 + 1);
          }
          while (v4 != v15);
        }
        uint64_t v10 = (v10 + 1);
        uint64_t result = 1;
        if (v10 == v9) {
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_18C9A3E64(uint64_t a1, const UChar *a2)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 40))(a1) < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v4);
    if (v5 == a2) {
      break;
    }
    if (a2)
    {
      unsigned int v6 = v5;
      if (v5)
      {
        if (!u_strcmp(a2, v5)) {
          break;
        }
      }
    }
    uint64_t v4 = (v4 + 1);
    if ((int)v4 >= (*(int (**)(uint64_t, const UChar *))(*(void *)a1 + 40))(a1, v6)) {
      return 0xFFFFFFFFLL;
    }
  }
  return v4;
}

uint64_t sub_18C9A3F48(uint64_t a1, const UChar *a2)
{
  if (!a2 || (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1) < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v4);
    if (v5 == a2) {
      break;
    }
    unsigned int v6 = v5;
    if (v5)
    {
      if (!u_strcmp(a2, v5)) {
        break;
      }
    }
    uint64_t v4 = (v4 + 1);
    if ((int)v4 >= (*(int (**)(uint64_t, const UChar *))(*(void *)a1 + 24))(a1, v6)) {
      return 0xFFFFFFFFLL;
    }
  }
  return v4;
}

uint64_t *sub_18C9A402C(uint64_t a1, char *a2, int a3)
{
  int v3 = *(int **)(a1 + 40);
  if (*v3 >= 1)
  {
    if (!a2) {
      return 0;
    }
LABEL_3:
    uprv_free(a2);
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)uint64_t v4 = 0xFFFFFFFF00000000;
  *(_WORD *)(v4 + 40) = 0;
  *(_WORD *)(v4 + 8) = 0;
  if (!a2)
  {
    int *v3 = 1;
    return 0;
  }
  if (a3 <= 0)
  {
    int *v3 = 1;
    goto LABEL_3;
  }
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = &a2[2 * a3];
  *(void *)(a1 + 16) = a2;
  *(_WORD *)(a1 + 24) = -1;

  return sub_18C9A40C4(a1);
}

uint64_t *sub_18C9A40C4(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 8);
  int v2 = *(_WORD **)(a1 + 16);
  if ((unint64_t)v2 < v3)
  {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if (v4 == 0xFFFF) {
        uint64_t v4 = (unsigned __int16)*v2;
      }
      BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v4);
      unint64_t v3 = *(void *)(a1 + 8);
      int v2 = *(_WORD **)(a1 + 16);
      if (!isWhiteSpace) {
        break;
      }
      *(void *)(a1 + 16) = ++v2;
      uint64_t v4 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }
    while ((unint64_t)v2 < v3);
  }
  if ((unint64_t)v2 < v3 && (*(_WORD *)(a1 + 24) == 60 || *v2 == 60))
  {
    *(void *)(a1 + 16) = v2 + 1;
    *(_WORD *)(a1 + 24) = -1;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = j__uprv_free_2;
    int v27 = -1;
    while (1)
    {
      uint64_t v6 = sub_18C9A448C(a1, &v27);
      unint64_t v8 = *(void *)(a1 + 8);
      uint64_t v7 = *(unsigned __int16 **)(a1 + 16);
      if ((unint64_t)v7 < v8)
      {
        uint64_t v9 = *(unsigned __int16 *)(a1 + 24);
        do
        {
          if (v9 == 0xFFFF) {
            uint64_t v9 = *v7;
          }
          BOOL v10 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v9);
          unint64_t v8 = *(void *)(a1 + 8);
          uint64_t v7 = *(unsigned __int16 **)(a1 + 16);
          if (!v10) {
            break;
          }
          *(void *)(a1 + 16) = ++v7;
          uint64_t v9 = 0xFFFFLL;
          *(_WORD *)(a1 + 24) = -1;
        }
        while ((unint64_t)v7 < v8);
      }
      if ((unint64_t)v7 >= v8) {
        break;
      }
      if (*(_WORD *)(a1 + 24) == 44)
      {
        BOOL v11 = 1;
        if (!v6) {
          goto LABEL_26;
        }
      }
      else
      {
        BOOL v11 = *v7 == 44;
        if (!v6)
        {
LABEL_26:
          if (!v11) {
            goto LABEL_27;
          }
          goto LABEL_44;
        }
      }
      sub_18C9A4714((uint64_t)&v28, v6, *(int **)(a1 + 40));
      if (!v11) {
        goto LABEL_27;
      }
      *(void *)(a1 + 16) += 2;
      *(_WORD *)(a1 + 24) = -1;
    }
    if (v6) {
      sub_18C9A4714((uint64_t)&v28, v6, *(int **)(a1 + 40));
    }
LABEL_27:
    uint64_t v12 = *(unsigned __int16 **)(a1 + 8);
    uint64_t v13 = *(unsigned __int16 **)(a1 + 16);
    if (v13 < v12)
    {
      uint64_t v14 = *(unsigned __int16 *)(a1 + 24);
      do
      {
        if (v14 == 0xFFFF) {
          uint64_t v14 = *v13;
        }
        BOOL v15 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v14);
        uint64_t v12 = *(unsigned __int16 **)(a1 + 8);
        uint64_t v13 = *(unsigned __int16 **)(a1 + 16);
        if (!v15) {
          break;
        }
        *(void *)(a1 + 16) = ++v13;
        uint64_t v14 = 0xFFFFLL;
        *(_WORD *)(a1 + 24) = -1;
      }
      while (v13 < v12);
    }
    if (v13 >= v12 || *(_WORD *)(a1 + 24) != 62 && *v13 != 62) {
      goto LABEL_44;
    }
    uint64_t v16 = v13 + 1;
    for (*(void *)(a1 + 16) = v16; ; *(void *)(a1 + 16) = v16)
    {
      *(_WORD *)(a1 + 24) = -1;
      if (v16 >= v12) {
        break;
      }
      BOOL v17 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)*v16);
      uint64_t v12 = *(unsigned __int16 **)(a1 + 8);
      uint64_t v16 = *(unsigned __int16 **)(a1 + 16);
      if (!v17) {
        break;
      }
      ++v16;
    }
    if (v16 != v12)
    {
LABEL_44:
      sub_18C9A439C(a1);
      uint64_t v20 = 0;
      goto LABEL_45;
    }
    sub_18C9A4714((uint64_t)&v28, 0, *(int **)(a1 + 40));
    long long v19 = (uint64_t *)**(unsigned int **)(a1 + 40);
    if ((int)v19 > 0)
    {
      sub_18C9A89EC((uint64_t)&v28);
      goto LABEL_43;
    }
    int v22 = HIDWORD(v29);
    uint64_t v23 = v28;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    long long v24 = icu::UMemory::operator new(v19, (icu::UMemory *)0x28, v18);
    uint64_t v20 = v24;
    if (v24)
    {
      uint64_t v25 = *(void *)a1;
      int v26 = v27 - 2;
      *((_DWORD *)v24 + 2) = 0;
      uint64_t *v24 = (uint64_t)&unk_1EDA51600;
      void v24[2] = v25;
      v24[3] = v23;
      *((_DWORD *)v24 + 8) = v26;
      *((_DWORD *)v24 + 9) = v22 - 2;
    }
LABEL_45:
    sub_18C9A89EC((uint64_t)&v28);
  }
  else
  {
LABEL_43:
    sub_18C9A439C(a1);
    return 0;
  }
  return v20;
}

void sub_18C9A439C(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if ((unint64_t)(v2 - 34) >= *(void *)a1) {
      unint64_t v3 = (const UChar *)(v2 - 34);
    }
    else {
      unint64_t v3 = *(const UChar **)a1;
    }
    uint64_t v4 = (const UChar *)(v2 - 2);
    while (v4 >= v3)
    {
      if (!*v4--)
      {
        unint64_t v3 = v4 + 2;
        break;
      }
    }
    if ((unint64_t)(v2 + 30) <= *(void *)(a1 + 8)) {
      uint64_t v6 = v2 + 30;
    }
    else {
      uint64_t v6 = *(void *)(a1 + 8);
    }
    u_strncpy((UChar *)(*(void *)(a1 + 32) + 8), v3, (unint64_t)(v2 - (void)v3) >> 1);
    uint64_t v7 = *(void *)(a1 + 32);
    unint64_t v8 = *(const UChar **)(a1 + 16);
    *(_WORD *)(v7 + (char *)v8 - (char *)v3 + 8) = 0;
    u_strncpy((UChar *)(v7 + 40), v8, (unint64_t)(v6 - (void)v8) >> 1);
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 16);
    *(_WORD *)(v9 + v6 - v10 + 40) = 0;
    BOOL v11 = *(UChar **)a1;
    *(_DWORD *)(v9 + 4) = (unint64_t)(v10 - *(void *)a1) >> 1;
    uprv_free(v11);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    uint64_t v12 = *(int **)(a1 + 40);
    if (*v12 <= 0) {
      int *v12 = 9;
    }
  }
}

uint64_t sub_18C9A448C(uint64_t a1, _DWORD *a2)
{
  if (**(int **)(a1 + 40) > 0) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  if ((unint64_t)v4 < v5)
  {
    uint64_t v6 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if (v6 == 0xFFFF) {
        uint64_t v6 = (unsigned __int16)*v4;
      }
      BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v6);
      unint64_t v5 = *(void *)(a1 + 8);
      uint64_t v4 = *(_WORD **)(a1 + 16);
      if (!isWhiteSpace) {
        break;
      }
      *(void *)(a1 + 16) = ++v4;
      uint64_t v6 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }
    while ((unint64_t)v4 < v5);
  }
  if ((unint64_t)v4 >= v5 || *(_WORD *)(a1 + 24) != 60 && *v4 != 60)
  {
    sub_18C9A439C(a1);
    return 0;
  }
  *(void *)(a1 + 16) = v4 + 1;
  *(_WORD *)(a1 + 24) = -1;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  while (1)
  {
    unint64_t v8 = sub_18C9A47D8(a1);
    unint64_t v10 = *(void *)(a1 + 8);
    uint64_t v9 = *(unsigned __int16 **)(a1 + 16);
    if ((unint64_t)v9 < v10)
    {
      uint64_t v11 = *(unsigned __int16 *)(a1 + 24);
      do
      {
        if (v11 == 0xFFFF) {
          uint64_t v11 = *v9;
        }
        BOOL v12 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v11);
        unint64_t v10 = *(void *)(a1 + 8);
        uint64_t v9 = *(unsigned __int16 **)(a1 + 16);
        if (!v12) {
          break;
        }
        *(void *)(a1 + 16) = ++v9;
        uint64_t v11 = 0xFFFFLL;
        *(_WORD *)(a1 + 24) = -1;
      }
      while ((unint64_t)v9 < v10);
    }
    if ((unint64_t)v9 >= v10) {
      break;
    }
    if (*(_WORD *)(a1 + 24) == 44)
    {
      BOOL v13 = 1;
      if (!v8) {
        goto LABEL_30;
      }
    }
    else
    {
      BOOL v13 = *v9 == 44;
      if (!v8)
      {
LABEL_30:
        if (!v13) {
          goto LABEL_31;
        }
        goto LABEL_44;
      }
    }
    sub_18C9A4714((uint64_t)&v21, (uint64_t)v8, *(int **)(a1 + 40));
    if (!v13) {
      goto LABEL_31;
    }
    *(void *)(a1 + 16) += 2;
    *(_WORD *)(a1 + 24) = -1;
  }
  if (v8) {
    sub_18C9A4714((uint64_t)&v21, (uint64_t)v8, *(int **)(a1 + 40));
  }
LABEL_31:
  unint64_t v17 = *(void *)(a1 + 8);
  uint64_t v16 = *(_WORD **)(a1 + 16);
  if ((unint64_t)v16 < v17)
  {
    uint64_t v18 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if (v18 == 0xFFFF) {
        uint64_t v18 = (unsigned __int16)*v16;
      }
      BOOL v19 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v18);
      unint64_t v17 = *(void *)(a1 + 8);
      uint64_t v16 = *(_WORD **)(a1 + 16);
      if (!v19) {
        break;
      }
      *(void *)(a1 + 16) = ++v16;
      uint64_t v18 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }
    while ((unint64_t)v16 < v17);
  }
  if ((unint64_t)v16 >= v17
    || *(_WORD *)(a1 + 24) != 62 && *v16 != 62
    || (*(void *)(a1 + 16) = v16 + 1,
        *(_WORD *)(a1 + 24) = -1,
        sub_18C9A4714((uint64_t)&v21, 0, *(int **)(a1 + 40)),
        uint64_t v20 = *(int **)(a1 + 40),
        *v20 > 0))
  {
LABEL_44:
    sub_18C9A439C(a1);
    uint64_t v14 = 0;
    goto LABEL_45;
  }
  if (*a2 == -1)
  {
    *a2 = HIDWORD(v22) + 1;
  }
  else if (HIDWORD(v22) != *a2)
  {
    *uint64_t v20 = 1;
    goto LABEL_44;
  }
  uint64_t v14 = v21;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
LABEL_45:
  sub_18C9A89EC((uint64_t)&v21);
  return v14;
}

void sub_18C9A4714(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    int v5 = *(_DWORD *)(a1 + 12);
    if (v5 != *(_DWORD *)(a1 + 8))
    {
LABEL_13:
      uint64_t v11 = *(void **)a1;
      *(_DWORD *)(a1 + 12) = v5 + 1;
      v11[v5] = a2;
      return;
    }
    int v7 = v5 + 256;
    if (v5 <= 255) {
      int v7 = 2 * v5;
    }
    if (v5) {
      int v8 = v7;
    }
    else {
      int v8 = 1;
    }
    *(_DWORD *)(a1 + 8) = v8;
    uint64_t v9 = *(void **)a1;
    if (*(void *)a1) {
      unint64_t v10 = (char *)uprv_realloc(v9, 8 * v8);
    }
    else {
      unint64_t v10 = (char *)uprv_malloc(8 * v8);
    }
    *(void *)a1 = v10;
    if (v10)
    {
      bzero(&v10[8 * *(int *)(a1 + 12)], 8 * (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 12)));
      int v5 = *(_DWORD *)(a1 + 12);
      goto LABEL_13;
    }
    *a3 = 7;
  }
}

unsigned __int16 *sub_18C9A47D8(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int16 **)(a1 + 8);
  unint64_t v3 = *(unsigned __int16 **)(a1 + 16);
  if (v3 < v2)
  {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if (v4 == 0xFFFF) {
        uint64_t v4 = *v3;
      }
      BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v4);
      uint64_t v2 = *(unsigned __int16 **)(a1 + 8);
      unint64_t v3 = *(unsigned __int16 **)(a1 + 16);
      if (!isWhiteSpace) {
        break;
      }
      *(void *)(a1 + 16) = ++v3;
      uint64_t v4 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }
    while (v3 < v2);
  }
  if (v3 >= v2) {
    return 0;
  }
  int v6 = *v3;
  if (v6 == 39 || v6 == 34)
  {
    *(void *)(a1 + 16) = ++v3;
    *(_WORD *)(a1 + 24) = -1;
    if (v6 == 34) {
      int v7 = "\"";
    }
    else {
      int v7 = (const char *)L"'";
    }
  }
  else
  {
    int v7 = " ";
  }
  int v8 = v3;
  if (v3 < v2)
  {
    int v9 = *(unsigned __int16 *)v7;
    int v8 = v3;
    while (1)
    {
      int v10 = *v8;
      uint64_t v11 = v7;
      if (v9 == 32)
      {
        BOOL v12 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)*v8);
        uint64_t v11 = v7;
        if (v12) {
          break;
        }
      }
      do
      {
        int v14 = *(unsigned __int16 *)v11;
        v11 += 2;
        int v13 = v14;
        if (v14) {
          BOOL v15 = v13 == v10;
        }
        else {
          BOOL v15 = 1;
        }
      }
      while (!v15);
      int v8 = *(unsigned __int16 **)(a1 + 16);
      if (v13 != v10)
      {
        *(void *)(a1 + 16) = ++v8;
        if ((unint64_t)v8 < *(void *)(a1 + 8)) {
          continue;
        }
      }
      goto LABEL_27;
    }
    int v8 = *(unsigned __int16 **)(a1 + 16);
LABEL_27:
    uint64_t v2 = *(unsigned __int16 **)(a1 + 8);
  }
  if (v8 == v2) {
    goto LABEL_41;
  }
  unsigned int v16 = *v8;
  if (v8 <= v3)
  {
    uint64_t result = 0;
  }
  else
  {
    *(_WORD *)(a1 + 24) = v16;
    *int v8 = 0;
    uint64_t result = v3;
  }
  if (v6 == 39 || v6 == 34)
  {
    if (v16 == v6 && v8 != v3)
    {
      *(void *)(a1 + 16) = v8 + 1;
      *(_WORD *)(a1 + 24) = -1;
      return result;
    }
    goto LABEL_41;
  }
  BOOL v18 = v16 > 0x3C;
  uint64_t v19 = (1 << v16) & 0x1000008400000000;
  if (!v18 && v19 != 0)
  {
LABEL_41:
    sub_18C9A439C(a1);
    return 0;
  }
  return result;
}

uint64_t *sub_18C9A4994(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
  int v6 = (__int16)v5;
  unsigned int v7 = v5 >> 5;
  int v8 = v6 >= 0 ? v7 : *(_DWORD *)(a1 + 12);
  if (!v8) {
    return 0;
  }
  uint64_t result = (uint64_t *)uprv_malloc(2 * v8);
  if (result)
  {
    uint64_t v11 = (char *)result;
    unsigned int v16 = (UChar *)result;
    icu::UnicodeString::extract(a1, &v16, v8, a3);
    if (*a3 <= 0) {
      *a3 = 0;
    }
    long long v12 = 0u;
    long long v13 = 0u;
    WORD4(v13) = -1;
    uint64_t v14 = a2;
    BOOL v15 = a3;
    return sub_18C9A402C((uint64_t)&v12, v11, v8);
  }
  else
  {
    *a3 = 7;
  }
  return result;
}

void *sub_18C9A4A78(void *a1)
{
  *a1 = &unk_1EDA51600;
  uint64_t v2 = (void **)a1[3];
  unint64_t v3 = *v2;
  if (!*v2) {
    goto LABEL_5;
  }
  uint64_t v4 = v2 + 1;
  do
  {
    uprv_free(v3);
    unsigned int v5 = *v4++;
    unint64_t v3 = v5;
  }
  while (v5);
  uint64_t v2 = (void **)a1[3];
  if (v2) {
LABEL_5:
  }
    uprv_free(v2);
  int v6 = (void *)a1[2];
  if (v6) {
    uprv_free(v6);
  }
  return a1;
}

void sub_18C9A4AF4(void *a1)
{
  double v1 = sub_18C9A4A78(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9A4B1C(void **a1, int a2)
{
  if (a2 < 0) {
    return 0;
  }
  if (((int (*)(void **))(*a1)[3])(a1) <= a2) {
    return 0;
  }
  return *(void *)(*a1[3] + 8 * a2);
}

uint64_t sub_18C9A4B90(void *a1, int a2)
{
  if (a2 < 0) {
    return 0;
  }
  if ((*(int (**)(void *))(*a1 + 40))(a1) <= a2) {
    return 0;
  }
  return **(void **)(a1[3] + 8 * (a2 + 1));
}

uint64_t sub_18C9A4C08(void *a1, int a2, int a3)
{
  if (a2 < 0) {
    return 0;
  }
  int v6 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  uint64_t result = 0;
  if ((a3 & 0x80000000) == 0 && v6 > a2)
  {
    if ((*(int (**)(void *))(*a1 + 24))(a1) <= a3) {
      return 0;
    }
    else {
      return *(void *)(*(void *)(a1[3] + 8 * (a2 + 1)) + 8 * (a3 + 1));
    }
  }
  return result;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this, UChar **a2, const icu::UnicodeString *a3, const icu::Locale *a4, UParseError *a5, UErrorCode *a6)
{
  icu::NumberFormat::NumberFormat(this);
  *(void *)uint64_t v12 = &unk_1EDA51660;
  *(void *)(v12 + 384) = 0;
  *(_OWORD *)(v12 + 360) = 0u;
  *((_DWORD *)this + 94) = 0;
  icu::Locale::Locale((icu::Locale *)(v12 + 392), (uint64_t)a4);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((unsigned char *)this + 652) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((void *)this + 84) = &unk_1EDA47700;
  *((_WORD *)this + 340) = 2;
  *((_WORD *)this + 368) = 0;
  *((unsigned char *)this + 738) = 0;
  *((void *)this + 93) = 0;
  long long v13 = sub_18C9A4994((uint64_t)a3, (uint64_t)a5, (int *)a6);
  icu::RuleBasedNumberFormat::init(this, a2, v13, (uint64_t)a5, a6);
  return this;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::init(icu::RuleBasedNumberFormat *result, UChar **a2, _DWORD *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  *(void *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if (*(int *)a5 <= 0)
  {
    uint64_t v8 = (uint64_t)result;
    icu::RuleBasedNumberFormat::initializeDecimalFormatSymbols(result, a5);
    icu::RuleBasedNumberFormat::initializeDefaultInfinityRule((icu::RuleBasedNumberFormat *)v8, a5);
    uint64_t result = (icu::RuleBasedNumberFormat *)icu::RuleBasedNumberFormat::initializeDefaultNaNRule((icu::RuleBasedNumberFormat *)v8, a5);
    if (*(int *)a5 <= 0)
    {
      if (a3) {
        ++a3[2];
      }
      *(void *)(v8 + 664) = a3;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      int v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v80, a2);
      int v10 = WORD4(v80) >> 5;
      if (SWORD4(v80) < 0) {
        int v10 = HIDWORD(v80);
      }
      if (!v10) {
        goto LABEL_128;
      }
      icu::RuleBasedNumberFormat::stripWhitespace(v9, (icu::UnicodeString *)&v80);
      if (SWORD4(v80) < 0)
      {
        int v12 = HIDWORD(v80);
        int v11 = HIDWORD(v80) & (SHIDWORD(v80) >> 31);
      }
      else
      {
        int v11 = 0;
        int v12 = WORD4(v80) >> 5;
      }
      uint64_t v13 = icu::UnicodeString::indexOf((uint64_t)&v80, (uint64_t)"%", 0, -1, v11, v12 - v11);
      if (v13 == -1) {
        goto LABEL_60;
      }
      uint64_t v14 = v13;
      if (v13)
      {
        unsigned int v17 = v13 - 1;
        unsigned int v15 = WORD4(v80) >> 5;
        int v18 = HIDWORD(v80);
        if ((SWORD4(v80) & 0x8000u) == 0) {
          unsigned int v19 = WORD4(v80) >> 5;
        }
        else {
          unsigned int v19 = HIDWORD(v80);
        }
        if (v19 <= v17) {
          goto LABEL_60;
        }
        unint64_t v20 = (unint64_t)&v80 | 0xA;
        if ((BYTE8(v80) & 2) == 0) {
          unint64_t v20 = *((void *)&v81 + 1);
        }
        if (*(_WORD *)(v20 + 2 * (int)v17) != 59) {
          goto LABEL_60;
        }
        if ((v13 & 0x80000000) != 0)
        {
          int v21 = 0;
          int v16 = 0;
          if ((WORD4(v80) & 0x8000) == 0) {
            goto LABEL_33;
          }
          goto LABEL_32;
        }
        if ((WORD4(v80) & 0x8000) == 0)
        {
LABEL_15:
          if (v15 >= v13) {
            int v16 = v13;
          }
          else {
            int v16 = v15;
          }
          goto LABEL_33;
        }
      }
      else
      {
        if ((SWORD4(v80) & 0x80000000) == 0)
        {
          unsigned int v15 = WORD4(v80) >> 5;
          goto LABEL_15;
        }
        int v18 = HIDWORD(v80);
      }
      if (v18 >= (int)v13) {
        int v21 = v13;
      }
      else {
        int v21 = v18;
      }
LABEL_32:
      int v16 = v21;
      unsigned int v15 = v18;
LABEL_33:
      int v22 = icu::UnicodeString::indexOf((uint64_t)&v80, (uint64_t)L";%", 0, 2, v16, v15 - v16);
      if (v22 == -1)
      {
        int v23 = WORD4(v80) >> 5;
        if (SWORD4(v80) < 0) {
          int v23 = HIDWORD(v80);
        }
        int v22 = v23 - 1;
      }
      unsigned int v24 = u_strlen((const UChar *)"%") + v14;
      uint64_t v25 = 2 * (int)v24;
      do
      {
        if ((SWORD4(v80) & 0x8000u) == 0) {
          unsigned int v26 = WORD4(v80) >> 5;
        }
        else {
          unsigned int v26 = HIDWORD(v80);
        }
        if (v26 <= v24)
        {
          uint64_t v28 = 0xFFFFLL;
        }
        else
        {
          if ((BYTE8(v80) & 2) != 0) {
            unint64_t v27 = (unint64_t)&v80 | 0xA;
          }
          else {
            unint64_t v27 = *((void *)&v81 + 1);
          }
          uint64_t v28 = *(unsigned __int16 *)(v27 + v25);
        }
        v25 += 2;
        ++v24;
      }
      while (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v28));
      uint64_t v31 = icu::UMemory::operator new(v30, (icu::UMemory *)0x40, v29);
      if (!v31)
      {
        *(void *)(v8 + 656) = 0;
        goto LABEL_128;
      }
      long long v32 = v31;
      int v33 = v24 - 1;
      *uint64_t v31 = (uint64_t)&unk_1EDA47700;
      *((_WORD *)v31 + 4) = 2;
      *(void *)(v8 + 656) = v31;
      uint64_t v34 = v22 - v24 + 1;
      icu::UnicodeString::unBogus((uint64_t)v31);
      if ((__int16)v32[1] < 0) {
        uint64_t v35 = *((unsigned int *)v32 + 3);
      }
      else {
        uint64_t v35 = *((unsigned __int16 *)v32 + 4) >> 5;
      }
      icu::UnicodeString::doReplace((icu::UnicodeString *)v32, 0, v35, (const icu::UnicodeString *)&v80, v33, v34);
      if ((int)v14 <= 0 && v22 - v14 == 2147483646)
      {
        if (BYTE8(v80)) {
          unsigned int v36 = 2;
        }
        else {
          unsigned int v36 = BYTE8(v80) & 0x1F;
        }
        WORD4(v80) = v36;
        int32_t v37 = (_DWORD *)(v8 + 376);
        *(_DWORD *)(v8 + 376) = 0;
        goto LABEL_62;
      }
      icu::UnicodeString::doReplace((uint64_t)&v80, v14, (v22 - v14 + 1), 0, 0, 0);
LABEL_60:
      unsigned int v36 = SWORD4(v80);
      int32_t v37 = (_DWORD *)(v8 + 376);
      *(_DWORD *)(v8 + 376) = 0;
      if ((v36 & 0x80000000) != 0)
      {
        unsigned int v39 = HIDWORD(v80);
        int v38 = HIDWORD(v80) & (SHIDWORD(v80) >> 31);
LABEL_64:
        for (int i = icu::UnicodeString::indexOf((uint64_t)&v80, (uint64_t)L";%", 0, 2, v38, v39 - v38);
              i != -1;
              int i = icu::UnicodeString::indexOf((uint64_t)&v80, (uint64_t)L";%", 0, 2, v41, v42 - v41))
        {
          ++*v37;
          if (i >= -1)
          {
            int v43 = i + 1;
            if ((WORD4(v80) & 0x8000) != 0)
            {
              unsigned int v42 = HIDWORD(v80);
              if (SHIDWORD(v80) >= v43) {
                int v41 = i + 1;
              }
              else {
                int v41 = HIDWORD(v80);
              }
            }
            else
            {
              unsigned int v42 = WORD4(v80) >> 5;
              if (v42 >= v43) {
                int v41 = i + 1;
              }
              else {
                int v41 = WORD4(v80) >> 5;
              }
            }
          }
          else
          {
            int v41 = 0;
            if ((WORD4(v80) & 0x8000) != 0) {
              unsigned int v42 = HIDWORD(v80);
            }
            else {
              unsigned int v42 = WORD4(v80) >> 5;
            }
          }
        }
        int v44 = *(_DWORD *)(v8 + 376);
        *(_DWORD *)(v8 + 376) = v44 + 1;
        uint64_t v45 = uprv_malloc(8 * (v44 + 2));
        *(void *)(v8 + 360) = v45;
        if (v45)
        {
          uint64_t v47 = *v37;
          uint64_t v48 = (int)v47;
          if ((v47 & 0x80000000) == 0)
          {
            uint64_t v49 = 0;
            uint64_t v50 = 8 * v47 + 8;
            do
            {
              *(void *)(*(void *)(v8 + 360) + v49) = 0;
              v49 += 8;
            }
            while (v50 != v49);
            if (!v48)
            {
              uint64_t v68 = 1;
LABEL_129:
              *a5 = v68;
              return (icu::RuleBasedNumberFormat *)icu::UnicodeString::~UnicodeString((void *)v68, (icu::UnicodeString *)&v80);
            }
          }
          if ((int)v48 < 0) {
            uint64_t v51 = -1;
          }
          else {
            uint64_t v51 = (v48 << 6) | 0x10;
          }
          uint64_t v52 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v51, v46);
          if (v52)
          {
            *uint64_t v52 = 64;
            v52[1] = v48;
            long long v53 = v52 + 2;
            uint64_t v54 = v52 + 2;
            do
            {
              *uint64_t v54 = &unk_1EDA47700;
              *((_WORD *)v54 + 4) = 2;
              v53 += 8;
              v54 += 8;
            }
            while (v54 != &v52[8 * v48 + 2]);
            *(void *)(v8 + 368) = v52 + 2;
            int v55 = sub_18C9A759C((uint64_t)&v80, (uint64_t)L";%", 2, 0);
            if (v55 == -1)
            {
              LODWORD(v58) = 0;
              int v59 = 0;
LABEL_112:
              int v69 = WORD4(v80) >> 5;
              if (SWORD4(v80) < 0) {
                int v69 = HIDWORD(v80);
              }
              sub_18C9215F8(*(void *)(v8 + 368) + ((unint64_t)v58 << 6), (const icu::UnicodeString *)&v80, v59, (v69 - v59));
              v72 = icu::UMemory::operator new(v71, (icu::UMemory *)0xA8, v70);
              if (v72) {
                v72 = (uint64_t *)sub_18C9572A0((uint64_t)v72, v8, *(void *)(v8 + 368), v58, (int *)a5);
              }
              *(void *)(*(void *)(v8 + 360) + 8 * v58) = v72;
              if (*(void *)(*(void *)(v8 + 360) + 8 * v58))
              {
                icu::RuleBasedNumberFormat::initDefaultRuleSet((void *)v8);
                if (*(int *)(v8 + 376) >= 1)
                {
                  uint64_t v73 = 0;
                  uint64_t v74 = 0;
                  do
                  {
                    sub_18C9572A4(*(char **)(*(void *)(v8 + 360) + 8 * v74++), *(void *)(v8 + 368) + v73, a5);
                    v73 += 64;
                  }
                  while (v74 < *(int *)(v8 + 376));
                }
                if (a3 && (*(int (**)(_DWORD *))(*(void *)a3 + 24))(a3) >= 1)
                {
                  uint64_t v75 = 0;
                  while (1)
                  {
                    memset(v79, 0, sizeof(v79));
                    uint64_t v78 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a3 + 32))(a3, v75);
                    icu::UnicodeString::UnicodeString(v79, 1, &v78);
                    uint64_t RuleSet = icu::RuleBasedNumberFormat::findRuleSet((icu::RuleBasedNumberFormat *)v8, (const icu::UnicodeString *)v79, a5);
                    if (!RuleSet) {
                      break;
                    }
                    if (!v75) {
                      *(void *)(v8 + 384) = RuleSet;
                    }
                    icu::UnicodeString::~UnicodeString(v77, (icu::UnicodeString *)v79);
                    uint64_t v75 = (v75 + 1);
                    if ((int)v75 >= (*(int (**)(_DWORD *))(*(void *)a3 + 24))(a3)) {
                      goto LABEL_135;
                    }
                  }
                  icu::UnicodeString::~UnicodeString(v77, (icu::UnicodeString *)v79);
                }
LABEL_135:
                icu::UnicodeString::operator=((UChar **)(v8 + 672), a2);
                return (icu::RuleBasedNumberFormat *)icu::UnicodeString::~UnicodeString((void *)v68, (icu::UnicodeString *)&v80);
              }
            }
            else
            {
              int v56 = v55;
              uint64_t v57 = 0;
              uint64_t v58 = 0;
              int v59 = 0;
              while (1)
              {
                int v60 = v59;
                uint64_t v61 = *(void *)(v8 + 368) + v57;
                icu::UnicodeString::unBogus(v61);
                if (*(__int16 *)(v61 + 8) < 0) {
                  uint64_t v62 = *(unsigned int *)(v61 + 12);
                }
                else {
                  uint64_t v62 = *(unsigned __int16 *)(v61 + 8) >> 5;
                }
                int v59 = v56 + 1;
                icu::UnicodeString::doReplace((icu::UnicodeString *)v61, 0, v62, (const icu::UnicodeString *)&v80, v60, (v56 + 1 - v60));
                uint64_t v65 = icu::UMemory::operator new(v64, (icu::UMemory *)0xA8, v63);
                if (v65) {
                  uint64_t v65 = (uint64_t *)sub_18C9572A0((uint64_t)v65, v8, *(void *)(v8 + 368), v58, (int *)a5);
                }
                *(void *)(*(void *)(v8 + 360) + 8 * v58) = v65;
                if (!*(void *)(*(void *)(v8 + 360) + 8 * v58)) {
                  break;
                }
                if (v56 >= -1)
                {
                  if ((WORD4(v80) & 0x8000) != 0)
                  {
                    unsigned int v67 = HIDWORD(v80);
                    if (SHIDWORD(v80) >= v59) {
                      int v66 = v56 + 1;
                    }
                    else {
                      int v66 = HIDWORD(v80);
                    }
                  }
                  else
                  {
                    unsigned int v67 = WORD4(v80) >> 5;
                    if (v67 >= v59) {
                      int v66 = v56 + 1;
                    }
                    else {
                      int v66 = WORD4(v80) >> 5;
                    }
                  }
                }
                else
                {
                  int v66 = 0;
                  if ((WORD4(v80) & 0x8000) != 0) {
                    unsigned int v67 = HIDWORD(v80);
                  }
                  else {
                    unsigned int v67 = WORD4(v80) >> 5;
                  }
                }
                int v56 = icu::UnicodeString::indexOf((uint64_t)&v80, (uint64_t)L";%", 0, 2, v66, v67 - v66);
                v57 += 64;
                ++v58;
                if (v56 == -1) {
                  goto LABEL_112;
                }
              }
            }
          }
          else
          {
            *(void *)(v8 + 368) = 0;
          }
        }
LABEL_128:
        uint64_t v68 = 7;
        goto LABEL_129;
      }
      unsigned int v36 = (unsigned __int16)v36;
LABEL_62:
      int v38 = 0;
      unsigned int v39 = v36 >> 5;
      goto LABEL_64;
    }
  }
  return result;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this, UChar **a2, const icu::UnicodeString *a3, UParseError *a4, UErrorCode *a5)
{
  icu::NumberFormat::NumberFormat(this);
  *(void *)uint64_t v10 = &unk_1EDA51660;
  *(void *)(v10 + 384) = 0;
  int v11 = (icu::Locale *)(v10 + 392);
  *(_OWORD *)(v10 + 360) = 0u;
  *(_DWORD *)(v10 + 376) = 0;
  Default = icu::Locale::getDefault((icu::Locale *)v10);
  icu::Locale::Locale(v11, (uint64_t)Default);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((unsigned char *)this + 652) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((void *)this + 84) = &unk_1EDA47700;
  *((_WORD *)this + 340) = 2;
  *((_WORD *)this + 368) = 0;
  *((unsigned char *)this + 738) = 0;
  *((void *)this + 93) = 0;
  uint64_t v13 = sub_18C9A4994((uint64_t)a3, (uint64_t)a4, (int *)a5);
  icu::RuleBasedNumberFormat::init(this, a2, v13, (uint64_t)a4, a5);
  return this;
}

uint64_t icu::RuleBasedNumberFormat::RuleBasedNumberFormat(uint64_t a1, UChar **a2, _DWORD *a3, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  icu::NumberFormat::NumberFormat((icu::NumberFormat *)a1);
  *(void *)uint64_t v12 = &unk_1EDA51660;
  *(void *)(v12 + 384) = 0;
  *(_OWORD *)(v12 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 0;
  icu::Locale::Locale((icu::Locale *)(v12 + 392), a4);
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = 7;
  *(unsigned char *)(a1 + 652) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 672) = &unk_1EDA47700;
  *(_WORD *)(a1 + 680) = 2;
  *(_WORD *)(a1 + 736) = 0;
  *(unsigned char *)(a1 + 738) = 0;
  *(void *)(a1 + 744) = 0;
  icu::RuleBasedNumberFormat::init((icu::RuleBasedNumberFormat *)a1, a2, a3, a5, a6);
  return a1;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  icu::NumberFormat::NumberFormat(this);
  *(void *)uint64_t v8 = &unk_1EDA51660;
  *(void *)(v8 + 384) = 0;
  int v9 = (icu::Locale *)(v8 + 392);
  *(_OWORD *)(v8 + 360) = 0u;
  *(_DWORD *)(v8 + 376) = 0;
  Default = icu::Locale::getDefault((icu::Locale *)v8);
  icu::Locale::Locale(v9, (uint64_t)Default);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((unsigned char *)this + 652) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((void *)this + 84) = &unk_1EDA47700;
  *((_WORD *)this + 340) = 2;
  *((_WORD *)this + 368) = 0;
  *((unsigned char *)this + 738) = 0;
  *((void *)this + 93) = 0;
  icu::RuleBasedNumberFormat::init(this, a2, 0, (uint64_t)a3, a4);
  return this;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this, UChar **a2, const icu::Locale *a3, UParseError *a4, UErrorCode *a5)
{
  icu::NumberFormat::NumberFormat(this);
  *(void *)uint64_t v10 = &unk_1EDA51660;
  *(void *)(v10 + 384) = 0;
  *(_OWORD *)(v10 + 360) = 0u;
  *((_DWORD *)this + 94) = 0;
  icu::Locale::Locale((icu::Locale *)(v10 + 392), (uint64_t)a3);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((unsigned char *)this + 652) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((void *)this + 84) = &unk_1EDA47700;
  *((_WORD *)this + 340) = 2;
  *((_WORD *)this + 368) = 0;
  *((unsigned char *)this + 738) = 0;
  *((void *)this + 93) = 0;
  icu::RuleBasedNumberFormat::init(this, a2, 0, (uint64_t)a4, a5);
  return this;
}

uint64_t icu::RuleBasedNumberFormat::RuleBasedNumberFormat(uint64_t a1, unsigned int a2, uint64_t a3, int *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  icu::NumberFormat::NumberFormat((icu::NumberFormat *)a1);
  *(void *)uint64_t v8 = &unk_1EDA51660;
  *(void *)(v8 + 384) = 0;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 0;
  icu::Locale::Locale((icu::Locale *)(v8 + 392), a3);
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = 7;
  *(unsigned char *)(a1 + 652) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 672) = &unk_1EDA47700;
  *(_WORD *)(a1 + 680) = 2;
  *(_WORD *)(a1 + 736) = 0;
  *(unsigned char *)(a1 + 738) = 0;
  *(void *)(a1 + 744) = 0;
  if (*a4 <= 0)
  {
    if (a2 >= 4)
    {
      *a4 = 1;
    }
    else
    {
      int v9 = off_1E550CF80[a2];
      uint64_t v10 = ures_open("icudt74l-rbnf", *(char **)(a1 + 432), a4);
      uint64_t v11 = v10;
      if (*a4 <= 0)
      {
        LocaleByType = (const char *)ures_getLocaleByType(v10, 1, a4);
        uint64_t v13 = (const char *)ures_getLocaleByType(v11, 0, a4);
        icu::Format::setLocaleIDs((icu::Format *)a1, LocaleByType, v13);
        uint64_t v14 = ures_getByKeyWithFallback(v11, "RBNFRules", 0, (UErrorCode *)a4);
        if (*a4 >= 1) {
          ures_close(v11);
        }
        uint64_t v15 = ures_getByKeyWithFallback(v14, v9, 0, (UErrorCode *)a4);
        if (*a4 < 1)
        {
          uint64_t v16 = v15;
          long long v30 = 0u;
          uint64_t v33 = 0;
          long long v32 = 0u;
          long long v31 = 0u;
          unint64_t v29 = (UChar *)&unk_1EDA47700;
          LOWORD(v30) = 2;
          while (ures_hasNext(v16))
          {
            uint64_t v28 = 0;
            long long v26 = 0u;
            long long v27 = 0u;
            long long v25 = 0u;
            unsigned int v24 = &unk_1EDA47700;
            LOWORD(v25) = 2;
            int v23 = 0;
            NextString = ures_getNextString(v16, &v23, 0, (UErrorCode *)a4);
            if (*a4 <= 0)
            {
              int v22 = NextString;
              icu::UnicodeString::setTo((icu::UnicodeString *)&v24, 1, &v22, v23);
            }
            else
            {
              icu::UnicodeString::setToBogus((icu::UnicodeString *)&v24);
            }
            if ((v25 & 0x8000u) == 0) {
              uint64_t v18 = (unsigned __int16)v25 >> 5;
            }
            else {
              uint64_t v18 = DWORD1(v25);
            }
            icu::UnicodeString::doAppend((uint64_t)&v29, (const icu::UnicodeString *)&v24, 0, v18);
            icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v24);
          }
          icu::RuleBasedNumberFormat::init((icu::RuleBasedNumberFormat *)a1, &v29, 0, (uint64_t)&v24, (UErrorCode *)a4);
          ures_close(v16);
          ures_close(v14);
          icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v29);
        }
        else
        {
          ures_close(v14);
        }
      }
      ures_close(v11);
    }
  }
  return a1;
}

uint64_t icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this, const icu::RuleBasedNumberFormat *a2)
{
  uint64_t v4 = icu::NumberFormat::NumberFormat(this, a2);
  *(void *)uint64_t v4 = &unk_1EDA51660;
  *(void *)(v4 + 384) = 0;
  *(_OWORD *)(v4 + 360) = 0u;
  *((_DWORD *)this + 94) = 0;
  icu::Locale::Locale((icu::Locale *)(v4 + 392), (uint64_t)a2 + 392);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((unsigned char *)this + 652) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((void *)this + 84) = &unk_1EDA47700;
  *((_WORD *)this + 340) = 2;
  *((_WORD *)this + 368) = 0;
  *((unsigned char *)this + 738) = 0;
  *((void *)this + 93) = 0;

  return icu::RuleBasedNumberFormat::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::RuleBasedNumberFormat::operator=(uint64_t a1, uint64_t a2)
{
  v11[8] = *MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    icu::NumberFormat::operator=(a1, a2);
    int v10 = 0;
    icu::RuleBasedNumberFormat::dispose((icu::RuleBasedNumberFormat *)a1);
    icu::Locale::operator=((icu::Locale *)(a1 + 392), a2 + 392);
    *(unsigned char *)(a1 + 652) = *(unsigned char *)(a2 + 652);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 408))(a1, *(void *)(a2 + 624));
    uint64_t v4 = *(_DWORD **)(a2 + 664);
    if (v4) {
      ++v4[2];
    }
    icu::RuleBasedNumberFormat::init((icu::RuleBasedNumberFormat *)a1, (UChar **)(a2 + 672), v4, (uint64_t)v9, (UErrorCode *)&v10);
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a2 + 392))(v11, a2);
    (*(void (**)(uint64_t, void *, int *))(*(void *)a1 + 384))(a1, v11, &v10);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v11);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 272))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, v6);
    *(_WORD *)(a1 + 736) = *(_WORD *)(a2 + 736);
    *(unsigned char *)(a1 + 738) = *(unsigned char *)(a2 + 738);
    uint64_t v7 = *(void *)(a2 + 744);
    if (v7) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
    *(void *)(a1 + 744) = v7;
  }
  return a1;
}

_DWORD *icu::RuleBasedNumberFormat::dispose(icu::RuleBasedNumberFormat *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 45);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = v2 + 1;
      do
      {
        unsigned int v5 = (void *)sub_18C957844(v3);
        icu::UMemory::operator delete(v5);
        uint64_t v6 = *v4++;
        uint64_t v3 = v6;
      }
      while (v6);
      uint64_t v2 = (uint64_t *)*((void *)this + 45);
    }
    uprv_free(v2);
    *((void *)this + 45) = 0;
  }
  uint64_t v7 = (void *)*((void *)this + 46);
  if (v7)
  {
    uint64_t v8 = (char *)(v7 - 2);
    uint64_t v9 = *(v7 - 1);
    if (v9)
    {
      uint64_t v10 = v9 << 6;
      uint64_t v11 = (char *)(v7 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v11[v10]);
        v10 -= 64;
      }
      while (v10);
    }
    icu::UMemory::operator delete[](v8);
    *((void *)this + 46) = 0;
  }
  uint64_t v12 = (icu::RuleBasedCollator *)*((void *)this + 77);
  if (v12)
  {
    icu::RuleBasedCollator::~RuleBasedCollator(v12);
    icu::UMemory::operator delete(v13);
  }
  *((void *)this + 77) = 0;
  uint64_t v14 = *((void *)this + 78);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  *((void *)this + 78) = 0;
  uint64_t v15 = (void *)*((void *)this + 79);
  if (v15)
  {
    uint64_t v16 = sub_18C958F50(v15);
    icu::UMemory::operator delete(v16);
  }
  *((void *)this + 79) = 0;
  unsigned int v17 = (void *)*((void *)this + 80);
  if (v17)
  {
    uint64_t v18 = sub_18C958F50(v17);
    icu::UMemory::operator delete(v18);
  }
  *((void *)this + 80) = 0;
  uint64_t v19 = *((void *)this + 82);
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  *((void *)this + 82) = 0;
  uint64_t v20 = *((void *)this + 93);
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  *((void *)this + 93) = 0;
  uint64_t result = (_DWORD *)*((void *)this + 83);
  if (result)
  {
    int v22 = result[2];
    if (v22)
    {
      int v23 = v22 - 1;
      result[2] = v23;
      if (!v23) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
    }
    *((void *)this + 83) = 0;
  }
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getDecimalFormatSymbols(icu::RuleBasedNumberFormat *this)
{
  return *((void *)this + 78);
}

void icu::RuleBasedNumberFormat::~RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this)
{
  *(void *)this = &unk_1EDA51660;
  icu::RuleBasedNumberFormat::dispose(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::RuleBasedNumberFormat *)((char *)this + 672));
  icu::Locale::~Locale((icu::RuleBasedNumberFormat *)((char *)this + 392));

  icu::NumberFormat::~NumberFormat(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::RuleBasedNumberFormat::~RuleBasedNumberFormat(this);

  icu::UMemory::operator delete(v1);
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::clone@<X0>(icu::RuleBasedNumberFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::RuleBasedNumberFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x2F0, a2);
  if (result) {
    return (icu::RuleBasedNumberFormat *)icu::RuleBasedNumberFormat::RuleBasedNumberFormat(result, this);
  }
  return result;
}

uint64_t icu::RuleBasedNumberFormat::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (!result) {
    return result;
  }
  uint64_t result = icu::Locale::operator==(a1 + 392, a2 + 392);
  if (!result) {
    return result;
  }
  if (*(unsigned __int8 *)(a1 + 652) != *(unsigned __int8 *)(a2 + 652)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 664);
  uint64_t v6 = *(void *)(a2 + 664);
  if (!v5)
  {
    if (!v6) {
      goto LABEL_12;
    }
    return 0;
  }
  if (!v6) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (!result) {
    return result;
  }
LABEL_12:
  uint64_t v7 = *(uint64_t **)(a1 + 360);
  uint64_t v8 = *(uint64_t **)(a2 + 360);
  uint64_t result = ((unint64_t)v7 | (unint64_t)v8) == 0;
  if (v7 && v8)
  {
    uint64_t v9 = *v7;
    if (*v7)
    {
      while (*v8)
      {
        if (sub_18C957848(v9, *v8))
        {
          uint64_t v10 = v7[1];
          ++v7;
          uint64_t v9 = v10;
          ++v8;
          if (v10) {
            continue;
          }
        }
        goto LABEL_18;
      }
      return v9 == 0;
    }
LABEL_18:
    if (!*v8)
    {
      uint64_t v9 = *v7;
      return v9 == 0;
    }
    return 0;
  }
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getRules@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  uint64_t v3 = *(uint64_t **)(this + 360);
  if (v3)
  {
    this = *v3;
    if (*v3)
    {
      uint64_t v4 = v3 + 1;
      do
      {
        sub_18C9584AC(this, (icu::UnicodeString *)a2);
        uint64_t v5 = *v4++;
        this = v5;
      }
      while (v5);
    }
  }
  return this;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::getRuleSetName@<X0>(icu::RuleBasedNumberFormat *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result = (icu::UnicodeString *)*((void *)this + 83);
  if (result)
  {
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    uint64_t v9 = (*(uint64_t (**)(icu::UnicodeString *))(*(void *)result + 32))(result);
    return (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a3, 1, &v9);
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 45);
  if (!v6) {
    goto LABEL_11;
  }
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = &unk_1EDA47700;
  *(_WORD *)(a3 + 8) = 2;
  uint64_t v7 = *v6;
  if (!*v6)
  {
LABEL_10:
    uint64_t result = (icu::UnicodeString *)icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)a3);
LABEL_11:
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    return result;
  }
  ++v6;
  while (!*(unsigned char *)(v7 + 161))
  {
LABEL_9:
    uint64_t v8 = *v6++;
    uint64_t v7 = v8;
    if (!v8) {
      goto LABEL_10;
    }
  }
  if (a2)
  {
    --a2;
    goto LABEL_9;
  }

  return icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)(v7 + 8), 0);
}

uint64_t icu::RuleBasedNumberFormat::getNumberOfRuleSetNames(icu::RuleBasedNumberFormat *this)
{
  uint64_t v2 = *((void *)this + 83);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 24))();
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 45);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *v4;
  if (!*v4) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v6 = v4 + 1;
  do
  {
    if (*(unsigned char *)(v5 + 161)) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    uint64_t v7 = *v6++;
    uint64_t v5 = v7;
  }
  while (v7);
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getNumberOfRuleSetDisplayNameLocales(icu::RuleBasedNumberFormat *this)
{
  uint64_t result = *((void *)this + 83);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t *icu::RuleBasedNumberFormat::getRuleSetDisplayNameLocale@<X0>(icu::RuleBasedNumberFormat *this@<X0>, UErrorCode *a2@<X2>, uint64_t a3@<X1>, icu::Locale *a4@<X8>)
{
  int v23 = (uint64_t *)*MEMORY[0x1E4F143B8];
  if (*(int *)a2 >= 1)
  {
    return icu::Locale::Locale(v23, a4, "", 0, 0, 0);
  }
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v9 = *((void *)this + 83);
    if (v9)
    {
      if ((*(int (**)(uint64_t))(*(void *)v9 + 40))(v9) > (int)a3)
      {
        memset(v22, 0, sizeof(v22));
        uint64_t v20 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 83) + 48))(*((void *)this + 83), a3);
        icu::UnicodeString::UnicodeString(v22, 1, &v20);
        memset(v21, 0, sizeof(v21));
        __int16 v10 = WORD4(v22[0]);
        unsigned int v11 = WORD4(v22[0]) >> 5;
        unsigned int v12 = HIDWORD(v22[0]);
        if ((SWORD4(v22[0]) & 0x8000u) == 0) {
          int v13 = WORD4(v22[0]) >> 5;
        }
        else {
          int v13 = HIDWORD(v22[0]);
        }
        int v14 = v13 + 1;
        if (v13 < 64)
        {
          uint64_t v16 = (char *)v21;
        }
        else
        {
          uint64_t v15 = (char *)uprv_malloc((v13 + 1));
          if (!v15)
          {
            *a2 = U_MEMORY_ALLOCATION_ERROR;
            icu::Locale::Locale((uint64_t *)7, a4, "", 0, 0, 0);
            return (uint64_t *)icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
          }
          uint64_t v16 = v15;
          __int16 v10 = WORD4(v22[0]);
          unsigned int v12 = HIDWORD(v22[0]);
          unsigned int v11 = WORD4(v22[0]) >> 5;
        }
        if (v10 >= 0) {
          uint64_t v17 = v11;
        }
        else {
          uint64_t v17 = v12;
        }
        icu::UnicodeString::extract((uint64_t)v22, 0, v17, v16, v14);
        *(_OWORD *)a4 = 0u;
        *((_OWORD *)a4 + 1) = 0u;
        *((_OWORD *)a4 + 2) = 0u;
        *((_OWORD *)a4 + 3) = 0u;
        *((_OWORD *)a4 + 4) = 0u;
        *((_OWORD *)a4 + 5) = 0u;
        *((_OWORD *)a4 + 6) = 0u;
        *((_OWORD *)a4 + 7) = 0u;
        *((_OWORD *)a4 + 8) = 0u;
        *((_OWORD *)a4 + 9) = 0u;
        *((_OWORD *)a4 + 10) = 0u;
        *((_OWORD *)a4 + 11) = 0u;
        *((_OWORD *)a4 + 12) = 0u;
        *((_OWORD *)a4 + 13) = 0u;
        icu::Locale::Locale(v18, a4, v16, 0, 0, 0);
        if (v16 != (char *)v21) {
          uprv_free(v16);
        }
        return (uint64_t *)icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
      }
    }
  }
  *a2 = U_ILLEGAL_ARGUMENT_ERROR;
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  *((_OWORD *)a4 + 2) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  *((_OWORD *)a4 + 4) = 0u;
  *((_OWORD *)a4 + 5) = 0u;
  *((_OWORD *)a4 + 6) = 0u;
  *((_OWORD *)a4 + 7) = 0u;
  *((_OWORD *)a4 + 8) = 0u;
  *((_OWORD *)a4 + 9) = 0u;
  *((_OWORD *)a4 + 10) = 0u;
  *((_OWORD *)a4 + 11) = 0u;
  *((_OWORD *)a4 + 12) = 0u;
  *((_OWORD *)a4 + 13) = 0u;

  return (uint64_t *)icu::Locale::Locale(a4);
}

void icu::RuleBasedNumberFormat::getRuleSetDisplayName(icu::RuleBasedNumberFormat *this@<X0>, const icu::Locale *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x80000000) != 0
    || (uint64_t v6 = *((void *)this + 83)) == 0
    || (*(int (**)(uint64_t))(*(void *)v6 + 24))(v6) <= (int)a3)
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)(a4 + 56) = 0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(void *)a4 = &unk_1EDA47700;
    *(_WORD *)(a4 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
  }
  else
  {
    memset(v26, 0, sizeof(v26));
    uint64_t BaseName = icu::Locale::getBaseName(a2);
    icu::UnicodeString::UnicodeString(v26, BaseName, 0xFFFFFFFFLL, 0);
    if ((SWORD4(v26[0]) & 0x8000u) == 0) {
      LODWORD(v10) = WORD4(v26[0]) >> 5;
    }
    else {
      LODWORD(v10) = HIDWORD(v26[0]);
    }
    uint64_t Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)v26, (int)v10 + 1);
    if ((v10 & 0x80000000) != 0)
    {
LABEL_22:
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      uint64_t v24 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 83) + 32))(*((void *)this + 83), a3);
      icu::UnicodeString::UnicodeString(a4, 1, &v24);
      uint64_t v22 = v24;
      int v21 = &v22;
    }
    else
    {
      uint64_t v12 = Buffer;
      uint64_t v13 = Buffer - 2;
      while (1)
      {
        *(_WORD *)(v12 + 2 * v10) = 0;
        uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 83) + 64))(*((void *)this + 83), v12);
        if ((v14 & 0x80000000) == 0) {
          break;
        }
        if (v10) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = 0xFFFFFFFFLL;
        }
        do
        {
          BOOL v16 = v10 != 0;
          uint64_t v10 = (v10 - 1);
          if (v10 == 0 || !v16)
          {
            uint64_t v17 = v15;
            goto LABEL_17;
          }
        }
        while (*(_WORD *)(v12 + 2 * v10) != 95);
        uint64_t v17 = v10;
        LODWORD(v15) = v10;
LABEL_17:
        LODWORD(v10) = v15 & ((int)v15 >> 31);
        uint64_t v18 = (unsigned __int16 *)(v13 + 2 * v17);
        while (1)
        {
          BOOL v19 = __OFSUB__(v17, 1);
          LODWORD(v17) = v17 - 1;
          if ((int)v17 < 0 != v19) {
            break;
          }
          int v20 = *v18--;
          if (v20 != 95)
          {
            LODWORD(v10) = v17 + 1;
            break;
          }
        }
        if ((v10 & 0x80000000) != 0) {
          goto LABEL_22;
        }
      }
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      uint64_t v25 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 83) + 56))(*((void *)this + 83), v14, a3);
      icu::UnicodeString::UnicodeString(a4, 1, &v25);
      uint64_t v23 = v25;
      int v21 = &v23;
    }
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v26);
  }
}

void icu::RuleBasedNumberFormat::getRuleSetDisplayName(icu::RuleBasedNumberFormat *this@<X0>, UChar **a2@<X1>, const icu::Locale *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 83))
  {
    memset(v10, 0, sizeof(v10));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v10, a2);
    uint64_t v6 = *((void *)this + 83);
    Terminateduint64_t Buffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v10);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 72))(v6, TerminatedBuffer);
    (*(void (**)(icu::RuleBasedNumberFormat *, uint64_t, const icu::Locale *))(*(void *)this + 344))(this, v8, a3);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v10);
  }
  else
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)(a4 + 56) = 0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(void *)a4 = &unk_1EDA47700;
    *(_WORD *)(a4 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
  }
}

uint64_t icu::RuleBasedNumberFormat::findRuleSet(icu::RuleBasedNumberFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 45);
  if (!v5) {
    return 0;
  }
  uint64_t v3 = *v5;
  if (*v5)
  {
    uint64_t v8 = v5 + 1;
    while (!sub_18C9A6DA8(v3, (uint64_t)a2))
    {
      uint64_t v9 = *v8++;
      uint64_t v3 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v3 = 0;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v3;
}

BOOL sub_18C9A6DA8(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 16);
  if (v2) {
    return *(_WORD *)(a2 + 8) & 1;
  }
  if ((v2 & 0x8000) != 0) {
    int v3 = *(_DWORD *)(a1 + 20);
  }
  else {
    int v3 = v2 >> 5;
  }
  uint64_t v4 = 0;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
  if ((v5 & 0x8000u) == 0) {
    unsigned int v6 = v5 >> 5;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a2 + 12);
  }
  if ((v5 & 1) == 0 && v3 == v6) {
    return icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)a2, v3);
  }
  return v4;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(char **this, const icu::number::impl::DecimalQuantity *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v19, (uint64_t)a2);
    if (icu::number::impl::DecimalQuantity::fitsInLong((icu::number::impl::DecimalQuantity *)v19, 0))
    {
      uint64_t v10 = icu::number::impl::DecimalQuantity::toLong(a2, 0);
      (*((void (**)(char **, uint64_t, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))*this + 15))(this, v10, a3, a4, a5);
    }
    else
    {
      icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)v19, 0, 4u, (int *)a5);
      if (icu::number::impl::DecimalQuantity::fitsInLong((icu::number::impl::DecimalQuantity *)v19, 0))
      {
        double v11 = icu::number::impl::DecimalQuantity::toDouble(a2);
        (*((void (**)(char **, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *, double))*this + 9))(this, a3, a4, a5, v11);
      }
      else
      {
        uint64_t Instance = icu::NumberFormat::createInstance(this + 49, 1u, a5);
        uint64_t v13 = Instance;
        if (Instance || *(int *)a5 > 0)
        {
          if (Instance)
          {
            memset(v21, 0, sizeof(v21));
            icu::Formattable::Formattable((icu::Formattable *)v21);
            BOOL v16 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(v15, (icu::UMemory *)0x48, v14);
            if (v16)
            {
              uint64_t v17 = v16;
              icu::number::impl::DecimalQuantity::DecimalQuantity(v16, (uint64_t)a2);
              icu::Formattable::adoptDecimalQuantity((icu::Formattable *)v21, v17);
              (*(void (**)(icu::Format *, _OWORD *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)v13 + 40))(v13, v21, a3, a4, a5);
              icu::Formattable::~Formattable((icu::Formattable *)v21);
            }
            else
            {
              if (*(int *)a5 <= 0) {
                *a5 = U_MEMORY_ALLOCATION_ERROR;
              }
              icu::Formattable::~Formattable((icu::Formattable *)v21);
            }
            (*(void (**)(icu::Format *))(*(void *)v13 + 8))(v13);
          }
        }
        else
        {
          *a5 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
    }
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v19);
  }
  return a3;
}

uint64_t icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, int a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  return (*(uint64_t (**)(icu::RuleBasedNumberFormat *, void, icu::UnicodeString *, icu::FieldPosition *))(*(void *)this + 112))(this, a2, a3, a4);
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, unint64_t a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  unsigned int v5 = (_DWORD *)*((void *)this + 48);
  if (v5)
  {
    int v7 = 0;
    icu::RuleBasedNumberFormat::format((uint64_t)this, a2, v5, (uint64_t)a3, (UErrorCode *)&v7);
  }
  return a3;
}

uint64_t icu::RuleBasedNumberFormat::format(uint64_t a1, unint64_t a2, _DWORD *a3, uint64_t a4, UErrorCode *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(int *)this <= 0)
  {
    if (a2 == 0x8000000000000000)
    {
      uint64_t Instance = icu::NumberFormat::createInstance((char **)(a1 + 392), 1u, this);
      if (Instance)
      {
        uint64_t v9 = Instance;
        memset(v20, 0, sizeof(v20));
        icu::Formattable::Formattable((icu::Formattable *)v20);
        v19[2] = 0;
        v19[0] = (uint64_t)&unk_1EDA4C7F0;
        v19[1] = 0xFFFFFFFFLL;
        double v11 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(v19, (icu::UMemory *)0x48, v10);
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = (void **)icu::number::impl::DecimalQuantity::DecimalQuantity(v11);
          icu::number::impl::DecimalQuantity::setToLong(v13, 0x8000000000000000);
          icu::Formattable::adoptDecimalQuantity((icu::Formattable *)v20, v12);
          (*(void (**)(icu::Format *, _OWORD *, uint64_t, uint64_t *, UErrorCode *))(*(void *)v9 + 40))(v9, v20, a4, v19, this);
        }
        else
        {
          *this = U_MEMORY_ALLOCATION_ERROR;
        }
        (*(void (**)(icu::Format *))(*(void *)v9 + 8))(v9);
        icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v19);
        icu::Formattable::~Formattable((icu::Formattable *)v20);
      }
    }
    else
    {
      unsigned int v14 = *(unsigned __int16 *)(a4 + 8);
      int v15 = (__int16)v14;
      unsigned int v16 = v14 >> 5;
      if (v15 >= 0) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = *(unsigned int *)(a4 + 12);
      }
      sub_18C957A7C(a3, a2, (icu::UnicodeString *)a4, v17, 0, this);
      icu::RuleBasedNumberFormat::adjustForCapitalizationContext((icu::BreakIterator **)a1, v17, (icu::UnicodeString *)a4, this);
    }
  }
  return a4;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  int v7 = 0;
  unsigned int v5 = (_DWORD *)*((void *)this + 48);
  if (v5) {
    icu::RuleBasedNumberFormat::format(this, v5, (uint64_t)a3, &v7, a2);
  }
  return a3;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(icu::NumberFormat *a1, _DWORD *a2, uint64_t a3, int *a4, double a5)
{
  unsigned int v10 = *(unsigned __int16 *)(a3 + 8);
  int v11 = *(_DWORD *)(a3 + 12);
  if ((*(unsigned int (**)(icu::NumberFormat *))(*(void *)a1 + 272))(a1) != 7
    && !uprv_isNaN(a5)
    && !uprv_isInfinite(a5))
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v20);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v20, a5);
    int v12 = -(int)icu::NumberFormat::getMaximumFractionDigits(a1);
    unsigned int v13 = (*(uint64_t (**)(icu::NumberFormat *))(*(void *)a1 + 272))(a1);
    icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)v20, v12, v13, a4);
    a5 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v20);
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v20);
  }
  if ((v10 & 0x8000u) == 0) {
    int v14 = v10 >> 5;
  }
  else {
    int v14 = v11;
  }
  unsigned int v15 = *(unsigned __int16 *)(a3 + 8);
  int v16 = (__int16)v15;
  unsigned int v17 = v15 >> 5;
  if (v16 >= 0) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = *(unsigned int *)(a3 + 12);
  }
  sub_18C957C04(a2, (icu::UnicodeString *)a3, v18, 0, (UErrorCode *)a4, a5);
  return icu::RuleBasedNumberFormat::adjustForCapitalizationContext((icu::BreakIterator **)a1, v14, (icu::UnicodeString *)a3, (UErrorCode *)a4);
}

uint64_t icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, int a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  return (*(uint64_t (**)(icu::RuleBasedNumberFormat *, void, const icu::UnicodeString *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)this + 368))(this, a2, a3, a4, a5, a6);
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, unint64_t a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    if (*((__int16 *)a3 + 4) < 0)
    {
      int v13 = *((_DWORD *)a3 + 3);
      int v12 = v13 & (v13 >> 31);
    }
    else
    {
      int v12 = 0;
      int v13 = *((unsigned __int16 *)a3 + 4) >> 5;
    }
    if (icu::UnicodeString::indexOf((uint64_t)a3, (uint64_t)L"%%", 0, 2, v12, v13 - v12))
    {
      uint64_t RuleSet = (_DWORD *)icu::RuleBasedNumberFormat::findRuleSet(this, a3, a6);
      if (RuleSet) {
        icu::RuleBasedNumberFormat::format((uint64_t)this, a2, RuleSet, (uint64_t)a4, a6);
      }
    }
    else
    {
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return a4;
}

uint64_t sub_18C9A759C(uint64_t a1, uint64_t a2, int32_t a3, int a4)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 8);
  if ((a4 & 0x80000000) == 0)
  {
    if ((v4 & 0x8000) == 0)
    {
      if (v4 >> 5 >= a4) {
        int v5 = a4;
      }
      else {
        int v5 = v4 >> 5;
      }
      goto LABEL_7;
    }
    if (*(_DWORD *)(a1 + 12) >= a4) {
      int v6 = a4;
    }
    else {
      int v6 = *(_DWORD *)(a1 + 12);
    }
LABEL_11:
    unsigned int v7 = *(_DWORD *)(a1 + 12);
    int v5 = v6;
    return icu::UnicodeString::indexOf(a1, a2, 0, a3, v5, v7 - v5);
  }
  int v5 = 0;
  int v6 = 0;
  if ((v4 & 0x8000) != 0) {
    goto LABEL_11;
  }
LABEL_7:
  unsigned int v7 = v4 >> 5;
  return icu::UnicodeString::indexOf(a1, a2, 0, a3, v5, v7 - v5);
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, double a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    if (*((__int16 *)a3 + 4) < 0)
    {
      int v13 = *((_DWORD *)a3 + 3);
      int v12 = v13 & (v13 >> 31);
    }
    else
    {
      int v12 = 0;
      int v13 = *((unsigned __int16 *)a3 + 4) >> 5;
    }
    if (icu::UnicodeString::indexOf((uint64_t)a3, (uint64_t)L"%%", 0, 2, v12, v13 - v12))
    {
      uint64_t RuleSet = (_DWORD *)icu::RuleBasedNumberFormat::findRuleSet(this, a3, a6);
      if (RuleSet) {
        icu::RuleBasedNumberFormat::format(this, RuleSet, (uint64_t)a4, (int *)a6, a2);
      }
    }
    else
    {
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return a4;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::adjustForCapitalizationContext(icu::BreakIterator **this, int a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  int v8 = (*((uint64_t (**)(icu::BreakIterator **, uint64_t, UErrorCode *))*this + 33))(this, 1, a4);
  if (!a2)
  {
    int v9 = v8;
    if (v8 != 256)
    {
      unsigned int v10 = *((unsigned __int16 *)a3 + 4);
      int v11 = (__int16)v10;
      LODWORD(v12) = v10 >> 5;
      int v12 = v11 >= 0 ? (uint64_t *)v12 : (uint64_t *)*((unsigned int *)a3 + 3);
      if ((int)v12 >= 1)
      {
        UChar32 v13 = icu::UnicodeString::char32At(v12, a3, 0);
        if (u_islower(v13))
        {
          if (*(int *)a4 <= 0)
          {
            int v14 = this[93];
            if (v14)
            {
              if (v9 != 258)
              {
                if (v9 == 260)
                {
                  if (!*((unsigned char *)this + 738)) {
                    return a3;
                  }
                }
                else if (v9 != 259 || !*((unsigned char *)this + 737))
                {
                  return a3;
                }
              }
              icu::UnicodeString::toTitle((UChar **)a3, v14, (const icu::Locale *)(this + 49), 768);
            }
          }
        }
      }
    }
  }
  return a3;
}

char *icu::RuleBasedNumberFormat::parse(char *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 45))
  {
    *((_DWORD *)a4 + 3) = 0;
    return this;
  }
  int v6 = this;
  memset(v27, 0, sizeof(v27));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v27, a2, *((_DWORD *)a4 + 2));
  v24[0] = &unk_1EDA44670;
  v24[1] = 0xFFFFFFFF00000000;
  uint64_t v22 = &unk_1EDA44670;
  unint64_t v23 = 0xFFFFFFFF00000000;
  memset(v26, 0, sizeof(v26));
  icu::Formattable::Formattable((icu::Formattable *)v26);
  unsigned int v7 = (uint64_t *)*((void *)v6 + 45);
  uint64_t v8 = *v7;
  if (!*v7) {
    goto LABEL_12;
  }
  int v9 = v7 + 1;
  while (1)
  {
    if (!*(unsigned char *)(v8 + 161) || !*(unsigned char *)(v8 + 162)) {
      goto LABEL_11;
    }
    uint64_t v20 = &unk_1EDA44670;
    unint64_t v21 = 0xFFFFFFFF00000000;
    memset(v25, 0, sizeof(v25));
    icu::Formattable::Formattable((icu::Formattable *)v25);
    sub_18C957FFC(v8, (uint64_t)v27, (uint64_t)&v20, 0, (icu::Formattable *)v25, v6[652], 1.7592186e13);
    if ((int)v21 > (int)v23)
    {
      unint64_t v23 = v21;
      icu::Formattable::operator=((uint64_t)v26, (uint64_t)v25);
      int v10 = WORD4(v27[0]) >> 5;
      if (SWORD4(v27[0]) < 0) {
        int v10 = HIDWORD(v27[0]);
      }
      if (v23 == v10) {
        break;
      }
    }
    icu::Formattable::~Formattable((icu::Formattable *)v25);
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v20);
LABEL_11:
    uint64_t v11 = *v9++;
    uint64_t v8 = v11;
    if (!v11) {
      goto LABEL_12;
    }
  }
  icu::Formattable::~Formattable((icu::Formattable *)v25);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v20);
LABEL_12:
  int v12 = *((_DWORD *)a4 + 2);
  int v13 = v23 + v12;
  int v14 = (HIDWORD(v23) & ~(SHIDWORD(v23) >> 31)) + v12;
  if ((int)v23 > 0) {
    int v14 = -1;
  }
  *((_DWORD *)a4 + 2) = v13;
  *((_DWORD *)a4 + 3) = v14;
  icu::Formattable::operator=((uint64_t)a3, (uint64_t)v26);
  if (icu::Formattable::getType(a3) == 1)
  {
    double v15 = *((double *)a3 + 1);
    if (!uprv_isNaN(v15))
    {
      double v16 = uprv_trunc(v15);
      if (v15 <= 2147483650.0 && v15 >= -2147483650.0 && v15 == v16) {
        icu::Formattable::setLong(a3, (int)v15);
      }
    }
  }
  icu::Formattable::~Formattable((icu::Formattable *)v26);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v22);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)v24);
  return (char *)icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v27);
}

void icu::RuleBasedNumberFormat::setLenient(icu::RuleBasedNumberFormat *this, int a2)
{
  *((unsigned char *)this + 652) = a2;
  if (!a2)
  {
    int v3 = (icu::RuleBasedCollator *)*((void *)this + 77);
    if (v3)
    {
      icu::RuleBasedCollator::~RuleBasedCollator(v3);
      icu::UMemory::operator delete(v4);
      *((void *)this + 77) = 0;
    }
  }
}

uint64_t *icu::RuleBasedNumberFormat::setDefaultRuleSet(uint64_t *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 > 0) {
    return this;
  }
  int v5 = this;
  if (*((unsigned __int16 *)a2 + 4) > 0x1Fu)
  {
    unsigned int v17 = L"%%";
    icu::UnicodeString::UnicodeString(&v19, 1, &v17);
    int v6 = (void *)WORD4(v19);
    if ((SWORD4(v19) & 0x8000u) == 0) {
      int32_t v7 = WORD4(v19) >> 5;
    }
    else {
      int32_t v7 = HIDWORD(v19);
    }
    if (BYTE8(v19))
    {
      int v6 = (void *)*((unsigned __int8 *)a2 + 8);
      BOOL v13 = v6 & 1;
LABEL_25:
      this = (uint64_t *)icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v19);
      double v15 = v17;
      if (v13)
      {
        *a3 = U_ILLEGAL_ARGUMENT_ERROR;
      }
      else
      {
        this = icu::RuleBasedNumberFormat::findRuleSet((uint64_t *)&v15, (icu::RuleBasedNumberFormat *)v5, a2, a3);
        if (this) {
          v5[48] = (uint64_t)this;
        }
      }
      return this;
    }
    int v8 = v7 & (v7 >> 31);
    if (v7 < 0)
    {
      int32_t v9 = 0;
    }
    else
    {
      int32_t v9 = v7 - v8;
      int32_t v10 = v7;
      if (v7 - v8 >= v7)
      {
LABEL_19:
        if (*((_WORD *)a2 + 4))
        {
          BOOL v13 = 0;
        }
        else
        {
          if ((BYTE8(v19) & 2) != 0) {
            int v14 = (char *)&v19 + 10;
          }
          else {
            int v14 = (char *)*((void *)&v20 + 1);
          }
          BOOL v13 = icu::UnicodeString::doEqualsSubstring((uint64_t)a2, 0, v7, (uint64_t)v14, v8, v10);
        }
        goto LABEL_25;
      }
    }
    int32_t v10 = v9;
    goto LABEL_19;
  }
  uint64_t v11 = this[83];
  if (v11)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void))(*(void *)v11 + 32))(v11, 0);
    icu::UnicodeString::UnicodeString(&v19, 1, &v18);
    uint64_t v16 = v18;
    v5[48] = (uint64_t)icu::RuleBasedNumberFormat::findRuleSet(&v16, (icu::RuleBasedNumberFormat *)v5, (const icu::UnicodeString *)&v19, a3);
    return (uint64_t *)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v19);
  }
  else
  {
    return icu::RuleBasedNumberFormat::initDefaultRuleSet(v5);
  }
}

void *icu::RuleBasedNumberFormat::initDefaultRuleSet(void *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  this[48] = 0;
  if (this[45])
  {
    double v1 = this;
    memset(v17, 0, sizeof(v17));
    int v14 = L"%spellout-numbering";
    icu::UnicodeString::UnicodeString(v17, 1, &v14);
    memset(v16, 0, sizeof(v16));
    BOOL v13 = L"%digits-ordinal";
    icu::UnicodeString::UnicodeString(v16, 1, &v13);
    memset(v15, 0, sizeof(v15));
    int v12 = L"%duration";
    icu::UnicodeString::UnicodeString(v15, 1, &v12);
    unsigned int v2 = (uint64_t *)*((void *)v1 + 45);
    uint64_t v3 = *v2;
    if (*v2)
    {
      while (!sub_18C9A6DA8(v3, (uint64_t)v17) && !sub_18C9A6DA8(*v2, (uint64_t)v16) && !sub_18C9A6DA8(*v2, (uint64_t)v15))
      {
        uint64_t v5 = v2[1];
        ++v2;
        uint64_t v3 = v5;
        if (!v5) {
          goto LABEL_7;
        }
      }
      uint64_t v8 = *v2;
LABEL_13:
      *((void *)v1 + 48) = v8;
    }
    else
    {
LABEL_7:
      uint64_t v7 = *(v2 - 1);
      int v6 = v2 - 1;
      *((void *)v1 + 48) = v7;
      unsigned int v4 = (uint64_t *)*(unsigned __int8 *)(v7 + 161);
      if (!*(unsigned char *)(v7 + 161))
      {
        unsigned int v4 = (uint64_t *)*((void *)v1 + 45);
        while (v6 != v4)
        {
          uint64_t v9 = *--v6;
          uint64_t v8 = v9;
          if (*(unsigned char *)(v9 + 161)) {
            goto LABEL_13;
          }
        }
      }
    }
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v15);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
    return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
  }
  return this;
}

void icu::RuleBasedNumberFormat::getDefaultRuleSetName(icu::RuleBasedNumberFormat *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  uint64_t v4 = *((void *)this + 48);
  if (v4 && *(unsigned char *)(v4 + 161)) {
    icu::UnicodeString::copyFrom((UChar **)a2, (UChar **)(v4 + 8), 0);
  }
  else {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a2);
  }
}

uint64_t icu::RuleBasedNumberFormat::initializeDecimalFormatSymbols(icu::RuleBasedNumberFormat *this, UErrorCode *a2)
{
  if (!*((void *)this + 78))
  {
    uint64_t v5 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((icu::UMemory *)0xB48, (unint64_t)a2);
    if (v5)
    {
      uint64_t v6 = icu::DecimalFormatSymbols::DecimalFormatSymbols(v5, (icu::RuleBasedNumberFormat *)((char *)this + 392), a2);
      if (*(int *)a2 <= 0) {
        *((void *)this + 78) = v6;
      }
      else {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
    }
    else if (*(int *)a2 <= 0)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return *((void *)this + 78);
}

uint64_t icu::RuleBasedNumberFormat::initializeDefaultInfinityRule(icu::RuleBasedNumberFormat *this, UErrorCode *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t result = *((void *)this + 79);
  if (!result)
  {
    memset(v17, 0, sizeof(v17));
    BOOL v13 = L"Inf: ";
    icu::UnicodeString::UnicodeString(v17, 1, &v13);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v14, (UChar **)(*((void *)this + 78) + 904));
    if ((v15 & 0x8000u) == 0) {
      uint64_t v5 = v15 >> 5;
    }
    else {
      uint64_t v5 = v16;
    }
    icu::UnicodeString::doAppend((uint64_t)v17, (const icu::UnicodeString *)v14, 0, v5);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v14);
    uint64_t v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x70, v7);
    if (v9)
    {
      int32_t v10 = (void *)sub_18C958E80((int)v9, (int)this, (icu::UnicodeString *)v17);
      uint64_t v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        *((void *)this + 79) = v10;
      }
      else
      {
        int v12 = sub_18C958F50(v10);
        icu::UMemory::operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        uint64_t v11 = 7;
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)v17);
    return *((void *)this + 79);
  }
  return result;
}

uint64_t icu::RuleBasedNumberFormat::initializeDefaultNaNRule(icu::RuleBasedNumberFormat *this, UErrorCode *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t result = *((void *)this + 80);
  if (!result)
  {
    memset(v17, 0, sizeof(v17));
    BOOL v13 = L"NaN: ";
    icu::UnicodeString::UnicodeString(v17, 1, &v13);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v14, (UChar **)(*((void *)this + 78) + 968));
    if ((v15 & 0x8000u) == 0) {
      uint64_t v5 = v15 >> 5;
    }
    else {
      uint64_t v5 = v16;
    }
    icu::UnicodeString::doAppend((uint64_t)v17, (const icu::UnicodeString *)v14, 0, v5);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v14);
    uint64_t v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x70, v7);
    if (v9)
    {
      int32_t v10 = (void *)sub_18C958E80((int)v9, (int)this, (icu::UnicodeString *)v17);
      uint64_t v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        *((void *)this + 80) = v10;
      }
      else
      {
        int v12 = sub_18C958F50(v10);
        icu::UMemory::operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        uint64_t v11 = 7;
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)v17);
    return *((void *)this + 80);
  }
  return result;
}

void *icu::RuleBasedNumberFormat::stripWhitespace(icu::RuleBasedNumberFormat *this, icu::UnicodeString *a2)
{
  signed int v3 = 0;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v25 = 0;
  long long v24 = 0u;
  long long v21 = (UChar *)&unk_1EDA47700;
  LOWORD(v22) = 2;
  uint64_t v4 = (char *)a2 + 10;
  while (1)
  {
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    signed int v6 = (v5 & 0x8000u) == 0 ? v5 >> 5 : *((_DWORD *)a2 + 3);
    if (v3 >= v6) {
      break;
    }
    uint64_t v7 = v3;
    do
    {
      int v8 = v3;
      if ((v5 & 0x8000) != 0)
      {
        uint64_t v9 = *((int *)a2 + 3);
        if (v7 >= v9) {
          break;
        }
      }
      else
      {
        uint64_t v9 = v5 >> 5;
        if (v7 >= v9) {
          break;
        }
      }
      if (v9 <= v3)
      {
        uint64_t v11 = 0xFFFFLL;
      }
      else
      {
        if ((v5 & 2) != 0) {
          int32_t v10 = v4;
        }
        else {
          int32_t v10 = (char *)*((void *)a2 + 3);
        }
        uint64_t v11 = *(unsigned __int16 *)&v10[2 * v7];
      }
      BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v11);
      unsigned int v5 = *((unsigned __int16 *)a2 + 4);
      ++v7;
      ++v3;
    }
    while (isWhiteSpace);
    if (v8 < 0)
    {
      int v14 = 0;
      if ((v5 & 0x8000) != 0) {
        unsigned int v13 = *((_DWORD *)a2 + 3);
      }
      else {
        unsigned int v13 = v5 >> 5;
      }
    }
    else if ((v5 & 0x8000) != 0)
    {
      unsigned int v13 = *((_DWORD *)a2 + 3);
      if ((int)v13 >= v8) {
        int v14 = v8;
      }
      else {
        int v14 = *((_DWORD *)a2 + 3);
      }
    }
    else
    {
      unsigned int v13 = v5 >> 5;
      if (v13 >= v8) {
        int v14 = v8;
      }
      else {
        int v14 = v13;
      }
    }
    int v15 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x3Bu, v14, v13 - v14);
    unsigned int v16 = *((unsigned __int16 *)a2 + 4);
    int v17 = (__int16)v16;
    signed int v18 = v16 >> 5;
    if (v17 < 0) {
      signed int v18 = *((_DWORD *)a2 + 3);
    }
    if (v15 == -1)
    {
      icu::UnicodeString::doAppend((uint64_t)&v21, a2, v8, (v18 - v8));
      break;
    }
    if (v15 < v18)
    {
      signed int v3 = v15 + 1;
      icu::UnicodeString::doAppend((uint64_t)&v21, a2, v8, (v15 - v8 + 1));
      if (v3 != -1) {
        continue;
      }
    }
    break;
  }
  icu::UnicodeString::copyFrom((UChar **)a2, &v21, 0);
  return icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v21);
}

void icu::RuleBasedNumberFormat::setContext(uint64_t a1, int a2, int *a3)
{
  icu::NumberFormat::setContext(a1, a2, a3);
  if (*a3 <= 0)
  {
    if ((a2 - 259) <= 1 && !*(unsigned char *)(a1 + 736))
    {
      icu::RuleBasedNumberFormat::initCapitalizationContextInfo((icu::RuleBasedNumberFormat *)a1, (const icu::Locale *)(a1 + 392));
      *(unsigned char *)(a1 + 736) = 1;
    }
    if (!*(void *)(a1 + 744))
    {
      if (a2 != 258)
      {
        if (a2 == 260)
        {
          if (!*(unsigned char *)(a1 + 738)) {
            return;
          }
        }
        else if (a2 != 259 || !*(unsigned char *)(a1 + 737))
        {
          return;
        }
      }
      *a3 = 0;
      Sentenceuint64_t Instance = icu::BreakIterator::createSentenceInstance((char **)(a1 + 392), (const icu::Locale *)a3, v6, v7);
      *(void *)(a1 + 744) = SentenceInstance;
      if (*a3 >= 1)
      {
        if (SentenceInstance) {
          (*(void (**)(char *))(*(void *)SentenceInstance + 8))(SentenceInstance);
        }
        *(void *)(a1 + 744) = 0;
      }
    }
  }
}

void icu::RuleBasedNumberFormat::initCapitalizationContextInfo(icu::RuleBasedNumberFormat *this, const icu::Locale *a2)
{
  int v12 = (uint64_t *)*MEMORY[0x1E4F143B8];
  icu::Locale::Locale(v12, (icu::Locale *)v11, 0, 0, 0, 0);
  uint64_t BaseName = 0;
  if (!icu::Locale::operator==((uint64_t)a2, (uint64_t)v11)) {
    uint64_t BaseName = (char *)icu::Locale::getBaseName(a2);
  }
  icu::Locale::~Locale((icu::Locale *)v11);
  v11[0] = 0;
  uint64_t v5 = ures_open(0, BaseName, v11);
  uint64_t v6 = ures_getByKeyWithFallback(v5, "contextTransforms", v5, (UErrorCode *)v11);
  uint64_t v7 = ures_getByKeyWithFallback(v6, "number-spellout", v6, (UErrorCode *)v11);
  uint64_t v8 = v7;
  if (v11[0] <= 0)
  {
    if (v7)
    {
      int v10 = 0;
      IntVector = ures_getIntVector(v7, &v10, v11);
      if (v11[0] <= 0 && IntVector && v10 >= 2)
      {
        *((unsigned char *)this + 737) = *IntVector;
        *((unsigned char *)this + 738) = IntVector[1];
      }
    }
  }
  ures_close(v8);
}

uint64_t icu::RuleBasedNumberFormat::getCollator(icu::RuleBasedNumberFormat *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 45))
  {
    uint64_t result = *((void *)this + 77);
    if (result) {
      return result;
    }
    if (*((unsigned char *)this + 652))
    {
      UErrorCode v22 = U_ZERO_ERROR;
      uint64_t Instance = icu::Collator::createInstance((icu::RuleBasedNumberFormat *)((char *)this + 392), (const icu::Locale *)&v22, a3);
      uint64_t v6 = Instance;
      if (v22 > U_ZERO_ERROR)
      {
        if (!Instance) {
          return *((void *)this + 77);
        }
        goto LABEL_6;
      }
      if (!Instance) {
        return *((void *)this + 77);
      }
      uint64_t v7 = *(void *)Instance;
      if (!v8) {
        goto LABEL_7;
      }
      uint64_t v9 = v8;
      if (!*((void *)this + 82))
      {
        uint64_t v6 = 0;
        goto LABEL_18;
      }
      memset(v23, 0, sizeof(v23));
      Rules = (UChar **)icu::RuleBasedCollator::getRules(v8);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v23, Rules);
      uint64_t v11 = *((void *)this + 82);
      unsigned int v12 = *(unsigned __int16 *)(v11 + 8);
      int v13 = (__int16)v12;
      unsigned int v14 = v12 >> 5;
      if (v13 >= 0) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = *(unsigned int *)(v11 + 12);
      }
      icu::UnicodeString::doAppend((uint64_t)v23, (const icu::UnicodeString *)v11, 0, v15);
      signed int v18 = (icu::RuleBasedCollator *)icu::UMemory::operator new(v17, (icu::UMemory *)0x110, v16);
      if (v18)
      {
        uint64_t v9 = v18;
        icu::RuleBasedCollator::RuleBasedCollator(v18, (const icu::UnicodeString *)v23, &v22);
        icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v23);
        if (v22 > U_ZERO_ERROR)
        {
          icu::RuleBasedCollator::~RuleBasedCollator(v9);
          icu::UMemory::operator delete(v21);
LABEL_6:
          uint64_t v7 = *(void *)v6;
LABEL_7:
          (*(void (**)(icu::RuleBasedCollator *))(v7 + 8))(v6);
          return *((void *)this + 77);
        }
LABEL_18:
        icu::RuleBasedCollator::setAttribute((uint64_t)v9, 4, 0x11u, (int *)&v22);
        *((void *)this + 77) = v9;
        if (!v6) {
          return *((void *)this + 77);
        }
        goto LABEL_6;
      }
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v23);
    }
  }
  return 0;
}

uint64_t icu::RuleBasedNumberFormat::getDefaultInfinityRule(icu::RuleBasedNumberFormat *this)
{
  return *((void *)this + 79);
}

uint64_t icu::RuleBasedNumberFormat::getDefaultNaNRule(icu::RuleBasedNumberFormat *this)
{
  return *((void *)this + 80);
}

uint64_t icu::RuleBasedNumberFormat::adoptDecimalFormatSymbols(uint64_t this, icu::DecimalFormatSymbols *a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(void *)(this + 624);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *(void *)(v3 + 624) = a2;
    UErrorCode v10 = U_ZERO_ERROR;
    uint64_t v5 = *(void **)(v3 + 632);
    if (v5)
    {
      uint64_t v6 = sub_18C958F50(v5);
      icu::UMemory::operator delete(v6);
    }
    *(void *)(v3 + 632) = 0;
    icu::RuleBasedNumberFormat::initializeDefaultInfinityRule((icu::RuleBasedNumberFormat *)v3, &v10);
    uint64_t v7 = *(void **)(v3 + 640);
    if (v7)
    {
      uint64_t v8 = sub_18C958F50(v7);
      icu::UMemory::operator delete(v8);
    }
    *(void *)(v3 + 640) = 0;
    this = icu::RuleBasedNumberFormat::initializeDefaultNaNRule((icu::RuleBasedNumberFormat *)v3, &v10);
    if (*(void *)(v3 + 360) && *(int *)(v3 + 376) >= 1)
    {
      uint64_t v9 = 0;
      do
        this = sub_18C95797C(*(void *)(*(void *)(v3 + 360) + 8 * v9++));
      while (v9 < *(int *)(v3 + 376));
    }
  }
  return this;
}

uint64_t icu::RuleBasedNumberFormat::setDecimalFormatSymbols(icu::RuleBasedNumberFormat *this, const icu::DecimalFormatSymbols *a2)
{
  uint64_t v4 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((icu::UMemory *)0xB48, (unint64_t)a2);
  uint64_t v5 = v4;
  if (v4) {
    icu::DecimalFormatSymbols::DecimalFormatSymbols(v4, a2);
  }
  uint64_t v6 = *(uint64_t (**)(icu::RuleBasedNumberFormat *, icu::DecimalFormatSymbols *))(*(void *)this + 400);

  return v6(this, v5);
}

uint64_t icu::RuleBasedNumberFormat::createPluralFormat(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x2C8, a2);
  if (result) {
    return icu::PluralFormat::PluralFormat(result, a1 + 392, a2, a3, a4);
  }
  *a4 = 7;
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getRoundingMode(icu::RuleBasedNumberFormat *this)
{
  return *((unsigned int *)this + 162);
}

uint64_t icu::RuleBasedNumberFormat::setRoundingMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 648) = a2;
  return result;
}

uint64_t sub_18C9A89D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18C9A89DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_18C9A89E4(uint64_t a1)
{
  return *(char *)(a1 + 652);
}

uint64_t sub_18C9A89EC(uint64_t a1)
{
  if (*(void *)(a1 + 16) && *(int *)(a1 + 12) >= 1)
  {
    uint64_t v2 = 0;
    do
      (*(void (**)(void))(a1 + 16))(*(void *)(*(void *)a1 + 8 * v2++));
    while (v2 < *(int *)(a1 + 12));
  }
  uprv_free(*(void **)a1);
  return a1;
}

void *icu::RuleBasedTransliterator::getStaticClassID(icu::RuleBasedTransliterator *this)
{
  return &unk_1E9192540;
}

void *sub_18C9A8A5C()
{
  return &unk_1E9192540;
}

icu::Transliterator *sub_18C9A8A68(icu::Transliterator *a1, UChar **a2, uint64_t a3, icu::UnicodeFilter *a4)
{
  uint64_t v6 = icu::Transliterator::Transliterator(a1, a2, a4);
  *(void *)uint64_t v6 = &unk_1EDA51858;
  *((void *)v6 + 11) = a3;
  *((unsigned char *)v6 + 96) = 0;
  int v7 = sub_18C9ADE1C(a3 + 8);
  icu::Transliterator::setMaximumContextLength((uint64_t)a1, v7);
  return a1;
}

icu::Transliterator *sub_18C9A8AD4(icu::Transliterator *a1, UChar **a2, uint64_t a3, char a4)
{
  int v7 = icu::Transliterator::Transliterator(a1, a2, 0);
  *(void *)int v7 = &unk_1EDA51858;
  *((void *)v7 + 11) = a3;
  *((unsigned char *)v7 + 96) = a4;
  int v8 = sub_18C9ADE1C(a3 + 8);
  icu::Transliterator::setMaximumContextLength((uint64_t)a1, v8);
  return a1;
}

icu::Transliterator *sub_18C9A8B4C(icu::Transliterator *a1, uint64_t a2)
{
  uint64_t v4 = icu::Transliterator::Transliterator(a1, (UChar **)a2);
  *(void *)uint64_t v4 = &unk_1EDA51858;
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  uint64_t v6 = (uint64_t *)*(unsigned __int8 *)(a2 + 96);
  *((unsigned char *)v4 + 96) = (_BYTE)v6;
  if (v6)
  {
    int v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x490, v5);
    if (v7) {
      int v7 = (uint64_t *)sub_18C9A9160(v7, *(void *)(a2 + 88));
    }
    *((void *)a1 + 11) = v7;
  }
  return a1;
}

void sub_18C9A8BC0(icu::Transliterator *this)
{
  *(void *)this = &unk_1EDA51858;
  if (*((unsigned char *)this + 96))
  {
    uint64_t v2 = *((void *)this + 11);
    if (v2)
    {
      uint64_t v3 = (void *)sub_18C9A9204(v2);
      icu::UMemory::operator delete(v3);
    }
  }

  icu::Transliterator::~Transliterator(this);
}

void sub_18C9A8C2C(icu::Transliterator *a1)
{
  sub_18C9A8BC0(a1);

  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18C9A8C54@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x68, a2);
  if (result) {
    return sub_18C9A8B4C(result, a1);
  }
  return result;
}

void sub_18C9A8C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v9 = *(_DWORD *)(a3 + 8);
  int v8 = *(_DWORD *)(a3 + 12);
  umtx_lock(0);
  uint64_t v10 = qword_1E9192598;
  umtx_unlock(0);
  if (v10 != a2)
  {
    umtx_lock((atomic_ullong *)&unk_1E9192548);
    umtx_lock(0);
    qword_1E9192598 = a2;
    umtx_unlock(0);
  }
  if (*(void *)(a1 + 88) && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a3 + 12))
  {
    unsigned int v11 = v8 - v9;
    unsigned int v12 = 16 * (v8 - v9);
    unsigned int v13 = 1;
    unsigned int v14 = v11 >> 28;
    do
    {
      if (!sub_18C9AE2D0(*(void *)(a1 + 88) + 8, a2, a3, a4)) {
        break;
      }
      BOOL v15 = v14 || v12 >= v13;
      BOOL v16 = !v15;
      if (*(_DWORD *)(a3 + 8) >= *(_DWORD *)(a3 + 12)) {
        break;
      }
      ++v13;
    }
    while (!v16);
  }
  if (v10 != a2)
  {
    umtx_lock(0);
    qword_1E9192598 = 0;
    umtx_unlock(0);
    umtx_unlock((std::mutex **)&unk_1E9192548);
  }
}

icu::UnicodeString *sub_18C9A8DC8(uint64_t a1, icu::UnicodeString *a2, uint64_t a3)
{
  return sub_18C9AE3E4(*(void *)(a1 + 88) + 8, a2, a3);
}

icu::UnicodeSet *sub_18C9A8DD4(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_18C9AE4D4(*(void *)(a1 + 88) + 8, a2, 0);
}

icu::UnicodeSet *sub_18C9A8DE4(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_18C9AE4D4(*(void *)(a1 + 88) + 8, a2, 1);
}

uint64_t sub_18C9A8DF4(uint64_t a1, int *a2)
{
  sub_18C9ADB5C(a1 + 8);
  *(void *)(a1 + 1064) = 0;
  if (*a2 <= 0
    && (uhash_init((int32x2_t *)(a1 + 1072), (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, a2), *a2 < 1))
  {
    *(void *)(a1 + 1064) = a1 + 1072;
    uhash_setKeyDeleter(a1 + 1072, (uint64_t)uprv_deleteUObject);
    int v5 = *a2;
    *(void *)(a1 + 1152) = 0;
    *(unsigned char *)(a1 + 1160) = 1;
    if (v5 <= 0)
    {
      uhash_setValueDeleter(*(void *)(a1 + 1064), (uint64_t)uprv_deleteUObject);
      *(void *)(a1 + 1152) = 0;
      *(_DWORD *)(a1 + 1164) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 1152) = 0;
    *(unsigned char *)(a1 + 1160) = 1;
  }
  return a1;
}

uint64_t sub_18C9A8EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  sub_18C9ADD1C(a1 + 8, a2 + 8);
  *(void *)(a1 + 1064) = 0;
  int v26 = 0;
  uhash_init((int32x2_t *)(a1 + 1072), (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, &v26);
  if (v26 <= 0)
  {
    *(void *)(a1 + 1064) = a1 + 1072;
    uhash_setKeyDeleter(a1 + 1072, (uint64_t)uprv_deleteUObject);
  }
  *(unsigned char *)(a1 + 1160) = 1;
  *(_WORD *)(a1 + 1162) = *(_WORD *)(a2 + 1162);
  *(_DWORD *)(a1 + 1164) = *(_DWORD *)(a2 + 1164);
  int v25 = 0;
  uhash_setValueDeleter(*(void *)(a1 + 1064), (uint64_t)uprv_deleteUObject);
  int v24 = -1;
  uint64_t v5 = uhash_nextElement(*(uint64_t **)(a2 + 1064), &v24);
  if (!v5)
  {
LABEL_9:
    *(void *)(a1 + 1152) = 0;
    if (*(void *)(a2 + 1152))
    {
      int v17 = uprv_malloc(8 * *(int *)(a1 + 1164));
      *(void *)(a1 + 1152) = v17;
      if (!v17) {
        return a1;
      }
      if (*(int *)(a1 + 1164) >= 1)
      {
        uint64_t v18 = 0;
        while (1)
        {
          uint64_t v19 = *(void *)(*(void *)(a2 + 1152) + 8 * v18);
          *(void *)(*(void *)(a1 + 1152) + 8 * v18) = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
          int v17 = *(void **)(a1 + 1152);
          if (!v17[v18]) {
            break;
          }
          if (++v18 >= *(int *)(a1 + 1164)) {
            goto LABEL_18;
          }
        }
        int v25 = 7;
LABEL_21:
        if ((int)v18 >= 1)
        {
          uint64_t v20 = v18 - 1;
          do
          {
            uint64_t v21 = *(void *)(*(void *)(a1 + 1152) + 8 * v20);
            if (v21) {
              (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
            }
            unint64_t v22 = v20-- + 1;
          }
          while (v22 > 1);
          int v17 = *(void **)(a1 + 1152);
        }
        uprv_free(v17);
        *(void *)(a1 + 1152) = 0;
        return a1;
      }
    }
    else
    {
      int v17 = 0;
    }
    LODWORD(v18) = 0;
LABEL_18:
    if (v25 < 1)
    {
      sub_18C9ADDC0(v4, a1);
      return a1;
    }
    goto LABEL_21;
  }
  uint64_t v8 = v5;
  while (1)
  {
    int v9 = (icu::UnicodeString *)icu::UMemory::operator new(v7, (icu::UMemory *)0x40, v6);
    if (!v9) {
      return a1;
    }
    uint64_t v10 = (uint64_t)v9;
    icu::UnicodeString::UnicodeString(v9, *(UChar ***)(v8 + 8));
    unsigned int v11 = *(UChar ***)(v8 + 16);
    uint64_t v12 = *(void *)(a1 + 1064);
    BOOL v15 = (icu::UnicodeString *)icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v13);
    uint64_t v16 = (uint64_t)v15;
    if (v15) {
      icu::UnicodeString::UnicodeString(v15, v11);
    }
    uhash_put(v12, v16, v10, &v25);
    uint64_t v8 = uhash_nextElement(*(uint64_t **)(a2 + 1064), &v24);
    if (!v8) {
      goto LABEL_9;
    }
  }
}

uint64_t sub_18C9A9164(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1160))
  {
    if (*(void *)(a1 + 1152))
    {
      int v2 = *(_DWORD *)(a1 + 1164);
      if (v2 >= 1)
      {
        for (uint64_t i = 0; i < v2; ++i)
        {
          uint64_t v4 = *(void *)(*(void *)(a1 + 1152) + 8 * i);
          if (v4)
          {
            (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
            int v2 = *(_DWORD *)(a1 + 1164);
          }
        }
      }
    }
  }
  uprv_free(*(void **)(a1 + 1152));
  uint64_t v5 = *(unsigned char **)(a1 + 1064);
  if (v5) {
    uhash_close(v5);
  }
  sub_18C9ADD94(a1 + 8);
  return a1;
}

uint64_t sub_18C9A9208(uint64_t a1, int a2)
{
  int v2 = a2 - *(unsigned __int16 *)(a1 + 1162);
  if (v2 < 0 || v2 >= *(_DWORD *)(a1 + 1164)) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 1152) + 8 * v2);
  }
}

uint64_t sub_18C9A9234(uint64_t a1, int a2)
{
  int v2 = a2 - *(unsigned __int16 *)(a1 + 1162);
  if (v2 >= 0
    && v2 < *(_DWORD *)(a1 + 1164)
    && (uint64_t v3 = *(void *)(*(void *)(a1 + 1152) + 8 * v2)) != 0)
  {
    return (*(uint64_t (**)(void))(*(void *)v3 + 32))();
  }
  else
  {
    return 0;
  }
}

uint64_t sub_18C9A9284(uint64_t a1, int a2)
{
  int v2 = a2 - *(unsigned __int16 *)(a1 + 1162);
  if (v2 >= 0
    && v2 < *(_DWORD *)(a1 + 1164)
    && (uint64_t v3 = *(void *)(*(void *)(a1 + 1152) + 8 * v2)) != 0)
  {
    return (*(uint64_t (**)(void))(*(void *)v3 + 40))();
  }
  else
  {
    return 0;
  }
}

void sub_18C9A92D8(icu::SymbolTable *a1)
{
  icu::SymbolTable::~SymbolTable(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9A9300(uint64_t a1, uint64_t a2)
{
  return uhash_get(**(void **)(a1 + 24), a2);
}

uint64_t sub_18C9A930C(uint64_t a1, int a2)
{
  signed int v2 = a2 - *(unsigned __int16 *)(*(void *)(a1 + 8) + 1162);
  if (v2 < 0) {
    return 0;
  }
  uint64_t v3 = *(icu::UVector **)(a1 + 16);
  if (v2 >= *((_DWORD *)v3 + 2)) {
    return 0;
  }
  else {
    return icu::UVector::elementAt(v3, v2);
  }
}

void sub_18C9A9338(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = *(int *)(a2 + 8);
  int v8 = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(void *)(a4 + 56) = 0;
  *(void *)a4 = &unk_1EDA47700;
  *(_WORD *)(a4 + 8) = 2;
  uint64_t v9 = a1 + 10;
  if ((int)v7 <= a3) {
    int v10 = a3;
  }
  else {
    int v10 = v7;
  }
  int v22 = v10;
  uint64_t v11 = v10 - v7;
  int v12 = v7;
  while (1)
  {
    if (v11 == v6)
    {
      int v20 = v22;
      goto LABEL_21;
    }
    uint64_t v13 = v6;
    unsigned int v14 = v8 + v6;
    unsigned int v15 = *(unsigned __int16 *)(a1 + 8);
    unsigned int v16 = (v15 & 0x8000u) == 0 ? v15 >> 5 : *(_DWORD *)(a1 + 12);
    if (v16 > v14) {
      break;
    }
    UChar32 v18 = 0xFFFF;
    if (!v13) {
      goto LABEL_16;
    }
LABEL_17:
    int isIDPart = u_isIDPart(v18);
    ++v12;
    uint64_t v6 = v13 + 1;
    if (!isIDPart)
    {
      int v20 = v8 + v13;
      goto LABEL_21;
    }
  }
  if ((v15 & 2) != 0) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = *(void *)(a1 + 24);
  }
  UChar32 v18 = *(unsigned __int16 *)(v17 + 2 * v7 + 2 * v13);
  if (v13) {
    goto LABEL_17;
  }
LABEL_16:
  if (u_isIDStart(v18)) {
    goto LABEL_17;
  }
  int v20 = v12;
LABEL_21:
  if (v20 != v8)
  {
    *(_DWORD *)(a2 + 8) = v20;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24);
    v21(a1, v7);
  }
}

uint64_t sub_18C9A94DC(uint64_t a1, int a2)
{
  signed int v2 = a2 - *(unsigned __int16 *)(*(void *)(a1 + 8) + 1162);
  if (v2 < 0) {
    return 1;
  }
  uint64_t v3 = *(icu::UVector **)(a1 + 16);
  if (v2 >= *((_DWORD *)v3 + 2)) {
    return 1;
  }
  uint64_t result = icu::UVector::elementAt(v3, v2);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result) != 0;
  }
  return result;
}

uint64_t sub_18C9A954C(uint64_t a1, int a2)
{
  signed int v2 = a2 - *(unsigned __int16 *)(*(void *)(a1 + 8) + 1162);
  if (v2 < 0) {
    return 1;
  }
  uint64_t v3 = *(icu::UVector **)(a1 + 16);
  if (v2 >= *((_DWORD *)v3 + 2)) {
    return 1;
  }
  uint64_t result = icu::UVector::elementAt(v3, v2);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result) != 0;
  }
  return result;
}

uint64_t sub_18C9A95BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1 + 8;
  unsigned int v11 = *(unsigned __int16 *)(a1 + 16);
  if (v11)
  {
    icu::UnicodeString::unBogus(a1 + 8);
  }
  else
  {
    if ((v11 & 0x8000) == 0)
    {
      if (!(v11 >> 5)) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (*(_DWORD *)(a1 + 20)) {
LABEL_7:
    }
      *(_WORD *)(a1 + 16) &= 0x1Fu;
  }
LABEL_8:
  unsigned int v15 = ")";
  icu::UnicodeString::UnicodeString(v16, 1, &v15);
  uint64_t v12 = sub_18C9A9704(a1, a2, a3, a4, v10, (uint64_t)v16, 0, a5);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v16);
  if (*(int *)(a1 + 84) >= 1 && *(_DWORD *)(a1 + 72) != *(_DWORD *)(a1 + 88))
  {
    sub_18C9ABB0C(*(void *)(a1 + 104), 65545, a2, a3, a5);
    return a3;
  }
  return v12;
}

uint64_t sub_18C9A9704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, UErrorCode *a8)
{
  uint64_t v8 = a3;
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  int v159 = a3;
  v157 = &unk_1EDA44670;
  unint64_t v158 = 0xFFFFFFFF00000000;
  long long v163 = 0u;
  uint64_t v166 = 0;
  long long v165 = 0u;
  long long v164 = 0u;
  v162 = &unk_1EDA47700;
  LOWORD(v163) = 2;
  unsigned int v9 = *(unsigned __int16 *)(a5 + 8);
  int v10 = (__int16)v9;
  LODWORD(v11) = v9 >> 5;
  if (v10 >= 0) {
    uint64_t v11 = v11;
  }
  else {
    uint64_t v11 = *(unsigned int *)(a5 + 12);
  }
  if ((int)a3 >= (int)a4) {
    goto LABEL_244;
  }
  int v149 = v11;
  uint64_t v18 = a2 + 10;
  uint64_t v150 = a5 + 10;
  LODWORD(v19) = a3;
  unsigned int v147 = -1;
  int v148 = -1;
  uint64_t v20 = 0xFFFFFFFFLL;
  int v152 = -1;
  while (1)
  {
    int v159 = v19 + 1;
    unsigned int v21 = *(unsigned __int16 *)(a2 + 8);
    if ((v21 & 0x8000u) == 0) {
      unsigned int v22 = v21 >> 5;
    }
    else {
      unsigned int v22 = *(_DWORD *)(a2 + 12);
    }
    if (v22 <= v19)
    {
      uint64_t v24 = 0xFFFFLL;
    }
    else
    {
      if ((v21 & 2) != 0) {
        uint64_t v23 = v18;
      }
      else {
        uint64_t v23 = *(void *)(a2 + 24);
      }
      uint64_t v24 = *(unsigned __int16 *)(v23 + 2 * (int)v19);
    }
    if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v24)) {
      goto LABEL_22;
    }
    if (u_strchr((const UChar *)"=", v24)) {
      break;
    }
    if (*(unsigned char *)(a1 + 93))
    {
      uint64_t v26 = *(void *)(a1 + 104);
      int v138 = 65542;
      goto LABEL_243;
    }
    if (icu::UnicodeSet::resemblesPattern((icu::UnicodeSet *)a2, (const icu::UnicodeString *)(v159 - 1)))
    {
      LODWORD(v158) = v159 - 1;
      LOWORD(v161[0]) = (unsigned __int16)sub_18C9AA5F8(*(void *)(a1 + 104), (const icu::UnicodeString *)a2, (icu::ParsePosition *)&v157, a8, (uint64_t *)(v159 - 1));
      icu::UnicodeString::doAppend(a5, (uint64_t)v161, 0, 1);
      if (*(int *)a8 >= 1)
      {
        uint64_t v26 = *(void *)(a1 + 104);
        int v138 = 65538;
        goto LABEL_243;
      }
      uint64_t v11 = v158;
      goto LABEL_21;
    }
    if (v24 == 39)
    {
      unsigned int v27 = *(unsigned __int16 *)(a2 + 8);
      if (v159 < 0)
      {
        int v29 = 0;
        if ((v27 & 0x8000) != 0) {
          int v28 = *(_DWORD *)(a2 + 12);
        }
        else {
          int v28 = v27 >> 5;
        }
      }
      else if ((v27 & 0x8000) != 0)
      {
        int v28 = *(_DWORD *)(a2 + 12);
        if (v28 >= v159) {
          int v29 = v159;
        }
        else {
          int v29 = *(_DWORD *)(a2 + 12);
        }
      }
      else
      {
        int v28 = v27 >> 5;
        if (v28 >= v159) {
          int v29 = v159;
        }
        else {
          int v29 = v28;
        }
      }
      uint64_t v68 = icu::UnicodeString::doIndexOf(a2, 0x27u, v29, v28 - v29);
      if (v68 == v159)
      {
        strcpy((char *)v161, "'");
        icu::UnicodeString::doAppend(a5, (uint64_t)v161, 0, 1);
        uint64_t v11 = (v159 + 1);
LABEL_21:
        int v159 = v11;
        goto LABEL_22;
      }
      uint64_t v69 = v68;
      unsigned int v70 = *(unsigned __int16 *)(a5 + 8);
      int v71 = (__int16)v70;
      int v72 = v70 >> 5;
      if (v71 < 0) {
        int v72 = *(_DWORD *)(a5 + 12);
      }
      int v152 = v72;
      if ((v68 & 0x80000000) != 0)
      {
LABEL_226:
        uint64_t v26 = *(void *)(a1 + 104);
        int v138 = 65556;
        goto LABEL_243;
      }
      while (1)
      {
        if (v163)
        {
          icu::UnicodeString::unBogus((uint64_t)&v162);
        }
        else
        {
          if ((v163 & 0x8000u) == 0) {
            int v73 = (unsigned __int16)v163 >> 5;
          }
          else {
            int v73 = DWORD1(v163);
          }
          if (v73)
          {
            LOBYTE(v163) = v163 & 0x1F;
            LOWORD(v163) = v163;
          }
        }
        (*(void (**)(uint64_t, void, uint64_t, void **))(*(void *)a2 + 24))(a2, v159, v69, &v162);
        uint64_t v74 = (v163 & 0x8000u) == 0 ? (unsigned __int16)v163 >> 5 : DWORD1(v163);
        icu::UnicodeString::doAppend(a5, (const icu::UnicodeString *)&v162, 0, v74);
        unsigned int v75 = v69 + 1;
        int v159 = v69 + 1;
        if ((int)v69 + 1 >= (int)a4) {
          break;
        }
        unsigned int v76 = *(unsigned __int16 *)(a2 + 8);
        int v77 = (__int16)v76;
        unsigned int v78 = v76 >> 5;
        unsigned int v79 = (v76 & 0x8000u) == 0 ? v76 >> 5 : *(_DWORD *)(a2 + 12);
        if (v79 <= v75) {
          break;
        }
        uint64_t v80 = (v76 & 2) != 0 ? v18 : *(void *)(a2 + 24);
        if (*(_WORD *)(v80 + 2 * v75) != 39) {
          break;
        }
        int v81 = v69 + 2;
        if (v78 >= (int)v69 + 2) {
          unsigned int v78 = v69 + 2;
        }
        if (*(_DWORD *)(a2 + 12) < v81) {
          int v81 = *(_DWORD *)(a2 + 12);
        }
        if (v77 >= 0) {
          int v82 = v78;
        }
        else {
          int v82 = v81;
        }
        uint64_t v69 = icu::UnicodeString::doIndexOf(a2, 0x27u, v82, v79 - v82);
        if ((v69 & 0x80000000) != 0) {
          goto LABEL_226;
        }
      }
      uint64_t v11 = *(unsigned __int16 *)(a5 + 8);
      if ((v11 & 0x8000u) == 0) {
        uint64_t v20 = v11 >> 5;
      }
      else {
        uint64_t v20 = *(unsigned int *)(a5 + 12);
      }
      unsigned int v83 = v152;
      if (v152 < (int)v20)
      {
        uint64_t v26 = *(void *)(a1 + 104);
        uint64_t v84 = *(void *)(a5 + 24);
        if ((v11 & 2) != 0) {
          uint64_t v84 = v150;
        }
        uint64_t v11 = *(unsigned __int16 *)(*(void *)(v26 + 96) + 1162);
        v85 = (unsigned __int16 *)(v84 + 2 * v152);
        while (1)
        {
          if (v20 > v83)
          {
            unsigned int v86 = *v85;
            if (v11 <= v86 && *(unsigned __int16 *)(v26 + 426) > v86) {
              break;
            }
          }
          ++v83;
          ++v85;
          if (v20 == v83) {
            goto LABEL_22;
          }
        }
LABEL_228:
        int v138 = 65566;
LABEL_243:
        sub_18C9ABB0C(v26, v138, a2, v8, a8);
LABEL_244:
        uint64_t v19 = v8;
        goto LABEL_245;
      }
    }
    else if (v24 == 92)
    {
      if (v159 == a4)
      {
        uint64_t v26 = *(void *)(a1 + 104);
        int v138 = 65552;
        goto LABEL_243;
      }
      signed int v25 = icu::UnicodeString::unescapeAt((icu::UnicodeString *)a2, &v159);
      uint64_t v26 = *(void *)(a1 + 104);
      if (v25 == -1)
      {
        int v138 = 65540;
        goto LABEL_243;
      }
      if (v25 >= *(unsigned __int16 *)(*(void *)(v26 + 96) + 1162) && v25 < *(unsigned __int16 *)(v26 + 426)) {
        goto LABEL_228;
      }
      icu::UnicodeString::append(a5, v25);
    }
    else
    {
      uint64_t v26 = *(void *)(a1 + 104);
      if (*(unsigned __int16 *)(*(void *)(v26 + 96) + 1162) <= v24
        && *(unsigned __int16 *)(v26 + 426) > v24)
      {
        goto LABEL_228;
      }
      unsigned int v30 = *(unsigned __int16 *)(a6 + 8);
      int v31 = (__int16)v30;
      int32_t v32 = v30 >> 5;
      if (v31 >= 0) {
        int32_t v33 = v32;
      }
      else {
        int32_t v33 = *(_DWORD *)(a6 + 12);
      }
      if ((icu::UnicodeString::doIndexOf(a6, v24, 0, v33) & 0x80000000) == 0) {
        sub_18C9ABB0C(*(void *)(a1 + 104), 65567, a2, v8, a8);
      }
      if ((int)v24 <= 62)
      {
        switch((int)v24)
        {
          case '$':
            if (v159 == a4)
            {
              uint64_t v11 = 1;
              *(unsigned char *)(a1 + 93) = 1;
              goto LABEL_22;
            }
            unsigned int v116 = *(unsigned __int16 *)(a2 + 8);
            if ((v116 & 0x8000u) == 0) {
              unsigned int v117 = v116 >> 5;
            }
            else {
              unsigned int v117 = *(_DWORD *)(a2 + 12);
            }
            if (v117 <= v159)
            {
              UChar32 v119 = 0xFFFF;
            }
            else
            {
              if ((v116 & 2) != 0) {
                uint64_t v118 = v18;
              }
              else {
                uint64_t v118 = *(void *)(a2 + 24);
              }
              UChar32 v119 = *(unsigned __int16 *)(v118 + 2 * v159);
            }
            if ((u_digit(v119, 10) - 1) > 8)
            {
              LODWORD(v158) = v159;
              memset(v161, 0, sizeof(v161));
              (*(void (**)(_OWORD *__return_ptr))(**(void **)(*(void *)(a1 + 104) + 184) + 32))(v161);
              int v124 = WORD4(v161[0]) >> 5;
              if (SWORD4(v161[0]) < 0) {
                int v124 = HIDWORD(v161[0]);
              }
              if (v124)
              {
                int v159 = v158;
                unsigned int v125 = *(unsigned __int16 *)(a5 + 8);
                int v126 = (__int16)v125;
                int v127 = v125 >> 5;
                if (v126 < 0) {
                  int v127 = *(_DWORD *)(a5 + 12);
                }
                int v148 = v127;
                sub_18C9AAA24(*(void *)(a1 + 104), (UChar **)v161, a5, a8);
                LODWORD(v129) = *(unsigned __int16 *)(a5 + 8);
                int v128 = (__int16)v129;
                LODWORD(v129) = v129 >> 5;
                if (v128 >= 0) {
                  uint64_t v129 = v129;
                }
                else {
                  uint64_t v129 = *(unsigned int *)(a5 + 12);
                }
                unsigned int v147 = v129;
              }
              else
              {
                uint64_t v129 = 1;
                *(unsigned char *)(a1 + 93) = 1;
              }
              icu::UnicodeString::~UnicodeString((void *)v129, (icu::UnicodeString *)v161);
              goto LABEL_22;
            }
            signed int v123 = icu::ICU_Utility::parseNumber((icu::ICU_Utility *)a2, (const icu::UnicodeString *)&v159, (int *)0xA);
            uint64_t v26 = *(void *)(a1 + 104);
            if (v123 < 0)
            {
              int v138 = 65553;
              goto LABEL_243;
            }
            __int16 v105 = sub_18C9AA7AC(v26, v123, a8);
LABEL_154:
            LOWORD(v161[0]) = v105;
            break;
          case '&':
            goto LABEL_79;
          case '(':
            int v145 = a7;
            unsigned int v146 = v8;
            unsigned int v92 = *(unsigned __int16 *)(a5 + 8);
            unsigned int v144 = *(_DWORD *)(a5 + 12);
            int v93 = *(_DWORD *)(a1 + 96);
            *(_DWORD *)(a1 + 96) = v93 + 1;
            uint64_t v94 = v159;
            v156 = &unk_18CA95E82;
            icu::UnicodeString::UnicodeString(v161, 1, &v156);
            int v159 = sub_18C9A9704(a1, a2, v94, a4, a5, v161, 1, a8);
            icu::UnicodeString::~UnicodeString(v95, (icu::UnicodeString *)v161);
            v153[0] = (uint64_t)v156;
            v97 = icu::UMemory::operator new(v153, (icu::UMemory *)0x70, v96);
            if (!v97) {
              goto LABEL_232;
            }
            v98 = v97;
            if ((v92 & 0x8000u) == 0) {
              uint64_t v99 = v92 >> 5;
            }
            else {
              uint64_t v99 = v144;
            }
            unsigned int v100 = *(unsigned __int16 *)(a5 + 8);
            int v101 = (__int16)v100;
            unsigned int v102 = v100 >> 5;
            if (v101 >= 0) {
              uint64_t v103 = v102;
            }
            else {
              uint64_t v103 = *(unsigned int *)(a5 + 12);
            }
            sub_18C9E1F7C((uint64_t)v97, a5, v99, v103, v93, *(void *)(*(void *)(a1 + 104) + 96));
            sub_18C9AA698(*(void *)(a1 + 104), v93, v98, a8);
            sub_18C8980C0(a5, v99);
            __int16 v104 = sub_18C9AA7AC(*(void *)(a1 + 104), v93, a8);
            goto LABEL_177;
          case ')':
            goto LABEL_227;
          case '*':
          case '+':
            goto LABEL_68;
          case '.':
            __int16 v105 = sub_18C9AAB1C(*(void *)(a1 + 104), a8);
            goto LABEL_154;
          default:
            goto LABEL_179;
        }
        goto LABEL_183;
      }
      if ((int)v24 <= 122)
      {
        switch(v24)
        {
          case '?':
LABEL_68:
            double v40 = (uint64_t *)*(unsigned __int16 *)(a5 + 8);
            if (a7)
            {
              unsigned int v41 = (__int16)v40 >= 0 ? v40 >> 5 : *(_DWORD *)(a5 + 12);
              if (v41 == v149)
              {
                uint64_t v26 = *(void *)(a1 + 104);
                int v138 = 65546;
                goto LABEL_243;
              }
            }
            int v145 = a7;
            unsigned int v146 = v8;
            if (((unsigned __int16)v40 & 0x8000) == 0)
            {
              unsigned int v142 = v152;
              uint64_t v42 = v20;
              if (v20 == v40 >> 5) {
                goto LABEL_141;
              }
              double v40 = (uint64_t *)(v40 >> 5);
              unsigned int v142 = v148;
              uint64_t v42 = v147;
              if (v147 == v40) {
                goto LABEL_141;
              }
LABEL_140:
              unsigned int v142 = v40 - 1;
              uint64_t v42 = (uint64_t)v40;
              goto LABEL_141;
            }
            double v40 = (uint64_t *)*(unsigned int *)(a5 + 12);
            unsigned int v142 = v152;
            uint64_t v42 = v20;
            if (v40 != v20)
            {
              unsigned int v142 = v148;
              uint64_t v42 = v147;
              if (v40 != v147) {
                goto LABEL_140;
              }
            }
LABEL_141:
            v87 = icu::UMemory::operator new(v40, (icu::UMemory *)0x70, v34);
            uint64_t v88 = *(void *)(a1 + 104);
            if (!v87) {
              goto LABEL_233;
            }
            sub_18C9E1F7C((uint64_t)v87, a5, v142, v42, 0, *(void *)(v88 + 96));
            if (v24 == 63)
            {
              int v91 = 0;
              uint64_t v90 = 1;
            }
            else
            {
              if (v24 == 43)
              {
                uint64_t v90 = 0x7FFFFFFFLL;
                int v141 = 0x7FFFFFFF;
                int v91 = 1;
LABEL_175:
                v114 = icu::UMemory::operator new((uint64_t *)v90, (icu::UMemory *)0x20, v89);
                if (!v114)
                {
LABEL_232:
                  uint64_t v88 = *(void *)(a1 + 104);
LABEL_233:
                  uint64_t v19 = v146;
                  sub_18C9ABB0C(v88, 7, a2, v146, a8);
                  goto LABEL_245;
                }
                v115 = v114;
                sub_18C9A2AF8((uint64_t)v114, (uint64_t)v87, v91, v141);
                sub_18C8980C0(a5, v142);
                __int16 v104 = sub_18C9AA8F4(*(void *)(a1 + 104), v115, a8);
LABEL_177:
                LOWORD(v161[0]) = v104;
                icu::UnicodeString::doAppend(a5, (uint64_t)v161, 0, 1);
LABEL_178:
                a7 = v145;
                uint64_t v8 = v146;
                break;
              }
              int v91 = 0;
              uint64_t v90 = 0x7FFFFFFFLL;
            }
            int v141 = v90;
            goto LABEL_175;
          case '@':
            int v108 = *(_DWORD *)(a1 + 84);
            if (v108 < 0)
            {
              unsigned int v120 = *(unsigned __int16 *)(a5 + 8);
              int v121 = (__int16)v120;
              int v122 = v120 >> 5;
              if (v121 < 0) {
                int v122 = *(_DWORD *)(a5 + 12);
              }
              if (v122 >= 1)
              {
LABEL_237:
                uint64_t v26 = *(void *)(a1 + 104);
                int v138 = 65545;
                goto LABEL_243;
              }
              uint64_t v11 = (v108 - 1);
              goto LABEL_196;
            }
            if (v108)
            {
              unsigned int v109 = *(unsigned __int16 *)(a5 + 8);
              int v110 = (__int16)v109;
              unsigned int v111 = v109 >> 5;
              if (v110 < 0) {
                unsigned int v111 = *(_DWORD *)(a5 + 12);
              }
              if (v111 != *(_DWORD *)(a1 + 88) || (*(_DWORD *)(a1 + 72) & 0x80000000) == 0) {
                goto LABEL_237;
              }
              uint64_t v11 = (v108 + 1);
LABEL_196:
              *(_DWORD *)(a1 + 84) = v11;
              break;
            }
            int v130 = *(_DWORD *)(a1 + 72);
            if (!v130)
            {
              unsigned int v135 = *(unsigned __int16 *)(a5 + 8);
              int v136 = (__int16)v135;
              unsigned int v137 = v135 >> 5;
              if (v136 < 0) {
                unsigned int v137 = *(_DWORD *)(a5 + 12);
              }
              if (v137) {
                goto LABEL_237;
              }
              uint64_t v11 = 0xFFFFFFFFLL;
              goto LABEL_196;
            }
            if ((v130 & 0x80000000) == 0) {
              goto LABEL_237;
            }
            unsigned int v131 = *(unsigned __int16 *)(a5 + 8);
            int v132 = (__int16)v131;
            unsigned int v133 = v131 >> 5;
            if (v132 >= 0) {
              unsigned int v134 = v133;
            }
            else {
              unsigned int v134 = *(_DWORD *)(a5 + 12);
            }
            uint64_t v11 = 1;
            *(_DWORD *)(a1 + 84) = 1;
            *(_DWORD *)(a1 + 88) = v134;
            break;
          case '^':
            unsigned int v37 = *(unsigned __int16 *)(a5 + 8);
            int v38 = (__int16)v37;
            unsigned int v39 = v37 >> 5;
            if (v38 < 0) {
              unsigned int v39 = *(_DWORD *)(a5 + 12);
            }
            if (v39 || *(unsigned char *)(a1 + 92))
            {
              uint64_t v26 = *(void *)(a1 + 104);
              int v138 = 65544;
              goto LABEL_243;
            }
            uint64_t v11 = 1;
            *(unsigned char *)(a1 + 92) = 1;
            break;
          default:
            goto LABEL_179;
        }
      }
      else if ((int)v24 > 124)
      {
        if (v24 != 125)
        {
          if (v24 != 8710)
          {
LABEL_179:
            if ((unsigned __int16)(v24 - 127) >= 0xFFA2u
              && (unsigned __int16)(v24 - 48) >= 0xAu
              && (unsigned __int16)((v24 & 0xFFDF) - 65) >= 0x1Au)
            {
              uint64_t v26 = *(void *)(a1 + 104);
              int v138 = 65555;
              goto LABEL_243;
            }
            LOWORD(v161[0]) = v24;
LABEL_183:
            icu::UnicodeString::doAppend(a5, (uint64_t)v161, 0, 1);
            goto LABEL_22;
          }
LABEL_79:
          int v145 = a7;
          unsigned int v155 = v159;
          int v43 = sub_18C9F3094(a2, (const icu::UnicodeString *)&v155);
          if (!v43
            || (uint64_t v44 = (uint64_t)v43, !icu::ICU_Utility::parseChar(a2, (const icu::UnicodeString *)&v155, 40))
            || (uint64_t v47 = sub_18C9F1F38(v44, v45, v46),
                uint64_t v48 = (void *)sub_18C9AA8B8(v44),
                icu::UMemory::operator delete(v48),
                !v47))
          {
            uint64_t v26 = *(void *)(a1 + 104);
            int v138 = 65570;
            goto LABEL_243;
          }
          unsigned int v146 = v8;
          unsigned int v49 = *(unsigned __int16 *)(a5 + 8);
          int v50 = (__int16)v49;
          unsigned int v51 = v49 >> 5;
          if (v50 >= 0) {
            uint64_t v52 = v51;
          }
          else {
            uint64_t v52 = *(unsigned int *)(a5 + 12);
          }
          uint64_t v53 = v155;
          v154 = L"^(.*+?{}|@";
          icu::UnicodeString::UnicodeString(v161, 1, &v154);
          int v159 = sub_18C9A9704(a1, a2, v53, a4, a5, v161, 1, a8);
          icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)v161);
          v153[1] = (uint64_t)v154;
          memset((char *)v161 + 8, 0, 56);
          *(void *)&v161[0] = &unk_1EDA47700;
          WORD4(v161[0]) = 2;
          unsigned int v55 = *(unsigned __int16 *)(a5 + 8);
          int v56 = (__int16)v55;
          unsigned int v57 = v55 >> 5;
          if (v56 >= 0) {
            uint64_t v58 = v57;
          }
          else {
            uint64_t v58 = *(unsigned int *)(a5 + 12);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(void *)a5 + 24))(a5, v52, v58, v161);
          uint64_t v61 = icu::UMemory::operator new(v60, (icu::UMemory *)0x20, v59);
          if (!v61)
          {
            uint64_t v19 = v146;
            sub_18C9ABB0C(*(void *)(a1 + 104), 7, a2, v146, a8);
            icu::UnicodeString::~UnicodeString(v139, (icu::UnicodeString *)v161);
            goto LABEL_245;
          }
          int v64 = v61;
          uint64_t v143 = (uint64_t)v47;
          uint64_t v65 = icu::UMemory::operator new(v63, (icu::UMemory *)0x60, v62);
          uint64_t v66 = (uint64_t)v65;
          if (v65) {
            sub_18C9E2BC8((uint64_t)v65, (UChar **)v161, *(void *)(*(void *)(a1 + 104) + 96));
          }
          sub_18C93B28C(v64, v143, v66);
          sub_18C8980C0(a5, v52);
          __int16 v160 = sub_18C9AA8F4(*(void *)(a1 + 104), v64, a8);
          icu::UnicodeString::doAppend(a5, (uint64_t)&v160, 0, 1);
          icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)v161);
          goto LABEL_178;
        }
        if ((*(_DWORD *)(a1 + 80) & 0x80000000) == 0)
        {
          uint64_t v26 = *(void *)(a1 + 104);
          int v138 = 65551;
          goto LABEL_243;
        }
        unsigned int v112 = *(unsigned __int16 *)(a5 + 8);
        int v113 = (__int16)v112;
        LODWORD(v11) = v112 >> 5;
        if (v113 >= 0) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = *(unsigned int *)(a5 + 12);
        }
        *(_DWORD *)(a1 + 80) = v11;
      }
      else if (v24 == 123)
      {
        if ((*(_DWORD *)(a1 + 76) & 0x80000000) == 0)
        {
          uint64_t v26 = *(void *)(a1 + 104);
          int v138 = 65549;
          goto LABEL_243;
        }
        unsigned int v106 = *(unsigned __int16 *)(a5 + 8);
        int v107 = (__int16)v106;
        LODWORD(v11) = v106 >> 5;
        if (v107 >= 0) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = *(unsigned int *)(a5 + 12);
        }
        *(_DWORD *)(a1 + 76) = v11;
      }
      else
      {
        if ((*(_DWORD *)(a1 + 72) & 0x80000000) == 0)
        {
          uint64_t v26 = *(void *)(a1 + 104);
          int v138 = 65550;
          goto LABEL_243;
        }
        unsigned int v35 = *(unsigned __int16 *)(a5 + 8);
        int v36 = (__int16)v35;
        LODWORD(v11) = v35 >> 5;
        if (v36 >= 0) {
          uint64_t v11 = v11;
        }
        else {
          uint64_t v11 = *(unsigned int *)(a5 + 12);
        }
        *(_DWORD *)(a1 + 72) = v11;
      }
    }
LABEL_22:
    uint64_t v19 = v159;
    if (v159 >= (int)a4) {
      goto LABEL_245;
    }
  }
  if (a7)
  {
    uint64_t v26 = *(void *)(a1 + 104);
    int v138 = 65563;
    goto LABEL_243;
  }
LABEL_227:
  uint64_t v19 = v159;
LABEL_245:
  icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)&v162);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v157);
  return v19;
}

icu::UnicodeSet *sub_18C9AA5F8@<X0>(uint64_t a1@<X0>, const icu::UnicodeString *a2@<X1>, icu::ParsePosition *a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (icu::UnicodeSet *)icu::UMemory::operator new(a5, (icu::UMemory *)0xC8, (unint64_t)a2);
  if (result)
  {
    int v10 = result;
    uint64_t v11 = icu::UnicodeSet::UnicodeSet(result, a2, a3, 1u, *(const icu::SymbolTable **)(a1 + 184), a4);
    icu::UnicodeSet::compact(v11);
    return (icu::UnicodeSet *)sub_18C9AA8F4(a1, v10, a4);
  }
  else
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t sub_18C9AA698(uint64_t result, int a2, void *a3, UErrorCode *a4)
{
  uint64_t v7 = result;
  uint64_t v8 = (icu::UVector *)(result + 384);
  if (*(_DWORD *)(result + 392) < a2) {
    uint64_t result = icu::UVector::setSize((uint64_t (**)(void))(result + 384), a2, a4);
  }
  if (*(int *)a4 <= 0)
  {
    int v9 = sub_18C9AA7AC(v7, a2, a4);
    int v10 = *(unsigned __int16 *)(*(void *)(v7 + 96) + 1162);
    unsigned int v11 = a2 - 1;
    uint64_t result = icu::UVector::elementAt(v8, v11);
    if (result || (v12 = v9 - v10, uint64_t v13 = (icu::UVector *)(v7 + 192), (result = icu::UVector::elementAt(v13, v12)) != 0))
    {
      if (*(int *)a4 <= 0) {
        *a4 = U_INTERNAL_TRANSLITERATOR_ERROR;
      }
    }
    else
    {
      icu::UVector::setElementAt((uint64_t)v8, a3, v11);
      return icu::UVector::setElementAt((uint64_t)v13, a3, v12);
    }
  }
  return result;
}

uint64_t sub_18C9AA7AC(uint64_t a1, signed int a2, UErrorCode *a3)
{
  unsigned __int16 v6 = *(_WORD *)(*(void *)(a1 + 96) + 1162) - 1;
  for (uint64_t i = (icu::UnicodeString *)(a1 + 320); ; icu::UnicodeString::doAppend((uint64_t)i, (uint64_t)&v14, 0, 1))
  {
    unsigned int v8 = *(unsigned __int16 *)(a1 + 328);
    unsigned int v9 = *(__int16 *)(a1 + 328) < 0 ? *(_DWORD *)(a1 + 332) : v8 >> 5;
    if ((int)v9 >= a2) {
      break;
    }
    unsigned __int16 v14 = v6;
  }
  int v10 = a2 - 1;
  if (v9 <= v10)
  {
    uint64_t v12 = 0xFFFFLL;
  }
  else
  {
    if ((v8 & 2) != 0) {
      uint64_t v11 = a1 + 330;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 344);
    }
    uint64_t v12 = *(unsigned __int16 *)(v11 + 2 * v10);
  }
  if (v12 == v6)
  {
    uint64_t v12 = *(unsigned __int16 *)(a1 + 424);
    if (v12 >= *(unsigned __int16 *)(a1 + 426))
    {
      uint64_t v12 = 0;
      *a3 = U_VARIABLE_RANGE_EXHAUSTED;
    }
    else
    {
      *(_WORD *)(a1 + 424) = v12 + 1;
      icu::UVector::addElement((icu::UVector *)(a1 + 192), 0, a3);
      icu::UnicodeString::setCharAt(i, v10, v12);
    }
  }
  return v12;
}

uint64_t sub_18C9AA8B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_18C9AA8F4(uint64_t a1, void *a2, UErrorCode *a3)
{
  unsigned __int16 v6 = (icu::UVector *)(a1 + 192);
  if (*(int *)(a1 + 200) < 1)
  {
LABEL_5:
    if (*(unsigned __int16 *)(a1 + 424) >= *(unsigned __int16 *)(a1 + 426))
    {
      if (a2) {
        (*(void (**)(void *))(*(void *)a2 + 8))(a2);
      }
      unsigned __int16 v8 = 0;
      *a3 = U_VARIABLE_RANGE_EXHAUSTED;
    }
    else
    {
      icu::UVector::addElement(v6, a2, a3);
      if (*(int *)a3 < 1)
      {
        unsigned __int16 v8 = *(_WORD *)(a1 + 424);
        *(_WORD *)(a1 + 424) = v8 + 1;
      }
      else
      {
        if (a2) {
          (*(void (**)(void *))(*(void *)a2 + 8))(a2);
        }
        return 0;
      }
    }
  }
  else
  {
    unsigned int v7 = 0;
    while ((void *)icu::UVector::elementAt(v6, v7) != a2)
    {
      if ((signed int)++v7 >= *(_DWORD *)(a1 + 200)) {
        goto LABEL_5;
      }
    }
    return (unsigned __int16)(*(_WORD *)(*(void *)(a1 + 96) + 1162) + v7);
  }
  return v8;
}

uint64_t sub_18C9AAA24(uint64_t a1, UChar **a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result = uhash_get(*(void *)(a1 + 232), (uint64_t)a2);
  if (!result)
  {
    if (*(__int16 *)(a1 + 440) < 0)
    {
      if (!*(_DWORD *)(a1 + 444)) {
        goto LABEL_12;
      }
    }
    else if (!(*(unsigned __int16 *)(a1 + 440) >> 5))
    {
LABEL_12:
      uint64_t result = (uint64_t)icu::UnicodeString::operator=((UChar **)(a1 + 432), a2);
      unsigned int v13 = *(unsigned __int16 *)(a1 + 426);
      if (*(unsigned __int16 *)(a1 + 424) < v13)
      {
        __int16 v14 = v13 - 1;
        *(_WORD *)(a1 + 426) = v14;
        __int16 v15 = v14;
        return icu::UnicodeString::doAppend(a3, (uint64_t)&v15, 0, 1);
      }
    }
    *a4 = 1;
    return result;
  }
  unsigned int v9 = *(unsigned __int16 *)(result + 8);
  int v10 = (__int16)v9;
  unsigned int v11 = v9 >> 5;
  if (v10 >= 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = *(unsigned int *)(result + 12);
  }

  return icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)result, 0, v12);
}

uint64_t sub_18C9AAB1C(uint64_t a1, UErrorCode *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(unsigned __int16 *)(a1 + 496);
  if (result == 0xFFFF)
  {
    uint64_t result = (uint64_t)icu::UMemory::operator new((uint64_t *)0xFFFF, (icu::UMemory *)0xC8, (unint64_t)a2);
    if (result)
    {
      uint64_t v5 = (icu::UnicodeSet *)result;
      unsigned int v7 = &unk_18CA95F46;
      icu::UnicodeString::UnicodeString(v8, 1, &v7);
      icu::UnicodeSet::UnicodeSet(v5, (const icu::UnicodeString *)v8, a2);
      icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
      uint64_t result = sub_18C9AA8F4(a1, v5, a2);
      *(_WORD *)(a1 + 496) = result;
    }
    else
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return result;
}

double sub_18C9AAC00(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if ((v2 & 0x80000000) == 0)
  {
    if (v2)
    {
      icu::UnicodeString::doReplace(a1 + 8, v2, 0x7FFFFFFFLL, 0, 0, 0);
    }
    else
    {
      if (*(_WORD *)(a1 + 16)) {
        __int16 v3 = 2;
      }
      else {
        __int16 v3 = *(_WORD *)(a1 + 16) & 0x1F;
      }
      *(_WORD *)(a1 + 16) = v3;
    }
  }
  uint64_t v4 = *(unsigned int *)(a1 + 76);
  if ((v4 & 0x80000000) == 0) {
    icu::UnicodeString::doReplace(a1 + 8, 0, v4, 0, 0, 0);
  }
  double result = NAN;
  *(void *)(a1 + 76) = -1;
  *(_WORD *)(a1 + 92) = 0;
  return result;
}

BOOL sub_18C9AAC8C(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  uint64_t v5 = (icu::UnicodeString *)(a1 + 8);
  do
  {
    signed int v6 = v4;
    unint64_t v7 = *(__int16 *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      signed int v8 = *(_DWORD *)(a1 + 20);
    }
    else
    {
      unint64_t v7 = *(unsigned __int16 *)(a1 + 16);
      signed int v8 = v7 >> 5;
    }
    if (v4 >= v8) {
      break;
    }
    unsigned int v9 = icu::UnicodeString::char32At((uint64_t *)v7, v5, v4);
    int v10 = v9 < 0x10000 ? 1 : 2;
    v4 += v10;
  }
  while (sub_18C9A954C(*(void *)(a2 + 184), v9));
  return v6 >= v8;
}

BOOL sub_18C9AAD28(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  uint64_t v5 = (icu::UnicodeString *)(a1 + 8);
  do
  {
    signed int v6 = v4;
    unint64_t v7 = *(__int16 *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      signed int v8 = *(_DWORD *)(a1 + 20);
    }
    else
    {
      unint64_t v7 = *(unsigned __int16 *)(a1 + 16);
      signed int v8 = v7 >> 5;
    }
    if (v4 >= v8) {
      break;
    }
    unsigned int v9 = icu::UnicodeString::char32At((uint64_t *)v7, v5, v4);
    int v10 = v9 < 0x10000 ? 1 : 2;
    v4 += v10;
  }
  while (sub_18C9A94DC(*(void *)(a2 + 184), v9));
  return v6 >= v8;
}

uint64_t sub_18C9AADC4(uint64_t a1, UErrorCode *a2)
{
  icu::UVector::UVector((icu::UVector *)(a1 + 8), a2);
  icu::UVector::UVector((icu::UVector *)(a1 + 48), a2);
  icu::UVector::UVector((icu::UVector *)(a1 + 192), a2);
  *(void *)(a1 + 232) = 0;
  int v5 = 0;
  uhash_init((int32x2_t *)(a1 + 240), (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, &v5);
  if (v5 <= 0)
  {
    *(void *)(a1 + 232) = a1 + 240;
    uhash_setKeyDeleter(a1 + 240, (uint64_t)uprv_deleteUObject);
  }
  *(void *)(a1 + 320) = &unk_1EDA47700;
  *(_WORD *)(a1 + 328) = 2;
  icu::UVector::UVector((icu::UVector *)(a1 + 384), a2);
  *(void *)(a1 + 432) = &unk_1EDA47700;
  *(_WORD *)(a1 + 440) = 2;
  icu::UVector::setDeleter((icu::UVector *)(a1 + 48), (void (*)(void *))uprv_deleteUObject);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uhash_setValueDeleter(*(void *)(a1 + 232), (uint64_t)uprv_deleteUObject);
  return a1;
}

uint64_t sub_18C9AAF10(uint64_t a1)
{
  uint64_t v2 = (icu::UVector *)(a1 + 8);
  for (uint64_t i = (void *)*(unsigned int *)(a1 + 16); i; uint64_t i = (void *)*(unsigned int *)(a1 + 16))
  {
    uint64_t v4 = icu::UVector::orphanElementAt(v2, 0);
    if (v4)
    {
      int v5 = (void *)sub_18C9A9204(v4);
      icu::UMemory::operator delete(v5);
    }
  }
  signed int v6 = *(icu::UnicodeSet **)(a1 + 88);
  if (v6)
  {
    unint64_t v7 = icu::UnicodeSet::~UnicodeSet(i, v6);
    icu::UMemory::operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 184);
  if (v8) {
LABEL_8:
  }
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  while (1)
  {
    unsigned int v9 = (void *)*(unsigned int *)(a1 + 200);
    if (!v9) {
      break;
    }
    uint64_t v8 = icu::UVector::orphanElementAt((icu::UVector *)(a1 + 192), 0);
    if (v8) {
      goto LABEL_8;
    }
  }
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 432));
  icu::UVector::~UVector((icu::UVector *)(a1 + 384));
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)(a1 + 320));
  unsigned int v11 = *(unsigned char **)(a1 + 232);
  if (v11) {
    uhash_close(v11);
  }
  icu::UVector::~UVector((icu::UVector *)(a1 + 192));
  icu::UVector::~UVector((icu::UVector *)(a1 + 48));
  icu::UVector::~UVector(v2);
  return a1;
}

__n128 sub_18C9AB028(uint64_t a1, uint64_t a2, int a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    sub_18C9AB084(a1, a2, a3, a5);
    *(_OWORD *)a4 = *(_OWORD *)(a1 + 108);
    __n128 result = *(__n128 *)(a1 + 124);
    long long v8 = *(_OWORD *)(a1 + 140);
    long long v9 = *(_OWORD *)(a1 + 156);
    *(void *)(a4 + 64) = *(void *)(a1 + 172);
    *(_OWORD *)(a4 + 32) = v8;
    *(_OWORD *)(a4 + 48) = v9;
    *(__n128 *)(a4 + 16) = result;
  }
  return result;
}

void sub_18C9AB084(uint64_t a1, uint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 108) = -1;
  long long v8 = (void *)(a1 + 108);
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  long long v9 = (icu::UVector *)(a1 + 8);
  while (*(_DWORD *)(a1 + 16))
  {
    if (icu::UVector::orphanElementAt(v9, 0))
    {
      int v10 = (void *)sub_18C9A9204();
      icu::UMemory::operator delete(v10);
    }
  }
  if (*(int *)a4 > 0) {
    return;
  }
  int v93 = (uint64_t (**)(void *))(a1 + 48);
  icu::UVector::removeAllElements(a1 + 48);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = a3;
  unsigned int v11 = *(icu::UnicodeSet **)(a1 + 88);
  if (v11)
  {
    icu::UnicodeSet::~UnicodeSet(v11);
    icu::UMemory::operator delete(v12);
  }
  *(void *)(a1 + 88) = 0;
  while (*(_DWORD *)(a1 + 200))
  {
    uint64_t v13 = icu::UVector::orphanElementAt((icu::UVector *)(a1 + 192), 0);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  uhash_removeAll(*(void *)(a1 + 232));
  unsigned int v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x20, v14);
  if (!v16)
  {
    *(void *)(a1 + 184) = 0;
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }
  unsigned int v96 = 0;
  *unsigned int v16 = (uint64_t)&unk_1EDA51908;
  v16[1] = 0;
  v16[2] = a1 + 192;
  v16[3] = a1 + 232;
  *(void *)(a1 + 184) = v16;
  *(_WORD *)(a1 + 496) = -1;
  long long v106 = 0u;
  uint64_t v109 = 0;
  long long v108 = 0u;
  long long v107 = 0u;
  uint64_t v104 = 0;
  __int16 v105 = &unk_1EDA47700;
  LOWORD(v106) = 2;
  long long v101 = 0u;
  long long v103 = 0u;
  long long v102 = 0u;
  unsigned int v100 = (UChar *)&unk_1EDA47700;
  LOWORD(v101) = 2;
  unsigned int v18 = *(unsigned __int16 *)(a2 + 8);
  int v19 = (__int16)v18;
  unsigned int v20 = v18 >> 5;
  if (v19 >= 0) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = *(unsigned int *)(a2 + 12);
  }
  *(void *)(a1 + 88) = 0;
  int v92 = -1;
  if ((int)v21 < 1 || *(int *)a4 > 0)
  {
LABEL_119:
    LODWORD(v66) = (unsigned __int16)v101 >> 5;
    if ((v101 & 0x8000u) == 0) {
      unint64_t v66 = v66;
    }
    else {
      unint64_t v66 = DWORD1(v101);
    }
    if ((int)v66 < 1) {
      goto LABEL_135;
    }
    unsigned int v67 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v66, (icu::UMemory *)0x40, v17);
    if (v67)
    {
      uint64_t v68 = v67;
      icu::UnicodeString::UnicodeString(v67, &v100);
      if (*(_DWORD *)(a1 + 104)) {
        icu::UVector::insertElementAt(v93, v68, 0, a4);
      }
      else {
        icu::UVector::adoptElement(v93, v68, a4);
      }
      goto LABEL_135;
    }
LABEL_165:
    uint64_t v41 = 7;
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_166;
  }
  uint64_t v22 = 0;
  unsigned int v94 = 1;
  unsigned int v96 = 0;
  int v92 = -1;
  while (1)
  {
    unsigned int v23 = *(unsigned __int16 *)(a2 + 8);
    if ((v23 & 0x8000u) == 0) {
      unsigned int v24 = v23 >> 5;
    }
    else {
      unsigned int v24 = *(_DWORD *)(a2 + 12);
    }
    if (v24 <= v22)
    {
      uint64_t v27 = 0xFFFFLL;
    }
    else
    {
      BOOL v25 = (v23 & 2) == 0;
      uint64_t v26 = a2 + 10;
      if (v25) {
        uint64_t v26 = *(void *)(a2 + 24);
      }
      uint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (int)v22);
    }
    int v28 = v22 + 1;
    if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v27) || v27 == 59)
    {
      uint64_t v22 = (v22 + 1);
      goto LABEL_29;
    }
    if (v27 == 35) {
      break;
    }
    ++v96;
    if ((int)v22 + 3 > (int)v21 || icu::UnicodeString::doCompare(a2, v22, 2, (uint64_t)":", 0, 2))
    {
      if (v94)
      {
        int32_t v32 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v94, (icu::UMemory *)0x40, v17);
        if (!v32) {
          goto LABEL_165;
        }
        int32_t v33 = v32;
        icu::UnicodeString::UnicodeString(v32, &v100);
        if (*(_DWORD *)(a1 + 104)) {
          icu::UVector::insertElementAt(v93, v33, 0, a4);
        }
        else {
          icu::UVector::adoptElement(v93, v33, a4);
        }
        uint64_t v41 = *(unsigned int *)a4;
        if ((int)v41 > 0) {
          goto LABEL_166;
        }
        if (v101) {
          uint64_t v42 = 2;
        }
        else {
          uint64_t v42 = v101 & 0x1F;
        }
        LOWORD(v101) = v42;
        int v43 = icu::UMemory::operator new((uint64_t *)v42, (icu::UMemory *)0x490, v34);
        if (!v43)
        {
          *(void *)(a1 + 96) = 0;
          goto LABEL_165;
        }
        uint64_t v44 = sub_18C9A8EE0(v43, a4);
        *(void *)(a1 + 96) = v44;
        *(void *)(*(void *)(a1 + 184) + 8) = v44;
        *(_WORD *)(v44 + 1162) = -4096;
        if (!*(_DWORD *)(a1 + 16)) {
          *(_DWORD *)(a1 + 424) = -117379072;
        }
      }
      if (sub_18C9ABBEC((icu::ICU_Utility *)a2, (const icu::UnicodeString *)v22, (int *)v21))
      {
        uint64_t v45 = sub_18C9ABCA8(a1, (icu::ICU_Utility *)a2, v22, (int *)v21, a4);
        if ((v45 & 0x80000000) != 0)
        {
          sub_18C9ABB0C(a1, 65562, a2, v22, a4);
          unsigned int v94 = 0;
          uint64_t v22 = 0xFFFFFFFFLL;
        }
        else
        {
          unsigned int v94 = 0;
          uint64_t v22 = v45;
        }
      }
      else
      {
        uint64_t v22 = sub_18C9ABEC4(a1, a2, v22, v21, a4);
        unsigned int v94 = 0;
      }
      goto LABEL_29;
    }
    uint64_t v35 = (v22 + 2);
    unsigned int v36 = *(unsigned __int16 *)(a2 + 8);
    if ((v36 & 0x8000u) == 0) {
      unsigned int v37 = v36 >> 5;
    }
    else {
      unsigned int v37 = *(_DWORD *)(a2 + 12);
    }
    if (v37 <= v35)
    {
      uint64_t v39 = 0xFFFFLL;
    }
    else
    {
      BOOL v25 = (v36 & 2) == 0;
      uint64_t v38 = a2 + 10;
      if (v25) {
        uint64_t v38 = *(void *)(a2 + 24);
      }
      uint64_t v39 = *(unsigned __int16 *)(v38 + 2 * (int)v35);
    }
    if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v39) && (int)v35 < (int)v21)
    {
      uint64_t v46 = (int)v35 + 1;
      do
      {
        unsigned int v47 = *(unsigned __int16 *)(a2 + 8);
        if ((v47 & 0x8000u) == 0) {
          unsigned int v48 = v47 >> 5;
        }
        else {
          unsigned int v48 = *(_DWORD *)(a2 + 12);
        }
        uint64_t v35 = (v35 + 1);
        if (v48 <= v35)
        {
          uint64_t v50 = 0xFFFFLL;
        }
        else
        {
          BOOL v25 = (v47 & 2) == 0;
          uint64_t v49 = a2 + 10;
          if (v25) {
            uint64_t v49 = *(void *)(a2 + 24);
          }
          uint64_t v50 = *(unsigned __int16 *)(v49 + 2 * v46);
        }
        if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)v50)) {
          break;
        }
      }
      while (v46++ < v21);
    }
    unsigned int v99 = v35;
    if (!v94)
    {
      uint64_t v52 = *(void **)(a1 + 96);
      if (v52)
      {
        if (*(_DWORD *)(a1 + 104)) {
          icu::UVector::insertElementAt((uint64_t (**)(void *))v9, v52, 0, a4);
        }
        else {
          icu::UVector::addElement(v9, v52, a4);
        }
        if (*(int *)a4 >= 1 && *(void *)(a1 + 96))
        {
          uint64_t v53 = (void *)sub_18C9A9204();
          icu::UMemory::operator delete(v53);
        }
        *(void *)(a1 + 96) = 0;
      }
    }
    uint64_t v54 = sub_18C9F2080(a2, (const icu::UnicodeString *)&v99, *(_DWORD *)(a1 + 104), (int *)a4);
    if (v99 != v35 && icu::ICU_Utility::parseChar(a2, (const icu::UnicodeString *)&v99, 59))
    {
      if (*(_DWORD *)(a1 + 104))
      {
        LOWORD(v98) = 59;
        icu::UnicodeString::doReplace((uint64_t)&v100, 0, 0, (uint64_t)&v98, 0, 1);
        sub_18C9ABAE4((icu::UnicodeString *)&v100, 0, (icu::UnicodeString *)(v54 + 1));
        if (!v54) {
          goto LABEL_116;
        }
      }
      else
      {
        unsigned int v59 = *((unsigned __int16 *)v54 + 8);
        int v60 = (__int16)v59;
        unsigned int v61 = v59 >> 5;
        if (v60 >= 0) {
          uint64_t v62 = v61;
        }
        else {
          uint64_t v62 = *((unsigned int *)v54 + 5);
        }
        uint64_t v63 = icu::UnicodeString::doAppend((uint64_t)&v100, (const icu::UnicodeString *)(v54 + 1), 0, v62);
        LOWORD(v98) = 59;
        icu::UnicodeString::doAppend(v63, (uint64_t)&v98, 0, 1);
      }
      goto LABEL_115;
    }
    int v98 = -1;
    int v56 = sub_18C9F3124((icu::ICU_Utility *)a2, (icu::UnicodeString *)&v99, *(_DWORD *)(a1 + 104), &v98, 0);
    if (!v56)
    {
      sub_18C9ABB0C(a1, 65569, a2, v35, a4);
      if (!v54) {
        goto LABEL_116;
      }
      goto LABEL_115;
    }
    unsigned int v57 = v56;
    if (!icu::ICU_Utility::parseChar(a2, (const icu::UnicodeString *)&v99, 59)
      || (*(_DWORD *)(a1 + 104) != 0) == (v98 == 0))
    {
      goto LABEL_106;
    }
    if (*(void *)(a1 + 88))
    {
      sub_18C9ABB0C(a1, 65559, a2, v35, a4);
LABEL_106:
      icu::UnicodeSet::~UnicodeSet(v57);
      icu::UMemory::operator delete(v58);
      if (!v54) {
        goto LABEL_116;
      }
LABEL_115:
      icu::UnicodeString::~UnicodeString((void *)v55, (icu::UnicodeString *)(v54 + 17));
      icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)(v54 + 9));
      icu::UnicodeString::~UnicodeString(v65, (icu::UnicodeString *)(v54 + 1));
      icu::UMemory::operator delete(v54);
      goto LABEL_116;
    }
    *(void *)(a1 + 88) = v57;
    unint64_t v55 = v96;
    int v92 = v96;
    if (v54) {
      goto LABEL_115;
    }
LABEL_116:
    uint64_t v22 = v99;
    unsigned int v94 = 1;
LABEL_29:
    if ((int)v22 >= (int)v21 || *(int *)a4 >= 1) {
      goto LABEL_118;
    }
  }
  unsigned int v29 = *(unsigned __int16 *)(a2 + 8);
  if ((int)v22 >= -1)
  {
    if ((v29 & 0x8000) != 0)
    {
      int v31 = *(_DWORD *)(a2 + 12);
      if (v31 >= v28) {
        int v30 = v22 + 1;
      }
      else {
        int v30 = *(_DWORD *)(a2 + 12);
      }
    }
    else
    {
      int v31 = v29 >> 5;
      if (v31 >= v28) {
        int v30 = v22 + 1;
      }
      else {
        int v30 = v31;
      }
    }
  }
  else
  {
    int v30 = 0;
    if ((v29 & 0x8000) != 0) {
      int v31 = *(_DWORD *)(a2 + 12);
    }
    else {
      int v31 = v29 >> 5;
    }
  }
  int v40 = icu::UnicodeString::doIndexOf(a2, 0xAu, v30, v31 - v30);
  uint64_t v22 = (v40 + 1);
  if (v40 != -1) {
    goto LABEL_29;
  }
LABEL_118:
  if (v94) {
    goto LABEL_119;
  }
  uint64_t v69 = *(void **)(a1 + 96);
  if (v69)
  {
    if (*(_DWORD *)(a1 + 104)) {
      icu::UVector::insertElementAt((uint64_t (**)(void *))v9, v69, 0, a4);
    }
    else {
      icu::UVector::addElement(v9, v69, a4);
    }
    if (*(int *)a4 >= 1)
    {
      if (*(void *)(a1 + 96))
      {
        unsigned int v70 = (void *)sub_18C9A9204();
        icu::UMemory::operator delete(v70);
      }
      *(void *)(a1 + 96) = 0;
      goto LABEL_135;
    }
LABEL_136:
    int v71 = *(_DWORD *)(a1 + 16);
    if (v71 >= 1)
    {
      unsigned int v72 = 0;
      int v95 = *(_DWORD *)(a1 + 16);
      do
      {
        uint64_t v73 = icu::UVector::elementAt(v9, v72);
        uint64_t v74 = v73;
        uint64_t v75 = *(int *)(a1 + 200);
        *(_DWORD *)(v73 + 1164) = v75;
        unsigned int v97 = v72;
        if (v75)
        {
          unsigned int v76 = uprv_malloc(8 * v75);
          *(void *)(v74 + 1152) = v76;
          if (!v76) {
            goto LABEL_165;
          }
          *(unsigned char *)(v74 + 1160) = v72 == 0;
          if (*(int *)(v74 + 1164) >= 1)
          {
            uint64_t v77 = 0;
            do
            {
              *(void *)(*(void *)(v74 + 1152) + 8 * v77) = icu::UVector::elementAt((icu::UVector *)(a1 + 192), v77);
              ++v77;
            }
            while (v77 < *(int *)(v74 + 1164));
          }
        }
        else
        {
          *(void *)(v73 + 1152) = 0;
        }
        uhash_removeAll(*(void *)(v74 + 1064));
        unsigned int v99 = -1;
        while (1)
        {
          uint64_t Element = uhash_nextElement(*(uint64_t **)(a1 + 232), (int *)&v99);
          uint64_t v79 = Element;
          if (!Element) {
            break;
          }
          uint64_t v80 = (*(uint64_t (**)(void))(**(void **)(Element + 8) + 56))(*(void *)(Element + 8));
          if (!v80) {
            goto LABEL_165;
          }
          uint64_t v83 = v80;
          uint64_t v84 = *(UChar ***)(v79 + 16);
          uint64_t v85 = *(void *)(v74 + 1064);
          unsigned int v86 = (icu::UnicodeString *)icu::UMemory::operator new(v82, (icu::UMemory *)0x40, v81);
          uint64_t v87 = (uint64_t)v86;
          if (v86) {
            icu::UnicodeString::UnicodeString(v86, v84);
          }
          uhash_put(v85, v87, v83, (int *)a4);
        }
        unsigned int v72 = v97 + 1;
        int v71 = v95;
      }
      while (v97 + 1 != v95);
    }
    icu::UVector::removeAllElements(a1 + 192);
    if (*(void *)(a1 + 88))
    {
      if ((int v88 = *(_DWORD *)(a1 + 104)) == 0 && v92 != 1 || v88 == 1 && v92 != v96) {
        *a4 = U_MISPLACED_COMPOUND_FILTER;
      }
    }
    if (v71 >= 1)
    {
      for (unsigned int i = 0; i != v71; ++i)
      {
        uint64_t v90 = icu::UVector::elementAt(v9, i);
        sub_18C9ADEAC(v90 + 8, v8, a4);
      }
    }
    uint64_t v41 = *(unsigned int *)(a1 + 56);
    if (v41 == 1)
    {
      uint64_t v41 = *(unsigned __int16 *)(icu::UVector::elementAt((icu::UVector *)v93, 0) + 8);
      if (v41 <= 0x1F) {
        icu::UVector::removeElementAt((uint64_t (**)(void))v93, 0);
      }
    }
  }
  else
  {
LABEL_135:
    uint64_t v41 = *(unsigned int *)a4;
    if ((int)v41 <= 0) {
      goto LABEL_136;
    }
  }
LABEL_166:
  icu::UnicodeString::~UnicodeString((void *)v41, (icu::UnicodeString *)&v100);
  icu::UnicodeString::~UnicodeString(v91, (icu::UnicodeString *)&v105);
}

uint64_t sub_18C9ABAD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  return v1;
}

uint64_t sub_18C9ABAE4(icu::UnicodeString *a1, uint64_t a2, icu::UnicodeString *a3)
{
  unsigned int v3 = *((unsigned __int16 *)a3 + 4);
  int v4 = (__int16)v3;
  unsigned int v5 = v3 >> 5;
  if (v4 >= 0) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = *((unsigned int *)a3 + 3);
  }
  return icu::UnicodeString::doReplace(a1, a2, 0, a3, 0, v6);
}

uint64_t sub_18C9ABB0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 112) = a4;
  int v10 = uprv_max((a4 - 15), 0);
  int v11 = a4 - v10;
  icu::UnicodeString::doExtract((char *)a3, v10, a4 - v10, a1 + 116, 0);
  *(_WORD *)(a1 + 116 + 2 * v11) = 0;
  unsigned int v12 = *(unsigned __int16 *)(a3 + 8);
  int v13 = (__int16)v12;
  int v14 = v12 >> 5;
  if (v13 >= 0) {
    int v15 = v14;
  }
  else {
    int v15 = *(_DWORD *)(a3 + 12);
  }
  int v16 = uprv_min((a4 + 15), v15);
  int v17 = v16 - a4;
  uint64_t v18 = a1 + 148;
  icu::UnicodeString::doExtract((char *)a3, a4, v16 - a4, v18, 0);
  *(_WORD *)(v18 + 2 * v17) = 0;
  *a5 = a2;
  return a4;
}

BOOL sub_18C9ABBEC(icu::ICU_Utility *a1, const icu::UnicodeString *a2, int *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v9 = L"use ";
  icu::UnicodeString::UnicodeString(v10, 1, &v9);
  LODWORD(a3) = icu::ICU_Utility::parsePattern(a1, a2, a3, (uint64_t)v10, 0, v6);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v10);
  return (int)a3 >= 0;
}

uint64_t sub_18C9ABCA8(uint64_t a1, icu::ICU_Utility *a2, int a3, int *a4, _DWORD *a5)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  v28[0] = 0;
  long long v9 = (const icu::UnicodeString *)(a3 + 4);
  uint64_t v26 = L"~variable range # #~;";
  icu::UnicodeString::UnicodeString(v27, 1, &v26);
  uint64_t v11 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, (const icu::UnicodeString *)v28, v10);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v27);
  if ((v11 & 0x80000000) != 0)
  {
    BOOL v25 = L"~maximum backup #~;";
    icu::UnicodeString::UnicodeString(v27, 1, &v25);
    uint64_t v11 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, (const icu::UnicodeString *)v28, v15);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v27);
    if ((v11 & 0x80000000) != 0)
    {
      unsigned int v24 = L"~nfd rules~;";
      icu::UnicodeString::UnicodeString(v27, 1, &v24);
      uint64_t v11 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, 0, v17);
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v27);
      if ((v11 & 0x80000000) != 0)
      {
        unsigned int v23 = "~";
        icu::UnicodeString::UnicodeString(v27, 1, &v23);
        int v20 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, 0, v19);
        icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v27);
        if (v20 < 0) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v20;
        }
      }
    }
  }
  else
  {
    __int16 v13 = WORD2(v28[0]);
    if (SHIDWORD(v28[0]) >= 0x10000
      || (__int16 v14 = v28[0], (v28[0] & 0x80000000) != 0)
      || SLODWORD(v28[0]) > SHIDWORD(v28[0]))
    {
      *a5 = 65562;
    }
    else
    {
      *(_WORD *)(*(void *)(a1 + 96) + 1162) = v28[0];
      if (!*(_DWORD *)(a1 + 16))
      {
        *(_WORD *)(a1 + 424) = v14;
        *(_WORD *)(a1 + 426) = v13 + 1;
      }
    }
  }
  return v11;
}

uint64_t sub_18C9ABEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  unsigned int v10 = *(unsigned __int16 *)(a1 + 328);
  if (v10)
  {
    icu::UnicodeString::unBogus(a1 + 320);
    goto LABEL_8;
  }
  if ((v10 & 0x8000) != 0)
  {
    if (!*(_DWORD *)(a1 + 332)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v10 >> 5) {
LABEL_7:
  }
    *(_WORD *)(a1 + 328) &= 0x1Fu;
LABEL_8:
  icu::UVector::removeAllElements(a1 + 384);
  uint64_t v97 = 0;
  long long v99 = 0u;
  uint64_t v102 = 0;
  uint64_t v108 = a1;
  long long v100 = 0u;
  long long v101 = 0u;
  int v98 = &unk_1EDA47700;
  LOWORD(v99) = 2;
  uint64_t v103 = -1;
  int v104 = -1;
  uint64_t v105 = 0;
  int v106 = 0;
  uint64_t v107 = 1;
  uint64_t v87 = 0;
  memset(v89, 0, sizeof(v89));
  uint64_t v90 = 0;
  uint64_t v96 = a1;
  int v88 = (UChar *)&unk_1EDA47700;
  LOWORD(v89[0]) = 2;
  uint64_t v91 = -1;
  int v92 = -1;
  uint64_t v93 = 0;
  int v94 = 0;
  uint64_t v95 = 1;
  if (*(_WORD *)(a1 + 440)) {
    __int16 v11 = 2;
  }
  else {
    __int16 v11 = *(_WORD *)(a1 + 440) & 0x1F;
  }
  *(_WORD *)(a1 + 440) = v11;
  uint64_t v12 = sub_18C9A95BC((uint64_t)&v97, a2, a3, a4, a5);
  __int16 v13 = (void *)*(unsigned int *)a5;
  if ((int)v13 > 0) {
    goto LABEL_167;
  }
  uint64_t v14 = v12;
  if (v12 == a4
    || ((v84 = (int)v12, v15 = (int)v12 - 1, unsigned int v16 = *(unsigned __int16 *)(a2 + 8), (v16 & 0x8000u) == 0)
      ? (unsigned int v17 = v16 >> 5)
      : (unsigned int v17 = *(_DWORD *)(a2 + 12)),
        v17 <= v15
      ? (int v19 = 0xFFFF)
      : ((v16 & 2) != 0 ? (uint64_t v18 = a2 + 10) : (uint64_t v18 = *(void *)(a2 + 24)), v19 = *(unsigned __int16 *)(v18 + 2 * v15)),
        !u_strchr((const UChar *)asc_18CA95F38, v19)))
  {
    sub_18C9ABB0C(a1, 65547, a2, a3, a5);
    goto LABEL_167;
  }
  if (v19 != 60 || (int)v14 >= (int)a4)
  {
    if (v19 == 8592)
    {
      int v82 = 60;
    }
    else
    {
      if (v19 != 8596)
      {
        uint64_t v22 = (icu::UVector *)(a1 + 384);
        if (v19 != 8594)
        {
          int v82 = v19;
          goto LABEL_48;
        }
        int v25 = 62;
        goto LABEL_43;
      }
      int v82 = 126;
    }
    uint64_t v22 = (icu::UVector *)(a1 + 384);
    goto LABEL_48;
  }
  unsigned int v20 = *(unsigned __int16 *)(a2 + 8);
  if ((v20 & 0x8000u) == 0) {
    unsigned int v21 = v20 >> 5;
  }
  else {
    unsigned int v21 = *(_DWORD *)(a2 + 12);
  }
  int v82 = 60;
  uint64_t v22 = (icu::UVector *)(a1 + 384);
  if (v21 <= v14) {
    goto LABEL_48;
  }
  if ((v20 & 2) != 0) {
    uint64_t v23 = a2 + 10;
  }
  else {
    uint64_t v23 = *(void *)(a2 + 24);
  }
  int v24 = *(unsigned __int16 *)(v23 + 2 * v84);
  if (v24 == 62) {
    uint64_t v14 = (v14 + 1);
  }
  else {
    uint64_t v14 = v14;
  }
  if (v24 == 62) {
    int v25 = 126;
  }
  else {
    int v25 = 60;
  }
LABEL_43:
  int v82 = v25;
LABEL_48:
  uint64_t v26 = sub_18C9A95BC((uint64_t)&v87, a2, v14, a4, a5);
  __int16 v13 = (void *)*(unsigned int *)a5;
  if ((int)v13 > 0) {
    goto LABEL_167;
  }
  uint64_t v28 = v26;
  if ((int)v26 < (int)a4)
  {
    unsigned int v29 = v26 - 1;
    unsigned int v30 = *(unsigned __int16 *)(a2 + 8);
    unsigned int v31 = (v30 & 0x8000u) == 0 ? v30 >> 5 : *(_DWORD *)(a2 + 12);
    if (v31 <= v29
      || ((v30 & 2) != 0 ? (uint64_t v32 = a2 + 10) : (uint64_t v32 = *(void *)(a2 + 24)), *(_WORD *)(v32 + 2 * (int)v29) != 59))
    {
      int v35 = 65555;
      goto LABEL_165;
    }
  }
  unsigned int v33 = *(unsigned __int16 *)(a1 + 440);
  if (v82 == 61)
  {
    if ((v33 & 0x8000) != 0) {
      unsigned int v34 = *(_DWORD *)(a1 + 444);
    }
    else {
      unsigned int v34 = v33 >> 5;
    }
    if (!v34)
    {
      uint64_t v37 = a1;
      int v35 = 0x10000;
      goto LABEL_166;
    }
    if ((__int16)v99 < 0)
    {
      if (DWORD1(v99) != 1)
      {
LABEL_84:
        uint64_t v37 = a1;
        int v35 = 65541;
        goto LABEL_166;
      }
    }
    else if ((v99 & 0xFFE0) != 0x20)
    {
      goto LABEL_84;
    }
    if ((v99 & 2) != 0) {
      uint64_t v39 = (unsigned __int16 *)&v99 + 1;
    }
    else {
      uint64_t v39 = (unsigned __int16 *)v100;
    }
    if (*v39 != *(unsigned __int16 *)(a1 + 426) || (_WORD)v106 || (_WORD)v94) {
      goto LABEL_84;
    }
    int v40 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)BYTE1(v94), (icu::UMemory *)0x40, v27);
    if (v40)
    {
      uint64_t v41 = (uint64_t)v40;
      icu::UnicodeString::UnicodeString(v40, &v88);
      sub_18C7EF48C((uint64_t *)(a1 + 232), (UChar **)(a1 + 432), v41, (int *)a5);
      __int16 v13 = (void *)((unsigned __int16)(*(_WORD *)(a1 + 426))++ + 1);
LABEL_186:
      a3 = v28;
      goto LABEL_167;
    }
    goto LABEL_188;
  }
  if ((v33 & 0x8000) != 0) {
    unsigned int v36 = *(_DWORD *)(a1 + 444);
  }
  else {
    unsigned int v36 = v33 >> 5;
  }
  if (v36)
  {
    int v35 = 65554;
    goto LABEL_165;
  }
  if (*(__int16 *)(a1 + 328) < 0) {
    int v38 = *(_DWORD *)(a1 + 332);
  }
  else {
    int v38 = *(unsigned __int16 *)(a1 + 328) >> 5;
  }
  if (v38 > *(_DWORD *)(a1 + 392)) {
    sub_18C9ABB0C(a1, 65553, a2, a3, a5);
  }
  unint64_t v42 = 0;
  while ((*(__int16 *)(a1 + 328) & 0x80000000) == 0)
  {
    if (v42 >= (unint64_t)*(unsigned __int16 *)(a1 + 328) >> 5) {
      goto LABEL_100;
    }
    unint64_t v43 = (unint64_t)*(unsigned __int16 *)(a1 + 328) >> 5;
LABEL_94:
    if (v43 > v42)
    {
      uint64_t v44 = a1 + 330;
      if ((*(_WORD *)(a1 + 328) & 2) == 0) {
        uint64_t v44 = *(void *)(a1 + 344);
      }
      if (!*(_WORD *)(v44 + 2 * v42)) {
        sub_18C9ABB0C(a1, 65568, a2, a3, a5);
      }
    }
    ++v42;
  }
  if ((uint64_t)v42 < *(int *)(a1 + 332))
  {
    unint64_t v43 = *(unsigned int *)(a1 + 332);
    goto LABEL_94;
  }
LABEL_100:
  if (*(int *)(a1 + 392) >= 1)
  {
    signed int v45 = 0;
    do
    {
      if (!icu::UVector::elementAt(v22, v45)) {
        sub_18C9ABB0C(a1, 65568, a2, a3, a5);
      }
      ++v45;
    }
    while (v45 < *(_DWORD *)(a1 + 392));
  }
  __int16 v13 = (void *)*(unsigned int *)(a1 + 104);
  if (v82 == 126)
  {
    BOOL v46 = v13 == 1;
    if (v13 == 1) {
      unsigned int v47 = &v87;
    }
    else {
      unsigned int v47 = &v97;
    }
    if (v13 == 1) {
      unsigned int v48 = &v97;
    }
    else {
      unsigned int v48 = &v87;
    }
    uint64_t v85 = (uint64_t)v48;
    sub_18C9AAC00((uint64_t)v48);
    *((_DWORD *)v47 + 18) = -1;
    *((_DWORD *)v47 + 21) = 0;
    goto LABEL_120;
  }
  if ((v82 == 62) == (v13 != 0)) {
    goto LABEL_186;
  }
  BOOL v49 = v13 == 1;
  BOOL v46 = v13 == 1;
  uint64_t v50 = &v97;
  if (v49) {
    unsigned int v47 = &v87;
  }
  else {
    unsigned int v47 = &v97;
  }
  if (!v49) {
    uint64_t v50 = &v87;
  }
  uint64_t v85 = (uint64_t)v50;
LABEL_120:
  if (v46) {
    unsigned int v51 = &v87;
  }
  else {
    unsigned int v51 = &v97;
  }
  if ((*((_DWORD *)v51 + 19) & 0x80000000) != 0) {
    *((_DWORD *)v51 + 19) = 0;
  }
  if (v46) {
    uint64_t v52 = &v87;
  }
  else {
    uint64_t v52 = &v97;
  }
  if ((v52[10] & 0x80000000) != 0)
  {
    uint64_t v53 = v89;
    if (!v46) {
      uint64_t v53 = &v99;
    }
    int v54 = *(__int16 *)v53;
    unint64_t v55 = (char *)v89 + 4;
    if (!v46) {
      unint64_t v55 = (char *)&v99 + 4;
    }
    int v56 = *(_DWORD *)v55;
    if (v54 >= 0) {
      int v56 = (unsigned __int16)v54 >> 5;
    }
    *((_DWORD *)v52 + 20) = v56;
  }
  unsigned int v57 = (char *)&v103 + 4;
  if (v46)
  {
    uint64_t v58 = &v104;
  }
  else
  {
    unsigned int v57 = (char *)&v91 + 4;
    uint64_t v58 = &v92;
  }
  if (v46) {
    int v59 = v91;
  }
  else {
    int v59 = v103;
  }
  if ((*(_DWORD *)v57 & 0x80000000) != 0 && *v58 < 0 && v59 < 0)
  {
    int v60 = v46 ? &v97 : &v87;
    uint64_t v83 = v60;
    int v61 = *((_DWORD *)v60 + 21);
    int v62 = v46 ? v103 : v91;
    uint64_t v63 = &v94;
    if (v46)
    {
      uint64_t v63 = &v106;
      int v64 = (char *)&v106 + 1;
    }
    else
    {
      int v64 = (char *)&v94 + 1;
    }
    if ((v62 > -1 || v61 == 0) && !*(unsigned char *)v63 && !*v64)
    {
      uint64_t v66 = (uint64_t)v47;
      unsigned int v67 = v51;
      unint64_t v81 = v52;
      if (sub_18C9AAD28(v66, a1) && sub_18C9AAC8C(v85, a1) && *((_DWORD *)v67 + 19) <= *((_DWORD *)v81 + 20))
      {
        int v71 = (uint64_t *)*(unsigned int *)(a1 + 392);
        if ((int)v71 < 1)
        {
          unsigned int v86 = 0;
        }
        else
        {
          unsigned int v72 = (void **)uprv_malloc(8 * (void)v71);
          if (!v72) {
            goto LABEL_188;
          }
          unsigned int v86 = v72;
          icu::UVector::toArray(v22, v72);
        }
        uint64_t v73 = icu::UMemory::operator new(v71, (icu::UMemory *)0x88, v68);
        if (v73)
        {
          uint64_t v74 = v73;
          if (v46) {
            uint64_t v75 = (void **)&v88;
          }
          else {
            uint64_t v75 = &v98;
          }
          if (v46) {
            unsigned int v76 = &v98;
          }
          else {
            unsigned int v76 = (void **)&v88;
          }
          uint64_t v77 = &v103;
          if (!v46) {
            uint64_t v77 = &v91;
          }
          unsigned int v78 = (char *)&v94;
          if (!v46) {
            unsigned int v78 = (char *)&v106;
          }
          char v79 = *v78;
          uint64_t v80 = (char *)&v106 + 1;
          if (v46) {
            uint64_t v80 = (char *)&v94 + 1;
          }
          sub_18C9ACD1C((uint64_t)v73, (uint64_t)v75, *((_DWORD *)v67 + 19), *((_DWORD *)v81 + 20), (uint64_t)v76, *(_DWORD *)v77, *((_DWORD *)v83 + 21), (uint64_t)v86, *(_DWORD *)(a1 + 392), v79, *v80, *(void *)(a1 + 96), (int *)a5);
          sub_18C9ADE24(*(void *)(a1 + 96) + 8, v74, a5);
          goto LABEL_186;
        }
        uprv_free(v86);
LABEL_188:
        uint64_t v37 = a1;
        int v35 = 7;
        goto LABEL_166;
      }
    }
  }
  int v35 = 65537;
LABEL_165:
  uint64_t v37 = a1;
LABEL_166:
  sub_18C9ABB0C(v37, v35, a2, a3, a5);
LABEL_167:
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v88);
  icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)&v98);
  return a3;
}

unint64_t utrans_stripRules(unsigned __int16 *a1, int a2, char *a3, _DWORD *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  bzero(a3, 2 * a2);
  unint64_t v7 = a3;
  if (a2 >= 1)
  {
    BOOL v8 = 0;
    long long v9 = 0uLL;
    unint64_t v7 = a3;
    unint64_t v10 = (unint64_t)&a1[a2];
    while (1)
    {
      unsigned int v11 = *a1;
      if ((v11 & 0xFC00) == 0xD800)
      {
        unsigned int v11 = a1[1] + (v11 << 10) - 56613888;
        a1 += 2;
      }
      else
      {
        ++a1;
        if (v11 == 39)
        {
          BOOL v8 = !v8;
          goto LABEL_54;
        }
      }
      if (v8)
      {
        BOOL v8 = 1;
        goto LABEL_36;
      }
      if (v11 != 92) {
        break;
      }
      if ((unint64_t)a1 >= v10)
      {
        BOOL v8 = 0;
        LOWORD(v11) = 92;
        goto LABEL_54;
      }
      unsigned int v12 = *a1;
      LOWORD(v11) = 92;
      if (v12 <= 0xC)
      {
        if (v12 != 10) {
          goto LABEL_51;
        }
      }
      else if (v12 != 13)
      {
        if (v12 == 39)
        {
          BOOL v8 = 1;
        }
        else
        {
          if (v12 == 117 && (unint64_t)(a1 + 5) < v10)
          {
            int v27 = 0;
            void v28[2] = v9;
            v28[3] = v9;
            v28[0] = v9;
            v28[1] = v9;
            icu::UnicodeString::UnicodeString((uint64_t)v28, (uint64_t)a1, 5);
            __int16 v13 = (icu::PatternProps *)icu::UnicodeString::unescapeAt((icu::UnicodeString *)v28, &v27);
            if (v13 == -1 || !v27)
            {
              *a4 = 9;
              icu::UnicodeString::~UnicodeString((void *)9, (icu::UnicodeString *)v28);
              return 0;
            }
            unsigned int v11 = v13;
            if (icu::PatternProps::isWhiteSpace(v13) || u_iscntrl(v11))
            {
              unsigned int v11 = 92;
            }
            else
            {
              int v24 = u_ispunct(v11);
              if (!v24) {
                a1 += 5;
              }
              uint64_t v14 = 92;
              if (v24) {
                unsigned int v11 = 92;
              }
            }
            icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)v28);
            BOOL v8 = 0;
            long long v9 = 0uLL;
            goto LABEL_36;
          }
LABEL_51:
          BOOL v8 = 0;
        }
        goto LABEL_54;
      }
      BOOL v8 = 0;
      ++a1;
LABEL_22:
      if ((unint64_t)a1 >= v10) {
        goto LABEL_61;
      }
    }
    if (v11 == 35)
    {
      do
      {
        uint64_t v15 = v7;
        if (v7 <= a3) {
          break;
        }
        v7 -= 2;
      }
      while (*((_WORD *)v15 - 1) == 32);
      while (a1 != (unsigned __int16 *)v10)
      {
        unsigned int v16 = *a1++;
        unsigned int v11 = v16;
        if (v16 == 10 || v11 == 13)
        {
          BOOL v8 = 0;
          unint64_t v7 = v15;
          goto LABEL_36;
        }
      }
      unint64_t v7 = v15;
      goto LABEL_61;
    }
    BOOL v8 = 0;
LABEL_36:
    if (v11 == 13 || v11 == 10)
    {
      while ((unint64_t)a1 < v10)
      {
        unsigned int v19 = *a1;
        BOOL v20 = v19 > 0x20;
        uint64_t v21 = (1 << v19) & 0x100002400;
        if (v20 || v21 == 0) {
          break;
        }
        ++a1;
      }
      BOOL v8 = 0;
      goto LABEL_22;
    }
    if (v11 >= 0x10000)
    {
      *(_WORD *)unint64_t v7 = (v11 >> 10) - 10304;
      *((_WORD *)v7 + 1) = v11 & 0x3FF | 0xDC00;
      uint64_t v23 = 2;
LABEL_55:
      v7 += 2 * v23;
      goto LABEL_22;
    }
LABEL_54:
    *(_WORD *)unint64_t v7 = v11;
    uint64_t v23 = 1;
    goto LABEL_55;
  }
LABEL_61:
  if (v7 < &a3[2 * a2]) {
    *(_WORD *)unint64_t v7 = 0;
  }
  return (unint64_t)(v7 - a3) >> 1;
}

uint64_t sub_18C9ACA60(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, int *a13)
{
  *(void *)a1 = &unk_1EDA51978;
  uint64_t v14 = a1 + 40;
  *(void *)(a1 + 40) = &unk_1EDA47700;
  *(_WORD *)(a1 + 48) = 2;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 128) = a12;
  if (*a13 <= 0)
  {
    unsigned int v16 = a6;
    if ((a3 & 0x80000000) != 0)
    {
      a3 = 0;
    }
    else
    {
      unsigned int v18 = *(unsigned __int16 *)(a2 + 8);
      int v19 = (__int16)v18;
      signed int v20 = v18 >> 5;
      if (v19 < 0) {
        signed int v20 = *(_DWORD *)(a2 + 12);
      }
      if (v20 < (int)a3) {
        goto LABEL_21;
      }
    }
    *(_DWORD *)(a1 + 116) = a3;
    if ((a4 & 0x80000000) != 0)
    {
      unsigned int v24 = *(unsigned __int16 *)(a2 + 8);
      int v25 = (__int16)v24;
      unsigned int v26 = v24 >> 5;
      if (v25 >= 0) {
        a4 = v26;
      }
      else {
        a4 = *(_DWORD *)(a2 + 12);
      }
    }
    else
    {
      if (a3 > a4) {
        goto LABEL_21;
      }
      unsigned int v21 = *(unsigned __int16 *)(a2 + 8);
      int v22 = (__int16)v21;
      signed int v23 = v21 >> 5;
      if (v22 < 0) {
        signed int v23 = *(_DWORD *)(a2 + 12);
      }
      if (v23 < (int)a4) {
        goto LABEL_21;
      }
    }
    *(_DWORD *)(a1 + 120) = a4 - a3;
    unsigned int v27 = *(unsigned __int16 *)(a5 + 8);
    if (a6 < 0)
    {
      if ((v27 & 0x8000) != 0) {
        unsigned int v16 = *(_DWORD *)(a5 + 12);
      }
      else {
        unsigned int v16 = v27 >> 5;
      }
    }
    else
    {
      int v28 = (__int16)v27;
      signed int v29 = v27 >> 5;
      if (v28 < 0) {
        signed int v29 = *(_DWORD *)(a5 + 12);
      }
      if (v29 < a6)
      {
LABEL_21:
        int v30 = 1;
LABEL_22:
        *a13 = v30;
        return a1;
      }
    }
    *(void *)(a1 + 104) = a8;
    *(_DWORD *)(a1 + 112) = a9;
    icu::UnicodeString::operator=((UChar **)(a1 + 40), (UChar **)a2);
    char v33 = a10 != 0;
    if (a11) {
      v33 |= 2u;
    }
    *(unsigned char *)(a1 + 124) = v33;
    *(void *)(a1 + 8) = 0;
    unsigned int v34 = (uint64_t *)*(unsigned int *)(a1 + 116);
    if ((int)v34 >= 1)
    {
      int v35 = icu::UMemory::operator new(v34, (icu::UMemory *)0x70, v32);
      if (!v35)
      {
        *(void *)(a1 + 8) = 0;
        goto LABEL_50;
      }
      *(void *)(a1 + 8) = sub_18C9E1F7C((uint64_t)v35, v14, 0, *(unsigned int *)(a1 + 116), 0, *(void *)(a1 + 128));
    }
    *(void *)(a1 + 16) = 0;
    unsigned int v36 = (uint64_t *)*(unsigned int *)(a1 + 120);
    if ((int)v36 >= 1)
    {
      uint64_t v37 = icu::UMemory::operator new(v36, (icu::UMemory *)0x70, v32);
      if (!v37)
      {
        *(void *)(a1 + 16) = 0;
        goto LABEL_50;
      }
      *(void *)(a1 + 16) = sub_18C9E1F7C((uint64_t)v37, v14, *(unsigned int *)(a1 + 116), (*(_DWORD *)(a1 + 120) + *(_DWORD *)(a1 + 116)), 0, *(void *)(a1 + 128));
    }
    if (*(__int16 *)(a1 + 48) < 0) {
      int v38 = *(_DWORD *)(a1 + 52);
    }
    else {
      int v38 = *(unsigned __int16 *)(a1 + 48) >> 5;
    }
    uint64_t v39 = (uint64_t *)(v38 - *(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 116));
    *(void *)(a1 + 24) = 0;
    if ((int)v39 < 1) {
      goto LABEL_47;
    }
    int v40 = icu::UMemory::operator new(v39, (icu::UMemory *)0x70, v32);
    if (v40)
    {
      if (*(__int16 *)(a1 + 48) < 0) {
        uint64_t v41 = *(unsigned int *)(a1 + 52);
      }
      else {
        uint64_t v41 = *(unsigned __int16 *)(a1 + 48) >> 5;
      }
      *(void *)(a1 + 24) = sub_18C9E1F7C((uint64_t)v40, v14, (*(_DWORD *)(a1 + 120) + *(_DWORD *)(a1 + 116)), v41, 0, *(void *)(a1 + 128));
LABEL_47:
      unint64_t v42 = icu::UMemory::operator new(v39, (icu::UMemory *)0x60, v32);
      if (v42)
      {
        *(void *)(a1 + 32) = sub_18C9E2B1C((uint64_t)v42, (UChar **)a5, v16 + a7, *(void *)(a1 + 128));
        return a1;
      }
      *(void *)(a1 + 32) = 0;
      goto LABEL_50;
    }
    *(void *)(a1 + 24) = 0;
LABEL_50:
    int v30 = 7;
    goto LABEL_22;
  }
  return a1;
}

uint64_t sub_18C9ACD1C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, int *a13)
{
  return sub_18C9ACA60(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_18C9ACD40(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDA51978;
  *(void *)(a1 + 8) = 0;
  int v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 40), (UChar **)(a2 + 40));
  *(void *)(a1 + 116) = *(void *)(a2 + 116);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  uint64_t v5 = *(unsigned int *)(a2 + 112);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = uprv_malloc(8 * v5);
    *(void *)(a1 + 104) = v6;
    memcpy(v6, *(const void **)(a2 + 104), 8 * *(int *)(a2 + 112));
  }
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7) {
    void *v4 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8) {
    *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  if (v9) {
    *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  *(void *)(a1 + 32) = (*(uint64_t (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
  return a1;
}

uint64_t sub_18C9ACEAC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA51978;
  uprv_free(*(void **)(a1 + 104));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 40));
  return a1;
}

void sub_18C9ACFB0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_18C9ACEAC(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9ACFD8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 116) + (*(unsigned char *)(a1 + 124) & 1u);
}

uint64_t sub_18C9ACFEC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 116);
  if (*(__int16 *)(a1 + 48) < 0) {
    uint64_t v3 = (uint64_t *)*(unsigned int *)(a1 + 52);
  }
  else {
    uint64_t v3 = (uint64_t *)(*(unsigned __int16 *)(a1 + 48) >> 5);
  }
  if (v2 == v3)
  {
    return -1;
  }
  else
  {
    int v5 = icu::UnicodeString::char32At(v3, (icu::UnicodeString *)(a1 + 40), v2);
    unsigned __int8 v6 = v5;
    uint64_t v7 = sub_18C9A9234(*(void *)(a1 + 128), v5);
    __int16 v4 = v6;
    if (v7) {
      return -1;
    }
  }
  return v4;
}

uint64_t sub_18C9AD060(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)(v2 + 8) + 32))();
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)(v2 + 8) + 32))();
  }
  else {
    return 1;
  }
}

uint64_t sub_18C9AD0A0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 48);
  int v5 = v4 >> 5;
  if (*(__int16 *)(a1 + 48) < 0) {
    int32_t v6 = *(_DWORD *)(a1 + 52);
  }
  else {
    int32_t v6 = v4 >> 5;
  }
  int v7 = *(_DWORD *)(a1 + 116);
  int v8 = *(_DWORD *)(a2 + 116);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 48);
  if ((v9 & 0x8000u) == 0) {
    unsigned int v10 = v9 >> 5;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a2 + 52);
  }
  if (v4)
  {
    int v12 = (v9 & 1) == 0;
  }
  else
  {
    if ((v4 & 0x8000u) != 0) {
      int v5 = *(_DWORD *)(a1 + 52);
    }
    if ((v4 & 2) != 0) {
      uint64_t v11 = a1 + 50;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 64);
    }
    int v12 = icu::UnicodeString::doCompare(a2 + 40, v8 - v7, v6, v11, v5 & (v5 >> 31), v5 & ~(v5 >> 31));
  }
  int v13 = v6 - v7;
  int v14 = v10 - v8;
  if (v8 == v7 && v13 == v14 && *(_DWORD *)(a1 + 120) <= *(_DWORD *)(a2 + 120) && !v12)
  {
    int v15 = *(unsigned __int8 *)(a1 + 124);
    unsigned int v16 = *(unsigned __int8 *)(a2 + 124);
    int v17 = (v16 >> 1) & 1;
    if ((v16 & 1) == 0) {
      int v17 = 0;
    }
    if ((v15 & 3) != 0) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 1;
    }
    if (v15 == v16) {
      return 1;
    }
    else {
      return v18;
    }
  }
  else
  {
    return v8 >= v7 && (v13 < v14 || v13 == v14 && *(_DWORD *)(a1 + 120) <= *(_DWORD *)(a2 + 120)) && v12 == 0;
  }
}

uint64_t sub_18C9AD1E8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*(void *)(a1 + 104) && *(int *)(a1 + 112) >= 1)
  {
    uint64_t v8 = 0;
    do
      sub_18C9E2A38(*(void *)(*(void *)(a1 + 104) + 8 * v8++));
    while (v8 < *(int *)(a1 + 112));
  }
  int v9 = *a3;
  uint64_t v10 = (*a3 - 1);
  if (*a3 >= 1)
  {
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 80))(a2, (v9 - 1)) >= 0x10000) {
      int v11 = -2;
    }
    else {
      int v11 = -1;
    }
    uint64_t v10 = (v11 + v9);
  }
  int v12 = a3[2];
  uint64_t v13 = (v12 - 1);
  if (v12 >= 1)
  {
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 80))(a2, (v12 - 1)) >= 0x10000) {
      int v14 = -2;
    }
    else {
      int v14 = -1;
    }
    uint64_t v13 = (v14 + v12);
  }
  unsigned int v31 = v13;
  uint64_t v15 = *(void *)(a1 + 8);
  if (v15)
  {
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, uint64_t, void))(*(void *)v15 + 56))(v15, a2, &v31, v10, 0);
    uint64_t result = 0;
    if (v16 != 2) {
      return result;
    }
    uint64_t v13 = v31;
  }
  if ((v13 & 0x80000000) != 0)
  {
    int v18 = 1;
  }
  else
  {
    int v18 = 1;
    if ((*(int (**)(uint64_t))(*(void *)a2 + 64))(a2) > (int)v13)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v13) < 0x10000) {
        int v18 = 1;
      }
      else {
        int v18 = 2;
      }
    }
  }
  if ((*(unsigned char *)(a1 + 124) & 1) != 0 && v31 != v10) {
    return 0;
  }
  uint64_t v19 = a3[2];
  unsigned int v31 = a3[2];
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, void, uint64_t))(*(void *)v20 + 56))(v20, a2, &v31, a3[3], a4);
    if (result != 2) {
      return result;
    }
    uint64_t v19 = v31;
  }
  uint64_t v21 = *(void *)(a1 + 24);
  if (v21)
  {
    if (a4 && v19 == a3[3]) {
      return 1;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, void, uint64_t))(*(void *)v21 + 56))(v21, a2, &v31, a3[1], a4);
    if (result != 2) {
      return result;
    }
  }
  if ((*(unsigned char *)(a1 + 124) & 2) == 0) {
    goto LABEL_35;
  }
  if (v31 != a3[1]) {
    return 0;
  }
  if (!a4)
  {
LABEL_35:
    int v30 = 0;
    uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
    int v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(*(void *)v22 + 16))(v22, a2, a3[2], v19, &v30);
    int v24 = a3[1];
    int v25 = a3[2] - v19 + v23;
    v31 += v25;
    uint64_t v26 = v31;
    int v27 = a3[3] + v25;
    a3[3] = v27;
    a3[1] = v24 + v25;
    uint64_t v28 = uprv_min(v26, v27);
    int v29 = uprv_min(v28, v30);
    a3[2] = uprv_max((v18 + v13), v29);
    return 2;
  }
  return 1;
}

icu::ICU_Utility *sub_18C9AD554(uint64_t a1, icu::ICU_Utility *this, icu::UnicodeMatcher *a3, uint64_t a4, icu::UnicodeString *a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  long long v39 = 0u;
  uint64_t v42 = 0;
  long long v41 = 0u;
  long long v40 = 0u;
  int v38 = &unk_1EDA47700;
  LOWORD(v39) = 2;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v37 = 0;
  long long v36 = 0u;
  char v33 = &unk_1EDA47700;
  LOWORD(v34) = 2;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = *(void *)(a1 + 24) != 0;
  }
  if (*(unsigned char *)(a1 + 124))
  {
    v32[0] = 94;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)v32, 0, 1);
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    uint64_t v10 = (icu::UnicodeString *)(v8 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  icu::ICU_Utility::appendToRule(this, v10, a3, (icu::UnicodeString *)&v33, a5);
  if (v9)
  {
    icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7B, 1, (int)a3, (icu::UnicodeString *)&v33, v12);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14) {
      uint64_t v15 = (icu::UnicodeString *)(v14 + 8);
    }
    else {
      uint64_t v15 = 0;
    }
    icu::ICU_Utility::appendToRule(this, v15, a3, (icu::UnicodeString *)&v33, v13);
    icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7D, 1, (int)a3, (icu::UnicodeString *)&v33, v16);
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 16);
    if (v18) {
      uint64_t v19 = (icu::UnicodeString *)(v18 + 8);
    }
    else {
      uint64_t v19 = 0;
    }
    icu::ICU_Utility::appendToRule(this, v19, a3, (icu::UnicodeString *)&v33, v11);
  }
  uint64_t v20 = *(void *)(a1 + 24);
  if (v20) {
    uint64_t v21 = (icu::UnicodeString *)(v20 + 8);
  }
  else {
    uint64_t v21 = 0;
  }
  icu::ICU_Utility::appendToRule(this, v21, a3, (icu::UnicodeString *)&v33, v17);
  if ((*(unsigned char *)(a1 + 124) & 2) != 0)
  {
    v32[0] = 36;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)v32, 0, 1);
  }
  unsigned int v31 = &unk_18CA95F82;
  icu::UnicodeString::UnicodeString(v32, 1, &v31);
  icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)v32, (const icu::UnicodeString *)1, (int)a3, (icu::UnicodeString *)&v33, v22);
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v32);
  uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
  int v25 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, void **, icu::UnicodeMatcher *))(*(void *)v24 + 24))(v24, &v38, a3);
  icu::ICU_Utility::appendToRule(this, v25, (const icu::UnicodeString *)1, (int)a3, (icu::UnicodeString *)&v33, v26);
  icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x3B, 1, (int)a3, (icu::UnicodeString *)&v33, v27);
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v33);
  icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v38);
  return this;
}

uint64_t sub_18C9AD82C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 128) = a2;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, a2);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, a2);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2);
  }
  int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 32) + 48);

  return v7();
}

icu::UnicodeSet *sub_18C9AD91C(icu::UnicodeSet *result, icu::UnicodeSet *a2)
{
  uint64_t v2 = (uint64_t *)*((unsigned int *)result + 30);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = result;
    int v5 = *((_DWORD *)result + 29);
    int v6 = v2 + v5;
    int v7 = (icu::UnicodeSet *)((char *)result + 40);
    do
    {
      unsigned int v8 = icu::UnicodeString::char32At(v2, v7, v5);
      if (v8 < 0x10000) {
        int v9 = 1;
      }
      else {
        int v9 = 2;
      }
      uint64_t v10 = sub_18C9A9234(*((void *)v4 + 16), v8);
      if (v10) {
        uint64_t result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t, icu::UnicodeSet *))(*(void *)v10 + 40))(v10, a2);
      }
      else {
        uint64_t result = icu::UnicodeSet::add(a2, v8);
      }
      v5 += v9;
    }
    while (v5 < v6);
  }
  return result;
}

uint64_t sub_18C9AD9E0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32))
                           + 32);

  return v1();
}

void *sub_18C9ADA5C(void *a1, int *a2)
{
  *a1 = &unk_1EDA519C8;
  uint64_t v4 = a1 + 1;
  bzero(a1 + 1, 0x418uLL);
  int v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
  if (v7)
  {
    uint64_t v8 = icu::UVector::UVector((uint64_t)v7, (uint64_t)sub_18C9ADB30, 0, a2);
    if (*a2 <= 0) {
      uint64_t *v4 = v8;
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  else if (*a2 <= 0)
  {
    *a2 = 7;
  }
  return a1;
}

uint64_t sub_18C9ADB30(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_18C9ADB60(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t (***)(void *))(a1 + 8);
  *(void *)a1 = &unk_1EDA519C8;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 1052) = *(_DWORD *)(a2 + 1052);
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x404uLL);
  UErrorCode v19 = U_ZERO_ERROR;
  int v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
  if (v7)
  {
    uint64_t v8 = icu::UVector::UVector((uint64_t)v7, (uint64_t)sub_18C9ADB30, 0, (int *)&v19);
    uint64_t v10 = (uint64_t *)v19;
    if (v19 <= U_ZERO_ERROR)
    {
      uint64_t *v4 = (uint64_t (**)(void *))v8;
      uint64_t v11 = *(void *)(a2 + 8);
      if (v11)
      {
        int v12 = *(_DWORD *)(v11 + 8);
        if (v12 >= 1)
        {
          signed int v13 = 0;
          do
          {
            uint64_t v14 = icu::UMemory::operator new(v10, (icu::UMemory *)0x88, v9);
            if (v14)
            {
              uint64_t v15 = icu::UVector::elementAt(*(icu::UVector **)(a2 + 8), v13);
              sub_18C9ACEA8((uint64_t)v14, v15);
            }
            else if (v19 <= U_ZERO_ERROR)
            {
              UErrorCode v19 = U_MEMORY_ALLOCATION_ERROR;
            }
            icu::UVector::adoptElement(*v4, v14, &v19);
            ++v13;
            uint64_t v10 = (uint64_t *)v19;
          }
          while (v13 < v12 && v19 < U_ILLEGAL_ARGUMENT_ERROR);
        }
      }
      if (*(void *)(a2 + 16) && (int)v10 <= 0)
      {
        uint64_t v18 = 0;
        memset(v17, 0, sizeof(v17));
        (*(void (**)(uint64_t, _OWORD *, UErrorCode *))(*(void *)a1 + 32))(a1, v17, &v19);
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t sub_18C9ADD20(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA519C8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uprv_free(*(void **)(a1 + 16));
  return a1;
}

void sub_18C9ADD98(uint64_t a1)
{
  uint64_t v1 = (void *)sub_18C9ADD20(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9ADDC0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 1048);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v2;
    do
    {
      uint64_t result = sub_18C9AD82C(*(void *)(*(void *)(v4 + 16) + v5), a2);
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_18C9ADE1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1052);
}

void sub_18C9ADE24(uint64_t a1, void *a2, UErrorCode *a3)
{
  icu::UVector::adoptElement(*(uint64_t (***)(void *))(a1 + 8), a2, a3);
  if (*(int *)a3 <= 0)
  {
    int v6 = (*(uint64_t (**)(void *))(*(void *)a2 + 16))(a2);
    if (v6 > *(_DWORD *)(a1 + 1052)) {
      *(_DWORD *)(a1 + 1052) = v6;
    }
    uprv_free(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
}

void sub_18C9ADEAC(uint64_t a1, void *a2, UErrorCode *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 8);
  uint64_t v36 = 0;
  memset(v35, 0, sizeof(v35));
  icu::UVector::UVector((icu::UVector *)v35, 2 * v6, a3);
  if (*(int *)a3 > 0) {
    goto LABEL_36;
  }
  if ((int)v6 <= 1) {
    int v7 = 1;
  }
  else {
    int v7 = v6;
  }
  uint64_t v8 = uprv_malloc((2 * v7));
  if (!v8) {
    goto LABEL_35;
  }
  unint64_t v9 = v8;
  if ((int)v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v11 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), i);
      v9[i] = sub_18C9ACFEC(v11);
    }
  }
  for (uint64_t j = 0; j != 256; ++j)
  {
    *(_DWORD *)(a1 + 4 * j + 24) = DWORD2(v35[0]);
    if ((int)v6 >= 1)
    {
      for (uint64_t k = 0; v6 != k; ++k)
      {
        if ((__int16)v9[k] < 0)
        {
          uint64_t v14 = (void *)icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), k);
          if (sub_18C9AD060((uint64_t)v14)) {
            goto LABEL_16;
          }
        }
        else if (j == (unsigned __int16)v9[k])
        {
          uint64_t v14 = (void *)icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), k);
LABEL_16:
          icu::UVector::addElement((icu::UVector *)v35, v14, a3);
        }
      }
    }
  }
  uprv_free(v9);
  *(_DWORD *)(a1 + 1048) = DWORD2(v35[0]);
  if (*(int *)a3 > 0) {
    goto LABEL_36;
  }
  uprv_free(*(void **)(a1 + 16));
  if (!DWORD2(v35[0]))
  {
    *(void *)(a1 + 16) = 0;
    goto LABEL_36;
  }
  uint64_t v15 = uprv_malloc(8 * SDWORD2(v35[0]));
  *(void *)(a1 + 16) = v15;
  if (!v15)
  {
LABEL_35:
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_36;
  }
  if (SDWORD2(v35[0]) >= 1)
  {
    uint64_t v16 = 0;
    do
    {
      *(void *)(*(void *)(a1 + 16) + 8 * v16) = icu::UVector::elementAt((icu::UVector *)v35, v16);
      ++v16;
    }
    while (v16 < SDWORD2(v35[0]));
  }
  uint64_t v17 = 0;
  int v18 = *(_DWORD *)(a1 + 24);
  while (1)
  {
    ++v17;
    uint64_t v19 = a1 + 4 * v17;
    int v22 = *(_DWORD *)(v19 + 24);
    uint64_t v21 = (int *)(v19 + 24);
    LODWORD(v20) = v22;
    if (v18 < v22 - 1) {
      break;
    }
LABEL_33:
    int v18 = v20;
    if (v17 == 256) {
      goto LABEL_36;
    }
  }
  uint64_t v23 = v18;
  while (1)
  {
    uint64_t v24 = v23++;
    if (v23 < (int)v20) {
      break;
    }
LABEL_32:
    if (v23 >= (int)v20 - 1) {
      goto LABEL_33;
    }
  }
  uint64_t v25 = *(void *)(*(void *)(a1 + 16) + 8 * v24);
  uint64_t v26 = v23;
  while (1)
  {
    uint64_t v27 = *(void *)(*(void *)(a1 + 16) + 8 * v26);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v25 + 24))(v25, v27)) {
      break;
    }
    ++v26;
    uint64_t v20 = *v21;
    if (v26 >= v20) {
      goto LABEL_32;
    }
  }
  *a3 = U_RULE_MASK_ERROR;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v41 = 0;
  long long v40 = 0u;
  uint64_t v37 = &unk_1EDA47700;
  LOWORD(v38) = 2;
  *a2 = -1;
  (*(void (**)(uint64_t, void **, void))(*(void *)v25 + 32))(v25, &v37, 0);
  if ((v38 & 0x8000u) == 0) {
    uint64_t v28 = (unsigned __int16)v38 >> 5;
  }
  else {
    uint64_t v28 = DWORD1(v38);
  }
  int v29 = uprv_min(v28, 15);
  icu::UnicodeString::doExtract((char *)&v37, 0, v29, (uint64_t)(a2 + 1), 0);
  v34[1] = a2 + 1;
  *((_WORD *)a2 + v29 + 4) = 0;
  if (v38)
  {
    icu::UnicodeString::unBogus((uint64_t)&v37);
  }
  else
  {
    if ((v38 & 0x8000u) == 0) {
      int v30 = (unsigned __int16)v38 >> 5;
    }
    else {
      int v30 = DWORD1(v38);
    }
    if (v30)
    {
      LOBYTE(v38) = v38 & 0x1F;
      LOWORD(v38) = v38;
    }
  }
  (*(void (**)(uint64_t, void **, void))(*(void *)v27 + 32))(v27, &v37, 0);
  if ((v38 & 0x8000u) == 0) {
    uint64_t v31 = (unsigned __int16)v38 >> 5;
  }
  else {
    uint64_t v31 = DWORD1(v38);
  }
  int v32 = uprv_min(v31, 15);
  uint64_t v33 = (uint64_t)(a2 + 5);
  icu::UnicodeString::doExtract((char *)&v37, 0, v32, v33, 0);
  v34[0] = v33;
  *(_WORD *)(v33 + 2 * v32) = 0;
  icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v37);
LABEL_36:
  icu::UVector::~UVector((icu::UVector *)v35);
}

uint64_t sub_18C9AE2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 80))(a2, *(unsigned int *)(a3 + 8));
  uint64_t v9 = *(int *)(a1 + 24 + 4 * v8);
  uint64_t v10 = (int *)(a1 + 24 + 4 * (v8 + 1));
  if ((int)v9 >= *v10)
  {
LABEL_5:
    BOOL v12 = (*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 80))(a2, *(unsigned int *)(a3 + 8)) >= 0x10000;
    uint64_t result = 1;
    if (v12) {
      int v14 = 2;
    }
    else {
      int v14 = 1;
    }
    *(_DWORD *)(a3 + 8) += v14;
  }
  else
  {
    while (1)
    {
      int v11 = sub_18C9AD1E8(*(void *)(*(void *)(a1 + 16) + 8 * v9), a2, (int *)a3, a4);
      if (v11 == 1) {
        return 0;
      }
      if (v11 == 2) {
        return 1;
      }
      if (++v9 >= *v10) {
        goto LABEL_5;
      }
    }
  }
  return result;
}

icu::UnicodeString *sub_18C9AE3E4(uint64_t a1, icu::UnicodeString *this, uint64_t a3)
{
  int v6 = *(_DWORD *)(*(void *)(a1 + 8) + 8);
  unsigned int v7 = *((unsigned __int16 *)this + 4);
  if (v7)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *((_DWORD *)this + 3);
    }
    if (v8) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }
  if (v6 >= 1)
  {
    for (unsigned int i = 0; i != v6; ++i)
    {
      if (i)
      {
        __int16 v12 = 10;
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v12, 0, 1);
      }
      uint64_t v10 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), i);
      (*(void (**)(uint64_t, icu::UnicodeString *, uint64_t))(*(void *)v10 + 32))(v10, this, a3);
    }
  }
  return this;
}

icu::UnicodeSet *sub_18C9AE4D4(uint64_t a1, icu::UnicodeSet *this, int a3)
{
  icu::UnicodeSet::clear(this);
  int v6 = *(_DWORD *)(*(void *)(a1 + 8) + 8);
  if (v6 >= 1)
  {
    for (unsigned int i = 0; i != v6; ++i)
    {
      unsigned int v8 = (icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), i);
      if (a3) {
        sub_18C9AD9E0((uint64_t)v8);
      }
      else {
        sub_18C9AD91C(v8, this);
      }
    }
  }
  return this;
}

void *icu::RuleBasedTimeZone::getStaticClassID(icu::RuleBasedTimeZone *this)
{
  return &unk_1E91925A0;
}

void *icu::RuleBasedTimeZone::getDynamicClassID(icu::RuleBasedTimeZone *this)
{
  return &unk_1E91925A0;
}

icu::TimeZone *icu::RuleBasedTimeZone::RuleBasedTimeZone(icu::RuleBasedTimeZone *this, UChar **a2, icu::InitialTimeZoneRule *a3)
{
  uint64_t result = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)uint64_t result = &unk_1EDA51A20;
  *((void *)result + 9) = a3;
  *((void *)result + 10) = 0;
  *((void *)result + 11) = 0;
  *((void *)result + 12) = 0;
  *((unsigned char *)result + 104) = 0;
  return result;
}

{
  icu::TimeZone *result;

  uint64_t result = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)uint64_t result = &unk_1EDA51A20;
  *((void *)result + 9) = a3;
  *((void *)result + 10) = 0;
  *((void *)result + 11) = 0;
  *((void *)result + 12) = 0;
  *((unsigned char *)result + 104) = 0;
  return result;
}

icu::RuleBasedTimeZone *icu::RuleBasedTimeZone::RuleBasedTimeZone(icu::RuleBasedTimeZone *this, const icu::RuleBasedTimeZone *a2)
{
  *(void *)icu::BasicTimeZone::BasicTimeZone(this, (UChar **)a2) = &unk_1EDA51A20;
  *((void *)this + 9) = (*(uint64_t (**)(void))(**((void **)a2 + 9) + 24))(*((void *)a2 + 9));
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 104) = 0;
  *((void *)this + 10) = icu::RuleBasedTimeZone::copyRules(*((icu::UVector **)a2 + 10), v4);
  *((void *)this + 11) = icu::RuleBasedTimeZone::copyRules(*((icu::UVector **)a2 + 11), v5);
  if (*((unsigned char *)a2 + 104))
  {
    UErrorCode v7 = U_ZERO_ERROR;
    icu::RuleBasedTimeZone::complete((uint64_t)this, &v7);
  }
  return this;
}

uint64_t (**icu::RuleBasedTimeZone::copyRules@<X0>(icu::UVector *a1@<X1>, uint64_t *a2@<X8>))(void *)
{
  if (!a1) {
    return 0;
  }
  UErrorCode v12 = U_ZERO_ERROR;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  uint64_t v5 = icu::UMemory::operator new(a2, (icu::UMemory *)0x28, (unint64_t)a1);
  int v6 = (uint64_t (**)(void *))v5;
  if (v5)
  {
    icu::UVector::UVector(v5, uprv_deleteUObject, 0, v4, &v12);
    if (v12 <= U_ZERO_ERROR)
    {
      if ((int)v4 < 1) {
        return v6;
      }
      unsigned int v8 = 0;
      while (1)
      {
        uint64_t v9 = icu::UVector::elementAt(a1, v8);
        uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
        if (!v10 && v12 <= U_ZERO_ERROR) {
          UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
        }
        icu::UVector::adoptElement(v6, v10, &v12);
        if (v12 >= U_ILLEGAL_ARGUMENT_ERROR) {
          break;
        }
        if (v4 == ++v8) {
          return v6;
        }
      }
    }
    (*((void (**)(uint64_t (**)(void *)))*v6 + 1))(v6);
    return 0;
  }
  return v6;
}

uint64_t icu::RuleBasedTimeZone::complete(uint64_t this, UErrorCode *a2)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return this;
  }
  uint64_t v2 = this;
  if (*(unsigned char *)(this + 104)) {
    return this;
  }
  uint64_t v3 = (int *)a2;
  this = *(void *)(this + 88);
  if (this)
  {
    if (*(_DWORD *)(this + 8) != 2)
    {
      *a2 = U_INVALID_STATE_ERROR;
      return this;
    }
    uint64_t v5 = (icu::UVector **)(v2 + 80);
    uint64_t v4 = *(void *)(v2 + 80);
    if (!v4)
    {
      int v6 = *(icu::TimeZoneRule **)(v2 + 72);
      double v7 = -1.84303903e17;
      goto LABEL_60;
    }
  }
  else
  {
    uint64_t v5 = (icu::UVector **)(v2 + 80);
    uint64_t v4 = *(void *)(v2 + 80);
    if (!v4)
    {
LABEL_92:
      *(unsigned char *)(v2 + 104) = 1;
      return this;
    }
  }
  int v6 = *(icu::TimeZoneRule **)(v2 + 72);
  size_t v8 = *(unsigned int *)(v4 + 8);
  if ((int)v8 < 1)
  {
    double v7 = -1.84303903e17;
    goto LABEL_59;
  }
  uint64_t v9 = (unsigned __int8 *)uprv_malloc(*(unsigned int *)(v4 + 8));
  uint64_t v10 = v9;
  if (!v9)
  {
    int *v3 = 7;
    goto LABEL_97;
  }
  bzero(v9, v8);
  double v7 = -1.84303903e17;
  unsigned int v67 = v3;
  while (2)
  {
    uint64_t RawOffset = icu::TimeZoneRule::getRawOffset(v6);
    uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(v6);
    uint64_t v79 = 0;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v76 = 0u;
    double v75 = COERCE_DOUBLE(&unk_1EDA47700);
    LOWORD(v76) = 2;
    uint64_t v74 = 0;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v71 = 0u;
    double v69 = 0.0;
    double v70 = COERCE_DOUBLE(&unk_1EDA47700);
    LOWORD(v71) = 2;
    icu::TimeZoneRule::getName((UChar **)v6, (UChar **)&v75);
    uint64_t v14 = 0;
    unint64_t v68 = 0;
    double v15 = 1.83882169e17;
    do
    {
      if (v10[v14]) {
        goto LABEL_13;
      }
      uint64_t v16 = (UChar **)icu::UVector::elementAt(*v5, v14);
      if (!(*((unsigned int (**)(UChar **, uint64_t, uint64_t, void, double *, double))*v16 + 9))(v16, RawOffset, DSTSavings, 0, &v69, v7))
      {
        v10[v14] = 1;
        goto LABEL_13;
      }
      icu::TimeZoneRule::getName(v16, (UChar **)&v70);
      if ((*((uint64_t (**)(UChar **, icu::TimeZoneRule *))*v16 + 4))(v16, v6)) {
        goto LABEL_13;
      }
      if (v71)
      {
        if (v76) {
          goto LABEL_30;
        }
      }
      else
      {
        if ((v71 & 0x8000u) == 0) {
          int v17 = (unsigned __int16)v71 >> 5;
        }
        else {
          int v17 = DWORD1(v71);
        }
        if ((v76 & 0x8000u) == 0) {
          int v18 = (unsigned __int16)v76 >> 5;
        }
        else {
          int v18 = DWORD1(v76);
        }
        if ((v76 & 1) == 0
          && v17 == v18
          && icu::UnicodeString::doEquals((icu::UnicodeString *)&v70, (const icu::UnicodeString *)&v75, v17))
        {
LABEL_30:
          uint64_t v19 = v5;
          int v20 = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v16);
          BOOL v48 = v20 == icu::TimeZoneRule::getRawOffset(v6);
          uint64_t v5 = v19;
          if (v48)
          {
            int v21 = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v16);
            BOOL v48 = v21 == icu::TimeZoneRule::getDSTSavings(v6);
            uint64_t v5 = v19;
            if (v48) {
              goto LABEL_13;
            }
          }
        }
      }
      if (v69 < v15)
      {
        double v15 = v69;
        unint64_t v68 = (icu::TimeZoneRule *)v16;
      }
LABEL_13:
      ++v14;
    }
    while (v8 != v14);
    int v22 = (char *)v8;
    uint64_t v23 = v10;
    if (!v68)
    {
      while (*v23++)
      {
        if (!--v22) {
          goto LABEL_58;
        }
      }
    }
    if (*(void *)(v2 + 88))
    {
      unsigned int v25 = 0;
      char v26 = 1;
      do
      {
        char v27 = v26;
        uint64_t v28 = icu::UVector::elementAt(*(icu::UVector **)(v2 + 88), v25);
        if (((*(uint64_t (**)(uint64_t, icu::TimeZoneRule *))(*(void *)v28 + 32))(v28, v6) & 1) == 0)
        {
          uint64_t v29 = icu::UVector::elementAt(*(icu::UVector **)(v2 + 88), v25);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, double *, double))(*(void *)v29 + 72))(v29, RawOffset, DSTSavings, 0, &v69, v7))
          {
            if (v69 < v15)
            {
              double v15 = v69;
              unint64_t v68 = (icu::TimeZoneRule *)v29;
            }
          }
        }
        char v26 = 0;
        unsigned int v25 = 1;
      }
      while ((v27 & 1) != 0);
    }
    int v22 = (char *)v68;
    if (v68)
    {
      int v30 = *(uint64_t **)(v2 + 96);
      if (!v30)
      {
        uint64_t v31 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, v13);
        if (v31)
        {
          uint64_t v32 = icu::UVector::UVector((uint64_t)v31, (uint64_t)sub_18C9AF7D8, 0, v67);
          int v30 = (uint64_t *)*v67;
          if ((int)v30 < 1)
          {
            *(void *)(v2 + 96) = v32;
            goto LABEL_51;
          }
          (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
LABEL_96:
          icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)&v70);
          icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v75);
          goto LABEL_97;
        }
        uint64_t v34 = *v67;
        if ((int)v34 > 0) {
          goto LABEL_96;
        }
LABEL_94:
        uint64_t v34 = 7;
        *unsigned int v67 = 7;
        goto LABEL_96;
      }
LABEL_51:
      uint64_t v33 = (double *)icu::UMemory::operator new(v30, (icu::UMemory *)0x18, v13);
      uint64_t v34 = *v67;
      if (!v33 && (int)v34 <= 0) {
        goto LABEL_94;
      }
      if ((int)v34 >= 1)
      {
        if (v33) {
          icu::UMemory::operator delete(v33);
        }
        goto LABEL_96;
      }
      *uint64_t v33 = v15;
      *((void *)v33 + 1) = v6;
      int v6 = v68;
      *((void *)v33 + 2) = v68;
      icu::UVector::adoptElement(*(uint64_t (***)(void *))(v2 + 96), v33, (UErrorCode *)v67);
      int v35 = *v67;
      icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v70);
      icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v75);
      double v7 = v15;
      if (v35 >= 1)
      {
LABEL_97:
        uprv_free(v10);
        goto LABEL_98;
      }
      continue;
    }
    break;
  }
LABEL_58:
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v70);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v75);
  uprv_free(v10);
  this = *(void *)(v2 + 88);
  uint64_t v3 = v67;
LABEL_59:
  if (!this) {
    goto LABEL_92;
  }
LABEL_60:
  if (*(void *)(v2 + 96)) {
    goto LABEL_61;
  }
  uint64_t v50 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, (unint64_t)a2);
  if (!v50)
  {
    if (*v3 > 0) {
      goto LABEL_98;
    }
    int v49 = 7;
LABEL_67:
    int *v3 = v49;
    goto LABEL_98;
  }
  uint64_t v51 = icu::UVector::UVector((uint64_t)v50, (uint64_t)sub_18C9AF7D8, 0, v3);
  if (*v3 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
    goto LABEL_98;
  }
  *(void *)(v2 + 96) = v51;
  this = *(void *)(v2 + 88);
LABEL_61:
  long long v39 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)this, 0);
  long long v40 = (icu::TimeZoneRule *)icu::UVector::elementAt(*(icu::UVector **)(v2 + 88), 1u);
  double v75 = 0.0;
  double v70 = 0.0;
  uint64_t v41 = icu::TimeZoneRule::getRawOffset(v6);
  uint64_t v42 = icu::TimeZoneRule::getDSTSavings(v6);
  LODWORD(v41) = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, void, double *, double))(*(void *)v39 + 72))(v39, v41, v42, 0, &v75, v7);
  uint64_t v43 = icu::TimeZoneRule::getRawOffset(v6);
  uint64_t v44 = icu::TimeZoneRule::getDSTSavings(v6);
  int v45 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, void, double *, double))(*(void *)v40 + 72))(v40, v43, v44, 0, &v70, v7);
  if (v41) {
    BOOL v48 = v45 == 0;
  }
  else {
    BOOL v48 = 1;
  }
  if (v48)
  {
    int v49 = 27;
    goto LABEL_67;
  }
  uint64_t v52 = icu::UMemory::operator new(v47, (icu::UMemory *)0x18, v46);
  unint64_t v55 = v52;
  if (!v52)
  {
    uint64_t v54 = *v3;
    if ((int)v54 <= 0)
    {
      uint64_t v54 = 7;
      int *v3 = 7;
    }
  }
  int v56 = icu::UMemory::operator new((uint64_t *)v54, (icu::UMemory *)0x18, v53);
  unsigned int v57 = v56;
  int v58 = *v3;
  if (!v56 && v58 <= 0)
  {
    int *v3 = 7;
    goto LABEL_81;
  }
  if (v58 <= 0)
  {
    if (v75 >= v70)
    {
      *(double *)unint64_t v55 = v70;
      v55[1] = (uint64_t)v6;
      v55[2] = (uint64_t)v40;
      double v63 = v70;
      uint64_t v64 = icu::TimeZoneRule::getRawOffset(v40);
      uint64_t v65 = icu::TimeZoneRule::getDSTSavings(v40);
      (*(void (**)(icu::TimeZoneRule *, uint64_t, uint64_t, void, uint64_t *, double))(*(void *)v39 + 72))(v39, v64, v65, 0, v57, v63);
      int v62 = v40;
      long long v40 = v39;
    }
    else
    {
      *(double *)unint64_t v55 = v75;
      v55[1] = (uint64_t)v6;
      v55[2] = (uint64_t)v39;
      double v59 = v75;
      uint64_t v60 = icu::TimeZoneRule::getRawOffset(v39);
      uint64_t v61 = icu::TimeZoneRule::getDSTSavings(v39);
      (*(void (**)(icu::TimeZoneRule *, uint64_t, uint64_t, void, uint64_t *, double))(*(void *)v40 + 72))(v40, v60, v61, 0, v57, v59);
      int v62 = v39;
    }
    v57[1] = (uint64_t)v62;
    v57[2] = (uint64_t)v40;
    icu::UVector::adoptElement(*(uint64_t (***)(void *))(v2 + 96), v55, (UErrorCode *)v3);
    this = icu::UVector::adoptElement(*(uint64_t (***)(void *))(v2 + 96), v57, (UErrorCode *)v3);
    if (*v3 > 0) {
      goto LABEL_98;
    }
    goto LABEL_92;
  }
  if (v56) {
    icu::UMemory::operator delete(v56);
  }
LABEL_81:
  if (v55) {
    icu::UMemory::operator delete(v55);
  }
LABEL_98:
  this = *(void *)(v2 + 96);
  if (this) {
    this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
  }
  *(void *)(v2 + 96) = 0;
  *(unsigned char *)(v2 + 104) = 0;
  return this;
}

void icu::RuleBasedTimeZone::~RuleBasedTimeZone(icu::RuleBasedTimeZone *this)
{
  *(void *)this = &unk_1EDA51A20;
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 12) = 0;
  icu::RuleBasedTimeZone::deleteRules(this);

  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::RuleBasedTimeZone::~RuleBasedTimeZone(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::RuleBasedTimeZone::deleteTransitions(icu::RuleBasedTimeZone *this)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 12) = 0;
  return result;
}

uint64_t icu::RuleBasedTimeZone::deleteRules(icu::RuleBasedTimeZone *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 9) = 0;
  uint64_t v3 = *((void *)this + 10);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *((void *)this + 10) = 0;
  }
  uint64_t result = *((void *)this + 11);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    *((void *)this + 11) = 0;
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168))(a1))
  {
    icu::TimeZone::operator=(a1, a2);
    icu::RuleBasedTimeZone::deleteRules((icu::RuleBasedTimeZone *)a1);
    *(void *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a2 + 72) + 24))(*(void *)(a2 + 72));
    *(void *)(a1 + 80) = icu::RuleBasedTimeZone::copyRules(*(icu::UVector **)(a2 + 80), v4);
    *(void *)(a1 + 88) = icu::RuleBasedTimeZone::copyRules(*(icu::UVector **)(a2 + 88), v5);
    uint64_t v6 = *(void *)(a1 + 96);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *(void *)(a1 + 96) = 0;
    *(unsigned char *)(a1 + 104) = 0;
  }
  return a1;
}

uint64_t icu::RuleBasedTimeZone::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    uint64_t result = icu::TimeZone::operator==(a1, a2);
    if (result) {
      return ((*(uint64_t (**)(void, void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72), *(void *)(a2 + 72)) & 1) == 0&& sub_18C9AF3D4(*(void *)(a1 + 80), *(icu::UVector **)(a2 + 80))&& sub_18C9AF3D4(*(void *)(a1 + 88), *(icu::UVector **)(a2 + 88));
    }
  }
  return result;
}

BOOL sub_18C9AF3D4(unint64_t this, icu::UVector *a2)
{
  if (!(this | (unint64_t)a2)) {
    return 1;
  }
  BOOL result = 0;
  if (this && a2)
  {
    int v5 = *(_DWORD *)(this + 8);
    if (v5 == *((_DWORD *)a2 + 2))
    {
      if (v5 < 1)
      {
        return 1;
      }
      else
      {
        uint64_t v6 = icu::UVector::elementAt((icu::UVector *)this, 0);
        uint64_t v7 = icu::UVector::elementAt(a2, 0);
        char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, v7);
        BOOL result = 0;
        if ((v8 & 1) == 0)
        {
          unsigned int v9 = 1;
          do
          {
            signed int v10 = v9;
            if (v5 == v9) {
              break;
            }
            uint64_t v11 = icu::UVector::elementAt((icu::UVector *)this, v9);
            uint64_t v12 = icu::UVector::elementAt(a2, v10);
            int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 40))(v11, v12);
            unsigned int v9 = v10 + 1;
          }
          while (!v13);
          return v10 >= v5;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) ^ 1;
}

uint64_t *icu::RuleBasedTimeZone::addTransitionRule(uint64_t *this, icu::TimeZoneRule *lpsrc, UErrorCode *a3)
{
  uint64_t v4 = *(unsigned int *)a3;
  if ((int)v4 > 0) {
    goto LABEL_2;
  }
  uint64_t v7 = this;
  if (!lpsrc
  {
    uint64_t v10 = v7[10];
    if (!v10)
    {
      this = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x28, (unint64_t)lpsrc);
      if (!this)
      {
        if (*(int *)a3 <= 0) {
          *a3 = U_MEMORY_ALLOCATION_ERROR;
        }
LABEL_2:
        if (!lpsrc) {
          return this;
        }
        goto LABEL_3;
      }
      uint64_t v10 = icu::UVector::UVector((uint64_t)this, (uint64_t)uprv_deleteUObject, 0, (int *)a3);
      if (*(int *)a3 > 0)
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
        goto LABEL_2;
      }
      v7[10] = v10;
    }
    goto LABEL_14;
  }
  uint64_t v10 = v7[11];
  if (!v10)
  {
    uint64_t v12 = icu::UMemory::operator new((uint64_t *)0x7FFFFFFF, (icu::UMemory *)0x28, (unint64_t)lpsrc);
    if (!v12)
    {
      if (*(int *)a3 > 0) {
        goto LABEL_3;
      }
      UErrorCode v11 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_12;
    }
    uint64_t v10 = icu::UVector::UVector((uint64_t)v12, (uint64_t)uprv_deleteUObject, 0, (int *)a3);
    if (*(int *)a3 > 0)
    {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      goto LABEL_3;
    }
    v7[11] = v10;
LABEL_14:
    this = (uint64_t *)icu::UVector::adoptElement((uint64_t (**)(void *))v10, lpsrc, a3);
    *((unsigned char *)v7 + 104) = 0;
    return this;
  }
  if (*(int *)(v10 + 8) < 2) {
    goto LABEL_14;
  }
  UErrorCode v11 = U_INVALID_STATE_ERROR;
LABEL_12:
  *a3 = v11;
LABEL_3:
  int v5 = *(uint64_t (**)(icu::TimeZoneRule *))(*(void *)lpsrc + 8);

  return (uint64_t *)v5(lpsrc);
}

void icu::RuleBasedTimeZone::completeConst(icu::RuleBasedTimeZone *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    umtx_lock((atomic_ullong *)&unk_1E91925A8);
    if (!*((unsigned char *)this + 104)) {
      icu::RuleBasedTimeZone::complete((uint64_t)this, a2);
    }
    umtx_unlock((std::mutex **)&unk_1E91925A8);
  }
}

void sub_18C9AF7D8(void *a1)
{
  if (a1) {
    icu::UMemory::operator delete(a1);
  }
}

icu::RuleBasedTimeZone *icu::RuleBasedTimeZone::clone@<X0>(icu::RuleBasedTimeZone *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = (icu::RuleBasedTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0x70, a2);
  if (result) {
    return icu::RuleBasedTimeZone::RuleBasedTimeZone(result, this);
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::getOffset(icu::RuleBasedTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, UErrorCode *a8)
{
  if (*(int *)a8 > 0) {
    return 0;
  }
  if (a4 >= 0xC)
  {
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0;
  }
  return (*(uint64_t (**)(icu::RuleBasedTimeZone *))(*(void *)this + 40))(this);
}

uint64_t icu::RuleBasedTimeZone::getOffset(icu::RuleBasedTimeZone *this, int a2, int a3, int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  if (*(int *)a9 > 0) {
    return 0;
  }
  if (a2) {
    int v12 = a3;
  }
  else {
    int v12 = 1 - a3;
  }
  *(void *)uint64_t v14 = 0;
  double v13 = sub_18C93E22C(v12, a4, a5);
  icu::RuleBasedTimeZone::getOffsetInternal(this, (double)a7 + v13 * 86400000.0, 1, 3, 1, &v14[1], v14, a9);
  if (*(int *)a9 <= 0) {
    return (v14[0] + v14[1]);
  }
  else {
    return 0;
  }
}

void icu::RuleBasedTimeZone::getOffsetInternal(icu::RuleBasedTimeZone *this, double a2, int a3, int a4, char a5, int *a6, int *a7, UErrorCode *a8)
{
  *a6 = 0;
  *a7 = 0;
  if (*(int *)a8 <= 0)
  {
    if (!*((unsigned char *)this + 104))
    {
      *a8 = U_INVALID_STATE_ERROR;
      return;
    }
    UErrorCode v11 = (icu::UVector *)*((void *)this + 12);
    if (v11
      && (uint64_t v16 = icu::UVector::elementAt(v11, 0),
          icu::RuleBasedTimeZone::getTransitionTime((uint64_t)this, v16, a3, a4, a5) <= a2))
    {
      int v18 = (icu::UVector *)*((void *)this + 12);
      int v19 = *((_DWORD *)v18 + 2);
      unsigned int v20 = v19 - 1;
      uint64_t v21 = icu::UVector::elementAt(v18, v19 - 1);
      if (icu::RuleBasedTimeZone::getTransitionTime((uint64_t)this, v21, a3, a4, a5) >= a2)
      {
        if (v19 >= 1)
        {
          while (1)
          {
            uint64_t v23 = icu::UVector::elementAt(*((icu::UVector **)this + 12), --v19);
            if (icu::RuleBasedTimeZone::getTransitionTime((uint64_t)this, v23, a3, a4, a5) <= a2) {
              break;
            }
            if (v19 <= 0)
            {
              unsigned int v20 = -1;
              goto LABEL_17;
            }
          }
          unsigned int v20 = v19;
        }
      }
      else if (*((void *)this + 11))
      {
        RuleInFinal = icu::RuleBasedTimeZone::findRuleInFinal(this, a2, a3, a4, a5);
        if (RuleInFinal) {
          goto LABEL_19;
        }
      }
LABEL_17:
      int v17 = (icu::UVector **)(icu::UVector::elementAt(*((icu::UVector **)this + 12), v20) + 16);
    }
    else
    {
      int v17 = (icu::UVector **)((char *)this + 72);
    }
    RuleInFinal = *v17;
    if (!*v17) {
      return;
    }
LABEL_19:
    *a6 = icu::TimeZoneRule::getRawOffset(RuleInFinal);
    *a7 = icu::TimeZoneRule::getDSTSavings(RuleInFinal);
  }
}

void icu::RuleBasedTimeZone::getOffset(icu::RuleBasedTimeZone *this, double a2, int a3, int *a4, int *a5, UErrorCode *a6)
{
}

void icu::RuleBasedTimeZone::getOffsetFromLocal(icu::RuleBasedTimeZone *a1, int a2, char a3, int *a4, int *a5, UErrorCode *a6, double a7)
{
}

double icu::RuleBasedTimeZone::getTransitionTime(uint64_t a1, uint64_t a2, int a3, int a4, char a5)
{
  double v5 = *(double *)a2;
  if (a3)
  {
    int RawOffset = icu::TimeZoneRule::getRawOffset(*(icu::TimeZoneRule **)(a2 + 8));
    int DSTSavings = icu::TimeZoneRule::getDSTSavings(*(icu::TimeZoneRule **)(a2 + 8));
    int v11 = icu::TimeZoneRule::getRawOffset(*(icu::TimeZoneRule **)(a2 + 16));
    int v12 = (icu::RuleBasedTimeZone *)icu::TimeZoneRule::getDSTSavings(*(icu::TimeZoneRule **)(a2 + 16));
    return v5 + (double)(int)icu::RuleBasedTimeZone::getLocalDelta(v12, RawOffset, DSTSavings, v11, (int)v12, a4, a5);
  }
  return v5;
}

icu::UVector *icu::RuleBasedTimeZone::findRuleInFinal(icu::RuleBasedTimeZone *this, double a2, int a3, int a4, char a5)
{
  BOOL result = (icu::UVector *)*((void *)this + 11);
  if (result)
  {
    int v11 = (icu::TimeZoneRule *)icu::UVector::elementAt(result, 0);
    int v12 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 1u);
    if (v11) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      return 0;
    }
    else
    {
      uint64_t v14 = v12;
      double v32 = 0.0;
      double v33 = 0.0;
      double v15 = a2;
      if (a3)
      {
        int RawOffset = icu::TimeZoneRule::getRawOffset(v12);
        int DSTSavings = icu::TimeZoneRule::getDSTSavings(v14);
        int v18 = icu::TimeZoneRule::getRawOffset(v11);
        int v19 = (icu::RuleBasedTimeZone *)icu::TimeZoneRule::getDSTSavings(v11);
        double v15 = a2 - (double)(int)icu::RuleBasedTimeZone::getLocalDelta(v19, RawOffset, DSTSavings, v18, (int)v19, a4, a5);
      }
      uint64_t v20 = icu::TimeZoneRule::getRawOffset(v14);
      uint64_t v21 = icu::TimeZoneRule::getDSTSavings(v14);
      int v22 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v11 + 80))(v11, v20, v21, 1, &v33, v15);
      if (a3)
      {
        int v23 = icu::TimeZoneRule::getRawOffset(v11);
        int v24 = icu::TimeZoneRule::getDSTSavings(v11);
        int v25 = icu::TimeZoneRule::getRawOffset(v14);
        char v26 = (icu::RuleBasedTimeZone *)icu::TimeZoneRule::getDSTSavings(v14);
        a2 = a2 - (double)(int)icu::RuleBasedTimeZone::getLocalDelta(v26, v23, v24, v25, (int)v26, a4, a5);
      }
      uint64_t v27 = icu::TimeZoneRule::getRawOffset(v11);
      uint64_t v28 = icu::TimeZoneRule::getDSTSavings(v11);
      int v29 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v14 + 80))(v14, v27, v28, 1, &v32, a2);
      if (v22) {
        BOOL v30 = v29 == 0;
      }
      else {
        BOOL v30 = 1;
      }
      if (v30)
      {
        if (v29) {
          uint64_t v31 = v14;
        }
        else {
          uint64_t v31 = 0;
        }
        if (v22) {
          return v11;
        }
        else {
          return v31;
        }
      }
      else if (v33 <= v32)
      {
        return v14;
      }
      else
      {
        return v11;
      }
    }
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::getRawOffset(icu::RuleBasedTimeZone *this)
{
  uint64_t v5 = 0;
  int v4 = 0;
  double UTCtime = uprv_getUTCtime();
  (*(void (**)(icu::RuleBasedTimeZone *, void, uint64_t *, int *, char *, double))(*(void *)this + 48))(this, 0, &v5, &v4, (char *)&v5 + 4, UTCtime);
  return v5;
}

BOOL icu::RuleBasedTimeZone::useDaylightTime(icu::RuleBasedTimeZone *this)
{
  int v9 = 0;
  double UTCtime = uprv_getUTCtime();
  int v7 = 0;
  int v8 = 0;
  (*(void (**)(icu::RuleBasedTimeZone *, void, int *, int *, int *))(*(void *)this + 48))(this, 0, &v8, &v7, &v9);
  BOOL result = 1;
  if (!v7)
  {
    int v4 = 0;
    if (!icu::RuleBasedTimeZone::findNext(this, UTCtime, 0, &v6, &v5, &v4)
      || !icu::TimeZoneRule::getDSTSavings(v4))
    {
      return 0;
    }
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::findNext(icu::RuleBasedTimeZone *this, double a2, uint64_t a3, double *a4, icu::TimeZoneRule **a5, icu::TimeZoneRule **a6)
{
  uint64_t result = *((void *)this + 12);
  if (!result) {
    return result;
  }
  uint64_t v13 = icu::UVector::elementAt((icu::UVector *)result, 0);
  double v14 = *(double *)v13;
  if (*(double *)v13 > a2 || a3 && v14 == a2)
  {
    double v15 = *(icu::TimeZoneRule **)(v13 + 8);
    uint64_t v16 = *(icu::TimeZoneRule **)(v13 + 16);
  }
  else
  {
    uint64_t v20 = (icu::UVector *)*((void *)this + 12);
    int v21 = *((_DWORD *)v20 + 2);
    uint64_t v22 = icu::UVector::elementAt(v20, v21 - 1);
    double v14 = *(double *)v22;
    if (!a3 || v14 != a2)
    {
      if (v14 <= a2)
      {
        uint64_t result = *((void *)this + 11);
        if (!result) {
          return result;
        }
        uint64_t v16 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)result, 0);
        uint64_t v28 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 1u);
        double v36 = 0.0;
        double v37 = 0.0;
        uint64_t RawOffset = icu::TimeZoneRule::getRawOffset(v28);
        uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(v28);
        LODWORD(RawOffset) = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v16 + 72))(v16, RawOffset, DSTSavings, a3, &v37, a2);
        uint64_t v31 = icu::TimeZoneRule::getRawOffset(v16);
        uint64_t v32 = icu::TimeZoneRule::getDSTSavings(v16);
        int v33 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v28 + 72))(v28, v31, v32, a3, &v36, a2);
        if (!(RawOffset | v33)) {
          return 0;
        }
        int v17 = 0;
        BOOL v34 = v33 != 0;
        BOOL v35 = v37 >= v36;
        if (v34 && v35) {
          double v14 = v36;
        }
        else {
          double v14 = v37;
        }
        if (v34 && v35) {
          double v15 = v16;
        }
        else {
          double v15 = v28;
        }
        if (v34 && v35) {
          uint64_t v16 = v28;
        }
        goto LABEL_7;
      }
      unsigned int v23 = v21 - 3;
      if (v21 >= 3)
      {
        int v24 = (double *)icu::UVector::elementAt(*((icu::UVector **)this + 12), v21 - 2);
        BOOL v25 = *v24 == a2 && a3 == 0;
        if (*v24 >= a2 && !v25)
        {
          do
          {
            uint64_t v22 = (uint64_t)v24;
            if ((int)(v23 + 1) < 2) {
              break;
            }
            int v24 = (double *)icu::UVector::elementAt(*((icu::UVector **)this + 12), v23--);
            BOOL v26 = *v24 == a2 && a3 == 0;
          }
          while (*v24 >= a2 && !v26);
        }
        double v14 = *(double *)v22;
      }
    }
    double v15 = *(icu::TimeZoneRule **)(v22 + 8);
    uint64_t v16 = *(icu::TimeZoneRule **)(v22 + 16);
  }
  int v17 = 1;
LABEL_7:
  int v18 = icu::TimeZoneRule::getRawOffset(v15);
  if (v18 == icu::TimeZoneRule::getRawOffset(v16))
  {
    int v19 = icu::TimeZoneRule::getDSTSavings(v15);
    if (v19 == icu::TimeZoneRule::getDSTSavings(v16))
    {
      if (v17) {
        return icu::RuleBasedTimeZone::findNext(this, v14, 0, a4, a5, a6);
      }
      return 0;
    }
  }
  *a4 = v14;
  *a5 = v15;
  uint64_t result = 1;
  *a6 = v16;
  return result;
}

BOOL icu::RuleBasedTimeZone::inDaylightTime(icu::RuleBasedTimeZone *this, double a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  int v5 = 0;
  int v4 = 0;
  (*(void (**)(icu::RuleBasedTimeZone *, void, int *, int *, UErrorCode *, double))(*(void *)this + 48))(this, 0, &v5, &v4, a3, a2);
  return v4 != 0;
}

uint64_t icu::RuleBasedTimeZone::hasSameRules(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result) {
    return ((*(uint64_t (**)(void, void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72), *(void *)(a2 + 72)) & 1) == 0&& sub_18C9AF3D4(*(void *)(a1 + 80), *(icu::UVector **)(a2 + 80))&& sub_18C9AF3D4(*(void *)(a1 + 88), *(icu::UVector **)(a2 + 88));
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::getNextTransition(icu::RuleBasedTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  UErrorCode v12 = U_ZERO_ERROR;
  icu::RuleBasedTimeZone::completeConst(this, &v12);
  uint64_t result = 0;
  if (v12 <= U_ZERO_ERROR)
  {
    uint64_t v10 = 0;
    double v11 = 0.0;
    int v9 = 0;
    uint64_t result = icu::RuleBasedTimeZone::findNext(this, a2, a3, &v11, &v10, &v9);
    if (result)
    {
      icu::TimeZoneTransition::setTime((uint64_t)a4, v11);
      icu::TimeZoneTransition::setFrom(a4, v10);
      icu::TimeZoneTransition::setTo(a4, v9);
      return 1;
    }
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::getPreviousTransition(icu::RuleBasedTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  UErrorCode v12 = U_ZERO_ERROR;
  icu::RuleBasedTimeZone::completeConst(this, &v12);
  uint64_t result = 0;
  if (v12 <= U_ZERO_ERROR)
  {
    uint64_t v10 = 0;
    double v11 = 0.0;
    int v9 = 0;
    uint64_t result = icu::RuleBasedTimeZone::findPrev(this, a2, a3, &v11, &v10, &v9);
    if (result)
    {
      icu::TimeZoneTransition::setTime((uint64_t)a4, v11);
      icu::TimeZoneTransition::setFrom(a4, v10);
      icu::TimeZoneTransition::setTo(a4, v9);
      return 1;
    }
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::findPrev(icu::RuleBasedTimeZone *this, double a2, uint64_t a3, double *a4, icu::TimeZoneRule **a5, icu::TimeZoneRule **a6)
{
  uint64_t result = *((void *)this + 12);
  if (!result) {
    return result;
  }
  uint64_t v13 = icu::UVector::elementAt((icu::UVector *)result, 0);
  double v14 = *(double *)v13;
  if (a3 && v14 == a2) {
    goto LABEL_4;
  }
  if (v14 >= a2) {
    return 0;
  }
  int v19 = (icu::UVector *)*((void *)this + 12);
  int v20 = *((_DWORD *)v19 + 2);
  uint64_t v13 = icu::UVector::elementAt(v19, v20 - 1);
  double v14 = *(double *)v13;
  if (!a3 || v14 != a2)
  {
    if (v14 >= a2)
    {
      BOOL v29 = __OFSUB__(v20, 2);
      signed int v30 = v20 - 2;
      if (v30 < 0 == v29)
      {
        do
        {
          uint64_t v13 = icu::UVector::elementAt(*((icu::UVector **)this + 12), v30);
          double v14 = *(double *)v13;
          BOOL v32 = *(double *)v13 == a2 && a3 != 0;
          BOOL v29 = __OFSUB__(v30--, 1);
          if (v30 < 0 != v29) {
            break;
          }
        }
        while (v14 >= a2 && !v32);
      }
    }
    else if (*((void *)this + 11))
    {
      uint64_t v16 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 0);
      int v21 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 1u);
      double v34 = 0.0;
      double v35 = 0.0;
      uint64_t RawOffset = icu::TimeZoneRule::getRawOffset(v21);
      uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(v21);
      LODWORD(RawOffset) = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v16 + 80))(v16, RawOffset, DSTSavings, a3, &v35, a2);
      uint64_t v24 = icu::TimeZoneRule::getRawOffset(v16);
      uint64_t v25 = icu::TimeZoneRule::getDSTSavings(v16);
      int v26 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v21 + 80))(v21, v24, v25, a3, &v34, a2);
      if (RawOffset | v26)
      {
        BOOL v27 = v26 != 0;
        BOOL v28 = v35 <= v34;
        if (v27 && v28) {
          double v14 = v34;
        }
        else {
          double v14 = v35;
        }
        if (v27 && v28) {
          double v15 = v16;
        }
        else {
          double v15 = v21;
        }
        if (v27 && v28) {
          uint64_t v16 = v21;
        }
        goto LABEL_5;
      }
      return 0;
    }
  }
LABEL_4:
  double v15 = *(icu::TimeZoneRule **)(v13 + 8);
  uint64_t v16 = *(icu::TimeZoneRule **)(v13 + 16);
LABEL_5:
  int v17 = icu::TimeZoneRule::getRawOffset(v15);
  if (v17 == icu::TimeZoneRule::getRawOffset(v16))
  {
    int v18 = icu::TimeZoneRule::getDSTSavings(v15);
    if (v18 == icu::TimeZoneRule::getDSTSavings(v16)) {
      return icu::RuleBasedTimeZone::findPrev(this, v14, 0, a4, a5, a6);
    }
  }
  *a4 = v14;
  *a5 = v15;
  uint64_t result = 1;
  *a6 = v16;
  return result;
}

uint64_t icu::RuleBasedTimeZone::countTransitionRules(icu::RuleBasedTimeZone *this, UErrorCode *a2)
{
  uint64_t v3 = *((void *)this + 10);
  if (v3) {
    uint64_t result = *(unsigned int *)(v3 + 8);
  }
  else {
    uint64_t result = 0;
  }
  uint64_t v5 = *((void *)this + 11);
  if (v5) {
    return (*(_DWORD *)(v5 + 8) + result);
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::getTimeZoneRules(uint64_t result, void *a2, uint64_t a3, int *a4, int *a5)
{
  if (*a5 <= 0)
  {
    uint64_t v7 = result;
    *a2 = *(void *)(result + 72);
    uint64_t v8 = *(void *)(result + 80);
    LODWORD(v9) = *a4;
    if (v8) {
      BOOL v10 = (int)v9 < 1;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10 || (int v11 = *(_DWORD *)(v8 + 8), v11 < 1))
    {
      LODWORD(v12) = 0;
    }
    else
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = v12++;
        uint64_t result = icu::UVector::elementAt(*(icu::UVector **)(v7 + 80), v13);
        *(void *)(a3 + 8 * v13) = result;
        uint64_t v9 = *a4;
      }
      while (v12 < v9 && v11 > (int)v12);
    }
    uint64_t v15 = *(void *)(v7 + 88);
    if (v15) {
      BOOL v16 = (int)v12 < (int)v9;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16)
    {
      int v17 = *(_DWORD *)(v15 + 8);
      if (v17 >= 1)
      {
        uint64_t v18 = 0;
        int v19 = v12;
        uint64_t v20 = a3 + 8 * v12;
        do
        {
          int v21 = v18 + 1;
          uint64_t result = icu::UVector::elementAt(*(icu::UVector **)(v7 + 88), v18);
          *(void *)(v20 + 8 * v18) = result;
          int v22 = v19 + v18++ + 1;
        }
        while (*a4 > v22 && v21 < v17);
        LODWORD(v12) = v19 + v21;
      }
    }
    *a4 = v12;
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::getLocalDelta(icu::RuleBasedTimeZone *this, int a2, int a3, int a4, int a5, int a6, char a7)
{
  BOOL v7 = a3 != 0;
  BOOL v8 = a3 == 0;
  if (a5) {
    BOOL v7 = 0;
  }
  else {
    BOOL v8 = 0;
  }
  int v9 = a7 & 3;
  BOOL v10 = v9 == 1 && v7;
  BOOL v11 = v9 == 3 && v8;
  BOOL v12 = v9 == 1 && v8;
  BOOL v13 = v9 == 3 && v7;
  if ((a7 & 0xC) == 4) {
    unsigned int v14 = a3 + a2;
  }
  else {
    unsigned int v14 = a5 + a4;
  }
  if (v13) {
    unsigned int v15 = a3 + a2;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v12) {
    unsigned int v15 = a3 + a2;
  }
  if (v11) {
    unsigned int v15 = a5 + a4;
  }
  if (v10) {
    unsigned int v15 = a5 + a4;
  }
  int v16 = a6 & 3;
  BOOL v17 = v16 == 1 && v7;
  BOOL v18 = v16 == 3 && v8;
  if (v16 != 1) {
    BOOL v8 = 0;
  }
  if (v16 != 3) {
    BOOL v7 = 0;
  }
  if ((~a6 & 0xC) != 0) {
    unsigned int v19 = a5 + a4;
  }
  else {
    unsigned int v19 = a3 + a2;
  }
  if (v7) {
    unsigned int v20 = a5 + a4;
  }
  else {
    unsigned int v20 = v19;
  }
  if (v8) {
    unsigned int v20 = a5 + a4;
  }
  if (v18) {
    unsigned int v20 = a3 + a2;
  }
  if (v17) {
    unsigned int v20 = a3 + a2;
  }
  if (a5 + a4 >= a3 + a2) {
    return v20;
  }
  else {
    return v15;
  }
}

icu::RegexCompile *icu::RegexCompile::RegexCompile(icu::RegexCompile *this, icu::RegexPattern *a2, UErrorCode *a3)
{
  *(void *)this = &unk_1EDA51AF8;
  *((void *)this + 37) = &unk_1EDA47700;
  *((_WORD *)this + 152) = 2;
  icu::UVector32::UVector32((icu::RegexCompile *)((char *)this + 368), a3);
  icu::UStack::UStack((uint64_t)this + 416, (uint64_t)uprv_deleteUObject, 0, (int *)a3);
  icu::UStack::UStack((icu::RegexCompile *)((char *)this + 456), a3);
  sub_18C9B7A68(a3);
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a2;
  *((void *)this + 4) = 0;
  *((void *)this + 8) = -1;
  *((_OWORD *)this + 3) = xmmword_18CA95FE0;
  *((_WORD *)this + 20) = 0;
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 6) | 0x80000000;
  *((unsigned char *)this + 42) = 1;
  *((void *)this + 50) = -1;
  *((void *)this + 63) = 0;
  *((_DWORD *)this + 124) = -1;
  if (*(int *)a3 <= 0)
  {
    UErrorCode v6 = *((_DWORD *)a2 + 30);
    if (v6 >= U_ILLEGAL_ARGUMENT_ERROR) {
      *a3 = v6;
    }
  }
  return this;
}

void icu::RegexCompile::~RegexCompile(icu::RegexCompile *this)
{
  *(void *)this = &unk_1EDA51AF8;
  uint64_t v2 = *((void *)this + 63);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  icu::UStack::~UStack((icu::RegexCompile *)((char *)this + 456));
  icu::UStack::~UStack((icu::RegexCompile *)((char *)this + 416));
  icu::UVector32::~UVector32((void **)this + 46);
  icu::UnicodeString::~UnicodeString(v3, (icu::RegexCompile *)((char *)this + 296));
}

{
  void *v1;
  uint64_t vars8;

  icu::RegexCompile::~RegexCompile(this);

  icu::UMemory::operator delete(v1);
}

UText *icu::RegexCompile::compile@<X0>(icu::RegexCompile *this@<X0>, UChar **a2@<X1>, UParseError *a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  int v9 = (icu::UnicodeString *)icu::UMemory::operator new(a5, (icu::UMemory *)0x40, (unint64_t)a2);
  uint64_t v10 = (uint64_t)v9;
  if (v9) {
    icu::UnicodeString::UnicodeString(v9, a2);
  }
  *(void *)(*((void *)this + 2) + 16) = v10;
  memset(&v12, 0, sizeof(v12));
  v12.magic = 878368812;
  v12.sizeOfStruct = 144;
  uint64_t result = utext_openConstUnicodeString(&v12, v10, a4);
  if (*(int *)a4 <= 0)
  {
    icu::RegexCompile::compile(this, &v12, a3, a4);
    return utext_close(&v12);
  }
  return result;
}

void icu::RegexCompile::compile(icu::RegexCompile *this, UText *a2, UParseError *a3, UErrorCode *status)
{
  *((void *)this + 1) = status;
  *((void *)this + 3) = a3;
  *((_DWORD *)this + 70) = 0;
  *((_WORD *)this + 40) = 0;
  if (*(int *)status <= 0)
  {
    BOOL v7 = utext_clone(*(UText **)(*((void *)this + 2) + 8), a2, 0, 1, status);
    BOOL v8 = (int *)*((void *)this + 1);
    *(void *)(*((void *)this + 2) + 8) = v7;
    if (*v8 <= 0)
    {
      *((void *)this + 45) = utext_nativeLength(a2);
      if ((*((unsigned char *)this + 284) & 0x10) != 0) {
        *((unsigned char *)this + 40) = 1;
      }
      int v9 = (int *)((char *)this + 72);
      icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
      if (**((int **)this + 1) <= 0)
      {
        LOWORD(v10) = 1;
        while (1)
        {
          for (unsigned int i = (char *)&unk_18CA95FF0 + 8 * (unsigned __int16)v10 + 7; ; i += 8)
          {
            unint64_t v12 = *(i - 3);
            if (v12 <= 0x7E && !*((unsigned char *)this + 76) && *v9 == v12) {
              break;
            }
            if (v12 == 253)
            {
              unint64_t v12 = *v9;
              if (v12 == -1) {
                break;
              }
            }
            else if (v12 == 254)
            {
              unint64_t v12 = *((unsigned __int8 *)this + 76);
              if (*((unsigned char *)this + 76)) {
                break;
              }
            }
            else if (v12 == 255 {
                   || (char)v12 <= -17
            }
                   && !*((unsigned char *)this + 76)
                   && *v9 != -1
                   && icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1EB20BEF0 + 200 * (v12 - 128) + 3024), *v9))
            {
              break;
            }
          }
          if (!icu::RegexCompile::doParseActions(this, *(unsigned int *)(i - 7), (uint64_t *)v12)) {
            break;
          }
          __int16 v13 = *(i - 1);
          if (*(i - 1))
          {
            int v14 = *((_DWORD *)this + 70);
            int v15 = v14 + 1;
            *((_DWORD *)this + 70) = v14 + 1;
            if (v14 >= 99)
            {
              icu::RegexCompile::error(this, 66304);
              int v15 = *((_DWORD *)this + 70) - 1;
              *((_DWORD *)this + 70) = v15;
            }
            *((_WORD *)this + v15 + 40) = v13;
          }
          if (*i) {
            icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
          }
          int v10 = *(i - 2);
          if (v10 == 255)
          {
            uint64_t v16 = *((int *)this + 70);
            LOWORD(v10) = *((_WORD *)this + v16 + 40);
            *((_DWORD *)this + 70) = v16 - 1;
            if ((int)v16 <= 0)
            {
              *((_DWORD *)this + 70) = v16;
              icu::RegexCompile::error(this, 66310);
            }
          }
          if (**((int **)this + 1) >= 1) {
            return;
          }
        }
        if (**((int **)this + 1) <= 0)
        {
          icu::RegexCompile::allocateStackData(this, 2);
          icu::RegexCompile::stripNOPs(this);
          *(_DWORD *)(*((void *)this + 2) + 124) = icu::RegexCompile::minMatchLength(this, 3, *(_DWORD *)(*(void *)(*((void *)this + 2) + 32) + 8)- 1);
          icu::RegexCompile::matchStartType(this);
          uint64_t v18 = *(int *)(*(void *)(*((void *)this + 2) + 104) + 8);
          if ((int)v18 < 0) {
            uint64_t v19 = -1;
          }
          else {
            uint64_t v19 = 32 * v18;
          }
          unsigned int v20 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v19, v17);
          if (v20)
          {
            int v21 = v20;
            if (v18)
            {
              bzero(v20, 32 * v18);
              *(void *)(*((void *)this + 2) + 112) = v21;
              if ((int)v18 >= 1)
              {
                uint64_t v22 = 0;
                do
                {
                  uint64_t v23 = icu::UVector::elementAt(*(icu::UVector **)(*((void *)this + 2) + 104), v22);
                  if (v23)
                  {
                    uint64_t v24 = (icu::UnicodeSet *)v23;
                    unsigned int v25 = 0;
                    uint64_t v26 = *(void *)(*((void *)this + 2) + 112) + 32 * v22;
                    do
                    {
                      if (icu::UnicodeSet::contains(v24, v25)) {
                        *(unsigned char *)(v26 + ((unint64_t)v25 >> 3)) |= 1 << (v25 & 7);
                      }
                      ++v25;
                    }
                    while (v25 != 256);
                  }
                  ++v22;
                }
                while (v22 != v18);
              }
            }
            else
            {
              *(void *)(*((void *)this + 2) + 112) = v20;
            }
          }
          else
          {
            BOOL v27 = (_DWORD *)*((void *)this + 1);
            *(void *)(*((void *)this + 2) + 112) = 0;
            *BOOL v27 = 7;
            *status = U_MEMORY_ALLOCATION_ERROR;
          }
        }
      }
    }
  }
}

void icu::RegexCompile::nextChar(uint64_t a1, UChar32 *a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v5 = *(int *)(v4 + 40);
    if ((int)v5 <= *(_DWORD *)(v4 + 28)) {
      uint64_t v6 = *(void *)(v4 + 32) + v5;
    }
    else {
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(v4 + 56) + 64))();
    }
    *(void *)(a1 + 32) = v6;
    uint64_t CharLL = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
    *a2 = CharLL;
    *((unsigned char *)a2 + 4) = 0;
    if (*(unsigned char *)(a1 + 40))
    {
      *((unsigned char *)a2 + 4) = 1;
      if (CharLL == 92
        && ((int v8 = *(_DWORD *)(a1 + 68), v8 == -1)
          ? (int v8 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1),
             *(_DWORD *)(a1 + 68) = v8,
             LODWORD(CharLL) = *a2)
          : (LODWORD(CharLL) = 92),
            v8 == 69))
      {
        char v17 = 0;
        if ((*(unsigned char *)(a1 + 284) & 0x10) != 0 && CharLL != -1) {
          goto LABEL_86;
        }
      }
      else
      {
        if (CharLL != -1) {
          goto LABEL_86;
        }
        char v17 = 0;
      }
      goto LABEL_49;
    }
    if (*(unsigned char *)(a1 + 41))
    {
      *(unsigned char *)(a1 + 41) = 0;
      goto LABEL_86;
    }
    if ((*(unsigned char *)(a1 + 284) & 4) != 0)
    {
      while (1)
      {
        if (CharLL == 35)
        {
          if (*(unsigned char *)(a1 + 42))
          {
            do
            {
              uint64_t CharLL = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
              *a2 = CharLL;
              BOOL v10 = (CharLL + 1) <= 0xE && ((1 << (CharLL + 1)) & 0x4801) != 0 || CharLL == 8232;
            }
            while (!v10 && CharLL != 133);
          }
          else
          {
            uint64_t CharLL = 35;
          }
        }
        else if (CharLL == -1)
        {
          goto LABEL_86;
        }
        if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)CharLL)) {
          break;
        }
        uint64_t CharLL = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
        *a2 = CharLL;
      }
      LODWORD(CharLL) = *a2;
    }
    if (CharLL != 92) {
      goto LABEL_86;
    }
    uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v12 = *(int *)(v11 + 40);
    if ((int)v12 <= *(_DWORD *)(v11 + 28)) {
      int64_t v13 = *(void *)(v11 + 32) + v12;
    }
    else {
      int64_t v13 = (*(uint64_t (**)(void))(*(void *)(v11 + 56) + 64))();
    }
    uint64_t v14 = qword_1EB20BEF0;
    int v15 = *(_DWORD *)(a1 + 68);
    if (v15 == -1)
    {
      int v15 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *(_DWORD *)(a1 + 68) = v15;
    }
    if (icu::UnicodeSet::contains((icu::UnicodeSet *)(v14 + 3624), v15))
    {
      icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *((unsigned char *)a2 + 4) = 1;
      uint64_t v18 = *(UText **)(*(void *)(a1 + 16) + 8);
      int64_t chunkNativeStart = v18->chunkNativeStart;
      if (!chunkNativeStart
        && (uint64_t v20 = *(void *)(a1 + 360), v20 == v18->chunkNativeLimit)
        && v20 == v18->nativeIndexingLimit)
      {
        offset[0] = v13;
        *a2 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18C9B7D38, offset, v20, (void *)v18->chunkContents);
        int64_t v21 = offset[0];
        if (v13 == offset[0])
        {
          icu::RegexCompile::error((void *)a1, 66307);
          int64_t v21 = offset[0];
        }
        *(void *)(a1 + 56) += v21 - v13;
        uint64_t v22 = *(UText **)(*(void *)(a1 + 16) + 8);
        uint64_t v23 = v21 - v22->chunkNativeStart;
        if (v23 < 0 || v23 >= v22->nativeIndexingLimit || v22->chunkContents[v23] >> 10 > 0x36u) {
          utext_setNativeIndex(v22, v21);
        }
        else {
          v22->int32_t chunkOffset = v23;
        }
      }
      else
      {
        int32_t v35 = 0;
        *(void *)offset = v18;
        uint64_t v34 = 0xFFFFFFFFLL;
        uint64_t v24 = v13 - chunkNativeStart;
        if (v24 < 0 || v24 >= v18->nativeIndexingLimit || v18->chunkContents[v24] >> 10 > 0x36u) {
          utext_setNativeIndex(v18, v13);
        }
        else {
          v18->int32_t chunkOffset = v24;
        }
        *a2 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18C9B7BDC, &v35, 0x7FFFFFFF, offset);
        if (v35)
        {
          if (v34 == v35)
          {
            unsigned int v25 = *(UText **)(*(void *)(a1 + 16) + 8);
            int32_t chunkOffset = v25->chunkOffset;
            BOOL v27 = __OFSUB__(chunkOffset, 1);
            int v28 = chunkOffset - 1;
            if (v28 < 0 != v27 || v25->chunkContents[v28] >> 11 > 0x1Au) {
              utext_previous32(v25);
            }
            else {
              v25->int32_t chunkOffset = v28;
            }
          }
          else if (v34 != v35 - 1)
          {
            utext_moveIndex32(*(UText **)(*(void *)(a1 + 16) + 8), v35 + ~v34);
          }
        }
        else
        {
          icu::RegexCompile::error((void *)a1, 66307);
        }
        *(void *)(a1 + 56) += v35;
      }
      goto LABEL_86;
    }
    int v16 = *(_DWORD *)(a1 + 68);
    if (v16 == -1)
    {
      int v16 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *(_DWORD *)(a1 + 68) = v16;
    }
    if (v16 != -1) {
      break;
    }
    int v16 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
    *(_DWORD *)(a1 + 68) = v16;
LABEL_40:
    char v17 = 1;
    if (v16 != 81)
    {
      *(unsigned char *)(a1 + 41) = 1;
      goto LABEL_86;
    }
LABEL_49:
    *(unsigned char *)(a1 + 40) = v17;
    icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
  }
  if (v16 != 48) {
    goto LABEL_40;
  }
  *a2 = 0;
  icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
  int v29 = 0;
  while (1)
  {
    int v30 = *(_DWORD *)(a1 + 68);
    if (v30 == -1)
    {
      int v30 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *(_DWORD *)(a1 + 68) = v30;
    }
    if ((v30 - 56) <= 0xFFFFFFF7) {
      break;
    }
    UChar32 v31 = *a2;
    int v32 = v30 & 7 | (8 * *a2);
    *a2 = v32;
    if (v32 > 255) {
      *a2 = v31 & 0x1FFFFFFF;
    }
    else {
      icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
    }
    if (--v29 == -3) {
      goto LABEL_83;
    }
  }
  if (!v29) {
    icu::RegexCompile::error((void *)a1, 66307);
  }
LABEL_83:
  *((unsigned char *)a2 + 4) = 1;
LABEL_86:
  *(unsigned char *)(a1 + 42) = 1;
}

uint64_t icu::RegexCompile::doParseActions@<X0>(icu::RegexCompile *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = this;
  unsigned int v4 = 1;
  switch((int)a2)
  {
    case 0:
      int v15 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      uint64_t v193 = 0;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      long long v183 = 0u;
      long long v184 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v181);
      icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v181, 0x2000, 0x200u, *((UErrorCode **)v3 + 1));
      goto LABEL_114;
    case 1:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 939524096;
      goto LABEL_305;
    case 2:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 939524097;
      goto LABEL_305;
    case 3:
      if ((*((unsigned char *)this + 285) & 2) != 0 && (*((_DWORD *)this + 18) & 0xFFFFFFDF) - 65 <= 0x19) {
        icu::RegexCompile::error(this, 66307);
      }
      goto LABEL_149;
    case 4:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int Data = icu::RegexCompile::allocateData((int **)v3, 4);
      int v92 = icu::RegexCompile::buildOp((int **)v3, 0x25u, Data);
      icu::RegexCompile::appendOp(v3, v92);
      if (**((int **)v3 + 1) <= 0) {
        int v93 = 100663296;
      }
      else {
        int v93 = 0;
      }
      icu::RegexCompile::appendOp(v3, v93);
      if (**((int **)v3 + 1) <= 0) {
        int v94 = 117440512;
      }
      else {
        int v94 = 0;
      }
      icu::RegexCompile::appendOp(v3, v94);
      UChar32 v31 = (icu::RegexCompile *)((char *)v3 + 368);
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), *((unsigned int *)v3 + 71), *((UErrorCode **)v3 + 1));
      int v32 = (UErrorCode *)*((void *)v3 + 1);
      int v33 = (icu::RegexCompile *)((char *)v3 + 368);
      uint64_t v34 = 4294967291;
      goto LABEL_203;
    case 5:
      uint64_t v70 = *(void *)(*((void *)this + 2) + 192);
      if (v70 && (int v71 = uhash_geti(v70, *((void *)v3 + 63))) != 0)
      {
        int v72 = v71;
        icu::RegexCompile::fixLiterals((uint64_t)v3, 0);
        if ((*((unsigned char *)v3 + 284) & 2) != 0) {
          unsigned int v73 = 41;
        }
        else {
          unsigned int v73 = 34;
        }
        int v177 = icu::RegexCompile::buildOp((int **)v3, v73, v72);
        icu::RegexCompile::appendOp(v3, v177);
      }
      else
      {
        icu::RegexCompile::error(v3, 66325);
      }
      uint64_t v178 = *((void *)v3 + 63);
      if (v178) {
        (*(void (**)(uint64_t))(*(void *)v178 + 8))(v178);
      }
      *((void *)v3 + 63) = 0;
      goto LABEL_331;
    case 6:
      if (**((int **)this + 1) <= 0) {
        int v98 = 100663298;
      }
      else {
        int v98 = 0;
      }
      icu::RegexCompile::appendOp(this, v98);
      if (**((int **)v3 + 1) <= 0) {
        int v99 = 218103811;
      }
      else {
        int v99 = 0;
      }
      icu::RegexCompile::appendOp(v3, v99);
      if (**((int **)v3 + 1) <= 0) {
        int v100 = 234881024;
      }
      else {
        int v100 = 0;
      }
      icu::RegexCompile::appendOp(v3, v100);
      icu::RegexCompile::doParseActions(v3, 31);
      goto LABEL_331;
    case 7:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v9 = **((_DWORD **)v3 + 1);
      int v10 = 822083585;
      goto LABEL_168;
    case 8:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 369098753;
      goto LABEL_305;
    case 9:
      unsigned int v117 = icu::RegexCompile::blockTopLoc(this, 1);
      int v118 = icu::RegexCompile::buildOp((int **)v3, 0xDu, *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8));
      icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v118, v117);
      goto LABEL_217;
    case 10:
      goto LABEL_331;
    case 11:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 318767104;
      goto LABEL_305;
    case 12:
LABEL_149:
      icu::RegexCompile::setEval(v3, 262150);
      uint64_t v97 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)v3 + 416), *((_DWORD *)v3 + 106) - 1);
      icu::UnicodeSet::add(v97, *((_DWORD *)v3 + 18));
      *((_DWORD *)v3 + 124) = *((_DWORD *)v3 + 18);
      goto LABEL_331;
    case 13:
    case 30:
      uint64_t v7 = *((void *)this + 63);
      unsigned int v8 = *((_DWORD *)v3 + 18);
      goto LABEL_49;
    case 14:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 285212672;
      goto LABEL_305;
    case 15:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 956301312;
      goto LABEL_305;
    case 16:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      long long v76 = (icu::UnicodeSet *)icu::UMemory::operator new(v75, (icu::UMemory *)0xC8, v74);
      long long v77 = v76;
      if (v76)
      {
        icu::UnicodeSet::UnicodeSet(v76);
        uint64_t v79 = (UErrorCode **)((char *)v3 + 8);
        long long v78 = (UErrorCode *)*((void *)v3 + 1);
      }
      else
      {
        uint64_t v79 = (UErrorCode **)((char *)v3 + 8);
        long long v78 = (UErrorCode *)*((void *)v3 + 1);
        if (*(int *)v78 <= 0) {
          *long long v78 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
      *(void *)&long long v181 = 0;
      sub_18C9B5AE4((uint64_t)v3 + 416, v77, v78);
      icu::UVector::addElement((icu::RegexCompile *)((char *)v3 + 456), 1, *((UErrorCode **)v3 + 1));
      v168 = (void *)*((unsigned __int8 *)v3 + 284);
      if ((v168 & 2) != 0) {
        icu::UVector::addElement((icu::RegexCompile *)((char *)v3 + 456), 131081, *v79);
      }
      sub_18C98DDFC((icu::UnicodeSet **)&v181, v168);
      goto LABEL_331;
    case 17:
      unsigned int v116 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      icu::UnicodeSet::add(v116, 0xAu, 0xDu);
      icu::UnicodeSet::add(v116, 0x85u);
      unsigned int v111 = v116;
      unsigned int v112 = 8232;
      unsigned int v113 = 8233;
      goto LABEL_172;
    case 18:
      unsigned int v66 = icu::RegexCompile::blockTopLoc(this, 1);
      int v12 = icu::RegexCompile::allocateData((int **)v3, 1);
      int v67 = icu::RegexCompile::buildOp((int **)v3, 0x20u, v12);
      icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v67, v66);
      int v68 = icu::RegexCompile::buildOp((int **)v3, 6u, *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) + 2);
      icu::RegexCompile::appendOp(v3, v68);
      int v69 = icu::RegexCompile::buildOp((int **)v3, 0xDu, v66 + 1);
      icu::RegexCompile::appendOp(v3, v69);
      goto LABEL_99;
    case 19:
    case 35:
      int v5 = 66309;
      goto LABEL_194;
    case 20:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
LABEL_179:
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 402653184;
      goto LABEL_305;
    case 21:
      unint64_t v46 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      unsigned int v47 = 38;
      goto LABEL_189;
    case 22:
      int v65 = 262151;
      goto LABEL_238;
    case 23:
      int v5 = 66312;
      goto LABEL_194;
    case 24:
      int v88 = (icu::RegexCompile *)((char *)this + 456);
      if (icu::UVector::elementAti((icu::RegexCompile *)((char *)this + 456), *((_DWORD *)this + 116) - 1) == 131081)
      {
        icu::UStack::popi((icu::RegexCompile *)((char *)v3 + 456));
        icu::UVector::addElement((icu::RegexCompile *)((char *)v3 + 456), 131075, *((UErrorCode **)v3 + 1));
LABEL_239:
        v156 = (UErrorCode *)*((void *)v3 + 1);
        v157 = v88;
        int v158 = 131081;
      }
      else
      {
        v156 = (UErrorCode *)*((void *)v3 + 1);
        int v158 = 131075;
        v157 = (icu::RegexCompile *)((char *)v3 + 456);
      }
      icu::UVector::addElement(v157, v158, v156);
      goto LABEL_331;
    case 25:
      *((void *)this + 51) = 0xFFFFFFFF00000000;
      goto LABEL_331;
    case 26:
      int v16 = 196613;
      goto LABEL_145;
    case 27:
      unsigned int v101 = icu::RegexCompile::blockTopLoc(this, 0);
      icu::RegexCompile::compileInterval(v3, 0x19u, 0x1Cu);
      icu::RegexCompile::insertOp(v3, v101);
      uint64_t v102 = 1;
      int i = icu::RegexCompile::allocateData((int **)v3, 1);
      int v104 = icu::RegexCompile::buildOp((int **)v3, 0x20u, i);
      icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v104, v101);
      uint64_t v105 = *(void *)(*((void *)v3 + 2) + 32);
      int v106 = *(_DWORD *)(v105 + 8);
      BOOL v59 = __OFSUB__(v106, 1);
      int v107 = v106 - 1;
      if (v107 < 0 == v59)
      {
        *(_DWORD *)(v105 + 8) = v107;
        uint64_t v102 = (int)(*(void *)(*(void *)(v105 + 24) + 8 * v107) + 1);
      }
      sub_18C9B54A4((icu::UVector64 *)v105, v102, *((UErrorCode **)v3 + 1));
      uint64_t v108 = (int **)v3;
      unsigned int v109 = 33;
      goto LABEL_262;
    case 28:
    case 37:
    case 81:
      int v5 = 66305;
      goto LABEL_194;
    case 29:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 822083585;
      goto LABEL_305;
    case 31:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      if (**((int **)v3 + 1) <= 0) {
        int v62 = 117440512;
      }
      else {
        int v62 = 0;
      }
      icu::RegexCompile::appendOp(v3, v62);
      if (**((int **)v3 + 1) <= 0) {
        int v63 = 117440512;
      }
      else {
        int v63 = 0;
      }
      icu::RegexCompile::appendOp(v3, v63);
      UChar32 v31 = (icu::RegexCompile *)((char *)v3 + 368);
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), *((unsigned int *)v3 + 71), *((UErrorCode **)v3 + 1));
      int v32 = (UErrorCode *)*((void *)v3 + 1);
      int v33 = (icu::RegexCompile *)((char *)v3 + 368);
      uint64_t v34 = 0xFFFFFFFFLL;
      goto LABEL_203;
    case 32:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      goto LABEL_79;
    case 33:
      unsigned int v54 = icu::RegexCompile::scanNamedChar(this);
      icu::RegexCompile::setEval(v3, 262150);
      uint64_t v64 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)v3 + 416), *((_DWORD *)v3 + 106) - 1);
      icu::UnicodeSet::add(v64, v54);
      goto LABEL_88;
    case 34:
      int v15 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      uint64_t v193 = 0;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      long long v183 = 0u;
      long long v184 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v181);
      icu::UnicodeSet::add((icu::UnicodeSet *)&v181, 0xAu, 0xDu);
      icu::UnicodeSet::add((icu::UnicodeSet *)&v181, 0x85u);
      icu::UnicodeSet::add((icu::UnicodeSet *)&v181, 0x2028u, 0x2029u);
      goto LABEL_114;
    case 36:
      int v5 = 66307;
      goto LABEL_195;
    case 38:
      unsigned int v35 = icu::RegexCompile::blockTopLoc(this, 1);
      icu::RegexCompile::insertOp(v3, v35);
      unsigned int v36 = icu::RegexCompile::allocateData((int **)v3, 1);
      int v37 = icu::RegexCompile::buildOp((int **)v3, 0x20u, v36);
      icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v37, v35);
      int v38 = icu::RegexCompile::buildOp((int **)v3, 6u, *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) + 1);
      icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v38, ++v35);
      int v39 = icu::RegexCompile::buildOp((int **)v3, 0xDu, v35);
      icu::RegexCompile::appendOp(v3, v39);
      long long v40 = (int **)v3;
      unsigned int v41 = 33;
      goto LABEL_214;
    case 39:
      unint64_t v46 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      unsigned int v47 = 45;
LABEL_189:
      icu::UnicodeSet::add(v46, v47);
      goto LABEL_331;
    case 40:
      if ((*((unsigned char *)this + 285) & 2) != 0 && (*((_DWORD *)this + 18) & 0xFFFFFFDF) - 65 <= 0x19) {
        icu::RegexCompile::error(this, 66307);
      }
      goto LABEL_47;
    case 41:
      unint64_t v89 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      uint64_t v90 = (const icu::UnicodeSet *)(qword_1EB20BEF0 + 208);
      goto LABEL_187;
    case 42:
      if ((*((_DWORD *)this + 103) & 0x80000000) != 0) {
        *((_DWORD *)this + 103) = 0;
      }
      uint64_t v123 = 10 * *((int *)this + 103) + u_charDigitValue(*((_DWORD *)this + 18));
      if (v123 >= 0x80000000) {
        goto LABEL_193;
      }
      *((_DWORD *)v3 + 103) = v123;
      goto LABEL_331;
    case 43:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 973078528;
      goto LABEL_305;
    case 44:
      int v15 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      uint64_t v193 = 0;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      long long v183 = 0u;
      long long v184 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v181);
      uint64_t v23 = (const icu::UnicodeSet *)(qword_1EB20BEF0 + 808);
      goto LABEL_110;
    case 45:
      int v5 = 66319;
      goto LABEL_194;
    case 46:
      v140 = icu::RegexCompile::scanProp((int **)this);
      if (!v140) {
        goto LABEL_331;
      }
      goto LABEL_241;
    case 47:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v24 = **((_DWORD **)v3 + 1);
      if ((*((_DWORD *)v3 + 71) & 0x100) != 0) {
        int v25 = 889192449;
      }
      else {
        int v25 = 268435457;
      }
      goto LABEL_93;
    case 48:
      icu::RegexCompile::setEval(this, 65538);
      icu::UStack::popi((icu::RegexCompile *)((char *)v3 + 456));
      goto LABEL_331;
    case 49:
      int v110 = *((_DWORD *)this + 124);
      if (v110 == -1 || v110 > *((_DWORD *)this + 18)) {
        icu::RegexCompile::error(this, 66320);
      }
      unsigned int v111 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)v3 + 416), *((_DWORD *)v3 + 106) - 1);
      unsigned int v112 = *((_DWORD *)v3 + 124);
      unsigned int v113 = *((_DWORD *)v3 + 18);
LABEL_172:
      icu::UnicodeSet::add(v111, v112, v113);
      goto LABEL_331;
    case 50:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      if (**((int **)v3 + 1) <= 0) {
        int v95 = 117440512;
      }
      else {
        int v95 = 0;
      }
      icu::RegexCompile::appendOp(v3, v95);
      if (**((int **)v3 + 1) <= 0) {
        int v96 = 117440512;
      }
      else {
        int v96 = 0;
      }
      icu::RegexCompile::appendOp(v3, v96);
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), *((unsigned int *)v3 + 71), *((UErrorCode **)v3 + 1));
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), 4294967290, *((UErrorCode **)v3 + 1));
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), (*(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) - 2), *((UErrorCode **)v3 + 1));
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), (*(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) - 1), *((UErrorCode **)v3 + 1));
      goto LABEL_143;
    case 51:
      signed int v131 = icu::RegexCompile::blockTopLoc(this, 0);
      unsigned int v36 = v131;
      uint64_t v132 = *(void *)(*((void *)v3 + 2) + 32);
      signed int v133 = *(_DWORD *)(v132 + 8);
      int v134 = v133 - 1;
      if (v133 <= v131 || v131 < 0 || v131 != v134) {
        goto LABEL_212;
      }
      uint64_t v135 = *(void *)(*(void *)(v132 + 24) + 8 * v131);
      int v136 = BYTE3(v135);
      if (BYTE3(v135) <= 0x14u)
      {
        if (BYTE3(v135) == 11)
        {
          int v171 = icu::RegexCompile::buildOp((int **)v3, 0x32u, v135 & 0xFFFFFF);
LABEL_325:
          icu::RegexCompile::appendOp(v3, v171);
          goto LABEL_328;
        }
        if (BYTE3(v135) != 12) {
          goto LABEL_212;
        }
LABEL_289:
        if (**((int **)v3 + 1) <= 0) {
          int v170 = 872415232;
        }
        else {
          int v170 = 0;
        }
        int v171 = v170 & 0xFFFFFFFD | (v136 == 21) | (2 * (*((_DWORD *)v3 + 71) & 1));
        goto LABEL_325;
      }
      if (BYTE3(v135) == 21 || BYTE3(v135) == 27) {
        goto LABEL_289;
      }
LABEL_212:
      if (icu::RegexCompile::minMatchLength(v3, v131, v134))
      {
        long long v40 = (int **)v3;
        unsigned int v41 = 15;
LABEL_214:
        int v45 = v36;
      }
      else
      {
        icu::RegexCompile::insertOp(v3, v36);
        Stackint Data = icu::RegexCompile::allocateStackData(v3, 1);
        int v176 = icu::RegexCompile::buildOp((int **)v3, 0x23u, StackData);
        icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v176, v36);
        int v45 = v36 + 1;
        long long v40 = (int **)v3;
        unsigned int v41 = 18;
      }
LABEL_329:
      int v115 = icu::RegexCompile::buildOp(v40, v41, v45);
LABEL_330:
      icu::RegexCompile::appendOp(v3, v115);
LABEL_331:
      if (**((int **)v3 + 1) >= 1) {
        return 0;
      }
      else {
        return v4;
      }
    case 52:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 973078529;
      goto LABEL_305;
    case 53:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
LABEL_143:
      *((_DWORD *)v3 + 71) = *((_DWORD *)v3 + 72);
      goto LABEL_331;
    case 54:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 335544320;
      goto LABEL_305;
    case 55:
      signed int v53 = icu::RegexCompile::scanNamedChar(this);
      unsigned int v54 = v53;
      if (**((int **)v3 + 1) <= 0)
      {
        signed int v55 = *((_DWORD *)v3 + 124);
        if (v55 == -1 || v55 > v53) {
          icu::RegexCompile::error(v3, 66320);
        }
      }
      unsigned int v57 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)v3 + 416), *((_DWORD *)v3 + 106) - 1);
      icu::UnicodeSet::add(v57, *((_DWORD *)v3 + 124), v54);
LABEL_88:
      *((_DWORD *)v3 + 124) = v54;
      goto LABEL_331;
    case 56:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v26 = icu::RegexCompile::allocateData((int **)v3, 5);
      int v27 = icu::RegexCompile::buildOp((int **)v3, 0x2Cu, v26);
      icu::RegexCompile::appendOp(v3, v27);
      int v28 = icu::RegexCompile::buildOp((int **)v3, 0x2Fu, v26);
      icu::RegexCompile::appendOp(v3, v28);
      icu::RegexCompile::appendOp(v3, 0);
      icu::RegexCompile::appendOp(v3, 0);
      icu::RegexCompile::appendOp(v3, 0);
      if (**((int **)v3 + 1) <= 0) {
        int v29 = 117440512;
      }
      else {
        int v29 = 0;
      }
      icu::RegexCompile::appendOp(v3, v29);
      if (**((int **)v3 + 1) <= 0) {
        int v30 = 117440512;
      }
      else {
        int v30 = 0;
      }
      icu::RegexCompile::appendOp(v3, v30);
      UChar32 v31 = (icu::RegexCompile *)((char *)v3 + 368);
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), *((unsigned int *)v3 + 71), *((UErrorCode **)v3 + 1));
      int v32 = (UErrorCode *)*((void *)v3 + 1);
      int v33 = (icu::RegexCompile *)((char *)v3 + 368);
      uint64_t v34 = 4294967288;
      goto LABEL_203;
    case 57:
      if (icu::RegexCompile::compileInlineInterval(this)) {
        goto LABEL_331;
      }
      this = v3;
      unsigned int v42 = 25;
      unsigned int v43 = 28;
      goto LABEL_77;
    case 58:
      goto LABEL_21;
    case 59:
      *((_DWORD *)this + 72) = *((_DWORD *)this + 71);
      *((unsigned char *)this + 292) = 1;
      goto LABEL_331;
    case 60:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 369098752;
      goto LABEL_305;
    case 61:
      icu::RegexCompile::handleCloseParen(this);
      if (*((int *)v3 + 94) >= 1) {
        icu::RegexCompile::error(v3, 66310);
      }
      icu::RegexCompile::appendOp(v3, (**((_DWORD **)v3 + 1) < 1) << 25);
LABEL_79:
      unsigned int v4 = 0;
      goto LABEL_331;
    case 62:
      unsigned int v8 = icu::RegexCompile::scanNamedChar(this);
      goto LABEL_48;
    case 63:
      int v45 = icu::RegexCompile::blockTopLoc(this, 0);
      goto LABEL_218;
    case 64:
      int v16 = 196612;
LABEL_145:
      icu::RegexCompile::setPushOp((UErrorCode **)this, v16);
      goto LABEL_331;
    case 65:
      int v15 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      uint64_t v193 = 0;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      long long v183 = 0u;
      long long v184 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v181);
      icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v181, 0x2000, 0x1000u, *((UErrorCode **)v3 + 1));
      icu::UnicodeSet::add((icu::UnicodeSet *)&v181, 9u);
LABEL_114:
      uint64_t v80 = (icu::UnicodeSet *)&v181;
      goto LABEL_115;
    case 66:
      icu::RegexCompile::handleCloseParen(this);
      if (*((int *)v3 + 94) <= 0) {
        goto LABEL_25;
      }
      goto LABEL_331;
    case 67:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v141 = *((_DWORD *)v3 + 71);
      if ((v141 & 0x20) != 0)
      {
        BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
        int v25 = 352321536;
      }
      else
      {
        BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
        if (v141) {
          int v25 = 452984832;
        }
        else {
          int v25 = 201326592;
        }
      }
      goto LABEL_305;
    case 68:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      if (**((int **)v3 + 1) <= 0) {
        int v17 = 117440512;
      }
      else {
        int v17 = 0;
      }
      icu::RegexCompile::appendOp(v3, v17);
      int v18 = icu::RegexCompile::allocateStackData(v3, 3);
      int v19 = icu::RegexCompile::buildOp((int **)v3, 8u, v18);
      icu::RegexCompile::appendOp(v3, v19);
      if (**((int **)v3 + 1) <= 0) {
        int v20 = 117440512;
      }
      else {
        int v20 = 0;
      }
      icu::RegexCompile::appendOp(v3, v20);
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), *((unsigned int *)v3 + 71), *((UErrorCode **)v3 + 1));
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), 4294967294, *((UErrorCode **)v3 + 1));
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), (*(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) - 3), *((UErrorCode **)v3 + 1));
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), (*(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) - 1), *((UErrorCode **)v3 + 1));
      sub_18C7F5B30(*(_DWORD **)(*((void *)v3 + 2) + 136), v18, *((UErrorCode **)v3 + 1));
      if (!*((void *)v3 + 63)) {
        goto LABEL_331;
      }
      if (icu::RegexPattern::initNamedCaptureMap(*((icu::RegexPattern **)v3 + 2)))
      {
        int v21 = uhash_puti(*(void *)(*((void *)v3 + 2) + 192), *((void *)v3 + 63), *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 136) + 8), *((int **)v3 + 1));
        *((void *)v3 + 63) = 0;
        if (v21 >= 1 && **((int **)v3 + 1) <= 0)
        {
LABEL_21:
          int v5 = 66325;
          goto LABEL_194;
        }
        goto LABEL_331;
      }
      if (**((int **)v3 + 1) > 0) {
        goto LABEL_331;
      }
      int v5 = *(_DWORD *)(*((void *)v3 + 2) + 120);
      goto LABEL_194;
    case 70:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      if (**((int **)v3 + 1) <= 0) {
        int v82 = 117440512;
      }
      else {
        int v82 = 0;
      }
      icu::RegexCompile::appendOp(v3, v82);
      int v83 = icu::RegexCompile::allocateData((int **)v3, 1);
      int v84 = icu::RegexCompile::buildOp((int **)v3, 0x20u, v83);
      icu::RegexCompile::appendOp(v3, v84);
      if (**((int **)v3 + 1) <= 0) {
        int v85 = 117440512;
      }
      else {
        int v85 = 0;
      }
      icu::RegexCompile::appendOp(v3, v85);
      UChar32 v31 = (icu::RegexCompile *)((char *)v3 + 368);
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), *((unsigned int *)v3 + 71), *((UErrorCode **)v3 + 1));
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), 4294967293, *((UErrorCode **)v3 + 1));
      unsigned int v86 = (UErrorCode *)*((void *)v3 + 1);
      uint64_t v87 = (*(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) - 3);
      goto LABEL_204;
    case 71:
      int v5 = 66315;
      goto LABEL_194;
    case 72:
      UChar32 v119 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      sub_18C9B5A7C(v119, 0x200u, *((UErrorCode **)v3 + 1));
      goto LABEL_331;
    case 73:
      uint64_t v22 = (icu::UnicodeSet *)icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
      goto LABEL_55;
    case 74:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      uint64_t v22 = icu::RegexCompile::scanProp((int **)v3);
LABEL_55:
      icu::RegexCompile::compileSet(v3, v22);
      goto LABEL_331;
    case 75:
    case 79:
      uint64_t v6 = icu::UMemory::operator new(a3, (icu::UMemory *)0x40, a2);
      if (v6)
      {
        uint64_t *v6 = (uint64_t)&unk_1EDA47700;
        *((_WORD *)v6 + 4) = 2;
        *((void *)v3 + 63) = v6;
        goto LABEL_331;
      }
      *((void *)v3 + 63) = 0;
      this = v3;
      int v5 = 7;
      goto LABEL_195;
    case 76:
      int v163 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 136) + 8);
      for (int i = u_charDigitValue(*((_DWORD *)this + 18)); i < v163; int i = u_charDigitValue(CharLL) + 10 * i)
      {
        UChar32 CharLL = *((_DWORD *)v3 + 17);
        if (CharLL == -1)
        {
          UChar32 CharLL = icu::RegexCompile::nextCharLL(v3);
          *((_DWORD *)v3 + 17) = CharLL;
        }
        if (!icu::UnicodeSet::contains(*(icu::UnicodeSet **)(qword_1EB20BEF0 + 3824), CharLL)) {
          break;
        }
        icu::RegexCompile::nextCharLL(v3);
      }
      icu::RegexCompile::fixLiterals((uint64_t)v3, 0);
      uint64_t v108 = (int **)v3;
      if ((*((unsigned char *)v3 + 284) & 2) != 0) {
        unsigned int v109 = 41;
      }
      else {
        unsigned int v109 = 34;
      }
LABEL_262:
      int v155 = icu::RegexCompile::buildOp(v108, v109, i);
      v154 = v3;
      goto LABEL_263;
    case 77:
      unsigned int v120 = icu::RegexCompile::blockTopLoc(this, 1);
      int v121 = icu::RegexCompile::buildOp((int **)v3, 6u, *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8));
      icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v121, v120);
      goto LABEL_331;
    case 78:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      switch(*((_DWORD *)v3 + 71) & 9)
      {
        case 1:
          BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
          int v25 = 905969664;
          goto LABEL_305;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_335;
        case 8:
          BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
          int v25 = 704643072;
          goto LABEL_305;
        case 9:
          BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
          int v25 = 922746880;
          goto LABEL_305;
        default:
          goto LABEL_179;
      }
    case 80:
      unsigned int v42 = 26;
      unsigned int v43 = 29;
LABEL_77:
      icu::RegexCompile::compileInterval(this, v42, v43);
      goto LABEL_331;
    case 82:
      v140 = icu::RegexCompile::scanPosixProp((int **)this);
      if (v140)
      {
LABEL_241:
        int v159 = v140;
        __int16 v160 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)v3 + 416), *((_DWORD *)v3 + 106) - 1);
        icu::UnicodeSet::addAll(v160, v159);
        v162 = icu::UnicodeSet::~UnicodeSet(v161, v159);
        icu::UMemory::operator delete(v162);
      }
      goto LABEL_331;
    case 83:
      int v65 = 262152;
      goto LABEL_238;
    case 84:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      if ((*((_DWORD *)v3 + 71) & 0x100) != 0) {
        int v25 = 889192448;
      }
      else {
        int v25 = 0x10000000;
      }
      int v24 = **((_DWORD **)v3 + 1);
LABEL_93:
      BOOL v44 = v24 <= 0;
      goto LABEL_305;
    case 85:
      int v65 = 262150;
LABEL_238:
      icu::RegexCompile::setPushOp((UErrorCode **)this, v65);
      int v88 = (icu::RegexCompile *)((char *)v3 + 456);
      icu::UVector::addElement((icu::RegexCompile *)((char *)v3 + 456), 1, *((UErrorCode **)v3 + 1));
      if ((*((unsigned char *)v3 + 284) & 2) != 0) {
        goto LABEL_239;
      }
      goto LABEL_331;
    case 86:
      uint64_t v122 = 10 * *((int *)this + 102) + u_charDigitValue(*((_DWORD *)this + 18));
      if (v122 >= 0x80000000)
      {
LABEL_193:
        int v5 = 66311;
LABEL_194:
        this = v3;
LABEL_195:
        icu::RegexCompile::error(this, v5);
      }
      else
      {
        *((_DWORD *)v3 + 102) = v122;
      }
      goto LABEL_331;
    case 87:
      int v15 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      uint64_t v193 = 0;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      long long v183 = 0u;
      long long v184 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v181);
      icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v181, 0x2000, 0x1000u, *((UErrorCode **)v3 + 1));
      icu::UnicodeSet::add((icu::UnicodeSet *)&v181, 9u);
      goto LABEL_116;
    case 88:
      unsigned int v144 = icu::RegexCompile::blockTopLoc(this, 0);
      uint64_t v145 = *(void *)(*((void *)v3 + 2) + 32);
      signed int v146 = *(_DWORD *)(v145 + 8);
      if (v146 <= (int)v144 || (v144 & 0x80000000) != 0 || v144 != v146 - 1) {
        goto LABEL_234;
      }
      uint64_t v147 = *(void *)(*(void *)(v145 + 24) + 8 * v144);
      int v148 = BYTE3(v147);
      if (BYTE3(v147) > 0x14u)
      {
        if (BYTE3(v147) != 21 && BYTE3(v147) != 27)
        {
LABEL_234:
          unsigned int v149 = icu::RegexCompile::blockTopLoc(v3, 1);
          int v150 = icu::RegexCompile::buildOp((int **)v3, 0xFu, v149 + 1);
          if (!icu::RegexCompile::minMatchLength(v3, v149, *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) - 1))
          {
            icu::RegexCompile::insertOp(v3, v149);
            int v151 = icu::RegexCompile::allocateStackData(v3, 1);
            int v152 = icu::RegexCompile::buildOp((int **)v3, 0x23u, v151);
            icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v152, v149 + 1);
            int v150 = icu::RegexCompile::buildOp((int **)v3, 0x12u, v149 + 2);
          }
          int v153 = icu::RegexCompile::buildOp((int **)v3, 6u, *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) + 1);
          icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v153, v149);
          v154 = v3;
          int v155 = v150;
LABEL_263:
          icu::RegexCompile::appendOp(v154, v155);
          unsigned int v4 = 1;
          goto LABEL_331;
        }
      }
      else
      {
        if (BYTE3(v147) == 11)
        {
          uint64_t v174 = (int)icu::RegexCompile::buildOp((int **)v3, 0x32u, v147 & 0xFFFFFF);
          uint64_t v145 = *(void *)(*((void *)v3 + 2) + 32);
          goto LABEL_327;
        }
        if (BYTE3(v147) != 12) {
          goto LABEL_234;
        }
      }
      if (**((int **)v3 + 1) <= 0) {
        int v173 = 872415232;
      }
      else {
        int v173 = 0;
      }
      uint64_t v174 = v173 & 0xFFFFFFFD | (v148 == 21) | (2 * (*((_DWORD *)v3 + 71) & 1));
LABEL_327:
      icu::UVector64::setElementAt(v145, v174, v144);
LABEL_328:
      int v45 = icu::RegexCompile::allocateStackData(v3, 1);
      long long v40 = (int **)v3;
      unsigned int v41 = 51;
      goto LABEL_329;
    case 89:
      int v142 = *((_DWORD *)this + 18);
      if (v142 > 108)
      {
        switch(v142)
        {
          case 'm':
            int v143 = 8;
            goto LABEL_320;
          case 's':
            int v143 = 32;
            goto LABEL_320;
          case 'u':
            int v143 = 0;
            goto LABEL_320;
          case 'w':
            int v143 = 256;
            goto LABEL_320;
          case 'x':
            int v143 = 4;
            goto LABEL_320;
          default:
            goto LABEL_334;
        }
      }
      switch(v142)
      {
        case '-':
          int v143 = 0;
          *((unsigned char *)this + 292) = 0;
          break;
        case 'd':
          int v143 = 1;
          break;
        case 'i':
          int v143 = 2;
          break;
        default:
LABEL_334:
          abort();
      }
LABEL_320:
      if (*((unsigned char *)this + 292)) {
        int v179 = *((_DWORD *)this + 72) | v143;
      }
      else {
        int v179 = *((_DWORD *)this + 72) & ~v143;
      }
      *((_DWORD *)this + 72) = v179;
      goto LABEL_331;
    case 90:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
LABEL_254:
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 385875968;
      goto LABEL_305;
    case 91:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v48 = icu::RegexCompile::allocateData((int **)v3, 5);
      int v49 = icu::RegexCompile::buildOp((int **)v3, 0x2Cu, v48);
      icu::RegexCompile::appendOp(v3, v49);
      int v50 = icu::RegexCompile::buildOp((int **)v3, 0x2Du, v48);
      icu::RegexCompile::appendOp(v3, v50);
      icu::RegexCompile::appendOp(v3, 0);
      icu::RegexCompile::appendOp(v3, 0);
      if (**((int **)v3 + 1) <= 0) {
        int v51 = 117440512;
      }
      else {
        int v51 = 0;
      }
      icu::RegexCompile::appendOp(v3, v51);
      if (**((int **)v3 + 1) <= 0) {
        int v52 = 117440512;
      }
      else {
        int v52 = 0;
      }
      icu::RegexCompile::appendOp(v3, v52);
      UChar32 v31 = (icu::RegexCompile *)((char *)v3 + 368);
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), *((unsigned int *)v3 + 71), *((UErrorCode **)v3 + 1));
      int v32 = (UErrorCode *)*((void *)v3 + 1);
      int v33 = (icu::RegexCompile *)((char *)v3 + 368);
      uint64_t v34 = 4294967289;
      goto LABEL_203;
    case 92:
      unsigned int v11 = icu::RegexCompile::blockTopLoc(this, 1);
      icu::RegexCompile::insertOp(v3, v11);
      int v12 = icu::RegexCompile::allocateData((int **)v3, 1);
      int v13 = icu::RegexCompile::buildOp((int **)v3, 0x20u, v12);
      icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v13, v11);
      int v14 = icu::RegexCompile::buildOp((int **)v3, 6u, *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) + 1);
      icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v14, v11 + 1);
LABEL_99:
      long long v40 = (int **)v3;
      unsigned int v41 = 33;
      int v45 = v12;
      goto LABEL_329;
    case 93:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      UChar32 v31 = (icu::RegexCompile *)((char *)v3 + 368);
      int v58 = *((_DWORD *)v3 + 94);
      BOOL v59 = __OFSUB__(v58, 1);
      int v60 = v58 - 1;
      if (v60 < 0 != v59)
      {
        unsigned int v61 = 0;
      }
      else
      {
        *((_DWORD *)v3 + 94) = v60;
        unsigned int v61 = *(_DWORD *)(*((void *)v3 + 49) + 4 * v60);
      }
      int v165 = icu::RegexCompile::buildOp((int **)v3, 6u, *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) + 1);
      icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v165, v61);
      if (**((int **)v3 + 1) <= 0) {
        int v166 = 218103808;
      }
      else {
        int v166 = 0;
      }
      icu::RegexCompile::appendOp(v3, v166);
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), (*(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) - 1), *((UErrorCode **)v3 + 1));
      if (**((int **)v3 + 1) <= 0) {
        int v167 = 117440512;
      }
      else {
        int v167 = 0;
      }
      icu::RegexCompile::appendOp(v3, v167);
      goto LABEL_205;
    case 94:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
      int v25 = 167772161;
LABEL_305:
      if (v44) {
        int v115 = v25;
      }
      else {
        int v115 = 0;
      }
      goto LABEL_330;
    case 95:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v9 = **((_DWORD **)v3 + 1);
      int v10 = 167772161;
LABEL_168:
      int v114 = v10 + 3;
      if (v9 <= 0) {
        int v115 = v114;
      }
      else {
        int v115 = 0;
      }
      goto LABEL_330;
    case 96:
LABEL_47:
      unsigned int v8 = *((_DWORD *)v3 + 18);
LABEL_48:
      uint64_t v7 = (uint64_t)v3 + 296;
LABEL_49:
      icu::UnicodeString::append(v7, v8);
      goto LABEL_331;
    case 97:
      *((unsigned char *)this + 42) = 0;
      goto LABEL_331;
    case 98:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      switch(*((_DWORD *)v3 + 71) & 9)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
LABEL_335:
          __break(1u);
          JUMPOUT(0x18C9B30B4);
        case 8:
          BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
          int v25 = 721420288;
          goto LABEL_305;
        case 9:
          BOOL v44 = **((_DWORD **)v3 + 1) <= 0;
          int v25 = 503316480;
          goto LABEL_305;
        default:
          goto LABEL_254;
      }
    case 99:
      *((_DWORD *)this + 103) = *((_DWORD *)this + 102);
      goto LABEL_331;
    case 100:
      unsigned int v117 = icu::RegexCompile::blockTopLoc(this, 1);
      int v137 = *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8);
      int v138 = icu::RegexCompile::buildOp((int **)v3, 0xDu, v137 + 1);
      icu::UVector64::setElementAt(*(void *)(*((void *)v3 + 2) + 32), v138, v117);
      int v139 = icu::RegexCompile::buildOp((int **)v3, 0xDu, v137 + 2);
      icu::RegexCompile::appendOp(v3, v139);
LABEL_217:
      int v45 = v117 + 1;
LABEL_218:
      long long v40 = (int **)v3;
      unsigned int v41 = 6;
      goto LABEL_329;
    case 101:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v124 = icu::RegexCompile::allocateData((int **)v3, 4);
      int v125 = icu::RegexCompile::buildOp((int **)v3, 0x25u, v124);
      icu::RegexCompile::appendOp(v3, v125);
      int v126 = icu::RegexCompile::buildOp((int **)v3, 6u, *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) + 2);
      icu::RegexCompile::appendOp(v3, v126);
      int v127 = icu::RegexCompile::buildOp((int **)v3, 0xDu, *(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) + 3);
      icu::RegexCompile::appendOp(v3, v127);
      int v128 = icu::RegexCompile::buildOp((int **)v3, 0x26u, v124);
      icu::RegexCompile::appendOp(v3, v128);
      icu::RegexCompile::appendOp(v3, (**((_DWORD **)v3 + 1) < 1) << 24);
      if (**((int **)v3 + 1) <= 0) {
        int v129 = 117440512;
      }
      else {
        int v129 = 0;
      }
      icu::RegexCompile::appendOp(v3, v129);
      if (**((int **)v3 + 1) <= 0) {
        int v130 = 117440512;
      }
      else {
        int v130 = 0;
      }
      icu::RegexCompile::appendOp(v3, v130);
      UChar32 v31 = (icu::RegexCompile *)((char *)v3 + 368);
      sub_18C9B4E14((icu::RegexCompile *)((char *)v3 + 368), *((unsigned int *)v3 + 71), *((UErrorCode **)v3 + 1));
      int v32 = (UErrorCode *)*((void *)v3 + 1);
      int v33 = (icu::RegexCompile *)((char *)v3 + 368);
      uint64_t v34 = 4294967292;
LABEL_203:
      sub_18C9B4E14(v33, v34, v32);
      unsigned int v86 = (UErrorCode *)*((void *)v3 + 1);
      uint64_t v87 = (*(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) - 2);
LABEL_204:
      sub_18C9B4E14(v31, v87, v86);
LABEL_205:
      sub_18C9B4E14(v31, (*(_DWORD *)(*(void *)(*((void *)v3 + 2) + 32) + 8) - 1), *((UErrorCode **)v3 + 1));
      goto LABEL_331;
    case 102:
      int v15 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      uint64_t v193 = 0;
      long long v191 = 0u;
      long long v192 = 0u;
      long long v189 = 0u;
      long long v190 = 0u;
      long long v187 = 0u;
      long long v188 = 0u;
      long long v185 = 0u;
      long long v186 = 0u;
      long long v183 = 0u;
      long long v184 = 0u;
      long long v181 = 0u;
      long long v182 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v181);
      uint64_t v23 = (const icu::UnicodeSet *)(qword_1EB20BEF0 + 208);
LABEL_110:
      uint64_t v80 = icu::UnicodeSet::addAll((icu::UVector **)&v181, v23);
LABEL_115:
      icu::UnicodeSet::complement(v80);
LABEL_116:
      icu::UnicodeSet::addAll(v15, (const icu::UnicodeSet *)&v181);
      icu::UnicodeSet::~UnicodeSet(v81, (icu::UnicodeSet *)&v181);
      goto LABEL_331;
    case 103:
LABEL_25:
      int v5 = 66310;
      goto LABEL_194;
    case 104:
      unint64_t v89 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      uint64_t v90 = (const icu::UnicodeSet *)(qword_1EB20BEF0 + 808);
LABEL_187:
      icu::UnicodeSet::addAll(v89, v90);
      goto LABEL_331;
    default:
      goto LABEL_334;
  }
}

void *icu::RegexCompile::error(void *this, int a2)
{
  uint64_t v2 = this;
  uint64_t v3 = (int *)this[1];
  if (a2 == 7 || *v3 <= 0)
  {
    int *v3 = a2;
    uint64_t v4 = this[6];
    if (v4 < 0x80000000)
    {
      uint64_t v7 = this[7];
      uint64_t v5 = this[3];
      *(_DWORD *)uint64_t v5 = v4;
      if (v7 > 0x7FFFFFFF) {
        int v6 = -1;
      }
      else {
        int v6 = v7;
      }
    }
    else
    {
      uint64_t v5 = this[3];
      *(_DWORD *)uint64_t v5 = 0;
      int v6 = -1;
    }
    *(_DWORD *)(v5 + 4) = v6;
    UErrorCode status = U_ZERO_ERROR;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    uint64_t v8 = this[3];
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    utext_extract(*(UText **)(this[2] + 8), this[4] - 15, this[4], (UChar *)(this[3] + 8), 16, &status);
    return (void *)utext_extract(*(UText **)(v2[2] + 8), v2[4], v2[4] + 15, (UChar *)(v2[3] + 40), 16, &status);
  }
  return this;
}

uint64_t icu::RegexCompile::allocateStackData(icu::RegexCompile *this, int a2)
{
  if (**((int **)this + 1) <= 0)
  {
    int v4 = 66304;
    if ((a2 - 257) < 0xFFFFFF00
      || (v5 = *((void *)this + 2), uint64_t v2 = *(unsigned int *)(v5 + 128), (v2 & 0x80000000) != 0))
    {
      uint64_t v2 = 0;
    }
    else
    {
      unsigned int v6 = v2 + a2;
      *(_DWORD *)(v5 + 128) = v6;
      if (v6 < 0xFFFFF0) {
        return v2;
      }
      int v4 = 66324;
    }
    icu::RegexCompile::error(this, v4);
    return v2;
  }
  return 0;
}

void icu::RegexCompile::stripNOPs(icu::RegexCompile *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (UErrorCode *)*((void *)this + 1);
  if (*(int *)v1 > 0) {
    return;
  }
  uint64_t v3 = *(unsigned int *)(*(void *)(*((void *)this + 2) + 32) + 8);
  long long v26 = 0u;
  long long v27 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v26, v3, v1);
  if ((int)v3 < 1)
  {
    int v11 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v32 = 0;
    long long v31 = 0u;
    int v28 = &unk_1EDA47700;
    LOWORD(v29) = 2;
    goto LABEL_42;
  }
  uint64_t v4 = 0;
  int v5 = 0;
  do
  {
    int v6 = DWORD2(v26);
    if (SDWORD2(v26) < -1 || SHIDWORD(v26) <= SDWORD2(v26))
    {
      if (!icu::UVector32::expandCapacity((icu::UVector32 *)&v26, DWORD2(v26) + 1, *((UErrorCode **)this + 1)))goto LABEL_12; {
      int v6 = DWORD2(v26);
      }
    }
    *(_DWORD *)(*((void *)&v27 + 1) + 4 * v6) = v5;
    ++DWORD2(v26);
LABEL_12:
    uint64_t v8 = *(void *)(*((void *)this + 2) + 32);
    if (v4 >= *(int *)(v8 + 8)) {
      LODWORD(v9) = 0;
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v8 + 24) + 8 * v4);
    }
    if ((v9 & 0xFF000000) == 0x7000000) {
      ++v5;
    }
    ++v4;
  }
  while (v3 != v4);
  uint64_t v10 = 0;
  int v11 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v32 = 0;
  long long v31 = 0u;
  int v28 = &unk_1EDA47700;
  LOWORD(v29) = 2;
  do
  {
    uint64_t v12 = *((void *)this + 2);
    uint64_t v13 = *(void *)(v12 + 32);
    if (v10 >= *(int *)(v13 + 8))
    {
      LODWORD(v14) = 0;
LABEL_26:
      uint64_t v18 = (int)v14;
LABEL_27:
      icu::UVector64::setElementAt(v13, v18, v11++);
    }
    else
    {
      uint64_t v14 = *(void *)(*(void *)(v13 + 24) + 8 * v10);
      unsigned int v15 = BYTE3(v14);
      switch(BYTE3(v14))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xE:
        case 0x10:
        case 0x11:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1E:
        case 0x20:
        case 0x21:
        case 0x23:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
        case 0x2F:
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
          goto LABEL_26;
        case 6:
        case 0xD:
        case 0xF:
        case 0x12:
        case 0x1C:
        case 0x1D:
        case 0x1F:
        case 0x24:
          int v16 = 0;
          int v17 = v14 & 0xFFFFFF;
          if (SDWORD2(v26) >= 1 && SDWORD2(v26) > v17) {
            int v16 = *(_DWORD *)(*((void *)&v27 + 1) + 4 * (v14 & 0xFFFFFF));
          }
          uint64_t v18 = (int)icu::RegexCompile::buildOp((int **)this, BYTE3(v14), v17 - v16);
          uint64_t v13 = *(void *)(*((void *)this + 2) + 32);
          goto LABEL_27;
        case 7:
          break;
        case 0x22:
        case 0x29:
          int v19 = v14 & 0xFFFFFF;
          uint64_t v20 = *(void *)(v12 + 136);
          int v21 = *(_DWORD *)(v20 + 8);
          if (v19 <= v21)
          {
            if (v19) {
              BOOL v22 = v21 < 1;
            }
            else {
              BOOL v22 = 1;
            }
            if (v22) {
              int v23 = 0;
            }
            else {
              int v23 = *(_DWORD *)(*(void *)(v20 + 24) + 4 * (v19 - 1));
            }
            int v24 = icu::RegexCompile::buildOp((int **)this, v15, v23);
            icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32), v24, v11++);
            *(unsigned char *)(*((void *)this + 2) + 184) = 1;
          }
          else
          {
            icu::RegexCompile::error(this, 66314);
          }
          break;
        default:
          if (BYTE3(v14) != 255) {
            abort();
          }
          goto LABEL_26;
      }
    }
    ++v10;
  }
  while (v3 != v10);
LABEL_42:
  icu::UVector64::setSize(*(icu::UVector64 **)(*((void *)this + 2) + 32), v11);
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v28);
  icu::UVector32::~UVector32((void **)&v26);
}

uint64_t icu::RegexCompile::minMatchLength(icu::RegexCompile *this, signed int a2, int a3)
{
  uint64_t v4 = (UErrorCode *)*((void *)this + 1);
  if (*(int *)v4 > 0) {
    return 0;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v31, a3 + 2, v4);
  icu::UVector32::setSize((icu::UVector32 *)&v31, a3 + 2);
  int v8 = a3 + 1;
  if (a3 + 1 >= a2)
  {
    signed int v9 = a2;
    do
    {
      icu::UVector32::setElementAt((uint64_t)&v31, 0x7FFFFFFF, v9);
      BOOL v16 = v9++ <= a3;
    }
    while (v16);
  }
  if (a2 > a3)
  {
    int v10 = 0;
    goto LABEL_8;
  }
  int v10 = 0;
  do
  {
    if (a2 < 0)
    {
      v10 &= v10 >> 31;
      goto LABEL_35;
    }
    uint64_t v13 = *(void *)(*((void *)this + 2) + 32);
    signed int v14 = *(_DWORD *)(v13 + 8);
    if (v14 <= a2) {
      LODWORD(v15) = 0;
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(v13 + 24) + 8 * a2);
    }
    BOOL v16 = SDWORD2(v31) < 1 || SDWORD2(v31) <= a2;
    if (v16)
    {
      v10 &= v10 >> 31;
    }
    else if (*(_DWORD *)(*((void *)&v32 + 1) + 4 * a2) < v10)
    {
      int v10 = *(_DWORD *)(*((void *)&v32 + 1) + 4 * a2);
    }
    switch(BYTE3(v15))
    {
      case 0u:
      case 2u:
      case 5u:
      case 7u:
      case 8u:
      case 9u:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x14u:
      case 0x17u:
      case 0x18u:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x26u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
        goto LABEL_35;
      case 1u:
        goto LABEL_71;
      case 3u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x1Bu:
      case 0x27u:
      case 0x31u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
        goto LABEL_32;
      case 4u:
        if (v14 <= ++a2) {
          LODWORD(v24) = 0;
        }
        else {
          uint64_t v24 = *(void *)(*(void *)(v13 + 24) + 8 * a2);
        }
        unsigned int v30 = v24 & 0xFFFFFF;
        if ((v10 ^ 0x7FFFFFFFu) <= v30) {
          int v10 = 0x7FFFFFFF;
        }
        else {
          v10 += v30;
        }
        goto LABEL_35;
      case 6u:
        signed int v25 = v15 & 0xFFFFFF;
        if ((v15 & 0xFFFFFF) > a2)
        {
          int v26 = 0;
          if (SDWORD2(v31) >= 1 && SDWORD2(v31) > v25) {
            int v26 = *(_DWORD *)(*((void *)&v32 + 1) + 4 * (v15 & 0xFFFFFF));
          }
          if (v10 < v26) {
            goto LABEL_82;
          }
        }
        goto LABEL_35;
      case 0xDu:
        goto LABEL_70;
      case 0x19u:
      case 0x1Au:
        if (v14 <= a2 + 1) {
          LODWORD(v17) = 0;
        }
        else {
          uint64_t v17 = *(void *)(*(void *)(v13 + 24) + 8 * (a2 + 1));
        }
        if (v14 <= a2 + 2) {
          int v27 = 0;
        }
        else {
          int v27 = *(_DWORD *)(*(void *)(v13 + 24) + 8 * (a2 + 2));
        }
        signed int v29 = v17 & 0xFFFFFF;
        if (v27) {
          a2 += 3;
        }
        else {
          a2 = v29;
        }
        goto LABEL_35;
      case 0x24u:
        ++a2;
LABEL_70:
        signed int v25 = v15 & 0xFFFFFF;
        if ((v15 & 0xFFFFFF) >= a2)
        {
          int v28 = 0;
          if (SDWORD2(v31) >= 1 && SDWORD2(v31) > v25) {
            int v28 = *(_DWORD *)(*((void *)&v32 + 1) + 4 * (v15 & 0xFFFFFF));
          }
          if (v28 > v10) {
LABEL_82:
          }
            icu::UVector32::setElementAt((uint64_t)&v31, v10, v25);
        }
        else
        {
LABEL_71:
          int v10 = 0;
          if (SDWORD2(v31) >= 1 && SDWORD2(v31) > a2 + 1) {
            int v10 = *(_DWORD *)(*((void *)&v32 + 1) + 4 * (a2 + 1));
          }
        }
        goto LABEL_35;
      case 0x25u:
      case 0x2Cu:
        if (BYTE3(v15) == 37) {
          int v18 = 2;
        }
        else {
          int v18 = 1;
        }
        break;
      case 0x28u:
        ++a2;
LABEL_32:
        if (v10 >> 1 == 0x3FFFFFFF) {
          int v10 = 0x7FFFFFFF;
        }
        else {
          ++v10;
        }
        goto LABEL_35;
      default:
        abort();
    }
    while (1)
    {
      signed int v19 = a2 + 1;
      if (a2 <= -2 || *(_DWORD *)(v13 + 8) <= v19) {
        goto LABEL_60;
      }
      uint64_t v20 = *(void *)(*(void *)(v13 + 24) + 8 * v19);
      int v21 = v18 + 2;
      if (BYTE3(v20) != 37) {
        int v21 = v18;
      }
      int v18 = BYTE3(v20) == 44 ? v21 + 1 : v21;
      if (BYTE3(v20) != 6) {
        break;
      }
      signed int v22 = v20 & 0xFFFFFF;
      if ((v20 & 0xFFFFFF) > v19)
      {
        int v23 = 0;
        if (SDWORD2(v31) >= 1 && SDWORD2(v31) > v22) {
          int v23 = *(_DWORD *)(*((void *)&v32 + 1) + 4 * (v20 & 0xFFFFFF));
        }
        if (v10 < v23)
        {
          icu::UVector32::setElementAt((uint64_t)&v31, v10, v22);
          uint64_t v13 = *(void *)(*((void *)this + 2) + 32);
        }
      }
LABEL_60:
      ++a2;
    }
    if (BYTE3(v20) != 48 && BYTE3(v20) != 38) {
      goto LABEL_60;
    }
    if (--v18) {
      goto LABEL_60;
    }
    ++a2;
LABEL_35:
    BOOL v16 = a2++ < a3;
  }
  while (v16);
LABEL_8:
  if (a3 < -1 || SDWORD2(v31) < 1 || SDWORD2(v31) <= v8)
  {
    uint64_t v5 = v10 & (v10 >> 31);
  }
  else
  {
    int v11 = *(_DWORD *)(*((void *)&v32 + 1) + 4 * v8);
    if (v11 >= v10) {
      uint64_t v5 = v10;
    }
    else {
      uint64_t v5 = v11;
    }
  }
  icu::UVector32::~UVector32((void **)&v31);
  return v5;
}

void icu::RegexCompile::matchStartType(icu::RegexCompile *this)
{
  uint64_t v1 = (UErrorCode *)*((void *)this + 1);
  if (*(int *)v1 <= 0)
  {
    int v3 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 32) + 8);
    long long v66 = 0u;
    long long v67 = 0u;
    uint64_t v4 = icu::UVector32::UVector32((icu::UVector32 *)&v66, v3 + 1, v1);
    icu::UVector32::setSize(v4, v3 + 1);
    if (v3 < 4)
    {
      int v7 = 0;
    }
    else
    {
      for (unsigned int i = 3; i != v3; ++i)
        icu::UVector32::setElementAt((uint64_t)&v66, 0x7FFFFFFF, i);
      int v6 = 0;
      int v7 = 0;
      int v8 = 1;
      for (unsigned int j = 3; (int)j < v3; ++j)
      {
        if ((j & 0x80000000) != 0)
        {
          v6 &= v6 >> 31;
        }
        else
        {
          uint64_t v10 = *((void *)this + 2);
          uint64_t v11 = *(void *)(v10 + 32);
          signed int v12 = *(_DWORD *)(v11 + 8);
          if (v12 <= (int)j) {
            LODWORD(v13) = 0;
          }
          else {
            uint64_t v13 = *(void *)(*(void *)(v11 + 24) + 8 * j);
          }
          if (SDWORD2(v66) < 1 || SDWORD2(v66) <= (int)j)
          {
            v6 &= v6 >> 31;
          }
          else if (*(_DWORD *)(*((void *)&v67 + 1) + 4 * j) < v6)
          {
            int v6 = *(_DWORD *)(*((void *)&v67 + 1) + 4 * j);
          }
          switch(BYTE3(v13))
          {
            case 0u:
            case 2u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
            case 0xEu:
            case 0x10u:
            case 0x11u:
            case 0x14u:
            case 0x18u:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x29u:
            case 0x2Au:
            case 0x35u:
            case 0x36u:
            case 0x37u:
              continue;
            case 1u:
              goto LABEL_74;
            case 3u:
              if (v6) {
                goto LABEL_125;
              }
              int v23 = *(icu::UnicodeSet **)(v10 + 160);
              unsigned int v24 = v13 & 0xFFFFFF;
              goto LABEL_123;
            case 4u:
              if (v12 <= (int)++j) {
                signed int v25 = 0;
              }
              else {
                signed int v25 = *(uint64_t **)(*(void *)(v11 + 24) + 8 * j);
              }
              unsigned int v37 = v25 & 0xFFFFFF;
              if (!v6)
              {
                unsigned int v38 = icu::UnicodeString::char32At(v25, (icu::UnicodeString *)(v10 + 40), v13 & 0xFFFFFF);
                icu::UnicodeSet::add(*(icu::UnicodeSet **)(*((void *)this + 2) + 160), v38);
                ++v7;
                uint64_t v39 = *((void *)this + 2);
                *(_DWORD *)(v39 + 148) = v13 & 0xFFFFFF;
                *(_DWORD *)(v39 + 152) = v37;
              }
              int v8 = 0;
              if ((v6 ^ 0x7FFFFFFFu) <= v37) {
                int v6 = 0x7FFFFFFF;
              }
              else {
                v6 += v37;
              }
              continue;
            case 6u:
              signed int v26 = v13 & 0xFFFFFF;
              if ((v13 & 0xFFFFFF) <= j) {
                goto LABEL_20;
              }
              int v27 = 0;
              if (SDWORD2(v66) >= 1 && SDWORD2(v66) > v26) {
                int v27 = *(_DWORD *)(*((void *)&v67 + 1) + 4 * (v13 & 0xFFFFFF));
              }
              if (v6 >= v27) {
                goto LABEL_20;
              }
              goto LABEL_108;
            case 0xAu:
              if (v6) {
                goto LABEL_125;
              }
              int v28 = (const icu::UnicodeSet *)(qword_1EB20BEF0 + 200 * (v13 & 0xFFFFFF) + 8);
              signed int v29 = *(icu::UVector ***)(v10 + 160);
              goto LABEL_66;
            case 0xBu:
              if (v6) {
                goto LABEL_125;
              }
              int v28 = (const icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(v10 + 104), v13 & 0xFFFFFF);
              signed int v29 = *(icu::UVector ***)(*((void *)this + 2) + 160);
LABEL_66:
              icu::UnicodeSet::addAll(v29, v28);
              goto LABEL_124;
            case 0xCu:
            case 0x13u:
            case 0x15u:
            case 0x1Bu:
              if (v6) {
                goto LABEL_125;
              }
              icu::UnicodeSet::clear(*(icu::UnicodeSet **)(v10 + 160));
              icu::UnicodeSet::complement(*(icu::UnicodeSet **)(*((void *)this + 2) + 160));
              goto LABEL_124;
            case 0xDu:
              goto LABEL_73;
            case 0xFu:
            case 0x12u:
            case 0x1Cu:
            case 0x1Du:
            case 0x33u:
              goto LABEL_20;
            case 0x16u:
              if (v6) {
                goto LABEL_125;
              }
              uint64_t v65 = 0;
              long long v63 = 0u;
              long long v64 = 0u;
              long long v61 = 0u;
              long long v62 = 0u;
              long long v59 = 0u;
              long long v60 = 0u;
              long long v57 = 0u;
              long long v58 = 0u;
              long long v55 = 0u;
              long long v56 = 0u;
              long long v53 = 0u;
              long long v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v53, 0x2000, 0x200u, *((UErrorCode **)this + 1));
              goto LABEL_91;
            case 0x17u:
              if (!v8) {
                continue;
              }
              int v16 = 3;
              goto LABEL_71;
            case 0x19u:
            case 0x1Au:
              if (v12 <= (int)(j + 1)) {
                LODWORD(v15) = 0;
              }
              else {
                uint64_t v15 = *(void *)(*(void *)(v11 + 24) + 8 * (j + 1)) & 0xFFFFFFLL;
              }
              if (v12 <= (int)(j + 2) || !*(void *)(*(void *)(v11 + 24) + 8 * (j + 2)))
              {
                int v35 = 0;
                if (SDWORD2(v66) >= 1 && SDWORD2(v66) > (int)v15) {
                  int v35 = *(_DWORD *)(*((void *)&v67 + 1) + 4 * v15);
                }
                if (v35 > v6) {
                  icu::UVector32::setElementAt((uint64_t)&v66, v6, v15);
                }
              }
              int v8 = 0;
              j += 3;
              continue;
            case 0x1Eu:
            case 0x2Bu:
              if (!v8) {
                continue;
              }
              int v16 = 4;
LABEL_71:
              *(_DWORD *)(v10 + 144) = v16;
              int v8 = 1;
              continue;
            case 0x24u:
              ++j;
LABEL_73:
              signed int v26 = v13 & 0xFFFFFF;
              if ((v13 & 0xFFFFFF) >= j)
              {
                int v36 = 0;
                if (SDWORD2(v66) >= 1 && SDWORD2(v66) > v26) {
                  int v36 = *(_DWORD *)(*((void *)&v67 + 1) + 4 * (v13 & 0xFFFFFF));
                }
                if (v36 > v6) {
LABEL_108:
                }
                  icu::UVector32::setElementAt((uint64_t)&v66, v6, v26);
LABEL_20:
                int v8 = 0;
              }
              else
              {
LABEL_74:
                int v8 = 0;
                if (SDWORD2(v66) < 1 || SDWORD2(v66) <= (int)(j + 1))
                {
                  int v6 = 0;
                }
                else
                {
                  int v8 = 0;
                  int v6 = *(_DWORD *)(*((void *)&v67 + 1) + 4 * (j + 1));
                }
              }
              continue;
            case 0x25u:
            case 0x2Cu:
              if (BYTE3(v13) == 37) {
                int v17 = 2;
              }
              else {
                int v17 = 1;
              }
              do
              {
                while (1)
                {
                  for (int k = j; k <= -2 || *(_DWORD *)(v11 + 8) <= k + 1; ++k)
                    ;
                  unsigned int j = k + 1;
                  uint64_t v19 = *(void *)(*(void *)(v11 + 24) + 8 * (k + 1));
                  int v20 = v17 + 2;
                  if (BYTE3(v19) != 37) {
                    int v20 = v17;
                  }
                  int v17 = BYTE3(v19) == 44 ? v20 + 1 : v20;
                  if (BYTE3(v19) != 6) {
                    break;
                  }
                  signed int v21 = v19 & 0xFFFFFF;
                  if ((v19 & 0xFFFFFF) > j)
                  {
                    int v22 = 0;
                    if (SDWORD2(v66) >= 1 && SDWORD2(v66) > v21) {
                      int v22 = *(_DWORD *)(*((void *)&v67 + 1) + 4 * (v19 & 0xFFFFFF));
                    }
                    if (v6 < v22)
                    {
                      icu::UVector32::setElementAt((uint64_t)&v66, v6, v21);
                      uint64_t v11 = *(void *)(*((void *)this + 2) + 32);
                      unsigned int j = k + 1;
                    }
                  }
                }
              }
              while (BYTE3(v19) != 48 && BYTE3(v19) != 38 || --v17);
              unsigned int j = k + 1;
              continue;
            case 0x27u:
              if (!v6)
              {
                if (u_hasBinaryProperty(v13 & 0xFFFFFF, UCHAR_CASE_SENSITIVE))
                {
                  uint64_t v65 = 0;
                  long long v63 = 0u;
                  long long v64 = 0u;
                  long long v61 = 0u;
                  long long v62 = 0u;
                  long long v59 = 0u;
                  long long v60 = 0u;
                  long long v57 = 0u;
                  long long v58 = 0u;
                  long long v55 = 0u;
                  long long v56 = 0u;
                  long long v53 = 0u;
                  long long v54 = 0u;
                  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53, v13 & 0xFFFFFF, v13 & 0xFFFFFF);
                  icu::UnicodeSet::closeOver((icu::UVector **)&v53, 2);
                  icu::UnicodeSet::addAll(*(icu::UVector ***)(*((void *)this + 2) + 160), (const icu::UnicodeSet *)&v53);
                  icu::UnicodeSet::~UnicodeSet(v30, (icu::UnicodeSet *)&v53);
                }
                else
                {
                  int v23 = *(icu::UnicodeSet **)(*((void *)this + 2) + 160);
                  unsigned int v24 = v13 & 0xFFFFFF;
LABEL_123:
                  icu::UnicodeSet::add(v23, v24);
                }
LABEL_124:
                v7 += 2;
              }
              goto LABEL_125;
            case 0x28u:
              if (v12 <= (int)++j)
              {
                LODWORD(v31) = 0;
              }
              else
              {
                uint64_t v11 = *(void *)(v11 + 24);
                uint64_t v31 = *(void *)(v11 + 8 * j);
              }
              if (!v6)
              {
                long long v40 = (icu::RegexCompile *)icu::UnicodeString::char32At((uint64_t *)v11, (icu::UnicodeString *)(v10 + 40), v13 & 0xFFFFFF);
                uint64_t v65 = 0;
                long long v63 = 0u;
                long long v64 = 0u;
                long long v61 = 0u;
                long long v62 = 0u;
                long long v59 = 0u;
                long long v60 = 0u;
                long long v57 = 0u;
                long long v58 = 0u;
                long long v55 = 0u;
                long long v56 = 0u;
                long long v53 = 0u;
                long long v54 = 0u;
                icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
                icu::RegexCompile::findCaseInsensitiveStarters(v40, (icu::UnicodeSet *)&v53, v41);
                icu::UnicodeSet::addAll(*(icu::UVector ***)(*((void *)this + 2) + 160), (const icu::UnicodeSet *)&v53);
                v7 += 2;
                icu::UnicodeSet::~UnicodeSet(v42, (icu::UnicodeSet *)&v53);
              }
              int v8 = 0;
              if ((v6 ^ 0x7FFFFFFFu) <= (v31 & 0xFFFFFF)) {
                int v6 = 0x7FFFFFFF;
              }
              else {
                v6 += v31 & 0xFFFFFF;
              }
              continue;
            case 0x31u:
              if (v6) {
                goto LABEL_125;
              }
              uint64_t v65 = 0;
              long long v63 = 0u;
              long long v64 = 0u;
              long long v61 = 0u;
              long long v62 = 0u;
              long long v59 = 0u;
              long long v60 = 0u;
              long long v57 = 0u;
              long long v58 = 0u;
              long long v55 = 0u;
              long long v56 = 0u;
              long long v53 = 0u;
              long long v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              long long v32 = icu::UnicodeSet::addAll((icu::UVector **)&v53, (const icu::UnicodeSet *)(qword_1EB20BEF0 + 200 * (v13 & 0xFFFFFF) + 8));
              goto LABEL_93;
            case 0x32u:
              if (v6) {
                goto LABEL_20;
              }
              uint64_t v33 = (const icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(v10 + 104), v13 & 0xFFFFFF);
              icu::UnicodeSet::addAll(*(icu::UVector ***)(*((void *)this + 2) + 160), v33);
              goto LABEL_88;
            case 0x34u:
              if (v6) {
                goto LABEL_20;
              }
              icu::UnicodeSet::clear(*(icu::UnicodeSet **)(v10 + 160));
              icu::UnicodeSet::complement(*(icu::UnicodeSet **)(*((void *)this + 2) + 160));
LABEL_88:
              int v8 = 0;
              v7 += 2;
              continue;
            case 0x38u:
              if (v6) {
                goto LABEL_125;
              }
              uint64_t v65 = 0;
              long long v63 = 0u;
              long long v64 = 0u;
              long long v61 = 0u;
              long long v62 = 0u;
              long long v59 = 0u;
              long long v60 = 0u;
              long long v57 = 0u;
              long long v58 = 0u;
              long long v55 = 0u;
              long long v56 = 0u;
              long long v53 = 0u;
              long long v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v53, 0x2000, 0x1000u, *((UErrorCode **)this + 1));
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 9u);
              goto LABEL_91;
            case 0x39u:
            case 0x3Au:
              if (v6) {
                goto LABEL_125;
              }
              uint64_t v65 = 0;
              long long v63 = 0u;
              long long v64 = 0u;
              long long v61 = 0u;
              long long v62 = 0u;
              long long v59 = 0u;
              long long v60 = 0u;
              long long v57 = 0u;
              long long v58 = 0u;
              long long v55 = 0u;
              long long v56 = 0u;
              long long v53 = 0u;
              long long v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 0xAu, 0xDu);
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 0x85u);
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 0x2028u, 0x2029u);
LABEL_91:
              if ((v13 & 0xFFFFFF) != 0)
              {
                long long v32 = (icu::UnicodeSet *)&v53;
LABEL_93:
                icu::UnicodeSet::complement(v32);
              }
              icu::UnicodeSet::addAll(*(icu::UVector ***)(*((void *)this + 2) + 160), (const icu::UnicodeSet *)&v53);
              v7 += 2;
              icu::UnicodeSet::~UnicodeSet(v34, (icu::UnicodeSet *)&v53);
LABEL_125:
              int v8 = 0;
              if (v6 >> 1 == 0x3FFFFFFF) {
                int v6 = 0x7FFFFFFF;
              }
              else {
                ++v6;
              }
              break;
            default:
              abort();
          }
        }
      }
    }
    uint64_t v43 = *((void *)this + 2);
    BOOL v44 = *(icu::UnicodeSet **)(v43 + 160);
    if (v44)
    {
      unsigned int v45 = 0;
      uint64_t v46 = *(void *)(v43 + 176);
      do
      {
        if (icu::UnicodeSet::contains(v44, v45)) {
          *(unsigned char *)(v46 + ((unint64_t)v45 >> 3)) |= 1 << (v45 & 7);
        }
        ++v45;
      }
      while (v45 != 256);
      uint64_t v43 = *((void *)this + 2);
    }
    int v47 = *(_DWORD *)(v43 + 144);
    if (v47 == 3) {
      goto LABEL_148;
    }
    if (v7 == 1 && *(int *)(v43 + 124) >= 1)
    {
      unsigned int v48 = icu::UnicodeString::char32At((uint64_t *)v43, (icu::UnicodeString *)(v43 + 40), *(_DWORD *)(v43 + 148));
      uint64_t v49 = *((void *)this + 2);
      *(_DWORD *)(v49 + 144) = 5;
LABEL_145:
      *(_DWORD *)(v49 + 168) = v48;
      goto LABEL_148;
    }
    if (v47 == 4)
    {
LABEL_148:
      icu::UVector32::~UVector32((void **)&v66);
      return;
    }
    if (*(_DWORD *)(v43 + 124))
    {
      int v50 = icu::UnicodeSet::size(*(icu::UnicodeSet **)(v43 + 160));
      uint64_t v51 = *((void *)this + 2);
      if (v50 == 1)
      {
        *(_DWORD *)(v51 + 144) = 1;
        unsigned int v48 = icu::UnicodeSet::charAt(*(icu::UnicodeSet **)(v51 + 160), 0);
        uint64_t v49 = *((void *)this + 2);
        goto LABEL_145;
      }
      BOOL v52 = icu::UnicodeSet::contains(*(icu::UnicodeSet **)(v51 + 160), 0, 1114111);
      uint64_t v43 = *((void *)this + 2);
      if (!v52 && *(int *)(v43 + 124) >= 1)
      {
        *(_DWORD *)(v43 + 144) = 2;
        goto LABEL_148;
      }
    }
    *(_DWORD *)(v43 + 144) = 0;
    goto LABEL_148;
  }
}

void *icu::RegexCompile::appendOp(int **this, unsigned int a2, int a3)
{
  int v4 = icu::RegexCompile::buildOp(this, a2, a3);

  return icu::RegexCompile::appendOp(this, v4);
}

void *icu::RegexCompile::handleCloseParen(icu::RegexCompile *this)
{
  if (*((int *)this + 94) > 0)
  {
    uint64_t result = (void *)icu::RegexCompile::fixLiterals((uint64_t)this, 0);
    while (1)
    {
      int v3 = *((_DWORD *)this + 94);
      unsigned int v4 = v3 - 1;
      if (v3 < 1)
      {
        unsigned int v6 = 0;
      }
      else
      {
        *((_DWORD *)this + 94) = v4;
        uint64_t v5 = *((void *)this + 49);
        unsigned int v6 = *(_DWORD *)(v5 + 4 * v4);
        if ((v6 & 0x80000000) != 0)
        {
          BOOL v10 = v3 >= 2;
          unsigned int v11 = v3 - 2;
          if (v10)
          {
            *((_DWORD *)this + 94) = v11;
            int v12 = *(_DWORD *)(v5 + 4 * v11);
          }
          else
          {
            int v12 = 0;
          }
          *((_DWORD *)this + 71) = v12;
          switch(v6)
          {
            case 0xFFFFFFF8:
              int v13 = *((_DWORD *)this + 100);
              BOOL v14 = __OFSUB__(v13, 5);
              int v15 = v13 - 5;
              if (v15 < 0 != v14 || (uint64_t v16 = *(void *)(*((void *)this + 2) + 32), *(_DWORD *)(v16 + 8) <= v15)) {
                LODWORD(v17) = 0;
              }
              else {
                uint64_t v17 = *(void *)(*(void *)(v16 + 24) + 8 * v15) & 0xFFFFFFLL;
              }
              int v35 = icu::RegexCompile::buildOp((int **)this, 0x30u, v17);
              icu::RegexCompile::appendOp(this, v35);
              int v36 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 32) + 8) - 1;
              int matched = icu::RegexCompile::minMatchLength(this, *((_DWORD *)this + 100), v36);
              unsigned int v38 = icu::RegexCompile::maxMatchLength(this, *((_DWORD *)this + 100), v36);
              if (HIBYTE(v38)) {
                goto LABEL_48;
              }
              unsigned int v39 = v38;
              if (matched == 0x7FFFFFFF) {
                int v40 = 0;
              }
              else {
                int v40 = matched;
              }
              icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32), v40, *((_DWORD *)this + 100) - 3);
              icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32), v39, *((_DWORD *)this + 100) - 2);
              int v41 = icu::RegexCompile::buildOp((int **)this, 0x1Fu, *(_DWORD *)(*(void *)(*((void *)this + 2) + 32) + 8));
              uint64_t v42 = *(void *)(*((void *)this + 2) + 32);
              uint64_t v43 = v41;
              unsigned int v44 = *((_DWORD *)this + 100) - 1;
              goto LABEL_58;
            case 0xFFFFFFF9:
              int v18 = *((_DWORD *)this + 100);
              BOOL v14 = __OFSUB__(v18, 4);
              int v19 = v18 - 4;
              if (v19 < 0 != v14 || (uint64_t v20 = *(void *)(*((void *)this + 2) + 32), *(_DWORD *)(v20 + 8) <= v19)) {
                LODWORD(v21) = 0;
              }
              else {
                uint64_t v21 = *(void *)(*(void *)(v20 + 24) + 8 * v19) & 0xFFFFFFLL;
              }
              int v45 = icu::RegexCompile::buildOp((int **)this, 0x2Eu, v21);
              icu::RegexCompile::appendOp(this, v45);
              int v46 = icu::RegexCompile::buildOp((int **)this, 0x26u, v21);
              icu::RegexCompile::appendOp(this, v46);
              int v47 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 32) + 8) - 1;
              int v48 = icu::RegexCompile::minMatchLength(this, *((_DWORD *)this + 100), v47);
              unsigned int v49 = icu::RegexCompile::maxMatchLength(this, *((_DWORD *)this + 100), v47);
              if (HIBYTE(v49))
              {
LABEL_48:
                uint64_t result = icu::RegexCompile::error(this, 66316);
              }
              else
              {
                unsigned int v50 = v49;
                if (v48 == 0x7FFFFFFF) {
                  int v51 = 0;
                }
                else {
                  int v51 = v48;
                }
                icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32), v51, *((_DWORD *)this + 100) - 2);
                uint64_t v52 = *(void *)(*((void *)this + 2) + 32);
                uint64_t v43 = v50;
                unsigned int v44 = *((_DWORD *)this + 100) - 1;
LABEL_59:
                uint64_t result = (void *)icu::UVector64::setElementAt(v52, v43, v44);
              }
              break;
            case 0xFFFFFFFA:
            case 0xFFFFFFFF:
              break;
            case 0xFFFFFFFB:
              int v22 = *((_DWORD *)this + 100);
              if (v22 >= 1 && (uint64_t v23 = *(void *)(*((void *)this + 2) + 32), *(_DWORD *)(v23 + 8) >= v22)) {
                uint64_t v24 = *(void *)(*(void *)(v23 + 24) + 8 * (v22 - 1)) & 0xFFFFFFLL;
              }
              else {
                LODWORD(v24) = 0;
              }
              int v56 = icu::RegexCompile::buildOp((int **)this, 0x26u, v24);
              icu::RegexCompile::appendOp(this, v56);
              icu::RegexCompile::appendOp(this, (**((_DWORD **)this + 1) < 1) << 24);
              int v57 = icu::RegexCompile::buildOp((int **)this, 0x26u, v24);
              icu::RegexCompile::appendOp(this, v57);
              int v58 = icu::RegexCompile::buildOp((int **)this, 6u, *(_DWORD *)(*(void *)(*((void *)this + 2) + 32) + 8) - 1);
              uint64_t v42 = *(void *)(*((void *)this + 2) + 32);
              uint64_t v43 = v58;
              unsigned int v44 = *((_DWORD *)this + 100);
LABEL_58:
              uint64_t v52 = v42;
              goto LABEL_59;
            case 0xFFFFFFFC:
              int v25 = *((_DWORD *)this + 100);
              BOOL v14 = __OFSUB__(v25, 5);
              int v26 = v25 - 5;
              if (v26 < 0 != v14 || (uint64_t v27 = *(void *)(*((void *)this + 2) + 32), *(_DWORD *)(v27 + 8) <= v26)) {
                LODWORD(v28) = 0;
              }
              else {
                uint64_t v28 = *(void *)(*(void *)(v27 + 24) + 8 * v26) & 0xFFFFFFLL;
              }
              long long v53 = (int **)this;
              unsigned int v54 = 38;
              goto LABEL_55;
            case 0xFFFFFFFD:
              int v29 = *((_DWORD *)this + 100);
              if (v29 < -1
                || (v30 = *(void *)(*((void *)this + 2) + 32), int v31 = v29 + 1, *(_DWORD *)(v30 + 8) <= v31))
              {
                LODWORD(v28) = 0;
              }
              else
              {
                uint64_t v28 = *(void *)(*(void *)(v30 + 24) + 8 * v31) & 0xFFFFFFLL;
              }
              long long v53 = (int **)this;
              unsigned int v54 = 33;
              goto LABEL_55;
            case 0xFFFFFFFE:
              int v32 = *((_DWORD *)this + 100);
              if (v32 < -1
                || (v33 = *(void *)(*((void *)this + 2) + 32), int v34 = v32 + 1, *(_DWORD *)(v33 + 8) <= v34))
              {
                LODWORD(v28) = 0;
              }
              else
              {
                uint64_t v28 = *(void *)(*(void *)(v33 + 24) + 8 * v34) & 0xFFFFFFLL;
              }
              long long v53 = (int **)this;
              unsigned int v54 = 9;
LABEL_55:
              int v55 = icu::RegexCompile::buildOp(v53, v54, v28);
              uint64_t result = icu::RegexCompile::appendOp(this, v55);
              break;
            default:
              abort();
          }
          *((_DWORD *)this + 101) = *(_DWORD *)(*(void *)(*((void *)this + 2) + 32) + 8);
          return result;
        }
      }
      uint64_t v7 = *(void *)(*((void *)this + 2) + 32);
      signed int v8 = *(_DWORD *)(v7 + 8);
      if (v8 <= (int)v6) {
        LODWORD(v9) = 0;
      }
      else {
        uint64_t v9 = *(void *)(*(void *)(v7 + 24) + 8 * v6);
      }
      uint64_t result = (void *)icu::UVector64::setElementAt(v7, (int)(v8 | v9), v6);
      *((_DWORD *)this + 100) = v6;
    }
  }

  return icu::RegexCompile::error(this, 66310);
}

uint64_t icu::RegexCompile::fixLiterals(uint64_t this, unsigned __int8 a2)
{
  uint64_t v2 = this;
  int v3 = a2;
  unsigned int v4 = (icu::UnicodeString *)(this + 296);
  while (1)
  {
    if (*(__int16 *)(v2 + 304) < 0)
    {
      int v6 = *(_DWORD *)(v2 + 308);
      if (!v6) {
        return this;
      }
    }
    else
    {
      unsigned int v5 = *(unsigned __int16 *)(v2 + 304);
      if (v5 < 0x20) {
        return this;
      }
      int v6 = v5 >> 5;
    }
    int v7 = icu::UnicodeString::moveIndex32(v4, v6, -1);
    unsigned int v9 = icu::UnicodeString::char32At(v8, v4, v7);
    if (!v3) {
      break;
    }
    unsigned int v10 = *(unsigned __int16 *)(v2 + 304);
    if (v7 || (v10 & 1) == 0)
    {
      if ((v10 & 0x8000) != 0) {
        unsigned int v11 = *(_DWORD *)(v2 + 308);
      }
      else {
        unsigned int v11 = v10 >> 5;
      }
      if (v11 > v7)
      {
        if (v7 > 1023)
        {
          *(_WORD *)(v2 + 304) = v10 | 0xFFE0;
          *(_DWORD *)(v2 + 308) = v7;
        }
        else
        {
          *(_WORD *)(v2 + 304) = *(_WORD *)(v2 + 304) & 0x1F | (32 * v7);
        }
      }
    }
    else
    {
      icu::UnicodeString::unBogus((uint64_t)v4);
    }
    icu::RegexCompile::fixLiterals((icu::RegexCompile *)v2, 0);
    this = icu::UnicodeString::append((uint64_t)v4, v9);
    int v3 = 0;
  }
  if ((*(unsigned char *)(v2 + 284) & 2) != 0)
  {
    icu::UnicodeString::foldCase((UChar **)v4, 0);
    unsigned int v12 = *(unsigned __int16 *)(v2 + 304);
    if ((v12 & 0x8000) != 0) {
      int v13 = *(_DWORD *)(v2 + 308);
    }
    else {
      int v13 = v12 >> 5;
    }
    int v7 = icu::UnicodeString::moveIndex32(v4, v13, -1);
    unsigned int v9 = icu::UnicodeString::char32At(v14, v4, v7);
  }
  if (v7)
  {
    if (*(__int16 *)(v2 + 304) < 0 && *(int *)(v2 + 308) > 0xFFFFFF
      || (uint64_t v15 = *(void *)(v2 + 16), *(__int16 *)(v15 + 48) < 0) && *(int *)(v15 + 52) >= 0x1000000)
    {
      icu::RegexCompile::error((void *)v2, 66324);
    }
    uint64_t v16 = *(void *)(v2 + 16);
    unsigned int v17 = *(unsigned __int16 *)(v16 + 48);
    if ((*(unsigned char *)(v2 + 284) & 2) != 0)
    {
      if ((v17 & 0x8000) != 0) {
        int v18 = *(_DWORD *)(v16 + 52);
      }
      else {
        int v18 = v17 >> 5;
      }
      int v22 = (int **)v2;
      unsigned int v23 = 40;
    }
    else
    {
      if ((v17 & 0x8000) != 0) {
        int v18 = *(_DWORD *)(v16 + 52);
      }
      else {
        int v18 = v17 >> 5;
      }
      int v22 = (int **)v2;
      unsigned int v23 = 4;
    }
    int v24 = icu::RegexCompile::buildOp(v22, v23, v18);
    icu::RegexCompile::appendOp((void *)v2, v24);
    if (*(__int16 *)(v2 + 304) < 0) {
      int v25 = *(_DWORD *)(v2 + 308);
    }
    else {
      int v25 = *(unsigned __int16 *)(v2 + 304) >> 5;
    }
    int v26 = icu::RegexCompile::buildOp((int **)v2, 5u, v25);
    icu::RegexCompile::appendOp((void *)v2, v26);
    unsigned int v27 = *(unsigned __int16 *)(v2 + 304);
    int v28 = (__int16)v27;
    unsigned int v29 = v27 >> 5;
    if (v28 >= 0) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = *(unsigned int *)(v2 + 308);
    }
    this = icu::UnicodeString::doAppend(*(void *)(v2 + 16) + 40, v4, 0, v30);
  }
  else
  {
    if ((*(unsigned char *)(v2 + 284) & 2) != 0 && u_hasBinaryProperty(v9, UCHAR_CASE_SENSITIVE))
    {
      int v19 = (int **)v2;
      unsigned int v20 = 39;
    }
    else
    {
      int v19 = (int **)v2;
      unsigned int v20 = 3;
    }
    int v21 = icu::RegexCompile::buildOp(v19, v20, v9);
    this = (uint64_t)icu::RegexCompile::appendOp((void *)v2, v21);
  }
  if (*(_WORD *)(v2 + 304)) {
    __int16 v31 = 2;
  }
  else {
    __int16 v31 = *(_WORD *)(v2 + 304) & 0x1F;
  }
  *(_WORD *)(v2 + 304) = v31;
  return this;
}

uint64_t icu::RegexCompile::buildOp(int **this, unsigned int a2, int a3)
{
  if (*this[1] > 0) {
    return 0;
  }
  if (a2 >= 0x100 || a3 >= 0x1000000) {
    goto LABEL_11;
  }
  if (a3 < 0)
  {
    if ((!a2 || a2 == 255) && HIBYTE(a3) == 255)
    {
      a2 = 255;
      return a3 | (a2 << 24);
    }
LABEL_11:
    abort();
  }
  return a3 | (a2 << 24);
}

uint64_t sub_18C9B4E14(icu::UVector32 *this, uint64_t a2, UErrorCode *a3)
{
  int v5 = *((_DWORD *)this + 2);
  if (v5 >= -1 && *((_DWORD *)this + 3) > v5) {
    goto LABEL_5;
  }
  if (icu::UVector32::expandCapacity(this, v5 + 1, a3))
  {
    int v5 = *((_DWORD *)this + 2);
LABEL_5:
    *(_DWORD *)(*((void *)this + 3) + 4 * v5) = a2;
    ++*((_DWORD *)this + 2);
  }
  return a2;
}

uint64_t icu::RegexCompile::allocateData(int **this, int a2)
{
  if (*this[1] > 0) {
    return 0;
  }
  if ((a2 - 257) < 0xFFFFFF00 || (v3 = this[2], uint64_t v2 = v3[33], (v2 & 0x80000000) != 0))
  {
    uint64_t v2 = 0;
  }
  else
  {
    v3[33] = v2 + a2;
    if ((v2 + a2) < 0xFFFFF0) {
      return v2;
    }
  }
  icu::RegexCompile::error(this, 66304);
  return v2;
}

uint64_t icu::RegexCompile::blockTopLoc(icu::RegexCompile *this, int a2)
{
  icu::RegexCompile::fixLiterals((uint64_t)this, 1u);
  uint64_t v4 = *(void *)(*((void *)this + 2) + 32);
  int v5 = *(_DWORD *)(v4 + 8);
  if (v5 == *((_DWORD *)this + 101)) {
    return *((unsigned int *)this + 100);
  }
  uint64_t v6 = (v5 - 1);
  if (v5 >= 1)
  {
    unsigned int v7 = v5 - 2;
    if ((*(void *)(*(void *)(v4 + 24) + 8 * v6) & 0xFF000000) == 0x5000000) {
      uint64_t v6 = v7;
    }
    else {
      uint64_t v6 = v6;
    }
  }
  if (a2)
  {
    signed int v8 = (UErrorCode *)*((void *)this + 1);
    if (*(int *)v8 <= 0) {
      uint64_t v9 = 117440512;
    }
    else {
      uint64_t v9 = 0;
    }
    icu::UVector64::insertElementAt((_DWORD *)v4, v9, v6, v8);
  }
  return v6;
}

void *icu::RegexCompile::appendOp(void *this, int a2)
{
  uint64_t v2 = (UErrorCode *)this[1];
  if (*(int *)v2 > 0) {
    return this;
  }
  uint64_t v4 = (uint64_t)this;
  uint64_t v5 = *(void *)(this[2] + 32);
  int v6 = *(_DWORD *)(v5 + 8);
  int v7 = v6 + 1;
  if (v6 >= -1 && *(_DWORD *)(v5 + 12) > v6) {
    goto LABEL_6;
  }
  this = (void *)icu::UVector64::expandCapacity(*(icu::UVector64 **)(this[2] + 32), v7, v2);
  if (this)
  {
    int v6 = *(_DWORD *)(v5 + 8);
    int v7 = v6 + 1;
LABEL_6:
    *(void *)(*(void *)(v5 + 24) + 8 * v6) = a2;
    *(_DWORD *)(v5 + 8) = v7;
  }
  if (*(int *)(*(void *)(*(void *)(v4 + 16) + 32) + 8) >= 16777201 && **(int **)(v4 + 8) <= 0)
  {
    return icu::RegexCompile::error((void *)v4, 66324);
  }
  return this;
}

uint64_t icu::RegexCompile::insertOp(icu::RegexCompile *this, signed int a2)
{
  uint64_t v4 = (UErrorCode *)*((void *)this + 1);
  uint64_t v5 = *(void *)(*((void *)this + 2) + 32);
  if (*(int *)v4 <= 0) {
    uint64_t v6 = 117440512;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t result = (uint64_t)icu::UVector64::insertElementAt(*(_DWORD **)(*((void *)this + 2) + 32), v6, a2, v4);
  int v8 = *(_DWORD *)(v5 + 8);
  if (v8 >= 1)
  {
    for (uint64_t i = 0; i < v8; ++i)
    {
      uint64_t v10 = *(void *)(*(void *)(v5 + 24) + 8 * i);
      if (v10 >> 25 != 14 && (BYTE3(v10) > 0x24u || ((1 << SBYTE3(v10)) & 0x108004A040) == 0)) {
        continue;
      }
      if ((v10 & 0xFFFFFF) > a2)
      {
        int v12 = icu::RegexCompile::buildOp((int **)this, BYTE3(v10), (v10 & 0xFFFFFF) + 1);
        uint64_t result = icu::UVector64::setElementAt(v5, v12, i);
        int v8 = *(_DWORD *)(v5 + 8);
      }
    }
  }
  int v13 = *((_DWORD *)this + 94);
  if (v13 >= 1)
  {
    for (uint64_t j = 0; j < v13; ++j)
    {
      signed int v15 = *(_DWORD *)(*((void *)this + 49) + 4 * j);
      if (v15 > a2)
      {
        uint64_t result = icu::UVector32::setElementAt((uint64_t)this + 368, v15 + 1, j);
        int v13 = *((_DWORD *)this + 94);
      }
    }
  }
  signed int v16 = *((_DWORD *)this + 101);
  if (v16 > a2) {
    *((_DWORD *)this + 101) = v16 + 1;
  }
  signed int v17 = *((_DWORD *)this + 100);
  if (v17 > a2) {
    *((_DWORD *)this + 100) = v17 + 1;
  }
  return result;
}

uint64_t icu::RegexCompile::compileInlineInterval(icu::RegexCompile *this)
{
  int v1 = *((_DWORD *)this + 103);
  if (v1 > 10 || v1 < *((_DWORD *)this + 102)) {
    return 0;
  }
  signed int v3 = icu::RegexCompile::blockTopLoc(this, 0);
  int v4 = *((_DWORD *)this + 103);
  uint64_t v5 = *(void *)(*((void *)this + 2) + 32);
  if (v4)
  {
    signed int v6 = *(_DWORD *)(v5 + 8);
    int v7 = v6 - 1;
    if (v4 != 1 && v3 != v7) {
      return 0;
    }
    LODWORD(v9) = 0;
    if ((v3 & 0x80000000) == 0 && v6 > v3) {
      uint64_t v9 = *(void *)(*(void *)(v5 + 24) + 8 * v3);
    }
    int v10 = icu::RegexCompile::buildOp((int **)this, 6u, v7 + 2 * v4 - *((_DWORD *)this + 102));
    if (!*((_DWORD *)this + 102))
    {
      icu::RegexCompile::insertOp(this, v3);
      icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32), v10, v3);
    }
    if (*((int *)this + 103) >= 2)
    {
      int v11 = 1;
      do
      {
        if (v11 >= *((_DWORD *)this + 102)) {
          icu::RegexCompile::appendOp(this, v10);
        }
        icu::RegexCompile::appendOp(this, v9);
        ++v11;
      }
      while (v11 < *((_DWORD *)this + 103));
    }
  }
  else
  {
    icu::UVector64::setSize((icu::UVector64 *)v5, v3);
    if (*((_DWORD *)this + 100) >= v3) {
      *((_DWORD *)this + 100) = -1;
    }
    if (*((_DWORD *)this + 101) >= v3) {
      *((_DWORD *)this + 101) = -1;
    }
  }
  return 1;
}

void *icu::RegexCompile::compileInterval(icu::RegexCompile *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = icu::RegexCompile::blockTopLoc(this, 1);
  icu::RegexCompile::insertOp(this, v6);
  icu::RegexCompile::insertOp(this, v6);
  icu::RegexCompile::insertOp(this, v6);
  if (*((int *)this + 103) >= 0) {
    int v7 = 1;
  }
  else {
    int v7 = 2;
  }
  Stackint Data = icu::RegexCompile::allocateStackData(this, v7);
  int v9 = icu::RegexCompile::buildOp((int **)this, a2, StackData);
  icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32), v9, v6);
  int v10 = icu::RegexCompile::buildOp((int **)this, 0x1Fu, *(_DWORD *)(*(void *)(*((void *)this + 2) + 32) + 8));
  icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32), v10, v6 + 1);
  icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32), *((int *)this + 102), v6 + 2);
  icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32), *((int *)this + 103), v6 + 3);
  int v11 = icu::RegexCompile::buildOp((int **)this, a3, v6);
  uint64_t result = icu::RegexCompile::appendOp(this, v11);
  int v13 = *((_DWORD *)this + 102);
  if (HIBYTE(v13) || (int v14 = *((_DWORD *)this + 103), v14 >= 0x1000000))
  {
    uint64_t result = icu::RegexCompile::error(this, 66311);
    int v13 = *((_DWORD *)this + 102);
    int v14 = *((_DWORD *)this + 103);
  }
  if (v13 > v14 && v14 != -1)
  {
    return icu::RegexCompile::error(this, 66313);
  }
  return result;
}

uint64_t sub_18C9B54A4(icu::UVector64 *this, uint64_t a2, UErrorCode *a3)
{
  int v5 = *((_DWORD *)this + 2);
  int v6 = v5 + 1;
  if (v5 >= -1 && *((_DWORD *)this + 3) > v5) {
    goto LABEL_5;
  }
  if (icu::UVector64::expandCapacity(this, v6, a3))
  {
    int v5 = *((_DWORD *)this + 2);
    int v6 = v5 + 1;
LABEL_5:
    *(void *)(*((void *)this + 3) + 8 * v5) = a2;
    *((_DWORD *)this + 2) = v6;
  }
  return a2;
}

uint64_t icu::RegexCompile::literalChar(icu::RegexCompile *this, unsigned int a2)
{
  return icu::UnicodeString::append((uint64_t)this + 296, a2);
}

icu::UnicodeSet *icu::RegexCompile::scanProp(int **this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*this[1] > 0) {
    return 0;
  }
  signed int v3 = (UChar32 *)(this + 9);
  BOOL v4 = *((_DWORD *)this + 18) == 80;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v12 = 0;
  long long v11 = 0u;
  int v8 = &unk_1EDA47700;
  LOWORD(v9) = 2;
  icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
  if (*v3 == 123)
  {
    while (1)
    {
      icu::RegexCompile::nextChar((uint64_t)this, v3);
      unsigned int v5 = *((_DWORD *)this + 18);
      if (v5 == 125) {
        break;
      }
      if (v5 == -1) {
        goto LABEL_7;
      }
      icu::UnicodeString::append((uint64_t)&v8, v5);
    }
    SetForProperty = icu::RegexCompile::createSetForProperty((icu::RegexCompile *)this, (const icu::UnicodeString *)&v8, v4);
    icu::RegexCompile::nextChar((uint64_t)this, v3);
  }
  else
  {
LABEL_7:
    icu::RegexCompile::error(this, 66308);
    SetForProperty = 0;
  }
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v8);
  return SetForProperty;
}

void icu::RegexCompile::compileSet(icu::RegexCompile *this, icu::UnicodeSet *a2)
{
  if (!a2) {
    return;
  }
  icu::UnicodeSet::removeAllStrings(a2);
  int v4 = icu::UnicodeSet::size(a2);
  if (v4 == 1)
  {
    unsigned int v6 = icu::UnicodeSet::charAt(a2, 0);
    icu::UnicodeString::append((uint64_t)this + 296, v6);
    goto LABEL_8;
  }
  if (!v4)
  {
    icu::RegexCompile::appendOp(this, (**((_DWORD **)this + 1) < 1) << 24);
LABEL_8:
    long long v9 = icu::UnicodeSet::~UnicodeSet(v5, a2);
    icu::UMemory::operator delete(v9);
    return;
  }
  icu::UnicodeSet::freeze(a2);
  int v7 = *(icu::UVector **)(*((void *)this + 2) + 104);
  int v8 = *((_DWORD *)v7 + 2);
  icu::UVector::addElement(v7, a2, *((UErrorCode **)this + 1));
  unsigned int v5 = (void *)**((unsigned int **)this + 1);
  if ((int)v5 > 0) {
    goto LABEL_8;
  }
  int v10 = icu::RegexCompile::buildOp((int **)this, 0xBu, v8);

  icu::RegexCompile::appendOp(this, v10);
}

uint64_t icu::RegexCompile::scanNamedChar(icu::RegexCompile *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (**((int **)this + 1) > 0) {
    return 0;
  }
  uint64_t v2 = (UChar32 *)((char *)this + 72);
  icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
  if (*((_DWORD *)this + 18) != 123)
  {
    icu::RegexCompile::error(this, 66308);
    return 0;
  }
  long long v13 = 0u;
  uint64_t v16 = 0;
  long long v15 = 0u;
  long long v14 = 0u;
  uint64_t v12 = &unk_1EDA47700;
  LOWORD(v13) = 2;
  while (1)
  {
    icu::RegexCompile::nextChar((uint64_t)this, v2);
    unsigned int v3 = *((_DWORD *)this + 18);
    if (v3 == 125) {
      break;
    }
    if (v3 == -1) {
      goto LABEL_23;
    }
    icu::UnicodeString::append((uint64_t)&v12, v3);
  }
  int v11 = 0;
  memset(v10, 0, sizeof(v10));
  if ((v13 & 0x11) != 0)
  {
    unsigned int v6 = 0;
  }
  else if ((v13 & 2) != 0)
  {
    unsigned int v6 = (_WORD *)&v13 + 1;
  }
  else
  {
    unsigned int v6 = (_WORD *)v14;
  }
  if ((v13 & 0x8000u) == 0) {
    int v7 = (unsigned __int16)v13 >> 5;
  }
  else {
    int v7 = DWORD1(v13);
  }
  if (!uprv_isInvariantUString(v6, v7)) {
    goto LABEL_23;
  }
  if (((__int16)v13 & 0x80000000) == 0)
  {
    if ((unsigned __int16)v13 < 0xC80u)
    {
      uint64_t v8 = (unsigned __int16)v13 >> 5;
      goto LABEL_25;
    }
LABEL_23:
    icu::RegexCompile::error(this, 66308);
    uint64_t v4 = 0;
    goto LABEL_24;
  }
  uint64_t v8 = DWORD1(v13);
  if (DWORD1(v13) > 0x63) {
    goto LABEL_23;
  }
LABEL_25:
  icu::UnicodeString::extract((uint64_t)&v12, 0, v8, (char *)v10, 100);
  uint64_t v4 = u_charFromName(U_UNICODE_CHAR_NAME, (const char *)v10, *((UErrorCode **)this + 1));
  if (**((int **)this + 1) >= 1) {
    icu::RegexCompile::error(this, 66308);
  }
  icu::RegexCompile::nextChar((uint64_t)this, v2);
LABEL_24:
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v12);
  return v4;
}

uint64_t icu::RegexCompile::peekCharLL(icu::RegexCompile *this)
{
  uint64_t result = *((unsigned int *)this + 17);
  if (result == -1)
  {
    uint64_t result = icu::RegexCompile::nextCharLL(this);
    *((_DWORD *)this + 17) = result;
  }
  return result;
}

uint64_t icu::RegexCompile::nextCharLL(icu::RegexCompile *this)
{
  uint64_t result = *((unsigned int *)this + 17);
  if (result != -1)
  {
    *((_DWORD *)this + 17) = -1;
    return result;
  }
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  uint64_t v4 = *(int *)(v3 + 40);
  if ((int)v4 >= *(_DWORD *)(v3 + 44)
    || (uint64_t result = *(unsigned __int16 *)(*(void *)(v3 + 48) + 2 * v4), result >> 11 > 0x1A))
  {
    uint64_t result = utext_next32(*(UText **)(*((void *)this + 2) + 8));
  }
  else
  {
    *(_DWORD *)(v3 + 40) = v4 + 1;
  }
  if ((int)result > 12)
  {
    if (result != 13 && result != 133 && result != 8232)
    {
LABEL_18:
      ++*((void *)this + 7);
      goto LABEL_19;
    }
LABEL_17:
    ++*((void *)this + 6);
    *((void *)this + 7) = 0;
    goto LABEL_19;
  }
  if (result == -1) {
    return result;
  }
  if (result != 10) {
    goto LABEL_18;
  }
  if (*((_DWORD *)this + 16) != 13) {
    goto LABEL_17;
  }
LABEL_19:
  *((_DWORD *)this + 16) = result;
  return result;
}

void *sub_18C9B5A7C(icu::UVector **a1, unsigned int a2, UErrorCode *a3)
{
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v9);
  unsigned int v6 = icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v9, 0x2000, a2, a3);
  icu::UnicodeSet::addAll(a1, v6);
  return icu::UnicodeSet::~UnicodeSet(v7, (icu::UnicodeSet *)v9);
}

void *sub_18C9B5AE4(uint64_t a1, void *a2, UErrorCode *a3)
{
  uint64_t v4 = a2;
  if (*(void *)(a1 + 24))
  {
    icu::UVector::adoptElement((uint64_t (**)(void *))a1, a2, a3);
    if (*(int *)a3 > 0) {
      return 0;
    }
  }
  else
  {
    icu::UVector::addElement((icu::UVector *)a1, a2, a3);
  }
  return v4;
}

uint64_t icu::RegexCompile::setPushOp(UErrorCode **this, int a2)
{
  icu::RegexCompile::setEval((icu::RegexCompile *)this, a2);
  icu::UVector::addElement((icu::UVector *)(this + 57), a2, this[1]);
  unsigned int v6 = (icu::UnicodeSet *)icu::UMemory::operator new(v5, (icu::UMemory *)0xC8, v4);
  int v7 = v6;
  if (v6)
  {
    icu::UnicodeSet::UnicodeSet(v6);
    uint64_t v8 = this[1];
  }
  else
  {
    uint64_t v8 = this[1];
    if (*(int *)v8 <= 0) {
      *uint64_t v8 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  long long v9 = (uint64_t (**)(void *))(this + 52);
  if (this[55])
  {
    return icu::UVector::adoptElement(v9, v7, v8);
  }
  else
  {
    return icu::UVector::addElement((icu::UVector *)v9, v7, v8);
  }
}

uint64_t icu::RegexCompile::setEval(icu::RegexCompile *this, int a2)
{
  unint64_t v4 = (icu::RegexCompile *)((char *)this + 456);
  uint64_t result = icu::UVector::elementAti((icu::RegexCompile *)((char *)this + 456), *((_DWORD *)this + 116) - 1);
  if ((result & 0xFFFF0000) >= (a2 & 0xFFFF0000))
  {
    int v6 = result;
    while (1)
    {
      icu::UStack::popi(v4);
      int v7 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      uint64_t v8 = v7;
      if (v6 <= 196612) {
        break;
      }
      if (v6 > 262150)
      {
        if (v6 == 262151) {
          goto LABEL_15;
        }
        if (v6 != 262152) {
LABEL_21:
        }
          abort();
      }
      else if (v6 != 196613)
      {
        if (v6 != 262150) {
          goto LABEL_21;
        }
        icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
        long long v9 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
        icu::UnicodeSet::addAll(v9, v8);
        goto LABEL_16;
      }
      icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
      int v11 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      icu::UnicodeSet::retainAll(v11, v8);
LABEL_16:
      long long v13 = icu::UnicodeSet::~UnicodeSet(v10, v8);
      icu::UMemory::operator delete(v13);
LABEL_17:
      uint64_t result = icu::UVector::elementAti(v4, *((_DWORD *)this + 116) - 1);
      int v6 = result;
      if ((result & 0xFFFF0000) < (a2 & 0xFFFF0000)) {
        return result;
      }
    }
    if (v6 == 131075)
    {
      icu::UnicodeSet::complement(v7);
      goto LABEL_17;
    }
    if (v6 == 131081)
    {
      icu::UnicodeSet::closeOver((icu::UVector **)v7, 2);
      icu::UnicodeSet::removeAllStrings(v8);
      goto LABEL_17;
    }
    if (v6 != 196612) {
      goto LABEL_21;
    }
LABEL_15:
    icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
    uint64_t v12 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
    icu::UnicodeSet::removeAll(v12, v8);
    goto LABEL_16;
  }
  return result;
}

icu::UnicodeSet *icu::RegexCompile::scanPosixProp(int **this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*this[1] > 0) {
    return 0;
  }
  int v19 = this[4];
  uint64_t v3 = *((void *)this[2] + 1);
  uint64_t v4 = *(int *)(v3 + 40);
  if ((int)v4 <= *(_DWORD *)(v3 + 28)) {
    int64_t v5 = *(void *)(v3 + 32) + v4;
  }
  else {
    int64_t v5 = (*(uint64_t (**)(void))(*(void *)(v3 + 56) + 64))();
  }
  char v6 = *((unsigned char *)this + 40);
  char v7 = *((unsigned char *)this + 41);
  char v8 = *((unsigned char *)this + 42);
  long long v9 = this[6];
  int v10 = this[7];
  int v11 = (unsigned int *)(this + 9);
  uint64_t v12 = this[9];
  long long v13 = this[8];
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v24 = 0;
  long long v23 = 0u;
  unsigned int v20 = &unk_1EDA47700;
  LOWORD(v21) = 2;
  icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
  unsigned int v14 = *((_DWORD *)this + 18);
  if (v14 == 94)
  {
    icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
    unsigned int v14 = *((_DWORD *)this + 18);
    BOOL v15 = 1;
  }
  else
  {
    BOOL v15 = 0;
  }
  while (1)
  {
    icu::UnicodeString::append((uint64_t)&v20, v14);
    icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
    if (*((unsigned char *)this + 76)) {
      break;
    }
    unsigned int v14 = *v11;
    if (*v11 == -1) {
      break;
    }
    if (v14 == 58)
    {
      icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
      if (*((_DWORD *)this + 18) == 93)
      {
        SetForProperty = icu::RegexCompile::createSetForProperty((icu::RegexCompile *)this, (const icu::UnicodeString *)&v20, v15);
        goto LABEL_19;
      }
      break;
    }
  }
  this[4] = v19;
  *((unsigned char *)this + 40) = v6;
  *((unsigned char *)this + 41) = v7;
  *((unsigned char *)this + 42) = v8;
  this[6] = v9;
  this[7] = v10;
  this[8] = v13;
  this[9] = v12;
  uint64_t v17 = (UText *)*((void *)this[2] + 1);
  uint64_t v16 = v5 - v17->chunkNativeStart;
  if (v16 < 0 || v16 >= v17->nativeIndexingLimit || v17->chunkContents[v16] >> 10 > 0x36u)
  {
    utext_setNativeIndex(v17, v5);
    SetForProperty = 0;
  }
  else
  {
    SetForProperty = 0;
    v17->int32_t chunkOffset = v16;
  }
LABEL_19:
  icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v20);
  return SetForProperty;
}

uint64_t icu::RegexCompile::maxMatchLength(icu::RegexCompile *this, signed int a2, signed int a3)
{
  uint64_t v4 = (UErrorCode *)*((void *)this + 1);
  if (*(int *)v4 > 0) {
    return 0;
  }
  long long v28 = 0u;
  long long v29 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v28, a3 + 1, v4);
  icu::UVector32::setSize((icu::UVector32 *)&v28, a3 + 1);
  if (a2 > a3) {
    goto LABEL_7;
  }
  unsigned int v8 = a2;
  do
    icu::UVector32::setElementAt((uint64_t)&v28, 0, v8++);
  while (a3 + 1 != v8);
  if (a2 > a3)
  {
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  LODWORD(v10) = 0;
  while (a2 < 0)
  {
    uint64_t v10 = v10 & ~((int)v10 >> 31);
LABEL_29:
    uint64_t v5 = v10;
    BOOL v14 = a2++ < a3;
    if (!v14) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = *(void *)(*((void *)this + 2) + 32);
  signed int v12 = *(_DWORD *)(v11 + 8);
  if (v12 <= a2) {
    LODWORD(v13) = 0;
  }
  else {
    uint64_t v13 = *(void *)(*(void *)(v11 + 24) + 8 * a2);
  }
  BOOL v14 = SDWORD2(v28) < 1 || SDWORD2(v28) <= a2;
  if (v14)
  {
    uint64_t v10 = v10 & ~((int)v10 >> 31);
  }
  else
  {
    int v15 = *(_DWORD *)(*((void *)&v29 + 1) + 4 * a2);
    if (v15 <= (int)v10) {
      uint64_t v10 = v10;
    }
    else {
      uint64_t v10 = v15;
    }
  }
  uint64_t v5 = 0x7FFFFFFFLL;
  switch(BYTE3(v13))
  {
    case 0:
    case 2:
    case 5:
    case 7:
    case 8:
    case 9:
    case 0x10:
    case 0x11:
    case 0x14:
    case 0x17:
    case 0x18:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x23:
    case 0x25:
    case 0x26:
    case 0x2A:
    case 0x2B:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x35:
    case 0x36:
    case 0x37:
      goto LABEL_28;
    case 1:
      uint64_t v10 = 0;
      if (SDWORD2(v28) < 1 || SDWORD2(v28) <= a2 + 1) {
        goto LABEL_29;
      }
      uint64_t v10 = *(unsigned int *)(*((void *)&v29 + 1) + 4 * (a2 + 1));
      goto LABEL_28;
    case 3:
      if (v10 >> 1 == 0x3FFFFFFF) {
        uint64_t v10 = 0x7FFFFFFFLL;
      }
      else {
        uint64_t v10 = (v10 + 1);
      }
      if ((v13 & 0xFFFFFF) <= 0x10000) {
        goto LABEL_28;
      }
      if (v10 >> 1 == 0x3FFFFFFF) {
        goto LABEL_8;
      }
      uint64_t v10 = (v10 + 1);
      goto LABEL_28;
    case 4:
    case 0x28:
      if (v12 <= ++a2) {
        LODWORD(v18) = 0;
      }
      else {
        uint64_t v18 = *(void *)(*(void *)(v11 + 24) + 8 * a2);
      }
      unsigned int v24 = v18 & 0xFFFFFF;
      if ((v10 ^ 0x7FFFFFFF) <= v24) {
        goto LABEL_8;
      }
      uint64_t v10 = v24 + v10;
      goto LABEL_28;
    case 6:
      signed int v20 = v13 & 0xFFFFFF;
      if ((v13 & 0xFFFFFF) <= a2) {
        goto LABEL_8;
      }
      int v21 = 0;
      if (SDWORD2(v28) >= 1 && SDWORD2(v28) > v20) {
        int v21 = *(_DWORD *)(*((void *)&v29 + 1) + 4 * (v13 & 0xFFFFFF));
      }
      if ((int)v10 > v21) {
        icu::UVector32::setElementAt((uint64_t)&v28, v10, v20);
      }
      goto LABEL_28;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x15:
    case 0x16:
    case 0x1B:
    case 0x27:
    case 0x31:
    case 0x38:
    case 0x39:
    case 0x3A:
      if ((v10 | 0x80000000) >= 0xFFFFFFFD) {
        goto LABEL_8;
      }
      uint64_t v10 = (v10 + 2);
      goto LABEL_28;
    case 0xD:
    case 0xF:
    case 0x12:
    case 0x24:
      signed int v16 = v13 & 0xFFFFFF;
      if ((v13 & 0xFFFFFF) < a2) {
        goto LABEL_8;
      }
      int v17 = 0;
      if (SDWORD2(v28) >= 1 && SDWORD2(v28) > v16) {
        int v17 = *(_DWORD *)(*((void *)&v29 + 1) + 4 * (v13 & 0xFFFFFF));
      }
      if (v17 < (int)v10) {
        icu::UVector32::setElementAt((uint64_t)&v28, v10, v16);
      }
      uint64_t v10 = 0;
      goto LABEL_29;
    case 0x13:
    case 0x22:
    case 0x29:
    case 0x32:
    case 0x33:
    case 0x34:
      goto LABEL_8;
    case 0x19:
    case 0x1A:
      if (v12 <= a2 + 1) {
        LODWORD(v19) = 0;
      }
      else {
        uint64_t v19 = *(void *)(*(void *)(v11 + 24) + 8 * (a2 + 1));
      }
      signed int v25 = v19 & 0xFFFFFF;
      int v26 = a2 + 4;
      if ((v19 & 0xFFFFFF) == a2 + 4)
      {
        a2 = v19 & 0xFFFFFF;
LABEL_28:
        uint64_t v5 = 0x7FFFFFFFLL;
        if (v10 == 0x7FFFFFFF) {
          goto LABEL_8;
        }
        goto LABEL_29;
      }
      if (v12 <= a2 + 3)
      {
        LODWORD(v27) = 0;
      }
      else
      {
        uint64_t v27 = *(unsigned int *)(*(void *)(v11 + 24) + 8 * (a2 + 3));
        if (v27 == 0xFFFFFFFFLL) {
          goto LABEL_77;
        }
      }
      uint64_t v10 = (int)v10 + (int)v27 * (uint64_t)(int)icu::RegexCompile::maxMatchLength(this, v26, v25 - 1);
      a2 = v25;
      if (v10 <= 2147483646) {
        goto LABEL_28;
      }
LABEL_77:
      uint64_t v5 = 0x7FFFFFFFLL;
LABEL_8:
      icu::UVector32::~UVector32((void **)&v28);
      return v5;
    case 0x2C:
      if (a2 >= a3) {
        goto LABEL_74;
      }
      while (1)
      {
        int v22 = a2 + 1;
        if (a2 >= -1 && v12 > v22)
        {
          uint64_t v23 = *(void *)(*(void *)(v11 + 24) + 8 * v22);
          if ((BYTE3(v23) == 48 || BYTE3(v23) == 38) && ((v23 ^ v13) & 0xFFFFFF) == 0) {
            break;
          }
        }
        ++a2;
        if (a3 == v22)
        {
          a2 = a3 + 1;
          goto LABEL_28;
        }
      }
LABEL_74:
      ++a2;
      goto LABEL_28;
    default:
      abort();
  }
}

icu::UnicodeSet *icu::RegexCompile::findCaseInsensitiveStarters(icu::RegexCompile *this, icu::UnicodeSet *a2, icu::UnicodeSet *a3)
{
  if (this >= 0x110000) {
    abort();
  }
  signed int v4 = (int)this;
  if (u_hasBinaryProperty((UChar32)this, UCHAR_CASE_SENSITIVE))
  {
    UChar32 v5 = u_foldCase(v4, 0);
    icu::UnicodeSet::set(a2, v5, v5);
    uint64_t v6 = 0;
    do
      signed int v7 = dword_18CA96668[v6++];
    while (v7 < v4);
    if (v7 == v4 && v6 != 50)
    {
      int v8 = word_18CA96730[v6 - 1];
      if (word_18CAA32E0[v6 - 1] <= 1) {
        int v9 = 1;
      }
      else {
        int v9 = word_18CAA32E0[v6 - 1];
      }
      do
      {
        uint64_t v10 = v8 + 1;
        unsigned int v11 = word_18CAA3344[v8];
        if ((v11 & 0xFC00) == 0xD800)
        {
          v8 += 2;
          unsigned int v11 = word_18CAA3344[v10] + (v11 << 10) - 56613888;
        }
        else
        {
          ++v8;
        }
        icu::UnicodeSet::add(a2, v11);
        --v9;
      }
      while (v9);
    }
    icu::UnicodeSet::closeOver((icu::UVector **)a2, 2);
    return icu::UnicodeSet::removeAllStrings(a2);
  }
  else
  {
    return icu::UnicodeSet::set(a2, v4, v4);
  }
}

icu::UnicodeSet *icu::RegexCompile::createSetForProperty(icu::RegexCompile *this, const icu::UnicodeString *a2, BOOL a3)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (**((int **)this + 1) > 0) {
    return 0;
  }
  uint64_t v90 = 0;
  UErrorCode pErrorCode = U_ZERO_ERROR;
  long long v95 = 0u;
  uint64_t v98 = 0;
  long long v97 = 0u;
  long long v96 = 0u;
  int v94 = &unk_1EDA47700;
  LOWORD(v95) = 2;
  icu::UnicodeString::doAppend((uint64_t)&v94, (uint64_t)&unk_18CAA3416, 0, 0xFFFFFFFFLL);
  v68[3] = (uint64_t)&unk_18CAA3416;
  unsigned int v7 = *((unsigned __int16 *)a2 + 4);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  if (v8 >= 0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = *((unsigned int *)a2 + 3);
  }
  icu::UnicodeString::doAppend((uint64_t)&v94, a2, 0, v10);
  icu::UnicodeString::doAppend((uint64_t)&v94, (uint64_t)L"}]", 0, 0xFFFFFFFFLL);
  v68[2] = (uint64_t)L"}]";
  unsigned int v11 = *((_DWORD *)this + 71) & 2;
  uint64_t v13 = (icu::UnicodeSet *)icu::UMemory::operator new((uint64_t *)*((unsigned int *)this + 71), (icu::UMemory *)0xC8, v12);
  BOOL v14 = v13;
  if (v13) {
    icu::UnicodeSet::UnicodeSet(v13, (const icu::UnicodeString *)&v94, v11, 0, &pErrorCode);
  }
  sub_18C9B7154(&v90, v14, &pErrorCode);
  unint64_t v15 = pErrorCode;
  if (pErrorCode < U_ILLEGAL_ARGUMENT_ERROR || pErrorCode == U_MEMORY_ALLOCATION_ERROR) {
    goto LABEL_89;
  }
  UErrorCode pErrorCode = U_ZERO_ERROR;
  unsigned int v16 = *((unsigned __int16 *)a2 + 4);
  int v17 = (__int16)v16;
  int v18 = v16 >> 5;
  if (v17 >= 0) {
    int v19 = v18;
  }
  else {
    int v19 = *((_DWORD *)a2 + 3);
  }
  v68[1] = (uint64_t)"w";
  if (!icu::UnicodeString::doCaseCompare((uint64_t)a2, 0, v19, (uint64_t)"w", 0, -1, 0))
  {
    int v35 = icu::UnicodeSet::cloneAsThawed((icu::UnicodeSet *)(qword_1EB20BEF0 + 208), v20, (uint64_t *)qword_1EB20BEF0);
LABEL_32:
    sub_18C9B7154(&v90, v35, &pErrorCode);
    goto LABEL_89;
  }
  unsigned int v21 = *((unsigned __int16 *)a2 + 4);
  int v22 = (__int16)v21;
  int32_t v23 = v21 >> 5;
  if (v22 >= 0) {
    int32_t v24 = v23;
  }
  else {
    int32_t v24 = *((_DWORD *)a2 + 3);
  }
  v68[0] = (uint64_t)L"all";
  if (!icu::UnicodeString::doCompare((uint64_t)a2, 0, v24, (uint64_t)L"all", 0, -1))
  {
    int v36 = (icu::UnicodeSet *)icu::UMemory::operator new(v68, (icu::UMemory *)0xC8, v25);
    unsigned int v37 = v36;
    if (v36) {
      icu::UnicodeSet::UnicodeSet(v36, 0, 1114111);
    }
    int v35 = v37;
    goto LABEL_32;
  }
  memset(v93, 0, sizeof(v93));
  int v26 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)v93, (UChar **)a2);
  if (icu::UnicodeString::doEqualsSubstring((uint64_t)v26, 0, 2, (uint64_t)L"In", 0, 2))
  {
    LODWORD(v28) = WORD4(v93[0]) >> 5;
    if ((SWORD4(v93[0]) & 0x8000u) == 0) {
      unint64_t v28 = v28;
    }
    else {
      unint64_t v28 = HIDWORD(v93[0]);
    }
    v67[6] = (uint64_t)L"In";
    if ((int)v28 >= 3)
    {
      UErrorCode pErrorCode = U_ZERO_ERROR;
      long long v29 = (icu::UnicodeSet *)icu::UMemory::operator new((uint64_t *)v28, (icu::UMemory *)0xC8, v27);
      uint64_t v30 = v29;
      if (v29) {
        icu::UnicodeSet::UnicodeSet(v29);
      }
      sub_18C9B7154(&v90, v30, &pErrorCode);
      uint64_t v31 = pErrorCode;
      if (pErrorCode <= U_ZERO_ERROR)
      {
        memset(v91, 0, 64);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v91, (const icu::UnicodeString *)v93, 2);
        int v32 = v90;
        icu::UnicodeString::UnicodeString((uint64_t)v92, (uint64_t)"B");
        icu::UnicodeSet::applyPropertyAlias(v32, (const icu::UnicodeString *)v92, (const icu::UnicodeString *)v91, &pErrorCode);
        icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v92);
        icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v91);
      }
      goto LABEL_88;
    }
  }
  else
  {
    v67[5] = (uint64_t)L"In";
  }
  if (!icu::UnicodeString::doEqualsSubstring((uint64_t)a2, 0, 2, (uint64_t)"I", 0, 2))
  {
    v66[2] = (uint64_t)"I";
    goto LABEL_46;
  }
  unsigned int v38 = *((unsigned __int16 *)a2 + 4);
  int v39 = (__int16)v38;
  int v40 = v38 >> 5;
  if (v39 < 0) {
    int v40 = *((_DWORD *)a2 + 3);
  }
  v67[4] = (uint64_t)"I";
  if (v40 < 3)
  {
LABEL_46:
    v66[1] = (uint64_t)"j";
    int32_t v44 = u_strlen((const UChar *)"j");
    v66[0] = (uint64_t)"j";
    if (!icu::UnicodeString::doEqualsSubstring((uint64_t)a2, 0, v44, (uint64_t)"j", 0, v44)) {
      goto LABEL_68;
    }
    UErrorCode pErrorCode = U_ZERO_ERROR;
    int v46 = (icu::UnicodeSet *)icu::UMemory::operator new(v66, (icu::UMemory *)0xC8, v45);
    int v47 = v46;
    if (v46) {
      icu::UnicodeSet::UnicodeSet(v46);
    }
    sub_18C9B7154(&v90, v47, &pErrorCode);
    uint64_t v31 = pErrorCode;
    if (pErrorCode > U_ZERO_ERROR) {
      goto LABEL_88;
    }
    unsigned int v86 = L"javaDefined";
    if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v86, -1))
    {
      sub_18C9B5A7C((icu::UVector **)v90, 1u, &pErrorCode);
      icu::UnicodeSet::complement(v90);
LABEL_84:
      uint64_t v31 = pErrorCode;
      if (pErrorCode <= U_ZERO_ERROR && !icu::UnicodeSet::isEmpty(v90) && v11) {
        icu::UnicodeSet::closeOver((icu::UVector **)v90, 2);
      }
      goto LABEL_88;
    }
    int v85 = L"javaDigit";
    if (sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v85, -1))
    {
      int v84 = L"javaIdentifierIgnorable";
      if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v84, -1))
      {
LABEL_78:
        sub_18C9B720C(v90, &pErrorCode);
        goto LABEL_84;
      }
      int v83 = L"javaISOControl";
      if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v83, -1))
      {
        int v51 = icu::UnicodeSet::add(v90, 0, 0x1Fu);
        unsigned int v52 = 127;
        unsigned int v53 = 159;
LABEL_75:
        icu::UnicodeSet::add(v51, v52, v53);
        goto LABEL_84;
      }
      int v82 = "j";
      if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v82, -1))
      {
        sub_18C9B5A7C((icu::UVector **)v90, 0x3Eu, &pErrorCode);
        unsigned int v54 = (icu::UVector **)v90;
        unsigned int v55 = 0x2000000;
LABEL_77:
        sub_18C9B5A7C(v54, v55, &pErrorCode);
        sub_18C9B5A7C((icu::UVector **)v90, 0x400000u, &pErrorCode);
        sub_18C9B5A7C((icu::UVector **)v90, 0x200u, &pErrorCode);
        sub_18C9B5A7C((icu::UVector **)v90, 0x400u, &pErrorCode);
        sub_18C9B5A7C((icu::UVector **)v90, 0x100u, &pErrorCode);
        sub_18C9B5A7C((icu::UVector **)v90, 0x40u, &pErrorCode);
        goto LABEL_78;
      }
      unint64_t v81 = L"javaJavaIdentifierStart";
      if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v81, -1))
      {
        sub_18C9B5A7C((icu::UVector **)v90, 0x3Eu, &pErrorCode);
        sub_18C9B5A7C((icu::UVector **)v90, 0x400u, &pErrorCode);
        sub_18C9B5A7C((icu::UVector **)v90, 0x2000000u, &pErrorCode);
        int v56 = (icu::UVector **)v90;
        unsigned int v57 = 0x400000;
        goto LABEL_83;
      }
      uint64_t v80 = L"javaLetter";
      if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v80, -1))
      {
        int v56 = (icu::UVector **)v90;
        unsigned int v57 = 62;
        goto LABEL_83;
      }
      uint64_t v79 = "j";
      if (sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v79, -1))
      {
        long long v78 = "j";
        if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v78, -1))
        {
          int v56 = (icu::UVector **)v90;
          unsigned int v57 = 4;
          goto LABEL_83;
        }
        long long v77 = "j";
        if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v77, -1))
        {
          icu::UnicodeSet::applyIntPropertyValue(v90, 3, 1u, &pErrorCode);
          goto LABEL_84;
        }
        long long v76 = L"javaSpaceChar";
        if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v76, -1))
        {
          int v56 = (icu::UVector **)v90;
          unsigned int v57 = 28672;
          goto LABEL_83;
        }
        double v75 = L"javaSupplementaryCodePoint";
        if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v75, -1))
        {
          int v51 = v90;
          unsigned int v52 = 0x10000;
LABEL_101:
          unsigned int v53 = 1114111;
          goto LABEL_75;
        }
        unint64_t v74 = "j";
        if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v74, -1))
        {
          int v56 = (icu::UVector **)v90;
          unsigned int v57 = 8;
          goto LABEL_83;
        }
        unsigned int v73 = "j";
        if (!sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v73, -1))
        {
          sub_18C9B5A7C((icu::UVector **)v90, 0x3Eu, &pErrorCode);
          int v56 = (icu::UVector **)v90;
          unsigned int v57 = 1024;
          goto LABEL_83;
        }
        int v72 = L"javaUnicodeIdentifierPart";
        if (sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v72, -1))
        {
          int v71 = L"javaUpperCase";
          if (sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v71, -1))
          {
            uint64_t v70 = L"javaValidCodePoint";
            if (sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v70, -1))
            {
              int v69 = "j";
              if (sub_18C7EFDE8((uint64_t)a2, (uint64_t *)&v69, -1)) {
                goto LABEL_68;
              }
              sub_18C9B5A7C((icu::UVector **)v90, 0x7000u, &pErrorCode);
              long long v61 = (icu::UVector **)v90;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v91);
              long long v62 = icu::UnicodeSet::add((icu::UnicodeSet *)v91, 0xA0u);
              long long v63 = icu::UnicodeSet::add(v62, 0x2007u);
              long long v64 = icu::UnicodeSet::add(v63, 0x202Fu);
              icu::UnicodeSet::removeAll(v61, v64);
              icu::UnicodeSet::~UnicodeSet(v65, (icu::UnicodeSet *)v91);
              int v51 = icu::UnicodeSet::add(v90, 9u, 0xDu);
              unsigned int v52 = 28;
              unsigned int v53 = 31;
              goto LABEL_75;
            }
            int v51 = v90;
            unsigned int v52 = 0;
            goto LABEL_101;
          }
          int v56 = (icu::UVector **)v90;
          unsigned int v57 = 2;
LABEL_83:
          sub_18C9B5A7C(v56, v57, &pErrorCode);
          goto LABEL_84;
        }
        unsigned int v54 = (icu::UVector **)v90;
        unsigned int v55 = 62;
        goto LABEL_77;
      }
      sub_18C9B5A7C((icu::UVector **)v90, 0x3Eu, &pErrorCode);
    }
    int v56 = (icu::UVector **)v90;
    unsigned int v57 = 512;
    goto LABEL_83;
  }
  icu::UnicodeString::doReplace((uint64_t)v93, 0, 2, 0, 0, 0);
  if ((SWORD4(v93[0]) & 0x8000u) == 0) {
    int32_t v41 = WORD4(v93[0]) >> 5;
  }
  else {
    int32_t v41 = HIDWORD(v93[0]);
  }
  if ((icu::UnicodeString::doIndexOf((uint64_t)v93, 0x3Du, 0, v41) & 0x80000000) != 0)
  {
    int v88 = L"assigned";
    int v42 = sub_18C9B71DC((uint64_t)v93, (uint64_t *)&v88, -1, 0);
    v67[3] = (uint64_t)v88;
    if (v42)
    {
      uint64_t v87 = L"TitleCase";
      int v43 = sub_18C9B71DC((uint64_t)v93, (uint64_t *)&v87, -1, 0);
      v67[2] = (uint64_t)v87;
      if (!v43) {
        sub_18C9893DC((uint64_t)v93, (uint64_t)L"Titlecase_Letter", 0xFFFFFFFFLL);
      }
    }
    else
    {
      sub_18C9893DC((uint64_t)v93, (uint64_t)"u", 0xFFFFFFFFLL);
      a3 = !a3;
    }
    icu::UnicodeString::doReplace((uint64_t)v93, 0, 0, (uint64_t)&unk_18CAA3416, 0, 0xFFFFFFFFLL);
    v67[1] = (uint64_t)&unk_18CAA3416;
    icu::UnicodeString::doAppend((uint64_t)v93, (uint64_t)L"}]", 0, 0xFFFFFFFFLL);
    v67[0] = (uint64_t)L"}]";
    unsigned int v49 = (icu::UnicodeSet *)icu::UMemory::operator new(v67, (icu::UMemory *)0xC8, v48);
    unsigned int v50 = v49;
    if (v49) {
      icu::UnicodeSet::UnicodeSet(v49, (const icu::UnicodeString *)v93, *((UErrorCode **)this + 1));
    }
    sub_18C9B7154(&v90, v50, &pErrorCode);
    goto LABEL_84;
  }
LABEL_68:
  uint64_t v31 = 66308;
  UErrorCode pErrorCode = U_REGEX_PROPERTY_SYNTAX;
LABEL_88:
  icu::UnicodeString::~UnicodeString((void *)v31, (icu::UnicodeString *)v93);
LABEL_89:
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v94);
  UErrorCode v58 = pErrorCode;
  if (pErrorCode <= U_ZERO_ERROR)
  {
    icu::UnicodeSet::removeAllStrings(v90);
    if (a3) {
      icu::UnicodeSet::complement(v90);
    }
    return v90;
  }
  else
  {
    if (pErrorCode == U_ILLEGAL_ARGUMENT_ERROR)
    {
      UErrorCode v58 = U_REGEX_PROPERTY_SYNTAX;
      UErrorCode pErrorCode = U_REGEX_PROPERTY_SYNTAX;
    }
    icu::RegexCompile::error(this, v58);
    uint64_t result = v90;
    if (v90)
    {
      long long v60 = icu::UnicodeSet::~UnicodeSet(v59, v90);
      icu::UMemory::operator delete(v60);
      return 0;
    }
  }
  return result;
}

void sub_18C9B7154(icu::UnicodeSet **a1, icu::UnicodeSet *this, _DWORD *a3)
{
  unint64_t v4 = *a3;
  if ((int)v4 <= 0)
  {
    int v8 = *a1;
    if (v8)
    {
      unsigned int v9 = icu::UnicodeSet::~UnicodeSet((void *)v4, v8);
      icu::UMemory::operator delete(v9);
    }
    *a1 = this;
    if (!this) {
      *a3 = 7;
    }
  }
  else if (this)
  {
    UChar32 v5 = icu::UnicodeSet::~UnicodeSet((void *)v4, this);
    icu::UMemory::operator delete(v5);
  }
}

uint64_t sub_18C9B71DC(uint64_t a1, uint64_t *a2, int32_t a3, __int16 a4)
{
  if (*(__int16 *)(a1 + 8) < 0) {
    int v5 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v5 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  return icu::UnicodeString::doCaseCompare(a1, 0, v5, *a2, 0, a3, a4);
}

void *sub_18C9B720C(icu::UnicodeSet *a1, UErrorCode *a2)
{
  unint64_t v4 = icu::UnicodeSet::add(a1, 0, 8u);
  int v5 = icu::UnicodeSet::add(v4, 0xEu, 0x1Bu);
  icu::UnicodeSet::add(v5, 0x7Fu, 0x9Fu);
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v9);
  uint64_t v6 = icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v9, 0x2000, 0x10000u, a2);
  icu::UnicodeSet::addAll((icu::UVector **)a1, v6);
  return icu::UnicodeSet::~UnicodeSet(v7, (icu::UnicodeSet *)v9);
}

uint64_t sub_18C9B728C(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_18C9B7298(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    int v4 = *(_DWORD *)(a1 + 20);
  }
  else
  {
    unsigned int v9 = *(UText **)a1;
    uint64_t v10 = *(int *)(*(void *)a1 + 40);
    if ((int)v10 >= *(_DWORD *)(*(void *)a1 + 44) || (unsigned int v11 = v9->chunkContents[v10], v11 >> 11 > 0x1A))
    {
      uint64_t result = utext_next32(v9);
      unsigned int v11 = result;
      if (result == -1) {
        return result;
      }
    }
    else
    {
      v9->int32_t chunkOffset = v10 + 1;
    }
    uint64_t result = ucase_toFullFolding(v11, v3, 0);
    *(_DWORD *)(a1 + 16) = result;
    if (result >= 0x1F)
    {
      if ((result & 0x80000000) != 0)
      {
        uint64_t result = ~result;
        *(_DWORD *)(a1 + 16) = result;
      }
      goto LABEL_16;
    }
    int v4 = 0;
    uint64_t v2 = *v3;
  }
  uint64_t v5 = v4 + 1;
  *(_DWORD *)(a1 + 20) = v5;
  uint64_t result = *(unsigned __int16 *)(v2 + 2 * v4);
  int v7 = *(_DWORD *)(a1 + 16);
  if ((result & 0xFC00) != 0xD800) {
    goto LABEL_7;
  }
  if (v5 != v7)
  {
    int v8 = *(unsigned __int16 *)(v2 + 2 * v5);
    if ((v8 & 0xFC00) == 0xDC00)
    {
      LODWORD(v5) = v4 + 2;
      *(_DWORD *)(a1 + 20) = v4 + 2;
      uint64_t result = (v8 + (result << 10) - 56613888);
    }
LABEL_7:
    if ((int)v5 < v7) {
      return result;
    }
  }
LABEL_16:
  uint64_t *v3 = 0;
  return result;
}

uint64_t sub_18C9B73A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a4;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_18C9B73B8(uint64_t *a1)
{
  uint64_t v3 = a1 + 3;
  uint64_t v2 = a1[3];
  if (v2)
  {
    int v4 = *((_DWORD *)a1 + 9);
  }
  else
  {
    uint64_t v9 = a1[1];
    uint64_t v10 = a1[2];
    if (v9 >= v10) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = *a1;
    uint64_t v12 = v9 + 1;
    a1[1] = v9 + 1;
    unsigned int v13 = *(unsigned __int16 *)(v11 + 2 * v9);
    if ((v13 & 0xFC00) == 0xD800 && v12 != v10)
    {
      int v15 = *(unsigned __int16 *)(v11 + 2 * v12);
      if ((v15 & 0xFC00) == 0xDC00)
      {
        a1[1] = v9 + 2;
        unsigned int v13 = v15 + (v13 << 10) - 56613888;
      }
    }
    uint64_t result = ucase_toFullFolding(v13, v3, 0);
    *((_DWORD *)a1 + 8) = result;
    if (result >= 0x1F)
    {
      if ((result & 0x80000000) != 0)
      {
        uint64_t result = ~result;
        *((_DWORD *)a1 + 8) = result;
      }
      goto LABEL_8;
    }
    int v4 = 0;
    uint64_t v2 = *v3;
  }
  uint64_t v5 = v4 + 1;
  *((_DWORD *)a1 + 9) = v5;
  uint64_t result = *(unsigned __int16 *)(v2 + 2 * v4);
  int v7 = *((_DWORD *)a1 + 8);
  if ((result & 0xFC00) == 0xD800)
  {
    if (v5 == v7)
    {
LABEL_8:
      uint64_t *v3 = 0;
      return result;
    }
    int v8 = *(unsigned __int16 *)(v2 + 2 * v5);
    if ((v8 & 0xFC00) == 0xDC00)
    {
      LODWORD(v5) = v4 + 2;
      *((_DWORD *)a1 + 9) = v4 + 2;
      uint64_t result = (v8 + (result << 10) - 56613888);
    }
  }
  if ((int)v5 >= v7) {
    goto LABEL_8;
  }
  return result;
}

BOOL sub_18C9B74E4(uint64_t a1)
{
  return *(void *)(a1 + 24) != 0;
}

uint64_t sub_18C9B74F4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_18C9B74FC(uint64_t a1, UErrorCode *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v4 = (_OWORD *)(a1 + 2608);
  for (uint64_t i = 8; i != 2608; i += 200)
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + i));
  v4[24] = 0u;
  v4[25] = 0u;
  v4[22] = 0u;
  v4[23] = 0u;
  v4[20] = 0u;
  v4[21] = 0u;
  v4[18] = 0u;
  v4[19] = 0u;
  v4[16] = 0u;
  v4[17] = 0u;
  v4[14] = 0u;
  v4[15] = 0u;
  v4[12] = 0u;
  v4[13] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  for (uint64_t j = 3024; j != 3624; j += 200)
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + j));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 3624));
  *(_OWORD *)(a1 + 3824) = 0u;
  unsigned int v54 = L"acefnrtuUx";
  icu::UnicodeString::UnicodeString(v55, 1, &v54);
  int v7 = icu::UnicodeSet::addAll((icu::UnicodeSet *)(a1 + 3624), (const icu::UnicodeString *)v55);
  icu::UnicodeSet::freeze(v7);
  uint64_t v9 = icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v55);
  unsigned int v53 = "[";
  icu::UnicodeString::UnicodeString(v9, 1, &v53);
  uint64_t v10 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 208), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v10);
  uint64_t v12 = icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v55);
  unsigned int v52 = "[";
  icu::UnicodeString::UnicodeString(v12, 1, &v52);
  unsigned int v13 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 808), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v13);
  int v15 = icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v55);
  int v51 = L"[\\p{Grapheme_Extend}]";
  icu::UnicodeString::UnicodeString(v15, 1, &v51);
  unsigned int v16 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1208), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v16);
  int v18 = icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v55);
  unsigned int v50 = L"[[:Zl:][:Zp:][:Cc:][:Cf:]-[:Grapheme_Extend:]]";
  icu::UnicodeString::UnicodeString(v18, 1, &v50);
  int v19 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1408), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v19);
  unsigned int v21 = icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v55);
  unsigned int v49 = "[";
  icu::UnicodeString::UnicodeString(v21, 1, &v49);
  int v22 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1608), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v22);
  int32_t v24 = icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v55);
  unint64_t v48 = L"[\\p{Hangul_Syllable_Type=V}]";
  icu::UnicodeString::UnicodeString(v24, 1, &v48);
  unint64_t v25 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 2208), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v25);
  unint64_t v27 = icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v55);
  int v47 = "[";
  icu::UnicodeString::UnicodeString(v27, 1, &v47);
  unint64_t v28 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 2408), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v28);
  uint64_t v30 = icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v55);
  int v46 = L"[\\p{Hangul_Syllable_Type=LV}]";
  icu::UnicodeString::UnicodeString(v30, 1, &v46);
  uint64_t v31 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1808), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v31);
  uint64_t v33 = icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v55);
  unint64_t v45 = L"[\\p{Hangul_Syllable_Type=LVT}]";
  icu::UnicodeString::UnicodeString(v33, 1, &v45);
  int v34 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 2008), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v34);
  icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v55);
  icu::UnicodeSet::complement((icu::UnicodeSet *)(a1 + 1008));
  icu::UnicodeSet::remove((icu::UnicodeSet *)(a1 + 1008), 0xAC00u, 0xD7A4u);
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 1408));
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 1608));
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 2208));
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 2408));
  icu::UnicodeSet::freeze((icu::UnicodeSet *)(a1 + 1008));
  for (uint64_t k = 0; k != 13; ++k)
  {
    for (unsigned int m = 0; m != 256; ++m)
    {
      if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 200 * k + 8), m)) {
        *(unsigned char *)(a1 + 32 * k + 2608 + ((unint64_t)m >> 3)) |= 1 << (m & 7);
      }
    }
  }
  icu::UnicodeString::UnicodeString((uint64_t)v55, (uint64_t)"*");
  unsigned int v38 = icu::UnicodeSet::addAll((icu::UnicodeSet *)(a1 + 3424), (const icu::UnicodeString *)v55);
  int v39 = icu::UnicodeSet::complement(v38);
  icu::UnicodeSet::freeze(v39);
  icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v55);
  int32_t v41 = icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 3024), 0x30u, 0x39u);
  icu::UnicodeSet::freeze(v41);
  int v42 = icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 3224), 0x41u, 0x5Au);
  int v43 = icu::UnicodeSet::add(v42, 0x61u, 0x7Au);
  icu::UnicodeSet::freeze(v43);
  *(void *)(a1 + 3824) = a1 + 3024;
  *(void *)(a1 + 3832) = utext_openUChars(0, 0, 0, a2);
  return a1;
}

uint64_t sub_18C9B7A00(uint64_t a1)
{
  *(void *)(a1 + 3824) = 0;
  utext_close(*(UText **)(a1 + 3832));
  icu::UnicodeSet::~UnicodeSet(v2, (icu::UnicodeSet *)(a1 + 3624));
  for (uint64_t i = 3424; i != 2824; i -= 200)
    icu::UnicodeSet::~UnicodeSet(v3, (icu::UnicodeSet *)(a1 + i));
  for (uint64_t j = 2408; j != -192; j -= 200)
    icu::UnicodeSet::~UnicodeSet(v3, (icu::UnicodeSet *)(a1 + j));
  return a1;
}

void sub_18C9B7A68(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1EB20BEF8, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1EB20BEF8))
    {
      if (dword_1EB20BEFC >= 1) {
        *a1 = dword_1EB20BEFC;
      }
    }
    else
    {
      sub_18C9B7B00(a1);
      dword_1EB20BEFC = *a1;
      icu::umtx_initImplPostInit(&dword_1EB20BEF8);
    }
  }
}

void sub_18C9B7B00(UErrorCode *a1)
{
  sub_18CA0A25C(6u, (uint64_t)sub_18C9B7B98);
  int v4 = icu::UMemory::operator new(v3, (icu::UMemory *)0xF00, v2);
  if (v4)
  {
    uint64_t v5 = sub_18C9B74FC((uint64_t)v4, a1);
    qword_1EB20BEF0 = v5;
    if (*(int *)a1 >= 1)
    {
      uint64_t v6 = (void *)sub_18C9B7A00(v5);
      icu::UMemory::operator delete(v6);
      UErrorCode v7 = *a1;
      qword_1EB20BEF0 = 0;
      if (v7 <= U_ZERO_ERROR) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    qword_1EB20BEF0 = 0;
    if (*(int *)a1 < 1) {
LABEL_4:
    }
      *a1 = U_MEMORY_ALLOCATION_ERROR;
  }
}

uint64_t sub_18C9B7B98()
{
  if (qword_1EB20BEF0)
  {
    v0 = (void *)sub_18C9B7A00(qword_1EB20BEF0);
    icu::UMemory::operator delete(v0);
  }
  qword_1EB20BEF0 = 0;
  atomic_store(0, &dword_1EB20BEF8);
  return 1;
}

uint64_t sub_18C9B7BDC(int a1, _DWORD *a2)
{
  int v3 = a2[2];
  int v4 = v3 + 1;
  if (v3 + 1 == a1)
  {
    uint64_t v5 = *(UText **)a2;
    uint64_t v6 = *(int *)(*(void *)a2 + 40);
    if ((int)v6 >= *(_DWORD *)(*(void *)a2 + 44) || (unsigned int v7 = v5->chunkContents[v6], v7 >> 11 > 0x1A))
    {
      unsigned int v7 = utext_next32(v5);
      int v4 = a2[2] + 1;
    }
    else
    {
      v5->int32_t chunkOffset = v6 + 1;
    }
    a2[2] = v4;
  }
  else
  {
    uint64_t v9 = *(UText **)a2;
    if (v3 == a1)
    {
      int32_t chunkOffset = v9->chunkOffset;
      BOOL v11 = __OFSUB__(chunkOffset, 1);
      int v12 = chunkOffset - 1;
      if (v12 < 0 != v11 || (unsigned int v7 = v9->chunkContents[v12], v7 >> 11 > 0x1A))
      {
        unsigned int v7 = utext_previous32(v9);
        uint64_t v9 = *(UText **)a2;
        int v12 = *(_DWORD *)(*(void *)a2 + 40);
      }
      else
      {
        v9->int32_t chunkOffset = v12;
      }
      if (v12 >= v9->chunkLength || v9->chunkContents[v12] >> 11 > 0x1Au) {
        utext_next32(v9);
      }
      else {
        v9->int32_t chunkOffset = v12 + 1;
      }
    }
    else
    {
      utext_moveIndex32(v9, ~v3 + a1);
      unsigned int v13 = *(UText **)a2;
      uint64_t v14 = *(int *)(*(void *)a2 + 40);
      if ((int)v14 >= *(_DWORD *)(*(void *)a2 + 44) || (unsigned int v7 = v13->chunkContents[v14], v7 >> 11 > 0x1A)) {
        unsigned int v7 = utext_next32(v13);
      }
      else {
        v13->int32_t chunkOffset = v14 + 1;
      }
      a2[2] = a1;
    }
  }
  if (v7 >= 0x10000) {
    return 0;
  }
  else {
    return (unsigned __int16)v7;
  }
}

uint64_t sub_18C9B7D38(int a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 2 * a1);
}

void *sub_18C9B7D40()
{
  return &unk_1E91925F8;
}

void icu::Region::loadRegionData(icu::Region *this, UErrorCode *a2)
{
  uint64_t v231 = *MEMORY[0x1E4F143B8];
  int v3 = (uint64_t *)uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)this);
  int v4 = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, (int *)this);
  uint64_t v5 = uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)this);
  int v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v6);
  uint64_t v10 = (icu::UVector *)v8;
  if (v8)
  {
    icu::UVector::UVector((uint64_t)v8, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
  }
  else
  {
    uint64_t v11 = *(unsigned int *)this;
    if ((int)v11 <= 0)
    {
      uint64_t v11 = 7;
      *(_DWORD *)this = 7;
    }
  }
  int v12 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x28, v9);
  uint64_t v14 = (uint64_t (**)(void *))v12;
  if (v12)
  {
    icu::UVector::UVector((uint64_t)v12, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
  }
  else
  {
    uint64_t v15 = *(unsigned int *)this;
    if ((int)v15 <= 0)
    {
      uint64_t v15 = 7;
      *(_DWORD *)this = 7;
    }
  }
  unsigned int v16 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x28, v13);
  if (v16)
  {
    unsigned int v16 = (uint64_t *)icu::UVector::UVector((uint64_t)v16, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
  }
  else if (*(int *)this <= 0)
  {
    *(_DWORD *)this = 7;
  }
  qword_1E9192600 = (uint64_t)v16;
  uint64_t v205 = ures_openDirect(0, (uint64_t)"metadata", (uint64_t)this);
  uint64_t v204 = ures_getByKey(v205, "alias", 0, (int *)this);
  uint64_t v210 = ures_getByKey(v204, "territory", 0, (int *)this);
  uint64_t v17 = ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)this);
  uint64_t v209 = ures_getByKey(v17, "codeMappings", 0, (int *)this);
  uint64_t v207 = ures_getByKey(v17, "idValidity", 0, (int *)this);
  uint64_t v18 = ures_getByKey(v207, "region", 0, (int *)this);
  uint64_t v19 = ures_getByKey(v18, "regular", 0, (int *)this);
  uint64_t v214 = ures_getByKey(v18, "macroregion", 0, (int *)this);
  uint64_t v206 = v18;
  uint64_t v213 = ures_getByKey(v18, "unknown", 0, (int *)this);
  uint64_t v208 = v17;
  uint64_t v20 = ures_getByKey(v17, "territoryContainment", 0, (int *)this);
  uint64_t v215 = ures_getByKey(v20, "001", 0, (int *)this);
  uint64_t v212 = v20;
  uint64_t v211 = ures_getByKey(v20, "grouping", 0, (int *)this);
  sub_18CA0A25C(0x21u, (uint64_t)sub_18C9B9B18);
  if (*(int *)this > 0) {
    goto LABEL_14;
  }
  uint64_t v216 = v19;
  uhash_setValueDeleter((uint64_t)v3, (uint64_t)uprv_deleteUObject);
  uhash_setKeyDeleter((uint64_t)v5, (uint64_t)uprv_deleteUObject);
  if (*(int *)this > 0) {
    goto LABEL_50;
  }
  v202 = v10;
  v203 = (icu::UVector *)v14;
  uint64_t v200 = (uint64_t)v5;
  uint64_t v201 = (uint64_t)v4;
  uint64_t v199 = (uint64_t)v3;
  while (1)
  {
    uint64_t v19 = v216;
    if (!ures_hasNext(v216)) {
      break;
    }
    memset((char *)v230 + 8, 0, 56);
    *(void *)&v230[0] = &unk_1EDA47700;
    WORD4(v230[0]) = 2;
    LODWORD(v228[0]) = 0;
    NextString = ures_getNextString(v216, (int *)v228, 0, (UErrorCode *)this);
    v217[5] = (uint64_t)NextString;
    if (*(int *)this <= 0)
    {
      *(void *)&v229[0] = NextString;
      icu::UnicodeString::setTo((icu::UnicodeString *)v230, 1, (const UChar **)v229, v228[0]);
      v217[4] = *(void *)&v229[0];
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v230);
    }
    if ((SWORD4(v230[0]) & 0x8000u) == 0) {
      int32_t v24 = WORD4(v230[0]) >> 5;
    }
    else {
      int32_t v24 = HIDWORD(v230[0]);
    }
    int v25 = icu::UnicodeString::doIndexOf((uint64_t)v230, 0x7Eu, 0, v24);
    DWORD2(v229[0]) = 0;
    *(void *)&v229[0] = 0;
    v219 = (UChar *)v229;
    icu::UnicodeString::extract((uint64_t)v230, &v219, 6, (int *)this);
    v217[3] = (uint64_t)v219;
    uint64_t v27 = (v25 - 1);
    if (v25 < 1)
    {
      int v32 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v219, (icu::UMemory *)0x40, v26);
      uint64_t v33 = v32;
      if (v32)
      {
        icu::UnicodeString::UnicodeString(v32, (UChar **)v230);
      }
      else if (*(int *)this <= 0)
      {
        *(_DWORD *)this = 7;
      }
      icu::UVector::adoptElement((uint64_t (**)(void *))qword_1E9192600, v33, (UErrorCode *)this);
    }
    else
    {
      unsigned int v28 = v25 + 1;
      if ((SWORD4(v230[0]) & 0x8000u) == 0) {
        unsigned int v29 = WORD4(v230[0]) >> 5;
      }
      else {
        unsigned int v29 = HIDWORD(v230[0]);
      }
      if (v29 <= v28)
      {
        unsigned int v31 = 0xFFFF;
      }
      else
      {
        uint64_t v30 = (char *)v230 + 10;
        if ((BYTE8(v230[0]) & 2) == 0) {
          uint64_t v30 = (char *)*((void *)&v230[1] + 1);
        }
        unsigned int v31 = *(unsigned __int16 *)&v30[2 * v28];
      }
      *((_WORD *)v229 + v25) = 0;
      int v34 = (uint64_t *)*(unsigned int *)this;
      if ((int)v34 <= 0)
      {
        int v34 = (uint64_t *)*((unsigned __int16 *)v229 + v27);
        do
        {
          if (v31 < (unsigned __int16)v34) {
            break;
          }
          int v35 = icu::UMemory::operator new(v34, (icu::UMemory *)0x40, v26);
          int v36 = v35;
          if (v35)
          {
            icu::UnicodeString::UnicodeString((uint64_t)v35, (uint64_t)v229);
          }
          else if (*(int *)this <= 0)
          {
            *(_DWORD *)this = 7;
          }
          icu::UVector::adoptElement((uint64_t (**)(void *))qword_1E9192600, v36, (UErrorCode *)this);
          int v34 = (uint64_t *)((unsigned __int16)(*((_WORD *)v229 + v27))++ + 1);
        }
        while (*(int *)this <= 0);
      }
    }
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v230);
    if (*(int *)this > 0) {
      goto LABEL_48;
    }
  }
  if (*(int *)this > 0) {
    goto LABEL_14;
  }
  while (ures_hasNext(v214))
  {
    memset((char *)v230 + 8, 0, 56);
    *(void *)&v230[0] = &unk_1EDA47700;
    WORD4(v230[0]) = 2;
    LODWORD(v228[0]) = 0;
    unsigned int v38 = ures_getNextString(v214, (int *)v228, 0, (UErrorCode *)this);
    v217[2] = (uint64_t)v38;
    if (*(int *)this <= 0)
    {
      *(void *)&v229[0] = v38;
      icu::UnicodeString::setTo((icu::UnicodeString *)v230, 1, (const UChar **)v229, v228[0]);
      v217[1] = *(void *)&v229[0];
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v230);
    }
    if ((SWORD4(v230[0]) & 0x8000u) == 0) {
      int32_t v39 = WORD4(v230[0]) >> 5;
    }
    else {
      int32_t v39 = HIDWORD(v230[0]);
    }
    int v40 = icu::UnicodeString::doIndexOf((uint64_t)v230, 0x7Eu, 0, v39);
    DWORD2(v229[0]) = 0;
    *(void *)&v229[0] = 0;
    v218 = (UChar *)v229;
    icu::UnicodeString::extract((uint64_t)v230, &v218, 6, (int *)this);
    v217[0] = (uint64_t)v218;
    uint64_t v42 = (v40 - 1);
    if (v40 < 1)
    {
      int v47 = (icu::UnicodeString *)icu::UMemory::operator new(v217, (icu::UMemory *)0x40, v41);
      unint64_t v48 = v47;
      if (v47)
      {
        icu::UnicodeString::UnicodeString(v47, (UChar **)v230);
      }
      else if (*(int *)this <= 0)
      {
        *(_DWORD *)this = 7;
      }
      icu::UVector::adoptElement((uint64_t (**)(void *))qword_1E9192600, v48, (UErrorCode *)this);
    }
    else
    {
      unsigned int v43 = v40 + 1;
      if ((SWORD4(v230[0]) & 0x8000u) == 0) {
        unsigned int v44 = WORD4(v230[0]) >> 5;
      }
      else {
        unsigned int v44 = HIDWORD(v230[0]);
      }
      if (v44 <= v43)
      {
        unsigned int v46 = 0xFFFF;
      }
      else
      {
        unint64_t v45 = (char *)v230 + 10;
        if ((BYTE8(v230[0]) & 2) == 0) {
          unint64_t v45 = (char *)*((void *)&v230[1] + 1);
        }
        unsigned int v46 = *(unsigned __int16 *)&v45[2 * v43];
      }
      *((_WORD *)v229 + v40) = 0;
      for (uint64_t i = (uint64_t *)*((unsigned __int16 *)v229 + v42);
            v46 >= (unsigned __int16)i && *(_DWORD *)this <= 0;
            uint64_t i = (uint64_t *)((unsigned __int16)(*((_WORD *)v229 + v42))++ + 1))
      {
        int v51 = icu::UMemory::operator new(i, (icu::UMemory *)0x40, v41);
        unsigned int v52 = v51;
        if (v51)
        {
          icu::UnicodeString::UnicodeString((uint64_t)v51, (uint64_t)v229);
        }
        else if (*(int *)this <= 0)
        {
          *(_DWORD *)this = 7;
        }
        icu::UVector::adoptElement((uint64_t (**)(void *))qword_1E9192600, v52, (UErrorCode *)this);
      }
    }
    icu::UnicodeString::~UnicodeString(i, (icu::UnicodeString *)v230);
    uint64_t v10 = v202;
    uint64_t v14 = (uint64_t (**)(void *))v203;
    uint64_t v19 = v216;
    if (*(int *)this > 0) {
      goto LABEL_14;
    }
  }
  if (*(int *)this > 0) {
    goto LABEL_14;
  }
  while (ures_hasNext(v213))
  {
    uint64_t v56 = (icu::UnicodeString *)icu::UMemory::operator new(v55, (icu::UMemory *)0x40, v54);
    if (v56)
    {
      memset((char *)v230 + 8, 0, 56);
      *(void *)&v230[0] = &unk_1EDA47700;
      WORD4(v230[0]) = 2;
      LODWORD(v228[0]) = 0;
      unsigned int v57 = ures_getNextString(v213, (int *)v228, 0, (UErrorCode *)this);
      if (*(int *)this <= 0)
      {
        *(void *)&v229[0] = v57;
        icu::UnicodeString::setTo((icu::UnicodeString *)v230, 1, (const UChar **)v229, v228[0]);
      }
      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)v230);
      }
      icu::UnicodeString::UnicodeString(v56, (const icu::UnicodeString *)v230, *(_DWORD *)this);
      icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)v230);
    }
    icu::UVector::adoptElement((uint64_t (**)(void *))qword_1E9192600, v56, (UErrorCode *)this);
    if (*(int *)this > 0) {
      goto LABEL_49;
    }
  }
  if (*(int *)this > 0) {
    goto LABEL_49;
  }
  uint64_t v10 = v202;
  uint64_t v14 = (uint64_t (**)(void *))v203;
  uint64_t v37 = v215;
  while (ures_hasNext(v37))
  {
    long long v61 = icu::UMemory::operator new(v60, (icu::UMemory *)0x40, v59);
    long long v62 = (icu::UnicodeString *)v61;
    if (v61)
    {
      *(_OWORD *)(v61 + 1) = 0u;
      v61[7] = 0;
      *(_OWORD *)(v61 + 5) = 0u;
      *(_OWORD *)(v61 + 3) = 0u;
      *long long v61 = (uint64_t)&unk_1EDA47700;
      *((_WORD *)v61 + 4) = 2;
      LODWORD(v229[0]) = 0;
      long long v63 = ures_getNextString(v215, (int *)v229, 0, (UErrorCode *)this);
      if (*(int *)this <= 0)
      {
        *(void *)&v230[0] = v63;
        icu::UnicodeString::setTo(v62, 1, (const UChar **)v230, v229[0]);
      }
      else
      {
        icu::UnicodeString::setToBogus(v62);
      }
    }
    icu::UVector::adoptElement((uint64_t (**)(void *))v202, v62, (UErrorCode *)this);
    uint64_t v37 = v215;
    if (*(int *)this > 0)
    {
      uint64_t v22 = v204;
      uint64_t v21 = v205;
      uint64_t v19 = v216;
      goto LABEL_52;
    }
  }
  uint64_t v19 = v216;
  if (*(int *)this > 0)
  {
LABEL_14:
    uint64_t v22 = v204;
    uint64_t v21 = v205;
    goto LABEL_51;
  }
  long long v64 = (uint64_t *)*(unsigned int *)(qword_1E9192600 + 8);
  if ((int)v64 < 1) {
    goto LABEL_159;
  }
  signed int v65 = 0;
  do
  {
    long long v66 = icu::UMemory::operator new(v64, (icu::UMemory *)0x70, v59);
    if (!v66)
    {
      if (*(int *)this <= 0) {
        *(_DWORD *)this = 7;
      }
      goto LABEL_48;
    }
    *long long v66 = (uint64_t)&unk_1EDA51B30;
    long long v67 = (UChar **)(v66 + 2);
    v66[2] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v66 + 12) = 2;
    *(uint64_t *)((char *)v66 + 84) = 0;
    int v68 = (_DWORD *)v66 + 21;
    *((unsigned char *)v66 + 8) = 0;
    int v69 = (char *)(v66 + 1);
    *((_DWORD *)v66 + 20) = -1;
    *(uint64_t *)((char *)v66 + 100) = 0;
    *(uint64_t *)((char *)v66 + 92) = 0;
    *((_DWORD *)v66 + 27) = 0;
    uint64_t v70 = (uint64_t)v66;
    if (*(int *)this > 0)
    {
      (*(void (**)(uint64_t *))(*v66 + 8))(v66);
      goto LABEL_49;
    }
    int v71 = (UChar **)icu::UVector::elementAt((icu::UVector *)qword_1E9192600, v65);
    icu::UnicodeString::operator=(v67, v71);
    unsigned int v72 = *(unsigned __int16 *)(v70 + 24);
    if ((v72 & 0x8000) != 0) {
      uint64_t v73 = *(unsigned int *)(v70 + 28);
    }
    else {
      uint64_t v73 = v72 >> 5;
    }
    icu::UnicodeString::extract((uint64_t)v67, 0, v73, v69, 4);
    *int v68 = 1;
    LODWORD(v230[0]) = 0;
    unsigned int v75 = icu::ICU_Utility::parseAsciiInteger((icu::ICU_Utility *)v67, (const icu::UnicodeString *)v230, v74);
    if (SLODWORD(v230[0]) < 1)
    {
      uint64_t v76 = v70;
      *(_DWORD *)(v70 + 80) = -1;
    }
    else
    {
      *(_DWORD *)(v70 + 80) = v75;
      uhash_iput((uint64_t)v4, v75, v70, (int *)this);
      uint64_t v76 = v70;
      *(_DWORD *)(v70 + 84) = 4;
    }
    uint64_t v14 = (uint64_t (**)(void *))v203;
    uhash_put((uint64_t)v3, (uint64_t)v67, v76, (int *)this);
    long long v64 = (uint64_t *)*(unsigned int *)(qword_1E9192600 + 8);
    ++v65;
  }
  while (v65 < (int)v64);
  uint64_t v5 = (int32x2_t *)v200;
  if (*(int *)this <= 0)
  {
LABEL_159:
    NextResource = 0;
    do
    {
      if (!ures_hasNext(v211)) {
        break;
      }
      NextResource = ures_getNextResource(v211, (uint64_t)NextResource, (UErrorCode *)this);
      uint64_t v79 = (uint64_t *)*(unsigned int *)this;
      if ((int)v79 > 0) {
        break;
      }
      uint64_t v80 = icu::UMemory::operator new(v79, (icu::UMemory *)0x40, v78);
      if (v80)
      {
        uint64_t Key = ures_getKey((uint64_t)NextResource);
        icu::UnicodeString::UnicodeString(v80, Key, 0xFFFFFFFFLL, 0);
      }
      else if (*(int *)this <= 0)
      {
        *(_DWORD *)this = 7;
      }
      icu::UVector::adoptElement(v14, v80, (UErrorCode *)this);
      if (*(int *)this > 0)
      {
        uint64_t v5 = (int32x2_t *)v200;
        break;
      }
      uint64_t v82 = uhash_get((uint64_t)v3, (uint64_t)v80);
      if (!v82) {
        goto LABEL_190;
      }
      uint64_t v83 = v82;
      int Size = ures_getSize((uint64_t)NextResource);
      int v85 = *(_DWORD *)this;
      if (Size >= 1 && v85 <= 0)
      {
        int v86 = 1;
        while (1)
        {
          memset((char *)v230 + 8, 0, 56);
          *(void *)&v230[0] = &unk_1EDA47700;
          WORD4(v230[0]) = 2;
          LODWORD(v228[0]) = 0;
          StringByIndex = ures_getStringByIndex((uint64_t)NextResource, v86 - 1, (int *)v228, (UErrorCode *)this);
          if (*(int *)this <= 0)
          {
            *(void *)&v229[0] = StringByIndex;
            icu::UnicodeString::setTo((icu::UnicodeString *)v230, 1, (const UChar **)v229, v228[0]);
          }
          else
          {
            icu::UnicodeString::setToBogus((icu::UnicodeString *)v230);
          }
          unint64_t v89 = (void *)*(unsigned int *)this;
          if ((int)v89 <= 0)
          {
            uint64_t v90 = *(void *)(v83 + 96);
            if (!v90)
            {
              uint64_t v91 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, v88);
              if (!v91)
              {
                uint64_t v90 = *(unsigned int *)this;
                if ((int)v90 <= 0)
                {
                  uint64_t v90 = 7;
                  *(_DWORD *)this = 7;
                }
                *(void *)(v83 + 96) = 0;
                int v3 = (uint64_t *)v199;
                uint64_t v14 = (uint64_t (**)(void *))v203;
LABEL_189:
                icu::UnicodeString::~UnicodeString((void *)v90, (icu::UnicodeString *)v230);
LABEL_190:
                int v85 = *(_DWORD *)this;
                break;
              }
              uint64_t v92 = icu::UVector::UVector((uint64_t)v91, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
              uint64_t v90 = *(unsigned int *)this;
              *(void *)(v83 + 96) = v92;
              if ((int)v90 > 0) {
                goto LABEL_189;
              }
            }
            int v93 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v90, (icu::UMemory *)0x40, v88);
            int v94 = v93;
            if (v93)
            {
              icu::UnicodeString::UnicodeString(v93, (UChar **)v230);
            }
            else if (*(int *)this <= 0)
            {
              *(_DWORD *)this = 7;
            }
            icu::UVector::adoptElement(*(uint64_t (***)(void *))(v83 + 96), v94, (UErrorCode *)this);
          }
          icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v230);
          int v95 = ures_getSize((uint64_t)NextResource);
          int v85 = *(_DWORD *)this;
          if (v86 < v95)
          {
            ++v86;
            if (v85 <= 0) {
              continue;
            }
          }
          break;
        }
      }
      uint64_t v5 = (int32x2_t *)v200;
    }
    while (v85 < 1);
  }
  else
  {
    NextResource = 0;
  }
  ures_close((uint64_t)NextResource);
  if (*(int *)this > 0) {
    goto LABEL_198;
  }
  while (ures_hasNext(v210))
  {
    uint64_t v132 = ures_getNextResource(v210, 0, (UErrorCode *)this);
    uint64_t v133 = ures_getKey((uint64_t)v132);
    int v136 = icu::UMemory::operator new(v135, (icu::UMemory *)0x40, v134);
    if (v136)
    {
      int v137 = (UChar **)v136;
      icu::UnicodeString::UnicodeString(v136, v133, 0xFFFFFFFFLL, 0);
    }
    else
    {
      int v137 = 0;
      if (*(int *)this <= 0) {
        *(_DWORD *)this = 7;
      }
    }
    memset((char *)v230 + 8, 0, 56);
    *(void *)&v230[0] = &unk_1EDA47700;
    WORD4(v230[0]) = 2;
    LODWORD(v228[0]) = 0;
    StringByuint64_t Key = ures_getStringByKey((uint64_t)v132, "replacement", (int *)v228, (int *)this);
    if (*(int *)this <= 0)
    {
      *(void *)&v229[0] = StringByKey;
      icu::UnicodeString::setTo((icu::UnicodeString *)v230, 1, (const UChar **)v229, v228[0]);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v230);
    }
    if (v132) {
      ures_close((uint64_t)v132);
    }
    uint64_t v139 = uhash_get((uint64_t)v3, (uint64_t)v230);
    uint64_t v140 = uhash_get((uint64_t)v3, (uint64_t)v137);
    if (!v139 || v140)
    {
      if (v140)
      {
        uint64_t v144 = v140;
        *(_DWORD *)(v140 + 84) = 6;
        goto LABEL_286;
      }
      uint64_t v145 = icu::UMemory::operator new(v142, (icu::UMemory *)0x70, v141);
      if (v145)
      {
        *uint64_t v145 = (uint64_t)&unk_1EDA51B30;
        signed int v146 = (icu::ICU_Utility *)(v145 + 2);
        v145[2] = (uint64_t)&unk_1EDA47700;
        *((_WORD *)v145 + 12) = 2;
        *(uint64_t *)((char *)v145 + 84) = 0;
        uint64_t v147 = (_DWORD *)v145 + 21;
        *((unsigned char *)v145 + 8) = 0;
        int v148 = (char *)(v145 + 1);
        *((_DWORD *)v145 + 20) = -1;
        *(uint64_t *)((char *)v145 + 100) = 0;
        *(uint64_t *)((char *)v145 + 92) = 0;
        *((_DWORD *)v145 + 27) = 0;
        uint64_t v149 = (uint64_t)v145;
        if (*(int *)this > 0)
        {
          (*(void (**)(uint64_t *))(*v145 + 8))(v145);
        }
        else
        {
          icu::UnicodeString::copyFrom((UChar **)v145 + 2, v137, 0);
          uint64_t v144 = v149;
          unsigned int v150 = *(unsigned __int16 *)(v149 + 24);
          if ((v150 & 0x8000) != 0) {
            uint64_t v151 = *(unsigned int *)(v149 + 28);
          }
          else {
            uint64_t v151 = v150 >> 5;
          }
          icu::UnicodeString::extract((uint64_t)v146, 0, v151, v148, 4);
          uhash_put(v199, (uint64_t)v146, v149, (int *)this);
          LODWORD(v229[0]) = 0;
          unsigned int v153 = icu::ICU_Utility::parseAsciiInteger(v146, (const icu::UnicodeString *)v229, v152);
          if (SLODWORD(v229[0]) < 1)
          {
            *(_DWORD *)(v149 + 80) = -1;
          }
          else
          {
            *(_DWORD *)(v149 + 80) = v153;
            uhash_iput(v201, v153, v149, (int *)this);
          }
          *uint64_t v147 = 6;
          int v3 = (uint64_t *)v199;
LABEL_286:
          v154 = icu::UMemory::operator new((uint64_t *)6, (icu::UMemory *)0x28, v141);
          if (v154)
          {
            uint64_t v155 = icu::UVector::UVector((uint64_t)v154, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
            uint64_t v156 = *(unsigned int *)this;
            *(void *)(v144 + 104) = v155;
            if ((int)v156 > 0) {
              goto LABEL_368;
            }
            memset((char *)v229 + 8, 0, 56);
            *(void *)&v229[0] = &unk_1EDA47700;
            WORD4(v229[0]) = 2;
            v157 = (void *)WORD4(v230[0]);
            BOOL v158 = SWORD4(v230[0]) < 0;
            int v159 = WORD4(v230[0]) >> 5;
            unsigned int v160 = HIDWORD(v230[0]);
            if (SWORD4(v230[0]) < 0) {
              int v159 = HIDWORD(v230[0]);
            }
            if (v159 < 1 || *(int *)this > 0)
            {
LABEL_329:
              icu::UnicodeString::~UnicodeString(v157, (icu::UnicodeString *)v229);
              icu::UnicodeString::~UnicodeString(v179, (icu::UnicodeString *)v230);
              uint64_t v5 = (int32x2_t *)v200;
              if (v137) {
                (*((void (**)(UChar **))*v137 + 1))(v137);
              }
              goto LABEL_331;
            }
            unint64_t v161 = 0;
            while (2)
            {
              unsigned int v162 = v157 >> 5;
              if (v158) {
                unint64_t v163 = v160;
              }
              else {
                unint64_t v163 = v162;
              }
              if (v161 >= v163)
              {
                LOWORD(v165) = -1;
              }
              else
              {
                long long v164 = (char *)*((void *)&v230[1] + 1);
                if ((v157 & 2) != 0) {
                  long long v164 = (char *)v230 + 10;
                }
                int v165 = *(unsigned __int16 *)&v164[2 * v161];
                if (v165 == 32)
                {
LABEL_303:
                  if ((__int16)v157 >= 0) {
                    unint64_t v166 = v162;
                  }
                  else {
                    unint64_t v166 = v160;
                  }
                  if (v161 >= v166)
                  {
                    uint64_t v169 = v161 + 1;
                    if (v161 + 1 != v166) {
                      goto LABEL_325;
                    }
                  }
                  else
                  {
                    int v167 = (char *)*((void *)&v230[1] + 1);
                    if ((v157 & 2) != 0) {
                      int v167 = (char *)v230 + 10;
                    }
                    int v168 = *(unsigned __int16 *)&v167[2 * v161];
                    uint64_t v169 = v161 + 1;
                    if (v168 != 32 && v169 != v166)
                    {
LABEL_325:
                      BOOL v158 = (__int16)v157 < 0;
                      signed int v178 = v157 >> 5;
                      if ((__int16)v157 < 0) {
                        signed int v178 = v160;
                      }
                      if (v169 >= v178) {
                        goto LABEL_329;
                      }
                      unint64_t v161 = v169;
                      if (*(int *)this >= 1) {
                        goto LABEL_329;
                      }
                      continue;
                    }
                  }
                  uint64_t v171 = uhash_get((uint64_t)v3, (uint64_t)v229);
                  if (v171)
                  {
                    uint64_t v174 = v171;
                    v175 = (icu::UnicodeString *)icu::UMemory::operator new(v173, (icu::UMemory *)0x40, v172);
                    int v176 = v175;
                    if (v175)
                    {
                      icu::UnicodeString::UnicodeString(v175, (UChar **)(v174 + 16));
                    }
                    else if (*(int *)this <= 0)
                    {
                      *(_DWORD *)this = 7;
                    }
                    icu::UVector::adoptElement(*(uint64_t (***)(void *))(v144 + 104), v176, (UErrorCode *)this);
                  }
                  if (BYTE8(v229[0])) {
                    __int16 v177 = 2;
                  }
                  else {
                    __int16 v177 = BYTE8(v229[0]) & 0x1F;
                  }
                  WORD4(v229[0]) = v177;
                  v157 = (void *)WORD4(v230[0]);
                  unsigned int v160 = HIDWORD(v230[0]);
                  uint64_t v169 = v161 + 1;
                  goto LABEL_325;
                }
              }
              break;
            }
            LOWORD(v228[0]) = v165;
            icu::UnicodeString::doAppend((uint64_t)v229, (uint64_t)v228, 0, 1);
            v157 = (void *)WORD4(v230[0]);
            unsigned int v160 = HIDWORD(v230[0]);
            unsigned int v162 = WORD4(v230[0]) >> 5;
            goto LABEL_303;
          }
          uint64_t v156 = *(unsigned int *)this;
          if ((int)v156 <= 0)
          {
            uint64_t v156 = 7;
            *(_DWORD *)this = 7;
          }
          *(void *)(v144 + 104) = 0;
        }
      }
      else
      {
        uint64_t v156 = *(unsigned int *)this;
        if ((int)v156 <= 0)
        {
          uint64_t v156 = 7;
          *(_DWORD *)this = 7;
        }
      }
LABEL_368:
      icu::UnicodeString::~UnicodeString((void *)v156, (icu::UnicodeString *)v230);
      if (v137) {
        (*((void (**)(UChar **))*v137 + 1))(v137);
      }
      goto LABEL_48;
    }
    uhash_put((uint64_t)v5, (uint64_t)v137, v139, (int *)this);
    icu::UnicodeString::~UnicodeString(v143, (icu::UnicodeString *)v230);
LABEL_331:
    if (*(int *)this > 0) {
      goto LABEL_198;
    }
  }
  if (*(int *)this <= 0)
  {
    do
    {
      if (!ures_hasNext(v209)) {
        break;
      }
      long long v182 = ures_getNextResource(v209, 0, (UErrorCode *)this);
      uint64_t v183 = (uint64_t)v182;
      if (*(int *)this <= 0 && ures_getType((uint64_t)v182) == 8 && ures_getSize(v183) == 3)
      {
        memset((char *)v230 + 8, 0, 56);
        *(void *)&v230[0] = &unk_1EDA47700;
        WORD4(v230[0]) = 2;
        LODWORD(v228[0]) = 0;
        uint64_t v184 = v183;
        long long v185 = ures_getStringByIndex(v183, 0, (int *)v228, (UErrorCode *)this);
        if (*(int *)this <= 0)
        {
          *(void *)&v229[0] = v185;
          icu::UnicodeString::setTo((icu::UnicodeString *)v230, 1, (const UChar **)v229, v228[0]);
        }
        else
        {
          icu::UnicodeString::setToBogus((icu::UnicodeString *)v230);
        }
        memset((char *)v229 + 8, 0, 56);
        *(void *)&v229[0] = &unk_1EDA47700;
        WORD4(v229[0]) = 2;
        LODWORD(v227[0]) = 0;
        long long v186 = ures_getStringByIndex(v183, 1, (int *)v227, (UErrorCode *)this);
        if (*(int *)this <= 0)
        {
          *(void *)&v228[0] = v186;
          icu::UnicodeString::setTo((icu::UnicodeString *)v229, 1, (const UChar **)v228, v227[0]);
        }
        else
        {
          icu::UnicodeString::setToBogus((icu::UnicodeString *)v229);
        }
        memset((char *)v228 + 8, 0, 56);
        *(void *)&v228[0] = &unk_1EDA47700;
        WORD4(v228[0]) = 2;
        LODWORD(v222) = 0;
        long long v187 = ures_getStringByIndex(v183, 2, (int *)&v222, (UErrorCode *)this);
        if (*(int *)this <= 0)
        {
          *(void *)&v227[0] = v187;
          icu::UnicodeString::setTo((icu::UnicodeString *)v228, 1, (const UChar **)v227, (int)v222);
        }
        else
        {
          icu::UnicodeString::setToBogus((icu::UnicodeString *)v228);
        }
        uint64_t v188 = uhash_get(v199, (uint64_t)v230);
        if (v188)
        {
          uint64_t v191 = v188;
          LODWORD(v227[0]) = 0;
          unsigned int v192 = icu::ICU_Utility::parseAsciiInteger((icu::ICU_Utility *)v229, (const icu::UnicodeString *)v227, v189);
          v194 = (uint64_t *)LODWORD(v227[0]);
          if (SLODWORD(v227[0]) >= 1)
          {
            *(_DWORD *)(v191 + 80) = v192;
            uhash_iput(v201, v192, v191, (int *)this);
          }
          v195 = (icu::UnicodeString *)icu::UMemory::operator new(v194, (icu::UMemory *)0x40, v193);
          uint64_t v196 = (uint64_t)v195;
          if (v195)
          {
            icu::UnicodeString::UnicodeString(v195, (UChar **)v228);
          }
          else if (*(int *)this <= 0)
          {
            *(_DWORD *)this = 7;
          }
          uhash_put(v200, v196, v191, (int *)this);
        }
        icu::UnicodeString::~UnicodeString(v190, (icu::UnicodeString *)v228);
        icu::UnicodeString::~UnicodeString(v197, (icu::UnicodeString *)v229);
        icu::UnicodeString::~UnicodeString(v198, (icu::UnicodeString *)v230);
        int v3 = (uint64_t *)v199;
        uint64_t v183 = v184;
      }
      ures_close(v183);
    }
    while (*(int *)this < 1);
  }
LABEL_198:
  memset(v230, 0, sizeof(v230));
  icu::UnicodeString::UnicodeString((uint64_t)v230, (uint64_t)"0");
  uint64_t v96 = uhash_get((uint64_t)v3, (uint64_t)v230);
  if (v96) {
    *(_DWORD *)(v96 + 84) = 2;
  }
  memset(v229, 0, sizeof(v229));
  icu::UnicodeString::UnicodeString((uint64_t)v229, (uint64_t)"Z");
  uint64_t v97 = uhash_get((uint64_t)v3, (uint64_t)v229);
  if (v97) {
    *(_DWORD *)(v97 + 84) = 0;
  }
  if (*((int *)v202 + 2) >= 1)
  {
    signed int v98 = 0;
    do
    {
      uint64_t v99 = icu::UVector::elementAt(v202, v98);
      uint64_t v100 = uhash_get((uint64_t)v3, v99);
      if (v100) {
        *(_DWORD *)(v100 + 84) = 3;
      }
      ++v98;
    }
    while (v98 < *((_DWORD *)v202 + 2));
  }
  if (*((int *)v203 + 2) >= 1)
  {
    signed int v101 = 0;
    do
    {
      uint64_t v102 = icu::UVector::elementAt(v203, v101);
      uint64_t v103 = uhash_get((uint64_t)v3, v102);
      if (v103) {
        *(_DWORD *)(v103 + 84) = 5;
      }
      ++v101;
    }
    while (v101 < *((_DWORD *)v203 + 2));
  }
  memset(v228, 0, sizeof(v228));
  icu::UnicodeString::UnicodeString((uint64_t)v228, (uint64_t)L"QO");
  uint64_t v104 = uhash_get((uint64_t)v3, (uint64_t)v228);
  if (v104) {
    *(_DWORD *)(v104 + 84) = 4;
  }
  uint64_t v105 = v212;
  if (!ures_hasNext(v212)) {
    goto LABEL_251;
  }
  while (2)
  {
    int v106 = ures_getNextResource(v105, 0, (UErrorCode *)this);
    uint64_t v107 = (uint64_t)v106;
    uint64_t v108 = *(unsigned int *)this;
    if ((int)v108 > 0)
    {
      int v109 = 1;
      goto LABEL_246;
    }
    uint64_t v110 = (uint64_t)v106;
    unsigned int v111 = (const char *)ures_getKey((uint64_t)v106);
    if (!strcmp(v111, "containedGroupings") || !strcmp(v111, "deprecated"))
    {
      int v109 = 35;
      uint64_t v107 = v110;
      goto LABEL_246;
    }
    memset(v227, 0, sizeof(v227));
    icu::UnicodeString::UnicodeString(v227, v111, 0xFFFFFFFFLL, 0);
    uint64_t v112 = uhash_get((uint64_t)v3, (uint64_t)v227);
    uint64_t v107 = v110;
    if ((int)ures_getSize(v110) < 1)
    {
LABEL_235:
      int v109 = 0;
      goto LABEL_245;
    }
    signed int v114 = 0;
    while (1)
    {
      uint64_t v226 = 0;
      long long v224 = 0u;
      long long v225 = 0u;
      long long v223 = 0u;
      v222 = &unk_1EDA47700;
      LOWORD(v223) = 2;
      int v221 = 0;
      int v115 = ures_getStringByIndex(v107, v114, &v221, (UErrorCode *)this);
      if (*(int *)this <= 0)
      {
        v220 = v115;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v222, 1, &v220, v221);
      }
      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v222);
      }
      uint64_t v116 = uhash_get((uint64_t)v3, (uint64_t)&v222);
      if (!v112 || !v116) {
        goto LABEL_234;
      }
      uint64_t v119 = v116;
      uint64_t v120 = *(void *)(v112 + 96);
      if (!v120)
      {
        int v121 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, v117);
        if (!v121)
        {
          uint64_t v120 = *(unsigned int *)this;
          if ((int)v120 <= 0)
          {
            uint64_t v120 = 7;
            *(_DWORD *)this = 7;
          }
          *(void *)(v112 + 96) = 0;
          int v3 = (uint64_t *)v199;
          goto LABEL_243;
        }
        uint64_t v122 = icu::UVector::UVector((uint64_t)v121, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
        uint64_t v120 = *(unsigned int *)this;
        *(void *)(v112 + 96) = v122;
        if ((int)v120 > 0) {
          goto LABEL_244;
        }
      }
      uint64_t v123 = (UChar **)icu::UMemory::operator new((uint64_t *)v120, (icu::UMemory *)0x40, v117);
      if (!v123) {
        break;
      }
      int v124 = v123;
      *uint64_t v123 = (UChar *)&unk_1EDA47700;
      *((_WORD *)v123 + 4) = 2;
      if (*(int *)this > 0)
      {
        (*((void (**)(UChar **))*v123 + 1))(v123);
LABEL_243:
        uint64_t v107 = v110;
        goto LABEL_244;
      }
      icu::UnicodeString::fastCopyFrom(v123, (UChar **)(v119 + 16));
      icu::UVector::adoptElement(*(uint64_t (***)(void *))(v112 + 96), v124, (UErrorCode *)this);
      uint64_t v120 = *(unsigned int *)this;
      uint64_t v107 = v110;
      if ((int)v120 > 0) {
        goto LABEL_244;
      }
      int v118 = (void *)*(unsigned int *)(v112 + 84);
      if (v118 != 5) {
        *(void *)(v119 + 88) = v112;
      }
LABEL_234:
      icu::UnicodeString::~UnicodeString(v118, (icu::UnicodeString *)&v222);
      if (++v114 >= (int)ures_getSize(v107)) {
        goto LABEL_235;
      }
    }
    uint64_t v120 = *(unsigned int *)this;
    uint64_t v107 = v110;
    if ((int)v120 <= 0)
    {
      uint64_t v120 = 7;
      *(_DWORD *)this = 7;
    }
LABEL_244:
    icu::UnicodeString::~UnicodeString((void *)v120, (icu::UnicodeString *)&v222);
    int v109 = 1;
LABEL_245:
    icu::UnicodeString::~UnicodeString(v113, (icu::UnicodeString *)v227);
LABEL_246:
    if (v107) {
      ures_close(v107);
    }
    if (v109 == 35 || !v109)
    {
      uint64_t v105 = v212;
      if (!ures_hasNext(v212))
      {
LABEL_251:
        LODWORD(v227[0]) = -1;
        uint64_t Element = uhash_nextElement(v3, (int *)v227);
        if (Element)
        {
          while (1)
          {
            uint64_t v127 = *(void *)(Element + 8);
            unint64_t v128 = qword_1E9192608[*(unsigned int *)(v127 + 84)];
            if (!v128)
            {
              int v129 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, v126);
              if (v129)
              {
                int v129 = (uint64_t *)icu::UVector::UVector((uint64_t)v129, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
              }
              else if (*(int *)this <= 0)
              {
                *(_DWORD *)this = 7;
              }
              unint64_t v128 = *(unsigned int *)(v127 + 84);
              qword_1E9192608[v128] = (uint64_t)v129;
            }
            int v130 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v128, (icu::UMemory *)0x40, v126);
            if (!v130) {
              break;
            }
            signed int v131 = v130;
            icu::UnicodeString::UnicodeString(v130, (UChar **)(v127 + 16));
            if (*(int *)this >= 1)
            {
              (*(void (**)(icu::UnicodeString *))(*(void *)v131 + 8))(v131);
              goto LABEL_336;
            }
            icu::UVector::adoptElement((uint64_t (**)(void *))qword_1E9192608[*(unsigned int *)(v127 + 84)], v131, (UErrorCode *)this);
            uint64_t Element = uhash_nextElement(v3, (int *)v227);
            if (!Element) {
              goto LABEL_261;
            }
          }
          uint64_t v108 = *(unsigned int *)this;
          if ((int)v108 <= 0)
          {
            uint64_t v108 = 7;
            *(_DWORD *)this = 7;
          }
        }
        else
        {
LABEL_261:
          qword_1E9192640 = v201;
          qword_1E9192648 = (uint64_t)v3;
          uint64_t v108 = (uint64_t)qword_1E9192000;
          qword_1E9192650 = v200;
          uint64_t v199 = 0;
          uint64_t v200 = 0;
          uint64_t v201 = 0;
        }
        break;
      }
      continue;
    }
    break;
  }
LABEL_336:
  icu::UnicodeString::~UnicodeString((void *)v108, (icu::UnicodeString *)v228);
  icu::UnicodeString::~UnicodeString(v180, (icu::UnicodeString *)v229);
  icu::UnicodeString::~UnicodeString(v181, (icu::UnicodeString *)v230);
LABEL_48:
  int v3 = (uint64_t *)v199;
  int v4 = (int32x2_t *)v201;
LABEL_49:
  uint64_t v5 = (int32x2_t *)v200;
  uint64_t v10 = v202;
  uint64_t v14 = (uint64_t (**)(void *))v203;
LABEL_50:
  uint64_t v22 = v204;
  uint64_t v21 = v205;
  uint64_t v19 = v216;
LABEL_51:
  uint64_t v37 = v215;
LABEL_52:
  if (v211)
  {
    ures_close(v211);
    uint64_t v37 = v215;
  }
  if (v37) {
    ures_close(v37);
  }
  if (v212) {
    ures_close(v212);
  }
  if (v213) {
    ures_close(v213);
  }
  if (v214) {
    ures_close(v214);
  }
  if (v19) {
    ures_close(v19);
  }
  if (v206) {
    ures_close(v206);
  }
  if (v207) {
    ures_close(v207);
  }
  if (v209) {
    ures_close(v209);
  }
  if (v208) {
    ures_close(v208);
  }
  if (v210) {
    ures_close(v210);
  }
  if (v22) {
    ures_close(v22);
  }
  if (v21) {
    ures_close(v21);
  }
  if (v14) {
    (*((void (**)(uint64_t (**)(void *)))*v14 + 1))(v14);
  }
  if (v10) {
    (*(void (**)(icu::UVector *))(*(void *)v10 + 8))(v10);
  }
  if (v5) {
    uhash_close(v5);
  }
  if (v4) {
    uhash_close(v4);
  }
  if (v3) {
    uhash_close(v3);
  }
}

uint64_t sub_18C9B9B18(icu::Region *a1)
{
  return 1;
}

uint64_t icu::Region::Region(uint64_t this)
{
  *(void *)this = &unk_1EDA51B30;
  *(void *)(this + 16) = &unk_1EDA47700;
  *(_WORD *)(this + 24) = 2;
  *(_DWORD *)(this + 80) = -1;
  *(unsigned char *)(this + 8) = 0;
  *(void *)(this + 84) = 0;
  *(void *)(this + 100) = 0;
  *(void *)(this + 92) = 0;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDA51B30;
  *(void *)(this + 16) = &unk_1EDA47700;
  *(_WORD *)(this + 24) = 2;
  *(_DWORD *)(this + 80) = -1;
  *(unsigned char *)(this + 8) = 0;
  *(void *)(this + 84) = 0;
  *(void *)(this + 100) = 0;
  *(void *)(this + 92) = 0;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

uint64_t icu::Region::cleanupRegionData(icu::Region *this)
{
  for (uint64_t i = 0; i != 7; ++i)
  {
    uint64_t v2 = qword_1E9192608[i];
    if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      qword_1E9192608[i] = 0;
    }
  }
  if (qword_1E9192650) {
    uhash_close((unsigned char *)qword_1E9192650);
  }
  if (qword_1E9192640) {
    uhash_close((unsigned char *)qword_1E9192640);
  }
  if (qword_1E9192648) {
    uhash_close((unsigned char *)qword_1E9192648);
  }
  uint64_t result = qword_1E9192600;
  if (qword_1E9192600)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)qword_1E9192600 + 8))(qword_1E9192600);
    qword_1E9192600 = 0;
  }
  qword_1E9192648 = 0;
  qword_1E9192640 = 0;
  qword_1E9192650 = 0;
  atomic_store(0, &dword_1E9192658);
  return result;
}

void icu::Region::~Region(icu::Region *this)
{
  *(void *)this = &unk_1EDA51B30;
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 13);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::UnicodeString::~UnicodeString((icu::Region *)((char *)this + 16));

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::Region::~Region(this);

  icu::UMemory::operator delete(v1);
}

BOOL icu::Region::operator==(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 24);
  if (v2) {
    return *(_WORD *)(a2 + 24) & 1;
  }
  if ((v2 & 0x8000) != 0) {
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else {
    int v3 = v2 >> 5;
  }
  uint64_t v4 = 0;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 24);
  if ((v5 & 0x8000u) == 0) {
    unsigned int v6 = v5 >> 5;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a2 + 28);
  }
  if ((v5 & 1) == 0 && v3 == v6) {
    return icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 16), (const icu::UnicodeString *)(a2 + 16), v3);
  }
  return v4;
}

uint64_t icu::Region::operator!=(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 24);
  if (v2)
  {
    int v4 = *(_WORD *)(a2 + 24) & 1;
  }
  else
  {
    if ((v2 & 0x8000) != 0) {
      int v3 = *(_DWORD *)(a1 + 28);
    }
    else {
      int v3 = v2 >> 5;
    }
    int v4 = 0;
    unsigned int v5 = *(unsigned __int16 *)(a2 + 24);
    if ((v5 & 0x8000u) == 0) {
      unsigned int v6 = v5 >> 5;
    }
    else {
      unsigned int v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 1) == 0 && v3 == v6) {
      int v4 = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 16), (const icu::UnicodeString *)(a2 + 16), v3);
    }
  }
  return v4 ^ 1u;
}

icu::Region *icu::Region::getInstance(icu::Region *this, icu::Region *a2, UErrorCode *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  int v3 = this;
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192658, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192658))
  {
    int v6 = dword_1E919265C;
    if (dword_1E919265C >= 1)
    {
      int v3 = 0;
LABEL_8:
      *(_DWORD *)a2 = v6;
      return v3;
    }
  }
  else
  {
    icu::Region::loadRegionData(a2, v5);
    dword_1E919265C = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_1E9192658);
  }
  if (*(int *)a2 > 0) {
    return 0;
  }
  if (!v3)
  {
    int v6 = 1;
    goto LABEL_8;
  }
  memset(v11, 0, sizeof(v11));
  icu::UnicodeString::UnicodeString(v11, v3, 0xFFFFFFFFLL, 0);
  int v3 = (icu::Region *)uhash_get(qword_1E9192648, (uint64_t)v11);
  if (v3 || (int v3 = (icu::Region *)uhash_get(qword_1E9192650, (uint64_t)v11)) != 0)
  {
    uint64_t v7 = *((unsigned int *)v3 + 21);
    if (v7 == 6)
    {
      uint64_t v7 = *(unsigned int *)(*((void *)v3 + 13) + 8);
      if (v7 == 1)
      {
        PreferredValues = icu::Region::getPreferredValues((unsigned int **)v3, (UErrorCode *)a2);
        (*(void (**)(uint64_t *, icu::Region *))(*PreferredValues + 64))(PreferredValues, a2);
        uint64_t v9 = (*(uint64_t (**)(uint64_t *, icu::Region *))(*PreferredValues + 56))(PreferredValues, a2);
        int v3 = (icu::Region *)uhash_get(qword_1E9192648, v9);
        (*(void (**)(uint64_t *))(*PreferredValues + 8))(PreferredValues);
      }
    }
  }
  else
  {
    uint64_t v7 = 1;
    *(_DWORD *)a2 = 1;
  }
  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v11);
  return v3;
}

uint64_t *icu::Region::getPreferredValues(unsigned int **this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192658, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192658))
  {
    if (dword_1E919265C >= 1)
    {
      uint64_t result = 0;
      *a2 = dword_1E919265C;
      return result;
    }
  }
  else
  {
    icu::Region::loadRegionData((icu::Region *)a2, a2);
    dword_1E919265C = *a2;
    icu::umtx_initImplPostInit(&dword_1E9192658);
  }
  if (*(int *)a2 > 0) {
    return 0;
  }
  unsigned int v5 = (uint64_t *)*((unsigned int *)this + 21);
  if (v5 != 6) {
    return 0;
  }
  uint64_t result = icu::UMemory::operator new(v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result) {
    return (uint64_t *)sub_18C9BAAA4((uint64_t)result, this[13], a2);
  }
  return result;
}

uint64_t icu::Region::getInstance(icu::Region *this, icu::Region *a2, UErrorCode *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192658, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192658))
  {
    int v8 = dword_1E919265C;
    if (dword_1E919265C >= 1)
    {
      uint64_t v3 = 0;
LABEL_9:
      *(_DWORD *)a2 = v8;
      return v3;
    }
  }
  else
  {
    icu::Region::loadRegionData(a2, v7);
    dword_1E919265C = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_1E9192658);
  }
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t v3 = uhash_iget(qword_1E9192640, this);
  if (!v3)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v16 = 0;
    long long v15 = 0u;
    uint64_t v12 = &unk_1EDA47700;
    LOWORD(v13) = 2;
    icu::ICU_Utility::appendNumber((icu::ICU_Utility *)&v12, this, 0xAu, 1);
    uint64_t v3 = uhash_get(qword_1E9192650, (uint64_t)&v12);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v12);
  }
  if (*(int *)a2 > 0) {
    return 0;
  }
  if (!v3)
  {
    int v8 = 1;
    goto LABEL_9;
  }
  if (*(_DWORD *)(v3 + 84) == 6 && *(_DWORD *)(*(void *)(v3 + 104) + 8) == 1)
  {
    PreferredValues = icu::Region::getPreferredValues((unsigned int **)v3, (UErrorCode *)a2);
    (*(void (**)(uint64_t *, icu::Region *))(*PreferredValues + 64))(PreferredValues, a2);
    uint64_t v11 = (*(uint64_t (**)(uint64_t *, icu::Region *))(*PreferredValues + 56))(PreferredValues, a2);
    uint64_t v3 = uhash_get(qword_1E9192648, v11);
    (*(void (**)(uint64_t *))(*PreferredValues + 8))(PreferredValues);
  }
  return v3;
}

uint64_t *icu::Region::getAvailable(int a1, icu::Region *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192658, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192658))
  {
    if (dword_1E919265C >= 1)
    {
      uint64_t result = 0;
      *(_DWORD *)a2 = dword_1E919265C;
      return result;
    }
  }
  else
  {
    icu::Region::loadRegionData(a2, (UErrorCode *)a2);
    dword_1E919265C = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_1E9192658);
  }
  unsigned int v5 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v5 > 0) {
    return 0;
  }
  uint64_t result = icu::UMemory::operator new(v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result) {
    return (uint64_t *)sub_18C9BAAA4((uint64_t)result, (unsigned int *)qword_1E9192608[a1], (UErrorCode *)a2);
  }
  return result;
}

uint64_t icu::Region::getContainingRegion(icu::Region *this)
{
  int v4 = 0;
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192658, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192658))
  {
    icu::Region::loadRegionData((icu::Region *)&v4, v2);
    dword_1E919265C = v4;
    icu::umtx_initImplPostInit(&dword_1E9192658);
  }
  return *((void *)this + 11);
}

uint64_t icu::Region::getContainingRegion(uint64_t a1, int a2)
{
  int v6 = 0;
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192658, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192658))
  {
    if (dword_1E919265C >= 1) {
      int v6 = dword_1E919265C;
    }
  }
  else
  {
    icu::Region::loadRegionData((icu::Region *)&v6, v4);
    dword_1E919265C = v6;
    icu::umtx_initImplPostInit(&dword_1E9192658);
  }
  uint64_t result = *(void *)(a1 + 88);
  if (result)
  {
    if (*(_DWORD *)(result + 84) != a2) {
      return icu::Region::getContainingRegion();
    }
  }
  return result;
}

uint64_t *icu::Region::getContainedRegions(unsigned int **this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192658, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192658))
  {
    if (dword_1E919265C >= 1)
    {
      uint64_t result = 0;
      *a2 = dword_1E919265C;
      return result;
    }
  }
  else
  {
    icu::Region::loadRegionData((icu::Region *)a2, a2);
    dword_1E919265C = *a2;
    icu::umtx_initImplPostInit(&dword_1E9192658);
  }
  unsigned int v5 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v5 > 0) {
    return 0;
  }
  uint64_t result = icu::UMemory::operator new(v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result) {
    return (uint64_t *)sub_18C9BAAA4((uint64_t)result, this[12], a2);
  }
  return result;
}

uint64_t *icu::Region::getContainedRegions(unsigned int **a1, int a2, icu::Region *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192658, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192658))
    {
      if (dword_1E919265C >= 1) {
        *(_DWORD *)a3 = dword_1E919265C;
      }
    }
    else
    {
      icu::Region::loadRegionData(a3, v6);
      dword_1E919265C = *(_DWORD *)a3;
      icu::umtx_initImplPostInit(&dword_1E9192658);
    }
  }
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  icu::UVector::UVector((uint64_t)v25, 0, (uint64_t)uhash_compareChars, (int *)a3);
  ContainedRegions = icu::Region::getContainedRegions(a1, (UErrorCode *)a3);
  int v8 = ContainedRegions;
  int v9 = *(_DWORD *)a3;
  if (ContainedRegions || v9 >= 1)
  {
    if (v9 > 0)
    {
      uint64_t v10 = 0;
      if (!ContainedRegions) {
        goto LABEL_36;
      }
LABEL_35:
      (*(void (**)(uint64_t *))(*v8 + 8))(v8);
      goto LABEL_36;
    }
    uint64_t v11 = (icu::Region *)(*(uint64_t (**)(uint64_t *, void, icu::Region *))(*ContainedRegions + 40))(ContainedRegions, 0, a3);
    long long v14 = (uint64_t *)*(unsigned int *)a3;
    if (v11) {
      BOOL v15 = (int)v14 <= 0;
    }
    else {
      BOOL v15 = 0;
    }
    if (!v15)
    {
LABEL_30:
      int32_t v23 = icu::UMemory::operator new(v14, (icu::UMemory *)0x80, v12);
      if (v23)
      {
        uint64_t v10 = v23;
        sub_18C9BAAA4((uint64_t)v23, (unsigned int *)v25, (UErrorCode *)a3);
        if (*(int *)a3 < 1) {
          goto LABEL_35;
        }
        (*(void (**)(uint64_t *))(*v10 + 8))(v10);
      }
      else if (*(int *)a3 <= 0)
      {
        uint64_t v10 = 0;
        *(_DWORD *)a3 = 7;
        goto LABEL_35;
      }
      uint64_t v10 = 0;
      goto LABEL_35;
    }
    while (1)
    {
      uint64_t Instance = icu::Region::getInstance(v11, a3, v13);
      if (*((_DWORD *)Instance + 21) == a2)
      {
        icu::UVector::addElement((icu::UVector *)v25, (char *)Instance + 16, (UErrorCode *)a3);
      }
      else
      {
        uint64_t v17 = icu::Region::getContainedRegions();
        uint64_t v18 = v17;
        if (*(int *)a3 <= 0)
        {
          do
          {
            uint64_t v19 = (icu::Region *)(*(uint64_t (**)(uint64_t, void, icu::Region *))(*(void *)v18 + 40))(v18, 0, a3);
            if (!v19) {
              break;
            }
            uint64_t v21 = icu::Region::getInstance(v19, a3, v20);
            icu::UVector::addElement((icu::UVector *)v25, (char *)v21 + 16, (UErrorCode *)a3);
          }
          while (*(int *)a3 <= 0);
        }
        else if (!v17)
        {
          goto LABEL_26;
        }
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
LABEL_26:
      uint64_t v11 = (icu::Region *)(*(uint64_t (**)(uint64_t *, void, icu::Region *))(*v8 + 40))(v8, 0, a3);
      long long v14 = (uint64_t *)*(unsigned int *)a3;
      if (v11) {
        BOOL v22 = (int)v14 < 1;
      }
      else {
        BOOL v22 = 0;
      }
      if (!v22) {
        goto LABEL_30;
      }
    }
  }
  uint64_t v10 = 0;
  *(_DWORD *)a3 = 7;
LABEL_36:
  icu::UVector::~UVector((icu::UVector *)v25);
  return v10;
}

uint64_t icu::Region::getType(icu::Region *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t icu::Region::contains(icu::Region *this, const icu::Region *a2)
{
  int v10 = 0;
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192658, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192658))
  {
    if (dword_1E919265C >= 1) {
      int v10 = dword_1E919265C;
    }
  }
  else
  {
    icu::Region::loadRegionData((icu::Region *)&v10, v4);
    dword_1E919265C = v10;
    icu::umtx_initImplPostInit(&dword_1E9192658);
  }
  uint64_t result = *((void *)this + 12);
  if (result)
  {
    if ((icu::UVector::indexOf((icu::UVector *)result, (uint64_t)a2 + 16, 0) & 0x80000000) == 0) {
      return 1;
    }
    int v6 = (icu::UVector *)*((void *)this + 12);
    if (*((int *)v6 + 2) >= 1)
    {
      signed int v7 = 0;
      while (1)
      {
        uint64_t v8 = icu::UVector::elementAt(v6, v7);
        int v9 = (icu::Region *)uhash_get(qword_1E9192648, v8);
        if (v9)
        {
          if (icu::Region::contains(v9, a2)) {
            break;
          }
        }
        ++v7;
        int v6 = (icu::UVector *)*((void *)this + 12);
        if (v7 >= *((_DWORD *)v6 + 2)) {
          return 0;
        }
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t icu::Region::getRegionCode(icu::Region *this)
{
  return (uint64_t)this + 8;
}

uint64_t icu::Region::getNumericCode(icu::Region *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t sub_18C9BAAA4(uint64_t a1, unsigned int *a2, UErrorCode *a3)
{
  uint64_t v6 = icu::StringEnumeration::StringEnumeration(a1);
  *(void *)uint64_t v6 = &unk_1EDA51B58;
  *(_DWORD *)(v6 + 116) = 0;
  *(void *)(v6 + 120) = 0;
  if (a2)
  {
    uint64_t v8 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v8 <= 0)
    {
      int v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x28, v7);
      if (v9)
      {
        int v10 = (uint64_t (**)(void *))v9;
        icu::UVector::UVector(v9, uprv_deleteUObject, uhash_compareUnicodeString, a2[2], a3);
        if (*(int *)a3 > 0)
        {
LABEL_12:
          (*((void (**)(uint64_t (**)(void *)))*v10 + 1))(v10);
        }
        else
        {
          signed int v11 = 0;
          while (v11 < (int)a2[2])
          {
            unint64_t v12 = (UChar **)icu::UVector::elementAt((icu::UVector *)a2, v11);
            BOOL v15 = (icu::UnicodeString *)icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v13);
            uint64_t v16 = v15;
            if (v15)
            {
              icu::UnicodeString::UnicodeString(v15, v12);
            }
            else if (*(int *)a3 <= 0)
            {
              *a3 = U_MEMORY_ALLOCATION_ERROR;
            }
            icu::UVector::adoptElement(v10, v16, a3);
            ++v11;
            if (*(int *)a3 > 0) {
              goto LABEL_12;
            }
          }
          *(void *)(a1 + 120) = v10;
        }
      }
      else if (*(int *)a3 <= 0)
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return a1;
}

icu::UVector *sub_18C9BAC24(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  uint64_t result = *(icu::UVector **)(a1 + 120);
  if (result)
  {
    uint64_t result = (icu::UVector *)icu::UVector::elementAt(result, *(_DWORD *)(a1 + 116));
    if (result) {
      ++*(_DWORD *)(a1 + 116);
    }
  }
  return result;
}

uint64_t sub_18C9BAC78(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18C9BAC80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1) {
    return *(unsigned int *)(v1 + 8);
  }
  else {
    return 0;
  }
}

void sub_18C9BAC98(icu::StringEnumeration *this)
{
  *(void *)this = &unk_1EDA51B58;
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18C9BAD18(icu::StringEnumeration *a1)
{
  sub_18C9BAC98(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C9BAD40(void *a1)
{
  uint64_t v2 = 0;
  *a1 = &unk_1EDA51BF0;
  uint64_t v3 = a1;
  do
  {
    uint64_t v4 = 0;
    unsigned int v5 = v3;
    do
    {
      uint64_t v6 = 0x1FFFFFFFFFFFFFF8;
      do
      {
        unint64_t v7 = (icu::SimpleFormatter *)v5[v6 + 2171];
        if (v7)
        {
          icu::SimpleFormatter::~SimpleFormatter(v7);
          icu::UMemory::operator delete(v8);
        }
        int v9 = (icu::SimpleFormatter *)v5[v6 + 2179];
        if (v9)
        {
          icu::SimpleFormatter::~SimpleFormatter(v9);
          icu::UMemory::operator delete(v10);
        }
        ++v6;
      }
      while (v6 * 8);
      ++v4;
      v5 += 16;
    }
    while (v4 != 15);
    ++v2;
    v3 += 240;
  }
  while (v2 != 3);
  signed int v11 = (icu::SimpleFormatter *)a1[2893];
  if (v11)
  {
    icu::SimpleFormatter::~SimpleFormatter(v11);
    icu::UMemory::operator delete(v12);
  }
  icu::UnicodeString::~UnicodeString((void *)0x5A18, (icu::UnicodeString *)(a1 + 2883));
  uint64_t v13 = 0;
  uint64_t v14 = 17240;
  do
  {
    icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&a1[v13 + 2155]);
    v13 -= 8;
  }
  while (v13 != -2160);

  icu::SharedObject::~SharedObject((icu::SharedObject *)a1);
}

void sub_18C9BAE4C(void *a1)
{
  sub_18C9BAD40(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9BAE74(uint64_t a1, int a2, unsigned int a3, int a4, int a5)
{
  if (a3 > 6) {
    return 0;
  }
LABEL_2:
  int v5 = a5;
  int v6 = a2;
  while (1)
  {
    uint64_t v7 = *(void *)(a1 + 1920 * v6 + (qword_18CA96958[a3] << 7) + ((uint64_t)a4 << 6) + 8 * a5 + 17304);
    if (v7) {
      return v7;
    }
    int v6 = *(_DWORD *)(a1 + 4 * v6 + 23128);
    if (v6 == -1)
    {
      uint64_t v7 = 0;
      a5 = 5;
      if (v5 != 5) {
        goto LABEL_2;
      }
      return v7;
    }
  }
}

uint64_t sub_18C9BAEE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  int v5 = *(char **)(a1 + 56);
  uint64_t v7 = ures_open(0, v5, a3);
  uint64_t v8 = 0;
  int v9 = (uint64_t *)*a3;
  if ((int)v9 > 0) {
    goto LABEL_14;
  }
  int v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x5A70, v6);
  if (!v10)
  {
    uint64_t v8 = 0;
    *a3 = 7;
    goto LABEL_14;
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = sub_18C9BDC20((uint64_t)v10);
  long long v54 = 0uLL;
  unsigned int v53 = &unk_1EDA51D40;
  *(void *)&long long v55 = v12;
  *(void *)(v12 + 23128) = -1;
  *(_DWORD *)(v12 + 23136) = -1;
  ures_getAllItemsWithFallback(v7, "fields", (uint64_t)&v53, a3);
  if (*a3 >= 1)
  {
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v53);
    uint64_t v8 = 0;
LABEL_13:
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    goto LABEL_14;
  }
  uint64_t v37 = v11;
  memset(v60, 0, sizeof(v60));
  icu::Locale::Locale((uint64_t *)v60, (icu::Locale *)v60, v5, 0, 0, 0);
  bzero(v58, 0x4F8uLL);
  icu::DateFormatSymbols::DateFormatSymbols((icu::DateFormatSymbols *)v58, (const icu::Locale *)v60, (UErrorCode *)a3);
  if (*a3 <= 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = (UChar **)(v11 + 344);
    do
    {
      int v15 = dword_18CA968DC[v13];
      LODWORD(__s) = 0;
      uint64_t Weekdays = icu::DateFormatSymbols::getWeekdays(v58, &__s, 1, v15);
      uint64_t v17 = 64;
      uint64_t v18 = v14;
      do
      {
        icu::UnicodeString::fastCopyFrom(v18, (UChar **)(Weekdays + v17));
        v18 += 48;
        v17 += 64;
      }
      while (v17 != 512);
      ++v13;
      v14 += 720;
    }
    while (v13 != 3);
  }
  icu::DateFormatSymbols::~DateFormatSymbols((icu::DateFormatSymbols *)v58);
  icu::Locale::~Locale((icu::Locale *)v60);
  int v19 = *a3;
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v53);
  if (v19 > 0)
  {
    uint64_t v8 = 0;
    uint64_t v11 = v37;
    goto LABEL_13;
  }
  long long v54 = 0u;
  uint64_t v57 = 0;
  long long v56 = 0u;
  long long v55 = 0u;
  unsigned int v53 = &unk_1EDA47700;
  LOWORD(v54) = 2;
  icu::Locale::Locale((icu::Locale *)v52, a1 + 16);
  uint64_t v8 = v37;
  if (*a3 >= 1)
  {
    icu::Locale::~Locale((icu::Locale *)v52);
LABEL_19:
    uint64_t v11 = v37;
    uint64_t v8 = 0;
    goto LABEL_20;
  }
  char v63 = 0;
  long long __s = 0u;
  long long v62 = 0u;
  icu::Calendar::getCalendarTypeFromLocale((icu::Calendar *)v52, (const icu::Locale *)&__s, (char *)0x20, (UErrorCode *)a3, v21);
  char v63 = 0;
  if (*a3 > 0 || !(_BYTE)__s)
  {
    *a3 = 0;
    strcpy((char *)&__s, "gregorian");
  }
  memset(&v58[1], 0, 48);
  uint64_t v59 = 0;
  v58[0] = (char *)&v58[1] + 5;
  LODWORD(v58[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v49, "calendar/");
  int32_t v23 = icu::CharString::append((icu::CharString *)v58, v49, v50, (UErrorCode *)a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v47, (const char *)&__s);
  int32_t v24 = icu::CharString::append(v23, v47, v48, (UErrorCode *)a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v45, "/DateTimePatterns%atTime");
  icu::CharString::append(v24, v45, v46, (UErrorCode *)a3);
  uint64_t v25 = ures_getByKeyWithFallback(v7, (char *)v58[0], 0, (UErrorCode *)a3);
  uint64_t v26 = v25;
  if (*a3 <= 0 && (int)ures_getSize(v25) > 3)
  {
    if (*a3 >= 1)
    {
      int v30 = 0;
      uint64_t v29 = v26;
      goto LABEL_39;
    }
    signed int v32 = 2;
    uint64_t v29 = v26;
  }
  else
  {
    *a3 = 0;
    LODWORD(v59) = 0;
    *(unsigned char *)v58[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v43, "calendar/");
    uint64_t v27 = icu::CharString::append((icu::CharString *)v58, v43, v44, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v41, (const char *)&__s);
    unsigned int v28 = icu::CharString::append(v27, v41, v42, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v39, "/DateTimePatterns");
    icu::CharString::append(v28, v39, v40, (UErrorCode *)a3);
    uint64_t v29 = ures_getByKeyWithFallback(v7, (char *)v58[0], 0, (UErrorCode *)a3);
    if (v26) {
      ures_close(v26);
    }
    if (*a3 >= 1)
    {
      int v30 = 0;
      goto LABEL_39;
    }
    if ((int)ures_getSize(v29) <= 8)
    {
      unsigned int v38 = "{";
      int v30 = 1;
      icu::UnicodeString::UnicodeString(v60, 1, &v38);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v53, (icu::UnicodeString *)v60);
      icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v60);
      goto LABEL_39;
    }
    signed int v32 = 8;
  }
  int v51 = 0;
  StringByIndex = ures_getStringByIndex(v29, v32, &v51, (UErrorCode *)a3);
  int v30 = 0;
  if (*a3 <= 0)
  {
    v60[0] = StringByIndex;
    int v30 = 1;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v53, 1, v60, v51);
  }
LABEL_39:
  if (BYTE4(v58[1])) {
    uprv_free(v58[0]);
  }
  if (v29) {
    ures_close(v29);
  }
  icu::Locale::~Locale((icu::Locale *)v52);
  if (!v30) {
    goto LABEL_19;
  }
  int v35 = icu::UMemory::operator new(v22, (icu::UMemory *)0x48, v34);
  uint64_t v36 = (uint64_t)v35;
  if (v35)
  {
    v35[1] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v35 + 8) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v35, (const icu::UnicodeString *)&v53, 2, 2, 1, (UErrorCode *)a3);
  }
  sub_18C9BB51C(v37, v36);
  BOOL v22 = (uint64_t *)*a3;
  if ((int)v22 > 0) {
    goto LABEL_19;
  }
  icu::SharedObject::addRef(v37);
  uint64_t v11 = 0;
LABEL_20:
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v53);
  if (v11) {
    goto LABEL_13;
  }
LABEL_14:
  if (v7) {
    ures_close(v7);
  }
  return v8;
}

void sub_18C9BB51C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(icu::SimpleFormatter **)(a1 + 23144);
  if (v4)
  {
    icu::SimpleFormatter::~SimpleFormatter(v4);
    icu::UMemory::operator delete(v5);
  }
  *(void *)(a1 + 23144) = a2;
}

void sub_18C9BB558(void **a1)
{
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::FormattedRelativeDateTime::FormattedRelativeDateTime(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_1EDA51C18;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_1EDA51C18;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::FormattedRelativeDateTime::~FormattedRelativeDateTime(icu::FormattedRelativeDateTime *this)
{
  *(void *)this = &unk_1EDA51C18;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;

  icu::FormattedValue::~FormattedValue(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::FormattedRelativeDateTime::~FormattedRelativeDateTime(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::FormattedRelativeDateTime::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::FormattedRelativeDateTime::toString(icu::FormattedRelativeDateTime *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(void *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(void))(*(void *)v3 + 16))(*((void *)this + 1));
}

void icu::FormattedRelativeDateTime::toTempString(icu::FormattedRelativeDateTime *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(void *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(void))(*(void *)v3 + 24))(*((void *)this + 1));
}

icu::Appendable *icu::FormattedRelativeDateTime::appendTo(icu::FormattedRelativeDateTime *this, icu::Appendable *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return a2;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }
  return (icu::Appendable *)(*(uint64_t (**)(void, icu::Appendable *))(*(void *)v4 + 32))(*((void *)this + 1), a2);
}

uint64_t icu::FormattedRelativeDateTime::nextPosition(icu::FormattedRelativeDateTime *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return 0;
  }
  return (*(uint64_t (**)(void, icu::ConstrainedFieldPosition *))(*(void *)v4 + 40))(*((void *)this + 1), a2);
}

icu::RelativeDateTimeFormatter *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::RelativeDateTimeFormatter *this, UErrorCode *a2)
{
  *(void *)this = &unk_1EDA51C58;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0x10000000000;
  *((void *)this + 5) = 0;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48));
  icu::RelativeDateTimeFormatter::init(this, 0, 0, a2);
  return this;
}

void icu::RelativeDateTimeFormatter::init(icu::RelativeDateTimeFormatter *this, icu::NumberFormat *a2, icu::BreakIterator *a3, UErrorCode *a4)
{
  uint64_t v8 = (char *)this + 48;
  sub_18C9BD220((uint64_t)this + 48, (UErrorCode *)this + 2, a4);
  if (*(int *)a4 > 0
    || (Shareduint64_t Instance = (icu::SharedObject *)icu::PluralRules::createSharedInstance((uint64_t)v8, 0, a4), *(int *)a4 > 0))
  {
LABEL_3:
    if (!a3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v11 = (uint64_t)SharedInstance;
  sub_18C8917C4(SharedInstance, (icu::SharedObject **)this + 3);
  icu::SharedObject::removeRef(v11);
  if (a2)
  {
    uint64_t v14 = icu::UMemory::operator new(v13, (icu::UMemory *)0x20, v12);
    if (!v14)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_3;
    }
    v14[1] = 0;
    int v14[2] = 0;
    uint64_t *v14 = (uint64_t)&unk_1EDA4FFC8;
    v14[3] = (uint64_t)a2;
    sub_18C8917C4((icu::SharedObject *)v14, (icu::SharedObject **)this + 2);
    if (a3) {
      goto LABEL_12;
    }
LABEL_18:
    uint64_t v21 = *((void *)this + 5);
    if (v21)
    {
      icu::SharedObject::removeRef(v21);
      *((void *)this + 5) = 0;
    }
    return;
  }
  int v19 = (icu::SharedObject *)icu::NumberFormat::createSharedInstance((uint64_t)v8, 1, a4);
  if (*(int *)a4 > 0) {
    goto LABEL_3;
  }
  uint64_t v20 = (uint64_t)v19;
  sub_18C8917C4(v19, (icu::SharedObject **)this + 2);
  icu::SharedObject::removeRef(v20);
  if (!a3) {
    goto LABEL_18;
  }
LABEL_12:
  uint64_t v17 = icu::UMemory::operator new(v16, (icu::UMemory *)0x20, v15);
  if (!v17)
  {
    a2 = 0;
    *a4 = U_MEMORY_ALLOCATION_ERROR;
LABEL_4:
    (*(void (**)(icu::BreakIterator *))(*(void *)a3 + 8))(a3);
LABEL_5:
    if (a2)
    {
      int v10 = *(void (**)(icu::NumberFormat *))(*(void *)a2 + 8);
      v10(a2);
    }
    return;
  }
  uint64_t v18 = (icu::SharedObject *)icu::SharedBreakIterator::SharedBreakIterator(v17, a3);

  sub_18C8917C4(v18, (icu::SharedObject **)this + 5);
}

icu::RelativeDateTimeFormatter *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::RelativeDateTimeFormatter *this, const icu::Locale *a2, UErrorCode *a3)
{
  *(void *)this = &unk_1EDA51C58;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0x10000000000;
  *((void *)this + 5) = 0;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48), (uint64_t)a2);
  icu::RelativeDateTimeFormatter::init(this, 0, 0, a3);
  return this;
}

icu::RelativeDateTimeFormatter *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::RelativeDateTimeFormatter *this, const icu::Locale *a2, icu::NumberFormat *a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA51C58;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0x10000000000;
  *((void *)this + 5) = 0;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48), (uint64_t)a2);
  icu::RelativeDateTimeFormatter::init(this, a3, 0, a4);
  return this;
}

{
  *(void *)this = &unk_1EDA51C58;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0x10000000000;
  *((void *)this + 5) = 0;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48), (uint64_t)a2);
  icu::RelativeDateTimeFormatter::init(this, a3, 0, a4);
  return this;
}

uint64_t icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(uint64_t a1, char **a2, icu::NumberFormat *a3, unsigned int a4, int a5, const icu::Locale *a6)
{
  *(void *)a1 = &unk_1EDA51C58;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  *(void *)(a1 + 40) = 0;
  icu::Locale::Locale((icu::Locale *)(a1 + 48), (uint64_t)a2);
  if (*(int *)a6 <= 0)
  {
    if (a4 < 3 && (a5 & 0xFFFFFF00) == 0x100)
    {
      if (a5 != 258)
      {
        uint64_t v16 = (icu::RelativeDateTimeFormatter *)a1;
        uint64_t v17 = a3;
        unint64_t v15 = 0;
        goto LABEL_10;
      }
      Sentenceuint64_t Instance = icu::BreakIterator::createSentenceInstance(a2, a6, v12, v13);
      if (*(int *)a6 <= 0)
      {
        unint64_t v15 = (icu::BreakIterator *)SentenceInstance;
        uint64_t v16 = (icu::RelativeDateTimeFormatter *)a1;
        uint64_t v17 = a3;
LABEL_10:
        icu::RelativeDateTimeFormatter::init(v16, v17, v15, (UErrorCode *)a6);
      }
    }
    else
    {
      *(_DWORD *)a6 = 1;
    }
  }
  return a1;
}

void *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(void *a1, uint64_t a2)
{
  *a1 = &unk_1EDA51C58;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  a1[3] = *(void *)(a2 + 24);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = *(void *)(a2 + 40);
  icu::Locale::Locale((icu::Locale *)(a1 + 6), a2 + 48);
  icu::SharedObject::addRef(a1[1]);
  icu::SharedObject::addRef(a1[2]);
  icu::SharedObject::addRef(a1[3]);
  uint64_t v3 = a1[5];
  if (v3) {
    icu::SharedObject::addRef(v3);
  }
  return a1;
}

uint64_t icu::RelativeDateTimeFormatter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_18C8917C4(*(icu::SharedObject **)(a2 + 8), (icu::SharedObject **)(a1 + 8));
    sub_18C8917C4(*(icu::SharedObject **)(a2 + 16), (icu::SharedObject **)(a1 + 16));
    sub_18C8917C4(*(icu::SharedObject **)(a2 + 24), (icu::SharedObject **)(a1 + 24));
    sub_18C8917C4(*(icu::SharedObject **)(a2 + 40), (icu::SharedObject **)(a1 + 40));
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    icu::Locale::operator=((icu::Locale *)(a1 + 48), a2 + 48);
  }
  return a1;
}

void icu::RelativeDateTimeFormatter::~RelativeDateTimeFormatter(icu::RelativeDateTimeFormatter *this)
{
  *(void *)this = &unk_1EDA51C58;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    icu::SharedObject::removeRef(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    icu::SharedObject::removeRef(v3);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    icu::SharedObject::removeRef(v4);
  }
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    icu::SharedObject::removeRef(v5);
  }
  icu::Locale::~Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48));

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::RelativeDateTimeFormatter::~RelativeDateTimeFormatter(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::RelativeDateTimeFormatter::getNumberFormat(icu::RelativeDateTimeFormatter *this)
{
  return *(void *)(*((void *)this + 2) + 24);
}

uint64_t icu::RelativeDateTimeFormatter::getCapitalizationContext(icu::RelativeDateTimeFormatter *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t icu::RelativeDateTimeFormatter::getFormatStyle(icu::RelativeDateTimeFormatter *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t icu::RelativeDateTimeFormatter::format(icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, double a6)
{
  return sub_18C9BBF7C(a1, (void (*)(void *, uint64_t, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatImpl, 0, a4, a5, a2, a3, a6);
}

uint64_t sub_18C9BBF7C(icu::RelativeDateTimeFormatter *a1, void (*a2)(void *, uint64_t, uint64_t, _OWORD *, int *, double), uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  memset(v21, 0, sizeof(v21));
  icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)v21, 65);
  *(void *)&v21[0] = &unk_1EDA51CD0;
  uint64_t v16 = (void *)((char *)a1 + (a3 >> 1));
  if (a3) {
    a2 = *(void (**)(void *, uint64_t, uint64_t, _OWORD *, int *, double))(*v16 + a2);
  }
  a2(v16, a6, a7, v21, a5, a8);
  if (*a5 <= 0)
  {
    memset(v20, 0, sizeof(v20));
    icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v21 + 8), (uint64_t)v20);
    icu::RelativeDateTimeFormatter::adjustForContext(a1, (icu::UnicodeString *)v20);
    if ((SWORD4(v20[0]) & 0x8000u) == 0) {
      uint64_t v17 = WORD4(v20[0]) >> 5;
    }
    else {
      uint64_t v17 = HIDWORD(v20[0]);
    }
    a4 = icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v20, 0, v17);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v20);
  }
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl((void **)v21);
  return a4;
}

void icu::RelativeDateTimeFormatter::formatImpl(uint64_t a1, int a2, unsigned int a3, uint64_t a4, UErrorCode *a5, double a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    if ((a2 & 0xFFFFFFFD) == 1)
    {
      int v17 = 0;
      int v10 = (icu::FormattedStringBuilder *)(a4 + 8);
      icu::QuantityFormatter::formatAndSelect(*(void **)(*(void *)(a1 + 16) + 24), *(icu::PluralRules **)(*(void *)(a1 + 24) + 24), (int *)(a4 + 8), &v17, a5, a6);
      if (*(int *)a5 > 0) {
        return;
      }
      uint64_t v11 = sub_18C9BAE74(*(void *)(a1 + 8), *(_DWORD *)(a1 + 32), a3, a2 == 3, v17);
      if (v11)
      {
        uint64_t v19 = 0;
        memset(v18, 0, sizeof(v18));
        icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)v18, v11, 64, 0, v12, v13);
        int v14 = icu::FormattedStringBuilder::length(v10);
        icu::number::impl::SimpleModifier::formatAsPrefixSuffix((icu::number::impl::SimpleModifier *)v18, v10, 0, v14, a5);
        *(void *)&v18[0] = &unk_1EDA4F4A8;
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)((char *)v18 + 8));
        icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v18);
        return;
      }
      int v16 = 3;
    }
    else
    {
      int v16 = 1;
    }
    *a5 = v16;
  }
}

uint64_t *icu::RelativeDateTimeFormatter::formatToValue@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  return sub_18C9BC2BC(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatImpl, 0, a4, a2, a3, a5, a6);
}

uint64_t *sub_18C9BC2BC@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  if (result[5])
  {
    *a4 = U_UNSUPPORTED_ERROR;
    *(void *)a7 = &unk_1EDA51C18;
    *(void *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 16;
    return result;
  }
  int v14 = (void (*)(void *, uint64_t, uint64_t, uint64_t *, UErrorCode *, double))a2;
  unint64_t v15 = result;
  uint64_t result = icu::UMemory::operator new(0, (icu::UMemory *)0x130, a2);
  int v16 = result;
  if (result)
  {
    uint64_t result = (uint64_t *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 65);
    *int v16 = (uint64_t)&unk_1EDA51CD0;
    UErrorCode v17 = *a4;
    if (*(int *)a4 <= 0)
    {
      uint64_t v18 = (uint64_t *)((char *)v15 + (a3 >> 1));
      if (a3) {
        int v14 = *(void (**)(void *, uint64_t, uint64_t, uint64_t *, UErrorCode *, double))(*v18
      }
                                                                                                 + v14);
      v14(v18, a5, a6, v16, a4, a8);
      uint64_t result = (uint64_t *)icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v16 + 1), a4);
      *(void *)a7 = &unk_1EDA51C18;
      *(void *)(a7 + 8) = v16;
      *(_DWORD *)(a7 + 16) = 0;
      return result;
    }
  }
  else
  {
    UErrorCode v17 = *a4;
    if (*(int *)a4 <= 0)
    {
      UErrorCode v17 = U_MEMORY_ALLOCATION_ERROR;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  *(void *)a7 = &unk_1EDA51C18;
  *(void *)(a7 + 8) = 0;
  *(_DWORD *)(a7 + 16) = v17;
  if (v16)
  {
    uint64_t v19 = *(uint64_t (**)(uint64_t *))(*v16 + 8);
    return (uint64_t *)v19(v16);
  }
  return result;
}

uint64_t icu::RelativeDateTimeFormatter::formatNumeric(icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, int *a4, double a5)
{
  return sub_18C9BC4C0(a1, (void (*)(void *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatNumericImpl, 0, a3, a4, a2, a5);
}

uint64_t sub_18C9BC4C0(icu::RelativeDateTimeFormatter *a1, void (*a2)(void *, uint64_t, _OWORD *, int *, double), uint64_t a3, uint64_t a4, int *a5, uint64_t a6, double a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(v19, 0, sizeof(v19));
  icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)v19, 65);
  *(void *)&v19[0] = &unk_1EDA51CD0;
  int v14 = (void *)((char *)a1 + (a3 >> 1));
  if (a3) {
    a2 = *(void (**)(void *, uint64_t, _OWORD *, int *, double))(*v14 + a2);
  }
  a2(v14, a6, v19, a5, a7);
  if (*a5 <= 0)
  {
    memset(v18, 0, sizeof(v18));
    icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v19 + 8), (uint64_t)v18);
    icu::RelativeDateTimeFormatter::adjustForContext(a1, (icu::UnicodeString *)v18);
    if ((SWORD4(v18[0]) & 0x8000u) == 0) {
      uint64_t v15 = WORD4(v18[0]) >> 5;
    }
    else {
      uint64_t v15 = HIDWORD(v18[0]);
    }
    a4 = icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v18, 0, v15);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v18);
  }
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl((void **)v19);
  return a4;
}

void icu::RelativeDateTimeFormatter::formatNumericImpl(uint64_t a1, unsigned int a2, uint64_t a3, UErrorCode *a4, double a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    if (a2 >= 0xF)
    {
      int v7 = 1;
LABEL_4:
      *a4 = v7;
      return;
    }
    double v9 = a5;
    if (a5 < 0.0) {
      a5 = -a5;
    }
    int v20 = 0;
    int v10 = (icu::FormattedStringBuilder *)(a3 + 8);
    icu::QuantityFormatter::formatAndSelect(*(void **)(*(void *)(a1 + 16) + 24), *(icu::PluralRules **)(*(void *)(a1 + 24) + 24), (int *)(a3 + 8), &v20, a4, a5);
    if (*(int *)a4 <= 0)
    {
      uint64_t v13 = *(void *)(a1 + 8);
      int v14 = v20;
      while (2)
      {
        uint64_t v15 = v14;
        int v16 = *(_DWORD *)(a1 + 32);
        do
        {
          uint64_t v17 = *(void *)(v13
                          + 1920 * v16
                          + ((unint64_t)a2 << 7)
                          + ((unint64_t)(v9 >= 0.0) << 6)
                          + 8 * v15
                          + 17304);
          if (v17)
          {
            uint64_t v22 = 0;
            memset(v21, 0, sizeof(v21));
            icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)v21, v17, 64, 0, v11, v12);
            int v18 = icu::FormattedStringBuilder::length(v10);
            icu::number::impl::SimpleModifier::formatAsPrefixSuffix((icu::number::impl::SimpleModifier *)v21, v10, 0, v18, a4);
            *(void *)&v21[0] = &unk_1EDA4F4A8;
            icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)((char *)v21 + 8));
            icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v21);
            return;
          }
          int v16 = *(_DWORD *)(v13 + 4 * v16 + 23128);
        }
        while (v16 != -1);
        int v14 = 5;
        if (v15 != 5) {
          continue;
        }
        break;
      }
      int v7 = 3;
      goto LABEL_4;
    }
  }
}

uint64_t *icu::RelativeDateTimeFormatter::formatNumericToValue@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return sub_18C9BC834(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatNumericImpl, 0, a3, a2, a4, a5);
}

uint64_t *sub_18C9BC834@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  if (result[5])
  {
    *a4 = U_UNSUPPORTED_ERROR;
    *(void *)a6 = &unk_1EDA51C18;
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 16;
    return result;
  }
  uint64_t v12 = (void (*)(void *, uint64_t, uint64_t *, UErrorCode *, double))a2;
  uint64_t v13 = result;
  uint64_t result = icu::UMemory::operator new(0, (icu::UMemory *)0x130, a2);
  int v14 = result;
  if (result)
  {
    uint64_t result = (uint64_t *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 65);
    uint64_t *v14 = (uint64_t)&unk_1EDA51CD0;
    UErrorCode v15 = *a4;
    if (*(int *)a4 <= 0)
    {
      int v16 = (uint64_t *)((char *)v13 + (a3 >> 1));
      if (a3) {
        uint64_t v12 = *(void (**)(void *, uint64_t, uint64_t *, UErrorCode *, double))(*v16 + v12);
      }
      v12(v16, a5, v14, a4, a7);
      uint64_t result = (uint64_t *)icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v14 + 1), a4);
      *(void *)a6 = &unk_1EDA51C18;
      *(void *)(a6 + 8) = v14;
      *(_DWORD *)(a6 + 16) = 0;
      return result;
    }
  }
  else
  {
    UErrorCode v15 = *a4;
    if (*(int *)a4 <= 0)
    {
      UErrorCode v15 = U_MEMORY_ALLOCATION_ERROR;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  *(void *)a6 = &unk_1EDA51C18;
  *(void *)(a6 + 8) = 0;
  *(_DWORD *)(a6 + 16) = v15;
  if (v14)
  {
    uint64_t v17 = *(uint64_t (**)(uint64_t *))(*v14 + 8);
    return (uint64_t *)v17(v14);
  }
  return result;
}

uint64_t icu::RelativeDateTimeFormatter::format(icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return sub_18C9BCA2C(a1, (void (*)(void *, uint64_t, uint64_t, _OWORD *, int *))icu::RelativeDateTimeFormatter::formatAbsoluteImpl, 0, a4, a5, a2, a3);
}

uint64_t sub_18C9BCA2C(icu::RelativeDateTimeFormatter *a1, void (*a2)(void *, uint64_t, uint64_t, _OWORD *, int *), uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(v19, 0, sizeof(v19));
  icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)v19, 65);
  *(void *)&v19[0] = &unk_1EDA51CD0;
  int v14 = (void *)((char *)a1 + (a3 >> 1));
  if (a3) {
    a2 = *(void (**)(void *, uint64_t, uint64_t, _OWORD *, int *))(*v14 + a2);
  }
  a2(v14, a6, a7, v19, a5);
  if (*a5 <= 0)
  {
    memset(v18, 0, sizeof(v18));
    icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v19 + 8), (uint64_t)v18);
    icu::RelativeDateTimeFormatter::adjustForContext(a1, (icu::UnicodeString *)v18);
    if ((SWORD4(v18[0]) & 0x8000u) == 0) {
      uint64_t v15 = WORD4(v18[0]) >> 5;
    }
    else {
      uint64_t v15 = HIDWORD(v18[0]);
    }
    a4 = icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v18, 0, v15);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v18);
  }
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl((void **)v19);
  return a4;
}

uint64_t icu::RelativeDateTimeFormatter::formatAbsoluteImpl(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (a2 <= 5 && a3 <= 0xE && (a2 == 5 || a3 != 11))
    {
      uint64_t v5 = *(void *)(result + 8);
      int v6 = *(_DWORD *)(result + 32);
      while (*(unsigned __int16 *)(v5 + 5760 * v6 + 384 * a3 + ((unint64_t)a2 << 6) + 32) <= 0x1Fu)
      {
        int v6 = *(_DWORD *)(v5 + 4 * v6 + 23128);
        if (v6 == -1)
        {
          uint64_t v7 = v5 + 23064;
          return icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(a4 + 8), *(_DWORD *)(a4 + 140), v7, 64, 0, a5);
        }
      }
      uint64_t v7 = v5 + 5760 * v6 + 384 * a3 + ((unint64_t)a2 << 6) + 24;
      return icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(a4 + 8), *(_DWORD *)(a4 + 140), v7, 64, 0, a5);
    }
    else
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return result;
}

uint64_t *icu::RelativeDateTimeFormatter::formatToValue@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  return sub_18C9BCCBC(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatAbsoluteImpl, 0, a4, a2, a3, a5);
}

uint64_t *sub_18C9BCCBC@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if (result[5])
  {
    *a4 = U_UNSUPPORTED_ERROR;
    *(void *)a7 = &unk_1EDA51C18;
    *(void *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 16;
    return result;
  }
  uint64_t v12 = (void (*)(void *, uint64_t, uint64_t, uint64_t *, UErrorCode *))a2;
  uint64_t v13 = result;
  uint64_t result = icu::UMemory::operator new(0, (icu::UMemory *)0x130, a2);
  int v14 = result;
  if (result)
  {
    uint64_t result = (uint64_t *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 65);
    uint64_t *v14 = (uint64_t)&unk_1EDA51CD0;
    UErrorCode v15 = *a4;
    if (*(int *)a4 <= 0)
    {
      int v16 = (uint64_t *)((char *)v13 + (a3 >> 1));
      if (a3) {
        uint64_t v12 = *(void (**)(void *, uint64_t, uint64_t, uint64_t *, UErrorCode *))(*v16 + v12);
      }
      v12(v16, a5, a6, v14, a4);
      uint64_t result = (uint64_t *)icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v14 + 1), a4);
      *(void *)a7 = &unk_1EDA51C18;
      *(void *)(a7 + 8) = v14;
      *(_DWORD *)(a7 + 16) = 0;
      return result;
    }
  }
  else
  {
    UErrorCode v15 = *a4;
    if (*(int *)a4 <= 0)
    {
      UErrorCode v15 = U_MEMORY_ALLOCATION_ERROR;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  *(void *)a7 = &unk_1EDA51C18;
  *(void *)(a7 + 8) = 0;
  *(_DWORD *)(a7 + 16) = v15;
  if (v14)
  {
    uint64_t v17 = *(uint64_t (**)(uint64_t *))(*v14 + 8);
    return (uint64_t *)v17(v14);
  }
  return result;
}

uint64_t icu::RelativeDateTimeFormatter::format(icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, int *a4, double a5)
{
  return sub_18C9BC4C0(a1, (void (*)(void *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatRelativeImpl, 0, a3, a4, a2, a5);
}

void icu::RelativeDateTimeFormatter::formatRelativeImpl(uint64_t a1, unsigned int a2, uint64_t a3, UErrorCode *a4, double a5)
{
  if (*(int *)a4 <= 0)
  {
    char v10 = 0;
    unsigned int v11 = 6;
    char v12 = 1;
    if (a5 > -2.1 && a5 < 2.1)
    {
      char v10 = 0;
      double v13 = 0.5;
      if (a5 * 100.0 < 0.0) {
        double v13 = -0.5;
      }
      int v14 = (int)(a5 * 100.0 + v13);
      char v12 = 1;
      if (v14 < 0)
      {
        if (v14 == -200)
        {
          char v10 = 0;
          char v12 = 0;
          unsigned int v11 = 0;
        }
        else if (v14 == -100)
        {
          char v10 = 0;
          char v12 = 0;
          unsigned int v11 = 1;
        }
      }
      else if (v14)
      {
        if (v14 == 100)
        {
          char v10 = 0;
          char v12 = 0;
          unsigned int v11 = 3;
        }
        else if (v14 == 200)
        {
          char v10 = 0;
          char v12 = 0;
          unsigned int v11 = 4;
        }
      }
      else
      {
        char v12 = 0;
        unsigned int v11 = 2;
        char v10 = 1;
      }
    }
    unsigned int v15 = 10;
    switch(a2)
    {
      case 0u:
        goto LABEL_44;
      case 1u:
        unsigned int v15 = 12;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 2u:
        unsigned int v15 = 9;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 3u:
        unsigned int v15 = 8;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 4u:
        unsigned int v15 = 7;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 5u:
        unsigned int v15 = 13;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 6u:
        unsigned int v15 = 14;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 7u:
        if ((v10 & 1) == 0) {
          goto LABEL_46;
        }
        unsigned int v11 = 5;
        unsigned int v15 = 11;
LABEL_45:
        icu::RelativeDateTimeFormatter::formatAbsoluteImpl(a1, v11, v15, a3, a4);
        if (!icu::FormattedStringBuilder::length((icu::FormattedStringBuilder *)(a3 + 8)))
        {
LABEL_46:
          icu::RelativeDateTimeFormatter::formatNumericImpl(a1, a2, a3, a4, a5);
        }
        break;
      case 8u:
        unsigned int v15 = 0;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 9u:
        unsigned int v15 = 1;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 0xAu:
        unsigned int v15 = 2;
LABEL_44:
        if ((v12 & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_46;
      case 0xBu:
        unsigned int v15 = 3;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 0xCu:
        unsigned int v15 = 4;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 0xDu:
        unsigned int v15 = 5;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 0xEu:
        unsigned int v15 = 6;
        if (v12) {
          goto LABEL_46;
        }
        goto LABEL_45;
      default:
        goto LABEL_46;
    }
  }
}

uint64_t *icu::RelativeDateTimeFormatter::formatToValue@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return sub_18C9BC834(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatRelativeImpl, 0, a3, a2, a4, a5);
}

icu::UnicodeString *icu::RelativeDateTimeFormatter::combineDateAndTime(icu::RelativeDateTimeFormatter *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  return icu::SimpleFormatter::format(*(icu::SimpleFormatter **)(*((void *)this + 1) + 23144), a3, a2, a4, a5);
}

icu::UnicodeString *icu::RelativeDateTimeFormatter::adjustForContext(icu::RelativeDateTimeFormatter *this, icu::UnicodeString *a2)
{
  if (*((void *)this + 5))
  {
    unsigned int v3 = *((unsigned __int16 *)a2 + 4);
    int v4 = (__int16)v3;
    LODWORD(v5) = v3 >> 5;
    if (v4 >= 0) {
      unint64_t v5 = v5;
    }
    else {
      unint64_t v5 = *((unsigned int *)a2 + 3);
    }
    if (v5)
    {
      UChar32 v7 = icu::UnicodeString::char32At((uint64_t *)v5, a2, 0);
      if (u_islower(v7))
      {
        umtx_lock((atomic_ullong *)&unk_1E9192660);
        icu::UnicodeString::toTitle((UChar **)a2, *(icu::BreakIterator **)(*((void *)this + 5) + 24), (icu::RelativeDateTimeFormatter *)((char *)this + 48), 768);
        umtx_unlock((std::mutex **)&unk_1E9192660);
      }
    }
  }
  return a2;
}

uint64_t icu::RelativeDateTimeFormatter::checkNoAdjustForContext(icu::RelativeDateTimeFormatter *this, UErrorCode *a2)
{
  if (!*((void *)this + 5)) {
    return 1;
  }
  uint64_t result = 0;
  *a2 = U_UNSUPPORTED_ERROR;
  return result;
}

void sub_18C9BD220(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  v11[28] = *MEMORY[0x1E4F143B8];
  uint64_t Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    UChar32 v7 = (icu::SharedObject **)Instance;
    int v9 = 0;
    char v10 = 0;
    uint64_t v8 = &unk_1EDA51D88;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18C8D86FC(v7, (const icu::CacheKeyBase *)&v8, 0, (icu::SharedObject **)a2, this);
    uint64_t v8 = &unk_1EDA51D88;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }
}

uint64_t ureldatefmt_openResult(int *a1, unint64_t a2)
{
  if (*a1 > 0) {
    return 0;
  }
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x30, a2);
  if (result)
  {
    *(_DWORD *)uint64_t result = 1430672896;
    *(_DWORD *)(result + 16) = 1179796564;
    *(void *)(result + 24) = &unk_1EDA51C18;
    *(void *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 27;
    *(void *)(result + 8) = result + 24;
  }
  else
  {
    *a1 = 7;
  }
  return result;
}

uint64_t ureldatefmt_resultAsValue(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1179796564) {
      goto LABEL_8;
    }
    int v2 = 3;
  }
  else
  {
    int v2 = 1;
  }
  uint64_t result = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0;
  }
  return result;
}

void ureldatefmt_closeResult(_DWORD *a1)
{
  if (a1 && a1[4] == 1179796564)
  {
    icu::FormattedRelativeDateTime::~FormattedRelativeDateTime((icu::FormattedRelativeDateTime *)(a1 + 6));
    a1[4] = 0;
    *a1 = 0;
    icu::UMemory::operator delete(a1);
  }
}

uint64_t ureldatefmt_open(const char *a1, icu::NumberFormat *a2, unsigned int a3, int a4, const icu::Locale *a5)
{
  v15[28] = *(char **)MEMORY[0x1E4F143B8];
  unint64_t v5 = (uint64_t *)*(unsigned int *)a5;
  if ((int)v5 <= 0)
  {
    double v13 = icu::UMemory::operator new(v5, (icu::UMemory *)0x110, (unint64_t)a2);
    if (v13)
    {
      uint64_t v6 = (uint64_t)v13;
      icu::Locale::Locale(v14, (icu::Locale *)v15, a1, 0, 0, 0);
      icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(v6, v15, a2, a3, a4, a5);
      icu::Locale::~Locale((icu::Locale *)v15);
      if (*(int *)a5 < 1) {
        return v6;
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    else if (*(int *)a5 <= 0)
    {
      uint64_t v6 = 0;
      *(_DWORD *)a5 = 7;
      return v6;
    }
  }
  return 0;
}

uint64_t ureldatefmt_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ureldatefmt_formatNumeric(icu::RelativeDateTimeFormatter *a1, uint64_t a2, char *a3, unsigned int a4, int *a5, double a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 0;
  }
  if (!a3)
  {
    if (!a4) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v6 = 0;
    *a5 = 1;
    return v6;
  }
  if ((a4 & 0x80000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v21 = 0;
  long long v20 = 0u;
  uint64_t v17 = &unk_1EDA47700;
  LOWORD(v18) = 2;
  if (a3) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v17, a3, 0, a4);
  }
  sub_18C9BC4C0(a1, (void (*)(void *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatNumericImpl, 0, (uint64_t)&v17, a5, a2, a6);
  double v13 = (UChar **)*a5;
  if ((int)v13 <= 0)
  {
    int v16 = (UChar *)a3;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v17, &v16, a4, a5);
    unsigned int v15 = v16;
    double v13 = &v15;
  }
  else
  {
    uint64_t v6 = 0;
  }
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v17);
  return v6;
}

void ureldatefmt_formatNumericToResult(uint64_t *a1, uint64_t a2, uint64_t a3, UErrorCode *a4, double a5)
{
  if (*(int *)a4 > 0) {
    return;
  }
  uint64_t v5 = a3;
  if (!a3)
  {
    int v6 = 1;
    goto LABEL_6;
  }
  if (*(_DWORD *)(a3 + 16) != 1179796564)
  {
    int v6 = 3;
LABEL_6:
    uint64_t v5 = 0;
    *a4 = v6;
  }
  sub_18C9BC834(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatNumericImpl, 0, a4, a2, (uint64_t)v8, a5);
  uint64_t v7 = *(void *)(v5 + 32);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *(void *)(v5 + 32) = v9;
  uint64_t v9 = 0;
  *(_DWORD *)(v5 + 40) = v10;
  int v10 = 27;
  icu::FormattedRelativeDateTime::~FormattedRelativeDateTime((icu::FormattedRelativeDateTime *)v8);
}

uint64_t ureldatefmt_format(icu::RelativeDateTimeFormatter *a1, uint64_t a2, char *a3, unsigned int a4, int *a5, double a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 0;
  }
  if (!a3)
  {
    if (!a4) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v6 = 0;
    *a5 = 1;
    return v6;
  }
  if ((a4 & 0x80000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v21 = 0;
  long long v20 = 0u;
  uint64_t v17 = &unk_1EDA47700;
  LOWORD(v18) = 2;
  if (a3) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v17, a3, 0, a4);
  }
  sub_18C9BC4C0(a1, (void (*)(void *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatRelativeImpl, 0, (uint64_t)&v17, a5, a2, a6);
  double v13 = (UChar **)*a5;
  if ((int)v13 <= 0)
  {
    int v16 = (UChar *)a3;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v17, &v16, a4, a5);
    unsigned int v15 = v16;
    double v13 = &v15;
  }
  else
  {
    uint64_t v6 = 0;
  }
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v17);
  return v6;
}

void ureldatefmt_formatToResult(uint64_t *a1, uint64_t a2, uint64_t a3, UErrorCode *a4, double a5)
{
  if (*(int *)a4 > 0) {
    return;
  }
  uint64_t v5 = a3;
  if (!a3)
  {
    int v6 = 1;
    goto LABEL_6;
  }
  if (*(_DWORD *)(a3 + 16) != 1179796564)
  {
    int v6 = 3;
LABEL_6:
    uint64_t v5 = 0;
    *a4 = v6;
  }
  sub_18C9BC834(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatRelativeImpl, 0, a4, a2, (uint64_t)v8, a5);
  uint64_t v7 = *(void *)(v5 + 32);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *(void *)(v5 + 32) = v9;
  uint64_t v9 = 0;
  *(_DWORD *)(v5 + 40) = v10;
  int v10 = 27;
  icu::FormattedRelativeDateTime::~FormattedRelativeDateTime((icu::FormattedRelativeDateTime *)v8);
}

uint64_t ureldatefmt_combineDateAndTime(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, UChar *a6, uint64_t a7, UErrorCode *a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(int *)a8 > 0) {
    return 0;
  }
  if (!a6)
  {
    if (!a7) {
      goto LABEL_13;
    }
    goto LABEL_17;
  }
  if ((a7 & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (a2)
  {
    if (a3 < -1) {
      goto LABEL_17;
    }
  }
  else if (a3)
  {
    goto LABEL_17;
  }
  if (!a4)
  {
    if (!a5) {
      goto LABEL_13;
    }
LABEL_17:
    uint64_t v8 = 0;
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
    return v8;
  }
  if (a5 <= -2) {
    goto LABEL_17;
  }
LABEL_13:
  memset(v25, 0, sizeof(v25));
  uint64_t v22 = a2;
  icu::UnicodeString::UnicodeString(v25, a3 == -1, &v22);
  v19[2] = v22;
  memset(v24, 0, sizeof(v24));
  uint64_t v21 = a4;
  icu::UnicodeString::UnicodeString(v24, a5 == -1, &v21);
  v19[1] = v21;
  memset(v23, 0, sizeof(v23));
  icu::UnicodeString::UnicodeString(v23, a6, 0, a7);
  icu::SimpleFormatter::format(*(icu::SimpleFormatter **)(*(void *)(a1 + 8) + 23144), (const icu::UnicodeString *)v24, (const icu::UnicodeString *)v25, (icu::UnicodeString *)v23, a8);
  uint64_t v8 = 0;
  unsigned int v15 = (void *)*(unsigned int *)a8;
  if ((int)v15 <= 0)
  {
    long long v20 = a6;
    uint64_t v8 = icu::UnicodeString::extract((uint64_t)v23, &v20, a7, (int *)a8);
    v19[0] = v20;
    unsigned int v15 = v19;
  }
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v23);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v24);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
  return v8;
}

uint64_t sub_18C9BDC20(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1EDA51BF0;
  uint64_t v1 = 24;
  do
  {
    uint64_t v2 = result + v1;
    *(void *)uint64_t v2 = &unk_1EDA47700;
    *(_WORD *)(v2 + 8) = 2;
    v1 += 64;
  }
  while (v2 + 64 != result + 17304);
  uint64_t v3 = 0;
  *(void *)(result + 23064) = &unk_1EDA47700;
  *(_WORD *)(result + 23072) = 2;
  *(void *)(result + 23144) = 0;
  int v4 = (_OWORD *)(result + 17368);
  do
  {
    uint64_t v5 = 0;
    int v6 = v4;
    do
    {
      uint64_t v7 = 8;
      uint64_t v8 = v6;
      do
      {
        *(v8 - 4) = 0uLL;
        *v8++ = 0uLL;
        v7 -= 2;
      }
      while (v7);
      ++v5;
      v6 += 8;
    }
    while (v5 != 15);
    ++v3;
    v4 += 120;
  }
  while (v3 != 3);
  *(void *)(result + 23128) = -1;
  *(_DWORD *)(result + 23136) = -1;
  return result;
}

void sub_18C9BDD20(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void *sub_18C9BDD48(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  v78[9] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t v65 = 0;
  long long v66 = a2;
  memset(v64, 0, sizeof(v64));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v64, a3, a5);
  if (*(int *)a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v64, 0, (const char **)&v66, a3);
    if (result)
    {
      int v9 = 0;
      while (1)
      {
        int v10 = (*(uint64_t (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3);
        unsigned int v11 = v66;
        if (v10 != 3) {
          break;
        }
        unsigned int v12 = sub_18C9BE9B4(v66);
        memset(v78, 0, 64);
        LODWORD(v70[0]) = 0;
        *(void *)&long long v75 = (*(uint64_t (**)(icu::ResourceValue *, void *, UErrorCode *))(*(void *)a3 + 40))(a3, v70, a5);
        icu::UnicodeString::UnicodeString(v78, 1, &v75);
        v63[1] = v75;
        uint64_t v13 = *(unsigned int *)a5;
        if ((int)v13 <= 0)
        {
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v75, v78);
          int v14 = WORD4(v75) >> 5;
          if (SWORD4(v75) < 0) {
            int v14 = HIDWORD(v75);
          }
          BOOL v15 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v75, v14 - 7, 7, (uint64_t)L"-narrow-short", 0, 7);
          v63[0] = L"-narrow-short";
          int v16 = (__int16 **)v63;
          if (v15)
          {
            int v17 = 2;
          }
          else
          {
            int v22 = WORD4(v75) >> 5;
            if (SWORD4(v75) < 0) {
              int v22 = HIDWORD(v75);
            }
            int v17 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v75, v22 - 6, 6, (uint64_t)L"-short", 0, 6);
            long long v62 = L"-short";
            int v16 = &v62;
          }
          icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v75);
          if (v12 != v17
            && ((uint64_t v13 = *(void *)(a1 + 24) + 4 * v12 + 23128, *(_DWORD *)v13 != -1)
              ? (BOOL v23 = *(_DWORD *)v13 == v17)
              : (BOOL v23 = 1),
                v23))
          {
            *(_DWORD *)uint64_t v13 = v17;
          }
          else
          {
            uint64_t v13 = 3;
            *a5 = U_INVALID_FORMAT_ERROR;
          }
        }
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v78);
LABEL_60:
        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v64, ++v9, (const char **)&v66, a3);
        if (!result) {
          return result;
        }
      }
      int v18 = sub_18C9BE9B4(v66);
      *(_DWORD *)(a1 + 12) = v18;
      int v19 = strlen(v11);
      if (v18 == 1) {
        int v20 = -6;
      }
      else {
        int v20 = 0;
      }
      if (v18 == 2) {
        int v20 = -7;
      }
      switch(v20 + v19)
      {
        case 3:
          int v21 = 3;
          if (!strncmp(v11, "day", 3uLL)) {
            goto LABEL_59;
          }
          if (!strncmp(v11, "sun", 3uLL))
          {
            int v21 = 8;
          }
          else if (!strncmp(v11, "mon", 3uLL))
          {
            int v21 = 9;
          }
          else if (!strncmp(v11, "tue", 3uLL))
          {
            int v21 = 10;
          }
          else if (!strncmp(v11, "wed", 3uLL))
          {
            int v21 = 11;
          }
          else if (!strncmp(v11, "thu", 3uLL))
          {
            int v21 = 12;
          }
          else if (!strncmp(v11, "fri", 3uLL))
          {
            int v21 = 13;
          }
          else
          {
            if (strncmp(v11, "sat", 3uLL)) {
              goto LABEL_36;
            }
            int v21 = 14;
          }
          goto LABEL_59;
        case 4:
          if (!strncmp(v11, "hour", 4uLL))
          {
            int v21 = 2;
            goto LABEL_59;
          }
          int v21 = 4;
          if (!strncmp(v11, "week", 4uLL)) {
            goto LABEL_59;
          }
          if (!strncmp(v11, "year", 4uLL))
          {
            int v21 = 7;
            goto LABEL_59;
          }
          goto LABEL_36;
        case 5:
          int v21 = 5;
          if (!strncmp(v11, "month", 5uLL)) {
            goto LABEL_59;
          }
          goto LABEL_36;
        case 6:
          if (!strncmp(v11, "minute", 6uLL))
          {
            int v21 = 1;
          }
          else
          {
            if (strncmp(v11, "second", 6uLL))
            {
LABEL_36:
              *(_DWORD *)(a1 + 16) = -1;
              goto LABEL_60;
            }
            int v21 = 0;
          }
LABEL_59:
          *(_DWORD *)(a1 + 16) = v21;
          uint64_t v68 = 0;
          __s1 = v11;
          memset(v67, 0, sizeof(v67));
          (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v67, a3, a5);
          if (*(int *)a5 > 0
            || !icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v67, 0, (const char **)&__s1, a3))
          {
            goto LABEL_60;
          }
          int v24 = 0;
          break;
        case 7:
          if (strncmp(v11, "quarter", 7uLL)) {
            goto LABEL_36;
          }
          int v21 = 6;
          goto LABEL_59;
        default:
          goto LABEL_36;
      }
      while (1)
      {
        if (!strcmp(__s1, "dn")
          && !(*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3)
          && *a5 <= U_ZERO_ERROR)
        {
          unsigned int v26 = sub_18C9BEA34(*(_DWORD *)(a1 + 16));
          if ((v26 & 0x80000000) == 0)
          {
            uint64_t v27 = *(void *)(a1 + 24);
            unsigned int v28 = *(_DWORD *)(a1 + 12);
            if (*(unsigned __int16 *)(v27 + 5760 * v28 + 384 * v26 + 352) <= 0x1Fu)
            {
              uint64_t v29 = (UChar **)(v27 + 5760 * v28 + 384 * v26 + 344);
              LODWORD(v70[0]) = 0;
              *(void *)&long long v75 = (*(uint64_t (**)(icu::ResourceValue *, void *, UErrorCode *))(*(void *)a3 + 32))(a3, v70, a5);
              icu::UnicodeString::UnicodeString(v78, 1, &v75);
              v63[5] = v75;
              icu::UnicodeString::fastCopyFrom(v29, v78);
              icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v78);
            }
          }
        }
        if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3) != 2) {
          goto LABEL_100;
        }
        unsigned int v31 = __s1;
        if (!strcmp(__s1, "relative")) {
          break;
        }
        if (!strcmp(v31, "relativeTime"))
        {
          int v71 = v31;
          memset(v70, 0, 40);
          (*(void (**)(void *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v70, a3, a5);
          if (*(int *)a5 <= 0)
          {
            unsigned int v32 = sub_18C9BEA58(*(_DWORD *)(a1 + 16));
            if ((v32 & 0x80000000) == 0)
            {
              unsigned int v33 = v32;
              if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v70, 0, (const char **)&v71, a3))
              {
                unsigned int v34 = 0;
                uint64_t v61 = v33;
                do
                {
                  int v35 = v71;
                  if (!strcmp(v71, "past"))
                  {
                    int v36 = 0;
                  }
                  else
                  {
                    if (strcmp(v35, "future")) {
                      goto LABEL_85;
                    }
                    int v36 = 1;
                  }
                  *(_DWORD *)(a1 + 8) = v36;
                  unsigned int v72 = (icu::StandardPlural *)v35;
                  uint64_t v77 = 0;
                  long long v75 = 0u;
                  long long v76 = 0u;
                  (*(void (**)(long long *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(&v75, a3, a5);
                  if (*(int *)a5 <= 0
                    && icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)&v75, 0, (const char **)&v72, a3))
                  {
                    unsigned int v37 = 1;
                    while (1)
                    {
                      if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3)) {
                        goto LABEL_90;
                      }
                      unsigned int v40 = icu::StandardPlural::indexOrNegativeFromString(v72, v38);
                      if ((v40 & 0x80000000) != 0) {
                        goto LABEL_90;
                      }
                      uint64_t v42 = *(void *)(a1 + 24)
                          + 1920 * *(unsigned int *)(a1 + 12)
                          + (v61 << 7)
                          + ((uint64_t)*(int *)(a1 + 8) << 6)
                          + 17304;
                      if (*(void *)(v42 + 8 * v40)) {
                        goto LABEL_90;
                      }
                      uint64_t v43 = v40;
                      int v44 = icu::UMemory::operator new(0, (icu::UMemory *)0x48, v41);
                      if (!v44) {
                        break;
                      }
                      unint64_t v45 = v44;
                      int v74 = 0;
                      uint64_t v73 = (char *)(*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32))(a3, &v74, a5);
                      icu::UnicodeString::UnicodeString(v78, 1, &v73);
                      _OWORD v63[4] = v73;
                      v45[1] = (uint64_t)&unk_1EDA47700;
                      *((_WORD *)v45 + 8) = 2;
                      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v45, (const icu::UnicodeString *)v78, 0, 1, 0, a5);
                      *(void *)(v42 + 8 * v43) = v45;
                      icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)v78);
                      if (!*(void *)(v42 + 8 * v43)) {
                        goto LABEL_98;
                      }
LABEL_90:
                      if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)&v75, v37++, (const char **)&v72, a3))goto LABEL_85; {
                    }
                      }
                    *(void *)(v42 + 8 * v43) = 0;
LABEL_98:
                    *a5 = U_MEMORY_ALLOCATION_ERROR;
                    goto LABEL_90;
                  }
LABEL_85:
                  ++v34;
                }
                while (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v70, v34, (const char **)&v71, a3));
              }
            }
          }
        }
LABEL_100:
        if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v67, ++v24, (const char **)&__s1, a3))goto LABEL_60; {
      }
        }
      uint64_t v73 = v31;
      uint64_t v77 = 0;
      long long v75 = 0u;
      long long v76 = 0u;
      (*(void (**)(long long *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(&v75, a3, a5);
      if (*(int *)a5 > 0
        || !icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)&v75, 0, (const char **)&v73, a3))
      {
        goto LABEL_100;
      }
      unsigned int v47 = 1;
      while (1)
      {
        if (!(*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3))
        {
          unsigned int v49 = v73;
          if (!strcmp(v73, "-2"))
          {
            uint64_t v50 = 0;
            goto LABEL_117;
          }
          if (!strcmp(v49, "-1"))
          {
            uint64_t v50 = 1;
            goto LABEL_117;
          }
          if (!strcmp(v49, "0"))
          {
            uint64_t v50 = 2;
            goto LABEL_117;
          }
          if (!strcmp(v49, "1"))
          {
            uint64_t v50 = 3;
LABEL_117:
            unsigned int v51 = *(_DWORD *)(a1 + 16);
            if (sub_18C9BEA58(v51) == 7 && !strcmp(v49, "0"))
            {
              uint64_t v52 = *(void *)(a1 + 24);
              unsigned int v53 = *(_DWORD *)(a1 + 12);
              if (*(unsigned __int16 *)(v52 + 5760 * v53 + 4576) <= 0x1Fu)
              {
                long long v54 = (UChar **)(v52 + 5760 * v53 + 4568);
                LODWORD(v72) = 0;
                v70[0] = (*(uint64_t (**)(icu::ResourceValue *, icu::StandardPlural **, UErrorCode *))(*(void *)a3 + 32))(a3, &v72, a5);
                icu::UnicodeString::UnicodeString(v78, 1, v70);
                v63[3] = v70[0];
                icu::UnicodeString::fastCopyFrom(v54, v78);
                icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)v78);
                unsigned int v51 = *(_DWORD *)(a1 + 16);
              }
            }
            unsigned int v56 = sub_18C9BEA34(v51);
            if ((v56 & 0x80000000) == 0)
            {
              uint64_t v57 = *(void *)(a1 + 24);
              unsigned int v58 = *(_DWORD *)(a1 + 12);
              if (*(unsigned __int16 *)(v57 + 5760 * v58 + 384 * v56 + (v50 << 6) + 32) <= 0x1Fu)
              {
                uint64_t v59 = (UChar **)(v57 + 5760 * v58 + 384 * v56 + (v50 << 6) + 24);
                LODWORD(v72) = 0;
                v70[0] = (*(uint64_t (**)(icu::ResourceValue *, icu::StandardPlural **, UErrorCode *))(*(void *)a3 + 32))(a3, &v72, a5);
                icu::UnicodeString::UnicodeString(v78, 1, v70);
                v63[2] = v70[0];
                icu::UnicodeString::fastCopyFrom(v59, v78);
                icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)v78);
              }
            }
            goto LABEL_105;
          }
          if (!strcmp(v49, "2"))
          {
            uint64_t v50 = 4;
            goto LABEL_117;
          }
        }
LABEL_105:
        if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)&v75, v47++, (const char **)&v73, a3))goto LABEL_100; {
      }
        }
    }
  }
  return result;
}

uint64_t sub_18C9BE9B4(const char *a1)
{
  int v2 = strlen(a1);
  int v3 = v2;
  if (v2 < 7)
  {
    if (v2 != 6) {
      return 0;
    }
  }
  else if (!strcmp(&a1[v2 - 7], "-narrow"))
  {
    return 2;
  }
  return !strcmp(&a1[v3 - 6], "-short");
}

uint64_t sub_18C9BEA34(int a1)
{
  if ((a1 - 1) > 0xD) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_18CA96990[a1 - 1];
  }
}

uint64_t sub_18C9BEA58(unsigned int a1)
{
  if (a1 > 0xE) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_18CA969C8[a1];
  }
}

void sub_18C9BEA78(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA51D88;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));

  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18C9BEACC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA51D88;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18C9BEB24(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)"N3icu25RelativeDateTimeCacheDataE" & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu25RelativeDateTimeCacheDataE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18C9BEB80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((unsigned char *)v4 + 12) = 0;
    uint64_t *v4 = (uint64_t)&unk_1EDA51D88;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18C9BEBE8(uint64_t a1, char *__dst, int a3)
{
  uint64_t result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18C9BEC24(void *a1, void *a2)
{
  BOOL result = sub_18C8D893C(a1, a2);
  if (result)
  {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

void *icu::RelativeDateFormat::getStaticClassID(icu::RelativeDateFormat *this)
{
  return &unk_1E91926B0;
}

void *sub_18C9BEC80()
{
  return &unk_1E91926B0;
}

uint64_t sub_18C9BEC8C(uint64_t a1, uint64_t a2)
{
  int v4 = icu::DateFormat::DateFormat((icu::DateFormat *)a1, (const icu::DateFormat *)a2);
  void *v4 = &unk_1EDA51E08;
  v4[44] = 0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 45), (UChar **)(a2 + 360));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 424), (UChar **)(a2 + 424));
  *(void *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  icu::Locale::Locale((icu::Locale *)(a1 + 504), a2 + 504);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(void *)(a1 + 736) = 0;
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(a2 + 744);
  *(void *)(a1 + 752) = 0;
  uint64_t v6 = *(void *)(a2 + 352);
  if (v6) {
    *(void *)(a1 + 352) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  }
  uint64_t v7 = *(uint64_t **)(a2 + 488);
  if (v7)
  {
    uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x48, v5);
    int v9 = v8;
    if (v8) {
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 1), (UChar **)(*(void *)(a2 + 488) + 8));
    }
    *(void *)(a1 + 488) = v9;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 728);
  if ((int)v10 >= 1)
  {
    unsigned int v11 = uprv_malloc(16 * v10);
    *(void *)(a1 + 736) = v11;
    memcpy(v11, *(const void **)(a2 + 736), 16 * *(int *)(a1 + 728));
  }
  uint64_t v12 = *(void *)(a2 + 752);
  if (v12) {
    *(void *)(a1 + 752) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
  }
  return a1;
}

uint64_t sub_18C9BEDDC(uint64_t a1, uint64_t a2, int a3, const icu::Locale *a4, UErrorCode *a5)
{
  uint64_t v10 = icu::DateFormat::DateFormat((icu::DateFormat *)a1);
  *uint64_t v10 = &unk_1EDA51E08;
  unsigned int v11 = v10 + 45;
  v10[44] = 0;
  v10[45] = &unk_1EDA47700;
  *((_WORD *)v10 + 184) = 2;
  uint64_t v12 = v10 + 53;
  v10[53] = &unk_1EDA47700;
  *((_WORD *)v10 + 216) = 2;
  v10[61] = 0;
  *((_DWORD *)v10 + 124) = a3;
  icu::Locale::Locale((icu::Locale *)(v10 + 63), (uint64_t)a4);
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 736) = 0;
  *(_DWORD *)(a1 + 744) = 0;
  if (*(int *)a5 > 0) {
    return a1;
  }
  if ((a3 - 132) <= 0xFFFFFFFB || (a2 - 4) <= 0xFFFFFFFA)
  {
    int v13 = 1;
LABEL_5:
    *a5 = v13;
    return a1;
  }
  Dateuint64_t Instance = icu::DateFormat::createDateInstance(a3 & 0xFFFFFF7F, a4);
  if (!DateInstance)
  {
    *(void *)(a1 + 352) = 0;
    goto LABEL_15;
  }
  *(void *)(a1 + 352) = v16;
  if (!v16)
  {
LABEL_15:
    int v13 = 16;
    goto LABEL_5;
  }
  (*(void (**)(void *, void *))(*(void *)v16 + 240))(v16, v11);
  if (a2 != -1)
  {
    Timeuint64_t Instance = icu::DateFormat::createTimeInstance(a2, a4);
    if (TimeInstance)
    {
      if (v18)
      {
        int v19 = v18;
        (*(void (**)(void *, void *))(*(void *)v18 + 240))(v18, v12);
        (*(void (**)(void *))(*(void *)v19 + 8))(v19);
      }
    }
  }
  sub_18C9BF044((icu::TimeZone *)a1, 0, a4, a5);
  sub_18C9BF0C0(a1, (int *)a5);
  return a1;
}

uint64_t sub_18C9BF044(icu::TimeZone *a1, icu::Calendar *this, icu::TimeZone *a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return *((void *)a1 + 41);
  }
  if (!this) {
    this = (icu::Calendar *)icu::TimeZone::createDefault(a1);
  }
  uint64_t result = icu::Calendar::createInstance(this, a3, a4, a4);
  *((void *)a1 + 41) = result;
  if (*(int *)a4 >= 1) {
    return *((void *)a1 + 41);
  }
  if (!result) {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void sub_18C9BF0C0(uint64_t a1, int *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 504));
  uint64_t v5 = ures_open(0, BaseName, a2);
  uint64_t v6 = ures_getByKeyWithFallback(v5, "calendar/gregorian/DateTimePatterns%atTime", 0, (UErrorCode *)a2);
  uint64_t v7 = v6;
  if (*a2 < 1)
  {
    ures_getSize(v6);
    unsigned int v23 = 0;
    if ((*(_DWORD *)(a1 + 496) & 0xFFFFFF7F) >= 0x84) {
      unsigned int v10 = 0;
    }
    else {
      unsigned int v10 = *(_DWORD *)(a1 + 496) & 0xFFFFFF7F;
    }
  }
  else
  {
    *a2 = 0;
    uint64_t v8 = ures_getByKeyWithFallback(v5, "calendar/gregorian/DateTimePatterns", 0, (UErrorCode *)a2);
    if (v7) {
      ures_close(v7);
    }
    if (*a2 > 0 || (int Size = ures_getSize(v8), Size <= 8))
    {
      uint64_t v7 = v8;
      goto LABEL_22;
    }
    unsigned int v23 = 0;
    unsigned int v10 = 8;
    if (Size >= 0xD)
    {
      unsigned int v11 = *(_DWORD *)(a1 + 496) & 0xFFFFFF7F;
      if (v11 >= 0x84) {
        unsigned int v10 = 8;
      }
      else {
        unsigned int v10 = v11 + 9;
      }
    }
    uint64_t v7 = v8;
  }
  StringByIndex = ures_getStringByIndex(v7, v10, (int *)&v23, (UErrorCode *)a2);
  int v14 = StringByIndex;
  uint64_t v15 = *a2;
  if ((int)v15 <= 0)
  {
    uint64_t v15 = v23;
    if ((int)v23 >= 3 && !u_strncmp(StringByIndex, (const UChar *)a1_3, 3))
    {
      uint64_t v15 = 1;
      *(unsigned char *)(a1 + 744) = 1;
    }
  }
  int v16 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x48, v13);
  if (v16)
  {
    int v17 = v16;
    int v22 = v14;
    icu::UnicodeString::UnicodeString(v24, 1, &v22);
    v17[1] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v17 + 8) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v17, (const icu::UnicodeString *)v24, 2, 2, 0, (UErrorCode *)a2);
    *(void *)(a1 + 488) = v17;
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v24);
  }
  else
  {
    *(void *)(a1 + 488) = 0;
  }
LABEL_22:
  *(_DWORD *)(a1 + 728) = 6;
  int v19 = (char *)uprv_malloc(0x60uLL);
  *(void *)(a1 + 736) = v19;
  v24[1] = v19;
  uint64_t v25 = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 728);
  v24[0] = &unk_1EDA51F40;
  LODWORD(v25) = v20;
  if ((int)v20 >= 1)
  {
    int v21 = v19 + 8;
    do
    {
      *int v21 = 0;
      *(v21 - 1) = 0xFFFFFFFF00000000;
      v21 += 2;
      --v20;
    }
    while (v20);
  }
  ures_getAllItemsWithFallback(v5, "fields/day/relative", (uint64_t)v24, a2);
  ures_close(v5);
  if (*a2 >= 1) {
    *(_DWORD *)(a1 + 728) = 0;
  }
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v24);
  if (v7) {
    ures_close(v7);
  }
}

void sub_18C9BF384(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA51E08;
  uint64_t v2 = *(void *)(a1 + 352);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unsigned int v3 = *(icu::SimpleFormatter **)(a1 + 488);
  if (v3)
  {
    icu::SimpleFormatter::~SimpleFormatter(v3);
    icu::UMemory::operator delete(v4);
  }
  uprv_free(*(void **)(a1 + 736));
  uint64_t v5 = *(void *)(a1 + 752);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  icu::Locale::~Locale((icu::Locale *)(a1 + 504));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 424));
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 360));

  icu::DateFormat::~DateFormat((icu::DateFormat *)a1);
}

void sub_18C9BF460(uint64_t a1)
{
  sub_18C9BF384(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18C9BF488@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x2F8, a2);
  if (result) {
    return (uint64_t *)sub_18C9BEC8C((uint64_t)result, a1);
  }
  return result;
}

BOOL sub_18C9BF4BC(uint64_t a1, uint64_t a2)
{
  if (!icu::DateFormat::operator==(a1, a2) || *(_DWORD *)(a1 + 496) != *(_DWORD *)(a2 + 496)) {
    return 0;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 368);
  if (v4)
  {
    if ((*(_WORD *)(a2 + 368) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if ((v4 & 0x8000) != 0) {
      int v5 = *(_DWORD *)(a1 + 372);
    }
    else {
      int v5 = v4 >> 5;
    }
    unsigned int v6 = *(unsigned __int16 *)(a2 + 368);
    if ((v6 & 0x8000u) == 0) {
      unsigned int v7 = v6 >> 5;
    }
    else {
      unsigned int v7 = *(_DWORD *)(a2 + 372);
    }
    if ((v6 & 1) != 0
      || v5 != v7
      || !icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 360), (const icu::UnicodeString *)(a2 + 360), v5))
    {
      return 0;
    }
  }
  unsigned int v8 = *(unsigned __int16 *)(a1 + 432);
  if ((v8 & 1) == 0)
  {
    if ((v8 & 0x8000) != 0) {
      int v9 = *(_DWORD *)(a1 + 436);
    }
    else {
      int v9 = v8 >> 5;
    }
    unsigned int v10 = *(unsigned __int16 *)(a2 + 432);
    if ((v10 & 0x8000u) == 0) {
      unsigned int v11 = v10 >> 5;
    }
    else {
      unsigned int v11 = *(_DWORD *)(a2 + 436);
    }
    if ((v10 & 1) == 0
      && v9 == v11
      && icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 424), (const icu::UnicodeString *)(a2 + 424), v9))
    {
      goto LABEL_27;
    }
    return 0;
  }
  if ((*(_WORD *)(a2 + 432) & 1) == 0) {
    return 0;
  }
LABEL_27:

  return icu::Locale::operator==(a1 + 504, a2 + 504);
}

uint64_t sub_18C9BF5D0(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  UErrorCode v37 = U_ZERO_ERROR;
  long long v52 = 0u;
  uint64_t v55 = 0;
  long long v54 = 0u;
  long long v53 = 0u;
  unsigned int v51 = (UChar *)&unk_1EDA47700;
  LOWORD(v52) = 2;
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 208))(a1, 1, &v37);
  int v9 = sub_18C9BFB98(a2, &v37);
  if (v37 <= U_ZERO_ERROR && v9 >= -2)
  {
    uint64_t v16 = (v9 + 2);
    if ((int)v16 < *(_DWORD *)(a1 + 728))
    {
      uint64_t v17 = *(void *)(a1 + 736);
      if (*(_DWORD *)(v17 + 16 * (v9 + 2)) == v9)
      {
        uint64_t v18 = v17 + 16 * v16;
        uint64_t v19 = *(void *)(v18 + 8);
        if (v19)
        {
          uint64_t v20 = *(unsigned int *)(v18 + 4);
          icu::UnicodeString::unBogus((uint64_t)&v51);
          if ((v52 & 0x8000u) == 0) {
            uint64_t v21 = (unsigned __int16)v52 >> 5;
          }
          else {
            uint64_t v21 = DWORD1(v52);
          }
          icu::UnicodeString::doReplace((uint64_t)&v51, 0, v21, v19, 0, v20);
        }
      }
    }
  }
  int v11 = (unsigned __int16)v52 >> 5;
  if ((v52 & 0x8000u) != 0) {
    int v11 = DWORD1(v52);
  }
  if (v11 < 1
    || *(unsigned __int16 *)(a1 + 368) < 0x20u
    || (uint64_t v12 = (uint64_t *)*(unsigned __int16 *)(a1 + 432), v12 >= 0x20)
    && (uint64_t v12 = *(uint64_t **)(a1 + 488)) != 0
    && (uint64_t v12 = (uint64_t *)*(unsigned __int8 *)(a1 + 744), !*(unsigned char *)(a1 + 744)))
  {
    uint64_t v15 = *(void (**)(void))(**(void **)(a1 + 352) + 200);
    goto LABEL_31;
  }
  UChar32 v13 = icu::UnicodeString::char32At(v12, (icu::UnicodeString *)&v51, 0);
  if (u_islower(v13))
  {
    int v14 = *(icu::BreakIterator **)(a1 + 752);
    if (v14)
    {
      if (v8 == 258) {
        goto LABEL_29;
      }
      if (v8 != 260)
      {
        if (v8 != 259 || !*(unsigned char *)(a1 + 746)) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
      if (*(unsigned char *)(a1 + 747)) {
LABEL_29:
      }
        icu::UnicodeString::toTitle(&v51, v14, (const icu::Locale *)(a1 + 504), 768);
    }
  }
LABEL_30:
  uint64_t v15 = *(void (**)(void))(**(void **)(a1 + 352) + 200);
LABEL_31:
  v15();
  if (*(unsigned __int16 *)(a1 + 368) <= 0x1Fu)
  {
    unsigned int v31 = *(void (**)(void))(**(void **)(a1 + 352) + 256);
    goto LABEL_54;
  }
  int v22 = (UChar **)(a1 + 360);
  if (*(unsigned __int16 *)(a1 + 432) < 0x20u || !*(void *)(a1 + 488))
  {
    if ((v52 & 0x8000u) == 0) {
      uint64_t v32 = (unsigned __int16)v52 >> 5;
    }
    else {
      uint64_t v32 = DWORD1(v52);
    }
    if ((int)v32 >= 1)
    {
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v51, 0, v32);
      goto LABEL_55;
    }
    unsigned int v31 = *(void (**)(void))(**(void **)(a1 + 352) + 256);
LABEL_54:
    v31();
    (*(void (**)(void, unsigned char *, uint64_t, uint64_t))(**(void **)(a1 + 352) + 64))(*(void *)(a1 + 352), a2, a3, a4);
    goto LABEL_55;
  }
  long long v47 = 0u;
  uint64_t v50 = 0;
  long long v49 = 0u;
  long long v48 = 0u;
  int v46 = (UChar *)&unk_1EDA47700;
  LOWORD(v47) = 2;
  int v23 = (unsigned __int16)v52 >> 5;
  if ((v52 & 0x8000u) != 0) {
    int v23 = DWORD1(v52);
  }
  if (v23 >= 1)
  {
    int v36 = L"'";
    icu::UnicodeString::UnicodeString(&v41, 1, &v36);
    int v35 = "'";
    icu::UnicodeString::UnicodeString(v38, 1, &v35);
    if ((v52 & 0x8000u) == 0) {
      int32_t v24 = (unsigned __int16)v52 >> 5;
    }
    else {
      int32_t v24 = DWORD1(v52);
    }
    if ((v42 & 0x8000u) == 0) {
      uint64_t v25 = (unsigned __int16)v42 >> 5;
    }
    else {
      uint64_t v25 = DWORD1(v42);
    }
    int v26 = v39 >> 5;
    if ((v39 & 0x8000u) != 0) {
      int v26 = v40;
    }
    int v22 = &v51;
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v51, 0, v24, (const icu::UnicodeString *)&v41, 0, v25, (const icu::UnicodeString *)v38, 0, v26);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v38);
    unsigned int v34 = v35;
    icu::UnicodeString::~UnicodeString(&v34, (icu::UnicodeString *)&v41);
    LOWORD(v41) = 39;
    icu::UnicodeString::doReplace((uint64_t)&v51, 0, 0, (uint64_t)&v41, 0, 1);
    LOWORD(v41) = 39;
    icu::UnicodeString::doAppend((uint64_t)&v51, (uint64_t)&v41, 0, 1);
  }
  icu::UnicodeString::copyFrom(&v46, v22, 0);
  long long v42 = 0u;
  uint64_t v45 = 0;
  long long v44 = 0u;
  long long v43 = 0u;
  unint64_t v41 = &unk_1EDA47700;
  LOWORD(v42) = 2;
  icu::SimpleFormatter::format(*(icu::SimpleFormatter **)(a1 + 488), (const icu::UnicodeString *)(a1 + 424), (const icu::UnicodeString *)&v46, (icu::UnicodeString *)&v41, &v37);
  (*(void (**)(void))(**(void **)(a1 + 352) + 256))();
  (*(void (**)(void, unsigned char *, uint64_t, uint64_t))(**(void **)(a1 + 352) + 64))(*(void *)(a1 + 352), a2, a3, a4);
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v41);
  icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v46);
LABEL_55:
  icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v51);
  return a3;
}

uint64_t sub_18C9BFB98(unsigned char *a1, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  unsigned int v4 = a1;
  int v5 = (icu::Calendar *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 24))(a1);
  icu::Calendar::getNow(v5);
  icu::Calendar::setTimeInMillis((uint64_t)v5, v6, a2);
  LODWORD(v4) = icu::Calendar::get(v4, 0x14u, a2);
  uint64_t v2 = v4 - icu::Calendar::get(v5, 0x14u, a2);
  if (v5) {
    (*(void (**)(icu::Calendar *))(*(void *)v5 + 8))(v5);
  }
  return v2;
}

void *sub_18C9BFC6C(uint64_t a1, UChar **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int16 *)(a1 + 368) <= 0x1Fu)
  {
    int32_t v24 = *(void (**)(void))(**(void **)(a1 + 352) + 256);
LABEL_39:
    v24();
    int v30 = *(uint64_t (**)(void))(**(void **)(a1 + 352) + 88);
    return (void *)v30();
  }
  UErrorCode v8 = *(_DWORD *)(a4 + 8);
  if (*(unsigned __int16 *)(a1 + 432) < 0x20u || !*(void *)(a1 + 488))
  {
    if (*(int *)(a1 + 728) >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      do
      {
        uint64_t v27 = *(void *)(a1 + 736) + v25;
        uint64_t v28 = *(void *)(v27 + 8);
        if (v28)
        {
          uint64_t v29 = (icu::Calendar *)icu::UnicodeString::doCompare((uint64_t)a2, v8, *(_DWORD *)(v27 + 4), v28, 0, *(_DWORD *)(v27 + 4));
          if (!v29)
          {
            v44[0] = U_ZERO_ERROR;
            icu::Calendar::getNow(v29);
            icu::Calendar::setTimeInMillis(a3, v32, v44);
            uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, UErrorCode *))(*(void *)a3 + 56))(a3, 5, *(unsigned int *)(*(void *)(a1 + 736) + v25), v44);
            if (v44[0] < U_ILLEGAL_ARGUMENT_ERROR) {
              *(_DWORD *)(a4 + 8) = *(_DWORD *)(*(void *)(a1 + 736) + v25 + 4) + v8;
            }
            else {
              *(_DWORD *)(a4 + 12) = v8;
            }
            return result;
          }
        }
        ++v26;
        v25 += 16;
      }
      while (v26 < *(int *)(a1 + 728));
    }
    int32_t v24 = *(void (**)(void))(**(void **)(a1 + 352) + 256);
    goto LABEL_39;
  }
  long long v47 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  *(_OWORD *)long long v44 = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v44, a2);
  v38[2] = 0;
  v38[0] = &unk_1EDA4C7F0;
  v38[1] = 0xFFFFFFFFLL;
  UErrorCode v37 = U_ZERO_ERROR;
  int v9 = *(_DWORD *)(a1 + 728);
  if (v9 < 1)
  {
LABEL_21:
    LODWORD(v17) = 0;
    LODWORD(v18) = 0;
    LODWORD(v19) = 0;
    goto LABEL_22;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = *(void *)(a1 + 736) + v10;
    uint64_t v13 = *(void *)(v12 + 8);
    if (v13) {
      break;
    }
LABEL_20:
    ++v11;
    v10 += 16;
    if (v11 >= v9) {
      goto LABEL_21;
    }
  }
  if (v8 < 0)
  {
    UErrorCode v15 = U_ZERO_ERROR;
    if ((v44[2] & 0x8000) != 0) {
      UErrorCode v14 = v44[3];
    }
    else {
      UErrorCode v14 = LOWORD(v44[2]) >> 5;
    }
  }
  else if ((v44[2] & 0x8000) != 0)
  {
    UErrorCode v14 = v44[3];
    if (v44[3] >= v8) {
      UErrorCode v15 = v8;
    }
    else {
      UErrorCode v15 = v44[3];
    }
  }
  else
  {
    UErrorCode v14 = LOWORD(v44[2]) >> 5;
    if (v14 >= v8) {
      UErrorCode v15 = v8;
    }
    else {
      UErrorCode v15 = LOWORD(v44[2]) >> 5;
    }
  }
  uint64_t v16 = icu::UnicodeString::indexOf((uint64_t)v44, v13, 0, *(_DWORD *)(v12 + 4), v15, v14 - v15);
  if ((int)v16 < v8)
  {
    int v9 = *(_DWORD *)(a1 + 728);
    goto LABEL_20;
  }
  uint64_t v19 = v16;
  long long v40 = 0u;
  uint64_t v43 = 0;
  long long v42 = 0u;
  long long v41 = 0u;
  unsigned __int16 v39 = &unk_1EDA47700;
  LOWORD(v40) = 2;
  unsigned int v33 = (icu::Calendar *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  icu::Calendar::getNow(v33);
  icu::Calendar::setTimeInMillis((uint64_t)v33, v34, &v37);
  (*(void (**)(icu::Calendar *, uint64_t, void, UErrorCode *))(*(void *)v33 + 56))(v33, 5, *(unsigned int *)(*(void *)(a1 + 736) + v10), &v37);
  if (v37 > U_ZERO_ERROR)
  {
    *(_DWORD *)(a4 + 12) = v8;
    (*(void (**)(icu::Calendar *))(*(void *)v33 + 8))(v33);
    goto LABEL_47;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 352) + 256))(*(void *)(a1 + 352), a1 + 360);
  (*(void (**)(void, icu::Calendar *, void **, void *))(**(void **)(a1 + 352) + 64))(*(void *)(a1 + 352), v33, &v39, v38);
  uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 736) + v10 + 4);
  if ((v40 & 0x8000u) == 0) {
    uint64_t v17 = (unsigned __int16)v40 >> 5;
  }
  else {
    uint64_t v17 = DWORD1(v40);
  }
  icu::UnicodeString::doReplace((icu::UnicodeString *)v44, v19, v18, (const icu::UnicodeString *)&v39, 0, v17);
  (*(void (**)(icu::Calendar *))(*(void *)v33 + 8))(v33);
  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v39);
LABEL_22:
  long long v40 = 0u;
  uint64_t v43 = 0;
  long long v42 = 0u;
  long long v41 = 0u;
  unsigned __int16 v39 = &unk_1EDA47700;
  LOWORD(v40) = 2;
  icu::SimpleFormatter::format(*(icu::SimpleFormatter **)(a1 + 488), (const icu::UnicodeString *)(a1 + 424), (const icu::UnicodeString *)(a1 + 360), (icu::UnicodeString *)&v39, &v37);
  (*(void (**)(void))(**(void **)(a1 + 352) + 256))();
  (*(void (**)(void, UErrorCode *, uint64_t, uint64_t))(**(void **)(a1 + 352) + 88))(*(void *)(a1 + 352), v44, a3, a4);
  int v20 = *(_DWORD *)(a4 + 8);
  int v21 = *(_DWORD *)(a4 + 12);
  if (v21 >= 0) {
    int v20 = *(_DWORD *)(a4 + 12);
  }
  if (v20 >= (int)v19) {
    unsigned int v22 = v19;
  }
  else {
    unsigned int v22 = v20;
  }
  if (v20 >= (int)v19 + (int)v17) {
    unint64_t v23 = (v18 - v17 + v20);
  }
  else {
    unint64_t v23 = v22;
  }
  if (v21 < 0) {
    *(_DWORD *)(a4 + 8) = v23;
  }
  else {
    *(_DWORD *)(a4 + 12) = v23;
  }
LABEL_47:
  icu::UnicodeString::~UnicodeString((void *)v23, (icu::UnicodeString *)&v39);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v38);
  return icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v44);
}

icu::UnicodeString *sub_18C9C0290(uint64_t a1, icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*((_WORD *)a2 + 4)) {
      __int16 v4 = 2;
    }
    else {
      __int16 v4 = *((_WORD *)a2 + 4) & 0x1F;
    }
    *((_WORD *)a2 + 4) = v4;
    int v5 = (const icu::UnicodeString *)(a1 + 424);
    if (*(unsigned __int16 *)(a1 + 368) <= 0x1Fu)
    {
      int v9 = (UChar **)a2;
    }
    else
    {
      unsigned int v7 = (const icu::UnicodeString *)(a1 + 360);
      if (*(unsigned __int16 *)(a1 + 432) >= 0x20u)
      {
        UErrorCode v8 = *(icu::SimpleFormatter **)(a1 + 488);
        if (v8)
        {
          icu::SimpleFormatter::format(v8, v5, v7, a2, a3);
          return a2;
        }
      }
      int v9 = (UChar **)a2;
      int v5 = v7;
    }
    icu::UnicodeString::copyFrom(v9, (UChar **)v5, 0);
  }
  return a2;
}

icu::UnicodeString *sub_18C9C0328(uint64_t a1, icu::UnicodeString *this, int *a3)
{
  if (*a3 <= 0)
  {
    if (*((_WORD *)this + 4)) {
      __int16 v4 = 2;
    }
    else {
      __int16 v4 = *((_WORD *)this + 4) & 0x1F;
    }
    *((_WORD *)this + 4) = v4;
    icu::UnicodeString::copyFrom((UChar **)this, (UChar **)(a1 + 360), 0);
  }
  return this;
}

icu::UnicodeString *sub_18C9C0380(uint64_t a1, icu::UnicodeString *this, int *a3)
{
  if (*a3 <= 0)
  {
    if (*((_WORD *)this + 4)) {
      __int16 v4 = 2;
    }
    else {
      __int16 v4 = *((_WORD *)this + 4) & 0x1F;
    }
    *((_WORD *)this + 4) = v4;
    icu::UnicodeString::copyFrom((UChar **)this, (UChar **)(a1 + 424), 0);
  }
  return this;
}

icu::UnicodeString *sub_18C9C03D8(icu::UnicodeString *result, UChar **a2, UChar **a3, int *a4)
{
  if (*a4 <= 0)
  {
    int v5 = result;
    icu::UnicodeString::copyFrom((UChar **)result + 45, a2, 0);
    return icu::UnicodeString::copyFrom((UChar **)v5 + 53, a3, 0);
  }
  return result;
}

uint64_t sub_18C9C043C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 352) + 272))();
}

void sub_18C9C046C(uint64_t a1, int a2, int *a3)
{
  icu::DateFormat::setContext(a1, a2, a3);
  if (*a3 <= 0)
  {
    if ((a2 - 259) <= 1 && !*(unsigned char *)(a1 + 745))
    {
      sub_18C9C0558(a1, (icu::Locale *)(a1 + 504));
      *(unsigned char *)(a1 + 745) = 1;
    }
    if (!*(void *)(a1 + 752))
    {
      if (a2 != 258)
      {
        if (a2 == 260)
        {
          if (!*(unsigned char *)(a1 + 747)) {
            return;
          }
        }
        else if (a2 != 259 || !*(unsigned char *)(a1 + 746))
        {
          return;
        }
      }
      *a3 = 0;
      Sentenceuint64_t Instance = icu::BreakIterator::createSentenceInstance((char **)(a1 + 504), (const icu::Locale *)a3, v6, v7);
      *(void *)(a1 + 752) = SentenceInstance;
      if (*a3 >= 1)
      {
        if (SentenceInstance) {
          (*(void (**)(char *))(*(void *)SentenceInstance + 8))(SentenceInstance);
        }
        *(void *)(a1 + 752) = 0;
      }
    }
  }
}

void sub_18C9C0558(uint64_t a1, icu::Locale *a2)
{
  int v9 = (uint64_t *)*MEMORY[0x1E4F143B8];
  icu::Locale::Locale(v9, (icu::Locale *)v8, 0, 0, 0, 0);
  uint64_t BaseName = 0;
  if (!icu::Locale::operator==((uint64_t)a2, (uint64_t)v8)) {
    uint64_t BaseName = (char *)icu::Locale::getBaseName(a2);
  }
  icu::Locale::~Locale((icu::Locale *)v8);
  v8[0] = 0;
  uint64_t v5 = ures_open(0, BaseName, v8);
  ures_getByKeyWithFallback(v5, "contextTransforms/relative", v5, (UErrorCode *)v8);
  if (v8[0] <= 0)
  {
    if (!v5) {
      return;
    }
    int v7 = 0;
    IntVector = ures_getIntVector(v5, &v7, v8);
    if (v8[0] <= 0 && IntVector && v7 >= 2)
    {
      *(unsigned char *)(a1 + 746) = *IntVector;
      *(unsigned char *)(a1 + 747) = IntVector[1];
    }
    goto LABEL_11;
  }
  if (v5) {
LABEL_11:
  }
    ures_close(v5);
}

void sub_18C9C0688(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9C06B0(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = 0;
  uint64_t v18 = a2;
  memset(v16, 0, sizeof(v16));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, uint64_t))(*(void *)a3 + 88))(v16, a3, a5);
  int v15 = 0;
  uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, 0, (const char **)&v18, a3);
  if (result)
  {
    unsigned int v9 = 1;
    do
    {
      int v10 = atoi(v18);
      uint64_t v11 = v10 + 2;
      if ((int)v11 < *(_DWORD *)(a1 + 16))
      {
        uint64_t v12 = *(void *)(a1 + 8);
        if (!*(void *)(v12 + 16 * v11 + 8))
        {
          *(_DWORD *)(v12 + 16 * v11) = v10;
          uint64_t v13 = (*(uint64_t (**)(icu::ResourceValue *, int *, uint64_t))(*(void *)a3 + 32))(a3, &v15, a5);
          uint64_t v14 = *(void *)(a1 + 8) + 16 * v11;
          *(void *)(v14 + 8) = v13;
          *(_DWORD *)(v14 + 4) = v15;
        }
      }
      uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, v9++, (const char **)&v18, a3);
    }
    while (result);
  }
  return result;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher(icu::RegexMatcher *this, const icu::RegexPattern *a2)
{
  *(void *)this = &unk_1EDA51F88;
  __int16 v4 = (UErrorCode *)((char *)this + 316);
  *((_DWORD *)this + 79) = 0;
  icu::RegexMatcher::init(this, (UErrorCode *)this + 79);
  if (*((int *)this + 79) <= 0)
  {
    if (a2)
    {
      *((void *)this + 1) = a2;
      icu::RegexMatcher::init2((uint64_t *)this, *(UText **)(qword_1EB20BEF0 + 3832), v4);
    }
    else
    {
      UErrorCode *v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

double icu::RegexMatcher::init(icu::RegexMatcher *this, UErrorCode *a2)
{
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((unsigned char *)this + 128) = 0;
  *(_WORD *)((char *)this + 129) = 1;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
  *((_WORD *)this + 84) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *(_OWORD *)((char *)this + 264) = xmmword_18CA96A60;
  *((unsigned char *)this + 313) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((UErrorCode *)this + 79) = *a2;
  *((void *)this + 24) = (char *)this + 200;
  *((unsigned char *)this + 312) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  return result;
}

uint64_t *icu::RegexMatcher::init2(uint64_t *this, UText *a2, UErrorCode *a3)
{
  unsigned int v3 = this;
  UErrorCode v4 = *a3;
  if (*(int *)a3 >= 1) {
    goto LABEL_2;
  }
  int v7 = (uint64_t *)*(unsigned int *)(this[1] + 132);
  if ((int)v7 >= 9)
  {
    this = (uint64_t *)uprv_malloc(8 * (void)v7);
    v3[24] = (uint64_t)this;
    if (!this) {
      goto LABEL_9;
    }
  }
  this = icu::UMemory::operator new(v7, (icu::UMemory *)0x20, (unint64_t)a2);
  if (!this)
  {
    v3[22] = 0;
LABEL_9:
    *((_DWORD *)v3 + 79) = 7;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return this;
  }
  v3[22] = (uint64_t)icu::UVector64::UVector64((icu::UVector64 *)this, a3);
  UErrorCode v8 = (char *)icu::RegexMatcher::reset((icu::RegexMatcher *)v3, a2);
  this = (uint64_t *)icu::RegexMatcher::setStackLimit(v8, 0x7A1200u, a3);
  UErrorCode v4 = *a3;
  if (*(int *)a3 >= 1) {
LABEL_2:
  }
    *((_DWORD *)v3 + 79) = v4;
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher(icu::RegexMatcher *this, UChar **a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, UErrorCode *a5)
{
  *(void *)this = &unk_1EDA51F88;
  icu::RegexMatcher::init(this, a5);
  if (*(int *)a5 <= 0)
  {
    memset(&v14, 0, sizeof(v14));
    uint64_t v11 = icu::RegexPattern::compile(a2, a4, &v14, a5, v10);
    *((void *)this + 1) = v11;
    *((void *)this + 2) = v11;
    memset(&v13, 0, sizeof(v13));
    v13.magic = 878368812;
    v13.sizeOfStruct = 144;
    utext_openConstUnicodeString(&v13, (uint64_t)a3, a5);
    icu::RegexMatcher::init2((uint64_t *)this, &v13, a5);
    utext_close(&v13);
    *((unsigned char *)this + 312) = 1;
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher(icu::RegexMatcher *this, UText *a2, UText *a3, UText *a4, UErrorCode *a5)
{
  *(void *)this = &unk_1EDA51F88;
  icu::RegexMatcher::init(this, a5);
  if (*(int *)a5 <= 0)
  {
    memset(&v13, 0, sizeof(v13));
    uint64_t v11 = icu::RegexPattern::compile(a2, a4, &v13, a5, v10);
    *((void *)this + 2) = v11;
    if (*(int *)a5 <= 0)
    {
      *((void *)this + 1) = v11;
      icu::RegexMatcher::init2((uint64_t *)this, a3, a5);
    }
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher(icu::RegexMatcher *this, UChar **a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA51F88;
  icu::RegexMatcher::init(this, a4);
  if (*(int *)a4 <= 0)
  {
    memset(&v11, 0, sizeof(v11));
    unsigned int v9 = icu::RegexPattern::compile(a2, a3, &v11, a4, v8);
    *((void *)this + 2) = v9;
    if (*(int *)a4 <= 0)
    {
      *((void *)this + 1) = v9;
      icu::RegexMatcher::init2((uint64_t *)this, *(UText **)(qword_1EB20BEF0 + 3832), a4);
    }
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher(icu::RegexMatcher *this, UText *a2, UText *a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA51F88;
  icu::RegexMatcher::init(this, a4);
  if (*(int *)a4 <= 0)
  {
    memset(&v11, 0, sizeof(v11));
    unsigned int v9 = icu::RegexPattern::compile(a2, a3, &v11, a4, v8);
    *((void *)this + 2) = v9;
    if (*(int *)a4 <= 0)
    {
      *((void *)this + 1) = v9;
      icu::RegexMatcher::init2((uint64_t *)this, *(UText **)(qword_1EB20BEF0 + 3832), a4);
    }
  }
  return this;
}

void icu::RegexMatcher::~RegexMatcher(icu::RegexMatcher *this)
{
  uint64_t v2 = *((void *)this + 22);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unsigned int v3 = (char *)*((void *)this + 24);
  if (v3 != (char *)this + 200)
  {
    uprv_free(v3);
    *((void *)this + 24) = 0;
  }
  UErrorCode v4 = (icu::RegexPattern *)*((void *)this + 2);
  if (v4)
  {
    icu::RegexPattern::~RegexPattern(v4);
    icu::UMemory::operator delete(v5);
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  int v7 = (UText *)*((void *)this + 4);
  if (v7) {
    utext_close(v7);
  }
  UErrorCode v8 = (UText *)*((void *)this + 5);
  if (v8) {
    utext_close(v8);
  }
  uint64_t v9 = *((void *)this + 40);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 41);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::RegexMatcher::~RegexMatcher(this);

  icu::UMemory::operator delete(v1);
}

icu::RegexMatcher *icu::RegexMatcher::reset(icu::RegexMatcher *this, UText *a2)
{
  unsigned int v3 = (UText *)*((void *)this + 4);
  if (v3 == a2)
  {
LABEL_11:
    uint64_t v9 = *((void *)this + 6);
    *((void *)this + 8) = 0;
    *((void *)this + 9) = v9;
    *((void *)this + 14) = 0;
    *((void *)this + 15) = v9;
    *((void *)this + 10) = 0;
    *((void *)this + 11) = v9;
    *((void *)this + 12) = 0;
    *((void *)this + 13) = v9;
    *((void *)this + 17) = 0;
    *((void *)this + 18) = 0;
    *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
    *((unsigned char *)this + 130) = 0;
    *((_WORD *)this + 84) = 0;
    *(void *)((char *)this + 268) = 0x271000000000;
    *((unsigned char *)this + 312) = 0;
    return this;
  }
  uint64_t v5 = utext_clone(v3, a2, 0, 1, (UErrorCode *)this + 79);
  *((void *)this + 4) = v5;
  if (*(unsigned char *)(*((void *)this + 1) + 184)) {
    *((void *)this + 5) = utext_clone(*((UText **)this + 5), v5, 0, 1, (UErrorCode *)this + 79);
  }
  if (*((int *)this + 79) <= 0)
  {
    *((void *)this + 6) = utext_nativeLength(*((UText **)this + 4));
    uint64_t v6 = *((void *)this + 3);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *((void *)this + 3) = 0;
    uint64_t v7 = *((void *)this + 40);
    if (v7) {
      (*(void (**)(uint64_t, UText *, char *))(*(void *)v7 + 64))(v7, a2, (char *)this + 316);
    }
    uint64_t v8 = *((void *)this + 41);
    if (v8) {
      (*(void (**)(uint64_t, void, char *))(*(void *)v8 + 64))(v8, *((void *)this + 4), (char *)this + 316);
    }
    goto LABEL_11;
  }
  return this;
}

char *icu::RegexMatcher::setStackLimit(char *this, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    unsigned int v3 = this;
    UErrorCode v4 = *((_DWORD *)this + 79);
    if (v4 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
LABEL_3:
      *a3 = v4;
      return this;
    }
    if ((a2 & 0x80000000) != 0)
    {
      UErrorCode v4 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_3;
    }
    uint64_t v6 = *((void *)this + 6);
    *((void *)this + 8) = 0;
    *((void *)this + 9) = v6;
    *((void *)this + 14) = 0;
    *((void *)this + 15) = v6;
    *((void *)this + 10) = 0;
    *((void *)this + 11) = v6;
    *((void *)this + 12) = 0;
    *((void *)this + 13) = v6;
    *((void *)this + 17) = 0;
    *((void *)this + 18) = 0;
    *(_OWORD *)(this + 152) = xmmword_18CA96A50;
    this[130] = 0;
    *((_WORD *)this + 84) = 0;
    *(void *)(this + 268) = 0x271000000000;
    if (a2)
    {
      if ((signed int)(a2 >> 2) <= *(_DWORD *)(*((void *)this + 1) + 128)) {
        int v7 = *(_DWORD *)(*((void *)this + 1) + 128);
      }
      else {
        int v7 = a2 >> 2;
      }
    }
    else
    {
      int v7 = 0;
    }
    this = (char *)icu::UVector64::setMaxCapacity(*((void **)this + 22), v7);
    v3[69] = a2;
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::appendReplacement(icu::RegexMatcher *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *status)
{
  memset(&ut, 0, sizeof(ut));
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  utext_openConstUnicodeString(&ut, (uint64_t)a3, status);
  if (*(int *)status <= 0)
  {
    memset(&v8, 0, sizeof(v8));
    v8.magic = 878368812;
    v8.sizeOfStruct = 144;
    utext_openUnicodeString(&v8, (uint64_t)a2, status);
    if (*(int *)status <= 0)
    {
      icu::RegexMatcher::appendReplacement(this, &v8, &ut, status);
      utext_close(&v8);
    }
    utext_close(&ut);
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::appendReplacement(icu::RegexMatcher *this, UText *ut, UText *a3, UErrorCode *a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    UErrorCode v6 = *((_DWORD *)this + 79);
    if (v6 > U_ZERO_ERROR)
    {
LABEL_3:
      *a4 = v6;
      return this;
    }
    if (!*((unsigned char *)this + 130))
    {
      UErrorCode v6 = U_REGEX_INVALID_STATE;
      goto LABEL_3;
    }
    int64_t v10 = utext_nativeLength(ut);
    int64_t v11 = *((void *)this + 17);
    int64_t v12 = *((void *)this + 20);
    if (v11 > v12)
    {
      UParseError v13 = (UText *)*((void *)this + 4);
      if (!v13->chunkNativeStart
        && (uint64_t v14 = *((void *)this + 6), v14 == v13->chunkNativeLimit)
        && v14 == v13->nativeIndexingLimit)
      {
        v10 += utext_replace(ut, v10, v10, &v13->chunkContents[v12], v11 - v12, a4);
      }
      else
      {
        if (v13->pFuncs->mapNativeIndexToUTF16)
        {
          status[0] = U_ZERO_ERROR;
          int32_t v15 = utext_extract(v13, v12, v11, 0, 0, status);
        }
        else
        {
          int32_t v15 = v11 - v12;
        }
        uint64_t v16 = (UChar *)uprv_malloc(2 * (v15 + 1));
        if (!v16)
        {
          UErrorCode v6 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_3;
        }
        uint64_t v17 = v16;
        utext_extract(*((UText **)this + 4), *((void *)this + 20), *((void *)this + 17), v16, v15 + 1, a4);
        v10 += utext_replace(ut, v10, v10, v17, v15, a4);
        uprv_free(v17);
      }
    }
    *((void *)this + 20) = *((void *)this + 18);
    int64_t chunkNativeStart = a3->chunkNativeStart;
    if (chunkNativeStart > 0
      || (int64_t v19 = -chunkNativeStart, v19 >= a3->nativeIndexingLimit)
      || a3->chunkContents[v19] >> 10 > 0x36u)
    {
      utext_setNativeIndex(a3, 0);
      LODWORD(v19) = a3->chunkOffset;
    }
    else
    {
      a3->uint64_t chunkOffset = v19;
    }
    if ((int)v19 >= a3->chunkLength || (unsigned int v20 = a3->chunkContents[(int)v19], v20 >> 11 > 0x1A)) {
      unsigned int v20 = utext_next32(a3);
    }
    else {
      a3->uint64_t chunkOffset = v19 + 1;
    }
    while (*(int *)a4 <= 0 && v20 != -1)
    {
      if (v20 == 36)
      {
        UChar32 v28 = utext_current32(a3);
        if (v28 == 123)
        {
          uint64_t v55 = 0;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v52 = 0u;
          *(void *)UErrorCode status = &unk_1EDA47700;
          LOWORD(v52) = 2;
          utext_next32(a3);
          uint64_t v29 = (void *)*(unsigned int *)a4;
          if ((int)v29 > 0)
          {
            int v30 = 0;
            goto LABEL_40;
          }
          while (2)
          {
            UChar32 v31 = utext_next32(a3);
            UChar32 v32 = v31;
            if (v31 == -1)
            {
LABEL_45:
              *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
            }
            else
            {
              if ((v31 - 49) >= 9)
              {
                uint64_t v29 = (void *)((v31 & 0xFFFFFFDF) - 65);
                if (v29 > 0x19)
                {
                  if (v31 == 125)
                  {
                    uint64_t v29 = (void *)*((void *)this + 1);
                    uint64_t v47 = v29[24];
                    if (!v47 || (int v30 = uhash_geti(v47, (uint64_t)status)) == 0)
                    {
                      int v30 = 0;
                      *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
                    }
LABEL_40:
                    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)status);
                    goto LABEL_88;
                  }
                  goto LABEL_45;
                }
              }
              icu::UnicodeString::append((uint64_t)status, v31);
            }
            int v30 = 0;
            if (v32 == 125) {
              goto LABEL_40;
            }
            uint64_t v29 = (void *)*(unsigned int *)a4;
            if ((int)v29 >= 1) {
              goto LABEL_40;
            }
            continue;
          }
        }
        if (u_isdigit(v28))
        {
          int v33 = 0;
          int v30 = 0;
          int v34 = *(_DWORD *)(*(void *)(*((void *)this + 1) + 136) + 8);
          while (1)
          {
            uint64_t chunkOffset = a3->chunkOffset;
            if ((int)chunkOffset >= a3->chunkLength || (unsigned int v36 = a3->chunkContents[chunkOffset], v36 >> 11 > 0x1A))
            {
              unsigned int v36 = utext_current32(a3);
              if (v36 == -1) {
                goto LABEL_88;
              }
            }
            if (!u_isdigit(v36)) {
              goto LABEL_88;
            }
            int v37 = u_charDigitValue(v36) + 10 * v30;
            if (v37 > v34) {
              break;
            }
            uint64_t v38 = a3->chunkOffset;
            if ((int)v38 >= a3->chunkLength || a3->chunkContents[v38] >> 11 > 0x1Au) {
              utext_next32(a3);
            }
            else {
              a3->uint64_t chunkOffset = v38 + 1;
            }
            --v33;
            int v30 = v37;
          }
          if (v33)
          {
LABEL_88:
            if (*(int *)a4 <= 0) {
              v10 += icu::RegexMatcher::appendGroup(this, v30, ut, a4);
            }
          }
          else
          {
            *a4 = U_INDEX_OUTOFBOUNDS_ERROR;
          }
        }
        else
        {
          *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
        }
      }
      else
      {
        if (v20 != 92)
        {
          if (!HIWORD(v20))
          {
            LOWORD(status[0]) = v20;
            goto LABEL_72;
          }
          LOWORD(status[0]) = (v20 >> 10) - 10304;
          HIWORD(status[0]) = v20 & 0x3FF | 0xDC00;
LABEL_65:
          unsigned __int16 v39 = ut;
          int64_t v40 = v10;
          int64_t v41 = v10;
          int32_t v42 = 2;
LABEL_73:
          v10 += utext_replace(v39, v40, v41, (const UChar *)status, v42, a4);
          goto LABEL_95;
        }
        uint64_t v21 = a3->chunkOffset;
        if ((int)v21 >= a3->chunkLength || (unsigned int v22 = a3->chunkContents[v21], v22 >> 11 > 0x1A))
        {
          unsigned int v22 = utext_current32(a3);
          if (v22 == -1) {
            return this;
          }
        }
        if ((v22 & 0xFFFFFFDF) == 0x55)
        {
          int32_t offset = 0;
          *(void *)UErrorCode status = a3;
          *(void *)&long long v52 = 0xFFFFFFFFLL;
          unsigned int v23 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18C9B7BDC, &offset, 0x7FFFFFFF, status);
          if (v23 != -1)
          {
            if (!HIWORD(v23))
            {
              v49[0] = v23;
              int32_t v24 = ut;
              int64_t v25 = v10;
              int64_t v26 = v10;
              int32_t v27 = 1;
              goto LABEL_80;
            }
            v49[0] = (v23 >> 10) - 10304;
            v49[1] = v23 & 0x3FF | 0xDC00;
            if (*(int *)a4 <= 0)
            {
              int32_t v24 = ut;
              int64_t v25 = v10;
              int64_t v26 = v10;
              int32_t v27 = 2;
LABEL_80:
              v10 += utext_replace(v24, v25, v26, v49, v27, a4);
            }
            if (v52 == offset)
            {
              int32_t v44 = a3->chunkOffset;
              BOOL v45 = __OFSUB__(v44, 1);
              int32_t v46 = v44 - 1;
              if (v46 < 0 != v45 || a3->chunkContents[v46] >> 11 > 0x1Au) {
                utext_previous32(a3);
              }
              else {
                a3->uint64_t chunkOffset = v46;
              }
            }
            else if (v52 != offset - 1)
            {
              utext_moveIndex32(a3, offset + ~v52);
            }
          }
        }
        else
        {
          uint64_t v43 = a3->chunkOffset;
          if ((int)v43 >= a3->chunkLength || a3->chunkContents[v43] >> 11 > 0x1Au) {
            utext_next32(a3);
          }
          else {
            a3->uint64_t chunkOffset = v43 + 1;
          }
          if (!HIWORD(v22))
          {
            LOWORD(status[0]) = v22;
LABEL_72:
            unsigned __int16 v39 = ut;
            int64_t v40 = v10;
            int64_t v41 = v10;
            int32_t v42 = 1;
            goto LABEL_73;
          }
          LOWORD(status[0]) = (v22 >> 10) - 10304;
          HIWORD(status[0]) = v22 & 0x3FF | 0xDC00;
          if (*(int *)a4 <= 0) {
            goto LABEL_65;
          }
        }
      }
LABEL_95:
      uint64_t v48 = a3->chunkOffset;
      if ((int)v48 >= a3->chunkLength || (unsigned int v20 = a3->chunkContents[v48], v20 >> 11 > 0x1A)) {
        unsigned int v20 = utext_next32(a3);
      }
      else {
        a3->uint64_t chunkOffset = v48 + 1;
      }
    }
  }
  return this;
}

uint64_t icu::RegexMatcher::appendGroup(icu::RegexMatcher *this, int a2, UText *ut, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    UErrorCode v7 = *((_DWORD *)this + 79);
    if (v7 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      uint64_t v4 = 0;
LABEL_5:
      *a4 = v7;
      return v4;
    }
    int64_t v10 = utext_nativeLength(ut);
    if (*((unsigned char *)this + 130))
    {
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v11 = *(void *)(*((void *)this + 1) + 136);
        int v12 = *(_DWORD *)(v11 + 8);
        if (v12 >= a2)
        {
          if (a2)
          {
            if (v12 < 1) {
              int v20 = 0;
            }
            else {
              int v20 = *(_DWORD *)(*(void *)(v11 + 24) + 4 * (a2 - 1));
            }
            uint64_t v23 = *((void *)this + 23) + 8 * v20;
            uint64_t v21 = (int64_t *)(v23 + 16);
            unsigned int v22 = (int64_t *)(v23 + 24);
          }
          else
          {
            uint64_t v21 = (int64_t *)((char *)this + 136);
            unsigned int v22 = (int64_t *)((char *)this + 144);
          }
          int64_t v24 = *v21;
          if ((*v21 & 0x8000000000000000) == 0)
          {
            int64_t v25 = *v22;
            int64_t v26 = (UText *)*((void *)this + 4);
            if (v26->chunkNativeStart
              || (uint64_t v27 = *((void *)this + 6), v27 != v26->chunkNativeLimit)
              || v27 != v26->nativeIndexingLimit)
            {
              if (v26->pFuncs->mapNativeIndexToUTF16)
              {
                UErrorCode status = U_ZERO_ERROR;
                int32_t v28 = utext_extract(v26, v24, v25, 0, 0, &status);
              }
              else
              {
                int32_t v28 = v25 - v24;
              }
              uint64_t v29 = (UChar *)uprv_malloc(2 * (v28 + 1));
              if (v29)
              {
                int v30 = v29;
                utext_extract(*((UText **)this + 4), v24, v25, v29, v28 + 1, a4);
                uint64_t v4 = utext_replace(ut, v10, v10, v30, v28, a4);
                uprv_free(v30);
                return v4;
              }
              uint64_t v4 = 0;
              UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
              goto LABEL_5;
            }
            uint64_t v17 = &v26->chunkContents[v24];
            int32_t v18 = v25 - v24;
            uint64_t v14 = ut;
            int64_t v15 = v10;
            int64_t v16 = v10;
            return utext_replace(v14, v15, v16, v17, v18, a4);
          }
LABEL_12:
          uint64_t v14 = ut;
          int64_t v15 = v10;
          int64_t v16 = v10;
          uint64_t v17 = 0;
          int32_t v18 = 0;
          return utext_replace(v14, v15, v16, v17, v18, a4);
        }
      }
      UErrorCode v13 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
    else
    {
      UErrorCode v13 = U_REGEX_INVALID_STATE;
    }
    *a4 = v13;
    goto LABEL_12;
  }
  return 0;
}

icu::UnicodeString *icu::RegexMatcher::appendTail(icu::RegexMatcher *this, icu::UnicodeString *a2)
{
  UErrorCode status = U_ZERO_ERROR;
  memset(&v5, 0, sizeof(v5));
  v5.magic = 878368812;
  v5.sizeOfStruct = 144;
  utext_openUnicodeString(&v5, (uint64_t)a2, &status);
  if (status <= U_ZERO_ERROR)
  {
    icu::RegexMatcher::appendTail(this, &v5, &status);
    utext_close(&v5);
  }
  return a2;
}

UText *icu::RegexMatcher::appendTail(icu::RegexMatcher *this, UText *ut, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    UErrorCode v6 = *((_DWORD *)this + 79);
    if (v6 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      int64_t v7 = *((void *)this + 6);
      int64_t v8 = *((void *)this + 20);
      if (v7 > v8)
      {
        uint64_t v9 = (UText *)*((void *)this + 4);
        if (!v9->chunkNativeStart && v7 == v9->chunkNativeLimit && v7 == v9->nativeIndexingLimit)
        {
          int64_t v10 = utext_nativeLength(ut);
          utext_replace(ut, v10, v10, (const UChar *)(*(void *)(*((void *)this + 4) + 48) + 2 * *((void *)this + 20)), *((_DWORD *)this + 12) - *((void *)this + 20), status);
        }
        else
        {
          if (v9->pFuncs->mapNativeIndexToUTF16)
          {
            int32_t v11 = utext_extract(v9, v8, v7, 0, 0, status);
            *UErrorCode status = U_ZERO_ERROR;
          }
          else
          {
            int32_t v11 = v7 - v8;
          }
          int v12 = (UChar *)uprv_malloc(2 * v11);
          if (v12)
          {
            UErrorCode v13 = v12;
            utext_extract(*((UText **)this + 4), *((void *)this + 20), *((void *)this + 6), v12, v11, status);
            int64_t v14 = utext_nativeLength(ut);
            utext_replace(ut, v14, v14, v13, v11, status);
            uprv_free(v13);
          }
          else
          {
            *((_DWORD *)this + 79) = 7;
          }
        }
      }
    }
    else
    {
      *UErrorCode status = v6;
    }
  }
  return ut;
}

uint64_t icu::RegexMatcher::end(icu::RegexMatcher *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    if (*((unsigned char *)this + 130))
    {
      if ((*(_DWORD *)(*(void *)(*((void *)this + 1) + 136) + 8) & 0x80000000) == 0) {
        return *((unsigned int *)this + 36);
      }
      UErrorCode v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
    else
    {
      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }
    *a2 = v3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t icu::RegexMatcher::end(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  return icu::RegexMatcher::end64(this, a2, a3);
}

uint64_t icu::RegexMatcher::end64(icu::RegexMatcher *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    if (*((unsigned char *)this + 130))
    {
      if ((*(_DWORD *)(*(void *)(*((void *)this + 1) + 136) + 8) & 0x80000000) == 0) {
        return *((void *)this + 18);
      }
      UErrorCode v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
    else
    {
      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }
    *a2 = v3;
  }
  return -1;
}

uint64_t icu::RegexMatcher::end64(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return -1;
  }
  if (!*((unsigned char *)this + 130))
  {
    UErrorCode v5 = U_REGEX_INVALID_STATE;
    goto LABEL_7;
  }
  if (a2 < 0 || (uint64_t v3 = *(void *)(*((void *)this + 1) + 136), v4 = *(_DWORD *)(v3 + 8), v4 < a2))
  {
    UErrorCode v5 = U_INDEX_OUTOFBOUNDS_ERROR;
LABEL_7:
    *a3 = v5;
    return -1;
  }
  if (a2)
  {
    if (v4 < 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = *(int *)(*(void *)(v3 + 24) + 4 * (a2 - 1)) + 1;
    }
    int64_t v8 = (char *)(*((void *)this + 23) + 8 * v7 + 16);
  }
  else
  {
    int64_t v8 = (char *)this + 144;
  }
  return *(void *)v8;
}

uint64_t icu::RegexMatcher::find(icu::RegexMatcher *this)
{
  if (*((int *)this + 79) > 0) {
    return 0;
  }
  UErrorCode v2 = U_ZERO_ERROR;
  return icu::RegexMatcher::find(this, &v2);
}

uint64_t icu::RegexMatcher::find(icu::RegexMatcher *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  UErrorCode v5 = *((_DWORD *)this + 79);
  if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    char v2 = 0;
LABEL_5:
    *a2 = v5;
    return v2;
  }
  UErrorCode v6 = (UText *)*((void *)this + 4);
  int64_t chunkNativeStart = v6->chunkNativeStart;
  if (chunkNativeStart || (uint64_t v8 = *((void *)this + 6), v8 != v6->chunkNativeLimit) || v8 != v6->nativeIndexingLimit)
  {
    int64_t v10 = *((void *)this + 18);
    int64_t v11 = v10;
    if (!v10) {
      int64_t v11 = *((void *)this + 14);
    }
    if (*((unsigned char *)this + 130))
    {
      *((void *)this + 19) = v10;
      if (*((void *)this + 17) == v10)
      {
        if (v11 >= *((void *)this + 15))
        {
LABEL_34:
          char v2 = 0;
          *((unsigned char *)this + 130) = 0;
          goto LABEL_35;
        }
        uint64_t v12 = v11 - chunkNativeStart;
        if (v12 < 0 || v12 >= v6->nativeIndexingLimit || v6->chunkContents[v12] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v6, v11);
          UErrorCode v6 = (UText *)*((void *)this + 4);
          LODWORD(v12) = v6->chunkOffset;
        }
        else
        {
          v6->int32_t chunkOffset = v12;
        }
        if ((int)v12 >= v6->chunkLength || v6->chunkContents[(int)v12] >> 11 > 0x1Au)
        {
          utext_next32(v6);
          UErrorCode v6 = (UText *)*((void *)this + 4);
          int32_t chunkOffset = v6->chunkOffset;
        }
        else
        {
          int32_t chunkOffset = v12 + 1;
          v6->int32_t chunkOffset = chunkOffset;
        }
        if (chunkOffset <= v6->nativeIndexingLimit)
        {
          int64_t v11 = v6->chunkNativeStart + chunkOffset;
        }
        else
        {
          int64_t v11 = ((uint64_t (*)(void))v6->pFuncs->mapOffsetToNative)();
          UErrorCode v6 = (UText *)*((void *)this + 4);
        }
      }
    }
    else if ((*((void *)this + 19) & 0x8000000000000000) == 0)
    {
LABEL_22:
      char v2 = 0;
LABEL_35:
      *((unsigned char *)this + 168) = 1;
      return v2;
    }
    uint64_t v14 = *((void *)this + 15);
    int64_t v15 = (int *)*((void *)this + 1);
    uint64_t v16 = v15[31];
    if (v6->pFuncs->mapNativeIndexToUTF16)
    {
      int64_t v17 = v14 - ((int)v16 > 0);
      goto LABEL_37;
    }
    int64_t v17 = v14 - v16;
    if (v11 <= v14 - v16)
    {
LABEL_37:
      switch(v15[36])
      {
        case 0:
          icu::RegexMatcher::MatchAt(this, v11, 0, a2);
          char v2 = 0;
          if (*(int *)a2 > 0) {
            return v2;
          }
          while (2)
          {
            if (*((unsigned char *)this + 130)) {
              return 1;
            }
            if (v11 >= v17) {
              goto LABEL_22;
            }
            int32_t v28 = (UText *)*((void *)this + 4);
            uint64_t v29 = v11 - v28->chunkNativeStart;
            if (v29 < 0 || v29 >= v28->nativeIndexingLimit || v28->chunkContents[v29] >> 10 > 0x36u)
            {
              utext_setNativeIndex(v28, v11);
              int32_t v28 = (UText *)*((void *)this + 4);
              LODWORD(v29) = v28->chunkOffset;
            }
            else
            {
              v28->int32_t chunkOffset = v29;
            }
            if ((int)v29 >= v28->chunkLength || v28->chunkContents[(int)v29] >> 11 > 0x1Au)
            {
              utext_next32(v28);
              int32_t v28 = (UText *)*((void *)this + 4);
              int32_t v30 = v28->chunkOffset;
            }
            else
            {
              int32_t v30 = v29 + 1;
              v28->int32_t chunkOffset = v30;
            }
            if (v30 <= v28->nativeIndexingLimit) {
              int64_t v11 = v28->chunkNativeStart + v30;
            }
            else {
              int64_t v11 = ((uint64_t (*)(void))v28->pFuncs->mapOffsetToNative)();
            }
            UChar32 v31 = (unsigned int (*)(void, int64_t))*((void *)this + 37);
            if (!v31 || v31(*((void *)this + 38), v11))
            {
              icu::RegexMatcher::MatchAt(this, v11, 0, a2);
              char v2 = 0;
              if (*(int *)a2 >= 1) {
                return v2;
              }
              continue;
            }
            goto LABEL_188;
          }
        case 1:
        case 5:
          int v18 = v15[42];
          uint64_t v19 = v11 - v6->chunkNativeStart;
          if (v19 < 0 || v19 >= v6->nativeIndexingLimit || v6->chunkContents[v19] >> 10 > 0x36u) {
            utext_setNativeIndex(v6, v11);
          }
          else {
            v6->int32_t chunkOffset = v19;
          }
          while (1)
          {
            int v20 = (UText *)*((void *)this + 4);
            uint64_t v21 = v20->chunkOffset;
            if ((int)v21 >= v20->chunkLength || (unsigned int v22 = v20->chunkContents[v21], v22 >> 11 > 0x1A))
            {
              unsigned int v22 = utext_next32(v20);
              int v20 = (UText *)*((void *)this + 4);
              int32_t v23 = v20->chunkOffset;
            }
            else
            {
              int32_t v23 = v21 + 1;
              v20->int32_t chunkOffset = v23;
            }
            if (v23 <= v20->nativeIndexingLimit) {
              int64_t v24 = v20->chunkNativeStart + v23;
            }
            else {
              int64_t v24 = ((uint64_t (*)(void))v20->pFuncs->mapOffsetToNative)();
            }
            if (v22 == v18)
            {
              icu::RegexMatcher::MatchAt(this, v11, 0, a2);
              if (*(int *)a2 > 0) {
                return 0;
              }
              if (*((unsigned char *)this + 130)) {
                return 1;
              }
              int64_t v25 = (UText *)*((void *)this + 4);
              uint64_t v26 = v24 - v25->chunkNativeStart;
              if (v26 < 0 || v26 >= v25->nativeIndexingLimit || v25->chunkContents[v26] >> 10 > 0x36u) {
                utext_setNativeIndex(v25, v24);
              }
              else {
                v25->int32_t chunkOffset = v26;
              }
            }
            if (v24 > v17) {
              goto LABEL_34;
            }
            uint64_t v27 = (unsigned int (*)(void, int64_t))*((void *)this + 37);
            int64_t v11 = v24;
            if (v27)
            {
              int64_t v11 = v24;
              if (!v27(*((void *)this + 38), v24)) {
                goto LABEL_188;
              }
            }
          }
        case 2:
          uint64_t v32 = v11 - v6->chunkNativeStart;
          if (v32 < 0 || v32 >= v6->nativeIndexingLimit || v6->chunkContents[v32] >> 10 > 0x36u) {
            utext_setNativeIndex(v6, v11);
          }
          else {
            v6->int32_t chunkOffset = v32;
          }
          while (1)
          {
            int v33 = (UText *)*((void *)this + 4);
            uint64_t v34 = v33->chunkOffset;
            if ((int)v34 >= v33->chunkLength || (unsigned int v35 = v33->chunkContents[v34], v35 >> 11 > 0x1A))
            {
              unsigned int v35 = utext_next32(v33);
              int v33 = (UText *)*((void *)this + 4);
              int32_t v36 = v33->chunkOffset;
            }
            else
            {
              int32_t v36 = v34 + 1;
              v33->int32_t chunkOffset = v36;
            }
            if (v36 <= v33->nativeIndexingLimit)
            {
              uint64_t v37 = v33->chunkNativeStart + v36;
              if ((v35 & 0x80000000) != 0) {
                goto LABEL_113;
              }
            }
            else
            {
              uint64_t v37 = ((uint64_t (*)(void))v33->pFuncs->mapOffsetToNative)();
              if ((v35 & 0x80000000) != 0) {
                goto LABEL_113;
              }
            }
            uint64_t v38 = *((void *)this + 1);
            if (v35 > 0xFF)
            {
              if (icu::UnicodeSet::contains(*(icu::UnicodeSet **)(v38 + 160), v35))
              {
LABEL_106:
                icu::RegexMatcher::MatchAt(this, v11, 0, a2);
                if (*(int *)a2 > 0) {
                  return 0;
                }
                if (*((unsigned char *)this + 130)) {
                  return 1;
                }
                unsigned __int16 v39 = (UText *)*((void *)this + 4);
                uint64_t v40 = v11 - v39->chunkNativeStart;
                if (v40 < 0 || v40 >= v39->nativeIndexingLimit || v39->chunkContents[v40] >> 10 > 0x36u) {
                  utext_setNativeIndex(v39, v11);
                }
                else {
                  v39->int32_t chunkOffset = v40;
                }
              }
            }
            else if ((*(unsigned __int8 *)(*(void *)(v38 + 176) + ((unint64_t)v35 >> 3)) >> (v35 & 7)))
            {
              goto LABEL_106;
            }
LABEL_113:
            if (v37 > v17) {
              goto LABEL_34;
            }
            int64_t v41 = (unsigned int (*)(void, uint64_t))*((void *)this + 37);
            int64_t v11 = v37;
            if (v41)
            {
              int64_t v11 = v37;
              if (!v41(*((void *)this + 38), v37)) {
                goto LABEL_188;
              }
            }
          }
        case 3:
          if (v11 <= *((void *)this + 14))
          {
            icu::RegexMatcher::MatchAt(this, v11, 0, a2);
            char v2 = 0;
            if (*(int *)a2 <= 0) {
              return (char)*((unsigned char *)this + 130);
            }
          }
          else
          {
            char v2 = 0;
            *((unsigned char *)this + 130) = 0;
          }
          return v2;
        case 4:
          if (v11 == *((void *)this + 10))
          {
            icu::RegexMatcher::MatchAt(this, v11, 0, a2);
            char v2 = 0;
            if (*(int *)a2 > 0) {
              return v2;
            }
            if (*((unsigned char *)this + 130)) {
              return 1;
            }
            uint64_t v65 = (UText *)*((void *)this + 4);
            uint64_t v66 = v11 - v65->chunkNativeStart;
            if (v66 < 0 || v66 >= v65->nativeIndexingLimit || v65->chunkContents[v66] >> 10 > 0x36u)
            {
              utext_setNativeIndex(v65, v11);
              uint64_t v65 = (UText *)*((void *)this + 4);
              LODWORD(v66) = v65->chunkOffset;
            }
            else
            {
              v65->int32_t chunkOffset = v66;
            }
            if ((int)v66 >= v65->chunkLength || (unsigned int v45 = v65->chunkContents[(int)v66], v45 >> 11 > 0x1A))
            {
              unsigned int v45 = utext_next32(v65);
              uint64_t v65 = (UText *)*((void *)this + 4);
              int32_t v67 = v65->chunkOffset;
            }
            else
            {
              int32_t v67 = v66 + 1;
              v65->int32_t chunkOffset = v67;
            }
            if (v67 <= v65->nativeIndexingLimit) {
              int64_t v11 = v65->chunkNativeStart + v67;
            }
            else {
              int64_t v11 = ((uint64_t (*)(void))v65->pFuncs->mapOffsetToNative)();
            }
          }
          else
          {
            uint64_t v42 = v11 - v6->chunkNativeStart;
            if (v42 < 0 || v42 >= v6->nativeIndexingLimit || v6->chunkContents[v42] >> 10 > 0x36u)
            {
              utext_setNativeIndex(v6, v11);
              UErrorCode v6 = (UText *)*((void *)this + 4);
              LODWORD(v42) = v6->chunkOffset;
            }
            else
            {
              v6->int32_t chunkOffset = v42;
            }
            BOOL v43 = __OFSUB__(v42, 1);
            int v44 = v42 - 1;
            if (v44 < 0 != v43 || (unsigned int v45 = v6->chunkContents[v44], v45 >> 11 > 0x1A))
            {
              unsigned int v45 = utext_previous32(v6);
              UErrorCode v6 = (UText *)*((void *)this + 4);
            }
            else
            {
              v6->int32_t chunkOffset = v44;
            }
            uint64_t v46 = v11 - v6->chunkNativeStart;
            if (v46 < 0 || v46 >= v6->nativeIndexingLimit || v6->chunkContents[v46] >> 10 > 0x36u) {
              utext_setNativeIndex(v6, v11);
            }
            else {
              v6->int32_t chunkOffset = v46;
            }
          }
          if (*(unsigned char *)(*((void *)this + 1) + 24))
          {
            do
            {
              if (v45 == 10)
              {
                icu::RegexMatcher::MatchAt(this, v11, 0, a2);
                if (*(int *)a2 > 0) {
                  return 0;
                }
                if (*((unsigned char *)this + 130)) {
                  return 1;
                }
                uint64_t v59 = (UText *)*((void *)this + 4);
                uint64_t v60 = v11 - v59->chunkNativeStart;
                if (v60 < 0 || v60 >= v59->nativeIndexingLimit || v59->chunkContents[v60] >> 10 > 0x36u) {
                  utext_setNativeIndex(v59, v11);
                }
                else {
                  v59->int32_t chunkOffset = v60;
                }
              }
              if (v11 >= v17) {
                goto LABEL_34;
              }
              uint64_t v61 = (UText *)*((void *)this + 4);
              uint64_t v62 = v61->chunkOffset;
              if ((int)v62 >= v61->chunkLength || (unsigned int v45 = v61->chunkContents[v62], v45 >> 11 > 0x1A))
              {
                unsigned int v45 = utext_next32(v61);
                uint64_t v61 = (UText *)*((void *)this + 4);
                int32_t v63 = v61->chunkOffset;
              }
              else
              {
                int32_t v63 = v62 + 1;
                v61->int32_t chunkOffset = v63;
              }
              if (v63 <= v61->nativeIndexingLimit) {
                int64_t v11 = v61->chunkNativeStart + v63;
              }
              else {
                int64_t v11 = ((uint64_t (*)(void))v61->pFuncs->mapOffsetToNative)();
              }
              uint64_t v64 = (unsigned int (*)(void, int64_t))*((void *)this + 37);
            }
            while (!v64 || v64(*((void *)this + 38), v11));
LABEL_188:
            char v2 = 0;
            UErrorCode v5 = U_REGEX_STOPPED_BY_CALLER;
            goto LABEL_5;
          }
          break;
        default:
          char v2 = 0;
          UErrorCode v5 = U_INTERNAL_PROGRAM_ERROR;
          goto LABEL_5;
      }
      while (1)
      {
        if ((v45 & 0xFFFFDF50) == 0)
        {
          if ((int)v45 > 132)
          {
            if (v45 - 8232 < 2 || v45 == 133) {
              goto LABEL_148;
            }
          }
          else
          {
            if (v45 - 10 < 3) {
              goto LABEL_148;
            }
            if (v45 == 13)
            {
              if (v11 < *((void *)this + 15))
              {
                uint64_t v47 = (UText *)*((void *)this + 4);
                uint64_t v48 = v47->chunkOffset;
                if ((int)v48 >= v47->chunkLength || (unsigned int v49 = v47->chunkContents[v48], v49 >> 11 > 0x1A)) {
                  unsigned int v49 = utext_current32(v47);
                }
                if (v49 == 10)
                {
                  uint64_t v50 = (UText *)*((void *)this + 4);
                  uint64_t v51 = v50->chunkOffset;
                  if ((int)v51 >= v50->chunkLength || v50->chunkContents[v51] >> 11 > 0x1Au)
                  {
                    utext_next32(v50);
                    uint64_t v50 = (UText *)*((void *)this + 4);
                    int32_t v52 = v50->chunkOffset;
                  }
                  else
                  {
                    int32_t v52 = v51 + 1;
                    v50->int32_t chunkOffset = v52;
                  }
                  if (v52 <= v50->nativeIndexingLimit) {
                    int64_t v11 = v50->chunkNativeStart + v52;
                  }
                  else {
                    int64_t v11 = ((uint64_t (*)(void))v50->pFuncs->mapOffsetToNative)();
                  }
                }
              }
LABEL_148:
              icu::RegexMatcher::MatchAt(this, v11, 0, a2);
              if (*(int *)a2 > 0) {
                return 0;
              }
              if (*((unsigned char *)this + 130)) {
                return 1;
              }
              long long v53 = (UText *)*((void *)this + 4);
              uint64_t v54 = v11 - v53->chunkNativeStart;
              if (v54 < 0 || v54 >= v53->nativeIndexingLimit || v53->chunkContents[v54] >> 10 > 0x36u) {
                utext_setNativeIndex(v53, v11);
              }
              else {
                v53->int32_t chunkOffset = v54;
              }
            }
          }
        }
        if (v11 >= v17) {
          goto LABEL_34;
        }
        uint64_t v55 = (UText *)*((void *)this + 4);
        uint64_t v56 = v55->chunkOffset;
        if ((int)v56 >= v55->chunkLength || (unsigned int v45 = v55->chunkContents[v56], v45 >> 11 > 0x1A))
        {
          unsigned int v45 = utext_next32(v55);
          uint64_t v55 = (UText *)*((void *)this + 4);
          int32_t v57 = v55->chunkOffset;
        }
        else
        {
          int32_t v57 = v56 + 1;
          v55->int32_t chunkOffset = v57;
        }
        if (v57 <= v55->nativeIndexingLimit) {
          int64_t v11 = v55->chunkNativeStart + v57;
        }
        else {
          int64_t v11 = ((uint64_t (*)(void))v55->pFuncs->mapOffsetToNative)();
        }
        unsigned int v58 = (unsigned int (*)(void, int64_t))*((void *)this + 37);
        if (v58 && !v58(*((void *)this + 38), v11)) {
          goto LABEL_188;
        }
      }
    }
    goto LABEL_34;
  }

  return icu::RegexMatcher::findUsingChunk(this, a2);
}

uint64_t icu::RegexMatcher::findUsingChunk(icu::RegexMatcher *this, UErrorCode *a2)
{
  uint64_t v4 = *((void *)this + 18);
  int v5 = v4;
  if (!v4) {
    int v5 = *((_DWORD *)this + 28);
  }
  uint64_t v6 = *(void *)(*((void *)this + 4) + 48);
  if (*((unsigned char *)this + 130))
  {
    *((void *)this + 19) = v4;
    if (*((void *)this + 17) == v4)
    {
      if (*((void *)this + 15) <= v5)
      {
LABEL_15:
        char v8 = 0;
        *((unsigned char *)this + 130) = 0;
        goto LABEL_16;
      }
      uint64_t v7 = v5 + 1;
      if ((*(_WORD *)(v6 + 2 * v5) & 0xFC00) == 0xD800 && *((void *)this + 6) != v7)
      {
        if ((*(_WORD *)(v6 + 2 * v7) & 0xFC00) == 0xDC00) {
          v5 += 2;
        }
        else {
          ++v5;
        }
      }
      else
      {
        ++v5;
      }
    }
  }
  else if ((*((void *)this + 19) & 0x8000000000000000) == 0)
  {
LABEL_10:
    char v8 = 0;
LABEL_16:
    *((unsigned char *)this + 168) = 1;
    return v8;
  }
  uint64_t v9 = (_DWORD *)*((void *)this + 1);
  int v10 = *((_DWORD *)this + 30) - v9[31];
  if (v5 > v10) {
    goto LABEL_15;
  }
  switch(v9[36])
  {
    case 0:
      icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
      char v8 = 0;
      if (*(int *)a2 <= 0)
      {
        do
        {
          if (*((unsigned char *)this + 130)) {
            return 1;
          }
          if (v5 >= v10) {
            goto LABEL_10;
          }
          uint64_t v22 = v5 + 1;
          if ((*(_WORD *)(v6 + 2 * v5) & 0xFC00) == 0xD800 && *((void *)this + 15) != v22)
          {
            if ((*(_WORD *)(v6 + 2 * v22) & 0xFC00) == 0xDC00) {
              v5 += 2;
            }
            else {
              ++v5;
            }
          }
          else
          {
            ++v5;
          }
          int32_t v23 = (unsigned int (*)(void, void))*((void *)this + 37);
          if (v23 && !v23(*((void *)this + 38), v5)) {
            goto LABEL_109;
          }
          icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
          char v8 = 0;
        }
        while (*(int *)a2 < 1);
      }
      return v8;
    case 1:
    case 5:
      int v12 = v9[42];
      int v13 = v5;
      while (1)
      {
        uint64_t v14 = v13 + 1;
        int v15 = *(unsigned __int16 *)(v6 + 2 * v13);
        if ((v15 & 0xFC00) == 0xD800 && *((void *)this + 15) != v14)
        {
          int v16 = *(unsigned __int16 *)(v6 + 2 * v14);
          BOOL v17 = (v16 & 0xFC00) == 56320;
          int v18 = (v15 << 10) - 56613888 + v16;
          if (v17) {
            LODWORD(v14) = v13 + 2;
          }
          if (v17) {
            int v15 = v18;
          }
        }
        if (v15 == v12)
        {
          icu::RegexMatcher::MatchChunkAt(this, v13, 0, a2);
          if (*(int *)a2 > 0) {
            return 0;
          }
          if (*((unsigned char *)this + 130)) {
            return 1;
          }
        }
        if ((int)v14 > v10) {
          goto LABEL_15;
        }
        uint64_t v19 = (uint64_t (*)(void, void))*((void *)this + 37);
        int v13 = v14;
        if (v19)
        {
          int v20 = v19(*((void *)this + 38), (int)v14);
          int v13 = v14;
          if (!v20) {
            goto LABEL_109;
          }
        }
      }
    case 2:
      while (2)
      {
        uint64_t v24 = v5 + 1;
        unint64_t v25 = *(unsigned __int16 *)(v6 + 2 * v5);
        if ((v25 & 0xFC00) == 0xD800)
        {
          if (*((void *)this + 15) != v24)
          {
            int v26 = *(unsigned __int16 *)(v6 + 2 * v24);
            BOOL v27 = (v26 & 0xFC00) == 56320;
            int v28 = (v25 << 10) - 56613888 + v26;
            if (v27) {
              LODWORD(v25) = v28;
            }
            if (v27) {
              LODWORD(v24) = v5 + 2;
            }
          }
        }
        else if (v25 <= 0xFF)
        {
          if (((*(unsigned __int8 *)(*(void *)(*((void *)this + 1) + 176) + (v25 >> 3)) >> (v25 & 7)) & 1) == 0) {
            goto LABEL_63;
          }
          goto LABEL_61;
        }
        if (!icu::UnicodeSet::contains(*(icu::UnicodeSet **)(*((void *)this + 1) + 160), v25)) {
          goto LABEL_63;
        }
LABEL_61:
        icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
        if (*(int *)a2 > 0) {
          return 0;
        }
        if (*((unsigned char *)this + 130)) {
          return 1;
        }
LABEL_63:
        if ((int)v24 > v10) {
          goto LABEL_15;
        }
        uint64_t v29 = (unsigned int (*)(void, void))*((void *)this + 37);
        int v5 = v24;
        if (v29)
        {
          int v5 = v24;
          if (!v29(*((void *)this + 38), (int)v24)) {
            goto LABEL_109;
          }
        }
        continue;
      }
    case 3:
      if (*((void *)this + 14) >= v5)
      {
        icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
        char v8 = 0;
        if (*(int *)a2 <= 0) {
          return (char)*((unsigned char *)this + 130);
        }
      }
      else
      {
        char v8 = 0;
        *((unsigned char *)this + 130) = 0;
      }
      return v8;
    case 4:
      if (*((void *)this + 10) != v5) {
        goto LABEL_75;
      }
      icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
      char v8 = 0;
      if (*(int *)a2 > 0) {
        return v8;
      }
      if (*((unsigned char *)this + 130)) {
        return 1;
      }
      if (v5 >= v10) {
        goto LABEL_10;
      }
      uint64_t v36 = v5 + 1;
      if ((*(_WORD *)(v6 + 2 * v5) & 0xFC00) == 0xD800 && *((void *)this + 15) != v36)
      {
        if ((*(_WORD *)(v6 + 2 * v36) & 0xFC00) == 0xDC00) {
          v5 += 2;
        }
        else {
          ++v5;
        }
      }
      else
      {
        ++v5;
      }
LABEL_75:
      if ((*(unsigned char *)(*((void *)this + 1) + 24) & 1) == 0)
      {
        while (1)
        {
          int v30 = *(unsigned __int16 *)(v6 + 2 * v5 - 2);
          if ((v30 & 0xDF50) == 0)
          {
            if (*(unsigned __int16 *)(v6 + 2 * v5 - 2) > 0x84u)
            {
              if ((v30 - 8232) < 2 || v30 == 133) {
                goto LABEL_86;
              }
            }
            else
            {
              if ((v30 - 10) < 3) {
                goto LABEL_86;
              }
              if (v30 == 13)
              {
                if (*((void *)this + 15) > v5 && *(_WORD *)(v6 + 2 * v5) == 10) {
                  ++v5;
                }
LABEL_86:
                icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
                if (*(int *)a2 > 0) {
                  return 0;
                }
                if (*((unsigned char *)this + 130)) {
                  return 1;
                }
              }
            }
          }
          if (v5 >= v10) {
            goto LABEL_15;
          }
          uint64_t v31 = v5 + 1;
          if ((*(_WORD *)(v6 + 2 * v5) & 0xFC00) == 0xD800 && *((void *)this + 15) != v31)
          {
            if ((*(_WORD *)(v6 + 2 * v31) & 0xFC00) == 0xDC00) {
              v5 += 2;
            }
            else {
              ++v5;
            }
          }
          else
          {
            ++v5;
          }
          uint64_t v32 = (unsigned int (*)(void, void))*((void *)this + 37);
          if (v32 && !v32(*((void *)this + 38), v5)) {
            goto LABEL_109;
          }
        }
      }
      LODWORD(v33) = v5;
      do
      {
        uint64_t v34 = (int)v33;
        if (*(_WORD *)(v6 + 2 * (int)v33 - 2) == 10)
        {
          icu::RegexMatcher::MatchChunkAt(this, v33, 0, a2);
          if (*(int *)a2 > 0) {
            return 0;
          }
          if (*((unsigned char *)this + 130)) {
            return 1;
          }
        }
        if ((int)v33 >= v10) {
          goto LABEL_15;
        }
        uint64_t v33 = (int)v33 + 1;
        if ((*(_WORD *)(v6 + 2 * v34) & 0xFC00) == 0xD800
          && *((void *)this + 15) != v33
          && (*(_WORD *)(v6 + 2 * v33) & 0xFC00) == 0xDC00)
        {
          LODWORD(v33) = v34 + 2;
        }
        unsigned int v35 = (unsigned int (*)(void, void))*((void *)this + 37);
      }
      while (!v35 || v35(*((void *)this + 38), (int)v33));
LABEL_109:
      char v8 = 0;
      UErrorCode v21 = U_REGEX_STOPPED_BY_CALLER;
LABEL_110:
      *a2 = v21;
      return v8;
    default:
      char v8 = 0;
      UErrorCode v21 = U_INTERNAL_PROGRAM_ERROR;
      goto LABEL_110;
  }
}

void icu::RegexMatcher::MatchAt(icu::RegexMatcher *this, int64_t a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return;
  }
  uint64_t v8 = *((void *)this + 1);
  __int16 v9 = *(_WORD *)(v8 + 48);
  if ((v9 & 0x11) != 0)
  {
    uint64_t v10 = 0;
  }
  else if ((v9 & 2) != 0)
  {
    uint64_t v10 = v8 + 50;
  }
  else
  {
    uint64_t v10 = *(void *)(v8 + 64);
  }
  uint64_t v11 = *(void *)(*(void *)(v8 + 32) + 24);
  int v12 = *(icu::UVector **)(v8 + 104);
  *((_DWORD *)this + 14) = *(_DWORD *)(v8 + 128);
  int v13 = (int64_t *)icu::RegexMatcher::resetStack(this);
  UErrorCode v14 = *((_DWORD *)this + 79);
  if (v14 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a4 = v14;
    return;
  }
  int v15 = v13;
  v399 = v12;
  uint64_t v400 = v10;
  int v398 = a3;
  int64_t *v13 = a2;
  v13[1] = 0;
  uint64_t v16 = *(unsigned int *)(*((void *)this + 1) + 132);
  if ((int)v16 >= 1) {
    bzero(*((void **)this + 24), 8 * v16);
  }
  while (2)
  {
    int64_t v240 = v15[1];
    uint64_t v241 = *(void *)(v11 + 8 * v240);
    uint64_t v242 = v240 + 1;
    v15[1] = v240 + 1;
    UErrorCode v243 = U_INTERNAL_PROGRAM_ERROR;
    int v244 = v241 & 0xFFFFFF;
    switch(BYTE3(v241))
    {
      case 1:
        goto LABEL_771;
      case 2:
        if (v398 && *v15 != *((void *)this + 15)) {
          goto LABEL_771;
        }
        *((unsigned char *)this + 130) = 1;
        *((void *)this + 19) = *((void *)this + 18);
        *((void *)this + 17) = a2;
        *((void *)this + 18) = *v15;
        goto LABEL_774;
      case 3:
        int64_t v245 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        int32_t v23 = (UText *)*((void *)this + 4);
        uint64_t v24 = v245 - v23->chunkNativeStart;
        if (v24 < 0 || v24 >= v23->nativeIndexingLimit || v23->chunkContents[v24] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v23, v245);
          int32_t v23 = (UText *)*((void *)this + 4);
          LODWORD(v24) = v23->chunkOffset;
        }
        else
        {
          v23->uint64_t chunkOffset = v24;
        }
        if ((int)v24 >= v23->chunkLength || (unsigned int v25 = v23->chunkContents[(int)v24], v25 >> 11 > 0x1A)) {
          unsigned int v25 = utext_next32(v23);
        }
        else {
          v23->uint64_t chunkOffset = v24 + 1;
        }
        if (v25 != v244) {
          goto LABEL_771;
        }
        goto LABEL_305;
      case 4:
        uint64_t v246 = *(void *)(v11 + 8 * v242);
        v15[1] = v240 + 2;
        v247 = (UText *)*((void *)this + 4);
        uint64_t v248 = *v15 - v247->chunkNativeStart;
        if (v248 < 0 || v248 >= v247->nativeIndexingLimit || v247->chunkContents[v248] >> 10 > 0x36u) {
          utext_setNativeIndex(v247, *v15);
        }
        else {
          v247->uint64_t chunkOffset = v248;
        }
        int v355 = 0;
        int v356 = v246 & 0xFFFFFF;
        uint64_t v357 = v400 + 2 * (v241 & 0xFFFFFF);
        while (1)
        {
          unint64_t v141 = (UText *)*((void *)this + 4);
          uint64_t chunkOffset = v141->chunkOffset;
          int nativeIndexingLimit = v141->nativeIndexingLimit;
          if (v355 >= v356) {
            goto LABEL_307;
          }
          if ((int)chunkOffset <= nativeIndexingLimit) {
            uint64_t v358 = v141->chunkNativeStart + chunkOffset;
          }
          else {
            uint64_t v358 = ((uint64_t (*)(void))v141->pFuncs->mapOffsetToNative)();
          }
          if (v358 >= *((void *)this + 15)) {
            goto LABEL_770;
          }
          uint64_t v359 = *((void *)this + 4);
          uint64_t v360 = *(int *)(v359 + 40);
          if ((int)v360 >= *(_DWORD *)(v359 + 44)
            || (unsigned int v361 = *(unsigned __int16 *)(*(void *)(v359 + 48) + 2 * v360), v361 >> 11 > 0x1A))
          {
            unsigned int v361 = utext_next32(*((UText **)this + 4));
          }
          else
          {
            *(_DWORD *)(v359 + 40) = v360 + 1;
          }
          uint64_t v362 = v355 + 1;
          int v363 = *(unsigned __int16 *)(v357 + 2 * v355);
          if ((v363 & 0xFC00) == 0xD800 && v362 != v356)
          {
            int v365 = *(unsigned __int16 *)(v357 + 2 * v362);
            BOOL v366 = (v365 & 0xFC00) == 56320;
            int v367 = (v363 << 10) - 56613888 + v365;
            if (v366) {
              int v363 = v367;
            }
            if (v366) {
              LODWORD(v362) = v355 + 2;
            }
          }
          int v355 = v362;
          if (v363 != v361) {
            goto LABEL_771;
          }
        }
      case 6:
        if (*(int *)a4 > 0) {
          goto LABEL_773;
        }
        uint64_t v249 = *((void *)this + 22);
        int v250 = *((_DWORD *)this + 14);
        int v251 = *(_DWORD *)(v249 + 8);
        int v252 = v251 + v250;
        if (v251 + v250 >= 0 && *(_DWORD *)(v249 + 12) >= v252) {
          goto LABEL_483;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v252, a4))
        {
          int v251 = *(_DWORD *)(v249 + 8);
          int v252 = v251 + v250;
LABEL_483:
          uint64_t v156 = *(void *)(v249 + 24) + 8 * v251;
          *(_DWORD *)(v249 + 8) = v252;
        }
        else
        {
          uint64_t v156 = 0;
        }
        if (*(int *)a4 > 0) {
          goto LABEL_777;
        }
        uint64_t v157 = 0;
        uint64_t v158 = v241 & 0xFFFFFF;
        uint64_t v159 = *((int *)this + 14);
        uint64_t v160 = v156 - 8 * v159;
        uint64_t v161 = -8 * v159;
        do
        {
          *(void *)(v156 + v157) = *(void *)(v160 + v157);
          v157 += 8;
        }
        while (v161 + v157);
        int v162 = *((_DWORD *)this + 68);
        BOOL v124 = __OFSUB__(v162--, 1);
        *((_DWORD *)this + 68) = v162;
        if ((v162 < 0) ^ v124 | (v162 == 0)) {
          icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
        }
        *(void *)(v160 + 8) = v158;
LABEL_357:
        int v15 = (int64_t *)v156;
        goto LABEL_772;
      case 7:
        goto LABEL_772;
      case 8:
        int64_t v253 = *v15;
        v254 = &v15[v244 + 2];
        goto LABEL_587;
      case 9:
        v255 = v15 + 2;
        int64_t v256 = *v15;
        v15[(v241 & 0xFFFFFF) + 2] = v15[(v244 + 2) + 2];
        int v257 = v244 + 1;
        goto LABEL_624;
      case 0xA:
        int64_t v258 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        int v26 = (UText *)*((void *)this + 4);
        uint64_t v27 = v258 - v26->chunkNativeStart;
        if (v27 < 0 || v27 >= v26->nativeIndexingLimit || v26->chunkContents[v27] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v26, v258);
          int v26 = (UText *)*((void *)this + 4);
          LODWORD(v27) = v26->chunkOffset;
        }
        else
        {
          v26->uint64_t chunkOffset = v27;
        }
        if ((int)v27 >= v26->chunkLength || (UChar32 v28 = v26->chunkContents[(int)v27], v28 >> 11 > 0x1A)) {
          UChar32 v28 = utext_next32(v26);
        }
        else {
          v26->uint64_t chunkOffset = v27 + 1;
        }
        uint64_t v109 = v241 & 0x7FFFFF;
        if (v28 > 255) {
          BOOL v110 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1EB20BEF0 + 200 * v109 + 8), v28) == 0;
        }
        else {
          BOOL v110 = ((*(unsigned __int8 *)(qword_1EB20BEF0 + 32 * v109 + (v28 >> 3) + 2608) >> (v28 & 7)) & 1) == 0;
        }
        if (v110) {
          unsigned int v136 = (v241 & 0x800000) >> 23;
        }
        else {
          unsigned int v136 = (v241 & 0x800000) == 0;
        }
        if (!v136) {
          goto LABEL_771;
        }
        goto LABEL_305;
      case 0xB:
        int64_t v259 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        uint64_t v29 = (UText *)*((void *)this + 4);
        uint64_t v30 = v259 - v29->chunkNativeStart;
        if (v30 < 0 || v30 >= v29->nativeIndexingLimit || v29->chunkContents[v30] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v29, v259);
          uint64_t v29 = (UText *)*((void *)this + 4);
          LODWORD(v30) = v29->chunkOffset;
        }
        else
        {
          v29->uint64_t chunkOffset = v30;
        }
        if ((int)v30 >= v29->chunkLength || (UChar32 v31 = v29->chunkContents[(int)v30], v31 >> 11 > 0x1A)) {
          UChar32 v31 = utext_next32(v29);
        }
        else {
          v29->uint64_t chunkOffset = v30 + 1;
        }
        if (v31 > 255)
        {
          int v137 = (icu::UnicodeSet *)icu::UVector::elementAt(v399, v241 & 0xFFFFFF);
          if (icu::UnicodeSet::contains(v137, v31)) {
            goto LABEL_305;
          }
        }
        else if ((*(unsigned __int8 *)(*(void *)(*((void *)this + 1) + 112) + 32 * (v241 & 0xFFFFFF) + (v31 >> 3)) >> (v31 & 7)))
        {
          goto LABEL_305;
        }
        goto LABEL_771;
      case 0xC:
        int64_t v260 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        uint64_t v32 = (UText *)*((void *)this + 4);
        uint64_t v33 = v260 - v32->chunkNativeStart;
        if (v33 < 0 || v33 >= v32->nativeIndexingLimit || v32->chunkContents[v33] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v32, v260);
          uint64_t v32 = (UText *)*((void *)this + 4);
          LODWORD(v33) = v32->chunkOffset;
        }
        else
        {
          v32->uint64_t chunkOffset = v33;
        }
        if ((int)v33 >= v32->chunkLength || (unsigned int v34 = v32->chunkContents[(int)v33], v34 >> 11 > 0x1A)) {
          unsigned int v34 = utext_next32(v32);
        }
        else {
          v32->uint64_t chunkOffset = v33 + 1;
        }
        if ((v34 & 0xFFFFDF50) == 0 && (v34 - 10 < 4 || v34 - 8232 < 2 || v34 == 133)) {
          goto LABEL_771;
        }
        goto LABEL_305;
      case 0xD:
        goto LABEL_589;
      case 0xE:
        goto LABEL_773;
      case 0xF:
        if (*(int *)a4 > 0) {
          goto LABEL_355;
        }
        uint64_t v261 = *((void *)this + 22);
        int v262 = *((_DWORD *)this + 14);
        int v263 = *(_DWORD *)(v261 + 8);
        int v264 = v263 + v262;
        if (v263 + v262 >= 0 && *(_DWORD *)(v261 + 12) >= v264) {
          goto LABEL_506;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v264, a4))
        {
          int v263 = *(_DWORD *)(v261 + 8);
          int v264 = v263 + v262;
LABEL_506:
          uint64_t v156 = *(void *)(v261 + 24) + 8 * v263;
          *(_DWORD *)(v261 + 8) = v264;
        }
        else
        {
          uint64_t v156 = 0;
        }
        if (*(int *)a4 < 1)
        {
          uint64_t v195 = 0;
          uint64_t v196 = *((int *)this + 14);
          uint64_t v197 = v156 - 8 * v196;
          uint64_t v198 = -8 * v196;
          do
          {
            *(void *)(v156 + v195) = *(void *)(v197 + v195);
            v195 += 8;
          }
          while (v198 + v195);
          int v199 = *((_DWORD *)this + 68);
          BOOL v124 = __OFSUB__(v199--, 1);
          *((_DWORD *)this + 68) = v199;
          if ((v199 < 0) ^ v124 | (v199 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          *(void *)(v197 + 8) = v242;
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_355:
          uint64_t v156 = (uint64_t)v15;
        }
        *(void *)(v156 + 8) = v241 & 0xFFFFFF;
        goto LABEL_357;
      case 0x10:
        int isWordBoundary = icu::RegexMatcher::isWordBoundary(this, *v15);
        goto LABEL_667;
      case 0x11:
        int64_t v266 = *v15;
        if (*((unsigned char *)this + 130)) {
          uint64_t v102 = *((void *)this + 18);
        }
        else {
          uint64_t v102 = *((void *)this + 14);
        }
        goto LABEL_131;
      case 0x12:
        uint64_t v267 = *(void *)(v11 + 8 * (v244 - 1)) & 0xFFFFFFLL;
        if (v15[v267 + 2] >= *v15) {
          goto LABEL_772;
        }
        if (*(int *)a4 > 0) {
          goto LABEL_379;
        }
        uint64_t v268 = *((void *)this + 22);
        int v269 = *((_DWORD *)this + 14);
        int v270 = *(_DWORD *)(v268 + 8);
        int v271 = v270 + v269;
        if (v270 + v269 >= 0 && *(_DWORD *)(v268 + 12) >= v271) {
          goto LABEL_516;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v271, a4))
        {
          int v270 = *(_DWORD *)(v268 + 8);
          int v271 = v270 + v269;
LABEL_516:
          uint64_t v188 = (int64_t *)(*(void *)(v268 + 24) + 8 * v270);
          *(_DWORD *)(v268 + 8) = v271;
        }
        else
        {
          uint64_t v188 = 0;
        }
        if (*(int *)a4 < 1)
        {
          uint64_t v200 = 0;
          uint64_t v201 = *((int *)this + 14);
          v202 = &v188[-v201];
          uint64_t v203 = -8 * v201;
          do
          {
            v188[v200] = v202[v200];
            ++v200;
          }
          while (v203 + v200 * 8);
          int v204 = *((_DWORD *)this + 68);
          BOOL v124 = __OFSUB__(v204--, 1);
          *((_DWORD *)this + 68) = v204;
          if ((v204 < 0) ^ v124 | (v204 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v202[1] = v242;
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_379:
          uint64_t v188 = v15;
        }
        v188[1] = v241 & 0xFFFFFF;
        v188[v267 + 2] = *v188;
        goto LABEL_455;
      case 0x13:
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        uint64_t v272 = icu::RegexMatcher::followingGCBoundary(this, *v15, a4);
        *int v15 = v272;
        int64_t v273 = *((void *)this + 15);
        if (v272 >= v273)
        {
          *((unsigned char *)this + 168) = 1;
          *int v15 = v273;
        }
        goto LABEL_772;
      case 0x14:
        if (*v15 < *((void *)this + 11)) {
          goto LABEL_771;
        }
        goto LABEL_442;
      case 0x15:
        int64_t v274 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        unsigned int v35 = (UText *)*((void *)this + 4);
        uint64_t v36 = v274 - v35->chunkNativeStart;
        if (v36 < 0 || v36 >= v35->nativeIndexingLimit || v35->chunkContents[v36] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v35, v274);
          unsigned int v35 = (UText *)*((void *)this + 4);
          LODWORD(v36) = v35->chunkOffset;
        }
        else
        {
          v35->uint64_t chunkOffset = v36;
        }
        if ((int)v36 >= v35->chunkLength || (unsigned int v37 = v35->chunkContents[(int)v36], v37 >> 11 > 0x1A))
        {
          unsigned int v37 = utext_next32(v35);
          unsigned int v35 = (UText *)*((void *)this + 4);
          int32_t v38 = v35->chunkOffset;
        }
        else
        {
          int32_t v38 = v36 + 1;
          v35->uint64_t chunkOffset = v38;
        }
        if (v38 <= v35->nativeIndexingLimit) {
          uint64_t v111 = v35->chunkNativeStart + v38;
        }
        else {
          uint64_t v111 = ((uint64_t (*)(void))v35->pFuncs->mapOffsetToNative)();
        }
        *int v15 = v111;
        if (v37 != 13 || v111 >= *((void *)this + 15)) {
          goto LABEL_772;
        }
        int v138 = (UText *)*((void *)this + 4);
        uint64_t v139 = v138->chunkOffset;
        if ((int)v139 >= v138->chunkLength || (unsigned int v140 = v138->chunkContents[v139], v140 >> 11 > 0x1A)) {
          unsigned int v140 = utext_current32(v138);
        }
        if (v140 != 10) {
          goto LABEL_772;
        }
        unint64_t v141 = (UText *)*((void *)this + 4);
        uint64_t v142 = v141->chunkOffset;
        if ((int)v142 >= v141->chunkLength || v141->chunkContents[v142] >> 11 > 0x1Au)
        {
          utext_next32(v141);
          unint64_t v141 = (UText *)*((void *)this + 4);
          int32_t v143 = v141->chunkOffset;
        }
        else
        {
          int32_t v143 = v142 + 1;
          v141->uint64_t chunkOffset = v143;
        }
        if (v143 > v141->nativeIndexingLimit) {
          goto LABEL_308;
        }
        uint64_t v165 = v141->chunkNativeStart + v143;
        goto LABEL_310;
      case 0x16:
        int64_t v275 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        unsigned __int16 v39 = (UText *)*((void *)this + 4);
        uint64_t v40 = v275 - v39->chunkNativeStart;
        if (v40 < 0 || v40 >= v39->nativeIndexingLimit || v39->chunkContents[v40] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v39, v275);
          unsigned __int16 v39 = (UText *)*((void *)this + 4);
          LODWORD(v40) = v39->chunkOffset;
        }
        else
        {
          v39->uint64_t chunkOffset = v40;
        }
        if ((int)v40 >= v39->chunkLength || (unsigned int v41 = v39->chunkContents[(int)v40], v41 >> 11 > 0x1A)) {
          unsigned int v41 = utext_next32(v39);
        }
        else {
          v39->uint64_t chunkOffset = v40 + 1;
        }
        BOOL v112 = u_charType(v41) == 9;
        goto LABEL_188;
      case 0x17:
        int64_t v266 = *v15;
        uint64_t v102 = *((void *)this + 10);
LABEL_131:
        if (v266 == v102) {
          goto LABEL_772;
        }
        goto LABEL_771;
      case 0x18:
        int64_t v276 = *v15;
        if (*v15 >= *((void *)this + 11)) {
          goto LABEL_442;
        }
        uint64_t v42 = (UText *)*((void *)this + 4);
        uint64_t v43 = v276 - v42->chunkNativeStart;
        if (v43 < 0 || v43 >= v42->nativeIndexingLimit || v42->chunkContents[v43] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v42, v276);
          uint64_t v42 = (UText *)*((void *)this + 4);
          LODWORD(v43) = v42->chunkOffset;
        }
        else
        {
          v42->uint64_t chunkOffset = v43;
        }
        if ((int)v43 >= v42->chunkLength || (unsigned int v44 = v42->chunkContents[(int)v43], v44 >> 11 > 0x1A))
        {
          unsigned int v44 = utext_next32(v42);
          uint64_t v42 = (UText *)*((void *)this + 4);
          int32_t v45 = v42->chunkOffset;
        }
        else
        {
          int32_t v45 = v43 + 1;
          v42->uint64_t chunkOffset = v45;
        }
        if (v45 <= v42->nativeIndexingLimit) {
          uint64_t v113 = v42->chunkNativeStart + v45;
        }
        else {
          uint64_t v113 = ((uint64_t (*)(void))v42->pFuncs->mapOffsetToNative)();
        }
        if (v113 >= *((void *)this + 11))
        {
          if (sub_18C9C58C8(v44))
          {
            if (v44 != 10 || *v15 <= *((void *)this + 10)) {
              goto LABEL_442;
            }
            unsigned int v153 = (UText *)*((void *)this + 4);
            int32_t v154 = v153->chunkOffset;
            BOOL v124 = __OFSUB__(v154, 1);
            int v155 = v154 - 1;
            if (v155 < 0 != v124 || v153->chunkContents[v155] >> 11 > 0x1Au)
            {
              utext_previous32(v153);
              unsigned int v153 = (UText *)*((void *)this + 4);
              int v155 = v153->chunkOffset;
            }
            else
            {
              v153->uint64_t chunkOffset = v155;
            }
            int32_t v229 = v155 - 1;
            if (v155 < 1 || (unsigned int v230 = v153->chunkContents[v229], v230 >> 11 > 0x1A)) {
              unsigned int v230 = utext_previous32(v153);
            }
            else {
              v153->uint64_t chunkOffset = v229;
            }
            if (v230 != 13)
            {
LABEL_442:
              *((_WORD *)this + 84) = 257;
              goto LABEL_772;
            }
          }
        }
        else
        {
          uint64_t v144 = (UText *)*((void *)this + 4);
          uint64_t v145 = v144->chunkOffset;
          if ((int)v145 >= v144->chunkLength || (unsigned int v146 = v144->chunkContents[v145], v146 >> 11 > 0x1A)) {
            unsigned int v146 = utext_next32(v144);
          }
          else {
            v144->uint64_t chunkOffset = v145 + 1;
          }
          if (v44 == 13 && v146 == 10)
          {
            uint64_t v166 = *((void *)this + 4);
            uint64_t v167 = *(int *)(v166 + 40);
            uint64_t v168 = (int)v167 <= *(_DWORD *)(v166 + 28)
                 ? *(void *)(v166 + 32) + v167
                 : (*(uint64_t (**)(void))(*(void *)(v166 + 56) + 64))();
            if (v168 >= *((void *)this + 11)) {
              goto LABEL_442;
            }
          }
        }
        goto LABEL_771;
      case 0x19:
        v15[(v241 & 0xFFFFFF) + 2] = 0;
        v15[1] = v240 + 4;
        int v277 = *(_DWORD *)(v11 + (((v242 << 32) + 0x200000000) >> 29));
        if (*(_DWORD *)(v11 + (((v242 << 32) + 0x100000000) >> 29)) || *(int *)a4 > 0) {
          goto LABEL_409;
        }
        uint64_t v278 = *(void *)(v11 + 8 * (int)v242);
        uint64_t v279 = *((void *)this + 22);
        int v280 = *((_DWORD *)this + 14);
        int v281 = *(_DWORD *)(v279 + 8);
        int v282 = v281 + v280;
        if (v281 + v280 >= 0 && *(_DWORD *)(v279 + 12) >= v282) {
          goto LABEL_544;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v282, a4))
        {
          int v281 = *(_DWORD *)(v279 + 8);
          int v282 = v281 + v280;
LABEL_544:
          int v86 = (int64_t *)(*(void *)(v279 + 24) + 8 * v281);
          *(_DWORD *)(v279 + 8) = v282;
        }
        else
        {
          int v86 = 0;
        }
        if (*(int *)a4 < 1)
        {
          uint64_t v213 = 0;
          uint64_t v214 = *((int *)this + 14);
          uint64_t v215 = &v86[-v214];
          uint64_t v216 = -8 * v214;
          do
          {
            v86[v213] = v215[v213];
            ++v213;
          }
          while (v216 + v213 * 8);
          int v217 = *((_DWORD *)this + 68);
          BOOL v124 = __OFSUB__(v217--, 1);
          *((_DWORD *)this + 68) = v217;
          if ((v217 < 0) ^ v124 | (v217 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v215[1] = (v278 & 0xFFFFFF) + 1;
          if (v277) {
            goto LABEL_410;
          }
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_409:
          int v86 = v15;
          if (v277)
          {
LABEL_410:
            if (v277 == -1) {
              v86[(v244 + 1) + 2] = *v86;
            }
            goto LABEL_435;
          }
        }
LABEL_771:
        uint64_t v395 = *((void *)this + 22);
        uint64_t v396 = *((int *)this + 14);
        unsigned int v397 = (*(_DWORD *)(v395 + 8) - v396) & ~((*(_DWORD *)(v395 + 8) - (int)v396) >> 31);
        *(_DWORD *)(v395 + 8) = v397;
        int v15 = (int64_t *)(*(void *)(v395 + 24) + 8 * v397 - 8 * v396);
        goto LABEL_772;
      case 0x1A:
        v15[(v241 & 0xFFFFFF) + 2] = 0;
        uint64_t v283 = v240 + 4;
        v15[1] = v240 + 4;
        uint64_t v284 = *(void *)(v11 + 8 * (int)v242);
        uint64_t v285 = *(unsigned int *)(v11 + (((v242 << 32) + 0x100000000) >> 29));
        int v286 = *(_DWORD *)(v11 + (((v242 << 32) + 0x200000000) >> 29));
        if (v286 == -1)
        {
          v15[(v244 + 1) + 2] = *v15;
          if (v285) {
            goto LABEL_772;
          }
LABEL_134:
          int v15 = (int64_t *)sub_18C9CA248(this, (uint64_t)v15, v283, a4);
LABEL_135:
          uint64_t v81 = (v284 & 0xFFFFFF) + 1;
          goto LABEL_345;
        }
        if (!*(_DWORD *)(v11 + (((v242 << 32) + 0x100000000) >> 29)))
        {
          if (!v286) {
            goto LABEL_135;
          }
          goto LABEL_134;
        }
        goto LABEL_772;
      case 0x1B:
        int64_t v287 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        uint64_t v46 = (UText *)*((void *)this + 4);
        uint64_t v47 = v287 - v46->chunkNativeStart;
        if (v47 < 0 || v47 >= v46->nativeIndexingLimit || v46->chunkContents[v47] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v46, v287);
          uint64_t v46 = (UText *)*((void *)this + 4);
          LODWORD(v47) = v46->chunkOffset;
        }
        else
        {
          v46->uint64_t chunkOffset = v47;
        }
        if ((int)v47 >= v46->chunkLength || (unsigned int v48 = v46->chunkContents[(int)v47], v48 >> 11 > 0x1A)) {
          unsigned int v48 = utext_next32(v46);
        }
        else {
          v46->uint64_t chunkOffset = v47 + 1;
        }
        if (v48 == 10) {
          goto LABEL_771;
        }
        goto LABEL_305;
      case 0x1C:
        uint64_t v288 = *(void *)(v11 + 8 * (v241 & 0xFFFFFF)) & 0xFFFFFFLL;
        v289 = &v15[v288];
        uint64_t v290 = *(void *)(v11 + 8 * (v244 + 2));
        uint64_t v291 = *(void *)(v11 + 8 * (v244 + 3));
        uint64_t v292 = v289[2] + 1;
        v289[2] = v292;
        if (v291 != -1 && v292 >= (unint64_t)v291) {
          goto LABEL_772;
        }
        if (v292 >= (int)v290)
        {
          if (v291 == -1)
          {
            int v129 = &v15[v288];
            int64_t v131 = v129[3];
            int v130 = v129 + 3;
            if (*v15 == v131) {
              goto LABEL_772;
            }
            *int v130 = *v15;
          }
          int v15 = (int64_t *)sub_18C9CA248(this, (uint64_t)v15, v242, a4);
        }
        else
        {
          int v294 = *((_DWORD *)this + 68);
          BOOL v124 = __OFSUB__(v294--, 1);
          *((_DWORD *)this + 68) = v294;
          if ((v294 < 0) ^ v124 | (v294 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
        }
        uint64_t v81 = (v244 + 4);
        goto LABEL_345;
      case 0x1D:
        uint64_t v295 = *(void *)(v11 + 8 * (v241 & 0xFFFFFF)) & 0xFFFFFFLL;
        v296 = &v15[v295];
        uint64_t v297 = *(void *)(v11 + 8 * (v244 + 2));
        uint64_t v298 = *(void *)(v11 + 8 * (v244 + 3));
        uint64_t v299 = v296[2] + 1;
        v296[2] = v299;
        if (v298 != -1 && v299 >= (unint64_t)v298) {
          goto LABEL_772;
        }
        if (v299 >= (int)v297)
        {
          if (v298 == -1)
          {
            uint64_t v132 = &v15[v295];
            int64_t v134 = v132[3];
            uint64_t v133 = v132 + 3;
            if (*v15 == v134) {
              goto LABEL_772;
            }
            *uint64_t v133 = *v15;
          }
          int v15 = (int64_t *)sub_18C9CA248(this, (uint64_t)v15, (v244 + 4), a4);
        }
        else
        {
          v15[1] = (v244 + 4);
          int v301 = *((_DWORD *)this + 68);
          BOOL v124 = __OFSUB__(v301--, 1);
          *((_DWORD *)this + 68) = v301;
          if ((v301 < 0) ^ v124 | (v301 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
        }
        goto LABEL_772;
      case 0x1E:
        int64_t v302 = *v15;
        if (*v15 <= *((void *)this + 10)) {
          goto LABEL_772;
        }
        unsigned int v49 = (UText *)*((void *)this + 4);
        uint64_t v50 = v302 - v49->chunkNativeStart;
        if (v50 < 0 || v50 >= v49->nativeIndexingLimit || v49->chunkContents[v50] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v49, v302);
          unsigned int v49 = (UText *)*((void *)this + 4);
          LODWORD(v50) = v49->chunkOffset;
        }
        else
        {
          v49->uint64_t chunkOffset = v50;
        }
        int32_t v51 = v50 - 1;
        if ((int)v50 < 1 || (unsigned int v52 = v49->chunkContents[v51], v52 >> 11 > 0x1A))
        {
          UChar32 v92 = utext_previous32(v49);
LABEL_203:
          unsigned int v52 = v92;
        }
        else
        {
          v49->uint64_t chunkOffset = v51;
        }
LABEL_204:
        if (v52 == 10) {
          goto LABEL_772;
        }
        goto LABEL_771;
      case 0x20:
        *(void *)(*((void *)this + 24) + 8 * (v241 & 0xFFFFFF)) = *(int *)(*((void *)this + 22) + 8);
        goto LABEL_772;
      case 0x21:
        uint64_t v303 = *(void *)(*((void *)this + 24) + 8 * (v241 & 0xFFFFFF));
        v304 = (icu::UVector64 *)*((void *)this + 22);
        uint64_t v156 = *((void *)v304 + 3) + 8 * (int)v303 - 8 * *((int *)this + 14);
        if ((int64_t *)v156 == v15) {
          goto LABEL_772;
        }
        uint64_t v305 = *((unsigned int *)this + 14);
        if ((int)v305 >= 1)
        {
          v306 = (int64_t *)(*((void *)v304 + 3) + 8 * (int)v303 - 8 * *((int *)this + 14));
          do
          {
            int64_t v307 = *v15++;
            *v306++ = v307;
            --v305;
          }
          while (v305);
        }
        icu::UVector64::setSize(v304, v303);
        goto LABEL_357;
      case 0x22:
        int64_t v308 = v15[(v241 & 0xFFFFFF) + 2];
        if (v308 < 0) {
          goto LABEL_771;
        }
        int64_t v309 = v15[(v244 + 1) + 2];
        v310 = (UText *)*((void *)this + 5);
        uint64_t v311 = v308 - v310->chunkNativeStart;
        if (v311 < 0 || v311 >= v310->nativeIndexingLimit || v310->chunkContents[v311] >> 10 > 0x36u) {
          utext_setNativeIndex(v310, v308);
        }
        else {
          v310->uint64_t chunkOffset = v311;
        }
        v391 = (UText *)*((void *)this + 4);
        uint64_t v392 = *v15 - v391->chunkNativeStart;
        if (v392 < 0 || v392 >= v391->nativeIndexingLimit || v391->chunkContents[v392] >> 10 > 0x36u) {
          utext_setNativeIndex(v391, *v15);
        }
        else {
          v391->uint64_t chunkOffset = v392;
        }
        while (2)
        {
          int64_t NativeIndex = utext_getNativeIndex(*((const UText **)this + 5));
          unint64_t v141 = (UText *)*((void *)this + 4);
          if (NativeIndex >= v309)
          {
LABEL_306:
            uint64_t chunkOffset = v141->chunkOffset;
            int nativeIndexingLimit = v141->nativeIndexingLimit;
LABEL_307:
            if ((int)chunkOffset <= nativeIndexingLimit) {
              uint64_t v165 = v141->chunkNativeStart + chunkOffset;
            }
            else {
LABEL_308:
            }
              uint64_t v165 = ((uint64_t (*)(void))v141->pFuncs->mapOffsetToNative)();
LABEL_310:
            *int v15 = v165;
            goto LABEL_772;
          }
          if (utext_getNativeIndex(v141) < *((void *)this + 15))
          {
            UChar32 v394 = utext_next32(*((UText **)this + 5));
            if (utext_next32(*((UText **)this + 4)) != v394) {
              goto LABEL_771;
            }
            continue;
          }
          break;
        }
LABEL_770:
        *((unsigned char *)this + 168) = 1;
        goto LABEL_771;
      case 0x23:
        int64_t v253 = *v15;
        v254 = &v15[v241 & 0xFFFFFF];
LABEL_587:
        v254[2] = v253;
        goto LABEL_772;
      case 0x24:
        v15[1] = v240 + 2;
        if (v15[(*(void *)(v11 + 8 * (int)v242) & 0xFFFFFFLL) + 2] >= *v15) {
          goto LABEL_771;
        }
LABEL_589:
        uint64_t v81 = v241 & 0xFFFFFF;
        goto LABEL_345;
      case 0x25:
        uint64_t v312 = *((void *)this + 24);
        *(void *)(v312 + 8 * (v241 & 0xFFFFFF)) = *(int *)(*((void *)this + 22) + 8);
        *(void *)(v312 + 8 * (v244 + 1)) = *v15;
        *(void *)(v312 + 8 * (v244 + 2)) = *((void *)this + 14);
        *(void *)(v312 + 8 * (v244 + 3)) = *((void *)this + 15);
        *((_OWORD *)this + 7) = *((_OWORD *)this + 6);
        goto LABEL_772;
      case 0x26:
        uint64_t v313 = *((void *)this + 22);
        uint64_t v314 = *((void *)this + 24);
        uint64_t v315 = *(void *)(v314 + 8 * (v241 & 0xFFFFFF));
        if (*(_DWORD *)(v313 + 8) <= (int)v315)
        {
          BOOL v17 = v15;
        }
        else
        {
          uint64_t v316 = *((int *)this + 14);
          BOOL v17 = (int64_t *)(*(void *)(v313 + 24) + 8 * (int)v315 - 8 * v316);
          if ((int)v316 >= 1)
          {
            uint64_t v317 = *((unsigned int *)this + 14);
            v318 = v17;
            do
            {
              int64_t v319 = *v15++;
              *v318++ = v319;
              --v317;
            }
            while (v317);
          }
          icu::UVector64::setSize((icu::UVector64 *)v313, v315);
          uint64_t v314 = *((void *)this + 24);
          int v15 = v17;
        }
        *BOOL v17 = *(void *)(v314 + 8 * (v244 + 1));
        goto LABEL_13;
      case 0x27:
        int64_t v320 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        long long v53 = (UText *)*((void *)this + 4);
        uint64_t v54 = v320 - v53->chunkNativeStart;
        if (v54 < 0 || v54 >= v53->nativeIndexingLimit || v53->chunkContents[v54] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v53, v320);
          long long v53 = (UText *)*((void *)this + 4);
          LODWORD(v54) = v53->chunkOffset;
        }
        else
        {
          v53->uint64_t chunkOffset = v54;
        }
        if ((int)v54 >= v53->chunkLength || (unsigned int v55 = v53->chunkContents[(int)v54], v55 >> 11 > 0x1A)) {
          unsigned int v55 = utext_next32(v53);
        }
        else {
          v53->uint64_t chunkOffset = v54 + 1;
        }
        if (u_foldCase(v55, 0) != v244) {
          goto LABEL_771;
        }
        goto LABEL_305;
      case 0x28:
        uint64_t v321 = *(void *)(v11 + 8 * v242);
        v15[1] = v240 + 2;
        uint64_t v322 = *((void *)this + 4);
        uint64_t v323 = *v15 - *(void *)(v322 + 32);
        if (v323 < 0
          || v323 >= *(int *)(v322 + 28)
          || *(unsigned __int16 *)(*(void *)(v322 + 48) + 2 * v323) >> 10 > 0x36u)
        {
          utext_setNativeIndex(*((UText **)this + 4), *v15);
          uint64_t v322 = *((void *)this + 4);
        }
        else
        {
          *(_DWORD *)(v322 + 40) = v323;
        }
        uint64_t v368 = v400 + 2 * (v241 & 0xFFFFFF);
        int v369 = v321 & 0xFFFFFF;
        uint64_t v402 = 0;
        uint64_t v403 = 0;
        uint64_t v404 = 0;
        sub_18C9B728C((uint64_t)&v402, v322);
        int v370 = 0;
        while (2)
        {
          BOOL v371 = sub_18C87BC48((uint64_t)&v402);
          if (v370 < v369)
          {
            if (v371
              || ((uint64_t v372 = *((void *)this + 4), v373 = *(int *)(v372 + 40), (int)v373 <= *(_DWORD *)(v372 + 28))
                ? (uint64_t v374 = *(void *)(v372 + 32) + v373)
                : (uint64_t v374 = (*(uint64_t (**)(void))(*(void *)(v372 + 56) + 64))()),
                  v374 < *((void *)this + 15)))
            {
              uint64_t v375 = v370 + 1;
              int v376 = *(unsigned __int16 *)(v368 + 2 * v370);
              if ((v376 & 0xFC00) == 0xD800 && v375 != v369)
              {
                int v378 = *(unsigned __int16 *)(v368 + 2 * v375);
                BOOL v379 = (v378 & 0xFC00) == 56320;
                int v380 = (v376 << 10) - 56613888 + v378;
                if (v379) {
                  LODWORD(v375) = v370 + 2;
                }
                if (v379) {
                  int v376 = v380;
                }
              }
              int v370 = v375;
              if (sub_18C9B7298((uint64_t)&v402) != v376) {
                goto LABEL_317;
              }
              continue;
            }
            *((unsigned char *)this + 168) = 1;
LABEL_317:
            sub_18C87BC48((uint64_t)&v402);
LABEL_318:
            uint64_t v169 = *((void *)this + 22);
            uint64_t v170 = *((int *)this + 14);
            unsigned int v171 = (*(_DWORD *)(v169 + 8) - v170) & ~((*(_DWORD *)(v169 + 8) - (int)v170) >> 31);
            *(_DWORD *)(v169 + 8) = v171;
            int v15 = (int64_t *)(*(void *)(v169 + 24) + 8 * v171 - 8 * v170);
            goto LABEL_372;
          }
          break;
        }
        if (v371) {
          goto LABEL_318;
        }
        uint64_t v20 = *((void *)this + 4);
        uint64_t v21 = *(int *)(v20 + 40);
        if ((int)v21 <= *(_DWORD *)(v20 + 28)) {
          uint64_t v22 = *(void *)(v20 + 32) + v21;
        }
        else {
          uint64_t v22 = (*(uint64_t (**)(void))(*(void *)(v20 + 56) + 64))();
        }
        *int v15 = v22;
        goto LABEL_372;
      case 0x29:
        int64_t v324 = v15[(v241 & 0xFFFFFF) + 2];
        if (v324 < 0) {
          goto LABEL_771;
        }
        int64_t v325 = v15[(v244 + 1) + 2];
        utext_setNativeIndex(*((UText **)this + 5), v324);
        utext_setNativeIndex(*((UText **)this + 4), *v15);
        uint64_t v402 = 0;
        uint64_t v403 = 0;
        uint64_t v404 = 0;
        sub_18C9B728C((uint64_t)&v402, *((void *)this + 5));
        memset(v401, 0, sizeof(v401));
        sub_18C9B728C((uint64_t)v401, *((void *)this + 4));
        while (2)
        {
          if (sub_18C87BC48((uint64_t)&v402) || utext_getNativeIndex(*((const UText **)this + 5)) < v325)
          {
            if (sub_18C87BC48((uint64_t)v401)
              || utext_getNativeIndex(*((const UText **)this + 4)) < *((void *)this + 15))
            {
              int v326 = sub_18C9B7298((uint64_t)&v402);
              if (sub_18C9B7298((uint64_t)v401) != v326) {
                goto LABEL_323;
              }
              continue;
            }
            *((unsigned char *)this + 168) = 1;
LABEL_323:
            uint64_t v175 = *((void *)this + 22);
            uint64_t v176 = *((int *)this + 14);
            unsigned int v177 = (*(_DWORD *)(v175 + 8) - v176) & ~((*(_DWORD *)(v175 + 8) - (int)v176) >> 31);
            *(_DWORD *)(v175 + 8) = v177;
            int v15 = (int64_t *)(*(void *)(v175 + 24) + 8 * v177 - 8 * v176);
            goto LABEL_324;
          }
          break;
        }
        if (sub_18C87BC48((uint64_t)v401)) {
          goto LABEL_323;
        }
        uint64_t v172 = *((void *)this + 4);
        uint64_t v173 = *(int *)(v172 + 40);
        if ((int)v173 <= *(_DWORD *)(v172 + 28)) {
          uint64_t v174 = *(void *)(v172 + 32) + v173;
        }
        else {
          uint64_t v174 = (*(uint64_t (**)(void))(*(void *)(v172 + 56) + 64))();
        }
        *int v15 = v174;
LABEL_324:
        nullsub_17(v401);
LABEL_372:
        nullsub_17(&v402);
        goto LABEL_772;
      case 0x2A:
        int64_t v327 = *v15;
        if (*v15 >= *((void *)this + 11)) {
          goto LABEL_442;
        }
        uint64_t v56 = (UText *)*((void *)this + 4);
        uint64_t v57 = v327 - v56->chunkNativeStart;
        if (v57 < 0 || v57 >= v56->nativeIndexingLimit || v56->chunkContents[v57] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v56, v327);
          uint64_t v56 = (UText *)*((void *)this + 4);
          LODWORD(v57) = v56->chunkOffset;
        }
        else
        {
          v56->uint64_t chunkOffset = v57;
        }
        if ((int)v57 >= v56->chunkLength || (UChar32 v58 = v56->chunkContents[(int)v57], v58 >> 11 > 0x1A)) {
          UChar32 v58 = utext_current32(v56);
        }
        if ((v58 & 0xFFFFDF50) != 0) {
          goto LABEL_771;
        }
        if (v58 > 132)
        {
          if ((v58 - 8232) < 2 || v58 == 133) {
            goto LABEL_772;
          }
          goto LABEL_771;
        }
        if ((v58 - 11) >= 3)
        {
          if (v58 != 10) {
            goto LABEL_771;
          }
          if (*v15 > *((void *)this + 10))
          {
            uint64_t v59 = (UText *)*((void *)this + 4);
            int v60 = v59->chunkOffset;
            int32_t v61 = v60 - 1;
            if (v60 < 1 || (unsigned int v62 = v59->chunkContents[v61], v62 >> 11 > 0x1A)) {
              unsigned int v62 = utext_previous32(v59);
            }
            else {
              v59->uint64_t chunkOffset = v61;
            }
            if (v62 == 13) {
              goto LABEL_771;
            }
          }
        }
        goto LABEL_772;
      case 0x2B:
        int64_t v328 = *v15;
        if (*v15 != *((void *)this + 10))
        {
          int32_t v63 = (UText *)*((void *)this + 4);
          uint64_t v64 = v328 - v63->chunkNativeStart;
          if (v64 < 0 || v64 >= v63->nativeIndexingLimit || v63->chunkContents[v64] >> 10 > 0x36u)
          {
            utext_setNativeIndex(v63, v328);
            int32_t v63 = (UText *)*((void *)this + 4);
            LODWORD(v64) = v63->chunkOffset;
          }
          else
          {
            v63->uint64_t chunkOffset = v64;
          }
          int32_t v65 = v64 - 1;
          if ((int)v64 < 1 || (unsigned int v66 = v63->chunkContents[v65], v66 >> 11 > 0x1A)) {
            unsigned int v66 = utext_previous32(v63);
          }
          else {
            v63->uint64_t chunkOffset = v65;
          }
          if (*v15 >= *((void *)this + 11) || !sub_18C9C58C8(v66)) {
            goto LABEL_771;
          }
        }
        goto LABEL_772;
      case 0x2C:
        v255 = (int64_t *)*((void *)this + 24);
        v255[v241 & 0xFFFFFF] = *(int *)(*((void *)this + 22) + 8);
        v255[v244 + 1] = *v15;
        v255[v244 + 2] = *((void *)this + 14);
        v255[v244 + 3] = *((void *)this + 15);
        *((void *)this + 14) = *((void *)this + 8);
        *((void *)this + 15) = *v15;
        int v257 = v244 + 4;
        int64_t v256 = -1;
LABEL_624:
        v255[v257] = v256;
        goto LABEL_772;
      case 0x2D:
        v15[1] = v240 + 2;
        uint64_t v329 = *(void *)(v11 + 8 * v242);
        v15[1] = v240 + 3;
        uint64_t v330 = *(void *)(v11 + 8 * (v240 + 2));
        uint64_t v122 = (UText *)*((void *)this + 4);
        if (v122->pFuncs->mapNativeIndexToUTF16) {
          int v331 = 3 * v330;
        }
        else {
          int v331 = v330;
        }
        uint64_t v332 = *((void *)this + 24);
        uint64_t v333 = (v244 + 4);
        int64_t v334 = *(void *)(v332 + 8 * v333);
        if ((v334 & 0x8000000000000000) == 0)
        {
          if (!v334)
          {
            *(void *)(v332 + 8 * v333) = -1;
LABEL_332:
            uint64_t v178 = *((void *)this + 22);
            uint64_t v179 = *((int *)this + 14);
            unsigned int v180 = (*(_DWORD *)(v178 + 8) - v179) & ~((*(_DWORD *)(v178 + 8) - (int)v179) >> 31);
            *(_DWORD *)(v178 + 8) = v180;
            uint64_t v181 = *(void *)(v178 + 24) + 8 * v180;
            uint64_t v182 = *((void *)this + 24);
            int v15 = (int64_t *)(v181 - 8 * v179);
            *((void *)this + 14) = *(void *)(v182 + 8 * (v244 + 2));
            uint64_t v18 = *(void *)(v182 + 8 * (v244 + 3));
LABEL_333:
            *((void *)this + 15) = v18;
            goto LABEL_772;
          }
          uint64_t v123 = v334 - v122->chunkNativeStart;
          if (v123 < 0 || v123 >= v122->nativeIndexingLimit || v122->chunkContents[v123] >> 10 > 0x36u)
          {
            utext_setNativeIndex(v122, v334);
            uint64_t v122 = (UText *)*((void *)this + 4);
            LODWORD(v123) = v122->chunkOffset;
          }
          else
          {
            v122->uint64_t chunkOffset = v123;
          }
          BOOL v124 = __OFSUB__(v123, 1);
          int v125 = v123 - 1;
          if (v125 < 0 != v124 || v122->chunkContents[v125] >> 11 > 0x1Au)
          {
            utext_previous32(v122);
            uint64_t v122 = (UText *)*((void *)this + 4);
            int v125 = v122->chunkOffset;
          }
          else
          {
            v122->uint64_t chunkOffset = v125;
          }
          if (v125 <= v122->nativeIndexingLimit)
          {
            int64_t v103 = v122->chunkNativeStart + v125;
            goto LABEL_329;
          }
LABEL_296:
          int64_t v103 = ((uint64_t (*)(void))v122->pFuncs->mapOffsetToNative)();
          goto LABEL_329;
        }
        int64_t v103 = *v15 - (int)v329;
        *(void *)(v332 + 8 * v333) = v103;
        if (v103 < 1) {
          goto LABEL_330;
        }
        uint64_t v104 = v103 - v122->chunkNativeStart;
        if (v104 < 0 || (uint64_t v105 = v122->nativeIndexingLimit, v104 >= v105) || v122->chunkContents[v104] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v122, v103);
          uint64_t v122 = (UText *)*((void *)this + 4);
          LODWORD(v104) = v122->chunkOffset;
          LODWORD(v105) = v122->nativeIndexingLimit;
        }
        else
        {
          v122->uint64_t chunkOffset = v104;
        }
        if ((int)v104 > (int)v105) {
          goto LABEL_296;
        }
        int64_t v103 = v122->chunkNativeStart + (int)v104;
LABEL_329:
        *(void *)(v332 + 8 * v333) = v103;
LABEL_330:
        if (v103 < 0 || v103 < *v15 - v331) {
          goto LABEL_332;
        }
        if (*(int *)a4 > 0) {
          goto LABEL_453;
        }
        int64_t v183 = v15[1];
        uint64_t v184 = *((void *)this + 22);
        int v185 = *((_DWORD *)this + 14);
        int v186 = *(_DWORD *)(v184 + 8);
        int v187 = v186 + v185;
        if (v186 + v185 >= 0 && *(_DWORD *)(v184 + 12) >= v187) {
          goto LABEL_339;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v187, a4))
        {
          int v186 = *(_DWORD *)(v184 + 8);
          int v187 = v186 + v185;
LABEL_339:
          uint64_t v188 = (int64_t *)(*(void *)(v184 + 24) + 8 * v186);
          *(_DWORD *)(v184 + 8) = v187;
        }
        else
        {
          uint64_t v188 = 0;
        }
        if (*(int *)a4 >= 1) {
          goto LABEL_452;
        }
        uint64_t v231 = 0;
        int64_t v232 = v183 - 3;
        uint64_t v233 = *((int *)this + 14);
        v234 = &v188[-v233];
        uint64_t v235 = -8 * v233;
        do
        {
          v188[v231] = v234[v231];
          ++v231;
        }
        while (v235 + v231 * 8);
        goto LABEL_458;
      case 0x2E:
        if (*v15 != *((void *)this + 15)) {
          goto LABEL_771;
        }
        uint64_t v314 = *((void *)this + 24);
LABEL_13:
        *((void *)this + 14) = *(void *)(v314 + 8 * (v244 + 2));
        uint64_t v18 = *(void *)(v314 + 8 * (v244 + 3));
        goto LABEL_333;
      case 0x2F:
        v15[1] = v240 + 2;
        uint64_t v335 = *(void *)(v11 + 8 * v242);
        v15[1] = v240 + 3;
        unint64_t v126 = (UText *)*((void *)this + 4);
        if (v126->pFuncs->mapNativeIndexToUTF16) {
          uint64_t v336 = 3 * *(void *)(v11 + 8 * (v240 + 2));
        }
        else {
          uint64_t v336 = *(void *)(v11 + 8 * (v240 + 2));
        }
        v15[1] = v240 + 4;
        uint64_t v337 = *(void *)(v11 + 8 * (v240 + 3));
        uint64_t v332 = *((void *)this + 24);
        uint64_t v333 = (v244 + 4);
        int64_t v338 = *(void *)(v332 + 8 * v333);
        if ((v338 & 0x8000000000000000) == 0)
        {
          if (!v338)
          {
            *(void *)(v332 + 8 * v333) = -1;
LABEL_344:
            uint64_t v81 = v337 & 0xFFFFFF;
            uint64_t v189 = *((void *)this + 24);
            *((void *)this + 14) = *(void *)(v189 + 8 * (v244 + 2));
            *((void *)this + 15) = *(void *)(v189 + 8 * (v244 + 3));
            goto LABEL_345;
          }
          uint64_t v127 = v338 - v126->chunkNativeStart;
          if (v127 < 0 || v127 >= v126->nativeIndexingLimit || v126->chunkContents[v127] >> 10 > 0x36u)
          {
            utext_setNativeIndex(v126, v338);
            unint64_t v126 = (UText *)*((void *)this + 4);
            LODWORD(v127) = v126->chunkOffset;
          }
          else
          {
            v126->uint64_t chunkOffset = v127;
          }
          BOOL v124 = __OFSUB__(v127, 1);
          int v128 = v127 - 1;
          if (v128 < 0 != v124 || v126->chunkContents[v128] >> 11 > 0x1Au)
          {
            utext_previous32(v126);
            unint64_t v126 = (UText *)*((void *)this + 4);
            int v128 = v126->chunkOffset;
          }
          else
          {
            v126->uint64_t chunkOffset = v128;
          }
          if (v128 <= v126->nativeIndexingLimit)
          {
            int64_t v106 = v126->chunkNativeStart + v128;
            goto LABEL_341;
          }
LABEL_299:
          int64_t v106 = ((uint64_t (*)(void))v126->pFuncs->mapOffsetToNative)();
          goto LABEL_341;
        }
        int64_t v106 = *v15 - (int)v335;
        *(void *)(v332 + 8 * v333) = v106;
        if (v106 < 1) {
          goto LABEL_342;
        }
        uint64_t v107 = v106 - v126->chunkNativeStart;
        if (v107 < 0 || (uint64_t v108 = v126->nativeIndexingLimit, v107 >= v108) || v126->chunkContents[v107] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v126, v106);
          unint64_t v126 = (UText *)*((void *)this + 4);
          LODWORD(v107) = v126->chunkOffset;
          LODWORD(v108) = v126->nativeIndexingLimit;
        }
        else
        {
          v126->uint64_t chunkOffset = v107;
        }
        if ((int)v107 > (int)v108) {
          goto LABEL_299;
        }
        int64_t v106 = v126->chunkNativeStart + (int)v107;
LABEL_341:
        *(void *)(v332 + 8 * v333) = v106;
LABEL_342:
        if (v106 < 0 || v106 < *v15 - (int)v336) {
          goto LABEL_344;
        }
        if (*(int *)a4 > 0) {
          goto LABEL_453;
        }
        int64_t v190 = v15[1];
        uint64_t v191 = *((void *)this + 22);
        int v192 = *((_DWORD *)this + 14);
        int v193 = *(_DWORD *)(v191 + 8);
        int v194 = v193 + v192;
        if (v193 + v192 >= 0 && *(_DWORD *)(v191 + 12) >= v194) {
          goto LABEL_351;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v194, a4))
        {
          int v193 = *(_DWORD *)(v191 + 8);
          int v194 = v193 + v192;
LABEL_351:
          uint64_t v188 = (int64_t *)(*(void *)(v191 + 24) + 8 * v193);
          *(_DWORD *)(v191 + 8) = v194;
        }
        else
        {
          uint64_t v188 = 0;
        }
        if (*(int *)a4 < 1)
        {
          uint64_t v236 = 0;
          int64_t v232 = v190 - 4;
          uint64_t v237 = *((int *)this + 14);
          v234 = &v188[-v237];
          uint64_t v238 = -8 * v237;
          do
          {
            v188[v236] = v234[v236];
            ++v236;
          }
          while (v238 + v236 * 8);
LABEL_458:
          int v239 = *((_DWORD *)this + 68);
          BOOL v124 = __OFSUB__(v239--, 1);
          *((_DWORD *)this + 68) = v239;
          if ((v239 < 0) ^ v124 | (v239 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v234[1] = v232;
        }
        else
        {
LABEL_452:
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_453:
          uint64_t v188 = v15;
        }
        *uint64_t v188 = *(void *)(v332 + 8 * v333);
LABEL_455:
        int v15 = v188;
        goto LABEL_772;
      case 0x30:
        if (*v15 == *((void *)this + 15))
        {
          uint64_t v339 = *((void *)this + 24);
          *((void *)this + 14) = *(void *)(v339 + 8 * (v244 + 2));
          *((void *)this + 15) = *(void *)(v339 + 8 * (v244 + 3));
          icu::UVector64::setSize(*((icu::UVector64 **)this + 22), *(void *)(v339 + 8 * (v241 & 0xFFFFFF)));
        }
        goto LABEL_771;
      case 0x31:
        int64_t v340 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        int32_t v67 = (UText *)*((void *)this + 4);
        uint64_t v68 = v340 - v67->chunkNativeStart;
        if (v68 < 0 || v68 >= v67->nativeIndexingLimit || v67->chunkContents[v68] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v67, v340);
          int32_t v67 = (UText *)*((void *)this + 4);
          LODWORD(v68) = v67->chunkOffset;
        }
        else
        {
          v67->uint64_t chunkOffset = v68;
        }
        if ((int)v68 >= v67->chunkLength || (UChar32 v69 = v67->chunkContents[(int)v68], v69 >> 11 > 0x1A)) {
          UChar32 v69 = utext_next32(v67);
        }
        else {
          v67->uint64_t chunkOffset = v68 + 1;
        }
        uint64_t v114 = v241 & 0xFFFFFF;
        if (v69 > 255)
        {
          if (icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1EB20BEF0 + 200 * v114 + 8), v69))goto LABEL_771; {
        }
          }
        else if ((*(unsigned __int8 *)(qword_1EB20BEF0 + 32 * v114 + (v69 >> 3) + 2608) >> (v69 & 7)))
        {
          goto LABEL_771;
        }
        goto LABEL_305;
      case 0x32:
        uint64_t v341 = *(void *)(*((void *)this + 1) + 112);
        v342 = (icu::UnicodeSet *)icu::UVector::elementAt(v399, v241 & 0xFFFFFF);
        uint64_t v343 = *v15;
        v344 = (UText *)*((void *)this + 4);
        uint64_t v345 = *v15 - v344->chunkNativeStart;
        if (v345 < 0 || v345 >= v344->nativeIndexingLimit || v344->chunkContents[v345] >> 10 > 0x36u) {
          utext_setNativeIndex(v344, *v15);
        }
        else {
          v344->uint64_t chunkOffset = v345;
        }
        if (v343 >= *((void *)this + 15)) {
          goto LABEL_752;
        }
        uint64_t v381 = v341 + 32 * (v241 & 0xFFFFFF);
        do
        {
          v382 = (UText *)*((void *)this + 4);
          uint64_t v383 = v382->chunkOffset;
          if ((int)v383 >= v382->chunkLength || (UChar32 v384 = v382->chunkContents[v383], v384 >> 11 > 0x1A)) {
            UChar32 v384 = utext_next32(v382);
          }
          else {
            v382->uint64_t chunkOffset = v383 + 1;
          }
          if (v384 > 255)
          {
            if (!icu::UnicodeSet::contains(v342, v384)) {
              goto LABEL_753;
            }
          }
          else if (((*(unsigned __int8 *)(v381 + (v384 >> 3)) >> (v384 & 7)) & 1) == 0)
          {
            goto LABEL_753;
          }
          uint64_t v385 = *((void *)this + 4);
          uint64_t v386 = *(int *)(v385 + 40);
          if ((int)v386 <= *(_DWORD *)(v385 + 28)) {
            uint64_t v343 = *(void *)(v385 + 32) + v386;
          }
          else {
            uint64_t v343 = (*(uint64_t (**)(void))(*(void *)(v385 + 56) + 64))();
          }
        }
        while (v343 < *((void *)this + 15));
LABEL_752:
        *((unsigned char *)this + 168) = 1;
LABEL_753:
        int64_t v80 = v15[1];
        if (v343 == *v15) {
          goto LABEL_103;
        }
        v15[(*(void *)(v11 + 8 * v80) & 0xFFFFFFLL) + 2] = *v15;
        *int v15 = v343;
        if (*(int *)a4 > 0) {
          goto LABEL_395;
        }
        uint64_t v387 = *((void *)this + 22);
        int v388 = *((_DWORD *)this + 14);
        int v389 = *(_DWORD *)(v387 + 8);
        int v390 = v389 + v388;
        if (v389 + v388 >= 0 && *(_DWORD *)(v387 + 12) >= v390) {
          goto LABEL_759;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v390, a4))
        {
          int v389 = *(_DWORD *)(v387 + 8);
          int v390 = v389 + v388;
LABEL_759:
          int v86 = (int64_t *)(*(void *)(v387 + 24) + 8 * v389);
          *(_DWORD *)(v387 + 8) = v390;
        }
        else
        {
          int v86 = 0;
        }
        if (*(int *)a4 >= 1) {
          goto LABEL_394;
        }
        uint64_t v205 = 0;
        uint64_t v206 = *((int *)this + 14);
        uint64_t v207 = &v86[-v206];
        uint64_t v208 = -8 * v206;
        do
        {
          v86[v205] = v207[v205];
          ++v205;
        }
        while (v208 + v205 * 8);
        goto LABEL_399;
      case 0x33:
        int64_t v346 = v15[(v241 & 0xFFFFFF) + 2];
        int64_t v347 = *v15;
        if (v346 == *v15) {
          goto LABEL_772;
        }
        uint64_t v70 = (UText *)*((void *)this + 4);
        uint64_t v71 = v347 - v70->chunkNativeStart;
        if (v71 < 0 || v71 >= v70->nativeIndexingLimit || v70->chunkContents[v71] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v70, v347);
          uint64_t v70 = (UText *)*((void *)this + 4);
          LODWORD(v71) = v70->chunkOffset;
        }
        else
        {
          v70->uint64_t chunkOffset = v71;
        }
        int32_t v72 = v71 - 1;
        if ((int)v71 < 1 || (unsigned int v73 = v70->chunkContents[v72], v73 >> 11 > 0x1A))
        {
          unsigned int v73 = utext_previous32(v70);
          uint64_t v70 = (UText *)*((void *)this + 4);
          int32_t v72 = v70->chunkOffset;
        }
        else
        {
          v70->uint64_t chunkOffset = v72;
        }
        if (v72 <= v70->nativeIndexingLimit)
        {
          uint64_t v121 = v70->chunkNativeStart + v72;
        }
        else
        {
          uint64_t v121 = ((uint64_t (*)(void))v70->pFuncs->mapOffsetToNative)();
          uint64_t v70 = (UText *)*((void *)this + 4);
          int32_t v72 = v70->chunkOffset;
        }
        *int v15 = v121;
        BOOL v124 = __OFSUB__(v72, 1);
        int v147 = v72 - 1;
        if (v147 < 0 != v124 || (unsigned int v148 = v70->chunkContents[v147], v148 >> 11 > 0x1A)) {
          unsigned int v148 = utext_previous32(v70);
        }
        else {
          v70->uint64_t chunkOffset = v147;
        }
        if (v73 == 10)
        {
          BOOL v149 = *v15 > v346 && v148 == 13;
          if (v149 && (unint64_t)*(unsigned __int8 *)(v11 + 8 * v15[1] - 13) << 24 == 872415232)
          {
            uint64_t v150 = *((void *)this + 4);
            uint64_t v151 = *(int *)(v150 + 40);
            if ((int)v151 <= *(_DWORD *)(v150 + 28)) {
              uint64_t v152 = *(void *)(v150 + 32) + v151;
            }
            else {
              uint64_t v152 = (*(uint64_t (**)(void))(*(void *)(v150 + 56) + 64))();
            }
            *int v15 = v152;
          }
        }
        if (*(int *)a4 > 0) {
          goto LABEL_773;
        }
        int64_t v218 = v15[1];
        uint64_t v219 = *((void *)this + 22);
        int v220 = *((_DWORD *)this + 14);
        int v221 = *(_DWORD *)(v219 + 8);
        int v222 = v221 + v220;
        if (v221 + v220 >= 0 && *(_DWORD *)(v219 + 12) >= v222) {
          goto LABEL_426;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v222, a4))
        {
          int v221 = *(_DWORD *)(v219 + 8);
          int v222 = v221 + v220;
LABEL_426:
          int v86 = (int64_t *)(*(void *)(v219 + 24) + 8 * v221);
          *(_DWORD *)(v219 + 8) = v222;
        }
        else
        {
          int v86 = 0;
        }
        if (*(int *)a4 <= 0)
        {
          uint64_t v223 = 0;
          int64_t v224 = v218 - 1;
          uint64_t v225 = *((int *)this + 14);
          uint64_t v226 = &v86[-v225];
          uint64_t v227 = -8 * v225;
          do
          {
            v86[v223] = v226[v223];
            ++v223;
          }
          while (v227 + v223 * 8);
          int v228 = *((_DWORD *)this + 68);
          BOOL v124 = __OFSUB__(v228--, 1);
          *((_DWORD *)this + 68) = v228;
          if ((v228 < 0) ^ v124 | (v228 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v226[1] = v224;
LABEL_435:
          int v15 = v86;
LABEL_772:
          if (*(int *)a4 >= 1) {
            goto LABEL_773;
          }
          continue;
        }
LABEL_777:
        UErrorCode v243 = U_REGEX_STACK_OVERFLOW;
LABEL_778:
        *a4 = v243;
LABEL_773:
        *((unsigned char *)this + 130) = 0;
LABEL_774:
        *((void *)this + 23) = v15;
        return;
      case 0x34:
        if (v241)
        {
          uint64_t v19 = *((void *)this + 15);
LABEL_101:
          *((unsigned char *)this + 168) = 1;
          goto LABEL_102;
        }
        uint64_t v19 = *v15;
        v348 = (UText *)*((void *)this + 4);
        uint64_t v349 = *v15 - v348->chunkNativeStart;
        if (v349 < 0 || v349 >= v348->nativeIndexingLimit || v348->chunkContents[v349] >> 10 > 0x36u) {
          utext_setNativeIndex(v348, *v15);
        }
        else {
          v348->uint64_t chunkOffset = v349;
        }
        if (v19 >= *((void *)this + 15)) {
          goto LABEL_101;
        }
        while (1)
        {
          uint64_t v74 = *((void *)this + 4);
          uint64_t v75 = *(int *)(v74 + 40);
          if ((int)v75 >= *(_DWORD *)(v74 + 44)
            || (unsigned int v76 = *(unsigned __int16 *)(*(void *)(v74 + 48) + 2 * v75), v76 >> 11 > 0x1A))
          {
            unsigned int v76 = utext_next32(*((UText **)this + 4));
          }
          else
          {
            *(_DWORD *)(v74 + 40) = v75 + 1;
          }
          if ((v76 & 0x7E) <= 0x29)
          {
            if (v76 == 10) {
              break;
            }
            if (!(v76 & 0xFFFFDF50 | v241 & 2))
            {
              BOOL v77 = v76 - 11 >= 3 && v76 - 8232 >= 2;
              if (!v77 || v76 == 133) {
                break;
              }
            }
          }
          uint64_t v78 = *((void *)this + 4);
          uint64_t v79 = *(int *)(v78 + 40);
          if ((int)v79 <= *(_DWORD *)(v78 + 28)) {
            uint64_t v19 = *(void *)(v78 + 32) + v79;
          }
          else {
            uint64_t v19 = (*(uint64_t (**)(void))(*(void *)(v78 + 56) + 64))();
          }
          if (v19 >= *((void *)this + 15)) {
            goto LABEL_101;
          }
        }
LABEL_102:
        int64_t v80 = v15[1];
        if (v19 != *v15)
        {
          v15[(*(void *)(v11 + 8 * v80) & 0xFFFFFFLL) + 2] = *v15;
          *int v15 = v19;
          if (*(int *)a4 > 0) {
            goto LABEL_395;
          }
          uint64_t v82 = *((void *)this + 22);
          int v83 = *((_DWORD *)this + 14);
          int v84 = *(_DWORD *)(v82 + 8);
          int v85 = v84 + v83;
          if (v84 + v83 >= 0 && *(_DWORD *)(v82 + 12) >= v85)
          {
LABEL_109:
            int v86 = (int64_t *)(*(void *)(v82 + 24) + 8 * v84);
            *(_DWORD *)(v82 + 8) = v85;
          }
          else
          {
            if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v85, a4))
            {
              int v84 = *(_DWORD *)(v82 + 8);
              int v85 = v84 + v83;
              goto LABEL_109;
            }
            int v86 = 0;
          }
          if (*(int *)a4 < 1)
          {
            uint64_t v209 = 0;
            uint64_t v210 = *((int *)this + 14);
            uint64_t v207 = &v86[-v210];
            uint64_t v211 = -8 * v210;
            do
            {
              v86[v209] = v207[v209];
              ++v209;
            }
            while (v211 + v209 * 8);
LABEL_399:
            int v212 = *((_DWORD *)this + 68);
            BOOL v124 = __OFSUB__(v212--, 1);
            *((_DWORD *)this + 68) = v212;
            if ((v212 < 0) ^ v124 | (v212 == 0)) {
              icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
            }
            v207[1] = v80;
          }
          else
          {
LABEL_394:
            *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_395:
            int v86 = v15;
          }
          ++v86[1];
          goto LABEL_435;
        }
LABEL_103:
        uint64_t v81 = v80 + 1;
LABEL_345:
        v15[1] = v81;
        goto LABEL_772;
      case 0x35:
        int isWordBoundary = icu::RegexMatcher::isUWordBoundary(this, *v15, a4);
LABEL_667:
        if (isWordBoundary != (v244 != 0)) {
          goto LABEL_772;
        }
        goto LABEL_771;
      case 0x36:
        int64_t v350 = *v15;
        if (*v15 < *((void *)this + 11))
        {
          uint64_t v87 = (UText *)*((void *)this + 4);
          uint64_t v88 = v350 - v87->chunkNativeStart;
          if (v88 < 0 || v88 >= v87->nativeIndexingLimit || v87->chunkContents[v88] >> 10 > 0x36u)
          {
            utext_setNativeIndex(v87, v350);
            uint64_t v87 = (UText *)*((void *)this + 4);
            LODWORD(v88) = v87->chunkOffset;
          }
          else
          {
            v87->uint64_t chunkOffset = v88;
          }
          if ((int)v88 >= v87->chunkLength || (unsigned int v89 = v87->chunkContents[(int)v88], v89 >> 11 > 0x1A)) {
            unsigned int v89 = utext_next32(v87);
          }
          else {
            v87->uint64_t chunkOffset = v88 + 1;
          }
          if (v89 != 10) {
            goto LABEL_771;
          }
          uint64_t v115 = *((void *)this + 4);
          uint64_t v116 = *(int *)(v115 + 40);
          uint64_t v117 = (int)v116 <= *(_DWORD *)(v115 + 28)
               ? *(void *)(v115 + 32) + v116
               : (*(uint64_t (**)(void))(*(void *)(v115 + 56) + 64))();
          if (v117 != *((void *)this + 11)) {
            goto LABEL_771;
          }
        }
        goto LABEL_442;
      case 0x37:
        int64_t v351 = *v15;
        if (*v15 >= *((void *)this + 11)) {
          goto LABEL_442;
        }
        uint64_t v90 = (UText *)*((void *)this + 4);
        uint64_t v91 = v351 - v90->chunkNativeStart;
        if (v91 < 0 || v91 >= v90->nativeIndexingLimit || v90->chunkContents[v91] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v90, v351);
          uint64_t v90 = (UText *)*((void *)this + 4);
          LODWORD(v91) = v90->chunkOffset;
        }
        else
        {
          v90->uint64_t chunkOffset = v91;
        }
        if ((int)v91 < v90->chunkLength)
        {
          unsigned int v52 = v90->chunkContents[(int)v91];
          if (v52 >> 11 <= 0x1A) {
            goto LABEL_204;
          }
        }
        UChar32 v92 = utext_current32(v90);
        goto LABEL_203;
      case 0x38:
        int64_t v352 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        int v93 = (UText *)*((void *)this + 4);
        uint64_t v94 = v352 - v93->chunkNativeStart;
        if (v94 < 0 || v94 >= v93->nativeIndexingLimit || v93->chunkContents[v94] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v93, v352);
          int v93 = (UText *)*((void *)this + 4);
          LODWORD(v94) = v93->chunkOffset;
        }
        else
        {
          v93->uint64_t chunkOffset = v94;
        }
        if ((int)v94 >= v93->chunkLength || (unsigned int v95 = v93->chunkContents[(int)v94], v95 >> 11 > 0x1A)) {
          unsigned int v95 = utext_next32(v93);
        }
        else {
          v93->uint64_t chunkOffset = v94 + 1;
        }
        int v118 = u_charType(v95);
        BOOL v112 = v95 == 9 || v118 == 12;
LABEL_188:
        int v119 = v112;
        int v120 = v244 != 0;
        goto LABEL_304;
      case 0x39:
        int64_t v353 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        uint64_t v96 = (UText *)*((void *)this + 4);
        uint64_t v97 = v353 - v96->chunkNativeStart;
        if (v97 < 0 || v97 >= v96->nativeIndexingLimit || v96->chunkContents[v97] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v96, v353);
          uint64_t v96 = (UText *)*((void *)this + 4);
          LODWORD(v97) = v96->chunkOffset;
        }
        else
        {
          v96->uint64_t chunkOffset = v97;
        }
        if ((int)v97 >= v96->chunkLength || (UChar32 v98 = v96->chunkContents[(int)v97], v98 >> 11 > 0x1A)) {
          UChar32 v98 = utext_next32(v96);
        }
        else {
          v96->uint64_t chunkOffset = v97 + 1;
        }
        if ((v98 & 0xFFFFDF50) != 0) {
          goto LABEL_771;
        }
        if (v98 <= 132)
        {
          if ((v98 - 10) >= 3)
          {
            if (v98 != 13) {
              goto LABEL_771;
            }
            if (utext_current32(*((UText **)this + 4)) == 10) {
              utext_next32(*((UText **)this + 4));
            }
          }
LABEL_305:
          unint64_t v141 = (UText *)*((void *)this + 4);
          goto LABEL_306;
        }
        if ((v98 - 8232) < 2 || v98 == 133) {
          goto LABEL_305;
        }
        goto LABEL_771;
      case 0x3A:
        int64_t v354 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_770;
        }
        uint64_t v99 = (UText *)*((void *)this + 4);
        uint64_t v100 = v354 - v99->chunkNativeStart;
        if (v100 < 0 || v100 >= v99->nativeIndexingLimit || v99->chunkContents[v100] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v99, v354);
          uint64_t v99 = (UText *)*((void *)this + 4);
          LODWORD(v100) = v99->chunkOffset;
        }
        else
        {
          v99->uint64_t chunkOffset = v100;
        }
        if ((int)v100 >= v99->chunkLength || (unsigned int v101 = v99->chunkContents[(int)v100], v101 >> 11 > 0x1A)) {
          unsigned int v101 = utext_next32(v99);
        }
        else {
          v99->uint64_t chunkOffset = v100 + 1;
        }
        if ((v101 & 0xFFFFDF50) != 0 || (int v120 = 1, v101 - 10 >= 4) && v101 - 8232 >= 2 && v101 != 133) {
          int v120 = 0;
        }
        int v119 = v244 != 0;
LABEL_304:
        if (v120 != v119) {
          goto LABEL_305;
        }
        goto LABEL_771;
      default:
        goto LABEL_778;
    }
  }
}

uint64_t sub_18C9C58C8(int a1)
{
  BOOL v1 = (a1 - 8232) < 2 || a1 == 133;
  unsigned int v2 = (a1 - 10) < 4 || v1;
  if ((a1 & 0xFFFFDF50) != 0) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t icu::RegexMatcher::find(icu::RegexMatcher *this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  UErrorCode v3 = *((_DWORD *)this + 79);
  if (v3 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_6:
    *a3 = v3;
    return 0;
  }
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = v4;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = v4;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = v4;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = v4;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
  *((unsigned char *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000;
  if (a2 < 0 || v4 < a2)
  {
    UErrorCode v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_6;
  }
  *((void *)this + 18) = a2;
  return icu::RegexMatcher::find(this, a3);
}

double icu::RegexMatcher::reset(icu::RegexMatcher *this)
{
  uint64_t v1 = *((void *)this + 6);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = v1;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = v1;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = v1;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = v1;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  double result = NAN;
  *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
  *((unsigned char *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000;
  return result;
}

void icu::RegexMatcher::MatchChunkAt(icu::RegexMatcher *this, int a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return;
  }
  uint64_t v8 = *((void *)this + 1);
  __int16 v9 = *(_WORD *)(v8 + 48);
  if ((v9 & 0x11) != 0)
  {
    uint64_t v10 = 0;
  }
  else if ((v9 & 2) != 0)
  {
    uint64_t v10 = v8 + 50;
  }
  else
  {
    uint64_t v10 = *(void *)(v8 + 64);
  }
  uint64_t v11 = *(void *)(*(void *)(v8 + 32) + 24);
  int v12 = *(icu::UVector **)(v8 + 104);
  uint64_t v13 = *(void *)(*((void *)this + 4) + 48);
  *((_DWORD *)this + 14) = *(_DWORD *)(v8 + 128);
  UErrorCode v14 = (void *)icu::RegexMatcher::resetStack(this);
  UErrorCode v15 = *((_DWORD *)this + 79);
  if (v15 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a4 = v15;
    return;
  }
  uint64_t v16 = (uint64_t)v14;
  int64_t v354 = v12;
  uint64_t v355 = v10;
  int v353 = a3;
  void *v14 = a2;
  v14[1] = 0;
  uint64_t v352 = a2;
  uint64_t v17 = *(unsigned int *)(*((void *)this + 1) + 132);
  if ((int)v17 >= 1) {
    bzero(*((void **)this + 24), 8 * v17);
  }
  while (1)
  {
    uint64_t v135 = *(void *)(v16 + 8);
    uint64_t v136 = *(void *)(v11 + 8 * v135);
    uint64_t v137 = v135 + 1;
    *(void *)(v16 + 8) = v135 + 1;
    UErrorCode v138 = U_INTERNAL_PROGRAM_ERROR;
    int v139 = v136 & 0xFFFFFF;
    switch(BYTE3(v136))
    {
      case 1:
        goto LABEL_596;
      case 2:
        if (v353 && *(void *)v16 != *((void *)this + 15)) {
          goto LABEL_596;
        }
        *((unsigned char *)this + 130) = 1;
        *((void *)this + 19) = *((void *)this + 18);
        *((void *)this + 17) = v352;
        *((void *)this + 18) = *(void *)v16;
        goto LABEL_599;
      case 3:
        uint64_t v140 = *(void *)v16;
        uint64_t v141 = *((void *)this + 15);
        if (*(void *)v16 >= v141) {
          goto LABEL_595;
        }
        uint64_t v142 = v140 + 1;
        *(void *)uint64_t v16 = v140 + 1;
        int v143 = *(unsigned __int16 *)(v13 + 2 * v140);
        if ((v143 & 0xFC00) == 0xD800 && v142 != v141)
        {
          int v145 = *(unsigned __int16 *)(v13 + 2 * v142);
          if ((v145 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v140 + 2;
            int v143 = (v143 << 10) - 56613888 + v145;
          }
        }
        if (v143 == v139) {
          goto LABEL_597;
        }
        goto LABEL_596;
      case 4:
        uint64_t v146 = *(void *)(v11 + 8 * v137);
        *(void *)(v16 + 8) = v135 + 2;
        uint64_t v147 = v146 & 0xFFFFFF;
        unsigned int v148 = (unsigned __int16 *)(v13 + 2 * *(void *)v16);
        BOOL v149 = (unsigned __int16 *)(v355 + 2 * (v136 & 0xFFFFFF));
        uint64_t v150 = &v148[v147];
        while (v148 < v150)
        {
          if ((unint64_t)v148 >= v13 + 2 * *((void *)this + 15)) {
            goto LABEL_595;
          }
          int v152 = *v148++;
          int v151 = v152;
          int v153 = *v149++;
          if (v151 != v153) {
            goto LABEL_596;
          }
        }
        uint64_t v38 = *(void *)v16 + v147;
        goto LABEL_67;
      case 6:
        if (*(int *)a4 > 0) {
          goto LABEL_598;
        }
        uint64_t v154 = *((void *)this + 22);
        int v155 = *((_DWORD *)this + 14);
        int v156 = *(_DWORD *)(v154 + 8);
        int v157 = v156 + v155;
        if (v156 + v155 >= 0 && *(_DWORD *)(v154 + 12) >= v157) {
          goto LABEL_292;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v157, a4))
        {
          int v156 = *(_DWORD *)(v154 + 8);
          int v157 = v156 + v155;
LABEL_292:
          uint64_t v32 = (void *)(*(void *)(v154 + 24) + 8 * v156);
          *(_DWORD *)(v154 + 8) = v157;
        }
        else
        {
          uint64_t v32 = 0;
        }
        if (*(int *)a4 > 0) {
          goto LABEL_602;
        }
        uint64_t v59 = 0;
        uint64_t v60 = v136 & 0xFFFFFF;
        uint64_t v61 = *((int *)this + 14);
        unsigned int v62 = &v32[-v61];
        uint64_t v63 = -8 * v61;
        do
        {
          v32[v59] = v62[v59];
          ++v59;
        }
        while (v63 + v59 * 8);
        int v64 = *((_DWORD *)this + 68);
        BOOL v65 = __OFSUB__(v64--, 1);
        *((_DWORD *)this + 68) = v64;
        if ((v64 < 0) ^ v65 | (v64 == 0)) {
          icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
        }
        v62[1] = v60;
        goto LABEL_220;
      case 7:
        goto LABEL_597;
      case 8:
        uint64_t v158 = *(void *)v16;
        uint64_t v159 = v16 + 8 * (v139 + 2);
        goto LABEL_415;
      case 9:
        uint64_t v160 = v16 + 16;
        uint64_t v161 = *(void *)v16;
        *(void *)(v16 + 16 + 8 * (v136 & 0xFFFFFF)) = *(void *)(v16 + 16 + 8 * (v139 + 2));
        unsigned int v162 = v139 + 1;
        goto LABEL_468;
      case 0xA:
        uint64_t v163 = *(void *)v16;
        uint64_t v164 = *((void *)this + 15);
        if (*(void *)v16 >= v164) {
          goto LABEL_595;
        }
        uint64_t v165 = v136 & 0x7FFFFF;
        uint64_t v166 = v163 + 1;
        *(void *)uint64_t v16 = v163 + 1;
        unint64_t v167 = *(unsigned __int16 *)(v13 + 2 * v163);
        if ((v167 & 0xFC00) == 0xD800)
        {
          if (v166 != v164)
          {
            int v168 = *(unsigned __int16 *)(v13 + 2 * v166);
            if ((v168 & 0xFC00) == 0xDC00)
            {
              *(void *)uint64_t v16 = v163 + 2;
              LODWORD(v167) = (v167 << 10) - 56613888 + v168;
            }
          }
        }
        else if (v167 <= 0xFF)
        {
          BOOL v39 = ((*(unsigned __int8 *)(qword_1EB20BEF0 + 32 * v165 + (v167 >> 3) + 2608) >> (v167 & 7)) & 1) == 0;
          goto LABEL_47;
        }
        BOOL v39 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1EB20BEF0 + 200 * v165 + 8), v167) == 0;
LABEL_47:
        if (v39) {
          unsigned int v41 = (v136 & 0x800000) >> 23;
        }
        else {
          unsigned int v41 = (v136 & 0x800000) == 0;
        }
        if (!v41) {
          goto LABEL_596;
        }
        goto LABEL_597;
      case 0xB:
        uint64_t v169 = *(void *)v16;
        uint64_t v170 = *((void *)this + 15);
        if (*(void *)v16 >= v170) {
          goto LABEL_595;
        }
        uint64_t v171 = v169 + 1;
        *(void *)uint64_t v16 = v169 + 1;
        unint64_t v172 = *(unsigned __int16 *)(v13 + 2 * v169);
        if ((v172 & 0xFC00) == 0xD800)
        {
          if (v171 != v170)
          {
            int v173 = *(unsigned __int16 *)(v13 + 2 * v171);
            if ((v173 & 0xFC00) == 0xDC00)
            {
              *(void *)uint64_t v16 = v169 + 2;
              LODWORD(v172) = (v172 << 10) - 56613888 + v173;
            }
          }
        }
        else if (v172 <= 0xFF)
        {
          if ((*(unsigned __int8 *)(*(void *)(*((void *)this + 1) + 112) + 32 * (v136 & 0xFFFFFF) + (v172 >> 3)) >> (v172 & 7))) {
            goto LABEL_597;
          }
          goto LABEL_596;
        }
        uint64_t v42 = (icu::UnicodeSet *)icu::UVector::elementAt(v354, v136 & 0xFFFFFF);
        if (icu::UnicodeSet::contains(v42, v172)) {
          goto LABEL_597;
        }
        goto LABEL_596;
      case 0xC:
        uint64_t v174 = *(void *)v16;
        uint64_t v175 = *((void *)this + 15);
        if (*(void *)v16 >= v175) {
          goto LABEL_595;
        }
        uint64_t v176 = v174 + 1;
        *(void *)uint64_t v16 = v174 + 1;
        int v177 = *(unsigned __int16 *)(v13 + 2 * v174);
        if ((v177 & 0xFC00) == 0xD800 && v176 != v175)
        {
          int v179 = *(unsigned __int16 *)(v13 + 2 * v176);
          if ((v179 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v174 + 2;
            int v177 = (v177 << 10) - 56613888 + v179;
          }
        }
        if ((v177 & 0xFFFFDF50) != 0) {
          goto LABEL_597;
        }
        BOOL v180 = (v177 - 10) >= 4 && (v177 - 8232) >= 2;
        if (v180 && v177 != 133) {
          goto LABEL_597;
        }
        goto LABEL_596;
      case 0xD:
        goto LABEL_417;
      case 0xE:
        goto LABEL_598;
      case 0xF:
        if (*(int *)a4 > 0) {
          goto LABEL_176;
        }
        uint64_t v181 = *((void *)this + 22);
        int v182 = *((_DWORD *)this + 14);
        int v183 = *(_DWORD *)(v181 + 8);
        int v184 = v183 + v182;
        if (v183 + v182 >= 0 && *(_DWORD *)(v181 + 12) >= v184) {
          goto LABEL_325;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v184, a4))
        {
          int v183 = *(_DWORD *)(v181 + 8);
          int v184 = v183 + v182;
LABEL_325:
          uint64_t v32 = (void *)(*(void *)(v181 + 24) + 8 * v183);
          *(_DWORD *)(v181 + 8) = v184;
        }
        else
        {
          uint64_t v32 = 0;
        }
        if (*(int *)a4 < 1)
        {
          uint64_t v96 = 0;
          uint64_t v97 = *((int *)this + 14);
          UChar32 v98 = &v32[-v97];
          uint64_t v99 = -8 * v97;
          do
          {
            v32[v96] = v98[v96];
            ++v96;
          }
          while (v99 + v96 * 8);
          int v100 = *((_DWORD *)this + 68);
          BOOL v65 = __OFSUB__(v100--, 1);
          *((_DWORD *)this + 68) = v100;
          if ((v100 < 0) ^ v65 | (v100 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v98[1] = v137;
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_176:
          uint64_t v32 = (void *)v16;
        }
        uint64_t v95 = v136 & 0xFFFFFF;
        goto LABEL_219;
      case 0x10:
        int isChunkWordBoundary = icu::RegexMatcher::isChunkWordBoundary(this, *(_DWORD *)v16);
        goto LABEL_539;
      case 0x11:
        uint64_t v186 = *(void *)v16;
        if (*((unsigned char *)this + 130)) {
          uint64_t v37 = *((void *)this + 18);
        }
        else {
          uint64_t v37 = *((void *)this + 14);
        }
        goto LABEL_38;
      case 0x12:
        uint64_t v187 = *(void *)(v11 + 8 * (v139 - 1)) & 0xFFFFFFLL;
        if (*(int *)(v16 + 8 * v187 + 16) >= *(void *)v16) {
          goto LABEL_597;
        }
        if (*(int *)a4 > 0) {
          goto LABEL_198;
        }
        uint64_t v188 = *((void *)this + 22);
        int v189 = *((_DWORD *)this + 14);
        int v190 = *(_DWORD *)(v188 + 8);
        int v191 = v190 + v189;
        if (v190 + v189 >= 0 && *(_DWORD *)(v188 + 12) >= v191) {
          goto LABEL_335;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v191, a4))
        {
          int v190 = *(_DWORD *)(v188 + 8);
          int v191 = v190 + v189;
LABEL_335:
          uint64_t v32 = (void *)(*(void *)(v188 + 24) + 8 * v190);
          *(_DWORD *)(v188 + 8) = v191;
        }
        else
        {
          uint64_t v32 = 0;
        }
        if (*(int *)a4 < 1)
        {
          uint64_t v101 = 0;
          uint64_t v102 = *((int *)this + 14);
          int64_t v103 = &v32[-v102];
          uint64_t v104 = -8 * v102;
          do
          {
            v32[v101] = v103[v101];
            ++v101;
          }
          while (v104 + v101 * 8);
          int v105 = *((_DWORD *)this + 68);
          BOOL v65 = __OFSUB__(v105--, 1);
          *((_DWORD *)this + 68) = v105;
          if ((v105 < 0) ^ v65 | (v105 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v103[1] = v137;
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_198:
          uint64_t v32 = (void *)v16;
        }
        v32[1] = v136 & 0xFFFFFF;
        v32[v187 + 2] = *v32;
        goto LABEL_220;
      case 0x13:
        if (*(void *)v16 >= *((void *)this + 15)) {
          goto LABEL_595;
        }
        uint64_t v192 = icu::RegexMatcher::followingGCBoundary(this, *(void *)v16, a4);
        *(void *)uint64_t v16 = v192;
        uint64_t v38 = *((void *)this + 15);
        if (v192 < v38) {
          goto LABEL_597;
        }
        *((unsigned char *)this + 168) = 1;
        goto LABEL_67;
      case 0x14:
        if (*(void *)v16 < *((void *)this + 11)) {
          goto LABEL_596;
        }
        goto LABEL_268;
      case 0x15:
        uint64_t v193 = *(void *)v16;
        uint64_t v194 = *((void *)this + 15);
        if (*(void *)v16 >= v194) {
          goto LABEL_595;
        }
        uint64_t v195 = v193 + 1;
        *(void *)uint64_t v16 = v193 + 1;
        int v196 = *(unsigned __int16 *)(v13 + 2 * v193);
        if ((v196 & 0xFC00) == 0xD800)
        {
          if (v195 == v194) {
            goto LABEL_597;
          }
          __int16 v197 = *(_WORD *)(v13 + 2 * v195);
          goto LABEL_376;
        }
        BOOL v43 = v196 == 13 && v195 < v194;
        if (!v43 || *(_WORD *)(v13 + 2 * v195) != 10) {
          goto LABEL_597;
        }
        goto LABEL_66;
      case 0x16:
        uint64_t v198 = *(void *)v16;
        uint64_t v199 = *((void *)this + 15);
        if (*(void *)v16 >= v199) {
          goto LABEL_595;
        }
        uint64_t v200 = v198 + 1;
        *(void *)uint64_t v16 = v198 + 1;
        UChar32 v201 = *(unsigned __int16 *)(v13 + 2 * v198);
        if ((v201 & 0xFC00) == 0xD800 && v200 != v199)
        {
          int v203 = *(unsigned __int16 *)(v13 + 2 * v200);
          if ((v203 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v198 + 2;
            UChar32 v201 = (v201 << 10) - 56613888 + v203;
          }
        }
        BOOL v204 = u_charType(v201) == 9;
        goto LABEL_560;
      case 0x17:
        uint64_t v186 = *(void *)v16;
        uint64_t v37 = *((void *)this + 10);
LABEL_38:
        if (v186 == v37) {
          goto LABEL_597;
        }
        goto LABEL_596;
      case 0x18:
        uint64_t v205 = *(void *)v16;
        uint64_t v206 = *((void *)this + 11);
        if (*(void *)v16 < v206 - 2) {
          goto LABEL_596;
        }
        if (v205 >= v206) {
          goto LABEL_268;
        }
        if (v205 == v206 - 1)
        {
          int v134 = *(unsigned __int16 *)(v13 + 2 * v205);
          if ((v134 & 0xF800) != 0xD800) {
            goto LABEL_264;
          }
          if ((v134 & 0x400) != 0)
          {
            if (v205 <= *((void *)this + 10)) {
              goto LABEL_264;
            }
            int v131 = *(unsigned __int16 *)(v13 + 2 * v205 - 2);
            BOOL v132 = (v131 & 0xFC00) == 55296;
            int v133 = v134 - 56613888 + (v131 << 10);
          }
          else
          {
            if (v205 + 1 == v206) {
              goto LABEL_264;
            }
            int v207 = *(unsigned __int16 *)(v13 + 2 * (v205 + 1));
            BOOL v132 = (v207 & 0xFC00) == 56320;
            int v133 = (v134 << 10) - 56613888 + v207;
          }
          if (v132) {
            int v134 = v133;
          }
LABEL_264:
          if (sub_18C9C58C8(v134)
            && (v134 != 10 || v205 <= *((void *)this + 10) || *(_WORD *)(v13 + 2 * v205 - 2) != 13))
          {
            goto LABEL_268;
          }
          goto LABEL_596;
        }
        if (v205 == v206 - 2 && *(_WORD *)(v13 + 2 * v205) == 13)
        {
          int v89 = *(unsigned __int16 *)(v13 + 2 * v205 + 2);
LABEL_544:
          if (v89 == 10)
          {
LABEL_268:
            *((_WORD *)this + 84) = 257;
            goto LABEL_597;
          }
        }
        goto LABEL_596;
      case 0x19:
        *(void *)(v16 + 8 * (v136 & 0xFFFFFF) + 16) = 0;
        *(void *)(v16 + 8) = v135 + 4;
        int v208 = *(_DWORD *)(v11 + (((v137 << 32) + 0x200000000) >> 29));
        if (*(_DWORD *)(v11 + (((v137 << 32) + 0x100000000) >> 29)) || *(int *)a4 > 0) {
          goto LABEL_232;
        }
        uint64_t v209 = *(void *)(v11 + 8 * (int)v137);
        uint64_t v210 = *((void *)this + 22);
        int v211 = *((_DWORD *)this + 14);
        int v212 = *(_DWORD *)(v210 + 8);
        int v213 = v212 + v211;
        if (v212 + v211 >= 0 && *(_DWORD *)(v210 + 12) >= v213) {
          goto LABEL_367;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v213, a4))
        {
          int v212 = *(_DWORD *)(v210 + 8);
          int v213 = v212 + v211;
LABEL_367:
          int v83 = (void *)(*(void *)(v210 + 24) + 8 * v212);
          *(_DWORD *)(v210 + 8) = v213;
        }
        else
        {
          int v83 = 0;
        }
        if (*(int *)a4 < 1)
        {
          uint64_t v116 = 0;
          uint64_t v117 = (v209 & 0xFFFFFF) + 1;
          uint64_t v118 = *((int *)this + 14);
          int v119 = &v83[-v118];
          uint64_t v120 = -8 * v118;
          do
          {
            v83[v116] = v119[v116];
            ++v116;
          }
          while (v120 + v116 * 8);
          int v121 = *((_DWORD *)this + 68);
          BOOL v65 = __OFSUB__(v121--, 1);
          *((_DWORD *)this + 68) = v121;
          if ((v121 < 0) ^ v65 | (v121 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v119[1] = v117;
          if (v208) {
            goto LABEL_233;
          }
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_232:
          int v83 = (void *)v16;
          if (v208)
          {
LABEL_233:
            if (v208 == -1) {
              v83[(v139 + 1) + 2] = *v83;
            }
            goto LABEL_252;
          }
        }
        goto LABEL_596;
      case 0x1A:
        *(void *)(v16 + 8 * (v136 & 0xFFFFFF) + 16) = 0;
        *(void *)(v16 + 8) = v135 + 4;
        uint64_t v214 = *(void *)(v11 + 8 * (int)v137);
        uint64_t v215 = *(unsigned int *)(v11 + (((v137 << 32) + 0x100000000) >> 29));
        int v216 = *(_DWORD *)(v11 + (((v137 << 32) + 0x200000000) >> 29));
        if (v216 == -1)
        {
          *(void *)(v16 + 8 * (v139 + 1) + 16) = *(void *)v16;
          if (v215) {
            goto LABEL_597;
          }
LABEL_41:
          uint64_t v16 = sub_18C9CA248(this, v16, v135 + 4, a4);
LABEL_42:
          uint64_t v26 = (v214 & 0xFFFFFF) + 1;
          goto LABEL_155;
        }
        if (!*(_DWORD *)(v11 + (((v137 << 32) + 0x100000000) >> 29)))
        {
          if (!v216) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
        goto LABEL_597;
      case 0x1B:
        uint64_t v193 = *(void *)v16;
        uint64_t v217 = *((void *)this + 15);
        if (*(void *)v16 >= v217) {
          goto LABEL_595;
        }
        uint64_t v218 = v193 + 1;
        *(void *)uint64_t v16 = v193 + 1;
        int v219 = *(unsigned __int16 *)(v13 + 2 * v193);
        if ((v219 & 0xFC00) == 0xD800)
        {
          if (v218 != v217)
          {
            __int16 v197 = *(_WORD *)(v13 + 2 * v218);
LABEL_376:
            if ((v197 & 0xFC00) == 0xDC00)
            {
LABEL_66:
              uint64_t v38 = v193 + 2;
              goto LABEL_67;
            }
          }
        }
        else if (v219 == 10)
        {
          goto LABEL_596;
        }
        goto LABEL_597;
      case 0x1C:
        uint64_t v220 = *(void *)(v11 + 8 * (v136 & 0xFFFFFF)) & 0xFFFFFFLL;
        uint64_t v221 = v16 + 8 * v220;
        uint64_t v222 = *(void *)(v11 + 8 * (v139 + 2));
        uint64_t v223 = *(void *)(v11 + 8 * (v139 + 3));
        uint64_t v224 = *(void *)(v221 + 16) + 1;
        *(void *)(v221 + 16) = v224;
        if (v223 != -1 && v224 >= (unint64_t)v223) {
          goto LABEL_597;
        }
        if (v224 >= (int)v222)
        {
          if (v223 == -1)
          {
            uint64_t v44 = v16 + 8 * v220;
            uint64_t v46 = *(void *)(v44 + 24);
            int32_t v45 = (void *)(v44 + 24);
            if (*(void *)v16 == v46) {
              goto LABEL_597;
            }
            *int32_t v45 = *(void *)v16;
          }
          uint64_t v16 = sub_18C9CA248(this, v16, v135 + 1, a4);
        }
        else
        {
          int v226 = *((_DWORD *)this + 68);
          BOOL v65 = __OFSUB__(v226--, 1);
          *((_DWORD *)this + 68) = v226;
          if ((v226 < 0) ^ v65 | (v226 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
        }
        uint64_t v26 = (v139 + 4);
        goto LABEL_155;
      case 0x1D:
        uint64_t v227 = *(void *)(v11 + 8 * (v136 & 0xFFFFFF)) & 0xFFFFFFLL;
        uint64_t v228 = v16 + 8 * v227;
        uint64_t v229 = *(void *)(v11 + 8 * (v139 + 2));
        uint64_t v230 = *(void *)(v11 + 8 * (v139 + 3));
        uint64_t v231 = *(void *)(v228 + 16) + 1;
        *(void *)(v228 + 16) = v231;
        if (v230 != -1 && v231 >= (unint64_t)v230) {
          goto LABEL_597;
        }
        if (v231 >= (int)v229)
        {
          if (v230 == -1)
          {
            uint64_t v47 = v16 + 8 * v227;
            uint64_t v49 = *(void *)(v47 + 24);
            unsigned int v48 = (void *)(v47 + 24);
            if (*(void *)v16 == v49) {
              goto LABEL_597;
            }
            *unsigned int v48 = *(void *)v16;
          }
          uint64_t v16 = sub_18C9CA248(this, v16, (v139 + 4), a4);
        }
        else
        {
          *(void *)(v16 + 8) = (v139 + 4);
          int v233 = *((_DWORD *)this + 68);
          BOOL v65 = __OFSUB__(v233--, 1);
          *((_DWORD *)this + 68) = v233;
          if ((v233 < 0) ^ v65 | (v233 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
        }
        goto LABEL_597;
      case 0x1E:
        if (*(void *)v16 <= *((void *)this + 10)) {
          goto LABEL_597;
        }
        int v234 = *(unsigned __int16 *)(v13 + 2 * *(void *)v16 - 2);
        goto LABEL_548;
      case 0x20:
        *(void *)(*((void *)this + 24) + 8 * (v136 & 0xFFFFFF)) = *(int *)(*((void *)this + 22) + 8);
        goto LABEL_597;
      case 0x21:
        uint64_t v235 = *(void *)(*((void *)this + 24) + 8 * (v136 & 0xFFFFFF));
        uint64_t v236 = (icu::UVector64 *)*((void *)this + 22);
        uint64_t v32 = (void *)(*((void *)v236 + 3) + 8 * (int)v235 - 8 * *((int *)this + 14));
        if (v32 == (void *)v16) {
          goto LABEL_597;
        }
        uint64_t v237 = *((unsigned int *)this + 14);
        if ((int)v237 >= 1)
        {
          uint64_t v238 = (uint64_t *)(*((void *)v236 + 3) + 8 * (int)v235 - 8 * *((int *)this + 14));
          do
          {
            uint64_t v239 = *(void *)v16;
            v16 += 8;
            *v238++ = v239;
            --v237;
          }
          while (v237);
        }
        icu::UVector64::setSize(v236, v235);
        goto LABEL_220;
      case 0x22:
        uint64_t v240 = *(void *)(v16 + 16 + 8 * (v136 & 0xFFFFFF));
        if (v240 < 0) {
          goto LABEL_596;
        }
        uint64_t v241 = *(void *)(v16 + 16 + 8 * (v139 + 1));
        uint64_t v242 = *(void *)v16;
        uint64_t v38 = *(void *)v16;
        uint64_t v243 = v241 - v240;
        if (v241 <= v240) {
          goto LABEL_67;
        }
        uint64_t v244 = *((void *)this + 15);
        uint64_t v38 = v242 + v241 - v240;
        if (v242 > v244) {
          uint64_t v244 = *(void *)v16;
        }
        int64_t v245 = (unsigned __int16 *)(v13 + 2 * v240);
        uint64_t v246 = v244 - v242;
        v247 = (unsigned __int16 *)(v13 + 2 * v242);
        do
        {
          if (!v246)
          {
LABEL_595:
            *((unsigned char *)this + 168) = 1;
            goto LABEL_596;
          }
          if (*v245 != *v247) {
            goto LABEL_596;
          }
          ++v245;
          --v246;
          ++v247;
          --v243;
        }
        while (v243);
        if ((*(_WORD *)(v13 + 2 * v241 - 2) & 0xFC00) != 0xD800
          || v38 >= *((void *)this + 15)
          || (*(_WORD *)(v13 + 2 * v38) & 0xFC00) != 0xDC00)
        {
LABEL_67:
          *(void *)uint64_t v16 = v38;
          goto LABEL_597;
        }
        goto LABEL_596;
      case 0x23:
        uint64_t v158 = *(void *)v16;
        uint64_t v159 = v16 + 8 * (v136 & 0xFFFFFF);
LABEL_415:
        *(void *)(v159 + 16) = v158;
        goto LABEL_597;
      case 0x24:
        *(void *)(v16 + 8) = v135 + 2;
        if (*(int *)(v16 + 8 * (*(void *)(v11 + 8 * (int)v137) & 0xFFFFFFLL) + 16) >= *(void *)v16) {
          goto LABEL_596;
        }
LABEL_417:
        uint64_t v26 = v136 & 0xFFFFFF;
        goto LABEL_155;
      case 0x25:
        uint64_t v248 = *((void *)this + 24);
        *(void *)(v248 + 8 * (v136 & 0xFFFFFF)) = *(int *)(*((void *)this + 22) + 8);
        *(void *)(v248 + 8 * (v139 + 1)) = *(void *)v16;
        *(void *)(v248 + 8 * (v139 + 2)) = *((void *)this + 14);
        *(void *)(v248 + 8 * (v139 + 3)) = *((void *)this + 15);
        *((_OWORD *)this + 7) = *((_OWORD *)this + 6);
        goto LABEL_597;
      case 0x26:
        uint64_t v249 = *((void *)this + 22);
        uint64_t v250 = *((void *)this + 24);
        uint64_t v251 = *(void *)(v250 + 8 * (v136 & 0xFFFFFF));
        if (*(_DWORD *)(v249 + 8) <= (int)v251)
        {
          uint64_t v21 = (uint64_t *)v16;
        }
        else
        {
          uint64_t v252 = *((int *)this + 14);
          uint64_t v21 = (uint64_t *)(*(void *)(v249 + 24) + 8 * (int)v251 - 8 * v252);
          if ((int)v252 >= 1)
          {
            uint64_t v253 = *((unsigned int *)this + 14);
            v254 = v21;
            do
            {
              uint64_t v255 = *(void *)v16;
              v16 += 8;
              *v254++ = v255;
              --v253;
            }
            while (v253);
          }
          icu::UVector64::setSize((icu::UVector64 *)v249, v251);
          uint64_t v250 = *((void *)this + 24);
          uint64_t v16 = (uint64_t)v21;
        }
        *uint64_t v21 = *(void *)(v250 + 8 * (v139 + 1));
        goto LABEL_15;
      case 0x27:
        uint64_t v256 = *(void *)v16;
        uint64_t v257 = *((void *)this + 15);
        if (*(void *)v16 >= v257) {
          goto LABEL_595;
        }
        uint64_t v258 = v256 + 1;
        *(void *)uint64_t v16 = v256 + 1;
        UChar32 v259 = *(unsigned __int16 *)(v13 + 2 * v256);
        if ((v259 & 0xFC00) == 0xD800 && v258 != v257)
        {
          int v261 = *(unsigned __int16 *)(v13 + 2 * v258);
          if ((v261 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v256 + 2;
            UChar32 v259 = (v259 << 10) - 56613888 + v261;
          }
        }
        if (u_foldCase(v259, 0) == v139) {
          goto LABEL_597;
        }
        goto LABEL_596;
      case 0x28:
        uint64_t v262 = v355 + 2 * (v136 & 0xFFFFFF);
        uint64_t v263 = *(void *)(v11 + 8 * v137);
        *(void *)(v16 + 8) = v135 + 2;
        int v264 = v263 & 0xFFFFFF;
        uint64_t v360 = 0;
        long long v358 = 0u;
        long long v359 = 0u;
        sub_18C9B73A8((uint64_t)&v358, v13, *(void *)v16, *((void *)this + 15));
        int v265 = 0;
        while (v265 < v264)
        {
          uint64_t v266 = v265 + 1;
          int v267 = *(unsigned __int16 *)(v262 + 2 * v265);
          if ((v267 & 0xFC00) == 0xD800 && v266 != v264)
          {
            int v269 = *(unsigned __int16 *)(v262 + 2 * v266);
            BOOL v270 = (v269 & 0xFC00) == 56320;
            int v271 = v265 + 2;
            int v272 = (v267 << 10) - 56613888 + v269;
            if (v270) {
              int v267 = v272;
            }
            if (v270) {
              LODWORD(v266) = v271;
            }
          }
          int v273 = sub_18C9B73B8((uint64_t *)&v358);
          int v265 = v266;
          if (v273 != v267)
          {
            if (v273 == -1) {
              *((unsigned char *)this + 168) = 1;
            }
            sub_18C9B74E4((uint64_t)&v358);
            goto LABEL_12;
          }
        }
        if (sub_18C9B74E4((uint64_t)&v358))
        {
LABEL_12:
          uint64_t v18 = *((void *)this + 22);
          uint64_t v19 = *((int *)this + 14);
          unsigned int v20 = (*(_DWORD *)(v18 + 8) - v19) & ~((*(_DWORD *)(v18 + 8) - (int)v19) >> 31);
          *(_DWORD *)(v18 + 8) = v20;
          uint64_t v16 = *(void *)(v18 + 24) + 8 * v20 - 8 * v19;
          goto LABEL_126;
        }
        *(void *)uint64_t v16 = sub_18C9B74F4((uint64_t)&v358);
        goto LABEL_126;
      case 0x29:
        uint64_t v274 = *(void *)(v16 + 8 * (v136 & 0xFFFFFF) + 16);
        if (v274 < 0) {
          goto LABEL_596;
        }
        uint64_t v275 = *(void *)(v16 + 8 * (v139 + 1) + 16);
        uint64_t v360 = 0;
        long long v358 = 0u;
        long long v359 = 0u;
        sub_18C9B73A8((uint64_t)&v358, v13, v274, v275);
        uint64_t v357 = 0;
        memset(v356, 0, sizeof(v356));
        sub_18C9B73A8((uint64_t)v356, v13, *(void *)v16, *((void *)this + 15));
        while (2)
        {
          int v276 = sub_18C9B73B8((uint64_t *)&v358);
          if (v276 == -1)
          {
            if (!sub_18C9B74E4((uint64_t)v356))
            {
              *(void *)uint64_t v16 = sub_18C9B74F4((uint64_t)v356);
              goto LABEL_119;
            }
          }
          else
          {
            int v277 = v276;
            int v278 = sub_18C9B73B8((uint64_t *)v356);
            if (v278 != -1)
            {
              if (v278 != v277) {
                break;
              }
              continue;
            }
            *((unsigned char *)this + 168) = 1;
          }
          break;
        }
        uint64_t v66 = *((void *)this + 22);
        uint64_t v67 = *((int *)this + 14);
        unsigned int v68 = (*(_DWORD *)(v66 + 8) - v67) & ~((*(_DWORD *)(v66 + 8) - (int)v67) >> 31);
        *(_DWORD *)(v66 + 8) = v68;
        uint64_t v16 = *(void *)(v66 + 24) + 8 * v68 - 8 * v67;
LABEL_119:
        nullsub_17(v356);
LABEL_126:
        nullsub_17(&v358);
        goto LABEL_597;
      case 0x2A:
        uint64_t v279 = *(void *)v16;
        if (*(void *)v16 >= *((void *)this + 11)) {
          goto LABEL_268;
        }
        int v280 = *(unsigned __int16 *)(v13 + 2 * v279);
        if ((v280 & 0xDF50) != 0) {
          goto LABEL_596;
        }
        if (*(unsigned __int16 *)(v13 + 2 * v279) <= 0x84u)
        {
          if ((v280 - 11) >= 3
            && (v280 != 10 || v279 > *((void *)this + 10) && *(_WORD *)(v13 + 2 * v279 - 2) == 13))
          {
            goto LABEL_596;
          }
          goto LABEL_597;
        }
        if ((v280 - 8232) < 2 || v280 == 133) {
          goto LABEL_597;
        }
        goto LABEL_596;
      case 0x2B:
        uint64_t v281 = *(void *)v16;
        if (*(void *)v16 != *((void *)this + 10)
          && (v281 >= *((void *)this + 11) || !sub_18C9C58C8(*(unsigned __int16 *)(v13 + 2 * v281 - 2))))
        {
          goto LABEL_596;
        }
        goto LABEL_597;
      case 0x2C:
        uint64_t v160 = *((void *)this + 24);
        *(void *)(v160 + 8 * (v136 & 0xFFFFFF)) = *(int *)(*((void *)this + 22) + 8);
        *(void *)(v160 + 8 * (v139 + 1)) = *(void *)v16;
        *(void *)(v160 + 8 * (v139 + 2)) = *((void *)this + 14);
        *(void *)(v160 + 8 * (v139 + 3)) = *((void *)this + 15);
        *((void *)this + 14) = *((void *)this + 8);
        *((void *)this + 15) = *(void *)v16;
        unsigned int v162 = v139 + 4;
        uint64_t v161 = -1;
LABEL_468:
        *(void *)(v160 + 8 * v162) = v161;
        goto LABEL_597;
      case 0x2D:
        *(void *)(v16 + 8) = v135 + 2;
        uint64_t v282 = *(void *)(v11 + 8 * v137);
        *(void *)(v16 + 8) = v135 + 3;
        uint64_t v283 = *(void *)(v11 + 8 * (v135 + 2));
        uint64_t v284 = *((void *)this + 24);
        uint64_t v285 = (v139 + 4);
        uint64_t v286 = *(void *)(v284 + 8 * v285);
        if (v286 < 0)
        {
          uint64_t v33 = *(void *)v16 - (int)v282;
          *(void *)(v284 + 8 * v285) = v33;
          uint64_t v34 = v33 - 1;
          if (v33 < 1)
          {
            if (v33 < 0) {
              goto LABEL_143;
            }
            uint64_t v33 = 0;
            goto LABEL_142;
          }
          if (v33 >= *((void *)this + 6) || (*(_WORD *)(v13 + 2 * v33) & 0xFC00) != 0xDC00) {
            goto LABEL_142;
          }
        }
        else
        {
          if (!v286)
          {
            *(void *)(v284 + 8 * v285) = -1;
LABEL_143:
            uint64_t v75 = *((void *)this + 22);
            uint64_t v76 = *((int *)this + 14);
            unsigned int v77 = (*(_DWORD *)(v75 + 8) - v76) & ~((*(_DWORD *)(v75 + 8) - (int)v76) >> 31);
            *(_DWORD *)(v75 + 8) = v77;
            uint64_t v16 = *(void *)(v75 + 24) + 8 * v77 - 8 * v76;
            *((void *)this + 14) = *(void *)(v284 + 8 * (v139 + 2));
            uint64_t v22 = *(void *)(v284 + 8 * (v139 + 3));
LABEL_144:
            *((void *)this + 15) = v22;
            goto LABEL_597;
          }
          uint64_t v33 = v286 - 1;
          *(void *)(v284 + 8 * v285) = v286 - 1;
          if (v286 == 1 || (*(_WORD *)(v13 + 2 * (v286 - 1)) & 0xFC00) != 56320)
          {
LABEL_142:
            if (v33 < *(void *)v16 - (int)v283) {
              goto LABEL_143;
            }
            if (*(int *)a4 > 0) {
              goto LABEL_250;
            }
            uint64_t v78 = *(void *)(v16 + 8);
            uint64_t v79 = *((void *)this + 22);
            int v80 = *((_DWORD *)this + 14);
            int v81 = *(_DWORD *)(v79 + 8);
            int v82 = v81 + v80;
            if (v81 + v80 < 0 || *(_DWORD *)(v79 + 12) < v82)
            {
              if (!icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v82, a4))
              {
                int v83 = 0;
                goto LABEL_243;
              }
              int v81 = *(_DWORD *)(v79 + 8);
              int v82 = v81 + v80;
            }
            int v83 = (void *)(*(void *)(v79 + 24) + 8 * v81);
            *(_DWORD *)(v79 + 8) = v82;
LABEL_243:
            if (*(int *)a4 >= 1) {
              goto LABEL_249;
            }
            uint64_t v122 = 0;
            uint64_t v123 = v78 - 3;
            uint64_t v124 = *((int *)this + 14);
            int v125 = &v83[-v124];
            uint64_t v126 = -8 * v124;
            do
            {
              v83[v122] = v125[v122];
              ++v122;
            }
            while (v126 + v122 * 8);
            goto LABEL_255;
          }
          uint64_t v34 = v286 - 2;
        }
        if ((*(_WORD *)(v13 + 2 * v34) & 0xFC00) == 0xD800)
        {
          *(void *)(v284 + 8 * v285) = v34;
          uint64_t v33 = v34;
        }
        goto LABEL_142;
      case 0x2E:
        if (*(void *)v16 != *((void *)this + 15)) {
          goto LABEL_596;
        }
        uint64_t v250 = *((void *)this + 24);
LABEL_15:
        *((void *)this + 14) = *(void *)(v250 + 8 * (v139 + 2));
        uint64_t v22 = *(void *)(v250 + 8 * (v139 + 3));
        goto LABEL_144;
      case 0x2F:
        *(void *)(v16 + 8) = v135 + 2;
        uint64_t v288 = *(void *)(v11 + 8 * v137);
        *(void *)(v16 + 8) = v135 + 3;
        uint64_t v289 = *(void *)(v11 + 8 * (v135 + 2));
        *(void *)(v16 + 8) = v135 + 4;
        uint64_t v290 = *(void *)(v11 + 8 * (v135 + 3));
        uint64_t v284 = *((void *)this + 24);
        uint64_t v285 = (v139 + 4);
        uint64_t v291 = *(void *)(v284 + 8 * v285);
        if (v291 < 0)
        {
          uint64_t v35 = *(void *)v16 - (int)v288;
          *(void *)(v284 + 8 * v285) = v35;
          uint64_t v36 = v35 - 1;
          if (v35 < 1)
          {
            if (v35 < 0) {
              goto LABEL_154;
            }
            uint64_t v35 = 0;
            goto LABEL_153;
          }
          if (v35 >= *((void *)this + 6) || (*(_WORD *)(v13 + 2 * v35) & 0xFC00) != 0xDC00) {
            goto LABEL_153;
          }
        }
        else
        {
          if (!v291)
          {
            *(void *)(v284 + 8 * v285) = -1;
LABEL_154:
            uint64_t v26 = v290 & 0xFFFFFF;
            *((void *)this + 14) = *(void *)(v284 + 8 * (v139 + 2));
            *((void *)this + 15) = *(void *)(v284 + 8 * (v139 + 3));
            goto LABEL_155;
          }
          uint64_t v35 = v291 - 1;
          *(void *)(v284 + 8 * v285) = v291 - 1;
          if (v291 == 1 || (*(_WORD *)(v13 + 2 * (v291 - 1)) & 0xFC00) != 56320)
          {
LABEL_153:
            if (v35 < *(void *)v16 - (int)v289) {
              goto LABEL_154;
            }
            if (*(int *)a4 > 0) {
              goto LABEL_250;
            }
            uint64_t v84 = *(void *)(v16 + 8);
            uint64_t v85 = *((void *)this + 22);
            int v86 = *((_DWORD *)this + 14);
            int v87 = *(_DWORD *)(v85 + 8);
            int v88 = v87 + v86;
            if (v87 + v86 < 0 || *(_DWORD *)(v85 + 12) < v88)
            {
              if (!icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v88, a4))
              {
                int v83 = 0;
                goto LABEL_248;
              }
              int v87 = *(_DWORD *)(v85 + 8);
              int v88 = v87 + v86;
            }
            int v83 = (void *)(*(void *)(v85 + 24) + 8 * v87);
            *(_DWORD *)(v85 + 8) = v88;
LABEL_248:
            if (*(int *)a4 < 1)
            {
              uint64_t v127 = 0;
              uint64_t v123 = v84 - 4;
              uint64_t v128 = *((int *)this + 14);
              int v125 = &v83[-v128];
              uint64_t v129 = -8 * v128;
              do
              {
                v83[v127] = v125[v127];
                ++v127;
              }
              while (v129 + v127 * 8);
LABEL_255:
              int v130 = *((_DWORD *)this + 68);
              BOOL v65 = __OFSUB__(v130--, 1);
              *((_DWORD *)this + 68) = v130;
              if ((v130 < 0) ^ v65 | (v130 == 0)) {
                icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
              }
              v125[1] = v123;
LABEL_251:
              *int v83 = *(void *)(v284 + 8 * v285);
LABEL_252:
              uint64_t v16 = (uint64_t)v83;
              goto LABEL_597;
            }
LABEL_249:
            *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_250:
            int v83 = (void *)v16;
            goto LABEL_251;
          }
          uint64_t v36 = v291 - 2;
        }
        if ((*(_WORD *)(v13 + 2 * v36) & 0xFC00) == 0xD800)
        {
          *(void *)(v284 + 8 * v285) = v36;
          uint64_t v35 = v36;
        }
        goto LABEL_153;
      case 0x30:
        if (*(void *)v16 == *((void *)this + 15))
        {
          uint64_t v293 = *((void *)this + 24);
          *((void *)this + 14) = *(void *)(v293 + 8 * (v139 + 2));
          *((void *)this + 15) = *(void *)(v293 + 8 * (v139 + 3));
          icu::UVector64::setSize(*((icu::UVector64 **)this + 22), *(void *)(v293 + 8 * (v136 & 0xFFFFFF)));
        }
        goto LABEL_596;
      case 0x31:
        uint64_t v294 = *(void *)v16;
        uint64_t v295 = *((void *)this + 15);
        if (*(void *)v16 >= v295) {
          goto LABEL_595;
        }
        uint64_t v296 = v294 + 1;
        *(void *)uint64_t v16 = v294 + 1;
        unint64_t v297 = *(unsigned __int16 *)(v13 + 2 * v294);
        if ((v297 & 0xFC00) == 0xD800)
        {
          if (v296 != v295)
          {
            int v298 = *(unsigned __int16 *)(v13 + 2 * v296);
            if ((v298 & 0xFC00) == 0xDC00)
            {
              *(void *)uint64_t v16 = v294 + 2;
              LODWORD(v297) = (v297 << 10) - 56613888 + v298;
            }
          }
        }
        else if (v297 <= 0xFF)
        {
          if ((*(unsigned __int8 *)(qword_1EB20BEF0 + 32 * (v136 & 0xFFFFFF) + (v297 >> 3) + 2608) >> (v297 & 7))) {
            goto LABEL_596;
          }
          goto LABEL_597;
        }
        if (icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1EB20BEF0 + 200 * (v136 & 0xFFFFFF) + 8), v297))goto LABEL_596; {
        goto LABEL_597;
        }
      case 0x32:
        uint64_t v299 = *(void *)(*((void *)this + 1) + 112);
        uint64_t v300 = icu::UVector::elementAt(v354, v136 & 0xFFFFFF);
        uint64_t v24 = *(void *)v16;
        uint64_t v301 = *((void *)this + 15);
        if (v301 <= (int)*(void *)v16)
        {
          uint64_t v23 = *(void *)v16;
LABEL_17:
          *((unsigned char *)this + 168) = 1;
          LODWORD(v24) = v23;
          goto LABEL_18;
        }
        int64_t v302 = (icu::UnicodeSet *)v300;
        uint64_t v303 = v299 + 32 * (v136 & 0xFFFFFF);
        uint64_t v304 = (int)v24;
        while (2)
        {
          uint64_t v23 = (int)v24 + 1;
          unint64_t v305 = *(unsigned __int16 *)(v13 + 2 * v304);
          if ((v305 & 0xFC00) == 0xD800)
          {
            if (v301 != v23)
            {
              int v306 = *(unsigned __int16 *)(v13 + 2 * v23);
              BOOL v307 = (v306 & 0xFC00) == 56320;
              int v308 = v24 + 2;
              int v309 = (v305 << 10) - 56613888 + v306;
              if (v307) {
                LODWORD(v305) = v309;
              }
              if (v307) {
                LODWORD(v23) = v308;
              }
            }
          }
          else if (v305 <= 0xFF)
          {
            if ((*(unsigned __int8 *)(v303 + (v305 >> 3)) >> (v305 & 7))) {
              goto LABEL_509;
            }
            unsigned int v70 = v24 - 1;
            if ((int)v24 >= 1 && (*(_WORD *)(v13 + 2 * (int)v24) & 0xFC00) == 0xDC00) {
              goto LABEL_192;
            }
            goto LABEL_18;
          }
          if (icu::UnicodeSet::contains(v302, v305))
          {
            uint64_t v301 = *((void *)this + 15);
LABEL_509:
            LODWORD(v24) = v23;
            uint64_t v304 = (int)v23;
            if (v301 <= (int)v23) {
              goto LABEL_17;
            }
            continue;
          }
          break;
        }
        LODWORD(v24) = v23 - 1;
        if ((*(_WORD *)(v13 + 2 * ((int)v23 - 1)) & 0xFC00) == 0xDC00 && (int)v23 >= 2)
        {
          unsigned int v70 = v23 - 2;
LABEL_192:
          if ((*(_WORD *)(v13 + 2 * v70) & 0xFC00) == 0xD800) {
            LODWORD(v24) = v70;
          }
        }
LABEL_18:
        uint64_t v25 = *(void *)(v16 + 8);
        if (*(void *)v16 != (int)v24)
        {
          *(void *)(v16 + 8 * (*(void *)(v11 + 8 * v25) & 0xFFFFFFLL) + 16) = *(void *)v16;
          *(void *)uint64_t v16 = (int)v24;
          if (*(int *)a4 > 0) {
            goto LABEL_217;
          }
          uint64_t v28 = *((void *)this + 22);
          int v29 = *((_DWORD *)this + 14);
          int v30 = *(_DWORD *)(v28 + 8);
          int v31 = v30 + v29;
          if (v30 + v29 >= 0 && *(_DWORD *)(v28 + 12) >= v31)
          {
LABEL_26:
            uint64_t v32 = (void *)(*(void *)(v28 + 24) + 8 * v30);
            *(_DWORD *)(v28 + 8) = v31;
          }
          else
          {
            if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v31, a4))
            {
              int v30 = *(_DWORD *)(v28 + 8);
              int v31 = v30 + v29;
              goto LABEL_26;
            }
            uint64_t v32 = 0;
          }
          if (*(int *)a4 < 1)
          {
            uint64_t v111 = 0;
            uint64_t v112 = *((int *)this + 14);
            uint64_t v113 = &v32[-v112];
            uint64_t v114 = -8 * v112;
            do
            {
              v32[v111] = v113[v111];
              ++v111;
            }
            while (v114 + v111 * 8);
            int v115 = *((_DWORD *)this + 68);
            BOOL v65 = __OFSUB__(v115--, 1);
            *((_DWORD *)this + 68) = v115;
            if ((v115 < 0) ^ v65 | (v115 == 0)) {
              icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
            }
            v113[1] = v25;
          }
          else
          {
LABEL_216:
            *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_217:
            uint64_t v32 = (void *)v16;
          }
LABEL_218:
          uint64_t v95 = v32[1] + 1;
LABEL_219:
          v32[1] = v95;
          goto LABEL_220;
        }
        uint64_t v26 = v25 + 1;
LABEL_155:
        *(void *)(v16 + 8) = v26;
        goto LABEL_597;
      case 0x33:
        uint64_t v310 = *(int *)(v16 + 8 * (v136 & 0xFFFFFF) + 16);
        uint64_t v311 = *(void *)v16;
        if (v310 == *(void *)v16) {
          goto LABEL_597;
        }
        uint64_t v312 = v311 - 1;
        *(void *)uint64_t v16 = v311 - 1;
        int v313 = *(unsigned __int16 *)(v13 + 2 * (v311 - 1));
        BOOL v43 = v311 < 2;
        uint64_t v314 = v311 - 2;
        if (!v43 && (v313 & 0xFC00) == 0xDC00)
        {
          if ((*(_WORD *)(v13 + 2 * v314) & 0xFC00) != 0xD800) {
            goto LABEL_90;
          }
LABEL_515:
          *(void *)uint64_t v16 = v314;
          goto LABEL_90;
        }
        BOOL v50 = v313 != 10 || v312 <= v310;
        if (!v50
          && *(_WORD *)(v13 + 2 * v314) == 13
          && (unint64_t)*(unsigned __int8 *)(v11 + 8 * v135 - 5) << 24 == 872415232)
        {
          goto LABEL_515;
        }
LABEL_90:
        if (*(int *)a4 > 0) {
          goto LABEL_598;
        }
        uint64_t v51 = *((void *)this + 22);
        int v52 = *((_DWORD *)this + 14);
        int v53 = *(_DWORD *)(v51 + 8);
        int v54 = v53 + v52;
        if (v53 + v52 >= 0 && *(_DWORD *)(v51 + 12) >= v54) {
          goto LABEL_95;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v54, a4))
        {
          int v53 = *(_DWORD *)(v51 + 8);
          int v54 = v53 + v52;
LABEL_95:
          uint64_t v32 = (void *)(*(void *)(v51 + 24) + 8 * v53);
          *(_DWORD *)(v51 + 8) = v54;
        }
        else
        {
          uint64_t v32 = 0;
        }
        if (*(int *)a4 <= 0)
        {
          uint64_t v90 = 0;
          uint64_t v91 = *((int *)this + 14);
          UChar32 v92 = &v32[-v91];
          uint64_t v93 = -8 * v91;
          do
          {
            v32[v90] = v92[v90];
            ++v90;
          }
          while (v93 + v90 * 8);
          int v94 = *((_DWORD *)this + 68);
          BOOL v65 = __OFSUB__(v94--, 1);
          *((_DWORD *)this + 68) = v94;
          if ((v94 < 0) ^ v65 | (v94 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v92[1] = v135;
LABEL_220:
          uint64_t v16 = (uint64_t)v32;
          goto LABEL_597;
        }
LABEL_602:
        UErrorCode v138 = U_REGEX_STACK_OVERFLOW;
LABEL_603:
        *a4 = v138;
LABEL_598:
        *((unsigned char *)this + 130) = 0;
LABEL_599:
        *((void *)this + 23) = v16;
        return;
      case 0x34:
        if (v136)
        {
          int v27 = *((_DWORD *)this + 30);
          *((unsigned char *)this + 168) = 1;
          goto LABEL_97;
        }
        uint64_t v315 = *(void *)v16;
        uint64_t v316 = *((void *)this + 15);
        if (v316 <= (int)*(void *)v16) {
          goto LABEL_96;
        }
        uint64_t v317 = (int)v315;
        while (1)
        {
          int v318 = v315;
          LODWORD(v315) = v315 + 1;
          int v319 = *(unsigned __int16 *)(v13 + 2 * v317);
          if ((v319 & 0xFC00) == 0xD800 && v316 != (int)v315)
          {
            int v320 = *(unsigned __int16 *)(v13 + 2 * (int)v315);
            BOOL v321 = (v320 & 0xFC00) == 56320;
            int v322 = (v319 << 10) - 56613888 + v320;
            LODWORD(v315) = (v320 & 0xFC00) == 0xDC00 ? v318 + 2 : v318 + 1;
            if (v321) {
              int v319 = v322;
            }
          }
          if ((v319 & 0x7Eu) <= 0x29)
          {
            if (v319 == 10) {
              break;
            }
            if (!(v319 & 0xFFFFDF50 | v136 & 2))
            {
              BOOL v323 = (v319 - 10) >= 4 && (v319 - 8232) >= 2;
              if (!v323 || v319 == 133) {
                break;
              }
            }
          }
          uint64_t v317 = (int)v315;
          if (v316 <= (int)v315)
          {
LABEL_96:
            *((unsigned char *)this + 168) = 1;
            int v27 = v315;
            goto LABEL_97;
          }
        }
        int v27 = v315 - 1;
        if ((*(_WORD *)(v13 + 2 * ((int)v315 - 1)) & 0xFC00) == 0xDC00 && (int)v315 >= 2)
        {
          unsigned int v74 = v315 - 2;
          if ((*(_WORD *)(v13 + 2 * v74) & 0xFC00) == 0xD800) {
            int v27 = v74;
          }
        }
LABEL_97:
        if (*(void *)v16 == v27)
        {
          uint64_t v26 = v135 + 2;
          goto LABEL_155;
        }
        *(void *)(v16 + 8 * (*(void *)(v11 + 8 * v137) & 0xFFFFFFLL) + 16) = *(void *)v16;
        *(void *)uint64_t v16 = v27;
        if (*(int *)a4 > 0) {
          goto LABEL_217;
        }
        uint64_t v55 = *((void *)this + 22);
        int v56 = *((_DWORD *)this + 14);
        int v57 = *(_DWORD *)(v55 + 8);
        int v58 = v57 + v56;
        if (v57 + v56 >= 0 && *(_DWORD *)(v55 + 12) >= v58) {
          goto LABEL_104;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v58, a4))
        {
          int v57 = *(_DWORD *)(v55 + 8);
          int v58 = v57 + v56;
LABEL_104:
          uint64_t v32 = (void *)(*(void *)(v55 + 24) + 8 * v57);
          *(_DWORD *)(v55 + 8) = v58;
        }
        else
        {
          uint64_t v32 = 0;
        }
        if (*(int *)a4 >= 1) {
          goto LABEL_216;
        }
        uint64_t v106 = 0;
        uint64_t v107 = *((int *)this + 14);
        uint64_t v108 = &v32[-v107];
        uint64_t v109 = -8 * v107;
        do
        {
          v32[v106] = v108[v106];
          ++v106;
        }
        while (v109 + v106 * 8);
        int v110 = *((_DWORD *)this + 68);
        BOOL v65 = __OFSUB__(v110--, 1);
        *((_DWORD *)this + 68) = v110;
        if ((v110 < 0) ^ v65 | (v110 == 0)) {
          icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
        }
        v108[1] = v137;
        goto LABEL_218;
      case 0x35:
        int isChunkWordBoundary = icu::RegexMatcher::isUWordBoundary(this, *(void *)v16, a4);
LABEL_539:
        if (isChunkWordBoundary != (v139 != 0)) {
          goto LABEL_597;
        }
        goto LABEL_596;
      case 0x36:
        uint64_t v324 = *((void *)this + 11) - 1;
        if (*(void *)v16 < v324) {
          goto LABEL_596;
        }
        if (*(void *)v16 != v324) {
          goto LABEL_268;
        }
        int v89 = *(unsigned __int16 *)(v13 + 2 * *(void *)v16);
        goto LABEL_544;
      case 0x37:
        if (*(void *)v16 >= *((void *)this + 11)) {
          goto LABEL_268;
        }
        int v234 = *(unsigned __int16 *)(v13 + 2 * *(void *)v16);
LABEL_548:
        if (v234 == 10) {
          goto LABEL_597;
        }
        goto LABEL_596;
      case 0x38:
        uint64_t v325 = *(void *)v16;
        uint64_t v326 = *((void *)this + 15);
        if (*(void *)v16 >= v326) {
          goto LABEL_595;
        }
        uint64_t v327 = v325 + 1;
        *(void *)uint64_t v16 = v325 + 1;
        UChar32 v328 = *(unsigned __int16 *)(v13 + 2 * v325);
        if ((v328 & 0xFC00) == 0xD800 && v327 != v326)
        {
          int v330 = *(unsigned __int16 *)(v13 + 2 * v327);
          if ((v330 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v325 + 2;
            UChar32 v328 = (v328 << 10) - 56613888 + v330;
          }
        }
        int v331 = u_charType(v328);
        BOOL v204 = v328 == 9 || v331 == 12;
LABEL_560:
        int v332 = v204;
        if (((v139 != 0) ^ v332)) {
          goto LABEL_597;
        }
        goto LABEL_596;
      case 0x39:
        uint64_t v333 = *(void *)v16;
        uint64_t v334 = *((void *)this + 15);
        if (*(void *)v16 >= v334) {
          goto LABEL_595;
        }
        uint64_t v335 = v333 + 1;
        *(void *)uint64_t v16 = v333 + 1;
        int v336 = *(unsigned __int16 *)(v13 + 2 * v333);
        if ((v336 & 0xFC00) == 0xD800 && v335 != v334)
        {
          int v338 = *(unsigned __int16 *)(v13 + 2 * v335);
          if ((v338 & 0xFC00) == 0xDC00)
          {
            uint64_t v335 = v333 + 2;
            *(void *)uint64_t v16 = v333 + 2;
            int v336 = (v336 << 10) - 56613888 + v338;
          }
        }
        if ((v336 & 0xFFFFDF50) != 0) {
          goto LABEL_596;
        }
        if (v336 <= 132)
        {
          if ((v336 - 10) < 3) {
            goto LABEL_597;
          }
          if (v336 != 13) {
            goto LABEL_596;
          }
          if (v335 >= v334) {
            goto LABEL_597;
          }
          uint64_t v339 = v335 + 1;
          *(void *)uint64_t v16 = v335 + 1;
          unsigned int v340 = *(unsigned __int16 *)(v13 + 2 * v335);
          if (v340 >> 10 == 54)
          {
            if (v339 != v334)
            {
              unsigned int v341 = *(unsigned __int16 *)(v13 + 2 * v339);
              uint64_t v334 = v335 + 1;
              if (v341 >> 10 == 55)
              {
                uint64_t v339 = v335 + 2;
                *(void *)uint64_t v16 = v335 + 2;
                LOWORD(v340) = v341 + ((_WORD)v340 << 10) + 9216;
                goto LABEL_581;
              }
            }
          }
          else
          {
LABEL_581:
            uint64_t v334 = v339;
            if ((unsigned __int16)v340 == 10) {
              goto LABEL_597;
            }
          }
          uint64_t v342 = v334 - 1;
          *(void *)uint64_t v16 = v334 - 1;
          BOOL v43 = v334 < 2;
          uint64_t v38 = v334 - 2;
          if (!v43 && (*(_WORD *)(v13 + 2 * v342) & 0xFC00) == 0xDC00 && (*(_WORD *)(v13 + 2 * v38) & 0xFC00) == 0xD800) {
            goto LABEL_67;
          }
          goto LABEL_597;
        }
        if ((v336 - 8232) < 2 || v336 == 133) {
          goto LABEL_597;
        }
LABEL_596:
        uint64_t v349 = *((void *)this + 22);
        uint64_t v350 = *((int *)this + 14);
        unsigned int v351 = (*(_DWORD *)(v349 + 8) - v350) & ~((*(_DWORD *)(v349 + 8) - (int)v350) >> 31);
        *(_DWORD *)(v349 + 8) = v351;
        uint64_t v16 = *(void *)(v349 + 24) + 8 * v351 - 8 * v350;
LABEL_597:
        if (*(int *)a4 >= 1) {
          goto LABEL_598;
        }
        break;
      case 0x3A:
        uint64_t v343 = *(void *)v16;
        uint64_t v344 = *((void *)this + 15);
        if (*(void *)v16 >= v344) {
          goto LABEL_595;
        }
        uint64_t v345 = v343 + 1;
        *(void *)uint64_t v16 = v343 + 1;
        int v346 = *(unsigned __int16 *)(v13 + 2 * v343);
        if ((v346 & 0xFC00) == 0xD800 && v345 != v344)
        {
          int v348 = *(unsigned __int16 *)(v13 + 2 * v345);
          if ((v348 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v343 + 2;
            int v346 = (v346 << 10) - 56613888 + v348;
          }
        }
        if ((v346 & 0xFFFFDF50) != 0
          || ((int v71 = 1, (v346 - 10) >= 4) ? (v72 = (v346 - 8232) >= 2) : (v72 = 0),
              v72 && v346 != 133))
        {
          int v71 = 0;
        }
        if (v71 != (v139 != 0)) {
          goto LABEL_597;
        }
        goto LABEL_596;
      default:
        goto LABEL_603;
    }
  }
}

uint64_t icu::RegexMatcher::group@<X0>(UText **this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  return icu::RegexMatcher::group(this, a2, 0, a3);
}

uint64_t icu::RegexMatcher::group@<X0>(UText **this@<X0>, UErrorCode *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)(a4 + 56) = 0;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(void *)a4 = &unk_1EDA47700;
  *(_WORD *)(a4 + 8) = 2;
  int64_t v8 = icu::RegexMatcher::start64((icu::RegexMatcher *)this, a3, a2);
  uint64_t result = icu::RegexMatcher::end64((icu::RegexMatcher *)this, a3, a2);
  if (*(int *)a2 <= 0 && v8 != -1 && v8 != result)
  {
    int64_t v12 = result;
    uint64_t result = utext_extract(this[4], v8, result, 0, 0, a2);
    if (*a2 == U_BUFFER_OVERFLOW_ERROR)
    {
      int32_t v13 = result;
      *a2 = U_ZERO_ERROR;
      uint64_t result = icu::UnicodeString::getBuffer((icu::UnicodeString *)a4, result);
      if (result)
      {
        int32_t v14 = utext_extract(this[4], v8, v12, (UChar *)result, v13, a2);
        return icu::UnicodeString::releaseBuffer(a4, v14);
      }
      else
      {
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return result;
}

UText *icu::RegexMatcher::group(icu::RegexMatcher *this, UText *dest, uint64_t *a3, UErrorCode *a4)
{
  return icu::RegexMatcher::group(this, 0, dest, a3, a4);
}

UText *icu::RegexMatcher::group(icu::RegexMatcher *this, int a2, UText *dest, uint64_t *a4, UErrorCode *a5)
{
  int v5 = dest;
  *a4 = 0;
  if (*(int *)a5 > 0) {
    return v5;
  }
  UErrorCode v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_8:
    *a5 = v6;
    return v5;
  }
  if (!*((unsigned char *)this + 130))
  {
    UErrorCode v6 = U_REGEX_INVALID_STATE;
    goto LABEL_8;
  }
  if (a2 < 0 || (v7 = *(void *)(*((void *)this + 1) + 136), int v8 = *(_DWORD *)(v7 + 8), v8 < a2))
  {
    UErrorCode v6 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_8;
  }
  if (a2)
  {
    if (v8 < 1 || v8 < a2) {
      int v13 = 0;
    }
    else {
      int v13 = *(_DWORD *)(*(void *)(v7 + 24) + 4 * (a2 - 1));
    }
    uint64_t v14 = *((void *)this + 23) + 8 * v13;
    uint64_t v11 = (int64_t *)(v14 + 16);
    int64_t v12 = (void *)(v14 + 24);
  }
  else
  {
    uint64_t v11 = (int64_t *)((char *)this + 136);
    int64_t v12 = (void *)((char *)this + 144);
  }
  int64_t v15 = *v11;
  if ((*v11 & 0x8000000000000000) == 0)
  {
    *a4 = *v12 - v15;
    uint64_t v16 = utext_clone(dest, *((const UText **)this + 4), 0, 1, a5);
    int v5 = v16;
    if (v16)
    {
      uint64_t v17 = v15 - v16->chunkNativeStart;
      if (v17 < 0 || v17 >= v16->nativeIndexingLimit || v16->chunkContents[v17] >> 10 > 0x36u) {
        utext_setNativeIndex(v16, v15);
      }
      else {
        v16->uint64_t chunkOffset = v17;
      }
    }
    return v5;
  }
  uint64_t v18 = (const UText *)*((void *)this + 4);

  return utext_clone(dest, v18, 0, 1, a5);
}

uint64_t icu::RegexMatcher::start64(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return -1;
  }
  UErrorCode v3 = *((_DWORD *)this + 79);
  if (v3 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_8:
    *a3 = v3;
    return -1;
  }
  if (!*((unsigned char *)this + 130))
  {
    UErrorCode v3 = U_REGEX_INVALID_STATE;
    goto LABEL_8;
  }
  if (a2 < 0 || (uint64_t v4 = *(void *)(*((void *)this + 1) + 136), v5 = *(_DWORD *)(v4 + 8), v5 < a2))
  {
    UErrorCode v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_8;
  }
  if (a2)
  {
    if (v5 < 1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *(int *)(*(void *)(v4 + 24) + 4 * (a2 - 1));
    }
    int v8 = (char *)(*((void *)this + 23) + 8 * v7 + 16);
  }
  else
  {
    int v8 = (char *)this + 136;
  }
  return *(void *)v8;
}

uint64_t icu::RegexMatcher::groupCount(icu::RegexMatcher *this)
{
  return *(unsigned int *)(*(void *)(*((void *)this + 1) + 136) + 8);
}

uint64_t icu::RegexMatcher::hasAnchoringBounds(icu::RegexMatcher *this)
{
  return *((char *)this + 129);
}

uint64_t icu::RegexMatcher::hasTransparentBounds(icu::RegexMatcher *this)
{
  return *((char *)this + 128);
}

uint64_t icu::RegexMatcher::hitEnd(icu::RegexMatcher *this)
{
  return *((char *)this + 168);
}

icu::UnicodeString *icu::RegexMatcher::input(icu::RegexMatcher *this, unint64_t a2)
{
  unsigned int v2 = (icu::UnicodeString *)*((void *)this + 3);
  if (!v2)
  {
    UErrorCode status = U_ZERO_ERROR;
    uint64_t v4 = (UText *)*((void *)this + 4);
    mapNativeIndexToUTF16 = (uint64_t *)v4->pFuncs->mapNativeIndexToUTF16;
    uint64_t v6 = *((void *)this + 6);
    if (mapNativeIndexToUTF16)
    {
      LODWORD(v6) = utext_extract(v4, 0, *((void *)this + 6), 0, 0, &status);
      UErrorCode status = U_ZERO_ERROR;
    }
    uint64_t v7 = (icu::UnicodeString *)icu::UMemory::operator new(mapNativeIndexToUTF16, (icu::UMemory *)0x40, a2);
    unsigned int v2 = v7;
    if (v7) {
      icu::UnicodeString::UnicodeString(v7, v6, 0, 0);
    }
    uint64_t Buffer = (UChar *)icu::UnicodeString::getBuffer(v2, v6);
    utext_extract(*((UText **)this + 4), 0, *((void *)this + 6), Buffer, v6, &status);
    icu::UnicodeString::releaseBuffer((uint64_t)v2, v6);
    *((void *)this + 3) = v2;
  }
  return v2;
}

uint64_t icu::RegexMatcher::inputText(icu::RegexMatcher *this)
{
  return *((void *)this + 4);
}

UText *icu::RegexMatcher::getInput(icu::RegexMatcher *this, UText *ut, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return ut;
  }
  UErrorCode v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *UErrorCode status = v6;
    return ut;
  }
  int v8 = (UText *)*((void *)this + 4);
  if (ut)
  {
    if (!v8->chunkNativeStart
      && (uint64_t v9 = *((void *)this + 6), v9 == v8->chunkNativeLimit)
      && v9 == v8->nativeIndexingLimit)
    {
      int64_t v10 = utext_nativeLength(ut);
      utext_replace(ut, 0, v10, *(const UChar **)(*((void *)this + 4) + 48), *((_DWORD *)this + 12), status);
    }
    else
    {
      if (v8->pFuncs->mapNativeIndexToUTF16)
      {
        UErrorCode statusa = U_ZERO_ERROR;
        int32_t v11 = utext_extract(v8, 0, *((void *)this + 6), 0, 0, &statusa);
      }
      else
      {
        int32_t v11 = *((_DWORD *)this + 12);
      }
      int64_t v12 = (UChar *)uprv_malloc(2 * v11);
      if (v12)
      {
        int v13 = v12;
        *UErrorCode status = U_ZERO_ERROR;
        utext_extract(*((UText **)this + 4), 0, *((void *)this + 6), v12, v11, status);
        *UErrorCode status = U_ZERO_ERROR;
        int64_t v14 = utext_nativeLength(ut);
        utext_replace(ut, 0, v14, v13, v11, status);
        uprv_free(v13);
      }
    }
    return ut;
  }

  return utext_clone(0, v8, 0, 1, status);
}

uint64_t icu::RegexMatcher::lookingAt(icu::RegexMatcher *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  UErrorCode v5 = *((_DWORD *)this + 79);
  if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    char v2 = 0;
    *a2 = v5;
    return v2;
  }
  if (*((unsigned char *)this + 312))
  {
    if (!sub_18C9C807C(*((UText **)this + 4))) {
      goto LABEL_9;
    }
    int64_t v6 = utext_nativeLength(*((UText **)this + 4));
    *((void *)this + 6) = v6;
    *((void *)this + 8) = 0;
    *((void *)this + 9) = v6;
    *((void *)this + 14) = 0;
    *((void *)this + 15) = v6;
    *((void *)this + 10) = 0;
    *((void *)this + 11) = v6;
    *((void *)this + 12) = 0;
    *((void *)this + 13) = v6;
  }
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
  *((unsigned char *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000;
LABEL_9:
  uint64_t v7 = *((void *)this + 4);
  if (!*(void *)(v7 + 32) && (uint64_t v8 = *((void *)this + 6), v8 == *(void *)(v7 + 16)) && v8 == *(_DWORD *)(v7 + 28)) {
    icu::RegexMatcher::MatchChunkAt(this, *((_DWORD *)this + 28), 0, a2);
  }
  else {
    icu::RegexMatcher::MatchAt(this, *((void *)this + 14), 0, a2);
  }
  return (char)*((unsigned char *)this + 130);
}

uint64_t sub_18C9C807C(UText *a1)
{
  if (utext_nativeLength(a1) == a1->nativeIndexingLimit) {
    return 0;
  }
  context = (unsigned __int16 *)a1->context;
  unsigned int v4 = context[4];
  if ((__int16)context[4] < 0) {
    int32_t v5 = *((_DWORD *)context + 3);
  }
  else {
    int32_t v5 = v4 >> 5;
  }
  if ((v4 & 0x11) != 0)
  {
    int64_t v6 = 0;
  }
  else if ((v4 & 2) != 0)
  {
    int64_t v6 = context + 5;
  }
  else
  {
    int64_t v6 = (const UChar *)*((void *)context + 3);
  }
  a1->chunkContents = v6;
  a1->chunkLength = v5;
  a1->chunkNativeLimit = v5;
  a1->int nativeIndexingLimit = v5;
  return 1;
}

double icu::RegexMatcher::resetPreserveRegion(icu::RegexMatcher *this)
{
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  double result = NAN;
  *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
  *((unsigned char *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000;
  return result;
}

uint64_t icu::RegexMatcher::lookingAt(icu::RegexMatcher *this, int64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  UErrorCode v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    char v3 = 0;
LABEL_14:
    *a3 = v6;
    return v3;
  }
  *((void *)this + 17) = 0;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = v8;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = v8;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = v8;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = v8;
  *((void *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
  *((unsigned char *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000;
  if (a2 < 0) {
    goto LABEL_13;
  }
  if (*((unsigned char *)this + 312))
  {
    if (sub_18C9C807C(*((UText **)this + 4)))
    {
      int64_t v9 = utext_nativeLength(*((UText **)this + 4));
      int64_t v10 = 0;
      *((void *)this + 6) = v9;
      *((void *)this + 8) = 0;
      *((void *)this + 9) = v9;
      *((void *)this + 14) = 0;
      *((void *)this + 15) = v9;
      *((void *)this + 10) = 0;
      *((void *)this + 11) = v9;
      *((void *)this + 12) = 0;
      *((void *)this + 13) = v9;
      *((void *)this + 17) = 0;
      *((void *)this + 18) = 0;
      *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
      *((unsigned char *)this + 130) = 0;
      *((_WORD *)this + 84) = 0;
      *(void *)((char *)this + 268) = 0x271000000000;
    }
    else
    {
      int64_t v10 = *((void *)this + 14);
    }
  }
  else
  {
    int64_t v10 = 0;
  }
  if (v10 > a2 || *((void *)this + 15) < a2)
  {
LABEL_13:
    char v3 = 0;
    UErrorCode v6 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_14;
  }
  uint64_t v12 = *((void *)this + 4);
  if (!*(void *)(v12 + 32)
    && (uint64_t v13 = *((void *)this + 6), v13 == *(void *)(v12 + 16))
    && v13 == *(_DWORD *)(v12 + 28))
  {
    icu::RegexMatcher::MatchChunkAt(this, a2, 0, a3);
  }
  else
  {
    icu::RegexMatcher::MatchAt(this, a2, 0, a3);
  }
  return (char)*((unsigned char *)this + 130);
}

uint64_t icu::RegexMatcher::matches(icu::RegexMatcher *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  UErrorCode v5 = *((_DWORD *)this + 79);
  if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    char v2 = 0;
    *a2 = v5;
    return v2;
  }
  if (*((unsigned char *)this + 312))
  {
    if (!sub_18C9C807C(*((UText **)this + 4))) {
      goto LABEL_9;
    }
    int64_t v6 = utext_nativeLength(*((UText **)this + 4));
    *((void *)this + 6) = v6;
    *((void *)this + 8) = 0;
    *((void *)this + 9) = v6;
    *((void *)this + 14) = 0;
    *((void *)this + 15) = v6;
    *((void *)this + 10) = 0;
    *((void *)this + 11) = v6;
    *((void *)this + 12) = 0;
    *((void *)this + 13) = v6;
  }
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
  *((unsigned char *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000;
LABEL_9:
  uint64_t v7 = *((void *)this + 4);
  if (!*(void *)(v7 + 32) && (uint64_t v8 = *((void *)this + 6), v8 == *(void *)(v7 + 16)) && v8 == *(_DWORD *)(v7 + 28)) {
    icu::RegexMatcher::MatchChunkAt(this, *((_DWORD *)this + 28), 1, a2);
  }
  else {
    icu::RegexMatcher::MatchAt(this, *((void *)this + 14), 1, a2);
  }
  return (char)*((unsigned char *)this + 130);
}

uint64_t icu::RegexMatcher::matches(icu::RegexMatcher *this, int64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  UErrorCode v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    char v3 = 0;
LABEL_14:
    *a3 = v6;
    return v3;
  }
  *((void *)this + 17) = 0;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = v8;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = v8;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = v8;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = v8;
  *((void *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
  *((unsigned char *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000;
  if (a2 < 0) {
    goto LABEL_13;
  }
  if (*((unsigned char *)this + 312))
  {
    if (sub_18C9C807C(*((UText **)this + 4)))
    {
      int64_t v9 = utext_nativeLength(*((UText **)this + 4));
      int64_t v10 = 0;
      *((void *)this + 6) = v9;
      *((void *)this + 8) = 0;
      *((void *)this + 9) = v9;
      *((void *)this + 14) = 0;
      *((void *)this + 15) = v9;
      *((void *)this + 10) = 0;
      *((void *)this + 11) = v9;
      *((void *)this + 12) = 0;
      *((void *)this + 13) = v9;
      *((void *)this + 17) = 0;
      *((void *)this + 18) = 0;
      *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
      *((unsigned char *)this + 130) = 0;
      *((_WORD *)this + 84) = 0;
      *(void *)((char *)this + 268) = 0x271000000000;
    }
    else
    {
      int64_t v10 = *((void *)this + 14);
    }
  }
  else
  {
    int64_t v10 = 0;
  }
  if (v10 > a2 || *((void *)this + 15) < a2)
  {
LABEL_13:
    char v3 = 0;
    UErrorCode v6 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_14;
  }
  uint64_t v12 = *((void *)this + 4);
  if (!*(void *)(v12 + 32)
    && (uint64_t v13 = *((void *)this + 6), v13 == *(void *)(v12 + 16))
    && v13 == *(_DWORD *)(v12 + 28))
  {
    icu::RegexMatcher::MatchChunkAt(this, a2, 1, a3);
  }
  else
  {
    icu::RegexMatcher::MatchAt(this, a2, 1, a3);
  }
  return (char)*((unsigned char *)this + 130);
}

uint64_t icu::RegexMatcher::pattern(icu::RegexMatcher *this)
{
  return *((void *)this + 1);
}

uint64_t icu::RegexMatcher::region(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (a2 > a3 || (a3 | a2) < 0) {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    uint64_t v5 = *(void *)(this + 48);
    if (v5 < a2 || v5 < a3) {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    if (a4 == -1)
    {
      *(void *)(this + 80) = 0;
      *(void *)(this + 88) = v5;
      *(void *)(this + 96) = 0;
      *(void *)(this + 104) = v5;
      *(void *)(this + 136) = 0;
      *(void *)(this + 144) = 0;
      *(_OWORD *)(this + 152) = xmmword_18CA96A50;
      *(unsigned char *)(this + 130) = 0;
      *(_WORD *)(this + 168) = 0;
      *(void *)(this + 268) = 0x271000000000;
      *(void *)(this + 64) = a2;
      *(void *)(this + 72) = a3;
      *(void *)(this + 112) = a2;
      *(void *)(this + 120) = a3;
    }
    else
    {
      *(void *)(this + 136) = 0;
      *(_OWORD *)(this + 152) = xmmword_18CA96A50;
      *(unsigned char *)(this + 130) = 0;
      *(_WORD *)(this + 168) = 0;
      *(void *)(this + 268) = 0x271000000000;
      *(void *)(this + 64) = a2;
      *(void *)(this + 72) = a3;
      *(void *)(this + 112) = a2;
      *(void *)(this + 120) = a3;
      if (a2 > a4 || a4 > a3) {
        *a5 = U_INDEX_OUTOFBOUNDS_ERROR;
      }
      *(void *)(this + 144) = a4;
    }
    if (!*(unsigned char *)(this + 128))
    {
      *(void *)(this + 96) = a2;
      *(void *)(this + 104) = a3;
    }
    if (*(unsigned char *)(this + 129))
    {
      *(void *)(this + 80) = a2;
      *(void *)(this + 88) = a3;
    }
  }
  return this;
}

uint64_t icu::RegexMatcher::region(icu::RegexMatcher *this, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  return icu::RegexMatcher::region((uint64_t)this, a2, a3, -1, a4);
}

uint64_t icu::RegexMatcher::regionEnd(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t icu::RegexMatcher::regionEnd64(icu::RegexMatcher *this)
{
  return *((void *)this + 9);
}

uint64_t icu::RegexMatcher::regionStart(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t icu::RegexMatcher::regionStart64(icu::RegexMatcher *this)
{
  return *((void *)this + 8);
}

UText *icu::RegexMatcher::replaceAll@<X0>(UText *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  memset(&ut, 0, sizeof(ut));
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  memset(&v7, 0, sizeof(v7));
  v7.magic = 878368812;
  v7.sizeOfStruct = 144;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(void *)(a4 + 56) = 0;
  *(void *)a4 = &unk_1EDA47700;
  *(_WORD *)(a4 + 8) = 2;
  if (*(int *)a3 <= 0)
  {
    UErrorCode v6 = (icu::RegexMatcher *)this;
    utext_openConstUnicodeString(&ut, (uint64_t)a2, a3);
    utext_openUnicodeString(&v7, a4, a3);
    icu::RegexMatcher::replaceAll(v6, &ut, &v7, a3);
    utext_close(&v7);
    return utext_close(&ut);
  }
  return this;
}

UText *icu::RegexMatcher::replaceAll(icu::RegexMatcher *this, UText *a2, UText *ut, UErrorCode *status)
{
  unsigned int v4 = ut;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(int *)status <= 0)
  {
    UErrorCode v7 = *((_DWORD *)this + 79);
    if (v7 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      if (ut) {
        goto LABEL_5;
      }
      long long v14 = 0u;
      uint64_t v17 = 0;
      long long v16 = 0u;
      long long v15 = 0u;
      uint64_t v13 = &unk_1EDA47700;
      LOWORD(v14) = 2;
      memset(&v12, 0, sizeof(v12));
      v12.magic = 878368812;
      v12.sizeOfStruct = 144;
      utext_openUnicodeString(&v12, (uint64_t)&v13, status);
      unsigned int v4 = utext_clone(0, &v12, 1, 0, status);
      utext_close(&v12);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v13);
      if (*(int *)status <= 0)
      {
LABEL_5:
        uint64_t v9 = *((void *)this + 6);
        *((void *)this + 8) = 0;
        *((void *)this + 9) = v9;
        *((void *)this + 14) = 0;
        *((void *)this + 15) = v9;
        *((void *)this + 10) = 0;
        *((void *)this + 11) = v9;
        *((void *)this + 12) = 0;
        *((void *)this + 13) = v9;
        *((void *)this + 17) = 0;
        *((void *)this + 18) = 0;
        *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
        *((unsigned char *)this + 130) = 0;
        *((_WORD *)this + 84) = 0;
        *(void *)((char *)this + 268) = 0x271000000000;
        do
        {
          if (*((int *)this + 79) > 0) {
            break;
          }
          v12.magic = 0;
          if (!icu::RegexMatcher::find(this, (UErrorCode *)&v12)) {
            break;
          }
          icu::RegexMatcher::appendReplacement(this, v4, a2, status);
        }
        while (*(int *)status < 1);
        icu::RegexMatcher::appendTail(this, v4, status);
      }
    }
    else
    {
      *UErrorCode status = v7;
    }
  }
  return v4;
}

UText *icu::RegexMatcher::replaceFirst@<X0>(icu::RegexMatcher *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  memset(&ut, 0, sizeof(ut));
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  memset(&v8, 0, sizeof(v8));
  v8.magic = 878368812;
  v8.sizeOfStruct = 144;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(void *)(a4 + 56) = 0;
  *(void *)a4 = &unk_1EDA47700;
  *(_WORD *)(a4 + 8) = 2;
  utext_openConstUnicodeString(&ut, (uint64_t)a2, a3);
  utext_openUnicodeString(&v8, a4, a3);
  icu::RegexMatcher::replaceFirst(this, &ut, &v8, a3);
  utext_close(&v8);
  return utext_close(&ut);
}

UText *icu::RegexMatcher::replaceFirst(icu::RegexMatcher *this, UText *a2, UText *a3, UErrorCode *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    UErrorCode v7 = *((_DWORD *)this + 79);
    if (v7 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      uint64_t v9 = *((void *)this + 6);
      *((void *)this + 8) = 0;
      *((void *)this + 9) = v9;
      *((void *)this + 14) = 0;
      *((void *)this + 15) = v9;
      *((void *)this + 10) = 0;
      *((void *)this + 11) = v9;
      *((void *)this + 12) = 0;
      *((void *)this + 13) = v9;
      *((void *)this + 17) = 0;
      *((void *)this + 18) = 0;
      *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
      *((unsigned char *)this + 130) = 0;
      *((_WORD *)this + 84) = 0;
      *(void *)((char *)this + 268) = 0x271000000000;
      v13.magic = 0;
      if (icu::RegexMatcher::find(this, (UErrorCode *)&v13))
      {
        if (!a3)
        {
          long long v15 = 0u;
          uint64_t v18 = 0;
          long long v17 = 0u;
          long long v16 = 0u;
          long long v14 = &unk_1EDA47700;
          LOWORD(v15) = 2;
          memset(&v13, 0, sizeof(v13));
          v13.magic = 878368812;
          v13.sizeOfStruct = 144;
          utext_openUnicodeString(&v13, (uint64_t)&v14, a4);
          a3 = utext_clone(0, &v13, 1, 0, a4);
          utext_close(&v13);
          icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v14);
        }
        appended = icu::RegexMatcher::appendReplacement(this, a3, a2, a4);
        icu::RegexMatcher::appendTail(appended, a3, a4);
      }
      else
      {
        return icu::RegexMatcher::getInput(this, a3, a4);
      }
    }
    else
    {
      *a4 = v7;
    }
  }
  return a3;
}

uint64_t icu::RegexMatcher::requireEnd(icu::RegexMatcher *this)
{
  return *((char *)this + 169);
}

icu::RegexMatcher *icu::RegexMatcher::reset(icu::RegexMatcher *this, const icu::UnicodeString *a2)
{
  char v3 = (int *)((char *)this + 316);
  unsigned int v4 = utext_openConstUnicodeString(*((UText **)this + 4), (uint64_t)a2, (UErrorCode *)this + 79);
  *((void *)this + 4) = v4;
  if (*(unsigned char *)(*((void *)this + 1) + 184)) {
    *((void *)this + 5) = utext_clone(*((UText **)this + 5), v4, 0, 1, (UErrorCode *)this + 79);
  }
  if (*v3 <= 0)
  {
    int64_t v5 = utext_nativeLength(*((UText **)this + 4));
    *((void *)this + 6) = v5;
    *((void *)this + 8) = 0;
    *((void *)this + 9) = v5;
    *((void *)this + 14) = 0;
    *((void *)this + 15) = v5;
    *((void *)this + 10) = 0;
    *((void *)this + 11) = v5;
    *((void *)this + 12) = 0;
    *((void *)this + 13) = v5;
    *((void *)this + 17) = 0;
    *((void *)this + 18) = 0;
    *(_OWORD *)((char *)this + 152) = xmmword_18CA96A50;
    *((unsigned char *)this + 130) = 0;
    *((_WORD *)this + 84) = 0;
    *(void *)((char *)this + 268) = 0x271000000000;
    uint64_t v6 = *((void *)this + 3);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *((void *)this + 3) = 0;
    *((unsigned char *)this + 312) = 1;
    uint64_t v7 = *((void *)this + 40);
    if (v7) {
      (*(void (**)(uint64_t, void, char *))(*(void *)v7 + 64))(v7, *((void *)this + 4), (char *)this + 316);
    }
    uint64_t v8 = *((void *)this + 41);
    if (v8) {
      (*(void (**)(uint64_t, void, char *))(*(void *)v8 + 64))(v8, *((void *)this + 4), (char *)this + 316);
    }
  }
  return this;
}

uint64_t icu::RegexMatcher::reset(uint64_t this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v3 = *(void *)(this + 48);
    *(void *)(this + 64) = 0;
    *(void *)(this + 72) = v3;
    *(void *)(this + 112) = 0;
    *(void *)(this + 120) = v3;
    *(void *)(this + 80) = 0;
    *(void *)(this + 88) = v3;
    *(void *)(this + 96) = 0;
    *(void *)(this + 104) = v3;
    *(void *)(this + 136) = 0;
    *(void *)(this + 144) = 0;
    *(_OWORD *)(this + 152) = xmmword_18CA96A50;
    *(unsigned char *)(this + 130) = 0;
    *(_WORD *)(this + 168) = 0;
    *(void *)(this + 268) = 0x271000000000;
    if (a2 < 0 || v3 < a2) {
      *a3 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
    else {
      *(void *)(this + 144) = a2;
    }
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::refreshInputText(const UText **this, UText *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (a2 && (int64_t v6 = utext_nativeLength((UText *)this[4]), v6 == utext_nativeLength(a2)))
    {
      int64_t NativeIndex = utext_getNativeIndex(this[4]);
      uint64_t v8 = utext_clone((UText *)this[4], a2, 0, 1, a3);
      this[4] = v8;
      if (*(int *)a3 <= 0)
      {
        utext_setNativeIndex(v8, NativeIndex);
        uint64_t v9 = this[5];
        if (v9)
        {
          int64_t v10 = utext_getNativeIndex(v9);
          int32_t v11 = utext_clone((UText *)this[5], a2, 0, 1, a3);
          this[5] = v11;
          if (*(int *)a3 <= 0) {
            utext_setNativeIndex(v11, v10);
          }
        }
      }
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return (icu::RegexMatcher *)this;
}

uint64_t icu::RegexMatcher::setTrace(uint64_t this, char a2)
{
  *(unsigned char *)(this + 313) = a2;
  return this;
}

uint64_t icu::RegexMatcher::split(int64_t *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, int a4, UErrorCode *status)
{
  memset(&v17, 0, sizeof(v17));
  v17.magic = 878368812;
  v17.sizeOfStruct = 144;
  utext_openConstUnicodeString(&v17, (uint64_t)a2, status);
  if (*(int *)status > 0) {
    return 0;
  }
  int64_t v10 = (UText **)uprv_malloc(8 * a4);
  if (v10)
  {
    int32_t v11 = v10;
    if (a4 <= 0)
    {
      uint64_t v9 = icu::RegexMatcher::split(this, &v17, v10, a4, status);
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = a4;
      do
      {
        v11[v12++] = utext_openUnicodeString(0, (uint64_t)a3, status);
        a3 = (icu::UnicodeString *)((char *)a3 + 64);
      }
      while (a4 != v12);
      uint64_t v9 = icu::RegexMatcher::split(this, &v17, v11, a4, status);
      long long v14 = v11;
      do
      {
        long long v15 = *v14++;
        utext_close(v15);
        --v13;
      }
      while (v13);
    }
    uprv_free(v11);
    utext_close(&v17);
  }
  else
  {
    uint64_t v9 = 0;
    *UErrorCode status = U_MEMORY_ALLOCATION_ERROR;
  }
  return v9;
}

uint64_t icu::RegexMatcher::split(int64_t *this, UText *a2, UText **a3, int a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  if (a4 <= 0)
  {
    uint64_t result = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    uint64_t v9 = a2;
    int64_t v11 = *((void *)icu::RegexMatcher::reset((icu::RegexMatcher *)this, a2) + 15);
    if (!v11) {
      return 0;
    }
    uint64_t v12 = (a4 - 1);
    if (a4 < 2)
    {
      int64_t v14 = 0;
LABEL_65:
      if (v11 > v14)
      {
        if (!v9->chunkNativeStart && (int64_t v48 = this[6], v48 == v9->chunkNativeLimit) && v48 == v9->nativeIndexingLimit)
        {
          uint64_t v49 = a3[v12];
          if (v49)
          {
            int64_t v50 = utext_nativeLength(a3[v12]);
            utext_replace(v49, 0, v50, &v9->chunkContents[v14], *((_DWORD *)this + 30) - v14, a5);
          }
          else
          {
            memset(&ut, 0, sizeof(ut));
            uint64_t v67 = &v9->chunkContents[v14];
            ut.magic = 878368812;
            ut.sizeOfStruct = 144;
            utext_openUChars(&ut, v67, v11 - v14, a5);
            a3[v12] = utext_clone(0, &ut, 1, 0, a5);
            utext_close(&ut);
          }
        }
        else
        {
          UErrorCode status = U_ZERO_ERROR;
          int32_t v51 = utext_extract(v9, v14, v11, 0, 0, &status);
          int v52 = (UChar *)uprv_malloc(2 * (v51 + 1));
          if (v52)
          {
            int v53 = v52;
            utext_extract(v9, v14, this[15], v52, v51 + 1, a5);
            int v54 = a3[v12];
            if (v54)
            {
              int64_t v55 = utext_nativeLength(a3[v12]);
              utext_replace(v54, 0, v55, v53, v51, a5);
            }
            else
            {
              memset(&ut, 0, sizeof(ut));
              ut.magic = 878368812;
              ut.sizeOfStruct = 144;
              utext_openUChars(&ut, v53, v51, a5);
              a3[v12] = utext_clone(0, &ut, 1, 0, a5);
              utext_close(&ut);
            }
            uprv_free(v53);
          }
          else
          {
            *a5 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
      }
    }
    else
    {
      uint64_t v79 = (a4 - 2);
      int v70 = a4;
      int v13 = 0;
      int64_t v14 = 0;
      int v81 = *(_DWORD *)(*(void *)(this[1] + 136) + 8);
      int v71 = a3 + 1;
      BOOL v72 = v9;
      uint64_t v73 = (a4 - 1);
      unsigned int v74 = a3;
      while (*((int *)this + 79) <= 0)
      {
        ut.magic = 0;
        if (!icu::RegexMatcher::find((icu::RegexMatcher *)this, (UErrorCode *)&ut)) {
          break;
        }
        if (!v9->chunkNativeStart && (int64_t v15 = this[6], v15 == v9->chunkNativeLimit) && v15 == v9->nativeIndexingLimit)
        {
          long long v16 = a3[v13];
          if (v16)
          {
            int64_t v17 = utext_nativeLength(a3[v13]);
            utext_replace(v16, 0, v17, &v9->chunkContents[v14], *((_DWORD *)this + 34) - v14, a5);
          }
          else
          {
            memset(&ut, 0, sizeof(ut));
            uint64_t v46 = &v9->chunkContents[v14];
            int64_t v47 = this[17] - v14;
            ut.magic = 878368812;
            ut.sizeOfStruct = 144;
            utext_openUChars(&ut, v46, v47, a5);
            a3[v13] = utext_clone(0, &ut, 1, 0, a5);
            utext_close(&ut);
          }
        }
        else
        {
          UErrorCode status = U_ZERO_ERROR;
          int32_t v18 = utext_extract(v9, v14, this[17], 0, 0, &status);
          uint64_t v19 = (UChar *)uprv_malloc(2 * (v18 + 1));
          if (!v19) {
            goto LABEL_82;
          }
          unsigned int v20 = v19;
          utext_extract(v9, v14, this[17], v19, v18 + 1, a5);
          uint64_t v21 = a3[v13];
          if (v21)
          {
            int64_t v22 = utext_nativeLength(a3[v13]);
            utext_replace(v21, 0, v22, v20, v18, a5);
          }
          else
          {
            memset(&ut, 0, sizeof(ut));
            ut.magic = 878368812;
            ut.sizeOfStruct = 144;
            utext_openUChars(&ut, v20, v18, a5);
            a3[v13] = utext_clone(0, &ut, 1, 0, a5);
            utext_close(&ut);
          }
          uprv_free(v20);
        }
        int64_t v14 = this[18];
        if (v81 >= 1 && v13 < (int)v79)
        {
          int64_t v75 = this[18];
          int v76 = v13;
          uint64_t v23 = 0;
          uint64_t v80 = v13 + 1;
          uint64_t v24 = &v71[v13];
          uint64_t v25 = v79;
          while (1)
          {
            int v26 = v23 + 1;
            int v27 = (UText *)this[4];
            uint64_t v28 = v24[v23];
            int64_t v29 = icu::RegexMatcher::start64((icu::RegexMatcher *)this, (int)v23 + 1, a5);
            int64_t v30 = icu::RegexMatcher::end64((icu::RegexMatcher *)this, (int)v23 + 1, a5);
            if (*(int *)a5 <= 0)
            {
              int64_t v32 = v30;
              if (v29 == v30)
              {
                if (v28)
                {
                  int64_t v33 = utext_nativeLength(v28);
                  utext_replace(v28, 0, v33, 0, 0, a5);
                }
                else
                {
                  uint64_t v28 = utext_openUChars(0, 0, 0, a5);
                }
              }
              else
              {
                int32_t v34 = utext_extract(v27, v29, v30, 0, 0, a5);
                if (*a5 == U_BUFFER_OVERFLOW_ERROR || *(int *)a5 <= 0)
                {
                  *a5 = U_ZERO_ERROR;
                  uint64_t v35 = (UChar *)&ut.sizeOfStruct + 1;
                  memset(&ut.providerProperties, 0, 88);
                  *(void *)&ut.magic = (char *)&ut.sizeOfStruct + 2;
                  int32_t v36 = v34 + 1;
                  ut.int32_t providerProperties = 40;
                  int32_t replacementLength = v34;
                  if (v34 >= 40)
                  {
                    int32_t v77 = v34 + 1;
                    uint64_t v37 = (UChar *)uprv_malloc(2 * (v34 + 1));
                    if (v37)
                    {
                      uint64_t v35 = v37;
                      if (LOBYTE(ut.sizeOfStruct)) {
                        uprv_free(*(void **)&ut.magic);
                      }
                      *(void *)&ut.magic = v35;
                      int32_t v36 = v77;
                      ut.int32_t providerProperties = v77;
                      LOBYTE(ut.sizeOfStruct) = 1;
                    }
                    else
                    {
                      *a5 = U_MEMORY_ALLOCATION_ERROR;
                      uint64_t v35 = *(UChar **)&ut.magic;
                      int32_t v36 = v77;
                    }
                  }
                  int64_t v38 = v29;
                  int32_t v39 = v36;
                  utext_extract(v27, v38, v32, v35, v36, a5);
                  if (v28)
                  {
                    int64_t v40 = utext_nativeLength(v28);
                    utext_replace(v28, 0, v40, *(const UChar **)&ut.magic, replacementLength, a5);
                    goto LABEL_40;
                  }
                  uint64_t v25 = v79;
                  if (*(int *)a5 > 0)
                  {
                    uint64_t v28 = 0;
LABEL_43:
                    if (LOBYTE(ut.sizeOfStruct)) {
                      uprv_free(*(void **)&ut.magic);
                    }
                    goto LABEL_23;
                  }
                  if (LOBYTE(ut.sizeOfStruct))
                  {
                    unsigned int v41 = *(UChar **)&ut.magic;
                    *(void *)&ut.magic = (char *)&ut.sizeOfStruct + 2;
                    ut.int32_t providerProperties = 40;
                    LOBYTE(ut.sizeOfStruct) = 0;
                    if (!v41) {
                      goto LABEL_55;
                    }
LABEL_53:
                    int32_t v45 = utext_openUChars(0, v41, replacementLength, a5);
                    if (*(int *)a5 < 1)
                    {
                      uint64_t v28 = v45;
                      v45->providerProperties |= 0x20u;
                    }
                    else
                    {
                      uprv_free(v41);
                      uint64_t v28 = 0;
                    }
                  }
                  else
                  {
                    if ((replacementLength & 0x80000000) == 0)
                    {
                      int32_t providerProperties = ut.providerProperties;
                      if (ut.providerProperties >= v39) {
                        int32_t providerProperties = v39;
                      }
                      size_t v43 = 2 * providerProperties;
                      uint64_t v44 = (UChar *)uprv_malloc(v43);
                      if (v44)
                      {
                        unsigned int v41 = v44;
                        memcpy(v44, *(const void **)&ut.magic, v43);
                        *(void *)&ut.magic = (char *)&ut.sizeOfStruct + 2;
                        ut.int32_t providerProperties = 40;
                        LOBYTE(ut.sizeOfStruct) = 0;
                        goto LABEL_53;
                      }
                    }
LABEL_55:
                    uint64_t v28 = 0;
                    *a5 = U_MEMORY_ALLOCATION_ERROR;
                  }
LABEL_40:
                  uint64_t v25 = v79;
                  goto LABEL_43;
                }
              }
            }
LABEL_23:
            v24[v23] = v28;
            if (v26 < v81)
            {
              uint64_t v31 = v80 + v23++;
              if (v31 < v25) {
                continue;
              }
            }
            int64_t v14 = v75;
            int v13 = v76 + v26;
            uint64_t v12 = v73;
            a3 = v74;
            uint64_t v9 = v72;
            break;
          }
        }
        int64_t v11 = this[15];
        if (v14 == v11)
        {
          int v64 = v13 + 1;
          LODWORD(v12) = v13;
          if (v13 + 1 < v70)
          {
            BOOL v65 = a3[v64];
            if (v65)
            {
              int64_t v66 = utext_nativeLength(a3[v64]);
              utext_replace(v65, 0, v66, &word_18CA96A78, 0, a5);
            }
            else
            {
              a3[v64] = utext_openUChars(0, 0, 0, a5);
            }
            LODWORD(v12) = v13 + 1;
          }
          return (v12 + 1);
        }
        if (*(int *)a5 > 0) {
          goto LABEL_91;
        }
        if (++v13 >= (int)v12) {
          goto LABEL_65;
        }
      }
      if (!v9->chunkNativeStart && (int64_t v56 = this[6], v56 == v9->chunkNativeLimit) && v56 == v9->nativeIndexingLimit)
      {
        int v57 = a3[v13];
        if (v57)
        {
          int64_t v58 = utext_nativeLength(a3[v13]);
          utext_replace(v57, 0, v58, &v9->chunkContents[v14], *((_DWORD *)this + 30) - v14, a5);
        }
        else
        {
          memset(&ut, 0, sizeof(ut));
          unsigned int v68 = &v9->chunkContents[v14];
          int64_t v69 = this[15] - v14;
          ut.magic = 878368812;
          ut.sizeOfStruct = 144;
          utext_openUChars(&ut, v68, v69, a5);
          a3[v13] = utext_clone(0, &ut, 1, 0, a5);
          utext_close(&ut);
        }
      }
      else
      {
        UErrorCode status = U_ZERO_ERROR;
        int32_t v59 = utext_extract(v9, v14, this[15], 0, 0, &status);
        uint64_t v60 = (UChar *)uprv_malloc(2 * (v59 + 1));
        if (v60)
        {
          uint64_t v61 = v60;
          utext_extract(v9, v14, this[15], v60, v59 + 1, a5);
          unsigned int v62 = a3[v13];
          if (v62)
          {
            int64_t v63 = utext_nativeLength(a3[v13]);
            utext_replace(v62, 0, v63, v61, v59, a5);
          }
          else
          {
            memset(&ut, 0, sizeof(ut));
            ut.magic = 878368812;
            ut.sizeOfStruct = 144;
            utext_openUChars(&ut, v61, v59, a5);
            a3[v13] = utext_clone(0, &ut, 1, 0, a5);
            utext_close(&ut);
          }
          uprv_free(v61);
        }
        else
        {
LABEL_82:
          *a5 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
LABEL_91:
      LODWORD(v12) = v13;
    }
    return (v12 + 1);
  }
  return result;
}

uint64_t icu::RegexMatcher::start(icu::RegexMatcher *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  UErrorCode v2 = *((_DWORD *)this + 79);
  if (v2 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_3:
    *a2 = v2;
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 130))
  {
    UErrorCode v2 = U_REGEX_INVALID_STATE;
    goto LABEL_3;
  }
  if ((*(_DWORD *)(*(void *)(*((void *)this + 1) + 136) + 8) & 0x80000000) != 0)
  {
    UErrorCode v2 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_3;
  }
  return *((unsigned int *)this + 34);
}

uint64_t icu::RegexMatcher::start(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  return icu::RegexMatcher::start64(this, a2, a3);
}

uint64_t icu::RegexMatcher::start64(icu::RegexMatcher *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return -1;
  }
  UErrorCode v2 = *((_DWORD *)this + 79);
  if (v2 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_3:
    *a2 = v2;
    return -1;
  }
  if (!*((unsigned char *)this + 130))
  {
    UErrorCode v2 = U_REGEX_INVALID_STATE;
    goto LABEL_3;
  }
  if ((*(_DWORD *)(*(void *)(*((void *)this + 1) + 136) + 8) & 0x80000000) != 0)
  {
    UErrorCode v2 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_3;
  }
  return *((void *)this + 17);
}

uint64_t icu::RegexMatcher::useAnchoringBounds(uint64_t this, int a2)
{
  *(unsigned char *)(this + 129) = a2;
  if (a2) {
    uint64_t v2 = *(void *)(this + 64);
  }
  else {
    uint64_t v2 = 0;
  }
  *(void *)(this + 80) = v2;
  uint64_t v3 = 72;
  if (!a2) {
    uint64_t v3 = 48;
  }
  *(void *)(this + 88) = *(void *)(this + v3);
  return this;
}

uint64_t icu::RegexMatcher::useTransparentBounds(uint64_t this, int a2)
{
  *(unsigned char *)(this + 128) = a2;
  if (a2) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *(void *)(this + 64);
  }
  *(void *)(this + 96) = v2;
  uint64_t v3 = 48;
  if (!a2) {
    uint64_t v3 = 72;
  }
  *(void *)(this + 104) = *(void *)(this + v3);
  return this;
}

uint64_t icu::RegexMatcher::setTimeLimit(uint64_t this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    UErrorCode v3 = *(_DWORD *)(this + 316);
    if (v3 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
LABEL_3:
      *a3 = v3;
      return this;
    }
    if (a2 < 0)
    {
      UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_3;
    }
    *(_DWORD *)(this + 264) = a2;
  }
  return this;
}

uint64_t icu::RegexMatcher::getTimeLimit(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 66);
}

uint64_t icu::RegexMatcher::getStackLimit(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 69);
}

uint64_t icu::RegexMatcher::setMatchCallback(uint64_t this, signed __int8 (*a2)(const void *, int), const void *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *(void *)(this + 280) = a2;
    *(void *)(this + 288) = a3;
  }
  return this;
}

uint64_t icu::RegexMatcher::getMatchCallback(uint64_t this, signed __int8 (**a2)(const void *, int), const void **a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *a2 = *(signed __int8 (**)(const void *, int))(this + 280);
    *a3 = *(const void **)(this + 288);
  }
  return this;
}

uint64_t icu::RegexMatcher::setFindProgressCallback(uint64_t this, signed __int8 (*a2)(const void *, uint64_t), const void *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *(void *)(this + 296) = a2;
    *(void *)(this + 304) = a3;
  }
  return this;
}

uint64_t icu::RegexMatcher::getFindProgressCallback(uint64_t this, signed __int8 (**a2)(const void *, uint64_t), const void **a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *a2 = *(signed __int8 (**)(const void *, uint64_t))(this + 296);
    *a3 = *(const void **)(this + 304);
  }
  return this;
}

uint64_t icu::RegexMatcher::resetStack(icu::RegexMatcher *this)
{
  icu::UVector64::removeAllElements(*((void *)this + 22));
  uint64_t v2 = *((void *)this + 22);
  int v3 = *(_DWORD *)(*((void *)this + 1) + 128);
  int v4 = *(_DWORD *)(v2 + 8);
  int v5 = v4 + v3;
  if (v4 + v3 >= 0 && *(_DWORD *)(v2 + 12) >= v5) {
    goto LABEL_5;
  }
  if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v5, (UErrorCode *)this + 79))
  {
    int v4 = *(_DWORD *)(v2 + 8);
    int v5 = v4 + v3;
LABEL_5:
    uint64_t v6 = *(void *)(v2 + 24) + 8 * v4;
    *(_DWORD *)(v2 + 8) = v5;
    goto LABEL_7;
  }
  uint64_t v6 = 0;
LABEL_7:
  if (*((int *)this + 79) > 0) {
    return 0;
  }
  int v7 = *(_DWORD *)(*((void *)this + 1) + 128);
  if (v7 >= 3) {
    memset((void *)(v6 + 16), 255, 8 * (v7 - 2));
  }
  return v6;
}

uint64_t icu::RegexMatcher::isWordBoundary(icu::RegexMatcher *this, int64_t a2)
{
  if (*((void *)this + 13) <= a2)
  {
    unsigned int v5 = 0;
    *((unsigned char *)this + 168) = 1;
    goto LABEL_7;
  }
  int v3 = (UText *)*((void *)this + 4);
  uint64_t v4 = a2 - v3->chunkNativeStart;
  if (v4 < 0 || v4 >= v3->nativeIndexingLimit || v3->chunkContents[v4] >> 10 > 0x36u)
  {
    utext_setNativeIndex(v3, a2);
    int v3 = (UText *)*((void *)this + 4);
    LODWORD(v4) = v3->chunkOffset;
  }
  else
  {
    v3->int32_t chunkOffset = v4;
  }
  if ((int)v4 >= v3->chunkLength || (unsigned int v16 = v3->chunkContents[(int)v4], v16 >> 11 > 0x1A)) {
    unsigned int v16 = utext_current32(v3);
  }
  if (u_hasBinaryProperty(v16, UCHAR_GRAPHEME_EXTEND) || u_charType(v16) == 16) {
    return 0;
  }
  unsigned int v5 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1EB20BEF0 + 208), v16);
LABEL_7:
  while (1)
  {
    uint64_t v6 = *((void *)this + 4);
    uint64_t v7 = *(int *)(v6 + 40);
    uint64_t v8 = (int)v7 <= *(_DWORD *)(v6 + 28)
       ? *(void *)(v6 + 32) + v7
       : (*(uint64_t (**)(void))(*(void *)(v6 + 56) + 64))();
    if (v8 <= *((void *)this + 12)) {
      break;
    }
    uint64_t v9 = (UText *)*((void *)this + 4);
    int32_t chunkOffset = v9->chunkOffset;
    BOOL v11 = __OFSUB__(chunkOffset, 1);
    int v12 = chunkOffset - 1;
    if (v12 < 0 != v11 || (unsigned int v13 = v9->chunkContents[v12], v13 >> 11 > 0x1A)) {
      unsigned int v13 = utext_previous32(v9);
    }
    else {
      v9->int32_t chunkOffset = v12;
    }
    if (!u_hasBinaryProperty(v13, UCHAR_GRAPHEME_EXTEND) && u_charType(v13) != 16)
    {
      int v14 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1EB20BEF0 + 208), v13);
      return v14 ^ v5;
    }
  }
  int v14 = 0;
  return v14 ^ v5;
}

uint64_t icu::RegexMatcher::isChunkWordBoundary(icu::RegexMatcher *this, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = *(void *)(*((void *)this + 4) + 48);
  uint64_t v5 = a2;
  uint64_t v6 = *((void *)this + 13);
  if (v6 <= a2)
  {
    unsigned int v11 = 0;
    *((unsigned char *)this + 168) = 1;
    goto LABEL_7;
  }
  UChar32 v7 = *(unsigned __int16 *)(v4 + 2 * a2);
  if ((v7 & 0xF800) == 0xD800)
  {
    if ((v7 & 0x400) != 0)
    {
      if (*((void *)this + 12) < a2)
      {
        int v22 = *(unsigned __int16 *)(v4 + 2 * a2 - 2);
        BOOL v9 = (v22 & 0xFC00) == 55296;
        int v10 = v7 + (v22 << 10);
LABEL_26:
        UChar32 v23 = v10 - 56613888;
        if (v9) {
          UChar32 v7 = v23;
        }
      }
    }
    else if (v6 != a2 + 1)
    {
      int v8 = *(unsigned __int16 *)(v4 + 2 * (a2 + 1));
      BOOL v9 = (v8 & 0xFC00) == 56320;
      int v10 = v8 + (v7 << 10);
      goto LABEL_26;
    }
  }
  if (u_hasBinaryProperty(v7, UCHAR_GRAPHEME_EXTEND) || u_charType(v7) == 16) {
    return 0;
  }
  unsigned int v11 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1EB20BEF0 + 208), v7);
LABEL_7:
  uint64_t v12 = *((void *)this + 12);
  if (v12 >= v5)
  {
LABEL_22:
    int v20 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v13 = (int)v2;
      uint64_t v2 = (int)v2 - 1;
      UChar32 v14 = *(unsigned __int16 *)(v4 + 2 * v2);
      if (v12 < v2 && (v14 & 0xFC00) == 56320)
      {
        int v16 = v13 - 2;
        int v17 = *(unsigned __int16 *)(v4 + 2 * (v13 - 2));
        BOOL v18 = (v17 & 0xFC00) == 55296;
        int v19 = v14 - 56613888 + (v17 << 10);
        if (v18) {
          LODWORD(v2) = v16;
        }
        if (v18) {
          UChar32 v14 = v19;
        }
      }
      if (!u_hasBinaryProperty(v14, UCHAR_GRAPHEME_EXTEND) && u_charType(v14) != 16) {
        break;
      }
      uint64_t v12 = *((void *)this + 12);
      if (v12 >= (int)v2) {
        goto LABEL_22;
      }
    }
    int v20 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1EB20BEF0 + 208), v14);
  }
  return v20 ^ v11;
}

uint64_t icu::RegexMatcher::isUWordBoundary(icu::RegexMatcher *this, uint64_t a2, UErrorCode *a3)
{
  if (!*((void *)this + 40))
  {
    English = (char **)icu::Locale::getEnglish(this);
    Worduint64_t Instance = icu::BreakIterator::createWordInstance(English, (const icu::Locale *)a3, v9, v10);
    *((void *)this + 40) = WordInstance;
    if (*(int *)a3 > 0) {
      return 0;
    }
    (*(void (**)(char *, void, UErrorCode *))(*(void *)WordInstance + 64))(WordInstance, *((void *)this + 4), a3);
  }
  if (*((void *)this + 13) <= a2)
  {
    uint64_t result = 1;
    *((unsigned char *)this + 168) = 1;
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 40) + 136);
    return v5();
  }
  return result;
}

uint64_t icu::RegexMatcher::followingGCBoundary(icu::RegexMatcher *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v5 = *((void *)this + 41);
  if (!v5)
  {
    English = (char **)icu::Locale::getEnglish(0);
    Characteruint64_t Instance = icu::BreakIterator::createCharacterInstance(English, (const icu::Locale *)a3, v9, v10);
    *((void *)this + 41) = CharacterInstance;
    if (*(int *)a3 > 0) {
      return a2;
    }
    (*(void (**)(char *, void, UErrorCode *))(*(void *)CharacterInstance + 64))(CharacterInstance, *((void *)this + 4), a3);
    uint64_t v5 = *((void *)this + 41);
  }
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v5 + 120))(v5, a2, a3);
  if (v6 != -1) {
    return v6;
  }
  return a2;
}

uint64_t icu::RegexMatcher::IncrementTime(uint64_t this, UErrorCode *a2)
{
  uint64_t v3 = this;
  UErrorCode v4 = U_REGEX_TIME_OUT;
  *(_DWORD *)(this + 272) = 10000;
  ++*(_DWORD *)(this + 268);
  uint64_t v5 = *(uint64_t (**)(void))(this + 280);
  if (v5)
  {
    this = v5(*(void *)(this + 288));
    if (!this)
    {
      UErrorCode v4 = U_REGEX_STOPPED_BY_CALLER;
LABEL_7:
      *a2 = v4;
      return this;
    }
  }
  int v6 = *(_DWORD *)(v3 + 264);
  if (v6 >= 1 && *(_DWORD *)(v3 + 268) >= v6) {
    goto LABEL_7;
  }
  return this;
}

uint64_t sub_18C9CA248(icu::RegexMatcher *this, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return a2;
  }
  uint64_t v8 = *((void *)this + 22);
  int v9 = *((_DWORD *)this + 14);
  int v10 = *(_DWORD *)(v8 + 8);
  int v11 = v10 + v9;
  if (v10 + v9 >= 0 && *(_DWORD *)(v8 + 12) >= v11) {
    goto LABEL_6;
  }
  if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v11, a4))
  {
    int v10 = *(_DWORD *)(v8 + 8);
    int v11 = v10 + v9;
LABEL_6:
    uint64_t v12 = *(void *)(v8 + 24) + 8 * v10;
    *(_DWORD *)(v8 + 8) = v11;
    goto LABEL_8;
  }
  uint64_t v12 = 0;
LABEL_8:
  if (*(int *)a4 >= 1)
  {
    *a4 = U_REGEX_STACK_OVERFLOW;
    return a2;
  }
  uint64_t v14 = 0;
  uint64_t v15 = *((int *)this + 14);
  uint64_t v16 = v12 - 8 * v15;
  uint64_t v17 = -8 * v15;
  do
  {
    *(void *)(v12 + v14) = *(void *)(v16 + v14);
    v14 += 8;
  }
  while (v17 + v14);
  int v18 = *((_DWORD *)this + 68);
  BOOL v19 = __OFSUB__(v18--, 1);
  *((_DWORD *)this + 68) = v18;
  if ((v18 < 0) ^ v19 | (v18 == 0)) {
    icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
  }
  *(void *)(v16 + 8) = a3;
  return v12;
}

void *icu::RegexMatcher::getStaticClassID(icu::RegexMatcher *this)
{
  return &unk_1E91926B1;
}

void *icu::RegexMatcher::getDynamicClassID(icu::RegexMatcher *this)
{
  return &unk_1E91926B1;
}

void *icu::RemoveTransliterator::getStaticClassID(icu::RemoveTransliterator *this)
{
  return &unk_1E91926B2;
}

void *sub_18C9CA368()
{
  return &unk_1E91926B2;
}

void *sub_18C9CA374()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = L"Any-Remove";
  unint64_t v0 = icu::UnicodeString::UnicodeString(v10, 1, &v8);
  icu::Transliterator::_registerFactory(v0, (uint64_t)sub_18C9CA47C, 0);
  uint64_t v2 = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v10);
  v5[1] = v8;
  UChar32 v7 = "R";
  icu::UnicodeString::UnicodeString(v2, 1, &v7);
  int v6 = L"Null";
  icu::UnicodeString::UnicodeString(v9, 1, &v6);
  icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)v10, (const icu::UnicodeString *)v9, 0);
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v9);
  v5[0] = v6;
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v10);
}

icu::Transliterator *sub_18C9CA47C@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a2, (icu::UMemory *)0x58, a1);
  if (result) {
    return sub_18C9CA4A0(result);
  }
  return result;
}

icu::Transliterator *sub_18C9CA4A0(icu::Transliterator *a1)
{
  v5[8] = *(UChar **)MEMORY[0x1E4F143B8];
  UErrorCode v4 = L"Any-Remove";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  icu::Transliterator::Transliterator(a1, v5, 0);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(void *)a1 = &unk_1EDA521A0;
  return a1;
}

void sub_18C9CA55C(icu::Transliterator *a1)
{
  icu::Transliterator::~Transliterator(a1);

  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18C9CA584@<X0>(icu::Transliterator *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  UErrorCode v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x58, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    sub_18C9CA4A0(v4);
    if (icu::Transliterator::getFilter(a1))
    {
      uint64_t Filter = icu::Transliterator::getFilter(a1);
      UChar32 v7 = (icu::UnicodeFilter *)(*(uint64_t (**)(uint64_t))(*(void *)Filter + 24))(Filter);
      icu::Transliterator::adoptFilter(v5, v7);
    }
  }
  return v5;
}

void sub_18C9CA604(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v9 = 0;
  long long v8 = 0u;
  uint64_t v5 = &unk_1EDA47700;
  LOWORD(v6) = 2;
  (*(void (**)(uint64_t, void, void, void **))(*(void *)a2 + 32))(a2, a3[2], a3[3], &v5);
  int v4 = a3[2];
  a3[1] += v4 - a3[3];
  a3[3] = v4;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v5);
}

icu::RegexPattern *icu::RegexPattern::RegexPattern(icu::RegexPattern *this, unint64_t a2)
{
  *(void *)this = &unk_1EDA52250;
  *((void *)this + 5) = &unk_1EDA47700;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, a2);
  return this;
}

{
  *(void *)this = &unk_1EDA52250;
  *((void *)this + 5) = &unk_1EDA47700;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, a2);
  return this;
}

uint64_t *icu::RegexPattern::init(icu::RegexPattern *this, unint64_t a2)
{
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v3 = (UErrorCode *)((char *)this + 104);
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  if (*((_WORD *)this + 24)) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = *((_WORD *)this + 24) & 0x1F;
  }
  *((_WORD *)this + 24) = v4;
  *(_OWORD *)((char *)this + 120) = 0uLL;
  uint64_t v5 = (_DWORD *)((char *)this + 120);
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *((void *)this + 22) = 0;
  *((unsigned char *)this + 184) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 136) = 0uLL;
  *((_DWORD *)this + 38) = 0;
  long long v6 = (icu::UVector64 *)icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x20, a2);
  if (v6) {
    long long v6 = icu::UVector64::UVector64(v6, v3 + 4);
  }
  *((void *)this + 4) = v6;
  uint64_t v9 = (icu::UVector32 *)icu::UMemory::operator new(v8, (icu::UMemory *)0x20, v7);
  if (v9) {
    uint64_t v9 = icu::UVector32::UVector32(v9, v3 + 4);
  }
  *((void *)this + 17) = v9;
  uint64_t v12 = (icu::UVector *)icu::UMemory::operator new(v11, (icu::UMemory *)0x28, v10);
  if (v12) {
    uint64_t v12 = (icu::UVector *)icu::UVector::UVector(v12, v3 + 4);
  }
  *(void *)uint64_t v3 = v12;
  uint64_t v15 = (icu::UnicodeSet *)icu::UMemory::operator new(v14, (icu::UMemory *)0xC8, v13);
  if (v15) {
    icu::UnicodeSet::UnicodeSet(v15);
  }
  *((void *)this + 20) = v15;
  uint64_t result = icu::UMemory::operator new(v17, (icu::UMemory *)0x20, v16);
  if (result)
  {
    *(_OWORD *)uint64_t result = 0u;
    *((_OWORD *)result + 1) = 0u;
  }
  *((void *)this + 22) = result;
  if (*((int *)this + 30) <= 0)
  {
    if (*((void *)this + 4) && *((void *)this + 17) && *(void *)v3 && result && *((void *)this + 20))
    {
      BOOL v19 = *(icu::UVector **)v3;
      return (uint64_t *)icu::UVector::addElement(v19, 0, v3 + 4);
    }
    else
    {
      _DWORD *v5 = 7;
    }
  }
  return result;
}

uint64_t icu::RegexPattern::RegexPattern(icu::RegexPattern *this, const icu::RegexPattern *a2)
{
  *(void *)this = &unk_1EDA52250;
  *((void *)this + 5) = &unk_1EDA47700;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, (unint64_t)a2);

  return icu::RegexPattern::operator=((uint64_t)this, (uint64_t)a2);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDA52250;
  *((void *)this + 5) = &unk_1EDA47700;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, (unint64_t)a2);

  return icu::RegexPattern::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::RegexPattern::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  icu::RegexPattern::zap((icu::RegexPattern *)a1);
  icu::RegexPattern::init((icu::RegexPattern *)a1, v4);
  int v6 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 120) = v6;
  unint64_t v7 = (int *)(a1 + 120);
  if (v6 > 0) {
    return a1;
  }
  long long v8 = *(uint64_t **)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = (icu::UnicodeString *)icu::UMemory::operator new(v8, (icu::UMemory *)0x40, v5);
    if (!v9)
    {
      *(void *)(a1 + 16) = 0;
LABEL_21:
      *(_DWORD *)(a1 + 120) = 7;
      return a1;
    }
    uint64_t v10 = (uint64_t)v9;
    *(void *)(a1 + 16) = icu::UnicodeString::UnicodeString(v9, *(UChar ***)(a2 + 16));
    uint64_t v11 = utext_openConstUnicodeString(0, v10, (UErrorCode *)(a1 + 120));
  }
  else
  {
    *(void *)(a1 + 16) = 0;
    uint64_t v11 = utext_clone(*(UText **)(a1 + 8), *(const UText **)(a2 + 8), 0, 1, (UErrorCode *)(a1 + 120));
  }
  *(void *)(a1 + 8) = v11;
  if (*v7 > 0) {
    return a1;
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  icu::UnicodeString::operator=((UChar **)(a1 + 40), (UChar **)(a2 + 40));
  *(void *)(a1 + 124) = *(void *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  icu::UnicodeSet::operator=(*(icu::UnicodeSet **)(a1 + 160), *(const icu::UnicodeSet **)(a2 + 160));
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  uint64_t v12 = *(_OWORD **)(a2 + 176);
  unint64_t v13 = *(_OWORD **)(a1 + 176);
  long long v14 = v12[1];
  _OWORD *v13 = *v12;
  v13[1] = v14;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  icu::UVector64::assign(*(icu::UVector64 **)(a1 + 32), *(const icu::UVector64 **)(a2 + 32), (UErrorCode *)(a1 + 120));
  icu::UVector32::assign(*(icu::UVector32 **)(a1 + 136), *(const icu::UVector32 **)(a2 + 136), (UErrorCode *)(a1 + 120));
  uint64_t v16 = *(int *)(*(void *)(a2 + 104) + 8);
  if ((int)v16 < 0) {
    uint64_t v17 = -1;
  }
  else {
    uint64_t v17 = 32 * v16;
  }
  int v18 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v17, v15);
  if (!v18)
  {
    *(void *)(a1 + 112) = 0;
    goto LABEL_21;
  }
  BOOL v19 = v18;
  if (!v16)
  {
    *(void *)(a1 + 112) = v18;
    goto LABEL_25;
  }
  bzero(v18, 32 * v16);
  *(void *)(a1 + 112) = v19;
  if ((int)v16 < 2)
  {
LABEL_25:
    if (*(void *)(a2 + 192))
    {
      if (icu::RegexPattern::initNamedCaptureMap((icu::RegexPattern *)a1))
      {
        int v39 = -1;
        uint64_t v32 = uhash_nextElement(*(uint64_t **)(a2 + 192), &v39);
        if (v32)
        {
          uint64_t v34 = v32;
          do
          {
            uint64_t v35 = (uint64_t *)*v7;
            if ((int)v35 > 0) {
              break;
            }
            int32_t v36 = *(UChar ***)(v34 + 16);
            uint64_t v37 = (icu::UnicodeString *)icu::UMemory::operator new(v35, (icu::UMemory *)0x40, v33);
            if (v37)
            {
              uint64_t v38 = (uint64_t)v37;
              icu::UnicodeString::UnicodeString(v37, v36);
              uhash_puti(*(void *)(a1 + 192), v38, *(_DWORD *)(v34 + 8), (int *)(a1 + 120));
            }
            else
            {
              int *v7 = 7;
            }
            uint64_t v34 = uhash_nextElement(*(uint64_t **)(a2 + 192), &v39);
          }
          while (v34);
        }
      }
    }
    return a1;
  }
  uint64_t v20 = 32 * v16;
  unsigned int v21 = 1;
  uint64_t v22 = 32;
  while (*v7 <= 0)
  {
    UChar32 v23 = (const icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(a2 + 104), v21);
    int v26 = (icu::UnicodeSet *)icu::UMemory::operator new(v25, (icu::UMemory *)0xC8, v24);
    if (!v26)
    {
      int *v7 = 7;
      goto LABEL_25;
    }
    int v27 = v26;
    icu::UnicodeSet::UnicodeSet(v26, v23);
    icu::UVector::addElement(*(icu::UVector **)(a1 + 104), v27, (UErrorCode *)(a1 + 120));
    uint64_t v28 = (_OWORD *)(*(void *)(a2 + 112) + v22);
    int64_t v29 = (_OWORD *)(*(void *)(a1 + 112) + v22);
    long long v30 = v28[1];
    *int64_t v29 = *v28;
    v29[1] = v30;
    ++v21;
    v22 += 32;
    if (v20 == v22) {
      goto LABEL_25;
    }
  }
  return a1;
}

void icu::RegexPattern::zap(icu::RegexPattern *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 4) = 0;
  uint64_t v3 = (icu::UVector *)*((void *)this + 13);
  if (*((int *)v3 + 2) >= 2)
  {
    signed int v4 = 1;
    do
    {
      unint64_t v5 = (icu::UnicodeSet *)icu::UVector::elementAt(v3, v4);
      if (v5)
      {
        unint64_t v7 = icu::UnicodeSet::~UnicodeSet(v6, v5);
        icu::UMemory::operator delete(v7);
      }
      ++v4;
      uint64_t v3 = (icu::UVector *)*((void *)this + 13);
    }
    while (v4 < *((_DWORD *)v3 + 2));
  }
  (*(void (**)(icu::UVector *))(*(void *)v3 + 8))(v3);
  *((void *)this + 13) = 0;
  uint64_t v9 = (void *)*((void *)this + 14);
  if (v9) {
    icu::UMemory::operator delete[](v9);
  }
  *((void *)this + 14) = 0;
  uint64_t v10 = *((void *)this + 17);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 17) = 0;
  uint64_t v11 = (icu::UnicodeSet *)*((void *)this + 20);
  if (v11)
  {
    uint64_t v12 = icu::UnicodeSet::~UnicodeSet(v8, v11);
    icu::UMemory::operator delete(v12);
  }
  *((void *)this + 20) = 0;
  unint64_t v13 = (void *)*((void *)this + 22);
  if (v13) {
    icu::UMemory::operator delete(v13);
  }
  *((void *)this + 22) = 0;
  long long v14 = (UText *)*((void *)this + 1);
  if (v14)
  {
    utext_close(v14);
    *((void *)this + 1) = 0;
  }
  uint64_t v15 = *((void *)this + 2);
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    *((void *)this + 2) = 0;
  }
  uint64_t v16 = (unsigned char *)*((void *)this + 24);
  if (v16)
  {
    uhash_close(v16);
    *((void *)this + 24) = 0;
  }
}

uint64_t icu::RegexPattern::initNamedCaptureMap(icu::RegexPattern *this)
{
  if (*((void *)this + 24)) {
    return 1;
  }
  uint64_t v3 = uhash_openSize((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, (uint64_t)uhash_compareLong, 7, (int *)this + 30);
  *((void *)this + 24) = v3;
  if (*((int *)this + 30) <= 0)
  {
    uhash_setKeyDeleter((uint64_t)v3, (uint64_t)uprv_deleteUObject);
    return 1;
  }
  return 0;
}

void icu::RegexPattern::~RegexPattern(icu::RegexPattern *this)
{
  icu::RegexPattern::zap(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::RegexPattern *)((char *)this + 40));

  icu::UObject::~UObject(this);
}

{
  void *v2;
  uint64_t vars8;

  icu::RegexPattern::zap(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::RegexPattern *)((char *)this + 40));

  icu::UObject::~UObject(this);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  icu::RegexPattern::zap(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::RegexPattern *)((char *)this + 40));
  icu::UObject::~UObject(this);

  icu::UMemory::operator delete(v3);
}

uint64_t icu::RegexPattern::clone@<X0>(icu::RegexPattern *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  signed int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xC8, a2);
  uint64_t v6 = (uint64_t)v4;
  if (v4)
  {
    uint64_t *v4 = (uint64_t)&unk_1EDA52250;
    v4[5] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v4 + 24) = 2;
    icu::RegexPattern::init((icu::RegexPattern *)v4, v5);
    icu::RegexPattern::operator=(v6, (uint64_t)this);
  }
  return v6;
}

uint64_t icu::RegexPattern::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24) || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4 || (uint64_t v5 = *(void *)(a2 + 16)) == 0)
  {
    long long v8 = *(UText **)(a1 + 8);
    uint64_t v9 = *(UText **)(a2 + 8);
    if (v8)
    {
      if (v9)
      {
        uint64_t chunkNativeStart = v8->chunkNativeStart;
        if (chunkNativeStart > 0
          || (uint64_t v11 = -chunkNativeStart, v11 >= v8->nativeIndexingLimit)
          || v8->chunkContents[v11] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v8, 0);
          uint64_t v9 = *(UText **)(a2 + 8);
        }
        else
        {
          v8->int32_t chunkOffset = v11;
        }
        uint64_t v14 = v9->chunkNativeStart;
        if (v14 > 0 || (uint64_t v15 = -v14, v15 >= v9->nativeIndexingLimit) || v9->chunkContents[v15] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v9, 0);
          uint64_t v9 = *(UText **)(a2 + 8);
        }
        else
        {
          v9->int32_t chunkOffset = v15;
        }
        int v16 = utext_equals(*(const UText **)(a1 + 8), v9);
        return v16 != 0;
      }
    }
    else if (!v9)
    {
      return 1;
    }
    return 0;
  }
  unsigned int v6 = *(unsigned __int16 *)(v4 + 8);
  if (v6) {
    return *(_WORD *)(v5 + 8) & 1;
  }
  if ((v6 & 0x8000) != 0) {
    int v7 = *(_DWORD *)(v4 + 12);
  }
  else {
    int v7 = v6 >> 5;
  }
  uint64_t v12 = 0;
  unsigned int v17 = *(unsigned __int16 *)(v5 + 8);
  if ((v17 & 0x8000u) == 0) {
    unsigned int v18 = v17 >> 5;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v5 + 12);
  }
  if ((v17 & 1) == 0 && v7 == v18)
  {
    int v16 = icu::UnicodeString::doEquals((icu::UnicodeString *)v4, (const icu::UnicodeString *)v5, v7);
    return v16 != 0;
  }
  return v12;
}

uint64_t *icu::RegexPattern::compile(UChar **this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  int v7 = (int)a2;
  if ((a2 & 0xFFFFFC40) != 0)
  {
    uint64_t v5 = 0;
    int32_t v8 = 66315;
LABEL_11:
    *a4 = v8;
    return v5;
  }
  if ((a2 & 0x80) != 0)
  {
    uint64_t v5 = 0;
    int32_t v8 = 66309;
    goto LABEL_11;
  }
  uint64_t v11 = icu::UMemory::operator new((uint64_t *)0xFFFFFC40, (icu::UMemory *)0xC8, (unint64_t)a2);
  uint64_t v5 = v11;
  if (!v11)
  {
    int32_t v8 = 7;
    goto LABEL_11;
  }
  uint64_t *v11 = (uint64_t)&unk_1EDA52250;
  v11[5] = (uint64_t)&unk_1EDA47700;
  *((_WORD *)v11 + 24) = 2;
  icu::RegexPattern::init((icu::RegexPattern *)v11, v12);
  int32_t v13 = *((_DWORD *)v5 + 30);
  if (v13 >= 1)
  {
    *a4 = v13;
    icu::RegexPattern::zap((icu::RegexPattern *)v5);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v5 + 5));
    icu::UObject::~UObject((icu::UObject *)v5);
    icu::UMemory::operator delete(v15);
    return 0;
  }
  *((_DWORD *)v5 + 6) = v7;
  memset(v19, 0, sizeof(v19));
  icu::RegexCompile::RegexCompile((icu::RegexCompile *)v19, (icu::RegexPattern *)v5, a4);
  icu::RegexCompile::compile((icu::RegexCompile *)v19, this, a3, a4, v17);
  if (*(int *)a4 >= 1)
  {
    icu::RegexPattern::~RegexPattern((icu::RegexPattern *)v5);
    icu::UMemory::operator delete(v18);
    uint64_t v5 = 0;
  }
  icu::RegexCompile::~RegexCompile((icu::RegexCompile *)v19);
  return v5;
}

uint64_t *icu::RegexPattern::compile(UText *this, UText *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  int v7 = (int)a2;
  if ((a2 & 0xFFFFFC40) != 0)
  {
    uint64_t v5 = 0;
    int32_t v8 = 66315;
LABEL_11:
    *a4 = v8;
    return v5;
  }
  if ((a2 & 0x80) != 0)
  {
    uint64_t v5 = 0;
    int32_t v8 = 66309;
    goto LABEL_11;
  }
  uint64_t v11 = icu::UMemory::operator new((uint64_t *)0xFFFFFC40, (icu::UMemory *)0xC8, (unint64_t)a2);
  uint64_t v5 = v11;
  if (!v11)
  {
    int32_t v8 = 7;
    goto LABEL_11;
  }
  uint64_t *v11 = (uint64_t)&unk_1EDA52250;
  v11[5] = (uint64_t)&unk_1EDA47700;
  *((_WORD *)v11 + 24) = 2;
  icu::RegexPattern::init((icu::RegexPattern *)v11, v12);
  int32_t v13 = *((_DWORD *)v5 + 30);
  if (v13 >= 1)
  {
    *a4 = v13;
    icu::RegexPattern::zap((icu::RegexPattern *)v5);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v5 + 5));
    icu::UObject::~UObject((icu::UObject *)v5);
    icu::UMemory::operator delete(v15);
    return 0;
  }
  *((_DWORD *)v5 + 6) = v7;
  memset(v18, 0, sizeof(v18));
  icu::RegexCompile::RegexCompile((icu::RegexCompile *)v18, (icu::RegexPattern *)v5, a4);
  icu::RegexCompile::compile((icu::RegexCompile *)v18, this, a3, a4);
  if (*(int *)a4 >= 1)
  {
    icu::RegexPattern::~RegexPattern((icu::RegexPattern *)v5);
    icu::UMemory::operator delete(v17);
    uint64_t v5 = 0;
  }
  icu::RegexCompile::~RegexCompile((icu::RegexCompile *)v18);
  return v5;
}

uint64_t *icu::RegexPattern::compile(UChar **this, UParseError *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  return icu::RegexPattern::compile(this, 0, a2, a3, a5);
}

uint64_t *icu::RegexPattern::compile(UText *this, UParseError *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  return icu::RegexPattern::compile(this, 0, a2, a3, a5);
}

uint64_t *icu::RegexPattern::compile(UChar **this, const icu::UnicodeString *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  memset(&v6, 0, sizeof(v6));
  return icu::RegexPattern::compile(this, a2, &v6, a3, a5);
}

uint64_t *icu::RegexPattern::compile(UText *this, UText *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  memset(&v6, 0, sizeof(v6));
  return icu::RegexPattern::compile(this, a2, &v6, a3, a5);
}

uint64_t icu::RegexPattern::flags(icu::RegexPattern *this)
{
  return *((unsigned int *)this + 6);
}

UErrorCode *icu::RegexPattern::matcher(icu::RegexPattern *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v5 = (UErrorCode *)icu::RegexPattern::matcher(this, a3);
  UParseError v6 = v5;
  if (v5)
  {
    v5[79] = *a3;
    icu::RegexMatcher::reset((icu::RegexMatcher *)v5, a2);
  }
  return v6;
}

icu::RegexMatcher *icu::RegexPattern::matcher(icu::RegexPattern *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  UErrorCode v5 = *((_DWORD *)this + 30);
  if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    uint64_t result = 0;
LABEL_5:
    *a2 = v5;
    return result;
  }
  uint64_t result = (icu::RegexMatcher *)icu::UMemory::operator new((icu::UMemory *)0x150, (unint64_t)a2);
  if (!result)
  {
    UErrorCode v5 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }
  return (icu::RegexMatcher *)icu::RegexMatcher::RegexMatcher(result, this);
}

uint64_t icu::RegexPattern::matches(UChar **this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  int32_t v8 = icu::RegexPattern::compile(this, 0, a3, a4, a5);
  uint64_t v9 = icu::RegexPattern::matcher((icu::RegexPattern *)v8, a2, a4);
  uint64_t v5 = icu::RegexMatcher::matches((icu::RegexMatcher *)v9, a4);
  if (v9)
  {
    icu::RegexMatcher::~RegexMatcher((icu::RegexMatcher *)v9);
    icu::UMemory::operator delete(v10);
  }
  if (v8)
  {
    icu::RegexPattern::zap((icu::RegexPattern *)v8);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)(v8 + 5));
    icu::UObject::~UObject((icu::UObject *)v8);
    icu::UMemory::operator delete(v12);
  }
  return v5;
}

uint64_t icu::RegexPattern::matches(UText *this, UText *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  int32_t v8 = icu::RegexPattern::compile(this, 0, a3, a4, a5);
  uint64_t v9 = icu::RegexPattern::matcher((icu::RegexPattern *)v8, a4);
  uint64_t v10 = v9;
  uint64_t v5 = 0;
  if (*(int *)a4 <= 0)
  {
    icu::RegexMatcher::reset(v9, a2);
    uint64_t v5 = icu::RegexMatcher::matches(v10, a4);
  }
  if (v10)
  {
    icu::RegexMatcher::~RegexMatcher(v10);
    icu::UMemory::operator delete(v11);
  }
  if (v8)
  {
    icu::RegexPattern::zap((icu::RegexPattern *)v8);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)(v8 + 5));
    icu::UObject::~UObject((icu::UObject *)v8);
    icu::UMemory::operator delete(v13);
  }
  return v5;
}

UText *icu::RegexPattern::pattern@<X0>(icu::RegexPattern *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (UChar **)*((void *)this + 2);
  if (v3)
  {
    return (UText *)icu::UnicodeString::UnicodeString((icu::UnicodeString *)a2, v3);
  }
  else
  {
    uint64_t result = (UText *)*((void *)this + 1);
    if (result)
    {
      UErrorCode status = U_ZERO_ERROR;
      int64_t v6 = utext_nativeLength(result);
      int32_t v7 = utext_extract(*((UText **)this + 1), 0, v6, 0, 0, &status);
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(void *)(a2 + 56) = 0;
      *(void *)a2 = &unk_1EDA47700;
      *(_WORD *)(a2 + 8) = 2;
      UErrorCode status = U_ZERO_ERROR;
      uint64_t Buffer = (UChar *)icu::UnicodeString::getBuffer((icu::UnicodeString *)a2, v7);
      utext_extract(*((UText **)this + 1), 0, v6, Buffer, v7, &status);
      return (UText *)icu::UnicodeString::releaseBuffer(a2, v7);
    }
    else
    {
      *(void *)a2 = &unk_1EDA47700;
      *(_WORD *)(a2 + 8) = 2;
    }
  }
  return result;
}

uint64_t icu::RegexPattern::patternText(icu::RegexPattern *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  *a2 = U_ZERO_ERROR;
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    sub_18C9B7A68(a2);
    return *(void *)(qword_1EB20BEF0 + 3832);
  }
  return result;
}

uint64_t icu::RegexPattern::groupNumberFromName(icu::RegexPattern *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 24);
  if (!v5 || (uint64_t result = uhash_geti(v5, (uint64_t)a2), !result))
  {
    uint64_t result = 0;
    *a3 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
  }
  return result;
}

uint64_t icu::RegexPattern::groupNumberFromName(icu::RegexPattern *this, const char *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  memset(v10, 0, sizeof(v10));
  icu::UnicodeString::UnicodeString(v10, a2, a3, 0);
  uint64_t v4 = 0;
  uint64_t v7 = *(unsigned int *)a4;
  if ((int)v7 <= 0)
  {
    uint64_t v8 = *((void *)this + 24);
    if (!v8 || (uint64_t v4 = uhash_geti(v8, (uint64_t)v10), !v4))
    {
      uint64_t v4 = 0;
      uint64_t v7 = 66325;
      *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v10);
  return v4;
}

uint64_t icu::RegexPattern::split(icu::RegexPattern *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v11, 0, sizeof(v11));
  icu::RegexMatcher::RegexMatcher((icu::RegexMatcher *)v11, this);
  if (*((uint64_t *)&v12 + 1) <= 0) {
    uint64_t v5 = icu::RegexMatcher::split((int64_t *)v11, a2, a3, a4, a5);
  }
  else {
    uint64_t v5 = 0;
  }
  icu::RegexMatcher::~RegexMatcher((icu::RegexMatcher *)v11);
  return v5;
}

uint64_t icu::RegexPattern::split(icu::RegexPattern *this, UText *a2, UText **a3, int a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v11, 0, sizeof(v11));
  icu::RegexMatcher::RegexMatcher((icu::RegexMatcher *)v11, this);
  if (*((uint64_t *)&v12 + 1) <= 0) {
    uint64_t v5 = icu::RegexMatcher::split((int64_t *)v11, a2, a3, a4, a5);
  }
  else {
    uint64_t v5 = 0;
  }
  icu::RegexMatcher::~RegexMatcher((icu::RegexMatcher *)v11);
  return v5;
}

void *icu::RegexPattern::getStaticClassID(icu::RegexPattern *this)
{
  return &unk_1E91926B3;
}

void *icu::RegexPattern::getDynamicClassID(icu::RegexPattern *this)
{
  return &unk_1E91926B3;
}

void sub_18C9CBC88(icu::ByteSink *a1)
{
  icu::ByteSink::~ByteSink(a1);

  icu::UMemory::operator delete(v1);
}

void *sub_18C9CBCB0(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  int v4 = a4;
  int v5 = a3;
  uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 48))(a1, a3, a4);
  if (result)
  {
    uint64_t v9 = (void *)(a1[1] + v4);
    return memcpy(v9, a2, v5);
  }
  return result;
}

BOOL sub_18C9CBD44(uint64_t a1, int a2, int a3)
{
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  int v4 = 2 * *(_DWORD *)(a1 + 16);
  if (v4 <= a3 + 2 * a2) {
    int v4 = a3 + 2 * a2;
  }
  if (v4 <= 200) {
    int v5 = 200;
  }
  else {
    int v5 = v4;
  }
  int64_t v6 = icu::CollationKey::reallocate(*(icu::CollationKey **)(a1 + 32), v5, a3);
  BOOL result = v6 != 0;
  if (v6) {
    int v8 = v5;
  }
  else {
    int v8 = 0;
  }
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t icu::RuleBasedCollator::RuleBasedCollator(uint64_t a1, uint64_t a2)
{
  int v4 = icu::Collator::Collator((void *)a1, (const icu::Collator *)a2);
  void *v4 = &unk_1EDA522E0;
  *(_OWORD *)(v4 + 1) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 3) = *(_OWORD *)(a2 + 24);
  icu::Locale::Locale((icu::Locale *)(v4 + 5), a2 + 40);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(unsigned char *)(a1 + 268) = *(unsigned char *)(a2 + 268);
  icu::SharedObject::addRef(*(void *)(a1 + 16));
  icu::SharedObject::addRef(*(void *)(a1 + 32));
  return a1;
}

{
  void *v4;
  uint64_t v5;

  int v4 = icu::Collator::Collator((void *)a1);
  void *v4 = &unk_1EDA522E0;
  int v5 = *(void *)(a2 + 248);
  *(_OWORD *)(v4 + 1) = *(_OWORD *)(v5 + 24);
  v4[3] = v5;
  v4[4] = a2;
  icu::Locale::Locale((icu::Locale *)(v4 + 5), a2 + 24);
  *(_DWORD *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 268) = 0;
  icu::SharedObject::addRef(*(void *)(a1 + 16));
  icu::SharedObject::addRef(*(void *)(a1 + 32));
  return a1;
}

icu::RuleBasedCollator *icu::RuleBasedCollator::RuleBasedCollator(icu::RuleBasedCollator *this, const icu::CollationTailoring *a2, const unsigned __int8 *a3, const icu::RuleBasedCollator *a4, UErrorCode *a5)
{
  uint64_t v10 = icu::Collator::Collator(this);
  *uint64_t v10 = &unk_1EDA522E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  icu::Locale::Locale(v11, (icu::Locale *)(v10 + 5), "", 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  *((unsigned char *)this + 268) = 0;
  if (*(int *)a5 <= 0)
  {
    if (!a2 || !a3 || !a4)
    {
      UErrorCode v16 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
      *a5 = v16;
      return this;
    }
    uint64_t Root = icu::CollationRoot::getRoot((icu::CollationRoot *)a5, v12);
    if (*(int *)a5 <= 0)
    {
      uint64_t v15 = (uint64_t *)*((void *)a4 + 3);
      if (v15 == (uint64_t *)Root)
      {
        unsigned int v18 = (icu::CollationTailoring *)icu::UMemory::operator new(v15, (icu::UMemory *)0x190, v14);
        if (v18)
        {
          uint64_t v19 = (uint64_t)v18;
          if (*(void *)(icu::CollationTailoring::CollationTailoring(v18, *(const icu::CollationSettings **)(*((void *)a4 + 3) + 32))+ 32))
          {
            icu::CollationDataReader::read(*((void *)a4 + 3), a2, a3, v19, a5, v20);
            if (*(int *)a5 <= 0)
            {
              icu::Locale::setToBogus((icu::Locale *)(v19 + 104));
              icu::RuleBasedCollator::adoptTailoring(this, (icu::CollationTailoring *)v19, a5);
              return this;
            }
          }
          else
          {
            *a5 = U_MEMORY_ALLOCATION_ERROR;
          }
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          return this;
        }
        UErrorCode v16 = U_MEMORY_ALLOCATION_ERROR;
      }
      else
      {
        UErrorCode v16 = U_UNSUPPORTED_ERROR;
      }
      goto LABEL_9;
    }
  }
  return this;
}

icu::Locale *icu::RuleBasedCollator::adoptTailoring(icu::RuleBasedCollator *this, icu::CollationTailoring *a2, UErrorCode *a3)
{
  int v4 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v4 < 1)
  {
    int v8 = icu::UMemory::operator new(v4, (icu::UMemory *)0x100, (unint64_t)a2);
    if (v8)
    {
      *((void *)this + 4) = sub_18C8F0F00(v8, (uint64_t)a2 + 104, (uint64_t)a2);
      uint64_t v9 = *((void *)a2 + 4);
      *((void *)this + 1) = *((void *)a2 + 3);
      *((void *)this + 2) = v9;
      icu::SharedObject::addRef(v9);
      *((void *)this + 3) = a2;
      icu::SharedObject::addRef(*((void *)this + 4));
      BOOL result = icu::Locale::operator=((icu::RuleBasedCollator *)((char *)this + 40), (uint64_t)a2 + 104);
      *((unsigned char *)this + 268) = 0;
      return result;
    }
    *((void *)this + 4) = 0;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

  return (icu::Locale *)icu::SharedObject::deleteIfZeroRefCount((uint64_t)a2);
}

void icu::RuleBasedCollator::~RuleBasedCollator(icu::RuleBasedCollator *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    icu::SharedObject::removeRef(v2);
    *((void *)this + 2) = 0;
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    icu::SharedObject::removeRef(v3);
    *((void *)this + 4) = 0;
  }
  icu::Locale::~Locale((icu::RuleBasedCollator *)((char *)this + 40));

  icu::Collator::~Collator(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::RuleBasedCollator::~RuleBasedCollator(this);

  icu::UMemory::operator delete(v1);
}

uint64_t *icu::RuleBasedCollator::clone@<X0>(icu::RuleBasedCollator *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = icu::UMemory::operator new(a3, (icu::UMemory *)0x110, a2);
  if (result) {
    return (uint64_t *)icu::RuleBasedCollator::RuleBasedCollator((uint64_t)result, (uint64_t)this);
  }
  return result;
}

uint64_t icu::RuleBasedCollator::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_18C8917C4(*(icu::SharedObject **)(a2 + 16), (icu::SharedObject **)(a1 + 16));
    int v4 = *(icu::SharedObject **)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    sub_18C8917C4(v4, (icu::SharedObject **)(a1 + 32));
    *(void *)(a1 + 8) = *(void *)(*(void *)(a1 + 24) + 24);
    icu::Locale::operator=((icu::Locale *)(a1 + 40), a2 + 40);
    *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
    *(unsigned char *)(a1 + 268) = *(unsigned char *)(a2 + 268);
  }
  return a1;
}

void *icu::RuleBasedCollator::getStaticClassID(icu::RuleBasedCollator *this)
{
  return &unk_1E91926B4;
}

void *icu::RuleBasedCollator::getDynamicClassID(icu::RuleBasedCollator *this)
{
  return &unk_1E91926B4;
}

uint64_t icu::RuleBasedCollator::operator==(icu::RuleBasedCollator *a1, icu::RuleBasedCollator *a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!icu::Collator::operator==(a1, a2)
    || !icu::CollationSettings::operator==(*((void *)a1 + 2), *((void *)a2 + 2)))
  {
    return 0;
  }
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a2 + 1);
  if (v4 == v5) {
    return 1;
  }
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v7 = *(void *)(v5 + 32);
  if ((v6 == 0) != (v7 == 0)) {
    return 0;
  }
  if (!v6 || *(unsigned __int16 *)(*((void *)a1 + 3) + 48) >= 0x20u)
  {
    uint64_t v9 = *((void *)a2 + 3);
    if ((!v7 || *(unsigned __int16 *)(v9 + 48) >= 0x20u) && sub_18C830FC4(*((void *)a1 + 3) + 40, v9 + 40)) {
      return 1;
    }
  }
  UErrorCode v15 = U_ZERO_ERROR;
  TailoredSet = icu::RuleBasedCollator::getTailoredSet(a1, &v15);
  long long v12 = icu::RuleBasedCollator::getTailoredSet(a2, &v15);
  BOOL v8 = 0;
  if (v15 <= U_ZERO_ERROR) {
    BOOL v8 = icu::UnicodeSet::operator==((uint64_t)TailoredSet, (uint64_t)v12);
  }
  if (v12)
  {
    icu::UnicodeSet::~UnicodeSet(v12);
    icu::UMemory::operator delete(v13);
  }
  if (TailoredSet)
  {
    icu::UnicodeSet::~UnicodeSet(TailoredSet);
    icu::UMemory::operator delete(v14);
  }
  return v8;
}

icu::UnicodeSet *icu::RuleBasedCollator::getTailoredSet(icu::RuleBasedCollator *this, UErrorCode *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 > 0) {
    return 0;
  }
  uint64_t v7 = (icu::UnicodeSet *)icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, (unint64_t)a2);
  uint64_t v3 = v7;
  if (!v7)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return v3;
  }
  icu::UnicodeSet::UnicodeSet(v7);
  BOOL v8 = (uint64_t *)*((void *)this + 1);
  if (v8[4])
  {
    v11[0] = 0;
    v11[1] = 0;
    void v11[2] = v3;
    long long v12 = &unk_1EDA47700;
    __int16 v13 = 2;
    uint64_t v14 = 0;
    int v15 = 0;
    sub_18C8F4DB4((uint64_t)v11, v8, a2);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v12);
    if (*(int *)a2 >= 1)
    {
      icu::UnicodeSet::~UnicodeSet(v3);
      icu::UMemory::operator delete(v10);
      return 0;
    }
  }
  return v3;
}

uint64_t icu::RuleBasedCollator::hashCode(icu::RuleBasedCollator *this)
{
  uint64_t v2 = icu::CollationSettings::hashCode(*((icu::CollationSettings **)this + 2));
  uint64_t v3 = v2;
  if (!*(void *)(*((void *)this + 1) + 32)) {
    return v2;
  }
  UErrorCode v11 = U_ZERO_ERROR;
  TailoredSet = icu::RuleBasedCollator::getTailoredSet(this, &v11);
  uint64_t v5 = TailoredSet;
  uint64_t v6 = 0;
  unint64_t v7 = v11;
  if (v11 > U_ZERO_ERROR)
  {
    if (!TailoredSet) {
      return v6;
    }
    goto LABEL_11;
  }
  memset(v10, 0, sizeof(v10));
  icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v10, TailoredSet);
  while (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v10)
       && (DWORD2(v10[0]) & 0x80000000) == 0)
    uint64_t v3 = sub_18C8DD7F8(*((uint64_t **)this + 1), DWORD2(v10[0])) ^ v3;
  icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v10);
  uint64_t v6 = v3;
  if (v5)
  {
LABEL_11:
    BOOL v8 = icu::UnicodeSet::~UnicodeSet((void *)v7, v5);
    icu::UMemory::operator delete(v8);
  }
  return v6;
}

icu::Locale *icu::RuleBasedCollator::setLocales(icu::RuleBasedCollator *this, const icu::Locale *a2, const icu::Locale *a3, const icu::Locale *a4)
{
  *((unsigned char *)this + 268) = !icu::Locale::operator==((uint64_t)a4, *((void *)this + 3) + 104);

  return icu::Locale::operator=((icu::RuleBasedCollator *)((char *)this + 40), (uint64_t)a3);
}

icu::Locale *icu::RuleBasedCollator::getLocale@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  if (*a3 >= 1) {
    goto LABEL_2;
  }
  if ((a2 - 1) < 2) {
    goto LABEL_6;
  }
  if (a2)
  {
    *a3 = 1;
LABEL_2:
    uint64_t Root = icu::Locale::getRoot((icu::Locale *)a1);
    goto LABEL_7;
  }
  if (*(unsigned char *)(a1 + 268)) {
LABEL_6:
  }
    uint64_t Root = a1 + 40;
  else {
    uint64_t Root = *(void *)(a1 + 24) + 104;
  }
LABEL_7:

  return icu::Locale::Locale(a4, Root);
}

const char *icu::RuleBasedCollator::internalGetLocaleID(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  if ((a2 - 1) < 2) {
    goto LABEL_5;
  }
  if (a2)
  {
    BOOL result = 0;
    *a3 = 1;
    return result;
  }
  if (*(unsigned char *)(a1 + 268)) {
LABEL_5:
  }
    uint64_t v3 = a1 + 40;
  else {
    uint64_t v3 = *(void *)(a1 + 24) + 104;
  }
  if (*(unsigned char *)(v3 + 216)) {
    return 0;
  }
  uint64_t v5 = *(unsigned char **)(v3 + 40);
  if (*v5) {
    return v5;
  }
  else {
    return "root";
  }
}

uint64_t icu::RuleBasedCollator::getRules(icu::RuleBasedCollator *this)
{
  return *((void *)this + 3) + 40;
}

icu::UnicodeString *icu::RuleBasedCollator::getRules(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    if (*(_WORD *)(a3 + 8)) {
      __int16 v5 = 2;
    }
    else {
      __int16 v5 = *(_WORD *)(a3 + 8) & 0x1F;
    }
    *(_WORD *)(a3 + 8) = v5;
    sub_18CA0B2B8(a3);
    uint64_t v6 = *(void *)(a1 + 24);
    unint64_t v7 = (const icu::UnicodeString *)(v6 + 40);
    unsigned int v8 = *(unsigned __int16 *)(v6 + 48);
    int v9 = (__int16)v8;
    unsigned int v10 = v8 >> 5;
    unsigned int v11 = *(_DWORD *)(v6 + 52);
    if (v9 >= 0) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v11;
    }
    __int16 v13 = (icu::UnicodeString *)icu::UnicodeString::doAppend(a3, v7, 0, v12);
    return (icu::UnicodeString *)icu::UnicodeString::getTerminatedBuffer(v13);
  }
  else
  {
    int v15 = (UChar **)(*(void *)(a1 + 24) + 40);
    return icu::UnicodeString::operator=((UChar **)a3, v15);
  }
}

uint64_t icu::RuleBasedCollator::getVersion(uint64_t this, unsigned __int8 *a2)
{
  int v2 = *(_DWORD *)(*(void *)(this + 24) + 328);
  *(_DWORD *)a2 = v2;
  if ((v2 & 0xFF00) == 0x7800 && BYTE2(v2) <= 0x3Fu) {
    a2[2] = BYTE2(v2) | 0x40;
  }
  *a2 = v2 - 112;
  return this;
}

void *icu::RuleBasedCollator::internalGetContractionsAndExpansions(void *this, icu::UnicodeSet *a2, icu::UnicodeSet *a3, char a4, UErrorCode *a5)
{
  v16[41] = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    uint64_t v9 = (uint64_t)this;
    if (a2) {
      icu::UnicodeSet::clear(a2);
    }
    if (a3) {
      icu::UnicodeSet::clear(a3);
    }
    sub_18C8DDA20((uint64_t)v13, (uint64_t)a2, (uint64_t)a3, 0, a4);
    sub_18C8F5D08((uint64_t)v13, *(uint64_t **)(v9 + 8), (int *)a5);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
    icu::UnicodeSet::~UnicodeSet(v11, (icu::UnicodeSet *)&v15);
    return icu::UnicodeSet::~UnicodeSet(v12, (icu::UnicodeSet *)&v14);
  }
  return this;
}

void icu::RuleBasedCollator::internalAddContractions(uint64_t **this, uint64_t a2, icu::UnicodeSet *a3, UErrorCode *a4)
{
  v11[41] = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    sub_18C8DDA20((uint64_t)v8, (uint64_t)a3, 0, 0, 0);
    sub_18C8F5F00((uint64_t)v8, this[1], a2, a4);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v11);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)&v10);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)&v9);
  }
}

uint64_t icu::RuleBasedCollator::getDefaultSettings(icu::RuleBasedCollator *this)
{
  return *(void *)(*((void *)this + 3) + 32);
}

uint64_t icu::RuleBasedCollator::getAttribute(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 16;
  int v4 = 2048;
  switch(a2)
  {
    case 0:
      goto LABEL_18;
    case 1:
      if ((*(unsigned char *)(*(void *)(a1 + 16) + 24) & 0xC) != 0) {
        return 20;
      }
      else {
        return 21;
      }
    case 2:
      int v5 = *(_DWORD *)(*(void *)(a1 + 16) + 24);
      if ((v5 & 0x300) == 0x200) {
        unsigned int v6 = 24;
      }
      else {
        unsigned int v6 = 25;
      }
      if ((v5 & 0x300) != 0) {
        return v6;
      }
      else {
        return 16;
      }
    case 3:
      int v4 = 1024;
      goto LABEL_18;
    case 4:
      int v4 = 1;
      goto LABEL_18;
    case 5:
      return (*(int *)(*(void *)(a1 + 16) + 24) >> 12);
    case 6:
      return v3;
    case 7:
      int v4 = 2;
LABEL_18:
      if ((*(_DWORD *)(*(void *)(a1 + 16) + 24) & v4) != 0) {
        uint64_t v3 = 17;
      }
      else {
        uint64_t v3 = 16;
      }
      break;
    default:
      *a3 = 1;
      return 0xFFFFFFFFLL;
  }
  return v3;
}

atomic_uint **icu::RuleBasedCollator::setAttribute(uint64_t a1, int a2, unsigned int a3, int *a4)
{
  BOOL result = (atomic_uint **)icu::RuleBasedCollator::getAttribute(a1, a2, a4);
  if (*a4 <= 0)
  {
    if (result == a3)
    {
      int v9 = 1 << a2;
LABEL_4:
      int v10 = *(_DWORD *)(a1 + 264) | v9;
LABEL_9:
      *(_DWORD *)(a1 + 264) = v10;
      return result;
    }
    BOOL result = (atomic_uint **)(a1 + 16);
    uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 32);
    if (a3 == -1 && *(void *)(a1 + 16) == v11)
    {
      int v9 = 1 << a2;
LABEL_8:
      int v10 = *(_DWORD *)(a1 + 264) & ~v9;
      goto LABEL_9;
    }
    BOOL result = (atomic_uint **)sub_18C8DFC68(result);
    if (result)
    {
      uint64_t v12 = result;
      switch(a2)
      {
        case 0:
          int v13 = *(_DWORD *)(v11 + 24);
          int v14 = 2048;
          goto LABEL_25;
        case 1:
          BOOL result = (atomic_uint **)icu::CollationSettings::setAlternateHandling((uint64_t)result, a3, *(_DWORD *)(v11 + 24), a4);
          goto LABEL_26;
        case 2:
          BOOL result = (atomic_uint **)icu::CollationSettings::setCaseFirst((uint64_t)result, a3, *(_DWORD *)(v11 + 24), a4);
          goto LABEL_26;
        case 3:
          int v13 = *(_DWORD *)(v11 + 24);
          int v14 = 1024;
          goto LABEL_25;
        case 4:
          int v13 = *(_DWORD *)(v11 + 24);
          int v14 = 1;
          goto LABEL_25;
        case 5:
          BOOL result = (atomic_uint **)icu::CollationSettings::setStrength((uint64_t)result, a3, *(_DWORD *)(v11 + 24), (UErrorCode *)a4);
          goto LABEL_26;
        case 6:
          if (a3 + 1 > 0x12 || ((1 << (a3 + 1)) & 0x60001) == 0) {
            goto LABEL_23;
          }
          goto LABEL_26;
        case 7:
          int v13 = *(_DWORD *)(v11 + 24);
          int v14 = 2;
LABEL_25:
          BOOL result = (atomic_uint **)icu::CollationSettings::setFlag((uint64_t)result, v14, a3, v13, a4);
LABEL_26:
          if (*a4 > 0) {
            return result;
          }
          BOOL result = (atomic_uint **)icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(a1 + 8), (const icu::CollationData *)v12, (const icu::CollationSettings *)((char *)v12 + 84), (unsigned __int16 *)0x180);
          *((_DWORD *)v12 + 20) = result;
          int v9 = 1 << a2;
          if (a3 == -1) {
            goto LABEL_8;
          }
          goto LABEL_4;
        default:
LABEL_23:
          int v15 = 1;
          goto LABEL_15;
      }
    }
    int v15 = 7;
LABEL_15:
    *a4 = v15;
  }
  return result;
}

uint64_t icu::RuleBasedCollator::setFastLatinOptions(icu::CollationFastLatin **this, icu::CollationSettings *a2)
{
  uint64_t result = icu::CollationFastLatin::getOptions(this[1], a2, (icu::CollationSettings *)((char *)a2 + 84), (unsigned __int16 *)0x180);
  *((_DWORD *)a2 + 20) = result;
  return result;
}

uint64_t icu::RuleBasedCollator::setMaxVariable(uint64_t a1, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return a1;
  }
  if (a2 == -1)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v9 = (atomic_uint **)(a1 + 16);
    uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 32);
    if (v10 == v11)
    {
      int v8 = *(_DWORD *)(a1 + 264);
      goto LABEL_16;
    }
    uint64_t v12 = sub_18C8DFC68(v9);
    if (v12)
    {
      int v13 = v12;
      unsigned int v14 = (*(_DWORD *)(v11 + 24) >> 4) & 7 | 0x1000;
      unsigned int v6 = -1;
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  if ((a2 & 0xFFFFFFFC) != 0x1000)
  {
    int v15 = 1;
LABEL_19:
    *a3 = v15;
    return a1;
  }
  unsigned int v6 = a2 - 4096;
  unint64_t v7 = (atomic_uint **)(a1 + 16);
  if (a2 - 4096 == ((*(_DWORD *)(*(void *)(a1 + 16) + 24) >> 4) & 7))
  {
    int v8 = *(_DWORD *)(a1 + 264);
LABEL_14:
    unsigned int v18 = v8 | 0x100;
LABEL_17:
    *(_DWORD *)(a1 + 264) = v18;
    return a1;
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 32);
  uint64_t v16 = sub_18C8DFC68(v7);
  if (!v16)
  {
LABEL_18:
    int v15 = 7;
    goto LABEL_19;
  }
  int v13 = v16;
  unsigned int v14 = a2;
LABEL_12:
  atomic_uint LastPrimaryForGroup = icu::CollationData::getLastPrimaryForGroup(*(icu::CollationData **)(a1 + 8), v14);
  icu::CollationSettings::setMaxVariable((uint64_t)v13, v6, *(_DWORD *)(v11 + 24), a3);
  if (*(int *)a3 <= 0)
  {
    v13[7] = LastPrimaryForGroup;
    v13[20] = icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(a1 + 8), (const icu::CollationData *)v13, (const icu::CollationSettings *)(v13 + 21), (unsigned __int16 *)0x180);
    int v8 = *(_DWORD *)(a1 + 264);
    if (a2 != -1) {
      goto LABEL_14;
    }
LABEL_16:
    unsigned int v18 = v8 & 0xFFFFFEFF;
    goto LABEL_17;
  }
  return a1;
}

uint64_t icu::RuleBasedCollator::getMaxVariable(icu::RuleBasedCollator *this)
{
  return (*(_DWORD *)(*((void *)this + 2) + 24) >> 4) & 7 | 0x1000u;
}

uint64_t icu::RuleBasedCollator::getVariableTop(icu::RuleBasedCollator *this, UErrorCode *a2)
{
  return *(unsigned int *)(*((void *)this + 2) + 28);
}

uint64_t icu::RuleBasedCollator::setVariableTop(uint64_t a1, UChar *s, int32_t a3, UErrorCode *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  int32_t v6 = a3;
  if (!s && a3) {
    goto LABEL_10;
  }
  if (a3 < 0)
  {
    int32_t v6 = u_strlen(s);
    if (v6) {
      goto LABEL_7;
    }
LABEL_10:
    uint64_t result = 0;
    UErrorCode v14 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_11;
  }
  if (!a3) {
    goto LABEL_10;
  }
LABEL_7:
  unsigned int v9 = *(_DWORD *)(*(void *)(a1 + 16) + 24);
  int v10 = (v9 >> 1) & 1;
  if (v9)
  {
    bzero(v16, 0x210uLL);
    sub_18C8DD888((uint64_t)v16, *(void **)(a1 + 8), v10, (uint64_t)s, (uint64_t)s, (uint64_t)&s[v6]);
    unint64_t v12 = sub_18C8DCA60((icu::CollationIterator::CEBuffer *)v16, a4);
    unint64_t v13 = sub_18C8DCA60((icu::CollationIterator::CEBuffer *)v16, a4);
    icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)v16, v15);
  }
  else
  {
    long long v19 = 0u;
    long long v20 = 0u;
    memset(v18, 0, sizeof(v18));
    long long v17 = 0u;
    uint64_t v11 = *(void **)(a1 + 8);
    v16[1] = *v11;
    _OWORD v16[2] = v11;
    *((void *)&v17 + 1) = (char *)v18 + 8;
    LODWORD(v18[0]) = 40;
    DWORD2(v19) = 0;
    DWORD2(v20) = -1;
    BYTE12(v20) = (v9 & 2) != 0;
    v16[0] = &unk_1EDA54650;
    unsigned int v21 = s;
    uint64_t v22 = s;
    UChar32 v23 = &s[v6];
    unint64_t v12 = sub_18C8DCA60((icu::CollationIterator::CEBuffer *)v16, a4);
    unint64_t v13 = sub_18C8DCA60((icu::CollationIterator::CEBuffer *)v16, a4);
    icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)v16);
  }
  if (v12 != 0x101000100 && v13 == 0x101000100)
  {
    icu::RuleBasedCollator::setVariableTop(a1, HIDWORD(v12), a4);
    return *(unsigned int *)(*(void *)(a1 + 16) + 28);
  }
  uint64_t result = 0;
  UErrorCode v14 = U_CE_NOT_FOUND_ERROR;
LABEL_11:
  *a4 = v14;
  return result;
}

uint64_t icu::RuleBasedCollator::setVariableTop(uint64_t this, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return this;
  }
  unsigned int v3 = a2;
  uint64_t v4 = this;
  int v5 = (atomic_uint **)(this + 16);
  if (*(_DWORD *)(*(void *)(this + 16) + 28) == a2) {
    goto LABEL_7;
  }
  this = icu::CollationData::getGroupForPrimary(*(icu::CollationData **)(this + 8), a2);
  if ((this - 4100) <= 0xFFFFFFFB)
  {
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_5:
    *a3 = v7;
    return this;
  }
  int v8 = this;
  this = icu::CollationData::getLastPrimaryForGroup(*(icu::CollationData **)(v4 + 8), this);
  unsigned int v3 = this;
  if (this == *(_DWORD *)(*(void *)(v4 + 16) + 28)) {
    goto LABEL_7;
  }
  this = (uint64_t)sub_18C8DFC68(v5);
  if (!this)
  {
    UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }
  uint64_t v11 = (_DWORD *)this;
  this = icu::CollationSettings::setMaxVariable(this, v8 - 4096, *(_DWORD *)(*(void *)(*(void *)(v4 + 24) + 32) + 24), a3);
  if (*(int *)a3 <= 0)
  {
    v11[7] = v3;
    this = icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(v4 + 8), (const icu::CollationData *)v11, (const icu::CollationSettings *)(v11 + 21), (unsigned __int16 *)0x180);
    v11[20] = this;
LABEL_7:
    int v9 = *(_DWORD *)(v4 + 264);
    if (v3 == *(_DWORD *)(*(void *)(*(void *)(v4 + 24) + 32) + 28)) {
      unsigned int v10 = v9 & 0xFFFFFEFF;
    }
    else {
      unsigned int v10 = v9 | 0x100;
    }
    *(_DWORD *)(v4 + 264) = v10;
  }
  return this;
}

uint64_t icu::RuleBasedCollator::setVariableTop(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  if ((v4 & 0x11) != 0)
  {
    int v5 = 0;
  }
  else if ((v4 & 2) != 0)
  {
    int v5 = (UChar *)((char *)a2 + 10);
  }
  else
  {
    int v5 = (UChar *)*((void *)a2 + 3);
  }
  int v6 = (__int16)v4;
  int32_t v7 = v4 >> 5;
  if (v6 >= 0) {
    int32_t v8 = v7;
  }
  else {
    int32_t v8 = *((_DWORD *)a2 + 3);
  }
  return icu::RuleBasedCollator::setVariableTop((uint64_t)this, v5, v8, a3);
}

uint64_t icu::RuleBasedCollator::getReorderCodes(icu::RuleBasedCollator *this, void *__dst, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (a3 < 0 || !__dst && a3)
  {
    uint64_t v4 = 0;
    UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    uint64_t v7 = *((void *)this + 2);
    uint64_t v4 = *(unsigned int *)(v7 + 72);
    if (!v4) {
      return v4;
    }
    if ((int)v4 <= a3)
    {
      memcpy(__dst, *(const void **)(v7 + 64), 4 * (int)v4);
      return v4;
    }
    UErrorCode v5 = U_BUFFER_OVERFLOW_ERROR;
  }
  *a4 = v5;
  return v4;
}

uint64_t icu::RuleBasedCollator::setReorderCodes(uint64_t this, const int *__s1, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    int v5 = a3;
    if (a3 < 0 || (uint64_t v7 = this, !__s1) && a3)
    {
      UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_6:
      *a4 = v8;
      return this;
    }
    if (a3 == 1) {
      int v5 = *__s1 != 103;
    }
    uint64_t v9 = *(void *)(this + 16);
    if (v5 != *(_DWORD *)(v9 + 72) || (this = memcmp(__s1, *(const void **)(v9 + 64), 4 * v5), this))
    {
      if (v5 != 1 || *__s1 != -1)
      {
        this = (uint64_t)sub_18C8DFC68((atomic_uint **)(v7 + 16));
        if (this)
        {
          unsigned int v10 = (_DWORD *)this;
          icu::CollationSettings::setReordering((icu::CollationSettings *)this, *(const icu::CollationData **)(v7 + 8), __s1, v5, a4);
          this = icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(v7 + 8), (const icu::CollationData *)v10, (const icu::CollationSettings *)(v10 + 21), (unsigned __int16 *)0x180);
          v10[20] = this;
          return this;
        }
LABEL_19:
        UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_6;
      }
      uint64_t v11 = *(const icu::CollationSettings **)(*(void *)(v7 + 24) + 32);
      if ((const icu::CollationSettings *)v9 != v11)
      {
        this = (uint64_t)sub_18C8DFC68((atomic_uint **)(v7 + 16));
        if (this)
        {
          unint64_t v12 = (_DWORD *)this;
          icu::CollationSettings::copyReorderingFrom((_DWORD *)this, v11, a4);
          this = icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(v7 + 8), (const icu::CollationData *)v12, (const icu::CollationSettings *)(v12 + 21), (unsigned __int16 *)0x180);
          v12[20] = this;
          return this;
        }
        goto LABEL_19;
      }
    }
  }
  return this;
}

unint64_t icu::RuleBasedCollator::compare(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  unsigned int v7 = *((unsigned __int16 *)a2 + 4);
  if ((v7 & 0x11) != 0)
  {
    UErrorCode v8 = 0;
  }
  else if ((v7 & 2) != 0)
  {
    UErrorCode v8 = (unsigned __int16 *)((char *)a2 + 10);
  }
  else
  {
    UErrorCode v8 = (unsigned __int16 *)*((void *)a2 + 3);
  }
  int v9 = (__int16)v7;
  int v10 = v7 >> 5;
  int v11 = *((_DWORD *)a2 + 3);
  if (v9 >= 0) {
    int v11 = v10;
  }
  unsigned int v12 = *((unsigned __int16 *)a3 + 4);
  if ((v12 & 0x11) != 0)
  {
    unint64_t v13 = 0;
  }
  else if ((v12 & 2) != 0)
  {
    unint64_t v13 = (unsigned __int16 *)((char *)a3 + 10);
  }
  else
  {
    unint64_t v13 = (unsigned __int16 *)*((void *)a3 + 3);
  }
  int v14 = (__int16)v12;
  unsigned int v15 = v12 >> 5;
  if (v14 >= 0) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = *((unsigned int *)a3 + 3);
  }
  return icu::RuleBasedCollator::doCompare((uint64_t)this, v8, v11, v13, (UErrorCode *)v16, a4);
}

unint64_t icu::RuleBasedCollator::doCompare(uint64_t a1, unsigned __int16 *a2, int a3, unsigned __int16 *a4, UErrorCode *a5, UErrorCode *a6)
{
  int v6 = (int)a5;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (a2 == a4 && a3 == a5) {
    return 0;
  }
  if (a3 < 0)
  {
    int v15 = *a2;
    if (v15 == *a4)
    {
      uint64_t v16 = 0;
      while (v15)
      {
        LODWORD(v14) = v16 + 1;
        int v15 = a2[v16 + 1];
        int v17 = a4[++v16];
        if (v15 != v17)
        {
          unsigned int v12 = 0;
          unint64_t v13 = 0;
          goto LABEL_20;
        }
      }
      return 0;
    }
    unint64_t v13 = 0;
    unsigned int v12 = 0;
    LODWORD(v14) = 0;
    unsigned int v18 = (icu::CollationIterator **)(a1 + 16);
    int v19 = (*(unsigned __int8 *)(*(void *)(a1 + 16) + 24) >> 1) & 1;
  }
  else
  {
    unsigned int v12 = &a2[a3];
    unint64_t v13 = &a4[(int)a5];
    if (a3)
    {
      uint64_t v14 = 0;
      while (a5 != v14)
      {
        if (a2[v14] != a4[v14]) {
          goto LABEL_20;
        }
        if (a3 == ++v14) {
          goto LABEL_10;
        }
      }
      LODWORD(v14) = a5;
    }
    else
    {
LABEL_10:
      LODWORD(v14) = a3;
      if (a3 == a5) {
        return 0;
      }
    }
LABEL_20:
    unsigned int v18 = (icu::CollationIterator **)(a1 + 16);
    unsigned int v20 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 24);
    int v19 = (v20 >> 1) & 1;
    if (v14)
    {
      if (v14 == a3 || !sub_18C8EF6C8(*(void *)(a1 + 8), a2[v14], (v20 >> 1) & 1))
      {
        if (v14 == v6)
        {
          LODWORD(v14) = v6;
          goto LABEL_32;
        }
        if (!sub_18C8EF6C8(*(void *)(a1 + 8), a4[v14], v19)) {
          goto LABEL_32;
        }
      }
      int32_t v36 = v13;
      unsigned int v21 = &a2[(v14 - 1)];
      while ((int)v14 >= 2)
      {
        int v22 = *v21--;
        LODWORD(v14) = v14 - 1;
        if (!sub_18C8EF6C8(*(void *)(a1 + 8), v22, v19)) {
          goto LABEL_31;
        }
      }
      LODWORD(v14) = 0;
LABEL_31:
      unint64_t v13 = v36;
    }
  }
LABEL_32:
  UChar32 v23 = *v18;
  if ((*((_DWORD *)*v18 + 20) & 0x80000000) != 0
    || (a5 = (UErrorCode *)(a3 - v14), a3 != v14) && a2[(int)v14] > 0x17Fu)
  {
    int v26 = v12;
    int v27 = a6;
  }
  else
  {
    int v25 = v6 - v14;
    BOOL v24 = v6 == v14;
    int v26 = v12;
    int v27 = a6;
    if (v24 || a4[(int)v14] <= 0x17Fu)
    {
      if (a3 < 0)
      {
        LODWORD(a5) = -1;
        int v25 = -1;
      }
      unint64_t v11 = icu::CollationFastLatin::compareUTF16(*(unsigned __int8 **)(*(void *)(a1 + 8) + 88), (uint64_t)v23 + 84, *((_DWORD *)*v18 + 20), (uint64_t)&a2[(int)v14], (int)a5, (uint64_t)&a4[(int)v14], v25);
      if (v11 != -2)
      {
LABEL_44:
        if (v11) {
          return v11;
        }
        goto LABEL_47;
      }
      UChar32 v23 = *v18;
    }
  }
  if ((*((unsigned char *)v23 + 24) & 1) == 0)
  {
    long long v62 = 0u;
    long long v63 = 0u;
    memset(&v61[40], 0, 320);
    *(_OWORD *)&v61[24] = 0u;
    uint64_t v28 = *(void **)(a1 + 8);
    *(void *)&v61[8] = *v28;
    *(void *)&v61[16] = v28;
    *(void *)&v61[32] = &v61[48];
    *(_DWORD *)&v61[40] = 40;
    DWORD2(v62) = 0;
    DWORD2(v63) = -1;
    BYTE12(v63) = v19;
    *(void *)uint64_t v61 = &unk_1EDA54650;
    int v64 = a2;
    BOOL v65 = &a2[(int)v14];
    int64_t v66 = v26;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    long long v48 = 0u;
    long long v47 = 0u;
    long long v46 = 0u;
    long long v45 = 0u;
    long long v44 = 0u;
    long long v43 = 0u;
    long long v42 = 0u;
    long long v41 = 0u;
    memset(&v40[8], 0, 80);
    *((void *)&v38 + 1) = *(void *)&v61[8];
    long long v39 = (unint64_t)v28;
    *(void *)int64_t v40 = &v40[16];
    *(_DWORD *)&v40[8] = 40;
    DWORD2(v56) = 0;
    DWORD2(v57) = -1;
    BYTE12(v57) = v19;
    *(void *)&long long v38 = &unk_1EDA54650;
    int64_t v58 = a4;
    int32_t v59 = &a4[(int)v14];
    uint64_t v60 = v13;
    unint64_t v11 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)v61, (icu::CollationIterator *)&v38, v23, v27, a5);
    icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)&v38);
    icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)v61);
    goto LABEL_44;
  }
  bzero(v61, 0x210uLL);
  sub_18C8DD888((uint64_t)v61, *(void **)(a1 + 8), v19, (uint64_t)a2, (uint64_t)&a2[(int)v14], (uint64_t)v26);
  bzero(&v38, 0x210uLL);
  sub_18C8DD888((uint64_t)&v38, *(void **)(a1 + 8), v19, (uint64_t)a4, (uint64_t)&a4[(int)v14], (uint64_t)v13);
  unint64_t v11 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)v61, (icu::CollationIterator *)&v38, *(icu::CollationIterator **)(a1 + 16), v27, v29);
  icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)&v38, v30);
  icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)v61, v31);
  if (v11) {
    return v11;
  }
LABEL_47:
  int v32 = *((_DWORD *)*v18 + 6);
  if (v32 >= 61440 && *(int *)v27 <= 0)
  {
    unint64_t v33 = *(icu::Normalizer2Impl **)(*(void *)(a1 + 8) + 48);
    uint64_t v34 = &a4[(int)v14];
    if (v32)
    {
      memset(v61, 0, 112);
      sub_18C9CE64C((uint64_t)v61, v33, &a2[(int)v14], v26);
      long long v39 = 0u;
      memset(v40, 0, 80);
      long long v38 = 0u;
      sub_18C9CE64C((uint64_t)&v38, v33, v34, v13);
      unint64_t v11 = sub_18C9CE564((uint64_t)v33, (uint64_t)v61, (uint64_t)&v38);
      sub_18C9CE83C((uint64_t)&v38);
      sub_18C9CE83C((uint64_t)v61);
    }
    else
    {
      *(void *)&v61[16] = 0;
      *(void *)&v61[8] = 0;
      *(void *)&v61[24] = 0xFFFFFFFFLL;
      *(void *)uint64_t v61 = &unk_1EDA524B0;
      *(void *)&v61[32] = &a2[(int)v14];
      *(void *)&v61[40] = v26;
      *((void *)&v38 + 1) = 0;
      *(void *)&long long v39 = 0;
      *((void *)&v39 + 1) = 0xFFFFFFFFLL;
      *(void *)&long long v38 = &unk_1EDA524B0;
      *(void *)int64_t v40 = v34;
      *(void *)&v40[8] = v13;
      unint64_t v11 = sub_18C9CE564((uint64_t)v33, (uint64_t)v61, (uint64_t)&v38);
      icu::UObject::~UObject((icu::UObject *)&v38);
      icu::UObject::~UObject((icu::UObject *)v61);
    }
  }
  return v11;
}

unint64_t icu::RuleBasedCollator::compare(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  if (!a4 || *(int *)a5 > 0) {
    return 0;
  }
  if (a4 < 0)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0;
  }
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x8000u) == 0) {
    int v7 = v6 >> 5;
  }
  else {
    int v7 = *((_DWORD *)a2 + 3);
  }
  unsigned int v8 = *((unsigned __int16 *)a3 + 4);
  if ((v8 & 0x8000u) == 0) {
    int v9 = v8 >> 5;
  }
  else {
    int v9 = *((_DWORD *)a3 + 3);
  }
  if (v7 >= a4) {
    int v7 = a4;
  }
  if (v9 >= a4) {
    unint64_t v10 = a4;
  }
  else {
    unint64_t v10 = v9;
  }
  if ((v6 & 0x11) != 0)
  {
    unint64_t v11 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    unint64_t v11 = (unsigned __int16 *)((char *)a2 + 10);
  }
  else
  {
    unint64_t v11 = (unsigned __int16 *)*((void *)a2 + 3);
  }
  if ((v8 & 0x11) != 0)
  {
    unint64_t v13 = 0;
  }
  else if ((v8 & 2) != 0)
  {
    unint64_t v13 = (unsigned __int16 *)((char *)a3 + 10);
  }
  else
  {
    unint64_t v13 = (unsigned __int16 *)*((void *)a3 + 3);
  }
  return icu::RuleBasedCollator::doCompare((uint64_t)this, v11, v7, v13, (UErrorCode *)v10, a5);
}

unint64_t icu::RuleBasedCollator::compare(uint64_t a1, UChar *s, int32_t a3, UChar *a4, UErrorCode *a5, UErrorCode *a6)
{
  if (*(int *)a6 > 0) {
    return 0;
  }
  int v7 = a5;
  int32_t v9 = a3;
  if (!s && a3 || !a4 && a5)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0;
  }
  if (a3 < 0)
  {
    if ((a5 & 0x80000000) == 0) {
      int32_t v9 = u_strlen(s);
    }
  }
  else if ((a5 & 0x80000000) != 0)
  {
    int v7 = (UErrorCode *)u_strlen(a4);
  }

  return icu::RuleBasedCollator::doCompare(a1, s, v9, a4, v7, a6);
}

unint64_t icu::RuleBasedCollator::compareUTF8(icu::RuleBasedCollator *this, const icu::StringPiece *a2, const unsigned __int8 **a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    unsigned int v6 = *(const unsigned __int8 **)a2;
    int32_t v7 = *((_DWORD *)a2 + 2);
    if (v6) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v7 == 0;
    }
    if (v8)
    {
      int32_t v9 = (UErrorCode *)*((unsigned int *)a3 + 2);
      if (*a3 || v9 == 0) {
        return icu::RuleBasedCollator::doCompare(this, v6, v7, *a3, v9, a4);
      }
    }
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

unint64_t icu::RuleBasedCollator::doCompare(icu::RuleBasedCollator *this, const unsigned __int8 *a2, int32_t a3, const unsigned __int8 *a4, UErrorCode *a5, UErrorCode *a6)
{
  int v7 = (int)a5;
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  if (a2 == a4 && a3 == a5) {
    return 0;
  }
  if (a3 < 0)
  {
    int v14 = *a2;
    if (v14 == *a4)
    {
      uint64_t v15 = 0;
      while (v14)
      {
        LODWORD(v13) = v15 + 1;
        int v14 = a2[v15 + 1];
        int v16 = a4[++v15];
        if (v14 != v16) {
          goto LABEL_19;
        }
      }
      return 0;
    }
    LODWORD(v13) = 0;
LABEL_19:
    puint64_t i = v13;
  }
  else if (a3)
  {
    uint64_t v13 = 0;
    while ((int)a5 != v13)
    {
      if (a2[v13] != a4[v13]) {
        goto LABEL_19;
      }
      if (a3 == ++v13) {
        goto LABEL_10;
      }
    }
    puint64_t i = (int)a5;
    LODWORD(v13) = a5;
  }
  else
  {
LABEL_10:
    puint64_t i = a3;
    LODWORD(v13) = a3;
    if (a3 == a5) {
      return 0;
    }
  }
  if ((int)v13 <= 0)
  {
    unsigned int v20 = (char *)this + 16;
    int v21 = (*(unsigned __int8 *)(*((void *)this + 2) + 24) >> 1) & 1;
    goto LABEL_77;
  }
  if (v13 == a3 || (char)a2[v13] >= -64)
  {
    int32_t v17 = (int)a5;
    if (v13 == a5) {
      goto LABEL_32;
    }
    if ((char)a4[v13] >= -64)
    {
      unsigned int v20 = (char *)this + 16;
      int v21 = (*(unsigned __int8 *)(*((void *)this + 2) + 24) >> 1) & 1;
      goto LABEL_35;
    }
  }
  int32_t v17 = v13;
  uint64_t v18 = v13 - 1;
  while (v17 >= 2)
  {
    int v19 = (char)a2[v18];
    --v17;
    --v18;
    if (v19 >= -64) {
      goto LABEL_31;
    }
  }
  int32_t v17 = 0;
LABEL_31:
  puint64_t i = v17;
LABEL_32:
  unsigned int v20 = (char *)this + 16;
  int v21 = (*(unsigned __int8 *)(*((void *)this + 2) + 24) >> 1) & 1;
  LODWORD(v13) = v17;
  if (v17 < 1) {
    goto LABEL_77;
  }
LABEL_35:
  if (v13 == a3) {
    goto LABEL_40;
  }
  int v22 = (char)a2[v13];
  unsigned int v23 = a2[v13];
  if (v22 < 0)
  {
    uint64_t v24 = v13 + 1;
    if (v24 == a3)
    {
LABEL_38:
      unsigned int v23 = 65533;
      goto LABEL_39;
    }
    if (v23 < 0xE0)
    {
      if (v23 < 0xC2) {
        goto LABEL_38;
      }
      int v33 = v23 & 0x1F;
    }
    else
    {
      if (v23 > 0xEF)
      {
        if (v23 > 0xF4) {
          goto LABEL_38;
        }
        unint64_t v39 = a2[v24];
        if (((byte_18CA96AD8[v39 >> 4] >> (v23 + 16)) & 1) == 0) {
          goto LABEL_38;
        }
        uint64_t v24 = v13 + 2;
        if (v13 + 2 == a3) {
          goto LABEL_38;
        }
        unsigned int v32 = a2[v24] ^ 0x80;
        if (v32 > 0x3F) {
          goto LABEL_38;
        }
        LODWORD(v31) = v39 & 0x3F | ((v23 - 240) << 6);
      }
      else
      {
        uint64_t v31 = v22 & 0xF;
        if (((a00000000000000[v31] >> (a2[v24] >> 5)) & 1) == 0) {
          goto LABEL_38;
        }
        unsigned int v32 = a2[v24] & 0x3F;
      }
      LODWORD(v24) = v24 + 1;
      if (v24 == a3) {
        goto LABEL_38;
      }
      int v33 = v32 | (v31 << 6);
    }
    unsigned int v34 = a2[v24] ^ 0x80;
    BOOL v35 = v34 > 0x3F;
    int v36 = v34 | (v33 << 6);
    if (v35) {
      unsigned int v23 = 65533;
    }
    else {
      unsigned int v23 = v36;
    }
  }
LABEL_39:
  if (sub_18C8EF6C8(*((void *)this + 1), v23, v21)) {
    goto LABEL_101;
  }
LABEL_40:
  if (v13 == v7) {
    goto LABEL_77;
  }
  int v25 = (char)a4[v13];
  unsigned int v26 = a4[v13];
  if ((v25 & 0x80000000) == 0) {
    goto LABEL_76;
  }
  uint64_t v27 = v13 + 1;
  if (v27 == v7) {
    goto LABEL_75;
  }
  if (v26 >= 0xE0)
  {
    if (v26 > 0xEF)
    {
      if (v26 > 0xF4) {
        goto LABEL_75;
      }
      unint64_t v40 = a4[v27];
      if (((byte_18CA96AD8[v40 >> 4] >> (v26 + 16)) & 1) == 0) {
        goto LABEL_75;
      }
      uint64_t v27 = v13 + 2;
      if (v13 + 2 == v7) {
        goto LABEL_75;
      }
      unsigned int v29 = a4[v27] ^ 0x80;
      if (v29 > 0x3F) {
        goto LABEL_75;
      }
      LODWORD(v28) = v40 & 0x3F | ((v26 - 240) << 6);
    }
    else
    {
      uint64_t v28 = v25 & 0xF;
      if (((a00000000000000[v28] >> (a4[v27] >> 5)) & 1) == 0) {
        goto LABEL_75;
      }
      unsigned int v29 = a4[v27] & 0x3F;
    }
    LODWORD(v27) = v27 + 1;
    if (v27 != v7)
    {
      int v30 = v29 | (v28 << 6);
      goto LABEL_62;
    }
LABEL_75:
    unsigned int v26 = 65533;
    goto LABEL_76;
  }
  if (v26 < 0xC2) {
    goto LABEL_75;
  }
  int v30 = v26 & 0x1F;
LABEL_62:
  unsigned int v37 = a4[v27] ^ 0x80;
  BOOL v35 = v37 > 0x3F;
  int v38 = v37 | (v30 << 6);
  if (v35) {
    unsigned int v26 = 65533;
  }
  else {
    unsigned int v26 = v38;
  }
LABEL_76:
  uint64_t v41 = *((void *)this + 1);
  while (sub_18C8EF6C8(v41, v26, v21))
  {
LABEL_101:
    uint64_t v63 = --pi;
    UChar32 v64 = a2[v63];
    if ((v64 & 0x80) != 0)
    {
      UChar32 v64 = utf8_prevCharSafeBody(a2, 0, &pi, v64, -3);
      LODWORD(v63) = pi;
    }
    if ((int)v63 < 1) {
      break;
    }
    uint64_t v41 = *((void *)this + 1);
    unsigned int v26 = v64;
  }
LABEL_77:
  long long v42 = *(unsigned __int16 **)v20;
  if ((*(_DWORD *)(*(void *)v20 + 80) & 0x80000000) == 0
    && (a3 == pi || a2[pi] <= 0xC5u)
    && (v7 == pi || a4[pi] <= 0xC5u))
  {
    long long v43 = v42 + 42;
    if (a3 < 0)
    {
      long long v45 = &a4[pi];
      long long v47 = (const unsigned __int16 *)*(unsigned int *)(*(void *)v20 + 80);
      uint64_t v44 = 0xFFFFFFFFLL;
      uint64_t v46 = 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v44 = (a3 - pi);
      long long v45 = &a4[pi];
      uint64_t v46 = (v7 - pi);
      long long v47 = (const unsigned __int16 *)*(unsigned int *)(*(void *)v20 + 80);
    }
    unint64_t v12 = icu::CollationFastLatin::compareUTF8(*(icu::CollationFastLatin **)(*((void *)this + 1) + 88), v43, v47, (uint64_t)&a2[pi], (const unsigned __int8 *)v44, (uint64_t)v45, (const unsigned __int8 *)v46);
    if (v12 != -2)
    {
LABEL_89:
      if (v12) {
        return v12;
      }
      goto LABEL_92;
    }
    long long v42 = *(unsigned __int16 **)v20;
  }
  if ((v42[12] & 1) == 0)
  {
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v120 = 0u;
    long long v119 = 0u;
    long long v118 = 0u;
    long long v117 = 0u;
    long long v116 = 0u;
    long long v115 = 0u;
    long long v114 = 0u;
    long long v113 = 0u;
    long long v112 = 0u;
    long long v111 = 0u;
    long long v110 = 0u;
    long long v109 = 0u;
    long long v108 = 0u;
    long long v107 = 0u;
    long long v106 = 0u;
    long long v48 = (void *)*((void *)this + 1);
    uint64_t v104 = *v48;
    int v105 = v48;
    *((void *)&v106 + 1) = (char *)&v107 + 8;
    LODWORD(v107) = 40;
    DWORD2(v127) = 0;
    DWORD2(v128) = -1;
    BYTE12(v128) = v21;
    int64_t v103 = &unk_1EDA54830;
    *(void *)&long long v129 = a2;
    *((void *)&v129 + 1) = __PAIR64__(a3, pi);
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v84 = 0u;
    long long v83 = 0u;
    long long v82 = 0u;
    long long v81 = 0u;
    long long v80 = 0u;
    long long v79 = 0u;
    long long v78 = 0u;
    long long v77 = 0u;
    long long v76 = 0u;
    long long v75 = 0u;
    long long v74 = 0u;
    long long v73 = 0u;
    long long v72 = 0u;
    long long v71 = 0u;
    uint64_t v69 = 0;
    uint64_t v67 = v104;
    unsigned int v68 = v48;
    int v70 = (const unsigned __int8 *)&v71 + 8;
    LODWORD(v71) = 40;
    DWORD2(v91) = 0;
    DWORD2(v92) = -1;
    BYTE12(v92) = v21;
    int64_t v66 = &unk_1EDA54830;
    uint64_t v93 = a4;
    int32_t v94 = pi;
    int v95 = v7;
    unint64_t v12 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)&v103, (icu::CollationIterator *)&v66, (icu::CollationIterator *)v42, a6, a5);
    icu::UTF8CollationIterator::~UTF8CollationIterator((icu::UTF8CollationIterator *)&v66);
    icu::UTF8CollationIterator::~UTF8CollationIterator((icu::UTF8CollationIterator *)&v103);
    goto LABEL_89;
  }
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  uint64_t v135 = 0;
  long long v120 = 0u;
  long long v119 = 0u;
  long long v118 = 0u;
  long long v117 = 0u;
  long long v116 = 0u;
  long long v115 = 0u;
  long long v114 = 0u;
  long long v113 = 0u;
  long long v112 = 0u;
  long long v111 = 0u;
  long long v110 = 0u;
  long long v109 = 0u;
  long long v108 = 0u;
  long long v107 = 0u;
  long long v106 = 0u;
  long long v49 = (void *)*((void *)this + 1);
  uint64_t v104 = *v49;
  int v105 = v49;
  *((void *)&v106 + 1) = (char *)&v107 + 8;
  LODWORD(v107) = 40;
  DWORD2(v127) = 0;
  DWORD2(v128) = -1;
  BYTE12(v128) = v21;
  *(void *)&long long v129 = a2;
  *((void *)&v129 + 1) = __PAIR64__(a3, pi);
  int64_t v103 = &unk_1EDA547A0;
  DWORD1(v130) = pi;
  *(void *)&long long v131 = v49[6];
  *((void *)&v131 + 1) = &unk_1EDA47700;
  LOWORD(v132) = 2;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t v102 = 0;
  long long v84 = 0u;
  long long v83 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  long long v78 = 0u;
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  long long v71 = 0u;
  uint64_t v69 = 0;
  uint64_t v67 = v104;
  unsigned int v68 = v49;
  int v70 = (const unsigned __int8 *)&v71 + 8;
  LODWORD(v71) = 40;
  DWORD2(v91) = 0;
  DWORD2(v92) = -1;
  BYTE12(v92) = v21;
  uint64_t v93 = a4;
  int32_t v94 = pi;
  int v95 = v7;
  int64_t v66 = &unk_1EDA547A0;
  DWORD1(v96) = pi;
  uint64_t v97 = v131;
  UChar32 v98 = &unk_1EDA47700;
  LOWORD(v99) = 2;
  unint64_t v12 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)&v103, (icu::CollationIterator *)&v66, (icu::CollationIterator *)v42, a6, a5);
  icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)&v66, v50);
  icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)&v103, v51);
  if (v12) {
    return v12;
  }
LABEL_92:
  int v52 = *(_DWORD *)(*(void *)v20 + 24);
  if (v52 >= 61440 && *(int *)a6 <= 0)
  {
    long long v53 = (void *)*((void *)this + 1);
    uint64_t v54 = v53[6];
    int32_t v55 = pi;
    long long v56 = &a2[pi];
    long long v57 = &a4[pi];
    if (a3 <= 0) {
      int32_t v55 = 0;
    }
    int v58 = a3 - v55;
    int v59 = v7 - v55;
    if (v52)
    {
      bzero(&v103, 0x210uLL);
      sub_18C9CE894((uint64_t)&v103, v53, (uint64_t)v56, v58);
      bzero(&v66, 0x210uLL);
      sub_18C9CE894((uint64_t)&v66, *((void **)this + 1), (uint64_t)v57, v59);
      unint64_t v12 = sub_18C9CE564(v54, (uint64_t)&v103, (uint64_t)&v66);
      sub_18C9CE94C((uint64_t)&v66, v60);
      sub_18C9CE94C((uint64_t)&v103, v61);
    }
    else
    {
      uint64_t v104 = 0;
      int v105 = 0;
      *(void *)&long long v106 = 0xFFFFFFFFLL;
      int64_t v103 = &unk_1EDA52558;
      *((void *)&v106 + 1) = v56;
      LODWORD(v107) = 0;
      DWORD1(v107) = v58;
      uint64_t v67 = 0;
      unsigned int v68 = 0;
      uint64_t v69 = 0xFFFFFFFFLL;
      int64_t v66 = &unk_1EDA52558;
      int v70 = v57;
      LODWORD(v71) = 0;
      DWORD1(v71) = v59;
      unint64_t v12 = sub_18C9CE564(v54, (uint64_t)&v103, (uint64_t)&v66);
      icu::UObject::~UObject((icu::UObject *)&v66);
      icu::UObject::~UObject((icu::UObject *)&v103);
    }
  }
  return v12;
}

unint64_t icu::RuleBasedCollator::internalCompareUTF8(icu::RuleBasedCollator *this, const char *a2, int32_t a3, const char *a4, UErrorCode *a5, UErrorCode *a6)
{
  if (*(int *)a6 > 0) {
    return 0;
  }
  int v7 = a5;
  int32_t v9 = a3;
  if (!a2 && a3 || !a4 && a5)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0;
  }
  if (a3 < 0)
  {
    if ((a5 & 0x80000000) == 0) {
      int32_t v9 = strlen(a2);
    }
  }
  else if ((a5 & 0x80000000) != 0)
  {
    int v7 = (UErrorCode *)strlen(a4);
  }

  return icu::RuleBasedCollator::doCompare(this, (const unsigned __int8 *)a2, v9, (const unsigned __int8 *)a4, v7, a6);
}

uint64_t sub_18C9CE564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v6 = sub_18C9D0774(a2);
      uint64_t v7 = sub_18C9D0774(a3);
      if (v6 != v7) {
        break;
      }
      if ((v6 & 0x80000000) != 0) {
        return 0;
      }
    }
    uint64_t v8 = v7;
    if ((v6 & 0x80000000) != 0)
    {
      int v9 = -2;
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_12;
      }
    }
    else if (v6 == 65534)
    {
      int v9 = -1;
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_12;
      }
    }
    else
    {
      int v9 = sub_18C9D07F8(a2, a1, v6);
      if ((v8 & 0x80000000) != 0)
      {
LABEL_12:
        int v10 = -2;
        goto LABEL_14;
      }
    }
    int v10 = v8 == 65534 ? -1 : sub_18C9D07F8(a3, a1, v8);
LABEL_14:
    if (v9 < v10) {
      return 0xFFFFFFFFLL;
    }
    if (v9 > v10) {
      return 1;
    }
  }
}

uint64_t sub_18C9CE64C(uint64_t a1, icu::Normalizer2Impl *this, UChar *src, UChar *a4)
{
  *(_DWORD *)(a1 + 24) = -1;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)a1 = &unk_1EDA52510;
  uint64_t v8 = (icu::UnicodeString *)(a1 + 48);
  *(void *)(a1 + 48) = &unk_1EDA47700;
  *(_WORD *)(a1 + 56) = 2;
  UErrorCode v23 = U_ZERO_ERROR;
  FCD = icu::Normalizer2Impl::makeFCD(this, src, a4, 0, &v23);
  if (v23 <= U_ZERO_ERROR)
  {
    int v10 = FCD;
    if (FCD == a4 || !a4 && !*FCD)
    {
      *(void *)(a1 + 32) = src;
LABEL_26:
      *(void *)(a1 + 40) = v10;
      return a1;
    }
    icu::UnicodeString::unBogus((uint64_t)v8);
    if (*(__int16 *)(a1 + 56) < 0) {
      uint64_t v11 = *(unsigned int *)(a1 + 60);
    }
    else {
      uint64_t v11 = *(unsigned __int16 *)(a1 + 56) >> 5;
    }
    icu::UnicodeString::doReplace((uint64_t)v8, 0, v11, (uint64_t)src, 0, (unint64_t)((char *)v10 - (char *)src) >> 1);
    long long v22 = 0u;
    uint64_t v18 = (UChar *)this;
    int v19 = v8;
    long long v21 = 0u;
    long long v20 = 0u;
    *(void *)((char *)&v21 + 5) = 0;
    unsigned int v12 = *(unsigned __int16 *)(a1 + 56);
    if ((v12 & 0x8000) != 0) {
      int v13 = *(_DWORD *)(a1 + 60);
    }
    else {
      int v13 = v12 >> 5;
    }
    if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v18, v13, &v23)) {
      icu::Normalizer2Impl::makeFCD(this, v10, a4, &v18, &v23);
    }
    if ((void)v20) {
      icu::UnicodeString::releaseBuffer((uint64_t)v19, ((void)v21 - (void)v20) >> 1);
    }
    if (v23 <= U_ZERO_ERROR)
    {
      unsigned int v14 = *(unsigned __int16 *)(a1 + 56);
      if ((v14 & 0x11) != 0)
      {
        uint64_t v15 = 0;
      }
      else if ((v14 & 2) != 0)
      {
        uint64_t v15 = a1 + 58;
      }
      else
      {
        uint64_t v15 = *(void *)(a1 + 72);
      }
      *(void *)(a1 + 32) = v15;
      if ((v14 & 0x8000) != 0) {
        unsigned int v16 = *(_DWORD *)(a1 + 60);
      }
      else {
        unsigned int v16 = v14 >> 5;
      }
      int v10 = (UChar *)(v15 + 2 * (int)v16);
      goto LABEL_26;
    }
  }
  return a1;
}

void sub_18C9CE83C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA52510;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 48));

  icu::UObject::~UObject((icu::UObject *)a1);
}

double sub_18C9CE894(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 24) = 0xFFFFFFFFLL;
  *(void *)a1 = &unk_1EDA525A0;
  *(void *)(a1 + 40) = *a2;
  *(void *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 80;
  *(_DWORD *)(a1 + 72) = 40;
  *(unsigned char *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = -1;
  *(unsigned char *)(a1 + 420) = 0;
  *(void *)(a1 + 424) = a3;
  *(_DWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 436) = a4;
  *(void *)(a1 + 32) = &unk_1EDA547A0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 456) = a2[6];
  *(void *)(a1 + 464) = &unk_1EDA47700;
  *(_WORD *)(a1 + 472) = 2;
  return result;
}

void sub_18C9CE94C(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA525A0;
  icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)(a1 + 32), a2);

  icu::UObject::~UObject((icu::UObject *)a1);
}

unint64_t icu::RuleBasedCollator::compare(icu::RuleBasedCollator *this, UCharIterator *a2, UCharIterator *a3, UErrorCode *a4)
{
  unint64_t v4 = 0;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (a2 != a3 && *(int *)a4 <= 0)
  {
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 24);
    int v10 = ((uint64_t (*)(UCharIterator *))a2->next)(a2);
    int v11 = ((uint64_t (*)(UCharIterator *))a3->next)(a3);
    if (v10 == v11)
    {
      LODWORD(v13) = 0;
      do
      {
        if (v10 < 0) {
          return 0;
        }
        uint64_t v13 = (v13 + 1);
        int v10 = ((uint64_t (*)(UCharIterator *))a2->next)(a2);
        int v14 = ((uint64_t (*)(UCharIterator *))a3->next)(a3);
      }
      while (v10 == v14);
      int v15 = v14;
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_10;
      }
    }
    else
    {
      int v15 = v11;
      uint64_t v13 = 0;
      if ((v10 & 0x80000000) == 0) {
LABEL_10:
      }
        ((void (*)(UCharIterator *))a2->previous)(a2);
    }
    if ((v15 & 0x80000000) == 0) {
      ((void (*)(UCharIterator *))a3->previous)(a3);
    }
    int v16 = (v9 >> 1) & 1;
    if (v13)
    {
      if ((v10 & 0x80000000) == 0 && sub_18C8EF6C8(*((void *)this + 1), v10, v16)) {
        goto LABEL_20;
      }
      if ((v15 & 0x80000000) == 0)
      {
        uint64_t v17 = *((void *)this + 1);
        for (int i = v15; sub_18C8EF6C8(v17, i, v16); int i = v19)
        {
LABEL_20:
          int v19 = ((uint64_t (*)(UCharIterator *))a2->previous)(a2);
          ((void (*)(UCharIterator *))a3->previous)(a3);
          if ((int)v13 < 2)
          {
            uint64_t v13 = 0;
            break;
          }
          uint64_t v13 = (v13 - 1);
          uint64_t v17 = *((void *)this + 1);
        }
      }
    }
    long long v20 = (icu::CollationIterator *)*((void *)this + 2);
    if (*((unsigned char *)v20 + 24))
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v84 = 0u;
      long long v83 = 0u;
      long long v82 = 0u;
      long long v81 = 0u;
      long long v80 = 0u;
      long long v79 = 0u;
      long long v78 = 0u;
      long long v77 = 0u;
      long long v76 = 0u;
      long long v75 = 0u;
      long long v74 = 0u;
      long long v73 = 0u;
      long long v72 = 0u;
      long long v71 = 0u;
      long long v70 = 0u;
      long long v22 = (void *)*((void *)this + 1);
      uint64_t v68 = *v22;
      uint64_t v69 = v22;
      *((void *)&v70 + 1) = (char *)&v71 + 8;
      LODWORD(v71) = 40;
      DWORD2(v91) = 0;
      DWORD2(v92) = -1;
      BYTE12(v92) = v16;
      *(void *)&long long v93 = a2;
      uint64_t v67 = &unk_1EDA54230;
      HIDWORD(v93) = v13;
      *((void *)&v94 + 1) = v22[6];
      *(void *)&long long v95 = &unk_1EDA47700;
      WORD4(v95) = 2;
      long long v65 = 0u;
      long long v66 = 0u;
      uint64_t v63 = 2;
      long long v64 = 0u;
      int v58 = 0;
      uint64_t v60 = 0;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      long long v47 = 0u;
      long long v46 = 0u;
      long long v45 = 0u;
      long long v44 = 0u;
      long long v43 = 0u;
      long long v42 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      uint64_t v33 = 0;
      uint64_t v31 = v68;
      unsigned int v32 = v22;
      unsigned int v34 = (UCharIterator *)((char *)&v35 + 8);
      LODWORD(v35) = 40;
      DWORD2(v55) = 0;
      DWORD2(v56) = -1;
      BYTE12(v56) = v16;
      long long v57 = a3;
      int v30 = &unk_1EDA54230;
      int v59 = v13;
      uint64_t v61 = *((void *)&v94 + 1);
      long long v62 = &unk_1EDA47700;
      unint64_t v4 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)&v67, (icu::CollationIterator *)&v30, v20, a4, v12);
      icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)&v30, v23);
      icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)&v67, v24);
      if (v4) {
        return v4;
      }
    }
    else
    {
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v84 = 0u;
      long long v83 = 0u;
      long long v82 = 0u;
      long long v81 = 0u;
      long long v80 = 0u;
      long long v79 = 0u;
      long long v78 = 0u;
      long long v77 = 0u;
      long long v76 = 0u;
      long long v75 = 0u;
      long long v74 = 0u;
      long long v73 = 0u;
      long long v72 = 0u;
      long long v71 = 0u;
      long long v70 = 0u;
      long long v21 = (void *)*((void *)this + 1);
      uint64_t v68 = *v21;
      uint64_t v69 = v21;
      *((void *)&v70 + 1) = (char *)&v71 + 8;
      LODWORD(v71) = 40;
      DWORD2(v91) = 0;
      DWORD2(v92) = -1;
      BYTE12(v92) = v16;
      uint64_t v67 = &unk_1EDA542C0;
      *(void *)&long long v93 = a2;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      long long v47 = 0u;
      long long v46 = 0u;
      long long v45 = 0u;
      long long v44 = 0u;
      long long v43 = 0u;
      long long v42 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      uint64_t v33 = 0;
      uint64_t v31 = v68;
      unsigned int v32 = v21;
      unsigned int v34 = (UCharIterator *)((char *)&v35 + 8);
      LODWORD(v35) = 40;
      DWORD2(v55) = 0;
      DWORD2(v56) = -1;
      BYTE12(v56) = v16;
      int v30 = &unk_1EDA542C0;
      long long v57 = a3;
      unint64_t v4 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)&v67, (icu::CollationIterator *)&v30, v20, a4, v12);
      icu::UIterCollationIterator::~UIterCollationIterator((icu::UIterCollationIterator *)&v30);
      icu::UIterCollationIterator::~UIterCollationIterator((icu::UIterCollationIterator *)&v67);
      if (v4) {
        return v4;
      }
    }
    if (*(int *)(*((void *)this + 2) + 24) >= 61440 && *(int *)a4 <= 0)
    {
      ((void (*)(UCharIterator *, uint64_t, uint64_t))a2->move)(a2, v13, 3);
      ((void (*)(UCharIterator *, uint64_t, uint64_t))a3->move)(a3, v13, 3);
      int v25 = (void *)*((void *)this + 1);
      uint64_t v26 = v25[6];
      if (*(unsigned char *)(*((void *)this + 2) + 24))
      {
        bzero(&v67, 0x208uLL);
        sub_18C9CF04C((uint64_t)&v67, v25, (uint64_t)a2, v13);
        bzero(&v30, 0x208uLL);
        sub_18C9CF04C((uint64_t)&v30, *((void **)this + 1), (uint64_t)a3, v13);
        unint64_t v4 = sub_18C9CE564(v26, (uint64_t)&v67, (uint64_t)&v30);
        sub_18C9CF100((uint64_t)&v30, v27);
        sub_18C9CF100((uint64_t)&v67, v28);
      }
      else
      {
        uint64_t v69 = 0;
        uint64_t v68 = 0;
        *(void *)&long long v70 = 0xFFFFFFFFLL;
        uint64_t v67 = &unk_1EDA525E8;
        *((void *)&v70 + 1) = a2;
        uint64_t v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0xFFFFFFFFLL;
        int v30 = &unk_1EDA525E8;
        unsigned int v34 = a3;
        unint64_t v4 = sub_18C9CE564(v26, (uint64_t)&v67, (uint64_t)&v30);
        icu::UObject::~UObject((icu::UObject *)&v30);
        icu::UObject::~UObject((icu::UObject *)&v67);
      }
    }
  }
  return v4;
}

uint64_t sub_18C9CEFBC(uint64_t result, void *a2, char a3, uint64_t a4, int a5)
{
  *(void *)(result + 8) = *a2;
  *(void *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = result + 48;
  *(_DWORD *)(result + 40) = 40;
  *(unsigned char *)(result + 44) = 0;
  *(_DWORD *)(result + 368) = 0;
  *(void *)(result + 376) = 0;
  *(_DWORD *)(result + 384) = -1;
  *(unsigned char *)(result + 388) = a3;
  *(void *)(result + 392) = a4;
  *(void *)double result = &unk_1EDA54230;
  *(_DWORD *)(result + 400) = 0;
  *(_DWORD *)(result + 404) = a5;
  *(void *)(result + 416) = a2[6];
  *(void *)(result + 424) = &unk_1EDA47700;
  *(_WORD *)(result + 432) = 2;
  return result;
}

double sub_18C9CF04C(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 24) = 0xFFFFFFFFLL;
  *(void *)a1 = &unk_1EDA52630;
  *(void *)(a1 + 40) = *a2;
  *(void *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 80;
  *(_DWORD *)(a1 + 72) = 40;
  *(unsigned char *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = -1;
  *(unsigned char *)(a1 + 420) = 0;
  *(void *)(a1 + 424) = a3;
  *(void *)(a1 + 32) = &unk_1EDA54230;
  *(_DWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 436) = a4;
  *(void *)(a1 + 448) = a2[6];
  *(void *)(a1 + 456) = &unk_1EDA47700;
  *(_WORD *)(a1 + 464) = 2;
  return result;
}

void sub_18C9CF100(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA52630;
  icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)(a1 + 32), a2);

  icu::UObject::~UObject((icu::UObject *)a1);
}

icu::CollationKey *icu::RuleBasedCollator::getCollationKey(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, icu::CollationKey *a3, UErrorCode *a4)
{
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x11) != 0)
  {
    uint64_t v7 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    uint64_t v7 = (UChar *)((char *)a2 + 10);
  }
  else
  {
    uint64_t v7 = (UChar *)*((void *)a2 + 3);
  }
  int v8 = (__int16)v6;
  int v9 = v6 >> 5;
  if (v8 >= 0) {
    int v10 = v9;
  }
  else {
    int v10 = *((_DWORD *)a2 + 3);
  }
  return icu::RuleBasedCollator::getCollationKey((uint64_t)this, v7, v10, a3, a4);
}

icu::CollationKey *icu::RuleBasedCollator::getCollationKey(uint64_t a1, UChar *a2, int a3, icu::CollationKey *this, UErrorCode *a5)
{
  if (*(int *)a5 >= 1)
  {
LABEL_5:
    return (icu::CollationKey *)icu::CollationKey::setToBogus((uint64_t)this);
  }
  if (!a2 && a3)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_5;
  }
  icu::CollationKey::reset((uint64_t)this);
  uint64_t v18 = 0;
  int v19 = this;
  int v11 = *((_DWORD *)this + 2);
  BOOL v12 = v11 < 0;
  if (v11 < 0) {
    uint64_t v13 = (char *)*((void *)this + 2);
  }
  else {
    uint64_t v13 = (char *)this + 16;
  }
  if (v12) {
    int v14 = *((_DWORD *)this + 6);
  }
  else {
    int v14 = 32;
  }
  v15[1] = v13;
  int v16 = v14;
  int v17 = 0;
  v15[0] = &unk_1EDA52450;
  icu::RuleBasedCollator::writeSortKey(a1, a2, a3, v15, a5);
  if (*(int *)a5 < 1)
  {
    if (*((_DWORD *)this + 3) == 2) {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
    }
    else {
      icu::CollationKey::setLength((uint64_t)this, v17);
    }
  }
  else
  {
    icu::CollationKey::setToBogus((uint64_t)this);
  }
  icu::ByteSink::~ByteSink((icu::ByteSink *)v15);
  return this;
}

void icu::RuleBasedCollator::writeSortKey(uint64_t a1, UChar *a2, int a3, _DWORD *a4, UErrorCode *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    if (a3 < 0) {
      int v9 = 0;
    }
    else {
      int v9 = &a2[a3];
    }
    uint64_t v10 = *(void *)(a1 + 16);
    unsigned int v11 = *(_DWORD *)(v10 + 24);
    int v12 = (v11 >> 1) & 1;
    int v15 = &unk_1EDA49F28;
    if (v11)
    {
      bzero(v16, 0x210uLL);
      sub_18C8DD888((uint64_t)v16, *(void **)(a1 + 8), v12, (uint64_t)a2, (uint64_t)a2, (uint64_t)v9);
      icu::CollationKeys::writeSortKeyUpToQuaternary((icu::CollationIterator::CEBuffer *)v16, *(void *)(*(void *)(a1 + 8) + 72), *(void *)(a1 + 16), a4, 1, (uint64_t)&v15, 1, a5);
      icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)v16, v14);
    }
    else
    {
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      memset(v18, 0, sizeof(v18));
      uint64_t v13 = *(void **)(a1 + 8);
      v16[1] = *v13;
      _OWORD v16[2] = v13;
      *((void *)&v17 + 1) = (char *)v18 + 8;
      LODWORD(v18[0]) = 40;
      DWORD2(v19) = 0;
      DWORD2(v20) = -1;
      BYTE12(v20) = (v11 & 2) != 0;
      v16[0] = &unk_1EDA54650;
      long long v21 = a2;
      long long v22 = a2;
      UErrorCode v23 = v9;
      icu::CollationKeys::writeSortKeyUpToQuaternary((icu::CollationIterator::CEBuffer *)v16, v13[9], v10, a4, 1, (uint64_t)&v15, 1, a5);
      icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)v16);
    }
    if ((*(_DWORD *)(*(void *)(a1 + 16) + 24) & 0xFFFFF000) == 0xF000) {
      icu::RuleBasedCollator::writeIdenticalLevel(a1, a2, v9, a4, a5);
    }
    (*(void (**)(_DWORD *, void *, uint64_t))(*(void *)a4 + 16))(a4, &unk_18CA96AE9, 1);
    icu::CollationKeys::LevelCallback::~LevelCallback((icu::CollationKeys::LevelCallback *)&v15);
  }
}

uint64_t icu::RuleBasedCollator::getSortKey(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, char *a3, int a4)
{
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x11) != 0)
  {
    uint64_t v7 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    uint64_t v7 = (UChar *)((char *)a2 + 10);
  }
  else
  {
    uint64_t v7 = (UChar *)*((void *)a2 + 3);
  }
  int v8 = (__int16)v6;
  int v9 = v6 >> 5;
  if (v8 >= 0) {
    int v10 = v9;
  }
  else {
    int v10 = *((_DWORD *)a2 + 3);
  }
  return icu::RuleBasedCollator::getSortKey((uint64_t)this, v7, v10, a3, a4);
}

uint64_t icu::RuleBasedCollator::getSortKey(uint64_t a1, UChar *a2, int a3, char *a4, int a5)
{
  uint64_t v5 = 0;
  if (a3) {
    BOOL v6 = a2 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6 && (a5 & 0x80000000) == 0)
  {
    if (a4 || !a5)
    {
      char v15 = 0;
      if (a4) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = &v15;
      }
      if (a4) {
        int v8 = a5;
      }
      else {
        int v8 = 0;
      }
      uint64_t v14 = 0;
      int v12 = v8;
      unsigned int v13 = 0;
      v11[0] = &unk_1EDA52678;
      v11[1] = v7;
      UErrorCode v10 = U_ZERO_ERROR;
      icu::RuleBasedCollator::writeSortKey(a1, a2, a3, v11, &v10);
      if (v10 <= U_ZERO_ERROR) {
        uint64_t v5 = v13;
      }
      else {
        uint64_t v5 = 0;
      }
      icu::ByteSink::~ByteSink((icu::ByteSink *)v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

UChar *icu::RuleBasedCollator::writeIdenticalLevel(uint64_t a1, UChar *a2, UChar *a3, _DWORD *a4, UErrorCode *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  double result = icu::Normalizer2Impl::decompose(*(void *)(*(void *)(a1 + 8) + 48), a2, a3, 0, a5);
  if (*(int *)a5 > 0) {
    return result;
  }
  unsigned int v11 = result;
  double result = (UChar *)sub_18C8F08E0(a4, 1);
  if (v11 == a2)
  {
    uint64_t v12 = 0;
    if (a3) {
      goto LABEL_4;
    }
LABEL_7:
    if (!*v11) {
      return result;
    }
    LODWORD(v13) = -1;
    goto LABEL_9;
  }
  double result = (UChar *)sub_18C8D1108(0, (uint64_t)a2, (unint64_t)((char *)v11 - (char *)a2) >> 1, (uint64_t)a4);
  uint64_t v12 = (uint64_t)result;
  if (!a3) {
    goto LABEL_7;
  }
LABEL_4:
  if (v11 == a3) {
    return result;
  }
  unint64_t v13 = (unint64_t)((char *)a3 - (char *)v11) >> 1;
LABEL_9:
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v21 = 0;
  long long v20 = 0u;
  long long v17 = &unk_1EDA47700;
  LOWORD(v18) = 2;
  icu::Normalizer2Impl::decompose(*(UChar **)(*(void *)(a1 + 8) + 48), v11, a3, (icu::UnicodeString *)&v17, v13, a5);
  uint64_t v14 = 0;
  if ((v18 & 0x11) == 0)
  {
    if ((v18 & 2) != 0) {
      uint64_t v14 = (char *)&v18 + 2;
    }
    else {
      uint64_t v14 = (char *)v19;
    }
  }
  if ((v18 & 0x8000u) == 0) {
    int v15 = (unsigned __int16)v18 >> 5;
  }
  else {
    int v15 = DWORD1(v18);
  }
  sub_18C8D1108(v12, (uint64_t)v14, v15, (uint64_t)a4);
  return (UChar *)icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v17);
}

uint64_t icu::RuleBasedCollator::internalNextSortKeyPart(icu::RuleBasedCollator *this, UCharIterator *a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 <= 0)
  {
    if (!a2 || !a3 || (uint64_t v10 = a5, (a5 & 0x80000000) != 0) || !a4 && a5)
    {
      uint64_t v6 = 0;
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
      return v6;
    }
    if (a5)
    {
      uint64_t v31 = 0;
      int v29 = a5;
      int v30 = 0;
      v28[0] = &unk_1EDA52678;
      v28[1] = a4;
      LODWORD(v31) = a3[1];
      ((void (*)(UCharIterator *, void, void))a2->move)(a2, 0, 0);
      int v14 = *a3;
      if ((int)*a3 <= 5)
      {
        uint64_t v15 = *((void *)this + 2);
        int v16 = *(_DWORD *)(v15 + 24);
        v26[0] = &unk_1EDA526D8;
        v26[1] = v28;
        LODWORD(v27) = 1;
        HIDWORD(v27) = v29 + v31 - v30;
        if (v16)
        {
          uint64_t v33 = 0;
          memset(v32, 0, sizeof(v32));
          sub_18C9CEFBC((uint64_t)v32, *((void **)this + 1), (v16 & 2) != 0, (uint64_t)a2, 0);
          icu::CollationKeys::writeSortKeyUpToQuaternary((icu::CollationIterator::CEBuffer *)v32, *(void *)(*((void *)this + 1) + 72), *((void *)this + 2), v28, v14, (uint64_t)v26, 0, a6);
          icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)v32, v18);
        }
        else
        {
          memset((char *)&v32[2] + 8, 0, 352);
          *(_OWORD *)((char *)&v32[1] + 8) = 0u;
          long long v17 = (void *)*((void *)this + 1);
          *((void *)&v32[0] + 1) = *v17;
          *(void *)&v32[1] = v17;
          *(void *)&v32[2] = &v32[3];
          DWORD2(v32[2]) = 40;
          LODWORD(v32[23]) = 0;
          LODWORD(v32[24]) = -1;
          BYTE4(v32[24]) = (v16 & 2) != 0;
          *(void *)&v32[0] = &unk_1EDA542C0;
          *((void *)&v32[24] + 1) = a2;
          icu::CollationKeys::writeSortKeyUpToQuaternary((icu::CollationIterator::CEBuffer *)v32, v17[9], v15, v28, v14, (uint64_t)v26, 0, a6);
          icu::UIterCollationIterator::~UIterCollationIterator((icu::UIterCollationIterator *)v32);
        }
        if (*(int *)a6 > 0)
        {
          uint64_t v10 = 0;
LABEL_19:
          icu::CollationKeys::LevelCallback::~LevelCallback((icu::CollationKeys::LevelCallback *)v26);
LABEL_39:
          uint64_t v6 = v10;
LABEL_43:
          icu::ByteSink::~ByteSink((icu::ByteSink *)v28);
          return v6;
        }
        if (v30 > (int)v10)
        {
          *(void *)a3 = v27;
          goto LABEL_19;
        }
        if ((*(_DWORD *)(*((void *)this + 2) + 24) & 0xFFFFF000) == 0xF000)
        {
          ((void (*)(UCharIterator *, void, void))a2->move)(a2, 0, 0);
          int v14 = 6;
        }
        icu::CollationKeys::LevelCallback::~LevelCallback((icu::CollationKeys::LevelCallback *)v26);
      }
      if (v14 == 6)
      {
        int v20 = v30;
        int v19 = v31;
        int v21 = v29;
        memset((char *)v32 + 8, 0, 56);
        *(void *)&v32[0] = &unk_1EDA47700;
        WORD4(v32[0]) = 2;
        while (1)
        {
          int v22 = ((uint64_t (*)(UCharIterator *))a2->next)(a2);
          if (v22 < 0) {
            break;
          }
          LOWORD(v26[0]) = v22;
          icu::UnicodeString::doAppend((uint64_t)v32, (uint64_t)v26, 0, 1);
        }
        if ((BYTE8(v32[0]) & 0x11) != 0)
        {
          UErrorCode v23 = 0;
        }
        else if ((BYTE8(v32[0]) & 2) != 0)
        {
          UErrorCode v23 = (UChar *)v32 + 5;
        }
        else
        {
          UErrorCode v23 = (UChar *)*((void *)&v32[1] + 1);
        }
        int v24 = WORD4(v32[0]) >> 5;
        if (SWORD4(v32[0]) < 0) {
          int v24 = HIDWORD(v32[0]);
        }
        icu::RuleBasedCollator::writeIdenticalLevel((uint64_t)this, v23, &v23[v24], v28, a6);
        unint64_t v25 = *(unsigned int *)a6;
        if ((int)v25 > 0)
        {
          uint64_t v10 = 0;
LABEL_38:
          icu::UnicodeString::~UnicodeString((void *)v25, (icu::UnicodeString *)v32);
          goto LABEL_39;
        }
        if (v30 > (int)v10)
        {
          unint64_t v25 = (v21 + v19 - v20);
          *a3 = 6;
          a3[1] = v25;
          goto LABEL_38;
        }
        icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)v32);
      }
      *(void *)a3 = 7;
      uint64_t v6 = v30;
      if (v30 < (int)v10) {
        bzero(&a4[v30], (~v30 + v10) + 1);
      }
      goto LABEL_43;
    }
  }
  return 0;
}

void icu::RuleBasedCollator::internalGetCEs(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, icu::UVector64 *a3, UErrorCode *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return;
  }
  unsigned int v7 = *((unsigned __int16 *)a2 + 4);
  if ((v7 & 0x11) != 0)
  {
    int v8 = 0;
  }
  else if ((v7 & 2) != 0)
  {
    int v8 = (char *)a2 + 10;
  }
  else
  {
    int v8 = (char *)*((void *)a2 + 3);
  }
  int v9 = (__int16)v7;
  unsigned int v10 = v7 >> 5;
  if (v9 < 0) {
    unsigned int v10 = *((_DWORD *)a2 + 3);
  }
  uint64_t v11 = (uint64_t)&v8[2 * v10];
  unsigned int v12 = *(_DWORD *)(*((void *)this + 2) + 24);
  int v13 = (v12 >> 1) & 1;
  if (v12)
  {
    bzero(v26, 0x210uLL);
    sub_18C8DD888((uint64_t)v26, *((void **)this + 1), v13, (uint64_t)v8, (uint64_t)v8, v11);
    unint64_t v20 = sub_18C8DCA60((icu::CollationIterator::CEBuffer *)v26, a4);
    if (v20 == 0x101000100)
    {
LABEL_33:
      icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)v26, v21);
      return;
    }
    unint64_t v22 = v20;
    while (1)
    {
      int v23 = *((_DWORD *)a3 + 2);
      int v24 = v23 + 1;
      if (v23 >= -1 && *((_DWORD *)a3 + 3) > v23) {
        goto LABEL_31;
      }
      if (icu::UVector64::expandCapacity(a3, v24, a4)) {
        break;
      }
LABEL_32:
      unint64_t v22 = sub_18C8DCA60((icu::CollationIterator::CEBuffer *)v26, a4);
      if (v22 == 0x101000100) {
        goto LABEL_33;
      }
    }
    int v23 = *((_DWORD *)a3 + 2);
    int v24 = v23 + 1;
LABEL_31:
    *(void *)(*((void *)a3 + 3) + 8 * v23) = v22;
    *((_DWORD *)a3 + 2) = v24;
    goto LABEL_32;
  }
  long long v29 = 0u;
  long long v30 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v27 = 0u;
  int v14 = (void *)*((void *)this + 1);
  v26[1] = *v14;
  void v26[2] = v14;
  *((void *)&v27 + 1) = (char *)v28 + 8;
  LODWORD(v28[0]) = 40;
  DWORD2(v29) = 0;
  DWORD2(v30) = -1;
  BYTE12(v30) = (v12 & 2) != 0;
  v26[0] = &unk_1EDA54650;
  uint64_t v31 = v8;
  unsigned int v32 = v8;
  uint64_t v33 = v11;
  unint64_t v15 = sub_18C8DCA60((icu::CollationIterator::CEBuffer *)v26, a4);
  if (v15 != 0x101000100)
  {
    unint64_t v16 = v15;
    while (1)
    {
      int v17 = *((_DWORD *)a3 + 2);
      int v18 = v17 + 1;
      if (v17 >= -1 && *((_DWORD *)a3 + 3) > v17) {
        goto LABEL_19;
      }
      if (icu::UVector64::expandCapacity(a3, v18, a4)) {
        break;
      }
LABEL_20:
      unint64_t v16 = sub_18C8DCA60((icu::CollationIterator::CEBuffer *)v26, a4);
      if (v16 == 0x101000100) {
        goto LABEL_21;
      }
    }
    int v17 = *((_DWORD *)a3 + 2);
    int v18 = v17 + 1;
LABEL_19:
    *(void *)(*((void *)a3 + 3) + 8 * v17) = v16;
    *((_DWORD *)a3 + 2) = v18;
    goto LABEL_20;
  }
LABEL_21:
  icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)v26);
}

uint64_t icu::RuleBasedCollator::internalGetShortDefinitionString(icu::RuleBasedCollator *this, const char *a2, char *a3, int a4, UErrorCode *a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 > 0) {
    return 0;
  }
  unsigned int v10 = a2;
  if (a3)
  {
    if ((a4 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v5 = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v5;
  }
  if (a4) {
    goto LABEL_10;
  }
LABEL_6:
  if (!a2)
  {
    if (*((unsigned char *)this + 256))
    {
      unsigned int v10 = 0;
    }
    else if (**((unsigned char **)this + 10))
    {
      unsigned int v10 = (const char *)*((void *)this + 10);
    }
    else
    {
      unsigned int v10 = "root";
    }
  }
  long long v43 = 0u;
  memset(v44, 0, sizeof(v44));
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)long long __s = 0u;
  int FunctionalEquivalent = ucol_getFunctionalEquivalent((uint64_t)__s, 157, (uint64_t)"collation", (uint64_t)v10, 0, (int *)a5);
  if (*(int *)a5 > 0) {
    return 0;
  }
  if (FunctionalEquivalent) {
    __s[FunctionalEquivalent] = 0;
  }
  else {
    strcpy(__s, "root");
  }
  memset(&v35[1], 0, 56);
  v35[0] = (char *)&v35[1] + 5;
  LODWORD(v35[1]) = 40;
  int v34 = 0;
  memset(v33, 0, sizeof(v33));
  int v13 = *((_DWORD *)this + 66);
  if ((v13 & 2) != 0)
  {
    if ((*(_DWORD *)(*((void *)this + 2) + 24) & 0xC) != 0) {
      int v14 = 20;
    }
    else {
      int v14 = 21;
    }
    sub_18C9D0384((icu::CharString *)v35, 65, v14, a5);
    int v13 = *((_DWORD *)this + 66);
    if ((v13 & 4) == 0)
    {
LABEL_20:
      if ((v13 & 0x80) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }
  else if ((v13 & 4) == 0)
  {
    goto LABEL_20;
  }
  if (*(int *)a5 <= 0)
  {
    int v16 = *(_DWORD *)(*((void *)this + 2) + 24);
    if ((v16 & 0x300) == 0x200) {
      int v17 = 24;
    }
    else {
      int v17 = 25;
    }
    if ((v16 & 0x300) != 0) {
      int v15 = v17;
    }
    else {
      int v15 = 16;
    }
  }
  else
  {
    int v15 = -1;
  }
  sub_18C9D0384((icu::CharString *)v35, 67, v15, a5);
  int v13 = *((_DWORD *)this + 66);
  if ((v13 & 0x80) == 0)
  {
LABEL_21:
    if ((v13 & 8) == 0) {
      goto LABEL_22;
    }
LABEL_43:
    if (*(int *)a5 <= 0)
    {
      if ((*(unsigned char *)(*((void *)this + 2) + 25) & 4) != 0) {
        int v19 = 17;
      }
      else {
        int v19 = 16;
      }
    }
    else
    {
      int v19 = -1;
    }
    sub_18C9D0384((icu::CharString *)v35, 69, v19, a5);
    if ((*((_DWORD *)this + 66) & 1) == 0) {
      goto LABEL_55;
    }
    goto LABEL_49;
  }
LABEL_37:
  if (*(int *)a5 <= 0)
  {
    if ((*(unsigned char *)(*((void *)this + 2) + 24) & 2) != 0) {
      int v18 = 17;
    }
    else {
      int v18 = 16;
    }
  }
  else
  {
    int v18 = -1;
  }
  sub_18C9D0384((icu::CharString *)v35, 68, v18, a5);
  int v13 = *((_DWORD *)this + 66);
  if ((v13 & 8) != 0) {
    goto LABEL_43;
  }
LABEL_22:
  if (v13)
  {
LABEL_49:
    if (*(int *)a5 <= 0)
    {
      if ((*(unsigned char *)(*((void *)this + 2) + 25) & 8) != 0) {
        int v20 = 17;
      }
      else {
        int v20 = 16;
      }
    }
    else
    {
      int v20 = -1;
    }
    sub_18C9D0384((icu::CharString *)v35, 70, v20, a5);
  }
LABEL_55:
  memset(v31, 0, sizeof(v31));
  *(void *)unsigned int v32 = 0;
  v29[1] = 0;
  *(void *)long long v30 = (char *)v31 + 5;
  LODWORD(v31[0]) = 40;
  v29[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v29, (uint64_t)v30);
  ulocimp_getKeywordValue(__s, "collation", (uint64_t)v29, (int *)a5);
  sub_18C9D0420((icu::CharString *)v35, 75, *(char **)v30, v32[0], a5);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v29);
  if (BYTE4(v31[0])) {
    uprv_free(*(void **)v30);
  }
  unsigned int Language = uloc_getLanguage((uint64_t)__s, (char *)v33, 100, (int *)a5);
  if (Language)
  {
    int v22 = Language;
    int v23 = (char *)v33;
  }
  else
  {
    int v23 = "root";
    int v22 = 4;
  }
  sub_18C9D0420((icu::CharString *)v35, 76, v23, v22, a5);
  if ((*((unsigned char *)this + 264) & 0x10) != 0)
  {
    if (*(int *)a5 <= 0) {
      int v24 = *(_DWORD *)(*((void *)this + 2) + 24) & 1 | 0x10;
    }
    else {
      int v24 = -1;
    }
    sub_18C9D0384((icu::CharString *)v35, 78, v24, a5);
  }
  int Country = uloc_getCountry((uint64_t)__s, (char *)v33, 100, (int *)a5);
  sub_18C9D0420((icu::CharString *)v35, 82, (char *)v33, Country, a5);
  if ((*((unsigned char *)this + 264) & 0x20) != 0)
  {
    if (*(int *)a5 <= 0) {
      int v26 = *(int *)(*((void *)this + 2) + 24) >> 12;
    }
    else {
      int v26 = -1;
    }
    sub_18C9D0384((icu::CharString *)v35, 83, v26, a5);
  }
  int Variant = uloc_getVariant(__s, (char *)v33, 100, (int *)a5);
  sub_18C9D0420((icu::CharString *)v35, 86, (char *)v33, Variant, a5);
  int Script = uloc_getScript((uint64_t)__s, (char *)v33, 100, (int *)a5);
  sub_18C9D0420((icu::CharString *)v35, 90, (char *)v33, Script, a5);
  if (*(int *)a5 <= 0) {
    uint64_t v5 = icu::CharString::extract(v35, a3, a4, a5);
  }
  else {
    uint64_t v5 = 0;
  }
  if (BYTE4(v35[1])) {
    uprv_free(v35[0]);
  }
  return v5;
}

icu::CharString *sub_18C9D0384(icu::CharString *this, char a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    unsigned int v7 = this;
    if (*((_DWORD *)this + 14)) {
      icu::CharString::append(this, 95, a4);
    }
    icu::CharString::append(v7, a2, a4);
    char v8 = a1234IxoSnLu[a3];
    return icu::CharString::append(v7, v8, a4);
  }
  return this;
}

icu::CharString *sub_18C9D0420(icu::CharString *this, char a2, char *a3, int a4, UErrorCode *a5)
{
  if (a4 && *(int *)a5 <= 0)
  {
    LODWORD(v6) = a4;
    int v9 = this;
    if (*((_DWORD *)this + 14)) {
      icu::CharString::append(this, 95, a5);
    }
    this = icu::CharString::append(v9, a2, a5);
    if ((int)v6 >= 1)
    {
      uint64_t v6 = v6;
      do
      {
        int v10 = *a3++;
        char v11 = uprv_toupper(v10);
        this = icu::CharString::append(v9, v11, a5);
        --v6;
      }
      while (v6);
    }
  }
  return this;
}

uint64_t icu::RuleBasedCollator::isUnsafe(icu::RuleBasedCollator *this, int a2)
{
  return sub_18C8EF6C8(*((void *)this + 1), a2, (*(unsigned __int8 *)(*((void *)this + 2) + 24) >> 1) & 1);
}

int32x2_t *icu::RuleBasedCollator::computeMaxExpansions(icu::CollationElementIterator **this, const icu::CollationTailoring *a2, UErrorCode *a3)
{
  double result = icu::CollationElementIterator::computeMaxExpansions(this[3], a2, a3);
  this[48] = (icu::CollationElementIterator *)result;
  return result;
}

BOOL icu::RuleBasedCollator::initMaxExpansions(icu::RuleBasedCollator *this, UErrorCode *a2)
{
  return *a2 < U_ILLEGAL_ARGUMENT_ERROR;
}

icu::CollationElementIterator *icu::RuleBasedCollator::createCollationElementIterator(icu::RuleBasedCollator *this, UChar **a2)
{
  UErrorCode v7 = U_ZERO_ERROR;
  sub_18C7EFEB0((unsigned int *)(*((void *)this + 3) + 392), (void (*)(uint64_t, int *))icu::RuleBasedCollator::computeMaxExpansions, *((void *)this + 3), (int *)&v7);
  if (v7 > U_ZERO_ERROR) {
    return 0;
  }
  double result = (icu::CollationElementIterator *)icu::UMemory::operator new((uint64_t *)v7, (icu::UMemory *)0x68, v4);
  if (result)
  {
    double result = icu::CollationElementIterator::CollationElementIterator(result, a2, this, &v7);
    if (v7 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      icu::CollationElementIterator::~CollationElementIterator(result);
      icu::UMemory::operator delete(v6);
      return 0;
    }
  }
  return result;
}

icu::CollationElementIterator *icu::RuleBasedCollator::createCollationElementIterator(icu::RuleBasedCollator *this, const icu::CharacterIterator *a2)
{
  UErrorCode v7 = U_ZERO_ERROR;
  sub_18C7EFEB0((unsigned int *)(*((void *)this + 3) + 392), (void (*)(uint64_t, int *))icu::RuleBasedCollator::computeMaxExpansions, *((void *)this + 3), (int *)&v7);
  if (v7 > U_ZERO_ERROR) {
    return 0;
  }
  double result = (icu::CollationElementIterator *)icu::UMemory::operator new((uint64_t *)v7, (icu::UMemory *)0x68, v4);
  if (result)
  {
    double result = icu::CollationElementIterator::CollationElementIterator(result, a2, this, &v7);
    if (v7 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      icu::CollationElementIterator::~CollationElementIterator(result);
      icu::UMemory::operator delete(v6);
      return 0;
    }
  }
  return result;
}

uint64_t icu::RuleBasedCollator::getMaxExpansion(icu::RuleBasedCollator *this, unsigned int a2)
{
  int v5 = 0;
  sub_18C7EFEB0((unsigned int *)(*((void *)this + 3) + 392), (void (*)(uint64_t, int *))icu::RuleBasedCollator::computeMaxExpansions, *((void *)this + 3), &v5);
  return icu::CollationElementIterator::getMaxExpansion(*(void *)(*((void *)this + 3) + 384), a2);
}

void sub_18C9D06D4(icu::UObject *a1)
{
  icu::UObject::~UObject(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9D06FC(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 32);
  int v2 = *(unsigned __int16 **)(a1 + 40);
  if (v1 == v2) {
    return 0xFFFFFFFFLL;
  }
  int v5 = v1 + 1;
  uint64_t result = *v1;
  *(void *)(a1 + 32) = v1 + 1;
  if (v2) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = result == 0;
  }
  if (v6)
  {
    *(void *)(a1 + 32) = 0;
    return 0xFFFFFFFFLL;
  }
  if ((result & 0xFC00) == 0xD800 && v5 != v2)
  {
    int v8 = *v5;
    if ((v8 & 0xFC00) == 0xDC00)
    {
      *(void *)(a1 + 32) = v1 + 2;
      return (v8 + (result << 10) - 56613888);
    }
  }
  return result;
}

uint64_t sub_18C9D0774(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if ((v1 & 0x80000000) != 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
  }
  if (v1 == *(_DWORD *)(a1 + 28))
  {
    *(_DWORD *)(a1 + 24) = -1;
    return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1 + 1;
  uint64_t v4 = *(unsigned __int16 *)(v3 + 2 * v1);
  if ((v4 & 0xFC00) == 0xD800)
  {
    *(_DWORD *)(a1 + 24) = v1 + 2;
    return *(unsigned __int16 *)(v3 + 2 * (v1 + 1)) + (v4 << 10) - 56613888;
  }
  return v4;
}

uint64_t sub_18C9D07F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) != 0)
  {
    Decomposition = icu::Normalizer2Impl::getDecomposition(a2, a3, (_WORD *)(a1 + 16), (int *)(a1 + 28));
    *(void *)(a1 + 8) = Decomposition;
    if (Decomposition)
    {
      *(_DWORD *)(a1 + 24) = 1;
      uint64_t v3 = (unsigned __int16)*Decomposition;
      if ((v3 & 0xFC00) == 0xD800)
      {
        *(_DWORD *)(a1 + 24) = 2;
        return (unsigned __int16)Decomposition[1] + (v3 << 10) - 56613888;
      }
    }
  }
  return v3;
}

void sub_18C9D0880(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA52510;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 48));
  icu::UObject::~UObject((icu::UObject *)a1);

  icu::UMemory::operator delete(v3);
}

void sub_18C9D08D8(icu::UObject *a1)
{
  icu::UObject::~UObject(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9D0900(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 44);
  uint64_t v2 = *(int *)(a1 + 40);
  if (v2 != v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if ((v1 & 0x80000000) == 0 || *(unsigned char *)(v3 + v2))
    {
      uint64_t v6 = v2 + 1;
      *(_DWORD *)(a1 + 40) = v2 + 1;
      int v7 = *(char *)(v3 + v2);
      uint64_t v4 = *(unsigned __int8 *)(v3 + v2);
      if ((v7 & 0x80000000) == 0) {
        return v4;
      }
      if (v6 != v1)
      {
        if (v4 < 0xE0)
        {
          if (v4 < 0xC2) {
            return 65533;
          }
          int v10 = v4 & 0x1F;
        }
        else
        {
          if (v4 > 0xEF)
          {
            if (v4 > 0xF4) {
              return 65533;
            }
            int v12 = v4 - 240;
            unint64_t v8 = *(unsigned __int8 *)(v3 + v6);
            if (((byte_18CA96AD8[v8 >> 4] >> v12) & 1) == 0) {
              return 65533;
            }
            uint64_t v6 = v2 + 2;
            *(_DWORD *)(a1 + 40) = v2 + 2;
            if (v2 + 2 == v1) {
              return 65533;
            }
            unsigned int v9 = *(unsigned __int8 *)(v3 + v6) ^ 0x80;
            if (v9 > 0x3F) {
              return 65533;
            }
            LODWORD(v8) = v8 & 0x3F | (v12 << 6);
          }
          else
          {
            unint64_t v8 = v7 & 0xF;
            if (((a00000000000000[v8] >> (*(unsigned char *)(v3 + v6) >> 5)) & 1) == 0) {
              return 65533;
            }
            unsigned int v9 = *(unsigned char *)(v3 + v6) & 0x3F;
          }
          LODWORD(v6) = v6 + 1;
          *(_DWORD *)(a1 + 40) = v6;
          if (v6 == v1) {
            return 65533;
          }
          int v10 = v9 | (v8 << 6);
        }
        unsigned int v11 = *(unsigned __int8 *)(v3 + (int)v6) ^ 0x80;
        if (v11 <= 0x3F)
        {
          uint64_t v4 = v11 | (v10 << 6);
          *(_DWORD *)(a1 + 40) = v6 + 1;
          return v4;
        }
      }
      return 65533;
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18C9D0A1C(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA525A0;
  icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)(a1 + 32), a2);
  icu::UObject::~UObject((icu::UObject *)a1);

  icu::UMemory::operator delete(v3);
}

uint64_t sub_18C9D0A74(uint64_t a1)
{
  UErrorCode v2 = U_ZERO_ERROR;
  return icu::FCDUTF8CollationIterator::nextCodePoint((icu::FCDUTF8CollationIterator *)(a1 + 32), &v2);
}

void sub_18C9D0AA0(icu::UObject *a1)
{
  icu::UObject::~UObject(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9D0AC8(uint64_t a1)
{
  return uiter_next32(*(UCharIterator **)(a1 + 32));
}

void sub_18C9D0AD0(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA52630;
  icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)(a1 + 32), a2);
  icu::UObject::~UObject((icu::UObject *)a1);

  icu::UMemory::operator delete(v3);
}

uint64_t *sub_18C9D0B28(uint64_t a1)
{
  UErrorCode v2 = U_ZERO_ERROR;
  return icu::FCDUIterCollationIterator::nextCodePoint((icu::FCDUIterCollationIterator *)(a1 + 32), &v2);
}

void sub_18C9D0B54(icu::ByteSink *a1)
{
  icu::ByteSink::~ByteSink(a1);

  icu::UMemory::operator delete(v1);
}

_DWORD *sub_18C9D0B7C(_DWORD *result, const void *a2, uint64_t a3, int a4)
{
  size_t v4 = (result[4] - a4);
  if ((int)v4 >= 1) {
    return memcpy((void *)(*((void *)result + 1) + a4), a2, v4);
  }
  return result;
}

uint64_t sub_18C9D0B9C()
{
  return 0;
}

void sub_18C9D0BA4(icu::CollationKeys::LevelCallback *a1)
{
  icu::CollationKeys::LevelCallback::~LevelCallback(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9D0BCC(uint64_t a1, int a2)
{
  UErrorCode v2 = *(_DWORD **)(a1 + 8);
  int v4 = v2[4];
  int v3 = v2[5];
  BOOL v5 = __OFSUB__(v4, v3);
  int v6 = v4 - v3;
  if (v6 < 0 != v5) {
    return 0;
  }
  int v7 = v6 + v2[6];
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = v7;
  return 1;
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createSuperscriptInstance@<X0>(icu::ScientificNumberFormatter *this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = (Style *)icu::UMemory::operator new(a3, (icu::UMemory *)8, (unint64_t)a2);
  if (v6) {
    *(void *)int v6 = &unk_1EDA527A8;
  }

  return icu::ScientificNumberFormatter::createInstance(this, v6, a2, v7);
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createInstance(icu::ScientificNumberFormatter *this, Style *a2, UErrorCode *a3, UErrorCode *a4)
{
  int v6 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v6 > 0)
  {
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unint64_t v8 = (icu::ScientificNumberFormatter *)icu::UMemory::operator new(v6, (icu::UMemory *)0x58, (unint64_t)a2);
  if (!v8)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    if (!a2)
    {
LABEL_4:
      if (!this) {
        return 0;
      }
      goto LABEL_8;
    }
LABEL_3:
    (*(void (**)(Style *))(*(void *)a2 + 8))(a2);
    goto LABEL_4;
  }
  uint64_t result = icu::ScientificNumberFormatter::ScientificNumberFormatter(v8, this, a2, a3);
  this = result;
  if (*(int *)a3 < 1) {
    return result;
  }
LABEL_8:
  (*(void (**)(icu::ScientificNumberFormatter *))(*(void *)this + 8))(this);
  return 0;
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createSuperscriptInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  Scientificuint64_t Instance = icu::NumberFormat::createScientificInstance(this, a2, a3);
  int v7 = (Style *)icu::UMemory::operator new(v6, (icu::UMemory *)8, v5);
  if (v7) {
    *(void *)int v7 = &unk_1EDA527A8;
  }

  return icu::ScientificNumberFormatter::createInstance(ScientificInstance, v7, a2, v8);
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createMarkupInstance@<X0>(icu::ScientificNumberFormatter *this@<X0>, UChar **a2@<X1>, UChar **a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  int v10 = icu::UMemory::operator new(a5, (icu::UMemory *)0x88, (unint64_t)a2);
  int v12 = (Style *)v10;
  if (v10)
  {
    *int v10 = (uint64_t)&unk_1EDA52740;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v10 + 1), a2);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v12 + 72), a3);
  }

  return icu::ScientificNumberFormatter::createInstance(this, v12, a4, v11);
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createMarkupInstance(char **this, UChar **a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  Scientificuint64_t Instance = icu::NumberFormat::createScientificInstance(this, a4, a3);
  unsigned int v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x88, v9);
  int v13 = (Style *)v11;
  if (v11)
  {
    uint64_t *v11 = (uint64_t)&unk_1EDA52740;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v11 + 1), a2);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v13 + 72), (UChar **)a3);
  }

  return icu::ScientificNumberFormatter::createInstance(ScientificInstance, v13, a4, v12);
}

void *icu::ScientificNumberFormatter::SuperscriptStyle::clone(icu::ScientificNumberFormatter::SuperscriptStyle *this, unint64_t a2)
{
  uint64_t result = (void *)icu::UMemory::operator new((icu::UMemory *)8, a2);
  if (result) {
    *uint64_t result = &unk_1EDA527A8;
  }
  return result;
}

icu::UnicodeString *icu::ScientificNumberFormatter::SuperscriptStyle::format(icu::ScientificNumberFormatter::SuperscriptStyle *this, const icu::UnicodeString *a2, icu::FieldPositionIterator *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  if (*(int *)a6 > 0) {
    return a5;
  }
  uint64_t v32 = 0;
  long long v30 = &unk_1EDA4C7F0;
  uint64_t v31 = 0xFFFFFFFFLL;
  if (!icu::FieldPositionIterator::next(a3, (icu::FieldPosition *)&v30))
  {
    LODWORD(v12) = 0;
LABEL_28:
    unsigned int v26 = *((unsigned __int16 *)a2 + 4);
    int v27 = (__int16)v26;
    unsigned int v28 = v26 >> 5;
    if (v27 < 0) {
      unsigned int v28 = *((_DWORD *)a2 + 3);
    }
    icu::UnicodeString::doAppend((uint64_t)a5, a2, v12, v28 - v12);
    goto LABEL_32;
  }
  uint64_t v11 = 0;
  while (v31 != 5)
  {
    if (v31 == 4)
    {
      int v21 = HIDWORD(v31);
      uint64_t v12 = v32;
      int v22 = icu::UnicodeString::char32At((uint64_t *)4, a2, SHIDWORD(v31));
      int v23 = (icu::UnicodeSet *)icu::unisets::get(11);
      if (icu::UnicodeSet::contains(v23, v22))
      {
        icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (v21 - v11));
        __int16 v24 = 8315;
      }
      else
      {
        unint64_t v25 = (icu::UnicodeSet *)icu::unisets::get(12);
        if (!icu::UnicodeSet::contains(v25, v22)) {
          goto LABEL_31;
        }
        icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (v21 - v11));
        __int16 v24 = 8314;
      }
      __int16 v33 = v24;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v33, 0, 1);
    }
    else if (v31 == 3)
    {
      icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (HIDWORD(v31) - v11));
      uint64_t v12 = v32;
      unsigned int v13 = *((unsigned __int16 *)a4 + 4);
      int v14 = (__int16)v13;
      unsigned int v15 = v13 >> 5;
      if (v14 >= 0) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = *((unsigned int *)a4 + 3);
      }
      icu::UnicodeString::doAppend((uint64_t)a5, a4, 0, v16);
    }
    else
    {
      uint64_t v12 = v11;
    }
LABEL_25:
    uint64_t v11 = v12;
    if (!icu::FieldPositionIterator::next(a3, (icu::FieldPosition *)&v30)) {
      goto LABEL_28;
    }
  }
  icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (HIDWORD(v31) - v11));
  uint64_t v17 = *(unsigned int *)a6;
  if ((int)v17 > 0) {
    goto LABEL_32;
  }
  int v18 = HIDWORD(v31);
  uint64_t v12 = v32;
  if (SHIDWORD(v31) >= (int)v32) {
    goto LABEL_25;
  }
  while (1)
  {
    unsigned int v19 = icu::UnicodeString::char32At((uint64_t *)v17, a2, v18);
    unsigned int v20 = u_charDigitValue(v19);
    if ((v20 & 0x80000000) != 0) {
      break;
    }
    __int16 v33 = word_18CA96D36[v20];
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v33, 0, 1);
    if (v19 < 0x10000) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = 2;
    }
    v18 += v17;
    if (v18 >= (int)v12)
    {
      uint64_t v12 = v32;
      goto LABEL_25;
    }
  }
LABEL_31:
  *a6 = U_INVALID_CHAR_FOUND;
LABEL_32:
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v30);
  return a5;
}

uint64_t *icu::ScientificNumberFormatter::MarkupStyle::clone@<X0>(UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x88, a2);
  unint64_t v5 = v4;
  if (v4)
  {
    uint64_t *v4 = (uint64_t)&unk_1EDA52740;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 1), this + 1);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v5 + 9), this + 9);
  }
  return v5;
}

icu::UnicodeString *icu::ScientificNumberFormatter::MarkupStyle::format(icu::ScientificNumberFormatter::MarkupStyle *this, const icu::UnicodeString *a2, icu::FieldPositionIterator *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    uint64_t v36 = 0;
    int v34 = &unk_1EDA4C7F0;
    uint64_t v35 = 0xFFFFFFFFLL;
    int v11 = 0;
    if (icu::FieldPositionIterator::next(a3, (icu::FieldPosition *)&v34))
    {
      __int16 v33 = (icu::ScientificNumberFormatter::MarkupStyle *)((char *)this + 72);
      uint64_t v12 = (char *)this + 80;
      unsigned int v13 = (char *)this + 84;
      int v14 = (icu::ScientificNumberFormatter::MarkupStyle *)((char *)this + 8);
      unsigned int v15 = (char *)this + 16;
      uint64_t v16 = (char *)this + 20;
      while (v35 != 5)
      {
        if (v35 == 3)
        {
          icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (HIDWORD(v35) - v11));
          int v11 = v36;
          unsigned int v17 = *((unsigned __int16 *)a4 + 4);
          int v18 = (__int16)v17;
          unsigned int v19 = v17 >> 5;
          if (v18 >= 0) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = *((unsigned int *)a4 + 3);
          }
          icu::UnicodeString::doAppend((uint64_t)a5, a4, 0, v20);
          int v21 = (unsigned __int16 *)v15;
          int v22 = (unsigned int *)v16;
          int v23 = v14;
          goto LABEL_11;
        }
LABEL_15:
        if (!icu::FieldPositionIterator::next(a3, (icu::FieldPosition *)&v34)) {
          goto LABEL_16;
        }
      }
      icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (v36 - v11));
      int v11 = v36;
      int v21 = (unsigned __int16 *)v12;
      int v22 = (unsigned int *)v13;
      int v23 = v33;
LABEL_11:
      unsigned int v24 = *v21;
      int v25 = (__int16)v24;
      unsigned int v26 = v24 >> 5;
      unsigned int v27 = *v22;
      if (v25 >= 0) {
        uint64_t v28 = v26;
      }
      else {
        uint64_t v28 = v27;
      }
      icu::UnicodeString::doAppend((uint64_t)a5, v23, 0, v28);
      goto LABEL_15;
    }
LABEL_16:
    unsigned int v29 = *((unsigned __int16 *)a2 + 4);
    int v30 = (__int16)v29;
    unsigned int v31 = v29 >> 5;
    if (v30 < 0) {
      unsigned int v31 = *((_DWORD *)a2 + 3);
    }
    icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, v31 - v11);
    icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v34);
  }
  return a5;
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::ScientificNumberFormatter(icu::ScientificNumberFormatter *this, icu::DecimalFormat *a2, Style *a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA52718;
  unint64_t v5 = (icu::ScientificNumberFormatter *)((char *)this + 8);
  *((void *)this + 1) = &unk_1EDA47700;
  *((_WORD *)this + 8) = 2;
  *((void *)this + 9) = a2;
  *((void *)this + 10) = a3;
  if (*(int *)a4 <= 0)
  {
    if (a2
      && a3
      && (int v7 = (icu::ScientificNumberFormatter *)(*(uint64_t (**)(icu::DecimalFormat *))(*(void *)a2 + 320))(a2)) != 0)
    {
      icu::ScientificNumberFormatter::getPreExponent(v7, v5, v8);
    }
    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

uint64_t icu::ScientificNumberFormatter::getPreExponent(icu::ScientificNumberFormatter *this, const icu::DecimalFormatSymbols *a2, icu::UnicodeString *a3)
{
  unsigned int v5 = *((unsigned __int16 *)this + 872);
  int v6 = (__int16)v5;
  unsigned int v7 = v5 >> 5;
  if (v6 >= 0) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = *((unsigned int *)this + 437);
  }
  icu::UnicodeString::doAppend((uint64_t)a2, (icu::ScientificNumberFormatter *)((char *)this + 1736), 0, v8);
  unsigned int v9 = *((unsigned __int16 *)this + 584);
  int v10 = (__int16)v9;
  unsigned int v11 = v9 >> 5;
  if (v10 >= 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = *((unsigned int *)this + 293);
  }
  icu::UnicodeString::doAppend((uint64_t)a2, (icu::ScientificNumberFormatter *)((char *)this + 1160), 0, v12);
  unsigned int v13 = *((unsigned __int16 *)this + 136);
  int v14 = (__int16)v13;
  unsigned int v15 = v13 >> 5;
  if (v14 >= 0) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = *((unsigned int *)this + 69);
  }

  return icu::UnicodeString::doAppend((uint64_t)a2, (icu::ScientificNumberFormatter *)((char *)this + 264), 0, v16);
}

void *icu::ScientificNumberFormatter::ScientificNumberFormatter(void *a1, uint64_t a2)
{
  *a1 = &unk_1EDA52718;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 1), (UChar **)(a2 + 8));
  a1[9] = 0;
  a1[10] = 0;
  a1[9] = (*(uint64_t (**)(void))(**(void **)(a2 + 72) + 32))(*(void *)(a2 + 72));
  a1[10] = (*(uint64_t (**)(void))(**(void **)(a2 + 80) + 24))(*(void *)(a2 + 80));
  return a1;
}

void icu::ScientificNumberFormatter::~ScientificNumberFormatter(icu::ScientificNumberFormatter *this)
{
  *(void *)this = &unk_1EDA52718;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 10);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::UnicodeString::~UnicodeString((icu::ScientificNumberFormatter *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::ScientificNumberFormatter::~ScientificNumberFormatter(this);

  icu::UMemory::operator delete(v1);
}

icu::UnicodeString *icu::ScientificNumberFormatter::format(icu::ScientificNumberFormatter *this, const icu::Formattable *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v15 = 0;
    long long v14 = 0u;
    unsigned int v11 = &unk_1EDA47700;
    LOWORD(v12) = 2;
    memset(v10, 0, sizeof(v10));
    icu::FieldPositionIterator::FieldPositionIterator((uint64_t)v10);
    (*(void (**)(void, const icu::Formattable *, void **, void *, UErrorCode *))(**((void **)this + 9)
                                                                                              + 48))(*((void *)this + 9), a2, &v11, v10, a4);
    a3 = (icu::UnicodeString *)(*(uint64_t (**)(void, void **, void *, char *, icu::UnicodeString *, UErrorCode *))(**((void **)this + 10) + 32))(*((void *)this + 10), &v11, v10, (char *)this + 8, a3, a4);
    icu::FieldPositionIterator::~FieldPositionIterator((icu::FieldPositionIterator *)v10);
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11);
  }
  return a3;
}

void sub_18C9D182C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA52740;
  uint64_t v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v2);

  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18C9D1890(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA52740;
  uint64_t v3 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v4, v3);
  icu::UObject::~UObject((icu::UObject *)a1);

  icu::UMemory::operator delete(v5);
}

void sub_18C9D18FC(icu::UObject *a1)
{
  icu::UObject::~UObject(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::ScriptSet::ScriptSet(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

__n128 icu::ScriptSet::ScriptSet(icu::ScriptSet *this, const icu::ScriptSet *a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)((char *)a2 + 12);
  *(__n128 *)this = result;
  return result;
}

{
  __n128 result;

  __n128 result = *(__n128 *)a2;
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)((char *)a2 + 12);
  *(__n128 *)this = result;
  return result;
}

__n128 icu::ScriptSet::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

BOOL icu::ScriptSet::operator==(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  unint64_t v2 = 0;
  do
  {
    unint64_t v3 = v2;
    if (v2 == 6) {
      break;
    }
    int v4 = a1[v2 + 1];
    int v5 = a2[++v2];
  }
  while (v4 == v5);
  return v3 > 5;
}

uint64_t icu::ScriptSet::test(uint64_t a1, unsigned int a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  if (a2 < 0xE0) {
    return (*(_DWORD *)(a1 + 4 * (a2 >> 5)) >> a2) & 1;
  }
  uint64_t result = 0;
  *a3 = 1;
  return result;
}

uint64_t icu::ScriptSet::set(uint64_t result, unsigned int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (a2 < 0xE0) {
      *(_DWORD *)(result + 4 * (a2 >> 5)) |= 1 << a2;
    }
    else {
      *a3 = 1;
    }
  }
  return result;
}

uint64_t icu::ScriptSet::reset(uint64_t result, unsigned int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (a2 < 0xE0) {
      *(_DWORD *)(result + 4 * (a2 >> 5)) &= ~(1 << a2);
    }
    else {
      *a3 = 1;
    }
  }
  return result;
}

uint64_t icu::ScriptSet::Union(uint64_t this, const icu::ScriptSet *a2)
{
  for (uint64_t i = 0; i != 28; i += 4)
    *(_DWORD *)(this + i) |= *(_DWORD *)((char *)a2 + i);
  return this;
}

uint64_t icu::ScriptSet::intersect(uint64_t this, const icu::ScriptSet *a2)
{
  for (uint64_t i = 0; i != 28; i += 4)
    *(_DWORD *)(this + i) &= *(_DWORD *)((char *)a2 + i);
  return this;
}

uint64_t icu::ScriptSet::intersect(uint64_t result, unsigned int a2, int *a3)
{
  int v5 = 0;
  v4[2] = 0;
  if (*a3 <= 0)
  {
    if (a2 < 0xE0)
    {
      uint64_t v3 = 0;
      *((_DWORD *)v4 + (a2 >> 5)) |= 1 << a2;
      do
      {
        *(_DWORD *)(result + v3) &= *(_DWORD *)((char *)v4 + v3);
        v3 += 4;
      }
      while (v3 != 28);
    }
    else
    {
      *a3 = 1;
    }
  }
  return result;
}

BOOL icu::ScriptSet::intersects(icu::ScriptSet *this, const icu::ScriptSet *a2)
{
  if ((*(_DWORD *)a2 & *(_DWORD *)this) != 0) {
    return 1;
  }
  unint64_t v3 = 0;
  do
  {
    unint64_t v4 = v3;
    if (v3 == 6) {
      break;
    }
    int v5 = *((_DWORD *)this + v3 + 1);
    int v6 = *((_DWORD *)a2 + ++v3);
  }
  while ((v6 & v5) == 0);
  return v4 < 6;
}

BOOL icu::ScriptSet::contains(icu::ScriptSet *this, const icu::ScriptSet *a2)
{
  uint64_t v2 = 0;
  *(_OWORD *)&v8[3] = *(_OWORD *)((char *)this + 12);
  do
  {
    v8[v2] &= *(_DWORD *)((char *)a2 + v2 * 4);
    ++v2;
  }
  while (v2 != 7);
  if (v8[0] != *(_DWORD *)a2) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    unint64_t v4 = v3;
    if (v3 == 6) {
      break;
    }
    int v5 = v8[v3 + 1];
    int v6 = *((_DWORD *)a2 + ++v3);
  }
  while (v5 == v6);
  return v4 > 5;
}

uint64_t icu::ScriptSet::setAll(uint64_t this)
{
  *(void *)(this + 8) = -1;
  *(void *)(this + 16) = -1;
  *(void *)this = -1;
  *(_DWORD *)(this + 24) = -1;
  return this;
}

uint64_t icu::ScriptSet::resetAll(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t icu::ScriptSet::countMembers(icu::ScriptSet *this, int8x8_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  do
  {
    if (*(_DWORD *)((char *)this + v2))
    {
      a2.i32[0] = *(_DWORD *)((char *)this + v2);
      a2 = vcnt_s8(a2);
      a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
      uint64_t v3 = (a2.i32[0] + v3);
    }
    v2 += 4;
  }
  while (v2 != 28);
  return v3;
}

uint64_t icu::ScriptSet::hashCode(icu::ScriptSet *this)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  do
  {
    uint64_t v2 = *(_DWORD *)((char *)this + v1) ^ v2;
    v1 += 4;
  }
  while (v1 != 28);
  return v2;
}

uint64_t icu::ScriptSet::nextSetBit(icu::ScriptSet *this, uint64_t a2)
{
  if (a2 <= 0xDF)
  {
    int v3 = 0;
    do
    {
      if (v3 <= 0)
      {
        if (a2 <= 0xDF)
        {
          if ((*((_DWORD *)this + (a2 >> 5)) >> a2)) {
            return a2;
          }
        }
        else
        {
          int v3 = 1;
        }
      }
      a2 = (a2 + 1);
    }
    while (a2 != 224);
  }
  return 0xFFFFFFFFLL;
}

BOOL icu::ScriptSet::isEmpty(icu::ScriptSet *this)
{
  if (*(_DWORD *)this) {
    return 0;
  }
  unint64_t v2 = 0;
  do
  {
    unint64_t v3 = v2;
    if (v2 == 6) {
      break;
    }
  }
  while (!*((_DWORD *)this + ++v2));
  return v3 > 5;
}

icu::UnicodeString *icu::ScriptSet::displayScripts(icu::ScriptSet *this, icu::UnicodeString *a2)
{
  unsigned int v4 = 0;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  do
  {
    if ((*((_DWORD *)this + (v4 >> 5)) >> v4))
    {
      while (1)
      {
        ShortName = uscript_getShortName(v4);
        icu::UnicodeString::UnicodeString(&v10, ShortName, 0xFFFFFFFFLL, 0);
        if ((v11 & 0x8000u) == 0) {
          uint64_t v7 = v11 >> 5;
        }
        else {
          uint64_t v7 = v12;
        }
        icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v10, 0, v7);
        icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v10);
        if (v4 > 0xDE) {
          return a2;
        }
        int v9 = 0;
        ++v4;
        while (v9 > 0)
        {
LABEL_11:
          if (++v4 == 224) {
            return a2;
          }
        }
        if (v4 > 0xDF) {
          break;
        }
        if (((*((_DWORD *)this + (v4 >> 5)) >> v4) & 1) == 0) {
          goto LABEL_11;
        }
        __int16 v10 = 32;
        icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v10, 0, 1);
      }
      int v9 = 1;
      goto LABEL_11;
    }
    ++v4;
  }
  while (v4 != 224);
  return a2;
}

icu::ScriptSet *icu::ScriptSet::parseScripts(icu::ScriptSet *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  if (*(int *)a3 <= 0)
  {
    *(_OWORD *)length = 0u;
    long long v24 = 0u;
    uint64_t v26 = 0;
    long long v25 = 0u;
    int v22 = &unk_1EDA47700;
    LOWORD(length[0]) = 2;
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    int v6 = (__int16)v5;
    LODWORD(v7) = v5 >> 5;
    if (v6 >= 0) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = *((unsigned int *)a2 + 3);
    }
    if ((int)v7 >= 1)
    {
      int v9 = 0;
      do
      {
        unsigned int v10 = icu::UnicodeString::char32At((uint64_t *)v7, a2, v9);
        int v9 = icu::UnicodeString::moveIndex32(a2, v9, 1);
        if (!u_isUWhiteSpace(v10))
        {
          icu::UnicodeString::append((uint64_t)&v22, v10);
          unsigned int v11 = *((unsigned __int16 *)a2 + 4);
          int v12 = (__int16)v11;
          int v13 = v11 >> 5;
          if (v12 < 0) {
            int v13 = *((_DWORD *)a2 + 3);
          }
          if (v9 < v13) {
            goto LABEL_23;
          }
        }
        if (SLOWORD(length[0]) < 0)
        {
          uint64_t v14 = length[1];
          if (length[1] <= 0) {
            goto LABEL_23;
          }
          uint64_t v21 = 0;
        }
        else
        {
          if (LOWORD(length[0]) < 0x20u) {
            goto LABEL_23;
          }
          uint64_t v21 = 0;
          uint64_t v14 = LOWORD(length[0]) >> 5;
        }
        memset(v20, 0, sizeof(v20));
        icu::UnicodeString::extract((uint64_t)&v22, 0, v14, (char *)v20, 39);
        HIBYTE(v21) = 0;
        PropertyValueEnuunsigned int m = u_getPropertyValueEnum(UCHAR_SCRIPT, (const char *)v20);
        if (PropertyValueEnum == -1) {
          goto LABEL_28;
        }
        uint64_t v7 = *(unsigned int *)a3;
        if ((int)v7 > 0) {
          break;
        }
        if (PropertyValueEnum > 0xDF)
        {
LABEL_28:
          uint64_t v7 = 1;
          *a3 = U_ILLEGAL_ARGUMENT_ERROR;
          break;
        }
        *((_DWORD *)this + (PropertyValueEnum >> 5)) |= 1 << PropertyValueEnum;
        if (length[0]) {
          __int16 v16 = 2;
        }
        else {
          __int16 v16 = length[0] & 0x1F;
        }
        LOWORD(length[0]) = v16;
LABEL_23:
        unsigned int v17 = *((unsigned __int16 *)a2 + 4);
        int v18 = (__int16)v17;
        LODWORD(v7) = v17 >> 5;
        if (v18 >= 0) {
          uint64_t v7 = v7;
        }
        else {
          uint64_t v7 = *((unsigned int *)a2 + 3);
        }
      }
      while (v9 < (int)v7);
    }
    icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)&v22);
  }
  return this;
}

void icu::ScriptSet::setScriptExtensions(icu::ScriptSet *this, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    memset(v17, 0, sizeof(v17));
    uint64_t v18 = 0;
    __int16 v16 = (char *)v17 + 8;
    LODWORD(v17[0]) = 20;
    UErrorCode v15 = U_ZERO_ERROR;
    int ScriptExtensions = uscript_getScriptExtensions(a2, (int *)v17 + 2, 20, (int *)&v15);
    UErrorCode v7 = v15;
    if (v15 == U_BUFFER_OVERFLOW_ERROR)
    {
      while (ScriptExtensions >= 1)
      {
        uint64_t v8 = uprv_malloc(4 * ScriptExtensions);
        if (!v8) {
          break;
        }
        int v9 = v8;
        if (BYTE4(v17[0])) {
          uprv_free(v16);
        }
        __int16 v16 = v9;
        LODWORD(v17[0]) = ScriptExtensions;
        BYTE4(v17[0]) = 1;
        UErrorCode v15 = U_ZERO_ERROR;
        int ScriptExtensions = uscript_getScriptExtensions(a2, (int *)v9, ScriptExtensions, (int *)&v15);
        UErrorCode v7 = v15;
        if (v15 != U_BUFFER_OVERFLOW_ERROR) {
          goto LABEL_8;
        }
      }
      UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
    }
    else
    {
LABEL_8:
      if (v7 <= U_ZERO_ERROR)
      {
        if (ScriptExtensions >= 1)
        {
          int v10 = *a3;
          unsigned int v11 = (unsigned int *)v16;
          uint64_t v12 = ScriptExtensions;
          while (v10 <= 0)
          {
            unsigned int v14 = *v11++;
            unint64_t v13 = v14;
            if (v14 >= 0xE0)
            {
              UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
              goto LABEL_16;
            }
            *(_DWORD *)((char *)this + ((v13 >> 3) & 0x1FFFFFFC)) |= 1 << v13;
            if (!--v12) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_17;
      }
    }
LABEL_16:
    *a3 = v7;
LABEL_17:
    if (BYTE4(v17[0])) {
      uprv_free(v16);
    }
  }
}

BOOL uhash_equalsScriptSet(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  unint64_t v2 = 0;
  do
  {
    unint64_t v3 = v2;
    if (v2 == 6) {
      break;
    }
    int v4 = a1[v2 + 1];
    int v5 = a2[++v2];
  }
  while (v4 == v5);
  return v3 > 5;
}

uint64_t uhash_compareScriptSet(uint64_t a1, uint64_t a2, int8x8_t a3)
{
  uint64_t v3 = 0;
  int v4 = 0;
  do
  {
    if (*(_DWORD *)(a1 + v3))
    {
      a3.i32[0] = *(_DWORD *)(a1 + v3);
      a3 = vcnt_s8(a3);
      a3.i16[0] = vaddlv_u8((uint8x8_t)a3);
      v4 += a3.i32[0];
    }
    v3 += 4;
  }
  while (v3 != 28);
  uint64_t v5 = 0;
  int v6 = 0;
  do
  {
    if (*(_DWORD *)(a2 + v5))
    {
      a3.i32[0] = *(_DWORD *)(a2 + v5);
      a3 = vcnt_s8(a3);
      a3.i16[0] = vaddlv_u8((uint8x8_t)a3);
      v6 += a3.i32[0];
    }
    v5 += 4;
  }
  while (v5 != 28);
  unsigned int v7 = v4 - v6;
  if (!v7)
  {
    int v8 = 0;
    while (((*(_DWORD *)(a1 + 4 * (v8 >> 5)) >> v8) & 1) == 0)
    {
      if (++v8 == 224)
      {
        int v8 = -1;
        break;
      }
    }
    unsigned int v7 = 0;
    while (((*(_DWORD *)(a2 + 4 * (v7 >> 5)) >> v7) & 1) == 0)
    {
      if (++v7 == 224)
      {
        unsigned int v7 = -1;
        break;
      }
    }
    if (v8 >= 1 && v8 == v7)
    {
      while (v8 <= 0xDE)
      {
        int v9 = 0;
        unsigned int v7 = v8 + 1;
        int v10 = v8 + 1;
        do
        {
          if (v9 <= 0)
          {
            if (v10 <= 0xDF)
            {
              if ((*(_DWORD *)(a1 + 4 * (v10 >> 5)) >> v10)) {
                goto LABEL_28;
              }
            }
            else
            {
              int v9 = 1;
            }
          }
          ++v10;
        }
        while (v10 != 224);
        int v10 = -1;
LABEL_28:
        int v11 = 0;
        do
        {
          if (v11 <= 0)
          {
            if (v7 <= 0xDF)
            {
              if ((*(_DWORD *)(a2 + 4 * (v7 >> 5)) >> v7)) {
                goto LABEL_35;
              }
            }
            else
            {
              int v11 = 1;
            }
          }
          ++v7;
        }
        while (v7 != 224);
        unsigned int v7 = -1;
LABEL_35:
        if (v10 >= 1)
        {
          int v8 = v10;
          if (v10 == v7) {
            continue;
          }
        }
        goto LABEL_40;
      }
      LOBYTE(v10) = -1;
      LOBYTE(v7) = -1;
    }
    else
    {
      LOBYTE(v10) = v8;
    }
LABEL_40:
    LOBYTE(v7) = v10 - v7;
  }
  return (char)v7;
}

uint64_t uhash_hashScriptSet(uint64_t a1)
{
  uint64_t v1 = 0;
  LODWORD(v2) = 0;
  do
  {
    uint64_t v2 = *(_DWORD *)(a1 + v1) ^ v2;
    v1 += 4;
  }
  while (v1 != 28);
  return v2;
}

void uhash_deleteScriptSet(void *a1)
{
  if (a1) {
    icu::UMemory::operator delete(a1);
  }
}

uint64_t icu::SearchIterator::SearchIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDA52810;
  *(_WORD *)(a1 + 32) = 2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = &unk_1EDA47700;
  icu::UnicodeString::operator=((UChar **)(a1 + 24), (UChar **)(a2 + 24));
  int v4 = uprv_malloc(0x30uLL);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 8);
  void v4[3] = *(void *)(v5 + 24);
  *((_DWORD *)v4 + 3) = *(_DWORD *)(v5 + 12);
  v4[4] = *(void *)(v5 + 32);
  void *v4 = *(void *)v5;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(v5 + 8);
  return a1;
}

void icu::SearchIterator::~SearchIterator(icu::SearchIterator *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1EDA52810;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
    uprv_free(v3);
  }
  icu::UnicodeString::~UnicodeString(a2, (icu::SearchIterator *)((char *)this + 24));

  icu::UObject::~UObject(this);
}

uint64_t icu::SearchIterator::setAttribute(uint64_t result, int a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 == 2)
    {
      if ((a3 - 3) <= 1)
      {
        *(_WORD *)(*(void *)(result + 8) + 14) = a3;
        return result;
      }
      *(_WORD *)(*(void *)(result + 8) + 14) = 0;
    }
    else if (a2 == 1)
    {
      *(unsigned char *)(*(void *)(result + 8) + 13) = a3 == 1;
    }
    else if (a2)
    {
      *a4 = 1;
    }
    else
    {
      *(unsigned char *)(*(void *)(result + 8) + 12) = a3 == 1;
    }
  }
  if (a3 == 5) {
    *a4 = 1;
  }
  return result;
}

uint64_t icu::SearchIterator::getAttribute(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 2:
      __int16 v3 = *(_WORD *)(*(void *)(a1 + 8) + 14);
      if (((v3 - 3) & 0xFFFE) != 0) {
        return 2;
      }
      return v3;
    case 1:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 13);
      return v2 != 0;
    case 0:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 12);
      return v2 != 0;
    default:
      return 0xFFFFFFFFLL;
  }
}

uint64_t icu::SearchIterator::getMatchedStart(icu::SearchIterator *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 32);
}

uint64_t icu::SearchIterator::getMatchedLength(icu::SearchIterator *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 36);
}

uint64_t icu::SearchIterator::getMatchedText(uint64_t this, icu::UnicodeString *a2)
{
  uint64_t v3 = *(void *)(this + 8);
  uint64_t v4 = *(unsigned int *)(v3 + 36);
  uint64_t v5 = *(int *)(v3 + 32);
  if (v5 == -1 || v4 == 0)
  {
    if (*((_WORD *)a2 + 4)) {
      __int16 v7 = 2;
    }
    else {
      __int16 v7 = *((_WORD *)a2 + 4) & 0x1F;
    }
    *((_WORD *)a2 + 4) = v7;
  }
  else
  {
    uint64_t v8 = *(void *)v3 + 2 * v5;
    icu::UnicodeString::unBogus((uint64_t)a2);
    unsigned int v9 = *((unsigned __int16 *)a2 + 4);
    int v10 = (__int16)v9;
    unsigned int v11 = v9 >> 5;
    if (v10 >= 0) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = *((unsigned int *)a2 + 3);
    }
    return icu::UnicodeString::doReplace((uint64_t)a2, 0, v12, v8, 0, v4);
  }
  return this;
}

uint64_t icu::SearchIterator::setBreakIterator(uint64_t this, icu::BreakIterator *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    *(void *)(*(void *)(this + 8) + 24) = a2;
    *(void *)(this + 16) = a2;
  }
  return this;
}

uint64_t icu::SearchIterator::getBreakIterator(icu::SearchIterator *this)
{
  return *((void *)this + 2);
}

icu::UnicodeString *icu::SearchIterator::setText(icu::UnicodeString *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    unsigned int v3 = *((unsigned __int16 *)a2 + 4);
    int v4 = (__int16)v3;
    unsigned int v5 = v3 >> 5;
    if (v4 < 0) {
      unsigned int v5 = *((_DWORD *)a2 + 3);
    }
    if (v5)
    {
      uint64_t v6 = (uint64_t)this;
      this = icu::UnicodeString::operator=((UChar **)this + 3, (UChar **)a2);
      __int16 v7 = *(_WORD *)(v6 + 32);
      if ((v7 & 0x11) != 0)
      {
        uint64_t v8 = 0;
      }
      else if ((v7 & 2) != 0)
      {
        uint64_t v8 = v6 + 34;
      }
      else
      {
        uint64_t v8 = *(void *)(v6 + 48);
      }
      uint64_t v9 = *(void *)(v6 + 8);
      *(void *)uint64_t v9 = v8;
      if (*(__int16 *)(v6 + 32) < 0) {
        int v10 = *(_DWORD *)(v6 + 36);
      }
      else {
        int v10 = *(unsigned __int16 *)(v6 + 32) >> 5;
      }
      *(_DWORD *)(v9 + 8) = v10;
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

uint64_t icu::SearchIterator::setText(uint64_t this, icu::CharacterIterator *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    uint64_t v5 = this + 24;
    (*(void (**)(icu::CharacterIterator *, uint64_t))(*(void *)a2 + 208))(a2, this + 24);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v4 + 40);
    return v6(v4, v5, a3);
  }
  return this;
}

uint64_t icu::SearchIterator::getText(icu::SearchIterator *this)
{
  return (uint64_t)this + 24;
}

BOOL icu::SearchIterator::operator==(void *a1, uint64_t a2)
{
  if (a1 == (void *)a2) {
    return 1;
  }
  if (a1[2] != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(unsigned __int8 *)(v4 + 13) != *(unsigned __int8 *)(v5 + 13)) {
    return 0;
  }
  if (*(unsigned __int8 *)(v4 + 12) != *(unsigned __int8 *)(v5 + 12)) {
    return 0;
  }
  if (*(unsigned __int16 *)(v4 + 14) != *(unsigned __int16 *)(v5 + 14)) {
    return 0;
  }
  if (*(_DWORD *)(v4 + 32) != *(_DWORD *)(v5 + 32)) {
    return 0;
  }
  if (*(_DWORD *)(v4 + 36) != *(_DWORD *)(v5 + 36)) {
    return 0;
  }
  if (*(_DWORD *)(v4 + 8) != *(_DWORD *)(v5 + 8)) {
    return 0;
  }
  int v6 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  if (v6 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2)) {
    return 0;
  }
  uint64_t v7 = a1[1];
  uint64_t v8 = *(int *)(v7 + 8);
  return !v8 || memcmp(*(const void **)v7, **(const void ***)(a2 + 8), 2 * v8) == 0;
}

uint64_t icu::SearchIterator::first(icu::SearchIterator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(icu::SearchIterator *, void, UErrorCode *))(*(void *)this + 24))(this, 0, a2);
  uint64_t v5 = *(uint64_t (**)(icu::SearchIterator *, void, UErrorCode *))(*(void *)this + 80);

  return v5(this, 0, a2);
}

uint64_t icu::SearchIterator::following(icu::SearchIterator *this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(icu::SearchIterator *))(*(void *)this + 24))(this);
  uint64_t v7 = *(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 80);

  return v7(this, a2, a3);
}

uint64_t icu::SearchIterator::last(icu::SearchIterator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(icu::SearchIterator *, void, UErrorCode *))(*(void *)this + 24))(this, *(unsigned int *)(*((void *)this + 1) + 8), a2);
  uint64_t v5 = *(unsigned int *)(*((void *)this + 1) + 8);
  int v6 = *(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 88);

  return v6(this, v5, a2);
}

uint64_t icu::SearchIterator::preceding(icu::SearchIterator *this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  (*(void (**)(icu::SearchIterator *))(*(void *)this + 24))(this);
  uint64_t v7 = *(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 88);

  return v7(this, a2, a3);
}

uint64_t icu::SearchIterator::next(icu::SearchIterator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (*(uint64_t (**)(icu::SearchIterator *))(*(void *)this + 32))(this);
  uint64_t v5 = *((void *)this + 1);
  uint64_t result = *(unsigned int *)(v5 + 32);
  int v7 = *(_DWORD *)(v5 + 36);
  *(unsigned char *)(v5 + 41) = 0;
  if (*(unsigned char *)(v5 + 40))
  {
    int v8 = *(_DWORD *)(v5 + 8);
    BOOL v9 = v4 == v8 || result == v8;
    if (v9 || (result != -1 ? (BOOL v10 = v7 + (int)result < v8) : (BOOL v10 = 1), !v10))
    {
      icu::SearchIterator::setMatchNotFound(this);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(unsigned char *)(v5 + 40) = 1;
    if (result != -1) {
      return result;
    }
  }
  if (v7 >= 1)
  {
    unsigned int v11 = v7 + v4;
    if (*(unsigned char *)(v5 + 12)) {
      uint64_t v4 = (v4 + 1);
    }
    else {
      uint64_t v4 = v11;
    }
  }
  uint64_t v12 = *(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 80);

  return v12(this, v4, a2);
}

uint64_t icu::SearchIterator::setMatchNotFound(icu::SearchIterator *this)
{
  (*(void (**)(icu::SearchIterator *, uint64_t))(*(void *)this + 104))(this, 0xFFFFFFFFLL);
  (*(void (**)(icu::SearchIterator *, void))(*(void *)this + 96))(this, 0);
  int v5 = 0;
  uint64_t v2 = *((void *)this + 1);
  if (*(unsigned char *)(v2 + 40)) {
    uint64_t v3 = *(unsigned int *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(icu::SearchIterator *, uint64_t, int *))(*(void *)this + 24))(this, v3, &v5);
}

uint64_t icu::SearchIterator::previous(icu::SearchIterator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *((void *)this + 1);
  if (*(unsigned char *)(v6 + 41))
  {
    uint64_t v7 = *(unsigned int *)(v6 + 8);
    *(_WORD *)(v6 + 40) = 0;
    (*(void (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 24))(this, v7, a2);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(icu::SearchIterator *))(*(void *)this + 32))(this);
  }
  uint64_t v8 = *((void *)this + 1);
  uint64_t v2 = *(unsigned int *)(v8 + 32);
  if (*(unsigned char *)(v8 + 40))
  {
    *(unsigned char *)(v8 + 40) = 0;
    if (v2 != -1) {
      return v2;
    }
  }
  else
  {
    if (v7) {
      BOOL v9 = v2 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      icu::SearchIterator::setMatchNotFound(this);
      return 0xFFFFFFFFLL;
    }
    if (v2 != -1)
    {
      if (*(unsigned char *)(v8 + 12)) {
        uint64_t v2 = (v2 + *(_DWORD *)(v8 + 36) - 2);
      }
      BOOL v10 = *(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 88);
      unsigned int v11 = this;
      goto LABEL_21;
    }
  }
  BOOL v10 = *(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 88);
  unsigned int v11 = this;
  uint64_t v2 = v7;
LABEL_21:

  return v10(v11, v2, a2);
}

uint64_t icu::SearchIterator::reset(icu::SearchIterator *this)
{
  int v4 = 0;
  icu::SearchIterator::setMatchNotFound(this);
  uint64_t result = (*(uint64_t (**)(icu::SearchIterator *, void, int *))(*(void *)this + 24))(this, 0, &v4);
  uint64_t v3 = *((void *)this + 1);
  *(_DWORD *)(v3 + 12) = 0;
  *(_WORD *)(v3 + 40) = 257;
  return result;
}

icu::SearchIterator *icu::SearchIterator::SearchIterator(icu::SearchIterator *this)
{
  *(void *)this = &unk_1EDA52810;
  *((void *)this + 3) = &unk_1EDA47700;
  *((_WORD *)this + 16) = 2;
  uint64_t v2 = uprv_malloc(0x30uLL);
  v2[3] = 0;
  *((_WORD *)v2 + 20) = 257;
  v2[4] = 0xFFFFFFFFLL;
  void *v2 = 0;
  v2[1] = 0;
  *((void *)this + 1) = v2;
  *((void *)this + 2) = 0;
  return this;
}

icu::SearchIterator *icu::SearchIterator::SearchIterator(icu::SearchIterator *this, UChar **a2, icu::BreakIterator *a3)
{
  *(void *)this = &unk_1EDA52810;
  *((void *)this + 2) = a3;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)this + 24), a2);
  int v5 = uprv_malloc(0x30uLL);
  uint64_t v6 = 0;
  *((void *)this + 1) = v5;
  v5[3] = 0;
  *((_DWORD *)v5 + 3) = 0;
  *((_WORD *)v5 + 20) = 257;
  _OWORD v5[4] = 0xFFFFFFFFLL;
  __int16 v7 = *((_WORD *)this + 16);
  if ((v7 & 0x11) == 0)
  {
    if ((v7 & 2) != 0) {
      uint64_t v6 = (char *)this + 34;
    }
    else {
      uint64_t v6 = (char *)*((void *)this + 6);
    }
  }
  void *v5 = v6;
  unsigned int v8 = *((unsigned __int16 *)a2 + 4);
  int v9 = (__int16)v8;
  unsigned int v10 = v8 >> 5;
  if (v9 < 0) {
    unsigned int v10 = *((_DWORD *)a2 + 3);
  }
  *((_DWORD *)v5 + 2) = v10;
  return this;
}

icu::SearchIterator *icu::SearchIterator::SearchIterator(icu::SearchIterator *this, icu::CharacterIterator *a2, icu::BreakIterator *a3)
{
  *(void *)this = &unk_1EDA52810;
  uint64_t v6 = (char *)this + 24;
  *((void *)this + 2) = a3;
  *((void *)this + 3) = &unk_1EDA47700;
  *((_WORD *)this + 16) = 2;
  __int16 v7 = uprv_malloc(0x30uLL);
  *((void *)this + 1) = v7;
  v7[3] = 0;
  *((_DWORD *)v7 + 3) = 0;
  *((_WORD *)v7 + 20) = 257;
  v7[4] = 0xFFFFFFFFLL;
  (*(void (**)(icu::CharacterIterator *, char *))(*(void *)a2 + 208))(a2, v6);
  unsigned int v8 = 0;
  __int16 v9 = *((_WORD *)this + 16);
  if ((v9 & 0x11) == 0)
  {
    if ((v9 & 2) != 0) {
      unsigned int v8 = (char *)this + 34;
    }
    else {
      unsigned int v8 = (char *)*((void *)this + 6);
    }
  }
  uint64_t v10 = *((void *)this + 1);
  *(void *)uint64_t v10 = v8;
  if (*((__int16 *)this + 16) < 0) {
    int v11 = *((_DWORD *)this + 9);
  }
  else {
    int v11 = *((unsigned __int16 *)this + 16) >> 5;
  }
  *(_DWORD *)(v10 + 8) = v11;
  *((void *)this + 2) = a3;
  return this;
}

uint64_t icu::SearchIterator::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    icu::UnicodeString::operator=((UChar **)(a1 + 24), (UChar **)(a2 + 24));
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(v5 + 24) = *(void *)(v4 + 24);
    *(_DWORD *)(v5 + 12) = *(_DWORD *)(v4 + 12);
    *(void *)(v5 + 32) = *(void *)(v4 + 32);
    *(void *)uint64_t v5 = *(void *)v4;
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(v4 + 8);
  }
  return a1;
}

uint64_t icu::SearchIterator::setMatchLength(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 8) + 36) = a2;
  return this;
}

uint64_t icu::SearchIterator::setMatchStart(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 8) + 32) = a2;
  return this;
}

void *icu::SelectFormat::getStaticClassID(icu::SelectFormat *this)
{
  return &unk_1E91926B5;
}

void *icu::SelectFormat::getDynamicClassID(icu::SelectFormat *this)
{
  return &unk_1E91926B5;
}

icu::SelectFormat *icu::SelectFormat::SelectFormat(icu::SelectFormat *this, UChar **a2, UErrorCode *a3)
{
  uint64_t v6 = (void *)icu::Format::Format((uint64_t)this);
  void *v6 = &unk_1EDA528A8;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v6 + 41), a3);
  icu::SelectFormat::applyPattern(this, a2, a3);
  return this;
}

icu::MessagePattern *icu::SelectFormat::applyPattern(icu::MessagePattern *this, UChar **a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = (uint64_t)this + 328;
    this = icu::MessagePattern::parseSelectStyle((icu::MessagePattern *)((char *)this + 328), a2, 0, a3);
    if (*(int *)a3 >= 1)
    {
      return (icu::MessagePattern *)icu::MessagePattern::clear(v4);
    }
  }
  return this;
}

icu::SelectFormat *icu::SelectFormat::SelectFormat(icu::SelectFormat *this, const icu::SelectFormat *a2)
{
  uint64_t v4 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  void *v4 = &unk_1EDA528A8;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v4 + 41), (const icu::SelectFormat *)((char *)a2 + 328));
  return this;
}

{
  void *v4;

  uint64_t v4 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  void *v4 = &unk_1EDA528A8;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v4 + 41), (const icu::SelectFormat *)((char *)a2 + 328));
  return this;
}

void icu::SelectFormat::~SelectFormat(icu::SelectFormat *this)
{
  *(void *)this = &unk_1EDA528A8;
  icu::MessagePattern::~MessagePattern((icu::SelectFormat *)((char *)this + 328));

  icu::Format::~Format(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDA528A8;
  icu::MessagePattern::~MessagePattern((icu::SelectFormat *)((char *)this + 328));

  icu::Format::~Format(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDA528A8;
  icu::MessagePattern::~MessagePattern((icu::SelectFormat *)((char *)this + 328));
  icu::Format::~Format(this);

  icu::UMemory::operator delete(v2);
}

icu::UnicodeString *icu::SelectFormat::format(icu::SelectFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return a3;
  }
  if (icu::Formattable::getType(a2) != 3)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return a3;
  }
  String = (const icu::UnicodeString *)icu::Formattable::getString(a2, a5);

  return icu::SelectFormat::format(this, String, a3, v10, a5);
}

icu::UnicodeString *icu::SelectFormat::format(icu::SelectFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return a3;
  }
  unsigned int v10 = *((unsigned __int16 *)a2 + 4);
  if ((v10 & 0x11) != 0)
  {
    int v11 = 0;
  }
  else if ((v10 & 2) != 0)
  {
    int v11 = (unsigned __int16 *)((char *)a2 + 10);
  }
  else
  {
    int v11 = (unsigned __int16 *)*((void *)a2 + 3);
  }
  int v12 = (__int16)v10;
  int v13 = v10 >> 5;
  if (v12 >= 0) {
    int v14 = v13;
  }
  else {
    int v14 = *((_DWORD *)a2 + 3);
  }
  if (!icu::PatternProps::isIdentifier(v11, v14)) {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  if (!*((_DWORD *)this + 106))
  {
    *a5 = U_INVALID_STATE_ERROR;
    return a3;
  }
  int SubMessage = (const icu::MessagePattern *)icu::SelectFormat::findSubMessage((icu::SelectFormat *)((char *)this + 328), 0, (uint64_t)a2, (const icu::UnicodeString *)a5, v15);
  if (*((_DWORD *)this + 84) != 1)
  {
    uint64_t v18 = *((void *)this + 52);
    uint64_t v19 = v18 + 16 * (int)SubMessage;
    int v20 = *(_DWORD *)(v19 + 4) + *(unsigned __int16 *)(v19 + 8);
    int v21 = *(_DWORD *)(v19 + 12);
    if (v21 <= (int)SubMessage) {
      int v21 = (int)SubMessage;
    }
    icu::UnicodeString::doAppend((uint64_t)a3, (icu::SelectFormat *)((char *)this + 344), v20, (*(_DWORD *)(v18 + 16 * v21 + 4) - v20));
    return a3;
  }

  return (icu::UnicodeString *)icu::MessageImpl::appendSubMessageWithoutSkipSyntax((icu::SelectFormat *)((char *)this + 328), SubMessage, a3, v17);
}

uint64_t icu::SelectFormat::findSubMessage(icu::SelectFormat *this, const icu::MessagePattern *a2, uint64_t a3, const icu::UnicodeString *a4, UErrorCode *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  int v7 = (int)a2;
  memset(v16, 0, sizeof(v16));
  UErrorCode v15 = "o";
  icu::UnicodeString::UnicodeString(v16, 0, &v15);
  uint64_t v5 = 0;
  int v9 = *((_DWORD *)this + 24);
  unsigned int v10 = (_DWORD *)*((void *)this + 11);
  do
  {
    int v11 = &v10[4 * v7];
    unsigned int v10 = (_DWORD *)*v11;
    if (v10 == 6) {
      break;
    }
    uint64_t v12 = v7 + 1;
    if (sub_18C952C24((uint64_t)this, (uint64_t)v11, a3))
    {
      uint64_t v5 = v12;
      break;
    }
    if (!v5)
    {
      if (sub_18C952C24((uint64_t)this, (uint64_t)v11, (uint64_t)v16)) {
        uint64_t v5 = v12;
      }
      else {
        uint64_t v5 = 0;
      }
    }
    unsigned int v10 = (_DWORD *)*((void *)this + 11);
    int v13 = v10[4 * v12 + 3];
    if (v13 <= (int)v12) {
      int v13 = v12;
    }
    int v7 = v13 + 1;
  }
  while (v13 + 1 < v9);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  return v5;
}

icu::UnicodeString *icu::SelectFormat::toPattern(icu::SelectFormat *this, icu::UnicodeString *a2)
{
  if (*((_DWORD *)this + 106))
  {
    unsigned int v3 = *((unsigned __int16 *)this + 176);
    int v4 = (__int16)v3;
    unsigned int v5 = v3 >> 5;
    if (v4 >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *((unsigned int *)this + 89);
    }
    icu::UnicodeString::doAppend((uint64_t)a2, (icu::SelectFormat *)((char *)this + 344), 0, v6);
  }
  else
  {
    icu::UnicodeString::setToBogus(a2);
  }
  return a2;
}

uint64_t *icu::SelectFormat::clone@<X0>(icu::SelectFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x1C8, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Format::Format((uint64_t)v4, (uint64_t)this);
    uint64_t *v5 = (uint64_t)&unk_1EDA528A8;
    icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v5 + 41), (icu::SelectFormat *)((char *)this + 328));
  }
  return v5;
}

uint64_t icu::SelectFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    icu::MessagePattern::operator=(a1 + 328, a2 + 328);
  }
  return a1;
}

uint64_t icu::SelectFormat::operator==(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = icu::Format::operator==(a1, a2);
  if (result)
  {
    return icu::MessagePattern::operator==((uint64_t)(a1 + 41), (uint64_t)(a2 + 41));
  }
  return result;
}

uint64_t icu::SelectFormat::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) ^ 1;
}

void icu::SelectFormat::parseObject(icu::SelectFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  *((_DWORD *)a4 + 3) = *((_DWORD *)a4 + 2);
}

void *icu::SharedBreakIterator::SharedBreakIterator(void *this, icu::BreakIterator *a2)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDA52918;
  this[3] = a2;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDA52918;
  this[3] = a2;
  return this;
}

void icu::SharedBreakIterator::~SharedBreakIterator(icu::SharedBreakIterator *this)
{
  *(void *)this = &unk_1EDA52918;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::SharedObject::~SharedObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::SharedBreakIterator::~SharedBreakIterator(this);

  icu::UMemory::operator delete(v1);
}

void *icu::SimpleTimeZone::getStaticClassID(icu::SimpleTimeZone *this)
{
  return &unk_1E91926B8;
}

void *icu::SimpleTimeZone::getDynamicClassID(icu::SimpleTimeZone *this)
{
  return &unk_1E91926B8;
}

double icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone *this, int a2, UChar **a3)
{
  int v4 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(void *)int v4 = &unk_1EDA52958;
  *((_WORD *)v4 + 36) = 0;
  *((unsigned char *)v4 + 74) = 0;
  *((_DWORD *)v4 + 23) = 0;
  *((_DWORD *)v4 + 24) = 0;
  *(void *)((char *)v4 + 76) = 0;
  *(void *)((char *)v4 + 83) = 0;
  *((_DWORD *)v4 + 25) = a2;
  *((unsigned char *)v4 + 104) = 0;
  *(void *)((char *)v4 + 108) = 0x100000001;
  *((_DWORD *)v4 + 29) = 3600000;
  *((unsigned char *)v4 + 120) = 0;
  double result = 0.0;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  return result;
}

double icu::SimpleTimeZone::clearTransitionRules(icu::SimpleTimeZone *this)
{
  *((unsigned char *)this + 120) = 0;
  double result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

icu::SimpleTimeZone *icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone *this, int a2, UChar **a3, char a4, char a5, char a6, int a7, char a8, char a9, char a10, int a11, UErrorCode *a12)
{
  uint64_t v18 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(void *)uint64_t v18 = &unk_1EDA52958;
  *((unsigned char *)v18 + 120) = 0;
  *((_OWORD *)v18 + 8) = 0u;
  *((_OWORD *)v18 + 9) = 0u;
  *((_DWORD *)v18 + 24) = 0;
  *((_DWORD *)v18 + 25) = a2;
  *((unsigned char *)v18 + 72) = a4;
  *((unsigned char *)v18 + 73) = a5;
  *((unsigned char *)v18 + 74) = a6;
  *((unsigned char *)v18 + 88) = a8;
  *((unsigned char *)v18 + 89) = a9;
  *((unsigned char *)v18 + 90) = a10;
  *((void *)v18 + 10) = 0;
  *((_DWORD *)v18 + 19) = a7;
  *((_DWORD *)v18 + 29) = 3600000;
  *((_DWORD *)v18 + 23) = a11;
  *(void *)((char *)v18 + 108) = 0x100000001;
  icu::SimpleTimeZone::decodeStartRule((uint64_t)v18, a12);
  icu::SimpleTimeZone::decodeEndRule((uint64_t)this, a12);
  return this;
}

{
  return icu::SimpleTimeZone::SimpleTimeZone(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t icu::SimpleTimeZone::construct(uint64_t a1, int a2, char a3, char a4, char a5, int a6, int a7, char a8, char a9, char a10, int a11, int a12, int a13, UErrorCode *a14)
{
  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = a2;
  *(unsigned char *)(a1 + 72) = a3;
  *(unsigned char *)(a1 + 73) = a4;
  *(unsigned char *)(a1 + 74) = a5;
  *(_DWORD *)(a1 + 76) = a6;
  *(_DWORD *)(a1 + 80) = a7;
  *(unsigned char *)(a1 + 88) = a8;
  *(unsigned char *)(a1 + 89) = a9;
  *(unsigned char *)(a1 + 90) = a10;
  *(_DWORD *)(a1 + 84) = a12;
  *(_DWORD *)(a1 + 116) = a13;
  *(_DWORD *)(a1 + 92) = a11;
  *(void *)(a1 + 108) = 0x100000001;
  icu::SimpleTimeZone::decodeStartRule(a1, a14);
  uint64_t result = icu::SimpleTimeZone::decodeEndRule(a1, a14);
  if (!a13) {
    *a14 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return result;
}

icu::SimpleTimeZone *icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone *this, int a2, UChar **a3, char a4, char a5, char a6, int a7, char a8, char a9, char a10, int a11, int a12, UErrorCode *a13)
{
  uint64_t v18 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(void *)uint64_t v18 = &unk_1EDA52958;
  *((unsigned char *)v18 + 120) = 0;
  *((_OWORD *)v18 + 8) = 0u;
  *((_OWORD *)v18 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v18, a2, a4, a5, a6, a7, 0, a8, a9, a10, a11, 0, a12, a13);
  return this;
}

{
  icu::TimeZone *v18;

  uint64_t v18 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(void *)uint64_t v18 = &unk_1EDA52958;
  *((unsigned char *)v18 + 120) = 0;
  *((_OWORD *)v18 + 8) = 0u;
  *((_OWORD *)v18 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v18, a2, a4, a5, a6, a7, 0, a8, a9, a10, a11, 0, a12, a13);
  return this;
}

icu::BasicTimeZone *icu::SimpleTimeZone::SimpleTimeZone(icu::BasicTimeZone *a1, int a2, UChar **a3, char a4, char a5, char a6, int a7, int a8, char a9, char a10, char a11, int a12, int a13, int a14, UErrorCode *a15)
{
  uint64_t v19 = icu::BasicTimeZone::BasicTimeZone(a1, a3);
  *(void *)uint64_t v19 = &unk_1EDA52958;
  *((unsigned char *)v19 + 120) = 0;
  *((_OWORD *)v19 + 8) = 0u;
  *((_OWORD *)v19 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v19, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return a1;
}

{
  icu::TimeZone *v19;

  uint64_t v19 = icu::BasicTimeZone::BasicTimeZone(a1, a3);
  *(void *)uint64_t v19 = &unk_1EDA52958;
  *((unsigned char *)v19 + 120) = 0;
  *((_OWORD *)v19 + 8) = 0u;
  *((_OWORD *)v19 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v19, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return a1;
}

uint64_t icu::SimpleTimeZone::decodeRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  icu::SimpleTimeZone::decodeStartRule((uint64_t)this, a2);

  return icu::SimpleTimeZone::decodeEndRule((uint64_t)this, a2);
}

void icu::SimpleTimeZone::~SimpleTimeZone(icu::SimpleTimeZone *this)
{
  *(void *)this = &unk_1EDA52958;
  icu::SimpleTimeZone::deleteTransitionRules(this);

  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDA52958;
  icu::SimpleTimeZone::deleteTransitionRules(this);

  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDA52958;
  icu::SimpleTimeZone::deleteTransitionRules(this);
  icu::BasicTimeZone::~BasicTimeZone(this);

  icu::UMemory::operator delete(v2);
}

double icu::SimpleTimeZone::deleteTransitionRules(icu::SimpleTimeZone *this)
{
  unsigned int v3 = (_OWORD *)((char *)this + 128);
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v4 = *((void *)this + 17);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 18);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 19);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((unsigned char *)this + 120) = 0;
  double result = 0.0;
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  return result;
}

uint64_t icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone *this, UChar **a2)
{
  unsigned int v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)unsigned int v3 = &unk_1EDA52958;

  return icu::SimpleTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

{
  icu::TimeZone *v3;
  uint64_t vars8;

  unsigned int v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)unsigned int v3 = &unk_1EDA52958;

  return icu::SimpleTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

uint64_t icu::SimpleTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::TimeZone::operator=(a1, a2);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
    *(void *)(a1 + 76) = *(void *)(a2 + 76);
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
    *(void *)(a1 + 108) = *(void *)(a2 + 108);
    *(void *)(a1 + 92) = *(void *)(a2 + 92);
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(unsigned char *)(a1 + 120) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
  }
  return a1;
}

uint64_t icu::SimpleTimeZone::operator==(uint64_t a1, void *a2)
{
  if ((void *)a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*a2 - 8));
  if (result)
  {
    uint64_t result = icu::TimeZone::operator==(a1, (uint64_t)a2);
    if (result) {
      return (*(unsigned int (**)(uint64_t, void *))(*(void *)a1 + 88))(a1, a2) != 0;
    }
  }
  return result;
}

icu::BasicTimeZone *icu::SimpleTimeZone::clone@<X0>(UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::BasicTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0xA0, a2);
  if (result)
  {
    uint64_t v5 = icu::BasicTimeZone::BasicTimeZone(result, this);
    *(void *)uint64_t v5 = &unk_1EDA52958;
    return (icu::BasicTimeZone *)icu::SimpleTimeZone::operator=((uint64_t)v5, (uint64_t)this);
  }
  return result;
}

uint64_t icu::SimpleTimeZone::setStartYear(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  *(unsigned char *)(this + 120) = 0;
  return this;
}

uint64_t icu::SimpleTimeZone::setStartRule(uint64_t a1, char a2, char a3, char a4, int a5, int a6, UErrorCode *a7)
{
  *(unsigned char *)(a1 + 72) = a2;
  *(unsigned char *)(a1 + 73) = a3;
  *(unsigned char *)(a1 + 74) = a4;
  *(_DWORD *)(a1 + 76) = a5;
  *(_DWORD *)(a1 + 80) = a6;
  uint64_t result = icu::SimpleTimeZone::decodeStartRule(a1, a7);
  *(unsigned char *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::decodeStartRule(uint64_t this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    int v2 = *(char *)(this + 73);
    if (!*(unsigned char *)(this + 73))
    {
      *(unsigned char *)(this + 104) = 0;
      return this;
    }
    int v3 = *(unsigned __int8 *)(this + 89);
    *(unsigned char *)(this + 104) = *(unsigned char *)(this + 89) != 0;
    if (v3 && !*(_DWORD *)(this + 116)) {
      *(_DWORD *)(this + 116) = 3600000;
    }
    unint64_t v4 = *(unsigned __int8 *)(this + 72);
    if (v4 >= 0xC || *(_DWORD *)(this + 76) > 0x5265C00u || *(_DWORD *)(this + 80) >= 3u) {
      goto LABEL_24;
    }
    int v5 = *(char *)(this + 74);
    if (*(unsigned char *)(this + 74))
    {
      if (v5 <= 0)
      {
        int v7 = -v5;
        *(unsigned char *)(this + 74) = -(char)v5;
        if (v2 <= 0)
        {
          int v2 = -v2;
          *(unsigned char *)(this + 73) = v2;
          int v6 = 4;
        }
        else
        {
          int v6 = 3;
        }
      }
      else
      {
        int v6 = 2;
        LOBYTE(v7) = *(unsigned char *)(this + 74);
      }
      *(_DWORD *)(this + 108) = v6;
      if ((char)v7 >= 8) {
        goto LABEL_24;
      }
      if (v5 >= 1)
      {
        if ((v2 - 6) > 0xF4u) {
          return this;
        }
        goto LABEL_24;
      }
    }
    else
    {
      *(_DWORD *)(this + 108) = 1;
    }
    if ((char)v2 >= 1 && icu::SimpleTimeZone::STATICMONTHLENGTH[v4] >= (char)v2) {
      return this;
    }
LABEL_24:
    *a2 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return this;
}

uint64_t icu::SimpleTimeZone::setStartRule(uint64_t a1, char a2, char a3, int a4, int a5, UErrorCode *a6)
{
  *(unsigned char *)(a1 + 72) = a2;
  *(unsigned char *)(a1 + 73) = a3;
  *(unsigned char *)(a1 + 74) = 0;
  *(_DWORD *)(a1 + 76) = a4;
  *(_DWORD *)(a1 + 80) = a5;
  uint64_t result = icu::SimpleTimeZone::decodeStartRule(a1, a6);
  *(unsigned char *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::setStartRule(uint64_t a1, char a2, int a3, char a4, int a5, int a6, int a7, UErrorCode *a8)
{
  *(unsigned char *)(a1 + 72) = a2;
  if (a7) {
    LOBYTE(v9) = a3;
  }
  else {
    int v9 = -a3;
  }
  *(unsigned char *)(a1 + 73) = v9;
  *(unsigned char *)(a1 + 74) = -a4;
  *(_DWORD *)(a1 + 76) = a5;
  *(_DWORD *)(a1 + 80) = a6;
  uint64_t result = icu::SimpleTimeZone::decodeStartRule(a1, a8);
  *(unsigned char *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::setEndRule(uint64_t a1, char a2, char a3, char a4, int a5, int a6, UErrorCode *a7)
{
  *(unsigned char *)(a1 + 88) = a2;
  *(unsigned char *)(a1 + 89) = a3;
  *(unsigned char *)(a1 + 90) = a4;
  *(_DWORD *)(a1 + 92) = a5;
  *(_DWORD *)(a1 + 84) = a6;
  uint64_t result = icu::SimpleTimeZone::decodeEndRule(a1, a7);
  *(unsigned char *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::decodeEndRule(uint64_t this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    if (*(unsigned char *)(this + 73))
    {
      int v2 = *(unsigned __int8 *)(this + 89);
      *(unsigned char *)(this + 104) = *(unsigned char *)(this + 89) != 0;
      if (!v2) {
        return this;
      }
      if (!*(_DWORD *)(this + 116)) {
        *(_DWORD *)(this + 116) = 3600000;
      }
    }
    else
    {
      *(unsigned char *)(this + 104) = 0;
      LOBYTE(v2) = *(unsigned char *)(this + 89);
      if (!(_BYTE)v2) {
        return this;
      }
    }
    unint64_t v3 = *(unsigned __int8 *)(this + 88);
    if (v3 > 0xB || *(_DWORD *)(this + 92) > 0x5265C00u || *(_DWORD *)(this + 84) > 2u) {
      goto LABEL_24;
    }
    int v4 = *(char *)(this + 90);
    if (*(unsigned char *)(this + 90))
    {
      if (v4 <= 0)
      {
        int v6 = -v4;
        *(unsigned char *)(this + 90) = -(char)v4;
        if ((char)v2 <= 0)
        {
          *(unsigned char *)(this + 89) = -(char)v2;
          int v5 = 4;
        }
        else
        {
          int v5 = 3;
        }
      }
      else
      {
        int v5 = 2;
        LOBYTE(v6) = *(unsigned char *)(this + 90);
      }
      *(_DWORD *)(this + 112) = v5;
      if ((char)v6 > 7) {
        goto LABEL_24;
      }
      if (v4 >= 1)
      {
        if (*(unsigned __int8 *)(this + 89) - 6 >= 0xF5) {
          return this;
        }
        goto LABEL_24;
      }
    }
    else
    {
      *(_DWORD *)(this + 112) = 1;
    }
    int v7 = *(char *)(this + 89);
    if (v7 >= 1 && v7 <= icu::SimpleTimeZone::STATICMONTHLENGTH[v3]) {
      return this;
    }
LABEL_24:
    *a2 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return this;
}

uint64_t icu::SimpleTimeZone::setEndRule(uint64_t a1, char a2, char a3, int a4, int a5, UErrorCode *a6)
{
  *(unsigned char *)(a1 + 88) = a2;
  *(unsigned char *)(a1 + 89) = a3;
  *(unsigned char *)(a1 + 90) = 0;
  *(_DWORD *)(a1 + 92) = a4;
  *(_DWORD *)(a1 + 84) = a5;
  uint64_t result = icu::SimpleTimeZone::decodeEndRule(a1, a6);
  *(unsigned char *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::setEndRule(uint64_t a1, char a2, int a3, char a4, int a5, int a6, int a7, UErrorCode *a8)
{
  *(unsigned char *)(a1 + 88) = a2;
  if (a7) {
    LOBYTE(v9) = a3;
  }
  else {
    int v9 = -a3;
  }
  *(unsigned char *)(a1 + 89) = v9;
  *(unsigned char *)(a1 + 90) = -a4;
  *(_DWORD *)(a1 + 92) = a5;
  *(_DWORD *)(a1 + 84) = a6;
  uint64_t result = icu::SimpleTimeZone::decodeEndRule(a1, a8);
  *(unsigned char *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::getOffset(icu::SimpleTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, UErrorCode *a8)
{
  if (a4 < 0xC) {
    return (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)this + 40))(this);
  }
  *a8 = U_ILLEGAL_ARGUMENT_ERROR;
  return 0;
}

uint64_t icu::SimpleTimeZone::getOffset(icu::SimpleTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  if (a4 < 0xC) {
    return (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)this + 168))(this);
  }
  *a9 = U_ILLEGAL_ARGUMENT_ERROR;
  return 0xFFFFFFFFLL;
}

uint64_t icu::SimpleTimeZone::getOffset(icu::SimpleTimeZone *this, unsigned int a2, int a3, unsigned int a4, int a5, char a6, unsigned int a7, int a8, int a9, UErrorCode *a10)
{
  if (*(int *)a10 > 0) {
    return 0;
  }
  if (a2 > 1
    || a4 > 0xB
    || a5 < 1
    || ((a9 - 32) >= 0xFFFFFFFC ? (BOOL v12 = (a8 - 32) >= 0xFFFFFFFC) : (BOOL v12 = 0),
        v12 ? (BOOL v13 = a7 > 0x5265BFF) : (BOOL v13 = 1),
        v13 || (a6 - 8) < 0xF9u || a5 > a8))
  {
    *a10 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v10 = *((unsigned int *)this + 25);
    if (*((unsigned char *)this + 104) && a2 == 1 && *((_DWORD *)this + 24) <= a3)
    {
      int v15 = *((char *)this + 72);
      int v16 = *((char *)this + 88);
      if (*((_DWORD *)this + 20) == 2) {
        int v17 = -(int)v10;
      }
      else {
        int v17 = 0;
      }
      char v18 = a5;
      unsigned int v19 = a6;
      char v30 = a4;
      int v29 = (char)a8;
      int v20 = icu::SimpleTimeZone::compareToRule(a4, (char)a8, a9, a5, a6, a7, v17, *((_DWORD *)this + 27), v15, *((unsigned char *)this + 74), *((unsigned char *)this + 73), *((_DWORD *)this + 19));
      unsigned int v21 = 0;
      if (v15 > v16 != v20 >= 0)
      {
        int v22 = *((_DWORD *)this + 21);
        if (v22 == 2)
        {
          int v23 = -(int)v10;
        }
        else if (v22)
        {
          int v23 = 0;
        }
        else
        {
          int v23 = *((_DWORD *)this + 29);
        }
        unsigned int v21 = icu::SimpleTimeZone::compareToRule(v30, v29, a9, v18, v19, a7, v23, *((_DWORD *)this + 28), v16, *((unsigned char *)this + 90), *((unsigned char *)this + 89), *((_DWORD *)this + 23)) >> 31;
      }
      BOOL v25 = v20 >= 0;
      if (v20 >= 0) {
        int v26 = 1;
      }
      else {
        int v26 = v21;
      }
      if (v15 > v16) {
        BOOL v25 = 0;
      }
      char v27 = v25 & v21;
      if (v15 > v16) {
        int v28 = v26;
      }
      else {
        int v28 = 0;
      }
      if ((v27 & 1) != 0 || v28) {
        return (*((_DWORD *)this + 29) + v10);
      }
    }
  }
  return v10;
}

uint64_t icu::SimpleTimeZone::compareToRule(char a1, int a2, char a3, char a4, unsigned int a5, int a6, int a7, int a8, char a9, char a10, char a11, signed int a12)
{
  signed int v12 = a7 + a6;
  if (a7 + a6 <= 86399999)
  {
    if (v12 < 0)
    {
      do
      {
        v12 += 86400000;
        a5 = (char)a5 + 5 - 7 * (((18725 * ((char)a5 + 5)) >> 17) + ((18725 * ((char)a5 + 5)) >> 31)) + 1;
        char v14 = (char)(a4 - 1) < 1;
        if ((char)(a4 - 1) >= 1) {
          --a4;
        }
        else {
          a4 = a3;
        }
        a1 -= v14;
      }
      while (v12 >= 0x5265C00);
    }
  }
  else
  {
    do
    {
      v12 -= 86400000;
      int v13 = (char)(a4 + 1);
      a5 = a5
         - 7
         * (((char)((unsigned __int16)(147 * (char)a5) >> 8) >> 2)
          + (((a5 + ((-109 * (char)a5) >> 8)) & 0x80) >> 7))
         + 1;
      if (v13 <= a2) {
        ++a4;
      }
      else {
        a4 = 1;
      }
      if (v13 > a2) {
        ++a1;
      }
    }
    while ((v12 + 86400000) > 0xA4CB7FF);
  }
  if (a9 > a1) {
    return 0xFFFFFFFFLL;
  }
  if (a9 < a1) {
    return 1;
  }
  LOBYTE(v16) = a11;
  if (a11 >= a2) {
    LOBYTE(v16) = a2;
  }
  switch(a8)
  {
    case 1:
      int v16 = (char)v16;
      break;
    case 2:
      int v17 = (char)v16;
      int v18 = 7 * (char)v16;
      if (v17 < 1)
      {
        __int16 v21 = a2 + 7 + (char)a5 - (a10 + a4);
        int v16 = a2 + 7 + v18 + (__int16)(7 * (v21 / 7) - v21);
      }
      else
      {
        int v16 = v18 + (__int16)(a10 + (char)~(_BYTE)a5 + a4 + 7) % 7 - 6;
      }
      break;
    case 3:
      int v19 = (__int16)(a10 - ((char)v16 + (char)a5) + a4 + 49) % 7;
      goto LABEL_26;
    case 4:
      int v20 = (char)v16 - a10 + (char)a5 - a4 + 49;
      int v19 = 7 * (v20 / 7) - v20;
LABEL_26:
      int v16 = v19 + (char)v16;
      break;
    default:
      int v16 = 0;
      break;
  }
  if (v16 > a4) {
    return 0xFFFFFFFFLL;
  }
  if (v16 < a4) {
    return 1;
  }
  if (v12 >= a12) {
    return v12 > a12;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t icu::SimpleTimeZone::getOffsetFromLocal(uint64_t result, int a2, char a3, _DWORD *a4, int *a5, int *a6, double a7)
{
  if (*a6 <= 0)
  {
    uint64_t v13 = result;
    *a4 = (*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result);
    int v20 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v14 = sub_18C93E158(86400000, &v18, a7);
    int v21 = 0;
    sub_18C93E314(&v20, (_DWORD *)&v19 + 1, &v19, (int *)&v18 + 1, &v21, (double)v14);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 40))(v13, 1);
    int v15 = result - *a4;
    *a5 = v15;
    if (*a6 <= 0)
    {
      if (v15 >= 1)
      {
        if ((a2 & 3) != 1 && ((a2 & 3) == 3 || (~a2 & 0xC) == 0)) {
          return result;
        }
LABEL_11:
        int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 104))(v13);
        int v17 = sub_18C93E158(86400000, &v18, a7 - (double)v16);
        int v21 = 0;
        sub_18C93E314(&v20, (_DWORD *)&v19 + 1, &v19, (int *)&v18 + 1, &v21, (double)v17);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 40))(v13, 1);
        *a5 = result - *a4;
        return result;
      }
      if ((a3 & 3) != 1 && ((a3 & 3) == 3 || (a3 & 0xC) == 4)) {
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t icu::SimpleTimeZone::getRawOffset(icu::SimpleTimeZone *this)
{
  return *((unsigned int *)this + 25);
}

uint64_t icu::SimpleTimeZone::setRawOffset(uint64_t this, int a2)
{
  *(_DWORD *)(this + 100) = a2;
  *(unsigned char *)(this + 120) = 0;
  return this;
}

uint64_t icu::SimpleTimeZone::setDSTSavings(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2) {
    *(_DWORD *)(this + 116) = a2;
  }
  else {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(unsigned char *)(this + 120) = 0;
  return this;
}

uint64_t icu::SimpleTimeZone::getDSTSavings(icu::SimpleTimeZone *this)
{
  return *((unsigned int *)this + 29);
}

uint64_t icu::SimpleTimeZone::useDaylightTime(icu::SimpleTimeZone *this)
{
  return *((char *)this + 104);
}

uint64_t icu::SimpleTimeZone::inDaylightTime(icu::SimpleTimeZone *this, double a2, UErrorCode *a3)
{
  unint64_t v3 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v3 > 0) {
    return 0;
  }
  unsigned int v8 = (icu::GregorianCalendar *)icu::UMemory::operator new(v3, (icu::UMemory *)0x290, (unint64_t)a3);
  if (!v8)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return 0;
  }
  int v9 = v8;
  uint64_t v10 = icu::GregorianCalendar::GregorianCalendar(v8, this, a3);
  icu::Calendar::setTimeInMillis(v10, a2, a3);
  uint64_t v11 = (*(uint64_t (**)(icu::GregorianCalendar *, UErrorCode *))(*(void *)v9 + 96))(v9, a3);
  (*(void (**)(icu::GregorianCalendar *))(*(void *)v9 + 8))(v9);
  return v11;
}

BOOL icu::SimpleTimeZone::hasSameRules(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    if (*(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)
      || *(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 104))
    {
      if (*(_DWORD *)(a1 + 116) == *(_DWORD *)(a2 + 116)
        && *(_DWORD *)(a1 + 108) == *(_DWORD *)(a2 + 108)
        && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72)
        && *(unsigned __int8 *)(a1 + 73) == *(unsigned __int8 *)(a2 + 73)
        && *(unsigned __int8 *)(a1 + 74) == *(unsigned __int8 *)(a2 + 74)
        && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76)
        && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
        && *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112)
        && *(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88)
        && *(unsigned __int8 *)(a1 + 89) == *(unsigned __int8 *)(a2 + 89)
        && *(unsigned __int8 *)(a1 + 90) == *(unsigned __int8 *)(a2 + 90)
        && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92)
        && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84))
      {
        return *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96);
      }
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t icu::SimpleTimeZone::getNextTransition(icu::TimeZoneTransition **this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  if (*((unsigned char *)this + 104))
  {
    UErrorCode v22 = U_ZERO_ERROR;
    icu::SimpleTimeZone::checkTransitionRules((icu::SimpleTimeZone *)this, &v22);
    uint64_t result = 0;
    if (v22 > U_ZERO_ERROR) {
      return result;
    }
    double Time = icu::TimeZoneTransition::getTime(this[17]);
    if (Time > a2 || a3 && Time == a2) {
      icu::TimeZoneTransition::operator=(a4, (uint64_t)this[17]);
    }
    double v20 = 0.0;
    double v21 = 0.0;
    uint64_t v11 = this[19];
    uint64_t v10 = this + 19;
    uint64_t v12 = (uint64_t)*(v10 - 1);
    uint64_t RawOffset = icu::TimeZoneRule::getRawOffset(v11);
    uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(*v10);
    LODWORD(v12) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v12 + 72))(v12, RawOffset, DSTSavings, a3, &v21, a2);
    int v15 = *v10;
    uint64_t v16 = icu::TimeZoneRule::getRawOffset(*(v10 - 1));
    uint64_t v17 = icu::TimeZoneRule::getDSTSavings(*(v10 - 1));
    uint64_t result = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v15 + 72))(v15, v16, v17, a3, &v20, a2);
    if (!v12)
    {
      if (!result) {
        return result;
      }
      double v18 = v20;
      uint64_t v19 = v10 - 1;
      goto LABEL_14;
    }
    if (!result || (double v18 = v20, v21 < v20))
    {
      double v18 = v21;
      uint64_t v19 = v10--;
LABEL_14:
      icu::TimeZoneTransition::setTime((uint64_t)a4, v18);
      icu::TimeZoneTransition::setFrom(a4, *v19);
      icu::TimeZoneTransition::setTo(a4, *v10);
      return 1;
    }
    uint64_t v19 = v10 - 1;
    if (v20 < v21) {
      goto LABEL_14;
    }
  }
  return 0;
}

void icu::SimpleTimeZone::checkTransitionRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    umtx_lock((atomic_ullong *)&unk_1EB20BB18);
    if (!*((unsigned char *)this + 120)) {
      icu::SimpleTimeZone::initTransitionRules(this, a2);
    }
    umtx_unlock((std::mutex **)&unk_1EB20BB18);
  }
}

uint64_t icu::SimpleTimeZone::getPreviousTransition(icu::SimpleTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  if (!*((unsigned char *)this + 104)) {
    return 0;
  }
  UErrorCode v22 = U_ZERO_ERROR;
  icu::SimpleTimeZone::checkTransitionRules(this, &v22);
  uint64_t result = 0;
  if (v22 > U_ZERO_ERROR) {
    return result;
  }
  double Time = icu::TimeZoneTransition::getTime(*((icu::TimeZoneTransition **)this + 17));
  if (Time > a2 || !a3 && Time == a2) {
    return 0;
  }
  double v20 = 0.0;
  double v21 = 0.0;
  uint64_t v11 = (icu::TimeZoneRule *)*((void *)this + 19);
  uint64_t v10 = (icu::TimeZoneRule **)((char *)this + 152);
  uint64_t v12 = (uint64_t)*(v10 - 1);
  uint64_t RawOffset = icu::TimeZoneRule::getRawOffset(v11);
  uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(*v10);
  LODWORD(v12) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v12 + 80))(v12, RawOffset, DSTSavings, a3, &v21, a2);
  int v15 = *v10;
  uint64_t v16 = icu::TimeZoneRule::getRawOffset(*(v10 - 1));
  uint64_t v17 = icu::TimeZoneRule::getDSTSavings(*(v10 - 1));
  uint64_t result = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v15 + 80))(v15, v16, v17, a3, &v20, a2);
  if (v12)
  {
    if (result && (double v18 = v20, v21 <= v20))
    {
      uint64_t v19 = v10 - 1;
      if (v20 <= v21) {
        return 0;
      }
    }
    else
    {
      double v18 = v21;
      uint64_t v19 = v10--;
    }
LABEL_15:
    icu::TimeZoneTransition::setTime((uint64_t)a4, v18);
    icu::TimeZoneTransition::setFrom(a4, *v19);
    icu::TimeZoneTransition::setTo(a4, *v10);
    return 1;
  }
  if (result)
  {
    double v18 = v20;
    uint64_t v19 = v10 - 1;
    goto LABEL_15;
  }
  return result;
}

icu::SimpleTimeZone *icu::SimpleTimeZone::initTransitionRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 <= 0)
  {
    int v2 = this;
    if (!*((unsigned char *)this + 120))
    {
      icu::SimpleTimeZone::deleteTransitionRules(this);
      long long v77 = 0u;
      uint64_t v80 = 0;
      long long v79 = 0u;
      long long v78 = 0u;
      long long v76 = (UChar *)&unk_1EDA47700;
      LOWORD(v77) = 2;
      icu::UnicodeString::operator=(&v76, (UChar **)v2 + 1);
      if (*((unsigned char *)v2 + 104))
      {
        double v72 = 0.0;
        double v73 = 0.0;
        int v5 = *((_DWORD *)v2 + 20);
        if (v5 == 1) {
          int v6 = 1;
        }
        else {
          int v6 = 2 * (v5 == 2);
        }
        int v7 = (uint64_t *)*((unsigned int *)v2 + 27);
        switch((int)v7)
        {
          case 1:
            unsigned int v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v8) {
              goto LABEL_28;
            }
            int v9 = (icu::DateTimeRule *)v8;
            icu::DateTimeRule::DateTimeRule((uint64_t)v8, *((char *)v2 + 72), *((char *)v2 + 73), *((_DWORD *)v2 + 19), v6);
            goto LABEL_20;
          case 2:
            uint64_t v16 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v16) {
              goto LABEL_28;
            }
            int v9 = (icu::DateTimeRule *)v16;
            icu::DateTimeRule::DateTimeRule((uint64_t)v16, *((char *)v2 + 72), *((char *)v2 + 73), *((char *)v2 + 74), *((_DWORD *)v2 + 19), v6);
            goto LABEL_20;
          case 3:
            uint64_t v17 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v17) {
              goto LABEL_28;
            }
            int v9 = (icu::DateTimeRule *)v17;
            int v18 = *((char *)v2 + 72);
            int v19 = *((char *)v2 + 73);
            int v20 = *((char *)v2 + 74);
            int v21 = *((_DWORD *)v2 + 19);
            int v22 = 1;
            goto LABEL_19;
          case 4:
            uint64_t v17 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v17)
            {
LABEL_28:
              uint64_t v15 = 7;
LABEL_30:
              *a2 = v15;
              return (icu::SimpleTimeZone *)icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v76);
            }
            int v9 = (icu::DateTimeRule *)v17;
            int v18 = *((char *)v2 + 72);
            int v19 = *((char *)v2 + 73);
            int v20 = *((char *)v2 + 74);
            int v21 = *((_DWORD *)v2 + 19);
            int v22 = 0;
LABEL_19:
            icu::DateTimeRule::DateTimeRule((uint64_t)v17, v18, v19, v20, v22, v21, v6);
LABEL_20:
            int v23 = icu::UMemory::operator new(v11, (icu::UMemory *)0x60, v10);
            if (!v23)
            {
              *((void *)v2 + 19) = 0;
              break;
            }
            long long v24 = (icu::AnnualTimeZoneRule *)v23;
            icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(DST)");
            icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
            int v25 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64))(v2);
            int v26 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 104))(v2);
            icu::AnnualTimeZoneRule::AnnualTimeZoneRule(v24, v75, v25, v26, v9, *((_DWORD *)v2 + 24), 0x7FFFFFFF);
            *((void *)v2 + 19) = v24;
            icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v75);
            icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v74);
            uint64_t v29 = *((void *)v2 + 19);
            if (!v29) {
              break;
            }
            uint64_t v30 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64))(v2);
            (*(void (**)(uint64_t, uint64_t, void, double *))(*(void *)v29 + 56))(v29, v30, 0, &v72);
            int v32 = *((_DWORD *)v2 + 21);
            if (v32 == 1) {
              int v33 = 1;
            }
            else {
              int v33 = 2 * (v32 == 2);
            }
            int v34 = (uint64_t *)*((unsigned int *)v2 + 28);
            switch((int)v34)
            {
              case 1:
                uint64_t v35 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v35) {
                  goto LABEL_55;
                }
                int v9 = (icu::DateTimeRule *)v35;
                icu::DateTimeRule::DateTimeRule((uint64_t)v35, *((char *)v2 + 88), *((char *)v2 + 89), *((_DWORD *)v2 + 23), v33);
                break;
              case 2:
                uint64_t v36 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v36) {
                  goto LABEL_55;
                }
                int v9 = (icu::DateTimeRule *)v36;
                icu::DateTimeRule::DateTimeRule((uint64_t)v36, *((char *)v2 + 88), *((char *)v2 + 89), *((char *)v2 + 90), *((_DWORD *)v2 + 23), v33);
                break;
              case 3:
                long long v37 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v37) {
                  goto LABEL_55;
                }
                int v9 = (icu::DateTimeRule *)v37;
                int v38 = *((char *)v2 + 88);
                int v39 = *((char *)v2 + 89);
                int v40 = *((char *)v2 + 90);
                int v41 = *((_DWORD *)v2 + 23);
                int v42 = 1;
                goto LABEL_38;
              case 4:
                long long v37 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v37) {
                  goto LABEL_55;
                }
                int v9 = (icu::DateTimeRule *)v37;
                int v38 = *((char *)v2 + 88);
                int v39 = *((char *)v2 + 89);
                int v40 = *((char *)v2 + 90);
                int v41 = *((_DWORD *)v2 + 23);
                int v42 = 0;
LABEL_38:
                icu::DateTimeRule::DateTimeRule((uint64_t)v37, v38, v39, v40, v42, v41, v33);
                break;
              default:
                break;
            }
            long long v43 = icu::UMemory::operator new(v34, (icu::UMemory *)0x60, v31);
            if (!v43)
            {
              *((void *)v2 + 18) = 0;
              break;
            }
            long long v44 = (icu::AnnualTimeZoneRule *)v43;
            icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(STD)");
            icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
            int v45 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64))(v2);
            icu::AnnualTimeZoneRule::AnnualTimeZoneRule(v44, v75, v45, 0, v9, *((_DWORD *)v2 + 24), 0x7FFFFFFF);
            *((void *)v2 + 18) = v44;
            icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)v75);
            icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)v74);
            uint64_t v48 = *((void *)v2 + 18);
            if (!v48) {
              break;
            }
            uint64_t v49 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64))(v2);
            uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(*((icu::TimeZoneRule **)v2 + 19));
            (*(void (**)(uint64_t, uint64_t, uint64_t, double *))(*(void *)v48 + 56))(v48, v49, DSTSavings, &v73);
            double v52 = v72;
            double v51 = v73;
            long long v55 = icu::UMemory::operator new(v54, (icu::UMemory *)0x50, v53);
            long long v56 = (icu::InitialTimeZoneRule *)v55;
            if (v51 >= v52)
            {
              if (!v55) {
                goto LABEL_54;
              }
              icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(STD)");
              icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
              int v67 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64))(v2);
              icu::InitialTimeZoneRule::InitialTimeZoneRule(v56, v75, v67, 0);
              *((void *)v2 + 16) = v56;
              icu::UnicodeString::~UnicodeString(v68, (icu::UnicodeString *)v75);
              icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v74);
              long long v71 = (uint64_t *)*((void *)v2 + 16);
              if (!v71) {
                break;
              }
              uint64_t v63 = icu::UMemory::operator new(v71, (icu::UMemory *)0x20, v70);
              if (v63)
              {
                double v64 = v72;
                long long v65 = (const icu::TimeZoneRule *)*((void *)v2 + 16);
                long long v66 = (const icu::TimeZoneRule *)*((void *)v2 + 19);
                goto LABEL_51;
              }
            }
            else
            {
              if (!v55) {
                goto LABEL_54;
              }
              icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(DST)");
              icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
              int v57 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64))(v2);
              int v58 = icu::TimeZoneRule::getDSTSavings(*((icu::TimeZoneRule **)v2 + 19));
              icu::InitialTimeZoneRule::InitialTimeZoneRule(v56, v75, v57, v58);
              *((void *)v2 + 16) = v56;
              icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)v75);
              icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)v74);
              long long v62 = (uint64_t *)*((void *)v2 + 16);
              if (!v62) {
                break;
              }
              uint64_t v63 = icu::UMemory::operator new(v62, (icu::UMemory *)0x20, v61);
              if (v63)
              {
                double v64 = v73;
                long long v65 = (const icu::TimeZoneRule *)*((void *)v2 + 16);
                long long v66 = (const icu::TimeZoneRule *)*((void *)v2 + 18);
LABEL_51:
                uint64_t v63 = (uint64_t *)icu::TimeZoneTransition::TimeZoneTransition((icu::TimeZoneTransition *)v63, v64, v65, v66);
              }
            }
            *((void *)v2 + 17) = v63;
            if (v63) {
              goto LABEL_12;
            }
            break;
          default:
            uint64_t v15 = 27;
            goto LABEL_30;
        }
      }
      else
      {
        uint64_t v12 = icu::UMemory::operator new((uint64_t *)*((unsigned __int8 *)v2 + 104), (icu::UMemory *)0x50, v4);
        if (v12)
        {
          uint64_t v13 = (icu::InitialTimeZoneRule *)v12;
          int v14 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64))(v2);
          icu::InitialTimeZoneRule::InitialTimeZoneRule(v13, &v76, v14, 0);
          *((void *)v2 + 16) = v13;
LABEL_12:
          uint64_t v15 = 1;
          *((unsigned char *)v2 + 120) = 1;
          return (icu::SimpleTimeZone *)icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v76);
        }
LABEL_54:
        *((void *)v2 + 16) = 0;
      }
LABEL_55:
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      icu::SimpleTimeZone::deleteTransitionRules(v2);
      return (icu::SimpleTimeZone *)icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v76);
    }
  }
  return this;
}

uint64_t icu::SimpleTimeZone::countTransitionRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  return 2 * (*((unsigned char *)this + 104) != 0);
}

void icu::SimpleTimeZone::getTimeZoneRules(icu::SimpleTimeZone *this, const icu::InitialTimeZoneRule **a2, const icu::TimeZoneRule **a3, int *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    icu::SimpleTimeZone::checkTransitionRules(this, a5);
    if (*(int *)a5 <= 0)
    {
      *a2 = (const icu::InitialTimeZoneRule *)*((void *)this + 16);
      unint64_t v10 = (const icu::TimeZoneRule *)*((void *)this + 18);
      if (v10)
      {
        int v11 = *a4;
        if (*a4 < 1)
        {
          LODWORD(v10) = 0;
        }
        else
        {
          *a3 = v10;
          LODWORD(v10) = 1;
        }
        if ((int)v10 < v11)
        {
          a3[v10] = (const icu::TimeZoneRule *)*((void *)this + 19);
          LODWORD(v10) = v10 + 1;
        }
      }
      *a4 = (int)v10;
    }
  }
}

void *icu::SimpleDateFormat::getStaticClassID(icu::SimpleDateFormat *this)
{
  return &unk_1E91926C0;
}

void *icu::SimpleDateFormat::getDynamicClassID(icu::SimpleDateFormat *this)
{
  return &unk_1E91926C0;
}

void icu::SimpleDateFormat::NSOverride::~NSOverride(icu::SimpleDateFormat::NSOverride *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    icu::SharedObject::removeRef(v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  if (v1) {
    icu::SharedObject::removeRef(v1);
  }
}

void icu::SimpleDateFormat::NSOverride::free(icu::SimpleDateFormat::NSOverride *this)
{
  if (this)
  {
    uint64_t v1 = (uint64_t *)this;
    do
    {
      int v2 = (uint64_t *)v1[2];
      if (*v1) {
        icu::SharedObject::removeRef(*v1);
      }
      icu::UMemory::operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t icu::SimpleDateFormat::getNumberFormatByIndex(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 800);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8 * a2)) != 0) {
    uint64_t v4 = v3 + 24;
  }
  else {
    uint64_t v4 = a1 + 336;
  }
  return *(void *)v4;
}

void icu::SimpleDateFormat::~SimpleDateFormat(icu::SimpleDateFormat *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1EDA52A30;
  uint64_t v3 = (icu::DateFormatSymbols *)*((void *)this + 96);
  if (v3)
  {
    icu::DateFormatSymbols::~DateFormatSymbols(v3);
    icu::UMemory::operator delete(v4);
  }
  int v5 = (char *)*((void *)this + 100);
  if (v5) {
    sub_18C9D626C(v5);
  }
  uint64_t v6 = *((void *)this + 97);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  int v7 = (void *)*((void *)this + 101);
  if (v7)
  {
    icu::number::SimpleNumberFormatter::cleanup(*((icu::number::SimpleNumberFormatter **)this + 101), a2);
    icu::UMemory::operator delete(v7);
  }
  uint64_t v8 = *((void *)this + 103);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  icu::Locale::~Locale((icu::SimpleDateFormat *)((char *)this + 544));
  icu::UnicodeString::~UnicodeString(v9, (icu::SimpleDateFormat *)((char *)this + 480));
  icu::UnicodeString::~UnicodeString(v10, (icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::~UnicodeString(v11, (icu::SimpleDateFormat *)((char *)this + 352));

  icu::DateFormat::~DateFormat(this);
}

{
  void *v2;
  uint64_t vars8;

  icu::SimpleDateFormat::~SimpleDateFormat(this, a2);

  icu::UMemory::operator delete(v2);
}

void sub_18C9D626C(char *a1)
{
  for (uint64_t i = 0; i != 304; i += 8)
  {
    uint64_t v3 = *(void *)&a1[i];
    if (v3)
    {
      icu::SharedObject::removeRef(v3);
      *(void *)&a1[i] = 0;
    }
  }

  uprv_free(a1);
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, UErrorCode *a2)
{
  uint64_t v4 = icu::DateFormat::DateFormat(this);
  void *v4 = &unk_1EDA52A30;
  v4[44] = &unk_1EDA47700;
  *((_WORD *)v4 + 180) = 2;
  v4[52] = &unk_1EDA47700;
  *((_WORD *)v4 + 212) = 2;
  v4[60] = &unk_1EDA47700;
  *((_WORD *)v4 + 244) = 2;
  int v5 = (icu::Locale *)(v4 + 68);
  Default = icu::Locale::getDefault((icu::Locale *)v4);
  icu::Locale::Locale(v5, (uint64_t)Default);
  *((void *)this + 103) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::construct((UChar **)this, 3u, 7, (uint64_t)v5, a2);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

uint64_t icu::SimpleDateFormat::initializeBooleanAttributes(icu::SimpleDateFormat *this)
{
  int v3 = 0;
  (*(void (**)(icu::SimpleDateFormat *, void, uint64_t, int *))(*(void *)this + 216))(this, 0, 1, &v3);
  (*(void (**)(icu::SimpleDateFormat *, uint64_t, uint64_t, int *))(*(void *)this + 216))(this, 1, 1, &v3);
  (*(void (**)(icu::SimpleDateFormat *, uint64_t, uint64_t, int *))(*(void *)this + 216))(this, 2, 1, &v3);
  return (*(uint64_t (**)(icu::SimpleDateFormat *, uint64_t, uint64_t, int *))(*(void *)this + 216))(this, 3, 1, &v3);
}

void icu::SimpleDateFormat::construct(UChar **a1, unsigned int a2, signed int a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 > 0) {
    return;
  }
  icu::SimpleDateFormat::initializeCalendar((icu::SimpleDateFormat *)a1, 0, (char **)a4, a5);
  if (*(int *)a5 > 0) {
    return;
  }
  int v65 = 0;
  long long v78 = 0u;
  memset(v79, 0, sizeof(v79));
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  *(_OWORD *)__dst = 0u;
  if (!ulocimp_setRegionToSupplementalRegion(*(char **)(a4 + 40), __dst, 157)) {
    strcpy(__dst, *(const char **)(a4 + 40));
  }
  unint64_t v10 = a1[41];
  if (v10) {
    int v11 = (const char *)(*(uint64_t (**)(UChar *))(*(void *)v10 + 184))(v10);
  }
  else {
    int v11 = 0;
  }
  BOOL v64 = 0;
  uint64_t v12 = ures_open(0, __dst, (int *)a5);
  uint64_t v13 = ures_openWithCountryFallback(0, *(char **)(a4 + 40), &v64, (int *)a5);
  if (*(int *)a5 <= 0)
  {
    if (v64)
    {
      LODWORD(v67[0]) = -1;
      StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v12, "NumberElements/default", (int *)v67, a5);
      uint64_t v15 = ures_getStringByKeyWithFallback(v13, "NumberElements/default", (int *)v67, a5);
      if (*(int *)a5 > 0 || u_strcmp(StringByKeyWithFallback, v15)) {
        BOOL v64 = 0;
      }
    }
    if (!v11 || !strcmp(v11, "gregorian"))
    {
      *a5 = U_ZERO_ERROR;
      uint64_t v20 = ures_getByKeyWithFallback(v12, "calendar/gregorian/DateTimePatterns", 0, a5);
      uint64_t v21 = ures_getByKeyWithFallback(v13, "calendar/gregorian/DateTimePatterns", 0, a5);
      char v23 = 0;
      int v22 = 1;
    }
    else
    {
      memset(v67, 0, 64);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v62, "calendar/");
      *(void *)&v67[0] = (unint64_t)v67 | 0xD;
      DWORD2(v67[0]) = 40;
      WORD6(v67[0]) = 0;
      DWORD2(v67[3]) = 0;
      icu::CharString::append((icu::CharString *)v67, v62, v63, a5);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v60, v11);
      uint64_t v16 = icu::CharString::append((icu::CharString *)v67, v60, v61, a5);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v58, "/DateTimePatterns");
      icu::CharString::append(v16, v58, v59, a5);
      uint64_t v17 = ures_getByKeyWithFallback(v12, *(char **)&v67[0], 0, a5);
      uint64_t v18 = ures_getByKeyWithFallback(v13, *(char **)&v67[0], 0, a5);
      if (BYTE12(v67[0])) {
        uprv_free(*(void **)&v67[0]);
      }
      UErrorCode v19 = *a5;
      if (*a5 != U_MISSING_RESOURCE_ERROR)
      {
        int v22 = 0;
        char v23 = 1;
LABEL_25:
        if (v19 > U_ZERO_ERROR)
        {
LABEL_65:
          if (v18) {
            ures_close(v18);
          }
          if (v17) {
            ures_close(v17);
          }
          goto LABEL_69;
        }
        int v45 = v22;
        char v46 = v23;
        if ((int)ures_getSize(v17) <= 8)
        {
          int v25 = 3;
LABEL_28:
          *a5 = v25;
          goto LABEL_65;
        }
        uint64_t v48 = v17;
        uint64_t LocaleByType = ures_getLocaleByType(v17, 1, (int *)a5);
        char v27 = (const char *)ures_getLocaleByType(v48, 0, (int *)a5);
        int v28 = (const char *)LocaleByType;
        uint64_t v17 = v48;
        icu::Format::setLocaleIDs((icu::Format *)a1, v28, v27);
        uint64_t v30 = icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)a4, a5, v29);
        a1[96] = (UChar *)v30;
        if (*(int *)a5 > 0) {
          goto LABEL_65;
        }
        if (!v30)
        {
          int v25 = 7;
          goto LABEL_28;
        }
        int v57 = 0;
        long long v44 = a1 + 52;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 52));
        icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 60));
        if (a2 != -1 && a3 != -1)
        {
          memset((char *)v70 + 8, 0, 56);
          *(void *)&v70[0] = &unk_1EDA47700;
          WORD4(v70[0]) = 2;
          memset(v69, 0, sizeof(v69));
          icu::SimpleDateFormat::getPatternForTimeStyle((uint64_t)a1, a2, (char **)a4, v48, (icu::UnicodeString *)v70, a5, (uint64_t)v69);
          if (WORD4(v70[0]) >= 0x20u) {
            icu::UnicodeString::operator=(a1 + 60, (UChar **)v70);
          }
          memset(v68, 0, sizeof(v68));
          icu::SimpleDateFormat::getPatternForDateStyle(a3, v48, v18, &v64, (UChar **)v70, a5, (uint64_t)v68);
          if (WORD4(v70[0]) >= 0x20u) {
            icu::UnicodeString::operator=(v44, (UChar **)v70);
          }
          if (v46)
          {
            memset((char *)v67 + 8, 0, 56);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v55, "calendar/");
            *(void *)&v67[0] = (char *)v67 + 13;
            DWORD2(v67[0]) = 40;
            WORD6(v67[0]) = 0;
            DWORD2(v67[3]) = 0;
            icu::CharString::append((icu::CharString *)v67, v55, v56, a5);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v53, v11);
            unint64_t v31 = icu::CharString::append((icu::CharString *)v67, v53, v54, a5);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v51, "/DateTimePatterns%atTime");
            icu::CharString::append(v31, v51, v52, a5);
            uint64_t v32 = ures_getByKeyWithFallback(v12, *(char **)&v67[0], 0, a5);
            if (BYTE12(v67[0])) {
              uprv_free(*(void **)&v67[0]);
            }
            UErrorCode v33 = *a5;
            int v34 = v45;
            if (*a5 == U_MISSING_RESOURCE_ERROR) {
              int v34 = 1;
            }
            if (v34 != 1) {
              goto LABEL_53;
            }
            *a5 = U_ZERO_ERROR;
            uint64_t v35 = ures_getByKeyWithFallback(v12, "calendar/gregorian/DateTimePatterns%atTime", 0, a5);
            if (v32) {
              ures_close(v32);
            }
          }
          else
          {
            *a5 = U_ZERO_ERROR;
            uint64_t v35 = ures_getByKeyWithFallback(v12, "calendar/gregorian/DateTimePatterns%atTime", 0, a5);
          }
          UErrorCode v33 = *a5;
          uint64_t v32 = v35;
LABEL_53:
          uint64_t v17 = v48;
          if (v33 > U_ZERO_ERROR || (int)ures_getSize(v32) < 4)
          {
            *a5 = U_ZERO_ERROR;
            if ((int)ures_getSize(v48) <= 12) {
              signed int v39 = 8;
            }
            else {
              signed int v39 = a3 + 5;
            }
            uint64_t v40 = v48;
          }
          else
          {
            signed int v39 = a3 - 4;
            uint64_t v40 = v32;
          }
          StringByIndex = ures_getStringByIndex(v40, v39, &v57, a5);
          icu::UnicodeString::UnicodeString(v66, 1, &StringByIndex);
          *((void *)&v67[0] + 1) = &unk_1EDA47700;
          LOWORD(v67[1]) = 2;
          icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v67, (const icu::UnicodeString *)v66, 2, 2, 0, a5);
          icu::SimpleFormatter::format((icu::SimpleFormatter *)v67, (const icu::UnicodeString *)v69, (const icu::UnicodeString *)v68, (icu::UnicodeString *)(a1 + 44), a5);
          icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v67);
          icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v66);
          uint64_t v49 = StringByIndex;
          int v42 = &v49;
          if (v32) {
            ures_close(v32);
          }
          icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v68);
          icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)v69);
          int v38 = (icu::UnicodeString *)v70;
          goto LABEL_63;
        }
        if (a2 == -1)
        {
          if (a3 == -1)
          {
            *a5 = U_INVALID_FORMAT_ERROR;
            uint64_t v17 = v48;
            goto LABEL_64;
          }
          memset((char *)v67 + 8, 0, 56);
          *(void *)&v67[0] = &unk_1EDA47700;
          WORD4(v67[0]) = 2;
          memset(v70, 0, sizeof(v70));
          uint64_t v17 = v48;
          icu::SimpleDateFormat::getPatternForDateStyle(a3, v48, v18, &v64, (UChar **)v67, a5, (uint64_t)v70);
          if (WORD4(v67[0]) < 0x20u) {
            goto LABEL_50;
          }
        }
        else
        {
          memset((char *)v67 + 8, 0, 56);
          *(void *)&v67[0] = &unk_1EDA47700;
          WORD4(v67[0]) = 2;
          memset(v70, 0, sizeof(v70));
          uint64_t v17 = v48;
          icu::SimpleDateFormat::getPatternForTimeStyle((uint64_t)a1, a2, (char **)a4, v48, (icu::UnicodeString *)v67, a5, (uint64_t)v70);
          if (WORD4(v67[0]) < 0x20u)
          {
LABEL_50:
            icu::UnicodeString::operator=(a1 + 44, (UChar **)v70);
            icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v70);
            int v38 = (icu::UnicodeString *)v67;
LABEL_63:
            icu::UnicodeString::~UnicodeString(v37, v38);
LABEL_64:
            icu::SimpleDateFormat::initialize((icu::SimpleDateFormat *)a1, (const icu::Locale *)a4, a5);
            goto LABEL_65;
          }
        }
        icu::UnicodeString::operator=(v44, (UChar **)v67);
        goto LABEL_50;
      }
      uint64_t v47 = v18;
      *a5 = U_ZERO_ERROR;
      uint64_t v20 = ures_getByKeyWithFallback(v12, "calendar/gregorian/DateTimePatterns", 0, a5);
      if (v17) {
        ures_close(v17);
      }
      uint64_t v21 = ures_getByKeyWithFallback(v13, "calendar/gregorian/DateTimePatterns", 0, a5);
      if (v47) {
        ures_close(v47);
      }
      int v22 = 0;
      char v23 = 1;
    }
    UErrorCode v19 = *a5;
    uint64_t v24 = v20;
    uint64_t v18 = v21;
    uint64_t v17 = v24;
    goto LABEL_25;
  }
LABEL_69:
  if (v13) {
    ures_close(v13);
  }
  if (v12) {
    ures_close(v12);
  }
}

uint64_t icu::SimpleDateFormat::initializeDefaultCentury(icu::SimpleDateFormat *this)
{
  uint64_t result = *((void *)this + 41);
  if (result)
  {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)result + 400))(result);
    *((unsigned char *)this + 816) = v3;
    if (v3)
    {
      *((double *)this + 98) = (*(double (**)(void))(**((void **)this + 41) + 408))(*((void *)this + 41));
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 41) + 416))();
    }
    else
    {
      *((void *)this + 98) = 0x10000000000000;
      uint64_t result = 0xFFFFFFFFLL;
    }
    *((_DWORD *)this + 199) = result;
  }
  return result;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, UChar **a2, UErrorCode *a3)
{
  uint64_t v6 = icu::DateFormat::DateFormat(this);
  void *v6 = &unk_1EDA52A30;
  int v7 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v6 + 44), a2);
  *((void *)this + 52) = &unk_1EDA47700;
  *((_WORD *)this + 212) = 2;
  *((void *)this + 60) = &unk_1EDA47700;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v7);
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)Default);
  *((void *)this + 103) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0, (char **)this + 68, a3);
  *((void *)this + 96) = icu::DateFormatSymbols::createForLocale((icu::SimpleDateFormat *)((char *)this + 544), a3, v9);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a3);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

uint64_t icu::SimpleDateFormat::initializeCalendar(icu::SimpleDateFormat *this, icu::TimeZone *a2, char **a3, UErrorCode *a4)
{
  if (*(int *)a4 >= 1) {
    return *((void *)this + 41);
  }
  if (!a2) {
    a2 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a3, 0);
  }
  uint64_t result = icu::Calendar::createInstance(a2, (icu::TimeZone *)a3, a4, a4);
  *((void *)this + 41) = result;
  return result;
}

void icu::SimpleDateFormat::initialize(icu::SimpleDateFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    *((unsigned char *)this + 795) = 0;
    uint64_t v6 = getprogname();
    if (v6)
    {
      int v7 = v6;
      if (!strncmp(v6, "Wells_Fargo_Mobile_Banking", 0x1AuLL) || !strncmp(v7, "FioSB2", 6uLL))
      {
        *((unsigned char *)this + 795) = 1;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18C7E8000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "ICU using compatibility space for date formatting", buf, 2u);
        }
      }
    }
    icu::SimpleDateFormat::parsePattern(this);
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    UErrorCode v15 = U_ZERO_ERROR;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)buf = 0u;
    long long v17 = 0u;
    icu::Locale::Locale((icu::Locale *)buf, (uint64_t)a2);
    int KeywordValue = icu::Locale::getKeywordValue((char **)buf, "numbers", (char *)&v30, 96, &v15);
    if (v15 <= U_ZERO_ERROR && KeywordValue >= 1 && !((unint64_t)v30 ^ 0x73796164696E6168 | BYTE8(v30)))
    {
      icu::Locale::setKeywordValue((char **)buf, "numbers", 0, &v15);
      icu::UnicodeString::unBogus((uint64_t)this + 416);
      if (*((__int16 *)this + 212) < 0) {
        uint64_t v10 = *((unsigned int *)this + 107);
      }
      else {
        uint64_t v10 = *((unsigned __int16 *)this + 212) >> 5;
      }
      icu::UnicodeString::doReplace((uint64_t)this + 416, 0, v10, (uint64_t)L"d=hanidays", 0, 0xFFFFFFFFLL);
    }
    if (*((_WORD *)this + 212))
    {
      if (*((unsigned char *)this + 794))
      {
        uint64_t v11 = *((void *)this + 41);
        if (v11)
        {
          uint64_t v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 184))(v11);
          if (!strcmp(v12, "japanese") && !strcmp((const char *)this + 552, "ja")) {
            sub_18C9893DC((uint64_t)this + 416, (uint64_t)"y", 0xFFFFFFFFLL);
          }
        }
      }
    }
    uint64_t Instance = icu::NumberFormat::createInstance((char **)buf, a3, v9);
    *((void *)this + 42) = Instance;
    UErrorCode v14 = *a3;
    if (Instance && v14 <= U_ZERO_ERROR)
    {
      (*(void (**)(icu::Format *))(*(void *)Instance + 288))(Instance);
      icu::SimpleDateFormat::initNumberFormatters(this, a2, a3);
      icu::SimpleDateFormat::initSimpleNumberFormatter(this, a3);
    }
    else if (v14 <= U_ZERO_ERROR)
    {
      *a3 = U_MISSING_RESOURCE_ERROR;
    }
    icu::Locale::~Locale((icu::Locale *)buf);
  }
}

UChar **icu::SimpleDateFormat::SimpleDateFormat(UChar **this, UChar **a2, UChar **a3, UErrorCode *a4)
{
  uint64_t v8 = icu::DateFormat::DateFormat((icu::DateFormat *)this);
  *uint64_t v8 = &unk_1EDA52A30;
  int v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  this[52] = (UChar *)&unk_1EDA47700;
  *((_WORD *)this + 212) = 2;
  this[60] = (UChar *)&unk_1EDA47700;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v9);
  icu::Locale::Locale((icu::Locale *)(this + 68), (uint64_t)Default);
  this[103] = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::copyFrom(this + 52, a3, 0);
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(this + 60));
  icu::SimpleDateFormat::initializeBooleanAttributes((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::initializeCalendar((icu::SimpleDateFormat *)this, 0, (char **)this + 68, a4);
  this[96] = (UChar *)icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)(this + 68), a4, v11);
  icu::SimpleDateFormat::initialize((icu::SimpleDateFormat *)this, (const icu::Locale *)(this + 68), a4);
  icu::SimpleDateFormat::initializeDefaultCentury((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::processOverrideString(this, (const icu::Locale *)(this + 68), (const icu::UnicodeString *)a3, 2u, a4);
  return this;
}

void *icu::SimpleDateFormat::processOverrideString(void *this, const icu::Locale *a2, const icu::UnicodeString *a3, unsigned int a4, UErrorCode *a5)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if ((*((_WORD *)a3 + 4) & 1) != 0 || *(int *)a5 > 0) {
    return this;
  }
  uint64_t v6 = (uint64_t)this;
  int v7 = 0;
  int v8 = 0;
  long long v65 = 0u;
  uint64_t v68 = 0;
  long long v67 = 0u;
  long long v66 = 0u;
  uint64_t v63 = 0;
  BOOL v64 = (UChar *)&unk_1EDA47700;
  LOWORD(v65) = 2;
  long long v60 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  char v46 = (char *)a2 + 26;
  uint64_t v47 = (char *)a2 + 8;
  int v59 = &unk_1EDA47700;
  LOWORD(v60) = 2;
  do
  {
    unsigned int v9 = *((unsigned __int16 *)a3 + 4);
    if (v8 < 0)
    {
      int v11 = 0;
      if ((v9 & 0x8000) != 0) {
        unsigned int v10 = *((_DWORD *)a3 + 3);
      }
      else {
        unsigned int v10 = v9 >> 5;
      }
    }
    else if ((v9 & 0x8000) != 0)
    {
      unsigned int v10 = *((_DWORD *)a3 + 3);
      if ((int)v10 >= v8) {
        int v11 = v8;
      }
      else {
        int v11 = *((_DWORD *)a3 + 3);
      }
    }
    else
    {
      unsigned int v10 = v9 >> 5;
      if (v10 >= v8) {
        int v11 = v8;
      }
      else {
        int v11 = v10;
      }
    }
    int v12 = icu::UnicodeString::doIndexOf((uint64_t)a3, 0x3Bu, v11, v10 - v11);
    int v13 = v12;
    if (v12 == -1)
    {
      if (*((__int16 *)a3 + 4) < 0) {
        int v13 = *((_DWORD *)a3 + 3);
      }
      else {
        int v13 = *((unsigned __int16 *)a3 + 4) >> 5;
      }
    }
    uint64_t v14 = (v13 - v8);
    memset(v58, 0, 64);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v58, a3, v8, v14);
    if (SLOWORD(v58[1]) < 0)
    {
      int v16 = HIDWORD(v58[1]);
      int v15 = HIDWORD(v58[1]) & (SHIDWORD(v58[1]) >> 31);
    }
    else
    {
      int v15 = 0;
      int v16 = LOWORD(v58[1]) >> 5;
    }
    int v17 = icu::UnicodeString::doIndexOf((uint64_t)v58, 0x3Du, v15, v16 - v15);
    if (v17 == -1)
    {
      icu::UnicodeString::copyFrom(&v64, v58, 0);
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v59);
      goto LABEL_38;
    }
    int v18 = v17;
    icu::UnicodeString::unBogus((uint64_t)&v64);
    int v19 = LOWORD(v58[1]) >> 5;
    if (v18 < -1)
    {
      unsigned int v20 = 0;
LABEL_28:
      int v21 = v20;
      goto LABEL_29;
    }
    int v21 = v18 + 1;
    if (((uint64_t)v58[1] & 0x8000) != 0)
    {
      unsigned int v20 = HIDWORD(v58[1]);
      if (SHIDWORD(v58[1]) > v18) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    unsigned int v20 = LOWORD(v58[1]) >> 5;
    if (v18 >= v20) {
      goto LABEL_28;
    }
LABEL_29:
    if ((v65 & 0x8000u) == 0) {
      uint64_t v22 = (unsigned __int16)v65 >> 5;
    }
    else {
      uint64_t v22 = DWORD1(v65);
    }
    if (SLOWORD(v58[1]) < 0) {
      int v19 = HIDWORD(v58[1]);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v64, 0, v22, (const icu::UnicodeString *)v58, v21, (v19 - v21));
    icu::UnicodeString::unBogus((uint64_t)&v59);
    if ((v60 & 0x8000u) == 0) {
      uint64_t v23 = (unsigned __int16)v60 >> 5;
    }
    else {
      uint64_t v23 = DWORD1(v60);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v59, 0, v23, (const icu::UnicodeString *)v58, 0, 1);
LABEL_38:
    int v24 = icu::UnicodeString::doHashCode((icu::UnicodeString *)&v64);
    int v27 = v24;
    if (v7)
    {
      long long v26 = v7;
      while (*((_DWORD *)v26 + 2) != v24)
      {
        long long v26 = (icu::SimpleDateFormat::NSOverride *)*((void *)v26 + 2);
        if (!v26) {
          goto LABEL_42;
        }
      }
      long long v35 = *(icu::SharedObject **)v26;
    }
    else
    {
LABEL_42:
      double v51 = 0;
      long long v28 = icu::UMemory::operator new((uint64_t *)v26, (icu::UMemory *)0x18, v25);
      if (!v28)
      {
        double v51 = 0;
        *a5 = U_MEMORY_ALLOCATION_ERROR;
        if (v7) {
          icu::SimpleDateFormat::NSOverride::free(v7);
        }
        sub_18C9E0970(&v51);
        goto LABEL_81;
      }
      *long long v28 = 0;
      *((_DWORD *)v28 + 2) = 0;
      void v28[2] = 0;
      double v51 = v28;
      long long v56 = 0u;
      memset(v57, 0, sizeof(v57));
      long long v54 = 0u;
      long long v55 = 0u;
      *(_OWORD *)&v53[9] = 0u;
      strcpy(v53, "numbers=");
      icu::UnicodeString::extract((uint64_t)&v64, 0, v14, &v53[8], 92);
      long long v29 = (uint64_t *)*((void *)a2 + 26);
      long long v30 = (char *)v29 + *((int *)a2 + 8);
      memset(v52, 0, sizeof(v52));
      icu::Locale::Locale(v29, (icu::Locale *)v52, v47, v46, v30, v53);
      long long v31 = v51;
      *((_DWORD *)v51 + 2) = v27;
      UErrorCode v31[2] = (uint64_t)v7;
      long long v33 = (icu::SharedObject *)sub_18C9DAD20((char **)v52, a5, v32);
      sub_18C8917C4(v33, (icu::SharedObject **)v51);
      UErrorCode v34 = *a5;
      if (*(int *)a5 < 1)
      {
        int v7 = (icu::SimpleDateFormat::NSOverride *)v51;
        long long v35 = (icu::SharedObject *)*v51;
        double v51 = 0;
      }
      else
      {
        if (v7) {
          icu::SimpleDateFormat::NSOverride::free(v7);
        }
        long long v35 = 0;
      }
      icu::Locale::~Locale((icu::Locale *)v52);
      sub_18C9E0970(&v51);
      if (v34 > U_ZERO_ERROR) {
        goto LABEL_81;
      }
    }
    if (v60)
    {
      if (a4 != 2)
      {
        if (a4 == 1) {
          goto LABEL_64;
        }
        unint64_t v40 = a4;
        if (a4) {
          goto LABEL_70;
        }
      }
      for (uint64_t i = 0; i != 16; ++i)
        sub_18C8917C4(v35, (icu::SharedObject **)(*(void *)(v6 + 800) + 8 * dword_18CA97254[i]));
      unint64_t v40 = a4;
      if (a4)
      {
LABEL_64:
        for (uint64_t j = 0; j != 10; ++j)
          sub_18C8917C4(v35, (icu::SharedObject **)(*(void *)(v6 + 800) + 8 * dword_18CA97294[j]));
      }
    }
    else
    {
      if ((v60 & 0x8000u) == 0) {
        int v37 = (unsigned __int16)v60 >> 5;
      }
      else {
        int v37 = DWORD1(v60);
      }
      if (v37)
      {
        int v38 = (UChar *)&v60 + 1;
        if ((v60 & 2) == 0) {
          int v38 = (UChar *)v61;
        }
        UChar v39 = *v38;
      }
      else
      {
        UChar v39 = -1;
      }
      unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v39);
      if (PatternCharIndex == 38)
      {
        uint64_t v36 = 3;
        *a5 = U_INVALID_FORMAT_ERROR;
        if (v7) {
          icu::SimpleDateFormat::NSOverride::free(v7);
        }
LABEL_81:
        icu::UnicodeString::~UnicodeString((void *)v36, (icu::UnicodeString *)v58);
        goto LABEL_82;
      }
      sub_18C8917C4(v35, (icu::SharedObject **)(*(void *)(v6 + 800) + 8 * PatternCharIndex));
    }
LABEL_70:
    icu::UnicodeString::~UnicodeString((void *)v40, (icu::UnicodeString *)v58);
    int v8 = v12 + 1;
  }
  while (v12 != -1);
  if (v7) {
    icu::SimpleDateFormat::NSOverride::free(v7);
  }
LABEL_82:
  icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v59);
  return icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v64);
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, UChar **a2, const icu::Locale *a3, UErrorCode *a4)
{
  int v8 = icu::DateFormat::DateFormat(this);
  *int v8 = &unk_1EDA52A30;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  *((void *)this + 52) = &unk_1EDA47700;
  *((_WORD *)this + 212) = 2;
  *((void *)this + 60) = &unk_1EDA47700;
  *((_WORD *)this + 244) = 2;
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)a3);
  *((void *)this + 103) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0, (char **)this + 68, a4);
  *((void *)this + 96) = icu::DateFormatSymbols::createForLocale((icu::SimpleDateFormat *)((char *)this + 544), a4, v9);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a4);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

UChar **icu::SimpleDateFormat::SimpleDateFormat(UChar **this, UChar **a2, UChar **a3, const icu::Locale *a4, UErrorCode *a5)
{
  unsigned int v10 = icu::DateFormat::DateFormat((icu::DateFormat *)this);
  *unsigned int v10 = &unk_1EDA52A30;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v10 + 44), a2);
  this[52] = (UChar *)&unk_1EDA47700;
  *((_WORD *)this + 212) = 2;
  this[60] = (UChar *)&unk_1EDA47700;
  *((_WORD *)this + 244) = 2;
  icu::Locale::Locale((icu::Locale *)(this + 68), (uint64_t)a4);
  this[103] = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::copyFrom(this + 52, a3, 0);
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(this + 60));
  icu::SimpleDateFormat::initializeBooleanAttributes((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::initializeCalendar((icu::SimpleDateFormat *)this, 0, (char **)this + 68, a5);
  this[96] = (UChar *)icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)(this + 68), a5, v11);
  icu::SimpleDateFormat::initialize((icu::SimpleDateFormat *)this, (const icu::Locale *)(this + 68), a5);
  icu::SimpleDateFormat::initializeDefaultCentury((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::processOverrideString(this, a4, (const icu::UnicodeString *)a3, 2u, a5);
  return this;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, UChar **a2, icu::DateFormatSymbols *a3, UErrorCode *a4)
{
  int v8 = icu::DateFormat::DateFormat(this);
  *int v8 = &unk_1EDA52A30;
  unsigned int v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  *((void *)this + 52) = &unk_1EDA47700;
  *((_WORD *)this + 212) = 2;
  *((void *)this + 60) = &unk_1EDA47700;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v9);
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)Default);
  *((void *)this + 96) = a3;
  *((void *)this + 97) = 0;
  *((void *)this + 103) = 0;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0, (char **)this + 68, a4);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a4);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, UChar **a2, const icu::DateFormatSymbols *a3, UErrorCode *a4)
{
  int v8 = icu::DateFormat::DateFormat(this);
  *int v8 = &unk_1EDA52A30;
  unsigned int v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  *((void *)this + 52) = &unk_1EDA47700;
  *((_WORD *)this + 212) = 2;
  *((void *)this + 60) = &unk_1EDA47700;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v9);
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)Default);
  int v13 = (icu::DateFormatSymbols *)icu::UMemory::operator new(v12, (icu::UMemory *)0x4F8, v11);
  if (v13) {
    int v13 = (icu::DateFormatSymbols *)icu::DateFormatSymbols::DateFormatSymbols(v13, a3);
  }
  *((void *)this + 96) = v13;
  *((void *)this + 97) = 0;
  *((void *)this + 103) = 0;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0, (char **)this + 68, a4);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a4);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

uint64_t icu::SimpleDateFormat::SimpleDateFormat(uint64_t a1, unsigned int a2, signed int a3, uint64_t a4, UErrorCode *a5)
{
  unsigned int v10 = icu::DateFormat::DateFormat((icu::DateFormat *)a1);
  *unsigned int v10 = &unk_1EDA52A30;
  v10[44] = &unk_1EDA47700;
  *((_WORD *)v10 + 180) = 2;
  v10[52] = &unk_1EDA47700;
  *((_WORD *)v10 + 212) = 2;
  v10[60] = &unk_1EDA47700;
  *((_WORD *)v10 + 244) = 2;
  uint64_t v11 = (uint64_t)(v10 + 68);
  icu::Locale::Locale((icu::Locale *)(v10 + 68), a4);
  *(void *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  icu::SimpleDateFormat::initializeBooleanAttributes((icu::SimpleDateFormat *)a1);
  icu::SimpleDateFormat::construct((UChar **)a1, a2, a3, v11, a5);
  if (*(int *)a5 <= 0) {
    icu::SimpleDateFormat::initializeDefaultCentury((icu::SimpleDateFormat *)a1);
  }
  return a1;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v6 = icu::DateFormat::DateFormat(this);
  void *v6 = &unk_1EDA52A30;
  icu::UnicodeString::UnicodeString((uint64_t)(v6 + 44), (uint64_t)L"yMMdd hh:mm a");
  *((void *)this + 52) = &unk_1EDA47700;
  *((_WORD *)this + 212) = 2;
  *((void *)this + 60) = &unk_1EDA47700;
  *((_WORD *)this + 244) = 2;
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)a2);
  *((void *)this + 103) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  if (*(int *)a3 <= 0)
  {
    icu::SimpleDateFormat::initializeBooleanAttributes(this);
    icu::SimpleDateFormat::initializeCalendar(this, 0, (char **)this + 68, a3);
    int v8 = icu::DateFormatSymbols::createForLocale((icu::SimpleDateFormat *)((char *)this + 544), a3, v7);
    *((void *)this + 96) = v8;
    unsigned int v10 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v10 >= 1)
    {
      *a3 = U_ZERO_ERROR;
      if (v8)
      {
        icu::DateFormatSymbols::~DateFormatSymbols(v8);
        icu::UMemory::operator delete(v11);
      }
      int v12 = (void *)((char *)this + 768);
      int v13 = (icu::DateFormatSymbols *)icu::UMemory::operator new(v10, (icu::UMemory *)0x4F8, v9);
      if (!v13)
      {
        void *v12 = 0;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        return this;
      }
      void *v12 = icu::DateFormatSymbols::DateFormatSymbols(v13, a3);
    }
    icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
    icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
    icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a3);
    if (*(int *)a3 <= 0) {
      icu::SimpleDateFormat::initializeDefaultCentury(this);
    }
  }
  return this;
}

uint64_t icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, const icu::SimpleDateFormat *a2)
{
  uint64_t v4 = icu::DateFormat::DateFormat(this, a2);
  void *v4 = &unk_1EDA52A30;
  v4[44] = &unk_1EDA47700;
  *((_WORD *)v4 + 180) = 2;
  v4[52] = &unk_1EDA47700;
  *((_WORD *)v4 + 212) = 2;
  v4[60] = &unk_1EDA47700;
  *((_WORD *)v4 + 244) = 2;
  icu::Locale::Locale((icu::Locale *)(v4 + 68), (uint64_t)a2 + 544);
  *((void *)this + 103) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::SimpleDateFormat::initializeBooleanAttributes(this);

  return icu::SimpleDateFormat::operator=((uint64_t)this, (uint64_t)a2, v5);
}

uint64_t icu::SimpleDateFormat::operator=@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1 != a2)
  {
    int v5 = *(void **)(a1 + 808);
    if (v5)
    {
      icu::number::SimpleNumberFormatter::cleanup(*(icu::number::SimpleNumberFormatter **)(a1 + 808), a3);
      icu::UMemory::operator delete(v5);
    }
    *(void *)(a1 + 808) = 0;
    icu::DateFormat::operator=((void *)a1, (void *)a2);
    icu::UnicodeString::operator=((UChar **)(a1 + 416), (UChar **)(a2 + 416));
    icu::UnicodeString::operator=((UChar **)(a1 + 480), (UChar **)(a2 + 480));
    int v7 = *(icu::DateFormatSymbols **)(a1 + 768);
    if (v7)
    {
      icu::DateFormatSymbols::~DateFormatSymbols(v7);
      icu::UMemory::operator delete(v8);
    }
    *(void *)(a1 + 768) = 0;
    unint64_t v9 = *(uint64_t **)(a2 + 768);
    if (v9)
    {
      unsigned int v10 = (icu::DateFormatSymbols *)icu::UMemory::operator new(v9, (icu::UMemory *)0x4F8, v6);
      if (v10) {
        unsigned int v10 = (icu::DateFormatSymbols *)icu::DateFormatSymbols::DateFormatSymbols(v10, *(const icu::DateFormatSymbols **)(a2 + 768));
      }
      *(void *)(a1 + 768) = v10;
    }
    *(void *)(a1 + 784) = *(void *)(a2 + 784);
    *(_DWORD *)(a1 + 796) = *(_DWORD *)(a2 + 796);
    *(unsigned char *)(a1 + 816) = *(unsigned char *)(a2 + 816);
    icu::UnicodeString::operator=((UChar **)(a1 + 352), (UChar **)(a2 + 352));
    *(_WORD *)(a1 + 792) = *(_WORD *)(a2 + 792);
    *(unsigned char *)(a1 + 795) = *(unsigned char *)(a2 + 795);
    icu::Locale::operator=((icu::Locale *)(a1 + 544), a2 + 544);
    uint64_t v11 = *(void *)(a1 + 776);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    *(void *)(a1 + 776) = 0;
    umtx_lock((atomic_ullong *)&unk_1EB20BB68);
    int v12 = *(const icu::TimeZoneFormat **)(a2 + 776);
    umtx_unlock((std::mutex **)&unk_1EB20BB68);
    if (v12)
    {
      int v15 = (icu::TimeZoneFormat *)icu::UMemory::operator new(v14, (icu::UMemory *)0x530, v13);
      if (v15) {
        int v15 = (icu::TimeZoneFormat *)icu::TimeZoneFormat::TimeZoneFormat(v15, v12);
      }
      *(void *)(a1 + 776) = v15;
    }
    uint64_t v16 = *(void *)(a2 + 824);
    if (v16) {
      *(void *)(a1 + 824) = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
    }
    int v17 = *(char **)(a1 + 800);
    if (v17)
    {
      sub_18C9D626C(v17);
      *(void *)(a1 + 800) = 0;
    }
    if (*(void *)(a2 + 800))
    {
      int v18 = uprv_malloc(0x130uLL);
      if (v18)
      {
        uint64_t v19 = 0;
        v18[17] = 0u;
        v18[18] = 0u;
        v18[15] = 0u;
        v18[16] = 0u;
        v18[13] = 0u;
        v18[14] = 0u;
        v18[11] = 0u;
        v18[12] = 0u;
        v18[9] = 0u;
        v18[10] = 0u;
        v18[7] = 0u;
        v18[8] = 0u;
        v18[5] = 0u;
        _OWORD v18[6] = 0u;
        v18[3] = 0u;
        _OWORD v18[4] = 0u;
        v18[1] = 0u;
        v18[2] = 0u;
        *int v18 = 0u;
        *(void *)(a1 + 800) = v18;
        do
        {
          sub_18C8917C4(*(icu::SharedObject **)(*(void *)(a2 + 800) + v19), (icu::SharedObject **)(*(void *)(a1 + 800) + v19));
          v19 += 8;
        }
        while (v19 != 304);
      }
      else
      {
        *(void *)(a1 + 800) = 0;
      }
    }
    UErrorCode v21 = U_ZERO_ERROR;
    icu::SimpleDateFormat::initSimpleNumberFormatter((icu::SimpleDateFormat *)a1, &v21);
  }
  return a1;
}

void icu::SimpleDateFormat::initSimpleNumberFormatter(icu::SimpleDateFormat *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    int v3 = (const void *)*((void *)this + 42);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320))(v5);
        if (v6)
        {
          uint64_t v9 = v6;
          unsigned int v10 = icu::UMemory::operator new(v8, (icu::UMemory *)0x20, v7);
          if (v10)
          {
            uint64_t v11 = v10;
            icu::number::SimpleNumberFormatter::forLocaleAndSymbolsAndGroupingStrategy((icu::SimpleDateFormat *)((char *)this + 544), v9, 0, (int *)a2, v10);
            *((void *)this + 101) = v11;
          }
          else
          {
            *((void *)this + 101) = 0;
            *a2 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
      }
    }
  }
}

icu::SimpleDateFormat *icu::SimpleDateFormat::clone@<X0>(icu::SimpleDateFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::SimpleDateFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x340, a2);
  if (result) {
    return (icu::SimpleDateFormat *)icu::SimpleDateFormat::SimpleDateFormat(result, this);
  }
  return result;
}

uint64_t icu::SimpleDateFormat::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = icu::DateFormat::operator==(a1, a2);
  if (!result) {
    return result;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 360);
  if (v5)
  {
    if ((*(_WORD *)(a2 + 360) & 1) == 0) {
      return 0;
    }
    goto LABEL_14;
  }
  if ((v5 & 0x8000) != 0) {
    int v6 = *(_DWORD *)(a1 + 364);
  }
  else {
    int v6 = v5 >> 5;
  }
  uint64_t result = 0;
  unsigned int v7 = *(unsigned __int16 *)(a2 + 360);
  if ((v7 & 0x8000u) == 0) {
    unsigned int v8 = v7 >> 5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a2 + 364);
  }
  if ((v7 & 1) == 0 && v6 == v8)
  {
    uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 352), (const icu::UnicodeString *)(a2 + 352), v6);
    if (result)
    {
LABEL_14:
      uint64_t result = *(void *)(a1 + 768);
      if (!result) {
        return result;
      }
      uint64_t v9 = *(void *)(a2 + 768);
      if (v9)
      {
        uint64_t result = icu::DateFormatSymbols::operator==(result, v9);
        if (!result) {
          return result;
        }
        if (*(unsigned __int8 *)(a1 + 816) == *(unsigned __int8 *)(a2 + 816)
          && *(double *)(a1 + 784) == *(double *)(a2 + 784))
        {
          uint64_t v10 = *(void *)(a1 + 776);
          uint64_t v11 = *(void *)(a2 + 776);
          if (v10)
          {
            if (v11)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
              if (!result) {
                return result;
              }
              goto LABEL_26;
            }
          }
          else if (!v11)
          {
LABEL_26:
            uint64_t result = sub_18C830FC4(a1 + 416, a2 + 416);
            if (result)
            {
              uint64_t result = sub_18C830FC4(a1 + 480, a2 + 480);
              if (result) {
                return (*(unsigned char *)(a1 + 795) != 0) ^ (*(unsigned char *)(a2 + 795) == 0);
              }
            }
            return result;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t icu::SimpleDateFormat::getPatternForTimeStyle@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X2>, uint64_t a4@<X3>, icu::UnicodeString *a5@<X4>, UErrorCode *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a7 + 8) = 0u;
  *(void *)(a7 + 56) = 0;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(void *)a7 = &unk_1EDA47700;
  *(_WORD *)(a7 + 8) = 2;
  if (a2 <= 3)
  {
    memset(v29, 0, 157);
    uint64_t BaseName = v29;
    int v15 = ulocimp_setRegionToSupplementalRegion(a3[5], v29, 157);
    if (*(int *)a6 > 0 || v15 <= 0) {
      uint64_t BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)a3);
    }
    UErrorCode v24 = U_ZERO_ERROR;
    uint64_t result = icu::Locale::getKeywordValue(a3, "hours", 0, 0, &v24);
    if (BaseName)
    {
      if (*BaseName)
      {
        int v17 = result;
        uint64_t result = strcmp(BaseName, "und");
        if (result)
        {
          UErrorCode v23 = U_ZERO_ERROR;
          uint64_t result = icu::Format::getLocaleID(a1, 1, (int *)&v23);
          if (v17 > 0 || v23 <= U_ZERO_ERROR && (uint64_t result = strcmp((const char *)result, BaseName), result))
          {
            *(void *)__s2 = 0;
            memset(v28, 0, 14);
            uloc_minimizeSubtags(BaseName, __s2, 22, &v23);
            BYTE5(v28[1]) = 0;
            uint64_t result = icu::Format::getLocaleID(a1, 0, (int *)&v23);
            if (v23 <= U_ZERO_ERROR)
            {
              uint64_t result = strcmp((const char *)result, __s2);
              if (!result && v17 <= 0) {
                goto LABEL_20;
              }
            }
            else if (v17 < 1)
            {
              goto LABEL_20;
            }
            uint64_t result = (uint64_t)icu::DateTimePatternGenerator::createInstance((const char **)a3, &v23, (UErrorCode *)1);
            int v18 = (icu::DateTimePatternGenerator *)result;
            if (v23 <= U_ZERO_ERROR)
            {
              memset(v26, 0, sizeof(v26));
              uint64_t v22 = off_1E550CFA0[a2];
              icu::UnicodeString::UnicodeString(v26, 1, &v22);
              icu::DateTimePatternGenerator::getBestPattern(v18, (const icu::UnicodeString *)v26, &v23, (icu::UnicodeString *)v25);
              icu::UnicodeString::operator=((icu::UnicodeString *)a7, (icu::UnicodeString *)v25);
              icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v25);
              uint64_t result = (uint64_t)icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v26);
            }
            if (v18) {
              uint64_t result = (*(uint64_t (**)(icu::DateTimePatternGenerator *))(*(void *)v18 + 8))(v18);
            }
          }
        }
      }
    }
LABEL_20:
    if (*(unsigned __int16 *)(a7 + 8) > 0x1Fu) {
      return result;
    }
  }
  icu::SimpleDateFormat::getPatternString(a2, a4, a5, a6, (uint64_t)v29);
  icu::UnicodeString::operator=((icu::UnicodeString *)a7, (icu::UnicodeString *)v29);
  return (uint64_t)icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v29);
}

void *icu::SimpleDateFormat::getPatternForDateStyle@<X0>(signed int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned char *a4@<X4>, UChar **a5@<X5>, UErrorCode *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  int v42 = (UChar *)&unk_1EDA47700;
  LOWORD(v43) = 2;
  memset(v41, 0, sizeof(v41));
  icu::SimpleDateFormat::getPatternString(a1, a2, (icu::UnicodeString *)&v42, a6, (uint64_t)v41);
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)a7, (UChar **)v41);
  icu::UnicodeString::operator=(a5, &v42);
  unint64_t v14 = *a4;
  if (*a4)
  {
    *a4 = 0;
    unint64_t v14 = a1 & 0xFFFFFFFE;
    if (v14 == 6)
    {
      long long v37 = 0u;
      uint64_t v40 = 0;
      long long v39 = 0u;
      long long v38 = 0u;
      uint64_t v36 = (UChar *)&unk_1EDA47700;
      LOWORD(v37) = 2;
      memset(v35, 0, sizeof(v35));
      icu::SimpleDateFormat::getPatternString(a1, a3, (icu::UnicodeString *)&v36, a6, (uint64_t)v35);
      uint64_t LocaleByType = (char *)ures_getLocaleByType(a3, 0, (int *)a6);
      if (uloc_isRightToLeft(LocaleByType))
      {
        uint64_t v16 = (char *)ures_getLocaleByType(a2, 0, (int *)a6);
        BOOL v17 = uloc_isRightToLeft(v16) == 0;
      }
      else
      {
        BOOL v17 = 0;
      }
      uint64_t v18 = *(unsigned int *)a6;
      if ((int)v18 > 0) {
        goto LABEL_7;
      }
      if (sub_18C93240C((icu::UnicodeString *)v35))
      {
        icu::UnicodeString::operator=(a5, &v36);
        icu::UnicodeString::operator=((UChar **)a7, (UChar **)v35);
        uint64_t v18 = 1;
        *a4 = 1;
        if (!v17)
        {
LABEL_7:
          icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v35);
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v36);
          goto LABEL_8;
        }
        icu::UnicodeString::UnicodeString((uint64_t)v32, 8207);
        uint64_t v30 = &unk_1EDA47700;
        __int16 v31 = 2;
        unsigned int v22 = *(unsigned __int16 *)(a7 + 8);
        int v23 = (__int16)v22;
        int32_t v24 = v22 >> 5;
        if (v23 >= 0) {
          int32_t v25 = v24;
        }
        else {
          int32_t v25 = *(_DWORD *)(a7 + 12);
        }
        if ((v33 & 0x8000u) == 0) {
          uint64_t v26 = v33 >> 5;
        }
        else {
          uint64_t v26 = v34;
        }
        icu::UnicodeString::findAndReplace((icu::UnicodeString *)a7, 0, v25, (const icu::UnicodeString *)v32, 0, v26, (const icu::UnicodeString *)&v30, 0, 0);
      }
      else
      {
        if (a1 != 6) {
          goto LABEL_7;
        }
        if (!sub_18C93240C((icu::UnicodeString *)v41)) {
          goto LABEL_7;
        }
        icu::SimpleDateFormat::getPatternString(7, a3, (icu::UnicodeString *)&v36, a6, (uint64_t)v32);
        icu::UnicodeString::operator=((icu::UnicodeString *)v35, (icu::UnicodeString *)v32);
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v32);
        if (!sub_18C93240C((icu::UnicodeString *)v35)) {
          goto LABEL_7;
        }
        icu::UnicodeString::operator=(a5, &v36);
        icu::UnicodeString::operator=((UChar **)a7, (UChar **)v35);
        uint64_t v18 = 1;
        *a4 = 1;
        if (!v17) {
          goto LABEL_7;
        }
        icu::UnicodeString::UnicodeString((uint64_t)v32, 8207);
        uint64_t v30 = &unk_1EDA47700;
        __int16 v31 = 2;
        sub_18C8FF200(a7, (icu::UnicodeString *)v32, (icu::UnicodeString *)&v30);
      }
      icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v30);
      icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v32);
      goto LABEL_7;
    }
  }
LABEL_8:
  icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)v41);
  return icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v42);
}

void icu::SimpleDateFormat::getPatternString(signed int a1@<W1>, uint64_t a2@<X2>, icu::UnicodeString *a3@<X3>, UErrorCode *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a5 + 8) = 0u;
  *(void *)(a5 + 56) = 0;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(void *)a5 = &unk_1EDA47700;
  *(_WORD *)(a5 + 8) = 2;
  unsigned int v8 = ures_getByIndex(a2, a1, 0, a4);
  uint64_t v9 = (uint64_t)v8;
  if (*((_WORD *)a3 + 4)) {
    __int16 v10 = 2;
  }
  else {
    __int16 v10 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v10;
  if (*(int *)a4 >= 1)
  {
LABEL_5:
    *a4 = U_INVALID_FORMAT_ERROR;
    if (!v9) {
      return;
    }
    goto LABEL_6;
  }
  int Type = ures_getType((uint64_t)v8);
  if (Type == 8)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v24 = 0;
    unsigned int v20 = &unk_1EDA47700;
    LOWORD(v21) = 2;
    int v19 = 0;
    StringByIndex = ures_getStringByIndex(v9, 0, &v19, a4);
    if (*(int *)a4 <= 0)
    {
      uint64_t v18 = StringByIndex;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, 1, &v18, v19);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v20);
    }
    icu::UnicodeString::operator=((icu::UnicodeString *)a5, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v20);
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v24 = 0;
    unsigned int v20 = &unk_1EDA47700;
    LOWORD(v21) = 2;
    int v19 = 0;
    uint64_t v16 = ures_getStringByIndex(v9, 1, &v19, a4);
    if (*(int *)a4 <= 0)
    {
      uint64_t v18 = v16;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, 1, &v18, v19);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v20);
    }
    unint64_t v14 = a3;
  }
  else
  {
    if (Type) {
      goto LABEL_5;
    }
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v24 = 0;
    unsigned int v20 = &unk_1EDA47700;
    LOWORD(v21) = 2;
    int v19 = 0;
    String = ures_getString(v9, &v19, (int *)a4);
    if (*(int *)a4 <= 0)
    {
      uint64_t v18 = String;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, 1, &v18, v19);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v20);
    }
    unint64_t v14 = (icu::UnicodeString *)a5;
  }
  icu::UnicodeString::operator=(v14, (icu::UnicodeString *)&v20);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v20);
  if (!v9) {
    return;
  }
LABEL_6:
  ures_close(v9);
}

icu::UnicodeString *icu::SimpleDateFormat::parsePattern(icu::UnicodeString *this)
{
  uint64_t v1 = (uint64_t)this;
  *((_WORD *)this + 396) = 0;
  *((unsigned char *)this + 794) = 0;
  unsigned int v2 = *((unsigned __int16 *)this + 180);
  if ((v2 & 0x8000) != 0) {
    int v3 = *((_DWORD *)this + 91);
  }
  else {
    int v3 = v2 >> 5;
  }
  if (v3 >= 1)
  {
    unint64_t v4 = 0;
    BOOL v5 = 0;
    uint64_t v6 = v3;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v1 + 360);
      if (*(__int16 *)(v1 + 360) < 0) {
        unsigned int v8 = *(_DWORD *)(v1 + 364);
      }
      else {
        unsigned int v8 = v7 >> 5;
      }
      if (v4 >= v8) {
        goto LABEL_26;
      }
      uint64_t v9 = v1 + 362;
      if ((v7 & 2) == 0) {
        uint64_t v9 = *(void *)(v1 + 376);
      }
      __int16 v10 = *(_WORD *)(v9 + 2 * v4);
      if (v10 == 39) {
        BOOL v5 = !v5;
      }
      if (v10 == 24180)
      {
        *(unsigned char *)(v1 + 794) = 1;
      }
      else
      {
        if (!v5)
        {
          if (v10 != 8239)
          {
            if (v10 == 115)
            {
              BOOL v5 = 0;
              *(unsigned char *)(v1 + 793) = 1;
            }
            else
            {
              BOOL v5 = 0;
              if (v10 == 109) {
                *(unsigned char *)(v1 + 792) = 1;
              }
            }
            goto LABEL_26;
          }
LABEL_23:
          if (*(unsigned char *)(v1 + 795)) {
            this = icu::UnicodeString::setCharAt((icu::UnicodeString *)(v1 + 352), v4, 32);
          }
          goto LABEL_26;
        }
        if (v10 == 8239) {
          goto LABEL_23;
        }
      }
LABEL_26:
      ++v4;
    }
    while (v6 != v4);
  }
  return this;
}

void icu::SimpleDateFormat::initNumberFormatters(icu::SimpleDateFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0 && ((*((_WORD *)this + 212) & 1) == 0 || (*((_WORD *)this + 244) & 1) == 0))
  {
    umtx_lock((atomic_ullong *)&unk_1EB20BB68);
    if (!*((void *)this + 100))
    {
      uint64_t v6 = uprv_malloc(0x130uLL);
      if (v6)
      {
        v6[17] = 0u;
        v6[18] = 0u;
        v6[15] = 0u;
        v6[16] = 0u;
        v6[13] = 0u;
        v6[14] = 0u;
        v6[11] = 0u;
        v6[12] = 0u;
        v6[9] = 0u;
        v6[10] = 0u;
        v6[7] = 0u;
        _OWORD v6[8] = 0u;
        v6[5] = 0u;
        v6[6] = 0u;
        v6[3] = 0u;
        v6[4] = 0u;
        v6[1] = 0u;
        v6[2] = 0u;
        _OWORD *v6 = 0u;
        *((void *)this + 100) = v6;
      }
      else
      {
        *((void *)this + 100) = 0;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    umtx_unlock((std::mutex **)&unk_1EB20BB68);
    if (*(int *)a3 <= 0)
    {
      icu::SimpleDateFormat::processOverrideString(this, a2, (icu::SimpleDateFormat *)((char *)this + 416), 0, a3);
      icu::SimpleDateFormat::processOverrideString(this, a2, (icu::SimpleDateFormat *)((char *)this + 480), 1u, a3);
    }
  }
}

uint64_t icu::SimpleDateFormat::parseAmbiguousDatesAsAfter(uint64_t this, double a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    this = *(void *)(this + 328);
    if (this)
    {
      this = icu::Calendar::setTimeInMillis(this, a2, a3);
      if (*(int *)a3 <= 0)
      {
        *(unsigned char *)(v4 + 816) = 1;
        *(double *)(v4 + 784) = a2;
        this = icu::Calendar::get(*(unsigned char **)(v4 + 328), 1u, a3);
        *(_DWORD *)(v4 + 796) = this;
      }
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

icu::UnicodeString *icu::SimpleDateFormat::format(icu::SimpleDateFormat *this, icu::Calendar *a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  UErrorCode v9 = U_ZERO_ERROR;
  memset(v8, 0, sizeof(v8));
  sub_18C93A930((uint64_t)v8, (uint64_t)a4);
  icu::SimpleDateFormat::_format(this, a2, a3, (icu::FieldPositionHandler *)v8, &v9);
  nullsub_32(v8);
  return a3;
}

icu::UnicodeString *icu::SimpleDateFormat::_format(icu::SimpleDateFormat *this, icu::Calendar *a2, icu::UnicodeString *a3, icu::FieldPositionHandler *a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return a3;
  }
  if (*((icu::Calendar **)this + 41) == a2
    || (__int16 v10 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a2 + 184))(a2),
        uint64_t v11 = (const char *)(*(uint64_t (**)(void))(**((void **)this + 41) + 184))(*((void *)this + 41)),
        !strcmp(v10, v11)))
  {
    unsigned __int16 v33 = a2;
    unsigned int v34 = a4;
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 41) + 24))(*((void *)this + 41));
    if (!v12)
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
      return a3;
    }
    uint64_t v13 = v12;
    unsigned int v34 = a4;
    double TimeInMillis = icu::Calendar::getTimeInMillis(a2, a5);
    icu::Calendar::setTimeInMillis(v13, TimeInMillis, a5);
    uint64_t TimeZone = icu::Calendar::getTimeZone(a2);
    icu::Calendar::setTimeZone(v13, TimeZone);
    uint64_t v32 = v13;
    unsigned __int16 v33 = (icu::Calendar *)v13;
  }
  unsigned int v35 = (*(uint64_t (**)(icu::SimpleDateFormat *, uint64_t, UErrorCode *))(*(void *)this + 208))(this, 1, a5);
  BOOL v16 = 0;
  UChar v17 = 0;
  uint64_t v18 = 0;
  unsigned int v19 = 0;
  for (int i = 0; ; ++i)
  {
    unsigned int v21 = *((unsigned __int16 *)this + 180);
    if (*((__int16 *)this + 180) < 0) {
      break;
    }
    if (i >= (int)(v21 >> 5) || *a5 >= U_ILLEGAL_ARGUMENT_ERROR) {
      goto LABEL_45;
    }
    unsigned int v23 = v21 >> 5;
LABEL_20:
    if (v23 <= i)
    {
      unsigned int v26 = 0xFFFF;
    }
    else
    {
      uint64_t v25 = (char *)this + 362;
      if ((v21 & 2) == 0) {
        uint64_t v25 = (char *)*((void *)this + 47);
      }
      unsigned int v26 = *(unsigned __int16 *)&v25[2 * i];
    }
    if (v26 != v17 && (int)v18 >= 1)
    {
      icu::SimpleDateFormat::subFormat((uint64_t)this, (uint64_t)a3, v17, v18, v35, v19, v17, (uint64_t)v34, v33, a5);
      uint64_t v18 = 0;
      ++v19;
    }
    if (v26 == 39)
    {
      uint64_t v27 = i + 1;
      unsigned int v28 = *((unsigned __int16 *)this + 180);
      if (*((__int16 *)this + 180) < 0)
      {
        int v29 = *((_DWORD *)this + 91);
        if ((int)v27 < v29)
        {
LABEL_38:
          if (v29 > v27)
          {
            uint64_t v30 = (char *)this + 362;
            if ((v28 & 2) == 0) {
              uint64_t v30 = (char *)*((void *)this + 47);
            }
            if (*(_WORD *)&v30[2 * v27] == 39)
            {
              __int16 v36 = 39;
              icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v36, 0, 1);
              ++i;
              continue;
            }
          }
        }
      }
      else if ((int)v27 < (int)(v28 >> 5))
      {
        int v29 = v28 >> 5;
        goto LABEL_38;
      }
      BOOL v16 = !v16;
      continue;
    }
    if (v16 || v26 > 0x7F || !byte_18CA970A4[v26])
    {
      __int16 v37 = v26;
      icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v37, 0, 1);
    }
    else
    {
      BOOL v16 = 0;
      uint64_t v18 = (v18 + 1);
      UChar v17 = v26;
    }
  }
  unsigned int v23 = *((_DWORD *)this + 91);
  if (i < (int)v23 && *a5 <= U_ZERO_ERROR) {
    goto LABEL_20;
  }
LABEL_45:
  if ((int)v18 > 0) {
    icu::SimpleDateFormat::subFormat((uint64_t)this, (uint64_t)a3, v17, v18, v35, v19, v17, (uint64_t)v34, v33, a5);
  }
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  return a3;
}

icu::UnicodeString *icu::SimpleDateFormat::format(icu::SimpleDateFormat *this, icu::Calendar *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v10, a4, a5);
  icu::SimpleDateFormat::_format(this, a2, a3, (icu::FieldPositionHandler *)v10, a5);
  icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v10);
  return a3;
}

uint64_t icu::SimpleDateFormat::subFormat(uint64_t result, uint64_t a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6, UChar a7, uint64_t a8, icu::Calendar *a9, UErrorCode *a10)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  if (*(int *)a10 > 0) {
    return result;
  }
  uint64_t v14 = result;
  unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(a3);
  unsigned int v16 = *(unsigned __int16 *)(a2 + 8);
  int v17 = (__int16)v16;
  unsigned int v18 = v16 >> 5;
  if (v17 < 0) {
    unsigned int v18 = *(_DWORD *)(a2 + 12);
  }
  unsigned int v167 = v18;
  unsigned int v19 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a9 + 184))(a9);
  int v20 = strcmp(v19, "hebrew");
  unsigned int v21 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a9 + 184))(a9);
  uint64_t result = strcmp(v21, "chinese");
  if (result)
  {
    long long v22 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a9 + 184))(a9);
    uint64_t result = strcmp(v22, "dangi");
    BOOL v23 = result == 0;
  }
  else
  {
    BOOL v23 = 1;
  }
  if (PatternCharIndex == 38)
  {
    if (a3 == 108) {
      return result;
    }
    int v24 = 3;
LABEL_28:
    *a10 = v24;
    return result;
  }
  if (PatternCharIndex > 0x22)
  {
    uint64_t result = 0;
  }
  else if (PatternCharIndex == 34)
  {
    uint64_t result = (*(uint64_t (**)(icu::Calendar *, UErrorCode *))(*(void *)a9 + 424))(a9, a10);
  }
  else
  {
    uint64_t result = icu::Calendar::get(a9, icu::SimpleDateFormat::fgPatternIndexToCalendarField[PatternCharIndex], a10);
  }
  if (*(int *)a10 <= 0)
  {
    uint64_t v25 = *(void *)(v14 + 800);
    if (v25 && (uint64_t v26 = *(void *)(v25 + 8 * PatternCharIndex)) != 0) {
      uint64_t v27 = (icu::NumberFormat **)(v26 + 24);
    }
    else {
      uint64_t v27 = (icu::NumberFormat **)(v14 + 336);
    }
    unsigned int v28 = *v27;
    if (!v28)
    {
      int v24 = 5;
      goto LABEL_28;
    }
    lpsrc = v28;
    signed int v165 = result;
    memset(v172, 0, sizeof(v172));
    icu::UnicodeString::UnicodeString(v172, "hebr", 4, 0);
    switch(PatternCharIndex)
    {
      case 0u:
        if (v23)
        {
          unsigned int v35 = (icu::SimpleDateFormat *)v14;
          __int16 v36 = lpsrc;
          __int16 v37 = (icu::UnicodeString *)a2;
          uint64_t v38 = v165;
          uint64_t v39 = 1;
          uint64_t v40 = 9;
          goto LABEL_70;
        }
        uint64_t v46 = v167;
        if (a4 == 4)
        {
          sub_18C9DB06C(a2, v165, *(void *)(*(void *)(v14 + 768) + 24), *(_DWORD *)(*(void *)(v14 + 768) + 32));
          unsigned int v32 = 7;
        }
        else if (a4 == 5)
        {
          sub_18C9DB06C(a2, v165, *(void *)(*(void *)(v14 + 768) + 40), *(_DWORD *)(*(void *)(v14 + 768) + 48));
          unsigned int v32 = 9;
        }
        else
        {
          sub_18C9DB06C(a2, v165, *(void *)(*(void *)(v14 + 768) + 8), *(_DWORD *)(*(void *)(v14 + 768) + 16));
          unsigned int v32 = 8;
        }
        goto LABEL_192;
      case 1u:
      case 0x12u:
        goto LABEL_56;
      case 2u:
      case 0x1Au:
        if (v20)
        {
          unsigned int v34 = v165;
        }
        else
        {
          unint64_t v70 = (icu::HebrewCalendar *)icu::Calendar::get(a9, 1u, a10);
          BOOL isLeapYear = icu::HebrewCalendar::isLeapYear(v70);
          if (v165 != 6 || !isLeapYear || (int)a4 <= 2) {
            int v74 = v165;
          }
          else {
            int v74 = 13;
          }
          long long v75 = (icu::HebrewCalendar *)icu::Calendar::get(a9, 1u, a10);
          BOOL v78 = !icu::HebrewCalendar::isLeapYear(v75) && v74 > 5 && (int)a4 < 3;
          unsigned int v34 = v74 - v78;
        }
        uint64_t v79 = *(void *)(v14 + 768);
        if (*(void *)(v79 + 472) && *(int *)(v79 + 480) >= 7)
        {
          unsigned int v80 = v34;
          int v81 = icu::Calendar::get(a9, 0x16u, a10);
          unsigned int v34 = v80;
          int v82 = v81;
        }
        else
        {
          int v82 = 0;
        }
        switch(a4)
        {
          case 3:
            uint64_t v102 = *(void *)(v14 + 768);
            if (PatternCharIndex == 2)
            {
              uint64_t v103 = *(void *)(v102 + 72);
              int v104 = *(_DWORD *)(v102 + 80);
              if (v82)
              {
                int v105 = (icu::UnicodeString *)(*(void *)(v102 + 472) + 64);
LABEL_176:
                sub_18C9DB0A4((icu::UnicodeString *)a2, v34, v103, v104, v105, a10);
                unsigned int v32 = 1;
                goto LABEL_225;
              }
LABEL_175:
              int v105 = 0;
              goto LABEL_176;
            }
            uint64_t v115 = *(void *)(v102 + 120);
            int v116 = *(_DWORD *)(v102 + 128);
            if (v82)
            {
              long long v117 = (icu::UnicodeString *)(*(void *)(v102 + 472) + 256);
LABEL_184:
              sub_18C9DB0A4((icu::UnicodeString *)a2, v34, v115, v116, v117, a10);
              unsigned int v32 = 2;
              goto LABEL_225;
            }
            break;
          case 4:
            uint64_t v106 = *(void *)(v14 + 768);
            if (PatternCharIndex == 2)
            {
              uint64_t v103 = *(void *)(v106 + 56);
              int v104 = *(_DWORD *)(v106 + 64);
              if (v82)
              {
                int v105 = *(icu::UnicodeString **)(v106 + 472);
                goto LABEL_176;
              }
              goto LABEL_175;
            }
            uint64_t v115 = *(void *)(v106 + 104);
            int v116 = *(_DWORD *)(v106 + 112);
            if (v82)
            {
              long long v117 = (icu::UnicodeString *)(*(void *)(v106 + 472) + 192);
              goto LABEL_184;
            }
            break;
          case 5:
            uint64_t v83 = *(void *)(v14 + 768);
            if (PatternCharIndex == 2)
            {
              uint64_t v84 = *(void *)(v83 + 88);
              int v85 = *(_DWORD *)(v83 + 96);
              if (v82)
              {
                long long v86 = (icu::UnicodeString *)(*(void *)(v83 + 472) + 128);
LABEL_182:
                sub_18C9DB0A4((icu::UnicodeString *)a2, v34, v84, v85, v86, a10);
                unsigned int v32 = 3;
                goto LABEL_225;
              }
            }
            else
            {
              uint64_t v84 = *(void *)(v83 + 136);
              int v85 = *(_DWORD *)(v83 + 144);
              if (v82)
              {
                long long v86 = (icu::UnicodeString *)(*(void *)(v83 + 472) + 320);
                goto LABEL_182;
              }
            }
            long long v86 = 0;
            goto LABEL_182;
          default:
            memset((char *)v171 + 8, 0, 56);
            *(void *)&v171[0] = &unk_1EDA47700;
            WORD4(v171[0]) = 2;
            icu::SimpleDateFormat::zeroPaddingNumber((icu::SimpleDateFormat *)v14, lpsrc, (icu::UnicodeString *)v171, v34 + 1, a4, 10);
            if (v82) {
              long long v107 = (icu::UnicodeString *)(*(void *)(*(void *)(v14 + 768) + 472) + 384);
            }
            else {
              long long v107 = 0;
            }
            sub_18C9DB0A4((icu::UnicodeString *)a2, 0, (uint64_t)v171, 1, v107, a10);
LABEL_179:
            icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v171);
LABEL_180:
            unsigned int v32 = 0;
LABEL_225:
            UChar v120 = a7;
            uint64_t v46 = v167;
            goto LABEL_226;
        }
        long long v117 = 0;
        goto LABEL_184;
      case 4u:
        uint64_t v38 = v165;
        if (v165) {
          goto LABEL_67;
        }
        int v41 = (*(uint64_t (**)(icu::Calendar *, uint64_t))(*(void *)a9 + 128))(a9, 11);
        goto LABEL_45;
      case 8u:
        if ((int)a4 >= 3) {
          uint64_t v42 = 3;
        }
        else {
          uint64_t v42 = a4;
        }
        if (a4 == 1)
        {
          int v45 = 100;
          uint64_t v46 = v167;
          signed int v43 = v165;
          long long v44 = lpsrc;
          goto LABEL_157;
        }
        signed int v43 = v165;
        long long v44 = lpsrc;
        if (a4 == 2)
        {
          int v45 = 10;
          uint64_t v46 = v167;
LABEL_157:
          uint64_t v108 = (v43 / v45);
          long long v109 = (icu::SimpleDateFormat *)v14;
          long long v110 = (icu::UnicodeString *)a2;
          goto LABEL_161;
        }
        icu::SimpleDateFormat::zeroPaddingNumber((icu::SimpleDateFormat *)v14, lpsrc, (icu::UnicodeString *)a2, v165, v42, 10);
        uint64_t v46 = v167;
        if ((int)a4 >= 4)
        {
          long long v109 = (icu::SimpleDateFormat *)v14;
          long long v44 = lpsrc;
          long long v110 = (icu::UnicodeString *)a2;
          uint64_t v108 = 0;
          uint64_t v42 = (a4 - 3);
LABEL_161:
          icu::SimpleDateFormat::zeroPaddingNumber(v109, v44, v110, v108, v42, 10);
        }
LABEL_191:
        unsigned int v32 = 0;
        goto LABEL_192;
      case 9u:
        goto LABEL_122;
      case 0xEu:
        uint64_t v47 = *(void *)(v14 + 768);
        if ((int)a4 > 4)
        {
          uint64_t v48 = *(void *)(v47 + 296);
          int v49 = *(_DWORD *)(v47 + 304);
        }
        else
        {
          uint64_t v48 = *(void *)(v47 + 280);
          int v49 = *(_DWORD *)(v47 + 288);
        }
        uint64_t v87 = a2;
        unsigned int v50 = v165;
        goto LABEL_164;
      case 0xFu:
        uint64_t v38 = v165;
        if (v165) {
          goto LABEL_67;
        }
        int v41 = (*(uint64_t (**)(icu::Calendar *, uint64_t))(*(void *)a9 + 160))(a9, 10);
LABEL_45:
        uint64_t v38 = (v41 + 1);
        goto LABEL_67;
      case 0x11u:
      case 0x17u:
      case 0x18u:
      case 0x1Du:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
        memset(v171, 0, sizeof(v171));
        memset(v170, 0, sizeof(v170));
        icu::UnicodeString::UnicodeString(v170, v171, 0, 128);
        uint64_t TimeZone = icu::Calendar::getTimeZone(a9);
        double TimeInMillis = icu::Calendar::getTimeInMillis(a9, a10);
        __int16 v31 = icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)v14, a10);
        unsigned int v32 = 0;
        if (*(int *)a10 <= 0)
        {
          switch(PatternCharIndex)
          {
            case 0x11u:
              unsigned __int16 v33 = *(void (**)(double))(*(void *)v31 + 64);
              if ((int)a4 <= 3) {
                goto LABEL_149;
              }
              goto LABEL_195;
            case 0x17u:
              goto LABEL_219;
            case 0x18u:
              if (a4 == 4)
              {
                unsigned __int16 v33 = *(void (**)(double))(*(void *)v31 + 64);
LABEL_195:
                v33(TimeInMillis);
                unsigned int v32 = 12;
              }
              else if (a4 == 1)
              {
                unsigned __int16 v33 = *(void (**)(double))(*(void *)v31 + 64);
LABEL_149:
                v33(TimeInMillis);
                unsigned int v32 = 13;
              }
              else
              {
LABEL_220:
                unsigned int v32 = 0;
              }
              break;
            case 0x1Du:
              switch((int)a4)
              {
                case 1:
                case 2:
                case 3:
                  goto LABEL_219;
                case 4:
                  (*(void (**)(icu::TimeZoneFormat *, void, uint64_t, _OWORD *, void, double))(*(void *)v31 + 64))(v31, 0, TimeZone, v170, 0, TimeInMillis);
                  unsigned int v32 = 10;
                  break;
                default:
                  goto LABEL_220;
              }
              break;
            case 0x1Fu:
              if (a4 == 4 || a4 == 1) {
LABEL_219:
              }
                (*(void (**)(double))(*(void *)v31 + 64))(TimeInMillis);
              goto LABEL_220;
            case 0x20u:
              switch((int)a4)
              {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                  goto LABEL_219;
                default:
                  goto LABEL_220;
              }
              goto LABEL_220;
            case 0x21u:
              switch((int)a4)
              {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                  goto LABEL_219;
                default:
                  goto LABEL_220;
              }
              goto LABEL_220;
            default:
              abort();
          }
        }
        if ((SWORD4(v170[0]) & 0x8000u) == 0) {
          uint64_t v131 = WORD4(v170[0]) >> 5;
        }
        else {
          uint64_t v131 = HIDWORD(v170[0]);
        }
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)v170, 0, v131);
        icu::UnicodeString::~UnicodeString(v132, (icu::UnicodeString *)v170);
        goto LABEL_225;
      case 0x13u:
        if ((int)a4 <= 2) {
          goto LABEL_47;
        }
        signed int v88 = icu::Calendar::get(a9, 7u, a10);
        long long v89 = (void *)*(unsigned int *)a10;
        if ((int)v89 > 0) {
          return (uint64_t)icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v172);
        }
        signed int v165 = v88;
LABEL_122:
        if (a4 == 4)
        {
          sub_18C9DB06C(a2, v165, *(void *)(*(void *)(v14 + 768) + 152), *(_DWORD *)(*(void *)(v14 + 768) + 160));
          unsigned int v32 = 4;
          goto LABEL_225;
        }
        uint64_t v46 = v167;
        unsigned int v90 = v165;
        if (a4 == 6)
        {
          uint64_t v111 = *(void *)(v14 + 768);
          uint64_t v112 = *(void *)(v111 + 184);
          int v113 = *(_DWORD *)(v111 + 192);
        }
        else
        {
          if (a4 == 5)
          {
            uint64_t v91 = *(void *)(v14 + 768);
            uint64_t v92 = *(void *)(v91 + 200);
            int v93 = *(_DWORD *)(v91 + 208);
            goto LABEL_126;
          }
          uint64_t v114 = *(void *)(v14 + 768);
          uint64_t v112 = *(void *)(v114 + 168);
          int v113 = *(_DWORD *)(v114 + 176);
        }
        sub_18C9DB06C(a2, v165, v112, v113);
        unsigned int v32 = 4;
        goto LABEL_192;
      case 0x19u:
        if ((int)a4 <= 2)
        {
          unsigned int v35 = (icu::SimpleDateFormat *)v14;
          __int16 v36 = lpsrc;
          __int16 v37 = (icu::UnicodeString *)a2;
          uint64_t v38 = v165;
          uint64_t v39 = 1;
          goto LABEL_69;
        }
        unsigned int v94 = icu::Calendar::get(a9, 7u, a10);
        long long v89 = (void *)*(unsigned int *)a10;
        if ((int)v89 > 0) {
          return (uint64_t)icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v172);
        }
        unsigned int v90 = v94;
        if (a4 == 4)
        {
          sub_18C9DB06C(a2, v94, *(void *)(*(void *)(v14 + 768) + 216), *(_DWORD *)(*(void *)(v14 + 768) + 224));
          unsigned int v32 = 5;
          goto LABEL_225;
        }
        uint64_t v46 = v167;
        if (a4 == 6)
        {
          uint64_t v150 = *(void *)(v14 + 768);
          uint64_t v151 = *(void *)(v150 + 248);
          int v152 = *(_DWORD *)(v150 + 256);
        }
        else
        {
          if (a4 == 5)
          {
            uint64_t v95 = *(void *)(v14 + 768);
            uint64_t v92 = *(void *)(v95 + 264);
            int v93 = *(_DWORD *)(v95 + 272);
LABEL_126:
            sub_18C9DB06C(a2, v90, v92, v93);
            unsigned int v32 = 6;
LABEL_192:
            UChar v120 = a7;
LABEL_226:
            if (!a6 && *(void *)(v14 + 824))
            {
              unsigned int v138 = *(unsigned __int16 *)(a2 + 8);
              int v139 = (__int16)v138;
              LODWORD(v140) = v138 >> 5;
              uint64_t v140 = v139 >= 0 ? (uint64_t *)v140 : (uint64_t *)*(unsigned int *)(a2 + 12);
              if ((int)v140 > (int)v46)
              {
                UChar32 v141 = icu::UnicodeString::char32At(v140, (icu::UnicodeString *)a2, v46);
                int v142 = u_islower(v141);
                UChar v120 = a7;
                if (v142)
                {
                  switch(a5)
                  {
                    case 0x102u:
                      goto LABEL_244;
                    case 0x104u:
                      int v143 = (unsigned char *)(*(void *)(v14 + 768) + 2 * v32 + 833);
                      break;
                    case 0x103u:
                      int v143 = (unsigned char *)(*(void *)(v14 + 768) + 2 * v32 + 832);
                      break;
                    default:
                      goto LABEL_227;
                  }
                  if (*v143)
                  {
LABEL_244:
                    uint64_t v144 = (icu::BreakIterator *)(*(uint64_t (**)(void))(**(void **)(v14 + 824) + 32))(*(void *)(v14 + 824));
                    memset(v171, 0, 64);
                    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v171, (const icu::UnicodeString *)a2, v46);
                    icu::UnicodeString::toTitle((UChar **)v171, v144, (const icu::Locale *)(v14 + 544), 768);
                    unsigned int v145 = *(unsigned __int16 *)(a2 + 8);
                    int v146 = (__int16)v145;
                    int v147 = v145 >> 5;
                    if (v146 >= 0) {
                      int v148 = v147;
                    }
                    else {
                      int v148 = *(_DWORD *)(a2 + 12);
                    }
                    sub_18C9DB25C((icu::UnicodeString *)a2, v46, v148, (uint64_t)v171);
                    if (v144) {
                      (*(void (**)(icu::BreakIterator *))(*(void *)v144 + 8))(v144);
                    }
                    icu::UnicodeString::~UnicodeString(v149, (icu::UnicodeString *)v171);
                    UChar v120 = a7;
                  }
                }
              }
            }
LABEL_227:
            uint64_t v133 = icu::DateFormatSymbols::getPatternCharIndex(v120);
            unsigned int v134 = *(unsigned __int16 *)(a2 + 8);
            int v135 = (__int16)v134;
            unsigned int v136 = v134 >> 5;
            if (v135 >= 0) {
              uint64_t v137 = v136;
            }
            else {
              uint64_t v137 = *(unsigned int *)(a2 + 12);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a8 + 16))(a8, v133, v46, v137);
            return (uint64_t)icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v172);
          }
          uint64_t v153 = *(void *)(v14 + 768);
          uint64_t v151 = *(void *)(v153 + 232);
          int v152 = *(_DWORD *)(v153 + 240);
        }
        sub_18C9DB06C(a2, v94, v151, v152);
        unsigned int v32 = 5;
        goto LABEL_192;
      case 0x1Bu:
        if ((int)a4 >= 5)
        {
          unsigned int v50 = v165 / 3;
          uint64_t v51 = *(void *)(v14 + 768);
          uint64_t v48 = *(void *)(v51 + 408);
          int v49 = *(_DWORD *)(v51 + 416);
          goto LABEL_163;
        }
        uint64_t v46 = v167;
        signed int v96 = v165;
        if (a4 == 3)
        {
          unsigned int v97 = v165 / 3;
          uint64_t v118 = *(void *)(v14 + 768);
          uint64_t v99 = *(void *)(v118 + 392);
          int v100 = *(_DWORD *)(v118 + 400);
        }
        else
        {
          if (a4 != 4) {
            goto LABEL_160;
          }
          unsigned int v97 = v165 / 3;
          uint64_t v98 = *(void *)(v14 + 768);
          uint64_t v99 = *(void *)(v98 + 376);
          int v100 = *(_DWORD *)(v98 + 384);
        }
        goto LABEL_190;
      case 0x1Cu:
        if ((int)a4 >= 5)
        {
          unsigned int v50 = v165 / 3;
          uint64_t v52 = *(void *)(v14 + 768);
          uint64_t v48 = *(void *)(v52 + 456);
          int v49 = *(_DWORD *)(v52 + 464);
          goto LABEL_163;
        }
        uint64_t v46 = v167;
        signed int v96 = v165;
        if (a4 == 3)
        {
          unsigned int v97 = v165 / 3;
          uint64_t v119 = *(void *)(v14 + 768);
          uint64_t v99 = *(void *)(v119 + 440);
          int v100 = *(_DWORD *)(v119 + 448);
        }
        else
        {
          if (a4 != 4)
          {
LABEL_160:
            uint64_t v108 = (v96 / 3 + 1);
            long long v109 = (icu::SimpleDateFormat *)v14;
            long long v44 = lpsrc;
            long long v110 = (icu::UnicodeString *)a2;
            uint64_t v42 = a4;
            goto LABEL_161;
          }
          unsigned int v97 = v165 / 3;
          uint64_t v101 = *(void *)(v14 + 768);
          uint64_t v99 = *(void *)(v101 + 424);
          int v100 = *(_DWORD *)(v101 + 432);
        }
LABEL_190:
        sub_18C9DB06C(a2, v97, v99, v100);
        goto LABEL_191;
      case 0x1Eu:
        uint64_t v53 = *(void *)(v14 + 768);
        uint64_t v48 = *(void *)(v53 + 488);
        if (v48 && (int v49 = *(_DWORD *)(v53 + 496), v165 <= v49))
        {
          unsigned int v50 = v165 - 1;
LABEL_163:
          uint64_t v87 = a2;
LABEL_164:
          sub_18C9DB06C(v87, v50, v48, v49);
        }
        else
        {
LABEL_56:
          int v54 = sub_18C98950C(v14 + 416, (uint64_t)v172);
          if (v165 < 6000 && v165 > 5000 && v54 == 0) {
            uint64_t v38 = (v165 - 5000);
          }
          else {
            uint64_t v38 = v165;
          }
          if (a4 == 2)
          {
            unsigned int v35 = (icu::SimpleDateFormat *)v14;
            __int16 v36 = lpsrc;
            __int16 v37 = (icu::UnicodeString *)a2;
            uint64_t v39 = 2;
            uint64_t v40 = 2;
          }
          else
          {
LABEL_67:
            unsigned int v35 = (icu::SimpleDateFormat *)v14;
            __int16 v36 = lpsrc;
            __int16 v37 = (icu::UnicodeString *)a2;
LABEL_68:
            uint64_t v39 = a4;
LABEL_69:
            uint64_t v40 = 10;
          }
LABEL_70:
          icu::SimpleDateFormat::zeroPaddingNumber(v35, v36, v37, v38, v39, v40);
        }
        goto LABEL_180;
      case 0x23u:
        if (icu::Calendar::get(a9, 0xBu, a10) == 12
          && (!*(unsigned char *)(v14 + 792) || !icu::Calendar::get(a9, 0xCu, a10))
          && (!*(unsigned char *)(v14 + 793) || !icu::Calendar::get(a9, 0xDu, a10)))
        {
          int v57 = icu::Calendar::get(a9, 9u, a10);
          if ((int)a4 > 3)
          {
            uint64_t v125 = *(void *)(v14 + 768);
            uint64_t v59 = v57;
            if (a4 == 4 || a4 >= 6) {
              uint64_t v58 = *(void *)(v125 + 880);
            }
            else {
              uint64_t v58 = *(void *)(v125 + 896);
            }
          }
          else
          {
            uint64_t v58 = *(void *)(*(void *)(v14 + 768) + 864);
            uint64_t v59 = v57;
          }
          uint64_t v154 = v58 + (v59 << 6);
          if (v154)
          {
            unsigned int v155 = *(unsigned __int16 *)(v154 + 8);
            if ((v155 & 1) == 0) {
              goto LABEL_277;
            }
          }
        }
        icu::SimpleDateFormat::subFormat(v14, a2, 97, a4, a5, a6, 98, a8, a9, a10);
        return (uint64_t)icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v172);
      case 0x24u:
        uint64_t v60 = sub_18C901A4C((icu::Locale *)(v14 + 544), (int *)a10);
        if (*(int *)a10 > 0) {
          goto LABEL_180;
        }
        long long v61 = (unsigned char *)v60;
        if (!v60)
        {
          unsigned int v162 = a9;
          uint64_t v163 = a10;
          uint64_t v121 = v14;
          uint64_t v122 = a2;
          uint64_t v123 = a4;
          uint64_t v124 = a5;
          goto LABEL_282;
        }
        int v62 = icu::Calendar::get(a9, 0xBu, a10);
        if (*(unsigned char *)(v14 + 792)) {
          int v63 = icu::Calendar::get(a9, 0xCu, a10);
        }
        else {
          int v63 = 0;
        }
        if (*(unsigned char *)(v14 + 793)) {
          int v126 = icu::Calendar::get(a9, 0xDu, a10);
        }
        else {
          int v126 = 0;
        }
        uint64_t v124 = a5;
        long long v127 = &v61[4 * v62];
        if (v62 || v63 || v126)
        {
          if (v62 == 12 && !v63 && !v126 && v61[1])
          {
            unsigned int v128 = 1;
LABEL_216:
            if ((int)a4 > 3)
            {
              uint64_t v156 = *(void *)(v14 + 768);
              uint64_t v130 = (int)v128;
              if (a4 == 4 || a4 >= 6) {
                uint64_t v129 = *(void *)(v156 + 880);
              }
              else {
                uint64_t v129 = *(void *)(v156 + 896);
              }
            }
            else
            {
              uint64_t v129 = *(void *)(*(void *)(v14 + 768) + 864);
              uint64_t v130 = (int)v128;
            }
            uint64_t v154 = v129 + (v130 << 6);
            if (v154)
            {
              if (v128 > 1)
              {
                uint64_t v124 = a5;
                goto LABEL_275;
              }
              uint64_t v124 = a5;
              if ((*(_WORD *)(v154 + 8) & 1) == 0)
              {
LABEL_275:
                if ((v128 & 0xFFFFFFFE) != 0xA)
                {
                  unsigned int v155 = *(unsigned __int16 *)(v154 + 8);
                  if ((v155 & 1) == 0)
                  {
LABEL_277:
                    int v159 = (__int16)v155;
                    unsigned int v160 = v155 >> 5;
                    if (v159 >= 0) {
                      uint64_t v161 = v160;
                    }
                    else {
                      uint64_t v161 = *(unsigned int *)(v154 + 12);
                    }
                    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)v154, 0, v161);
                    goto LABEL_180;
                  }
                }
                unsigned int v162 = a9;
                uint64_t v163 = a10;
                uint64_t v121 = v14;
                uint64_t v122 = a2;
                uint64_t v123 = a4;
LABEL_282:
                icu::SimpleDateFormat::subFormat(v121, v122, 97, v123, v124, a6, 66, a8, v162, v163);
                return (uint64_t)icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v172);
              }
LABEL_267:
              unsigned int v128 = *((_DWORD *)v127 + 1);
              if ((int)a4 > 3)
              {
                uint64_t v158 = *(void *)(v14 + 768);
                if (a4 == 4 || a4 >= 6) {
                  uint64_t v157 = *(void *)(v158 + 880);
                }
                else {
                  uint64_t v157 = *(void *)(v158 + 896);
                }
              }
              else
              {
                uint64_t v157 = *(void *)(*(void *)(v14 + 768) + 864);
              }
              uint64_t v154 = v157 + ((uint64_t)(int)v128 << 6);
              goto LABEL_275;
            }
LABEL_266:
            uint64_t v124 = a5;
            if (v128 > 1)
            {
              uint64_t v154 = 0;
              goto LABEL_275;
            }
            goto LABEL_267;
          }
        }
        else if (*v61)
        {
          goto LABEL_267;
        }
        unsigned int v128 = *((_DWORD *)v127 + 1);
        if (v128 <= 0xB && ((1 << v128) & 0xC01) != 0) {
          goto LABEL_266;
        }
        goto LABEL_216;
      case 0x25u:
        memset((char *)v171 + 8, 0, 56);
        *(void *)&v171[0] = &unk_1EDA47700;
        WORD4(v171[0]) = 2;
        TimeSeparatorString = icu::DateFormatSymbols::getTimeSeparatorString(*(UChar ***)(v14 + 768), (UChar **)v171);
        unsigned int v65 = *((unsigned __int16 *)TimeSeparatorString + 4);
        int v66 = (__int16)v65;
        unsigned int v67 = v65 >> 5;
        if (v66 >= 0) {
          uint64_t v68 = v67;
        }
        else {
          uint64_t v68 = *((unsigned int *)TimeSeparatorString + 3);
        }
        icu::UnicodeString::doAppend(a2, TimeSeparatorString, 0, v68);
        goto LABEL_179;
      default:
LABEL_47:
        unsigned int v35 = (icu::SimpleDateFormat *)v14;
        __int16 v36 = lpsrc;
        __int16 v37 = (icu::UnicodeString *)a2;
        uint64_t v38 = v165;
        goto LABEL_68;
    }
  }
  return result;
}

uint64_t icu::SimpleDateFormat::isSyntaxChar(unsigned int a1)
{
  if (a1 > 0x7F) {
    return 0;
  }
  else {
    return (char)byte_18CA970A4[a1];
  }
}

uint64_t icu::SimpleDateFormat::getLevelFromChar(unsigned int a1)
{
  if (a1 > 0x7F) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_18CA96EA4[a1];
  }
}

void *sub_18C9DAD20(char **a1, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t Instance = icu::NumberFormat::createInstance(a1, a2, a3);
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t result = sub_18C9DB528((uint64_t)Instance);
  if (!result) {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void icu::SimpleDateFormat::zeroPaddingNumber(icu::SimpleDateFormat *this, const icu::NumberFormat *lpsrc, icu::UnicodeString *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*((const icu::NumberFormat **)this + 42) == lpsrc && *((void *)this + 101))
  {
    UErrorCode v23 = U_ZERO_ERROR;
    unsigned int v21 = 0;
    uint64_t v22 = 0;
    icu::number::SimpleNumber::forInt64((void **)(int)a4, (int *)&v23, &v21);
    icu::number::SimpleNumber::setMinimumIntegerDigits(&v21, a5, &v23);
    icu::number::SimpleNumber::truncateStart((icu::number::SimpleNumber *)&v21, a6, &v23);
    memset(v20, 0, sizeof(v20));
    uint64_t v14 = *((void *)this + 101);
    unsigned int v18 = v21;
    int v19 = v22;
    unsigned int v21 = 0;
    icu::number::SimpleNumberFormatter::format(v14, (uint64_t)&v18, &v23, (uint64_t)v20);
    icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v18);
    if (v23 <= U_ZERO_ERROR)
    {
      icu::number::FormattedNumber::toTempString((icu::number::FormattedNumber *)v20, &v23, (uint64_t)&v24);
      if ((v25 & 0x8000u) == 0) {
        uint64_t v15 = (unsigned __int16)v25 >> 5;
      }
      else {
        uint64_t v15 = HIDWORD(v25);
      }
      icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)&v24, 0, v15);
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v24);
    }
    icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v20);
    icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v21);
  }
  else if (lpsrc)
  {
    uint64_t v11 = *(void *)lpsrc;
    uint64_t v26 = 0;
    int v24 = &unk_1EDA4C7F0;
    uint64_t v25 = 0xFFFFFFFFLL;
    if (v12)
    {
      (*(void (**)(void *, uint64_t, icu::UnicodeString *, void **))(*(void *)v12 + 88))(v12, a4, a3, &v24);
    }
    else
    {
      uint64_t v17 = (*(uint64_t (**)(const icu::NumberFormat *))(v11 + 32))(lpsrc);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 224))(v17, a5);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 216))(v17, a6);
      (*(void (**)(uint64_t, uint64_t, icu::UnicodeString *, void **))(*(void *)v17 + 88))(v17, a4, a3, &v24);
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v24);
  }
}

uint64_t sub_18C9DB06C(uint64_t result, unsigned int a2, uint64_t a3, int a4)
{
  if ((a2 & 0x80000000) == 0 && (int)a2 < a4)
  {
    uint64_t v4 = a3 + ((unint64_t)a2 << 6);
    unsigned int v5 = *(unsigned __int16 *)(v4 + 8);
    int v6 = (__int16)v5;
    unsigned int v7 = v5 >> 5;
    if (v6 >= 0) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = *(unsigned int *)(v4 + 12);
    }
    return icu::UnicodeString::doAppend(result, (const icu::UnicodeString *)v4, 0, v8);
  }
  return result;
}

void sub_18C9DB0A4(icu::UnicodeString *this, unsigned int a2, uint64_t a3, int a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x80000000) == 0 && (int)a2 < a4)
  {
    if (a5)
    {
      v15[1] = &unk_1EDA47700;
      __int16 v16 = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v15, a5, 1, 1, 0, a6);
      icu::SimpleFormatter::format((icu::SimpleFormatter *)v15, (const icu::UnicodeString *)(a3 + ((unint64_t)a2 << 6)), this, a6);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v15);
    }
    else
    {
      uint64_t v10 = a3 + ((unint64_t)a2 << 6);
      unsigned int v11 = *(unsigned __int16 *)(v10 + 8);
      int v12 = (__int16)v11;
      unsigned int v13 = v11 >> 5;
      if (v12 >= 0) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = *(unsigned int *)(v10 + 12);
      }
      icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)v10, 0, v14);
    }
  }
}

icu::TimeZoneFormat *icu::SimpleDateFormat::tzFormat(icu::SimpleDateFormat *this, UErrorCode *a2)
{
  umtx_lock((atomic_ullong *)&unk_1EB20BB68);
  uint64_t Instance = (icu::TimeZoneFormat *)*((void *)this + 97);
  unsigned int v5 = (uint64_t *)*(unsigned int *)a2;
  if (Instance) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = (int)v5 <= 0;
  }
  if (v6)
  {
    uint64_t Instance = icu::TimeZoneFormat::createInstance((char **)this + 68, a2, v5);
    *((void *)this + 97) = Instance;
  }
  umtx_unlock((std::mutex **)&unk_1EB20BB68);
  return Instance;
}

uint64_t icu::SimpleDateFormat::getSmpFmtLocale(icu::SimpleDateFormat *this)
{
  return (uint64_t)this + 544;
}

uint64_t sub_18C9DB25C(icu::UnicodeString *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = (a3 - a2);
  unsigned int v5 = *(unsigned __int16 *)(a4 + 8);
  int v6 = (__int16)v5;
  unsigned int v7 = v5 >> 5;
  if (v6 >= 0) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = *(unsigned int *)(a4 + 12);
  }
  return icu::UnicodeString::doReplace(a1, a2, v4, (const icu::UnicodeString *)a4, 0, v8);
}

void icu::SimpleDateFormat::adoptNumberFormat(icu::SimpleDateFormat *this@<X0>, icu::NumberFormat *a2@<X1>, void *a3@<X8>)
{
  unsigned int v5 = (void *)*((void *)this + 101);
  if (v5)
  {
    icu::number::SimpleNumberFormatter::cleanup(*((icu::number::SimpleNumberFormatter **)this + 101), a3);
    icu::UMemory::operator delete(v5);
  }
  *((void *)this + 101) = 0;
  (*(void (**)(icu::NumberFormat *))(*(void *)a2 + 288))(a2);
  uint64_t v6 = *((void *)this + 42);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 42) = a2;
  unsigned int v7 = (char *)*((void *)this + 100);
  if (v7)
  {
    sub_18C9D626C(v7);
    *((void *)this + 100) = 0;
  }
  UErrorCode v8 = U_ZERO_ERROR;
  icu::SimpleDateFormat::initSimpleNumberFormatter(this, &v8);
}

icu::SharedObject *icu::SimpleDateFormat::adoptNumberFormat(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::NumberFormat *a3, UErrorCode *a4)
{
  (*(void (**)(icu::NumberFormat *))(*(void *)a3 + 288))(a3);
  if (*(int *)a4 > 0)
  {
LABEL_2:
    UErrorCode v8 = *(uint64_t (**)(icu::NumberFormat *))(*(void *)a3 + 8);
    return (icu::SharedObject *)v8(a3);
  }
  if (!*((void *)this + 100))
  {
    uint64_t v10 = uprv_malloc(0x130uLL);
    if (!v10)
    {
      *((void *)this + 100) = 0;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_2;
    }
    v10[17] = 0u;
    v10[18] = 0u;
    v10[15] = 0u;
    v10[16] = 0u;
    v10[13] = 0u;
    v10[14] = 0u;
    v10[11] = 0u;
    v10[12] = 0u;
    v10[9] = 0u;
    v10[10] = 0u;
    v10[7] = 0u;
    v10[8] = 0u;
    v10[5] = 0u;
    _OWORD v10[6] = 0u;
    void v10[3] = 0u;
    _OWORD v10[4] = 0u;
    v10[1] = 0u;
    _OWORD v10[2] = 0u;
    *uint64_t v10 = 0u;
    *((void *)this + 100) = v10;
  }
  uint64_t result = (icu::SharedObject *)sub_18C9DB528((uint64_t)a3);
  if (result)
  {
    unsigned int v11 = result;
    for (unint64_t i = 0; ; ++i)
    {
      int v13 = *((__int16 *)a2 + 4);
      if (v13 < 0)
      {
        if ((uint64_t)i >= *((int *)a2 + 3)) {
          goto LABEL_25;
        }
        unint64_t v14 = *((unsigned int *)a2 + 3);
      }
      else
      {
        if (i >= (unint64_t)*((unsigned __int16 *)a2 + 4) >> 5) {
          goto LABEL_25;
        }
        unint64_t v14 = (unint64_t)*((unsigned __int16 *)a2 + 4) >> 5;
      }
      if (v14 <= i)
      {
        UChar v16 = -1;
      }
      else
      {
        uint64_t v15 = (v13 & 2) != 0
            ? (const icu::UnicodeString *)((char *)a2 + 10)
            : (const icu::UnicodeString *)*((void *)a2 + 3);
        UChar v16 = *((_WORD *)v15 + i);
      }
      unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v16);
      if (PatternCharIndex == 38) {
        break;
      }
      sub_18C8917C4(v11, (icu::SharedObject **)(*((void *)this + 100) + 8 * PatternCharIndex));
    }
    *a4 = U_INVALID_FORMAT_ERROR;
LABEL_25:
    return (icu::SharedObject *)icu::SharedObject::deleteIfZeroRefCount((uint64_t)v11);
  }
  else
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void *sub_18C9DB528(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 288))(a1);
  int v3 = (void *)icu::UMemory::operator new((icu::UMemory *)0x20, v2);
  uint64_t v4 = v3;
  if (v3)
  {
    v3[1] = 0;
    v3[2] = 0;
    void *v3 = &unk_1EDA4FFC8;
    v3[3] = a1;
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  }
  return v4;
}

uint64_t icu::SimpleDateFormat::getNumberFormatForField(uint64_t a1, UChar c)
{
  unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(c);
  if (PatternCharIndex == 38) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 800);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8 * PatternCharIndex)) != 0) {
    uint64_t v7 = v6 + 24;
  }
  else {
    uint64_t v7 = a1 + 336;
  }
  return *(void *)v7;
}

uint64_t icu::SimpleDateFormat::isAtNumericField(icu::SimpleDateFormat *this, const icu::UnicodeString *a2)
{
  int v2 = (int)a2;
  unsigned int v4 = *((unsigned __int16 *)this + 4);
  if (*((__int16 *)this + 4) < 0) {
    int v5 = *((_DWORD *)this + 3);
  }
  else {
    int v5 = v4 >> 5;
  }
  if (v5 <= (int)a2) {
    return 0;
  }
  if (v5 <= a2)
  {
    int v7 = 0xFFFF;
  }
  else
  {
    uint64_t v6 = (v4 & 2) != 0 ? (icu::SimpleDateFormat *)((char *)this + 10) : (icu::SimpleDateFormat *)*((void *)this + 3);
    int v7 = *((unsigned __int16 *)v6 + (int)a2);
  }
  int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v7);
  if (PatternCharIndex == 38) {
    return 0;
  }
  uint64_t v10 = 0;
  unsigned int v11 = *((unsigned __int16 *)this + 4);
  if ((v11 & 0x8000u) == 0) {
    unsigned int v12 = v11 >> 5;
  }
  else {
    unsigned int v12 = *((_DWORD *)this + 3);
  }
  if ((v11 & 2) != 0) {
    int v13 = (char *)this + 10;
  }
  else {
    int v13 = (char *)*((void *)this + 3);
  }
  uint64_t v14 = (uint64_t)&v13[2 * v2 + 2];
  do
  {
    if (v12 <= v2 + 1 + (int)v10) {
      int v15 = 0xFFFF;
    }
    else {
      int v15 = *(unsigned __int16 *)(v14 + 2 * v10);
    }
    ++v10;
  }
  while (v15 == v7);

  return icu::DateFormatSymbols::isNumericField(PatternCharIndex, v10);
}

BOOL icu::SimpleDateFormat::isAfterNonNumericField(icu::SimpleDateFormat *this, const icu::UnicodeString *a2)
{
  unsigned int v2 = a2 - 1;
  if ((int)a2 < 1) {
    return 0;
  }
  int v3 = (int)a2;
  unsigned int v5 = *((unsigned __int16 *)this + 4);
  unsigned int v6 = (v5 & 0x8000u) == 0 ? v5 >> 5 : *((_DWORD *)this + 3);
  if (v6 <= v2)
  {
    int v8 = 0xFFFF;
  }
  else
  {
    int v7 = (v5 & 2) != 0 ? (icu::SimpleDateFormat *)((char *)this + 10) : (icu::SimpleDateFormat *)*((void *)this + 3);
    int v8 = *((unsigned __int16 *)v7 + v2);
  }
  int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v8);
  if (PatternCharIndex == 38) {
    return 0;
  }
  uint64_t v11 = 0;
  unsigned int v12 = *((unsigned __int16 *)this + 4);
  if ((v12 & 0x8000u) == 0) {
    unsigned int v13 = v12 >> 5;
  }
  else {
    unsigned int v13 = *((_DWORD *)this + 3);
  }
  if ((v12 & 2) != 0) {
    uint64_t v14 = (char *)this + 10;
  }
  else {
    uint64_t v14 = (char *)*((void *)this + 3);
  }
  uint64_t v15 = (uint64_t)&v14[2 * v2 - 2];
  do
  {
    if (v13 <= v3 - 2 + (int)v11) {
      int v16 = 0xFFFF;
    }
    else {
      int v16 = *(unsigned __int16 *)(v15 + 2 * v11);
    }
    --v11;
  }
  while (v16 == v8);
  return icu::DateFormatSymbols::isNumericField(PatternCharIndex, -(int)v11) == 0;
}

void icu::SimpleDateFormat::parse(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::Calendar *a3, icu::ParsePosition *a4)
{
  unsigned int v4 = a4;
  unsigned int v5 = *((_DWORD *)a4 + 2);
  v108[0] = v5;
  if ((v5 & 0x80000000) != 0)
  {
    *((_DWORD *)a4 + 3) = 0;
    return;
  }
  unsigned int v6 = a3;
  int v7 = a2;
  unsigned int v97 = v5;
  unsigned int v107 = -1;
  BOOL v106 = 0;
  int v104 = 0;
  int v105 = -1;
  if (*((icu::Calendar **)this + 41) == a3
    || (UErrorCode v9 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a3 + 184))(a3),
        uint64_t v10 = (const char *)(*(uint64_t (**)(void))(**((void **)this + 41) + 184))(*((void *)this + 41)),
        !strcmp(v9, v10)))
  {
    uint64_t v12 = 0;
    uint64_t v101 = v6;
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 41) + 24))(*((void *)this + 41));
    if (!v11) {
      goto LABEL_176;
    }
    uint64_t v12 = v11;
    double TimeInMillis = icu::Calendar::getTimeInMillis(v6, (UErrorCode *)v108 + 1);
    icu::Calendar::setTimeInMillis(v12, TimeInMillis, (UErrorCode *)v108 + 1);
    if (SHIDWORD(v108[0]) > 0) {
      goto LABEL_174;
    }
    uint64_t TimeZone = icu::Calendar::getTimeZone(v6);
    icu::Calendar::setTimeZone(v12, TimeZone);
    uint64_t v101 = (icu::Calendar *)v12;
  }
  uint64_t v15 = *((void *)this + 96);
  if (*(void *)(v15 + 472) && (int v16 = (uint64_t *)*(unsigned int *)(v15 + 480), (int)v16 >= 7))
  {
    uint64_t v17 = (icu::MessageFormat *)icu::UMemory::operator new(v16, (icu::UMemory *)0x330, (unint64_t)a2);
    uint64_t v18 = (uint64_t)v17;
    if (!v17) {
      goto LABEL_135;
    }
    icu::MessageFormat::MessageFormat(v17, (const icu::UnicodeString *)(*(void *)(*((void *)this + 96) + 472) + 384), (icu::SimpleDateFormat *)((char *)this + 544), (UErrorCode *)v108 + 1);
    if (SHIDWORD(v108[0]) > 0) {
      goto LABEL_168;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v95 = v6;
  signed int v96 = v4;
  signed int v19 = 0;
  int v94 = 0;
  int v100 = 0;
  int v20 = (icu::SimpleDateFormat *)((char *)this + 352);
  int v21 = -1;
  uint64_t v98 = (uint64_t)v7;
  uint64_t v99 = v18;
  while (1)
  {
    LODWORD(v102[0]) = v19;
    unint64_t v22 = *((unsigned __int16 *)this + 180);
    if ((v22 & 0x8000) != 0) {
      break;
    }
    if (v19 >= (int)(v22 >> 5)) {
      goto LABEL_83;
    }
    unsigned int v23 = v22 >> 5;
    if (v23 <= v19) {
      goto LABEL_37;
    }
LABEL_20:
    int v24 = (char *)this + 362;
    if ((v22 & 2) == 0) {
      int v24 = (char *)*((void *)this + 47);
    }
    unint64_t v25 = *(unsigned __int16 *)&v24[2 * v19];
    if (v25 <= 0x7F && byte_18CA970A4[v25])
    {
      uint64_t v26 = 0;
      uint64_t v27 = (uint64_t)v19 << 32;
      int v28 = v19 + 2;
      for (signed int i = v19; ; ++i)
      {
        uint64_t v30 = v19 + 1 + v26;
        if ((v22 & 0x8000) != 0)
        {
          int64_t v31 = *((int *)this + 91);
          if (v30 >= v31) {
            break;
          }
        }
        else
        {
          int64_t v31 = v22 >> 5;
          if (v30 >= (uint64_t)(v22 >> 5)) {
            break;
          }
        }
        if (v31 <= v19 + (int)v26 + 1)
        {
          int v33 = 0xFFFF;
        }
        else
        {
          unsigned int v32 = (char *)this + 362;
          if ((v22 & 2) == 0) {
            unsigned int v32 = (char *)*((void *)this + 47);
          }
          int v33 = *(unsigned __int16 *)&v32[2 * v19 + 2 + 2 * v26];
        }
        if (v33 != v25) {
          break;
        }
        ++v26;
        v27 += 0x100000000;
        ++v28;
      }
      uint64_t v37 = v26 + v19;
      LODWORD(v102[0]) = v26 + v19;
      int v38 = v26 + 1;
      if (!icu::DateFormatSymbols::isNumericPatternChar(v25, v26 + 1))
      {
        int v21 = -1;
        goto LABEL_46;
      }
      if (v21 < 0)
      {
        if (!icu::SimpleDateFormat::isAtNumericField((icu::SimpleDateFormat *)((char *)this + 352), (const icu::UnicodeString *)(v37 + 1)))goto LABEL_46; {
        int v94 = v108[0];
        }
        if (v19 < 0)
        {
          int v100 = 0;
          int v21 = v19;
LABEL_46:
          if (v25 == 108)
          {
            int v7 = (const icu::UnicodeString *)v98;
            uint64_t v18 = v99;
            int v20 = (icu::SimpleDateFormat *)((char *)this + 352);
            goto LABEL_39;
          }
          int v7 = (const icu::UnicodeString *)v98;
          uint64_t v18 = v99;
          int v40 = icu::SimpleDateFormat::subParse((icu::NumberFormat **)this, v98, (int *)v108, v25, v38, 0, 1u, &v106, &v105, v101, v37, v99, (uint64_t)&v104, (int *)&v107);
          int v41 = v108[0];
          if (v40 == ~LODWORD(v108[0]))
          {
            int v42 = v37 + 1;
            unsigned int v43 = *((unsigned __int16 *)this + 180);
            if (*((__int16 *)this + 180) < 0)
            {
              unsigned int v44 = *((_DWORD *)this + 91);
              if (v42 >= (int)v44) {
                goto LABEL_60;
              }
LABEL_64:
              if (v44 <= v42)
              {
                uint64_t v46 = 0xFFFFLL;
              }
              else
              {
                int v45 = (char *)this + 362;
                if ((v43 & 2) == 0) {
                  int v45 = (char *)*((void *)this + 47);
                }
                uint64_t v46 = *(unsigned __int16 *)&v45[2 * v42];
              }
              if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)v46))
              {
                uint64_t v18 = v99;
                goto LABEL_60;
              }
              uint64_t v47 = i + 2;
              int v20 = (icu::SimpleDateFormat *)((char *)this + 352);
              do
              {
                int v48 = v47;
                if (*((__int16 *)this + 180) < 0)
                {
                  int64_t v49 = *((int *)this + 91);
                  if (v47 >= v49) {
                    break;
                  }
                }
                else
                {
                  if (v47 >= (uint64_t)((unint64_t)*((unsigned __int16 *)this + 180) >> 5)) {
                    break;
                  }
                  int64_t v49 = (unint64_t)*((unsigned __int16 *)this + 180) >> 5;
                }
                if (v49 <= v47)
                {
                  uint64_t v51 = 0xFFFFLL;
                }
                else
                {
                  unsigned int v50 = (char *)this + 362;
                  if ((*((_WORD *)this + 180) & 2) == 0) {
                    unsigned int v50 = (char *)*((void *)this + 47);
                  }
                  uint64_t v51 = *(unsigned __int16 *)&v50[2 * v47];
                }
                ++v47;
              }
              while (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v51));
              LODWORD(v37) = v48 - 1;
              LODWORD(v102[0]) = v48 - 1;
              uint64_t v18 = v99;
            }
            else
            {
              if (v42 < (int)(v43 >> 5))
              {
                unsigned int v44 = v43 >> 5;
                goto LABEL_64;
              }
LABEL_60:
              int v20 = (icu::SimpleDateFormat *)((char *)this + 352);
            }
            LODWORD(v108[0]) = v41;
            goto LABEL_39;
          }
          if (v40 < 1)
          {
LABEL_94:
            HIDWORD(v108[0]) = 9;
            unsigned int v6 = v95;
            unsigned int v4 = v96;
            goto LABEL_168;
          }
          int v41 = v40;
          goto LABEL_60;
        }
        int v100 = 0;
        int v21 = v19;
      }
      uint64_t v18 = v99;
      int v20 = (icu::SimpleDateFormat *)((char *)this + 352);
      if (v19 == v21)
      {
        if (v26 - v100 == -1) {
          goto LABEL_94;
        }
        int v39 = v100 + 1;
        int v38 = v26 - v100 + 1;
      }
      else
      {
        int v39 = v100;
      }
      int v100 = v39;
      int v7 = (const icu::UnicodeString *)v98;
      LODWORD(v108[0]) = icu::SimpleDateFormat::subParse((icu::NumberFormat **)this, v98, (int *)v108, v25, v38, 1u, 0, &v106, &v105, v101, v37, v99, (uint64_t)&v104, 0);
      if ((v108[0] & 0x80000000) != 0)
      {
        LODWORD(v37) = v21 - 1;
        LODWORD(v102[0]) = v21 - 1;
        LODWORD(v108[0]) = v94;
      }
    }
    else
    {
LABEL_37:
      unsigned int v34 = (int *)(*(uint64_t (**)(icu::SimpleDateFormat *, void, char *))(*(void *)this + 224))(this, 0, (char *)v108 + 4);
      unsigned int v35 = (*(uint64_t (**)(icu::SimpleDateFormat *, uint64_t, char *))(*(void *)this + 224))(this, 2, (char *)v108 + 4);
      int v36 = (*(uint64_t (**)(icu::SimpleDateFormat *))(*(void *)this + 96))(this);
      if (!icu::SimpleDateFormat::matchLiterals(v20, (const icu::UnicodeString *)v102, (int *)v7, (const icu::UnicodeString *)v108, v34, v35, v36))goto LABEL_94; {
      int v21 = -1;
      }
      LODWORD(v37) = v102[0];
    }
LABEL_39:
    signed int v19 = v37 + 1;
  }
  unsigned int v23 = *((_DWORD *)this + 91);
  if (v19 < (int)v23) {
    goto LABEL_20;
  }
LABEL_83:
  int v52 = v108[0];
  unsigned int v53 = *((unsigned __int16 *)v7 + 4);
  if ((v53 & 0x8000u) == 0) {
    unsigned int v54 = v53 >> 5;
  }
  else {
    unsigned int v54 = *((_DWORD *)v7 + 3);
  }
  if (v54 <= LODWORD(v108[0]))
  {
    unsigned int v6 = v95;
  }
  else
  {
    if ((v53 & 2) != 0) {
      long long v55 = (char *)v7 + 10;
    }
    else {
      long long v55 = (char *)*((void *)v7 + 3);
    }
    unsigned int v6 = v95;
    if (*(_WORD *)&v55[2 * SLODWORD(v108[0])] == 46
      && (*(unsigned int (**)(icu::SimpleDateFormat *, void, char *))(*(void *)this + 224))(this, 0, (char *)v108 + 4))
    {
      long long v56 = *((__int16 *)this + 180) < 0
          ? (const icu::UnicodeString *)*((unsigned int *)this + 91)
          : (const icu::UnicodeString *)(*((unsigned __int16 *)this + 180) >> 5);
      if (icu::SimpleDateFormat::isAfterNonNumericField(v20, v56)) {
        LODWORD(v108[0]) = ++v52;
      }
    }
  }
  uint64_t v57 = v107;
  if ((v107 & 0x80000000) == 0)
  {
    uint64_t v58 = sub_18C901A4C((icu::SimpleDateFormat *)((char *)this + 544), (int *)v108 + 1);
    if (icu::Calendar::isSet((uint64_t)v6, 0xAu) || icu::Calendar::isSet((uint64_t)v6, 0xBu))
    {
      if (icu::Calendar::isSet((uint64_t)v6, 0xBu))
      {
        int v59 = icu::Calendar::get(v6, 0xBu, (UErrorCode *)v108 + 1);
        if (!v59)
        {
LABEL_115:
          int v66 = v6;
          unsigned int v67 = 11;
          int v68 = v59;
          goto LABEL_116;
        }
      }
      else
      {
        int v60 = icu::Calendar::get(v6, 0xAu, (UErrorCode *)v108 + 1);
        if (v60) {
          int v59 = v60;
        }
        else {
          int v59 = 12;
        }
      }
      if ((v59 - 13) <= 0xA) {
        goto LABEL_115;
      }
      int v61 = icu::Calendar::get(v6, 0xCu, (UErrorCode *)v108 + 1);
      double v62 = sub_18C901C70(v58, v57, (int *)v108 + 1);
      if (SHIDWORD(v108[0]) <= 0)
      {
        if (v59 == 12) {
          int v63 = 0;
        }
        else {
          int v63 = v59;
        }
        double v64 = (double)v61 / 60.0 + (double)v63 - v62;
        BOOL v65 = v64 >= -6.0 && v64 < 6.0;
        int v66 = v6;
        unsigned int v67 = 9;
        int v68 = !v65;
        goto LABEL_116;
      }
    }
    else
    {
      double v81 = sub_18C901C70(v58, v57, (int *)v108 + 1);
      if (SHIDWORD(v108[0]) <= 0)
      {
        if (v81 - (double)(int)v81 <= 0.0) {
          int v82 = 0;
        }
        else {
          int v82 = 30;
        }
        icu::Calendar::set(v6, 0xBu, (int)v81);
        int v66 = v6;
        unsigned int v67 = 12;
        int v68 = v82;
LABEL_116:
        icu::Calendar::set(v66, v67, v68);
      }
    }
  }
  *((_DWORD *)v96 + 2) = v52;
  unsigned int v4 = v96;
  int v69 = v104;
  if (v106 || v104)
  {
    if (!v106) {
      goto LABEL_125;
    }
    unint64_t v70 = (icu::Calendar *)(*(uint64_t (**)(icu::Calendar *))(*(void *)v6 + 24))(v6);
    if (!v70) {
      goto LABEL_135;
    }
    long long v71 = v70;
    v72.n128_f64[0] = icu::Calendar::getTimeInMillis(v70, (UErrorCode *)v108 + 1);
    if (*((unsigned char *)this + 816) && v72.n128_f64[0] < *((double *)this + 98)) {
      icu::Calendar::set(v6, 1u, *((_DWORD *)this + 199) + 100);
    }
    (*(void (**)(icu::Calendar *, __n128))(*(void *)v71 + 8))(v71, v72);
    int v69 = v104;
LABEL_125:
    if (v69)
    {
      uint64_t v73 = (*(uint64_t (**)(icu::Calendar *))(*(void *)v6 + 24))(v6);
      if (v73)
      {
        int v74 = (icu::Calendar *)v73;
        long long v75 = (const void *)icu::Calendar::getTimeZone(v6);
        {
          long long v76 = v75;
        }
        else
        {
          long long v76 = 0;
        }
        icu::Calendar::set(v74, 0xFu, 0);
        icu::Calendar::set(v74, 0x10u, 0);
        double v77 = icu::Calendar::getTimeInMillis(v74, (UErrorCode *)v108 + 1);
        double v78 = v77;
        uint64_t v103 = 0;
        if (v76)
        {
          if (v104 == 1)
          {
            uint64_t v79 = 5;
            uint64_t v80 = 13;
          }
          else
          {
            uint64_t v79 = 7;
            uint64_t v80 = 15;
          }
          (*(void (**)(const void *, uint64_t, uint64_t, char *, uint64_t *, char *))(*(void *)v76 + 160))(v76, v79, v80, (char *)&v103 + 4, &v103, (char *)v108 + 4);
        }
        else
        {
          (*(void (**)(const void *, uint64_t, char *, uint64_t *, char *, double))(*(void *)v75 + 48))(v75, 1, (char *)&v103 + 4, &v103, (char *)v108 + 4, v77);
        }
        if (v104 == 1)
        {
          int v83 = 0;
        }
        else
        {
          int v83 = v103;
          if (!v103)
          {
            if (v76)
            {
              double v84 = v78 + (double)SHIDWORD(v103);
              memset(v102, 0, sizeof(v102));
              icu::TimeZoneTransition::TimeZoneTransition(v102);
              if (v84 < v84 + 9.4608e11)
              {
                v85.n128_f64[0] = v84;
                do
                {
                  if (!(*(unsigned int (**)(const void *, void, _OWORD *, __n128))(*(void *)v76 + 112))(v76, 0, v102, v85))break; {
                  long long v86 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
                  }
                  int DSTSavings = icu::TimeZoneRule::getDSTSavings(v86);
                  if (DSTSavings) {
                    goto LABEL_162;
                  }
                  v85.n128_f64[0] = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v102);
                }
                while (v85.n128_f64[0] < v84 + 9.4608e11);
              }
              for (double j = v84 + -9.4608e11;
                    v84 > j;
                    double v84 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v102) + -1.0)
              {
                if (!(*(unsigned int (**)(const void *, uint64_t, _OWORD *, double))(*(void *)v76 + 120))(v76, 1, v102, v84))break; {
                long long v89 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
                }
                int DSTSavings = icu::TimeZoneRule::getDSTSavings(v89);
                if (DSTSavings) {
                  goto LABEL_162;
                }
              }
              int DSTSavings = (*(uint64_t (**)(const void *))(*(void *)v76 + 104))(v76);
LABEL_162:
              int v90 = DSTSavings;
              icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v102);
            }
            else
            {
              int v90 = (*(uint64_t (**)(const void *))(*(void *)v75 + 104))(v75);
            }
            if (v90) {
              int v83 = v90;
            }
            else {
              int v83 = 3600000;
            }
          }
        }
        icu::Calendar::set(v6, 0xFu, SHIDWORD(v103));
        icu::Calendar::set(v6, 0x10u, v83);
        (*(void (**)(icu::Calendar *))(*(void *)v74 + 8))(v74);
        goto LABEL_168;
      }
LABEL_135:
      HIDWORD(v108[0]) = 7;
    }
  }
LABEL_168:
  if (v101 != v6 && SHIDWORD(v108[0]) <= 0)
  {
    uint64_t v91 = icu::Calendar::getTimeZone(v101);
    icu::Calendar::setTimeZone((uint64_t)v6, v91);
    double v92 = icu::Calendar::getTimeInMillis(v101, (UErrorCode *)v108 + 1);
    icu::Calendar::setTimeInMillis((uint64_t)v6, v92, (UErrorCode *)v108 + 1);
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (v12) {
LABEL_174:
  }
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  if (SHIDWORD(v108[0]) >= 1)
  {
LABEL_176:
    int v93 = v108[0];
    *((_DWORD *)v4 + 2) = v97;
    *((_DWORD *)v4 + 3) = v93;
  }
}

uint64_t icu::SimpleDateFormat::subParse(icu::NumberFormat **a1, uint64_t a2, int *a3, UChar a4, int a5, unsigned int a6, unsigned int a7, BOOL *a8, int *a9, unsigned char *a10, int a11, uint64_t a12, uint64_t a13, int *a14)
{
  uint64_t v236 = *MEMORY[0x1E4F143B8];
  memset(v235, 0, sizeof(v235));
  icu::Formattable::Formattable((icu::Formattable *)v235);
  UErrorCode v223 = U_ZERO_ERROR;
  uint64_t v221 = &unk_1EDA44670;
  *(void *)uint64_t v222 = 0xFFFFFFFF00000000;
  unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(a4);
  lpsrc = 0;
  long long v231 = 0u;
  uint64_t v234 = 0;
  long long v233 = 0u;
  long long v232 = 0u;
  uint64_t v230 = &unk_1EDA47700;
  LOWORD(v231) = 2;
  BOOL v22 = (*((unsigned int (**)(icu::NumberFormat **))*a1 + 12))(a1) != 0;
  unsigned int v23 = a1[100];
  if (v23 && (uint64_t v24 = *((void *)v23 + PatternCharIndex)) != 0) {
    unint64_t v25 = (icu::NumberFormat **)(v24 + 24);
  }
  else {
    unint64_t v25 = a1 + 42;
  }
  lpsrc = *v25;
  if (lpsrc)
  {
    unsigned int v216 = a7;
    unsigned int v26 = icu::SimpleDateFormat::fgPatternIndexToCalendarField[PatternCharIndex];
    memset(v229, 0, sizeof(v229));
    icu::UnicodeString::UnicodeString(v229, "hebr", 4, 0);
    if (a12) {
      (*(void (**)(uint64_t, icu::NumberFormat **, uint64_t))(*(void *)a12 + 120))(a12, &lpsrc, 1);
    }
    uint64_t v27 = (const char *)(*(uint64_t (**)(unsigned char *))(*(void *)a10 + 184))(a10);
    if (!strcmp(v27, "chinese"))
    {
      BOOL v29 = 1;
    }
    else
    {
      int v28 = (const char *)(*(uint64_t (**)(unsigned char *))(*(void *)a10 + 184))(a10);
      BOOL v29 = strcmp(v28, "dangi") == 0;
    }
    int v32 = *a3;
    unsigned int v33 = *(unsigned __int16 *)(a2 + 8);
    int v34 = (__int16)v33;
    LODWORD(v35) = v33 >> 5;
    if (v34 >= 0) {
      uint64_t v35 = v35;
    }
    else {
      uint64_t v35 = *(unsigned int *)(a2 + 12);
    }
    if (v32 >= (int)v35)
    {
LABEL_26:
      uint64_t v31 = -v32;
      goto LABEL_27;
    }
    BOOL v213 = v29;
    unsigned int v214 = v26;
    int v215 = a5;
    uint64_t v35 = a13;
    while (1)
    {
      int v36 = (icu::PatternProps *)icu::UnicodeString::char32At((uint64_t *)v35, (icu::UnicodeString *)a2, v32);
      if (!u_isUWhiteSpace((UChar32)v36))
      {
        uint64_t isWhiteSpace = icu::PatternProps::isWhiteSpace(v36);
        if (!isWhiteSpace) {
          break;
        }
      }
      if (v36 < 0x10000) {
        int v38 = 1;
      }
      else {
        int v38 = 2;
      }
      int v32 = *a3 + v38;
      *a3 = v32;
      unsigned int v39 = *(unsigned __int16 *)(a2 + 8);
      int v40 = (__int16)v39;
      LODWORD(v35) = v39 >> 5;
      if (v40 >= 0) {
        uint64_t v35 = v35;
      }
      else {
        uint64_t v35 = *(unsigned int *)(a2 + 12);
      }
      if (v32 >= (int)v35) {
        goto LABEL_26;
      }
    }
    int v212 = *a3;
    v222[0] = *a3;
    if (PatternCharIndex > 0x10 || ((1 << PatternCharIndex) & 0x18030) == 0)
    {
      BOOL v57 = PatternCharIndex == 19 || PatternCharIndex == 25;
      BOOL v58 = v57 || PatternCharIndex == 2;
      BOOL v59 = v58 || (PatternCharIndex & 0xFFFFFFFE) == 26;
      BOOL v60 = v59 || PatternCharIndex == 28;
      BOOL v61 = v60;
      if ((v215 > 2 || !v61) && (PatternCharIndex > 0x1E || ((1 << PatternCharIndex) & 0x40040002) == 0))
      {
        uint64_t v53 = !PatternCharIndex && (unint64_t)v213;
        if (PatternCharIndex != 8 && !v53)
        {
          unint64_t v54 = 0;
          int v56 = 1;
          goto LABEL_91;
        }
      }
    }
    if (a12 && (PatternCharIndex == 26 || PatternCharIndex == 2))
    {
      v224[0] = U_ZERO_ERROR;
      int v42 = (icu::Formattable *)(*(uint64_t (**)(uint64_t, uint64_t, void **, UErrorCode *))(*(void *)a12 + 184))(a12, a2, &v221, v224);
      if (v42) {
        BOOL v43 = v224[0] == U_ILLEGAL_ARGUMENT_ERROR;
      }
      else {
        BOOL v43 = 0;
      }
      if (v43 && (signed int)v222[0] > v212)
      {
        int v45 = v42;
        if (icu::Formattable::isNumeric(v42))
        {
          icu::Formattable::setLong((icu::Formattable *)v235, *((_DWORD *)v45 + 2));
          icu::Calendar::set(a10, 0x16u, 1);
          int v211 = (char *)v45 - 16;
          uint64_t v46 = *((void *)v45 - 1);
          if (v46)
          {
            uint64_t v47 = 112 * v46;
            int v48 = (char *)v45 - 112;
            do
            {
              icu::Formattable::~Formattable((icu::Formattable *)&v48[v47]);
              v47 -= 112;
            }
            while (v47);
          }
          icu::UMemory::operator delete[](v211);
          goto LABEL_53;
        }
      }
      v222[0] = v212;
      uint64_t isWhiteSpace = (uint64_t)icu::Calendar::set(a10, 0x16u, 0);
    }
    int64_t v49 = (const icu::UnicodeString *)a2;
    if (a6)
    {
      uint64_t v35 = *a3;
      unsigned int v50 = *(unsigned __int16 *)(a2 + 8);
      int v51 = (__int16)v50;
      int v52 = v50 >> 5;
      if (v51 < 0) {
        int v52 = *(_DWORD *)(a2 + 12);
      }
      if ((int)v35 + v215 > v52) {
        goto LABEL_313;
      }
      int64_t v49 = (const icu::UnicodeString *)&v230;
      uint64_t isWhiteSpace = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, 0);
    }
    uint64_t isWhiteSpace = (uint64_t)icu::SimpleDateFormat::parseInt((icu::SimpleDateFormat *)isWhiteSpace, v49, (icu::Formattable *)v235, -1, (icu::ParsePosition *)&v221, v216, lpsrc);
LABEL_53:
    uint64_t v53 = v212;
    if ((int)v222[0] <= v212)
    {
      unint64_t v54 = 0;
      int v56 = 1;
      int v212 = v222[0];
    }
    else
    {
      unint64_t v54 = DWORD2(v235[0]);
      uint64_t v55 = (a11 + 1);
      if ((DWORD2(v235[0]) & 0x80000000) != 0)
      {
        int v212 = icu::SimpleDateFormat::checkIntSuffix((icu::SimpleDateFormat *)a1, (const icu::UnicodeString *)a2, v222[0], v55, 1);
        if (v212 == v222[0]) {
          unint64_t v54 = v54;
        }
        else {
          unint64_t v54 = -(int)v54;
        }
      }
      else
      {
        int v212 = icu::SimpleDateFormat::checkIntSuffix((icu::SimpleDateFormat *)a1, (const icu::UnicodeString *)a2, v222[0], v55, 0);
      }
      uint64_t isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, void, UErrorCode *))*a1 + 28))(a1, 0, &v223);
      if (isWhiteSpace)
      {
        if ((0x60000CCuLL >> PatternCharIndex))
        {
          int v62 = dword_18CA9734C[PatternCharIndex];
          uint64_t isWhiteSpace = (*(uint64_t (**)(unsigned char *, void))(*(void *)a10 + 128))(a10, v214);
          if ((int)v54 > (int)isWhiteSpace + v62) {
            goto LABEL_312;
          }
        }
      }
      else if ((0x60000CCuLL >> PatternCharIndex))
      {
        int v63 = dword_18CA972BC[PatternCharIndex];
        if ((int)v54 > (int)((*(uint64_t (**)(unsigned char *, void))(*(void *)a10 + 128))(a10, v214) + v63)) {
          goto LABEL_312;
        }
        uint64_t isWhiteSpace = (*(uint64_t (**)(unsigned char *, void))(*(void *)a10 + 112))(a10, v214);
        if ((int)v54 < (int)isWhiteSpace + v63) {
          goto LABEL_312;
        }
      }
      int v56 = 0;
      uint64_t v53 = v212;
      v222[0] = v212;
    }
LABEL_91:
    if (PatternCharIndex > 0x25)
    {
LABEL_303:
      int v158 = v222[0];
      if (a6)
      {
        uint64_t v35 = *a3;
        unsigned int v159 = *(unsigned __int16 *)(a2 + 8);
        int v160 = (__int16)v159;
        int v161 = v159 >> 5;
        if (v160 < 0) {
          int v161 = *(_DWORD *)(a2 + 12);
        }
        if ((int)v35 + v215 > v161) {
          goto LABEL_313;
        }
        unsigned int v162 = (icu::SimpleDateFormat *)(*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, 0);
        icu::SimpleDateFormat::parseInt(v162, (const icu::UnicodeString *)&v230, (icu::Formattable *)v235, -1, (icu::ParsePosition *)&v221, v216, lpsrc);
        int v163 = (*((uint64_t (**)(icu::NumberFormat **))*a1 + 12))(a1);
        uint64_t v35 = v222[0];
        if (!v163 && (int)v222[0] < *a3 + v215)
        {
          uint64_t v31 = -*a3;
          goto LABEL_27;
        }
      }
      else
      {
        icu::SimpleDateFormat::parseInt((icu::SimpleDateFormat *)isWhiteSpace, (const icu::UnicodeString *)a2, (icu::Formattable *)v235, -1, (icu::ParsePosition *)&v221, v216, lpsrc);
        LODWORD(v35) = v222[0];
      }
      if (v35 == v158)
      {
LABEL_312:
        uint64_t v35 = *a3;
LABEL_313:
        uint64_t v31 = -(int)v35;
        goto LABEL_27;
      }
      uint64_t v164 = DWORD2(v235[0]);
      if ((*((unsigned int (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1, &v223))
      {
        if ((0x60000CCuLL >> PatternCharIndex))
        {
          int v165 = dword_18CA9734C[PatternCharIndex];
          if ((int)v54 > (int)((*(uint64_t (**)(unsigned char *, void))(*(void *)a10 + 128))(a10, v214) + v165)) {
            goto LABEL_312;
          }
        }
      }
      else if ((0x60000CCuLL >> PatternCharIndex))
      {
        int v166 = dword_18CA972BC[PatternCharIndex];
        if ((int)((*(uint64_t (**)(unsigned char *, void))(*(void *)a10 + 128))(a10, v214) + v166) < (int)v164
          || (int)((*(uint64_t (**)(unsigned char *, void))(*(void *)a10 + 112))(a10, v214) + v166) > (int)v164)
        {
          goto LABEL_312;
        }
      }
      switch(PatternCharIndex)
      {
        case 0x19u:
          goto LABEL_362;
        case 0x1Au:
          goto LABEL_326;
        case 0x1Bu:
        case 0x1Cu:
          int v107 = 3 * v164;
          goto LABEL_199;
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
          goto LABEL_373;
        case 0x22u:
          (*(void (**)(unsigned char *, uint64_t))(*(void *)a10 + 432))(a10, v164);
          goto LABEL_361;
        default:
          if (PatternCharIndex == 19)
          {
LABEL_362:
            long long v76 = a10;
            unsigned int v77 = 18;
          }
          else
          {
            if (PatternCharIndex == 2)
            {
              unsigned int v167 = (const char *)(*(uint64_t (**)(unsigned char *))(*(void *)a10 + 184))(a10);
              if (strcmp(v167, "hebrew"))
              {
LABEL_326:
                int v75 = v164 - 1;
                goto LABEL_327;
              }
              if (!icu::Calendar::isSet((uint64_t)a10, 1u))
              {
                uint64_t v35 = (uint64_t)a9;
                *a9 = v164;
                goto LABEL_361;
              }
              v224[0] = U_ZERO_ERROR;
              int v208 = (icu::HebrewCalendar *)icu::Calendar::get(a10, 1u, v224);
              BOOL v210 = icu::HebrewCalendar::isLeapYear(v208) || (int)v164 < 6;
              int v75 = v164 - v210;
              goto LABEL_327;
            }
LABEL_373:
            long long v76 = a10;
            unsigned int v77 = v214;
          }
          int v75 = v164;
          goto LABEL_360;
      }
    }
    switch(PatternCharIndex)
    {
      case 0u:
        if (!v213)
        {
          if (v215 == 4)
          {
            int v117 = *a3;
            uint64_t v150 = a1[96];
            uint64_t v119 = *((void *)v150 + 3);
            int v120 = *((_DWORD *)v150 + 8);
          }
          else
          {
            int v117 = *a3;
            uint64_t v118 = a1[96];
            if (v215 == 5)
            {
              uint64_t v119 = *((void *)v118 + 5);
              int v120 = *((_DWORD *)v118 + 12);
            }
            else
            {
              uint64_t v119 = *((void *)v118 + 1);
              int v120 = *((_DWORD *)v118 + 4);
            }
          }
          unsigned int matched = icu::SimpleDateFormat::matchString(isWhiteSpace, a2, v117, 0, v119, v120, 0, a10);
          uint64_t v35 = matched + *a3 == 0;
          uint64_t v31 = (__PAIR64__(matched, matched + *a3) - 1) >> 32;
          goto LABEL_27;
        }
        if (v56) {
          goto LABEL_312;
        }
        long long v76 = a10;
        unsigned int v77 = 0;
        goto LABEL_359;
      case 1u:
      case 8u:
      case 0x12u:
        goto LABEL_94;
      case 2u:
      case 0x1Au:
        if ((v56 & 1) == 0)
        {
LABEL_115:
          int v74 = (const char *)(*(uint64_t (**)(unsigned char *))(*(void *)a10 + 184))(a10);
          if (!strcmp(v74, "hebrew"))
          {
            if (!icu::Calendar::isSet((uint64_t)a10, 1u))
            {
              uint64_t v35 = (uint64_t)a9;
              *a9 = v54;
LABEL_361:
              uint64_t v31 = v222[0];
              goto LABEL_27;
            }
            v224[0] = U_ZERO_ERROR;
            uint64_t v121 = (icu::HebrewCalendar *)icu::Calendar::get(a10, 1u, v224);
            BOOL v123 = icu::HebrewCalendar::isLeapYear(v121) || (int)v54 < 6;
            int v75 = v54 - v123;
          }
          else
          {
            int v75 = v54 - 1;
          }
          goto LABEL_327;
        }
        double v64 = a1[96];
        BOOL v65 = (const icu::UnicodeString *)*((void *)v64 + 59);
        if (v65 && *((int *)v64 + 120) >= 7)
        {
          int v66 = v215;
          if (PatternCharIndex == 2)
          {
            unsigned int v67 = (const icu::UnicodeString *)((char *)v65 + 64);
            goto LABEL_214;
          }
          uint64_t v112 = (const icu::UnicodeString *)((char *)v65 + 192);
          uint64_t v111 = (const icu::UnicodeString *)((char *)v65 + 256);
        }
        else
        {
          unsigned int v67 = 0;
          BOOL v65 = 0;
          uint64_t v111 = 0;
          uint64_t v112 = 0;
          int v66 = v215;
          if (PatternCharIndex == 2)
          {
LABEL_214:
            int v113 = v67;
            uint64_t v114 = (icu::SimpleDateFormat *)(*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1
                                             + 28))(a1, 3, &v223);
            uint64_t v31 = 0;
            if ((v66 - 3) <= 1 && v114)
            {
              uint64_t v115 = a1[96];
              if (*((void *)v115 + 59) || (int v116 = *((_DWORD *)v115 + 16), v116 != *((_DWORD *)v115 + 20)))
              {
                uint64_t v31 = 0;
              }
              else
              {
                uint64_t v31 = icu::SimpleDateFormat::matchAlphaMonthStrings(v114, (const icu::UnicodeString *)a2, *a3, *((const icu::UnicodeString **)v115 + 7), *((const icu::UnicodeString **)v115 + 9), v116, (icu::Calendar *)a10);
                if ((int)v31 > 0) {
                  goto LABEL_27;
                }
              }
            }
            uint64_t v148 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
            if (v215 == 4 || v148)
            {
              uint64_t v31 = icu::SimpleDateFormat::matchString(v148, a2, *a3, 2, *((void *)a1[96] + 7), *((_DWORD *)a1[96] + 16), v65, a10);
              if ((int)v31 > 0) {
                goto LABEL_27;
              }
            }
            uint64_t v125 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
            if (v215 != 3 && !v125) {
              goto LABEL_302;
            }
            int v126 = *a3;
            BOOL v149 = a1[96];
            uint64_t v128 = *((void *)v149 + 9);
            int v129 = *((_DWORD *)v149 + 20);
            uint64_t v130 = a2;
            int v131 = 2;
            long long v132 = v113;
            goto LABEL_301;
          }
        }
        int v152 = v111;
        uint64_t v153 = (icu::SimpleDateFormat *)(*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        uint64_t v31 = 0;
        if ((v66 - 3) <= 1 && v153)
        {
          uint64_t v154 = a1[96];
          if (*((void *)v154 + 59) || (int v155 = *((_DWORD *)v154 + 28), v155 != *((_DWORD *)v154 + 32)))
          {
            uint64_t v31 = 0;
          }
          else
          {
            uint64_t v31 = icu::SimpleDateFormat::matchAlphaMonthStrings(v153, (const icu::UnicodeString *)a2, *a3, *((const icu::UnicodeString **)v154 + 13), *((const icu::UnicodeString **)v154 + 15), v155, (icu::Calendar *)a10);
            if ((int)v31 > 0) {
              goto LABEL_27;
            }
          }
        }
        uint64_t v156 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 4 || v156)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchString(v156, a2, *a3, 2, *((void *)a1[96] + 13), *((_DWORD *)a1[96] + 28), v112, a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        uint64_t v125 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 != 3 && !v125) {
          goto LABEL_302;
        }
        int v126 = *a3;
        uint64_t v157 = a1[96];
        uint64_t v128 = *((void *)v157 + 15);
        int v129 = *((_DWORD *)v157 + 32);
        uint64_t v130 = a2;
        int v131 = 2;
        long long v132 = v152;
LABEL_301:
        uint64_t v31 = icu::SimpleDateFormat::matchString(v125, v130, v126, v131, v128, v129, v132, a10);
        if ((int)v31 > 0) {
          goto LABEL_27;
        }
LABEL_302:
        uint64_t isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1, &v223);
        if (isWhiteSpace) {
          goto LABEL_303;
        }
LABEL_27:
        icu::UnicodeString::~UnicodeString((void *)v35, (icu::UnicodeString *)v229);
        goto LABEL_28;
      case 3u:
      case 6u:
      case 7u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x22u:
        goto LABEL_303;
      case 4u:
      case 5u:
      case 0xFu:
      case 0x10u:
        if (v54 < 0x19)
        {
LABEL_94:
          if (!v56)
          {
            switch(PatternCharIndex)
            {
              case 1u:
                if (sub_18C98950C((uint64_t)(a1 + 52), (uint64_t)v229) || (int)v54 > 999)
                {
                  int v168 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 2);
                  uint64_t v169 = v168 != v222[0] || v213;
                  if ((v169 & 1) == 0)
                  {
                    UChar32 v170 = icu::UnicodeString::char32At((uint64_t *)v169, (icu::UnicodeString *)a2, *a3);
                    if (u_isdigit(v170))
                    {
                      int v171 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 1);
                      UChar32 v173 = icu::UnicodeString::char32At(v172, (icu::UnicodeString *)a2, v171);
                      int v174 = u_isdigit(v173);
                      if (v215 <= 2 && v174 && *((unsigned char *)a1 + 816))
                      {
                        int v175 = *((_DWORD *)a1 + 199) % 100;
                        *a8 = v54 == v175;
                        if ((int)v54 >= v175) {
                          int v176 = 0;
                        }
                        else {
                          int v176 = 100;
                        }
                        unint64_t v54 = (v54 + 100 * (*((_DWORD *)a1 + 199) / 100) + v176);
                      }
                    }
                  }
                }
                else
                {
                  unint64_t v54 = (v54 + 5000);
                }
                icu::Calendar::set(a10, 1u, v54);
                uint64_t v35 = *a9;
                if ((v35 & 0x80000000) == 0)
                {
                  BOOL isLeapYear = icu::HebrewCalendar::isLeapYear((icu::HebrewCalendar *)v54);
                  int v178 = *a9;
                  int v180 = isLeapYear || v178 < 6;
                  icu::Calendar::set(a10, 2u, v178 - v180);
                  uint64_t v35 = 0xFFFFFFFFLL;
                  *a9 = -1;
                }
                goto LABEL_361;
              case 2u:
                goto LABEL_115;
              case 4u:
                if (v54 == (*(unsigned int (**)(unsigned char *, uint64_t))(*(void *)a10 + 128))(a10, 11)+ 1)LODWORD(v54) = 0; {
                goto LABEL_265;
                }
              case 5u:
LABEL_265:
                long long v76 = a10;
                unsigned int v77 = 11;
                goto LABEL_359;
              case 8u:
                int v141 = icu::SimpleDateFormat::countDigits((const icu::UnicodeString *)a2, *a3, v212, v53);
                if (v141 > 2)
                {
                  if (v141 == 3)
                  {
                    int v181 = 1;
                  }
                  else
                  {
                    uint32x4_t v196 = (uint32x4_t)vdupq_n_s32(v141 - 4);
                    v197.i64[0] = 0x100000001;
                    v197.i64[1] = 0x100000001;
                    unsigned int v198 = -4;
                    v199.i64[0] = 0xA0000000ALL;
                    v199.i64[1] = 0xA0000000ALL;
                    do
                    {
                      int8x16_t v200 = (int8x16_t)v197;
                      int32x4_t v197 = vmulq_s32(v197, v199);
                      v198 += 4;
                    }
                    while (((v141 - 4) & 0xFFFFFFFC) != v198);
                    int8x16_t v201 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v198), (int8x16_t)xmmword_18CA811A0), v196), v200, (int8x16_t)v197);
                    *(int32x2_t *)v201.i8 = vmul_s32(*(int32x2_t *)v201.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v201, v201, 8uLL));
                    int v181 = v201.i32[0] * v201.i32[1];
                  }
                  int v75 = (int)v54 / v181;
                }
                else
                {
                  int v142 = 0;
                  uint32x4_t v143 = (uint32x4_t)vdupq_n_s32(2 - v141);
                  v144.i64[1] = 0x100000001;
                  v144.i64[0] = v54 | 0x100000000;
                  v145.i64[0] = 0xA0000000ALL;
                  v145.i64[1] = 0xA0000000ALL;
                  do
                  {
                    int8x16_t v146 = (int8x16_t)v144;
                    int32x4_t v144 = vmulq_s32(v144, v145);
                    v142 += 4;
                  }
                  while (((6 - v141) & 0xFFFFFFFC) != v142);
                  int8x16_t v147 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v142 - 4), (int8x16_t)xmmword_18CA811A0), v143), v146, (int8x16_t)v144);
                  *(int32x2_t *)v147.i8 = vmul_s32(*(int32x2_t *)v147.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL));
                  int v75 = v147.i32[0] * v147.i32[1];
                }
                long long v76 = a10;
                unsigned int v77 = 14;
                goto LABEL_360;
              case 9u:
                goto LABEL_121;
              case 0xEu:
                goto LABEL_107;
              case 0xFu:
                if (v54 == (*(unsigned int (**)(unsigned char *, uint64_t))(*(void *)a10 + 160))(a10, 10)+ 1)LODWORD(v54) = 0; {
                goto LABEL_272;
                }
              case 0x10u:
LABEL_272:
                long long v76 = a10;
                unsigned int v77 = 10;
                goto LABEL_359;
              case 0x11u:
                goto LABEL_113;
              case 0x12u:
                if (sub_18C98950C((uint64_t)(a1 + 52), (uint64_t)v229) || (int)v54 > 999)
                {
                  int v182 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 2);
                  if (v182 == v222[0])
                  {
                    UChar32 v183 = icu::UnicodeString::char32At((uint64_t *)v222[0], (icu::UnicodeString *)a2, *a3);
                    if (u_isdigit(v183))
                    {
                      int v184 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 1);
                      UChar32 v186 = icu::UnicodeString::char32At(v185, (icu::UnicodeString *)a2, v184);
                      if (u_isdigit(v186))
                      {
                        if (*((unsigned char *)a1 + 816))
                        {
                          int v187 = *((_DWORD *)a1 + 199) % 100;
                          *a8 = v54 == v187;
                          if ((int)v54 >= v187) {
                            int v188 = 0;
                          }
                          else {
                            int v188 = 100;
                          }
                          LODWORD(v54) = v54 + 100 * (*((_DWORD *)a1 + 199) / 100) + v188;
                        }
                      }
                    }
                  }
                }
                else
                {
                  LODWORD(v54) = v54 + 5000;
                }
                long long v76 = a10;
                unsigned int v77 = 17;
                goto LABEL_359;
              default:
                goto LABEL_303;
            }
          }
        }
        goto LABEL_312;
      case 9u:
        goto LABEL_121;
      case 0xEu:
LABEL_107:
        uint64_t v68 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 < 5 || v68)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchString(v68, a2, *a3, 9, *((void *)a1[96] + 35), *((_DWORD *)a1[96] + 72), 0, a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        uint64_t v69 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 <= 4 && !v69) {
          goto LABEL_312;
        }
        uint64_t v70 = icu::SimpleDateFormat::matchString(v69, a2, *a3, 9, *((void *)a1[96] + 37), *((_DWORD *)a1[96] + 76), 0, a10);
        goto LABEL_185;
      case 0x11u:
LABEL_113:
        long long v71 = icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v223);
        if (v223 > U_ZERO_ERROR) {
          goto LABEL_312;
        }
        BOOL v72 = v215 < 4;
        unsigned int v73 = 3;
        goto LABEL_133;
      case 0x13u:
        if ((v56 & 1) == 0) {
          goto LABEL_197;
        }
LABEL_121:
        uint64_t v78 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 4 || v78)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchString(v78, a2, *a3, 7, *((void *)a1[96] + 19), *((_DWORD *)a1[96] + 40), 0, a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v108 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 3 || v108)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchString(v108, a2, *a3, 7, *((void *)a1[96] + 21), *((_DWORD *)a1[96] + 44), 0, a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        uint64_t v109 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 6 || v109)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchString(v109, a2, *a3, 7, *((void *)a1[96] + 23), *((_DWORD *)a1[96] + 48), 0, a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        uint64_t v110 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 5 || v110)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchString(v110, a2, *a3, 7, *((void *)a1[96] + 25), *((_DWORD *)a1[96] + 52), 0, a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        uint64_t isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1, &v223);
        if (!isWhiteSpace || PatternCharIndex == 9) {
          goto LABEL_27;
        }
        goto LABEL_303;
      case 0x17u:
        uint64_t v79 = (unsigned int *)icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v223);
        if (v223 > U_ZERO_ERROR) {
          goto LABEL_312;
        }
        if (v215 == 5) {
          unsigned int v80 = 15;
        }
        else {
          unsigned int v80 = 5;
        }
        if (v215 >= 4) {
          uint64_t v81 = v80;
        }
        else {
          uint64_t v81 = 12;
        }
        goto LABEL_228;
      case 0x18u:
        long long v71 = icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v223);
        if (v223 > U_ZERO_ERROR) {
          goto LABEL_312;
        }
        BOOL v72 = v215 < 4;
        unsigned int v73 = 1;
LABEL_133:
        if (v72) {
          uint64_t v82 = v73 + 1;
        }
        else {
          uint64_t v82 = v73;
        }
        uint64_t v83 = (*(uint64_t (**)(icu::TimeZoneFormat *, uint64_t, uint64_t, void **, BOOL, uint64_t))(*(void *)v71 + 72))(v71, v82, a2, &v221, v22, a13);
        if (!v83) {
          goto LABEL_312;
        }
        goto LABEL_229;
      case 0x19u:
        if ((v56 & 1) == 0)
        {
LABEL_197:
          long long v76 = a10;
          unsigned int v77 = 18;
LABEL_359:
          int v75 = v54;
          goto LABEL_360;
        }
        uint64_t v84 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 4 || v84)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchString(v84, a2, *a3, 7, *((void *)a1[96] + 27), *((_DWORD *)a1[96] + 56), 0, a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v124 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 3 || v124)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchString(v124, a2, *a3, 7, *((void *)a1[96] + 29), *((_DWORD *)a1[96] + 60), 0, a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        uint64_t v125 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 != 6 && !v125) {
          goto LABEL_302;
        }
        int v126 = *a3;
        long long v127 = a1[96];
        uint64_t v128 = *((void *)v127 + 31);
        int v129 = *((_DWORD *)v127 + 64);
        uint64_t v130 = a2;
        int v131 = 7;
        long long v132 = 0;
        goto LABEL_301;
      case 0x1Bu:
        if ((v56 & 1) == 0) {
          goto LABEL_198;
        }
        uint64_t v85 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 4 || v85)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchQuarterString(v85, a2, *a3, 2u, *((void *)a1[96] + 47), *((_DWORD *)a1[96] + 96), a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v133 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 3 || v133)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchQuarterString(v133, a2, *a3, 2u, *((void *)a1[96] + 49), *((_DWORD *)a1[96] + 100), a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        uint64_t v134 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 5 || v134)
        {
          int v135 = *a3;
          unsigned int v136 = a1[96];
          uint64_t v137 = *((void *)v136 + 51);
          int v138 = *((_DWORD *)v136 + 104);
LABEL_259:
          uint64_t v31 = icu::SimpleDateFormat::matchQuarterString(v134, a2, v135, 2u, v137, v138, a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
LABEL_260:
        if ((*((unsigned int (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1, &v223))
        {
          uint64_t isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
          if (!isWhiteSpace) {
            goto LABEL_312;
          }
          goto LABEL_303;
        }
        goto LABEL_27;
      case 0x1Cu:
        if ((v56 & 1) == 0)
        {
LABEL_198:
          int v107 = 3 * v54;
LABEL_199:
          int v75 = v107 - 3;
LABEL_327:
          long long v76 = a10;
          unsigned int v77 = 2;
LABEL_360:
          icu::Calendar::set(v76, v77, v75);
          goto LABEL_361;
        }
        uint64_t v86 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 4 || v86)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchQuarterString(v86, a2, *a3, 2u, *((void *)a1[96] + 53), *((_DWORD *)a1[96] + 108), a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v139 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 == 3 || v139)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchQuarterString(v139, a2, *a3, 2u, *((void *)a1[96] + 55), *((_DWORD *)a1[96] + 112), a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        uint64_t v134 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 != 5 && !v134) {
          goto LABEL_260;
        }
        int v135 = *a3;
        uint64_t v140 = a1[96];
        uint64_t v137 = *((void *)v140 + 57);
        int v138 = *((_DWORD *)v140 + 116);
        goto LABEL_259;
      case 0x1Du:
        int v87 = v215 - 1;
        if ((v215 - 1) <= 2)
        {
          signed int v88 = (unsigned int *)&unk_18CA97400;
          goto LABEL_166;
        }
        uint64_t v91 = 0;
        goto LABEL_226;
      case 0x1Eu:
        long long v89 = a1[96];
        uint64_t v90 = *((void *)v89 + 61);
        if (v90)
        {
          uint64_t v31 = icu::SimpleDateFormat::matchString(isWhiteSpace, a2, *a3, 1, v90, *((_DWORD *)v89 + 124), 0, a10);
          if ((int)v31 > 0) {
            goto LABEL_27;
          }
        }
        if ((v56 & 1) != 0
          || !(*((unsigned int (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1, &v223)
          && (int)v54 <= *((_DWORD *)a1[96] + 124))
        {
          goto LABEL_312;
        }
        long long v76 = a10;
        unsigned int v77 = 1;
        goto LABEL_359;
      case 0x1Fu:
        uint64_t v79 = (unsigned int *)icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v223);
        if (v223 > U_ZERO_ERROR) {
          goto LABEL_312;
        }
        if (v215 >= 4) {
          uint64_t v81 = 5;
        }
        else {
          uint64_t v81 = 6;
        }
        goto LABEL_228;
      case 0x20u:
        int v87 = v215 - 1;
        if ((v215 - 1) <= 3)
        {
          signed int v88 = (unsigned int *)&unk_18CA96DF0;
          goto LABEL_166;
        }
        uint64_t v91 = 15;
        goto LABEL_226;
      case 0x21u:
        int v87 = v215 - 1;
        if ((v215 - 1) > 3)
        {
          uint64_t v91 = 16;
        }
        else
        {
          signed int v88 = (unsigned int *)&unk_18CA96E00;
LABEL_166:
          uint64_t v91 = v88[v87];
        }
LABEL_226:
        uint64_t v79 = (unsigned int *)icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v223);
        if (v223 > U_ZERO_ERROR) {
          goto LABEL_312;
        }
        uint64_t v81 = v91;
LABEL_228:
        uint64_t v83 = icu::TimeZoneFormat::parse(v79, v81, a2, (uint64_t)&v221, a13);
        if (!v83) {
          goto LABEL_312;
        }
LABEL_229:
        icu::Calendar::adoptTimeZone(a10, v83);
        goto LABEL_361;
      case 0x23u:
        uint64_t v31 = icu::SimpleDateFormat::subParse(a1, a2, a3, 97, v215, a6, v216, a8, a9, a10, a11, a12, a13, 0);
        if ((int)v31 <= 0)
        {
          int v92 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
          if (v215 != 3 && !v92) {
            goto LABEL_366;
          }
          uint64_t v93 = 0;
          int v94 = 0;
          int v95 = *a3;
          uint64_t v96 = *((void *)a1[96] + 108);
          int v97 = -1;
          do
          {
            int v98 = sub_18C9DF098(a2, v95, v96);
            if (v98 > v94)
            {
              int v94 = v98;
              int v97 = v93;
            }
            ++v93;
            v96 += 64;
          }
          while (v93 != 2);
          if (v97 < 0)
          {
            uint64_t v31 = -v95;
          }
          else
          {
            uint64_t v35 = (uint64_t)a14;
            *a14 = v97;
            uint64_t v31 = (v94 + v95);
          }
          if ((int)v31 <= 0)
          {
LABEL_366:
            int v189 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
            if (v215 != 5 && !v189) {
              goto LABEL_391;
            }
            uint64_t v190 = 0;
            int v191 = 0;
            int v192 = *a3;
            uint64_t v193 = *((void *)a1[96] + 112);
            int v194 = -1;
            do
            {
              int v195 = sub_18C9DF098(a2, v192, v193);
              if (v195 > v191)
              {
                int v191 = v195;
                int v194 = v190;
              }
              ++v190;
              v193 += 64;
            }
            while (v190 != 2);
            if (v194 < 0)
            {
              uint64_t v31 = -v192;
            }
            else
            {
              uint64_t v35 = (uint64_t)a14;
              *a14 = v194;
              uint64_t v31 = (v191 + v192);
            }
            if ((int)v31 <= 0)
            {
LABEL_391:
              if (!(*((unsigned int (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223))goto LABEL_312; {
              uint64_t v202 = 0;
              }
              int v203 = 0;
              int v204 = *a3;
              uint64_t v205 = *((void *)a1[96] + 110);
              int v206 = -1;
              do
              {
                int v207 = sub_18C9DF098(a2, v204, v205);
                if (v207 > v203)
                {
                  int v203 = v207;
                  int v206 = v202;
                }
                ++v202;
                v205 += 64;
              }
              while (v202 != 2);
              if (v206 < 0)
              {
                uint64_t v31 = -v204;
              }
              else
              {
                uint64_t v35 = (uint64_t)a14;
                *a14 = v206;
                uint64_t v31 = (v203 + v204);
              }
              if ((int)v31 <= 0) {
                goto LABEL_312;
              }
            }
          }
        }
        goto LABEL_27;
      case 0x24u:
        uint64_t v99 = (icu::SimpleDateFormat *)(*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v223);
        if (v215 != 3 && !v99
          || (uint64_t v31 = icu::SimpleDateFormat::matchDayPeriodStrings(v99, (const icu::UnicodeString *)a2, *a3, *((const icu::UnicodeString **)a1[96] + 108), *((_DWORD *)a1[96] + 218), a14), (int)v31 <= 0))
        {
          if ((int v100 = (icu::SimpleDateFormat *)(*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1
                                                 + 28))(a1, 3, &v223), v215 != 5)&& !v100|| (uint64_t v31 = icu::SimpleDateFormat::matchDayPeriodStrings(v100, (const icu::UnicodeString *)a2, *a3, *((const icu::UnicodeString **)a1[96] + 112), *((_DWORD *)a1[96] + 226), a14), (int)v31 <= 0))
          {
            uint64_t v101 = (icu::SimpleDateFormat *)(*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1
                                             + 28))(a1, 3, &v223);
            if (v215 != 4 && !v101) {
              goto LABEL_312;
            }
            uint64_t v70 = icu::SimpleDateFormat::matchDayPeriodStrings(v101, (const icu::UnicodeString *)a2, *a3, *((const icu::UnicodeString **)a1[96] + 110), *((_DWORD *)a1[96] + 222), a14);
LABEL_185:
            uint64_t v31 = v70;
            if ((int)v70 <= 0) {
              goto LABEL_312;
            }
          }
        }
        goto LABEL_27;
      case 0x25u:
        uint64_t v102 = 0;
        memset(v228, 0, sizeof(v228));
        long long v226 = 0u;
        long long v227 = 0u;
        *(_OWORD *)uint64_t v224 = 0u;
        long long v225 = 0u;
        do
        {
          uint64_t v103 = &v224[v102];
          *(void *)uint64_t v103 = &unk_1EDA47700;
          *((_WORD *)v103 + 4) = 2;
          v102 += 16;
        }
        while (v102 != 48);
        icu::DateFormatSymbols::getTimeSeparatorString((UChar **)a1[96], (UChar **)v224);
        int v219 = &unk_18CA973DC;
        unsigned int v104 = 1;
        if (sub_18C7EFDE8((uint64_t)v224, (uint64_t *)&v219, 1))
        {
          sub_18C8F4658((uint64_t)v228, 58);
          unsigned int v104 = 2;
        }
        uint64_t v105 = (*((uint64_t (**)(icu::NumberFormat **))*a1 + 12))(a1);
        if (v105)
        {
          uint64_t v218 = &unk_18CA973DE;
          uint64_t v105 = sub_18C7EFDE8((uint64_t)v224, (uint64_t *)&v218, 1);
          if (v105) {
            uint64_t v105 = sub_18C8F4658((uint64_t)&v224[16 * (unint64_t)v104++], 46);
          }
        }
        uint64_t v31 = icu::SimpleDateFormat::matchString(v105, a2, *a3, 24, (uint64_t)v224, v104, 0, a10);
        for (uint64_t i = 32; i != -16; i -= 16)
          icu::UnicodeString::~UnicodeString((void *)v35, (icu::UnicodeString *)&v224[i]);
        goto LABEL_27;
      default:
        break;
    }
  }
  unint64_t v30 = *a3;
  uint64_t v31 = -(int)v30;
LABEL_28:
  icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)&v230);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v221);
  icu::Formattable::~Formattable((icu::Formattable *)v235);
  return v31;
}

uint64_t icu::SimpleDateFormat::matchLiterals(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int *a3, const icu::UnicodeString *a4, int *a5, unsigned int a6, int a7)
{
  unsigned int v90 = a5;
  BOOL v9 = 0;
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  long long v93 = 0u;
  long long v94 = 0u;
  uint64_t v96 = 0;
  long long v95 = 0u;
  int v92 = &unk_1EDA47700;
  LOWORD(v93) = 2;
  unsigned int v10 = *(_DWORD *)a2;
  uint64_t v11 = (char *)this + 10;
  while (1)
  {
    unsigned int v12 = *((unsigned __int16 *)this + 4);
    if (*((__int16 *)this + 4) < 0)
    {
      unsigned int v13 = *((_DWORD *)this + 3);
      if ((int)v10 >= (int)v13) {
        goto LABEL_31;
      }
    }
    else
    {
      if ((int)v10 >= (int)(v12 >> 5)) {
        goto LABEL_31;
      }
      unsigned int v13 = v12 >> 5;
    }
    if (v13 <= v10)
    {
      LOWORD(v15) = -1;
LABEL_20:
      __int16 v91 = v15;
      icu::UnicodeString::doAppend((uint64_t)&v92, (uint64_t)&v91, 0, 1);
LABEL_21:
      BOOL v18 = v9;
      goto LABEL_22;
    }
    if ((v12 & 2) != 0) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = (char *)*((void *)this + 3);
    }
    uint64_t v15 = *(unsigned __int16 *)&v14[2 * v10];
    if (v9) {
      goto LABEL_13;
    }
    if (v15 <= 0x7F) {
      break;
    }
    BOOL v18 = 0;
    if ((v15 - 8206) >= 2 && v15 != 1564) {
      goto LABEL_20;
    }
LABEL_22:
    ++v10;
    BOOL v9 = v18;
  }
  if (!byte_18CA970A4[v15])
  {
LABEL_13:
    if ((v15 - 8206) < 2 || v15 == 1564) {
      goto LABEL_21;
    }
    if (v15 != 39) {
      goto LABEL_20;
    }
    uint64_t v16 = (int)v10 + 1;
    if ((v12 & 0x8000) != 0)
    {
      int v17 = *((_DWORD *)this + 3);
      if ((int)v16 < v17) {
        goto LABEL_27;
      }
    }
    else if ((int)v16 < (int)(v12 >> 5))
    {
      int v17 = v12 >> 5;
LABEL_27:
      if (v17 > v16 && *(_WORD *)&v14[2 * v16] == 39)
      {
        LOWORD(v15) = 39;
        ++v10;
        goto LABEL_20;
      }
    }
    BOOL v18 = !v9;
    goto LABEL_22;
  }
LABEL_31:
  LODWORD(i) = *(_DWORD *)a4;
  if (v90)
  {
    int64_t i = (int)i;
    icu::UnicodeString::trim((icu::UnicodeString *)&v92);
    while (1)
    {
      int v20 = *((__int16 *)a3 + 4);
      if (v20 < 0)
      {
        int64_t v21 = a3[3];
        if (i >= v21) {
          break;
        }
      }
      else
      {
        if (i >= (uint64_t)((unint64_t)*((unsigned __int16 *)a3 + 4) >> 5)) {
          break;
        }
        int64_t v21 = (unint64_t)*((unsigned __int16 *)a3 + 4) >> 5;
      }
      if (v21 <= i)
      {
        UChar32 v23 = 0xFFFF;
      }
      else
      {
        BOOL v22 = (v20 & 2) != 0 ? (int *)((char *)a3 + 10) : (int *)*((void *)a3 + 3);
        UChar32 v23 = *((unsigned __int16 *)v22 + i);
      }
      if (!u_isWhitespace(v23) && (v23 - 8206) >= 2 && v23 != 1564) {
        break;
      }
      ++i;
    }
    unsigned int v12 = *((unsigned __int16 *)this + 4);
  }
  if ((v12 & 0x8000u) == 0) {
    unsigned int v24 = v12 >> 5;
  }
  else {
    unsigned int v24 = *((_DWORD *)this + 3);
  }
  if (v24 <= v10)
  {
    UChar v26 = -1;
  }
  else
  {
    if ((v12 & 2) != 0) {
      unint64_t v25 = v11;
    }
    else {
      unint64_t v25 = (char *)*((void *)this + 3);
    }
    UChar v26 = *(_WORD *)&v25[2 * v10];
  }
  unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v26);
  if (PatternCharIndex == 38) {
    int v28 = 0;
  }
  else {
    int v28 = (icu::UnicodeSet *)sub_18C9E0C4C(PatternCharIndex);
  }
  unsigned int v29 = (unsigned __int16)v93;
  if ((v93 & 0x8000u) == 0) {
    int v30 = (unsigned __int16)v93 >> 5;
  }
  else {
    int v30 = DWORD1(v93);
  }
  if (v30 < 1)
  {
LABEL_166:
    for (int64_t i = *(int *)a4; ; ++i)
    {
      int v70 = *((__int16 *)a3 + 4);
      if (v70 < 0)
      {
        int64_t v71 = a3[3];
        if (i >= v71) {
          goto LABEL_164;
        }
      }
      else
      {
        if (i >= (uint64_t)((unint64_t)*((unsigned __int16 *)a3 + 4) >> 5)) {
          goto LABEL_164;
        }
        int64_t v71 = (unint64_t)*((unsigned __int16 *)a3 + 4) >> 5;
      }
      if (v71 <= i)
      {
        int v73 = 0xFFFF;
        if (!v28) {
          goto LABEL_164;
        }
      }
      else
      {
        if ((v70 & 2) != 0) {
          BOOL v72 = (char *)a3 + 10;
        }
        else {
          BOOL v72 = (char *)*((void *)a3 + 3);
        }
        int v73 = *(unsigned __int16 *)&v72[2 * i];
        if ((v73 - 8206) < 2 || v73 == 1564) {
          continue;
        }
        if (!v28) {
          goto LABEL_164;
        }
      }
      if (!icu::UnicodeSet::contains(v28, v73)) {
        goto LABEL_164;
      }
    }
  }
  uint64_t v86 = v28;
  uint64_t v31 = 0;
  while (1)
  {
    unsigned int v32 = *((unsigned __int16 *)a3 + 4);
    int v33 = (__int16)v32;
    int v34 = v32 >> 5;
    if (v33 < 0) {
      int v34 = a3[3];
    }
    if ((int)i >= v34) {
      goto LABEL_163;
    }
    uint64_t v35 = (int)v31;
    uint64_t v36 = v31 << 32;
    char v37 = 1;
    if ((v29 & 0x8000) == 0)
    {
LABEL_69:
      uint64_t v38 = v29 >> 5;
      if (v35 >= v38) {
        goto LABEL_81;
      }
      goto LABEL_72;
    }
    while (1)
    {
      LODWORD(v38) = DWORD1(v93);
      if (v35 >= SDWORD1(v93)) {
        break;
      }
LABEL_72:
      if (v38 <= v31)
      {
        uint64_t v40 = 0xFFFFLL;
      }
      else
      {
        unsigned int v39 = (v29 & 2) != 0 ? (long long *)((char *)&v93 + 2) : (long long *)v94;
        uint64_t v40 = *((unsigned __int16 *)v39 + v35);
      }
      if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)v40)) {
        break;
      }
      char v37 = 0;
      ++v35;
      unsigned int v29 = (unsigned __int16)v93;
      v36 += 0x100000000;
      uint64_t v31 = (v31 + 1);
      if ((v93 & 0x8000) == 0) {
        goto LABEL_69;
      }
    }
LABEL_81:
    if ((v37 & 1) == 0)
    {
      int v48 = 0;
      for (int64_t j = (int)i; ; ++j)
      {
        int v50 = *((__int16 *)a3 + 4);
        if (v50 < 0)
        {
          int64_t v51 = a3[3];
          if (j >= v51) {
            goto LABEL_114;
          }
        }
        else
        {
          if (j >= (uint64_t)((unint64_t)*((unsigned __int16 *)a3 + 4) >> 5)) {
            goto LABEL_114;
          }
          int64_t v51 = (unint64_t)*((unsigned __int16 *)a3 + 4) >> 5;
        }
        if (v51 <= i)
        {
          uint64_t v54 = 0xFFFFLL;
        }
        else
        {
          BOOL v52 = (v50 & 2) == 0;
          uint64_t v53 = (char *)a3 + 10;
          if (v52) {
            uint64_t v53 = (char *)*((void *)a3 + 3);
          }
          uint64_t v54 = *(unsigned __int16 *)&v53[2 * j];
        }
        if (u_isUWhiteSpace(v54) || icu::PatternProps::isWhiteSpace((icu::PatternProps *)v54))
        {
          int v48 = 1;
        }
        else if ((v54 - 8206) >= 2 && v54 != 1564)
        {
LABEL_114:
          unint64_t v55 = v90;
          if (!v90 && !v48) {
            goto LABEL_211;
          }
          int v56 = (unsigned __int16)v93 >> 5;
          if ((v93 & 0x8000u) != 0) {
            int v56 = DWORD1(v93);
          }
          if (v56 <= (int)v31) {
            goto LABEL_163;
          }
          LODWORD(v41) = *((unsigned __int16 *)a3 + 4);
          unsigned int v43 = a3[3];
          LODWORD(v42) = v41 >> 5;
          goto LABEL_120;
        }
        LODWORD(i) = i + 1;
      }
    }
    unint64_t v41 = *((unsigned __int16 *)a3 + 4);
    int64_t v42 = v41 >> 5;
    unsigned int v43 = a3[3];
    unsigned int v44 = (char *)*((void *)a3 + 3);
    if ((v41 & 2) != 0) {
      unsigned int v44 = (char *)a3 + 10;
    }
    if ((v41 & 0x8000u) == 0) {
      unsigned int v45 = v41 >> 5;
    }
    else {
      unsigned int v45 = a3[3];
    }
    int64_t i = (int)i;
    if ((v41 & 0x8000) == 0)
    {
LABEL_88:
      unint64_t v46 = v41 >> 5;
      if (i >= v42) {
        goto LABEL_120;
      }
      goto LABEL_91;
    }
    while (1)
    {
      LODWORD(v46) = a3[3];
      if (i >= (int)v43) {
        break;
      }
LABEL_91:
      if (v46 <= i || *(_WORD *)&v44[2 * i] != 8206)
      {
        if (v45 <= i) {
          break;
        }
        int v47 = *(unsigned __int16 *)&v44[2 * i];
        if (v47 != 8207 && v47 != 1564) {
          break;
        }
      }
      ++i;
      if ((v41 & 0x8000) == 0) {
        goto LABEL_88;
      }
    }
LABEL_120:
    if ((v41 & 0x8000u) == 0) {
      unsigned int v57 = v42;
    }
    else {
      unsigned int v57 = v43;
    }
    if ((int)i < (int)v57)
    {
      unsigned int v58 = (v93 & 0x8000u) == 0 ? (unsigned __int16)v93 >> 5 : DWORD1(v93);
      if (v58 <= v31)
      {
        int v60 = 0xFFFF;
      }
      else
      {
        BOOL v59 = (v93 & 2) != 0 ? (long long *)((char *)&v93 + 2) : (long long *)v94;
        int v60 = *(unsigned __int16 *)((char *)v59 + (v36 >> 31));
      }
      if (v57 <= i)
      {
        int v62 = 0xFFFF;
      }
      else
      {
        BOOL v61 = (char *)*((void *)a3 + 3);
        if ((v41 & 2) != 0) {
          BOOL v61 = (char *)a3 + 10;
        }
        int v62 = *(unsigned __int16 *)&v61[2 * (int)i];
      }
      if (v60 == v62)
      {
        uint64_t v31 = (v31 + 1);
        goto LABEL_156;
      }
    }
    if (!v90) {
      goto LABEL_161;
    }
    if (i != *(_DWORD *)a4 || v57 <= i) {
      goto LABEL_148;
    }
    int v63 = (char *)*((void *)a3 + 3);
    if ((v41 & 2) != 0) {
      int v63 = (char *)a3 + 10;
    }
    if (*(_WORD *)&v63[2 * (int)i] != 46) {
      goto LABEL_148;
    }
    if (!icu::SimpleDateFormat::isAfterNonNumericField(this, (const icu::UnicodeString *)*(unsigned int *)a2)) {
      break;
    }
LABEL_156:
    LODWORD(i) = i + 1;
    unsigned int v29 = (unsigned __int16)v93;
    if ((v93 & 0x8000u) == 0) {
      int v66 = (unsigned __int16)v93 >> 5;
    }
    else {
      int v66 = DWORD1(v93);
    }
    if ((int)v31 >= v66) {
      goto LABEL_163;
    }
  }
  LODWORD(v41) = *((unsigned __int16 *)a3 + 4);
  unsigned int v43 = a3[3];
  LODWORD(v42) = v41 >> 5;
LABEL_148:
  if ((v41 & 0x8000u) == 0) {
    unsigned int v43 = v42;
  }
  if (v43 <= i)
  {
    uint64_t v65 = 0xFFFFLL;
  }
  else
  {
    BOOL v52 = (v41 & 2) == 0;
    double v64 = (char *)a3 + 10;
    if (v52) {
      double v64 = (char *)*((void *)a3 + 3);
    }
    uint64_t v65 = *(unsigned __int16 *)&v64[2 * (int)i];
  }
  if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v65)) {
    goto LABEL_156;
  }
LABEL_161:
  unint64_t v55 = a6;
  if (!a6) {
    goto LABEL_211;
  }
  if (!a7)
  {
    unint64_t v55 = (unint64_t)v86;
    if (!v86) {
      goto LABEL_211;
    }
    unsigned int v74 = (v93 & 0x8000u) == 0 ? (unsigned __int16)v93 >> 5 : DWORD1(v93);
    if (v74 <= v31)
    {
      int v76 = 0xFFFF;
    }
    else
    {
      int v75 = (v93 & 2) != 0 ? (long long *)((char *)&v93 + 2) : (long long *)v94;
      int v76 = *(unsigned __int16 *)((char *)v75 + (v36 >> 31));
    }
    if (!icu::UnicodeSet::contains(v86, v76)) {
      goto LABEL_211;
    }
    unsigned int v77 = *((unsigned __int16 *)a3 + 4);
    unsigned int v78 = (v77 & 0x8000u) == 0 ? v77 >> 5 : a3[3];
    if (v78 <= i)
    {
      int v80 = 0xFFFF;
    }
    else
    {
      BOOL v52 = (v77 & 2) == 0;
      uint64_t v79 = (char *)a3 + 10;
      if (v52) {
        uint64_t v79 = (char *)*((void *)a3 + 3);
      }
      int v80 = *(unsigned __int16 *)&v79[2 * (int)i];
    }
    if (!icu::UnicodeSet::contains(v86, v80))
    {
      unsigned int v81 = *((unsigned __int16 *)a3 + 4);
      unsigned int v82 = (v81 & 0x8000u) == 0 ? v81 >> 5 : a3[3];
      if (v82 <= i)
      {
        UChar32 v84 = 0xFFFF;
      }
      else
      {
        BOOL v52 = (v81 & 2) == 0;
        uint64_t v83 = (char *)a3 + 10;
        if (v52) {
          uint64_t v83 = (char *)*((void *)a3 + 3);
        }
        UChar32 v84 = *(unsigned __int16 *)&v83[2 * (int)i];
      }
      if (!u_isalpha(v84))
      {
LABEL_211:
        uint64_t v68 = 0;
        goto LABEL_165;
      }
    }
  }
LABEL_163:
  BOOL v67 = (int)v31 <= 0;
  int v28 = v86;
  if (v67) {
    goto LABEL_166;
  }
LABEL_164:
  *(_DWORD *)a2 = v10 - 1;
  unint64_t v55 = (unint64_t)a4;
  *(_DWORD *)a4 = i;
  uint64_t v68 = 1;
LABEL_165:
  icu::UnicodeString::~UnicodeString((void *)v55, (icu::UnicodeString *)&v92);
  return v68;
}

uint64_t icu::SimpleDateFormat::matchQuarterString(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, int a6, unsigned char *a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v27 = 0;
  long long v26 = 0u;
  UChar32 v23 = &unk_1EDA47700;
  uint64_t v8 = 2;
  LOWORD(v24) = 2;
  if (a6 < 1) {
    goto LABEL_10;
  }
  uint64_t v13 = 0;
  int v14 = 0;
  int v15 = -1;
  uint64_t v16 = a6;
  do
  {
    int v17 = sub_18C9DF098(a2, a3, a5);
    BOOL v20 = __OFSUB__(v17, v14);
    BOOL v18 = v17 == v14;
    BOOL v19 = v17 - v14 < 0;
    if (v17 > v14) {
      int v14 = v17;
    }
    if (!(v19 ^ v20 | v18)) {
      int v15 = v13;
    }
    ++v13;
    a5 += 64;
  }
  while (v16 != v13);
  if (v15 < 0)
  {
LABEL_10:
    uint64_t v21 = -a3;
  }
  else
  {
    icu::Calendar::set(a7, a4, 3 * v15);
    uint64_t v21 = (v14 + a3);
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v23);
  return v21;
}

uint64_t sub_18C9DF098(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v25 = 0;
  int v24 = 0;
  unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
  if ((v5 & 0x11) != 0)
  {
    uint64_t v6 = 0;
  }
  else if ((v5 & 2) != 0)
  {
    uint64_t v6 = a1 + 10;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 24);
  }
  int v7 = (__int16)v5;
  uint64_t v8 = v6 + 2 * a2;
  unsigned int v9 = v5 >> 5;
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (v7 >= 0) {
    unsigned int v10 = v9;
  }
  uint64_t v11 = v10 - a2;
  unsigned int v12 = *(unsigned __int16 *)(a3 + 8);
  if ((v12 & 0x11) != 0)
  {
    uint64_t v13 = 0;
  }
  else if ((v12 & 2) != 0)
  {
    uint64_t v13 = a3 + 10;
  }
  else
  {
    uint64_t v13 = *(void *)(a3 + 24);
  }
  int v14 = (__int16)v12;
  unsigned int v15 = v12 >> 5;
  if (v14 >= 0) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = *(unsigned int *)(a3 + 12);
  }
  u_caseInsensitivePrefixMatch(v8, v11, v13, v16, 0, &v25, &v24, (char *)&v25 + 4);
  unsigned int v17 = *(unsigned __int16 *)(a3 + 8);
  if (*(__int16 *)(a3 + 8) < 0)
  {
    unsigned int v18 = *(_DWORD *)(a3 + 12);
    if (v24 != v18) {
      goto LABEL_20;
    }
    return v25;
  }
  if (v24 == v17 >> 5) {
    return v25;
  }
  unsigned int v18 = v17 >> 5;
LABEL_20:
  if (v18)
  {
    unsigned int v19 = v18 - 1;
    uint64_t v20 = a3 + 10;
    if ((v17 & 2) == 0) {
      uint64_t v20 = *(void *)(a3 + 24);
    }
    if (*(_WORD *)(v20 + 2 * (int)v19) == 46)
    {
      int v21 = (__int16)v17;
      unsigned int v22 = v17 >> 5;
      if (v21 < 0) {
        unsigned int v22 = *(_DWORD *)(a3 + 12);
      }
      if (v24 == v22 - 1) {
        return v25;
      }
    }
  }
  return 0;
}

uint64_t icu::SimpleDateFormat::matchDayPeriodStrings(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int a3, const icu::UnicodeString *a4, int a5, int *a6)
{
  if (a5 < 1) {
    return -a3;
  }
  uint64_t v10 = 0;
  int v11 = 0;
  int v12 = -1;
  uint64_t v13 = a5;
  do
  {
    int v14 = sub_18C9DF098((uint64_t)a2, a3, (uint64_t)a4);
    if (v14 > v11)
    {
      int v11 = v14;
      int v12 = v10;
    }
    ++v10;
    a4 = (const icu::UnicodeString *)((char *)a4 + 64);
  }
  while (v13 != v10);
  if (v12 < 0) {
    return -a3;
  }
  *a6 = v12;
  return (v11 + a3);
}

uint64_t icu::SimpleDateFormat::matchAlphaMonthStrings(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int a3, const icu::UnicodeString *a4, const icu::UnicodeString *a5, int a6, icu::Calendar *a7)
{
  if (a6 < 1) {
    return -a3;
  }
  uint64_t v12 = 0;
  int v13 = 0;
  int v14 = -1;
  uint64_t v15 = a6;
  do
  {
    int v16 = sub_18C9DF098((uint64_t)a2, a3, (uint64_t)a4);
    if (v16 > v13)
    {
      int v13 = v16;
      int v14 = v12;
    }
    ++v12;
    a4 = (const icu::UnicodeString *)((char *)a4 + 64);
  }
  while (v15 != v12);
  for (uint64_t i = 0; i != v15; ++i)
  {
    int v18 = sub_18C9DF098((uint64_t)a2, a3, (uint64_t)a5);
    if (v18 > v13)
    {
      int v13 = v18;
      int v14 = i;
    }
    a5 = (const icu::UnicodeString *)((char *)a5 + 64);
  }
  if (v14 < 0) {
    return -a3;
  }
  unsigned int v19 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a7 + 184))(a7);
  int v20 = strcmp(v19, "hebrew");
  if (v14 == 13 && v20 == 0) {
    int v22 = 6;
  }
  else {
    int v22 = v14;
  }
  icu::Calendar::set(a7, 2u, v22);
  return (v13 + a3);
}

uint64_t icu::SimpleDateFormat::matchString(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, const icu::UnicodeString *a7, unsigned char *a8)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v41 = 0u;
  uint64_t v44 = 0;
  long long v43 = 0u;
  long long v42 = 0u;
  uint64_t v40 = &unk_1EDA47700;
  uint64_t v9 = 2;
  LOWORD(v41) = 2;
  if ((a4 == 7) >= a6) {
    goto LABEL_22;
  }
  unsigned int v30 = 0;
  int v12 = 0;
  uint64_t v13 = a4 == 7;
  uint64_t v14 = a6;
  int v15 = -1;
  int v16 = (const icu::UnicodeString *)(a5 + (v13 << 6));
  do
  {
    int v17 = sub_18C9DF098(a2, a3, (uint64_t)v16);
    if (v17 > v12)
    {
      int v12 = v17;
      int v15 = v13;
    }
    if (a7)
    {
      UErrorCode v31 = U_ZERO_ERROR;
      uint64_t v39 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v36 = 0u;
      uint64_t v35 = &unk_1EDA47700;
      LOWORD(v36) = 2;
      int v33 = &unk_1EDA47700;
      __int16 v34 = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v32, a7, 1, 1, 0, &v31);
      icu::SimpleFormatter::format((icu::SimpleFormatter *)v32, v16, (icu::UnicodeString *)&v35, &v31);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v32);
      uint64_t v18 = v31;
      if (v31 <= U_ZERO_ERROR)
      {
        int v19 = sub_18C9DF098(a2, a3, (uint64_t)&v35);
        if (v19 <= v12)
        {
          uint64_t v18 = v30;
        }
        else
        {
          int v12 = v19;
          int v15 = v13;
          uint64_t v18 = 1;
        }
        unsigned int v30 = v18;
      }
      icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v35);
    }
    ++v13;
    int v16 = (const icu::UnicodeString *)((char *)v16 + 64);
  }
  while (v14 != v13);
  if (v15 < 0)
  {
LABEL_22:
    uint64_t v26 = -a3;
  }
  else
  {
    if (a4 <= 23)
    {
      int v20 = (const char *)(*(uint64_t (**)(unsigned char *))(*(void *)a8 + 184))(a8);
      int v21 = strcmp(v20, "hebrew");
      if (a4 == 2 && (!v21 ? (BOOL v22 = v15 == 13) : (BOOL v22 = 0), v22))
      {
        UChar32 v23 = a8;
        unsigned int v24 = 2;
        int v25 = 6;
      }
      else
      {
        if (a4 == 1) {
          int v25 = v15 + 1;
        }
        else {
          int v25 = v15;
        }
        UChar32 v23 = a8;
        unsigned int v24 = a4;
      }
      icu::Calendar::set(v23, v24, v25);
      if (a7) {
        icu::Calendar::set(a8, 0x16u, v30);
      }
    }
    uint64_t v26 = (v12 + a3);
  }
  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v40);
  return v26;
}

void *icu::SimpleDateFormat::parseInt(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4, int a5, const icu::NumberFormat *a6)
{
  return icu::SimpleDateFormat::parseInt(this, a2, a3, -1, a4, a5, a6);
}

uint64_t icu::SimpleDateFormat::checkIntSuffix(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = a3;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v25 = 0;
  long long v24 = 0u;
  int v21 = (UChar *)&unk_1EDA47700;
  LOWORD(v22) = 2;
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  int v7 = (__int16)v6;
  LODWORD(v8) = v6 >> 5;
  if (v7 >= 0) {
    unint64_t v8 = v8;
  }
  else {
    unint64_t v8 = *((unsigned int *)a2 + 3);
  }
  if (((a4 | a3) & 0x80000000) == 0 && (int)v8 >= (int)a3)
  {
    unint64_t v8 = *((__int16 *)this + 180) < 0 ? *((unsigned int *)this + 91) : *((unsigned __int16 *)this + 180) >> 5;
    if ((int)v8 >= (int)a4)
    {
      uint64_t v13 = (const void *)*((void *)this + 42);
      if (v13)
      {
        if (v14)
        {
          if (a5) {
            NegativeSuffix = (UChar **)icu::DecimalFormat::getNegativeSuffix(v14, (icu::UnicodeString *)&v21);
          }
          else {
            NegativeSuffix = (UChar **)icu::DecimalFormat::getPositiveSuffix(v14, (icu::UnicodeString *)&v21);
          }
          icu::UnicodeString::operator=(&v21, NegativeSuffix);
        }
      }
      LODWORD(v8) = (unsigned __int16)v22 >> 5;
      if ((v22 & 0x8000u) == 0) {
        unint64_t v8 = v8;
      }
      else {
        unint64_t v8 = DWORD1(v22);
      }
      if ((int)v8 >= 1)
      {
        int v16 = icu::SimpleDateFormat::compareSimpleAffix(this, (const icu::UnicodeString *)&v21, (icu::SimpleDateFormat *)((char *)this + 352), a4);
        int v17 = icu::SimpleDateFormat::compareSimpleAffix(this, (const icu::UnicodeString *)&v21, a2, v5);
        int v18 = (unsigned __int16)v22 >> 5;
        if ((v22 & 0x8000u) != 0) {
          int v18 = DWORD1(v22);
        }
        int v19 = icu::SimpleDateFormat::compareSimpleAffix(this, (const icu::UnicodeString *)&v21, a2, (v5 - v18));
        if ((v17 < 0 || v16 < 0 || v17 != v16) && (v19 & 0x80000000) == 0 && (v16 & 0x80000000) == 0 && v19 == v16)
        {
          LODWORD(v8) = (unsigned __int16)v22 >> 5;
          if ((v22 & 0x8000u) == 0) {
            unint64_t v8 = v8;
          }
          else {
            unint64_t v8 = DWORD1(v22);
          }
          uint64_t v5 = (v5 - v8);
        }
      }
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v21);
  return v5;
}

uint64_t icu::SimpleDateFormat::countDigits@<X0>(const icu::UnicodeString *a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  if (a2 >= a3) {
    return 0;
  }
  int v6 = a2;
  LODWORD(v8) = 0;
  do
  {
    unsigned int v9 = icu::UnicodeString::char32At((uint64_t *)a4, a1, v6);
    if (u_isdigit(v9)) {
      uint64_t v8 = (v8 + 1);
    }
    else {
      uint64_t v8 = v8;
    }
    if (v9 < 0x10000) {
      a4 = 1;
    }
    else {
      a4 = 2;
    }
    v6 += a4;
  }
  while (v6 < a3);
  return v8;
}

void *icu::SimpleDateFormat::parseInt(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, int a4, icu::ParsePosition *a5, int a6, const icu::NumberFormat *lpsrc)
{
  int v7 = lpsrc;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v30 = 0;
  long long v29 = 0u;
  uint64_t v26 = &unk_1EDA47700;
  LOWORD(v27) = 2;
  if (lpsrc)
  {
    uint64_t v14 = 0;
    if (!a6 && v13)
    {
      uint64_t v15 = (*(uint64_t (**)(void *))(*(void *)v13 + 32))(v13);
      if (!v15) {
        return icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v26);
      }
      uint64_t v14 = (const icu::NumberFormat *)v15;
      long long v24 = &unk_18CA973E0;
      icu::UnicodeString::UnicodeString(v25, 1, &v24);
      (*(void (**)(const icu::NumberFormat *, unsigned char *))(*(void *)v14 + 376))(v14, v25);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
      int v7 = v14;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  int v18 = *((_DWORD *)a5 + 2);
  (*(void (**)(const icu::NumberFormat *, const icu::UnicodeString *, icu::Formattable *, icu::ParsePosition *))(*(void *)v7 + 160))(v7, a2, a3, a5);
  if (a4 >= 1)
  {
    int v19 = *((_DWORD *)a5 + 2) - v18;
    BOOL v20 = __OFSUB__(v19, a4);
    unint64_t v16 = (v19 - a4);
    if (!(((v16 & 0x80000000) != 0) ^ v20 | (v16 == 0)))
    {
      int v21 = *((_DWORD *)a3 + 2);
      if ((int)v16 >= 1)
      {
        unsigned int v22 = v16 + 1;
        do
        {
          v21 /= 10;
          --v22;
        }
        while (v22 > 1);
      }
      *((_DWORD *)a5 + 2) = v18 + a4;
      icu::Formattable::setLong(a3, v21);
    }
  }
  if (v14) {
    (*(void (**)(const icu::NumberFormat *))(*(void *)v14 + 8))(v14);
  }
  return icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v26);
}

uint64_t icu::SimpleDateFormat::translatePattern(uint64_t this, const icu::UnicodeString *a2, icu::UnicodeString *a3, const icu::UnicodeString *a4, const icu::UnicodeString *a5, UErrorCode *a6)
{
  if (*(int *)a5 > 0) {
    return this;
  }
  uint64_t v10 = this;
  unint64_t v11 = 0;
  BOOL v12 = 0;
  if (*((_WORD *)a2 + 4)) {
    __int16 v13 = 2;
  }
  else {
    __int16 v13 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v13;
  uint64_t v14 = this + 10;
  uint64_t v15 = (char *)a4 + 10;
  while (1)
  {
    int v16 = *(__int16 *)(v10 + 8);
    if (v16 < 0) {
      break;
    }
    if (v11 >= (unint64_t)*(unsigned __int16 *)(v10 + 8) >> 5) {
      goto LABEL_38;
    }
    unint64_t v17 = (unint64_t)*(unsigned __int16 *)(v10 + 8) >> 5;
LABEL_11:
    if (v17 <= v11)
    {
      BOOL v12 = v12;
LABEL_18:
      UChar v19 = -1;
      goto LABEL_19;
    }
    if ((v16 & 2) != 0) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = *(void *)(v10 + 24);
    }
    UChar v19 = *(_WORD *)(v18 + 2 * v11);
    if (v12)
    {
      BOOL v12 = v19 != 39;
      goto LABEL_19;
    }
    if (v19 == 39)
    {
      UChar v19 = 39;
      BOOL v12 = 1;
    }
    else if (v19 <= 0x7Fu && byte_18CA970A4[v19])
    {
      unsigned int v20 = *((unsigned __int16 *)a3 + 4);
      int v21 = (__int16)v20;
      int32_t v22 = v20 >> 5;
      if (v21 >= 0) {
        int32_t v23 = v22;
      }
      else {
        int32_t v23 = *((_DWORD *)a3 + 3);
      }
      this = icu::UnicodeString::doIndexOf((uint64_t)a3, v19, 0, v23);
      if (this == -1) {
        goto LABEL_39;
      }
      unsigned int v24 = *((unsigned __int16 *)a4 + 4);
      if ((v24 & 0x8000u) == 0) {
        unsigned int v25 = v24 >> 5;
      }
      else {
        unsigned int v25 = *((_DWORD *)a4 + 3);
      }
      if (v25 <= this)
      {
        BOOL v12 = 0;
        goto LABEL_18;
      }
      BOOL v12 = 0;
      if ((v24 & 2) != 0) {
        uint64_t v26 = v15;
      }
      else {
        uint64_t v26 = (char *)*((void *)a4 + 3);
      }
      UChar v19 = *(_WORD *)&v26[2 * (int)this];
    }
    else
    {
      BOOL v12 = 0;
    }
LABEL_19:
    UChar v27 = v19;
    this = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v27, 0, 1);
    ++v11;
  }
  if ((uint64_t)v11 < *(int *)(v10 + 12))
  {
    unint64_t v17 = *(unsigned int *)(v10 + 12);
    goto LABEL_11;
  }
LABEL_38:
  if (!v12) {
    return this;
  }
LABEL_39:
  *(_DWORD *)a5 = 3;
  return this;
}

UChar **icu::SimpleDateFormat::toPattern(UChar **this, UChar **a2)
{
  icu::UnicodeString::operator=(a2, this + 44);
  return a2;
}

icu::UnicodeString *icu::SimpleDateFormat::toLocalizedPattern(icu::SimpleDateFormat *this, icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v6 = (char *)this + 352;
  PatternUChars = icu::DateFormatSymbols::getPatternUChars(this);
  icu::UnicodeString::UnicodeString((uint64_t)v11, (uint64_t)PatternUChars);
  icu::SimpleDateFormat::translatePattern((uint64_t)v6, a2, (icu::UnicodeString *)v11, (const icu::UnicodeString *)(*((void *)this + 96) + 768), (const icu::UnicodeString *)a3, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
  return a2;
}

void icu::SimpleDateFormat::applyPattern(icu::SimpleDateFormat *this, UChar **a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  icu::UnicodeString::operator=((UChar **)this + 44, a2);
  icu::SimpleDateFormat::parsePattern(this);
  uint64_t v3 = *((void *)this + 41);
  if (!v3) {
    return;
  }
  unsigned int v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 184))(v3);
  if (strcmp(v4, "japanese") || strcmp((const char *)this + 552, "ja")) {
    return;
  }
  icu::UnicodeString::UnicodeString((uint64_t)v18, (uint64_t)"y");
  unsigned int v5 = *((unsigned __int16 *)this + 212);
  if (v5)
  {
    int v7 = (void *)WORD4(v18[0]);
    if (BYTE8(v18[0])) {
      goto LABEL_16;
    }
LABEL_20:
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v18);
    goto LABEL_21;
  }
  if ((v5 & 0x8000) != 0) {
    int v6 = *((_DWORD *)this + 107);
  }
  else {
    int v6 = v5 >> 5;
  }
  if ((SWORD4(v18[0]) & 0x8000u) == 0) {
    int v7 = (void *)(WORD4(v18[0]) >> 5);
  }
  else {
    int v7 = (void *)HIDWORD(v18[0]);
  }
  if ((BYTE8(v18[0]) & 1) != 0
    || v6 != v7
    || !icu::UnicodeString::doEquals((icu::SimpleDateFormat *)((char *)this + 416), (const icu::UnicodeString *)v18, v6))
  {
    goto LABEL_20;
  }
LABEL_16:
  int v8 = *((unsigned __int8 *)this + 794);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v18);
  if (!v8)
  {
    unsigned int v9 = (char *)*((void *)this + 100);
    if (v9)
    {
      sub_18C9D626C(v9);
      *((void *)this + 100) = 0;
    }
    icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
    return;
  }
LABEL_21:
  if ((*((_WORD *)this + 212) & 1) != 0 && *((unsigned char *)this + 794))
  {
    umtx_lock((atomic_ullong *)&unk_1EB20BB68);
    if (!*((void *)this + 100))
    {
      uint64_t v10 = uprv_malloc(0x130uLL);
      if (v10)
      {
        v10[17] = 0u;
        v10[18] = 0u;
        v10[15] = 0u;
        v10[16] = 0u;
        v10[13] = 0u;
        v10[14] = 0u;
        v10[11] = 0u;
        v10[12] = 0u;
        v10[9] = 0u;
        v10[10] = 0u;
        v10[7] = 0u;
        v10[8] = 0u;
        v10[5] = 0u;
        _OWORD v10[6] = 0u;
        void v10[3] = 0u;
        _OWORD v10[4] = 0u;
        v10[1] = 0u;
        _OWORD v10[2] = 0u;
        *uint64_t v10 = 0u;
      }
      *((void *)this + 100) = v10;
    }
    umtx_unlock((std::mutex **)&unk_1EB20BB68);
    if (*((void *)this + 100))
    {
      unint64_t v11 = (uint64_t *)*((void *)this + 94);
      uint64_t v12 = (char *)v11 + *((int *)this + 144);
      memset(v18, 0, sizeof(v18));
      icu::Locale::Locale(v11, (icu::Locale *)v18, (const char *)this + 552, (const char *)this + 570, v12, "numbers=jpanyear");
      int v17 = 0;
      uint64_t v14 = (icu::SharedObject *)sub_18C9DAD20((char **)v18, (UErrorCode *)&v17, v13);
      if (v17 <= 0)
      {
        uint64_t v15 = v14;
        unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(0x79u);
        sub_18C8917C4(v15, (icu::SharedObject **)(*((void *)this + 100) + 8 * PatternCharIndex));
        icu::SharedObject::deleteIfZeroRefCount((uint64_t)v15);
        sub_18C9893DC((uint64_t)this + 416, (uint64_t)"y", 0xFFFFFFFFLL);
      }
      icu::Locale::~Locale((icu::Locale *)v18);
    }
  }
}

void *icu::SimpleDateFormat::applyLocalizedPattern(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (icu::SimpleDateFormat *)((char *)this + 352);
  int v6 = (icu::UnicodeString *)(*((void *)this + 96) + 768);
  PatternUChars = icu::DateFormatSymbols::getPatternUChars(this);
  icu::UnicodeString::UnicodeString((uint64_t)v11, (uint64_t)PatternUChars);
  icu::SimpleDateFormat::translatePattern((uint64_t)a2, v5, v6, (const icu::UnicodeString *)v11, (const icu::UnicodeString *)a3, v8);
  return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
}

uint64_t icu::SimpleDateFormat::getDateFormatSymbols(icu::SimpleDateFormat *this)
{
  return *((void *)this + 96);
}

void icu::SimpleDateFormat::adoptDateFormatSymbols(icu::SimpleDateFormat *this, icu::DateFormatSymbols *a2)
{
  unsigned int v4 = (icu::DateFormatSymbols *)*((void *)this + 96);
  if (v4)
  {
    icu::DateFormatSymbols::~DateFormatSymbols(v4);
    icu::UMemory::operator delete(v5);
  }
  *((void *)this + 96) = a2;
}

icu::DateFormatSymbols *icu::SimpleDateFormat::setDateFormatSymbols@<X0>(icu::SimpleDateFormat *this@<X0>, const icu::DateFormatSymbols *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5 = (icu::DateFormatSymbols *)*((void *)this + 96);
  if (v5)
  {
    icu::DateFormatSymbols::~DateFormatSymbols(v5);
    icu::UMemory::operator delete(v6);
  }
  uint64_t result = (icu::DateFormatSymbols *)icu::UMemory::operator new(a3, (icu::UMemory *)0x4F8, (unint64_t)a2);
  if (result) {
    uint64_t result = (icu::DateFormatSymbols *)icu::DateFormatSymbols::DateFormatSymbols(result, a2);
  }
  *((void *)this + 96) = result;
  return result;
}

icu::TimeZoneFormat *icu::SimpleDateFormat::getTimeZoneFormat(icu::SimpleDateFormat *this)
{
  UErrorCode v2 = U_ZERO_ERROR;
  return icu::SimpleDateFormat::tzFormat(this, &v2);
}

uint64_t icu::SimpleDateFormat::adoptTimeZoneFormat(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 776);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)(a1 + 776) = a2;
  return result;
}

icu::TimeZoneFormat *icu::SimpleDateFormat::setTimeZoneFormat(icu::SimpleDateFormat *this, const icu::TimeZoneFormat *a2)
{
  uint64_t v4 = *((void *)this + 97);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = (icu::TimeZoneFormat *)icu::UMemory::operator new((icu::UMemory *)0x530, (unint64_t)a2);
  if (result) {
    uint64_t result = (icu::TimeZoneFormat *)icu::TimeZoneFormat::TimeZoneFormat(result, a2);
  }
  *((void *)this + 97) = result;
  return result;
}

void icu::SimpleDateFormat::adoptCalendar(icu::SimpleDateFormat *this, icu::Calendar *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  UErrorCode v11 = U_ZERO_ERROR;
  memset(v12, 0, sizeof(v12));
  icu::Locale::Locale((icu::Locale *)v12, (uint64_t)this + 544);
  uint64_t v4 = (icu::DateFormatSymbols *)*((void *)this + 96);
  if (!v4
    || (uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 41) + 184))(*((void *)this + 41)),
        v5 != (*(uint64_t (**)(icu::Calendar *))(*(void *)a2 + 184))(a2)))
  {
    int v6 = (char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a2 + 184))(a2);
    icu::Locale::setKeywordValue((char **)v12, "calendar", v6, &v11);
    int v8 = icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)v12, &v11, v7);
    if (v11 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      (*(void (**)(icu::Calendar *))(*(void *)a2 + 8))(a2);
      goto LABEL_11;
    }
    uint64_t v4 = v8;
  }
  icu::DateFormat::adoptCalendar(this, a2);
  unsigned int v9 = (icu::DateFormatSymbols *)*((void *)this + 96);
  if (v9 != v4)
  {
    if (v9)
    {
      icu::DateFormatSymbols::~DateFormatSymbols(v9);
      icu::UMemory::operator delete(v10);
    }
    *((void *)this + 96) = v4;
  }
  icu::SimpleDateFormat::initializeDefaultCentury(this);
LABEL_11:
  icu::Locale::~Locale((icu::Locale *)v12);
}

uint64_t icu::SimpleDateFormat::setContext(uint64_t a1, int a2, int *a3)
{
  uint64_t result = icu::DateFormat::setContext(a1, a2, a3);
  if (*a3 <= 0 && (a2 - 258) <= 2 && !*(void *)(a1 + 824))
  {
    *a3 = 0;
    uint64_t result = (uint64_t)icu::BreakIterator::createSentenceInstance((char **)(a1 + 544), (const icu::Locale *)a3, v7, v8);
    *(void *)(a1 + 824) = result;
    if (*a3 >= 1)
    {
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      *(void *)(a1 + 824) = 0;
    }
  }
  return result;
}

uint64_t icu::SimpleDateFormat::isFieldUnitIgnored(uint64_t a1, unsigned int a2)
{
  return icu::SimpleDateFormat::isFieldUnitIgnored(a1 + 352, a2);
}

{
  BOOL v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  signed int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  signed int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  signed int v17;

  UErrorCode v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  int v6 = icu::SimpleDateFormat::fgCalendarFieldToLevel[a2];
  int v7 = *(unsigned __int16 *)(a1 + 8);
  int v8 = v7 >> 5;
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v7 & 2) != 0) {
    uint64_t v10 = a1 + 10;
  }
  if ((v7 & 0x8000) != 0) {
    goto LABEL_6;
  }
LABEL_4:
  UErrorCode v11 = v7 >> 5;
  if (v5 < v8)
  {
    while (1)
    {
      if (v11 <= v5) {
        uint64_t v12 = 0xFFFF;
      }
      else {
        uint64_t v12 = *(unsigned __int16 *)(v10 + 2 * v5);
      }
      if (v12 != v3 && v4 >= 1)
      {
        uint64_t v13 = v3 > 0x7Fu ? -1 : dword_18CA96EA4[v3];
        uint64_t v4 = 0;
        if (v6 <= v13) {
          return 0;
        }
      }
      if (v12 == 39) {
        break;
      }
      if (v2)
      {
        UErrorCode v2 = 1;
      }
      else
      {
        if (v12 > 0x7F) {
          int v16 = 0;
        }
        else {
          int v16 = byte_18CA970A4[v12];
        }
        UErrorCode v2 = 0;
        if (v16)
        {
          uint64_t v3 = v12;
          ++v4;
        }
      }
LABEL_32:
      ++v5;
      if ((v7 & 0x8000) == 0) {
        goto LABEL_4;
      }
LABEL_6:
      UErrorCode v11 = v9;
      if (v5 >= v9) {
        goto LABEL_34;
      }
    }
    uint64_t v14 = v5 + 1;
    if ((v7 & 0x8000) != 0)
    {
      uint64_t v15 = v9;
      if ((int)v14 >= v9)
      {
LABEL_26:
        UErrorCode v2 = !v2;
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v15 = v7 >> 5;
      if ((int)v14 >= v8) {
        goto LABEL_26;
      }
    }
    if (v15 > v14 && *(_WORD *)(v10 + 2 * v14) == 39)
    {
      ++v5;
      goto LABEL_32;
    }
    goto LABEL_26;
  }
LABEL_34:
  if (v4 >= 1 && (v3 > 0x7Fu ? (int v17 = -1) : (int v17 = dword_18CA96EA4[v3]), v6 <= v17)) {
    return 0;
  }
  else {
    return 1;
  }
}

uint64_t icu::SimpleDateFormat::compareSimpleAffix(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, uint64_t a4)
{
  int v4 = a4;
  unsigned int v5 = *((unsigned __int16 *)a2 + 4);
  int v6 = (__int16)v5;
  LODWORD(v7) = v5 >> 5;
  if (v6 >= 0) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = *((unsigned int *)a2 + 3);
  }
  LODWORD(v8) = a4;
  if ((int)v7 < 1) {
    return (v8 - v4);
  }
  int v11 = 0;
  uint64_t v8 = a4;
  while (1)
  {
    uint64_t v12 = (icu::PatternProps *)icu::UnicodeString::char32At((uint64_t *)v7, a2, v11);
    int v13 = (int)v12;
    int v14 = v12 < 0x10000 ? 1 : 2;
    uint64_t isWhiteSpace = (uint64_t *)icu::PatternProps::isWhiteSpace(v12);
    LODWORD(v17) = *((unsigned __int16 *)a3 + 4);
    int v16 = (__int16)v17;
    LODWORD(v17) = v17 >> 5;
    int v17 = v16 >= 0 ? (uint64_t *)v17 : (uint64_t *)*((unsigned int *)a3 + 3);
    if (isWhiteSpace) {
      break;
    }
    if ((int)v8 >= (int)v17 || icu::UnicodeString::char32At(v17, a3, v8) != v13) {
      return 0xFFFFFFFFLL;
    }
    v11 += v14;
    uint64_t v8 = (v14 + v8);
LABEL_36:
    unsigned int v30 = *((unsigned __int16 *)a2 + 4);
    int v31 = (__int16)v30;
    LODWORD(v7) = v30 >> 5;
    if (v31 >= 0) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = *((unsigned int *)a2 + 3);
    }
    if (v11 >= (int)v7) {
      return (v8 - v4);
    }
  }
  if ((int)v8 < (int)v17 && (uint64_t isWhiteSpace = icu::UnicodeString::char32At(v17, a3, v8), isWhiteSpace == v13))
  {
    while (1)
    {
      v11 += v14;
      uint64_t v8 = (v14 + v8);
      unsigned int v18 = *((unsigned __int16 *)a2 + 4);
      int v19 = (__int16)v18;
      LODWORD(v20) = v18 >> 5;
      unsigned int v20 = v19 >= 0 ? (uint64_t *)v20 : (uint64_t *)*((unsigned int *)a2 + 3);
      if (v11 == v20) {
        break;
      }
      int v21 = (icu::PatternProps *)icu::UnicodeString::char32At(v20, a2, v11);
      unsigned int v22 = v21;
      uint64_t isWhiteSpace = (uint64_t *)icu::PatternProps::isWhiteSpace(v21);
      if (!isWhiteSpace) {
        break;
      }
      unsigned int v23 = *((unsigned __int16 *)a3 + 4);
      int v24 = (__int16)v23;
      LODWORD(v25) = v23 >> 5;
      if (v24 >= 0) {
        unint64_t v25 = v25;
      }
      else {
        unint64_t v25 = *((unsigned int *)a3 + 3);
      }
      char v26 = 1;
      if ((int)v8 < (int)v25)
      {
        int v14 = v22 < 0x10000 ? 1 : 2;
        uint64_t isWhiteSpace = icu::UnicodeString::char32At((uint64_t *)v25, a3, v8);
        if (isWhiteSpace == v22) {
          continue;
        }
      }
      goto LABEL_30;
    }
    char v26 = 1;
  }
  else
  {
    char v26 = 0;
  }
LABEL_30:
  UChar v27 = (icu::SimpleDateFormat *)icu::SimpleDateFormat::skipPatternWhiteSpace((icu::SimpleDateFormat *)isWhiteSpace, a2, v11);
  long long v28 = (icu::SimpleDateFormat *)icu::SimpleDateFormat::skipUWhiteSpace(v27, a3, v8);
  long long v29 = v28;
  if ((v26 & 1) != 0 || v28 != v8)
  {
    int v11 = icu::SimpleDateFormat::skipUWhiteSpace(v28, a2, (uint64_t)v27);
    uint64_t v8 = (uint64_t)v29;
    goto LABEL_36;
  }
  return 0xFFFFFFFFLL;
}

unint64_t icu::SimpleDateFormat::skipPatternWhiteSpace(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int a3)
{
  unsigned int v3 = *((unsigned __int16 *)a2 + 4);
  if ((v3 & 0x11) != 0)
  {
    int v4 = 0;
  }
  else if ((v3 & 2) != 0)
  {
    int v4 = (char *)a2 + 10;
  }
  else
  {
    int v4 = (char *)*((void *)a2 + 3);
  }
  int v5 = (__int16)v3;
  unsigned int v6 = v3 >> 5;
  if (v5 < 0) {
    unsigned int v6 = *((_DWORD *)a2 + 3);
  }
  return (unint64_t)((char *)icu::PatternProps::skipWhiteSpace((unsigned __int16 *)&v4[2 * a3], v6 - a3) - v4) >> 1;
}

uint64_t icu::SimpleDateFormat::skipUWhiteSpace(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, uint64_t a3)
{
  do
  {
    uint64_t v4 = a3;
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    int v6 = (__int16)v5;
    LODWORD(v7) = v5 >> 5;
    if (v6 >= 0) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = *((unsigned int *)a2 + 3);
    }
    if ((int)a3 >= (int)v7) {
      break;
    }
    unsigned int v8 = icu::UnicodeString::char32At((uint64_t *)v7, a2, a3);
    int isUWhiteSpace = u_isUWhiteSpace(v8);
    int v10 = v8 < 0x10000 ? 1 : 2;
    a3 = (v10 + v4);
  }
  while (isUWhiteSpace);
  return v4;
}

uint64_t **sub_18C9E0970(uint64_t **a1)
{
  UErrorCode v2 = *a1;
  if (*a1)
  {
    if (*v2) {
      icu::SharedObject::removeRef(*v2);
    }
    icu::UMemory::operator delete(v2);
  }
  return a1;
}

icu::UnicodeSet **sub_18C9E09B0(icu::UnicodeSet **a1, UErrorCode *a2)
{
  __int16 v34 = (uint64_t *)*MEMORY[0x1E4F143B8];
  uint64_t v4 = v34;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unsigned int v5 = icu::UMemory::operator new(v4, (icu::UMemory *)0xC8, (unint64_t)a2);
  if (v5)
  {
    unsigned int v8 = (icu::UnicodeSet *)v5;
    unsigned int v32 = "[";
    icu::UnicodeString::UnicodeString(v33, 1, &v32);
    icu::UnicodeSet::UnicodeSet(v8, (const icu::UnicodeString *)v33, a2);
    *a1 = v8;
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v33);
    long long v29 = v32;
    unint64_t v7 = (uint64_t *)&v29;
  }
  else
  {
    *a1 = 0;
  }
  int v10 = icu::UMemory::operator new(v7, (icu::UMemory *)0xC8, v6);
  if (v10)
  {
    int v13 = (icu::UnicodeSet *)v10;
    int v31 = L"[-.:[:whitespace:]]";
    icu::UnicodeString::UnicodeString(v33, 1, &v31);
    icu::UnicodeSet::UnicodeSet(v13, (const icu::UnicodeString *)v33, a2);
    a1[1] = v13;
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v33);
    long long v28 = v31;
    uint64_t v12 = (uint64_t *)&v28;
  }
  else
  {
    a1[1] = 0;
  }
  uint64_t v15 = icu::UMemory::operator new(v12, (icu::UMemory *)0xC8, v11);
  if (v15)
  {
    int v17 = (icu::UnicodeSet *)v15;
    unsigned int v30 = L"[:whitespace:]";
    icu::UnicodeString::UnicodeString(v33, 1, &v30);
    icu::UnicodeSet::UnicodeSet(v17, (const icu::UnicodeString *)v33, a2);
    a1[2] = v17;
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v33);
    UChar v27 = v30;
    int v16 = &v27;
  }
  else
  {
    a1[2] = 0;
  }
  int v19 = *a1;
  if (*a1)
  {
    unsigned int v20 = a1[1];
    if (v20)
    {
      unsigned int v20 = a1[2];
      if (v20)
      {
        icu::UnicodeSet::freeze(v19);
        icu::UnicodeSet::freeze(a1[1]);
        icu::UnicodeSet::freeze(a1[2]);
        return a1;
      }
    }
    int v21 = icu::UnicodeSet::~UnicodeSet(v20, v19);
    icu::UMemory::operator delete(v21);
  }
  *a1 = 0;
  unsigned int v22 = a1[1];
  if (v22)
  {
    unsigned int v23 = icu::UnicodeSet::~UnicodeSet(v16, v22);
    icu::UMemory::operator delete(v23);
  }
  a1[1] = 0;
  int v24 = a1[2];
  if (v24)
  {
    unint64_t v25 = icu::UnicodeSet::~UnicodeSet(v16, v24);
    icu::UMemory::operator delete(v25);
  }
  a1[2] = 0;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return a1;
}

icu::UnicodeSet **sub_18C9E0BA8@<X0>(icu::UnicodeSet **a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = *a1;
  if (v3)
  {
    uint64_t v4 = icu::UnicodeSet::~UnicodeSet(a2, v3);
    icu::UMemory::operator delete(v4);
  }
  *a1 = 0;
  unsigned int v5 = a1[1];
  if (v5)
  {
    unint64_t v6 = icu::UnicodeSet::~UnicodeSet(a2, v5);
    icu::UMemory::operator delete(v6);
  }
  a1[1] = 0;
  unint64_t v7 = a1[2];
  if (v7)
  {
    unsigned int v8 = icu::UnicodeSet::~UnicodeSet(a2, v7);
    icu::UMemory::operator delete(v8);
  }
  a1[2] = 0;
  return a1;
}

uint64_t sub_18C9E0C08@<X0>(void *a1@<X8>)
{
  if (qword_1EB20BF00)
  {
    uint64_t v1 = sub_18C9E0BA8((icu::UnicodeSet **)qword_1EB20BF00, a1);
    icu::UMemory::operator delete(v1);
  }
  qword_1EB20BF00 = 0;
  atomic_store(0, &dword_1EB20BF08);
  return 1;
}

uint64_t sub_18C9E0C4C(unsigned int a1)
{
  int v5 = 0;
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1EB20BF08, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1EB20BF08))
  {
    if (dword_1EB20BF0C > 0 || v5 > 0) {
      return 0;
    }
  }
  else
  {
    sub_18C9E0D40((UErrorCode *)&v5);
    dword_1EB20BF0C = v5;
    icu::umtx_initImplPostInit(&dword_1EB20BF08);
    if (v5 >= 1) {
      return 0;
    }
  }
  if (a1 > 0x1A) {
    goto LABEL_17;
  }
  if (((1 << a1) & 0x180F0) == 0)
  {
    if (((1 << a1) & 0x600000E) != 0)
    {
      uint64_t v4 = qword_1EB20BF00;
      return *(void *)v4;
    }
LABEL_17:
    uint64_t v4 = qword_1EB20BF00 + 16;
    return *(void *)v4;
  }
  uint64_t v4 = qword_1EB20BF00 + 8;
  return *(void *)v4;
}

icu::UnicodeSet **sub_18C9E0D40(UErrorCode *a1)
{
  sub_18CA0A25C(0x19u, (uint64_t)sub_18C9E0DA0);
  uint64_t result = (icu::UnicodeSet **)icu::UMemory::operator new(v3, (icu::UMemory *)0x18, v2);
  if (result) {
    uint64_t result = sub_18C9E09B0(result, a1);
  }
  else {
    *a1 = U_MEMORY_ALLOCATION_ERROR;
  }
  qword_1EB20BF00 = (uint64_t)result;
  return result;
}

uint64_t sub_18C9E0DA0@<X0>(void *a1@<X8>)
{
  return 1;
}

void *icu::CollationKey::getStaticClassID(icu::CollationKey *this)
{
  return &unk_1E91926C8;
}

void *icu::CollationKey::getDynamicClassID(icu::CollationKey *this)
{
  return &unk_1E91926C8;
}

double icu::CollationKey::CollationKey(icu::CollationKey *this)
{
  *(void *)this = &unk_1EDA52B98;
  *(void *)&double result = 0x100000000;
  *((void *)this + 1) = 0x100000000;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDA52B98;
  *(void *)&double result = 0x100000000;
  *((void *)this + 1) = 0x100000000;
  return result;
}

icu::CollationKey *icu::CollationKey::CollationKey(icu::CollationKey *this, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  *(void *)this = &unk_1EDA52B98;
  *((_DWORD *)this + 2) = a3;
  *((_DWORD *)this + 3) = 0;
  if ((a3 & 0x80000000) != 0 || !a2 && a3) {
    goto LABEL_4;
  }
  if (a3 < 0x21)
  {
    if (!a3) {
      return this;
    }
    unint64_t v6 = (void *)((char *)this + 16);
LABEL_11:
    memcpy(v6, a2, v3);
    return this;
  }
  if (icu::CollationKey::reallocate(this, a3, 0))
  {
    unint64_t v6 = (void *)((char *)this + 16);
    if ((*((_DWORD *)this + 2) & 0x80000000) != 0) {
      unint64_t v6 = (void *)*v6;
    }
    goto LABEL_11;
  }
  unsigned int v3 = *((_DWORD *)this + 2);
LABEL_4:
  *((_DWORD *)this + 2) = v3 & 0x80000000;
  *((_DWORD *)this + 3) = 2;
  return this;
}

void *icu::CollationKey::reallocate(icu::CollationKey *this, int a2, int a3)
{
  unint64_t v6 = uprv_malloc(a2);
  unint64_t v7 = v6;
  if (v6)
  {
    int v8 = *((_DWORD *)this + 2);
    if (a3 >= 1)
    {
      unsigned int v9 = (void *)((char *)this + 16);
      if (v8 < 0) {
        unsigned int v9 = (void *)*v9;
      }
      memcpy(v6, v9, a3);
    }
    if (v8 < 0)
    {
      uprv_free(*((void **)this + 2));
      int v8 = *((_DWORD *)this + 2);
    }
    *((void *)this + 2) = v7;
    *((_DWORD *)this + 6) = a2;
    *((_DWORD *)this + 2) = v8 | 0x80000000;
  }
  return v7;
}

uint64_t icu::CollationKey::setToBogus(uint64_t this)
{
  *(_DWORD *)(this + 8) &= 0x80000000;
  *(_DWORD *)(this + 12) = 2;
  return this;
}

icu::CollationKey *icu::CollationKey::CollationKey(icu::CollationKey *this, const icu::CollationKey *a2)
{
  *(void *)this = &unk_1EDA52B98;
  int v3 = *((_DWORD *)a2 + 3);
  size_t v4 = *((_DWORD *)a2 + 2) & 0x7FFFFFFF;
  *((_DWORD *)this + 2) = v4;
  *((_DWORD *)this + 3) = v3;
  if (*((_DWORD *)a2 + 3) == 2)
  {
    *((void *)this + 1) = 0x200000000;
  }
  else
  {
    if (v4 < 0x21)
    {
      if (!v4) {
        return this;
      }
      int v8 = (void *)((char *)this + 16);
    }
    else
    {
      unint64_t v6 = icu::CollationKey::reallocate(this, v4, 0);
      int v7 = *((_DWORD *)this + 2);
      if (!v6)
      {
        *((_DWORD *)this + 2) = v7 & 0x80000000;
        *((_DWORD *)this + 3) = 2;
        return this;
      }
      int v8 = (void *)((char *)this + 16);
      if (v7 < 0) {
        int v8 = (void *)*v8;
      }
    }
    unint64_t v11 = (const void *)*((void *)a2 + 2);
    int v10 = (char *)a2 + 16;
    unsigned int v9 = v11;
    if (*((int *)v10 - 2) >= 0) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v9;
    }
    memcpy(v8, v12, v4);
  }
  return this;
}

void icu::CollationKey::~CollationKey(void **this)
{
  *this = &unk_1EDA52B98;
  if ((this[1] & 0x80000000) != 0) {
    uprv_free(this[2]);
  }

  icu::UObject::~UObject((icu::UObject *)this);
}

{
  void *v1;
  uint64_t vars8;

  icu::CollationKey::~CollationKey(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::CollationKey::setLength(uint64_t this, int a2)
{
  *(void *)(this + 8) = *(_DWORD *)(this + 8) & 0x80000000 | a2;
  return this;
}

uint64_t icu::CollationKey::reset(uint64_t this)
{
  *(_DWORD *)(this + 8) &= 0x80000000;
  *(_DWORD *)(this + 12) = 1;
  return this;
}

BOOL icu::CollationKey::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  size_t v3 = v2 & 0x7FFFFFFF;
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v2 & 0x7FFFFFFF) != (v4 & 0x7FFFFFFF)) {
    return 0;
  }
  if (a1 == a2) {
    return 1;
  }
  int v5 = (void *)(a1 + 16);
  if (v2 < 0) {
    int v5 = (void *)*v5;
  }
  int v8 = *(const void **)(a2 + 16);
  unint64_t v6 = (const void *)(a2 + 16);
  int v7 = v8;
  if (v4 < 0) {
    unint64_t v6 = v7;
  }
  return memcmp(v5, v6, v3) == 0;
}

icu::CollationKey *icu::CollationKey::operator=(icu::CollationKey *this, icu::CollationKey *a2)
{
  if (this != a2)
  {
    if (*((_DWORD *)a2 + 3) == 2)
    {
      int v4 = *((_DWORD *)this + 2);
    }
    else
    {
      size_t v6 = *((_DWORD *)a2 + 2) & 0x7FFFFFFF;
      int v4 = *((_DWORD *)this + 2);
      if (v4 < 0) {
        int v7 = *((_DWORD *)this + 6);
      }
      else {
        int v7 = 32;
      }
      if ((int)v6 <= v7
        || (int v8 = icu::CollationKey::reallocate(this, *((_DWORD *)a2 + 2) & 0x7FFFFFFF, 0), v4 = *((_DWORD *)this + 2),
                                                                                           v8))
      {
        if (v6)
        {
          unsigned int v9 = (void *)((char *)this + 16);
          if (v4 < 0) {
            unsigned int v9 = (void *)*v9;
          }
          if (*((int *)a2 + 2) >= 0) {
            int v10 = (char *)a2 + 16;
          }
          else {
            int v10 = (const void *)*((void *)a2 + 2);
          }
          memcpy(v9, v10, v6);
          int v4 = *((_DWORD *)this + 2);
        }
        *((_DWORD *)this + 2) = v4 & 0x80000000 | v6;
        int v5 = *((_DWORD *)a2 + 3);
        goto LABEL_18;
      }
    }
    *((_DWORD *)this + 2) = v4 & 0x80000000;
    int v5 = 2;
LABEL_18:
    *((_DWORD *)this + 3) = v5;
  }
  return this;
}

uint64_t icu::CollationKey::compareTo(icu::CollationKey *this, const icu::CollationKey *a2)
{
  UErrorCode v3 = U_ZERO_ERROR;
  return icu::CollationKey::compareTo(this, a2, &v3);
}

uint64_t icu::CollationKey::compareTo(icu::CollationKey *this, const icu::CollationKey *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  int v5 = *((_DWORD *)this + 2);
  size_t v6 = (char *)this + 16;
  if (v5 < 0) {
    size_t v6 = *(char **)v6;
  }
  unsigned int v9 = (char *)*((void *)a2 + 2);
  int v7 = (char *)a2 + 16;
  int v8 = v9;
  int v10 = *((_DWORD *)v7 - 2);
  if (v10 < 0) {
    int v7 = v8;
  }
  if (v6 == v7) {
    return 0;
  }
  unsigned int v11 = v5 & 0x7FFFFFFF;
  unsigned int v12 = v10 & 0x7FFFFFFF;
  if (v11 < v12) {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v3 = v11 != v12;
  }
  if (v11 >= v12) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v11;
  }
  if (v13)
  {
    int v14 = memcmp(v6, v7, v13);
    if (v14 < 1) {
      uint64_t v15 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v15 = 1;
    }
    if (v14) {
      return v15;
    }
  }
  return v3;
}

uint64_t icu::CollationKey::hashCode(icu::CollationKey *this)
{
  uint64_t result = *((unsigned int *)this + 3);
  if (!result)
  {
    int v3 = *((_DWORD *)this + 2);
    int v4 = (unsigned __int8 *)this + 16;
    if (v3 < 0) {
      int v4 = *(unsigned __int8 **)v4;
    }
    if ((v3 & 0x7FFFFFFF) == 0 || v4 == 0)
    {
      uint64_t result = 1;
    }
    else
    {
      LODWORD(result) = ustr_hashCharsN(v4, v3 & 0x7FFFFFFF);
      if ((result & 0xFFFFFFFD) != 0) {
        uint64_t result = result;
      }
      else {
        uint64_t result = 1;
      }
    }
    *((_DWORD *)this + 3) = result;
  }
  return result;
}

uint64_t ucol_keyHashCode(unsigned __int8 *a1, int a2)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    LODWORD(result) = ustr_hashCharsN(a1, a2);
    if ((result & 0xFFFFFFFD) != 0) {
      return result;
    }
    else {
      return 1;
    }
  }
  return result;
}

char *icu::StandardPlural::getKeyword(int a1)
{
  return off_1E550CFC0[a1];
}

uint64_t icu::StandardPlural::indexOrNegativeFromString(icu::StandardPlural *this, const char *a2)
{
  int v3 = (char *)this + 1;
  int v2 = *(char *)this;
  if (v2 <= 108)
  {
    if (v2 > 60)
    {
      if (v2 == 61)
      {
        if (strcmp((const char *)this + 1, "0"))
        {
          if (!strcmp(v3, "1")) {
            return 7;
          }
          return 0xFFFFFFFFLL;
        }
        return 6;
      }
      if (v2 == 102 && !strcmp((const char *)this + 1, "ew")) {
        return 3;
      }
    }
    else
    {
      if (v2 != 48)
      {
        if (v2 == 49 && !*v3) {
          return 7;
        }
        return 0xFFFFFFFFLL;
      }
      if (!*v3) {
        return 6;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (v2 > 115)
  {
    if (v2 == 116)
    {
      if (strcmp((const char *)this + 1, "wo")) {
        return 0xFFFFFFFFLL;
      }
      return 2;
    }
    else
    {
      if (v2 != 122) {
        return 0xFFFFFFFFLL;
      }
      uint64_t result = strcmp((const char *)this + 1, "ero");
      if (result) {
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if (v2 == 109)
    {
      if (!strcmp((const char *)this + 1, "any")) {
        return 4;
      }
      return 0xFFFFFFFFLL;
    }
    if (v2 != 111) {
      return 0xFFFFFFFFLL;
    }
    if (strcmp((const char *)this + 1, "ther"))
    {
      if (!strcmp(v3, "ne")) {
        return 1;
      }
      return 0xFFFFFFFFLL;
    }
    return 5;
  }
  return result;
}

uint64_t icu::StandardPlural::indexOrNegativeFromString(icu::StandardPlural *this, const icu::UnicodeString *a2)
{
  unsigned int v2 = *((unsigned __int16 *)this + 4);
  if ((v2 & 0x8000u) == 0) {
    unsigned int v3 = v2 >> 5;
  }
  else {
    unsigned int v3 = *((_DWORD *)this + 3);
  }
  switch(v3)
  {
    case 1u:
      if ((v2 & 2) != 0) {
        int v5 = (unsigned __int16 *)((char *)this + 10);
      }
      else {
        int v5 = (unsigned __int16 *)*((void *)this + 3);
      }
      int v6 = *v5;
      if (v6 == 49) {
        unsigned int v7 = 7;
      }
      else {
        unsigned int v7 = -1;
      }
      if (v6 == 48) {
        uint64_t v8 = 6;
      }
      else {
        uint64_t v8 = v7;
      }
      break;
    case 2u:
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, 2, (uint64_t)"=", 0, 2))
      {
        unsigned int v9 = *((unsigned __int16 *)this + 4);
        int v10 = (__int16)v9;
        int32_t v11 = v9 >> 5;
        if (v10 >= 0) {
          int32_t v12 = v11;
        }
        else {
          int32_t v12 = *((_DWORD *)this + 3);
        }
        if (icu::UnicodeString::doCompare((uint64_t)this, 0, v12, (uint64_t)L"=1", 0, 2)) {
          goto LABEL_37;
        }
        uint64_t v8 = 7;
      }
      else
      {
        uint64_t v8 = 6;
      }
      break;
    case 3u:
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, 3, (uint64_t)"o", 0, 3))
      {
        unsigned int v13 = *((unsigned __int16 *)this + 4);
        int v14 = (__int16)v13;
        int32_t v15 = v13 >> 5;
        if (v14 >= 0) {
          int32_t v16 = v15;
        }
        else {
          int32_t v16 = *((_DWORD *)this + 3);
        }
        if (icu::UnicodeString::doCompare((uint64_t)this, 0, v16, (uint64_t)"t", 0, 3))
        {
          unsigned int v17 = *((unsigned __int16 *)this + 4);
          int v18 = (__int16)v17;
          int32_t v19 = v17 >> 5;
          if (v18 >= 0) {
            int32_t v20 = v19;
          }
          else {
            int32_t v20 = *((_DWORD *)this + 3);
          }
          uint64_t v8 = 3;
          if (icu::UnicodeString::doCompare((uint64_t)this, 0, v20, (uint64_t)"f", 0, 3)) {
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v8 = 2;
        }
      }
      else
      {
        uint64_t v8 = 1;
      }
      break;
    case 4u:
      uint64_t v8 = 4;
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, 4, (uint64_t)"m", 0, 4))
      {
        unsigned int v21 = *((unsigned __int16 *)this + 4);
        int v22 = (__int16)v21;
        int32_t v23 = v21 >> 5;
        if (v22 >= 0) {
          int32_t v24 = v23;
        }
        else {
          int32_t v24 = *((_DWORD *)this + 3);
        }
        if (icu::UnicodeString::doCompare((uint64_t)this, 0, v24, (uint64_t)L"zero", 0, 4)) {
          goto LABEL_37;
        }
        uint64_t v8 = 0;
      }
      break;
    case 5u:
      uint64_t v8 = 5;
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, 5, (uint64_t)"o", 0, 5)) {
        goto LABEL_37;
      }
      break;
    default:
LABEL_37:
      uint64_t v8 = 0xFFFFFFFFLL;
      break;
  }
  return v8;
}

uint64_t icu::StandardPlural::indexFromString(icu::StandardPlural *this, char *a2, UErrorCode *a3)
{
  if (*(int *)a2 > 0) {
    return 5;
  }
  uint64_t result = icu::StandardPlural::indexOrNegativeFromString(this, a2);
  if ((result & 0x80000000) != 0)
  {
    *(_DWORD *)a2 = 1;
    return 5;
  }
  return result;
}

uint64_t icu::StandardPlural::indexFromString(icu::StandardPlural *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a2 > 0) {
    return 5;
  }
  uint64_t result = icu::StandardPlural::indexOrNegativeFromString(this, a2);
  if ((result & 0x80000000) != 0)
  {
    *(_DWORD *)a2 = 1;
    return 5;
  }
  return result;
}

uint64_t icu::StringSegment::StringSegment(uint64_t this, const icu::UnicodeString *a2, char a3)
{
  *(void *)this = a2;
  *(_DWORD *)(this + 8) = 0;
  unsigned int v3 = *((unsigned __int16 *)a2 + 4);
  int v4 = (__int16)v3;
  unsigned int v5 = v3 >> 5;
  if (v4 < 0) {
    unsigned int v5 = *((_DWORD *)a2 + 3);
  }
  *(_DWORD *)(this + 12) = v5;
  *(unsigned char *)(this + 16) = a3;
  return this;
}

{
  unsigned int v3;
  int v4;
  unsigned int v5;

  *(void *)this = a2;
  *(_DWORD *)(this + 8) = 0;
  unsigned int v3 = *((unsigned __int16 *)a2 + 4);
  int v4 = (__int16)v3;
  unsigned int v5 = v3 >> 5;
  if (v4 < 0) {
    unsigned int v5 = *((_DWORD *)a2 + 3);
  }
  *(_DWORD *)(this + 12) = v5;
  *(unsigned char *)(this + 16) = a3;
  return this;
}

uint64_t icu::StringSegment::getOffset(icu::StringSegment *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t icu::StringSegment::setOffset(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t icu::StringSegment::adjustOffset(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) += a2;
  return this;
}

unint64_t icu::StringSegment::adjustOffsetByCodePoint(icu::StringSegment *this)
{
  unint64_t result = icu::StringSegment::getCodePoint(this);
  if (result < 0x10000) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  *((_DWORD *)this + 2) += v3;
  return result;
}

unint64_t icu::StringSegment::getCodePoint(icu::StringSegment *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((int *)this + 2);
  unsigned int v4 = *(unsigned __int16 *)(v2 + 8);
  if (*(__int16 *)(v2 + 8) < 0) {
    unsigned int v5 = *(_DWORD *)(v2 + 12);
  }
  else {
    unsigned int v5 = v4 >> 5;
  }
  if (v5 <= v3)
  {
    unsigned int v7 = 0xFFFF;
  }
  else
  {
    if ((v4 & 2) != 0) {
      uint64_t v6 = v2 + 10;
    }
    else {
      uint64_t v6 = *(void *)(v2 + 24);
    }
    unsigned int v7 = *(unsigned __int16 *)(v6 + 2 * v3);
    if ((v7 & 0xFC00) == 0xD800)
    {
      uint64_t v8 = (uint64_t *)*((unsigned int *)this + 3);
      if ((int)v3 + 1 < (int)v8) {
        return (unint64_t)icu::UnicodeString::char32At(v8, (icu::UnicodeString *)v2, v3);
      }
    }
  }
  if ((v7 & 0xF800) == 0xD800) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v7;
  }
}

uint64_t icu::StringSegment::setLength(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = *(_DWORD *)(this + 8) + a2;
  return this;
}

_DWORD *icu::StringSegment::resetLength(_DWORD *this)
{
  if (*(__int16 *)(*(void *)this + 8) < 0) {
    int v1 = *(_DWORD *)(*(void *)this + 12);
  }
  else {
    int v1 = *(unsigned __int16 *)(*(void *)this + 8) >> 5;
  }
  this[3] = v1;
  return this;
}

uint64_t icu::StringSegment::length(icu::StringSegment *this)
{
  return (*((_DWORD *)this + 3) - *((_DWORD *)this + 2));
}

uint64_t icu::StringSegment::charAt(icu::StringSegment *this, int a2)
{
  uint64_t v2 = *(void *)this;
  unsigned int v3 = *((_DWORD *)this + 2) + a2;
  unsigned int v4 = *(unsigned __int16 *)(*(void *)this + 8);
  if (*(__int16 *)(*(void *)this + 8) < 0) {
    unsigned int v5 = *(_DWORD *)(v2 + 12);
  }
  else {
    unsigned int v5 = v4 >> 5;
  }
  if (v5 <= v3) {
    return 0xFFFFLL;
  }
  if ((v4 & 2) != 0) {
    uint64_t v6 = v2 + 10;
  }
  else {
    uint64_t v6 = *(void *)(v2 + 24);
  }
  return *(unsigned __int16 *)(v6 + 2 * (int)v3);
}

uint64_t *icu::StringSegment::codePointAt(uint64_t **this, int a2)
{
  return icu::UnicodeString::char32At(*this, (icu::UnicodeString *)*this, *((_DWORD *)this + 2) + a2);
}

uint64_t icu::StringSegment::toUnicodeString@<X0>(icu::StringSegment *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)this;
  __int16 v5 = *(_WORD *)(*(void *)this + 8);
  if ((v5 & 0x11) != 0)
  {
    uint64_t v6 = 0;
  }
  else if ((v5 & 2) != 0)
  {
    uint64_t v6 = v4 + 10;
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 24);
  }
  return icu::UnicodeString::UnicodeString(a2, v6 + 2 * *((int *)this + 2), (*((_DWORD *)this + 3) - *((_DWORD *)this + 2)));
}

uint64_t icu::StringSegment::toTempUnicodeString@<X0>(icu::StringSegment *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)this;
  __int16 v5 = *(_WORD *)(*(void *)this + 8);
  if ((v5 & 0x11) != 0)
  {
    uint64_t v6 = 0;
  }
  else if ((v5 & 2) != 0)
  {
    uint64_t v6 = v4 + 10;
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 24);
  }
  uint64_t v8 = v6 + 2 * *((int *)this + 2);
  return icu::UnicodeString::UnicodeString(a2, 0, &v8);
}

BOOL icu::StringSegment::startsWith(icu::StringSegment *this, UChar32 a2)
{
  UChar32 CodePoint = icu::StringSegment::getCodePoint(this);
  int v5 = *((unsigned __int8 *)this + 16);

  return icu::StringSegment::codePointsEqual(CodePoint, a2, v5);
}

BOOL icu::StringSegment::codePointsEqual(UChar32 c, UChar32 a2, int a3)
{
  BOOL v4 = c == a2;
  BOOL result = c == a2;
  if (!v4)
  {
    if (a3)
    {
      UChar32 v7 = u_foldCase(c, 1u);
      return v7 == u_foldCase(a2, 1u);
    }
  }
  return result;
}

BOOL icu::StringSegment::startsWith(icu::StringSegment *this, const icu::UnicodeSet *a2)
{
  int CodePoint = icu::StringSegment::getCodePoint(this);
  return CodePoint != -1 && icu::UnicodeSet::contains(a2, CodePoint) != 0;
}

BOOL icu::StringSegment::startsWith(icu::StringSegment *this, const icu::UnicodeString *a2)
{
  unsigned int v2 = *((unsigned __int16 *)a2 + 4);
  if (v2) {
    return 0;
  }
  int v4 = (__int16)v2;
  unsigned int v5 = v2 >> 5;
  if (v4 < 0) {
    unsigned int v5 = *((_DWORD *)a2 + 3);
  }
  if (!v5 || *((_DWORD *)this + 3) == *((_DWORD *)this + 2)) {
    return 0;
  }
  UChar32 CodePoint = icu::StringSegment::getCodePoint(this);
  UChar32 v10 = icu::UnicodeString::char32At(v9, a2, 0);
  int v11 = *((unsigned __int8 *)this + 16);

  return icu::StringSegment::codePointsEqual(CodePoint, v10, v11);
}

unint64_t icu::StringSegment::getCommonPrefixLength(icu::StringSegment *this, const icu::UnicodeString *a2)
{
  return icu::StringSegment::getPrefixLengthInternal(this, a2, *((unsigned __int8 *)this + 16));
}

unint64_t icu::StringSegment::getPrefixLengthInternal(icu::StringSegment *this, const icu::UnicodeString *a2, int a3)
{
  unint64_t v6 = 0;
  UChar32 v7 = (char *)a2 + 10;
  do
  {
    unint64_t v8 = v6;
    unsigned int v9 = *((unsigned __int16 *)a2 + 4);
    int v10 = (__int16)v9;
    int v11 = v9 >> 5;
    if (v10 >= 0) {
      int v12 = v11;
    }
    else {
      int v12 = *((_DWORD *)a2 + 3);
    }
    if ((uint64_t)v8 >= (int)uprv_min((*((_DWORD *)this + 3) - *((_DWORD *)this + 2)), v12)) {
      break;
    }
    uint64_t v13 = *(void *)this;
    unsigned int v14 = *(unsigned __int16 *)(*(void *)this + 8);
    unsigned int v15 = *(__int16 *)(*(void *)this + 8) < 0 ? *(_DWORD *)(v13 + 12) : v14 >> 5;
    unsigned int v16 = v8 + *((_DWORD *)this + 2);
    if (v15 <= v16)
    {
      UChar32 v18 = 0xFFFF;
    }
    else
    {
      uint64_t v17 = (v14 & 2) != 0 ? v13 + 10 : *(void *)(v13 + 24);
      UChar32 v18 = *(unsigned __int16 *)(v17 + 2 * (int)v16);
    }
    unsigned int v19 = *((unsigned __int16 *)a2 + 4);
    unint64_t v20 = (v19 & 0x8000u) == 0 ? v19 >> 5 : *((unsigned int *)a2 + 3);
    if (v8 >= v20)
    {
      UChar32 v22 = 0xFFFF;
    }
    else
    {
      unsigned int v21 = (v19 & 2) != 0 ? v7 : (char *)*((void *)a2 + 3);
      UChar32 v22 = *(unsigned __int16 *)&v21[2 * v8];
    }
    BOOL v23 = icu::StringSegment::codePointsEqual(v18, v22, a3);
    unint64_t v6 = v8 + 1;
  }
  while (v23);
  return v8;
}

unint64_t icu::StringSegment::getCaseSensitivePrefixLength(icu::StringSegment *this, const icu::UnicodeString *a2)
{
  return icu::StringSegment::getPrefixLengthInternal(this, a2, 0);
}

BOOL icu::StringSegment::operator==(icu::StringSegment *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v8);
  if (v9)
  {
    unint64_t v6 = (void *)*(unsigned __int16 *)(a2 + 8);
    BOOL v3 = v6 & 1;
  }
  else
  {
    BOOL v3 = 0;
    if ((v9 & 0x8000u) == 0) {
      int v4 = v9 >> 5;
    }
    else {
      int v4 = v10;
    }
    unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
    if ((v5 & 0x8000u) == 0) {
      unint64_t v6 = (void *)(v5 >> 5);
    }
    else {
      unint64_t v6 = (void *)*(unsigned int *)(a2 + 12);
    }
    if ((v5 & 1) == 0 && v4 == v6) {
      BOOL v3 = icu::UnicodeString::doEquals((icu::UnicodeString *)v8, (const icu::UnicodeString *)a2, v4);
    }
  }
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
  return v3;
}

void *sub_18C9E1E84()
{
  return &unk_1E91926C9;
}

uint64_t sub_18C9E1E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  *(void *)a1 = &unk_1EDA52BD8;
  *(void *)(a1 + 8) = &unk_1EDA52C58;
  *(void *)(a1 + 16) = &unk_1EDA52C98;
  *(void *)(a1 + 24) = &unk_1EDA47700;
  *(_WORD *)(a1 + 32) = 2;
  *(void *)(a1 + 88) = a6;
  *(_DWORD *)(a1 + 96) = a5;
  *(void *)(a1 + 100) = -1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a3, a4);
  return a1;
}

uint64_t sub_18C9E1F80(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDA52BD8;
  *(void *)(a1 + 8) = &unk_1EDA52C58;
  *(void *)(a1 + 16) = &unk_1EDA52C98;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 24), (UChar **)(a2 + 24));
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

void sub_18C9E2028(void *a1)
{
  *a1 = &unk_1EDA52BD8;
  unsigned int v2 = (icu::UnicodeMatcher *)(a1 + 1);
  a1[1] = &unk_1EDA52C58;
  BOOL v3 = (icu::UnicodeReplacer *)(a1 + 2);
  a1[2] = &unk_1EDA52C98;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 3));
  icu::UnicodeReplacer::~UnicodeReplacer(v3);
  icu::UnicodeMatcher::~UnicodeMatcher(v2);

  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
}

void sub_18C9E20DC(uint64_t a1)
{
}

void sub_18C9E20E4(uint64_t a1)
{
}

void sub_18C9E20EC(void *a1)
{
  sub_18C9E2028(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C9E2114(uint64_t a1)
{
  sub_18C9E2028((void *)(a1 - 8));

  icu::UMemory::operator delete(v1);
}

void sub_18C9E2140(uint64_t a1)
{
  sub_18C9E2028((void *)(a1 - 16));

  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18C9E216C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = icu::UMemory::operator new(a3, (icu::UMemory *)0x70, a2);
  if (result) {
    return (uint64_t *)sub_18C9E1F80((uint64_t)result, a1);
  }
  return result;
}

uint64_t sub_18C9E21A0(uint64_t a1)
{
  if (a1) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_18C9E21B0(uint64_t a1)
{
  if (a1) {
    return a1 + 16;
  }
  else {
    return 0;
  }
}

uint64_t sub_18C9E21C0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  int v10 = *a3;
  int v27 = v10;
  if (v10 <= (int)a4)
  {
    for (unint64_t i = 0; ; ++i)
    {
      unsigned int v13 = *(unsigned __int16 *)(a1 + 32);
      if (*(__int16 *)(a1 + 32) < 0) {
        unsigned int v14 = *(_DWORD *)(a1 + 36);
      }
      else {
        unsigned int v14 = v13 >> 5;
      }
      if ((uint64_t)i >= (int)v14)
      {
        *(_DWORD *)(a1 + 100) = *a3;
        int v26 = v27;
        int v10 = v27;
        goto LABEL_49;
      }
      if (a5 && v27 == a4) {
        break;
      }
      if ((v13 & 0x8000) != 0) {
        unsigned int v15 = *(_DWORD *)(a1 + 36);
      }
      else {
        unsigned int v15 = v13 >> 5;
      }
      if (i >= v15)
      {
        int v17 = 0xFFFF;
      }
      else
      {
        uint64_t v16 = a1 + 34;
        if ((v13 & 2) == 0) {
          uint64_t v16 = *(void *)(a1 + 48);
        }
        int v17 = *(unsigned __int16 *)(v16 + 2 * i);
      }
      uint64_t v18 = sub_18C9A9234(*(void *)(a1 + 88), v17);
      if (v18)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(void *)v18 + 16))(v18, a2, &v27, a4, a5);
        if (result != 2) {
          return result;
        }
      }
      else
      {
        if (v27 >= (int)a4 || v17 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 72))(a2)) {
          return 0;
        }
        ++v27;
      }
    }
    return 1;
  }
  else
  {
    if (*(__int16 *)(a1 + 32) < 0) {
      int v11 = *(_DWORD *)(a1 + 36);
    }
    else {
      int v11 = *(unsigned __int16 *)(a1 + 32) >> 5;
    }
    if (v11 >= 1)
    {
      uint64_t v20 = v11;
      do
      {
        unsigned int v21 = *(unsigned __int16 *)(a1 + 32);
        if (*(__int16 *)(a1 + 32) < 0) {
          unsigned int v22 = *(_DWORD *)(a1 + 36);
        }
        else {
          unsigned int v22 = v21 >> 5;
        }
        if (v22 <= --v20)
        {
          int v24 = 0xFFFF;
        }
        else
        {
          uint64_t v23 = a1 + 34;
          if ((v21 & 2) == 0) {
            uint64_t v23 = *(void *)(a1 + 48);
          }
          int v24 = *(unsigned __int16 *)(v23 + 2 * v20);
        }
        uint64_t v25 = sub_18C9A9234(*(void *)(a1 + 88), v24);
        if (v25)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(void *)v25 + 16))(v25, a2, &v27, a4, a5);
          if (result != 2) {
            return result;
          }
        }
        else
        {
          if (v27 <= (int)a4 || v24 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 72))(a2)) {
            return 0;
          }
          --v27;
        }
      }
      while ((unint64_t)(v20 + 1) > 1);
      int v10 = v27;
    }
    if ((*(_DWORD *)(a1 + 100) & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 100) = v10 + 1;
      int v26 = *a3 + 1;
LABEL_49:
      *(_DWORD *)(a1 + 104) = v26;
    }
    *a3 = v10;
    return 2;
  }
}

uint64_t sub_18C9E247C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  return sub_18C9E21C0(a1 - 8, a2, a3, a4, a5);
}

icu::ICU_Utility *sub_18C9E2484(uint64_t a1, icu::ICU_Utility *this, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *((unsigned __int16 *)this + 4);
  if (v9)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v9 & 0x8000u) == 0) {
      unsigned int v10 = v9 >> 5;
    }
    else {
      unsigned int v10 = *((_DWORD *)this + 3);
    }
    if (v10) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v32 = 0;
  long long v31 = 0u;
  uint64_t v27 = 0;
  long long v28 = &unk_1EDA47700;
  LOWORD(v29) = 2;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v23 = &unk_1EDA47700;
  LOWORD(v24) = 2;
  if (*(int *)(a1 + 96) >= 1)
  {
    __int16 v22 = 40;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v22, 0, 1);
  }
  unint64_t v11 = 0;
  while ((*(__int16 *)(a1 + 32) & 0x80000000) == 0)
  {
    if (v11 >= (unint64_t)*(unsigned __int16 *)(a1 + 32) >> 5) {
      goto LABEL_25;
    }
    unint64_t v12 = (unint64_t)*(unsigned __int16 *)(a1 + 32) >> 5;
LABEL_16:
    if (v12 <= v11)
    {
      uint64_t v14 = 0xFFFFLL;
    }
    else
    {
      uint64_t v13 = a1 + 34;
      if ((*(_WORD *)(a1 + 32) & 2) == 0) {
        uint64_t v13 = *(void *)(a1 + 48);
      }
      uint64_t v14 = *(unsigned __int16 *)(v13 + 2 * v11);
    }
    uint64_t v15 = sub_18C9A9234(*(void *)(a1 + 88), v14);
    if (v15)
    {
      int v17 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v15 + 24))(v15, &v28, a3);
      icu::ICU_Utility::appendToRule(this, v17, (const icu::UnicodeString *)1, a3, (icu::UnicodeString *)&v23, v18);
    }
    else
    {
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)v14, 0, a3, (icu::UnicodeString *)&v23, v16);
    }
    ++v11;
  }
  if ((uint64_t)v11 < *(int *)(a1 + 36))
  {
    unint64_t v12 = *(unsigned int *)(a1 + 36);
    goto LABEL_16;
  }
LABEL_25:
  if (*(int *)(a1 + 96) > 0)
  {
    __int16 v22 = 41;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v22, 0, 1);
  }
  icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0xFFFFFFFFLL, 1, a3, (icu::UnicodeString *)&v23, a6);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v23);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v28);
  return this;
}

icu::ICU_Utility *sub_18C9E26D4(uint64_t a1, icu::ICU_Utility *a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  return sub_18C9E2484(a1 - 8, a2, a3, a4, a5, a6);
}

uint64_t sub_18C9E26DC(uint64_t a1, int a2)
{
  if ((*(__int16 *)(a1 + 32) & 0x80000000) == 0)
  {
    int v4 = (uint64_t *)(*(unsigned __int16 *)(a1 + 32) >> 5);
    if (v4) {
      goto LABEL_3;
    }
    return 1;
  }
  int v4 = (uint64_t *)*(unsigned int *)(a1 + 36);
  if (!v4) {
    return 1;
  }
LABEL_3:
  int v5 = icu::UnicodeString::char32At(v4, (icu::UnicodeString *)(a1 + 24), 0);
  unsigned __int8 v6 = v5;
  uint64_t v7 = sub_18C9A9234(*(void *)(a1 + 88), v5);
  if (!v7) {
    return a2 == v6;
  }
  unint64_t v8 = *(uint64_t (**)(void))(*(void *)v7 + 32);

  return v8();
}

uint64_t sub_18C9E2798(uint64_t a1, int a2)
{
  return sub_18C9E26DC(a1 - 8, a2);
}

icu::UnicodeSet *sub_18C9E27A0(icu::UnicodeSet *result, icu::UnicodeSet *a2)
{
  BOOL v3 = result;
  int v4 = 0;
  int v5 = (icu::UnicodeSet *)((char *)result + 24);
  while (1)
  {
    unsigned __int8 v6 = *((__int16 *)v3 + 16) < 0
       ? (uint64_t *)*((unsigned int *)v3 + 9)
       : (uint64_t *)(*((unsigned __int16 *)v3 + 16) >> 5);
    if (v4 >= (int)v6) {
      break;
    }
    unsigned int v7 = icu::UnicodeString::char32At(v6, v5, v4);
    uint64_t v8 = sub_18C9A9234(*((void *)v3 + 11), v7);
    if (v8) {
      uint64_t result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t, icu::UnicodeSet *))(*(void *)v8 + 40))(v8, a2);
    }
    else {
      uint64_t result = icu::UnicodeSet::add(a2, v7);
    }
    if (v7 < 0x10000) {
      int v9 = 1;
    }
    else {
      int v9 = 2;
    }
    v4 += v9;
  }
  return result;
}

icu::UnicodeSet *sub_18C9E2868(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_18C9E27A0((icu::UnicodeSet *)(a1 - 8), a2);
}

uint64_t sub_18C9E2870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v7 = *(_DWORD *)(a1 + 100);
  if (v7 < 0 || v7 == *(_DWORD *)(a1 + 104))
  {
    uint64_t v9 = 0;
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
    uint64_t v9 = (*(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 100));
  }
  unint64_t v11 = &unk_1EDA47700;
  __int16 v12 = 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 32))(a2, a3, a4, &v11);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v11);
  return v9;
}

uint64_t sub_18C9E2990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18C9E2870(a1 - 16, a2, a3, a4);
}

icu::UnicodeString *sub_18C9E2998(uint64_t a1, icu::UnicodeString *this)
{
  unsigned int v4 = *((unsigned __int16 *)this + 4);
  if (v4)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v4 & 0x8000u) == 0) {
      unsigned int v5 = v4 >> 5;
    }
    else {
      unsigned int v5 = *((_DWORD *)this + 3);
    }
    if (v5) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }
  __int16 v7 = 36;
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v7, 0, 1);
  icu::ICU_Utility::appendNumber(this, (icu::UnicodeString *)*(unsigned int *)(a1 + 96), 0xAu, 1);
  return this;
}

icu::UnicodeString *sub_18C9E2A2C(uint64_t a1, icu::UnicodeString *a2)
{
  return sub_18C9E2998(a1 - 16, a2);
}

double sub_18C9E2A38(uint64_t a1)
{
  double result = NAN;
  *(void *)(a1 + 100) = -1;
  return result;
}

void *sub_18C9E2A4C(void *result, uint64_t a2)
{
  unsigned int v2 = result;
  int v3 = 0;
  result[11] = a2;
  unsigned int v4 = (icu::UnicodeString *)(result + 3);
  while (1)
  {
    unsigned int v5 = (__int16)v2[4] < 0 ? (uint64_t *)*((unsigned int *)v2 + 9) : (uint64_t *)(*((unsigned __int16 *)v2 + 16) >> 5);
    if (v3 >= (int)v5) {
      break;
    }
    unsigned int v6 = icu::UnicodeString::char32At(v5, v4, v3);
    double result = (void *)sub_18C9A9208(v2[11], v6);
    if (result) {
      double result = (void *)(*(uint64_t (**)(void *, void))(*result + 48))(result, v2[11]);
    }
    if (v6 < 0x10000) {
      int v7 = 1;
    }
    else {
      int v7 = 2;
    }
    v3 += v7;
  }
  return result;
}

void *sub_18C9E2B10()
{
  return &unk_1E91926CA;
}

uint64_t sub_18C9E2B1C(uint64_t a1, UChar **a2, int a3, uint64_t a4)
{
  *(void *)a1 = &unk_1EDA52D18;
  *(void *)(a1 + 8) = &unk_1EDA52D78;
  *(void *)(a1 + 16) = &unk_1EDA47700;
  *(_WORD *)(a1 + 24) = 2;
  icu::UnicodeString::operator=((UChar **)(a1 + 16), a2);
  *(_DWORD *)(a1 + 80) = a3;
  *(_WORD *)(a1 + 84) = 257;
  *(void *)(a1 + 88) = a4;
  return a1;
}

uint64_t sub_18C9E2BC8(uint64_t a1, UChar **a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EDA52D18;
  *(void *)(a1 + 8) = &unk_1EDA52D78;
  *(void *)(a1 + 16) = &unk_1EDA47700;
  *(_WORD *)(a1 + 24) = 2;
  icu::UnicodeString::operator=((UChar **)(a1 + 16), a2);
  *(_DWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 84) = 256;
  *(void *)(a1 + 88) = a3;
  return a1;
}

uint64_t sub_18C9E2C68(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDA52D18;
  *(void *)(a1 + 8) = &unk_1EDA52D78;
  *(void *)(a1 + 16) = &unk_1EDA47700;
  *(_WORD *)(a1 + 24) = 2;
  icu::UnicodeString::operator=((UChar **)(a1 + 16), (UChar **)(a2 + 16));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

void sub_18C9E2D14(void *a1)
{
  *a1 = &unk_1EDA52D18;
  a1[1] = &unk_1EDA52D78;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 2));

  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
}

void sub_18C9E2D8C(void *a1)
{
  int v1 = (icu::UnicodeFunctor *)(a1 - 1);
  *(a1 - 1) = &unk_1EDA52D18;
  *a1 = &unk_1EDA52D78;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));

  icu::UnicodeFunctor::~UnicodeFunctor(v1);
}

void sub_18C9E2DFC(void *a1)
{
  *a1 = &unk_1EDA52D18;
  a1[1] = &unk_1EDA52D78;
  icu::UnicodeString::~UnicodeString(a1 + 1, (icu::UnicodeString *)(a1 + 2));
  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);

  icu::UMemory::operator delete(v2);
}

void sub_18C9E2E78(uint64_t a1)
{
}

uint64_t *sub_18C9E2E80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double result = icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result) {
    return (uint64_t *)sub_18C9E2C68((uint64_t)result, a1);
  }
  return result;
}

uint64_t sub_18C9E2EB4(uint64_t a1)
{
  if (a1) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_18C9E2EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5 = a3;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 85))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3, a4, a1 + 16);
    if (*(__int16 *)(a1 + 24) < 0) {
      uint64_t v10 = *(unsigned int *)(a1 + 28);
    }
    else {
      uint64_t v10 = *(unsigned __int16 *)(a1 + 24) >> 5;
    }
    int v13 = *(_DWORD *)(a1 + 80);
    goto LABEL_45;
  }
  int v41 = a4;
  long long v46 = 0u;
  uint64_t v49 = 0;
  long long v48 = 0u;
  long long v47 = 0u;
  uint64_t v45 = &unk_1EDA47700;
  LOWORD(v46) = 2;
  *(unsigned char *)(a1 + 85) = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  unsigned int v42 = v5;
  if ((int)v5 < 1)
  {
    memset(v44, 0, sizeof(v44));
    icu::UnicodeString::UnicodeString((uint64_t)v44, 0xFFFF);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(void *)a2 + 32))(a2, v8, v8, v44);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v44);
    int v9 = 1;
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 80))(a2, (v5 - 1)) < 0x10000) {
      int v9 = 1;
    }
    else {
      int v9 = 2;
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, (v5 - v9), v5, v8);
  }
  int v12 = 0;
  int v13 = 0;
  int v40 = v8;
  uint64_t v14 = (v9 + v8);
  uint64_t v15 = v14;
  while (1)
  {
    int v16 = *(__int16 *)(a1 + 24) < 0 ? *(_DWORD *)(a1 + 28) : *(unsigned __int16 *)(a1 + 24) >> 5;
    if (v12 >= v16) {
      break;
    }
    int v17 = (uint64_t *)*(unsigned int *)(a1 + 80);
    if (v12 == v17) {
      int v13 = v15 - v14;
    }
    unsigned int v18 = icu::UnicodeString::char32At(v17, (icu::UnicodeString *)(a1 + 16), v12);
    uint64_t v19 = sub_18C9A9284(*(void *)(a1 + 88), v18);
    if (!v19)
    {
      icu::UnicodeString::append((uint64_t)&v45, v18);
      goto LABEL_30;
    }
    uint64_t v20 = v19;
    *(unsigned char *)(a1 + 85) = 1;
    int v21 = (unsigned __int16)v46 >> 5;
    if ((v46 & 0x8000u) != 0) {
      int v21 = DWORD1(v46);
    }
    if (v21 >= 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 32))(a2, v15, v15, &v45);
      if ((__int16)v46 < 0)
      {
        int v22 = DWORD1(v46);
        uint64_t v15 = (DWORD1(v46) + v15);
        if ((v46 & 1) == 0) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v15 = v15 + ((unsigned __int16)v46 >> 5);
        if ((v46 & 1) == 0)
        {
          int v22 = (unsigned __int16)v46 >> 5;
LABEL_26:
          if (v22)
          {
            LOBYTE(v46) = v46 & 0x1F;
            LOWORD(v46) = v46;
          }
          goto LABEL_29;
        }
      }
      icu::UnicodeString::unBogus((uint64_t)&v45);
    }
LABEL_29:
    uint64_t v15 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*(void *)v20 + 16))(v20, a2, v15, v15, a5)+ v15;
LABEL_30:
    if (v18 < 0x10000) {
      int v23 = 1;
    }
    else {
      int v23 = 2;
    }
    v12 += v23;
  }
  int v24 = (unsigned __int16)v46 >> 5;
  if ((v46 & 0x8000u) != 0) {
    int v24 = DWORD1(v46);
  }
  if (v24 >= 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 32))(a2, v15, v15, &v45);
    int v25 = (unsigned __int16)v46 >> 5;
    if ((v46 & 0x8000u) != 0) {
      int v25 = DWORD1(v46);
    }
    uint64_t v15 = (v25 + v15);
  }
  uint64_t v10 = (v15 - v14);
  if (v12 == *(_DWORD *)(a1 + 80)) {
    int v13 = v15 - v14;
  }
  LODWORD(v5) = v42;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 40))(a2, v14, v15, v42);
  *(void *)&v44[0] = &unk_1EDA47700;
  WORD4(v44[0]) = 2;
  (*(void (**)(uint64_t, void, void, _OWORD *))(*(void *)a2 + 32))(a2, (v10 + v40), (v10 + v15), v44);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v44);
  *(void *)&v44[0] = &unk_1EDA47700;
  WORD4(v44[0]) = 2;
  (*(void (**)(uint64_t, void, void, _OWORD *))(*(void *)a2 + 32))(a2, v10 + v42, (v10 + v41), v44);
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v44);
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v45);
LABEL_45:
  if (*(unsigned char *)(a1 + 84))
  {
    int v29 = *(_DWORD *)(a1 + 80);
    if (v29 < 0)
    {
      if ((int)v5 >= 1)
      {
        int v32 = -v29;
        do
        {
          if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 80))(a2, (v5 - 1)) >= 0x10000) {
            int v33 = -2;
          }
          else {
            int v33 = -1;
          }
          LODWORD(v5) = v33 + v5;
          --v32;
        }
        while (v32 && (int)v5 > 0);
        int v29 = -v32;
      }
      int v34 = v29 + v5;
    }
    else if (*(__int16 *)(a1 + 24) < 0)
    {
      int v31 = *(_DWORD *)(a1 + 28);
      if (v29 <= v31) {
        goto LABEL_69;
      }
LABEL_60:
      uint64_t v35 = (v10 + v5);
      int v36 = v29 - v31;
      if (v29 - v31 >= 1)
      {
        while ((int)v35 < (*(int (**)(uint64_t))(*(void *)a2 + 64))(a2))
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v35) < 0x10000) {
            int v37 = 1;
          }
          else {
            int v37 = 2;
          }
          uint64_t v35 = (v37 + v35);
          BOOL v38 = __OFSUB__(v36--, 1);
          if ((v36 < 0) ^ v38 | (v36 == 0))
          {
            int v36 = 0;
            break;
          }
        }
      }
      int v34 = v36 + v35;
    }
    else
    {
      unsigned int v30 = *(unsigned __int16 *)(a1 + 24);
      if (v29 > v30 >> 5)
      {
        int v31 = v30 >> 5;
        goto LABEL_60;
      }
LABEL_69:
      int v34 = v13 + v5;
    }
    *a5 = v34;
  }
  return v10;
}

uint64_t sub_18C9E350C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  return sub_18C9E2EC4(a1 - 8, a2, a3, a4, a5);
}

icu::ICU_Utility *sub_18C9E3514(uint64_t a1, icu::ICU_Utility *this, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *((unsigned __int16 *)this + 4);
  if (v9)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v9 & 0x8000u) == 0) {
      unsigned int v10 = v9 >> 5;
    }
    else {
      unsigned int v10 = *((_DWORD *)this + 3);
    }
    if (v10) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  uint64_t v35 = &unk_1EDA47700;
  LOWORD(v36) = 2;
  unsigned int v11 = *(_DWORD *)(a1 + 80);
  if (*(unsigned char *)(a1 + 84) && (v11 & 0x80000000) != 0)
  {
    do
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x40, 1, a3, (icu::UnicodeString *)&v35, a6);
    while (!__CFADD__(v11++, 1));
    unsigned int v11 = 1;
  }
  unint64_t v13 = 0;
  uint64_t v14 = v11;
  while (1)
  {
    int v15 = *(__int16 *)(a1 + 24);
    unsigned int v16 = *(unsigned __int16 *)(a1 + 24);
    int v17 = v15 < 0 ? *(_DWORD *)(a1 + 28) : v16 >> 5;
    if ((uint64_t)v13 >= v17) {
      break;
    }
    if (*(unsigned char *)(a1 + 84) && v14 == v13)
    {
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7C, 1, a3, (icu::UnicodeString *)&v35, a6);
      LOWORD(v15) = *(_WORD *)(a1 + 24);
    }
    if ((v15 & 0x8000) != 0) {
      unsigned int v18 = *(_DWORD *)(a1 + 28);
    }
    else {
      unsigned int v18 = (unsigned __int16)v15 >> 5;
    }
    if (v13 >= v18)
    {
      uint64_t v20 = 0xFFFFLL;
    }
    else
    {
      uint64_t v19 = a1 + 26;
      if ((v15 & 2) == 0) {
        uint64_t v19 = *(void *)(a1 + 40);
      }
      uint64_t v20 = *(unsigned __int16 *)(v19 + 2 * v13);
    }
    uint64_t v21 = sub_18C9A9284(*(void *)(a1 + 88), v20);
    if (v21)
    {
      uint64_t v34 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      unsigned int v30 = &unk_1EDA47700;
      LOWORD(v31) = 2;
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v21 + 24))(v21, &v30, a3);
      __int16 v29 = 32;
      icu::UnicodeString::doReplace((uint64_t)&v30, 0, 0, (uint64_t)&v29, 0, 1);
      __int16 v29 = 32;
      icu::UnicodeString::doAppend((uint64_t)&v30, (uint64_t)&v29, 0, 1);
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)&v30, (const icu::UnicodeString *)1, a3, (icu::UnicodeString *)&v35, v23);
      icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v30);
    }
    else
    {
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)v20, 0, a3, (icu::UnicodeString *)&v35, v22);
    }
    ++v13;
  }
  if (*(unsigned char *)(a1 + 84))
  {
    if (v15 < 0)
    {
      int v25 = *(_DWORD *)(a1 + 28);
      if ((int)v14 <= v25) {
        goto LABEL_42;
      }
    }
    else
    {
      if ((int)v14 <= (int)(v16 >> 5)) {
        goto LABEL_42;
      }
      int v25 = v16 >> 5;
    }
    if ((int)v14 - v25 >= 1)
    {
      unsigned int v26 = v14 - v25 + 1;
      do
      {
        icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x40, 1, a3, (icu::UnicodeString *)&v35, a6);
        --v26;
      }
      while (v26 > 1);
    }
    icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7C, 1, a3, (icu::UnicodeString *)&v35, a6);
  }
LABEL_42:
  icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0xFFFFFFFFLL, 1, a3, (icu::UnicodeString *)&v35, a6);
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v35);
  return this;
}

icu::ICU_Utility *sub_18C9E3848(uint64_t a1, icu::ICU_Utility *a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  return sub_18C9E3514(a1 - 8, a2, a3, a4, a5, a6);
}

icu::UnicodeSet *sub_18C9E3850(icu::UnicodeSet *result, icu::UnicodeSet *a2)
{
  int v3 = result;
  int v4 = 0;
  uint64_t v5 = (icu::UnicodeSet *)((char *)result + 16);
  while (1)
  {
    unsigned int v6 = *((__int16 *)v3 + 12) < 0
       ? (uint64_t *)*((unsigned int *)v3 + 7)
       : (uint64_t *)(*((unsigned __int16 *)v3 + 12) >> 5);
    if (v4 >= (int)v6) {
      break;
    }
    unsigned int v7 = icu::UnicodeString::char32At(v6, v5, v4);
    uint64_t v8 = sub_18C9A9284(*((void *)v3 + 11), v7);
    if (v8) {
      double result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t, icu::UnicodeSet *))(*(void *)v8 + 32))(v8, a2);
    }
    else {
      double result = icu::UnicodeSet::add(a2, v7);
    }
    if (v7 < 0x10000) {
      int v9 = 1;
    }
    else {
      int v9 = 2;
    }
    v4 += v9;
  }
  return result;
}

icu::UnicodeSet *sub_18C9E3918(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_18C9E3850((icu::UnicodeSet *)(a1 - 8), a2);
}

void *sub_18C9E3920(void *result, uint64_t a2)
{
  unsigned int v2 = result;
  int v3 = 0;
  result[11] = a2;
  int v4 = (icu::UnicodeString *)(result + 2);
  while (1)
  {
    uint64_t v5 = (__int16)v2[3] < 0 ? (uint64_t *)*((unsigned int *)v2 + 7) : (uint64_t *)(*((unsigned __int16 *)v2 + 12) >> 5);
    if (v3 >= (int)v5) {
      break;
    }
    unsigned int v6 = icu::UnicodeString::char32At(v5, v4, v3);
    double result = (void *)sub_18C9A9208(v2[11], v6);
    if (result) {
      double result = (void *)(*(uint64_t (**)(void *, void))(*result + 48))(result, v2[11]);
    }
    if (v6 < 0x10000) {
      int v7 = 1;
    }
    else {
      int v7 = 2;
    }
    v3 += v7;
  }
  return result;
}

void *icu::StringSearch::getStaticClassID(icu::StringSearch *this)
{
  return &unk_1E91926CB;
}

void *icu::StringSearch::getDynamicClassID(icu::StringSearch *this)
{
  return &unk_1E91926CB;
}

void **icu::StringSearch::StringSearch(void **this, UChar **a2, UChar **a3, char **a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  unsigned int v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(void *)unsigned int v11 = &unk_1EDA52E30;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (*(int *)a6 >= 1)
  {
    this[19] = 0;
    return this;
  }
  unsigned int v12 = *((unsigned __int16 *)this + 48);
  if ((v12 & 0x11) != 0)
  {
    unint64_t v13 = 0;
    if ((v12 & 0x8000) != 0) {
      goto LABEL_10;
    }
LABEL_8:
    int32_t v14 = v12 >> 5;
    goto LABEL_11;
  }
  if ((v12 & 2) != 0)
  {
    unint64_t v13 = (const UChar *)this + 49;
    if ((v12 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v13 = (const UChar *)this[14];
    if ((v12 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }
LABEL_10:
  int32_t v14 = *((_DWORD *)this + 25);
LABEL_11:
  unsigned int v15 = *((unsigned __int16 *)this + 16);
  if ((v15 & 0x11) != 0)
  {
    unsigned int v16 = 0;
    if ((v15 & 0x8000) != 0) {
      goto LABEL_18;
    }
LABEL_16:
    int32_t v17 = v15 >> 5;
    goto LABEL_19;
  }
  if ((v15 & 2) != 0)
  {
    unsigned int v16 = (const UChar *)this + 17;
    if ((v15 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v16 = (const UChar *)this[6];
    if ((v15 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }
LABEL_18:
  int32_t v17 = *((_DWORD *)this + 9);
LABEL_19:
  this[19] = usearch_open(v13, v14, v16, v17, a4[5], (uint64_t)a5, (const icu::Locale *)a6);
  uprv_free(this[1]);
  this[1] = 0;
  if (*(int *)a6 <= 0) {
    this[1] = *(void **)this[19];
  }
  return this;
}

void **icu::StringSearch::StringSearch(void **this, UChar **a2, UChar **a3, icu::RuleBasedCollator *a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  unsigned int v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(void *)unsigned int v11 = &unk_1EDA52E30;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (*(int *)a6 >= 1) {
    goto LABEL_2;
  }
  if (!a4)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_2:
    this[19] = 0;
    return this;
  }
  unsigned int v13 = *((unsigned __int16 *)this + 48);
  if ((v13 & 0x11) != 0)
  {
    int32_t v14 = 0;
    if ((v13 & 0x8000) != 0) {
      goto LABEL_13;
    }
LABEL_11:
    int32_t v15 = v13 >> 5;
    goto LABEL_14;
  }
  if ((v13 & 2) != 0)
  {
    int32_t v14 = (const UChar *)this + 49;
    if ((v13 & 0x8000) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    int32_t v14 = (const UChar *)this[14];
    if ((v13 & 0x8000) == 0) {
      goto LABEL_11;
    }
  }
LABEL_13:
  int32_t v15 = *((_DWORD *)this + 25);
LABEL_14:
  unsigned int v16 = *((unsigned __int16 *)this + 16);
  if ((v16 & 0x11) != 0)
  {
    int32_t v17 = 0;
    if ((v16 & 0x8000) != 0) {
      goto LABEL_21;
    }
LABEL_19:
    int32_t v18 = v16 >> 5;
    goto LABEL_22;
  }
  if ((v16 & 2) != 0)
  {
    int32_t v17 = (const UChar *)this + 17;
    if ((v16 & 0x8000) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    int32_t v17 = (const UChar *)this[6];
    if ((v16 & 0x8000) == 0) {
      goto LABEL_19;
    }
  }
LABEL_21:
  int32_t v18 = *((_DWORD *)this + 9);
LABEL_22:
  this[19] = usearch_openFromCollator(v14, v15, v17, v18, a4, (uint64_t)a5, (int *)a6);
  uprv_free(this[1]);
  this[1] = 0;
  if (*(int *)a6 <= 0) {
    this[1] = *(void **)this[19];
  }
  return this;
}

void **icu::StringSearch::StringSearch(void **this, UChar **a2, icu::CharacterIterator *a3, char **a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  unsigned int v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(void *)unsigned int v11 = &unk_1EDA52E30;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (*(int *)a6 >= 1)
  {
    this[19] = 0;
    return this;
  }
  unsigned int v12 = *((unsigned __int16 *)this + 48);
  if ((v12 & 0x11) != 0)
  {
    unsigned int v13 = 0;
    if ((v12 & 0x8000) != 0) {
      goto LABEL_10;
    }
LABEL_8:
    int32_t v14 = v12 >> 5;
    goto LABEL_11;
  }
  if ((v12 & 2) != 0)
  {
    unsigned int v13 = (const UChar *)this + 49;
    if ((v12 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v13 = (const UChar *)this[14];
    if ((v12 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }
LABEL_10:
  int32_t v14 = *((_DWORD *)this + 25);
LABEL_11:
  unsigned int v15 = *((unsigned __int16 *)this + 16);
  if ((v15 & 0x11) != 0)
  {
    unsigned int v16 = 0;
    if ((v15 & 0x8000) != 0) {
      goto LABEL_18;
    }
LABEL_16:
    int32_t v17 = v15 >> 5;
    goto LABEL_19;
  }
  if ((v15 & 2) != 0)
  {
    unsigned int v16 = (const UChar *)this + 17;
    if ((v15 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v16 = (const UChar *)this[6];
    if ((v15 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }
LABEL_18:
  int32_t v17 = *((_DWORD *)this + 9);
LABEL_19:
  this[19] = usearch_open(v13, v14, v16, v17, a4[5], (uint64_t)a5, (const icu::Locale *)a6);
  uprv_free(this[1]);
  this[1] = 0;
  if (*(int *)a6 <= 0) {
    this[1] = *(void **)this[19];
  }
  return this;
}

void **icu::StringSearch::StringSearch(void **this, UChar **a2, icu::CharacterIterator *a3, icu::RuleBasedCollator *a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  unsigned int v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(void *)unsigned int v11 = &unk_1EDA52E30;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (*(int *)a6 >= 1) {
    goto LABEL_2;
  }
  if (!a4)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_2:
    this[19] = 0;
    return this;
  }
  unsigned int v13 = *((unsigned __int16 *)this + 48);
  if ((v13 & 0x11) != 0)
  {
    int32_t v14 = 0;
    if ((v13 & 0x8000) != 0) {
      goto LABEL_13;
    }
LABEL_11:
    int32_t v15 = v13 >> 5;
    goto LABEL_14;
  }
  if ((v13 & 2) != 0)
  {
    int32_t v14 = (const UChar *)this + 49;
    if ((v13 & 0x8000) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    int32_t v14 = (const UChar *)this[14];
    if ((v13 & 0x8000) == 0) {
      goto LABEL_11;
    }
  }
LABEL_13:
  int32_t v15 = *((_DWORD *)this + 25);
LABEL_14:
  unsigned int v16 = *((unsigned __int16 *)this + 16);
  if ((v16 & 0x11) != 0)
  {
    int32_t v17 = 0;
    if ((v16 & 0x8000) != 0) {
      goto LABEL_21;
    }
LABEL_19:
    int32_t v18 = v16 >> 5;
    goto LABEL_22;
  }
  if ((v16 & 2) != 0)
  {
    int32_t v17 = (const UChar *)this + 17;
    if ((v16 & 0x8000) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    int32_t v17 = (const UChar *)this[6];
    if ((v16 & 0x8000) == 0) {
      goto LABEL_19;
    }
  }
LABEL_21:
  int32_t v18 = *((_DWORD *)this + 9);
LABEL_22:
  this[19] = usearch_openFromCollator(v14, v15, v17, v18, a4, (uint64_t)a5, (int *)a6);
  uprv_free(this[1]);
  this[1] = 0;
  if (*(int *)a6 <= 0) {
    this[1] = *(void **)this[19];
  }
  return this;
}

void **icu::StringSearch::StringSearch(void **this, const icu::StringSearch *a2)
{
  int v4 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, (UChar **)a2 + 3, *((icu::BreakIterator **)a2 + 2));
  *(void *)int v4 = &unk_1EDA52E30;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v4 + 88), (UChar **)a2 + 11);
  int v14 = 0;
  uprv_free(this[1]);
  this[1] = 0;
  uint64_t v5 = *((void *)a2 + 19);
  if (!v5)
  {
    this[19] = 0;
    return this;
  }
  unsigned int v6 = *((unsigned __int16 *)this + 48);
  if ((v6 & 0x11) != 0)
  {
    int v7 = 0;
    if ((v6 & 0x8000) != 0) {
      goto LABEL_10;
    }
LABEL_8:
    int32_t v8 = v6 >> 5;
    goto LABEL_11;
  }
  if ((v6 & 2) != 0)
  {
    int v7 = (const UChar *)this + 49;
    if ((v6 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    int v7 = (const UChar *)this[14];
    if ((v6 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }
LABEL_10:
  int32_t v8 = *((_DWORD *)this + 25);
LABEL_11:
  unsigned int v9 = *((unsigned __int16 *)this + 16);
  if ((v9 & 0x11) != 0)
  {
    unsigned int v10 = 0;
    if ((v9 & 0x8000) != 0) {
      goto LABEL_18;
    }
LABEL_16:
    int32_t v11 = v9 >> 5;
    goto LABEL_19;
  }
  if ((v9 & 2) != 0)
  {
    unsigned int v10 = (const UChar *)this + 17;
    if ((v9 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v10 = (const UChar *)this[6];
    if ((v9 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }
LABEL_18:
  int32_t v11 = *((_DWORD *)this + 9);
LABEL_19:
  unsigned int v12 = (void **)usearch_openFromCollator(v7, v8, v10, v11, *(const void **)(v5 + 3128), *((void *)a2 + 2), &v14);
  this[19] = v12;
  if (v14 <= 0) {
    this[1] = *v12;
  }
  return this;
}

void icu::StringSearch::~StringSearch(icu::StringSearch *this@<X0>, void *a2@<X8>)
{
  int v3 = (char *)*((void *)this + 19);
  if (v3)
  {
    usearch_close(v3);
    *((void *)this + 1) = 0;
  }
  icu::UnicodeString::~UnicodeString(a2, (icu::StringSearch *)((char *)this + 88));

  icu::SearchIterator::~SearchIterator(this, v4);
}

{
  void *v2;
  uint64_t vars8;

  icu::StringSearch::~StringSearch(this, a2);

  icu::UMemory::operator delete(v2);
}

void **icu::StringSearch::clone@<X0>(icu::StringSearch *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double result = (void **)icu::UMemory::operator new(a3, (icu::UMemory *)0xA0, a2);
  if (result) {
    return icu::StringSearch::StringSearch(result, this);
  }
  return result;
}

uint64_t icu::StringSearch::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  int v12 = 0;
  icu::UnicodeString::operator=((UChar **)(a1 + 24), (UChar **)(a2 + 24));
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  icu::UnicodeString::operator=((UChar **)(a1 + 88), (UChar **)(a2 + 88));
  usearch_close(*(char **)(a1 + 152));
  unsigned int v4 = *(unsigned __int16 *)(a1 + 96);
  if ((v4 & 0x11) != 0)
  {
    uint64_t v5 = 0;
    if ((v4 & 0x8000) != 0) {
      goto LABEL_9;
    }
LABEL_7:
    int32_t v6 = v4 >> 5;
    goto LABEL_10;
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v5 = (const UChar *)(a1 + 98);
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(const UChar **)(a1 + 112);
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
  }
LABEL_9:
  int32_t v6 = *(_DWORD *)(a1 + 100);
LABEL_10:
  unsigned int v7 = *(unsigned __int16 *)(a1 + 32);
  if ((v7 & 0x11) != 0)
  {
    int32_t v8 = 0;
    if ((v7 & 0x8000) != 0) {
      goto LABEL_17;
    }
LABEL_15:
    int32_t v9 = v7 >> 5;
    goto LABEL_18;
  }
  if ((v7 & 2) != 0)
  {
    int32_t v8 = (const UChar *)(a1 + 34);
    if ((v7 & 0x8000) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    int32_t v8 = *(const UChar **)(a1 + 48);
    if ((v7 & 0x8000) == 0) {
      goto LABEL_15;
    }
  }
LABEL_17:
  int32_t v9 = *(_DWORD *)(a1 + 36);
LABEL_18:
  unsigned int v10 = usearch_openFromCollator(v5, v6, v8, v9, *(const void **)(*(void *)(a2 + 152) + 3128), 0, &v12);
  *(void *)(a1 + 152) = v10;
  if (v10) {
    *(void *)(a1 + 8) = *v10;
  }
  return a1;
}

uint64_t icu::StringSearch::operator==(uint64_t a1, const void *a2)
{
  if ((const void *)a1 == a2) {
    return 1;
  }
  uint64_t result = icu::SearchIterator::operator==((void *)a1, (uint64_t)a2);
  if (result)
  {
    if (result)
    {
      uint64_t v5 = result;
      unsigned int v6 = *(unsigned __int16 *)(a1 + 96);
      if (v6)
      {
        if ((*(_WORD *)(result + 96) & 1) == 0) {
          return 0;
        }
        return *(void *)(*(void *)(a1 + 152) + 3128) == *(void *)(*(void *)(v5 + 152) + 3128);
      }
      if ((v6 & 0x8000) != 0) {
        int v7 = *(_DWORD *)(a1 + 100);
      }
      else {
        int v7 = v6 >> 5;
      }
      uint64_t result = 0;
      unsigned int v8 = *(unsigned __int16 *)(v5 + 96);
      if ((v8 & 0x8000u) == 0) {
        unsigned int v9 = v8 >> 5;
      }
      else {
        unsigned int v9 = *(_DWORD *)(v5 + 100);
      }
      if ((v8 & 1) == 0 && v7 == v9)
      {
        uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 88), (const icu::UnicodeString *)(v5 + 88), v7);
        if (result) {
          return *(void *)(*(void *)(a1 + 152) + 3128) == *(void *)(*(void *)(v5 + 152) + 3128);
        }
      }
    }
  }
  return result;
}

double icu::StringSearch::setOffset(uint64_t **this, uint64_t a2, UErrorCode *a3)
{
  return usearch_setOffset(this[19], a2, a3);
}

uint64_t icu::StringSearch::getOffset(icu::StringSearch *this)
{
  return usearch_getOffset(*((void **)this + 19));
}

uint64_t icu::StringSearch::setText(uint64_t this, UChar **a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v5 = this;
    icu::UnicodeString::operator=((UChar **)(this + 24), a2);
    uint64_t v6 = *(void *)(v5 + 152);
    unsigned int v7 = *((unsigned __int16 *)a2 + 4);
    if ((v7 & 0x11) != 0)
    {
      unsigned int v8 = 0;
    }
    else if ((v7 & 2) != 0)
    {
      unsigned int v8 = (UChar *)a2 + 5;
    }
    else
    {
      unsigned int v8 = a2[3];
    }
    int v9 = (__int16)v7;
    int v10 = v7 >> 5;
    if (v9 >= 0) {
      int v11 = v10;
    }
    else {
      int v11 = *((_DWORD *)a2 + 3);
    }
    return usearch_setText(v6, v8, v11, a3);
  }
  return this;
}

uint64_t icu::StringSearch::setText(uint64_t this, icu::CharacterIterator *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return this;
  }
  uint64_t v4 = this;
  (*(void (**)(icu::CharacterIterator *, uint64_t))(*(void *)a2 + 208))(a2, this + 24);
  uint64_t v5 = *(void *)(v4 + 152);
  unsigned int v6 = *(unsigned __int16 *)(v4 + 32);
  if ((v6 & 0x11) == 0)
  {
    if ((v6 & 2) != 0)
    {
      unsigned int v7 = (UChar *)(v4 + 34);
      if ((v6 & 0x8000) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      unsigned int v7 = *(UChar **)(v4 + 48);
      if ((v6 & 0x8000) == 0) {
        goto LABEL_7;
      }
    }
LABEL_9:
    int v8 = *(_DWORD *)(v4 + 36);
    goto LABEL_10;
  }
  unsigned int v7 = 0;
  if ((v6 & 0x8000) != 0) {
    goto LABEL_9;
  }
LABEL_7:
  int v8 = v6 >> 5;
LABEL_10:

  return usearch_setText(v5, v7, v8, a3);
}

void *icu::StringSearch::getCollator(icu::StringSearch *this)
{
  uint64_t result = *(void **)(*((void *)this + 19) + 3128);
  if (result) {
  return result;
  }
}

uint64_t icu::StringSearch::setCollator(uint64_t this, icu::RuleBasedCollator *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0) {
    return usearch_setCollator(*(void *)(this + 152), a2, (int *)a3);
  }
  return this;
}

uint64_t icu::StringSearch::setPattern(uint64_t this, UChar **a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return this;
  }
  uint64_t v4 = this;
  icu::UnicodeString::operator=((UChar **)(this + 88), a2);
  uint64_t v5 = *(void *)(v4 + 152);
  unsigned int v6 = *(unsigned __int16 *)(v4 + 96);
  if ((v6 & 0x11) == 0)
  {
    if ((v6 & 2) != 0)
    {
      unsigned int v7 = (UChar *)(v4 + 98);
      if ((v6 & 0x8000) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      unsigned int v7 = *(UChar **)(v4 + 112);
      if ((v6 & 0x8000) == 0) {
        goto LABEL_7;
      }
    }
LABEL_9:
    int v8 = *(_DWORD *)(v4 + 100);
    goto LABEL_10;
  }
  unsigned int v7 = 0;
  if ((v6 & 0x8000) != 0) {
    goto LABEL_9;
  }
LABEL_7:
  int v8 = v6 >> 5;
LABEL_10:

  return usearch_setPattern(v5, v7, v8, a3);
}

uint64_t icu::StringSearch::getPattern(icu::StringSearch *this)
{
  return (uint64_t)this + 88;
}

double icu::StringSearch::reset(icu::StringSearch *this)
{
  return usearch_reset(*((void *)this + 19));
}

uint64_t *icu::StringSearch::safeClone@<X0>(icu::StringSearch *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  UErrorCode v8 = U_ZERO_ERROR;
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0xA0, a2);
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    Collator = (icu::RuleBasedCollator *)icu::StringSearch::getCollator(this);
    icu::StringSearch::StringSearch((void **)v5, (UChar **)this + 11, (UChar **)this + 3, Collator, *((icu::BreakIterator **)this + 2), &v8);
    uint64_t Offset = usearch_getOffset(*((void **)this + 19));
    usearch_setOffset(*(uint64_t **)(v5 + 152), Offset, &v8);
    icu::SearchIterator::setMatchStart(v5, *(_DWORD *)(**((void **)this + 19) + 32));
    icu::SearchIterator::setMatchLength(v5, *(_DWORD *)(**((void **)this + 19) + 36));
    if (v8 >= U_ILLEGAL_ARGUMENT_ERROR) {
      return 0;
    }
    else {
      return (uint64_t *)v5;
    }
  }
  return result;
}

uint64_t icu::StringSearch::handleNext(icu::StringSearch *this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *((void *)this + 19);
  uint64_t v7 = *((void *)this + 1);
  if (*(_DWORD *)(v6 + 20))
  {
    if (*(int *)(v7 + 36) <= 0) {
      *(_DWORD *)(v7 + 32) = a2 - 1;
    }
    ucol_setOffset(*(void *)(v6 + 3144), a2, a3);
    sub_18CA23364(*((uint64_t **)this + 19), a3);
    if (*(int *)a3 > 0) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v10 = *((void *)this + 1);
    uint64_t v11 = *(unsigned int *)(v10 + 32);
    if (v11 == -1) {
      uint64_t v11 = *(unsigned int *)(v10 + 8);
    }
    ucol_setOffset(*(void *)(*((void *)this + 19) + 3144), v11, a3);
    return *(unsigned int *)(*((void *)this + 1) + 32);
  }
  else
  {
    int v8 = *(_DWORD *)(v7 + 32);
    if (v8 == -1)
    {
      uint64_t Offset = usearch_getOffset((void *)v6);
      uint64_t v7 = *((void *)this + 1);
      uint64_t v6 = *((void *)this + 19);
    }
    else
    {
      uint64_t Offset = (v8 + 1);
    }
    *(_DWORD *)(v7 + 32) = Offset;
    *(_DWORD *)(v7 + 36) = 0;
    ucol_setOffset(*(void *)(v6 + 3144), Offset, a3);
    uint64_t v12 = *((void *)this + 1);
    uint64_t result = 0xFFFFFFFFLL;
    if (*(_DWORD *)(v12 + 32) == *(_DWORD *)(v12 + 8)) {
      *(_DWORD *)(v12 + 32) = -1;
    }
  }
  return result;
}

uint64_t icu::StringSearch::handlePrev(icu::StringSearch *this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *((void *)this + 19);
  if (*(_DWORD *)(v6 + 20))
  {
    ucol_setOffset(*(void *)(v6 + 3144), a2, a3);
    sub_18CA23430(*((void *)this + 19), a3);
    if (*(int *)a3 > 0) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_12;
  }
  uint64_t v7 = *((void *)this + 1);
  int Offset = *(_DWORD *)(v7 + 32);
  if (Offset == -1)
  {
    int Offset = usearch_getOffset((void *)v6);
    uint64_t v7 = *((void *)this + 1);
  }
  *(_DWORD *)(v7 + 32) = Offset;
  if (!Offset)
  {
    icu::SearchIterator::setMatchNotFound(this);
LABEL_12:
    uint64_t v10 = *((void *)this + 1);
    return *(unsigned int *)(v10 + 32);
  }
  uint64_t v9 = (Offset - 1);
  *(_DWORD *)(v7 + 32) = v9;
  ucol_setOffset(*(void *)(*((void *)this + 19) + 3144), v9, a3);
  uint64_t v10 = *((void *)this + 1);
  *(_DWORD *)(v10 + 36) = 0;
  return *(unsigned int *)(v10 + 32);
}

void *icu::TaiwanCalendar::getStaticClassID(icu::TaiwanCalendar *this)
{
  return &unk_1E91926CC;
}

void *sub_18C9E47F8()
{
  return &unk_1E91926CC;
}

icu::GregorianCalendar *sub_18C9E4804(icu::GregorianCalendar *a1, char **a2, UErrorCode *a3)
{
  uint64_t v5 = icu::GregorianCalendar::GregorianCalendar(a1, a2, a3);
  *(void *)uint64_t v5 = &unk_1EDA52EC8;
  icu::Calendar::getNow(v5);
  icu::Calendar::setTimeInMillis((uint64_t)a1, v6, a3);
  return a1;
}

void sub_18C9E4864(icu::GregorianCalendar *a1)
{
  icu::GregorianCalendar::~GregorianCalendar(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C9E488C(const icu::GregorianCalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::GregorianCalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x290, a2);
  if (v4)
  {
    icu::GregorianCalendar::GregorianCalendar(v4, a1);
    void *v5 = &unk_1EDA52EC8;
  }
}

const char *sub_18C9E48DC()
{
  return "roc";
}

uint64_t sub_18C9E48E8(_DWORD *a1)
{
  if (icu::Calendar::newerField((uint64_t)a1, 0x13u, 1u) == 19
    && icu::Calendar::newerField((uint64_t)a1, 0x13u, 0) == 19)
  {
    if ((int)a1[52] >= 1) {
      return a1[22];
    }
    return 1970;
  }
  if ((int)a1[33] < 1) {
    goto LABEL_8;
  }
  int v3 = a1[3];
  if (v3)
  {
    if (v3 != 1) {
      return 1970;
    }
LABEL_8:
    if ((int)a1[34] < 1) {
      return 1912;
    }
    else {
      return (a1[4] + 1911);
    }
  }
  if ((int)a1[34] < 1) {
    return 1911;
  }
  else {
    return (1912 - a1[4]);
  }
}

double sub_18C9E49AC(uint64_t a1, int a2, UErrorCode *a3)
{
  icu::GregorianCalendar::handleComputeFields((_DWORD *)a1, a2, a3);
  int v4 = *(_DWORD *)(a1 + 88);
  int v5 = 1912 - v4;
  BOOL v6 = __OFSUB__(v4, 1911);
  int v7 = v4 - 1911;
  if ((v7 < 0) ^ v6 | (v7 == 0)) {
    int v8 = 0;
  }
  else {
    int v8 = 1;
  }
  if ((v7 < 0) ^ v6 | (v7 == 0)) {
    int v7 = v5;
  }
  *(_WORD *)(a1 + 108) = 257;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v7;
  *(void *)&double result = 0x100000001;
  *(void *)(a1 + 132) = 0x100000001;
  return result;
}

uint64_t sub_18C9E49FC(uint64_t a1, int a2, unsigned int a3)
{
  if (a2) {
    return icu::GregorianCalendar::handleGetLimit(a1, a2, a3);
  }
  else {
    return a3 > 1;
  }
}

uint64_t sub_18C9E4A10()
{
  return 1;
}

double sub_18C9E4A18()
{
  if (atomic_load_explicit(dword_1EB20BBB8, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20BBB8))
  {
    sub_18C9E4A68();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20BBB8);
  }
  return *(double *)&qword_1EB20A770;
}

void sub_18C9E4A68()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  UErrorCode v3 = U_ZERO_ERROR;
  bzero(v5, 0x290uLL);
  icu::Locale::Locale(v0, (icu::Locale *)v4, "@calendar=roc", 0, 0, 0);
  sub_18C9E4804((icu::GregorianCalendar *)v5, v4, &v3);
  icu::Locale::~Locale((icu::Locale *)v4);
  if (v3 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v1);
    icu::Calendar::setTimeInMillis((uint64_t)v5, v2, &v3);
    icu::Calendar::add(v5, 1u, -80, &v3);
    qword_1EB20A770 = icu::Calendar::getTimeInMillis((icu::Calendar *)v5, &v3);
    dword_1EB20A778 = icu::Calendar::get(v5, 1u, &v3);
  }
  icu::GregorianCalendar::~GregorianCalendar((icu::GregorianCalendar *)v5);
}

uint64_t sub_18C9E4B60()
{
  if (atomic_load_explicit(dword_1EB20BBB8, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20BBB8))
  {
    sub_18C9E4A68();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20BBB8);
  }
  return dword_1EB20A778;
}

uint64_t icu::TimeZone::loadRule(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(v9, 0, sizeof(v9));
  icu::UnicodeString::extract(a2, 0, 63, (char *)v9, 63);
  uint64_t v7 = ures_getByKey(a1, "Rules", a3, a4);
  return ures_getByKey(v7, (const char *)v9, v7, a4);
}

uint64_t *icu::TimeZone::getUnknown(icu::TimeZone *this)
{
  if (atomic_load_explicit(dword_1E919282C, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1E919282C))
  {
    sub_18C9E4CB4();
    icu::umtx_initImplPostInit((unsigned int *)dword_1E919282C);
  }
  return qword_1E91926D0;
}

void *sub_18C9E4CB4()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  sub_18CA0A25C(0x13u, (uint64_t)sub_18C9E562C);
  int v4 = L"GMT";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  icu::SimpleTimeZone::SimpleTimeZone((icu::SimpleTimeZone *)qword_1E9192770, 0, (const icu::UnicodeString *)v5);
  icu::UnicodeString::~UnicodeString(v0, (icu::UnicodeString *)v5);
  UErrorCode v3 = L"Etc/Unknown";
  icu::UnicodeString::UnicodeString(v5, 1, &v3);
  icu::SimpleTimeZone::SimpleTimeZone((icu::SimpleTimeZone *)qword_1E91926D0, 0, (const icu::UnicodeString *)v5);
  double result = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v5);
  byte_1E9192834 = 1;
  return result;
}

uint64_t *icu::TimeZone::getGMT(icu::TimeZone *this)
{
  if (atomic_load_explicit(dword_1E919282C, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1E919282C))
  {
    sub_18C9E4CB4();
    icu::umtx_initImplPostInit((unsigned int *)dword_1E919282C);
  }
  return qword_1E9192770;
}

void *icu::TimeZone::getStaticClassID(icu::TimeZone *this)
{
  return &unk_1E9192810;
}

uint64_t icu::TimeZone::TimeZone(uint64_t this)
{
  *(void *)this = &unk_1EDA530C8;
  *(void *)(this + 8) = &unk_1EDA47700;
  *(_WORD *)(this + 16) = 2;
  return this;
}

icu::TimeZone *icu::TimeZone::TimeZone(icu::TimeZone *this, UChar **a2)
{
  *(void *)this = &unk_1EDA530C8;
  icu::UnicodeString::UnicodeString((icu::TimeZone *)((char *)this + 8), a2);
  return this;
}

{
  *(void *)this = &unk_1EDA530C8;
  icu::UnicodeString::UnicodeString((icu::TimeZone *)((char *)this + 8), a2 + 1);
  return this;
}

void icu::TimeZone::~TimeZone(icu::TimeZone *this)
{
  *(void *)this = &unk_1EDA530C8;
  icu::UnicodeString::~UnicodeString((icu::TimeZone *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

uint64_t icu::TimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
  }
  return a1;
}

BOOL icu::TimeZone::operator==(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 16);
    if (v5)
    {
      return *(_WORD *)(a2 + 16) & 1;
    }
    else
    {
      if ((v5 & 0x8000) != 0) {
        int v6 = *(_DWORD *)(a1 + 20);
      }
      else {
        int v6 = v5 >> 5;
      }
      BOOL result = 0;
      unsigned int v7 = *(unsigned __int16 *)(a2 + 16);
      if ((v7 & 0x8000u) == 0) {
        unsigned int v8 = v7 >> 5;
      }
      else {
        unsigned int v8 = *(_DWORD *)(a2 + 20);
      }
      if ((v7 & 1) == 0 && v6 == v8) {
        return icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)(a2 + 8), v6);
      }
    }
  }
  return result;
}

void *icu::TimeZone::createTimeZone(UChar **this, const icu::UnicodeString *a2)
{
  int v9 = 0;
  BOOL result = sub_18C9E81BC((uint64_t)this, &v9);
  if (!result)
  {
    BOOL result = icu::TimeZone::createCustomTimeZone(this, v4, v5, v6, v7, v8);
    if (!result)
    {
      icu::TimeZone::getUnknown(0);
      return (void *)(*(uint64_t (**)(void))(qword_1E91926D0[0] + 96))();
    }
  }
  return result;
}

icu::SimpleTimeZone *icu::TimeZone::createCustomTimeZone(UChar **this, const icu::UnicodeString *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(void *)int32_t v17 = 0;
  *(void *)int32_t v18 = 0;
  if (!icu::TimeZone::parseCustomID(this, (const icu::UnicodeString *)&v18[1], v18, &v17[1], v17, a6)) {
    return 0;
  }
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v23 = 0;
  long long v22 = 0u;
  uint64_t v19 = &unk_1EDA47700;
  LOWORD(v20) = 2;
  int v8 = v17[1];
  int v7 = v18[0];
  int v9 = v17[0];
  int v10 = v18[1];
  icu::TimeZone::formatCustomID((icu::TimeZone *)v18[0], v17[1], v17[0], v18[1] >> 31, (icu::UnicodeString *)&v19, v6);
  unsigned int v13 = (icu::SimpleTimeZone *)icu::UMemory::operator new(v12, (icu::UMemory *)0xA0, v11);
  int32_t v15 = v13;
  if (v13) {
    icu::SimpleTimeZone::SimpleTimeZone(v13, 1000 * v10 * (v9 + 60 * (v8 + 60 * v7)), (const icu::UnicodeString *)&v19);
  }
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  return v15;
}

uint64_t icu::TimeZone::detectHostTimeZone(icu::TimeZone *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uprv_tzset();
  uprv_tzname_clear_cache();
  int v1 = uprv_tzname(0);
  int v2 = uprv_timezone();
  memset(v17, 0, sizeof(v17));
  icu::UnicodeString::UnicodeString(v17, v1, 0xFFFFFFFFLL, 0);
  if ((SWORD4(v17[0]) & 0x8000u) == 0) {
    int v3 = WORD4(v17[0]) >> 5;
  }
  else {
    int v3 = HIDWORD(v17[0]);
  }
  if (!v3)
  {
    int32_t v15 = L"Etc/Unknown";
    icu::UnicodeString::UnicodeString(v16, 1, &v15);
    icu::UnicodeString::operator=((icu::UnicodeString *)v17, (icu::UnicodeString *)v16);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v16);
  }
  int v5 = -1000 * v2;
  v16[0] = 0;
  uint64_t v6 = sub_18C9E81BC((uint64_t)v17, v16);
  if (!v6) {
    goto LABEL_19;
  }
  uint64_t v9 = (uint64_t)v6;
  if ((SWORD4(v17[0]) & 0x8000u) == 0) {
    int v10 = WORD4(v17[0]) >> 5;
  }
  else {
    int v10 = HIDWORD(v17[0]);
  }
  if (v5 != (*(unsigned int (**)(uint64_t *))(*v6 + 64))(v6) && v10 >= 3 && v10 <= 4)
  {
    uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
LABEL_19:
    if (v3 && (uint64_t v6 = icu::UMemory::operator new(v8, (icu::UMemory *)0xA0, v7)) != 0)
    {
      uint64_t v9 = (uint64_t)v6;
      icu::SimpleTimeZone::SimpleTimeZone((icu::SimpleTimeZone *)v6, v5, (const icu::UnicodeString *)v17);
    }
    else
    {
      icu::TimeZone::getUnknown((icu::TimeZone *)v6);
      uint64_t v9 = (*(uint64_t (**)(uint64_t *))(qword_1E91926D0[0] + 96))(qword_1E91926D0);
    }
  }
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
  return v9;
}

uint64_t icu::TimeZone::createDefault(icu::TimeZone *this)
{
  if (atomic_load_explicit(dword_1EB20BBC8, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20BBC8))
  {
    sub_18C9E545C();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20BBC8);
  }
  umtx_lock((atomic_ullong *)&unk_1EB20BBD0);
  if (qword_1EB20BBC0) {
    uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)qword_1EB20BBC0 + 96))(qword_1EB20BBC0);
  }
  else {
    uint64_t v1 = 0;
  }
  umtx_unlock((std::mutex **)&unk_1EB20BBD0);
  return v1;
}

void sub_18C9E545C()
{
  sub_18CA0A25C(0x13u, (uint64_t)sub_18C9E562C);
  umtx_lock((atomic_ullong *)&unk_1EB20BBD0);
  if (!qword_1EB20BBC0) {
    qword_1EB20BBC0 = icu::TimeZone::detectHostTimeZone(v0);
  }

  umtx_unlock((std::mutex **)&unk_1EB20BBD0);
}

void *icu::TimeZone::forLocaleOrDefault(char **this, const icu::Locale *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)unint64_t v11 = 0u;
  long long v12 = 0u;
  UErrorCode v9 = U_ZERO_ERROR;
  int KeywordValue = (icu::TimeZone *)icu::Locale::getKeywordValue(this, "timezone", v11, 96, &v9);
  if (v9 != U_STRING_NOT_TERMINATED_WARNING && v9 <= U_ZERO_ERROR) {
    uint64_t v4 = KeywordValue;
  }
  else {
    uint64_t v4 = 0;
  }
  if ((int)v4 < 1) {
    return (void *)icu::TimeZone::createDefault(KeywordValue);
  }
  icu::UnicodeString::UnicodeString(v10, v11, v4, 0);
  uint64_t TimeZone = icu::TimeZone::createTimeZone(v10, v5);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v10);
  return TimeZone;
}

void icu::TimeZone::adoptDefault(icu::TimeZone *this, icu::TimeZone *a2)
{
  if (this)
  {
    umtx_lock((atomic_ullong *)&unk_1EB20BBD0);
    uint64_t v3 = qword_1EB20BBC0;
    qword_1EB20BBC0 = (uint64_t)this;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    umtx_unlock((std::mutex **)&unk_1EB20BBD0);
    sub_18CA0A25C(0x13u, (uint64_t)sub_18C9E562C);
  }
}

uint64_t sub_18C9E562C()
{
  if (qword_1EB20BBC0) {
    (*(void (**)(uint64_t))(*(void *)qword_1EB20BBC0 + 8))(qword_1EB20BBC0);
  }
  qword_1EB20BBC0 = 0;
  atomic_store(0, (unsigned int *)&unk_1EB20BBC8);
  if (byte_1E9192834 == 1)
  {
    (*(void (**)(void))qword_1E9192770)();
    (*(void (**)(void))qword_1E91926D0)();
    byte_1E9192834 = 0;
    atomic_store(0, (unsigned int *)&unk_1E919282C);
  }
  qword_1E9192819 = 0;
  unk_1E9192821 = 0;
  atomic_store(0, &dword_1E9192880);
  dword_1E9192838 = 0;
  uprv_free((void *)qword_1E9192840);
  qword_1E9192840 = 0;
  atomic_store(0, (unsigned int *)&unk_1E9192868);
  dword_1E9192848 = 0;
  uprv_free((void *)qword_1E9192850);
  qword_1E9192850 = 0;
  atomic_store(0, (unsigned int *)&unk_1E9192870);
  dword_1E9192858 = 0;
  uprv_free((void *)qword_1E9192860);
  qword_1E9192860 = 0;
  atomic_store(0, (unsigned int *)&unk_1E9192878);
  return 1;
}

void icu::TimeZone::setDefault(icu::TimeZone *this, const icu::TimeZone *a2)
{
  int v2 = (icu::TimeZone *)(*(uint64_t (**)(icu::TimeZone *, const icu::TimeZone *))(*(void *)this + 96))(this, a2);

  icu::TimeZone::adoptDefault(v2, v3);
}

uint64_t icu::TimeZone::getOffset(uint64_t this, double a2, int a3, int *a4, int *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    uint64_t v10 = this;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)this + 64))(this);
    char v12 = 0;
    *a4 = v11;
    double v13 = (double)v11;
    if (a3) {
      double v13 = -0.0;
    }
    double v14 = v13 + a2;
    while (1)
    {
      int v20 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      int v15 = sub_18C93E158(86400000, &v18, v14);
      int v21 = 0;
      sub_18C93E314(&v20, (_DWORD *)&v19 + 1, &v19, (int *)&v18 + 1, &v21, (double)v15);
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, 1);
      int v16 = *a4;
      int v17 = this - *a4;
      *a5 = v17;
      if ((a3 == 0) | v12 & 1 || this == v16) {
        break;
      }
      double v14 = v14 - (double)v17;
      char v12 = 1;
    }
  }
  return this;
}

void sub_18C9E599C(icu::StringEnumeration *this)
{
  *(void *)this = &unk_1EDA53148;
  int v2 = (void *)*((void *)this + 16);
  if (v2) {
    uprv_free(v2);
  }

  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18C9E59FC(icu::StringEnumeration *a1)
{
  sub_18C9E599C(a1);

  icu::UMemory::operator delete(v1);
}

void *sub_18C9E5A24()
{
  return &unk_1E9192818;
}

uint64_t sub_18C9E5A34(int a1, unsigned __int8 *a2, unint64_t a3, int *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*a4 > 0) {
    return 0;
  }
  int v37 = 0;
  uint64_t v7 = sub_18C9E82F8(a1, &v37, a4);
  if (*a4 > 0) {
    return 0;
  }
  uint64_t v10 = v7;
  unint64_t v11 = (unint64_t)a2 | a3;
  if (!((unint64_t)a2 | a3)) {
    goto LABEL_38;
  }
  uint64_t result = (uint64_t)uprv_malloc(0x20uLL);
  if (!result)
  {
LABEL_41:
    *a4 = 7;
    return result;
  }
  char v12 = (void *)result;
  uint64_t v13 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a4);
  uint64_t v14 = ures_getByKey(v13, "Names", v13, a4);
  uint64_t v15 = v14;
  if (v37 < 1)
  {
    LODWORD(v17) = 0;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v35 = 8;
    uint64_t v34 = v14;
    while (1)
    {
      signed int v18 = *(_DWORD *)(v10 + 4 * v16);
      uint64_t v44 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v41 = 0u;
      uint64_t v40 = &unk_1EDA47700;
      LOWORD(v41) = 2;
      int v39 = 0;
      unsigned int v36 = v18;
      StringByIndex = ures_getStringByIndex(v15, v18, &v39, (UErrorCode *)a4);
      if (*a4 <= 0)
      {
        long long v38 = StringByIndex;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v40, 1, &v38, v39);
      }
      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v40);
      }
      uint64_t v21 = *a4;
      if ((int)v21 > 0) {
        break;
      }
      if (a2)
      {
        LODWORD(v38) = 0;
        icu::TimeZone::getRegion((icu::TimeZone *)&v40, (const icu::UnicodeString *)&v38, (char *)4, a4, v20);
        uint64_t v21 = *a4;
        if ((int)v21 >= 1) {
          break;
        }
        if (uprv_stricmp(&v38, a2)) {
          goto LABEL_24;
        }
      }
      if (!a3) {
        goto LABEL_20;
      }
      uint64_t v23 = sub_18C9E81BC((uint64_t)&v40, a4);
      uint64_t v21 = *a4;
      if ((int)v21 >= 1) {
        break;
      }
      uint64_t v24 = v23;
      uint64_t v25 = v17;
      uint64_t v26 = v10;
      uint64_t v27 = v12;
      int v28 = (*(uint64_t (**)(uint64_t *))(*v23 + 64))(v23);
      (*(void (**)(uint64_t *))(*v24 + 8))(v24);
      long long v22 = (void *)*(unsigned int *)a3;
      BOOL v29 = v28 == v22;
      char v12 = v27;
      uint64_t v10 = v26;
      uint64_t v17 = v25;
      uint64_t v15 = v34;
      if (!v29)
      {
LABEL_24:
        icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v40);
      }
      else
      {
LABEL_20:
        if (v35 <= (int)v17)
        {
          v35 += 8;
          unsigned int v30 = uprv_realloc(v12, 4 * v35);
          if (!v30)
          {
            uint64_t v21 = 7;
            *a4 = 7;
            break;
          }
          char v12 = v30;
        }
        *((_DWORD *)v12 + (int)v17) = v36;
        icu::UnicodeString::~UnicodeString((void *)v36, (icu::UnicodeString *)&v40);
        uint64_t v17 = (v17 + 1);
      }
      if (++v16 >= v37) {
        goto LABEL_30;
      }
    }
    icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v40);
  }
LABEL_30:
  if (*a4 >= 1)
  {
    uprv_free(v12);
    char v12 = 0;
  }
  ures_close(v15);
  unint64_t v11 = *a4;
  if ((int)v11 <= 0)
  {
    if (v12)
    {
      long long v31 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x90, v8);
      if (v31)
      {
        uint64_t result = icu::StringEnumeration::StringEnumeration((uint64_t)v31);
        *(void *)uint64_t result = &unk_1EDA53148;
        *(void *)(result + 120) = v12;
        *(void *)(result + 128) = v12;
        *(_DWORD *)(result + 136) = v17;
        *(_DWORD *)(result + 140) = 0;
        return result;
      }
LABEL_40:
      uint64_t result = 0;
      goto LABEL_41;
    }
LABEL_38:
    long long v32 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x90, v8);
    if (v32)
    {
      int v33 = v37;
      uint64_t result = icu::StringEnumeration::StringEnumeration((uint64_t)v32);
      *(void *)uint64_t result = &unk_1EDA53148;
      *(void *)(result + 120) = v10;
      *(void *)(result + 128) = 0;
      *(_DWORD *)(result + 136) = v33;
      *(_DWORD *)(result + 140) = 0;
      return result;
    }
    goto LABEL_40;
  }
  if (v12) {
    uprv_free(v12);
  }
  return 0;
}

uint64_t icu::TimeZone::createEnumeration(icu::TimeZone *this, UErrorCode *a2)
{
  return sub_18C9E5A34(0, 0, 0, (int *)this);
}

uint64_t icu::TimeZone::createEnumerationForRawOffset(icu::TimeZone *this, int *a2, UErrorCode *a3)
{
  int v4 = (int)this;
  return sub_18C9E5A34(0, 0, (unint64_t)&v4, a2);
}

uint64_t icu::TimeZone::createEnumerationForRegion(icu::TimeZone *this, char *a2, UErrorCode *a3)
{
  return sub_18C9E5A34(0, (unsigned __int8 *)this, 0, (int *)a2);
}

uint64_t icu::TimeZone::createEnumeration(icu::TimeZone *this)
{
  int v2 = 0;
  return sub_18C9E5A34(0, 0, 0, &v2);
}

{
  int v2;
  int v3;

  int v2 = 0;
  uint64_t v3 = (int)this;
  return sub_18C9E5A34(0, 0, (unint64_t)&v3, &v2);
}

uint64_t icu::TimeZone::createEnumeration(icu::TimeZone *this, const char *a2)
{
  int v3 = 0;
  return sub_18C9E5A34(0, (unsigned __int8 *)this, 0, &v3);
}

uint64_t icu::TimeZone::countEquivalentIDs(icu::TimeZone *this, const icu::UnicodeString *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v9);
  uint64_t v3 = sub_18C9E5FFC((uint64_t)this, (uint64_t)v9, (int *)&v6);
  if ((int)v6 <= 0)
  {
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v7);
    ures_getByKey((uint64_t)v9, "links", (uint64_t)v7, (int *)&v6);
    ures_getIntVector((uint64_t)v7, (int *)&v6 + 1, (int *)&v6);
    icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v7);
  }
  ures_close(v3);
  uint64_t v4 = HIDWORD(v6);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v9);
  return v4;
}

uint64_t sub_18C9E5FFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a3);
  uint64_t v7 = ures_getByKey(v6, "Names", 0, a3);
  signed int v8 = sub_18C9E63BC(v7, a1, (UErrorCode *)a3);
  if (v8 == -1 && *a3 <= 0)
  {
    *a3 = 2;
  }
  else
  {
    signed int v10 = v8;
    uint64_t v7 = ures_getByKey(v6, "Zones", v7, a3);
    ures_getByIndex(v7, v10, a2, (UErrorCode *)a3);
  }
  ures_close(v7);
  if (ures_getType(a2) == 7)
  {
    signed int Int = ures_getInt(a2, a3);
    uint64_t v12 = ures_getByKey(v6, "Zones", 0, a3);
    ures_getByIndex(v12, Int, a2, (UErrorCode *)a3);
    ures_close(v12);
  }
  return v6;
}

void icu::TimeZone::getEquivalentID(icu::TimeZone *this@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (int)a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = &unk_1EDA47700;
  *(_WORD *)(a3 + 8) = 2;
  int v14 = 0;
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v17);
  uint64_t v6 = sub_18C9E5FFC((uint64_t)this, (uint64_t)v17, &v14);
  if (v14 <= 0)
  {
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v15);
    int v13 = 0;
    ures_getByKey((uint64_t)v17, "links", (uint64_t)v15, &v14);
    IntVector = ures_getIntVector((uint64_t)v15, &v13, &v14);
    if (v3 < 0 || v14 > 0 || v13 <= v3)
    {
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v15);
    }
    else
    {
      signed int v8 = IntVector[v3];
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v15);
      if ((v8 & 0x80000000) == 0)
      {
        uint64_t v9 = ures_getByKey(v6, "Names", 0, &v14);
        uint64_t v10 = v9;
        if (v14 <= 0)
        {
          int v13 = 0;
          StringByIndex = ures_getStringByIndex(v9, v8, &v13, (UErrorCode *)&v14);
          icu::UnicodeString::UnicodeString(v15, 1, &StringByIndex);
          icu::UnicodeString::fastCopyFrom((UChar **)a3, (UChar **)v15);
          icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v15);
        }
        ures_close(v10);
      }
    }
  }
  ures_close(v6);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v17);
}

const UChar *icu::TimeZone::findID(icu::TimeZone *this, const icu::UnicodeString *a2)
{
  int v9 = 0;
  uint64_t v3 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)&v9);
  uint64_t v4 = ures_getByKey(v3, "Names", 0, &v9);
  signed int v5 = sub_18C9E63BC(v4, (uint64_t)this, (UErrorCode *)&v9);
  StringByIndex = ures_getStringByIndex(v4, v5, 0, (UErrorCode *)&v9);
  if (v9 >= 1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = StringByIndex;
  }
  ures_close(v4);
  ures_close(v3);
  return v7;
}

uint64_t sub_18C9E63BC(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v27 = 0;
  long long v26 = 0u;
  uint64_t v23 = &unk_1EDA47700;
  LOWORD(v24) = 2;
  int v22 = 0;
  int Size = ures_getSize(a1);
  unint64_t v7 = *(unsigned int *)a3;
  if ((int)v7 <= 0 && Size >= 1)
  {
    int v10 = Size;
    int v11 = 0;
    LODWORD(v12) = 0x7FFFFFFF;
    while (1)
    {
      LODWORD(v7) = v10 + v11;
      unint64_t v7 = v10 + v11 < 0 != __OFADD__(v10, v11) ? (v7 + 1) : v7;
      if (v12 == (int)v7 >> 1) {
        break;
      }
      uint64_t v12 = ((int)v7 >> 1);
      StringByIndex = ures_getStringByIndex(a1, (int)v7 >> 1, &v22, a3);
      unint64_t v7 = *(unsigned int *)a3;
      if ((int)v7 > 0) {
        break;
      }
      uint64_t v21 = StringByIndex;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v23, 1, &v21, v22);
      unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
      unint64_t v7 = (unsigned __int16)v24;
      if (v24)
      {
        int v20 = (v14 & 1) == 0;
      }
      else
      {
        int v15 = (__int16)v14;
        int32_t v16 = v14 >> 5;
        if (v15 >= 0) {
          int32_t v17 = v16;
        }
        else {
          int32_t v17 = *(_DWORD *)(a2 + 12);
        }
        if ((v24 & 0x8000u) == 0) {
          int v18 = (unsigned __int16)v24 >> 5;
        }
        else {
          int v18 = DWORD1(v24);
        }
        if ((v24 & 2) != 0) {
          uint64_t v19 = (char *)&v24 + 2;
        }
        else {
          uint64_t v19 = (char *)v25;
        }
        int v20 = icu::UnicodeString::doCompare(a2, 0, v17, (uint64_t)v19, v18 & (v18 >> 31), v18 & ~(v18 >> 31));
      }
      if (v20 < 0) {
        int v10 = v12;
      }
      else {
        int v11 = v12;
      }
      if (!v20) {
        goto LABEL_7;
      }
    }
  }
  uint64_t v12 = 0xFFFFFFFFLL;
LABEL_7:
  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)&v23);
  return v12;
}

const UChar *icu::TimeZone::dereferOlsonLink(icu::TimeZone *this, const icu::UnicodeString *a2)
{
  int v10 = 0;
  uint64_t v3 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)&v10);
  uint64_t v4 = ures_getByKey(v3, "Names", 0, &v10);
  signed int v5 = sub_18C9E63BC(v4, (uint64_t)this, (UErrorCode *)&v10);
  StringByIndex = ures_getStringByIndex(v4, v5, 0, (UErrorCode *)&v10);
  ures_getByKey(v3, "Zones", v3, &v10);
  ures_getByIndex(v3, v5, v3, (UErrorCode *)&v10);
  if (v10 <= 0 && ures_getType(v3) == 7)
  {
    signed int Int = ures_getInt(v3, &v10);
    signed int v8 = ures_getStringByIndex(v4, Int, 0, (UErrorCode *)&v10);
    if (v10 <= 0) {
      StringByIndex = v8;
    }
  }
  ures_close(v4);
  ures_close(v3);
  return StringByIndex;
}

const UChar *icu::TimeZone::getRegion(icu::TimeZone *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  int v4 = 0;
  return icu::TimeZone::getRegion(this, (const icu::UnicodeString *)&v4, a3);
}

{
  const UChar *v3;
  uint64_t v6;
  uint64_t v7;
  const UChar *StringByIndex;

  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t v6 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a2);
  unint64_t v7 = ures_getByKey(v6, "Names", 0, (int *)a2);
  LODWORD(this) = sub_18C9E63BC(v7, (uint64_t)this, (UErrorCode *)a2);
  ures_getByKey(v6, "Regions", v7, (int *)a2);
  StringByIndex = ures_getStringByIndex(v7, (signed int)this, 0, (UErrorCode *)a2);
  if (*(int *)a2 <= 0) {
    uint64_t v3 = StringByIndex;
  }
  else {
    uint64_t v3 = 0;
  }
  ures_close(v7);
  ures_close(v6);
  return v3;
}

uint64_t icu::TimeZone::getRegion(icu::TimeZone *this, const icu::UnicodeString *a2, char *a3, int *a4, UErrorCode *a5)
{
  uint64_t v5 = 0;
  *(unsigned char *)a2 = 0;
  if (*a4 <= 0)
  {
    int v7 = (int)a3;
    unsigned int v10 = *((unsigned __int16 *)this + 4);
    int v11 = (__int16)v10;
    int32_t v12 = v10 >> 5;
    if (v11 >= 0) {
      int32_t v13 = v12;
    }
    else {
      int32_t v13 = *((_DWORD *)this + 3);
    }
    if (icu::UnicodeString::doCompare((uint64_t)this, 0, v13, (uint64_t)L"Etc/Unknown", 0, 11)
      && (int v20 = 0, (Region = icu::TimeZone::getRegion(this, (const icu::UnicodeString *)&v20, v14)) != 0))
    {
      int32_t v16 = Region;
      uint64_t v5 = u_strlen(Region);
      int32_t v17 = uprv_min(v5, v7);
      u_UCharsToChars(v16, (char *)a2, v17);
      if ((int)v5 <= v7) {
        return u_terminateChars((uint64_t)a2, v7, v5, a4);
      }
      int v18 = 15;
    }
    else
    {
      uint64_t v5 = 0;
      int v18 = 1;
    }
    *a4 = v18;
  }
  return v5;
}

uint64_t icu::TimeZone::getDisplayName(icu::TimeZone *this, icu::UnicodeString *a2)
{
  Default = icu::Locale::getDefault(this);

  return icu::TimeZone::getDisplayName(this, 0, 2u, (char **)Default, (uint64_t)a2);
}

uint64_t icu::TimeZone::getDisplayName(icu::Calendar *a1, int a2, unsigned int a3, char **a4, uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  UErrorCode v42 = U_ZERO_ERROR;
  icu::Calendar::getNow(a1);
  double v12 = v11;
  int v41 = 0;
  if (a3 <= 8)
  {
    int32_t v13 = (uint64_t *)(1 << a3);
    if (((unsigned __int16)v13 & 0x118) != 0)
    {
      unsigned int v14 = icu::TimeZoneFormat::createInstance(a4, &v42, v13);
      int v15 = (UChar **)v14;
      UErrorCode v16 = v42;
      if (v42 > U_ZERO_ERROR)
      {
        if (*(_WORD *)(a5 + 8)) {
          __int16 v17 = 2;
        }
        else {
          __int16 v17 = *(_WORD *)(a5 + 8) & 0x1F;
        }
        *(_WORD *)(a5 + 8) = v17;
        if (!v14) {
          return a5;
        }
        goto LABEL_57;
      }
      switch(a3)
      {
        case 3u:
          uint64_t v18 = 2;
          goto LABEL_25;
        case 8u:
          uint64_t v18 = 0;
          goto LABEL_25;
        case 4u:
          uint64_t v18 = 1;
LABEL_25:
          (*(void (**)(icu::TimeZoneFormat *, uint64_t, icu::Calendar *, uint64_t, int *, double))(*(void *)v14 + 64))(v14, v18, a1, a5, &v41, v12);
          if (a2 && v41 == 1)
          {
            int v24 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64))(a1);
            int v25 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 104))(a1) + v24;
          }
          else
          {
            if (a2 || v41 != 2) {
              goto LABEL_57;
            }
            int v25 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64))(a1);
          }
          if (a3 == 3) {
            icu::TimeZoneFormat::formatOffsetShortLocalizedGMT(v15, v25, (UChar **)a5, &v42);
          }
          else {
            icu::TimeZoneFormat::formatOffsetLocalizedGMT(v15, v25, (UChar **)a5, &v42);
          }
LABEL_57:
          (*((void (**)(UChar **))*v15 + 1))(v15);
LABEL_58:
          if (v16 >= U_ILLEGAL_ARGUMENT_ERROR) {
            return a5;
          }
          goto LABEL_59;
      }
LABEL_73:
      abort();
    }
  }
  uint64_t v19 = (uint64_t *)(a3 - 5);
  if (v19 <= 1)
  {
    int v15 = (UChar **)icu::TimeZoneFormat::createInstance(a4, &v42, v19);
    UErrorCode v16 = v42;
    if (v42 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      if (a2 && (*(unsigned int (**)(icu::Calendar *))(*(void *)a1 + 72))(a1))
      {
        int v32 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64))(a1);
        int v33 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 104))(a1) + v32;
      }
      else
      {
        int v33 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64))(a1);
      }
      if (a3 == 5)
      {
        icu::TimeZoneFormat::formatOffsetISO8601Basic((icu::TimeZoneFormat *)v15, v33, 0, 0, 0, (icu::UnicodeString *)a5, &v42);
      }
      else
      {
        if (a3 != 6) {
          goto LABEL_73;
        }
        icu::TimeZoneFormat::formatOffsetLocalizedGMT(v15, v33, (UChar **)a5, &v42);
      }
    }
    else
    {
      if (*(_WORD *)(a5 + 8)) {
        __int16 v20 = 2;
      }
      else {
        __int16 v20 = *(_WORD *)(a5 + 8) & 0x1F;
      }
      *(_WORD *)(a5 + 8) = v20;
    }
    if (!v15) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (a3 == 1 || a3 == 7)
  {
    BOOL v21 = a2 == 0;
    unsigned int v22 = 32;
    unsigned int v23 = 16;
  }
  else
  {
    if (a3 != 2) {
      goto LABEL_73;
    }
    BOOL v21 = a2 == 0;
    unsigned int v22 = 4;
    unsigned int v23 = 2;
  }
  if (v21) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = v22;
  }
  uint64_t Instance = icu::TimeZoneNames::createInstance((icu::TimeZoneNames *)a4, (const icu::Locale *)&v42, v10);
  BOOL v29 = Instance;
  UErrorCode v30 = v42;
  if (v42 <= U_ZERO_ERROR)
  {
    memset(v43, 0, sizeof(v43));
    CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a1, v28);
    icu::UnicodeString::UnicodeString((uint64_t)v43, (uint64_t)CanonicalCLDRID);
    (*(void (**)(void *, _OWORD *, uint64_t, uint64_t, double))(*v29 + 96))(v29, v43, v26, a5, v12);
    int v35 = (uint64_t *)*(unsigned __int16 *)(a5 + 8);
    if (v35 <= 0x1F)
    {
      unsigned int v36 = (UChar **)icu::TimeZoneFormat::createInstance(a4, &v42, v35);
      if (a2 && (*(unsigned int (**)(icu::Calendar *))(*(void *)a1 + 72))(a1))
      {
        int v37 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64))(a1);
        int v38 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 104))(a1) + v37;
      }
      else
      {
        int v38 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64))(a1);
      }
      if (a3 == 2) {
        icu::TimeZoneFormat::formatOffsetLocalizedGMT(v36, v38, (UChar **)a5, &v42);
      }
      else {
        icu::TimeZoneFormat::formatOffsetShortLocalizedGMT(v36, v38, (UChar **)a5, &v42);
      }
      if (v36) {
        (*((void (**)(UChar **))*v36 + 1))(v36);
      }
    }
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v43);
  }
  else
  {
    if (*(_WORD *)(a5 + 8)) {
      __int16 v31 = 2;
    }
    else {
      __int16 v31 = *(_WORD *)(a5 + 8) & 0x1F;
    }
    *(_WORD *)(a5 + 8) = v31;
    if (!Instance) {
      return a5;
    }
  }
  (*(void (**)(void *))(*v29 + 8))(v29);
  if (v30 > U_ZERO_ERROR) {
    return a5;
  }
LABEL_59:
  if (v42 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (*(_WORD *)(a5 + 8)) {
      __int16 v39 = 2;
    }
    else {
      __int16 v39 = *(_WORD *)(a5 + 8) & 0x1F;
    }
    *(_WORD *)(a5 + 8) = v39;
  }
  return a5;
}

uint64_t icu::TimeZone::getDisplayName(icu::TimeZone *this, char **a2, icu::UnicodeString *a3)
{
  return icu::TimeZone::getDisplayName(this, 0, 2u, a2, (uint64_t)a3);
}

uint64_t icu::TimeZone::getDisplayName(icu::Locale *a1, int a2, unsigned int a3, uint64_t a4)
{
  Default = icu::Locale::getDefault(a1);

  return icu::TimeZone::getDisplayName(a1, a2, a3, (char **)Default, a4);
}

uint64_t icu::TimeZone::getDSTSavings(icu::TimeZone *this)
{
  if ((*(unsigned int (**)(icu::TimeZone *))(*(void *)this + 72))(this)) {
    return 3600000;
  }
  else {
    return 0;
  }
}

BOOL icu::TimeZone::parseCustomID(UChar **this, const icu::UnicodeString *a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  memset(v50, 0, sizeof(v50));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v50, this);
  icu::Locale::Locale((icu::Locale *)v49, "", 0, 0, 0);
  icu::UnicodeString::toUpper((UChar **)v50, (const icu::Locale *)v49);
  icu::Locale::~Locale((icu::Locale *)v49);
  LODWORD(v12) = *((unsigned __int16 *)this + 4);
  int v11 = (__int16)v12;
  LODWORD(v12) = v12 >> 5;
  if (v11 >= 0) {
    unint64_t v12 = v12;
  }
  else {
    unint64_t v12 = *((unsigned int *)this + 3);
  }
  if ((int)v12 >= 4)
  {
    BOOL v13 = icu::UnicodeString::doEqualsSubstring((uint64_t)v50, 0, 3, (uint64_t)L"GMT", 0, 3);
    uint64_t v45 = L"GMT";
    unint64_t v12 = (unint64_t)&v45;
    if (v13)
    {
      BOOL v15 = 0;
      long long v47 = &unk_1EDA44670;
      unint64_t v48 = 0xFFFFFFFF00000003;
      *(_DWORD *)a2 = 1;
      *a3 = 0;
      *a4 = 0;
      *a5 = 0;
      unsigned int v16 = *((unsigned __int16 *)this + 4);
      unsigned int v17 = *((_DWORD *)this + 3);
      if ((v16 & 0x8000u) == 0) {
        unsigned int v17 = v16 >> 5;
      }
      if (v17 < 4) {
        goto LABEL_21;
      }
      if ((v16 & 2) != 0) {
        uint64_t v18 = (UChar *)this + 5;
      }
      else {
        uint64_t v18 = this[3];
      }
      int v19 = v18[3];
      if (v19 != 43)
      {
        if (v19 != 45)
        {
          BOOL v15 = 0;
          goto LABEL_21;
        }
        *(_DWORD *)a2 = -1;
      }
      LODWORD(v48) = 4;
      int v46 = 0;
      uint64_t Instance = icu::NumberFormat::createInstance((icu::NumberFormat *)&v46, v14);
      BOOL v15 = 0;
      if (v46 > 0)
      {
LABEL_21:
        icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v47);
        goto LABEL_22;
      }
      BOOL v21 = Instance;
      (*(void (**)(icu::Format *, uint64_t))(*(void *)Instance + 184))(Instance, 1);
      int v22 = v48;
      memset(v49, 0, 112);
      icu::Formattable::Formattable((icu::Formattable *)v49, -99999);
      (*(void (**)(icu::Format *, UChar **, _OWORD *, void **))(*(void *)v21 + 160))(v21, this, v49, &v47);
      uint64_t v23 = (int)v48;
      if (v48 == v22) {
        goto LABEL_17;
      }
      int v25 = DWORD2(v49[0]);
      *a3 = DWORD2(v49[0]);
      unsigned int v26 = *((unsigned __int16 *)this + 4);
      int v27 = v26 >> 5;
      if ((v26 & 0x8000u) != 0) {
        int v27 = *((_DWORD *)this + 3);
      }
      int v28 = v23 - v22;
      if ((int)v23 < v27)
      {
        if (v28 > 2 || v27 <= v23) {
          goto LABEL_17;
        }
        BOOL v29 = this[3];
        if ((v26 & 2) != 0) {
          BOOL v29 = (UChar *)this + 5;
        }
        if (v29[v23] != 58) {
          goto LABEL_17;
        }
        int v30 = v23 + 1;
        LODWORD(v48) = v23 + 1;
        icu::Formattable::setLong((icu::Formattable *)v49, -99999);
        (*(void (**)(icu::Format *, UChar **, _OWORD *, void **))(*(void *)v21 + 160))(v21, this, v49, &v47);
        uint64_t v31 = (int)v48;
        if (v48 - v30 != 2) {
          goto LABEL_17;
        }
        *a4 = DWORD2(v49[0]);
        unsigned int v32 = *((unsigned __int16 *)this + 4);
        if ((__int16)this[1] < 0)
        {
          int v33 = *((_DWORD *)this + 3);
          if ((int)v31 < v33)
          {
LABEL_51:
            if (v33 > v31)
            {
              uint64_t v40 = (v32 & 2) != 0 ? (icu::TimeZone *)((char *)this + 10) : (icu::TimeZone *)this[3];
              if (*((_WORD *)v40 + v31) == 58)
              {
                int v41 = v31 + 1;
                LODWORD(v48) = v31 + 1;
                icu::Formattable::setLong((icu::Formattable *)v49, -99999);
                (*(void (**)(icu::Format *, UChar **, _OWORD *, void **))(*(void *)v21 + 160))(v21, this, v49, &v47);
                unsigned int v42 = *((unsigned __int16 *)this + 4);
                int v43 = (__int16)v42;
                unsigned int v44 = v42 >> 5;
                if (v43 < 0) {
                  unsigned int v44 = *((_DWORD *)this + 3);
                }
                if (v48 == v44 && v48 - v41 == 2)
                {
                  *a5 = DWORD2(v49[0]);
                  goto LABEL_41;
                }
              }
            }
LABEL_17:
            (*(void (**)(icu::Format *))(*(void *)v21 + 8))(v21);
            BOOL v15 = 0;
LABEL_18:
            icu::Formattable::~Formattable((icu::Formattable *)v49);
            goto LABEL_21;
          }
        }
        else if ((int)v31 < (int)(v32 >> 5))
        {
          int v33 = v32 >> 5;
          goto LABEL_51;
        }
LABEL_41:
        (*(void (**)(icu::Format *))(*(void *)v21 + 8))(v21);
        BOOL v15 = *a3 < 24 && *a4 < 60 && *a5 < 60;
        goto LABEL_18;
      }
      if ((v28 - 1) > 5) {
        goto LABEL_17;
      }
      if ((v28 - 5) < 2)
      {
        *a5 = v25 % 100;
        *a4 = *a3 / 100 % 100;
        uint64_t v37 = 1759218605 * *a3;
        unint64_t v35 = (unint64_t)v37 >> 63;
        uint64_t v36 = v37 >> 44;
      }
      else
      {
        if ((v28 - 3) > 1) {
          goto LABEL_41;
        }
        *a4 = v25 % 100;
        uint64_t v34 = 1374389535 * *a3;
        unint64_t v35 = (unint64_t)v34 >> 63;
        uint64_t v36 = v34 >> 37;
      }
      *a3 = v36 + v35;
      goto LABEL_41;
    }
  }
  BOOL v15 = 0;
LABEL_22:
  icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v50);
  return v15;
}

icu::UnicodeString *icu::TimeZone::formatCustomID(icu::TimeZone *this, int a2, int a3, int a4, icu::UnicodeString *a5, icu::UnicodeString *a6)
{
  int v10 = (int)this;
  icu::UnicodeString::unBogus((uint64_t)a5);
  unsigned int v11 = *((unsigned __int16 *)a5 + 4);
  int v12 = (__int16)v11;
  unsigned int v13 = v11 >> 5;
  if (v12 >= 0) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = *((unsigned int *)a5 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)a5, 0, v14, (uint64_t)L"GMT", 0, 3);
  if (a2 | v10 | a3)
  {
    __int16 v15 = a4 ? 45 : 43;
    __int16 v20 = v15;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    if (v10 > 9) {
      unsigned int v16 = v10 / 0xAu + 48;
    }
    else {
      LOWORD(v16) = 48;
    }
    __int16 v20 = v16;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    __int16 v20 = v10 % 10 + 48;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    __int16 v20 = 58;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    if (a2 > 9) {
      unsigned int v17 = a2 / 0xAu + 48;
    }
    else {
      LOWORD(v17) = 48;
    }
    __int16 v20 = v17;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    __int16 v20 = a2 % 10 + 48;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    if (a3)
    {
      __int16 v20 = 58;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
      if (a3 > 9) {
        unsigned int v18 = a3 / 0xAu + 48;
      }
      else {
        LOWORD(v18) = 48;
      }
      __int16 v20 = v18;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
      __int16 v20 = a3 % 10 + 48;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    }
  }
  return a5;
}

const icu::UnicodeString *icu::TimeZone::getCustomID(UChar **this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4, uint64_t a5, int *a6)
{
  if (*((_WORD *)a2 + 4)) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v7;
  if (*(int *)a3 <= 0)
  {
    *(void *)unsigned int v11 = 0;
    *(void *)int v12 = 0;
    if (icu::TimeZone::parseCustomID(this, (const icu::UnicodeString *)&v12[1], v12, &v11[1], v11, a6)) {
      icu::TimeZone::formatCustomID((icu::TimeZone *)v12[0], v11[1], v11[0], v12[1] >> 31, a2, v9);
    }
    else {
      *(_DWORD *)a3 = 1;
    }
  }
  return a2;
}

BOOL icu::TimeZone::hasSameRules(icu::TimeZone *this, const icu::TimeZone *a2)
{
  int v4 = (*(uint64_t (**)(icu::TimeZone *))(*(void *)this + 64))(this);
  if (v4 != (*(unsigned int (**)(const icu::TimeZone *))(*(void *)a2 + 64))(a2)) {
    return 0;
  }
  int v5 = (*(uint64_t (**)(icu::TimeZone *))(*(void *)this + 72))(this);
  return v5 == (*(unsigned int (**)(const icu::TimeZone *))(*(void *)a2 + 72))(a2);
}

uint64_t *icu::TimeZone::getTZDataVersion(icu::TimeZone *this, UErrorCode *a2)
{
  if (*(int *)this <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192880, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192880))
    {
      if (dword_1E9192884 >= 1) {
        *(_DWORD *)this = dword_1E9192884;
      }
    }
    else
    {
      sub_18C9E792C((int *)this);
      dword_1E9192884 = *(_DWORD *)this;
      icu::umtx_initImplPostInit(&dword_1E9192880);
    }
  }
  return &qword_1E9192819;
}

void sub_18C9E792C(int *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  sub_18CA0A25C(0x13u, (uint64_t)sub_18C9E562C);
  int32_t v4 = 0;
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v5);
  ures_openDirectFillIn((uint64_t)v5, 0, "zoneinfo64", a1);
  StringByuint64_t Key = ures_getStringByKey((uint64_t)v5, "TZVersion", &v4, a1);
  if (*a1 <= 0)
  {
    int32_t v3 = v4;
    if (v4 >= 16)
    {
      int32_t v3 = 15;
      int32_t v4 = 15;
    }
    u_UCharsToChars(StringByKey, (char *)&qword_1E9192819, v3);
  }
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v5);
}

const icu::UnicodeString *icu::TimeZone::getCanonicalID(icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4, UErrorCode *a5)
{
  icu::TimeZone::getCanonicalID(this, a2, (icu::UnicodeString *)&v7, a3, a5);
  return a2;
}

const icu::UnicodeString *icu::TimeZone::getCanonicalID(icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  if (*((_WORD *)a2 + 4)) {
    __int16 v6 = 2;
  }
  else {
    __int16 v6 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v6;
  *(unsigned char *)a3 = 0;
  if (*(int *)a4 <= 0)
  {
    unsigned int v11 = *((unsigned __int16 *)this + 4);
    int v12 = (__int16)v11;
    int32_t v13 = v11 >> 5;
    if (v12 >= 0) {
      int32_t v14 = v13;
    }
    else {
      int32_t v14 = *((_DWORD *)this + 3);
    }
    if (icu::UnicodeString::doCompare((uint64_t)this, 0, v14, (uint64_t)L"Etc/Unknown", 0, 11))
    {
      icu::ZoneMeta::getCanonicalCLDRID(this, a2, a4, v15);
      if (*(int *)a4 <= 0)
      {
        *(unsigned char *)a3 = 1;
      }
      else
      {
        *(_DWORD *)a4 = 0;
        icu::TimeZone::getCustomID((UChar **)this, a2, a4, v16, v17, v18);
      }
    }
    else
    {
      icu::UnicodeString::fastCopyFrom((UChar **)a2, (UChar **)this);
      *(unsigned char *)a3 = 0;
    }
  }
  return a2;
}

const icu::UnicodeString *icu::TimeZone::getIanaID(icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  if (*((_WORD *)a2 + 4)) {
    __int16 v5 = 2;
  }
  else {
    __int16 v5 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v5;
  if (*(int *)a3 <= 0)
  {
    unsigned int v8 = *((unsigned __int16 *)this + 4);
    int v9 = (__int16)v8;
    int32_t v10 = v8 >> 5;
    if (v9 >= 0) {
      int32_t v11 = v10;
    }
    else {
      int32_t v11 = *((_DWORD *)this + 3);
    }
    if (icu::UnicodeString::doCompare((uint64_t)this, 0, v11, (uint64_t)L"Etc/Unknown", 0, 11))
    {
      icu::ZoneMeta::getIanaID(this, a2, a3, v12);
    }
    else
    {
      *(_DWORD *)a3 = 1;
      icu::UnicodeString::setToBogus(a2);
    }
  }
  return a2;
}

const icu::UnicodeString *icu::TimeZone::getWindowsID(icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  __int16 v6 = *((_WORD *)a2 + 4) & 0x1F;
  if (*((_WORD *)a2 + 4)) {
    __int16 v6 = 2;
  }
  *((_WORD *)a2 + 4) = v6;
  if (*(int *)a3 <= 0)
  {
    long long v30 = 0u;
    uint64_t v33 = 0;
    long long v32 = 0u;
    long long v31 = 0u;
    BOOL v29 = &unk_1EDA47700;
    LOWORD(v30) = 2;
    char v27 = 0;
    icu::TimeZone::getCanonicalID(this, (const icu::UnicodeString *)&v29, (icu::UnicodeString *)&v27, a3, a5);
    unsigned int v8 = (void *)*(unsigned int *)a3;
    if ((int)v8 <= 0 && v27)
    {
      uint64_t v9 = ures_openDirect(0, (uint64_t)"windowsZones", (uint64_t)a3);
      ures_getByKey(v9, "mapTimezones", v9, (int *)a3);
      unsigned int v8 = (void *)*(unsigned int *)a3;
      if ((int)v8 <= 0)
      {
        uint64_t v10 = 0;
        if (ures_hasNext(v9))
        {
          do
          {
            NextResource = ures_getNextResource(v9, v10, (UErrorCode *)a3);
            uint64_t v10 = (uint64_t)NextResource;
            if (*(int *)a3 > 0) {
              break;
            }
            if (ures_getType((uint64_t)NextResource) == 2)
            {
              if (ures_hasNext(v10))
              {
                uint64_t v12 = 0;
                while (1)
                {
                  int32_t v13 = ures_getNextResource(v10, v12, (UErrorCode *)a3);
                  uint64_t v12 = (uint64_t)v13;
                  if (*(int *)a3 > 0) {
                    break;
                  }
                  if (ures_getType((uint64_t)v13))
                  {
LABEL_23:
                    int v20 = 0;
                  }
                  else
                  {
                    int v26 = 0;
                    String = ures_getString(v12, &v26, (int *)a3);
                    __int16 v15 = String;
                    if (*(int *)a3 > 0) {
                      break;
                    }
                    while (1)
                    {
                      unsigned int v16 = u_strchr(v15, 0x20u);
                      uint64_t v17 = v16;
                      unsigned int v18 = v16 ? v16 : (UChar *)&String[v26];
                      int32_t v19 = (v30 & 0x8000u) == 0 ? (unsigned __int16)v30 >> 5 : DWORD1(v30);
                      if (!icu::UnicodeString::doCompare((uint64_t)&v29, 0, v19, (uint64_t)v15, 0, (unint64_t)((char *)v18 - (char *)v15) >> 1))break; {
                      __int16 v15 = v18 + 1;
                      }
                      if (!v17) {
                        goto LABEL_23;
                      }
                    }
                    uint64_t Key = ures_getKey(v10);
                    icu::UnicodeString::UnicodeString(v28, Key, 0xFFFFFFFFLL, 0);
                    icu::UnicodeString::operator=(a2, (icu::UnicodeString *)v28);
                    icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v28);
                    int v20 = 1;
                  }
                  BOOL hasNext = ures_hasNext(v10);
                  if (v20 || !hasNext) {
                    goto LABEL_31;
                  }
                }
                int v20 = 0;
              }
              else
              {
                int v20 = 0;
                uint64_t v12 = 0;
              }
LABEL_31:
              ures_close(v12);
            }
            else
            {
              int v20 = 0;
            }
            BOOL v24 = ures_hasNext(v9);
            if (v20) {
              break;
            }
          }
          while (v24);
        }
        ures_close(v10);
        ures_close(v9);
      }
    }
    else if (v8 == 1)
    {
      *(_DWORD *)a3 = 0;
    }
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v29);
  }
  return a2;
}

const char *icu::TimeZone::getIDForWindowsID(icu::TimeZone *this, const icu::UnicodeString *a2, const char *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*((_WORD *)a3 + 4)) {
    __int16 v6 = 2;
  }
  else {
    __int16 v6 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v6;
  if (*(int *)a4 <= 0)
  {
    uint64_t v10 = ures_openDirect(0, (uint64_t)"windowsZones", (uint64_t)a4);
    ures_getByKey(v10, "mapTimezones", v10, (int *)a4);
    if (*(int *)a4 >= 1) {
      goto LABEL_6;
    }
    int v25 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    *(_OWORD *)int v26 = 0u;
    long long v27 = 0u;
    unsigned int v12 = *((unsigned __int16 *)this + 4);
    int v13 = (__int16)v12;
    unsigned int v14 = v12 >> 5;
    uint64_t v15 = v13 >= 0 ? v14 : *((unsigned int *)this + 3);
    int v16 = icu::UnicodeString::extract((uint64_t)this, 0, v15, v26, 127);
    if (!v16) {
      goto LABEL_6;
    }
    if (v16 >= 128) {
      goto LABEL_6;
    }
    v26[v16] = 0;
    ures_getByKey(v10, v26, v10, &v25);
    if (v25 >= 1) {
      goto LABEL_6;
    }
    unsigned int v24 = 0;
    if (a2 && (uint64_t v17 = ures_getStringByKey(v10, (const char *)a2, (int *)&v24, &v25), v25 <= 0))
    {
      int v22 = v17;
      uint64_t v23 = u_strchr(v17, 0x20u);
      if (v23)
      {
        uint64_t v20 = (unint64_t)((char *)v23 - (char *)v22) >> 1;
        BOOL v21 = a3;
        uint64_t v19 = (uint64_t)v22;
      }
      else
      {
        BOOL v21 = a3;
        uint64_t v19 = (uint64_t)v22;
        uint64_t v20 = 0xFFFFFFFFLL;
      }
    }
    else
    {
      StringByuint64_t Key = ures_getStringByKey(v10, "001", (int *)&v24, (int *)a4);
      if (*(int *)a4 > 0)
      {
LABEL_6:
        ures_close(v10);
        return a3;
      }
      uint64_t v19 = (uint64_t)StringByKey;
      uint64_t v20 = v24;
      BOOL v21 = a3;
    }
    sub_18C9893DC((uint64_t)v21, v19, v20);
    goto LABEL_6;
  }
  return a3;
}

uint64_t *sub_18C9E80F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x90, a2);
  if (result) {
    return (uint64_t *)sub_18C9E87C8((uint64_t)result, a1);
  }
  return result;
}

uint64_t sub_18C9E812C(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return *(unsigned int *)(a1 + 136);
  }
  else {
    return 0;
  }
}

uint64_t sub_18C9E8148(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 120);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(int *)(a1 + 140);
  if ((int)v5 >= *(_DWORD *)(a1 + 136)) {
    return 0;
  }
  sub_18C9E8880(a1, *(_DWORD *)(v4 + 4 * v5), a2);
  ++*(_DWORD *)(a1 + 140);
  return a1 + 8;
}

uint64_t sub_18C9E81B4(uint64_t result)
{
  *(_DWORD *)(result + 140) = 0;
  return result;
}

uint64_t *sub_18C9E81BC(uint64_t a1, int *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*a2 > 0) {
    return 0;
  }
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v10);
  uint64_t v6 = sub_18C9E5FFC(a1, (uint64_t)v10, a2);
  int v2 = 0;
  char v7 = (uint64_t *)*a2;
  if ((int)v7 <= 0)
  {
    unsigned int v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0xE0, v5);
    int v2 = v8;
    if (v8) {
      icu::OlsonTimeZone::OlsonTimeZone(v8, v6, v10, a1, a2);
    }
    else {
      *a2 = 7;
    }
  }
  ures_close(v6);
  if (*a2 >= 1 && v2)
  {
    (*(void (**)(uint64_t *))(*v2 + 8))(v2);
    int v2 = 0;
  }
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v10);
  return v2;
}

uint64_t sub_18C9E82F8(int a1, int *a2, int *a3)
{
  *a2 = 0;
  if (*a3 > 0) {
    return 0;
  }
  if (a1 == 2)
  {
    sub_18C7EFEB0((unsigned int *)&unk_1E9192878, (void (*)(uint64_t, int *))sub_18C9E83F8, 2, a3);
    uint64_t result = qword_1E9192860;
    int v5 = dword_1E9192858;
  }
  else if (a1 == 1)
  {
    sub_18C7EFEB0((unsigned int *)&unk_1E9192870, (void (*)(uint64_t, int *))sub_18C9E83F8, 1, a3);
    uint64_t result = qword_1E9192850;
    int v5 = dword_1E9192848;
  }
  else if (a1)
  {
    int v5 = 0;
    uint64_t result = 0;
    *a3 = 1;
  }
  else
  {
    sub_18C7EFEB0((unsigned int *)&unk_1E9192868, (void (*)(uint64_t, int *))sub_18C9E83F8, 0, a3);
    uint64_t result = qword_1E9192840;
    int v5 = dword_1E9192838;
  }
  *a2 = v5;
  return result;
}

void sub_18C9E83F8(int a1, int *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  sub_18CA0A25C(0x13u, (uint64_t)sub_18C9E562C);
  uint64_t v4 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a2);
  uint64_t v5 = ures_getByKey(v4, "Names", v4, a2);
  uint64_t v6 = v5;
  if (*a2 > 0) {
    goto LABEL_2;
  }
  int Size = ures_getSize(v5);
  int v26 = uprv_malloc(4 * Size);
  if (!v26)
  {
    *a2 = 7;
    goto LABEL_2;
  }
  if (Size >= 1)
  {
    signed int v8 = 0;
    int v9 = 0;
    while (1)
    {
      uint64_t v38 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      uint64_t v34 = &unk_1EDA47700;
      LOWORD(v35) = 2;
      int v28 = 0;
      StringByIndex = ures_getStringByIndex(v6, v8, &v28, (UErrorCode *)a2);
      v27[2] = StringByIndex;
      if (*a2 <= 0)
      {
        long long v29 = StringByIndex;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v34, 1, &v29, v28);
        v27[1] = v29;
      }
      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v34);
      }
      unint64_t v11 = *a2;
      if ((int)v11 > 0)
      {
LABEL_38:
        icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)&v34);
        goto LABEL_39;
      }
      if ((v35 & 0x8000u) == 0) {
        int32_t v12 = (unsigned __int16)v35 >> 5;
      }
      else {
        int32_t v12 = DWORD1(v35);
      }
      int v13 = icu::UnicodeString::doCompare((uint64_t)&v34, 0, v12, (uint64_t)L"Etc/Unknown", 0, 11);
      v27[0] = L"Etc/Unknown";
      unint64_t v15 = (unint64_t)v27;
      if (v13)
      {
        if ((a1 - 1) > 1) {
          goto LABEL_31;
        }
        uint64_t v33 = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        long long v29 = (const UChar *)&unk_1EDA47700;
        LOWORD(v30) = 2;
        icu::ZoneMeta::getCanonicalCLDRID((icu::ZoneMeta *)&v34, (const icu::UnicodeString *)&v29, (icu::UnicodeString *)a2, v14);
        unint64_t v16 = *a2;
        if ((int)v16 >= 1)
        {
          icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v29);
          goto LABEL_38;
        }
        if (v30)
        {
          char v22 = v35;
          icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v30, (icu::UnicodeString *)&v29);
          if ((v22 & 1) == 0) {
            goto LABEL_32;
          }
        }
        else
        {
          if ((v30 & 0x8000u) == 0) {
            int v17 = (unsigned __int16)v30 >> 5;
          }
          else {
            int v17 = DWORD1(v30);
          }
          if ((v35 & 0x8000u) == 0) {
            unsigned int v18 = (void *)((unsigned __int16)v35 >> 5);
          }
          else {
            unsigned int v18 = (void *)DWORD1(v35);
          }
          if ((v35 & 1) != 0 || v17 != v18)
          {
            icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v29);
            goto LABEL_32;
          }
          BOOL v19 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v29, (const icu::UnicodeString *)&v34, v17);
          icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v29);
          if (!v19) {
            goto LABEL_32;
          }
        }
        if (a1 != 2) {
          goto LABEL_31;
        }
        Region = icu::TimeZone::getRegion((icu::TimeZone *)&v34, (const icu::UnicodeString *)a2, v21);
        unint64_t v11 = *a2;
        if ((int)v11 > 0) {
          goto LABEL_38;
        }
        if (u_strcmp(Region, (const UChar *)"0"))
        {
LABEL_31:
          v26[v9] = v8;
          unint64_t v15 = ++v9;
        }
      }
LABEL_32:
      icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v34);
      if (Size == ++v8) {
        goto LABEL_39;
      }
    }
  }
  int v9 = 0;
LABEL_39:
  if (*a2 <= 0)
  {
    unsigned int v24 = uprv_realloc(v26, 4 * v9);
    if (v24) {
      uint64_t v25 = (uint64_t)v24;
    }
    else {
      uint64_t v25 = (uint64_t)v26;
    }
    switch(a1)
    {
      case 2:
        qword_1E9192860 = v25;
        dword_1E9192858 = v9;
        break;
      case 1:
        qword_1E9192850 = v25;
        dword_1E9192848 = v9;
        break;
      case 0:
        qword_1E9192840 = v25;
        dword_1E9192838 = v9;
        break;
    }
  }
LABEL_2:
  ures_close(v6);
}

uint64_t sub_18C9E87C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)icu::StringEnumeration::StringEnumeration(a1);
  void *v4 = &unk_1EDA53148;
  v4[16] = 0;
  v4[17] = 0;
  v4[15] = 0;
  if (*(void *)(a2 + 128))
  {
    uint64_t v5 = uprv_malloc(4 * *(int *)(a2 + 136));
    *(void *)(a1 + 128) = v5;
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(int *)(a2 + 136);
      *(_DWORD *)(a1 + 136) = v7;
      memcpy(v5, *(const void **)(a2 + 128), 4 * v7);
      *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
      *(void *)(a1 + 120) = v6;
    }
    else
    {
      *(void *)(a1 + 136) = 0;
      *(void *)(a1 + 120) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
  }
  return a1;
}

BOOL sub_18C9E8880(uint64_t a1, signed int a2, int *a3)
{
  unsigned char v14[8] = *(UChar **)MEMORY[0x1E4F143B8];
  int v13 = 0;
  uint64_t v6 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a3);
  uint64_t v7 = ures_getByKey(v6, "Names", v6, a3);
  StringByIndex = ures_getStringByIndex(v7, a2, &v13, (UErrorCode *)a3);
  if (*a3 < 1)
  {
    int32_t v12 = StringByIndex;
    icu::UnicodeString::UnicodeString(v14, 1, &v12);
    icu::UnicodeString::fastCopyFrom((UChar **)(a1 + 8), v14);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v14);
  }
  else
  {
    unsigned int v9 = *(unsigned __int16 *)(a1 + 16);
    if (v9)
    {
      icu::UnicodeString::unBogus(a1 + 8);
    }
    else
    {
      if ((v9 & 0x8000) == 0)
      {
        if (!(v9 >> 5)) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
      if (*(_DWORD *)(a1 + 20)) {
LABEL_9:
      }
        *(_WORD *)(a1 + 16) &= 0x1Fu;
    }
  }
LABEL_10:
  ures_close(v7);
  return *a3 < 1;
}

void *icu::TitlecaseTransliterator::getStaticClassID(icu::TitlecaseTransliterator *this)
{
  return &unk_1E9192888;
}

void *sub_18C9E89C0()
{
  return &unk_1E9192888;
}

icu::Transliterator *sub_18C9E89CC(icu::Transliterator *a1)
{
  _OWORD v5[8] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t v4 = "A";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  sub_18C8D8AC0(a1, v5, 0);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(void *)a1 = &unk_1EDA531E0;
  icu::Transliterator::setMaximumContextLength((uint64_t)a1, 2);
  return a1;
}

void sub_18C9E8A98(icu::Transliterator *a1)
{
  icu::Transliterator::~Transliterator(a1);

  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18C9E8AC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
  {
    uint64_t result = sub_18C8D8B14(result, a1);
    *(void *)uint64_t result = &unk_1EDA531E0;
  }
  return result;
}

void sub_18C9E8B10(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3[2];
  int v4 = a3[3];
  if ((int)v5 >= v4) {
    return;
  }
  int v9 = *a3;
  if ((int)v5 <= *a3)
  {
    BOOL v14 = 1;
  }
  else
  {
    uint64_t v10 = (v5 - 1);
    while (1)
    {
      unsigned int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v10);
      int TypeOrIgnorable = ucase_getTypeOrIgnorable(v11);
      if (TypeOrIgnorable >= 1) {
        break;
      }
      int v9 = *a3;
      if (TypeOrIgnorable)
      {
        int v13 = v11 >= 0x10000 ? -2 : -1;
        uint64_t v10 = (v13 + v10);
        if ((int)v10 >= v9) {
          continue;
        }
      }
      BOOL v14 = 1;
      goto LABEL_13;
    }
    BOOL v14 = 0;
    int v9 = *a3;
LABEL_13:
    uint64_t v5 = a3[2];
    int v4 = a3[3];
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  v29[0] = a2;
  v29[1] = v9;
  LODWORD(v30) = a3[1];
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v36 = 0;
  long long v35 = 0u;
  long long v32 = &unk_1EDA47700;
  uint64_t v15 = 2;
  LOWORD(v33) = 2;
  int v28 = 0;
  if ((int)v5 >= v4)
  {
    LODWORD(v19) = v5;
    goto LABEL_39;
  }
  while (1)
  {
    HIDWORD(v30) = v5;
    unsigned int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v5);
    unsigned int v17 = v16;
    int v18 = v16 < 0x10000 ? 1 : 2;
    uint64_t v19 = (v18 + v5);
    LODWORD(v31) = v18 + v5;
    int v20 = ucase_getTypeOrIgnorable(v16);
    if ((v20 & 0x80000000) == 0) {
      break;
    }
LABEL_35:
    uint64_t v15 = a3[3];
    uint64_t v5 = v19;
    if ((int)v19 >= (int)v15) {
      goto LABEL_39;
    }
  }
  int v21 = v20;
  if (v14) {
    unsigned int v22 = ucase_toFullTitle(v17, (uint64_t (*)(uint64_t, void))sub_18C8D89A4, (uint64_t)v29, &v28, 1);
  }
  else {
    unsigned int v22 = ucase_toFullLower(v17, (uint64_t (*)(uint64_t, void))sub_18C8D89A4, (uint64_t)v29, &v28, 1);
  }
  unsigned int v23 = v22;
  BOOL v14 = v21 == 0;
  if (!a4 || (uint64_t v15 = BYTE5(v31), !BYTE5(v31)))
  {
    if ((v22 & 0x80000000) == 0)
    {
      if (v22 > 0x1F)
      {
        icu::UnicodeString::unBogus((uint64_t)&v32);
        if ((v33 & 0x8000u) == 0) {
          uint64_t v24 = (unsigned __int16)v33 >> 5;
        }
        else {
          uint64_t v24 = DWORD1(v33);
        }
        icu::UnicodeString::replace((icu::UnicodeString *)&v32, 0, v24, v23);
        if ((v33 & 0x8000) != 0) {
          unsigned int v23 = DWORD1(v33);
        }
        else {
          unsigned int v23 = (unsigned __int16)v33 >> 5;
        }
      }
      else
      {
        long long v27 = v28;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v32, 0, &v27, v22);
      }
      (*(void (**)(uint64_t, void, void, void **))(*(void *)a2 + 32))(a2, HIDWORD(v30), (v18 + v5), &v32);
      unsigned int v25 = v23 - v18;
      if (v23 != v18)
      {
        uint64_t v19 = v23 + v5;
        unsigned int v26 = a3[1] + v25;
        a3[1] = v26;
        LODWORD(v30) = v26;
        a3[3] += v25;
      }
    }
    goto LABEL_35;
  }
  LODWORD(v19) = HIDWORD(v30);
LABEL_39:
  a3[2] = v19;
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v32);
}

void *icu::TimeUnit::getStaticClassID(icu::TimeUnit *this)
{
  return &unk_1E9192889;
}

void *icu::TimeUnit::getDynamicClassID(icu::TimeUnit *this)
{
  return &unk_1E9192889;
}

icu::MeasureUnit *icu::TimeUnit::createInstance(unsigned int a1, _DWORD *a2)
{
  int v2 = (uint64_t *)*a2;
  if ((int)v2 > 0) {
    return 0;
  }
  if (a1 < 7)
  {
    uint64_t result = (icu::MeasureUnit *)icu::UMemory::operator new(v2, (icu::UMemory *)0x18, (unint64_t)a2);
    if (result) {
      return icu::TimeUnit::TimeUnit(result, a1);
    }
  }
  else
  {
    uint64_t result = 0;
    *a2 = 1;
  }
  return result;
}

icu::MeasureUnit *icu::TimeUnit::TimeUnit(icu::MeasureUnit *a1, unsigned int a2)
{
  uint64_t v4 = icu::MeasureUnit::MeasureUnit((uint64_t)a1);
  *(void *)uint64_t v4 = &unk_1EDA53290;
  *(_DWORD *)(v4 + 20) = a2;
  if (a2 >= 7) {
    abort();
  }
  icu::MeasureUnit::initTime(a1, off_1E550D000[a2]);
  return a1;
}

uint64_t icu::TimeUnit::TimeUnit(icu::TimeUnit *this, const icu::TimeUnit *a2)
{
  uint64_t result = icu::MeasureUnit::MeasureUnit((uint64_t)this, (unint64_t)a2);
  *(void *)uint64_t result = &unk_1EDA53290;
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 5);
  return result;
}

{
  uint64_t result;

  uint64_t result = icu::MeasureUnit::MeasureUnit((uint64_t)this, (unint64_t)a2);
  *(void *)uint64_t result = &unk_1EDA53290;
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 5);
  return result;
}

uint64_t *icu::TimeUnit::clone@<X0>(icu::TimeUnit *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x18, a2);
  if (result)
  {
    uint64_t result = (uint64_t *)icu::MeasureUnit::MeasureUnit((uint64_t)result, (unint64_t)this);
    *uint64_t result = (uint64_t)&unk_1EDA53290;
    *((_DWORD *)result + 5) = *((_DWORD *)this + 5);
  }
  return result;
}

uint64_t icu::TimeUnit::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    icu::MeasureUnit::operator=(a1, a2);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  }
  return a1;
}

uint64_t icu::TimeUnit::getTimeUnitField(icu::TimeUnit *this)
{
  return *((unsigned int *)this + 5);
}

void icu::TimeUnit::~TimeUnit(icu::TimeUnit *this)
{
  icu::MeasureUnit::~MeasureUnit(this);

  icu::UMemory::operator delete(v1);
}

void *icu::TimeUnitAmount::getStaticClassID(icu::TimeUnitAmount *this)
{
  return &unk_1E919288A;
}

void *icu::TimeUnitAmount::getDynamicClassID(icu::TimeUnitAmount *this)
{
  return &unk_1E919288A;
}

icu::Measure *icu::TimeUnitAmount::TimeUnitAmount(icu::Measure *a1, const icu::Formattable *a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t Instance = icu::TimeUnit::createInstance(a3, a4);
  uint64_t result = icu::Measure::Measure(a1, a2, Instance, a4);
  *(void *)a1 = &unk_1EDA532E0;
  return result;
}

{
  icu::MeasureUnit *Instance;
  icu::Measure *result;

  uint64_t Instance = icu::TimeUnit::createInstance(a3, a4);
  uint64_t result = icu::Measure::Measure(a1, a2, Instance, a4);
  *(void *)a1 = &unk_1EDA532E0;
  return result;
}

icu::Measure *icu::TimeUnitAmount::TimeUnitAmount(icu::Measure *a1, unsigned int a2, UErrorCode *a3, double a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  icu::Formattable::Formattable((icu::Formattable *)v9, a4);
  uint64_t Instance = icu::TimeUnit::createInstance(a2, a3);
  icu::Measure::Measure(a1, (const icu::Formattable *)v9, Instance, a3);
  icu::Formattable::~Formattable((icu::Formattable *)v9);
  *(void *)a1 = &unk_1EDA532E0;
  return a1;
}

void *icu::TimeUnitAmount::TimeUnitAmount(icu::TimeUnitAmount *this, const icu::TimeUnitAmount *a2)
{
  uint64_t result = (void *)icu::Measure::Measure(this, a2);
  *uint64_t result = &unk_1EDA532E0;
  return result;
}

{
  void *result;

  uint64_t result = (void *)icu::Measure::Measure(this, a2);
  *uint64_t result = &unk_1EDA532E0;
  return result;
}

uint64_t icu::TimeUnitAmount::operator=(uint64_t a1, uint64_t a2)
{
  icu::Measure::operator=(a1, a2);
  return a1;
}

icu::Measure *icu::TimeUnitAmount::clone@<X0>(icu::TimeUnitAmount *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Measure *)icu::UMemory::operator new(a3, (icu::UMemory *)0x80, a2);
  if (result)
  {
    uint64_t result = (icu::Measure *)icu::Measure::Measure(result, this);
    *(void *)uint64_t result = &unk_1EDA532E0;
  }
  return result;
}

void icu::TimeUnitAmount::~TimeUnitAmount(icu::TimeUnitAmount *this)
{
  icu::Measure::~Measure(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::TimeUnitAmount::getTimeUnit(icu::TimeUnitAmount *this)
{
  return *((void *)this + 15);
}

uint64_t icu::TimeUnitAmount::getTimeUnitField(icu::TimeUnit **this)
{
  return icu::TimeUnit::getTimeUnitField(this[15]);
}

void *icu::TimeUnitFormat::getStaticClassID(icu::TimeUnitFormat *this)
{
  return &unk_1E919288B;
}

void *icu::TimeUnitFormat::getDynamicClassID(icu::TimeUnitFormat *this)
{
  return &unk_1E919288B;
}

icu::TimeUnitFormat *icu::TimeUnitFormat::TimeUnitFormat(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  uint64_t v4 = (icu::Locale *)icu::MeasureFormat::MeasureFormat(this);
  *(void *)uint64_t v4 = &unk_1EDA53330;
  Default = icu::Locale::getDefault(v4);
  icu::MeasureFormat::initMeasureFormat((uint64_t)this, (const char **)Default, 0, 0, a2);
  *((void *)this + 53) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  if (*(int *)a2 <= 0)
  {
    *((_DWORD *)this + 108) = 0;
    icu::TimeUnitFormat::setup(this, a2);
  }
  return this;
}

void icu::TimeUnitFormat::create(uint64_t a1, unsigned int a2, UErrorCode *a3)
{
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  if (*(int *)a3 <= 0)
  {
    if (a2 < 2)
    {
      *(_DWORD *)(a1 + 432) = a2;
      icu::TimeUnitFormat::setup((icu::TimeUnitFormat *)a1, a3);
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

icu::TimeUnitFormat *icu::TimeUnitFormat::TimeUnitFormat(icu::TimeUnitFormat *this, const char **a2, UErrorCode *a3)
{
  uint64_t v6 = (void *)icu::MeasureFormat::MeasureFormat(this);
  void *v6 = &unk_1EDA53330;
  icu::MeasureFormat::initMeasureFormat((uint64_t)v6, a2, 0, 0, a3);
  *((void *)this + 53) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  if (*(int *)a3 <= 0)
  {
    *((_DWORD *)this + 108) = 0;
    icu::TimeUnitFormat::setup(this, a3);
  }
  return this;
}

uint64_t icu::TimeUnitFormat::TimeUnitFormat(uint64_t a1, const char **a2, unsigned int a3, UErrorCode *a4)
{
  signed int v8 = (void *)icu::MeasureFormat::MeasureFormat((icu::MeasureFormat *)a1);
  *signed int v8 = &unk_1EDA53330;
  icu::MeasureFormat::initMeasureFormat((uint64_t)v8, a2, a3 == 1, 0, a4);
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  if (*(int *)a4 <= 0)
  {
    if (a3 < 2)
    {
      *(_DWORD *)(a1 + 432) = a3;
      icu::TimeUnitFormat::setup((icu::TimeUnitFormat *)a1, a4);
    }
    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return a1;
}

icu::TimeUnitFormat *icu::TimeUnitFormat::TimeUnitFormat(icu::TimeUnitFormat *this, const icu::TimeUnitFormat *a2)
{
  inited = icu::MeasureFormat::MeasureFormat(this, a2);
  *(void *)inited = &unk_1EDA53330;
  *((_DWORD *)inited + 108) = *((_DWORD *)a2 + 108);
  for (uint64_t i = 376; i != 432; i += 8)
  {
    UErrorCode v9 = U_ZERO_ERROR;
    inited = (icu::TimeUnitFormat *)icu::TimeUnitFormat::initHash(inited, &v9);
    uint64_t v6 = inited;
    *(void *)((char *)this + i) = inited;
    if (v9 <= U_ZERO_ERROR)
    {
      icu::TimeUnitFormat::copyHash((uint64_t)inited, *(uint64_t ***)((char *)a2 + i), (uint64_t *)inited, (int *)&v9);
    }
    else
    {
      if (inited)
      {
        uint64_t v7 = *(unsigned char **)inited;
        if (*(void *)v6) {
          uhash_close(v7);
        }
        icu::UMemory::operator delete(v6);
      }
      *(void *)((char *)this + i) = 0;
    }
  }
  return this;
}

uint64_t *icu::TimeUnitFormat::initHash(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  int v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 <= 0)
  {
    uint64_t v4 = (int32x2_t *)icu::UMemory::operator new(v2, (icu::UMemory *)0x58, (unint64_t)a2);
    uint64_t v5 = (uint64_t *)v4;
    if (!v4)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return v5;
    }
    int32x2_t *v4 = 0;
    if (*(int *)a2 <= 0)
    {
      uint64_t v6 = v4 + 1;
      uhash_init(v4 + 1, (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, (int *)a2);
      if (*(int *)a2 <= 0)
      {
        uint64_t *v5 = (uint64_t)v6;
        uhash_setKeyDeleter((uint64_t)(v5 + 1), (uint64_t)uprv_deleteUObject);
        if (*(int *)a2 < 1)
        {
          uhash_setValueComparator(*v5, (uint64_t)sub_18C9EAD08);
          return v5;
        }
      }
      if (*v5) {
        uhash_close((unsigned char *)*v5);
      }
    }
    icu::UMemory::operator delete(v5);
  }
  return 0;
}

void icu::TimeUnitFormat::copyHash(uint64_t a1, uint64_t **a2, uint64_t *a3, int *a4)
{
  v19[8] = *(UChar **)MEMORY[0x1E4F143B8];
  if (*a4 <= 0)
  {
    int v18 = -1;
    if (a2)
    {
      while (1)
      {
        uint64_t v7 = uhash_nextElement(*a2, &v18);
        if (!v7) {
          break;
        }
        UErrorCode v9 = *(void ***)(v7 + 8);
        signed int v8 = *(UChar ***)(v7 + 16);
        uint64_t v10 = uprv_malloc(0x10uLL);
        *uint64_t v10 = (*(uint64_t (**)(void))(**v9 + 32))();
        v10[1] = (*(uint64_t (**)(void *))(*v9[1] + 32))(v9[1]);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v19, v8);
        uint64_t v11 = *a3;
        BOOL v14 = (icu::UnicodeString *)icu::UMemory::operator new(v13, (icu::UMemory *)0x40, v12);
        uint64_t v15 = (uint64_t)v14;
        if (v14) {
          icu::UnicodeString::UnicodeString(v14, v19);
        }
        uhash_put(v11, v15, (uint64_t)v10, a4);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v19);
        if (*a4 >= 1)
        {
          if (*v10) {
            (*(void (**)(void))(*(void *)*v10 + 8))(*v10);
          }
          uint64_t v17 = v10[1];
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
          uprv_free(v10);
          return;
        }
      }
    }
  }
}

void icu::TimeUnitFormat::~TimeUnitFormat(icu::TimeUnitFormat *this)
{
  *(void *)this = &unk_1EDA53330;
  for (uint64_t i = 376; i != 432; i += 8)
  {
    icu::TimeUnitFormat::deleteHash((uint64_t)this, *(uint64_t ***)((char *)this + i));
    *(void *)((char *)this + i) = 0;
  }

  icu::MeasureFormat::~MeasureFormat(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::TimeUnitFormat::~TimeUnitFormat(this);

  icu::UMemory::operator delete(v1);
}

void icu::TimeUnitFormat::deleteHash(uint64_t a1, uint64_t **a2)
{
  int v6 = -1;
  if (a2)
  {
    while (1)
    {
      uint64_t v3 = uhash_nextElement(*a2, &v6);
      if (!v3) {
        break;
      }
      uint64_t v4 = *(void **)(v3 + 8);
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
      uint64_t v5 = v4[1];
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      uprv_free(v4);
    }
    if (*a2) {
      uhash_close(*a2);
    }
    icu::UMemory::operator delete(a2);
  }
}

icu::TimeUnitFormat *icu::TimeUnitFormat::clone@<X0>(icu::TimeUnitFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::TimeUnitFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x1B8, a2);
  if (result) {
    return icu::TimeUnitFormat::TimeUnitFormat(result, this);
  }
  return result;
}

uint64_t icu::TimeUnitFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    inited = (icu::TimeUnitFormat *)icu::MeasureFormat::operator=(a1, a2);
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 376;
    do
    {
      icu::TimeUnitFormat::deleteHash((uint64_t)inited, *(uint64_t ***)(v6 + v5));
      *(void *)(v6 + v5) = 0;
      v5 += 8;
    }
    while (v5 != 56);
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 376;
    do
    {
      UErrorCode v12 = U_ZERO_ERROR;
      inited = (icu::TimeUnitFormat *)icu::TimeUnitFormat::initHash(inited, &v12);
      UErrorCode v9 = inited;
      *(void *)(v8 + v7) = inited;
      if (v12 <= U_ZERO_ERROR)
      {
        icu::TimeUnitFormat::copyHash((uint64_t)inited, *(uint64_t ***)(a2 + 376 + v7), (uint64_t *)inited, (int *)&v12);
      }
      else
      {
        if (inited)
        {
          uint64_t v10 = *(unsigned char **)inited;
          if (*(void *)v9) {
            uhash_close(v10);
          }
          icu::UMemory::operator delete(v9);
        }
        *(void *)(v8 + v7) = 0;
      }
      v7 += 8;
    }
    while (v7 != 56);
    *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 432);
  }
  return a1;
}

void icu::TimeUnitFormat::parseObject(icu::TimeUnitFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  memset(v55, 0, sizeof(v55));
  icu::Formattable::Formattable((icu::Formattable *)v55, 0.0);
  uint64_t v6 = 0;
  uint64_t v35 = 0;
  unsigned int v39 = 0;
  int v7 = *((_DWORD *)a4 + 2);
  unsigned int v36 = 7;
  int v37 = 0;
  int v34 = -1;
  do
  {
    uint64_t v8 = (uint64_t **)*((void *)this + v6 + 47);
    int v41 = -1;
    for (i = v8; ; uint64_t v8 = i)
    {
      uint64_t v9 = uhash_nextElement(*v8, &v41);
      if (!v9) {
        break;
      }
      uint64_t v11 = 0;
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v38 = *(void *)(v9 + 16);
      char v13 = 1;
      do
      {
        BOOL v14 = *(icu::MessageFormat **)(v12 + 8 * v11);
        char v15 = v13;
        *((_DWORD *)a4 + 2) = v7;
        *((_DWORD *)a4 + 3) = -1;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        *(_OWORD *)unint64_t v48 = 0u;
        icu::Formattable::Formattable((icu::Formattable *)v48);
        (*(void (**)(icu::MessageFormat *, const icu::UnicodeString *, icu::Formattable **, icu::ParsePosition *))(*(void *)v14 + 56))(v14, a2, v48, a4);
        if (*((_DWORD *)a4 + 3) == -1 && *((_DWORD *)a4 + 2) != v7)
        {
          memset(v47, 0, sizeof(v47));
          icu::Formattable::Formattable((icu::Formattable *)v47, 0.0);
          if (icu::MessageFormat::getArgTypeCount(v14))
          {
            unsigned int v16 = (UChar ***)v48[1];
            if (icu::Formattable::getType(v48[1]) == 3)
            {
              uint64_t v46 = 0;
              long long v44 = 0u;
              long long v45 = 0u;
              long long v43 = 0u;
              unsigned int v42 = (UChar *)&unk_1EDA47700;
              LOWORD(v43) = 2;
              int v40 = 0;
              uint64_t v17 = v6;
              uint64_t NumberFormatInternal = icu::MeasureFormat::getNumberFormatInternal(this);
              icu::UnicodeString::operator=(&v42, v16[1]);
              uint64_t v19 = *(void (**)(uint64_t, UChar **, _OWORD *, int *))(*(void *)NumberFormatInternal + 168);
              uint64_t v20 = NumberFormatInternal;
              uint64_t v6 = v17;
              v19(v20, &v42, v47, &v40);
              int v21 = v40;
              icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v42);
              if (v21 < 1) {
                goto LABEL_13;
              }
LABEL_18:
              icu::Formattable::~Formattable((icu::Formattable *)v47);
              goto LABEL_19;
            }
            if (!icu::Formattable::isNumeric((icu::Formattable *)v16)) {
              goto LABEL_18;
            }
            icu::Formattable::operator=((uint64_t)v47, (uint64_t)v16);
          }
LABEL_13:
          int v23 = *((_DWORD *)a4 + 2) - v7;
          if (v23 > (int)v39)
          {
            if (icu::MessageFormat::getArgTypeCount(v14))
            {
              icu::Formattable::operator=((uint64_t)v55, (uint64_t)v47);
              int v37 = 1;
            }
            else
            {
              int v37 = 0;
            }
            int v34 = *((_DWORD *)a4 + 2);
            unsigned int v36 = v6;
            unsigned int v39 = v23;
            uint64_t v35 = v38;
          }
          goto LABEL_18;
        }
LABEL_19:
        icu::Formattable::~Formattable((icu::Formattable *)v48);
        char v13 = 0;
        uint64_t v11 = 1;
      }
      while ((v15 & 1) != 0);
    }
    ++v6;
  }
  while (v6 != 7);
  if (v37 || !v39)
  {
    unsigned int v25 = (uint64_t *)v39;
    if (v39) {
      goto LABEL_43;
    }
LABEL_46:
    *((_DWORD *)a4 + 2) = v7;
    *((_DWORD *)a4 + 3) = 0;
    goto LABEL_48;
  }
  if (*(__int16 *)(v35 + 8) < 0) {
    int32_t v24 = *(_DWORD *)(v35 + 12);
  }
  else {
    int32_t v24 = *(unsigned __int16 *)(v35 + 8) >> 5;
  }
  if (icu::UnicodeString::doCompare(v35, 0, v24, (uint64_t)"z", 0, 4))
  {
    if (*(__int16 *)(v35 + 8) < 0) {
      int32_t v26 = *(_DWORD *)(v35 + 12);
    }
    else {
      int32_t v26 = *(unsigned __int16 *)(v35 + 8) >> 5;
    }
    if (icu::UnicodeString::doCompare(v35, 0, v26, (uint64_t)L"one", 0, 3))
    {
      if (*(__int16 *)(v35 + 8) < 0) {
        int32_t v28 = *(_DWORD *)(v35 + 12);
      }
      else {
        int32_t v28 = *(unsigned __int16 *)(v35 + 8) >> 5;
      }
      if (icu::UnicodeString::doCompare(v35, 0, v28, (uint64_t)L"two", 0, 3)) {
        double v27 = 3.0;
      }
      else {
        double v27 = 2.0;
      }
    }
    else
    {
      double v27 = 1.0;
    }
  }
  else
  {
    double v27 = 0.0;
  }
  icu::Formattable::Formattable((icu::Formattable *)v48, v27);
  icu::Formattable::operator=((uint64_t)v55, (uint64_t)v48);
  icu::Formattable::~Formattable((icu::Formattable *)v48);
LABEL_43:
  LODWORD(v48[0]) = 0;
  long long v29 = (icu::Measure *)icu::UMemory::operator new(v25, (icu::UMemory *)0x80, v10);
  if (!v29) {
    goto LABEL_46;
  }
  uint64_t v30 = v29;
  icu::TimeUnitAmount::TimeUnitAmount(v29, (const icu::Formattable *)v55, v36, (UErrorCode *)v48);
  if (SLODWORD(v48[0]) <= 0)
  {
    icu::Formattable::adoptObject(a3, v30);
    *((_DWORD *)a4 + 2) = v34;
    *((_DWORD *)a4 + 3) = -1;
  }
  else
  {
    *((_DWORD *)a4 + 2) = v7;
    *((_DWORD *)a4 + 3) = 0;
    (*(void (**)(icu::UObject *))(*(void *)v30 + 8))(v30);
  }
LABEL_48:
  icu::Formattable::~Formattable((icu::Formattable *)v55);
}

void icu::TimeUnitFormat::setup(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (char *)this + 376;
    do
    {
      icu::TimeUnitFormat::deleteHash((uint64_t)this, *(uint64_t ***)&v5[v4]);
      *(void *)&v5[v4] = 0;
      v4 += 8;
    }
    while (v4 != 56);
  }
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  icu::UVector::UVector(v12, 0, uhash_compareUnicodeString, 6, a2);
  PluralRules = (icu::PluralRules *)icu::MeasureFormat::getPluralRules(this);
  uint64_t Keywords = icu::PluralRules::getKeywords(PluralRules, a2);
  uint64_t v8 = Keywords;
  UErrorCode v9 = *a2;
  if (Keywords || v9 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (v9 <= U_ZERO_ERROR)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)Keywords + 56))(Keywords, a2);
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        do
        {
          icu::UVector::addElement((icu::UVector *)v12, v11, a2);
          uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)v8 + 56))(v8, a2);
        }
        while (v11);
      }
      icu::TimeUnitFormat::readFromCurrentLocale(this, 0, "units", (uint64_t)v12, (int *)a2);
      icu::TimeUnitFormat::checkConsistency(this, 0, "units", a2);
      icu::TimeUnitFormat::readFromCurrentLocale(this, 1u, "unitsShort", (uint64_t)v12, (int *)a2);
      icu::TimeUnitFormat::checkConsistency(this, 1u, "unitsShort", a2);
    }
    else if (!Keywords)
    {
      goto LABEL_15;
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    goto LABEL_15;
  }
  *a2 = U_MEMORY_ALLOCATION_ERROR;
LABEL_15:
  icu::UVector::~UVector((icu::UVector *)v12);
}

void icu::TimeUnitFormat::initDataMembers(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (char *)this + 376;
    do
    {
      icu::TimeUnitFormat::deleteHash((uint64_t)this, *(uint64_t ***)&v3[v2]);
      *(void *)&v3[v2] = 0;
      v2 += 8;
    }
    while (v2 != 56);
  }
}

void icu::TimeUnitFormat::readFromCurrentLocale(icu::MeasureFormat *a1, unsigned int a2, const char *a3, uint64_t a4, int *a5)
{
  if (*a5 <= 0)
  {
    UErrorCode v13 = U_ZERO_ERROR;
    LocaleID = (char *)icu::MeasureFormat::getLocaleID(a1, &v13);
    uint64_t v10 = ures_open("icudt74l-unit", LocaleID, (int *)&v13);
    uint64_t v11 = ures_getByKey(v10, a3, 0, (int *)&v13);
    ures_getByKey(v11, "duration", v11, (int *)&v13);
    if (v13 <= U_ZERO_ERROR)
    {
      _OWORD v12[2] = a4;
      v12[0] = &unk_1EDA53398;
      v12[1] = a1;
      v12[3] = a2;
      ures_getAllItemsWithFallback(v11, "", (uint64_t)v12, (int *)&v13);
      icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v12);
    }
    if (v11) {
      ures_close(v11);
    }
    if (v10) {
      ures_close(v10);
    }
  }
}

void icu::TimeUnitFormat::checkConsistency(icu::MeasureFormat *a1, unsigned int a2, const char *a3, UErrorCode *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    PluralRules = (icu::PluralRules *)icu::MeasureFormat::getPluralRules(a1);
    uint64_t Keywords = icu::PluralRules::getKeywords(PluralRules, a4);
    UErrorCode v10 = *a4;
    if (!Keywords && v10 <= U_ZERO_ERROR)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      return;
    }
    uint64_t v18 = Keywords;
    if (v10 <= U_ZERO_ERROR)
    {
LABEL_9:
      uint64_t v11 = v18;
      uint64_t v12 = (icu::TimeUnitFormat *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)v18 + 56))(v18, a4);
      if (!v12)
      {
LABEL_7:
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        return;
      }
      UErrorCode v13 = v12;
      uint64_t v14 = 0;
      while (1)
      {
        char v15 = (char *)a1 + 8 * v14;
        inited = (uint64_t *)*((void *)v15 + 47);
        if (!inited)
        {
          inited = icu::TimeUnitFormat::initHash(v12, a4);
          *((void *)v15 + 47) = inited;
          if (*(int *)a4 > 0) {
            break;
          }
        }
        uint64_t v12 = (icu::TimeUnitFormat *)uhash_get(*inited, (uint64_t)v13);
        if (!v12 || !*((void *)v12 + a2))
        {
          LocaleID = (const char *)icu::MeasureFormat::getLocaleID(a1, a4);
          int v21 = 0;
          memset(&v19[1], 0, 48);
          v19[0] = (char *)&v19[1] + 5;
          LODWORD(v19[1]) = 40;
          int v20 = 0;
          icu::CharString::appendInvariantChars((icu::CharString *)v19, v13, a4);
          icu::TimeUnitFormat::searchInLocaleChain(a1, a2, a3, LocaleID, v14, (UChar **)v13, (char *)v19[0], inited, (int *)a4);
          if (BYTE4(v19[1])) {
            uprv_free(v19[0]);
          }
        }
        if (++v14 == 7)
        {
          if (*(int *)a4 <= 0) {
            goto LABEL_9;
          }
          break;
        }
      }
    }
    uint64_t v11 = v18;
    if (!v18) {
      return;
    }
    goto LABEL_7;
  }
}

void sub_18C9EA5A0(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void icu::TimeUnitFormat::searchInLocaleChain(icu::MeasureFormat *a1, unsigned int a2, const char *a3, const char *a4, uint64_t a5, UChar **a6, char *a7, uint64_t *a8, int *a9)
{
  UErrorCode v9 = (UErrorCode *)a9;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (*a9 > 0) {
    return;
  }
  UErrorCode v57 = U_ZERO_ERROR;
  long long v65 = 0u;
  memset(v64, 0, sizeof(v64));
  icu::StringPiece::StringPiece((icu::StringPiece *)&v55, a4);
  *(void *)&v64[0] = (unint64_t)v64 | 0xD;
  DWORD2(v64[0]) = 40;
  WORD6(v64[0]) = 0;
  DWORD2(v65) = 0;
  icu::CharString::append((icu::CharString *)v64, v55, v56, &v57);
  unsigned int v44 = a2;
  uint64_t v46 = a2;
  uint64_t v51 = a5;
  uint64_t v49 = (int)a5;
  do
  {
    long long v60 = 0u;
    long long v61 = 0u;
    long long v59 = 0u;
    long long __s = (char *)&v59 + 5;
    LODWORD(v59) = 40;
    uint64_t v62 = 0;
    v63[0] = 0;
    v63[1] = 0;
    icu::CharStringByteSink::CharStringByteSink(v63, (uint64_t)&__s);
    ulocimp_getParent(*(char **)&v64[0], (uint64_t)v63, (int *)&v57);
    icu::CharString::operator=((uint64_t)v64, (uint64_t)&__s);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v63);
    if (BYTE4(v59)) {
      uprv_free(__s);
    }
    uint64_t v14 = ures_open("icudt74l-unit", *(char **)&v64[0], (int *)&v57);
    uint64_t v15 = ures_getByKey(v14, a3, 0, (int *)&v57);
    uint64_t v16 = v15;
    uint64_t v17 = 0;
    if (v57 <= U_ZERO_ERROR)
    {
      if (v51 >= 7)
      {
        uint64_t v17 = 0;
        UErrorCode v57 = U_ILLEGAL_ARGUMENT_ERROR;
      }
      else
      {
        uint64_t v17 = off_1E550D070[v49];
      }
    }
    uint64_t v18 = ures_getByKey(v15, v17, 0, (int *)&v57);
    LODWORD(v53) = 0;
    StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v18, a7, (int *)&v53, &v57);
    if (v57 > U_ZERO_ERROR)
    {
      UErrorCode v57 = U_ZERO_ERROR;
      int v21 = 2 * (DWORD2(v65) == 0);
      if (!v18) {
        goto LABEL_12;
      }
LABEL_11:
      ures_close(v18);
      goto LABEL_12;
    }
    uint64_t v22 = StringByKeyWithFallback;
    int v23 = icu::UMemory::operator new((uint64_t *)v57, (icu::UMemory *)0x330, v20);
    if (v23)
    {
      int32_t v24 = (icu::MessageFormat *)v23;
      long long v54 = v22;
      icu::UnicodeString::UnicodeString(v63, 1, &v54);
      icu::MeasureFormat::getLocale(a1, v9, (icu::Locale *)&__s);
      icu::MessageFormat::MessageFormat(v24, (const icu::UnicodeString *)v63, (const icu::Locale *)&__s, v9);
      icu::Locale::~Locale((icu::Locale *)&__s);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v63);
      if (*(int *)v9 > 0) {
        goto LABEL_20;
      }
      int32_t v26 = (void *)uhash_get(*a8, (uint64_t)a6);
      if (v26) {
        goto LABEL_24;
      }
      long long v43 = (int *)v9;
      int32_t v26 = uprv_malloc(0x10uLL);
      *int32_t v26 = 0;
      v26[1] = 0;
      uint64_t v41 = *a8;
      int32_t v28 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)*a8, (icu::UMemory *)0x40, v27);
      long long v29 = v28;
      if (v28) {
        icu::UnicodeString::UnicodeString(v28, a6);
      }
      uint64_t v30 = (uint64_t)v29;
      UErrorCode v9 = (UErrorCode *)v43;
      uhash_put(v41, v30, (uint64_t)v26, v43);
      int v42 = *v43;
      uprv_free(0);
      if (v42 <= 0) {
LABEL_24:
      }
        v26[a2] = v24;
      else {
LABEL_20:
      }
        (*(void (**)(icu::MessageFormat *))(*(void *)v24 + 8))(v24);
    }
    else if (*(int *)v9 <= 0)
    {
      *UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
    }
    int v21 = 1;
    if (v18) {
      goto LABEL_11;
    }
LABEL_12:
    if (v16) {
      ures_close(v16);
    }
    if (v14) {
      ures_close(v14);
    }
  }
  while (!v21);
  if (v21 == 2)
  {
    if (DWORD2(v65) || strcmp(a3, "unitsShort")) {
      goto LABEL_62;
    }
    long long v59 = 0u;
    uint64_t v62 = 0;
    long long v61 = 0u;
    long long v60 = 0u;
    long long __s = (char *)&v59 + 5;
    LODWORD(v59) = 40;
    icu::CharString::append((icu::CharString *)&__s, a4, -1, v9);
    icu::CharString::append((icu::CharString *)&__s, 95, v9);
    icu::TimeUnitFormat::searchInLocaleChain(a1, a2, "units", __s, v51, a6, a7, a8, v9);
    BOOL v31 = 0;
    if (*(int *)v9 <= 0)
    {
      uint64_t v32 = uhash_get(*a8, (uint64_t)a6);
      BOOL v31 = !v32 || !*(void *)(v32 + 8 * v46);
    }
    if (BYTE4(v59)) {
      uprv_free(__s);
    }
    if (v31)
    {
LABEL_62:
      if (strcmp(a7, "other"))
      {
        icu::TimeUnitFormat::searchInLocaleChain(a1, v44, a3, a4, v51, a6, "other", a8, v9);
        goto LABEL_58;
      }
      uint64_t v53 = 0;
      if (v51 > 6)
      {
LABEL_47:
        if (*(int *)v9 <= 0)
        {
          uint64_t v38 = uhash_get(*a8, (uint64_t)a6);
          if (!v38)
          {
            unsigned int v39 = uprv_malloc(0x10uLL);
            if (!v39)
            {
              *UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
              uprv_free(0);
              goto LABEL_56;
            }
            uint64_t v38 = (uint64_t)v39;
            *unsigned int v39 = 0;
            v39[1] = 0;
            sub_18C7EF48C(a8, a6, (uint64_t)v39, (int *)v9);
            uprv_free(0);
          }
          if (*(int *)v9 <= 0)
          {
            uint64_t v40 = v53;
            uint64_t v53 = 0;
            *(void *)(v38 + 8 * v46) = v40;
          }
        }
      }
      else
      {
        int v34 = off_1E550D038[v49];
        uint64_t v35 = icu::UMemory::operator new((uint64_t *)off_1E550D038, (icu::UMemory *)0x330, v33);
        if (v35)
        {
          unsigned int v36 = (icu::MessageFormat *)v35;
          long long v52 = v34;
          icu::UnicodeString::UnicodeString(v63, 1, &v52);
          icu::MeasureFormat::getLocale(a1, v9, (icu::Locale *)&__s);
          icu::MessageFormat::MessageFormat(v36, (const icu::UnicodeString *)v63, (const icu::Locale *)&__s, v9);
          sub_18C7F5A70((uint64_t)&v53, (uint64_t)v36, (int *)v9);
          icu::Locale::~Locale((icu::Locale *)&__s);
          icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)v63);
          goto LABEL_47;
        }
        if (*(int *)v9 <= 0)
        {
          *UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_58;
        }
      }
LABEL_56:
      if (v53) {
        (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
      }
    }
  }
LABEL_58:
  if (BYTE12(v64[0])) {
    uprv_free(*(void **)&v64[0]);
  }
}

char *icu::TimeUnitFormat::getTimeUnitName(unsigned int a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  if (a1 < 7) {
    return off_1E550D070[a1];
  }
  uint64_t result = 0;
  *a2 = 1;
  return result;
}

void icu::TimeUnitFormat::setLocale(icu::TimeUnitFormat *this, const char **a2, UErrorCode *a3)
{
  if (icu::MeasureFormat::setMeasureFormatLocale(this, a2, a3))
  {
    icu::TimeUnitFormat::setup(this, a3);
  }
}

icu::SharedObject *icu::TimeUnitFormat::setNumberFormat(icu::SharedObject *this, const icu::NumberFormat *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    unint64_t v5 = (*(uint64_t (**)(const icu::NumberFormat *))(*(void *)a2 + 32))(a2);
    return icu::MeasureFormat::adoptNumberFormat(v4, v5, a3);
  }
  return this;
}

uint64_t sub_18C9EAD08(void *a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a1 + 24))(*a1, *a2);
  if (result) {
    return (*(uint64_t (**)(void, void))(*(void *)a1[1] + 24))(a1[1], a2[1]);
  }
  return result;
}

void *sub_18C9EAD88(void *result, char *a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  __s1 = a2;
  if (*((unsigned char *)result + 28)) {
    return result;
  }
  int v7 = result;
  *((unsigned char *)result + 28) = 1;
  uint64_t v40 = 0;
  memset(v39, 0, sizeof(v39));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v39, a3, a5);
  if (*(int *)a5 > 0) {
    return result;
  }
  uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v39, 0, (const char **)&__s1, a3);
  if (!result) {
    return result;
  }
  int v8 = 0;
  while (1)
  {
    UErrorCode v9 = __s1;
    if (!__s1) {
      goto LABEL_42;
    }
    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(__s1, "year");
    if (!v10)
    {
      uint64_t v11 = 0;
      goto LABEL_20;
    }
    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "month");
    if (!v10)
    {
      uint64_t v11 = 1;
      goto LABEL_20;
    }
    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "day");
    if (!v10)
    {
      uint64_t v11 = 2;
      goto LABEL_20;
    }
    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "hour");
    if (!v10)
    {
      uint64_t v11 = 4;
      goto LABEL_20;
    }
    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "minute");
    if (!v10)
    {
      uint64_t v11 = 5;
      goto LABEL_20;
    }
    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "second");
    if (!v10) {
      break;
    }
    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "week");
    if (!v10)
    {
      uint64_t v11 = 3;
      goto LABEL_20;
    }
LABEL_42:
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v39, ++v8, (const char **)&__s1, a3);
    if (!result) {
      return result;
    }
  }
  uint64_t v11 = 6;
LABEL_20:
  uint64_t v38 = 0;
  long long v12 = 0uLL;
  uint64_t v35 = *(uint64_t **)(v7[1] + 8 * v11 + 376);
  if (!v35)
  {
    inited = icu::TimeUnitFormat::initHash(v10, a5);
    sub_18C9EB264((unsigned char ***)&v38, (unsigned char **)inited, (int *)a5);
    if (*(int *)a5 >= 1) {
      return sub_18C8FF2F0((unsigned char ***)&v38);
    }
    uint64_t v35 = v38;
    long long v12 = 0uLL;
  }
  uint64_t v37 = 0;
  v36[0] = v12;
  v36[1] = v12;
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v36, a3, a5);
  if (*(int *)a5 > 0)
  {
LABEL_41:
    sub_18C8FF2F0((unsigned char ***)&v38);
    goto LABEL_42;
  }
  uint64_t v34 = v11;
  uint64_t v14 = v35;
  if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, 0, (const char **)&__s1, a3))
  {
LABEL_39:
    uint64_t v30 = v7[1] + 8 * v34;
    if (!*(void *)(v30 + 376))
    {
      BOOL v31 = v38;
      uint64_t v38 = 0;
      *(void *)(v30 + 376) = v31;
    }
    goto LABEL_41;
  }
  unsigned int v15 = 1;
  while (1)
  {
    *a5 = U_ZERO_ERROR;
    memset(v44, 0, 64);
    LODWORD(v43[0]) = 0;
    v42[0] = (*(uint64_t (**)(icu::ResourceValue *, UChar **, UErrorCode *))(*(void *)a3 + 32))(a3, v43, a5);
    uint64_t v16 = (icu::UnicodeString *)icu::UnicodeString::UnicodeString(v44, 1, v42);
    uint64_t v17 = (void *)*(unsigned int *)a5;
    if ((int)v17 < 1) {
      break;
    }
LABEL_38:
    icu::UnicodeString::~UnicodeString(v17, v16);
    if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, v15++, (const char **)&__s1, a3)) {
      goto LABEL_39;
    }
  }
  memset(v43, 0, sizeof(v43));
  icu::UnicodeString::UnicodeString(v43, __s1, 0xFFFFFFFFLL, 0);
  if ((icu::UVector::indexOf((icu::UVector *)v7[2], (uint64_t)v43, 0) & 0x80000000) != 0)
  {
LABEL_37:
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v43);
    uint64_t v16 = (icu::UnicodeString *)v44;
    goto LABEL_38;
  }
  unint64_t v20 = icu::UMemory::operator new((uint64_t *)v19, (icu::UMemory *)0x330, v18);
  if (v20)
  {
    int v21 = (icu::MessageFormat *)v20;
    icu::MeasureFormat::getLocale((icu::MeasureFormat *)v7[1], a5, (icu::Locale *)v42);
    icu::MessageFormat::MessageFormat(v21, (const icu::UnicodeString *)v44, (const icu::Locale *)v42, a5);
    icu::Locale::~Locale((icu::Locale *)v42);
    if (*(int *)a5 > 0) {
      goto LABEL_48;
    }
    uint64_t v22 = (void *)uhash_get(*v14, (uint64_t)v43);
    if (!v22)
    {
      int v23 = uprv_malloc(0x10uLL);
      uint64_t v22 = v23;
      if (!v23)
      {
        *a5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_47:
        uprv_free(v22);
LABEL_48:
        (*(void (**)(icu::MessageFormat *))(*(void *)v21 + 8))(v21);
        goto LABEL_49;
      }
      *int v23 = 0;
      v23[1] = 0;
      uint64_t v26 = *v14;
      unint64_t v27 = (icu::UnicodeString *)icu::UMemory::operator new(v25, (icu::UMemory *)0x40, v24);
      uint64_t v28 = (uint64_t)v27;
      if (v27) {
        icu::UnicodeString::UnicodeString(v27, v43);
      }
      uhash_put(v26, v28, (uint64_t)v22, (int *)a5);
      if (*(int *)a5 >= 1) {
        goto LABEL_47;
      }
      uprv_free(0);
      uint64_t v14 = v35;
    }
    uint64_t v19 = (void *)*((unsigned int *)v7 + 6);
    *((void *)v22 + (void)v19) = v21;
    goto LABEL_37;
  }
  uint64_t v32 = *(unsigned int *)a5;
  if ((int)v32 <= 0)
  {
    uint64_t v32 = 7;
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  }
LABEL_49:
  icu::UnicodeString::~UnicodeString((void *)v32, (icu::UnicodeString *)v43);
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v44);
  return sub_18C8FF2F0((unsigned char ***)&v38);
}

void sub_18C9EB264(unsigned char ***a1, unsigned char **a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      if (*v6) {
        uhash_close(*v6);
      }
      icu::UMemory::operator delete(v6);
    }
    *a1 = a2;
    if (!a2) {
      *a3 = 7;
    }
  }
  else if (a2)
  {
    if (*a2) {
      uhash_close(*a2);
    }
    icu::UMemory::operator delete(a2);
  }
}

void *icu::LowercaseTransliterator::getStaticClassID(icu::LowercaseTransliterator *this)
{
  return &unk_1E919288C;
}

void *sub_18C9EB30C()
{
  return &unk_1E919288C;
}

icu::Transliterator *sub_18C9EB318(icu::Transliterator *a1)
{
  _OWORD v5[8] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t v4 = "A";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  sub_18C8D8AC0(a1, v5, (uint64_t)ucase_toFullLower);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(void *)a1 = &unk_1EDA533E0;
  return a1;
}

void sub_18C9EB3E4(icu::Transliterator *a1)
{
  icu::Transliterator::~Transliterator(a1);

  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18C9EB40C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
  {
    uint64_t result = sub_18C8D8B14(result, a1);
    *(void *)uint64_t result = &unk_1EDA533E0;
  }
  return result;
}

void *icu::UppercaseTransliterator::getStaticClassID(icu::UppercaseTransliterator *this)
{
  return &unk_1E919288D;
}

void *sub_18C9EB468()
{
  return &unk_1E919288D;
}

icu::Transliterator *sub_18C9EB474(icu::Transliterator *a1)
{
  _OWORD v5[8] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t v4 = "A";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  sub_18C8D8AC0(a1, v5, (uint64_t)ucase_toFullUpper);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(void *)a1 = &unk_1EDA53490;
  return a1;
}

void sub_18C9EB540(icu::Transliterator *a1)
{
  icu::Transliterator::~Transliterator(a1);

  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18C9EB568@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
  {
    uint64_t result = sub_18C8D8B14(result, a1);
    *(void *)uint64_t result = &unk_1EDA53490;
  }
  return result;
}

void *icu::Transliterator::getStaticClassID(icu::Transliterator *this)
{
  return &unk_1E9192890;
}

icu::Transliterator *icu::Transliterator::Transliterator(icu::Transliterator *this, UChar **a2, icu::UnicodeFilter *a3)
{
  *(void *)this = &unk_1EDA53540;
  unint64_t v5 = (char *)this + 8;
  uint64_t v6 = icu::UnicodeString::UnicodeString((icu::Transliterator *)((char *)this + 8), a2);
  *((void *)this + 9) = a3;
  *((_DWORD *)this + 20) = 0;
  __int16 v11 = 0;
  icu::UnicodeString::doAppend((uint64_t)v6, (uint64_t)&v11, 0, 1);
  unsigned int v7 = *((unsigned __int16 *)this + 8);
  if (*((__int16 *)this + 8) < 0) {
    unsigned int v8 = *((_DWORD *)this + 5);
  }
  else {
    unsigned int v8 = v7 >> 5;
  }
  int v9 = v8 - 1;
  if ((v7 & 1) != 0 && v8 == 1)
  {
    icu::UnicodeString::unBogus((uint64_t)v5);
  }
  else if (v8 > v9)
  {
    if (v9 > 1023)
    {
      *((_WORD *)this + 8) = v7 | 0xFFE0;
      *((_DWORD *)this + 5) = v9;
    }
    else
    {
      *((_WORD *)this + 8) = *((_WORD *)this + 8) & 0x1F | (32 * v9);
    }
  }
  return this;
}

void icu::Transliterator::~Transliterator(icu::Transliterator *this)
{
  *(void *)this = &unk_1EDA53540;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  icu::UnicodeString::~UnicodeString((icu::Transliterator *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

icu::Transliterator *icu::Transliterator::Transliterator(icu::Transliterator *this, UChar **a2)
{
  *(void *)this = &unk_1EDA53540;
  uint64_t v4 = (char *)this + 8;
  unint64_t v5 = icu::UnicodeString::UnicodeString((icu::Transliterator *)((char *)this + 8), a2 + 1);
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  __int16 v11 = 0;
  icu::UnicodeString::doAppend((uint64_t)v5, (uint64_t)&v11, 0, 1);
  unsigned int v6 = *((unsigned __int16 *)this + 8);
  if (*((__int16 *)this + 8) < 0) {
    unsigned int v7 = *((_DWORD *)this + 5);
  }
  else {
    unsigned int v7 = v6 >> 5;
  }
  int v8 = v7 - 1;
  if ((v6 & 1) != 0 && v7 == 1)
  {
    icu::UnicodeString::unBogus((uint64_t)v4);
  }
  else if (v7 > v8)
  {
    if (v8 > 1023)
    {
      *((_WORD *)this + 8) = v6 | 0xFFE0;
      *((_DWORD *)this + 5) = v8;
    }
    else
    {
      *((_WORD *)this + 8) = *((_WORD *)this + 8) & 0x1F | (32 * v8);
    }
  }
  int v9 = a2[9];
  if (v9) {
    *((void *)this + 9) = (*(uint64_t (**)(UChar *))(*(void *)v9 + 24))(v9);
  }
  return this;
}

uint64_t icu::Transliterator::clone(icu::Transliterator *this)
{
  return 0;
}

uint64_t icu::Transliterator::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(a1 + 8));
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    uint64_t v4 = *(void *)(a2 + 72);
    if (v4) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *(void *)(a1 + 72) = v5;
  }
  return a1;
}

uint64_t icu::Transliterator::adoptFilter(icu::Transliterator *this, icu::UnicodeFilter *a2)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 9) = a2;
  return result;
}

uint64_t icu::Transliterator::transliterate(icu::Transliterator *this, icu::Replaceable *a2, int a3, int a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if ((a3 & 0x80000000) == 0 && a4 >= a3)
  {
    if ((*(int (**)(icu::Replaceable *))(*(void *)a2 + 64))(a2) >= a4)
    {
      v9[0] = a3;
      v9[1] = a4;
      void v9[2] = a3;
      unsigned int v10 = a4;
      (*(void (**)(icu::Transliterator *, icu::Replaceable *, _DWORD *, void, uint64_t))(*(void *)this + 96))(this, a2, v9, 0, 1);
      return v10;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t icu::Transliterator::transliterate(icu::Transliterator *this, icu::Replaceable *a2)
{
  uint64_t v4 = (*(uint64_t (**)(icu::Replaceable *))(*(void *)a2 + 64))(a2);
  uint64_t v5 = *(uint64_t (**)(icu::Transliterator *, icu::Replaceable *, void, uint64_t))(*(void *)this + 32);

  return v5(this, a2, 0, v4);
}

uint64_t icu::Transliterator::_transliterate(uint64_t result, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  if (*a5 <= 0)
  {
    uint64_t v9 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
    if (*a3 < 0
      || (int v10 = a3[2], v10 < *a3)
      || (uint64_t v11 = a3[3], (int)v11 < v10)
      || (int v12 = a3[1], v12 < (int)v11)
      || v12 > (int)result)
    {
      *a5 = 1;
    }
    else
    {
      if (a4)
      {
        (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 32))(a2, v11, a3[3], a4);
        if (*(__int16 *)(a4 + 8) < 0) {
          int v13 = *(_DWORD *)(a4 + 12);
        }
        else {
          int v13 = *(unsigned __int16 *)(a4 + 8) >> 5;
        }
        LODWORD(v11) = a3[3] + v13;
        a3[3] = v11;
        if (*(__int16 *)(a4 + 8) < 0) {
          int v14 = *(_DWORD *)(a4 + 12);
        }
        else {
          int v14 = *(unsigned __int16 *)(a4 + 8) >> 5;
        }
        a3[1] += v14;
      }
      if ((int)v11 < 1
        || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2), (result & 0xFC00) != 0xD800))
      {
        unsigned int v15 = *(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(void *)v9 + 96);
        return v15(v9, a2, a3, 1, 1);
      }
    }
  }
  return result;
}

void *icu::Transliterator::transliterate(uint64_t a1, uint64_t a2, int *a3, unsigned int a4, int *a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(v11, 0, sizeof(v11));
  icu::UnicodeString::UnicodeString((uint64_t)v11, a4);
  icu::Transliterator::_transliterate(a1, a2, a3, (uint64_t)v11, a5);
  return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
}

uint64_t icu::Transliterator::transliterate(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  return icu::Transliterator::_transliterate(a1, a2, a3, 0, a4);
}

uint64_t icu::Transliterator::finishTransliteration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  if ((*a3 & 0x80000000) == 0)
  {
    int v7 = a3[2];
    if (v7 >= *a3)
    {
      int v8 = a3[3];
      if (v8 >= v7)
      {
        int v9 = a3[1];
        if (v9 >= v8 && v9 <= (int)result)
        {
          uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, int *, void, uint64_t))(*(void *)a1 + 96);
          return v11(a1, a2, a3, 0, 1);
        }
      }
    }
  }
  return result;
}

void icu::Transliterator::filteredTransliterate(void *a1, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  int v5 = a5;
  int v6 = a4;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1[9];
  if (a5 || v10)
  {
    uint64_t v12 = a3[2];
    int v13 = a3[3];
    while (1)
    {
      if (v10)
      {
        while ((int)v12 < v13)
        {
          uint64_t v14 = a1[9];
          uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v12);
          int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 56))(v14, v15);
          uint64_t v12 = a3[2];
          if (v16) {
            break;
          }
          if (v15 < 0x10000) {
            int v17 = 1;
          }
          else {
            int v17 = 2;
          }
          uint64_t v12 = (v12 + v17);
          a3[2] = v12;
        }
        a3[3] = v12;
        if ((int)v12 < v13)
        {
          do
          {
            uint64_t v18 = a1[9];
            uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v12);
            if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v18 + 56))(v18, v19)) {
              break;
            }
            int v20 = v19 < 0x10000 ? 1 : 2;
            uint64_t v12 = (a3[3] + v20);
            a3[3] = v12;
          }
          while ((int)v12 < v13);
          uint64_t v12 = a3[2];
        }
      }
      uint64_t v21 = a3[3];
      if (v21 == v12)
      {
LABEL_47:
        a3[3] = v13;
        return;
      }
      if ((int)v21 >= v13) {
        char v22 = v6;
      }
      else {
        char v22 = 0;
      }
      if (v5 && v22)
      {
        int v35 = v21 - v12;
        char v36 = v22;
        int v37 = v13;
        uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v12, v21, v23);
        unsigned int v24 = a3[2];
        if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 80))(a2, v24) < 0x10000) {
          int v25 = 1;
        }
        else {
          int v25 = 2;
        }
        uint64_t v26 = v25 + v24;
        int v34 = v23;
        if ((int)v26 <= (int)v21)
        {
          int v38 = 0;
          int v29 = 0;
          do
          {
            v29 += v25;
            a3[3] = v26;
            (*(void (**)(void *, uint64_t, _DWORD *, uint64_t))(*a1 + 80))(a1, a2, a3, 1);
            int v30 = a3[3];
            int v31 = v30 - v26;
            if (a3[2] == v30)
            {
              LODWORD(v23) = v30 - v26 + v23 + v29;
              LODWORD(v21) = v31 + v21;
              v38 += v31;
              uint64_t v12 = a3[3];
              uint64_t v26 = v12;
              int v29 = 0;
            }
            else
            {
              unsigned int v39 = &unk_1EDA47700;
              __int16 v40 = 2;
              (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v12);
              icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v39);
              (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)a2 + 40))(a2, (v23 - v26 + v12), (v23 - v26 + v12 + v29), v12);
              a3[2] = v12;
              a3[3] = v26;
              a3[1] -= v31;
            }
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v26) < 0x10000) {
              int v25 = 1;
            }
            else {
              int v25 = 2;
            }
            uint64_t v26 = (v25 + v26);
          }
          while ((int)v26 <= (int)v21);
        }
        else
        {
          int v38 = 0;
        }
        int v28 = v38;
        unsigned int v39 = &unk_1EDA47700;
        __int16 v40 = 2;
        (*(void (**)(uint64_t, void, void, void **))(*(void *)a2 + 32))(a2, (v38 + v34), (v35 + v38 + v34), &v39);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v39);
        uint64_t v27 = v12;
        int v5 = a5;
        int v6 = a4;
        char v22 = v36;
        int v13 = v37;
      }
      else
      {
        (*(void (**)(void *, uint64_t, _DWORD *, void))(*a1 + 80))(a1, a2, a3, v22);
        uint64_t v12 = a3[2];
        uint64_t v27 = a3[3];
        int v28 = v27 - v21;
        if (v6 || v12 == v27) {
          goto LABEL_45;
        }
      }
      a3[2] = v27;
      uint64_t v12 = v27;
LABEL_45:
      v13 += v28;
      uint64_t v10 = a1[9];
      if (!v10 || v22) {
        goto LABEL_47;
      }
    }
  }
  uint64_t v11 = *(void (**)(void))(*a1 + 80);

  v11();
}

uint64_t icu::Transliterator::filteredTransliterate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 96))(a1, a2, a3, a4, 0);
}

uint64_t icu::Transliterator::setMaximumContextLength(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

uint64_t icu::Transliterator::getID(icu::Transliterator *this)
{
  return (uint64_t)this + 8;
}

const icu::Locale *icu::Transliterator::getDisplayName(icu::Transliterator *this, const icu::UnicodeString *a2, icu::UnicodeString *a3)
{
  Default = icu::Locale::getDefault(this);

  return icu::Transliterator::getDisplayName(this, (char **)Default, a2, v6);
}

const icu::Locale *icu::Transliterator::getDisplayName(icu::Transliterator *this, char **a2, const icu::Locale *a3, icu::UnicodeString *a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  UErrorCode v36 = U_ZERO_ERROR;
  memset(v35, 0, sizeof(v35));
  icu::ResourceBundle::ResourceBundle((icu::ResourceBundle *)v35, "icudt74l-translit", a2, &v36);
  unsigned int v7 = *((unsigned __int16 *)a3 + 4);
  if (v7)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }
  else
  {
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *((_DWORD *)a3 + 3);
    }
    if (v8) {
      *((_WORD *)a3 + 4) &= 0x1Fu;
    }
  }
  long long v74 = 0u;
  uint64_t v77 = 0;
  long long v76 = 0u;
  long long v75 = 0u;
  LOWORD(v74) = 2;
  long long v69 = 0u;
  uint64_t v72 = 0;
  int v73 = (UChar *)&unk_1EDA47700;
  long long v71 = 0u;
  long long v70 = 0u;
  LOWORD(v69) = 2;
  long long v64 = 0u;
  uint64_t v67 = 0;
  uint64_t v68 = (UChar *)&unk_1EDA47700;
  long long v66 = 0u;
  long long v65 = 0u;
  int v63 = &unk_1EDA47700;
  LOWORD(v64) = 2;
  char v34 = 0;
  sub_18C9F3A44((uint64_t)this, (icu::UnicodeString *)&v73, (uint64_t)&v68, (uint64_t)&v63, &v34);
  LODWORD(v9) = (unsigned __int16)v69 >> 5;
  if ((v69 & 0x8000u) == 0) {
    unint64_t v9 = v9;
  }
  else {
    unint64_t v9 = DWORD1(v69);
  }
  if ((int)v9 >= 1)
  {
    int v10 = (unsigned __int16)v64 >> 5;
    if ((v64 & 0x8000u) != 0) {
      int v10 = DWORD1(v64);
    }
    if (v10 >= 1)
    {
      v46[0] = 47;
      icu::UnicodeString::doReplace((uint64_t)&v63, 0, 0, (uint64_t)v46, 0, 1);
    }
    long long v62 = 0u;
    long long v61 = 0u;
    long long v60 = 0u;
    long long v59 = 0u;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v59, &v73);
    v46[0] = 45;
    uint64_t v11 = icu::UnicodeString::doAppend((uint64_t)&v59, (uint64_t)v46, 0, 1);
    if ((v69 & 0x8000u) == 0) {
      uint64_t v12 = (unsigned __int16)v69 >> 5;
    }
    else {
      uint64_t v12 = DWORD1(v69);
    }
    uint64_t v13 = icu::UnicodeString::doAppend(v11, (const icu::UnicodeString *)&v68, 0, v12);
    if ((v64 & 0x8000u) == 0) {
      uint64_t v14 = (unsigned __int16)v64 >> 5;
    }
    else {
      uint64_t v14 = DWORD1(v64);
    }
    icu::UnicodeString::doAppend(v13, (const icu::UnicodeString *)&v63, 0, v14);
    if ((BYTE8(v59) & 0x11) != 0)
    {
      uint64_t v15 = 0;
    }
    else if ((BYTE8(v59) & 2) != 0)
    {
      uint64_t v15 = (_WORD *)((unint64_t)&v59 | 0xA);
    }
    else
    {
      uint64_t v15 = (_WORD *)*((void *)&v60 + 1);
    }
    if ((SWORD4(v59) & 0x8000u) == 0) {
      int v16 = WORD4(v59) >> 5;
    }
    else {
      int v16 = HIDWORD(v59);
    }
    if (uprv_isInvariantUString(v15, v16))
    {
      memset(v58, 0, sizeof(v58));
      long long v57 = 0u;
      long long v56 = 0u;
      long long v55 = 0u;
      long long v54 = 0u;
      long long v53 = 0u;
      long long v52 = 0u;
      long long v51 = 0u;
      long long v50 = 0u;
      long long v49 = 0u;
      strcpy((char *)v48, "%Translit%%");
      *(_OWORD *)&v48[3] = 0u;
      icu::UnicodeString::extract((uint64_t)&v59, 0, 189, (char *)&v48[2] + 3, 189);
      memset(v47, 0, 64);
      icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v35, (const char *)v48, &v36, (uint64_t)v47);
      if (v36 <= U_ZERO_ERROR)
      {
        int v23 = LOWORD(v47[1]) >> 5;
        if (SLOWORD(v47[1]) < 0) {
          int v23 = HIDWORD(v47[1]);
        }
        if (v23)
        {
          a3 = icu::UnicodeString::operator=((UChar **)a3, v47);
LABEL_68:
          icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v47);
          goto LABEL_35;
        }
      }
      UErrorCode v36 = U_ZERO_ERROR;
      icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v35, "TransliteratorNamePattern", &v36, (uint64_t)v46);
      icu::UnicodeString::operator=((icu::UnicodeString *)v47, (icu::UnicodeString *)v46);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v46);
      unint64_t v18 = v36;
      if (v36 <= U_ZERO_ERROR)
      {
        LODWORD(v18) = LOWORD(v47[1]) >> 5;
        unint64_t v18 = SLOWORD(v47[1]) >= 0 ? v18 : HIDWORD(v47[1]);
        if (v18)
        {
          bzero(v46, 0x330uLL);
          icu::MessageFormat::MessageFormat((icu::MessageFormat *)v46, (const icu::UnicodeString *)v47, (const icu::Locale *)a2, &v36);
          uint64_t v24 = 0;
          memset(v45, 0, sizeof(v45));
          memset(v44, 0, sizeof(v44));
          memset(v43, 0, sizeof(v43));
          do
          {
            icu::Formattable::Formattable((icu::Formattable *)&v43[v24]);
            v24 += 112;
          }
          while (v24 != 336);
          icu::Formattable::setLong((icu::Formattable *)v43, 2);
          icu::Formattable::setString((icu::Formattable *)v44, &v73);
          icu::Formattable::setString((icu::Formattable *)v45, &v68);
          uint64_t v25 = 0;
          long long v39 = 0u;
          uint64_t v42 = 0;
          long long v41 = 0u;
          long long v40 = 0u;
          int v38 = (UChar *)&unk_1EDA47700;
          LOWORD(v39) = 2;
          do
          {
            UErrorCode v36 = U_ZERO_ERROR;
            strcpy((char *)v48, "%Translit%");
            icu::UnicodeString::operator=(&v38, *(UChar ***)&v44[v25 + 8]);
            uint64_t v26 = (char *)v40;
            if ((v39 & 2) != 0) {
              uint64_t v26 = (char *)&v39 + 2;
            }
            if ((v39 & 0x11) != 0) {
              uint64_t v27 = 0;
            }
            else {
              uint64_t v27 = v26;
            }
            if ((v39 & 0x8000u) == 0) {
              int v28 = (unsigned __int16)v39 >> 5;
            }
            else {
              int v28 = DWORD1(v39);
            }
            if (uprv_isInvariantUString(v27, v28))
            {
              icu::UnicodeString::extract((uint64_t)&v38, 0, 189, (char *)&v48[2] + 2, 189);
              icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v35, (const char *)v48, &v36, (uint64_t)v37);
              icu::UnicodeString::operator=((icu::UnicodeString *)v47, (icu::UnicodeString *)v37);
              icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v37);
              if (v36 <= U_ZERO_ERROR)
              {
                icu::Formattable::Formattable((icu::Formattable *)v37, (const icu::UnicodeString *)v47);
                icu::Formattable::operator=((uint64_t)&v43[v25 + 112], (uint64_t)v37);
                icu::Formattable::~Formattable((icu::Formattable *)v37);
              }
            }
            v25 += 112;
          }
          while (v25 != 224);
          UErrorCode v36 = U_ZERO_ERROR;
          v37[2] = 0;
          v37[0] = &unk_1EDA4C7F0;
          v37[1] = 0xFFFFFFFFLL;
          icu::MessageFormat::format((icu::MessageFormat *)v46, (const icu::Formattable *)v43, 3u, a3, (icu::FieldPosition *)v37, &v36);
          UErrorCode v30 = v36;
          if (v36 <= U_ZERO_ERROR)
          {
            if ((v64 & 0x8000u) == 0) {
              uint64_t v31 = (unsigned __int16)v64 >> 5;
            }
            else {
              uint64_t v31 = DWORD1(v64);
            }
            icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)&v63, 0, v31);
          }
          icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v37);
          icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v38);
          for (uint64_t i = 224; i != -112; i -= 112)
            icu::Formattable::~Formattable((icu::Formattable *)&v43[i]);
          icu::MessageFormat::~MessageFormat((icu::MessageFormat *)v46);
          if (v30 <= U_ZERO_ERROR) {
            goto LABEL_68;
          }
        }
      }
      icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v47);
    }
    icu::UnicodeString::operator=((UChar **)a3, (UChar **)&v59);
LABEL_35:
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v59);
  }
  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v63);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v68);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v73);
  icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v35);
  return a3;
}

uint64_t icu::Transliterator::getFilter(icu::Transliterator *this)
{
  return *((void *)this + 9);
}

uint64_t icu::Transliterator::orphanFilter(icu::Transliterator *this)
{
  uint64_t v1 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  return v1;
}

uint64_t icu::Transliterator::createInverse(icu::Transliterator *this, UErrorCode *a2)
{
  memset(&v3, 0, sizeof(v3));
  return icu::Transliterator::createInstance((uint64_t)this + 8, 1, &v3, a2);
}

uint64_t icu::Transliterator::createInstance(uint64_t a1, int a2, UParseError *a3, UErrorCode *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v30 = 0;
    long long v29 = 0u;
    uint64_t v26 = (UChar *)&unk_1EDA47700;
    LOWORD(v27) = 2;
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    icu::UVector::UVector((icu::UVector *)v23, a4);
    uint64_t v4 = 0;
    if (*(int *)a4 > 0)
    {
LABEL_11:
      icu::UVector::~UVector((icu::UVector *)v23);
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v26);
      return v4;
    }
    char v22 = 0;
    if (!sub_18C9F34A4(a1, a2, (uint64_t)&v26, (icu::UVector *)v23, &v22))
    {
      *a4 = U_INVALID_ID;
      uint64_t v11 = v22;
      if (v22) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
    unint64_t v9 = v22;
    sub_18C9F37F8((icu::UVector *)v23, a4);
    if (*(int *)a4 > 0)
    {
LABEL_6:
      if (v9)
      {
        uint64_t v11 = v9;
LABEL_9:
        icu::UnicodeSet::~UnicodeSet(v11);
        icu::UMemory::operator delete(v12);
      }
LABEL_10:
      uint64_t v4 = 0;
      goto LABEL_11;
    }
    uint64_t v15 = (uint64_t *)DWORD2(v23[0]);
    if (SDWORD2(v23[0]) <= 1
      && ((v27 & 0x8000u) == 0 ? (int32_t v16 = (unsigned __int16)v27 >> 5) : (int32_t v16 = DWORD1(v27)),
          (icu::UnicodeString::doIndexOf((uint64_t)&v26, 0x3Bu, 0, v16) & 0x80000000) != 0))
    {
      uint64_t v4 = icu::UVector::elementAt((icu::UVector *)v23, 0);
      if (v4) {
        goto LABEL_20;
      }
    }
    else
    {
      int v17 = (icu::CompoundTransliterator *)icu::UMemory::operator new(v15, (icu::UMemory *)0x68, v10);
      if (v17)
      {
        uint64_t v4 = (uint64_t)v17;
        icu::CompoundTransliterator::CompoundTransliterator(v17, (icu::UVector *)v23, a3, a4);
LABEL_20:
        icu::UnicodeString::operator=((UChar **)(v4 + 8), &v26);
        __int16 v25 = 0;
        icu::UnicodeString::doAppend(v4 + 8, (uint64_t)&v25, 0, 1);
        unsigned int v18 = *(unsigned __int16 *)(v4 + 16);
        if (*(__int16 *)(v4 + 16) < 0) {
          unsigned int v19 = *(_DWORD *)(v4 + 20);
        }
        else {
          unsigned int v19 = v18 >> 5;
        }
        int v20 = v19 - 1;
        if ((v18 & 1) != 0 && v19 == 1)
        {
          icu::UnicodeString::unBogus(v4 + 8);
        }
        else if (v19 > v20)
        {
          if (v20 > 1023)
          {
            *(_WORD *)(v4 + 16) = v18 | 0xFFE0;
            *(_DWORD *)(v4 + 20) = v20;
          }
          else
          {
            *(_WORD *)(v4 + 16) = *(_WORD *)(v4 + 16) & 0x1F | (32 * v20);
          }
        }
        if (v9)
        {
          uint64_t v21 = *(void *)(v4 + 72);
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
          *(void *)(v4 + 72) = v9;
        }
        goto LABEL_11;
      }
    }
    if (*(int *)a4 <= 0) {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
    goto LABEL_6;
  }
  return 0;
}

uint64_t icu::Transliterator::createInstance(uint64_t a1, int a2, UErrorCode *a3)
{
  memset(&v4, 0, sizeof(v4));
  return icu::Transliterator::createInstance(a1, a2, &v4, a3);
}

UChar **icu::Transliterator::createBasicInstance(UChar **this, UChar **a2, const icu::UnicodeString *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  memset(&v19, 0, sizeof(v19));
  UErrorCode v18 = U_ZERO_ERROR;
  *(void *)int v17 = 0;
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  uint64_t v6 = qword_1E9192898;
  if (qword_1E9192898) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry(&v18, v5))
  {
    uint64_t v6 = qword_1E9192898;
LABEL_4:
    unsigned int v7 = (UChar **)sub_18C9EF9E4(v6, this, (uint64_t **)v17, &v18);
    goto LABEL_5;
  }
  unsigned int v7 = 0;
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1E91928A0);
  if (v18 > U_ZERO_ERROR)
  {
LABEL_6:
    if (v7) {
      (*((void (**)(UChar **))*v7 + 1))(v7);
    }
    if (*(void *)v17)
    {
      unsigned int v8 = sub_18C9EEBE0(*(void **)v17);
      icu::UMemory::operator delete(v8);
    }
    return 0;
  }
  while (*(void *)v17)
  {
    if (!sub_18C9EF0C8(*(uint64_t *)v17))
    {
      unsigned int v7 = (UChar **)sub_18C9EEBE4(*(uint64_t *)v17, &v19, &v18);
      if (*(void *)v17)
      {
        uint64_t v13 = sub_18C9EEBE0(*(void **)v17);
        icu::UMemory::operator delete(v13);
      }
      *(void *)int v17 = 0;
      break;
    }
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    sub_18C9AAF0C(v20, &v18);
    sub_18C9EF0D8(*(uint64_t *)v17, (uint64_t)v20, (uint64_t)&v19, &v18);
    if (*(void *)v17)
    {
      unint64_t v10 = sub_18C9EEBE0(*(void **)v17);
      icu::UMemory::operator delete(v10);
    }
    *(void *)int v17 = 0;
    umtx_lock((atomic_ullong *)&unk_1E91928A0);
    uint64_t v12 = qword_1E9192898;
    if (qword_1E9192898) {
      goto LABEL_19;
    }
    if (icu::Transliterator::initializeRegistry(&v18, v11))
    {
      uint64_t v12 = qword_1E9192898;
LABEL_19:
      unsigned int v7 = (UChar **)sub_18C9EFFB8(v12, this, v20, (uint64_t **)v17, &v18);
    }
    umtx_unlock((std::mutex **)&unk_1E91928A0);
    sub_18C9AB024(v20);
    if (v18 >= U_ILLEGAL_ARGUMENT_ERROR) {
      goto LABEL_6;
    }
  }
  if (a2 && v7)
  {
    icu::UnicodeString::operator=(v7 + 1, a2);
    LOWORD(v20[0]) = 0;
    icu::UnicodeString::doAppend((uint64_t)(v7 + 1), (uint64_t)v20, 0, 1);
    unsigned int v14 = *((unsigned __int16 *)v7 + 8);
    if ((__int16)v7[2] < 0) {
      unsigned int v15 = *((_DWORD *)v7 + 5);
    }
    else {
      unsigned int v15 = v14 >> 5;
    }
    int v16 = v15 - 1;
    if ((v14 & 1) != 0 && v15 == 1)
    {
      icu::UnicodeString::unBogus((uint64_t)(v7 + 1));
    }
    else if (v15 > v16)
    {
      if (v16 > 1023)
      {
        *((_WORD *)v7 + 8) = v14 | 0xFFE0;
        *((_DWORD *)v7 + 5) = v16;
      }
      else
      {
        *((_WORD *)v7 + 8) = (_WORD)v7[2] & 0x1F | (32 * v16);
      }
    }
  }
  return v7;
}

uint64_t icu::Transliterator::initializeRegistry(UErrorCode *this, UErrorCode *a2)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  if (qword_1E9192898) {
    return 1;
  }
  UParseError v4 = icu::UMemory::operator new(0, (icu::UMemory *)0x138, (unint64_t)a2);
  if (!v4)
  {
LABEL_6:
    uint64_t v2 = 0;
    qword_1E9192898 = 0;
    return v2;
  }
  qword_1E9192898 = sub_18C9EF98C((int)v4, this);
  if (*(int *)this >= 1)
  {
    int v5 = (void *)sub_18C9EF9E0();
    icu::UMemory::operator delete(v5);
    goto LABEL_6;
  }
  uint64_t v7 = ures_open("icudt74l-translit", 0, (int *)this);
  uint64_t v8 = ures_getByKey(v7, "RuleBasedTransliteratorIDs", 0, (int *)this);
  uint64_t v9 = v8;
  if (*(int *)this <= 0)
  {
    uint64_t v73 = v7;
    int Size = ures_getSize(v8);
    if (Size >= 1)
    {
      int v11 = Size;
      signed int v12 = 0;
      NextResource = 0;
      uint64_t v14 = 0;
      while (1)
      {
        unsigned int v15 = ures_getByIndex(v9, v12, v14, this);
        uint64_t v14 = (uint64_t)v15;
        if (*(int *)this > 0) {
          goto LABEL_29;
        }
        uint64_t Key = (char *)ures_getKey((uint64_t)v15);
        if (Key)
        {
          int v17 = Key;
          if (!strstr(Key, "-t-")) {
            break;
          }
        }
LABEL_26:
        if (v11 == ++v12) {
          goto LABEL_29;
        }
      }
      NextResource = ures_getNextResource(v14, (uint64_t)NextResource, this);
      if (*(int *)this > 0) {
        goto LABEL_29;
      }
      memset(v90, 0, 64);
      icu::UnicodeString::UnicodeString(v90, v17, 0xFFFFFFFFLL, 0);
      UErrorCode v18 = (char *)ures_getKey((uint64_t)NextResource);
      uint64_t v88 = 0;
      unint64_t v19 = *v18;
      switch(v19)
      {
        case 'a':
          String = ures_getString((uint64_t)NextResource, (int *)&v88 + 1, (int *)this);
          uint64_t v22 = qword_1E9192898;
          uint64_t v86 = String;
          icu::UnicodeString::UnicodeString(v89, 1, &v86);
          sub_18C9F06B4(v22, (unint64_t)v90, (uint64_t)v89, 1, 1, v23);
          icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v89);
          uint64_t v79 = v86;
          unint64_t v19 = (unint64_t)&v79;
          break;
        case 'i':
          int v20 = 0;
          goto LABEL_21;
        case 'f':
          int v20 = 1;
LABEL_21:
          StringByuint64_t Key = ures_getStringByKey((uint64_t)NextResource, "resource", (int *)&v88 + 1, (int *)this);
          uint64_t v26 = ures_getStringByKey((uint64_t)NextResource, "direction", (int *)&v88, (int *)this);
          int v74 = v20;
          BOOL v27 = (int)v88 < 1 || *v26 == 70;
          int v28 = !v27;
          uint64_t v29 = qword_1E9192898;
          int v87 = StringByKey;
          icu::UnicodeString::UnicodeString(v89, 1, &v87);
          sub_18C9F059C(v29, (unint64_t)v90, (uint64_t)v89, v28, 1, v74, this, v30);
          icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v89);
          uint64_t v78 = v87;
          unint64_t v19 = (unint64_t)&v78;
          break;
      }
      icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)v90);
      goto LABEL_26;
    }
    uint64_t v14 = 0;
    NextResource = 0;
LABEL_29:
    ures_close((uint64_t)NextResource);
    ures_close(v14);
    uint64_t v7 = v73;
  }
  ures_close(v9);
  ures_close(v7);
  char v34 = icu::UMemory::operator new(v33, (icu::UMemory *)0x58, v32);
  unint64_t v37 = (unint64_t)v34;
  if (v34) {
    sub_18C95F100(v34);
  }
  int v38 = icu::UMemory::operator new(v36, (icu::UMemory *)0x60, v35);
  unint64_t v41 = (unint64_t)v38;
  if (v38) {
    sub_18C9EB3DC(v38);
  }
  uint64_t v42 = icu::UMemory::operator new(v40, (icu::UMemory *)0x60, v39);
  unint64_t v45 = (unint64_t)v42;
  if (v42) {
    sub_18C9EB538(v42);
  }
  uint64_t v46 = icu::UMemory::operator new(v44, (icu::UMemory *)0x60, v43);
  unint64_t v49 = (unint64_t)v46;
  if (v46) {
    sub_18C9E8A90(v46);
  }
  long long v50 = icu::UMemory::operator new(v48, (icu::UMemory *)0x58, v47);
  unint64_t v53 = (unint64_t)v50;
  if (v50) {
    sub_18CA16B68(v50, 0);
  }
  long long v54 = icu::UMemory::operator new(v52, (icu::UMemory *)0x120, v51);
  unint64_t v57 = (unint64_t)v54;
  if (v54) {
    sub_18C9568A8(v54, 0);
  }
  unsigned int v58 = icu::UMemory::operator new(v56, (icu::UMemory *)0xA8, v55);
  unint64_t v59 = (unint64_t)v58;
  if (v58 && (sub_18C8D15FC(v58, 0), v57) && v37 && v41 && v45 && v49 && v53)
  {
    uint64_t v2 = 1;
    sub_18C9F0244(qword_1E9192898, v37, 1, this, v60);
    sub_18C9F0244(qword_1E9192898, v41, 1, this, v61);
    sub_18C9F0244(qword_1E9192898, v45, 1, this, v62);
    sub_18C9F0244(qword_1E9192898, v49, 1, this, v63);
    sub_18C9F0244(qword_1E9192898, v53, 1, this, v64);
    sub_18C9F0244(qword_1E9192898, v57, 1, this, v65);
    sub_18C9F0244(qword_1E9192898, v59, 0, this, v66);
    sub_18C9CA374();
    sub_18C933DB0();
    sub_18CA16000();
    sub_18C95E834();
    sub_18C8CD3CC();
    uint64_t v85 = L"Null";
    icu::UnicodeString::UnicodeString(v90, 1, &v85);
    UChar32 v84 = L"Null";
    icu::UnicodeString::UnicodeString(v89, 1, &v84);
    HIDWORD(v88) = 0;
    sub_18C9F3FA0((uint64_t)v90, (uint64_t)v89, 0, (int *)&v88 + 1);
    icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)v89);
    uint64_t v77 = v84;
    uint64_t v68 = icu::UnicodeString::~UnicodeString(&v77, (icu::UnicodeString *)v90);
    v76[1] = v85;
    uint64_t v83 = "U";
    icu::UnicodeString::UnicodeString(v68, 1, &v83);
    unsigned int v82 = "L";
    icu::UnicodeString::UnicodeString(v89, 1, &v82);
    HIDWORD(v88) = 0;
    sub_18C9F3FA0((uint64_t)v90, (uint64_t)v89, 1, (int *)&v88 + 1);
    icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v89);
    v76[0] = v82;
    long long v70 = icu::UnicodeString::~UnicodeString(v76, (icu::UnicodeString *)v90);
    v75[1] = v83;
    unsigned int v81 = "T";
    icu::UnicodeString::UnicodeString(v70, 1, &v81);
    int v80 = "L";
    icu::UnicodeString::UnicodeString(v89, 1, &v80);
    HIDWORD(v88) = 0;
    sub_18C9F3FA0((uint64_t)v90, (uint64_t)v89, 0, (int *)&v88 + 1);
    icu::UnicodeString::~UnicodeString(v71, (icu::UnicodeString *)v89);
    v75[0] = v80;
    icu::UnicodeString::~UnicodeString(v75, (icu::UnicodeString *)v90);
    sub_18CA0A25C(5u, (uint64_t)sub_18C9EEAE8);
  }
  else
  {
    if (v37) {
      (*(void (**)(unint64_t))(*(void *)v37 + 8))(v37);
    }
    if (v41) {
      (*(void (**)(unint64_t))(*(void *)v41 + 8))(v41);
    }
    if (v45) {
      (*(void (**)(unint64_t))(*(void *)v45 + 8))(v45);
    }
    if (v49) {
      (*(void (**)(unint64_t))(*(void *)v49 + 8))(v49);
    }
    if (v53) {
      (*(void (**)(unint64_t))(*(void *)v53 + 8))(v53);
    }
    if (v57) {
      (*(void (**)(unint64_t))(*(void *)v57 + 8))(v57);
    }
    if (v59) {
      (*(void (**)(unint64_t))(*(void *)v59 + 8))(v59);
    }
    if (qword_1E9192898)
    {
      uint64_t v72 = (void *)sub_18C9EF9E0();
      icu::UMemory::operator delete(v72);
    }
    uint64_t v2 = 0;
    qword_1E9192898 = 0;
    *this = U_MEMORY_ALLOCATION_ERROR;
  }
  return v2;
}

uint64_t *icu::Transliterator::createFromRules(UChar **a1, uint64_t a2, int a3, UParseError *a4, UErrorCode *a5)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v85 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  *(_OWORD *)unint64_t v59 = 0u;
  long long v60 = 0u;
  memset(v58, 0, sizeof(v58));
  long long v56 = 0u;
  long long v57 = 0u;
  long long v55 = 0u;
  sub_18C9AAF0C(&v55, a5);
  sub_18C9AB028((uint64_t)&v55, a2, a3, (uint64_t)a4, a5);
  uint64_t Instance = 0;
  if (*(int *)a5 > 0) {
    goto LABEL_2;
  }
  if (DWORD2(v58[0]) == 1)
  {
    if (v56) {
      goto LABEL_10;
    }
    if (v59[1])
    {
      long long v51 = 0u;
      uint64_t v54 = 0;
      long long v53 = 0u;
      long long v52 = 0u;
      long long v50 = &unk_1EDA47700;
      LOWORD(v51) = 2;
      icu::UnicodeSet::toPattern(v59[1], (icu::UnicodeString *)&v50, 0);
      icu::UnicodeString::UnicodeString((uint64_t)v46, 59);
      icu::operator+((uint64_t)&v50, (uint64_t)v46, (uint64_t)v48);
      uint64_t v33 = icu::UVector::elementAt((icu::UVector *)v58, 0);
      icu::operator+((uint64_t)v48, v33, (uint64_t)v49);
      uint64_t Instance = (uint64_t *)icu::Transliterator::createInstance((uint64_t)v49, 0, a4, a5);
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v49);
      icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v48);
      icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v46);
      icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v50);
      if (!Instance) {
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v39 = icu::UVector::elementAt((icu::UVector *)v58, 0);
      uint64_t Instance = (uint64_t *)icu::Transliterator::createInstance(v39, 0, a4, a5);
      if (!Instance)
      {
LABEL_57:
        if (!Instance && *(int *)a5 <= 0)
        {
          uint64_t Instance = 0;
          *a5 = U_MEMORY_ALLOCATION_ERROR;
        }
        goto LABEL_2;
      }
    }
    icu::UnicodeString::operator=((UChar **)Instance + 1, a1);
    LOWORD(v50) = 0;
    icu::UnicodeString::doAppend((uint64_t)(Instance + 1), (uint64_t)&v50, 0, 1);
    unsigned int v40 = *((unsigned __int16 *)Instance + 8);
    if ((__int16)Instance[2] < 0) {
      unsigned int v41 = *((_DWORD *)Instance + 5);
    }
    else {
      unsigned int v41 = v40 >> 5;
    }
    int v44 = v41 - 1;
    if ((v40 & 1) != 0 && v41 == 1)
    {
      icu::UnicodeString::unBogus((uint64_t)(Instance + 1));
    }
    else if (v41 > v44)
    {
      if (v44 > 1023)
      {
        *((_WORD *)Instance + 8) = v40 | 0xFFE0;
        *((_DWORD *)Instance + 5) = v44;
      }
      else
      {
        *((_WORD *)Instance + 8) = Instance[2] & 0x1F | (32 * v44);
      }
    }
    goto LABEL_2;
  }
  if (!DWORD2(v58[0]))
  {
    if (!v56)
    {
      unint64_t v32 = icu::UMemory::operator new((uint64_t *)v56, (icu::UMemory *)0x58, v10);
      uint64_t Instance = v32;
      if (v32)
      {
        sub_18C95F100(v32);
        goto LABEL_2;
      }
      goto LABEL_57;
    }
    if (v56 == 1)
    {
      uint64_t Instance = icu::UMemory::operator new((uint64_t *)1, (icu::UMemory *)0x68, v10);
      if (Instance)
      {
        uint64_t v13 = icu::UVector::orphanElementAt((icu::UVector *)((char *)&v55 + 8), 0);
        sub_18C9A8B48(Instance, a1, v13, 1);
        goto LABEL_2;
      }
      goto LABEL_57;
    }
  }
LABEL_10:
  unint64_t v45 = a1;
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  icu::UVector::UVector((icu::UVector *)v46, a5);
  unint64_t v15 = DWORD2(v58[0]);
  if ((int)v56 <= SDWORD2(v58[0])) {
    int v16 = DWORD2(v58[0]);
  }
  else {
    int v16 = v56;
  }
  if (v16 < 1)
  {
    unsigned int v18 = 1;
LABEL_29:
    uint64_t v29 = (icu::CompoundTransliterator *)icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x68, v14);
    uint64_t Instance = (uint64_t *)v29;
    if (v29)
    {
      icu::CompoundTransliterator::CompoundTransliterator(v29, (icu::UVector *)v46, v18 - 1, a4, a5);
      icu::UnicodeString::operator=((UChar **)Instance + 1, v45);
      LOWORD(v50) = 0;
      icu::UnicodeString::doAppend((uint64_t)(Instance + 1), (uint64_t)&v50, 0, 1);
      unsigned int v30 = *((unsigned __int16 *)Instance + 8);
      if ((__int16)Instance[2] < 0) {
        unsigned int v31 = *((_DWORD *)Instance + 5);
      }
      else {
        unsigned int v31 = v30 >> 5;
      }
      int v38 = v31 - 1;
      if ((v30 & 1) != 0 && v31 == 1)
      {
        icu::UnicodeString::unBogus((uint64_t)(Instance + 1));
      }
      else if (v31 > v38)
      {
        if (v38 > 1023)
        {
          *((_WORD *)Instance + 8) = v30 | 0xFFE0;
          *((_DWORD *)Instance + 5) = v38;
        }
        else
        {
          *((_WORD *)Instance + 8) = Instance[2] & 0x1F | (32 * v38);
        }
      }
      uint64_t v42 = sub_18C9ABAD4((uint64_t)&v55);
      uint64_t v43 = Instance[9];
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
      }
      Instance[9] = v42;
    }
    icu::UVector::~UVector((icu::UVector *)v46);
    goto LABEL_57;
  }
  signed int v17 = 0;
  unsigned int v18 = 1;
  while (1)
  {
    if (v17 < SDWORD2(v58[0]))
    {
      uint64_t v19 = icu::UVector::elementAt((icu::UVector *)v58, v17);
      if (*(unsigned __int16 *)(v19 + 8) >= 0x20u)
      {
        int v20 = (uint64_t *)icu::Transliterator::createInstance(v19, 0, a4, a5);
        uint64_t v21 = v20;
        if (*(int *)a5 >= 1)
        {
          if (!v20) {
            goto LABEL_51;
          }
LABEL_50:
          (*(void (**)(uint64_t *))(*v21 + 8))(v21);
          goto LABEL_51;
        }
        if (v20)
        {
          if (sub_18C828FD8(*(void *)(*v20 - 8), (uint64_t)&unk_1EDA4ED58))
          {
            (*(void (**)(uint64_t *))(*v21 + 8))(v21);
          }
          else
          {
            icu::UVector::addElement((icu::UVector *)v46, v21, a5);
            if (*(int *)a5 >= 1) {
              goto LABEL_50;
            }
          }
        }
      }
    }
    unint64_t v15 = v56;
    if (v56) {
      break;
    }
LABEL_26:
    if (v16 == ++v17) {
      goto LABEL_29;
    }
  }
  uint64_t v22 = icu::UVector::orphanElementAt((icu::UVector *)((char *)&v55 + 8), 0);
  __int16 v25 = icu::UMemory::operator new(v24, (icu::UMemory *)0x68, v23);
  if (v25)
  {
    uint64_t v21 = v25;
    icu::UnicodeString::UnicodeString((uint64_t)v49, (uint64_t)L"%Pass");
    icu::UnicodeString::UnicodeString((uint64_t)v48, v18);
    icu::operator+((uint64_t)v49, (uint64_t)v48, (uint64_t)&v50);
    sub_18C9A8B48(v21, &v50, v22, 1);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v50);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v48);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v49);
    icu::UVector::addElement((icu::UVector *)v46, v21, a5);
    unint64_t v15 = *(unsigned int *)a5;
    if ((int)v15 >= 1) {
      goto LABEL_50;
    }
    ++v18;
    goto LABEL_26;
  }
  if (*(int *)a5 <= 0) {
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  }
LABEL_51:
  icu::UVector::~UVector((icu::UVector *)v46);
  uint64_t Instance = 0;
LABEL_2:
  sub_18C9AB024(&v55);
  return Instance;
}

icu::UnicodeString *icu::Transliterator::toRules(icu::Transliterator *this, icu::UnicodeString *a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    if (v5)
    {
      icu::UnicodeString::unBogus((uint64_t)a2);
    }
    else
    {
      if ((v5 & 0x8000u) == 0) {
        unsigned int v6 = v5 >> 5;
      }
      else {
        unsigned int v6 = *((_DWORD *)a2 + 3);
      }
      if (v6) {
        *((_WORD *)a2 + 4) &= 0x1Fu;
      }
    }
    memset(v18, 0, sizeof(v18));
    uint64_t v8 = (UChar **)(*(uint64_t (**)(icu::Transliterator *))(*(void *)this + 104))(this);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v18, v8);
    LODWORD(v9) = WORD4(v18[0]) >> 5;
    if ((SWORD4(v18[0]) & 0x8000u) == 0) {
      unint64_t v9 = v9;
    }
    else {
      unint64_t v9 = HIDWORD(v18[0]);
    }
    if ((int)v9 >= 1)
    {
      int v10 = 0;
      do
      {
        int v11 = (icu::UnicodeString *)icu::UnicodeString::char32At((uint64_t *)v9, (icu::UnicodeString *)v18, v10);
        unsigned int v12 = v11;
        if (!icu::ICU_Utility::escapeUnprintable(a2, v11)) {
          icu::UnicodeString::append((uint64_t)a2, v12);
        }
        if (v12 < 0x10000) {
          int v13 = 1;
        }
        else {
          int v13 = 2;
        }
        v10 += v13;
        LODWORD(v9) = WORD4(v18[0]) >> 5;
        if ((SWORD4(v18[0]) & 0x8000u) == 0) {
          unint64_t v9 = v9;
        }
        else {
          unint64_t v9 = HIDWORD(v18[0]);
        }
      }
      while (v10 < (int)v9);
    }
    icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)v18);
  }
  else
  {
    uint64_t v7 = (UChar **)(*(uint64_t (**)(icu::Transliterator *))(*(void *)this + 104))(this);
    icu::UnicodeString::operator=((UChar **)a2, v7);
  }
  signed int v17 = ":";
  icu::UnicodeString::UnicodeString(v18, 1, &v17);
  if ((SWORD4(v18[0]) & 0x8000u) == 0) {
    uint64_t v14 = WORD4(v18[0]) >> 5;
  }
  else {
    uint64_t v14 = HIDWORD(v18[0]);
  }
  icu::UnicodeString::doReplace(a2, 0, 0, (const icu::UnicodeString *)v18, 0, v14);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v18);
  LOWORD(v18[0]) = 59;
  icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)v18, 0, 1);
  return a2;
}

uint64_t icu::Transliterator::countElements(icu::Transliterator *this)
{
  if (!this) {
    return 0;
  }
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 136);

  return v2();
}

icu::Transliterator *icu::Transliterator::getElement(icu::Transliterator *this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return this;
  }
  if (this)
  {
    uint64_t v7 = v6;
    if (v6)
    {
      int v8 = (*(uint64_t (**)(void *))(*(void *)v6 + 136))(v6);
      if ((a2 & 0x80000000) != 0) {
        goto LABEL_13;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = 1;
  if ((a2 & 0x80000000) != 0)
  {
LABEL_13:
    *a3 = U_INDEX_OUTOFBOUNDS_ERROR;
    return this;
  }
LABEL_8:
  if (v8 <= (int)a2) {
    goto LABEL_13;
  }
  if (v8 == 1) {
    return this;
  }
  unint64_t v9 = *(uint64_t (**)(void *, uint64_t))(*(void *)v7 + 144);

  return (icu::Transliterator *)v9(v7, a2);
}

icu::UVector **icu::Transliterator::getSourceSet(icu::Transliterator *this, icu::UVector **a2)
{
  (*(void (**)(icu::Transliterator *))(*(void *)this + 120))(this);
  UParseError v4 = (const void *)*((void *)this + 9);
  if (v4)
  {
    if (v5)
    {
      icu::UnicodeSet::retainAll(a2, v5);
    }
    else
    {
      int v8 = (icu::UnicodeSet *)icu::UMemory::operator new(v7, (icu::UMemory *)0xC8, v6);
      if (v8)
      {
        unint64_t v9 = v8;
        double v10 = icu::UnicodeSet::UnicodeSet(v8);
        (*(void (**)(double))(*(void *)(*((void *)this + 9) + 8) + 40))(v10);
        icu::UnicodeSet::retainAll(a2, v9);
        unsigned int v12 = icu::UnicodeSet::~UnicodeSet(v11, v9);
        icu::UMemory::operator delete(v12);
      }
    }
  }
  return a2;
}

icu::UnicodeSet *icu::Transliterator::handleGetSourceSet(icu::Transliterator *this, icu::UnicodeSet *a2)
{
  return icu::UnicodeSet::clear(a2);
}

icu::UnicodeSet *icu::Transliterator::getTargetSet(icu::Transliterator *this, icu::UnicodeSet *a2)
{
  return icu::UnicodeSet::clear(a2);
}

void icu::Transliterator::registerFactory(unint64_t a1, uint64_t a2, uint64_t a3)
{
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  int v9 = 0;
  uint64_t v8 = qword_1E9192898;
  if (qword_1E9192898) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v9, v6))
  {
    uint64_t v8 = qword_1E9192898;
LABEL_4:
    int v10 = 0;
    sub_18C9F04D8(v8, a1, a2, a3, 1, &v10, v7);
  }
  umtx_unlock((std::mutex **)&unk_1E91928A0);
}

uint64_t *icu::Transliterator::_registerFactory(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = 0;
  return sub_18C9F04D8(qword_1E9192898, a1, a2, a3, 1, &v4, qword_1E9192000);
}

void icu::Transliterator::_registerSpecialInverse(icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  int v3 = 0;
  sub_18C9F3FA0((uint64_t)this, (uint64_t)a2, (int)a3, &v3);
}

void icu::Transliterator::registerInstance(icu::Transliterator *this, icu::Transliterator *a2)
{
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  int v6 = 0;
  uint64_t v5 = qword_1E9192898;
  if (qword_1E9192898) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v6, v3))
  {
    uint64_t v5 = qword_1E9192898;
LABEL_4:
    int v7 = 0;
    sub_18C9F0244(v5, (unint64_t)this, 1, &v7, v4);
  }
  umtx_unlock((std::mutex **)&unk_1E91928A0);
}

uint64_t *icu::Transliterator::_registerInstance(icu::Transliterator *this, icu::Transliterator *a2)
{
  int v3 = 0;
  return sub_18C9F0244(qword_1E9192898, (unint64_t)this, 1, &v3, qword_1E9192000);
}

void icu::Transliterator::registerAlias(icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  v8[0] = U_ZERO_ERROR;
  uint64_t v7 = qword_1E9192898;
  if (qword_1E9192898) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry(v8, v5))
  {
    uint64_t v7 = qword_1E9192898;
LABEL_4:
    v8[1] = U_ZERO_ERROR;
    sub_18C9F06B4(v7, (unint64_t)this, (uint64_t)a2, 0, 1, v6);
  }
  umtx_unlock((std::mutex **)&unk_1E91928A0);
}

uint64_t *icu::Transliterator::_registerAlias(icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  return sub_18C9F06B4(qword_1E9192898, (unint64_t)this, (uint64_t)a2, 0, 1, qword_1E9192000);
}

void icu::Transliterator::unregister(icu::Transliterator *this, const icu::UnicodeString *a2)
{
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  int v5 = 0;
  uint64_t v4 = qword_1E9192898;
  if (qword_1E9192898) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v5, v3))
  {
    uint64_t v4 = qword_1E9192898;
LABEL_4:
    sub_18C9F07AC(v4, (uint64_t)this);
  }
  umtx_unlock((std::mutex **)&unk_1E91928A0);
}

uint64_t icu::Transliterator::countAvailableIDs(icu::Transliterator *this)
{
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  int v5 = 0;
  uint64_t v2 = qword_1E9192898;
  if (!qword_1E9192898)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v5, v1))
    {
      uint64_t v3 = 0;
      goto LABEL_5;
    }
    uint64_t v2 = qword_1E9192898;
  }
  uint64_t v3 = sub_18C9F0A68(v2);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1E91928A0);
  return v3;
}

uint64_t *icu::Transliterator::getAvailableID(icu::Transliterator *this)
{
  int v1 = (int)this;
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  int v6 = 0;
  uint64_t v3 = qword_1E9192898;
  if (!qword_1E9192898)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v6, v2))
    {
      uint64_t v4 = 0;
      goto LABEL_5;
    }
    uint64_t v3 = qword_1E9192898;
  }
  uint64_t v4 = sub_18C9F0A70(v3, v1);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1E91928A0);
  return v4;
}

uint64_t *icu::Transliterator::getAvailableIDs(UErrorCode *this, UErrorCode *a2)
{
  if (*(int *)this <= 0)
  {
    umtx_lock((atomic_ullong *)&unk_1E91928A0);
    uint64_t v6 = qword_1E9192898;
    if (!qword_1E9192898)
    {
      if (!icu::Transliterator::initializeRegistry(this, v4))
      {
        umtx_unlock((std::mutex **)&unk_1E91928A0);
        goto LABEL_9;
      }
      uint64_t v6 = qword_1E9192898;
    }
    uint64_t v2 = sub_18C9F0B6C(v6, (unint64_t)v4, v5);
    umtx_unlock((std::mutex **)&unk_1E91928A0);
    if (v2) {
      return v2;
    }
LABEL_9:
    uint64_t v2 = 0;
    *this = U_INTERNAL_TRANSLITERATOR_ERROR;
    return v2;
  }
  return 0;
}

uint64_t icu::Transliterator::countAvailableSources(icu::Transliterator *this)
{
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  int v5 = 0;
  uint64_t v2 = qword_1E9192898;
  if (!qword_1E9192898)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v5, v1))
    {
      uint64_t v3 = 0;
      goto LABEL_5;
    }
    uint64_t v2 = qword_1E9192898;
  }
  uint64_t v3 = sub_18C9F0BDC(v2);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1E91928A0);
  return v3;
}

uint64_t icu::Transliterator::_countAvailableSources(icu::Transliterator *this)
{
  return sub_18C9F0BDC(qword_1E9192898);
}

UChar **icu::Transliterator::getAvailableSource(icu::Transliterator *this, UChar **a2, icu::UnicodeString *a3)
{
  int v4 = (int)this;
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  int v8 = 0;
  uint64_t v6 = qword_1E9192898;
  if (qword_1E9192898) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v8, v5))
  {
    uint64_t v6 = qword_1E9192898;
LABEL_4:
    sub_18C9F0BE4(v6, v4, a2);
  }
  umtx_unlock((std::mutex **)&unk_1E91928A0);
  return a2;
}

UChar **icu::Transliterator::_getAvailableSource(icu::Transliterator *this, UChar **a2, icu::UnicodeString *a3)
{
  return sub_18C9F0BE4(qword_1E9192898, (int)this, a2);
}

uint64_t *icu::Transliterator::countAvailableTargets(icu::Transliterator *this, const icu::UnicodeString *a2)
{
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  int v7 = 0;
  uint64_t v4 = qword_1E9192898;
  if (!qword_1E9192898)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v7, v3))
    {
      int v5 = 0;
      goto LABEL_5;
    }
    uint64_t v4 = qword_1E9192898;
  }
  int v5 = sub_18C9F0C8C(v4, (uint64_t)this);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1E91928A0);
  return v5;
}

uint64_t *icu::Transliterator::_countAvailableTargets(icu::Transliterator *this, const icu::UnicodeString *a2)
{
  return sub_18C9F0C8C(qword_1E9192898, (uint64_t)this);
}

const icu::UnicodeString *icu::Transliterator::getAvailableTarget(icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, icu::UnicodeString *a4)
{
  int v6 = (int)this;
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  int v10 = 0;
  uint64_t v8 = qword_1E9192898;
  if (qword_1E9192898) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v10, v7))
  {
    uint64_t v8 = qword_1E9192898;
LABEL_4:
    sub_18C9F0CC8(v8, v6, a2, (uint64_t)a3);
  }
  umtx_unlock((std::mutex **)&unk_1E91928A0);
  return a3;
}

uint64_t icu::Transliterator::_getAvailableTarget(icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, icu::UnicodeString *a4)
{
  return sub_18C9F0CC8(qword_1E9192898, (int)this, a2, (uint64_t)a3);
}

uint64_t icu::Transliterator::countAvailableVariants(icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  int v9 = 0;
  uint64_t v6 = qword_1E9192898;
  if (!qword_1E9192898)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v9, v5))
    {
      uint64_t v7 = 0;
      goto LABEL_5;
    }
    uint64_t v6 = qword_1E9192898;
  }
  uint64_t v7 = sub_18C9F0D84(v6, (uint64_t)this, (uint64_t)a2);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1E91928A0);
  return v7;
}

uint64_t icu::Transliterator::_countAvailableVariants(icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  return sub_18C9F0D84(qword_1E9192898, (uint64_t)this, (uint64_t)a2);
}

const icu::UnicodeString *icu::Transliterator::getAvailableVariant(icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5)
{
  int v8 = (int)this;
  umtx_lock((atomic_ullong *)&unk_1E91928A0);
  int v12 = 0;
  uint64_t v10 = qword_1E9192898;
  if (qword_1E9192898) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v12, v9))
  {
    uint64_t v10 = qword_1E9192898;
LABEL_4:
    sub_18C9F0DE0(v10, v8, a2, (uint64_t)a3, (uint64_t)a4);
  }
  umtx_unlock((std::mutex **)&unk_1E91928A0);
  return a4;
}

uint64_t icu::Transliterator::_getAvailableVariant(icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5)
{
  return sub_18C9F0DE0(qword_1E9192898, (int)this, a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t sub_18C9EEAE8()
{
  sub_18C9F42CC();
  if (qword_1E9192898)
  {
    unint64_t v0 = (void *)sub_18C9EF9E0();
    icu::UMemory::operator delete(v0);
    qword_1E9192898 = 0;
  }
  return 1;
}

void *sub_18C9EEB24(void *a1, UChar **a2, UChar **a3, uint64_t a4, uint64_t a5)
{
  a1[17] = a4;
  a1[18] = a5;
  a1[19] = 0x100000000;
  return a1;
}

void *sub_18C9EEB80(void *a1)
{
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 9));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

icu::CompoundTransliterator *sub_18C9EEBE4(uint64_t a1, UParseError *a2, UErrorCode *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 > 0) {
    return 0;
  }
  int v8 = *(_DWORD *)(a1 + 156);
  if (v8)
  {
    if (v8 != 1)
    {
      if (v8 == 2) {
        abort();
      }
      return 0;
    }
    int v14 = *(_DWORD *)(*(void *)(a1 + 136) + 8);
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    icu::UnicodeString::UnicodeString((uint64_t)&v53, 0xFFFF);
    LOWORD(v48) = -1;
    icu::UnicodeString::doAppend((uint64_t)&v53, (uint64_t)&v48, 0, 1);
    if ((SWORD4(v53) & 0x8000u) == 0) {
      int32_t v15 = WORD4(v53) >> 5;
    }
    else {
      int32_t v15 = HIDWORD(v53);
    }
    if (*(__int16 *)(a1 + 80) < 0)
    {
      int32_t v16 = *(_DWORD *)(a1 + 84);
      if (BYTE8(v53)) {
        goto LABEL_45;
      }
    }
    else
    {
      int32_t v16 = *(unsigned __int16 *)(a1 + 80) >> 5;
      if (BYTE8(v53)) {
        goto LABEL_45;
      }
    }
    if (v15 >= 1)
    {
      if ((BYTE8(v53) & 2) != 0) {
        unint64_t v17 = (unint64_t)&v53 | 0xA;
      }
      else {
        unint64_t v17 = *((void *)&v54 + 1);
      }
      uint64_t v18 = a1 + 72;
      int v19 = 0;
      while (1)
      {
        int v20 = icu::UnicodeString::indexOf(v18, v17, 0, v15, v19, v16);
        if (v20 < 0) {
          break;
        }
        if (*(__int16 *)(a1 + 80) < 0)
        {
          int v21 = *(_DWORD *)(a1 + 84);
          char v22 = BYTE8(v53);
          if ((SWORD4(v53) & 0x8000u) == 0) {
            int32_t v15 = WORD4(v53) >> 5;
          }
          else {
            int32_t v15 = HIDWORD(v53);
          }
          if (v21 <= v20) {
            int v19 = *(_DWORD *)(a1 + 84);
          }
          else {
            int v19 = v20 + 1;
          }
          if (BYTE8(v53)) {
            break;
          }
        }
        else
        {
          int v21 = *(unsigned __int16 *)(a1 + 80) >> 5;
          char v22 = BYTE8(v53);
          if ((SWORD4(v53) & 0x8000u) == 0) {
            int32_t v15 = WORD4(v53) >> 5;
          }
          else {
            int32_t v15 = HIDWORD(v53);
          }
          if (v20 >= (*(unsigned __int16 *)(a1 + 80) >> 5)) {
            int v19 = *(unsigned __int16 *)(a1 + 80) >> 5;
          }
          else {
            int v19 = v20 + 1;
          }
          if (BYTE8(v53)) {
            break;
          }
        }
        if (v15 < 1) {
          break;
        }
        int32_t v16 = v21 - v19;
        if ((v22 & 2) != 0) {
          unint64_t v17 = (unint64_t)&v53 | 0xA;
        }
        else {
          unint64_t v17 = *((void *)&v54 + 1);
        }
        uint64_t v18 = a1 + 72;
      }
    }
LABEL_45:
    uint64_t v47 = 0;
    memset(v46, 0, sizeof(v46));
    icu::UVector::UVector((uint64_t)v46, (uint64_t)uprv_deleteUObject, 0, (int *)a3);
    long long v49 = 0u;
    uint64_t v52 = 0;
    long long v51 = 0u;
    long long v50 = 0u;
    unint64_t v48 = &unk_1EDA47700;
    LOWORD(v49) = 2;
    unsigned int v23 = *(unsigned __int16 *)(a1 + 80);
    if ((v23 & 0x8000) != 0) {
      int32_t v24 = *(_DWORD *)(a1 + 84);
    }
    else {
      int32_t v24 = v23 >> 5;
    }
    uint64_t v25 = icu::UnicodeString::doIndexOf(a1 + 72, 0xFFFFu, 0, v24);
    if ((v25 & 0x80000000) == 0)
    {
      uint64_t v26 = v25;
      do
      {
        if ((v49 & 0x8000u) == 0) {
          uint64_t v27 = (unsigned __int16)v49 >> 5;
        }
        else {
          uint64_t v27 = DWORD1(v49);
        }
        icu::UnicodeString::doReplace((icu::UnicodeString *)&v48, 0, v27, (const icu::UnicodeString *)(a1 + 72), 0, v26);
        if (v26 == 2147483646)
        {
          if (*(_WORD *)(a1 + 80)) {
            __int16 v28 = 2;
          }
          else {
            __int16 v28 = *(_WORD *)(a1 + 80) & 0x1F;
          }
          *(_WORD *)(a1 + 80) = v28;
        }
        else
        {
          icu::UnicodeString::doReplace(a1 + 72, 0, (v26 + 1), 0, 0, 0);
        }
        if ((unsigned __int16)v49 >= 0x20u)
        {
          uint64_t Instance = (void *)icu::Transliterator::createInstance((int)&v48, 0, (int)a2, a3);
          icu::UVector::adoptElement((uint64_t (**)(void *))v46, Instance, a3);
        }
        unsigned int v30 = *(icu::UVector **)(a1 + 136);
        if (*((_DWORD *)v30 + 2))
        {
          unsigned int v31 = (void *)icu::UVector::orphanElementAt(v30, 0);
          icu::UVector::adoptElement((uint64_t (**)(void *))v46, v31, a3);
        }
        if (*(__int16 *)(a1 + 80) < 0) {
          int32_t v32 = *(_DWORD *)(a1 + 84);
        }
        else {
          int32_t v32 = *(unsigned __int16 *)(a1 + 80) >> 5;
        }
        uint64_t v26 = icu::UnicodeString::doIndexOf(a1 + 72, 0xFFFFu, 0, v32);
      }
      while ((v26 & 0x80000000) == 0);
    }
    if (*(unsigned __int16 *)(a1 + 80) < 0x20u) {
      goto LABEL_71;
    }
    for (uint64_t i = (void *)icu::Transliterator::createInstance((int)a1 + 72, 0, (int)a2, a3);
          ;
          uint64_t i = (void *)icu::UVector::orphanElementAt(v34, 0))
    {
      icu::UVector::adoptElement((uint64_t (**)(void *))v46, i, a3);
LABEL_71:
      char v34 = *(icu::UVector **)(a1 + 136);
      if (!*((_DWORD *)v34 + 2)) {
        break;
      }
    }
    icu::UVector::setDeleter((icu::UVector *)v46, 0);
    UErrorCode v36 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v36 < 1)
    {
      uint64_t v3 = (icu::CompoundTransliterator *)icu::UMemory::operator new(v36, (icu::UMemory *)0x68, v35);
      if (!v3)
      {
        char v44 = 0;
        uint64_t v37 = 7;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_86;
      }
      uint64_t v42 = *(icu::UnicodeSet **)(a1 + 144);
      if (v42) {
        uint64_t v43 = icu::UnicodeSet::clone(v42, v40, v41);
      }
      else {
        uint64_t v43 = 0;
      }
      icu::CompoundTransliterator::CompoundTransliterator(v3, (UChar **)(a1 + 8), (icu::UVector *)v46, v43, v14, a2, a3);
    }
    else
    {
      uint64_t v37 = DWORD2(v46[0]);
      if (SDWORD2(v46[0]) >= 1)
      {
        signed int v38 = 0;
        do
        {
          uint64_t v39 = icu::UVector::elementAt((icu::UVector *)v46, v38);
          if (v39) {
            (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
          }
          ++v38;
          uint64_t v37 = DWORD2(v46[0]);
        }
        while (v38 < SDWORD2(v46[0]));
      }
      uint64_t v3 = 0;
    }
    char v44 = 1;
LABEL_86:
    icu::UnicodeString::~UnicodeString((void *)v37, (icu::UnicodeString *)&v48);
    icu::UVector::~UVector((icu::UVector *)v46);
    icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v53);
    if (v44) {
      return v3;
    }
    return 0;
  }
  uint64_t v9 = icu::Transliterator::createInstance((int)a1 + 72, 0, (int)a2, a3);
  int v11 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v11 > 0) {
    return 0;
  }
  uint64_t v3 = (icu::CompoundTransliterator *)v9;
  int v12 = *(icu::UnicodeSet **)(a1 + 144);
  if (v12)
  {
    int v13 = icu::UnicodeSet::clone(v12, v10, v11);
    icu::Transliterator::adoptFilter(v3, v13);
  }
  return v3;
}

BOOL sub_18C9EF0C8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 156) == 2;
}

double sub_18C9EF0D8(uint64_t a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0) {
    *(void *)&double result = sub_18C9AB028(a2, a1 + 72, *(_DWORD *)(a1 + 152), a3, a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_18C9EF104(uint64_t a1, UChar **a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (UChar **)(a1 + 8);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2);
  *(void *)(a1 + 72) = &unk_1EDA47700;
  *(_WORD *)(a1 + 80) = 2;
  *(void *)(a1 + 136) = &unk_1EDA47700;
  *(_WORD *)(a1 + 144) = 2;
  *(void *)(a1 + 200) = &unk_1EDA47700;
  *(_WORD *)(a1 + 208) = 2;
  *(void *)(a1 + 272) = 0;
  UErrorCode v16 = U_ZERO_ERROR;
  long long v24 = 0u;
  memset(v23, 0, sizeof(v23));
  icu::Locale::Locale((icu::Locale *)v23, "", 0, 0, 0);
  icu::LocaleUtility::initLocaleFromName((icu::LocaleUtility *)a2, (const icu::UnicodeString *)v23, v5);
  if (!BYTE8(v24))
  {
    int v13 = (icu::ResourceBundle *)icu::UMemory::operator new(0, (icu::UMemory *)0x18, v6);
    if (!v13)
    {
      *(void *)(a1 + 272) = 0;
      goto LABEL_19;
    }
    int v14 = icu::ResourceBundle::ResourceBundle(v13, "icudt74l-translit", (char **)v23, &v16);
    *(void *)(a1 + 272) = v14;
    if (v16 > U_ZERO_ERROR || v16 == U_USING_DEFAULT_WARNING)
    {
      (*(void (**)(icu::ResourceBundle *))(*(void *)v14 + 8))(v14);
      *(void *)(a1 + 272) = 0;
    }
  }
  UErrorCode v16 = U_ZERO_ERROR;
  int v22 = 0;
  long long v21 = 0u;
  long long v20 = 0u;
  int32_t value = -1;
  v17[0] = (UChar *)((char *)&v17[1] + 5);
  LODWORD(v17[1]) = 40;
  WORD2(v17[1]) = 0;
  LODWORD(v18) = 0;
  appended = icu::CharString::appendInvariantChars((icu::CharString *)v17, (const icu::UnicodeString *)a2, &v16);
  int Code = uscript_getCode(*(char **)appended, &value, 10, (int *)&v16);
  if (BYTE4(v17[1])) {
    uprv_free(v17[0]);
  }
  if (Code >= 1 && value != -1)
  {
    Name = uscript_getName(value);
    icu::UnicodeString::UnicodeString(v17, Name, 0xFFFFFFFFLL, 0);
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 200), (icu::UnicodeString *)v17);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
  }
  if (*(void *)(a1 + 272))
  {
    memset(&v17[1], 0, 48);
    uint64_t v18 = 0;
    v17[0] = (UChar *)&unk_1EDA47700;
    LOWORD(v17[1]) = 2;
    icu::LocaleUtility::initNameFromLocale((icu::LocaleUtility *)v23, (const icu::Locale *)v17, v8);
    int v12 = (void *)LOWORD(v17[1]);
    if (((uint64_t)v17[1] & 1) == 0) {
      icu::UnicodeString::operator=(v4, v17);
    }
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v17);
    goto LABEL_18;
  }
  if (*(__int16 *)(a1 + 208) < 0)
  {
    if (!*(_DWORD *)(a1 + 212)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (*(unsigned __int16 *)(a1 + 208) >> 5) {
LABEL_17:
  }
    icu::UnicodeString::operator=(v4, (UChar **)(a1 + 200));
LABEL_18:
  sub_18C9EF40C(a1);
LABEL_19:
  icu::Locale::~Locale((icu::Locale *)v23);
  return a1;
}

uint64_t sub_18C9EF40C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = (UChar **)(result + 72);
  uint64_t v3 = (UChar **)(result + 8);
  unsigned int v4 = *(unsigned __int16 *)(result + 80);
  if (v4)
  {
    if (*(_WORD *)(result + 16)) {
      return result;
    }
    goto LABEL_14;
  }
  if ((v4 & 0x8000) != 0) {
    int v5 = *(_DWORD *)(result + 84);
  }
  else {
    int v5 = v4 >> 5;
  }
  unsigned int v6 = *(unsigned __int16 *)(result + 16);
  if ((v6 & 0x8000u) == 0) {
    unsigned int v7 = v6 >> 5;
  }
  else {
    unsigned int v7 = *(_DWORD *)(result + 20);
  }
  if ((v6 & 1) != 0
    || v5 != v7
    || (double result = icu::UnicodeString::doEquals((icu::UnicodeString *)(result + 72), (const icu::UnicodeString *)v3, v5),
        !result))
  {
LABEL_14:
    icu::UnicodeString::operator=(v2, v3);
    *(unsigned char *)(v1 + 264) = *(void *)(v1 + 272) != 0;
    return sub_18C9EF544(v1);
  }
  return result;
}

void *sub_18C9EF4D4(void *a1)
{
  uint64_t v2 = a1[34];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 25));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 17));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 9));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

uint64_t sub_18C9EF544(uint64_t result)
{
  uint64_t v1 = result;
  *(unsigned char *)(result + 265) = 0;
  if (*(unsigned char *)(result + 264))
  {
    icu::UnicodeString::operator=((UChar **)(result + 136), (UChar **)(result + 72));
    unsigned int v2 = *(unsigned __int16 *)(v1 + 144);
    if ((v2 & 0x8000) != 0) {
      int32_t v3 = *(_DWORD *)(v1 + 148);
    }
    else {
      int32_t v3 = v2 >> 5;
    }
    double result = icu::UnicodeString::doLastIndexOf(v1 + 136, 0x5Fu, 0, v3);
    if ((int)result < 1)
    {
      return (uint64_t)icu::UnicodeString::operator=((UChar **)(v1 + 136), (UChar **)(v1 + 200));
    }
    else
    {
      unsigned int v5 = *(unsigned __int16 *)(v1 + 144);
      if (*(__int16 *)(v1 + 144) < 0) {
        unsigned int v6 = *(_DWORD *)(v1 + 148);
      }
      else {
        unsigned int v6 = v5 >> 5;
      }
      if (v6 > result)
      {
        if (result > 0x3FF)
        {
          *(_WORD *)(v1 + 144) = v5 | 0xFFE0;
          *(_DWORD *)(v1 + 148) = result;
        }
        else
        {
          *(_WORD *)(v1 + 144) = *(_WORD *)(v1 + 144) & 0x1F | (32 * result);
        }
      }
      *(unsigned char *)(v1 + 265) = 1;
    }
  }
  else
  {
    unsigned int v4 = *(unsigned __int16 *)(result + 144);
    if ((v4 & 1) == 0)
    {
      if ((v4 & 0x8000) != 0)
      {
        if (!*(_DWORD *)(result + 148)) {
          return result;
        }
      }
      else if (!(v4 >> 5))
      {
        return result;
      }
      *(_WORD *)(result + 144) &= 0x1Fu;
      return result;
    }
    uint64_t v7 = result + 136;
    return icu::UnicodeString::unBogus(v7);
  }
  return result;
}

void *sub_18C9EF664(void *a1)
{
  unsigned int v2 = (void *)*(unsigned int *)a1;
  switch(v2)
  {
    case 3:
      int32_t v3 = (icu::UVector *)a1[11];
      if (v3) {
LABEL_9:
      }
        (*(void (**)(icu::UVector *))(*(void *)v3 + 8))(v3);
      break;
    case 4:
      uint64_t v6 = a1[11];
      if (v6)
      {
        uint64_t v7 = (void *)sub_18C9A9204(v6);
        icu::UMemory::operator delete(v7);
      }
      break;
    case 5:
      while (1)
      {
        int32_t v3 = (icu::UVector *)a1[11];
        if (!v3) {
          break;
        }
        if (!*((_DWORD *)v3 + 2)) {
          goto LABEL_9;
        }
        uint64_t v4 = icu::UVector::orphanElementAt(v3, 0);
        if (v4)
        {
          unsigned int v5 = (void *)sub_18C9A9204(v4);
          icu::UMemory::operator delete(v5);
        }
      }
      break;
  }
  int v8 = (icu::UnicodeSet *)a1[10];
  if (v8)
  {
    uint64_t v9 = icu::UnicodeSet::~UnicodeSet(v2, v8);
    icu::UMemory::operator delete(v9);
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 1));
  return a1;
}

uint64_t sub_18C9EF724(uint64_t a1, UErrorCode *a2)
{
  *(void *)(a1 + 8) = 0;
  if (*(int *)a2 <= 0
    && (uint64_t v4 = a1 + 16,
        uhash_init((int32x2_t *)(a1 + 16), (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, (int *)a2), *(int *)a2 < 1))
  {
    *(void *)(a1 + 8) = v4;
    uhash_setKeyDeleter(a1 + 16, (uint64_t)uprv_deleteUObject);
    int v9 = *a2;
    *(void *)(a1 + 96) = 0;
    if (v9 <= 0)
    {
      uhash_initSize((int32x2_t *)(a1 + 104), (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, 134, (int *)a2);
      if (*(int *)a2 <= 0)
      {
        *(void *)(a1 + 96) = a1 + 104;
        uhash_setKeyDeleter(a1 + 104, (uint64_t)uprv_deleteUObject);
      }
    }
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  icu::UVector::UVector((icu::UVector *)(a1 + 184), 0xBu, a2);
  *(void *)(a1 + 224) = 0;
  if (*(int *)a2 <= 0)
  {
    uhash_initSize((int32x2_t *)(a1 + 232), (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, 493, (int *)a2);
    if (*(int *)a2 <= 0)
    {
      *(void *)(a1 + 224) = a1 + 232;
      uhash_setKeyDeleter(a1 + 232, (uint64_t)uprv_deleteUObject);
    }
  }
  uhash_setValueDeleter(*(void *)(a1 + 8), (uint64_t)sub_18C9EF95C);
  icu::UVector::setDeleter((icu::UVector *)(a1 + 184), (void (*)(void *))uprv_deleteUObject);
  icu::UVector::setComparer(a1 + 184, (uint64_t)uhash_compareCaselessUnicodeString);
  uint64_t v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x40, v5);
  if (v7)
  {
    uint64_t *v7 = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v7 + 4) = 2;
    icu::UVector::adoptElement((uint64_t (**)(void *))(a1 + 184), v7, a2);
  }
  uhash_setValueDeleter(*(void *)(a1 + 96), (uint64_t)uhash_deleteHashtable);
  return a1;
}

void sub_18C9EF95C(void *a1)
{
  if (a1)
  {
    uint64_t v1 = sub_18C9EF664(a1);
    icu::UMemory::operator delete(v1);
  }
}

void *sub_18C9EF990(void *a1)
{
  unsigned int v2 = (unsigned char *)a1[28];
  if (v2) {
    uhash_close(v2);
  }
  icu::UVector::~UVector((icu::UVector *)(a1 + 23));
  int32_t v3 = (unsigned char *)a1[12];
  if (v3) {
    uhash_close(v3);
  }
  uint64_t v4 = (unsigned char *)a1[1];
  if (v4) {
    uhash_close(v4);
  }
  return a1;
}

uint64_t *sub_18C9EF9E4(uint64_t a1, UChar **a2, uint64_t **a3, UErrorCode *a4)
{
  double result = (uint64_t *)sub_18C9EFA4C(a1, (uint64_t)a2);
  if (result)
  {
    return sub_18C9EFB8C((uint64_t)result, a2, (uint64_t)result, a3, a4);
  }
  return result;
}

uint64_t sub_18C9EFA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v20 = 0u;
  uint64_t v23 = 0;
  long long v22 = 0u;
  long long v21 = 0u;
  int v19 = (UChar *)&unk_1EDA47700;
  LOWORD(v20) = 2;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v18 = 0;
  long long v17 = 0u;
  uint64_t v13 = 0;
  int v14 = (UChar *)&unk_1EDA47700;
  LOWORD(v15) = 2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  int v9 = &unk_1EDA47700;
  LOWORD(v10) = 2;
  char v8 = 0;
  sub_18C9F3A44(a2, (icu::UnicodeString *)&v19, (uint64_t)&v14, (uint64_t)&v9, &v8);
  uint64_t v3 = sub_18C9F1A50(a1, &v19, &v14, (uint64_t)&v9);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v9);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v19);
  return v3;
}

uint64_t *sub_18C9EFB8C(uint64_t a1, UChar **a2, uint64_t a3, uint64_t **a4, UErrorCode *a5)
{
  unint64_t v5 = (uint64_t *)*MEMORY[0x1E4F143B8];
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  switch(*(_DWORD *)a3)
  {
    case 0:
    case 1:
      uint64_t v36 = 0;
      memset(v35, 0, sizeof(v35));
      sub_18C9AAF0C(v35, a5);
      memset(v38, 0, sizeof(v38));
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v38, (UChar **)(a3 + 8));
      long long v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0xA0, v10);
      uint64_t v13 = v12;
      if (v12)
      {
        BOOL v14 = *(_DWORD *)a3 == 1;
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v12 + 1), a2);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v13 + 9), (UChar **)v38);
        v13[17] = 0;
        v13[18] = 0;
        uint64_t v15 = 2;
        *((_DWORD *)v13 + 38) = v14;
        *((_DWORD *)v13 + 39) = 2;
      }
      else
      {
        uint64_t v15 = 7;
        *a5 = U_MEMORY_ALLOCATION_ERROR;
      }
      *a4 = v13;
      icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)v38);
      sub_18C9AB024(v35);
      return 0;
    case 2:
      double result = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, (unint64_t)a2);
      if (!result) {
        goto LABEL_20;
      }
      long long v17 = result;
      uint64_t v18 = (UChar **)(a3 + 8);
      int v19 = *(_DWORD *)(a3 + 72);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 1), a2);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v17 + 9), v18);
      double result = 0;
      v17[17] = 0;
      v17[18] = 0;
      *((_DWORD *)v17 + 38) = v19;
      *((_DWORD *)v17 + 39) = 2;
      *a4 = v17;
      return result;
    case 3:
      double result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a3 + 88) + 24))(*(void *)(a3 + 88));
      if (!result) {
        goto LABEL_21;
      }
      return result;
    case 4:
      double result = icu::UMemory::operator new(v5, (icu::UMemory *)0x68, (unint64_t)a2);
      if (!result) {
        goto LABEL_21;
      }
      return (uint64_t *)sub_18C9A8AD0((int)result, (int)a2, *(void *)(a3 + 88), 0);
    case 5:
      double result = icu::UMemory::operator new(v5, (icu::UMemory *)0x28, (unint64_t)a2);
      if (!result) {
        goto LABEL_21;
      }
      long long v20 = (uint64_t (**)(void *))result;
      icu::UVector::UVector(result, uprv_deleteUObject, 0, *(unsigned int *)(*(void *)(a3 + 88) + 8), a5);
      if (*(int *)a5 > 0) {
        goto LABEL_12;
      }
      signed int v24 = 0;
      break;
    case 6:
      double result = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, (unint64_t)a2);
      if (result)
      {
        long long v22 = result;
        uint64_t v23 = *(void *)(a3 + 80);
        result[1] = (uint64_t)&unk_1EDA47700;
        *((_WORD *)result + 8) = 2;
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 9), (UChar **)(a3 + 8));
        double result = 0;
        v22[17] = 0;
        v22[18] = v23;
        v22[19] = 0;
        *a4 = v22;
        return result;
      }
LABEL_20:
      *a4 = 0;
      goto LABEL_21;
    case 7:
      double result = (uint64_t *)(*(uint64_t (**)(UChar **, void))(a3 + 88))(a2, *(void *)(a3 + 96));
      if (!result) {
        goto LABEL_21;
      }
      return result;
    default:
      abort();
  }
  while (1)
  {
    uint64_t v25 = (uint64_t *)*(unsigned int *)(*(void *)(a3 + 88) + 8);
    if (v24 >= (int)v25) {
      break;
    }
    uint64_t v26 = icu::UMemory::operator new(v25, (icu::UMemory *)0x68, v21);
    if (!v26)
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_12:
      (*((void (**)(uint64_t (**)(void *)))*v20 + 1))(v20);
      return 0;
    }
    uint64_t v27 = v26;
    icu::UnicodeString::UnicodeString((uint64_t)v38, (uint64_t)L"%Pass");
    icu::UnicodeString::UnicodeString((uint64_t)v37, v24 + 1);
    icu::operator+((uint64_t)v38, (uint64_t)v37, (uint64_t)v35);
    uint64_t v28 = icu::UVector::elementAt(*(icu::UVector **)(a3 + 88), v24);
    sub_18C9A8B48(v27, v35, v28, 0);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v35);
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v37);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v38);
    icu::UVector::adoptElement(v20, v27, a5);
    ++v24;
    if (*(int *)a5 >= 1) {
      goto LABEL_12;
    }
  }
  icu::UVector::setDeleter((icu::UVector *)v20, 0);
  double result = icu::UMemory::operator new(v33, (icu::UMemory *)0xA0, v32);
  char v34 = result;
  if (result)
  {
    sub_18C9EEB24(result, a2, (UChar **)(a3 + 8), (uint64_t)v20, *(void *)(a3 + 80));
    double result = 0;
    *a4 = v34;
  }
  else
  {
    *a4 = 0;
LABEL_21:
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t *sub_18C9EFFB8(uint64_t a1, UChar **a2, _DWORD *a3, uint64_t **a4, UErrorCode *a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  double result = (uint64_t *)sub_18C9EFA4C(a1, (uint64_t)a2);
  if (result)
  {
    uint64_t v10 = (uint64_t)result;
    uint64_t v27 = a4;
    if (*(_DWORD *)result > 2u) {
      return sub_18C9EFB8C((uint64_t)result, a2, v10, v27, a5);
    }
    int v11 = a3[14];
    if (v11 == 1)
    {
      if (a3[4]) {
        goto LABEL_9;
      }
      uint64_t v25 = (UChar **)icu::UVector::elementAt((icu::UVector *)(a3 + 12), 0);
      icu::UnicodeString::operator=((UChar **)(v10 + 8), v25);
      double result = (uint64_t *)sub_18C9ABAD4((uint64_t)a3);
      *(void *)(v10 + 80) = result;
      int v26 = 6;
    }
    else
    {
      if (v11) {
        goto LABEL_9;
      }
      int v12 = a3[4];
      if (v12 != 1)
      {
        if (!v12)
        {
          result[11] = 0;
          *(_DWORD *)double result = 6;
          uint64_t v28 = "A";
          icu::UnicodeString::UnicodeString(v29, 1, &v28);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v10 + 8), (icu::UnicodeString *)v29);
          double result = (uint64_t *)icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v29);
          return sub_18C9EFB8C((uint64_t)result, a2, v10, v27, a5);
        }
LABEL_9:
        *(_DWORD *)double result = 5;
        result[10] = sub_18C9ABAD4((uint64_t)a3);
        double result = icu::UMemory::operator new(v15, (icu::UMemory *)0x28, v14);
        if (result) {
          double result = (uint64_t *)icu::UVector::UVector((icu::UVector *)result, a5);
        }
        *(void *)(v10 + 88) = result;
        if (*(_WORD *)(v10 + 16)) {
          __int16 v16 = 2;
        }
        else {
          __int16 v16 = *(_WORD *)(v10 + 16) & 0x1F;
        }
        *(_WORD *)(v10 + 16) = v16;
        if (a3[4] <= a3[14]) {
          int v17 = a3[14];
        }
        else {
          int v17 = a3[4];
        }
        if (v17 >= 1)
        {
          for (signed int i = 0; i != v17; ++i)
          {
            if (i < a3[14])
            {
              double result = (uint64_t *)icu::UVector::elementAt((icu::UVector *)(a3 + 12), i);
              unsigned int v19 = *((unsigned __int16 *)result + 4);
              if (v19 >= 0x20)
              {
                int v20 = (__int16)v19;
                unsigned int v21 = v19 >> 5;
                if (v20 >= 0) {
                  uint64_t v22 = v21;
                }
                else {
                  uint64_t v22 = *((unsigned int *)result + 3);
                }
                double result = (uint64_t *)icu::UnicodeString::doAppend(v10 + 8, (const icu::UnicodeString *)result, 0, v22);
              }
            }
            if (a3[4])
            {
              uint64_t v23 = (void *)icu::UVector::orphanElementAt((icu::UVector *)(a3 + 2), 0);
              icu::UVector::addElement(*(icu::UVector **)(v10 + 88), v23, a5);
              if (v23)
              {
                if (*(int *)a5 >= 1)
                {
                  signed int v24 = (void *)sub_18C9A9204(v23);
                  icu::UMemory::operator delete(v24);
                }
              }
              v29[0] = -1;
              double result = (uint64_t *)icu::UnicodeString::doAppend(v10 + 8, (uint64_t)v29, 0, 1);
            }
          }
        }
        return sub_18C9EFB8C((uint64_t)result, a2, v10, v27, a5);
      }
      double result = (uint64_t *)icu::UVector::orphanElementAt((icu::UVector *)(a3 + 2), 0);
      *(void *)(v10 + 88) = result;
      int v26 = 4;
    }
    *(_DWORD *)uint64_t v10 = v26;
    return sub_18C9EFB8C((uint64_t)result, a2, v10, v27, a5);
  }
  return result;
}

uint64_t *sub_18C9F0244@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, _DWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  double result = icu::UMemory::operator new(a5, (icu::UMemory *)0x68, a2);
  if (result)
  {
    uint64_t v10 = (uint64_t)result;
    result[1] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)result + 8) = 2;
    *(_DWORD *)double result = 3;
    result[10] = 0;
    result[11] = a2;
    uint64_t v11 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 104))(a2);
    return (uint64_t *)sub_18C9F0328(a1, v11, v10, a3);
  }
  else
  {
    *a4 = 7;
  }
  return result;
}

void *sub_18C9F0328(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  long long v30 = 0u;
  uint64_t v33 = 0;
  long long v32 = 0u;
  long long v31 = 0u;
  LOWORD(v30) = 2;
  long long v25 = 0u;
  uint64_t v28 = 0;
  uint64_t v29 = (UChar *)&unk_1EDA47700;
  long long v27 = 0u;
  long long v26 = 0u;
  signed int v24 = (UChar *)&unk_1EDA47700;
  LOWORD(v25) = 2;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v23 = 0;
  long long v22 = 0u;
  unsigned int v19 = (UChar *)&unk_1EDA47700;
  LOWORD(v20) = 2;
  char v13 = 0;
  sub_18C9F3A44(a2, (icu::UnicodeString *)&v29, (uint64_t)&v24, (uint64_t)&v19, &v13);
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v18 = 0;
  long long v17 = 0u;
  unint64_t v14 = (UChar *)&unk_1EDA47700;
  LOWORD(v15) = 2;
  sub_18C9F3DF8(&v29, (uint64_t)&v24, (uint64_t)&v19, (uint64_t)&v14);
  sub_18C9F1100(a1, &v14, (uint64_t)&v29, &v24, &v19, a3, a4, v7);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v19);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v24);
  return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v29);
}

uint64_t *sub_18C9F04D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _DWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  double result = icu::UMemory::operator new(a7, (icu::UMemory *)0x68, a2);
  if (result)
  {
    result[1] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)result + 8) = 2;
    *(_DWORD *)double result = 7;
    result[10] = 0;
    result[11] = a3;
    result[12] = a4;
    return (uint64_t *)sub_18C9F0328(a1, a2, (uint64_t)result, a5);
  }
  else
  {
    *a6 = 7;
  }
  return result;
}

uint64_t *sub_18C9F059C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, _DWORD *a7@<X6>, uint64_t *a8@<X8>)
{
  double result = icu::UMemory::operator new(a8, (icu::UMemory *)0x68, a2);
  if (result)
  {
    uint64_t v16 = (uint64_t)result;
    long long v17 = (icu::UnicodeString *)(result + 1);
    *(void *)(v16 + 8) = &unk_1EDA47700;
    *(_WORD *)(v16 + 16) = 2;
    *(void *)(v16 + 80) = 0;
    *(void *)(v16 + 88) = 0;
    *(_DWORD *)uint64_t v16 = a4 != 0;
    if (a5)
    {
      __int16 v18 = *(_WORD *)(a3 + 8);
      if ((v18 & 0x11) != 0)
      {
        unsigned int v19 = 0;
      }
      else if ((v18 & 2) != 0)
      {
        unsigned int v19 = (const UChar *)(a3 + 10);
      }
      else
      {
        unsigned int v19 = *(const UChar **)(a3 + 24);
      }
      long long v20 = v19;
      icu::UnicodeString::setTo(v17, 1, &v20, -1);
    }
    else
    {
      icu::UnicodeString::operator=((UChar **)v17, (UChar **)a3);
    }
    return (uint64_t *)sub_18C9F0328(a1, a2, v16, a6);
  }
  else
  {
    *a7 = 7;
  }
  return result;
}

uint64_t *sub_18C9F06B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  double result = icu::UMemory::operator new(a6, (icu::UMemory *)0x68, a2);
  if (result)
  {
    uint64_t v12 = (uint64_t)result;
    char v13 = (icu::UnicodeString *)(result + 1);
    *(void *)(v12 + 8) = &unk_1EDA47700;
    *(_WORD *)(v12 + 16) = 2;
    *(void *)(v12 + 80) = 0;
    *(void *)(v12 + 88) = 0;
    *(_DWORD *)uint64_t v12 = 6;
    if (a4)
    {
      __int16 v14 = *(_WORD *)(a3 + 8);
      if ((v14 & 0x11) != 0)
      {
        long long v15 = 0;
      }
      else if ((v14 & 2) != 0)
      {
        long long v15 = (const UChar *)(a3 + 10);
      }
      else
      {
        long long v15 = *(const UChar **)(a3 + 24);
      }
      uint64_t v16 = v15;
      icu::UnicodeString::setTo(v13, 1, &v16, -1);
    }
    else
    {
      icu::UnicodeString::operator=((UChar **)v13, (UChar **)a3);
    }
    return (uint64_t *)sub_18C9F0328(a1, a2, v12, a5);
  }
  return result;
}

void *sub_18C9F07AC(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v25 = 0u;
  uint64_t v28 = 0;
  long long v27 = 0u;
  long long v26 = 0u;
  LOWORD(v25) = 2;
  long long v20 = 0u;
  uint64_t v23 = 0;
  signed int v24 = (UChar *)&unk_1EDA47700;
  long long v22 = 0u;
  long long v21 = 0u;
  unsigned int v19 = (UChar *)&unk_1EDA47700;
  LOWORD(v20) = 2;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v18 = 0;
  long long v17 = 0u;
  __int16 v14 = &unk_1EDA47700;
  LOWORD(v15) = 2;
  char v8 = 0;
  sub_18C9F3A44(a2, (icu::UnicodeString *)&v24, (uint64_t)&v19, (uint64_t)&v14, &v8);
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v13 = 0;
  long long v12 = 0u;
  int v9 = &unk_1EDA47700;
  LOWORD(v10) = 2;
  sub_18C9F3DF8(&v24, (uint64_t)&v19, (uint64_t)&v14, (uint64_t)&v9);
  uhash_remove(*(void *)(a1 + 8), &v9);
  sub_18C9F0958(a1, (uint64_t)&v24, &v19, (uint64_t)&v14);
  uhash_remove(*(void *)(a1 + 224), &v9);
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)&v9);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v19);
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v24);
}

uint64_t sub_18C9F0958(uint64_t a1, uint64_t a2, UChar **a3, uint64_t a4)
{
  int v18 = 0;
  uint64_t result = uhash_get(*(void *)(a1 + 96), a2);
  if (result)
  {
    int v9 = (uint64_t *)result;
    uint64_t result = uhash_geti(*(void *)result, (uint64_t)a3);
    if (result)
    {
      int v10 = result;
      uint64_t result = icu::UVector::indexOf((icu::UVector *)(a1 + 184), a4, 0);
      if ((result & 0x80000000) == 0)
      {
        long long v12 = (uint64_t *)(1 << result);
        uint64_t v13 = *v9;
        unsigned int v14 = v10 & ~v12;
        if (v14)
        {
          long long v15 = (icu::UnicodeString *)icu::UMemory::operator new(v12, (icu::UMemory *)0x40, v11);
          uint64_t v16 = (uint64_t)v15;
          if (v15) {
            icu::UnicodeString::UnicodeString(v15, a3);
          }
          return uhash_puti(v13, v16, v14, &v18);
        }
        else
        {
          uhash_remove(*v9, a3);
          uint64_t result = uhash_count(*v9);
          if (!result)
          {
            uint64_t v17 = *(void *)(a1 + 96);
            return uhash_remove(v17, a2);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_18C9F0A68(uint64_t a1)
{
  return uhash_count(*(void *)(a1 + 224));
}

uint64_t *sub_18C9F0A70(uint64_t a1, int a2)
{
  if (a2 < 0 || (int v3 = a2, (int)uhash_count(*(void *)(a1 + 224)) <= a2)) {
    int v3 = 0;
  }
  int v8 = -1;
  int v4 = v3 + 1;
  while (1)
  {
    uint64_t v5 = uhash_nextElement(*(uint64_t **)(a1 + 224), &v8);
    if (!v5) {
      break;
    }
    if (--v4 < 1) {
      return *(uint64_t **)(v5 + 16);
    }
  }
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_1E9192930, memory_order_acquire)) {
    return &qword_1E91928F0;
  }
  uint64_t v6 = &qword_1E91928F0;
  if (__cxa_guard_acquire(&qword_1E9192930))
  {
    qword_1E91928F0 = (uint64_t)&unk_1EDA47700;
    word_1E91928F8 = 2;
    __cxa_atexit((void (*)(void *))icu::UnicodeString::~UnicodeString, &qword_1E91928F0, &dword_18C7E8000);
    __cxa_guard_release(&qword_1E9192930);
  }
  return v6;
}

uint64_t *sub_18C9F0B6C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x88, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    icu::StringEnumeration::StringEnumeration((uint64_t)v4);
    uint64_t *v5 = (uint64_t)&unk_1EDA535F0;
    *((_DWORD *)v5 + 29) = -1;
    *((_DWORD *)v5 + 30) = uhash_count(*(void *)(a1 + 224));
    v5[16] = a1;
  }
  return v5;
}

uint64_t sub_18C9F0BDC(uint64_t a1)
{
  return uhash_count(*(void *)(a1 + 96));
}

UChar **sub_18C9F0BE4(uint64_t a1, int a2, UChar **this)
{
  int v10 = -1;
  if ((a2 & 0x80000000) == 0)
  {
    int v5 = a2 + 1;
    while (1)
    {
      uint64_t v6 = uhash_nextElement(*(uint64_t **)(a1 + 96), &v10);
      if (!v6) {
        break;
      }
      if (--v5 < 1)
      {
        icu::UnicodeString::operator=(this, *(UChar ***)(v6 + 16));
        return this;
      }
    }
  }
  unsigned int v7 = *((unsigned __int16 *)this + 4);
  if (v7)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *((_DWORD *)this + 3);
    }
    if (v8) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }
  return this;
}

uint64_t *sub_18C9F0C8C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t *)uhash_get(*(void *)(a1 + 96), a2);
  if (result)
  {
    uint64_t v3 = *result;
    return (uint64_t *)uhash_count(v3);
  }
  return result;
}

uint64_t sub_18C9F0CC8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = uhash_get(*(void *)(a1 + 96), a3);
  if (v6)
  {
    int v13 = -1;
    if ((a2 & 0x80000000) == 0)
    {
      unsigned int v7 = (uint64_t **)v6;
      int v8 = a2 + 1;
      while (1)
      {
        uint64_t v9 = uhash_nextElement(*v7, &v13);
        if (!v9) {
          break;
        }
        if (--v8 < 1)
        {
          icu::UnicodeString::operator=((UChar **)a4, *(UChar ***)(v9 + 16));
          return a4;
        }
      }
    }
  }
  unsigned int v10 = *(unsigned __int16 *)(a4 + 8);
  if (v10)
  {
    icu::UnicodeString::unBogus(a4);
  }
  else
  {
    if ((v10 & 0x8000u) == 0) {
      unsigned int v11 = v10 >> 5;
    }
    else {
      unsigned int v11 = *(_DWORD *)(a4 + 12);
    }
    if (v11) {
      *(_WORD *)(a4 + 8) &= 0x1Fu;
    }
  }
  return a4;
}

uint64_t sub_18C9F0D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = uhash_get(*(void *)(a1 + 96), a2);
  if (result)
  {
    uint64_t result = uhash_geti(*(void *)result, a3);
    if (result)
    {
      unsigned int v5 = result;
      LODWORD(result) = 0;
      do
      {
        uint64_t result = result + (v5 & 1);
        BOOL v6 = v5 > 1;
        v5 >>= 1;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_18C9F0DE0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (uint64_t *)uhash_get(*(void *)(a1 + 96), a3);
  if (!v9) {
    goto LABEL_8;
  }
  unsigned int v10 = uhash_geti(*v9, a4);
  if (!v10) {
    goto LABEL_8;
  }
  unsigned int v11 = 0;
  int v12 = 0;
  while ((v10 & 1) == 0)
  {
LABEL_7:
    ++v11;
    BOOL v13 = v10 > 1;
    v10 >>= 1;
    if (!v13) {
      goto LABEL_8;
    }
  }
  if (v12 != a2)
  {
    ++v12;
    goto LABEL_7;
  }
  uint64_t v17 = (UChar **)icu::UVector::elementAt((icu::UVector *)(a1 + 184), v11);
  if (v17)
  {
    icu::UnicodeString::operator=((UChar **)a5, v17);
    return a5;
  }
LABEL_8:
  unsigned int v14 = *(unsigned __int16 *)(a5 + 8);
  if (v14)
  {
    icu::UnicodeString::unBogus(a5);
  }
  else
  {
    if ((v14 & 0x8000u) == 0) {
      unsigned int v15 = v14 >> 5;
    }
    else {
      unsigned int v15 = *(_DWORD *)(a5 + 12);
    }
    if (v15) {
      *(_WORD *)(a5 + 8) &= 0x1Fu;
    }
  }
  return a5;
}

void sub_18C9F0EB8(icu::StringEnumeration *a1)
{
  icu::StringEnumeration::~StringEnumeration(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9F0EE0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

UChar **sub_18C9F0EE8(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  if (uhash_count(*(void *)(*(void *)(a1 + 128) + 224)) != *(_DWORD *)(a1 + 120))
  {
    unsigned int v2 = 0;
    *a2 = 25;
    return v2;
  }
  uint64_t Element = uhash_nextElement(*(uint64_t **)(*(void *)(a1 + 128) + 224), (int *)(a1 + 116));
  if (!Element) {
    return 0;
  }
  unsigned int v2 = (UChar **)(a1 + 8);
  icu::UnicodeString::operator=(v2, *(UChar ***)(Element + 16));
  return v2;
}

uint64_t sub_18C9F0F70(uint64_t a1)
{
  *(_DWORD *)(a1 + 116) = -1;
  uint64_t result = uhash_count(*(void *)(*(void *)(a1 + 128) + 224));
  *(_DWORD *)(a1 + 120) = result;
  return result;
}

void *sub_18C9F0FA8()
{
  return &unk_1E9192938;
}

void *sub_18C9F0FB4(uint64_t a1, UChar **a2, UChar **a3, UChar **a4, uint64_t a5, int a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v23 = 0;
  long long v22 = 0u;
  unsigned int v19 = (UChar *)&unk_1EDA47700;
  LOWORD(v20) = 2;
  memset(v18, 0, sizeof(v18));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v18, a2);
  int v12 = WORD4(v18[0]) >> 5;
  if (SWORD4(v18[0]) < 0) {
    int v12 = HIDWORD(v18[0]);
  }
  if (!v12)
  {
    uint64_t v17 = (const UChar *)"A";
    icu::UnicodeString::setTo((icu::UnicodeString *)v18, 1, &v17, 3);
  }
  sub_18C9F3DF8(a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)&v19);
  sub_18C9F1100(a1, &v19, (uint64_t)v18, a3, a4, a5, a6, v13);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v18);
  return icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v19);
}

uint64_t sub_18C9F1100@<X0>(uint64_t a1@<X0>, UChar **a2@<X1>, uint64_t a3@<X2>, UChar **a4@<X3>, UChar **a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  int v24 = 0;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = (icu::UnicodeString *)icu::UMemory::operator new(a8, (icu::UMemory *)0x40, (unint64_t)a2);
  uint64_t v17 = (uint64_t)v16;
  if (v16) {
    icu::UnicodeString::UnicodeString(v16, a2);
  }
  uhash_put(v15, v17, a6, &v24);
  if (a7)
  {
    sub_18C9F1208(a1, a3, a4, a5);
    uint64_t result = uhash_containsKey(*(void *)(a1 + 224), (uint64_t)a2);
    if (!result)
    {
      uint64_t v21 = *(void *)(a1 + 224);
      long long v22 = (icu::UnicodeString *)icu::UMemory::operator new(v20, (icu::UMemory *)0x40, v19);
      uint64_t v23 = (uint64_t)v22;
      if (v22) {
        icu::UnicodeString::UnicodeString(v22, a2);
      }
      return uhash_puti(v21, v23, 1u, &v24);
    }
  }
  else
  {
    sub_18C9F0958(a1, a3, a4, (uint64_t)a5);
    return uhash_remove(*(void *)(a1 + 224), a2);
  }
  return result;
}

uint64_t sub_18C9F1208(uint64_t a1, uint64_t a2, UChar **a3, UChar **a4)
{
  UErrorCode v39 = U_ZERO_ERROR;
  int v8 = (uint64_t *)uhash_get(*(void *)(a1 + 96), a2);
  if (!v8)
  {
    unsigned int v17 = *(unsigned __int16 *)(a2 + 8);
    int v18 = (__int16)v17;
    int32_t v19 = v17 >> 5;
    if (v18 >= 0) {
      int32_t v20 = v19;
    }
    else {
      int32_t v20 = *(_DWORD *)(a2 + 12);
    }
    int v21 = icu::UnicodeString::doCompare(a2, 0, v20, (uint64_t)"A", 0, 3);
    signed int v38 = "A";
    uint64_t v23 = (uint64_t)&v38;
    if (v21)
    {
      unsigned int v24 = *(unsigned __int16 *)(a2 + 8);
      int v25 = (__int16)v24;
      int32_t v26 = v24 >> 5;
      if (v25 >= 0) {
        int32_t v27 = v26;
      }
      else {
        int32_t v27 = *(_DWORD *)(a2 + 12);
      }
      int v28 = icu::UnicodeString::doCompare(a2, 0, v27, (uint64_t)"L", 0, 3);
      uint64_t v23 = 23;
      if (v28) {
        int v29 = 3;
      }
      else {
        int v29 = 23;
      }
    }
    else
    {
      int v29 = 102;
    }
    uint64_t result = (uint64_t)icu::UMemory::operator new((uint64_t *)v23, (icu::UMemory *)0x58, v22);
    if (!result) {
      return result;
    }
    int v8 = (uint64_t *)result;
    *(void *)uint64_t result = 0;
    uint64_t v33 = result + 8;
    uint64_t result = (uint64_t)uhash_initSize((int32x2_t *)(result + 8), (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, v29, (int *)&v39);
    if (v39 > U_ZERO_ERROR) {
      return result;
    }
    *int v8 = v33;
    uint64_t result = uhash_setKeyDeleter(v33, (uint64_t)uprv_deleteUObject);
    if (v39 > U_ZERO_ERROR) {
      return result;
    }
    uint64_t v35 = *(void *)(a1 + 96);
    uint64_t v36 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v39, (icu::UMemory *)0x40, v34);
    uint64_t v37 = (uint64_t)v36;
    if (v36) {
      icu::UnicodeString::UnicodeString(v36, (UChar **)a2);
    }
    uhash_put(v35, v37, (uint64_t)v8, (int *)&v39);
  }
  uint64_t result = icu::UVector::indexOf((icu::UVector *)(a1 + 184), (uint64_t)a4, 0);
  if ((result & 0x80000000) == 0
    || (long long v30 = (uint64_t *)*(unsigned int *)(a1 + 192), (int)v30 <= 30)
    && (uint64_t result = (uint64_t)icu::UMemory::operator new(v30, (icu::UMemory *)0x40, v10)) != 0
    && (long long v31 = (void *)result,
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)result, a4),
        uint64_t result = icu::UVector::adoptElement((uint64_t (**)(void *))(a1 + 184), v31, &v39),
        v39 <= U_ZERO_ERROR)
    && (v32 = *(_DWORD *)(a1 + 192), uint64_t result = (v32 - 1), v32 >= 1))
  {
    unsigned int v11 = uhash_geti(*v8, (uint64_t)a3) | (1 << result);
    uint64_t v12 = *v8;
    uint64_t v15 = (icu::UnicodeString *)icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v13);
    uint64_t v16 = (uint64_t)v15;
    if (v15) {
      icu::UnicodeString::UnicodeString(v15, a3);
    }
    return uhash_puti(v12, v16, v11, (int *)&v39);
  }
  return result;
}

uint64_t sub_18C9F1474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v12 = 0;
  long long v11 = 0u;
  int v8 = &unk_1EDA47700;
  LOWORD(v9) = 2;
  sub_18C9F3DF8((UChar **)(a2 + 72), a3 + 72, a4, (uint64_t)&v8);
  uint64_t v5 = uhash_get(*(void *)(a1 + 8), (uint64_t)&v8);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v8);
  return v5;
}

uint64_t *sub_18C9F1534(uint64_t a1, uint64_t a2, uint64_t a3, UChar **a4)
{
  uint64_t v6 = a2;
  if (*(unsigned char *)(a2 + 264))
  {
    uint64_t v8 = a2;
    a2 = a3;
    uint64_t v9 = (uint64_t)a4;
    int v10 = 0;
  }
  else
  {
    if (!*(unsigned char *)(a3 + 264)) {
      return 0;
    }
    uint64_t v8 = a3;
    uint64_t v9 = (uint64_t)a4;
    int v10 = 1;
  }
  long long v11 = sub_18C9F15D8(v8, a2, v9, v10);
  if (v11) {
    sub_18C9F0FB4(a1, (UChar **)(v6 + 8), (UChar **)(a3 + 8), a4, (uint64_t)v11, 0);
  }
  return v11;
}

uint64_t *sub_18C9F15D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  long long v63 = 0u;
  uint64_t v66 = 0;
  long long v65 = 0u;
  long long v64 = 0u;
  uint64_t v61 = 0;
  long long v62 = &unk_1EDA47700;
  LOWORD(v63) = 2;
  long long v58 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  if (a4) {
    uint64_t v6 = "T";
  }
  else {
    uint64_t v6 = "T";
  }
  unsigned int v7 = (UChar **)(a2 + 72);
  unint64_t v45 = (icu::UnicodeString *)(a1 + 72);
  uint64_t v57 = (UChar *)&unk_1EDA47700;
  LOWORD(v58) = 2;
  LOBYTE(v8) = 1;
  while (1)
  {
    char v9 = (char)v8;
    if (v63)
    {
      icu::UnicodeString::unBogus((uint64_t)&v62);
    }
    else
    {
      if ((v63 & 0x8000u) == 0) {
        int v10 = (unsigned __int16)v63 >> 5;
      }
      else {
        int v10 = DWORD1(v63);
      }
      if (v10)
      {
        LOBYTE(v63) = v63 & 0x1F;
        LOWORD(v63) = v63;
      }
    }
    if (v9) {
      icu::UnicodeString::doAppend((uint64_t)&v62, (uint64_t)v6, 0, 0xFFFFFFFFLL);
    }
    else {
      icu::UnicodeString::doAppend((uint64_t)&v62, (uint64_t)"T", 0, 0xFFFFFFFFLL);
    }
    memset(v56, 0, sizeof(v56));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v56, v7);
    icu::Locale::Locale((icu::Locale *)&v52, "", 0, 0, 0);
    long long v11 = icu::UnicodeString::toUpper((UChar **)v56, (const icu::Locale *)&v52);
    unsigned int v12 = *((unsigned __int16 *)v11 + 4);
    int v13 = (__int16)v12;
    unsigned int v14 = v12 >> 5;
    if (v13 >= 0) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = *((unsigned int *)v11 + 3);
    }
    icu::UnicodeString::doAppend((uint64_t)&v62, v11, 0, v15);
    icu::Locale::~Locale((icu::Locale *)&v52);
    UErrorCode v47 = U_ZERO_ERROR;
    memset(v46, 0, sizeof(v46));
    uint64_t v16 = *(icu::ResourceBundle **)(a1 + 272);
    uint64_t v52 = (char *)&v54 + 1;
    int v53 = 40;
    __int16 v54 = 0;
    int v55 = 0;
    appended = icu::CharString::appendInvariantChars((icu::CharString *)&v52, (const icu::UnicodeString *)&v62, &v47);
    icu::ResourceBundle::get(v16, *(const char **)appended, &v47, v46);
    if ((_BYTE)v54) {
      uprv_free(v52);
    }
    if (v47 > U_ZERO_ERROR || v47 == U_USING_DEFAULT_WARNING) {
      goto LABEL_49;
    }
    if (BYTE8(v56[0]))
    {
      icu::UnicodeString::unBogus((uint64_t)v56);
    }
    else
    {
      if ((SWORD4(v56[0]) & 0x8000u) == 0) {
        int v18 = WORD4(v56[0]) >> 5;
      }
      else {
        int v18 = HIDWORD(v56[0]);
      }
      if (v18)
      {
        BYTE8(v56[0]) &= 0x1Fu;
        WORD4(v56[0]) = BYTE8(v56[0]);
      }
    }
    Locale = icu::ResourceBundle::getLocale((icu::ResourceBundle *)v46);
    inited = icu::LocaleUtility::initNameFromLocale((icu::LocaleUtility *)Locale, (const icu::Locale *)v56, v20);
    unsigned int v22 = *(unsigned __int16 *)(a1 + 80);
    if (v22)
    {
      if ((*((_WORD *)inited + 4) & 1) == 0) {
        goto LABEL_49;
      }
    }
    else
    {
      int v23 = (__int16)v22;
      int v24 = v22 >> 5;
      if (v23 >= 0) {
        int v25 = v24;
      }
      else {
        int v25 = *(_DWORD *)(a1 + 84);
      }
      unsigned int v26 = *((unsigned __int16 *)inited + 4);
      if ((v26 & 0x8000u) == 0) {
        unsigned int v27 = v26 >> 5;
      }
      else {
        unsigned int v27 = *((_DWORD *)inited + 3);
      }
      if ((v26 & 1) != 0 || v25 != v27 || !icu::UnicodeString::doEquals(v45, inited, v25)) {
        goto LABEL_49;
      }
    }
    unsigned int v28 = *(unsigned __int16 *)(a3 + 8);
    int v29 = (__int16)v28;
    unsigned int v30 = v28 >> 5;
    if (v29 < 0) {
      unsigned int v30 = *(_DWORD *)(a3 + 12);
    }
    UErrorCode v47 = U_ZERO_ERROR;
    if (v30) {
      break;
    }
    icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v46, &v47, 1, (uint64_t)&v52);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v57, (icu::UnicodeString *)&v52);
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v52);
    if (v47 < U_ILLEGAL_ARGUMENT_ERROR) {
      goto LABEL_52;
    }
LABEL_49:
    icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v46);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v56);
    uint64_t v8 = 0;
    if ((v9 & 1) == 0)
    {
      uint64_t v35 = 0;
      goto LABEL_51;
    }
  }
  unint64_t v48 = (char *)&v50 + 1;
  int v49 = 40;
  __int16 v50 = 0;
  int v51 = 0;
  long long v31 = icu::CharString::appendInvariantChars((icu::CharString *)&v48, (const icu::UnicodeString *)a3, &v47);
  icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v46, *(const char **)v31, &v47, (uint64_t)&v52);
  icu::UnicodeString::operator=((icu::UnicodeString *)&v57, (icu::UnicodeString *)&v52);
  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v52);
  if ((_BYTE)v50) {
    uprv_free(v48);
  }
  if (v47 > U_ZERO_ERROR) {
    goto LABEL_49;
  }
LABEL_52:
  icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v46);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v56);
  unsigned int v41 = icu::UMemory::operator new(v40, (icu::UMemory *)0x68, v39);
  uint64_t v35 = v41;
  if (v41)
  {
    uint64_t v42 = (UChar **)(v41 + 1);
    v35[1] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v35 + 8) = 2;
    v35[10] = 0;
    v35[11] = 0;
    if (v9) {
      int v43 = 0;
    }
    else {
      int v43 = a4;
    }
    *(_DWORD *)uint64_t v35 = 2;
    icu::UnicodeString::operator=(v42, &v57);
    *((_DWORD *)v35 + 18) = v43;
  }
LABEL_51:
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v57);
  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v62);
  return v35;
}

uint64_t sub_18C9F1A50(uint64_t a1, UChar **a2, UChar **a3, uint64_t a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  memset(v36, 0, sizeof(v36));
  sub_18C9EF104((uint64_t)v36, a2);
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  memset(v25, 0, sizeof(v25));
  sub_18C9EF104((uint64_t)v25, a3);
  long long v21 = 0u;
  uint64_t v24 = 0;
  long long v23 = 0u;
  long long v22 = 0u;
  int32_t v20 = &unk_1EDA47700;
  LOWORD(v21) = 2;
  sub_18C9F3DF8(a2, (uint64_t)a3, a4, (uint64_t)&v20);
  uint64_t v9 = uhash_get(*(void *)(a1 + 8), (uint64_t)&v20);
  if (!v9)
  {
    unsigned int v11 = *(unsigned __int16 *)(a4 + 8);
    int v12 = (__int16)v11;
    unsigned int v13 = v11 >> 5;
    if (v12 < 0) {
      unsigned int v13 = *(_DWORD *)(a4 + 12);
    }
    if (!v13
      || (uint64_t v9 = sub_18C9F1474(a1, (uint64_t)v36, (uint64_t)v25, a4)) == 0
      && (uint64_t v9 = (uint64_t)sub_18C9F1534(a1, (uint64_t)v36, (uint64_t)v25, (UChar **)a4)) == 0)
    {
      sub_18C9EF40C((uint64_t)v36);
      int v18 = (UChar *)&unk_1EDA47700;
      __int16 v19 = 2;
      uint64_t v9 = sub_18C9F1474(a1, (uint64_t)v36, (uint64_t)v25, (uint64_t)&v18);
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v18);
      while (!v9)
      {
        int v18 = (UChar *)&unk_1EDA47700;
        __int16 v19 = 2;
        uint64_t v9 = (uint64_t)sub_18C9F1534(a1, (uint64_t)v36, (uint64_t)v25, &v18);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v18);
        if (v9) {
          break;
        }
        int v16 = (unsigned __int16)v38 >> 5;
        if ((v38 & 0x8000u) != 0) {
          int v16 = DWORD1(v38);
        }
        if (v16)
        {
          icu::UnicodeString::operator=((UChar **)&v36[4] + 1, (UChar **)&v37 + 1);
          BYTE8(v45) = BYTE9(v45);
          sub_18C9EF544((uint64_t)v36);
        }
        else
        {
          LODWORD(v8) = (unsigned __int16)v27 >> 5;
          if ((v27 & 0x8000u) == 0) {
            unint64_t v8 = v8;
          }
          else {
            unint64_t v8 = DWORD1(v27);
          }
          if (!v8)
          {
            uint64_t v9 = 0;
            break;
          }
          icu::UnicodeString::operator=((UChar **)&v25[4] + 1, (UChar **)&v26 + 1);
          BYTE8(v34) = BYTE9(v34);
          sub_18C9EF544((uint64_t)v25);
          sub_18C9EF40C((uint64_t)v36);
        }
        int v18 = (UChar *)&unk_1EDA47700;
        __int16 v19 = 2;
        uint64_t v9 = sub_18C9F1474(a1, (uint64_t)v36, (uint64_t)v25, (uint64_t)&v18);
        icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v18);
      }
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v20);
  sub_18C9EF4D4(v25);
  sub_18C9EF4D4(v36);
  return v9;
}

uint64_t sub_18C9F1D7C(uint64_t a1, UChar **a2, UChar **a3, UChar **a4, char a5, UChar **a6)
{
  *(void *)(a1 + 8) = &unk_1EDA47700;
  *(_WORD *)(a1 + 16) = 2;
  *(void *)(a1 + 72) = &unk_1EDA47700;
  *(_WORD *)(a1 + 80) = 2;
  *(void *)(a1 + 136) = &unk_1EDA47700;
  *(_WORD *)(a1 + 144) = 2;
  *(void *)(a1 + 200) = &unk_1EDA47700;
  *(_WORD *)(a1 + 208) = 2;
  icu::UnicodeString::operator=((UChar **)(a1 + 8), a2);
  icu::UnicodeString::operator=((UChar **)(a1 + 72), a3);
  icu::UnicodeString::operator=((UChar **)(a1 + 136), a4);
  *(unsigned char *)(a1 + 264) = a5;
  icu::UnicodeString::operator=((UChar **)(a1 + 200), a6);
  return a1;
}

uint64_t sub_18C9F1E88(uint64_t a1, UChar **a2, UChar **a3)
{
  *(void *)(a1 + 8) = &unk_1EDA47700;
  *(_WORD *)(a1 + 16) = 2;
  *(void *)(a1 + 72) = &unk_1EDA47700;
  *(_WORD *)(a1 + 80) = 2;
  *(void *)(a1 + 136) = &unk_1EDA47700;
  *(_WORD *)(a1 + 144) = 2;
  icu::UnicodeString::operator=((UChar **)(a1 + 8), a2);
  icu::UnicodeString::operator=((UChar **)(a1 + 72), a3);
  return a1;
}

icu::Transliterator *sub_18C9F1F38(uint64_t a1, uint64_t a2, const icu::UnicodeString *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((*(__int16 *)(a1 + 80) & 0x80000000) == 0)
  {
    if (*(unsigned __int16 *)(a1 + 80) >> 5) {
      goto LABEL_3;
    }
LABEL_6:
    unsigned int v13 = "A";
    icu::UnicodeString::UnicodeString(v14, 1, &v13);
    Basicuint64_t Instance = (icu::Transliterator *)icu::Transliterator::createBasicInstance((icu::Transliterator *)v14, (const icu::UnicodeString *)(a1 + 8), v6);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v14);
    if (!BasicInstance) {
      return BasicInstance;
    }
    goto LABEL_7;
  }
  if (!*(_DWORD *)(a1 + 84)) {
    goto LABEL_6;
  }
LABEL_3:
  Basicuint64_t Instance = (icu::Transliterator *)icu::Transliterator::createBasicInstance((icu::Transliterator *)(a1 + 72), (const icu::UnicodeString *)(a1 + 8), a3);
  if (!BasicInstance) {
    return BasicInstance;
  }
LABEL_7:
  if (*(__int16 *)(a1 + 144) < 0)
  {
    unint64_t v8 = (uint64_t *)*(unsigned int *)(a1 + 148);
    if (!v8) {
      return BasicInstance;
    }
  }
  else
  {
    unint64_t v8 = (uint64_t *)(*(unsigned __int16 *)(a1 + 144) >> 5);
    if (!v8) {
      return BasicInstance;
    }
  }
  v14[0] = U_ZERO_ERROR;
  uint64_t v9 = (icu::UnicodeSet *)icu::UMemory::operator new(v8, (icu::UMemory *)0xC8, v4);
  int v10 = v9;
  if (v9
    && (icu::UnicodeSet::UnicodeSet(v9, (const icu::UnicodeString *)(a1 + 136), v14), v14[0] >= U_ILLEGAL_ARGUMENT_ERROR))
  {
    icu::UnicodeSet::~UnicodeSet(v10);
    icu::UMemory::operator delete(v11);
  }
  else
  {
    icu::Transliterator::adoptFilter(BasicInstance, v10);
  }
  return BasicInstance;
}

UChar **sub_18C9F2080(uint64_t a1, const icu::UnicodeString *a2, int a3, int *a4)
{
  unint64_t v8 = 0;
  int v9 = *(_DWORD *)a2;
  int v10 = 2;
  while (1)
  {
    if (v10 == 1)
    {
      unint64_t v8 = (UChar **)sub_18C9F23D8(a1, a2, 1);
      if (!v8) {
        goto LABEL_23;
      }
    }
    if (icu::ICU_Utility::parseChar(a1, a2, 40)) {
      break;
    }
    if (!--v10)
    {
      uint64_t v11 = (uint64_t)v8;
      if (a3)
      {
        int v12 = (UChar **)sub_18C9F2D2C((uint64_t)v8, a4);
        if (!v12)
        {
          uint64_t v11 = (uint64_t)v8;
          unint64_t v13 = 1;
          goto LABEL_25;
        }
        goto LABEL_26;
      }
      unint64_t v13 = 0;
LABEL_25:
      int v12 = (UChar **)sub_18C9F29E4(v11, v13);
      if (v12)
      {
LABEL_26:
        icu::UnicodeString::operator=(v12 + 17, v8 + 25);
        uint64_t v14 = 0;
        if (v8) {
          goto LABEL_27;
        }
        goto LABEL_28;
      }
LABEL_45:
      *a4 = 7;
      return v12;
    }
  }
  if (icu::ICU_Utility::parseChar(a1, a2, 41))
  {
    uint64_t v14 = 0;
  }
  else
  {
    long long v27 = sub_18C9F23D8(a1, a2, 1);
    if (!v27 || (uint64_t v14 = (uint64_t)v27, !icu::ICU_Utility::parseChar(a1, a2, 41)))
    {
      if (v8)
      {
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)(v8 + 25));
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)(v8 + 17));
        icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)(v8 + 9));
        icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)(v8 + 1));
        icu::UMemory::operator delete(v8);
      }
LABEL_23:
      int v12 = 0;
      *(_DWORD *)a2 = v9;
      return v12;
    }
  }
  if (a3)
  {
    uint64_t v15 = sub_18C9F29E4((uint64_t)v8, 0);
    int v16 = sub_18C9F29E4(v14, 0);
    int v12 = (UChar **)v16;
    if (v15 && v16)
    {
      __int16 v55 = 40;
      uint64_t v18 = icu::UnicodeString::doAppend((uint64_t)(v16 + 1), (uint64_t)&v55, 0, 1);
      __int16 v19 = (icu::UnicodeString *)(v15 + 1);
      unsigned int v20 = *((unsigned __int16 *)v15 + 8);
      int v21 = (__int16)v20;
      unsigned int v22 = v20 >> 5;
      if (v21 >= 0) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = *((unsigned int *)v15 + 5);
      }
      uint64_t v24 = icu::UnicodeString::doAppend(v18, (const icu::UnicodeString *)(v15 + 1), 0, v23);
      __int16 v56 = 41;
      icu::UnicodeString::doAppend(v24, (uint64_t)&v56, 0, 1);
      if (v14)
      {
        long long v26 = (UChar **)(v14 + 200);
LABEL_37:
        icu::UnicodeString::operator=(v12 + 17, v26);
        goto LABEL_38;
      }
      goto LABEL_38;
    }
LABEL_40:
    if (v15)
    {
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)(v15 + 17));
      icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)(v15 + 9));
      icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)(v15 + 1));
      icu::UMemory::operator delete(v15);
    }
    if (v12)
    {
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)(v12 + 17));
      icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)(v12 + 9));
      icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)(v12 + 1));
      icu::UMemory::operator delete(v12);
    }
    int v12 = 0;
    goto LABEL_45;
  }
  uint64_t v15 = sub_18C9F29E4(v14, 0);
  long long v39 = sub_18C9F29E4((uint64_t)v8, 0);
  int v12 = (UChar **)v39;
  if (!v15 || !v39) {
    goto LABEL_40;
  }
  __int16 v53 = 40;
  uint64_t v40 = icu::UnicodeString::doAppend((uint64_t)(v39 + 1), (uint64_t)&v53, 0, 1);
  __int16 v19 = (icu::UnicodeString *)(v15 + 1);
  unsigned int v41 = *((unsigned __int16 *)v15 + 8);
  int v42 = (__int16)v41;
  unsigned int v43 = v41 >> 5;
  if (v42 >= 0) {
    uint64_t v44 = v43;
  }
  else {
    uint64_t v44 = *((unsigned int *)v15 + 5);
  }
  uint64_t v45 = icu::UnicodeString::doAppend(v40, (const icu::UnicodeString *)(v15 + 1), 0, v44);
  __int16 v54 = 41;
  icu::UnicodeString::doAppend(v45, (uint64_t)&v54, 0, 1);
  if (v8)
  {
    long long v26 = v8 + 25;
    goto LABEL_37;
  }
LABEL_38:
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)(v15 + 17));
  icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)(v15 + 9));
  icu::UnicodeString::~UnicodeString(v47, v19);
  icu::UMemory::operator delete(v15);
  if (v8)
  {
LABEL_27:
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)(v8 + 25));
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)(v8 + 17));
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)(v8 + 9));
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)(v8 + 1));
    icu::UMemory::operator delete(v8);
  }
LABEL_28:
  if (v14)
  {
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)(v14 + 200));
    icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)(v14 + 136));
    icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)(v14 + 72));
    icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)(v14 + 8));
    icu::UMemory::operator delete((void *)v14);
  }
  return v12;
}

uint64_t *sub_18C9F23D8(uint64_t a1, const icu::UnicodeString *a2, int a3)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  long long v90 = 0u;
  uint64_t v93 = 0;
  long long v92 = 0u;
  long long v91 = 0u;
  LOWORD(v90) = 2;
  long long v85 = 0u;
  uint64_t v88 = 0;
  long long v89 = (UChar *)&unk_1EDA47700;
  long long v87 = 0u;
  long long v86 = 0u;
  LOWORD(v85) = 2;
  long long v80 = 0u;
  uint64_t v83 = 0;
  long long v84 = (UChar *)&unk_1EDA47700;
  long long v82 = 0u;
  long long v81 = 0u;
  LOWORD(v80) = 2;
  long long v75 = 0u;
  uint64_t v78 = 0;
  long long v79 = (UChar *)&unk_1EDA47700;
  long long v77 = 0u;
  long long v76 = 0u;
  long long v74 = (UChar *)&unk_1EDA47700;
  LOWORD(v75) = 2;
  uint64_t v73 = 0;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v70 = 0u;
  long long v69 = (UChar *)&unk_1EDA47700;
  LOWORD(v70) = 2;
  unsigned int v51 = *(_DWORD *)a2;
  icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
  unint64_t v6 = *(unsigned int *)a2;
  unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  if (v8 < 0) {
    unsigned int v9 = *(_DWORD *)(a1 + 12);
  }
  if (v6 != v9)
  {
    int v15 = 0;
    while (1)
    {
      int v16 = 0;
      while (1)
      {
        if (a3)
        {
          while (1)
          {
            int v17 = (unsigned __int16)v70 >> 5;
            if ((v70 & 0x8000u) != 0) {
              int v17 = DWORD1(v70);
            }
            if (v17 || !icu::UnicodeSet::resemblesPattern((icu::UnicodeSet *)a1, (const icu::UnicodeString *)v6)) {
              break;
            }
            unsigned int v18 = *(_DWORD *)a2;
            __int16 v53 = &unk_1EDA44670;
            unsigned int v54 = v18;
            int v55 = -1;
            UErrorCode v52 = U_ZERO_ERROR;
            uint64_t v68 = 0;
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v63 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            long long v56 = 0u;
            icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v56, (const icu::UnicodeString *)a1, (icu::ParsePosition *)&v53, 1u, 0, &v52);
            if (v52 > U_ZERO_ERROR)
            {
              *(_DWORD *)a2 = v51;
              icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)&v56);
              icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v53);
              uint64_t v45 = 0;
              goto LABEL_81;
            }
            (*(void (**)(uint64_t, void, void, UChar **))(*(void *)a1 + 24))(a1, *(unsigned int *)a2, v54, &v69);
            *(_DWORD *)a2 = v54;
            icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)&v56);
            icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v53);
            icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
            unint64_t v6 = *(unsigned int *)a2;
            unsigned int v19 = *(unsigned __int16 *)(a1 + 8);
            int v20 = (__int16)v19;
            unsigned int v21 = v19 >> 5;
            if (v20 < 0) {
              unsigned int v21 = *(_DWORD *)(a1 + 12);
            }
            if (v6 == v21) {
              goto LABEL_4;
            }
          }
        }
        if (v16) {
          break;
        }
        uint64_t v22 = *(int *)a2;
        unsigned int v23 = *(unsigned __int16 *)(a1 + 8);
        if ((v23 & 0x8000u) == 0) {
          unsigned int v24 = v23 >> 5;
        }
        else {
          unsigned int v24 = *(_DWORD *)(a1 + 12);
        }
        if (v24 <= v22) {
          goto LABEL_48;
        }
        uint64_t v25 = (v23 & 2) != 0 ? a1 + 10 : *(void *)(a1 + 24);
        int v26 = *(unsigned __int16 *)(v25 + 2 * v22);
        if (v26 == 47)
        {
          int v27 = (__int16)v75;
          int v28 = (unsigned __int16)v75 >> 5;
          int v29 = DWORD1(v75);
        }
        else
        {
          if (v26 != 45) {
            goto LABEL_48;
          }
          int v27 = (__int16)v80;
          int v28 = (unsigned __int16)v80 >> 5;
          int v29 = DWORD1(v80);
        }
        if (v27 < 0) {
          int v28 = v29;
        }
        if (v28)
        {
LABEL_48:
          if (v15) {
            goto LABEL_4;
          }
          break;
        }
        *(_DWORD *)a2 = v22 + 1;
        icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
        unint64_t v6 = *(unsigned int *)a2;
        unsigned int v30 = *(unsigned __int16 *)(a1 + 8);
        int v31 = (__int16)v30;
        unsigned int v32 = v30 >> 5;
        if (v31 < 0) {
          unsigned int v32 = *(_DWORD *)(a1 + 12);
        }
        int v16 = v26;
        if (v6 == v32) {
          goto LABEL_4;
        }
      }
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      icu::ICU_Utility::parseUnicodeIdentifier(a1, a2, (uint64_t)&v56);
      LODWORD(v33) = WORD4(v56) >> 5;
      long long v33 = (SWORD4(v56) & 0x8000u) == 0 ? (void *)v33 : (void *)HIDWORD(v56);
      if (!v33) {
        break;
      }
      if (v16)
      {
        if (v16 == 47) {
          long long v34 = &v74;
        }
        else {
          long long v34 = &v79;
        }
      }
      else
      {
        long long v34 = &v89;
      }
      icu::UnicodeString::operator=(v34, (UChar **)&v56);
      ++v15;
      icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v56);
      icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
      unint64_t v6 = *(unsigned int *)a2;
      unsigned int v36 = *(unsigned __int16 *)(a1 + 8);
      int v37 = (__int16)v36;
      unsigned int v38 = v36 >> 5;
      if (v37 < 0) {
        unsigned int v38 = *(_DWORD *)(a1 + 12);
      }
      if (v6 == v38) {
        goto LABEL_4;
      }
    }
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v56);
  }
LABEL_4:
  int v10 = (unsigned __int16)v90 >> 5;
  if ((v90 & 0x8000u) != 0) {
    int v10 = DWORD1(v90);
  }
  if (v10)
  {
    int v11 = (unsigned __int16)v80 >> 5;
    if ((v80 & 0x8000u) != 0) {
      int v11 = DWORD1(v80);
    }
    if (v11) {
      int v12 = &v84;
    }
    else {
      int v12 = &v79;
    }
    icu::UnicodeString::operator=(v12, &v89);
  }
  int v13 = (unsigned __int16)v85 >> 5;
  if ((v85 & 0x8000u) != 0) {
    int v13 = DWORD1(v85);
  }
  if (v13)
  {
    char v14 = 1;
  }
  else
  {
    int v39 = (unsigned __int16)v80 >> 5;
    if ((v80 & 0x8000u) != 0) {
      int v39 = DWORD1(v80);
    }
    if (!v39)
    {
      uint64_t v45 = 0;
      unint64_t v44 = v51;
      *(_DWORD *)a2 = v51;
      goto LABEL_81;
    }
    icu::UnicodeString::unBogus((uint64_t)&v84);
    if ((v85 & 0x8000u) == 0) {
      uint64_t v40 = (unsigned __int16)v85 >> 5;
    }
    else {
      uint64_t v40 = DWORD1(v85);
    }
    icu::UnicodeString::doReplace((uint64_t)&v84, 0, v40, (uint64_t)L"Any", 0, 3);
    char v14 = 0;
  }
  LODWORD(v41) = (unsigned __int16)v80 >> 5;
  if ((v80 & 0x8000u) == 0) {
    unint64_t v41 = v41;
  }
  else {
    unint64_t v41 = DWORD1(v80);
  }
  if (!v41)
  {
    icu::UnicodeString::unBogus((uint64_t)&v79);
    if ((v80 & 0x8000u) == 0) {
      uint64_t v42 = (unsigned __int16)v80 >> 5;
    }
    else {
      uint64_t v42 = DWORD1(v80);
    }
    icu::UnicodeString::doReplace((uint64_t)&v79, 0, v42, (uint64_t)L"Any", 0, 3);
  }
  unsigned int v43 = icu::UMemory::operator new((uint64_t *)v41, (icu::UMemory *)0x110, v6);
  uint64_t v45 = v43;
  if (v43) {
    sub_18C9F1D7C((uint64_t)v43, &v84, &v79, &v74, v14, &v69);
  }
LABEL_81:
  icu::UnicodeString::~UnicodeString((void *)v44, (icu::UnicodeString *)&v69);
  icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v74);
  icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v79);
  icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v84);
  icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v89);
  return v45;
}

uint64_t *sub_18C9F29E4(uint64_t a1, unint64_t a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  long long v58 = 0u;
  uint64_t v61 = 0;
  long long v60 = 0u;
  long long v59 = 0u;
  uint64_t v2 = 2;
  LOWORD(v58) = 2;
  long long v53 = 0u;
  uint64_t v56 = 0;
  long long v57 = (UChar *)&unk_1EDA47700;
  long long v55 = 0u;
  long long v54 = 0u;
  UErrorCode v52 = (UChar *)&unk_1EDA47700;
  LOWORD(v53) = 2;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v51 = 0;
  long long v50 = 0u;
  uint64_t v47 = (UChar *)&unk_1EDA47700;
  LOWORD(v48) = 2;
  if (a1)
  {
    long long v43 = 0uLL;
    long long v44 = 0uLL;
    uint64_t v46 = 0;
    long long v45 = 0uLL;
    uint64_t v42 = (UChar *)&unk_1EDA47700;
    LOWORD(v43) = 2;
    if (a2)
    {
      unsigned int v4 = *(unsigned __int16 *)(a1 + 80);
      int v5 = (__int16)v4;
      unsigned int v6 = v4 >> 5;
      if (v5 >= 0) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = *(unsigned int *)(a1 + 84);
      }
      uint64_t v8 = icu::UnicodeString::doAppend((uint64_t)&v42, (const icu::UnicodeString *)(a1 + 72), 0, v7);
      __int16 v41 = 45;
      unsigned int v9 = (UChar **)icu::UnicodeString::doAppend(v8, (uint64_t)&v41, 0, 1);
      int v10 = (const icu::UnicodeString *)(a1 + 8);
      unsigned int v11 = *(unsigned __int16 *)(a1 + 16);
      int v12 = (__int16)v11;
      unsigned int v13 = v11 >> 5;
      if (v12 >= 0) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = *(unsigned int *)(a1 + 20);
      }
    }
    else
    {
      int v15 = (const icu::UnicodeString *)(a1 + 8);
      if (*(unsigned char *)(a1 + 264))
      {
        unsigned int v16 = *(unsigned __int16 *)(a1 + 16);
        int v17 = (__int16)v16;
        unsigned int v18 = v16 >> 5;
        if (v17 >= 0) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = *(unsigned int *)(a1 + 20);
        }
        int v20 = (UChar **)icu::UnicodeString::doAppend((uint64_t)&v42, v15, 0, v19);
        __int16 v41 = 45;
      }
      else
      {
        icu::UnicodeString::operator=(&v47, (UChar **)v15);
        __int16 v41 = 45;
        int v20 = &v47;
      }
      icu::UnicodeString::doAppend((uint64_t)v20, (uint64_t)&v41, 0, 1);
      int v10 = (const icu::UnicodeString *)(a1 + 72);
      unsigned int v21 = *(unsigned __int16 *)(a1 + 80);
      int v22 = (__int16)v21;
      unsigned int v23 = v21 >> 5;
      if (v22 >= 0) {
        uint64_t v14 = v23;
      }
      else {
        uint64_t v14 = *(unsigned int *)(a1 + 84);
      }
      unsigned int v9 = &v42;
    }
    icu::UnicodeString::doAppend((uint64_t)v9, v10, 0, v14);
    if (*(__int16 *)(a1 + 144) < 0)
    {
      if (!*(_DWORD *)(a1 + 148)) {
        goto LABEL_25;
      }
    }
    else if (!(*(unsigned __int16 *)(a1 + 144) >> 5))
    {
      goto LABEL_25;
    }
    __int16 v41 = 47;
    uint64_t v24 = icu::UnicodeString::doAppend((uint64_t)&v42, (uint64_t)&v41, 0, 1);
    unsigned int v25 = *(unsigned __int16 *)(a1 + 144);
    int v26 = (__int16)v25;
    unsigned int v27 = v25 >> 5;
    if (v26 >= 0) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = *(unsigned int *)(a1 + 148);
    }
    icu::UnicodeString::doAppend(v24, (const icu::UnicodeString *)(a1 + 136), 0, v28);
LABEL_25:
    icu::UnicodeString::operator=(&v52, &v47);
    if ((v43 & 0x8000u) == 0) {
      uint64_t v29 = (unsigned __int16)v43 >> 5;
    }
    else {
      uint64_t v29 = DWORD1(v43);
    }
    icu::UnicodeString::doAppend((uint64_t)&v52, (const icu::UnicodeString *)&v42, 0, v29);
    unsigned int v30 = *(unsigned __int16 *)(a1 + 208);
    if ((v30 & 0x8000) != 0)
    {
      if (*(_DWORD *)(a1 + 212)) {
        goto LABEL_30;
      }
    }
    else if (v30 >> 5)
    {
LABEL_30:
      int v31 = (__int16)v30;
      unsigned int v32 = v30 >> 5;
      if (v31 >= 0) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = *(unsigned int *)(a1 + 212);
      }
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v42, 0, 0, (const icu::UnicodeString *)(a1 + 200), 0, v33);
    }
    icu::UnicodeString::operator=(&v57, &v42);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v42);
  }
  uint64_t v35 = icu::UMemory::operator new((uint64_t *)v2, (icu::UMemory *)0xC8, a2);
  int v37 = v35;
  if (v35) {
    sub_18C9F1E88((uint64_t)v35, &v57, &v52);
  }
  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v47);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v52);
  icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v57);
  return v37;
}

uint64_t *sub_18C9F2D2C(uint64_t a1, int *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 8;
  unsigned int v5 = *(unsigned __int16 *)(a1 + 16);
  int v6 = (__int16)v5;
  int v7 = v5 >> 5;
  if (v6 >= 0) {
    int v8 = v7;
  }
  else {
    int v8 = *(_DWORD *)(a1 + 20);
  }
  if (icu::UnicodeString::doCaseCompare(v4, 0, v8, (uint64_t)L"Any", 0, 3, 0)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = *a2 <= 0;
  }
  if (!v9) {
    return 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192948, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192948))
  {
    if (dword_1E919294C >= 1)
    {
      int v10 = 0;
      *a2 = dword_1E919294C;
      return v10;
    }
  }
  else
  {
    sub_18C9F41C4(a2);
    dword_1E919294C = *a2;
    icu::umtx_initImplPostInit(&dword_1E9192948);
  }
  if (*a2 > 0) {
    return 0;
  }
  umtx_lock((atomic_ullong *)&unk_1EB20BC20);
  uint64_t v12 = uhash_get(*(void *)qword_1E9192940, a1 + 72);
  umtx_unlock((std::mutex **)&unk_1EB20BC20);
  if (!v12) {
    return 0;
  }
  long long v47 = 0u;
  uint64_t v50 = 0;
  long long v49 = 0u;
  long long v48 = 0u;
  uint64_t v46 = (UChar *)&unk_1EDA47700;
  LOWORD(v47) = 2;
  unsigned int v13 = *(unsigned __int16 *)(a1 + 208);
  int v14 = (__int16)v13;
  unsigned int v15 = v13 >> 5;
  if (v14 >= 0) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = *(unsigned int *)(a1 + 212);
  }
  if (v16) {
    icu::UnicodeString::doAppend((uint64_t)&v46, (const icu::UnicodeString *)(a1 + 200), 0, v16);
  }
  if (*(unsigned char *)(a1 + 264))
  {
    uint64_t v17 = icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)L"Any", 0, 3);
    LOWORD(v45[0]) = 45;
    icu::UnicodeString::doAppend(v17, (uint64_t)v45, 0, 1);
  }
  unsigned int v18 = *(unsigned __int16 *)(v12 + 8);
  int v19 = (__int16)v18;
  unsigned int v20 = v18 >> 5;
  if (v19 >= 0) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = *(unsigned int *)(v12 + 12);
  }
  icu::UnicodeString::doAppend((uint64_t)&v46, (const icu::UnicodeString *)v12, 0, v21);
  memset(v45, 0, sizeof(v45));
  long long v43 = L"Any";
  icu::UnicodeString::UnicodeString(v45, 1, &v43);
  __int16 v44 = 45;
  uint64_t v22 = icu::UnicodeString::doAppend((uint64_t)v45, (uint64_t)&v44, 0, 1);
  unsigned int v23 = *(unsigned __int16 *)(v12 + 8);
  int v24 = (__int16)v23;
  unsigned int v25 = v23 >> 5;
  if (v24 >= 0) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = *(unsigned int *)(v12 + 12);
  }
  icu::UnicodeString::doAppend(v22, (const icu::UnicodeString *)v12, 0, v26);
  LODWORD(v29) = *(unsigned __int16 *)(a1 + 144);
  int v28 = (__int16)v29;
  LODWORD(v29) = v29 >> 5;
  if (v28 >= 0) {
    unint64_t v29 = v29;
  }
  else {
    unint64_t v29 = *(unsigned int *)(a1 + 148);
  }
  if (v29)
  {
    __int16 v44 = 47;
    uint64_t v30 = icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)&v44, 0, 1);
    unsigned int v31 = *(unsigned __int16 *)(a1 + 144);
    int v32 = (__int16)v31;
    unsigned int v33 = v31 >> 5;
    if (v32 >= 0) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = *(unsigned int *)(a1 + 148);
    }
    icu::UnicodeString::doAppend(v30, (const icu::UnicodeString *)(a1 + 136), 0, v34);
    __int16 v44 = 47;
    uint64_t v35 = icu::UnicodeString::doAppend((uint64_t)v45, (uint64_t)&v44, 0, 1);
    unsigned int v36 = *(unsigned __int16 *)(a1 + 144);
    int v37 = (__int16)v36;
    unsigned int v38 = v36 >> 5;
    if (v37 >= 0) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = *(unsigned int *)(a1 + 148);
    }
    icu::UnicodeString::doAppend(v35, (const icu::UnicodeString *)(a1 + 136), 0, v39);
  }
  uint64_t v40 = icu::UMemory::operator new((uint64_t *)v29, (icu::UMemory *)0xC8, v27);
  int v10 = v40;
  if (v40) {
    sub_18C9F1E88((uint64_t)v40, &v46, (UChar **)v45);
  }
  icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v45);
  icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v46);
  return v10;
}

uint64_t *sub_18C9F3094(uint64_t a1, const icu::UnicodeString *a2)
{
  int v3 = *(_DWORD *)a2;
  uint64_t v4 = sub_18C9F23D8(a1, a2, 1);
  if (v4)
  {
    unsigned int v5 = (UChar **)v4;
    int v6 = sub_18C9F29E4((uint64_t)v4, 0);
    int v8 = v6;
    if (v6) {
      icu::UnicodeString::operator=((UChar **)v6 + 17, v5 + 25);
    }
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(v5 + 25));
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(v5 + 17));
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)(v5 + 9));
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)(v5 + 1));
    icu::UMemory::operator delete(v5);
  }
  else
  {
    int v8 = 0;
    *(_DWORD *)a2 = v3;
  }
  return v8;
}

icu::UnicodeSet *sub_18C9F3124(icu::ICU_Utility *this, icu::UnicodeString *a2, int a3, int *a4, icu::UnicodeString *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v10 = *(_DWORD *)a2;
  if (*a4 == 1)
  {
    if (!icu::ICU_Utility::parseChar((uint64_t)this, a2, 40))
    {
      int v14 = 0;
      *(_DWORD *)a2 = v10;
      return v14;
    }
  }
  else if (*a4 == -1)
  {
    *a4 = icu::ICU_Utility::parseChar((uint64_t)this, a2, 40);
  }
  icu::ICU_Utility::skipWhitespace(this, a2, (int *)1);
  if (!icu::UnicodeSet::resemblesPattern(this, (const icu::UnicodeString *)*(unsigned int *)a2)) {
    return 0;
  }
  uint64_t v12 = (uint64_t *)*(unsigned int *)a2;
  uint64_t v26 = &unk_1EDA44670;
  unsigned int v27 = v12;
  int v28 = -1;
  UErrorCode v25 = U_ZERO_ERROR;
  unsigned int v13 = (icu::UnicodeSet *)icu::UMemory::operator new(v12, (icu::UMemory *)0xC8, v11);
  if (!v13) {
    goto LABEL_9;
  }
  int v14 = v13;
  icu::UnicodeSet::UnicodeSet(v13, this, (icu::ParsePosition *)&v26, 1u, 0, &v25);
  if (v25 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    icu::UnicodeSet::~UnicodeSet(v14);
    icu::UMemory::operator delete(v15);
LABEL_9:
    *(_DWORD *)a2 = v10;
LABEL_10:
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v26);
    return 0;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v34 = 0;
  long long v33 = 0u;
  uint64_t v30 = &unk_1EDA47700;
  LOWORD(v31) = 2;
  (*(void (**)(icu::ICU_Utility *, void, void, void **))(*(void *)this + 24))(this, *(unsigned int *)a2, v27, &v30);
  *(_DWORD *)a2 = v27;
  unint64_t v17 = *a4;
  if (v17 == 1 && !icu::ICU_Utility::parseChar((uint64_t)this, a2, 41))
  {
    icu::UnicodeSet::~UnicodeSet(v14);
    icu::UMemory::operator delete(v23);
    *(_DWORD *)a2 = v10;
    icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v30);
    goto LABEL_10;
  }
  if (a5)
  {
    int v18 = *a4;
    if (a3)
    {
      if (!v18)
      {
        __int16 v29 = 40;
        icu::UnicodeString::doReplace((uint64_t)&v30, 0, 0, (uint64_t)&v29, 0, 1);
        __int16 v29 = 41;
        icu::UnicodeString::doAppend((uint64_t)&v30, (uint64_t)&v29, 0, 1);
      }
      if ((v31 & 0x8000u) == 0) {
        uint64_t v19 = (unsigned __int16)v31 >> 5;
      }
      else {
        uint64_t v19 = DWORD1(v31);
      }
      icu::UnicodeString::doReplace(a5, 0, 0, (const icu::UnicodeString *)&v30, 0, v19);
      if ((v31 & 0x8000u) == 0) {
        uint64_t v20 = (unsigned __int16)v31 >> 5;
      }
      else {
        uint64_t v20 = DWORD1(v31);
      }
      __int16 v29 = 59;
      icu::UnicodeString::doReplace((uint64_t)a5, v20, 0, (uint64_t)&v29, 0, 1);
    }
    else
    {
      if (v18 == 1)
      {
        __int16 v29 = 40;
        icu::UnicodeString::doReplace((uint64_t)&v30, 0, 0, (uint64_t)&v29, 0, 1);
        __int16 v29 = 41;
        icu::UnicodeString::doAppend((uint64_t)&v30, (uint64_t)&v29, 0, 1);
      }
      if ((v31 & 0x8000u) == 0) {
        uint64_t v21 = (unsigned __int16)v31 >> 5;
      }
      else {
        uint64_t v21 = DWORD1(v31);
      }
      uint64_t v22 = icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)&v30, 0, v21);
      __int16 v29 = 59;
      icu::UnicodeString::doAppend(v22, (uint64_t)&v29, 0, 1);
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v30);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v26);
  return v14;
}

uint64_t sub_18C9F34A4(uint64_t a1, int a2, uint64_t a3, icu::UVector *this, icu::UnicodeSet **a5)
{
  int v36 = 0;
  UErrorCode v37 = U_ZERO_ERROR;
  icu::UVector::removeAllElements((uint64_t)this);
  int v10 = (void (*)(void *))icu::UVector::setDeleter(this, (void (*)(void *))sub_18C9F37A4);
  *a5 = 0;
  unsigned int v11 = *(unsigned __int16 *)(a3 + 8);
  if (v11)
  {
    icu::UnicodeString::unBogus(a3);
  }
  else
  {
    if ((v11 & 0x8000u) == 0) {
      unsigned int v12 = v11 >> 5;
    }
    else {
      unsigned int v12 = *(_DWORD *)(a3 + 12);
    }
    if (v12) {
      *(_WORD *)(a3 + 8) &= 0x1Fu;
    }
  }
  int v35 = 0;
  unsigned int v13 = sub_18C9F3124((icu::ICU_Utility *)a1, (icu::UnicodeString *)&v36, a2, &v35, (icu::UnicodeString *)a3);
  if (v13)
  {
    int v14 = v13;
    if (icu::ICU_Utility::parseChar(a1, (const icu::UnicodeString *)&v36, 59))
    {
      if (a2)
      {
LABEL_11:
        icu::UnicodeSet::~UnicodeSet(v14);
        icu::UMemory::operator delete(v15);
        goto LABEL_21;
      }
    }
    else
    {
      unsigned int v16 = *(unsigned __int16 *)(a3 + 8);
      if (v16)
      {
        icu::UnicodeString::unBogus(a3);
      }
      else
      {
        if ((v16 & 0x8000u) == 0) {
          unsigned int v17 = v16 >> 5;
        }
        else {
          unsigned int v17 = *(_DWORD *)(a3 + 12);
        }
        if (v17) {
          *(_WORD *)(a3 + 8) &= 0x1Fu;
        }
      }
      int v36 = 0;
      if (a2) {
        goto LABEL_11;
      }
    }
    *a5 = v14;
    goto LABEL_21;
  }
  do
  {
LABEL_21:
    int v18 = sub_18C9F2080(a1, (const icu::UnicodeString *)&v36, a2, (int *)&v37);
    if (!v18) {
      break;
    }
    if (a2) {
      icu::UVector::insertElementAt((uint64_t (**)(void *))this, v18, 0, &v37);
    }
    else {
      icu::UVector::adoptElement((uint64_t (**)(void *))this, v18, &v37);
    }
    if (v37 > U_ZERO_ERROR) {
      goto LABEL_41;
    }
  }
  while (icu::ICU_Utility::parseChar(a1, (const icu::UnicodeString *)&v36, 59));
  int v19 = *((_DWORD *)this + 2);
  if (v19)
  {
    if (v19 >= 1)
    {
      for (signed int i = 0; i < v26; ++i)
      {
        uint64_t v21 = icu::UVector::elementAt(this, i);
        unsigned int v22 = *(unsigned __int16 *)(v21 + 16);
        int v23 = (__int16)v22;
        unsigned int v24 = v22 >> 5;
        if (v23 >= 0) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = *(unsigned int *)(v21 + 20);
        }
        icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)(v21 + 8), 0, v25);
        signed int v26 = *((_DWORD *)this + 2);
        if (i != v26 - 1)
        {
          __int16 v38 = 59;
          icu::UnicodeString::doAppend(a3, (uint64_t)&v38, 0, 1);
          signed int v26 = *((_DWORD *)this + 2);
        }
      }
    }
    if (!v18)
    {
      int v35 = 1;
      long long v32 = sub_18C9F3124((icu::ICU_Utility *)a1, (icu::UnicodeString *)&v36, a2, &v35, (icu::UnicodeString *)a3);
      if (v32)
      {
        long long v33 = v32;
        icu::ICU_Utility::parseChar(a1, (const icu::UnicodeString *)&v36, 59);
        if (a2 == 1)
        {
          *a5 = v33;
        }
        else
        {
          icu::UnicodeSet::~UnicodeSet(v33);
          icu::UMemory::operator delete(v34);
        }
      }
    }
    icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, (const icu::UnicodeString *)&v36, (int *)1);
    unsigned int v27 = *(unsigned __int16 *)(a1 + 8);
    int v28 = (__int16)v27;
    unsigned int v29 = v27 >> 5;
    if (v28 < 0) {
      unsigned int v29 = *(_DWORD *)(a1 + 12);
    }
    if (v36 == v29)
    {
      icu::UVector::setDeleter(this, v10);
      return 1;
    }
  }
LABEL_41:
  icu::UVector::removeAllElements((uint64_t)this);
  icu::UVector::setDeleter(this, v10);
  if (*a5)
  {
    icu::UnicodeSet::~UnicodeSet(*a5);
    icu::UMemory::operator delete(v31);
  }
  uint64_t result = 0;
  *a5 = 0;
  return result;
}

void sub_18C9F37A4(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 136));
    icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 72));
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 8));
    icu::UMemory::operator delete((void *)a1);
  }
}

void sub_18C9F37F8(icu::UVector *a1, UErrorCode *a2)
{
  v18[8] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  icu::UVector::UVector((icu::UVector *)v16, a2);
  if (*(int *)a2 > 0) {
    goto LABEL_2;
  }
  icu::UVector::setDeleter((icu::UVector *)v16, (void (*)(void *))sub_18C9F3A18);
  if (*((int *)a1 + 2) >= 1)
  {
    for (signed int i = 0; i < *((_DWORD *)a1 + 2); ++i)
    {
      uint64_t v7 = icu::UVector::elementAt(a1, i);
      unsigned int v10 = *(unsigned __int16 *)(v7 + 80);
      if ((v10 & 0x8000) != 0)
      {
        if (!*(_DWORD *)(v7 + 84)) {
          continue;
        }
      }
      else if (!(v10 >> 5))
      {
        continue;
      }
      unsigned int v11 = sub_18C9F1F38(v7, v8, v9);
      if (!v11)
      {
        *a2 = U_INVALID_ID;
        goto LABEL_2;
      }
      icu::UVector::adoptElement((uint64_t (**)(void *))v16, v11, a2);
      if (*(int *)a2 > 0) {
        goto LABEL_2;
      }
    }
  }
  if (!DWORD2(v16[0]))
  {
    unsigned int v15 = "A";
    icu::UnicodeString::UnicodeString(v18, 1, &v15);
    Basicuint64_t Instance = icu::Transliterator::createBasicInstance(v18, 0, v12);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v18);
    if (!BasicInstance) {
      *a2 = U_INTERNAL_TRANSLITERATOR_ERROR;
    }
    icu::UVector::adoptElement((uint64_t (**)(void *))v16, BasicInstance, a2);
  }
LABEL_2:
  uint64_t v4 = (void (*)(void *))icu::UVector::setDeleter(a1, (void (*)(void *))sub_18C9F37A4);
  icu::UVector::removeAllElements((uint64_t)a1);
  if (*(int *)a2 <= 0)
  {
    icu::UVector::setDeleter(a1, (void (*)(void *))sub_18C9F3A18);
    while (SDWORD2(v16[0]) >= 1)
    {
      unsigned int v5 = (void *)icu::UVector::orphanElementAt((icu::UVector *)v16, 0);
      icu::UVector::adoptElement((uint64_t (**)(void *))a1, v5, a2);
      if (*(int *)a2 >= 1)
      {
        icu::UVector::removeAllElements((uint64_t)a1);
        break;
      }
    }
  }
  icu::UVector::setDeleter(a1, v4);
  icu::UVector::~UVector((icu::UVector *)v16);
}

uint64_t sub_18C9F3A18(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_18C9F3A44(uint64_t a1, icu::UnicodeString *this, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  icu::UnicodeString::unBogus((uint64_t)this);
  unsigned int v10 = *((unsigned __int16 *)this + 4);
  int v11 = (__int16)v10;
  unsigned int v12 = v10 >> 5;
  if (v11 >= 0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = *((unsigned int *)this + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)this, 0, v13, (uint64_t)L"Any", 0, 3);
  unsigned int v14 = *(unsigned __int16 *)(a3 + 8);
  if (v14)
  {
    icu::UnicodeString::unBogus(a3);
  }
  else
  {
    if ((v14 & 0x8000u) == 0) {
      unsigned int v15 = v14 >> 5;
    }
    else {
      unsigned int v15 = *(_DWORD *)(a3 + 12);
    }
    if (v15) {
      *(_WORD *)(a3 + 8) &= 0x1Fu;
    }
  }
  unsigned int v16 = *(unsigned __int16 *)(a4 + 8);
  if (v16)
  {
    icu::UnicodeString::unBogus(a4);
  }
  else
  {
    if ((v16 & 0x8000u) == 0) {
      unsigned int v17 = v16 >> 5;
    }
    else {
      unsigned int v17 = *(_DWORD *)(a4 + 12);
    }
    if (v17) {
      *(_WORD *)(a4 + 8) &= 0x1Fu;
    }
  }
  unsigned int v18 = *(unsigned __int16 *)(a1 + 8);
  int v19 = (__int16)v18;
  int32_t v20 = v18 >> 5;
  if (v19 >= 0) {
    int32_t v21 = v20;
  }
  else {
    int32_t v21 = *(_DWORD *)(a1 + 12);
  }
  uint64_t v22 = icu::UnicodeString::doIndexOf(a1, 0x2Du, 0, v21);
  unsigned int v23 = *(unsigned __int16 *)(a1 + 8);
  int v24 = (__int16)v23;
  int32_t v25 = v23 >> 5;
  if (v24 >= 0) {
    int32_t v26 = v25;
  }
  else {
    int32_t v26 = *(_DWORD *)(a1 + 12);
  }
  uint64_t v27 = icu::UnicodeString::doIndexOf(a1, 0x2Fu, 0, v26);
  if ((v27 & 0x80000000) != 0)
  {
    if (*(__int16 *)(a1 + 8) < 0) {
      uint64_t v27 = *(unsigned int *)(a1 + 12);
    }
    else {
      uint64_t v27 = *(unsigned __int16 *)(a1 + 8) >> 5;
    }
  }
  *a5 = 0;
  if ((v22 & 0x80000000) != 0)
  {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0, v27, a3);
    unsigned int v28 = *(unsigned __int16 *)(a1 + 8);
    int v29 = (__int16)v28;
    unsigned int v30 = v28 >> 5;
    if (v29 >= 0) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = *(unsigned int *)(a1 + 12);
    }
    long long v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);
LABEL_42:
    uint64_t v36 = a1;
    uint64_t v37 = v27;
    uint64_t v38 = a4;
    goto LABEL_47;
  }
  if ((int)v22 < (int)v27)
  {
    if (v22)
    {
      (*(void (**)(uint64_t, void, uint64_t, icu::UnicodeString *))(*(void *)a1 + 24))(a1, 0, v22, this);
      *a5 = 1;
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, (v22 + 1), v27, a3);
    unsigned int v33 = *(unsigned __int16 *)(a1 + 8);
    int v34 = (__int16)v33;
    unsigned int v35 = v33 >> 5;
    if (v34 >= 0) {
      uint64_t v31 = v35;
    }
    else {
      uint64_t v31 = *(unsigned int *)(a1 + 12);
    }
    long long v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);
    goto LABEL_42;
  }
  if ((int)v27 > 0)
  {
    (*(void (**)(uint64_t, void, uint64_t, icu::UnicodeString *))(*(void *)a1 + 24))(a1, 0, v27, this);
    *a5 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v27, v22, a4);
  unsigned int v39 = *(unsigned __int16 *)(a1 + 8);
  int v40 = (__int16)v39;
  unsigned int v41 = v39 >> 5;
  if (v40 >= 0) {
    uint64_t v31 = v41;
  }
  else {
    uint64_t v31 = *(unsigned int *)(a1 + 12);
  }
  long long v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24);
  uint64_t v36 = a1;
  uint64_t v37 = (v22 + 1);
  uint64_t v38 = a3;
LABEL_47:
  uint64_t result = v32(v36, v37, v31, v38);
  unsigned int v43 = *(unsigned __int16 *)(a4 + 8);
  int v44 = (__int16)v43;
  int v45 = v43 >> 5;
  if (v44 < 0) {
    int v45 = *(_DWORD *)(a4 + 12);
  }
  if (v45 >= 1)
  {
    return icu::UnicodeString::doReplace(a4, 0, 1, 0, 0, 0);
  }
  return result;
}

uint64_t sub_18C9F3DF8(UChar **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  icu::UnicodeString::operator=((UChar **)a4, a1);
  unsigned int v7 = *(unsigned __int16 *)(a4 + 8);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  if (v8 < 0) {
    unsigned int v9 = *(_DWORD *)(a4 + 12);
  }
  if (!v9)
  {
    icu::UnicodeString::unBogus(a4);
    unsigned int v10 = *(unsigned __int16 *)(a4 + 8);
    int v11 = (__int16)v10;
    unsigned int v12 = v10 >> 5;
    if (v11 >= 0) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = *(unsigned int *)(a4 + 12);
    }
    icu::UnicodeString::doReplace(a4, 0, v13, (uint64_t)L"Any", 0, 3);
  }
  __int16 v31 = 45;
  uint64_t v14 = icu::UnicodeString::doAppend(a4, (uint64_t)&v31, 0, 1);
  unsigned int v15 = *(unsigned __int16 *)(a2 + 8);
  int v16 = (__int16)v15;
  unsigned int v17 = v15 >> 5;
  if (v16 >= 0) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = *(unsigned int *)(a2 + 12);
  }
  icu::UnicodeString::doAppend(v14, (const icu::UnicodeString *)a2, 0, v18);
  unsigned int v19 = *(unsigned __int16 *)(a3 + 8);
  int v20 = (__int16)v19;
  unsigned int v21 = v19 >> 5;
  if (v20 < 0) {
    unsigned int v21 = *(_DWORD *)(a3 + 12);
  }
  if (v21)
  {
    __int16 v32 = 47;
    uint64_t v22 = icu::UnicodeString::doAppend(a4, (uint64_t)&v32, 0, 1);
    unsigned int v23 = *(unsigned __int16 *)(a3 + 8);
    int v24 = (__int16)v23;
    unsigned int v25 = v23 >> 5;
    if (v24 >= 0) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = *(unsigned int *)(a3 + 12);
    }
    icu::UnicodeString::doAppend(v22, (const icu::UnicodeString *)a3, 0, v26);
  }
  __int16 v33 = 0;
  uint64_t result = icu::UnicodeString::doAppend(a4, (uint64_t)&v33, 0, 1);
  unsigned int v28 = *(unsigned __int16 *)(a4 + 8);
  if (*(__int16 *)(a4 + 8) < 0) {
    unsigned int v29 = *(_DWORD *)(a4 + 12);
  }
  else {
    unsigned int v29 = v28 >> 5;
  }
  int v30 = v29 - 1;
  if ((v28 & 1) != 0 && v29 == 1) {
    return icu::UnicodeString::unBogus(a4);
  }
  if (v29 > v30)
  {
    if (v30 > 1023)
    {
      *(_WORD *)(a4 + 8) = v28 | 0xFFE0;
      *(_DWORD *)(a4 + 12) = v30;
    }
    else
    {
      *(_WORD *)(a4 + 8) = *(_WORD *)(a4 + 8) & 0x1F | (32 * v30);
    }
  }
  return result;
}

void sub_18C9F3FA0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192948, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192948))
    {
      if (dword_1E919294C >= 1)
      {
        *a4 = dword_1E919294C;
        return;
      }
    }
    else
    {
      sub_18C9F41C4(a4);
      dword_1E919294C = *a4;
      icu::umtx_initImplPostInit(&dword_1E9192948);
    }
    if (*a4 <= 0)
    {
      if (a3)
      {
        unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
        unsigned int v9 = *(unsigned __int16 *)(a2 + 8);
        if (v9)
        {
          int v15 = (v8 & 1) == 0;
        }
        else
        {
          int v10 = (__int16)v8;
          int v11 = v8 >> 5;
          if (v10 >= 0) {
            int v12 = v11;
          }
          else {
            int v12 = *(_DWORD *)(a1 + 12);
          }
          if ((v9 & 0x8000u) == 0) {
            int v13 = v9 >> 5;
          }
          else {
            int v13 = *(_DWORD *)(a2 + 12);
          }
          if ((v9 & 2) != 0) {
            uint64_t v14 = a2 + 10;
          }
          else {
            uint64_t v14 = *(void *)(a2 + 24);
          }
          int v15 = icu::UnicodeString::doCaseCompare(a1, 0, v12, v14, v13 & (v13 >> 31), v13 & ~(v13 >> 31), 0);
        }
        BOOL v16 = v15 == 0;
      }
      else
      {
        BOOL v16 = 1;
      }
      umtx_lock((atomic_ullong *)&unk_1EB20BC20);
      unsigned int v19 = (icu::UnicodeString *)icu::UMemory::operator new(v18, (icu::UMemory *)0x40, v17);
      if (!v19) {
        goto LABEL_32;
      }
      uint64_t v20 = (uint64_t)v19;
      icu::UnicodeString::UnicodeString(v19, (UChar **)a2);
      uint64_t v21 = *(void *)qword_1E9192940;
      unsigned int v23 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)qword_1E9192940, (icu::UMemory *)0x40, v22);
      uint64_t v24 = (uint64_t)v23;
      if (v23) {
        icu::UnicodeString::UnicodeString(v23, (UChar **)a1);
      }
      uhash_put(v21, v24, v20, a4);
      if (v16) {
        goto LABEL_33;
      }
      uint64_t v27 = (icu::UnicodeString *)icu::UMemory::operator new(v26, (icu::UMemory *)0x40, v25);
      if (v27)
      {
        uint64_t v28 = (uint64_t)v27;
        icu::UnicodeString::UnicodeString(v27, (UChar **)a1);
        uint64_t v29 = *(void *)qword_1E9192940;
        __int16 v31 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)qword_1E9192940, (icu::UMemory *)0x40, v30);
        uint64_t v32 = (uint64_t)v31;
        if (v31) {
          icu::UnicodeString::UnicodeString(v31, (UChar **)a2);
        }
        uhash_put(v29, v32, v28, a4);
      }
      else
      {
LABEL_32:
        *a4 = 7;
      }
LABEL_33:
      umtx_unlock((std::mutex **)&unk_1EB20BC20);
    }
  }
}

int32x2_t *sub_18C9F41C4(int *a1)
{
  sub_18CA0A25C(5u, (uint64_t)sub_18C9EEAE8);
  uint64_t result = (int32x2_t *)icu::UMemory::operator new(v3, (icu::UMemory *)0x58, v2);
  if (result)
  {
    unsigned int v5 = (uint64_t *)result;
    *uint64_t result = 0;
    if (*a1 <= 0)
    {
      int v6 = result + 1;
      uhash_init(result + 1, (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, a1);
      if (*a1 <= 0)
      {
        uint64_t *v5 = (uint64_t)v6;
        uhash_setKeyDeleter((uint64_t)(v5 + 1), (uint64_t)uprv_deleteUObject);
      }
    }
    qword_1E9192940 = (uint64_t)v5;
    uint64_t v7 = *v5;
    return (int32x2_t *)uhash_setValueDeleter(v7, (uint64_t)uprv_deleteUObject);
  }
  else
  {
    qword_1E9192940 = 0;
    *a1 = 7;
  }
  return result;
}

void sub_18C9F42CC()
{
  unint64_t v0 = (void *)qword_1E9192940;
  if (qword_1E9192940)
  {
    if (*(void *)qword_1E9192940) {
      uhash_close(*(unsigned char **)qword_1E9192940);
    }
    icu::UMemory::operator delete(v0);
    qword_1E9192940 = 0;
  }
  atomic_store(0, &dword_1E9192948);
}

void *sub_18C9F4318(void *a1)
{
  *a1 = &unk_1EDA53670;
  unint64_t v2 = (void *)a1[1];
  if (v2) {
    uprv_free(v2);
  }
  return a1;
}

void sub_18C9F4364(void *a1)
{
  *a1 = &unk_1EDA53670;
  unint64_t v2 = (void *)a1[1];
  if (v2) {
    uprv_free(v2);
  }

  icu::UMemory::operator delete(a1);
}

uint64_t *sub_18C9F43C0(uint64_t a1, _DWORD *a2)
{
  unint64_t v2 = (uint64_t *)*a2;
  if ((int)v2 > 0) {
    return 0;
  }
  uint64_t v7 = icu::UMemory::operator new(v2, (icu::UMemory *)0x18, (unint64_t)a2);
  int v3 = v7;
  if (!v7)
  {
    *a2 = 7;
    return v3;
  }
  uint64_t *v7 = (uint64_t)&unk_1EDA53670;
  v7[1] = 0;
  *((_DWORD *)v7 + 4) = 0;
  *((unsigned char *)v7 + 20) = 0;
  unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
  int v9 = (__int16)v8;
  int32_t v10 = v8 >> 5;
  if (v9 >= 0) {
    int32_t v11 = v10;
  }
  else {
    int32_t v11 = *(_DWORD *)(a1 + 12);
  }
  int v12 = (UChar *)uprv_malloc(2 * (v11 + 1));
  v3[1] = (uint64_t)v12;
  if (!v12)
  {
    *a2 = 7;
    (*(void (**)(uint64_t *))(*v3 + 8))(v3);
    return 0;
  }
  __int16 v13 = *(_WORD *)(a1 + 8);
  if ((v13 & 0x11) != 0)
  {
    uint64_t v14 = 0;
  }
  else if ((v13 & 2) != 0)
  {
    uint64_t v14 = (const UChar *)(a1 + 10);
  }
  else
  {
    uint64_t v14 = *(const UChar **)(a1 + 24);
  }
  u_strncpy(v12, v14, v11);
  *(_WORD *)(v3[1] + 2 * v11) = 0;
  *((_DWORD *)v3 + 4) = 0;
  return v3;
}

uint64_t sub_18C9F44E0(int a1, unint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  char v5 = a2;
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x18, a2);
  if (result)
  {
    *(void *)uint64_t result = &unk_1EDA53670;
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = a1;
    *(unsigned char *)(result + 20) = v5;
  }
  else
  {
    *a3 = 7;
  }
  return result;
}

void *icu::TimeZoneFormat::getStaticClassID(icu::TimeZoneFormat *this)
{
  return &unk_1E9192950;
}

void *icu::TimeZoneFormat::getDynamicClassID(icu::TimeZoneFormat *this)
{
  return &unk_1E9192950;
}

icu::TimeZoneFormat *icu::TimeZoneFormat::TimeZoneFormat(icu::TimeZoneFormat *this, char **a2, UErrorCode *a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int v6 = (void *)icu::Format::Format((uint64_t)this);
  void *v6 = &unk_1EDA53690;
  icu::Locale::Locale((icu::Locale *)(v6 + 41), (uint64_t)a2);
  *((_OWORD *)this + 35) = 0u;
  *((void *)this + 72) = &unk_1EDA47700;
  *((_WORD *)this + 292) = 2;
  uint64_t v7 = (char *)this + 1024;
  uint64_t v8 = 640;
  do
  {
    int v9 = (char *)this + v8;
    *(void *)int v9 = &unk_1EDA47700;
    *((_WORD *)v9 + 4) = 2;
    v8 += 64;
  }
  while (v9 + 64 != v7);
  *((void *)this + 133) = &unk_1EDA47700;
  *((_WORD *)this + 536) = 2;
  *((_DWORD *)this + 282) = 0;
  *((void *)this + 142) = &unk_1EDA47700;
  *((_WORD *)this + 572) = 2;
  *((void *)this + 150) = &unk_1EDA47700;
  *((_WORD *)this + 604) = 2;
  *((void *)this + 165) = 0;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 81) = 0u;
  int v11 = strlen((const char *)this + 354);
  if (v11)
  {
    int v12 = (char *)this + 552;
    if (v11 > 3) {
      char *v12 = 0;
    }
    else {
      strcpy(v12, (const char *)this + 354);
    }
LABEL_12:
    *((void *)this + 70) = icu::TimeZoneNames::createInstance((icu::TimeZoneNames *)a2, (const icu::Locale *)a3, v10);
    if (*(int *)a3 <= 0)
    {
      uint64_t v14 = ures_open("icudt74l-zone", a2[5], (int *)a3);
      uint64_t v15 = ures_getByKeyWithFallback(v14, "zoneStrings", 0, a3);
      BOOL v16 = 0;
      unint64_t v17 = 0;
      if (*(int *)a3 <= 0)
      {
        uint64_t v18 = v15;
        LODWORD(v48[0]) = 0;
        StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v15, "gmtFormat", (int *)v48, a3);
        if (SLODWORD(v48[0]) <= 0) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = (const __int16 *)StringByKeyWithFallback;
        }
        uint64_t v20 = ures_getStringByKeyWithFallback(v18, "gmtZeroFormat", (int *)v48, a3);
        if (SLODWORD(v48[0]) >= 1)
        {
          uint64_t v46 = v20;
          icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 1064), 1, &v46, v48[0]);
        }
        uint64_t v21 = ures_getStringByKeyWithFallback(v18, "hourFormat", (int *)v48, a3);
        int v22 = v48[0];
        ures_close(v18);
        ures_close(v14);
        if (v22 <= 0) {
          unint64_t v17 = 0;
        }
        else {
          unint64_t v17 = v21;
        }
      }
      unsigned int v23 = L"GMT{0}";
      if (v16) {
        unsigned int v23 = v16;
      }
      int v45 = v23;
      icu::UnicodeString::UnicodeString(v48, 1, &v45);
      icu::TimeZoneFormat::initGMTPattern((uint64_t)this, (const icu::UnicodeString *)v48, a3);
      icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v48);
      if (!v17) {
        goto LABEL_27;
      }
      unint64_t v25 = u_strchr(v17, 0x3Bu);
      if (!v25) {
        goto LABEL_27;
      }
      uint64_t v26 = v25;
      LODWORD(v48[0]) = 0;
      int v44 = v17;
      icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 640), 0, &v44, (unint64_t)((char *)v25 - (char *)v17) >> 1);
      unsigned int v43 = v26 + 1;
      icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 768), 1, &v43, -1);
      icu::TimeZoneFormat::expandOffsetPattern((icu::TimeZoneFormat *)((char *)this + 640), (icu::TimeZoneFormat *)((char *)this + 704), (icu::UnicodeString *)v48, v27);
      icu::TimeZoneFormat::expandOffsetPattern((icu::TimeZoneFormat *)((char *)this + 768), (icu::TimeZoneFormat *)((char *)this + 832), (icu::UnicodeString *)v48, v28);
      icu::TimeZoneFormat::truncateOffsetPattern((icu::TimeZoneFormat *)((char *)this + 640), (icu::TimeZoneFormat *)((char *)this + 896), (icu::UnicodeString *)v48, v29);
      icu::TimeZoneFormat::truncateOffsetPattern((icu::TimeZoneFormat *)((char *)this + 768), (icu::TimeZoneFormat *)((char *)this + 960), (icu::UnicodeString *)v48, v30);
      if (SLODWORD(v48[0]) >= 1)
      {
LABEL_27:
        uint64_t v42 = (const UChar *)"+";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 896), 1, &v42, -1);
        unsigned int v41 = (const UChar *)L"+H:mm";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 640), 1, &v41, -1);
        int v40 = (const UChar *)L"+H:mm:ss";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 704), 1, &v40, -1);
        unsigned int v39 = (const UChar *)"-";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 960), 1, &v39, -1);
        uint64_t v38 = (const UChar *)L"-H:mm";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 768), 1, &v38, -1);
        uint64_t v37 = (const UChar *)L"-H:mm:ss";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 832), 1, &v37, -1);
      }
      icu::TimeZoneFormat::initGMTOffsetPatterns((uint64_t (**)(void *))this, a3);
      uint64_t Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)a2, a3, v31);
      if (Instance)
      {
        __int16 v33 = Instance;
        if (icu::NumberingSystem::isAlgorithmic(Instance)
          || (memset(v48, 0, sizeof(v48)),
              (*(void (**)(_OWORD *__return_ptr, icu::NumberingSystem *))(*(void *)v33 + 24))(v48, v33),
              int v34 = icu::TimeZoneFormat::toCodePoints((icu::TimeZoneFormat *)v48, (icu::TimeZoneFormat *)((char *)this + 1024), (int *)0xA), icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v48), !v34))
        {
          *((void *)this + 132) = 0x3900000038;
          *(_OWORD *)uint64_t v7 = *(_OWORD *)L"0";
          *((_OWORD *)this + 65) = *(_OWORD *)L"4";
        }
        (*(void (**)(icu::NumberingSystem *))(*(void *)v33 + 8))(v33);
      }
      else
      {
        *((void *)this + 132) = 0x3900000038;
        *(_OWORD *)uint64_t v7 = *(_OWORD *)L"0";
        *((_OWORD *)this + 65) = *(_OWORD *)L"4";
      }
    }
    return this;
  }
  memset((char *)v48 + 8, 0, 56);
  v47[1] = 0;
  *(void *)&v48[0] = (char *)v48 + 13;
  DWORD2(v48[0]) = 40;
  v47[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v47, (uint64_t)v48);
  ulocimp_addLikelySubtags(*((void *)this + 46), v47, a3);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v47);
  int Country = uloc_getCountry(*(uint64_t *)&v48[0], (char *)this + 552, 4, (int *)a3);
  if (*(int *)a3 <= 0)
  {
    *((unsigned char *)this + Country + 552) = 0;
    if (BYTE12(v48[0])) {
      uprv_free(*(void **)&v48[0]);
    }
    goto LABEL_12;
  }
  if (BYTE12(v48[0])) {
    uprv_free(*(void **)&v48[0]);
  }
  return this;
}

uint64_t icu::TimeZoneFormat::initGMTPattern(uint64_t this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    char v5 = (UChar **)this;
    if (*((__int16 *)a2 + 4) < 0)
    {
      int v7 = *((_DWORD *)a2 + 3);
      int v6 = v7 & (v7 >> 31);
    }
    else
    {
      int v6 = 0;
      int v7 = *((unsigned __int16 *)a2 + 4) >> 5;
    }
    this = icu::UnicodeString::indexOf((uint64_t)a2, (uint64_t)L"{0}mm", 0, 3, v6, v7 - v6);
    if ((this & 0x80000000) != 0)
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      int32_t v8 = this;
      icu::UnicodeString::copyFrom(v5 + 72, (UChar **)a2, 0);
      icu::UnicodeString::tempSubString(a2, 0, v8, (icu::UnicodeString *)v13);
      icu::TimeZoneFormat::unquote((icu::TimeZoneFormat *)v13, (const icu::UnicodeString *)(v5 + 142), v9);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v13);
      icu::UnicodeString::tempSubString(a2, v8 + 3, 0x7FFFFFFF, (icu::UnicodeString *)v13);
      icu::TimeZoneFormat::unquote((icu::TimeZoneFormat *)v13, (const icu::UnicodeString *)(v5 + 150), v11);
      return (uint64_t)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v13);
    }
  }
  return this;
}

const icu::UnicodeString *icu::TimeZoneFormat::expandOffsetPattern(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  icu::UnicodeString::setToBogus(a2);
  if (*(int *)a3 <= 0)
  {
    if (*((__int16 *)this + 4) < 0)
    {
      int v8 = *((_DWORD *)this + 3);
      int v7 = v8 & (v8 >> 31);
    }
    else
    {
      int v7 = 0;
      int v8 = *((unsigned __int16 *)this + 4) >> 5;
    }
    int32_t v9 = icu::UnicodeString::indexOf((uint64_t)this, (uint64_t)L"mm", 0, 2, v7, v8 - v7);
    if (v9 < 0)
    {
      *(_DWORD *)a3 = 1;
    }
    else
    {
      int32_t v10 = v9;
      long long v26 = 0u;
      long long v27 = 0u;
      uint64_t v29 = 0;
      long long v28 = 0u;
      unint64_t v25 = &unk_1EDA47700;
      LOWORD(v26) = 2;
      icu::UnicodeString::tempSubString(this, 0, v9, (icu::UnicodeString *)&v22);
      if ((v23 & 0x8000u) == 0) {
        int32_t v11 = v23 >> 5;
      }
      else {
        int32_t v11 = v24;
      }
      int IndexOf = icu::UnicodeString::doLastIndexOf((uint64_t)&v22, 0x48u, 0, v11);
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v22);
      if ((IndexOf & 0x80000000) == 0)
      {
        icu::UnicodeString::tempSubString(this, IndexOf + 1, v10 - (IndexOf + 1), (icu::UnicodeString *)&v22);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v25, (icu::UnicodeString *)&v22);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v22);
      }
      int32_t v15 = v10 + 2;
      icu::UnicodeString::tempSubString(this, 0, v15, (icu::UnicodeString *)&v22);
      icu::UnicodeString::copyFrom((UChar **)a2, &v22, 0);
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v22);
      if ((v26 & 0x8000u) == 0) {
        uint64_t v17 = (unsigned __int16)v26 >> 5;
      }
      else {
        uint64_t v17 = DWORD1(v26);
      }
      icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v25, 0, v17);
      icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"ss", 0, 0xFFFFFFFFLL);
      icu::UnicodeString::tempSubString(this, v15, 0x7FFFFFFF, (icu::UnicodeString *)&v22);
      if ((v23 & 0x8000u) == 0) {
        uint64_t v18 = v23 >> 5;
      }
      else {
        uint64_t v18 = v24;
      }
      icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v22, 0, v18);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v22);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v25);
    }
  }
  return a2;
}

icu::UnicodeString *icu::TimeZoneFormat::truncateOffsetPattern(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  char v5 = a2;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  icu::UnicodeString::setToBogus(a2);
  if (*(int *)a3 <= 0)
  {
    if (*((__int16 *)this + 4) < 0)
    {
      int v8 = *((_DWORD *)this + 3);
      int v7 = v8 & (v8 >> 31);
    }
    else
    {
      int v7 = 0;
      int v8 = *((unsigned __int16 *)this + 4) >> 5;
    }
    int32_t v9 = icu::UnicodeString::indexOf((uint64_t)this, (uint64_t)L"mm", 0, 2, v7, v8 - v7);
    if ((v9 & 0x80000000) == 0)
    {
      int32_t v10 = v9;
      int v22 = 4718664;
      icu::UnicodeString::tempSubString(this, 0, v9, (icu::UnicodeString *)&v23);
      if ((__int16)v24 < 0)
      {
        int v12 = v25;
        int v11 = v25 & (v25 >> 31);
      }
      else
      {
        int v11 = 0;
        int v12 = v24 >> 5;
      }
      int IndexOf = icu::UnicodeString::lastIndexOf((uint64_t)&v23, (uint64_t)&v22, 0, 2, v11, v12 - v11);
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v23);
      if ((IndexOf & 0x80000000) == 0)
      {
        int32_t v15 = IndexOf + 2;
LABEL_16:
        icu::UnicodeString::tempSubString(this, 0, v15, (icu::UnicodeString *)&v23);
        char v5 = icu::UnicodeString::copyFrom((UChar **)v5, &v23, 0);
        icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v23);
        return v5;
      }
      icu::UnicodeString::tempSubString(this, 0, v10, (icu::UnicodeString *)&v23);
      if ((__int16)v24 < 0)
      {
        int v17 = v25;
        int v16 = v25 & (v25 >> 31);
      }
      else
      {
        int v16 = 0;
        int v17 = v24 >> 5;
      }
      int v18 = icu::UnicodeString::doLastIndexOf((uint64_t)&v23, 0x48u, v16, v17 - v16);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v23);
      if ((v18 & 0x80000000) == 0)
      {
        int32_t v15 = v18 + 1;
        goto LABEL_16;
      }
    }
    *(_DWORD *)a3 = 1;
  }
  return v5;
}

uint64_t (**icu::TimeZoneFormat::initGMTOffsetPatterns(uint64_t (**this)(void *), UErrorCode *a2))(void *)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = 0;
  uint64_t v5 = (uint64_t)(this + 80);
  do
  {
    if (v4 <= 5)
    {
      this = icu::TimeZoneFormat::parseOffsetPattern(v5, dword_18CA97970[v4], (int *)a2);
      *(void *)(v3 + 8 * v4 + 1264) = this;
    }
    ++v4;
    v5 += 64;
  }
  while (v4 != 6);
  if (*(int *)a2 < 1)
  {
    return (uint64_t (**)(void *))icu::TimeZoneFormat::checkAbuttingHoursAndMinutes(v3);
  }
  return this;
}

uint64_t icu::TimeZoneFormat::toCodePoints(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int *a3)
{
  LODWORD(v3) = a3;
  uint64_t v7 = 0;
  if (icu::UnicodeString::countChar32(this, 0, 0x7FFFFFFF) == a3)
  {
    if ((int)v3 < 1)
    {
      return 1;
    }
    else
    {
      int v8 = 0;
      uint64_t v3 = v3;
      uint64_t v7 = 1;
      do
      {
        *(_DWORD *)a2 = icu::UnicodeString::char32At(v6, this, v8);
        a2 = (const icu::UnicodeString *)((char *)a2 + 4);
        int v8 = icu::UnicodeString::moveIndex32(this, v8, 1);
        --v3;
      }
      while (v3);
    }
  }
  return v7;
}

uint64_t icu::TimeZoneFormat::TimeZoneFormat(icu::TimeZoneFormat *this, const icu::TimeZoneFormat *a2)
{
  uint64_t v4 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  void *v4 = &unk_1EDA53690;
  icu::Locale::Locale((icu::Locale *)(v4 + 41));
  *((_OWORD *)this + 35) = 0u;
  *((void *)this + 72) = &unk_1EDA47700;
  *((_WORD *)this + 292) = 2;
  uint64_t v5 = 640;
  do
  {
    int v6 = (char *)this + v5;
    *(void *)int v6 = &unk_1EDA47700;
    *((_WORD *)v6 + 4) = 2;
    v5 += 64;
  }
  while (v6 + 64 != (char *)this + 1024);
  *((void *)this + 133) = &unk_1EDA47700;
  *((_WORD *)this + 536) = 2;
  *((void *)this + 142) = &unk_1EDA47700;
  *((_WORD *)this + 572) = 2;
  *((void *)this + 150) = &unk_1EDA47700;
  *((_WORD *)this + 604) = 2;
  *((void *)this + 165) = 0;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 81) = 0u;

  return icu::TimeZoneFormat::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::TimeZoneFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 560);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *(void *)(a1 + 568);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *(void *)(a1 + 568) = 0;
    uint64_t v6 = *(void *)(a1 + 1320);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *(void *)(a1 + 1320) = 0;
    icu::Locale::operator=((icu::Locale *)(a1 + 328), a2 + 328);
    *(_DWORD *)(a1 + 552) = *(_DWORD *)(a2 + 552);
    *(void *)(a1 + 560) = (*(uint64_t (**)(void))(**(void **)(a2 + 560) + 32))(*(void *)(a2 + 560));
    uint64_t v7 = *(void *)(a2 + 568);
    if (v7) {
      *(void *)(a1 + 568) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
    icu::UnicodeString::operator=((UChar **)(a1 + 576), (UChar **)(a2 + 576));
    icu::UnicodeString::operator=((UChar **)(a1 + 1136), (UChar **)(a2 + 1136));
    icu::UnicodeString::operator=((UChar **)(a1 + 1200), (UChar **)(a2 + 1200));
    UErrorCode v14 = U_ZERO_ERROR;
    uint64_t v8 = 640;
    uint64_t v9 = 1264;
    do
    {
      icu::UnicodeString::operator=((UChar **)(a1 + v8), (UChar **)(a2 + v8));
      uint64_t v10 = *(void *)(a1 + v9);
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      *(void *)(a1 + v9) = 0;
      v8 += 64;
      v9 += 8;
    }
    while (v8 != 1024);
    icu::TimeZoneFormat::initGMTOffsetPatterns((uint64_t (**)(void *))a1, &v14);
    icu::UnicodeString::operator=((UChar **)(a1 + 1064), (UChar **)(a2 + 1064));
    long long v11 = *(_OWORD *)(a2 + 1040);
    uint64_t v12 = *(void *)(a2 + 1056);
    *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
    *(void *)(a1 + 1056) = v12;
    *(_OWORD *)(a1 + 1040) = v11;
    *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a2 + 1128);
  }
  return a1;
}

void icu::TimeZoneFormat::~TimeZoneFormat(icu::TimeZoneFormat *this)
{
  *(void *)this = &unk_1EDA53690;
  uint64_t v2 = *((void *)this + 70);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 71);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 165);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  for (uint64_t i = 1264; i != 1312; i += 8)
  {
    uint64_t v6 = *(void *)((char *)this + i);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 1200));
  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 1136));
  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 1064));
  for (uint64_t j = 960; j != 576; j -= 64)
    icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + j));
  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 576));
  icu::Locale::~Locale((icu::TimeZoneFormat *)((char *)this + 328));

  icu::Format::~Format(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::TimeZoneFormat::~TimeZoneFormat(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::TimeZoneFormat::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = icu::Locale::operator==(a1 + 328, a2 + 328);
  if (!result) {
    return result;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 584);
  if (v5)
  {
    if ((*(_WORD *)(a2 + 584) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if ((v5 & 0x8000) != 0) {
      int v6 = *(_DWORD *)(a1 + 588);
    }
    else {
      int v6 = v5 >> 5;
    }
    uint64_t result = 0;
    unsigned int v7 = *(unsigned __int16 *)(a2 + 584);
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a2 + 588);
    }
    if (v7) {
      return result;
    }
    if (v6 != v8) {
      return result;
    }
    uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 576), (const icu::UnicodeString *)(a2 + 576), v6);
    if (!result) {
      return result;
    }
  }
  unsigned int v9 = *(unsigned __int16 *)(a1 + 1072);
  if (v9)
  {
    if ((*(_WORD *)(a2 + 1072) & 1) == 0) {
      return 0;
    }
    goto LABEL_26;
  }
  if ((v9 & 0x8000) != 0) {
    int v10 = *(_DWORD *)(a1 + 1076);
  }
  else {
    int v10 = v9 >> 5;
  }
  uint64_t result = 0;
  unsigned int v11 = *(unsigned __int16 *)(a2 + 1072);
  if ((v11 & 0x8000u) == 0) {
    unsigned int v12 = v11 >> 5;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a2 + 1076);
  }
  if ((v11 & 1) == 0 && v10 == v12)
  {
    uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 1064), (const icu::UnicodeString *)(a2 + 1064), v10);
    if (result)
    {
LABEL_26:
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 560) + 24))(*(void *)(a1 + 560), *(void *)(a2 + 560));
      if (!result) {
        return result;
      }
      unint64_t v13 = 0;
      uint64_t v14 = a1 + 640;
      uint64_t v15 = a2 + 640;
      do
      {
        unsigned int v16 = *(unsigned __int16 *)(v14 + 8);
        if (v16)
        {
          int v18 = *(_WORD *)(v15 + 8) & 1;
        }
        else
        {
          if ((v16 & 0x8000) != 0) {
            int v17 = *(_DWORD *)(v14 + 12);
          }
          else {
            int v17 = v16 >> 5;
          }
          uint64_t result = 0;
          unsigned int v19 = *(unsigned __int16 *)(v15 + 8);
          if ((v19 & 0x8000u) == 0) {
            unsigned int v20 = v19 >> 5;
          }
          else {
            unsigned int v20 = *(_DWORD *)(v15 + 12);
          }
          if ((v19 & 1) != 0 || v17 != v20) {
            return result;
          }
          int v18 = icu::UnicodeString::doEquals((icu::UnicodeString *)v14, (const icu::UnicodeString *)v15, v17);
        }
        if (v13 > 4) {
          break;
        }
        ++v13;
        v14 += 64;
        v15 += 64;
      }
      while ((v18 & 1) != 0);
      if (v18)
      {
        unint64_t v21 = 0;
        do
        {
          int v22 = *(_DWORD *)(a1 + 1024 + 4 * v21);
          int v23 = *(_DWORD *)(a2 + 1024 + 4 * v21);
          uint64_t result = v22 == v23;
          if (v21 > 8) {
            break;
          }
          ++v21;
        }
        while (v22 == v23);
        return result;
      }
      return 0;
    }
  }
  return result;
}

icu::TimeZoneFormat *icu::TimeZoneFormat::clone@<X0>(icu::TimeZoneFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::TimeZoneFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x530, a2);
  if (result) {
    return (icu::TimeZoneFormat *)icu::TimeZoneFormat::TimeZoneFormat(result, this);
  }
  return result;
}

icu::TimeZoneFormat *icu::TimeZoneFormat::createInstance@<X0>(char **this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::TimeZoneFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x530, (unint64_t)a2);
  if (result)
  {
    uint64_t result = icu::TimeZoneFormat::TimeZoneFormat(result, this, a2);
    if (*(int *)a2 >= 1)
    {
      (*(void (**)(icu::TimeZoneFormat *))(*(void *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t icu::TimeZoneFormat::getTimeZoneNames(icu::TimeZoneFormat *this)
{
  return *((void *)this + 70);
}

uint64_t icu::TimeZoneFormat::adoptTimeZoneNames(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 560);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)(a1 + 560) = a2;
  return result;
}

uint64_t icu::TimeZoneFormat::setTimeZoneNames(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 560);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  *(void *)(a1 + 560) = result;
  return result;
}

uint64_t icu::TimeZoneFormat::setDefaultParseOptions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 1128) = a2;
  return this;
}

uint64_t icu::TimeZoneFormat::getDefaultParseOptions(icu::TimeZoneFormat *this)
{
  return *((unsigned int *)this + 282);
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTPattern(UChar **this, UChar **a2)
{
  return icu::UnicodeString::copyFrom(a2, this + 72, 0);
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTOffsetPattern(uint64_t a1, unsigned int a2, UChar **this)
{
  return icu::UnicodeString::copyFrom(this, (UChar **)(a1 + ((unint64_t)a2 << 6) + 640), 0);
}

uint64_t (**icu::TimeZoneFormat::setGMTOffsetPattern(uint64_t (**result)(void *), unsigned int a2, icu::UnicodeString *this, int *a4))(void *)
{
  if (*a4 > 0) {
    return result;
  }
  uint64_t v7 = (uint64_t)result;
  uint64_t v8 = a2;
  unsigned int v9 = &result[8 * (unint64_t)a2];
  int v10 = (UChar **)(v9 + 80);
  unsigned int v11 = *((unsigned __int16 *)this + 4);
  if (v11)
  {
    if ((_WORD)v9[81]) {
      return result;
    }
    goto LABEL_14;
  }
  int v12 = (__int16)v11;
  int v13 = v11 >> 5;
  if (v12 >= 0) {
    int v14 = v13;
  }
  else {
    int v14 = *((_DWORD *)this + 3);
  }
  unsigned int v15 = *((unsigned __int16 *)v9 + 324);
  unsigned int v16 = *((_DWORD *)v9 + 163);
  if ((v15 & 0x8000u) == 0) {
    unsigned int v16 = v15 >> 5;
  }
  if ((v15 & 1) != 0
    || v14 != v16
    || (uint64_t result = (uint64_t (**)(void *))icu::UnicodeString::doEquals(this, (const icu::UnicodeString *)v10, v14), !result))
  {
LABEL_14:
    if (a2 >= 6) {
      abort();
    }
    uint64_t result = icu::TimeZoneFormat::parseOffsetPattern((uint64_t)this, dword_18CA97970[a2], a4);
    if (result)
    {
      int v17 = result;
      icu::UnicodeString::copyFrom(v10, (UChar **)this, 0);
      int v18 = (uint64_t (***)(void *))(v7 + 8 * v8 + 1264);
      if (*v18) {
        (*((void (**)(uint64_t (**)(void *)))**v18 + 1))(*v18);
      }
      *int v18 = v17;
      return (uint64_t (**)(void *))icu::TimeZoneFormat::checkAbuttingHoursAndMinutes(v7);
    }
  }
  return result;
}

uint64_t (**icu::TimeZoneFormat::parseOffsetPattern(uint64_t a1, unint64_t a2, int *a3))(void *)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)*a3;
  if ((int)v3 > 0) {
    return 0;
  }
  unsigned int v6 = a2;
  uint64_t v8 = icu::UMemory::operator new(v3, (icu::UMemory *)0x28, a2);
  uint64_t v4 = (uint64_t (**)(void *))v8;
  if (!v8)
  {
    *a3 = 7;
    return v4;
  }
  unsigned int v30 = v6;
  icu::UVector::UVector((uint64_t)v8, (uint64_t)sub_18C9FA578, 0, a3);
  memset(v33, 0, sizeof(v33));
  memset(v32, 0, sizeof(v32));
  icu::UnicodeString::UnicodeString(v32, v33, 0, 32);
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  BOOL v11 = 0;
  int v12 = 0;
  int v13 = 0;
  int v14 = 1;
  while (1)
  {
    int v15 = *(__int16 *)(a1 + 8);
    if (v15 < 0) {
      break;
    }
    if (v9 >= (unint64_t)*(unsigned __int16 *)(a1 + 8) >> 5) {
      goto LABEL_57;
    }
    unint64_t v16 = (unint64_t)*(unsigned __int16 *)(a1 + 8) >> 5;
LABEL_10:
    if (v16 <= v9)
    {
      int v18 = 0xFFFF;
    }
    else
    {
      if ((v15 & 2) != 0) {
        uint64_t v17 = a1 + 10;
      }
      else {
        uint64_t v17 = *(void *)(a1 + 24);
      }
      int v18 = *(unsigned __int16 *)(v17 + 2 * v9);
      if (v18 == 39)
      {
        if (v12)
        {
          __int16 v31 = 39;
          icu::UnicodeString::doAppend((uint64_t)v32, (uint64_t)&v31, 0, 1);
          int v12 = 0;
        }
        else
        {
          int v12 = 1;
          switch((int)v10)
          {
            case 0:
              break;
            case 1:
              if ((v14 - 1) <= 1) {
                goto LABEL_38;
              }
              goto LABEL_71;
            case 2:
            case 4:
              if (v14 != 2) {
                goto LABEL_71;
              }
LABEL_38:
              unsigned int v20 = (void *)sub_18C9F44E0(v10, v14, a3);
              icu::UVector::adoptElement(v4, v20, (UErrorCode *)a3);
              if (*a3 > 0) {
                goto LABEL_72;
              }
              uint64_t v10 = 0;
              int v12 = 1;
              break;
            default:
              goto LABEL_78;
          }
        }
        BOOL v11 = !v11;
        goto LABEL_41;
      }
    }
    if (v11)
    {
      __int16 v31 = v18;
      BOOL v11 = 1;
      icu::UnicodeString::doAppend((uint64_t)v32, (uint64_t)&v31, 0, 1);
      int v12 = 0;
LABEL_41:
      uint64_t v19 = v10;
      goto LABEL_42;
    }
    switch(v18)
    {
      case 'H':
        uint64_t v19 = 1;
        break;
      case 's':
        uint64_t v19 = 4;
        break;
      case 'm':
        uint64_t v19 = 2;
        break;
      default:
        switch((int)v10)
        {
          case 0:
            goto LABEL_56;
          case 1:
            if ((v14 - 1) <= 1) {
              goto LABEL_55;
            }
            goto LABEL_71;
          case 2:
          case 4:
            if (v14 != 2) {
              goto LABEL_71;
            }
LABEL_55:
            int v25 = (void *)sub_18C9F44E0(v10, v14, a3);
            icu::UVector::adoptElement(v4, v25, (UErrorCode *)a3);
            if (*a3 > 0) {
              goto LABEL_72;
            }
LABEL_56:
            __int16 v31 = v18;
            icu::UnicodeString::doAppend((uint64_t)v32, (uint64_t)&v31, 0, 1);
            int v12 = 0;
            BOOL v11 = 0;
            uint64_t v19 = 0;
            break;
          default:
            goto LABEL_78;
        }
        goto LABEL_42;
    }
    if (v19 == v10)
    {
      int v12 = 0;
      BOOL v11 = 0;
      ++v14;
      goto LABEL_41;
    }
    switch((int)v10)
    {
      case 0:
        int v21 = WORD4(v32[0]) >> 5;
        if (SWORD4(v32[0]) < 0) {
          int v21 = HIDWORD(v32[0]);
        }
        if (v21 < 1) {
          goto LABEL_53;
        }
        int v22 = sub_18C9F43C0((uint64_t)v32, a3);
        icu::UVector::adoptElement(v4, v22, (UErrorCode *)a3);
        if (*a3 > 0) {
          goto LABEL_72;
        }
        if (BYTE8(v32[0])) {
          __int16 v23 = 2;
        }
        else {
          __int16 v23 = BYTE8(v32[0]) & 0x1F;
        }
        WORD4(v32[0]) = v23;
LABEL_53:
        int v12 = 0;
        BOOL v11 = 0;
        v13 |= v19;
        int v14 = 1;
        break;
      case 1:
        if ((v14 - 1) <= 1) {
          goto LABEL_52;
        }
        goto LABEL_71;
      case 2:
      case 4:
        if (v14 != 2) {
          goto LABEL_71;
        }
LABEL_52:
        unsigned __int16 v24 = (void *)sub_18C9F44E0(v10, v14, a3);
        icu::UVector::adoptElement(v4, v24, (UErrorCode *)a3);
        if (*a3 <= 0) {
          goto LABEL_53;
        }
        goto LABEL_72;
      default:
        goto LABEL_78;
    }
LABEL_42:
    ++v9;
    uint64_t v10 = v19;
  }
  if ((uint64_t)v9 < *(int *)(a1 + 12))
  {
    unint64_t v16 = *(unsigned int *)(a1 + 12);
    goto LABEL_10;
  }
LABEL_57:
  if (*a3 <= 0)
  {
    switch((int)v10)
    {
      case 0:
        int v27 = WORD4(v32[0]) >> 5;
        if (SWORD4(v32[0]) < 0) {
          int v27 = HIDWORD(v32[0]);
        }
        if (v27 < 1) {
          goto LABEL_67;
        }
        uint64_t v26 = sub_18C9F43C0((uint64_t)v32, a3);
        goto LABEL_66;
      case 1:
        if ((v14 - 1) > 1) {
          goto LABEL_71;
        }
        goto LABEL_60;
      case 2:
      case 4:
        if (v14 != 2)
        {
LABEL_71:
          *a3 = 1;
          break;
        }
LABEL_60:
        uint64_t v26 = (void *)sub_18C9F44E0(v10, v14, a3);
LABEL_66:
        icu::UVector::adoptElement(v4, v26, (UErrorCode *)a3);
LABEL_67:
        if (*a3 <= 0)
        {
          long long v28 = v30 > 2 ? 0 : (void *)dword_18CA97988[v30];
          if (v13 == v28) {
            goto LABEL_73;
          }
        }
        break;
      default:
LABEL_78:
        abort();
    }
  }
LABEL_72:
  (*((void (**)(uint64_t (**)(void *)))*v4 + 1))(v4);
  uint64_t v4 = 0;
LABEL_73:
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v32);
  return v4;
}

uint64_t icu::TimeZoneFormat::checkAbuttingHoursAndMinutes(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = 0;
  *(unsigned char *)(this + 1312) = 0;
  do
  {
    uint64_t v3 = *(icu::UVector **)(v1 + 8 * v2 + 1264);
    if (*((int *)v3 + 2) >= 1)
    {
      signed int v4 = 0;
      BOOL v5 = 0;
      do
      {
        this = icu::UVector::elementAt(v3, v4);
        int v6 = *(_DWORD *)(this + 16);
        if (v6)
        {
          if (v5)
          {
            *(unsigned char *)(v1 + 1312) = 1;
            return this;
          }
          BOOL v5 = v6 == 1;
        }
        else
        {
          if (v5) {
            break;
          }
          BOOL v5 = 0;
        }
        ++v4;
      }
      while (v4 < *((_DWORD *)v3 + 2));
      if (*(unsigned char *)(v1 + 1312)) {
        return this;
      }
    }
    ++v2;
  }
  while (v2 != 6);
  return this;
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTOffsetDigits(icu::TimeZoneFormat *this, icu::UnicodeString *a2)
{
  uint64_t v3 = 0;
  if (*((_WORD *)a2 + 4)) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v4;
  BOOL v5 = (char *)this + 1024;
  do
  {
    icu::UnicodeString::append((uint64_t)a2, *(_DWORD *)&v5[v3]);
    v3 += 4;
  }
  while (v3 != 40);
  return a2;
}

uint64_t icu::TimeZoneFormat::setGMTOffsetDigits(uint64_t this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    uint64_t v8 = 0;
    long long v6 = 0u;
    long long v7 = 0u;
    this = icu::TimeZoneFormat::toCodePoints(a2, (const icu::UnicodeString *)&v6, (int *)0xA);
    if (this)
    {
      long long v5 = v7;
      *(_OWORD *)(v4 + 1024) = v6;
      *(_OWORD *)(v4 + 1040) = v5;
      *(void *)(v4 + 1056) = v8;
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTZeroFormat(UChar **this, UChar **a2)
{
  return icu::UnicodeString::copyFrom(a2, this + 133, 0);
}

icu::UnicodeString *icu::TimeZoneFormat::setGMTZeroFormat(icu::UnicodeString *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return this;
  }
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  if (v4 <= 0x1F)
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return this;
  }
  long long v5 = (UChar **)((char *)this + 1064);
  if (v4)
  {
    if (*((_WORD *)this + 536)) {
      return this;
    }
    goto LABEL_16;
  }
  int v6 = (__int16)v4;
  unsigned int v7 = v4 >> 5;
  if (v6 >= 0) {
    int v8 = v7;
  }
  else {
    int v8 = *((_DWORD *)a2 + 3);
  }
  unsigned int v9 = *((unsigned __int16 *)this + 536);
  if ((v9 & 0x8000u) == 0) {
    unsigned int v10 = v9 >> 5;
  }
  else {
    unsigned int v10 = *((_DWORD *)this + 269);
  }
  if ((v9 & 1) != 0
    || v8 != v10
    || (this = (icu::UnicodeString *)icu::UnicodeString::doEquals(a2, (const icu::UnicodeString *)v5, v8), !this))
  {
LABEL_16:
    return icu::UnicodeString::copyFrom(v5, (UChar **)a2, 0);
  }
  return this;
}

uint64_t icu::TimeZoneFormat::format(icu::TimeZoneFormat *a1, const icu::TimeZone *a2, UChar **a3, uint64_t a4, int *a5, double a6)
{
  int v10 = (int)a2;
  if (a5) {
    *a5 = 0;
  }
  switch((int)a2)
  {
    case 0:
      int v12 = (const icu::TimeZone *)a3;
      int v13 = 1;
      goto LABEL_7;
    case 1:
      int v12 = (const icu::TimeZone *)a3;
      int v13 = 2;
      goto LABEL_7;
    case 2:
      int v12 = (const icu::TimeZone *)a3;
      int v13 = 4;
LABEL_7:
      icu::TimeZoneFormat::formatGeneric(a1, v12, v13, a6, (icu::UnicodeString *)a4);
      goto LABEL_11;
    case 3:
      int v14 = (icu::ZoneMeta *)a3;
      uint64_t v15 = 2;
      uint64_t v16 = 4;
      goto LABEL_10;
    case 4:
      int v14 = (icu::ZoneMeta *)a3;
      uint64_t v15 = 16;
      uint64_t v16 = 32;
LABEL_10:
      icu::TimeZoneFormat::formatSpecific((uint64_t)a1, v14, v15, v16, (icu::UnicodeString *)a4, a5, a6);
      goto LABEL_11;
    case 17:
      icu::UnicodeString::operator=((UChar **)a4, a3 + 1);
      return a4;
    case 18:
      ShortID = icu::ZoneMeta::getShortID((const UChar **)a3, a2);
      if (ShortID) {
        int v22 = (const __int16 *)ShortID;
      }
      else {
        int v22 = L"unk";
      }
      icu::UnicodeString::unBogus(a4);
      unsigned int v23 = *(unsigned __int16 *)(a4 + 8);
      int v24 = (__int16)v23;
      unsigned int v25 = v23 >> 5;
      if (v24 >= 0) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = *(unsigned int *)(a4 + 12);
      }
      icu::UnicodeString::doReplace(a4, 0, v26, (uint64_t)v22, 0, 0xFFFFFFFFLL);
      return a4;
    case 19:
      icu::TimeZoneFormat::formatExemplarLocation(a1, (const icu::TimeZone *)a3, (UChar **)a4);
      return a4;
    default:
LABEL_11:
      if (*(unsigned __int16 *)(a4 + 8) <= 0x1Fu)
      {
        *(void *)unsigned int v35 = 0;
        int v34 = 0;
        uint64_t v17 = (icu::TimeZoneFormat *)(*((uint64_t (**)(UChar **, void, UErrorCode *, int *, UErrorCode *, double))*a3
                                      + 6))(a3, 0, v35, &v34, &v35[1], a6);
        if (v35[1] <= U_ZERO_ERROR)
        {
          int v18 = v34 + v35[0];
          switch(v10)
          {
            case 0:
            case 1:
            case 3:
            case 5:
              uint64_t v19 = (UChar **)a1;
              int v20 = 0;
              goto LABEL_25;
            case 2:
            case 4:
            case 6:
              uint64_t v19 = (UChar **)a1;
              int v20 = 1;
LABEL_25:
              icu::TimeZoneFormat::formatOffsetLocalizedGMT(v19, v18, v20, (UChar **)a4, &v35[1]);
              break;
            case 7:
              int v27 = 1;
              int v28 = 1;
              int v29 = 1;
              unsigned int v30 = (icu::UnicodeString *)a4;
              int v31 = 1;
              goto LABEL_44;
            case 8:
              int v27 = 1;
              int v28 = 0;
              int v29 = 1;
              goto LABEL_37;
            case 9:
              int v27 = 1;
              goto LABEL_33;
            case 10:
              int v27 = 1;
              goto LABEL_35;
            case 11:
              int v27 = 1;
              goto LABEL_39;
            case 12:
              int v27 = 1;
              goto LABEL_41;
            case 13:
              int v27 = 0;
LABEL_33:
              int v28 = 1;
              goto LABEL_36;
            case 14:
              int v27 = 0;
LABEL_35:
              int v28 = 0;
LABEL_36:
              int v29 = 0;
LABEL_37:
              int v31 = 1;
              goto LABEL_43;
            case 15:
              int v27 = 0;
LABEL_39:
              int v28 = 1;
              goto LABEL_42;
            case 16:
              int v27 = 0;
LABEL_41:
              int v28 = 0;
LABEL_42:
              int v29 = 0;
              int v31 = 0;
LABEL_43:
              unsigned int v30 = (icu::UnicodeString *)a4;
LABEL_44:
              icu::TimeZoneFormat::formatOffsetISO8601(v17, v18, v27, v28, v29, v31, v30, &v35[1]);
              break;
            default:
              break;
          }
          if (a5)
          {
            if (v34) {
              int v32 = 2;
            }
            else {
              int v32 = 1;
            }
            *a5 = v32;
          }
        }
      }
      return a4;
  }
}

icu::UnicodeString *icu::TimeZoneFormat::formatGeneric(icu::TimeZoneFormat *this, const icu::TimeZone *a2, int a3, double a4, icu::UnicodeString *GenericLocationName)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  UErrorCode v16 = U_ZERO_ERROR;
  uint64_t TimeZoneGenericNames = icu::TimeZoneFormat::getTimeZoneGenericNames(this, &v16);
  if (v16 >= U_ILLEGAL_ARGUMENT_ERROR) {
    goto LABEL_2;
  }
  BOOL v11 = (icu::TimeZoneGenericNames *)TimeZoneGenericNames;
  if (a3 != 1) {
    return icu::TimeZoneGenericNames::getDisplayName(TimeZoneGenericNames, a2, a3, GenericLocationName, a4);
  }
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v10);
  if (CanonicalCLDRID)
  {
    uint64_t v15 = CanonicalCLDRID;
    icu::UnicodeString::UnicodeString(v17, 1, &v15);
    GenericLocationName = icu::TimeZoneGenericNames::getGenericLocationName(v11, (const icu::UnicodeString *)v17, GenericLocationName);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v17);
  }
  else
  {
LABEL_2:
    icu::UnicodeString::setToBogus(GenericLocationName);
  }
  return GenericLocationName;
}

icu::UnicodeString *icu::TimeZoneFormat::formatSpecific(uint64_t a1, icu::ZoneMeta *a2, uint64_t a3, uint64_t a4, icu::UnicodeString *this, int *a6, double a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 560)
    || ((int v25 = 0,
         int v14 = (*(uint64_t (**)(icu::ZoneMeta *, int *))(*(void *)a2 + 80))(a2, &v25),
         CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v15),
         v25 <= 0)
      ? (BOOL v17 = CanonicalCLDRID == 0)
      : (BOOL v17 = 1),
        v17))
  {
    icu::UnicodeString::setToBogus(this);
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 560);
    if (v14)
    {
      int v24 = CanonicalCLDRID;
      icu::UnicodeString::UnicodeString(v26, 1, &v24);
      (*(void (**)(uint64_t, unsigned char *, uint64_t, icu::UnicodeString *, double))(*(void *)v19 + 96))(v19, v26, a4, this, a7);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v26);
      if (!a6) {
        return this;
      }
    }
    else
    {
      unsigned int v23 = CanonicalCLDRID;
      icu::UnicodeString::UnicodeString(v26, 1, &v23);
      (*(void (**)(uint64_t, unsigned char *, uint64_t, icu::UnicodeString *, double))(*(void *)v19 + 96))(v19, v26, a3, this, a7);
      icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v26);
      if (!a6) {
        return this;
      }
    }
    if (*((unsigned __int16 *)this + 4) >= 0x20u)
    {
      if (v14) {
        int v22 = 2;
      }
      else {
        int v22 = 1;
      }
      *a6 = v22;
    }
  }
  return this;
}

UChar **icu::TimeZoneFormat::formatExemplarLocation(icu::TimeZoneFormat *this, const icu::TimeZone *a2, UChar **a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  icu::UnicodeString::UnicodeString(v23, v24, 0, 128);
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v6);
  if (CanonicalCLDRID)
  {
    uint64_t v8 = *((void *)this + 70);
    int v21 = CanonicalCLDRID;
    icu::UnicodeString::UnicodeString(v22, 1, &v21);
    (*(void (**)(uint64_t, unsigned char *, _OWORD *))(*(void *)v8 + 88))(v8, v22, v23);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v22);
  }
  int v10 = WORD4(v23[0]) >> 5;
  if (SWORD4(v23[0]) < 0) {
    int v10 = HIDWORD(v23[0]);
  }
  if (v10 >= 1) {
    goto LABEL_9;
  }
  uint64_t v11 = *((void *)this + 70);
  int v20 = L"Etc/Unknown";
  icu::UnicodeString::UnicodeString(v22, 1, &v20);
  (*(void (**)(uint64_t, unsigned char *, _OWORD *))(*(void *)v11 + 88))(v11, v22, v23);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v22);
  int v13 = WORD4(v23[0]) >> 5;
  if (SWORD4(v23[0]) < 0) {
    int v13 = HIDWORD(v23[0]);
  }
  if (v13 < 1)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
    unsigned int v16 = *((unsigned __int16 *)a3 + 4);
    int v17 = (__int16)v16;
    unsigned int v18 = v16 >> 5;
    if (v17 >= 0) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = *((unsigned int *)a3 + 3);
    }
    icu::UnicodeString::doReplace((uint64_t)a3, 0, v19, (uint64_t)L"Unknown", 0, 0xFFFFFFFFLL);
  }
  else
  {
LABEL_9:
    icu::UnicodeString::copyFrom(a3, (UChar **)v23, 0);
  }
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v23);
  return a3;
}

UChar **icu::TimeZoneFormat::formatOffsetLocalizedGMT(UChar **this, int a2, UChar **a3, UErrorCode *a4)
{
  return icu::TimeZoneFormat::formatOffsetLocalizedGMT(this, a2, 0, a3, a4);
}

UChar **icu::TimeZoneFormat::formatOffsetShortLocalizedGMT(UChar **this, int a2, UChar **a3, UErrorCode *a4)
{
  return icu::TimeZoneFormat::formatOffsetLocalizedGMT(this, a2, 1, a3, a4);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetISO8601Basic(icu::TimeZoneFormat *this, int a2, int a3, int a4, int a5, icu::UnicodeString *a6, UErrorCode *a7)
{
  return icu::TimeZoneFormat::formatOffsetISO8601(this, a2, 1, a3, a4, a5, a6, a7);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetISO8601Extended(icu::TimeZoneFormat *this, int a2, int a3, int a4, int a5, icu::UnicodeString *a6, UErrorCode *a7)
{
  return icu::TimeZoneFormat::formatOffsetISO8601(this, a2, 0, a3, a4, a5, a6, a7);
}

icu::UnicodeString *icu::TimeZoneFormat::format(icu::TimeZoneFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    icu::Calendar::getNow(this);
    double TimeInMillis = v10;
    if (icu::Formattable::getType(a2) == 6)
    {
      Object = (const void *)icu::Formattable::getObject(a2);
      if (Object)
      {
        int v13 = Object;
        if (v14)
        {
          uint64_t TimeZone = (uint64_t)v14;
        }
        else
        {
          if (!v16) {
            return a3;
          }
          int v17 = v16;
          uint64_t TimeZone = icu::Calendar::getTimeZone(v16);
          double TimeInMillis = icu::Calendar::getTimeInMillis(v17, a5);
        }
        uint64_t v21 = 0;
        (*(void (**)(uint64_t, void, char *, uint64_t *, UErrorCode *, double))(*(void *)TimeZone + 48))(TimeZone, 0, (char *)&v21 + 4, &v21, a5, TimeInMillis);
        memset(v23, 0, sizeof(v23));
        memset(v22, 0, sizeof(v22));
        icu::UnicodeString::UnicodeString(v22, v23, 0, 128);
        icu::TimeZoneFormat::formatOffsetLocalizedGMT((UChar **)this, v21 + HIDWORD(v21), 0, (UChar **)v22, a5);
        unint64_t v18 = *(unsigned int *)a5;
        if ((int)v18 <= 0)
        {
          uint64_t v19 = (SWORD4(v22[0]) & 0x8000u) == 0 ? WORD4(v22[0]) >> 5 : HIDWORD(v22[0]);
          icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)v22, 0, v19);
          unint64_t v18 = *((unsigned int *)a4 + 2);
          if (v18 == 17)
          {
            LODWORD(v18) = WORD4(v22[0]) >> 5;
            if ((SWORD4(v22[0]) & 0x8000u) == 0) {
              unint64_t v18 = v18;
            }
            else {
              unint64_t v18 = HIDWORD(v22[0]);
            }
            *((_DWORD *)a4 + 3) = 0;
            *((_DWORD *)a4 + 4) = v18;
          }
        }
        icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v22);
      }
    }
  }
  return a3;
}

uint64_t icu::TimeZoneFormat::parse(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, a4, a1[282], a5);
}

uint64_t icu::TimeZoneFormat::parse(icu::TimeZoneFormat *this, unsigned int a2, icu::UnicodeString *a3, _DWORD *a4, unsigned int a5, int *a6)
{
  int v6 = a6;
  unsigned int v7 = a4;
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if (a6) {
    *a6 = 0;
  }
  uint64_t v11 = a4[2];
  unsigned int v12 = *((unsigned __int16 *)a3 + 4);
  int v13 = (__int16)v12;
  unsigned int v14 = v12 >> 5;
  if (v13 >= 0) {
    signed int v15 = v14;
  }
  else {
    signed int v15 = *((_DWORD *)a3 + 3);
  }
  signed __int8 v17 = a2 == 4 || a2 == 2;
  BOOL v106 = &unk_1EDA44670;
  int v107 = v11;
  unsigned int v108 = -1;
  if ((a2 > 3 || ((0xBu >> (a2 & 0xF)) & 1) == 0) && a2 != 4 && a2 != 2)
  {
    unsigned int v99 = 0;
    int v23 = -1;
    LODWORD(v18) = 0x7FFFFFFF;
    goto LABEL_21;
  }
  LOBYTE(v115[0]) = 0;
  unint64_t v18 = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a3, (icu::ParsePosition *)&v106, v17, (signed __int8 *)v115);
  if (v108 != -1)
  {
    int v23 = -1;
    LODWORD(v18) = 0x7FFFFFFF;
LABEL_20:
    unsigned int v99 = 96;
LABEL_21:
    unsigned int v102 = v18;
    UErrorCode v105 = U_ZERO_ERROR;
    memset(v115, 0, sizeof(v115));
    memset(v114, 0, sizeof(v114));
    BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::UnicodeString::UnicodeString(v114, v115, 0, 32);
    signed int v103 = v15;
    signed int v29 = 1;
    uint64_t v30 = 6;
    switch(a2)
    {
      case 0u:
        goto LABEL_32;
      case 1u:
        signed int v29 = 3;
        goto LABEL_32;
      case 2u:
        signed int v29 = 5;
LABEL_32:
        *(_DWORD *)uint64_t v110 = 0;
        uint64_t TimeZoneGenericNames = icu::TimeZoneFormat::getTimeZoneGenericNames(this, &v105);
        unint64_t v33 = v105;
        if (v105 > U_ZERO_ERROR
          || (BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneGenericNames::findBestMatch(TimeZoneGenericNames, (uint64_t)a3, v11, v29, v114, v110, &v105), unint64_t v33 = v105, v105 >= U_ILLEGAL_ARGUMENT_ERROR))
        {
          uint64_t v30 = 0;
          v7[3] = v11;
          goto LABEL_176;
        }
        signed int v29 = v103;
        if ((int)BestMatch < 1)
        {
LABEL_71:
          int v98 = this;
          goto LABEL_72;
        }
        if (v6) {
          int *v6 = *(_DWORD *)v110;
        }
        int v38 = BestMatch + v11;
LABEL_54:
        v7[2] = v38;
        uint64_t TimeZone = icu::TimeZone::createTimeZone(v114, v34);
        goto LABEL_75;
      case 3u:
        goto LABEL_36;
      case 4u:
        uint64_t v30 = 48;
LABEL_36:
        long long v95 = v7;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(void, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(**((void **)this + 70) + 120))(*((void *)this + 70), a3, v11, v30, &v105);
        unsigned int v35 = (icu::UVector **)BestMatch;
        unint64_t v33 = v105;
        int v98 = this;
        if (v105 >= U_ILLEGAL_ARGUMENT_ERROR)
        {
          uint64_t v30 = 0;
          char v36 = 0;
          unint64_t v33 = (unint64_t)v95;
          v95[3] = v11;
LABEL_38:
          signed int v29 = v103;
          goto LABEL_39;
        }
        if (!BestMatch) {
          goto LABEL_122;
        }
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneNames::MatchInfoCollection::size(BestMatch);
        if ((int)BestMatch < 1) {
          goto LABEL_122;
        }
        long long v89 = v6;
        signed int v40 = 0;
        unsigned int v41 = -1;
        do
        {
          int v42 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v35, v40) + v11;
          if (v42 > v23)
          {
            int v23 = v42;
            unsigned int v41 = v40;
          }
          ++v40;
          BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v35);
        }
        while (v40 < (int)BestMatch);
        if ((v41 & 0x80000000) == 0)
        {
          int v6 = v89;
          if (!v89)
          {
LABEL_197:
            v95[2] = v42;
            icu::TimeZoneFormat::getTimeZoneID(v98, v35, v41, (icu::UnicodeString *)v114);
            BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZone::createTimeZone(v114, v82);
            uint64_t v30 = (uint64_t)BestMatch;
            char v36 = 0;
            goto LABEL_38;
          }
          int NameTypeAt = icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(v35, v41);
          int v44 = 1;
          if (NameTypeAt > 15)
          {
            if (NameTypeAt == 16) {
              goto LABEL_196;
            }
            if (NameTypeAt != 32) {
              goto LABEL_66;
            }
          }
          else
          {
            if (NameTypeAt == 2)
            {
LABEL_196:
              *long long v89 = v44;
              goto LABEL_197;
            }
            if (NameTypeAt != 4)
            {
LABEL_66:
              int v44 = 0;
              goto LABEL_196;
            }
          }
          int v44 = 2;
          goto LABEL_196;
        }
        int v6 = v89;
LABEL_122:
        char v36 = 1;
        signed int v29 = v103;
        if (a2 != 4) {
          goto LABEL_39;
        }
        unint64_t v33 = a5;
        if ((a5 & 2) == 0) {
          goto LABEL_39;
        }
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::getTZDBTimeZoneNames(v98, &v105);
        unint64_t v33 = v105;
        if (v105 > U_ZERO_ERROR) {
          goto LABEL_125;
        }
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(icu::TimeZoneNames::MatchInfoCollection *, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(*(void *)BestMatch + 120))(BestMatch, a3, v11, v30, &v105);
        uint64_t v30 = (uint64_t)BestMatch;
        unint64_t v33 = v105;
        if (v105 >= U_ILLEGAL_ARGUMENT_ERROR)
        {
          uint64_t v66 = (uint64_t)BestMatch;
          uint64_t v30 = 0;
          int v67 = 0;
          unint64_t v33 = (unint64_t)v95;
          v95[3] = v11;
          if (BestMatch)
          {
LABEL_129:
            unsigned int v93 = v67;
            goto LABEL_130;
          }
LABEL_228:
          if (!v67)
          {
LABEL_229:
            char v36 = 0;
LABEL_39:
            if (v35) {
              BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*((uint64_t (**)(icu::UVector **))*v35
            }
                                                                      + 1))(v35);
            unsigned int v7 = v95;
            if ((v36 & 1) == 0) {
              goto LABEL_176;
            }
LABEL_72:
            if (v23 > (int)v11)
            {
              v7[2] = v23;
              int v31 = (icu::ZoneMeta *)v102;
LABEL_74:
              uint64_t TimeZone = icu::TimeZoneFormat::createTimeZoneForOffset(BestMatch, v31, v25, v26, v27, v28);
LABEL_75:
              uint64_t v30 = (uint64_t)TimeZone;
              goto LABEL_176;
            }
            __int16 v45 = word_18CA97868[a2];
            long long v113 = 0u;
            long long v111 = 0u;
            long long v112 = 0u;
            *(_OWORD *)uint64_t v110 = 0u;
            memset(v109, 0, sizeof(v109));
            TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::UnicodeString::UnicodeString(v109, v110, 0, 32);
            if (v23 < v29 && (v45 & 0x180) != 0x180)
            {
              UErrorCode v52 = v6;
              int v107 = v11;
              unsigned int v108 = -1;
              v104[0] = 0;
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetISO8601(TZDBTimeZoneNames, a3, (icu::ParsePosition *)&v106, 0, v104);
              if (v108 == -1)
              {
                uint64_t v62 = TZDBTimeZoneNames;
                LODWORD(v53) = v107;
                if (v107 == v29 || v104[0]) {
                  goto LABEL_106;
                }
                if (v23 < v107)
                {
                  icu::UnicodeString::setToBogus((icu::UnicodeString *)v109);
                  int v23 = v107;
                  unsigned int v102 = v62;
                }
              }
              int v6 = v52;
            }
            uint64_t v53 = v99;
            if (v23 < v29 && ((v99 | v45) & 0x20) == 0)
            {
              long long v54 = v6;
              int v107 = v11;
              unsigned int v108 = -1;
              v104[0] = 0;
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetLocalizedGMT(v98, a3, (icu::ParsePosition *)&v106, 0, v104);
              uint64_t v53 = v108;
              if (v108 == -1)
              {
                uint64_t v62 = TZDBTimeZoneNames;
                uint64_t v53 = v107;
                if (v107 == v29 || v104[0]) {
                  goto LABEL_106;
                }
                if (v23 < v107)
                {
                  icu::UnicodeString::setToBogus((icu::UnicodeString *)v109);
                  int v23 = v107;
                  unsigned int v102 = v62;
                }
              }
              int v6 = v54;
            }
            if (v23 >= v29 || ((v99 | v45) & 0x40) != 0)
            {
LABEL_88:
              if ((a5 & 1) == 0)
              {
                int v56 = 0;
                uint64_t v57 = v102;
                goto LABEL_165;
              }
              if (v23 >= v29)
              {
                int v100 = 0;
                signed int v61 = v23;
                long long v63 = v98;
                goto LABEL_140;
              }
              __int16 v92 = v45;
              long long v58 = v6;
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*(uint64_t (**)(void, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(**((void **)v98 + 70) + 120))(*((void *)v98 + 70), a3, v11, 118, &v105);
              long long v59 = (icu::UVector **)TZDBTimeZoneNames;
              UErrorCode v60 = v105;
              if (v105 >= U_ILLEGAL_ARGUMENT_ERROR)
              {
                uint64_t v30 = 0;
                int v100 = 0;
                v7[3] = v11;
                signed int v61 = v23;
                goto LABEL_136;
              }
              uint64_t v96 = v7;
              if (TZDBTimeZoneNames
                && (TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size(TZDBTimeZoneNames),
                    (int)TZDBTimeZoneNames >= 1))
              {
                signed int v64 = 0;
                signed int v61 = -1;
                unsigned int v65 = -1;
                do
                {
                  if ((int)(icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v59, v64) + v11) > v61)
                  {
                    signed int v61 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v59, v64) + v11;
                    unsigned int v65 = v64;
                  }
                  ++v64;
                  TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v59);
                }
                while (v64 < (int)TZDBTimeZoneNames);
              }
              else
              {
                unsigned int v65 = -1;
                signed int v61 = -1;
              }
              if (v23 >= v61)
              {
                int v100 = 0;
                signed int v61 = v23;
                unsigned int v7 = v96;
                signed int v29 = v103;
                goto LABEL_136;
              }
              icu::TimeZoneFormat::getTimeZoneID(v98, v59, v65, (icu::UnicodeString *)v109);
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(v59, v65);
              int v100 = 1;
              uint64_t v53 = 0x7FFFFFFFLL;
              unsigned int v102 = 0x7FFFFFFF;
              unsigned int v7 = v96;
              if ((int)TZDBTimeZoneNames > 15)
              {
                signed int v29 = v103;
                if (TZDBTimeZoneNames == 16) {
                  goto LABEL_136;
                }
                if (TZDBTimeZoneNames != 32) {
                  goto LABEL_119;
                }
              }
              else
              {
                signed int v29 = v103;
                if (TZDBTimeZoneNames == 2) {
                  goto LABEL_136;
                }
                if (TZDBTimeZoneNames != 4)
                {
LABEL_119:
                  int v100 = 0;
LABEL_135:
                  unsigned int v102 = 0x7FFFFFFF;
LABEL_136:
                  if (v59) {
                    TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*((uint64_t (**)(icu::UVector **))*v59 + 1))(v59);
                  }
                  BOOL v68 = v60 <= U_ZERO_ERROR;
                  int v6 = v58;
                  long long v63 = v98;
                  __int16 v45 = v92;
                  if (!v68) {
                    goto LABEL_175;
                  }
LABEL_140:
                  uint64_t v53 = a5;
                  if ((a5 & 2) == 0
                    || v61 >= v29
                    || (v45 & 0x10) != 0
                    || (TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::getTZDBTimeZoneNames(v63, &v105),
                        uint64_t v53 = v105,
                        v105 > U_ZERO_ERROR))
                  {
                    int v23 = v61;
LABEL_145:
                    if (v23 >= v29)
                    {
                      long long v71 = v6;
                      uint64_t v57 = v102;
                    }
                    else
                    {
                      *(_DWORD *)unsigned int v104 = 0;
                      uint64_t v69 = icu::TimeZoneFormat::getTimeZoneGenericNames(v63, &v105);
                      uint64_t v53 = v105;
                      uint64_t v57 = v102;
                      if (v105 > U_ZERO_ERROR
                        || (TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneGenericNames::findBestMatch(v69, (uint64_t)a3, v11, 7u, v114, v104, &v105), uint64_t v53 = v105, v105 > U_ZERO_ERROR))
                      {
LABEL_170:
                        uint64_t v30 = 0;
                        v7[3] = v11;
                        goto LABEL_175;
                      }
                      if ((int)TZDBTimeZoneNames >= 1)
                      {
                        int v70 = TZDBTimeZoneNames + v11;
                        if (v23 < (int)TZDBTimeZoneNames + (int)v11)
                        {
                          TZDBTimeZoneNames = icu::UnicodeString::copyFrom((UChar **)v109, v114, 0);
                          uint64_t v57 = 0x7FFFFFFFLL;
                          uint64_t v53 = *(unsigned int *)v104;
                          int v100 = *(_DWORD *)v104;
                          int v23 = v70;
                        }
                      }
                      long long v71 = v6;
                    }
                    int v72 = v45 & 0x200;
                    if (v23 >= v29)
                    {
                      int v56 = v100;
                    }
                    else
                    {
                      int v56 = v100;
                      if (!v72)
                      {
                        int v107 = v11;
                        unsigned int v108 = -1;
                        TZDBTimeZoneNames = icu::TimeZoneFormat::parseZoneID(TZDBTimeZoneNames, a3, (icu::ParsePosition *)&v106, (icu::UnicodeString *)v114);
                        uint64_t v53 = v108;
                        if (v108 == -1)
                        {
                          int v73 = v107;
                          if (v23 < v107)
                          {
                            TZDBTimeZoneNames = icu::UnicodeString::copyFrom((UChar **)v109, v114, 0);
                            int v56 = 0;
                            uint64_t v57 = 0x7FFFFFFFLL;
                            int v23 = v73;
                          }
                        }
                      }
                    }
                    if (v23 < v29
                      && !v72
                      && (int v107 = v11,
                          unsigned int v108 = -1,
                          TZDBTimeZoneNames = icu::TimeZoneFormat::parseShortZoneID(TZDBTimeZoneNames, a3, (icu::ParsePosition *)&v106, (icu::UnicodeString *)v114), uint64_t v53 = v108, v108 == -1))
                    {
                      int v79 = v107;
                      int v6 = v71;
                      if (v23 < v107)
                      {
                        TZDBTimeZoneNames = icu::UnicodeString::copyFrom((UChar **)v109, v114, 0);
                        int v56 = 0;
                        uint64_t v57 = 0x7FFFFFFFLL;
                        int v23 = v79;
                      }
                    }
                    else
                    {
                      int v6 = v71;
                    }
LABEL_165:
                    if (v23 > (int)v11)
                    {
                      int v76 = WORD4(v109[0]) >> 5;
                      if (SWORD4(v109[0]) < 0) {
                        int v76 = HIDWORD(v109[0]);
                      }
                      if (v76 < 1) {
                        TimeZoneForint Offset = icu::TimeZoneFormat::createTimeZoneForOffset(TZDBTimeZoneNames, (icu::ZoneMeta *)v57, v48, v49, v50, v51);
                      }
                      else {
                        TimeZoneForint Offset = icu::TimeZone::createTimeZone((UChar **)v109, v47);
                      }
                      uint64_t v30 = (uint64_t)TimeZoneForOffset;
                      if (v6) {
                        int *v6 = v56;
                      }
                      v7[2] = v23;
                      goto LABEL_175;
                    }
                    goto LABEL_170;
                  }
                  long long v90 = v6;
                  TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*(uint64_t (**)(icu::TimeZoneFormat *, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(*(void *)TZDBTimeZoneNames + 120))(TZDBTimeZoneNames, a3, v11, 118, &v105);
                  long long v74 = (icu::UVector **)TZDBTimeZoneNames;
                  UErrorCode v75 = v105;
                  if (v105 >= U_ILLEGAL_ARGUMENT_ERROR)
                  {
                    uint64_t v30 = 0;
                    v7[3] = v11;
                    int v23 = v61;
                    goto LABEL_215;
                  }
                  uint64_t v97 = v7;
                  __int16 v94 = v45;
                  if (TZDBTimeZoneNames
                    && (TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size(TZDBTimeZoneNames),
                        (int)TZDBTimeZoneNames >= 1))
                  {
                    signed int v80 = 0;
                    int v23 = -1;
                    unsigned int v81 = -1;
                    do
                    {
                      if ((int)(icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v74, v80) + v11) > v23)
                      {
                        int v23 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v74, v80) + v11;
                        unsigned int v81 = v80;
                      }
                      ++v80;
                      TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v74);
                    }
                    while (v80 < (int)TZDBTimeZoneNames);
                  }
                  else
                  {
                    unsigned int v81 = -1;
                    int v23 = -1;
                  }
                  if (v61 >= v23)
                  {
                    int v23 = v61;
                    unsigned int v7 = v97;
                    __int16 v45 = v94;
                    goto LABEL_215;
                  }
                  icu::TimeZoneFormat::getTimeZoneID(v63, v74, v81, (icu::UnicodeString *)v109);
                  TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(v74, v81);
                  int v100 = 1;
                  uint64_t v53 = 0x7FFFFFFFLL;
                  unsigned int v102 = 0x7FFFFFFF;
                  unsigned int v7 = v97;
                  if ((int)TZDBTimeZoneNames > 15)
                  {
                    __int16 v45 = v94;
                    if (TZDBTimeZoneNames == 16) {
                      goto LABEL_215;
                    }
                    if (TZDBTimeZoneNames != 32) {
                      goto LABEL_192;
                    }
                  }
                  else
                  {
                    __int16 v45 = v94;
                    if (TZDBTimeZoneNames == 2) {
                      goto LABEL_215;
                    }
                    if (TZDBTimeZoneNames != 4)
                    {
LABEL_192:
                      int v100 = 0;
LABEL_214:
                      unsigned int v102 = 0x7FFFFFFF;
LABEL_215:
                      if (v74) {
                        TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*((uint64_t (**)(icu::UVector **))*v74 + 1))(v74);
                      }
                      BOOL v68 = v75 <= U_ZERO_ERROR;
                      int v6 = v90;
                      signed int v29 = v103;
                      if (!v68) {
                        goto LABEL_175;
                      }
                      goto LABEL_145;
                    }
                  }
                  int v100 = 2;
                  uint64_t v53 = 0x7FFFFFFFLL;
                  goto LABEL_214;
                }
              }
              int v100 = 2;
              uint64_t v53 = 0x7FFFFFFFLL;
              goto LABEL_135;
            }
            long long v55 = v6;
            int v107 = v11;
            unsigned int v108 = -1;
            v104[0] = 0;
            TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetLocalizedGMT(v98, a3, (icu::ParsePosition *)&v106, 1, v104);
            uint64_t v53 = v108;
            if (v108 != -1)
            {
LABEL_87:
              int v6 = v55;
              goto LABEL_88;
            }
            uint64_t v62 = TZDBTimeZoneNames;
            uint64_t v53 = v107;
            if (v107 != v29 && !v104[0])
            {
              if (v23 < v107)
              {
                icu::UnicodeString::setToBogus((icu::UnicodeString *)v109);
                int v23 = v107;
                unsigned int v102 = v62;
              }
              goto LABEL_87;
            }
LABEL_106:
            v7[2] = v53;
            uint64_t v30 = (uint64_t)icu::TimeZoneFormat::createTimeZoneForOffset(TZDBTimeZoneNames, v62, v48, v49, v50, v51);
LABEL_175:
            icu::UnicodeString::~UnicodeString((void *)v53, (icu::UnicodeString *)v109);
LABEL_176:
            icu::UnicodeString::~UnicodeString((void *)v33, (icu::UnicodeString *)v114);
            goto LABEL_177;
          }
LABEL_125:
          char v36 = 1;
          goto LABEL_39;
        }
        if (!BestMatch) {
          goto LABEL_125;
        }
        if ((int)icu::TimeZoneNames::MatchInfoCollection::size(BestMatch) < 1)
        {
          uint64_t v66 = v30;
          unsigned int v93 = 1;
LABEL_130:
          BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(uint64_t))(*(void *)v66 + 8))(v66);
          unint64_t v33 = v93;
          if ((v93 & 1) == 0) {
            goto LABEL_229;
          }
          goto LABEL_125;
        }
        long long v91 = v6;
        signed int v83 = 0;
        unsigned int v84 = -1;
        do
        {
          int v85 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt((icu::UVector **)v30, v83) + v11;
          if (v85 > v23)
          {
            int v23 = v85;
            unsigned int v84 = v83;
          }
          ++v83;
          BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v30);
        }
        while (v83 < (int)BestMatch);
        if ((v84 & 0x80000000) != 0)
        {
          uint64_t v66 = v30;
          int v67 = 1;
          int v6 = v91;
          goto LABEL_227;
        }
        int v6 = v91;
        if (!v91) {
          goto LABEL_226;
        }
        int v86 = icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt((icu::UVector **)v30, v84);
        int v87 = 1;
        if (v86 > 15)
        {
          if (v86 == 16) {
            goto LABEL_225;
          }
          if (v86 != 32) {
            goto LABEL_210;
          }
        }
        else
        {
          if (v86 == 2)
          {
LABEL_225:
            *long long v91 = v87;
LABEL_226:
            v95[2] = v85;
            uint64_t v66 = v30;
            icu::TimeZoneFormat::getTimeZoneID(v98, (icu::UVector **)v30, v84, (icu::UnicodeString *)v114);
            BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZone::createTimeZone(v114, v88);
            uint64_t v30 = (uint64_t)BestMatch;
            int v67 = 0;
LABEL_227:
            signed int v29 = v103;
            if (v66) {
              goto LABEL_129;
            }
            goto LABEL_228;
          }
          if (v86 != 4)
          {
LABEL_210:
            int v87 = 0;
            goto LABEL_225;
          }
        }
        int v87 = 2;
        goto LABEL_225;
      case 5u:
        int v107 = v11;
        unsigned int v108 = -1;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a3, (icu::ParsePosition *)&v106, 0, 0);
        if (v108 == -1) {
          goto LABEL_26;
        }
        int v98 = this;
        int v37 = v99 | 0x40;
        goto LABEL_47;
      case 6u:
        int v107 = v11;
        unsigned int v108 = -1;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a3, (icu::ParsePosition *)&v106, 1, 0);
        if (v108 == -1) {
          goto LABEL_26;
        }
        int v98 = this;
        int v37 = v99 | 0x20;
LABEL_47:
        unsigned int v99 = v37;
        goto LABEL_48;
      case 7u:
      case 9u:
      case 0xBu:
      case 0xDu:
      case 0xFu:
        int v98 = this;
        int v107 = v11;
        unsigned int v108 = -1;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetISO8601(BestMatch, a3, (icu::ParsePosition *)&v106, 0, 0);
        signed int v29 = v103;
        if (v108 == -1) {
          goto LABEL_26;
        }
        goto LABEL_72;
      case 8u:
      case 0xAu:
      case 0xCu:
      case 0xEu:
      case 0x10u:
        int v107 = v11;
        unsigned int v108 = -1;
        v110[0] = 0;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetISO8601(BestMatch, a3, (icu::ParsePosition *)&v106, 0, v110);
        if (v108 == -1 && v110[0])
        {
LABEL_26:
          v7[2] = v107;
          int v31 = BestMatch;
          goto LABEL_74;
        }
        int v98 = this;
LABEL_48:
        signed int v29 = v103;
        goto LABEL_72;
      case 0x11u:
        int v98 = this;
        int v107 = v11;
        unsigned int v108 = -1;
        BestMatch = icu::TimeZoneFormat::parseZoneID(BestMatch, a3, (icu::ParsePosition *)&v106, (icu::UnicodeString *)v114);
        goto LABEL_52;
      case 0x12u:
        int v98 = this;
        int v107 = v11;
        unsigned int v108 = -1;
        BestMatch = icu::TimeZoneFormat::parseShortZoneID(BestMatch, a3, (icu::ParsePosition *)&v106, (icu::UnicodeString *)v114);
        goto LABEL_52;
      case 0x13u:
        int v107 = v11;
        unsigned int v108 = -1;
        int v98 = this;
        BestMatch = icu::TimeZoneFormat::parseExemplarLocation(this, a3, (icu::ParsePosition *)&v106, (icu::UnicodeString *)v114);
LABEL_52:
        signed int v29 = v103;
        if (v108 != -1) {
          goto LABEL_72;
        }
        int v38 = v107;
        goto LABEL_54;
      default:
        goto LABEL_71;
    }
  }
  int v23 = v107;
  if (v107 != v15 && !LOBYTE(v115[0])) {
    goto LABEL_20;
  }
  v7[2] = v107;
  uint64_t v30 = (uint64_t)icu::TimeZoneFormat::createTimeZoneForOffset(v18, v18, v19, v20, v21, v22);
LABEL_177:
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v106);
  return v30;
}

uint64_t icu::TimeZoneFormat::parseOffsetLocalizedGMT(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, signed __int8 a4, signed __int8 *a5)
{
  int v8 = *((_DWORD *)a3 + 2);
  int v19 = 0;
  if (a5)
  {
    *a5 = 0;
    uint64_t result = icu::TimeZoneFormat::parseOffsetLocalizedGMTPattern(this, a2, v8, 0, &v19);
    int v11 = v19;
    if (v19 >= 1
      || (uint64_t result = icu::TimeZoneFormat::parseOffsetDefaultLocalizedGMT(this, a2, v8, &v19), v11 = v19, v19 >= 1))
    {
      *a5 = 1;
LABEL_26:
      int v18 = v11 + v8;
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = icu::TimeZoneFormat::parseOffsetLocalizedGMTPattern(this, a2, v8, 0, &v19);
    int v11 = v19;
    if (v19 > 0) {
      goto LABEL_26;
    }
    uint64_t result = icu::TimeZoneFormat::parseOffsetDefaultLocalizedGMT(this, a2, v8, &v19);
    int v11 = v19;
    if (v19 > 0) {
      goto LABEL_26;
    }
  }
  unsigned int v12 = *((unsigned __int16 *)this + 536);
  int v13 = v12 >> 5;
  if ((*((__int16 *)this + 536) & 0x80000000) == 0)
  {
    int v14 = v12 >> 5;
    if ((v12 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_20:
    if ((*((_WORD *)a2 + 4) & 1) == 0) {
      goto LABEL_15;
    }
LABEL_21:
    if (*((__int16 *)this + 536) < 0) {
      int v11 = *((_DWORD *)this + 269);
    }
    else {
      int v11 = *((unsigned __int16 *)this + 536) >> 5;
    }
    uint64_t result = 0;
    goto LABEL_26;
  }
  int v14 = *((_DWORD *)this + 269);
  if (v12) {
    goto LABEL_20;
  }
LABEL_9:
  if ((v12 & 0x8000u) != 0) {
    int v13 = *((_DWORD *)this + 269);
  }
  if ((v12 & 2) != 0) {
    signed int v15 = (char *)this + 1074;
  }
  else {
    signed int v15 = (char *)*((void *)this + 136);
  }
  if (!icu::UnicodeString::doCaseCompare((uint64_t)a2, v8, v14, (uint64_t)v15, v13 & (v13 >> 31), v13 & ~(v13 >> 31), 0))goto LABEL_21; {
LABEL_15:
  }
  uint64_t v16 = 0;
  while (1)
  {
    int32_t v17 = u_strlen((const UChar *)&aGmt_1[v16]);
    uint64_t result = icu::UnicodeString::doCaseCompare((uint64_t)a2, v8, v17, (uint64_t)&aGmt_1[v16], 0, v17, 0);
    if (!result) {
      break;
    }
    v16 += 4;
    if (v16 == 12)
    {
      uint64_t result = 0;
      *((_DWORD *)a3 + 3) = v8;
      return result;
    }
  }
  int v18 = v17 + v8;
LABEL_27:
  *((_DWORD *)a3 + 2) = v18;
  return result;
}

icu::SimpleTimeZone *icu::TimeZoneFormat::createTimeZoneForOffset(icu::TimeZoneFormat *this, icu::ZoneMeta *a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  v11[8] = *(UChar **)MEMORY[0x1E4F143B8];
  if (a2)
  {
    return icu::ZoneMeta::createCustomTimeZone(a2, (int)a2, a3, a4, a5, a6);
  }
  else
  {
    double v10 = "E";
    icu::UnicodeString::UnicodeString(v11, 1, &v10);
    uint64_t TimeZone = icu::TimeZone::createTimeZone(v11, v7);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
    return (icu::SimpleTimeZone *)TimeZone;
  }
}

uint64_t icu::TimeZoneFormat::parseOffsetLocalizedGMT(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  return icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a2, a3, 0, 0);
}

uint64_t icu::TimeZoneFormat::parseOffsetShortLocalizedGMT(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  return icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a2, a3, 1, 0);
}

uint64_t icu::TimeZoneFormat::parseOffsetISO8601(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  return icu::TimeZoneFormat::parseOffsetISO8601(this, a2, a3, 0, 0);
}

uint64_t icu::TimeZoneFormat::parseOffsetISO8601(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, int a4, signed __int8 *a5)
{
  if (a5) {
    *a5 = 0;
  }
  int v9 = *((_DWORD *)a3 + 2);
  unsigned int v10 = *((unsigned __int16 *)a2 + 4);
  if (*((__int16 *)a2 + 4) < 0)
  {
    unsigned int v11 = *((_DWORD *)a2 + 3);
    if (v9 >= (int)v11) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v9 >= (int)(v10 >> 5)) {
      goto LABEL_16;
    }
    unsigned int v11 = v10 >> 5;
  }
  if (v11 <= v9) {
    goto LABEL_16;
  }
  if ((v10 & 2) != 0) {
    unsigned int v12 = (char *)a2 + 10;
  }
  else {
    unsigned int v12 = (char *)*((void *)a2 + 3);
  }
  int v13 = *(unsigned __int16 *)&v12[2 * v9];
  if ((v13 & 0xFFFFFFDF) != 0x5A)
  {
    if (v13 == 43)
    {
      int v15 = 1;
      goto LABEL_19;
    }
    if (v13 == 45)
    {
      int v15 = -1;
LABEL_19:
      uint64_t v24 = &unk_1EDA44670;
      int v25 = v9 + 1;
      int v26 = -1;
      int v17 = icu::TimeZoneFormat::parseAsciiOffsetFields((uint64_t)a2, (uint64_t)&v24, 58, 0, 2);
      int v18 = v26;
      if (!a4 && v26 == -1)
      {
        int v19 = v25;
        if (v25 - v9 > 3) {
          goto LABEL_28;
        }
        uint64_t v21 = &unk_1EDA44670;
        int v22 = v9 + 1;
        int v23 = -1;
        int v20 = icu::TimeZoneFormat::parseAbuttingAsciiOffsetFields((uint64_t)a2, (uint64_t)&v21, 0, 2, 0);
        if (v23 == -1 && v22 > v19)
        {
          int v25 = v22;
          int v17 = v20;
        }
        icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v21);
        int v18 = v26;
      }
      if (v18 != -1)
      {
        uint64_t v14 = 0;
        *((_DWORD *)a3 + 3) = v9;
LABEL_31:
        icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v24);
        return v14;
      }
LABEL_28:
      *((_DWORD *)a3 + 2) = v25;
      if (a5) {
        *a5 = 1;
      }
      uint64_t v14 = (v17 * v15);
      goto LABEL_31;
    }
LABEL_16:
    uint64_t v14 = 0;
    *((_DWORD *)a3 + 3) = v9;
    return v14;
  }
  uint64_t v14 = 0;
  *((_DWORD *)a3 + 2) = v9 + 1;
  return v14;
}

uint64_t icu::TimeZoneFormat::getTimeType(int a1)
{
  uint64_t result = 1;
  if (a1 > 15)
  {
    if (a1 == 16) {
      return result;
    }
    if (a1 != 32) {
      return 0;
    }
  }
  else
  {
    if (a1 == 2) {
      return result;
    }
    if (a1 != 4) {
      return 0;
    }
  }
  return 2;
}

icu::UnicodeString *icu::TimeZoneFormat::getTimeZoneID(icu::TimeZoneFormat *this, icu::UVector **a2, unsigned int a3, icu::UnicodeString *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!icu::TimeZoneNames::MatchInfoCollection::getTimeZoneIDAt(a2, a3, a4))
  {
    memset(v11, 0, sizeof(v11));
    memset(v10, 0, sizeof(v10));
    icu::UnicodeString::UnicodeString(v10, v11, 0, 32);
    if (icu::TimeZoneNames::MatchInfoCollection::getMetaZoneIDAt(a2, a3, (icu::UnicodeString *)v10)) {
      (*(void (**)(void, _OWORD *, char *, icu::UnicodeString *))(**((void **)this + 70) + 64))(*((void *)this + 70), v10, (char *)this + 552, a4);
    }
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
  }
  return a4;
}

uint64_t icu::TimeZoneFormat::getTZDBTimeZoneNames(icu::TimeZoneFormat *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  umtx_lock((atomic_ullong *)&unk_1E9192968);
  if (!*((void *)this + 165))
  {
    int v6 = icu::UMemory::operator new(0, (icu::UMemory *)0xF0, v5);
    if (v6) {
      *((void *)this + 165) = sub_18CA025BC(v6, (char *)this + 328);
    }
    else {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  umtx_unlock((std::mutex **)&unk_1E9192968);
  return *((void *)this + 165);
}

uint64_t icu::TimeZoneFormat::getTimeZoneGenericNames(icu::TimeZoneFormat *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  umtx_lock((atomic_ullong *)&unk_1E9192968);
  if (!*((void *)this + 71)) {
    *((void *)this + 71) = icu::TimeZoneGenericNames::createInstance((icu::TimeZoneFormat *)((char *)this + 328), a2, v5);
  }
  umtx_unlock((std::mutex **)&unk_1E9192968);
  return *((void *)this + 71);
}

icu::UnicodeString *icu::TimeZoneFormat::parseZoneID(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, icu::UnicodeString *a4)
{
  int v18 = 0;
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E91929B8, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E91929B8))
  {
    if (dword_1E91929BC >= 1) {
      int v18 = dword_1E91929BC;
    }
  }
  else
  {
    sub_18C9FA63C((icu::TimeZone *)&v18);
    dword_1E91929BC = v18;
    icu::umtx_initImplPostInit(&dword_1E91929B8);
  }
  uint64_t v7 = *((unsigned int *)a3 + 2);
  icu::UnicodeString::setToBogus(a4);
  if (v18 > 0) {
    goto LABEL_7;
  }
  int v9 = icu::UMemory::operator new((uint64_t *)v18, (icu::UMemory *)0x18, v8);
  unsigned int v10 = v9;
  if (v9)
  {
    *int v9 = (uint64_t)&unk_1EDA536F0;
    *((_DWORD *)v9 + 2) = 0;
    void v9[2] = 0;
  }
  icu::TextTrieMap::search((icu::TextTrieMap *)qword_1E9192958, (uint64_t)a2, v7, (uint64_t (***)(void, void, void *, int *))v9, (UErrorCode *)&v18);
  int v11 = *((_DWORD *)v10 + 2);
  if (v11 >= 1)
  {
    uint64_t v12 = v10[2];
    icu::UnicodeString::unBogus((uint64_t)a4);
    unsigned int v13 = *((unsigned __int16 *)a4 + 4);
    int v14 = (__int16)v13;
    unsigned int v15 = v13 >> 5;
    if (v14 >= 0) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = *((unsigned int *)a4 + 3);
    }
    icu::UnicodeString::doReplace((uint64_t)a4, 0, v16, v12, 0, 0xFFFFFFFFLL);
  }
  (*(void (**)(uint64_t *))(*v10 + 16))(v10);
  if (v11 < 1) {
LABEL_7:
  }
    *((_DWORD *)a3 + 3) = v7;
  else {
    *((_DWORD *)a3 + 2) = v11 + v7;
  }
  return a4;
}

icu::UnicodeString *icu::TimeZoneFormat::parseShortZoneID(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, icu::UnicodeString *a4)
{
  int v18 = 0;
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E91929C0, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E91929C0))
  {
    if (dword_1E91929C4 >= 1) {
      int v18 = dword_1E91929C4;
    }
  }
  else
  {
    sub_18C9FA758((UErrorCode *)&v18);
    dword_1E91929C4 = v18;
    icu::umtx_initImplPostInit(&dword_1E91929C0);
  }
  uint64_t v7 = *((unsigned int *)a3 + 2);
  icu::UnicodeString::setToBogus(a4);
  if (v18 > 0) {
    goto LABEL_7;
  }
  int v9 = icu::UMemory::operator new((uint64_t *)v18, (icu::UMemory *)0x18, v8);
  unsigned int v10 = v9;
  if (v9)
  {
    *int v9 = (uint64_t)&unk_1EDA536F0;
    *((_DWORD *)v9 + 2) = 0;
    void v9[2] = 0;
  }
  icu::TextTrieMap::search((icu::TextTrieMap *)qword_1E9192960, (uint64_t)a2, v7, (uint64_t (***)(void, void, void *, int *))v9, (UErrorCode *)&v18);
  int v11 = *((_DWORD *)v10 + 2);
  if (v11 >= 1)
  {
    uint64_t v12 = v10[2];
    icu::UnicodeString::unBogus((uint64_t)a4);
    unsigned int v13 = *((unsigned __int16 *)a4 + 4);
    int v14 = (__int16)v13;
    unsigned int v15 = v13 >> 5;
    if (v14 >= 0) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = *((unsigned int *)a4 + 3);
    }
    icu::UnicodeString::doReplace((uint64_t)a4, 0, v16, v12, 0, 0xFFFFFFFFLL);
  }
  (*(void (**)(uint64_t *))(*v10 + 16))(v10);
  if (v11 < 1) {
LABEL_7:
  }
    *((_DWORD *)a3 + 3) = v7;
  else {
    *((_DWORD *)a3 + 2) = v11 + v7;
  }
  return a4;
}

icu::UnicodeString *icu::TimeZoneFormat::parseExemplarLocation(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, icu::UnicodeString *a4)
{
  uint64_t v8 = *((unsigned int *)a3 + 2);
  icu::UnicodeString::setToBogus(a4);
  int v18 = 0;
  int v9 = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(void, const icu::UnicodeString *, uint64_t, uint64_t, int *))(**((void **)this + 70) + 120))(*((void *)this + 70), a2, v8, 64, &v18);
  unsigned int v10 = (icu::UVector **)v9;
  if (v18 > 0) {
    goto LABEL_2;
  }
  if (v9 && (int)icu::TimeZoneNames::MatchInfoCollection::size(v9) >= 1)
  {
    signed int v11 = 0;
    unsigned int v12 = -1;
    int v13 = -1;
    do
    {
      if ((int)(icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v10, v11) + v8) > v13)
      {
        int v13 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v10, v11) + v8;
        unsigned int v12 = v11;
      }
      ++v11;
    }
    while (v11 < (int)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v10));
    if (v13 > 0)
    {
      *((_DWORD *)a3 + 2) = v13;
      icu::TimeZoneFormat::getTimeZoneID(this, v10, v12, a4);
    }
  }
  unsigned int v14 = *((unsigned __int16 *)a4 + 4);
  int v15 = (__int16)v14;
  unsigned int v16 = v14 >> 5;
  if (v15 < 0) {
    unsigned int v16 = *((_DWORD *)a4 + 3);
  }
  if (!v16) {
LABEL_2:
  }
    *((_DWORD *)a3 + 3) = v8;
  if (v10) {
    (*((void (**)(icu::UVector **))*v10 + 1))(v10);
  }
  return a4;
}

uint64_t icu::TimeZoneFormat::parseObject(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  unint64_t v5 = (icu::UObject *)(*(uint64_t (**)(icu::TimeZoneFormat *, void, const icu::UnicodeString *, icu::ParsePosition *, uint64_t, void))(*(void *)this + 72))(this, 0, a2, a4, 1, 0);

  return icu::Formattable::adoptObject(a3, v5);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetISO8601(icu::TimeZoneFormat *this, int a2, int a3, int a4, int a5, int a6, icu::UnicodeString *a7, UErrorCode *a8)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(int *)a8 < 1)
  {
    if (a2 >= 0) {
      unsigned int v11 = a2;
    }
    else {
      unsigned int v11 = -a2;
    }
    if (a4 && (v11 < 0x3E8 || a6 && v11 >> 5 <= 0x752))
    {
      LOWORD(v34[0]) = 90;
      icu::UnicodeString::unBogus((uint64_t)a7);
      unsigned int v12 = *((unsigned __int16 *)a7 + 4);
      int v13 = (__int16)v12;
      unsigned int v14 = v12 >> 5;
      if (v13 >= 0) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = *((unsigned int *)a7 + 3);
      }
      icu::UnicodeString::doReplace((uint64_t)a7, 0, v15, (uint64_t)v34, 0, 1);
    }
    else
    {
      unsigned int v16 = a5 == 0;
      if (a3) {
        __int16 v17 = 0;
      }
      else {
        __int16 v17 = 58;
      }
      if (v11 < 0x5265C00)
      {
        if (a6) {
          unsigned int v18 = 1;
        }
        else {
          unsigned int v18 = 2;
        }
        unsigned int v19 = v11 / 0x36EE80;
        unsigned int v20 = v11 % 0x36EE80;
        v34[0] = v19;
        v34[1] = v20 / 0xEA60;
        void v34[2] = v20 % 0xEA60 / 0x3E8;
        if (v18 > v16)
        {
          while (!v34[v18])
          {
            if ((int)--v18 <= (int)v16)
            {
              unsigned int v18 = a5 == 0;
              break;
            }
          }
        }
        __int16 v21 = 43;
        if (a2 < 0 && (v18 & 0x80000000) == 0)
        {
          uint64_t v22 = v18 + 1;
          int v23 = v34;
          while (!*v23++)
          {
            if (!--v22)
            {
              __int16 v21 = 43;
              goto LABEL_33;
            }
          }
          __int16 v21 = 45;
        }
LABEL_33:
        __int16 v33 = v21;
        icu::UnicodeString::unBogus((uint64_t)a7);
        unsigned int v25 = *((unsigned __int16 *)a7 + 4);
        int v26 = (__int16)v25;
        unsigned int v27 = v25 >> 5;
        if (v26 >= 0) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = *((unsigned int *)a7 + 3);
        }
        icu::UnicodeString::doReplace((uint64_t)a7, 0, v28, (uint64_t)&v33, 0, 1);
        if ((v18 & 0x80000000) == 0)
        {
          unint64_t v29 = 0;
          uint64_t v30 = 4 * (v18 + 1);
          do
          {
            if (!a3 && v29)
            {
              __int16 v33 = v17;
              icu::UnicodeString::doAppend((uint64_t)a7, (uint64_t)&v33, 0, 1);
            }
            int v31 = v34[v29 / 4];
            __int16 v33 = (__int16)v31 / 10 + 48;
            icu::UnicodeString::doAppend((uint64_t)a7, (uint64_t)&v33, 0, 1);
            __int16 v33 = v31 % 10 + 48;
            icu::UnicodeString::doAppend((uint64_t)a7, (uint64_t)&v33, 0, 1);
            v29 += 4;
          }
          while (v30 != v29);
        }
      }
      else
      {
        icu::UnicodeString::setToBogus(a7);
        *a8 = U_ILLEGAL_ARGUMENT_ERROR;
      }
    }
  }
  else
  {
    icu::UnicodeString::setToBogus(a7);
  }
  return a7;
}

UChar **icu::TimeZoneFormat::formatOffsetLocalizedGMT(UChar **this, int a2, int a3, UChar **a4, UErrorCode *a5)
{
  if (*(int *)a5 < 1)
  {
    if ((a2 - 86400000) > 0xF5B34800)
    {
      if (a2)
      {
        if (a2 >= 0) {
          unsigned int v9 = a2;
        }
        else {
          unsigned int v9 = -a2;
        }
        unsigned int v10 = v9 / 0x36EE80;
        unsigned int v11 = v9 % 0x36EE80;
        unsigned int v12 = v11 / 0xEA60;
        unsigned int v13 = v11 % 0xEA60;
        if (a2 < 0)
        {
          if (v13 >= 0x3E8)
          {
            unsigned int v14 = (char *)(this + 161);
          }
          else if (a3 && v11 >> 5 < 0x753)
          {
            unsigned int v14 = (char *)(this + 163);
          }
          else
          {
            unsigned int v14 = (char *)(this + 160);
          }
        }
        else if (v13 >= 0x3E8)
        {
          unsigned int v14 = (char *)(this + 159);
        }
        else if (a3 && v11 >> 5 < 0x753)
        {
          unsigned int v14 = (char *)(this + 162);
        }
        else
        {
          unsigned int v14 = (char *)(this + 158);
        }
        uint64_t v15 = *(icu::UVector **)v14;
        icu::UnicodeString::copyFrom(a4, this + 142, 0);
        if (*((int *)v15 + 2) >= 1)
        {
          signed int v16 = 0;
          unsigned int v17 = (unsigned __int16)v13 / 0x3E8u;
          if (a3) {
            unsigned __int8 v18 = 1;
          }
          else {
            unsigned __int8 v18 = 2;
          }
          int v19 = v18;
          do
          {
            uint64_t v20 = icu::UVector::elementAt(v15, v16);
            switch(*(_DWORD *)(v20 + 16))
            {
              case 0:
                icu::UnicodeString::doAppend((uint64_t)a4, *(void *)(v20 + 8), 0, 0xFFFFFFFFLL);
                break;
              case 1:
                __int16 v21 = (icu::TimeZoneFormat *)this;
                uint64_t v22 = (icu::UnicodeString *)a4;
                int v23 = v10;
                int v24 = v19;
                goto LABEL_34;
              case 2:
                __int16 v21 = (icu::TimeZoneFormat *)this;
                uint64_t v22 = (icu::UnicodeString *)a4;
                int v23 = v12;
                goto LABEL_33;
              case 4:
                __int16 v21 = (icu::TimeZoneFormat *)this;
                uint64_t v22 = (icu::UnicodeString *)a4;
                int v23 = v17;
LABEL_33:
                int v24 = 2;
LABEL_34:
                icu::TimeZoneFormat::appendOffsetDigits(v21, v22, v23, v24);
                break;
              default:
                break;
            }
            ++v16;
          }
          while (v16 < *((_DWORD *)v15 + 2));
        }
        unsigned int v25 = *((unsigned __int16 *)this + 604);
        int v26 = (__int16)v25;
        unsigned int v27 = v25 >> 5;
        if (v26 >= 0) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = *((unsigned int *)this + 303);
        }
        icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)(this + 150), 0, v28);
      }
      else
      {
        icu::UnicodeString::copyFrom(a4, this + 133, 0);
      }
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
  }
  return a4;
}

uint64_t icu::TimeZoneFormat::appendOffsetDigits(icu::TimeZoneFormat *this, icu::UnicodeString *a2, int a3, int a4)
{
  if (a3 > 9) {
    int v7 = -2;
  }
  else {
    int v7 = -1;
  }
  int v8 = v7 + a4;
  if (v7 + a4 >= 1)
  {
    do
    {
      icu::UnicodeString::append((uint64_t)a2, *((_DWORD *)this + 256));
      --v8;
    }
    while (v8);
  }
  if (a3 > 9) {
    icu::UnicodeString::append((uint64_t)a2, *((_DWORD *)this + a3 / 0xAuLL + 256));
  }
  unsigned int v9 = *((_DWORD *)this + a3 % 10 + 256);

  return icu::UnicodeString::append((uint64_t)a2, v9);
}

uint64_t icu::TimeZoneFormat::parseAsciiOffsetFields(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v6 = 0;
  uint64_t result = 0;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(int *)(a2 + 8);
  int v9 = *(_DWORD *)(a2 + 8);
  int v25 = 0;
  uint64_t v24 = 0;
  int v23 = -1;
  unint64_t v22 = 0xFFFFFFFF00000000;
  unint64_t v10 = *(unsigned __int16 *)(a1 + 8);
  int v11 = *(_DWORD *)(a1 + 12);
  uint64_t v12 = a1 + 10;
  uint64_t v13 = *(void *)(a1 + 24);
  if ((v10 & 2) == 0) {
    uint64_t v12 = v13;
  }
  uint64_t v14 = v12 + 2 * v8;
  while (1)
  {
    uint64_t v15 = v8 + v6;
    if ((v10 & 0x8000) != 0)
    {
      if (v15 >= v11) {
        break;
      }
      LODWORD(v16) = v11;
    }
    else
    {
      if (v15 >= (uint64_t)(v10 >> 5)) {
        break;
      }
      unint64_t v16 = v10 >> 5;
    }
    if ((int)result > a5) {
      break;
    }
    if (v16 <= v9 + (int)v6) {
      int v17 = 0xFFFF;
    }
    else {
      int v17 = *(unsigned __int16 *)(v14 + 2 * v6);
    }
    if (v17 == a3)
    {
      if (result)
      {
        if (*((_DWORD *)&v22 + (int)result) != -1) {
          break;
        }
        *((_DWORD *)&v22 + (int)result) = 0;
      }
      else if (!v22)
      {
        int v20 = -1;
        int v21 = 0;
        goto LABEL_30;
      }
    }
    else
    {
      int v18 = *((_DWORD *)&v22 + (int)result);
      if (v18 == -1) {
        break;
      }
      unsigned int v19 = v17 - 48;
      if (v19 >= 0xA) {
        unsigned int v19 = -1;
      }
      if ((v19 & 0x80000000) != 0) {
        break;
      }
      *((_DWORD *)&v24 + (int)result) = v19 + 10 * *((_DWORD *)&v24 + (int)result);
      *((_DWORD *)&v22 + (int)result) = v18 + 1;
      if (v18 <= 0) {
        uint64_t result = result;
      }
      else {
        uint64_t result = (result + 1);
      }
    }
    ++v6;
  }
  if (v22)
  {
    if ((int)v24 < 24)
    {
      int v20 = 0;
      uint64_t result = (3600000 * v24);
      if (HIDWORD(v22) == 2)
      {
        int v21 = v22;
        if (SHIDWORD(v24) <= 59)
        {
          uint64_t result = (result + 60000 * HIDWORD(v24));
          int v21 = v22 + 3;
          int v20 = 1;
          if (v23 == 2 && v25 <= 59)
          {
            uint64_t result = (result + 1000 * v25);
            int v21 = v22 + 6;
            int v20 = 2;
          }
        }
      }
      else
      {
        int v21 = v22;
      }
    }
    else
    {
      int v20 = 0;
      uint64_t result = 3600000 * (v24 / 0xA);
      int v21 = 1;
    }
  }
  else
  {
    uint64_t result = 0;
    int v21 = 0;
    int v20 = -1;
  }
LABEL_30:
  if (v20 >= a4)
  {
    *(_DWORD *)(a2 + 8) = v21 + v9;
  }
  else
  {
    uint64_t result = 0;
    *(_DWORD *)(a2 + 12) = v9;
  }
  return result;
}

uint64_t icu::TimeZoneFormat::parseAbuttingAsciiOffsetFields(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a2 + 8);
  int v6 = ((__PAIR64__(2 * a3, a5) - 1) >> 32) + 2;
  uint64_t v7 = (2 * a4 + 2);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if ((int)v7 < 1)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(unsigned __int16 *)(a1 + 8);
    int v10 = *(_DWORD *)(a1 + 12);
    uint64_t v11 = *(void *)(a1 + 24);
    if ((v9 & 2) != 0) {
      uint64_t v11 = a1 + 10;
    }
    uint64_t v12 = v11 + 2 * v5;
    while (1)
    {
      uint64_t v13 = v5 + v8;
      if ((v9 & 0x8000) != 0)
      {
        LODWORD(v14) = v10;
        if (v13 >= v10) {
          break;
        }
      }
      else
      {
        unint64_t v14 = v9 >> 5;
        if (v13 >= (uint64_t)(v9 >> 5)) {
          break;
        }
      }
      if (v14 <= v5 + (int)v8) {
        break;
      }
      unsigned int v15 = *(unsigned __int16 *)(v12 + 2 * v8) - 48;
      if (v15 >= 0xA) {
        unsigned int v15 = -1;
      }
      if ((v15 & 0x80000000) != 0) {
        break;
      }
      *((_DWORD *)&v22 + v8++) = v15;
      if (v7 == v8) {
        goto LABEL_17;
      }
    }
    LODWORD(v7) = v8;
  }
LABEL_17:
  int v16 = v7 & ~(a5 != 0);
  if (v16 < v6)
  {
LABEL_33:
    uint64_t result = 0;
    *(_DWORD *)(a2 + 12) = v5;
  }
  else
  {
    if (a5) {
      int v17 = -2;
    }
    else {
      int v17 = -1;
    }
    while (1)
    {
      switch(v16)
      {
        case 1:
          int v18 = 0;
          int v19 = 0;
          int v20 = v22;
          break;
        case 2:
          int v18 = 0;
          int v19 = 0;
          int v20 = HIDWORD(v22) + 10 * v22;
          break;
        case 3:
          int v19 = 0;
          int v20 = v22;
          int v18 = v23 + 10 * HIDWORD(v22);
          break;
        case 4:
          int v19 = 0;
          int v20 = HIDWORD(v22) + 10 * v22;
          int v18 = HIDWORD(v23) + 10 * v23;
          break;
        case 5:
          int v20 = v22;
          int v18 = v23 + 10 * HIDWORD(v22);
          int v19 = v24 + 10 * HIDWORD(v23);
          break;
        case 6:
          int v20 = HIDWORD(v22) + 10 * v22;
          int v18 = HIDWORD(v23) + 10 * v23;
          int v19 = HIDWORD(v24) + 10 * v24;
          break;
        default:
          int v20 = 0;
          int v18 = 0;
          int v19 = 0;
          break;
      }
      if (v20 <= 23 && v18 <= 59 && v19 < 60) {
        break;
      }
      v16 += v17;
      if (v16 < v6) {
        goto LABEL_33;
      }
    }
    *(_DWORD *)(a2 + 8) = v5 + v16;
    return (1000 * (v19 + 60 * (v18 + 60 * v20)));
  }
  return result;
}

uint64_t icu::TimeZoneFormat::parseOffsetLocalizedGMTPattern(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, signed __int8 a4, int *a5)
{
  unsigned int v9 = *((unsigned __int16 *)this + 572);
  if (*((__int16 *)this + 572) < 0) {
    int v10 = *((_DWORD *)this + 287);
  }
  else {
    int v10 = v9 >> 5;
  }
  int v22 = v10;
  if (v10 >= 1)
  {
    if (v9)
    {
      if ((*((_WORD *)a2 + 4) & 1) == 0)
      {
LABEL_13:
        uint64_t v13 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      if ((v9 & 0x8000u) == 0) {
        int v11 = v9 >> 5;
      }
      else {
        int v11 = *((_DWORD *)this + 287);
      }
      if ((v9 & 2) != 0) {
        uint64_t v12 = (char *)this + 1146;
      }
      else {
        uint64_t v12 = (char *)*((void *)this + 145);
      }
      if (icu::UnicodeString::doCaseCompare((uint64_t)a2, a3, v10, (uint64_t)v12, v11 & (v11 >> 31), v11 & ~(v11 >> 31), 0))goto LABEL_13; {
    }
      }
  }
  int v14 = v10 + a3;
  uint64_t v13 = icu::TimeZoneFormat::parseOffsetFields(this, a2, v10 + a3, 0, &v22);
  int v15 = v22;
  if (v22)
  {
    unsigned int v16 = *((unsigned __int16 *)this + 604);
    if (*((__int16 *)this + 604) < 0) {
      int v17 = *((_DWORD *)this + 303);
    }
    else {
      int v17 = v16 >> 5;
    }
    if (v17 >= 1)
    {
      if (v16)
      {
        if ((*((_WORD *)a2 + 4) & 1) == 0) {
          goto LABEL_28;
        }
      }
      else
      {
        if ((v16 & 0x8000u) == 0) {
          int v18 = v16 >> 5;
        }
        else {
          int v18 = *((_DWORD *)this + 303);
        }
        if ((v16 & 2) != 0) {
          int v19 = (char *)this + 1210;
        }
        else {
          int v19 = (char *)*((void *)this + 153);
        }
        if (icu::UnicodeString::doCaseCompare((uint64_t)a2, v22 + v14, v17, (uint64_t)v19, v18 & (v18 >> 31), v18 & ~(v18 >> 31), 0))goto LABEL_28; {
      }
        }
    }
    int v20 = v15 + v10 + v17;
    goto LABEL_31;
  }
LABEL_28:
  int v20 = 0;
LABEL_31:
  *a5 = v20;
  return v13;
}

uint64_t icu::TimeZoneFormat::parseOffsetDefaultLocalizedGMT(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, int *a4)
{
  uint64_t v8 = 0;
  while (1)
  {
    int32_t v9 = u_strlen((const UChar *)&aGmt_1[v8]);
    if (!icu::UnicodeString::doCaseCompare((uint64_t)a2, a3, v9, (uint64_t)&aGmt_1[v8], 0, v9, 0)) {
      break;
    }
    v8 += 4;
    if (v8 == 12) {
      goto LABEL_17;
    }
  }
  if (!v9) {
    goto LABEL_17;
  }
  unsigned int v10 = v9 + a3;
  int v11 = v9 + a3 + 1;
  unsigned int v12 = *((unsigned __int16 *)a2 + 4);
  if (*((__int16 *)a2 + 4) < 0)
  {
    int v13 = *((_DWORD *)a2 + 3);
    if (v11 >= v13) {
      goto LABEL_17;
    }
  }
  else
  {
    if (v11 >= (int)(v12 >> 5)) {
      goto LABEL_17;
    }
    int v13 = v12 >> 5;
  }
  if (v13 <= v10) {
    goto LABEL_17;
  }
  if ((v12 & 2) != 0) {
    int v14 = (char *)a2 + 10;
  }
  else {
    int v14 = (char *)*((void *)a2 + 3);
  }
  int v15 = *(unsigned __int16 *)&v14[2 * v10];
  if (v15 == 43)
  {
    int v16 = 1;
    goto LABEL_20;
  }
  if (v15 != 45)
  {
LABEL_17:
    uint64_t result = 0;
    int v18 = 0;
    goto LABEL_18;
  }
  int v16 = -1;
LABEL_20:
  int v26 = 0;
  int v19 = icu::TimeZoneFormat::parseDefaultOffsetFields(this, (uint64_t)a2, v11, 58, &v26);
  int v20 = v26;
  unsigned int v21 = *((unsigned __int16 *)a2 + 4);
  int v22 = (__int16)v21;
  unsigned int v23 = v21 >> 5;
  if (v22 < 0) {
    unsigned int v23 = *((_DWORD *)a2 + 3);
  }
  if (v26 != v23 - v11)
  {
    int v25 = 0;
    int v24 = icu::TimeZoneFormat::parseAbuttingOffsetFields(this, a2, v11, &v25);
    if (v20 <= v25)
    {
      int v19 = v24;
      int v20 = v25;
    }
  }
  uint64_t result = (v19 * v16);
  int v18 = v9 + v20 + 1;
LABEL_18:
  *a4 = v18;
  return result;
}

uint64_t icu::TimeZoneFormat::parseOffsetFields(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, signed __int8 a4, int *a5)
{
  uint64_t v9 = 0;
  *a5 = 0;
  memset(v19, 0, sizeof(v19));
  while (1)
  {
    int v10 = icu::TimeZoneFormat::parseOffsetFieldsWithPattern(this, a2, a3, *((icu::UVector **)this + dword_18CA978D8[v9] + 158), 0, &v19[2], &v19[1], v19);
    if (v10 >= 1) {
      break;
    }
    if (++v9 == 6) {
      return 0;
    }
  }
  int v12 = v10;
  if (v9 >= 5) {
    int v13 = -1;
  }
  else {
    int v13 = dword_18CA97994[v9];
  }
  if (*((unsigned char *)this + 1312))
  {
    uint64_t v14 = 0;
    int v18 = 0;
    *(void *)int v17 = 0;
    while (1)
    {
      int v15 = icu::TimeZoneFormat::parseOffsetFieldsWithPattern(this, a2, a3, *((icu::UVector **)this + dword_18CA978D8[v14] + 158), 1, &v18, &v17[1], v17);
      if (v15 >= 1) {
        break;
      }
      if (++v14 == 6)
      {
        int v16 = 1;
        goto LABEL_16;
      }
    }
    int v16 = v14 >= 5 ? -1 : dword_18CA97994[v14];
LABEL_16:
    if (v15 > v12)
    {
      v19[2] = v18;
      *(void *)int v19 = *(void *)v17;
      int v13 = v16;
      int v12 = v15;
    }
    if (v12 < 1) {
      return 0;
    }
  }
  uint64_t result = (1000 * v13 * (v19[0] + 60 * (v19[1] + 60 * v19[2])));
  *a5 = v12;
  return result;
}

uint64_t icu::TimeZoneFormat::parseOffsetFieldsWithPattern(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, icu::UVector *a4, int a5, int *a6, int *a7, int *a8)
{
  if (*((int *)a4 + 2) >= 1)
  {
    unsigned int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    if (a5) {
      unsigned __int8 v14 = 1;
    }
    else {
      unsigned __int8 v14 = 2;
    }
    unsigned int v34 = v14;
    int v35 = 0;
    int v15 = a3;
    while (2)
    {
      int v36 = 0;
      uint64_t v16 = icu::UVector::elementAt(a4, v11);
      switch(*(_DWORD *)(v16 + 16))
      {
        case 0:
          int v17 = *(const UChar **)(v16 + 8);
          int32_t v18 = u_strlen(v17);
          if (!v11)
          {
            unsigned int v19 = *((unsigned __int16 *)a2 + 4);
            int v20 = (__int16)v19;
            LODWORD(v21) = v19 >> 5;
            unsigned int v21 = v20 >= 0 ? (uint64_t *)v21 : (uint64_t *)*((unsigned int *)a2 + 3);
            if (v15 < (int)v21)
            {
              int v22 = (icu::PatternProps *)icu::UnicodeString::char32At(v21, a2, v15);
              if (!icu::PatternProps::isWhiteSpace(v22) && v18 >= 1)
              {
                do
                {
                  unsigned int v23 = (icu::PatternProps *)*v17;
                  if (((unsigned __int16)v23 & 0xF800) == 0xD800 && ((unsigned __int16)v23 & 0x400) == 0 && v18 != 1)
                  {
                    int v24 = v17[1];
                    BOOL v25 = (v24 & 0xFC00) == 56320;
                    unsigned int v26 = v24 + (v23 << 10) - 56613888;
                    if (v25) {
                      unsigned int v23 = (icu::PatternProps *)v26;
                    }
                    else {
                      unsigned int v23 = (icu::PatternProps *)*v17;
                    }
                  }
                  if (!icu::PatternProps::isWhiteSpace(v23)) {
                    break;
                  }
                  unsigned int v27 = v23 < 0x10000 ? 1 : 2;
                  v17 += v27;
                  BOOL v28 = __OFSUB__(v18, v27);
                  v18 -= v27;
                }
                while (!((v18 < 0) ^ v28 | (v18 == 0)));
              }
            }
          }
          if (!icu::UnicodeString::doCaseCompare((uint64_t)a2, v15, v18, (uint64_t)v17, 0, v18, 0)) {
            goto LABEL_32;
          }
          goto LABEL_36;
        case 1:
          int v13 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(this, a2, v15, 1u, v34, 0, 23, &v36);
          goto LABEL_31;
        case 2:
          int v12 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(this, a2, v15, 2u, 2u, 0, 59, &v36);
          goto LABEL_31;
        case 4:
          int v35 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(this, a2, v15, 2u, 2u, 0, 59, &v36);
LABEL_31:
          int32_t v18 = v36;
          if (!v36) {
            goto LABEL_36;
          }
LABEL_32:
          v15 += v18;
          if ((signed int)++v11 >= *((_DWORD *)a4 + 2)) {
            goto LABEL_35;
          }
          continue;
        default:
LABEL_36:
          uint64_t result = 0;
          *a8 = 0;
          *a7 = 0;
          *a6 = 0;
          return result;
      }
    }
  }
  int v13 = 0;
  int v12 = 0;
  int v35 = 0;
  int v15 = a3;
LABEL_35:
  *a6 = v13;
  *a7 = v12;
  uint64_t result = (v15 - a3);
  *a8 = v35;
  return result;
}

uint64_t icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, unsigned int a4, unsigned int a5, int a6, int a7, int *a8)
{
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  *a8 = 0;
  unsigned int v12 = *((unsigned __int16 *)a2 + 4);
  int v13 = (__int16)v12;
  int v14 = v12 >> 5;
  if (v13 < 0) {
    int v14 = *((_DWORD *)a2 + 3);
  }
  int v30 = 0;
  BOOL v15 = v14 <= a3 || a5 == 0;
  int v16 = a3;
  if (!v15)
  {
    unsigned int v11 = 0;
    uint64_t v21 = 0;
    int v16 = a3;
    while (1)
    {
      int v22 = icu::TimeZoneFormat::parseSingleLocalizedDigit(this, a2, v16, &v30);
      if (v22 < 0) {
        break;
      }
      uint64_t v10 = (v22 + 10 * v21);
      if ((int)v10 > a7) {
        break;
      }
      ++v11;
      v16 += v30;
      unsigned int v23 = *((unsigned __int16 *)a2 + 4);
      int v24 = (__int16)v23;
      int v25 = v23 >> 5;
      if (v24 < 0) {
        int v25 = *((_DWORD *)a2 + 3);
      }
      BOOL v26 = v16 >= v25 || v11 >= a5;
      uint64_t v21 = (v22 + 10 * v21);
      if (v26) {
        goto LABEL_19;
      }
    }
    uint64_t v10 = v21;
  }
LABEL_19:
  uint64_t result = 0xFFFFFFFFLL;
  if ((int)v10 >= a6 && v11 >= a4)
  {
    *a8 = v16 - a3;
    return v10;
  }
  return result;
}

uint64_t icu::TimeZoneFormat::parseAbuttingOffsetFields(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, int *a4)
{
  uint64_t v8 = 0;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  memset(v19, 0, sizeof(v19));
  int v18 = 0;
  int v9 = a3;
  while (1)
  {
    int v10 = icu::TimeZoneFormat::parseSingleLocalizedDigit(this, a2, v9, &v18);
    *((_DWORD *)&v20 + v8) = v10;
    if (v10 < 0) {
      break;
    }
    v9 += v18;
    *((_DWORD *)v19 + v8++) = v9 - a3;
    if (v8 == 6) {
      goto LABEL_7;
    }
  }
  if (!v8)
  {
    int v17 = 0;
    uint64_t result = 0;
    goto LABEL_24;
  }
  if ((int)v8 < 1) {
    return 0;
  }
LABEL_7:
  unsigned int v11 = (int *)v19 + (v8 - 1);
  while (1)
  {
    switch((int)v8)
    {
      case 1:
        int v12 = 0;
        int v13 = 0;
        int v14 = v20;
        break;
      case 2:
        int v12 = 0;
        int v13 = 0;
        int v14 = HIDWORD(v20) + 10 * v20;
        break;
      case 3:
        int v13 = 0;
        int v14 = v20;
        int v12 = v21 + 10 * HIDWORD(v20);
        break;
      case 4:
        int v13 = 0;
        int v14 = HIDWORD(v20) + 10 * v20;
        int v12 = HIDWORD(v21) + 10 * v21;
        break;
      case 5:
        int v14 = v20;
        int v12 = v21 + 10 * HIDWORD(v20);
        int v13 = v22 + 10 * HIDWORD(v21);
        break;
      case 6:
        int v14 = HIDWORD(v20) + 10 * v20;
        int v12 = HIDWORD(v21) + 10 * v21;
        int v13 = HIDWORD(v22) + 10 * v22;
        break;
      default:
        int v14 = 0;
        int v12 = 0;
        int v13 = 0;
        break;
    }
    if (v14 <= 23 && v12 <= 59 && v13 <= 59) {
      break;
    }
    --v11;
    BOOL v15 = __OFSUB__(v8, 1);
    LODWORD(v8) = v8 - 1;
    if (((int)v8 < 0) ^ v15 | (v8 == 0)) {
      return 0;
    }
  }
  uint64_t result = (3600000 * v14 + 60000 * v12 + 1000 * v13);
  int v17 = *v11;
LABEL_24:
  *a4 = v17;
  return result;
}

uint64_t icu::TimeZoneFormat::parseSingleLocalizedDigit(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, int *a4)
{
  *a4 = 0;
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  int v5 = (__int16)v4;
  LODWORD(v6) = v4 >> 5;
  if (v5 >= 0) {
    unint64_t v6 = v6;
  }
  else {
    unint64_t v6 = *((unsigned int *)a2 + 3);
  }
  if ((int)v6 <= a3) {
    return 0xFFFFFFFFLL;
  }
  UChar32 v11 = icu::UnicodeString::char32At((uint64_t *)v6, a2, a3);
  uint64_t v12 = 0;
  while (v11 != *((_DWORD *)this + v12 + 256))
  {
    if (++v12 == 10)
    {
      uint64_t v12 = u_charDigitValue(v11);
      if (v12 >= 0xA) {
        return 0xFFFFFFFFLL;
      }
      break;
    }
  }
  *a4 = icu::UnicodeString::moveIndex32(a2, a3, 1) - a3;
  return v12;
}

uint64_t icu::TimeZoneFormat::parseDefaultOffsetFields(icu::TimeZoneFormat *a1, uint64_t a2, int a3, int a4, _DWORD *a5)
{
  unsigned int v10 = *(unsigned __int16 *)(a2 + 8);
  int v11 = (__int16)v10;
  int v12 = v10 >> 5;
  if (v11 >= 0) {
    int v13 = v12;
  }
  else {
    int v13 = *(_DWORD *)(a2 + 12);
  }
  int v31 = 0;
  *a5 = 0;
  int v14 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(a1, (const icu::UnicodeString *)a2, a3, 1u, 2u, 0, 23, &v31);
  if (!v31) {
    return 0;
  }
  int v15 = v14;
  int v16 = v31 + a3;
  int v17 = v31 + a3 + 1;
  if (v17 >= v13
    || ((unsigned int v18 = *(unsigned __int16 *)(a2 + 8), (v18 & 0x8000u) == 0) ? (v19 = v18 >> 5) : (v19 = *(_DWORD *)(a2 + 12)),
        v19 <= v16
      ? (int v21 = 0xFFFF)
      : ((v18 & 2) != 0 ? (uint64_t v20 = a2 + 10) : (uint64_t v20 = *(void *)(a2 + 24)), v21 = *(unsigned __int16 *)(v20 + 2 * v16)),
        v21 != a4))
  {
    int v22 = 0;
LABEL_27:
    int v23 = 0;
    goto LABEL_28;
  }
  int v22 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(a1, (const icu::UnicodeString *)a2, v16 + 1, 2u, 2u, 0, 59, &v31);
  int v23 = v31;
  if (!v31) {
    goto LABEL_28;
  }
  int v16 = v17 + v31;
  int v24 = v17 + v31 + 1;
  if (v24 >= v13) {
    goto LABEL_27;
  }
  unsigned int v25 = *(unsigned __int16 *)(a2 + 8);
  unsigned int v26 = (v25 & 0x8000u) == 0 ? v25 >> 5 : *(_DWORD *)(a2 + 12);
  if (v26 <= v16)
  {
    int v28 = 0xFFFF;
  }
  else
  {
    uint64_t v27 = (v25 & 2) != 0 ? a2 + 10 : *(void *)(a2 + 24);
    int v28 = *(unsigned __int16 *)(v27 + 2 * v16);
  }
  if (v28 != a4) {
    goto LABEL_27;
  }
  int v30 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(a1, (const icu::UnicodeString *)a2, v16 + 1, 2u, 2u, 0, 59, &v31);
  if (v31) {
    int v16 = v24 + v31;
  }
  int v23 = 1000 * v30;
LABEL_28:
  if (v16 == a3) {
    return 0;
  }
  *a5 = v16 - a3;
  return (3600000 * v15 + 60000 * v22 + v23);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetWithAsciiDigits(int a1, int a2, int a3, int a4, icu::UnicodeString *this)
{
  LODWORD(v6) = a4;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1 >= 0) {
    unsigned int v9 = a1;
  }
  else {
    unsigned int v9 = -a1;
  }
  if (a1 >= 0) {
    __int16 v10 = 43;
  }
  else {
    __int16 v10 = 45;
  }
  LOWORD(v20[0]) = v10;
  icu::UnicodeString::unBogus((uint64_t)this);
  unsigned int v11 = *((unsigned __int16 *)this + 4);
  int v12 = (__int16)v11;
  unsigned int v13 = v11 >> 5;
  if (v12 >= 0) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = *((unsigned int *)this + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)this, 0, v14, (uint64_t)v20, 0, 1);
  v20[0] = v9 / 0x36EE80;
  v20[1] = v9 % 0x36EE80 / 0xEA60;
  _OWORD v20[2] = v9 % 0x36EE80 % 0xEA60 / 0x3E8;
  if ((int)v6 <= a3)
  {
LABEL_15:
    if ((v6 & 0x80000000) != 0) {
      return this;
    }
    goto LABEL_18;
  }
  uint64_t v6 = (int)v6;
  while (!v20[v6])
  {
    if (--v6 <= a3)
    {
      LODWORD(v6) = a3;
      goto LABEL_15;
    }
  }
  if ((v6 & 0x80000000) == 0)
  {
LABEL_18:
    unint64_t v15 = 0;
    uint64_t v16 = 4 * (v6 + 1);
    do
    {
      if (a2 && v15)
      {
        __int16 v19 = a2;
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v19, 0, 1);
      }
      int v17 = v20[v15 / 4];
      __int16 v19 = (__int16)v17 / 10 + 48;
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v19, 0, 1);
      __int16 v19 = v17 % 10 + 48;
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v19, 0, 1);
      v15 += 4;
    }
    while (v16 != v15);
  }
  return this;
}

const icu::UnicodeString *icu::TimeZoneFormat::unquote(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3)
{
  unsigned int v5 = *((unsigned __int16 *)this + 4);
  int v6 = (__int16)v5;
  int32_t v7 = v5 >> 5;
  if (v6 >= 0) {
    int32_t v8 = v7;
  }
  else {
    int32_t v8 = *((_DWORD *)this + 3);
  }
  if ((icu::UnicodeString::doIndexOf((uint64_t)this, 0x27u, 0, v8) & 0x80000000) == 0)
  {
    unint64_t v9 = 0;
    int v10 = 0;
    if (*((_WORD *)a2 + 4)) {
      __int16 v11 = 2;
    }
    else {
      __int16 v11 = *((_WORD *)a2 + 4) & 0x1F;
    }
    *((_WORD *)a2 + 4) = v11;
    while (1)
    {
      int v12 = *((__int16 *)this + 4);
      if (v12 < 0)
      {
        if ((uint64_t)v9 >= *((int *)this + 3)) {
          return a2;
        }
        unint64_t v13 = *((unsigned int *)this + 3);
      }
      else
      {
        if (v9 >= (unint64_t)*((unsigned __int16 *)this + 4) >> 5) {
          return a2;
        }
        unint64_t v13 = (unint64_t)*((unsigned __int16 *)this + 4) >> 5;
      }
      if (v13 <= v9) {
        break;
      }
      if ((v12 & 2) != 0) {
        uint64_t v14 = (char *)this + 10;
      }
      else {
        uint64_t v14 = (char *)*((void *)this + 3);
      }
      int v15 = *(unsigned __int16 *)&v14[2 * v9];
      if (v15 != 39) {
        goto LABEL_22;
      }
      if (!v10)
      {
        int v10 = 1;
        goto LABEL_24;
      }
      __int16 v18 = 39;
      uint64_t v16 = &v18;
LABEL_23:
      icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)v16, 0, 1);
      int v10 = 0;
LABEL_24:
      ++v9;
    }
    LOWORD(v15) = -1;
LABEL_22:
    __int16 v19 = v15;
    uint64_t v16 = &v19;
    goto LABEL_23;
  }
  icu::UnicodeString::copyFrom((UChar **)a2, (UChar **)this, 0);
  return a2;
}

uint64_t sub_18C9FA578(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_18C9FA5A8(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9FA5D0(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  if (*a4 > 0) {
    return 0;
  }
  int v6 = *(icu::UVector **)a3;
  if (*(void *)a3)
  {
    if ((!*(unsigned char *)(a3 + 14) || (int v6 = (icu::UVector *)icu::UVector::elementAt(v6, 0)) != 0)
      && *(_DWORD *)(a1 + 8) < a2)
    {
      *(void *)(a1 + 16) = v6;
      *(_DWORD *)(a1 + 8) = a2;
    }
  }
  return 1;
}

uint64_t *sub_18C9FA63C(icu::TimeZone *a1)
{
  sub_18CA0A25C(0xEu, (uint64_t)sub_18C9FA8E8);
  uint64_t result = icu::UMemory::operator new(v3, (icu::UMemory *)0x38, v2);
  if (result)
  {
    qword_1E9192958 = icu::TextTrieMap::TextTrieMap((uint64_t)result, 1, 0);
    uint64_t result = (uint64_t *)icu::TimeZone::createEnumeration(a1, v5);
    if (*(int *)a1 <= 0)
    {
      int v6 = result;
      while (1)
      {
        int32_t v7 = (icu::ZoneMeta *)(*(uint64_t (**)(uint64_t *, icu::TimeZone *))(*v6 + 56))(v6, a1);
        if (!v7) {
          break;
        }
        TimeZoneID = (void *)icu::ZoneMeta::findTimeZoneID(v7, v8);
        if (TimeZoneID) {
          icu::TextTrieMap::put(TimeZoneID, (UErrorCode *)a1, qword_1E9192958, TimeZoneID, v10);
        }
      }
      __int16 v11 = *(uint64_t (**)(uint64_t *))(*v6 + 8);
      return (uint64_t *)v11(v6);
    }
  }
  else
  {
    qword_1E9192958 = 0;
    *(_DWORD *)a1 = 7;
  }
  return result;
}

uint64_t *sub_18C9FA758(UErrorCode *a1)
{
  sub_18CA0A25C(0xEu, (uint64_t)sub_18C9FA8E8);
  uint64_t result = (uint64_t *)icu::TimeZone::createTimeZoneIDEnumeration(1, 0, 0, a1);
  unsigned int v4 = result;
  unsigned int v5 = (uint64_t *)*(unsigned int *)a1;
  if ((int)v5 <= 0)
  {
    uint64_t result = icu::UMemory::operator new(v5, (icu::UMemory *)0x38, v3);
    if (result)
    {
      qword_1E9192960 = icu::TextTrieMap::TextTrieMap((uint64_t)result, 1, 0);
      uint64_t v6 = (*(uint64_t (**)(uint64_t *, UErrorCode *))(*v4 + 56))(v4, a1);
      if (v6)
      {
        int32_t v8 = (icu::ZoneMeta *)v6;
        do
        {
          TimeZoneID = (void *)icu::ZoneMeta::findTimeZoneID(v8, v7);
          ShortID = (UChar *)icu::ZoneMeta::getShortID(v8, v10, v11);
          if (ShortID && TimeZoneID) {
            icu::TextTrieMap::put(ShortID, a1, qword_1E9192960, TimeZoneID, v13);
          }
          int32_t v8 = (icu::ZoneMeta *)(*(uint64_t (**)(uint64_t *, UErrorCode *))(*v4 + 56))(v4, a1);
        }
        while (v8);
      }
    }
    else
    {
      qword_1E9192960 = 0;
      *a1 = U_MEMORY_ALLOCATION_ERROR;
      if (!v4) {
        return result;
      }
    }
  }
  else if (!result)
  {
    return result;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t *))(*v4 + 8);

  return (uint64_t *)v14(v4);
}

uint64_t sub_18C9FA8E8()
{
  if (qword_1E9192958) {
    (*(void (**)(uint64_t))(*(void *)qword_1E9192958 + 8))(qword_1E9192958);
  }
  qword_1E9192958 = 0;
  atomic_store(0, &dword_1E91929B8);
  if (qword_1E9192960) {
    (*(void (**)(uint64_t))(*(void *)qword_1E9192960 + 8))(qword_1E9192960);
  }
  qword_1E9192960 = 0;
  atomic_store(0, &dword_1E91929C0);
  return 1;
}

icu::UnicodeString *sub_18C9FA988(icu::UVector **a1, unsigned int a2, icu::UnicodeString *a3)
{
  uint64_t v4 = icu::UVector::elementAt(*a1, a2);
  if (v4 && *(void *)(*(void *)v4 + 8))
  {
    uint64_t v6 = *(const UChar **)(*(void *)v4 + 8);
    icu::UnicodeString::setTo(a3, 1, &v6, -1);
  }
  else
  {
    icu::UnicodeString::setToBogus(a3);
  }
  return a3;
}

uint64_t sub_18C9FA9FC(void *a1)
{
  *a1 = &unk_1EDA53760;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return nullsub_17(a1);
}

void sub_18C9FAA7C(void *a1)
{
  uint64_t v1 = (void *)sub_18C9FA9FC(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9FAAA4(uint64_t a1, unint64_t a2, unsigned char *a3, int *a4)
{
  if (*a4 > 0) {
    return 0;
  }
  if (*(void *)a3)
  {
    int v7 = a2;
    if (a3[14])
    {
      int v9 = *(_DWORD *)(*(void *)a3 + 8);
      if (v9 < 1) {
        return 1;
      }
    }
    else
    {
      int v9 = 1;
    }
    unsigned int v10 = 0;
    do
    {
      __int16 v11 = *(_DWORD **)a3;
      if (a3[14]) {
        __int16 v11 = (_DWORD *)icu::UVector::elementAt(*(icu::UVector **)a3, v10);
      }
      if (!v11) {
        break;
      }
      if ((*(_DWORD *)(a1 + 8) & *v11) != 0)
      {
        if (!*(void *)(a1 + 16))
        {
          int v12 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, a2);
          if (!v12)
          {
            if (*a4 > 0) {
              return 0;
            }
            uint64_t result = 0;
LABEL_25:
            *a4 = 7;
            return result;
          }
          uint64_t v13 = icu::UVector::UVector((uint64_t)v12, (uint64_t)uprv_free, 0, a4);
          if (*a4 > 0)
          {
            (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
            return 0;
          }
          *(void *)(a1 + 16) = v13;
        }
        uint64_t result = (uint64_t)uprv_malloc(0x10uLL);
        if (!result) {
          goto LABEL_25;
        }
        *(void *)uint64_t result = v11;
        *(_DWORD *)(result + 8) = v7;
        *(_DWORD *)(result + 12) = 0;
        icu::UVector::adoptElement(*(uint64_t (***)(void *))(a1 + 16), (void *)result, (UErrorCode *)a4);
        if (*a4 > 0) {
          return 0;
        }
        if (*(_DWORD *)(a1 + 24) < v7) {
          *(_DWORD *)(a1 + 24) = v7;
        }
      }
    }
    while (v9 != ++v10);
  }
  return 1;
}

uint64_t sub_18C9FAC28(uint64_t a1, char **a2, UErrorCode *a3)
{
  *(void *)a1 = &unk_1EDA53788;
  icu::Locale::Locale((icu::Locale *)(a1 + 8), (uint64_t)a2);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  icu::UnicodeString::UnicodeString(a1 + 264, 0);
  icu::UnicodeString::UnicodeString(a1 + 336, 0);
  *(void *)(a1 + 400) = 0;
  icu::ZNStringPool::ZNStringPool((icu::ZNStringPool *)(a1 + 408), a3);
  icu::TextTrieMap::TextTrieMap(a1 + 424, 1, j__uprv_free_3);
  *(unsigned char *)(a1 + 480) = 0;
  sub_18C9FACE0((void *)a1, a2, (const icu::Locale *)a3);
  return a1;
}

void *sub_18C9FACE0(void *result, char **a2, const icu::Locale *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t result = icu::TimeZoneNames::createInstance((icu::TimeZoneNames *)a2, a3, (UErrorCode *)a3);
    *(void *)(v5 + 232) = result;
    if (*(int *)a3 <= 0)
    {
      memset(v32, 0, 64);
      unint64_t v29 = L"{0}";
      icu::UnicodeString::UnicodeString(v32, 1, &v29);
      memset(v31, 0, sizeof(v31));
      int v28 = L"{1} ({0})";
      icu::UnicodeString::UnicodeString(v31, 1, &v28);
      int v27 = 0;
      uint64_t v6 = ures_open("icudt74l-zone", a2[5], &v27);
      uint64_t v7 = ures_getByKeyWithFallback(v6, "zoneStrings", v6, (UErrorCode *)&v27);
      uint64_t v8 = v7;
      if (v27 <= 0)
      {
        StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v7, "regionFormat", 0, (UErrorCode *)&v27);
        if (v27 <= 0)
        {
          uint64_t v10 = (uint64_t)StringByKeyWithFallback;
          if (u_strlen(StringByKeyWithFallback) >= 1)
          {
            icu::UnicodeString::unBogus((uint64_t)v32);
            if (SLOWORD(v32[2]) >= 0) {
              uint64_t v11 = LOWORD(v32[2]) >> 5;
            }
            else {
              uint64_t v11 = v32[3];
            }
            icu::UnicodeString::doReplace((uint64_t)v32, 0, v11, v10, 0, 0xFFFFFFFFLL);
          }
        }
        int v27 = 0;
        int v12 = ures_getStringByKeyWithFallback(v8, "fallbackFormat", 0, (UErrorCode *)&v27);
        if (v27 <= 0)
        {
          uint64_t v13 = (uint64_t)v12;
          if (u_strlen(v12) >= 1)
          {
            icu::UnicodeString::unBogus((uint64_t)v31);
            if (SLOWORD(v31[2]) >= 0) {
              uint64_t v14 = LOWORD(v31[2]) >> 5;
            }
            else {
              uint64_t v14 = v31[3];
            }
            icu::UnicodeString::doReplace((uint64_t)v31, 0, v14, v13, 0, 0xFFFFFFFFLL);
          }
        }
      }
      ures_close(v8);
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(v5 + 256), (const icu::UnicodeString *)v32, 1, 1, 0, (UErrorCode *)a3);
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(v5 + 328), (const icu::UnicodeString *)v31, 2, 2, 0, (UErrorCode *)a3);
      if (*(int *)a3 < 1
        && (*(void *)(v5 + 400) = icu::LocaleDisplayNames::createInstance((uint64_t)a2, 0),
            *(void *)(v5 + 240) = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, (int *)a3),
            *(int *)a3 < 1)
        && (int v15 = uhash_open((uint64_t)sub_18C9FB278, (uint64_t)sub_18C9FB374, 0, (int *)a3),
            *(void *)(v5 + 248) = v15,
            *(int *)a3 < 1))
      {
        uhash_setKeyDeleter((uint64_t)v15, (uint64_t)uprv_free);
        int v18 = strlen((const char *)(v5 + 34));
        if (v18)
        {
          int Country = (char *)(v5 + 481);
          if (v18 > 3) {
            *int Country = 0;
          }
          else {
            int Country = strcpy(Country, (const char *)(v5 + 34));
          }
        }
        else
        {
          memset(&v30[1], 0, 56);
          v30[0] = (char *)&v30[1] + 5;
          LODWORD(v30[1]) = 40;
          v26[0] = 0;
          v26[1] = 0;
          icu::CharStringByteSink::CharStringByteSink(v26, (uint64_t)v30);
          ulocimp_addLikelySubtags(*(void *)(v5 + 48), v26, a3);
          icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v26);
          int Country = (char *)uloc_getCountry((uint64_t)v30[0], (char *)(v5 + 481), 4, (int *)a3);
          int v20 = *(_DWORD *)a3;
          if (v20 <= 0) {
            *(unsigned char *)(v5 + (int)Country + 481) = 0;
          }
          else {
            sub_18C9FB1B8(v5);
          }
          uint64_t v16 = (void *)BYTE4(v30[1]);
          if (BYTE4(v30[1])) {
            uprv_free(v30[0]);
          }
          if (v20 > 0) {
            goto LABEL_20;
          }
        }
        Default = (icu::ZoneMeta *)icu::TimeZone::createDefault((icu::TimeZone *)Country);
        CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(Default, v22);
        if (CanonicalCLDRID)
        {
          unsigned int v25 = CanonicalCLDRID;
          icu::UnicodeString::UnicodeString(v30, 1, &v25);
          sub_18C9FB3D0(v5, (uint64_t)v30);
          icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v30);
        }
        (*(void (**)(icu::ZoneMeta *))(*(void *)Default + 8))(Default);
      }
      else
      {
        sub_18C9FB1B8(v5);
      }
LABEL_20:
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v31);
      return icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v32);
    }
  }
  return result;
}

void *sub_18C9FB148(void *a1)
{
  *a1 = &unk_1EDA53788;
  uint64_t v2 = (icu::Locale *)(a1 + 1);
  sub_18C9FB1B8((uint64_t)a1);
  icu::TextTrieMap::~TextTrieMap((icu::TextTrieMap *)(a1 + 53));
  icu::ZNStringPool::~ZNStringPool((icu::ZNStringPool *)(a1 + 51));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 41));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 32));
  icu::Locale::~Locale(v2);
  return a1;
}

void sub_18C9FB1B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 400);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 232);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uhash_close(*(unsigned char **)(a1 + 240));
  uint64_t v4 = *(unsigned char **)(a1 + 248);

  uhash_close(v4);
}

void sub_18C9FB250(void *a1)
{
  uint64_t v1 = sub_18C9FB148(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18C9FB278(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  memset(v12, 0, sizeof(v12));
  icu::UnicodeString::UnicodeString((uint64_t)v12, *(void *)a1);
  __int16 v11 = 38;
  uint64_t v2 = icu::UnicodeString::doAppend((uint64_t)v12, (uint64_t)&v11, 0, 1);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = icu::UnicodeString::doAppend(v2, v3, 0, 0xFFFFFFFFLL);
  __int16 v11 = 35;
  uint64_t v5 = icu::UnicodeString::doAppend(v4, (uint64_t)&v11, 0, 1);
  if (*(unsigned char *)(a1 + 16)) {
    __int16 v6 = 76;
  }
  else {
    __int16 v6 = 83;
  }
  __int16 v11 = v6;
  icu::UnicodeString::doAppend(v5, (uint64_t)&v11, 0, 1);
  uint64_t v10 = v3;
  uint64_t v7 = icu::UnicodeString::doHashCode(&v10, (icu::UnicodeString *)v12);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v12);
  return v7;
}

BOOL sub_18C9FB374(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL result = 0;
  if (a1 && a2) {
    return *(void *)a1 == *(void *)a2
  }
        && *(void *)(a1 + 8) == *(void *)(a2 + 8)
        && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return result;
}

void *sub_18C9FB3D0(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  sub_18C9FC088(a1, a2);
  int v18 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v28 = 0;
  long long v27 = 0u;
  uint64_t v23 = 0;
  int v24 = &unk_1EDA47700;
  LOWORD(v25) = 2;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  __int16 v19 = &unk_1EDA47700;
  LOWORD(v20) = 2;
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, int *))(**(void **)(a1 + 232) + 48))(*(void *)(a1 + 232), a2, &v18);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v4 + 56))(v4, &v18);
  if (v5) {
    BOOL v6 = v18 <= 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = (UChar **)v5;
    do
    {
      (*(void (**)(void, UChar **, uint64_t, void **))(**(void **)(a1 + 232) + 64))(*(void *)(a1 + 232), v7, a1 + 481, &v24);
      unsigned int v8 = *(unsigned __int16 *)(a2 + 8);
      if (v8)
      {
        if ((v25 & 1) == 0) {
          goto LABEL_19;
        }
      }
      else
      {
        int v9 = (__int16)v8;
        int v10 = v8 >> 5;
        if (v9 >= 0) {
          int v11 = v10;
        }
        else {
          int v11 = *(_DWORD *)(a2 + 12);
        }
        if ((v25 & 0x8000u) == 0) {
          int v12 = (unsigned __int16)v25 >> 5;
        }
        else {
          int v12 = DWORD1(v25);
        }
        if ((v25 & 1) != 0
          || v11 != v12
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v24, v11))
        {
LABEL_19:
          for (uint64_t i = 0; i != 2; ++i)
          {
            (*(void (**)(void, UChar **, void, void **))(**(void **)(a1 + 232) + 72))(*(void *)(a1 + 232), v7, dword_18CA97A08[i], &v19);
            if ((unsigned __int16)v20 >= 0x20u) {
              sub_18C9FC574(a1, a2, v7, i == 0, (const icu::UnicodeString *)&v19);
            }
          }
        }
      }
      uint64_t v7 = (UChar **)(*(uint64_t (**)(uint64_t, int *))(*(void *)v4 + 56))(v4, &v18);
      if (v7) {
        BOOL v14 = v18 < 1;
      }
      else {
        BOOL v14 = 0;
      }
    }
    while (v14);
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v19);
  return icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v24);
}

icu::UnicodeString *sub_18C9FB69C(uint64_t a1, icu::ZoneMeta *a2, int a3, icu::UnicodeString *this, double a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  icu::UnicodeString::setToBogus(this);
  if (a3 == 4 || a3 == 2)
  {
    sub_18C9FB8A8(a1, a2, a3, this, a5);
    if (*((unsigned __int16 *)this + 4) <= 0x1Fu)
    {
      CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v13);
      if (CanonicalCLDRID)
      {
        int v17 = CanonicalCLDRID;
        icu::UnicodeString::UnicodeString(v19, 1, &v17);
        sub_18C9FB7EC(a1, (uint64_t)v19, this);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v19);
      }
    }
  }
  else if (a3 == 1)
  {
    int v11 = icu::ZoneMeta::getCanonicalCLDRID(a2, v10);
    if (v11)
    {
      int v18 = v11;
      icu::UnicodeString::UnicodeString(v19, 1, &v18);
      sub_18C9FB7EC(a1, (uint64_t)v19, this);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v19);
    }
  }
  return this;
}

icu::UnicodeString *sub_18C9FB7EC(uint64_t a1, uint64_t a2, icu::UnicodeString *this)
{
  if (*(unsigned __int16 *)(a2 + 8) > 0x1Fu
    && (umtx_lock((atomic_ullong *)&unk_1E91929D8),
        BOOL v6 = sub_18C9FC088(a1, a2),
        umtx_unlock((std::mutex **)&unk_1E91929D8),
        v6))
  {
    uint64_t v7 = u_strlen(v6);
    icu::UnicodeString::unBogus((uint64_t)this);
    unsigned int v8 = *((unsigned __int16 *)this + 4);
    int v9 = (__int16)v8;
    unsigned int v10 = v8 >> 5;
    if (v9 >= 0) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = *((unsigned int *)this + 3);
    }
    icu::UnicodeString::doReplace((uint64_t)this, 0, v11, (uint64_t)v6, 0, v7);
  }
  else
  {
    icu::UnicodeString::setToBogus(this);
  }
  return this;
}

icu::UnicodeString *sub_18C9FB8A8(uint64_t a1, icu::ZoneMeta *a2, int a3, icu::UnicodeString *this, double a5)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  icu::UnicodeString::setToBogus(this);
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v10);
  if (CanonicalCLDRID)
  {
    memset(v60, 0, 64);
    int v32 = CanonicalCLDRID;
    icu::UnicodeString::UnicodeString(v60, 1, &v32);
    if (a3 == 2) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = 8;
    }
    (*(void (**)(void, unsigned char *, uint64_t, icu::UnicodeString *))(**(void **)(a1 + 232) + 80))(*(void *)(a1 + 232), v60, v12, this);
    uint64_t v13 = (void *)*((unsigned __int16 *)this + 4);
    if (v13 > 0x1F) {
      goto LABEL_43;
    }
    memset(v59, 0, sizeof(v59));
    memset(v58, 0, sizeof(v58));
    icu::UnicodeString::UnicodeString(v58, v59, 0, 32);
    (*(void (**)(void, unsigned char *, _WORD *, double))(**(void **)(a1 + 232) + 56))(*(void *)(a1 + 232), v60, v58, a5);
    BOOL v14 = (void *)v58[4];
    if (v58[4] < 0x20u) {
      goto LABEL_42;
    }
    uint64_t v31 = 0;
    int v30 = 0;
    memset(v57, 0, sizeof(v57));
    (*(void (**)(icu::ZoneMeta *, void, uint64_t *, int *, char *, double))(*(void *)a2 + 48))(a2, 0, &v31, &v30, (char *)&v31 + 4, a5);
    BOOL v14 = (void *)HIDWORD(v31);
    if (SHIDWORD(v31) > 0) {
      goto LABEL_42;
    }
    if (!v30)
    {
      int v15 = (uint64_t *)(*(uint64_t (**)(icu::ZoneMeta *))(*(void *)a2 + 96))(a2);
      uint64_t v16 = *v15;
      {
        long long v37 = 0u;
        long long v38 = 0u;
        icu::TimeZoneTransition::TimeZoneTransition(&v37);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, long long *, double))(*v15 + 120))(v15, 1, &v37, a5)
          && a5 - icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)&v37) < 1.58976e10
          && (int v17 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)&v37),
              icu::TimeZoneRule::getDSTSavings(v17)))
        {
          BOOL v18 = 0;
        }
        else
        {
          long long v53 = 0u;
          long long v54 = 0u;
          icu::TimeZoneTransition::TimeZoneTransition(&v53);
          if ((*(unsigned int (**)(uint64_t *, void, long long *, double))(*v15 + 112))(v15, 0, &v53, a5)
            && icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)&v53) - a5 < 1.58976e10)
          {
            __int16 v19 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)&v53);
            BOOL v18 = icu::TimeZoneRule::getDSTSavings(v19) == 0;
          }
          else
          {
            BOOL v18 = 1;
          }
          icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)&v53);
        }
        icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)&v37);
      }
      else
      {
        (*(void (**)(uint64_t *, void, uint64_t *, int *, char *, double))(v16 + 48))(v15, 0, &v31, &v30, (char *)&v31 + 4, a5 + -1.58976e10);
        BOOL v18 = 0;
        if (!v30)
        {
          (*(void (**)(uint64_t *, void, uint64_t *, int *, char *, double))(*v15 + 48))(v15, 0, &v31, &v30, (char *)&v31 + 4, a5 + 1.58976e10);
          BOOL v18 = v30 == 0;
        }
        if (SHIDWORD(v31) >= 1)
        {
          (*(void (**)(uint64_t *))(*v15 + 8))(v15);
          goto LABEL_42;
        }
      }
      (*(void (**)(uint64_t *))(*v15 + 8))(v15);
      if (v18)
      {
        long long v55 = 0u;
        long long v56 = 0u;
        if (a3 == 2) {
          uint64_t v20 = 2;
        }
        else {
          uint64_t v20 = 16;
        }
        long long v53 = 0uLL;
        long long v54 = 0uLL;
        icu::UnicodeString::UnicodeString(&v53, v57, 0, 128);
        (*(void (**)(void, unsigned char *, uint64_t, long long *, double))(**(void **)(a1 + 232) + 96))(*(void *)(a1 + 232), v60, v20, &v53, a5);
        long long v21 = (void *)WORD4(v53);
        if (WORD4(v53) >= 0x20u)
        {
          icu::UnicodeString::copyFrom((UChar **)this, (UChar **)&v53, 0);
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          icu::UnicodeString::UnicodeString(&v33, &v37, 0, 128);
          (*(void (**)(void, _WORD *, uint64_t, long long *))(**(void **)(a1 + 232) + 72))(*(void *)(a1 + 232), v58, v12, &v33);
          if (!sub_18C9FC424((uint64_t)&v53, (uint64_t)&v33, 0)) {
            icu::UnicodeString::setToBogus(this);
          }
          icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v33);
        }
        icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v53);
      }
    }
    BOOL v14 = (void *)*((unsigned __int16 *)this + 4);
    if (v14 > 0x1F)
    {
LABEL_42:
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v58);
LABEL_43:
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v60);
      return this;
    }
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    icu::UnicodeString::UnicodeString(&v37, v57, 0, 128);
    (*(void (**)(void, _WORD *, uint64_t, long long *))(**(void **)(a1 + 232) + 72))(*(void *)(a1 + 232), v58, v12, &v37);
    uint64_t v23 = (void *)WORD4(v37);
    if (WORD4(v37) < 0x20u)
    {
LABEL_41:
      icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v37);
      goto LABEL_42;
    }
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    icu::UnicodeString::UnicodeString(&v33, &v53, 0, 32);
    (*(void (**)(void, _WORD *, uint64_t, long long *))(**(void **)(a1 + 232) + 64))(*(void *)(a1 + 232), v58, a1 + 481, &v33);
    if (WORD4(v33) >= 0x20u && sub_18C8A1B58((uint64_t)&v33, (uint64_t)v60))
    {
      uint64_t TimeZone = icu::TimeZone::createTimeZone((UChar **)&v33, v24);
      int v28 = 0;
      int v29 = 0;
      (*(void (**)(void *, uint64_t, int *, int *, char *, double))(*(void *)TimeZone + 48))(TimeZone, 1, &v29, &v28, (char *)&v31 + 4, (double)(int)v31 + a5 + (double)v30);
      (*(void (**)(void *))(*(void *)TimeZone + 8))(TimeZone);
      long long v26 = (void *)HIDWORD(v31);
      if (SHIDWORD(v31) > 0)
      {
LABEL_40:
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v33);
        goto LABEL_41;
      }
      if (v31 != v29 || v30 != v28)
      {
        sub_18C9FC488(a1, (uint64_t)v60, (uint64_t)v58, a3 == 2, (unsigned __int16 *)&v37, this);
        goto LABEL_40;
      }
    }
    icu::UnicodeString::copyFrom((UChar **)this, (UChar **)&v37, 0);
    goto LABEL_40;
  }
  return this;
}

UChar *sub_18C9FC088(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(unsigned __int16 *)(a2 + 8);
  int v3 = (__int16)v2;
  int v4 = v2 >> 5;
  if (v3 < 0) {
    int v4 = *(_DWORD *)(a2 + 12);
  }
  if (v4 > 128) {
    return 0;
  }
  UErrorCode v22 = U_ZERO_ERROR;
  __int16 v39 = 0;
  memset(v38, 0, sizeof(v38));
  long long v21 = (UChar *)v38;
  *((_WORD *)v38 + (int)icu::UnicodeString::extract(a2, &v21, 129, (int *)&v22)) = 0;
  unsigned int v8 = (void *)uhash_get(*(void *)(a1 + 240), (uint64_t)v38);
  if (!v8)
  {
    long long v34 = 0u;
    uint64_t v37 = 0;
    long long v36 = 0u;
    long long v35 = 0u;
    uint64_t v32 = 0;
    long long v33 = &unk_1EDA47700;
    LOWORD(v34) = 2;
    long long v29 = 0u;
    long long v31 = 0u;
    long long v30 = 0u;
    int v28 = &unk_1EDA47700;
    LOWORD(v29) = 2;
    char v20 = 0;
    icu::ZoneMeta::getCanonicalCountry((int32_t *)a2, (const icu::UnicodeString *)&v28, (UErrorCode *)&v20, v9);
    if ((unsigned __int16)v29 < 0x20u) {
      goto LABEL_17;
    }
    if (v20)
    {
      *(_DWORD *)__int16 v19 = 0;
      uint64_t v11 = (v29 & 0x8000u) == 0 ? (unsigned __int16)v29 >> 5 : DWORD1(v29);
      v19[(int)icu::UnicodeString::extract((uint64_t)&v28, 0, v11, v19, 4)] = 0;
      long long v24 = 0u;
      uint64_t v27 = 0;
      long long v26 = 0u;
      long long v25 = 0u;
      uint64_t v23 = &unk_1EDA47700;
      LOWORD(v24) = 2;
      (*(void (**)(void, char *, void **))(**(void **)(a1 + 400) + 88))(*(void *)(a1 + 400), v19, &v23);
    }
    else
    {
      long long v24 = 0u;
      uint64_t v27 = 0;
      long long v26 = 0u;
      long long v25 = 0u;
      uint64_t v23 = &unk_1EDA47700;
      LOWORD(v24) = 2;
      (*(void (**)(void, uint64_t, void **))(**(void **)(a1 + 232) + 88))(*(void *)(a1 + 232), a2, &v23);
    }
    icu::SimpleFormatter::format((icu::SimpleFormatter *)(a1 + 256), (const icu::UnicodeString *)&v23, (icu::UnicodeString *)&v33, &v22);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v23);
    unint64_t v13 = v22;
    if (v22 <= U_ZERO_ERROR)
    {
LABEL_17:
      if ((unsigned __int16)v34 < 0x20u) {
        uint64_t v5 = 0;
      }
      else {
        uint64_t v5 = icu::ZNStringPool::get((icu::ZNStringPool *)(a1 + 408), (const icu::UnicodeString *)&v33, &v22);
      }
      unint64_t v13 = v22;
      if (v22 > U_ZERO_ERROR) {
        goto LABEL_24;
      }
      uint64_t TimeZoneID = icu::ZoneMeta::findTimeZoneID((icu::ZoneMeta *)a2, v10);
      uint64_t v15 = *(void *)(a1 + 240);
      if (!v5)
      {
        uhash_put(v15, TimeZoneID, (uint64_t)&unk_18CA97A04, (int *)&v22);
        goto LABEL_24;
      }
      uhash_put(v15, TimeZoneID, (uint64_t)v5, (int *)&v22);
      unint64_t v13 = v22;
      if (v22 <= U_ZERO_ERROR)
      {
        BOOL v18 = uprv_malloc(0x10uLL);
        if (v18)
        {
          *(_DWORD *)BOOL v18 = 1;
          v18[1] = TimeZoneID;
          icu::TextTrieMap::put(v5, &v22, a1 + 424, v18, (uint64_t *)1);
        }
        goto LABEL_24;
      }
    }
    uint64_t v5 = 0;
LABEL_24:
    icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v28);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v33);
    return v5;
  }
  if (v8 == &unk_18CA97A04) {
    return 0;
  }
  else {
    return (UChar *)v8;
  }
}

uint64_t sub_18C9FC424(uint64_t a1, uint64_t a2, __int16 a3)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0) {
    int v5 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v5 = v4 >> 5;
  }
  unsigned int v6 = *(unsigned __int16 *)(a2 + 8);
  if (v6) {
    return (v4 & 1) == 0;
  }
  if ((v6 & 0x8000u) == 0) {
    int v7 = v6 >> 5;
  }
  else {
    int v7 = *(_DWORD *)(a2 + 12);
  }
  if ((v6 & 2) != 0) {
    uint64_t v8 = a2 + 10;
  }
  else {
    uint64_t v8 = *(void *)(a2 + 24);
  }
  return icu::UnicodeString::doCaseCompare(a1, 0, v5, v8, v7 & (v7 >> 31), v7 & ~(v7 >> 31), a3);
}

icu::UnicodeString *sub_18C9FC488(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int16 *a5, icu::UnicodeString *this)
{
  icu::UnicodeString::setToBogus(this);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u && *(unsigned __int16 *)(a3 + 8) >= 0x20u && a5[4] >= 0x20u)
  {
    umtx_lock((atomic_ullong *)&unk_1E91929D8);
    uint64_t v12 = (const UChar *)sub_18C9FC574(a1, a2, (UChar **)a3, a4, (const icu::UnicodeString *)a5);
    umtx_unlock((std::mutex **)&unk_1E91929D8);
    if (v12)
    {
      BOOL v14 = v12;
      icu::UnicodeString::setTo(this, 1, &v14, -1);
    }
    else
    {
      icu::UnicodeString::setToBogus(this);
    }
  }
  return this;
}

void *sub_18C9FC574(uint64_t a1, uint64_t a2, UChar **a3, int a4, const icu::UnicodeString *a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v30 = icu::ZoneMeta::findTimeZoneID((icu::ZoneMeta *)a2, (const icu::UnicodeString *)a2);
  *((void *)&v30 + 1) = icu::ZoneMeta::findMetaZoneID(a3, v10);
  uint64_t v31 = a4;
  uint64_t v12 = (void *)uhash_get(*(void *)(a1 + 248), (uint64_t)&v30);
  if (v12) {
    return v12;
  }
  long long v43 = 0u;
  uint64_t v46 = 0;
  long long v45 = 0u;
  long long v44 = 0u;
  LOWORD(v43) = 2;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v41 = 0;
  long long v42 = (UChar *)&unk_1EDA47700;
  long long v40 = 0u;
  uint64_t v37 = &unk_1EDA47700;
  LOWORD(v38) = 2;
  icu::ZoneMeta::getCanonicalCountry((int32_t *)a2, (const icu::UnicodeString *)&v37, 0, v11);
  if ((unsigned __int16)v38 < 0x20u)
  {
    (*(void (**)(void, uint64_t, UChar **))(**(void **)(a1 + 232) + 88))(*(void *)(a1 + 232), a2, &v42);
    if ((unsigned __int16)v43 <= 0x1Fu) {
      icu::UnicodeString::copyFrom(&v42, (UChar **)a2, 0);
    }
    goto LABEL_22;
  }
  UErrorCode v29 = U_ZERO_ERROR;
  if ((v38 & 0x8000u) == 0) {
    uint64_t v13 = (unsigned __int16)v38 >> 5;
  }
  else {
    uint64_t v13 = DWORD1(v38);
  }
  *((unsigned char *)&v29 + (int)icu::UnicodeString::extract((uint64_t)&v37, 0, v13, (char *)&v29, 4)) = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v36 = 0;
  long long v35 = 0u;
  uint64_t v32 = &unk_1EDA47700;
  LOWORD(v33) = 2;
  (*(void (**)(void, UChar **, UErrorCode *, void **))(**(void **)(a1 + 232) + 64))(*(void *)(a1 + 232), a3, &v29, &v32);
  unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
  if ((v14 & 1) == 0)
  {
    int v15 = (__int16)v14;
    int v16 = v14 >> 5;
    if (v15 >= 0) {
      int v17 = v16;
    }
    else {
      int v17 = *(_DWORD *)(a2 + 12);
    }
    if ((v33 & 0x8000u) == 0) {
      int v18 = (unsigned __int16)v33 >> 5;
    }
    else {
      int v18 = DWORD1(v33);
    }
    if ((v33 & 1) == 0
      && v17 == v18
      && icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v32, v17))
    {
      goto LABEL_16;
    }
LABEL_20:
    (*(void (**)(void, uint64_t, UChar **))(**(void **)(a1 + 232) + 88))(*(void *)(a1 + 232), a2, &v42);
    goto LABEL_21;
  }
  if ((v33 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_16:
  (*(void (**)(void, UErrorCode *, UChar **))(**(void **)(a1 + 400) + 88))(*(void *)(a1 + 400), &v29, &v42);
LABEL_21:
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v32);
LABEL_22:
  UErrorCode v29 = U_ZERO_ERROR;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v36 = 0;
  long long v35 = 0u;
  uint64_t v32 = &unk_1EDA47700;
  LOWORD(v33) = 2;
  icu::SimpleFormatter::format((icu::SimpleFormatter *)(a1 + 328), (const icu::UnicodeString *)&v42, a5, (icu::UnicodeString *)&v32, &v29);
  uint64_t v12 = 0;
  unint64_t v20 = v29;
  if (v29 <= U_ZERO_ERROR)
  {
    uint64_t v12 = icu::ZNStringPool::get((icu::ZNStringPool *)(a1 + 408), (const icu::UnicodeString *)&v32, &v29);
    unint64_t v20 = v29;
    if (v29 <= U_ZERO_ERROR)
    {
      long long v24 = uprv_malloc(0x18uLL);
      if (v24)
      {
        long long v25 = v24;
        _OWORD *v24 = v30;
        *((unsigned char *)v24 + 16) = v31;
        uhash_put(*(void *)(a1 + 248), (uint64_t)v24, (uint64_t)v12, (int *)&v29);
        if (v29 < U_ILLEGAL_ARGUMENT_ERROR)
        {
          long long v26 = uprv_malloc(0x10uLL);
          if (v26)
          {
            if (a4) {
              int v27 = 2;
            }
            else {
              int v27 = 4;
            }
            *(_DWORD *)long long v26 = v27;
            int v28 = (uint64_t *)v30;
            v26[1] = v30;
            icu::TextTrieMap::put(v12, &v29, a1 + 424, v26, v28);
          }
        }
        else
        {
          uprv_free(v25);
        }
      }
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)&v32);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v37);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v42);
  return v12;
}

uint64_t sub_18C9FC988(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, UChar **this, _DWORD *a6, UErrorCode *a7)
{
  int v9 = this;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)this);
  uint64_t v14 = 0;
  if (*(int *)a7 <= 0)
  {
    int v15 = (icu::TimeZoneNames::MatchInfoCollection *)sub_18C9FCD9C(a1, a2, a3, a4);
    if (*(int *)a7 > 0) {
      return 0;
    }
    int v16 = (icu::UVector **)v15;
    long long v43 = 0u;
    uint64_t v46 = 0;
    long long v45 = 0u;
    long long v44 = 0u;
    long long v42 = (UChar *)&unk_1EDA47700;
    LOWORD(v43) = 2;
    if (v15)
    {
      long long v35 = v9;
      long long v38 = 0uLL;
      uint64_t v41 = 0;
      long long v40 = 0uLL;
      long long v39 = 0uLL;
      uint64_t v37 = &unk_1EDA47700;
      LOWORD(v38) = 2;
      if ((int)icu::TimeZoneNames::MatchInfoCollection::size(v15) >= 1)
      {
        signed int v17 = 0;
        uint64_t v18 = 0;
        uint64_t v36 = 0;
        while (1)
        {
          uint64_t MatchLengthAt = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v16, v17);
          if ((int)MatchLengthAt <= (int)v18)
          {
            uint64_t v14 = v18;
          }
          else
          {
            uint64_t v14 = MatchLengthAt;
            if (!icu::TimeZoneNames::MatchInfoCollection::getTimeZoneIDAt(v16, v17, (icu::UnicodeString *)&v42)&& icu::TimeZoneNames::MatchInfoCollection::getMetaZoneIDAt(v16, v17, (icu::UnicodeString *)&v37))
            {
              (*(void (**)(void, void **, uint64_t, UChar **))(**(void **)(a1 + 232) + 64))(*(void *)(a1 + 232), &v37, a1 + 481, &v42);
            }
            int NameTypeAt = icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(v16, v17);
            if (*(int *)a7 > 0) {
              goto LABEL_25;
            }
            if (NameTypeAt > 15)
            {
              if (NameTypeAt == 16)
              {
LABEL_20:
                uint64_t v36 = 0x100000001;
                goto LABEL_21;
              }
              if (NameTypeAt == 32)
              {
LABEL_19:
                HIDWORD(v36) = 2;
                goto LABEL_21;
              }
            }
            else
            {
              if (NameTypeAt == 2) {
                goto LABEL_20;
              }
              if (NameTypeAt == 4) {
                goto LABEL_19;
              }
            }
            HIDWORD(v36) = 0;
          }
LABEL_21:
          ++v17;
          uint64_t v18 = v14;
          if (v17 >= (int)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v16)) {
            goto LABEL_25;
          }
        }
      }
      uint64_t v36 = 0;
      uint64_t v14 = 0;
LABEL_25:
      (*((void (**)(icu::UVector **))*v16 + 1))(v16);
      long long v21 = (void *)*(unsigned int *)a7;
      if ((int)v21 > 0)
      {
        uint64_t v14 = 0;
LABEL_51:
        icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v37);
LABEL_52:
        icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v42);
        return v14;
      }
      unsigned int v22 = *(unsigned __int16 *)(a2 + 8);
      int v23 = (__int16)v22;
      unsigned int v24 = v22 >> 5;
      if (v23 < 0) {
        unsigned int v24 = *(_DWORD *)(a2 + 12);
      }
      if (v14 == v24 - a3 && v36 == 0)
      {
        icu::UnicodeString::copyFrom(v35, &v42, 0);
        long long v21 = (void *)HIDWORD(v36);
        *a6 = HIDWORD(v36);
        goto LABEL_51;
      }
      icu::UnicodeString::~UnicodeString((void *)v36, (icu::UnicodeString *)&v37);
      int v9 = v35;
    }
    else
    {
      uint64_t v14 = 0;
      HIDWORD(v36) = 0;
    }
    long long v26 = sub_18C9FCDE8(a1, a2, a3, a4, a7);
    int v27 = (void *)*(unsigned int *)a7;
    if ((int)v27 <= 0)
    {
      int v28 = (icu::UVector **)v26;
      if (v26)
      {
        UErrorCode v29 = (icu::UVector *)*v26;
        if (*v28)
        {
          signed int v30 = 0;
          while (v30 < *((_DWORD *)v29 + 2))
          {
            uint64_t v31 = icu::UVector::elementAt(v29, v30);
            if (v31) {
              int v32 = *(_DWORD *)(v31 + 8);
            }
            else {
              int v32 = -1;
            }
            if (v32 >= (int)v14)
            {
              uint64_t v33 = icu::UVector::elementAt(*v28, v30);
              if (v33) {
                uint64_t v14 = *(unsigned int *)(v33 + 8);
              }
              else {
                uint64_t v14 = 0xFFFFFFFFLL;
              }
              sub_18C9FA988(v28, v30, (icu::UnicodeString *)&v42);
              HIDWORD(v36) = 0;
            }
            ++v30;
            UErrorCode v29 = *v28;
            if (!*v28) {
              goto LABEL_55;
            }
          }
          (*(void (**)(icu::UVector *))(*(void *)v29 + 8))(v29);
        }
LABEL_55:
        icu::UMemory::operator delete(v28);
      }
      if ((int)v14 >= 1)
      {
        *a6 = HIDWORD(v36);
        icu::UnicodeString::copyFrom(v9, &v42, 0);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    goto LABEL_52;
  }
  return v14;
}

uint64_t sub_18C9FCD9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    return 0;
  }
  unsigned int v4 = (a4 << 30 >> 31) & 3;
  if ((a4 & 4) != 0) {
    uint64_t v5 = v4 | 0x18;
  }
  else {
    uint64_t v5 = v4;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 232) + 120))(*(void *)(a1 + 232), a2, a3, v5);
}

uint64_t *sub_18C9FCDE8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, UErrorCode *a5)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  v28[0] = (uint64_t (**)(void, void, void *, int *))&unk_1EDA53760;
  v28[1] = (uint64_t (**)(void, void, void *, int *))a4;
  umtx_lock((atomic_ullong *)&unk_1E91929D8);
  icu::TextTrieMap::search((icu::TextTrieMap *)(a1 + 424), a2, a3, v28, a5);
  umtx_unlock((std::mutex **)&unk_1E91929D8);
  unsigned int v10 = 0;
  if (*(int *)a5 > 0) {
    goto LABEL_2;
  }
  uint64_t v12 = v29;
  unint64_t v13 = v30;
  uint64_t v29 = 0;
  LODWORD(v30) = 0;
  if (v12)
  {
    unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
    int v15 = (__int16)v14;
    unsigned int v16 = v14 >> 5;
    if (v15 < 0) {
      unsigned int v16 = *(_DWORD *)(a2 + 12);
    }
    if (v13 == v16 - a3 || (unint64_t v13 = *(unsigned __int8 *)(a1 + 480), *(unsigned char *)(a1 + 480)))
    {
      signed int v17 = icu::UMemory::operator new((uint64_t *)v13, (icu::UMemory *)8, v9);
      unsigned int v10 = v17;
      if (v17)
      {
        *signed int v17 = v12;
      }
      else
      {
        *a5 = U_MEMORY_ALLOCATION_ERROR;
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      goto LABEL_2;
    }
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  umtx_lock((atomic_ullong *)&unk_1E91929D8);
  if (!*(unsigned char *)(a1 + 480))
  {
    uint64_t TimeZoneIDEnumeration = icu::TimeZone::createTimeZoneIDEnumeration(1, 0, 0, a5);
    uint64_t v19 = TimeZoneIDEnumeration;
    if (*(int *)a5 <= 0)
    {
      uint64_t v20 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)TimeZoneIDEnumeration + 56))(TimeZoneIDEnumeration, a5);
      if (v20) {
        BOOL v21 = *a5 <= U_ZERO_ERROR;
      }
      else {
        BOOL v21 = 0;
      }
      if (v21)
      {
        uint64_t v22 = v20;
        do
        {
          sub_18C9FB3D0(a1, v22);
          uint64_t v22 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)v19 + 56))(v19, a5);
          if (v22) {
            BOOL v23 = *a5 < U_ILLEGAL_ARGUMENT_ERROR;
          }
          else {
            BOOL v23 = 0;
          }
        }
        while (v23);
      }
      goto LABEL_27;
    }
    if (TimeZoneIDEnumeration)
    {
LABEL_27:
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      if (*(int *)a5 <= 0) {
        *(unsigned char *)(a1 + 480) = 1;
      }
    }
  }
  umtx_unlock((std::mutex **)&unk_1E91929D8);
  if (*(int *)a5 <= 0)
  {
    umtx_lock((atomic_ullong *)&unk_1E91929D8);
    icu::TextTrieMap::search((icu::TextTrieMap *)(a1 + 424), a2, a3, v28, a5);
    umtx_unlock((std::mutex **)&unk_1E91929D8);
    unsigned int v10 = 0;
    uint64_t v25 = v29;
    long long v26 = (uint64_t *)v30;
    uint64_t v29 = 0;
    LODWORD(v30) = 0;
    if (v25 && (int)v26 >= 1)
    {
      int v27 = icu::UMemory::operator new(v26, (icu::UMemory *)8, v24);
      unsigned int v10 = v27;
      if (v27)
      {
        *int v27 = v25;
      }
      else
      {
        *a5 = U_MEMORY_ALLOCATION_ERROR;
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
    }
  }
  else
  {
    unsigned int v10 = 0;
  }
LABEL_2:
  sub_18C9FA9FC(v28);
  return v10;
}

void *icu::TimeZoneGenericNames::TimeZoneGenericNames(void *this)
{
  *this = &unk_1EDA537A8;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1EDA537A8;
  this[1] = 0;
  return this;
}

void icu::TimeZoneGenericNames::~TimeZoneGenericNames(icu::TimeZoneGenericNames *this)
{
  *(void *)this = &unk_1EDA537A8;
  umtx_lock((atomic_ullong *)&unk_1E9192A28);
  --*(_DWORD *)(*((void *)this + 1) + 8);
  umtx_unlock((std::mutex **)&unk_1E9192A28);
}

{
  *(void *)this = &unk_1EDA537A8;
  umtx_lock((atomic_ullong *)&unk_1E9192A28);
  --*(_DWORD *)(*((void *)this + 1) + 8);
  umtx_unlock((std::mutex **)&unk_1E9192A28);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDA537A8;
  umtx_lock((atomic_ullong *)&unk_1E9192A28);
  --*(_DWORD *)(*((void *)this + 1) + 8);
  umtx_unlock((std::mutex **)&unk_1E9192A28);

  icu::UMemory::operator delete(this);
}

uint64_t *icu::TimeZoneGenericNames::createInstance(icu::TimeZoneGenericNames *this, UErrorCode *a2, UErrorCode *a3)
{
  int v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0) {
    return 0;
  }
  unsigned int v6 = icu::UMemory::operator new(v3, (icu::UMemory *)0x10, (unint64_t)a2);
  int v7 = v6;
  if (!v6)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return v7;
  }
  uint64_t *v6 = (uint64_t)&unk_1EDA537A8;
  v6[1] = 0;
  umtx_lock((atomic_ullong *)&unk_1E9192A28);
  if (byte_1E91929C8)
  {
LABEL_6:
    if (*(int *)a2 >= 1) {
      goto LABEL_7;
    }
    unsigned int v10 = (const char *)*((void *)this + 5);
    uint64_t v11 = uhash_get(qword_1E91929D0, (uint64_t)v10);
    if (v11)
    {
      unsigned int v14 = (void *)v11;
      ++*(_DWORD *)(v11 + 8);
      *(double *)(v11 + 16) = uprv_getUTCtime();
LABEL_13:
      int v15 = dword_1EB20BC70++;
      if (v15 > 98)
      {
        int v26 = -1;
        double UTCtime = uprv_getUTCtime();
        uint64_t v17 = uhash_nextElement((uint64_t *)qword_1E91929D0, &v26);
        if (v17)
        {
          uint64_t v18 = v17;
          do
          {
            uint64_t v19 = *(void *)(v18 + 8);
            if (*(int *)(v19 + 8) <= 0 && UTCtime - *(double *)(v19 + 16) > 180000.0) {
              uhash_removeElement(qword_1E91929D0, (_DWORD *)v18);
            }
            uint64_t v18 = uhash_nextElement((uint64_t *)qword_1E91929D0, &v26);
          }
          while (v18);
        }
        dword_1EB20BC70 = 0;
      }
      umtx_unlock((std::mutex **)&unk_1E9192A28);
      if (v14)
      {
        v7[1] = (uint64_t)v14;
        return v7;
      }
      (*(void (**)(uint64_t *))(*v7 + 8))(v7);
      return 0;
    }
    uint64_t v20 = icu::UMemory::operator new(v13, (icu::UMemory *)0x1E8, v12);
    if (!v20)
    {
      unsigned int v14 = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_13;
    }
    BOOL v21 = v20;
    sub_18C9FAC28((uint64_t)v20, (char **)this, a2);
    if (*(int *)a2 > 0)
    {
      uint64_t v22 = 0;
LABEL_26:
      unsigned int v14 = 0;
      goto LABEL_27;
    }
    size_t v23 = strlen(v10);
    unint64_t v24 = (char *)uprv_malloc(v23 + 1);
    uint64_t v22 = v24;
    if (v24)
    {
      strcpy(v24, v10);
      if (*(int *)a2 > 0) {
        goto LABEL_26;
      }
      uint64_t v25 = uprv_malloc(0x18uLL);
      if (v25)
      {
        unsigned int v14 = v25;
        *uint64_t v25 = v21;
        *((_DWORD *)v25 + 2) = 1;
        *((double *)v25 + 2) = uprv_getUTCtime();
        uhash_put(qword_1E91929D0, (uint64_t)v22, (uint64_t)v14, (int *)a2);
        if (*(int *)a2 < 1) {
          goto LABEL_13;
        }
LABEL_27:
        (*(void (**)(uint64_t *))(*v21 + 8))(v21);
        if (v22) {
          uprv_free(v22);
        }
        if (v14)
        {
          uprv_free(v14);
          unsigned int v14 = 0;
        }
        goto LABEL_13;
      }
    }
    unsigned int v14 = 0;
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_27;
  }
  uint64_t v8 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, (int *)a2);
  qword_1E91929D0 = (uint64_t)v8;
  if (*(int *)a2 <= 0)
  {
    uhash_setKeyDeleter((uint64_t)v8, (uint64_t)uprv_free);
    uhash_setValueDeleter(qword_1E91929D0, (uint64_t)sub_18C9FD604);
    byte_1E91929C8 = 1;
    sub_18CA0A25C(0x10u, (uint64_t)sub_18C9FD664);
    goto LABEL_6;
  }
LABEL_7:
  umtx_unlock((std::mutex **)&unk_1E9192A28);
  return 0;
}

void sub_18C9FD604(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  uprv_free(a1);
}

uint64_t sub_18C9FD664()
{
  if (qword_1E91929D0)
  {
    uhash_close((unsigned char *)qword_1E91929D0);
    qword_1E91929D0 = 0;
  }
  byte_1E91929C8 = 0;
  return 1;
}

BOOL icu::TimeZoneGenericNames::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

uint64_t *icu::TimeZoneGenericNames::clone@<X0>(icu::TimeZoneGenericNames *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x10, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t *v4 = (uint64_t)&unk_1EDA537A8;
    v4[1] = 0;
    umtx_lock((atomic_ullong *)&unk_1E9192A28);
    uint64_t v6 = *((void *)this + 1);
    ++*(_DWORD *)(v6 + 8);
    v5[1] = v6;
    umtx_unlock((std::mutex **)&unk_1E9192A28);
  }
  return v5;
}

icu::UnicodeString *icu::TimeZoneGenericNames::getDisplayName(uint64_t a1, icu::ZoneMeta *a2, int a3, icu::UnicodeString *a4, double a5)
{
  return sub_18C9FB69C(**(void **)(a1 + 8), a2, a3, a4, a5);
}

icu::UnicodeString *icu::TimeZoneGenericNames::getGenericLocationName(icu::TimeZoneGenericNames *this, const icu::UnicodeString *a2, icu::UnicodeString *a3)
{
  return sub_18C9FB7EC(**((void **)this + 1), (uint64_t)a2, a3);
}

uint64_t icu::TimeZoneGenericNames::findBestMatch(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, UChar **a5, _DWORD *a6, UErrorCode *a7)
{
  return sub_18C9FC988(**(void **)(a1 + 8), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_18C9FD75C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) ^ 1;
}

void *sub_18C9FD798(void *a1, uint64_t a2, int *a3)
{
  *a1 = &unk_1EDA53828;
  umtx_lock((atomic_ullong *)&unk_1EB20BC90);
  if ((byte_1EB20BC78 & 1) == 0)
  {
    uint64_t v6 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, a3);
    qword_1EB20BC80 = (uint64_t)v6;
    if (*a3 > 0) {
      goto LABEL_16;
    }
    uhash_setKeyDeleter((uint64_t)v6, (uint64_t)uprv_free);
    uhash_setValueDeleter(qword_1EB20BC80, (uint64_t)sub_18C9FDA8C);
    byte_1EB20BC78 = 1;
    sub_18CA0A25C(0x11u, (uint64_t)sub_18C9FDAEC);
  }
  if (*a3 > 0) {
    goto LABEL_16;
  }
  int v7 = *(const char **)(a2 + 40);
  uint64_t v8 = uhash_get(qword_1EB20BC80, (uint64_t)v7);
  if (!v8)
  {
    uint64_t v18 = icu::UMemory::operator new(v10, (icu::UMemory *)0x140, v9);
    if (!v18)
    {
      uint64_t v11 = 0;
      *a3 = 7;
      goto LABEL_7;
    }
    uint64_t v19 = v18;
    sub_18C9FFFB8(v18, a2, a3);
    if (*a3 > 0)
    {
      uint64_t v20 = 0;
LABEL_20:
      uint64_t v11 = 0;
      goto LABEL_21;
    }
    size_t v21 = strlen(v7);
    uint64_t v22 = (char *)uprv_malloc(v21 + 1);
    uint64_t v20 = v22;
    if (v22)
    {
      strcpy(v22, v7);
      if (*a3 > 0) {
        goto LABEL_20;
      }
      size_t v23 = uprv_malloc(0x18uLL);
      if (v23)
      {
        uint64_t v11 = v23;
        *size_t v23 = v19;
        *((_DWORD *)v23 + 2) = 1;
        *((double *)v23 + 2) = uprv_getUTCtime();
        uhash_put(qword_1EB20BC80, (uint64_t)v20, (uint64_t)v11, a3);
        if (*a3 < 1) {
          goto LABEL_7;
        }
LABEL_21:
        (*(void (**)(uint64_t *))(*v19 + 8))(v19);
        if (v20) {
          uprv_free(v20);
        }
        if (v11)
        {
          uprv_free(v11);
          uint64_t v11 = 0;
        }
        goto LABEL_7;
      }
    }
    uint64_t v11 = 0;
    *a3 = 7;
    goto LABEL_21;
  }
  uint64_t v11 = (void *)v8;
  ++*(_DWORD *)(v8 + 8);
  *(double *)(v8 + 16) = uprv_getUTCtime();
LABEL_7:
  int v12 = dword_1EB20BC88++;
  if (v12 >= 99)
  {
    int v24 = -1;
    double UTCtime = uprv_getUTCtime();
    uint64_t v14 = uhash_nextElement((uint64_t *)qword_1EB20BC80, &v24);
    if (v14)
    {
      uint64_t v15 = v14;
      do
      {
        uint64_t v16 = *(void *)(v15 + 8);
        if (*(int *)(v16 + 8) <= 0 && UTCtime - *(double *)(v16 + 16) > 180000.0) {
          uhash_removeElement(qword_1EB20BC80, (_DWORD *)v15);
        }
        uint64_t v15 = uhash_nextElement((uint64_t *)qword_1EB20BC80, &v24);
      }
      while (v15);
    }
    dword_1EB20BC88 = 0;
  }
  a1[1] = v11;
LABEL_16:
  umtx_unlock((std::mutex **)&unk_1EB20BC90);
  return a1;
}

void sub_18C9FDA8C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  uprv_free(a1);
}

uint64_t sub_18C9FDAEC()
{
  if (qword_1EB20BC80)
  {
    uhash_close((unsigned char *)qword_1EB20BC80);
    qword_1EB20BC80 = 0;
  }
  byte_1EB20BC78 = 0;
  return 1;
}

void sub_18C9FDB28(icu::UObject *a1)
{
  *(void *)a1 = &unk_1EDA53828;
  umtx_lock((atomic_ullong *)&unk_1EB20BC90);
  uint64_t v2 = *((void *)a1 + 1);
  if (v2) {
    --*(_DWORD *)(v2 + 8);
  }
  umtx_unlock((std::mutex **)&unk_1EB20BC90);

  icu::UObject::~UObject(a1);
}

void sub_18C9FDBAC(icu::UObject *a1)
{
  sub_18C9FDB28(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9FDBD4(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (result) {
    return a1[1] == *(void *)(result + 8);
  }
  return result;
}

uint64_t *sub_18C9FDC64@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x10, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t *v4 = (uint64_t)&unk_1EDA53828;
    v4[1] = 0;
    umtx_lock((atomic_ullong *)&unk_1EB20BC90);
    uint64_t v6 = *(void *)(a1 + 8);
    ++*(_DWORD *)(v6 + 8);
    v5[1] = v6;
    umtx_unlock((std::mutex **)&unk_1EB20BC90);
  }
  return v5;
}

uint64_t sub_18C9FDCE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 40))();
}

uint64_t sub_18C9FDD14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 48))();
}

uint64_t sub_18C9FDD40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 56))();
}

uint64_t sub_18C9FDD6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 64))();
}

uint64_t sub_18C9FDD98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 72))();
}

uint64_t sub_18C9FDDC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 80))();
}

uint64_t sub_18C9FDDF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 88))();
}

uint64_t sub_18C9FDE1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 104))();
}

uint64_t sub_18C9FDE48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 112))();
}

uint64_t sub_18C9FDE74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 120))();
}

void *icu::TimeZoneNames::createInstance(icu::TimeZoneNames *this, const icu::Locale *a2, UErrorCode *a3)
{
  int v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0) {
    return 0;
  }
  int v7 = icu::UMemory::operator new(v3, (icu::UMemory *)0x10, (unint64_t)a2);
  if (v7) {
    return sub_18C9FD798(v7, (uint64_t)this, (int *)a2);
  }
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t result = 0;
  *(_DWORD *)a2 = 7;
  return result;
}

uint64_t icu::TimeZoneNames::createTZDBInstance(icu::TimeZoneNames *this, const icu::Locale *a2, UErrorCode *a3)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t v6 = icu::UMemory::operator new((icu::UMemory *)0xF0, (unint64_t)a2);
  if (v6) {
    return sub_18CA025BC(v6, this);
  }
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t result = 0;
  *(_DWORD *)a2 = 7;
  return result;
}

icu::UnicodeString *icu::TimeZoneNames::getExemplarLocationName(icu::TimeZoneNames *this, const icu::UnicodeString *a2, int32_t *a3)
{
  return sub_18CA01B7C((uint64_t)a2, a3);
}

uint64_t icu::TimeZoneNames::getDisplayName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (*(unsigned __int16 *)(a4 + 8) <= 0x1Fu)
  {
    memset(v12, 0, sizeof(v12));
    memset(v11, 0, sizeof(v11));
    icu::UnicodeString::UnicodeString(v11, v12, 0, 32);
    (*(void (**)(uint64_t, uint64_t, _OWORD *, double))(*(void *)a1 + 56))(a1, a2, v11, a5);
    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v11, a3, a4);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
  }
  return a4;
}

void icu::TimeZoneNames::getDisplayNames(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, uint64_t a5, int *a6, double a7)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*a6 <= 0 && *(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v17 = 0;
    long long v16 = 0u;
    uint64_t v13 = &unk_1EDA47700;
    LOWORD(v14) = 2;
    if (a4 >= 1)
    {
      uint64_t v12 = a4;
      do
      {
        (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 80))(a1, a2, *a3, a5);
        if (*(unsigned __int16 *)(a5 + 8) <= 0x1Fu)
        {
          if ((unsigned __int16)v14 <= 0x1Fu) {
            (*(void (**)(uint64_t, uint64_t, void **, double))(*(void *)a1 + 56))(a1, a2, &v13, a7);
          }
          (*(void (**)(uint64_t, void **, void, uint64_t))(*(void *)a1 + 72))(a1, &v13, *a3, a5);
        }
        a5 += 64;
        ++a3;
        --v12;
      }
      while (v12);
    }
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v13);
  }
}

void *icu::TimeZoneNames::MatchInfoCollection::MatchInfoCollection(void *this)
{
  *this = &unk_1EDA538F0;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1EDA538F0;
  this[1] = 0;
  return this;
}

void icu::TimeZoneNames::MatchInfoCollection::~MatchInfoCollection(icu::TimeZoneNames::MatchInfoCollection *this)
{
  *(void *)this = &unk_1EDA538F0;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_1EDA538F0;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDA538F0;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::UMemory::operator delete(this);
}

void icu::TimeZoneNames::MatchInfoCollection::addZone(icu::TimeZoneNames::MatchInfoCollection *a1, unint64_t a2, int a3, UChar **a4, UErrorCode *a5)
{
  uint64_t v5 = (uint64_t *)*(unsigned int *)a5;
  if ((int)v5 > 0) {
    return;
  }
  int v9 = a2;
  uint64_t v11 = icu::UMemory::operator new(v5, (icu::UMemory *)0x50, a2);
  uint64_t v12 = v11;
  if (v11)
  {
    v11[1] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v11 + 8) = 2;
    *(_DWORD *)uint64_t v11 = v9;
    *((_DWORD *)v11 + 18) = a3;
    icu::UnicodeString::copyFrom((UChar **)v11 + 1, a4, 0);
    *((unsigned char *)v12 + 76) = 1;
    uint64_t v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
    long long v14 = (void *)*(unsigned int *)a5;
    if ((int)v14 > 0)
    {
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v12 + 1));
      icu::UMemory::operator delete(v12);
      return;
    }
    goto LABEL_11;
  }
  if (*(int *)a5 <= 0) {
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  }
  uint64_t v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
  if (*(int *)a5 < 1)
  {
LABEL_11:
    icu::UVector::adoptElement((uint64_t (**)(void *))v13, v12, a5);
  }
}

uint64_t *icu::TimeZoneNames::MatchInfoCollection::matches(icu::TimeZoneNames::MatchInfoCollection *this, UErrorCode *a2)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 > 0) {
    return 0;
  }
  uint64_t result = (uint64_t *)*((void *)this + 1);
  if (!result)
  {
    uint64_t result = icu::UMemory::operator new(v2, (icu::UMemory *)0x28, (unint64_t)a2);
    if (result)
    {
      uint64_t result = (uint64_t *)icu::UVector::UVector((uint64_t)result, (uint64_t)sub_18C9FE890, 0, (int *)a2);
      *((void *)this + 1) = result;
      if (*(int *)a2 >= 1)
      {
        (*(void (**)(uint64_t *))(*result + 8))(result);
        uint64_t result = 0;
        *((void *)this + 1) = 0;
      }
    }
    else
    {
      *((void *)this + 1) = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return result;
}

void icu::TimeZoneNames::MatchInfoCollection::addMetaZone(icu::TimeZoneNames::MatchInfoCollection *a1, unint64_t a2, int a3, UChar **a4, UErrorCode *a5)
{
  uint64_t v5 = (uint64_t *)*(unsigned int *)a5;
  if ((int)v5 > 0) {
    return;
  }
  int v9 = a2;
  uint64_t v11 = icu::UMemory::operator new(v5, (icu::UMemory *)0x50, a2);
  uint64_t v12 = v11;
  if (v11)
  {
    v11[1] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v11 + 8) = 2;
    *(_DWORD *)uint64_t v11 = v9;
    *((_DWORD *)v11 + 18) = a3;
    icu::UnicodeString::copyFrom((UChar **)v11 + 1, a4, 0);
    *((unsigned char *)v12 + 76) = 0;
    uint64_t v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
    long long v14 = (void *)*(unsigned int *)a5;
    if ((int)v14 > 0)
    {
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v12 + 1));
      icu::UMemory::operator delete(v12);
      return;
    }
    goto LABEL_11;
  }
  if (*(int *)a5 <= 0) {
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  }
  uint64_t v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
  if (*(int *)a5 < 1)
  {
LABEL_11:
    icu::UVector::adoptElement((uint64_t (**)(void *))v13, v12, a5);
  }
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::size(icu::TimeZoneNames::MatchInfoCollection *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return *(unsigned int *)(v1 + 8);
  }
  else {
    return 0;
  }
}

unsigned int *icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(icu::UVector **this, unsigned int a2)
{
  uint64_t result = (unsigned int *)icu::UVector::elementAt(this[1], a2);
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(icu::UVector **this, unsigned int a2)
{
  uint64_t result = icu::UVector::elementAt(this[1], a2);
  if (result) {
    return *(unsigned int *)(result + 72);
  }
  return result;
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::getTimeZoneIDAt(icu::UVector **this, unsigned int a2, icu::UnicodeString *a3)
{
  if (*((_WORD *)a3 + 4)) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v4;
  uint64_t result = icu::UVector::elementAt(this[1], a2);
  if (result)
  {
    if (*(unsigned char *)(result + 76))
    {
      icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)(result + 8), 0);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::getMetaZoneIDAt(icu::UVector **this, unsigned int a2, icu::UnicodeString *a3)
{
  if (*((_WORD *)a3 + 4)) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v4;
  uint64_t result = icu::UVector::elementAt(this[1], a2);
  if (result)
  {
    if (*(unsigned char *)(result + 76))
    {
      return 0;
    }
    else
    {
      icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)(result + 8), 0);
      return 1;
    }
  }
  return result;
}

void sub_18C9FE890(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
    icu::UMemory::operator delete((void *)a1);
  }
}

uint64_t sub_18C9FE8D4(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) ^ 1;
}

uint64_t *sub_18C9FE910(uint64_t *result, void *a2, uint64_t (*a3)(void *), UErrorCode *a4)
{
  if (*(int *)a4 >= 1)
  {
    if (a3)
    {
      return (uint64_t *)a3(a2);
    }
    return result;
  }
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = *result;
  if (!*result)
  {
    *uint64_t result = (uint64_t)a2;
    return result;
  }
  if (*((unsigned char *)result + 14)) {
    goto LABEL_8;
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)*((unsigned __int8 *)result + 14), (icu::UMemory *)0x28, (unint64_t)a2);
  uint64_t v6 = (uint64_t)result;
  if (result)
  {
    uint64_t result = (uint64_t *)icu::UVector::UVector(result, a3, 0, 1, a4);
    uint64_t v8 = a3;
    if (*(int *)a4 < 1)
    {
      int v9 = *(void **)v5;
      if (*(void *)(v6 + 24)) {
        icu::UVector::adoptElement((uint64_t (**)(void *))v6, v9, a4);
      }
      else {
        icu::UVector::addElement((icu::UVector *)v6, v9, a4);
      }
      *(void *)uint64_t v5 = v6;
      *(unsigned char *)(v5 + 14) = 1;
LABEL_8:
      if (*(void *)(v6 + 24))
      {
        return (uint64_t *)icu::UVector::adoptElement((uint64_t (**)(void *))v6, a2, a4);
      }
      else
      {
        return (uint64_t *)icu::UVector::addElement((icu::UVector *)v6, a2, a4);
      }
    }
  }
  else
  {
    uint64_t v8 = a3;
    if (*(int *)a4 <= 0) {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  if (v8) {
    uint64_t result = (uint64_t *)v8(a2);
  }
  if (v6)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 8);
    return (uint64_t *)v10(v6);
  }
  return result;
}

uint64_t icu::TextTrieMap::TextTrieMap(uint64_t this, char a2, void (*a3)(void *))
{
  *(void *)this = &unk_1EDA539B8;
  *(unsigned char *)(this + 8) = a2;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(unsigned char *)(this + 40) = 1;
  *(void *)(this + 48) = a3;
  return this;
}

{
  *(void *)this = &unk_1EDA539B8;
  *(unsigned char *)(this + 8) = a2;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(unsigned char *)(this + 40) = 1;
  *(void *)(this + 48) = a3;
  return this;
}

void icu::TextTrieMap::~TextTrieMap(icu::TextTrieMap *this)
{
  *(void *)this = &unk_1EDA539B8;
  if (*((int *)this + 7) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *((void *)this + 2);
      uint64_t v5 = *(void *)(v4 + v2);
      if (v5)
      {
        if (*(unsigned char *)(v4 + v2 + 14))
        {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        else
        {
          uint64_t v6 = (void (*)(void))*((void *)this + 6);
          if (v6) {
            v6();
          }
        }
      }
      ++v3;
      v2 += 16;
    }
    while (v3 < *((int *)this + 7));
  }
  uprv_free(*((void **)this + 2));
  int v7 = (icu::UVector *)*((void *)this + 4);
  if (v7)
  {
    if (*((int *)v7 + 2) >= 1)
    {
      int v8 = 0;
      do
      {
        int v9 = (void (*)(uint64_t))*((void *)this + 6);
        if (v9)
        {
          uint64_t v10 = icu::UVector::elementAt(v7, v8 + 1);
          v9(v10);
          int v7 = (icu::UVector *)*((void *)this + 4);
        }
        v8 += 2;
      }
      while (v8 < *((_DWORD *)v7 + 2));
    }
    (*(void (**)(icu::UVector *))(*(void *)v7 + 8))(v7);
  }
}

{
  void *v1;
  uint64_t vars8;

  icu::TextTrieMap::~TextTrieMap(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::TextTrieMap::isEmpty(icu::TextTrieMap *this)
{
  return *((char *)this + 40);
}

icu::UVector *icu::TextTrieMap::put(icu::TextTrieMap *this, const icu::UnicodeString *a2, void *a3, icu::ZNStringPool *a4, UErrorCode *a5)
{
  Terminateduint64_t Buffer = (const UChar *)icu::UnicodeString::getTerminatedBuffer(a2);
  uint64_t v10 = icu::ZNStringPool::get((uint64_t *)a4, TerminatedBuffer, (int *)a5);

  return icu::TextTrieMap::put(v10, a5, (uint64_t)this, a3, v11);
}

UChar *icu::ZNStringPool::get(icu::ZNStringPool *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  Terminateduint64_t Buffer = (const UChar *)icu::UnicodeString::getTerminatedBuffer(a2);

  return icu::ZNStringPool::get((uint64_t *)this, TerminatedBuffer, (int *)a3);
}

icu::UVector *icu::TextTrieMap::put@<X0>(void *a1@<X1>, UErrorCode *a2@<X3>, uint64_t a3@<X0>, void *a4@<X2>, uint64_t *a5@<X8>)
{
  *(unsigned char *)(a3 + 40) = 0;
  uint64_t result = *(icu::UVector **)(a3 + 32);
  if (!result)
  {
    uint64_t result = (icu::UVector *)icu::UMemory::operator new(a5, (icu::UMemory *)0x28, (unint64_t)a1);
    if (result)
    {
      uint64_t result = (icu::UVector *)icu::UVector::UVector(result, a2);
    }
    else if (*(int *)a2 <= 0)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
    *(void *)(a3 + 32) = result;
  }
  if (*(int *)a2 < 1 && (uint64_t result = (icu::UVector *)icu::UVector::addElement(result, a1, a2), *(int *)a2 < 1))
  {
    uint64_t v11 = *(icu::UVector **)(a3 + 32);
    return (icu::UVector *)icu::UVector::addElement(v11, a4, a2);
  }
  else
  {
    uint64_t v10 = *(uint64_t (**)(void *))(a3 + 48);
    if (v10)
    {
      return (icu::UVector *)v10(a1);
    }
  }
  return result;
}

void *icu::TextTrieMap::putImpl(icu::TextTrieMap *this, const icu::UnicodeString *a2, void *a3, UErrorCode *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 2))
  {
    *((_DWORD *)this + 6) = 512;
    uint64_t result = uprv_malloc(0x2000uLL);
    *((void *)this + 2) = result;
    if (!result)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
    *uint64_t result = 0;
    result[1] = 0;
    *((_DWORD *)this + 7) = 1;
  }
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v21 = 0;
  long long v20 = 0u;
  uint64_t v17 = (UChar *)&unk_1EDA47700;
  LOWORD(v18) = 2;
  if (!*((unsigned char *)this + 8))
  {
    unsigned int v10 = *((unsigned __int16 *)a2 + 4);
    if ((v10 & 0x11) != 0)
    {
      uint64_t v11 = 0;
      if ((v10 & 0x8000) == 0) {
        goto LABEL_21;
      }
    }
    else if ((v10 & 2) != 0)
    {
      uint64_t v11 = (char *)a2 + 10;
      if ((v10 & 0x8000) == 0) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v11 = (char *)*((void *)a2 + 3);
      if ((v10 & 0x8000) == 0) {
        goto LABEL_21;
      }
    }
    int v12 = *((_DWORD *)a2 + 3);
    goto LABEL_22;
  }
  int v9 = (UChar **)icu::UnicodeString::fastCopyFrom(&v17, (UChar **)a2);
  icu::UnicodeString::foldCase(v9, 0);
  unsigned int v10 = (unsigned __int16)v18;
  if ((v18 & 0x11) != 0)
  {
    uint64_t v11 = 0;
    if ((v18 & 0x8000) != 0) {
      goto LABEL_19;
    }
LABEL_21:
    int v12 = v10 >> 5;
    goto LABEL_22;
  }
  if ((v18 & 2) == 0)
  {
    uint64_t v11 = (char *)v19;
    if ((v18 & 0x8000) != 0) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  uint64_t v11 = (char *)&v18 + 2;
  if ((v18 & 0x8000) == 0) {
    goto LABEL_21;
  }
LABEL_19:
  int v12 = DWORD1(v18);
LABEL_22:
  uint64_t v13 = (uint64_t *)*((void *)this + 2);
  if (v12 >= 1)
  {
    uint64_t v14 = v12;
    do
    {
      unsigned int v15 = *(unsigned __int16 *)v11;
      v11 += 2;
      uint64_t v13 = (uint64_t *)icu::TextTrieMap::addChildNode(this, (uint64_t)v13, v15, (int *)a4);
      --v14;
    }
    while (v14);
  }
  sub_18C9FE910(v13, a3, *((uint64_t (**)(void *))this + 6), a4);
  return icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v17);
}

uint64_t icu::TextTrieMap::addChildNode(icu::TextTrieMap *this, uint64_t a2, unsigned int a3, int *a4)
{
  if (*a4 > 0) {
    return 0;
  }
  __int16 v6 = a3;
  uint64_t v7 = a2;
  unsigned int v9 = *(unsigned __int16 *)(a2 + 10);
  if (*(_WORD *)(a2 + 10))
  {
    unsigned int v10 = 0;
    uint64_t v11 = *((void *)this + 2);
    while (1)
    {
      unsigned int v12 = v9;
      unsigned int v13 = *(unsigned __int16 *)(v11 + 16 * v9 + 8);
      if (v13 == a3) {
        return v11 + 16 * v9;
      }
      if (v13 > a3) {
        goto LABEL_11;
      }
      unsigned int v9 = *(unsigned __int16 *)(v11 + 16 * v9 + 12);
      unsigned int v10 = v12;
      if (!v9)
      {
        unsigned int v10 = v12;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v10 = 0;
LABEL_10:
    LOWORD(v12) = 0;
LABEL_11:
    int v14 = *((_DWORD *)this + 7);
    uint64_t v15 = *((void *)this + 2);
    if (v14 == *((_DWORD *)this + 6))
    {
      if (!icu::TextTrieMap::growNodes(this))
      {
        uint64_t result = 0;
        *a4 = 7;
        return result;
      }
      unint64_t v16 = v7 - v15;
      uint64_t v15 = *((void *)this + 2);
      uint64_t v7 = v15 + 16 * (int)(v16 >> 4);
      int v14 = *((_DWORD *)this + 7);
    }
    uint64_t result = v15 + 16 * v14;
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_WORD *)(result + 8) = v6;
    *(_WORD *)(result + 12) = v12;
    int v17 = *((_DWORD *)this + 7);
    if (v10) {
      *(_WORD *)(*((void *)this + 2) + 16 * v10 + 12) = v17;
    }
    else {
      *(_WORD *)(v7 + 10) = v17;
    }
    *((_DWORD *)this + 7) = v17 + 1;
  }
  return result;
}

uint64_t icu::TextTrieMap::growNodes(icu::TextTrieMap *this)
{
  int v1 = *((_DWORD *)this + 6);
  if (v1 == 0xFFFF) {
    return 0;
  }
  if (v1 >= 64535) {
    int v1 = 64535;
  }
  int v4 = v1 + 1000;
  uint64_t result = (uint64_t)uprv_malloc(16 * (v1 + 1000));
  if (result)
  {
    uint64_t v5 = result;
    __int16 v6 = (void *)*((void *)this + 2);
    memcpy((void *)result, v6, 16 * *((int *)this + 7));
    uprv_free(v6);
    *((void *)this + 2) = v5;
    *((_DWORD *)this + 6) = v4;
    return 1;
  }
  return result;
}

uint64_t icu::TextTrieMap::getChildNode(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = *(unsigned __int16 *)(a2 + 10);
  if (!*(_WORD *)(a2 + 10)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v5 = v3;
    unsigned int v6 = *(unsigned __int16 *)(v4 + 16 * v3 + 8);
    if (v6 == a3) {
      break;
    }
    if (v6 <= a3)
    {
      unsigned int v3 = *(unsigned __int16 *)(v4 + 16 * v5 + 12);
      if (*(_WORD *)(v4 + 16 * v5 + 12)) {
        continue;
      }
    }
    return 0;
  }
  return v4 + 16 * v5;
}

icu::UVector *icu::TextTrieMap::buildTrie(icu::TextTrieMap *this, UErrorCode *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t result = (icu::UVector *)*((void *)this + 4);
  if (result)
  {
    if (*((int *)result + 2) >= 1)
    {
      signed int v5 = 0;
      do
      {
        uint64_t v6 = icu::UVector::elementAt(result, v5);
        uint64_t v7 = (void *)icu::UVector::elementAt(*((icu::UVector **)this + 4), v5 + 1);
        memset(v10, 0, sizeof(v10));
        uint64_t v9 = v6;
        icu::UnicodeString::UnicodeString(v10, 1, &v9);
        icu::TextTrieMap::putImpl(this, (const icu::UnicodeString *)v10, v7, a2);
        icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
        uint64_t result = (icu::UVector *)*((void *)this + 4);
        v5 += 2;
      }
      while (v5 < *((_DWORD *)result + 2));
    }
    uint64_t result = (icu::UVector *)(*(uint64_t (**)(icu::UVector *, UErrorCode *))(*(void *)result + 8))(result, a2);
    *((void *)this + 4) = 0;
  }
  return result;
}

void icu::TextTrieMap::search(icu::TextTrieMap *a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, void, void *, int *), UErrorCode *a5)
{
  umtx_lock((atomic_ullong *)&unk_1E9192A78);
  if (*((void *)a1 + 4)) {
    icu::TextTrieMap::buildTrie(a1, a5);
  }
  umtx_unlock((std::mutex **)&unk_1E9192A78);
  unsigned int v10 = (void *)*((void *)a1 + 2);
  if (v10)
  {
    icu::TextTrieMap::search(a1, v10, a2, a3, a3, a4, (int *)a5);
  }
}

void *icu::TextTrieMap::search(void *result, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t (***a6)(void, void, void *, int *), int *a7)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*a7 > 0) {
    return result;
  }
  unsigned int v12 = a2;
  unsigned int v13 = result;
  if (*a2)
  {
    uint64_t result = (void *)(**a6)(a6, (a5 - a4), a2, a7);
    if (!result || *a7 > 0) {
      return result;
    }
  }
  if (*((unsigned char *)v13 + 8))
  {
    unsigned int v15 = icu::UnicodeString::char32At((uint64_t *)*((unsigned __int8 *)v13 + 8), (icu::UnicodeString *)a3, a5);
    long long v35 = 0u;
    long long v36 = 0u;
    if (v15 < 0x10000) {
      int v16 = 1;
    }
    else {
      int v16 = 2;
    }
    long long v33 = 0uLL;
    long long v34 = 0uLL;
    icu::UnicodeString::UnicodeString((uint64_t)&v33, v15);
    icu::UnicodeString::foldCase((UChar **)&v33, 0);
    uint64_t v17 = 0;
    unint64_t v18 = (unint64_t)&v33 | 0xA;
    if ((BYTE8(v33) & 2) == 0) {
      unint64_t v18 = *((void *)&v34 + 1);
    }
    if ((WORD4(v33) & 0x8000) != 0) {
      goto LABEL_18;
    }
LABEL_16:
    unint64_t v19 = (unint64_t)WORD4(v33) >> 5;
    if (v17 < v19)
    {
      while (1)
      {
        unsigned int v20 = v19 <= v17 ? 0xFFFF : *(unsigned __int16 *)(v18 + 2 * v17);
        unsigned int v21 = *((unsigned __int16 *)v12 + 5);
        if (!*((_WORD *)v12 + 5)) {
          break;
        }
        ++v17;
        uint64_t v22 = v13[2];
        while (1)
        {
          uint64_t v23 = v21;
          unsigned int v24 = *(unsigned __int16 *)(v22 + 16 * v21 + 8);
          if (v24 == v20) {
            break;
          }
          if (v24 <= v20)
          {
            unsigned int v21 = *(unsigned __int16 *)(v22 + 16 * v23 + 12);
            if (*(_WORD *)(v22 + 16 * v23 + 12)) {
              continue;
            }
          }
          goto LABEL_30;
        }
        unsigned int v12 = (void *)(v22 + 16 * v23);
        if ((WORD4(v33) & 0x8000) == 0) {
          goto LABEL_16;
        }
LABEL_18:
        unint64_t v19 = HIDWORD(v33);
        if (v17 >= SHIDWORD(v33)) {
          goto LABEL_31;
        }
      }
LABEL_30:
      unsigned int v12 = 0;
    }
LABEL_31:
    uint64_t result = icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v33);
    if (v12) {
      return (void *)icu::TextTrieMap::search(v13, v12, a3, a4, (v16 + a5), a6, a7);
    }
  }
  else
  {
    unsigned int v25 = *(unsigned __int16 *)(a3 + 8);
    if ((v25 & 0x8000u) == 0) {
      unsigned int v26 = v25 >> 5;
    }
    else {
      unsigned int v26 = *(_DWORD *)(a3 + 12);
    }
    if (v26 <= a5)
    {
      unsigned int v28 = 0xFFFF;
    }
    else
    {
      if ((v25 & 2) != 0) {
        uint64_t v27 = a3 + 10;
      }
      else {
        uint64_t v27 = *(void *)(a3 + 24);
      }
      unsigned int v28 = *(unsigned __int16 *)(v27 + 2 * a5);
    }
    unsigned int v29 = *((unsigned __int16 *)v12 + 5);
    if (*((_WORD *)v12 + 5))
    {
      uint64_t v30 = v13[2];
      while (1)
      {
        uint64_t v31 = v29;
        unsigned int v32 = *(unsigned __int16 *)(v30 + 16 * v29 + 8);
        if (v32 == v28) {
          break;
        }
        if (v32 <= v28)
        {
          unsigned int v29 = *(unsigned __int16 *)(v30 + 16 * v31 + 12);
          if (*(_WORD *)(v30 + 16 * v31 + 12)) {
            continue;
          }
        }
        return result;
      }
      unsigned int v12 = (void *)(v30 + 16 * v31);
      int v16 = 1;
      if (v12) {
        return (void *)icu::TextTrieMap::search(v13, v12, a3, a4, (v16 + a5), a6, a7);
      }
    }
  }
  return result;
}

icu::ZNStringPool *icu::ZNStringPool::ZNStringPool(icu::ZNStringPool *this, UErrorCode *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  unsigned int v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 <= 0)
  {
    signed int v5 = icu::UMemory::operator new(v3, (icu::UMemory *)0xFB0, (unint64_t)a2);
    if (v5)
    {
      uint64_t *v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      *(void *)this = v5;
      *((void *)this + 1) = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, (uint64_t)uhash_compareUChars, (int *)a2);
    }
    else
    {
      *(void *)this = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

void icu::ZNStringPool::~ZNStringPool(icu::ZNStringPool *this)
{
  uint64_t v2 = (unsigned char *)*((void *)this + 1);
  if (v2)
  {
    uhash_close(v2);
    *((void *)this + 1) = 0;
  }
  unsigned int v3 = *(void **)this;
  if (*(void *)this)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      icu::UMemory::operator delete(v3);
      *(void *)this = v4;
      unsigned int v3 = v4;
    }
    while (v4);
  }
}

UChar *icu::ZNStringPool::get(uint64_t *a1, const UChar *a2, int *a3)
{
  if (*a3 > 0) {
    return (UChar *)&unk_18CA97AC0;
  }
  unsigned int v3 = (UChar *)uhash_get(a1[1], (uint64_t)a2);
  if (v3) {
    return v3;
  }
  int32_t v7 = u_strlen(a2);
  int32_t v9 = v7;
  uint64_t v10 = *a1;
  uint64_t v11 = (uint64_t *)*(unsigned int *)(*a1 + 8);
  if (2000 - (int)v11 > v7) {
    goto LABEL_9;
  }
  if (v7 < 2000)
  {
    unsigned int v13 = icu::UMemory::operator new(v11, (icu::UMemory *)0xFB0, v8);
    if (!v13)
    {
      *a1 = 0;
      int v12 = 7;
      goto LABEL_12;
    }
    LODWORD(v11) = 0;
    *((_DWORD *)v13 + 2) = 0;
    uint64_t *v13 = v10;
    uint64_t v10 = (uint64_t)v13;
    *a1 = (uint64_t)v13;
LABEL_9:
    unsigned int v3 = (UChar *)(v10 + 2 * (int)v11 + 12);
    u_strcpy(v3, a2);
    uint64_t v14 = a1[1];
    *(_DWORD *)(*a1 + 8) += v9 + 1;
    uhash_put(v14, (uint64_t)v3, (uint64_t)v3, a3);
    return v3;
  }
  int v12 = 5;
LABEL_12:
  *a3 = v12;
  return (UChar *)&unk_18CA97AC0;
}

void *icu::ZNStringPool::adopt(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return &unk_18CA97AC0;
  }
  uint64_t v3 = a2;
  if (a2 && !uhash_get(*(void *)(a1 + 8), a2)) {
    uhash_put(*(void *)(a1 + 8), v3, v3, a3);
  }
  return (void *)v3;
}

void icu::ZNStringPool::freeze(icu::ZNStringPool *this)
{
  *((void *)this + 1) = 0;
}

void sub_18C9FF8D0(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void *sub_18C9FF8F8()
{
  return &unk_1E9192AC8;
}

uint64_t sub_18C9FF904(uint64_t a1, void *a2)
{
  uint64_t result = icu::StringEnumeration::StringEnumeration(a1);
  *(void *)uint64_t result = &unk_1EDA539D8;
  *(_DWORD *)(result + 116) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(void *)(result + 136) = *a2;
  *a2 = 0;
  uint64_t v4 = *(void *)(result + 136);
  *(void *)(result + 128) = v4;
  if (v4) {
    *(_DWORD *)(result + 116) = *(_DWORD *)(v4 + 8);
  }
  return result;
}

uint64_t sub_18C9FF968(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  signed int v5 = *(icu::UVector **)(a1 + 128);
  if (!v5) {
    return 0;
  }
  signed int v6 = *(_DWORD *)(a1 + 120);
  if (v6 >= *(_DWORD *)(a1 + 116)) {
    return 0;
  }
  uint64_t v2 = a1 + 8;
  *(_DWORD *)(a1 + 120) = v6 + 1;
  uint64_t v7 = icu::UVector::elementAt(v5, v6);
  icu::UnicodeString::unBogus(a1 + 8);
  if (*(__int16 *)(a1 + 16) < 0) {
    uint64_t v8 = *(unsigned int *)(a1 + 20);
  }
  else {
    uint64_t v8 = *(unsigned __int16 *)(a1 + 16) >> 5;
  }
  icu::UnicodeString::doReplace(a1 + 8, 0, v8, v7, 0, 0xFFFFFFFFLL);
  return v2;
}

uint64_t sub_18C9FFA08(uint64_t result)
{
  *(_DWORD *)(result + 120) = 0;
  return result;
}

uint64_t sub_18C9FFA10(uint64_t a1)
{
  return *(unsigned int *)(a1 + 116);
}

void sub_18C9FFA18(icu::StringEnumeration *this)
{
  *(void *)this = &unk_1EDA539D8;
  uint64_t v2 = *((void *)this + 17);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18C9FFA98(icu::StringEnumeration *a1)
{
  sub_18C9FFA18(a1);

  icu::UMemory::operator delete(v1);
}

void *sub_18C9FFAC0(void *a1)
{
  *a1 = &unk_1EDA53A40;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_18C9FFB2C(void *a1)
{
  *a1 = &unk_1EDA53A40;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::UMemory::operator delete(a1);
}

uint64_t sub_18C9FFBA8(uint64_t a1, unint64_t a2, unsigned char *a3, UErrorCode *a4)
{
  v18[8] = *(UChar **)MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (*(void *)a3)
  {
    int v7 = a2;
    if (a3[14])
    {
      int v9 = *(_DWORD *)(*(void *)a3 + 8);
      if (v9 < 1) {
        return 1;
      }
    }
    else
    {
      int v9 = 1;
    }
    unsigned int v10 = 0;
    while (1)
    {
      uint64_t v11 = *(unsigned int **)a3;
      if (a3[14]) {
        uint64_t v11 = (unsigned int *)icu::UVector::elementAt(*(icu::UVector **)a3, v10);
      }
      if (!v11) {
        goto LABEL_24;
      }
      int v12 = (uint64_t *)*v11;
      if ((*(_DWORD *)(a1 + 8) & v12) == 0) {
        goto LABEL_24;
      }
      unsigned int v13 = *(icu::TimeZoneNames::MatchInfoCollection **)(a1 + 16);
      if (v13) {
        goto LABEL_16;
      }
      uint64_t v14 = icu::UMemory::operator new(v12, (icu::UMemory *)0x10, a2);
      if (v14) {
        break;
      }
      *(void *)(a1 + 16) = 0;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
LABEL_24:
      if (v9 == ++v10) {
        return 1;
      }
    }
    unsigned int v13 = (icu::TimeZoneNames::MatchInfoCollection *)v14;
    *(void *)(a1 + 16) = icu::TimeZoneNames::MatchInfoCollection::MatchInfoCollection(v14);
LABEL_16:
    if (*(int *)a4 <= 0)
    {
      uint64_t v15 = *((void *)v11 + 1);
      unint64_t v16 = *v11;
      if (v15)
      {
        icu::UnicodeString::UnicodeString((uint64_t)v18, v15, 0xFFFFFFFFLL);
        icu::TimeZoneNames::MatchInfoCollection::addZone(v13, v16, v7, v18, a4);
      }
      else
      {
        icu::UnicodeString::UnicodeString((uint64_t)v18, *((void *)v11 + 2), 0xFFFFFFFFLL);
        icu::TimeZoneNames::MatchInfoCollection::addMetaZone(v13, v16, v7, v18, a4);
      }
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v18);
      if (*(int *)a4 <= 0 && *(_DWORD *)(a1 + 12) < v7) {
        *(_DWORD *)(a1 + 12) = v7;
      }
    }
    goto LABEL_24;
  }
  return 1;
}

uint64_t sub_18C9FFD60(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = &unk_1EDA53A68;
  icu::Locale::Locale((icu::Locale *)(a1 + 8), a2);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 256) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = &unk_1EDA539B8;
  *(unsigned char *)(a1 + 272) = 1;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 304) = 1;
  *(void *)(a1 + 312) = j__uprv_free_4;
  sub_18C9FFE18((void *)a1, a2, a3);
  return a1;
}

void sub_18C9FFE18(void *a1, uint64_t a2, int *a3)
{
  v12[8] = *(UChar **)MEMORY[0x1E4F143B8];
  if (*a3 <= 0)
  {
    int v11 = 0;
    uint64_t v5 = ures_open("icudt74l-zone", *(char **)(a2 + 40), &v11);
    a1[29] = v5;
    a1[29] = ures_getByKeyWithFallback(v5, "zoneStrings", v5, (UErrorCode *)&v11);
    if (v11 >= 1)
    {
      *a3 = v11;
LABEL_5:
      sub_18C9FFFBC(a1);
      return;
    }
    a1[31] = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, a3);
    a1[30] = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, a3);
    if (*a3 >= 1) {
      goto LABEL_5;
    }
    uhash_setValueDeleter(a1[31], (uint64_t)sub_18CA0000C);
    signed int v6 = (icu::TimeZone *)uhash_setValueDeleter(a1[30], (uint64_t)sub_18CA0000C);
    Default = (icu::ZoneMeta *)icu::TimeZone::createDefault(v6);
    CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(Default, v8);
    if (CanonicalCLDRID)
    {
      icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)CanonicalCLDRID);
      sub_18CA00068((uint64_t)a1, v12, a3);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v12);
    }
    (*(void (**)(icu::ZoneMeta *))(*(void *)Default + 8))(Default);
  }
}

void sub_18C9FFFBC(void *a1)
{
  uint64_t v2 = a1[29];
  if (v2)
  {
    ures_close(v2);
    a1[29] = 0;
  }
  uint64_t v3 = (unsigned char *)a1[31];
  if (v3)
  {
    uhash_close(v3);
    a1[31] = 0;
  }
  uint64_t v4 = (unsigned char *)a1[30];
  if (v4)
  {
    uhash_close(v4);
    a1[30] = 0;
  }
}

void sub_18CA0000C(void **a1)
{
  if (a1 != (void **)"<empty>" && a1 != 0)
  {
    if (*((unsigned char *)a1 + 57)) {
      uprv_free(*a1);
    }
    icu::UMemory::operator delete(a1);
  }
}

uint64_t sub_18CA00068(uint64_t a1, UChar **a2, int *a3)
{
  sub_18CA001BC(a1, a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, UChar **, int *))(*(void *)a1 + 48))(a1, a2, a3);
  uint64_t v7 = result;
  if (*a3 <= 0)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, int *))(*(void *)result + 56))(result, a3);
    if (v8) {
      BOOL v9 = *a3 <= 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      uint64_t v10 = v8;
      do
      {
        sub_18CA00348(a1, v10, a3);
        uint64_t v10 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v7 + 56))(v7, a3);
        if (v10) {
          BOOL v11 = *a3 <= 0;
        }
        else {
          BOOL v11 = 0;
        }
      }
      while (v11);
    }
  }
  else if (!result)
  {
    return result;
  }
  int v12 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);

  return v12(v7);
}

uint64_t sub_18CA001BC(uint64_t a1, UChar **a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*a3 > 0) {
    return 0;
  }
  __int16 v16 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t v14 = (UChar *)v15;
  *((_WORD *)v15 + (int)icu::UnicodeString::extract((uint64_t)a2, &v14, 129, a3)) = 0;
  uint64_t v3 = uhash_get(*(void *)(a1 + 240), (uint64_t)v15);
  if (!v3)
  {
    BOOL v11 = &unk_1EDA53C30;
    memset(v12, 0, sizeof(v12));
    uint64_t v13 = 0;
    sub_18CA00D68((uint64_t)&v11, *(void *)(a1 + 232), a2, (unsigned int *)a3);
    uint64_t v8 = *(void *)(a1 + 240);
    for (uint64_t i = 8; i != 64; i += 8)
    {
      if (*(void **)((char *)&v11 + i) == &unk_18CA97C60) {
        *(void **)((char *)&v11 + i) = 0;
      }
    }
    uint64_t v3 = (uint64_t)sub_18CA00EE0(v8, (const icu::UnicodeString *)v12, (icu::ZoneMeta *)a2, a3);
    int v10 = *a3;
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v11);
    if (v10 > 0) {
      return 0;
    }
  }
  return v3;
}

char *sub_18CA00348(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*a3 > 0) {
    return 0;
  }
  __int16 v19 = 0;
  memset(v18, 0, sizeof(v18));
  uint64_t v17 = (UChar *)v18;
  icu::UnicodeString::extract(a2, &v17, 129, a3);
  unsigned int v7 = *(unsigned __int16 *)(a2 + 8);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  if (v8 < 0) {
    unsigned int v9 = *(_DWORD *)(a2 + 12);
  }
  *((_WORD *)v18 + (int)v9) = 0;
  int v10 = (char *)uhash_get(*(void *)(a1 + 248), (uint64_t)v18);
  if (!v10)
  {
    uint64_t v14 = &unk_1EDA53C30;
    memset(v15, 0, sizeof(v15));
    uint64_t v16 = 0;
    sub_18CA00BC8((uint64_t)&v14, *(void *)(a1 + 232), (unsigned __int16 *)a2, a3);
    uint64_t v11 = *(void *)(a1 + 248);
    for (uint64_t i = 8; i != 64; i += 8)
    {
      if (*(void **)((char *)&v14 + i) == &unk_18CA97C60) {
        *(void **)((char *)&v14 + i) = 0;
      }
    }
    int v10 = (char *)sub_18CA00C98(v11, (const icu::UnicodeString *)v15, (UChar **)a2, a3);
    int v13 = *a3;
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v14);
    if (v13 > 0) {
      return 0;
    }
  }
  if (v10 == "<empty>") {
    return 0;
  }
  return v10;
}

void sub_18CA004F8(void *a1)
{
  *a1 = &unk_1EDA53A68;
  uint64_t v2 = (icu::Locale *)(a1 + 1);
  sub_18C9FFFBC(a1);
  icu::TextTrieMap::~TextTrieMap((icu::TextTrieMap *)(a1 + 33));
  icu::Locale::~Locale(v2);

  icu::TimeZoneNames::~TimeZoneNames((icu::TimeZoneNames *)a1);
}

void sub_18CA00564(void *a1)
{
  sub_18CA004F8(a1);

  icu::UMemory::operator delete(v1);
}

BOOL sub_18CA0058C(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t *sub_18CA00598@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v5 = 0;
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x140, a2);
  if (result) {
    return (uint64_t *)sub_18C9FFD60((uint64_t)result, a1 + 8, &v5);
  }
  return result;
}

uint64_t *sub_18CA005DC(uint64_t a1, icu::ZoneMeta *a2)
{
  return sub_18CA005E4(a2);
}

uint64_t *sub_18CA005E4(icu::ZoneMeta *a1)
{
  if (*(int *)a1 > 0) {
    return 0;
  }
  uint64_t AvailableMetazoneIDs = icu::ZoneMeta::getAvailableMetazoneIDs(a1);
  uint64_t result = icu::UMemory::operator new(v4, (icu::UMemory *)0x90, v3);
  if (AvailableMetazoneIDs)
  {
    if (result)
    {
      uint64_t result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
      *uint64_t result = (uint64_t)&unk_1EDA539D8;
      result[16] = AvailableMetazoneIDs;
      result[17] = 0;
      *(uint64_t *)((char *)result + 116) = *(unsigned int *)(AvailableMetazoneIDs + 8);
    }
  }
  else if (result)
  {
    uint64_t result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
    *uint64_t result = (uint64_t)&unk_1EDA539D8;
    *((_DWORD *)result + 29) = 0;
    *((_DWORD *)result + 30) = 0;
    result[16] = 0;
    result[17] = 0;
  }
  return result;
}

uint64_t *sub_18CA00688(uint64_t a1, icu::ZoneMeta *a2, const icu::UnicodeString *a3)
{
  return sub_18CA00694(a2, a3);
}

uint64_t *sub_18CA00694(icu::ZoneMeta *a1, const icu::UnicodeString *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t MetazoneMappings = icu::ZoneMeta::getMetazoneMappings(a1, a2);
  if (!MetazoneMappings)
  {
    uint64_t result = icu::UMemory::operator new(v6, (icu::UMemory *)0x90, v5);
    if (result)
    {
      uint64_t result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
      *uint64_t result = (uint64_t)&unk_1EDA539D8;
      *((_DWORD *)result + 29) = 0;
      *((_DWORD *)result + 30) = 0;
      result[16] = 0;
      result[17] = 0;
    }
    return result;
  }
  unsigned int v7 = (unsigned int *)MetazoneMappings;
  uint64_t v17 = 0;
  int v8 = icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
  if (!v8)
  {
    if (*(int *)a2 <= 0) {
      *(_DWORD *)a2 = 7;
    }
    goto LABEL_21;
  }
  unsigned int v9 = (icu::UVector *)v8;
  icu::UVector::UVector((uint64_t)v8, 0, (uint64_t)uhash_compareUChars, (int *)a2);
  if (*(int *)a2 > 0)
  {
LABEL_12:
    (*(void (**)(icu::UVector *))(*(void *)v9 + 8))(v9);
    goto LABEL_21;
  }
  signed int v11 = 0;
  while (1)
  {
    int v12 = (uint64_t *)v7[2];
    if (v11 >= (int)v12) {
      break;
    }
    int v13 = *(void **)icu::UVector::elementAt((icu::UVector *)v7, v11);
    if ((icu::UVector::indexOf(v9, (uint64_t)v13, 0) & 0x80000000) != 0) {
      icu::UVector::addElement(v9, v13, (UErrorCode *)a2);
    }
    ++v11;
    if (*(int *)a2 > 0) {
      goto LABEL_12;
    }
  }
  uint64_t v14 = icu::UMemory::operator new(v12, (icu::UMemory *)0x90, v10);
  if (!v14)
  {
    if (*(int *)a2 <= 0)
    {
      uint64_t v17 = 0;
      *(_DWORD *)a2 = 7;
    }
    goto LABEL_12;
  }
  uint64_t v15 = (uint64_t)v14;
  uint64_t v16 = v9;
  sub_18C9FF904((uint64_t)v14, &v16);
  sub_18C7F5A70((uint64_t)&v17, v15, (int *)a2);
  if (v16) {
    (*(void (**)(icu::UVector *))(*(void *)v16 + 8))(v16);
  }
  if (*(int *)a2 <= 0) {
    return v17;
  }
LABEL_21:
  uint64_t result = v17;
  if (v17)
  {
    (*(void (**)(uint64_t *))(*v17 + 8))(v17);
    return 0;
  }
  return result;
}

const icu::UnicodeString *sub_18CA008AC(double a1, uint64_t a2, icu::ZoneMeta *a3, const icu::UnicodeString *a4)
{
  return a4;
}

const icu::UnicodeString *sub_18CA008DC(uint64_t a1, icu::ZoneMeta *a2, uint64_t a3, const icu::UnicodeString *a4)
{
  return sub_18CA008EC(a2, a3, a4);
}

const icu::UnicodeString *sub_18CA008EC(icu::ZoneMeta *a1, uint64_t a2, const icu::UnicodeString *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  icu::UnicodeString::UnicodeString(v8, a2, 0xFFFFFFFFLL, 0);
  icu::ZoneMeta::getZoneIdByMetazone(a1, (const icu::UnicodeString *)v8, a3, v5);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
  return a3;
}

icu::UnicodeString *sub_18CA00970(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeString *this)
{
  icu::UnicodeString::setToBogus(this);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    umtx_lock((atomic_ullong *)&unk_1EB20BCE0);
    int v14 = 0;
    int v8 = sub_18CA00348(a1, a2, &v14);
    int v9 = v14;
    umtx_unlock((std::mutex **)&unk_1EB20BCE0);
    if (v9 <= 0 && v8 != 0)
    {
      int v11 = sub_18CA0329C(a3);
      if ((v11 & 0x80000000) == 0)
      {
        if (*(void *)&v8[8 * v11])
        {
          int v13 = *(const UChar **)&v8[8 * v11];
          icu::UnicodeString::setTo(this, 1, &v13, -1);
        }
      }
    }
  }
  return this;
}

icu::UnicodeString *sub_18CA00A44(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeString *this)
{
  icu::UnicodeString::setToBogus(this);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    umtx_lock((atomic_ullong *)&unk_1EB20BCE0);
    int v14 = 0;
    uint64_t v8 = sub_18CA001BC(a1, (UChar **)a2, &v14);
    int v9 = v14;
    umtx_unlock((std::mutex **)&unk_1EB20BCE0);
    if (v9 <= 0 && v8 != 0)
    {
      unsigned int v11 = sub_18CA0329C(a3);
      if ((v11 & 0x80000000) == 0)
      {
        if (*(void *)(v8 + 8 * v11))
        {
          int v13 = *(const UChar **)(v8 + 8 * v11);
          icu::UnicodeString::setTo(this, 1, &v13, -1);
        }
      }
    }
  }
  return this;
}

icu::UnicodeString *sub_18CA00B18(uint64_t a1, UChar **a2, icu::UnicodeString *this)
{
  icu::UnicodeString::setToBogus(this);
  umtx_lock((atomic_ullong *)&unk_1EB20BCE0);
  int v10 = 0;
  signed int v6 = (const UChar **)sub_18CA001BC(a1, a2, &v10);
  LODWORD(a1) = v10;
  umtx_unlock((std::mutex **)&unk_1EB20BCE0);
  BOOL v7 = (int)a1 > 0 || v6 == 0;
  if (!v7 && *v6)
  {
    int v9 = *v6;
    icu::UnicodeString::setTo(this, 1, &v9, -1);
  }
  return this;
}

void sub_18CA00BC8(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*a4 <= 0)
  {
    char v9 = 0;
    memset(v8, 0, sizeof(v8));
    sub_18CA02F7C(a3, v8);
    int v7 = 0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(void *)(a1 + 56) = 0;
    ures_getAllItemsWithFallback(a2, (char *)v8, a1, &v7);
    if (v7 <= 0) {
      *a4 = v7;
    }
  }
}

const char *sub_18CA00C98(uint64_t a1, const icu::UnicodeString *a2, UChar **a3, int *a4)
{
  if (*a4 > 0) {
    return 0;
  }
  uint64_t MetaZoneID = icu::ZoneMeta::findMetaZoneID(a3, a2);
  if (!memcmp(a2, &unk_18CA97C28, 0x38uLL))
  {
    uint64_t v4 = "<empty>";
  }
  else
  {
    unsigned int v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x40, v9);
    uint64_t v4 = (const char *)v11;
    if (!v11)
    {
      *a4 = 7;
      return v4;
    }
    *((unsigned char *)v11 + 56) = 0;
    long long v12 = *(_OWORD *)a2;
    long long v13 = *((_OWORD *)a2 + 1);
    long long v14 = *((_OWORD *)a2 + 2);
    v11[6] = *((void *)a2 + 6);
    *((_OWORD *)v11 + 1) = v13;
    *((_OWORD *)v11 + 2) = v14;
    *(_OWORD *)unsigned int v11 = v12;
    *((unsigned char *)v11 + 57) = 0;
  }
  uhash_put(a1, MetaZoneID, (uint64_t)v4, a4);
  return v4;
}

void *sub_18CA00D68(uint64_t a1, uint64_t a2, UChar **a3, unsigned int *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v22, a3);
  unint64_t v7 = 0;
  while ((SWORD4(v22) & 0x80000000) == 0)
  {
    unint64_t v8 = (unint64_t)WORD4(v22) >> 5;
    if (v7 >= v8) {
      goto LABEL_14;
    }
LABEL_7:
    if (v8 > v7)
    {
      unint64_t v9 = (BYTE8(v22) & 2) != 0 ? (unint64_t)&v22 | 0xA : *((void *)&v23 + 1);
      if (*(_WORD *)(v9 + 2 * v7) == 47) {
        icu::UnicodeString::setCharAt((icu::UnicodeString *)&v22, v7, 58);
      }
    }
    ++v7;
  }
  unint64_t v8 = SHIDWORD(v22);
  if ((uint64_t)v7 < SHIDWORD(v22))
  {
    unint64_t v8 = HIDWORD(v22);
    goto LABEL_7;
  }
LABEL_14:
  char v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)long long v13 = 0u;
  long long v14 = 0u;
  icu::UnicodeString::extract((uint64_t)&v22, 0, v8, v13, 129);
  unsigned int v12 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  ures_getAllItemsWithFallback(a2, v13, a1, (int *)&v12);
  uint64_t v10 = (void *)v12;
  if ((int)v12 <= 0) {
    *a4 = v12;
  }
  return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v22);
}

uint64_t *sub_18CA00EE0(uint64_t a1, const icu::UnicodeString *a2, icu::ZoneMeta *a3, int *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*a4 > 0) {
    return 0;
  }
  if (*(void *)a2)
  {
    uint64_t v9 = 0;
  }
  else
  {
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v28 = 0;
    long long v27 = 0u;
    long long v24 = &unk_1EDA47700;
    LOWORD(v25) = 2;
    sub_18CA01B7C((uint64_t)a3, (int32_t *)&v24);
    LODWORD(v10) = (unsigned __int16)v25 >> 5;
    if ((v25 & 0x8000u) == 0) {
      unint64_t v10 = v10;
    }
    else {
      unint64_t v10 = DWORD1(v25);
    }
    if ((int)v10 < 1)
    {
      uint64_t v9 = 0;
    }
    else
    {
      Terminateduint64_t Buffer = (const void *)icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)&v24);
      int v12 = (unsigned __int16)v25 >> 5;
      if ((v25 & 0x8000u) != 0) {
        int v12 = DWORD1(v25);
      }
      size_t v13 = 2 * v12 + 2;
      long long v14 = uprv_malloc(v13);
      if (!v14)
      {
        *a4 = 7;
        icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)&v24);
        return 0;
      }
      uint64_t v9 = (uint64_t)v14;
      memcpy(v14, TerminatedBuffer, v13);
    }
    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v24);
  }
  uint64_t TimeZoneID = icu::ZoneMeta::findTimeZoneID(a3, a2);
  long long v18 = icu::UMemory::operator new(v17, (icu::UMemory *)0x40, v16);
  uint64_t v4 = v18;
  if (v18)
  {
    *((unsigned char *)v18 + 56) = 0;
    long long v19 = *(_OWORD *)a2;
    long long v20 = *((_OWORD *)a2 + 1);
    long long v21 = *((_OWORD *)a2 + 2);
    _OWORD v18[6] = *((void *)a2 + 6);
    *((_OWORD *)v18 + 1) = v20;
    *((_OWORD *)v18 + 2) = v21;
    *(_OWORD *)long long v18 = v19;
    if (v9)
    {
      *long long v18 = v9;
      char v22 = 1;
    }
    else
    {
      char v22 = 0;
    }
    *((unsigned char *)v18 + 57) = v22;
    uhash_put(a1, TimeZoneID, (uint64_t)v18, a4);
  }
  else
  {
    *a4 = 7;
  }
  return v4;
}

uint64_t sub_18CA010C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, UErrorCode *a5)
{
  size_t v13 = &unk_1EDA53A40;
  int v14 = a4;
  int v15 = 0;
  uint64_t v16 = 0;
  umtx_lock((atomic_ullong *)&unk_1EB20BCE0);
  uint64_t v9 = sub_18CA0123C(a1, (uint64_t)&v13, a2, a3, a5);
  uint64_t v10 = 0;
  if (*(int *)a5 <= 0)
  {
    uint64_t v10 = v9;
    if (!v9)
    {
      sub_18CA01308(a1, a5);
      uint64_t v11 = sub_18CA0123C(a1, (uint64_t)&v13, a2, a3, a5);
      if (*(int *)a5 > 0)
      {
LABEL_4:
        uint64_t v10 = 0;
        goto LABEL_6;
      }
      uint64_t v10 = v11;
      if (!v11)
      {
        sub_18CA01410(a1, (int *)a5);
        sub_18CA01308(a1, a5);
        *(unsigned char *)(a1 + 256) = 1;
        if (*(int *)a5 > 0) {
          goto LABEL_4;
        }
        uint64_t v10 = sub_18CA0123C(a1, (uint64_t)&v13, a2, a3, a5);
      }
    }
  }
LABEL_6:
  umtx_unlock((std::mutex **)&unk_1EB20BCE0);
  size_t v13 = &unk_1EDA53A40;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  return v10;
}

uint64_t sub_18CA0123C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  int v6 = a4;
  icu::TextTrieMap::search((icu::TextTrieMap *)(a1 + 264), a3, a4, (uint64_t (***)(void, void, void *, int *))a2, a5);
  if (*(int *)a5 > 0) {
    return 0;
  }
  uint64_t result = *(void *)(a2 + 16);
  int v11 = *(_DWORD *)(a2 + 12);
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 12) = 0;
  if (result)
  {
    unsigned int v12 = *(unsigned __int16 *)(a3 + 8);
    int v13 = (__int16)v12;
    unsigned int v14 = v12 >> 5;
    if (v13 < 0) {
      unsigned int v14 = *(_DWORD *)(a3 + 12);
    }
    if (v11 != v14 - v6 && !*(unsigned char *)(a1 + 256))
    {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_18CA01308(uint64_t result, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v3 = result;
    int v5 = -1;
    uint64_t v4 = uhash_nextElement(*(uint64_t **)(result + 248), &v5);
    if (v4)
    {
      while (1)
      {
        if (*(char **)(v4 + 8) != "<empty>")
        {
          uint64_t result = (uint64_t)sub_18CA0333C(*(unsigned char **)(v4 + 8), *(void *)(v4 + 16), 0, v3 + 264, a2);
          if (*(int *)a2 >= 1) {
            break;
          }
        }
        uint64_t v4 = uhash_nextElement(*(uint64_t **)(v3 + 248), &v5);
        if (!v4) {
          goto LABEL_7;
        }
      }
    }
    else
    {
LABEL_7:
      int v5 = -1;
      for (uint64_t result = uhash_nextElement(*(uint64_t **)(v3 + 240), &v5);
            result;
            uint64_t result = uhash_nextElement(*(uint64_t **)(v3 + 240), &v5))
      {
        if (*(char **)(result + 8) != "<empty>")
        {
          uint64_t result = (uint64_t)sub_18CA0333C(*(unsigned char **)(result + 8), 0, *(void *)(result + 16), v3 + 264, a2);
          if (*(int *)a2 >= 1) {
            break;
          }
        }
      }
    }
  }
  return result;
}

void sub_18CA01410(uint64_t a1, int *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 257))
  {
    *(unsigned char *)(a1 + 257) = 1;
    v13[0] = 0;
    v13[1] = 0;
    unsigned int v14 = 0;
    sub_18CA03420(v13, a1, a2);
    sub_18CA019BC((uint64_t)v13, a2);
    if (*a2 <= 0)
    {
      uint64_t TimeZoneIDEnumeration = icu::TimeZone::createTimeZoneIDEnumeration(1, 0, 0, a2);
      uint64_t v5 = TimeZoneIDEnumeration;
      if (*a2 <= 0)
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)TimeZoneIDEnumeration + 56))(TimeZoneIDEnumeration, a2);
        if (v6) {
          BOOL v7 = *a2 <= 0;
        }
        else {
          BOOL v7 = 0;
        }
        if (v7)
        {
          unint64_t v8 = (UChar **)v6;
          do
          {
            memset(v15, 0, sizeof(v15));
            icu::UnicodeString::UnicodeString((icu::UnicodeString *)v15, v8);
            uint64_t v9 = *(void *)(a1 + 240);
            Terminateduint64_t Buffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v15);
            if (!uhash_get(v9, TerminatedBuffer)) {
              sub_18CA00068(a1, v8, a2);
            }
            icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v15);
            unint64_t v8 = (UChar **)(*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 56))(v5, a2);
            if (v8) {
              BOOL v12 = *a2 < 1;
            }
            else {
              BOOL v12 = 0;
            }
          }
          while (v12);
        }
        goto LABEL_18;
      }
      if (TimeZoneIDEnumeration) {
LABEL_18:
      }
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    v13[0] = &unk_1EDA53AF8;
    uhash_close(v14);
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v13);
  }
}

void sub_18CA01618(icu::ResourceSink *a1)
{
  *(void *)a1 = &unk_1EDA53AF8;
  uhash_close(*((unsigned char **)a1 + 2));

  icu::ResourceSink::~ResourceSink(a1);
}

void sub_18CA01670(icu::ResourceSink *a1)
{
  *(void *)a1 = &unk_1EDA53AF8;
  uhash_close(*((unsigned char **)a1 + 2));
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v2);
}

void sub_18CA016CC(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
  {
    umtx_lock((atomic_ullong *)&unk_1EB20BCE0);
    sub_18CA01410(a1, a2);
    umtx_unlock((std::mutex **)&unk_1EB20BCE0);
  }
}

void sub_18CA01744(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, icu::UnicodeString *a5, int *a6, double a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*a6 <= 0)
  {
    BOOL v7 = (UChar **)a2;
    if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
    {
      unint64_t v8 = a6;
      umtx_lock((atomic_ullong *)&unk_1EB20BCE0);
      uint64_t v14 = sub_18CA001BC(a1, v7, v8);
      int v15 = *v8;
      umtx_unlock((std::mutex **)&unk_1EB20BCE0);
      if (v15 <= 0 && a4 >= 1)
      {
        uint64_t v16 = v14;
        long long v17 = 0;
        for (uint64_t i = a4; i; --i)
        {
          unsigned int v20 = *a3++;
          uint64_t v19 = v20;
          unsigned int v21 = sub_18CA0329C(v20);
          if ((v21 & 0x80000000) == 0)
          {
            char v22 = *(const UChar **)(v16 + 8 * v21);
            if (v22) {
              goto LABEL_19;
            }
          }
          if (!v17)
          {
            uint64_t v35 = 0;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v32 = 0u;
            uint64_t v31 = &unk_1EDA47700;
            LOWORD(v32) = 2;
            (*(void (**)(uint64_t, UChar **, void **, double))(*(void *)a1 + 56))(a1, v7, &v31, a7);
            unint64_t v23 = (unsigned __int16)v32;
            long long v17 = "<empty>";
            if ((unsigned __int16)v32 >= 0x20u)
            {
              uint64_t v24 = v16;
              long long v25 = v7;
              umtx_lock((atomic_ullong *)&unk_1EB20BCE0);
              long long v26 = sub_18CA00348(a1, (uint64_t)&v31, v8);
              long long v27 = v8;
              int v28 = *v8;
              if (v26) {
                long long v17 = v26;
              }
              else {
                long long v17 = "<empty>";
              }
              umtx_unlock((std::mutex **)&unk_1EB20BCE0);
              if (v28 > 0)
              {
                icu::UnicodeString::~UnicodeString((void *)v23, (icu::UnicodeString *)&v31);
                return;
              }
              unint64_t v8 = v27;
              BOOL v7 = v25;
              uint64_t v16 = v24;
            }
            icu::UnicodeString::~UnicodeString((void *)v23, (icu::UnicodeString *)&v31);
          }
          if (v17 == "<empty>" || (v29 = sub_18CA0329C(v19), v29 < 0) || (char v22 = *(const UChar **)&v17[8 * v29]) == 0)
          {
            icu::UnicodeString::setToBogus(a5);
          }
          else
          {
LABEL_19:
            uint64_t v30 = v22;
            icu::UnicodeString::setTo(a5, 1, &v30, -1);
          }
          a5 = (icu::UnicodeString *)((char *)a5 + 64);
        }
      }
    }
  }
}

void sub_18CA019BC(uint64_t a1, int *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  ures_getAllItemsWithFallback(*(void *)(*(void *)(a1 + 8) + 232), "", a1, a2);
  if (*a2 <= 0)
  {
    int v13 = -1;
    for (uint64_t i = uhash_nextElement(*(uint64_t **)(a1 + 16), &v13); i; uint64_t i = uhash_nextElement(*(uint64_t **)(a1 + 16), &v13))
    {
      uint64_t v5 = *(char **)(i + 8);
      if (v5 != "<dummy>")
      {
        uint64_t v6 = *(char **)(i + 16);
        if (sub_18CA03508(a1, v6))
        {
          long long v16 = 0uLL;
          long long v17 = 0uLL;
          long long v14 = 0uLL;
          long long v15 = 0uLL;
          int v7 = strlen(v6);
          icu::UnicodeString::UnicodeString(&v14, v6 + 5, (v7 - 5), 0);
          uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 248);
          for (uint64_t j = 8; j != 64; j += 8)
          {
            if (*(_UNKNOWN **)&v5[j] == &unk_18CA97C60) {
              *(void *)&v5[j] = 0;
            }
          }
          sub_18CA00C98(v8, (const icu::UnicodeString *)(v5 + 8), (UChar **)&v14, a2);
        }
        else
        {
          long long v16 = 0uLL;
          long long v17 = 0uLL;
          long long v14 = 0uLL;
          long long v15 = 0uLL;
          sub_18CA03560((uint64_t)v6, (uint64_t)&v14);
          uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 240);
          for (uint64_t k = 8; k != 64; k += 8)
          {
            if (*(_UNKNOWN **)&v5[k] == &unk_18CA97C60) {
              *(void *)&v5[k] = 0;
            }
          }
          sub_18CA00EE0(v11, (const icu::UnicodeString *)(v5 + 8), (icu::ZoneMeta *)&v14, a2);
        }
        icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v14);
        if (*a2 >= 1) {
          break;
        }
      }
    }
  }
}

icu::UnicodeString *sub_18CA01B7C(uint64_t a1, int32_t *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int16 *)(a1 + 8) < 0x20u
    || icu::UnicodeString::doEqualsSubstring(a1, 0, 4, (uint64_t)"E", 0, 4)
    || icu::UnicodeString::doEqualsSubstring(a1, 0, 8, (uint64_t)&aTcSystemvRiyad[3], 0, 8))
  {
    goto LABEL_8;
  }
  if (*(__int16 *)(a1 + 8) < 0)
  {
    int v5 = *(_DWORD *)(a1 + 12);
    int v4 = v5 & (v5 >> 31);
  }
  else
  {
    int v4 = 0;
    int v5 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  if ((int)icu::UnicodeString::indexOf(a1, (uint64_t)&aTcSystemvRiyad[11], 0, 7, v4, v5 - v4) > 0) {
    goto LABEL_8;
  }
  unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  int32_t v10 = v8 >= 0 ? v9 : *(_DWORD *)(a1 + 12);
  int IndexOf = icu::UnicodeString::doLastIndexOf(a1, 0x2Fu, 0, v10);
  if (IndexOf < 1) {
    goto LABEL_8;
  }
  int v12 = IndexOf;
  int v13 = IndexOf + 1;
  unsigned int v14 = *(unsigned __int16 *)(a1 + 8);
  int v15 = (__int16)v14;
  int v16 = v14 >> 5;
  if (v15 < 0) {
    int v16 = *(_DWORD *)(a1 + 12);
  }
  if (v13 >= v16)
  {
LABEL_8:
    icu::UnicodeString::setToBogus((icu::UnicodeString *)this);
    return (icu::UnicodeString *)this;
  }
  icu::UnicodeString::unBogus((uint64_t)this);
  unsigned int v17 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    int v18 = *(_DWORD *)(a1 + 12);
    if (v18 <= v12) {
      goto LABEL_21;
    }
  }
  else if (v12 >= v17 >> 5)
  {
    int v18 = v17 >> 5;
LABEL_21:
    int v13 = v18;
  }
  int v19 = (__int16)v17;
  unsigned int v20 = *((unsigned __int16 *)this + 4);
  int v21 = (__int16)v20;
  unsigned int v22 = v20 >> 5;
  if (v21 >= 0) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = this[3];
  }
  unsigned int v24 = v17 >> 5;
  if (v19 < 0) {
    unsigned int v24 = *(_DWORD *)(a1 + 12);
  }
  icu::UnicodeString::doReplace((icu::UnicodeString *)this, 0, v23, (const icu::UnicodeString *)a1, v13, v24 - v13);
  icu::UnicodeString::UnicodeString((uint64_t)v36, 95);
  icu::UnicodeString::UnicodeString((uint64_t)v33, 32);
  unsigned int v25 = *((unsigned __int16 *)this + 4);
  int v26 = (__int16)v25;
  int32_t v27 = v25 >> 5;
  if (v26 >= 0) {
    int32_t v28 = v27;
  }
  else {
    int32_t v28 = this[3];
  }
  if ((v37 & 0x8000u) == 0) {
    uint64_t v29 = v37 >> 5;
  }
  else {
    uint64_t v29 = v38;
  }
  int v30 = v34 >> 5;
  if ((v34 & 0x8000u) != 0) {
    int v30 = v35;
  }
  icu::UnicodeString::findAndReplace((icu::UnicodeString *)this, 0, v28, (const icu::UnicodeString *)v36, 0, v29, (const icu::UnicodeString *)v33, 0, v30);
  icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v33);
  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v36);
  return (icu::UnicodeString *)this;
}

uint64_t sub_18CA01E18(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA53B28;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2) {
    uprv_free(v2);
  }
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3)
  {
    if (*(int *)(a1 + 24) >= 1)
    {
      uint64_t v4 = 0;
      do
        uprv_free(v3[v4++]);
      while ((int)v4 < *(_DWORD *)(a1 + 24));
      uint64_t v3 = *(void ***)(a1 + 16);
    }
    uprv_free(v3);
  }
  return a1;
}

void sub_18CA01EAC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_18CA01E18(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18CA01ED4(uint64_t a1, const char *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if (!*a2) {
      return 0;
    }
    *(void *)length = 0;
    uint64_t v4 = ures_getByKey(a1, a2, 0, &length[1]);
    uint64_t result = 0;
    if (length[1] <= 0)
    {
      uint64_t result = (uint64_t *)uprv_malloc(0x10uLL);
      if (result)
      {
        int v5 = result;
        uint64_t v6 = 0;
        char v7 = 0;
        do
        {
          while (1)
          {
            uint64_t v8 = v6;
            length[1] = 0;
            StringByuint64_t Key = ures_getStringByKey(v4, off_1E550D0A8[v6], length, &length[1]);
            if (length[1] > 0 || length[0] == 0) {
              break;
            }
            v5[v8] = (uint64_t)StringByKey;
            uint64_t v6 = 1;
            char v7 = 1;
            if (v8) {
              goto LABEL_17;
            }
          }
          v5[v8] = 0;
          uint64_t v6 = 1;
        }
        while (!v8);
        if ((v7 & 1) == 0)
        {
          int v18 = v5;
          goto LABEL_29;
        }
LABEL_17:
        uint64_t v11 = ures_getByKey(v4, "parseRegions", 0, &length[1]);
        uint64_t v12 = v11;
        if (length[1] <= 0)
        {
          int Size = ures_getSize(v11);
          uint64_t v14 = Size;
          if (Size <= 0)
          {
            int v13 = 0;
          }
          else
          {
            unsigned int v22 = (void **)uprv_malloc(8 * Size);
            int v13 = v22;
            if (v22)
            {
              bzero(v22, 8 * v14);
              uint64_t v23 = 0;
              while (1)
              {
                length[1] = 0;
                StringByIndex = ures_getStringByIndex(v12, v23, length, (UErrorCode *)&length[1]);
                if (length[1] > 0) {
                  break;
                }
                unsigned int v25 = StringByIndex;
                int v26 = (char *)uprv_malloc(length[0] + 1);
                v13[v23] = v26;
                if (!v26) {
                  break;
                }
                u_UCharsToChars(v25, v26, length[0]);
                *((unsigned char *)v13[v23++] + length[0]) = 0;
                if (v14 == v23) {
                  goto LABEL_19;
                }
              }
              char v15 = 0;
              goto LABEL_20;
            }
          }
        }
        else
        {
          int v13 = 0;
          LODWORD(v14) = 0;
        }
LABEL_19:
        char v15 = 1;
LABEL_20:
        ures_close(v12);
        ures_close(v4);
        if (v15)
        {
          uint64_t result = icu::UMemory::operator new(v17, (icu::UMemory *)0x20, v16);
          if (result)
          {
            *uint64_t result = (uint64_t)&unk_1EDA53B28;
            result[1] = (uint64_t)v5;
            result[2] = (uint64_t)v13;
            *((_DWORD *)result + 6) = v14;
          }
          return result;
        }
        uprv_free(v5);
        if (!v13) {
          return 0;
        }
        if ((int)v14 >= 1)
        {
          int v19 = v13;
          do
          {
            unsigned int v20 = *v19++;
            uprv_free(v20);
            LODWORD(v14) = v14 - 1;
          }
          while (v14);
        }
        int v18 = v13;
LABEL_29:
        uprv_free(v18);
        return 0;
      }
    }
  }
  return result;
}

void *sub_18CA02130(void *a1)
{
  *a1 = &unk_1EDA53B48;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_18CA0219C(void *a1)
{
  *a1 = &unk_1EDA53B48;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::UMemory::operator delete(a1);
}

uint64_t sub_18CA02218(uint64_t a1, unint64_t a2, unsigned char *a3, int *a4)
{
  v29[8] = *(UChar **)MEMORY[0x1E4F143B8];
  if (*a4 > 0) {
    return 0;
  }
  if (!*(void *)a3) {
    return 1;
  }
  if (a3[14])
  {
    int v7 = *(_DWORD *)(*(void *)a3 + 8);
    if (v7 < 1) {
      return 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  int v26 = a2;
  unsigned int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  do
  {
    uint64_t v11 = *(void *)a3;
    if (a3[14]) {
      uint64_t v11 = icu::UVector::elementAt(*(icu::UVector **)a3, v8);
    }
    if (!v11 || (*(_DWORD *)(a1 + 8) & *(_DWORD *)(v11 + 8)) == 0) {
      goto LABEL_33;
    }
    uint64_t v12 = *(const char ***)(v11 + 16);
    if (!v12)
    {
      if (!v9)
      {
        uint64_t v10 = v11;
        uint64_t v9 = v11;
      }
      goto LABEL_33;
    }
    unint64_t v13 = *(unsigned int *)(v11 + 24);
    if ((int)v13 <= 0)
    {
      if (!v10) {
        uint64_t v10 = v11;
      }
      goto LABEL_33;
    }
    uint64_t v14 = *(const char **)(a1 + 24);
    if (!strcmp(v14, *v12))
    {
      BOOL v18 = 1;
      uint64_t v10 = v11;
    }
    else
    {
      uint64_t v28 = v9;
      uint64_t v15 = 1;
      while (1)
      {
        unint64_t v16 = v15;
        if (v13 == v15) {
          break;
        }
        int v17 = strcmp(v14, v12[v15]);
        uint64_t v15 = v16 + 1;
        if (!v17)
        {
          uint64_t v10 = v11;
          break;
        }
      }
      BOOL v18 = v16 < v13;
      uint64_t v9 = v28;
    }
    uint64_t v19 = v10 ? v10 : v11;
    if (v18) {
      break;
    }
    uint64_t v10 = v19;
LABEL_33:
    ++v8;
  }
  while (v8 != v7);
  if (v10)
  {
    unint64_t v20 = *(unsigned int *)(v10 + 8);
    uint64_t v21 = *(unsigned __int8 *)(v10 + 12);
    if (*(unsigned char *)(v10 + 12))
    {
      unsigned int v22 = (UErrorCode *)a4;
      if (v20 == 32 || v20 == 16)
      {
        uint64_t v21 = 8;
        if ((~*(_DWORD *)(a1 + 8) & 0x30) != 0) {
          unint64_t v20 = v20;
        }
        else {
          unint64_t v20 = 8;
        }
      }
    }
    else
    {
      unsigned int v22 = (UErrorCode *)a4;
    }
    uint64_t v23 = *(icu::TimeZoneNames::MatchInfoCollection **)(a1 + 16);
    if (v23)
    {
LABEL_45:
      if (*(int *)v22 <= 0)
      {
        icu::UnicodeString::UnicodeString((uint64_t)v29, *(void *)v10, 0xFFFFFFFFLL);
        icu::TimeZoneNames::MatchInfoCollection::addMetaZone(v23, v20, v26, v29, v22);
        icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v29);
        if (*(int *)v22 <= 0 && *(_DWORD *)(a1 + 12) < v26) {
          *(_DWORD *)(a1 + 12) = v26;
        }
      }
    }
    else
    {
      unsigned int v24 = icu::UMemory::operator new((uint64_t *)v21, (icu::UMemory *)0x10, a2);
      if (v24)
      {
        uint64_t v23 = (icu::TimeZoneNames::MatchInfoCollection *)v24;
        *(void *)(a1 + 16) = icu::TimeZoneNames::MatchInfoCollection::MatchInfoCollection(v24);
        goto LABEL_45;
      }
      *(void *)(a1 + 16) = 0;
      *unsigned int v22 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return 1;
}

uint64_t sub_18CA02480(uint64_t a1, uint64_t a2)
{
  v11[8] = *(void **)MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EDA53B70;
  uint64_t v3 = (const char *)(a1 + 34);
  icu::Locale::Locale((icu::Locale *)(a1 + 8), a2);
  int v4 = strlen(v3);
  if (v4)
  {
    if (v4 <= 3)
    {
      strcpy((char *)(a1 + 232), v3);
      return a1;
    }
LABEL_13:
    *(_DWORD *)(a1 + 232) = 3223600;
    return a1;
  }
  int v10 = 0;
  memset(&v11[1], 0, 56);
  v11[0] = (char *)&v11[1] + 5;
  LODWORD(v11[1]) = 40;
  v9[0] = 0;
  v9[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v9, (uint64_t)v11);
  ulocimp_addLikelySubtags(*(void *)(a1 + 48), v9, &v10);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v9);
  int Country = uloc_getCountry((uint64_t)v11[0], (char *)(a1 + 232), 4, &v10);
  BOOL v7 = v10 < 1 && Country < 4;
  if (BYTE4(v11[1])) {
    uprv_free(v11[0]);
  }
  if (!v7) {
    goto LABEL_13;
  }
  return a1;
}

void sub_18CA025C0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA53B70;
  icu::Locale::~Locale((icu::Locale *)(a1 + 8));

  icu::TimeZoneNames::~TimeZoneNames((icu::TimeZoneNames *)a1);
}

void sub_18CA02614(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA53B70;
  icu::Locale::~Locale((icu::Locale *)(a1 + 8));
  icu::TimeZoneNames::~TimeZoneNames((icu::TimeZoneNames *)a1);

  icu::UMemory::operator delete(v2);
}

BOOL sub_18CA0266C(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t *sub_18CA02678@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  if (result) {
    return (uint64_t *)sub_18CA02480((uint64_t)result, a1 + 8);
  }
  return result;
}

uint64_t *sub_18CA026AC(uint64_t a1, icu::ZoneMeta *a2)
{
  return sub_18CA005E4(a2);
}

uint64_t *sub_18CA026B4(uint64_t a1, icu::ZoneMeta *a2, const icu::UnicodeString *a3)
{
  return sub_18CA00694(a2, a3);
}

const icu::UnicodeString *sub_18CA026C0(double a1, uint64_t a2, icu::ZoneMeta *a3, const icu::UnicodeString *a4)
{
  return a4;
}

const icu::UnicodeString *sub_18CA026F0(uint64_t a1, icu::ZoneMeta *a2, uint64_t a3, const icu::UnicodeString *a4)
{
  return sub_18CA008EC(a2, a3, a4);
}

icu::UnicodeString *sub_18CA02700(int a1, uint64_t a2, int a3, icu::UnicodeString *this)
{
  icu::UnicodeString::setToBogus(this);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    int v13 = 0;
    BOOL v7 = sub_18CA027B8(a2, &v13);
    if (v13 <= 0 && v7 != 0)
    {
      uint64_t v9 = (const UChar **)v7[1];
      if (v9)
      {
        if (a3 != 16)
        {
          if (a3 != 32) {
            return this;
          }
          ++v9;
        }
        int v10 = *v9;
        if (v10)
        {
          uint64_t v12 = v10;
          icu::UnicodeString::setTo(this, 1, &v12, -1);
        }
      }
    }
  }
  return this;
}

uint64_t *sub_18CA027B8(uint64_t a1, int *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*a2 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192B38, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192B38))
    {
      if (dword_1E9192B3C >= 1)
      {
        uint64_t v2 = 0;
        *a2 = dword_1E9192B3C;
        return v2;
      }
    }
    else
    {
      sub_18CA02ED4(a2);
      dword_1E9192B3C = *a2;
      icu::umtx_initImplPostInit(&dword_1E9192B38);
    }
    if (*a2 <= 0)
    {
      __int16 v19 = 0;
      memset(v18, 0, sizeof(v18));
      uint64_t v15 = (UChar *)v18;
      icu::UnicodeString::extract(a1, &v15, 129, a2);
      unsigned int v6 = *(unsigned __int16 *)(a1 + 8);
      int v7 = (__int16)v6;
      unsigned int v8 = v6 >> 5;
      if (v7 < 0) {
        unsigned int v8 = *(_DWORD *)(a1 + 12);
      }
      *((_WORD *)v18 + (int)v8) = 0;
      umtx_lock((atomic_ullong *)&unk_1E9192AD8);
      uint64_t v9 = (char *)uhash_get(qword_1E9192B28, (uint64_t)v18);
      if (v9)
      {
        if (v9 == "<empty>") {
          uint64_t v2 = 0;
        }
        else {
          uint64_t v2 = (uint64_t *)v9;
        }
        goto LABEL_28;
      }
      uint64_t v10 = ures_openDirect((uint64_t)"icudt74l-zone", (uint64_t)"tzdbNames", (uint64_t)a2);
      uint64_t v11 = ures_getByKey(v10, "zoneStrings", v10, a2);
      if (*a2 <= 0)
      {
        char v17 = 0;
        memset(v16, 0, sizeof(v16));
        sub_18CA02F7C((unsigned __int16 *)a1, v16);
        uint64_t v2 = sub_18CA01ED4(v11, (const char *)v16);
        uint64_t MetaZoneID = icu::ZoneMeta::findMetaZoneID((UChar **)a1, v12);
        if (MetaZoneID)
        {
          if (v2) {
            uint64_t v14 = (const char *)v2;
          }
          else {
            uint64_t v14 = "<empty>";
          }
          uhash_put(qword_1E9192B28, MetaZoneID, (uint64_t)v14, a2);
          if (!v2 || *a2 <= 0) {
            goto LABEL_27;
          }
        }
        else if (!v2)
        {
LABEL_27:
          ures_close(v11);
LABEL_28:
          umtx_unlock((std::mutex **)&unk_1E9192AD8);
          return v2;
        }
        (*(void (**)(uint64_t *))(*v2 + 8))(v2);
      }
      uint64_t v2 = 0;
      goto LABEL_27;
    }
  }
  return 0;
}

icu::UnicodeString *sub_18CA02A38(int a1, int a2, int a3, icu::UnicodeString *this)
{
  return this;
}

uint64_t sub_18CA02A64(uint64_t a1, uint64_t a2, uint64_t a3, int a4, icu::ZoneMeta *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192B30, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192B30))
  {
    if (dword_1E9192B34 >= 1)
    {
      uint64_t result = 0;
      *(_DWORD *)a5 = dword_1E9192B34;
      return result;
    }
  }
  else
  {
    sub_18CA02BB4(a5, v11);
    dword_1E9192B34 = *(_DWORD *)a5;
    icu::umtx_initImplPostInit(&dword_1E9192B30);
  }
  if (*(int *)a5 > 0) {
    return 0;
  }
  uint64_t v12 = (uint64_t (**)(void, void, void *, int *))&unk_1EDA53B48;
  int v13 = a4;
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = a1 + 232;
  icu::TextTrieMap::search((icu::TextTrieMap *)qword_1E9192AD0, a2, a3, &v12, (UErrorCode *)a5);
  uint64_t result = v15;
  if (*(int *)a5 >= 1)
  {
    uint64_t v12 = (uint64_t (**)(void, void, void *, int *))&unk_1EDA53B48;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      return 0;
    }
  }
  return result;
}

void sub_18CA02BB4(icu::ZoneMeta *a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)a1;
  if ((int)v2 > 0) {
    return;
  }
  int v4 = icu::UMemory::operator new(v2, (icu::UMemory *)0x38, a2);
  if (!v4)
  {
    qword_1E9192AD0 = 0;
    *(_DWORD *)a1 = 7;
    return;
  }
  uint64_t *v4 = (uint64_t)&unk_1EDA539B8;
  *((unsigned char *)v4 + 8) = 1;
  void v4[3] = 0;
  v4[4] = 0;
  v4[2] = 0;
  *((unsigned char *)v4 + 40) = 1;
  v4[6] = (uint64_t)sub_18CA03614;
  qword_1E9192AD0 = (uint64_t)v4;
  int v5 = sub_18CA005E4(a1);
  unsigned int v6 = v5;
  if (*(int *)a1 <= 0)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t *, icu::ZoneMeta *))(*v5 + 56))(v5, a1);
    if (v7) {
      BOOL v8 = *(_DWORD *)a1 <= 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8) {
      goto LABEL_38;
    }
    uint64_t v9 = (UChar **)v7;
    while (1)
    {
      uint64_t v10 = sub_18CA027B8((uint64_t)v9, (int *)a1);
      if (*(int *)a1 > 0) {
        goto LABEL_38;
      }
      if (v10)
      {
        uint64_t v12 = v10[1];
        if (v12)
        {
          int v14 = *(UChar **)v12;
          int v13 = *(UChar **)(v12 + 8);
        }
        else
        {
          int v14 = 0;
          int v13 = 0;
        }
        if ((unint64_t)v14 | (unint64_t)v13) {
          break;
        }
      }
LABEL_32:
      uint64_t v9 = (UChar **)(*(uint64_t (**)(uint64_t *, icu::ZoneMeta *))(*v6 + 56))(v6, a1);
      if (v9) {
        BOOL v22 = *(_DWORD *)a1 <= 0;
      }
      else {
        BOOL v22 = 0;
      }
      if (!v22) {
        goto LABEL_38;
      }
    }
    uint64_t v15 = v10[2];
    if (v15)
    {
      int v16 = *((_DWORD *)v10 + 6);
      if (!v14) {
        goto LABEL_25;
      }
    }
    else
    {
      int v16 = 0;
      if (!v14) {
        goto LABEL_25;
      }
    }
    if (v13)
    {
      BOOL v17 = u_strcmp(v14, v13) == 0;
      uint64_t MetaZoneID = icu::ZoneMeta::findMetaZoneID(v9, v18);
LABEL_26:
      uint64_t v20 = uprv_malloc(0x20uLL);
      if (!v20) {
        goto LABEL_37;
      }
      *(void *)uint64_t v20 = MetaZoneID;
      _OWORD v20[2] = 16;
      *((unsigned char *)v20 + 12) = v17;
      *((void *)v20 + 2) = v15;
      v20[6] = v16;
      icu::TextTrieMap::put(v14, (UErrorCode *)a1, qword_1E9192AD0, v20, (uint64_t *)0x10);
LABEL_28:
      if (*(int *)a1 <= 0 && v13)
      {
        uint64_t v21 = uprv_malloc(0x20uLL);
        if (!v21)
        {
LABEL_37:
          *(_DWORD *)a1 = 7;
          goto LABEL_38;
        }
        *(void *)uint64_t v21 = MetaZoneID;
        v21[2] = 32;
        *((unsigned char *)v21 + 12) = v17;
        *((void *)v21 + 2) = v15;
        _OWORD v21[6] = v16;
        icu::TextTrieMap::put(v13, (UErrorCode *)a1, qword_1E9192AD0, v21, (uint64_t *)0x20);
      }
      goto LABEL_32;
    }
LABEL_25:
    uint64_t MetaZoneID = icu::ZoneMeta::findMetaZoneID(v9, v11);
    BOOL v17 = 0;
    if (!v14) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (!v5)
  {
LABEL_39:
    if (qword_1E9192AD0) {
      (*(void (**)(uint64_t))(*(void *)qword_1E9192AD0 + 8))(qword_1E9192AD0);
    }
    qword_1E9192AD0 = 0;
    return;
  }
LABEL_38:
  (*(void (**)(uint64_t *))(*v6 + 8))(v6);
  if (*(int *)a1 >= 1) {
    goto LABEL_39;
  }

  sub_18CA0A25C(0xFu, (uint64_t)sub_18CA03620);
}

void sub_18CA02ED4(int *a1)
{
  uint64_t v2 = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, a1);
  qword_1E9192B28 = (uint64_t)v2;
  if (*a1 < 1)
  {
    uhash_setValueDeleter((uint64_t)v2, (uint64_t)sub_18CA036A0);
    sub_18CA0A25C(0xFu, (uint64_t)sub_18CA03620);
  }
  else
  {
    qword_1E9192B28 = 0;
  }
}

unsigned __int16 *sub_18CA02F7C(unsigned __int16 *result, unsigned char *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = result[4];
  if (v3 <= 0x1F)
  {
    *a2 = 0;
  }
  else
  {
    char v9 = 0;
    memset(v8, 0, sizeof(v8));
    int v4 = (__int16)v3;
    unsigned int v5 = v3 >> 5;
    if (v4 >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *((unsigned int *)result + 3);
    }
    int v7 = icu::UnicodeString::extract((uint64_t)result, 0, v6, (char *)v8, 129);
    *(_DWORD *)a2 = 1635018093;
    a2[4] = 58;
    uint64_t result = (unsigned __int16 *)memcpy(a2 + 5, v8, v7);
    a2[v7 + 5] = 0;
  }
  return result;
}

void *sub_18CA03054(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v15 = 0;
  int v16 = a2;
  memset(v14, 0, sizeof(v14));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v14, a3, a5);
  if (*a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v14, 0, (const char **)&v16, a3);
    if (result)
    {
      unsigned int v9 = 1;
      do
      {
        if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 96))(a3))
        {
          int v10 = sub_18CA03778((unsigned __int8 *)v16);
          if (v10 != -1)
          {
            uint64_t v11 = a1 + 8 * v10;
            uint64_t v13 = *(void *)(v11 + 8);
            uint64_t v12 = (void *)(v11 + 8);
            if (!v13) {
              void *v12 = &unk_18CA97C60;
            }
          }
        }
        else
        {
          sub_18CA036DC(a1, (unsigned __int8 *)v16, (uint64_t)a3, (uint64_t)a5);
        }
        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v14, v9++, (const char **)&v16, a3);
      }
      while (result);
    }
  }
  return result;
}

void *sub_18CA03180(void *a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  memset(v11, 0, sizeof(v11));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v11, a3, a5);
  if (*a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, 0, (const char **)&v13, a3);
    if (result)
    {
      unsigned int v10 = 1;
      do
      {
        uint64_t result = (void *)(*(uint64_t (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3);
        if (result == 2) {
          uint64_t result = sub_18CA0380C(a1, v13, (uint64_t)a3, a4, a5);
        }
        if (*a5 >= 1) {
          break;
        }
        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, v10++, (const char **)&v13, a3);
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_18CA0329C(uint64_t result)
{
  if ((int)result > 15)
  {
    switch(result)
    {
      case 0x10:
        return 5;
      case 0x20:
        return 6;
      case 0x40:
        return 0;
      default:
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    switch((int)result)
    {
      case 1:
      case 2:
        return result;
      case 4:
        uint64_t result = 3;
        break;
      case 8:
        uint64_t result = 4;
        break;
      default:
        return 0xFFFFFFFFLL;
    }
  }
  return result;
}

unsigned char *sub_18CA0333C(unsigned char *result, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    unsigned int v5 = result;
    if (!result[56])
    {
      uint64_t v10 = 0;
      result[56] = 1;
      while (1)
      {
        uint64_t v11 = *(void **)&v5[8 * v10];
        if (v11)
        {
          uint64_t result = uprv_malloc(0x18uLL);
          if (!result)
          {
            *a5 = U_MEMORY_ALLOCATION_ERROR;
            return result;
          }
          *((void *)result + 1) = a3;
          *((void *)result + 2) = a2;
          if (v10 > 6) {
            uint64_t v12 = 0;
          }
          else {
            uint64_t v12 = (uint64_t *)*(unsigned int *)&asc_18CA97C70[4 * v10];
          }
          *(_DWORD *)uint64_t result = v12;
          uint64_t result = icu::TextTrieMap::put(v11, a5, a4, result, v12);
          if (*(int *)a5 > 0 || v10 >= 6) {
            return result;
          }
        }
        else if (v10 > 5)
        {
          return result;
        }
        ++v10;
      }
    }
  }
  return result;
}

void *sub_18CA03420(void *a1, uint64_t a2, int *a3)
{
  *a1 = &unk_1EDA53AF8;
  a1[1] = a2;
  unsigned int v5 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, a3);
  a1[2] = v5;
  if (*a3 <= 0)
  {
    uhash_setKeyDeleter((uint64_t)v5, (uint64_t)uprv_free);
    uhash_setValueDeleter(a1[2], (uint64_t)sub_18CA034CC);
  }
  return a1;
}

char *sub_18CA034CC(char *result)
{
  if (result != "<dummy>" && result != 0) {
    return (char *)(*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

BOOL sub_18CA03508(int a1, char *__s)
{
  if (strlen(__s) < 5) {
    return 0;
  }
  return *(_DWORD *)__s == 1635018093 && __s[4] == 58;
}

icu::UnicodeString *sub_18CA03560@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a2, a1, 0xFFFFFFFFLL, 0);
  for (unint64_t i = 0; ; ++i)
  {
    int v5 = *(__int16 *)(a2 + 8);
    if (v5 < 0) {
      break;
    }
    if (i >= (unint64_t)*(unsigned __int16 *)(a2 + 8) >> 5) {
      return result;
    }
    unint64_t v6 = (unint64_t)*(unsigned __int16 *)(a2 + 8) >> 5;
LABEL_7:
    if (v6 > i)
    {
      if ((v5 & 2) != 0) {
        uint64_t v7 = a2 + 10;
      }
      else {
        uint64_t v7 = *(void *)(a2 + 24);
      }
      if (*(_WORD *)(v7 + 2 * i) == 58) {
        uint64_t result = icu::UnicodeString::setCharAt((icu::UnicodeString *)a2, i, 47);
      }
    }
  }
  if ((uint64_t)i < *(int *)(a2 + 12))
  {
    unint64_t v6 = *(unsigned int *)(a2 + 12);
    goto LABEL_7;
  }
  return result;
}

void sub_18CA03614(void *a1)
{
  if (a1) {
    uprv_free(a1);
  }
}

uint64_t sub_18CA03620()
{
  if (qword_1E9192B28)
  {
    uhash_close((unsigned char *)qword_1E9192B28);
    qword_1E9192B28 = 0;
  }
  atomic_store(0, &dword_1E9192B38);
  if (qword_1E9192AD0)
  {
    (*(void (**)(uint64_t))(*(void *)qword_1E9192AD0 + 8))(qword_1E9192AD0);
    qword_1E9192AD0 = 0;
  }
  atomic_store(0, &dword_1E9192B30);
  return 1;
}

char *sub_18CA036A0(char *result)
{
  if (result != "<empty>" && result != 0) {
    return (char *)(*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *sub_18CA036DC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)sub_18CA03778(a2);
  if (result != -1)
  {
    uint64_t v8 = a1 + 8 * (int)result;
    uint64_t v10 = *(void *)(v8 + 8);
    unsigned int v9 = (void *)(v8 + 8);
    if (!v10)
    {
      int v11 = 0;
      if (a3) {
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a3 + 32))(a3, &v11, a4);
      }
      else {
        uint64_t result = &unk_18CA97C60;
      }
      *unsigned int v9 = result;
    }
  }
  return result;
}

uint64_t sub_18CA03778(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (!*a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = a1[1];
  if (!a1[1] || a1[2]) {
    return 0xFFFFFFFFLL;
  }
  if (v1 == 115)
  {
    if (v2 == 100) {
      int v10 = 6;
    }
    else {
      int v10 = -1;
    }
    if (v2 == 115) {
      unsigned int v11 = 5;
    }
    else {
      unsigned int v11 = v10;
    }
    if (v2 == 103) {
      return 4;
    }
    else {
      return v11;
    }
  }
  else
  {
    int v5 = v1 != 101 || v2 != 99;
    unsigned int v6 = v5 << 31 >> 31;
    if (v2 == 100) {
      int v7 = 3;
    }
    else {
      int v7 = -1;
    }
    if (v2 == 115) {
      int v8 = 2;
    }
    else {
      int v8 = v7;
    }
    if (v2 == 103) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = v8;
    }
    if (v1 == 108) {
      return v9;
    }
    else {
      return v6;
    }
  }
}

void *sub_18CA0380C(void *result, char *a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*a5 <= 0)
  {
    unsigned int v9 = result;
    uint64_t result = (void *)uhash_get(result[2], (uint64_t)a2);
    int v10 = (char *)result;
    if (result)
    {
LABEL_3:
      if (v10 != "<dummy>") {
        return (void *)(*(uint64_t (**)(char *, char *, uint64_t, uint64_t, int *))(*(void *)v10 + 24))(v10, a2, a3, a4, a5);
      }
      return result;
    }
    memset(v17, 0, sizeof(v17));
    if (sub_18CA03508((int)v9, a2))
    {
      int v11 = strlen(a2);
      icu::UnicodeString::UnicodeString(v17, a2 + 5, (v11 - 5), 0);
      uint64_t v12 = *(void *)(v9[1] + 248);
    }
    else
    {
      sub_18CA03560((uint64_t)a2, (uint64_t)v17);
      uint64_t v12 = *(void *)(v9[1] + 240);
    }
    Terminateduint64_t Buffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v17);
    if (uhash_get(v12, TerminatedBuffer))
    {
      int v10 = "<dummy>";
    }
    else
    {
      int v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x40, v14);
      if (!v16)
      {
        *a5 = 7;
        return icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)v17);
      }
      int v10 = (char *)v16;
      *int v16 = (uint64_t)&unk_1EDA53C30;
      *(_OWORD *)(v16 + 1) = 0u;
      *(_OWORD *)(v16 + 3) = 0u;
      *(_OWORD *)(v16 + 5) = 0u;
      v16[7] = 0;
    }
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v17);
    uint64_t result = sub_18CA03A48((int)v9, a2, a5);
    if (*a5 < 1)
    {
      uint64_t result = (void *)uhash_put(v9[2], (uint64_t)result, (uint64_t)v10, a5);
      if (*a5 > 0) {
        return result;
      }
      goto LABEL_3;
    }
    if (v10 != "<dummy>") {
      return (void *)(*(uint64_t (**)(char *))(*(void *)v10 + 8))(v10);
    }
  }
  return result;
}

unsigned char *sub_18CA03A48(int a1, char *__s, _DWORD *a3)
{
  size_t v5 = strlen(__s);
  int v6 = v5;
  size_t v7 = (uint64_t)((v5 << 32) + 0x100000000) >> 32;
  int v8 = uprv_malloc(v7);
  unsigned int v9 = v8;
  if (v8)
  {
    memcpy(v8, __s, v7);
    v9[v6] = 0;
  }
  else
  {
    *a3 = 7;
  }
  return v9;
}

icu::TimeZoneRule *icu::TimeZoneRule::TimeZoneRule(icu::TimeZoneRule *this, UChar **a2, int a3, int a4)
{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::TimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  return this;
}

icu::TimeZoneRule *icu::TimeZoneRule::TimeZoneRule(icu::TimeZoneRule *this, UChar **a2)
{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::TimeZoneRule *)((char *)this + 8), a2 + 1);
  *((void *)this + 9) = a2[9];
  return this;
}

void icu::TimeZoneRule::~TimeZoneRule(icu::TimeZoneRule *this)
{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::~UnicodeString((icu::TimeZoneRule *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

uint64_t icu::TimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }
  return a1;
}

uint64_t icu::TimeZoneRule::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 16);
    if (v5)
    {
      if ((*(_WORD *)(a2 + 16) & 1) == 0) {
        return 0;
      }
LABEL_17:
      if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)) {
        return *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76);
      }
      return 0;
    }
    if ((v5 & 0x8000) != 0) {
      int v6 = *(_DWORD *)(a1 + 20);
    }
    else {
      int v6 = v5 >> 5;
    }
    uint64_t result = 0;
    unsigned int v7 = *(unsigned __int16 *)(a2 + 16);
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a2 + 20);
    }
    if ((v7 & 1) == 0 && v6 == v8)
    {
      uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)(a2 + 8), v6);
      if (result) {
        goto LABEL_17;
      }
    }
  }
  return result;
}

uint64_t icu::TimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) ^ 1;
}

UChar **icu::TimeZoneRule::getName(UChar **this, UChar **a2)
{
  icu::UnicodeString::operator=(a2, this + 1);
  return a2;
}

uint64_t icu::TimeZoneRule::getRawOffset(icu::TimeZoneRule *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t icu::TimeZoneRule::getDSTSavings(icu::TimeZoneRule *this)
{
  return *((unsigned int *)this + 19);
}

BOOL icu::TimeZoneRule::isEquivalentTo(icu::TimeZoneRule *this, const icu::TimeZoneRule *a2)
{
  if (this == a2) {
    return 1;
  }
  if (!this) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_18C828FD8(*(void *)(*(void *)this - 8), *(void *)(*(void *)a2 - 8));
  if (result) {
    return *((_DWORD *)this + 18) == *((_DWORD *)a2 + 18) && *((_DWORD *)this + 19) == *((_DWORD *)a2 + 19);
  }
  return result;
}

void *icu::InitialTimeZoneRule::getStaticClassID(icu::InitialTimeZoneRule *this)
{
  return &unk_1E9192B40;
}

void *icu::InitialTimeZoneRule::getDynamicClassID(icu::InitialTimeZoneRule *this)
{
  return &unk_1E9192B40;
}

icu::InitialTimeZoneRule *icu::InitialTimeZoneRule::InitialTimeZoneRule(icu::InitialTimeZoneRule *this, UChar **a2, int a3, int a4)
{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(void *)this = &unk_1EDA53D88;
  return this;
}

{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(void *)this = &unk_1EDA53D88;
  return this;
}

icu::InitialTimeZoneRule *icu::InitialTimeZoneRule::InitialTimeZoneRule(icu::InitialTimeZoneRule *this, UChar **a2)
{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2 + 1);
  *((void *)this + 9) = a2[9];
  *(void *)this = &unk_1EDA53D88;
  return this;
}

{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2 + 1);
  *((void *)this + 9) = a2[9];
  *(void *)this = &unk_1EDA53D88;
  return this;
}

void icu::InitialTimeZoneRule::~InitialTimeZoneRule(icu::InitialTimeZoneRule *this)
{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::~UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::~UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

void icu::InitialTimeZoneRule::~InitialTimeZoneRule(icu::InitialTimeZoneRule *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::~UnicodeString(a2, (icu::InitialTimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);

  icu::UMemory::operator delete(v3);
}

uint64_t *icu::InitialTimeZoneRule::clone@<X0>(UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x50, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    uint64_t *v4 = (uint64_t)&unk_1EDA53D20;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 1), this + 1);
    v5[9] = (uint64_t)this[9];
    uint64_t *v5 = (uint64_t)&unk_1EDA53D88;
  }
  return v5;
}

uint64_t icu::InitialTimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }
  return a1;
}

uint64_t icu::InitialTimeZoneRule::operator==(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*a1 - 8), *(void *)(*a2 - 8));
  if (result)
  {
    return icu::TimeZoneRule::operator==((uint64_t)a1, (uint64_t)a2);
  }
  return result;
}

uint64_t icu::InitialTimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) ^ 1;
}

BOOL icu::InitialTimeZoneRule::isEquivalentTo(icu::InitialTimeZoneRule *this, const icu::TimeZoneRule *a2)
{
  if (this == a2) {
    return 1;
  }
  if (!this) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_18C828FD8(*(void *)(*(void *)this - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    return icu::TimeZoneRule::isEquivalentTo(this, a2);
  }
  return result;
}

uint64_t icu::InitialTimeZoneRule::getFirstStart(icu::InitialTimeZoneRule *this, int a2, int a3, double *a4)
{
  return 0;
}

uint64_t icu::InitialTimeZoneRule::getFinalStart(icu::InitialTimeZoneRule *this, int a2, int a3, double *a4)
{
  return 0;
}

uint64_t icu::InitialTimeZoneRule::getNextStart(icu::InitialTimeZoneRule *this, double a2, int a3, int a4, signed __int8 a5, double *a6)
{
  return 0;
}

uint64_t icu::InitialTimeZoneRule::getPreviousStart(icu::InitialTimeZoneRule *this, double a2, int a3, int a4, signed __int8 a5, double *a6)
{
  return 0;
}

void *icu::AnnualTimeZoneRule::getStaticClassID(icu::AnnualTimeZoneRule *this)
{
  return &unk_1E9192B41;
}

void *icu::AnnualTimeZoneRule::getDynamicClassID(icu::AnnualTimeZoneRule *this)
{
  return &unk_1E9192B41;
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::AnnualTimeZoneRule *this, UChar **a2, int a3, int a4, const icu::DateTimeRule *a5, int a6, int a7)
{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(void *)this = &unk_1EDA53DF0;
  uint64_t v15 = (icu::DateTimeRule *)icu::UMemory::operator new(v14, (icu::UMemory *)0x28, v13);
  if (v15) {
    icu::DateTimeRule::DateTimeRule(v15, a5);
  }
  *((void *)this + 10) = v15;
  *((_DWORD *)this + 22) = a6;
  *((_DWORD *)this + 23) = a7;
  return this;
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::AnnualTimeZoneRule *this, UChar **a2, int a3, int a4, icu::DateTimeRule *a5, int a6, int a7)
{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(void *)this = &unk_1EDA53DF0;
  *((void *)this + 10) = a5;
  *((_DWORD *)this + 22) = a6;
  *((_DWORD *)this + 23) = a7;
  return this;
}

{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(void *)this = &unk_1EDA53DF0;
  *((void *)this + 10) = a5;
  *((_DWORD *)this + 22) = a6;
  *((_DWORD *)this + 23) = a7;
  return this;
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::AnnualTimeZoneRule *this, const icu::AnnualTimeZoneRule *a2)
{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), (UChar **)a2 + 1);
  *((void *)this + 9) = *((void *)a2 + 9);
  *(void *)this = &unk_1EDA53DF0;
  int v6 = (icu::DateTimeRule *)icu::UMemory::operator new(v5, (icu::UMemory *)0x28, v4);
  if (v6) {
    icu::DateTimeRule::DateTimeRule(v6, *((const icu::DateTimeRule **)a2 + 10));
  }
  *((void *)this + 10) = v6;
  *((void *)this + 11) = *((void *)a2 + 11);
  return this;
}

void icu::AnnualTimeZoneRule::~AnnualTimeZoneRule(icu::AnnualTimeZoneRule *this)
{
  *(void *)this = &unk_1EDA53DF0;
  uint64_t v2 = *((void *)this + 10);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::~UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::AnnualTimeZoneRule::~AnnualTimeZoneRule(this);

  icu::UMemory::operator delete(v1);
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::clone@<X0>(icu::AnnualTimeZoneRule *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = (icu::AnnualTimeZoneRule *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result) {
    return icu::AnnualTimeZoneRule::AnnualTimeZoneRule(result, this);
  }
  return result;
}

uint64_t icu::AnnualTimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    uint64_t v5 = *(void *)(a1 + 80);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    icu::DateTimeRule::clone(*(icu::DateTimeRule **)(a2 + 80), v4);
    *(void *)(a1 + 80) = v6;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
  }
  return a1;
}

BOOL icu::AnnualTimeZoneRule::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    BOOL result = icu::DateTimeRule::operator==(*(void *)(a1 + 80), *(void *)(a2 + 80));
    if (result) {
      return *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88) && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92);
    }
  }
  return result;
}

uint64_t icu::AnnualTimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) ^ 1;
}

uint64_t icu::AnnualTimeZoneRule::getRule(icu::AnnualTimeZoneRule *this)
{
  return *((void *)this + 10);
}

uint64_t icu::AnnualTimeZoneRule::getStartYear(icu::AnnualTimeZoneRule *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t icu::AnnualTimeZoneRule::getEndYear(icu::AnnualTimeZoneRule *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t icu::AnnualTimeZoneRule::getStartInYear(icu::AnnualTimeZoneRule *this, int a2, int a3, int a4, double *a5)
{
  if (*((_DWORD *)this + 22) > a2 || *((_DWORD *)this + 23) < a2) {
    return 0;
  }
  DateRuleint Type = icu::DateTimeRule::getDateRuleType(*((icu::DateTimeRule **)this + 10));
  if (DateRuleType == 1)
  {
    int RuleWeekInMonth = icu::DateTimeRule::getRuleWeekInMonth(*((icu::DateTimeRule **)this + 10));
    int RuleMonth = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
    if (RuleWeekInMonth < 1)
    {
      int v27 = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
      HIDWORD(v29) = -1030792151 * a2 + 85899344;
      LODWORD(v29) = HIDWORD(v29);
      unsigned int v28 = v29 >> 2;
      LODWORD(v29) = HIDWORD(v29);
      if ((v29 >> 4) >= 0xA3D70B) {
        int v30 = 0;
      }
      else {
        int v30 = 12;
      }
      if (v28 <= 0x28F5C28) {
        int v31 = v30;
      }
      else {
        int v31 = 12;
      }
      if ((a2 & 3) != 0) {
        int v31 = 0;
      }
      double v19 = sub_18C93E22C(a2, RuleMonth, byte_18CA934D0[v31 + v27]);
      int v18 = 0;
      int v20 = 7 * RuleWeekInMonth + 7;
    }
    else
    {
      int v18 = 1;
      double v19 = sub_18C93E22C(a2, RuleMonth, 1);
      int v20 = 7 * RuleWeekInMonth - 7;
    }
    double v32 = v19 + (double)v20;
    goto LABEL_34;
  }
  int v12 = DateRuleType;
  if (DateRuleType)
  {
    int v21 = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
    int RuleDayOfMonth = icu::DateTimeRule::getRuleDayOfMonth(*((icu::DateTimeRule **)this + 10));
    int v23 = RuleDayOfMonth;
    if (v12 == 3)
    {
      if (v21 == 1)
      {
        HIDWORD(v25) = -1030792151 * a2 + 85899344;
        LODWORD(v25) = HIDWORD(v25);
        unsigned int v24 = v25 >> 2;
        LODWORD(v25) = HIDWORD(v25);
        if ((v25 >> 4) >= 0xA3D70B) {
          int v26 = 28;
        }
        else {
          int v26 = 29;
        }
        if (v24 > 0x28F5C28) {
          int v26 = 29;
        }
        if ((a2 & 3) != 0) {
          int v26 = 28;
        }
        int v18 = 0;
        if (RuleDayOfMonth == 29) {
          int v23 = v26;
        }
        else {
          int v23 = RuleDayOfMonth;
        }
      }
      else
      {
        int v18 = 0;
      }
    }
    else
    {
      int v18 = 1;
    }
    double v32 = sub_18C93E22C(a2, v21, v23);
LABEL_34:
    int v33 = sub_18C93E5EC(v32);
    RuleDayOfWeeuint64_t k = icu::DateTimeRule::getRuleDayOfWeek(*((icu::DateTimeRule **)this + 10));
    BOOL v35 = RuleDayOfWeek > v33;
    if (v18) {
      int v36 = 7;
    }
    else {
      int v36 = -7;
    }
    if (v18) {
      BOOL v35 = RuleDayOfWeek < v33;
    }
    if (v35) {
      int v37 = v36;
    }
    else {
      int v37 = 0;
    }
    double v15 = v32 + (double)(RuleDayOfWeek - v33 + v37);
    goto LABEL_43;
  }
  int v13 = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
  int v14 = icu::DateTimeRule::getRuleDayOfMonth(*((icu::DateTimeRule **)this + 10));
  double v15 = sub_18C93E22C(a2, v13, v14);
LABEL_43:
  *a5 = (double)(int)icu::DateTimeRule::getRuleMillisInDay(*((icu::DateTimeRule **)this + 10)) + v15 * 86400000.0;
  if (icu::DateTimeRule::getTimeRuleType(*((icu::DateTimeRule **)this + 10)) != 2) {
    *a5 = *a5 - (double)a3;
  }
  if (!icu::DateTimeRule::getTimeRuleType(*((icu::DateTimeRule **)this + 10))) {
    *a5 = *a5 - (double)a4;
  }
  return 1;
}

BOOL icu::AnnualTimeZoneRule::isEquivalentTo(icu::AnnualTimeZoneRule *this, const icu::TimeZoneRule *a2)
{
  if (this == a2) {
    return 1;
  }
  if (!this) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_18C828FD8(*(void *)(*(void *)this - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    BOOL result = icu::TimeZoneRule::isEquivalentTo(this, a2);
    if (result)
    {
      BOOL result = icu::DateTimeRule::operator==(*((void *)this + 10), *((void *)a2 + 10));
      if (result) {
        return *((_DWORD *)this + 22) == *((_DWORD *)a2 + 22) && *((_DWORD *)this + 23) == *((_DWORD *)a2 + 23);
      }
    }
  }
  return result;
}

uint64_t icu::AnnualTimeZoneRule::getFirstStart(icu::AnnualTimeZoneRule *this, int a2, int a3, double *a4)
{
  return icu::AnnualTimeZoneRule::getStartInYear(this, *((_DWORD *)this + 22), a2, a3, a4);
}

uint64_t icu::AnnualTimeZoneRule::getFinalStart(icu::AnnualTimeZoneRule *this, int a2, int a3, double *a4)
{
  int v7 = *((_DWORD *)this + 23);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  else {
    return icu::AnnualTimeZoneRule::getStartInYear(this, v7, a2, a3, a4);
  }
}

uint64_t icu::AnnualTimeZoneRule::getNextStart(icu::AnnualTimeZoneRule *this, double a2, uint64_t a3, uint64_t a4, int a5, double *a6)
{
  uint64_t v15 = 0;
  *(void *)int v16 = 0;
  uint64_t v14 = 0;
  sub_18C93E568(&v16[1], v16, (_DWORD *)&v15 + 1, (int *)&v15, (int *)&v14 + 1, &v14, a2);
  if (v16[1] < *((_DWORD *)this + 22)) {
    return (*(uint64_t (**)(icu::AnnualTimeZoneRule *, uint64_t, uint64_t, double *))(*(void *)this + 56))(this, a3, a4, a6);
  }
  double v13 = 0.0;
  uint64_t result = icu::AnnualTimeZoneRule::getStartInYear(this, v16[1], a3, a4, &v13);
  if (result)
  {
    if (v13 >= a2 && (a5 || v13 != a2))
    {
      *a6 = v13;
      return 1;
    }
    else
    {
      return icu::AnnualTimeZoneRule::getStartInYear(this, v16[1] + 1, a3, a4, a6);
    }
  }
  return result;
}

uint64_t icu::AnnualTimeZoneRule::getPreviousStart(icu::AnnualTimeZoneRule *this, double a2, uint64_t a3, uint64_t a4, int a5, double *a6)
{
  uint64_t v15 = 0;
  *(void *)int v16 = 0;
  uint64_t v14 = 0;
  sub_18C93E568(&v16[1], v16, (_DWORD *)&v15 + 1, (int *)&v15, (int *)&v14 + 1, &v14, a2);
  if (v16[1] > *((_DWORD *)this + 23)) {
    return (*(uint64_t (**)(icu::AnnualTimeZoneRule *, uint64_t, uint64_t, double *))(*(void *)this + 64))(this, a3, a4, a6);
  }
  double v13 = 0.0;
  uint64_t result = icu::AnnualTimeZoneRule::getStartInYear(this, v16[1], a3, a4, &v13);
  if (result)
  {
    if (v13 <= a2 && (a5 || v13 != a2))
    {
      *a6 = v13;
      return 1;
    }
    else
    {
      return icu::AnnualTimeZoneRule::getStartInYear(this, v16[1] - 1, a3, a4, a6);
    }
  }
  return result;
}

void *icu::TimeArrayTimeZoneRule::getStaticClassID(icu::TimeArrayTimeZoneRule *this)
{
  return &unk_1E9192B42;
}

void *icu::TimeArrayTimeZoneRule::getDynamicClassID(icu::TimeArrayTimeZoneRule *this)
{
  return &unk_1E9192B42;
}

uint64_t icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(uint64_t a1, UChar **a2, int a3, int a4, const double *a5, uint64_t a6, int a7)
{
  *(void *)a1 = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = a3;
  *(_DWORD *)(a1 + 76) = a4;
  *(void *)a1 = &unk_1EDA53E58;
  *(_DWORD *)(a1 + 80) = a7;
  *(void *)(a1 + 88) = 0;
  UErrorCode v14 = U_ZERO_ERROR;
  icu::TimeArrayTimeZoneRule::initStartTimes((icu::TimeArrayTimeZoneRule *)a1, a5, a6, &v14);
  return a1;
}

uint64_t icu::TimeArrayTimeZoneRule::initStartTimes(icu::TimeArrayTimeZoneRule *this, const double *a2, uint64_t a3, UErrorCode *a4)
{
  unsigned int v8 = (char *)*((void *)this + 11);
  unsigned int v9 = (char *)this + 96;
  if (v8) {
    BOOL v10 = v8 == v9;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    uprv_free(v8);
  }
  if ((int)a3 < 33)
  {
    *((void *)this + 11) = v9;
    int v11 = (char *)this + 96;
  }
  else
  {
    int v11 = (char *)uprv_malloc(8 * a3);
    *((void *)this + 11) = v11;
    if (!v11)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      int v12 = (_DWORD *)((char *)this + 84);
LABEL_14:
      uint64_t v13 = 0;
      _DWORD *v12 = 0;
      return v13;
    }
  }
  memcpy(v11, a2, 8 * (int)a3);
  *((_DWORD *)this + 21) = a3;
  int v12 = (_DWORD *)((char *)this + 84);
  uint64_t v13 = 1;
  uprv_sortArray((uint64_t)v11, a3, 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18CA055D4, 0, 1, (int *)a4);
  if (*(int *)a4 >= 1)
  {
    UErrorCode v14 = (char *)*((void *)this + 11);
    if (v14 && v14 != v9) {
      uprv_free(v14);
    }
    goto LABEL_14;
  }
  return v13;
}

icu::TimeArrayTimeZoneRule *icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(icu::TimeArrayTimeZoneRule *this, const icu::TimeArrayTimeZoneRule *a2)
{
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::UnicodeString((icu::TimeArrayTimeZoneRule *)((char *)this + 8), (UChar **)a2 + 1);
  *((void *)this + 9) = *((void *)a2 + 9);
  *(void *)this = &unk_1EDA53E58;
  uint64_t v4 = *((unsigned int *)a2 + 21);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((void *)this + 11) = 0;
  UErrorCode v6 = U_ZERO_ERROR;
  icu::TimeArrayTimeZoneRule::initStartTimes(this, *((const double **)a2 + 11), v4, &v6);
  return this;
}

void icu::TimeArrayTimeZoneRule::~TimeArrayTimeZoneRule(icu::TimeArrayTimeZoneRule *this)
{
  *(void *)this = &unk_1EDA53E58;
  uint64_t v2 = (char *)*((void *)this + 11);
  unsigned int v3 = (char *)this + 96;
  if (v2) {
    BOOL v4 = v2 == v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    uprv_free(v2);
  }
  *(void *)this = &unk_1EDA53D20;
  icu::UnicodeString::~UnicodeString(v3, (icu::TimeArrayTimeZoneRule *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::TimeArrayTimeZoneRule::~TimeArrayTimeZoneRule(this);

  icu::UMemory::operator delete(v1);
}

icu::TimeArrayTimeZoneRule *icu::TimeArrayTimeZoneRule::clone@<X0>(icu::TimeArrayTimeZoneRule *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::TimeArrayTimeZoneRule *)icu::UMemory::operator new(a3, (icu::UMemory *)0x160, a2);
  if (result) {
    return icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(result, this);
  }
  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    UErrorCode v5 = U_ZERO_ERROR;
    icu::TimeArrayTimeZoneRule::initStartTimes((icu::TimeArrayTimeZoneRule *)a1, *(const double **)(a2 + 88), *(unsigned int *)(a2 + 84), &v5);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  }
  return a1;
}

uint64_t icu::TimeArrayTimeZoneRule::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    uint64_t result = icu::TimeZoneRule::operator==(a1, a2);
    if (result)
    {
      if (*(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
        return 0;
      }
      uint64_t v5 = *(unsigned int *)(a1 + 84);
      if (v5 != *(_DWORD *)(a2 + 84)) {
        return 0;
      }
      if ((int)v5 >= 1)
      {
        UErrorCode v6 = *(double **)(a1 + 88);
        int v7 = *(double **)(a2 + 88);
        uint64_t v8 = v5 - 1;
        do
        {
          double v9 = *v6++;
          double v10 = v9;
          double v11 = *v7++;
          double v12 = v11;
          BOOL v14 = v8-- != 0;
          uint64_t result = v10 == v12;
        }
        while (v10 == v12 && v14);
        return result;
      }
      return 1;
    }
  }
  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) ^ 1;
}

uint64_t icu::TimeArrayTimeZoneRule::getTimeType(icu::TimeArrayTimeZoneRule *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t icu::TimeArrayTimeZoneRule::getStartTimeAt(icu::TimeArrayTimeZoneRule *this, unsigned int a2, double *a3)
{
  uint64_t result = 0;
  if ((a2 & 0x80000000) == 0 && *((_DWORD *)this + 21) > (signed int)a2)
  {
    *a3 = *(double *)(*((void *)this + 11) + 8 * a2);
    return 1;
  }
  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::countStartTimes(icu::TimeArrayTimeZoneRule *this)
{
  return *((unsigned int *)this + 21);
}

BOOL icu::TimeArrayTimeZoneRule::isEquivalentTo(double **this, double **a2)
{
  if (this == a2) {
    return 1;
  }
  if (!this) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_18C828FD8(*((void *)*this - 1), *((void *)*a2 - 1));
  if (result)
  {
    BOOL result = icu::TimeZoneRule::isEquivalentTo((icu::TimeZoneRule *)this, (const icu::TimeZoneRule *)a2);
    if (result)
    {
      if (*((_DWORD *)this + 20) != *((_DWORD *)a2 + 20)) {
        return 0;
      }
      uint64_t v5 = *((unsigned int *)this + 21);
      if (v5 != *((_DWORD *)a2 + 21)) {
        return 0;
      }
      if ((int)v5 >= 1)
      {
        UErrorCode v6 = this[11];
        int v7 = a2[11];
        BOOL result = 1;
        while (*v6 == *v7)
        {
          ++v7;
          ++v6;
          if (!--v5) {
            return result;
          }
        }
        return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::getFirstStart(icu::TimeArrayTimeZoneRule *this, int a2, int a3, double *a4)
{
  if (*((int *)this + 21) < 1) {
    return 0;
  }
  BOOL v4 = (double *)*((void *)this + 11);
  if (!v4) {
    return 0;
  }
  double v5 = *v4;
  double v6 = (double)a2;
  int v7 = *((_DWORD *)this + 20);
  if (v7 == 2) {
    double v6 = 0.0;
  }
  double v8 = v5 - v6;
  if (v7) {
    double v9 = 0.0;
  }
  else {
    double v9 = (double)a3;
  }
  *a4 = v8 - v9;
  return 1;
}

double icu::TimeArrayTimeZoneRule::getUTC(icu::TimeArrayTimeZoneRule *this, double a2, int a3, int a4)
{
  int v4 = *((_DWORD *)this + 20);
  double v5 = (double)a3;
  if (v4 == 2) {
    double v5 = 0.0;
  }
  double v6 = a2 - v5;
  double v7 = (double)a4;
  if (v4) {
    double v7 = 0.0;
  }
  return v6 - v7;
}

uint64_t icu::TimeArrayTimeZoneRule::getFinalStart(icu::TimeArrayTimeZoneRule *this, int a2, int a3, double *a4)
{
  int v4 = *((_DWORD *)this + 21);
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    return 0;
  }
  uint64_t v7 = *((void *)this + 11);
  if (!v7) {
    return 0;
  }
  double v8 = *(double *)(v7 + 8 * v6);
  double v9 = (double)a2;
  int v10 = *((_DWORD *)this + 20);
  if (v10 == 2) {
    double v9 = 0.0;
  }
  double v11 = v8 - v9;
  if (v10) {
    double v12 = 0.0;
  }
  else {
    double v12 = (double)a3;
  }
  *a4 = v11 - v12;
  return 1;
}

BOOL icu::TimeArrayTimeZoneRule::getNextStart(icu::TimeArrayTimeZoneRule *this, double a2, int a3, int a4, int a5, double *a6)
{
  int v6 = *((_DWORD *)this + 21);
  if (v6 < 1)
  {
    LODWORD(v11) = *((_DWORD *)this + 21);
  }
  else
  {
    uint64_t v7 = *((void *)this + 11);
    int v8 = *((_DWORD *)this + 20);
    double v9 = (double)a3;
    double v10 = 0.0;
    if (v8 == 2) {
      double v9 = 0.0;
    }
    if (!v8) {
      double v10 = (double)a4;
    }
    uint64_t v11 = *((unsigned int *)this + 21);
    while (1)
    {
      BOOL v12 = a5 == 0;
      uint64_t v13 = v11 - 1;
      double v14 = *(double *)(v7 + 8 * (v11 - 1)) - v9 - v10;
      if (v14 != a2) {
        BOOL v12 = 0;
      }
      if (v14 < a2 || v12) {
        break;
      }
      *a6 = v14;
      --v11;
      if ((unint64_t)(v13 + 1) <= 1)
      {
        LODWORD(v11) = 0;
        return v11 != v6;
      }
    }
  }
  return v11 != v6;
}

uint64_t icu::TimeArrayTimeZoneRule::getPreviousStart(icu::TimeArrayTimeZoneRule *this, double a2, int a3, int a4, int a5, double *a6)
{
  uint64_t v6 = *((unsigned int *)this + 21);
  while ((int)v6 >= 1)
  {
    BOOL v7 = a5 != 0;
    uint64_t v8 = *((void *)this + 11) + 8 * v6--;
    double v9 = *(double *)(v8 - 8);
    int v10 = *((_DWORD *)this + 20);
    if (v10 == 2) {
      double v11 = 0.0;
    }
    else {
      double v11 = (double)a3;
    }
    double v12 = v9 - v11;
    if (v10) {
      double v13 = 0.0;
    }
    else {
      double v13 = (double)a4;
    }
    double v14 = v12 - v13;
    if (v14 != a2) {
      BOOL v7 = 0;
    }
    if (v14 < a2 || v7)
    {
      *a6 = v14;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_18CA055D4(uint64_t a1, double *a2, double *a3)
{
  if (*a2 < *a3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 != *a3;
  }
}

void *icu::TimeZoneTransition::getStaticClassID(icu::TimeZoneTransition *this)
{
  return &unk_1E9192B43;
}

void *icu::TimeZoneTransition::getDynamicClassID(icu::TimeZoneTransition *this)
{
  return &unk_1E9192B43;
}

icu::TimeZoneTransition *icu::TimeZoneTransition::TimeZoneTransition(icu::TimeZoneTransition *this, double a2, const icu::TimeZoneRule *a3, const icu::TimeZoneRule *a4)
{
  *(void *)this = &unk_1EDA53F20;
  *((double *)this + 1) = a2;
  *((void *)this + 2) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a3 + 24))(a3);
  *((void *)this + 3) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a4 + 24))(a4);
  return this;
}

{
  *(void *)this = &unk_1EDA53F20;
  *((double *)this + 1) = a2;
  *((void *)this + 2) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a3 + 24))(a3);
  *((void *)this + 3) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a4 + 24))(a4);
  return this;
}

void *icu::TimeZoneTransition::TimeZoneTransition(void *this)
{
  *this = &unk_1EDA53F20;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1EDA53F20;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

icu::TimeZoneTransition *icu::TimeZoneTransition::TimeZoneTransition(icu::TimeZoneTransition *this, const icu::TimeZoneTransition *a2)
{
  *(void *)this = &unk_1EDA53F20;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 2) = 0;
  int v4 = (void *)((char *)this + 16);
  *((void *)this + 3) = 0;
  uint64_t v5 = *((void *)a2 + 2);
  if (v5) {
    void *v4 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  uint64_t v6 = *((void *)a2 + 3);
  if (v6) {
    *((void *)this + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  return this;
}

void icu::TimeZoneTransition::~TimeZoneTransition(icu::TimeZoneTransition *this)
{
  *(void *)this = &unk_1EDA53F20;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::TimeZoneTransition::~TimeZoneTransition(this);

  icu::UMemory::operator delete(v1);
}

icu::TimeZoneTransition *icu::TimeZoneTransition::clone@<X0>(icu::TimeZoneTransition *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = (icu::TimeZoneTransition *)icu::UMemory::operator new(a3, (icu::UMemory *)0x20, a2);
  if (result) {
    return icu::TimeZoneTransition::TimeZoneTransition(result, this);
  }
  return result;
}

icu::TimeZoneTransition *icu::TimeZoneTransition::operator=(icu::TimeZoneTransition *this, uint64_t a2)
{
  if (this != (icu::TimeZoneTransition *)a2)
  {
    *((void *)this + 1) = *(void *)(a2 + 8);
    icu::TimeZoneTransition::setFrom(this, *(const icu::TimeZoneRule **)(a2 + 16));
    icu::TimeZoneTransition::setTo(this, *(const icu::TimeZoneRule **)(a2 + 24));
  }
  return this;
}

uint64_t icu::TimeZoneTransition::setFrom(icu::TimeZoneTransition *this, const icu::TimeZoneRule *a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a2 + 24))(a2);
  *((void *)this + 2) = result;
  return result;
}

uint64_t icu::TimeZoneTransition::setTo(icu::TimeZoneTransition *this, const icu::TimeZoneRule *a2)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a2 + 24))(a2);
  *((void *)this + 3) = result;
  return result;
}

BOOL icu::TimeZoneTransition::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a2 + 16);
    if (v5 | v6)
    {
      if (!v5 || !v6 || !(*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5)) {
        return 0;
      }
    }
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a2 + 24);
    if (v7 | v8)
    {
      if (!v7 || !v8 || ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7) & 1) == 0) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

BOOL icu::TimeZoneTransition::operator!=(uint64_t a1, uint64_t a2)
{
  return !icu::TimeZoneTransition::operator==(a1, a2);
}

uint64_t icu::TimeZoneTransition::setTime(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

uint64_t icu::TimeZoneTransition::adoptFrom(icu::TimeZoneTransition *this, icu::TimeZoneRule *a2)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = a2;
  return result;
}

uint64_t icu::TimeZoneTransition::adoptTo(icu::TimeZoneTransition *this, icu::TimeZoneRule *a2)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = a2;
  return result;
}

double icu::TimeZoneTransition::getTime(icu::TimeZoneTransition *this)
{
  return *((double *)this + 1);
}

uint64_t icu::TimeZoneTransition::getTo(icu::TimeZoneTransition *this)
{
  return *((void *)this + 3);
}

uint64_t icu::TimeZoneTransition::getFrom(icu::TimeZoneTransition *this)
{
  return *((void *)this + 2);
}

uint64_t uameasfmt_open(const char *a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*a4 > 0) {
    return 0;
  }
  if (a2 >= 5)
  {
    uint64_t v4 = 0;
    *a4 = 1;
    return v4;
  }
  uint64_t v8 = dword_18CA97D18[(int)a2];
  uint64_t v4 = icu::UMemory::operator new((icu::UMemory *)0x178, a2);
  if (v4)
  {
    icu::Locale::Locale((icu::Locale *)v10, a1, 0, 0, 0);
    icu::MeasureFormat::MeasureFormat(v4, v10, v8, a3, a4);
    icu::Locale::~Locale((icu::Locale *)v10);
    if (*a4 < 1) {
      return v4;
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    return 0;
  }
  if (*a4 >= 1) {
    return 0;
  }
  return v4;
}

uint64_t uameasfmt_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t uameasfmt_format(icu::MeasureFormat *a1, unsigned int a2, char *a3, unsigned int a4, int *a5, double a6)
{
  return uameasfmt_formatGetPosition(a1, a2, a3, a4, 0, a5, a6);
}

uint64_t uameasfmt_formatGetPosition(icu::MeasureFormat *this, unsigned int a2, char *a3, unsigned int a4, uint64_t a5, int *a6, double a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*a6 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else if (!a4)
    {
LABEL_6:
      if (icu::MeasureFormat::getWidth(this) == 3 && (a2 & 0xFFFFFFFE) == 2560) {
        uint64_t v19 = 2563;
      }
      else {
        uint64_t v19 = a2;
      }
      uint64_t v20 = icu::MeasureUnit::createFromUAMeasureUnit(v19, a6, v16, v17);
      BOOL v22 = (uint64_t *)*a6;
      if ((int)v22 > 0) {
        return 0;
      }
      int v23 = (icu::MeasureUnit *)v20;
      unsigned int v24 = (icu::Measure *)icu::UMemory::operator new(v22, (icu::UMemory *)0x80, v21);
      if (v24)
      {
        icu::Formattable::Formattable((icu::Formattable *)v35, a7);
        icu::Measure::Measure(v24, (const icu::Formattable *)v35, v23, (UErrorCode *)a6);
        icu::Formattable::~Formattable((icu::Formattable *)v35);
      }
      if (*a6 > 0)
      {
        uint64_t v7 = 0;
        if (!v24) {
          return v7;
        }
        goto LABEL_28;
      }
      unsigned int v28 = &unk_1EDA4C7F0;
      long long v29 = 0xFFFFFFFFuLL;
      if (a5)
      {
        int v25 = *(_DWORD *)a5;
        if (*(_DWORD *)a5 >= 0xEu)
        {
          uint64_t v7 = 0;
          *a6 = 1;
          goto LABEL_27;
        }
      }
      else
      {
        int v25 = -1;
      }
      LODWORD(v29) = v25;
      memset(v35, 0, sizeof(v35));
      icu::Formattable::Formattable((icu::Formattable *)v35);
      icu::Formattable::adoptObject((icu::Formattable *)v35, v24);
      long long v31 = 0u;
      uint64_t v34 = 0;
      long long v33 = 0u;
      long long v32 = 0u;
      int v30 = &unk_1EDA47700;
      LOWORD(v31) = 2;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v30, a3, 0, a4);
      (*(void (**)(icu::MeasureFormat *, _OWORD *, void **, void **, int *))(*(void *)this + 40))(this, v35, &v30, &v28, a6);
      if (a5) {
        *(void *)(a5 + 4) = *(void *)((char *)&v29 + 4);
      }
      int v27 = (UChar *)a3;
      uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v30, &v27, a4, a6);
      int v26 = v27;
      icu::UnicodeString::~UnicodeString(&v26, (icu::UnicodeString *)&v30);
      icu::Formattable::~Formattable((icu::Formattable *)v35);
      unsigned int v24 = 0;
LABEL_27:
      icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v28);
      if (!v24) {
        return v7;
      }
LABEL_28:
      (*(void (**)(icu::Measure *))(*(void *)v24 + 8))(v24);
      return v7;
    }
    uint64_t v7 = 0;
    *a6 = 1;
    return v7;
  }
  return 0;
}

uint64_t uameasfmt_formatMultiple(icu::MeasureFormat *a1, UErrorCode *a2, uint64_t a3, UErrorCode *a4, unsigned int a5, icu::MeasureUnit *a6)
{
  return uameasfmt_formatMultipleForFields(a1, a2, a3, a4, a5, 0, a6);
}

uint64_t uameasfmt_formatMultipleForFields(icu::MeasureFormat *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4, unsigned int a5, icu::FieldPositionIterator *a6, icu::MeasureUnit *a7)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (*(int *)a7 > 0) {
    return 0;
  }
  unsigned int v10 = a3;
  if (a4)
  {
    if ((a5 & 0x80000000) != 0) {
      goto LABEL_8;
    }
  }
  else if (a5)
  {
LABEL_8:
    uint64_t v7 = 0;
    *(_DWORD *)a7 = 1;
    return v7;
  }
  if ((a3 - 9) <= 0xFFFFFFF7) {
    goto LABEL_8;
  }
  unint64_t v13 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  double v14 = (double *)(a2 + 2);
  do
  {
    if (*(int *)a7 > 0)
    {
      if ((int)v13 < 1) {
        return 0;
      }
      goto LABEL_29;
    }
    if (v13 >= v10)
    {
      GForce = (icu::MeasureUnit *)icu::MeasureUnit::createGForce(a7, a2, a3, a4);
      unsigned int v28 = icu::UMemory::operator new(v27, (icu::UMemory *)0x80, v26);
      if (v28)
      {
        int v25 = (icu::Measure *)v28;
        icu::Formattable::Formattable((icu::Formattable *)v43, 0);
        goto LABEL_23;
      }
    }
    else
    {
      unsigned int v15 = *(_DWORD *)v14;
      int Width = icu::MeasureFormat::getWidth(this);
      if ((v15 & 0xFFFFFFFE) == 0xA00 && Width == 3) {
        uint64_t v20 = 2563;
      }
      else {
        uint64_t v20 = v15;
      }
      GForce = (icu::MeasureUnit *)icu::MeasureUnit::createFromUAMeasureUnit(v20, (int *)a7, v17, v18);
      unsigned int v24 = icu::UMemory::operator new(v23, (icu::UMemory *)0x80, v22);
      if (v24)
      {
        int v25 = (icu::Measure *)v24;
        icu::Formattable::Formattable((icu::Formattable *)v43, *(v14 - 1));
LABEL_23:
        icu::Measure::Measure(v25, (const icu::Formattable *)v43, GForce, (UErrorCode *)a7);
        *((void *)&v51 + v13) = v25;
        icu::Formattable::~Formattable((icu::Formattable *)v43);
        goto LABEL_25;
      }
    }
    *((void *)&v51 + v13) = 0;
LABEL_25:
    ++v13;
    v14 += 2;
  }
  while (v13 != 8);
  if (*(int *)a7 >= 1)
  {
    LODWORD(v13) = 8;
LABEL_29:
    uint64_t v29 = v13;
    do
    {
      uint64_t v30 = *(void *)&v50[8 * v29 + 120];
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
      --v29;
    }
    while ((unint64_t)(v29 + 1) > 1);
    return 0;
  }
  bzero(v43, 0x400uLL);
  icu::Measure::Measure((icu::Measure *)v43, (const icu::Measure *)v51);
  icu::Measure::Measure((icu::Measure *)&v44, *((const icu::Measure **)&v51 + 1));
  icu::Measure::Measure((icu::Measure *)&v45, (const icu::Measure *)v52);
  icu::Measure::Measure((icu::Measure *)&v46, *((const icu::Measure **)&v52 + 1));
  icu::Measure::Measure((icu::Measure *)&v47, (const icu::Measure *)v53);
  icu::Measure::Measure((icu::Measure *)&v48, *((const icu::Measure **)&v53 + 1));
  icu::Measure::Measure((icu::Measure *)&v49, (const icu::Measure *)v54);
  icu::Measure::Measure((icu::Measure *)v50, *((const icu::Measure **)&v54 + 1));
  long long v39 = 0u;
  uint64_t v42 = 0;
  long long v41 = 0u;
  long long v40 = 0u;
  unsigned int v38 = &unk_1EDA47700;
  LOWORD(v39) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v38, (char *)a4, 0, a5);
  icu::MeasureFormat::formatMeasures((icu::ListFormatter **)this, v43, v10, (icu::UnicodeString *)&v38, a6, (UErrorCode *)a7);
  for (uint64_t i = 0; i != 64; i += 8)
  {
    uint64_t v32 = *(void *)((char *)&v51 + i);
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
    }
  }
  int v37 = (UChar *)a4;
  uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v38, &v37, a5, (int *)a7);
  uint64_t v36 = v37;
  icu::UnicodeString::~UnicodeString(&v36, (icu::UnicodeString *)&v38);
  for (uint64_t j = 112; j != -16; j -= 16)
    icu::Measure::~Measure((icu::Measure *)&v43[j]);
  return v7;
}

uint64_t uameasfmt_getUnitName(icu::MeasureFormat *a1, uint64_t a2, char *a3, UErrorCode *a4, int *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 0;
  }
  unsigned int v7 = a4;
  if (a3)
  {
    if ((a4 & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0;
    *a5 = 1;
    return v5;
  }
  if (a4) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v10 = icu::MeasureUnit::createFromUAMeasureUnit(a2, a5, (uint64_t)a3, a4);
  uint64_t v11 = (const icu::MeasureUnit *)v10;
  if (*a5 > 0)
  {
    uint64_t v5 = 0;
    if (!v10) {
      return v5;
    }
    goto LABEL_14;
  }
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v20 = 0;
  long long v19 = 0u;
  uint64_t v16 = &unk_1EDA47700;
  LOWORD(v17) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a3, 0, v7);
  icu::MeasureFormat::getUnitName(a1, v11, (icu::UnicodeString *)&v16);
  double v12 = (UChar **)(unsigned __int16)v17;
  if (v17)
  {
    uint64_t v5 = 0;
    *a5 = 2;
  }
  else
  {
    unsigned int v15 = (UChar *)a3;
    uint64_t v5 = icu::UnicodeString::extract((uint64_t)&v16, &v15, v7, a5);
    double v14 = v15;
    double v12 = &v14;
  }
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v16);
  if (v11) {
LABEL_14:
  }
    (*(void (**)(const icu::MeasureUnit *))(*(void *)v11 + 8))(v11);
  return v5;
}

uint64_t uameasfmt_getMultipleUnitNames(icu::MeasureFormat *a1, uint64_t a2, uint64_t a3, UErrorCode *a4, char *a5, unsigned int a6, int *a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*a7 > 0) {
    return 0;
  }
  int v11 = (int)a4;
  int v12 = a3;
  if (a5)
  {
    if ((a6 & 0x80000000) != 0) {
      goto LABEL_8;
    }
  }
  else if (a6)
  {
LABEL_8:
    uint64_t v7 = 0;
    *a7 = 1;
    return v7;
  }
  if ((a3 - 9) <= 0xFFFFFFF7) {
    goto LABEL_8;
  }
  uint64_t v16 = 0;
  uint64_t v17 = a3;
  memset(v29, 0, sizeof(v29));
  do
  {
    if (*a7 > 0) {
      goto LABEL_15;
    }
    *((void *)v29 + v16) = icu::MeasureUnit::createFromUAMeasureUnit(*(unsigned int *)(a2 + 4 * v16), a7, a3, a4);
    ++v16;
  }
  while (v12 != v16);
  if (*a7 >= 1)
  {
    LODWORD(v16) = v12;
LABEL_15:
    if ((int)v16 >= 1)
    {
      unint64_t v18 = v16 + 1;
      do
      {
        uint64_t v19 = *((void *)v29 + (v18 - 2));
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        --v18;
      }
      while (v18 > 1);
    }
    return 0;
  }
  long long v25 = 0u;
  uint64_t v28 = 0;
  long long v27 = 0u;
  long long v26 = 0u;
  unsigned int v24 = &unk_1EDA47700;
  LOWORD(v25) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v24, a5, 0, a6);
  uint64_t v20 = v29;
  icu::MeasureFormat::getMultipleUnitNames(a1, (const icu::MeasureUnit **)v29, v12, v11, (icu::UnicodeString *)&v24);
  do
  {
    if (*v20) {
      (*(void (**)(void))(*(void *)*v20 + 8))(*v20);
    }
    ++v20;
    --v17;
  }
  while (v17);
  if (v25)
  {
    uint64_t v7 = 0;
    uint64_t v21 = 2;
    *a7 = 2;
  }
  else
  {
    int v23 = (UChar *)a5;
    uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v24, &v23, a6, a7);
    unint64_t v22 = v23;
    uint64_t v21 = (uint64_t)&v22;
  }
  icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v24);
  return v7;
}

void uameasfmt_getUnitsForUsage(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v44 = 0;
  memset(&v43[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v21, a2);
  v43[0] = (char *)&v43[1] + 5;
  LODWORD(v43[1]) = 40;
  WORD2(v43[1]) = 0;
  LODWORD(v44) = 0;
  icu::CharString::append((icu::CharString *)v43, v21, v22, a6);
  uint64_t v42 = 0;
  memset(&v41[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v19, a3);
  v41[0] = (char *)&v41[1] + 5;
  LODWORD(v41[1]) = 40;
  WORD2(v41[1]) = 0;
  LODWORD(v42) = 0;
  icu::CharString::append((icu::CharString *)v41, v19, v20, a6);
  memset(&__key[1], 0, 56);
  __key[0] = (char *)&__key[1] + 5;
  LODWORD(__key[1]) = 40;
  icu::CharString::append((icu::CharString *)__key, v43[0], v44, a6);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v39, "/");
  icu::CharString::append((icu::CharString *)__key, v39, v40, a6);
  int v8 = v42;
  if (v42)
  {
    double v9 = v41[0];
  }
  else
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "default");
    double v9 = v17;
    int v8 = v18[0];
  }
  icu::CharString::append((icu::CharString *)__key, v9, v8, a6);
  if (*(int *)a6 <= 0)
  {
    uint64_t v10 = (const char **)bsearch(__key[0], off_1E9191770, 0x1DuLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_18CA06E78);
    if (v10)
    {
      LODWORD(v42) = 0;
      *v41[0] = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v31, v10[1]);
      icu::CharString::append((icu::CharString *)v41, v31, v32, a6);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v29, "/");
      if (icu::CharString::contains(v41, v29, v30))
      {
        long long v34 = 0u;
        uint64_t v37 = 0;
        long long v36 = 0u;
        long long v35 = 0u;
        long long __s = (char *)&v34 + 5;
        LODWORD(v34) = 40;
        icu::CharString::append((icu::CharString *)&__s, v41[0], v42, a6);
        int v11 = __s;
        int v12 = strchr(__s, 47);
        char *v12 = 0;
        unint64_t v13 = v12 + 1;
        LODWORD(v44) = 0;
        *v43[0] = 0;
        icu::StringPiece::StringPiece((icu::StringPiece *)&v27, v11);
        icu::CharString::append((icu::CharString *)v43, v27, v28, a6);
        LODWORD(v42) = 0;
        *v41[0] = 0;
        icu::StringPiece::StringPiece((icu::StringPiece *)&v25, v13);
        icu::CharString::append((icu::CharString *)v41, v25, v26, a6);
        if (BYTE4(v34)) {
          uprv_free(__s);
        }
      }
      icu::StringPiece::StringPiece((icu::StringPiece *)&v23, "[");
      if (icu::CharString::contains(v41, v23, v24))
      {
        long long v34 = 0u;
        uint64_t v37 = 0;
        long long v36 = 0u;
        long long v35 = 0u;
        long long __s = (char *)&v34 + 5;
        LODWORD(v34) = 40;
        icu::CharString::append((icu::CharString *)&__s, v41[0], v42, a6);
        int v14 = (int)__s;
        unsigned int v15 = strchr(__s, 91);
        uint64_t v16 = v15 + 1;
        icu::CharString::truncate((uint64_t)v41, v15 - v14);
        atoi(v16);
        if (BYTE4(v34)) {
          uprv_free(__s);
        }
      }
    }
  }
  if (BYTE4(__key[1])) {
    uprv_free(__key[0]);
  }
  operator new();
}

const char *uameasfmt_getUnitCategory(uint64_t a1, int *a2, uint64_t a3, UErrorCode *a4)
{
  if (*a2 <= 0)
  {
    uint64_t v6 = (icu::MeasureUnit *)icu::MeasureUnit::createFromUAMeasureUnit(a1, a2, a3, a4);
    uint64_t v7 = v6;
    if (*a2 <= 0)
    {
      int Type = icu::MeasureUnit::getType(v6);
      if (!v7) {
        return Type;
      }
    }
    else
    {
      int Type = 0;
      if (!v6) {
        return Type;
      }
    }
    (*(void (**)(icu::MeasureUnit *))(*(void *)v7 + 8))(v7);
    return Type;
  }
  return 0;
}

uint64_t sub_18CA06E78(const char *a1, const char **a2)
{
  return strcmp(a1, *a2);
}

unsigned int *sub_18CA06E80(unsigned int *a1)
{
  uint64_t v2 = (void *)*a1;
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*((void *)a1 + 1) + 8 * v3);
      if (v4)
      {
        icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(v4 + 80));
        if (*(unsigned char *)(v4 + 20)) {
          uprv_free(*(void **)(v4 + 8));
        }
        icu::UMemory::operator delete((void *)v4);
        uint64_t v2 = (void *)*a1;
      }
      ++v3;
    }
    while (v3 < (int)v2);
  }
  if (*((unsigned char *)a1 + 20)) {
    uprv_free(*((void **)a1 + 1));
  }
  return a1;
}

uint64_t *sub_18CA06F08(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    sub_18CA06E80((unsigned int *)(v2 + 88));
    uint64_t v3 = sub_18CA06F58(v2);
    MEMORY[0x192F969D0](v3, 0x10A0C409C1F706FLL);
  }
  return a1;
}

uint64_t sub_18CA06F58(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 148)) {
          uprv_free(*(void **)(v4 + 136));
        }
        if (*(unsigned char *)(v4 + 84)) {
          uprv_free(*(void **)(v4 + 72));
        }
        if (*(unsigned char *)(v4 + 20)) {
          uprv_free(*(void **)(v4 + 8));
        }
        icu::UMemory::operator delete((void *)v4);
        int v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(unsigned char *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t uatmufmt_open(const char *a1, unint64_t a2, int *a3)
{
  return uatmufmt_openWithNumberFormat(a1, a2, 0, a3);
}

uint64_t uatmufmt_openWithNumberFormat(const char *a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*a4 > 0) {
    return 0;
  }
  if (a2 >= 4)
  {
    uint64_t v4 = 0;
    *a4 = 1;
    return v4;
  }
  uint64_t v8 = dword_18CA97D30[(int)a2];
  uint64_t v4 = icu::UMemory::operator new((icu::UMemory *)0x178, a2);
  if (v4)
  {
    icu::Locale::Locale((icu::Locale *)v10, a1, 0, 0, 0);
    icu::MeasureFormat::MeasureFormat(v4, v10, v8, a3, a4);
    icu::Locale::~Locale((icu::Locale *)v10);
    if (*a4 < 1) {
      return v4;
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    return 0;
  }
  if (*a4 >= 1) {
    return 0;
  }
  return v4;
}

uint64_t uatmufmt_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

icu::SharedObject *uatmufmt_setNumberFormat(icu::SharedObject *result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v4 = result;
    unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
    return icu::MeasureFormat::adoptNumberFormat(v4, v5, a3);
  }
  return result;
}

uint64_t uatmufmt_format(uint64_t a1, UErrorCode *a2, char *a3, UErrorCode *a4, icu::MeasureUnit *this, double a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(int *)this > 0) {
    return 0;
  }
  unsigned int v9 = a4;
  if (a3)
  {
    if ((a4 & 0x80000000) != 0) {
      goto LABEL_8;
    }
  }
  else if (a4)
  {
LABEL_8:
    uint64_t v6 = 0;
    *(_DWORD *)this = 1;
    return v6;
  }
  switch((int)a2)
  {
    case 0:
      uint64_t Year = icu::MeasureUnit::createYear(this, a2, (uint64_t)a3, a4);
      break;
    case 1:
      uint64_t Year = icu::MeasureUnit::createMonth(this, a2, (uint64_t)a3, a4);
      break;
    case 2:
      uint64_t Year = icu::MeasureUnit::createDay(this, a2, (uint64_t)a3, a4);
      break;
    case 3:
      uint64_t Year = icu::MeasureUnit::createWeek(this, a2, (uint64_t)a3, a4);
      break;
    case 4:
      uint64_t Year = icu::MeasureUnit::createHour(this, a2, (uint64_t)a3, a4);
      break;
    case 5:
      uint64_t Year = icu::MeasureUnit::createMinute(this, a2, (uint64_t)a3, a4);
      break;
    case 6:
      uint64_t Year = icu::MeasureUnit::createSecond(this, a2, (uint64_t)a3, a4);
      break;
    case 7:
      uint64_t Year = icu::MeasureUnit::createMillisecond(this, a2, (uint64_t)a3, a4);
      break;
    case 8:
      uint64_t Year = icu::MeasureUnit::createMicrosecond(this, a2, (uint64_t)a3, a4);
      break;
    case 9:
      uint64_t Year = icu::MeasureUnit::createNanosecond(this, a2, (uint64_t)a3, a4);
      break;
    default:
      goto LABEL_8;
  }
  unsigned int v15 = (icu::MeasureUnit *)Year;
  uint64_t v16 = (uint64_t *)*(unsigned int *)this;
  if ((int)v16 > 0) {
    return 0;
  }
  uint64_t v17 = (icu::UObject *)icu::UMemory::operator new(v16, (icu::UMemory *)0x80, v14);
  if (!v17)
  {
    if (*(int *)this >= 1) {
      return 0;
    }
LABEL_25:
    memset(v27, 0, sizeof(v27));
    icu::Formattable::Formattable((icu::Formattable *)v27);
    icu::Formattable::adoptObject((icu::Formattable *)v27, v17);
    long long v23 = 0u;
    uint64_t v26 = 0;
    long long v25 = 0u;
    long long v24 = 0u;
    int v22 = &unk_1EDA47700;
    LOWORD(v23) = 2;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v22, a3, 0, v9);
    v21[1] = 0;
    v21[2] = 0;
    v21[0] = &unk_1EDA4C7F0;
    (*(void (**)(uint64_t, _OWORD *, void **, void *, icu::MeasureUnit *))(*(void *)a1 + 40))(a1, v27, &v22, v21, this);
    int v20 = (UChar *)a3;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v22, &v20, v9, (int *)this);
    uint64_t v19 = v20;
    icu::FieldPosition::~FieldPosition(&v19, (icu::FieldPosition *)v21);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v22);
    icu::Formattable::~Formattable((icu::Formattable *)v27);
    return v6;
  }
  icu::Formattable::Formattable((icu::Formattable *)v27, a6);
  icu::Measure::Measure(v17, (const icu::Formattable *)v27, v15, (UErrorCode *)this);
  icu::Formattable::~Formattable((icu::Formattable *)v27);
  if (*(int *)this <= 0) {
    goto LABEL_25;
  }
  (*(void (**)(icu::UObject *))(*(void *)v17 + 8))(v17);
  return 0;
}

double uatmufmt_parse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*a6 <= 0) {
    *a6 = 16;
  }
  return 0.0;
}

uint64_t uatmufmt_getTimePattern(char *a1, unsigned int a2, UChar *a3, int32_t a4, int *a5)
{
  if (*a5 > 0) {
    return 0;
  }
  if (a3)
  {
    if (a4 < 0) {
      goto LABEL_11;
    }
  }
  else if (a4)
  {
LABEL_11:
    uint64_t result = 0;
    *a5 = 1;
    return result;
  }
  if (a2 >= 3) {
    goto LABEL_11;
  }
  unsigned int v9 = off_1E550D0B8[a2];
  unsigned int v13 = 0;
  uint64_t v10 = ures_open("icudt74l-unit", a1, a5);
  uint64_t v11 = ures_getByKeyWithFallback(v10, "durationUnits", v10, (UErrorCode *)a5);
  StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v11, v9, (int *)&v13, (UErrorCode *)a5);
  if (*a5 <= 0) {
    u_strncpy(a3, StringByKeyWithFallback, a4);
  }
  ures_close(v11);
  return u_terminateUChars((uint64_t)a3, a4, v13, a5);
}

uint64_t uatmufmt_getListPattern(char *a1, unsigned int a2, unsigned int a3, UChar *a4, int32_t a5, int *a6)
{
  if (*a6 > 0) {
    return 0;
  }
  if (a4)
  {
    if (a5 < 0) {
      goto LABEL_12;
    }
  }
  else if (a5)
  {
LABEL_12:
    uint64_t result = 0;
    *a6 = 1;
    return result;
  }
  if (a2 >= 4 || a3 >= 4) {
    goto LABEL_12;
  }
  uint64_t v10 = off_1E550D0D0[a2];
  uint64_t v11 = off_1E550D0F0[a3];
  unsigned int v16 = 0;
  uint64_t v12 = ures_open(0, a1, a6);
  uint64_t v13 = ures_getByKeyWithFallback(v12, "listPattern", v12, (UErrorCode *)a6);
  uint64_t v14 = ures_getByKeyWithFallback(v13, v10, v13, (UErrorCode *)a6);
  StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v14, v11, (int *)&v16, (UErrorCode *)a6);
  if (*a6 <= 0) {
    u_strncpy(a4, StringByKeyWithFallback, a5);
  }
  ures_close(v14);
  return u_terminateUChars((uint64_t)a4, a5, v16, a6);
}

void *uatimezone_open(UChar *s, unsigned int a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*a3 > 0) {
    return 0;
  }
  if (s)
  {
    int32_t v7 = a2;
    if ((a2 & 0x80000000) != 0) {
      int32_t v7 = u_strlen(s);
    }
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v16 = 0;
    long long v15 = 0u;
    uint64_t v11 = s;
    uint64_t v12 = (UChar *)&unk_1EDA47700;
    LOWORD(v13) = 2;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2 >> 31, &v11, v7);
    uint64_t v10 = icu::TimeZone::createTimeZone(&v12, v8);
    if (!v10)
    {
      uint64_t v9 = 7;
      *a3 = 7;
    }
    icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v12);
    if (*a3 >= 1) {
      return 0;
    }
    else {
      return v10;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 1;
  }
  return result;
}

uint64_t uatimezone_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t uatimezone_getOffset(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (a5)
  {
    if (*a5 <= 0) {
      return (*(uint64_t (**)(void))(*(void *)result + 48))();
    }
  }
  return result;
}

void *uatimezone_getOffsetFromLocal(void *result, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  if (*a7 <= 0)
  {
    if (result
    {
      uint64_t v10 = *(uint64_t (**)(__n128))(*(void *)result + 160);
      v9.n128_f64[0] = a2;
      return (void *)v10(v9);
    }
    else
    {
      *a7 = 1;
    }
  }
  return result;
}

uint64_t uatimezone_getDisplayName(icu::Calendar *a1, int a2, char *a3, char *a4, unsigned int a5, int *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*a6 > 0) {
    return 0xFFFFFFFFLL;
  }
  long long v22 = 0u;
  uint64_t v25 = 0;
  long long v24 = 0u;
  long long v23 = 0u;
  uint64_t v21 = &unk_1EDA47700;
  uint64_t v13 = 2;
  LOWORD(v22) = 2;
  if (a4 || a5) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v21, a4, 0, a5);
  }
  switch(a2)
  {
    case 0:
      icu::Locale::Locale((uint64_t *)v13, (icu::Locale *)v20, a3, 0, 0, 0);
      long long v14 = a1;
      int v15 = 0;
      goto LABEL_10;
    case 1:
      icu::Locale::Locale((uint64_t *)v13, (icu::Locale *)v20, a3, 0, 0, 0);
      long long v14 = a1;
      int v15 = 0;
      goto LABEL_12;
    case 2:
      icu::Locale::Locale((uint64_t *)v13, (icu::Locale *)v20, a3, 0, 0, 0);
      long long v14 = a1;
      int v15 = 1;
LABEL_10:
      unsigned int v16 = 1;
      goto LABEL_13;
    case 3:
      icu::Locale::Locale((uint64_t *)v13, (icu::Locale *)v20, a3, 0, 0, 0);
      long long v14 = a1;
      int v15 = 1;
LABEL_12:
      unsigned int v16 = 2;
LABEL_13:
      icu::TimeZone::getDisplayName(v14, v15, v16, v20, (uint64_t)&v21);
      icu::Locale::~Locale((icu::Locale *)v20);
      break;
    default:
      break;
  }
  uint64_t v19 = (UChar *)a4;
  uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v21, &v19, a5, a6);
  unint64_t v18 = v19;
  icu::UnicodeString::~UnicodeString(&v18, (icu::UnicodeString *)&v21);
  return v6;
}

uint64_t uatimezone_getTimeZoneTransitionDate(const void *a1, unsigned int a2, double *a3, int *a4, double a5)
{
  uint64_t v5 = 0;
  if (a1 && *a4 <= 0)
  {
    if (v9)
    {
      uint64_t v10 = v9;
      memset(v14, 0, sizeof(v14));
      icu::TimeZoneTransition::TimeZoneTransition(v14);
      BOOL v11 = (a2 & 0xFFFFFFFD) == 1;
      uint64_t v12 = *v10;
      if (a2 > 1)
      {
        if ((*(unsigned int (**)(uint64_t *, BOOL, _OWORD *, double))(v12 + 120))(v10, v11, v14, a5)) {
          goto LABEL_6;
        }
      }
      else if ((*(unsigned int (**)(uint64_t *, BOOL, _OWORD *, double))(v12 + 112))(v10, v11, v14, a5))
      {
LABEL_6:
        *a3 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v14);
        icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v14);
        return 1;
      }
      icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v14);
    }
    return 0;
  }
  return v5;
}

_OWORD *ucal_openTimeZoneIDEnumeration(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t TimeZoneIDEnumeration = icu::TimeZone::createTimeZoneIDEnumeration(a1, a2, a3, a4);

  return uenum_openFromStringEnumeration(TimeZoneIDEnumeration, a4);
}

_OWORD *ucal_openTimeZones(int *a1)
{
  uint64_t TimeZoneIDEnumeration = icu::TimeZone::createTimeZoneIDEnumeration(0, 0, 0, a1);

  return uenum_openFromStringEnumeration(TimeZoneIDEnumeration, a1);
}

_OWORD *ucal_openCountryTimeZones(uint64_t a1, int *a2)
{
  uint64_t TimeZoneIDEnumeration = icu::TimeZone::createTimeZoneIDEnumeration(0, a1, 0, a2);

  return uenum_openFromStringEnumeration(TimeZoneIDEnumeration, a2);
}

uint64_t ucal_getDefaultTimeZone(icu::TimeZone *a1, int a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a3 || *a3 > 0) {
    return 0;
  }
  uint64_t Default = icu::TimeZone::createDefault(a1);
  if (Default)
  {
    uint64_t v9 = Default;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v16 = 0;
    long long v15 = 0u;
    uint64_t v12 = (UChar *)&unk_1EDA47700;
    LOWORD(v13) = 2;
    icu::UnicodeString::operator=(&v12, (UChar **)(Default + 8));
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    BOOL v11 = (UChar *)a1;
    uint64_t v4 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a2, a3);
    uint64_t v10 = v11;
    icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
  }
  else
  {
    uint64_t v4 = 0;
    *a3 = 7;
  }
  return v4;
}

void ucal_setDefaultTimeZone(UChar *a1, int *a2)
{
  int v2 = (icu::TimeZone *)sub_18CA07F8C(a1, 0xFFFFFFFF, a2);
  if (v2)
  {
    icu::TimeZone::adoptDefault(v2, v3);
  }
}

void *sub_18CA07F8C(UChar *s, unsigned int a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a3 || *a3 > 0) {
    return 0;
  }
  int32_t v7 = a2;
  if ((a2 & 0x80000000) != 0) {
    int32_t v7 = u_strlen(s);
  }
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v16 = 0;
  long long v15 = 0u;
  BOOL v11 = s;
  uint64_t v12 = (UChar *)&unk_1EDA47700;
  LOWORD(v13) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2 >> 31, &v11, v7);
  uint64_t v4 = icu::TimeZone::createTimeZone(&v12, v8);
  if (!v4)
  {
    uint64_t v9 = 7;
    *a3 = 7;
  }
  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v12);
  return v4;
}

uint64_t ucal_getHostTimeZone(icu::TimeZone *a1, int a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a3 || *a3 > 0) {
    return 0;
  }
  uint64_t v8 = icu::TimeZone::detectHostTimeZone(a1);
  if (v8)
  {
    uint64_t v9 = v8;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v16 = 0;
    long long v15 = 0u;
    uint64_t v12 = (UChar *)&unk_1EDA47700;
    LOWORD(v13) = 2;
    icu::UnicodeString::operator=(&v12, (UChar **)(v8 + 8));
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    BOOL v11 = (UChar *)a1;
    uint64_t v4 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a2, a3);
    uint64_t v10 = v11;
    icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
  }
  else
  {
    uint64_t v4 = 0;
    *a3 = 7;
  }
  return v4;
}

uint64_t ucal_getDSTSavings(UChar *a1, int *a2)
{
  uint64_t v3 = (icu::Calendar *)sub_18CA07F8C(a1, 0xFFFFFFFF, a2);
  uint64_t v4 = v3;
  if (*a2 <= 0)
  {
    if (v3
    {
      uint64_t v5 = (*(uint64_t (**)(icu::Calendar *))(*(void *)v3 + 104))(v3);
    }
    else
    {
      icu::Calendar::getNow(v3);
      double v7 = v6;
      LODWORD(v5) = 0;
      int v8 = 53;
      do
      {
        uint64_t v13 = 0;
        (*(void (**)(icu::Calendar *, void, char *, uint64_t *, int *, double))(*(void *)v4 + 48))(v4, 0, (char *)&v13 + 4, &v13, a2, v7);
        int v9 = *a2;
        if (v13) {
          unsigned int v10 = v13;
        }
        else {
          unsigned int v10 = v5;
        }
        if (v9 >= 1) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v10;
        }
        if (v9 > 0 || v13 != 0) {
          break;
        }
        double v7 = v7 + 604800000.0;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (!v3) {
      return v5;
    }
  }
  (*(void (**)(icu::Calendar *))(*(void *)v4 + 8))(v4);
  return v5;
}

uint64_t ucal_open(UChar *a1, unsigned int a2, const char *a3, int a4, int *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 0;
  }
  if (a1) {
    uint64_t Default = (icu::Calendar *)sub_18CA07F8C(a1, a2, a5);
  }
  else {
    uint64_t Default = (icu::Calendar *)icu::TimeZone::createDefault(0);
  }
  unsigned int v10 = Default;
  BOOL v11 = (uint64_t *)*a5;
  if (!Default && (int)v11 <= 0)
  {
    uint64_t Instance = 0;
    *a5 = 7;
    return Instance;
  }
  if ((int)v11 > 0) {
    goto LABEL_10;
  }
  if (a4 != 1)
  {
    icu::Locale::Locale(v11, (icu::Locale *)__dst, a3, 0, 0, 0);
    uint64_t Instance = icu::Calendar::createInstance(v10, (icu::TimeZone *)__dst, (UErrorCode *)a5, v12);
    icu::Locale::~Locale((icu::Locale *)__dst);
    return Instance;
  }
  __int16 v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)__dst = 0u;
  long long v18 = 0u;
  if (!a3) {
    a3 = (const char *)uloc_getDefault(Default);
  }
  if ((int)strlen(a3) < 258)
  {
    strcpy(__dst, a3);
    uloc_setKeywordValue("calendar", "gregorian", __dst, 258, a5);
    long long v14 = (uint64_t *)*a5;
    if ((int)v14 > 0)
    {
LABEL_10:
      uint64_t Instance = 0;
      goto LABEL_11;
    }
    icu::Locale::Locale(v14, (icu::Locale *)v16, __dst, 0, 0, 0);
    uint64_t Instance = icu::Calendar::createInstance(v10, (icu::TimeZone *)v16, (UErrorCode *)a5, v15);
    icu::Locale::~Locale((icu::Locale *)v16);
    unsigned int v10 = 0;
  }
  else
  {
    uint64_t Instance = 0;
    *a5 = 1;
  }
LABEL_11:
  if (v10) {
    (*(void (**)(icu::Calendar *))(*(void *)v10 + 8))(v10);
  }
  return Instance;
}

uint64_t ucal_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ucal_clone(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (!result) {
    *a2 = 7;
  }
  return result;
}

icu::TimeZone *ucal_setTimeZone(icu::TimeZone *result, const UChar *a2, unsigned int a3, int *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*a4 <= 0)
  {
    uint64_t v5 = result;
    if (!a2)
    {
      uint64_t result = (icu::TimeZone *)icu::TimeZone::createDefault(result);
      BOOL v11 = result;
LABEL_18:
      if (v11) {
        return (icu::TimeZone *)icu::Calendar::adoptTimeZone(v5, (uint64_t)v11);
      }
      *a4 = 7;
      return result;
    }
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v25 = 0;
    long long v24 = 0u;
    uint64_t v20 = 0;
    long long v21 = (UChar *)&unk_1EDA47700;
    LOWORD(v22) = 2;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v15 = a2;
    uint64_t v16 = (UChar *)&unk_1EDA47700;
    LOWORD(v17) = 2;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v21, a3 >> 31, &v15, a3);
    long long v14 = v15;
    uint64_t TimeZone = icu::Calendar::getTimeZone((uint64_t *)&v14, v5);
    icu::UnicodeString::operator=(&v16, (UChar **)TimeZone + 1);
    if (v17)
    {
      unint64_t v10 = (unsigned __int16)v22;
      if (v22)
      {
LABEL_13:
        BOOL v11 = 0;
        char v12 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      if ((v17 & 0x8000u) == 0) {
        int v8 = (unsigned __int16)v17 >> 5;
      }
      else {
        int v8 = DWORD1(v17);
      }
      if ((v22 & 0x8000u) == 0) {
        int v9 = (unsigned __int16)v22 >> 5;
      }
      else {
        int v9 = DWORD1(v22);
      }
      if ((v22 & 1) == 0
        && v8 == v9
        && icu::UnicodeString::doEquals((icu::UnicodeString *)&v16, (const icu::UnicodeString *)&v21, v8))
      {
        goto LABEL_13;
      }
    }
    BOOL v11 = icu::TimeZone::createTimeZone(&v21, v7);
    char v12 = 0;
LABEL_17:
    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v16);
    uint64_t result = (icu::TimeZone *)icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v21);
    if (v12) {
      return result;
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t ucal_getTimeZoneID(icu::Calendar *a1, UChar *a2, int a3, int *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)*a4;
  if ((int)v4 > 0) {
    return 0;
  }
  uint64_t TimeZone = icu::Calendar::getTimeZone(v4, a1);
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v17 = 0;
  long long v16 = 0u;
  uint64_t v13 = (UChar *)&unk_1EDA47700;
  LOWORD(v14) = 2;
  icu::UnicodeString::operator=(&v13, (UChar **)TimeZone + 1);
  char v12 = a2;
  uint64_t v5 = icu::UnicodeString::extract((uint64_t)&v13, &v12, a3, a4);
  BOOL v11 = v12;
  icu::UnicodeString::~UnicodeString(&v11, (icu::UnicodeString *)&v13);
  return v5;
}

uint64_t ucal_getTimeZoneDisplayName(icu::Calendar *a1, int a2, const char *a3, char *a4, unsigned int a5, int *a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  double v6 = (uint64_t *)*a6;
  if ((int)v6 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t TimeZone = icu::Calendar::getTimeZone(v6, a1);
  long long v23 = 0u;
  uint64_t v26 = 0;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v22 = &unk_1EDA47700;
  uint64_t v14 = 2;
  LOWORD(v23) = 2;
  if (a4 || a5) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v22, a4, 0, a5);
  }
  switch(a2)
  {
    case 0:
      icu::Locale::Locale((uint64_t *)v14, (icu::Locale *)v21, a3, 0, 0, 0);
      long long v15 = (icu::Calendar *)TimeZone;
      int v16 = 0;
      goto LABEL_10;
    case 1:
      icu::Locale::Locale((uint64_t *)v14, (icu::Locale *)v21, a3, 0, 0, 0);
      long long v15 = (icu::Calendar *)TimeZone;
      int v16 = 0;
      goto LABEL_12;
    case 2:
      icu::Locale::Locale((uint64_t *)v14, (icu::Locale *)v21, a3, 0, 0, 0);
      long long v15 = (icu::Calendar *)TimeZone;
      int v16 = 1;
LABEL_10:
      unsigned int v17 = 2;
      goto LABEL_13;
    case 3:
      icu::Locale::Locale((uint64_t *)v14, (icu::Locale *)v21, a3, 0, 0, 0);
      long long v15 = (icu::Calendar *)TimeZone;
      int v16 = 1;
LABEL_12:
      unsigned int v17 = 1;
LABEL_13:
      icu::TimeZone::getDisplayName(v15, v16, v17, v21, (uint64_t)&v22);
      icu::Locale::~Locale((icu::Locale *)v21);
      break;
    default:
      break;
  }
  uint64_t v20 = (UChar *)a4;
  uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v22, &v20, a5, a6);
  long long v19 = v20;
  icu::UnicodeString::~UnicodeString(&v19, (icu::UnicodeString *)&v22);
  return v7;
}

uint64_t ucal_inDaylightTime(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

icu::GregorianCalendar *ucal_setGregorianChange(icu::GregorianCalendar *lpsrc, UErrorCode *a2, double a3)
{
  if (*(int *)a2 > 0) {
    return lpsrc;
  }
  uint64_t v4 = lpsrc;
  if (!lpsrc)
  {
    int v8 = 1;
LABEL_10:
    *a2 = v8;
    return lpsrc;
  }
  uint64_t v6 = *(void *)lpsrc;
  {
    lpsrc = (icu::GregorianCalendar *)sub_18C828FD8(*(void *)(*(void *)v4 - 8), (uint64_t)&unk_1EDA4DD38);
    if ((lpsrc & 1) == 0)
    {
      int v8 = 16;
      goto LABEL_10;
    }
  }

  return icu::GregorianCalendar::setGregorianChange(v7, a3, a2);
}

double ucal_getGregorianChange(uint64_t *lpsrc, int *a2)
{
  if (*a2 > 0) {
    return 0.0;
  }
  if (!lpsrc)
  {
    int v7 = 1;
LABEL_10:
    *a2 = v7;
    return 0.0;
  }
  uint64_t v4 = *lpsrc;
    && !sub_18C828FD8(*(void *)(*lpsrc - 8), (uint64_t)&unk_1EDA4DD38))
  {
    int v7 = 16;
    goto LABEL_10;
  }

  return icu::GregorianCalendar::getGregorianChange(v5);
}

uint64_t ucal_getAttribute(icu::Calendar *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = icu::Calendar::isLenient(a1);
      break;
    case 1:
      uint64_t result = icu::Calendar::getFirstDayOfWeek(a1);
      break;
    case 2:
      uint64_t result = icu::Calendar::getMinimalDaysInFirstWeek(a1);
      break;
    case 3:
      uint64_t result = icu::Calendar::getRepeatedWallTimeOption(a1);
      break;
    case 4:
      uint64_t result = icu::Calendar::getSkippedWallTimeOption(a1);
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t ucal_setAttribute(uint64_t result, int a2, unsigned __int8 a3)
{
  switch(a2)
  {
    case 0:
      uint64_t result = icu::Calendar::setLenient(result, a3);
      break;
    case 1:
      uint64_t result = icu::Calendar::setFirstDayOfWeek(result, a3);
      break;
    case 2:
      uint64_t result = icu::Calendar::setMinimalDaysInFirstWeek(result, a3);
      break;
    case 3:
      uint64_t result = icu::Calendar::setRepeatedWallTimeOption(result, a3);
      break;
    case 4:
      uint64_t result = icu::Calendar::setSkippedWallTimeOption(result, a3);
      break;
    default:
      return result;
  }
  return result;
}

double ucal_getMillis(icu::Calendar *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0) {
    return icu::Calendar::getTimeInMillis(this, a2);
  }
  else {
    return 0.0;
  }
}

uint64_t ucal_setMillis(uint64_t this, double a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0) {
    return icu::Calendar::setTimeInMillis(this, a2, a3);
  }
  return this;
}

icu::Calendar *ucal_setDate(icu::Calendar *this, int a2, int a3, int a4, int *a5)
{
  if (*a5 <= 0) {
    return (icu::Calendar *)icu::Calendar::set(this, a2, a3, a4);
  }
  return this;
}

icu::Calendar *ucal_setDateTime(icu::Calendar *this, int a2, int a3, int a4, int a5, int a6, int a7, int *a8)
{
  if (*a8 <= 0) {
    return (icu::Calendar *)icu::Calendar::set(this, a2, a3, a4, a5, a6, a7);
  }
  return this;
}

uint64_t ucal_equivalentTo(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

uint64_t ucal_add(uint64_t result, unsigned int a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 < 0x18) {
      return (*(uint64_t (**)(void))(*(void *)result + 56))();
    }
    else {
      *a4 = 1;
    }
  }
  return result;
}

uint64_t ucal_roll(uint64_t result, unsigned int a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 < 0x18) {
      return (*(uint64_t (**)(void))(*(void *)result + 72))();
    }
    else {
      *a4 = 1;
    }
  }
  return result;
}

uint64_t ucal_get(unsigned char *a1, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 >= 0x18)
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }
  return icu::Calendar::get(a1, a2, a3);
}

unsigned char *ucal_set(unsigned char *this, unsigned int a2, int a3)
{
  if (a2 <= 0x17) {
    return icu::Calendar::set(this, a2, a3);
  }
  return this;
}

BOOL ucal_isSet(uint64_t a1, unsigned int a2)
{
  return a2 <= 0x17 && icu::Calendar::isSet(a1, a2);
}

unsigned char *ucal_clearField(unsigned char *result, unsigned int a2)
{
  if (a2 <= 0x17) {
    return icu::Calendar::clear(result, a2);
  }
  return result;
}

uint64_t ucal_getLimit(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  if (!a4 || *a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 >= 0x18)
  {
    *a4 = 1;
    return 0xFFFFFFFFLL;
  }
  switch(a3)
  {
    case 0:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 112))();
      break;
    case 1:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 128))();
      break;
    case 2:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 144))();
      break;
    case 3:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 160))();
      break;
    case 4:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 168))();
      break;
    case 5:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 176))();
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t ucal_getLocaleByType(uint64_t a1, int a2, int *a3)
{
  if (a1) {
    return icu::Calendar::getLocaleID(a1, a2, a3);
  }
  if (*a3 <= 0) {
    *a3 = 1;
  }
  return 0;
}

uint64_t ucal_getCanonicalTimeZoneID(uint64_t a1, uint64_t a2, UChar *a3, int a4, unsigned char *a5, icu::UnicodeString *a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a6 || *(int *)a6 > 0) {
    return 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (a1 && a2 && a3 && a4 > 0)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v23 = 0;
    long long v22 = 0u;
    long long v19 = &unk_1EDA47700;
    LOWORD(v20) = 2;
    char v17 = 0;
    icu::UnicodeString::UnicodeString((uint64_t)v18, a1, a2);
    icu::TimeZone::getCanonicalID((icu::TimeZone *)v18, (const icu::UnicodeString *)&v19, (icu::UnicodeString *)&v17, a6, v12);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v18);
    uint64_t v7 = 0;
    uint64_t v14 = (UChar **)*(unsigned int *)a6;
    if ((int)v14 <= 0)
    {
      if (a5) {
        *a5 = v17;
      }
      int v16 = a3;
      uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a4, (int *)a6);
      long long v15 = v16;
      uint64_t v14 = &v15;
    }
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  }
  else
  {
    uint64_t v7 = 0;
    *(_DWORD *)a6 = 1;
  }
  return v7;
}

uint64_t ucal_getIanaTimeZoneID(uint64_t a1, uint64_t a2, UChar *a3, int a4, icu::UnicodeString *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v19 = 0;
  long long v18 = 0u;
  long long v15 = &unk_1EDA47700;
  LOWORD(v16) = 2;
  icu::UnicodeString::UnicodeString((uint64_t)v14, a1, a2);
  icu::TimeZone::getIanaID((icu::TimeZone *)v14, (const icu::UnicodeString *)&v15, a5, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v14);
  uint64_t v13 = a3;
  uint64_t v10 = icu::UnicodeString::extract((uint64_t)&v15, &v13, a4, (int *)a5);
  char v12 = v13;
  icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)&v15);
  return v10;
}

uint64_t ucal_getType(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
  }
  else {
    return 0;
  }
}

uint64_t ucal_getDayOfWeekType(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
  }
  else {
    return 0;
  }
}

uint64_t ucal_getWeekendTransition(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
  }
  else {
    return 0;
  }
}

uint64_t ucal_isWeekend(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
  }
  else {
    return 0;
  }
}

uint64_t ucal_getFieldDifference(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
  }
  else {
    return 0;
  }
}

_OWORD *ucal_getKeywordValuesForLocale(uint64_t a1, char *a2, int a3, int *a4)
{
  int v23 = 0;
  ulocimp_getRegionForSupplementalData(a2, 1, (char *)&v23, 4, a4);
  uint64_t v6 = ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)a4);
  ures_getByKey(v6, "calendarPreferenceData", v6, a4);
  uint64_t v7 = ures_getByKey(v6, (const char *)&v23, 0, a4);
  int v8 = *a4;
  if (v6 && v8 == 2)
  {
    *a4 = 0;
    uint64_t v7 = ures_getByKey(v6, "001", 0, a4);
    int v8 = *a4;
  }
  if (v8 > 0) {
    goto LABEL_5;
  }
  EmptyList = ulist_createEmptyList(a4);
  if (*a4 <= 0)
  {
    if ((int)ures_getSize(v7) >= 1)
    {
      signed int v13 = 0;
      while (1)
      {
        int32_t length = 0;
        StringByIndex = ures_getStringByIndex(v7, v13, &length, (UErrorCode *)a4);
        long long v15 = (char *)uprv_malloc(length + 1);
        if (!v15) {
          break;
        }
        long long v16 = v15;
        u_UCharsToChars(StringByIndex, v15, length);
        v16[length] = 0;
        ulist_addItemEndList((uint64_t)EmptyList, v16, 1, a4);
        if (*a4 < 1 && ++v13 < (int)ures_getSize(v7)) {
          continue;
        }
        goto LABEL_20;
      }
      *a4 = 7;
    }
LABEL_20:
    int v17 = *a4;
    if (!a3 && v17 <= 0)
    {
      for (uint64_t i = 0; i != 18; ++i)
      {
        while (1)
        {
          uint64_t v19 = off_1E550D110[i];
          int v20 = strlen(v19);
          if (ulist_containsString((uint64_t)EmptyList, v19, v20)) {
            break;
          }
          ulist_addItemEndList((uint64_t)EmptyList, v19, 0, a4);
          int v17 = *a4;
          ++i;
          if (*a4 > 0 || i == 18) {
            goto LABEL_31;
          }
        }
      }
      int v17 = *a4;
    }
LABEL_31:
    if (v17 >= 1)
    {
      ulist_deleteList(EmptyList);
LABEL_5:
      EmptyList = 0;
    }
  }
  ures_close(v7);
  ures_close(v6);
  uint64_t v10 = 0;
  if (*a4 <= 0 && EmptyList)
  {
    uint64_t v10 = uprv_malloc(0x38uLL);
    if (v10)
    {
      ulist_resetList(EmptyList);
      long long v11 = *(_OWORD *)&off_1EDA53F60;
      *uint64_t v10 = xmmword_1EDA53F50;
      v10[1] = v11;
      _OWORD v10[2] = xmmword_1EDA53F70;
      *((void *)v10 + 6) = off_1EDA53F80;
      *((void *)v10 + 1) = EmptyList;
    }
    else
    {
      *a4 = 7;
      ulist_deleteList(EmptyList);
    }
  }
  return v10;
}

uint64_t ucal_getTimeZoneTransitionDate(icu::Calendar *a1, unsigned int a2, double *a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  double TimeInMillis = icu::Calendar::getTimeInMillis(a1, a4);
  uint64_t TimeZone = icu::Calendar::getTimeZone(v10, a1);
  if (result)
  {
    if (*(int *)a4 <= 0)
    {
      char v12 = (uint64_t *)result;
      memset(v15, 0, sizeof(v15));
      icu::TimeZoneTransition::TimeZoneTransition(v15);
      BOOL v13 = (a2 & 0xFFFFFFFD) == 1;
      uint64_t v14 = *v12;
      if (a2 > 1)
      {
        if ((*(unsigned int (**)(uint64_t *, BOOL, _OWORD *, double))(v14 + 120))(v12, v13, v15, TimeInMillis))
        {
          goto LABEL_8;
        }
      }
      else if ((*(unsigned int (**)(uint64_t *, BOOL, _OWORD *, double))(v14 + 112))(v12, v13, v15, TimeInMillis))
      {
LABEL_8:
        *a3 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v15);
        icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v15);
        return 1;
      }
      icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v15);
    }
    return 0;
  }
  return result;
}

uint64_t ucal_getWindowsTimeZoneID(uint64_t a1, uint64_t a2, UChar *a3, int a4, icu::UnicodeString *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v21 = 0;
    long long v20 = 0u;
    int v17 = &unk_1EDA47700;
    LOWORD(v18) = 2;
    icu::UnicodeString::UnicodeString((uint64_t)v16, a1, a2);
    icu::TimeZone::getWindowsID((icu::TimeZone *)v16, (const icu::UnicodeString *)&v17, a5, v9, v10);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v16);
    unint64_t v12 = *(unsigned int *)a5;
    if ((int)v12 > 0)
    {
LABEL_4:
      uint64_t v5 = 0;
LABEL_10:
      icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v17);
      return v5;
    }
    unint64_t v12 = (__int16)v18;
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v5 = DWORD1(v18);
      if (SDWORD1(v18) <= 0) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v12 = (unsigned __int16)v18;
      if ((unsigned __int16)v18 < 0x20u) {
        goto LABEL_4;
      }
      uint64_t v5 = (unsigned __int16)v18 >> 5;
    }
    long long v15 = a3;
    icu::UnicodeString::extract((uint64_t)&v17, &v15, a4, (int *)a5);
    uint64_t v14 = v15;
    unint64_t v12 = (unint64_t)&v14;
    goto LABEL_10;
  }
  return 0;
}

uint64_t ucal_getTimeZoneIDForWindowsID(uint64_t a1, uint64_t a2, const icu::UnicodeString *a3, UChar *a4, int a5, icu::UnicodeString *a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 <= 0)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v22 = 0;
    long long v21 = 0u;
    *(void *)long long v18 = &unk_1EDA47700;
    LOWORD(v19) = 2;
    icu::UnicodeString::UnicodeString((uint64_t)v17, a1, a2);
    icu::TimeZone::getIDForWindowsID((icu::TimeZone *)v17, a3, v18, a6, v11);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v17);
    unint64_t v13 = *(unsigned int *)a6;
    if ((int)v13 > 0)
    {
LABEL_4:
      uint64_t v6 = 0;
LABEL_10:
      icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v18);
      return v6;
    }
    unint64_t v13 = (__int16)v19;
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v6 = DWORD1(v19);
      if (SDWORD1(v19) <= 0) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v13 = (unsigned __int16)v19;
      if ((unsigned __int16)v19 < 0x20u) {
        goto LABEL_4;
      }
      uint64_t v6 = (unsigned __int16)v19 >> 5;
    }
    long long v16 = a4;
    icu::UnicodeString::extract((uint64_t)v18, &v16, a5, (int *)a6);
    long long v15 = v16;
    unint64_t v13 = (unint64_t)&v15;
    goto LABEL_10;
  }
  return 0;
}

void ucal_getTimeZoneOffsetFromLocal(icu::Calendar *a1, int a2, int a3, int a4, int a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    double TimeInMillis = icu::Calendar::getTimeInMillis(a1, a6);
    int v9 = (uint64_t *)*(unsigned int *)a6;
    if ((int)v9 <= 0)
    {
      double v10 = TimeInMillis;
      uint64_t TimeZone = icu::Calendar::getTimeZone(v9, a1);
      if (v12)
      {
        uint64_t v14 = *(void (**)(__n128))(*(void *)v12 + 160);
        v13.n128_f64[0] = v10;
        v14(v13);
      }
      else
      {
        *a6 = U_ILLEGAL_ARGUMENT_ERROR;
      }
    }
  }
}

uint64_t sub_18CA09C84(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a1 > *a2) {
    return 1;
  }
  int v3 = a1[1];
  int v4 = a2[1];
  BOOL v5 = v3 < v4;
  BOOL v6 = v3 > v4;
  if (v5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v6;
  }
}

uint64_t uacal_getDayPeriod(uint64_t a1, signed int a2, signed int a3, int a4, int *a5)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 10;
  }
  if (a2 > 0x17 || a3 >= 0x3C)
  {
    *a5 = 1;
    return 10;
  }
  long long __base = 0u;
  memset(v50, 0, sizeof(v50));
  uint64_t v10 = ures_openDirect(0, (uint64_t)"dayPeriods", (uint64_t)a5);
  uint64_t v11 = v10;
  if (*a5 <= 0)
  {
    if (a4) {
      uint64_t v14 = "locales";
    }
    else {
      uint64_t v14 = "locales_selection";
    }
    uint64_t v15 = ures_getByKey(v10, v14, 0, a5);
    if (*a5 > 0)
    {
      uint64_t v12 = 10;
LABEL_27:
      if (v15) {
        ures_close(v15);
      }
      goto LABEL_29;
    }
    int v48 = 0;
    uint64_t v47 = 0;
    if (!a1
      || (LODWORD(v46) = 0, uloc_getLanguage(a1, (char *)&v47, 12, (int *)&v46), *a5 > 0)
      || *a5 == -124
      || !(_BYTE)v47)
    {
      strcpy((char *)&v47, "en");
    }
    uint64_t v16 = ures_getByKey(v15, (const char *)&v47, 0, a5);
    if (*a5 >= 1)
    {
      *a5 = 0;
      uint64_t v16 = ures_getByKey(v15, "en", v16, a5);
      if (*a5 > 0) {
        goto LABEL_24;
      }
    }
    uint64_t v46 = 0;
    int32_t v45 = 8;
    ures_getUTF8String(v16, (char *)&v46, &v45, 1, a5);
    if (*a5 > 0
      || (v17 = ures_getByKey(v11, "rules", v15, a5), uint64_t v15 = v17, *a5 > 0)
      || (uint64_t v18 = ures_getByKey(v17, (const char *)&v46, v11, a5), v11 = v18, *a5 > 0))
    {
LABEL_24:
      uint64_t v12 = 10;
      goto LABEL_25;
    }
    int v19 = 0;
    uint64_t v20 = 0;
    if (ures_hasNext(v18))
    {
      while (1)
      {
        NextResource = ures_getNextResource(v11, v15, (UErrorCode *)a5);
        uint64_t v15 = (uint64_t)NextResource;
        if (*a5 > 0) {
          goto LABEL_72;
        }
        uint64_t Key = (const char *)ures_getKey((uint64_t)NextResource);
        uint64_t v23 = &off_1E550D1A8;
        while (strcmp(Key, *v23))
        {
          v23 += 2;
          if (v23 >= &off_1E550D248)
          {
            int v24 = 10;
            goto LABEL_38;
          }
        }
        int v24 = *((_DWORD *)v23 + 2);
LABEL_38:
        int v40 = v24;
        if (ures_hasNext(v15))
        {
          int v41 = 24;
          do
          {
            long long v25 = ures_getNextResource(v15, v20, (UErrorCode *)a5);
            uint64_t v20 = (uint64_t)v25;
            if (*a5 > 0) {
              goto LABEL_72;
            }
            uint64_t v26 = (const char *)ures_getKey((uint64_t)v25);
            __int16 v44 = 0;
            int32_t v42 = 6;
            *(_DWORD *)long long v43 = 0;
            ures_getUTF8String(v20, v43, &v42, 1, a5);
            if (*a5 >= 1) {
              goto LABEL_72;
            }
            int v27 = atoi(v43);
            if (!strcmp(v26, "before"))
            {
              int v41 = v27;
            }
            else
            {
              if (!strcmp(v26, "from"))
              {
                int v28 = 1;
                if (v27 > v41 && v19 <= 11)
                {
                  long long v29 = (char *)&v50[-1] + 12 * v19;
                  *(void *)long long v29 = 0x100000000;
                  *((_DWORD *)v29 + 2) = v40;
                  ++v19;
                  int v28 = 1;
                }
              }
              else
              {
                int v28 = 0;
              }
              if (v19 <= 11)
              {
                long long v30 = (int *)&v50[-1] + 3 * v19;
                *long long v30 = v27;
                v30[1] = v28;
                int v30[2] = v40;
                ++v19;
              }
            }
          }
          while (ures_hasNext(v15));
        }
        if (!ures_hasNext(v11))
        {
          if (v19 < 12) {
            break;
          }
          qsort(&__base, v19, 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_18CA09C84);
          goto LABEL_55;
        }
      }
    }
    int v31 = v19;
    long long v32 = (char *)&v50[-1] + 12 * v19;
    *(void *)long long v32 = 24;
    *((_DWORD *)v32 + 2) = 10;
    qsort(&__base, ++v19, 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_18CA09C84);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_55:
      uint64_t v33 = 0;
      uint64_t v34 = (_DWORD *)&__base + 1;
      do
      {
        if (!v33 || (*(v34 - 2) & 0xFFFFFFFE) != 8) {
          *uint64_t v34 = 0;
        }
        ++v33;
        v34 += 3;
      }
      while (v19 != v33);
      if (v19 >= 2)
      {
        uint64_t v35 = 0;
        uint64_t v36 = (v19 - 1);
        uint64_t v37 = (signed int *)v50;
        while (1)
        {
          signed int v38 = *(v37 - 1);
          if (v38 > a2 || v38 >= a2 && *v37 > a3) {
            break;
          }
          ++v35;
          v37 += 3;
          if (v36 == v35) {
            goto LABEL_69;
          }
        }
        LODWORD(v36) = v35;
LABEL_69:
        signed int v39 = *((_DWORD *)&v50[-1] + 3 * v36);
        if (v39 <= a2 && (v39 < a2 || *((_DWORD *)&v50[-1] + 3 * v36 + 1) <= a3))
        {
          uint64_t v12 = *((unsigned int *)&v50[-1] + 3 * v36 + 2);
          if (!v20)
          {
LABEL_25:
            if (v16) {
              ures_close(v16);
            }
            goto LABEL_27;
          }
LABEL_73:
          ures_close(v20);
          goto LABEL_25;
        }
LABEL_72:
        uint64_t v12 = 10;
        if (!v20) {
          goto LABEL_25;
        }
        goto LABEL_73;
      }
    }
    LODWORD(v36) = 0;
    goto LABEL_69;
  }
  uint64_t v12 = 10;
LABEL_29:
  if (v11) {
    ures_close(v11);
  }
  return v12;
}

void sub_18CA0A25C(unsigned int a1, uint64_t a2)
{
  umtx_lock(0);
  ucln_registerCleanup(7, (uint64_t)sub_18CA0A2C8);
  if (a1 <= 0x23) {
    qword_1EB20BD30[a1] = a2;
  }

  umtx_unlock(0);
}

uint64_t sub_18CA0A2C8()
{
  for (uint64_t i = 0; i != 36; ++i)
  {
    int v1 = (void (*)(void))qword_1EB20BD30[i];
    if (v1)
    {
      v1();
      qword_1EB20BD30[i] = 0;
    }
  }
  return 1;
}

icu::RuleBasedCollator *ucol_openBinary(const unsigned __int8 *a1, unint64_t a2, const void *a3, UErrorCode *a4)
{
  int v4 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v4 > 0) {
    return 0;
  }
  int v9 = a2;
  BOOL v5 = (icu::RuleBasedCollator *)icu::UMemory::operator new(v4, (icu::UMemory *)0x110, a2);
  if (!v5)
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    return v5;
  }
  if (a3) {
  else
  }
    uint64_t v11 = 0;
  icu::RuleBasedCollator::RuleBasedCollator(v5, a1, v9, v11, a4);
  if (*(int *)a4 >= 1)
  {
    icu::RuleBasedCollator::~RuleBasedCollator(v5);
    icu::UMemory::operator delete(v12);
    return 0;
  }
  return v5;
}

uint64_t ucol_cloneBinary(void *a1, unsigned __int8 *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (a1)
  {
    if (!a1)
    {
      *a4 = U_UNSUPPORTED_ERROR;
      return 0;
    }
  }

  return icu::RuleBasedCollator::cloneBinary((icu::RuleBasedCollator *)a1, a2, a3, a4);
}

uint64_t ucol_safeClone(uint64_t result, uint64_t a2, int *a3, int *a4)
{
  if (!a4) {
    return 0;
  }
  if (*a4 > 0) {
    return 0;
  }
  if (!result)
  {
    int v7 = 1;
LABEL_18:
    *a4 = v7;
    return result;
  }
  if (a3)
  {
    int v6 = *a3;
    *a3 = 1;
    if (!v6) {
      return 0;
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  if (result) {
    int v7 = -126;
  }
  else {
    int v7 = 7;
  }
  if (result) {
    BOOL v8 = a3 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    goto LABEL_18;
  }
  return result;
}

uint64_t ucol_clone(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0;
  }
  if (*a2 > 0) {
    return 0;
  }
  if (a1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (result) {
      return result;
    }
    int v4 = 7;
  }
  else
  {
    int v4 = 1;
  }
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

uint64_t ucol_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ucol_mergeSortkeys(char *__s, int a2, char *a3, int a4, unsigned char *a5, int a6)
{
  if (!a2 || (BOOL v8 = __s) == 0 || (v9 = a2, a2 < -1))
  {
LABEL_14:
    uint64_t result = 0;
    if (a5)
    {
      if (a6 >= 1)
      {
        uint64_t result = 0;
        *a5 = 0;
      }
    }
    return result;
  }
  int v10 = a4;
  uint64_t v11 = a3;
  if (a2 < 1)
  {
    if (!a3) {
      goto LABEL_14;
    }
  }
  else if (!a3 || __s[a2 - 1])
  {
    goto LABEL_14;
  }
  if (a4 < -1 || !a4) {
    goto LABEL_14;
  }
  if (a4 < 1)
  {
    if (a6 < 0) {
      return 0;
    }
  }
  else if (a6 < 0 || a3[a4 - 1])
  {
    goto LABEL_14;
  }
  if (!a5 && a6) {
    return 0;
  }
  if (a2 < 0) {
    int v9 = strlen(__s) + 1;
  }
  if (v10 < 0) {
    int v10 = strlen(v11) + 1;
  }
  uint64_t result = (v10 + v9);
  if ((int)result <= a6)
  {
    for (uint64_t i = a5; ; i += 2)
    {
      unsigned int v14 = *v8;
      if (v14 >= 2)
      {
        do
        {
          *i++ = v14;
          unsigned int v15 = *++v8;
          LOBYTE(v14) = v15;
        }
        while (v15 > 1);
      }
      unsigned char *i = 2;
      uint64_t v16 = i + 1;
      unsigned int v17 = *(unsigned __int8 *)v11;
      if (v17 >= 2)
      {
        do
        {
          *v16++ = v17;
          unsigned int v18 = *(unsigned __int8 *)++v11;
          unsigned int v17 = v18;
        }
        while (v18 > 1);
        uint64_t i = v16 - 1;
      }
      if (!v17 || *v8 != 1) {
        break;
      }
      ++v8;
      ++v11;
      *uint64_t v16 = 1;
    }
    if (*v8) {
      uint64_t v20 = (unsigned __int8 *)v8;
    }
    else {
      uint64_t v20 = (unsigned __int8 *)v11;
    }
    LODWORD(result) = v16 - a5;
    do
    {
      int v21 = *v20++;
      *v16++ = v21;
      uint64_t result = (result + 1);
    }
    while (v21);
  }
  return result;
}

uint64_t ucol_getSortKey(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 272))();
}

uint64_t ucol_nextSortKeyPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (a6 && *a6 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 304))();
  }
  else {
    return 0;
  }
}

uint64_t ucol_getBound(char *__src, int a2, int a3, int a4, char *__dst, int a6, int *a7)
{
  if (!a7) {
    return 0;
  }
  if (*a7 > 0) {
    return 0;
  }
  if (!__src) {
    goto LABEL_19;
  }
  uint64_t v10 = 2;
  while (1)
  {
    uint64_t v12 = v10;
    int64_t v13 = v10 - 1;
    int v14 = __src[v10 - 1];
    a4 -= v14 == 1;
    if (!a4) {
      break;
    }
    ++v10;
    if (v14) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = v13 < a2;
    }
    if (!v15)
    {
      *a7 = -123;
      break;
    }
  }
  if (!__dst || a3 + (int)v12 - 1 > a6) {
    return (a3 + v12);
  }
  memcpy(__dst, __src, v13);
  if (a3 == 2)
  {
    char v16 = -1;
    __dst[v12 - 1] = -1;
    int64_t v13 = v12;
    LODWORD(v12) = v12 + 1;
LABEL_23:
    __dst[v13] = v16;
    goto LABEL_24;
  }
  if (a3 == 1)
  {
    char v16 = 2;
    goto LABEL_23;
  }
  if (a3)
  {
LABEL_19:
    uint64_t result = 0;
    *a7 = 1;
    return result;
  }
  LODWORD(v12) = v13;
LABEL_24:
  uint64_t result = (v12 + 1);
  __dst[(int)v12] = 0;
  return result;
}

uint64_t ucol_setMaxVariable(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)result + 200))();
  }
  return result;
}

uint64_t ucol_getMaxVariable(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
}

uint64_t ucol_setVariableTop(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (a1 && *a4 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 216))();
  }
  else {
    return 0;
  }
}

uint64_t ucol_getVariableTop(uint64_t a1, int *a2)
{
  if (a1 && *a2 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 240))();
  }
  else {
    return 0;
  }
}

uint64_t ucol_restoreVariableTop(uint64_t result, uint64_t a2, int *a3)
{
  if (result)
  {
    if (*a3 <= 0) {
      return (*(uint64_t (**)(void))(*(void *)result + 232))();
    }
  }
  return result;
}

uint64_t ucol_setAttribute(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (result)
  {
    if (*a4 <= 0) {
      return (*(uint64_t (**)(void))(*(void *)result + 184))();
    }
  }
  return result;
}

uint64_t ucol_getAttribute(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 && *a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 192))();
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ucol_setStrength(uint64_t result, uint64_t a2)
{
  int v2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)result + 184))(result, 5, a2, &v2);
  }
  return result;
}

uint64_t ucol_getStrength(uint64_t a1)
{
  int v2 = 0;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 192))(a1, 5, &v2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ucol_getReorderCodes(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
  }
  else {
    return 0;
  }
}

uint64_t ucol_setReorderCodes(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)result + 168))();
  }
  return result;
}

uint64_t ucol_getVersion(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

uint64_t ucol_strcollIter(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (a4 && *a4 <= 0)
  {
    if (a1 && a2 && a3) {
      return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
    }
    *a4 = 1;
  }
  return 0;
}

uint64_t ucol_strcoll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, a3, a4, a5, &v6);
}

uint64_t ucol_strcollUTF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*a6 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 296))();
  }
  else {
    return 0;
  }
}

BOOL ucol_greater(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = 0;
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, a3, a4, a5, &v6) == 1;
}

BOOL ucol_greaterOrEqual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = 0;
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, a3, a4, a5, &v6) != -1;
}

BOOL ucol_equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = 0;
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, a3, a4, a5, &v6) == 0;
}

uint64_t ucol_getUCAVersion(uint64_t result, unsigned char *a2)
{
  if (result)
  {
    int v4 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)result + 176))(result, &v4);
    char v3 = BYTE1(v4);
    *a2 = BYTE1(v4) >> 3;
    a2[1] = v3 & 7;
    a2[2] = BYTE2(v4) >> 6;
    a2[3] = 0;
  }
  return result;
}

void *ucol_getRules(icu::RuleBasedCollator *a1, unsigned int *a2)
{
  if (a1
  {
    *a2 = 0;
    return &unk_18CA97D48;
  }
  else
  {
    uint64_t Rules = icu::RuleBasedCollator::getRules(a1);
    unsigned int v4 = *(unsigned __int16 *)(Rules + 8);
    int v5 = (__int16)v4;
    unsigned int v6 = v4 >> 5;
    if (v5 < 0) {
      unsigned int v6 = *(_DWORD *)(Rules + 12);
    }
    *a2 = v6;
    __int16 v7 = *(_WORD *)(Rules + 8);
    if ((v7 & 0x11) != 0)
    {
      return 0;
    }
    else if ((v7 & 2) != 0)
    {
      return (void *)(Rules + 10);
    }
    else
    {
      return *(void **)(Rules + 24);
    }
  }
}

uint64_t ucol_getRulesEx(void *a1, int a2, UChar *a3, int a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v17 = 0;
  long long v16 = 0u;
  int64_t v13 = &unk_1EDA47700;
  LOWORD(v14) = 2;
  if (!a1
  {
    icu::RuleBasedCollator::getRules((uint64_t)a1, a2, (uint64_t)&v13);
  }
  if (a3 && a4 >= 1)
  {
    int v12 = 0;
    uint64_t v11 = a3;
    uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v13, &v11, a4, &v12);
    uint64_t v10 = v11;
    unint64_t v8 = (unint64_t)&v10;
  }
  else
  {
    unint64_t v8 = (__int16)v14;
    if ((v8 & 0x80000000) != 0)
    {
      uint64_t v7 = DWORD1(v14);
    }
    else
    {
      unint64_t v8 = (unsigned __int16)v14;
      uint64_t v7 = (unsigned __int16)v14 >> 5;
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v13);
  return v7;
}

const char *ucol_getLocaleByType(void *a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  if (a1)
  {
    if (!a1)
    {
      *a3 = 16;
      return 0;
    }
  }

  return icu::RuleBasedCollator::internalGetLocaleID((uint64_t)a1, a2, a3);
}

icu::UnicodeSet *ucol_getTailoredSet(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  uint64_t result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 248))(a1);
  unint64_t v4 = *a2;
  if ((int)v4 >= 1 && result)
  {
    int v5 = icu::UnicodeSet::~UnicodeSet((void *)v4, result);
    icu::UMemory::operator delete(v5);
    return 0;
  }
  return result;
}

uint64_t ucol_equals(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
}

void sub_18CA0B1AC(int *a1)
{
  if (*a1 <= 0)
  {
    uint64_t v2 = ures_open("icudt74l-coll", "root", a1);
    qword_1E9192B48 = v2;
    if (*a1 <= 0)
    {
      qword_1E9192B58 = (uint64_t)ures_getStringByKey(v2, "UCARules", &dword_1E9192B50, a1);
      if (*a1 < 1)
      {
        sub_18CA0A25C(0x1Cu, (uint64_t)sub_18CA0B26C);
      }
      else
      {
        ures_close(qword_1E9192B48);
        qword_1E9192B48 = 0;
      }
    }
  }
}

uint64_t sub_18CA0B26C()
{
  qword_1E9192B58 = 0;
  dword_1E9192B50 = 0;
  ures_close(qword_1E9192B48);
  qword_1E9192B48 = 0;
  atomic_store(0, &dword_1E9192B60);
  return 1;
}

void sub_18CA0B2B8(uint64_t a1)
{
  int v3 = 0;
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192B60, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192B60))
  {
    sub_18CA0B1AC(&v3);
    dword_1E9192B64 = v3;
    icu::umtx_initImplPostInit(&dword_1E9192B60);
    if (v3 > 0) {
      return;
    }
    goto LABEL_10;
  }
  if (dword_1E9192B64 <= 0 && v3 <= 0) {
LABEL_10:
  }
    icu::UnicodeString::doAppend(a1, qword_1E9192B58, 0, dword_1E9192B50);
}

void sub_18CA0B374(char *a1, char *__s, uint64_t a3, int *a4)
{
  __dst[2] = *MEMORY[0x1E4F143B8];
  if (*a4 <= 0)
  {
    __dst[0] = 0;
    __dst[1] = 0;
    int v8 = strlen(__s);
    if (v8 < 16)
    {
      memcpy(__dst, __s, v8 + 1);
      T_CString_toLowerCase((unsigned __int8 *)__dst);
      uint64_t v9 = ures_open("icudt74l-coll", a1, a4);
      uint64_t v10 = ures_getByKey(v9, "collations", 0, a4);
      uint64_t v11 = ures_getByKeyWithFallback(v10, (char *)__dst, 0, (UErrorCode *)a4);
      unsigned int v19 = 0;
      StringByuint64_t Key = ures_getStringByKey(v11, "Sequence", (int *)&v19, a4);
      if (*a4 <= 0)
      {
        uint64_t v13 = (uint64_t)StringByKey;
        uint64_t v14 = v19;
        icu::UnicodeString::unBogus(a3);
        unsigned int v15 = *(unsigned __int16 *)(a3 + 8);
        int v16 = (__int16)v15;
        unsigned int v17 = v15 >> 5;
        uint64_t v18 = v16 >= 0 ? v17 : *(unsigned int *)(a3 + 12);
        icu::UnicodeString::doReplace(a3, 0, v18, v13, 0, v14);
        if (*(_WORD *)(a3 + 8)) {
          *a4 = 7;
        }
      }
      if (v11) {
        ures_close(v11);
      }
      if (v10) {
        ures_close(v10);
      }
      if (v9) {
        ures_close(v9);
      }
    }
    else
    {
      *a4 = 1;
    }
  }
}

uint64_t *icu::LocaleCacheKey<icu::CollationCacheEntry>::createObject(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_18CA0B51C(a2, a3);
}

uint64_t *sub_18CA0B51C(uint64_t a1, int *a2)
{
  if (!*(void *)(a1 + 504)) {
    return (uint64_t *)sub_18CA0B918(a1, a2);
  }
  if (!*(void *)(a1 + 512)) {
    return sub_18CA0BAB8(a1, a2);
  }
  if (*(void *)(a1 + 520)) {
    return sub_18CA0BFF4(a1, a2);
  }
  return sub_18CA0BCD8(a1, (UErrorCode *)a2);
}

UErrorCode *sub_18CA0B544(uint64_t a1, icu::CollationRoot *this)
{
  v8[66] = *(icu::SharedObject ***)MEMORY[0x1E4F143B8];
  uint64_t RootCacheEntry = icu::CollationRoot::getRootCacheEntry(this, (UErrorCode *)this);
  if (*(int *)this > 0) {
    return 0;
  }
  int v5 = (UErrorCode *)RootCacheEntry;
  unsigned int v6 = *(const char **)(a1 + 40);
  if (!*v6 || !strcmp(v6, "root"))
  {
    icu::SharedObject::addRef((uint64_t)v5);
  }
  else
  {
    *(_DWORD *)this = 0;
    bzero(v8, 0x210uLL);
    sub_18CA0B734((uint64_t)v8, v5, (char **)a1, (UErrorCode *)this);
    int v5 = (UErrorCode *)sub_18CA0B62C(v8, (UErrorCode *)this);
    sub_18CA0B8CC((uint64_t *)v8);
  }
  return v5;
}

icu::SharedObject *sub_18CA0B62C(icu::SharedObject ***a1, UErrorCode *a2)
{
  v7[30] = *MEMORY[0x1E4F143B8];
  memset(&v7[1], 0, 232);
  v7[0] = &unk_1EDA54018;
  icu::Locale::Locale((icu::Locale *)&v7[2], (uint64_t)(a1 + 30));
  unsigned int v6 = 0;
  sub_18C8D86FC(*a1, (const icu::CacheKeyBase *)v7, a1, &v6, a2);
  unint64_t v4 = v6;
  v7[0] = &unk_1EDA54018;
  icu::Locale::~Locale((icu::Locale *)&v7[2]);
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)v7);
  return v4;
}

uint64_t sub_18CA0B734(uint64_t a1, UErrorCode *a2, char **a3, UErrorCode *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = icu::UnifiedCache::getInstance(this, a2);
  *(void *)(a1 + 8) = a2;
  icu::Locale::Locale((icu::Locale *)(a1 + 16), (uint64_t)(a2 + 6));
  icu::Locale::Locale((icu::Locale *)(a1 + 240), (uint64_t)a3);
  *(_DWORD *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 500) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  if (*(int *)this <= 0)
  {
    if (*(unsigned char *)(a1 + 456)) {
      goto LABEL_3;
    }
    uint64_t BaseName = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
    if (!strcmp(*(const char **)(a1 + 280), BaseName)) {
      return a1;
    }
    icu::Locale::Locale((icu::Locale *)v11, BaseName, 0, 0, 0);
    icu::Locale::operator=(a1 + 240, (uint64_t)v11);
    icu::Locale::~Locale((icu::Locale *)v11);
    if (*(unsigned char *)(a1 + 456)
      || (int KeywordValue = icu::Locale::getKeywordValue(a3, "collation", (char *)(a1 + 464), 15, this), *(int *)this >= 1))
    {
LABEL_3:
      *this = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      *(unsigned char *)(a1 + KeywordValue + 464) = 0;
      if (KeywordValue)
      {
        if (uprv_stricmp((unsigned char *)(a1 + 464), "default"))
        {
          T_CString_toLowerCase((unsigned __int8 *)(a1 + 464));
          icu::Locale::setKeywordValue((char **)(a1 + 240), "collation", (char *)(a1 + 464), this);
        }
        else
        {
          *(unsigned char *)(a1 + 464) = 0;
        }
      }
    }
  }
  return a1;
}

uint64_t *sub_18CA0B8CC(uint64_t *a1)
{
  return a1;
}

void *sub_18CA0B918(uint64_t a1, int *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*a2 > 0) {
    return 0;
  }
  int v5 = (icu::Locale *)(a1 + 240);
  uint64_t BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
  *(void *)(a1 + 504) = ures_openNoDefault("icudt74l-coll", BaseName, a2);
  if (*a2 == 2)
  {
    *a2 = -127;
    icu::SharedObject::addRef(*(void *)(a1 + 8));
    return *(void **)(a1 + 8);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
    icu::Locale::Locale((icu::Locale *)v13, (uint64_t)v5);
    uint64_t LocaleByType = (const char *)ures_getLocaleByType(*(void *)(a1 + 504), 0, a2);
    int v8 = (uint64_t *)*a2;
    if ((int)v8 <= 0)
    {
      icu::Locale::Locale(v8, (icu::Locale *)v12, LocaleByType, 0, 0, 0);
      uint64_t v9 = icu::Locale::operator=(a1 + 16, (uint64_t)v12);
      icu::Locale::operator=(v5, v9);
      icu::Locale::~Locale((icu::Locale *)v12);
      if (*(unsigned char *)(a1 + 464)) {
        icu::Locale::setKeywordValue((char **)v5, "collation", (char *)(a1 + 464), (UErrorCode *)a2);
      }
      if (icu::Locale::operator==((uint64_t)v5, (uint64_t)v13)) {
        uint64_t v10 = sub_18CA0BAB8(a1, a2);
      }
      else {
        uint64_t v10 = sub_18CA0B62C((icu::SharedObject ***)a1, (UErrorCode *)a2);
      }
      uint64_t v2 = v10;
    }
    else
    {
      uint64_t v2 = 0;
    }
    icu::Locale::~Locale((icu::Locale *)v13);
  }
  return v2;
}

uint64_t *sub_18CA0BAB8(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  uint64_t v5 = ures_getByKey(*(void *)(a1 + 504), "collations", 0, a2);
  *(void *)(a1 + 512) = v5;
  if (*a2 == 2)
  {
    *a2 = -127;
    return (uint64_t *)sub_18CA0C3A0(a1, v6, a2);
  }
  else
  {
    if (*a2 > 0) {
      return 0;
    }
    int v13 = 0;
    uint64_t v7 = ures_getByKeyWithFallback(v5, "default", 0, (UErrorCode *)&v13);
    int v12 = 0;
    String = ures_getString(v7, &v12, &v13);
    if (v13 > 0 || v12 < 1 || v12 > 15) {
      strcpy((char *)(a1 + 480), "standard");
    }
    else {
      u_UCharsToChars(String, (char *)(a1 + 480), v12 + 1);
    }
    if (v7) {
      ures_close(v7);
    }
    if (*(unsigned char *)(a1 + 464))
    {
      if (!strcmp((const char *)(a1 + 464), (const char *)(a1 + 480))) {
        *(_DWORD *)(a1 + 496) |= 2u;
      }
      if (!strcmp((const char *)(a1 + 464), "search")) {
        *(_DWORD *)(a1 + 496) |= 1u;
      }
      if (!strcmp((const char *)(a1 + 464), "standard")) {
        *(_DWORD *)(a1 + 496) |= 4u;
      }
      return sub_18CA0BCD8(a1, (UErrorCode *)a2);
    }
    else
    {
      uint64_t v9 = strcpy((char *)(a1 + 464), (const char *)(a1 + 480));
      int v10 = *(_DWORD *)(a1 + 496);
      int v11 = v10 | 2;
      *(_DWORD *)(a1 + 496) = v10 | 2;
      if (!strcmp(v9, "search"))
      {
        int v11 = v10 | 3;
        *(_DWORD *)(a1 + 496) = v10 | 3;
      }
      if (!strcmp((const char *)(a1 + 464), "standard")) {
        *(_DWORD *)(a1 + 496) = v11 | 4;
      }
      icu::Locale::setKeywordValue((char **)(a1 + 240), "collation", (char *)(a1 + 464), (UErrorCode *)a2);
      return (uint64_t *)sub_18CA0B62C((icu::SharedObject ***)a1, (UErrorCode *)a2);
    }
  }
}

uint64_t *sub_18CA0BCD8(uint64_t a1, UErrorCode *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t v5 = (void *)(a1 + 464);
  uint64_t v6 = ures_getByKeyWithFallback(*(void *)(a1 + 512), (char *)(a1 + 464), 0, a2);
  uint64_t v7 = v6;
  if (*a2 == U_MISSING_RESOURCE_ERROR)
  {
    int v8 = strlen((const char *)(a1 + 464));
    *a2 = U_USING_DEFAULT_WARNING;
    *(unsigned char *)(a1 + 500) = 1;
    int v10 = *(_DWORD *)(a1 + 496);
    if ((v10 & 1) == 0 && v8 >= 7 && !strncmp((const char *)(a1 + 464), "search", 6uLL))
    {
      *(_DWORD *)(a1 + 496) = v10 | 1;
      *(unsigned char *)(a1 + 470) = 0;
    }
    else if ((v10 & 2) != 0)
    {
      if ((v10 & 4) != 0)
      {
        uint64_t v20 = sub_18CA0C3A0(a1, v9, (int *)a2);
        goto LABEL_25;
      }
      *(_DWORD *)(a1 + 496) = v10 | 4;
      *(unsigned char *)(a1 + 472) = 0;
      void *v5 = *(void *)"standard";
    }
    else
    {
      *(_DWORD *)(a1 + 496) = v10 | 2;
      strcpy((char *)(a1 + 464), (const char *)(a1 + 480));
    }
    icu::Locale::setKeywordValue((char **)(a1 + 240), "collation", (char *)(a1 + 464), a2);
    uint64_t v20 = (uint64_t)sub_18CA0B62C((icu::SharedObject ***)a1, a2);
LABEL_25:
    uint64_t v2 = v20;
    if (!v7) {
      return (uint64_t *)v2;
    }
LABEL_26:
    ures_close(v7);
    return (uint64_t *)v2;
  }
  if (*(int *)a2 > 0)
  {
    uint64_t v2 = 0;
    if (!v6) {
      return (uint64_t *)v2;
    }
    goto LABEL_26;
  }
  *(void *)(a1 + 520) = v6;
  uint64_t LocaleByType = ures_getLocaleByType(v6, 0, (int *)a2);
  if (*(int *)a2 > 0) {
    return 0;
  }
  int v12 = (const char *)LocaleByType;
  uint64_t BaseName = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 16));
  icu::Locale::Locale(v14, (icu::Locale *)v24, v12, 0, 0, 0);
  icu::Locale::Locale(v15, (icu::Locale *)v23, BaseName, 0, 0, 0);
  BOOL v16 = icu::Locale::operator==((uint64_t)v24, (uint64_t)v23);
  icu::Locale::~Locale((icu::Locale *)v23);
  icu::Locale::~Locale((icu::Locale *)v24);
  if (strcmp((const char *)(a1 + 464), (const char *)(a1 + 480)))
  {
    icu::Locale::setKeywordValue((char **)(a1 + 16), "collation", (char *)(a1 + 464), a2);
    if (*(int *)a2 > 0) {
      return 0;
    }
  }
  if ((!*v12 || !strcmp(v12, "root")) && !strcmp((const char *)(a1 + 464), "standard"))
  {
    if (*(unsigned char *)(a1 + 500)) {
      *a2 = U_USING_DEFAULT_WARNING;
    }
    return (uint64_t *)sub_18CA0C3A0(a1, v18, (int *)a2);
  }
  else
  {
    icu::Locale::Locale(v17, (icu::Locale *)v24, v12, 0, 0, 0);
    icu::Locale::operator=(a1 + 240, (uint64_t)v24);
    icu::Locale::~Locale((icu::Locale *)v24);
    if (v16)
    {
      return sub_18CA0BFF4(a1, (int *)a2);
    }
    else
    {
      icu::Locale::setKeywordValue((char **)(a1 + 240), "collation", (char *)(a1 + 464), a2);
      uint64_t v22 = sub_18CA0B62C((icu::SharedObject ***)a1, a2);
      return (uint64_t *)sub_18CA0C404(a1 + 16, (uint64_t)v22, (int *)a2);
    }
  }
}

uint64_t *sub_18CA0BFF4(uint64_t a1, int *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)*a2;
  if ((int)v2 > 0) {
    return 0;
  }
  uint64_t v6 = (icu::CollationTailoring *)icu::UMemory::operator new(v2, (icu::UMemory *)0x190, (unint64_t)a2);
  uint64_t v7 = v6;
  if (v6)
  {
    icu::CollationTailoring::CollationTailoring(v6, *(const icu::CollationSettings **)(*(void *)(*(void *)(a1 + 8) + 248) + 32));
    if (*((void *)v7 + 4))
    {
      uint64_t v8 = ures_getByKey(*(void *)(a1 + 520), "%%CollationBin", 0, a2);
      unsigned int v30 = 0;
      Binary = ures_getBinary(v8, (int *)&v30, a2);
      icu::CollationDataReader::read(*(void *)(*(void *)(a1 + 8) + 248), (const icu::CollationTailoring *)Binary, (const unsigned __int8 *)v30, (uint64_t)v7, (UErrorCode *)a2, v10);
      if (*a2 > 0) {
        goto LABEL_19;
      }
      v32[0] = 0;
      v31[0] = 0;
      StringByuint64_t Key = ures_getStringByKey(*(void *)(a1 + 520), "Sequence", v31, v32);
      if (v32[0] <= 0)
      {
        long long v29 = StringByKey;
        icu::UnicodeString::setTo((icu::CollationTailoring *)((char *)v7 + 40), 1, &v29, v31[0]);
      }
      uint64_t BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
      int v13 = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 16));
      icu::Locale::Locale(v14, (icu::Locale *)v32, BaseName, 0, 0, 0);
      icu::Locale::Locale(v15, (icu::Locale *)v31, v13, 0, 0, 0);
      LOBYTE(v13) = icu::Locale::operator==((uint64_t)v32, (uint64_t)v31);
      icu::Locale::~Locale((icu::Locale *)v31);
      icu::Locale::~Locale((icu::Locale *)v32);
      if ((v13 & 1) == 0)
      {
        uint64_t v18 = ures_open("icudt74l-coll", BaseName, a2);
        uint64_t v19 = v18;
        if (*a2 > 0)
        {
          if (v18) {
            ures_close(v18);
          }
          goto LABEL_19;
        }
        v32[0] = 0;
        uint64_t v27 = ures_getByKeyWithFallback(v18, "collations/default", 0, (UErrorCode *)v32);
        v31[0] = 0;
        String = ures_getString(v27, v31, v32);
        if (v32[0] > 0 || v31[0] > 15) {
          strcpy((char *)(a1 + 480), "standard");
        }
        else {
          u_UCharsToChars(String, (char *)(a1 + 480), v31[0] + 1);
        }
        if (v27) {
          ures_close(v27);
        }
        if (v19) {
          ures_close(v19);
        }
      }
      icu::Locale::operator=((icu::CollationTailoring *)((char *)v7 + 104), a1 + 240);
      if (!strcmp((const char *)(a1 + 464), (const char *)(a1 + 480)))
      {
        uint64_t v20 = *(const char **)(a1 + 280);
        int v21 = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
        if (!strcmp(v20, v21)) {
          goto LABEL_18;
        }
        BOOL v16 = (char **)((char *)v7 + 104);
        unsigned int v17 = 0;
      }
      else
      {
        BOOL v16 = (char **)((char *)v7 + 104);
        unsigned int v17 = (char *)(a1 + 464);
      }
      icu::Locale::setKeywordValue(v16, "collation", v17, (UErrorCode *)a2);
LABEL_18:
      if (*a2 <= 0)
      {
        if (*(unsigned char *)(a1 + 500)) {
          *a2 = -127;
        }
        int v24 = *(uint64_t **)(a1 + 504);
        *((void *)v7 + 45) = v24;
        *(void *)(a1 + 504) = 0;
        uint64_t v25 = icu::UMemory::operator new(v24, (icu::UMemory *)0x100, v22);
        int v3 = v25;
        if (v25)
        {
          uint64_t v26 = sub_18C8F0F00(v25, a1 + 16, (uint64_t)v7);
          icu::SharedObject::addRef((uint64_t)v26);
          uint64_t v7 = 0;
        }
        else
        {
          *a2 = 7;
        }
        goto LABEL_20;
      }
LABEL_19:
      int v3 = 0;
LABEL_20:
      if (v8) {
        ures_close(v8);
      }
      goto LABEL_22;
    }
  }
  int v3 = 0;
  *a2 = 7;
LABEL_22:
  if (v7) {
    (*(void (**)(icu::CollationTailoring *))(*(void *)v7 + 8))(v7);
  }
  return v3;
}

uint64_t sub_18CA0C3A0(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  icu::SharedObject::addRef(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 8);

  return sub_18CA0C404(a1 + 16, v6, a3);
}

uint64_t sub_18CA0C404(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (*a3 <= 0 && !icu::Locale::operator==(a1, a2 + 24))
  {
    uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x100, v6);
    uint64_t v9 = v8;
    if (v8)
    {
      int v10 = sub_18C8F0F00(v8, a1, *(void *)(v3 + 248));
      icu::SharedObject::addRef((uint64_t)v10);
    }
    else
    {
      *a3 = 7;
    }
    icu::SharedObject::removeRef(v3);
    return (uint64_t)v9;
  }
  return v3;
}

void sub_18CA0C48C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA54018;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));

  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

icu::RuleBasedCollator *ucol_open(char *a1, const icu::Locale *a2)
{
  uint64_t v7 = (uint64_t *)*MEMORY[0x1E4F143B8];
  icu::Locale::Locale(v7, (icu::Locale *)v6, a1, 0, 0, 0);
  uint64_t Instance = icu::Collator::createInstance((icu::Collator *)v6, a2, v3);
  icu::Locale::~Locale((icu::Locale *)v6);
  if (*(int *)a2 <= 0) {
    return Instance;
  }
  else {
    return 0;
  }
}

uint64_t ucol_getDisplayName(char *a1, const char *a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  long long v20 = 0u;
  uint64_t v23 = 0;
  long long v22 = 0u;
  long long v21 = 0u;
  uint64_t v19 = &unk_1EDA47700;
  uint64_t v11 = 2;
  LOWORD(v20) = 2;
  if (a3 || a4) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a3, 0, a4);
  }
  icu::Locale::Locale((uint64_t *)v11, (icu::Locale *)v18, a1, 0, 0, 0);
  icu::Locale::Locale(v12, (icu::Locale *)v17, a2, 0, 0, 0);
  icu::Collator::getDisplayName((icu::Collator *)v18, (const icu::Locale *)v17, (const icu::Locale *)&v19, v13);
  icu::Locale::~Locale((icu::Locale *)v17);
  icu::Locale::~Locale((icu::Locale *)v18);
  BOOL v16 = (UChar *)a3;
  uint64_t v5 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a4, a5);
  unsigned int v15 = v16;
  icu::UnicodeString::~UnicodeString(&v15, (icu::UnicodeString *)&v19);
  return v5;
}

uint64_t ucol_getAvailable(int a1, int *a2)
{
  int v5 = 0;
  uint64_t AvailableLocales = icu::Collator::getAvailableLocales((icu::Collator *)&v5, a2);
  uint64_t result = 0;
  if (AvailableLocales)
  {
    if (v5 > a1) {
      return *(void *)(AvailableLocales + 224 * a1 + 40);
    }
  }
  return result;
}

uint64_t ucol_countAvailable(uint64_t a1, int *a2)
{
  unsigned int v3 = 0;
  icu::Collator::getAvailableLocales((icu::Collator *)&v3, a2);
  return v3;
}

_OWORD *ucol_getKeywords(int *a1)
{
  if (*a1 <= 0) {
    return uenum_openCharStringsEnumeration((uint64_t)&off_1E550D248, 1, a1);
  }
  else {
    return 0;
  }
}

_OWORD *ucol_getKeywordValues(const char *a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  if (!a1 || strcmp(a1, "collation"))
  {
    *a2 = 1;
    return 0;
  }

  return ures_getKeywordValues((uint64_t)"icudt74l-coll");
}

_OWORD *ucol_getKeywordValuesForLocale(uint64_t a1, char *a2, uint64_t a3, int *a4)
{
  uint64_t v5 = ures_open("icudt74l-coll", a2, a4);
  uint64_t v12 = 0;
  int v10 = &unk_1EDA53FD0;
  EmptyList = ulist_createEmptyList(a4);
  ures_getAllItemsWithFallback(v5, "collations", (uint64_t)&v10, a4);
  unint64_t v6 = 0;
  if (*a4 <= 0)
  {
    uint64_t v7 = uprv_malloc(0x38uLL);
    unint64_t v6 = v7;
    if (v7)
    {
      long long v8 = *(_OWORD *)&off_1EDA53F98;
      _OWORD *v7 = xmmword_1EDA53F88;
      v7[1] = v8;
      v7[2] = xmmword_1EDA53FA8;
      *((void *)v7 + 6) = off_1EDA53FB8;
      ulist_resetList(EmptyList);
      *((void *)v6 + 1) = EmptyList;
      EmptyList = 0;
    }
    else
    {
      *a4 = 7;
    }
  }
  int v10 = &unk_1EDA53FD0;
  ulist_deleteList(EmptyList);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v10);
  if (v5) {
    ures_close(v5);
  }
  return v6;
}

void sub_18CA0C91C(icu::ResourceSink *a1)
{
  *(void *)a1 = &unk_1EDA53FD0;
  ulist_deleteList(*((void **)a1 + 1));

  icu::ResourceSink::~ResourceSink(a1);
}

uint64_t ucol_getFunctionalEquivalent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  return ures_getFunctionalEquivalent(a1, a2, (uint64_t)"icudt74l-coll", (uint64_t)"collations", a3, a4, a5, 1, a6);
}

void sub_18CA0C9BC(icu::ResourceSink *a1)
{
  *(void *)a1 = &unk_1EDA53FD0;
  ulist_deleteList(*((void **)a1 + 1));
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v2);
}

void sub_18CA0CA18(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  __s1 = a2;
  if (*a5 > 0) {
    return;
  }
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v16, a3, a5);
  if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, 0, (const char **)&__s1, a3)) {
    return;
  }
  unsigned int v8 = 1;
  while (1)
  {
    int v9 = (*(uint64_t (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3);
    if (v9 == 2)
    {
      int v13 = __s1;
      if (strncmp(__s1, "private-", 8uLL))
      {
        int v14 = strlen(v13);
        if (!ulist_containsString(*(void *)(a1 + 8), v13, v14)) {
          ulist_addItemEndList(*(void *)(a1 + 8), __s1, 0, a5);
        }
      }
      goto LABEL_18;
    }
    if (!v9 && !*(unsigned char *)(a1 + 16) && !strcmp(__s1, "default")) {
      break;
    }
LABEL_18:
    if (*a5 < 1)
    {
      if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, v8++, (const char **)&__s1, a3)) {
        continue;
      }
    }
    return;
  }
  int v24 = 0;
  memset(&v22[1], 0, 48);
  v22[0] = (char *)&v22[1] + 5;
  LODWORD(v22[1]) = 40;
  int v23 = 0;
  int v20 = 0;
  uint64_t v19 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32))(a3, &v20, a5);
  icu::UnicodeString::UnicodeString(v21, 1, &v19);
  icu::CharString::appendInvariantChars((icu::CharString *)v22, (const icu::UnicodeString *)v21, (UErrorCode *)a5);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v21);
  if (*a5 > 0 || !v23)
  {
LABEL_13:
    if (BYTE4(v22[1])) {
      uprv_free(v22[0]);
    }
    goto LABEL_18;
  }
  uint64_t v11 = uprv_strdup(v22[0]);
  if (v11)
  {
    uint64_t v12 = v11;
    ulist_removeString(*(void *)(a1 + 8), v22[0]);
    ulist_addItemBeginList(*(void *)(a1 + 8), v12, 1, a5);
    *(unsigned char *)(a1 + 16) = 1;
    goto LABEL_13;
  }
  *a5 = 7;
  if (BYTE4(v22[1])) {
    uprv_free(v22[0]);
  }
}

void sub_18CA0CCE8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA54018;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18CA0CD40(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)off_1EDA4A0B0 & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)off_1EDA4A0B0 & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18CA0CDA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((unsigned char *)v4 + 12) = 0;
    uint64_t *v4 = (uint64_t)&unk_1EDA54018;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18CA0CE08(uint64_t a1, char *__dst, int a3)
{
  uint64_t result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18CA0CE44(void *a1, void *a2)
{
  BOOL result = sub_18C8D893C(a1, a2);
  if (result)
  {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

void ucol_prepareShortStringOpen(const char *a1, uint64_t a2, char *a3, UErrorCode *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return;
  }
  if (a3) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = &v21;
  }
  *(void *)unint64_t v6 = 0;
  *((_WORD *)v6 + 4) = 0;
  *((_WORD *)v6 + 20) = 0;
  bzero(v25, 0x670uLL);
  for (uint64_t i = 0; i != 384; i += 64)
  {
    unsigned int v8 = &v25[i];
    *(void *)unsigned int v8 = &v25[i + 13];
    *((_DWORD *)v8 + 2) = 40;
    *((_WORD *)v8 + 6) = 0;
    *((_DWORD *)v8 + 14) = 0;
  }
  uint64_t v9 = 0;
  uint64_t v26 = (char *)&v28 + 1;
  int v27 = 40;
  __int16 v28 = 0;
  int v29 = 0;
  char v35 = 0;
  long long v32 = 0u;
  memset(v33, 0, sizeof(v33));
  int v34 = 0;
  do
  {
    int v10 = &v25[v9];
    *((void *)v10 + 70) = &v36[v9];
    *((_DWORD *)v10 + 142) = 40;
    *((_WORD *)v10 + 286) = 0;
    *((_DWORD *)v10 + 154) = 0;
    v9 += 64;
  }
  while (v9 != 1088);
  *(void *)&long long v11 = -1;
  *((void *)&v11 + 1) = -1;
  long long v30 = v11;
  long long v31 = v11;
  sub_18CA0D1D0((uint64_t)v25, a1, (uint64_t)v6, a4);
  sub_18CA0D344((icu::CharString *)v25, a4);
  memset(&v24[1], 0, 56);
  v24[0] = (char *)&v24[1] + 5;
  LODWORD(v24[1]) = 40;
  v22[0] = 0;
  v22[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v22, (uint64_t)v24);
  ulocimp_canonicalize(v26);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v22);
  uint64_t v12 = ures_open("icudt74l-coll", (char *)v24[0], (int *)a4);
  uint64_t v13 = ures_getByKey(v12, "collations", 0, (int *)a4);
  memset(&v22[1], 0, 48);
  v22[0] = (char *)&v22[1] + 5;
  LODWORD(v22[1]) = 40;
  uint64_t v23 = 0;
  v20[0] = 0;
  v20[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v20, (uint64_t)v22);
  ulocimp_getKeywordValue((char *)v24[0], "collation", (uint64_t)v20, (int *)a4);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v20);
  if (!v23)
  {
    uint64_t v15 = ures_getByKeyWithFallback(v13, "default", 0, a4);
    if (*(int *)a4 >= 1)
    {
      *a4 = U_INTERNAL_PROGRAM_ERROR;
      goto LABEL_13;
    }
    uint64_t v18 = v15;
    LODWORD(v20[0]) = 0;
    String = (UChar *)ures_getString(v15, (int *)v20, (int *)a4);
    icu::CharString::appendInvariantChars((int *)v22, String, v20[0], a4);
    ures_close(v18);
  }
  uint64_t v14 = ures_getByKeyWithFallback(v13, (char *)v22[0], 0, a4);
  ures_close(v14);
  ures_close(v13);
  ures_close(v12);
LABEL_13:
  if (BYTE4(v22[1])) {
    uprv_free(v22[0]);
  }
  if (BYTE4(v24[1])) {
    uprv_free(v24[0]);
  }
  uint64_t v16 = 68;
  do
  {
    if (BYTE12(v33[v16])) {
      uprv_free(*(void **)&v33[v16]);
    }
    v16 -= 4;
  }
  while (v16 * 16);
  if ((_BYTE)v28) {
    uprv_free(v26);
  }
  uint64_t v17 = 48;
  do
  {
    if (BYTE4(v24[v17 + 1])) {
      uprv_free(v24[v17]);
    }
    v17 -= 8;
  }
  while (v17 * 8);
}

const char *sub_18CA0D1D0(uint64_t a1, const char *a2, uint64_t a3, UErrorCode *a4)
{
  int v4 = (int)a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  if (*(int *)a4 > 0)
  {
LABEL_14:
    *(_DWORD *)(a3 + 4) = v5 - v4;
  }
  else
  {
    int v8 = *(unsigned __int8 *)a2;
    uint64_t v5 = a2;
    while (v8)
    {
      uint64_t v9 = -560;
      int v10 = &dword_1EDA54098;
      while (v8 != *((unsigned __int8 *)v10 - 16))
      {
        v9 -= 64;
        v10 += 6;
        if (v9 == -1648)
        {
          *a4 = U_ILLEGAL_ARGUMENT_ERROR;
          goto LABEL_11;
        }
      }
      uint64_t v11 = (*((uint64_t (**)(uint64_t, void, const char *, UErrorCode *))v10 - 1))(a1, *v10, v5 + 1, a4);
      uint64_t v15 = (char *)&v17 + 1;
      int v16 = 40;
      __int16 v17 = 0;
      int v18 = 0;
      icu::CharString::append((icu::CharString *)&v15, v5, v11 - v5, a4);
      icu::CharString::copyFrom((const void **)(a1 - v9), (const void **)&v15, a4);
      if ((_BYTE)v17) {
        uprv_free(v15);
      }
      uint64_t v5 = (const char *)v11;
LABEL_11:
      --v5;
      do
      {
        int v12 = *(unsigned __int8 *)++v5;
        int v8 = v12;
      }
      while (v12 == 95);
      if (*(int *)a4 > 0) {
        goto LABEL_14;
      }
    }
  }
  return v5;
}

icu::CharString *sub_18CA0D344(icu::CharString *result, UErrorCode *a2)
{
  if (*((_DWORD *)result + 110)) {
    return result;
  }
  unsigned int v3 = result;
  int v4 = (icu::CharString *)((char *)result + 384);
  BOOL result = icu::CharString::append((icu::CharString *)((char *)result + 384), *(const char **)result, *((_DWORD *)result + 14), a2);
  if (*((_DWORD *)v3 + 30))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "_");
    icu::CharString::append(v4, v17, v18, a2);
    BOOL result = icu::CharString::append(v4, *((const char **)v3 + 8), *((_DWORD *)v3 + 30), a2);
  }
  if (*((_DWORD *)v3 + 46))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v15, "_");
    icu::CharString::append(v4, v15, v16, a2);
    uint64_t v5 = (char *)*((void *)v3 + 16);
    int v6 = *((_DWORD *)v3 + 46);
LABEL_8:
    BOOL result = icu::CharString::append(v4, v5, v6, a2);
    goto LABEL_9;
  }
  if (*((_DWORD *)v3 + 62))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v13, "_");
    uint64_t v5 = v13;
    int v6 = v14;
    goto LABEL_8;
  }
LABEL_9:
  if (*((_DWORD *)v3 + 62))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v11, "_");
    icu::CharString::append(v4, v11, v12, a2);
    BOOL result = icu::CharString::append(v4, *((const char **)v3 + 24), *((_DWORD *)v3 + 62), a2);
  }
  if (*((_DWORD *)v3 + 78))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v9, "@collation=");
    icu::CharString::append(v4, v9, v10, a2);
    BOOL result = icu::CharString::append(v4, *((const char **)v3 + 32), *((_DWORD *)v3 + 78), a2);
  }
  if (*((_DWORD *)v3 + 94))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v7, "@sp=");
    icu::CharString::append(v4, v7, v8, a2);
    return icu::CharString::append(v4, *((const char **)v3 + 40), *((_DWORD *)v3 + 94), a2);
  }
  return result;
}

icu::RuleBasedCollator *ucol_openFromShortString(const char *a1, int a2, char *a3, UErrorCode *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (a3) {
    int v8 = a3;
  }
  else {
    int v8 = &v23;
  }
  *(void *)int v8 = 0;
  *((_WORD *)v8 + 4) = 0;
  *((_WORD *)v8 + 20) = 0;
  bzero(v25, 0x670uLL);
  for (uint64_t i = 0; i != 384; i += 64)
  {
    int v10 = &v25[i];
    *(void *)int v10 = &v25[i + 13];
    *((_DWORD *)v10 + 2) = 40;
    *((_WORD *)v10 + 6) = 0;
    *((_DWORD *)v10 + 14) = 0;
  }
  uint64_t v11 = 0;
  uint64_t v26 = (char *)&v28 + 1;
  int v27 = 40;
  __int16 v28 = 0;
  int v29 = 0;
  char v36 = 0;
  long long v32 = 0u;
  memset(v33, 0, sizeof(v33));
  int v34 = 0;
  do
  {
    int v12 = &v25[v11];
    *((void *)v12 + 70) = &v37[v11];
    *((_DWORD *)v12 + 142) = 40;
    *((_WORD *)v12 + 286) = 0;
    *((_DWORD *)v12 + 154) = 0;
    v11 += 64;
  }
  while (v11 != 1088);
  *(void *)&long long v13 = -1;
  *((void *)&v13 + 1) = -1;
  long long v30 = v13;
  long long v31 = v13;
  unsigned int v14 = sub_18CA0D1D0((uint64_t)v25, a1, (uint64_t)v8, a4);
  sub_18CA0D344((icu::CharString *)v25, a4);
  memset(&v24[1], 0, 56);
  v24[0] = (char *)&v24[1] + 5;
  LODWORD(v24[1]) = 40;
  v22[0] = 0;
  v22[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v22, (uint64_t)v24);
  ulocimp_canonicalize(v26);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v22);
  int v4 = ucol_open(v24[0], (const icu::Locale *)a4);
  for (uint64_t j = 0; j != 8; ++j)
  {
    int v16 = &v25[4 * j];
    uint64_t v17 = *((unsigned int *)v16 + 112);
    if (v17 != -1)
    {
      if (a2
        || (int Attribute = ucol_getAttribute((uint64_t)v4, j, (int *)a4),
            uint64_t v17 = *((unsigned int *)v16 + 112),
            Attribute != v17))
      {
        ucol_setAttribute((uint64_t)v4, j, v17, (int *)a4);
      }
      if (*(int *)a4 >= 1)
      {
        *((_DWORD *)v8 + 1) = v14 - a1;
LABEL_23:
        ucol_close((uint64_t)v4);
        int v4 = 0;
        goto LABEL_24;
      }
    }
  }
  if (v36)
  {
    if (WORD2(v32)) {
      ucol_setVariableTop((uint64_t)v4, (uint64_t)&v32 + 4, v35, (int *)a4);
    }
    else {
      ucol_restoreVariableTop((uint64_t)v4, v32, (int *)a4);
    }
  }
  if (*(int *)a4 >= 1) {
    goto LABEL_23;
  }
LABEL_24:
  if (BYTE4(v24[1])) {
    uprv_free(v24[0]);
  }
  uint64_t v19 = 1088;
  do
  {
    if (v33[v19 + 12]) {
      uprv_free(*(void **)&v33[v19]);
    }
    v19 -= 64;
  }
  while (v19);
  if ((_BYTE)v28) {
    uprv_free(v26);
  }
  uint64_t v20 = 48;
  do
  {
    if (BYTE4(v24[v20 + 1])) {
      uprv_free(v24[v20]);
    }
    v20 -= 8;
  }
  while (v20 * 8);
  return v4;
}

uint64_t ucol_getShortDefinitionString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (*a5 > 0) {
    return 0;
  }
  if (!a1)
  {
    *a5 = 1;
    return 0;
  }
  return (*(uint64_t (**)(void))(*(void *)a1 + 288))();
}

uint64_t ucol_normalizeShortDefinitionString(const char *a1, char *a2, int a3, unsigned char *a4, UErrorCode *a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 > 0) {
    return 0;
  }
  if (a2) {
    bzero(a2, a3);
  }
  bzero(v32, 0x670uLL);
  for (uint64_t i = 0; i != 384; i += 64)
  {
    int v12 = &v32[i];
    *(void *)int v12 = &v32[i + 13];
    *((_DWORD *)v12 + 2) = 40;
    *((_WORD *)v12 + 6) = 0;
    *((_DWORD *)v12 + 14) = 0;
  }
  uint64_t v13 = 0;
  uint64_t v33 = (char *)&v35 + 1;
  int v34 = 40;
  __int16 v35 = 0;
  int v36 = 0;
  char v42 = 0;
  long long v39 = 0u;
  memset(v40, 0, sizeof(v40));
  int v41 = 0;
  do
  {
    unsigned int v14 = &v32[v13];
    *((void *)v14 + 70) = &v43[v13];
    *((_DWORD *)v14 + 142) = 40;
    *((_WORD *)v14 + 286) = 0;
    *((_DWORD *)v14 + 154) = 0;
    v13 += 64;
  }
  while (v13 != 1088);
  if (a4) {
    uint64_t v15 = a4;
  }
  else {
    uint64_t v15 = v31;
  }
  *(void *)&long long v16 = -1;
  *((void *)&v16 + 1) = -1;
  long long v37 = v16;
  long long v38 = v16;
  sub_18CA0D1D0((uint64_t)v32, a1, (uint64_t)v15, a5);
  if (*(int *)a5 <= 0)
  {
    uint64_t v20 = 0;
    uint64_t v5 = 0;
    do
    {
      char v21 = &v32[64 * v20];
      int v22 = *((_DWORD *)v21 + 154);
      if (v22)
      {
        if (v5)
        {
          if ((int)v5 < a3) {
            *(_WORD *)&a2[strlen(a2)] = 95;
          }
          int v23 = v5 + 1;
        }
        else
        {
          int v23 = 0;
        }
        int v24 = v21 + 560;
        unsigned int v25 = **((unsigned __int8 **)v21 + 70) - 75;
        BOOL v26 = v25 > 0xB;
        int v27 = (1 << v25) & 0x883;
        if (v26 || v27 == 0)
        {
          uint64_t v5 = icu::CharString::extract((char **)v21 + 70, &a2[v23], a3 - v23, a5) + v23;
        }
        else
        {
          if (v22 >= 1)
          {
            uint64_t v29 = 0;
            long long v30 = (int *)(v21 + 616);
            do
            {
              if (v23 + v29 < a3)
              {
                a2[v23 + v29] = uprv_toupper(*(char *)(*v24 + v29));
                int v22 = *v30;
              }
              ++v29;
            }
            while (v29 < v22);
          }
          uint64_t v5 = (v22 + v23);
        }
      }
      ++v20;
    }
    while (v20 != 17);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v17 = 68;
  do
  {
    if (BYTE12(v40[v17])) {
      uprv_free(*(void **)&v40[v17]);
    }
    v17 -= 4;
  }
  while (v17 * 16);
  if ((_BYTE)v35) {
    uprv_free(v33);
  }
  uint64_t v18 = 384;
  do
  {
    if (v31[v18 + 20]) {
      uprv_free(*(void **)&v31[v18 + 8]);
    }
    v18 -= 64;
  }
  while (v18);
  return v5;
}

uint64_t ucol_getContractions(void *a1, icu::UnicodeSet *a2, UErrorCode *a3)
{
  ucol_getContractionsAndExpansions(a1, a2, 0, 0, a3);

  return uset_getItemCount(a2);
}

void *ucol_getContractionsAndExpansions(void *result, icu::UnicodeSet *a2, icu::UnicodeSet *a3, char a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return result;
  }
  if (!result)
  {
    int v9 = 1;
LABEL_9:
    *a5 = v9;
    return result;
  }
  if (!result)
  {
    int v9 = 16;
    goto LABEL_9;
  }

  return icu::RuleBasedCollator::internalGetContractionsAndExpansions(result, a2, a3, a4, a5);
}

unsigned char *sub_18CA0DC24(uint64_t a1, unsigned int a2, unsigned char *a3, int *a4)
{
  uint64_t v4 = 0;
  while (byte_18CA97DD4[v4] != *a3)
  {
    v4 += 8;
    if (v4 == 96)
    {
      *a4 = 1;
      int v5 = -1;
      goto LABEL_6;
    }
  }
  int v5 = *(_DWORD *)&byte_18CA97DD4[v4 + 4];
LABEL_6:
  *(_DWORD *)(a1 + 4 * a2 + 448) = v5;
  int v8 = a3[1];
  int v6 = a3 + 1;
  int v7 = v8;
  BOOL v9 = v8 == 95 || v7 == 0;
  if (!v9 || *a4 >= 1) {
    *a4 = 1;
  }
  return v6;
}

char *sub_18CA0DC98(uint64_t a1, int a2, char *a3, int *a4)
{
  int v12 = a3;
  if (a2)
  {
    *(_DWORD *)(a1 + 480) = sub_18CA0DF14(&v12, a4);
    int v6 = *a4;
  }
  else
  {
    if (*a4 > 0)
    {
      *(_DWORD *)(a1 + 548) = 0;
      return v12;
    }
    unint64_t v7 = 0;
    do
    {
      if (!*v12 || *v12 == 95)
      {
        *(_DWORD *)(a1 + 548) = v7;
        goto LABEL_20;
      }
      __int16 v8 = sub_18CA0DF14(&v12, a4);
      int v9 = v7 + 1;
      *(_WORD *)(a1 + 484 + 2 * v7) = v8;
      int v6 = *a4;
    }
    while (*a4 <= 0 && v7++ < 0x1F);
    *(_DWORD *)(a1 + 548) = v9;
    if (v9 == 32 && *v12 && *v12 != 95)
    {
      *a4 = 15;
      return v12;
    }
  }
  if (v6 <= 0) {
LABEL_20:
  }
    *(unsigned char *)(a1 + 552) = 1;
  return v12;
}

unsigned char *sub_18CA0DD88(uint64_t a1, unsigned int a2, uint64_t a3, UErrorCode *a4)
{
  int v6 = (icu::CharString *)(a1 + ((unint64_t)a2 << 6));
  unint64_t v7 = (unsigned char *)(a3 + 1);
  do
  {
    __int16 v8 = v7;
    if (a2 <= 5 && ((1 << a2) & 0x31) != 0) {
      char v9 = uprv_asciitolower((char)*(v7 - 1));
    }
    else {
      char v9 = *(v7 - 1);
    }
    icu::CharString::append(v6, v9, a4);
    if (!*v8) {
      break;
    }
    if (*v8 == 95) {
      break;
    }
    unint64_t v7 = v8 + 1;
  }
  while (*(int *)a4 < 1);
  return v8;
}

const char *sub_18CA0DE2C(uint64_t a1, int a2, char *__s, UErrorCode *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v6 = __s + 1;
  unint64_t v7 = strchr(__s + 2, *__s);
  if (v7 && (__int16 v8 = v7, v7 - v6 < 256))
  {
    int v10 = (char *)&v12 + 1;
    int v11 = 40;
    __int16 v12 = 0;
    int v13 = 0;
    icu::CharString::append((icu::CharString *)&v10, v6, v7 - v6, a4);
    icu::CharString::copyFrom((const void **)(a1 + 384), (const void **)&v10, a4);
    if ((_BYTE)v12) {
      uprv_free(v10);
    }
    return v8 + 1;
  }
  else
  {
    *a4 = U_BUFFER_OVERFLOW_ERROR;
  }
  return v6;
}

uint64_t sub_18CA0DF14(char **a1, _DWORD *a2)
{
  char v2 = **a1;
  if (!v2)
  {
LABEL_16:
    unsigned __int16 v4 = 0;
LABEL_17:
    *a2 = 1;
    return v4;
  }
  uint64_t v3 = 0;
  unsigned __int16 v4 = 0;
  uint64_t v5 = (uint64_t)(*a1 + 1);
  do
  {
    uint64_t v6 = v3;
    __int16 v7 = v2;
    if ((v2 - 48) >= 0xAu)
    {
      if ((v2 - 97) >= 6)
      {
        if ((v2 - 65) > 5) {
          goto LABEL_16;
        }
        __int16 v8 = -55;
      }
      else
      {
        __int16 v8 = -87;
      }
    }
    else
    {
      __int16 v8 = -48;
    }
    unsigned __int16 v4 = (v8 + v7) | (16 * v4);
    *a1 = (char *)(v5 + v6);
    char v2 = *(unsigned char *)(v5 + v6);
    uint64_t v3 = v6 + 1;
    if (v2) {
      BOOL v9 = v6 >= 3;
    }
    else {
      BOOL v9 = 1;
    }
  }
  while (!v9);
  if (v6 <= 2) {
    goto LABEL_17;
  }
  return v4;
}

void sub_18CA0DFB8(uint64_t a1, int a2, int a3, int a4, int *a5)
{
  if (*a5 <= 0)
  {
    int v9 = *(_DWORD *)(a1 + 200);
    int v10 = *(_DWORD *)(a1 + 204);
    if (v9 < v10)
    {
      int v11 = *(char **)(a1 + 192);
LABEL_8:
      long long v16 = &v11[12 * v9];
      *(_DWORD *)long long v16 = a2;
      *((_DWORD *)v16 + 1) = a3;
      *((_DWORD *)v16 + 2) = a4;
      *(_DWORD *)(a1 + 200) = v9 + 1;
      return;
    }
    int v13 = (char *)uprv_malloc(12 * v10 + 96);
    if (v13)
    {
      int v11 = v13;
      uint64_t v14 = *(void **)(a1 + 192);
      uint64_t v15 = *(int *)(a1 + 204);
      memcpy(v13, v14, 12 * v15);
      if (v14 != (void *)a1)
      {
        uprv_free(v14);
        LODWORD(v15) = *(_DWORD *)(a1 + 204);
      }
      *(void *)(a1 + 192) = v11;
      *(_DWORD *)(a1 + 204) = v15 + 8;
      int v9 = *(_DWORD *)(a1 + 200);
      goto LABEL_8;
    }
    *a5 = 7;
  }
}

void sub_18CA0E09C(uint64_t a1, uint64_t a2, int a3, int a4, int *a5)
{
  if (*a5 <= 0)
  {
    int v9 = *(_DWORD *)(a1 + 264);
    int v10 = *(_DWORD *)(a1 + 268);
    if (v9 < v10)
    {
      int v11 = *(char **)(a1 + 256);
LABEL_8:
      long long v16 = &v11[16 * v9];
      *(void *)long long v16 = a2;
      *((_DWORD *)v16 + 2) = a3;
      *((_DWORD *)v16 + 3) = a4;
      *(_DWORD *)(a1 + 264) = v9 + 1;
      return;
    }
    int v13 = (char *)uprv_malloc(16 * (v10 + 8));
    if (v13)
    {
      int v11 = v13;
      uint64_t v14 = *(void **)(a1 + 256);
      uint64_t v15 = *(int *)(a1 + 268);
      memcpy(v13, v14, 16 * v15);
      if (v14 != (void *)a1)
      {
        uprv_free(v14);
        LODWORD(v15) = *(_DWORD *)(a1 + 268);
      }
      *(void *)(a1 + 256) = v11;
      *(_DWORD *)(a1 + 268) = v15 + 8;
      int v9 = *(_DWORD *)(a1 + 264);
      goto LABEL_8;
    }
    *a5 = 7;
  }
}

uint64_t sub_18CA0E174(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 272) = a2;
  return sub_18CA0E1C0(a1, *(void *)(a2 + 16));
}

void *sub_18CA0E180(void *a1, uint64_t a2)
{
  a1[32] = a1;
  a1[33] = 0x1000000000;
  a1[34] = a2;
  sub_18CA0E1C0((uint64_t)a1, *(void *)(a2 + 16));
  return a1;
}

uint64_t sub_18CA0E1C0(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  *(_DWORD *)(a1 + 280) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 192))(a2, 5, &v5);
  *(unsigned char *)(a1 + 284) = (*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 192))(a2, 1, &v5) == 20;
  *(unsigned char *)(a1 + 285) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a2 + 240))(a2, &v5);
  *(_DWORD *)(a1 + 288) = result;
  return result;
}

void *sub_18CA0E294(void *a1)
{
  char v2 = (void *)a1[32];
  if (v2 != a1) {
    uprv_free(v2);
  }
  return a1;
}

uint64_t sub_18CA0E2C8(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 280);
  if (v2 == 1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = a2;
  }
  uint64_t v4 = BYTE1(a2);
  if (!v2)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 280);
    uint64_t v3 = v4;
  }
  uint64_t v5 = HIWORD(a2);
  if (*(unsigned char *)(a1 + 284) && a2 >= 0x10000 && *(_DWORD *)(a1 + 288) > a2)
  {
    uint64_t v6 = 0;
    uint64_t v4 = 0;
    uint64_t v3 = 0;
    if (v2 <= 2) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = HIWORD(a2);
    }
    *(unsigned char *)(a1 + 285) = 1;
  }
  else
  {
    if (!v5 && *(unsigned char *)(a1 + 285)) {
      return 0;
    }
    BOOL v9 = v2 <= 2;
    uint64_t v7 = 0xFFFFLL;
    if (v9) {
      uint64_t v7 = 0;
    }
    *(unsigned char *)(a1 + 285) = 0;
    uint64_t v6 = v5 << 48;
  }
  return v6 | (v4 << 32) | (v3 << 16) | v7;
}

uint64_t ucol_tertiaryOrder(uint64_t result)
{
  return result;
}

uint64_t ucol_secondaryOrder(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t ucol_primaryOrder(unsigned int a1)
{
  return HIWORD(a1);
}

icu::CollationElementIterator *ucol_openElements(const void *a1, uint64_t a2, unsigned int a3, int *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*a4 > 0) {
    return 0;
  }
  if (!a1 || !a2 && a3)
  {
    CollationElementIterator = 0;
    int v8 = 1;
LABEL_7:
    *a4 = v8;
    return CollationElementIterator;
  }
  if (!v10)
  {
    CollationElementIterator = 0;
    int v8 = 16;
    goto LABEL_7;
  }
  int v11 = v10;
  memset(v14, 0, sizeof(v14));
  uint64_t v13 = a2;
  icu::UnicodeString::UnicodeString(v14, a3 >> 31, &v13);
  CollationElementIterator = icu::RuleBasedCollator::createCollationElementIterator(v11, (UChar **)v14);
  if (!CollationElementIterator)
  {
    uint64_t v12 = 7;
    *a4 = 7;
  }
  icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v14);
  return CollationElementIterator;
}

void ucol_closeElements(icu::CollationElementIterator *a1)
{
  if (a1)
  {
    icu::CollationElementIterator::~CollationElementIterator(a1);
    icu::UMemory::operator delete(v1);
  }
}

uint64_t ucol_next(icu::CollationElementIterator *a1, UErrorCode *a2)
{
  if (*(int *)a2 <= 0) {
    return icu::CollationElementIterator::next(a1, a2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ucol_nextProcessed(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  int v10 = v9;
  uint64_t v11 = 0x1000000000;
  uint64_t v12 = a1;
  sub_18CA0E1C0((uint64_t)v9, *(void *)(a1 + 16));
  uint64_t v7 = sub_18CA0E594((uint64_t)v9, a2, a3, a4);
  if (v10 != v9) {
    uprv_free(v10);
  }
  return v7;
}

uint64_t sub_18CA0E594(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 264) = 0;
  while (1)
  {
    int Offset = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
    unsigned int v10 = icu::CollationElementIterator::next(*(icu::CollationElementIterator **)(a1 + 272), a4);
    int v11 = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
    if (v10 == -1) {
      break;
    }
    uint64_t result = sub_18CA0E2C8(a1, v10);
    if (result)
    {
      if (!a2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
  if (a2) {
LABEL_7:
  }
    *a2 = Offset;
LABEL_8:
  if (a3) {
    *a3 = v11;
  }
  return result;
}

uint64_t ucol_previous(icu::CollationElementIterator *a1, UErrorCode *a2)
{
  if (*(int *)a2 <= 0) {
    return icu::CollationElementIterator::previous(a1, a2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ucol_previousProcessed(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  unsigned int v10 = v9;
  uint64_t v11 = 0x1000000000;
  uint64_t v12 = a1;
  sub_18CA0E1C0((uint64_t)v9, *(void *)(a1 + 16));
  uint64_t v7 = sub_18CA0E6F4((uint64_t)v9, a2, a3, a4);
  if (v10 != v9) {
    uprv_free(v10);
  }
  return v7;
}

uint64_t sub_18CA0E6F4(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    do
    {
      int v9 = *(_DWORD *)(a1 + 264);
      if (v9 > 0) {
        goto LABEL_28;
      }
      memset(v22, 0, sizeof(v22));
      int v23 = v22;
      uint64_t v24 = 0x1000000000;
      while (1)
      {
        int Offset = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
        unsigned int v11 = icu::CollationElementIterator::previous(*(icu::CollationElementIterator **)(a1 + 272), a4);
        int v12 = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
        if (v11 == -1) {
          break;
        }
        sub_18CA0DFB8((uint64_t)v22, v11, v12, Offset, (int *)a4);
        UErrorCode v13 = *a4;
        if (*(int *)a4 > 0) {
          goto LABEL_20;
        }
        if (v11 >= 0x10000 && (v11 & 0xC0) != 0xC0) {
          goto LABEL_9;
        }
      }
      if ((int)v24 > 0)
      {
        UErrorCode v13 = *a4;
        if (*(int *)a4 <= 0)
        {
LABEL_9:
          int v14 = v24;
          if ((int)v24 >= 1)
          {
            do
            {
              uint64_t v15 = v23;
              int v16 = v14 - 1;
              LODWORD(v24) = v14 - 1;
              uint64_t v17 = sub_18CA0E2C8(a1, v23[3 * (v14 - 1)]);
              if (v17) {
                sub_18CA0E09C(a1, v17, v15[3 * v16 + 1], v15[3 * v16 + 2], (int *)a4);
              }
              UErrorCode v13 = *a4;
              int v14 = v24;
            }
            while (*(int *)a4 <= 0 && (int)v24 > 0);
          }
        }
LABEL_20:
        int v19 = v13 > U_ZERO_ERROR;
        goto LABEL_21;
      }
      int v19 = 6;
LABEL_21:
      if (v23 != (_DWORD *)v22) {
        uprv_free(v23);
      }
    }
    while (!v19);
    if (v19 != 6) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    int v9 = *(_DWORD *)(a1 + 264);
    if (v9 > 0)
    {
LABEL_28:
      uint64_t v20 = *(void *)(a1 + 256);
      uint64_t v21 = (v9 - 1);
      *(_DWORD *)(a1 + 264) = v21;
      if (a2) {
        *a2 = *(_DWORD *)(v20 + 16 * v21 + 8);
      }
      if (a3) {
        *a3 = *(_DWORD *)(v20 + 16 * v21 + 12);
      }
      return *(void *)(v20 + 16 * v21);
    }
    if (a2) {
      *a2 = -1;
    }
    if (a3) {
      *a3 = -1;
    }
  }
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t *ucol_setText(uint64_t *result, uint64_t a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    uint64_t v5 = result;
    if (a2 || !a3)
    {
      memset(v8, 0, sizeof(v8));
      uint64_t v7 = a2;
      icu::UnicodeString::UnicodeString(v8, a3 >> 31, &v7);
      icu::CollationElementIterator::setText(v5, (UChar **)v8, a4);
      return (uint64_t *)icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
    }
    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return result;
}

unint64_t ucol_setOffset(unint64_t this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0) {
    return icu::CollationElementIterator::setOffset(this, a2, a3);
  }
  return this;
}

uint64_t **ucsdet_open(int *a1, unint64_t a2)
{
  int v2 = (uint64_t *)*a1;
  if ((int)v2 > 0) {
    return 0;
  }
  uint64_t result = (uint64_t **)icu::UMemory::operator new(v2, (icu::UMemory *)0x20, a2);
  if (result)
  {
    uint64_t result = sub_18C8FA9E0(result, a1, v5);
    if (*a1 >= 1)
    {
      uint64_t v6 = (void *)sub_18C8FAA7C((uint64_t)result);
      icu::UMemory::operator delete(v6);
      return 0;
    }
  }
  return result;
}

void ucsdet_close(uint64_t a1)
{
  if (a1)
  {
    int v1 = (void *)sub_18C8FAA7C(a1);
    icu::UMemory::operator delete(v1);
  }
}

uint64_t ucsdet_setText(uint64_t a1, char *a2, int a3, int *a4)
{
  if (*a4 <= 0) {
    return sub_18C8FAA80(a1, a2, a3);
  }
  return a1;
}

uint64_t ucsdet_getName(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return sub_18C8FB364(a1);
  }
  else {
    return 0;
  }
}

uint64_t ucsdet_getConfidence(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return sub_18C8FB374(a1);
  }
  else {
    return 0;
  }
}

uint64_t ucsdet_getLanguage(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return sub_18C8FB36C(a1);
  }
  else {
    return 0;
  }
}

uint64_t ucsdet_detect(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return sub_18C8FAAD8(a1, a2);
  }
  else {
    return 0;
  }
}

char **ucsdet_setDeclaredEncoding(char **a1, char *a2, int a3, int *a4)
{
  if (*a4 <= 0) {
    return (char **)sub_18C8FAAD0(a1, a2, a3);
  }
  return a1;
}

uint64_t ucsdet_detectAll(void *a1, _DWORD *a2, int *a3)
{
  if (*a3 <= 0) {
    return sub_18C8FAB2C(a1, a2, a3);
  }
  else {
    return 0;
  }
}

uint64_t ucsdet_isInputFilterEnabled(uint64_t a1)
{
  if (a1) {
    return sub_18C8FAAC8(a1);
  }
  return a1;
}

uint64_t ucsdet_enableInputFilter(uint64_t result, char a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_18C8FAAC8(result);
    sub_18C8FAAB0(v3, a2);
    return v4;
  }
  return result;
}

uint64_t ucsdet_getUChars(unsigned __int8 **a1, unint64_t a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0) {
    return sub_18C8FB37C(a1, a2, a3, a4);
  }
  else {
    return 0;
  }
}

void *ucsdet_getAllDetectableCharsets(uint64_t a1, int *a2)
{
  return sub_18C8FADD8(a2);
}

uint64_t udat_toCalendarDateField(unsigned int a1)
{
  if (a1 > 0x25) {
    return 24;
  }
  else {
    return dword_18CA97E50[a1];
  }
}

uint64_t udat_patternCharToDateFormatField(icu::DateFormatSymbols *a1)
{
  UChar v1 = (unsigned __int16)a1;
  PatternUChars = icu::DateFormatSymbols::getPatternUChars(a1);
  uint64_t v3 = u_strchr((const UChar *)PatternUChars, v1);
  if (v3) {
    return ((unint64_t)((char *)v3 - (char *)PatternUChars) >> 1);
  }
  else {
    return 38;
  }
}

void udat_registerOpener(void *a1, int *a2)
{
  if (*a2 <= 0)
  {
    umtx_lock(0);
    if (off_1E9192B68) {
      *a2 = 1;
    }
    else {
      off_1E9192B68 = a1;
    }
    umtx_unlock(0);
  }
}

void *udat_unregisterOpener(void *a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  int v2 = a1;
  umtx_lock(0);
  if (off_1E9192B68) {
    BOOL v4 = off_1E9192B68 == v2;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    off_1E9192B68 = 0;
  }
  else
  {
    int v2 = 0;
    *a2 = 1;
  }
  umtx_unlock(0);
  return v2;
}

icu::SimpleDateFormat *udat_open(icu::Locale *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, UErrorCode *a8)
{
  v30[28] = *(UChar **)MEMORY[0x1E4F143B8];
  if (*(int *)a8 > 0) {
    return 0;
  }
  int v11 = a7;
  int v13 = a5;
  int v16 = a2;
  uint64_t v17 = (uint64_t)a1;
  uint64_t v18 = (uint64_t *)off_1E9192B68;
  if (!off_1E9192B68
    || (a1 = (icu::Locale *)off_1E9192B68(a1, a2, a3, a4, a5, a6, a7, a8), (DateTimeuint64_t Instance = a1) == 0))
  {
    if (v17 == -2)
    {
      memset(v29, 0, sizeof(v29));
      uint64_t v28 = a6;
      icu::UnicodeString::UnicodeString(v29, v11 == -1, &v28);
      uint64_t v26 = v28;
      uint64_t v20 = (icu::SimpleDateFormat *)icu::UMemory::operator new(&v26, (icu::UMemory *)0x340, v19);
      DateTimeuint64_t Instance = v20;
      if (a3)
      {
        if (v20)
        {
          icu::Locale::Locale(v21, (icu::Locale *)v30, a3, 0, 0, 0);
          icu::SimpleDateFormat::SimpleDateFormat(DateTimeInstance, (const icu::UnicodeString *)v29, (const icu::Locale *)v30, a8);
          icu::Locale::~Locale((icu::Locale *)v30);
        }
      }
      else if (v20)
      {
        icu::SimpleDateFormat::SimpleDateFormat(v20, (const icu::UnicodeString *)v29, a8);
      }
      icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v29);
      if (DateTimeInstance) {
        goto LABEL_16;
      }
LABEL_22:
      *a8 = U_MEMORY_ALLOCATION_ERROR;
      return DateTimeInstance;
    }
    if (a3)
    {
      icu::Locale::Locale(v18, (icu::Locale *)v30, a3, 0, 0, 0);
      DateTimeuint64_t Instance = icu::DateFormat::createDateTimeInstance(v16, v17, (const icu::Locale *)v30);
      icu::Locale::~Locale((icu::Locale *)v30);
      if (!DateTimeInstance) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t Default = icu::Locale::getDefault(a1);
      DateTimeuint64_t Instance = icu::DateFormat::createDateTimeInstance(v16, v17, (const icu::Locale *)Default);
      if (!DateTimeInstance) {
        goto LABEL_22;
      }
    }
LABEL_16:
    if (*(int *)a8 < 1)
    {
      if (!a4) {
        return DateTimeInstance;
      }
      uint64_t v27 = a4;
      icu::UnicodeString::UnicodeString(v30, v13 == -1, &v27);
      uint64_t TimeZone = icu::TimeZone::createTimeZone(v30, v22);
      icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v30);
      if (TimeZone)
      {
        (*(void (**)(icu::SimpleDateFormat *, void *))(*(void *)DateTimeInstance + 184))(DateTimeInstance, TimeZone);
        return DateTimeInstance;
      }
      *a8 = U_MEMORY_ALLOCATION_ERROR;
    }
    (*(void (**)(icu::SimpleDateFormat *))(*(void *)DateTimeInstance + 8))(DateTimeInstance);
    return 0;
  }
  return DateTimeInstance;
}

uint64_t udat_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t udat_clone(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (!result) {
    *a2 = 7;
  }
  return result;
}

uint64_t udat_format(void *a1, char *a2, unsigned int a3, uint64_t a4, int *a5, double a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a2)
  {
    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if ((a3 & 0x80000000) != 0)
  {
LABEL_9:
    *a5 = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v23 = 0;
  long long v22 = 0u;
  unint64_t v19 = &unk_1EDA47700;
  LOWORD(v20) = 2;
  if (a2) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a2, 0, a3);
  }
  uint64_t v17 = &unk_1EDA4C7F0;
  long long v18 = 0xFFFFFFFFuLL;
  if (a4)
  {
    LODWORD(v18) = *(_DWORD *)a4;
    icu::DateFormat::format(a1, (uint64_t)&v19, (uint64_t)&v17, a6);
    *(void *)(a4 + 4) = *(void *)((char *)&v18 + 4);
  }
  else
  {
    icu::DateFormat::format(a1, (uint64_t)&v19, (uint64_t)&v17, a6);
  }
  int v16 = (UChar *)a2;
  uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a3, a5);
  uint64_t v15 = v16;
  icu::FieldPosition::~FieldPosition(&v15, (icu::FieldPosition *)&v17);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  return v12;
}

uint64_t udat_formatCalendar(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*a6 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a3)
  {
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  if ((a4 & 0x80000000) != 0)
  {
LABEL_12:
    *a6 = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v23 = 0;
  long long v22 = 0u;
  unint64_t v19 = &unk_1EDA47700;
  LOWORD(v20) = 2;
  if (a3) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a3, 0, a4);
  }
  uint64_t v17 = &unk_1EDA4C7F0;
  long long v18 = 0xFFFFFFFFuLL;
  if (a5) {
    LODWORD(v18) = *(_DWORD *)a5;
  }
  (*(void (**)(uint64_t, uint64_t, void **, void **))(*(void *)a1 + 64))(a1, a2, &v19, &v17);
  if (a5) {
    *(void *)(a5 + 4) = *(void *)((char *)&v18 + 4);
  }
  int v16 = (UChar *)a3;
  uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a4, a6);
  uint64_t v15 = v16;
  icu::FieldPosition::~FieldPosition(&v15, (icu::FieldPosition *)&v17);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v19);
  return v12;
}

uint64_t udat_formatForFields(void *a1, char *a2, unsigned int a3, uint64_t a4, UErrorCode *a5, double a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a2)
  {
    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  if ((a3 & 0x80000000) != 0)
  {
LABEL_8:
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v20 = 0;
  long long v19 = 0u;
  int v16 = &unk_1EDA47700;
  LOWORD(v17) = 2;
  if (a2) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a2, 0, a3);
  }
  icu::DateFormat::format(a1, (uint64_t)&v16, a4, a5, a6);
  uint64_t v15 = (UChar *)a2;
  uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v16, &v15, a3, (int *)a5);
  int v14 = v15;
  icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v16);
  return v12;
}

uint64_t udat_formatCalendarForFields(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*a6 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a3)
  {
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  if ((a4 & 0x80000000) != 0)
  {
LABEL_8:
    *a6 = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v20 = 0;
  long long v19 = 0u;
  int v16 = &unk_1EDA47700;
  LOWORD(v17) = 2;
  if (a3) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a3, 0, a4);
  }
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, int *))(*(void *)a1 + 72))(a1, a2, &v16, a5, a6);
  uint64_t v15 = (UChar *)a3;
  uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v16, &v15, a4, a6);
  int v14 = v15;
  icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v16);
  return v12;
}

double udat_parse(icu::DateFormat *a1, uint64_t a2, int a3, int *a4, int *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  double v5 = 0.0;
  if (*a5 <= 0)
  {
    memset(v16, 0, sizeof(v16));
    uint64_t v15 = a2;
    icu::UnicodeString::UnicodeString(v16, a3 == -1, &v15);
    uint64_t v12 = &unk_1EDA44670;
    int v14 = -1;
    if (a4) {
      int v9 = *a4;
    }
    else {
      int v9 = 0;
    }
    int v13 = v9;
    double v5 = icu::DateFormat::parse(a1, (const icu::UnicodeString *)v16, (icu::ParsePosition *)&v12);
    if (v14 == -1)
    {
      if (a4) {
        *a4 = v13;
      }
    }
    else
    {
      if (a4) {
        *a4 = v14;
      }
      *a5 = 9;
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v12);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  }
  return v5;
}

void udat_parseCalendar(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5, int *a6)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*a6 <= 0)
  {
    memset(v15, 0, sizeof(v15));
    uint64_t v14 = a3;
    icu::UnicodeString::UnicodeString(v15, a4 == -1, &v14);
    int v11 = &unk_1EDA44670;
    int v13 = -1;
    if (a5) {
      int v10 = *a5;
    }
    else {
      int v10 = 0;
    }
    int v12 = v10;
    (*(void (**)(uint64_t, _OWORD *, uint64_t, void **))(*(void *)a1 + 88))(a1, v15, a2, &v11);
    if (v13 == -1)
    {
      if (a5) {
        *a5 = v12;
      }
    }
    else
    {
      if (a5) {
        *a5 = v13;
      }
      *a6 = 9;
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v11);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v15);
  }
}

uint64_t udat_isLenient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t udat_setLenient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))();
}

uint64_t udat_getBooleanAttribute(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 224))();
  }
  else {
    return 0;
  }
}

uint64_t udat_setBooleanAttribute(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)result + 216))();
  }
  return result;
}

uint64_t udat_getCalendar(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t udat_setCalendar(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t udat_getNumberFormatForField(void *a1, UChar a2)
{
  int v6 = 0;
  sub_18CA0FA24(a1, &v6);
  if (v6 < 1)
  {
    return icu::SimpleDateFormat::getNumberFormatForField((uint64_t)a1, a2);
  }
  else
  {
    BOOL v4 = *(uint64_t (**)(void *))(*(void *)a1 + 152);
    return v4(a1);
  }
}

void *sub_18CA0FA24(void *result, int *a2)
{
  if (*a2 <= 0 {
    && (!result
  }
  {
    *a2 = 1;
  }
  return result;
}

uint64_t udat_getNumberFormat(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

void *udat_adoptNumberFormatForFields(void *a1, uint64_t a2, icu::NumberFormat *a3, int *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_18CA0FA24(a1, a4);
  if (a2)
  {
    if (*a4 <= 0)
    {
      memset(v10, 0, sizeof(v10));
      icu::UnicodeString::UnicodeString((uint64_t)v10, a2);
      icu::SimpleDateFormat::adoptNumberFormat((icu::SimpleDateFormat *)a1, (const icu::UnicodeString *)v10, a3, (UErrorCode *)a4);
      return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v10);
    }
  }
  return result;
}

uint64_t udat_setNumberFormat(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 168))();
}

uint64_t udat_adoptNumberFormat(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 160))();
}

double udat_get2DigitYearStart(double *a1, int *a2)
{
  sub_18CA0FA24(a1, a2);
  double result = 0.0;
  if (*a2 <= 0) {
    return a1[98];
  }
  return result;
}

void *udat_set2DigitYearStart(void *a1, int *a2, double a3)
{
  double result = sub_18CA0FA24(a1, a2);
  if (*a2 <= 0)
  {
    int v8 = *(uint64_t (**)(void *, int *, __n128))(*(void *)a1 + 232);
    v7.n128_f64[0] = a3;
    return (void *)v8(a1, a2, v7);
  }
  return result;
}

uint64_t udat_toPattern(void *lpsrc, int a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*a5 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else if (!a4)
    {
LABEL_4:
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v22 = 0;
      long long v21 = 0u;
      long long v18 = &unk_1EDA47700;
      LOWORD(v19) = 2;
      if (a3) {
        icu::UnicodeString::setTo((icu::UnicodeString *)&v18, a3, 0, a4);
      }
      if (lpsrc)
      {
        if (v10)
        {
          uint64_t v11 = *v10;
          if (a2) {
            (*(void (**)(void))(v11 + 248))();
          }
          else {
            (*(void (**)(void))(v11 + 240))();
          }
          goto LABEL_19;
        }
        if (!a2)
        {
          if (v15)
          {
            (*(void (**)(void *, void **, int *))(*(void *)v15 + 232))(v15, &v18, a5);
LABEL_19:
            uint64_t v17 = (UChar *)a3;
            uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v18, &v17, a4, a5);
            uint64_t v16 = v17;
            uint64_t v14 = (uint64_t)&v16;
            goto LABEL_20;
          }
        }
      }
      uint64_t v14 = 1;
      *a5 = 1;
      uint64_t v12 = 0xFFFFFFFFLL;
LABEL_20:
      icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v18);
      return v12;
    }
    *a5 = 1;
  }
  return 0xFFFFFFFFLL;
}

void *udat_applyPattern(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  memset(v11, 0, sizeof(v11));
  uint64_t v10 = a3;
  icu::UnicodeString::UnicodeString(v11, a4 == -1, &v10);
  unsigned int v9 = 0;
  sub_18CA0FA24(a1, (int *)&v9);
  int v6 = (void *)v9;
  if ((int)v9 <= 0)
  {
    uint64_t v7 = *a1;
    if (a2) {
      (*(void (**)(uint64_t *, _OWORD *, unsigned int *))(v7 + 264))(a1, v11, &v9);
    }
    else {
      (*(void (**)(uint64_t *, _OWORD *))(v7 + 256))(a1, v11);
    }
  }
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v11);
}

uint64_t udat_getSymbols(const void *a1, unsigned int a2, signed int a3, char *a4, unsigned int a5, int *a6)
{
  v50[9] = *(UChar **)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (v12)
  {
    int v13 = v12;
    uint64_t v14 = (icu::DateFormatSymbols *)(*(uint64_t (**)(char *))(*(void *)v12 + 272))(v12);
    uint64_t v15 = (uint64_t *)(v13 + 824);
    goto LABEL_6;
  }
  if (!v16) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v17 = v16;
  uint64_t v14 = (icu::DateFormatSymbols *)(*(uint64_t (**)(char *))(*(void *)v16 + 264))(v16);
  uint64_t v15 = (uint64_t *)(v17 + 752);
LABEL_6:
  uint64_t v18 = *v15;
  int v48 = 0;
  switch(a2)
  {
    case 0u:
      uint64_t Eras = icu::DateFormatSymbols::getEras(v14, &v48);
      break;
    case 1u:
      uint64_t Eras = icu::DateFormatSymbols::getMonths(v14, &v48);
      break;
    case 2u:
      uint64_t Eras = icu::DateFormatSymbols::getShortMonths(v14, &v48);
      break;
    case 3u:
      uint64_t Eras = icu::DateFormatSymbols::getWeekdays(v14, &v48);
      break;
    case 4u:
      uint64_t Eras = icu::DateFormatSymbols::getShortWeekdays(v14, &v48);
      break;
    case 5u:
      uint64_t Eras = icu::DateFormatSymbols::getAmPmStrings(v14, &v48);
      break;
    case 6u:
      memset((char *)v49 + 8, 0, 56);
      *(void *)&v49[0] = &unk_1EDA47700;
      WORD4(v49[0]) = 2;
      if (a4 || a5) {
        icu::UnicodeString::setTo((icu::UnicodeString *)v49, a4, 0, a5);
      }
      icu::DateFormatSymbols::getLocalPatternChars((UChar **)v14, (UChar **)v49);
      uint64_t v47 = (UChar *)a4;
      uint64_t v20 = icu::UnicodeString::extract((uint64_t)v49, &v47, a5, a6);
      uint64_t v44 = v47;
      long long v31 = &v44;
      long long v32 = (icu::UnicodeString *)v49;
      goto LABEL_73;
    case 7u:
      uint64_t Eras = icu::DateFormatSymbols::getEraNames(v14, &v48);
      break;
    case 8u:
      uint64_t v23 = v14;
      int v24 = 0;
      goto LABEL_34;
    case 9u:
      long long v21 = v14;
      int v22 = 0;
      goto LABEL_22;
    case 0xAu:
      uint64_t v23 = v14;
      int v24 = 1;
      int v25 = 1;
      goto LABEL_36;
    case 0xBu:
      uint64_t v23 = v14;
      int v24 = 1;
      int v25 = 0;
      goto LABEL_36;
    case 0xCu:
      uint64_t v23 = v14;
      int v24 = 1;
LABEL_34:
      int v25 = 2;
LABEL_36:
      uint64_t Eras = icu::DateFormatSymbols::getMonths(v23, &v48, v24, v25);
      break;
    case 0xDu:
      long long v21 = v14;
      int v22 = 1;
      int v26 = 1;
      goto LABEL_46;
    case 0xEu:
      long long v21 = v14;
      int v22 = 1;
      int v26 = 0;
      goto LABEL_46;
    case 0xFu:
      long long v21 = v14;
      int v22 = 1;
LABEL_22:
      int v26 = 2;
      goto LABEL_46;
    case 0x10u:
      uint64_t v27 = v14;
      int v28 = 0;
      goto LABEL_40;
    case 0x11u:
      uint64_t v27 = v14;
      int v28 = 0;
      goto LABEL_42;
    case 0x12u:
      uint64_t v27 = v14;
      int v28 = 1;
LABEL_40:
      int v33 = 1;
      goto LABEL_55;
    case 0x13u:
      uint64_t v27 = v14;
      int v28 = 1;
LABEL_42:
      int v33 = 0;
      goto LABEL_55;
    case 0x14u:
      long long v21 = v14;
      int v22 = 0;
      goto LABEL_45;
    case 0x15u:
      long long v21 = v14;
      int v22 = 1;
LABEL_45:
      int v26 = 3;
LABEL_46:
      uint64_t Eras = icu::DateFormatSymbols::getWeekdays(v21, &v48, v22, v26);
      break;
    case 0x16u:
      uint64_t v29 = (uint64_t)v14;
      goto LABEL_49;
    case 0x17u:
      uint64_t v29 = (uint64_t)v14;
      goto LABEL_49;
    case 0x18u:
      uint64_t v29 = (uint64_t)v14;
LABEL_49:
      uint64_t Eras = icu::DateFormatSymbols::getYearNames(v29, &v48);
      break;
    case 0x19u:
      uint64_t v30 = (uint64_t)v14;
      goto LABEL_51;
    case 0x1Au:
      uint64_t v30 = (uint64_t)v14;
      goto LABEL_51;
    case 0x1Bu:
      uint64_t v30 = (uint64_t)v14;
LABEL_51:
      uint64_t Eras = icu::DateFormatSymbols::getZodiacNames(v30, &v48);
      break;
    case 0x1Cu:
      uint64_t v27 = v14;
      int v28 = 0;
      goto LABEL_54;
    case 0x1Du:
      uint64_t v27 = v14;
      int v28 = 1;
LABEL_54:
      int v33 = 2;
LABEL_55:
      uint64_t Eras = icu::DateFormatSymbols::getQuarters(v27, &v48, v28, v33);
      break;
    default:
      if (a2 == 128)
      {
        uint64_t Eras = icu::DateFormatSymbols::getZodiacNames((uint64_t)v14, &v48);
        if (a3 < 1) {
          a3 = 0;
        }
        else {
          a3 = (a3 - 1) % 0xCu;
        }
      }
      else
      {
        uint64_t Eras = 0;
      }
      break;
  }
  if (a3 >= v48) {
    return 0;
  }
  int v34 = (uint64_t *)a3;
  __int16 v35 = (icu::UnicodeString *)(Eras + ((uint64_t)a3 << 6));
  UChar32 v36 = icu::UnicodeString::char32At(v34, v35, 0);
  if (!u_islower(v36) || !v18) {
    goto LABEL_70;
  }
  int v37 = (*(uint64_t (**)(const void *, uint64_t, int *))(*(void *)a1 + 208))(a1, 1, a6);
  switch(v37)
  {
    case 258:
      goto LABEL_66;
    case 260:
      long long v38 = (char *)v14 + 2 * sub_18CA1070C(a2) + 833;
      break;
    case 259:
      long long v38 = (char *)v14 + 2 * sub_18CA1070C(a2) + 832;
      break;
    default:
LABEL_70:
      int32_t v45 = (UChar *)a4;
      return icu::UnicodeString::extract((uint64_t)v35, &v45, a5, a6);
  }
  if (!*v38) {
    goto LABEL_70;
  }
LABEL_66:
  memset(v50, 0, 64);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v50, (UChar **)v35);
  long long v39 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 32))(v18);
  if (!v39)
  {
LABEL_69:
    icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v50);
    goto LABEL_70;
  }
  int v41 = (icu::BreakIterator *)v39;
  memset(v49, 0, sizeof(v49));
  icu::BreakIterator::getLocale(v39, 0, a6, (icu::Locale *)v49);
  if (*a6 >= 1)
  {
    (*(void (**)(icu::BreakIterator *))(*(void *)v41 + 8))(v41);
    ((void (*)(icu::Locale *__hidden))icu::Locale::~Locale)((icu::Locale *)v49);
    goto LABEL_69;
  }
  icu::UnicodeString::toTitle(v50, v41, (const icu::Locale *)v49, 768);
  (*(void (**)(icu::BreakIterator *))(*(void *)v41 + 8))(v41);
  uint64_t v46 = (UChar *)a4;
  uint64_t v20 = icu::UnicodeString::extract((uint64_t)v50, &v46, a5, a6);
  long long v43 = v46;
  icu::Locale::~Locale(&v43, (icu::Locale *)v49);
  long long v32 = (icu::UnicodeString *)v50;
LABEL_73:
  icu::UnicodeString::~UnicodeString(v31, v32);
  return v20;
}

uint64_t sub_18CA1070C(unsigned int a1)
{
  if (a1 > 0x15) {
    return 0;
  }
  else {
    return dword_18CA97EE8[a1];
  }
}

void *udat_countSymbols(void *result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (v4)
    {
      double v5 = (icu::DateFormatSymbols *)(*(uint64_t (**)(void *))(*(void *)v4 + 272))(v4);
    }
    else
    {
      if (!result) {
        return result;
      }
      double v5 = (icu::DateFormatSymbols *)(*(uint64_t (**)(void *))(*(void *)result + 264))(result);
    }
    int v12 = 0;
    switch(a2)
    {
      case 0:
        icu::DateFormatSymbols::getEras(v5, &v12);
        return (void *)v12;
      case 1:
        icu::DateFormatSymbols::getMonths(v5, &v12);
        return (void *)v12;
      case 2:
        icu::DateFormatSymbols::getShortMonths(v5, &v12);
        return (void *)v12;
      case 3:
        icu::DateFormatSymbols::getWeekdays(v5, &v12);
        return (void *)v12;
      case 4:
        icu::DateFormatSymbols::getShortWeekdays(v5, &v12);
        return (void *)v12;
      case 5:
        icu::DateFormatSymbols::getAmPmStrings(v5, &v12);
        return (void *)v12;
      case 6:
        int v12 = 1;
        return (void *)v12;
      case 7:
        icu::DateFormatSymbols::getEraNames(v5, &v12);
        return (void *)v12;
      case 8:
        int v6 = 0;
        goto LABEL_22;
      case 9:
        int v7 = 0;
        goto LABEL_27;
      case 10:
        int v6 = 1;
        int v8 = 1;
        goto LABEL_23;
      case 11:
        int v6 = 1;
        int v8 = 0;
        goto LABEL_23;
      case 12:
        int v6 = 1;
LABEL_22:
        int v8 = 2;
LABEL_23:
        icu::DateFormatSymbols::getMonths(v5, &v12, v6, v8);
        return (void *)v12;
      case 13:
        int v7 = 1;
        int v9 = 1;
        goto LABEL_37;
      case 14:
        int v7 = 1;
        int v9 = 0;
        goto LABEL_37;
      case 15:
        int v7 = 1;
LABEL_27:
        int v9 = 2;
        goto LABEL_37;
      case 16:
        int v10 = 0;
        goto LABEL_31;
      case 17:
        int v10 = 0;
        goto LABEL_33;
      case 18:
        int v10 = 1;
LABEL_31:
        int v11 = 1;
        goto LABEL_43;
      case 19:
        int v10 = 1;
LABEL_33:
        int v11 = 0;
        goto LABEL_43;
      case 20:
        int v7 = 0;
        goto LABEL_36;
      case 21:
        int v7 = 1;
LABEL_36:
        int v9 = 3;
LABEL_37:
        icu::DateFormatSymbols::getWeekdays(v5, &v12, v7, v9);
        return (void *)v12;
      case 22:
      case 23:
      case 24:
        icu::DateFormatSymbols::getYearNames((uint64_t)v5, &v12);
        return (void *)v12;
      case 25:
      case 26:
      case 27:
        goto LABEL_39;
      case 28:
        int v10 = 0;
        goto LABEL_42;
      case 29:
        int v10 = 1;
LABEL_42:
        int v11 = 2;
LABEL_43:
        icu::DateFormatSymbols::getQuarters(v5, &v12, v10, v11);
        break;
      default:
        if (a2 == 128) {
LABEL_39:
        }
          icu::DateFormatSymbols::getZodiacNames((uint64_t)v5, &v12);
        break;
    }
    return (void *)v12;
  }
  return result;
}

uint64_t udat_setSymbols(void *a1, int a2, int a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t result = (uint64_t)sub_18CA0FA24(a1, a6);
  if (*a6 <= 0)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*(void *)a1 + 272))(a1);
    switch(a2)
    {
      case 0:
        uint64_t v13 = *(void *)(result + 8);
        int v14 = *(_DWORD *)(result + 16);
        goto LABEL_31;
      case 1:
        uint64_t v13 = *(void *)(result + 56);
        int v14 = *(_DWORD *)(result + 64);
        goto LABEL_31;
      case 2:
        uint64_t v13 = *(void *)(result + 72);
        int v14 = *(_DWORD *)(result + 80);
        goto LABEL_31;
      case 3:
        uint64_t v13 = *(void *)(result + 152);
        int v14 = *(_DWORD *)(result + 160);
        goto LABEL_31;
      case 4:
        uint64_t v13 = *(void *)(result + 168);
        int v14 = *(_DWORD *)(result + 176);
        goto LABEL_31;
      case 5:
        uint64_t v13 = *(void *)(result + 280);
        int v14 = *(_DWORD *)(result + 288);
        goto LABEL_31;
      case 6:
        uint64_t v15 = result + 768;
        int v14 = 1;
        int v16 = 0;
        goto LABEL_32;
      case 7:
        uint64_t v13 = *(void *)(result + 24);
        int v14 = *(_DWORD *)(result + 32);
        goto LABEL_31;
      case 8:
        uint64_t v13 = *(void *)(result + 88);
        int v14 = *(_DWORD *)(result + 96);
        goto LABEL_31;
      case 9:
        uint64_t v13 = *(void *)(result + 200);
        int v14 = *(_DWORD *)(result + 208);
        goto LABEL_31;
      case 10:
        uint64_t v13 = *(void *)(result + 104);
        int v14 = *(_DWORD *)(result + 112);
        goto LABEL_31;
      case 11:
        uint64_t v13 = *(void *)(result + 120);
        int v14 = *(_DWORD *)(result + 128);
        goto LABEL_31;
      case 12:
        uint64_t v13 = *(void *)(result + 136);
        int v14 = *(_DWORD *)(result + 144);
        goto LABEL_31;
      case 13:
        uint64_t v13 = *(void *)(result + 216);
        int v14 = *(_DWORD *)(result + 224);
        goto LABEL_31;
      case 14:
        uint64_t v13 = *(void *)(result + 232);
        int v14 = *(_DWORD *)(result + 240);
        goto LABEL_31;
      case 15:
        uint64_t v13 = *(void *)(result + 264);
        int v14 = *(_DWORD *)(result + 272);
        goto LABEL_31;
      case 16:
        uint64_t v13 = *(void *)(result + 376);
        int v14 = *(_DWORD *)(result + 384);
        goto LABEL_31;
      case 17:
        uint64_t v13 = *(void *)(result + 392);
        int v14 = *(_DWORD *)(result + 400);
        goto LABEL_31;
      case 18:
        uint64_t v13 = *(void *)(result + 424);
        int v14 = *(_DWORD *)(result + 432);
        goto LABEL_31;
      case 19:
        uint64_t v13 = *(void *)(result + 440);
        int v14 = *(_DWORD *)(result + 448);
        goto LABEL_31;
      case 20:
        uint64_t v13 = *(void *)(result + 184);
        int v14 = *(_DWORD *)(result + 192);
        goto LABEL_31;
      case 21:
        uint64_t v13 = *(void *)(result + 248);
        int v14 = *(_DWORD *)(result + 256);
        goto LABEL_31;
      case 23:
        uint64_t v13 = *(void *)(result + 488);
        int v14 = *(_DWORD *)(result + 496);
        goto LABEL_31;
      case 26:
        uint64_t v13 = *(void *)(result + 504);
        int v14 = *(_DWORD *)(result + 512);
        goto LABEL_31;
      case 28:
        uint64_t v13 = *(void *)(result + 408);
        int v14 = *(_DWORD *)(result + 416);
        goto LABEL_31;
      case 29:
        uint64_t v13 = *(void *)(result + 456);
        int v14 = *(_DWORD *)(result + 464);
LABEL_31:
        uint64_t v15 = v13;
        int v16 = a3;
LABEL_32:
        uint64_t result = sub_18CA1123C(v15, v14, v16, a4, a5, a6);
        break;
      default:
        *a6 = 16;
        break;
    }
  }
  return result;
}

uint64_t udat_getLocaleByType(uint64_t a1, int a2, int *a3)
{
  if (a1) {
    return icu::Format::getLocaleID(a1, a2, a3);
  }
  if (*a3 <= 0) {
    *a3 = 1;
  }
  return 0;
}

uint64_t udat_setContext(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)result + 200))();
  }
  return result;
}

uint64_t udat_getContext(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 208))();
  }
  else {
    return 0;
  }
}

uint64_t udat_toPatternRelativeDate(void *a1, char *a2, unsigned int a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  sub_18CA10F20(a1, a4);
  if (*a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a2)
  {
    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  if ((a3 & 0x80000000) != 0)
  {
LABEL_8:
    *a4 = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v16 = 0;
  long long v15 = 0u;
  int v12 = &unk_1EDA47700;
  LOWORD(v13) = 2;
  if (a2) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2, 0, a3);
  }
  (*(void (**)(void *, void **, int *))(*(void *)a1 + 240))(a1, &v12, a4);
  int v11 = (UChar *)a2;
  uint64_t v8 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a3, a4);
  int v10 = v11;
  icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
  return v8;
}

void *sub_18CA10F20(void *result, int *a2)
{
  if (*a2 <= 0 {
    && (!result
  }
  {
    *a2 = 1;
  }
  return result;
}

uint64_t udat_toPatternRelativeTime(void *a1, char *a2, unsigned int a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  sub_18CA10F20(a1, a4);
  if (*a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a2)
  {
    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  if ((a3 & 0x80000000) != 0)
  {
LABEL_8:
    *a4 = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v16 = 0;
  long long v15 = 0u;
  int v12 = &unk_1EDA47700;
  LOWORD(v13) = 2;
  if (a2) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2, 0, a3);
  }
  (*(void (**)(void *, void **, int *))(*(void *)a1 + 248))(a1, &v12, a4);
  int v11 = (UChar *)a2;
  uint64_t v8 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a3, a4);
  int v10 = v11;
  icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
  return v8;
}

void *udat_applyPatternRelative(void *a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_18CA10F20(a1, a6);
  if (*a6 <= 0)
  {
    memset(v18, 0, sizeof(v18));
    uint64_t v16 = a2;
    icu::UnicodeString::UnicodeString(v18, a3 == -1, &v16);
    memset(v17, 0, sizeof(v17));
    uint64_t v15 = a4;
    icu::UnicodeString::UnicodeString(v17, a5 == -1, &v15);
    (*(void (**)(void *, _OWORD *, _OWORD *, int *))(*(void *)a1 + 256))(a1, v18, v17, a6);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v17);
    return icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v18);
  }
  return result;
}

uint64_t sub_18CA1123C(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (!result) {
    return result;
  }
  if (a3 >= a2)
  {
    int v10 = 8;
LABEL_8:
    *a6 = v10;
    return result;
  }
  if (!a4)
  {
    int v10 = 1;
    goto LABEL_8;
  }
  uint64_t v8 = result + ((uint64_t)a3 << 6);
  icu::UnicodeString::unBogus(v8);
  if (*(__int16 *)(v8 + 8) < 0) {
    uint64_t v9 = *(unsigned int *)(v8 + 12);
  }
  else {
    uint64_t v9 = *(unsigned __int16 *)(v8 + 8) >> 5;
  }

  return icu::UnicodeString::doReplace(v8, 0, v9, a4, 0, a5);
}

uint64_t udtitvfmt_openResult(int *a1, unint64_t a2)
{
  if (*a1 > 0) {
    return 0;
  }
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x30, a2);
  if (result)
  {
    *(_DWORD *)uint64_t result = 1430672896;
    *(_DWORD *)(result + 16) = 1178880342;
    *(void *)(result + 24) = &unk_1EDA4BCB0;
    *(void *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 27;
    *(void *)(result + 8) = result + 24;
  }
  else
  {
    *a1 = 7;
  }
  return result;
}

uint64_t udtitvfmt_resultAsValue(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1178880342) {
      goto LABEL_8;
    }
    int v2 = 3;
  }
  else
  {
    int v2 = 1;
  }
  uint64_t result = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0;
  }
  return result;
}

void udtitvfmt_closeResult(_DWORD *a1)
{
  if (a1 && a1[4] == 1178880342)
  {
    icu::FormattedDateInterval::~FormattedDateInterval((icu::FormattedDateInterval *)(a1 + 6));
    a1[4] = 0;
    *a1 = 0;
    icu::UMemory::operator delete(a1);
  }
}

icu::DateIntervalFormat *udtitvfmt_open(const char *a1, uint64_t a2, int a3, uint64_t a4, int a5, UErrorCode *a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 <= 0)
  {
    if (a2)
    {
      if (a3 < -1) {
        goto LABEL_13;
      }
    }
    else if (a3)
    {
      goto LABEL_13;
    }
    if (a4)
    {
      if (a5 > -2) {
        goto LABEL_9;
      }
    }
    else if (!a5)
    {
LABEL_9:
      memset(v22, 0, sizeof(v22));
      uint64_t v20 = a2;
      icu::UnicodeString::UnicodeString(v22, a3 == -1, &v20);
      uint64_t v18 = v20;
      icu::Locale::Locale(&v18, (icu::Locale *)v21, a1, 0, 0, 0);
      uint64_t Instance = icu::DateIntervalFormat::createInstance((UErrorCode *)v22, (const icu::UnicodeString *)v21, a6, v11);
      icu::Locale::~Locale(v12, (icu::Locale *)v21);
      uint64_t v13 = *(unsigned int *)a6;
      if ((int)v13 <= 0)
      {
        if (!a4) {
          goto LABEL_17;
        }
        uint64_t v19 = a4;
        icu::UnicodeString::UnicodeString(v21, a5 == -1, &v19);
        uint64_t TimeZone = icu::TimeZone::createTimeZone(v21, v14);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v21);
        if (TimeZone)
        {
          (*(void (**)(icu::DateIntervalFormat *, void *))(*(void *)Instance + 72))(Instance, TimeZone);
          goto LABEL_17;
        }
        uint64_t v13 = 7;
        *a6 = U_MEMORY_ALLOCATION_ERROR;
        if (!Instance) {
          goto LABEL_17;
        }
      }
      else if (!Instance)
      {
LABEL_17:
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v22);
        return Instance;
      }
      (*(void (**)(icu::DateIntervalFormat *))(*(void *)Instance + 8))(Instance);
      uint64_t Instance = 0;
      goto LABEL_17;
    }
LABEL_13:
    uint64_t Instance = 0;
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    return Instance;
  }
  return 0;
}

uint64_t udtitvfmt_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t udtitvfmt_format(icu::DateIntervalFormat *a1, char *a2, unsigned int a3, uint64_t a4, UErrorCode *a5, double a6, double a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a2)
  {
    if (!a3) {
      goto LABEL_5;
    }
LABEL_12:
    uint64_t v7 = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v7;
  }
  if ((a3 & 0x80000000) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v26 = 0;
  long long v25 = 0u;
  int v22 = &unk_1EDA47700;
  LOWORD(v23) = 2;
  if (a2) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v22, a2, 0, a3);
  }
  uint64_t v20 = &unk_1EDA4C7F0;
  long long v21 = 0xFFFFFFFFuLL;
  if (a4) {
    LODWORD(v21) = *(_DWORD *)a4;
  }
  memset(v19, 0, sizeof(v19));
  icu::DateInterval::DateInterval((uint64_t)v19, a6, a7);
  icu::DateIntervalFormat::format(a1, (const icu::DateInterval *)v19, (icu::UnicodeString *)&v22, (icu::FieldPosition *)&v20, a5);
  if (*(int *)a5 <= 0)
  {
    if (a4) {
      *(void *)(a4 + 4) = *(void *)((char *)&v21 + 4);
    }
    uint64_t v18 = (UChar *)a2;
    uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v22, &v18, a3, (int *)a5);
  }
  else
  {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  icu::DateInterval::~DateInterval((icu::DateInterval *)v19);
  icu::FieldPosition::~FieldPosition(v15, (icu::FieldPosition *)&v20);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v22);
  return v7;
}

uint64_t udtitvfmt_setAttribute(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)result + 104))();
  }
  return result;
}

void udtitvfmt_formatToResult(uint64_t *a1, uint64_t a2, UErrorCode *a3, double a4, double a5)
{
  if (*(int *)a3 > 0) {
    return;
  }
  uint64_t v6 = a2;
  if (!a2)
  {
    int v8 = 1;
    goto LABEL_6;
  }
  if (*(_DWORD *)(a2 + 16) != 1178880342)
  {
    int v8 = 3;
LABEL_6:
    uint64_t v6 = 0;
    *a3 = v8;
  }
  memset(v10, 0, sizeof(v10));
  icu::DateInterval::DateInterval((uint64_t)v10, a4, a5);
  if (v6)
  {
    icu::DateIntervalFormat::formatToValue(a1, (const icu::DateInterval *)v10, a3, (uint64_t)v9);
    icu::FormattedDateInterval::operator=(v6 + 24, (uint64_t)v9);
    icu::FormattedDateInterval::~FormattedDateInterval((icu::FormattedDateInterval *)v9);
  }
  icu::DateInterval::~DateInterval((icu::DateInterval *)v10);
}

void udtitvfmt_formatCalendarToResult(uint64_t *a1, icu::Calendar *a2, icu::Calendar *a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (a4)
    {
      if (*(_DWORD *)(a4 + 16) == 1178880342)
      {
        icu::DateIntervalFormat::formatToValue(a1, a2, a3, a5, (uint64_t)v7);
        icu::FormattedDateInterval::operator=(a4 + 24, (uint64_t)v7);
        icu::FormattedDateInterval::~FormattedDateInterval((icu::FormattedDateInterval *)v7);
        return;
      }
      UErrorCode v6 = U_INVALID_FORMAT_ERROR;
    }
    else
    {
      UErrorCode v6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *a5 = v6;
  }
}

uint64_t udtitvfmt_setContext(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)result + 88))();
  }
  return result;
}

uint64_t udtitvfmt_getContext(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
  }
  else {
    return 0;
  }
}

void *udtitvfmt_getPatternString(icu::DateIntervalFormat *a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v21 = 0;
  long long v20 = 0u;
  uint64_t v17 = (UChar *)&unk_1EDA47700;
  LOWORD(v18) = 2;
  uint64_t DateIntervalInfo = icu::DateIntervalFormat::getDateIntervalInfo(a1);
  icu::UnicodeString::UnicodeString((uint64_t)v16, a2);
  icu::DateIntervalInfo::getIntervalPattern(DateIntervalInfo, (uint64_t)v16, a3, &v17, a6);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v16);
  uint64_t v15 = a4;
  icu::UnicodeString::extract((uint64_t)&v17, &v15, a5, a6);
  long long v14 = v15;
  return icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v17);
}

icu::DateIntervalFormat *udatintv_open(const char *a1, uint64_t a2, int a3, UErrorCode *a4)
{
  return udtitvfmt_open(a1, a2, a3, 0, 0, a4);
}

icu::DateTimePatternGenerator *udatpg_open(char *a1, UErrorCode *this)
{
  uint64_t v3 = (uint64_t *)*MEMORY[0x1E4F143B8];
  v7[28] = *(const char **)MEMORY[0x1E4F143B8];
  if (a1)
  {
    icu::Locale::Locale(v3, (icu::Locale *)v7, a1, 0, 0, 0);
    uint64_t Instance = icu::DateTimePatternGenerator::createInstance(v7, this, 0);
    icu::Locale::~Locale(v5, (icu::Locale *)v7);
    return Instance;
  }
  else
  {
    return icu::DateTimePatternGenerator::createInstance((icu::DateTimePatternGenerator *)this, this);
  }
}

uint64_t udatpg_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

icu::DateTimePatternGenerator *udatpg_clone(icu::DateTimePatternGenerator *a1, unsigned int *a2)
{
  int v2 = (uint64_t *)*a2;
  if ((int)v2 <= 0) {
    return icu::DateTimePatternGenerator::clone(a1, (unint64_t)a2, v2);
  }
  else {
    return 0;
  }
}

uint64_t udatpg_getBestPattern(void *a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  return udatpg_getBestPatternWithOptions(a1, a2, a3, 0, a4, a5, a6);
}

uint64_t udatpg_getBestPatternWithOptions(void *a1, uint64_t a2, unsigned int a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*a7 > 0) {
    return 0;
  }
  if (a2 || !a3)
  {
    memset(v19, 0, sizeof(v19));
    uint64_t v17 = a2;
    icu::UnicodeString::UnicodeString(v19, a3 >> 31, &v17);
    v15[1] = v17;
    memset(v18, 0, sizeof(v18));
    icu::DateTimePatternGenerator::getBestPattern(a1, (uint64_t)v19, a4, a7, (icu::UnicodeString *)v18);
    uint64_t v16 = a5;
    uint64_t v7 = icu::UnicodeString::extract((uint64_t)v18, &v16, a6, a7);
    v15[0] = v16;
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v18);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v19);
  }
  else
  {
    uint64_t v7 = 0;
    *a7 = 1;
  }
  return v7;
}

uint64_t udatpg_getSkeleton(uint64_t a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*a6 > 0) {
    return 0;
  }
  if (a2 || !a3)
  {
    memset(v16, 0, sizeof(v16));
    uint64_t v14 = a2;
    icu::UnicodeString::UnicodeString(v16, a3 >> 31, &v14);
    v12[1] = v14;
    memset(v15, 0, sizeof(v15));
    icu::DateTimePatternGenerator::staticGetSkeleton((icu::DateTimePatternGenerator *)v16, (uint64_t)v15);
    uint64_t v13 = a4;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)v15, &v13, a5, a6);
    v12[0] = v13;
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  }
  else
  {
    uint64_t v6 = 0;
    *a6 = 1;
  }
  return v6;
}

uint64_t udatpg_getBaseSkeleton(uint64_t a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*a6 > 0) {
    return 0;
  }
  if (a2 || !a3)
  {
    memset(v16, 0, sizeof(v16));
    uint64_t v14 = a2;
    icu::UnicodeString::UnicodeString(v16, a3 >> 31, &v14);
    v12[1] = v14;
    memset(v15, 0, sizeof(v15));
    icu::DateTimePatternGenerator::staticGetBaseSkeleton((icu::DateTimePatternGenerator *)v16, (uint64_t)v15);
    uint64_t v13 = a4;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)v15, &v13, a5, a6);
    v12[0] = v13;
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  }
  else
  {
    uint64_t v6 = 0;
    *a6 = 1;
  }
  return v6;
}

uint64_t udatpg_addPattern(icu::DateTimePatternGenerator *a1, uint64_t a2, unsigned int a3, int a4, UChar *a5, int a6, _DWORD *a7, UErrorCode *a8)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*(int *)a8 > 0) {
    return 0;
  }
  if (a2 || !a3)
  {
    memset(v26, 0, sizeof(v26));
    uint64_t v20 = a2;
    icu::UnicodeString::UnicodeString(v26, a3 >> 31, &v20);
    v18[1] = v20;
    long long v22 = 0u;
    uint64_t v25 = 0;
    long long v24 = 0u;
    long long v23 = 0u;
    uint64_t v21 = (UChar *)&unk_1EDA47700;
    LOWORD(v22) = 2;
    uint64_t v8 = icu::DateTimePatternGenerator::addPattern(a1, (UChar **)v26, a4, &v21, a8);
    long long v19 = a5;
    int v15 = icu::UnicodeString::extract((uint64_t)&v21, &v19, a6, (int *)a8);
    v18[0] = v19;
    if (a7) {
      *a7 = v15;
    }
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v21);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v26);
  }
  else
  {
    uint64_t v8 = 0;
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v8;
}

void *udatpg_setAppendItemFormat(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(v9, 0, sizeof(v9));
  uint64_t v8 = a3;
  icu::UnicodeString::UnicodeString(v9, a4 >> 31, &v8);
  icu::DateTimePatternGenerator::setAppendItemFormat(a1, a2, (UChar **)v9);
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
}

unint64_t udatpg_getAppendItemFormat(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unint64_t AppendItemFormat = icu::DateTimePatternGenerator::getAppendItemFormat(a1, a2);
  if (a3)
  {
    unsigned int v5 = *(unsigned __int16 *)(AppendItemFormat + 8);
    int v6 = (__int16)v5;
    unsigned int v7 = v5 >> 5;
    if (v6 < 0) {
      unsigned int v7 = *(_DWORD *)(AppendItemFormat + 12);
    }
    *a3 = v7;
  }
  __int16 v8 = *(_WORD *)(AppendItemFormat + 8);
  if ((v8 & 0x11) != 0) {
    return 0;
  }
  if ((v8 & 2) != 0) {
    return AppendItemFormat + 10;
  }
  return *(void *)(AppendItemFormat + 24);
}

void *udatpg_setAppendItemName(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(v9, 0, sizeof(v9));
  uint64_t v8 = a3;
  icu::UnicodeString::UnicodeString(v9, a4 >> 31, &v8);
  icu::DateTimePatternGenerator::setAppendItemName(a1, a2, (UChar **)v9);
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
}

uint64_t udatpg_getAppendItemName(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t AppendItemName = icu::DateTimePatternGenerator::getAppendItemName(a1, a2);
  if (a3)
  {
    unsigned int v5 = *(unsigned __int16 *)(AppendItemName + 8);
    int v6 = (__int16)v5;
    unsigned int v7 = v5 >> 5;
    if (v6 < 0) {
      unsigned int v7 = *(_DWORD *)(AppendItemName + 12);
    }
    *a3 = v7;
  }
  __int16 v8 = *(_WORD *)(AppendItemName + 8);
  if ((v8 & 0x11) != 0) {
    return 0;
  }
  if ((v8 & 2) != 0) {
    return AppendItemName + 10;
  }
  return *(void *)(AppendItemName + 24);
}

uint64_t udatpg_getFieldDisplayName(uint64_t a1, unsigned int a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*a6 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a4)
  {
    if (!a5)
    {
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      icu::DateTimePatternGenerator::getFieldDisplayName(a1, a2, a3, (icu::UnicodeString *)&v14);
      unint64_t v10 = SWORD4(v14);
      if ((v10 & 0x80000000) != 0)
      {
        uint64_t v9 = HIDWORD(v14);
      }
      else
      {
        unint64_t v10 = WORD4(v14);
        uint64_t v9 = WORD4(v14) >> 5;
      }
      goto LABEL_5;
    }
    goto LABEL_7;
  }
  if (a5 < 0)
  {
LABEL_7:
    *a6 = 1;
    return 0xFFFFFFFFLL;
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  icu::DateTimePatternGenerator::getFieldDisplayName(a1, a2, a3, (icu::UnicodeString *)&v14);
  uint64_t v13 = a4;
  uint64_t v9 = icu::UnicodeString::extract((uint64_t)&v14, &v13, a5, a6);
  int v12 = v13;
  unint64_t v10 = (unint64_t)&v12;
LABEL_5:
  icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v14);
  return v9;
}

void *udatpg_setDateTimeFormat(icu::DateTimePatternGenerator *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(v7, 0, sizeof(v7));
  uint64_t v6 = a2;
  icu::UnicodeString::UnicodeString(v7, a3 >> 31, &v6);
  icu::DateTimePatternGenerator::setDateTimeFormat(a1, (UChar **)v7);
  return icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
}

char *udatpg_getDateTimeFormat(uint64_t a1, unsigned int *a2)
{
  int v3 = 0;
  return udatpg_getDateTimeFormatForStyle(a1, 2u, a2, &v3);
}

char *udatpg_getDateTimeFormatForStyle(uint64_t a1, unsigned int a2, unsigned int *a3, int *a4)
{
  if (*a4 < 1)
  {
    DateTimeFormat = icu::DateTimePatternGenerator::getDateTimeFormat(a1, a2, a4);
    if (a3)
    {
      unsigned int v7 = *((unsigned __int16 *)DateTimeFormat + 4);
      int v8 = (__int16)v7;
      unsigned int v9 = v7 >> 5;
      if (v8 < 0) {
        unsigned int v9 = DateTimeFormat[3];
      }
      *a3 = v9;
    }
    __int16 v10 = *((_WORD *)DateTimeFormat + 4);
    if ((v10 & 0x11) != 0)
    {
      return 0;
    }
    else if ((v10 & 2) != 0)
    {
      return (char *)DateTimeFormat + 10;
    }
    else
    {
      return (char *)*((void *)DateTimeFormat + 3);
    }
  }
  else
  {
    if (a3) {
      *a3 = 0;
    }
    return (char *)&unk_18CA97F40;
  }
}

void *udatpg_setDateTimeFormatForStyle(void *result, unsigned int a2, uint64_t a3, unsigned int a4, int *a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*a5 <= 0)
  {
    if (a3)
    {
      uint64_t v7 = (uint64_t)result;
      memset(v10, 0, sizeof(v10));
      uint64_t v9 = a3;
      icu::UnicodeString::UnicodeString(v10, a4 >> 31, &v9);
      icu::DateTimePatternGenerator::setDateTimeFormat(v7, a2, (UChar **)v10, a5);
      return icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
    }
    else
    {
      *a5 = 1;
    }
  }
  return result;
}

void *udatpg_setDecimal(UChar **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(v7, 0, sizeof(v7));
  uint64_t v6 = a2;
  icu::UnicodeString::UnicodeString(v7, a3 >> 31, &v6);
  icu::DateTimePatternGenerator::setDecimal(a1, (UChar **)v7);
  return icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
}

uint64_t udatpg_getDecimal(icu::DateTimePatternGenerator *a1, unsigned int *a2)
{
  uint64_t Decimal = icu::DateTimePatternGenerator::getDecimal(a1);
  if (a2)
  {
    unsigned int v4 = *(unsigned __int16 *)(Decimal + 8);
    int v5 = (__int16)v4;
    unsigned int v6 = v4 >> 5;
    if (v5 < 0) {
      unsigned int v6 = *(_DWORD *)(Decimal + 12);
    }
    *a2 = v6;
  }
  __int16 v7 = *(_WORD *)(Decimal + 8);
  if ((v7 & 0x11) != 0) {
    return 0;
  }
  if ((v7 & 2) != 0) {
    return Decimal + 10;
  }
  return *(void *)(Decimal + 24);
}

uint64_t udatpg_replaceFieldTypes(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, UChar *a6, int a7, int *a8)
{
  return udatpg_replaceFieldTypesWithOptions(a1, a2, a3, a4, a5, 0, a6, a7, a8);
}

uint64_t udatpg_replaceFieldTypesWithOptions(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int a6, UChar *a7, int a8, int *a9)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*a9 > 0) {
    return 0;
  }
  if ((a2 || !a3) && (a4 || !a5))
  {
    memset(v25, 0, sizeof(v25));
    uint64_t v22 = a2;
    icu::UnicodeString::UnicodeString(v25, a3 >> 31, &v22);
    v19[2] = v22;
    memset(v24, 0, sizeof(v24));
    uint64_t v21 = a4;
    icu::UnicodeString::UnicodeString(v24, a5 >> 31, &v21);
    v19[1] = v21;
    memset(v23, 0, sizeof(v23));
    icu::DateTimePatternGenerator::replaceFieldTypes(a1, (const icu::UnicodeString *)v25, (const icu::UnicodeString *)v24, a6, a9, (uint64_t)v23);
    uint64_t v20 = a7;
    uint64_t v9 = icu::UnicodeString::extract((uint64_t)v23, &v20, a8, a9);
    v19[0] = v20;
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v23);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v24);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
  }
  else
  {
    uint64_t v9 = 0;
    *a9 = 1;
  }
  return v9;
}

_OWORD *udatpg_openSkeletons(icu::DateTimePatternGenerator *a1, UErrorCode *a2)
{
  uint64_t Skeletons = icu::DateTimePatternGenerator::getSkeletons(a1, a2);

  return uenum_openFromStringEnumeration(Skeletons, (int *)a2);
}

_OWORD *udatpg_openBaseSkeletons(icu::DateTimePatternGenerator *a1, UErrorCode *a2)
{
  Baseuint64_t Skeletons = icu::DateTimePatternGenerator::getBaseSkeletons(a1, a2);

  return uenum_openFromStringEnumeration(BaseSkeletons, (int *)a2);
}

char *udatpg_getPatternForSkeleton(icu::DateTimePatternGenerator *a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  memset(v15, 0, sizeof(v15));
  uint64_t v14 = a2;
  icu::UnicodeString::UnicodeString(v15, a3 >> 31, &v14);
  uint64_t v13 = v14;
  PatternForSkeleton = icu::DateTimePatternGenerator::getPatternForSkeleton(&v13, a1, (const icu::UnicodeString *)v15);
  if (a4)
  {
    unsigned int v7 = *((unsigned __int16 *)PatternForSkeleton + 4);
    int v8 = (__int16)v7;
    unsigned int v9 = v7 >> 5;
    if (v8 < 0) {
      unsigned int v9 = *((_DWORD *)PatternForSkeleton + 3);
    }
    *a4 = v9;
  }
  __int16 v10 = (void *)*((unsigned __int16 *)PatternForSkeleton + 4);
  if ((v10 & 0x11) != 0)
  {
    uint64_t v11 = 0;
  }
  else if ((v10 & 2) != 0)
  {
    uint64_t v11 = (char *)PatternForSkeleton + 10;
  }
  else
  {
    uint64_t v11 = (char *)PatternForSkeleton[3];
  }
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v15);
  return v11;
}

uint64_t uadatpg_remapPatternWithOptions(void *a1, uint64_t a2, unsigned int a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (*a7 <= 0)
  {
    if (a2)
    {
      if (a5)
      {
        if ((a6 & 0x80000000) == 0)
        {
LABEL_6:
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          uint64_t v37 = a2;
          icu::UnicodeString::UnicodeString(&v50, a3 >> 31, &v37);
          v35[1] = v37;
          if ((a4 & 0x60000000) == 0x40000000 || (a4 & 0x60000000) == 0x20000000)
          {
            long long v46 = 0u;
            uint64_t v49 = 0;
            long long v48 = 0u;
            long long v47 = 0u;
            uint64_t v44 = 0;
            int32_t v45 = &unk_1EDA47700;
            LOWORD(v46) = 2;
            long long v41 = 0u;
            long long v43 = 0u;
            long long v42 = 0u;
            int v40 = &unk_1EDA47700;
            LOWORD(v41) = 2;
            memset(v39, 0, sizeof(v39));
            icu::UnicodeString::UnicodeString(v39, "abBhHKkmsSzZOvVXx", 0xFFFFFFFFLL, 0);
            uint64_t v13 = (void *)(WORD4(v50) >> 5);
            if ((SWORD4(v50) & 0x8000u) == 0) {
              int v14 = WORD4(v50) >> 5;
            }
            else {
              int v14 = HIDWORD(v50);
            }
            if (v14 >= 1)
            {
              int v31 = a4 & 0x60000000;
              int v32 = 0;
              unsigned int v15 = 0;
              int v29 = 0;
              uint64_t v30 = 0;
              int v16 = 0;
              BOOL v17 = 0;
              unsigned int v33 = 0;
              int v34 = -1;
              while (1)
              {
                if ((SWORD4(v50) & 0x8000u) == 0) {
                  unsigned int v18 = WORD4(v50) >> 5;
                }
                else {
                  unsigned int v18 = HIDWORD(v50);
                }
                if (v18 <= v15)
                {
                  int v20 = 0xFFFF;
                }
                else
                {
                  if ((BYTE8(v50) & 2) != 0) {
                    unint64_t v19 = (unint64_t)&v50 | 0xA;
                  }
                  else {
                    unint64_t v19 = *((void *)&v51 + 1);
                  }
                  int v20 = *(unsigned __int16 *)(v19 + 2 * (int)v15);
                  if (v20 == 39)
                  {
                    BOOL v17 = !v17;
                    goto LABEL_61;
                  }
                }
                if (v17)
                {
                  BOOL v17 = 1;
                }
                else
                {
                  if ((SWORD4(v39[0]) & 0x8000u) == 0) {
                    int32_t v21 = WORD4(v39[0]) >> 5;
                  }
                  else {
                    int32_t v21 = HIDWORD(v39[0]);
                  }
                  if ((icu::UnicodeString::doIndexOf((uint64_t)v39, v20, 0, v21) & 0x80000000) == 0)
                  {
                    if (!v16)
                    {
                      int v32 = 0;
                      if (v46) {
                        __int16 v22 = 2;
                      }
                      else {
                        __int16 v22 = v46 & 0x1F;
                      }
                      LOWORD(v46) = v22;
                      if (v41) {
                        __int16 v23 = 2;
                      }
                      else {
                        __int16 v23 = v41 & 0x1F;
                      }
                      LOWORD(v41) = v23;
                      int v34 = -1;
                      LODWORD(v30) = v15;
                    }
                    if (v20 > 103)
                    {
                      if (v20 != 107)
                      {
                        if (v20 == 104) {
                          goto LABEL_49;
                        }
LABEL_40:
                        if (v34 < 0 && (v20 == 115 || v20 == 109)) {
                          int v34 = v15;
                        }
                        goto LABEL_54;
                      }
                    }
                    else if (v20 != 72)
                    {
                      if (v20 != 75) {
                        goto LABEL_40;
                      }
LABEL_49:
                      if (v31 == 0x40000000)
                      {
                        int v34 = v15 + 1;
                        ++v32;
                        __int16 v24 = 72;
                        goto LABEL_53;
                      }
LABEL_54:
                      __int16 v24 = v20;
LABEL_55:
                      __int16 v38 = v20;
                      icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v38, 0, 1);
                      __int16 v38 = v24;
                      icu::UnicodeString::doAppend((uint64_t)&v40, (uint64_t)&v38, 0, 1);
LABEL_56:
                      if (u_isUWhiteSpace(v20)
                        || (HIDWORD(v30) = v15 + 1, v34 < 0)
                        || (v20 - 66) <= 0x20
                        && ((1 << (v20 - 66)) & 0x180000001) != 0)
                      {
                        BOOL v17 = 0;
                        int v16 = 1;
                      }
                      else
                      {
                        BOOL v17 = 0;
                        int v16 = 1;
                        int v29 = v15 + 1;
                      }
                      goto LABEL_61;
                    }
                    if (v31 != 0x20000000) {
                      goto LABEL_54;
                    }
                    int v34 = v15 + 1;
                    __int16 v24 = 104;
LABEL_53:
                    unsigned int v33 = 1;
                    goto LABEL_55;
                  }
                  if ((v20 - 65) >= 0x1A)
                  {
                    if ((v20 - 97) <= 0x19 && v16)
                    {
LABEL_65:
                      BOOL v17 = v33;
                      if (v33)
                      {
                        int v25 = sub_18CA12F74(a1, a4, v32 > 1, (uint64_t)&v50, (uint64_t)&v45, (uint64_t)&v40, v30, SHIDWORD(v30), v34, v29, a7);
                        BOOL v17 = 0;
                        int v16 = 0;
                        unsigned int v33 = 0;
                        v14 += v25;
                        v15 += v25;
                      }
                      else
                      {
                        int v16 = 0;
                        unsigned int v33 = 0;
                      }
                      goto LABEL_61;
                    }
                    if (v16) {
                      goto LABEL_56;
                    }
                  }
                  else if (v16)
                  {
                    goto LABEL_65;
                  }
                  BOOL v17 = 0;
                }
LABEL_61:
                if ((int)++v15 >= v14)
                {
                  uint64_t v13 = (void *)v33;
                  if (v33) {
                    sub_18CA12F74(a1, a4, v32 > 1, (uint64_t)&v50, (uint64_t)&v45, (uint64_t)&v40, v30, SHIDWORD(v30), v34, v29, a7);
                  }
                  break;
                }
              }
            }
            icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v39);
            icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v40);
            icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v45);
          }
          UChar32 v36 = a5;
          uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v50, &v36, a6, a7);
          v35[0] = v36;
          icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v50);
          return v7;
        }
      }
      else if (!a6)
      {
        goto LABEL_6;
      }
    }
    uint64_t v7 = 0;
    *a7 = 1;
    return v7;
  }
  return 0;
}

uint64_t sub_18CA12F74(void *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int *a11)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  long long v55 = 0u;
  long long v56 = 0u;
  if (a3) {
    int v16 = a2 | 0x800;
  }
  else {
    int v16 = a2;
  }
  long long v53 = 0uLL;
  long long v54 = 0uLL;
  icu::DateTimePatternGenerator::getBestPattern(a1, a6, v16, a11, (icu::UnicodeString *)&v53);
  unint64_t v17 = *a11;
  if ((int)v17 > 0)
  {
    uint64_t v18 = 0;
    goto LABEL_81;
  }
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  icu::DateTimePatternGenerator::getBestPattern(a1, a5, 0xFFFF, a11, (icu::UnicodeString *)&v49);
  if (*a11 <= 0)
  {
    if ((SWORD4(v49) & 0x8000u) == 0) {
      int32_t v31 = WORD4(v49) >> 5;
    }
    else {
      int32_t v31 = HIDWORD(v49);
    }
    if ((BYTE8(v49) & 1) == 0 && v31 >= 1)
    {
      unsigned int v32 = *(unsigned __int16 *)(a4 + 8);
      int v33 = (__int16)v32;
      unsigned int v34 = v32 >> 5;
      int32_t v35 = v33 >= 0 ? v34 : *(_DWORD *)(a4 + 12);
      uint64_t v36 = (BYTE8(v49) & 2) != 0 ? (unint64_t)&v49 | 0xA : *((void *)&v50 + 1);
      uint64_t v37 = icu::UnicodeString::indexOf(a4, v36, 0, v31, 0, v35);
      if ((v37 & 0x80000000) == 0)
      {
        if ((SWORD4(v49) & 0x8000u) == 0) {
          uint64_t v38 = WORD4(v49) >> 5;
        }
        else {
          uint64_t v38 = HIDWORD(v49);
        }
        if ((SWORD4(v53) & 0x8000u) == 0) {
          uint64_t v39 = WORD4(v53) >> 5;
        }
        else {
          uint64_t v39 = HIDWORD(v53);
        }
        icu::UnicodeString::doReplace((icu::UnicodeString *)a4, v37, v38, (const icu::UnicodeString *)&v53, 0, v39);
        LODWORD(v40) = WORD4(v53) >> 5;
        if ((SWORD4(v53) & 0x8000u) == 0) {
          unint64_t v40 = v40;
        }
        else {
          unint64_t v40 = HIDWORD(v53);
        }
        uint64_t v18 = (v40 - v38);
        goto LABEL_80;
      }
    }
  }
  else
  {
    *a11 = 0;
  }
  if (a9 < 0 || a10 <= a9) {
    goto LABEL_73;
  }
  long long v45 = 0u;
  uint64_t v48 = 0;
  long long v47 = 0u;
  long long v46 = 0u;
  uint64_t v44 = &unk_1EDA47700;
  LOWORD(v45) = 2;
  (*(void (**)(uint64_t))(*(void *)a4 + 24))(a4);
  uint64_t v19 = WORD4(v53) >> 5;
  if ((SWORD4(v53) & 0x8000u) == 0) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = HIDWORD(v53);
  }
  if ((int)v20 < 1) {
    goto LABEL_72;
  }
  unint64_t v21 = 0;
  int v22 = 0;
  LOBYTE(v19) = 0;
  int v23 = 0;
  uint64_t v24 = 0xFFFFFFFFLL;
  do
  {
    if ((SWORD4(v53) & 0x8000u) == 0) {
      unint64_t v25 = WORD4(v53) >> 5;
    }
    else {
      unint64_t v25 = HIDWORD(v53);
    }
    if (v21 >= v25)
    {
      UChar32 v27 = 0xFFFF;
    }
    else
    {
      if ((BYTE8(v53) & 2) != 0) {
        unint64_t v26 = (unint64_t)&v53 | 0xA;
      }
      else {
        unint64_t v26 = *((void *)&v54 + 1);
      }
      UChar32 v27 = *(unsigned __int16 *)(v26 + 2 * v21);
      if (v27 == 39)
      {
        uint64_t v19 = v19 == 0;
        goto LABEL_38;
      }
    }
    if ((_BYTE)v19)
    {
      uint64_t v19 = 1;
    }
    else
    {
      if ((v27 - 72) <= 0x23 && ((1 << (v27 - 72)) & 0x900000009) != 0)
      {
        uint64_t v24 = (v22 + 1);
      }
      else if ((v24 & 0x80000000) != 0 && (v27 == 115 || v27 == 109))
      {
        uint64_t v24 = v21;
      }
      int isUWhiteSpace = u_isUWhiteSpace(v27);
      uint64_t v19 = 0;
      if ((int)v24 > -1 && isUWhiteSpace == 0 && v27 != 97) {
        int v23 = v21 + 1;
      }
    }
LABEL_38:
    ++v21;
    ++v22;
  }
  while (v20 != v21);
  if ((v24 & 0x80000000) == 0 && v23 > (int)v24)
  {
    if ((v45 & 0x8000u) == 0) {
      uint64_t v41 = (unsigned __int16)v45 >> 5;
    }
    else {
      uint64_t v41 = DWORD1(v45);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v53, v24, (v23 - v24), (const icu::UnicodeString *)&v44, 0, v41);
  }
LABEL_72:
  icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v44);
LABEL_73:
  if ((SWORD4(v53) & 0x8000u) == 0) {
    uint64_t v42 = WORD4(v53) >> 5;
  }
  else {
    uint64_t v42 = HIDWORD(v53);
  }
  icu::UnicodeString::doReplace((icu::UnicodeString *)a4, a7, (a8 - a7), (const icu::UnicodeString *)&v53, 0, v42);
  LODWORD(v40) = WORD4(v53) >> 5;
  if ((SWORD4(v53) & 0x8000u) == 0) {
    unint64_t v40 = v40;
  }
  else {
    unint64_t v40 = HIDWORD(v53);
  }
  uint64_t v18 = (a7 - a8 + v40);
LABEL_80:
  icu::UnicodeString::~UnicodeString((void *)v40, (icu::UnicodeString *)&v49);
LABEL_81:
  icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v53);
  return v18;
}

uint64_t *ufieldpositer_open(_DWORD *a1, unint64_t a2)
{
  int v2 = (uint64_t *)*a1;
  if ((int)v2 > 0) {
    return 0;
  }
  uint64_t result = icu::UMemory::operator new(v2, (icu::UMemory *)0x18, a2);
  if (result) {
    return (uint64_t *)icu::FieldPositionIterator::FieldPositionIterator((uint64_t)result);
  }
  *a1 = 7;
  return result;
}

uint64_t ufieldpositer_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ufieldpositer_next(icu::FieldPositionIterator *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v10 = 0;
  int v8 = &unk_1EDA4C7F0;
  uint64_t v9 = 0xFFFFFFFFLL;
  if (icu::FieldPositionIterator::next(a1, (icu::FieldPosition *)&v8))
  {
    uint64_t v6 = v9;
    if (a2)
    {
      unint64_t v5 = HIDWORD(v9);
      *a2 = HIDWORD(v9);
    }
    if (a3)
    {
      unint64_t v5 = v10;
      *a3 = v10;
    }
  }
  else
  {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  icu::FieldPosition::~FieldPosition((void *)v5, (icu::FieldPosition *)&v8);
  return v6;
}

void icu::UIterCollationIterator::~UIterCollationIterator(icu::UIterCollationIterator *this@<X0>, void *a2@<X8>)
{
  icu::CollationIterator::~CollationIterator(this, a2);

  icu::UMemory::operator delete(v2);
}

uint64_t icu::UIterCollationIterator::resetToOffset(icu::UIterCollationIterator *this)
{
  icu::CollationIterator::reset((uint64_t)this);
  int v2 = *(uint64_t (**)(void))(*((void *)this + 49) + 40);

  return v2();
}

uint64_t icu::UIterCollationIterator::getOffset(icu::UIterCollationIterator *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 49) + 32))();
}

uint64_t icu::UIterCollationIterator::handleNextCE32(icu::UIterCollationIterator *this, unsigned int *a2, UErrorCode *a3)
{
  unsigned int v5 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72))();
  *a2 = v5;
  if ((v5 & 0x80000000) != 0) {
    return 192;
  }
  else {
    return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
  }
                           + 4 * ((v5 & 0x1F) + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2 * (v5 >> 5))));
}

uint64_t icu::UIterCollationIterator::handleGetTrailSurrogate(icu::UIterCollationIterator *this)
{
  int v2 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72))();
  unsigned __int16 v3 = v2;
  if ((v2 & 0x80000000) == 0 && (v2 & 0xFFFFFC00) != 0xDC00) {
    (*(void (**)(void))(*((void *)this + 49) + 80))();
  }
  return v3;
}

uint64_t icu::UIterCollationIterator::nextCodePoint(UCharIterator **this, UErrorCode *a2)
{
  return uiter_next32(this[49]);
}

uint64_t icu::UIterCollationIterator::previousCodePoint(UCharIterator **this, UErrorCode *a2)
{
  return uiter_previous32(this[49]);
}

uint64_t icu::UIterCollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v3 = a2;
    uint64_t v4 = this;
    do
    {
      this = uiter_next32(*(UCharIterator **)(v4 + 392));
      BOOL v5 = __OFSUB__(v3--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v3 < 0) ^ v5 | (v3 == 0)));
  }
  return this;
}

uint64_t icu::UIterCollationIterator::backwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v3 = a2;
    uint64_t v4 = this;
    do
    {
      this = uiter_previous32(*(UCharIterator **)(v4 + 392));
      BOOL v5 = __OFSUB__(v3--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v3 < 0) ^ v5 | (v3 == 0)));
  }
  return this;
}

void icu::FCDUIterCollationIterator::~FCDUIterCollationIterator(icu::FCDUIterCollationIterator *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1EDA54230;
  icu::UnicodeString::~UnicodeString(a2, (icu::FCDUIterCollationIterator *)((char *)this + 424));

  icu::CollationIterator::~CollationIterator(this, v3);
}

{
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDA54230;
  icu::UnicodeString::~UnicodeString(a2, (icu::FCDUIterCollationIterator *)((char *)this + 424));

  icu::CollationIterator::~CollationIterator(this, v3);
}

{
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EDA54230;
  icu::UnicodeString::~UnicodeString(a2, (icu::FCDUIterCollationIterator *)((char *)this + 424));
  icu::CollationIterator::~CollationIterator(this, v3);

  icu::UMemory::operator delete(v4);
}

uint64_t icu::FCDUIterCollationIterator::resetToOffset(icu::FCDUIterCollationIterator *this, int a2)
{
  icu::CollationIterator::reset((uint64_t)this);
  uint64_t result = (*(uint64_t (**)(void))(*((void *)this + 49) + 40))();
  *((_DWORD *)this + 101) = a2;
  *((_DWORD *)this + 100) = 0;
  return result;
}

uint64_t icu::FCDUIterCollationIterator::getOffset(icu::FCDUIterCollationIterator *this)
{
  int v2 = *((_DWORD *)this + 100);
  if (v2 <= 1) {
    return (*(uint64_t (**)(void))(*((void *)this + 49) + 32))();
  }
  uint64_t result = *((unsigned int *)this + 102);
  if (v2 != 2)
  {
    if (result) {
      return *((unsigned int *)this + 103);
    }
    else {
      return *((unsigned int *)this + 101);
    }
  }
  return result;
}

uint64_t icu::FCDUIterCollationIterator::handleNextCE32(icu::FCDUIterCollationIterator *this, int *a2, UErrorCode *a3)
{
  while (1)
  {
    while (1)
    {
      int v6 = *((_DWORD *)this + 100);
      if (v6 == 2)
      {
        if (*((_DWORD *)this + 102) != *((_DWORD *)this + 103))
        {
          *a2 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72))();
          ++*((_DWORD *)this + 102);
          return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
                                 + 4
                                 * ((*a2 & 0x1F)
                                  + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2 * (*a2 >> 5))));
        }
        goto LABEL_20;
      }
      if (v6) {
        break;
      }
      unsigned int v7 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72))();
      *a2 = v7;
      if ((v7 & 0x80000000) != 0) {
        return 192;
      }
      if (v7 < 0xC0) {
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
      }
                               + 4
                               * ((*a2 & 0x1F)
                                + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2 * (*a2 >> 5))));
      if (!icu::CollationFCD::tcccIndex[(unint64_t)v7 >> 5]) {
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
      }
                               + 4
                               * ((*a2 & 0x1F)
                                + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2 * (*a2 >> 5))));
      if (((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[(unint64_t)v7 >> 5]] >> v7) & 1) == 0) {
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
      }
                               + 4
                               * ((*a2 & 0x1F)
                                + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2 * (*a2 >> 5))));
      if ((v7 & 0x1FFF01) != 0xF01)
      {
        int v8 = (*(uint64_t (**)(void))(*((void *)this + 49) + 64))();
        if (v8 < 768
          || !icu::CollationFCD::lcccIndex[(unint64_t)v8 >> 5]
          || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[(unint64_t)v8 >> 5]] >> v8) & 1) == 0)
        {
          return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
                                 + 4
                                 * ((*a2 & 0x1F)
                                  + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2 * (*a2 >> 5))));
        }
      }
      (*(void (**)(void))(*((void *)this + 49) + 80))();
      if (!icu::FCDUIterCollationIterator::nextSegment(this, a3))
      {
        *a2 = -1;
        return 192;
      }
    }
    if (v6 < 3) {
      goto LABEL_20;
    }
    uint64_t v9 = *((int *)this + 102);
    unsigned int v10 = *((unsigned __int16 *)this + 216);
    if ((*((__int16 *)this + 216) & 0x80000000) == 0) {
      break;
    }
    unsigned int v12 = *((_DWORD *)this + 109);
    if (v9 != v12) {
      goto LABEL_22;
    }
LABEL_20:
    icu::FCDUIterCollationIterator::switchToForward((uint64_t)this);
  }
  if (v9 == v10 >> 5) {
    goto LABEL_20;
  }
  unsigned int v12 = v10 >> 5;
LABEL_22:
  *((_DWORD *)this + 102) = v9 + 1;
  if (v12 <= v9)
  {
    int v14 = 0xFFFF;
  }
  else
  {
    if ((v10 & 2) != 0) {
      uint64_t v13 = (char *)this + 434;
    }
    else {
      uint64_t v13 = (char *)*((void *)this + 56);
    }
    int v14 = *(unsigned __int16 *)&v13[2 * v9];
  }
  *a2 = v14;
  return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
                         + 4
                         * ((*a2 & 0x1F)
                          + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2 * (*a2 >> 5))));
}

uint64_t icu::FCDUIterCollationIterator::nextSegment(icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  unsigned __int16 v5 = 0;
  *((_DWORD *)this + 102) = (*(uint64_t (**)(void))(*((void *)this + 49) + 32))();
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v25 = 0;
  long long v24 = 0u;
  unint64_t v21 = &unk_1EDA47700;
  LOWORD(v22) = 2;
  while (1)
  {
    UChar32 v6 = uiter_next32(*((UCharIterator **)this + 49));
    if (v6 < 0) {
      goto LABEL_23;
    }
    unsigned int v7 = v6;
    unsigned int v8 = sub_18C818388(*((void *)this + 52), v6);
    unsigned int v9 = v8;
    if (v8 > 0xFF) {
      break;
    }
    if ((unsigned __int16)v22 > 0x1Fu)
    {
      uiter_previous32(*((UCharIterator **)this + 49));
LABEL_23:
      int v15 = *((_DWORD *)this + 102);
      if ((__int16)v22 < 0) {
        int v16 = DWORD1(v22) + v15;
      }
      else {
        int v16 = v15 + ((unsigned __int16)v22 >> 5);
      }
      *((_DWORD *)this + 103) = v16;
      uint64_t v2 = 1;
      (*(void (**)(void))(*((void *)this + 49) + 40))();
      uint64_t v17 = 2;
      *((_DWORD *)this + 100) = 2;
      goto LABEL_33;
    }
    icu::UnicodeString::append((uint64_t)&v21, v7);
LABEL_15:
    unsigned __int16 v5 = v9;
    if (!(_BYTE)v9) {
      goto LABEL_23;
    }
  }
  unsigned int v10 = v8 >> 8;
  icu::UnicodeString::append((uint64_t)&v21, v7);
  if (v10 >= v5 && v9 != 33156 && v9 != 33154) {
    goto LABEL_15;
  }
  UChar32 v13 = uiter_next32(*((UCharIterator **)this + 49));
  if ((v13 & 0x80000000) == 0)
  {
    UChar32 v14 = v13;
    while (sub_18C818388(*((void *)this + 52), v14) > 0xFF)
    {
      icu::UnicodeString::append((uint64_t)&v21, v14);
      UChar32 v14 = uiter_next32(*((UCharIterator **)this + 49));
      if (v14 < 0) {
        goto LABEL_28;
      }
    }
    uiter_previous32(*((UCharIterator **)this + 49));
  }
LABEL_28:
  icu::Normalizer2Impl::decompose(*((UChar **)this + 52), (const icu::UnicodeString *)&v21, (icu::FCDUIterCollationIterator *)((char *)this + 424), a2);
  uint64_t v17 = *(unsigned int *)a2;
  if ((int)v17 <= 0)
  {
    int v18 = *((_DWORD *)this + 102);
    *((_DWORD *)this + 101) = v18;
    int v19 = (unsigned __int16)v22 >> 5;
    if ((v22 & 0x8000u) != 0) {
      int v19 = DWORD1(v22);
    }
    *((_DWORD *)this + 103) = v19 + v18;
    uint64_t v17 = 3;
    *((_DWORD *)this + 100) = 3;
    *((_DWORD *)this + 102) = 0;
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = 0;
  }
LABEL_33:
  icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v21);
  return v2;
}

uint64_t icu::FCDUIterCollationIterator::switchToForward(uint64_t this)
{
  UChar v1 = (_DWORD *)this;
  int v2 = *(_DWORD *)(this + 400);
  if (v2 == 4)
  {
    this = (*(uint64_t (**)(void))(*(void *)(this + 392) + 40))();
LABEL_6:
    int v4 = 0;
    v1[101] = v1[103];
    goto LABEL_8;
  }
  if (v2 == 2)
  {
    int v4 = 0;
    goto LABEL_8;
  }
  if (v2 != 1) {
    goto LABEL_6;
  }
  this = (*(uint64_t (**)(void))(*(void *)(this + 392) + 32))();
  BOOL v3 = this != v1[103];
  v1[102] = this;
  v1[101] = this;
  int v4 = 2 * v3;
LABEL_8:
  v1[100] = v4;
  return this;
}

uint64_t icu::FCDUIterCollationIterator::handleGetTrailSurrogate(icu::FCDUIterCollationIterator *this)
{
  if (*((int *)this + 100) > 2)
  {
    uint64_t v4 = *((int *)this + 102);
    unsigned int v5 = *((unsigned __int16 *)this + 216);
    if (*((__int16 *)this + 216) < 0) {
      unsigned int v6 = *((_DWORD *)this + 109);
    }
    else {
      unsigned int v6 = v5 >> 5;
    }
    if (v6 <= v4)
    {
      return 0xFFFFLL;
    }
    else
    {
      if ((v5 & 2) != 0) {
        unsigned int v8 = (char *)this + 434;
      }
      else {
        unsigned int v8 = (char *)*((void *)this + 56);
      }
      uint64_t result = *(unsigned __int16 *)&v8[2 * v4];
      if ((result & 0xFC00) == 0xDC00) {
        *((_DWORD *)this + 102) = v4 + 1;
      }
    }
  }
  else
  {
    unsigned int v2 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72))();
    unsigned __int16 v3 = v2;
    if (v2 >> 10 == 55)
    {
      if (*((_DWORD *)this + 100) == 2) {
        ++*((_DWORD *)this + 102);
      }
    }
    else if ((v2 & 0x80000000) == 0)
    {
      (*(void (**)(void))(*((void *)this + 49) + 80))();
    }
    return v3;
  }
  return result;
}

uint64_t *icu::FCDUIterCollationIterator::nextCodePoint(icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)this + 100);
      if (v4 == 2)
      {
        if (*((_DWORD *)this + 102) == *((_DWORD *)this + 103)) {
          goto LABEL_20;
        }
        uint64_t v11 = (uint64_t *)uiter_next32(*((UCharIterator **)this + 49));
LABEL_27:
        unsigned int v6 = v11;
        if (v11 < 0x10000) {
          int v12 = 1;
        }
        else {
          int v12 = 2;
        }
        *((_DWORD *)this + 102) += v12;
        return v6;
      }
      if (!v4) {
        break;
      }
      if (v4 >= 3)
      {
        unsigned int v8 = *((__int16 *)this + 216) < 0
           ? (uint64_t *)*((unsigned int *)this + 109)
           : (uint64_t *)(*((unsigned __int16 *)this + 216) >> 5);
        int v9 = *((_DWORD *)this + 102);
        if (v9 != v8)
        {
          uint64_t v11 = icu::UnicodeString::char32At(v8, (icu::FCDUIterCollationIterator *)((char *)this + 424), v9);
          goto LABEL_27;
        }
      }
LABEL_20:
      icu::FCDUIterCollationIterator::switchToForward((uint64_t)this);
    }
    uint64_t v5 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72))();
    unsigned int v6 = (uint64_t *)v5;
    if ((v5 & 0x80000000) != 0) {
      return v6;
    }
    if (v5 < 0xC0) {
      break;
    }
    if (!icu::CollationFCD::tcccIndex[(unint64_t)v5 >> 5]) {
      break;
    }
    if (((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[(unint64_t)v5 >> 5]] >> v5) & 1) == 0) {
      break;
    }
    if ((v5 & 0x1FFF01) != 0xF01)
    {
      int v7 = (*(uint64_t (**)(void))(*((void *)this + 49) + 64))();
      if (v7 < 768
        || !icu::CollationFCD::lcccIndex[(unint64_t)v7 >> 5]
        || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[(unint64_t)v7 >> 5]] >> v7) & 1) == 0)
      {
        break;
      }
    }
    (*(void (**)(void))(*((void *)this + 49) + 80))();
    if (!icu::FCDUIterCollationIterator::nextSegment(this, a2)) {
      return (uint64_t *)0xFFFFFFFFLL;
    }
  }
  if (v6 >> 10 == 54)
  {
    unsigned int v10 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72))();
    if (v10 >> 10 == 55)
    {
      return (uint64_t *)(v10 + (v6 << 10) - 56613888);
    }
    else if ((v10 & 0x80000000) == 0)
    {
      (*(void (**)(void))(*((void *)this + 49) + 80))();
    }
  }
  return v6;
}

uint64_t *icu::FCDUIterCollationIterator::previousCodePoint(icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)this + 100);
      if (v4 != 2) {
        break;
      }
      if (*((_DWORD *)this + 102) != *((_DWORD *)this + 101))
      {
        unsigned int v10 = (uint64_t *)uiter_previous32(*((UCharIterator **)this + 49));
LABEL_31:
        unsigned int v6 = v10;
        if (v10 >= 0x10000) {
          int v11 = -2;
        }
        else {
          int v11 = -1;
        }
        *((_DWORD *)this + 102) += v11;
        return v6;
      }
LABEL_13:
      icu::FCDUIterCollationIterator::switchToBackward((uint64_t)this);
    }
    if (v4 != 1)
    {
      if (v4 >= 3)
      {
        unsigned int v8 = (uint64_t *)*((unsigned int *)this + 102);
        if (v8)
        {
          unsigned int v10 = icu::UnicodeString::char32At(v8, (icu::FCDUIterCollationIterator *)((char *)this + 424), (int)v8 - 1);
          goto LABEL_31;
        }
      }
      goto LABEL_13;
    }
    uint64_t v5 = (*(uint64_t (**)(void))(*((void *)this + 49) + 80))();
    if ((v5 & 0x80000000) != 0)
    {
      *((_DWORD *)this + 102) = 0;
      *((void *)this + 50) = 2;
      return (uint64_t *)0xFFFFFFFFLL;
    }
    unsigned int v6 = (uint64_t *)v5;
    if (v5 < 0x300
      || !icu::CollationFCD::lcccIndex[(unint64_t)v5 >> 5]
      || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[(unint64_t)v5 >> 5]] >> v5) & 1) == 0)
    {
      return v6;
    }
    if ((v5 & 0x1FFF01) != 0xF01) {
      break;
    }
    unsigned int v7 = -1;
LABEL_17:
    (*(void (**)(void))(*((void *)this + 49) + 72))();
    if ((v7 & 0x80000000) == 0) {
      (*(void (**)(void))(*((void *)this + 49) + 72))();
    }
    if (!icu::FCDUIterCollationIterator::previousSegment(this, a2)) {
      return (uint64_t *)0xFFFFFFFFLL;
    }
  }
  int v9 = (*(uint64_t (**)(void))(*((void *)this + 49) + 80))();
  unsigned int v7 = v9;
  if (v9 >= 192
    && icu::CollationFCD::tcccIndex[(unint64_t)v9 >> 5]
    && ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[(unint64_t)v9 >> 5]] >> v9) & 1) != 0)
  {
    goto LABEL_17;
  }
  if (v6 >> 10 != 55) {
    goto LABEL_28;
  }
  if (v9 < 0) {
    unsigned int v7 = (*(uint64_t (**)(void))(*((void *)this + 49) + 80))();
  }
  if (v7 >> 10 == 54) {
    return (uint64_t *)(v6 + (v7 << 10) - 56613888);
  }
LABEL_28:
  if ((v7 & 0x80000000) == 0) {
    (*(void (**)(void))(*((void *)this + 49) + 72))();
  }
  return v6;
}

uint64_t icu::FCDUIterCollationIterator::previousSegment(icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  LOBYTE(v5) = 0;
  *((_DWORD *)this + 102) = (*(uint64_t (**)(void))(*((void *)this + 49) + 32))();
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v25 = 0;
  long long v24 = 0u;
  unint64_t v21 = &unk_1EDA47700;
  LOWORD(v22) = 2;
  while (1)
  {
    UChar32 v6 = uiter_previous32(*((UCharIterator **)this + 49));
    if (v6 < 0) {
      goto LABEL_33;
    }
    unsigned int v7 = v6;
    unsigned int v8 = sub_18C818388(*((void *)this + 52), v6);
    if (!(_BYTE)v8)
    {
      if ((unsigned __int16)v22 > 0x1Fu)
      {
        uiter_next32(*((UCharIterator **)this + 49));
LABEL_33:
        if ((v22 & 0x8000u) == 0) {
          int v19 = (unsigned __int16)v22 >> 5;
        }
        else {
          int v19 = DWORD1(v22);
        }
        *((_DWORD *)this + 101) = *((_DWORD *)this + 102) - v19;
        uint64_t v2 = 1;
        (*(void (**)(void))(*((void *)this + 49) + 40))();
        uint64_t v15 = 2;
        *((_DWORD *)this + 100) = 2;
        goto LABEL_39;
      }
      icu::UnicodeString::append((uint64_t)&v21, v7);
      goto LABEL_16;
    }
    icu::UnicodeString::append((uint64_t)&v21, v7);
    if ((_BYTE)v5 && v8 > v5)
    {
      if (v8 >= 0x100) {
        break;
      }
      goto LABEL_24;
    }
    if (v8 == 33154 || v8 == 33156) {
      break;
    }
LABEL_16:
    unsigned int v5 = v8 >> 8;
    if (v8 <= 0xFF) {
      goto LABEL_33;
    }
  }
  do
  {
    UChar32 v10 = uiter_previous32(*((UCharIterator **)this + 49));
    if (v10 < 0) {
      break;
    }
    unsigned int v11 = v10;
    unsigned int v12 = sub_18C818388(*((void *)this + 52), v10);
    if (!v12)
    {
      uiter_next32(*((UCharIterator **)this + 49));
      break;
    }
    unsigned int v13 = v12;
    icu::UnicodeString::append((uint64_t)&v21, v11);
  }
  while (v13 > 0xFF);
LABEL_24:
  if ((v22 & 0x8000u) == 0) {
    int v14 = (unsigned __int16)v22 >> 5;
  }
  else {
    int v14 = DWORD1(v22);
  }
  icu::UnicodeString::doReverse((icu::UnicodeString *)&v21, 0, v14);
  icu::Normalizer2Impl::decompose(*((UChar **)this + 52), (const icu::UnicodeString *)&v21, (icu::FCDUIterCollationIterator *)((char *)this + 424), a2);
  uint64_t v2 = 0;
  uint64_t v15 = *(unsigned int *)a2;
  if ((int)v15 <= 0)
  {
    int v16 = *((_DWORD *)this + 102);
    *((_DWORD *)this + 103) = v16;
    int v17 = (unsigned __int16)v22 >> 5;
    if ((v22 & 0x8000u) != 0) {
      int v17 = DWORD1(v22);
    }
    *((_DWORD *)this + 101) = v16 - v17;
    *((_DWORD *)this + 100) = 4;
    unsigned int v18 = *((unsigned __int16 *)this + 216);
    if ((v18 & 0x8000) != 0) {
      uint64_t v15 = *((unsigned int *)this + 109);
    }
    else {
      uint64_t v15 = v18 >> 5;
    }
    *((_DWORD *)this + 102) = v15;
    uint64_t v2 = 1;
  }
LABEL_39:
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v21);
  return v2;
}

uint64_t icu::FCDUIterCollationIterator::switchToBackward(uint64_t this)
{
  UChar v1 = (_DWORD *)this;
  int v2 = *(_DWORD *)(this + 400);
  if (v2 == 3)
  {
    this = (*(uint64_t (**)(void))(*(void *)(this + 392) + 40))();
    goto LABEL_8;
  }
  if (v2 == 2)
  {
LABEL_9:
    int v3 = 1;
    goto LABEL_10;
  }
  if (v2)
  {
LABEL_8:
    v1[103] = v1[101];
    goto LABEL_9;
  }
  this = (*(uint64_t (**)(void))(*(void *)(this + 392) + 32))();
  v1[102] = this;
  v1[103] = this;
  if (this == v1[101]) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
LABEL_10:
  v1[100] = v3;
  return this;
}

uint64_t *icu::FCDUIterCollationIterator::forwardNumCodePoints(uint64_t *this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUIterCollationIterator *)this;
    do
    {
      this = icu::FCDUIterCollationIterator::nextCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

uint64_t *icu::FCDUIterCollationIterator::backwardNumCodePoints(uint64_t *this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUIterCollationIterator *)this;
    do
    {
      this = icu::FCDUIterCollationIterator::previousCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

BOOL icu::FCDUIterCollationIterator::normalize(UChar **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  return *a3 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t *ulistfmt_open(char *a1, UErrorCode *a2)
{
  v9[28] = *(const char **)MEMORY[0x1E4F143B8];
  int v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0) {
    return 0;
  }
  icu::Locale::Locale(v3, (icu::Locale *)v9, a1, 0, 0, 0);
  uint64_t Instance = icu::ListFormatter::createInstance(v9, a2, v6, v7);
  icu::Locale::~Locale(v8, (icu::Locale *)v9);
  if (*(int *)a2 >= 1 && Instance)
  {
    (*(void (**)(uint64_t *))(*Instance + 8))(Instance);
    return 0;
  }
  return Instance;
}

uint64_t *ulistfmt_openForType(char *a1, int a2, unsigned int a3, UErrorCode *a4)
{
  v11[28] = *(const char **)MEMORY[0x1E4F143B8];
  int v4 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v4 > 0) {
    return 0;
  }
  icu::Locale::Locale(v4, (icu::Locale *)v11, a1, 0, 0, 0);
  uint64_t Instance = icu::ListFormatter::createInstance(v11, a2, a3, a4);
  icu::Locale::~Locale(v10, (icu::Locale *)v11);
  if (*(int *)a4 >= 1 && Instance)
  {
    (*(void (**)(uint64_t *))(*Instance + 8))(Instance);
    return 0;
  }
  return Instance;
}

uint64_t ulistfmt_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ulistfmt_openResult(int *a1, unint64_t a2)
{
  if (*a1 > 0) {
    return 0;
  }
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x30, a2);
  if (result)
  {
    *(_DWORD *)uint64_t result = 1430672896;
    *(_DWORD *)(result + 16) = 1179407188;
    *(void *)(result + 24) = &unk_1EDA4DF60;
    *(void *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 27;
    *(void *)(result + 8) = result + 24;
  }
  else
  {
    *a1 = 7;
  }
  return result;
}

uint64_t ulistfmt_resultAsValue(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1179407188) {
      goto LABEL_8;
    }
    int v2 = 3;
  }
  else
  {
    int v2 = 1;
  }
  uint64_t result = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0;
  }
  return result;
}

void ulistfmt_closeResult(_DWORD *a1)
{
  if (a1 && a1[4] == 1179407188)
  {
    icu::FormattedList::~FormattedList((icu::FormattedList *)(a1 + 6));
    a1[4] = 0;
    *a1 = 0;
    icu::UMemory::operator delete(a1);
  }
}

uint64_t ulistfmt_format(icu::ListFormatter *a1, const UChar **a2, unint64_t a3, unsigned int a4, char *a5, unsigned int a6, int *a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*a7 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (a5)
  {
    if ((a6 & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (a6)
  {
LABEL_9:
    *a7 = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  uint64_t v12 = 0;
  memset(v28, 0, sizeof(v28));
  do
  {
    unsigned int v13 = &v28[v12];
    *(void *)unsigned int v13 = &unk_1EDA47700;
    *((_WORD *)v13 + 4) = 2;
    v12 += 4;
  }
  while (v12 != 16);
  long long v22 = 0;
  int v14 = sub_18CA14AC0(a2, a3, a4, (char *)v28, &v22, a7);
  if (*a7 <= 0)
  {
    int v17 = (const icu::UnicodeString *)v14;
    long long v24 = 0u;
    uint64_t v27 = 0;
    long long v26 = 0u;
    long long v25 = 0u;
    long long v23 = &unk_1EDA47700;
    LOWORD(v24) = 2;
    if (a5) {
      icu::UnicodeString::setTo((icu::UnicodeString *)&v23, a5, 0, a6);
    }
    icu::ListFormatter::format(a1, v17, a4, (icu::UnicodeString *)&v23, (UErrorCode *)a7);
    unint64_t v21 = (UChar *)a5;
    uint64_t v15 = icu::UnicodeString::extract((uint64_t)&v23, &v21, a6, a7);
    uint64_t v20 = v21;
    icu::UnicodeString::~UnicodeString(&v20, (icu::UnicodeString *)&v23);
  }
  else
  {
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  sub_18C7F9F20((uint64_t *)&v22);
  for (uint64_t i = 12; i != -4; i -= 4)
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v28[i]);
  return v15;
}

char *sub_18CA14AC0(const UChar **a1, unint64_t a2, unsigned int a3, char *a4, void **a5, int *a6)
{
  if ((a3 & 0x80000000) != 0 || (UChar32 v10 = (unsigned int *)a2, (v11 = a1) == 0) && a3)
  {
    a4 = 0;
    *a6 = 1;
  }
  else
  {
    if (a3 >= 5)
    {
      unsigned int v13 = (void *)icu::UMemory::operator new[]((icu::UMemory *)(((unint64_t)a3 << 6) | 0x10), a2);
      if (v13)
      {
        void *v13 = 64;
        v13[1] = a3;
        int v14 = (char *)(v13 + 2);
        uint64_t v15 = v13 + 2;
        int v16 = v13 + 2;
        do
        {
          *int v16 = &unk_1EDA47700;
          *((_WORD *)v16 + 4) = 2;
          v15 += 8;
          v16 += 8;
        }
        while (v16 != &v13[8 * (unint64_t)a3 + 2]);
      }
      else
      {
        int v14 = 0;
      }
      sub_18CA14DD0(a5, v14, a6);
      if (*a6 > 0) {
        return 0;
      }
      a4 = (char *)*a5;
    }
    if (v10)
    {
      if ((int)a3 >= 1)
      {
        uint64_t v17 = 0;
        unint64_t v18 = (unint64_t)a3 << 6;
        do
        {
          unsigned int v20 = *v10++;
          int v19 = v20;
          int v21 = v20 >> 31;
          long long v22 = *v11++;
          long long v26 = v22;
          icu::UnicodeString::setTo((icu::UnicodeString *)&a4[v17], v21, &v26, v19);
          v17 += 64;
        }
        while (v18 != v17);
      }
    }
    else if ((int)a3 >= 1)
    {
      uint64_t v23 = 0;
      unint64_t v24 = (unint64_t)a3 << 6;
      do
      {
        long long v25 = *v11++;
        uint64_t v27 = v25;
        icu::UnicodeString::setTo((icu::UnicodeString *)&a4[v23], 1, &v27, -1);
        v23 += 64;
      }
      while (v24 != v23);
    }
  }
  return a4;
}

icu::ListFormatter *ulistfmt_formatStringsToResult(icu::ListFormatter *result, const UChar **a2, unint64_t a3, unsigned int a4, uint64_t a5, int *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*a6 > 0) {
    return result;
  }
  if (!a5)
  {
    int v15 = 1;
LABEL_13:
    *a6 = v15;
    return result;
  }
  if (*(_DWORD *)(a5 + 16) != 1179407188)
  {
    int v15 = 3;
    goto LABEL_13;
  }
  int v9 = result;
  uint64_t v10 = 0;
  memset(v18, 0, sizeof(v18));
  do
  {
    unsigned int v11 = &v18[v10];
    *(void *)unsigned int v11 = &unk_1EDA47700;
    *((_WORD *)v11 + 4) = 2;
    v10 += 4;
  }
  while (v10 != 16);
  uint64_t v17 = 0;
  uint64_t v12 = sub_18CA14AC0(a2, a3, a4, (char *)v18, &v17, a6);
  if (*a6 <= 0)
  {
    icu::ListFormatter::formatStringsToValue(v9, (const icu::UnicodeString *)v12, (UErrorCode *)a6, a4, (uint64_t)v16);
    icu::FormattedList::operator=(a5 + 24, (uint64_t)v16);
    icu::FormattedList::~FormattedList((icu::FormattedList *)v16);
  }
  sub_18C7F9F20((uint64_t *)&v17);
  for (uint64_t i = 12; i != -4; i -= 4)
    uint64_t result = (icu::ListFormatter *)icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v18[i]);
  return result;
}

void sub_18CA14DD0(void **a1, char *a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v10 = *a1;
    if (*a1)
    {
      unsigned int v11 = (char *)(v10 - 2);
      uint64_t v12 = *(v10 - 1);
      if (v12)
      {
        uint64_t v13 = v12 << 6;
        int v14 = (char *)(v10 - 8);
        do
        {
          icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v14[v13]);
          v13 -= 64;
        }
        while (v13);
      }
      icu::UMemory::operator delete[](v11);
    }
    *a1 = a2;
    if (!a2) {
      *a3 = 7;
    }
  }
  else if (a2)
  {
    int v4 = a2 - 16;
    unsigned int v5 = (void *)*((void *)a2 - 1);
    if (v5)
    {
      uint64_t v6 = (void)v5 << 6;
      unsigned int v7 = a2 - 64;
      do
      {
        icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v7[v6]);
        v6 -= 64;
      }
      while (v6);
    }
    icu::UMemory::operator delete[](v4);
  }
}

uint64_t u_formatMessage(const char *a1, UChar *a2, int a3, UChar *a4, int a5, UErrorCode *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return u_vformatMessage(a1, a2, a3, a4, a5, (double *)&a9, a6);
}

uint64_t u_vformatMessage(const char *a1, UChar *a2, int a3, UChar *a4, int a5, double *a6, UErrorCode *a7)
{
  unsigned int v11 = umsg_open(a2, a3, a1, 0, a7);
  uint64_t v12 = umsg_vformat((uint64_t)v11, a4, a5, a6, a7);
  if (v11) {
    (*(void (**)(unsigned __int8 *))(*(void *)v11 + 8))(v11);
  }
  return v12;
}

unsigned __int8 *umsg_open(UChar *s, int a2, const char *a3, UParseError *a4, UErrorCode *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a5 && *(int *)a5 <= 0)
  {
    if (!s || a2 <= -2)
    {
      uint64_t v6 = 0;
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
      return v6;
    }
    uint64_t v20 = 0;
    long long v11 = 0uLL;
    memset(v19, 0, sizeof(v19));
    if (a4) {
      uint64_t v12 = a4;
    }
    else {
      uint64_t v12 = (UParseError *)v19;
    }
    if (a2 == -1)
    {
      u_strlen(s);
      long long v11 = 0uLL;
    }
    void v22[2] = v11;
    v22[3] = v11;
    v22[0] = v11;
    v22[1] = v11;
    unint64_t v18 = s;
    icu::UnicodeString::UnicodeString(v22, a2 == -1, &v18);
    uint64_t v17 = v18;
    uint64_t v6 = (unsigned __int8 *)icu::UMemory::operator new((uint64_t *)&v17, (icu::UMemory *)0x330, v13);
    if (v6)
    {
      icu::Locale::Locale(v14, (icu::Locale *)v21, a3, 0, 0, 0);
      icu::MessageFormat::MessageFormat((icu::MessageFormat *)v6, (const icu::UnicodeString *)v22, (const icu::Locale *)v21, v12, a5);
      icu::Locale::~Locale(v15, (icu::Locale *)v21);
      uint64_t v16 = *(unsigned int *)a5;
      if ((int)v16 > 0) {
        goto LABEL_19;
      }
      uint64_t v16 = v6[712];
      if (!v6[712]) {
        goto LABEL_19;
      }
      uint64_t v16 = 65804;
    }
    else
    {
      uint64_t v16 = 7;
    }
    *a5 = v16;
LABEL_19:
    icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)v22);
    return v6;
  }
  return 0;
}

uint64_t umsg_vformat(uint64_t a1, UChar *a2, int a3, double *a4, UErrorCode *a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v42 = a4;
  if (!a5 || *(int *)a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a1 || a3 < 0 || !a2 && a3)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 704);
  uint64_t v12 = *(int **)(a1 + 696);
  if (v11 <= 1) {
    int v13 = 1;
  }
  else {
    int v13 = *(_DWORD *)(a1 + 704);
  }
  unint64_t v14 = v13;
  uint64_t v15 = 112 * v13;
  BOOL v16 = !is_mul_ok(v14, 0x70uLL);
  BOOL v17 = __CFADD__(v15, 16);
  uint64_t v18 = v15 + 16;
  if (v17) {
    BOOL v16 = 1;
  }
  if (v16) {
    uint64_t v19 = -1;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v19, (unint64_t)a2);
  if (v20)
  {
    *uint64_t v20 = 112;
    v20[1] = v14;
    int v21 = (const icu::Formattable *)(v20 + 2);
    uint64_t v22 = 112 * v14;
    uint64_t v23 = (icu::Formattable *)(v20 + 2);
    do
    {
      uint64_t v23 = (icu::Formattable *)((char *)icu::Formattable::Formattable(v23) + 112);
      v22 -= 112;
    }
    while (v22);
  }
  else
  {
    int v21 = 0;
  }
  if ((int)v11 >= 1)
  {
    uint64_t v24 = v11;
    long long v25 = v21;
    do
    {
      int v26 = *v12++;
      switch(v26)
      {
        case 0:
          uint64_t v27 = v42++;
          icu::Formattable::setDate(v25, *v27);
          break;
        case 1:
          int v28 = v42++;
          icu::Formattable::setDouble(v25, *v28);
          break;
        case 2:
          uint64_t v29 = (int *)v42++;
          icu::Formattable::setLong(v25, *v29);
          break;
        case 3:
          uint64_t v30 = (uint64_t *)v42++;
          if (*v30)
          {
            icu::UnicodeString::UnicodeString((uint64_t)&v43, *v30);
            icu::Formattable::setString(v25, &v43);
            icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v43);
          }
          else
          {
            *a5 = U_ILLEGAL_ARGUMENT_ERROR;
          }
          break;
        case 4:
        case 6:
          ++v42;
          break;
        case 5:
          unsigned int v32 = (uint64_t *)v42++;
          icu::Formattable::setInt64(v25, *v32);
          break;
        default:
          abort();
      }
      long long v25 = (icu::Formattable *)((char *)v25 + 112);
      --v24;
    }
    while (v24);
  }
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v47 = 0;
  long long v46 = 0u;
  long long v43 = (UChar *)&unk_1EDA47700;
  LOWORD(v44) = 2;
  v41[2] = 0;
  v41[0] = &unk_1EDA4C7F0;
  v41[1] = 0xFFFFFFFFLL;
  icu::MessageFormat::format((icu::MessageFormat *)a1, v21, v11, (icu::UnicodeString *)&v43, (icu::FieldPosition *)v41, a5);
  if (v21)
  {
    int v33 = (char *)v21 - 16;
    uint64_t v34 = *((void *)v21 - 1);
    if (v34)
    {
      uint64_t v35 = 112 * v34;
      uint64_t v36 = (char *)v21 - 112;
      do
      {
        icu::Formattable::~Formattable((icu::Formattable *)&v36[v35]);
        v35 -= 112;
      }
      while (v35);
    }
    icu::UMemory::operator delete[](v33);
  }
  uint64_t v37 = (UChar **)*(unsigned int *)a5;
  if ((int)v37 <= 0)
  {
    unint64_t v40 = a2;
    uint64_t v9 = icu::UnicodeString::extract((uint64_t)&v43, &v40, a3, (int *)a5);
    uint64_t v39 = v40;
    uint64_t v37 = &v39;
  }
  else
  {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  icu::FieldPosition::~FieldPosition(v37, (icu::FieldPosition *)v41);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v43);
  return v9;
}

uint64_t umsg_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t u_formatMessageWithError(const char *a1, UChar *a2, int a3, UChar *a4, int a5, UParseError *a6, UErrorCode *a7, uint64_t a8, uint64_t a9)
{
  return u_vformatMessageWithError(a1, a2, a3, a4, a5, a6, (double *)&a9, a7);
}

uint64_t u_vformatMessageWithError(const char *a1, UChar *s, int a3, UChar *a4, int a5, UParseError *a6, double *a7, UErrorCode *a8)
{
  uint64_t v12 = umsg_open(s, a3, a1, a6, a8);
  uint64_t v13 = umsg_vformat((uint64_t)v12, a4, a5, a7, a8);
  if (v12) {
    (*(void (**)(unsigned __int8 *))(*(void *)v12 + 8))(v12);
  }
  return v13;
}

void *u_parseMessage(const char *a1, UChar *a2, int a3, UChar *a4, uint64_t a5, UErrorCode *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return u_vparseMessage(a1, a2, a3, a4, a5, &a9, a6);
}

void *u_vparseMessage(const char *a1, UChar *s, int a3, UChar *a4, uint64_t a5, uint64_t *a6, UErrorCode *a7)
{
  uint64_t v11 = umsg_open(s, a3, a1, 0, a7);
  int v13 = 0;
  uint64_t result = umsg_vparse(v11, a4, a5, &v13, a6, (int *)a7);
  if (v11) {
    return (void *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v11 + 8))(v11);
  }
  return result;
}

void *umsg_vparse(void *result, UChar *s, uint64_t a3, int *a4, uint64_t *a5, int *a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a6 && *a6 <= 0)
  {
    uint64_t v7 = (uint64_t)result;
    if (result && s && (int)a3 >= -1 && a4)
    {
      if (a3 == -1) {
        a3 = u_strlen(s);
      }
      memset(v35, 0, sizeof(v35));
      icu::UnicodeString::UnicodeString((uint64_t)v35, (uint64_t)s, a3);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, _OWORD *, int *, int *))(*(void *)v7 + 192))(v7, v35, a4, a6);
      uint64_t v11 = v10;
      long long v31 = 0u;
      uint64_t v34 = 0;
      long long v33 = 0u;
      long long v32 = 0u;
      uint64_t v30 = (UChar *)&unk_1EDA47700;
      LOWORD(v31) = 2;
      uint64_t v12 = *a4;
      if ((int)v12 >= 1)
      {
        uint64_t v13 = 0;
        unint64_t v14 = (UChar ***)v10;
        do
        {
          switch(icu::Formattable::getType((icu::Formattable *)v14))
          {
            case 0u:
            case 1u:
              uint64_t v15 = a5++;
              BOOL v16 = (void *)*v15;
              if (!v16) {
                goto LABEL_23;
              }
              *BOOL v16 = v14[1];
              break;
            case 2u:
              BOOL v17 = a5++;
              uint64_t v18 = (_DWORD *)*v17;
              if (!v18) {
                goto LABEL_23;
              }
              *uint64_t v18 = v14[1];
              break;
            case 3u:
              uint64_t v19 = a5++;
              uint64_t v20 = *v19;
              if (!*v19) {
                goto LABEL_23;
              }
              icu::UnicodeString::operator=(&v30, v14[1]);
              if ((v31 & 0x8000u) == 0) {
                int v21 = (unsigned __int16)v31 >> 5;
              }
              else {
                int v21 = DWORD1(v31);
              }
              icu::UnicodeString::doExtract((char *)&v30, 0, v21, v20, 0);
              *(_WORD *)(v20 + 2 * v21) = 0;
              break;
            case 4u:
            case 6u:
              abort();
            case 5u:
              uint64_t v22 = a5++;
              uint64_t v23 = (void *)*v22;
              if (v23) {
                *uint64_t v23 = v14[1];
              }
              else {
LABEL_23:
              }
                *a6 = 1;
              break;
            default:
              break;
          }
          ++v13;
          uint64_t v12 = *a4;
          v14 += 14;
        }
        while (v13 < v12);
      }
      if (v11)
      {
        uint64_t v24 = (void *)(v11 - 16);
        uint64_t v25 = *(void *)(v11 - 8);
        if (v25)
        {
          uint64_t v26 = 112 * v25;
          uint64_t v27 = v11 - 112;
          do
          {
            icu::Formattable::~Formattable((icu::Formattable *)(v27 + v26));
            v26 -= 112;
          }
          while (v26);
        }
        icu::UMemory::operator delete[](v24);
      }
      icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v30);
      return icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v35);
    }
    else
    {
      *a6 = 1;
    }
  }
  return result;
}

void *u_parseMessageWithError(const char *a1, UChar *a2, int a3, UChar *a4, uint64_t a5, UParseError *a6, UErrorCode *a7, uint64_t a8, uint64_t a9)
{
  return u_vparseMessageWithError(a1, a2, a3, a4, a5, &a9, a6, a7);
}

void *u_vparseMessageWithError(const char *a1, UChar *s, int a3, UChar *a4, uint64_t a5, uint64_t *a6, UParseError *a7, UErrorCode *a8)
{
  uint64_t v12 = umsg_open(s, a3, a1, a7, a8);
  int v14 = 0;
  uint64_t result = umsg_vparse(v12, a4, a5, &v14, a6, (int *)a8);
  if (v12) {
    return (void *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v12 + 8))(v12);
  }
  return result;
}

uint64_t umsg_clone(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0;
  }
  if (*a2 > 0) {
    return 0;
  }
  if (a1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    if (result) {
      return result;
    }
    int v4 = 7;
  }
  else
  {
    int v4 = 1;
  }
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

void umsg_setLocale(uint64_t a1, const char *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    icu::Locale::Locale((icu::Locale *)v3, a2, 0, 0, 0);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 64))(a1, v3);
    icu::Locale::~Locale((icu::Locale *)v3);
  }
}

const char *umsg_getLocale(uint64_t a1)
{
  if (a1) {
    return *(const char **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 40);
  }
  else {
    return "";
  }
}

void *umsg_applyPattern(void *result, uint64_t a2, uint64_t a3, _OWORD *a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a5 && *a5 <= 0)
  {
    uint64_t v6 = result;
    if (!result || (!a2 ? (v7 = a3 == 0) : (v7 = 1), v7 ? (int v8 = 0) : (int v8 = 1), (int)a3 < -1 || v8))
    {
      *a5 = 1;
    }
    else
    {
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      if (a4) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = v11;
      }
      icu::UnicodeString::UnicodeString((uint64_t)v13, a2, a3);
      (*(void (**)(void *, unsigned char *, _OWORD *, int *))(*(void *)v6 + 88))(v6, v13, v9, a5);
      return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v13);
    }
  }
  return result;
}

uint64_t umsg_toPattern(uint64_t a1, char *a2, unsigned int a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a4 || *a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a1 || (a3 & 0x80000000) != 0 || !a2 && a3)
  {
    *a4 = 1;
    return 0xFFFFFFFFLL;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v16 = 0;
  long long v15 = 0u;
  uint64_t v12 = &unk_1EDA47700;
  LOWORD(v13) = 2;
  if (a2 || a3) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2, 0, a3);
  }
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 104))(a1, &v12);
  uint64_t v11 = (UChar *)a2;
  uint64_t v8 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a3, a4);
  uint64_t v10 = v11;
  icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
  return v8;
}

uint64_t umsg_format(uint64_t a1, UChar *a2, int a3, UErrorCode *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return umsg_vformat(a1, a2, a3, (double *)&a9, a4);
}

void *umsg_parse(void *a1, UChar *a2, uint64_t a3, int *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return umsg_vparse(a1, a2, a3, a4, &a9, a5);
}

uint64_t umsg_autoQuoteApostrophe(UChar *s, int32_t a2, uint64_t a3, int a4, int *a5)
{
  if (!a5 || *a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = s;
  if (!s || a2 < -1 || !a3 && a4 >= 1)
  {
    *a5 = 1;
    return 0xFFFFFFFFLL;
  }
  if (a2 == -1) {
    a2 = u_strlen(s);
  }
  if (a2 < 1)
  {
    uint64_t v18 = 0;
    goto LABEL_44;
  }
  LODWORD(v10) = 0;
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = a2;
  while (2)
  {
    int v15 = *v6++;
    int v14 = v15;
    switch(v12)
    {
      case 0:
        int v12 = v14 == 39;
        if (v14 == 123)
        {
          int v12 = 3;
          ++v11;
        }
        goto LABEL_31;
      case 1:
        if (v14 == 39)
        {
          int v12 = 0;
          goto LABEL_31;
        }
        if (v14 == 125 || v14 == 123)
        {
          int v12 = 2;
LABEL_31:
          int v17 = v10;
          goto LABEL_32;
        }
        if ((int)v10 < a4) {
          *(_WORD *)(a3 + 2 * (int)v10) = 39;
        }
        int v12 = 0;
        int v17 = v10 + 1;
LABEL_32:
        if (v17 < a4) {
          *(_WORD *)(a3 + 2 * v17) = v14;
        }
        uint64_t v10 = v17 + 1;
        if (--v13) {
          continue;
        }
        if ((v12 - 1) >= 2)
        {
          uint64_t v18 = v17 + 1;
        }
        else
        {
          uint64_t v18 = (v17 + 2);
          if ((int)v10 < a4) {
            *(_WORD *)(a3 + 2 * v10) = 39;
          }
        }
LABEL_44:
        return u_terminateUChars(a3, a4, v18, a5);
      case 2:
        int v12 = 2 * (v14 != 39);
        goto LABEL_31;
      case 3:
        int v16 = v11 - 1;
        if (v11 == 1) {
          int v12 = 0;
        }
        else {
          int v12 = 3;
        }
        if (v14 == 123) {
          ++v11;
        }
        if (v14 == 125) {
          int v11 = v16;
        }
        else {
          int v12 = 3;
        }
        goto LABEL_31;
      default:
        goto LABEL_31;
    }
  }
}

void *icu::UnescapeTransliterator::getStaticClassID(icu::UnescapeTransliterator *this)
{
  return &unk_1E9192B70;
}

void *sub_18CA15FF4()
{
  return &unk_1E9192B70;
}

void *sub_18CA16000()
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v27 = "H";
  unint64_t v0 = icu::UnicodeString::UnicodeString(v28, 1, &v27);
  icu::Transliterator::_registerFactory(v0, (uint64_t)sub_18CA16244, 0);
  int v2 = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v28);
  uint64_t v26 = "H";
  unint64_t v3 = icu::UnicodeString::UnicodeString(v2, 1, &v26);
  icu::Transliterator::_registerFactory(v3, (uint64_t)sub_18CA162B4, 0);
  unsigned int v5 = icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v28);
  uint64_t v25 = L"Hex-Any/C";
  unint64_t v6 = icu::UnicodeString::UnicodeString(v5, 1, &v25);
  icu::Transliterator::_registerFactory(v6, (uint64_t)sub_18CA16324, 0);
  uint64_t v8 = icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v28);
  uint64_t v24 = L"Hex-Any/XML";
  unint64_t v9 = icu::UnicodeString::UnicodeString(v8, 1, &v24);
  icu::Transliterator::_registerFactory(v9, (uint64_t)sub_18CA16394, 0);
  int v11 = icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v28);
  uint64_t v23 = L"Hex-Any/XML10";
  unint64_t v12 = icu::UnicodeString::UnicodeString(v11, 1, &v23);
  icu::Transliterator::_registerFactory(v12, (uint64_t)sub_18CA16404, 0);
  int v14 = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v28);
  uint64_t v22 = L"Hex-Any/Perl";
  unint64_t v15 = icu::UnicodeString::UnicodeString(v14, 1, &v22);
  icu::Transliterator::_registerFactory(v15, (uint64_t)sub_18CA16474, 0);
  int v17 = icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v28);
  int v21 = "H";
  unint64_t v18 = icu::UnicodeString::UnicodeString(v17, 1, &v21);
  icu::Transliterator::_registerFactory(v18, (uint64_t)sub_18CA164E4, 0);
  return icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v28);
}

icu::Transliterator *sub_18CA16244@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(void *)unsigned int v5 = &unk_1EDA54380;
    *((void *)v5 + 11) = sub_18CA16554(byte_18CA97FA4);
  }
  return v5;
}

icu::Transliterator *sub_18CA162B4@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(void *)unsigned int v5 = &unk_1EDA54380;
    *((void *)v5 + 11) = sub_18CA16554(byte_18CA97FB4);
  }
  return v5;
}

icu::Transliterator *sub_18CA16324@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(void *)unsigned int v5 = &unk_1EDA54380;
    *((void *)v5 + 11) = sub_18CA16554(byte_18CA97FC4);
  }
  return v5;
}

icu::Transliterator *sub_18CA16394@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(void *)unsigned int v5 = &unk_1EDA54380;
    *((void *)v5 + 11) = sub_18CA16554(byte_18CA97FE2);
  }
  return v5;
}

icu::Transliterator *sub_18CA16404@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(void *)unsigned int v5 = &unk_1EDA54380;
    *((void *)v5 + 11) = sub_18CA16554(byte_18CA97FF6);
  }
  return v5;
}

icu::Transliterator *sub_18CA16474@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(void *)unsigned int v5 = &unk_1EDA54380;
    *((void *)v5 + 11) = sub_18CA16554(byte_18CA98008);
  }
  return v5;
}

icu::Transliterator *sub_18CA164E4@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(void *)unsigned int v5 = &unk_1EDA54380;
    *((void *)v5 + 11) = sub_18CA16554(byte_18CA9801C);
  }
  return v5;
}

void *sub_18CA16554(char *a1)
{
  uint64_t v2 = 0;
  do
  {
    int v3 = *(__int16 *)&a1[v2];
    v2 += 2;
  }
  while (v3 != -1);
  size_t v4 = v2 & 0xFFFFFFFE;
  unsigned int v5 = uprv_malloc(v4);
  unint64_t v6 = v5;
  if (v5) {
    memcpy(v5, a1, v4);
  }
  return v6;
}

void sub_18CA165B8(void **a1)
{
  *a1 = &unk_1EDA54380;
  uprv_free(a1[11]);

  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
}

void sub_18CA16610(void **a1)
{
  *a1 = &unk_1EDA54380;
  uprv_free(a1[11]);
  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);

  icu::UMemory::operator delete(v2);
}

icu::Transliterator *sub_18CA1666C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, (UChar **)a1);
    *(void *)unsigned int v5 = &unk_1EDA54380;
    *((void *)v5 + 11) = sub_18CA16554(*(char **)(a1 + 88));
  }
  return v5;
}

uint64_t sub_18CA166D4(uint64_t result, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3[2];
  int v5 = a3[3];
  if ((int)v4 >= v5) {
    goto LABEL_48;
  }
  uint64_t v7 = result;
  do
  {
    uint64_t v8 = *(unsigned __int16 **)(v7 + 88);
    unsigned int v9 = *v8;
    if (v9 == 0xFFFF) {
      goto LABEL_39;
    }
    int v10 = 0;
    uint64_t v42 = v4;
    unsigned int v37 = v4;
    int v38 = v5;
    while (1)
    {
      int v11 = &v8[v10];
      unint64_t v12 = v11[1];
      LOWORD(v13) = v11[2];
      unsigned int v39 = v11[3];
      int v14 = v10 + 5;
      unsigned int v15 = v11[4];
      uint64_t v16 = v4;
      unsigned int v41 = v9;
      int v40 = v10 + 5;
      if (!v9) {
        break;
      }
      uint64_t v17 = 0;
      uint64_t v18 = 2 * v14;
      BOOL v19 = 1;
      unint64_t v20 = v9;
      while (1)
      {
        uint64_t v21 = v17;
        uint64_t v22 = v42 + v17;
        if (v17)
        {
          if ((int)v22 >= v5) {
            break;
          }
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v22);
        if (result == *(unsigned __int16 *)(*(void *)(v7 + 88) + v18 + 2 * v21))
        {
          uint64_t v17 = v21 + 1;
          BOOL v19 = v21 + 1 < v20;
          if (v20 != v21 + 1) {
            continue;
          }
        }
        if (v19) {
          goto LABEL_33;
        }
        uint64_t v16 = v42 + v21 + 1;
        int v5 = v38;
        goto LABEL_13;
      }
LABEL_32:
      if (a4)
      {
        LODWORD(v4) = v37;
        int v5 = v38;
        goto LABEL_48;
      }
LABEL_33:
      int v10 = v40 + v41 + v12;
      uint64_t v8 = *(unsigned __int16 **)(v7 + 88);
      unsigned int v9 = v8[v10];
      uint64_t v4 = v37;
      int v5 = v38;
      if (v9 == 0xFFFF) {
        goto LABEL_39;
      }
    }
LABEL_13:
    unsigned int v23 = 0;
    unsigned int v24 = 0;
    int v13 = (char)v13;
    while ((int)v16 < v5)
    {
      unsigned int v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v16);
      uint64_t result = u_digit(v25, v13);
      if ((result & 0x80000000) != 0) {
        goto LABEL_22;
      }
      if (v25 < 0x10000) {
        int v26 = 1;
      }
      else {
        int v26 = 2;
      }
      uint64_t v16 = (v26 + v16);
      unsigned int v23 = result + v23 * v13;
      if (v15 == ++v24)
      {
        unsigned int v24 = v15;
        goto LABEL_22;
      }
    }
    if (a4)
    {
      LODWORD(v4) = v37;
      break;
    }
LABEL_22:
    if (v24 < v39) {
      goto LABEL_33;
    }
    if (v12)
    {
      uint64_t v27 = 0;
      int v28 = v38;
      if ((int)v16 > v38) {
        int v28 = v16;
      }
      uint64_t v29 = (v28 - v16);
      BOOL v30 = 1;
      while (v29 != v27)
      {
        uint64_t v31 = v27;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72))(a2, v16 + v27);
        if (result == *(unsigned __int16 *)(*(void *)(v7 + 88) + 2 * (int)(v40 + v41) + 2 * v31))
        {
          uint64_t v27 = v31 + 1;
          BOOL v30 = v31 + 1 < v12;
          if (v12 != v31 + 1) {
            continue;
          }
        }
        if (v30) {
          goto LABEL_33;
        }
        uint64_t v16 = (v16 + v31 + 1);
        goto LABEL_35;
      }
      goto LABEL_32;
    }
LABEL_35:
    memset(v43, 0, sizeof(v43));
    icu::UnicodeString::UnicodeString((uint64_t)v43, v23);
    uint64_t v4 = v37;
    (*(void (**)(uint64_t, void, uint64_t, _OWORD *))(*(void *)a2 + 32))(a2, v37, v16, v43);
    LODWORD(v32) = WORD4(v43[0]) >> 5;
    if ((SWORD4(v43[0]) & 0x8000u) == 0) {
      unint64_t v32 = v32;
    }
    else {
      unint64_t v32 = HIDWORD(v43[0]);
    }
    int v5 = v37 + v38 - v16 + v32;
    uint64_t result = (uint64_t)icu::UnicodeString::~UnicodeString((void *)v32, (icu::UnicodeString *)v43);
LABEL_39:
    if ((int)v4 < v5)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v4);
      if (result < 0x10000) {
        int v33 = 1;
      }
      else {
        int v33 = 2;
      }
      uint64_t v4 = (v33 + v4);
    }
  }
  while ((int)v4 < v5);
LABEL_48:
  int v34 = v5 - a3[3] + a3[1];
  a3[2] = v4;
  a3[3] = v5;
  a3[1] = v34;
  return result;
}

void *icu::UnicodeNameTransliterator::getStaticClassID(icu::UnicodeNameTransliterator *this)
{
  return &unk_1E9192B71;
}

void *sub_18CA16AA0()
{
  return &unk_1E9192B71;
}

icu::Transliterator *sub_18CA16AAC(icu::Transliterator *a1, icu::UnicodeFilter *a2)
{
  _OWORD v7[8] = *(UChar **)MEMORY[0x1E4F143B8];
  unint64_t v6 = "A";
  icu::UnicodeString::UnicodeString(v7, 1, &v6);
  icu::Transliterator::Transliterator(a1, v7, a2);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
  *(void *)a1 = &unk_1EDA54430;
  return a1;
}

void sub_18CA16B70(icu::Transliterator *a1)
{
  icu::Transliterator::~Transliterator(a1);

  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18CA16B98@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x58, a2);
  if (result)
  {
    uint64_t result = icu::Transliterator::Transliterator(result, a1);
    *(void *)uint64_t result = &unk_1EDA54430;
  }
  return result;
}

char *sub_18CA16BE8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t result = (char *)uprv_getMaxCharNameLength();
  if (result && (v6 = (int)result, (uint64_t result = (char *)uprv_malloc((int)result)) != 0))
  {
    uint64_t v7 = result;
    uint64_t v8 = a3[2];
    int v9 = a3[3];
    memset(v28, 0, sizeof(v28));
    unsigned int v23 = L"\\N{";
    icu::UnicodeString::UnicodeString(v28, 0, &v23);
    for (pErrorCode = U_ZERO_ERROR; (int)v8 < v9; uint64_t v8 = (v12 + v8))
    {
      unsigned int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v8);
      if (v10 >= 0x10000) {
        int v11 = -2;
      }
      else {
        int v11 = -1;
      }
      if (v10 < 0x10000) {
        int v12 = 1;
      }
      else {
        int v12 = 2;
      }
      UErrorCode pErrorCode = U_ZERO_ERROR;
      uint64_t v13 = u_charName(v10, U_EXTENDED_CHAR_NAME, v7, v6, &pErrorCode);
      if ((int)v13 >= 1 && pErrorCode <= U_ZERO_ERROR)
      {
        int v15 = v13;
        unsigned int v16 = WORD4(v28[0]) >> 5;
        if (SWORD4(v28[0]) < 0) {
          unsigned int v16 = HIDWORD(v28[0]);
        }
        if (v16 >= 4) {
          WORD4(v28[0]) = BYTE8(v28[0]) & 0x1F | 0x60;
        }
        icu::UnicodeString::UnicodeString(v25, v7, v13, 0);
        if ((v26 & 0x8000u) == 0) {
          uint64_t v17 = v26 >> 5;
        }
        else {
          uint64_t v17 = v27;
        }
        uint64_t v18 = icu::UnicodeString::doAppend((uint64_t)v28, (const icu::UnicodeString *)v25, 0, v17);
        __int16 v24 = 125;
        icu::UnicodeString::doAppend(v18, (uint64_t)&v24, 0, 1);
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v25);
        (*(void (**)(uint64_t, uint64_t, void, _OWORD *))(*(void *)a2 + 32))(a2, v8, (v12 + v8), v28);
        int v12 = v15 + 4;
        v9 += v11 + v15 + 4;
      }
    }
    int v20 = v9 - a3[3] + a3[1];
    a3[2] = v8;
    a3[3] = v9;
    a3[1] = v20;
    uprv_free(v7);
    return (char *)icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v28);
  }
  else
  {
    a3[2] = a3[3];
  }
  return result;
}

uint64_t icu::units::ComplexUnitsConverter::ComplexUnitsConverter(uint64_t a1, icu::MeasureUnitImpl *this, int *a3, UErrorCode *a4)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 8;
  *(unsigned char *)(a1 + 28) = 0;
  uint64_t v7 = (int *)(a1 + 96);
  icu::MeasureUnitImpl::extractIndividualUnitsWithIndices((int *)this, a4, a1 + 96);
  if (*(int *)a4 <= 0)
  {
    uint64_t v8 = (_DWORD *)(**(void **)(a1 + 104) + 8);
    if (*(int *)(a1 + 96) >= 2)
    {
      uint64_t v9 = 1;
      do
      {
        int v10 = icu::units::UnitsConverter::compareTwoUnits((_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v9) + 8), v8, a3, (int *)a4);
        UErrorCode v11 = *a4;
        if (v10 >= 1 && v11 <= U_ZERO_ERROR)
        {
          uint64_t v8 = (_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v9) + 8);
        }
        else if (v11 >= U_ILLEGAL_ARGUMENT_ERROR)
        {
          return a1;
        }
        ++v9;
      }
      while (v9 < *v7);
    }
    icu::units::ComplexUnitsConverter::init(a1, (unint64_t)v8, (uint64_t)a3, (int *)a4);
  }
  return a1;
}

void icu::units::ComplexUnitsConverter::init(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uprv_sortArray(*(void *)(a1 + 104), *(unsigned int *)(a1 + 96), 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18CA178DC, a3, 0, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 96);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 8 * v8 - 8;
    while (1)
    {
      int v11 = *a4;
      if (v9)
      {
        if (v11 > 0) {
          return;
        }
        int v12 = sub_18CA17920((const void **)(a1 + 8), *(void *)(*(void *)(a1 + 104) + v9 - 8) + 8, *(void *)(*(void *)(a1 + 104) + v9) + 8, a3, (uint64_t)a4);
      }
      else
      {
        if (v11 > 0) {
          return;
        }
        int v12 = sub_18CA17920((const void **)(a1 + 8), a2, **(void **)(a1 + 104) + 8, a3, (uint64_t)a4);
      }
      BOOL v13 = *a4 <= 0 && v12 == 0;
      if (v13) {
        break;
      }
      if (*a4 <= 0)
      {
        BOOL v13 = v10 == v9;
        v9 += 8;
        if (!v13) {
          continue;
        }
      }
      return;
    }
    *a4 = 7;
  }
}

uint64_t icu::units::ComplexUnitsConverter::ComplexUnitsConverter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 96) = 0;
  uint64_t v7 = (int *)(a1 + 96);
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 8;
  *(unsigned char *)(a1 + 28) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(_DWORD *)(a1 + 112) = 8;
  *(unsigned char *)(a1 + 116) = 0;
  if (*a6 <= 0)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    memset(v22, 0, sizeof(v22));
    icu::MeasureUnitImpl::forIdentifier(a2, a3, a6, (uint64_t)v22);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    memset(v17, 0, sizeof(v17));
    icu::MeasureUnitImpl::forIdentifier(a4, a5, a6, (uint64_t)v17);
    icu::MeasureUnitImpl::extractIndividualUnitsWithIndices((int *)v17, (UErrorCode *)a6, (uint64_t)&v12);
    sub_18C950E84(v7, &v12);
    sub_18C986650((uint64_t)&v12);
    int v12 = 0;
    BOOL v13 = &v16;
    int v14 = 8;
    char v15 = 0;
    icu::units::getAllConversionRates((uint64_t)&v12, a6);
    icu::units::ComplexUnitsConverter::init(a1, (unint64_t)v22, (uint64_t)&v12, a6);
    sub_18C9864F0((uint64_t)&v12);
    if (BYTE12(v18)) {
      uprv_free((void *)v18);
    }
    sub_18C885AFC((uint64_t)v17 + 8);
    if (BYTE12(v23)) {
      uprv_free((void *)v23);
    }
    sub_18C885AFC((uint64_t)&v22[8]);
  }
  return a1;
}

uint64_t icu::units::ComplexUnitsConverter::ComplexUnitsConverter(uint64_t a1, unint64_t a2, icu::MeasureUnitImpl *this, uint64_t a4, UErrorCode *a5)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 8;
  *(unsigned char *)(a1 + 28) = 0;
  icu::MeasureUnitImpl::extractIndividualUnitsWithIndices((int *)this, a5, a1 + 96);
  if (*(int *)a5 <= 0) {
    icu::units::ComplexUnitsConverter::init(a1, a2, a4, (int *)a5);
  }
  return a1;
}

BOOL icu::units::ComplexUnitsConverter::greaterThanOrEqual(icu::units::UnitsConverter ***this, double a2, double a3)
{
  return icu::units::UnitsConverter::convert(*this[2], a2) >= a3;
}

void icu::units::ComplexUnitsConverter::convert(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 80) = 0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(void *)(a4 + 8) = a4 + 24;
  *(_DWORD *)(a4 + 16) = 8;
  BOOL v9 = a5 < 0.0;
  int v10 = *(_DWORD *)(a1 + 8);
  int v11 = v10 - 1;
  BOOL v12 = v10 > 1;
  if (v9 && v12) {
    double v13 = -a5;
  }
  else {
    double v13 = a5;
  }
  if (v9 && v12) {
    int v14 = -1;
  }
  else {
    int v14 = 1;
  }
  uint64_t v40 = 0;
  long long v38 = 0uLL;
  long long v39 = 0uLL;
  *(_OWORD *)unsigned int v37 = 0uLL;
  sub_18CA17648((uint64_t)v37, v11, *a3);
  if (*a3 <= 0)
  {
    bzero(v37[0], 8 * *(int *)(a1 + 8) - 8);
    uint64_t v15 = *(unsigned int *)(a1 + 8);
    if ((int)v15 >= 1)
    {
      for (unint64_t i = 0; i != v15; ++i)
      {
        double v17 = icu::units::UnitsConverter::convert(*(icu::units::UnitsConverter **)(*(void *)(a1 + 16) + 8 * i), v13);
        double v13 = v17;
        if (i < (v15 - 1))
        {
          BOOL isNaN = uprv_isNaN(v17);
          uint64_t v19 = vcvtmd_s64_f64(v13 * 1.0);
          if (isNaN) {
            uint64_t v19 = 0;
          }
          *((void *)v37[0] + i) = v19;
          if (v13 - (double)v19 >= 0.0) {
            double v13 = v13 - (double)v19;
          }
          else {
            double v13 = 0.0;
          }
        }
      }
    }
    double v41 = v13;
    icu::units::ComplexUnitsConverter::applyRounder(a1, (uint64_t *)v37, &v41, a2, a3);
    memset(v36, 0, sizeof(v36));
    sub_18CA17858((uint64_t)v36, *(_DWORD *)(a1 + 8), *a3);
    if (*a3 < 1)
    {
      uint64_t v20 = *(unsigned int *)(a1 + 8);
      if ((int)v20 >= 1)
      {
        unint64_t v21 = 0;
        double v22 = v41 * (double)v14;
        uint64_t v23 = v14;
        do
        {
          memset(v45, 0, sizeof(v45));
          if (v21 >= (v20 - 1)) {
            icu::Formattable::Formattable((icu::Formattable *)v45, v22);
          }
          else {
            icu::Formattable::Formattable((icu::Formattable *)v45, *((void *)v37[0] + v21) * v23);
          }
          int v28 = (icu::MeasureUnit *)icu::UMemory::operator new(v25, (icu::UMemory *)0x18, v24);
          if (v28)
          {
            icu::MeasureUnitImpl::copy((icu::MeasureUnitImpl *)(*(void *)(*(void *)(a1 + 104) + 8 * v21) + 8), (UErrorCode *)a3, (uint64_t)v42);
            icu::MeasureUnitImpl::build((icu::MeasureUnitImpl *)v42, (UErrorCode *)a3, (uint64_t)v28);
            if (v44) {
              uprv_free(v43[11]);
            }
            sub_18C885AFC((uint64_t)v43);
          }
          uint64_t v29 = (icu::Measure *)icu::UMemory::operator new(v27, (icu::UMemory *)0x80, v26);
          if (v29) {
            uint64_t v29 = (icu::Measure *)icu::Measure::Measure(v29, (const icu::Formattable *)v45, v28, (UErrorCode *)a3);
          }
          *(void *)(*(void *)&v36[0] + 8 * **(int **)(*(void *)(a1 + 104) + 8 * v2uhash_close(*((unsigned char **)this + 1)) = v29;
          icu::Formattable::~Formattable((icu::Formattable *)v45);
          ++v21;
        }
        while (v20 != v21);
        uint64_t v30 = *(unsigned int *)(a1 + 8);
        if ((int)v30 >= 1)
        {
          uint64_t v31 = 0;
          uint64_t v32 = 8 * v30;
          do
          {
            if (*a3 <= 0)
            {
              int v33 = sub_18CA17A28((const void **)a4, *(const icu::Measure **)(*(void *)&v36[0] + v31));
              if (*a3 <= 0 && v33 == 0) {
                *a3 = 7;
              }
            }
            uint64_t v35 = *(void *)(*(void *)&v36[0] + v31);
            if (v35) {
              (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
            }
            v31 += 8;
          }
          while (v32 != v31);
        }
      }
    }
    if (BYTE12(v36[0])) {
      uprv_free(*(void **)&v36[0]);
    }
  }
  if (BYTE4(v37[1])) {
    uprv_free(v37[0]);
  }
}

uint64_t sub_18CA17648(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 5;
  *(unsigned char *)(a1 + 12) = 0;
  if (a2 >= 6 && a3 <= 0)
  {
    int v5 = uprv_malloc(8 * a2);
    if (v5)
    {
      int32_t v6 = v5;
      if (*(unsigned char *)(a1 + 12)) {
        uprv_free(*(void **)a1);
      }
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(unsigned char *)(a1 + 12) = 1;
    }
  }
  return a1;
}

void icu::units::ComplexUnitsConverter::applyRounder(uint64_t a1, uint64_t *a2, double *a3, uint64_t a4, int *a5)
{
  if (!uprv_isInfinite(*a3))
  {
    BOOL isNaN = uprv_isNaN(*a3);
    if (a4)
    {
      if (!isNaN)
      {
        uint64_t v21 = 0;
        memset(v20, 0, sizeof(v20));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v20);
        icu::number::impl::DecimalQuantity::setToDouble((void **)v20, *a3);
        sub_18C97F148(a4, (icu::number::impl::DecimalQuantity *)v20, a5);
        if (*a5 <= 0)
        {
          double v11 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v20);
          *a3 = v11;
          int v12 = *(_DWORD *)(a1 + 8);
          int v13 = v12 - 1;
          if (v12 != 1)
          {
            uint64_t v14 = vcvtmd_s64_f64(icu::units::UnitsConverter::convertInverse(*(icu::units::UnitsConverter **)(*(void *)(a1 + 16) + 8 * v13), v11)* 1.0);
            if (v14 >= 1)
            {
              *a3 = *a3
                  - icu::units::UnitsConverter::convert(*(icu::units::UnitsConverter **)(*(void *)(a1 + 16) + 8 * v13), (double)v14);
              uint64_t v15 = (v12 - 2);
              uint64_t v16 = *a2;
              *(void *)(*a2 + 8 * (int)v15) += v14;
              if (v12 >= 3)
              {
                do
                {
                  uint64_t v17 = vcvtmd_s64_f64(icu::units::UnitsConverter::convertInverse(*(icu::units::UnitsConverter **)(*(void *)(a1 + 16) + 8 * v15), (double)*(uint64_t *)(v16 + 8 * v15))* 1.0);
                  if (v17 < 1) {
                    break;
                  }
                  double v18 = icu::units::UnitsConverter::convert(*(icu::units::UnitsConverter **)(*(void *)(a1 + 16) + 8 * v15), (double)v17);
                  uint64_t v16 = *a2;
                  *(void *)(*a2 + 8 * v15) -= llround(v18);
                  BOOL v19 = v15-- <= 1;
                  *(void *)(v16 + 8 * v15) += v17;
                }
                while (!v19);
              }
            }
          }
        }
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v20);
      }
    }
  }
}

uint64_t sub_18CA17858(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  if (a2 >= 5 && a3 <= 0)
  {
    int v5 = uprv_malloc(8 * a2);
    if (v5)
    {
      int32_t v6 = v5;
      if (*(unsigned char *)(a1 + 12)) {
        uprv_free(*(void **)a1);
      }
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(unsigned char *)(a1 + 12) = 1;
    }
  }
  return a1;
}

uint64_t sub_18CA178DC(int *a1, uint64_t a2, uint64_t a3)
{
  int v4 = 0;
  return -icu::units::UnitsConverter::compareTwoUnits((_DWORD *)(*(void *)a2 + 8), (_DWORD *)(*(void *)a3 + 8), a1, &v4);
}

uint64_t *sub_18CA17920(const void **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = *((_DWORD *)a1 + 4);
  uint64_t v11 = *(unsigned int *)a1;
  if (v11 == v10)
  {
    if (v10 == 8) {
      int v12 = 32;
    }
    else {
      int v12 = 2 * v10;
    }
    if (v12 < 1) {
      return 0;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8 * v12);
    if (!result) {
      return result;
    }
    uint64_t v14 = result;
    if (v10 >= 1)
    {
      int v15 = *((_DWORD *)a1 + 4);
      if (v15 >= v10) {
        int v15 = v10;
      }
      if (v15 >= v12) {
        int v15 = v12;
      }
      memcpy(result, a1[1], 8 * v15);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v14;
    *((_DWORD *)a1 + 4) = v12;
    uint64_t v11 = 1;
    *((unsigned char *)a1 + 20) = 1;
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x178, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::units::UnitsConverter::UnitsConverter(result, a2, a3, a4, a5);
  }
  uint64_t v16 = *(int *)a1;
  *(_DWORD *)a1 = v16 + 1;
  *((void *)a1[1] + v16) = result;
  return result;
}

uint64_t *sub_18CA17A28(const void **a1, const icu::Measure *a2)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = *(unsigned int *)a1;
  if (v5 == v4)
  {
    if (v4 == 8) {
      int v6 = 32;
    }
    else {
      int v6 = 2 * v4;
    }
    if (v6 < 1) {
      return 0;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8 * v6);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    if (v4 >= 1)
    {
      int v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = v6;
      }
      memcpy(result, a1[1], 8 * v9);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    uint64_t v5 = 1;
    *((unsigned char *)a1 + 20) = 1;
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::Measure::Measure((icu::Measure *)result, a2);
  }
  uint64_t v10 = *(int *)a1;
  *(_DWORD *)a1 = v10 + 1;
  *((void *)a1[1] + v10) = result;
  return result;
}

float64x2_t *icu::units::Factor::multiplyBy(float64x2_t *result, float64x2_t *a2)
{
  uint64_t v2 = 0;
  *uint64_t result = vmulq_f64(*a2, *result);
  do
  {
    *(_DWORD *)((char *)&result[1].f64[1] + v2 + 4) += *(_DWORD *)((char *)&a2[1].f64[1] + v2 + 4);
    v2 += 4;
  }
  while (v2 != 60);
  double v3 = a2[1].f64[0];
  if (v3 < result[1].f64[0]) {
    double v3 = result[1].f64[0];
  }
  result[1].f64[0] = v3;
  return result;
}

double *icu::units::Factor::divideBy(double *result, double *a2)
{
  uint64_t v2 = 0;
  double v3 = result[1];
  *uint64_t result = a2[1] * *result;
  result[1] = *a2 * v3;
  do
  {
    *(_DWORD *)((char *)result + v2 + 28) -= *(_DWORD *)((char *)a2 + v2 + 28);
    v2 += 4;
  }
  while (v2 != 60);
  double v4 = a2[2];
  if (v4 < result[2]) {
    double v4 = result[2];
  }
  result[2] = v4;
  return result;
}

void icu::units::Factor::power(icu::units::Factor *this, int a2)
{
  for (uint64_t i = 28; i != 88; i += 4)
    *(_DWORD *)((char *)this + i) *= a2;
  if (a2 >= 0) {
    int v5 = a2;
  }
  else {
    int v5 = -a2;
  }
  long double v6 = (double)v5;
  long double v7 = pow(*(long double *)this, (double)v5);
  *(long double *)this = v7;
  double v8 = pow(*((long double *)this + 1), v6);
  *((double *)this + 1) = v8;
  if (a2 < 0)
  {
    *(double *)this = v8;
    *((long double *)this + 1) = v7;
  }
}

long double icu::units::Factor::applyPrefix(uint64_t a1, int a2, long double result)
{
  if (a2 != 30)
  {
    int PrefixPower = umeas_getPrefixPower(a2);
    double PrefixBase = (double)(int)umeas_getPrefixBase(a2);
    if (PrefixPower >= 0) {
      int v7 = PrefixPower;
    }
    else {
      int v7 = -PrefixPower;
    }
    uint64_t result = pow(PrefixBase, (double)v7) * *(double *)(a1 + 8 * (PrefixPower >> 31));
    *(long double *)(a1 + 8 * (PrefixPower >> 3uhash_close(*((unsigned char **)this + 1)) = result;
  }
  return result;
}

void icu::units::Factor::substituteConstants(icu::units::Factor *this)
{
  for (uint64_t i = 0; i != 15; ++i)
  {
    double v3 = (char *)this + 4 * i;
    int v4 = *((_DWORD *)v3 + 7);
    if (v4)
    {
      if (v4 >= 0) {
        int v5 = *((_DWORD *)v3 + 7);
      }
      else {
        int v5 = -v4;
      }
      *((long double *)this + (v4 >> 3uhash_close(*((unsigned char **)this + 1)) = pow(dbl_18CA980B8[i], (double)v5)
                                                        * *((double *)this + (v4 >> 31));
      *((_DWORD *)v3 + 7) = 0;
    }
  }
}

void icu::units::addSingleFactorConstant(unsigned __int8 *a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "ft_to_m");
  if (icu::operator==(&v16, v15))
  {
    int v10 = *(_DWORD *)(a5 + 28) + a4 * a3;
LABEL_7:
    *(_DWORD *)(a5 + 28) = v10;
    return;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "ft2_to_m2");
  if (icu::operator==(&v16, v15))
  {
    int v10 = *(_DWORD *)(a5 + 28) + 2 * a4 * a3;
    goto LABEL_7;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "ft3_to_m3");
  if (icu::operator==(&v16, v15))
  {
    int v10 = *(_DWORD *)(a5 + 28) + 3 * a4 * a3;
    goto LABEL_7;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "in3_to_m3");
  if (icu::operator==(&v16, v15))
  {
    *(_DWORD *)(a5 + 28) += 3 * a4 * a3;
    double v11 = (double)(a4 * a3);
LABEL_12:
    double v12 = pow(1728.0, v11) * *(double *)(a5 + 8);
LABEL_13:
    *(double *)(a5 + 8) = v12;
    return;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "gal_to_m3");
  if (icu::operator==(&v16, v15))
  {
    *(_DWORD *)(a5 + 28) += 3 * a4 * a3;
    *(long double *)a5 = pow(231.0, (double)(a4 * a3)) * *(double *)a5;
    double v11 = (double)(a4 * a3);
    goto LABEL_12;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "gal_imp_to_m3");
  if (icu::operator==(&v16, v15))
  {
    *(_DWORD *)(a5 + 44) += a4 * a3;
  }
  else
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)v15, "G");
    if (icu::operator==(&v16, v15))
    {
      *(_DWORD *)(a5 + 40) += a4 * a3;
    }
    else
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)v15, "gravity");
      if (icu::operator==(&v16, v15))
      {
        *(_DWORD *)(a5 + 36) += a4 * a3;
      }
      else
      {
        icu::StringPiece::StringPiece((icu::StringPiece *)v15, "lb_to_kg");
        if (icu::operator==(&v16, v15))
        {
          *(_DWORD *)(a5 + 48) += a4 * a3;
        }
        else
        {
          icu::StringPiece::StringPiece((icu::StringPiece *)v15, "glucose_molar_mass");
          if (icu::operator==(&v16, v15))
          {
            *(_DWORD *)(a5 + 52) += a4 * a3;
          }
          else
          {
            icu::StringPiece::StringPiece((icu::StringPiece *)v15, "item_per_mole");
            if (icu::operator==(&v16, v15))
            {
              *(_DWORD *)(a5 + 56) += a4 * a3;
            }
            else
            {
              icu::StringPiece::StringPiece((icu::StringPiece *)v15, "meters_per_AU");
              if (icu::operator==(&v16, v15))
              {
                *(_DWORD *)(a5 + 60) += a4 * a3;
              }
              else
              {
                icu::StringPiece::StringPiece((icu::StringPiece *)v15, "PI");
                if (icu::operator==(&v16, v15))
                {
                  *(_DWORD *)(a5 + 32) += a4 * a3;
                }
                else
                {
                  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "sec_per_julian_year");
                  if (icu::operator==(&v16, v15))
                  {
                    *(_DWORD *)(a5 + 64) += a4 * a3;
                  }
                  else
                  {
                    icu::StringPiece::StringPiece((icu::StringPiece *)v15, "speed_of_light_meters_per_second");
                    if (icu::operator==(&v16, v15))
                    {
                      *(_DWORD *)(a5 + 68) += a4 * a3;
                    }
                    else
                    {
                      icu::StringPiece::StringPiece((icu::StringPiece *)v15, "sho_to_m3");
                      if (icu::operator==(&v16, v15))
                      {
                        *(_DWORD *)(a5 + 72) += a4 * a3;
                      }
                      else
                      {
                        icu::StringPiece::StringPiece((icu::StringPiece *)v15, "tsubo_to_m2");
                        if (icu::operator==(&v16, v15))
                        {
                          *(_DWORD *)(a5 + 76) += a4 * a3;
                        }
                        else
                        {
                          icu::StringPiece::StringPiece((icu::StringPiece *)v15, "shaku_to_m");
                          if (icu::operator==(&v16, v15))
                          {
                            *(_DWORD *)(a5 + 80) += a4 * a3;
                          }
                          else
                          {
                            icu::StringPiece::StringPiece((icu::StringPiece *)v15, "AMU");
                            if (icu::operator==(&v16, v15))
                            {
                              *(_DWORD *)(a5 + 84) += a4 * a3;
                            }
                            else
                            {
                              sub_18CA18190(v16, v17, a6);
                              double v14 = pow(v13, (double)a3);
                              if (a4 == -1)
                              {
                                double v12 = *(double *)(a5 + 8) * v14;
                                goto LABEL_13;
                              }
                              *(double *)a5 = *(double *)a5 * v14;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_18CA18190(unsigned __int8 *a1, int a2, _DWORD *a3)
{
  uint64_t v7 = 0;
  uint64_t v10 = 0;
  long long v6 = 0u;
  double v8 = "";
  int v9 = "";
  int v5 = 0;
  sub_18C916474((double *)&v6, a1, a2, &v5);
  if (v5 != a2) {
    *a3 = 3;
  }
}

uint64_t icu::units::extractCompoundBaseUnit@<X0>(uint64_t result@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(void *)(a4 + 16) = a4 + 32;
  *(_DWORD *)(a4 + 24) = 8;
  *(void *)(a4 + 96) = a4 + 109;
  *(_DWORD *)(a4 + 104) = 40;
  *(_DWORD *)(a4 + 152) = 0;
  if (*a3 <= 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(unsigned int *)(result + 8);
    if ((int)v6 >= 1)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t v10 = *(icu::SingleUnitImpl **)(*(void *)(v5 + 16) + 8 * i);
        SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(v10);
        icu::StringPiece::StringPiece((icu::StringPiece *)v17, SimpleUnitID);
        uint64_t result = icu::units::ConversionRates::extractConversionInfo(a2, v17[0], v17[1], a3);
        if (*a3 > 0) {
          break;
        }
        if (!result)
        {
          *a3 = 5;
          return result;
        }
        uint64_t v16 = 0;
        memset(v15, 0, sizeof(v15));
        icu::MeasureUnitImpl::forIdentifier(*(void *)(result + 72), *(unsigned int *)(result + 128), a3, (uint64_t)v18);
        LODWORD(v15[0]) = v19;
        *((void *)&v15[0] + 1) = v20;
        LODWORD(v15[1]) = v21;
        BYTE4(v15[1]) = v22;
        if (v20 == v23)
        {
          *((void *)&v15[0] + 1) = (char *)&v15[1] + 8;
          memcpy((char *)&v15[1] + 8, v23, 8 * v21);
        }
        else
        {
          uint64_t v20 = v23;
          int v21 = 8;
          char v22 = 0;
        }
        int v19 = 0;
        if (v24) {
          uprv_free(v23[8]);
        }
        sub_18C885AFC((uint64_t)&v19);
        if (SLODWORD(v15[0]) >= 1)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 8 * LODWORD(v15[0]);
          do
          {
            double v14 = *(const icu::SingleUnitImpl **)(*((void *)&v15[0] + 1) + v12);
            *((_DWORD *)v14 + 2) *= *((_DWORD *)v10 + 2);
            icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)a4, v14, (UErrorCode *)a3);
            if (*a3 >= 1) {
              return sub_18C885AFC((uint64_t)v15);
            }
            v12 += 8;
          }
          while (v13 != v12);
        }
        uint64_t result = sub_18C885AFC((uint64_t)v15);
      }
    }
  }
  return result;
}

uint64_t icu::units::extractConvertibility(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*a1 == 2 || *a2 == 2)
  {
    *a4 = 65804;
    return 2;
  }
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  memset(v35, 0, sizeof(v35));
  icu::units::extractCompoundBaseUnit((uint64_t)a1, a3, a4, (uint64_t)v35);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  memset(v30, 0, sizeof(v30));
  icu::units::extractCompoundBaseUnit((uint64_t)a2, a3, a4, (uint64_t)v30);
  if (*a4 <= 0)
  {
    uint64_t v26 = 0;
    memset(v28, 0, sizeof(v28));
    uint64_t v29 = 0;
    uint64_t v27 = (void *)v28 + 1;
    LODWORD(v28[0]) = 8;
    uint64_t v22 = 0;
    memset(v24, 0, sizeof(v24));
    uint64_t v25 = 0;
    uint64_t v23 = (char *)v24 + 8;
    LODWORD(v24[0]) = 8;
    uint64_t v6 = 1;
    sub_18CA18724(&v26, (unint64_t)v35, 1);
    sub_18CA18724(&v22, (unint64_t)v35, 1);
    sub_18CA18724(&v26, (unint64_t)v30, -1);
    sub_18CA18724(&v22, (unint64_t)v30, 1);
    if ((int)v26 >= 1)
    {
      if (*(_DWORD *)(*v27 + 4)) {
        goto LABEL_15;
      }
      uint64_t v9 = 1;
      do
      {
        unint64_t v10 = v9;
        if (v26 == v9) {
          break;
        }
      }
      while (!*(_DWORD *)(v27[v9++] + 4));
      if (v10 < v26)
      {
LABEL_15:
        if ((int)v22 < 1)
        {
          uint64_t v6 = 0;
LABEL_29:
          if (BYTE4(v24[0])) {
            uprv_free(v23);
          }
          int v18 = v26;
          if ((int)v26 >= 1)
          {
            uint64_t v19 = 0;
            do
            {
              uint64_t v20 = (void *)v27[v19];
              if (v20)
              {
                icu::UMemory::operator delete(v20);
                int v18 = v26;
              }
              ++v19;
            }
            while (v19 < v18);
          }
          if (BYTE4(v28[0])) {
            uprv_free(v27);
          }
          goto LABEL_38;
        }
        if (*(_DWORD *)(*(void *)v23 + 4))
        {
          uint64_t v6 = 2;
        }
        else
        {
          uint64_t v12 = 1;
          do
          {
            unint64_t v13 = v12;
            if (v22 == v12) {
              break;
            }
          }
          while (!*(_DWORD *)(*((void *)v23 + v12++) + 4));
          uint64_t v6 = 2 * (v13 < v22);
        }
      }
      else
      {
        uint64_t v6 = 1;
      }
    }
    int v15 = v22;
    if ((int)v22 >= 1)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = (void *)*((void *)v23 + v16);
        if (v17)
        {
          icu::UMemory::operator delete(v17);
          int v15 = v22;
        }
        ++v16;
      }
      while (v16 < v15);
    }
    goto LABEL_29;
  }
  uint64_t v6 = 2;
LABEL_38:
  if (BYTE12(v31)) {
    uprv_free((void *)v31);
  }
  sub_18C885AFC((uint64_t)v30 + 8);
  if (BYTE12(v36)) {
    uprv_free((void *)v36);
  }
  sub_18C885AFC((uint64_t)v35 + 8);
  return v6;
}

uint64_t *sub_18CA18724(uint64_t *result, unint64_t a2, int a3)
{
  if (*(int *)(a2 + 8) >= 1)
  {
    uint64_t v5 = result;
    for (uint64_t i = 0; i < *(int *)(a2 + 8); ++i)
    {
      uint64_t v7 = *(int **)(*(void *)(a2 + 16) + 8 * i);
      int v8 = *v7;
      int v9 = v7[2];
      int v10 = *(_DWORD *)v5;
      if (*(int *)v5 >= 1)
      {
        uint64_t v11 = v5[1];
        uint64_t v12 = *(unsigned int *)v5;
        while (**(_DWORD **)v11 != v8)
        {
          v11 += 8;
          if (!--v12) {
            goto LABEL_7;
          }
        }
        *(_DWORD *)(*(void *)v11 + 4) += v9 * a3;
        continue;
      }
LABEL_7:
      uint64_t v13 = *((unsigned int *)v5 + 4);
      if (v10 == v13)
      {
        if (v10 == 8) {
          int v14 = 32;
        }
        else {
          int v14 = 2 * v10;
        }
        if (v14 < 1) {
          continue;
        }
        uint64_t result = (uint64_t *)uprv_malloc(8 * v14);
        if (!result) {
          continue;
        }
        int v15 = result;
        if (v10 >= 1)
        {
          int v16 = *((_DWORD *)v5 + 4);
          if (v16 >= v10) {
            int v16 = v10;
          }
          if (v16 >= v14) {
            int v16 = v14;
          }
          memcpy(result, (const void *)v5[1], 8 * v16);
        }
        if (*((unsigned char *)v5 + 20)) {
          uprv_free((void *)v5[1]);
        }
        v5[1] = (uint64_t)v15;
        *((_DWORD *)v5 + 4) = v14;
        uint64_t v13 = 1;
        *((unsigned char *)v5 + 20) = 1;
      }
      uint64_t result = icu::UMemory::operator new((uint64_t *)v13, (icu::UMemory *)8, a2);
      if (result)
      {
        *(_DWORD *)uint64_t result = v8;
        *((_DWORD *)result + 1) = v9 * a3;
      }
      uint64_t v17 = *(int *)v5;
      *(_DWORD *)uint64_t v5 = v17 + 1;
      *(void *)(v5[1] + 8 * v17) = result;
    }
  }
  return result;
}

uint64_t icu::units::UnitsConverter::UnitsConverter(uint64_t a1, icu::MeasureUnitImpl *this, icu::MeasureUnitImpl *a3, int *a4, UErrorCode *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a1 + 8;
  icu::MeasureUnitImpl::copy(this, a5, (uint64_t)&v14);
  icu::MeasureUnitImpl::copy(a3, a5, (uint64_t)&v11);
  sub_18CA1917C(v9, &v14, &v11);
  if (v13) {
    uprv_free(v12[11]);
  }
  sub_18C885AFC((uint64_t)v12);
  if (v16) {
    uprv_free(v15[11]);
  }
  sub_18C885AFC((uint64_t)v15);
  icu::units::UnitsConverter::init(a1, a4, (int *)a5);
  return a1;
}

void icu::units::UnitsConverter::init(uint64_t a1, int *a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v4 = a1 + 16;
    if (*(_DWORD *)(a1 + 16) == 2) {
      goto LABEL_4;
    }
    uint64_t v5 = (_DWORD *)(a1 + 176);
    if (*(_DWORD *)(a1 + 176) == 2) {
      goto LABEL_4;
    }
    int Convertibility = icu::units::extractConvertibility((_DWORD *)(a1 + 16), v5, a2, a3);
    if (*a3 <= 0)
    {
      if (Convertibility == 2)
      {
LABEL_4:
        *a3 = 65804;
        return;
      }
      sub_18CA18B8C(v4 - 8, v4, (uint64_t)v5, Convertibility, a2, a3);
    }
  }
}

uint64_t icu::units::UnitsConverter::UnitsConverter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1 + 8;
  icu::MeasureUnitImpl::forIdentifier(a2, a3, a6, (uint64_t)&v15);
  icu::MeasureUnitImpl::forIdentifier(a4, a5, a6, (uint64_t)&v12);
  sub_18CA1917C(v10, &v15, &v12);
  if (v14) {
    uprv_free(v13[11]);
  }
  sub_18C885AFC((uint64_t)v13);
  if (v17) {
    uprv_free((void *)v16[11]);
  }
  sub_18C885AFC((uint64_t)v16);
  if (*a6 <= 0)
  {
    uint64_t v15 = 0;
    memset(&v16[1], 0, 72);
    v16[0] = &v16[2];
    LODWORD(v16[1]) = 8;
    icu::units::getAllConversionRates((uint64_t)&v15, a6);
    icu::units::UnitsConverter::init(a1, (int *)&v15, a6);
    sub_18C9864F0((uint64_t)&v15);
  }
  return a1;
}

void sub_18CA18B8C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5, int *a6)
{
  __asm { FMOV            V0.2D, #1.0 }
  float64x2_t v32 = _Q0;
  uint64_t v33 = 0;
  memset(v34, 0, sizeof(v34));
  long long v35 = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  float64x2_t v26 = 0u;
  sub_18CA18E40(a2, a5, a6, (uint64_t)&v26);
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  float64x2_t v20 = 0u;
  sub_18CA18E40(a3, a5, a6, (uint64_t)&v20);
  icu::units::Factor::multiplyBy(&v32, &v26);
  if (a4 == 1) {
    icu::units::Factor::divideBy(v32.f64, v20.f64);
  }
  else {
    icu::units::Factor::multiplyBy(&v32, &v20);
  }
  icu::units::Factor::substituteConstants((icu::units::Factor *)&v32);
  *(float64x2_t *)(a1 + 328) = v32;
  if (*a6 <= 0 && !*(_DWORD *)a2)
  {
    if (!*(_DWORD *)(a2 + 8) || (uint64_t v17 = **(void **)(a2 + 16), *(_DWORD *)(v17 + 8) == 1) && *(_DWORD *)(v17 + 4) == 30)
    {
      if (!*(_DWORD *)a3)
      {
        if (!*(_DWORD *)(a3 + 8)
          || (uint64_t v18 = **(void **)(a3 + 16), *(_DWORD *)(v18 + 8) == 1) && *(_DWORD *)(v18 + 4) == 30)
        {
          double v19 = *(double *)&v21 * v20.f64[1] / v20.f64[0];
          *(double *)(a1 + 344) = *(double *)&v27 * v26.f64[1] / v26.f64[0];
          *(double *)(a1 + 352) = v19;
        }
      }
    }
  }
  *(unsigned char *)(a1 + 360) = a4 == 0;
}

uint64_t icu::units::UnitsConverter::compareTwoUnits(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  if (*a4 > 0) {
    return 0;
  }
  if (*a1 == 2 || *a2 == 2) {
    goto LABEL_8;
  }
  char Convertibility = icu::units::extractConvertibility(a1, a2, a3, a4);
  if (*a4 > 0) {
    return 0;
  }
  if ((Convertibility & 1) == 0)
  {
LABEL_8:
    uint64_t result = 0;
    *a4 = 65804;
  }
  else
  {
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
    sub_18CA18E40((uint64_t)a1, a3, a4, (uint64_t)v15);
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    sub_18CA18E40((uint64_t)a2, a3, a4, (uint64_t)v13);
    icu::units::Factor::substituteConstants((icu::units::Factor *)v15);
    icu::units::Factor::substituteConstants((icu::units::Factor *)v13);
    double v11 = *(double *)v15 / *((double *)v15 + 1) - *(double *)v13 / *((double *)v13 + 1);
    if (v11 >= 0.0) {
      unsigned int v12 = 0;
    }
    else {
      unsigned int v12 = -1;
    }
    if (v11 > 0.0) {
      return 1;
    }
    else {
      return v12;
    }
  }
  return result;
}

void sub_18CA18E40(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  __asm { FMOV            V0.2D, #1.0 }
  float64x2_t v31 = _Q0;
  *(float64x2_t *)a4 = _Q0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(_OWORD *)(a4 + 44) = 0u;
  *(_OWORD *)(a4 + 60) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 28) = 0u;
  uint64_t v29 = *(unsigned int *)(a1 + 8);
  if ((int)v29 >= 1)
  {
    uint64_t v10 = 0;
    while (1)
    {
      int v41 = 0;
      uint64_t v40 = 0;
      double v11 = *(uint64_t **)(*(void *)(a1 + 16) + 8 * v10);
      int v12 = *((_DWORD *)v11 + 2);
      uint64_t v40 = *v11;
      int v41 = v12;
      SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID((icu::SingleUnitImpl *)&v40);
      icu::StringPiece::StringPiece((icu::StringPiece *)v34, SimpleUnitID);
      uint64_t ConversionInfo = icu::units::ConversionRates::extractConversionInfo(a2, v34[0], v34[1], a3);
      if (*a3 > 0) {
        break;
      }
      uint64_t v15 = ConversionInfo;
      if (!ConversionInfo)
      {
        *a3 = 5;
        return;
      }
      uint64_t v16 = *(unsigned __int8 **)(ConversionInfo + 136);
      uint64_t v17 = *(unsigned int *)(ConversionInfo + 192);
      uint64_t v42 = v16;
      uint64_t v43 = v17;
      float64x2_t v35 = v31;
      double v36 = 0.0;
      memset(v37, 0, sizeof(v37));
      long long v38 = 0u;
      memset(v39, 0, sizeof(v39));
      if ((int)v17 >= 1)
      {
        uint64_t v18 = 0;
        int v19 = 0;
        int v20 = 1;
        do
        {
          int v21 = v16[v18];
          if (v21 == 47 || v21 == 42)
          {
            icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, v19, v18 - v19);
            sub_18CA19200((uint64_t)&v35, v44, v45, v20, a3);
            int v19 = v18 + 1;
          }
          else if (v17 - 1 == v18)
          {
            icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, v19, v17);
            sub_18CA19200((uint64_t)&v35, v44, v45, v20, a3);
          }
          if (v16[v18] == 47) {
            int v20 = -1;
          }
          ++v18;
        }
        while (v17 != v18);
      }
      long long v22 = *(unsigned __int8 **)(v15 + 200);
      uint64_t v23 = *(unsigned int *)(v15 + 256);
      uint64_t v42 = v22;
      uint64_t v43 = v23;
      if ((int)v23 < 1)
      {
LABEL_20:
        sub_18CA18190(v22, v23, a3);
      }
      else
      {
        uint64_t v24 = 0;
        while (v22[v24] != 47)
        {
          if (v23 == ++v24) {
            goto LABEL_20;
          }
        }
        icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, 0, v24);
        sub_18CA18190(v44, v45, a3);
        double v27 = v26;
        icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, v24 + 1, 0x7FFFFFFF);
        sub_18CA18190(v44, v45, a3);
        double v25 = v27 / v28;
      }
      double v36 = v25;
      if (*a3 <= 0)
      {
        icu::units::Factor::applyPrefix((uint64_t)&v35, SHIDWORD(v40), v25);
        icu::units::Factor::power((icu::units::Factor *)&v35, v41);
        icu::units::Factor::multiplyBy((float64x2_t *)a4, &v35);
        if (++v10 != v29) {
          continue;
        }
      }
      return;
    }
  }
}

double icu::units::UnitsConverter::convert(icu::units::UnitsConverter *this, double a2)
{
  double result = (*((double *)this + 44) + a2) * (*((double *)this + 42) / *((double *)this + 43)) - *((double *)this + 45);
  if (*((unsigned char *)this + 368))
  {
    if (result == 0.0) {
      return uprv_getInfinity();
    }
    else {
      return 1.0 / result;
    }
  }
  return result;
}

double icu::units::UnitsConverter::convertInverse(icu::units::UnitsConverter *this, double a2)
{
  if (*((unsigned char *)this + 368))
  {
    if (a2 == 0.0) {
      return uprv_getInfinity();
    }
    a2 = 1.0 / a2;
  }
  return (a2 + *((double *)this + 45)) * (*((double *)this + 43) / *((double *)this + 42)) - *((double *)this + 44);
}

double icu::units::UnitsConverter::getConversionInfo@<D0>(icu::units::UnitsConverter *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  double result = *((double *)this + 42) / *((double *)this + 43);
  double v3 = -(*((double *)this + 45) - *((double *)this + 44) * result);
  *(double *)a2 = result;
  *(double *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = *((unsigned char *)this + 368);
  return result;
}

uint64_t sub_18CA1917C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)(a1 + 8) = *a2;
  sub_18C94E4D4(a1 + 16, (uint64_t)(a2 + 2));
  icu::CharString::CharString(a1 + 104, a2 + 24);
  *(_DWORD *)(a1 + 168) = *a3;
  sub_18C94E4D4(a1 + 176, (uint64_t)(a3 + 2));
  icu::CharString::CharString(a1 + 264, a3 + 24);
  *(void *)(a1 + 328) = 0x3FF0000000000000;
  *(void *)(a1 + 336) = 0x3FF0000000000000;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  return a1;
}

void sub_18CA19200(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, _DWORD *a5)
{
  unsigned int v7 = a3;
  int v8 = a2;
  v13[0] = a2;
  v13[1] = a3;
  if ((int)a3 < 1)
  {
LABEL_5:
    int v11 = 1;
  }
  else
  {
    uint64_t v10 = 0;
    while (a2[v10] != 94)
    {
      if (a3 == ++v10) {
        goto LABEL_5;
      }
    }
    icu::StringPiece::StringPiece((uint64_t)&v14, (const icu::StringPiece *)v13, 0, v10);
    int v8 = v14;
    unsigned int v7 = v15;
    icu::StringPiece::StringPiece((uint64_t)&v14, (const icu::StringPiece *)v13, v10 + 1, 0x7FFFFFFF);
    sub_18CA18190(v14, v15, a5);
    int v11 = (int)v12;
  }
  icu::units::addSingleFactorConstant(v8, v7, v11, a4, a1, a5);
}

uint64_t icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata(uint64_t a1, const char *a2, int a3, const char *a4, int a5, const char *a6, int a7, int a8, int a9, UErrorCode *a10)
{
  *(void *)(a1 + 8) = a1 + 21;
  *(_DWORD *)(a1 + 16) = 40;
  *(_WORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a1 + 85;
  *(_DWORD *)(a1 + 80) = 40;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a1 + 149;
  *(_DWORD *)(a1 + 144) = 40;
  *(_WORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  icu::CharString::append((icu::CharString *)(a1 + 8), a2, a3, a10);
  icu::CharString::append((icu::CharString *)(a1 + 72), a4, a5, a10);
  icu::CharString::append((icu::CharString *)(a1 + 136), a6, a7, a10);
  *(_DWORD *)(a1 + 200) = a8;
  *(_DWORD *)(a1 + 204) = a9;
  return a1;
}

{
  return icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t icu::units::UnitPreferenceMetadata::compareTo(const char **a1, const char **a2)
{
  uint64_t result = strcmp(a1[1], a2[1]);
  if (!result)
  {
    uint64_t result = strcmp(a1[9], a2[9]);
    if (!result)
    {
      uint64_t v5 = a1[17];
      uint64_t v6 = a2[17];
      return strcmp(v5, v6);
    }
  }
  return result;
}

uint64_t icu::units::UnitPreferenceMetadata::compareTo(const char **a1, const char **a2, unsigned char *a3, unsigned char *a4, unsigned char *a5)
{
  uint64_t result = strcmp(a1[1], a2[1]);
  if (!result)
  {
    *a3 = 1;
    uint64_t result = strcmp(a1[9], a2[9]);
    if (!result)
    {
      *a4 = 1;
      uint64_t result = strcmp(a1[17], a2[17]);
      if (!result) {
        *a5 = 1;
      }
    }
  }
  return result;
}

void icu::units::getAllConversionRates(uint64_t a1, int *a2)
{
  uint64_t v4 = ures_openDirect(0, (uint64_t)"units", (uint64_t)a2);
  v5[0] = &unk_1EDA544E0;
  v5[1] = a1;
  ures_getAllItemsWithFallback(v4, "convertUnits", (uint64_t)v5, a2);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v5);
  if (v4) {
    ures_close(v4);
  }
}

uint64_t icu::units::ConversionRates::extractConversionInfo(int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4)
{
  v13[0] = a2;
  v13[1] = a3;
  uint64_t v5 = *a1;
  if (v5)
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(*((void *)a1 + 1) + 8 * v7);
      uint64_t v9 = *(unsigned __int8 **)(v8 + 8);
      uint64_t v10 = (unsigned __int8 *)*(unsigned int *)(v8 + 64);
      v12[0] = v9;
      v12[1] = v10;
      if (icu::operator==(v12, v13)) {
        return *(void *)(*((void *)a1 + 1) + 8 * v7);
      }
      if (v5 == ++v7) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = 0;
    *a4 = 5;
  }
  return result;
}

icu::units::UnitPreferences *icu::units::UnitPreferences::UnitPreferences(icu::units::UnitPreferences *this, UErrorCode *a2)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = (char *)this + 24;
  *((_DWORD *)this + 4) = 8;
  *((unsigned char *)this + 20) = 0;
  *((_DWORD *)this + 22) = 0;
  uint64_t v4 = (char *)this + 88;
  *((void *)this + 12) = (char *)this + 112;
  *((_DWORD *)this + 26) = 8;
  *((unsigned char *)this + 108) = 0;
  uint64_t v5 = ures_openDirect(0, (uint64_t)"units", (uint64_t)a2);
  v7[0] = &unk_1EDA54528;
  v7[1] = v4;
  v7[2] = this;
  ures_getAllItemsWithFallback(v5, "unitPreferenceData", (uint64_t)v7, (int *)a2);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v7);
  if (v5) {
    ures_close(v5);
  }
  return this;
}

void sub_18CA196B4(uint64_t a1@<X0>, const char *a2@<X1>, int a3@<W2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a5 + 8) = 0u;
  *(void *)(a5 + 56) = 0;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(void *)a5 = a5 + 13;
  *(_DWORD *)(a5 + 8) = 40;
  *(_DWORD *)(a5 + 56) = 0;
  if (*(int *)a4 <= 0)
  {
    v10[0] = 0;
    v10[1] = 0;
    icu::CharStringByteSink::CharStringByteSink(v10, a5);
    icu::Locale::getKeywordValue(a1, a2, a3, (uint64_t)v10, a4);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v10);
    if (*(int *)a4 <= 0 && !*(_DWORD *)(a5 + 56)) {
      *a4 = U_MISSING_RESOURCE_ERROR;
    }
  }
}

void icu::units::UnitPreferences::getPreferencesFor(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, UErrorCode *a7@<X6>, uint64_t a8@<X8>)
{
  int v11 = (const void **)a8;
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  signed int v83 = (const char *)a2;
  uint64_t v84 = a3;
  unsigned int v81 = (const char *)a4;
  uint64_t v82 = a5;
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(void *)(a8 + 80) = 0;
  *(void *)(a8 + 8) = a8 + 24;
  *(_DWORD *)(a8 + 16) = 8;
  int v80 = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v78, "temperature");
  if (icu::StringPiece::compare((uint64_t)&v83, v78, v79, v12)) {
    goto LABEL_28;
  }
  long long v100 = 0u;
  long long v101 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v99 = 0u;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v76, "mu");
  sub_18CA196B4(a6, v76, v77, (UErrorCode *)&v80, (uint64_t)__s1);
  if (v80 > 0) {
    goto LABEL_3;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)&__s2, "fahrenhe");
  if (DWORD2(v101) == v75 && (!v75 || !memcmp(__s1[0], __s2, (int)v75)))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v72, "fahrenheit");
    *(void *)&long long v88 = (char *)&v88 + 13;
    DWORD2(v88) = 40;
    WORD6(v88) = 0;
    DWORD2(v91) = 0;
    icu::CharString::append((icu::CharString *)&v88, v72, v73, a7);
    icu::CharString::operator=((uint64_t)__s1, (uint64_t)&v88);
    if (BYTE12(v88)) {
      uprv_free((void *)v88);
    }
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)&v70, "celsius");
  int v15 = v71[0];
  if (DWORD2(v101) == v71[0])
  {
    uint64_t v16 = (const char *)__s1[0];
    if (!v71[0] || !memcmp(__s1[0], v70, v71[0])) {
      goto LABEL_18;
    }
  }
  if ((icu::StringPiece::StringPiece((icu::StringPiece *)&v68, "fahrenheit"), int v15 = v69, DWORD2(v101) == v69)
    && ((uint64_t v16 = (const char *)__s1[0], !v69) || !memcmp(__s1[0], v68, (int)v69))
    || (icu::StringPiece::StringPiece((icu::StringPiece *)&v66, "kelvin"), int v15 = v67, DWORD2(v101) == v67)
    && ((uint64_t v16 = (const char *)__s1[0], !v67) || !memcmp(__s1[0], v66, (int)v67)))
  {
LABEL_18:
    *(void *)&long long v88 = 0;
    long long v89 = 0u;
    *((void *)&v93 + 1) = 2;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v94 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    *((void *)&v88 + 1) = (char *)&v89 + 5;
    LODWORD(v89) = 40;
    *(void *)&long long v92 = 0;
    *((void *)&v92 + 1) = 0x3FF0000000000000;
    *(void *)&long long v93 = &unk_1EDA47700;
    icu::CharString::append((icu::CharString *)((char *)&v88 + 8), v16, v15, a7);
    uint64_t v17 = *(unsigned int *)a7;
    if ((int)v17 <= 0)
    {
      uint64_t v18 = sub_18CA1B358(v11, (unint64_t)&v88);
      uint64_t v17 = *(unsigned int *)a7;
      if ((int)v17 <= 0 && !v18)
      {
        uint64_t v17 = 7;
        *a7 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v93);
    if (BYTE4(v89)) {
      uprv_free(*((void **)&v88 + 1));
    }
    int v14 = 0;
    char v13 = 1;
  }
  else
  {
LABEL_3:
    char v13 = 0;
    int v14 = 1;
  }
  if (BYTE4(__s1[1])) {
    uprv_free(__s1[0]);
  }
  if (v14)
  {
LABEL_28:
    *(void *)long long __s = 0;
    ulocimp_getRegionForSupplementalData(*(char **)(a6 + 40), 0, __s, 8, (int *)a7);
    long long v107 = 0u;
    memset(v106, 0, sizeof(v106));
    icu::StringPiece::StringPiece((icu::StringPiece *)&v64, __s);
    *(void *)&v106[0] = (unint64_t)v106 | 0xD;
    DWORD2(v106[0]) = 40;
    WORD6(v106[0]) = 0;
    DWORD2(v107) = 0;
    icu::CharString::append((icu::CharString *)v106, v64, v65, a7);
    int v63 = 0;
    long long v105 = 0u;
    memset(v104, 0, sizeof(v104));
    icu::StringPiece::StringPiece((icu::StringPiece *)&v61, "measure");
    sub_18CA196B4(a6, v61, v62, (UErrorCode *)&v63, (uint64_t)v104);
    if (v63 >= 1)
    {
      int v63 = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v59, "ms");
      sub_18CA196B4(a6, v59, v60, (UErrorCode *)&v63, (uint64_t)&v88);
      icu::CharString::operator=((uint64_t)v104, (uint64_t)&v88);
      if (BYTE12(v88)) {
        uprv_free((void *)v88);
      }
      if (v63 > 0) {
        goto LABEL_41;
      }
    }
    if ((icu::StringPiece::StringPiece((icu::StringPiece *)&v57, "metric"), DWORD2(v105) == v58)
      && (!v58 || !memcmp(*(const void **)&v104[0], v57, (int)v58))
      || (icu::StringPiece::StringPiece((icu::StringPiece *)&v55, "ussystem"), DWORD2(v105) == v56)
      && (!v56 || !memcmp(*(const void **)&v104[0], v55, (int)v56))
      || (icu::StringPiece::StringPiece((icu::StringPiece *)&v53, "uksystem"), DWORD2(v105) == v54)
      && (!v54 || !memcmp(*(const void **)&v104[0], v53, (int)v54)))
    {
      int v19 = 1;
    }
    else
    {
LABEL_41:
      int v19 = 0;
    }
    int v20 = sub_18CA1A054(a1, v83, v84, v81, v82, *(const char **)&v106[0], SDWORD2(v107), a7);
    if (*(int *)a7 > 0) {
      goto LABEL_93;
    }
    uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 8 * v20);
    if (v19)
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v51, "uksystem");
      if (DWORD2(v105) == v52
        && (!v52 || !memcmp(*(const void **)&v104[0], v51, (int)v52))
        && (icu::StringPiece::StringPiece((icu::StringPiece *)&v88, "mass"),
            icu::operator==((unsigned __int8 **)&v83, (unsigned __int8 **)&v88))
        && (icu::StringPiece::StringPiece((icu::StringPiece *)__s1, "person"),
            icu::operator==((unsigned __int8 **)&v81, (unsigned __int8 **)__s1)))
      {
LABEL_69:
        DWORD2(v107) = 0;
        **(unsigned char **)&v106[0] = 0;
        icu::StringPiece::StringPiece((icu::StringPiece *)&v43, "ussystem");
        if (DWORD2(v105) == v44 && (!v44 || !memcmp(*(const void **)&v104[0], v43, (int)v44)))
        {
          uint64_t v29 = "US";
          long long v30 = v42;
          float64x2_t v31 = (icu::StringPiece *)v42;
        }
        else
        {
          icu::StringPiece::StringPiece((icu::StringPiece *)&v40, "uksystem");
          if (DWORD2(v105) == v41 && (!v41 || !memcmp(*(const void **)&v104[0], v40, (int)v41)))
          {
            uint64_t v29 = "GB";
            long long v30 = v39;
            float64x2_t v31 = (icu::StringPiece *)v39;
          }
          else
          {
            uint64_t v29 = "001";
            long long v30 = v38;
            float64x2_t v31 = (icu::StringPiece *)v38;
          }
        }
        icu::StringPiece::StringPiece(v31, v29);
        icu::CharString::append((icu::CharString *)v106, *(const char **)v30, *((_DWORD *)v30 + 2), a7);
        int v32 = sub_18CA1A054(a1, v83, v84, v81, v82, *(const char **)&v106[0], SDWORD2(v107), a7);
        if (*(int *)a7 > 0)
        {
LABEL_93:
          if (BYTE12(v104[0])) {
            uprv_free(*(void **)&v104[0]);
          }
          if (BYTE12(v106[0])) {
            uprv_free(*(void **)&v106[0]);
          }
          return;
        }
        uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 8 * v32);
      }
      else
      {
        long long v37 = v11;
        __s1[0] = 0;
        long long v99 = 0u;
        uint64_t v103 = 0;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v100 = 0u;
        __s1[1] = (char *)&v99 + 8;
        LODWORD(v99) = 8;
        icu::units::getAllConversionRates((uint64_t)__s1, (int *)a7);
        int v22 = 0;
        while (v22 < *(_DWORD *)(v21 + 204))
        {
          uint64_t v23 = *(void *)(*(void *)(a1 + 96) + 8 * (*(_DWORD *)(v21 + 200) + v22));
          long long v96 = 0u;
          long long v97 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          icu::StringPiece::StringPiece((icu::StringPiece *)v50, *(const char **)(v23 + 8));
          icu::MeasureUnitImpl::forIdentifier(v50[0], v50[1], (int *)a7, (uint64_t)&v88);
          if (SDWORD2(v88) < 1)
          {
            BOOL v27 = 1;
          }
          else
          {
            uint64_t v24 = 0;
            do
            {
              SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(*(icu::SingleUnitImpl **)(v89 + 8 * v24));
              icu::StringPiece::StringPiece((icu::StringPiece *)v49, SimpleUnitID);
              uint64_t ConversionInfo = icu::units::ConversionRates::extractConversionInfo((int *)__s1, v49[0], v49[1], a7);
              int v87 = 0;
              memset(&v85[1], 0, 48);
              v85[0] = (char *)&v85[1] + 5;
              LODWORD(v85[1]) = 40;
              int v86 = 0;
              icu::CharString::append((icu::CharString *)v85, *(const char **)(ConversionInfo + 264), *(_DWORD *)(ConversionInfo + 320), a7);
              icu::StringPiece::StringPiece((icu::StringPiece *)&v47, "metric_adjacent");
              if (icu::CharString::contains(v85, v47, v48))
              {
                BOOL v27 = 1;
              }
              else
              {
                icu::StringPiece::StringPiece((icu::StringPiece *)&v45, *(const char **)&v104[0]);
                BOOL v27 = icu::CharString::contains(v85, v45, v46);
              }
              if (BYTE4(v85[1])) {
                uprv_free(v85[0]);
              }
            }
            while (++v24 < SDWORD2(v88) && v27);
          }
          if (BYTE12(v94)) {
            uprv_free((void *)v94);
          }
          sub_18C885AFC((uint64_t)&v88 + 8);
          ++v22;
          if (!v27)
          {
            sub_18C9864F0((uint64_t)__s1);
            int v11 = v37;
            goto LABEL_69;
          }
        }
        sub_18C9864F0((uint64_t)__s1);
        int v11 = v37;
      }
    }
    if (*(int *)(v21 + 204) >= 1)
    {
      uint64_t v33 = 0;
      UErrorCode v34 = *a7;
      do
      {
        if (v34 <= U_ZERO_ERROR)
        {
          float64x2_t v35 = sub_18CA1B358(v11, *(void *)(*(void *)(a1 + 96) + 8 * (v33 + *(int *)(v21 + 200))));
          UErrorCode v34 = *a7;
          if (*(int *)a7 <= 0 && v35 == 0)
          {
            UErrorCode v34 = U_MEMORY_ALLOCATION_ERROR;
            *a7 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
        ++v33;
      }
      while ((int)v33 < *(_DWORD *)(v21 + 204));
    }
    goto LABEL_93;
  }
  if ((v13 & 1) == 0) {
    sub_18CA06E80((unsigned int *)v11);
  }
}

uint64_t sub_18CA1A054(uint64_t a1, const char *a2, int a3, const char *a4, int a5, const char *a6, int a7, UErrorCode *a8)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0xFFFFFFFFLL;
  if (*(int *)a8 > 0) {
    return v8;
  }
  __int16 v22 = 0;
  char v21 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  *(_OWORD *)BOOL v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata((uint64_t)&v23, a2, a3, a4, a5, a6, a7, -1, -1, a8);
  uint64_t v11 = sub_18CA1B298(a1, (const char **)&v23, (unsigned char *)&v22 + 1, &v22, &v21, (int *)a8);
  if (*(int *)a8 <= 0)
  {
    if ((v11 & 0x80000000) == 0)
    {
LABEL_4:
      uint64_t v8 = v11;
      goto LABEL_14;
    }
    if (HIBYTE(v22))
    {
      while (!(_BYTE)v22)
      {
        int IndexOf = icu::CharString::lastIndexOf((icu::CharString *)&v27[1], 0x2Du);
        if (IndexOf < 1)
        {
          if (!strcmp(v27[1], "default")) {
            goto LABEL_10;
          }
          uint64_t v16 = (icu::CharString *)icu::CharString::truncate((uint64_t)&v27[1], 0);
          icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "default");
          icu::CharString::append(v16, v19, v20, a8);
        }
        else
        {
          icu::CharString::truncate((uint64_t)&v27[1], IndexOf);
        }
        uint64_t v11 = sub_18CA1B298(a1, (const char **)&v23, (unsigned char *)&v22 + 1, &v22, &v21, (int *)a8);
        if (*(int *)a8 >= 1) {
          goto LABEL_13;
        }
      }
      uint64_t v8 = v11;
      if (v21) {
        goto LABEL_14;
      }
      if (strcmp(*((const char **)&v31 + 1), "001"))
      {
        uint64_t v12 = (icu::CharString *)icu::CharString::truncate((uint64_t)&v31 + 8, 0);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "001");
        icu::CharString::append(v12, v17, v18, a8);
        uint64_t v11 = sub_18CA1B298(a1, (const char **)&v23, (unsigned char *)&v22 + 1, &v22, &v21, (int *)a8);
        if (v21) {
          goto LABEL_4;
        }
      }
LABEL_10:
      int v13 = 2;
    }
    else
    {
      int v13 = 1;
    }
    *a8 = v13;
LABEL_13:
    uint64_t v8 = 0xFFFFFFFFLL;
  }
LABEL_14:
  if (BYTE4(v32)) {
    uprv_free(*((void **)&v31 + 1));
  }
  if (BYTE4(v28)) {
    uprv_free(v27[1]);
  }
  if (BYTE4(v24)) {
    uprv_free(*((void **)&v23 + 1));
  }
  return v8;
}

void sub_18CA1A2BC(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18CA1A2E4(uint64_t result, char *__s1, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  v60[8] = *(void **)MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    uint64_t v7 = result;
    uint64_t result = strcmp(__s1, "convertUnits");
    if (result)
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
      return result;
    }
    uint64_t v37 = 0;
    memset(v36, 0, sizeof(v36));
    (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v36, a3, a5);
    long long __s = 0;
    uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, 0, (const char **)&__s, a3);
    if (result)
    {
      int v8 = 0;
      while (1)
      {
        uint64_t v34 = 0;
        memset(v33, 0, sizeof(v33));
        (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v33, a3, a5);
        __s1a = 0;
        uint64_t v59 = 0;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v56 = 0u;
        long long v55 = &unk_1EDA47700;
        LOWORD(v56) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v55);
        uint64_t v54 = 0;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v51 = 0u;
        long long v50 = &unk_1EDA47700;
        LOWORD(v51) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v50);
        uint64_t v49 = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v46 = 0u;
        uint64_t v45 = &unk_1EDA47700;
        LOWORD(v46) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v45);
        uint64_t v44 = 0;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        uint64_t v40 = &unk_1EDA47700;
        LOWORD(v41) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v40);
        if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v33, 0, (const char **)&__s1a, a3)) {
          break;
        }
LABEL_18:
        uint64_t v15 = *(unsigned int *)a5;
        if ((int)v15 >= 1) {
          goto LABEL_36;
        }
        if (v56 & 1) != 0 || (v51)
        {
          uint64_t v15 = 2;
LABEL_35:
          *a5 = v15;
LABEL_36:
          icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v40);
          icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v45);
          icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v50);
          return (uint64_t)icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v55);
        }
        uint64_t v16 = sub_18CA1A920(*(const void ***)(v7 + 8), v9);
        if (!v16)
        {
          uint64_t v15 = 7;
          goto LABEL_35;
        }
        uint64_t v17 = v16;
        uint64_t v18 = v7;
        int v19 = (icu::CharString *)(v16 + 1);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v30, __s);
        icu::CharString::append(v19, v30, v31, a5);
        icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 9), (const icu::UnicodeString *)&v55, a5);
        icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 17), (const icu::UnicodeString *)&v50, a5);
        icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 33), (const icu::UnicodeString *)&v40, a5);
        memset(&v60[1], 0, 56);
        v60[0] = (char *)&v60[1] + 5;
        LODWORD(v60[1]) = 40;
        int v20 = *((_DWORD *)v17 + 48);
        if (v20 >= 1)
        {
          for (uint64_t i = 0; i < v20; ++i)
          {
            int v22 = *(unsigned __int8 *)(v17[17] + i);
            if (v22 != 32)
            {
              icu::CharString::append((icu::CharString *)v60, v22, a5);
              int v20 = *((_DWORD *)v17 + 48);
            }
          }
        }
        icu::CharString::operator=((uint64_t)(v17 + 17), (uint64_t)v60);
        if (BYTE4(v60[1])) {
          uprv_free(v60[0]);
        }
        unint64_t v23 = (unsigned __int16)v46;
        if ((v46 & 1) == 0) {
          icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 25), (const icu::UnicodeString *)&v45, a5);
        }
        icu::UnicodeString::~UnicodeString((void *)v23, (icu::UnicodeString *)&v40);
        icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v45);
        icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v50);
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v55);
        uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, ++v8, (const char **)&__s, a3);
        uint64_t v7 = v18;
        if (!result) {
          return result;
        }
      }
      unsigned int v10 = 1;
      while (1)
      {
        uint64_t v11 = __s1a;
        if (!strcmp(__s1a, "target")) {
          break;
        }
        if (!strcmp(v11, "factor"))
        {
          int v39 = 0;
          uint64_t v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32))(a3, &v39, a5);
          icu::UnicodeString::UnicodeString(v60, 1, &v38);
          uint64_t v12 = &v50;
          goto LABEL_16;
        }
        if (!strcmp(v11, "offset"))
        {
          int v39 = 0;
          uint64_t v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32))(a3, &v39, a5);
          icu::UnicodeString::UnicodeString(v60, 1, &v38);
          uint64_t v12 = &v45;
          goto LABEL_16;
        }
        if (!strcmp(v11, "systems"))
        {
          int v39 = 0;
          uint64_t v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32))(a3, &v39, a5);
          icu::UnicodeString::UnicodeString(v60, 1, &v38);
          uint64_t v12 = &v40;
LABEL_16:
          icu::UnicodeString::operator=((icu::UnicodeString *)v12, (icu::UnicodeString *)v60);
          icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v60);
        }
        if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v33, v10++, (const char **)&__s1a, a3))goto LABEL_18; {
      }
        }
      int v39 = 0;
      uint64_t v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32))(a3, &v39, a5);
      icu::UnicodeString::UnicodeString(v60, 1, &v38);
      uint64_t v12 = &v55;
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t *sub_18CA1A920(const void **a1, unint64_t a2)
{
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *(unsigned int *)a1;
  if (v4 == v3)
  {
    if (v3 == 8) {
      int v5 = 32;
    }
    else {
      int v5 = 2 * v3;
    }
    if (v5 < 1) {
      return 0;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8 * v5);
    if (!result) {
      return result;
    }
    uint64_t v7 = result;
    if (v3 >= 1)
    {
      int v8 = *((_DWORD *)a1 + 4);
      if (v8 >= v3) {
        int v8 = v3;
      }
      if (v8 >= v5) {
        int v8 = v5;
      }
      memcpy(result, a1[1], 8 * v8);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v7;
    *((_DWORD *)a1 + 4) = v5;
    uint64_t v4 = 1;
    *((unsigned char *)a1 + 20) = 1;
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x148, a2);
  if (result) {
    uint64_t result = (uint64_t *)sub_18CA1A9F8((uint64_t)result);
  }
  uint64_t v9 = *(int *)a1;
  *(_DWORD *)a1 = v9 + 1;
  *((void *)a1[1] + v9) = result;
  return result;
}

uint64_t sub_18CA1A9F8(uint64_t result)
{
  *(void *)(result + 8) = result + 21;
  *(_DWORD *)(result + 16) = 40;
  *(_WORD *)(result + 20) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 72) = result + 85;
  *(_DWORD *)(result + 80) = 40;
  *(_WORD *)(result + 84) = 0;
  *(_DWORD *)(result + 128) = 0;
  *(void *)(result + 136) = result + 149;
  *(_DWORD *)(result + 144) = 40;
  *(_WORD *)(result + 148) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(void *)(result + 200) = result + 213;
  *(_DWORD *)(result + 208) = 40;
  *(_WORD *)(result + 212) = 0;
  *(_DWORD *)(result + 256) = 0;
  *(void *)(result + 264) = result + 277;
  *(_DWORD *)(result + 272) = 40;
  *(unsigned char *)(result + 276) = 0;
  *(_DWORD *)(result + 320) = 0;
  *(unsigned char *)(result + 277) = 0;
  return result;
}

void sub_18CA1AA6C(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18CA1AA94(uint64_t result, char *__s1, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  unsigned char v42[8] = *(void **)MEMORY[0x1E4F143B8];
  int v39 = __s1;
  if (*(int *)a5 <= 0)
  {
    uint64_t v7 = result;
    uint64_t result = strcmp(__s1, "unitPreferenceData");
    if (result)
    {
      int v8 = 1;
LABEL_4:
      *a5 = v8;
    }
    else
    {
      memset(v38, 0, 40);
      (*(void (**)(char **__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v38, a3, a5);
      uint64_t v37 = 0;
      uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v38, 0, (const char **)&v37, a3);
      if (result)
      {
        int v21 = 0;
        uint64_t v24 = v7;
        while (1)
        {
          memset(v36, 0, sizeof(v36));
          (*(void (**)(char **__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v36, a3, a5);
          long long v35 = 0;
          if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, 0, (const char **)&v35, a3)) {
            break;
          }
LABEL_34:
          uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v38, ++v21, (const char **)&v37, a3);
          if (!result) {
            return result;
          }
        }
        int v22 = 0;
        while (1)
        {
          uint64_t v34 = 0;
          memset(v33, 0, sizeof(v33));
          (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v33, a3, a5);
          long long v32 = 0;
          if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v33, 0, (const char **)&v32, a3)) {
            break;
          }
LABEL_33:
          if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, ++v22, (const char **)&v35, a3))goto LABEL_34; {
        }
          }
        int v9 = 0;
        while (1)
        {
          v30[0] = 0;
          v30[1] = 0;
          uint64_t v31 = 0;
          uint64_t result = (uint64_t)(*(void *(**)(void *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 80))(v30, a3, a5);
          if (*(int *)a5 >= 1) {
            break;
          }
          int v29 = v31;
          unsigned int v10 = *(unsigned int **)(v7 + 16);
          LODWORD(v41[0]) = **(_DWORD **)(v7 + 8);
          uint64_t result = (uint64_t)sub_18CA1B024(v10, (const char **)&v37, (const char **)&v35, (const char **)&v32, (int *)v41, &v29, a5);
          if (!result) {
            goto LABEL_36;
          }
          if (*(int *)a5 > 0) {
            return result;
          }
          uint64_t v11 = *(void *)(v7 + 16);
          if (*(int *)v11 >= 2)
          {
            uint64_t result = icu::units::UnitPreferenceMetadata::compareTo(*(const char ***)(*(void *)(v11 + 8) + 8 * (*(_DWORD *)v11 - 2)), *(const char ***)(*(void *)(v11 + 8) + 8 * (*(_DWORD *)v11 - 1)));
            if ((result & 0x80000000) == 0)
            {
              int v8 = 3;
              goto LABEL_4;
            }
          }
          int v23 = v9;
          if (icu::ResourceArray::getValue((icu::ResourceArray *)v30, 0, a3))
          {
            unsigned int v13 = 0;
            while (1)
            {
              uint64_t result = (uint64_t)sub_18CA1B180(*(const void ***)(v7 + 8), v12);
              if (!result) {
                break;
              }
              uint64_t v14 = result;
              uint64_t v28 = 0;
              memset(v27, 0, sizeof(v27));
              uint64_t result = (uint64_t)(*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v27, a3, a5);
              if (*(int *)a5 > 0) {
                return result;
              }
              if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v27, 0, (const char **)&v39, a3))
              {
                unsigned int v15 = 1;
                do
                {
                  uint64_t v16 = v39;
                  if (!strcmp(v39, "unit"))
                  {
                    LODWORD(v41[0]) = 0;
                    uint64_t v18 = (UChar *)(*(uint64_t (**)(icu::ResourceValue *, void **, UErrorCode *))(*(void *)a3 + 32))(a3, v41, a5);
                    icu::CharString::appendInvariantChars((int *)(v14 + 8), v18, (int32_t)v41[0], a5);
                  }
                  else if (!strcmp(v16, "geq"))
                  {
                    int32_t v40 = 0;
                    int v19 = (UChar *)(*(uint64_t (**)(icu::ResourceValue *, int32_t *, UErrorCode *))(*(void *)a3 + 32))(a3, &v40, a5);
                    memset(&v42[1], 0, 56);
                    v42[0] = (char *)&v42[1] + 5;
                    LODWORD(v42[1]) = 40;
                    icu::CharString::appendInvariantChars((int *)v42, v19, v40, a5);
                    memset(v41, 0, sizeof(v41));
                    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v41);
                    icu::StringPiece::StringPiece((icu::StringPiece *)&v25, (const char *)v42[0]);
                    icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v41, v25, v26, a5);
                    *(double *)(v14 + 72) = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v41);
                    icu::number::impl::DecimalQuantity::~DecimalQuantity(v41);
                    if (BYTE4(v42[1])) {
                      uprv_free(v42[0]);
                    }
                  }
                  else if (!strcmp(v16, "skeleton"))
                  {
                    int32_t v40 = 0;
                    v42[0] = (void *)(*(uint64_t (**)(icu::ResourceValue *, int32_t *, UErrorCode *))(*(void *)a3 + 32))(a3, &v40, a5);
                    icu::UnicodeString::UnicodeString(v41, 1, v42);
                    icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 80), (icu::UnicodeString *)v41);
                    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v41);
                  }
                }
                while (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v27, v15++, (const char **)&v39, a3));
              }
              ++v13;
              uint64_t v7 = v24;
              if (!icu::ResourceArray::getValue((icu::ResourceArray *)v30, v13, a3)) {
                goto LABEL_32;
              }
            }
LABEL_36:
            int v8 = 7;
            goto LABEL_4;
          }
LABEL_32:
          int v9 = v23 + 1;
          if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v33, v23 + 1, (const char **)&v32, a3))goto LABEL_33; {
        }
          }
      }
    }
  }
  return result;
}

uint64_t *sub_18CA1B024(unsigned int *a1, const char **a2, const char **a3, const char **a4, int *a5, int *a6, UErrorCode *a7)
{
  int v14 = a1[4];
  uint64_t v15 = *a1;
  if (v15 != v14)
  {
LABEL_16:
    uint64_t v18 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0xD0, (unint64_t)a2);
    if (v18)
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v26, *a2);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v24, *a3);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v22, *a4);
      icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata((uint64_t)v18, v26, v27, v24, v25, v22, v23, *a5, *a6, a7);
    }
    uint64_t v20 = (int)*a1;
    *a1 = v20 + 1;
    *(void *)(*((void *)a1 + 1) + 8 * v20) = v18;
    return v18;
  }
  if (v14 == 8) {
    int v16 = 32;
  }
  else {
    int v16 = 2 * v14;
  }
  if (v16 < 1) {
    return 0;
  }
  uint64_t v17 = (uint64_t *)uprv_malloc(8 * v16);
  uint64_t v18 = v17;
  if (v17)
  {
    if (v14 >= 1)
    {
      int v19 = a1[4];
      if (v19 >= v14) {
        int v19 = v14;
      }
      if (v19 >= v16) {
        int v19 = v16;
      }
      memcpy(v17, *((const void **)a1 + 1), 8 * v19);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free(*((void **)a1 + 1));
    }
    *((void *)a1 + 1) = v18;
    a1[4] = v16;
    uint64_t v15 = 1;
    *((unsigned char *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v18;
}

uint64_t *sub_18CA1B180(const void **a1, unint64_t a2)
{
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *(unsigned int *)a1;
  if (v4 == v3)
  {
    if (v3 == 8) {
      int v5 = 32;
    }
    else {
      int v5 = 2 * v3;
    }
    if (v5 < 1) {
      return 0;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8 * v5);
    if (!result) {
      return result;
    }
    uint64_t v7 = result;
    if (v3 >= 1)
    {
      int v8 = *((_DWORD *)a1 + 4);
      if (v8 >= v3) {
        int v8 = v3;
      }
      if (v8 >= v5) {
        int v8 = v5;
      }
      memcpy(result, a1[1], 8 * v8);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v7;
    *((_DWORD *)a1 + 4) = v5;
    uint64_t v4 = 1;
    *((unsigned char *)a1 + 20) = 1;
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x90, a2);
  if (result)
  {
    result[1] = (uint64_t)result + 21;
    *((_DWORD *)result + 4) = 40;
    *((_WORD *)result + 10) = 0;
    *((_DWORD *)result + 16) = 0;
    result[9] = 0x3FF0000000000000;
    result[10] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)result + 44) = 2;
  }
  uint64_t v9 = *(int *)a1;
  *(_DWORD *)a1 = v9 + 1;
  *((void *)a1[1] + v9) = result;
  return result;
}

uint64_t sub_18CA1B298(uint64_t a1, const char **a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, int *a6)
{
  if (*a6 <= 0)
  {
    int v12 = *(_DWORD *)a1;
    *a3 = 0;
    *a4 = 0;
    *a5 = 0;
    if (v12 >= 1)
    {
      int v14 = 0;
      do
      {
        int v15 = v12 + v14;
        if (v12 + v14 < 0 != __OFADD__(v12, v14)) {
          ++v15;
        }
        uint64_t v6 = (v15 >> 1);
        int v16 = icu::units::UnitPreferenceMetadata::compareTo(*(const char ***)(*(void *)(a1 + 8) + 8 * (int)v6), a2, a3, a4, a5);
        if (v16 < 0)
        {
          int v14 = v6 + 1;
        }
        else
        {
          int v12 = v6;
          if (!v16) {
            return v6;
          }
        }
      }
      while (v14 < v12);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t *sub_18CA1B358(const void **a1, unint64_t a2)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = *(unsigned int *)a1;
  if (v5 == v4)
  {
    if (v4 == 8) {
      int v6 = 32;
    }
    else {
      int v6 = 2 * v4;
    }
    if (v6 < 1) {
      return 0;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8 * v6);
    if (!result) {
      return result;
    }
    int v8 = result;
    if (v4 >= 1)
    {
      int v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = v6;
      }
      memcpy(result, a1[1], 8 * v9);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    uint64_t v5 = 1;
    *((unsigned char *)a1 + 20) = 1;
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x90, a2);
  if (result) {
    uint64_t result = (uint64_t *)sub_18CA1B440((uint64_t)result, a2);
  }
  uint64_t v10 = *(int *)a1;
  *(_DWORD *)a1 = v10 + 1;
  *((void *)a1[1] + v10) = result;
  return result;
}

uint64_t sub_18CA1B440(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a1 + 21;
  *(_DWORD *)(a1 + 16) = 40;
  *(_WORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = &unk_1EDA47700;
  *(_WORD *)(a1 + 88) = 2;
  UErrorCode v5 = U_ZERO_ERROR;
  icu::CharString::append((icu::CharString *)(a1 + 8), *(const char **)(a2 + 8), *(_DWORD *)(a2 + 64), &v5);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  icu::UnicodeString::operator=((UChar **)(a1 + 80), (UChar **)(a2 + 80));
  return a1;
}

void icu::units::UnitsRouter::parseSkeletonToPrecision(unsigned __int8 *a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  v15[7] = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 >= 1) {
    goto LABEL_2;
  }
  unsigned int v13 = "p";
  icu::UnicodeString::UnicodeString(&v14, 1, &v13);
  int v6 = (void *)LOWORD(v15[0]);
  if (SLOWORD(v15[0]) >= 0) {
    int32_t v7 = LOWORD(v15[0]) >> 5;
  }
  else {
    int32_t v7 = HIDWORD(v15[0]);
  }
  if (v15[0])
  {
    int v6 = (void *)a1[8];
    BOOL v11 = v6 & 1;
    goto LABEL_19;
  }
  int v8 = v7 & (v7 >> 31);
  if (v7 < 0)
  {
    int32_t v9 = 0;
    goto LABEL_12;
  }
  int32_t v9 = v7 - v8;
  int32_t v10 = v7;
  if (v7 - v8 < v7) {
LABEL_12:
  }
    int32_t v10 = v9;
  if (*((_WORD *)a1 + 4))
  {
    BOOL v11 = 0;
  }
  else
  {
    if ((v15[0] & 2) != 0) {
      int v12 = (char *)v15 + 2;
    }
    else {
      int v12 = (char *)v15[2];
    }
    BOOL v11 = icu::UnicodeString::doEqualsSubstring((uint64_t)a1, 0, v7, (uint64_t)v12, v8, v10);
  }
LABEL_19:
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v14);
  if (!v11)
  {
    *a2 = U_INVALID_FORMAT_ERROR;
LABEL_2:
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    return;
  }
  uint64_t v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  icu::StringSegment::StringSegment((uint64_t)&v14, (const icu::UnicodeString *)a1, 0);
  icu::StringSegment::adjustOffset((uint64_t)&v14, 20);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_18C97E550((icu::StringSegment *)&v14, a3, a2);
}

uint64_t icu::units::UnitsRouter::UnitsRouter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, int *a7)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 24;
  *(_DWORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 112;
  *(_DWORD *)(a1 + 104) = 8;
  *(unsigned char *)(a1 + 108) = 0;
  icu::MeasureUnit::forIdentifier(a2, a3, a7, (uint64_t)v13);
  icu::units::UnitsRouter::init(a1, (icu::MeasureUnitImpl *)v13, a4, a5, a6, a7);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v13);
  return a1;
}

uint64_t icu::units::UnitsRouter::init(uint64_t result, icu::MeasureUnitImpl *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int *a6)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*a6 <= 0)
  {
    uint64_t v11 = result;
    v26[0] = 0;
    memset(&v26[2], 0, 72);
    v26[1] = &v26[3];
    LODWORD(v26[2]) = 8;
    icu::units::getAllConversionRates((uint64_t)v26, a6);
    memset(v25, 0, sizeof(v25));
    icu::units::UnitPreferences::UnitPreferences((icu::units::UnitPreferences *)v25, (UErrorCode *)a6);
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    memset(v43, 0, sizeof(v43));
    icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(a2, (UErrorCode *)a6, (uint64_t)v43);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    memset(v38, 0, sizeof(v38));
    icu::units::extractCompoundBaseUnit((uint64_t)v43, (int *)v26, a6, (uint64_t)v38);
    long long v37 = 0u;
    memset(v36, 0, sizeof(v36));
    icu::getUnitQuantity((icu *)v38, (UErrorCode *)a6, (uint64_t)v36);
    if (*a6 <= 0)
    {
      uint64_t v24 = 0;
      memset(v23, 0, sizeof(v23));
      icu::units::UnitPreferences::getPreferencesFor((uint64_t)v25, *(unsigned __int8 **)&v36[0], DWORD2(v37), a4, a5, a3, (UErrorCode *)a6, (uint64_t)v23);
      if (SLODWORD(v23[0]) >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 8 * LODWORD(v23[0]) - 8;
        long long v14 = 0uLL;
        do
        {
          uint64_t v15 = *(void *)(*((void *)&v23[0] + 1) + v12);
          long long v34 = v14;
          long long v35 = v14;
          long long v32 = v14;
          long long v33 = v14;
          v31[4] = v14;
          v31[5] = v14;
          UErrorCode v31[2] = v14;
          _OWORD v31[3] = v14;
          v31[0] = v14;
          v31[1] = v14;
          icu::StringPiece::StringPiece((icu::StringPiece *)v22, *(const char **)(v15 + 8));
          icu::MeasureUnitImpl::forIdentifier(v22[0], v22[1], a6, (uint64_t)v31);
          if (*a6 <= 0)
          {
            memset(v30, 0, sizeof(v30));
            icu::UnicodeString::UnicodeString((icu::UnicodeString *)v30, (UChar **)(v15 + 80));
            if (WORD4(v30[0]) < 0x20u
              || icu::UnicodeString::doEqualsSubstring((uint64_t)v30, 0, 19, (uint64_t)"p", 0, 19))
            {
              icu::MeasureUnitImpl::copy((icu::MeasureUnitImpl *)v31, (UErrorCode *)a6, (uint64_t)v27);
              icu::MeasureUnitImpl::build((icu::MeasureUnitImpl *)v27, (UErrorCode *)a6, (uint64_t)v21);
              if (*a6 <= 0)
              {
                uint64_t v17 = sub_18CA1BDC0((const void **)v11, (unint64_t)v21);
                if (*a6 <= 0 && !v17) {
                  *a6 = 7;
                }
              }
              icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v21);
              if (v29) {
                uprv_free(v28[11]);
              }
              sub_18C885AFC((uint64_t)v28);
              uint64_t v18 = *a6;
              if ((int)v18 <= 0)
              {
                int v19 = sub_18CA1BEA8((unsigned int *)(v11 + 88), (unint64_t)v43, (icu::MeasureUnitImpl *)v31, (double *)(v15 + 72), (UChar **)v30, (uint64_t)v26, (UErrorCode *)a6);
                uint64_t v18 = *a6;
                if ((int)v18 <= 0 && !v19)
                {
                  uint64_t v18 = 7;
                  *a6 = 7;
                }
              }
              BOOL v16 = (int)v18 > 0;
            }
            else
            {
              uint64_t v18 = 5;
              *a6 = 5;
              BOOL v16 = 1;
            }
            icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v30);
          }
          else
          {
            BOOL v16 = 1;
          }
          if (BYTE12(v32)) {
            uprv_free((void *)v32);
          }
          sub_18C885AFC((uint64_t)v31 + 8);
          long long v14 = 0uLL;
          if (v16) {
            break;
          }
          BOOL v20 = v13 == v12;
          v12 += 8;
        }
        while (!v20);
      }
      sub_18CA06E80((unsigned int *)v23);
    }
    if (BYTE12(v36[0])) {
      uprv_free(*(void **)&v36[0]);
    }
    if (BYTE12(v39)) {
      uprv_free((void *)v39);
    }
    sub_18C885AFC((uint64_t)v38 + 8);
    if (BYTE12(v44)) {
      uprv_free((void *)v44);
    }
    sub_18C885AFC((uint64_t)v43 + 8);
    sub_18CA06E80((unsigned int *)&v25[5] + 2);
    sub_18CA06F58((uint64_t)v25);
    return sub_18C9864F0((uint64_t)v26);
  }
  return result;
}

uint64_t icu::units::UnitsRouter::UnitsRouter(uint64_t a1, icu::MeasureUnitImpl *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int *a6)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 24;
  *(_DWORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 112;
  *(_DWORD *)(a1 + 104) = 8;
  *(unsigned char *)(a1 + 108) = 0;
  icu::units::UnitsRouter::init(a1, a2, a3, a4, a5, a6);
  return a1;
}

{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 24;
  *(_DWORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 112;
  *(_DWORD *)(a1 + 104) = 8;
  *(unsigned char *)(a1 + 108) = 0;
  icu::units::UnitsRouter::init(a1, a2, a3, a4, a5, a6);
  return a1;
}

uint64_t icu::units::UnitsRouter::route@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(unsigned int *)(a1 + 88);
  if ((int)v9 < 1)
  {
    uint64_t v14 = 0;
    if (!a2) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v11 = 0;
    double v12 = fabs(a5) * 1.0;
    uint64_t v13 = 8 * v9 - 8;
    do
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 96) + v11);
      BOOL v15 = icu::units::ComplexUnitsConverter::greaterThanOrEqual((icu::units::UnitsConverter ***)(v14 + 8), v12, *(double *)(v14 + 192))|| v13 == v11;
      v11 += 8;
    }
    while (!v15);
    if (!a2) {
      goto LABEL_18;
    }
  }
  if (!*(_DWORD *)a2)
  {
    if (*(__int16 *)(v14 + 208) < 0) {
      int v16 = *(_DWORD *)(v14 + 212);
    }
    else {
      int v16 = *(unsigned __int16 *)(v14 + 208) >> 5;
    }
    if (v16 < 1)
    {
      icu::number::Precision::integer((uint64_t)v21);
      icu::number::FractionPrecision::withMinDigits((uint64_t)v21, 2, (uint64_t)v22);
      *a2 = *(_OWORD *)v22;
      *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v22[12];
    }
    else
    {
      uint64_t v17 = (unsigned __int8 *)icu::UnicodeString::UnicodeString((icu::UnicodeString *)v26, (UChar **)(v14 + 200));
      icu::units::UnitsRouter::parseSkeletonToPrecision(v17, a3, (uint64_t)v22);
      *a2 = *(_OWORD *)v22;
      *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v22[12];
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v26);
    }
  }
LABEL_18:
  icu::units::ComplexUnitsConverter::convert(v14 + 8, (uint64_t)a2, (int *)a3, (uint64_t)v20, a5);
  icu::MeasureUnitImpl::copy((icu::MeasureUnitImpl *)(v14 + 264), a3, (uint64_t)&v23);
  sub_18CA1BD70(a4, (uint64_t)v20, &v23);
  if (v25) {
    uprv_free(v24[11]);
  }
  sub_18C885AFC((uint64_t)v24);
  return sub_18C80BF60((uint64_t)v20);
}

uint64_t sub_18CA1BD70(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(a1 + 96) = *a3;
  sub_18C94E4D4(a1 + 104, (uint64_t)(a3 + 2));
  icu::CharString::CharString(a1 + 192, a3 + 24);
  return a1;
}

uint64_t *sub_18CA1BDC0(const void **a1, unint64_t a2)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = *(unsigned int *)a1;
  if (v5 == v4)
  {
    if (v4 == 8) {
      int v6 = 32;
    }
    else {
      int v6 = 2 * v4;
    }
    if (v6 < 1) {
      return 0;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8 * v6);
    if (!result) {
      return result;
    }
    int v8 = result;
    if (v4 >= 1)
    {
      int v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = v6;
      }
      memcpy(result, a1[1], 8 * v9);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    uint64_t v5 = 1;
    *((unsigned char *)a1 + 20) = 1;
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x18, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::MeasureUnit::MeasureUnit((uint64_t)result, a2);
  }
  uint64_t v10 = *(int *)a1;
  *(_DWORD *)a1 = v10 + 1;
  *((void *)a1[1] + v10) = result;
  return result;
}

uint64_t *sub_18CA1BEA8(unsigned int *a1, unint64_t a2, icu::MeasureUnitImpl *a3, double *a4, UChar **a5, uint64_t a6, UErrorCode *a7)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v14 = a1[4];
  uint64_t v15 = *a1;
  if (v15 != v14)
  {
LABEL_16:
    uint64_t v18 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x1A8, a2);
    if (v18)
    {
      double v20 = *a4;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v24, a5);
      sub_18CA1C040((uint64_t)v18, a2, a3, (icu::UnicodeString *)v24, a6, a7, v20);
      int v21 = (void *)(int)*a1;
      *a1 = v21 + 1;
      *(void *)(*((void *)a1 + 1) + 8 * (void)v21) = v18;
      icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v24);
    }
    else
    {
      uint64_t v22 = (int)*a1;
      *a1 = v22 + 1;
      *(void *)(*((void *)a1 + 1) + 8 * v22) = 0;
    }
    return v18;
  }
  if (v14 == 8) {
    int v16 = 32;
  }
  else {
    int v16 = 2 * v14;
  }
  if (v16 < 1) {
    return 0;
  }
  uint64_t v17 = (uint64_t *)uprv_malloc(8 * v16);
  uint64_t v18 = v17;
  if (v17)
  {
    if (v14 >= 1)
    {
      int v19 = a1[4];
      if (v19 >= v14) {
        int v19 = v14;
      }
      if (v19 >= v16) {
        int v19 = v16;
      }
      memcpy(v17, *((const void **)a1 + 1), 8 * v19);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free(*((void **)a1 + 1));
    }
    *((void *)a1 + 1) = v18;
    a1[4] = v16;
    uint64_t v15 = 1;
    *((unsigned char *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v18;
}

uint64_t sub_18CA1C040(uint64_t a1, uint64_t a2, icu::MeasureUnitImpl *a3, icu::UnicodeString *a4, uint64_t a5, UErrorCode *a6, double a7)
{
  *(double *)(a1 + 192) = a7;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 200), a4);
  icu::MeasureUnitImpl::copy(a3, a6, a1 + 264);
  return a1;
}

icu::RuleBasedNumberFormat *unum_open(unsigned int a1, unint64_t a2, uint64_t a3, char *a4, UParseError *a5, UErrorCode *a6)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v6 = (uint64_t *)*(unsigned int *)a6;
  if ((int)v6 > 0) {
    return 0;
  }
  switch(a1)
  {
    case 0u:
      uint64_t v49 = 0;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v50, a2, a3);
      if (a5) {
        uint64_t v18 = a5;
      }
      else {
        uint64_t v18 = (UParseError *)&v45;
      }
      int v19 = icu::UMemory::operator new((uint64_t *)&v45, (icu::UMemory *)0xB48, v17);
      if (!v19)
      {
        uint64_t v25 = 7;
        *a6 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_39;
      }
      int v21 = (icu::DecimalFormatSymbols *)v19;
      icu::Locale::Locale(v20, (icu::Locale *)v54, a4, 0, 0, 0);
      icu::DecimalFormatSymbols::DecimalFormatSymbols(v21, (const icu::Locale *)v54, a6);
      icu::Locale::~Locale(v22, (icu::Locale *)v54);
      uint64_t v24 = (uint64_t *)*(unsigned int *)a6;
      if ((int)v24 >= 1)
      {
        (*(void (**)(icu::DecimalFormatSymbols *))(*(void *)v21 + 8))(v21);
LABEL_39:
        icu::UnicodeString::~UnicodeString((void *)v25, (icu::UnicodeString *)&v50);
        return 0;
      }
      long long v44 = (icu::DecimalFormat *)icu::UMemory::operator new(v24, (icu::UMemory *)0x170, v23);
      int32_t v7 = v44;
      if (v44) {
        icu::DecimalFormat::DecimalFormat(v44, (const icu::UnicodeString *)&v50, v21, v18, a6);
      }
      else {
        (*(void (**)(icu::DecimalFormatSymbols *))(*(void *)v21 + 8))(v21);
      }
LABEL_32:
      icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v50);
      if (v7)
      {
LABEL_33:
        if (*(int *)a6 < 1) {
          return v7;
        }
        (*(void (**)(icu::RuleBasedNumberFormat *))(*(void *)v7 + 8))(v7);
        return 0;
      }
LABEL_9:
      if (*(int *)a6 > 0) {
        return 0;
      }
      int32_t v7 = 0;
      int v16 = 7;
LABEL_12:
      *a6 = v16;
      return v7;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x10u:
      icu::Locale::Locale(v6, (icu::Locale *)v54, a4, 0, 0, 0);
      unsigned int v13 = a1;
      goto LABEL_6;
    case 5u:
      uint64_t v26 = icu::UMemory::operator new(v6, (icu::UMemory *)0x2F0, a2);
      if (!v26) {
        goto LABEL_9;
      }
      int32_t v7 = (icu::RuleBasedNumberFormat *)v26;
      icu::Locale::Locale(v27, (icu::Locale *)v54, a4, 0, 0, 0);
      uint64_t v28 = v7;
      uint64_t v29 = 0;
      goto LABEL_25;
    case 6u:
      long long v30 = icu::UMemory::operator new(v6, (icu::UMemory *)0x2F0, a2);
      if (!v30) {
        goto LABEL_9;
      }
      int32_t v7 = (icu::RuleBasedNumberFormat *)v30;
      icu::Locale::Locale(v31, (icu::Locale *)v54, a4, 0, 0, 0);
      uint64_t v28 = v7;
      uint64_t v29 = 1;
      goto LABEL_25;
    case 7u:
      long long v32 = icu::UMemory::operator new(v6, (icu::UMemory *)0x2F0, a2);
      if (!v32) {
        goto LABEL_9;
      }
      int32_t v7 = (icu::RuleBasedNumberFormat *)v32;
      icu::Locale::Locale(v33, (icu::Locale *)v54, a4, 0, 0, 0);
      uint64_t v28 = v7;
      uint64_t v29 = 2;
LABEL_25:
      icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v28, v29, v54, a6);
      icu::Locale::~Locale(v34, (icu::Locale *)v54);
      goto LABEL_33;
    case 8u:
      LODWORD(v45) = 0;
      memset(v54, 0, sizeof(v54));
      icu::Locale::Locale(v6, (icu::Locale *)v54, a4, 0, 0, 0);
      if ((int)icu::Locale::getKeywordValue((char **)v54, "numbers", 0, 0, (UErrorCode *)&v45) < 1)
      {
        long long v43 = icu::UMemory::operator new(v36, (icu::UMemory *)0x2F0, v35);
        int32_t v7 = (icu::RuleBasedNumberFormat *)v43;
        if (v43) {
          icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v43, 3, v54, a6);
        }
      }
      else
      {
        unsigned int v13 = 1;
LABEL_6:
        uint64_t Instance = icu::NumberFormat::createInstance((char **)v54, v13, a6);
LABEL_7:
        int32_t v7 = Instance;
      }
      icu::Locale::~Locale(v15, (icu::Locale *)v54);
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_33;
    case 9u:
      uint64_t v49 = 0;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v50, a2, a3);
      int32_t v7 = (icu::RuleBasedNumberFormat *)icu::UMemory::operator new(v38, (icu::UMemory *)0x2F0, v37);
      if (v7)
      {
        if (!a5) {
          a5 = (UParseError *)&v45;
        }
        icu::Locale::Locale((uint64_t *)&v45, (icu::Locale *)v54, a4, 0, 0, 0);
        icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v7, (const icu::UnicodeString *)&v50, (const icu::Locale *)v54, a5, a6);
        icu::Locale::~Locale(v40, (icu::Locale *)v54);
      }
      goto LABEL_32;
    case 0xEu:
      icu::Locale::Locale(v6, (icu::Locale *)v54, a4, 0, 0, 0);
      unint64_t v42 = 0;
      goto LABEL_37;
    case 0xFu:
      icu::Locale::Locale(v6, (icu::Locale *)v54, a4, 0, 0, 0);
      unint64_t v42 = 1;
LABEL_37:
      uint64_t Instance = icu::CompactDecimalFormat::createInstance((const icu::Locale *)v54, v42, a6, v41);
      goto LABEL_7;
    default:
      int32_t v7 = 0;
      int v16 = 16;
      goto LABEL_12;
  }
}

uint64_t unum_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t unum_clone(void *lpsrc, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  if (lpsrc)
  {
    if (!v5) {
  }
    }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = (*(uint64_t (**)(void *))(*(void *)v5 + 32))(v5);
  if (!result) {
    *a2 = 7;
  }
  return result;
}

uint64_t unum_format(uint64_t *a1, int a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  return unum_formatInt64(a1, a2, a3, a4, a5, a6);
}

uint64_t unum_formatInt64(uint64_t *lpsrc, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*a6 <= 0)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v25 = 0;
    long long v24 = 0u;
    int v21 = &unk_1EDA47700;
    LOWORD(v22) = 2;
    if (a3 || a4) {
      icu::UnicodeString::setTo((icu::UnicodeString *)&v21, a3, 0, a4);
    }
    int v19 = &unk_1EDA4C7F0;
    long long v20 = 0xFFFFFFFFuLL;
    if (a5) {
      LODWORD(v20) = *(_DWORD *)a5;
    }
    uint64_t v13 = *lpsrc;
    if (v14)
    {
      (*(void (**)(void *, uint64_t, void **, void **))(*(void *)v14 + 112))(v14, a2, &v21, &v19);
      if (!a5)
      {
LABEL_11:
        uint64_t v18 = (UChar *)a3;
        uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v21, &v18, a4, a6);
        unint64_t v17 = v18;
        icu::FieldPosition::~FieldPosition(&v17, (icu::FieldPosition *)&v19);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v21);
        return v6;
      }
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, void **, void **, int *))(v13 + 120))(lpsrc, a2, &v21, &v19, a6);
      if (!a5) {
        goto LABEL_11;
      }
    }
    *(void *)(a5 + 4) = *(void *)((char *)&v20 + 4);
    goto LABEL_11;
  }
  return 0xFFFFFFFFLL;
}

uint64_t unum_formatDouble(uint64_t *lpsrc, char *a2, unsigned int a3, uint64_t a4, int *a5, double a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*a5 <= 0)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v25 = 0;
    long long v24 = 0u;
    int v21 = &unk_1EDA47700;
    LOWORD(v22) = 2;
    if (a2 || a3) {
      icu::UnicodeString::setTo((icu::UnicodeString *)&v21, a2, 0, a3);
    }
    int v19 = &unk_1EDA4C7F0;
    long long v20 = 0xFFFFFFFFuLL;
    if (a4) {
      LODWORD(v20) = *(_DWORD *)a4;
    }
    uint64_t v13 = *lpsrc;
    if (v14)
    {
      (*(void (**)(void *, void **, void **, double))(*(void *)v14 + 64))(v14, &v21, &v19, a6);
      if (!a4)
      {
LABEL_11:
        uint64_t v18 = (UChar *)a2;
        uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v21, &v18, a3, a5);
        unint64_t v17 = v18;
        icu::FieldPosition::~FieldPosition(&v17, (icu::FieldPosition *)&v19);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v21);
        return v6;
      }
    }
    else
    {
      (*(void (**)(uint64_t *, void **, void **, int *, double))(v13 + 72))(lpsrc, &v21, &v19, a5, a6);
      if (!a4) {
        goto LABEL_11;
      }
    }
    *(void *)(a4 + 4) = *(void *)((char *)&v20 + 4);
    goto LABEL_11;
  }
  return 0xFFFFFFFFLL;
}

uint64_t unum_formatDoubleForFields(uint64_t a1, char *a2, unsigned int a3, uint64_t a4, int *a5, double a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a2)
  {
    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  if ((a3 & 0x80000000) != 0)
  {
LABEL_8:
    *a5 = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v20 = 0;
  long long v19 = 0u;
  int v16 = &unk_1EDA47700;
  LOWORD(v17) = 2;
  if (a2) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a2, 0, a3);
  }
  (*(void (**)(uint64_t, void **, uint64_t, int *, double))(*(void *)a1 + 80))(a1, &v16, a4, a5, a6);
  uint64_t v15 = (UChar *)a2;
  uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v16, &v15, a3, a5);
  int v14 = v15;
  icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v16);
  return v12;
}

uint64_t unum_formatDecimal(uint64_t a1, char *__s, unsigned int a3, char *a4, unsigned int a5, uint64_t a6, int *a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*a7 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (a4) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = a5 == 0;
  }
  int v11 = !v10;
  if ((a5 & 0x80000000) != 0 || v11)
  {
    *a7 = 1;
    return 0xFFFFFFFFLL;
  }
  uint64_t v20 = &unk_1EDA4C7F0;
  long long v21 = 0xFFFFFFFFuLL;
  if (a6) {
    LODWORD(v21) = *(_DWORD *)a6;
  }
  if ((a3 & 0x80000000) != 0) {
    a3 = strlen(__s);
  }
  memset(v27, 0, sizeof(v27));
  icu::Formattable::Formattable(v27, __s, a3, a7);
  long long v23 = 0u;
  uint64_t v26 = 0;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v22 = &unk_1EDA47700;
  LOWORD(v23) = 2;
  if (a5) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v22, a4, 0, a5);
  }
  (*(void (**)(uint64_t, _OWORD *, void **, void **, int *))(*(void *)a1 + 40))(a1, v27, &v22, &v20, a7);
  if (a6) {
    *(void *)(a6 + 4) = *(void *)((char *)&v21 + 4);
  }
  long long v19 = (UChar *)a4;
  uint64_t v15 = icu::UnicodeString::extract((uint64_t)&v22, &v19, a5, a7);
  long long v18 = v19;
  icu::UnicodeString::~UnicodeString(&v18, (icu::UnicodeString *)&v22);
  icu::Formattable::~Formattable((icu::Formattable *)v27);
  icu::FieldPosition::~FieldPosition(v16, (icu::FieldPosition *)&v20);
  return v15;
}

uint64_t unum_formatDoubleCurrency(uint64_t a1, unint64_t a2, char *a3, unsigned int a4, unsigned int *a5, int *a6, double a7)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*a6 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  uint64_t v27 = &unk_1EDA47700;
  LOWORD(v28) = 2;
  if (a3 || a4) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v27, a3, 0, a4);
  }
  uint64_t v15 = (uint64_t *)&v24;
  long long v24 = &unk_1EDA4C7F0;
  long long v25 = 0xFFFFFFFFuLL;
  if (a5)
  {
    uint64_t v15 = (uint64_t *)*a5;
    LODWORD(v25) = *a5;
  }
  int v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x80, a2);
  if (v16)
  {
    long long v17 = (icu::UObject *)v16;
    unint64_t v23 = a2;
    icu::CurrencyAmount::CurrencyAmount(v16, &v23, a6, a7);
    v21[1] = v23;
    memset(v26, 0, sizeof(v26));
    icu::Formattable::Formattable((icu::Formattable *)v26, v17);
    (*(void (**)(uint64_t, _OWORD *, void **, void **, int *))(*(void *)a1 + 40))(a1, v26, &v27, &v24, a6);
    if (a5) {
      *(void *)(a5 + 1) = *(void *)((char *)&v25 + 4);
    }
    long long v22 = (UChar *)a3;
    uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v27, &v22, a4, a6);
    v21[0] = v22;
    icu::Formattable::~Formattable(v21, (icu::Formattable *)v26);
  }
  else
  {
    uint64_t v18 = 7;
    *a6 = 7;
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  icu::FieldPosition::~FieldPosition((void *)v18, (icu::FieldPosition *)&v24);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v27);
  return v7;
}

uint64_t unum_parse(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  sub_18CA1D0F4((uint64_t)v13, a1, a2, a3, a4, a5);
  uint64_t Long = icu::Formattable::getLong((icu::Formattable *)v13, (UErrorCode *)a5);
  icu::Formattable::~Formattable(v11, (icu::Formattable *)v13);
  return Long;
}

void sub_18CA1D0F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, int *a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*a6 <= 0)
  {
    memset(v14, 0, sizeof(v14));
    uint64_t v13 = a3;
    icu::UnicodeString::UnicodeString(v14, a4 == -1, &v13);
    int v11 = &unk_1EDA44670;
    unint64_t v12 = 0xFFFFFFFF00000000;
    if (a5) {
      LODWORD(v12) = *a5;
    }
    (*(void (**)(uint64_t, _OWORD *, uint64_t, void **))(*(void *)a2 + 160))(a2, v14, a1, &v11);
    int v10 = HIDWORD(v12);
    if (HIDWORD(v12) == -1)
    {
      if (!a5)
      {
LABEL_10:
        icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v11);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v14);
        return;
      }
      int v10 = v12;
    }
    else
    {
      *a6 = 9;
      if (!a5) {
        goto LABEL_10;
      }
    }
    *a5 = v10;
    goto LABEL_10;
  }
}

uint64_t unum_parseInt64(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  sub_18CA1D0F4((uint64_t)v13, a1, a2, a3, a4, a5);
  uint64_t Int64 = icu::Formattable::getInt64((icu::Formattable *)v13, (UErrorCode *)a5);
  icu::Formattable::~Formattable(v11, (icu::Formattable *)v13);
  return Int64;
}

double unum_parseDouble(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  sub_18CA1D0F4((uint64_t)v13, a1, a2, a3, a4, a5);
  double Double = icu::Formattable::getDouble((icu::Formattable *)v13, (UErrorCode *)a5);
  icu::Formattable::~Formattable(v11, (icu::Formattable *)v13);
  return Double;
}

uint64_t unum_parseDecimal(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, char *a5, uint64_t a6, int *a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*a7 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (a5) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = a6 == 0;
  }
  int v11 = !v10;
  if ((a6 & 0x80000000) != 0 || v11)
  {
    *a7 = 1;
    return 0xFFFFFFFFLL;
  }
  memset(v21, 0, sizeof(v21));
  icu::Formattable::Formattable((icu::Formattable *)v21);
  sub_18CA1D0F4((uint64_t)v21, a1, a2, a3, a4, a7);
  DecimalNumber = (const char *)icu::Formattable::getDecimalNumber((icu::Formattable *)v21, (UErrorCode *)a7);
  uint64_t v18 = *a7;
  if ((int)v18 <= 0)
  {
    uint64_t v19 = v17;
    if ((int)v17 <= (int)a6)
    {
      if (v17 == a6)
      {
        strncpy(a5, DecimalNumber, (int)v17);
        uint64_t v18 = 4294967172;
        *a7 = -124;
        uint64_t v19 = a6;
      }
      else
      {
        strcpy(a5, DecimalNumber);
      }
    }
    else
    {
      uint64_t v18 = 15;
      *a7 = 15;
    }
  }
  else
  {
    uint64_t v19 = 0xFFFFFFFFLL;
  }
  icu::Formattable::~Formattable((void *)v18, (icu::Formattable *)v21);
  return v19;
}

double unum_parseDoubleCurrency(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, UChar *a5, UErrorCode *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  double Double = 0.0;
  if (*(int *)a6 <= 0)
  {
    memset(v20, 0, sizeof(v20));
    uint64_t v19 = a2;
    icu::UnicodeString::UnicodeString(v20, a3 == -1, &v19);
    uint64_t v17 = &unk_1EDA44670;
    unint64_t v18 = 0xFFFFFFFF00000000;
    if (a4) {
      LODWORD(v18) = *a4;
    }
    *a6 = U_PARSE_ERROR;
    int v11 = (icu::CurrencyAmount *)(*(uint64_t (**)(uint64_t, _OWORD *, void **))(*(void *)a1 + 176))(a1, v20, &v17);
    unint64_t v12 = v11;
    if (HIDWORD(v18) == -1)
    {
      int v13 = v18;
      if (a4) {
        *a4 = v18;
      }
      if (v13 >= 1)
      {
        *a6 = U_ZERO_ERROR;
        uint64_t Currency = icu::CurrencyAmount::getCurrency(v11);
        u_strcpy(a5, (const UChar *)(Currency + 20));
        double Double = icu::Formattable::getDouble((icu::CurrencyAmount *)((char *)v12 + 8), a6);
      }
    }
    else if (a4)
    {
      *a4 = HIDWORD(v18);
    }
    if (v12) {
      (*(void (**)(icu::CurrencyAmount *))(*(void *)v12 + 8))(v12);
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v17);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v20);
  }
  return Double;
}

BOOL unum_hasAttribute(void *a1, int a2)
{
  if (a1) {
  return (a2 - 3) < 0x11 && ((0x1013Fu >> (a2 - 3)) & 1) != 0 || a1 != 0;
  }
}

uint64_t unum_getAttribute(icu::NumberFormat *a1, uint64_t a2)
{
  switch((int)a2)
  {
    case 3:
      uint64_t result = icu::NumberFormat::getMaximumIntegerDigits(a1);
      break;
    case 4:
    case 5:
      uint64_t result = icu::NumberFormat::getMinimumIntegerDigits(a1);
      break;
    case 6:
      uint64_t result = icu::NumberFormat::getMaximumFractionDigits(a1);
      break;
    case 7:
    case 8:
      uint64_t result = icu::NumberFormat::getMinimumFractionDigits(a1);
      break;
    case 11:
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)a1 + 272);
      uint64_t result = v5();
      break;
    case 19:
      uint64_t result = (*(uint64_t (**)(icu::NumberFormat *))(*(void *)a1 + 200))(a1);
      break;
    default:
      if (a1
      {
        int v6 = 0;
        uint64_t result = (*(uint64_t (**)(void *, uint64_t, int *))(*(void *)v4 + 312))(v4, a2, &v6);
      }
      else
      {
        uint64_t result = 0xFFFFFFFFLL;
      }
      break;
  }
  return result;
}

void *unum_setAttribute(void *lpsrc, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = lpsrc;
  switch((int)a2)
  {
    case 3:
      goto LABEL_6;
    case 4:
      int v6 = *(uint64_t (**)(void))(*(void *)lpsrc + 224);
      goto LABEL_25;
    case 5:
      (*(void (**)(void *, uint64_t))(*(void *)lpsrc + 224))(lpsrc, a3);
LABEL_6:
      uint64_t v7 = *(uint64_t (**)(void *, uint64_t))(*(void *)v5 + 216);
      int v8 = v5;
      uint64_t v9 = a3;
      return (void *)v7(v8, v9);
    case 6:
      goto LABEL_13;
    case 7:
      int v6 = *(uint64_t (**)(void))(*(void *)lpsrc + 240);
      goto LABEL_25;
    case 8:
      (*(void (**)(void *, uint64_t))(*(void *)lpsrc + 240))(lpsrc, a3);
LABEL_13:
      uint64_t v7 = *(uint64_t (**)(void *, uint64_t))(*(void *)v5 + 232);
      int v8 = v5;
      uint64_t v9 = a3;
      return (void *)v7(v8, v9);
    case 11:
      int v6 = *(uint64_t (**)(void))(*(void *)lpsrc + 280);
      goto LABEL_25;
    case 19:
      int v6 = *(uint64_t (**)(void))(*(void *)lpsrc + 192);
LABEL_25:
      lpsrc = (void *)v6();
      break;
    default:
      if (lpsrc)
      {
        if (lpsrc)
        {
          int v10 = 0;
          lpsrc = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, int *))(*(void *)lpsrc + 304))(lpsrc, a2, a3, &v10);
        }
      }
      break;
  }
  return lpsrc;
}

double unum_getDoubleAttribute(const void *a1, int a2)
{
  if (!a1) {
    return -1.0;
  }
  if (a2 != 12 || !v3) {
    return -1.0;
  }
  int v4 = *(void (**)(void))(*(void *)v3 + 408);

  v4();
  return result;
}

void *unum_setDoubleAttribute(void *result, int a2, double a3)
{
  if (result)
  {
    if (a2 == 12)
    {
      if (result)
      {
        int v6 = *(uint64_t (**)(__n128))(*(void *)result + 416);
        v5.n128_f64[0] = a3;
        return (void *)v6(v5);
      }
    }
  }
  return result;
}

uint64_t unum_getTextAttribute(void *lpsrc, int a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*a5 <= 0)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v32 = 0;
    long long v31 = 0u;
    long long v28 = &unk_1EDA47700;
    LOWORD(v29) = 2;
    if (a3 || a4)
    {
      icu::UnicodeString::setTo((icu::UnicodeString *)&v28, a3, 0, a4);
      if (!lpsrc) {
        goto LABEL_15;
      }
    }
    else if (!lpsrc)
    {
      goto LABEL_15;
    }
    if (v11)
    {
      switch(a2)
      {
        case 0:
          icu::DecimalFormat::getPositivePrefix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 1:
          icu::DecimalFormat::getPositiveSuffix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 2:
          icu::DecimalFormat::getNegativePrefix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 3:
          icu::DecimalFormat::getNegativeSuffix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 4:
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 440))(&v25);
          goto LABEL_21;
        case 5:
          uint64_t Currency = icu::NumberFormat::getCurrency(v11);
          icu::UnicodeString::UnicodeString((uint64_t)&v25, Currency);
          goto LABEL_21;
        default:
          goto LABEL_15;
      }
    }
    if (!v12) {
      goto LABEL_15;
    }
    int v13 = v12;
    if (a2 == 7)
    {
      int v18 = (*(uint64_t (**)(void *))(*(void *)v12 + 312))(v12);
      if (v18 >= 1)
      {
        int v19 = v18;
        uint64_t v20 = 0;
        do
        {
          (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*(void *)v13 + 320))(&v25, v13, v20);
          if ((v26 & 0x8000u) == 0) {
            uint64_t v21 = v26 >> 5;
          }
          else {
            uint64_t v21 = v27;
          }
          icu::UnicodeString::doAppend((uint64_t)&v28, (const icu::UnicodeString *)&v25, 0, v21);
          icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v25);
          LOWORD(v25) = 59;
          icu::UnicodeString::doAppend((uint64_t)&v28, (uint64_t)&v25, 0, 1);
          uint64_t v20 = (v20 + 1);
        }
        while (v19 != v20);
      }
      goto LABEL_22;
    }
    if (a2 == 6)
    {
      (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v12 + 392))(&v25, v12);
LABEL_21:
      icu::UnicodeString::operator=((icu::UnicodeString *)&v28, (icu::UnicodeString *)&v25);
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v25);
LABEL_22:
      long long v24 = (UChar *)a3;
      uint64_t v5 = icu::UnicodeString::extract((uint64_t)&v28, &v24, a4, a5);
      unint64_t v23 = v24;
      uint64_t v14 = (uint64_t)&v23;
      goto LABEL_23;
    }
LABEL_15:
    uint64_t v14 = 16;
    *a5 = 16;
    uint64_t v5 = 0xFFFFFFFFLL;
LABEL_23:
    icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v28);
    return v5;
  }
  return 0xFFFFFFFFLL;
}

void *unum_setTextAttribute(void *result, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*a5 <= 0)
  {
    uint64_t v7 = result;
    memset(v13, 0, sizeof(v13));
    icu::UnicodeString::UnicodeString((uint64_t)v13, a3, a4);
    if (v7)
    {
      if (v8)
      {
        uint64_t v9 = v8;
        switch(a2)
        {
          case 0:
            (*(void (**)(void *, _OWORD *))(*(void *)v8 + 368))(v8, v13);
            break;
          case 1:
            (*(void (**)(void *, _OWORD *))(*(void *)v8 + 384))(v8, v13);
            break;
          case 2:
            (*(void (**)(void *, _OWORD *))(*(void *)v8 + 376))(v8, v13);
            break;
          case 3:
            (*(void (**)(void *, _OWORD *))(*(void *)v8 + 392))(v8, v13);
            break;
          case 4:
            (*(void (**)(void *, _OWORD *))(*(void *)v8 + 448))(v8, v13);
            break;
          case 5:
            Terminateduint64_t Buffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v13);
            (*(void (**)(void *, uint64_t, int *))(*(void *)v9 + 248))(v9, TerminatedBuffer, a5);
            break;
          default:
            goto LABEL_10;
        }
        return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v13);
      }
    }
    else
    {
      int v11 = 0;
    }
    if (a2 == 6)
    {
      (*(void (**)(void *, _OWORD *, int *))(*(void *)v11 + 384))(v11, v13, a5);
    }
    else
    {
LABEL_10:
      uint64_t v10 = 16;
      *a5 = 16;
    }
    return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v13);
  }
  return result;
}

uint64_t unum_toPattern(void *lpsrc, int a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v23 = 0;
  long long v22 = 0u;
  int v19 = &unk_1EDA47700;
  LOWORD(v20) = 2;
  if (a3 || a4) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a3, 0, a4);
  }
  if (lpsrc)
  {
    if (v11)
    {
      uint64_t v12 = *v11;
      if (a2) {
        (*(void (**)(void))(v12 + 560))();
      }
      else {
        (*(void (**)(void))(v12 + 552))();
      }
    }
    else
    {
      if (v13)
      {
        (*(void (**)(void *__return_ptr))(*(void *)v13 + 304))(v18);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v19, (icu::UnicodeString *)v18);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v18);
      }
    }
  }
  uint64_t v17 = (UChar *)a3;
  uint64_t v5 = icu::UnicodeString::extract((uint64_t)&v19, &v17, a4, a5);
  int v16 = v17;
  icu::UnicodeString::~UnicodeString(&v16, (icu::UnicodeString *)&v19);
  return v5;
}

void *unum_getSymbol(const void *a1, unsigned int a2, UChar *a3, int a4, int *a5)
{
  if (!a5) {
    return 0;
  }
  if (*a5 > 0) {
    return 0;
  }
  if (a1 && a2 < 0x1D)
  {
    if (result)
    {
      uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)result + 320))(result);
      uint64_t v12 = a3;
      return (void *)icu::UnicodeString::extract(v10 + ((unint64_t)a2 << 6) + 8, &v12, a4, a5);
    }
    int v11 = 16;
  }
  else
  {
    double result = 0;
    int v11 = 1;
  }
  *a5 = v11;
  return result;
}

void unum_setSymbol(const void *a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a5 && *a5 <= 0)
  {
    if (a1 && a2 <= 0x1C && a3 && (int)a4 > -2)
    {
      if (v9)
      {
        uint64_t v10 = v9;
        bzero(v15, 0xB48uLL);
        int v11 = (const icu::DecimalFormatSymbols *)(*(uint64_t (**)(void *))(*(void *)v10 + 320))(v10);
        icu::DecimalFormatSymbols::DecimalFormatSymbols((icu::DecimalFormatSymbols *)v15, v11);
        icu::UnicodeString::UnicodeString((uint64_t)v14, a3, a4);
        sub_18C904B78((icu::UnicodeString *)v15, a2, v14, 1);
        icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v14);
        (*(void (**)(void *, unsigned char *))(*(void *)v10 + 336))(v10, v15);
        icu::DecimalFormatSymbols::~DecimalFormatSymbols((icu::DecimalFormatSymbols *)v15);
        return;
      }
      int v13 = 16;
    }
    else
    {
      int v13 = 1;
    }
    *a5 = v13;
  }
}

void *unum_applyPattern(const void *a1, int a2, UChar *s, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  if (a6) {
    uint64_t v9 = a6;
  }
  else {
    uint64_t v9 = &v14;
  }
  if (a4 == -1) {
    a4 = u_strlen(s);
  }
  memset(v15, 0, sizeof(v15));
  icu::UnicodeString::UnicodeString(v15, s, a4, a4);
  if (a1
  {
    uint64_t v11 = *v10;
    if (a2) {
      (*(void (**)(void))(v11 + 584))();
    }
    else {
      (*(void (**)(void))(v11 + 568))();
    }
  }
  else
  {
    uint64_t v12 = 16;
    *uint64_t v9 = 16;
  }
  return icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v15);
}

uint64_t unum_getLocaleByType(uint64_t a1, int a2, int *a3)
{
  if (a1) {
    return icu::Format::getLocaleID(a1, a2, a3);
  }
  if (*a3 <= 0) {
    *a3 = 1;
  }
  return 0;
}

uint64_t unum_setContext(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)result + 256))();
  }
  return result;
}

uint64_t unum_getContext(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 264))();
  }
  else {
    return 0;
  }
}

uint64_t *unum_parseToUFormattable(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, _DWORD *a5, int *a6)
{
  int v6 = a2;
  if (*a6 <= 0)
  {
    if (a1 && (a3 || !a4))
    {
      if (a2)
      {
        uint64_t v13 = 0;
      }
      else
      {
        int v6 = ufmt_open(a6, 0);
        uint64_t v13 = (uint64_t)v6;
      }
      sub_18CA1D0F4((uint64_t)v6, a1, a3, a4, a5, a6);
      if (*a6 >= 1 && v13)
      {
        ufmt_close(v13);
        return 0;
      }
    }
    else
    {
      *a6 = 1;
    }
  }
  return v6;
}

uint64_t unum_formatUFormattable(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*a6 > 0) {
    return 0;
  }
  if (!a1 || !a2) {
    goto LABEL_13;
  }
  int v11 = a4;
  if (!a3)
  {
    if (!a4) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v6 = 0;
    *a6 = 1;
    return v6;
  }
  if ((a4 & 0x80000000) != 0) {
    goto LABEL_13;
  }
LABEL_7:
  memset(v19, 0, sizeof(v19));
  icu::UnicodeString::UnicodeString(v19, a3, 0, a4);
  uint64_t v17 = &unk_1EDA4C7F0;
  long long v18 = 0xFFFFFFFFuLL;
  if (a5) {
    LODWORD(v18) = *(_DWORD *)a5;
  }
  (*(void (**)(uint64_t, uint64_t, _OWORD *, void **, int *))(*(void *)a1 + 40))(a1, a2, v19, &v17, a6);
  if (a5) {
    *(void *)(a5 + 4) = *(void *)((char *)&v18 + 4);
  }
  uint64_t v16 = a3;
  uint64_t v6 = icu::UnicodeString::extract((uint64_t)v19, &v16, v11, a6);
  uint64_t v15 = v16;
  icu::FieldPosition::~FieldPosition(&v15, (icu::FieldPosition *)&v17);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v19);
  return v6;
}

icu::NumberingSystem *unumsys_open(char *a1, UErrorCode *a2)
{
  int v8 = (uint64_t *)*MEMORY[0x1E4F143B8];
  icu::Locale::Locale(v8, (icu::Locale *)v7, a1, 0, 0, 0);
  uint64_t Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)v7, a2, v3);
  icu::Locale::~Locale(v5, (icu::Locale *)v7);
  return Instance;
}

icu::NumberingSystem *unumsys_openByName(icu::NumberingSystem *a1, char *a2, UErrorCode *a3)
{
  if (*(int *)a2 <= 0) {
    return icu::NumberingSystem::createInstanceByName(a1, a2, a3);
  }
  else {
    return 0;
  }
}

uint64_t unumsys_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

_OWORD *unumsys_openAvailableNames(icu::NumberingSystem *a1, UErrorCode *a2)
{
  AvailableNames = icu::NumberingSystem::getAvailableNames(a1, a2);

  return uenum_openFromStringEnumeration((uint64_t)AvailableNames, (int *)a1);
}

uint64_t unumsys_getDescription(uint64_t a1, UChar *a2, int a3, int *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  memset(v11, 0, sizeof(v11));
  (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 24))(v11);
  uint64_t v10 = a2;
  uint64_t v4 = icu::UnicodeString::extract((uint64_t)v11, &v10, a3, a4);
  uint64_t v9 = v10;
  icu::UnicodeString::~UnicodeString(&v9, (icu::UnicodeString *)v11);
  return v4;
}

uint64_t uplrule_select(icu::PluralRules *a1, int a2, UChar *a3, int a4, int *a5)
{
  return uplrules_select(a1, a3, a4, a5, (double)a2);
}

uint64_t *uplrules_open(char *a1, icu::UnifiedCache *a2)
{
  return uplrules_openForType(a1, 0, a2);
}

uint64_t *uplrules_openForType(char *a1, unint64_t a2, icu::UnifiedCache *a3)
{
  uint64_t v9 = (uint64_t *)*MEMORY[0x1E4F143B8];
  icu::Locale::Locale(v9, (icu::Locale *)v8, a1, 0, 0, 0);
  uint64_t v5 = icu::PluralRules::forLocale((icu::Locale *)v8, a2, a3);
  icu::Locale::~Locale(v6, (icu::Locale *)v8);
  return v5;
}

uint64_t uplrules_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t uplrules_select(icu::PluralRules *a1, UChar *a2, int a3, int *a4, double a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*a4 <= 0)
  {
    if (a2)
    {
      if ((a3 & 0x80000000) == 0)
      {
LABEL_5:
        memset(v12, 0, sizeof(v12));
        icu::PluralRules::select(a1, a5, (icu::UnicodeString *)v12);
        int v11 = a2;
        uint64_t v5 = icu::UnicodeString::extract((uint64_t)v12, &v11, a3, a4);
        uint64_t v10 = v11;
        icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)v12);
        return v5;
      }
    }
    else if (!a3)
    {
      goto LABEL_5;
    }
    uint64_t v5 = 0;
    *a4 = 1;
    return v5;
  }
  return 0;
}

uint64_t uplrules_selectFormatted(icu::PluralRules *a1, uint64_t a2, UChar *a3, int a4, int *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 0;
  }
  if (a3)
  {
    if ((a4 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v5 = 0;
    *a5 = 1;
    return v5;
  }
  if (a4) {
    goto LABEL_9;
  }
LABEL_6:
  int v11 = (const icu::IFixedDecimal *)sub_18C9608B0(a2, a5);
  if (*a5 <= 0)
  {
    memset(v14, 0, sizeof(v14));
    icu::PluralRules::select(a1, v11, (icu::UnicodeString *)v14);
    uint64_t v13 = a3;
    uint64_t v5 = icu::UnicodeString::extract((uint64_t)v14, &v13, a4, a5);
    uint64_t v12 = v13;
    icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)v14);
    return v5;
  }
  return 0;
}

uint64_t uplrules_selectForRange(icu::PluralRules *a1, uint64_t a2, UChar *a3, int a4, int *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*a5 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0)
      {
LABEL_5:
        uint64_t v10 = sub_18C992A7C(a2, a5);
        memset(v14, 0, sizeof(v14));
        icu::PluralRules::select(a1, v10, (const icu::UnicodeString *)a5, (uint64_t)v14);
        uint64_t v13 = a3;
        uint64_t v5 = icu::UnicodeString::extract((uint64_t)v14, &v13, a4, a5);
        uint64_t v12 = v13;
        icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)v14);
        return v5;
      }
    }
    else if (!a4)
    {
      goto LABEL_5;
    }
    uint64_t v5 = 0;
    *a5 = 1;
    return v5;
  }
  return 0;
}

uint64_t uplrules_selectWithFormat(icu::PluralRules *a1, const void *a2, UChar *a3, int a4, UErrorCode *a5, double a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    if (a1 && a2)
    {
      if (a3)
      {
        if ((a4 & 0x80000000) == 0) {
          goto LABEL_7;
        }
      }
      else if (!a4)
      {
LABEL_7:
        memset(v22, 0, sizeof(v22));
        icu::Formattable::Formattable((icu::Formattable *)v22, a6);
        memset(v21, 0, sizeof(v21));
        if (*(int *)a5 <= 0)
        {
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v20 = 0;
            memset(v19, 0, sizeof(v19));
            icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v19);
            icu::DecimalFormat::formatToDecimalQuantity(v15, (const icu::Formattable *)v22, (icu::number::impl::DecimalQuantity *)v19, a5);
            if (*(int *)a5 <= 0)
            {
              icu::PluralRules::select(a1, (const icu::IFixedDecimal *)v19, (icu::UnicodeString *)v21);
              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v19);
              goto LABEL_9;
            }
            icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v19);
          }
          else
          {
            double Double = icu::Formattable::getDouble((icu::Formattable *)v22, a5);
            if (*(int *)a5 <= 0)
            {
              icu::PluralRules::select(a1, Double, (icu::UnicodeString *)v21);
              goto LABEL_9;
            }
          }
        }
        *(void *)&v21[0] = &unk_1EDA47700;
        WORD4(v21[0]) = 2;
LABEL_9:
        long long v18 = a3;
        uint64_t v6 = icu::UnicodeString::extract((uint64_t)v21, &v18, a4, (int *)a5);
        uint64_t v17 = v18;
        icu::UnicodeString::~UnicodeString(&v17, (icu::UnicodeString *)v21);
        icu::Formattable::~Formattable(v12, (icu::Formattable *)v22);
        return v6;
      }
    }
    uint64_t v6 = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v6;
  }
  return 0;
}

_OWORD *uplrules_getKeywords(icu::PluralRules *a1, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  if (!a1)
  {
    UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_10:
    *a2 = v5;
    return 0;
  }
  uint64_t Keywords = icu::PluralRules::getKeywords(a1, a2);
  if (*(int *)a2 > 0) {
    return 0;
  }
  if (!Keywords)
  {
    UErrorCode v5 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_10;
  }

  return uenum_openFromStringEnumeration(Keywords, (int *)a2);
}

double uplrules_getSampleForKeyword(icu::PluralRules *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  double result = 0.0;
  if (*(int *)a3 <= 0)
  {
    if (a1)
    {
      double v9 = 0.0;
      double v10 = 0.0;
      icu::UnicodeString::UnicodeString((uint64_t)v8, a2);
      int Samples = icu::PluralRules::getSamples(a1, (const icu::UnicodeString *)v8, &v9, 2, a3);
      icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v8);
      if (Samples < 1)
      {
        return 0.0;
      }
      else
      {
        double result = v9;
        if (Samples != 1 && v9 == 0.0) {
          return v10;
        }
      }
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return result;
}

uint64_t sub_18CA1F790(uint64_t a1)
{
  uint64_t v2 = *(icu::RegexMatcher **)(a1 + 40);
  if (v2)
  {
    icu::RegexMatcher::~RegexMatcher(v2);
    icu::UMemory::operator delete(v3);
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = *(atomic_uint **)(a1 + 16);
  if (v4 && atomic_fetch_add(v4, 0xFFFFFFFF) == 1)
  {
    UErrorCode v5 = *(icu::RegexPattern **)(a1 + 8);
    if (v5)
    {
      icu::RegexPattern::~RegexPattern(v5);
      icu::UMemory::operator delete(v6);
    }
    uprv_free(*(void **)(a1 + 24));
    uprv_free(*(void **)(a1 + 16));
  }
  if (*(unsigned char *)(a1 + 60))
  {
    uint64_t v7 = *(void **)(a1 + 48);
    if (v7) {
      uprv_free(v7);
    }
  }
  *(_DWORD *)a1 = 0;
  return a1;
}

URegularExpression *__cdecl uregex_open(const UChar *pattern, int32_t patternLength, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  UErrorCode v5 = (uint64_t *)*(unsigned int *)status;
  if ((int)v5 > 0) {
    return 0;
  }
  if (!patternLength || !pattern || patternLength <= -2)
  {
    uint64_t v6 = 0;
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    return (URegularExpression *)v6;
  }
  uint64_t v12 = *(UText **)&flags;
  int32_t v13 = patternLength;
  if (patternLength == -1) {
    int32_t v13 = u_strlen(pattern);
  }
  int v14 = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, *(unint64_t *)&patternLength);
  uint64_t v6 = (uint64_t)v14;
  if (v14)
  {
    *(_DWORD *)int v14 = 1919252592;
    _OWORD v14[2] = 0;
    v14[3] = 0;
    v14[1] = 0;
    *((_DWORD *)v14 + 8) = 0;
    v14[5] = 0;
    _OWORD v14[6] = 0;
    *(uint64_t *)((char *)v14 + 53) = 0;
  }
  uint64_t v15 = uprv_malloc(4uLL);
  uint64_t v16 = (UChar *)uprv_malloc(2 * (v13 + 1));
  uint64_t v17 = v16;
  if (!v6 || !v15 || !v16)
  {
    *UErrorCode status = U_MEMORY_ALLOCATION_ERROR;
    if (v6)
    {
      long long v21 = (void *)sub_18CA1F790(v6);
      icu::UMemory::operator delete(v21);
    }
    uprv_free(v15);
    uprv_free(v17);
    return 0;
  }
  *(void *)(v6 + 16) = v15;
  *(void *)(v6 + 24) = v16;
  atomic_store(1u, (unsigned int *)v15);
  *(_DWORD *)(v6 + 32) = patternLength;
  u_memcpy(v16, pattern, v13);
  v17[v13] = 0;
  memset(&v23, 0, sizeof(v23));
  v23.magic = 878368812;
  v23.sizeOfStruct = 144;
  utext_openUChars(&v23, v17, patternLength, status);
  if (pe) {
    uint64_t v20 = icu::RegexPattern::compile(&v23, v12, pe, status, v19);
  }
  else {
    uint64_t v20 = icu::RegexPattern::compile(&v23, v12, status, v18, v19);
  }
  *(void *)(v6 + 8) = v20;
  utext_close(&v23);
  if (*(int *)status > 0
    || (*(void *)(v6 + 40) = icu::RegexPattern::matcher(*(icu::RegexPattern **)(v6 + 8), status), *(int *)status >= 1))
  {
    long long v22 = (void *)sub_18CA1F790(v6);
    icu::UMemory::operator delete(v22);
    return 0;
  }
  return (URegularExpression *)v6;
}

URegularExpression *__cdecl uregex_openUText(UText *pattern, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (!pattern || (int v8 = *(UText **)&flags, (v9 = utext_nativeLength(pattern)) == 0))
  {
    uint64_t v4 = 0;
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    return (URegularExpression *)v4;
  }
  int64_t v12 = v9;
  int32_t v13 = icu::UMemory::operator new(v11, (icu::UMemory *)0x40, v10);
  uint64_t v4 = (uint64_t)v13;
  if (v13)
  {
    *(_DWORD *)int32_t v13 = 1919252592;
    void v13[2] = 0;
    v13[3] = 0;
    v13[1] = 0;
    *((_DWORD *)v13 + 8) = 0;
    _OWORD v13[5] = 0;
    v13[6] = 0;
    *(uint64_t *)((char *)v13 + 53) = 0;
  }
  statusa[0] = U_ZERO_ERROR;
  int32_t v14 = utext_extract(pattern, 0, v12, 0, 0, statusa);
  uint64_t v15 = uprv_malloc(4uLL);
  uint64_t v16 = (UChar *)uprv_malloc(2 * (v14 + 1));
  uint64_t v17 = v16;
  if (!v4 || !v15 || !v16)
  {
    *UErrorCode status = U_MEMORY_ALLOCATION_ERROR;
    if (v4)
    {
      long long v22 = (void *)sub_18CA1F790(v4);
      icu::UMemory::operator delete(v22);
    }
    uprv_free(v15);
    uprv_free(v17);
    return 0;
  }
  *(void *)(v4 + 16) = v15;
  *(void *)(v4 + 24) = v16;
  atomic_store(1u, (unsigned int *)v15);
  *(_DWORD *)(v4 + 32) = v14;
  utext_extract(pattern, 0, v12, v16, v14 + 1, status);
  memset(&v24, 0, sizeof(v24));
  v24.magic = 878368812;
  v24.sizeOfStruct = 144;
  utext_openUChars(&v24, v17, v14, status);
  if (pe) {
    uint64_t v20 = icu::RegexPattern::compile(&v24, v8, pe, status, v19);
  }
  else {
    uint64_t v20 = icu::RegexPattern::compile(&v24, v8, status, v18, v19);
  }
  *(void *)(v4 + 8) = v20;
  utext_close(&v24);
  if (*(int *)status > 0
    || (*(void *)(v4 + 40) = icu::RegexPattern::matcher(*(icu::RegexPattern **)(v4 + 8), status), *(int *)status >= 1))
  {
    UText v23 = (void *)sub_18CA1F790(v4);
    icu::UMemory::operator delete(v23);
    return 0;
  }
  return (URegularExpression *)v4;
}

void uregex_close(URegularExpression *regexp)
{
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    UChar v1 = (void *)sub_18CA1F790((uint64_t)regexp);
    icu::UMemory::operator delete(v1);
  }
}

URegularExpression *__cdecl uregex_clone(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && (UErrorCode v5 = (uint64_t *)*(unsigned int *)regexp, v5 == 1919252592))
    {
      uint64_t v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, (unint64_t)status);
      uint64_t v2 = (uint64_t)v6;
      if (v6)
      {
        *(_DWORD *)uint64_t v6 = 1919252592;
        v6[2] = 0;
        v6[3] = 0;
        v6[1] = 0;
        *((_DWORD *)v6 + 8) = 0;
        v6[5] = 0;
        v6[6] = 0;
        *(uint64_t *)((char *)v6 + 53) = 0;
        v6[5] = (uint64_t)icu::RegexPattern::matcher(*((icu::RegexPattern **)regexp + 1), status);
        if (*(int *)status < 1)
        {
          *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)regexp + 8);
          unint64_t v10 = (atomic_uint *)*((void *)regexp + 2);
          *(void *)(v2 + 24) = *((void *)regexp + 3);
          *(_DWORD *)(v2 + 32) = *((_DWORD *)regexp + 8);
          atomic_fetch_add(v10, 1u);
          return (URegularExpression *)v2;
        }
        uint64_t v7 = (void *)sub_18CA1F790(v2);
        icu::UMemory::operator delete(v7);
        return 0;
      }
      UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
    }
    else
    {
      uint64_t v2 = 0;
      UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *UErrorCode status = v8;
    return (URegularExpression *)v2;
  }
  return 0;
}

const UChar *__cdecl uregex_pattern(const URegularExpression *regexp, int32_t *patLength, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (patLength) {
      *patLength = *((_DWORD *)regexp + 8);
    }
    return (const UChar *)*((void *)regexp + 3);
  }
  else
  {
    double result = 0;
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return result;
}

UText *__cdecl uregex_patternUText(const URegularExpression *regexp, UErrorCode *status)
{
  return (UText *)icu::RegexPattern::patternText(*((icu::RegexPattern **)regexp + 1), status);
}

int32_t uregex_flags(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexPattern::flags(*((icu::RegexPattern **)regexp + 1));
    }
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

void uregex_setText(URegularExpression *regexp, const UChar *text, int32_t textLength, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592 && text && textLength > -2)
    {
      if (*((unsigned char *)regexp + 60))
      {
        UErrorCode v8 = (void *)*((void *)regexp + 6);
        if (v8) {
          uprv_free(v8);
        }
      }
      *((void *)regexp + 6) = text;
      *((_DWORD *)regexp + 14) = textLength;
      *((unsigned char *)regexp + 60) = 0;
      memset(&v9, 0, sizeof(v9));
      v9.magic = 878368812;
      v9.sizeOfStruct = 144;
      utext_openUChars(&v9, text, textLength, status);
      icu::RegexMatcher::reset(*((icu::RegexMatcher **)regexp + 5), &v9);
      utext_close(&v9);
    }
    else
    {
      *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

void uregex_setUText(URegularExpression *regexp, UText *text, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592 && text)
    {
      if (*((unsigned char *)regexp + 60))
      {
        UErrorCode v5 = (void *)*((void *)regexp + 6);
        if (v5) {
          uprv_free(v5);
        }
      }
      *((void *)regexp + 6) = 0;
      *((_DWORD *)regexp + 14) = -1;
      *((unsigned char *)regexp + 60) = 1;
      uint64_t v6 = (icu::RegexMatcher *)*((void *)regexp + 5);
      icu::RegexMatcher::reset(v6, text);
    }
    else
    {
      *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

const UChar *__cdecl uregex_getText(URegularExpression *regexp, int32_t *textLength, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    chunkContents = (UChar *)*((void *)regexp + 6);
    if (!chunkContents)
    {
      uint64_t v7 = (UText *)icu::RegexMatcher::inputText(*((icu::RegexMatcher **)regexp + 5));
      int64_t v8 = utext_nativeLength(v7);
      int64_t v9 = v8;
      if (!v7->chunkNativeStart && v8 == v7->chunkNativeLimit && v8 == v7->nativeIndexingLimit)
      {
        chunkContents = (UChar *)v7->chunkContents;
        *((void *)regexp + 6) = chunkContents;
        *((_DWORD *)regexp + 14) = v8;
        *((unsigned char *)regexp + 60) = 0;
      }
      else
      {
        UErrorCode statusa = U_ZERO_ERROR;
        int32_t v10 = utext_extract(v7, 0, v8, 0, 0, &statusa);
        *((_DWORD *)regexp + 14) = v10;
        chunkContents = (UChar *)uprv_malloc(2 * (v10 + 1));
        utext_extract(v7, 0, v9, chunkContents, *((_DWORD *)regexp + 14) + 1, status);
        *((void *)regexp + 6) = chunkContents;
        *((unsigned char *)regexp + 60) = 1;
      }
    }
    if (textLength) {
      *textLength = *((_DWORD *)regexp + 14);
    }
  }
  else
  {
    chunkContents = 0;
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return chunkContents;
}

UText *__cdecl uregex_getUText(URegularExpression *regexp, UText *dest, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::getInput(*((icu::RegexMatcher **)regexp + 5), dest, status);
    }
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return dest;
}

void uregex_refreshUText(URegularExpression *regexp, UText *text, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::refreshInputText(*((const UText ***)regexp + 5), text, status);
    }
    else {
      *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

UBool uregex_matches(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return uregex_matches64(regexp, startIndex, status);
}

UBool uregex_matches64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    *UErrorCode status = v5;
    return 0;
  }
  if (!*((void *)regexp + 6) && !*((unsigned char *)regexp + 60))
  {
    UErrorCode v5 = U_REGEX_INVALID_STATE;
    goto LABEL_9;
  }
  int v3 = (icu::RegexMatcher *)*((void *)regexp + 5);
  if (startIndex == -1) {
    return icu::RegexMatcher::matches(v3, status);
  }
  else {
    return icu::RegexMatcher::matches(v3, startIndex, status);
  }
}

UBool uregex_lookingAt(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return uregex_lookingAt64(regexp, startIndex, status);
}

UBool uregex_lookingAt64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    *UErrorCode status = v5;
    return 0;
  }
  if (!*((void *)regexp + 6) && !*((unsigned char *)regexp + 60))
  {
    UErrorCode v5 = U_REGEX_INVALID_STATE;
    goto LABEL_9;
  }
  int v3 = (icu::RegexMatcher *)*((void *)regexp + 5);
  if (startIndex == -1) {
    return icu::RegexMatcher::lookingAt(v3, status);
  }
  else {
    return icu::RegexMatcher::lookingAt(v3, startIndex, status);
  }
}

UBool uregex_find(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return uregex_find64(regexp, startIndex, status);
}

UBool uregex_find64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_11:
    *UErrorCode status = v7;
    return 0;
  }
  if (!*((void *)regexp + 6) && !*((unsigned char *)regexp + 60))
  {
    UErrorCode v7 = U_REGEX_INVALID_STATE;
    goto LABEL_11;
  }
  UErrorCode v5 = (icu::RegexMatcher *)*((void *)regexp + 5);
  if (startIndex == -1)
  {
    icu::RegexMatcher::resetPreserveRegion(v5);
    int64_t v8 = (icu::RegexMatcher *)*((void *)regexp + 5);
    return icu::RegexMatcher::find(v8, status);
  }
  else
  {
    return icu::RegexMatcher::find(v5, startIndex, status);
  }
}

UBool uregex_findNext(URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((unsigned char *)regexp + 60)) {
        return icu::RegexMatcher::find(*((icu::RegexMatcher **)regexp + 5), status);
      }
      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }
    else
    {
      UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *UErrorCode status = v3;
  }
  return 0;
}

int32_t uregex_groupCount(URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::groupCount(*((icu::RegexMatcher **)regexp + 5));
    }
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

int32_t uregex_groupNumberFromName(URegularExpression *regexp, const UChar *groupName, int32_t nameLength, UErrorCode *status)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(int *)status > 0) {
    return 0;
  }
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    uint64_t v6 = (icu::RegexPattern *)*((void *)regexp + 1);
    icu::UnicodeString::UnicodeString((uint64_t)v9, (uint64_t)groupName, *(uint64_t *)&nameLength);
    int32_t v4 = icu::RegexPattern::groupNumberFromName(v6, (const icu::UnicodeString *)v9, status);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v9);
  }
  else
  {
    int32_t v4 = 0;
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v4;
}

int32_t uregex_groupNumberFromCName(URegularExpression *regexp, const char *groupName, int32_t nameLength, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexPattern::groupNumberFromName(*((icu::RegexPattern **)regexp + 1), groupName, *(uint64_t *)&nameLength, status);
    }
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

int32_t uregex_group(URegularExpression *regexp, int32_t groupNum, UChar *dest, int32_t destCapacity, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v12 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_12:
    int32_t v5 = 0;
    goto LABEL_13;
  }
  int v8 = destCapacity;
  uint64_t v11 = *((void *)regexp + 6);
  if (!v11 && !*((unsigned char *)regexp + 60))
  {
    UErrorCode v12 = U_REGEX_INVALID_STATE;
    goto LABEL_12;
  }
  if (destCapacity < 0 || !dest && destCapacity)
  {
    int32_t v5 = 0;
    UErrorCode v12 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_13:
    *UErrorCode status = v12;
    return v5;
  }
  int32_t v14 = (icu::RegexMatcher *)*((void *)regexp + 5);
  if (!destCapacity || v11)
  {
    int v19 = icu::RegexMatcher::start(v14, groupNum, status);
    int v20 = icu::RegexMatcher::end(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
    if (*(int *)status <= 0)
    {
      int32_t v5 = v20 - v19;
      if (v20 - v19 >= v8)
      {
        if (v5 == v8) {
          UErrorCode v21 = U_STRING_NOT_TERMINATED_WARNING;
        }
        else {
          UErrorCode v21 = U_BUFFER_OVERFLOW_ERROR;
        }
        *UErrorCode status = v21;
      }
      else
      {
        dest[v5] = 0;
        int v8 = v20 - v19;
      }
      if (v8 >= 1) {
        u_memcpy(dest, (const UChar *)(*((void *)regexp + 6) + 2 * v19), v8);
      }
      return v5;
    }
    return 0;
  }
  int64_t v15 = icu::RegexMatcher::start64(v14, groupNum, status);
  uint64_t v16 = icu::RegexMatcher::end64(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
  if (*(int *)status > 0) {
    return 0;
  }
  int64_t v17 = v16;
  long long v18 = (UText *)icu::RegexMatcher::inputText(*((icu::RegexMatcher **)regexp + 5));

  return utext_extract(v18, v15, v17, dest, v8, status);
}

UText *__cdecl uregex_groupUText(URegularExpression *regexp, int32_t groupNum, UText *dest, int64_t *groupLength, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((unsigned char *)regexp + 60))
      {
        int32_t v5 = (icu::RegexMatcher *)*((void *)regexp + 5);
        return icu::RegexMatcher::group(v5, groupNum, dest, groupLength, status);
      }
      UErrorCode v7 = U_REGEX_INVALID_STATE;
    }
    else
    {
      UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *UErrorCode status = v7;
  }
  UErrorCode statusa = U_ZERO_ERROR;
  if (!dest) {
    return utext_openUChars(0, 0, 0, &statusa);
  }
  return dest;
}

int32_t uregex_start(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return uregex_start64(regexp, groupNum, status);
}

int64_t uregex_start64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((unsigned char *)regexp + 60)) {
        return icu::RegexMatcher::start64(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
      }
      UErrorCode v4 = U_REGEX_INVALID_STATE;
    }
    else
    {
      UErrorCode v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *UErrorCode status = v4;
  }
  return 0;
}

int32_t uregex_end(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return uregex_end64(regexp, groupNum, status);
}

int64_t uregex_end64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((unsigned char *)regexp + 60)) {
        return icu::RegexMatcher::end64(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
      }
      UErrorCode v4 = U_REGEX_INVALID_STATE;
    }
    else
    {
      UErrorCode v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *UErrorCode status = v4;
  }
  return 0;
}

void uregex_reset(URegularExpression *regexp, int32_t index, UErrorCode *status)
{
}

void uregex_reset64(URegularExpression *regexp, int64_t index, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((unsigned char *)regexp + 60))
      {
        icu::RegexMatcher::reset(*((void *)regexp + 5), index, status);
        return;
      }
      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }
    else
    {
      UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *UErrorCode status = v3;
  }
}

void uregex_setRegion(URegularExpression *regexp, int32_t regionStart, int32_t regionLimit, UErrorCode *status)
{
}

void uregex_setRegion64(URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((unsigned char *)regexp + 60))
      {
        icu::RegexMatcher::region(*((icu::RegexMatcher **)regexp + 5), regionStart, regionLimit, status);
        return;
      }
      UErrorCode v4 = U_REGEX_INVALID_STATE;
    }
    else
    {
      UErrorCode v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *UErrorCode status = v4;
  }
}

void uregex_setRegionAndStart(URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, int64_t startIndex, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((unsigned char *)regexp + 60))
      {
        icu::RegexMatcher::region(*((void *)regexp + 5), regionStart, regionLimit, startIndex, status);
        return;
      }
      UErrorCode v5 = U_REGEX_INVALID_STATE;
    }
    else
    {
      UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *UErrorCode status = v5;
  }
}

int32_t uregex_regionStart(const URegularExpression *regexp, UErrorCode *status)
{
  return uregex_regionStart64(regexp, status);
}

int64_t uregex_regionStart64(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (*((void *)regexp + 6) || *((unsigned char *)regexp + 60)) {
      return (int)icu::RegexMatcher::regionStart(*((icu::RegexMatcher **)regexp + 5));
    }
    UErrorCode v3 = U_REGEX_INVALID_STATE;
  }
  else
  {
    UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  int64_t result = 0;
  *UErrorCode status = v3;
  return result;
}

int32_t uregex_regionEnd(const URegularExpression *regexp, UErrorCode *status)
{
  return uregex_regionEnd64(regexp, status);
}

int64_t uregex_regionEnd64(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (*((void *)regexp + 6) || *((unsigned char *)regexp + 60)) {
      return (int)icu::RegexMatcher::regionEnd(*((icu::RegexMatcher **)regexp + 5));
    }
    UErrorCode v3 = U_REGEX_INVALID_STATE;
  }
  else
  {
    UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  int64_t result = 0;
  *UErrorCode status = v3;
  return result;
}

UBool uregex_hasTransparentBounds(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::hasTransparentBounds(*((icu::RegexMatcher **)regexp + 5));
    }
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

void uregex_useTransparentBounds(URegularExpression *regexp, UBool b, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::useTransparentBounds(*((void *)regexp + 5), b);
    }
    else {
      *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

UBool uregex_hasAnchoringBounds(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::hasAnchoringBounds(*((icu::RegexMatcher **)regexp + 5));
    }
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

void uregex_useAnchoringBounds(URegularExpression *regexp, UBool b, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::useAnchoringBounds(*((void *)regexp + 5), b);
    }
    else {
      *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

UBool uregex_hitEnd(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((unsigned char *)regexp + 60)) {
        return icu::RegexMatcher::hitEnd(*((icu::RegexMatcher **)regexp + 5));
      }
      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }
    else
    {
      UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *UErrorCode status = v3;
  }
  return 0;
}

UBool uregex_requireEnd(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((unsigned char *)regexp + 60)) {
        return icu::RegexMatcher::requireEnd(*((icu::RegexMatcher **)regexp + 5));
      }
      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }
    else
    {
      UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *UErrorCode status = v3;
  }
  return 0;
}

void uregex_setTimeLimit(URegularExpression *regexp, int32_t limit, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::setTimeLimit(*((void *)regexp + 5), limit, status);
    }
    else {
      *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

int32_t uregex_getTimeLimit(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::getTimeLimit(*((icu::RegexMatcher **)regexp + 5));
    }
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

void uregex_setStackLimit(URegularExpression *regexp, int32_t limit, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::setStackLimit(*((char **)regexp + 5), limit, status);
    }
    else {
      *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

int32_t uregex_getStackLimit(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::getStackLimit(*((icu::RegexMatcher **)regexp + 5));
    }
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

void uregex_setMatchCallback(URegularExpression *regexp, URegexMatchCallback *callback, const void *context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::setMatchCallback(*((void *)regexp + 5), (signed __int8 (*)(const void *, int))callback, context, status);
    }
    else {
      *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

void uregex_getMatchCallback(const URegularExpression *regexp, URegexMatchCallback **callback, const void **context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::getMatchCallback(*((void *)regexp + 5), (signed __int8 (**)(const void *, int))callback, context, status);
    }
    else {
      *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

void uregex_setFindProgressCallback(URegularExpression *regexp, URegexFindProgressCallback *callback, const void *context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::setFindProgressCallback(*((void *)regexp + 5), (signed __int8 (*)(const void *, uint64_t))callback, context, status);
    }
    else {
      *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

void uregex_getFindProgressCallback(const URegularExpression *regexp, URegexFindProgressCallback **callback, const void **context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::getFindProgressCallback(*((void *)regexp + 5), (signed __int8 (**)(const void *, uint64_t))callback, context, status);
    }
    else {
      *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

int32_t uregex_replaceAll(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar *destBuf, int32_t destCapacity, UErrorCode *status)
{
  destBufa = destBuf;
  int32_t destCapacitya = destCapacity;
  if (*(int *)status > 0) {
    return 0;
  }
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v14 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_22:
    int32_t result = 0;
LABEL_24:
    *UErrorCode status = v14;
    return result;
  }
  if (!*((void *)regexp + 6) && !*((unsigned char *)regexp + 60))
  {
    UErrorCode v14 = U_REGEX_INVALID_STATE;
    goto LABEL_22;
  }
  if (!replacementText
    || replacementLength < -1
    || (!destBuf ? (v11 = destCapacity <= 0) : (v11 = 1), v11 ? (int v12 = 0) : (int v12 = 1), destCapacity < 0 || v12))
  {
    int32_t result = 0;
    UErrorCode v14 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_24;
  }
  uregex_reset64(regexp, 0, status);
  UErrorCode v15 = *status;
  for (int i = 0;
        uregex_findNext(regexp, &v15);
  int32_t result = uregex_appendTail_0(regexp, &destBufa, &destCapacitya, status) + i;
  UErrorCode v14 = v15;
  if (v15 >= U_ILLEGAL_ARGUMENT_ERROR) {
    goto LABEL_24;
  }
  return result;
}

UText *__cdecl uregex_replaceAllUText(URegularExpression *regexp, UText *replacement, UText *dest, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (!*((void *)regexp + 6) && !*((unsigned char *)regexp + 60))
    {
      UErrorCode v5 = U_REGEX_INVALID_STATE;
      goto LABEL_9;
    }
    if (replacement) {
      return icu::RegexMatcher::replaceAll(*((icu::RegexMatcher **)regexp + 5), replacement, dest, status);
    }
  }
  UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
  *UErrorCode status = v5;
  return 0;
}

int32_t uregex_replaceFirst(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar *destBuf, int32_t destCapacity, UErrorCode *status)
{
  destBufa = destBuf;
  int32_t destCapacitya = destCapacity;
  if (*(int *)status > 0) {
    return 0;
  }
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v14 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_20:
    int32_t result = 0;
LABEL_22:
    *UErrorCode status = v14;
    return result;
  }
  if (!*((void *)regexp + 6) && !*((unsigned char *)regexp + 60))
  {
    UErrorCode v14 = U_REGEX_INVALID_STATE;
    goto LABEL_20;
  }
  if (!replacementText
    || replacementLength < -1
    || (!destBuf ? (v11 = destCapacity <= 0) : (v11 = 1), v11 ? (int v12 = 0) : (int v12 = 1), destCapacity < 0 || v12))
  {
    int32_t result = 0;
    UErrorCode v14 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_22;
  }
  uregex_reset64(regexp, 0, status);
  if (uregex_find64(regexp, 0, status)) {
    int32_t appended = uregex_appendReplacement_0(regexp, replacementText, replacementLength, &destBufa, &destCapacitya, status);
  }
  else {
    int32_t appended = 0;
  }
  return uregex_appendTail_0(regexp, &destBufa, &destCapacitya, status) + appended;
}

UText *__cdecl uregex_replaceFirstUText(URegularExpression *regexp, UText *replacement, UText *dest, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (!*((void *)regexp + 6) && !*((unsigned char *)regexp + 60))
    {
      UErrorCode v5 = U_REGEX_INVALID_STATE;
      goto LABEL_9;
    }
    if (replacement) {
      return icu::RegexMatcher::replaceFirst(*((icu::RegexMatcher **)regexp + 5), replacement, dest, status);
    }
  }
  UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
  *UErrorCode status = v5;
  return 0;
}

int32_t uregex_appendReplacement_0(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar **destBuf, int32_t *destCapacity, UErrorCode *status)
{
  int v9 = replacementLength;
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  UErrorCode v12 = *status;
  if (destCapacity) {
    BOOL v13 = v12 == U_BUFFER_OVERFLOW_ERROR;
  }
  else {
    BOOL v13 = 0;
  }
  char v14 = !v13;
  if (!v13)
  {
    if (v12 <= U_ZERO_ERROR)
    {
      if (!regexp) {
        goto LABEL_32;
      }
      goto LABEL_14;
    }
    return 0;
  }
  if (*destCapacity) {
    return 0;
  }
  *UErrorCode status = U_ZERO_ERROR;
  if (!regexp)
  {
LABEL_32:
    UErrorCode v26 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_33:
    int v15 = 0;
LABEL_35:
    *UErrorCode status = v26;
    return v15;
  }
LABEL_14:
  if (*(_DWORD *)regexp != 1919252592) {
    goto LABEL_32;
  }
  uint64_t v16 = *((void *)regexp + 6);
  if (!v16 && !*((unsigned char *)regexp + 60))
  {
    UErrorCode v26 = U_REGEX_INVALID_STATE;
    goto LABEL_33;
  }
  if (!replacementText
    || replacementLength < -1
    || !destBuf
    || !destCapacity
    || ((v17 = *destBuf, unint64_t v18 = *destCapacity, (int)v18 > 0) ? (v19 = v17 == 0) : (v19 = 0),
        v19 || (v18 & 0x80000000) != 0))
  {
    int v15 = 0;
    UErrorCode v26 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_35;
  }
  uint64_t v20 = *((void *)regexp + 5);
  if (!*(unsigned char *)(v20 + 130))
  {
    int v15 = 0;
    UErrorCode v26 = U_REGEX_INVALID_STATE;
    goto LABEL_35;
  }
  if (replacementLength == -1)
  {
    int v9 = u_strlen(replacementText);
    uint64_t v16 = *((void *)regexp + 6);
  }
  char v75 = v14;
  uint64_t v74 = v20;
  if (v16)
  {
    UErrorCode v21 = *(UText **)(v20 + 32);
    if (v21->pFuncs->mapNativeIndexToUTF16)
    {
      statusa[0] = U_ZERO_ERROR;
      int32_t v22 = utext_extract(v21, 0, *(void *)(v20 + 152), 0, 0, statusa);
      uint64_t v23 = v20;
      int32_t v24 = v22;
      statusa[0] = U_ZERO_ERROR;
      int v25 = utext_extract(*(UText **)(v23 + 32), *(void *)(v23 + 152), *(void *)(v23 + 136), 0, 0, statusa) + v22;
    }
    else
    {
      uint64_t v28 = v20;
      int32_t v24 = *(_DWORD *)(v20 + 152);
      int v25 = *(_DWORD *)(v28 + 136);
    }
    BOOL v29 = __OFSUB__(v25, v24);
    uint64_t v30 = (v25 - v24);
    if (((int)v30 < 0) ^ v29 | (v30 == 0))
    {
      int v15 = 0;
    }
    else
    {
      unint64_t v31 = 0;
      do
      {
        if (v31 < v18) {
          v17[v31] = *(_WORD *)(*((void *)regexp + 6) + 2 * v24 + 2 * v31);
        }
        ++v31;
      }
      while (v30 != v31);
      int v15 = v30;
    }
  }
  else
  {
    statusa[0] = U_ZERO_ERROR;
    int v15 = utext_extract(*(UText **)(v20 + 32), *(void *)(v20 + 152), *(void *)(v20 + 136), v17, v18, statusa);
  }
  if (v9 >= 1)
  {
    int32_t v32 = 0;
    unint64_t v76 = v18;
    uint64_t v77 = v17;
    while (1)
    {
      if (*(int *)status > 0) {
        goto LABEL_149;
      }
      uint64_t v33 = v32;
      int v34 = replacementText[v32];
      uint64_t v35 = v32 + 1;
      int32_t offset = v35;
      if (v34 != 36)
      {
        if (v34 == 92)
        {
          if ((int)v35 >= v9) {
            goto LABEL_149;
          }
          int v36 = replacementText[v35];
          if ((v36 & 0xFFFFFFDF) != 0x55
            || (UChar32 v37 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18C9B7D38, &offset, v9, (void *)replacementText), v37 == -1))
          {
            if (v15 < (int)v18) {
              v17[v15] = v36;
            }
            ++v15;
            ++offset;
            goto LABEL_144;
          }
          if (v37 >= 0x10000)
          {
            if ((int)v18 > v15) {
              v17[v15] = (v37 >> 10) - 10304;
            }
            uint64_t v60 = v15 + 1;
            if ((int)v60 < (int)v18) {
              v17[v60] = v37 & 0x3FF | 0xDC00;
            }
            v15 += 2;
            goto LABEL_144;
          }
          if ((int)v18 > v15) {
            v17[v15] = v37;
          }
        }
        else if ((int)v18 > v15)
        {
          v17[v15] = v34;
        }
        ++v15;
        goto LABEL_144;
      }
      if ((int)v35 >= v9)
      {
        if (!u_isdigit(-1))
        {
LABEL_147:
          UErrorCode v73 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
LABEL_148:
          int64_t v17 = v77;
          *UErrorCode status = v73;
          goto LABEL_149;
        }
LABEL_84:
        int32_t v48 = offset;
        if (offset >= v9)
        {
          int32_t v47 = 0;
          goto LABEL_137;
        }
        int v49 = 0;
        int32_t v50 = 0;
        int32_t v78 = *(_DWORD *)(*(void *)(*(void *)(v74 + 8) + 136) + 8);
        while (2)
        {
          UChar32 v51 = replacementText[v48];
          if ((v51 & 0xF800) == 0xD800)
          {
            if ((v51 & 0x400) != 0)
            {
              if (v48 >= 1)
              {
                int v56 = replacementText[v48 - 1];
                BOOL v54 = (v56 & 0xFC00) == 55296;
                int v55 = v51 - 56613888 + (v56 << 10);
                goto LABEL_92;
              }
            }
            else
            {
              uint64_t v52 = v48 + 1;
              if (v52 != v9)
              {
                int v53 = replacementText[v52];
                BOOL v54 = (v53 & 0xFC00) == 56320;
                int v55 = (v51 << 10) - 56613888 + v53;
LABEL_92:
                if (v54) {
                  UChar32 v51 = v55;
                }
              }
            }
          }
          if (!u_isdigit(v51))
          {
            int32_t v47 = v50;
            goto LABEL_137;
          }
          int32_t v57 = u_charDigitValue(v51);
          int32_t v47 = v57 + 10 * v50;
          if (v47 > v78)
          {
            int32_t v47 = v50;
            if (v49) {
              goto LABEL_137;
            }
            UErrorCode v73 = U_INDEX_OUTOFBOUNDS_ERROR;
            unint64_t v18 = v76;
            goto LABEL_148;
          }
          uint64_t v58 = offset;
          int32_t v48 = ++offset;
          BOOL v59 = (replacementText[v58] & 0xFC00) != 0xD800 || v48 == v9;
          if (!v59 && (replacementText[v48] & 0xFC00) == 0xDC00)
          {
            int32_t v48 = v58 + 2;
            int32_t offset = v58 + 2;
          }
          --v49;
          int32_t v50 = v57 + 10 * v50;
          if (v48 >= v9) {
            goto LABEL_137;
          }
          continue;
        }
      }
      UChar32 v38 = replacementText[(int)v35];
      uint64_t v39 = v33 + 2;
      if ((v38 & 0xFC00) == 0xD800 && v39 != v9)
      {
        int v41 = replacementText[v39];
        BOOL v13 = (v41 & 0xFC00) == 56320;
        UChar32 v42 = (v38 << 10) - 56613888 + v41;
        if (v13) {
          UChar32 v38 = v42;
        }
      }
      if (u_isdigit(v38)) {
        goto LABEL_84;
      }
      if (v38 != 123) {
        goto LABEL_147;
      }
      uint64_t v84 = 0;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v81 = 0u;
      *(void *)UErrorCode statusa = &unk_1EDA47700;
      LOWORD(v81) = 2;
      uint64_t v43 = offset;
      int32_t v44 = ++offset;
      BOOL v45 = (replacementText[v43] & 0xFC00) != 0xD800 || v44 == v9;
      if (!v45 && (replacementText[v44] & 0xFC00) == 0xDC00) {
        int32_t offset = v43 + 2;
      }
      unint64_t v46 = *(unsigned int *)status;
      if ((int)v46 > 0)
      {
LABEL_76:
        int32_t v47 = 0;
        goto LABEL_136;
      }
      while (1)
      {
        unint64_t v46 = offset;
        if (offset >= v9) {
          goto LABEL_135;
        }
        int32_t v61 = ++offset;
        unsigned int v62 = replacementText[v46];
        if ((v62 & 0xFC00) == 0xD800 && v61 != v9)
        {
          int v64 = replacementText[v61];
          if ((v64 & 0xFC00) == 0xDC00)
          {
            int32_t offset = v46 + 2;
            unsigned int v62 = (v62 << 10) - 56613888 + v64;
          }
        }
        if ((v62 & 0xFFFFFFDF) - 65 >= 0x1A && v62 - 49 > 8) {
          break;
        }
        icu::UnicodeString::append((uint64_t)statusa, v62);
LABEL_128:
        unint64_t v46 = *(unsigned int *)status;
        if (v62 == 125 || (int)v46 >= 1) {
          goto LABEL_76;
        }
      }
      if (v62 != 125) {
        break;
      }
      unint64_t v46 = *((void *)regexp + 1);
      uint64_t v67 = *(void *)(v46 + 192);
      if (!v67 || (int32_t v47 = uhash_geti(v67, (uint64_t)statusa)) == 0)
      {
LABEL_135:
        int32_t v47 = 0;
        *UErrorCode status = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
      }
LABEL_136:
      icu::UnicodeString::~UnicodeString((void *)v46, (icu::UnicodeString *)statusa);
LABEL_137:
      if (*(int *)status > 0)
      {
        unint64_t v18 = v76;
        int64_t v17 = v77;
        goto LABEL_149;
      }
      unint64_t v18 = v76;
      if (v77) {
        BOOL v68 = &v77[v15];
      }
      else {
        BOOL v68 = 0;
      }
      v15 += uregex_group(regexp, v47, v68, (v76 - v15) & ~(((int)v76 - v15) >> 31), status);
      if (*status == U_BUFFER_OVERFLOW_ERROR)
      {
        *UErrorCode status = U_ZERO_ERROR;
        int64_t v17 = v77;
        goto LABEL_144;
      }
      int64_t v17 = v77;
      if (*(int *)status > 0) {
        goto LABEL_149;
      }
LABEL_144:
      int32_t v32 = offset;
      if (offset >= v9) {
        goto LABEL_149;
      }
    }
    *UErrorCode status = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
    goto LABEL_128;
  }
LABEL_149:
  if (v15 >= (int)v18)
  {
    if (*(int *)status <= 0)
    {
      if (v15 == *destCapacity) {
        UErrorCode v69 = U_STRING_NOT_TERMINATED_WARNING;
      }
      else {
        UErrorCode v69 = U_BUFFER_OVERFLOW_ERROR;
      }
      *UErrorCode status = v69;
    }
  }
  else
  {
    v17[v15] = 0;
  }
  if (v15 >= 1)
  {
    int32_t v70 = *destCapacity;
    if (*destCapacity >= 1)
    {
      long long v71 = *destBuf;
      if (v15 >= (int)v18)
      {
        int32_t v72 = 0;
        *destBuf = &v71[v18];
      }
      else
      {
        *destBuf = &v71[v15];
        int32_t v72 = v70 - v15;
      }
      *destCapacity = v72;
    }
  }
  if ((v75 & 1) == 0 && *(int *)status <= 0)
  {
    UErrorCode v26 = U_BUFFER_OVERFLOW_ERROR;
    goto LABEL_35;
  }
  return v15;
}

void uregex_appendReplacementUText(URegularExpression *regexp, UText *replacementText, UText *dest, UErrorCode *status)
{
}

int32_t uregex_appendTail_0(URegularExpression *regexp, UChar **destBuf, int32_t *destCapacity, UErrorCode *status)
{
  UErrorCode v8 = *status;
  if (destCapacity) {
    BOOL v9 = v8 == U_BUFFER_OVERFLOW_ERROR;
  }
  else {
    BOOL v9 = 0;
  }
  char v10 = !v9;
  if (!v9)
  {
    if (v8 <= U_ZERO_ERROR)
    {
      if (!regexp) {
        goto LABEL_30;
      }
      goto LABEL_14;
    }
LABEL_12:
    LODWORD(v11) = 0;
    return v11;
  }
  if (*destCapacity) {
    goto LABEL_12;
  }
  *UErrorCode status = U_ZERO_ERROR;
  if (!regexp)
  {
LABEL_30:
    LODWORD(v11) = 0;
    UErrorCode v13 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_31:
    *UErrorCode status = v13;
    return v11;
  }
LABEL_14:
  if (*(_DWORD *)regexp != 1919252592) {
    goto LABEL_30;
  }
  uint64_t v12 = *((void *)regexp + 6);
  if (!v12 && !*((unsigned char *)regexp + 60))
  {
    LODWORD(v11) = 0;
    UErrorCode v13 = U_REGEX_INVALID_STATE;
    goto LABEL_31;
  }
  LODWORD(v11) = 0;
  UErrorCode v13 = U_ILLEGAL_ARGUMENT_ERROR;
  if (!destBuf || !destCapacity) {
    goto LABEL_31;
  }
  LODWORD(v11) = 0;
  char v14 = *destBuf;
  unint64_t v15 = *destCapacity;
  BOOL v16 = (int)v15 > 0 && v14 == 0;
  if (v16 || (v15 & 0x80000000) != 0) {
    goto LABEL_31;
  }
  uint64_t v17 = *((void *)regexp + 5);
  if (v12)
  {
    uint64_t v18 = 144;
    if (!*(unsigned char *)(v17 + 130)) {
      uint64_t v18 = 152;
    }
    int64_t v19 = *(void *)(v17 + v18);
    if (v19 == -1)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      uint64_t v20 = *(UText **)(v17 + 32);
      if (v20->pFuncs->mapNativeIndexToUTF16)
      {
        UErrorCode statusa = U_ZERO_ERROR;
        LODWORD(v19) = utext_extract(v20, 0, v19, 0, 0, &statusa);
      }
    }
    int v22 = *((_DWORD *)regexp + 14);
    uint64_t v11 = (v22 - v19);
    if (v22 != v19)
    {
      unint64_t v23 = 0;
      uint64_t v24 = *((void *)regexp + 6) + 2 * (int)v19;
      do
      {
        if (v22 == -1 && !*(_WORD *)(v24 + 2 * v23))
        {
          *((_DWORD *)regexp + 14) = v19 + v23;
          LODWORD(v11) = v23;
          break;
        }
        if (v23 >= v15)
        {
          if (v22 >= 1)
          {
            LODWORD(v11) = v22 - v19;
            break;
          }
        }
        else
        {
          v14[v23] = *(_WORD *)(v24 + 2 * v23);
        }
        ++v23;
      }
      while (v11 != v23);
    }
  }
  else
  {
    if (*(unsigned char *)(v17 + 130))
    {
      int64_t v21 = *(void *)(v17 + 144);
    }
    else if (*(void *)(v17 + 152) == -1)
    {
      int64_t v21 = 0;
    }
    else
    {
      int64_t v21 = *(void *)(v17 + 152);
    }
    LODWORD(v11) = utext_extract(*(UText **)(v17 + 32), v21, *(void *)(v17 + 48), *destBuf, *destCapacity, status);
  }
  if ((int)v11 < (int)v15)
  {
    v14[(int)v11] = 0;
    *destBuf += (int)v11;
    int32_t v25 = *destCapacity - v11;
LABEL_59:
    *destCapacity = v25;
    goto LABEL_60;
  }
  if (v11 == v15) {
    UErrorCode v26 = U_STRING_NOT_TERMINATED_WARNING;
  }
  else {
    UErrorCode v26 = U_BUFFER_OVERFLOW_ERROR;
  }
  *UErrorCode status = v26;
  if (*destBuf)
  {
    int32_t v25 = 0;
    *destBuf += v15;
    goto LABEL_59;
  }
LABEL_60:
  if ((v10 & 1) == 0 && *(int *)status <= 0)
  {
    UErrorCode v13 = U_BUFFER_OVERFLOW_ERROR;
    goto LABEL_31;
  }
  return v11;
}

UText *__cdecl uregex_appendTailUText(URegularExpression *regexp, UText *dest, UErrorCode *status)
{
  return icu::RegexMatcher::appendTail(*((icu::RegexMatcher **)regexp + 5), dest, status);
}

int32_t uregex_split(URegularExpression *regexp, UChar *destBuf, int32_t destCapacity, int32_t *requiredCapacity, UChar *destFields[], int32_t destFieldsCapacity, UErrorCode *status)
{
  if (*(int *)status > 0) {
    return 0;
  }
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (!*((void *)regexp + 6) && !*((unsigned char *)regexp + 60))
    {
      UErrorCode v10 = U_REGEX_INVALID_STATE;
      goto LABEL_18;
    }
    if (destBuf) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = destCapacity <= 0;
    }
    char v8 = !v7;
    if ((destCapacity & 0x80000000) == 0 && (v8 & 1) == 0 && destFields && destFieldsCapacity > 0) {
      return sub_18CA21AE0((icu::RegexMatcher **)regexp, (uint64_t)destBuf, destCapacity, requiredCapacity, destFields, destFieldsCapacity, status);
    }
  }
  UErrorCode v10 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_18:
  *UErrorCode status = v10;
  return 0;
}

uint64_t sub_18CA21AE0(icu::RegexMatcher **a1, uint64_t a2, int a3, _DWORD *a4, void *a5, int a6, UErrorCode *a7)
{
  icu::RegexMatcher::reset(a1[5]);
  UErrorCode v13 = a1[5];
  int64_t v14 = *((void *)v13 + 6);
  if (!v14) {
    return 0;
  }
  uint64_t v35 = a4;
  UText ut = (UText *)*((void *)v13 + 4);
  int v15 = icu::RegexMatcher::groupCount(v13);
  UErrorCode status = U_ZERO_ERROR;
  int v16 = a6 - 1;
  int v34 = a6;
  if (a6 < 2)
  {
    int64_t v20 = 0;
    int v19 = 0;
    LODWORD(v18) = 0;
LABEL_25:
    if (v14 > v20)
    {
      if (v19 != v16) {
        uint64_t v18 = (a5[v16] - *a5) >> 1;
      }
      if (a2) {
        unint64_t v31 = (UChar *)(a2 + 2 * (int)v18);
      }
      else {
        unint64_t v31 = 0;
      }
      a5[v16] = v31;
      LODWORD(v18) = v18 + utext_extract(ut, v20, v14, v31, (a3 - v18) & ~((a3 - (int)v18) >> 31), a7) + 1;
      int v19 = v16;
    }
  }
  else
  {
    int v17 = v15;
    LODWORD(v18) = 0;
    int v19 = 0;
    int v37 = 2 - a6;
    int v38 = a6 - 1;
    int64_t v20 = 0;
    int v36 = a5 + 1;
    int64_t v39 = v14;
    long long v40 = a5;
    while (1)
    {
      int v21 = icu::RegexMatcher::find(a1[5]);
      if (a2) {
        int v22 = (UChar *)(a2 + 2 * (int)v18);
      }
      else {
        int v22 = 0;
      }
      a5[v19] = v22;
      if (!v21)
      {
        LODWORD(v18) = v18 + utext_extract(ut, v20, v14, v22, (a3 - v18) & ~((a3 - (int)v18) >> 31), a7) + 1;
        goto LABEL_40;
      }
      int32_t v23 = utext_extract(ut, v20, *((void *)a1[5] + 17), v22, (a3 - v18) & ~((a3 - (int)v18) >> 31), &status);
      if (status == U_BUFFER_OVERFLOW_ERROR) {
        UErrorCode status = U_ZERO_ERROR;
      }
      else {
        *a7 = status;
      }
      LODWORD(v18) = v18 + v23 + 1;
      uint64_t v24 = a1[5];
      int64_t v20 = *((void *)v24 + 18);
      if (v19 != v16 && v17 >= 1)
      {
        int64_t v41 = *((void *)v24 + 18);
        uint64_t v25 = 0;
        do
        {
          int v26 = v25 + 1;
          unsigned int v27 = (UChar *)(a2 + 2 * (int)v18);
          v36[v19 + v25] = v27;
          UErrorCode status = U_ZERO_ERROR;
          int32_t v28 = uregex_group((URegularExpression *)a1, v25 + 1, v27, (a3 - v18) & ~((a3 - (int)v18) >> 31), &status);
          if (status == U_BUFFER_OVERFLOW_ERROR) {
            UErrorCode status = U_ZERO_ERROR;
          }
          else {
            *a7 = status;
          }
          LODWORD(v18) = v18 + v28 + 1;
          BOOL v29 = v37 + v19 + v25++ == 0;
        }
        while (!v29 && v26 < v17);
        v19 += v25;
        int64_t v14 = v39;
        a5 = v40;
        int v16 = v38;
        int64_t v20 = v41;
      }
      if (v20 == v14) {
        break;
      }
      if (++v19 >= v16) {
        goto LABEL_25;
      }
    }
    if ((int)v18 >= a3)
    {
      if (v19 < v16) {
        ++v19;
      }
    }
    else
    {
      int32_t v32 = (_WORD *)(a2 + 2 * (int)v18);
      *int32_t v32 = 0;
      if (v19 < v16) {
        ++v19;
      }
      a5[v19] = v32;
    }
    LODWORD(v18) = v18 + 1;
  }
LABEL_40:
  uint64_t v30 = (v19 + 1);
  if ((int)v30 < v34) {
    bzero(&a5[v19 + 1], 8 * (v34 - v19 - 2) + 8);
  }
  if (v35) {
    *uint64_t v35 = v18;
  }
  if ((int)v18 > a3) {
    *a7 = U_BUFFER_OVERFLOW_ERROR;
  }
  return v30;
}

int32_t uregex_splitUText(URegularExpression *regexp, UText *destFields[], int32_t destFieldsCapacity, UErrorCode *status)
{
  BOOL v7 = (icu::RegexMatcher *)*((void *)regexp + 5);
  char v8 = (UText *)icu::RegexMatcher::inputText(v7);

  return icu::RegexMatcher::split((int64_t *)v7, v8, destFields, destFieldsCapacity, status);
}

URegularExpression *__cdecl uregex_openC(const char *pattern, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(int *)status > 0) {
    return 0;
  }
  if (pattern)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v12, pattern);
    if ((BYTE8(v12) & 0x11) != 0)
    {
      char v8 = 0;
    }
    else if ((BYTE8(v12) & 2) != 0)
    {
      char v8 = (const UChar *)((unint64_t)&v12 | 0xA);
    }
    else
    {
      char v8 = (const UChar *)*((void *)&v13 + 1);
    }
    if ((SWORD4(v12) & 0x8000u) == 0) {
      int32_t v9 = WORD4(v12) >> 5;
    }
    else {
      int32_t v9 = HIDWORD(v12);
    }
    UErrorCode v4 = uregex_open(v8, v9, flags, pe, status);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v12);
  }
  else
  {
    UErrorCode v4 = 0;
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v4;
}

_OWORD *uregion_getAvailable(int a1, icu::Region *a2)
{
  Available = icu::Region::getAvailable(a1, a2);

  return uenum_openFromStringEnumeration((uint64_t)Available, (int *)a2);
}

BOOL uregion_areEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

_OWORD *uregion_getContainedRegions(unsigned int **a1, UErrorCode *a2)
{
  ContainedRegions = icu::Region::getContainedRegions(a1, a2);

  return uenum_openFromStringEnumeration((uint64_t)ContainedRegions, (int *)a2);
}

_OWORD *uregion_getContainedRegionsOfType(unsigned int **a1, int a2, icu::Region *a3)
{
  ContainedRegions = icu::Region::getContainedRegions(a1, a2, a3);

  return uenum_openFromStringEnumeration((uint64_t)ContainedRegions, (int *)a3);
}

_OWORD *uregion_getPreferredValues(unsigned int **a1, UErrorCode *a2)
{
  PreferredValues = icu::Region::getPreferredValues(a1, a2);

  return uenum_openFromStringEnumeration((uint64_t)PreferredValues, (int *)a2);
}

void *usearch_open(const UChar *a1, int32_t a2, const UChar *a3, int32_t a4, char *a5, uint64_t a6, const icu::Locale *a7)
{
  if (*(int *)a7 > 0) {
    return 0;
  }
  if (a5)
  {
    long long v14 = ucol_open(a5, a7);
    int32_t result = usearch_openFromCollator(a1, a2, a3, a4, v14, a6, (int *)a7);
    if (!result || *(int *)a7 >= 1)
    {
      if (v14) {
        ucol_close((uint64_t)v14);
      }
      return 0;
    }
    *((unsigned char *)result + 3168) = 1;
  }
  else
  {
    int32_t result = 0;
    *(_DWORD *)a7 = 1;
  }
  return result;
}

void *usearch_openFromCollator(const UChar *a1, int32_t a2, const UChar *a3, int32_t a4, const void *a5, uint64_t a6, int *a7)
{
  if (*a7 > 0) {
    return 0;
  }
  if (!a1 || !a3 || !a5) {
    goto LABEL_24;
  }
  if (ucol_getAttribute((uint64_t)a5, 7, a7) == 17)
  {
    BOOL v7 = 0;
    int v16 = 16;
LABEL_25:
    *a7 = v16;
    return v7;
  }
  if (*a7 > 0) {
    return 0;
  }
  if (!qword_1EB20BE50)
  {
    qword_1EB20BE50 = icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a7, v15);
    sub_18CA0A25C(0x1Au, (uint64_t)sub_18CA24AB8);
    if (*a7 > 0) {
      return 0;
    }
  }
  if (a4 == -1) {
    a4 = u_strlen(a3);
  }
  if (a2 == -1) {
    a2 = u_strlen(a1);
  }
  if (a4 < 1 || a2 <= 0)
  {
LABEL_24:
    BOOL v7 = 0;
    int v16 = 1;
    goto LABEL_25;
  }
  int v17 = uprv_malloc(0xC78uLL);
  BOOL v7 = v17;
  if (!v17)
  {
    int v16 = 7;
    goto LABEL_25;
  }
  v17[391] = a5;
  int Strength = ucol_getStrength((uint64_t)a5);
  *((_DWORD *)v7 + 793) = Strength;
  if (Strength == 1) {
    int v19 = -256;
  }
  else {
    int v19 = -1;
  }
  if (!Strength) {
    int v19 = -65536;
  }
  *((_DWORD *)v7 + 794) = v19;
  *((unsigned char *)v7 + 3184) = ucol_getAttribute((uint64_t)a5, 1, a7) == 20;
  *((_DWORD *)v7 + 795) = ucol_getVariableTop((uint64_t)a5, a7);
  v7[392] = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a7, v20);
  if (*a7 >= 1)
  {
LABEL_23:
    uprv_free(v7);
    return 0;
  }
  int v22 = uprv_malloc(0x30uLL);
  void *v7 = v22;
  if (!v22)
  {
    *a7 = 7;
    goto LABEL_23;
  }
  *(void *)int v22 = a3;
  uint64_t v22[2] = a4;
  v7[1] = a1;
  *((_DWORD *)v7 + 4) = a2;
  void v7[3] = 0;
  v7[133] = 0;
  *((void *)v22 + 2) = 0;
  *((void *)v22 + 3) = a6;
  if (a6)
  {
    ubrk_setText(a6, a3, a4, (UErrorCode *)a7);
    int v22 = (_DWORD *)*v7;
  }
  *((unsigned char *)v7 + 3168) = 0;
  *((void *)v22 + 4) = 0xFFFFFFFFLL;
  v7[395] = 0;
  v7[393] = ucol_openElements(a5, (uint64_t)a3, a4, a7);
  v7[394] = 0;
  if (*a7 >= 1
    || (uint64_t v23 = *v7,
        *(_DWORD *)(v23 + 12) = 0,
        *(_WORD *)(v23 + 40) = 257,
        sub_18CA22448((uint64_t)v7, (UErrorCode *)a7),
        *a7 >= 1))
  {
    usearch_close((char *)v7);
    return 0;
  }
  return v7;
}

void usearch_close(char *a1)
{
  if (a1)
  {
    uint64_t v2 = (char *)*((void *)a1 + 3);
    if (v2 != a1 + 32 && v2 != 0) {
      uprv_free(v2);
    }
    UErrorCode v4 = (char *)*((void *)a1 + 133);
    if (v4) {
      BOOL v5 = v4 == a1 + 1072;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      uprv_free(v4);
    }
    uint64_t v6 = (void *)*((void *)a1 + 394);
    if (v6)
    {
      BOOL v7 = sub_18CA0E294(v6);
      icu::UMemory::operator delete(v7);
    }
    ucol_closeElements(*((icu::CollationElementIterator **)a1 + 393));
    ucol_closeElements(*((icu::CollationElementIterator **)a1 + 395));
    if (a1[3168])
    {
      uint64_t v8 = *((void *)a1 + 391);
      if (v8) {
        ucol_close(v8);
      }
    }
    int32_t v9 = *(void **)a1;
    if (*(void *)(*(void *)a1 + 16))
    {
      ubrk_close(*(void *)(*(void *)a1 + 16));
      int32_t v9 = *(void **)a1;
    }
    uprv_free(v9);
    uprv_free(a1);
  }
}

uint64_t sub_18CA22448(uint64_t result, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v3 = result;
    if (*(_DWORD *)(result + 3172))
    {
      UErrorCode v4 = *(unsigned __int16 **)(result + 8);
      uint64_t v5 = *(int *)(result + 16);
      int v22 = v4;
      *(unsigned char *)(result + 3120) = (unsigned __int16)sub_18CA24AC8(qword_1EB20BE50, &v22, &v4[v5]) >> 8;
      uint64_t v6 = v5 - 1;
      if ((v4[v5 - 1] & 0xFC00) == 0xDC00 && (int)v5 >= 2)
      {
        if ((v4[(v5 - 2)] & 0xFC00) == 0xD800) {
          uint64_t v6 = (v5 - 2);
        }
        else {
          uint64_t v6 = v6;
        }
      }
      int v22 = &v4[v6];
      char v8 = sub_18CA24AC8(qword_1EB20BE50, &v22, &v4[v5]);
    }
    else
    {
      char v8 = 0;
      *(unsigned char *)(v3 + 3120) = 0;
    }
    *(unsigned char *)(v3 + 3121) = v8;
    int32_t v9 = *(void **)(v3 + 1064);
    if (v9)
    {
      if (v9 != (void *)(v3 + 1072)) {
        uprv_free(v9);
      }
      *(void *)(v3 + 1064) = 0;
    }
    int v10 = *(_DWORD *)(v3 + 16);
    uint64_t v11 = *(icu::CollationElementIterator **)(v3 + 3160);
    if (v11)
    {
      int32_t result = (uint64_t)ucol_setText(*(uint64_t **)(v3 + 3160), *(void *)(v3 + 8), *(_DWORD *)(v3 + 16), a2);
    }
    else
    {
      int32_t result = (uint64_t)ucol_openElements(*(const void **)(v3 + 3128), *(void *)(v3 + 8), *(_DWORD *)(v3 + 16), (int *)a2);
      uint64_t v11 = (icu::CollationElementIterator *)result;
      *(void *)(v3 + 3160) = result;
    }
    if (*(int *)a2 <= 0)
    {
      long long v12 = *(void **)(v3 + 24);
      if (v12 != (void *)(v3 + 32) && v12) {
        uprv_free(v12);
      }
      int32_t result = ucol_next(v11, a2);
      if (result != -1)
      {
        uint64_t v13 = 0;
        int v21 = v10 + 1;
        int v14 = 256;
        long long v15 = (_DWORD *)(v3 + 32);
        while (1)
        {
          if (*(int *)a2 > 0)
          {
            uint64_t v18 = v15;
            LODWORD(v19) = v13;
            goto LABEL_49;
          }
          unsigned int v16 = *(_DWORD *)(v3 + 3176) & result;
          if (*(unsigned char *)(v3 + 3184))
          {
            if (*(_DWORD *)(v3 + 3180) > v16)
            {
              if (*(int *)(v3 + 3172) <= 2) {
                goto LABEL_35;
              }
              v16 &= 0xFFFF0000;
            }
          }
          else if (*(int *)(v3 + 3172) >= 3 && v16 == 0)
          {
            unsigned int v16 = 0xFFFF;
            goto LABEL_37;
          }
          if (!v16)
          {
LABEL_35:
            uint64_t v18 = v15;
            uint64_t v19 = v13;
            goto LABEL_45;
          }
LABEL_37:
          int32_t result = ucol_getOffset(v11);
          uint64_t v19 = (v13 + 1);
          if (v19 == v14)
          {
            int v14 = v21 + v14 - result;
            int32_t result = (uint64_t)uprv_malloc((4 * v14));
            if (!result)
            {
              *a2 = U_MEMORY_ALLOCATION_ERROR;
              return result;
            }
            if (*(int *)a2 > 0) {
              return result;
            }
            uint64_t v18 = (_DWORD *)result;
            memcpy((void *)result, v15, 4 * v13);
            v18[v13] = v16;
          }
          else
          {
            UErrorCode v20 = *a2;
            v15[v13] = v16;
            uint64_t v18 = v15;
            if (v20 > U_ZERO_ERROR) {
              return result;
            }
          }
          if (v15 != v18 && v15 != (_DWORD *)(v3 + 32)) {
            uprv_free(v15);
          }
LABEL_45:
          int32_t result = ucol_next(v11, a2);
          uint64_t v13 = v19;
          long long v15 = v18;
          if (result == -1) {
            goto LABEL_49;
          }
        }
      }
      LODWORD(v19) = 0;
      uint64_t v18 = (_DWORD *)(v3 + 32);
LABEL_49:
      v18[v19] = 0;
      *(void *)(v3 + 24) = v18;
      *(_DWORD *)(v3 + 20) = v19;
    }
  }
  return result;
}

double usearch_setOffset(uint64_t *a1, uint64_t a2, UErrorCode *a3)
{
  if (a1 && *(int *)a3 <= 0)
  {
    uint64_t v4 = *a1;
    if ((a2 & 0x80000000) != 0 || *(_DWORD *)(v4 + 8) < (int)a2)
    {
      *a3 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
    else
    {
      ucol_setOffset(a1[393], a2, a3);
      uint64_t v4 = *a1;
    }
    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(v4 + 32) = 0xFFFFFFFFLL;
    *(unsigned char *)(v4 + 41) = 0;
  }
  return result;
}

uint64_t usearch_getOffset(void *a1)
{
  uint64_t v1 = 0xFFFFFFFFLL;
  if (a1)
  {
    int Offset = ucol_getOffset(a1[393]);
    if (Offset > *(_DWORD *)(*a1 + 8) || Offset <= -1) {
      return 0xFFFFFFFFLL;
    }
    else {
      return Offset;
    }
  }
  return v1;
}

uint64_t usearch_setAttribute(uint64_t result, int a2, int a3, int *a4)
{
  if (result && *a4 <= 0)
  {
    if (a2 == 2)
    {
      if ((a3 - 3) <= 1)
      {
        *(_WORD *)(*(void *)result + 14) = a3;
        return result;
      }
      *(_WORD *)(*(void *)result + 14) = 0;
    }
    else if (a2 == 1)
    {
      *(unsigned char *)(*(void *)result + 13) = a3 == 1;
    }
    else if (a2)
    {
      *a4 = 1;
    }
    else
    {
      *(unsigned char *)(*(void *)result + 12) = a3 == 1;
    }
  }
  if (a3 == 5) {
    *a4 = 1;
  }
  return result;
}

uint64_t usearch_getAttribute(uint64_t a1, int a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      int v2 = *(unsigned __int8 *)(*(void *)a1 + 13);
      return v2 != 0;
    }
    if (!a2)
    {
      int v2 = *(unsigned __int8 *)(*(void *)a1 + 12);
      return v2 != 0;
    }
    return 0xFFFFFFFFLL;
  }
  __int16 v4 = *(_WORD *)(*(void *)a1 + 14);
  if (((v4 - 3) & 0xFFFE) != 0) {
    return 2;
  }
  return v4;
}

uint64_t usearch_getMatchedStart(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(*(void *)a1 + 32);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t usearch_getMatchedText(uint64_t *a1, void *__dst, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a1 || a3 < 0 || !__dst && a3)
  {
    *a4 = 1;
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = *(int *)(*a1 + 32);
  if (v10 == -1)
  {
    u_terminateUChars((uint64_t)__dst, a3, 0, a4);
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = *(unsigned int *)(v9 + 36);
  if ((int)v11 >= a3) {
    int v12 = a3;
  }
  else {
    int v12 = *(_DWORD *)(v9 + 36);
  }
  if (v12 >= 1)
  {
    memcpy(__dst, (const void *)(*(void *)v9 + 2 * v10), 2 * v12);
    uint64_t v11 = *(unsigned int *)(*a1 + 36);
  }

  return u_terminateUChars((uint64_t)__dst, a3, v11, a4);
}

uint64_t usearch_getMatchedLength(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(*(void *)a1 + 36);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t usearch_setBreakIterator(uint64_t result, uint64_t a2, UErrorCode *a3)
{
  if (result && *(int *)a3 <= 0)
  {
    uint64_t v3 = *(void *)result;
    *(void *)(*(void *)result + 24) = a2;
    if (a2) {
      return ubrk_setText(a2, *(const UChar **)v3, *(_DWORD *)(v3 + 8), a3);
    }
  }
  return result;
}

uint64_t usearch_getBreakIterator(uint64_t result)
{
  if (result) {
    return *(void *)(*(void *)result + 24);
  }
  return result;
}

uint64_t usearch_setText(uint64_t result, UChar *s, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    int32_t v5 = a3;
    if (a3 && (uint64_t v6 = result) != 0 && s && a3 > -2)
    {
      if (a3 == -1) {
        int32_t v5 = u_strlen(s);
      }
      uint64_t v8 = *(void *)v6;
      *(void *)uint64_t v8 = s;
      *(_DWORD *)(v8 + 8) = v5;
      ucol_setText(*(uint64_t **)(v6 + 3144), (uint64_t)s, v5, a4);
      uint64_t v9 = *(void *)v6;
      *(void *)(v9 + 32) = 0xFFFFFFFFLL;
      *(unsigned char *)(v9 + 41) = 1;
      uint64_t v10 = *(void *)(v9 + 24);
      if (v10)
      {
        ubrk_setText(v10, s, v5, a4);
        uint64_t v9 = *(void *)v6;
      }
      double result = *(void *)(v9 + 16);
      if (result)
      {
        return ubrk_setText(result, s, v5, a4);
      }
    }
    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return result;
}

uint64_t *usearch_getText(uint64_t *result, _DWORD *a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    *a2 = *(_DWORD *)(*result + 8);
    return *(uint64_t **)v2;
  }
  return result;
}

uint64_t usearch_setCollator(uint64_t result, const void *a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (a2)
    {
      uint64_t v5 = result;
      if (result)
      {
        uint64_t v6 = *(void **)(result + 3152);
        if (v6)
        {
          BOOL v7 = sub_18CA0E294(v6);
          icu::UMemory::operator delete(v7);
        }
        *(void *)(v5 + 3152) = 0;
        ucol_closeElements(*(icu::CollationElementIterator **)(v5 + 3144));
        ucol_closeElements(*(icu::CollationElementIterator **)(v5 + 3160));
        *(void *)(v5 + 3160) = 0;
        *(void *)(v5 + 3144) = 0;
        if (*(unsigned char *)(v5 + 3168))
        {
          uint64_t v8 = *(void *)(v5 + 3128);
          if ((const void *)v8 != a2)
          {
            ucol_close(v8);
            *(unsigned char *)(v5 + 3168) = 0;
          }
        }
        *(void *)(v5 + 3128) = a2;
        int Strength = ucol_getStrength((uint64_t)a2);
        *(_DWORD *)(v5 + 3172) = Strength;
        if (Strength == 1) {
          int v10 = -256;
        }
        else {
          int v10 = -1;
        }
        if (!Strength) {
          int v10 = -65536;
        }
        *(_DWORD *)(v5 + 3176) = v10;
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        if (v11)
        {
          ubrk_close(v11);
          *(void *)(*(void *)v5 + 16) = 0;
        }
        *(unsigned char *)(v5 + 3184) = ucol_getAttribute((uint64_t)a2, 1, a3) == 20;
        *(_DWORD *)(v5 + 3180) = ucol_getVariableTop((uint64_t)a2, a3);
        *(void *)(v5 + 3144) = ucol_openElements(a2, **(void **)v5, *(_DWORD *)(*(void *)v5 + 8), a3);
        *(void *)(v5 + 3160) = ucol_openElements(a2, *(void *)(v5 + 8), *(_DWORD *)(v5 + 16), a3);
        return sub_18CA22448(v5, (UErrorCode *)a3);
      }
    }
    else
    {
      *a3 = 1;
    }
  }
  return result;
}

uint64_t usearch_getCollator(uint64_t result)
{
  if (result) {
    return *(void *)(result + 3128);
  }
  return result;
}

uint64_t usearch_setPattern(uint64_t result, UChar *s, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return result;
  }
  uint64_t v5 = result;
  if (!result || !s) {
    goto LABEL_10;
  }
  if (a3 == -1)
  {
    double result = u_strlen(s);
    a3 = result;
    if (result) {
      goto LABEL_6;
    }
LABEL_10:
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    return result;
  }
  if (!a3) {
    goto LABEL_10;
  }
LABEL_6:
  *(void *)(v5 + 8) = s;
  *(_DWORD *)(v5 + 16) = a3;

  return sub_18CA22448(v5, a4);
}

uint64_t usearch_getPattern(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    *a2 = *(_DWORD *)(result + 16);
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t usearch_first(uint64_t *a1, UErrorCode *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  *(unsigned char *)(*a1 + 40) = 1;
  usearch_setOffset(a1, 0, a2);
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }

  return usearch_next(a1, a2);
}

uint64_t usearch_next(uint64_t *a1, UErrorCode *a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (!a1 || *(int *)a2 > 0) {
    return result;
  }
  int Offset = ucol_getOffset(a1[393]);
  uint64_t v6 = (uint64_t *)*a1;
  uint64_t v7 = *(unsigned int *)(*a1 + 8);
  if (Offset > (int)v7 || Offset <= -1) {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v9 = Offset;
  }
  *((unsigned char *)v6 + 41) = 0;
  if (*((unsigned char *)v6 + 40))
  {
    if (v9 == v7
      || !*((unsigned char *)v6 + 12) && *((_DWORD *)v6 + 8) != -1 && *((_DWORD *)v6 + 9) + (int)v9 > (int)v7)
    {
      int v16 = 0;
      v6[4] = 0xFFFFFFFFLL;
      ucol_setOffset(a1[393], v7, (UErrorCode *)&v16);
      if (*(int *)a2 <= 0 && v16 >= 1) {
        *a2 = v16;
      }
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *((unsigned char *)v6 + 40) = 1;
    uint64_t result = *((unsigned int *)v6 + 8);
    if (result != -1) {
      return result;
    }
  }
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!*((_DWORD *)a1 + 5))
  {
    uint64_t v12 = *((int *)v6 + 8);
    if (v12 != -1)
    {
      uint64_t v13 = *v6;
      uint64_t v9 = (v12 + 1);
      *((_DWORD *)v6 + 8) = v9;
      BOOL v14 = (*(_WORD *)(v13 + 2 * v12) & 0xFC00) != 0xD800 || v9 == v7;
      if (v14 || (*(_WORD *)(v13 + 2 * (int)v9) & 0xFC00) != 0xDC00)
      {
LABEL_33:
        *((_DWORD *)v6 + 9) = 0;
        ucol_setOffset(a1[393], v9, a2);
        if (*((_DWORD *)v6 + 8) == v7) {
          *((_DWORD *)v6 + 8) = -1;
        }
        goto LABEL_39;
      }
      uint64_t v9 = (v12 + 2);
    }
    *((_DWORD *)v6 + 8) = v9;
    goto LABEL_33;
  }
  int v10 = *((_DWORD *)v6 + 9);
  if (v10 < 1)
  {
    *((_DWORD *)v6 + 8) = v9 - 1;
  }
  else
  {
    if (*((unsigned char *)v6 + 12)) {
      uint64_t v11 = (v9 + 1);
    }
    else {
      uint64_t v11 = (v10 + v9);
    }
    ucol_setOffset(a1[393], v11, a2);
  }
  sub_18CA23364(a1, a2);
LABEL_39:
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = *((unsigned int *)v6 + 8);
  if (v15 == -1) {
    uint64_t v15 = *((unsigned int *)v6 + 2);
  }
  ucol_setOffset(a1[393], v15, a2);
  return *((unsigned int *)v6 + 8);
}

uint64_t usearch_following(uint64_t *a1, uint64_t a2, UErrorCode *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(int *)a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  *(unsigned char *)(*a1 + 40) = 1;
  usearch_setOffset(a1, a2, a3);
  if (*(int *)a3 > 0) {
    return 0xFFFFFFFFLL;
  }

  return usearch_next(a1, a3);
}

uint64_t usearch_last(uint64_t *a1, UErrorCode *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *a1;
  *(unsigned char *)(v4 + 40) = 0;
  usearch_setOffset(a1, *(unsigned int *)(v4 + 8), a2);
  if (*(int *)a2 > 0) {
    return 0xFFFFFFFFLL;
  }

  return usearch_previous((unint64_t *)a1, a2);
}

uint64_t usearch_previous(unint64_t *a1, UErrorCode *a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && *(int *)a2 <= 0)
  {
    unint64_t v5 = *a1;
    if (*(unsigned char *)(*a1 + 41))
    {
      uint64_t v6 = *(unsigned int *)(v5 + 8);
      *(_WORD *)(v5 + 40) = 0;
      ucol_setOffset(a1[393], v6, a2);
    }
    else
    {
      int Offset = ucol_getOffset(a1[393]);
      if (Offset > *(_DWORD *)(*a1 + 8) || Offset <= -1) {
        LODWORD(v6) = -1;
      }
      else {
        LODWORD(v6) = Offset;
      }
    }
    uint64_t result = *(unsigned int *)(v5 + 32);
    if (*(unsigned char *)(v5 + 40))
    {
      *(unsigned char *)(v5 + 40) = 0;
      if (result != -1) {
        return result;
      }
    }
    else
    {
      if (v6) {
        BOOL v9 = result == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        int v18 = 0;
        unint64_t v10 = *a1;
        *(void *)(v10 + 32) = 0xFFFFFFFFLL;
        if (*(unsigned char *)(v10 + 40)) {
          uint64_t v11 = *(unsigned int *)(v10 + 8);
        }
        else {
          uint64_t v11 = 0;
        }
        ucol_setOffset(a1[393], v11, (UErrorCode *)&v18);
        if (*(int *)a2 <= 0 && v18 >= 1) {
          *a2 = v18;
        }
        return 0xFFFFFFFFLL;
      }
    }
    if (*(int *)a2 <= 0)
    {
      if (*((_DWORD *)a1 + 5))
      {
        sub_18CA23430((uint64_t)a1, a2);
      }
      else
      {
        int v12 = result == -1 ? v6 : result;
        *(_DWORD *)(v5 + 32) = v12;
        if (v12)
        {
          uint64_t v13 = *(void *)v5;
          uint64_t v14 = (v12 - 1);
          *(_DWORD *)(v5 + 32) = v14;
          BOOL v15 = __OFSUB__(v12, 2);
          uint64_t v16 = (v12 - 2);
          if ((int)v16 < 0 == v15
            && (*(_WORD *)(v13 + 2 * (int)v14) & 0xFC00) == 56320
            && (*(_WORD *)(v13 + 2 * v16) & 0xFC00) == 0xD800)
          {
            *(_DWORD *)(v5 + 32) = v16;
            uint64_t v14 = v16;
          }
          ucol_setOffset(a1[393], v14, a2);
          *(_DWORD *)(v5 + 36) = 0;
        }
        else
        {
          sub_18CA232F0((uint64_t *)a1, (int *)a2);
        }
      }
      if (*(int *)a2 <= 0) {
        return *(unsigned int *)(v5 + 32);
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t usearch_preceding(uint64_t *a1, uint64_t a2, UErrorCode *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(int *)a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  *(unsigned char *)(*a1 + 40) = 0;
  usearch_setOffset(a1, a2, a3);
  if (*(int *)a3 > 0) {
    return 0xFFFFFFFFLL;
  }

  return usearch_previous((unint64_t *)a1, a3);
}

unint64_t sub_18CA232F0(uint64_t *a1, int *a2)
{
  int v7 = 0;
  uint64_t v3 = *a1;
  *(void *)(v3 + 32) = 0xFFFFFFFFLL;
  unint64_t v4 = a1[393];
  if (*(unsigned char *)(v3 + 40)) {
    uint64_t v5 = *(unsigned int *)(v3 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t result = ucol_setOffset(v4, v5, (UErrorCode *)&v7);
  if (*a2 <= 0 && v7 >= 1) {
    *a2 = v7;
  }
  return result;
}

uint64_t sub_18CA23364(uint64_t *a1, UErrorCode *a2)
{
  if (*(int *)a2 < 1
    && (uint64_t Offset = ucol_getOffset(a1[393]),
        int v10 = -1,
        int v11 = -1,
        usearch_search((uint64_t)a1, Offset, &v11, &v10, a2)))
  {
    uint64_t v7 = *a1;
    int v8 = v10 - v11;
    *(_DWORD *)(v7 + 32) = v11;
    *(_DWORD *)(v7 + 36) = v8;
    return 1;
  }
  else
  {
    int v12 = 0;
    uint64_t v4 = *a1;
    *(void *)(v4 + 32) = 0xFFFFFFFFLL;
    if (*(unsigned char *)(v4 + 40)) {
      uint64_t v5 = *(unsigned int *)(v4 + 8);
    }
    else {
      uint64_t v5 = 0;
    }
    ucol_setOffset(a1[393], v5, (UErrorCode *)&v12);
    if (*(int *)a2 <= 0 && v12 >= 1) {
      *a2 = v12;
    }
    return 0;
  }
}

uint64_t sub_18CA23430(uint64_t a1, UErrorCode *a2)
{
  if (*(int *)a2 >= 1) {
    goto LABEL_2;
  }
  uint64_t v6 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 12))
  {
    int v7 = *(_DWORD *)(v6 + 32);
    if (v7 != -1)
    {
      uint64_t Offset = (v7 + *(_DWORD *)(v6 + 36) - 1);
      goto LABEL_20;
    }
    sub_18CA23BFC(a1, a2);
    if (!sub_18CA24A40(a1, a2)) {
      goto LABEL_2;
    }
    if (*(int *)(a1 + 1056) > 1)
    {
      int v10 = 0;
      do
      {
        if (sub_18CA0E594(*(void *)(a1 + 3152), 0, 0, a2) == 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
        ++v10;
      }
      while (v10 < *(_DWORD *)(a1 + 1056) - 1);
    }
    if (*(int *)a2 >= 1) {
      goto LABEL_2;
    }
  }
  uint64_t Offset = ucol_getOffset(*(void *)(a1 + 3144));
LABEL_20:
  int v13 = -1;
  int v14 = -1;
  if (usearch_searchBackwards(a1, Offset, &v14, &v13, a2))
  {
    uint64_t v11 = *(void *)a1;
    int v12 = v13 - v14;
    *(_DWORD *)(v11 + 32) = v14;
    *(_DWORD *)(v11 + 36) = v12;
    return 1;
  }
LABEL_2:
  int v15 = 0;
  uint64_t v4 = *(void *)a1;
  *(void *)(v4 + 32) = 0xFFFFFFFFLL;
  if (*(unsigned char *)(v4 + 40)) {
    uint64_t v5 = *(unsigned int *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  ucol_setOffset(*(void *)(a1 + 3144), v5, (UErrorCode *)&v15);
  if (*(int *)a2 <= 0 && v15 >= 1) {
    *a2 = v15;
  }
  return 0;
}

double usearch_reset(uint64_t a1)
{
  if (a1)
  {
    int v13 = 0;
    int Strength = ucol_getStrength(*(void *)(a1 + 3128));
    int v3 = *(_DWORD *)(a1 + 3172);
    BOOL v4 = v3 > 2 || Strength <= 2;
    BOOL v6 = 0;
    if (v4 && (v3 < 3 || Strength > 2)) {
      BOOL v6 = 1;
    }
    int v7 = ucol_getStrength(*(void *)(a1 + 3128));
    *(_DWORD *)(a1 + 3172) = v7;
    if (v7 == 1) {
      int v8 = -256;
    }
    else {
      int v8 = -1;
    }
    if (!v7) {
      int v8 = -65536;
    }
    if (*(_DWORD *)(a1 + 3176) != v8)
    {
      BOOL v6 = 0;
      *(_DWORD *)(a1 + 3176) = v8;
    }
    int Attribute = ucol_getAttribute(*(void *)(a1 + 3128), 1, &v13);
    if (*(unsigned char *)(a1 + 3184) != (Attribute == 20))
    {
      BOOL v6 = 0;
      *(unsigned char *)(a1 + 3184) = Attribute == 20;
    }
    int VariableTop = ucol_getVariableTop(*(void *)(a1 + 3128), &v13);
    if (*(_DWORD *)(a1 + 3180) == VariableTop)
    {
      if (v6)
      {
LABEL_27:
        ucol_setText(*(uint64_t **)(a1 + 3144), **(void **)a1, *(_DWORD *)(*(void *)a1 + 8), (UErrorCode *)&v13);
        uint64_t v11 = *(uint64_t **)a1;
        *(void *)&double result = 0xFFFFFFFFLL;
        _OWORD v11[4] = 0xFFFFFFFFLL;
        *((_DWORD *)v11 + 3) = 0;
        *((_WORD *)v11 + 20) = 257;
        return result;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 3180) = VariableTop;
    }
    sub_18CA22448(a1, (UErrorCode *)&v13);
    goto LABEL_27;
  }
  return result;
}

uint64_t usearch_search(uint64_t a1, uint64_t a2, int *a3, int *a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  if ((a2 & 0x80000000) != 0
    || !*(_DWORD *)(a1 + 20)
    || *(_DWORD *)(*(void *)a1 + 8) < (int)a2
    || !*(void *)(a1 + 24))
  {
    uint64_t v5 = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v5;
  }
  if (!*(void *)(a1 + 1064)) {
    sub_18CA23BFC(a1, a5);
  }
  ucol_setOffset(*(void *)(a1 + 3144), a2, a5);
  bzero(v60, 0x628uLL);
  sub_18CA23E08((uint64_t)v60, a1, a5);
  if (*(int *)a5 > 0)
  {
    uint64_t v5 = 0;
    goto LABEL_101;
  }
  int v53 = a3;
  BOOL v54 = a4;
  int v12 = sub_18CA23EF8((uint64_t)v60, 0);
  if (!v12)
  {
    LODWORD(v16) = -1;
    int v55 = -1;
LABEL_83:
    unsigned int v35 = 0;
    *a5 = U_INTERNAL_PROGRAM_ERROR;
LABEL_84:
    int v49 = v54;
    goto LABEL_85;
  }
  int v13 = v12;
  int v14 = 0;
  int v55 = -1;
  int v15 = 1;
  LODWORD(v16) = -1;
  while (1)
  {
    int v17 = *(_DWORD *)(a1 + 1056);
    if (v17 >= 1) {
      break;
    }
    int v59 = v15;
    int v18 = 0;
    uint64_t v20 = 0;
LABEL_25:
    int v24 = v17 + v18 + v14;
    uint64_t v25 = sub_18CA23EF8((uint64_t)v60, v24 - 1);
    uint64_t v26 = *((unsigned int *)v13 + 2);
    int v56 = v25;
    unsigned int v57 = *((_DWORD *)v25 + 2);
    int v27 = *(unsigned __int16 *)(*(void *)a1 + 14);
    int32_t v28 = sub_18CA23EF8((uint64_t)v60, v24);
    BOOL v29 = v28;
    if (v27)
    {
      unint64_t v30 = *v28;
      if (*v29 == 0x7FFFFFFFFFFFFFFFLL)
      {
        BOOL v31 = 1;
        uint64_t v16 = v26;
        int v15 = v59;
LABEL_36:
        uint64_t v32 = *((unsigned int *)v29 + 2);
      }
      else
      {
        int v33 = v17 + v18 + v59;
        uint64_t v16 = v26;
        int v15 = v59;
        while (!HIWORD(v30))
        {
          int v34 = sub_18CA23FB0(v30, v20, *(__int16 *)(*(void *)a1 + 14)) & 0xFFFFFFFD;
          BOOL v31 = v34 != 0;
          if (v34)
          {
            BOOL v29 = sub_18CA23EF8((uint64_t)v60, v33);
            unint64_t v30 = *v29;
            ++v33;
            if (*v29 != 0x7FFFFFFFFFFFFFFFLL) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v32 = *((unsigned int *)v29 + 2);
        BOOL v31 = v32 != *((_DWORD *)v29 + 3);
      }
    }
    else
    {
      uint64_t v32 = *((unsigned int *)v28 + 2);
      BOOL v31 = v32 != *((_DWORD *)v28 + 3) || *v28 == 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v16 = v26;
      int v15 = v59;
    }
    if (sub_18CA2407C((void **)a1, v16, (int *)a5)) {
      unsigned int v35 = v31;
    }
    else {
      unsigned int v35 = 0;
    }
    if (*(int *)a5 > 0) {
      goto LABEL_84;
    }
    if (v16 == *((_DWORD *)v13 + 3)) {
      unsigned int v35 = 0;
    }
    int v36 = *(uint64_t **)a1;
    if (**(void **)a1)
    {
      uint64_t v37 = v57;
      if (*((_DWORD *)v36 + 2) <= (int)v32
        || v36[3]
        || !*((_WORD *)v29 + 3)
        || (int)v32 < *((_DWORD *)v56 + 3)
        || *((_DWORD *)v29 + 3) <= (int)v32)
      {
        BOOL v40 = 0;
      }
      else
      {
        uint64_t v38 = *(void *)(a1 + 3136);
        uint64_t v39 = sub_18CA240E4(v36, v32);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v38 + 120))(v38, v39))
        {
          BOOL v40 = 1;
        }
        else
        {
          uint64_t v47 = *(void *)(a1 + 3136);
          uint64_t v48 = sub_18CA24144(*(uint64_t **)a1, v32);
          BOOL v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v47 + 128))(v47, v48) != 0;
        }
      }
    }
    else
    {
      BOOL v40 = 0;
      uint64_t v37 = v57;
    }
    uint64_t v41 = v32;
    if ((int)v37 < (int)v32)
    {
      if (v37 == *((_DWORD *)v56 + 3) && sub_18CA2407C((void **)a1, v37, (int *)a5))
      {
        uint64_t v41 = v37;
      }
      else
      {
        int v42 = sub_18CA2419C((void **)a1, v37, (int *)a5);
        if (v42 < (int)v32 || !v40) {
          unsigned int v44 = v42;
        }
        else {
          unsigned int v44 = v32;
        }
        if (v42 >= *((_DWORD *)v56 + 3)) {
          uint64_t v41 = v44;
        }
        else {
          uint64_t v41 = v32;
        }
      }
    }
    if (*(int *)a5 > 0) {
      goto LABEL_87;
    }
    if (!v40)
    {
      int v45 = sub_18CA2407C((void **)a1, v41, (int *)a5);
      if ((int)v41 > (int)v32 || v45 == 0) {
        unsigned int v35 = 0;
      }
      if (*(int *)a5 > 0) {
        goto LABEL_87;
      }
    }
    int v55 = v41;
    if (sub_18CA24204(a1, v16) && v35)
    {
      unsigned int v35 = 1;
LABEL_87:
      int32_t v50 = v53;
      int v49 = v54;
      goto LABEL_88;
    }
LABEL_79:
    int v13 = sub_18CA23EF8((uint64_t)v60, ++v14);
    ++v15;
    if (!v13) {
      goto LABEL_83;
    }
  }
  int v58 = v16;
  int v18 = 0;
  int v19 = 0;
  while (1)
  {
    uint64_t v20 = *(void *)(*(void *)(a1 + 1064) + 8 * v19);
    int v21 = sub_18CA23EF8((uint64_t)v60, v19 + v14 + v18);
    uint64_t v22 = *v21;
    int v23 = sub_18CA23FB0(*v21, v20, *(__int16 *)(*(void *)a1 + 14));
    if (!v23) {
      break;
    }
    if (v23 >= 1)
    {
      if (v23 == 1)
      {
        --v19;
        ++v18;
      }
      else
      {
        --v18;
      }
    }
    ++v19;
    int v17 = *(_DWORD *)(a1 + 1056);
    if (v19 >= v17)
    {
      int v59 = v15;
      goto LABEL_25;
    }
  }
  if (v22 != 0x7FFFFFFFFFFFFFFFLL)
  {
    LODWORD(v16) = v58;
    goto LABEL_79;
  }
  unsigned int v35 = 0;
  int v49 = v54;
  LODWORD(v16) = v58;
LABEL_85:
  int32_t v50 = v53;
  LODWORD(v41) = v55;
LABEL_88:
  if (*(int *)a5 >= 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v35;
  }
  if (v5) {
    int v51 = v41;
  }
  else {
    int v51 = -1;
  }
  if (v50)
  {
    if (v5) {
      int v52 = v16;
    }
    else {
      int v52 = -1;
    }
    *int32_t v50 = v52;
  }
  if (v49) {
    *int v49 = v51;
  }
LABEL_101:
  if (v61 != v60) {
    uprv_free(v61);
  }
  return v5;
}

void *sub_18CA23BFC(uint64_t a1, UErrorCode *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 3160);
  if (v5)
  {
    double result = ucol_setText(*(uint64_t **)(a1 + 3160), *(void *)(a1 + 8), v4, a2);
  }
  else
  {
    double result = ucol_openElements(*(const void **)(a1 + 3128), *(void *)(a1 + 8), v4, (int *)a2);
    uint64_t v5 = (uint64_t)result;
    *(void *)(a1 + 3160) = result;
  }
  if (*(int *)a2 <= 0)
  {
    int v7 = *(void **)(a1 + 1064);
    if (v7 != (void *)(a1 + 1072) && v7 != 0) {
      uprv_free(v7);
    }
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    sub_18CA0E180(v20, v5);
    uint64_t v9 = sub_18CA0E594((uint64_t)v20, 0, 0, a2);
    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v12 = v9;
      unsigned int v13 = 0;
      unsigned int v19 = v4 + 1;
      int v14 = 256;
      uint64_t v11 = (void *)(a1 + 1072);
      while (1)
      {
        int v15 = v11;
        if (*(int *)a2 > 0)
        {
          unsigned int v10 = v13;
          goto LABEL_25;
        }
        int Offset = ucol_getOffset(v5);
        unsigned int v10 = v13 + 1;
        if (v13 + 1 == v14)
        {
          int v14 = v19 + v14 - Offset;
          int v17 = uprv_malloc((8 * v14));
          if (!v17)
          {
            *a2 = U_MEMORY_ALLOCATION_ERROR;
            return sub_18CA0E294(v20);
          }
          if (*(int *)a2 > 0) {
            return sub_18CA0E294(v20);
          }
          uint64_t v11 = v17;
          memcpy(v17, v15, 8 * v13);
          *((void *)v11 + v13) = v12;
        }
        else
        {
          UErrorCode v18 = *a2;
          *((void *)v11 + v13) = v12;
          if (v18 > U_ZERO_ERROR) {
            return sub_18CA0E294(v20);
          }
        }
        if (v15 != v11 && v15 != (void *)(a1 + 1072)) {
          uprv_free(v15);
        }
        uint64_t v12 = sub_18CA0E594((uint64_t)v20, 0, 0, a2);
        ++v13;
        if (v12 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_25;
        }
      }
    }
    unsigned int v10 = 0;
    uint64_t v11 = (void *)(a1 + 1072);
LABEL_25:
    *((void *)v11 + v10) = 0;
    *(void *)(a1 + 1064) = v11;
    *(_DWORD *)(a1 + 1056) = v10;
    return sub_18CA0E294(v20);
  }
  return result;
}

uint64_t sub_18CA23E08(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a1 + 1536) = a1;
  *(void *)(a1 + 1568) = a2;
  int v5 = *(_DWORD *)(a2 + 1056) + 32;
  *(_DWORD *)(a1 + 1544) = v5;
  if (*(_WORD *)(*(void *)a2 + 14))
  {
    BOOL v6 = *(unsigned __int16 **)(a2 + 8);
    if (v6)
    {
      uint64_t v7 = *(int *)(a2 + 16);
      if ((int)v7 >= 1)
      {
        int v8 = &v6[v7];
        do
        {
          int v10 = *v6++;
          int v9 = v10;
          unsigned int v11 = v10 - 4352;
          BOOL v12 = (v10 - 12593) >= 0x1E && v11 >= 0x5F;
          unsigned int v13 = v9 - 12645;
          if (v12 && v13 >= 0x22) {
            int v15 = 3;
          }
          else {
            int v15 = 8;
          }
          v5 += v15;
        }
        while (v6 < v8);
        *(_DWORD *)(a1 + 1544) = v5;
      }
    }
  }
  *(void *)(a1 + 1560) = *(void *)(a2 + 3144);
  *(void *)(a1 + 1548) = 0;
  if (sub_18CA24A40(a2, a3))
  {
    uint64_t v16 = *(unsigned int *)(a1 + 1544);
    if ((int)v16 >= 97)
    {
      int v17 = uprv_malloc(16 * v16);
      *(void *)(a1 + 1536) = v17;
      if (!v17) {
        *a3 = 7;
      }
    }
  }
  return a1;
}

uint64_t *sub_18CA23EF8(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 1544);
  int v4 = a2 % v3;
  int v5 = *(_DWORD *)(a1 + 1548);
  int v6 = *(_DWORD *)(a1 + 1552);
  if (v5 <= a2 && v6 > a2) {
    return (uint64_t *)(*(void *)(a1 + 1536) + 16 * v4);
  }
  if (v6 != a2) {
    return 0;
  }
  *(_DWORD *)(a1 + 1552) = a2 + 1;
  if (a2 + 1 - v5 >= v3) {
    *(_DWORD *)(a1 + 1548) = v5 + 1;
  }
  int v10 = 0;
  uint64_t v8 = *(void *)(a1 + 1536) + 16 * v4;
  uint64_t v9 = sub_18CA0E594(*(void *)(*(void *)(a1 + 1568) + 3152), (_DWORD *)(v8 + 8), (_DWORD *)(v8 + 12), (UErrorCode *)&v10);
  double result = (uint64_t *)(*(void *)(a1 + 1536) + 16 * v4);
  *double result = v9;
  return result;
}

uint64_t sub_18CA23FB0(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 == a2) {
    return 0xFFFFFFFFLL;
  }
  if (!a3) {
    return 0;
  }
  if ((HIDWORD(a1) & 0xFFFF0000) == (HIDWORD(a2) & 0xFFFF0000))
  {
    if (WORD2(a1) == WORD2(a2))
    {
      int v4 = a1 & 0xFFFF0000;
      int v5 = a2 & 0xFFFF0000;
      int v8 = a3 == 4 && v4 == 327680 || v5 == 327680;
      unsigned int v9 = v8 << 31 >> 31;
      if (v4 == v5) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v9;
      }
    }
    else if (WORD2(a1))
    {
      if (a3 != 4 || WORD2(a2))
      {
        int v14 = a3 == 4 && WORD2(a1) == 5 || WORD2(a2) == 5;
        return (v14 << 31 >> 31);
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if ((a2 & 0xFFFF000000000000) == 0 && a3 == 4) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = 0;
    }
    if ((a1 & 0xFFFF000000000000) != 0) {
      return v11;
    }
    else {
      return 1;
    }
  }
}

uint64_t sub_18CA2407C(void **a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 1;
  }
  int v4 = sub_18CA24908(a1, a3);
  if (*a3 > 0) {
    return 1;
  }

  return ubrk_isBoundary((uint64_t)v4);
}

uint64_t sub_18CA240E4(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  if (v2 <= a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = a2 + 1;
  uint64_t result = *(unsigned __int16 *)(*a1 + 2 * a2);
  if ((result & 0xFC00) == 0xD800 && v4 != v2)
  {
    int v7 = *(unsigned __int16 *)(v3 + 2 * v4);
    if ((v7 & 0xFC00) == 0xDC00) {
      return (v7 + (result << 10) - 56613888);
    }
  }
  return result;
}

uint64_t sub_18CA24144(uint64_t *a1, int a2)
{
  if (a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *a1;
  uint64_t result = *(unsigned __int16 *)(*a1 + 2 * (a2 - 1));
  if (a2 != 1 && (result & 0xFC00) == 0xDC00)
  {
    int v4 = *(unsigned __int16 *)(v2 + 2 * (a2 - 2));
    if ((v4 & 0xFC00) == 0xD800) {
      return (result + (v4 << 10) - 56613888);
    }
  }
  return result;
}

uint64_t sub_18CA2419C(void **a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return a2;
  }
  int v5 = sub_18CA24908(a1, a3);
  if (*a3 > 0) {
    return a2;
  }

  return ubrk_following((uint64_t)v5);
}

uint64_t sub_18CA24204(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 3172) != 15) {
    return 1;
  }
  int v14 = 0;
  long long v22 = 0u;
  uint64_t v25 = 0;
  long long v24 = 0u;
  long long v23 = 0u;
  uint64_t v21 = &unk_1EDA47700;
  LOWORD(v22) = 2;
  long long v17 = 0u;
  uint64_t v20 = 0;
  long long v19 = 0u;
  long long v18 = 0u;
  uint64_t v16 = &unk_1EDA47700;
  LOWORD(v17) = 2;
  uint64_t v3 = *(void *)(a1 + 3136);
  uint64_t v13 = **(void **)a1 + 2 * a2;
  icu::UnicodeString::UnicodeString(v15, 0, &v13);
  (*(void (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v3 + 24))(v3, v15, &v21, &v14);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v15);
  uint64_t v5 = *(void *)(a1 + 3136);
  uint64_t v12 = *(void *)(a1 + 8);
  icu::UnicodeString::UnicodeString(v15, 0, &v12);
  (*(void (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v5 + 24))(v5, v15, &v16, &v14);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v15);
  BOOL v7 = 0;
  unint64_t v8 = v14;
  if (v14 <= 0)
  {
    if (v22)
    {
      unint64_t v8 = (unsigned __int16)v17;
      BOOL v7 = v17 & 1;
    }
    else
    {
      BOOL v7 = 0;
      if ((v22 & 0x8000u) == 0) {
        int v9 = (unsigned __int16)v22 >> 5;
      }
      else {
        int v9 = DWORD1(v22);
      }
      if ((v17 & 0x8000u) == 0) {
        unint64_t v8 = (unsigned __int16)v17 >> 5;
      }
      else {
        unint64_t v8 = DWORD1(v17);
      }
      if ((v17 & 1) == 0 && v9 == v8) {
        BOOL v7 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v21, (const icu::UnicodeString *)&v16, v9);
      }
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v16);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v21);
  return v7;
}

BOOL usearch_searchBackwards(uint64_t a1, uint64_t a2, int *a3, int *a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0;
  }
  if ((a2 & 0x80000000) != 0
    || !*(_DWORD *)(a1 + 20)
    || *(_DWORD *)(*(void *)a1 + 8) < (int)a2
    || !*(void *)(a1 + 24))
  {
    BOOL v5 = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v5;
  }
  if (!*(void *)(a1 + 1064)) {
    sub_18CA23BFC(a1, a5);
  }
  bzero(v52, 0x628uLL);
  sub_18CA23E08((uint64_t)v52, a1, a5);
  if (*(_DWORD *)(*(void *)a1 + 8) <= (int)a2)
  {
    uint64_t v47 = a4;
    ucol_setOffset(*(void *)(a1 + 3144), a2, a5);
    int v13 = 0;
  }
  else
  {
    unsigned int v11 = sub_18CA24908((void **)a1, (int *)a5);
    if (*(int *)a5 > 0)
    {
LABEL_18:
      BOOL v5 = 0;
      goto LABEL_19;
    }
    uint64_t v47 = a4;
    uint64_t v12 = ubrk_following((uint64_t)v11);
    ucol_setOffset(*(void *)(a1 + 3144), v12, a5);
    int v13 = -1;
    do
      ++v13;
    while (*((_DWORD *)sub_18CA24988((uint64_t)v52, v13) + 2) >= (int)a2);
  }
  if (*(int *)a5 > 0) {
    goto LABEL_18;
  }
  int v49 = sub_18CA24988((uint64_t)v52, v13);
  if (!v49)
  {
    LODWORD(v16) = -1;
    int v15 = -1;
LABEL_86:
    BOOL v24 = 0;
    *a5 = U_INTERNAL_PROGRAM_ERROR;
LABEL_88:
    unsigned int v44 = v47;
    goto LABEL_91;
  }
  int v15 = -1;
  LODWORD(v16) = -1;
  while (1)
  {
    int v50 = v15;
    int v48 = v16;
    int v17 = *(_DWORD *)(a1 + 1056);
    if (v17 >= 1) {
      break;
    }
    int v18 = 0;
LABEL_34:
    long long v23 = sub_18CA24988((uint64_t)v52, v13 - 1 + v18 + v17);
    uint64_t v16 = *((unsigned int *)v23 + 2);
    BOOL v24 = sub_18CA2407C((void **)a1, v16, (int *)a5) != 0;
    if (*(int *)a5 > 0)
    {
      unsigned int v44 = v47;
      goto LABEL_90;
    }
    if (v16 == *((_DWORD *)v23 + 3)) {
      BOOL v24 = 0;
    }
    uint64_t v25 = *((unsigned int *)v49 + 2);
    if (v13)
    {
      uint64_t v26 = sub_18CA24988((uint64_t)v52, v13 - 1);
      int v28 = *((_DWORD *)v26 + 2);
      int v27 = *((_DWORD *)v26 + 3);
      if (v28 == v27 && *v26 != 0x7FFFFFFFFFFFFFFFLL) {
        BOOL v24 = 0;
      }
      int v51 = *((_DWORD *)v26 + 2);
      BOOL v29 = *(_DWORD **)a1;
      if (**(void **)a1 && v29[2] > v28 && !*((void *)v29 + 3) && *((_WORD *)v26 + 3))
      {
        BOOL v30 = 0;
        if (v27 > v28 && v28 >= *((_DWORD *)v49 + 3))
        {
          uint64_t v40 = *(void *)(a1 + 3136);
          uint64_t v41 = sub_18CA240E4(*(uint64_t **)a1, v28);
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v40 + 120))(v40, v41))
          {
            BOOL v30 = 1;
          }
          else
          {
            uint64_t v42 = *(void *)(a1 + 3136);
            uint64_t v43 = sub_18CA24144(*(uint64_t **)a1, v28);
            BOOL v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42 + 128))(v42, v43) != 0;
          }
        }
      }
      else
      {
        BOOL v30 = 0;
      }
      if ((int)v25 < v28)
      {
        int v31 = sub_18CA2419C((void **)a1, v25, (int *)a5);
        if (v31 < v28 || !v30) {
          int v33 = v31;
        }
        else {
          int v33 = v28;
        }
        if (v31 >= *((_DWORD *)v49 + 3)) {
          int v34 = v33;
        }
        else {
          int v34 = v28;
        }
        int v51 = v34;
      }
      if (v30)
      {
        int v15 = v51;
      }
      else
      {
        int v15 = v51;
        int v37 = sub_18CA2407C((void **)a1, v51, (int *)a5);
        if (v51 > v28 || v37 == 0) {
          BOOL v24 = 0;
        }
        if (*(int *)a5 >= 1) {
          goto LABEL_88;
        }
      }
    }
    else
    {
      int v35 = sub_18CA2419C((void **)a1, *((unsigned int *)v49 + 2), (int *)a5);
      if (v35 >= (int)a2 || v35 <= 0) {
        int v15 = a2;
      }
      else {
        int v15 = v35;
      }
    }
    if (sub_18CA24204(a1, v16)) {
      BOOL v39 = !v24;
    }
    else {
      BOOL v39 = 1;
    }
    if (!v39)
    {
      BOOL v24 = 1;
      goto LABEL_88;
    }
LABEL_78:
    int v49 = sub_18CA24988((uint64_t)v52, ++v13);
    if (!v49) {
      goto LABEL_86;
    }
  }
  int v18 = 0;
  while (1)
  {
    uint64_t v19 = *(void *)(*(void *)(a1 + 1064) + 8 * (v17 - 1));
    uint64_t v20 = sub_18CA24988((uint64_t)v52, v13 - v17 + v18 + *(_DWORD *)(a1 + 1056));
    uint64_t v21 = *v20;
    int v22 = sub_18CA23FB0(*v20, v19, *(__int16 *)(*(void *)a1 + 14));
    if (!v22) {
      break;
    }
    if (v22 < 1) {
      goto LABEL_30;
    }
    if (v22 != 1)
    {
      --v18;
LABEL_30:
      --v17;
      goto LABEL_31;
    }
    ++v18;
LABEL_31:
    if (v17 <= 0)
    {
      int v17 = *(_DWORD *)(a1 + 1056);
      goto LABEL_34;
    }
  }
  if (v21 != 0x7FFFFFFFFFFFFFFFLL)
  {
    LODWORD(v16) = v48;
    int v15 = v50;
    goto LABEL_78;
  }
  BOOL v24 = 0;
  unsigned int v44 = v47;
  LODWORD(v16) = v48;
LABEL_90:
  int v15 = v50;
LABEL_91:
  BOOL v5 = *(int *)a5 < 1 && v24;
  if (v5) {
    int v45 = v15;
  }
  else {
    int v45 = -1;
  }
  if (a3)
  {
    if (v5) {
      int v46 = v16;
    }
    else {
      int v46 = -1;
    }
    *a3 = v46;
  }
  if (v44) {
    *unsigned int v44 = v45;
  }
LABEL_19:
  if (v53 != v52) {
    uprv_free(v53);
  }
  return v5;
}

char *sub_18CA24908(void **a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  int v4 = *a1;
  uint64_t result = (char *)*((void *)*a1 + 3);
  if (!result)
  {
    uint64_t result = (char *)*((void *)v4 + 2);
    if (!result)
    {
      uint64_t LocaleByType = ucol_getLocaleByType(a1[391], 1, a2);
      uint64_t result = ubrk_open(0, LocaleByType, *(const UChar **)*a1, *((_DWORD *)*a1 + 2), (const icu::Locale *)a2);
      *((void *)*a1 + 2) = result;
    }
  }
  return result;
}

uint64_t *sub_18CA24988(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 1544);
  int v4 = a2 % v3;
  int v5 = *(_DWORD *)(a1 + 1548);
  int v6 = *(_DWORD *)(a1 + 1552);
  if (v5 <= a2 && v6 > a2) {
    return (uint64_t *)(*(void *)(a1 + 1536) + 16 * v4);
  }
  if (v6 != a2) {
    return 0;
  }
  *(_DWORD *)(a1 + 1552) = a2 + 1;
  if (a2 + 1 - v5 >= v3) {
    *(_DWORD *)(a1 + 1548) = v5 + 1;
  }
  int v10 = 0;
  uint64_t v8 = *(void *)(a1 + 1536) + 16 * v4;
  uint64_t v9 = sub_18CA0E6F4(*(void *)(*(void *)(a1 + 1568) + 3152), (_DWORD *)(v8 + 8), (_DWORD *)(v8 + 12), (UErrorCode *)&v10);
  uint64_t result = (uint64_t *)(*(void *)(a1 + 1536) + 16 * v4);
  *uint64_t result = v9;
  return result;
}

uint64_t sub_18CA24A40(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = (uint64_t *)*a2;
  if ((int)v2 > 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 3152);
  if (v5)
  {
    sub_18CA0E174(v5, *(void *)(a1 + 3144));
    return 1;
  }
  uint64_t result = (uint64_t)icu::UMemory::operator new(v2, (icu::UMemory *)0x128, (unint64_t)a2);
  if (result)
  {
    *(void *)(a1 + 3152) = sub_18CA0E180((void *)result, *(void *)(a1 + 3144));
    return 1;
  }
  *(void *)(a1 + 3152) = 0;
  *a2 = 7;
  return result;
}

uint64_t sub_18CA24AB8()
{
  qword_1EB20BE50 = 0;
  return 1;
}

uint64_t sub_18CA24AC8(uint64_t a1, unsigned __int16 **a2, unsigned __int16 *a3)
{
  int v4 = *a2;
  int v6 = *a2 + 1;
  unint64_t v5 = **a2;
  *a2 = v6;
  if (v5 < *(unsigned __int16 *)(a1 + 8)) {
    return 0;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 56) + (v5 >> 8))
    || ((1 << (v5 >> 5)) & *(unsigned __int8 *)(*(void *)(a1 + 56) + (v5 >> 8))) == 0)
  {
    return 0;
  }
  if ((v5 & 0xFC00) == 0xD800 && v6 != a3)
  {
    int v10 = *v6;
    if ((v10 & 0xFC00) == 0xDC00)
    {
      LODWORD(v5) = v10 + (v5 << 10) - 56613888;
      *a2 = v4 + 2;
    }
  }
  return icu::Normalizer2Impl::getFCD16FromNormData((icu::Normalizer2Impl *)a1, v5);
}

void sub_18CA24B5C(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192B90, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192B90))
    {
      if (dword_1E9192B94 >= 1) {
        *a1 = dword_1E9192B94;
      }
    }
    else
    {
      sub_18CA24BF4(a1, v2);
      dword_1E9192B94 = *a1;
      icu::umtx_initImplPostInit(&dword_1E9192B90);
    }
  }
}

void sub_18CA24BF4(UErrorCode *a1, unint64_t a2)
{
  int v14 = (uint64_t *)*MEMORY[0x1E4F143B8];
  int v3 = icu::UMemory::operator new(v14, (icu::UMemory *)0xC8, a2);
  if (!v3)
  {
    qword_1E9192B80 = 0;
    goto LABEL_7;
  }
  int v4 = (icu::UnicodeSet *)v3;
  icu::UnicodeString::UnicodeString((uint64_t)v13, (uint64_t)L"['\\-.\\:\\u00B7\\u0375\\u058A\\u05F3\\u05F4\\u06FD\\u06FE\\u0F0B\\u2010\\u2019\\u2027\\u30A0\\u30FB]");
  icu::UnicodeSet::UnicodeSet(v4, (const icu::UnicodeString *)v13, a1);
  qword_1E9192B80 = (uint64_t)v4;
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v13);
  if (!qword_1E9192B80)
  {
LABEL_7:
    *a1 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }
  icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_1E9192B80);
  uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0xC8, v6);
  if (v8)
  {
    uint64_t v9 = (icu::UnicodeSet *)v8;
    icu::UnicodeString::UnicodeString((uint64_t)v13, (uint64_t)"[");
    icu::UnicodeSet::UnicodeSet(v9, (const icu::UnicodeString *)v13, a1);
    qword_1E9192B88 = (uint64_t)v9;
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v13);
    if (qword_1E9192B88)
    {
      icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_1E9192B88);
      qword_1E9192B78 = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a1, v11);
      sub_18CA0A25C(3u, (uint64_t)sub_18CA27108);
      return;
    }
  }
  else
  {
    qword_1E9192B88 = 0;
  }
  *a1 = U_MEMORY_ALLOCATION_ERROR;
  if (qword_1E9192B80)
  {
    uint64_t v12 = icu::UnicodeSet::~UnicodeSet((void *)7, (icu::UnicodeSet *)qword_1E9192B80);
    icu::UMemory::operator delete(v12);
  }
}

uint64_t uspoof_open(UErrorCode *a1, unint64_t a2)
{
  if (*(int *)a1 > 0) {
    return 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192B90, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192B90))
  {
    int v3 = dword_1E9192B94;
    if (dword_1E9192B94 >= 1)
    {
LABEL_6:
      *a1 = v3;
      return 0;
    }
  }
  else
  {
    sub_18CA24BF4(a1, a2);
    dword_1E9192B94 = *a1;
    icu::umtx_initImplPostInit(&dword_1E9192B90);
  }
  int v4 = (uint64_t *)*(unsigned int *)a1;
  if ((int)v4 > 0) {
    return 0;
  }
  unint64_t v6 = icu::UMemory::operator new(v4, (icu::UMemory *)0x30, a2);
  if (!v6)
  {
    int v3 = 7;
    goto LABEL_6;
  }
  uint64_t v7 = sub_18CA28298((uint64_t)v6, a1);
  if (*(int *)a1 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    return 0;
  }

  return nullsub_17(v7);
}

uint64_t uspoof_openFromSerialized(uint64_t a1, unint64_t a2, _DWORD *a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (!a1)
  {
    int v8 = 1;
    goto LABEL_12;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192B90, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192B90))
  {
    sub_18CA24BF4(a4, a2);
    dword_1E9192B94 = *a4;
    icu::umtx_initImplPostInit(&dword_1E9192B90);
    goto LABEL_7;
  }
  int v8 = dword_1E9192B94;
  if (dword_1E9192B94 >= 1)
  {
LABEL_12:
    *a4 = v8;
    return 0;
  }
LABEL_7:
  uint64_t v9 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v9 > 0) {
    return 0;
  }
  int v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x38, a2);
  if (!v10)
  {
    int v8 = 7;
    goto LABEL_12;
  }
  uint64_t v11 = (uint64_t)v10;
  sub_18CA295EC(v10, a1, a2, a4);
  int v13 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v13 >= 1)
  {
LABEL_10:
    int v14 = (void *)sub_18CA29700(v11);
    icu::UMemory::operator delete(v14);
    return 0;
  }
  uint64_t v16 = icu::UMemory::operator new(v13, (icu::UMemory *)0x30, v12);
  if (!v16)
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_10;
  }
  int v17 = v16;
  sub_18CA28184((uint64_t)v16, v11, a4);
  if (*(int *)a4 >= 1)
  {
    (*(void (**)(uint64_t *))(*v17 + 8))(v17);
    return 0;
  }
  if (a3) {
    *a3 = sub_18CA29820(v11);
  }

  return nullsub_17(v17);
}

uint64_t uspoof_clone(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_18CA284B0(a1, a2);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = v3;
  uint64_t v7 = icu::UMemory::operator new(v5, (icu::UMemory *)0x30, v4);
  if (!v7)
  {
    *a2 = 7;
    return 0;
  }
  uint64_t v8 = sub_18CA283C0(v7, v6, a2);
  if (*a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t v8 = 0;
  }

  return nullsub_17(v8);
}

uint64_t uspoof_close(uint64_t a1)
{
  int v2 = 0;
  uint64_t result = sub_18CA2858C(a1, &v2);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t uspoof_setChecks(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result = sub_18CA2858C(a1, a3);
  if (result)
  {
    if ((a2 & 0xBFFF0000) != 0) {
      *a3 = 1;
    }
    else {
      *(_DWORD *)(result + 12) = a2;
    }
  }
  return result;
}

uint64_t uspoof_getChecks(uint64_t a1, int *a2)
{
  uint64_t result = sub_18CA284B0(a1, a2);
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

uint64_t uspoof_setRestrictionLevel(uint64_t a1, int a2)
{
  int v4 = 0;
  uint64_t result = sub_18CA2858C(a1, &v4);
  if (result)
  {
    *(_DWORD *)(result + 40) = a2;
    *(_DWORD *)(result + 12) |= 0x10u;
  }
  return result;
}

uint64_t uspoof_getRestrictionLevel(uint64_t a1)
{
  int v3 = 0;
  uint64_t v1 = sub_18CA284B0(a1, &v3);
  if (v1) {
    return *(unsigned int *)(v1 + 40);
  }
  else {
    return 1610612736;
  }
}

void *uspoof_setAllowedLocales(uint64_t a1, const char *a2, int *a3)
{
  uint64_t result = (void *)sub_18CA2858C(a1, a3);
  if (result)
  {
    return sub_18CA28590((uint64_t)result, a2, a3);
  }
  return result;
}

uint64_t uspoof_getAllowedLocales(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_18CA2858C(a1, a2);
  if (result)
  {
    return sub_18CA28930(result);
  }
  return result;
}

uint64_t uspoof_getAllowedChars(uint64_t a1, int *a2)
{
  uint64_t result = sub_18CA284B0(a1, a2);
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t uspoof_getAllowedUnicodeSet(uint64_t a1, int *a2)
{
  uint64_t result = sub_18CA284B0(a1, a2);
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

void uspoof_setAllowedUnicodeSet(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v5 = sub_18CA2858C(a1, a3);
  if (!v5) {
    return;
  }
  uint64_t v7 = (uint64_t *)a2[32];
  if (v7)
  {
    int v14 = 1;
LABEL_10:
    *a3 = v14;
    return;
  }
  uint64_t v8 = v5;
  uint64_t v9 = icu::UnicodeSet::clone((icu::UnicodeSet *)a2, v6, v7);
  if (!v9 || (int v10 = v9, (*((unsigned char *)v9 + 32) & 1) != 0))
  {
    int v14 = 7;
    goto LABEL_10;
  }
  icu::UnicodeSet::freeze(v9);
  unint64_t v12 = *(icu::UnicodeSet **)(v8 + 24);
  if (v12)
  {
    int v13 = icu::UnicodeSet::~UnicodeSet(v11, v12);
    icu::UMemory::operator delete(v13);
  }
  *(void *)(v8 + 24) = v10;
  *(_DWORD *)(v8 + 12) |= 0x40u;
}

uint64_t uspoof_check(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  if (a4) {
    *a4 = 0;
  }
  return uspoof_check2(a1, a2, a3, 0, a5);
}

uint64_t uspoof_check2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!sub_18CA284B0(a1, a5)) {
    return 0;
  }
  if (a3 > -2)
  {
    memset(v14, 0, sizeof(v14));
    uint64_t v13 = a2;
    icu::UnicodeString::UnicodeString(v14, a3 == -1, &v13);
    uint64_t v10 = uspoof_check2UnicodeString(a1, (uint64_t)v14, a4, a5);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v14);
  }
  else
  {
    uint64_t v10 = 0;
    *a5 = 1;
  }
  return v10;
}

uint64_t uspoof_check2UnicodeString(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = sub_18CA284B0(a1, a4);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  if (!a3)
  {
    memset(v12, 0, sizeof(v12));
    sub_18CA291CC((uint64_t)v12);
    uint64_t v11 = sub_18CA263C4(v8, a2, v12, (UErrorCode *)a4);
    sub_18CA29294(v12);
    return v11;
  }
  uint64_t v9 = (_DWORD *)sub_18CA2922C(a3, a4);
  if (!v9) {
    return 0;
  }

  return sub_18CA263C4(v8, a2, v9, (UErrorCode *)a4);
}

uint64_t uspoof_checkUTF8(uint64_t a1, char *a2, int32_t a3, _DWORD *a4, int *a5)
{
  if (a4) {
    *a4 = 0;
  }
  return uspoof_check2UTF8(a1, a2, a3, 0, a5);
}

uint64_t uspoof_check2UTF8(uint64_t a1, char *__s, int32_t a3, uint64_t a4, int *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return 0;
  }
  memset(v12, 0, sizeof(v12));
  if (a3 < 0) {
    a3 = strlen(__s);
  }
  icu::UnicodeString::fromUTF8(__s, a3, (uint64_t)v12);
  uint64_t v5 = uspoof_check2UnicodeString(a1, (uint64_t)v12, a4, a5);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v12);
  return v5;
}

uint64_t uspoof_areConfusable(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  sub_18CA284B0(a1, a6);
  if (*a6 > 0) {
    return 0;
  }
  if (a3 < -1 || a5 <= -2)
  {
    uint64_t v12 = 0;
    *a6 = 1;
  }
  else
  {
    memset(v19, 0, sizeof(v19));
    uint64_t v17 = a2;
    icu::UnicodeString::UnicodeString(v19, a3 == -1, &v17);
    memset(v18, 0, sizeof(v18));
    uint64_t v16 = a4;
    icu::UnicodeString::UnicodeString(v18, a5 == -1, &v16);
    uint64_t v12 = uspoof_areConfusableUnicodeString(a1, (uint64_t)v19, (uint64_t)v18, a6);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v18);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v19);
  }
  return v12;
}

uint64_t uspoof_areConfusableUnicodeString(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_18CA284B0(a1, a4);
  if (*a4 <= 0)
  {
    uint64_t v11 = v8;
    if ((*(unsigned char *)(v8 + 12) & 7) == 0)
    {
      uint64_t v10 = 0;
      *a4 = 27;
      return v10;
    }
    long long v30 = 0u;
    uint64_t v33 = 0;
    long long v32 = 0u;
    long long v31 = 0u;
    BOOL v29 = &unk_1EDA47700;
    LOWORD(v30) = 2;
    uspoof_getSkeletonUnicodeString(a1, v9, a2, (uint64_t)&v29, a4);
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v28 = 0;
    long long v27 = 0u;
    BOOL v24 = &unk_1EDA47700;
    LOWORD(v25) = 2;
    uspoof_getSkeletonUnicodeString(a1, v12, a3, (uint64_t)&v24, a4);
    unint64_t v13 = *a4;
    if ((int)v13 > 0) {
      goto LABEL_5;
    }
    if (v30)
    {
      unint64_t v13 = (unsigned __int16)v25;
      if ((v25 & 1) == 0) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v10 = 0;
      if ((v30 & 0x8000u) == 0) {
        int v16 = (unsigned __int16)v30 >> 5;
      }
      else {
        int v16 = DWORD1(v30);
      }
      if ((v25 & 0x8000u) == 0) {
        unint64_t v13 = (unsigned __int16)v25 >> 5;
      }
      else {
        unint64_t v13 = DWORD1(v25);
      }
      if ((v25 & 1) != 0 || v16 != v13) {
        goto LABEL_6;
      }
      if (!icu::UnicodeString::doEquals((icu::UnicodeString *)&v29, (const icu::UnicodeString *)&v24, v16))
      {
LABEL_5:
        uint64_t v10 = 0;
LABEL_6:
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v24);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v29);
        return v10;
      }
    }
    memset(v22, 0, sizeof(v22));
    int v23 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v22);
    sub_18CA28AAC(v11, a2, (icu::ScriptSet *)v22, (UErrorCode *)a4);
    memset(v20, 0, sizeof(v20));
    int v21 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v20);
    sub_18CA28AAC(v11, a3, (icu::ScriptSet *)v20, (UErrorCode *)a4);
    if (icu::ScriptSet::intersects((icu::ScriptSet *)v22, (const icu::ScriptSet *)v20))
    {
      int v17 = 1;
    }
    else
    {
      int v17 = 2;
      if (!icu::ScriptSet::isEmpty((icu::ScriptSet *)v22))
      {
        if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v20)) {
          int v17 = 2;
        }
        else {
          int v17 = 6;
        }
      }
    }
    int v18 = *(_DWORD *)(v11 + 12);
    unsigned int v19 = v17 & 6;
    if (v18) {
      unsigned int v19 = v17;
    }
    if ((v18 & 2) == 0) {
      v19 &= ~2u;
    }
    if ((v18 & 4) != 0) {
      uint64_t v10 = v19;
    }
    else {
      uint64_t v10 = v19 & 3;
    }
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v20);
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v22);
    goto LABEL_6;
  }
  return 0;
}

uint64_t uspoof_areConfusableUTF8(uint64_t a1, const char *a2, int32_t a3, const char *a4, int32_t a5, int *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  sub_18CA284B0(a1, a6);
  if (*a6 > 0) {
    return 0;
  }
  if (a3 < -1 || a5 <= -2)
  {
    uint64_t v12 = 0;
    *a6 = 1;
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    if (a3 < 0) {
      a3 = strlen(a2);
    }
    icu::UnicodeString::fromUTF8(a2, a3, (uint64_t)v17);
    memset(v16, 0, sizeof(v16));
    if (a5 < 0) {
      a5 = strlen(a4);
    }
    icu::UnicodeString::fromUTF8(a4, a5, (uint64_t)v16);
    uint64_t v12 = uspoof_areConfusableUnicodeString(a1, (uint64_t)v17, (uint64_t)v16, a6);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v16);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v17);
  }
  return v12;
}

uint64_t uspoof_getSkeletonUnicodeString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_18CA284B0(a1, a5);
  if (*a5 <= 0)
  {
    uint64_t v9 = v8;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v28 = 0;
    long long v27 = 0u;
    BOOL v24 = &unk_1EDA47700;
    LOWORD(v25) = 2;
    (*(void (**)(uint64_t, uint64_t, void **, int *))(*(void *)qword_1E9192B78 + 24))(qword_1E9192B78, a3, &v24, a5);
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v23 = 0;
    long long v22 = 0u;
    unsigned int v19 = &unk_1EDA47700;
    LOWORD(v20) = 2;
    uint64_t v10 = (uint64_t *)((unsigned __int16)v25 >> 5);
    if ((v25 & 0x8000u) == 0) {
      int v11 = (unsigned __int16)v25 >> 5;
    }
    else {
      int v11 = DWORD1(v25);
    }
    if (v11 >= 1)
    {
      for (int i = 0; i < v11; i += v15)
      {
        unsigned int v13 = icu::UnicodeString::char32At(v10, (icu::UnicodeString *)&v24, i);
        signed int v14 = v13;
        if (v13 < 0x10000) {
          int v15 = 1;
        }
        else {
          int v15 = 2;
        }
        if (!u_hasBinaryProperty(v13, UCHAR_DEFAULT_IGNORABLE_CODE_POINT)) {
          sub_18CA29088(*(void **)(v9 + 16), v14, (icu::UnicodeString *)&v19);
        }
      }
    }
    (*(void (**)(uint64_t, void **, uint64_t, int *))(*(void *)qword_1E9192B78 + 24))(qword_1E9192B78, &v19, a4, a5);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v19);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v24);
  }
  return a4;
}

uint64_t uspoof_areBidiConfusable(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, int a6, int *a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(v19, 0, sizeof(v19));
  uint64_t v17 = a3;
  icu::UnicodeString::UnicodeString(v19, a4 == -1, &v17);
  memset(v18, 0, sizeof(v18));
  uint64_t v16 = a5;
  icu::UnicodeString::UnicodeString(v18, a6 == -1, &v16);
  if (BYTE8(v19[0]) & 1) != 0 || (BYTE8(v18[0]))
  {
    uint64_t v13 = 0;
    uint64_t v12 = 1;
    *a7 = 1;
  }
  else
  {
    uint64_t v13 = uspoof_areBidiConfusableUnicodeString(a1, a2, (uint64_t)v19, (uint64_t)v18, a7);
  }
  icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v18);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v19);
  return v13;
}

uint64_t uspoof_areBidiConfusableUnicodeString(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = sub_18CA284B0(a1, a5);
  if (*a5 <= 0)
  {
    uint64_t v12 = v10;
    if ((*(unsigned char *)(v10 + 12) & 7) == 0)
    {
      uint64_t v11 = 0;
      *a5 = 27;
      return v11;
    }
    long long v28 = 0u;
    uint64_t v31 = 0;
    long long v30 = 0u;
    long long v29 = 0u;
    long long v27 = &unk_1EDA47700;
    LOWORD(v28) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, a3, (uint64_t)&v27, a5);
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v26 = 0;
    long long v25 = 0u;
    long long v22 = &unk_1EDA47700;
    LOWORD(v23) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, a4, (uint64_t)&v22, a5);
    unint64_t v13 = *a5;
    if ((int)v13 > 0) {
      goto LABEL_5;
    }
    if (v28)
    {
      unint64_t v13 = (unsigned __int16)v23;
      if ((v23 & 1) == 0) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if ((v28 & 0x8000u) == 0) {
        int v16 = (unsigned __int16)v28 >> 5;
      }
      else {
        int v16 = DWORD1(v28);
      }
      if ((v23 & 0x8000u) == 0) {
        unint64_t v13 = (unsigned __int16)v23 >> 5;
      }
      else {
        unint64_t v13 = DWORD1(v23);
      }
      if ((v23 & 1) != 0 || v16 != v13) {
        goto LABEL_6;
      }
      if (!icu::UnicodeString::doEquals((icu::UnicodeString *)&v27, (const icu::UnicodeString *)&v22, v16))
      {
LABEL_5:
        uint64_t v11 = 0;
LABEL_6:
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v22);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v27);
        return v11;
      }
    }
    memset(v20, 0, sizeof(v20));
    int v21 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v20);
    sub_18CA28AAC(v12, a3, (icu::ScriptSet *)v20, (UErrorCode *)a5);
    memset(v18, 0, sizeof(v18));
    int v19 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v18);
    sub_18CA28AAC(v12, a4, (icu::ScriptSet *)v18, (UErrorCode *)a5);
    if (icu::ScriptSet::intersects((icu::ScriptSet *)v20, (const icu::ScriptSet *)v18))
    {
      int v17 = 1;
    }
    else
    {
      int v17 = 2;
      if (!icu::ScriptSet::isEmpty((icu::ScriptSet *)v20))
      {
        if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v18)) {
          int v17 = 2;
        }
        else {
          int v17 = 6;
        }
      }
    }
    uint64_t v11 = *(_DWORD *)(v12 + 12) & v17;
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v18);
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v20);
    goto LABEL_6;
  }
  return 0;
}

uint64_t uspoof_areBidiConfusableUTF8(uint64_t a1, unsigned int a2, char *__s, int32_t a4, const char *a5, int a6, int *a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a4 < -1 || (int32_t v8 = a6, a6 <= -2))
  {
    uint64_t v13 = 0;
    *a7 = 1;
  }
  else
  {
    memset(v18, 0, sizeof(v18));
    if (a4 < 0) {
      a4 = strlen(__s);
    }
    icu::UnicodeString::fromUTF8(__s, a4, (uint64_t)v18);
    memset(v17, 0, sizeof(v17));
    if (v8 < 0) {
      int32_t v8 = strlen(a5);
    }
    icu::UnicodeString::fromUTF8(a5, v8, (uint64_t)v17);
    uint64_t v13 = uspoof_areBidiConfusableUnicodeString(a1, a2, (uint64_t)v18, (uint64_t)v17, a7);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v17);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v18);
  }
  return v13;
}

uint64_t uspoof_getBidiSkeletonUnicodeString(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a4 + 8)) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = *(_WORD *)(a4 + 8) & 0x1F;
  }
  *(_WORD *)(a4 + 8) = v7;
  if (a2 < 2)
  {
    unsigned __int8 v9 = a2;
    uint64_t v11 = ubidi_open();
    uint64_t v12 = v11;
    unsigned int v13 = *(unsigned __int16 *)(a3 + 8);
    if ((v13 & 0x11) != 0)
    {
      signed int v14 = 0;
    }
    else if ((v13 & 2) != 0)
    {
      signed int v14 = (const UChar *)(a3 + 10);
    }
    else
    {
      signed int v14 = *(const UChar **)(a3 + 24);
    }
    int v15 = (__int16)v13;
    unsigned int v16 = v13 >> 5;
    if (v15 >= 0) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = *(unsigned int *)(a3 + 12);
    }
    ubidi_setPara((uint64_t)v11, v14, v17, v9, 0, a5);
    if (*a5 < 1)
    {
      long long v24 = 0u;
      long long v25 = 0u;
      uint64_t v27 = 0;
      long long v26 = 0u;
      long long v23 = &unk_1EDA47700;
      LOWORD(v24) = 2;
      int ProcessedLength = ubidi_getProcessedLength((uint64_t)v12);
      unint64_t Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)&v23, ProcessedLength);
      if (Buffer)
      {
        ubidi_writeReordered((uint64_t)v12, Buffer, ProcessedLength, 3, a5);
        icu::UnicodeString::releaseBuffer((uint64_t)&v23, ProcessedLength);
        ubidi_close(v12);
        unint64_t v21 = *a5;
        if ((int)v21 <= 0) {
          uspoof_getSkeletonUnicodeString(a1, v20, (uint64_t)&v23, a4, a5);
        }
      }
      else
      {
        *a5 = 7;
        ubidi_close(v12);
      }
      icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v23);
    }
    else
    {
      ubidi_close(v12);
    }
  }
  else
  {
    *a5 = 1;
  }
  return a4;
}

uint64_t uspoof_checkUnicodeString(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (a3) {
    *a3 = 0;
  }
  return uspoof_check2UnicodeString(a1, a2, 0, a4);
}

uint64_t sub_18CA263C4(uint64_t a1, uint64_t a2, _DWORD *a3, UErrorCode *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  sub_18CA29198(a3);
  int v8 = *(_DWORD *)(a1 + 12);
  if ((v8 & 0x10) != 0)
  {
    int v10 = sub_18CA28C94(a1, a2, a4);
    int v9 = 16 * (v10 > *(_DWORD *)(a1 + 40));
    a3[54] = v10;
    int v8 = *(_DWORD *)(a1 + 12);
    if ((v8 & 0x80) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    int v9 = 0;
    if ((v8 & 0x80) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v30);
  sub_18CA28BD0(a1, a2, (icu::UnicodeSet *)&v30);
  if ((int)icu::UnicodeSet::size((icu::UnicodeSet *)&v30) > 1) {
    v9 |= 0x80u;
  }
  icu::UnicodeSet::operator=((icu::UnicodeSet *)(a3 + 4), (const icu::UnicodeSet *)&v30);
  icu::UnicodeSet::~UnicodeSet(v11, (icu::UnicodeSet *)&v30);
  int v8 = *(_DWORD *)(a1 + 12);
LABEL_8:
  if ((v8 & 0x100) != 0)
  {
    if (sub_18CA28E60(a1, (icu::UnicodeString *)a2) != -1) {
      v9 |= 0x100u;
    }
    if ((*(_DWORD *)(a1 + 12) & 0x40) == 0) {
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_23;
  }
  int v12 = 0;
  unsigned int v13 = *(unsigned __int16 *)(a2 + 8);
  int v14 = (__int16)v13;
  int v15 = (uint64_t *)(v13 >> 5);
  if (v14 >= 0) {
    int v16 = (int)v15;
  }
  else {
    int v16 = *(_DWORD *)(a2 + 12);
  }
  while (v12 < v16)
  {
    unsigned int v17 = icu::UnicodeString::char32At(v15, (icu::UnicodeString *)a2, v12);
    if (v17 < 0x10000) {
      int v18 = 1;
    }
    else {
      int v18 = 2;
    }
    v12 += v18;
    if (!icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 24), v17))
    {
      v9 |= 0x40u;
      break;
    }
  }
LABEL_23:
  int v19 = *(_DWORD *)(a1 + 12);
  if ((v19 & 0x20) != 0)
  {
    long long v44 = 0u;
    uint64_t v47 = 0;
    long long v46 = 0u;
    long long v45 = 0u;
    uint64_t v43 = &unk_1EDA47700;
    LOWORD(v44) = 2;
    (*(void (**)(uint64_t, uint64_t, void **, UErrorCode *))(*(void *)qword_1E9192B78 + 24))(qword_1E9192B78, a2, &v43, a4);
    if ((v44 & 0x8000u) == 0) {
      int v20 = (unsigned __int16)v44 >> 5;
    }
    else {
      int v20 = DWORD1(v44);
    }
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v30);
    if (v20 >= 1)
    {
      unsigned int v22 = 0;
      int v23 = 0;
      while (2)
      {
        char v24 = 1;
        while (1)
        {
          unsigned int v25 = icu::UnicodeString::char32At(v21, (icu::UnicodeString *)&v43, v23);
          unsigned int v26 = v25;
          int v27 = v25 < 0x10000 ? 1 : 2;
          v23 += v27;
          if (u_charType(v25) != 6) {
            break;
          }
          if (!v22) {
            goto LABEL_43;
          }
          if (v24) {
            icu::UnicodeSet::add((icu::UnicodeSet *)&v30, v22);
          }
          if (icu::UnicodeSet::contains((icu::UnicodeSet *)&v30, v26))
          {
            v9 |= 0x20u;
            goto LABEL_46;
          }
          icu::UnicodeSet::add((icu::UnicodeSet *)&v30, v26);
          char v24 = 0;
          if (v23 >= v20) {
            goto LABEL_46;
          }
        }
        if ((v24 & 1) == 0) {
          icu::UnicodeSet::clear((icu::UnicodeSet *)&v30);
        }
        unsigned int v26 = 0;
LABEL_43:
        unsigned int v22 = v26;
        if (v23 < v20) {
          continue;
        }
        break;
      }
    }
LABEL_46:
    icu::UnicodeSet::~UnicodeSet(v21, (icu::UnicodeSet *)&v30);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v43);
    int v19 = *(_DWORD *)(a1 + 12);
  }
  a3[3] = v9;
  return sub_18CA29270((uint64_t)a3, v19);
}

uint64_t uspoof_getSkeleton(uint64_t a1, uint64_t a2, uint64_t a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  sub_18CA284B0(a1, a7);
  if (*a7 > 0) {
    return 0;
  }
  if (a4 < -1 || a6 < 0 || a5 && !a6)
  {
    uint64_t v13 = 0;
    *a7 = 1;
  }
  else
  {
    memset(v25, 0, sizeof(v25));
    uint64_t v19 = a3;
    icu::UnicodeString::UnicodeString(v25, a4 == -1, &v19);
    long long v21 = 0u;
    uint64_t v24 = 0;
    long long v23 = 0u;
    long long v22 = 0u;
    int v20 = &unk_1EDA47700;
    LOWORD(v21) = 2;
    uspoof_getSkeletonUnicodeString(a1, v14, (uint64_t)v25, (uint64_t)&v20, a7);
    int v18 = a5;
    icu::UnicodeString::extract((uint64_t)&v20, &v18, a6, a7);
    int v15 = (void *)((unsigned __int16)v21 >> 5);
    if ((v21 & 0x8000u) == 0) {
      uint64_t v13 = v15;
    }
    else {
      uint64_t v13 = DWORD1(v21);
    }
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v25);
  }
  return v13;
}

uint64_t uspoof_getBidiSkeleton(uint64_t a1, unsigned int a2, uint64_t a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  memset(v23, 0, sizeof(v23));
  uint64_t v17 = a3;
  icu::UnicodeString::UnicodeString(v23, a4 == -1, &v17);
  v15[1] = v17;
  if (BYTE8(v23[0]))
  {
    uint64_t v12 = 0;
    uint64_t v13 = 1;
    *a7 = 1;
  }
  else
  {
    long long v19 = 0u;
    uint64_t v22 = 0;
    long long v21 = 0u;
    long long v20 = 0u;
    int v18 = &unk_1EDA47700;
    LOWORD(v19) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, (uint64_t)v23, (uint64_t)&v18, a7);
    int v16 = a5;
    uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v18, &v16, a6, a7);
    v15[0] = v16;
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v18);
  }
  icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v23);
  return v12;
}

uint64_t uspoof_getSkeletonUTF8(uint64_t a1, uint64_t a2, const char *a3, int32_t a4, char *a5, int32_t a6, int *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  sub_18CA284B0(a1, a7);
  if (*a7 > 0) {
    return 0;
  }
  if (a4 < -1 || a6 < 0 || a5 && !a6)
  {
    uint64_t v13 = 0;
    *a7 = 1;
  }
  else
  {
    memset(v26, 0, sizeof(v26));
    if (a4 < 0) {
      a4 = strlen(a3);
    }
    icu::UnicodeString::fromUTF8(a3, a4, (uint64_t)v26);
    long long v22 = 0u;
    uint64_t v25 = 0;
    long long v24 = 0u;
    long long v23 = 0u;
    long long v21 = &unk_1EDA47700;
    LOWORD(v22) = 2;
    uspoof_getSkeletonUnicodeString(a1, v14, (uint64_t)v26, (uint64_t)&v21, a7);
    unint64_t v15 = *a7;
    if ((int)v15 <= 0)
    {
      int32_t pDestLength = 0;
      if ((v22 & 0x11) != 0)
      {
        int v16 = 0;
      }
      else if ((v22 & 2) != 0)
      {
        int v16 = (const UChar *)&v22 + 1;
      }
      else
      {
        int v16 = (const UChar *)v23;
      }
      if ((v22 & 0x8000u) == 0) {
        int32_t v17 = (unsigned __int16)v22 >> 5;
      }
      else {
        int32_t v17 = DWORD1(v22);
      }
      u_strToUTF8(a5, a6, &pDestLength, v16, v17, (UErrorCode *)a7);
      uint64_t v13 = pDestLength;
    }
    else
    {
      uint64_t v13 = 0;
    }
    icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v21);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v26);
  }
  return v13;
}

uint64_t uspoof_getBidiSkeletonUTF8(uint64_t a1, unsigned int a2, char *__s, int32_t a4, char *a5, int32_t a6, int *a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a4 > -2)
  {
    memset(v25, 0, sizeof(v25));
    if (a4 < 0) {
      a4 = strlen(__s);
    }
    icu::UnicodeString::fromUTF8(__s, a4, (uint64_t)v25);
    long long v21 = 0u;
    uint64_t v24 = 0;
    long long v23 = 0u;
    long long v22 = 0u;
    long long v20 = &unk_1EDA47700;
    LOWORD(v21) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, (uint64_t)v25, (uint64_t)&v20, a7);
    unint64_t v14 = *a7;
    if ((int)v14 <= 0)
    {
      int32_t pDestLength = 0;
      if ((v21 & 0x11) != 0)
      {
        unint64_t v15 = 0;
      }
      else if ((v21 & 2) != 0)
      {
        unint64_t v15 = (const UChar *)&v21 + 1;
      }
      else
      {
        unint64_t v15 = (const UChar *)v22;
      }
      if ((v21 & 0x8000u) == 0) {
        int32_t v16 = (unsigned __int16)v21 >> 5;
      }
      else {
        int32_t v16 = DWORD1(v21);
      }
      u_strToUTF8(a5, a6, &pDestLength, v15, v16, (UErrorCode *)a7);
      uint64_t v8 = pDestLength;
    }
    else
    {
      uint64_t v8 = 0;
    }
    icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
  }
  else
  {
    uint64_t v8 = 0;
    *a7 = 1;
  }
  return v8;
}

size_t uspoof_serialize(uint64_t a1, void *a2, int a3, _DWORD *a4)
{
  size_t result = sub_18CA2858C(a1, a4);
  if (result)
  {
    uint64_t v8 = *(const void ***)(result + 16);
    return sub_18CA297D4(v8, a2, a3, a4);
  }
  return result;
}

uint64_t uspoof_getInclusionSet(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192B90, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192B90))
    {
      if (dword_1E9192B94 >= 1) {
        *a1 = dword_1E9192B94;
      }
    }
    else
    {
      sub_18CA24BF4(a1, v2);
      dword_1E9192B94 = *a1;
      icu::umtx_initImplPostInit(&dword_1E9192B90);
    }
  }
  return qword_1E9192B80;
}

uint64_t uspoof_getRecommendedSet(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192B90, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192B90))
    {
      if (dword_1E9192B94 >= 1) {
        *a1 = dword_1E9192B94;
      }
    }
    else
    {
      sub_18CA24BF4(a1, v2);
      dword_1E9192B94 = *a1;
      icu::umtx_initImplPostInit(&dword_1E9192B90);
    }
  }
  return qword_1E9192B88;
}

uint64_t uspoof_getInclusionUnicodeSet(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192B90, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192B90))
    {
      if (dword_1E9192B94 >= 1) {
        *a1 = dword_1E9192B94;
      }
    }
    else
    {
      sub_18CA24BF4(a1, v2);
      dword_1E9192B94 = *a1;
      icu::umtx_initImplPostInit(&dword_1E9192B90);
    }
  }
  return qword_1E9192B80;
}

uint64_t uspoof_getRecommendedUnicodeSet(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192B90, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192B90))
    {
      if (dword_1E9192B94 >= 1) {
        *a1 = dword_1E9192B94;
      }
    }
    else
    {
      sub_18CA24BF4(a1, v2);
      dword_1E9192B94 = *a1;
      icu::umtx_initImplPostInit(&dword_1E9192B90);
    }
  }
  return qword_1E9192B88;
}

uint64_t *uspoof_openCheckResult@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  size_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0xE0, a2);
  if (result)
  {
    uint64_t v5 = sub_18CA291CC((uint64_t)result);
    return (uint64_t *)nullsub_17(v5);
  }
  else
  {
    *a1 = 7;
  }
  return result;
}

uint64_t uspoof_closeCheckResult(uint64_t a1)
{
  int v2 = 0;
  uint64_t result = sub_18CA2922C(a1, &v2);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t uspoof_getCheckResultChecks(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_18CA2922C(a1, a2);
  if (*a2 <= 0) {
    return *(unsigned int *)(v3 + 12);
  }
  else {
    return 0;
  }
}

uint64_t uspoof_getCheckResultRestrictionLevel(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_18CA2922C(a1, a2);
  if (*a2 <= 0) {
    return *(unsigned int *)(v3 + 216);
  }
  else {
    return 1610612736;
  }
}

uint64_t uspoof_getCheckResultNumerics(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_18CA2922C(a1, a2);
  if (*a2 >= 1) {
    return 0;
  }
  else {
    return v3 + 16;
  }
}

uint64_t sub_18CA27108@<X0>(void *a1@<X8>)
{
  if (qword_1E9192B80)
  {
    uint64_t v1 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_1E9192B80);
    icu::UMemory::operator delete(v1);
  }
  qword_1E9192B80 = 0;
  if (qword_1E9192B88)
  {
    int v2 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_1E9192B88);
    icu::UMemory::operator delete(v2);
  }
  qword_1E9192B88 = 0;
  qword_1E9192B78 = 0;
  atomic_store(0, &dword_1E9192B90);
  return 1;
}

uint64_t uspoof_openFromSource(char *a1, int32_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, UErrorCode *a7)
{
  sub_18CA24B5C(a7);
  uint64_t v13 = (uint64_t *)*(unsigned int *)a7;
  if ((int)v13 > 0) {
    return 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (a6)
  {
    *(void *)a6 = 0;
    *(_WORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 40) = 0;
  }
  int32_t v16 = icu::UMemory::operator new(v13, (icu::UMemory *)0x38, v12);
  if (!v16)
  {
    uint64_t v14 = 0;
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    return v14;
  }
  uint64_t v17 = (uint64_t)v16;
  sub_18CA296B4(v16, a7);
  long long v19 = (uint64_t *)*(unsigned int *)a7;
  if ((int)v19 >= 1)
  {
    long long v20 = (void *)sub_18CA29700(v17);
    icu::UMemory::operator delete(v20);
    return 0;
  }
  long long v21 = icu::UMemory::operator new(v19, (icu::UMemory *)0x30, v18);
  uint64_t v14 = (uint64_t)v21;
  if (!v21)
  {
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    long long v22 = (void *)sub_18CA29700(v17);
    icu::UMemory::operator delete(v22);
    return v14;
  }
  sub_18CA28184((uint64_t)v21, v17, a7);
  if (*(int *)a7 >= 1 || (sub_18CA277D0(v14, a1, a2, a5, (_DWORD *)a6, (int *)a7), *(int *)a7 >= 1))
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    return 0;
  }
  return v14;
}

icu::UVector **sub_18CA272C4@<X0>(icu::UVector **a1@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = (icu::UVector *)icu::UMemory::operator new(a3, (icu::UMemory *)0x28, (unint64_t)a2);
  if (v5)
  {
    unint64_t v6 = v5;
    icu::UVector::UVector(v5, a2);
    if (*(int *)a2 <= 0)
    {
      icu::UVector::setDeleter(v6, (void (*)(void *))sub_18CA27FF4);
      *a1 = v6;
      a1[1] = (icu::UVector *)uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a2);
    }
    else
    {
      (*(void (**)(icu::UVector *))(*(void *)v6 + 8))(v6);
    }
  }
  else if (*(int *)a2 <= 0)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return a1;
}

uint64_t *sub_18CA273AC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uhash_close((unsigned char *)a1[1]);
  return a1;
}

uint64_t sub_18CA27404(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *(unsigned __int16 *)(v2 + 8);
  if (*(__int16 *)(v2 + 8) < 0) {
    signed int v4 = *(_DWORD *)(v2 + 12);
  }
  else {
    signed int v4 = v3 >> 5;
  }
  uint64_t v5 = *a2;
  unsigned int v6 = *(unsigned __int16 *)(*a2 + 8);
  if (*(__int16 *)(*a2 + 8) < 0) {
    signed int v7 = *(_DWORD *)(v5 + 12);
  }
  else {
    signed int v7 = v6 >> 5;
  }
  if (v4 < v7) {
    return 0xFFFFFFFFLL;
  }
  if (v4 > v7) {
    return 1;
  }
  if ((v3 & 0x8000) != 0)
  {
    int32_t v9 = *(_DWORD *)(v2 + 12);
    if ((v6 & 1) == 0) {
      goto LABEL_13;
    }
    return (v3 & 1) == 0;
  }
  int32_t v9 = v3 >> 5;
  if (v6) {
    return (v3 & 1) == 0;
  }
LABEL_13:
  if ((v6 & 0x8000u) == 0) {
    int v10 = v6 >> 5;
  }
  else {
    int v10 = *(_DWORD *)(v5 + 12);
  }
  int v11 = v10 & (v10 >> 31);
  int32_t v12 = v10 & ~(v10 >> 31);
  uint64_t v13 = v5 + 10;
  uint64_t v14 = *(void *)(v5 + 24);
  if ((v6 & 2) != 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  return icu::UnicodeString::doCompare(v2, 0, v9, v15, v11, v12);
}

uint64_t *sub_18CA274C0(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v7 = uhash_get(*(void *)(a1 + 8), a2);
    if (!v7)
    {
      int32_t v12 = icu::UMemory::operator new(v9, (icu::UMemory *)0x10, v8);
      uint64_t v13 = v12;
      if (v12)
      {
        uint64_t v10 = 0;
        uint64_t *v12 = a2;
        *((_DWORD *)v12 + 2) = 0;
      }
      else
      {
        uint64_t v10 = a2;
        if (*(int *)a3 <= 0)
        {
          *a3 = U_MEMORY_ALLOCATION_ERROR;
          uint64_t v10 = a2;
        }
      }
      uint64_t v14 = *(uint64_t (***)(void *))a1;
      uint64_t v15 = 0;
      icu::UVector::adoptElement(v14, v13, a3);
      signed int v4 = 0;
      if (*(int *)a3 <= 0)
      {
        uhash_put(*(void *)(a1 + 8), a2, (uint64_t)v13, (int *)a3);
        signed int v4 = v13;
      }
      sub_18CA2805C(&v15);
      if (v10) {
        goto LABEL_6;
      }
      return v4;
    }
    signed int v4 = (uint64_t *)v7;
  }
  else
  {
    signed int v4 = 0;
  }
  uint64_t v10 = a2;
  if (a2) {
LABEL_6:
  }
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  return v4;
}

uint64_t sub_18CA275E4(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  if (*a3 <= 0)
  {
    *(void *)(a1 + 16) = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, a3);
    uint64_t v7 = (icu::UnicodeSet *)icu::UMemory::operator new(v6, (icu::UMemory *)0xC8, v5);
    if (v7)
    {
      icu::UnicodeSet::UnicodeSet(v7);
      *(void *)(a1 + 24) = v8;
      int v11 = (icu::UVector *)icu::UMemory::operator new(v10, (icu::UMemory *)0x28, v9);
      if (v11)
      {
        *(void *)(a1 + 32) = icu::UVector::UVector(v11, (UErrorCode *)a3);
        uint64_t v14 = (icu::UVector *)icu::UMemory::operator new(v13, (icu::UMemory *)0x28, v12);
        if (v14)
        {
          *(void *)(a1 + 40) = icu::UVector::UVector(v14, (UErrorCode *)a3);
          uint64_t v17 = (icu::UVector **)icu::UMemory::operator new(v16, (icu::UMemory *)0x10, v15);
          if (v17)
          {
            *(void *)(a1 + 56) = sub_18CA272C4(v17, (UErrorCode *)a3, v18);
            return a1;
          }
          *(void *)(a1 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 40) = 0;
        }
      }
      else
      {
        *(void *)(a1 + 32) = 0;
      }
    }
    else
    {
      *(void *)(a1 + 24) = 0;
    }
    *a3 = 7;
  }
  return a1;
}

uint64_t sub_18CA276E8(uint64_t a1)
{
  uprv_free(*(void **)(a1 + 8));
  uregex_close(*(URegularExpression **)(a1 + 64));
  uregex_close(*(URegularExpression **)(a1 + 72));
  uhash_close(*(unsigned char **)(a1 + 16));
  unsigned int v3 = *(icu::UnicodeSet **)(a1 + 24);
  if (v3)
  {
    signed int v4 = icu::UnicodeSet::~UnicodeSet(v2, v3);
    icu::UMemory::operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(uint64_t **)(a1 + 56);
  if (v8)
  {
    unint64_t v9 = sub_18CA273AC(v8);
    icu::UMemory::operator delete(v9);
  }
  return a1;
}

uint64_t sub_18CA277D0(uint64_t result, char *a2, int32_t a3, _DWORD *a4, _DWORD *a5, int *a6)
{
  if (*a6 <= 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    sub_18CA275E4((uint64_t)v11, result, a6);
    sub_18CA27884((UChar *)v11, a2, a3, (UErrorCode *)a6);
    if (a4)
    {
      if (*a6 >= 1)
      {
        *a4 = 1;
        *a5 = v12;
      }
    }
    return sub_18CA276E8((uint64_t)v11);
  }
  return result;
}

UChar *sub_18CA27884(UChar *result, char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int32_t pDestLength = 0;
  if (*(int *)pErrorCode > 0) {
    return result;
  }
  uint64_t v7 = (uint64_t)result;
  uint64_t result = u_strFromUTF8(0, 0, &pDestLength, src, srcLength, pErrorCode);
  if (*pErrorCode != U_BUFFER_OVERFLOW_ERROR) {
    return result;
  }
  *UErrorCode pErrorCode = U_ZERO_ERROR;
  uint64_t result = (UChar *)uprv_malloc(2 * pDestLength + 2);
  *(void *)(v7 + 8) = result;
  if (!result)
  {
    *UErrorCode pErrorCode = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }
  u_strFromUTF8(result, pDestLength + 1, 0, src, srcLength, pErrorCode);
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  icu::UnicodeString::UnicodeString(&v58, "(?m)^[ \\t]*([0-9A-Fa-f]+)[ \\t]+;[ \\t]*([0-9A-Fa-f]+(?:[ \\t]+[0-9A-Fa-f]+)*)[ \\t]*;\\s*(?:(SL)|(SA)|(ML)|(MA))[ "
    "\\t]*(?:#.*?)?$|^([ \\t]*(?:#.*?)?)$|^(.*?)$",
    0xFFFFFFFFLL,
    0);
  uint64_t v8 = 0;
  if ((BYTE8(v58) & 0x11) == 0)
  {
    if ((BYTE8(v58) & 2) != 0) {
      uint64_t v8 = (const UChar *)((unint64_t)&v58 | 0xA);
    }
    else {
      uint64_t v8 = (const UChar *)*((void *)&v59 + 1);
    }
  }
  if ((SWORD4(v58) & 0x8000u) == 0) {
    int32_t v9 = WORD4(v58) >> 5;
  }
  else {
    int32_t v9 = HIDWORD(v58);
  }
  *(void *)(v7 + 64) = uregex_open(v8, v9, 0, 0, pErrorCode);
  int v55 = L"\\s*([0-9A-F]+)";
  icu::UnicodeString::UnicodeString(v57, 1, &v55);
  icu::UnicodeString::operator=((icu::UnicodeString *)&v58, (icu::UnicodeString *)v57);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v57);
  int v11 = 0;
  if ((BYTE8(v58) & 0x11) == 0)
  {
    if ((BYTE8(v58) & 2) != 0) {
      int v11 = (const UChar *)((unint64_t)&v58 | 0xA);
    }
    else {
      int v11 = (const UChar *)*((void *)&v59 + 1);
    }
  }
  if ((SWORD4(v58) & 0x8000u) == 0) {
    int32_t v12 = WORD4(v58) >> 5;
  }
  else {
    int32_t v12 = HIDWORD(v58);
  }
  *(void *)(v7 + 72) = uregex_open(v11, v12, 0, 0, pErrorCode);
  uint64_t v13 = *(UChar **)(v7 + 8);
  if ((__int16)*v13 == -257) {
    UChar *v13 = 32;
  }
  uregex_setText(*(URegularExpression **)(v7 + 64), v13, pDestLength, pErrorCode);
  if (!uregex_findNext(*(URegularExpression **)(v7 + 64), pErrorCode))
  {
LABEL_31:
    icu::UVector::sort(**(void **)(v7 + 56), (uint64_t)sub_18CA27404, (int *)pErrorCode);
    long long v33 = icu::UMemory::operator new(v32, (icu::UMemory *)0x40, v31);
    if (v33)
    {
      *long long v33 = (uint64_t)&unk_1EDA47700;
      *((_WORD *)v33 + 4) = 2;
    }
    *(void *)(v7 + 48) = v33;
    int v34 = *(_DWORD *)(**(void **)(v7 + 56) + 8);
    if (v34 < 1)
    {
LABEL_56:
      if ((int)icu::UnicodeSet::getRangeCount(*(icu::UnicodeSet **)(v7 + 24)) >= 1)
      {
        int v48 = 0;
        do
        {
          signed int RangeStart = icu::UnicodeSet::getRangeStart(*(icu::UnicodeSet **)(v7 + 24), v48);
          if (RangeStart <= (int)icu::UnicodeSet::getRangeEnd(*(icu::UnicodeSet **)(v7 + 24), v48))
          {
            do
            {
              int v50 = (_DWORD *)uhash_iget(*(void *)(v7 + 16), RangeStart);
              unsigned int v51 = *(unsigned __int16 *)(*(void *)v50 + 8);
              if ((v51 & 0x8000) != 0)
              {
                int v52 = *(_DWORD *)(*(void *)v50 + 12);
                if (v52 >= 257)
                {
LABEL_66:
                  uint64_t v30 = 1;
                  goto LABEL_69;
                }
              }
              else
              {
                int v52 = v51 >> 5;
                if (v51 >> 5 > 0x100) {
                  goto LABEL_66;
                }
              }
              int v53 = v50[2];
              icu::UVector::addElement(*(icu::UVector **)(v7 + 32), ((v52 << 24) - 0x1000000) | RangeStart, pErrorCode);
              icu::UVector::addElement(*(icu::UVector **)(v7 + 40), v53, pErrorCode);
            }
            while (RangeStart++ < (int)icu::UnicodeSet::getRangeEnd(*(icu::UnicodeSet **)(v7 + 24), v48));
          }
          ++v48;
        }
        while (v48 < (int)icu::UnicodeSet::getRangeCount(*(icu::UnicodeSet **)(v7 + 24)));
      }
      sub_18CA27E74(v7, (int *)pErrorCode);
      return (UChar *)icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)&v58);
    }
    unsigned int v35 = 0;
    while (1)
    {
      long long v36 = (_DWORD *)icu::UVector::elementAt(**(icu::UVector ***)(v7 + 56), v35);
      uint64_t v37 = *(void *)v36;
      unsigned int v38 = *(unsigned __int16 *)(*(void *)v36 + 8);
      if ((v38 & 0x8000) != 0) {
        unsigned int v39 = *(_DWORD *)(v37 + 12);
      }
      else {
        unsigned int v39 = v38 >> 5;
      }
      uint64_t v40 = *(void *)(v7 + 48);
      if (*(__int16 *)(v40 + 8) < 0) {
        int v41 = *(_DWORD *)(v40 + 12);
      }
      else {
        int v41 = *(unsigned __int16 *)(v40 + 8) >> 5;
      }
      if (v39 != 1)
      {
        _OWORD v36[2] = v41;
        unsigned int v43 = *(unsigned __int16 *)(v37 + 8);
        int v44 = (__int16)v43;
        unsigned int v45 = v43 >> 5;
        if (v44 >= 0) {
          uint64_t v46 = v45;
        }
        else {
          uint64_t v46 = *(unsigned int *)(v37 + 12);
        }
        icu::UnicodeString::doAppend(v40, (const icu::UnicodeString *)v37, 0, v46);
        goto LABEL_55;
      }
      if ((v38 & 0x8000) != 0)
      {
        if (*(_DWORD *)(v37 + 12))
        {
LABEL_44:
          if ((v38 & 2) != 0) {
            uint64_t v42 = (unsigned __int16 *)(v37 + 10);
          }
          else {
            uint64_t v42 = *(unsigned __int16 **)(v37 + 24);
          }
          int v47 = *v42;
          goto LABEL_54;
        }
      }
      else if (v38 >> 5)
      {
        goto LABEL_44;
      }
      int v47 = 0xFFFF;
LABEL_54:
      _OWORD v36[2] = v47;
LABEL_55:
      if (v34 == ++v35) {
        goto LABEL_56;
      }
    }
  }
  while (1)
  {
    ++*(_DWORD *)(v7 + 80);
    if ((uregex_start(*(URegularExpression **)(v7 + 64), 7, pErrorCode) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    if ((uregex_start(*(URegularExpression **)(v7 + 64), 8, pErrorCode) & 0x80000000) == 0)
    {
      uint64_t v30 = 9;
      goto LABEL_69;
    }
    uint64_t v14 = *(void *)(v7 + 8);
    int32_t v15 = uregex_start(*(URegularExpression **)(v7 + 64), 1, pErrorCode);
    int32_t v16 = uregex_end(*(URegularExpression **)(v7 + 64), 1, pErrorCode);
    unsigned int v17 = sub_18CA29124(v14, v15, v16, (int *)pErrorCode);
    int32_t v18 = uregex_start(*(URegularExpression **)(v7 + 64), 2, pErrorCode);
    int32_t v19 = uregex_end(*(URegularExpression **)(v7 + 64), 2, pErrorCode);
    uregex_setText(*(URegularExpression **)(v7 + 72), (const UChar *)(*(void *)(v7 + 8) + 2 * v18), v19 - v18, pErrorCode);
    long long v22 = icu::UMemory::operator new(v21, (icu::UMemory *)0x40, v20);
    if (!v22) {
      break;
    }
    uint64_t v23 = (uint64_t)v22;
    *long long v22 = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v22 + 4) = 2;
    if (uregex_findNext(*(URegularExpression **)(v7 + 72), pErrorCode))
    {
      uint64_t v24 = v18;
      do
      {
        uint64_t v25 = *(void *)(v7 + 8) + 2 * v24;
        int32_t v26 = uregex_start(*(URegularExpression **)(v7 + 72), 1, pErrorCode);
        int32_t v27 = uregex_end(*(URegularExpression **)(v7 + 72), 1, pErrorCode);
        unsigned int v28 = sub_18CA29124(v25, v26, v27, (int *)pErrorCode);
        icu::UnicodeString::append(v23, v28);
      }
      while (uregex_findNext(*(URegularExpression **)(v7 + 72), pErrorCode));
    }
    long long v29 = sub_18CA274C0(*(void *)(v7 + 56), v23, pErrorCode);
    uhash_iput(*(void *)(v7 + 16), v17, (uint64_t)v29, (int *)pErrorCode);
    uint64_t v30 = *(unsigned int *)pErrorCode;
    if ((int)v30 > 0) {
      return (UChar *)icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)&v58);
    }
    icu::UnicodeSet::add(*(icu::UnicodeSet **)(v7 + 24), v17);
LABEL_30:
    if (!uregex_findNext(*(URegularExpression **)(v7 + 64), pErrorCode)) {
      goto LABEL_31;
    }
  }
  uint64_t v30 = 7;
LABEL_69:
  *UErrorCode pErrorCode = v30;
  return (UChar *)icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)&v58);
}

uint64_t sub_18CA27E74(uint64_t a1, int *a2)
{
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 32) + 8);
  uint64_t result = (uint64_t)sub_18CA29704(*(void *)(*(void *)a1 + 16), 4 * (int)v4, a2);
  if (*a2 <= 0)
  {
    uint64_t v6 = result;
    if ((int)v4 >= 1)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(_DWORD *)(v6 + 4 * i) = icu::UVector::elementAti(*(icu::UVector **)(a1 + 32), i);
    }
    uint64_t v8 = *(uint64_t **)(*(void *)a1 + 16);
    uint64_t v9 = *v8;
    *(_DWORD *)(v9 + 12) = v6 - *v8;
    *(_DWORD *)(v9 + 16) = v4;
    _OWORD v8[4] = v6;
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 40) + 8);
    uint64_t result = (uint64_t)sub_18CA29704((uint64_t)v8, 2 * (int)v4, a2);
    if (*a2 <= 0)
    {
      uint64_t v11 = result;
      if ((int)v10 >= 1)
      {
        for (uint64_t j = 0; j != v10; ++j)
          *(_WORD *)(v11 + 2 * j) = icu::UVector::elementAti(*(icu::UVector **)(a1 + 40), j);
      }
      uint64_t v13 = *(uint64_t **)(*(void *)a1 + 16);
      uint64_t v14 = *v13;
      *(_DWORD *)(v14 + 20) = v11 - *v13;
      *(_DWORD *)(v14 + 24) = v10;
      _OWORD v13[5] = v11;
      uint64_t v15 = *(void *)(a1 + 48);
      unsigned int v16 = *(unsigned __int16 *)(v15 + 8);
      if ((v16 & 0x8000) != 0) {
        unsigned int v17 = *(_DWORD *)(v15 + 12);
      }
      else {
        unsigned int v17 = v16 >> 5;
      }
      uint64_t result = (uint64_t)sub_18CA29704((uint64_t)v13, 2 * v17 + 2, a2);
      if (*a2 <= 0)
      {
        int32_t v18 = (UChar *)result;
        uint64_t v19 = *(void *)(a1 + 48);
        long long v22 = v18;
        uint64_t result = icu::UnicodeString::extract(v19, &v22, v17 + 1, a2);
        unint64_t v20 = *(uint64_t **)(*(void *)a1 + 16);
        uint64_t v21 = *v20;
        *(_DWORD *)(v21 + 28) = v18 - *v20;
        *(_DWORD *)(v21 + 32) = v17;
        v20[6] = (uint64_t)v18;
      }
    }
  }
  return result;
}

void sub_18CA27FF4(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    icu::UMemory::operator delete(a1);
  }
}

void **sub_18CA2805C(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    icu::UMemory::operator delete(v2);
  }
  return a1;
}

void *sub_18CA280BC()
{
  return &unk_1E9192B98;
}

icu::UnicodeSet *sub_18CA280C8(icu::UnicodeSet *result, _DWORD *a2)
{
  *((_DWORD *)result + 3) = 0xFFFF;
  *((void *)result + 3) = 0;
  *((void *)result + 4) = 0;
  *((void *)result + 2) = 0;
  *((_DWORD *)result + 10) = 805306368;
  uint64_t v2 = (uint64_t *)*a2;
  if ((int)v2 <= 0)
  {
    uint64_t v4 = result;
    uint64_t v5 = (icu::UnicodeSet *)icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, (unint64_t)a2);
    uint64_t v6 = v5;
    if (v5) {
      icu::UnicodeSet::UnicodeSet(v5, 0, 1114111);
    }
    *((void *)v4 + 3) = v6;
    uint64_t result = (icu::UnicodeSet *)uprv_strdup("");
    *((void *)v4 + 4) = result;
    if (*((void *)v4 + 3) && result)
    {
      return icu::UnicodeSet::freeze(v6);
    }
    else
    {
      *a2 = 7;
    }
  }
  return result;
}

uint64_t sub_18CA28184(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(a1 + 8) = 944111087;
  *(void *)a1 = &unk_1EDA54570;
  sub_18CA280C8((icu::UnicodeSet *)a1, a3);
  *(void *)(a1 + 16) = a2;
  return a1;
}

uint64_t sub_18CA281E0(UErrorCode *a1)
{
  if (*(int *)a1 > 0) {
    return 0;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192BA8, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192BA8))
  {
    if (dword_1E9192BAC >= 1)
    {
      uint64_t result = 0;
      *a1 = dword_1E9192BAC;
      return result;
    }
  }
  else
  {
    sub_18CA29348(a1);
    dword_1E9192BAC = *a1;
    icu::umtx_initImplPostInit(&dword_1E9192BA8);
  }
  if (*(int *)a1 > 0) {
    return 0;
  }
  atomic_fetch_add((atomic_uint *volatile)(qword_1E9192BA0 + 28), 1u);
  return qword_1E9192BA0;
}

uint64_t sub_18CA28298(uint64_t a1, UErrorCode *a2)
{
  *(_DWORD *)(a1 + 8) = 944111087;
  *(void *)a1 = &unk_1EDA54570;
  sub_18CA280C8((icu::UnicodeSet *)a1, a2);
  *(void *)(a1 + 16) = sub_18CA281E0(a2);
  return a1;
}

uint64_t sub_18CA282F8(uint64_t a1, unint64_t a2, int *a3)
{
  *(void *)a1 = &unk_1EDA54570;
  *(void *)(a1 + 8) = 0xFFFF3845FDEFLL;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (*a3 <= 0)
  {
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    uint64_t v7 = *(void *)(a2 + 16);
    if (v7)
    {
      atomic_fetch_add((atomic_uint *volatile)(v7 + 28), 1u);
      uint64_t *v4 = v7;
    }
    *(void *)(a1 + 24) = icu::UnicodeSet::clone(*(icu::UnicodeSet **)(a2 + 24), a2, v4);
    uint64_t v8 = uprv_strdup(*(const char **)(a2 + 32));
    *(void *)(a1 + 32) = v8;
    if (!*(void *)(a1 + 24) || !v8) {
      *a3 = 7;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  }
  return a1;
}

void sub_18CA283C4(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA54570;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    sub_18CA2843C(v3);
  }
  uint64_t v4 = *(icu::UnicodeSet **)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = icu::UnicodeSet::~UnicodeSet(a2, v4);
    icu::UMemory::operator delete(v5);
  }
  uprv_free(*(void **)(a1 + 32));
  *(_DWORD *)(a1 + 8) = 0;

  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18CA2843C(uint64_t a1)
{
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a1 + 28), 0xFFFFFFFF);
  if (a1 && add == 1)
  {
    uint64_t v2 = (void *)sub_18CA296B8(a1);
    icu::UMemory::operator delete(v2);
  }
}

void sub_18CA28488(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_18CA283C4(a1, a2);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18CA284B0(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  uint64_t v2 = a1;
  if (!a1)
  {
    int v4 = 1;
LABEL_10:
    uint64_t v2 = 0;
    *a2 = v4;
    return v2;
  }
  if (*(_DWORD *)(a1 + 8) != 944111087)
  {
    int v4 = 3;
    goto LABEL_10;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  if (v3 && !sub_18CA28528(v3, a2)) {
    return 0;
  }
  return v2;
}

uint64_t sub_18CA28528(uint64_t *a1, int *a2)
{
  if (*a2 <= 0)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      if (*(_DWORD *)v3 == 944111087
        && *(unsigned char *)(v3 + 4) == 2
        && !*(unsigned char *)(v3 + 5)
        && !*(unsigned char *)(v3 + 6)
        && !*(unsigned char *)(v3 + 7))
      {
        return 1;
      }
    }
  }
  uint64_t result = 0;
  *a2 = 3;
  return result;
}

void *sub_18CA28590(uint64_t a1, const char *a2, int *a3)
{
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v38);
  int v6 = 0;
  uint64_t v7 = &a2[strlen(a2)];
  uint64_t v8 = (char *)a2;
LABEL_2:
  uint64_t v9 = strchr(v8, 44);
  int v10 = 1 - v8;
  do
  {
    uint64_t v11 = v8;
    int v12 = v10;
    int v13 = *v8++;
    --v10;
  }
  while (v13 == 32);
  if (v9) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = (char *)v7;
  }
  unsigned int v15 = v14 + v12;
  unsigned int v16 = (unsigned __int8 *)(v14 - 1);
  while (v16 > (unsigned __int8 *)v11)
  {
    int v17 = *v16--;
    --v15;
    if (v17 != 32)
    {
      int32_t v18 = uprv_strndup(v11, v15);
      sub_18CA28814((int)v18, v18, (icu::UVector **)v38, a3);
      uprv_free(v18);
      if (*a3 < 1) {
        uint64_t v8 = v14 + 1;
      }
      else {
        uint64_t v8 = (char *)v11;
      }
      if (*a3 <= 0)
      {
        ++v6;
        if (v8 < v7) {
          goto LABEL_2;
        }
      }
      goto LABEL_17;
    }
  }
  if (v6)
  {
LABEL_17:
    uint64_t v37 = 0;
    memset(v36, 0, sizeof(v36));
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v36);
    icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v36, 4106, 0, (UErrorCode *)a3);
    icu::UnicodeSet::addAll((icu::UVector **)v38, (const icu::UnicodeSet *)v36);
    icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v36, 4106, 1u, (UErrorCode *)a3);
    icu::UnicodeSet::addAll((icu::UVector **)v38, (const icu::UnicodeSet *)v36);
    uint64_t v20 = *a3;
    if ((int)v20 <= 0)
    {
      uint64_t v21 = icu::UnicodeSet::clone((icu::UnicodeSet *)v38, v19, (uint64_t *)v20);
      long long v22 = uprv_strdup(a2);
      if (v21 && (uint64_t v23 = v22) != 0)
      {
        uprv_free(*(void **)(a1 + 32));
        *(void *)(a1 + 32) = v23;
        icu::UnicodeSet::freeze(v21);
        uint64_t v25 = *(icu::UnicodeSet **)(a1 + 24);
        if (v25)
        {
          int32_t v26 = icu::UnicodeSet::~UnicodeSet(v24, v25);
          icu::UMemory::operator delete(v26);
        }
        *(void *)(a1 + 24) = v21;
        uint64_t v20 = *(_DWORD *)(a1 + 12) | 0x40u;
        *(_DWORD *)(a1 + 12) = v20;
      }
      else
      {
        uint64_t v20 = 7;
        *a3 = 7;
      }
    }
    icu::UnicodeSet::~UnicodeSet((void *)v20, (icu::UnicodeSet *)v36);
    return icu::UnicodeSet::~UnicodeSet((void *)v34, (icu::UnicodeSet *)v38);
  }
  uprv_free(*(void **)(a1 + 32));
  *(void *)(a1 + 32) = uprv_strdup("");
  long long v29 = (icu::UnicodeSet *)icu::UMemory::operator new(v28, (icu::UMemory *)0xC8, v27);
  if (v29 && (uint64_t v30 = v29, icu::UnicodeSet::UnicodeSet(v29, 0, 1114111), *(void *)(a1 + 32)))
  {
    icu::UnicodeSet::freeze(v30);
    long long v32 = *(icu::UnicodeSet **)(a1 + 24);
    if (v32)
    {
      long long v33 = icu::UnicodeSet::~UnicodeSet(v31, v32);
      icu::UMemory::operator delete(v33);
    }
    *(void *)(a1 + 24) = v30;
    uint64_t v34 = *(_DWORD *)(a1 + 12) & 0xFFFFFFBF;
    *(_DWORD *)(a1 + 12) = v34;
  }
  else
  {
    uint64_t v34 = 7;
    *a3 = 7;
  }
  return icu::UnicodeSet::~UnicodeSet((void *)v34, (icu::UnicodeSet *)v38);
}

void *sub_18CA28814(int a1, char *__s1, icu::UVector **a3, int *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t result = (void *)uscript_getCode(__s1, (int32_t *)v13, 30, a4);
  if (*a4 <= 0)
  {
    if (*a4 == -127)
    {
      *a4 = 1;
    }
    else
    {
      LODWORD(v7) = result;
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v11);
      if ((int)v7 >= 1)
      {
        uint64_t v7 = v7;
        uint64_t v9 = (unsigned int *)v13;
        do
        {
          unsigned int v10 = *v9++;
          icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v11, 4106, v10, (UErrorCode *)a4);
          icu::UnicodeSet::addAll(a3, (const icu::UnicodeSet *)v11);
          --v7;
        }
        while (v7);
      }
      return icu::UnicodeSet::~UnicodeSet(v8, (icu::UnicodeSet *)v11);
    }
  }
  return result;
}

uint64_t sub_18CA28930(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_18CA28938(unsigned int a1, icu::ScriptSet *this, UErrorCode *a3)
{
  icu::ScriptSet::resetAll((uint64_t)this);
  icu::ScriptSet::setScriptExtensions(this, a1, a3);
  if (*(int *)a3 <= 0)
  {
    if (icu::ScriptSet::test((uint64_t)this, 0x11u, (int *)a3))
    {
      icu::ScriptSet::set((uint64_t)this, 0xACu, (int *)a3);
      icu::ScriptSet::set((uint64_t)this, 0x69u, (int *)a3);
      icu::ScriptSet::set((uint64_t)this, 0x77u, (int *)a3);
    }
    if (icu::ScriptSet::test((uint64_t)this, 0x14u, (int *)a3)) {
      icu::ScriptSet::set((uint64_t)this, 0x69u, (int *)a3);
    }
    if (icu::ScriptSet::test((uint64_t)this, 0x16u, (int *)a3)) {
      icu::ScriptSet::set((uint64_t)this, 0x69u, (int *)a3);
    }
    if (icu::ScriptSet::test((uint64_t)this, 0x12u, (int *)a3)) {
      icu::ScriptSet::set((uint64_t)this, 0x77u, (int *)a3);
    }
    if (icu::ScriptSet::test((uint64_t)this, 5u, (int *)a3)) {
      icu::ScriptSet::set((uint64_t)this, 0xACu, (int *)a3);
    }
    if (icu::ScriptSet::test((uint64_t)this, 0, (int *)a3)
      || icu::ScriptSet::test((uint64_t)this, 1u, (int *)a3))
    {
      icu::ScriptSet::setAll((uint64_t)this);
    }
  }
}

void sub_18CA28AAC(int a1, uint64_t a2, icu::ScriptSet *this, UErrorCode *a4)
{
}

void sub_18CA28ABC(int a1, uint64_t a2, unsigned int a3, icu::ScriptSet *this, UErrorCode *a5)
{
  icu::ScriptSet::setAll((uint64_t)this);
  memset(v16, 0, sizeof(v16));
  int v17 = 0;
  icu::ScriptSet::ScriptSet((uint64_t)v16);
  LODWORD(v10) = *(unsigned __int16 *)(a2 + 8);
  int v9 = (__int16)v10;
  LODWORD(v10) = v10 >> 5;
  if (v9 >= 0) {
    unint64_t v10 = v10;
  }
  else {
    unint64_t v10 = *(unsigned int *)(a2 + 12);
  }
  if ((int)v10 >= 1)
  {
    int v11 = 0;
    do
    {
      unsigned int v12 = icu::UnicodeString::char32At((uint64_t *)v10, (icu::UnicodeString *)a2, v11);
      sub_18CA28938(v12, (icu::ScriptSet *)v16, a5);
      if (*(int *)a5 > 0) {
        break;
      }
      if (a3 == 200 || !icu::ScriptSet::test((uint64_t)v16, a3, (int *)a5)) {
        icu::ScriptSet::intersect((uint64_t)this, (const icu::ScriptSet *)v16);
      }
      int v13 = v12 < 0x10000 ? 1 : 2;
      v11 += v13;
      unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
      int v15 = (__int16)v14;
      LODWORD(v10) = v14 >> 5;
      unint64_t v10 = v15 >= 0 ? v10 : *(unsigned int *)(a2 + 12);
    }
    while (v11 < (int)v10);
  }
  icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v16);
}

icu::UnicodeSet *sub_18CA28BD0(int a1, uint64_t a2, icu::UnicodeSet *this)
{
  uint64_t result = icu::UnicodeSet::clear(this);
  LODWORD(v7) = *(unsigned __int16 *)(a2 + 8);
  int v6 = (__int16)v7;
  LODWORD(v7) = v7 >> 5;
  if (v6 >= 0) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = *(unsigned int *)(a2 + 12);
  }
  if ((int)v7 >= 1)
  {
    int v8 = 0;
    do
    {
      unsigned int v9 = icu::UnicodeString::char32At((uint64_t *)v7, (icu::UnicodeString *)a2, v8);
      uint64_t result = (icu::UnicodeSet *)u_charType(v9);
      if (result == 9)
      {
        double NumericValue = u_getNumericValue(v9);
        uint64_t result = icu::UnicodeSet::add(this, v9 - (int)NumericValue);
      }
      if (v9 < 0x10000) {
        int v11 = 1;
      }
      else {
        int v11 = 2;
      }
      v8 += v11;
      unsigned int v12 = *(unsigned __int16 *)(a2 + 8);
      int v13 = (__int16)v12;
      LODWORD(v7) = v12 >> 5;
      if (v13 >= 0) {
        unint64_t v7 = v7;
      }
      else {
        unint64_t v7 = *(unsigned int *)(a2 + 12);
      }
    }
    while (v8 < (int)v7);
  }
  return result;
}

uint64_t sub_18CA28C94(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  if (!icu::UnicodeSet::containsAll(*(icu::UnicodeSet **)(a1 + 24), (const icu::UnicodeString *)a2)) {
    return 1610612736;
  }
  unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
  if ((v5 & 0x8000u) == 0) {
    uint64_t v6 = v5 >> 5;
  }
  else {
    uint64_t v6 = *(unsigned int *)(a2 + 12);
  }
  if ((int)v6 < 1) {
    return 0x10000000;
  }
  if ((v5 & 2) != 0) {
    unint64_t v7 = (unsigned __int16 *)(a2 + 10);
  }
  else {
    unint64_t v7 = *(unsigned __int16 **)(a2 + 24);
  }
  while (*v7 < 0x80u)
  {
    ++v7;
    if (!--v6) {
      return 0x10000000;
    }
  }
  memset(v14, 0, sizeof(v14));
  int v15 = 0;
  int v9 = icu::ScriptSet::ScriptSet((uint64_t)v14);
  sub_18CA28ABC(v9, a2, 0xC8u, (icu::ScriptSet *)v14, a3);
  if (*(int *)a3 <= 0)
  {
    if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v14))
    {
      memset(v12, 0, sizeof(v12));
      int v13 = 0;
      int v10 = icu::ScriptSet::ScriptSet((uint64_t)v12);
      sub_18CA28ABC(v10, a2, 0x19u, (icu::ScriptSet *)v12, a3);
      if (*(int *)a3 <= 0)
      {
        if (icu::ScriptSet::test((uint64_t)v12, 0xACu, (int *)a3)
          || icu::ScriptSet::test((uint64_t)v12, 0x69u, (int *)a3)
          || icu::ScriptSet::test((uint64_t)v12, 0x77u, (int *)a3))
        {
          uint64_t v8 = 805306368;
        }
        else if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v12) {
               || icu::ScriptSet::test((uint64_t)v12, 8u, (int *)a3)
        }
               || icu::ScriptSet::test((uint64_t)v12, 0xEu, (int *)a3)
               || icu::ScriptSet::test((uint64_t)v12, 6u, (int *)a3))
        {
          uint64_t v8 = 1342177280;
        }
        else
        {
          uint64_t v8 = 0x40000000;
        }
      }
      else
      {
        uint64_t v8 = 1610612736;
      }
      icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v12);
    }
    else
    {
      uint64_t v8 = 0x20000000;
    }
  }
  else
  {
    uint64_t v8 = 1610612736;
  }
  icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v14);
  return v8;
}

uint64_t sub_18CA28E60(uint64_t a1, icu::UnicodeString *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 4);
  int v3 = (__int16)v2;
  LODWORD(v4) = v2 >> 5;
  if (v3 >= 0) {
    unint64_t v4 = v4;
  }
  else {
    unint64_t v4 = *((unsigned int *)this + 3);
  }
  if ((int)v4 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = 0;
  char v8 = 0;
  while (1)
  {
    UChar32 v9 = icu::UnicodeString::char32At((uint64_t *)v4, this, v7);
    unsigned int v10 = v9;
    if ((v8 & 1) != 0 && v9 == 775) {
      break;
    }
    int CombiningClass = u_getCombiningClass(v9);
    if (CombiningClass == 230 || !CombiningClass) {
      char v8 = sub_18CA28F34(a1, v10);
    }
    if (v10 < 0x10000) {
      int v12 = 1;
    }
    else {
      int v12 = 2;
    }
    uint64_t v7 = (v12 + v7);
    unsigned int v13 = *((unsigned __int16 *)this + 4);
    int v14 = (__int16)v13;
    LODWORD(v4) = v13 >> 5;
    if (v14 >= 0) {
      unint64_t v4 = v4;
    }
    else {
      unint64_t v4 = *((unsigned int *)this + 3);
    }
    if ((int)v7 >= (int)v4) {
      return 0xFFFFFFFFLL;
    }
  }
  return v7;
}

uint64_t sub_18CA28F34(uint64_t a1, UChar32 c)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 1;
  BOOL v3 = (c - 105) > 3 || c == 107;
  if (v3 && c != 305 && c != 567 && !u_hasBinaryProperty(c, UCHAR_SOFT_DOTTED))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v17 = 0;
    long long v16 = 0u;
    unsigned int v13 = &unk_1EDA47700;
    LOWORD(v14) = 2;
    sub_18CA29088(*(void **)(a1 + 16), c, (icu::UnicodeString *)&v13);
    if ((v14 & 0x8000u) == 0) {
      int v6 = (unsigned __int16)v14 >> 5;
    }
    else {
      int v6 = DWORD1(v14);
    }
    int v7 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v13, v6, -1);
    UChar32 v9 = icu::UnicodeString::char32At(v8, (icu::UnicodeString *)&v13, v7);
    if (v9 == c
      || ((unint64_t v10 = (v9 - 105), v10 <= 3) ? (v11 = v10 == 2) : (v11 = 1),
          v11 && v9 != 305 && v9 != 567 && !u_hasBinaryProperty(v9, UCHAR_SOFT_DOTTED)))
    {
      uint64_t v2 = 0;
    }
    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v13);
  }
  return v2;
}

uint64_t sub_18CA29088(void *a1, signed int a2, icu::UnicodeString *this)
{
  int v3 = 0;
  int v4 = *(_DWORD *)(*a1 + 16);
  uint64_t v5 = a1[4];
  do
  {
    int v6 = (v4 + v3) / 2;
    int v7 = *(_DWORD *)(v5 + 4 * v6);
    if ((v7 & 0xFFFFFF) <= a2)
    {
      if ((v7 & 0xFFFFFF) >= a2) {
        goto LABEL_8;
      }
      int v3 = (v4 + v3) / 2;
    }
    else
    {
      int v4 = (v4 + v3) / 2;
    }
  }
  while (v4 - v3 > 1);
  int v7 = *(_DWORD *)(v5 + 4 * v3);
  int v6 = v3;
LABEL_8:
  if ((v7 & 0xFFFFFF) == a2)
  {
    return sub_18CA2982C(a1, v6, (uint64_t)this);
  }
  else
  {
    icu::UnicodeString::append((uint64_t)this, a2);
    return 1;
  }
}

uint64_t sub_18CA29124(uint64_t result, int a2, int a3, int *a4)
{
  if (*a4 > 0 || a2 >= a3) {
    return 0;
  }
  uint64_t v5 = result;
  LODWORD(result) = 0;
  int v6 = (unsigned __int16 *)(v5 + 2 * a2);
  uint64_t v7 = a3 - (uint64_t)a2;
  do
  {
    unsigned int v9 = *v6++;
    unsigned int v8 = v9;
    if (v9 <= 0x39) {
      int v10 = -48;
    }
    else {
      int v10 = -55;
    }
    int v11 = v10 + v8;
    int v12 = v8 - 87;
    if (v11 <= 15) {
      int v12 = v11;
    }
    uint64_t result = (v12 + 16 * result);
    --v7;
  }
  while (v7);
  if (result >= 0x110000)
  {
    uint64_t result = 0;
    *a4 = 9;
  }
  return result;
}

icu::UnicodeSet *sub_18CA29198(_DWORD *a1)
{
  a1[3] = 0;
  uint64_t result = icu::UnicodeSet::clear((icu::UnicodeSet *)(a1 + 4));
  a1[54] = -1;
  return result;
}

uint64_t sub_18CA291CC(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 657779934;
  *(void *)a1 = &unk_1EDA54598;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 16));
  *(_DWORD *)(a1 + 12) = 0;
  icu::UnicodeSet::clear(v2);
  *(_DWORD *)(a1 + 216) = -1;
  return a1;
}

uint64_t sub_18CA2922C(uint64_t result, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 657779934) {
      return result;
    }
    int v2 = 3;
  }
  else
  {
    int v2 = 1;
  }
  uint64_t result = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_18CA29270(uint64_t a1, int a2)
{
  if ((a2 & 0x40000000) == 0) {
    return *(unsigned int *)(a1 + 12);
  }
  unsigned int v2 = *(_DWORD *)(a1 + 216);
  if (v2 == -1) {
    return *(unsigned int *)(a1 + 12);
  }
  else {
    return *(_DWORD *)(a1 + 12) | v2;
  }
}

void sub_18CA29294(_DWORD *a1)
{
  *(void *)a1 = &unk_1EDA54598;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 4));
  a1[2] = 0;

  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18CA292EC(_DWORD *a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA54598;
  icu::UnicodeSet::~UnicodeSet(a2, (icu::UnicodeSet *)(a1 + 4));
  a1[2] = 0;
  icu::UObject::~UObject((icu::UObject *)a1);

  icu::UMemory::operator delete(v3);
}

void sub_18CA29348(UErrorCode *a1)
{
  unsigned int v2 = udata_openChoice(0, "cfu", "confusables", (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_18CA29BA4, 0, a1);
  int v4 = (uint64_t *)*(unsigned int *)a1;
  if ((int)v4 <= 0)
  {
    uint64_t v5 = (uint64_t)v2;
    int v6 = icu::UMemory::operator new(v4, (icu::UMemory *)0x38, v3);
    if (!v6)
    {
      qword_1E9192BA0 = 0;
      if (*(int *)a1 < 1)
      {
        *a1 = U_MEMORY_ALLOCATION_ERROR;
        return;
      }
      goto LABEL_6;
    }
    uint64_t v7 = sub_18CA2943C((uint64_t)v6, v5, (int *)a1);
    qword_1E9192BA0 = v7;
    if (*(int *)a1 >= 1)
    {
      unsigned int v8 = (void *)sub_18CA296B8(v7);
      icu::UMemory::operator delete(v8);
LABEL_6:
      qword_1E9192BA0 = 0;
      return;
    }
    sub_18CA0A25C(4u, (uint64_t)sub_18CA29C18);
  }
}

uint64_t sub_18CA2943C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 28));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v4 = (void *)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  if (*a3 <= 0)
  {
    *(void *)(a1 + 16) = a2;
    *(void *)a1 = udata_getMemory(a2);
    sub_18CA28528((uint64_t *)a1, a3);
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = 0;
    if (*a3 <= 0)
    {
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = *(int *)(*(void *)a1 + 12);
      if (v7) {
        void *v4 = v6 + v7;
      }
      uint64_t v8 = *(int *)(v6 + 20);
      if (v8) {
        *(void *)(a1 + 40) = v6 + v8;
      }
      uint64_t v9 = *(int *)(v6 + 28);
      if (v9) {
        *(void *)(a1 + 48) = v6 + v9;
      }
    }
  }
  return a1;
}

uint64_t sub_18CA29504(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 28));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = (void *)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  if (*a4 <= 0)
  {
    if (a3 <= 0x5F) {
      goto LABEL_5;
    }
    if (!a2)
    {
      int v7 = 1;
      goto LABEL_7;
    }
    *(void *)a1 = a2;
    if (*(_DWORD *)(a2 + 8) > (signed int)a3)
    {
LABEL_5:
      int v7 = 3;
LABEL_7:
      *a4 = v7;
      return a1;
    }
    sub_18CA28528((uint64_t *)a1, a4);
    v5[1] = 0;
    void v5[2] = 0;
    void *v5 = 0;
    if (*a4 <= 0)
    {
      uint64_t v9 = *(void *)a1;
      uint64_t v10 = *(int *)(*(void *)a1 + 12);
      if (v10) {
        void *v5 = v9 + v10;
      }
      uint64_t v11 = *(int *)(v9 + 20);
      if (v11) {
        *(void *)(a1 + 40) = v9 + v11;
      }
      uint64_t v12 = *(int *)(v9 + 28);
      if (v12) {
        *(void *)(a1 + 48) = v9 + v12;
      }
    }
  }
  return a1;
}

uint64_t sub_18CA295F0(uint64_t a1, int *a2)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 28));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  unint64_t v3 = (void *)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  if (*a2 <= 0)
  {
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t v5 = (char *)uprv_malloc(0x60uLL);
    *(void *)a1 = v5;
    *(_DWORD *)(a1 + 24) = 96;
    if (v5)
    {
      *((void *)v5 + 11) = 0;
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_DWORD *)uint64_t v5 = 944111087;
      *((_DWORD *)v5 + 1) = 2;
      v3[1] = 0;
      v3[2] = 0;
      void *v3 = 0;
    }
    else
    {
      *a2 = 7;
    }
  }
  return a1;
}

uint64_t sub_18CA296B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    uprv_free(*(void **)a1);
  }
  *(void *)a1 = 0;
  unsigned int v2 = *(_OWORD **)(a1 + 16);
  if (v2) {
    udata_close(v2);
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

char *sub_18CA29704(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 8)) {
    abort();
  }
  signed int v6 = (a2 + 15) & 0xFFFFFFF0;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  size_t v8 = (v7 + v6);
  *(_DWORD *)(a1 + 24) = v8;
  uint64_t v9 = uprv_realloc(*(void **)a1, v8);
  *(void *)a1 = v9;
  void v9[2] = *(_DWORD *)(a1 + 24);
  bzero((char *)v9 + v7, v6);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v10 = *(int **)a1;
  if (*a3 <= 0)
  {
    uint64_t v11 = v10[3];
    if (v11) {
      *(void *)(a1 + 32) = (char *)v10 + v11;
    }
    uint64_t v12 = v10[5];
    if (v12) {
      *(void *)(a1 + 40) = (char *)v10 + v12;
    }
    uint64_t v13 = v10[7];
    if (v13) {
      *(void *)(a1 + 48) = (char *)v10 + v13;
    }
  }
  return (char *)v10 + v7;
}

size_t sub_18CA297D4(const void **a1, void *__dst, int a3, _DWORD *a4)
{
  size_t v4 = *((int *)*a1 + 2);
  if ((int)v4 <= a3) {
    memcpy(__dst, *a1, v4);
  }
  else {
    *a4 = 15;
  }
  return v4;
}

uint64_t sub_18CA29820(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 8);
}

uint64_t sub_18CA2982C(void *a1, int a2, uint64_t a3)
{
  int v3 = HIBYTE(*(_DWORD *)(a1[4] + 4 * a2));
  uint64_t v4 = (v3 + 1);
  if (v3)
  {
    icu::UnicodeString::doAppend(a3, a1[6] + 2 * *(unsigned __int16 *)(a1[5] + 2 * a2), 0, (v3 + 1));
  }
  else
  {
    __int16 v6 = *(_WORD *)(a1[5] + 2 * a2);
    icu::UnicodeString::doAppend(a3, (uint64_t)&v6, 0, 1);
  }
  return v4;
}

uint64_t uspoof_swap(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a5) {
    return 0;
  }
  if (*a5 > 0) {
    return 0;
  }
  if (!a1 || !a2 || (int v12 = a3, (int)a3 < -1) || (int)a3 >= 1 && !a4)
  {
    uint64_t result = 0;
    int v13 = 1;
LABEL_20:
    *a5 = v13;
    return result;
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 12);
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), v14) != 0x6600000043
    || *(unsigned char *)(a2 + 14) != 117
    || *(unsigned char *)(a2 + 15) != 32
    || *(unsigned char *)(a2 + 16) != 2
    || *(unsigned char *)(a2 + 17)
    || *(unsigned char *)(a2 + 18)
    || *(unsigned char *)(a2 + 19))
  {
    long long v15 = "uspoof_swap(): data format %02x.%02x.%02x.%02x (format version %02x %02x %02x %02x) is not recognized\n";
    uint64_t v33 = v14;
LABEL_19:
    udata_printError(a1, (uint64_t)v15, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v33);
    uint64_t result = 0;
    int v13 = 16;
    goto LABEL_20;
  }
  int v16 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v17 = (char *)(a2 + v16);
  if ((*(unsigned int (**)(void))(a1 + 16))(*(unsigned int *)v17) != 944111087
    || (*(unsigned int (**)(void))(a1 + 16))(*((unsigned int *)v17 + 2)) <= 0x5F)
  {
    long long v15 = "uspoof_swap(): Spoof Data header is invalid.\n";
    goto LABEL_19;
  }
  uint64_t v18 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 2));
  unsigned int v34 = v18 + v16;
  if ((v12 & 0x80000000) == 0)
  {
    if ((int)v34 > v12)
    {
      udata_printError(a1, (uint64_t)"uspoof_swap(): too few bytes (%d after ICU Data header) for spoof data.\n", v19, v20, v21, v22, v23, v24, v18);
      uint64_t result = 0;
      int v13 = 8;
      goto LABEL_20;
    }
    uint64_t v25 = (char *)a4 + v16;
    if ((unsigned __int16 *)a2 != a4) {
      bzero((char *)a4 + v16, (int)v18);
    }
    int v26 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 3));
    int v27 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 4));
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 56))(a1, &v17[v26], (4 * v27), &v25[v26], a5);
    int v28 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 5));
    int v29 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 6));
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))(a1, &v17[v28], (2 * v29), &v25[v28], a5);
    int v30 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 7));
    int v31 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 8));
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))(a1, &v17[v30], (2 * v31), &v25[v30], a5);
    uint64_t v32 = (*(uint64_t (**)(void))(a1 + 16))(*(unsigned int *)v17);
    (*(void (**)(char *, uint64_t))(a1 + 40))(v25, v32);
    if ((unsigned __int16 *)a2 != a4) {
      *((_DWORD *)v25 + 1) = *((_DWORD *)v17 + 1);
    }
    (*(void (**)(uint64_t, unsigned int *, uint64_t, char *, int *))(a1 + 56))(a1, (unsigned int *)v17 + 2, 88, v25 + 8, a5);
  }
  return v34;
}

uint64_t sub_18CA29BA4(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  if (*a4 < 0x14u
    || *((unsigned char *)a4 + 4)
    || *((unsigned char *)a4 + 5)
    || *((unsigned char *)a4 + 8) != 67
    || *((unsigned char *)a4 + 9) != 102
    || *((unsigned char *)a4 + 10) != 117
    || *((unsigned char *)a4 + 11) != 32
    || *((unsigned char *)a4 + 12) != 2)
  {
    return 0;
  }
  if (a1) {
    *a1 = *((_DWORD *)a4 + 4);
  }
  return 1;
}

uint64_t sub_18CA29C18()
{
  if (qword_1E9192BA0)
  {
    sub_18CA2843C(qword_1E9192BA0);
    qword_1E9192BA0 = 0;
    atomic_store(0, &dword_1E9192BA8);
  }
  return 1;
}

void *icu::UTF16CollationIterator::UTF16CollationIterator(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = (void *)icu::CollationIterator::CollationIterator(a1, (uint64_t)a2);
  *uint64_t result = &unk_1EDA54650;
  result[49] = a3;
  result[50] = a3 + a2[50] - a2[49];
  uint64_t v6 = a2[51];
  if (v6) {
    uint64_t v7 = a3 + v6 - a2[49];
  }
  else {
    uint64_t v7 = 0;
  }
  result[51] = v7;
  return result;
}

void icu::UTF16CollationIterator::~UTF16CollationIterator(icu::UTF16CollationIterator *this@<X0>, void *a2@<X8>)
{
  icu::CollationIterator::~CollationIterator(this, a2);

  icu::UMemory::operator delete(v2);
}

uint64_t icu::UTF16CollationIterator::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = icu::CollationIterator::operator==(a1, a2);
  if (result) {
    return *(void *)(a1 + 400) - *(void *)(a1 + 392) == *(void *)(a2 + 400) - *(void *)(a2 + 392);
  }
  return result;
}

uint64_t icu::UTF16CollationIterator::resetToOffset(icu::UTF16CollationIterator *this, int a2)
{
  uint64_t result = icu::CollationIterator::reset((uint64_t)this);
  *((void *)this + 50) = *((void *)this + 49) + 2 * a2;
  return result;
}

uint64_t icu::UTF16CollationIterator::getOffset(icu::UTF16CollationIterator *this)
{
  return (*((void *)this + 50) - *((void *)this + 49)) >> 1;
}

uint64_t icu::UTF16CollationIterator::handleNextCE32(icu::UTF16CollationIterator *this, int *a2, UErrorCode *a3)
{
  int v3 = (unsigned __int16 *)*((void *)this + 50);
  if (v3 == *((unsigned __int16 **)this + 51))
  {
    *a2 = -1;
    return 192;
  }
  else
  {
    unsigned int v4 = *v3;
    *((void *)this + 50) = v3 + 1;
    *a2 = (unsigned __int16)v4;
    return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
                           + 4
                           * ((v4 & 0x1F)
                            + 4 * *(unsigned __int16 *)(**((void **)this + 1) + (((unint64_t)v4 >> 4) & 0xFFE))));
  }
}

uint64_t icu::UTF16CollationIterator::handleGetTrailSurrogate(icu::UTF16CollationIterator *this)
{
  uint64_t v1 = (unsigned __int16 *)*((void *)this + 50);
  if (v1 == *((unsigned __int16 **)this + 51)) {
    return 0;
  }
  uint64_t result = *v1;
  if ((result & 0xFC00) == 0xDC00) {
    *((void *)this + 50) = v1 + 1;
  }
  return result;
}

uint64_t icu::UTF16CollationIterator::foundNULTerminator(icu::UTF16CollationIterator *this)
{
  if (*((void *)this + 51)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 50) - 2;
  *((void *)this + 50) = v2;
  *((void *)this + 51) = v2;
  return 1;
}

uint64_t icu::UTF16CollationIterator::nextCodePoint(icu::UTF16CollationIterator *this, UErrorCode *a2)
{
  uint64_t v2 = (unsigned __int16 *)*((void *)this + 50);
  int v3 = (unsigned __int16 *)*((void *)this + 51);
  if (v2 == v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *v2;
  if (v3) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = result == 0;
  }
  if (v6)
  {
    *((void *)this + 51) = v2;
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = v2 + 1;
  *((void *)this + 50) = v2 + 1;
  if ((result & 0xFC00) == 0xD800 && v7 != v3)
  {
    int v9 = *v7;
    if ((v9 & 0xFC00) == 0xDC00)
    {
      *((void *)this + 50) = v2 + 2;
      return (v9 + (result << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::UTF16CollationIterator::previousCodePoint(icu::UTF16CollationIterator *this, UErrorCode *a2)
{
  uint64_t v3 = *((void *)this + 49);
  uint64_t v2 = *((void *)this + 50);
  if (v2 == v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *(unsigned __int16 *)(v2 - 2);
  *((void *)this + 50) = v2 - 2;
  if (v2 - 2 != v3 && (result & 0xFC00) == 56320)
  {
    int v9 = *(unsigned __int16 *)(v2 - 4);
    uint64_t v7 = v2 - 4;
    int v8 = v9;
    if ((v9 & 0xFC00) == 0xD800)
    {
      *((void *)this + 50) = v7;
      return (result + (v8 << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::UTF16CollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    unsigned int v4 = *(__int16 **)(this + 400);
    uint64_t v3 = *(__int16 **)(this + 408);
    unsigned int v5 = a2 + 1;
    while (v4 != v3)
    {
      __int16 v6 = *v4;
      if (!v3 && !*v4)
      {
        *(void *)(this + 408) = v4;
        return this;
      }
      uint64_t v7 = v4 + 1;
      *(void *)(this + 400) = v4 + 1;
      BOOL v8 = (v6 & 0xFC00) != 0xD800 || v7 == v3;
      if (!v8 && (*v7 & 0xFC00) == 0xDC00)
      {
        uint64_t v7 = v4 + 2;
        *(void *)(this + 400) = v4 + 2;
      }
      --v5;
      unsigned int v4 = v7;
      if (v5 <= 1) {
        return this;
      }
    }
  }
  return this;
}

uint64_t icu::UTF16CollationIterator::backwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = *(void *)(this + 392);
    uint64_t v4 = *(void *)(this + 400);
    unsigned int v5 = a2 + 1;
    do
    {
      if (v4 == v3) {
        break;
      }
      uint64_t v6 = v4 - 2;
      __int16 v7 = *(_WORD *)(v4 - 2);
      *(void *)(this + 400) = v4 - 2;
      if (v4 - 2 != v3 && (v7 & 0xFC00) == 0xDC00)
      {
        __int16 v9 = *(_WORD *)(v4 - 4);
        uint64_t v8 = v4 - 4;
        if ((v9 & 0xFC00) == 0xD800)
        {
          *(void *)(this + 400) = v8;
          uint64_t v6 = v8;
        }
      }
      --v5;
      uint64_t v4 = v6;
    }
    while (v5 > 1);
  }
  return this;
}

uint64_t icu::FCDUTF16CollationIterator::FCDUTF16CollationIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)icu::CollationIterator::CollationIterator(a1, a2);
  v6[49] = 0;
  v6[50] = 0;
  v6[51] = 0;
  v6[52] = a3;
  void *v6 = &unk_1EDA546E0;
  v6[53] = a3 + *(void *)(a2 + 424) - *(void *)(a2 + 416);
  uint64_t v7 = *(void *)(a2 + 432);
  uint64_t v8 = *(void *)(a2 + 440);
  uint64_t v9 = a3 + v7 - *(void *)(a2 + 416);
  if (!v7) {
    uint64_t v9 = 0;
  }
  v6[54] = v9;
  uint64_t v10 = a3 + v8 - *(void *)(a2 + 416);
  if (!v8) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(a2 + 448);
  v6[55] = v10;
  v6[56] = v11;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v6 + 57), (UChar **)(a2 + 456));
  int v12 = *(unsigned __int8 *)(a2 + 520);
  *(unsigned char *)(a1 + 520) = v12;
  uint64_t v13 = *(void *)(a2 + 392);
  if (v12 || v13 == *(void *)(a2 + 424))
  {
    uint64_t v17 = *(void *)(a2 + 408);
    uint64_t v16 = *(void *)(a2 + 416);
    uint64_t v18 = a3 + v13 - v16;
    uint64_t v19 = a3 + *(void *)(a2 + 400) - v16;
    *(void *)(a1 + 392) = v18;
    *(void *)(a1 + 400) = v19;
    uint64_t v20 = a3 + v17 - *(void *)(a2 + 416);
    if (!v17) {
      uint64_t v20 = 0;
    }
  }
  else
  {
    unsigned int v14 = *(unsigned __int16 *)(a1 + 464);
    if ((v14 & 0x11) != 0)
    {
      uint64_t v15 = 0;
    }
    else if ((v14 & 2) != 0)
    {
      uint64_t v15 = a1 + 466;
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 480);
    }
    *(void *)(a1 + 392) = v15;
    *(void *)(a1 + 400) = v15 + *(void *)(a2 + 400) - *(void *)(a2 + 392);
    if ((v14 & 0x8000) != 0) {
      unsigned int v21 = *(_DWORD *)(a1 + 468);
    }
    else {
      unsigned int v21 = v14 >> 5;
    }
    uint64_t v20 = v15 + 2 * (int)v21;
  }
  *(void *)(a1 + 408) = v20;
  return a1;
}

void icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator(icu::FCDUTF16CollationIterator *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1EDA546E0;
  icu::UnicodeString::~UnicodeString(a2, (icu::FCDUTF16CollationIterator *)((char *)this + 456));

  icu::CollationIterator::~CollationIterator(this, v3);
}

{
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDA546E0;
  icu::UnicodeString::~UnicodeString(a2, (icu::FCDUTF16CollationIterator *)((char *)this + 456));

  icu::CollationIterator::~CollationIterator(this, v3);
}

{
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EDA546E0;
  icu::UnicodeString::~UnicodeString(a2, (icu::FCDUTF16CollationIterator *)((char *)this + 456));
  icu::CollationIterator::~CollationIterator(this, v3);

  icu::UMemory::operator delete(v4);
}

uint64_t icu::FCDUTF16CollationIterator::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = icu::CollationIterator::operator==(a1, a2);
  if (result)
  {
    if (*(unsigned __int8 *)(a1 + 520) == *(unsigned __int8 *)(a2 + 520))
    {
      if (*(unsigned char *)(a1 + 520))
      {
LABEL_4:
        uint64_t v5 = *(void *)(a1 + 400) - *(void *)(a1 + 416);
        uint64_t v6 = *(void *)(a2 + 416);
        return v5 == *(void *)(a2 + 400) - v6;
      }
      uint64_t v7 = *(void *)(a1 + 392);
      uint64_t v8 = *(void *)(a1 + 424);
      uint64_t v6 = *(void *)(a2 + 392);
      uint64_t v9 = *(void *)(a2 + 424);
      if ((v7 != v8) != (v6 == v9))
      {
        if (v7 == v8) {
          goto LABEL_4;
        }
        if (v8 - *(void *)(a1 + 416) == v9 - *(void *)(a2 + 416))
        {
          uint64_t v5 = *(void *)(a1 + 400) - v7;
          return v5 == *(void *)(a2 + 400) - v6;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t icu::FCDUTF16CollationIterator::resetToOffset(icu::FCDUTF16CollationIterator *this, int a2)
{
  uint64_t result = icu::CollationIterator::reset((uint64_t)this);
  uint64_t v5 = *((void *)this + 52) + 2 * a2;
  *((void *)this + 53) = v5;
  *((void *)this + 49) = v5;
  *((void *)this + 50) = v5;
  *((void *)this + 51) = *((void *)this + 55);
  *((unsigned char *)this + 520) = 1;
  return result;
}

uint64_t icu::FCDUTF16CollationIterator::getOffset(icu::FCDUTF16CollationIterator *this)
{
  if (*((unsigned char *)this + 520) || (v3 = *((void *)this + 49), uint64_t v1 = *((void *)this + 53), v3 == v1))
  {
    uint64_t v1 = *((void *)this + 50);
    return (v1 - *((void *)this + 52)) >> 1;
  }
  if (*((void *)this + 50) == v3) {
    return (v1 - *((void *)this + 52)) >> 1;
  }
  return (*((void *)this + 54) - *((void *)this + 52)) >> 1;
}

uint64_t icu::FCDUTF16CollationIterator::handleNextCE32(icu::FCDUTF16CollationIterator *this, int *a2, UErrorCode *a3)
{
  if (*((char *)this + 520) <= 0)
  {
    int v6 = *((unsigned __int8 *)this + 520);
    uint64_t v7 = (unsigned __int16 **)((char *)this + 400);
    do
    {
      if (!v6)
      {
        uint64_t v8 = (unsigned __int16 *)*((void *)this + 50);
        if (v8 != *((unsigned __int16 **)this + 51)) {
          goto LABEL_13;
        }
      }
      icu::FCDUTF16CollationIterator::switchToForward((uint64_t)this);
      int v6 = *((unsigned __int8 *)this + 520);
    }
    while (*((char *)this + 520) <= 0);
  }
  uint64_t v9 = (unsigned __int16 *)*((void *)this + 50);
  uint64_t v10 = (unsigned __int16 *)*((void *)this + 51);
  if (v9 != v10)
  {
    int v12 = v9 + 1;
    unint64_t v11 = *v9;
    uint64_t v7 = (unsigned __int16 **)((char *)this + 400);
    *((void *)this + 50) = v9 + 1;
    *a2 = v11;
    if (v11 < 0xC0) {
      return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
    }
                             + 4
                             * ((v11 & 0x1F)
                              + 4
                              * *(unsigned __int16 *)(**((void **)this + 1)
                                                                  + 2 * (v11 >> 5))));
    if (!icu::CollationFCD::tcccIndex[v11 >> 5]) {
      return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
    }
                             + 4
                             * ((v11 & 0x1F)
                              + 4
                              * *(unsigned __int16 *)(**((void **)this + 1)
                                                                  + 2 * (v11 >> 5))));
    if (((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v11 >> 5]] >> v11) & 1) == 0) {
      return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
    }
                             + 4
                             * ((v11 & 0x1F)
                              + 4
                              * *(unsigned __int16 *)(**((void **)this + 1)
                                                                  + 2 * (v11 >> 5))));
    if ((v11 & 0xFFFFFF01) != 0xF01)
    {
      if (v12 == v10) {
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
      }
                               + 4
                               * ((v11 & 0x1F)
                                + 4
                                * *(unsigned __int16 *)(**((void **)this + 1)
                                                                    + 2 * (v11 >> 5))));
      unint64_t v15 = *v12;
      if (v15 < 0x300
        || !icu::CollationFCD::lcccIndex[v15 >> 5]
        || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[v15 >> 5]] >> v15) & 1) == 0)
      {
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
                               + 4
                               * ((v11 & 0x1F)
                                + 4
                                * *(unsigned __int16 *)(**((void **)this + 1)
                                                                    + 2 * (v11 >> 5))));
      }
    }
    *((void *)this + 50) = v9;
    if (icu::FCDUTF16CollationIterator::nextSegment(this, a3))
    {
      uint64_t v8 = *v7;
LABEL_13:
      int v13 = *v8;
      LODWORD(v11) = v13;
      __int16 *v7 = v8 + 1;
      *a2 = v13;
      return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
                             + 4
                             * ((v11 & 0x1F)
                              + 4
                              * *(unsigned __int16 *)(**((void **)this + 1)
                                                                  + 2 * (v11 >> 5))));
    }
  }
  *a2 = -1;
  return 192;
}

uint64_t icu::FCDUTF16CollationIterator::nextSegment(icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  unsigned __int16 v5 = 0;
  int v6 = (UChar *)*((void *)this + 50);
  *(void *)unsigned int v14 = v6;
  uint64_t v7 = (unsigned __int16 *)*((void *)this + 55);
  while (1)
  {
    unsigned int v8 = sub_18CA24AC8(*((void *)this + 56), (unsigned __int16 **)v14, v7);
    if (v8 <= 0xFF)
    {
      if (v6 != *((UChar **)this + 50)) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    BOOL v9 = v8 >> 8 < v5 || v8 == 33156;
    if (v9 || v8 == 33154) {
      break;
    }
LABEL_14:
    unsigned __int16 v5 = v8;
    int v6 = *(UChar **)v14;
    uint64_t v7 = (unsigned __int16 *)*((void *)this + 55);
    if ((_BYTE)v8) {
      BOOL v11 = *(void *)v14 == (void)v7;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
LABEL_19:
      *((void *)this + 54) = v6;
      *((void *)this + 51) = v6;
LABEL_24:
      *((unsigned char *)this + 520) = 0;
      return 1;
    }
  }
  do
  {
    int v12 = *(UChar **)v14;
    int v13 = (unsigned __int16 *)*((void *)this + 55);
  }
  while (*(unsigned __int16 **)v14 != v13
       && sub_18CA24AC8(*((void *)this + 56), (unsigned __int16 **)v14, v13) > 0xFF);
  uint64_t result = icu::FCDUTF16CollationIterator::normalize((uint64_t)this, *((UChar **)this + 50), v12, a2);
  if (result)
  {
    *((void *)this + 50) = *((void *)this + 49);
    goto LABEL_24;
  }
  return result;
}

uint64_t icu::FCDUTF16CollationIterator::switchToForward(uint64_t this)
{
  if ((*(char *)(this + 520) & 0x80000000) == 0)
  {
    if (*(void *)(this + 392) != *(void *)(this + 424))
    {
      uint64_t v1 = *(void *)(this + 432);
      *(void *)(this + 424) = v1;
      *(void *)(this + 392) = v1;
      *(void *)(this + 400) = v1;
    }
    goto LABEL_6;
  }
  uint64_t v2 = *(void *)(this + 400);
  *(void *)(this + 424) = v2;
  *(void *)(this + 392) = v2;
  if (v2 == *(void *)(this + 432))
  {
LABEL_6:
    *(void *)(this + 408) = *(void *)(this + 440);
    char v3 = 1;
    goto LABEL_7;
  }
  char v3 = 0;
LABEL_7:
  *(unsigned char *)(this + 520) = v3;
  return this;
}

uint64_t icu::FCDUTF16CollationIterator::foundNULTerminator(icu::FCDUTF16CollationIterator *this)
{
  if (*((void *)this + 51)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 50) - 2;
  *((void *)this + 55) = v2;
  *((void *)this + 50) = v2;
  *((void *)this + 51) = v2;
  return 1;
}

unint64_t icu::FCDUTF16CollationIterator::nextCodePoint(icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  if (*((char *)this + 520) <= 0)
  {
    int v4 = *((unsigned __int8 *)this + 520);
    do
    {
      if (!v4)
      {
        unsigned __int16 v5 = (unsigned __int16 *)*((void *)this + 50);
        if (v5 != *((unsigned __int16 **)this + 51)) {
          goto LABEL_13;
        }
      }
      icu::FCDUTF16CollationIterator::switchToForward((uint64_t)this);
      int v4 = *((unsigned __int8 *)this + 520);
    }
    while (*((char *)this + 520) <= 0);
  }
  int v6 = (unsigned __int16 *)*((void *)this + 50);
  uint64_t v7 = (unsigned __int16 *)*((void *)this + 51);
  if (v6 == v7) {
    return 0xFFFFFFFFLL;
  }
  BOOL v9 = v6 + 1;
  unint64_t result = *v6;
  *((void *)this + 50) = v6 + 1;
  if (result < 0xC0)
  {
    if (!result)
    {
      if (v7) {
        return 0;
      }
      *((void *)this + 55) = v6;
      unint64_t result = 0xFFFFFFFFLL;
      *((void *)this + 50) = v6;
      *((void *)this + 51) = v6;
      return result;
    }
    goto LABEL_16;
  }
  if (icu::CollationFCD::tcccIndex[result >> 5]
    && ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[result >> 5]] >> result) & 1) != 0)
  {
    if ((result & 0xFFFFFF01) == 0xF01) {
      goto LABEL_11;
    }
    if (v9 == v7)
    {
      BOOL v9 = v7;
      goto LABEL_16;
    }
    unint64_t v11 = *v9;
    if (v11 >= 0x300
      && icu::CollationFCD::lcccIndex[v11 >> 5]
      && ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[v11 >> 5]] >> v11) & 1) != 0)
    {
LABEL_11:
      *((void *)this + 50) = v6;
      if (icu::FCDUTF16CollationIterator::nextSegment(this, a2))
      {
        unsigned __int16 v5 = (unsigned __int16 *)*((void *)this + 50);
LABEL_13:
        BOOL v9 = v5 + 1;
        *((void *)this + 50) = v5 + 1;
        unint64_t result = *v5;
        goto LABEL_16;
      }
      return 0xFFFFFFFFLL;
    }
  }
LABEL_16:
  if ((result & 0xFC00) == 0xD800 && v9 != *((unsigned __int16 **)this + 51))
  {
    int v10 = *v9;
    if ((v10 & 0xFC00) == 0xDC00)
    {
      *((void *)this + 50) = v9 + 1;
      return (v10 + (result << 10) - 56613888);
    }
  }
  return result;
}

unint64_t icu::FCDUTF16CollationIterator::previousCodePoint(icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  if ((*((char *)this + 520) & 0x80000000) == 0)
  {
    int v4 = *((unsigned __int8 *)this + 520);
    do
    {
      if (!v4)
      {
        uint64_t v5 = *((void *)this + 50);
        if (v5 != *((void *)this + 49)) {
          goto LABEL_13;
        }
      }
      icu::FCDUTF16CollationIterator::switchToBackward((uint64_t)this);
      int v4 = *((unsigned __int8 *)this + 520);
    }
    while ((*((char *)this + 520) & 0x80000000) == 0);
  }
  uint64_t v7 = (unsigned __int16 *)*((void *)this + 49);
  int v6 = (unsigned __int16 *)*((void *)this + 50);
  if (v6 == v7) {
    return 0xFFFFFFFFLL;
  }
  BOOL v9 = v6 - 1;
  unint64_t result = *(v6 - 1);
  *((void *)this + 50) = v6 - 1;
  if (result >= 0x300
    && icu::CollationFCD::lcccIndex[result >> 5]
    && ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[result >> 5]] >> result) & 1) != 0)
  {
    if ((result & 0xFFFFFF01) == 0xF01) {
      goto LABEL_11;
    }
    if (v9 == v7)
    {
      BOOL v9 = v7;
      goto LABEL_14;
    }
    unint64_t v13 = *(v6 - 2);
    if (v13 >= 0xC0
      && icu::CollationFCD::tcccIndex[v13 >> 5]
      && ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v13 >> 5]] >> v13) & 1) != 0)
    {
LABEL_11:
      *((void *)this + 50) = v6;
      if (icu::FCDUTF16CollationIterator::previousSegment(this, a2))
      {
        uint64_t v5 = *((void *)this + 50);
LABEL_13:
        BOOL v9 = (unsigned __int16 *)(v5 - 2);
        *((void *)this + 50) = v9;
        unint64_t result = *v9;
        goto LABEL_14;
      }
      return 0xFFFFFFFFLL;
    }
  }
LABEL_14:
  if ((result & 0xFC00) == 0xDC00 && v9 != *((unsigned __int16 **)this + 49))
  {
    int v12 = *(v9 - 1);
    int v10 = v9 - 1;
    int v11 = v12;
    if ((v12 & 0xFC00) == 0xD800)
    {
      *((void *)this + 50) = v10;
      return (result + (v11 << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::FCDUTF16CollationIterator::previousSegment(icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  LOBYTE(v5) = 0;
  int v6 = (UChar *)*((void *)this + 50);
  *(void *)unint64_t v13 = v6;
  unint64_t v7 = *((void *)this + 52);
  while (1)
  {
    unsigned int v8 = sub_18CA2AC58(*((void *)this + 56), v7, (uint64_t *)v13);
    if (!(_BYTE)v8)
    {
      if (v6 != *((UChar **)this + 50)) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    if ((_BYTE)v5 && v8 > v5) {
      break;
    }
    if (v8 == 33156 || v8 == 33154) {
      break;
    }
LABEL_14:
    unsigned int v5 = v8 >> 8;
    int v6 = *(UChar **)v13;
    unint64_t v7 = *((void *)this + 52);
    if (v8 < 0x100 || *(void *)v13 == v7)
    {
LABEL_19:
      *((void *)this + 53) = v6;
      *((void *)this + 49) = v6;
LABEL_25:
      *((unsigned char *)this + 520) = 0;
      return 1;
    }
  }
  do
  {
    int v11 = *(UChar **)v13;
    if ((unsigned __int16)v8 < 0x100u) {
      break;
    }
    unint64_t v12 = *((void *)this + 52);
    if (*(void *)v13 == v12) {
      break;
    }
    unsigned int v8 = sub_18CA2AC58(*((void *)this + 56), v12, (uint64_t *)v13);
  }
  while (v8);
  uint64_t result = icu::FCDUTF16CollationIterator::normalize((uint64_t)this, v11, *((UChar **)this + 50), a2);
  if (result)
  {
    *((void *)this + 50) = *((void *)this + 51);
    goto LABEL_25;
  }
  return result;
}

uint64_t icu::FCDUTF16CollationIterator::switchToBackward(uint64_t this)
{
  if (*(char *)(this + 520) < 1)
  {
    uint64_t v3 = *(void *)(this + 424);
    if (*(void *)(this + 392) != v3)
    {
      *(void *)(this + 432) = v3;
      *(void *)(this + 400) = v3;
      *(void *)(this + 408) = v3;
    }
    goto LABEL_6;
  }
  uint64_t v1 = *(void *)(this + 400);
  *(void *)(this + 432) = v1;
  *(void *)(this + 408) = v1;
  if (v1 == *(void *)(this + 424))
  {
LABEL_6:
    *(void *)(this + 392) = *(void *)(this + 416);
    char v2 = -1;
    goto LABEL_7;
  }
  char v2 = 0;
LABEL_7:
  *(unsigned char *)(this + 520) = v2;
  return this;
}

unint64_t icu::FCDUTF16CollationIterator::forwardNumCodePoints(unint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUTF16CollationIterator *)this;
    do
    {
      this = icu::FCDUTF16CollationIterator::nextCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

unint64_t icu::FCDUTF16CollationIterator::backwardNumCodePoints(unint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUTF16CollationIterator *)this;
    do
    {
      this = icu::FCDUTF16CollationIterator::previousCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

uint64_t icu::FCDUTF16CollationIterator::normalize(uint64_t a1, UChar *a2, UChar *a3, UErrorCode *a4)
{
  icu::Normalizer2Impl::decompose(*(UChar **)(a1 + 448), a2, a3, (icu::UnicodeString *)(a1 + 456), (unint64_t)((char *)a3 - (char *)a2) >> 1, a4);
  if (*(int *)a4 > 0) {
    return 0;
  }
  *(void *)(a1 + 424) = a2;
  *(void *)(a1 + 432) = a3;
  unsigned int v9 = *(unsigned __int16 *)(a1 + 464);
  if ((v9 & 0x11) != 0)
  {
    uint64_t v10 = 0;
  }
  else if ((v9 & 2) != 0)
  {
    uint64_t v10 = a1 + 466;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 480);
  }
  *(void *)(a1 + 392) = v10;
  if ((v9 & 0x8000) != 0) {
    unsigned int v11 = *(_DWORD *)(a1 + 468);
  }
  else {
    unsigned int v11 = v9 >> 5;
  }
  *(void *)(a1 + 408) = v10 + 2 * (int)v11;
  return 1;
}

uint64_t sub_18CA2AC58(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  BOOL v6 = (unsigned __int16 *)(*a3 - 2);
  unint64_t v5 = *v6;
  *a3 = (uint64_t)v6;
  if (v5 < *(unsigned __int16 *)(a1 + 8)) {
    return 0;
  }
  if ((v5 & 0xFC00) == 0xDC00)
  {
    if ((unint64_t)v6 > a2)
    {
      int v10 = *(unsigned __int16 *)(v4 - 4);
      uint64_t v9 = v4 - 4;
      int v8 = v10;
      if ((v10 & 0xFC00) == 0xD800)
      {
        LODWORD(v5) = v5 + (v8 << 10) - 56613888;
        *a3 = v9;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(*(void *)(a1 + 56) + (v5 >> 8))) {
      BOOL v11 = ((1 << (v5 >> 5)) & *(unsigned __int8 *)(*(void *)(a1 + 56) + (v5 >> 8))) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11) {
      return 0;
    }
  }
  return icu::Normalizer2Impl::getFCD16FromNormData((icu::Normalizer2Impl *)a1, v5);
}

void icu::UTF8CollationIterator::~UTF8CollationIterator(icu::UTF8CollationIterator *this@<X0>, void *a2@<X8>)
{
  icu::CollationIterator::~CollationIterator(this, a2);

  icu::UMemory::operator delete(v2);
}

uint64_t icu::UTF8CollationIterator::resetToOffset(icu::UTF8CollationIterator *this, int a2)
{
  uint64_t result = icu::CollationIterator::reset((uint64_t)this);
  *((_DWORD *)this + 100) = a2;
  return result;
}

uint64_t icu::UTF8CollationIterator::getOffset(icu::UTF8CollationIterator *this)
{
  return *((unsigned int *)this + 100);
}

uint64_t icu::UTF8CollationIterator::handleNextCE32(icu::UTF8CollationIterator *this, int *a2, UErrorCode *a3)
{
  uint64_t v4 = *((int *)this + 100);
  if (v4 == *((_DWORD *)this + 101))
  {
    *a2 = -1;
    return 192;
  }
  unint64_t v7 = (const uint8_t *)*((void *)this + 49);
  *((_DWORD *)this + 100) = v4 + 1;
  int v8 = (char)v7[v4];
  uint64_t v9 = v7[v4];
  UChar32 v10 = v8;
  *a2 = v8;
  if ((v8 & 0x80000000) == 0) {
    return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16) + 4 * v9);
  }
  BOOL v11 = (int32_t *)((char *)this + 400);
  int32_t v12 = *((_DWORD *)this + 101);
  if ((v9 & 0xF0) == 0xE0)
  {
    uint64_t v13 = *v11;
    uint64_t v14 = v13 + 1;
    if ((int)v13 + 1 < v12 || v12 < 0)
    {
      uint64_t v15 = v9 & 0xF;
      unsigned int v16 = v7[v13];
      if ((a00000000000000[v15] >> (v16 >> 5)))
      {
        unsigned int v17 = v7[v14] ^ 0x80;
        if (v17 <= 0x3F)
        {
          *a2 = (v15 << 12) | ((v16 & 0x3F) << 6) | v17;
          *((_DWORD *)this + 100) += 2;
          return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
                                 + 4
                                 * ((*a2 & 0x1F)
                                  + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2 * (*a2 >> 5))));
        }
      }
    }
  }
  else if ((v8 + 62) <= 0x1Du)
  {
    uint64_t v18 = *v11;
    if (v18 != v12)
    {
      unsigned int v19 = v7[v18] ^ 0x80;
      if (v19 <= 0x3F)
      {
        uint64_t result = *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
                                 + 4 * (*(unsigned __int16 *)(**((void **)this + 1) + 2 * v9 + 3776) + v19));
        *a2 = ((v10 & 0x1F) << 6) | v19;
        ++*((_DWORD *)this + 100);
        return result;
      }
    }
  }
  UChar32 CharSafeBody = utf8_nextCharSafeBody(v7, v11, v12, v10, -3);
  *a2 = CharSafeBody;
  unsigned int v21 = (uint64_t *)*((void *)this + 2);

  return sub_18C8DD7F8(v21, CharSafeBody);
}

uint64_t icu::UTF8CollationIterator::foundNULTerminator(icu::UTF8CollationIterator *this)
{
  if ((*((_DWORD *)this + 101) & 0x80000000) == 0) {
    return 0;
  }
  int v2 = *((_DWORD *)this + 100) - 1;
  *((_DWORD *)this + 100) = v2;
  *((_DWORD *)this + 101) = v2;
  return 1;
}

uint64_t icu::UTF8CollationIterator::forbidSurrogateCodePoints(icu::UTF8CollationIterator *this)
{
  return 1;
}

uint64_t icu::UTF8CollationIterator::nextCodePoint(icu::UTF8CollationIterator *this, UErrorCode *a2)
{
  int v2 = *((_DWORD *)this + 100);
  int v3 = *((_DWORD *)this + 101);
  if (v2 == v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = v2;
  uint64_t v5 = *((void *)this + 49);
  if ((v3 & 0x80000000) == 0 || *(unsigned char *)(v5 + v2))
  {
    uint64_t v8 = v2 + 1;
    *((_DWORD *)this + 100) = v2 + 1;
    int v9 = *(char *)(v5 + v2);
    uint64_t v6 = *(unsigned __int8 *)(v5 + v2);
    if ((v9 & 0x80000000) == 0) {
      return v6;
    }
    if (v8 != v3)
    {
      if (v6 < 0xE0)
      {
        if (v6 < 0xC2) {
          return 65533;
        }
        int v12 = v6 & 0x1F;
      }
      else
      {
        if (v6 > 0xEF)
        {
          if (v6 > 0xF4) {
            return 65533;
          }
          int v14 = v6 - 240;
          unint64_t v10 = *(unsigned __int8 *)(v5 + v8);
          if (((byte_18CA9828F[v10 >> 4] >> v14) & 1) == 0) {
            return 65533;
          }
          uint64_t v8 = v4 + 2;
          *((_DWORD *)this + 100) = v4 + 2;
          if (v4 + 2 == v3) {
            return 65533;
          }
          unsigned int v11 = *(unsigned __int8 *)(v5 + v8) ^ 0x80;
          if (v11 > 0x3F) {
            return 65533;
          }
          LODWORD(v10) = v10 & 0x3F | (v14 << 6);
        }
        else
        {
          unint64_t v10 = v9 & 0xF;
          if (((a00000000000000[v10] >> (*(unsigned char *)(v5 + v8) >> 5)) & 1) == 0) {
            return 65533;
          }
          unsigned int v11 = *(unsigned char *)(v5 + v8) & 0x3F;
        }
        LODWORD(v8) = v8 + 1;
        *((_DWORD *)this + 100) = v8;
        if (v8 == v3) {
          return 65533;
        }
        int v12 = v11 | (v10 << 6);
      }
      unsigned int v13 = *(unsigned __int8 *)(v5 + (int)v8) ^ 0x80;
      if (v13 <= 0x3F)
      {
        uint64_t v6 = v13 | (v12 << 6);
        *((_DWORD *)this + 100) = v8 + 1;
        return v6;
      }
    }
    return 65533;
  }
  *((_DWORD *)this + 101) = v2;
  return 0xFFFFFFFFLL;
}

uint64_t icu::UTF8CollationIterator::previousCodePoint(icu::UTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v2 = *((int *)this + 100);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  int v3 = (const uint8_t *)*((void *)this + 49);
  uint64_t v4 = v2 - 1;
  *((_DWORD *)this + 100) = v4;
  int v5 = (char)v3[v4];
  uint64_t v6 = v5;
  if (v5 < 0) {
    return utf8_prevCharSafeBody(v3, 0, (int32_t *)this + 100, v5, -3);
  }
  return v6;
}

uint64_t icu::UTF8CollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v3 = *(_DWORD *)(this + 404);
    int v4 = *(_DWORD *)(this + 400);
    for (int i = a2 + 1; i > 1; --i)
    {
      if (v4 >= v3)
      {
        if ((v3 & 0x80000000) == 0) {
          return this;
        }
        uint64_t v6 = *(void *)(this + 392);
        if (!*(unsigned char *)(v6 + v4)) {
          return this;
        }
      }
      else
      {
        uint64_t v6 = *(void *)(this + 392);
      }
      uint64_t v7 = v4 + 1;
      *(_DWORD *)(this + 400) = v7;
      unsigned int v8 = *(unsigned __int8 *)(v6 + v4);
      if ((v8 + 11) >= 0xCDu && v7 != v3)
      {
        unint64_t v10 = *(unsigned __int8 *)(v6 + v7);
        if ((v8 & 0xF0) == 0xE0)
        {
          if (((a00000000000000[v8 & 0xF] >> (*(unsigned char *)(v6 + v7) >> 5)) & 1) == 0) {
            goto LABEL_12;
          }
          uint64_t v11 = v4 + 2;
          *(_DWORD *)(this + 400) = v11;
          LODWORD(v7) = v3;
          if (v11 == v3) {
            goto LABEL_12;
          }
          LODWORD(v7) = v4 + 2;
          if (*(char *)(v6 + v11) >= -64) {
            goto LABEL_12;
          }
          int v12 = 3;
          goto LABEL_22;
        }
        if (v8 > 0xDF)
        {
          if (((byte_18CA9828F[v10 >> 4] >> (v8 & 7)) & 1) == 0) {
            goto LABEL_12;
          }
          *(_DWORD *)(this + 400) = v4 + 2;
          LODWORD(v7) = v3;
          if (v4 + 2 == v3) {
            goto LABEL_12;
          }
          LODWORD(v7) = v4 + 2;
          if (*(char *)(v6 + v4 + 2) > -65) {
            goto LABEL_12;
          }
          uint64_t v13 = v4 + 3;
          *(_DWORD *)(this + 400) = v13;
          LODWORD(v7) = v3;
          if (v13 == v3) {
            goto LABEL_12;
          }
          LODWORD(v7) = v4 + 3;
          if (*(char *)(v6 + v13) > -65) {
            goto LABEL_12;
          }
          int v12 = 4;
          goto LABEL_22;
        }
        if ((char)v10 < -64)
        {
          int v12 = 2;
LABEL_22:
          LODWORD(v7) = v4 + v12;
          *(_DWORD *)(this + 400) = v4 + v12;
        }
      }
LABEL_12:
      int v4 = v7;
    }
  }
  return this;
}

uint64_t icu::UTF8CollationIterator::backwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = this;
    int32_t v4 = *(_DWORD *)(this + 400);
    int v5 = a2 + 1;
    do
    {
      BOOL v6 = __OFSUB__(v4--, 1);
      if (v4 < 0 != v6) {
        break;
      }
      this = *(void *)(v3 + 392);
      *(_DWORD *)(v3 + 400) = v4;
      if (*(char *)(this + v4) <= -65)
      {
        this = utf8_back1SafeBody((const uint8_t *)this, 0, v4);
        int32_t v4 = this;
        *(_DWORD *)(v3 + 400) = this;
      }
      --v5;
    }
    while (v5 > 1);
  }
  return this;
}

void icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator(icu::FCDUTF8CollationIterator *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1EDA547A0;
  icu::UnicodeString::~UnicodeString(a2, (icu::FCDUTF8CollationIterator *)((char *)this + 432));

  icu::CollationIterator::~CollationIterator(this, v3);
}

{
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDA547A0;
  icu::UnicodeString::~UnicodeString(a2, (icu::FCDUTF8CollationIterator *)((char *)this + 432));

  icu::CollationIterator::~CollationIterator(this, v3);
}

{
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EDA547A0;
  icu::UnicodeString::~UnicodeString(a2, (icu::FCDUTF8CollationIterator *)((char *)this + 432));
  icu::CollationIterator::~CollationIterator(this, v3);

  icu::UMemory::operator delete(v4);
}

uint64_t icu::FCDUTF8CollationIterator::resetToOffset(icu::FCDUTF8CollationIterator *this, int a2)
{
  uint64_t result = icu::CollationIterator::reset((uint64_t)this);
  *((_DWORD *)this + 100) = a2;
  *((_DWORD *)this + 103) = a2;
  *((_DWORD *)this + 102) = 0;
  return result;
}

uint64_t icu::FCDUTF8CollationIterator::getOffset(icu::FCDUTF8CollationIterator *this)
{
  uint64_t v1 = (char *)this + 400;
  if (*((_DWORD *)this + 102) == 3)
  {
    if (*(_DWORD *)v1) {
      uint64_t v1 = (char *)this + 416;
    }
    else {
      uint64_t v1 = (char *)this + 412;
    }
  }
  return *(unsigned int *)v1;
}

uint64_t icu::FCDUTF8CollationIterator::handleNextCE32(icu::FCDUTF8CollationIterator *this, int *a2, UErrorCode *a3)
{
  BOOL v6 = (int32_t *)((char *)this + 400);
  while (2)
  {
    switch(*((_DWORD *)this + 102))
    {
      case 0:
        uint64_t v7 = *((int *)this + 100);
        if (v7 == *((_DWORD *)this + 101)) {
          goto LABEL_47;
        }
        unsigned int v8 = (const uint8_t *)*((void *)this + 49);
        *((_DWORD *)this + 100) = v7 + 1;
        int v9 = (char)v8[v7];
        UChar32 v10 = v9;
        *a2 = v9;
        if ((v9 & 0x80000000) == 0) {
          return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16) + 4 * v9);
        }
        int32_t v11 = *((_DWORD *)this + 101);
        if ((v9 & 0xF0) == 0xE0)
        {
          uint64_t v12 = *v6;
          uint64_t v13 = v12 + 1;
          if ((int)v12 + 1 < v11 || v11 < 0)
          {
            uint64_t v14 = v9 & 0xF;
            unsigned int v15 = v8[v12];
            if ((a00000000000000[v14] >> (v15 >> 5)))
            {
              unsigned int v16 = v8[v13] ^ 0x80;
              if (v16 <= 0x3F)
              {
                *a2 = (v14 << 12) | ((v15 & 0x3F) << 6) | v16;
                int32_t v17 = *v6;
                int v18 = *v6 + 2;
                int32_t *v6 = v18;
                unint64_t v19 = *a2;
                if ((int)v19 < 192
                  || !icu::CollationFCD::tcccIndex[v19 >> 5]
                  || ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v19 >> 5]] >> v19) & 1) == 0
                  || (v19 & 0x1FFF01) != 0xF01
                  && (v18 == *((_DWORD *)this + 101) || !icu::FCDUTF8CollationIterator::nextHasLccc(this)))
                {
                  return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
                                         + 4
                                         * ((v19 & 0x1F)
                                          + 4
                                          * *(unsigned __int16 *)(**((void **)this + 1)
                                                                              + 2 * ((int)v19 >> 5))));
                }
LABEL_31:
                int v29 = v17 - 1;
                goto LABEL_39;
              }
            }
          }
        }
        else if ((v9 + 62) <= 0x1Du)
        {
          uint64_t v25 = *v6;
          if (v25 != v11)
          {
            unsigned int v26 = v8[v25] ^ 0x80;
            if (v26 <= 0x3F)
            {
              uint64_t v27 = *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
                                    + 4
                                    * (*(unsigned __int16 *)(**((void **)this + 1) + 2 * v9 + 3776)
                                     + v26));
              *a2 = ((v9 & 0x1F) << 6) | v26;
              int32_t v17 = *((_DWORD *)this + 100);
              *((_DWORD *)this + 100) = v17 + 1;
              unint64_t v28 = *a2;
              if ((int)v28 < 192
                || !icu::CollationFCD::tcccIndex[v28 >> 5]
                || ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v28 >> 5]] >> v28) & 1) == 0
                || v17 + 1 == *((_DWORD *)this + 101)
                || !icu::FCDUTF8CollationIterator::nextHasLccc(this))
              {
                return v27;
              }
              goto LABEL_31;
            }
          }
        }
        unsigned int CharSafeBody = utf8_nextCharSafeBody(v8, v6, v11, v10, -3);
        *a2 = CharSafeBody;
        if (CharSafeBody == 65533) {
          return 4294771973;
        }
        int v31 = CharSafeBody;
        unint64_t v32 = (unsigned __int16)((CharSafeBody >> 10) - 10304);
        if (v32 < 0xC0
          || (uint64_t v33 = icu::CollationFCD::tcccIndex[v32 >> 5]) == 0
          || ((icu::CollationFCD::tcccBits[v33] >> (CharSafeBody >> 10)) & 1) == 0
          || (int v34 = *((_DWORD *)this + 100), v34 == *((_DWORD *)this + 101))
          || !icu::FCDUTF8CollationIterator::nextHasLccc(this))
        {
          long long v36 = (uint64_t *)*((void *)this + 2);
          return sub_18C8EEB30(v36, v31);
        }
        int v29 = v34 - 4;
LABEL_39:
        *((_DWORD *)this + 100) = v29;
        if (icu::FCDUTF8CollationIterator::nextSegment(this, a3)) {
          continue;
        }
LABEL_47:
        *a2 = -1;
        return 192;
      case 1:
        int v20 = *((_DWORD *)this + 100);
        BOOL v21 = v20 != *((_DWORD *)this + 104);
        *((_DWORD *)this + 103) = v20;
        int v22 = 2 * v21;
        goto LABEL_43;
      case 2:
        if (*((_DWORD *)this + 100) != *((_DWORD *)this + 104))
        {
          return icu::UTF8CollationIterator::handleNextCE32(this, a2, a3);
        }
        int v22 = 0;
        goto LABEL_43;
      case 3:
        uint64_t v23 = *((int *)this + 100);
        unsigned int v24 = *((unsigned __int16 *)this + 220);
        if (*((__int16 *)this + 220) < 0)
        {
          unsigned int v38 = *((_DWORD *)this + 111);
          if (v23 != v38) {
            goto LABEL_53;
          }
          goto LABEL_42;
        }
        if (v23 == v24 >> 5)
        {
LABEL_42:
          int v22 = 0;
          int v35 = *((_DWORD *)this + 104);
          *((_DWORD *)this + 100) = v35;
          *((_DWORD *)this + 103) = v35;
LABEL_43:
          *((_DWORD *)this + 102) = v22;
          continue;
        }
        unsigned int v38 = v24 >> 5;
LABEL_53:
        int32_t *v6 = v23 + 1;
        if (v38 <= v23)
        {
          LODWORD(v19) = 0xFFFF;
        }
        else
        {
          if ((v24 & 2) != 0) {
            uint64_t v39 = (char *)this + 442;
          }
          else {
            uint64_t v39 = (char *)*((void *)this + 57);
          }
          LODWORD(v19) = *(unsigned __int16 *)&v39[2 * v23];
        }
        *a2 = v19;
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16)
                               + 4
                               * ((v19 & 0x1F)
                                + 4
                                * *(unsigned __int16 *)(**((void **)this + 1) + 2 * ((int)v19 >> 5))));
      default:
        goto LABEL_42;
    }
  }
}

uint64_t icu::FCDUTF8CollationIterator::nextHasLccc(icu::FCDUTF8CollationIterator *this)
{
  uint64_t v1 = *((void *)this + 49);
  uint64_t v2 = *((int *)this + 100);
  unsigned int v3 = *(unsigned __int8 *)(v1 + v2);
  if (v3 < 0xCC) {
    return 0;
  }
  if (v3 != 234 && (v3 + 28) < 0xAu) {
    return 0;
  }
  unint64_t v5 = v2 + 1;
  int v6 = *((_DWORD *)this + 101);
  if (v2 + 1 == v6) {
    goto LABEL_25;
  }
  if (v3 < 0xE0)
  {
    unsigned int v9 = v3 & 0x1F;
  }
  else
  {
    if (v3 > 0xEF)
    {
      if (v3 > 0xF4) {
        goto LABEL_25;
      }
      unsigned int v13 = v3 - 240;
      unint64_t v5 = *(unsigned __int8 *)(v1 + v5);
      if (((byte_18CA9828F[v5 >> 4] >> (v3 + 16)) & 1) == 0) {
        goto LABEL_25;
      }
      uint64_t v14 = v2 + 2;
      if (v2 + 2 == v6) {
        goto LABEL_25;
      }
      unsigned int v8 = *(unsigned __int8 *)(v1 + v14) ^ 0x80;
      if (v8 > 0x3F) {
        goto LABEL_25;
      }
      int v7 = v5 & 0x3F | (v13 << 6);
      LODWORD(v5) = v14;
    }
    else
    {
      int v7 = v3 & 0xF;
      if (((a00000000000000[v3 & 0xF] >> (*(unsigned char *)(v1 + v5) >> 5)) & 1) == 0) {
        goto LABEL_25;
      }
      unsigned int v8 = *(unsigned char *)(v1 + v5) & 0x3F;
    }
    LODWORD(v5) = v5 + 1;
    if (v5 == v6) {
      goto LABEL_25;
    }
    unsigned int v9 = v8 | (v7 << 6);
  }
  unsigned int v10 = *(unsigned __int8 *)(v1 + (int)v5) ^ 0x80;
  if (v10 <= 0x3F)
  {
    unsigned int v11 = v10 | (v9 << 6);
    unsigned int v12 = (unsigned __int16)((v9 >> 4) - 10304);
    if (HIWORD(v11)) {
      unsigned int v11 = v12;
    }
    if (v11 < 0x300) {
      return 0;
    }
    goto LABEL_26;
  }
LABEL_25:
  unsigned int v11 = 65533;
LABEL_26:
  if (icu::CollationFCD::lcccIndex[(unint64_t)v11 >> 5]) {
    return (icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[(unint64_t)v11 >> 5]] >> v11) & 1;
  }
  return 0;
}

uint64_t icu::FCDUTF8CollationIterator::nextSegment(icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  unsigned __int16 v5 = 0;
  int v6 = *((_DWORD *)this + 100);
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  int v35 = &unk_1EDA47700;
  LOWORD(v36) = 2;
  int v7 = v6;
  while (1)
  {
    uint64_t v8 = *((void *)this + 49);
    uint64_t v9 = v7 + 1;
    *((_DWORD *)this + 100) = v9;
    int v10 = *(char *)(v8 + v7);
    unsigned int v11 = *(unsigned __int8 *)(v8 + v7);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    int v12 = *((_DWORD *)this + 101);
    if (v9 == v12) {
      goto LABEL_21;
    }
    if (v11 < 0xE0)
    {
      if (v11 < 0xC2) {
        goto LABEL_21;
      }
      int v15 = v11 & 0x1F;
    }
    else
    {
      if (v11 > 0xEF)
      {
        if (v11 > 0xF4) {
          goto LABEL_21;
        }
        unint64_t v13 = *(unsigned __int8 *)(v8 + v9);
        if (((byte_18CA9828F[v13 >> 4] >> (v11 + 16)) & 1) == 0) {
          goto LABEL_21;
        }
        uint64_t v9 = v7 + 2;
        *((_DWORD *)this + 100) = v7 + 2;
        if (v7 + 2 == v12) {
          goto LABEL_21;
        }
        unsigned int v14 = *(unsigned __int8 *)(v8 + v9) ^ 0x80;
        if (v14 > 0x3F) {
          goto LABEL_21;
        }
        LODWORD(v13) = v13 & 0x3F | ((v11 - 240) << 6);
      }
      else
      {
        unint64_t v13 = v10 & 0xF;
        if (((a00000000000000[v13] >> (*(unsigned char *)(v8 + v9) >> 5)) & 1) == 0) {
          goto LABEL_21;
        }
        unsigned int v14 = *(unsigned char *)(v8 + v9) & 0x3F;
      }
      LODWORD(v9) = v9 + 1;
      *((_DWORD *)this + 100) = v9;
      if (v9 == v12) {
        goto LABEL_21;
      }
      int v15 = v14 | (v13 << 6);
    }
    unsigned int v16 = *(unsigned __int8 *)(v8 + (int)v9) ^ 0x80;
    if (v16 <= 0x3F)
    {
      unsigned int v11 = v16 | (v15 << 6);
      *((_DWORD *)this + 100) = v9 + 1;
      goto LABEL_22;
    }
LABEL_21:
    unsigned int v11 = 65533;
LABEL_22:
    unsigned int v17 = sub_18C818388(*((void *)this + 53), v11);
    if (v17 <= 0xFF && v7 != v6)
    {
LABEL_40:
      *((_DWORD *)this + 104) = v7;
      *((_DWORD *)this + 100) = v6;
      uint64_t v23 = 2;
      *((_DWORD *)this + 102) = 2;
      goto LABEL_67;
    }
    unsigned int v19 = v17;
    icu::UnicodeString::append((uint64_t)&v35, v11);
    if (v19 >= 0x100)
    {
      BOOL v20 = v19 >> 8 < v5 || v19 == 33156;
      if (v20 || v19 == 33154) {
        break;
      }
    }
    unsigned __int16 v5 = v19;
    int v7 = *((_DWORD *)this + 100);
    if ((_BYTE)v19) {
      BOOL v22 = v7 == *((_DWORD *)this + 101);
    }
    else {
      BOOL v22 = 1;
    }
    if (v22) {
      goto LABEL_40;
    }
  }
  while (1)
  {
    int v32 = *((_DWORD *)this + 100);
    int v33 = *((_DWORD *)this + 101);
    if (v32 == v33) {
      break;
    }
    uint64_t v24 = *((void *)this + 49);
    uint64_t v25 = v32 + 1;
    *((_DWORD *)this + 100) = v25;
    int v26 = *(char *)(v24 + v32);
    unsigned int v27 = *(unsigned __int8 *)(v24 + v32);
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_59;
    }
    if (v25 == v33) {
      goto LABEL_58;
    }
    if (v27 < 0xE0)
    {
      if (v27 < 0xC2) {
        goto LABEL_58;
      }
      int v30 = v27 & 0x1F;
    }
    else
    {
      if (v27 > 0xEF)
      {
        if (v27 > 0xF4) {
          goto LABEL_58;
        }
        unint64_t v28 = *(unsigned __int8 *)(v24 + v25);
        if (((byte_18CA9828F[v28 >> 4] >> (v27 + 16)) & 1) == 0) {
          goto LABEL_58;
        }
        uint64_t v25 = v32 + 2;
        *((_DWORD *)this + 100) = v32 + 2;
        if (v32 + 2 == v33) {
          goto LABEL_58;
        }
        unsigned int v29 = *(unsigned __int8 *)(v24 + v25) ^ 0x80;
        if (v29 > 0x3F) {
          goto LABEL_58;
        }
        LODWORD(v28) = v28 & 0x3F | ((v27 - 240) << 6);
      }
      else
      {
        unint64_t v28 = v26 & 0xF;
        if (((a00000000000000[v28] >> (*(unsigned char *)(v24 + v25) >> 5)) & 1) == 0) {
          goto LABEL_58;
        }
        unsigned int v29 = *(unsigned char *)(v24 + v25) & 0x3F;
      }
      LODWORD(v25) = v25 + 1;
      *((_DWORD *)this + 100) = v25;
      if (v25 == v33) {
        goto LABEL_58;
      }
      int v30 = v29 | (v28 << 6);
    }
    unsigned int v31 = *(unsigned __int8 *)(v24 + (int)v25) ^ 0x80;
    if (v31 <= 0x3F)
    {
      unsigned int v27 = v31 | (v30 << 6);
      *((_DWORD *)this + 100) = v25 + 1;
      goto LABEL_59;
    }
LABEL_58:
    unsigned int v27 = 65533;
LABEL_59:
    if (sub_18C818388(*((void *)this + 53), v27) <= 0xFF)
    {
      *((_DWORD *)this + 100) = v32;
      break;
    }
    icu::UnicodeString::append((uint64_t)&v35, v27);
  }
  icu::Normalizer2Impl::decompose(*((UChar **)this + 53), (const icu::UnicodeString *)&v35, (icu::FCDUTF8CollationIterator *)((char *)this + 432), a2);
  uint64_t v23 = *(unsigned int *)a2;
  if ((int)v23 > 0)
  {
    uint64_t v2 = 0;
    goto LABEL_68;
  }
  *((_DWORD *)this + 103) = v6;
  *((_DWORD *)this + 104) = *((_DWORD *)this + 100);
  uint64_t v23 = 3;
  *((_DWORD *)this + 102) = 3;
  *((_DWORD *)this + 100) = 0;
LABEL_67:
  uint64_t v2 = 1;
LABEL_68:
  icu::UnicodeString::~UnicodeString((void *)v23, (icu::UnicodeString *)&v35);
  return v2;
}

_DWORD *icu::FCDUTF8CollationIterator::switchToForward(_DWORD *this)
{
  int v1 = this[102];
  if (v1 == 2)
  {
    int v4 = 0;
  }
  else if (v1 == 1)
  {
    int v2 = this[100];
    BOOL v3 = v2 != this[104];
    this[103] = v2;
    int v4 = 2 * v3;
  }
  else
  {
    int v4 = 0;
    int v5 = this[104];
    this[100] = v5;
    this[103] = v5;
  }
  this[102] = v4;
  return this;
}

uint64_t icu::FCDUTF8CollationIterator::previousHasTccc(icu::FCDUTF8CollationIterator *this)
{
  int v2 = (const uint8_t *)*((void *)this + 49);
  uint64_t v3 = *((int *)this + 100) - 1;
  int v4 = (char)v2[v3];
  if ((v4 & 0x80000000) == 0) {
    return 0;
  }
  pint i = v3;
  LODWORD(v6) = utf8_prevCharSafeBody(v2, 0, &pi, v4, -3);
  uint64_t result = 0;
  if ((int)v6 < 0x10000) {
    unint64_t v6 = v6;
  }
  else {
    unint64_t v6 = (unsigned __int16)((v6 >> 10) - 10304);
  }
  if ((int)v6 >= 192)
  {
    if (!icu::CollationFCD::tcccIndex[v6 >> 5]) {
      return 0;
    }
    return (icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v6 >> 5]] >> v6) & 1;
  }
  return result;
}

uint64_t icu::FCDUTF8CollationIterator::handleGetTrailSurrogate(icu::FCDUTF8CollationIterator *this)
{
  if (*((_DWORD *)this + 102) != 3) {
    return 0;
  }
  uint64_t v1 = *((int *)this + 100);
  unsigned int v2 = *((unsigned __int16 *)this + 220);
  if (*((__int16 *)this + 220) < 0) {
    unsigned int v3 = *((_DWORD *)this + 111);
  }
  else {
    unsigned int v3 = v2 >> 5;
  }
  if (v3 <= v1) {
    return 0xFFFFLL;
  }
  if ((v2 & 2) != 0) {
    int v5 = (char *)this + 442;
  }
  else {
    int v5 = (char *)*((void *)this + 57);
  }
  uint64_t v4 = *(unsigned __int16 *)&v5[2 * v1];
  if ((v4 & 0xFC00) == 0xDC00) {
    *((_DWORD *)this + 100) = v1 + 1;
  }
  return v4;
}

uint64_t icu::FCDUTF8CollationIterator::foundNULTerminator(icu::FCDUTF8CollationIterator *this)
{
  if (*((_DWORD *)this + 102) || (*((_DWORD *)this + 101) & 0x80000000) == 0) {
    return 0;
  }
  int v2 = *((_DWORD *)this + 100) - 1;
  *((_DWORD *)this + 100) = v2;
  *((_DWORD *)this + 101) = v2;
  return 1;
}

uint64_t icu::FCDUTF8CollationIterator::nextCodePoint(icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  while (2)
  {
    switch(*((_DWORD *)this + 102))
    {
      case 0:
        uint64_t v4 = *((int *)this + 100);
        int v5 = *((_DWORD *)this + 101);
        if (v4 == v5) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v6 = *((void *)this + 49);
        uint64_t v7 = *(unsigned __int8 *)(v6 + v4);
        if (v5 < 0 && !*(unsigned char *)(v6 + v4)) {
          return 0xFFFFFFFFLL;
        }
        if ((v7 & 0x80) == 0)
        {
          int v32 = v4 + 1;
          goto LABEL_71;
        }
        uint64_t v8 = v4 + 1;
        *((_DWORD *)this + 100) = v4 + 1;
        int v9 = *(char *)(v6 + v4);
        uint64_t v7 = *(unsigned __int8 *)(v6 + v4);
        if ((v9 & 0x80000000) == 0) {
          goto LABEL_35;
        }
        if (v8 == v5) {
          goto LABEL_8;
        }
        if (v7 < 0xE0)
        {
          if (v7 < 0xC2) {
            goto LABEL_34;
          }
          unsigned int v19 = v7 & 0x1F;
          goto LABEL_26;
        }
        if (v7 > 0xEF)
        {
          if (v7 > 0xF4) {
            goto LABEL_34;
          }
          unint64_t v17 = *(unsigned __int8 *)(v6 + v8);
          if (((byte_18CA9828F[v17 >> 4] >> (v7 + 16)) & 1) == 0) {
            goto LABEL_34;
          }
          uint64_t v8 = v4 + 2;
          *((_DWORD *)this + 100) = v4 + 2;
          if (v4 + 2 == v5) {
            goto LABEL_8;
          }
          unsigned int v18 = *(unsigned __int8 *)(v6 + v8) ^ 0x80;
          if (v18 > 0x3F)
          {
            uint64_t v7 = 65533;
            goto LABEL_35;
          }
          LODWORD(v17) = v17 & 0x3F | ((v7 - 240) << 6);
        }
        else
        {
          unint64_t v17 = v9 & 0xF;
          if (((a00000000000000[v17] >> (*(unsigned char *)(v6 + v8) >> 5)) & 1) == 0) {
            goto LABEL_34;
          }
          unsigned int v18 = *(unsigned char *)(v6 + v8) & 0x3F;
        }
        LODWORD(v8) = v8 + 1;
        *((_DWORD *)this + 100) = v8;
        if (v8 != v5)
        {
          unsigned int v19 = v18 | (v17 << 6);
LABEL_26:
          unsigned int v20 = *(unsigned __int8 *)(v6 + (int)v8) ^ 0x80;
          if (v20 <= 0x3F)
          {
            uint64_t v7 = v20 | (v19 << 6);
            LODWORD(v8) = v8 + 1;
            *((_DWORD *)this + 100) = v8;
            if (WORD1(v7))
            {
              unsigned int v21 = (unsigned __int16)((v19 >> 4) - 10304);
              goto LABEL_36;
            }
LABEL_35:
            unsigned int v21 = v7;
LABEL_36:
            if (v21 < 0xC0
              || !icu::CollationFCD::tcccIndex[(unint64_t)v21 >> 5]
              || ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[(unint64_t)v21 >> 5]] >> v21) & 1) == 0)
            {
              return v7;
            }
            if ((v7 & 0x1FFF01) == 0xF01) {
              goto LABEL_40;
            }
            if (v8 == v5 || !icu::FCDUTF8CollationIterator::nextHasLccc(this)) {
              return v7;
            }
            if (v7 >= 0x80)
            {
              if (v7 >= 0x800)
              {
LABEL_40:
                if (v7 >> 11 >= 0x1B)
                {
                  if (v7 >= 0x10000) {
                    int v23 = -4;
                  }
                  else {
                    int v23 = -3;
                  }
                  if ((v7 - 1114112) >= 0xFFEFE000) {
                    int v22 = v23;
                  }
                  else {
                    int v22 = 0;
                  }
                }
                else
                {
                  int v22 = -3;
                }
                goto LABEL_54;
              }
              int v22 = -2;
            }
            else
            {
              int v22 = -1;
            }
LABEL_54:
            *((_DWORD *)this + 100) = v8 + v22;
            if (icu::FCDUTF8CollationIterator::nextSegment(this, a2)) {
              continue;
            }
            return 0xFFFFFFFFLL;
          }
LABEL_34:
          uint64_t v7 = 65533;
          goto LABEL_35;
        }
LABEL_8:
        uint64_t v7 = 65533;
        LODWORD(v8) = v5;
        goto LABEL_35;
      case 1:
        int v10 = *((_DWORD *)this + 100);
        BOOL v11 = v10 != *((_DWORD *)this + 104);
        *((_DWORD *)this + 103) = v10;
        int v12 = 2 * v11;
        goto LABEL_17;
      case 2:
        uint64_t v13 = *((int *)this + 100);
        if (v13 == *((_DWORD *)this + 104))
        {
          int v12 = 0;
LABEL_17:
          *((_DWORD *)this + 102) = v12;
          continue;
        }
        uint64_t v24 = *((void *)this + 49);
        uint64_t v25 = v13 + 1;
        *((_DWORD *)this + 100) = v13 + 1;
        int v26 = *(char *)(v24 + v13);
        uint64_t v7 = *(unsigned __int8 *)(v24 + v13);
        if (v26 < 0)
        {
          int v27 = *((_DWORD *)this + 101);
          if (v25 == v27) {
            return 65533;
          }
          if (v7 < 0xE0)
          {
            if (v7 < 0xC2) {
              return 65533;
            }
            int v30 = v7 & 0x1F;
LABEL_75:
            unsigned int v34 = *(unsigned __int8 *)(v24 + (int)v25) ^ 0x80;
            if (v34 > 0x3F) {
              return 65533;
            }
            uint64_t v7 = v34 | (v30 << 6);
            int v32 = v25 + 1;
LABEL_71:
            *((_DWORD *)this + 100) = v32;
          }
          else
          {
            if (v7 <= 0xEF)
            {
              unint64_t v28 = v26 & 0xF;
              if ((a00000000000000[v28] >> (*(unsigned char *)(v24 + v25) >> 5)))
              {
                unsigned int v29 = *(unsigned char *)(v24 + v25) & 0x3F;
                goto LABEL_64;
              }
              return 65533;
            }
            if (v7 <= 0xF4)
            {
              unint64_t v28 = *(unsigned __int8 *)(v24 + v25);
              if ((byte_18CA9828F[v28 >> 4] >> (v7 + 16)))
              {
                uint64_t v25 = v13 + 2;
                *((_DWORD *)this + 100) = v13 + 2;
                if (v13 + 2 != v27)
                {
                  unsigned int v29 = *(unsigned __int8 *)(v24 + v25) ^ 0x80;
                  if (v29 <= 0x3F)
                  {
                    LODWORD(v28) = v28 & 0x3F | ((v7 - 240) << 6);
LABEL_64:
                    LODWORD(v25) = v25 + 1;
                    *((_DWORD *)this + 100) = v25;
                    if (v25 != v27)
                    {
                      int v30 = v29 | (v28 << 6);
                      goto LABEL_75;
                    }
                  }
                }
              }
            }
            return 65533;
          }
        }
        return v7;
      case 3:
        if (*((__int16 *)this + 220) < 0) {
          unsigned int v14 = (uint64_t *)*((unsigned int *)this + 111);
        }
        else {
          unsigned int v14 = (uint64_t *)(*((unsigned __int16 *)this + 220) >> 5);
        }
        int v15 = *((_DWORD *)this + 100);
        if (v15 == v14) {
          goto LABEL_16;
        }
        uint64_t v7 = (uint64_t)icu::UnicodeString::char32At(v14, (icu::FCDUTF8CollationIterator *)((char *)this + 432), v15);
        if (v7 < 0x10000) {
          int v31 = 1;
        }
        else {
          int v31 = 2;
        }
        int v32 = v31 + *((_DWORD *)this + 100);
        goto LABEL_71;
      default:
LABEL_16:
        int v12 = 0;
        int v16 = *((_DWORD *)this + 104);
        *((_DWORD *)this + 100) = v16;
        *((_DWORD *)this + 103) = v16;
        goto LABEL_17;
    }
  }
}

unint64_t icu::FCDUTF8CollationIterator::previousCodePoint(icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v4 = (int32_t *)((char *)this + 400);
  while (1)
  {
    int v5 = *((_DWORD *)this + 102);
    if (v5 == 2) {
      break;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *v4;
      if (!v6) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v7 = (const uint8_t *)*((void *)this + 49);
      uint64_t v8 = v6 - 1;
      if (((char)v7[v8] & 0x80000000) == 0)
      {
        unint64_t CharSafeBody = v7[v8];
        int32_t *v4 = v8;
        return CharSafeBody;
      }
      int32_t *v4 = v8;
      int v9 = (char)v7[v8];
      unint64_t CharSafeBody = v9;
      if (v9 < 0) {
        unint64_t CharSafeBody = utf8_prevCharSafeBody(v7, 0, v4, v9, -3);
      }
      if ((int)CharSafeBody >= 0x10000) {
        unint64_t v11 = (unsigned __int16)((CharSafeBody >> 10) - 10304);
      }
      else {
        unint64_t v11 = CharSafeBody;
      }
      if ((int)v11 < 768
        || !icu::CollationFCD::lcccIndex[v11 >> 5]
        || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[v11 >> 5]] >> v11) & 1) == 0)
      {
        return CharSafeBody;
      }
      if ((CharSafeBody & 0x1FFF01) == 0xF01)
      {
LABEL_15:
        if (CharSafeBody >> 11 >= 0x1B)
        {
          if ((CharSafeBody - 1114112) >= 0xFFEFE000)
          {
            if (CharSafeBody < 0x10000) {
              int v12 = 3;
            }
            else {
              int v12 = 4;
            }
          }
          else
          {
            int v12 = 0;
          }
        }
        else
        {
          int v12 = 3;
        }
        goto LABEL_40;
      }
      if (!*v4 || !icu::FCDUTF8CollationIterator::previousHasTccc(this)) {
        return CharSafeBody;
      }
      if (CharSafeBody >= 0x80)
      {
        if (CharSafeBody >= 0x800) {
          goto LABEL_15;
        }
        int v12 = 2;
      }
      else
      {
        int v12 = 1;
      }
LABEL_40:
      *((_DWORD *)this + 100) += v12;
      if (!icu::FCDUTF8CollationIterator::previousSegment(this, a2)) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      if (v5 >= 3)
      {
        unsigned int v14 = (uint64_t *)*v4;
        if (v14)
        {
          int v22 = icu::UnicodeString::char32At(v14, (icu::FCDUTF8CollationIterator *)((char *)this + 432), (int)v14 - 1);
          unint64_t CharSafeBody = (unint64_t)v22;
          if (v22 >= 0x10000) {
            int v23 = -2;
          }
          else {
            int v23 = -1;
          }
          *((_DWORD *)this + 100) += v23;
          return CharSafeBody;
        }
LABEL_23:
        int v15 = *((_DWORD *)this + 103);
        *((_DWORD *)this + 100) = v15;
        *((_DWORD *)this + 104) = v15;
LABEL_24:
        int v16 = 1;
        goto LABEL_25;
      }
      if (v5) {
        goto LABEL_23;
      }
      int v17 = *((_DWORD *)this + 100);
      *((_DWORD *)this + 104) = v17;
      if (v17 == *((_DWORD *)this + 103)) {
        int v16 = 1;
      }
      else {
        int v16 = 2;
      }
LABEL_25:
      *((_DWORD *)this + 102) = v16;
    }
  }
  uint64_t v13 = *((int *)this + 100);
  if (v13 == *((_DWORD *)this + 103)) {
    goto LABEL_24;
  }
  unsigned int v18 = (const uint8_t *)*((void *)this + 49);
  uint64_t v19 = v13 - 1;
  *((_DWORD *)this + 100) = v19;
  int v20 = (char)v18[v19];
  unint64_t CharSafeBody = v20;
  if ((v20 & 0x80000000) == 0) {
    return CharSafeBody;
  }

  return utf8_prevCharSafeBody(v18, 0, v4, v20, -3);
}

uint64_t icu::FCDUTF8CollationIterator::previousSegment(icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  LOBYTE(v5) = 0;
  uint64_t v6 = (int32_t *)((char *)this + 400);
  int32_t v7 = *((_DWORD *)this + 100);
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v34 = 0;
  long long v33 = 0u;
  int v30 = &unk_1EDA47700;
  LOWORD(v31) = 2;
  int32_t v8 = v7;
  while (1)
  {
    int v9 = (const uint8_t *)*((void *)this + 49);
    uint64_t v10 = v8 - 1;
    *((_DWORD *)this + 100) = v10;
    int v11 = (char)v9[v10];
    UChar32 CharSafeBody = v11;
    if (v11 < 0) {
      UChar32 CharSafeBody = utf8_prevCharSafeBody(v9, 0, v6, v11, -3);
    }
    unsigned int v13 = sub_18C818388(*((void *)this + 53), CharSafeBody);
    unsigned int v14 = v13;
    if ((_BYTE)v13) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = v8 == v7;
    }
    if (!v15)
    {
LABEL_23:
      *((_DWORD *)this + 103) = v8;
      *((_DWORD *)this + 100) = v7;
      uint64_t v19 = 2;
      *((_DWORD *)this + 102) = 2;
LABEL_40:
      uint64_t v2 = 1;
      goto LABEL_41;
    }
    unsigned int v16 = v13;
    icu::UnicodeString::append((uint64_t)&v30, CharSafeBody);
    if (v14)
    {
      if ((_BYTE)v5 && v14 > v5)
      {
        if (v16 >= 0x100) {
          break;
        }
        goto LABEL_32;
      }
      if (v16 == 33154 || v16 == 33156) {
        break;
      }
    }
    unsigned int v5 = v16 >> 8;
    int32_t v8 = *v6;
    if (v16 < 0x100 || v8 == 0) {
      goto LABEL_23;
    }
  }
  do
  {
    int32_t v20 = *v6;
    if (!*v6) {
      break;
    }
    unsigned int v21 = (const uint8_t *)*((void *)this + 49);
    uint64_t v22 = v20 - 1;
    *((_DWORD *)this + 100) = v22;
    int v23 = (char)v21[v22];
    UChar32 v24 = v23;
    if (v23 < 0) {
      UChar32 v24 = utf8_prevCharSafeBody(v21, 0, v6, v23, -3);
    }
    unsigned int v25 = sub_18C818388(*((void *)this + 53), v24);
    if (!v25)
    {
      int32_t *v6 = v20;
      break;
    }
    unsigned int v26 = v25;
    icu::UnicodeString::append((uint64_t)&v30, v24);
  }
  while (v26 > 0xFF);
LABEL_32:
  if ((v31 & 0x8000u) == 0) {
    int v27 = (unsigned __int16)v31 >> 5;
  }
  else {
    int v27 = DWORD1(v31);
  }
  icu::UnicodeString::doReverse((icu::UnicodeString *)&v30, 0, v27);
  icu::Normalizer2Impl::decompose(*((UChar **)this + 53), (const icu::UnicodeString *)&v30, (icu::FCDUTF8CollationIterator *)((char *)this + 432), a2);
  uint64_t v2 = 0;
  uint64_t v19 = *(unsigned int *)a2;
  if ((int)v19 <= 0)
  {
    *((_DWORD *)this + 104) = v7;
    *((_DWORD *)this + 103) = *((_DWORD *)this + 100);
    *((_DWORD *)this + 102) = 3;
    unsigned int v28 = *((unsigned __int16 *)this + 220);
    if ((v28 & 0x8000) != 0) {
      uint64_t v19 = *((unsigned int *)this + 111);
    }
    else {
      uint64_t v19 = v28 >> 5;
    }
    int32_t *v6 = v19;
    goto LABEL_40;
  }
LABEL_41:
  icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v30);
  return v2;
}

_DWORD *icu::FCDUTF8CollationIterator::switchToBackward(_DWORD *this)
{
  int v1 = this[102];
  if (v1 == 2) {
    goto LABEL_7;
  }
  if (v1)
  {
    int v4 = this[103];
    this[100] = v4;
    this[104] = v4;
LABEL_7:
    int v3 = 1;
    goto LABEL_8;
  }
  int v2 = this[100];
  this[104] = v2;
  if (v2 == this[103]) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
LABEL_8:
  this[102] = v3;
  return this;
}

uint64_t icu::FCDUTF8CollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUTF8CollationIterator *)this;
    do
    {
      this = icu::FCDUTF8CollationIterator::nextCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

unint64_t icu::FCDUTF8CollationIterator::backwardNumCodePoints(unint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUTF8CollationIterator *)this;
    do
    {
      this = icu::FCDUTF8CollationIterator::previousCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

BOOL icu::FCDUTF8CollationIterator::normalize(UChar **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  return *a3 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t utmscale_getTimeScaleValue(unsigned int a1, unsigned int a2, int *a3)
{
  if (!a3 || *a3 > 0) {
    return 0;
  }
  if (a1 <= 9 && a2 < 0xB) {
    return qword_18CA982E0[11 * a1 + a2];
  }
  uint64_t result = 0;
  *a3 = 1;
  return result;
}

uint64_t utmscale_fromInt64(uint64_t a1, unsigned int a2, int *a3)
{
  if (!a3 || *a3 > 0) {
    return 0;
  }
  if (a2 < 0xA)
  {
    int v4 = &qword_18CA982E0[11 * a2];
    if (v4[2] <= a1 && v4[3] >= a1) {
      return (qword_18CA982E0[11 * a2 + 1] + a1) * *v4;
    }
  }
  uint64_t result = 0;
  *a3 = 1;
  return result;
}

uint64_t utmscale_toInt64(uint64_t a1, unsigned int a2, int *a3)
{
  if (!a3 || *a3 > 0) {
    return 0;
  }
  if (a2 >= 0xA || (int v4 = &qword_18CA982E0[11 * a2], v4[4] > a1) || v4[5] < a1)
  {
    uint64_t result = 0;
    *a3 = 1;
    return result;
  }
  uint64_t v5 = v4[8];
  uint64_t v6 = *v4;
  if (a1 < 0)
  {
    if (v4[9] > a1)
    {
      uint64_t v7 = (v5 + a1) / v6;
      uint64_t v8 = v4[6];
      return v7 - v8;
    }
    uint64_t v9 = a1 - v5;
LABEL_15:
    uint64_t v7 = v9 / v6;
    uint64_t v8 = v4[1];
    return v7 - v8;
  }
  if (v4[10] >= a1)
  {
    uint64_t v9 = v5 + a1;
    goto LABEL_15;
  }
  uint64_t v7 = (a1 - v5) / v6;
  uint64_t v8 = v4[7];
  return v7 - v8;
}

void *sub_18CA2CA14()
{
  return &unk_1E9192BB0;
}

void sub_18CA2CA24(icu::Replaceable *a1)
{
  icu::Replaceable::~Replaceable(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18CA2CA4C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t sub_18CA2CA58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 8))(*(void *)(a1 + 8));
}

uint64_t sub_18CA2CA64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))(*(void *)(a1 + 8));
}

uint64_t sub_18CA2CA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 8) + 24);
  unsigned int v7 = *(unsigned __int16 *)(a4 + 8);
  if ((v7 & 0x11) != 0)
  {
    uint64_t v8 = 0;
  }
  else if ((v7 & 2) != 0)
  {
    uint64_t v8 = a4 + 10;
  }
  else
  {
    uint64_t v8 = *(void *)(a4 + 24);
  }
  int v9 = (__int16)v7;
  unsigned int v10 = v7 >> 5;
  if (v9 >= 0) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = *(unsigned int *)(a4 + 12);
  }
  return v6(v4, a2, a3, v8, v11);
}

uint64_t sub_18CA2CABC(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeString *this)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 16) + 32);
  int v9 = a3 - a2;
  uint64_t Buffer = icu::UnicodeString::getBuffer(this, (int)a3 - (int)a2);
  v8(v7, a2, a3, Buffer);

  return icu::UnicodeString::releaseBuffer((uint64_t)this, v9);
}

uint64_t sub_18CA2CB38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 40))(*(void *)(a1 + 8));
}

uint64_t utrans_openU(uint64_t a1, unsigned int a2, int a3, uint64_t a4, unsigned int a5, UParseError *a6, UErrorCode *a7)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a7 || *(int *)a7 > 0) {
    return 0;
  }
  if (a1)
  {
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    if (a6) {
      unsigned int v13 = a6;
    }
    else {
      unsigned int v13 = (UParseError *)v21;
    }
    memset(v24, 0, sizeof(v24));
    uint64_t v20 = a1;
    uint64_t v14 = icu::UnicodeString::UnicodeString(v24, a2 >> 31, &v20);
    if (a4)
    {
      memset(v23, 0, sizeof(v23));
      uint64_t v19 = a4;
      icu::UnicodeString::UnicodeString(v23, a5 >> 31, &v19);
      BOOL v15 = icu::Transliterator::createFromRules((UChar **)v24, (uint64_t)v23, a3, v13, a7);
      unsigned int v16 = (void *)*(unsigned int *)a7;
      if ((int)v16 >= 1) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = (uint64_t)v15;
      }
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v23);
    }
    else
    {
      uint64_t Instance = icu::Transliterator::createInstance(v14, a3, v13, a7);
      int v17 = (void *)*(unsigned int *)a7;
      if ((int)v17 >= 1) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = Instance;
      }
    }
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v24);
  }
  else
  {
    uint64_t v8 = 0;
    *a7 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v8;
}

uint64_t utrans_open(uint64_t a1, int a2, uint64_t a3, unsigned int a4, UParseError *a5, UErrorCode *a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  icu::UnicodeString::UnicodeString(&v16, a1, 0xFFFFFFFFLL, 0);
  if ((BYTE8(v16) & 0x11) != 0)
  {
    unint64_t v11 = 0;
  }
  else if ((BYTE8(v16) & 2) != 0)
  {
    unint64_t v11 = (unint64_t)&v16 | 0xA;
  }
  else
  {
    unint64_t v11 = *((void *)&v17 + 1);
  }
  if ((SWORD4(v16) & 0x8000u) == 0) {
    unsigned int v12 = WORD4(v16) >> 5;
  }
  else {
    unsigned int v12 = HIDWORD(v16);
  }
  uint64_t v13 = utrans_openU(v11, v12, a2, a3, a4, a5, a6);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v16);
  return v13;
}

uint64_t utrans_openInverse(icu::Transliterator *a1, UErrorCode *a2)
{
  if (a2 && *(int *)a2 <= 0) {
    return icu::Transliterator::createInverse(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t utrans_clone(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0;
  }
  if (*a2 > 0) {
    return 0;
  }
  if (a1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (result) {
      return result;
    }
    int v4 = 7;
  }
  else
  {
    int v4 = 1;
  }
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

uint64_t utrans_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t utrans_getUnicodeID(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  if (a2)
  {
    unsigned int v4 = *(unsigned __int16 *)(v3 + 8);
    int v5 = (__int16)v4;
    unsigned int v6 = v4 >> 5;
    if (v5 < 0) {
      unsigned int v6 = *(_DWORD *)(v3 + 12);
    }
    *a2 = v6;
  }
  __int16 v7 = *(_WORD *)(v3 + 8);
  if ((v7 & 0x11) != 0) {
    return 0;
  }
  if ((v7 & 2) != 0) {
    return v3 + 10;
  }
  return *(void *)(v3 + 24);
}

uint64_t utrans_getID(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);

  return icu::UnicodeString::extract(v5, 0, 0x7FFFFFFFLL, a2, a3);
}

void utrans_register(icu::Transliterator *this, icu::Transliterator *a2)
{
  if (a2)
  {
    if (*(int *)a2 <= 0) {
      icu::Transliterator::registerInstance(this, a2);
    }
  }
}

void *utrans_unregisterID(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  memset(v6, 0, sizeof(v6));
  uint64_t v5 = a1;
  icu::UnicodeString::UnicodeString(v6, a2 >> 31, &v5);
  icu::Transliterator::unregister((icu::Transliterator *)v6, v2);
  return icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v6);
}

void *utrans_unregister(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  memset(v4, 0, sizeof(v4));
  icu::UnicodeString::UnicodeString(v4, a1, 0xFFFFFFFFLL, 0);
  icu::Transliterator::unregister((icu::Transliterator *)v4, v1);
  return icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v4);
}

icu::Transliterator *utrans_setFilter(icu::Transliterator *result, _WORD *a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a4 && *(int *)a4 <= 0)
  {
    uint64_t v5 = result;
    if (a2 && *a2)
    {
      memset(v12, 0, sizeof(v12));
      uint64_t v11 = (uint64_t)a2;
      icu::UnicodeString::UnicodeString(v12, a3 >> 31, &v11);
      uint64_t v10 = v11;
      uint64_t v7 = (icu::UnicodeSet *)icu::UMemory::operator new(&v10, (icu::UMemory *)0xC8, v6);
      if (!v7)
      {
        *a4 = U_MEMORY_ALLOCATION_ERROR;
        return (icu::Transliterator *)icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)v12);
      }
      uint64_t v8 = v7;
      icu::UnicodeSet::UnicodeSet(v7, (const icu::UnicodeString *)v12, a4);
      int v9 = (void *)*(unsigned int *)a4;
      if ((int)v9 >= 1)
      {
        (*(void (**)(icu::UnicodeFilter *))(*(void *)v8 + 8))(v8);
        uint64_t v8 = 0;
      }
      icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
    }
    else
    {
      uint64_t v8 = 0;
    }
    return (icu::Transliterator *)icu::Transliterator::adoptFilter(v5, v8);
  }
  return result;
}

uint64_t utrans_getAvailableID(icu::Transliterator *a1, char *a2, int a3)
{
  AvailableID = icu::Transliterator::getAvailableID(a1);

  return icu::UnicodeString::extract((uint64_t)AvailableID, 0, 0x7FFFFFFFLL, a2, a3);
}

_OWORD *utrans_openIDs(int *a1)
{
  if (!a1 || *a1 > 0) {
    return 0;
  }
  unsigned int v4 = uprv_malloc(0x40uLL);
  int v2 = v4;
  if (v4)
  {
    long long v5 = *(_OWORD *)&off_1EDA54958;
    _OWORD *v4 = xmmword_1EDA54948;
    v4[1] = v5;
    v4[2] = xmmword_1EDA54968;
    *((void *)v4 + 6) = off_1EDA54978;
    *((_DWORD *)v4 + 14) = 0;
    *((_DWORD *)v4 + 15) = icu::Transliterator::countAvailableIDs((icu::Transliterator *)v4);
  }
  else
  {
    *a1 = 7;
  }
  return v2;
}

void utrans_trans(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int *a6)
{
  if (a6 && *a6 <= 0)
  {
    if (a1 && a2 && a3 && a5)
    {
      v6[0] = &unk_1EDA548F0;
      v6[1] = a2;
      v6[2] = a3;
      *a5 = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(*(void *)a1 + 32))(a1, v6, a4, *a5);
      icu::Replaceable::~Replaceable((icu::Replaceable *)v6);
    }
    else
    {
      *a6 = 1;
    }
  }
}

void utrans_transIncremental(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (a5 && *a5 <= 0)
  {
    if (a1 && a2 && a3 && a4)
    {
      v5[0] = &unk_1EDA548F0;
      v5[1] = a2;
      void v5[2] = a3;
      (*(void (**)(uint64_t, void *, uint64_t, int *))(*(void *)a1 + 64))(a1, v5, a4, a5);
      icu::Replaceable::~Replaceable((icu::Replaceable *)v5);
    }
    else
    {
      *a5 = 1;
    }
  }
}

void *utrans_transUChars(void *result, UChar *s, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int *a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a7 && *a7 <= 0)
  {
    uint64_t v8 = (uint64_t)result;
    if (result && s && a6)
    {
      if (!a3 || (uint64_t v14 = *a3, (v14 & 0x80000000) != 0)) {
        uint64_t v14 = u_strlen(s);
      }
      memset(v18, 0, sizeof(v18));
      icu::UnicodeString::UnicodeString(v18, s, v14, a4);
      *a6 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, void))(*(void *)v8 + 32))(v8, v18, a5, *a6);
      long long v17 = s;
      int v15 = icu::UnicodeString::extract((uint64_t)v18, &v17, a4, a7);
      long long v16 = v17;
      if (a3) {
        *a3 = v15;
      }
      return icu::UnicodeString::~UnicodeString(&v16, (icu::UnicodeString *)v18);
    }
    else
    {
      *a7 = 1;
    }
  }
  return result;
}

void *utrans_transIncrementalUChars(void *result, UChar *s, _DWORD *a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a6 && *a6 <= 0)
  {
    uint64_t v7 = (uint64_t)result;
    if (result && s && a5)
    {
      if (!a3 || (uint64_t v12 = *a3, (v12 & 0x80000000) != 0)) {
        uint64_t v12 = u_strlen(s);
      }
      memset(v16, 0, sizeof(v16));
      icu::UnicodeString::UnicodeString(v16, s, v12, a4);
      (*(void (**)(uint64_t, _OWORD *, uint64_t, int *))(*(void *)v7 + 64))(v7, v16, a5, a6);
      int v15 = s;
      int v13 = icu::UnicodeString::extract((uint64_t)v16, &v15, a4, a6);
      uint64_t v14 = v15;
      if (a3) {
        *a3 = v13;
      }
      return icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
    }
    else
    {
      *a6 = 1;
    }
  }
  return result;
}

uint64_t utrans_toRules(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a5 && *a5 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0)
      {
LABEL_7:
        long long v15 = 0u;
        long long v16 = 0u;
        uint64_t v18 = 0;
        long long v17 = 0u;
        uint64_t v14 = &unk_1EDA47700;
        LOWORD(v15) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v14, a3, 0, a4);
        (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 112))(a1, &v14, a2);
        int v13 = (UChar *)a3;
        uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v14, &v13, a4, a5);
        uint64_t v12 = v13;
        icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)&v14);
        return v6;
      }
    }
    else if (!a4)
    {
      goto LABEL_7;
    }
    uint64_t v6 = 0;
    *a5 = 1;
    return v6;
  }
  return 0;
}

icu::UVector **utrans_getSourceSet(icu::Transliterator *this, unint64_t a2, icu::UVector **a3, unsigned int *a4)
{
  unsigned int v4 = a3;
  if (a4)
  {
    long long v5 = (uint64_t *)*a4;
    if ((int)v5 <= 0)
    {
      int v6 = a2;
      if (a3)
      {
        if (a2)
        {
LABEL_5:
          (*(void (**)(icu::Transliterator *, icu::UVector **))(*(void *)this + 120))(this, v4);
          return v4;
        }
      }
      else
      {
        uset_openEmpty(a2, v5);
        unsigned int v4 = v8;
        if (v6) {
          goto LABEL_5;
        }
      }
      icu::Transliterator::getSourceSet(this, v4);
    }
  }
  return v4;
}

uint64_t sub_18CA2D874(uint64_t a1, int *a2)
{
  if (a2 && *a2 <= 0) {
    return *(unsigned int *)(a1 + 60);
  }
  else {
    return 0;
  }
}

char *sub_18CA2D894(uint64_t a1, unsigned int *a2, int *a3)
{
  if (!a3) {
    return 0;
  }
  if (*a3 > 0) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 56);
  if (v6 >= *(_DWORD *)(a1 + 60))
  {
    if (!a2) {
      return 0;
    }
    uint64_t result = 0;
    *a2 = 0;
  }
  else
  {
    AvailableID = icu::Transliterator::getAvailableID((icu::Transliterator *)*(unsigned int *)(a1 + 56));
    *(_DWORD *)(a1 + 56) = v6 + 1;
    if (a2)
    {
      unsigned int v8 = *((unsigned __int16 *)AvailableID + 4);
      int v9 = (__int16)v8;
      unsigned int v10 = v8 >> 5;
      if (v9 < 0) {
        unsigned int v10 = *((_DWORD *)AvailableID + 3);
      }
      *a2 = v10;
    }
    __int16 v11 = *((_WORD *)AvailableID + 4);
    if ((v11 & 0x11) != 0) {
      return 0;
    }
    if ((v11 & 2) != 0) {
      return (char *)AvailableID + 10;
    }
    else {
      return (char *)AvailableID[3];
    }
  }
  return result;
}

icu::Transliterator *sub_18CA2D950(icu::Transliterator *result, int *a2)
{
  if (a2)
  {
    if (*a2 <= 0)
    {
      int v2 = result;
      *((_DWORD *)result + 14) = 0;
      uint64_t result = (icu::Transliterator *)icu::Transliterator::countAvailableIDs(result);
      *((_DWORD *)v2 + 15) = result;
    }
  }
  return result;
}

uint64_t sub_18CA2D990(int *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unsigned int v3 = *(unsigned __int16 *)(*(void *)a1 + 8);
  if ((*(__int16 *)(*(void *)a1 + 8) & 0x80000000) == 0)
  {
    if ((int)v1 < (int)(v3 >> 5))
    {
      int v4 = v3 >> 5;
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v6 = 0xFFFFLL;
    goto LABEL_11;
  }
  int v4 = *(_DWORD *)(v2 + 12);
  if ((int)v1 >= v4) {
    goto LABEL_8;
  }
LABEL_5:
  if (v4 <= v1) {
    goto LABEL_8;
  }
  if ((v3 & 2) != 0) {
    uint64_t v5 = v2 + 10;
  }
  else {
    uint64_t v5 = *(void *)(v2 + 24);
  }
  uint64_t v6 = *(unsigned __int16 *)(v5 + 2 * v1);
LABEL_11:
  a1[2] = v1 + 1;
  return v6;
}

void *icu::VTimeZone::getStaticClassID(icu::VTimeZone *this)
{
  return &unk_1E9192BB1;
}

void *icu::VTimeZone::getDynamicClassID(icu::VTimeZone *this)
{
  return &unk_1E9192BB1;
}

void *icu::VTimeZone::VTimeZone(icu::VTimeZone *this)
{
  uint64_t result = icu::BasicTimeZone::BasicTimeZone(this);
  *uint64_t result = &unk_1EDA549A8;
  result[9] = 0;
  result[10] = 0;
  result[11] = &unk_1EDA47700;
  *((_WORD *)result + 48) = 2;
  result[19] = 0x43846A3EDDF8CD80;
  result[20] = &unk_1EDA47700;
  *((_WORD *)result + 84) = 2;
  result[28] = &unk_1EDA47700;
  *((_WORD *)result + 116) = 2;
  return result;
}

icu::VTimeZone *icu::VTimeZone::VTimeZone(icu::VTimeZone *this, const icu::VTimeZone *a2)
{
  int v4 = icu::BasicTimeZone::BasicTimeZone(this, (UChar **)a2);
  *(void *)int v4 = &unk_1EDA549A8;
  *((void *)v4 + 9) = 0;
  uint64_t v5 = (void *)((char *)v4 + 72);
  *((void *)this + 10) = 0;
  icu::UnicodeString::UnicodeString((icu::TimeZone *)((char *)v4 + 88), (UChar **)a2 + 11);
  *((void *)this + 19) = *((void *)a2 + 19);
  icu::UnicodeString::UnicodeString((icu::VTimeZone *)((char *)this + 160), (UChar **)a2 + 20);
  icu::UnicodeString::UnicodeString((icu::VTimeZone *)((char *)this + 224), (UChar **)a2 + 28);
  uint64_t v7 = *((void *)a2 + 9);
  if (v7) {
    void *v5 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
  }
  uint64_t v8 = *((void *)a2 + 10);
  if (v8)
  {
    UErrorCode v17 = U_ZERO_ERROR;
    uint64_t v9 = *(unsigned int *)(v8 + 8);
    unsigned int v10 = icu::UMemory::operator new((uint64_t *)v8, (icu::UMemory *)0x28, v6);
    if (v10)
    {
      __int16 v11 = (uint64_t (**)(void *))v10;
      icu::UVector::UVector(v10, uprv_deleteUObject, uhash_compareUnicodeString, v9, &v17);
      if (v17 <= U_ZERO_ERROR)
      {
        if ((int)v9 < 1)
        {
LABEL_15:
          *((void *)this + 10) = v11;
          return this;
        }
        unsigned int v12 = 0;
        while (1)
        {
          uint64_t v13 = icu::UVector::elementAt(*((icu::UVector **)a2 + 10), v12);
          uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13);
          icu::UVector::adoptElement(v11, v14, &v17);
          if (!v14 || v17 >= U_ILLEGAL_ARGUMENT_ERROR) {
            break;
          }
          if (v9 == ++v12) {
            goto LABEL_15;
          }
        }
      }
      (*((void (**)(uint64_t (**)(void *)))*v11 + 1))(v11);
    }
  }
  return this;
}

void icu::VTimeZone::~VTimeZone(icu::VTimeZone *this)
{
  *(void *)this = &unk_1EDA549A8;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 10);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::UnicodeString::~UnicodeString((icu::VTimeZone *)((char *)this + 224));
  icu::UnicodeString::~UnicodeString((icu::VTimeZone *)((char *)this + 160));
  icu::UnicodeString::~UnicodeString((icu::VTimeZone *)((char *)this + 88));

  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::VTimeZone::~VTimeZone(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::VTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 168))(a1))
  {
    icu::TimeZone::operator=(a1, a2);
    uint64_t v5 = *(void *)(a1 + 72);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      *(void *)(a1 + 72) = 0;
    }
    uint64_t v6 = *(void *)(a2 + 72);
    if (v6) {
      *(void *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
    }
    uint64_t v7 = *(void *)(a1 + 80);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      *(void *)(a1 + 80) = 0;
    }
    uint64_t v8 = *(void *)(a2 + 80);
    if (!v8) {
      goto LABEL_24;
    }
    UErrorCode v17 = U_ZERO_ERROR;
    uint64_t v9 = *(unsigned int *)(v8 + 8);
    unsigned int v10 = icu::UMemory::operator new((uint64_t *)v8, (icu::UMemory *)0x28, v4);
    if (!v10) {
      goto LABEL_24;
    }
    __int16 v11 = (uint64_t (**)(void *))v10;
    icu::UVector::UVector(v10, uprv_deleteUObject, uhash_compareUnicodeString, v9, &v17);
    if (v17 <= U_ZERO_ERROR)
    {
      if ((int)v9 < 1)
      {
LABEL_23:
        *(void *)(a1 + 80) = v11;
        goto LABEL_24;
      }
      unsigned int v12 = 0;
      while (1)
      {
        uint64_t v13 = icu::UVector::elementAt(*(icu::UVector **)(a2 + 80), v12);
        uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13);
        if (!v14 && v17 <= U_ZERO_ERROR) {
          UErrorCode v17 = U_MEMORY_ALLOCATION_ERROR;
        }
        icu::UVector::adoptElement(v11, v14, &v17);
        if (v17 >= U_ILLEGAL_ARGUMENT_ERROR) {
          break;
        }
        if (v9 == ++v12) {
          goto LABEL_23;
        }
      }
    }
    (*((void (**)(uint64_t (**)(void *)))*v11 + 1))(v11);
LABEL_24:
    icu::UnicodeString::operator=((UChar **)(a1 + 88), (UChar **)(a2 + 88));
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    icu::UnicodeString::operator=((UChar **)(a1 + 160), (UChar **)(a2 + 160));
    icu::UnicodeString::operator=((UChar **)(a1 + 224), (UChar **)(a2 + 224));
  }
  return a1;
}

BOOL icu::VTimeZone::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    BOOL result = icu::TimeZone::operator==(a1, a2);
    if (result)
    {
      if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72), *(void *)(a2 + 72)))
      {
        unsigned int v5 = *(unsigned __int16 *)(a1 + 96);
        if (v5)
        {
          if (*(_WORD *)(a2 + 96)) {
            goto LABEL_18;
          }
        }
        else
        {
          if ((v5 & 0x8000) != 0) {
            int v6 = *(_DWORD *)(a1 + 100);
          }
          else {
            int v6 = v5 >> 5;
          }
          unsigned int v7 = *(unsigned __int16 *)(a2 + 96);
          if ((v7 & 0x8000u) == 0) {
            unsigned int v8 = v7 >> 5;
          }
          else {
            unsigned int v8 = *(_DWORD *)(a2 + 100);
          }
          if ((v7 & 1) == 0
            && v6 == v8
            && icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 88), (const icu::UnicodeString *)(a2 + 88), v6))
          {
LABEL_18:
            if (*(double *)(a1 + 152) == *(double *)(a2 + 152)) {
              return 1;
            }
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t icu::VTimeZone::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1) ^ 1;
}

icu::VTimeZone *icu::VTimeZone::createVTimeZoneByID@<X0>(UChar **this@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = (icu::VTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0x120, (unint64_t)a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::VTimeZone::VTimeZone(v4);
    uint64_t TimeZone = (UChar **)icu::TimeZone::createTimeZone(this, v6);
    *((void *)v5 + 9) = TimeZone;
    icu::UnicodeString::operator=((UChar **)v5 + 20, TimeZone + 1);
    uint64_t v14 = 0;
    uint64_t v8 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)&v14 + 4);
    StringByuint64_t Key = ures_getStringByKey(v8, "TZVersion", (int *)&v14, (int *)&v14 + 1);
    if (SHIDWORD(v14) <= 0)
    {
      uint64_t v10 = (uint64_t)StringByKey;
      uint64_t v11 = v14;
      icu::UnicodeString::unBogus((uint64_t)v5 + 224);
      if (*((__int16 *)v5 + 116) < 0) {
        uint64_t v12 = *((unsigned int *)v5 + 59);
      }
      else {
        uint64_t v12 = *((unsigned __int16 *)v5 + 116) >> 5;
      }
      icu::UnicodeString::doReplace((uint64_t)v5 + 224, 0, v12, v10, 0, v11);
    }
    ures_close(v8);
  }
  return v5;
}

icu::VTimeZone *icu::VTimeZone::createVTimeZoneFromBasicTimeZone(icu::VTimeZone *this, const icu::BasicTimeZone *a2, UErrorCode *a3)
{
  uint64_t v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0) {
    return 0;
  }
  uint64_t v8 = (icu::VTimeZone *)icu::UMemory::operator new(v3, (icu::UMemory *)0x120, (unint64_t)a2);
  unint64_t v4 = v8;
  if (!v8)
  {
    *(_DWORD *)a2 = 7;
    return v4;
  }
  icu::VTimeZone::VTimeZone(v8);
  uint64_t v9 = (*(uint64_t (**)(icu::VTimeZone *))(*(void *)this + 96))(this);
  *((void *)v4 + 9) = v9;
  if (!v9)
  {
    *(_DWORD *)a2 = 7;
    (*(void (**)(icu::VTimeZone *))(*(void *)v4 + 8))(v4);
    return 0;
  }
  icu::UnicodeString::operator=((UChar **)v4 + 20, (UChar **)(v9 + 8));
  unsigned int v15 = 0;
  uint64_t v10 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a2);
  StringByuint64_t Key = ures_getStringByKey(v10, "TZVersion", (int *)&v15, (int *)a2);
  if (*(int *)a2 <= 0)
  {
    uint64_t v12 = (uint64_t)StringByKey;
    uint64_t v13 = v15;
    icu::UnicodeString::unBogus((uint64_t)v4 + 224);
    if (*((__int16 *)v4 + 116) < 0) {
      uint64_t v14 = *((unsigned int *)v4 + 59);
    }
    else {
      uint64_t v14 = *((unsigned __int16 *)v4 + 116) >> 5;
    }
    icu::UnicodeString::doReplace((uint64_t)v4 + 224, 0, v14, v12, 0, v13);
  }
  ures_close(v10);
  return v4;
}

icu::VTimeZone *icu::VTimeZone::createVTimeZone(icu::VTimeZone *this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0) {
    return 0;
  }
  v9[0] = this;
  v9[1] = 0;
  unsigned int v7 = (icu::VTimeZone *)icu::UMemory::operator new(v3, (icu::UMemory *)0x120, (unint64_t)a2);
  unint64_t v4 = v7;
  if (!v7)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return v4;
  }
  uint64_t v8 = (icu::VTimeZone *)icu::VTimeZone::VTimeZone(v7);
  icu::VTimeZone::load(v8, (int *)v9, a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(icu::VTimeZone *))(*(void *)v4 + 8))(v4);
    return 0;
  }
  return v4;
}

uint64_t *icu::VTimeZone::load(icu::VTimeZone *a1, int *a2, UErrorCode *a3)
{
  int v44 = (uint64_t *)*MEMORY[0x1E4F143B8];
  BOOL result = icu::UMemory::operator new(v44, (icu::UMemory *)0x28, (unint64_t)a2);
  if (!result)
  {
    if (*(int *)a3 <= 0) {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
    return result;
  }
  unsigned int v7 = (uint64_t (**)(void *))result;
  icu::UVector::UVector(result, uprv_deleteUObject, uhash_compareUnicodeString, 100, a3);
  if (*(int *)a3 > 0) {
    return (uint64_t *)(*((uint64_t (**)(void))*v7 + 1))(v7);
  }
  uint64_t v34 = a1;
  int v8 = 0;
  int v9 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v43 = 0;
  long long v42 = 0u;
  uint64_t v39 = (UChar *)&unk_1EDA47700;
  LOWORD(v40) = 2;
  while (1)
  {
    do
      int v10 = sub_18CA2D990(a2);
    while (v10 == 13);
    int v12 = v10;
    if (v10 == 0xFFFF) {
      break;
    }
    if (v8)
    {
      int v8 = 0;
      if (v10 != 9 && v10 != 32)
      {
        char v17 = v40;
        if (v9)
        {
          int v18 = (v40 & 0x8000u) == 0 ? (unsigned __int16)v40 >> 5 : DWORD1(v40);
          if (v18 >= 1)
          {
            uint64_t v19 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)(unsigned __int16)v40, (icu::UMemory *)0x40, v11);
            uint64_t v20 = v19;
            if (v19)
            {
              icu::UnicodeString::UnicodeString(v19, &v39);
            }
            else if (*(int *)a3 <= 0)
            {
              *a3 = U_MEMORY_ALLOCATION_ERROR;
            }
            icu::UVector::adoptElement(v7, v20, a3);
            uint64_t v26 = *(unsigned int *)a3;
            if ((int)v26 > 0) {
              goto LABEL_50;
            }
            char v17 = v40;
          }
        }
        int v8 = 0;
        __int16 v28 = (v17 & 1) != 0 ? 2 : v17 & 0x1F;
        LOWORD(v40) = v28;
        if (v12 != 10)
        {
LABEL_38:
          __int16 v38 = v12;
          icu::UnicodeString::doAppend((uint64_t)&v39, (uint64_t)&v38, 0, 1);
          int v8 = 0;
        }
      }
    }
    else
    {
      if (v10 != 10) {
        goto LABEL_38;
      }
      if (v9)
      {
        v36[1] = L"END:VTIMEZONE";
        int32_t v13 = u_strlen((const UChar *)L"END:VTIMEZONE");
        BOOL v14 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v39, 0, v13, (uint64_t)L"END:VTIMEZONE", 0, v13);
        v36[0] = L"END:VTIMEZONE";
        long long v16 = v36;
        int v8 = 1;
        int v9 = 1;
        if (v14) {
          goto LABEL_43;
        }
      }
      else
      {
        v35[1] = (uint64_t)L"BEGIN:VTIMEZONE";
        int32_t v21 = u_strlen((const UChar *)L"BEGIN:VTIMEZONE");
        BOOL v22 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v39, 0, v21, (uint64_t)L"BEGIN:VTIMEZONE", 0, v21);
        v35[0] = (uint64_t)L"BEGIN:VTIMEZONE";
        int v8 = 1;
        if (v22)
        {
          UChar32 v24 = (icu::UnicodeString *)icu::UMemory::operator new(v35, (icu::UMemory *)0x40, v23);
          uint64_t v25 = v24;
          if (v24)
          {
            icu::UnicodeString::UnicodeString(v24, &v39);
          }
          else if (*(int *)a3 <= 0)
          {
            *a3 = U_MEMORY_ALLOCATION_ERROR;
          }
          icu::UVector::adoptElement(v7, v25, a3);
          uint64_t v26 = *(unsigned int *)a3;
          if ((int)v26 > 0) {
            goto LABEL_50;
          }
          int v8 = 0;
          if (v40) {
            __int16 v27 = 2;
          }
          else {
            __int16 v27 = v40 & 0x1F;
          }
          LOWORD(v40) = v27;
          int v9 = 1;
        }
      }
    }
  }
  if (!v9
    || (v37[1] = L"END:VTIMEZONE",
        int32_t v29 = u_strlen((const UChar *)L"END:VTIMEZONE"),
        BOOL v30 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v39, 0, v29, (uint64_t)L"END:VTIMEZONE", 0, v29),
        v37[0] = L"END:VTIMEZONE",
        long long v16 = v37,
        !v30))
  {
    uint64_t v26 = *(unsigned int *)a3;
    if ((int)v26 <= 0)
    {
      uint64_t v26 = 27;
      *a3 = U_INVALID_STATE_ERROR;
    }
    goto LABEL_50;
  }
LABEL_43:
  long long v31 = (icu::UnicodeString *)icu::UMemory::operator new(v16, (icu::UMemory *)0x40, v15);
  long long v32 = v31;
  if (v31)
  {
    icu::UnicodeString::UnicodeString(v31, &v39);
  }
  else if (*(int *)a3 <= 0)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  icu::UVector::adoptElement(v7, v32, a3);
  uint64_t v26 = *(unsigned int *)a3;
  if ((int)v26 >= 1)
  {
LABEL_50:
    icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)&v39);
    return (uint64_t *)(*((uint64_t (**)(void))*v7 + 1))(v7);
  }
  *((void *)v34 + 10) = v7;
  icu::VTimeZone::parse(v34, a3);
  return (uint64_t *)icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v39);
}

uint64_t icu::VTimeZone::getTZURL(icu::VTimeZone *this, UChar **a2)
{
  if (*((__int16 *)this + 48) < 0) {
    int v2 = *((_DWORD *)this + 25);
  }
  else {
    int v2 = *((unsigned __int16 *)this + 48) >> 5;
  }
  if (v2 < 1) {
    return 0;
  }
  icu::UnicodeString::operator=(a2, (UChar **)this + 11);
  return 1;
}

icu::UnicodeString *icu::VTimeZone::setTZURL(UChar **this, UChar **a2)
{
  return icu::UnicodeString::operator=(this + 11, a2);
}

uint64_t icu::VTimeZone::getLastModified(icu::VTimeZone *this, double *a2)
{
  double v2 = *((double *)this + 19);
  if (v2 == 1.83882169e17) {
    return 0;
  }
  *a2 = v2;
  return 1;
}

uint64_t icu::VTimeZone::setLastModified(uint64_t this, double a2)
{
  *(double *)(this + 152) = a2;
  return this;
}

icu::UVector *icu::VTimeZone::write(icu::VTimeZone *this, icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*((_WORD *)a2 + 4)) {
    __int16 v3 = 2;
  }
  else {
    __int16 v3 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v3;
  unsigned int v5 = a2;
  return icu::VTimeZone::write((uint64_t)this, (uint64_t *)&v5, (int *)a3);
}

icu::UVector *icu::VTimeZone::write(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  BOOL result = *(icu::UVector **)(a1 + 80);
  if (result)
  {
    if (*((int *)result + 2) >= 1)
    {
      for (signed int i = 0; i < *((_DWORD *)result + 2); ++i)
      {
        uint64_t v7 = icu::UVector::elementAt(result, i);
        v43[10] = "T";
        int32_t v8 = u_strlen((const UChar *)"T");
        if (icu::UnicodeString::doEqualsSubstring(v7, 0, v8, (uint64_t)"T", 0, v8))
        {
          int32_t v9 = u_strlen((const UChar *)"T");
          unsigned int v10 = *(unsigned __int16 *)(v7 + 8);
          if ((v10 & 0x8000) != 0) {
            unsigned int v11 = *(_DWORD *)(v7 + 12);
          }
          else {
            unsigned int v11 = v10 >> 5;
          }
          if (v11 <= v9)
          {
            v43[9] = "T";
          }
          else
          {
            if ((v10 & 2) != 0) {
              uint64_t v12 = v7 + 10;
            }
            else {
              uint64_t v12 = *(void *)(v7 + 24);
            }
            int v13 = *(unsigned __int16 *)(v12 + 2 * v9);
            v43[8] = "T";
            if (v13 == 58)
            {
              icu::UnicodeString::doAppend(*a2, (uint64_t)"T", 0, 0xFFFFFFFFLL);
              v43[7] = "T";
              uint64_t v14 = *a2;
              LOWORD(v47) = 58;
              icu::UnicodeString::doAppend(v14, (uint64_t)&v47, 0, 1);
              unsigned int v15 = *(unsigned __int16 *)(a1 + 96);
              int v16 = (__int16)v15;
              unsigned int v17 = v15 >> 5;
              if (v16 >= 0) {
                uint64_t v18 = v17;
              }
              else {
                uint64_t v18 = *(unsigned int *)(a1 + 100);
              }
              icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)(a1 + 88), 0, v18);
              icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
              _OWORD v43[6] = L"\r\n";
              goto LABEL_38;
            }
          }
        }
        else
        {
          v43[5] = "T";
        }
        _OWORD v43[4] = "L";
        int32_t v19 = u_strlen((const UChar *)"L");
        if (!icu::UnicodeString::doEqualsSubstring(v7, 0, v19, (uint64_t)"L", 0, v19)) {
          goto LABEL_34;
        }
        int32_t v20 = u_strlen((const UChar *)"L");
        unsigned int v21 = *(unsigned __int16 *)(v7 + 8);
        if ((v21 & 0x8000) != 0) {
          unsigned int v22 = *(_DWORD *)(v7 + 12);
        }
        else {
          unsigned int v22 = v21 >> 5;
        }
        if (v22 <= v20)
        {
          v43[3] = "L";
LABEL_34:
          unsigned int v27 = *(unsigned __int16 *)(v7 + 8);
          int v28 = (__int16)v27;
          unsigned int v29 = v27 >> 5;
          if (v28 >= 0) {
            uint64_t v30 = v29;
          }
          else {
            uint64_t v30 = *(unsigned int *)(v7 + 12);
          }
          icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)v7, 0, v30);
          icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
          goto LABEL_38;
        }
        if ((v21 & 2) != 0) {
          uint64_t v23 = v7 + 10;
        }
        else {
          uint64_t v23 = *(void *)(v7 + 24);
        }
        int v24 = *(unsigned __int16 *)(v23 + 2 * v20);
        v43[2] = "L";
        if (v24 != 58) {
          goto LABEL_34;
        }
        uint64_t v51 = 0;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v48 = 0u;
        int v47 = &unk_1EDA47700;
        LOWORD(v48) = 2;
        icu::UnicodeString::doAppend(*a2, (uint64_t)"L", 0, 0xFFFFFFFFLL);
        v43[1] = "L";
        uint64_t v25 = *a2;
        LOWORD(v44[0]) = 58;
        icu::UnicodeString::doAppend(v25, (uint64_t)v44, 0, 1);
        sub_18CA33958((uint64_t)&v47, *(double *)(a1 + 152));
        LOWORD(v44[0]) = 90;
        icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)v44, 0, 1);
        if ((v48 & 0x8000u) == 0) {
          uint64_t v26 = (unsigned __int16)v48 >> 5;
        }
        else {
          uint64_t v26 = DWORD1(v48);
        }
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v47, 0, v26);
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
        v43[0] = L"\r\n";
        icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v47);
LABEL_38:
        BOOL result = *(icu::UVector **)(a1 + 80);
      }
    }
  }
  else
  {
    long long v48 = 0u;
    uint64_t v51 = 0;
    long long v50 = 0u;
    long long v49 = 0u;
    int v47 = &unk_1EDA47700;
    LOWORD(v48) = 2;
    uint64_t v45 = 0;
    memset(v44, 0, sizeof(v44));
    icu::UVector::UVector((uint64_t)v44, 0, (uint64_t)uhash_compareUnicodeString, a3);
    unsigned int v32 = *(unsigned __int16 *)(a1 + 168);
    if (*(__int16 *)(a1 + 168) < 0) {
      int v33 = *(_DWORD *)(a1 + 172);
    }
    else {
      int v33 = v32 >> 5;
    }
    if (v33 >= 1)
    {
      int v34 = *(__int16 *)(a1 + 232) < 0 ? *(_DWORD *)(a1 + 236) : *(unsigned __int16 *)(a1 + 232) >> 5;
      if (v34 >= 1)
      {
        int v35 = (__int16)v32;
        unsigned int v36 = v32 >> 5;
        if (v35 >= 0) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = *(unsigned int *)(a1 + 172);
        }
        icu::UnicodeString::doAppend((uint64_t)&v47, (const icu::UnicodeString *)(a1 + 160), 0, v37);
        __int16 v46 = 91;
        icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v46, 0, 1);
        unsigned int v38 = *(unsigned __int16 *)(a1 + 232);
        int v39 = (__int16)v38;
        unsigned int v40 = v38 >> 5;
        if (v39 >= 0) {
          uint64_t v41 = v40;
        }
        else {
          uint64_t v41 = *(unsigned int *)(a1 + 236);
        }
        icu::UnicodeString::doAppend((uint64_t)&v47, (const icu::UnicodeString *)(a1 + 224), 0, v41);
        __int16 v46 = 93;
        icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v46, 0, 1);
        icu::UVector::addElement((icu::UVector *)v44, &v47, (UErrorCode *)a3);
      }
    }
    icu::VTimeZone::writeZone((void *)a1, a2, *(UChar ***)(a1 + 72), (icu::UVector *)v44, a3);
    icu::UVector::~UVector((icu::UVector *)v44);
    return (icu::UVector *)icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v47);
  }
  return result;
}

void icu::VTimeZone::write(icu::VTimeZone *this, double a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  if (*((_WORD *)a3 + 4)) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v4;
  unsigned int v5 = a3;
  icu::VTimeZone::write((uint64_t)this, (uint64_t *)&v5, (int *)a4, a2);
}

void icu::VTimeZone::write(uint64_t a1, uint64_t *a2, int *a3, double a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*a3 > 0) {
    return;
  }
  int v28 = 0;
  unsigned int v29 = 0;
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  icu::UVector::UVector((uint64_t)v26, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, a3);
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0u;
  unsigned int v32 = (UChar *)&unk_1EDA47700;
  LOWORD(v33) = 2;
  icu::BasicTimeZone::getTimeZoneRulesAfter((icu::BasicTimeZone *)a1, a4, &v29, &v28, (UErrorCode *)a3);
  int32_t v8 = v28;
  int32_t v9 = v29;
  unint64_t v10 = *a3;
  if ((int)v10 <= 0)
  {
    icu::UnicodeString::operator=(&v32, (UChar **)(a1 + 8));
    memset(v31, 0, sizeof(v31));
    icu::RuleBasedTimeZone::RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31, &v32, v9);
    if (v8)
    {
      while (*((_DWORD *)v8 + 2))
      {
        unsigned int v11 = (icu::TimeZoneRule *)icu::UVector::orphanElementAt(v8, 0);
        icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v31, v11, (UErrorCode *)a3);
        if (*a3 >= 1) {
          goto LABEL_25;
        }
      }
    }
    icu::RuleBasedTimeZone::complete((uint64_t)v31, (UErrorCode *)a3);
    if (*a3 > 0) {
      goto LABEL_25;
    }
    if (*(__int16 *)(a1 + 168) < 0) {
      int v13 = *(_DWORD *)(a1 + 172);
    }
    else {
      int v13 = *(unsigned __int16 *)(a1 + 168) >> 5;
    }
    if (v13 >= 1)
    {
      uint64_t v14 = *(__int16 *)(a1 + 232) < 0
          ? (uint64_t *)*(unsigned int *)(a1 + 236)
          : (uint64_t *)(*(unsigned __int16 *)(a1 + 232) >> 5);
      if ((int)v14 >= 1)
      {
        unsigned int v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v12);
        if (!v15)
        {
          *a3 = 7;
          goto LABEL_25;
        }
        int v16 = v15;
        uint64_t v17 = icu::UnicodeString::UnicodeString((uint64_t)v15, (uint64_t)"X");
        unsigned int v18 = *(unsigned __int16 *)(a1 + 168);
        int v19 = (__int16)v18;
        unsigned int v20 = v18 >> 5;
        if (v19 >= 0) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = *(unsigned int *)(a1 + 172);
        }
        icu::UnicodeString::doAppend(v17, (const icu::UnicodeString *)(a1 + 160), 0, v21);
        __int16 v30 = 91;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1);
        unsigned int v22 = *(unsigned __int16 *)(a1 + 232);
        int v23 = (__int16)v22;
        unsigned int v24 = v22 >> 5;
        if (v23 >= 0) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = *(unsigned int *)(a1 + 236);
        }
        icu::UnicodeString::doAppend((uint64_t)v16, (const icu::UnicodeString *)(a1 + 224), 0, v25);
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)"/", 0, 0xFFFFFFFFLL);
        sub_18CA324E4((uint64_t)v16, a4);
        __int16 v30 = 93;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1);
        icu::UVector::adoptElement((uint64_t (**)(void *))v26, v16, (UErrorCode *)a3);
        if (*a3 > 0) {
          goto LABEL_25;
        }
      }
    }
    icu::VTimeZone::writeZone((void *)a1, a2, (UChar **)v31, (icu::UVector *)v26, a3);
LABEL_25:
    icu::RuleBasedTimeZone::~RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31);
    int32_t v9 = 0;
  }
  if (v8) {
    (*(void (**)(icu::UVector *))(*(void *)v8 + 8))(v8);
  }
  if (v9) {
    (*(void (**)(icu::InitialTimeZoneRule *))(*(void *)v9 + 8))(v9);
  }
  icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v32);
  icu::UVector::~UVector((icu::UVector *)v26);
}

void icu::VTimeZone::writeSimple(UChar **this, double a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  if (*((_WORD *)a3 + 4)) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v4;
  unsigned int v5 = a3;
  icu::VTimeZone::writeSimple(this, (uint64_t *)&v5, (int *)a4, a2);
}

void icu::VTimeZone::writeSimple(UChar **a1, uint64_t *a2, int *a3, double a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*a3 > 0) {
    return;
  }
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  icu::UVector::UVector((uint64_t)v28, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, a3);
  long long v33 = 0u;
  uint64_t v36 = 0;
  long long v35 = 0u;
  long long v34 = 0u;
  unsigned int v32 = (UChar *)&unk_1EDA47700;
  LOWORD(v33) = 2;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  (*((void (**)(UChar **, icu::InitialTimeZoneRule **, icu::TimeZoneRule **, icu::TimeZoneRule **, int *, double))*a1
   + 19))(a1, &v27, &v26, &v25, a3, a4);
  int32_t v8 = v26;
  int32_t v9 = v27;
  unint64_t v10 = v25;
  unint64_t v11 = *a3;
  if ((int)v11 <= 0)
  {
    icu::UnicodeString::operator=(&v32, a1 + 1);
    memset(v31, 0, sizeof(v31));
    icu::RuleBasedTimeZone::RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31, &v32, v9);
    if (v8 && v10)
    {
      icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v31, v8, (UErrorCode *)a3);
      icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v31, v10, (UErrorCode *)a3);
      int32_t v8 = 0;
      unint64_t v10 = 0;
    }
    if (*a3 > 0) {
      goto LABEL_28;
    }
    if ((__int16)a1[21] < 0) {
      int v13 = *((_DWORD *)a1 + 43);
    }
    else {
      int v13 = *((unsigned __int16 *)a1 + 84) >> 5;
    }
    if (v13 >= 1)
    {
      uint64_t v14 = (__int16)a1[29] < 0
          ? (uint64_t *)*((unsigned int *)a1 + 59)
          : (uint64_t *)(*((unsigned __int16 *)a1 + 116) >> 5);
      if ((int)v14 >= 1)
      {
        unsigned int v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v12);
        if (!v15)
        {
          if (*a3 <= 0) {
            *a3 = 7;
          }
          goto LABEL_28;
        }
        int v16 = v15;
        icu::UnicodeString::UnicodeString((uint64_t)v15, (uint64_t)"X");
        if (*a3 > 0)
        {
          (*(void (**)(uint64_t *))(*v16 + 8))(v16);
LABEL_28:
          icu::RuleBasedTimeZone::~RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31);
          int32_t v9 = 0;
          goto LABEL_29;
        }
        unsigned int v17 = *((unsigned __int16 *)a1 + 84);
        int v18 = (__int16)v17;
        unsigned int v19 = v17 >> 5;
        if (v18 >= 0) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = *((unsigned int *)a1 + 43);
        }
        icu::UnicodeString::doAppend((uint64_t)v16, (const icu::UnicodeString *)(a1 + 20), 0, v20);
        __int16 v30 = 91;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1);
        unsigned int v21 = *((unsigned __int16 *)a1 + 116);
        int v22 = (__int16)v21;
        unsigned int v23 = v21 >> 5;
        if (v22 >= 0) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = *((unsigned int *)a1 + 59);
        }
        icu::UnicodeString::doAppend((uint64_t)v16, (const icu::UnicodeString *)(a1 + 28), 0, v24);
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)"/", 0, 0xFFFFFFFFLL);
        sub_18CA324E4((uint64_t)v16, a4);
        __int16 v30 = 93;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1);
        icu::UVector::adoptElement((uint64_t (**)(void *))v28, v16, (UErrorCode *)a3);
      }
    }
    icu::VTimeZone::writeZone(a1, a2, (UChar **)v31, (icu::UVector *)v28, a3);
    goto LABEL_28;
  }
LABEL_29:
  if (v10) {
    (*(void (**)(icu::TimeZoneRule *))(*(void *)v10 + 8))(v10);
  }
  if (v8) {
    (*(void (**)(icu::TimeZoneRule *))(*(void *)v8 + 8))(v8);
  }
  if (v9) {
    (*(void (**)(icu::InitialTimeZoneRule *))(*(void *)v9 + 8))(v9);
  }
  icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)&v32);
  icu::UVector::~UVector((icu::UVector *)v28);
}

icu::VTimeZone *icu::VTimeZone::clone@<X0>(icu::VTimeZone *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = (icu::VTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0x120, a2);
  if (result) {
    return icu::VTimeZone::VTimeZone(result, this);
  }
  return result;
}

uint64_t icu::VTimeZone::getOffset(icu::VTimeZone *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, UErrorCode *a8)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, UErrorCode *))(**((void **)this + 9) + 32))(*((void *)this + 9), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t icu::VTimeZone::getOffset(icu::VTimeZone *this, unsigned __int8 a2, int a3, int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 40))(*((void *)this + 9));
}

uint64_t icu::VTimeZone::getOffset(icu::VTimeZone *this, double a2, uint64_t a3, int *a4, int *a5, UErrorCode *a6)
{
  return (*(uint64_t (**)(void, uint64_t, int *, int *, UErrorCode *, double))(**((void **)this + 9) + 48))(*((void *)this + 9), a3, a4, a5, a6, a2);
}

uint64_t icu::VTimeZone::getOffsetFromLocal(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 160))();
}

uint64_t icu::VTimeZone::setRawOffset(icu::VTimeZone *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 56))();
}

uint64_t icu::VTimeZone::getRawOffset(icu::VTimeZone *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 64))();
}

uint64_t icu::VTimeZone::useDaylightTime(icu::VTimeZone *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 72))();
}

uint64_t icu::VTimeZone::inDaylightTime(icu::VTimeZone *this, double a2, UErrorCode *a3)
{
  return (*(uint64_t (**)(void, UErrorCode *, double))(**((void **)this + 9) + 80))(*((void *)this + 9), a3, a2);
}

uint64_t icu::VTimeZone::hasSameRules(icu::VTimeZone *this, const icu::TimeZone *a2)
{
  return (*(uint64_t (**)(void, const icu::TimeZone *))(**((void **)this + 9) + 88))(*((void *)this + 9), a2);
}

uint64_t icu::VTimeZone::getNextTransition(icu::VTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  return (*(uint64_t (**)(void, uint64_t, icu::TimeZoneTransition *, double))(**((void **)this + 9) + 112))(*((void *)this + 9), a3, a4, a2);
}

uint64_t icu::VTimeZone::getPreviousTransition(icu::VTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  return (*(uint64_t (**)(void, uint64_t, icu::TimeZoneTransition *, double))(**((void **)this + 9) + 120))(*((void *)this + 9), a3, a4, a2);
}

uint64_t icu::VTimeZone::countTransitionRules(icu::VTimeZone *this, UErrorCode *a2)
{
  return (*(uint64_t (**)(void, UErrorCode *))(**((void **)this + 9) + 136))(*((void *)this + 9), a2);
}

uint64_t icu::VTimeZone::getTimeZoneRules(icu::VTimeZone *this, const icu::InitialTimeZoneRule **a2, const icu::TimeZoneRule **a3, int *a4, UErrorCode *a5)
{
  return (*(uint64_t (**)(void, const icu::InitialTimeZoneRule **, const icu::TimeZoneRule **, int *, UErrorCode *))(**((void **)this + 9) + 144))(*((void *)this + 9), a2, a3, a4, a5);
}

void *icu::VTimeZone::parse(void *this, UErrorCode *a2)
{
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 <= 0)
  {
    uint64_t v3 = (uint64_t)this;
    uint64_t v4 = this[10];
    if (v4 && *(_DWORD *)(v4 + 8))
    {
      long long v176 = 0u;
      uint64_t v179 = 0;
      long long v178 = 0u;
      long long v177 = 0u;
      uint64_t v174 = 0;
      int v175 = (UChar *)&unk_1EDA47700;
      LOWORD(v176) = 2;
      long long v171 = 0u;
      long long v173 = 0u;
      long long v172 = 0u;
      UChar32 v170 = &unk_1EDA47700;
      LOWORD(v171) = 2;
      long long v166 = 0u;
      uint64_t v169 = 0;
      long long v168 = 0u;
      long long v167 = 0u;
      int v165 = &unk_1EDA47700;
      LOWORD(v166) = 2;
      long long v161 = 0u;
      uint64_t v164 = 0;
      long long v163 = 0u;
      long long v162 = 0u;
      int v160 = (UChar *)&unk_1EDA47700;
      LOWORD(v161) = 2;
      long long v156 = 0u;
      uint64_t v159 = 0;
      long long v158 = 0u;
      long long v157 = 0u;
      int v155 = &unk_1EDA47700;
      LOWORD(v156) = 2;
      long long v151 = 0u;
      uint64_t v154 = 0;
      long long v153 = 0u;
      long long v152 = 0u;
      uint64_t v149 = 0;
      uint64_t v150 = &unk_1EDA47700;
      LOWORD(v151) = 2;
      long long v147 = 0u;
      long long v148 = 0u;
      long long v146 = 0u;
      int32x4_t v145 = (UChar *)&unk_1EDA47700;
      LOWORD(v146) = 2;
      memset(v139, 0, sizeof(v139));
      icu::UVector::UVector((uint64_t)v139, (uint64_t)uprv_deleteUObject, 0, (int *)a2);
      memset(v138, 0, 40);
      icu::UVector::UVector((uint64_t)v138, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)a2);
      if (*(int *)a2 > 0) {
        goto LABEL_5;
      }
      unint64_t v12 = *(int **)(v3 + 80);
      if (v12[2] < 1)
      {
        unint64_t v127 = 0;
LABEL_188:
        if (!LODWORD(v139[1])) {
          goto LABEL_5;
        }
        sub_18CA30D1C(&v175, 0, &v160);
        long long v82 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new(v81, (icu::UMemory *)0x50, v80);
        if (!v82)
        {
          if (*(int *)a2 <= 0) {
            *a2 = U_MEMORY_ALLOCATION_ERROR;
          }
          goto LABEL_5;
        }
        long long v83 = v82;
        icu::InitialTimeZoneRule::InitialTimeZoneRule(v82, &v160, SHIDWORD(v127), v127);
        uint64_t v85 = (uint64_t *)*(unsigned int *)a2;
        if ((int)v85 <= 0)
        {
          int v86 = (icu::RuleBasedTimeZone *)icu::UMemory::operator new(v85, (icu::UMemory *)0x70, v84);
          if (v86)
          {
            int v87 = (uint64_t *)v86;
            icu::RuleBasedTimeZone::RuleBasedTimeZone(v86, &v175, v83);
            if (*(int *)a2 <= 0)
            {
              if (SLODWORD(v139[1]) < 1) {
                goto LABEL_212;
              }
              signed int v88 = 0;
              int v89 = 0;
              unsigned int v90 = -1;
              do
              {
                long long v91 = (const void *)icu::UVector::elementAt((icu::UVector *)v139, v88);
                if (v91)
                {
                  if (v92)
                  {
                    if (icu::AnnualTimeZoneRule::getEndYear(v92) == 0x7FFFFFFF)
                    {
                      unsigned int v90 = v88;
                      ++v89;
                    }
                  }
                }
                ++v88;
              }
              while (v88 < SLODWORD(v139[1]));
              if (v89 < 3)
              {
                if (v89 != 1) {
                  goto LABEL_212;
                }
                if (LODWORD(v139[1]) == 1)
                {
                  icu::UVector::removeAllElements((uint64_t)v139);
                  goto LABEL_212;
                }
                long long v94 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)v139, v90);
                uint64_t RawOffset = icu::TimeZoneRule::getRawOffset(v94);
                uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(v94);
                double v133 = 0.0;
                int v126 = (UChar **)v94;
                (*(void (**)(icu::TimeZoneRule *, void, void, double *))(*(void *)v94 + 56))(v94, HIDWORD(v127), v127, &v133);
                double v98 = v133;
                double v132 = v133;
                signed int v99 = (signed int)v139[1];
                double v100 = v133;
                if (SLODWORD(v139[1]) >= 1)
                {
                  signed int v101 = 0;
                  do
                  {
                    if (v90 != v101)
                    {
                      long long v102 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)v139, v101);
                      *(double *)&uint64_t v140 = 0.0;
                      (*(void (**)(icu::TimeZoneRule *, uint64_t, uint64_t, void **))(*(void *)v102 + 64))(v102, RawOffset, DSTSavings, &v140);
                      uint64_t v103 = v140;
                      if (*(double *)&v140 > v132)
                      {
                        uint64_t v104 = DSTSavings;
                        uint64_t v105 = RawOffset;
                        uint64_t v106 = icu::TimeZoneRule::getRawOffset(v102);
                        uint64_t v107 = icu::TimeZoneRule::getDSTSavings(v102);
                        uint64_t v108 = v106;
                        uint64_t RawOffset = v105;
                        uint64_t DSTSavings = v104;
                        (*((void (**)(UChar **, uint64_t, uint64_t, void, double *, double))*v126 + 9))(v126, v108, v107, 0, &v132, *(double *)&v103);
                      }
                      signed int v99 = (signed int)v139[1];
                    }
                    ++v101;
                  }
                  while (v101 < v99);
                  double v100 = v132;
                  double v98 = v133;
                }
                int v131 = 0;
                uint64_t v144 = 0;
                long long v142 = 0u;
                long long v143 = 0u;
                long long v141 = 0u;
                *(double *)&uint64_t v140 = COERCE_DOUBLE(&unk_1EDA47700);
                LOWORD(v141) = 2;
                if (v100 == v98)
                {
                  uint64_t v109 = icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0x160, v97);
                  if (v109)
                  {
                    Name = icu::TimeZoneRule::getName(v126, (UChar **)&v140);
                    uint64_t v111 = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v126);
                    uint64_t v112 = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v126);
                    icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(v109, Name, v111, v112, &v133, 1, 2);
                  }
                }
                else
                {
                  uint64_t v129 = 0;
                  *(void *)uint64_t v130 = 0;
                  uint64_t v128 = 0;
                  sub_18C93E568(&v130[1], v130, (_DWORD *)&v129 + 1, (int *)&v129, (int *)&v128 + 1, &v128, v100);
                  uint64_t v109 = icu::UMemory::operator new(v114, (icu::UMemory *)0x60, v113);
                  if (v109)
                  {
                    uint64_t v115 = icu::TimeZoneRule::getName(v126, (UChar **)&v140);
                    int v116 = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v126);
                    int v117 = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v126);
                    uint64_t Rule = (const icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule((icu::AnnualTimeZoneRule *)v126);
                    Startuint64_t Year = icu::AnnualTimeZoneRule::getStartYear((icu::AnnualTimeZoneRule *)v126);
                    icu::AnnualTimeZoneRule::AnnualTimeZoneRule((icu::AnnualTimeZoneRule *)v109, (const icu::UnicodeString *)v115, v116, v117, Rule, StartYear, v130[1]);
                  }
                }
                sub_18C7F5A70((uint64_t)&v131, (uint64_t)v109, (int *)a2);
                int v120 = (void *)*(unsigned int *)a2;
                if ((int)v120 <= 0)
                {
                  icu::UVector::removeElementAt((uint64_t (**)(void))v139, v90);
                  uint64_t v121 = v131;
                  int v131 = 0;
                  icu::UVector::adoptElement(v139, v121, a2);
                  int v122 = *a2;
                  icu::UnicodeString::~UnicodeString(v123, (icu::UnicodeString *)&v140);
                  if (v131) {
                    (*(void (**)(void *))(*(void *)v131 + 8))(v131);
                  }
                  if (v122 <= 0)
                  {
LABEL_212:
                    while (LODWORD(v139[1]))
                    {
                      long long v93 = (icu::TimeZoneRule *)icu::UVector::orphanElementAt((icu::UVector *)v139, 0);
                      icu::RuleBasedTimeZone::addTransitionRule(v87, v93, a2);
                      if (*(int *)a2 >= 1) {
                        goto LABEL_216;
                      }
                    }
                    icu::RuleBasedTimeZone::complete((uint64_t)v87, a2);
                    if (*(int *)a2 <= 0)
                    {
                      *(void *)(v3 + 72) = v87;
                      icu::UnicodeString::operator=((UChar **)(v3 + 8), &v175);
                      goto LABEL_5;
                    }
                  }
                }
                else
                {
                  icu::UnicodeString::~UnicodeString(v120, (icu::UnicodeString *)&v140);
                  if (v131) {
                    (*(void (**)(void *))(*(void *)v131 + 8))(v131);
                  }
                }
LABEL_216:
                long long v83 = 0;
              }
              else
              {
                long long v83 = 0;
                *a2 = U_ILLEGAL_ARGUMENT_ERROR;
              }
            }
            (*(void (**)(uint64_t *))(*v87 + 8))(v87);
            if (!v83) {
              goto LABEL_5;
            }
          }
          else if (*(int *)a2 <= 0)
          {
            *a2 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
        (*(void (**)(icu::InitialTimeZoneRule *))(*(void *)v83 + 8))(v83);
LABEL_5:
        icu::UVector::~UVector((icu::UVector *)v138);
        icu::UVector::~UVector((icu::UVector *)v139);
        icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v145);
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v150);
        icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v155);
        icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v160);
        icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v165);
        icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v170);
        return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v175);
      }
      int v13 = 0;
      signed int v14 = 0;
      BOOL v124 = 0;
      unint64_t v127 = 0;
      unsigned int v125 = 0;
      double v15 = 1.83882169e17;
      while (1)
      {
        uint64_t v16 = icu::UVector::elementAt((icu::UVector *)v12, v14);
        uint64_t v17 = v16;
        unsigned int v18 = *(unsigned __int16 *)(v16 + 8);
        if ((v18 & 0x8000) != 0) {
          int32_t v19 = *(_DWORD *)(v16 + 12);
        }
        else {
          int32_t v19 = v18 >> 5;
        }
        uint64_t v20 = icu::UnicodeString::doIndexOf(v16, 0x3Au, 0, v19);
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_113;
        }
        uint64_t v21 = v20;
        icu::UnicodeString::unBogus((uint64_t)&v150);
        if ((v151 & 0x8000u) == 0) {
          uint64_t v22 = (unsigned __int16)v151 >> 5;
        }
        else {
          uint64_t v22 = DWORD1(v151);
        }
        icu::UnicodeString::doReplace((icu::UnicodeString *)&v150, 0, v22, (const icu::UnicodeString *)v17, 0, v21);
        int v23 = v21 + 1;
        icu::UnicodeString::unBogus((uint64_t)&v145);
        unsigned int v24 = *(unsigned __int16 *)(v17 + 8);
        if (*(__int16 *)(v17 + 8) < 0)
        {
          int v25 = *(_DWORD *)(v17 + 12);
          if (v25 > (int)v21) {
            goto LABEL_22;
          }
        }
        else
        {
          if (v21 < v24 >> 5) {
            goto LABEL_22;
          }
          int v25 = v24 >> 5;
        }
        int v23 = v25;
LABEL_22:
        int v26 = (__int16)v24;
        if ((v146 & 0x8000u) == 0) {
          uint64_t v27 = (unsigned __int16)v146 >> 5;
        }
        else {
          uint64_t v27 = DWORD1(v146);
        }
        unsigned int v28 = v24 >> 5;
        if (v26 < 0) {
          unsigned int v28 = *(_DWORD *)(v17 + 12);
        }
        icu::UnicodeString::doReplace((icu::UnicodeString *)&v145, 0, v27, (const icu::UnicodeString *)v17, v23, v28 - v23);
        if (v13 == 2)
        {
          if ((v151 & 0x8000u) == 0) {
            int32_t v30 = (unsigned __int16)v151 >> 5;
          }
          else {
            int32_t v30 = DWORD1(v151);
          }
          if (!icu::UnicodeString::doCompare((uint64_t)&v150, 0, v30, (uint64_t)"D", 0, -1))
          {
            uint64_t v51 = &v155;
            goto LABEL_111;
          }
          if ((v151 & 0x8000u) == 0) {
            int32_t v31 = (unsigned __int16)v151 >> 5;
          }
          else {
            int32_t v31 = DWORD1(v151);
          }
          if (!icu::UnicodeString::doCompare((uint64_t)&v150, 0, v31, (uint64_t)"T", 0, -1))
          {
            uint64_t v51 = (void **)&v160;
            goto LABEL_111;
          }
          if ((v151 & 0x8000u) == 0) {
            int32_t v32 = (unsigned __int16)v151 >> 5;
          }
          else {
            int32_t v32 = DWORD1(v151);
          }
          if (!icu::UnicodeString::doCompare((uint64_t)&v150, 0, v32, (uint64_t)L"TZOFFSETFROM", 0, -1))
          {
            uint64_t v51 = &v170;
            goto LABEL_111;
          }
          if ((v151 & 0x8000u) == 0) {
            int32_t v33 = (unsigned __int16)v151 >> 5;
          }
          else {
            int32_t v33 = DWORD1(v151);
          }
          if (!icu::UnicodeString::doCompare((uint64_t)&v150, 0, v33, (uint64_t)"T", 0, -1))
          {
            uint64_t v51 = &v165;
LABEL_111:
            icu::UnicodeString::operator=((UChar **)v51, &v145);
LABEL_112:
            int v13 = 2;
            goto LABEL_113;
          }
          if ((v151 & 0x8000u) == 0) {
            int32_t v34 = (unsigned __int16)v151 >> 5;
          }
          else {
            int32_t v34 = DWORD1(v151);
          }
          if (!icu::UnicodeString::doCompare((uint64_t)&v150, 0, v34, (uint64_t)L"RDATE", 0, -1))
          {
            if (v125) {
              goto LABEL_5;
            }
            int v58 = 0;
            *(double *)&uint64_t v140 = 0.0;
            int v59 = 1;
            while (v59)
            {
              if (v58 < 0)
              {
                int v61 = 0;
                if ((v146 & 0x8000) != 0) {
                  unsigned int v60 = DWORD1(v146);
                }
                else {
                  unsigned int v60 = (unsigned __int16)v146 >> 5;
                }
              }
              else if ((v146 & 0x8000) != 0)
              {
                unsigned int v60 = DWORD1(v146);
                if (SDWORD1(v146) >= v58) {
                  int v61 = v58;
                }
                else {
                  int v61 = DWORD1(v146);
                }
              }
              else
              {
                unsigned int v60 = (unsigned __int16)v146 >> 5;
                if (v60 >= v58) {
                  int v61 = v58;
                }
                else {
                  int v61 = (unsigned __int16)v146 >> 5;
                }
              }
              int v62 = icu::UnicodeString::doIndexOf((uint64_t)&v145, 0x2Cu, v61, v60 - v61);
              int v65 = (icu::UnicodeString *)icu::UMemory::operator new(v64, (icu::UMemory *)0x40, v63);
              uint64_t v66 = (uint64_t)v65;
              if (v62 == -1)
              {
                if (v65) {
                  icu::UnicodeString::UnicodeString(v65, (const icu::UnicodeString *)&v145, v58);
                }
                int v59 = 0;
              }
              else
              {
                if (v65) {
                  icu::UnicodeString::UnicodeString(v65, (const icu::UnicodeString *)&v145, v58, (v62 - v58));
                }
                int v59 = 1;
              }
              sub_18C7F5A70((uint64_t)&v140, v66, (int *)a2);
              uint64_t v67 = v140;
              *(double *)&uint64_t v140 = 0.0;
              icu::UVector::adoptElement(v138, v67, a2);
              int v58 = v62 + 1;
              if (*(int *)a2 >= 1)
              {
                if (*(double *)&v140 != 0.0) {
                  (*(void (**)(void *))(*(void *)v140 + 8))(v140);
                }
                goto LABEL_5;
              }
            }
            if (*(double *)&v140 != 0.0) {
              (*(void (**)(void *))(*(void *)v140 + 8))(v140);
            }
            unsigned int v125 = 0;
            goto LABEL_112;
          }
          int v135 = L"RRULE";
          if (sub_18C7EFDE8((uint64_t)&v150, (uint64_t *)&v135, -1))
          {
            uint64_t v134 = "E";
            if (sub_18C7EFDE8((uint64_t)&v150, (uint64_t *)&v134, -1)) {
              goto LABEL_112;
            }
            int v36 = (unsigned __int16)v156 >> 5;
            if ((v156 & 0x8000u) != 0) {
              int v36 = DWORD1(v156);
            }
            if (!v36) {
              goto LABEL_5;
            }
            int v37 = (unsigned __int16)v171 >> 5;
            if ((v171 & 0x8000u) != 0) {
              int v37 = DWORD1(v171);
            }
            if (!v37) {
              goto LABEL_5;
            }
            int v38 = (unsigned __int16)v166 >> 5;
            if ((v166 & 0x8000u) != 0) {
              int v38 = DWORD1(v166);
            }
            if (!v38) {
              goto LABEL_5;
            }
            int v39 = (unsigned __int16)v161 >> 5;
            if ((v161 & 0x8000u) != 0) {
              int v39 = DWORD1(v161);
            }
            if (!v39) {
              sub_18CA30D1C(&v175, v124, &v160);
            }
            *(double *)&uint64_t v140 = 0.0;
            uint64_t v40 = sub_18CA30E40((uint64_t)&v170, (int *)a2);
            uint64_t v41 = sub_18CA30E40((uint64_t)&v165, (int *)a2);
            if (*(int *)a2 >= 1) {
              goto LABEL_5;
            }
            int v42 = v41;
            if (v124)
            {
              unint64_t v43 = (int)v41 <= (int)v40 ? (v41 - 3600000) : v40;
              uint64_t v44 = (int)v41 <= (int)v40 ? 3600000 : (v41 - v40);
            }
            else
            {
              uint64_t v44 = 0;
              unint64_t v43 = v41;
            }
            v71.n128_f64[0] = sub_18CA30AA0((uint64_t)&v155, v40, (int *)a2);
            if (*(int *)a2 <= 0
              && ((double v133 = 1.83882169e17, !v125)
                ? (int32_t v72 = sub_18CA3152C((uint64_t)&v160, v43, v44, (int *)v138, v40, (int *)a2, v71.n128_f64[0]))
                : (int32_t v72 = sub_18CA30F5C(&v160, v43, v44, (icu::UVector *)v138, v40, (int *)a2, v71.n128_f64[0])),
                  sub_18C7F5A70((uint64_t)&v140, (uint64_t)v72, (int *)a2),
                  *(int *)a2 <= 0))
            {
              if ((*(unsigned int (**)(void *, uint64_t, void, double *))(*(void *)v140 + 56))(v140, v40, 0, &v133)&& v133 < v15)
              {
                BOOL v74 = (int)v44 < 1;
                BOOL v75 = v40 - v42 == 3600000;
                BOOL v76 = !v74 || !v75;
                if (v74 && v75) {
                  unsigned int v77 = v40 - 3600000;
                }
                else {
                  unsigned int v77 = v40;
                }
                if (v76) {
                  int v78 = 0;
                }
                else {
                  int v78 = 3600000;
                }
                unint64_t v127 = __PAIR64__(v77, v78);
                double v15 = v133;
              }
              uint64_t v79 = v140;
              *(double *)&uint64_t v140 = 0.0;
              icu::UVector::adoptElement(v139, v79, a2);
              BOOL v73 = *a2 > U_ZERO_ERROR;
              int v13 = *(int *)a2 <= 0 ? 1 : 2;
            }
            else
            {
              int v13 = 2;
              BOOL v73 = 1;
            }
            if (*(double *)&v140 != 0.0) {
              (*(void (**)(void *, __n128))(*(void *)v140 + 8))(v140, v71);
            }
            if (v73) {
              goto LABEL_5;
            }
          }
          else
          {
            BOOL v68 = (uint64_t *)v125;
            if (!v125)
            {
              BOOL v68 = (uint64_t *)LODWORD(v138[1]);
              if (LODWORD(v138[1])) {
                goto LABEL_5;
              }
            }
            UErrorCode v69 = (icu::UnicodeString *)icu::UMemory::operator new(v68, (icu::UMemory *)0x40, v35);
            int32_t v70 = v69;
            if (v69)
            {
              icu::UnicodeString::UnicodeString(v69, &v145);
            }
            else if (*(int *)a2 <= 0)
            {
              *a2 = U_MEMORY_ALLOCATION_ERROR;
            }
            icu::UVector::adoptElement(v138, v70, a2);
            if (*(int *)a2 >= 1) {
              goto LABEL_5;
            }
            int v13 = 2;
            unsigned int v125 = 1;
          }
        }
        else
        {
          if (v13 != 1)
          {
            if ((v151 & 0x8000u) == 0) {
              int32_t v29 = (unsigned __int16)v151 >> 5;
            }
            else {
              int32_t v29 = DWORD1(v151);
            }
            if (icu::UnicodeString::doCompare((uint64_t)&v150, 0, v29, (uint64_t)L"BEGIN", 0, -1))
            {
              int v13 = 0;
            }
            else
            {
              if ((v146 & 0x8000u) == 0) {
                int32_t v50 = (unsigned __int16)v146 >> 5;
              }
              else {
                int32_t v50 = DWORD1(v146);
              }
              int v13 = icu::UnicodeString::doCompare((uint64_t)&v145, 0, v50, (uint64_t)L"VTIMEZONE", 0, -1) == 0;
            }
            goto LABEL_113;
          }
          if ((v151 & 0x8000u) == 0) {
            int32_t v45 = (unsigned __int16)v151 >> 5;
          }
          else {
            int32_t v45 = DWORD1(v151);
          }
          if (!icu::UnicodeString::doCompare((uint64_t)&v150, 0, v45, (uint64_t)L"TZID", 0, -1))
          {
            uint64_t v52 = &v175;
            goto LABEL_105;
          }
          if ((v151 & 0x8000u) == 0) {
            int32_t v46 = (unsigned __int16)v151 >> 5;
          }
          else {
            int32_t v46 = DWORD1(v151);
          }
          if (!icu::UnicodeString::doCompare((uint64_t)&v150, 0, v46, (uint64_t)"T", 0, -1))
          {
            uint64_t v52 = (UChar **)(v3 + 88);
LABEL_105:
            icu::UnicodeString::operator=(v52, &v145);
LABEL_106:
            int v13 = 1;
            goto LABEL_113;
          }
          if ((v151 & 0x8000u) == 0) {
            int32_t v47 = (unsigned __int16)v151 >> 5;
          }
          else {
            int32_t v47 = DWORD1(v151);
          }
          if (!icu::UnicodeString::doCompare((uint64_t)&v150, 0, v47, (uint64_t)"L", 0, -1))
          {
            *(double *)(v3 + 152) = sub_18CA30AA0((uint64_t)&v145, 0, (int *)a2);
            if (*(int *)a2 >= 1) {
              goto LABEL_5;
            }
            goto LABEL_106;
          }
          if ((v151 & 0x8000u) == 0) {
            int32_t v48 = (unsigned __int16)v151 >> 5;
          }
          else {
            int32_t v48 = DWORD1(v151);
          }
          if (icu::UnicodeString::doCompare((uint64_t)&v150, 0, v48, (uint64_t)L"BEGIN", 0, -1))
          {
            if ((v151 & 0x8000u) == 0) {
              int32_t v49 = (unsigned __int16)v151 >> 5;
            }
            else {
              int32_t v49 = DWORD1(v151);
            }
            icu::UnicodeString::doCompare((uint64_t)&v150, 0, v49, (uint64_t)"E", 0, -1);
            goto LABEL_106;
          }
          uint64_t v137 = "D";
          int v53 = sub_18C7EFDE8((uint64_t)&v145, (uint64_t *)&v137, -1);
          BOOL v124 = v53 == 0;
          unsigned int v136 = L"STANDARD";
          if (sub_18C7EFDE8((uint64_t)&v145, (uint64_t *)&v136, -1) && v53) {
            goto LABEL_5;
          }
          int v54 = (unsigned __int16)v176 >> 5;
          if ((v176 & 0x8000u) != 0) {
            int v54 = DWORD1(v176);
          }
          if (!v54) {
            goto LABEL_5;
          }
          if (LODWORD(v138[1])) {
            icu::UVector::removeAllElements((uint64_t)v138);
          }
          unsigned int v125 = 0;
          int v13 = 2;
          if (v171) {
            __int16 v55 = 2;
          }
          else {
            __int16 v55 = v171 & 0x1F;
          }
          LOWORD(v171) = v55;
          __int16 v56 = v166 & 0x1F;
          if (v166) {
            __int16 v56 = 2;
          }
          LOWORD(v166) = v56;
          __int16 v57 = v161 & 0x1F;
          if (v161) {
            __int16 v57 = 2;
          }
          LOWORD(v161) = v57;
        }
LABEL_113:
        ++v14;
        unint64_t v12 = *(int **)(v3 + 80);
        if (v14 >= v12[2]) {
          goto LABEL_188;
        }
      }
    }
    *a2 = U_INVALID_STATE_ERROR;
  }
  return this;
}

double sub_18CA30AA0(uint64_t a1, int a2, int *a3)
{
  double v3 = 0.0;
  if (*a3 <= 0)
  {
    unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
    if (*(__int16 *)(a1 + 8) < 0) {
      unsigned int v8 = *(_DWORD *)(a1 + 12);
    }
    else {
      unsigned int v8 = v7 >> 5;
    }
    if (v8 - 17 < 0xFFFFFFFE) {
      goto LABEL_15;
    }
    uint64_t v9 = a1 + 10;
    if ((v7 & 2) == 0) {
      uint64_t v9 = *(void *)(a1 + 24);
    }
    if (*(_WORD *)(v9 + 16) != 84) {
      goto LABEL_15;
    }
    if (v8 == 16)
    {
      int v10 = (__int16)v7;
      unsigned int v11 = v7 >> 5;
      if (v10 < 0) {
        unsigned int v11 = *(_DWORD *)(a1 + 12);
      }
      if (v11 < 0x10 || *(_WORD *)(v9 + 30) != 90) {
        goto LABEL_15;
      }
    }
    int v12 = sub_18CA3493C(a1, 0, 4, a3);
    int v13 = sub_18CA3493C(a1, 4u, 2, a3);
    int v14 = sub_18CA3493C(a1, 6u, 2, a3);
    int v15 = sub_18CA3493C(a1, 9u, 2, a3);
    int v16 = sub_18CA3493C(a1, 0xBu, 2, a3);
    int v17 = sub_18CA3493C(a1, 0xDu, 2, a3);
    if (*a3 > 0
      || ((v12 & 3) == 0
        ? ((HIDWORD(v21) = -1030792151 * v12 + 85899344,
            LODWORD(v21) = HIDWORD(v21),
            unsigned int v20 = v21 >> 2,
            LODWORD(v21) = HIDWORD(v21),
            (v21 >> 4) >= 0xA3D70B)
         ? (int v22 = 0)
         : (int v22 = 12),
           v20 <= 0x28F5C28 ? (unsigned int v19 = v22) : (unsigned int v19 = 12))
        : (unsigned int v19 = 0),
          v12 < 0
       || v13 < 1
       || v13 > 12
       || v14 < 1
       || v14 > byte_18CA934D0[v19 + (unint64_t)(v13 - 1)]
       || v15 < 0
       || v15 > 23
       || v16 < 0
       || v16 > 59
       || v17 < 0
       || v17 >= 60))
    {
LABEL_15:
      *a3 = 3;
    }
    else
    {
      double v23 = sub_18C93E22C(v12, v13 - 1, v14) * 86400000.0 + (double)(3600000 * v15 + 60000 * v16 + 1000 * v17);
      double v24 = (double)a2;
      if (v8 == 16) {
        double v24 = 0.0;
      }
      return v23 - v24;
    }
  }
  return v3;
}

void *sub_18CA30D1C(UChar **a1, int a2, UChar **a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  icu::UnicodeString::operator=(a3, a1);
  if (a2)
  {
    unsigned int v11 = L"(DST)";
    icu::UnicodeString::UnicodeString(v12, 1, &v11);
    if ((v13 & 0x8000u) == 0) {
      uint64_t v5 = v13 >> 5;
    }
    else {
      uint64_t v5 = v14;
    }
    icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)v12, 0, v5);
    return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
  }
  else
  {
    int v10 = L"(STD)";
    icu::UnicodeString::UnicodeString(v12, 1, &v10);
    if ((v13 & 0x8000u) == 0) {
      uint64_t v8 = v13 >> 5;
    }
    else {
      uint64_t v8 = v14;
    }
    icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)v12, 0, v8);
    return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
  }
}

uint64_t sub_18CA30E40(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0) {
    unsigned int v6 = *(_DWORD *)(a1 + 12);
  }
  else {
    unsigned int v6 = v5 >> 5;
  }
  if ((v6 & 0xFFFFFFFD) != 5) {
    goto LABEL_18;
  }
  if ((v5 & 2) != 0) {
    unsigned int v7 = (unsigned __int16 *)(a1 + 10);
  }
  else {
    unsigned int v7 = *(unsigned __int16 **)(a1 + 24);
  }
  int v8 = *v7;
  if (v8 == 43)
  {
    int v9 = 1000;
  }
  else
  {
    if (v8 != 45)
    {
LABEL_18:
      uint64_t result = 0;
      *a2 = 3;
      return result;
    }
    int v9 = -1000;
  }
  int v10 = sub_18CA3493C(a1, 1u, 2, a2);
  int v11 = sub_18CA3493C(a1, 3u, 2, a2);
  if (v6 == 7) {
    int v12 = sub_18CA3493C(a1, 5u, 2, a2);
  }
  else {
    int v12 = 0;
  }
  if (*a2 >= 1) {
    goto LABEL_18;
  }
  return (v9 * (v12 + 60 * (v11 + 60 * v10)));
}

icu::AnnualTimeZoneRule *sub_18CA30F5C(UChar **a1, int a2, int a3, icu::UVector *this, int a5, int *a6, double a7)
{
  v73[9] = *(UChar **)MEMORY[0x1E4F143B8];
  if (*a6 > 0) {
    return 0;
  }
  if (!this || !*((_DWORD *)this + 2))
  {
    unsigned int v7 = 0;
    *a6 = 1;
    return v7;
  }
  memset(v73, 0, 64);
  uint64_t v15 = (UChar **)icu::UVector::elementAt(this, 0);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v73, v15);
  uint64_t v68 = 0;
  memset(v71, 0, sizeof(v71));
  int v72 = 0;
  int v66 = 7;
  int v67 = 0;
  double v65 = 0.0;
  sub_18CA34AB8(v73, (_DWORD *)&v68 + 1, &v68, &v67, (uint64_t)v71, &v66, &v65, a6);
  unsigned int v7 = 0;
  uint64_t v16 = *a6;
  if ((int)v16 > 0) {
    goto LABEL_105;
  }
  int v17 = *((_DWORD *)this + 2);
  if (v17 != 1)
  {
    if (v17 > 7) {
      goto LABEL_104;
    }
    int v56 = HIDWORD(v68);
    if (HIDWORD(v68) == -1) {
      goto LABEL_104;
    }
    int v54 = v68;
    if (!v68) {
      goto LABEL_104;
    }
    int v24 = v66;
    if (!v66) {
      goto LABEL_104;
    }
    if (v66 < 1)
    {
      int v20 = 31;
    }
    else
    {
      int v20 = 31;
      int v25 = (int *)v71;
      uint64_t v26 = v66;
      do
      {
        int v28 = *v25++;
        int v27 = v28;
        if (v28 <= 0) {
          v27 += dword_18CA98814[SHIDWORD(v68)] + 1;
        }
        if (v27 < v20) {
          int v20 = v27;
        }
        --v26;
      }
      while (v26);
    }
    double v29 = v65;
    if (v17 <= 1)
    {
      int v55 = HIDWORD(v68);
LABEL_76:
      double v65 = v29;
      int v18 = v55;
      if (v24 != 7) {
        goto LABEL_104;
      }
      goto LABEL_77;
    }
    unsigned int v30 = 1;
    int v53 = -1;
    int v55 = HIDWORD(v68);
    while (1)
    {
      int32_t v31 = (UChar **)icu::UVector::elementAt(this, v30);
      icu::UnicodeString::operator=(v73, v31);
      uint64_t v63 = 0;
      double v64 = 0.0;
      memset(v69, 0, sizeof(v69));
      int v70 = 0;
      unsigned int v61 = 7;
      sub_18CA34AB8(v73, (_DWORD *)&v63 + 1, &v63, &v62, (uint64_t)v69, (int *)&v61, &v64, a6);
      uint64_t v16 = *a6;
      if ((int)v16 > 0)
      {
        unsigned int v7 = 0;
        goto LABEL_105;
      }
      if (v64 > v29) {
        double v29 = v64;
      }
      int v32 = HIDWORD(v63);
      if (HIDWORD(v63) == -1) {
        goto LABEL_104;
      }
      if (!v63) {
        goto LABEL_104;
      }
      uint64_t v33 = v61;
      if (!v61) {
        goto LABEL_104;
      }
      v24 += v61;
      if (v24 > 7 || v63 != v54) {
        goto LABEL_104;
      }
      int v35 = HIDWORD(v63) - v56;
      if (HIDWORD(v63) != v56)
      {
        if (v53 == -1)
        {
          if (v35 > 0)
          {
            if (v35 != 11)
            {
              int v53 = HIDWORD(v63);
              if (v35 != 1) {
                goto LABEL_104;
              }
              goto LABEL_65;
            }
          }
          else
          {
            int v20 = 31;
            if (v35 != -11)
            {
              int v55 = HIDWORD(v63);
              int v53 = HIDWORD(v63);
              if (v35 != -1) {
                goto LABEL_104;
              }
              goto LABEL_65;
            }
            int v55 = HIDWORD(v63);
          }
          int v53 = HIDWORD(v63);
        }
        else if (HIDWORD(v63) != v53)
        {
          goto LABEL_104;
        }
      }
LABEL_65:
      if (HIDWORD(v63) == v55 && (int)v61 >= 1)
      {
        int v36 = (int *)v69;
        do
        {
          int v37 = *v36;
          if (*v36 <= 0) {
            v37 += dword_18CA98814[v32] + 1;
          }
          *v36++ = v37;
          if (v37 < v20) {
            int v20 = v37;
          }
          --v33;
        }
        while (v33);
      }
      if ((signed int)++v30 >= *((_DWORD *)this + 2)) {
        goto LABEL_76;
      }
    }
  }
  int v18 = HIDWORD(v68);
  if (v66 < 2)
  {
    int v20 = 0;
  }
  else
  {
    if (v66 != 7 || HIDWORD(v68) == -1 || !v68) {
      goto LABEL_104;
    }
    uint64_t v19 = 0;
    int v20 = 31;
    do
    {
      int v21 = *(_DWORD *)((char *)v71 + v19);
      if (v21 < 0)
      {
        v21 += dword_18CA98814[v18] + 1;
        *(_DWORD *)((char *)v71 + v19) = v21;
      }
      if (v21 < v20) {
        int v20 = v21;
      }
      v19 += 4;
    }
    while (v19 != 28);
    for (int i = 1; i != 7; ++i)
    {
      uint64_t v23 = 0;
      while (*(_DWORD *)((char *)v71 + v23) != i + v20)
      {
        v23 += 4;
        if (v23 == 28) {
          goto LABEL_104;
        }
      }
    }
  }
LABEL_77:
  uint64_t v59 = 0;
  *(void *)unsigned int v60 = 0;
  uint64_t v58 = 0;
  sub_18C93E568(&v60[1], v60, (_DWORD *)&v59 + 1, (int *)&v59, (int *)&v58 + 1, &v58, (double)a5 + a7);
  if (v18 == -1) {
    int v39 = v60[0];
  }
  else {
    int v39 = v18;
  }
  int v41 = v67;
  int v40 = v68;
  BOOL v42 = __PAIR64__(v68, v67) == 0;
  if (v68 | v67 | v20) {
    int v43 = v20;
  }
  else {
    int v43 = HIDWORD(v59);
  }
  int v57 = 0;
  if (v65 == -1.84303903e17)
  {
    int v57 = 0x7FFFFFFF;
  }
  else
  {
    LODWORD(v69[0]) = 0;
    LODWORD(v64) = 0;
    uint64_t v63 = 0;
    int v62 = 0;
    sub_18C93E568(&v57, v69, &v64, (int *)&v63 + 1, (int *)&v63, &v62, v65);
  }
  if (v43) {
    uint64_t v44 = (uint64_t *)v42;
  }
  else {
    uint64_t v44 = 0;
  }
  if (v44 != 1)
  {
    if (v40 && v41 && !v43)
    {
      int32_t v49 = icu::UMemory::operator new(v44, (icu::UMemory *)0x28, v38);
      if (v49)
      {
        int32_t v46 = (icu::DateTimeRule *)v49;
        icu::DateTimeRule::DateTimeRule((uint64_t)v49, v39, v41, v40, v58, 0);
        goto LABEL_102;
      }
    }
    else if (v40)
    {
      if (!v41)
      {
        if (v43)
        {
          int32_t v50 = icu::UMemory::operator new(v44, (icu::UMemory *)0x28, v38);
          if (v50)
          {
            int32_t v46 = (icu::DateTimeRule *)v50;
            icu::DateTimeRule::DateTimeRule((uint64_t)v50, v39, v43, v40, 1, v58, 0);
            goto LABEL_102;
          }
        }
      }
    }
LABEL_104:
    unsigned int v7 = 0;
    uint64_t v16 = 27;
    *a6 = 27;
    goto LABEL_105;
  }
  int32_t v45 = icu::UMemory::operator new(v44, (icu::UMemory *)0x28, v38);
  if (!v45) {
    goto LABEL_104;
  }
  int32_t v46 = (icu::DateTimeRule *)v45;
  icu::DateTimeRule::DateTimeRule((uint64_t)v45, v39, v43, v58, 0);
LABEL_102:
  uint64_t v51 = (icu::AnnualTimeZoneRule *)icu::UMemory::operator new(v48, (icu::UMemory *)0x60, v47);
  unsigned int v7 = v51;
  if (v51) {
    icu::AnnualTimeZoneRule::AnnualTimeZoneRule(v51, a1, a2, a3, v46, v60[1], v57);
  }
LABEL_105:
  icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)v73);
  return v7;
}

uint64_t *sub_18CA3152C(uint64_t a1, unint64_t a2, uint64_t a3, int *a4, int a5, int *a6, double a7)
{
  double v25 = a7;
  unsigned int v7 = (uint64_t *)*a6;
  if ((int)v7 <= 0)
  {
    if (a4 && (uint64_t v14 = a4[2], v14))
    {
      uint64_t v16 = (double *)uprv_malloc(8 * v14);
      if (v16)
      {
        uint64_t v19 = v16;
        if ((int)v14 >= 1)
        {
          uint64_t v20 = 0;
          while (1)
          {
            uint64_t v21 = icu::UVector::elementAt((icu::UVector *)a4, v20);
            v19[v20] = sub_18CA30AA0(v21, a5, a6);
            int v18 = (uint64_t *)*a6;
            if ((int)v18 >= 1) {
              break;
            }
            if (v14 == ++v20) {
              goto LABEL_10;
            }
          }
          uprv_free(v19);
          return 0;
        }
LABEL_10:
        int v22 = icu::UMemory::operator new(v18, (icu::UMemory *)0x160, v17);
        if (v22)
        {
          int v8 = v22;
          icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(v22, a1, a2, a3, v19, v14, 2);
          uprv_free(v19);
          return v8;
        }
        uprv_free(v19);
      }
    }
    else
    {
      uint64_t v23 = icu::UMemory::operator new(v7, (icu::UMemory *)0x160, a2);
      if (v23)
      {
        int v8 = v23;
        icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(v23, a1, a2, a3, &v25, 1, 2);
        return v8;
      }
    }
    int v8 = 0;
    *a6 = 7;
    return v8;
  }
  return 0;
}

void *icu::VTimeZone::writeZone(void *result, uint64_t *a2, UChar **a3, icu::UVector *a4, int *a5)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  if (*a5 > 0) {
    return result;
  }
  unsigned int v5 = a5;
  int v8 = a2;
  uint64_t v9 = (uint64_t)result;
  uint64_t result = icu::VTimeZone::writeHeaders(result, a2, a5);
  if (*v5 > 0) {
    return result;
  }
  if (a4 && *((int *)a4 + 2) >= 1)
  {
    signed int v10 = 0;
    do
    {
      uint64_t v11 = icu::UVector::elementAt(a4, v10);
      unsigned int v12 = *(unsigned __int16 *)(v11 + 8);
      int v13 = (__int16)v12;
      unsigned int v14 = v12 >> 5;
      if (v13 >= 0) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = *(unsigned int *)(v11 + 12);
      }
      icu::UnicodeString::doAppend(*v8, (const icu::UnicodeString *)v11, 0, v15);
      icu::UnicodeString::doAppend(*v8, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
      ++v10;
    }
    while (v10 < *((_DWORD *)a4 + 2));
  }
  long long v123 = 0u;
  uint64_t v126 = 0;
  long long v125 = 0u;
  long long v124 = 0u;
  int v122 = (UChar *)&unk_1EDA47700;
  LOWORD(v123) = 2;
  long long v118 = 0u;
  uint64_t v121 = 0;
  long long v120 = 0u;
  long long v119 = 0u;
  int v117 = (UChar *)&unk_1EDA47700;
  LOWORD(v118) = 2;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v104 = 0;
  memset(v103, 0, sizeof(v103));
  icu::TimeZoneTransition::TimeZoneTransition(v103);
  long long v113 = 0u;
  uint64_t v116 = 0;
  long long v115 = 0u;
  long long v114 = 0u;
  uint64_t v112 = (UChar *)&unk_1EDA47700;
  LOWORD(v113) = 2;
  if (!(*((unsigned int (**)(UChar **, void, _OWORD *, double))*a3 + 14))(a3, 0, v103, -1.84303903e17))
  {
    uint64_t v102 = 0;
    (*((void (**)(UChar **, void, char *, uint64_t *, int *, double))*a3 + 6))(a3, 0, (char *)&v102 + 4, &v102, v5, 0.0);
    unint64_t v60 = *v5;
    if ((int)v60 <= 0)
    {
      int v64 = v102 + HIDWORD(v102);
      BOOL v65 = v102 != 0;
      long long v108 = 0u;
      long long v109 = 0u;
      uint64_t v111 = 0;
      long long v110 = 0u;
      uint64_t v107 = (UChar *)&unk_1EDA47700;
      LOWORD(v108) = 2;
      icu::UnicodeString::operator=(&v107, a3 + 1);
      sub_18CA30D1C(&v107, v65, &v112);
      icu::VTimeZone::writeZonePropsByTime(v9, v8, v65, (uint64_t)&v112, v64, v64, 0, v5, 0.0 - (double)v64);
      int v66 = *v5;
      icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)&v107);
      if (v66 < 1)
      {
        uint64_t v68 = 0;
        int v70 = 0;
        goto LABEL_127;
      }
    }
    int v70 = 0;
    uint64_t v68 = 0;
LABEL_128:
    if (v68) {
LABEL_129:
    }
      (*(void (**)(icu::AnnualTimeZoneRule *))(*(void *)v68 + 8))(v68);
    goto LABEL_130;
  }
  uint64_t v91 = v9;
  long long v92 = v8;
  long long v93 = v5;
  uint64_t v96 = 0;
  unint64_t v97 = 0;
  unint64_t v90 = 0;
  unint64_t v95 = 0;
  int v94 = 0;
  unsigned int v89 = 0;
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  double v100 = 0;
  double v21 = 0.0;
  double v22 = 0.0;
  double v23 = 0.0;
  double v24 = 0.0;
  while (1)
  {
    double Time = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v103);
    uint64_t v26 = (UChar **)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v103);
    icu::TimeZoneRule::getName(v26, &v112);
    int v27 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v103);
    int DSTSavings = icu::TimeZoneRule::getDSTSavings(v27);
    double v29 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v103);
    int RawOffset = icu::TimeZoneRule::getRawOffset(v29);
    int32_t v31 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v103);
    uint64_t v32 = icu::TimeZoneRule::getDSTSavings(v31) + RawOffset;
    uint64_t v33 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v103);
    unsigned int v101 = icu::TimeZoneRule::getDSTSavings(v33);
    int32_t v34 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v103);
    int v35 = icu::TimeZoneRule::getRawOffset(v34);
    int v36 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v103);
    uint64_t v37 = icu::TimeZoneRule::getDSTSavings(v36) + v35;
    double v38 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v103);
    sub_18C93E568((int *)&v106 + 1, &v106, (_DWORD *)&v105 + 1, (int *)&v105, (int *)&v104 + 1, &v104, v38 + (double)(int)v32);
    uint64_t v39 = sub_18C93E644(SHIDWORD(v106), v106, SHIDWORD(v105));
    if (DSTSavings)
    {
      if (!v100)
      {
        int v40 = (const void *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v103);
        if (v40
        {
          double v100 = (icu::AnnualTimeZoneRule *)(*(uint64_t (**)(icu::AnnualTimeZoneRule *))(*(void *)v42 + 24))(v42);
        }
        else
        {
          double v100 = 0;
        }
      }
      int v46 = HIDWORD(v99);
      if (SHIDWORD(v99) >= 1)
      {
        int v47 = HIDWORD(v98);
        int v48 = v99;
        if (HIDWORD(v106) == HIDWORD(v99) + v98)
        {
          if (v123)
          {
            int v52 = (v113 & 1) == 0;
          }
          else
          {
            int32_t v49 = (v113 & 0x8000u) == 0 ? (unsigned __int16)v113 >> 5 : DWORD1(v113);
            int v50 = (v123 & 0x8000u) == 0 ? (unsigned __int16)v123 >> 5 : DWORD1(v123);
            uint64_t v51 = (v123 & 2) != 0 ? (long long *)((char *)&v123 + 2) : (long long *)v124;
            int v52 = icu::UnicodeString::doCompare((uint64_t)&v112, 0, v49, (uint64_t)v51, v50 & (v50 >> 31), v50 & ~(v50 >> 31));
            int v48 = v99;
            int v46 = HIDWORD(v99);
            int v47 = HIDWORD(v98);
          }
          if (!v52
            && v19 == v32
            && v17 == v37
            && v48 == v106
            && v47 == v105
            && v16 == v39
            && HIDWORD(v96) == v104)
          {
            int v59 = v46 + 1;
            uint64_t v32 = v19;
            unsigned int v101 = v18;
            uint64_t v37 = v17;
            uint64_t v39 = v16;
            goto LABEL_65;
          }
        }
        if (v46 == 1) {
          icu::VTimeZone::writeZonePropsByTime(v91, v92, 1, (uint64_t)&v122, v19, v17, 1, v93, v24);
        }
        else {
          icu::VTimeZone::writeZonePropsByDOW(v91, v92, 1, (uint64_t)&v122, v19, v17, v48, v16, v24, v23, v47, v93);
        }
        unint64_t v60 = *v93;
        if ((int)v60 >= 1) {
          goto LABEL_92;
        }
      }
      icu::UnicodeString::operator=(&v122, &v112);
      int v48 = v106;
      LODWORD(v98) = HIDWORD(v106);
      int v47 = v105;
      int v59 = 1;
      double v24 = Time;
      HIDWORD(v96) = v104;
LABEL_65:
      unint64_t v99 = __PAIR64__(v59, v48);
      HIDWORD(v98) = v47;
      uint64_t v61 = v20;
      double v23 = Time;
      if (v20)
      {
        uint64_t v62 = v101;
        if (v100)
        {
          double v23 = Time;
          int v8 = v92;
          unsigned int v5 = v93;
          UErrorCode v69 = (icu::DateTimeRule *)v91;
          int v70 = v100;
          int v71 = HIDWORD(v95);
          int v72 = v59;
LABEL_96:
          uint64_t v20 = v61;
          if (v72 == 1)
          {
            icu::VTimeZone::writeFinalRule(v69, v8, 1, v70, v32 - v101, v101, v5, v24);
            uint64_t v68 = (icu::AnnualTimeZoneRule *)v20;
            int v73 = v94;
            int v74 = v95;
            uint64_t v75 = v89;
          }
          else
          {
            uint64_t Rule = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(v70);
            if (sub_18CA332E4(v99, v39, SHIDWORD(v98), Rule))
            {
              icu::VTimeZone::writeZonePropsByDOW((uint64_t)v69, v8, 1, (uint64_t)&v122, v32, v37, v99, v39, v24, 1.83882169e17, SHIDWORD(v98), v5);
            }
            else
            {
              icu::VTimeZone::writeZonePropsByDOW((uint64_t)v69, v8, 1, (uint64_t)&v122, v32, v37, v99, v39, v24, v23, SHIDWORD(v98), v5);
              unint64_t v60 = *v5;
              if ((int)v60 > 0) {
                goto LABEL_117;
              }
              uint64_t v107 = 0;
              if ((*(unsigned int (**)(icu::AnnualTimeZoneRule *, void, void, void, UChar **, double))(*(void *)v70 + 72))(v70, v32 - v101, v101, 0, &v107, v23))
              {
                icu::VTimeZone::writeFinalRule(v69, v8, 1, v70, v32 - v101, v101, v5, *(double *)&v107);
              }
            }
            uint64_t v68 = (icu::AnnualTimeZoneRule *)v20;
            int v73 = v94;
            int v74 = v95;
            uint64_t v75 = v89;
          }
          unint64_t v60 = HIDWORD(v97);
          if (*v5 > 0) {
            goto LABEL_128;
          }
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v62 = v101;
      }
      goto LABEL_87;
    }
    if (!v20)
    {
      int v43 = (const void *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v103);
      if (v43
      {
        uint64_t v20 = (*(uint64_t (**)(icu::AnnualTimeZoneRule *))(*(void *)v45 + 24))(v45);
      }
      else
      {
        uint64_t v20 = 0;
      }
    }
    int v53 = HIDWORD(v97);
    if (SHIDWORD(v97) >= 1)
    {
      signed int v54 = v97;
      if (HIDWORD(v106) == HIDWORD(v97) + HIDWORD(v90))
      {
        if (v118)
        {
          int v58 = (v113 & 1) == 0;
        }
        else
        {
          int32_t v55 = (v113 & 0x8000u) == 0 ? (unsigned __int16)v113 >> 5 : DWORD1(v113);
          int v56 = (v118 & 0x8000u) == 0 ? (unsigned __int16)v118 >> 5 : DWORD1(v118);
          int v57 = (v118 & 2) != 0 ? (long long *)((char *)&v118 + 2) : (long long *)v119;
          int v58 = icu::UnicodeString::doCompare((uint64_t)&v112, 0, v55, (uint64_t)v57, v56 & (v56 >> 31), v56 & ~(v56 >> 31));
          signed int v54 = v97;
          int v53 = HIDWORD(v97);
        }
        if (!v58
          && v54 == v32
          && v96 == v37
          && v95 == v106
          && v94 == v105
          && HIDWORD(v95) == v39
          && v90 == v104)
        {
          int v63 = v53 + 1;
          goto LABEL_83;
        }
      }
      if (v53 == 1) {
        icu::VTimeZone::writeZonePropsByTime(v91, v92, 0, (uint64_t)&v117, v54, v96, 1, v93, v22);
      }
      else {
        icu::VTimeZone::writeZonePropsByDOW(v91, v92, 0, (uint64_t)&v117, v54, v96, v95, SHIDWORD(v95), v22, v21, v94, v93);
      }
      unint64_t v60 = *v93;
      if ((int)v60 >= 1)
      {
LABEL_92:
        int v70 = v100;
LABEL_117:
        uint64_t v68 = (icu::AnnualTimeZoneRule *)v20;
        goto LABEL_128;
      }
    }
    icu::UnicodeString::operator=(&v117, &v112);
    int v63 = 1;
    signed int v54 = v32;
    unsigned int v89 = v101;
    int v94 = v105;
    unint64_t v95 = __PAIR64__(v39, v106);
    LODWORD(v96) = v37;
    double v22 = Time;
    unint64_t v90 = __PAIR64__(HIDWORD(v106), v104);
LABEL_83:
    unint64_t v97 = __PAIR64__(v63, v54);
    uint64_t v61 = v20;
    if (!v20)
    {
      uint64_t v32 = v19;
      uint64_t v62 = v18;
      uint64_t v37 = v17;
      uint64_t v39 = v16;
      double v21 = Time;
      goto LABEL_87;
    }
    uint64_t v32 = v19;
    uint64_t v62 = v18;
    uint64_t v37 = v17;
    uint64_t v39 = v16;
    double v21 = Time;
    if (v100) {
      break;
    }
LABEL_87:
    uint64_t v20 = v61;
    uint64_t v16 = v39;
    uint64_t v17 = v37;
    uint64_t v18 = v62;
    uint64_t v19 = v32;
    if (!(*((unsigned int (**)(UChar **, void, _OWORD *, double))*a3 + 14))(a3, 0, v103, Time)) {
      goto LABEL_93;
    }
  }
  double v21 = Time;
  LODWORD(v39) = v16;
  LODWORD(v37) = v17;
  LODWORD(v62) = v18;
  LODWORD(v32) = v19;
LABEL_93:
  int v72 = HIDWORD(v99);
  if (SHIDWORD(v99) < 1)
  {
    int v8 = v92;
    unsigned int v5 = v93;
    UErrorCode v69 = (icu::DateTimeRule *)v91;
    int v70 = v100;
    uint64_t v68 = (icu::AnnualTimeZoneRule *)v20;
    int v74 = v95;
    int v71 = HIDWORD(v95);
    uint64_t v75 = v89;
    int v73 = v94;
    LODWORD(v60) = HIDWORD(v97);
    goto LABEL_104;
  }
  int v8 = v92;
  unsigned int v5 = v93;
  UErrorCode v69 = (icu::DateTimeRule *)v91;
  int v70 = v100;
  int v71 = HIDWORD(v95);
  if (v100)
  {
    unsigned int v101 = v62;
    uint64_t v61 = v20;
    goto LABEL_96;
  }
  if (HIDWORD(v99) == 1) {
    icu::VTimeZone::writeZonePropsByTime(v91, v92, 1, (uint64_t)&v122, v32, v37, 1, v93, v24);
  }
  else {
    icu::VTimeZone::writeZonePropsByDOW(v91, v92, 1, (uint64_t)&v122, v32, v37, v99, v39, v24, v23, SHIDWORD(v98), v93);
  }
  int v70 = 0;
  uint64_t v68 = (icu::AnnualTimeZoneRule *)v20;
  int v73 = v94;
  int v74 = v95;
  uint64_t v75 = v89;
  unint64_t v60 = HIDWORD(v97);
  if (*v93 >= 1) {
    goto LABEL_128;
  }
LABEL_104:
  if ((int)v60 < 1) {
    goto LABEL_127;
  }
  if (v68)
  {
    if (v60 == 1)
    {
      int v77 = v97 - v75;
      int v78 = v68;
      uint64_t v79 = v69;
      unint64_t v80 = v8;
      long long v83 = v78;
      int v81 = v75;
      long long v82 = *(UChar **)&v22;
      goto LABEL_109;
    }
    long long v83 = v68;
    unint64_t v84 = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(v68);
    if (sub_18CA332E4(v74, v71, v73, v84))
    {
      icu::VTimeZone::writeZonePropsByDOW((uint64_t)v69, v8, 0, (uint64_t)&v117, v97, v96, v74, v71, v22, 1.83882169e17, v73, v5);
      goto LABEL_121;
    }
    icu::VTimeZone::writeZonePropsByDOW((uint64_t)v69, v8, 0, (uint64_t)&v117, v97, v96, v74, v71, v22, v21, v73, v5);
    if (*v5 > 0)
    {
      uint64_t v68 = v83;
      goto LABEL_129;
    }
    uint64_t v107 = 0;
    if ((*(unsigned int (**)(icu::AnnualTimeZoneRule *, void, uint64_t, void, UChar **, double))(*(void *)v83 + 72))(v83, (v97 - v75), v75, 0, &v107, v21))
    {
      long long v82 = v107;
      uint64_t v79 = v69;
      unint64_t v80 = v8;
      int v78 = v83;
      int v77 = v97 - v75;
      int v81 = v75;
LABEL_109:
      icu::VTimeZone::writeFinalRule(v79, v80, 0, v78, v77, v81, v5, *(double *)&v82);
    }
LABEL_121:
    uint64_t v68 = v83;
    if (*v5 > 0) {
      goto LABEL_129;
    }
LABEL_127:
    int v86 = v68;
    icu::VTimeZone::writeFooter((uint64_t)v68, v8, v5);
    uint64_t v68 = v86;
    goto LABEL_128;
  }
  if (v60 == 1) {
    icu::VTimeZone::writeZonePropsByTime((uint64_t)v69, v8, 0, (uint64_t)&v117, v97, v96, 1, v5, v22);
  }
  else {
    icu::VTimeZone::writeZonePropsByDOW((uint64_t)v69, v8, 0, (uint64_t)&v117, v97, v96, v74, v71, v22, v21, v73, v5);
  }
  unint64_t v60 = *v5;
  if ((int)v60 < 1)
  {
    uint64_t v68 = 0;
    goto LABEL_127;
  }
LABEL_130:
  if (v70) {
    (*(void (**)(icu::AnnualTimeZoneRule *))(*(void *)v70 + 8))(v70);
  }
  icu::UnicodeString::~UnicodeString((void *)v60, (icu::UnicodeString *)&v112);
  icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v103);
  icu::UnicodeString::~UnicodeString(v87, (icu::UnicodeString *)&v117);
  return icu::UnicodeString::~UnicodeString(v88, (icu::UnicodeString *)&v122);
}

uint64_t sub_18CA324E4(uint64_t a1, double a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2 >= -1.84303903e17)
  {
    if (a2 <= 1.83882169e17) {
      uint64_t v3 = (uint64_t)a2;
    }
    else {
      uint64_t v3 = 183882168921600000;
    }
  }
  else
  {
    uint64_t v3 = -184303902528000000;
  }
  uint64_t v4 = 0;
  memset(v9, 0, sizeof(v9));
  if (v3 >= 0) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = -v3;
  }
  do
  {
    *((_DWORD *)v9 + v4++) = v5 % 0xA;
    BOOL v6 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v6);
  if (v3 < 0)
  {
    __int16 v8 = 45;
    icu::UnicodeString::doAppend(a1, (uint64_t)&v8, 0, 1);
  }
  do
  {
    __int16 v8 = *((_WORD *)v9 + 2 * v4 - 2) + 48;
    icu::UnicodeString::doAppend(a1, (uint64_t)&v8, 0, 1);
    --v4;
  }
  while (v4 > 0);
  return a1;
}

void *icu::VTimeZone::writeHeaders(void *result, uint64_t *a2, int *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*a3 > 0) {
    return result;
  }
  uint64_t v4 = result;
  long long v24 = 0u;
  uint64_t v27 = 0;
  long long v26 = 0u;
  long long v25 = 0u;
  double v23 = (UChar *)&unk_1EDA47700;
  LOWORD(v24) = 2;
  icu::UnicodeString::operator=(&v23, (UChar **)(result[9] + 8));
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"BEGIN", 0, 0xFFFFFFFFLL);
  _OWORD v16[8] = L"BEGIN";
  uint64_t v5 = *a2;
  LOWORD(v18) = 58;
  icu::UnicodeString::doAppend(v5, (uint64_t)&v18, 0, 1);
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"VTIMEZONE", 0, 0xFFFFFFFFLL);
  v16[7] = L"VTIMEZONE";
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  v16[6] = L"\r\n";
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"TZID", 0, 0xFFFFFFFFLL);
  v16[5] = L"TZID";
  uint64_t v6 = *a2;
  LOWORD(v18) = 58;
  icu::UnicodeString::doAppend(v6, (uint64_t)&v18, 0, 1);
  if ((v24 & 0x8000u) == 0) {
    uint64_t v7 = (unsigned __int16)v24 >> 5;
  }
  else {
    uint64_t v7 = DWORD1(v24);
  }
  icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v23, 0, v7);
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  _OWORD v16[4] = L"\r\n";
  if ((__int16)v4[12] < 0)
  {
    if (*((_DWORD *)v4 + 25)) {
      goto LABEL_7;
    }
  }
  else if (*((unsigned __int16 *)v4 + 48) >> 5)
  {
LABEL_7:
    icu::UnicodeString::doAppend(*a2, (uint64_t)"T", 0, 0xFFFFFFFFLL);
    void v16[3] = "T";
    uint64_t v8 = *a2;
    LOWORD(v18) = 58;
    icu::UnicodeString::doAppend(v8, (uint64_t)&v18, 0, 1);
    unsigned int v9 = *((unsigned __int16 *)v4 + 48);
    int v10 = (__int16)v9;
    unsigned int v11 = v9 >> 5;
    if (v10 >= 0) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = *((unsigned int *)v4 + 25);
    }
    icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)(v4 + 11), 0, v12);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    _OWORD v16[2] = L"\r\n";
  }
  int v13 = &unk_18CA8B000;
  if (*((double *)v4 + 19) != 1.83882169e17)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v22 = 0;
    long long v21 = 0u;
    uint64_t v18 = &unk_1EDA47700;
    LOWORD(v19) = 2;
    icu::UnicodeString::doAppend(*a2, (uint64_t)"L", 0, 0xFFFFFFFFLL);
    v16[1] = "L";
    uint64_t v14 = *a2;
    __int16 v17 = 58;
    icu::UnicodeString::doAppend(v14, (uint64_t)&v17, 0, 1);
    sub_18CA33958((uint64_t)&v18, *((double *)v4 + 19));
    __int16 v17 = 90;
    icu::UnicodeString::doAppend((uint64_t)&v18, (uint64_t)&v17, 0, 1);
    if ((v19 & 0x8000u) == 0) {
      uint64_t v15 = (unsigned __int16)v19 >> 5;
    }
    else {
      uint64_t v15 = DWORD1(v19);
    }
    icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v18, 0, v15);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v16[0] = L"\r\n";
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v18);
  }
  return icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v23);
}

void icu::VTimeZone::writeZonePropsByTime(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int *a8, double a9)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*a8 <= 0)
  {
    icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a8);
    if (*a8 <= 0)
    {
      if (a7)
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"RDATE", 0, 0xFFFFFFFFLL);
        v18[1] = L"RDATE";
        uint64_t v16 = *a2;
        LOWORD(v19) = 58;
        icu::UnicodeString::doAppend(v16, (uint64_t)&v19, 0, 1);
        long long v20 = 0u;
        long long v21 = 0u;
        uint64_t v23 = 0;
        long long v22 = 0u;
        long long v19 = &unk_1EDA47700;
        LOWORD(v20) = 2;
        sub_18CA33958((uint64_t)&v19, (double)a5 + a9);
        if ((v20 & 0x8000u) == 0) {
          uint64_t v17 = (unsigned __int16)v20 >> 5;
        }
        else {
          uint64_t v17 = DWORD1(v20);
        }
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v19, 0, v17);
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
        v18[0] = L"\r\n";
        uint64_t v15 = icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v19);
      }
      icu::VTimeZone::endZoneProps((uint64_t)v15, a2, a3, a8);
    }
  }
}

void icu::VTimeZone::writeZonePropsByDOW(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int a11, int *a12)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*a12 <= 0)
  {
    icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a12);
    if (*a12 <= 0)
    {
      icu::VTimeZone::beginRRULE(v18, a2, a7, a12);
      if (*a12 <= 0)
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)"B", 0, 0xFFFFFFFFLL);
        uint64_t v19 = *a2;
        LOWORD(v24) = 61;
        icu::UnicodeString::doAppend(v19, (uint64_t)&v24, 0, 1);
        long long v25 = 0u;
        long long v26 = 0u;
        uint64_t v28 = 0;
        long long v27 = 0u;
        uint64_t v24 = &unk_1EDA47700;
        LOWORD(v25) = 2;
        sub_18CA33F80(a8, 0, (uint64_t)&v24);
        if ((v25 & 0x8000u) == 0) {
          uint64_t v20 = (unsigned __int16)v25 >> 5;
        }
        else {
          uint64_t v20 = DWORD1(v25);
        }
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v24, 0, v20);
        icu::UnicodeString::doAppend(*a2, (uint64_t)&aS_4[6 * a11 - 6], 0, 0xFFFFFFFFLL);
        if (a10 == 1.83882169e17
          || (uint64_t v21 = sub_18CA33958((uint64_t)&v24, (double)a5 + a10),
              icu::VTimeZone::appendUNTIL(v21, a2, (uint64_t)&v24, a12),
              unint64_t v22 = *a12,
              (int)v22 <= 0))
        {
          uint64_t v23 = icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
          icu::VTimeZone::endZoneProps(v23, a2, a3, a12);
        }
        icu::UnicodeString::~UnicodeString((void *)v22, (icu::UnicodeString *)&v24);
      }
    }
  }
}

icu::DateTimeRule *icu::VTimeZone::writeFinalRule(icu::DateTimeRule *result, uint64_t *a2, int a3, icu::AnnualTimeZoneRule *this, int a5, int a6, int *a7, double a8)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (*a7 > 0) {
    return result;
  }
  uint64_t v15 = result;
  uint64_t result = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(this);
  if (*a7 > 0) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t result = (icu::DateTimeRule *)icu::DateTimeRule::getTimeRuleType(result);
  unsigned int v57 = result;
  if (result)
  {
    int RuleMillisInDay = icu::DateTimeRule::getRuleMillisInDay(v16);
    if (icu::DateTimeRule::getTimeRuleType(v16) == 2)
    {
      int v18 = a6 + a5;
    }
    else if (icu::DateTimeRule::getTimeRuleType(v16) == 1)
    {
      int v18 = a6;
    }
    else
    {
      int v18 = 0;
    }
    unsigned int v20 = v18 + RuleMillisInDay;
    int v55 = a3;
    if (v18 + RuleMillisInDay < 0)
    {
      char v21 = 0;
      int v54 = v20 + 86400000;
      int v22 = -1;
    }
    else
    {
      if (v20 <= 0x5265BFF)
      {
        int v53 = 0;
        int v54 = v18 + RuleMillisInDay;
        char v21 = 1;
LABEL_18:
        int RuleMonth = icu::DateTimeRule::getRuleMonth(v16);
        int RuleDayOfMonth = icu::DateTimeRule::getRuleDayOfMonth(v16);
        RuleDayOfWeeuint64_t k = icu::DateTimeRule::getRuleDayOfWeek(v16);
        DateRuleint Type = icu::DateTimeRule::getDateRuleType(v16);
        int v27 = DateRuleType;
        if (v21)
        {
          a3 = v55;
          if (!DateRuleType) {
            goto LABEL_40;
          }
        }
        else
        {
          int v28 = RuleDayOfMonth;
          if (DateRuleType == 1)
          {
            int RuleWeekInMonth = icu::DateTimeRule::getRuleWeekInMonth(v16);
            if (RuleWeekInMonth < 1)
            {
              int v28 = dword_18CA98814[RuleMonth] - RuleWeekInMonth + 8 * RuleWeekInMonth + 7;
              int v27 = 3;
            }
            else
            {
              int v28 = 7 * RuleWeekInMonth - 6;
              int v27 = 2;
            }
          }
          int v30 = v28 + v53;
          if (v30)
          {
            uint64_t v26 = dword_18CA98814[RuleMonth];
            a3 = v55;
            if (v30 > (int)v26)
            {
              if (RuleMonth <= 10) {
                ++RuleMonth;
              }
              else {
                int RuleMonth = 0;
              }
              int v30 = 1;
            }
          }
          else
          {
            if (RuleMonth >= 1) {
              --RuleMonth;
            }
            else {
              int RuleMonth = 11;
            }
            uint64_t v26 = (uint64_t)dword_18CA98814;
            int v30 = dword_18CA98814[RuleMonth];
            a3 = v55;
          }
          int RuleDayOfMonth = v30;
          if (!v27)
          {
LABEL_40:
            uint64_t result = (icu::DateTimeRule *)icu::UMemory::operator new((uint64_t *)v26, (icu::UMemory *)0x28, v25);
            if (result)
            {
              uint64_t Rule = result;
              uint64_t result = (icu::DateTimeRule *)icu::DateTimeRule::DateTimeRule((uint64_t)result, RuleMonth, RuleDayOfMonth, v54, 0);
              goto LABEL_46;
            }
            goto LABEL_54;
          }
          LODWORD(v26) = RuleDayOfWeek + v53;
          if (RuleDayOfWeek + v53 < 1)
          {
            uint64_t v26 = 7;
          }
          else if (v26 > 7)
          {
            uint64_t v26 = 1;
          }
          else
          {
            uint64_t v26 = v26;
          }
          RuleDayOfWeeuint64_t k = v26;
        }
        uint64_t result = (icu::DateTimeRule *)icu::UMemory::operator new((uint64_t *)v26, (icu::UMemory *)0x28, v25);
        if (result)
        {
          uint64_t Rule = result;
          uint64_t result = (icu::DateTimeRule *)icu::DateTimeRule::DateTimeRule((uint64_t)result, RuleMonth, RuleDayOfMonth, RuleDayOfWeek, v27 == 2, v54, 0);
LABEL_46:
          if (*a7 >= 1) {
            return result;
          }
          goto LABEL_47;
        }
LABEL_54:
        *a7 = 7;
        return result;
      }
      char v21 = 0;
      int v54 = v20 - 86400000;
      int v22 = 1;
    }
    int v53 = v22;
    goto LABEL_18;
  }
  if (*a7 > 0) {
    return result;
  }
  uint64_t Rule = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(this);
LABEL_47:
  int v31 = icu::DateTimeRule::getRuleMillisInDay(Rule);
  double v32 = a8 - (double)(v31 - 86399999);
  if (v31 <= 0x5265BFF) {
    double v32 = a8;
  }
  if (v31 < 0) {
    double v33 = (double)-v31 + a8;
  }
  else {
    double v33 = v32;
  }
  int RawOffset = icu::TimeZoneRule::getRawOffset(this);
  int DSTSavings = icu::TimeZoneRule::getDSTSavings(this);
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v63 = 0;
  long long v62 = 0u;
  int v59 = (UChar *)&unk_1EDA47700;
  LOWORD(v60) = 2;
  icu::TimeZoneRule::getName((UChar **)this, &v59);
  unsigned int v36 = DSTSavings + RawOffset;
  switch(icu::DateTimeRule::getDateRuleType(Rule))
  {
    case 0u:
      signed int v37 = a6 + a5;
      int v38 = icu::DateTimeRule::getRuleMonth(Rule);
      int v39 = icu::DateTimeRule::getRuleDayOfMonth(Rule);
      icu::VTimeZone::writeZonePropsByDOM((uint64_t)v15, a2, a3, (uint64_t)&v59, v37, v36, v38, v39, v33, 1.83882169e17, a7);
      break;
    case 1u:
      signed int v40 = a6 + a5;
      int v41 = icu::DateTimeRule::getRuleMonth(Rule);
      int v42 = icu::DateTimeRule::getRuleWeekInMonth(Rule);
      int v43 = icu::DateTimeRule::getRuleDayOfWeek(Rule);
      icu::VTimeZone::writeZonePropsByDOW((uint64_t)v15, a2, a3, (uint64_t)&v59, v40, v36, v41, v42, v33, 1.83882169e17, v43, a7);
      break;
    case 2u:
      signed int v44 = a6 + a5;
      int v45 = icu::DateTimeRule::getRuleMonth(Rule);
      int v46 = icu::DateTimeRule::getRuleDayOfMonth(Rule);
      int v47 = icu::DateTimeRule::getRuleDayOfWeek(Rule);
      icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM((uint64_t)v15, a2, a3, (uint64_t)&v59, v44, v36, v45, v46, v33, 1.83882169e17, v47, a7);
      break;
    case 3u:
      signed int v48 = a6 + a5;
      int v49 = icu::DateTimeRule::getRuleMonth(Rule);
      int v50 = icu::DateTimeRule::getRuleDayOfMonth(Rule);
      int v51 = icu::DateTimeRule::getRuleDayOfWeek(Rule);
      icu::VTimeZone::writeZonePropsByDOW_LEQ_DOM((uint64_t)v15, a2, a3, (uint64_t)&v59, v48, v36, v49, v50, v33, 1.83882169e17, v51, a7);
      break;
    default:
      break;
  }
  unint64_t v52 = v57;
  if (v57)
  {
    if (Rule) {
      (*(void (**)(icu::DateTimeRule *))(*(void *)Rule + 8))(Rule);
    }
  }
  return (icu::DateTimeRule *)icu::UnicodeString::~UnicodeString((void *)v52, (icu::UnicodeString *)&v59);
}

uint64_t sub_18CA332E4(int a1, int a2, int a3, icu::DateTimeRule *this)
{
  if (icu::DateTimeRule::getRuleMonth(this) != a1
    || icu::DateTimeRule::getRuleDayOfWeek(this) != a3
    || icu::DateTimeRule::getTimeRuleType(this))
  {
    return 0;
  }
  if (icu::DateTimeRule::getDateRuleType(this) == 1
    && icu::DateTimeRule::getRuleWeekInMonth(this) == a2)
  {
    return 1;
  }
  int RuleDayOfMonth = icu::DateTimeRule::getRuleDayOfMonth(this);
  if (icu::DateTimeRule::getDateRuleType(this) == 2)
  {
    BOOL v10 = RuleDayOfMonth % 7 == 1 && (RuleDayOfMonth + 6) / 7 == a2;
    if (v10) {
      return 1;
    }
    if (a1 != 1)
    {
      int v11 = dword_18CA98814[a1] - RuleDayOfMonth;
      BOOL v10 = v11 % 7 == 6;
      int v12 = ((unint64_t)(1840700269 * (v11 + 1)) >> 32) + ~v11;
      int v13 = (v12 >> 2) + (v12 >> 31);
      if (v10 && v13 == a2) {
        return 1;
      }
    }
  }
  if (icu::DateTimeRule::getDateRuleType(this) == 3
    && (!(RuleDayOfMonth % 7) ? (BOOL v15 = RuleDayOfMonth / 7 == a2) : (BOOL v15 = 0),
        v15
     || a1 != 1
     && (int v16 = dword_18CA98814[a1] - RuleDayOfMonth, (-1227133513 * v16 + 306783378) <= 0x24924924)
     && ((int)(((unint64_t)(1840700269 * v16) >> 32) - v16) >> 2)
      + ((((unint64_t)(1840700269 * v16) >> 32) - v16) >> 31)
      - 1 == a2))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t icu::VTimeZone::writeFooter(uint64_t a1, uint64_t *a2, int *a3)
{
  if (*a3 <= 0)
  {
    icu::UnicodeString::doAppend(*a2, (uint64_t)"E", 0, 0xFFFFFFFFLL);
    uint64_t v4 = *a2;
    __int16 v6 = 58;
    icu::UnicodeString::doAppend(v4, (uint64_t)&v6, 0, 1);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"VTIMEZONE", 0, 0xFFFFFFFFLL);
    return icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  }
  return result;
}

void icu::VTimeZone::beginZoneProps(double a1, uint64_t a2, uint64_t *a3, int a4, uint64_t a5, signed int a6, unsigned int a7, int *a8)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*a8 <= 0)
  {
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"BEGIN", 0, 0xFFFFFFFFLL);
    v27[11] = L"BEGIN";
    uint64_t v14 = *a3;
    LOWORD(v29) = 58;
    icu::UnicodeString::doAppend(v14, (uint64_t)&v29, 0, 1);
    uint64_t v15 = *a3;
    if (a4)
    {
      icu::UnicodeString::doAppend(v15, (uint64_t)"D", 0, 0xFFFFFFFFLL);
      v27[10] = "D";
    }
    else
    {
      icu::UnicodeString::doAppend(v15, (uint64_t)L"STANDARD", 0, 0xFFFFFFFFLL);
      v27[9] = L"STANDARD";
    }
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    unsigned char v27[8] = L"\r\n";
    long long v30 = 0u;
    uint64_t v33 = 0;
    long long v32 = 0u;
    long long v31 = 0u;
    uint64_t v29 = &unk_1EDA47700;
    LOWORD(v30) = 2;
    icu::UnicodeString::doAppend(*a3, (uint64_t)"T", 0, 0xFFFFFFFFLL);
    _OWORD v27[7] = "T";
    uint64_t v16 = *a3;
    __int16 v28 = 58;
    icu::UnicodeString::doAppend(v16, (uint64_t)&v28, 0, 1);
    sub_18CA34820(a7, (uint64_t)&v29);
    if ((v30 & 0x8000u) == 0) {
      uint64_t v17 = (unsigned __int16)v30 >> 5;
    }
    else {
      uint64_t v17 = DWORD1(v30);
    }
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)&v29, 0, v17);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v27[6] = L"\r\n";
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"TZOFFSETFROM", 0, 0xFFFFFFFFLL);
    v27[5] = L"TZOFFSETFROM";
    uint64_t v18 = *a3;
    __int16 v28 = 58;
    icu::UnicodeString::doAppend(v18, (uint64_t)&v28, 0, 1);
    sub_18CA34820(a6, (uint64_t)&v29);
    if ((v30 & 0x8000u) == 0) {
      uint64_t v19 = (unsigned __int16)v30 >> 5;
    }
    else {
      uint64_t v19 = DWORD1(v30);
    }
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)&v29, 0, v19);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    _OWORD v27[4] = L"\r\n";
    icu::UnicodeString::doAppend(*a3, (uint64_t)"T", 0, 0xFFFFFFFFLL);
    void v27[3] = "T";
    uint64_t v20 = *a3;
    __int16 v28 = 58;
    icu::UnicodeString::doAppend(v20, (uint64_t)&v28, 0, 1);
    unsigned int v21 = *(unsigned __int16 *)(a5 + 8);
    int v22 = (__int16)v21;
    unsigned int v23 = v21 >> 5;
    if (v22 >= 0) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = *(unsigned int *)(a5 + 12);
    }
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)a5, 0, v24);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    _OWORD v27[2] = L"\r\n";
    icu::UnicodeString::doAppend(*a3, (uint64_t)"D", 0, 0xFFFFFFFFLL);
    v27[1] = "D";
    uint64_t v25 = *a3;
    __int16 v28 = 58;
    icu::UnicodeString::doAppend(v25, (uint64_t)&v28, 0, 1);
    sub_18CA33958((uint64_t)&v29, (double)a6 + a1);
    if ((v30 & 0x8000u) == 0) {
      uint64_t v26 = (unsigned __int16)v30 >> 5;
    }
    else {
      uint64_t v26 = DWORD1(v30);
    }
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)&v29, 0, v26);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v27[0] = L"\r\n";
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v29);
  }
}

uint64_t sub_18CA33958(uint64_t a1, double a2)
{
  int v10 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v7 = 0;
  sub_18C93E568(&v10, (_DWORD *)&v9 + 1, &v9, (int *)&v8 + 1, (int *)&v8, &v7, a2);
  if (*(_WORD *)(a1 + 8)) {
    __int16 v3 = 2;
  }
  else {
    __int16 v3 = *(_WORD *)(a1 + 8) & 0x1F;
  }
  *(_WORD *)(a1 + 8) = v3;
  sub_18CA33F80(v10, 4u, a1);
  sub_18CA33F80(HIDWORD(v9) + 1, 2u, a1);
  sub_18CA33F80(v9, 2u, a1);
  __int16 v11 = 84;
  icu::UnicodeString::doAppend(a1, (uint64_t)&v11, 0, 1);
  int v4 = v7 % 3600000 / 60000;
  int v5 = v7 % 3600000 % 60000 / 1000;
  sub_18CA33F80(v7 / 3600000, 2u, a1);
  sub_18CA33F80(v4, 2u, a1);
  sub_18CA33F80(v5, 2u, a1);
  return a1;
}

void icu::VTimeZone::endZoneProps(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    icu::UnicodeString::doAppend(*a2, (uint64_t)"E", 0, 0xFFFFFFFFLL);
    uint64_t v6 = *a2;
    __int16 v8 = 58;
    icu::UnicodeString::doAppend(v6, (uint64_t)&v8, 0, 1);
    uint64_t v7 = *a2;
    if (a3) {
      icu::UnicodeString::doAppend(v7, (uint64_t)"D", 0, 0xFFFFFFFFLL);
    }
    else {
      icu::UnicodeString::doAppend(v7, (uint64_t)L"STANDARD", 0, 0xFFFFFFFFLL);
    }
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  }
}

void icu::VTimeZone::writeZonePropsByDOM(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int *a11)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*a11 <= 0)
  {
    icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a11);
    if (*a11 <= 0)
    {
      icu::VTimeZone::beginRRULE(v17, a2, a7, a11);
      if (*a11 <= 0)
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"BYMONTHDAY", 0, 0xFFFFFFFFLL);
        uint64_t v18 = *a2;
        LOWORD(v23) = 61;
        icu::UnicodeString::doAppend(v18, (uint64_t)&v23, 0, 1);
        long long v24 = 0u;
        long long v25 = 0u;
        uint64_t v27 = 0;
        long long v26 = 0u;
        unsigned int v23 = &unk_1EDA47700;
        LOWORD(v24) = 2;
        sub_18CA33F80(a8, 0, (uint64_t)&v23);
        if ((v24 & 0x8000u) == 0) {
          uint64_t v19 = (unsigned __int16)v24 >> 5;
        }
        else {
          uint64_t v19 = DWORD1(v24);
        }
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v23, 0, v19);
        if (a10 == 1.83882169e17
          || (uint64_t v20 = sub_18CA33958((uint64_t)&v23, (double)a5 + a10),
              icu::VTimeZone::appendUNTIL(v20, a2, (uint64_t)&v23, a11),
              unint64_t v21 = *a11,
              (int)v21 <= 0))
        {
          uint64_t v22 = icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
          icu::VTimeZone::endZoneProps(v22, a2, a3, a11);
        }
        icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v23);
      }
    }
  }
}

void icu::VTimeZone::beginRRULE(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*a4 <= 0)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v18 = 0;
    long long v17 = 0u;
    uint64_t v14 = &unk_1EDA47700;
    LOWORD(v15) = 2;
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"RRULE", 0, 0xFFFFFFFFLL);
    uint64_t v6 = *a2;
    __int16 v13 = 58;
    icu::UnicodeString::doAppend(v6, (uint64_t)&v13, 0, 1);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"FREQ", 0, 0xFFFFFFFFLL);
    uint64_t v7 = *a2;
    __int16 v13 = 61;
    icu::UnicodeString::doAppend(v7, (uint64_t)&v13, 0, 1);
    icu::UnicodeString::doAppend(*a2, (uint64_t)"Y", 0, 0xFFFFFFFFLL);
    uint64_t v8 = *a2;
    __int16 v13 = 59;
    icu::UnicodeString::doAppend(v8, (uint64_t)&v13, 0, 1);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"BYMONTH", 0, 0xFFFFFFFFLL);
    uint64_t v9 = *a2;
    __int16 v13 = 61;
    icu::UnicodeString::doAppend(v9, (uint64_t)&v13, 0, 1);
    sub_18CA33F80(a3 + 1, 0, (uint64_t)&v14);
    if ((v15 & 0x8000u) == 0) {
      uint64_t v10 = (unsigned __int16)v15 >> 5;
    }
    else {
      uint64_t v10 = DWORD1(v15);
    }
    icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v14, 0, v10);
    uint64_t v11 = *a2;
    __int16 v13 = 59;
    icu::UnicodeString::doAppend(v11, (uint64_t)&v13, 0, 1);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v14);
  }
}

uint64_t sub_18CA33F80(int a1, unsigned int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  if (a1 >= 0) {
    unsigned int v4 = a1;
  }
  else {
    unsigned int v4 = -a1;
  }
  if (a2)
  {
    LODWORD(v5) = a2;
    uint64_t v6 = (unsigned int *)v13;
    uint64_t v7 = a2;
    do
    {
      *v6++ = v4 % 0xA;
      v4 /= 0xAu;
      --v7;
    }
    while (v7);
    if ((a1 & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_13:
    __int16 v12 = 45;
    icu::UnicodeString::doAppend(a3, (uint64_t)&v12, 0, 1);
    if (!v5) {
      return a3;
    }
    goto LABEL_14;
  }
  uint64_t v8 = 0;
  do
  {
    *((_DWORD *)v13 + v8++) = v4 % 0xA;
    BOOL v9 = v4 > 9;
    v4 /= 0xAu;
  }
  while (v9);
  LODWORD(v5) = v8;
  if (a1 < 0) {
    goto LABEL_13;
  }
LABEL_8:
  if (!v5) {
    return a3;
  }
LABEL_14:
  unint64_t v5 = v5;
  do
  {
    __int16 v12 = *(_WORD *)&v11[4 * v5] + 48;
    icu::UnicodeString::doAppend(a3, (uint64_t)&v12, 0, 1);
    BOOL v9 = v5-- > 1;
  }
  while (v9);
  return a3;
}

void icu::VTimeZone::appendUNTIL(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    unsigned int v5 = *(unsigned __int16 *)(a3 + 8);
    int v6 = (__int16)v5;
    int v7 = v5 >> 5;
    if (v6 < 0) {
      int v7 = *(_DWORD *)(a3 + 12);
    }
    if (v7 >= 1)
    {
      uint64_t v9 = *a2;
      __int16 v15 = 59;
      icu::UnicodeString::doAppend(v9, (uint64_t)&v15, 0, 1);
      icu::UnicodeString::doAppend(*a2, (uint64_t)L"UNTIL", 0, 0xFFFFFFFFLL);
      uint64_t v10 = *a2;
      __int16 v16 = 61;
      icu::UnicodeString::doAppend(v10, (uint64_t)&v16, 0, 1);
      unsigned int v11 = *(unsigned __int16 *)(a3 + 8);
      int v12 = (__int16)v11;
      unsigned int v13 = v11 >> 5;
      if (v12 >= 0) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = *(unsigned int *)(a3 + 12);
      }
      icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)a3, 0, v14);
    }
  }
}

void icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int a11, int *a12)
{
  if (*a12 > 0) {
    return;
  }
  int v13 = a8;
  if (a8 % 7 == 1)
  {
    int v18 = (unint64_t)(2454267027 * (a8 + 6)) >> 32;
LABEL_5:
    icu::VTimeZone::writeZonePropsByDOW(a1, a2, a3, a4, a5, a6, a7, (v18 >> 2) + (v18 >> 31), a9, a10, a11, a12);
    return;
  }
  if (a7 != 1)
  {
    int v19 = dword_18CA98814[a7] - a8;
    if (v19 % 7 == 6)
    {
      int v18 = ((unint64_t)(1840700269 * (v19 + 1)) >> 32) + ~v19;
      goto LABEL_5;
    }
  }
  icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a12);
  if (*a12 > 0) {
    return;
  }
  if (v13 <= 0)
  {
    if (a7 >= 1) {
      int v25 = a7 - 1;
    }
    else {
      int v25 = 11;
    }
    icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(v20, a2, v25, v13 - 1, a11, 1 - v13, a5, a12, 1.83882169e17);
    if (*a12 >= 1) {
      return;
    }
    int v22 = v13 + 6;
    int v13 = 1;
  }
  else
  {
    int v21 = dword_18CA98814[a7];
    int v22 = 7;
    int v23 = v13 + 6 - v21;
    if (v13 + 6 > v21)
    {
      if (a7 <= 10) {
        int v24 = a7 + 1;
      }
      else {
        int v24 = 0;
      }
      icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(v20, a2, v24, 1, a11, v23, a5, a12, 1.83882169e17);
      if (*a12 > 0) {
        return;
      }
      int v22 = 7 - v23;
    }
  }
  icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(v20, a2, a7, v13, a11, v22, a5, a12, a10);
  if (*a12 <= 0)
  {
    icu::VTimeZone::endZoneProps(v26, a2, a3, a12);
  }
}

void icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int a6, int a7, int *a8, double a9)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*a8 <= 0)
  {
    int v14 = a4;
    if (a3 != 1 && a4 < 0) {
      int v14 = a4 + dword_18CA98814[a3] + 1;
    }
    icu::VTimeZone::beginRRULE(a1, a2, a3, a8);
    if (*a8 <= 0)
    {
      icu::UnicodeString::doAppend(*a2, (uint64_t)"B", 0, 0xFFFFFFFFLL);
      v28[3] = "B";
      uint64_t v16 = *a2;
      LOWORD(v30) = 61;
      icu::UnicodeString::doAppend(v16, (uint64_t)&v30, 0, 1);
      long long v17 = &aS_4[6 * a5 - 6];
      icu::UnicodeString::doAppend(*a2, (uint64_t)v17, 0, 0xFFFFFFFFLL);
      _OWORD v28[2] = v17;
      uint64_t v18 = *a2;
      LOWORD(v30) = 59;
      icu::UnicodeString::doAppend(v18, (uint64_t)&v30, 0, 1);
      icu::UnicodeString::doAppend(*a2, (uint64_t)L"BYMONTHDAY", 0, 0xFFFFFFFFLL);
      v28[1] = L"BYMONTHDAY";
      uint64_t v19 = *a2;
      LOWORD(v30) = 61;
      icu::UnicodeString::doAppend(v19, (uint64_t)&v30, 0, 1);
      long long v31 = 0u;
      long long v32 = 0u;
      uint64_t v34 = 0;
      long long v33 = 0u;
      long long v30 = &unk_1EDA47700;
      LOWORD(v31) = 2;
      sub_18CA33F80(v14, 0, (uint64_t)&v30);
      if ((v31 & 0x8000u) == 0) {
        uint64_t v20 = (unsigned __int16)v31 >> 5;
      }
      else {
        uint64_t v20 = DWORD1(v31);
      }
      icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v30, 0, v20);
      if (a6 >= 2)
      {
        int v21 = a6 - 1;
        int v22 = v14 + 1;
        do
        {
          uint64_t v23 = *a2;
          __int16 v29 = 44;
          icu::UnicodeString::doAppend(v23, (uint64_t)&v29, 0, 1);
          if (v31) {
            __int16 v24 = 2;
          }
          else {
            __int16 v24 = v31 & 0x1F;
          }
          LOWORD(v31) = v24;
          sub_18CA33F80(v22, 0, (uint64_t)&v30);
          if ((v31 & 0x8000u) == 0) {
            uint64_t v25 = (unsigned __int16)v31 >> 5;
          }
          else {
            uint64_t v25 = DWORD1(v31);
          }
          icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v30, 0, v25);
          ++v22;
          --v21;
        }
        while (v21);
      }
      if (a9 == 1.83882169e17
        || (uint64_t v26 = sub_18CA33958((uint64_t)&v30, (double)a7 + a9),
            icu::VTimeZone::appendUNTIL(v26, a2, (uint64_t)&v30, a8),
            unint64_t v27 = *a8,
            (int)v27 <= 0))
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
        v28[0] = L"\r\n";
        unint64_t v27 = (unint64_t)v28;
      }
      icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)&v30);
    }
  }
}

void icu::VTimeZone::writeZonePropsByDOW_LEQ_DOM(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int a11, int *a12)
{
  if (*a12 <= 0)
  {
    if (a8 == 7 * (a8 / 7))
    {
      unsigned int v12 = a8 / 7;
      goto LABEL_6;
    }
    if (a7 == 1)
    {
      if (a8 == 29)
      {
        a7 = 1;
        unsigned int v12 = -1;
LABEL_6:
        icu::VTimeZone::writeZonePropsByDOW(a1, a2, a3, a4, a5, a6, a7, v12, a9, a10, a11, a12);
        return;
      }
    }
    else
    {
      int v13 = dword_18CA98814[a7] - a8;
      if ((-1227133513 * v13 + 306783378) <= 0x24924924)
      {
        unsigned int v12 = ((int)(((unint64_t)(1840700269 * v13) >> 32) - v13) >> 2)
            + ((((unint64_t)(1840700269 * v13) >> 32) - v13) >> 31)
            - 1;
        goto LABEL_6;
      }
    }
    icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM(a1, a2, a3, a4, a5, a6, a7, a8 - 6, a9, a10, a11, a12);
  }
}

uint64_t sub_18CA34820(unsigned int a1, uint64_t a2)
{
  unsigned int v3 = a1;
  if (*(_WORD *)(a2 + 8)) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *(_WORD *)(a2 + 8) & 0x1F;
  }
  *(_WORD *)(a2 + 8) = v4;
  if ((a1 & 0x80000000) != 0)
  {
    __int16 v7 = 45;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v7, 0, 1);
    unsigned int v3 = -v3;
  }
  else
  {
    __int16 v6 = 43;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v6, 0, 1);
  }
  sub_18CA33F80(v3 / 0x36EE80, 2u, a2);
  sub_18CA33F80((unsigned __int16)(v3 / 0xEA60) % 0x3Cu, 2u, a2);
  return sub_18CA33F80(v3 / 0x3E8 - 60 * ((71582789 * (unint64_t)(v3 / 0x3E8)) >> 32), 2u, a2);
}

uint64_t sub_18CA3493C(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0;
  }
  if (a3 < 1) {
    goto LABEL_9;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
  int v6 = a3 + a2;
  unsigned int v7 = v5 >> 5;
  if (*(__int16 *)(a1 + 8) < 0)
  {
    signed int v9 = *(_DWORD *)(a1 + 12);
    if (v9 < (int)a2 || v6 > v9) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v8 = (int)v7 >= (int)a2 && v6 <= (int)v7;
    signed int v9 = v5 >> 5;
    if (!v8)
    {
LABEL_9:
      uint64_t result = 0;
      *a4 = 3;
      return result;
    }
  }
  if (v9 > a2)
  {
    uint64_t v11 = a1 + 10;
    if ((v5 & 2) == 0) {
      uint64_t v11 = *(void *)(a1 + 24);
    }
    if (*(_WORD *)(v11 + 2 * (int)a2) == 43)
    {
      int v12 = 1;
LABEL_27:
      if (!--a3) {
        return 0;
      }
      ++a2;
      goto LABEL_30;
    }
  }
  unsigned int v13 = *(_DWORD *)(a1 + 12);
  if ((v5 & 0x8000u) == 0) {
    unsigned int v13 = v5 >> 5;
  }
  if (v13 > a2)
  {
    uint64_t v14 = a1 + 10;
    if ((v5 & 2) == 0) {
      uint64_t v14 = *(void *)(a1 + 24);
    }
    if (*(_WORD *)(v14 + 2 * (int)a2) == 45)
    {
      int v12 = -1;
      goto LABEL_27;
    }
  }
  int v12 = 1;
LABEL_30:
  if ((v5 & 0x8000u) != 0) {
    unsigned int v7 = *(_DWORD *)(a1 + 12);
  }
  if ((v5 & 2) != 0) {
    uint64_t v15 = a1 + 10;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  BOOL v16 = v7 > a2;
  if (v7 >= a2) {
    uint64_t v17 = v7 - a2;
  }
  else {
    uint64_t v17 = 0;
  }
  int v18 = 0;
  if (v16)
  {
    uint64_t v19 = 0;
    uint64_t v20 = v15 + 2 * (int)a2;
    BOOL v22 = 1;
    do
    {
      int v21 = *(unsigned __int16 *)(v20 + 2 * v19);
      if ((v21 - 48) >= 0xA) {
        break;
      }
      int v18 = v21 + 10 * v18 - 48;
      if (a3 - 1 == v19) {
        return (v18 * v12);
      }
      BOOL v22 = ++v19 < a3;
    }
    while (v17 != v19);
  }
  else
  {
    BOOL v22 = 1;
  }
  *a4 = 3;
  unsigned int v23 = v18 * v12;
  if (v22) {
    return 0;
  }
  else {
    return v23;
  }
}

void *sub_18CA34AB8(void *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5, int *a6, double *a7, int *a8)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (*a8 > 0) {
    return result;
  }
  uint64_t v11 = (uint64_t)result;
  int v12 = 0;
  LODWORD(v13) = 0;
  *a2 = -1;
  *a3 = 0;
  *a4 = 0;
  *a7 = -1.84303903e17;
  long long v81 = 0u;
  uint64_t v84 = 0;
  long long v83 = 0u;
  long long v82 = 0u;
  unint64_t v80 = &unk_1EDA47700;
  LOWORD(v81) = 2;
  long long v76 = 0u;
  uint64_t v79 = 0;
  long long v78 = 0u;
  long long v77 = 0u;
  uint64_t v74 = 0;
  uint64_t v75 = &unk_1EDA47700;
  LOWORD(v76) = 2;
  long long v71 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  unsigned int v64 = 1;
  int v70 = &unk_1EDA47700;
  LOWORD(v71) = 2;
  do
  {
    while (1)
    {
      unsigned int v14 = *(unsigned __int16 *)(v11 + 8);
      if (v12 < 0)
      {
        int v16 = 0;
        if ((v14 & 0x8000) != 0) {
          unsigned int v15 = *(_DWORD *)(v11 + 12);
        }
        else {
          unsigned int v15 = v14 >> 5;
        }
      }
      else if ((v14 & 0x8000) != 0)
      {
        unsigned int v15 = *(_DWORD *)(v11 + 12);
        if ((int)v15 >= v12) {
          int v16 = v12;
        }
        else {
          int v16 = *(_DWORD *)(v11 + 12);
        }
      }
      else
      {
        unsigned int v15 = v14 >> 5;
        if (v15 >= v12) {
          int v16 = v12;
        }
        else {
          int v16 = v15;
        }
      }
      int v17 = icu::UnicodeString::doIndexOf(v11, 0x3Bu, v16, v15 - v16);
      if (v17 != -1)
      {
        icu::UnicodeString::unBogus((uint64_t)&v80);
        if ((v81 & 0x8000u) == 0) {
          uint64_t v18 = (unsigned __int16)v81 >> 5;
        }
        else {
          uint64_t v18 = DWORD1(v81);
        }
        icu::UnicodeString::doReplace((icu::UnicodeString *)&v80, 0, v18, (const icu::UnicodeString *)v11, v12, (v17 - v12));
        int v12 = v17 + 1;
        goto LABEL_32;
      }
      icu::UnicodeString::unBogus((uint64_t)&v80);
      unsigned int v19 = *(unsigned __int16 *)(v11 + 8);
      unsigned int v20 = v19 >> 5;
      if (v12 < 0)
      {
        int v21 = 0;
LABEL_25:
        int v22 = v21;
        goto LABEL_26;
      }
      if ((v19 & 0x8000) == 0)
      {
        int v21 = v19 >> 5;
        int v22 = v12;
        if (v12 <= v19 >> 5) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
      int v21 = *(_DWORD *)(v11 + 12);
      int v22 = v12;
      if (v21 < v12) {
        goto LABEL_25;
      }
LABEL_26:
      if ((v81 & 0x8000u) == 0) {
        uint64_t v23 = (unsigned __int16)v81 >> 5;
      }
      else {
        uint64_t v23 = DWORD1(v81);
      }
      if ((v19 & 0x8000u) != 0) {
        unsigned int v20 = *(_DWORD *)(v11 + 12);
      }
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v80, 0, v23, (const icu::UnicodeString *)v11, v22, v20 - v22);
LABEL_32:
      if ((v81 & 0x8000u) == 0) {
        int32_t v24 = (unsigned __int16)v81 >> 5;
      }
      else {
        int32_t v24 = DWORD1(v81);
      }
      uint64_t v25 = icu::UnicodeString::doIndexOf((uint64_t)&v80, 0x3Du, 0, v24);
      if (v25 == -1) {
        goto LABEL_132;
      }
      uint64_t v26 = v25;
      icu::UnicodeString::unBogus((uint64_t)&v75);
      if ((v76 & 0x8000u) == 0) {
        uint64_t v27 = (unsigned __int16)v76 >> 5;
      }
      else {
        uint64_t v27 = DWORD1(v76);
      }
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v75, 0, v27, (const icu::UnicodeString *)&v80, 0, v26);
      icu::UnicodeString::unBogus((uint64_t)&v70);
      unsigned int v28 = 0;
      int v29 = (unsigned __int16)v81 >> 5;
      if ((int)v26 < -1) {
        goto LABEL_42;
      }
      int v30 = v26 + 1;
      if ((v81 & 0x8000) == 0)
      {
        unsigned int v28 = (unsigned __int16)v81 >> 5;
        if (v26 < v28) {
          goto LABEL_43;
        }
LABEL_42:
        int v30 = v28;
        goto LABEL_43;
      }
      unsigned int v28 = DWORD1(v81);
      if (SDWORD1(v81) <= (int)v26) {
        goto LABEL_42;
      }
LABEL_43:
      if ((v71 & 0x8000u) == 0) {
        uint64_t v31 = (unsigned __int16)v71 >> 5;
      }
      else {
        uint64_t v31 = DWORD1(v71);
      }
      if ((v81 & 0x8000u) != 0) {
        int v29 = DWORD1(v81);
      }
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v70, 0, v31, (const icu::UnicodeString *)&v80, v30, (v29 - v30));
      int32_t v32 = (v76 & 0x8000u) == 0 ? (unsigned __int16)v76 >> 5 : DWORD1(v76);
      int v33 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v32, (uint64_t)L"FREQ", 0, -1);
      v69[6] = L"FREQ";
      if (v33) {
        break;
      }
      if ((v71 & 0x8000u) == 0) {
        int32_t v54 = (unsigned __int16)v71 >> 5;
      }
      else {
        int32_t v54 = DWORD1(v71);
      }
      int v55 = icu::UnicodeString::doCompare((uint64_t)&v70, 0, v54, (uint64_t)"Y", 0, -1);
      v69[0] = "Y";
      uint64_t v47 = (uint64_t)v69;
      if (v55) {
        goto LABEL_132;
      }
      unsigned int v64 = 0;
      if (v17 == -1) {
        goto LABEL_139;
      }
    }
    if ((v76 & 0x8000u) == 0) {
      int32_t v34 = (unsigned __int16)v76 >> 5;
    }
    else {
      int32_t v34 = DWORD1(v76);
    }
    int v35 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v34, (uint64_t)L"UNTIL", 0, -1);
    v69[5] = L"UNTIL";
    if (v35)
    {
      if ((v76 & 0x8000u) == 0) {
        int32_t v36 = (unsigned __int16)v76 >> 5;
      }
      else {
        int32_t v36 = DWORD1(v76);
      }
      int v37 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v36, (uint64_t)L"BYMONTH", 0, -1);
      _OWORD v69[4] = L"BYMONTH";
      if (v37)
      {
        if ((v76 & 0x8000u) == 0) {
          int32_t v38 = (unsigned __int16)v76 >> 5;
        }
        else {
          int32_t v38 = DWORD1(v76);
        }
        int v39 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v38, (uint64_t)"B", 0, -1);
        void v69[3] = "B";
        if (!v39)
        {
          if ((v71 & 0x8000u) == 0) {
            unsigned int v49 = (unsigned __int16)v71 >> 5;
          }
          else {
            unsigned int v49 = DWORD1(v71);
          }
          if (v49 - 5 < 0xFFFFFFFD) {
            goto LABEL_132;
          }
          if (v49 < 3) {
            goto LABEL_121;
          }
          int v50 = (unsigned __int16 *)&v71 + 1;
          if ((v71 & 2) == 0) {
            int v50 = (unsigned __int16 *)v72;
          }
          int v51 = *v50;
          if (v51 != 43)
          {
            if (v51 == 45)
            {
              int v52 = -1;
LABEL_117:
              int v56 = sub_18CA3493C((uint64_t)&v70, v49 - 3, 1, a8);
              if (*a8 > 0 || !v56 || v56 > 4) {
                goto LABEL_132;
              }
              *a4 = v56 * v52;
              icu::UnicodeString::doReplace((uint64_t)&v70, 0, v49 - 2, 0, 0, 0);
LABEL_121:
              uint64_t v57 = -7;
              int v58 = "S";
              while (1)
              {
                int32_t v59 = (v71 & 0x8000u) == 0 ? (unsigned __int16)v71 >> 5 : DWORD1(v71);
                int v60 = icu::UnicodeString::doCompare((uint64_t)&v70, 0, v59, (uint64_t)v58, 0, 2);
                v69[1] = v58;
                if (!v60) {
                  break;
                }
                v58 += 6;
                if (__CFADD__(v57++, 1)) {
                  goto LABEL_132;
                }
              }
              *a3 = v57 + 8;
              continue;
            }
            if (v49 == 4) {
              goto LABEL_132;
            }
          }
          int v52 = 1;
          goto LABEL_117;
        }
        if ((v76 & 0x8000u) == 0) {
          int32_t v40 = (unsigned __int16)v76 >> 5;
        }
        else {
          int32_t v40 = DWORD1(v76);
        }
        int v41 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v40, (uint64_t)L"BYMONTHDAY", 0, -1);
        v69[2] = L"BYMONTHDAY";
        if (!v41)
        {
          uint64_t v13 = 0;
          unsigned int v42 = 0;
          while (1)
          {
            if ((v42 & 0x80000000) != 0)
            {
              int v44 = 0;
              unsigned int v43 = (v71 & 0x8000) != 0 ? DWORD1(v71) : (unsigned __int16)v71 >> 5;
            }
            else if ((v71 & 0x8000) != 0)
            {
              unsigned int v43 = DWORD1(v71);
              int v44 = SDWORD1(v71) >= (int)v42 ? v42 : DWORD1(v71);
            }
            else
            {
              unsigned int v43 = (unsigned __int16)v71 >> 5;
              int v44 = v43 >= v42 ? v42 : (unsigned __int16)v71 >> 5;
            }
            int v45 = icu::UnicodeString::doIndexOf((uint64_t)&v70, 0x2Cu, v44, v43 - v44);
            int v46 = v45;
            if (v45 == -1)
            {
              if ((__int16)v71 < 0) {
                int v46 = DWORD1(v71);
              }
              else {
                int v46 = (unsigned __int16)v71 >> 5;
              }
            }
            if (v13 >= *a6) {
              break;
            }
            *(_DWORD *)(a5 + 4 * v13) = sub_18CA3493C((uint64_t)&v70, v42, v46 - v42, a8);
            uint64_t v47 = *a8;
            if ((int)v47 > 0) {
              goto LABEL_137;
            }
            ++v13;
            unsigned int v42 = v46 + 1;
            if (v45 == -1) {
              goto LABEL_130;
            }
          }
          uint64_t v47 = 15;
          goto LABEL_136;
        }
      }
      else
      {
        if ((__int16)v71 < 0)
        {
          int v48 = DWORD1(v71);
          if (SDWORD1(v71) > 2) {
            goto LABEL_132;
          }
        }
        else
        {
          if ((unsigned __int16)v71 > 0x5Fu) {
            goto LABEL_132;
          }
          int v48 = (unsigned __int16)v71 >> 5;
        }
        int v53 = sub_18CA3493C((uint64_t)&v70, 0, v48, a8);
        *a2 = v53 - 1;
        uint64_t v47 = *a8;
        if ((int)v47 > 0 || (v53 - 13) < 0xFFFFFFF4) {
          goto LABEL_133;
        }
      }
    }
    else
    {
      *a7 = sub_18CA30AA0((uint64_t)&v70, 0, a8);
      uint64_t v47 = *a8;
      if ((int)v47 >= 1) {
        goto LABEL_137;
      }
    }
LABEL_130:
    ;
  }
  while (v17 != -1);
  uint64_t v47 = v64;
  if (v64)
  {
LABEL_132:
    uint64_t v47 = *a8;
LABEL_133:
    if ((int)v47 > 0) {
      goto LABEL_137;
    }
    uint64_t v47 = 3;
LABEL_136:
    *a8 = v47;
    goto LABEL_137;
  }
LABEL_139:
  *a6 = v13;
LABEL_137:
  icu::UnicodeString::~UnicodeString((void *)v47, (icu::UnicodeString *)&v70);
  icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)&v75);
  return icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)&v80);
}

icu::VTimeZone *vzone_openID(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(v8, 0, sizeof(v8));
  uint64_t v7 = a1;
  icu::UnicodeString::UnicodeString(v8, a2 == -1, &v7);
  uint64_t v6 = v7;
  unsigned int v3 = icu::VTimeZone::createVTimeZoneByID((UChar **)v8, v2, &v6);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v8);
  return v3;
}

icu::VTimeZone *vzone_openData(uint64_t a1, int a2, UErrorCode *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(v9, 0, sizeof(v9));
  uint64_t v8 = a1;
  icu::UnicodeString::UnicodeString(v9, a2 == -1, &v8);
  Vuint64_t TimeZone = icu::VTimeZone::createVTimeZone((icu::VTimeZone *)v9, a3, v4);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
  return VTimeZone;
}

uint64_t vzone_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t vzone_equals(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
}

uint64_t vzone_getTZURL(icu::VTimeZone *a1, void **a2, int *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v15 = 0;
  long long v14 = 0u;
  uint64_t v11 = (UChar *)&unk_1EDA47700;
  LOWORD(v12) = 2;
  uint64_t TZURL = icu::VTimeZone::getTZURL(a1, &v11);
  uint64_t v6 = 0;
  char v7 = v12;
  if ((v12 & 0x8000u) == 0) {
    int v8 = (unsigned __int16)v12 >> 5;
  }
  else {
    int v8 = DWORD1(v12);
  }
  *a3 = v8;
  if ((v7 & 0x11) == 0)
  {
    if ((v7 & 2) != 0) {
      uint64_t v6 = (char *)&v12 + 2;
    }
    else {
      uint64_t v6 = (char *)v13;
    }
  }
  memcpy(*a2, v6, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v11);
  return TZURL;
}

void *vzone_setTZURL(UChar **a1, uint64_t a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(v7, 0, sizeof(v7));
  uint64_t v6 = a2;
  icu::UnicodeString::UnicodeString(v7, a3 == -1, &v6);
  icu::VTimeZone::setTZURL(a1, (UChar **)v7);
  return icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
}

void *vzone_write(icu::VTimeZone *a1, void *a2, int *a3, UErrorCode *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v15 = 0;
  long long v14 = 0u;
  uint64_t v11 = &unk_1EDA47700;
  LOWORD(v12) = 2;
  icu::VTimeZone::write(a1, (icu::UnicodeString *)&v11, a4);
  int v6 = (unsigned __int16)v12 >> 5;
  if ((v12 & 0x8000u) != 0) {
    int v6 = DWORD1(v12);
  }
  *a3 = v6;
  char v7 = uprv_malloc(v6);
  uint64_t v8 = 0;
  *a2 = v7;
  if ((v12 & 0x11) == 0)
  {
    if ((v12 & 2) != 0) {
      uint64_t v8 = (char *)&v12 + 2;
    }
    else {
      uint64_t v8 = (char *)v13;
    }
  }
  memcpy(v7, v8, *a3);
  return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v11);
}

void *vzone_writeFromStart(icu::VTimeZone *a1, void *a2, int *a3, UErrorCode *a4, double a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v16 = 0;
  long long v15 = 0u;
  long long v12 = &unk_1EDA47700;
  LOWORD(v13) = 2;
  icu::VTimeZone::write(a1, a5, (icu::UnicodeString *)&v12, a4);
  int v7 = (unsigned __int16)v13 >> 5;
  if ((v13 & 0x8000u) != 0) {
    int v7 = DWORD1(v13);
  }
  *a3 = v7;
  uint64_t v8 = uprv_malloc(v7);
  uint64_t v9 = 0;
  *a2 = v8;
  if ((v13 & 0x11) == 0)
  {
    if ((v13 & 2) != 0) {
      uint64_t v9 = (char *)&v13 + 2;
    }
    else {
      uint64_t v9 = (char *)v14;
    }
  }
  memcpy(v8, v9, *a3);
  return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v12);
}

void *vzone_writeSimple(UChar **a1, void *a2, int *a3, UErrorCode *a4, double a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v16 = 0;
  long long v15 = 0u;
  long long v12 = &unk_1EDA47700;
  LOWORD(v13) = 2;
  icu::VTimeZone::writeSimple(a1, a5, (icu::UnicodeString *)&v12, a4);
  int v7 = (unsigned __int16)v13 >> 5;
  if ((v13 & 0x8000u) != 0) {
    int v7 = DWORD1(v13);
  }
  *a3 = v7;
  uint64_t v8 = uprv_malloc(v7);
  uint64_t v9 = 0;
  *a2 = v8;
  if ((v13 & 0x11) == 0)
  {
    if ((v13 & 2) != 0) {
      uint64_t v9 = (char *)&v13 + 2;
    }
    else {
      uint64_t v9 = (char *)v14;
    }
  }
  memcpy(v8, v9, *a3);
  return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v12);
}

uint64_t vzone_getOffset2(icu::VTimeZone *a1, unsigned __int8 a2, int a3, int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  return icu::VTimeZone::getOffset(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

const UChar *icu::ZoneMeta::getCanonicalCLDRID(icu::ZoneMeta *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  unsigned int v6 = *((unsigned __int16 *)this + 4);
  if (v6) {
    goto LABEL_7;
  }
  int v7 = (__int16)v6;
  int v8 = v6 >> 5;
  if (v7 < 0) {
    int v8 = *((_DWORD *)this + 3);
  }
  if (v8 >= 129) {
    goto LABEL_7;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1EB20BE78, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1EB20BE78))
  {
    int v9 = dword_1EB20BE7C;
    if (dword_1EB20BE7C >= 1)
    {
      ID = 0;
      goto LABEL_8;
    }
  }
  else
  {
    sub_18CA35D3C((int *)a2);
    dword_1EB20BE7C = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_1EB20BE78);
  }
  if (*(int *)a2 > 0) {
    return 0;
  }
  int v27 = 0;
  memset(v37, 0, 258);
  uint64_t v26 = v37;
  icu::UnicodeString::extract((uint64_t)this, &v26, 129, &v27);
  if (!uprv_isInvariantUString(v37, -1))
  {
LABEL_7:
    ID = 0;
    int v9 = 1;
LABEL_8:
    *(_DWORD *)a2 = v9;
    return ID;
  }
  umtx_lock((atomic_ullong *)&unk_1EB20BE80);
  ID = (const UChar *)uhash_get(qword_1EB20BE58, (uint64_t)v37);
  umtx_unlock((std::mutex **)&unk_1EB20BE80);
  if (ID) {
    return ID;
  }
  char v36 = 0;
  long long v35 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)unsigned int v28 = 0u;
  icu::UnicodeString::extract((uint64_t)this, 0, 0x7FFFFFFFLL, v28, 129);
  uint64_t v11 = &v28[1];
  if (v28[0])
  {
    long long v12 = &v28[1];
    do
    {
      int v13 = *v12;
      if (v13 == 47)
      {
        int v13 = 58;
        char *v12 = 58;
      }
      ++v12;
    }
    while (v13);
  }
  uint64_t v14 = ures_openDirect(0, (uint64_t)"keyTypeData", (uint64_t)&v27);
  uint64_t v15 = ures_getByKey(v14, "typeMap", 0, &v27);
  ures_getByKey(v15, "timezone", v15, &v27);
  ures_getByKey(v15, v28, v15, &v27);
  if (v27 > 0)
  {
    int v17 = 0;
LABEL_25:
    int v27 = 0;
    ures_getByKey(v14, "typeAlias", v15, &v27);
    ures_getByKey(v15, "timezone", v15, &v27);
    StringByuint64_t Key = ures_getStringByKey(v15, v28, 0, &v27);
    if (v27 > 0 || (ID = StringByKey) == 0)
    {
      unsigned int v20 = icu::TimeZone::dereferOlsonLink(this, v19);
      ID = v20;
      if (v20)
      {
        int32_t v21 = u_strlen(v20);
        u_UCharsToChars(ID, v28, v21);
        v28[v21] = 0;
        if (v28[0])
        {
          do
          {
            int v22 = *v11;
            if (v22 == 47)
            {
              int v22 = 58;
              char *v11 = 58;
            }
            ++v11;
          }
          while (v22);
        }
        int v27 = 0;
        uint64_t v23 = ures_getStringByKey(v15, v28, 0, &v27);
        if (v27 > 0) {
          int v17 = 1;
        }
        else {
          ID = v23;
        }
      }
      else
      {
        *(_DWORD *)a2 = 1;
      }
    }
    goto LABEL_38;
  }
  ID = icu::TimeZone::findID(this, v16);
  int v17 = 1;
  if (!ID) {
    goto LABEL_25;
  }
LABEL_38:
  ures_close(v15);
  ures_close(v14);
  if (*(int *)a2 <= 0)
  {
    umtx_lock((atomic_ullong *)&unk_1EB20BE80);
    if (!uhash_get(qword_1EB20BE58, (uint64_t)v37))
    {
      uint64_t v25 = icu::TimeZone::findID(this, v24);
      if (v25) {
        uhash_put(qword_1EB20BE58, (uint64_t)v25, (uint64_t)ID, (int *)a2);
      }
    }
    if (v17 && *(int *)a2 <= 0 && !uhash_get(qword_1EB20BE58, (uint64_t)ID)) {
      uhash_put(qword_1EB20BE58, (uint64_t)ID, (uint64_t)ID, (int *)a2);
    }
    umtx_unlock((std::mutex **)&unk_1EB20BE80);
  }
  return ID;
}

void sub_18CA35D3C(int *a1)
{
  qword_1EB20BE58 = (uint64_t)uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, a1);
  if (!qword_1EB20BE58)
  {
    *a1 = 7;
    goto LABEL_5;
  }
  if (*a1 >= 1) {
LABEL_5:
  }
    qword_1EB20BE58 = 0;

  sub_18CA0A25C(0x12u, (uint64_t)sub_18CA37BFC);
}

const icu::UnicodeString *icu::ZoneMeta::getCanonicalCLDRID(icu::ZoneMeta *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(this, a3, (UErrorCode *)a3);
  if (*(int *)a3 > 0 || CanonicalCLDRID == 0)
  {
    icu::UnicodeString::setToBogus(a2);
  }
  else
  {
    int v9 = CanonicalCLDRID;
    icu::UnicodeString::setTo(a2, 1, &v9, -1);
  }
  return a2;
}

const UChar *icu::ZoneMeta::getCanonicalCLDRID(icu::ZoneMeta *this, const icu::TimeZone *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  {
    return (const UChar *)*((void *)this + 19);
  }
  int v7 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v12 = 0;
  long long v11 = 0u;
  int v8 = (UChar *)&unk_1EDA47700;
  LOWORD(v9) = 2;
  icu::UnicodeString::operator=(&v8, (UChar **)this + 1);
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID((icu::ZoneMeta *)&v8, (const icu::UnicodeString *)&v7, v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v8);
  return CanonicalCLDRID;
}

const icu::UnicodeString *icu::ZoneMeta::getIanaID(icu::ZoneMeta *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(this, a3, (UErrorCode *)a3);
  if (*(int *)a3 > 0 || CanonicalCLDRID == 0)
  {
    icu::UnicodeString::setToBogus(a2);
  }
  else
  {
    int v8 = CanonicalCLDRID;
    int v24 = 0;
    memset(v36, 0, 64);
    icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)CanonicalCLDRID);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v25, "/");
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v27, ":");
    if (SLOWORD(v36[2]) >= 0) {
      int32_t v9 = LOWORD(v36[2]) >> 5;
    }
    else {
      int32_t v9 = v36[3];
    }
    if ((SWORD4(v25[0]) & 0x8000u) == 0) {
      uint64_t v10 = WORD4(v25[0]) >> 5;
    }
    else {
      uint64_t v10 = HIDWORD(v25[0]);
    }
    int v11 = WORD4(v27) >> 5;
    if (SWORD4(v27) < 0) {
      int v11 = HIDWORD(v27);
    }
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)v36, 0, v9, (const icu::UnicodeString *)v25, 0, v10, (const icu::UnicodeString *)&v27, 0, v11);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v27);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v25);
    char v35 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    if (SLOWORD(v36[2]) >= 0) {
      uint64_t v14 = LOWORD(v36[2]) >> 5;
    }
    else {
      uint64_t v14 = v36[3];
    }
    icu::UnicodeString::extract((uint64_t)v36, 0, v14, (char *)&v27, 129);
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v25);
    ures_openDirectFillIn((uint64_t)v25, 0, "keyTypeData", &v24);
    ures_getByKey((uint64_t)v25, "ianaMap", (uint64_t)v25, &v24);
    ures_getByKey((uint64_t)v25, "timezone", (uint64_t)v25, &v24);
    int v23 = 0;
    StringByuint64_t Key = ures_getStringByKey((uint64_t)v25, (const char *)&v27, &v23, &v24);
    if (v24 <= 0)
    {
      int v22 = StringByKey;
      icu::UnicodeString::setTo(a2, 1, &v22, -1);
      unsigned int v20 = v22;
      uint64_t v16 = &v20;
    }
    else
    {
      int32_t v21 = v8;
      icu::UnicodeString::setTo(a2, 1, &v21, -1);
      unsigned int v19 = v21;
      uint64_t v16 = &v19;
    }
    icu::StackUResourceBundle::~StackUResourceBundle(v16, (icu::StackUResourceBundle *)v25);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v36);
  }
  return a2;
}

const icu::UnicodeString *icu::ZoneMeta::getCanonicalCountry(int32_t *this, const icu::UnicodeString *a2, UErrorCode *a3, signed __int8 *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a3) {
    *(unsigned char *)a3 = 0;
  }
  Region = icu::TimeZone::getRegion((icu::TimeZone *)this, a2, a3);
  if (!Region || (int v8 = (UChar *)Region, !u_strcmp((const UChar *)"0", Region)))
  {
    icu::UnicodeString::setToBogus(a2);
    return a2;
  }
  icu::UnicodeString::unBogus((uint64_t)a2);
  unsigned int v9 = *((unsigned __int16 *)a2 + 4);
  int v10 = (__int16)v9;
  unsigned int v11 = v9 >> 5;
  if (v10 >= 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = *((unsigned int *)a2 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)a2, 0, v12, (uint64_t)v8, 0, 0xFFFFFFFFLL);
  if (a3)
  {
    char v36 = 0;
    *(_WORD *)char v35 = 0;
    int v34 = 0;
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192BC8, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192BC8))
    {
      if (dword_1E9192BCC > 0) {
        return a2;
      }
    }
    else
    {
      sub_18CA365D4(&v34, v13, v14);
      dword_1E9192BCC = v34;
      icu::umtx_initImplPostInit(&dword_1E9192BC8);
      if (v34 >= 1) {
        return a2;
      }
    }
    umtx_lock((atomic_ullong *)&unk_1EB20BE80);
    if ((icu::UVector::indexOf((icu::UVector *)qword_1E9192BB8, (uint64_t)v8, 0) & 0x80000000) == 0)
    {
LABEL_17:
      umtx_unlock((std::mutex **)&unk_1EB20BE80);
      *(unsigned char *)a3 = 1;
      return a2;
    }
    int v16 = icu::UVector::indexOf((icu::UVector *)qword_1E9192BC0, (uint64_t)v8, 0);
    umtx_unlock((std::mutex **)&unk_1EB20BE80);
    if (v16 < 0)
    {
      u_UCharsToChars(v8, v35, 2);
      uint64_t v17 = icu::TimeZone::createTimeZoneIDEnumeration(2, v35, 0, &v34);
      int v18 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v17 + 32))(v17, &v34);
      int v19 = v34;
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      umtx_lock((atomic_ullong *)&unk_1EB20BE80);
      v37[0] = U_ZERO_ERROR;
      if (v19 <= 0 && v18 == 1)
      {
        if ((icu::UVector::indexOf((icu::UVector *)qword_1E9192BB8, (uint64_t)v8, 0) & 0x80000000) != 0) {
          icu::UVector::addElement((icu::UVector *)qword_1E9192BB8, v8, v37);
        }
        goto LABEL_17;
      }
      if ((icu::UVector::indexOf((icu::UVector *)qword_1E9192BC0, (uint64_t)v8, 0) & 0x80000000) != 0) {
        icu::UVector::addElement((icu::UVector *)qword_1E9192BC0, v8, v37);
      }
      umtx_unlock((std::mutex **)&unk_1EB20BE80);
    }
    int32_t v33 = 0;
    if (!v35[0]) {
      u_UCharsToChars(v8, v35, 2);
    }
    uint64_t v20 = ures_openDirect(0, (uint64_t)"metaZones", (uint64_t)&v34);
    ures_getByKey(v20, "primaryZones", v20, &v34);
    StringByuint64_t Key = ures_getStringByKey(v20, v35, &v33, &v34);
    if (v34 <= 0)
    {
      uint64_t v22 = (uint64_t)StringByKey;
      unsigned int v23 = *((unsigned __int16 *)this + 4);
      int v24 = (__int16)v23;
      int32_t v25 = v23 >> 5;
      if (v24 >= 0) {
        int32_t v26 = v25;
      }
      else {
        int32_t v26 = this[3];
      }
      v31[1] = StringByKey;
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, v26, (uint64_t)StringByKey, 0, v33))
      {
        long long v38 = 0u;
        long long v39 = 0u;
        uint64_t v41 = 0;
        long long v40 = 0u;
        *(void *)uint64_t v37 = &unk_1EDA47700;
        LOWORD(v38) = 2;
        icu::TimeZone::getCanonicalID((icu::TimeZone *)this, (const icu::UnicodeString *)v37, (icu::UnicodeString *)&v34, v27, v28);
        uint64_t v29 = v34;
        if (v34 <= 0)
        {
          uint64_t v32 = v22;
          int v30 = sub_18C7EFDE8((uint64_t)v37, &v32, v33);
          v31[0] = v32;
          uint64_t v29 = (uint64_t)v31;
          if (!v30)
          {
            uint64_t v29 = 1;
            *(unsigned char *)a3 = 1;
          }
        }
        icu::UnicodeString::~UnicodeString((void *)v29, (icu::UnicodeString *)v37);
      }
      else
      {
        *(unsigned char *)a3 = 1;
      }
    }
    ures_close(v20);
  }
  return a2;
}

void sub_18CA365D4(int *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int16 v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x28, a2);
  if (v4)
  {
    __int16 v4 = (uint64_t *)icu::UVector::UVector((uint64_t)v4, 0, (uint64_t)uhash_compareUChars, a1);
  }
  else
  {
    uint64_t v6 = 7;
    *a1 = 7;
  }
  qword_1E9192BB8 = (uint64_t)v4;
  int v7 = icu::UMemory::operator new((uint64_t *)v6, (icu::UMemory *)0x28, v5);
  if (v7)
  {
    int v7 = (uint64_t *)icu::UVector::UVector((uint64_t)v7, 0, (uint64_t)uhash_compareUChars, a1);
    int v8 = *a1;
    qword_1E9192BC0 = (uint64_t)v7;
    if (v8 < 1) {
      goto LABEL_13;
    }
  }
  else
  {
    *a1 = 7;
    qword_1E9192BC0 = 0;
  }
  if (qword_1E9192BB8)
  {
    (*(void (**)(uint64_t))(*(void *)qword_1E9192BB8 + 8))(qword_1E9192BB8);
    int v7 = (uint64_t *)qword_1E9192BC0;
  }
  if (v7) {
    (*(void (**)(uint64_t *))(*v7 + 8))(v7);
  }
  qword_1E9192BB8 = 0;
  qword_1E9192BC0 = 0;
LABEL_13:

  sub_18CA0A25C(0x12u, (uint64_t)sub_18CA37BFC);
}

const icu::UnicodeString *icu::ZoneMeta::getMetazoneID(icu::ZoneMeta *this, const icu::UnicodeString *a2, double a3, icu::UnicodeString *a4)
{
  uint64_t MetazoneMappings = icu::ZoneMeta::getMetazoneMappings(this, a2);
  if (MetazoneMappings && (int v7 = (icu::UVector *)MetazoneMappings, *(int *)(MetazoneMappings + 8) >= 1))
  {
    unsigned int v8 = 0;
    while (1)
    {
      uint64_t v9 = icu::UVector::elementAt(v7, v8);
      if (*(double *)(v9 + 8) <= a3 && *(double *)(v9 + 16) > a3) {
        break;
      }
      if ((signed int)++v8 >= *((_DWORD *)v7 + 2)) {
        goto LABEL_7;
      }
    }
    uint64_t v11 = *(void *)v9;
    icu::UnicodeString::unBogus((uint64_t)a2);
    unsigned int v12 = *((unsigned __int16 *)a2 + 4);
    int v13 = (__int16)v12;
    unsigned int v14 = v12 >> 5;
    if (v13 >= 0) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = *((unsigned int *)a2 + 3);
    }
    icu::UnicodeString::doReplace((uint64_t)a2, 0, v15, v11, 0, 0xFFFFFFFFLL);
  }
  else
  {
LABEL_7:
    icu::UnicodeString::setToBogus(a2);
  }
  return a2;
}

uint64_t icu::ZoneMeta::getMetazoneMappings(icu::ZoneMeta *this, const icu::UnicodeString *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  __int16 v16 = 0;
  memset(v15, 0, sizeof(v15));
  int v13 = (UChar *)v15;
  icu::UnicodeString::extract((uint64_t)this, &v13, 129, &v14);
  uint64_t MetazoneMappings = 0;
  if (v14 <= 0 && v14 != -124)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1EB20BED0, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1EB20BED0))
    {
      uint64_t MetazoneMappings = 0;
      if (dword_1EB20BED4 > 0 || v14 > 0) {
        return MetazoneMappings;
      }
    }
    else
    {
      sub_18CA36A30(&v14);
      dword_1EB20BED4 = v14;
      icu::umtx_initImplPostInit(&dword_1EB20BED0);
      if (v14 >= 1) {
        return 0;
      }
    }
    umtx_lock((atomic_ullong *)&unk_1EB20BE80);
    uint64_t MetazoneMappings = uhash_get(qword_1EB20BE60, (uint64_t)v15);
    umtx_unlock((std::mutex **)&unk_1EB20BE80);
    if (!MetazoneMappings)
    {
      uint64_t MetazoneMappings = (uint64_t)icu::ZoneMeta::createMetazoneMappings(this, v4);
      if (MetazoneMappings)
      {
        umtx_lock((atomic_ullong *)&unk_1EB20BE80);
        uint64_t v5 = uhash_get(qword_1EB20BE60, (uint64_t)v15);
        if (!v5)
        {
          unsigned int v7 = *((unsigned __int16 *)this + 4);
          int v8 = (__int16)v7;
          unsigned int v9 = v7 >> 5;
          if (v8 < 0) {
            unsigned int v9 = *((_DWORD *)this + 3);
          }
          int v10 = v9 + 1;
          uint64_t v11 = (UChar *)uprv_malloc(2 * (int)(v9 + 1));
          uint64_t v5 = (uint64_t)v11;
          if (v11)
          {
            unsigned int v12 = v11;
            icu::UnicodeString::extract((uint64_t)this, &v12, v10, &v14);
            uhash_put(qword_1EB20BE60, v5, MetazoneMappings, &v14);
            if (v14 < 1) {
              goto LABEL_13;
            }
            uint64_t v5 = 0;
          }
        }
        (*(void (**)(uint64_t))(*(void *)MetazoneMappings + 8))(MetazoneMappings);
        uint64_t MetazoneMappings = v5;
LABEL_13:
        umtx_unlock((std::mutex **)&unk_1EB20BE80);
      }
    }
  }
  return MetazoneMappings;
}

int32x2_t *sub_18CA36A30(int *a1)
{
  sub_18CA0A25C(0x12u, (uint64_t)sub_18CA37BFC);
  uint64_t result = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, a1);
  qword_1EB20BE60 = (uint64_t)result;
  if (*a1 < 1)
  {
    uhash_setKeyDeleter((uint64_t)result, (uint64_t)j__uprv_free_6);
    uint64_t v3 = qword_1EB20BE60;
    return (int32x2_t *)uhash_setValueDeleter(v3, (uint64_t)uprv_deleteUObject);
  }
  else
  {
    qword_1EB20BE60 = 0;
  }
  return result;
}

icu::UVector *icu::ZoneMeta::createMetazoneMappings(icu::ZoneMeta *this, const icu::UnicodeString *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int32_t v25 = 0;
  UErrorCode v24 = U_ZERO_ERROR;
  long long v36 = 0u;
  uint64_t v39 = 0;
  long long v38 = 0u;
  long long v37 = 0u;
  char v35 = &unk_1EDA47700;
  LOWORD(v36) = 2;
  uint64_t v3 = ures_openDirect(0, (uint64_t)"metaZones", (uint64_t)&v24);
  ures_getByKey(v3, "metazoneInfo", v3, (int *)&v24);
  icu::ZoneMeta::getCanonicalCLDRID(this, (const icu::UnicodeString *)&v35, (icu::UnicodeString *)&v24, v4);
  if (v24 > U_ZERO_ERROR) {
    goto LABEL_35;
  }
  char v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  *(_OWORD *)int32_t v26 = 0u;
  long long v27 = 0u;
  if ((v36 & 0x8000u) == 0) {
    uint64_t v5 = (unsigned __int16)v36 >> 5;
  }
  else {
    uint64_t v5 = DWORD1(v36);
  }
  uint64_t v6 = v26;
  v26[(int)icu::UnicodeString::extract((uint64_t)&v35, 0, v5, v26, 129)] = 0;
  while (*v6 == 47)
  {
    char *v6 = 58;
LABEL_10:
    ++v6;
  }
  if (*v6) {
    goto LABEL_10;
  }
  ures_getByKey(v3, v26, v3, (int *)&v24);
  if (v24 > U_ZERO_ERROR) {
    goto LABEL_35;
  }
  NextResource = 0;
  if (!ures_hasNext(v3)) {
    goto LABEL_34;
  }
  while (2)
  {
    NextResource = ures_getNextResource(v3, (uint64_t)NextResource, &v24);
    StringByIndex = ures_getStringByIndex((uint64_t)NextResource, 0, 0, &v24);
    if (ures_getSize((uint64_t)NextResource) == 3)
    {
      unsigned int v9 = ures_getStringByIndex((uint64_t)NextResource, 1, 0, &v24);
      int v10 = ures_getStringByIndex((uint64_t)NextResource, 2, 0, &v24);
    }
    else
    {
      unsigned int v9 = (const UChar *)"1";
      int v10 = (const UChar *)L"9999-12-31 23:59";
    }
    if (v24 >= U_ILLEGAL_ARGUMENT_ERROR
      || (v11 = sub_18CA36E80(v9, (int *)&v24), double v13 = sub_18CA36E80(v10, (int *)&v24), v24 >= U_ILLEGAL_ARGUMENT_ERROR))
    {
      UErrorCode v24 = U_ZERO_ERROR;
LABEL_19:
      if (!ures_hasNext(v3)) {
        goto LABEL_34;
      }
      continue;
    }
    break;
  }
  double v14 = v13;
  uint64_t v15 = icu::UMemory::operator new((uint64_t *)v24, (icu::UMemory *)0x18, v12);
  uint64_t v17 = v15;
  int v18 = (uint64_t *)v24;
  if (!v15 && v24 <= U_ZERO_ERROR)
  {
    UErrorCode v24 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_34;
  }
  if (v24 <= U_ZERO_ERROR)
  {
    *uint64_t v15 = (uint64_t)StringByIndex;
    *((double *)v15 + 1) = v11;
    *((double *)v15 + 2) = v14;
    int v19 = (uint64_t (**)(void *))v25;
    if (!v25)
    {
      uint64_t v20 = icu::UMemory::operator new(v18, (icu::UMemory *)0x28, v16);
      uint64_t v21 = (uint64_t)v20;
      if (v20) {
        icu::UVector::UVector((uint64_t)v20, (uint64_t)sub_18CA37070, 0, (int *)&v24);
      }
      sub_18C7F5A70((uint64_t)&v25, v21, (int *)&v24);
      if (v24 > U_ZERO_ERROR) {
        goto LABEL_33;
      }
      int v19 = (uint64_t (**)(void *))v25;
    }
    icu::UVector::adoptElement(v19, v17, &v24);
    if (v24 > U_ZERO_ERROR) {
      goto LABEL_34;
    }
    goto LABEL_19;
  }
  if (!v15) {
    goto LABEL_34;
  }
LABEL_33:
  icu::UMemory::operator delete(v17);
LABEL_34:
  ures_close((uint64_t)NextResource);
LABEL_35:
  ures_close(v3);
  if (v24 <= U_ZERO_ERROR)
  {
    uint64_t v22 = v25;
    int32_t v25 = 0;
  }
  else
  {
    uint64_t v22 = 0;
  }
  icu::UnicodeString::~UnicodeString((void *)v24, (icu::UnicodeString *)&v35);
  if (v25) {
    (*(void (**)(icu::UVector *))(*(void *)v25 + 8))(v25);
  }
  return v22;
}

double sub_18CA36E80(const UChar *a1, int *a2)
{
  double v2 = 0.0;
  if (*a2 <= 0)
  {
    int32_t v5 = u_strlen(a1);
    int32_t v6 = v5;
    if (v5 != 10 && v5 != 16)
    {
LABEL_42:
      *a2 = 3;
      return v2;
    }
    int v7 = *a2;
    if (*a2 <= 0)
    {
      unint64_t v11 = 0;
      int v9 = 0;
      do
      {
        unsigned int v12 = a1[v11] - 48;
        if (v12 >= 0xA) {
          unsigned int v12 = -1;
        }
        if ((v12 & 0x80000000) != 0)
        {
          unsigned int v8 = 0;
          goto LABEL_26;
        }
        int v9 = v12 + 10 * v9;
        BOOL v13 = v11++ >= 3;
      }
      while (!v13);
      unsigned int v8 = 0;
      unint64_t v14 = 5;
      while (1)
      {
        unsigned int v15 = a1[v14] - 48;
        if (v15 >= 0xA) {
          unsigned int v15 = -1;
        }
        if ((v15 & 0x80000000) != 0) {
          break;
        }
        unsigned int v8 = v15 + 10 * v8;
        BOOL v13 = v14++ >= 6;
        if (v13)
        {
          int v10 = 0;
          unint64_t v16 = 8;
          while (1)
          {
            unsigned int v17 = a1[v16] - 48;
            if (v17 >= 0xA) {
              unsigned int v17 = -1;
            }
            if ((v17 & 0x80000000) != 0) {
              goto LABEL_42;
            }
            int v10 = v17 + 10 * v10;
            BOOL v18 = v16++ > 8;
            if (v18) {
              goto LABEL_27;
            }
          }
        }
      }
LABEL_26:
      int v10 = 0;
      int v7 = 3;
      *a2 = 3;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 0;
      int v10 = 0;
    }
LABEL_27:
    if (v6 == 16)
    {
      if (v7 <= 0)
      {
        unsigned int v19 = 0;
        unint64_t v20 = 11;
        while (1)
        {
          unsigned int v21 = a1[v20] - 48;
          if (v21 >= 0xA) {
            unsigned int v21 = -1;
          }
          if ((v21 & 0x80000000) != 0) {
            goto LABEL_42;
          }
          unsigned int v19 = v21 + 10 * v19;
          BOOL v13 = v20++ >= 0xC;
          if (v13)
          {
            unsigned int v22 = 0;
            unint64_t v23 = 14;
            while (1)
            {
              unsigned int v24 = a1[v23] - 48;
              if (v24 >= 0xA) {
                unsigned int v24 = -1;
              }
              if ((v24 & 0x80000000) != 0) {
                break;
              }
              unsigned int v22 = v24 + 10 * v22;
              BOOL v18 = v23++ > 0xE;
              if (v18)
              {
                double v25 = (double)(int)(3600000 * v19);
                double v2 = (double)(int)(60000 * v22);
                return v25 + sub_18C93E22C(v9, v8 - 1, v10) * 86400000.0 + v2;
              }
            }
            goto LABEL_42;
          }
        }
      }
    }
    else
    {
      double v2 = 0.0;
      double v25 = 0.0;
      if (v7 <= 0) {
        return v25 + sub_18C93E22C(v9, v8 - 1, v10) * 86400000.0 + v2;
      }
    }
  }
  return v2;
}

void sub_18CA37070(void *a1)
{
  if (a1) {
    icu::UMemory::operator delete(a1);
  }
}

const icu::UnicodeString *icu::ZoneMeta::getZoneIdByMetazone(icu::ZoneMeta *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, icu::UnicodeString *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  unsigned int v5 = *((unsigned __int16 *)this + 4);
  if (v5) {
    goto LABEL_8;
  }
  if ((v5 & 0x8000) != 0)
  {
    uint64_t v7 = *((unsigned int *)this + 3);
    if ((int)v7 > 128)
    {
LABEL_8:
      icu::UnicodeString::setToBogus(a3);
      return a3;
    }
  }
  else
  {
    uint64_t v7 = v5 >> 5;
    if (v7 >= 0x81) {
      goto LABEL_8;
    }
  }
  char v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)unint64_t v20 = 0u;
  long long v21 = 0u;
  v20[(int)icu::UnicodeString::extract((uint64_t)this, 0, v7, v20, 129)] = 0;
  uint64_t v8 = ures_openDirect(0, (uint64_t)"metaZones", (uint64_t)&v19 + 4);
  ures_getByKey(v8, "mapTimezones", v8, (int *)&v19 + 1);
  ures_getByKey(v8, v20, v8, (int *)&v19 + 1);
  int v9 = HIDWORD(v19);
  if (SHIDWORD(v19) >= 1)
  {
    ures_close(v8);
    goto LABEL_8;
  }
  if ((*((__int16 *)a2 + 4) & 0x80000000) == 0)
  {
    unsigned int v11 = *((unsigned __int16 *)a2 + 4);
    if ((v11 & 0xFFC0 | 0x20) == 0x60)
    {
      uint64_t v12 = v11 >> 5;
      goto LABEL_14;
    }
LABEL_16:
    StringByuint64_t Key = 0;
    goto LABEL_17;
  }
  uint64_t v12 = *((unsigned int *)a2 + 3);
  if ((v12 & 0xFFFFFFFE) != 2) {
    goto LABEL_16;
  }
LABEL_14:
  v20[(int)icu::UnicodeString::extract((uint64_t)a2, 0, v12, v20, 129)] = 0;
  StringByuint64_t Key = ures_getStringByKey(v8, v20, (int *)&v19, (int *)&v19 + 1);
  int v9 = HIDWORD(v19);
  if (HIDWORD(v19) == 2)
  {
    int v9 = 0;
    HIDWORD(v19) = 0;
  }
LABEL_17:
  if (v9 <= 0 && !StringByKey) {
    StringByuint64_t Key = ures_getStringByKey(v8, "001", (int *)&v19, (int *)&v19 + 1);
  }
  ures_close(v8);
  if (!StringByKey) {
    goto LABEL_8;
  }
  uint64_t v14 = v19;
  icu::UnicodeString::unBogus((uint64_t)a3);
  unsigned int v15 = *((unsigned __int16 *)a3 + 4);
  int v16 = (__int16)v15;
  unsigned int v17 = v15 >> 5;
  if (v16 >= 0) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = *((unsigned int *)a3 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)a3, 0, v18, (uint64_t)StringByKey, 0, v14);
  return a3;
}

uint64_t icu::ZoneMeta::getAvailableMetazoneIDs(icu::ZoneMeta *this)
{
  if (atomic_load_explicit(dword_1EB20BED8, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20BED8))
  {
    sub_18CA372E8();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20BED8);
  }
  return qword_1EB20BE68;
}

void sub_18CA372E8()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  sub_18CA0A25C(0x12u, (uint64_t)sub_18CA37BFC);
  UErrorCode v12 = U_ZERO_ERROR;
  unint64_t v0 = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, (int *)&v12);
  qword_1EB20BE70 = (uint64_t)v0;
  if (v12 > U_ZERO_ERROR || v0 == 0) {
    goto LABEL_9;
  }
  uint64_t v3 = icu::UMemory::operator new((uint64_t *)v12, (icu::UMemory *)0x28, v1);
  if (!v3)
  {
LABEL_8:
    qword_1EB20BE68 = 0;
    uhash_close((unsigned char *)qword_1EB20BE70);
LABEL_9:
    qword_1EB20BE70 = 0;
    return;
  }
  __int16 v4 = (icu::UVector *)icu::UVector::UVector((uint64_t)v3, 0, (uint64_t)uhash_compareUChars, (int *)&v12);
  qword_1EB20BE68 = (uint64_t)v4;
  if (v12 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    (*(void (**)(icu::UVector *))(*(void *)v4 + 8))(v4);
    goto LABEL_8;
  }
  icu::UVector::setDeleter(v4, uprv_free);
  uint64_t v5 = ures_openDirect(0, (uint64_t)"metaZones", (uint64_t)&v12);
  uint64_t v6 = ures_getByKey(v5, "mapTimezones", 0, (int *)&v12);
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v13);
  if (v12 <= U_ZERO_ERROR)
  {
    do
    {
      if (!ures_hasNext(v6)) {
        break;
      }
      ures_getNextResource(v6, (uint64_t)v13, &v12);
      if (v12 > U_ZERO_ERROR) {
        break;
      }
      uint64_t Key = (const char *)ures_getKey((uint64_t)v13);
      size_t v8 = strlen(Key);
      int32_t v9 = v8;
      int v10 = (UChar *)uprv_malloc((uint64_t)((v8 << 32) + 0x100000000) >> 31);
      if (!v10)
      {
        UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
        uprv_free(0);
        break;
      }
      unsigned int v11 = v10;
      u_charsToUChars(Key, v10, v9);
      v11[v9] = 0;
      if (!uhash_get(qword_1EB20BE70, (uint64_t)v11))
      {
        uhash_put(qword_1EB20BE70, (uint64_t)v11, (uint64_t)v11, (int *)&v12);
        icu::UVector::adoptElement((uint64_t (**)(void *))qword_1EB20BE68, v11, &v12);
        unsigned int v11 = 0;
      }
      uprv_free(v11);
    }
    while (v12 < U_ILLEGAL_ARGUMENT_ERROR);
  }
  ures_close(v6);
  ures_close(v5);
  if (v12 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    uhash_close((unsigned char *)qword_1EB20BE70);
    if (qword_1EB20BE68) {
      (*(void (**)(uint64_t))(*(void *)qword_1EB20BE68 + 8))(qword_1EB20BE68);
    }
    qword_1EB20BE70 = 0;
    qword_1EB20BE68 = 0;
  }
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v13);
}

uint64_t icu::ZoneMeta::findMetaZoneID(UChar **this, const icu::UnicodeString *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (atomic_load_explicit(dword_1EB20BED8, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20BED8))
  {
    sub_18CA372E8();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20BED8);
  }
  if (!qword_1EB20BE70) {
    return 0;
  }
  memset(v8, 0, sizeof(v8));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v8, this);
  uint64_t v3 = qword_1EB20BE70;
  Terminateduint64_t Buffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v8);
  uint64_t v5 = uhash_get(v3, TerminatedBuffer);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
  return v5;
}

icu::SimpleTimeZone *icu::ZoneMeta::createCustomTimeZone(icu::ZoneMeta *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  int v6 = (int)this;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if ((int)this >= 0) {
    unsigned int v7 = this;
  }
  else {
    unsigned int v7 = -(int)this;
  }
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v18 = 0;
  long long v17 = 0u;
  uint64_t v14 = &unk_1EDA47700;
  LOWORD(v15) = 2;
  icu::ZoneMeta::formatCustomID((icu::ZoneMeta *)(v7 / 0x36EE80), (unsigned __int16)(v7 / 0xEA60) % 0x3Cu, v7 / 0x3E8 - 60 * ((71582789 * (unint64_t)(v7 / 0x3E8)) >> 32), this >> 31, (icu::UnicodeString *)&v14, a6);
  int v10 = (icu::SimpleTimeZone *)icu::UMemory::operator new(v9, (icu::UMemory *)0xA0, v8);
  UErrorCode v12 = v10;
  if (v10) {
    icu::SimpleTimeZone::SimpleTimeZone(v10, v6, (const icu::UnicodeString *)&v14);
  }
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v14);
  return v12;
}

icu::UnicodeString *icu::ZoneMeta::formatCustomID(icu::ZoneMeta *this, unsigned int a2, int a3, int a4, icu::UnicodeString *a5, icu::UnicodeString *a6)
{
  unsigned int v10 = this;
  icu::UnicodeString::unBogus((uint64_t)a5);
  unsigned int v11 = *((unsigned __int16 *)a5 + 4);
  int v12 = (__int16)v11;
  unsigned int v13 = v11 >> 5;
  if (v12 >= 0) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = *((unsigned int *)a5 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)a5, 0, v14, (uint64_t)L"GMT", 0, 0xFFFFFFFFLL);
  if (a2 | v10)
  {
    if (a4) {
      __int16 v15 = 45;
    }
    else {
      __int16 v15 = 43;
    }
    __int16 v17 = v15;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    __int16 v17 = ((429496730 * (unint64_t)(v10 - 100 * ((42949673 * (unint64_t)v10) >> 32))) >> 32) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    __int16 v17 = (v10 - 10 * ((429496730 * (unint64_t)v10) >> 32)) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    __int16 v17 = 58;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    __int16 v17 = ((429496730 * (unint64_t)(a2 - 100 * ((42949673 * (unint64_t)a2) >> 32))) >> 32) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    __int16 v17 = (a2 - 10 * ((429496730 * (unint64_t)a2) >> 32)) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    if (a3)
    {
      __int16 v17 = 58;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
      __int16 v17 = ((103 * (a3 - 100 * ((41 * a3) >> 12))) >> 10) | 0x30;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
      __int16 v17 = (a3 - 10 * ((205 * a3) >> 11)) | 0x30;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    }
  }
  return a5;
}

const UChar *icu::ZoneMeta::getShortID(const UChar **this, const icu::TimeZone *a2)
{
  uint64_t v3 = this[19];
  if (!v3) {
    return 0;
  }

  return icu::ZoneMeta::getShortIDFromCanonical(v3);
}

const UChar *icu::ZoneMeta::getShortIDFromCanonical(const UChar *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int32_t v2 = u_strlen(a1);
  char v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  long long v10 = 0u;
  u_UCharsToChars(a1, v9, v2);
  v9[v2] = 0;
  if (v9[0])
  {
    uint64_t v3 = &v9[1];
    do
    {
      int v4 = *v3;
      if (v4 == 47)
      {
        int v4 = 58;
        char *v3 = 58;
      }
      ++v3;
    }
    while (v4);
  }
  int v8 = 0;
  uint64_t v5 = ures_openDirect(0, (uint64_t)"keyTypeData", (uint64_t)&v8);
  ures_getByKey(v5, "typeMap", v5, &v8);
  ures_getByKey(v5, "timezone", v5, &v8);
  StringByuint64_t Key = ures_getStringByKey(v5, v9, 0, &v8);
  ures_close(v5);
  return StringByKey;
}

const UChar *icu::ZoneMeta::getShortID(icu::ZoneMeta *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  int v6 = 0;
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(this, (const icu::UnicodeString *)&v6, a3);
  if (v6 > 0 || CanonicalCLDRID == 0) {
    return 0;
  }
  else {
    return icu::ZoneMeta::getShortIDFromCanonical(CanonicalCLDRID);
  }
}

uint64_t sub_18CA37BFC()
{
  if (qword_1EB20BE58)
  {
    uhash_close((unsigned char *)qword_1EB20BE58);
    qword_1EB20BE58 = 0;
  }
  atomic_store(0, &dword_1EB20BE78);
  if (qword_1EB20BE60)
  {
    uhash_close((unsigned char *)qword_1EB20BE60);
    qword_1EB20BE60 = 0;
  }
  atomic_store(0, &dword_1EB20BED0);
  if (qword_1EB20BE70)
  {
    uhash_close((unsigned char *)qword_1EB20BE70);
    qword_1EB20BE70 = 0;
  }
  if (qword_1EB20BE68) {
    (*(void (**)(uint64_t))(*(void *)qword_1EB20BE68 + 8))(qword_1EB20BE68);
  }
  qword_1EB20BE68 = 0;
  atomic_store(0, (unsigned int *)&unk_1EB20BED8);
  if (qword_1E9192BB8) {
    (*(void (**)(uint64_t))(*(void *)qword_1E9192BB8 + 8))(qword_1E9192BB8);
  }
  qword_1E9192BB8 = 0;
  if (qword_1E9192BC0) {
    (*(void (**)(uint64_t))(*(void *)qword_1E9192BC0 + 8))(qword_1E9192BC0);
  }
  qword_1E9192BC0 = 0;
  atomic_store(0, &dword_1E9192BC8);
  return 1;
}

uint64_t zrule_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t zrule_equals(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
}

void *zrule_getName(UChar **a1, void *a2, int a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = a2;
  icu::UnicodeString::UnicodeString(&v11, a3 == -1, &v10);
  Name = icu::TimeZoneRule::getName(a1, (UChar **)&v11);
  icu::UnicodeString::operator=((UChar **)&v11, Name);
  int v6 = HIDWORD(v11);
  if ((BYTE8(v11) & 0x11) != 0)
  {
    unsigned int v7 = 0;
  }
  else if ((BYTE8(v11) & 2) != 0)
  {
    unsigned int v7 = (const void *)((unint64_t)&v11 | 0xA);
  }
  else
  {
    unsigned int v7 = (const void *)*((void *)&v12 + 1);
  }
  if ((SWORD4(v11) & 0x8000u) == 0) {
    int v6 = WORD4(v11) >> 5;
  }
  memcpy(a2, v7, v6);
  return icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11);
}

icu::InitialTimeZoneRule *izrule_open(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(v13, 0, sizeof(v13));
  uint64_t v12 = a1;
  icu::UnicodeString::UnicodeString(v13, a2 == -1, &v12);
  uint64_t v11 = v12;
  unsigned int v7 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new(&v11, (icu::UMemory *)0x50, v6);
  uint64_t v9 = v7;
  if (v7) {
    icu::InitialTimeZoneRule::InitialTimeZoneRule(v7, (UChar **)v13, a3, a4);
  }
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v13);
  return v9;
}

uint64_t izrule_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t izrule_equals(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
}

void *izrule_getName(UChar **a1, void *a2, int *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v14 = 0;
  long long v13 = 0u;
  long long v10 = (UChar *)&unk_1EDA47700;
  LOWORD(v11) = 2;
  icu::TimeZoneRule::getName(a1, &v10);
  int v5 = (unsigned __int16)v11 >> 5;
  if ((v11 & 0x8000u) != 0) {
    int v5 = DWORD1(v11);
  }
  *a3 = v5;
  unint64_t v6 = uprv_malloc(v5);
  unsigned int v7 = 0;
  *a2 = v6;
  if ((v11 & 0x11) == 0)
  {
    if ((v11 & 2) != 0) {
      unsigned int v7 = (char *)&v11 + 2;
    }
    else {
      unsigned int v7 = (char *)v12;
    }
  }
  memcpy(v6, v7, *a3);
  return icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v10);
}

icu::TimeZoneTransition *ztrans_open@<X0>(const icu::TimeZoneRule *a1@<X0>, const icu::TimeZoneRule *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t result = (icu::TimeZoneTransition *)icu::UMemory::operator new(a3, (icu::UMemory *)0x20, (unint64_t)a2);
  if (result) {
    return icu::TimeZoneTransition::TimeZoneTransition(result, a4, a1, a2);
  }
  return result;
}

uint64_t *ztrans_openEmpty@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a2, (icu::UMemory *)0x20, a1);
  if (result) {
    return icu::TimeZoneTransition::TimeZoneTransition(result);
  }
  return result;
}

uint64_t ztrans_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

BOOL ztrans_equals(uint64_t a1, uint64_t a2)
{
  return icu::TimeZoneTransition::operator==(a1, a2);
}

uint64_t ztrans_getFrom(icu::TimeZoneTransition **a1)
{
  return icu::TimeZoneTransition::getFrom(*a1);
}

void sub_18CA381C0()
{
  *(_WORD *)unint64_t v0 = 0;
  _os_log_error_impl(&dword_18C7E8000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "ICU's u_setMemoryFunctions() is not safe and has been disabled. Please remove calls to it from your code.", v0, 2u);
}

void icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::toSkeleton()
{
  while (1)
    ;
}

void icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::integerWidth()
{
  while (1)
    ;
}

void icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unit()
{
  while (1)
    ;
}

void icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::perUnit()
{
  while (1)
    ;
}

void icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unitWidth()
{
  while (1)
    ;
}

void icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::macros()
{
  while (1)
    ;
}

{
  while (1)
    ;
}

void icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::identityFallback()
{
  while (1)
    ;
}

void icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterBoth()
{
  while (1)
    ;
}

void icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::collapse()
{
  while (1)
    ;
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_typeid(void)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

long double acos(long double __x)
{
  MEMORY[0x1F40CA330](__x);
  return result;
}

long double asin(long double __x)
{
  MEMORY[0x1F40CA3D0](__x);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x1F40CA4B8](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1F40CA570](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

lldiv_t div(uint64_t __x, uint64_t __y)
{
  uint64_t v2 = MEMORY[0x1F40CBD98](__x, __y);
  result.reunsigned int m = v3;
  result.quot = v2;
  return result;
}

int dlclose(void *__handle)
{
  return MEMORY[0x1F40CBDA8](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1F40CC290](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1F40CC2E0](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1F40CC4C0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC870](a1, a2);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x1F40CCE48](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

uint64_t os_eligibility_get_domain_answer()
{
  return MEMORY[0x1F40CD2B0]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

int posix_madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CD788](a1, a2, *(void *)&a3);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1F40CDC60](a1);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return MEMORY[0x1F40CDC70](a1, a2, a3);
}

char *__cdecl realpath(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1F40CDC90](a1, a2);
}

void rewind(FILE *a1)
{
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return (char *)MEMORY[0x1F40CDF90](*(void *)&a1, a2);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE148](__s1, __s2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1F40CE168](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1E8](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE230](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

long double tan(long double __x)
{
  MEMORY[0x1F40CE420](__x);
  return result;
}

float tanhf(float a1)
{
  MEMORY[0x1F40CE438](a1);
  return result;
}