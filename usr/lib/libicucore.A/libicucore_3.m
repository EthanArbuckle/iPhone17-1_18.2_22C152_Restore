uint64_t icu::DateFormatSymbols::setMonths(icu::DateFormatSymbols *this, UChar **a2, int a3)
{
  UChar **v4;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v4 = a2;
  v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    v7 = (char *)(v6 - 2);
    v8 = *(v6 - 1);
    if (v8)
    {
      v9 = v8 << 6;
      v10 = (char *)(v6 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10[v9]);
        v9 -= 64;
      }
      while (v9);
    }
    icu::UMemory::operator delete[](v7);
  }
  if (a3 <= 1) {
    v11 = 1;
  }
  else {
    v11 = a3;
  }
  v12 = v11;
  if (v11 < 0) {
    v13 = -1;
  }
  else {
    v13 = ((uint64_t)v11 << 6) | 0x10;
  }
  result = icu::UMemory::operator new[]((icu::UMemory *)v13, (unint64_t)a2);
  if (result)
  {
    *(void *)result = 64;
    *(void *)(result + 8) = v12;
    result += 16;
    v15 = result;
    v16 = result;
    do
    {
      *(void *)v16 = &unk_1EDA47700;
      *(_WORD *)(v16 + 8) = 2;
      v15 += 64;
      v16 += 64;
    }
    while (v16 != result + (v12 << 6));
  }
  *((void *)this + 7) = result;
  if (a3 >= 1)
  {
    v17 = a3 + 1;
    do
    {
      v18 = result + 64;
      icu::UnicodeString::operator=((UChar **)result, v4);
      --v17;
      result = v18;
      v4 += 8;
    }
    while (v17 > 1);
  }
  *((_DWORD *)this + 16) = a3;
  return result;
}

uint64_t icu::DateFormatSymbols::setShortMonths(icu::DateFormatSymbols *this, UChar **a2, int a3)
{
  v4 = a2;
  v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    v7 = (char *)(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    if (v8)
    {
      uint64_t v9 = v8 << 6;
      v10 = (char *)(v6 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10[v9]);
        v9 -= 64;
      }
      while (v9);
    }
    icu::UMemory::operator delete[](v7);
  }
  if (a3 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a3;
  }
  uint64_t v12 = v11;
  if (v11 < 0) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = ((uint64_t)v11 << 6) | 0x10;
  }
  uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v13, (unint64_t)a2);
  if (result)
  {
    *(void *)uint64_t result = 64;
    *(void *)(result + 8) = v12;
    result += 16;
    uint64_t v15 = result;
    uint64_t v16 = result;
    do
    {
      *(void *)uint64_t v16 = &unk_1EDA47700;
      *(_WORD *)(v16 + 8) = 2;
      v15 += 64;
      v16 += 64;
    }
    while (v16 != result + (v12 << 6));
  }
  *((void *)this + 9) = result;
  if (a3 >= 1)
  {
    unsigned int v17 = a3 + 1;
    do
    {
      uint64_t v18 = result + 64;
      icu::UnicodeString::operator=((UChar **)result, v4);
      --v17;
      uint64_t result = v18;
      v4 += 8;
    }
    while (v17 > 1);
  }
  *((_DWORD *)this + 20) = a3;
  return result;
}

uint64_t icu::DateFormatSymbols::setMonths(uint64_t result, unint64_t a2, int a3, int a4, int a5)
{
  v6 = (UChar **)a2;
  v7 = (int *)result;
  if (a4 == 1)
  {
    if (a5)
    {
      if (a5 == 2)
      {
        v69 = *(void **)(result + 136);
        if (v69)
        {
          v70 = (char *)(v69 - 2);
          uint64_t v71 = *(v69 - 1);
          if (v71)
          {
            uint64_t v72 = v71 << 6;
            v73 = (char *)(v69 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)&v73[v72]);
              v72 -= 64;
            }
            while (v72);
          }
          icu::UMemory::operator delete[](v70);
        }
        if (a3 <= 1) {
          int v74 = 1;
        }
        else {
          int v74 = a3;
        }
        uint64_t v75 = v74;
        if (v74 < 0) {
          uint64_t v76 = -1;
        }
        else {
          uint64_t v76 = ((uint64_t)v74 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v76, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v75;
          result += 16;
          uint64_t v77 = result;
          uint64_t v78 = result;
          do
          {
            *(void *)uint64_t v78 = &unk_1EDA47700;
            *(_WORD *)(v78 + 8) = 2;
            v77 += 64;
            v78 += 64;
          }
          while (v78 != result + (v75 << 6));
        }
        *((void *)v7 + 17) = result;
        if (a3 >= 1)
        {
          unsigned int v79 = a3 + 1;
          do
          {
            uint64_t v80 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v79;
            uint64_t result = v80;
            v6 += 8;
          }
          while (v79 > 1);
        }
        v20 = v7 + 36;
      }
      else
      {
        if (a5 != 1) {
          return result;
        }
        v21 = *(void **)(result + 104);
        if (v21)
        {
          v22 = (char *)(v21 - 2);
          uint64_t v23 = *(v21 - 1);
          if (v23)
          {
            uint64_t v24 = v23 << 6;
            v25 = (char *)(v21 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v25[v24]);
              v24 -= 64;
            }
            while (v24);
          }
          icu::UMemory::operator delete[](v22);
        }
        if (a3 <= 1) {
          int v26 = 1;
        }
        else {
          int v26 = a3;
        }
        uint64_t v27 = v26;
        if (v26 < 0) {
          uint64_t v28 = -1;
        }
        else {
          uint64_t v28 = ((uint64_t)v26 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v28, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v27;
          result += 16;
          uint64_t v29 = result;
          uint64_t v30 = result;
          do
          {
            *(void *)uint64_t v30 = &unk_1EDA47700;
            *(_WORD *)(v30 + 8) = 2;
            v29 += 64;
            v30 += 64;
          }
          while (v30 != result + (v27 << 6));
        }
        *((void *)v7 + 13) = result;
        if (a3 >= 1)
        {
          unsigned int v31 = a3 + 1;
          do
          {
            uint64_t v32 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v31;
            uint64_t result = v32;
            v6 += 8;
          }
          while (v31 > 1);
        }
        v20 = v7 + 28;
      }
    }
    else
    {
      v57 = *(void **)(result + 120);
      if (v57)
      {
        v58 = (char *)(v57 - 2);
        uint64_t v59 = *(v57 - 1);
        if (v59)
        {
          uint64_t v60 = v59 << 6;
          v61 = (char *)(v57 - 8);
          do
          {
            icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)&v61[v60]);
            v60 -= 64;
          }
          while (v60);
        }
        icu::UMemory::operator delete[](v58);
      }
      if (a3 <= 1) {
        int v62 = 1;
      }
      else {
        int v62 = a3;
      }
      uint64_t v63 = v62;
      if (v62 < 0) {
        uint64_t v64 = -1;
      }
      else {
        uint64_t v64 = ((uint64_t)v62 << 6) | 0x10;
      }
      uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v64, a2);
      if (result)
      {
        *(void *)uint64_t result = 64;
        *(void *)(result + 8) = v63;
        result += 16;
        uint64_t v65 = result;
        uint64_t v66 = result;
        do
        {
          *(void *)uint64_t v66 = &unk_1EDA47700;
          *(_WORD *)(v66 + 8) = 2;
          v65 += 64;
          v66 += 64;
        }
        while (v66 != result + (v63 << 6));
      }
      *((void *)v7 + 15) = result;
      if (a3 >= 1)
      {
        unsigned int v67 = a3 + 1;
        do
        {
          uint64_t v68 = result + 64;
          icu::UnicodeString::operator=((UChar **)result, v6);
          --v67;
          uint64_t result = v68;
          v6 += 8;
        }
        while (v67 > 1);
      }
      v20 = v7 + 32;
    }
  }
  else
  {
    if (a4) {
      return result;
    }
    if (a5)
    {
      if (a5 == 2)
      {
        v45 = *(void **)(result + 88);
        if (v45)
        {
          v46 = (char *)(v45 - 2);
          uint64_t v47 = *(v45 - 1);
          if (v47)
          {
            uint64_t v48 = v47 << 6;
            v49 = (char *)(v45 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v49[v48]);
              v48 -= 64;
            }
            while (v48);
          }
          icu::UMemory::operator delete[](v46);
        }
        if (a3 <= 1) {
          int v50 = 1;
        }
        else {
          int v50 = a3;
        }
        uint64_t v51 = v50;
        if (v50 < 0) {
          uint64_t v52 = -1;
        }
        else {
          uint64_t v52 = ((uint64_t)v50 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v52, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v51;
          result += 16;
          uint64_t v53 = result;
          uint64_t v54 = result;
          do
          {
            *(void *)uint64_t v54 = &unk_1EDA47700;
            *(_WORD *)(v54 + 8) = 2;
            v53 += 64;
            v54 += 64;
          }
          while (v54 != result + (v51 << 6));
        }
        *((void *)v7 + 11) = result;
        if (a3 >= 1)
        {
          unsigned int v55 = a3 + 1;
          do
          {
            uint64_t v56 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v55;
            uint64_t result = v56;
            v6 += 8;
          }
          while (v55 > 1);
        }
        v20 = v7 + 24;
      }
      else
      {
        if (a5 != 1) {
          return result;
        }
        uint64_t v8 = *(void **)(result + 56);
        if (v8)
        {
          uint64_t v9 = (char *)(v8 - 2);
          uint64_t v10 = *(v8 - 1);
          if (v10)
          {
            uint64_t v11 = v10 << 6;
            uint64_t v12 = (char *)(v8 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v12[v11]);
              v11 -= 64;
            }
            while (v11);
          }
          icu::UMemory::operator delete[](v9);
        }
        if (a3 <= 1) {
          int v13 = 1;
        }
        else {
          int v13 = a3;
        }
        uint64_t v14 = v13;
        if (v13 < 0) {
          uint64_t v15 = -1;
        }
        else {
          uint64_t v15 = ((uint64_t)v13 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v15, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v14;
          result += 16;
          uint64_t v16 = result;
          uint64_t v17 = result;
          do
          {
            *(void *)uint64_t v17 = &unk_1EDA47700;
            *(_WORD *)(v17 + 8) = 2;
            v16 += 64;
            v17 += 64;
          }
          while (v17 != result + (v14 << 6));
        }
        *((void *)v7 + 7) = result;
        if (a3 >= 1)
        {
          unsigned int v18 = a3 + 1;
          do
          {
            uint64_t v19 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v18;
            uint64_t result = v19;
            v6 += 8;
          }
          while (v18 > 1);
        }
        v20 = v7 + 16;
      }
    }
    else
    {
      v33 = *(void **)(result + 72);
      if (v33)
      {
        v34 = (char *)(v33 - 2);
        uint64_t v35 = *(v33 - 1);
        if (v35)
        {
          uint64_t v36 = v35 << 6;
          v37 = (char *)(v33 - 8);
          do
          {
            icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v37[v36]);
            v36 -= 64;
          }
          while (v36);
        }
        icu::UMemory::operator delete[](v34);
      }
      if (a3 <= 1) {
        int v38 = 1;
      }
      else {
        int v38 = a3;
      }
      uint64_t v39 = v38;
      if (v38 < 0) {
        uint64_t v40 = -1;
      }
      else {
        uint64_t v40 = ((uint64_t)v38 << 6) | 0x10;
      }
      uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v40, a2);
      if (result)
      {
        *(void *)uint64_t result = 64;
        *(void *)(result + 8) = v39;
        result += 16;
        uint64_t v41 = result;
        uint64_t v42 = result;
        do
        {
          *(void *)uint64_t v42 = &unk_1EDA47700;
          *(_WORD *)(v42 + 8) = 2;
          v41 += 64;
          v42 += 64;
        }
        while (v42 != result + (v39 << 6));
      }
      *((void *)v7 + 9) = result;
      if (a3 >= 1)
      {
        unsigned int v43 = a3 + 1;
        do
        {
          uint64_t v44 = result + 64;
          icu::UnicodeString::operator=((UChar **)result, v6);
          --v43;
          uint64_t result = v44;
          v6 += 8;
        }
        while (v43 > 1);
      }
      v20 = v7 + 20;
    }
  }
  int *v20 = a3;
  return result;
}

uint64_t icu::DateFormatSymbols::setWeekdays(icu::DateFormatSymbols *this, UChar **a2, int a3)
{
  v4 = a2;
  v6 = (void *)*((void *)this + 19);
  if (v6)
  {
    v7 = (char *)(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    if (v8)
    {
      uint64_t v9 = v8 << 6;
      uint64_t v10 = (char *)(v6 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10[v9]);
        v9 -= 64;
      }
      while (v9);
    }
    icu::UMemory::operator delete[](v7);
  }
  if (a3 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a3;
  }
  uint64_t v12 = v11;
  if (v11 < 0) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = ((uint64_t)v11 << 6) | 0x10;
  }
  uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v13, (unint64_t)a2);
  if (result)
  {
    *(void *)uint64_t result = 64;
    *(void *)(result + 8) = v12;
    result += 16;
    uint64_t v15 = result;
    uint64_t v16 = result;
    do
    {
      *(void *)uint64_t v16 = &unk_1EDA47700;
      *(_WORD *)(v16 + 8) = 2;
      v15 += 64;
      v16 += 64;
    }
    while (v16 != result + (v12 << 6));
  }
  *((void *)this + 19) = result;
  if (a3 >= 1)
  {
    unsigned int v17 = a3 + 1;
    do
    {
      uint64_t v18 = result + 64;
      icu::UnicodeString::operator=((UChar **)result, v4);
      --v17;
      uint64_t result = v18;
      v4 += 8;
    }
    while (v17 > 1);
  }
  *((_DWORD *)this + 40) = a3;
  return result;
}

uint64_t icu::DateFormatSymbols::setShortWeekdays(icu::DateFormatSymbols *this, UChar **a2, int a3)
{
  v4 = a2;
  v6 = (void *)*((void *)this + 21);
  if (v6)
  {
    v7 = (char *)(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    if (v8)
    {
      uint64_t v9 = v8 << 6;
      uint64_t v10 = (char *)(v6 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10[v9]);
        v9 -= 64;
      }
      while (v9);
    }
    icu::UMemory::operator delete[](v7);
  }
  if (a3 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a3;
  }
  uint64_t v12 = v11;
  if (v11 < 0) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = ((uint64_t)v11 << 6) | 0x10;
  }
  uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v13, (unint64_t)a2);
  if (result)
  {
    *(void *)uint64_t result = 64;
    *(void *)(result + 8) = v12;
    result += 16;
    uint64_t v15 = result;
    uint64_t v16 = result;
    do
    {
      *(void *)uint64_t v16 = &unk_1EDA47700;
      *(_WORD *)(v16 + 8) = 2;
      v15 += 64;
      v16 += 64;
    }
    while (v16 != result + (v12 << 6));
  }
  *((void *)this + 21) = result;
  if (a3 >= 1)
  {
    unsigned int v17 = a3 + 1;
    do
    {
      uint64_t v18 = result + 64;
      icu::UnicodeString::operator=((UChar **)result, v4);
      --v17;
      uint64_t result = v18;
      v4 += 8;
    }
    while (v17 > 1);
  }
  *((_DWORD *)this + 44) = a3;
  return result;
}

uint64_t icu::DateFormatSymbols::setWeekdays(uint64_t result, unint64_t a2, int a3, int a4, int a5)
{
  v6 = (UChar **)a2;
  v7 = (int *)result;
  if (a4 == 1)
  {
    switch(a5)
    {
      case 0:
        v21 = *(void **)(result + 232);
        if (v21)
        {
          v22 = (char *)(v21 - 2);
          uint64_t v23 = *(v21 - 1);
          if (v23)
          {
            uint64_t v24 = v23 << 6;
            v25 = (char *)(v21 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v25[v24]);
              v24 -= 64;
            }
            while (v24);
          }
          icu::UMemory::operator delete[](v22);
        }
        if (a3 <= 1) {
          int v26 = 1;
        }
        else {
          int v26 = a3;
        }
        uint64_t v27 = v26;
        if (v26 < 0) {
          uint64_t v28 = -1;
        }
        else {
          uint64_t v28 = ((uint64_t)v26 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v28, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v27;
          result += 16;
          uint64_t v29 = result;
          uint64_t v30 = result;
          do
          {
            *(void *)uint64_t v30 = &unk_1EDA47700;
            *(_WORD *)(v30 + 8) = 2;
            v29 += 64;
            v30 += 64;
          }
          while (v30 != result + (v27 << 6));
        }
        *((void *)v7 + 29) = result;
        if (a3 >= 1)
        {
          unsigned int v31 = a3 + 1;
          do
          {
            uint64_t v32 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v31;
            uint64_t result = v32;
            v6 += 8;
          }
          while (v31 > 1);
        }
        v20 = v7 + 60;
        goto LABEL_149;
      case 1:
        v69 = *(void **)(result + 216);
        if (v69)
        {
          v70 = (char *)(v69 - 2);
          uint64_t v71 = *(v69 - 1);
          if (v71)
          {
            uint64_t v72 = v71 << 6;
            v73 = (char *)(v69 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)&v73[v72]);
              v72 -= 64;
            }
            while (v72);
          }
          icu::UMemory::operator delete[](v70);
        }
        if (a3 <= 1) {
          int v74 = 1;
        }
        else {
          int v74 = a3;
        }
        uint64_t v75 = v74;
        if (v74 < 0) {
          uint64_t v76 = -1;
        }
        else {
          uint64_t v76 = ((uint64_t)v74 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v76, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v75;
          result += 16;
          uint64_t v77 = result;
          uint64_t v78 = result;
          do
          {
            *(void *)uint64_t v78 = &unk_1EDA47700;
            *(_WORD *)(v78 + 8) = 2;
            v77 += 64;
            v78 += 64;
          }
          while (v78 != result + (v75 << 6));
        }
        *((void *)v7 + 27) = result;
        if (a3 >= 1)
        {
          unsigned int v79 = a3 + 1;
          do
          {
            uint64_t v80 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v79;
            uint64_t result = v80;
            v6 += 8;
          }
          while (v79 > 1);
        }
        v20 = v7 + 56;
        goto LABEL_149;
      case 2:
        v81 = *(void **)(result + 264);
        if (v81)
        {
          v82 = (char *)(v81 - 2);
          uint64_t v83 = *(v81 - 1);
          if (v83)
          {
            uint64_t v84 = v83 << 6;
            v85 = (char *)(v81 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v81, (icu::UnicodeString *)&v85[v84]);
              v84 -= 64;
            }
            while (v84);
          }
          icu::UMemory::operator delete[](v82);
        }
        if (a3 <= 1) {
          int v86 = 1;
        }
        else {
          int v86 = a3;
        }
        uint64_t v87 = v86;
        if (v86 < 0) {
          uint64_t v88 = -1;
        }
        else {
          uint64_t v88 = ((uint64_t)v86 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v88, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v87;
          result += 16;
          uint64_t v89 = result;
          uint64_t v90 = result;
          do
          {
            *(void *)uint64_t v90 = &unk_1EDA47700;
            *(_WORD *)(v90 + 8) = 2;
            v89 += 64;
            v90 += 64;
          }
          while (v90 != result + (v87 << 6));
        }
        *((void *)v7 + 33) = result;
        if (a3 >= 1)
        {
          unsigned int v91 = a3 + 1;
          do
          {
            uint64_t v92 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v91;
            uint64_t result = v92;
            v6 += 8;
          }
          while (v91 > 1);
        }
        v20 = v7 + 68;
        goto LABEL_149;
      case 3:
        v93 = *(void **)(result + 248);
        if (v93)
        {
          v94 = (char *)(v93 - 2);
          uint64_t v95 = *(v93 - 1);
          if (v95)
          {
            uint64_t v96 = v95 << 6;
            v97 = (char *)(v93 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v93, (icu::UnicodeString *)&v97[v96]);
              v96 -= 64;
            }
            while (v96);
          }
          icu::UMemory::operator delete[](v94);
        }
        if (a3 <= 1) {
          int v98 = 1;
        }
        else {
          int v98 = a3;
        }
        uint64_t v99 = v98;
        if (v98 < 0) {
          uint64_t v100 = -1;
        }
        else {
          uint64_t v100 = ((uint64_t)v98 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v100, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v99;
          result += 16;
          uint64_t v101 = result;
          uint64_t v102 = result;
          do
          {
            *(void *)uint64_t v102 = &unk_1EDA47700;
            *(_WORD *)(v102 + 8) = 2;
            v101 += 64;
            v102 += 64;
          }
          while (v102 != result + (v99 << 6));
        }
        *((void *)v7 + 31) = result;
        if (a3 >= 1)
        {
          unsigned int v103 = a3 + 1;
          do
          {
            uint64_t v104 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v103;
            uint64_t result = v104;
            v6 += 8;
          }
          while (v103 > 1);
        }
        v20 = v7 + 64;
LABEL_149:
        int *v20 = a3;
        break;
      default:
        return result;
    }
  }
  else if (!a4)
  {
    switch(a5)
    {
      case 0:
        uint64_t v8 = *(void **)(result + 168);
        if (v8)
        {
          uint64_t v9 = (char *)(v8 - 2);
          uint64_t v10 = *(v8 - 1);
          if (v10)
          {
            uint64_t v11 = v10 << 6;
            uint64_t v12 = (char *)(v8 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v12[v11]);
              v11 -= 64;
            }
            while (v11);
          }
          icu::UMemory::operator delete[](v9);
        }
        if (a3 <= 1) {
          int v13 = 1;
        }
        else {
          int v13 = a3;
        }
        uint64_t v14 = v13;
        if (v13 < 0) {
          uint64_t v15 = -1;
        }
        else {
          uint64_t v15 = ((uint64_t)v13 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v15, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v14;
          result += 16;
          uint64_t v16 = result;
          uint64_t v17 = result;
          do
          {
            *(void *)uint64_t v17 = &unk_1EDA47700;
            *(_WORD *)(v17 + 8) = 2;
            v16 += 64;
            v17 += 64;
          }
          while (v17 != result + (v14 << 6));
        }
        *((void *)v7 + 21) = result;
        if (a3 >= 1)
        {
          unsigned int v18 = a3 + 1;
          do
          {
            uint64_t v19 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v18;
            uint64_t result = v19;
            v6 += 8;
          }
          while (v18 > 1);
        }
        v20 = v7 + 44;
        goto LABEL_149;
      case 1:
        v33 = *(void **)(result + 152);
        if (v33)
        {
          v34 = (char *)(v33 - 2);
          uint64_t v35 = *(v33 - 1);
          if (v35)
          {
            uint64_t v36 = v35 << 6;
            v37 = (char *)(v33 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v37[v36]);
              v36 -= 64;
            }
            while (v36);
          }
          icu::UMemory::operator delete[](v34);
        }
        if (a3 <= 1) {
          int v38 = 1;
        }
        else {
          int v38 = a3;
        }
        uint64_t v39 = v38;
        if (v38 < 0) {
          uint64_t v40 = -1;
        }
        else {
          uint64_t v40 = ((uint64_t)v38 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v40, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v39;
          result += 16;
          uint64_t v41 = result;
          uint64_t v42 = result;
          do
          {
            *(void *)uint64_t v42 = &unk_1EDA47700;
            *(_WORD *)(v42 + 8) = 2;
            v41 += 64;
            v42 += 64;
          }
          while (v42 != result + (v39 << 6));
        }
        *((void *)v7 + 19) = result;
        if (a3 >= 1)
        {
          unsigned int v43 = a3 + 1;
          do
          {
            uint64_t v44 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v43;
            uint64_t result = v44;
            v6 += 8;
          }
          while (v43 > 1);
        }
        v20 = v7 + 40;
        goto LABEL_149;
      case 2:
        v45 = *(void **)(result + 200);
        if (v45)
        {
          v46 = (char *)(v45 - 2);
          uint64_t v47 = *(v45 - 1);
          if (v47)
          {
            uint64_t v48 = v47 << 6;
            v49 = (char *)(v45 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v49[v48]);
              v48 -= 64;
            }
            while (v48);
          }
          icu::UMemory::operator delete[](v46);
        }
        if (a3 <= 1) {
          int v50 = 1;
        }
        else {
          int v50 = a3;
        }
        uint64_t v51 = v50;
        if (v50 < 0) {
          uint64_t v52 = -1;
        }
        else {
          uint64_t v52 = ((uint64_t)v50 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v52, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v51;
          result += 16;
          uint64_t v53 = result;
          uint64_t v54 = result;
          do
          {
            *(void *)uint64_t v54 = &unk_1EDA47700;
            *(_WORD *)(v54 + 8) = 2;
            v53 += 64;
            v54 += 64;
          }
          while (v54 != result + (v51 << 6));
        }
        *((void *)v7 + 25) = result;
        if (a3 >= 1)
        {
          unsigned int v55 = a3 + 1;
          do
          {
            uint64_t v56 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v55;
            uint64_t result = v56;
            v6 += 8;
          }
          while (v55 > 1);
        }
        v20 = v7 + 52;
        goto LABEL_149;
      case 3:
        v57 = *(void **)(result + 184);
        if (v57)
        {
          v58 = (char *)(v57 - 2);
          uint64_t v59 = *(v57 - 1);
          if (v59)
          {
            uint64_t v60 = v59 << 6;
            v61 = (char *)(v57 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)&v61[v60]);
              v60 -= 64;
            }
            while (v60);
          }
          icu::UMemory::operator delete[](v58);
        }
        if (a3 <= 1) {
          int v62 = 1;
        }
        else {
          int v62 = a3;
        }
        uint64_t v63 = v62;
        if (v62 < 0) {
          uint64_t v64 = -1;
        }
        else {
          uint64_t v64 = ((uint64_t)v62 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v64, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v63;
          result += 16;
          uint64_t v65 = result;
          uint64_t v66 = result;
          do
          {
            *(void *)uint64_t v66 = &unk_1EDA47700;
            *(_WORD *)(v66 + 8) = 2;
            v65 += 64;
            v66 += 64;
          }
          while (v66 != result + (v63 << 6));
        }
        *((void *)v7 + 23) = result;
        if (a3 >= 1)
        {
          unsigned int v67 = a3 + 1;
          do
          {
            uint64_t v68 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v67;
            uint64_t result = v68;
            v6 += 8;
          }
          while (v67 > 1);
        }
        v20 = v7 + 48;
        goto LABEL_149;
      default:
        return result;
    }
  }
  return result;
}

uint64_t icu::DateFormatSymbols::setQuarters(uint64_t result, unint64_t a2, int a3, int a4, int a5)
{
  v6 = (UChar **)a2;
  v7 = (int *)result;
  if (a4 == 1)
  {
    if (a5)
    {
      if (a5 == 2)
      {
        v69 = *(void **)(result + 456);
        if (v69)
        {
          v70 = (char *)(v69 - 2);
          uint64_t v71 = *(v69 - 1);
          if (v71)
          {
            uint64_t v72 = v71 << 6;
            v73 = (char *)(v69 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)&v73[v72]);
              v72 -= 64;
            }
            while (v72);
          }
          icu::UMemory::operator delete[](v70);
        }
        if (a3 <= 1) {
          int v74 = 1;
        }
        else {
          int v74 = a3;
        }
        uint64_t v75 = v74;
        if (v74 < 0) {
          uint64_t v76 = -1;
        }
        else {
          uint64_t v76 = ((uint64_t)v74 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v76, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v75;
          result += 16;
          uint64_t v77 = result;
          uint64_t v78 = result;
          do
          {
            *(void *)uint64_t v78 = &unk_1EDA47700;
            *(_WORD *)(v78 + 8) = 2;
            v77 += 64;
            v78 += 64;
          }
          while (v78 != result + (v75 << 6));
        }
        *((void *)v7 + 57) = result;
        if (a3 >= 1)
        {
          unsigned int v79 = a3 + 1;
          do
          {
            uint64_t v80 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v79;
            uint64_t result = v80;
            v6 += 8;
          }
          while (v79 > 1);
        }
        v20 = v7 + 116;
      }
      else
      {
        if (a5 != 1) {
          return result;
        }
        v21 = *(void **)(result + 424);
        if (v21)
        {
          v22 = (char *)(v21 - 2);
          uint64_t v23 = *(v21 - 1);
          if (v23)
          {
            uint64_t v24 = v23 << 6;
            v25 = (char *)(v21 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v25[v24]);
              v24 -= 64;
            }
            while (v24);
          }
          icu::UMemory::operator delete[](v22);
        }
        if (a3 <= 1) {
          int v26 = 1;
        }
        else {
          int v26 = a3;
        }
        uint64_t v27 = v26;
        if (v26 < 0) {
          uint64_t v28 = -1;
        }
        else {
          uint64_t v28 = ((uint64_t)v26 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v28, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v27;
          result += 16;
          uint64_t v29 = result;
          uint64_t v30 = result;
          do
          {
            *(void *)uint64_t v30 = &unk_1EDA47700;
            *(_WORD *)(v30 + 8) = 2;
            v29 += 64;
            v30 += 64;
          }
          while (v30 != result + (v27 << 6));
        }
        *((void *)v7 + 53) = result;
        if (a3 >= 1)
        {
          unsigned int v31 = a3 + 1;
          do
          {
            uint64_t v32 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v31;
            uint64_t result = v32;
            v6 += 8;
          }
          while (v31 > 1);
        }
        v20 = v7 + 108;
      }
    }
    else
    {
      v57 = *(void **)(result + 440);
      if (v57)
      {
        v58 = (char *)(v57 - 2);
        uint64_t v59 = *(v57 - 1);
        if (v59)
        {
          uint64_t v60 = v59 << 6;
          v61 = (char *)(v57 - 8);
          do
          {
            icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)&v61[v60]);
            v60 -= 64;
          }
          while (v60);
        }
        icu::UMemory::operator delete[](v58);
      }
      if (a3 <= 1) {
        int v62 = 1;
      }
      else {
        int v62 = a3;
      }
      uint64_t v63 = v62;
      if (v62 < 0) {
        uint64_t v64 = -1;
      }
      else {
        uint64_t v64 = ((uint64_t)v62 << 6) | 0x10;
      }
      uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v64, a2);
      if (result)
      {
        *(void *)uint64_t result = 64;
        *(void *)(result + 8) = v63;
        result += 16;
        uint64_t v65 = result;
        uint64_t v66 = result;
        do
        {
          *(void *)uint64_t v66 = &unk_1EDA47700;
          *(_WORD *)(v66 + 8) = 2;
          v65 += 64;
          v66 += 64;
        }
        while (v66 != result + (v63 << 6));
      }
      *((void *)v7 + 55) = result;
      if (a3 >= 1)
      {
        unsigned int v67 = a3 + 1;
        do
        {
          uint64_t v68 = result + 64;
          icu::UnicodeString::operator=((UChar **)result, v6);
          --v67;
          uint64_t result = v68;
          v6 += 8;
        }
        while (v67 > 1);
      }
      v20 = v7 + 112;
    }
  }
  else
  {
    if (a4) {
      return result;
    }
    if (a5)
    {
      if (a5 == 2)
      {
        v45 = *(void **)(result + 408);
        if (v45)
        {
          v46 = (char *)(v45 - 2);
          uint64_t v47 = *(v45 - 1);
          if (v47)
          {
            uint64_t v48 = v47 << 6;
            v49 = (char *)(v45 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v49[v48]);
              v48 -= 64;
            }
            while (v48);
          }
          icu::UMemory::operator delete[](v46);
        }
        if (a3 <= 1) {
          int v50 = 1;
        }
        else {
          int v50 = a3;
        }
        uint64_t v51 = v50;
        if (v50 < 0) {
          uint64_t v52 = -1;
        }
        else {
          uint64_t v52 = ((uint64_t)v50 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v52, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v51;
          result += 16;
          uint64_t v53 = result;
          uint64_t v54 = result;
          do
          {
            *(void *)uint64_t v54 = &unk_1EDA47700;
            *(_WORD *)(v54 + 8) = 2;
            v53 += 64;
            v54 += 64;
          }
          while (v54 != result + (v51 << 6));
        }
        *((void *)v7 + 51) = result;
        if (a3 >= 1)
        {
          unsigned int v55 = a3 + 1;
          do
          {
            uint64_t v56 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v55;
            uint64_t result = v56;
            v6 += 8;
          }
          while (v55 > 1);
        }
        v20 = v7 + 104;
      }
      else
      {
        if (a5 != 1) {
          return result;
        }
        uint64_t v8 = *(void **)(result + 376);
        if (v8)
        {
          uint64_t v9 = (char *)(v8 - 2);
          uint64_t v10 = *(v8 - 1);
          if (v10)
          {
            uint64_t v11 = v10 << 6;
            uint64_t v12 = (char *)(v8 - 8);
            do
            {
              icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v12[v11]);
              v11 -= 64;
            }
            while (v11);
          }
          icu::UMemory::operator delete[](v9);
        }
        if (a3 <= 1) {
          int v13 = 1;
        }
        else {
          int v13 = a3;
        }
        uint64_t v14 = v13;
        if (v13 < 0) {
          uint64_t v15 = -1;
        }
        else {
          uint64_t v15 = ((uint64_t)v13 << 6) | 0x10;
        }
        uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v15, a2);
        if (result)
        {
          *(void *)uint64_t result = 64;
          *(void *)(result + 8) = v14;
          result += 16;
          uint64_t v16 = result;
          uint64_t v17 = result;
          do
          {
            *(void *)uint64_t v17 = &unk_1EDA47700;
            *(_WORD *)(v17 + 8) = 2;
            v16 += 64;
            v17 += 64;
          }
          while (v17 != result + (v14 << 6));
        }
        *((void *)v7 + 47) = result;
        if (a3 >= 1)
        {
          unsigned int v18 = a3 + 1;
          do
          {
            uint64_t v19 = result + 64;
            icu::UnicodeString::operator=((UChar **)result, v6);
            --v18;
            uint64_t result = v19;
            v6 += 8;
          }
          while (v18 > 1);
        }
        v20 = v7 + 96;
      }
    }
    else
    {
      v33 = *(void **)(result + 392);
      if (v33)
      {
        v34 = (char *)(v33 - 2);
        uint64_t v35 = *(v33 - 1);
        if (v35)
        {
          uint64_t v36 = v35 << 6;
          v37 = (char *)(v33 - 8);
          do
          {
            icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v37[v36]);
            v36 -= 64;
          }
          while (v36);
        }
        icu::UMemory::operator delete[](v34);
      }
      if (a3 <= 1) {
        int v38 = 1;
      }
      else {
        int v38 = a3;
      }
      uint64_t v39 = v38;
      if (v38 < 0) {
        uint64_t v40 = -1;
      }
      else {
        uint64_t v40 = ((uint64_t)v38 << 6) | 0x10;
      }
      uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v40, a2);
      if (result)
      {
        *(void *)uint64_t result = 64;
        *(void *)(result + 8) = v39;
        result += 16;
        uint64_t v41 = result;
        uint64_t v42 = result;
        do
        {
          *(void *)uint64_t v42 = &unk_1EDA47700;
          *(_WORD *)(v42 + 8) = 2;
          v41 += 64;
          v42 += 64;
        }
        while (v42 != result + (v39 << 6));
      }
      *((void *)v7 + 49) = result;
      if (a3 >= 1)
      {
        unsigned int v43 = a3 + 1;
        do
        {
          uint64_t v44 = result + 64;
          icu::UnicodeString::operator=((UChar **)result, v6);
          --v43;
          uint64_t result = v44;
          v6 += 8;
        }
        while (v43 > 1);
      }
      v20 = v7 + 100;
    }
  }
  int *v20 = a3;
  return result;
}

uint64_t icu::DateFormatSymbols::setAmPmStrings(icu::DateFormatSymbols *this, UChar **a2, int a3)
{
  v4 = a2;
  v6 = (void *)*((void *)this + 35);
  if (v6)
  {
    v7 = (char *)(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    if (v8)
    {
      uint64_t v9 = v8 << 6;
      uint64_t v10 = (char *)(v6 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10[v9]);
        v9 -= 64;
      }
      while (v9);
    }
    icu::UMemory::operator delete[](v7);
  }
  if (a3 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = a3;
  }
  uint64_t v12 = v11;
  if (v11 < 0) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = ((uint64_t)v11 << 6) | 0x10;
  }
  uint64_t result = icu::UMemory::operator new[]((icu::UMemory *)v13, (unint64_t)a2);
  if (result)
  {
    *(void *)uint64_t result = 64;
    *(void *)(result + 8) = v12;
    result += 16;
    uint64_t v15 = result;
    uint64_t v16 = result;
    do
    {
      *(void *)uint64_t v16 = &unk_1EDA47700;
      *(_WORD *)(v16 + 8) = 2;
      v15 += 64;
      v16 += 64;
    }
    while (v16 != result + (v12 << 6));
  }
  *((void *)this + 35) = result;
  if (a3 >= 1)
  {
    unsigned int v17 = a3 + 1;
    do
    {
      uint64_t v18 = result + 64;
      icu::UnicodeString::operator=((UChar **)result, v4);
      --v17;
      uint64_t result = v18;
      v4 += 8;
    }
    while (v17 > 1);
  }
  *((_DWORD *)this + 72) = a3;
  return result;
}

icu::UnicodeString *icu::DateFormatSymbols::setTimeSeparatorString(UChar **this, UChar **a2)
{
  return icu::UnicodeString::operator=(this + 39, a2);
}

uint64_t icu::DateFormatSymbols::getZoneStrings(icu::DateFormatSymbols *this, int *a2, int *a3)
{
  umtx_lock((atomic_ullong *)&unk_1E9192148);
  uint64_t v6 = *((void *)this + 65);
  if (!v6)
  {
    uint64_t v6 = *((void *)this + 66);
    if (!v6)
    {
      icu::DateFormatSymbols::initZoneStringsArray((uint64_t)this);
      uint64_t v6 = *((void *)this + 66);
    }
  }
  *a2 = *((_DWORD *)this + 134);
  *a3 = *((_DWORD *)this + 135);
  umtx_unlock((std::mutex **)&unk_1E9192148);
  return v6;
}

uint64_t icu::DateFormatSymbols::initZoneStringsArray(uint64_t this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(this + 520))
  {
    uint64_t v1 = this;
    if (!*(void *)(this + 528))
    {
      int v30 = 0;
      uint64_t v2 = icu::TimeZone::createTimeZoneIDEnumeration(0, 0, 0, &v30);
      int v3 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 32))(v2, &v30);
      int v4 = v3;
      v5 = 0;
      if (v30 <= 0)
      {
        size_t v6 = 8 * v3;
        v7 = uprv_malloc(v6);
        v5 = v7;
        if (v7)
        {
          bzero(v7, v6);
          Instance = icu::TimeZoneNames::createInstance((icu::TimeZoneNames *)(v1 + 544), (const icu::Locale *)&v30, v8);
          uint64_t v10 = (icu::Calendar *)(*(uint64_t (**)(void *, int *))(*Instance + 104))(Instance, &v30);
          if (v30 > 0) {
            goto LABEL_23;
          }
          icu::Calendar::getNow(v10);
          double v12 = v11;
          long long v32 = 0u;
          long long v33 = 0u;
          uint64_t v35 = 0;
          long long v34 = 0u;
          unsigned int v31 = &unk_1EDA47700;
          LOWORD(v32) = 2;
          uint64_t v13 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 56))(v2, &v30);
          uint64_t v15 = v30;
          if (v13) {
            BOOL v16 = v30 <= 0;
          }
          else {
            BOOL v16 = 0;
          }
          if (v16)
          {
            unsigned int v17 = (UChar **)v13;
            uint64_t v18 = 0;
            while (1)
            {
              uint64_t v19 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x150, v14);
              if (!v19) {
                break;
              }
              v20 = v19;
              *uint64_t v19 = xmmword_18CA92270;
              v21 = (UChar **)(v19 + 1);
              v22 = (UChar **)(v20 + 21);
              uint64_t v23 = v21;
              uint64_t v24 = v21;
              do
              {
                *uint64_t v24 = (UChar *)&unk_1EDA47700;
                *((_WORD *)v24 + 4) = 2;
                v23 += 8;
                v24 += 8;
              }
              while (v24 != v22);
              v5[v18] = v21;
              icu::UnicodeString::copyFrom(v21, v17, 0);
              (*(void (**)(void *, UChar **, void *, uint64_t, uint64_t, int *, double))(*Instance + 112))(Instance, v17, &unk_18CA92290, 4, v5[v18++] + 64, &v30, v12);
              unsigned int v17 = (UChar **)(*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 56))(v2, &v30);
              uint64_t v15 = v30;
              if (v17) {
                BOOL v25 = v30 < 1;
              }
              else {
                BOOL v25 = 0;
              }
              if (!v25) {
                goto LABEL_22;
              }
            }
            v5[v18] = 0;
            uint64_t v15 = 7;
            int v30 = 7;
          }
LABEL_22:
          icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v31);
          if (v30 >= 1)
          {
LABEL_23:
            if (v4 >= 1)
            {
              for (uint64_t i = 0; i != v4; ++i)
              {
                uint64_t v27 = v5[i];
                if (v27)
                {
                  uint64_t v28 = *(void **)(v27 - 8);
                  if (v28)
                  {
                    uint64_t v29 = (void)v28 << 6;
                    do
                    {
                      icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)(v27 - 64 + v29));
                      v29 -= 64;
                    }
                    while (v29);
                  }
                  icu::UMemory::operator delete[]((void *)(v27 - 16));
                }
              }
            }
            uprv_free(v5);
            v5 = 0;
          }
          (*(void (**)(void *))(*Instance + 8))(Instance);
        }
        else
        {
          int v30 = 7;
        }
      }
      this = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
      *(void *)(v1 + 528) = v5;
      *(_DWORD *)(v1 + 536) = v4;
      *(_DWORD *)(v1 + 540) = 5;
    }
  }
  return this;
}

void icu::DateFormatSymbols::setZoneStrings(icu::DateFormatSymbols *this, const icu::UnicodeString *const *a2, int a3, int a4)
{
  icu::DateFormatSymbols::disposeZoneStrings(this);
  *((_DWORD *)this + 134) = a3;
  *((_DWORD *)this + 135) = a4;

  icu::DateFormatSymbols::createZoneStrings(this, a2);
}

const __int16 *icu::DateFormatSymbols::getPatternUChars(icu::DateFormatSymbols *this)
{
  return L"GyMdkHmsSEDFwWahKzYeugAZvcLQqVUOXxrbB";
}

uint64_t icu::DateFormatSymbols::getPatternCharIndex(UChar c)
{
  uint64_t v1 = u_strchr((const UChar *)L"GyMdkHmsSEDFwWahKzYeugAZvcLQqVUOXxrbB", c);
  if (v1) {
    return ((unint64_t)((char *)v1 - (char *)L"GyMdkHmsSEDFwWahKzYeugAZvcLQqVUOXxrbB") >> 1);
  }
  else {
    return 38;
  }
}

uint64_t icu::DateFormatSymbols::isNumericField(int a1, int a2)
{
  BOOL v3 = ((1 << a1) & 0x1E080004) != 0 && a2 < 3;
  unsigned int v4 = ((1 << a1) & 0x40075BDFALL) != 0 || v3;
  if (a1 == 38) {
    return 0;
  }
  else {
    return v4;
  }
}

BOOL icu::DateFormatSymbols::isNumericPatternChar(UChar c, int a2)
{
  BOOL v3 = u_strchr((const UChar *)L"GyMdkHmsSEDFwWahKzYeugAZvcLQqVUOXxrbB", c);
  BOOL result = 0;
  if (v3)
  {
    unint64_t v5 = (char *)v3 - (char *)L"GyMdkHmsSEDFwWahKzYeugAZvcLQqVUOXxrbB";
    if ((v5 & 0x1FFFFFFFELL) != 0x4C)
    {
      BOOL result = 1;
      uint64_t v6 = 1 << (v5 >> 1);
      if ((v6 & 0x40075BDFALL) == 0) {
        return (v6 & 0x1E080004) != 0 && a2 < 3;
      }
    }
  }
  return result;
}

icu::UnicodeString *icu::DateFormatSymbols::getLocalPatternChars(UChar **this, UChar **a2)
{
  return icu::UnicodeString::fastCopyFrom(a2, this + 96);
}

icu::UnicodeString *icu::DateFormatSymbols::setLocalPatternChars(UChar **this, UChar **a2)
{
  return icu::UnicodeString::operator=(this + 96, a2);
}

char *sub_18C91F904(char *result, unsigned int a2, uint64_t a3, void *a4, int *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = &result[64 * (unint64_t)a2];
  if (*((_WORD *)v5 + 4)) {
    __int16 v6 = 2;
  }
  else {
    __int16 v6 = *((_WORD *)v5 + 4) & 0x1F;
  }
  *((_WORD *)v5 + 4) = v6;
  if (*a5 <= 0)
  {
    memset(v16, 0, sizeof(v16));
    icu::UnicodeString::UnicodeString(v16, *a4, 0xFFFFFFFFLL, 0);
    uint64_t v9 = uhash_get(*(void *)(a3 + 184), (uint64_t)v16);
    if (v9)
    {
      uint64_t v10 = (uint64_t *)v9;
      memset(v15, 0, sizeof(v15));
      unint64_t v14 = &aLocaleCalendar[81];
      icu::UnicodeString::UnicodeString(v15, 0, &v14);
      double v11 = (UChar **)uhash_get(*v10, (uint64_t)v15);
      if (v11) {
        icu::UnicodeString::fastCopyFrom((UChar **)v5, v11);
      }
      else {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)v5);
      }
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
    }
    else
    {
      uint64_t v13 = 2;
      *a5 = 2;
    }
    return (char *)icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v16);
  }
  return result;
}

icu::CharString *sub_18C91FA40(icu::CharString *a1, const char *a2, const char *a3, const char *a4, UErrorCode *a5)
{
  v7 = sub_18C91FDC4(a1, a2, a3, a5);
  uint64_t v8 = icu::CharString::append(v7, 47, a5);

  return icu::CharString::append(v8, a4, -1, a5);
}

uint64_t *sub_18C91FA94(uint64_t *result, _DWORD *a2, uint64_t a3, void *a4, int *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*a5 <= 0)
  {
    uint64_t v8 = result;
    memset(v12, 0, sizeof(v12));
    icu::UnicodeString::UnicodeString(v12, *a4, 0xFFFFFFFFLL, 0);
    uint64_t v9 = uhash_get(*(void *)(a3 + 8), (uint64_t)v12);
    if (v9)
    {
      uint64_t v10 = v9;
      *a2 = uhash_geti(*(void *)(a3 + 96), (uint64_t)v12);
      *uint64_t v8 = v10;
      uhash_remove(*(void *)(a3 + 8), v12);
    }
    else
    {
      *a2 = 0;
      uint64_t v11 = 2;
      *a5 = 2;
    }
    return (uint64_t *)icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)v12);
  }
  return result;
}

icu::CharString *sub_18C91FB7C(icu::CharString *a1, const char *a2, UErrorCode *a3)
{
  unsigned int v4 = sub_18C91FA40(a1, "cyclicNameSets", a2, "format", a3);
  unint64_t v5 = icu::CharString::append(v4, 47, a3);

  return icu::CharString::append(v5, "abbreviated", -1, a3);
}

_OWORD *sub_18C91FBE4(uint64_t a1, void *a2, _DWORD *a3, int *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*a4 > 0) {
    return 0;
  }
  memset(v22, 0, sizeof(v22));
  icu::UnicodeString::UnicodeString(v22, *a2, 0xFFFFFFFFLL, 0);
  uint64_t v8 = (uint64_t *)uhash_get(*(void *)(a1 + 184), (uint64_t)v22);
  *a3 = 10;
  uint64_t v10 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x290, v9);
  if (v10)
  {
    _OWORD *v10 = xmmword_18CA92280;
    unsigned int v4 = v10 + 1;
    uint64_t v11 = v10 + 1;
    double v12 = v10 + 1;
    do
    {
      *(void *)double v12 = &unk_1EDA47700;
      *((_WORD *)v12 + 4) = 2;
      v11 += 4;
      v12 += 4;
    }
    while (v12 != v10 + 41);
    uint64_t v13 = *a3;
    if (v8)
    {
      if ((int)v13 >= 1)
      {
        uint64_t v14 = 0;
        uint64_t v15 = (UChar **)(v10 + 1);
        do
        {
          memset(v21, 0, sizeof(v21));
          icu::UnicodeString::UnicodeString(v21, off_1E550BA60[v14], 0xFFFFFFFFLL, 0);
          BOOL v16 = (UChar **)uhash_get(*v8, (uint64_t)v21);
          if (v16) {
            icu::UnicodeString::fastCopyFrom(v15, v16);
          }
          else {
            icu::UnicodeString::setToBogus((icu::UnicodeString *)v15);
          }
          icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v21);
          ++v14;
          uint64_t v13 = (int)*a3;
          v15 += 8;
        }
        while (v14 < v13);
      }
    }
    else if ((int)v13 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = (icu::UnicodeString *)(v10 + 1);
      do
      {
        icu::UnicodeString::setToBogus(v19);
        ++v18;
        uint64_t v13 = (int)*a3;
        uint64_t v19 = (icu::UnicodeString *)((char *)v19 + 64);
      }
      while (v18 < v13);
    }
  }
  else
  {
    unsigned int v4 = 0;
    uint64_t v13 = 7;
    *a4 = 7;
  }
  icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v22);
  return v4;
}

icu::CharString *sub_18C91FDC4(icu::CharString *a1, const char *a2, const char *a3, UErrorCode *a4)
{
  *((_DWORD *)a1 + 14) = 0;
  **(unsigned char **)a1 = 0;
  __int16 v6 = icu::CharString::append(a1, a2, -1, a4);
  v7 = icu::CharString::append(v6, 47, a4);

  return icu::CharString::append(v7, a3, -1, a4);
}

uint64_t *sub_18C91FE24(uint64_t *result, _DWORD *a2, uint64_t a3, void *a4, int *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*a5 <= 0)
  {
    uint64_t v8 = result;
    memset(v20, 0, sizeof(v20));
    icu::UnicodeString::UnicodeString(v20, *a4, 0xFFFFFFFFLL, 0);
    uint64_t v9 = uhash_get(*(void *)(a3 + 8), (uint64_t)v20);
    if (v9)
    {
      uint64_t v10 = (UChar **)v9;
      int v12 = uhash_geti(*(void *)(a3 + 96), (uint64_t)v20);
      signed int v13 = v12 + 1;
      *a2 = v12 + 1;
      if (v12 < -1) {
        uint64_t v14 = -1;
      }
      else {
        uint64_t v14 = ((uint64_t)v13 << 6) | 0x10;
      }
      uint64_t v15 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v14, v11);
      if (v15)
      {
        *uint64_t v15 = 64;
        v15[1] = v13;
        uint64_t v16 = (uint64_t)(v15 + 2);
        if (v12 == -1)
        {
          *uint64_t v8 = v16;
        }
        else
        {
          uint64_t v17 = v15 + 2;
          uint64_t v18 = v15 + 2;
          do
          {
            *uint64_t v18 = &unk_1EDA47700;
            *((_WORD *)v18 + 4) = 2;
            v17 += 8;
            v18 += 8;
          }
          while (v18 != (void *)(v16 + ((uint64_t)v13 << 6)));
          *uint64_t v8 = v16;
          if (v12 >= 1)
          {
            uint64_t v19 = (UChar **)(v15 + 10);
            do
            {
              icu::UnicodeString::operator=(v19, v10);
              --v13;
              v19 += 8;
              v10 += 8;
            }
            while (v13 > 1);
          }
        }
        return (uint64_t *)icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)v20);
      }
      *uint64_t v8 = 0;
      uint64_t v16 = 7;
    }
    else
    {
      *a2 = 0;
      uint64_t v16 = 2;
    }
    *a5 = v16;
    return (uint64_t *)icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)v20);
  }
  return result;
}

icu::UnicodeString *sub_18C91FFB8(icu::UnicodeString *result, unsigned int *a2, const UChar *a3, unsigned int a4, int a5, int *a6)
{
  if (*a6 <= 0)
  {
    uint64_t v10 = result;
    *a2 = a4;
    if (a4 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = a4;
    }
    BOOL result = (icu::UnicodeString *)icu::UMemory::operator new[]((icu::UMemory *)((v11 << 6) | 0x10), (unint64_t)a2);
    if (result)
    {
      *(void *)BOOL result = 64;
      *((void *)result + 1) = v11;
      int v12 = (char *)result + 16;
      signed int v13 = (_WORD *)((char *)result + 16);
      do
      {
        *(void *)signed int v13 = &unk_1EDA47700;
        v13[4] = 2;
        v12 += 64;
        v13 += 32;
      }
      while (v13 != (_WORD *)((char *)result + 64 * v11 + 16));
      *(void *)uint64_t v10 = (char *)result + 16;
      if ((int)*a2 >= 1)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 2 * a5;
        do
        {
          uint64_t v17 = (icu::UnicodeString *)(*(void *)v10 + v14);
          uint64_t v18 = a3;
          BOOL result = icu::UnicodeString::setTo(v17, 1, &v18, -1);
          ++v15;
          a3 = (const UChar *)((char *)a3 + v16);
          v14 += 64;
        }
        while (v15 < (int)*a2);
      }
    }
    else
    {
      *(void *)uint64_t v10 = 0;
      *a2 = 0;
      *a6 = 7;
    }
  }
  return result;
}

void sub_18C9200F0(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EDA4BBE8;
  uhash_setValueDeleter(a1[1], (uint64_t)sub_18C9217EC);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 67));
  uint64_t v4 = a1[66];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 58));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 50));
  icu::UVector::~UVector((icu::UVector *)(a1 + 45));
  sub_18C921850((uint64_t)(a1 + 34));
  __int16 v6 = (unsigned char *)a1[23];
  if (v6) {
    uhash_close(v6);
  }
  v7 = (unsigned char *)a1[12];
  if (v7) {
    uhash_close(v7);
  }
  uint64_t v8 = (unsigned char *)a1[1];
  if (v8) {
    uhash_close(v8);
  }

  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
}

void sub_18C9201D0(uint64_t *a1)
{
  sub_18C9200F0(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9201F8(uint64_t result, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  __s1 = a2;
  if (*a5 > 0) {
    return result;
  }
  unint64_t v5 = a5;
  uint64_t v7 = result;
  uint64_t v90 = 0;
  uint64_t v89 = 0;
  memset(v88, 0, sizeof(v88));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v88, a3, a5);
  if (*v5 > 0)
  {
LABEL_3:
    BOOL result = (uint64_t)v90;
    if (v90) {
      return (*(uint64_t (**)(icu::UVector *))(*(void *)v90 + 8))(v90);
    }
    return result;
  }
  BOOL result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v88, 0, (const char **)&__s1, a3);
  uint64_t v83 = v5;
  uint64_t v84 = (uint64_t *)v7;
  if (result)
  {
    int v8 = 0;
    uint64_t v9 = (UChar **)(v7 + 536);
    uint64_t v10 = (uint64_t (**)(void *))(v7 + 360);
    do
    {
      memset(v92, 0, sizeof(v92));
      icu::UnicodeString::UnicodeString(v92, __s1, 0xFFFFFFFFLL, 0);
      int v11 = sub_18C920A80(v7, (uint64_t)v92, (uint64_t)a3, v5);
      unint64_t v13 = *v5;
      if ((int)v13 > 0)
      {
LABEL_106:
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v92);
        goto LABEL_3;
      }
      if (v11)
      {
        if (v11 != 2)
        {
          if (v11 == 1)
          {
            unint64_t v13 = (unint64_t)v90;
            if (!v90)
            {
              uint64_t v14 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, v12);
              uint64_t v15 = v5;
              uint64_t v16 = (uint64_t)v14;
              if (v14) {
                icu::UVector::UVector((uint64_t)v14, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, v15);
              }
              sub_18C7F5A70((uint64_t)&v90, v16, v15);
              unint64_t v13 = *v15;
              unint64_t v5 = v15;
              if ((int)v13 > 0) {
                goto LABEL_106;
              }
            }
            uint64_t v17 = icu::UnicodeString::clone(v9, v12, (uint64_t *)v13);
            if (!v17 && *v5 <= 0) {
              int *v5 = 7;
            }
            uint64_t v18 = (uint64_t (**)(void *))v90;
LABEL_20:
            icu::UVector::adoptElement(v18, v17, (UErrorCode *)v5);
            unint64_t v13 = *v5;
            if ((int)v13 >= 1) {
              goto LABEL_106;
            }
            goto LABEL_65;
          }
          v22 = *(icu::UVector **)(v7 + 528);
          if (!v22
            || !*((_DWORD *)v22 + 2)
            || (icu::UVector::indexOf(v22, (uint64_t)v92, 0) & 0x80000000) == 0
            || !strcmp(__s1, "AmPmMarkersAbbr"))
          {
            uint64_t v23 = __s1;
            if (!strcmp(__s1, "AmPmMarkers") || !strcmp(v23, "AmPmMarkersAbbr") || !strcmp(v23, "AmPmMarkersNarrow"))
            {
              if (!uhash_get(*(void *)(v7 + 8), (uint64_t)v92))
              {
                v86[0] = 0;
                v86[1] = 0;
                uint64_t v87 = 0;
                (*(void (**)(void *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 80))(v86, a3, v5);
                uint64_t v25 = (int)v87;
                v85 = 0;
                int v26 = (icu::UMemory *)((int)v87 < 0 ? -1 : ((uint64_t)(int)v87 << 6) | 0x10);
                uint64_t v27 = (void *)icu::UMemory::operator new[](v26, v24);
                if (v27)
                {
                  *uint64_t v27 = 64;
                  v27[1] = v25;
                  uint64_t v28 = v27 + 2;
                  if (v25)
                  {
                    uint64_t v29 = v27 + 2;
                    int v30 = v27 + 2;
                    do
                    {
                      *int v30 = &unk_1EDA47700;
                      *((_WORD *)v30 + 4) = 2;
                      v29 += 8;
                      v30 += 8;
                    }
                    while (v30 != &v28[8 * v25]);
                  }
                  unsigned int v31 = v10;
                  v85 = v27 + 2;
                }
                else
                {
                  unsigned int v31 = v10;
                  uint64_t v28 = 0;
                  v85 = 0;
                  if (*v5 <= 0)
                  {
                    uint64_t v28 = 0;
                    int *v5 = 7;
                  }
                }
                (*(void (**)(icu::ResourceValue *, void *, uint64_t, int *))(*(void *)a3 + 104))(a3, v28, v25, v5);
                uint64_t v32 = (uint64_t)v85;
                v85 = 0;
                uint64_t v33 = *(void *)(v7 + 8);
                uint64_t v36 = (icu::UnicodeString *)icu::UMemory::operator new(v35, (icu::UMemory *)0x40, v34);
                uint64_t v37 = (uint64_t)v36;
                if (v36) {
                  icu::UnicodeString::UnicodeString(v36, (UChar **)v92);
                }
                uhash_put(v33, v37, v32, v83);
                uint64_t v38 = *(void *)(v7 + 96);
                uint64_t v41 = (icu::UnicodeString *)icu::UMemory::operator new(v40, (icu::UMemory *)0x40, v39);
                uint64_t v42 = (uint64_t)v41;
                if (v41) {
                  icu::UnicodeString::UnicodeString(v41, (UChar **)v92);
                }
                uint64_t v43 = v38;
                unint64_t v5 = v83;
                uhash_puti(v43, v42, v25, v83);
                int v44 = *v83;
                sub_18C7F9F20((uint64_t *)&v85);
                BOOL v45 = v44 < 1;
                uint64_t v7 = (uint64_t)v84;
                uint64_t v10 = v31;
                if (!v45) {
                  goto LABEL_106;
                }
              }
            }
            else if (!strcmp(v23, "eras") {
                   || !strcmp(v23, "dayNames")
            }
                   || !strcmp(v23, "monthNames")
                   || !strcmp(v23, "quarters")
                   || !strcmp(v23, "dayPeriod")
                   || !strcmp(v23, "monthPatterns")
                   || !strcmp(v23, "cyclicNameSets"))
            {
              sub_18C920DD0((void *)v7, (uint64_t)v92, v23, a3, v5);
            }
          }
        }
      }
      else if (!uhash_get(*(void *)(v7 + 8), (uint64_t)v9) && !uhash_get(*(void *)(v7 + 184), (uint64_t)v9))
      {
        v20 = icu::UnicodeString::clone(v9, v19, (uint64_t *)v13);
        if (!v20 && *v5 <= 0) {
          int *v5 = 7;
        }
        icu::UVector::adoptElement(v10, v20, (UErrorCode *)v5);
        unint64_t v13 = *v5;
        if ((int)v13 > 0) {
          goto LABEL_106;
        }
        uint64_t v17 = icu::UnicodeString::clone((UChar **)v92, v21, (uint64_t *)v13);
        if (!v17 && *v5 <= 0) {
          int *v5 = 7;
        }
        uint64_t v18 = v10;
        goto LABEL_20;
      }
LABEL_65:
      icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v92);
      BOOL result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v88, ++v8, (const char **)&__s1, a3);
    }
    while (result);
  }
  v46 = (icu::UVector *)(v7 + 360);
  int v47 = *(_DWORD *)(v7 + 368);
LABEL_67:
  if (v47 >= 1)
  {
    signed int v48 = 0;
    int v49 = 0;
    while (1)
    {
      uint64_t v50 = icu::UVector::elementAt(v46, v48);
      uint64_t v51 = uhash_get(*(void *)(v7 + 8), v50);
      if (v51) {
        break;
      }
      BOOL result = uhash_get(*(void *)(v7 + 184), v50);
      if (result)
      {
        uint64_t v65 = result;
        int v53 = v48 + 1;
        uint64_t v66 = (UChar **)icu::UVector::elementAt(v46, v48 + 1);
        if (!uhash_get(*(void *)(v7 + 184), (uint64_t)v66))
        {
          uint64_t v69 = *(void *)(v7 + 184);
          v70 = (icu::UnicodeString *)icu::UMemory::operator new(v68, (icu::UMemory *)0x40, v67);
          uint64_t v71 = v70;
          if (v70) {
            icu::UnicodeString::UnicodeString(v70, v66);
          }
          uint64_t v72 = (uint64_t)v71;
          unint64_t v5 = v83;
          uhash_put(v69, v72, v65, v83);
        }
        if (*v5 > 0) {
          goto LABEL_3;
        }
LABEL_98:
        icu::UVector::removeElementAt((uint64_t (**)(void))v46, v53);
        BOOL result = icu::UVector::removeElementAt((uint64_t (**)(void))v46, v48);
        int v49 = 1;
        goto LABEL_99;
      }
      v48 += 2;
LABEL_99:
      int v47 = *(_DWORD *)(v7 + 368);
      if (v48 >= v47)
      {
        if (!v49 || !v47) {
          goto LABEL_102;
        }
        goto LABEL_67;
      }
    }
    uint64_t v52 = (UChar **)v51;
    int v53 = v48 + 1;
    uint64_t v54 = (UChar **)icu::UVector::elementAt(v46, v48 + 1);
    if (!uhash_get(*(void *)(v7 + 8), (uint64_t)v54))
    {
      int v55 = uhash_geti(*(void *)(v7 + 96), v50);
      *(void *)&v92[0] = 0;
      uint64_t v57 = v55;
      if (v55 < 0) {
        uint64_t v58 = -1;
      }
      else {
        uint64_t v58 = ((uint64_t)v55 << 6) | 0x10;
      }
      uint64_t v59 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v58, v56);
      if (!v59)
      {
        *(void *)&v92[0] = 0;
        if (*v5 <= 0) {
          int *v5 = 7;
        }
LABEL_109:
        sub_18C7F9F20((uint64_t *)v92);
        goto LABEL_3;
      }
      *uint64_t v59 = 64;
      v59[1] = v57;
      v61 = (UChar **)(v59 + 2);
      if (v57)
      {
        int v62 = v59 + 2;
        uint64_t v63 = (UChar **)(v59 + 2);
        do
        {
          *uint64_t v63 = (UChar *)&unk_1EDA47700;
          *((_WORD *)v63 + 4) = 2;
          v62 += 8;
          v63 += 8;
        }
        while (v63 != &v61[8 * v57]);
        *(void *)&v92[0] = v59 + 2;
        if (*v5 >= 1) {
          goto LABEL_109;
        }
        if ((int)v57 >= 1)
        {
          unsigned int v64 = v57 + 1;
          do
          {
            icu::UnicodeString::operator=(v61, v52);
            --v64;
            v61 += 8;
            v52 += 8;
          }
          while (v64 > 1);
          v61 = *(UChar ***)&v92[0];
          unint64_t v5 = v83;
        }
      }
      else
      {
        *(void *)&v92[0] = v59 + 2;
        if (*v5 >= 1) {
          goto LABEL_109;
        }
      }
      *(void *)&v92[0] = 0;
      uint64_t v73 = v84[1];
      int v74 = (icu::UnicodeString *)icu::UMemory::operator new(v84, (icu::UMemory *)0x40, v60);
      uint64_t v75 = (uint64_t)v74;
      if (v74) {
        icu::UnicodeString::UnicodeString(v74, v54);
      }
      uhash_put(v73, v75, (uint64_t)v61, v5);
      uint64_t v7 = (uint64_t)v84;
      uint64_t v76 = v84[12];
      unsigned int v79 = (icu::UnicodeString *)icu::UMemory::operator new(v78, (icu::UMemory *)0x40, v77);
      uint64_t v80 = v79;
      if (v79) {
        icu::UnicodeString::UnicodeString(v79, v54);
      }
      uint64_t v81 = (uint64_t)v80;
      unint64_t v5 = v83;
      uhash_puti(v76, v81, v57, v83);
      sub_18C7F9F20((uint64_t *)v92);
    }
    if (*v5 >= 1) {
      goto LABEL_3;
    }
    goto LABEL_98;
  }
LABEL_102:
  v82 = v90;
  if (v90)
  {
    BOOL result = *(void *)(v7 + 528);
    if (result)
    {
      BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      v82 = v90;
    }
    *(void *)(v7 + 528) = v82;
  }
  return result;
}

uint64_t sub_18C920A80(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*a4 <= 0 && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 24))(a3) == 3)
  {
    unsigned int v23 = 0;
    uint64_t v8 = (*(uint64_t (**)(uint64_t, unsigned int *, int *))(*(void *)a3 + 40))(a3, &v23, a4);
    if (*a4 <= 0)
    {
      memset(v25, 0, sizeof(v25));
      icu::UnicodeString::UnicodeString((uint64_t)v25, v8, v23);
      if (!icu::UnicodeString::doEqualsSubstring((uint64_t)v25, 0, 17, (uint64_t)aLocaleCalendar, 0, 17)) {
        goto LABEL_31;
      }
      int v11 = WORD4(v25[0]) >> 5;
      if (SWORD4(v25[0]) < 0) {
        int v11 = HIDWORD(v25[0]);
      }
      v21[1] = aLocaleCalendar;
      if (v11 < 18) {
        goto LABEL_31;
      }
      if (SWORD4(v25[0]) < 0)
      {
        unsigned int v12 = HIDWORD(v25[0]);
        int v13 = SHIDWORD(v25[0]) >= 17 ? 17 : HIDWORD(v25[0]);
      }
      else
      {
        unsigned int v12 = WORD4(v25[0]) >> 5;
        int v13 = v12 >= 0x11 ? 17 : WORD4(v25[0]) >> 5;
      }
      int v14 = icu::UnicodeString::doIndexOf((uint64_t)v25, 0x2Fu, v13, v12 - v13);
      if (v14 < 18) {
        goto LABEL_31;
      }
      int v15 = v14;
      memset(v24, 0, sizeof(v24));
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v25, 17, v14 - 17, (icu::UnicodeString *)v24);
      if ((SWORD4(v25[0]) & 0x8000u) == 0) {
        uint64_t v16 = WORD4(v25[0]) >> 5;
      }
      else {
        uint64_t v16 = HIDWORD(v25[0]);
      }
      sub_18C9215F8(a1 + 536, (const icu::UnicodeString *)v25, v15 + 1, v16);
      if (sub_18C830FC4(a1 + 400, (uint64_t)v24) && (sub_18C8A1B58(a2, a1 + 536) & 1) != 0)
      {
        uint64_t v9 = 0;
LABEL_36:
        icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v24);
        goto LABEL_32;
      }
      if (sub_18C8A1B58(a1 + 400, (uint64_t)v24) && sub_18C830FC4(a2, a1 + 536))
      {
        v22 = aGregorian_2;
        int v18 = sub_18C7EFDE8((uint64_t)v24, (uint64_t *)&v22, 9);
        v21[0] = v22;
        uint64_t v17 = v21;
        if (!v18)
        {
          uint64_t v9 = 2;
          goto LABEL_36;
        }
        unint64_t v19 = (UChar **)(a1 + 464);
        if (*(_WORD *)(a1 + 472))
        {
          icu::UnicodeString::operator=(v19, (UChar **)v24);
        }
        else if (!sub_18C830FC4((uint64_t)v19, (uint64_t)v24))
        {
          goto LABEL_30;
        }
        uint64_t v9 = 1;
        goto LABEL_36;
      }
LABEL_30:
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v24);
LABEL_31:
      uint64_t v20 = 5;
      *a4 = 5;
      uint64_t v9 = 3;
LABEL_32:
      icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)v25);
      return v9;
    }
  }
  return 3;
}

uint64_t sub_18C920D58@<X0>(uint64_t *a1@<X0>, UChar **a2@<X1>, unsigned int a3@<W2>, int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v9 = (icu::UnicodeString *)icu::UMemory::operator new(a5, (icu::UMemory *)0x40, (unint64_t)a2);
  uint64_t v10 = (uint64_t)v9;
  if (v9) {
    icu::UnicodeString::UnicodeString(v9, a2);
  }

  return uhash_puti(v8, v10, a3, a4);
}

void *sub_18C920DD0(void *result, uint64_t a2, char *a3, icu::ResourceValue *a4, int *a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v75 = a3;
  if (*a5 > 0) {
    return result;
  }
  uint64_t v8 = (uint64_t)result;
  uint64_t v74 = 0;
  memset(v73, 0, sizeof(v73));
  BOOL result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a4 + 88))(v73, a4, a5);
  if (*a5 > 0) {
    return result;
  }
  BOOL result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v73, 0, (const char **)&v75, a4);
  if (!result) {
    return result;
  }
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v66 = (uint64_t (**)(void *))(v8 + 360);
  unint64_t v67 = (uint64_t *)(v8 + 8);
  while (1)
  {
    memset(v76, 0, sizeof(v76));
    icu::UnicodeString::UnicodeString(v76, v75, 0xFFFFFFFFLL, 0);
    int v11 = WORD4(v76[0]) >> 5;
    if (SWORD4(v76[0]) < 0) {
      int v11 = HIDWORD(v76[0]);
    }
    BOOL v12 = icu::UnicodeString::doEqualsSubstring((uint64_t)v76, v11 - 8, 8, (uint64_t)&aLocaleCalendar[17], 0, 8);
    v68[2] = &aLocaleCalendar[17];
    if (v12) {
      goto LABEL_67;
    }
    if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a4 + 24))(a4))
    {
      unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
      int v15 = (__int16)v14;
      int v16 = v14 >> 5;
      if (v15 >= 0) {
        int v17 = v16;
      }
      else {
        int v17 = *(_DWORD *)(a2 + 12);
      }
      LOWORD(v70[0]) = 47;
      uint64_t v18 = icu::UnicodeString::doAppend(a2, (uint64_t)v70, 0, 1);
      if ((SWORD4(v76[0]) & 0x8000u) == 0) {
        uint64_t v19 = WORD4(v76[0]) >> 5;
      }
      else {
        uint64_t v19 = HIDWORD(v76[0]);
      }
      icu::UnicodeString::doAppend(v18, (const icu::UnicodeString *)v76, 0, v19);
      BOOL v20 = icu::UnicodeString::doEqualsSubstring(a2, 0, 14, (uint64_t)&aLocaleCalendar[25], 0, 14);
      v68[1] = &aLocaleCalendar[25];
      if (v20)
      {
        unsigned int v21 = *(unsigned __int16 *)(a2 + 8);
        int v22 = (__int16)v21;
        unsigned int v23 = v21 >> 5;
        if (v22 < 0) {
          unsigned int v23 = *(_DWORD *)(a2 + 12);
        }
        if (v23 == 14)
        {
          int v24 = 14;
        }
        else if (icu::UnicodeString::doCompare(a2, 14, 8, (uint64_t)&aLocaleCalendar[39], 0, 8))
        {
          if (icu::UnicodeString::doCompare(a2, 14, 6, (uint64_t)&aLocaleCalendar[47], 0, 6))
          {
            if (icu::UnicodeString::doCompare(a2, 14, 9, (uint64_t)&aLocaleCalendar[53], 0, 9)) {
              goto LABEL_56;
            }
            int v24 = 23;
          }
          else
          {
            int v24 = 20;
          }
        }
        else
        {
          int v24 = 22;
        }
        unsigned int v42 = *(unsigned __int16 *)(a2 + 8);
        int v43 = (__int16)v42;
        unsigned int v44 = v42 >> 5;
        unsigned int v45 = *(_DWORD *)(a2 + 12);
        int v46 = v43 >= 0 ? v44 : *(_DWORD *)(a2 + 12);
        if (v24 == v46)
        {
          int v47 = 0;
        }
        else
        {
          if (icu::UnicodeString::doCompare(a2, v24, 7, (uint64_t)&aLocaleCalendar[62], 0, 7)) {
            goto LABEL_56;
          }
          int v43 = *(unsigned __int16 *)(a2 + 8);
          unsigned int v45 = *(_DWORD *)(a2 + 12);
          unsigned int v44 = v43 >> 5;
          int v47 = 7;
        }
        int v48 = v47 + v24;
        int v49 = (v43 & 0x8000u) == 0 ? v44 : v45;
        if (v48 != v49
          && icu::UnicodeString::doCompare(a2, v48, 12, (uint64_t)&aLocaleCalendar[69], 0, 12))
        {
          goto LABEL_56;
        }
      }
      if (uhash_get(*v67, a2) || uhash_get(*(void *)(v8 + 184), a2))
      {
LABEL_56:
        unsigned int v50 = *(unsigned __int16 *)(a2 + 8);
        if (v17 || (v50 & 1) == 0)
        {
          if ((v50 & 0x8000u) == 0) {
            unsigned int v51 = v50 >> 5;
          }
          else {
            unsigned int v51 = *(_DWORD *)(a2 + 12);
          }
          if (v51 > v17)
          {
            if (v17 > 1023)
            {
              *(_WORD *)(a2 + 8) = v50 | 0xFFE0;
              *(_DWORD *)(a2 + 12) = v17;
            }
            else
            {
              *(_WORD *)(a2 + 8) = *(_WORD *)(a2 + 8) & 0x1F | (32 * v17);
            }
          }
        }
        else
        {
          icu::UnicodeString::unBogus(a2);
        }
        icu::UnicodeString::doReplace(a2, 0, 0, 0, 0, 0);
        goto LABEL_67;
      }
      int v52 = sub_18C920A80(v8, a2, (uint64_t)a4, a5);
      uint64_t v13 = *a5;
      if ((int)v13 > 0) {
        return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v76);
      }
      if (v52)
      {
        if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a4 + 24))(a4) == 8)
        {
          v70[0] = 0;
          v70[1] = 0;
          uint64_t v71 = 0;
          (*(void (**)(void *__return_ptr, icu::ResourceValue *, int *))(*(void *)a4 + 80))(v70, a4, a5);
          uint64_t v55 = (int)v71;
          uint64_t v69 = 0;
          if ((int)v71 < 0) {
            uint64_t v56 = -1;
          }
          else {
            uint64_t v56 = ((uint64_t)(int)v71 << 6) | 0x10;
          }
          uint64_t v57 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v56, v54);
          if (v57)
          {
            void *v57 = 64;
            v57[1] = v55;
            uint64_t v58 = v57 + 2;
            if (v55)
            {
              uint64_t v59 = v57 + 2;
              unint64_t v60 = v57 + 2;
              do
              {
                *unint64_t v60 = &unk_1EDA47700;
                *((_WORD *)v60 + 4) = 2;
                v59 += 8;
                v60 += 8;
              }
              while (v60 != &v58[8 * v55]);
            }
            uint64_t v69 = v57 + 2;
          }
          else
          {
            uint64_t v58 = 0;
            uint64_t v69 = 0;
            if (*a5 <= 0)
            {
              uint64_t v58 = 0;
              *a5 = 7;
            }
          }
          (*(void (**)(icu::ResourceValue *, void *, uint64_t, int *))(*(void *)a4 + 104))(a4, v58, v55, a5);
          uint64_t v63 = (uint64_t)v69;
          uint64_t v69 = 0;
          sub_18C7EF48C(v67, (UChar **)a2, v63, a5);
          sub_18C920D58((uint64_t *)(v8 + 96), (UChar **)a2, v55, a5, v64);
          int v65 = *a5;
          sub_18C7F9F20((uint64_t *)&v69);
          if (v65 >= 1) {
            return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v76);
          }
          goto LABEL_95;
        }
        if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a4 + 24))(a4) != 2)
        {
LABEL_95:
          sub_18C805A88((icu::UnicodeString *)a2, 0, v17);
          goto LABEL_67;
        }
        sub_18C920DD0(v8, a2, v75, a4, a5);
      }
      else
      {
        v61 = icu::UnicodeString::clone((UChar **)(v8 + 536), v53, (uint64_t *)v13);
        if (!v61 && *a5 <= 0) {
          *a5 = 7;
        }
        icu::UVector::adoptElement(v66, v61, (UErrorCode *)a5);
        uint64_t v13 = *a5;
        if ((int)v13 > 0) {
          return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v76);
        }
        int v62 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
        if (!v62 && *a5 <= 0) {
          *a5 = 7;
        }
        icu::UVector::adoptElement(v66, v62, (UErrorCode *)a5);
      }
      uint64_t v13 = *a5;
      if ((int)v13 > 0) {
        return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v76);
      }
      goto LABEL_95;
    }
    if (!v9) {
      break;
    }
LABEL_27:
    LODWORD(v70[0]) = 0;
    uint64_t v31 = (*(uint64_t (**)(icu::ResourceValue *, void *, int *))(*(void *)a4 + 32))(a4, v70, a5);
    uint64_t v13 = *a5;
    if ((int)v13 > 0) {
      return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v76);
    }
    uint64_t v33 = v31;
    unint64_t v34 = icu::UMemory::operator new((uint64_t *)v13, (icu::UMemory *)0x40, v32);
    uint64_t v36 = (uint64_t)v34;
    if (v34)
    {
      uint64_t v72 = v33;
      icu::UnicodeString::UnicodeString(v34, 1, &v72);
      v68[0] = v72;
      uint64_t v37 = (uint64_t)v68;
    }
    else
    {
      uint64_t v37 = *a5;
      if ((int)v37 <= 0)
      {
        uint64_t v37 = 7;
        *a5 = 7;
      }
    }
    uint64_t v38 = v10;
    uint64_t v39 = *v10;
    uint64_t v40 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v37, (icu::UMemory *)0x40, v35);
    uint64_t v41 = (uint64_t)v40;
    if (v40) {
      icu::UnicodeString::UnicodeString(v40, (UChar **)v76);
    }
    uhash_put(v39, v41, v36, a5);
    uint64_t v13 = *a5;
    uint64_t v10 = v38;
    if ((int)v13 >= 1) {
      return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v76);
    }
LABEL_67:
    icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v76);
    BOOL result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v73, ++v9, (const char **)&v75, a4);
    if (!result) {
      return result;
    }
  }
  LOBYTE(v70[0]) = 0;
  uint64_t v25 = sub_18C92166C((unsigned int *)(v8 + 272), (unsigned __int8 *)v70, a5);
  if (v25)
  {
    uint64_t v10 = (uint64_t *)v25;
    uint64_t v28 = *(void *)(v8 + 184);
    uint64_t v29 = (icu::UnicodeString *)icu::UMemory::operator new(v27, (icu::UMemory *)0x40, v26);
    uint64_t v30 = (uint64_t)v29;
    if (v29) {
      icu::UnicodeString::UnicodeString(v29, (UChar **)a2);
    }
    uhash_put(v28, v30, (uint64_t)v10, a5);
    uint64_t v13 = *a5;
    if ((int)v13 > 0) {
      return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v76);
    }
    uhash_setValueDeleter(*v10, (uint64_t)uprv_deleteUObject);
    goto LABEL_27;
  }
  uint64_t v13 = 7;
  *a5 = 7;
  return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v76);
}

uint64_t sub_18C9215F8(uint64_t a1, const icu::UnicodeString *a2, int a3, uint64_t a4)
{
  icu::UnicodeString::unBogus(a1);
  if (*(__int16 *)(a1 + 8) < 0) {
    uint64_t v8 = *(unsigned int *)(a1 + 12);
  }
  else {
    uint64_t v8 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }

  return icu::UnicodeString::doReplace((icu::UnicodeString *)a1, 0, v8, a2, a3, a4);
}

int32x2_t *sub_18C92166C(unsigned int *a1, unsigned __int8 *a2, int *a3)
{
  int v6 = a1[4];
  uint64_t v7 = *a1;
  if (v7 != v6)
  {
LABEL_16:
    BOOL v12 = (int32x2_t *)icu::UMemory::operator new((uint64_t *)v7, (icu::UMemory *)0x58, (unint64_t)a2);
    uint64_t v10 = v12;
    if (v12)
    {
      int v13 = *a2;
      *BOOL v12 = 0;
      if (*a3 <= 0)
      {
        if (v13) {
          unsigned int v14 = uhash_compareCaselessUnicodeString;
        }
        else {
          unsigned int v14 = uhash_compareUnicodeString;
        }
        if (v13) {
          int v15 = uhash_hashCaselessUnicodeString;
        }
        else {
          int v15 = uhash_hashUnicodeString;
        }
        int v16 = v12 + 1;
        uhash_init(v12 + 1, (uint64_t)v15, (uint64_t)v14, 0, a3);
        if (*a3 <= 0)
        {
          int32x2_t *v10 = (int32x2_t)v16;
          uhash_setKeyDeleter((uint64_t)&v10[1], (uint64_t)uprv_deleteUObject);
        }
      }
    }
    uint64_t v17 = (int)*a1;
    *a1 = v17 + 1;
    *(void *)(*((void *)a1 + 1) + 8 * v17) = v10;
    return v10;
  }
  if (v6 == 8) {
    int v8 = 32;
  }
  else {
    int v8 = 2 * v6;
  }
  if (v8 < 1) {
    return 0;
  }
  int v9 = (int32x2_t *)uprv_malloc(8 * v8);
  uint64_t v10 = v9;
  if (v9)
  {
    if (v6 >= 1)
    {
      int v11 = a1[4];
      if (v11 >= v6) {
        int v11 = v6;
      }
      if (v11 >= v8) {
        int v11 = v8;
      }
      memcpy(v9, *((const void **)a1 + 1), 8 * v11);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free(*((void **)a1 + 1));
    }
    *((void *)a1 + 1) = v10;
    a1[4] = v8;
    uint64_t v7 = 1;
    *((unsigned char *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v10;
}

void sub_18C9217EC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)(a1 - 16);
    uint64_t v2 = *(void **)(a1 - 8);
    if (v2)
    {
      uint64_t v3 = (void)v2 << 6;
      uint64_t v4 = a1 - 64;
      do
      {
        icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(v4 + v3));
        v3 -= 64;
      }
      while (v3);
    }
    icu::UMemory::operator delete[](v1);
  }
}

uint64_t sub_18C921850(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(unsigned char ***)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*v4) {
          uhash_close(*v4);
        }
        icu::UMemory::operator delete(v4);
        int v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(unsigned char *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_18C9218CC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4BC30;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));

  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18C921920(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4BC30;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18C921978(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)"N3icu23SharedDateFormatSymbolsE" & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu23SharedDateFormatSymbolsE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18C9219D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  unint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((unsigned char *)v4 + 12) = 0;
    *uint64_t v4 = (uint64_t)&unk_1EDA4BC30;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18C921A3C(uint64_t a1, char *__dst, int a3)
{
  BOOL result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18C921A78(void *a1, void *a2)
{
  BOOL result = sub_18C8D893C(a1, a2);
  if (result)
  {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

void sub_18C921ACC(void **a1)
{
  sub_18C938BD8(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::FormattedDateInterval::FormattedDateInterval(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)BOOL result = &unk_1EDA4BCB0;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)BOOL result = &unk_1EDA4BCB0;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::FormattedDateInterval::~FormattedDateInterval(icu::FormattedDateInterval *this)
{
  *(void *)this = &unk_1EDA4BCB0;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;

  icu::FormattedValue::~FormattedValue(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::FormattedDateInterval::~FormattedDateInterval(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::FormattedDateInterval::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::FormattedDateInterval::toString(icu::FormattedDateInterval *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(void *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(void))(*(void *)v3 + 16))(*((void *)this + 1));
}

void icu::FormattedDateInterval::toTempString(icu::FormattedDateInterval *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(void *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(void))(*(void *)v3 + 24))(*((void *)this + 1));
}

icu::Appendable *icu::FormattedDateInterval::appendTo(icu::FormattedDateInterval *this, icu::Appendable *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return a2;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }
  return (icu::Appendable *)(*(uint64_t (**)(void, icu::Appendable *))(*(void *)v4 + 32))(*((void *)this + 1), a2);
}

uint64_t icu::FormattedDateInterval::nextPosition(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4)
  {
    *a3 = *(_DWORD *)(a1 + 16);
    return 0;
  }
  return (*(uint64_t (**)(void))(*(void *)v4 + 40))(*(void *)(a1 + 8));
}

void *icu::DateIntervalFormat::getStaticClassID(icu::DateIntervalFormat *this)
{
  return &unk_1E9192198;
}

void *icu::DateIntervalFormat::getDynamicClassID(icu::DateIntervalFormat *this)
{
  return &unk_1E9192198;
}

icu::DateIntervalFormat *icu::DateIntervalFormat::createInstance(icu::DateIntervalFormat *this, UErrorCode *a2, UErrorCode *a3)
{
  Default = icu::Locale::getDefault(this);

  return icu::DateIntervalFormat::createInstance((UErrorCode *)this, (const icu::UnicodeString *)Default, a2, v6);
}

icu::DateIntervalFormat *icu::DateIntervalFormat::createInstance@<X0>(UErrorCode *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  BOOL result = (icu::DateIntervalFormat *)icu::UMemory::operator new(a4, (icu::UMemory *)0x58, (unint64_t)a2);
  if (result)
  {
    int v9 = result;
    icu::DateIntervalInfo::DateIntervalInfo(result, a2, a3);
    return icu::DateIntervalFormat::create(a2, v9, this, a3, v10);
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

icu::DateIntervalFormat *icu::DateIntervalFormat::create@<X0>(icu::DateIntervalFormat *this@<X0>, const icu::Locale *a2@<X1>, UErrorCode *a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = (icu::DateIntervalFormat *)icu::UMemory::operator new(a5, (icu::UMemory *)0x770, (unint64_t)a2);
  if (v10)
  {
    BOOL result = icu::DateIntervalFormat::DateIntervalFormat(v10, this, a2, a3, a4);
    if (*(int *)a4 < 1) {
      return result;
    }
    (*(void (**)(icu::DateIntervalFormat *))(*(void *)result + 8))(result);
  }
  else
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    if (a2)
    {
      icu::DateIntervalInfo::~DateIntervalInfo(a2);
      icu::UMemory::operator delete(v12);
    }
  }
  return 0;
}

icu::DateIntervalFormat *icu::DateIntervalFormat::createInstance(icu::DateIntervalFormat *this, const icu::UnicodeString *a2, UErrorCode *a3, UErrorCode *a4)
{
  Default = icu::Locale::getDefault(this);
  uint64_t v10 = icu::DateIntervalInfo::clone(a2, v8, v9);

  return icu::DateIntervalFormat::create((icu::DateIntervalFormat *)Default, (const icu::Locale *)v10, (UErrorCode *)this, a3, v11);
}

icu::DateIntervalFormat *icu::DateIntervalFormat::createInstance@<X0>(UErrorCode *this@<X0>, const icu::UnicodeString *a2@<X1>, const icu::Locale *a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  int v9 = icu::DateIntervalInfo::clone(a3, (unint64_t)a2, a5);

  return icu::DateIntervalFormat::create(a2, (const icu::Locale *)v9, this, a4, v10);
}

icu::DateIntervalFormat *icu::DateIntervalFormat::DateIntervalFormat(icu::DateIntervalFormat *this)
{
  uint64_t v2 = icu::Format::Format((uint64_t)this);
  *(void *)uint64_t v2 = &unk_1EDA4BCF0;
  uint64_t v3 = (icu::Locale *)(v2 + 360);
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  uint64_t Root = icu::Locale::getRoot((icu::Locale *)v2);
  icu::Locale::Locale(v3, Root);
  uint64_t v5 = 0;
  *((void *)this + 73) = &unk_1EDA47700;
  *((_WORD *)this + 296) = 2;
  int v6 = (char *)this + 1872;
  do
  {
    uint64_t v7 = (char *)this + v5;
    *((void *)v7 + 81) = &unk_1EDA47700;
    *((_WORD *)v7 + 328) = 2;
    *((void *)v7 + 89) = &unk_1EDA47700;
    *((_WORD *)v7 + 360) = 2;
    v5 += 136;
  }
  while (v7 + 784 != v6);
  *(void *)int v6 = 0;
  *((void *)this + 235) = 0;
  *((_DWORD *)this + 474) = 0;
  *((void *)this + 236) = 0;
  *((_DWORD *)this + 475) = 256;
  return this;
}

uint64_t icu::DateIntervalFormat::DateIntervalFormat(icu::DateIntervalFormat *this, const icu::DateIntervalFormat *a2)
{
  uint64_t v4 = icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *(void *)uint64_t v4 = &unk_1EDA4BCF0;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  icu::Locale::Locale((icu::Locale *)(v4 + 360), (uint64_t)a2 + 360);
  uint64_t v5 = 0;
  *((void *)this + 73) = &unk_1EDA47700;
  *((_WORD *)this + 296) = 2;
  int v6 = (char *)this + 1872;
  do
  {
    uint64_t v7 = (char *)this + v5;
    *((void *)v7 + 81) = &unk_1EDA47700;
    *((_WORD *)v7 + 328) = 2;
    *((void *)v7 + 89) = &unk_1EDA47700;
    *((_WORD *)v7 + 360) = 2;
    v5 += 136;
  }
  while (v7 + 784 != v6);
  *(void *)int v6 = 0;
  *((void *)this + 235) = 0;
  *((_DWORD *)this + 474) = 0;
  *((void *)this + 236) = 0;
  *((_DWORD *)this + 475) = 256;

  return icu::DateIntervalFormat::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::DateIntervalFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 336);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *(icu::DateIntervalInfo **)(a1 + 328);
    if (v5)
    {
      icu::DateIntervalInfo::~DateIntervalInfo(v5);
      icu::UMemory::operator delete(v6);
    }
    uint64_t v7 = *(void *)(a1 + 344);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 352);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *(void *)(a1 + 1872);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = *(void *)(a1 + 1880);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *(void *)(a1 + 1888);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    umtx_lock((atomic_ullong *)&unk_1E91921A0);
    uint64_t v12 = *(void *)(a2 + 336);
    if (v12) {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
    }
    *(void *)(a1 + 336) = v12;
    uint64_t v13 = *(void *)(a2 + 344);
    if (v13) {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
    }
    *(void *)(a1 + 344) = v13;
    uint64_t v14 = *(void *)(a2 + 352);
    if (v14) {
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
    }
    *(void *)(a1 + 352) = v14;
    umtx_unlock((std::mutex **)&unk_1E91921A0);
    uint64_t v17 = *(uint64_t **)(a2 + 328);
    if (v17) {
      uint64_t v17 = icu::DateIntervalInfo::clone((icu::DateIntervalInfo *)v17, v15, v16);
    }
    *(void *)(a1 + 328) = v17;
    icu::UnicodeString::operator=((UChar **)(a1 + 584), (UChar **)(a2 + 584));
    for (uint64_t i = 0; i != 1224; i += 136)
    {
      icu::UnicodeString::operator=((UChar **)(a1 + i + 648), (UChar **)(a2 + i + 648));
      icu::UnicodeString::operator=((UChar **)(a1 + i + 712), (UChar **)(a2 + i + 712));
      *(unsigned char *)(a1 + i + 776) = *(unsigned char *)(a2 + i + 776);
    }
    icu::Locale::operator=((icu::Locale *)(a1 + 360), a2 + 360);
    uint64_t v19 = *(void *)(a2 + 1872);
    if (v19) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 56))(v19);
    }
    *(void *)(a1 + 1872) = v19;
    uint64_t v20 = *(void *)(a2 + 1880);
    if (v20) {
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 56))(v20);
    }
    *(void *)(a1 + 1880) = v20;
    uint64_t v21 = *(void *)(a2 + 1888);
    if (v21) {
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 56))(v21);
    }
    *(void *)(a1 + 1888) = v21;
    *(void *)(a1 + 1896) = *(void *)(a2 + 1896);
  }
  return a1;
}

void icu::DateIntervalFormat::~DateIntervalFormat(icu::DateIntervalFormat *this)
{
  *(void *)this = &unk_1EDA4BCF0;
  uint64_t v2 = (icu::DateIntervalInfo *)*((void *)this + 41);
  if (v2)
  {
    icu::DateIntervalInfo::~DateIntervalInfo(v2);
    icu::UMemory::operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 42);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 43);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 44);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 234);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 235);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 236);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = 1224;
  do
  {
    icu::UnicodeString::~UnicodeString((char *)this + v10, (icu::DateIntervalFormat *)((char *)this + v10 + 576));
    icu::UnicodeString::~UnicodeString(v11, (icu::DateIntervalFormat *)((char *)this + v10 + 512));
    v10 -= 136;
  }
  while (v10);
  icu::UnicodeString::~UnicodeString(v12, (icu::DateIntervalFormat *)((char *)this + 584));
  icu::Locale::~Locale((icu::DateIntervalFormat *)((char *)this + 360));

  icu::Format::~Format(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::DateIntervalFormat::~DateIntervalFormat(this);

  icu::UMemory::operator delete(v1);
}

icu::DateIntervalFormat *icu::DateIntervalFormat::clone@<X0>(icu::DateIntervalFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = (icu::DateIntervalFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x770, a2);
  if (result) {
    return (icu::DateIntervalFormat *)icu::DateIntervalFormat::DateIntervalFormat(result, this);
  }
  return result;
}

uint64_t icu::DateIntervalFormat::operator==(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (!result) {
    return result;
  }
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = icu::Format::operator==((void *)a1, (void *)a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 328);
  uint64_t v6 = *(void *)(a2 + 328);
  if (v5 == v6)
  {
    if (!v5) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t result = 0;
    if (!v5 || !v6) {
      return result;
    }
  }
  uint64_t result = icu::DateIntervalInfo::operator==(*(void *)(a1 + 328), v6);
  if (!result) {
    return result;
  }
LABEL_12:
  umtx_lock((atomic_ullong *)&unk_1E91921A0);
  uint64_t v7 = *(void *)(a1 + 336);
  uint64_t v8 = *(void *)(a2 + 336);
  if (v7 != v8)
  {
    if (!v7 || !v8) {
      goto LABEL_21;
    }
LABEL_17:
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 24))(v7))
    {
LABEL_21:
      umtx_unlock((std::mutex **)&unk_1E91921A0);
      return 0;
    }
    goto LABEL_18;
  }
  if (v7) {
    goto LABEL_17;
  }
LABEL_18:
  umtx_unlock((std::mutex **)&unk_1E91921A0);
  unsigned int v9 = *(unsigned __int16 *)(a1 + 592);
  if (v9)
  {
    if ((*(_WORD *)(a2 + 592) & 1) == 0) {
      return 0;
    }
LABEL_33:
    uint64_t v13 = *(void *)(a1 + 1872);
    uint64_t v14 = *(void *)(a2 + 1872);
    if (v13 == v14)
    {
      if (!v13) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t result = 0;
      if (!v13 || !v14) {
        return result;
      }
    }
    if (sub_18C8A1B58(*(void *)(a1 + 1872), v14)) {
      return 0;
    }
LABEL_39:
    uint64_t v15 = *(void *)(a1 + 1880);
    uint64_t v16 = *(void *)(a2 + 1880);
    if (v15 == v16)
    {
      if (!v15) {
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t result = 0;
      if (!v15 || !v16) {
        return result;
      }
    }
    if (sub_18C8A1B58(*(void *)(a1 + 1880), v16)) {
      return 0;
    }
LABEL_45:
    uint64_t v17 = *(void *)(a1 + 1888);
    uint64_t v18 = *(void *)(a2 + 1888);
    if (v17 == v18)
    {
      if (!v17)
      {
LABEL_51:
        uint64_t result = icu::Locale::operator==(a1 + 360, a2 + 360);
        if (!result) {
          return result;
        }
        uint64_t v19 = 0;
        while ((sub_18C8A1B58(a1 + v19 + 648, a2 + v19 + 648) & 1) == 0
             && (sub_18C8A1B58(a1 + v19 + 712, a2 + v19 + 712) & 1) == 0
             && *(unsigned __int8 *)(a1 + v19 + 776) == *(unsigned __int8 *)(a2 + v19 + 776))
        {
          v19 += 136;
          if (v19 == 1224)
          {
            if (*(_DWORD *)(a1 + 1896) != *(_DWORD *)(a2 + 1896)) {
              return 0;
            }
            return *(_DWORD *)(a1 + 1900) == *(_DWORD *)(a2 + 1900);
          }
        }
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if (!v17 || !v18) {
        return result;
      }
    }
    if (sub_18C8A1B58(*(void *)(a1 + 1888), v18)) {
      return 0;
    }
    goto LABEL_51;
  }
  if ((v9 & 0x8000) != 0) {
    int v10 = *(_DWORD *)(a1 + 596);
  }
  else {
    int v10 = v9 >> 5;
  }
  uint64_t result = 0;
  unsigned int v11 = *(unsigned __int16 *)(a2 + 592);
  if ((v11 & 0x8000u) == 0) {
    unsigned int v12 = v11 >> 5;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a2 + 596);
  }
  if ((v11 & 1) == 0 && v10 == v12)
  {
    uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 584), (const icu::UnicodeString *)(a2 + 584), v10);
    if (result) {
      goto LABEL_33;
    }
  }
  return result;
}

icu::UnicodeString *icu::DateIntervalFormat::format(icu::DateIntervalFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return a3;
  }
  if (icu::Formattable::getType(a2) != 6 {
    || (Object = (const void *)icu::Formattable::getObject(a2)) == 0
  }
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return a3;
  }

  return icu::DateIntervalFormat::format(this, v11, a3, a4, a5);
}

icu::UnicodeString *icu::DateIntervalFormat::format(icu::DateIntervalFormat *this, const icu::DateInterval *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (*((void *)this + 42) && *((void *)this + 41))
    {
      memset(v11, 0, sizeof(v11));
      sub_18C93A930((uint64_t)v11, (uint64_t)a4);
      sub_18C93A9EC((uint64_t)v11, 1);
      umtx_lock((atomic_ullong *)&unk_1E91921A0);
      a3 = icu::DateIntervalFormat::formatIntervalImpl(this, a2, a3, (BOOL *)&v10, (icu::FieldPositionHandler *)v11, a5);
      umtx_unlock((std::mutex **)&unk_1E91921A0);
      nullsub_32(v11);
    }
    else
    {
      *a5 = U_INVALID_STATE_ERROR;
    }
  }
  return a3;
}

icu::UnicodeString *icu::DateIntervalFormat::formatIntervalImpl(icu::DateIntervalFormat *this, const icu::DateInterval *a2, icu::UnicodeString *a3, BOOL *a4, icu::FieldPositionHandler *a5, UErrorCode *a6)
{
  if (*(int *)a6 > 0) {
    return a3;
  }
  uint64_t v9 = *((void *)this + 43);
  if (!v9 || !*((void *)this + 44))
  {
    *a6 = U_INVALID_STATE_ERROR;
    return a3;
  }
  icu::Calendar::setTimeInMillis(v9, *((double *)a2 + 1), a6);
  icu::Calendar::setTimeInMillis(*((void *)this + 44), *((double *)a2 + 2), a6);
  uint64_t v13 = (icu::Calendar *)*((void *)this + 43);
  uint64_t v14 = (icu::Calendar *)*((void *)this + 44);

  return icu::DateIntervalFormat::formatImpl(this, v13, v14, a3, a4, a5, a6);
}

uint64_t *icu::DateIntervalFormat::formatToValue@<X0>(uint64_t *this@<X0>, const icu::DateInterval *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v5 >= 1)
  {
    *(void *)a4 = &unk_1EDA4BCB0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = v5;
    return this;
  }
  uint64_t v8 = (icu::DateIntervalFormat *)this;
  this = icu::UMemory::operator new(v5, (icu::UMemory *)0x68, (unint64_t)a2);
  uint64_t v9 = this;
  if (!this)
  {
    UErrorCode v10 = *a3;
    if (*(int *)a3 <= 0)
    {
      UErrorCode v10 = U_MEMORY_ALLOCATION_ERROR;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
LABEL_12:
    *(void *)a4 = &unk_1EDA4BCB0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = v10;
    if (!v9) {
      return this;
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
  }
  this = (uint64_t *)sub_18C938B64((uint64_t)this, 5, a3);
  *uint64_t v9 = (uint64_t)&unk_1EDA4BDA8;
  UErrorCode v10 = *a3;
  if (*(int *)a3 >= 1) {
    goto LABEL_12;
  }
  long long v20 = 0u;
  uint64_t v23 = 0;
  long long v22 = 0u;
  long long v21 = 0u;
  uint64_t v19 = (UChar *)&unk_1EDA47700;
  LOWORD(v20) = 2;
  signed __int8 v17 = 0;
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  sub_18C938EDC(a3, (uint64_t)v9, (uint64_t)v15);
  HIDWORD(v16) = 1;
  umtx_lock((atomic_ullong *)&unk_1E91921A0);
  icu::DateIntervalFormat::formatIntervalImpl(v8, a2, (icu::UnicodeString *)&v19, (BOOL *)&v17, (icu::FieldPositionHandler *)v15, a3);
  umtx_unlock((std::mutex **)&unk_1E91921A0);
  if (*(int *)a3 <= 0 && (int)v16 >= 1) {
    *a3 = v16;
  }
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v18, &v19);
  sub_18C938EEC((uint64_t)v9, (uint64_t)v18, (int *)a3);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v18);
  UErrorCode v12 = *a3;
  if (*(int *)a3 > 0) {
    goto LABEL_9;
  }
  if (v17 != 255)
  {
    sub_18C938F54((uint64_t)v9, 4101, v17, a3);
    UErrorCode v12 = *a3;
    if (*(int *)a3 > 0)
    {
LABEL_9:
      uint64_t v13 = 0;
      goto LABEL_19;
    }
    sub_18C939350((uint64_t)v9);
  }
  UErrorCode v12 = U_ZERO_ERROR;
  uint64_t v13 = v9;
  uint64_t v9 = 0;
LABEL_19:
  *(void *)a4 = &unk_1EDA4BCB0;
  *(void *)(a4 + 8) = v13;
  *(_DWORD *)(a4 + 16) = v12;
  icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v15);
  this = (uint64_t *)icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  if (!v9) {
    return this;
  }
  return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
}

icu::UnicodeString *icu::DateIntervalFormat::format(icu::DateIntervalFormat *this, icu::Calendar *a2, icu::Calendar *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  memset(v14, 0, sizeof(v14));
  sub_18C93A930((uint64_t)v14, (uint64_t)a5);
  sub_18C93A9EC((uint64_t)v14, 1);
  umtx_lock((atomic_ullong *)&unk_1E91921A0);
  unsigned int v11 = icu::DateIntervalFormat::formatImpl(this, a2, a3, a4, (BOOL *)&v13, (icu::FieldPositionHandler *)v14, a6);
  umtx_unlock((std::mutex **)&unk_1E91921A0);
  nullsub_32(v14);
  return v11;
}

icu::UnicodeString *icu::DateIntervalFormat::formatImpl(icu::DateIntervalFormat *this, icu::Calendar *a2, icu::Calendar *a3, icu::UnicodeString *a4, BOOL *a5, icu::FieldPositionHandler *a6, UErrorCode *a7)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (*(int *)a7 <= 0)
  {
    signed __int8 v13 = a2;
    *a5 = -1;
    if (!(*(unsigned int (**)(icu::Calendar *, icu::Calendar *))(*(void *)a2 + 40))(a2, a3))
    {
      *a7 = U_ILLEGAL_ARGUMENT_ERROR;
      return a4;
    }
    int v15 = icu::Calendar::get(v13, 0, a7);
    unsigned int v16 = 0;
    if (v15 != icu::Calendar::get(a3, 0, a7))
    {
LABEL_81:
      if (*(int *)a7 > 0) {
        return a4;
      }
      int v59 = 0;
      (*(void (**)(void, void, int *))(**((void **)this + 42) + 200))(*((void *)this + 42), *((unsigned int *)this + 475), &v59);
      int v51 = 1;
      if (((1 << v16) & 0x7600) == 0)
      {
        if (v16 == 24) {
          return icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), v13, a4, a6, a7);
        }
        int v51 = 0;
      }
      int v52 = icu::DateIntervalInfo::calendarFieldToIntervalIndex(v16, (int *)a7);
      if (*((unsigned __int16 *)this + 68 * v52 + 328) > 0x1Fu)
      {
        unint64_t v53 = (char *)this + 136 * v52;
        unint64_t v54 = a6;
        int v55 = v53[776];
        if (v53[776]) {
          uint64_t v56 = a3;
        }
        else {
          uint64_t v56 = v13;
        }
        *a5 = v53[776] != 0;
        uint64_t v57 = v54;
        long long v61 = 0u;
        long long v62 = 0u;
        uint64_t v64 = 0;
        long long v63 = 0u;
        unint64_t v60 = &unk_1EDA47700;
        LOWORD(v61) = 2;
        (*(void (**)(void, void **))(**((void **)this + 42) + 240))(*((void *)this + 42), &v60);
        (*(void (**)(void))(**((void **)this + 42) + 256))();
        icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), v56, a4, v57, a7);
        if (*((unsigned __int16 *)v53 + 360) >= 0x20u)
        {
          if (!v55) {
            signed __int8 v13 = a3;
          }
          (*(void (**)(void, char *))(**((void **)this + 42) + 256))(*((void *)this + 42), (char *)this + 136 * v52 + 712);
          int v59 = 0;
          (*(void (**)(void, uint64_t, int *))(**((void **)this + 42) + 200))(*((void *)this + 42), 256, &v59);
          icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), v13, a4, v57, a7);
        }
        (*(void (**)(void, void **))(**((void **)this + 42) + 256))(*((void *)this + 42), &v60);
        goto LABEL_94;
      }
      if (*((unsigned __int16 *)this + 68 * v52 + 360) > 0x1Fu)
      {
        long long v61 = 0u;
        long long v62 = 0u;
        uint64_t v64 = 0;
        long long v63 = 0u;
        unint64_t v60 = &unk_1EDA47700;
        LOWORD(v61) = 2;
        (*(void (**)(void, void **))(**((void **)this + 42) + 240))(*((void *)this + 42), &v60);
        (*(void (**)(void))(**((void **)this + 42) + 256))();
        icu::DateIntervalFormat::fallbackFormat(this, v13, a3, v51, a4, (signed __int8 *)a5, a6, a7);
        icu::UnicodeString::operator=((UChar **)a4, (UChar **)a4);
        (*(void (**)(void))(**((void **)this + 42) + 256))();
LABEL_94:
        icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)&v60);
        return a4;
      }
      if (!icu::SimpleDateFormat::isFieldUnitIgnored(*((void *)this + 42), v16))
      {
        icu::DateIntervalFormat::fallbackFormat(this, v13, a3, v51, a4, (signed __int8 *)a5, a6, a7);
        return a4;
      }
      return icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), v13, a4, a6, a7);
    }
    int v17 = icu::Calendar::get(v13, 1u, a7);
    if (v17 != icu::Calendar::get(a3, 1u, a7))
    {
      if (*((_DWORD *)this + 474) != 1
        || (*((__int16 *)this + 296) < 0
          ? (int32_t v25 = *((_DWORD *)this + 149))
          : (int32_t v25 = *((unsigned __int16 *)this + 296) >> 5),
            (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x64u, 0, v25) & 0x80000000) != 0
         || (*((__int16 *)this + 296) < 0
           ? (int32_t v29 = *((_DWORD *)this + 149))
           : (int32_t v29 = *((unsigned __int16 *)this + 296) >> 5),
             (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x79u, 0, v29) & 0x80000000) == 0)))
      {
        unsigned int v16 = 1;
        goto LABEL_81;
      }
      double TimeInMillis = icu::Calendar::getTimeInMillis(v13, a7);
      double v31 = icu::Calendar::getTimeInMillis(a3, a7);
      int v32 = icu::Calendar::get(v13, 5u, a7);
      int v33 = icu::Calendar::get(a3, 5u, a7);
      unsigned int v16 = 1;
      (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)v13 + 56))(v13, 2, 1, a7);
      if (TimeInMillis < v31)
      {
        double v34 = icu::Calendar::getTimeInMillis(v13, a7);
        if (v32 <= v33 || v34 <= v31) {
          unsigned int v16 = 1;
        }
        else {
          unsigned int v16 = 5;
        }
      }
      goto LABEL_80;
    }
    int v18 = icu::Calendar::get(v13, 2u, a7);
    if (v18 == icu::Calendar::get(a3, 2u, a7))
    {
      int v19 = icu::Calendar::get(v13, 5u, a7);
      if (v19 == icu::Calendar::get(a3, 5u, a7))
      {
        unsigned int v16 = 9;
        int v20 = icu::Calendar::get(v13, 9u, a7);
        if (v20 == icu::Calendar::get(a3, 9u, a7))
        {
          unsigned int v16 = 10;
          int v21 = icu::Calendar::get(v13, 0xAu, a7);
          if (v21 == icu::Calendar::get(a3, 0xAu, a7))
          {
            unsigned int v16 = 12;
            int v22 = icu::Calendar::get(v13, 0xCu, a7);
            if (v22 == icu::Calendar::get(a3, 0xCu, a7))
            {
              unsigned int v16 = 13;
              int v23 = icu::Calendar::get(v13, 0xDu, a7);
              if (v23 == icu::Calendar::get(a3, 0xDu, a7))
              {
                int v24 = icu::Calendar::get(v13, 0xEu, a7);
                if (v24 == icu::Calendar::get(a3, 0xEu, a7)) {
                  unsigned int v16 = 24;
                }
                else {
                  unsigned int v16 = 14;
                }
              }
            }
          }
        }
        goto LABEL_81;
      }
      if (*((_DWORD *)this + 474) != 2
        || (*((__int16 *)this + 296) < 0
          ? (int32_t v28 = *((_DWORD *)this + 149))
          : (int32_t v28 = *((unsigned __int16 *)this + 296) >> 5),
            (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x48u, 0, v28) & 0x80000000) != 0
         && (*((__int16 *)this + 296) < 0
           ? (int32_t v44 = *((_DWORD *)this + 149))
           : (int32_t v44 = *((unsigned __int16 *)this + 296) >> 5),
             (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x68u, 0, v44) & 0x80000000) != 0
          && (*((__int16 *)this + 296) < 0
            ? (int32_t v46 = *((_DWORD *)this + 149))
            : (int32_t v46 = *((unsigned __int16 *)this + 296) >> 5),
              (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x6Au, 0, v46) & 0x80000000) != 0))))
      {
        unsigned int v16 = 5;
        goto LABEL_81;
      }
      double TimeInMillis = icu::Calendar::getTimeInMillis(v13, a7);
      double v47 = icu::Calendar::getTimeInMillis(a3, a7);
      int v48 = icu::Calendar::get(v13, 0xAu, a7);
      int v49 = icu::Calendar::get(a3, 0xAu, a7);
      (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)v13 + 56))(v13, 11, 12, a7);
      unsigned int v16 = 5;
    }
    else
    {
      int v26 = *((_DWORD *)this + 474);
      if (v26 == 1)
      {
        if (*((__int16 *)this + 296) < 0) {
          int32_t v27 = *((_DWORD *)this + 149);
        }
        else {
          int32_t v27 = *((unsigned __int16 *)this + 296) >> 5;
        }
        if ((icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x64u, 0, v27) & 0x80000000) == 0)
        {
          double TimeInMillis = icu::Calendar::getTimeInMillis(v13, a7);
          double v36 = icu::Calendar::getTimeInMillis(a3, a7);
          int v37 = icu::Calendar::get(v13, 5u, a7);
          int v38 = icu::Calendar::get(a3, 5u, a7);
          unsigned int v16 = 2;
          (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)v13 + 56))(v13, 2, 1, a7);
          if (TimeInMillis < v36)
          {
            double v39 = icu::Calendar::getTimeInMillis(v13, a7);
            BOOL v40 = v37 <= v38 || v39 <= v36;
            int v41 = 5;
LABEL_78:
            if (!v40) {
              unsigned int v16 = v41;
            }
          }
LABEL_80:
          icu::Calendar::setTimeInMillis((uint64_t)v13, TimeInMillis, a7);
          goto LABEL_81;
        }
        int v26 = *((_DWORD *)this + 474);
      }
      if (v26 != 2
        || (*((__int16 *)this + 296) < 0
          ? (int32_t v42 = *((_DWORD *)this + 149))
          : (int32_t v42 = *((unsigned __int16 *)this + 296) >> 5),
            (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x48u, 0, v42) & 0x80000000) != 0
         && (*((__int16 *)this + 296) < 0
           ? (int32_t v43 = *((_DWORD *)this + 149))
           : (int32_t v43 = *((unsigned __int16 *)this + 296) >> 5),
             (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x68u, 0, v43) & 0x80000000) != 0
          && (*((__int16 *)this + 296) < 0
            ? (int32_t v45 = *((_DWORD *)this + 149))
            : (int32_t v45 = *((unsigned __int16 *)this + 296) >> 5),
              (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x6Au, 0, v45) & 0x80000000) != 0))))
      {
        unsigned int v16 = 2;
        goto LABEL_81;
      }
      double TimeInMillis = icu::Calendar::getTimeInMillis(v13, a7);
      double v47 = icu::Calendar::getTimeInMillis(a3, a7);
      int v48 = icu::Calendar::get(v13, 0xAu, a7);
      int v49 = icu::Calendar::get(a3, 0xAu, a7);
      (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)v13 + 56))(v13, 11, 12, a7);
      unsigned int v16 = 2;
    }
    if (TimeInMillis < v47)
    {
      double v50 = icu::Calendar::getTimeInMillis(v13, a7);
      BOOL v40 = v48 <= v49 || v50 <= v47;
      int v41 = 9;
      goto LABEL_78;
    }
    goto LABEL_80;
  }
  return a4;
}

uint64_t *icu::DateIntervalFormat::formatToValue@<X0>(uint64_t *this@<X0>, icu::Calendar *a2@<X1>, icu::Calendar *a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 >= 1)
  {
    *(void *)a5 = &unk_1EDA4BCB0;
    *(void *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = v6;
    return this;
  }
  UErrorCode v10 = (icu::DateIntervalFormat *)this;
  this = icu::UMemory::operator new(v6, (icu::UMemory *)0x68, (unint64_t)a2);
  unsigned int v11 = this;
  if (!this)
  {
    UErrorCode v12 = *a4;
    if (*(int *)a4 <= 0)
    {
      UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
LABEL_12:
    *(void *)a5 = &unk_1EDA4BCB0;
    *(void *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = v12;
    if (!v11) {
      return this;
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v11 + 8))(v11);
  }
  this = (uint64_t *)sub_18C938B64((uint64_t)this, 5, a4);
  *unsigned int v11 = (uint64_t)&unk_1EDA4BDA8;
  UErrorCode v12 = *a4;
  if (*(int *)a4 >= 1) {
    goto LABEL_12;
  }
  long long v22 = 0u;
  uint64_t v25 = 0;
  long long v24 = 0u;
  long long v23 = 0u;
  int v21 = (UChar *)&unk_1EDA47700;
  LOWORD(v22) = 2;
  signed __int8 v19 = 0;
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  sub_18C938EDC(a4, (uint64_t)v11, (uint64_t)v17);
  HIDWORD(v18) = 1;
  umtx_lock((atomic_ullong *)&unk_1E91921A0);
  icu::DateIntervalFormat::formatImpl(v10, a2, a3, (icu::UnicodeString *)&v21, (BOOL *)&v19, (icu::FieldPositionHandler *)v17, a4);
  umtx_unlock((std::mutex **)&unk_1E91921A0);
  if (*(int *)a4 <= 0 && (int)v18 >= 1) {
    *a4 = v18;
  }
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v20, &v21);
  sub_18C938EEC((uint64_t)v11, (uint64_t)v20, (int *)a4);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v20);
  UErrorCode v14 = *a4;
  if (*(int *)a4 <= 0)
  {
    if (v19 != 255)
    {
      sub_18C938F54((uint64_t)v11, 4101, v19, a4);
      sub_18C939350((uint64_t)v11);
    }
    UErrorCode v14 = U_ZERO_ERROR;
    int v15 = v11;
    unsigned int v11 = 0;
  }
  else
  {
    int v15 = 0;
  }
  *(void *)a5 = &unk_1EDA4BCB0;
  *(void *)(a5 + 8) = v15;
  *(_DWORD *)(a5 + 16) = v14;
  icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v17);
  this = (uint64_t *)icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v21);
  if (v11) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v11 + 8))(v11);
  }
  return this;
}

icu::UnicodeString *icu::DateIntervalFormat::fallbackFormat(icu::DateIntervalFormat *this, icu::Calendar *a2, icu::Calendar *a3, int a4, icu::UnicodeString *a5, signed __int8 *a6, icu::FieldPositionHandler *a7, UErrorCode *a8)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*(int *)a8 <= 0)
  {
    if (a4 && *((void *)this + 234) && *((void *)this + 235))
    {
      long long v41 = 0u;
      long long v42 = 0u;
      uint64_t v45 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      int v15 = (const icu::UnicodeString *)*((void *)this + 236);
      *((void *)&v41 + 1) = &unk_1EDA47700;
      LOWORD(v42) = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v41, v15, 2, 2, 1, a8);
      if (*(int *)a8 <= 0)
      {
        uint64_t __b = 0;
        memset(v39, 0, 64);
        sub_18C927470(&__b, (uint64_t)&v41, 2, (uint64_t)v39);
        long long v35 = 0u;
        uint64_t v38 = 0;
        long long v37 = 0u;
        long long v36 = 0u;
        double v34 = &unk_1EDA47700;
        LOWORD(v35) = 2;
        (*(void (**)(void, void **))(**((void **)this + 42) + 240))(*((void *)this + 42), &v34);
        int v30 = 0;
        if ((int)__b >= SHIDWORD(__b))
        {
          icu::UnicodeString::tempSubString((icu::UnicodeString *)v39, 0, SHIDWORD(__b), (icu::UnicodeString *)v31);
          if ((v32 & 0x8000u) == 0) {
            uint64_t v21 = v32 >> 5;
          }
          else {
            uint64_t v21 = v33;
          }
          icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)v31, 0, v21);
          icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v31);
          (*(void (**)(void))(**((void **)this + 42) + 256))();
          icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a2, a5, a7, a8);
          icu::UnicodeString::tempSubString((icu::UnicodeString *)v39, SHIDWORD(__b), __b - HIDWORD(__b), (icu::UnicodeString *)v31);
          if ((v32 & 0x8000u) == 0) {
            uint64_t v23 = v32 >> 5;
          }
          else {
            uint64_t v23 = v33;
          }
          icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)v31, 0, v23);
          icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v31);
          (*(void (**)(void))(**((void **)this + 42) + 256))();
          (*(void (**)(void, uint64_t, int *))(**((void **)this + 42) + 200))(*((void *)this + 42), 256, &v30);
          icu::DateIntervalFormat::fallbackFormatRange(this, a2, a3, a5, a6, a7, a8);
          int v20 = __b;
        }
        else
        {
          icu::UnicodeString::tempSubString((icu::UnicodeString *)v39, 0, __b, (icu::UnicodeString *)v31);
          if ((v32 & 0x8000u) == 0) {
            uint64_t v16 = v32 >> 5;
          }
          else {
            uint64_t v16 = v33;
          }
          icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)v31, 0, v16);
          icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v31);
          (*(void (**)(void))(**((void **)this + 42) + 256))();
          icu::DateIntervalFormat::fallbackFormatRange(this, a2, a3, a5, a6, a7, a8);
          icu::UnicodeString::tempSubString((icu::UnicodeString *)v39, __b, HIDWORD(__b) - __b, (icu::UnicodeString *)v31);
          if ((v32 & 0x8000u) == 0) {
            uint64_t v18 = v32 >> 5;
          }
          else {
            uint64_t v18 = v33;
          }
          icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)v31, 0, v18);
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v31);
          (*(void (**)(void))(**((void **)this + 42) + 256))();
          (*(void (**)(void, uint64_t, int *))(**((void **)this + 42) + 200))(*((void *)this + 42), 256, &v30);
          icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a2, a5, a7, a8);
          int v20 = HIDWORD(__b);
        }
        icu::UnicodeString::tempSubString((icu::UnicodeString *)v39, v20, v20 ^ 0x7FFFFFFF, (icu::UnicodeString *)v31);
        if ((v32 & 0x8000u) == 0) {
          uint64_t v25 = v32 >> 5;
        }
        else {
          uint64_t v25 = v33;
        }
        icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)v31, 0, v25);
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v31);
        (*(void (**)(void, void **))(**((void **)this + 42) + 256))(*((void *)this + 42), &v34);
        icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v34);
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v39);
      }
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v41);
    }
    else
    {
      icu::DateIntervalFormat::fallbackFormatRange(this, a2, a3, a5, a6, a7, a8);
    }
  }
  return a5;
}

uint64_t icu::DateIntervalFormat::getDateIntervalInfo(icu::DateIntervalFormat *this)
{
  return *((void *)this + 41);
}

icu::SimpleDateFormat **icu::DateIntervalFormat::setDateIntervalInfo@<X0>(icu::DateIntervalFormat *this@<X0>, const icu::DateIntervalInfo *a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = (icu::DateIntervalInfo *)*((void *)this + 41);
  if (v7)
  {
    icu::DateIntervalInfo::~DateIntervalInfo(v7);
    icu::UMemory::operator delete(v8);
  }
  uint64_t v9 = icu::UMemory::operator new(a4, (icu::UMemory *)0x58, (unint64_t)a2);
  if (v9) {
    uint64_t v9 = (uint64_t *)icu::DateIntervalInfo::DateIntervalInfo((uint64_t)v9, (uint64_t)a2);
  }
  else {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  *((void *)this + 41) = v9;
  uint64_t v10 = *((void *)this + 234);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *((void *)this + 234) = 0;
  uint64_t v11 = *((void *)this + 235);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  *((void *)this + 235) = 0;
  uint64_t result = (icu::SimpleDateFormat **)*((void *)this + 236);
  if (result) {
    uint64_t result = (icu::SimpleDateFormat **)(*((uint64_t (**)(icu::SimpleDateFormat **))*result + 1))(result);
  }
  *((void *)this + 236) = 0;
  if (*((void *)this + 42))
  {
    return icu::DateIntervalFormat::initializePattern((icu::SimpleDateFormat **)this, a3);
  }
  return result;
}

icu::SimpleDateFormat **icu::DateIntervalFormat::initializePattern(icu::SimpleDateFormat **this, UErrorCode *a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 <= 0)
  {
    uint64_t v3 = (uint64_t)this;
    SmpFmtLocale = (icu::Locale *)icu::SimpleDateFormat::getSmpFmtLocale(this[42]);
    if (*(unsigned __int16 *)(v3 + 592) > 0x1Fu) {
      goto LABEL_4;
    }
    long long v58 = 0u;
    uint64_t v61 = 0;
    long long v60 = 0u;
    long long v59 = 0u;
    uint64_t v57 = &unk_1EDA47700;
    LOWORD(v58) = 2;
    (*(void (**)(void, void **))(**(void **)(v3 + 336) + 240))(*(void *)(v3 + 336), &v57);
    icu::DateTimePatternGenerator::staticGetSkeleton((icu::DateTimePatternGenerator *)&v57, (uint64_t)&v52);
    icu::UnicodeString::operator=((icu::UnicodeString *)(v3 + 584), (icu::UnicodeString *)&v52);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v52);
    int v6 = *a2;
    this = (icu::SimpleDateFormat **)icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v57);
    if (v6 <= 0)
    {
LABEL_4:
      for (uint64_t i = 776; i != 2000; i += 136)
        *(unsigned char *)(v3 + i) = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
      long long v58 = 0u;
      uint64_t v61 = 0;
      long long v60 = 0u;
      long long v59 = 0u;
      uint64_t v56 = 0;
      uint64_t v57 = &unk_1EDA47700;
      LOWORD(v58) = 2;
      long long v53 = 0u;
      long long v55 = 0u;
      long long v54 = 0u;
      int v52 = &unk_1EDA47700;
      LOWORD(v53) = 2;
      long long v48 = 0u;
      uint64_t v51 = 0;
      long long v50 = 0u;
      long long v49 = 0u;
      uint64_t v46 = 0;
      double v47 = &unk_1EDA47700;
      LOWORD(v48) = 2;
      long long v43 = 0u;
      long long v45 = 0u;
      long long v44 = 0u;
      long long v42 = &unk_1EDA47700;
      LOWORD(v43) = 2;
      memset(v41, 0, sizeof(v41));
      icu::DateIntervalFormat::normalizeHourMetacharacters((icu::DateIntervalFormat *)v3, (UChar **)(v3 + 584), (uint64_t)v41);
      icu::DateIntervalFormat::getDateTimeSkeleton((uint64_t)v41, (const icu::UnicodeString *)&v57, (icu::UnicodeString *)&v42, (icu::UnicodeString *)&v52, (icu::UnicodeString *)&v47, v9);
      int v10 = (unsigned __int16)v53 >> 5;
      if ((v53 & 0x8000u) != 0) {
        int v10 = DWORD1(v53);
      }
      if (v10 >= 1)
      {
        int v11 = (unsigned __int16)v58 >> 5;
        if ((v58 & 0x8000u) != 0) {
          int v11 = DWORD1(v58);
        }
        if (v11 >= 1)
        {
          BaseName = (char *)icu::Locale::getBaseName(SmpFmtLocale);
          uint64_t v13 = ures_open(0, BaseName, (int *)a2);
          ures_getByKey(v13, "calendar", v13, (int *)a2);
          ures_getByKeyWithFallback(v13, "gregorian", v13, a2);
          ures_getByKeyWithFallback(v13, "DateTimePatterns", v13, a2);
          LODWORD(v37) = 0;
          StringByIndex = ures_getStringByIndex(v13, 8, (int *)&v37, a2);
          if (*(int *)a2 <= 0 && (int)v37 >= 3)
          {
            uint64_t v16 = (uint64_t)StringByIndex;
            int v17 = icu::UMemory::operator new((uint64_t *)v37, (icu::UMemory *)0x40, v15);
            if (!v17)
            {
              *(void *)(v3 + 1888) = 0;
              uint64_t v19 = 7;
              *a2 = U_MEMORY_ALLOCATION_ERROR;
              if (v13) {
                ures_close(v13);
              }
              goto LABEL_57;
            }
            *(void *)(v3 + 1888) = icu::UnicodeString::UnicodeString((uint64_t)v17, v16, v37);
          }
          if (v13) {
            ures_close(v13);
          }
        }
      }
      int v18 = icu::DateIntervalFormat::setSeparateDateTimePtn((uint64_t ****)v3, (UErrorCode *)&v42, (const icu::UnicodeString *)&v47);
      LODWORD(v19) = (unsigned __int16)v53 >> 5;
      if ((v53 & 0x8000u) == 0) {
        uint64_t v19 = v19;
      }
      else {
        uint64_t v19 = DWORD1(v53);
      }
      if (v18)
      {
        if (!v19)
        {
LABEL_57:
          icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)v41);
          icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v42);
          icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v47);
          icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v52);
          return (icu::SimpleDateFormat **)icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v57);
        }
        int v20 = (unsigned __int16)v58 >> 5;
        if ((v58 & 0x8000u) != 0) {
          int v20 = DWORD1(v58);
        }
        if (v20)
        {
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v37, (UChar **)(v3 + 584));
          if ((v58 & 0x8000u) == 0) {
            int32_t v21 = (unsigned __int16)v58 >> 5;
          }
          else {
            int32_t v21 = DWORD1(v58);
          }
          if (icu::UnicodeString::doIndexOf((uint64_t)&v57, 0x64u, 0, v21) == -1)
          {
            LOWORD(v36[0]) = 100;
            icu::UnicodeString::doReplace((uint64_t)&v37, 0, 0, (uint64_t)v36, 0, 1);
            icu::DateIntervalFormat::setFallbackPattern((char *)v3, 5u, (UErrorCode *)&v37, a2);
          }
          if ((v58 & 0x8000u) == 0) {
            int32_t v22 = (unsigned __int16)v58 >> 5;
          }
          else {
            int32_t v22 = DWORD1(v58);
          }
          if (icu::UnicodeString::doIndexOf((uint64_t)&v57, 0x4Du, 0, v22) == -1)
          {
            LOWORD(v36[0]) = 77;
            icu::UnicodeString::doReplace((uint64_t)&v37, 0, 0, (uint64_t)v36, 0, 1);
            icu::DateIntervalFormat::setFallbackPattern((char *)v3, 2u, (UErrorCode *)&v37, a2);
          }
          if ((v58 & 0x8000u) == 0) {
            int32_t v23 = (unsigned __int16)v58 >> 5;
          }
          else {
            int32_t v23 = DWORD1(v58);
          }
          if (icu::UnicodeString::doIndexOf((uint64_t)&v57, 0x79u, 0, v23) == -1)
          {
            LOWORD(v36[0]) = 121;
            icu::UnicodeString::doReplace((uint64_t)&v37, 0, 0, (uint64_t)v36, 0, 1);
            icu::DateIntervalFormat::setFallbackPattern((char *)v3, 1u, (UErrorCode *)&v37, a2);
          }
          if ((v58 & 0x8000u) == 0) {
            int32_t v24 = (unsigned __int16)v58 >> 5;
          }
          else {
            int32_t v24 = DWORD1(v58);
          }
          if (icu::UnicodeString::doIndexOf((uint64_t)&v57, 0x47u, 0, v24) == -1)
          {
            LOWORD(v36[0]) = 71;
            icu::UnicodeString::doReplace((uint64_t)&v37, 0, 0, (uint64_t)v36, 0, 1);
            icu::DateIntervalFormat::setFallbackPattern((char *)v3, 0, (UErrorCode *)&v37, a2);
          }
          uint64_t v25 = *(void **)(v3 + 1888);
          if (v25)
          {
            memset(v36, 0, sizeof(v36));
            icu::DateFormat::getBestPattern(SmpFmtLocale, (UErrorCode *)&v57, a2, (uint64_t)v36);
            icu::DateIntervalFormat::concatSingleDate2TimeInterval(v3, *(const icu::UnicodeString **)(v3 + 1888), (const icu::UnicodeString *)v36, 9u, (int *)a2);
            icu::DateIntervalFormat::concatSingleDate2TimeInterval(v3, *(const icu::UnicodeString **)(v3 + 1888), (const icu::UnicodeString *)v36, 0xAu, (int *)a2);
            icu::DateIntervalFormat::concatSingleDate2TimeInterval(v3, *(const icu::UnicodeString **)(v3 + 1888), (const icu::UnicodeString *)v36, 0xCu, (int *)a2);
            icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v36);
          }
LABEL_56:
          icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v37);
          goto LABEL_57;
        }
      }
      else
      {
        if (!v19) {
          goto LABEL_57;
        }
        LODWORD(v19) = (unsigned __int16)v58 >> 5;
        uint64_t v19 = (v58 & 0x8000u) == 0 ? v19 : DWORD1(v58);
        if (v19) {
          goto LABEL_57;
        }
      }
      icu::UnicodeString::doReplace((uint64_t)&v52, 0, 0, (uint64_t)&unk_18CA9273A, 0, 0xFFFFFFFFLL);
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      icu::DateFormat::getBestPattern(SmpFmtLocale, (UErrorCode *)&v52, a2, (uint64_t)&v37);
      uint64_t v25 = (void *)*(unsigned int *)a2;
      if ((int)v25 <= 0)
      {
        char DefaultOrder = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
        icu::DateIntervalFormat::setPatternInfo(v3, 5u, 0, (UChar **)&v37, DefaultOrder);
        char v28 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
        icu::DateIntervalFormat::setPatternInfo(v3, 2u, 0, (UChar **)&v37, v28);
        char v29 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
        icu::DateIntervalFormat::setPatternInfo(v3, 1u, 0, (UChar **)&v37, v29);
        LOWORD(v36[0]) = 71;
        icu::UnicodeString::doReplace((uint64_t)&v52, 0, 0, (uint64_t)v36, 0, 1);
        icu::DateFormat::getBestPattern(SmpFmtLocale, (UErrorCode *)&v52, a2, (uint64_t)v36);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v37, (icu::UnicodeString *)v36);
        icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v36);
        uint64_t v25 = (void *)*(unsigned int *)a2;
        if ((int)v25 <= 0)
        {
          char v31 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
          icu::DateIntervalFormat::setPatternInfo(v3, 0, 0, (UChar **)&v37, v31);
        }
      }
      goto LABEL_56;
    }
  }
  return this;
}

uint64_t icu::DateIntervalFormat::getDateFormat(icu::DateIntervalFormat *this)
{
  return *((void *)this + 42);
}

uint64_t icu::DateIntervalFormat::adoptTimeZone(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[42];
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 184))(v4, a2);
  }
  uint64_t v5 = a1[43];
  if (v5) {
    icu::Calendar::setTimeZone(v5, a2);
  }
  uint64_t result = a1[44];
  if (result)
  {
    return icu::Calendar::setTimeZone(result, a2);
  }
  return result;
}

uint64_t icu::DateIntervalFormat::setTimeZone(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[42];
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 192))(v4, a2);
  }
  uint64_t v5 = a1[43];
  if (v5) {
    icu::Calendar::setTimeZone(v5, a2);
  }
  uint64_t result = a1[44];
  if (result)
  {
    return icu::Calendar::setTimeZone(result, a2);
  }
  return result;
}

uint64_t icu::DateIntervalFormat::getTimeZone(icu::DateIntervalFormat *this)
{
  if (*((void *)this + 42))
  {
    umtx_lock((atomic_ullong *)&unk_1E91921A0);
    uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 42) + 176))(*((void *)this + 42));
    umtx_unlock((std::mutex **)&unk_1E91921A0);
    return v2;
  }
  else
  {
    return icu::TimeZone::createDefault(this);
  }
}

uint64_t icu::DateIntervalFormat::setAttribute(uint64_t result, int a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2) {
      *a4 = 1;
    }
    else {
      *(_DWORD *)(result + 1896) = a3;
    }
  }
  return result;
}

uint64_t icu::DateIntervalFormat::setContext(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if ((a2 & 0xFFFFFF00) == 0x100) {
      *(_DWORD *)(result + 1900) = a2;
    }
    else {
      *a3 = 1;
    }
  }
  return result;
}

uint64_t icu::DateIntervalFormat::getContext(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  if (a2 == 1) {
    return *(unsigned int *)(a1 + 1900);
  }
  uint64_t result = 0;
  *a3 = 1;
  return result;
}

icu::DateIntervalFormat *icu::DateIntervalFormat::DateIntervalFormat(icu::DateIntervalFormat *this, const icu::Locale *a2, icu::DateIntervalInfo *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t v10 = icu::Format::Format((uint64_t)this);
  *(void *)uint64_t v10 = &unk_1EDA4BCF0;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_OWORD *)(v10 + 344) = 0u;
  icu::Locale::Locale((icu::Locale *)(v10 + 360), (uint64_t)a2);
  uint64_t v12 = 0;
  *((void *)this + 73) = &unk_1EDA47700;
  *((_WORD *)this + 296) = 2;
  uint64_t v13 = (char *)this + 1872;
  do
  {
    UErrorCode v14 = (char *)this + v12;
    *((void *)v14 + 81) = &unk_1EDA47700;
    *((_WORD *)v14 + 328) = 2;
    *((void *)v14 + 89) = &unk_1EDA47700;
    *((_WORD *)v14 + 360) = 2;
    v12 += 136;
  }
  while (v14 + 784 != v13);
  *(void *)uint64_t v13 = 0;
  *((void *)this + 235) = 0;
  *((_DWORD *)this + 474) = 0;
  *((void *)this + 236) = 0;
  *((_DWORD *)this + 475) = 256;
  if (!a3 && *(int *)a5 <= 0) {
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  }
  InstanceForSkeleton = icu::DateFormat::createInstanceForSkeleton(a4, a2, a5, v11);
  uint64_t v16 = InstanceForSkeleton;
  UErrorCode v17 = *a5;
  if (!InstanceForSkeleton && v17 <= U_ZERO_ERROR)
  {
    *a5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_12:
    if (a3)
    {
      icu::DateIntervalInfo::~DateIntervalInfo(a3);
      icu::UMemory::operator delete(v18);
    }
    return this;
  }
  if (v17 > U_ZERO_ERROR)
  {
    if (InstanceForSkeleton) {
      (*(void (**)(icu::SimpleDateFormat *))(*(void *)InstanceForSkeleton + 8))(InstanceForSkeleton);
    }
    goto LABEL_12;
  }
  icu::UnicodeString::operator=((UChar **)this + 73, (UChar **)a4);
  *((void *)this + 41) = a3;
  *((void *)this + 42) = v16;
  if ((*(uint64_t (**)(icu::SimpleDateFormat *))(*(void *)v16 + 128))(v16))
  {
    uint64_t v19 = (*(uint64_t (**)(void))(**((void **)this + 42) + 128))(*((void *)this + 42));
    *((void *)this + 43) = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
    uint64_t v20 = (*(uint64_t (**)(void))(**((void **)this + 42) + 128))(*((void *)this + 42));
    *((void *)this + 44) = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
  }
  icu::DateIntervalFormat::initializePattern((icu::SimpleDateFormat **)this, a5);
  return this;
}

void *icu::DateIntervalFormat::normalizeHourMetacharacters@<X0>(icu::DateIntervalFormat *this@<X0>, UChar **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)a3, a2);
  unint64_t v5 = 0;
  __int16 v6 = 0;
  __int16 v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = *(unsigned __int16 *)(a3 + 8);
  uint64_t v13 = a3 + 10;
  if ((v12 & 2) == 0) {
    uint64_t v13 = *(void *)(a3 + 24);
  }
  if ((v12 & 0x8000) != 0) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t result = (void *)(v12 >> 5);
  if (v5 < v12 >> 5)
  {
    do
    {
      if ((unint64_t)result <= v5) {
        goto LABEL_20;
      }
      int v15 = *(unsigned __int16 *)(v13 + 2 * v5);
      char v16 = v15 - 66;
      if ((v15 - 66) > 0x29) {
        goto LABEL_20;
      }
      if (((1 << v16) & 0x34000000342) != 0)
      {
        if (v6)
        {
          uint64_t v8 = v8;
        }
        else
        {
          __int16 v6 = *(_WORD *)(v13 + 2 * v5);
          uint64_t v8 = v5;
        }
        uint64_t v9 = (v9 + 1);
        goto LABEL_21;
      }
      if (((1 << v16) & 0x180000001) != 0)
      {
        if (v7)
        {
          uint64_t v10 = v10;
        }
        else
        {
          __int16 v7 = *(_WORD *)(v13 + 2 * v5);
          uint64_t v10 = v5;
        }
        uint64_t v11 = (v11 + 1);
      }
      else
      {
LABEL_20:
        if (v6 && v7) {
          goto LABEL_24;
        }
      }
LABEL_21:
      ++v5;
      if ((v12 & 0x8000) == 0) {
        goto LABEL_4;
      }
LABEL_6:
      uint64_t result = (void *)*(unsigned int *)(a3 + 12);
    }
    while ((uint64_t)v5 < *(int *)(a3 + 12));
  }
  if (v6)
  {
LABEL_24:
    UErrorCode v43 = U_ZERO_ERROR;
    memset(v49, 0, sizeof(v49));
    icu::UnicodeString::UnicodeString((uint64_t)&v45, v6);
    icu::DateFormat::getBestPattern((icu::DateIntervalFormat *)((char *)this + 360), (UErrorCode *)&v45, &v43, (uint64_t)v49);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v45);
    if (v43 <= U_ZERO_ERROR)
    {
      if ((SWORD4(v49[0]) & 0x8000u) == 0) {
        int32_t v22 = WORD4(v49[0]) >> 5;
      }
      else {
        int32_t v22 = HIDWORD(v49[0]);
      }
      uint64_t v23 = icu::UnicodeString::doIndexOf((uint64_t)v49, 0x27u, 0, v22);
      if (v23 != -1)
      {
        uint64_t v24 = v23;
        do
        {
          if ((int)v24 >= -1)
          {
            int v27 = v24 + 1;
            if ((WORD4(v49[0]) & 0x8000) != 0)
            {
              unsigned int v26 = HIDWORD(v49[0]);
              if (SHIDWORD(v49[0]) >= v27) {
                int v25 = v24 + 1;
              }
              else {
                int v25 = HIDWORD(v49[0]);
              }
            }
            else
            {
              unsigned int v26 = WORD4(v49[0]) >> 5;
              if (v26 >= v27) {
                int v25 = v24 + 1;
              }
              else {
                int v25 = WORD4(v49[0]) >> 5;
              }
            }
          }
          else
          {
            int v25 = 0;
            if ((WORD4(v49[0]) & 0x8000) != 0) {
              unsigned int v26 = HIDWORD(v49[0]);
            }
            else {
              unsigned int v26 = WORD4(v49[0]) >> 5;
            }
          }
          int v28 = icu::UnicodeString::doIndexOf((uint64_t)v49, 0x27u, v25, v26 - v25);
          if (v28 == -1) {
            uint64_t v29 = 1;
          }
          else {
            uint64_t v29 = (v28 - v24 + 1);
          }
          *(void *)&long long v45 = &unk_1EDA47700;
          WORD4(v45) = 2;
          icu::UnicodeString::doReplace((icu::UnicodeString *)v49, v24, v29, (const icu::UnicodeString *)&v45, 0, 0);
          icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v45);
          if ((SWORD4(v49[0]) & 0x8000u) == 0) {
            int32_t v31 = WORD4(v49[0]) >> 5;
          }
          else {
            int32_t v31 = HIDWORD(v49[0]);
          }
          uint64_t v24 = icu::UnicodeString::doIndexOf((uint64_t)v49, 0x27u, 0, v31);
        }
        while (v24 != -1);
      }
      if ((SWORD4(v49[0]) & 0x8000u) == 0) {
        int32_t v32 = WORD4(v49[0]) >> 5;
      }
      else {
        int32_t v32 = HIDWORD(v49[0]);
      }
      int v33 = 104;
      if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x68u, 0, v32) == -1)
      {
        int32_t v34 = (SWORD4(v49[0]) & 0x8000u) == 0 ? WORD4(v49[0]) >> 5 : HIDWORD(v49[0]);
        int v33 = 75;
        if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x4Bu, 0, v34) == -1)
        {
          if ((SWORD4(v49[0]) & 0x8000u) == 0) {
            int32_t v35 = WORD4(v49[0]) >> 5;
          }
          else {
            int32_t v35 = HIDWORD(v49[0]);
          }
          if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x6Bu, 0, v35) == -1) {
            int v33 = 72;
          }
          else {
            int v33 = 107;
          }
        }
      }
      if ((SWORD4(v49[0]) & 0x8000u) == 0) {
        int32_t v36 = WORD4(v49[0]) >> 5;
      }
      else {
        int32_t v36 = HIDWORD(v49[0]);
      }
      __int16 v37 = 98;
      if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x62u, 0, v36) == -1)
      {
        int32_t v38 = (SWORD4(v49[0]) & 0x8000u) == 0 ? WORD4(v49[0]) >> 5 : HIDWORD(v49[0]);
        __int16 v37 = 66;
        if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x42u, 0, v38) == -1)
        {
          if (v7) {
            __int16 v37 = v7;
          }
          else {
            __int16 v37 = 97;
          }
        }
      }
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v45, v33);
      if (v33 != 72 && v33 != 107)
      {
        if ((int)v9 <= 2 && (int)v11 <= 2) {
          int v40 = 1;
        }
        else {
          int v40 = 3;
        }
        if ((int)v9 <= 4 && (int)v11 <= 4) {
          int v42 = v40;
        }
        else {
          int v42 = 5;
        }
        do
        {
          __int16 v44 = v37;
          icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v44, 0, 1);
          --v42;
        }
        while (v42);
      }
    }
    else
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v45, 72);
    }
    if ((SWORD4(v45) & 0x8000u) == 0) {
      uint64_t v18 = WORD4(v45) >> 5;
    }
    else {
      uint64_t v18 = HIDWORD(v45);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)a3, v8, v9, (const icu::UnicodeString *)&v45, 0, v18);
    if ((int)v10 > (int)v8)
    {
      int v19 = WORD4(v45) >> 5;
      if (SWORD4(v45) < 0) {
        int v19 = HIDWORD(v45);
      }
      uint64_t v10 = (v10 - v9 + v19);
    }
    if (v11 == 0x7FFFFFFF && (int)v10 <= 0)
    {
      if (*(_WORD *)(a3 + 8)) {
        uint64_t v20 = 2;
      }
      else {
        uint64_t v20 = *(_WORD *)(a3 + 8) & 0x1F;
      }
      *(_WORD *)(a3 + 8) = v20;
    }
    else
    {
      icu::UnicodeString::doReplace(a3, v10, v11, 0, 0, 0);
    }
    icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)&v45);
    return icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v49);
  }
  return result;
}

uint64_t icu::DateIntervalFormat::getDateTimeSkeleton(uint64_t this, const icu::UnicodeString *a2, icu::UnicodeString *a3, icu::UnicodeString *a4, icu::UnicodeString *a5, icu::UnicodeString *a6)
{
  uint64_t v10 = this;
  unint64_t v11 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  int v12 = 0;
  int v28 = 0;
  int v13 = 0;
  uint64_t v14 = this + 10;
  while (1)
  {
    int v15 = *(__int16 *)(v10 + 8);
    if (v15 < 0) {
      break;
    }
    if (v11 >= (unint64_t)*(unsigned __int16 *)(v10 + 8) >> 5) {
      goto LABEL_27;
    }
    unint64_t v16 = (unint64_t)*(unsigned __int16 *)(v10 + 8) >> 5;
LABEL_7:
    if (v16 > v11)
    {
      if ((v15 & 2) != 0) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = *(void *)(v10 + 24);
      }
      int v18 = *(unsigned __int16 *)(v17 + 2 * v11);
      switch(*(_WORD *)(v17 + 2 * v11))
      {
        case 'A':
        case 'B':
        case 'S':
        case 'V':
        case 'Z':
        case 'a':
        case 'b':
        case 'j':
        case 's':
          __int16 v29 = *(_WORD *)(v17 + 2 * v11);
          icu::UnicodeString::doAppend((uint64_t)a4, (uint64_t)&v29, 0, 1);
          __int16 v29 = v18;
          int v19 = a5;
          goto LABEL_14;
        case 'D':
        case 'F':
        case 'G':
        case 'L':
        case 'Q':
        case 'U':
        case 'W':
        case 'Y':
        case 'c':
        case 'e':
        case 'g':
        case 'l':
        case 'q':
        case 'r':
        case 'u':
        case 'w':
          __int16 v29 = *(_WORD *)(v17 + 2 * v11);
          icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v29, 0, 1);
          __int16 v29 = v18;
          int v19 = a2;
          goto LABEL_14;
        case 'E':
          __int16 v29 = 69;
          this = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v29, 0, 1);
          LODWORD(v26) = v26 + 1;
          break;
        case 'H':
        case 'K':
        case 'h':
        case 'k':
          __int16 v29 = *(_WORD *)(v17 + 2 * v11);
          this = icu::UnicodeString::doAppend((uint64_t)a4, (uint64_t)&v29, 0, 1);
          if (!v13) {
            int v13 = v18;
          }
          break;
        case 'M':
          __int16 v29 = 77;
          this = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v29, 0, 1);
          ++v25;
          break;
        case 'd':
          __int16 v29 = 100;
          this = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v29, 0, 1);
          ++HIDWORD(v26);
          break;
        case 'm':
          __int16 v29 = 109;
          this = icu::UnicodeString::doAppend((uint64_t)a4, (uint64_t)&v29, 0, 1);
          LODWORD(v27) = v27 + 1;
          break;
        case 'v':
          ++v28;
          __int16 v20 = 118;
          goto LABEL_26;
        case 'y':
          __int16 v29 = 121;
          this = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v29, 0, 1);
          ++v12;
          break;
        case 'z':
          ++HIDWORD(v27);
          __int16 v20 = 122;
LABEL_26:
          __int16 v29 = v20;
          int v19 = a4;
LABEL_14:
          this = icu::UnicodeString::doAppend((uint64_t)v19, (uint64_t)&v29, 0, 1);
          break;
        default:
          break;
      }
    }
    ++v11;
  }
  if ((uint64_t)v11 < *(int *)(v10 + 12))
  {
    unint64_t v16 = *(unsigned int *)(v10 + 12);
    goto LABEL_7;
  }
LABEL_27:
  if (v12 >= 1)
  {
    do
    {
      __int16 v29 = 121;
      this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v29, 0, 1);
      --v12;
    }
    while (v12);
  }
  if (v25)
  {
    if (v25 >= 3)
    {
      int v21 = v25 - 1;
      if ((v25 - 1) >= 4) {
        int v21 = 4;
      }
      int v22 = v21 + 1;
      do
      {
        __int16 v29 = 77;
        this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v29, 0, 1);
        --v22;
      }
      while (v22);
    }
    else
    {
      __int16 v29 = 77;
      this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v29, 0, 1);
    }
  }
  if (v26)
  {
    if ((int)v26 >= 4)
    {
      int v23 = v26 - 1;
      if ((v26 - 1) >= 4) {
        int v23 = 4;
      }
      int v24 = v23 + 1;
      do
      {
        __int16 v29 = 69;
        this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v29, 0, 1);
        --v24;
      }
      while (v24);
    }
    else
    {
      __int16 v29 = 69;
      this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v29, 0, 1);
    }
  }
  if (HIDWORD(v26))
  {
    __int16 v29 = 100;
    this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v29, 0, 1);
  }
  if (v13)
  {
    __int16 v29 = v13;
    this = icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v29, 0, 1);
  }
  if (v27)
  {
    __int16 v29 = 109;
    this = icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v29, 0, 1);
  }
  if (HIDWORD(v27))
  {
    __int16 v29 = 122;
    this = icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v29, 0, 1);
  }
  if (v28)
  {
    __int16 v29 = 118;
    return icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v29, 0, 1);
  }
  return this;
}

uint64_t icu::DateIntervalFormat::setSeparateDateTimePtn(uint64_t ****this, UErrorCode *a2, const icu::UnicodeString *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *((unsigned __int16 *)a3 + 4);
  int v7 = (__int16)v6;
  unsigned int v8 = v6 >> 5;
  if (v7 < 0) {
    unsigned int v8 = *((_DWORD *)a3 + 3);
  }
  if (v8) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = (const icu::UnicodeString *)a2;
  }
  signed __int8 v30 = 0;
  uint64_t BestSkeleton = icu::DateIntervalInfo::getBestSkeleton(this[41], v9, (unsigned __int8 *)&v30);
  if (!BestSkeleton) {
    return 0;
  }
  int v12 = (UChar **)BestSkeleton;
  UErrorCode v29 = U_ZERO_ERROR;
  unsigned int v13 = *((unsigned __int16 *)a2 + 4);
  int v14 = (__int16)v13;
  LODWORD(v15) = v13 >> 5;
  if (v14 >= 0) {
    unint64_t v15 = v15;
  }
  else {
    unint64_t v15 = *((unsigned int *)a2 + 3);
  }
  if (v15)
  {
    unint64_t v16 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x40, v11);
    if (v16) {
      icu::DateFormat::getBestPattern((icu::DateFormat *)(this + 45), a2, &v29, (uint64_t)v16);
    }
    this[234] = (uint64_t ***)v16;
  }
  unsigned int v17 = *((unsigned __int16 *)a3 + 4);
  int v18 = (__int16)v17;
  LODWORD(v19) = v17 >> 5;
  if (v18 >= 0) {
    unint64_t v19 = v19;
  }
  else {
    unint64_t v19 = *((unsigned int *)a3 + 3);
  }
  if (v19)
  {
    UErrorCode v29 = U_ZERO_ERROR;
    __int16 v20 = icu::UMemory::operator new((uint64_t *)v19, (icu::UMemory *)0x40, v11);
    if (v20) {
      icu::DateFormat::getBestPattern((icu::DateFormat *)(this + 45), (UErrorCode *)a3, &v29, (uint64_t)v20);
    }
    this[235] = (uint64_t ***)v20;
  }
  if (v30 == 255) {
    return 0;
  }
  unsigned int v21 = *((unsigned __int16 *)a3 + 4);
  int v22 = (__int16)v21;
  unsigned int v23 = v21 >> 5;
  if (v22 < 0) {
    unsigned int v23 = *((_DWORD *)a3 + 3);
  }
  if (v23)
  {
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 0xCu, v9, (uint64_t)v12, (const icu::UnicodeString *)v30, 0, 0);
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 0xAu, v9, (uint64_t)v12, (const icu::UnicodeString *)v30, 0, 0);
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 9u, v9, (uint64_t)v12, (const icu::UnicodeString *)v30, 0, 0);
    return 1;
  }
  else
  {
    long long v37 = 0u;
    long long v38 = 0u;
    uint64_t v40 = 0;
    long long v39 = 0u;
    uint64_t v26 = (icu::DateIntervalFormat *)&v36;
    uint64_t v35 = 0;
    int32_t v36 = &unk_1EDA47700;
    LOWORD(v37) = 2;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    int32_t v31 = (UChar *)&unk_1EDA47700;
    LOWORD(v32) = 2;
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 5u, v9, (uint64_t)v12, (const icu::UnicodeString *)v30, (uint64_t)&v36, &v31);
    if (icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 2u, v9, (uint64_t)v12, (const icu::UnicodeString *)v30, (uint64_t)&v36, &v31))int v12 = &v31; {
    else
    }
      uint64_t v26 = v9;
    uint64_t v24 = 1;
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 1u, v26, (uint64_t)v12, (const icu::UnicodeString *)v30, (uint64_t)&v36, &v31);
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 0, v26, (uint64_t)v12, (const icu::UnicodeString *)v30, (uint64_t)&v36, &v31);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v31);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v36);
  }
  return v24;
}

uint64_t icu::DateIntervalFormat::setPatternInfo(uint64_t a1, unsigned int a2, UChar **a3, UChar **a4, char a5)
{
  int v11 = 0;
  uint64_t result = icu::DateIntervalInfo::calendarFieldToIntervalIndex(a2, &v11);
  if (v11 <= 0)
  {
    int v10 = result;
    if (a3) {
      uint64_t result = (uint64_t)icu::UnicodeString::operator=((UChar **)(a1 + 136 * (int)result + 648), a3);
    }
    if (a4) {
      uint64_t result = (uint64_t)icu::UnicodeString::operator=((UChar **)(a1 + 136 * v10 + 712), a4);
    }
    *(unsigned char *)(a1 + 136 * v10 + 776) = a5;
  }
  return result;
}

BOOL icu::DateIntervalFormat::fieldExistsInSkeleton(int a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a2 + 8);
  int v3 = (__int16)v2;
  int32_t v4 = v2 >> 5;
  if (v3 >= 0) {
    int32_t v5 = v4;
  }
  else {
    int32_t v5 = *(_DWORD *)(a2 + 12);
  }
  return icu::UnicodeString::doIndexOf(a2, icu::DateIntervalFormat::fgCalendarFieldToPatternLetter[a1], 0, v5) != -1;
}

char *icu::DateIntervalFormat::setFallbackPattern(char *result, unsigned int a2, UErrorCode *a3, UErrorCode *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    uint64_t v6 = (uint64_t)result;
    memset(v9, 0, sizeof(v9));
    icu::DateFormat::getBestPattern((icu::DateFormat *)(result + 360), a3, a4, (uint64_t)v9);
    int v7 = (void *)*(unsigned int *)a4;
    if ((int)v7 <= 0)
    {
      char DefaultOrder = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v6 + 328));
      icu::DateIntervalFormat::setPatternInfo(v6, a2, 0, (UChar **)v9, DefaultOrder);
    }
    return (char *)icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v9);
  }
  return result;
}

void *icu::DateIntervalFormat::concatSingleDate2TimeInterval(uint64_t a1, const icu::UnicodeString *a2, const icu::UnicodeString *a3, unsigned int a4, int *a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t result = (void *)icu::DateIntervalInfo::calendarFieldToIntervalIndex(a4, a5);
  if (*a5 <= 0)
  {
    uint64_t v11 = a1 + 136 * (int)result;
    if (*(unsigned __int16 *)(v11 + 656) >= 0x20u)
    {
      int v12 = (int)result;
      memset(v30, 0, 64);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v30, (UChar **)(v11 + 648));
      uint64_t v13 = a1 + 136 * v12;
      int v14 = (const icu::UnicodeString *)(v13 + 712);
      unsigned int v15 = *(unsigned __int16 *)(v13 + 720);
      int v16 = (__int16)v15;
      unsigned int v17 = v15 >> 5;
      unsigned int v18 = *(_DWORD *)(v13 + 724);
      if (v16 >= 0) {
        uint64_t v19 = v17;
      }
      else {
        uint64_t v19 = v18;
      }
      icu::UnicodeString::doAppend((uint64_t)v30, v14, 0, v19);
      long long v26 = 0u;
      uint64_t v29 = 0;
      long long v28 = 0u;
      long long v27 = 0u;
      int v25 = &unk_1EDA47700;
      LOWORD(v26) = 2;
      unsigned int v23 = &unk_1EDA47700;
      __int16 v24 = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v22, a2, 2, 2, 0, (UErrorCode *)a5);
      icu::SimpleFormatter::format((icu::SimpleFormatter *)v22, (const icu::UnicodeString *)v30, a3, (icu::UnicodeString *)&v25, (UErrorCode *)a5);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v22);
      unint64_t v20 = *a5;
      if ((int)v20 <= 0) {
        icu::DateIntervalFormat::setIntervalPattern(a1, a4, (uint64_t)&v25, *(unsigned char *)(a1 + 136 * v12 + 776));
      }
      icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)&v25);
      return icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v30);
    }
  }
  return result;
}

uint64_t icu::DateIntervalFormat::setIntervalPattern(uint64_t a1, unsigned int a2, icu::DateIntervalFormat *a3, uint64_t a4, const icu::UnicodeString *a5, uint64_t a6, UChar **a7)
{
  uint64_t v10 = (const icu::UnicodeString *)a4;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  signed __int8 v32 = (char)a5;
  int v31 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v42 = 0;
  long long v41 = 0u;
  long long v38 = (UChar *)&unk_1EDA47700;
  LOWORD(v39) = 2;
  icu::DateIntervalInfo::getIntervalPattern(*(void *)(a1 + 328), a4, a2, &v38, &v31);
  if ((unsigned __int16)v39 > 0x1Fu) {
    goto LABEL_2;
  }
  if (icu::SimpleDateFormat::isFieldUnitIgnored((uint64_t)v10, a2)) {
    goto LABEL_28;
  }
  if (a2 == 9)
  {
    icu::DateIntervalInfo::getIntervalPattern(*(void *)(a1 + 328), (uint64_t)v10, 0xAu, &v38, &v31);
    unint64_t v15 = (unsigned __int16)v39;
    if ((unsigned __int16)v39 >= 0x20u)
    {
      if (*(__int16 *)(a1 + 592) < 0) {
        int32_t v16 = *(_DWORD *)(a1 + 596);
      }
      else {
        int32_t v16 = *(unsigned __int16 *)(a1 + 592) >> 5;
      }
      BOOL v26 = icu::UnicodeString::doIndexOf(a1 + 584, 0x4Au, 0, v16) != -1;
      long long v34 = 0u;
      long long v35 = 0u;
      uint64_t v37 = 0;
      long long v36 = 0u;
      long long v33 = &unk_1EDA47700;
      LOWORD(v34) = 2;
      icu::DateIntervalFormat::adjustFieldWidth(a3, v10, &v38, a5, v26, (uint64_t)&v33, v27);
      char DefaultOrder = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(a1 + 328));
      icu::DateIntervalFormat::setIntervalPattern(a1, 9u, (uint64_t)&v33, DefaultOrder);
      icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v33);
    }
    goto LABEL_28;
  }
  if (!a6) {
    goto LABEL_23;
  }
  __int16 v23 = icu::DateIntervalFormat::fgCalendarFieldToPatternLetter[a2];
  icu::UnicodeString::operator=((UChar **)a6, (UChar **)a3);
  icu::UnicodeString::operator=(a7, (UChar **)v10);
  LOWORD(v33) = v23;
  icu::UnicodeString::doReplace(a6, 0, 0, (uint64_t)&v33, 0, 1);
  LOWORD(v33) = v23;
  icu::UnicodeString::doReplace((uint64_t)a7, 0, 0, (uint64_t)&v33, 0, 1);
  icu::DateIntervalInfo::getIntervalPattern(*(void *)(a1 + 328), (uint64_t)a7, a2, &v38, &v31);
  unint64_t v15 = (unsigned __int16)v39;
  if ((unsigned __int16)v39 <= 0x1Fu && !a5)
  {
    uint64_t BestSkeleton = icu::DateIntervalInfo::getBestSkeleton(*(uint64_t ****)(a1 + 328), (const icu::UnicodeString *)a7, (unsigned __int8 *)&v32);
    if (BestSkeleton && v32 != 255)
    {
      int v25 = (const icu::UnicodeString *)BestSkeleton;
      icu::DateIntervalInfo::getIntervalPattern(*(void *)(a1 + 328), BestSkeleton, a2, &v38, &v31);
      uint64_t v10 = v25;
    }
LABEL_23:
    unint64_t v15 = (unsigned __int16)v39;
  }
  if (v15 < 0x20) {
    goto LABEL_28;
  }
LABEL_2:
  if (*(__int16 *)(a1 + 592) < 0) {
    int32_t v14 = *(_DWORD *)(a1 + 596);
  }
  else {
    int32_t v14 = *(unsigned __int16 *)(a1 + 592) >> 5;
  }
  int v17 = icu::UnicodeString::doIndexOf(a1 + 584, 0x4Au, 0, v14);
  if (v32 || v17 != -1)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v37 = 0;
    long long v36 = 0u;
    long long v33 = &unk_1EDA47700;
    LOWORD(v34) = 2;
    icu::DateIntervalFormat::adjustFieldWidth(a3, v10, &v38, (const icu::UnicodeString *)v32, v17 != -1, (uint64_t)&v33, v18);
    char v20 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(a1 + 328));
    icu::DateIntervalFormat::setIntervalPattern(a1, a2, (uint64_t)&v33, v20);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v33);
    if (a6) {
      goto LABEL_15;
    }
LABEL_28:
    uint64_t v22 = 0;
    goto LABEL_29;
  }
  char v19 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(a1 + 328));
  icu::DateIntervalFormat::setIntervalPattern(a1, a2, (uint64_t)&v38, v19);
  if (!a6) {
    goto LABEL_28;
  }
LABEL_15:
  unint64_t v15 = *(unsigned __int16 *)(a6 + 8);
  if (v15 <= 0x1F) {
    goto LABEL_28;
  }
  uint64_t v22 = 1;
LABEL_29:
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v38);
  return v22;
}

void *icu::DateIntervalFormat::setIntervalPattern(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char DefaultOrder = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(a1 + 328));

  return icu::DateIntervalFormat::setIntervalPattern(a1, a2, a3, DefaultOrder);
}

void *icu::DateIntervalFormat::setIntervalPattern(uint64_t a1, unsigned int a2, uint64_t a3, char a4)
{
  int32_t v5 = (void **)a3;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  uint64_t v40 = 0;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v36 = &unk_1EDA47700;
  LOWORD(v37) = 2;
  if (icu::UnicodeString::doEqualsSubstring(a3, 0, 12, (uint64_t)aLatestfirstEar, 0, 12))
  {
    unsigned int v8 = *((unsigned __int16 *)v5 + 4);
    int v9 = (__int16)v8;
    unsigned int v10 = v8 >> 5;
    if (v9 < 0) {
      unsigned int v10 = *((_DWORD *)v5 + 3);
    }
    if ((v37 & 0x8000u) == 0) {
      uint64_t v11 = (unsigned __int16)v37 >> 5;
    }
    else {
      uint64_t v11 = DWORD1(v37);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v36, 0, v11, (const icu::UnicodeString *)v5, 12, v10 - 12);
    a4 = 1;
  }
  else
  {
    if (!icu::UnicodeString::doEqualsSubstring((uint64_t)v5, 0, 14, (uint64_t)&aLatestfirstEar[12], 0, 14)) {
      goto LABEL_16;
    }
    unsigned int v13 = *((unsigned __int16 *)v5 + 4);
    int v14 = (__int16)v13;
    unsigned int v15 = v13 >> 5;
    if (v14 < 0) {
      unsigned int v15 = *((_DWORD *)v5 + 3);
    }
    if ((v37 & 0x8000u) == 0) {
      uint64_t v16 = (unsigned __int16)v37 >> 5;
    }
    else {
      uint64_t v16 = DWORD1(v37);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v36, 0, v16, (const icu::UnicodeString *)v5, 14, v15 - 14);
    a4 = 0;
  }
  int32_t v5 = &v36;
LABEL_16:
  uint64_t v17 = icu::DateIntervalFormat::splitPatternInto2Part((icu::DateIntervalFormat *)v5, v12);
  int v18 = v17;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v35 = 0;
  long long v34 = 0u;
  uint64_t v30 = 0;
  int v31 = (UChar *)&unk_1EDA47700;
  LOWORD(v32) = 2;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  BOOL v26 = (UChar *)&unk_1EDA47700;
  LOWORD(v27) = 2;
  icu::UnicodeString::doReplace((icu::UnicodeString *)&v31, 0, 0, (const icu::UnicodeString *)v5, 0, v17);
  unsigned int v19 = *((unsigned __int16 *)v5 + 4);
  if ((v19 & 0x8000) != 0)
  {
    int v20 = *((_DWORD *)v5 + 3);
    if (v18 >= v20) {
      goto LABEL_24;
    }
  }
  else
  {
    if (v18 >= (int)(v19 >> 5)) {
      goto LABEL_24;
    }
    int v20 = v19 >> 5;
  }
  if ((v27 & 0x8000u) == 0) {
    uint64_t v21 = (unsigned __int16)v27 >> 5;
  }
  else {
    uint64_t v21 = DWORD1(v27);
  }
  icu::UnicodeString::doReplace((icu::UnicodeString *)&v26, 0, v21, (const icu::UnicodeString *)v5, v18, (v20 - v18));
LABEL_24:
  icu::DateIntervalFormat::setPatternInfo(a1, a2, &v31, &v26, a4);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v26);
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v31);
  return icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v36);
}

uint64_t icu::DateIntervalFormat::splitPatternInto2Part(icu::DateIntervalFormat *this, const icu::UnicodeString *a2)
{
  unsigned int v2 = 0;
  int v3 = 0;
  unsigned int v4 = 0;
  BOOL v5 = 0;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  memset(v17, 0, 58);
  unsigned int v6 = *((unsigned __int16 *)this + 4);
  int v7 = v6 >> 5;
  int v8 = *((_DWORD *)this + 3);
  int v9 = (char *)this + 10;
  if ((v6 & 2) == 0) {
    int v9 = (char *)*((void *)this + 3);
  }
  if ((v6 & 0x8000) != 0) {
    goto LABEL_6;
  }
LABEL_4:
  unsigned int v10 = v6 >> 5;
  if ((int)v4 < v7)
  {
    while (1)
    {
      if (v10 <= v4) {
        int v11 = 0xFFFF;
      }
      else {
        int v11 = *(unsigned __int16 *)&v9[2 * v4];
      }
      if (v11 != v2 && v3 >= 1)
      {
        uint64_t v12 = v2 - 65;
        if (*((unsigned char *)v17 + v12)) {
          return v4 - v3;
        }
        int v3 = 0;
        *((unsigned char *)v17 + v12) = 1;
      }
      if (v11 == 39) {
        break;
      }
      if ((v11 & 0xFFFFFFDF) - 65 < 0x1A)
      {
        int v15 = v3 + 1;
      }
      else
      {
        int v11 = v2;
        int v15 = v3;
      }
      if (!v5)
      {
        unsigned int v2 = v11;
        int v3 = v15;
      }
      BOOL v5 = v5;
LABEL_29:
      ++v4;
      if ((v6 & 0x8000) == 0) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v10 = v8;
      if ((int)v4 >= v8) {
        goto LABEL_31;
      }
    }
    uint64_t v13 = (int)v4 + 1;
    if ((v6 & 0x8000) != 0)
    {
      unsigned int v14 = v8;
      if ((int)v13 >= v8)
      {
LABEL_28:
        BOOL v5 = !v5;
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v14 = v6 >> 5;
      if ((int)v13 >= v7) {
        goto LABEL_28;
      }
    }
    if (v14 > v13 && *(_WORD *)&v9[2 * v13] == 39)
    {
      ++v4;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_31:
  if (v3 >= 1 && !*((unsigned char *)&v17[-4] + v2 - 1)) {
    int v3 = 0;
  }
  return v4 - v3;
}

uint64_t icu::DateIntervalFormat::adjustFieldWidth(icu::DateIntervalFormat *this, const icu::UnicodeString *a2, UChar **a3, const icu::UnicodeString *a4, int a5, uint64_t a6, icu::UnicodeString *a7)
{
  int v9 = (int)a4;
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  icu::UnicodeString::operator=((UChar **)a6, a3);
  uint64_t v117 = 0;
  memset(v116, 0, sizeof(v116));
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  memset(v108, 0, sizeof(v108));
  icu::DateIntervalInfo::parseSkeleton((uint64_t)this, (const icu::UnicodeString *)v116, v12);
  icu::DateIntervalInfo::parseSkeleton((uint64_t)a2, (const icu::UnicodeString *)v108, v13);
  if (a5)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)&unk_18CAA1F94, 0xFFFFFFFFLL);
    v105 = &unk_1EDA47700;
    __int16 v106 = 2;
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v14);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)&unk_18CAA1F9A, 0xFFFFFFFFLL);
    v105 = &unk_1EDA47700;
    __int16 v106 = 2;
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v17);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)&unk_18CAA1FA0, 0xFFFFFFFFLL);
    v105 = &unk_1EDA47700;
    __int16 v106 = 2;
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v20);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)&unk_18CAA1FA6, 0xFFFFFFFFLL);
    v105 = &unk_1EDA47700;
    __int16 v106 = 2;
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v23);
    icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, 97);
    v105 = &unk_1EDA47700;
    __int16 v106 = 2;
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v26);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)L"  ");
    icu::UnicodeString::UnicodeString((uint64_t)&v105, (uint64_t)" ");
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v29);
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)" ");
    icu::UnicodeString::UnicodeString((uint64_t)&v105, (uint64_t)"\t ");
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v32);
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v107);
    icu::UnicodeString::trim((icu::UnicodeString *)a6);
  }
  if (v9 == 2)
  {
    unsigned int v35 = *((unsigned __int16 *)this + 4);
    int v36 = (__int16)v35;
    int32_t v37 = v35 >> 5;
    if (v36 >= 0) {
      int32_t v38 = v37;
    }
    else {
      int32_t v38 = *((_DWORD *)this + 3);
    }
    if (icu::UnicodeString::doIndexOf((uint64_t)this, 0x7Au, 0, v38) != -1)
    {
      icu::UnicodeString::UnicodeString((uint64_t)v107, 118);
      icu::UnicodeString::UnicodeString((uint64_t)&v105, 122);
      icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v39);
      icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&v105);
      icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v107);
    }
    unsigned int v42 = *((unsigned __int16 *)this + 4);
    int v43 = (__int16)v42;
    int32_t v44 = v42 >> 5;
    if (v43 >= 0) {
      int32_t v45 = v44;
    }
    else {
      int32_t v45 = *((_DWORD *)this + 3);
    }
    if (icu::UnicodeString::doIndexOf((uint64_t)this, 0x4Bu, 0, v45) != -1)
    {
      icu::UnicodeString::UnicodeString((uint64_t)v107, 104);
      icu::UnicodeString::UnicodeString((uint64_t)&v105, 75);
      icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v46);
      icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v105);
      icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)v107);
    }
    unsigned int v49 = *((unsigned __int16 *)this + 4);
    int v50 = (__int16)v49;
    int32_t v51 = v49 >> 5;
    if (v50 >= 0) {
      int32_t v52 = v51;
    }
    else {
      int32_t v52 = *((_DWORD *)this + 3);
    }
    if (icu::UnicodeString::doIndexOf((uint64_t)this, 0x6Bu, 0, v52) != -1)
    {
      icu::UnicodeString::UnicodeString((uint64_t)v107, 72);
      icu::UnicodeString::UnicodeString((uint64_t)&v105, 107);
      icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v53);
      icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)&v105);
      icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)v107);
    }
    unsigned int v56 = *((unsigned __int16 *)this + 4);
    int v57 = (__int16)v56;
    int32_t v58 = v56 >> 5;
    if (v57 >= 0) {
      int32_t v59 = v58;
    }
    else {
      int32_t v59 = *((_DWORD *)this + 3);
    }
    if (icu::UnicodeString::doIndexOf((uint64_t)this, 0x62u, 0, v59) != -1)
    {
      icu::UnicodeString::UnicodeString((uint64_t)v107, 97);
      icu::UnicodeString::UnicodeString((uint64_t)&v105, 98);
      icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v60);
      icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)&v105);
      icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)v107);
    }
  }
  unsigned int v63 = *(unsigned __int16 *)(a6 + 8);
  int v64 = (__int16)v63;
  int32_t v65 = v63 >> 5;
  if (v64 >= 0) {
    int32_t v66 = v65;
  }
  else {
    int32_t v66 = *(_DWORD *)(a6 + 12);
  }
  if (icu::UnicodeString::doIndexOf(a6, 0x61u, 0, v66) != -1 && !v109) {
    LODWORD(v109) = 1;
  }
  unsigned int v67 = *(unsigned __int16 *)(a6 + 8);
  int v68 = (__int16)v67;
  int32_t v69 = v67 >> 5;
  if (v68 >= 0) {
    int32_t v70 = v69;
  }
  else {
    int32_t v70 = *(_DWORD *)(a6 + 12);
  }
  uint64_t result = icu::UnicodeString::doIndexOf(a6, 0x62u, 0, v70);
  if (result != -1 && !DWORD1(v109)) {
    DWORD1(v109) = 1;
  }
  unsigned int v72 = *(unsigned __int16 *)(a6 + 8);
  int v73 = (__int16)v72;
  int v74 = v72 >> 5;
  if (v73 >= 0) {
    int v75 = v74;
  }
  else {
    int v75 = *(_DWORD *)(a6 + 12);
  }
  if (v75 >= 1)
  {
    BOOL v76 = 0;
    unsigned int v77 = 0;
    uint64_t v78 = 0;
    int v79 = 0;
    while (1)
    {
      unsigned int v80 = *(unsigned __int16 *)(a6 + 8);
      if ((v80 & 0x8000u) == 0) {
        unsigned int v81 = v80 >> 5;
      }
      else {
        unsigned int v81 = *(_DWORD *)(a6 + 12);
      }
      if (v81 <= v78)
      {
        int v83 = 0xFFFF;
      }
      else
      {
        if ((v80 & 2) != 0) {
          uint64_t v82 = a6 + 10;
        }
        else {
          uint64_t v82 = *(void *)(a6 + 24);
        }
        int v83 = *(unsigned __int16 *)(v82 + 2 * (int)v78);
      }
      if (v83 != v77 && v79 >= 1)
      {
        if (v77 == 76) {
          unsigned int v84 = 77;
        }
        else {
          unsigned int v84 = v77;
        }
        uint64_t v85 = 4 * v84 - 260;
        int v86 = *(_DWORD *)((char *)v108 + v85);
        int v87 = *(_DWORD *)((char *)v116 + v85);
        if (v86 != v79 || v87 <= v86)
        {
          int v79 = 0;
        }
        else
        {
          int v89 = v87 - v79;
          if (v87 - v79 >= 1)
          {
            int v90 = v87 - v79;
            do
            {
              v107[0] = v77;
              uint64_t result = icu::UnicodeString::doReplace(a6, v78, 0, (uint64_t)v107, 0, 1);
              --v90;
            }
            while (v90);
          }
          int v79 = 0;
          LODWORD(v78) = v89 + v78;
          v75 += v89;
        }
      }
      if (v83 != 39)
      {
        unsigned int v94 = (v83 & 0xFFFFFFDF) - 65;
        BOOL v95 = v94 >= 0x1A;
        if (v94 >= 0x1A) {
          int v96 = v79;
        }
        else {
          int v96 = v79 + 1;
        }
        if (v95) {
          int v97 = v77;
        }
        else {
          int v97 = v83;
        }
        if (!v76)
        {
          int v79 = v96;
          unsigned int v77 = v97;
        }
        BOOL v76 = v76;
        goto LABEL_86;
      }
      int v91 = v78 + 1;
      unsigned int v92 = *(unsigned __int16 *)(a6 + 8);
      if (*(__int16 *)(a6 + 8) < 0)
      {
        unsigned int v93 = *(_DWORD *)(a6 + 12);
        if (v91 >= (int)v93) {
          goto LABEL_85;
        }
      }
      else
      {
        if (v91 >= (int)(v92 >> 5)) {
          goto LABEL_85;
        }
        unsigned int v93 = v92 >> 5;
      }
      if (v93 <= v91
        || ((v92 & 2) != 0 ? (uint64_t v98 = a6 + 10) : (uint64_t v98 = *(void *)(a6 + 24)), *(_WORD *)(v98 + 2 * v91) != 39))
      {
LABEL_85:
        BOOL v76 = !v76;
        goto LABEL_86;
      }
      LODWORD(v78) = v78 + 1;
LABEL_86:
      uint64_t v78 = (v78 + 1);
      if ((int)v78 >= v75)
      {
        if (v79 >= 1)
        {
          if (v77 == 76) {
            unsigned int v99 = 77;
          }
          else {
            unsigned int v99 = v77;
          }
          uint64_t v100 = 4 * v99 - 260;
          int v101 = *(_DWORD *)((char *)v108 + v100);
          int v102 = *(_DWORD *)((char *)v116 + v100);
          if (v101 == v79 && v102 > v101)
          {
            int v104 = v102 - v79;
            if (v102 - v79 >= 1)
            {
              do
              {
                v107[0] = v77;
                uint64_t result = icu::UnicodeString::doAppend(a6, (uint64_t)v107, 0, 1);
                --v104;
              }
              while (v104);
            }
          }
        }
        return result;
      }
    }
  }
  return result;
}

void *icu::DateIntervalFormat::fallbackFormatRange(icu::DateIntervalFormat *this, icu::Calendar *a2, icu::Calendar *a3, icu::UnicodeString *a4, signed __int8 *a5, icu::FieldPositionHandler *a6, UErrorCode *a7)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v42 = 0u;
  uint64_t v45 = 0;
  long long v44 = 0u;
  long long v43 = 0u;
  uint64_t v41 = (UChar *)&unk_1EDA47700;
  LOWORD(v42) = 2;
  icu::DateIntervalInfo::getFallbackIntervalPattern(*((UChar ***)this + 41), &v41);
  v36[0] = 0;
  long long v37 = 0u;
  uint64_t v40 = 0;
  long long v39 = 0u;
  long long v38 = 0u;
  v36[1] = &unk_1EDA47700;
  LOWORD(v37) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v36, (const icu::UnicodeString *)&v41, 2, 2, 0, a7);
  if (*(int *)a7 <= 0)
  {
    uint64_t __b = 0;
    memset(v34, 0, sizeof(v34));
    sub_18C927470(&__b, (uint64_t)v36, 2, (uint64_t)v34);
    int v30 = 0;
    int32_t v14 = __b;
    int32_t v15 = HIDWORD(__b);
    if ((int)__b >= SHIDWORD(__b))
    {
      *a5 = 1;
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v34, 0, v15, (icu::UnicodeString *)v31);
      if ((v32 & 0x8000u) == 0) {
        uint64_t v21 = v32 >> 5;
      }
      else {
        uint64_t v21 = v33;
      }
      icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v31, 0, v21);
      icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v31);
      icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a3, a4, a6, a7);
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v34, SHIDWORD(__b), __b - HIDWORD(__b), (icu::UnicodeString *)v31);
      if ((v32 & 0x8000u) == 0) {
        uint64_t v23 = v32 >> 5;
      }
      else {
        uint64_t v23 = v33;
      }
      icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v31, 0, v23);
      icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v31);
      (*(void (**)(void, uint64_t, int *))(**((void **)this + 42) + 200))(*((void *)this + 42), 256, &v30);
      icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a2, a4, a6, a7);
      int v20 = __b;
    }
    else
    {
      *a5 = 0;
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v34, 0, v14, (icu::UnicodeString *)v31);
      if ((v32 & 0x8000u) == 0) {
        uint64_t v16 = v32 >> 5;
      }
      else {
        uint64_t v16 = v33;
      }
      icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v31, 0, v16);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v31);
      icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a2, a4, a6, a7);
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v34, __b, HIDWORD(__b) - __b, (icu::UnicodeString *)v31);
      if ((v32 & 0x8000u) == 0) {
        uint64_t v18 = v32 >> 5;
      }
      else {
        uint64_t v18 = v33;
      }
      icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v31, 0, v18);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v31);
      (*(void (**)(void, uint64_t, int *))(**((void **)this + 42) + 200))(*((void *)this + 42), 256, &v30);
      icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a3, a4, a6, a7);
      int v20 = HIDWORD(__b);
    }
    icu::UnicodeString::tempSubString((icu::UnicodeString *)v34, v20, v20 ^ 0x7FFFFFFF, (icu::UnicodeString *)v31);
    if ((v32 & 0x8000u) == 0) {
      uint64_t v25 = v32 >> 5;
    }
    else {
      uint64_t v25 = v33;
    }
    icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v31, 0, v25);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v31);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v34);
  }
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v36);
  return icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v41);
}

uint64_t sub_18C927470@<X0>(void *__b@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v6 = *(unsigned __int16 *)(a2 + 16);
  if ((v6 & 0x11) == 0)
  {
    if ((v6 & 2) != 0)
    {
      int v7 = (unsigned __int16 *)(a2 + 18);
      if ((v6 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      int v7 = *(unsigned __int16 **)(a2 + 32);
      if ((v6 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }
LABEL_8:
    int v8 = *(_DWORD *)(a2 + 20);
    return icu::SimpleFormatter::getTextWithNoArguments(__b, v7, v8, a3, a4);
  }
  int v7 = 0;
  if ((v6 & 0x8000) != 0) {
    goto LABEL_8;
  }
LABEL_6:
  int v8 = v6 >> 5;
  return icu::SimpleFormatter::getTextWithNoArguments(__b, v7, v8, a3, a4);
}

icu::UnicodeString *icu::DateIntervalFormat::findReplaceInPattern(icu::DateIntervalFormat *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *((unsigned __int16 *)this + 4);
  int v8 = (__int16)v7;
  int32_t v9 = v7 >> 5;
  if (v8 >= 0) {
    int32_t v10 = v9;
  }
  else {
    int32_t v10 = *((_DWORD *)this + 3);
  }
  uint64_t v11 = icu::UnicodeString::doIndexOf((uint64_t)this, 0x27u, 0, v10);
  if (v11 == -1)
  {
    unsigned int v44 = *((unsigned __int16 *)this + 4);
    int v45 = (__int16)v44;
    int32_t v46 = v44 >> 5;
    if (v45 >= 0) {
      int32_t v47 = v46;
    }
    else {
      int32_t v47 = *((_DWORD *)this + 3);
    }
    unsigned int v48 = *((unsigned __int16 *)a2 + 4);
    int v49 = (__int16)v48;
    unsigned int v50 = v48 >> 5;
    if (v49 >= 0) {
      uint64_t v51 = v50;
    }
    else {
      uint64_t v51 = *((unsigned int *)a2 + 3);
    }
    unsigned int v52 = *((unsigned __int16 *)a3 + 4);
    int v53 = (__int16)v52;
    int v54 = v52 >> 5;
    if (v53 < 0) {
      int v54 = *((_DWORD *)a3 + 3);
    }
    return icu::UnicodeString::findAndReplace(this, 0, v47, a2, 0, v51, a3, 0, v54);
  }
  else
  {
    uint64_t v12 = v11;
    long long v59 = 0u;
    uint64_t v62 = 0;
    long long v61 = 0u;
    long long v60 = 0u;
    int32_t v58 = (UChar *)&unk_1EDA47700;
    LOWORD(v59) = 2;
    memset(v57, 0, sizeof(v57));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v57, (UChar **)this);
    while ((v12 & 0x80000000) == 0)
    {
      int v13 = v12 + 1;
      if (SWORD4(v57[0]) < 0)
      {
        unsigned int v14 = HIDWORD(v57[0]);
        if (SHIDWORD(v57[0]) >= v13) {
          int v15 = v12 + 1;
        }
        else {
          int v15 = HIDWORD(v57[0]);
        }
      }
      else
      {
        unsigned int v14 = WORD4(v57[0]) >> 5;
        if (v14 >= v13) {
          int v15 = v12 + 1;
        }
        else {
          int v15 = WORD4(v57[0]) >> 5;
        }
      }
      int v16 = icu::UnicodeString::doIndexOf((uint64_t)v57, 0x27u, v15, v14 - v15);
      if (v16 == -1)
      {
        int v17 = WORD4(v57[0]) >> 5;
        if (SWORD4(v57[0]) < 0) {
          int v17 = HIDWORD(v57[0]);
        }
        int v16 = v17 - 1;
      }
      memset(v56, 0, sizeof(v56));
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v56, (const icu::UnicodeString *)v57, 0, v12);
      memset(v55, 0, sizeof(v55));
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v55, (const icu::UnicodeString *)v57, v12, (v16 - v12 + 1));
      if ((SWORD4(v56[0]) & 0x8000u) == 0) {
        int32_t v18 = WORD4(v56[0]) >> 5;
      }
      else {
        int32_t v18 = HIDWORD(v56[0]);
      }
      unsigned int v19 = *((unsigned __int16 *)a2 + 4);
      int v20 = (__int16)v19;
      unsigned int v21 = v19 >> 5;
      if (v20 >= 0) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = *((unsigned int *)a2 + 3);
      }
      unsigned int v23 = *((unsigned __int16 *)a3 + 4);
      int v24 = (__int16)v23;
      int v25 = v23 >> 5;
      if (v24 < 0) {
        int v25 = *((_DWORD *)a3 + 3);
      }
      icu::UnicodeString::findAndReplace((icu::UnicodeString *)v56, 0, v18, a2, 0, v22, a3, 0, v25);
      if ((SWORD4(v56[0]) & 0x8000u) == 0) {
        uint64_t v26 = WORD4(v56[0]) >> 5;
      }
      else {
        uint64_t v26 = HIDWORD(v56[0]);
      }
      icu::UnicodeString::doAppend((uint64_t)&v58, (const icu::UnicodeString *)v56, 0, v26);
      if ((SWORD4(v55[0]) & 0x8000u) == 0) {
        uint64_t v27 = WORD4(v55[0]) >> 5;
      }
      else {
        uint64_t v27 = HIDWORD(v55[0]);
      }
      icu::UnicodeString::doAppend((uint64_t)&v58, (const icu::UnicodeString *)v55, 0, v27);
      if (v16 == 2147483646)
      {
        if (BYTE8(v57[0])) {
          unsigned int v28 = 2;
        }
        else {
          unsigned int v28 = BYTE8(v57[0]) & 0x1F;
        }
        WORD4(v57[0]) = v28;
      }
      else
      {
        icu::UnicodeString::doReplace((uint64_t)v57, 0, (v16 + 1), 0, 0, 0);
        unsigned int v28 = WORD4(v57[0]);
        if ((WORD4(v57[0]) & 0x8000) != 0)
        {
          int32_t v29 = HIDWORD(v57[0]);
          goto LABEL_38;
        }
      }
      int32_t v29 = v28 >> 5;
LABEL_38:
      uint64_t v12 = icu::UnicodeString::doIndexOf((uint64_t)v57, 0x27u, 0, v29);
      icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v55);
      icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v56);
    }
    if ((SWORD4(v57[0]) & 0x8000u) == 0) {
      int32_t v32 = WORD4(v57[0]) >> 5;
    }
    else {
      int32_t v32 = HIDWORD(v57[0]);
    }
    unsigned int v33 = *((unsigned __int16 *)a2 + 4);
    int v34 = (__int16)v33;
    unsigned int v35 = v33 >> 5;
    if (v34 >= 0) {
      uint64_t v36 = v35;
    }
    else {
      uint64_t v36 = *((unsigned int *)a2 + 3);
    }
    unsigned int v37 = *((unsigned __int16 *)a3 + 4);
    int v38 = (__int16)v37;
    int v39 = v37 >> 5;
    if (v38 < 0) {
      int v39 = *((_DWORD *)a3 + 3);
    }
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)v57, 0, v32, a2, 0, v36, a3, 0, v39);
    if ((SWORD4(v57[0]) & 0x8000u) == 0) {
      uint64_t v40 = WORD4(v57[0]) >> 5;
    }
    else {
      uint64_t v40 = HIDWORD(v57[0]);
    }
    icu::UnicodeString::doAppend((uint64_t)&v58, (const icu::UnicodeString *)v57, 0, v40);
    icu::UnicodeString::operator=((UChar **)this, &v58);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v57);
    return (icu::UnicodeString *)icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v58);
  }
}

void *icu::DateIntervalInfo::getStaticClassID(icu::DateIntervalInfo *this)
{
  return &unk_1E91921F0;
}

void *icu::DateIntervalInfo::getDynamicClassID(icu::DateIntervalInfo *this)
{
  return &unk_1E91921F0;
}

icu::DateIntervalInfo *icu::DateIntervalInfo::DateIntervalInfo(icu::DateIntervalInfo *this, UErrorCode *a2)
{
  *(void *)this = &unk_1EDA4BE18;
  unsigned int v4 = (icu::DateIntervalInfo *)icu::UnicodeString::UnicodeString((uint64_t)this + 8, (uint64_t)L"{0} – {1}");
  *((unsigned char *)this + 72) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 10) = icu::DateIntervalInfo::initHash(v4, a2);
  return this;
}

{
  icu::DateIntervalInfo *v4;

  *(void *)this = &unk_1EDA4BE18;
  unsigned int v4 = (icu::DateIntervalInfo *)icu::UnicodeString::UnicodeString((uint64_t)this + 8, (uint64_t)L"{0} – {1}");
  *((unsigned char *)this + 72) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 10) = icu::DateIntervalInfo::initHash(v4, a2);
  return this;
}

uint64_t *icu::DateIntervalInfo::initHash(icu::DateIntervalInfo *this, UErrorCode *a2)
{
  unsigned int v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 <= 0)
  {
    unsigned int v4 = (int32x2_t *)icu::UMemory::operator new(v2, (icu::UMemory *)0x58, (unint64_t)a2);
    BOOL v5 = (uint64_t *)v4;
    if (!v4)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return v5;
    }
    *unsigned int v4 = 0;
    if (*(int *)a2 <= 0)
    {
      unsigned int v6 = v4 + 1;
      uhash_init(v4 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a2);
      if (*(int *)a2 <= 0)
      {
        uint64_t *v5 = (uint64_t)v6;
        uhash_setKeyDeleter((uint64_t)(v5 + 1), (uint64_t)uprv_deleteUObject);
        if (*(int *)a2 < 1)
        {
          uhash_setValueComparator(*v5, (uint64_t)sub_18C9290CC);
          return v5;
        }
      }
      if (*v5) {
        uhash_close((unsigned char *)*v5);
      }
    }
    icu::UMemory::operator delete(v5);
  }
  return 0;
}

icu::DateIntervalInfo *icu::DateIntervalInfo::DateIntervalInfo(icu::DateIntervalInfo *this, const icu::Locale *a2, UErrorCode *a3)
{
  *(void *)this = &unk_1EDA4BE18;
  icu::UnicodeString::UnicodeString((uint64_t)this + 8, (uint64_t)L"{0} – {1}");
  *((unsigned char *)this + 72) = 0;
  *((void *)this + 10) = 0;
  icu::DateIntervalInfo::initializeData(this, a2, a3);
  return this;
}

{
  *(void *)this = &unk_1EDA4BE18;
  icu::UnicodeString::UnicodeString((uint64_t)this + 8, (uint64_t)L"{0} – {1}");
  *((unsigned char *)this + 72) = 0;
  *((void *)this + 10) = 0;
  icu::DateIntervalInfo::initializeData(this, a2, a3);
  return this;
}

void icu::DateIntervalInfo::initializeData(icu::DateIntervalInfo *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *((void *)this + 10) = icu::DateIntervalInfo::initHash(this, a3);
  if (*(int *)a3 <= 0)
  {
    unsigned int v6 = (char *)*((void *)a2 + 5);
    __int16 v46 = 0;
    memset(v45, 0, sizeof(v45));
    ures_getFunctionalEquivalent((uint64_t)v45, 258, 0, (uint64_t)"calendar", (uint64_t)"calendar", (uint64_t)v6, 0, 0, (int *)a3);
    HIBYTE(v46) = 0;
    memset(&v44[1], 0, 56);
    v44[0] = (char *)&v44[1] + 5;
    LODWORD(v44[1]) = 40;
    long long v38 = 0uLL;
    icu::CharStringByteSink::CharStringByteSink(&v38, (uint64_t)v44);
    ulocimp_getKeywordValue(v45, "calendar", (uint64_t)&v38, (int *)a3);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v38);
    if (*(int *)a3 <= 0) {
      unsigned int v7 = (char *)v44[0];
    }
    else {
      unsigned int v7 = "gregorian";
    }
    *a3 = U_ZERO_ERROR;
    BOOL v34 = 0;
    uint64_t v8 = ures_open(0, v6, (int *)a3);
    uint64_t v9 = ures_openWithCountryFallback(0, v6, &v34, (int *)a3);
    if (*(int *)a3 <= 0)
    {
      uint64_t v10 = v9;
      uint64_t v11 = ures_getByKeyWithFallback(v8, "calendar", 0, a3);
      uint64_t v12 = ures_getByKeyWithFallback(v10, "calendar", 0, a3);
      if (*(int *)a3 <= 0)
      {
        uint64_t v27 = v10;
        uint64_t v28 = v8;
        int32_t v29 = a2;
        int v33 = 0;
        uint64_t v13 = ures_getByKeyWithFallback(v11, v7, 0, a3);
        uint64_t v14 = ures_getByKeyWithFallback(v13, "intervalFormats", 0, a3);
        uint64_t v15 = v14;
        if (*(int *)a3 <= 0)
        {
          StringByKeyWithFallback = ures_getStringByKeyWithFallback(v14, "fallback", &v33, a3);
          if (*(int *)a3 <= 0)
          {
            if (StringByKeyWithFallback)
            {
              long long v40 = 0u;
              long long v41 = 0u;
              long long v38 = 0u;
              long long v39 = 0u;
              int32_t v32 = StringByKeyWithFallback;
              icu::UnicodeString::UnicodeString(&v38, 1, &v32);
              icu::DateIntervalInfo::setFallbackIntervalPattern(this, (const icu::UnicodeString *)&v38, a3);
              icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v38);
            }
          }
        }
        ures_close(v15);
        ures_close(v13);
        if (v34) {
          uint64_t v18 = v12;
        }
        else {
          uint64_t v18 = v11;
        }
        while (v18)
        {
          uint64_t v43 = 0;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v38 = 0u;
          BOOL v19 = icu::Locale::isRightToLeft(v29) == 0;
          *(void *)&long long v38 = &unk_1EDA4BE50;
          *((void *)&v38 + 1) = this;
          icu::UnicodeString::UnicodeString(&v39, v7, 0xFFFFFFFFLL, 0);
          LOBYTE(v43) = v18 != v11;
          BYTE1(v43) = v19;
          uint64_t v31 = 0;
          memset(v30, 0, sizeof(v30));
          uint64_t v20 = *(unsigned int *)a3;
          if ((int)v20 < 1)
          {
            uhash_init((int32x2_t *)v30 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a3);
            uint64_t v20 = *(unsigned int *)a3;
            if ((int)v20 <= 0)
            {
              *(void *)&v30[0] = (char *)v30 + 8;
              uhash_setKeyDeleter((uint64_t)v30 + 8, (uint64_t)uprv_deleteUObject);
              uint64_t v20 = *(unsigned int *)a3;
              if ((int)v20 <= 0)
              {
                while (1)
                {
                  uint64_t v20 = WORD4(v39);
                  if (BYTE8(v39)) {
                    break;
                  }
                  if (uhash_geti((uint64_t)v30 + 8, (uint64_t)&v39) == 1)
                  {
                    uint64_t v20 = 3;
                    *a3 = U_INVALID_FORMAT_ERROR;
                    break;
                  }
                  unsigned int v23 = (icu::UnicodeString *)icu::UMemory::operator new(v22, (icu::UMemory *)0x40, v21);
                  uint64_t v24 = (uint64_t)v23;
                  if (v23) {
                    icu::UnicodeString::UnicodeString(v23, (UChar **)&v39);
                  }
                  uhash_puti((uint64_t)v30 + 8, v24, 1u, (int *)a3);
                  uint64_t v20 = *(unsigned int *)a3;
                  if ((int)v20 <= 0)
                  {
                    int v37 = 0;
                    memset(&v35[1], 0, 48);
                    v35[0] = (char *)&v35[1] + 5;
                    LODWORD(v35[1]) = 40;
                    int v36 = 0;
                    icu::CharString::appendInvariantChars((icu::CharString *)v35, (const icu::UnicodeString *)&v39, a3);
                    UErrorCode v25 = *a3;
                    if (*(int *)a3 <= 0)
                    {
                      uint64_t v26 = (char *)v35[0];
                      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v39);
                      ures_getAllItemsWithFallback(v18, v26, (uint64_t)&v38, (int *)a3);
                    }
                    uint64_t v20 = BYTE4(v35[1]);
                    if (BYTE4(v35[1])) {
                      uprv_free(v35[0]);
                    }
                    if (v25 < U_ILLEGAL_ARGUMENT_ERROR) {
                      continue;
                    }
                  }
                  break;
                }
              }
            }
            if (v18 == v11) {
              uint64_t v18 = 0;
            }
            else {
              uint64_t v18 = v11;
            }
            if (*(void *)&v30[0]) {
              uhash_close(*(unsigned char **)&v30[0]);
            }
          }
          else if (v18 == v11)
          {
            uint64_t v18 = 0;
          }
          else
          {
            uint64_t v18 = v11;
          }
          *(void *)&long long v38 = &unk_1EDA4BE50;
          icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)&v39);
          icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v38);
        }
        uint64_t v10 = v27;
        uint64_t v8 = v28;
      }
      ures_close(v11);
      ures_close(v8);
      ures_close(v12);
      ures_close(v10);
    }
    if (BYTE4(v44[1])) {
      uprv_free(v44[0]);
    }
  }
}

icu::UnicodeString *icu::DateIntervalInfo::setIntervalPattern(uint64_t a1, UChar **a2, unsigned int a3, UChar **a4, int *a5)
{
  if (a3 == 11)
  {
    icu::DateIntervalInfo::setIntervalPatternInternally(a1, a2, 9u, a4, a5);
    a3 = 10;
  }
  else if ((a3 & 0xFFFFFFFD) == 5)
  {
    a3 = 5;
  }

  return icu::DateIntervalInfo::setIntervalPatternInternally(a1, a2, a3, a4, a5);
}

icu::UnicodeString *icu::DateIntervalInfo::setIntervalPatternInternally(uint64_t a1, UChar **a2, unsigned int a3, UChar **a4, int *a5)
{
  uint64_t result = (icu::UnicodeString *)icu::DateIntervalInfo::calendarFieldToIntervalIndex(a3, a5);
  if (*a5 <= 0)
  {
    unsigned int v10 = result;
    uint64_t v11 = uhash_get(**(void **)(a1 + 80), (uint64_t)a2);
    if (v11)
    {
      uint64_t v13 = (UChar **)(v11 + ((unint64_t)v10 << 6));
      return icu::UnicodeString::operator=(v13, a4);
    }
    else
    {
      uint64_t result = (icu::UnicodeString *)icu::UMemory::operator new[]((icu::UMemory *)0x250, v12);
      if (result)
      {
        *(_OWORD *)uint64_t result = xmmword_18CA92750;
        uint64_t v14 = (uint64_t)result + 16;
        uint64_t v15 = (char *)result + 16;
        int v16 = (_WORD *)((char *)result + 16);
        do
        {
          *(void *)int v16 = &unk_1EDA47700;
          _OWORD v16[4] = 2;
          v15 += 64;
          v16 += 32;
        }
        while (v16 != (_WORD *)((char *)result + 592));
        icu::UnicodeString::operator=((UChar **)(v14 + ((unint64_t)v10 << 6)), a4);
        int v17 = *(uint64_t **)(a1 + 80);
        uint64_t v18 = *v17;
        uint64_t v20 = (icu::UnicodeString *)icu::UMemory::operator new(v17, (icu::UMemory *)0x40, v19);
        uint64_t v21 = (uint64_t)v20;
        if (v20) {
          icu::UnicodeString::UnicodeString(v20, a2);
        }
        return (icu::UnicodeString *)uhash_put(v18, v21, v14, a5);
      }
      else
      {
        *a5 = 7;
      }
    }
  }
  return result;
}

icu::UnicodeString *icu::DateIntervalInfo::setFallbackIntervalPattern(icu::UnicodeString *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v5 = (uint64_t)this;
    if (*((__int16 *)a2 + 4) < 0)
    {
      int v7 = *((_DWORD *)a2 + 3);
      int v6 = v7 & (v7 >> 31);
    }
    else
    {
      int v6 = 0;
      int v7 = *((unsigned __int16 *)a2 + 4) >> 5;
    }
    int v8 = icu::UnicodeString::indexOf((uint64_t)a2, (uint64_t)a01_5, 0, 3, v6, v7 - v6);
    unsigned int v9 = *((unsigned __int16 *)a2 + 4);
    if ((v9 & 0x8000) != 0)
    {
      int v11 = *((_DWORD *)a2 + 3);
      int v10 = v11 & (v11 >> 31);
    }
    else
    {
      int v10 = 0;
      int v11 = v9 >> 5;
    }
    this = (icu::UnicodeString *)icu::UnicodeString::indexOf((uint64_t)a2, (uint64_t)&a01_5[3], 0, 3, v10, v11 - v10);
    if (v8 == -1 || this == -1)
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      if (v8 > (int)this) {
        *(unsigned char *)(v5 + 72) = 1;
      }
      return icu::UnicodeString::operator=((UChar **)(v5 + 8), (UChar **)a2);
    }
  }
  return this;
}

uint64_t icu::DateIntervalInfo::DateIntervalInfo(uint64_t this, uint64_t a2)
{
  *(void *)this = &unk_1EDA4BE18;
  *(void *)(this + 8) = &unk_1EDA47700;
  *(_WORD *)(this + 16) = 2;
  *(void *)(this + 80) = 0;
  return icu::DateIntervalInfo::operator=(this, a2);
}

{
  *(void *)this = &unk_1EDA4BE18;
  *(void *)(this + 8) = &unk_1EDA47700;
  *(_WORD *)(this + 16) = 2;
  *(void *)(this + 80) = 0;
  return icu::DateIntervalInfo::operator=(this, a2);
}

uint64_t icu::DateIntervalInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    UErrorCode v7 = U_ZERO_ERROR;
    icu::DateIntervalInfo::deleteHash(a1, *(uint64_t ***)(a1 + 80));
    inited = icu::DateIntervalInfo::initHash(v4, &v7);
    *(void *)(a1 + 80) = inited;
    icu::DateIntervalInfo::copyHash((uint64_t)inited, *(uint64_t ***)(a2 + 80), inited, (int *)&v7);
    if (v7 <= U_ZERO_ERROR)
    {
      icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    }
  }
  return a1;
}

void icu::DateIntervalInfo::deleteHash(uint64_t a1, uint64_t **a2)
{
  if (a2)
  {
    int v9 = -1;
    while (1)
    {
      uint64_t v4 = uhash_nextElement(*a2, &v9);
      if (!v4) {
        break;
      }
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        int v6 = *(void **)(v5 - 8);
        if (v6)
        {
          uint64_t v7 = (void)v6 << 6;
          do
          {
            icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(v5 - 64 + v7));
            v7 -= 64;
          }
          while (v7);
        }
        icu::UMemory::operator delete[]((void *)(v5 - 16));
      }
    }
    int v8 = *(unsigned char ***)(a1 + 80);
    if (v8)
    {
      if (*v8) {
        uhash_close(*v8);
      }
      icu::UMemory::operator delete(v8);
    }
  }
}

void icu::DateIntervalInfo::copyHash(uint64_t a1, uint64_t **a2, uint64_t *a3, int *a4)
{
  v23[8] = *(UChar **)MEMORY[0x1E4F143B8];
  if (*a4 <= 0)
  {
    int v22 = -1;
    if (a2)
    {
      do
      {
        uint64_t v7 = uhash_nextElement(*a2, &v22);
        if (!v7) {
          break;
        }
        uint64_t v10 = *(void *)(v7 + 8);
        int v9 = *(UChar ***)(v7 + 16);
        int v11 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x250, v8);
        if (!v11)
        {
          *a4 = 7;
          return;
        }
        *int v11 = xmmword_18CA92750;
        uint64_t v12 = (uint64_t)(v11 + 1);
        uint64_t v13 = v11 + 1;
        uint64_t v14 = v11 + 1;
        do
        {
          *(void *)uint64_t v14 = &unk_1EDA47700;
          *((_WORD *)v14 + 4) = 2;
          v13 += 4;
          v14 += 4;
        }
        while (v14 != v11 + 37);
        for (uint64_t i = 0; i != 576; i += 64)
          icu::UnicodeString::operator=((UChar **)(v12 + i), (UChar **)(v10 + i));
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v23, v9);
        uint64_t v16 = *a3;
        unint64_t v19 = (icu::UnicodeString *)icu::UMemory::operator new(v18, (icu::UMemory *)0x40, v17);
        uint64_t v20 = (uint64_t)v19;
        if (v19) {
          icu::UnicodeString::UnicodeString(v19, v23);
        }
        uhash_put(v16, v20, v12, a4);
        icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v23);
      }
      while (*a4 < 1);
    }
  }
}

uint64_t *icu::DateIntervalInfo::clone@<X0>(icu::DateIntervalInfo *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x58, a2);
  if (result)
  {
    *uint64_t result = (uint64_t)&unk_1EDA4BE18;
    result[1] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)result + 8) = 2;
    result[10] = 0;
    return (uint64_t *)icu::DateIntervalInfo::operator=((uint64_t)result, (uint64_t)this);
  }
  return result;
}

void icu::DateIntervalInfo::~DateIntervalInfo(uint64_t ***this)
{
  icu::DateIntervalInfo::deleteHash((uint64_t)this, this[10]);
  this[10] = 0;
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(this + 1));

  icu::UObject::~UObject((icu::UObject *)this);
}

{
  void *v1;
  uint64_t vars8;

  icu::DateIntervalInfo::~DateIntervalInfo(this);

  icu::UMemory::operator delete(v1);
}

BOOL icu::DateIntervalInfo::operator==(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 16);
  if (v4)
  {
    if ((*(_WORD *)(a2 + 16) & 1) == 0) {
      return 0;
    }
LABEL_13:
    if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72)) {
      return uhash_equals(**(void **)(a1 + 80), **(void **)(a2 + 80)) != 0;
    }
    return 0;
  }
  if ((v4 & 0x8000) != 0) {
    int v5 = *(_DWORD *)(a1 + 20);
  }
  else {
    int v5 = v4 >> 5;
  }
  BOOL result = 0;
  unsigned int v7 = *(unsigned __int16 *)(a2 + 16);
  if ((v7 & 0x8000u) == 0) {
    unsigned int v8 = v7 >> 5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a2 + 20);
  }
  if ((v7 & 1) == 0 && v5 == v8)
  {
    BOOL result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)(a2 + 8), v5);
    if (result) {
      goto LABEL_13;
    }
  }
  return result;
}

UChar **icu::DateIntervalInfo::getIntervalPattern(uint64_t a1, uint64_t a2, unsigned int a3, UChar **a4, int *a5)
{
  if (*a5 <= 0)
  {
    uint64_t v9 = uhash_get(**(void **)(a1 + 80), a2);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = icu::DateIntervalInfo::calendarFieldToIntervalIndex(a3, a5);
      if (*a5 <= 0)
      {
        unint64_t v12 = v10 + ((unint64_t)v11 << 6);
        if (*(unsigned __int16 *)(v12 + 8) >= 0x20u) {
          icu::UnicodeString::operator=(a4, (UChar **)v12);
        }
      }
    }
  }
  return a4;
}

uint64_t icu::DateIntervalInfo::calendarFieldToIntervalIndex(unsigned int a1, int *a2)
{
  if (*a2 > 0) {
    return 9;
  }
  if (a1 >= 0xF || ((0x7EA7u >> a1) & 1) == 0)
  {
    *a2 = 1;
    return 9;
  }
  return dword_18CA92834[a1];
}

uint64_t icu::DateIntervalInfo::getDefaultOrder(icu::DateIntervalInfo *this)
{
  return *((char *)this + 72);
}

UChar **icu::DateIntervalInfo::getFallbackIntervalPattern(UChar **this, UChar **a2)
{
  icu::UnicodeString::operator=(a2, this + 1);
  return a2;
}

void sub_18C92898C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4BE50;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 16));

  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
}

void sub_18C9289E0(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA4BE50;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 16));
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);

  icu::UMemory::operator delete(v3);
}

uint64_t icu::DateIntervalInfo::parseSkeleton(uint64_t this, const icu::UnicodeString *a2, int *a3)
{
  for (unint64_t i = 0; ; ++i)
  {
    int v4 = *(__int16 *)(this + 8);
    if (v4 < 0) {
      break;
    }
    if (i >= (unint64_t)*(unsigned __int16 *)(this + 8) >> 5) {
      return this;
    }
    unint64_t v5 = (unint64_t)*(unsigned __int16 *)(this + 8) >> 5;
LABEL_7:
    if (v5 <= i)
    {
      LOBYTE(v7) = -1;
    }
    else
    {
      if ((v4 & 2) != 0) {
        uint64_t v6 = this + 10;
      }
      else {
        uint64_t v6 = *(void *)(this + 24);
      }
      __int16 v7 = *(_WORD *)(v6 + 2 * i);
    }
    ++*((_DWORD *)a2 + (char)v7 - 65);
  }
  if ((uint64_t)i < *(int *)(this + 12))
  {
    unint64_t v5 = *(unsigned int *)(this + 12);
    goto LABEL_7;
  }
  return this;
}

BOOL icu::DateIntervalInfo::stringNumeric(icu::DateIntervalInfo *this, int a2, int a3)
{
  return a3 == 77 && ((int)this <= 2 && a2 > 2 || (int)this >= 3 && a2 < 3);
}

uint64_t icu::DateIntervalInfo::getBestSkeleton(uint64_t ***this, const icu::UnicodeString *a2, unsigned __int8 *a3)
{
  int v4 = (UChar **)a2;
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v76 = 0;
  memset(v75, 0, sizeof(v75));
  long long v69 = 0u;
  uint64_t v72 = 0;
  long long v71 = 0u;
  long long v70 = 0u;
  int v68 = (UChar *)&unk_1EDA47700;
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  int v7 = (__int16)v6;
  int32_t v8 = v6 >> 5;
  if (v7 >= 0) {
    int32_t v9 = v8;
  }
  else {
    int32_t v9 = *((_DWORD *)a2 + 3);
  }
  LOWORD(v69) = 2;
  if (icu::UnicodeString::doIndexOf((uint64_t)a2, 0x7Au, 0, v9) != -1) {
    goto LABEL_21;
  }
  unsigned int v10 = *((unsigned __int16 *)v4 + 4);
  int v11 = (__int16)v10;
  unsigned int v12 = v10 >> 5;
  int32_t v13 = v11 >= 0 ? v12 : *((_DWORD *)v4 + 3);
  if (icu::UnicodeString::doIndexOf((uint64_t)v4, 0x6Bu, 0, v13) != -1) {
    goto LABEL_21;
  }
  unsigned int v14 = *((unsigned __int16 *)v4 + 4);
  int v15 = (__int16)v14;
  unsigned int v16 = v14 >> 5;
  int32_t v17 = v15 >= 0 ? v16 : *((_DWORD *)v4 + 3);
  if (icu::UnicodeString::doIndexOf((uint64_t)v4, 0x4Bu, 0, v17) != -1) {
    goto LABEL_21;
  }
  unsigned int v18 = *((unsigned __int16 *)v4 + 4);
  int v19 = (__int16)v18;
  unsigned int v20 = v18 >> 5;
  int32_t v21 = v19 >= 0 ? v20 : *((_DWORD *)v4 + 3);
  if (icu::UnicodeString::doIndexOf((uint64_t)v4, 0x61u, 0, v21) == -1
    && ((v22 = *((unsigned __int16 *)v4 + 4), int v23 = (__int16)v22, v24 = v22 >> 5, v23 >= 0)
      ? (int32_t v25 = v24)
      : (int32_t v25 = *((_DWORD *)v4 + 3)),
        icu::UnicodeString::doIndexOf((uint64_t)v4, 0x62u, 0, v25) == -1))
  {
    unsigned int v50 = 1;
  }
  else
  {
LABEL_21:
    icu::UnicodeString::operator=(&v68, v4);
    icu::UnicodeString::UnicodeString((uint64_t)v73, 122);
    icu::UnicodeString::UnicodeString((uint64_t)&v65, 118);
    if ((v69 & 0x8000u) == 0) {
      int32_t v27 = (unsigned __int16)v69 >> 5;
    }
    else {
      int32_t v27 = DWORD1(v69);
    }
    if ((SWORD4(v73[0]) & 0x8000u) == 0) {
      uint64_t v28 = WORD4(v73[0]) >> 5;
    }
    else {
      uint64_t v28 = HIDWORD(v73[0]);
    }
    int v29 = v66 >> 5;
    if ((v66 & 0x8000u) != 0) {
      int v29 = v67;
    }
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v68, 0, v27, (const icu::UnicodeString *)v73, 0, v28, (const icu::UnicodeString *)&v65, 0, v29);
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v65);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v73);
    icu::UnicodeString::UnicodeString((uint64_t)v73, 107);
    icu::UnicodeString::UnicodeString((uint64_t)&v65, 72);
    if ((v69 & 0x8000u) == 0) {
      int32_t v32 = (unsigned __int16)v69 >> 5;
    }
    else {
      int32_t v32 = DWORD1(v69);
    }
    if ((SWORD4(v73[0]) & 0x8000u) == 0) {
      uint64_t v33 = WORD4(v73[0]) >> 5;
    }
    else {
      uint64_t v33 = HIDWORD(v73[0]);
    }
    int v34 = v66 >> 5;
    if ((v66 & 0x8000u) != 0) {
      int v34 = v67;
    }
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v68, 0, v32, (const icu::UnicodeString *)v73, 0, v33, (const icu::UnicodeString *)&v65, 0, v34);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v65);
    icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v73);
    icu::UnicodeString::UnicodeString((uint64_t)v73, 75);
    icu::UnicodeString::UnicodeString((uint64_t)&v65, 104);
    if ((v69 & 0x8000u) == 0) {
      int32_t v37 = (unsigned __int16)v69 >> 5;
    }
    else {
      int32_t v37 = DWORD1(v69);
    }
    if ((SWORD4(v73[0]) & 0x8000u) == 0) {
      uint64_t v38 = WORD4(v73[0]) >> 5;
    }
    else {
      uint64_t v38 = HIDWORD(v73[0]);
    }
    int v39 = v66 >> 5;
    if ((v66 & 0x8000u) != 0) {
      int v39 = v67;
    }
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v68, 0, v37, (const icu::UnicodeString *)v73, 0, v38, (const icu::UnicodeString *)&v65, 0, v39);
    icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&v65);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v73);
    icu::UnicodeString::UnicodeString((uint64_t)v73, 97);
    int32_t v65 = &unk_1EDA47700;
    unsigned __int16 v66 = 2;
    if ((v69 & 0x8000u) == 0) {
      int32_t v42 = (unsigned __int16)v69 >> 5;
    }
    else {
      int32_t v42 = DWORD1(v69);
    }
    if ((SWORD4(v73[0]) & 0x8000u) == 0) {
      uint64_t v43 = WORD4(v73[0]) >> 5;
    }
    else {
      uint64_t v43 = HIDWORD(v73[0]);
    }
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v68, 0, v42, (const icu::UnicodeString *)v73, 0, v43, (const icu::UnicodeString *)&v65, 0, 0);
    icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v65);
    icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)v73);
    icu::UnicodeString::UnicodeString((uint64_t)v73, 98);
    int32_t v65 = &unk_1EDA47700;
    unsigned __int16 v66 = 2;
    if ((v69 & 0x8000u) == 0) {
      int32_t v46 = (unsigned __int16)v69 >> 5;
    }
    else {
      int32_t v46 = DWORD1(v69);
    }
    if ((SWORD4(v73[0]) & 0x8000u) == 0) {
      uint64_t v47 = WORD4(v73[0]) >> 5;
    }
    else {
      uint64_t v47 = HIDWORD(v73[0]);
    }
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v68, 0, v46, (const icu::UnicodeString *)v73, 0, v47, (const icu::UnicodeString *)&v65, 0, 0);
    icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v65);
    icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)v73);
    unsigned int v50 = 0;
    int v4 = &v68;
  }
  icu::DateIntervalInfo::parseSkeleton((uint64_t)v4, (const icu::UnicodeString *)v75, v26);
  uint64_t v51 = 0;
  *a3 = 0;
  LODWORD(v65) = -1;
  int v52 = 56632;
  while (1)
  {
    uint64_t Element = uhash_nextElement(*this[10], (int *)&v65);
    if (!Element) {
      break;
    }
    uint64_t v55 = *(void *)(Element + 16);
    memset(v73, 0, sizeof(v73));
    uint64_t v74 = 0;
    icu::DateIntervalInfo::parseSkeleton(v55, (const icu::UnicodeString *)v73, v54);
    uint64_t v56 = 0;
    int v57 = 0;
    signed __int8 v58 = 1;
    do
    {
      int v59 = *(_DWORD *)((char *)v75 + v56);
      int v60 = *(_DWORD *)((char *)v73 + v56);
      int v61 = v59 - v60;
      if (v59 != v60)
      {
        if (v59 && v60)
        {
          if (v56 != 48 || (v59 <= 2 ? (BOOL v62 = v60 <= 2) : (BOOL v62 = 1), v62 && (v59 < 3 || v60 > 2)))
          {
            if (v61 < 0) {
              int v61 = v60 - v59;
            }
            v57 += v61;
          }
          else
          {
            v57 += 256;
          }
        }
        else
        {
          v57 += 4096;
          signed __int8 v58 = -1;
        }
      }
      v56 += 4;
    }
    while (v56 != 232);
    if (v57 >= v52)
    {
      if (!v57) {
        goto LABEL_81;
      }
    }
    else
    {
      int v52 = v57;
      uint64_t v51 = v55;
LABEL_81:
      if (!v57) {
        signed __int8 v58 = 0;
      }
      *a3 = v58;
      if (!v57) {
        break;
      }
    }
  }
  if (*a3 == 255) {
    uint64_t v63 = 1;
  }
  else {
    uint64_t v63 = v50;
  }
  if ((v63 & 1) == 0)
  {
    uint64_t v63 = 2;
    *a3 = 2;
  }
  icu::UnicodeString::~UnicodeString((void *)v63, (icu::UnicodeString *)&v68);
  return v51;
}

uint64_t sub_18C9290CC(icu::UnicodeString *this, icu::UnicodeString *a2)
{
  unint64_t v4 = 0;
  while (1)
  {
    unsigned int v5 = *((unsigned __int16 *)this + 4);
    if (v5)
    {
      uint64_t result = *((_WORD *)a2 + 4) & 1;
      goto LABEL_13;
    }
    int v6 = (v5 & 0x8000) != 0 ? *((_DWORD *)this + 3) : v5 >> 5;
    uint64_t result = 0;
    unsigned int v8 = *((unsigned __int16 *)a2 + 4);
    unsigned int v9 = (v8 & 0x8000u) == 0 ? v8 >> 5 : *((_DWORD *)a2 + 3);
    if ((v8 & 1) != 0 || v6 != v9) {
      return result;
    }
    uint64_t result = icu::UnicodeString::doEquals(this, a2, v6);
LABEL_13:
    if (v4 <= 7)
    {
      ++v4;
      a2 = (icu::UnicodeString *)((char *)a2 + 64);
      this = (icu::UnicodeString *)((char *)this + 64);
      if (result) {
        continue;
      }
    }
    return result;
  }
}

void *sub_18C929174(void *result, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  __s1 = a2;
  if (*a5 > 0) {
    return result;
  }
  uint64_t v7 = (uint64_t)result;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v12, a3, a5);
  if (*a5 > 0) {
    return result;
  }
  uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v12, 0, (const char **)&__s1, a3);
  if (!result) {
    return result;
  }
  unsigned int v8 = 1;
  while (1)
  {
    if (strcmp(__s1, "intervalFormats")) {
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3) == 3) {
      break;
    }
    if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3) == 2)
    {
      uint64_t v18 = 0;
      memset(v17, 0, sizeof(v17));
      uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v17, a3, a5);
      if (*a5 <= 0)
      {
        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v17, 0, (const char **)&__s1, a3);
        if (result)
        {
          unsigned int v11 = 1;
          do
          {
            if (sub_18C9295C0(v7, __s1))
            {
              if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3) == 2)
              {
                uint64_t result = sub_18C929650((void *)v7, __s1, a3, a5);
                if (*a5 > 0) {
                  break;
                }
              }
            }
            uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v17, v11++, (const char **)&__s1, a3);
          }
          while (result);
        }
      }
      return result;
    }
LABEL_9:
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v12, v8++, (const char **)&__s1, a3);
    if (!result) {
      return result;
    }
  }
  int v16 = 0;
  uint64_t v15 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 40))(a3, &v16, a5);
  icu::UnicodeString::UnicodeString(v17, 1, &v15);
  unint64_t v9 = *a5;
  if ((int)v9 <= 0)
  {
    __int16 v10 = (*(_WORD *)(v7 + 24) & 1) != 0 ? 2 : *(_WORD *)(v7 + 24) & 0x1F;
    *(_WORD *)(v7 + 24) = v10;
    sub_18C929480((uint64_t)v17, v7 + 16, a5);
    unint64_t v9 = *a5;
    if ((int)v9 >= 1) {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)(v7 + 16));
    }
  }
  return icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)v17);
}

uint64_t sub_18C929480(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v5 = result;
    uint64_t result = icu::UnicodeString::doEqualsSubstring(result, 0, 17, (uint64_t)L"/LOCALE/calendar//intervalFormats", 0, 17);
    if (!result) {
      goto LABEL_11;
    }
    unsigned int v6 = *(unsigned __int16 *)(v5 + 8);
    int v7 = (__int16)v6;
    unsigned int v8 = v6 >> 5;
    if (v7 < 0) {
      unsigned int v8 = *(_DWORD *)(v5 + 12);
    }
    uint64_t result = icu::UnicodeString::doEqualsSubstring(v5, v8 - 16, 16, (uint64_t)L"/intervalFormats", 0, 16);
    if (result)
    {
      unsigned int v9 = *(unsigned __int16 *)(v5 + 8);
      int v10 = (__int16)v9;
      unsigned int v11 = v9 >> 5;
      if (v10 < 0) {
        unsigned int v11 = *(_DWORD *)(v5 + 12);
      }
      unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v5 + 24);
      return v12(v5, 17, v11 - 16, a2);
    }
    else
    {
LABEL_11:
      *a3 = 3;
    }
  }
  return result;
}

uint64_t sub_18C9295C0(uint64_t a1, unsigned char *a2)
{
  if (!*(unsigned char *)(a1 + 80)) {
    return 1;
  }
  char v2 = *a2;
  if (!*a2) {
    return 0;
  }
  int v3 = 0;
  int v4 = 0;
  int v5 = 0;
  unsigned int v6 = a2 + 1;
  do
  {
    if (v2 == 121) {
      int v7 = v5 + 1;
    }
    else {
      int v7 = v5;
    }
    if (v2 == 100) {
      int v8 = v5;
    }
    else {
      int v8 = v7;
    }
    if (v2 == 100) {
      int v9 = v3 + 1;
    }
    else {
      int v9 = v3;
    }
    if (v2 == 77) {
      ++v4;
    }
    else {
      int v5 = v8;
    }
    if (v2 != 77) {
      int v3 = v9;
    }
    int v10 = *v6++;
    char v2 = v10;
  }
  while (v10);
  if (v4 > 2) {
    return 0;
  }
  if ((v5 < 1 || v4 <= 0) && (v4 < 1 ? (BOOL v11 = v5 < 1) : (BOOL v11 = 0), v11 || v3 <= 0)) {
    return 0;
  }
  else {
    return 1;
  }
}

void *sub_18C929650(void *result, char *a2, icu::ResourceValue *a3, int *a4)
{
  unsigned int v12 = a2;
  if (*a4 <= 0)
  {
    uint64_t v7 = (uint64_t)result;
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v10, a3, a4);
    if (*a4 <= 0)
    {
      uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v10, 0, (const char **)&v12, a3);
      if (result)
      {
        unsigned int v8 = 1;
        do
        {
          if (!(*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3))
          {
            signed int v9 = sub_18C929788(v7, (unsigned __int8 *)v12);
            if (v9 <= 23)
            {
              uint64_t result = sub_18C929824(v7, (uint64_t)a2, v9, (uint64_t)a3, a4);
              if (*a4 > 0) {
                break;
              }
            }
          }
          uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v10, v8++, (const char **)&v12, a3);
        }
        while (result);
      }
    }
  }
  return result;
}

uint64_t sub_18C929788(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (!*a2 || a2[1]) {
    return 24;
  }
  if (*a2 <= 0x60u)
  {
    if (v2 != 66)
    {
      if (v2 == 71) {
        return 0;
      }
      if (v2 == 77) {
        return 2;
      }
      goto LABEL_16;
    }
    return 9;
  }
  switch(v2)
  {
    case 'a':
      return 9;
    case 'd':
      return 5;
    case 'y':
      return 1;
  }
LABEL_16:
  if ((v2 & 0xFFFFFFDF) == 0x48) {
    return 10;
  }
  if (v2 != 109) {
    return 24;
  }
  return 12;
}

void *sub_18C929824(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int *a5)
{
  v25[9] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t result = (void *)icu::DateIntervalInfo::calendarFieldToIntervalIndex(a3, a5);
  if (*a5 <= 0)
  {
    unsigned int v11 = result;
    memset(v25, 0, 64);
    icu::UnicodeString::UnicodeString(v25, a2, 0xFFFFFFFFLL, 0);
    uint64_t v12 = uhash_get(**(void **)(*(void *)(a1 + 8) + 80), (uint64_t)v25);
    if (!v12
      || (uint64_t v13 = (void *)*(unsigned __int16 *)(v12 + ((unint64_t)v11 << 6) + 8), v13 <= 0x1F))
    {
      memset(v24, 0, sizeof(v24));
      LODWORD(v19) = 0;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, void **, int *))(*(void *)a4 + 32))(a4, &v19, a5);
      icu::UnicodeString::UnicodeString(v24, 1, &v21);
      if (*(unsigned char *)(a1 + 81))
      {
        icu::UnicodeString::UnicodeString((uint64_t)&v21, 8207);
        uint64_t v19 = &unk_1EDA47700;
        __int16 v20 = 2;
        if (SLOWORD(v24[1]) >= 0) {
          int32_t v14 = LOWORD(v24[1]) >> 5;
        }
        else {
          int32_t v14 = HIDWORD(v24[1]);
        }
        if ((v22 & 0x8000u) == 0) {
          uint64_t v15 = v22 >> 5;
        }
        else {
          uint64_t v15 = v23;
        }
        icu::UnicodeString::findAndReplace((icu::UnicodeString *)v24, 0, v14, (const icu::UnicodeString *)&v21, 0, v15, (const icu::UnicodeString *)&v19, 0, 0);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v19);
        icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v21);
      }
      icu::DateIntervalInfo::setIntervalPatternInternally(*(void *)(a1 + 8), v25, a3, v24, a5);
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v24);
    }
    return icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v25);
  }
  return result;
}

void *icu::DateTimePatternGenerator::getStaticClassID(icu::DateTimePatternGenerator *this)
{
  return &unk_1E91921F8;
}

void *icu::DateTimePatternGenerator::getDynamicClassID(icu::DateTimePatternGenerator *this)
{
  return &unk_1E91921F8;
}

void *sub_18C929A4C()
{
  return &unk_1E91921F9;
}

void *sub_18C929A58()
{
  return &unk_1E91921FA;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::createInstance(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  Default = icu::Locale::getDefault(this);

  return icu::DateTimePatternGenerator::createInstance((const char **)Default, (UErrorCode *)this, 0);
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::createInstance(const char **this, UErrorCode *a2, UErrorCode *a3)
{
  int v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0) {
    return 0;
  }
  int v5 = (int)a3;
  unsigned int v8 = (icu::DateTimePatternGenerator *)icu::UMemory::operator new(v3, (icu::UMemory *)0x12C0, (unint64_t)a2);
  if (!v8)
  {
    if (*(int *)a2 <= 0)
    {
      uint64_t result = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
    return 0;
  }
  uint64_t result = icu::DateTimePatternGenerator::DateTimePatternGenerator(v8, this, a2, v5);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(icu::DateTimePatternGenerator *))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::createInstanceNoStdPat(const char **this, UErrorCode *a2, UErrorCode *a3)
{
  int v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0) {
    return 0;
  }
  uint64_t v7 = (icu::DateTimePatternGenerator *)icu::UMemory::operator new(v3, (icu::UMemory *)0x12C0, (unint64_t)a2);
  if (!v7)
  {
    if (*(int *)a2 <= 0)
    {
      uint64_t result = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
    return 0;
  }
  uint64_t result = icu::DateTimePatternGenerator::DateTimePatternGenerator(v7, this, a2, 1);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(icu::DateTimePatternGenerator *))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::createEmptyInstance(UErrorCode *this, UErrorCode *a2)
{
  int v2 = (uint64_t *)*(unsigned int *)this;
  if ((int)v2 > 0) {
    return 0;
  }
  int v5 = (icu::DateTimePatternGenerator *)icu::UMemory::operator new(v2, (icu::UMemory *)0x12C0, (unint64_t)a2);
  if (!v5)
  {
    if (*(int *)this <= 0)
    {
      uint64_t result = 0;
      *this = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
    return 0;
  }
  uint64_t result = icu::DateTimePatternGenerator::DateTimePatternGenerator(v5, this);
  if (*(int *)this >= 1)
  {
    (*(void (**)(icu::DateTimePatternGenerator *))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::DateTimePatternGenerator(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  *(void *)this = &unk_1EDA4BEB0;
  icu::Locale::Locale((icu::DateTimePatternGenerator *)((char *)this + 8));
  uint64_t v5 = 264;
  do
  {
    unsigned int v6 = (char *)this + v5;
    *(void *)unsigned int v6 = &unk_1EDA47700;
    *((_WORD *)v6 + 4) = 2;
    v5 += 64;
  }
  while (v6 + 64 != (char *)this + 1288);
  uint64_t v7 = 1288;
  do
  {
    unsigned int v8 = (char *)this + v7;
    *(void *)unsigned int v8 = &unk_1EDA47700;
    *((_WORD *)v8 + 4) = 2;
    v7 += 64;
  }
  while (v8 + 64 != (char *)this + 4360);
  uint64_t v9 = 4360;
  do
  {
    int v10 = (char *)this + v9;
    *(void *)int v10 = &unk_1EDA47700;
    *((_WORD *)v10 + 4) = 2;
    v9 += 64;
  }
  while (v10 + 64 != (char *)this + 4616);
  *((void *)this + 577) = &unk_1EDA47700;
  *((_WORD *)this + 2312) = 2;
  *(_OWORD *)((char *)this + 4680) = 0u;
  *((void *)this + 587) = &unk_1EDA47700;
  *((_WORD *)this + 2352) = 2;
  *((_WORD *)this + 2380) = 0;
  *((_DWORD *)this + 1198) = 0;
  unsigned int v11 = icu::UMemory::operator new((uint64_t *)0x1248, (icu::UMemory *)0xC90, v4);
  if (v11)
  {
    *unsigned int v11 = (uint64_t)&unk_1EDA4BF48;
    int32_t v14 = v11 + 1;
    uint64_t v13 = v11 + 401;
    uint64_t v15 = v11 + 1;
    do
    {
      *uint64_t v15 = (uint64_t)&unk_1EDA47700;
      *((_WORD *)v15 + 4) = 2;
      v14 += 8;
      v15 += 8;
    }
    while (v15 != v13);
    *uint64_t v13 = 0;
  }
  *((void *)this + 29) = v11;
  int v16 = icu::UMemory::operator new(v13, (icu::UMemory *)0x98, v12);
  if (v16)
  {
    *int v16 = (uint64_t)&unk_1EDA4BF28;
    uint64_t v18 = v16 + 1;
    v16[1] = (uint64_t)&unk_1EDA4BF90;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 8) = 0u;
    *((unsigned char *)v16 + 144) = 0;
  }
  *((void *)this + 30) = v16;
  uint64_t v19 = icu::UMemory::operator new(v18, (icu::UMemory *)0x10, v17);
  if (v19) {
    *uint64_t v19 = (uint64_t)&unk_1EDA4C0A0;
  }
  *((void *)this + 31) = v19;
  unsigned __int16 v22 = icu::UMemory::operator new(v21, (icu::UMemory *)0x1B0, v20);
  if (v22)
  {
    uint64_t *v22 = (uint64_t)&unk_1EDA4BF08;
    *(_OWORD *)(v22 + 3) = 0u;
    *(_OWORD *)(v22 + 5) = 0u;
    *(_OWORD *)(v22 + 7) = 0u;
    *(_OWORD *)(v22 + 9) = 0u;
    *(_OWORD *)(v22 + 11) = 0u;
    *(_OWORD *)(v22 + 13) = 0u;
    *(_OWORD *)(v22 + 15) = 0u;
    *(_OWORD *)(v22 + 17) = 0u;
    *(_OWORD *)(v22 + 19) = 0u;
    *(_OWORD *)(v22 + 21) = 0u;
    *(_OWORD *)(v22 + 23) = 0u;
    *(_OWORD *)(v22 + 25) = 0u;
    *(_OWORD *)(v22 + 27) = 0u;
    *(_OWORD *)(v22 + 29) = 0u;
    *(_OWORD *)(v22 + 31) = 0u;
    *(_OWORD *)(v22 + 1) = 0u;
    *(_OWORD *)(v22 + 33) = 0u;
    *(_OWORD *)(v22 + 35) = 0u;
    *(_OWORD *)(v22 + 37) = 0u;
    *(_OWORD *)(v22 + 39) = 0u;
    *(_OWORD *)(v22 + 41) = 0u;
    *(_OWORD *)(v22 + 43) = 0u;
    *(_OWORD *)(v22 + 45) = 0u;
    *(_OWORD *)(v22 + 47) = 0u;
    *(_OWORD *)(v22 + 49) = 0u;
    *(_OWORD *)(v22 + 51) = 0u;
    *((unsigned char *)v22 + 424) = 1;
  }
  *((void *)this + 32) = v22;
  if (!*((void *)this + 29) || !*((void *)this + 30) || !v22 || !*((void *)this + 31))
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    *((_DWORD *)this + 1198) = 7;
  }
  return this;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::DateTimePatternGenerator(icu::DateTimePatternGenerator *this, const char **a2, UErrorCode *a3, int a4)
{
  *(void *)this = &unk_1EDA4BEB0;
  icu::Locale::Locale((icu::DateTimePatternGenerator *)((char *)this + 8), (uint64_t)a2);
  uint64_t v9 = 264;
  do
  {
    int v10 = (char *)this + v9;
    *(void *)int v10 = &unk_1EDA47700;
    *((_WORD *)v10 + 4) = 2;
    v9 += 64;
  }
  while (v10 + 64 != (char *)this + 1288);
  uint64_t v11 = 1288;
  do
  {
    unint64_t v12 = (char *)this + v11;
    *(void *)unint64_t v12 = &unk_1EDA47700;
    *((_WORD *)v12 + 4) = 2;
    v11 += 64;
  }
  while (v12 + 64 != (char *)this + 4360);
  uint64_t v13 = 4360;
  do
  {
    int32_t v14 = (char *)this + v13;
    *(void *)int32_t v14 = &unk_1EDA47700;
    *((_WORD *)v14 + 4) = 2;
    v13 += 64;
  }
  while (v14 + 64 != (char *)this + 4616);
  *((void *)this + 577) = &unk_1EDA47700;
  *((_WORD *)this + 2312) = 2;
  *(_OWORD *)((char *)this + 4680) = 0u;
  *((void *)this + 587) = &unk_1EDA47700;
  *((_WORD *)this + 2352) = 2;
  *((_WORD *)this + 2380) = 0;
  *((_DWORD *)this + 1198) = 0;
  uint64_t v15 = icu::UMemory::operator new((uint64_t *)0x1248, (icu::UMemory *)0xC90, v8);
  if (v15)
  {
    *uint64_t v15 = (uint64_t)&unk_1EDA4BF48;
    uint64_t v18 = v15 + 1;
    unint64_t v17 = v15 + 401;
    uint64_t v19 = v15 + 1;
    do
    {
      *uint64_t v19 = (uint64_t)&unk_1EDA47700;
      *((_WORD *)v19 + 4) = 2;
      v18 += 8;
      v19 += 8;
    }
    while (v19 != v17);
    *unint64_t v17 = 0;
  }
  *((void *)this + 29) = v15;
  unint64_t v20 = icu::UMemory::operator new(v17, (icu::UMemory *)0x98, v16);
  if (v20)
  {
    uint64_t *v20 = (uint64_t)&unk_1EDA4BF28;
    unsigned __int16 v22 = v20 + 1;
    v20[1] = (uint64_t)&unk_1EDA4BF90;
    *((_OWORD *)v20 + 5) = 0u;
    *((_OWORD *)v20 + 6) = 0u;
    *((_OWORD *)v20 + 7) = 0u;
    *((_OWORD *)v20 + 8) = 0u;
    *((unsigned char *)v20 + 144) = 0;
  }
  *((void *)this + 30) = v20;
  unsigned int v23 = icu::UMemory::operator new(v22, (icu::UMemory *)0x10, v21);
  if (v23) {
    *unsigned int v23 = (uint64_t)&unk_1EDA4C0A0;
  }
  *((void *)this + 31) = v23;
  uint64_t v26 = icu::UMemory::operator new(v25, (icu::UMemory *)0x1B0, v24);
  if (v26)
  {
    *uint64_t v26 = (uint64_t)&unk_1EDA4BF08;
    *(_OWORD *)(v26 + 3) = 0u;
    *(_OWORD *)(v26 + 5) = 0u;
    *(_OWORD *)(v26 + 7) = 0u;
    *(_OWORD *)(v26 + 9) = 0u;
    *(_OWORD *)(v26 + 11) = 0u;
    *(_OWORD *)(v26 + 13) = 0u;
    *(_OWORD *)(v26 + 15) = 0u;
    *(_OWORD *)(v26 + 17) = 0u;
    *(_OWORD *)(v26 + 19) = 0u;
    *(_OWORD *)(v26 + 21) = 0u;
    *(_OWORD *)(v26 + 23) = 0u;
    *(_OWORD *)(v26 + 25) = 0u;
    *(_OWORD *)(v26 + 27) = 0u;
    *(_OWORD *)(v26 + 29) = 0u;
    *(_OWORD *)(v26 + 31) = 0u;
    *(_OWORD *)(v26 + 1) = 0u;
    *(_OWORD *)(v26 + 33) = 0u;
    *(_OWORD *)(v26 + 35) = 0u;
    *(_OWORD *)(v26 + 37) = 0u;
    *(_OWORD *)(v26 + 39) = 0u;
    *(_OWORD *)(v26 + 41) = 0u;
    *(_OWORD *)(v26 + 43) = 0u;
    *(_OWORD *)(v26 + 45) = 0u;
    *(_OWORD *)(v26 + 47) = 0u;
    *(_OWORD *)(v26 + 49) = 0u;
    *(_OWORD *)(v26 + 51) = 0u;
    *((unsigned char *)v26 + 424) = 1;
  }
  *((void *)this + 32) = v26;
  if (*((void *)this + 29) && *((void *)this + 30) && v26 && *((void *)this + 31))
  {
    icu::DateTimePatternGenerator::initData(this, a2, a3, a4);
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    *((_DWORD *)this + 1198) = 7;
  }
  return this;
}

void icu::DateTimePatternGenerator::initData(icu::DateTimePatternGenerator *this, const char **a2, UErrorCode *a3, int a4)
{
  *(_OWORD *)((char *)this + 4680) = 0u;
  icu::DateTimePatternGenerator::addCanonicalItems((unsigned int *)this, a3);
  if (!a4) {
    icu::DateTimePatternGenerator::addICUPatterns(this, a2, a3);
  }
  icu::DateTimePatternGenerator::addCLDRData((unsigned char ***)this, (char **)a2, a3);
  icu::DateTimePatternGenerator::setDateTimeFromCalendar(this, (const icu::Locale *)a2, a3);
  icu::DateTimePatternGenerator::setDecimalSymbols(this, (const icu::Locale *)a2, a3);
  if (*(int *)a3 <= 0)
  {
    if (atomic_load_explicit(&dword_1EB20B718, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit(&dword_1EB20B718))
    {
      if (dword_1EB20B71C >= 1) {
        *a3 = dword_1EB20B71C;
      }
    }
    else
    {
      icu::DateTimePatternGenerator::loadAllowedHourFormatsData((icu::DateTimePatternGenerator *)a3, v8);
      dword_1EB20B71C = *a3;
      icu::umtx_initImplPostInit((unsigned int *)&dword_1EB20B718);
    }
  }
  icu::DateTimePatternGenerator::getAllowedHourFormats(this, (char **)a2, a3);
  *((UErrorCode *)this + 1198) = *a3;
}

uint64_t icu::DateTimePatternGenerator::DateTimePatternGenerator(icu::DateTimePatternGenerator *this, const icu::DateTimePatternGenerator *a2)
{
  *(void *)this = &unk_1EDA4BEB0;
  icu::Locale::Locale((icu::DateTimePatternGenerator *)((char *)this + 8));
  uint64_t v5 = 264;
  do
  {
    unsigned int v6 = (char *)this + v5;
    *(void *)unsigned int v6 = &unk_1EDA47700;
    *((_WORD *)v6 + 4) = 2;
    v5 += 64;
  }
  while (v6 + 64 != (char *)this + 1288);
  uint64_t v7 = 1288;
  do
  {
    unint64_t v8 = (char *)this + v7;
    *(void *)unint64_t v8 = &unk_1EDA47700;
    *((_WORD *)v8 + 4) = 2;
    v7 += 64;
  }
  while (v8 + 64 != (char *)this + 4360);
  uint64_t v9 = 4360;
  do
  {
    int v10 = (char *)this + v9;
    *(void *)int v10 = &unk_1EDA47700;
    *((_WORD *)v10 + 4) = 2;
    v9 += 64;
  }
  while (v10 + 64 != (char *)this + 4616);
  *((void *)this + 577) = &unk_1EDA47700;
  *((_WORD *)this + 2312) = 2;
  *(_OWORD *)((char *)this + 4680) = 0u;
  *((void *)this + 587) = &unk_1EDA47700;
  *((_WORD *)this + 2352) = 2;
  *((_WORD *)this + 2380) = 0;
  *((_DWORD *)this + 1198) = 0;
  uint64_t v11 = icu::UMemory::operator new((uint64_t *)0x1248, (icu::UMemory *)0xC90, v4);
  if (v11)
  {
    *uint64_t v11 = (uint64_t)&unk_1EDA4BF48;
    int32_t v14 = v11 + 1;
    uint64_t v13 = v11 + 401;
    uint64_t v15 = v11 + 1;
    do
    {
      *uint64_t v15 = (uint64_t)&unk_1EDA47700;
      *((_WORD *)v15 + 4) = 2;
      v14 += 8;
      v15 += 8;
    }
    while (v15 != v13);
    *uint64_t v13 = 0;
  }
  *((void *)this + 29) = v11;
  unint64_t v16 = icu::UMemory::operator new(v13, (icu::UMemory *)0x98, v12);
  if (v16)
  {
    *unint64_t v16 = (uint64_t)&unk_1EDA4BF28;
    uint64_t v18 = v16 + 1;
    v16[1] = (uint64_t)&unk_1EDA4BF90;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 8) = 0u;
    *((unsigned char *)v16 + 144) = 0;
  }
  *((void *)this + 30) = v16;
  uint64_t v19 = icu::UMemory::operator new(v18, (icu::UMemory *)0x10, v17);
  if (v19) {
    *uint64_t v19 = (uint64_t)&unk_1EDA4C0A0;
  }
  *((void *)this + 31) = v19;
  unsigned __int16 v22 = icu::UMemory::operator new(v21, (icu::UMemory *)0x1B0, v20);
  if (v22)
  {
    uint64_t *v22 = (uint64_t)&unk_1EDA4BF08;
    *(_OWORD *)(v22 + 3) = 0u;
    *(_OWORD *)(v22 + 5) = 0u;
    *(_OWORD *)(v22 + 7) = 0u;
    *(_OWORD *)(v22 + 9) = 0u;
    *(_OWORD *)(v22 + 11) = 0u;
    *(_OWORD *)(v22 + 13) = 0u;
    *(_OWORD *)(v22 + 15) = 0u;
    *(_OWORD *)(v22 + 17) = 0u;
    *(_OWORD *)(v22 + 19) = 0u;
    *(_OWORD *)(v22 + 21) = 0u;
    *(_OWORD *)(v22 + 23) = 0u;
    *(_OWORD *)(v22 + 25) = 0u;
    *(_OWORD *)(v22 + 27) = 0u;
    *(_OWORD *)(v22 + 29) = 0u;
    *(_OWORD *)(v22 + 31) = 0u;
    *(_OWORD *)(v22 + 1) = 0u;
    *(_OWORD *)(v22 + 33) = 0u;
    *(_OWORD *)(v22 + 35) = 0u;
    *(_OWORD *)(v22 + 37) = 0u;
    *(_OWORD *)(v22 + 39) = 0u;
    *(_OWORD *)(v22 + 41) = 0u;
    *(_OWORD *)(v22 + 43) = 0u;
    *(_OWORD *)(v22 + 45) = 0u;
    *(_OWORD *)(v22 + 47) = 0u;
    *(_OWORD *)(v22 + 49) = 0u;
    *(_OWORD *)(v22 + 51) = 0u;
    *((unsigned char *)v22 + 424) = 1;
  }
  *((void *)this + 32) = v22;
  if (!*((void *)this + 29) || !*((void *)this + 30) || !v22 || !*((void *)this + 31)) {
    *((_DWORD *)this + 1198) = 7;
  }

  return icu::DateTimePatternGenerator::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::DateTimePatternGenerator::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    *(_DWORD *)(a1 + 4792) = *(_DWORD *)(a2 + 4792);
    icu::Locale::operator=((icu::Locale *)(a1 + 8), a2 + 8);
    *(_WORD *)(a1 + 4760) = *(_WORD *)(a2 + 4760);
    for (uint64_t i = 1191; i != 1198; ++i)
      *(_DWORD *)(a1 + 4 * i) = *(_DWORD *)(a2 + 4 * i);
    uint64_t v5 = *(void *)(a2 + 232);
    uint64_t v6 = *(void *)(a1 + 232);
    for (uint64_t j = 8; j != 3208; j += 64)
      icu::UnicodeString::operator=((UChar **)(v6 + j), (UChar **)(v5 + j));
    uint64_t v8 = 0;
    *(void *)(v6 + 3208) = *(void *)(v5 + 3208);
    uint64_t v9 = *(void *)(a1 + 240);
    uint64_t v10 = *(void *)(a2 + 240);
    long long v11 = *(_OWORD *)(v10 + 16);
    long long v12 = *(_OWORD *)(v10 + 32);
    long long v13 = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v9 + 64) = v13;
    *(_OWORD *)(v9 + 16) = v11;
    *(_OWORD *)(v9 + 32) = v12;
    *(_OWORD *)(v9 + 80) = *(_OWORD *)(v10 + 80);
    *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
    *(_OWORD *)(v9 + 112) = *(_OWORD *)(v10 + 112);
    *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
    *(unsigned char *)(v9 + 144) = *(unsigned char *)(v10 + 144);
    *(void *)(*(void *)(a1 + 248) + 8) = *(void *)(*(void *)(a2 + 248) + 8);
    do
    {
      icu::UnicodeString::operator=((UChar **)(a1 + 4360 + v8), (UChar **)(a2 + 4360 + v8));
      v8 += 64;
    }
    while (v8 != 256);
    icu::UnicodeString::operator=((UChar **)(a1 + 4616), (UChar **)(a2 + 4616));
    for (uint64_t k = 0; k != 256; k += 64)
      icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(a1 + 4360 + k));
    icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(a1 + 4616));
    uint64_t v16 = *(void *)(a1 + 4680);
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    unint64_t v17 = *(uint64_t **)(a2 + 4680);
    if (v17)
    {
      uint64_t v18 = icu::UMemory::operator new(v17, (icu::UMemory *)0x98, v15);
      if (!v18)
      {
        *(void *)(a1 + 4680) = 0;
        *(_DWORD *)(a1 + 4792) = 7;
        return a1;
      }
      uint64_t v19 = *(void *)(a2 + 4680);
      *uint64_t v18 = (uint64_t)&unk_1EDA4BF28;
      v18[1] = (uint64_t)&unk_1EDA4BF90;
      *((_OWORD *)v18 + 5) = 0u;
      *((_OWORD *)v18 + 6) = 0u;
      *((_OWORD *)v18 + 7) = 0u;
      *((_OWORD *)v18 + 8) = 0u;
      *((unsigned char *)v18 + 144) = 0;
      long long v20 = *(_OWORD *)(v19 + 16);
      long long v21 = *(_OWORD *)(v19 + 32);
      long long v22 = *(_OWORD *)(v19 + 64);
      *((_OWORD *)v18 + 3) = *(_OWORD *)(v19 + 48);
      *((_OWORD *)v18 + 4) = v22;
      *((_OWORD *)v18 + 1) = v20;
      *((_OWORD *)v18 + 2) = v21;
      *((_OWORD *)v18 + 5) = *(_OWORD *)(v19 + 80);
      *((_OWORD *)v18 + 6) = *(_OWORD *)(v19 + 96);
      *((_OWORD *)v18 + 7) = *(_OWORD *)(v19 + 112);
      *((_OWORD *)v18 + 8) = *(_OWORD *)(v19 + 128);
      *((unsigned char *)v18 + 144) = *(unsigned char *)(v19 + 144);
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v23 = 0;
    *(void *)(a1 + 4680) = v18;
    uint64_t v24 = a2 + 1288;
    uint64_t v25 = a1 + 1288;
    do
    {
      icu::UnicodeString::operator=((UChar **)(a1 + (v23 << 6) + 264), (UChar **)(a2 + (v23 << 6) + 264));
      icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(a1 + (v23 << 6) + 264));
      for (uint64_t m = 0; m != 192; m += 64)
      {
        icu::UnicodeString::operator=((UChar **)(v25 + m), (UChar **)(v24 + m));
        icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(v25 + m));
      }
      ++v23;
      v24 += 192;
      v25 += 192;
    }
    while (v23 != 16);
    sub_18C92AA08(*(uint64_t **)(a1 + 256), *(void *)(a2 + 256), (int *)(a1 + 4792));
    icu::DateTimePatternGenerator::copyHashtable(a1, *(uint64_t ***)(a2 + 4688), (UErrorCode *)(a1 + 4792));
  }
  return a1;
}

uint64_t *sub_18C92AA08(uint64_t *result, unint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    *((unsigned char *)result + 424) = *(unsigned char *)(a2 + 424);
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + 8 * v6 + 8);
      if (v7) {
        break;
      }
LABEL_16:
      if (++v6 == 52) {
        return result;
      }
    }
    uint64_t v8 = 0;
    uint64_t v9 = &v5[v6];
    uint64_t v10 = (uint64_t **)(v9 + 1);
    while (1)
    {
      long long v11 = v8;
      uint64_t result = icu::UMemory::operator new(v9, (icu::UMemory *)0xA0, a2);
      if (!result) {
        break;
      }
      uint64_t v8 = result;
      *uint64_t result = (uint64_t)&unk_1EDA4BFB0;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 1), (UChar **)(v7 + 8));
      v8[9] = 0;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 10), (UChar **)(v7 + 80));
      v8[19] = 0;
      long long v13 = (uint64_t *)*a3;
      if ((int)v13 > 0) {
        goto LABEL_18;
      }
      int32_t v14 = icu::UMemory::operator new(v13, (icu::UMemory *)0x90, v12);
      if (v14)
      {
        uint64_t v15 = *(void *)(v7 + 72);
        *int32_t v14 = (uint64_t)&unk_1EDA4BF90;
        *(_OWORD *)(v14 + 9) = 0u;
        *(_OWORD *)(v14 + 11) = 0u;
        *(_OWORD *)(v14 + 13) = 0u;
        *(_OWORD *)(v14 + 15) = 0u;
        long long v16 = *(_OWORD *)(v15 + 8);
        long long v17 = *(_OWORD *)(v15 + 24);
        long long v18 = *(_OWORD *)(v15 + 40);
        *(_OWORD *)(v14 + 7) = *(_OWORD *)(v15 + 56);
        *(_OWORD *)(v14 + 5) = v18;
        *(_OWORD *)(v14 + 3) = v17;
        *(_OWORD *)(v14 + 1) = v16;
        *(_OWORD *)(v14 + 9) = *(_OWORD *)(v15 + 72);
        *(_OWORD *)(v14 + 11) = *(_OWORD *)(v15 + 88);
        *(_OWORD *)(v14 + 13) = *(_OWORD *)(v15 + 104);
        *(_OWORD *)(v14 + 15) = *(_OWORD *)(v15 + 120);
        *((unsigned char *)v14 + 136) = *(unsigned char *)(v15 + 136);
      }
      uint64_t result = (uint64_t *)sub_18C931694((uint64_t)(v8 + 9), (uint64_t)v14, a3);
      if (*a3 > 0)
      {
LABEL_18:
        long long v20 = *(uint64_t (**)(uint64_t *))(*v8 + 8);
        return (uint64_t *)v20(v8);
      }
      *((unsigned char *)v8 + 144) = *(unsigned char *)(v7 + 144);
      uint64_t v9 = *v10;
      uint64_t v19 = v10;
      if (*v10)
      {
        if (!v11) {
          abort();
        }
        uint64_t result = (uint64_t *)v11[19];
        uint64_t v19 = (uint64_t **)(v11 + 19);
        if (result) {
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        }
      }
      *uint64_t v19 = v8;
      uint64_t v7 = *(void *)(v7 + 152);
      if (!v7) {
        goto LABEL_16;
      }
    }
    if (*a3 <= 0) {
      *a3 = 7;
    }
  }
  return result;
}

uint64_t icu::DateTimePatternGenerator::copyHashtable(uint64_t this, uint64_t **a2, UErrorCode *a3)
{
  if (a2 && *(int *)a3 <= 0)
  {
    uint64_t v5 = this;
    uint64_t v6 = *(unsigned char ***)(this + 4688);
    if (v6)
    {
      if (*v6) {
        uhash_close(*v6);
      }
      icu::UMemory::operator delete(v6);
      *(void *)(v5 + 4688) = 0;
    }
    this = (uint64_t)icu::DateTimePatternGenerator::initHashtable((unsigned char ***)v5, a3);
    if (*(int *)a3 <= 0)
    {
      int v13 = -1;
      do
      {
        this = uhash_nextElement(*a2, &v13);
        if (!this) {
          break;
        }
        uint64_t v8 = *(UChar ***)(this + 16);
        uint64_t v9 = *(uint64_t **)(v5 + 4688);
        uint64_t v10 = *v9;
        long long v11 = (icu::UnicodeString *)icu::UMemory::operator new(v9, (icu::UMemory *)0x40, v7);
        uint64_t v12 = (uint64_t)v11;
        if (v11) {
          icu::UnicodeString::UnicodeString(v11, v8);
        }
        this = uhash_puti(v10, v12, 1u, (int *)a3);
      }
      while (*(int *)a3 < 1);
    }
  }
  return this;
}

BOOL icu::DateTimePatternGenerator::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!icu::Locale::operator==(a1 + 8, a2 + 8)
    || !sub_18C92AFB0(*(void *)(a1 + 256), *(void *)(a2 + 256)))
  {
    return 0;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 4624);
  if (v4)
  {
    if (*(_WORD *)(a2 + 4624)) {
      goto LABEL_17;
    }
    return 0;
  }
  if ((v4 & 0x8000) != 0) {
    int v5 = *(_DWORD *)(a1 + 4628);
  }
  else {
    int v5 = v4 >> 5;
  }
  BOOL v6 = 0;
  unsigned int v7 = *(unsigned __int16 *)(a2 + 4624);
  if ((v7 & 0x8000u) == 0) {
    unsigned int v8 = v7 >> 5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a2 + 4628);
  }
  if ((v7 & 1) != 0 || v5 != v8) {
    return v6;
  }
  if (!icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 4616), (const icu::UnicodeString *)(a2 + 4616), v5)) {
    return 0;
  }
LABEL_17:
  for (uint64_t i = 0; i != 256; i += 64)
  {
    unsigned int v10 = *(unsigned __int16 *)(a1 + i + 4368);
    if (v10)
    {
      if ((*(_WORD *)(a2 + i + 4368) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if ((v10 & 0x8000) != 0) {
        int v11 = *(_DWORD *)(a1 + i + 4372);
      }
      else {
        int v11 = v10 >> 5;
      }
      BOOL v6 = 0;
      unsigned int v12 = *(unsigned __int16 *)(a2 + i + 4368);
      unsigned int v13 = *(_DWORD *)(a2 + i + 4372);
      if ((v12 & 0x8000u) == 0) {
        unsigned int v13 = v12 >> 5;
      }
      if ((v12 & 1) != 0 || v11 != v13) {
        return v6;
      }
      if (!icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 4360 + i), (const icu::UnicodeString *)(a2 + 4360 + i), v11))return 0; {
    }
      }
  }
  unint64_t v14 = 0;
  BOOL v6 = 0;
  uint64_t v15 = a2;
  uint64_t v16 = a1;
  do
  {
    uint64_t v17 = a1 + (v14 << 6);
    uint64_t v18 = a2 + (v14 << 6);
    unsigned int v19 = *(unsigned __int16 *)(v17 + 272);
    if (v19)
    {
      if ((*(_WORD *)(v18 + 272) & 1) == 0) {
        return v6;
      }
    }
    else
    {
      if ((v19 & 0x8000) != 0) {
        int v20 = *(_DWORD *)(a1 + (v14 << 6) + 276);
      }
      else {
        int v20 = v19 >> 5;
      }
      uint64_t v21 = a2 + (v14 << 6);
      unsigned int v22 = *(unsigned __int16 *)(v21 + 272);
      unsigned int v23 = *(_DWORD *)(v21 + 276);
      if ((v22 & 0x8000u) == 0) {
        unsigned int v23 = v22 >> 5;
      }
      if ((v22 & 1) != 0
        || v20 != v23
        || !icu::UnicodeString::doEquals((icu::UnicodeString *)(v17 + 264), (const icu::UnicodeString *)(v18 + 264), v20))
      {
        return v6;
      }
    }
    for (uint64_t j = 0; j != 192; j += 64)
    {
      uint64_t v25 = v15 + j;
      unsigned int v26 = *(unsigned __int16 *)(v16 + j + 1296);
      if (v26)
      {
        if ((*(_WORD *)(v25 + 1296) & 1) == 0) {
          return v6;
        }
      }
      else
      {
        if ((v26 & 0x8000) != 0) {
          int v27 = *(_DWORD *)(v16 + j + 1300);
        }
        else {
          int v27 = v26 >> 5;
        }
        unsigned int v28 = *(unsigned __int16 *)(v15 + j + 1296);
        unsigned int v29 = *(_DWORD *)(v15 + j + 1300);
        if ((v28 & 0x8000u) == 0) {
          unsigned int v29 = v28 >> 5;
        }
        if ((v28 & 1) != 0
          || v27 != v29
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)(v16 + j + 1288), (const icu::UnicodeString *)(v25 + 1288), v27))
        {
          return v6;
        }
      }
    }
    BOOL v6 = v14 > 0xE;
    v16 += 192;
    v15 += 192;
    ++v14;
  }
  while (v14 != 16);
  return v6;
}

uint64_t sub_18C92AFB0(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  unint64_t v4 = 0;
  BOOL v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(a1 + 8 * v4 + 8);
    uint64_t v7 = *(void *)(a2 + 8 * v4 + 8);
    if (v6 != v7) {
      break;
    }
LABEL_38:
    BOOL v5 = v4++ > 0x32;
    if (v4 == 52) {
      return v5;
    }
  }
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    while (v7 && v6)
    {
      unsigned int v9 = *(unsigned __int16 *)(v6 + 16);
      if (v9)
      {
        if ((*(_WORD *)(v7 + 16) & 1) == 0) {
          return v5;
        }
      }
      else
      {
        if ((v9 & 0x8000) != 0) {
          int v10 = *(_DWORD *)(v6 + 20);
        }
        else {
          int v10 = v9 >> 5;
        }
        unsigned int v11 = *(unsigned __int16 *)(v7 + 16);
        if ((v11 & 0x8000u) == 0) {
          unsigned int v12 = v11 >> 5;
        }
        else {
          unsigned int v12 = *(_DWORD *)(v7 + 20);
        }
        if ((v11 & 1) != 0
          || v10 != v12
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)(v6 + 8), (const icu::UnicodeString *)(v7 + 8), v10))
        {
          return v5;
        }
      }
      unsigned int v13 = *(unsigned __int16 *)(v6 + 88);
      if (v13)
      {
        if ((*(_WORD *)(v7 + 88) & 1) == 0) {
          return v5;
        }
      }
      else
      {
        if ((v13 & 0x8000) != 0) {
          int v14 = *(_DWORD *)(v6 + 92);
        }
        else {
          int v14 = v13 >> 5;
        }
        unsigned int v15 = *(unsigned __int16 *)(v7 + 88);
        if ((v15 & 0x8000u) == 0) {
          unsigned int v16 = v15 >> 5;
        }
        else {
          unsigned int v16 = *(_DWORD *)(v7 + 92);
        }
        if ((v15 & 1) != 0
          || v14 != v16
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)(v6 + 80), (const icu::UnicodeString *)(v7 + 80), v14))
        {
          return v5;
        }
      }
      uint64_t v17 = *(void **)(v6 + 72);
      uint64_t v18 = *(void **)(v7 + 72);
      if (v17 != v18 && !sub_18C9318D8(v17, v18)) {
        return v5;
      }
      uint64_t v6 = *(void *)(v6 + 152);
      uint64_t v7 = *(void *)(v7 + 152);
      if (!(v7 | v6) || v6 == v7) {
        goto LABEL_38;
      }
    }
  }
  return v5;
}

BOOL icu::DateTimePatternGenerator::operator!=(uint64_t a1, uint64_t a2)
{
  return !icu::DateTimePatternGenerator::operator==(a1, a2);
}

void icu::DateTimePatternGenerator::~DateTimePatternGenerator(icu::DateTimePatternGenerator *this)
{
  *(void *)this = &unk_1EDA4BEB0;
  int v2 = (unsigned char **)*((void *)this + 586);
  if (v2)
  {
    if (*v2) {
      uhash_close(*v2);
    }
    icu::UMemory::operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 29);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 30);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 31);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 32);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 585);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  icu::UnicodeString::~UnicodeString((void *)0x1258, (icu::DateTimePatternGenerator *)((char *)this + 4696));
  icu::UnicodeString::~UnicodeString((void *)0x1208, (icu::DateTimePatternGenerator *)((char *)this + 4616));
  uint64_t v8 = 0;
  uint64_t v9 = 4552;
  do
  {
    icu::UnicodeString::~UnicodeString((void *)v9, (icu::DateTimePatternGenerator *)((char *)this + v8 + 4552));
    v8 -= 64;
  }
  while (v8 != -256);
  for (uint64_t i = 4296; i != 1224; i -= 64)
    icu::UnicodeString::~UnicodeString((void *)v9, (icu::DateTimePatternGenerator *)((char *)this + i));
  do
  {
    icu::UnicodeString::~UnicodeString((void *)v9, (icu::DateTimePatternGenerator *)((char *)this + i));
    i -= 64;
  }
  while (i != 200);
  icu::Locale::~Locale((icu::DateTimePatternGenerator *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::DateTimePatternGenerator::~DateTimePatternGenerator(this);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C92B330()
{
  return 1;
}

unsigned int *icu::DateTimePatternGenerator::addCanonicalItems(unsigned int *this, UErrorCode *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 <= 0)
  {
    uint64_t v3 = this;
    uint64_t v4 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    uint64_t v13 = 0;
    long long v12 = 0u;
    uint64_t v9 = (UChar *)&unk_1EDA47700;
    LOWORD(v10) = 2;
    do
    {
      icu::UnicodeString::UnicodeString((uint64_t)v8, aGyqmwwedfdahms[v4]);
      uint64_t v5 = (void *)v3[1198];
      if ((int)v5 < 1) {
        icu::DateTimePatternGenerator::addPatternWithSkeleton((icu::DateTimePatternGenerator *)v3, v8, 0, 0, &v9, a2);
      }
      else {
        *a2 = (int)v5;
      }
      icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v8);
      uint64_t v6 = (void *)*(unsigned int *)a2;
    }
    while ((int)v6 <= 0 && v4++ != 15);
    return (unsigned int *)icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v9);
  }
  return this;
}

void icu::DateTimePatternGenerator::addICUPatterns(icu::DateTimePatternGenerator *this, const char **a2, UErrorCode *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  int v27 = 0;
  long long v50 = 0u;
  memset(v51, 0, sizeof(v51));
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long __dst = 0u;
  if (!ulocimp_setRegionToSupplementalRegion((char *)a2[5], (char *)&__dst, 157))
  {
    strncpy((char *)&__dst, a2[5], 0x9DuLL);
    v51[28] = 0;
  }
  if (*(int *)a3 > 0) {
    return;
  }
  uint64_t v6 = ures_open(0, (char *)&__dst, (int *)a3);
  memset(&v41[1], 0, 48);
  v42[1] = 0;
  v41[0] = (char *)&v41[1] + 5;
  LODWORD(v41[1]) = 40;
  v42[0] = 0;
  uint64_t v7 = (icu::DateTimePatternGenerator *)icu::Locale::Locale((icu::Locale *)v40, (const char *)&__dst, 0, 0, 0);
  icu::DateTimePatternGenerator::getCalendarTypeToUse(v7, v40, (icu::CharString *)v41, a3);
  icu::Locale::~Locale((icu::Locale *)v40);
  if ((void)__dst == 0x52545F504A5F616ALL
    && *((void *)&__dst + 1) == 0x414E4F4954494441
    && (unsigned __int16)v44 == 76)
  {
    v42[0] = 0;
    *v41[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v25, "gregorian");
    icu::CharString::append((icu::CharString *)v41, v25, v26, a3);
  }
  if (*(int *)a3 > 0) {
    goto LABEL_35;
  }
  memset(&v40[1], 0, 56);
  v40[0] = (char *)&v40[1] + 5;
  LODWORD(v40[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v23, "calendar");
  long long v10 = icu::CharString::append((icu::CharString *)v40, v23, v24, a3);
  long long v11 = icu::CharString::append(v10, 47, a3);
  long long v12 = icu::CharString::append(v11, v41[0], v42[0], a3);
  uint64_t v13 = icu::CharString::append(v12, 47, a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v21, "DateTimePatterns");
  icu::CharString::append(v13, v21, v22, a3);
  uint64_t v14 = ures_getByKeyWithFallback(v6, (char *)v40[0], 0, a3);
  if ((int)ures_getSize(v14) < 8 || ures_getType(v14) != 8)
  {
    *a3 = U_INVALID_FORMAT_ERROR;
    goto LABEL_31;
  }
  signed int v15 = 0;
  while (1)
  {
    unsigned int v16 = ures_getByIndex(v14, v15, 0, a3);
    uint64_t v39 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    unsigned int v35 = (UChar *)&unk_1EDA47700;
    LOWORD(v36) = 2;
    if (ures_getType((uint64_t)v16)) {
      break;
    }
    uint64_t v34 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    int v30 = (UChar *)&unk_1EDA47700;
    LOWORD(v31) = 2;
    int v29 = 0;
    String = ures_getString((uint64_t)v16, &v29, (int *)a3);
    if (*(int *)a3 > 0)
    {
LABEL_22:
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v30);
      goto LABEL_23;
    }
LABEL_20:
    unsigned int v28 = String;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v30, 1, &v28, v29);
LABEL_23:
    icu::UnicodeString::operator=((icu::UnicodeString *)&v35, (icu::UnicodeString *)&v30);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v30);
    unsigned int v19 = (void *)*(unsigned int *)a3;
    if ((int)v19 <= 0)
    {
      uint64_t v34 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      int v30 = (UChar *)&unk_1EDA47700;
      LOWORD(v31) = 2;
      icu::DateTimePatternGenerator::addPatternWithSkeleton(this, &v35, 0, 0, &v30, a3);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v30);
    }
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v35);
    if (v16) {
      ures_close((uint64_t)v16);
    }
    if (++v15 == 8) {
      goto LABEL_31;
    }
  }
  if (ures_getType((uint64_t)v16) == 8)
  {
    uint64_t v34 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    int v30 = (UChar *)&unk_1EDA47700;
    LOWORD(v31) = 2;
    int v29 = 0;
    String = ures_getStringByIndex((uint64_t)v16, 0, &v29, a3);
    if (*(int *)a3 > 0) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  *a3 = U_INVALID_FORMAT_ERROR;
  icu::UnicodeString::~UnicodeString((void *)3, (icu::UnicodeString *)&v35);
  if (v16) {
    ures_close((uint64_t)v16);
  }
LABEL_31:
  if (v14) {
    ures_close(v14);
  }
  if (BYTE4(v40[1])) {
    uprv_free((void *)v40[0]);
  }
LABEL_35:
  if (BYTE4(v41[1])) {
    uprv_free(v41[0]);
  }
  if (v6) {
    ures_close(v6);
  }
}

unsigned char ***icu::DateTimePatternGenerator::addCLDRData(unsigned char ***this, char **a2, UErrorCode *a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    uint64_t v5 = this;
    long long v59 = 0u;
    uint64_t v62 = 0;
    long long v61 = 0u;
    long long v60 = 0u;
    uint64_t v57 = 0;
    signed __int8 v58 = &unk_1EDA47700;
    LOWORD(v59) = 2;
    long long v54 = 0u;
    long long v56 = 0u;
    long long v55 = 0u;
    int v53 = &unk_1EDA47700;
    LOWORD(v54) = 2;
    long long v49 = 0u;
    uint64_t v52 = 0;
    long long v51 = 0u;
    long long v50 = 0u;
    long long v48 = &unk_1EDA47700;
    LOWORD(v49) = 2;
    memset(&v46[1], 0, 48);
    v46[0] = (char *)&v46[1] + 5;
    LODWORD(v46[1]) = 40;
    uint64_t v47 = 0;
    BOOL v33 = 0;
    uint64_t v6 = ures_open(0, a2[5], (int *)a3);
    uint64_t v7 = ures_openWithCountryFallback(0, a2[5], &v33, (int *)a3);
    if (*(int *)a3 <= 0)
    {
      char v45 = 0;
      *(void *)long long v44 = 0;
      UErrorCode v32 = U_ZERO_ERROR;
      uint64_t KeywordValue = icu::Locale::getKeywordValue(a2, "numbers", v44, 9, &v32);
      if (v33 && v32 <= U_ZERO_ERROR && !KeywordValue)
      {
        LODWORD(v34) = 0;
        LODWORD(v42[0]) = -1;
        StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v6, "NumberElements/default", (int *)v42, (UErrorCode *)&v34);
        uint64_t KeywordValue = (uint64_t)ures_getStringByKeyWithFallback(v7, "NumberElements/default", (int *)v42, (UErrorCode *)&v34);
        if ((int)v34 > 0
          || (uint64_t KeywordValue = u_strcmp(StringByKeyWithFallback, (const UChar *)KeywordValue), KeywordValue))
        {
          BOOL v33 = 0;
        }
      }
      memset(&v42[1], 0, 48);
      v43[1] = 0;
      v42[0] = (char *)&v42[1] + 5;
      LODWORD(v42[1]) = 40;
      v43[0] = 0;
      icu::DateTimePatternGenerator::getCalendarTypeToUse((icu::DateTimePatternGenerator *)KeywordValue, (const char **)a2, (icu::CharString *)v42, a3);
      if (*(int *)a3 <= 0)
      {
        int v31 = 0;
        v30[0] = &unk_1EDA4C0F0;
        v30[1] = v5;
        LODWORD(v47) = 0;
        *(unsigned char *)v46[0] = 0;
        icu::StringPiece::StringPiece((icu::StringPiece *)&v28, "calendar");
        long long v10 = icu::CharString::append((icu::CharString *)v46, v28, v29, a3);
        long long v11 = icu::CharString::append(v10, 47, a3);
        long long v12 = icu::CharString::append(v11, v42[0], v43[0], a3);
        uint64_t v13 = icu::CharString::append(v12, 47, a3);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v26, "appendItems");
        icu::CharString::append(v13, v26, v27, a3);
        if (*(int *)a3 <= 0)
        {
          ures_getAllChildrenWithFallback(v6, (char *)v46[0], (uint64_t)v30, &v31);
          sub_18C92E214((uint64_t)v30);
          int v31 = 0;
          v25[0] = &unk_1EDA4C138;
          v25[1] = v5;
          ures_getAllChildrenWithFallback(v6, "fields", (uint64_t)v25, &v31);
          sub_18C92E2EC(v25);
          int v31 = 0;
          icu::DateTimePatternGenerator::initHashtable(v5, a3);
          if (*(int *)a3 <= 0)
          {
            LODWORD(v47) = 0;
            *(unsigned char *)v46[0] = 0;
            icu::StringPiece::StringPiece((icu::StringPiece *)&v23, "calendar");
            uint64_t v14 = icu::CharString::append((icu::CharString *)v46, v23, v24, a3);
            signed int v15 = icu::CharString::append(v14, 47, a3);
            unsigned int v16 = icu::CharString::append(v15, v42[0], v43[0], a3);
            uint64_t v17 = icu::CharString::append(v16, 47, a3);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v21, "availableFormats");
            icu::CharString::append(v17, v21, v22, a3);
            if (*(int *)a3 <= 0)
            {
              if (v33)
              {
                uint64_t v36 = 1;
                long long v38 = 0u;
                uint64_t v41 = 0;
                long long v39 = 0u;
                long long v40 = 0u;
                uint64_t v34 = &unk_1EDA4BED8;
                unsigned int v35 = v5;
                long long v37 = &unk_1EDA47700;
                LOWORD(v38) = 2;
                ures_getAllChildrenWithFallback(v7, (char *)v46[0], (uint64_t)&v34, &v31);
                sub_18C92E168((uint64_t)&v34);
              }
              uint64_t v36 = 0;
              long long v38 = 0u;
              uint64_t v41 = 0;
              long long v39 = 0u;
              long long v40 = 0u;
              uint64_t v34 = &unk_1EDA4BED8;
              unsigned int v35 = v5;
              long long v37 = &unk_1EDA47700;
              LOWORD(v38) = 2;
              ures_getAllChildrenWithFallback(v6, (char *)v46[0], (uint64_t)&v34, &v31);
              sub_18C92E168((uint64_t)&v34);
            }
          }
          icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v25);
        }
        icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v30);
      }
      if (BYTE4(v42[1])) {
        uprv_free(v42[0]);
      }
    }
    if (v7) {
      ures_close(v7);
    }
    if (v6) {
      ures_close(v6);
    }
    uint64_t v18 = (void *)BYTE4(v46[1]);
    if (BYTE4(v46[1])) {
      uprv_free(v46[0]);
    }
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v48);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v53);
    return (unsigned char ***)icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v58);
  }
  return this;
}

void icu::DateTimePatternGenerator::setDateTimeFromCalendar(icu::DateTimePatternGenerator *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    int v26 = 0;
    BaseName = (char *)icu::Locale::getBaseName(a2);
    uint64_t v7 = ures_open(0, BaseName, (int *)a3);
    uint64_t v8 = v7;
    if (*(int *)a3 > 0 || (ures_getByKey(v7, "calendar", v7, (int *)a3), *(int *)a3 > 0))
    {
LABEL_51:
      if (v8) {
        ures_close(v8);
      }
      return;
    }
    char v29 = 0;
    memset(v28, 0, sizeof(v28));
    icu::Calendar::getCalendarTypeFromLocale(a2, (const icu::Locale *)v28, (char *)0x20, a3, v9);
    char v29 = 0;
    if (*(int *)a3 > 0 || !LOBYTE(v28[0]))
    {
      *a3 = U_ZERO_ERROR;
      strcpy((char *)v28, "gregorian");
    }
    BOOL v10 = *(void *)&v28[0] == 0x6169726F67657267 && WORD4(v28[0]) == 110;
    int v11 = !v10;
    if (v10)
    {
      *a3 = U_ZERO_ERROR;
      uint64_t v15 = ures_getByKeyWithFallback(v8, "gregorian", 0, a3);
      uint64_t v16 = ures_getByKeyWithFallback(v15, "DateTimePatterns%atTime", 0, a3);
    }
    else
    {
      uint64_t v12 = ures_getByKeyWithFallback(v8, (char *)v28, 0, a3);
      uint64_t v13 = ures_getByKeyWithFallback(v12, "DateTimePatterns%atTime", 0, a3);
      if (v13)
      {
        int v14 = *a3;
        if (*a3 != U_MISSING_RESOURCE_ERROR)
        {
LABEL_22:
          if (v14 <= 0)
          {
            if ((int)ures_getSize(v13) < 4)
            {
              uint64_t v17 = v12;
              goto LABEL_46;
            }
            int v14 = *a3;
          }
          if (v14 != 2)
          {
            int v20 = 0;
            goto LABEL_34;
          }
          *a3 = U_ZERO_ERROR;
          if (v11)
          {
            uint64_t v17 = ures_getByKeyWithFallback(v8, (char *)v28, 0, a3);
            if (v12) {
              ures_close(v12);
            }
            uint64_t v13 = ures_getByKeyWithFallback(v17, "DateTimePatterns", 0, a3);
            BOOL v18 = v13 == 0;
            if (v13)
            {
              int v19 = *a3;
              if (*a3 != U_MISSING_RESOURCE_ERROR) {
                goto LABEL_44;
              }
            }
          }
          else
          {
            uint64_t v13 = 0;
            BOOL v18 = 1;
            uint64_t v17 = v12;
          }
          *a3 = U_ZERO_ERROR;
          uint64_t v23 = ures_getByKeyWithFallback(v8, "gregorian", 0, a3);
          if (v17) {
            ures_close(v17);
          }
          uint64_t v24 = ures_getByKeyWithFallback(v23, "DateTimePatterns", 0, a3);
          if (!v18) {
            ures_close(v13);
          }
          int v19 = *a3;
          uint64_t v17 = v23;
          uint64_t v13 = v24;
LABEL_44:
          if (v19 > 0)
          {
LABEL_47:
            if (v13) {
              ures_close(v13);
            }
            if (v17) {
              ures_close(v17);
            }
            goto LABEL_51;
          }
          if ((int)ures_getSize(v13) < 13)
          {
LABEL_46:
            *a3 = U_INVALID_FORMAT_ERROR;
            goto LABEL_47;
          }
          int v14 = *a3;
          int v20 = 9;
          uint64_t v12 = v17;
LABEL_34:
          if (v14 <= 0)
          {
            for (unsigned int i = 0; i != 4; ++i)
            {
              StringByIndex = ures_getStringByIndex(v13, v20 + i, &v26, a3);
              icu::UnicodeString::UnicodeString(v27, 1, &StringByIndex);
              icu::DateTimePatternGenerator::setDateTimeFormat((uint64_t)this, i, v27, (int *)a3);
              icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v27);
            }
          }
          uint64_t v17 = v12;
          goto LABEL_47;
        }
      }
      *a3 = U_ZERO_ERROR;
      uint64_t v15 = ures_getByKeyWithFallback(v8, "gregorian", 0, a3);
      if (v12) {
        ures_close(v12);
      }
      uint64_t v16 = ures_getByKeyWithFallback(v15, "DateTimePatterns%atTime", 0, a3);
      if (v13) {
        ures_close(v13);
      }
    }
    int v14 = *a3;
    uint64_t v12 = v15;
    uint64_t v13 = v16;
    goto LABEL_22;
  }
}

void icu::DateTimePatternGenerator::setDecimalSymbols(icu::DateTimePatternGenerator *this, const icu::Locale *a2, UErrorCode *a3)
{
  v10[360] = *(UChar **)MEMORY[0x1E4F143B8];
  bzero(v9, 0xB48uLL);
  icu::DecimalFormatSymbols::DecimalFormatSymbols((icu::DecimalFormatSymbols *)v9, a2, a3);
  if (*(int *)a3 <= 0)
  {
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v8, v10);
    uint64_t v6 = (icu::DateTimePatternGenerator *)((char *)this + 4616);
    icu::UnicodeString::operator=(v6, (icu::UnicodeString *)v8);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v8);
    icu::UnicodeString::getTerminatedBuffer(v6);
  }
  icu::DecimalFormatSymbols::~DecimalFormatSymbols((icu::DecimalFormatSymbols *)v9);
}

void icu::DateTimePatternGenerator::loadAllowedHourFormatsData(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  if (*(int *)this <= 0)
  {
    uint64_t v3 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, (int *)this);
    qword_1EB20B710 = (uint64_t)v3;
    if (*(int *)this <= 0)
    {
      uhash_setValueDeleter((uint64_t)v3, (uint64_t)j__uprv_free_1);
      sub_18CA0A25C(0x17u, (uint64_t)sub_18C92B330);
      uint64_t v4 = ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)this);
      uint64_t v5 = v4;
      if (*(int *)this <= 0)
      {
        uint64_t v6 = &unk_1EDA4C258;
        ures_getAllItemsWithFallback(v4, "timeData", (uint64_t)&v6, (int *)this);
        icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v6);
      }
      if (v5) {
        ures_close(v5);
      }
    }
  }
}

void icu::DateTimePatternGenerator::getAllowedHourFormats(icu::DateTimePatternGenerator *this, char **a2, UErrorCode *a3)
{
  v26[1] = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    v26[0] = 0;
    ulocimp_getRegionForSupplementalData(a2[5], 0, (char *)v26, 8, (int *)a3);
    uint64_t v6 = a2[5];
    if (!*v6 || !strcmp(a2[5], "root") || !strcmp(v6, "und"))
    {
      uint64_t v7 = "und";
      uint64_t v8 = "001";
    }
    else
    {
      uint64_t v7 = (char *)(a2 + 1);
      uint64_t v8 = (const char *)v26;
    }
    memset(v25, 0, sizeof(v25));
    icu::Locale::Locale((icu::Locale *)v25);
    if (!*v7 || (int v9 = *(unsigned __int8 *)v8, !*v8))
    {
      icu::Locale::operator=((icu::Locale *)v25, (uint64_t)a2);
      v24[0] = U_ZERO_ERROR;
      icu::Locale::addLikelySubtags((icu::Locale *)v25, v24);
      BOOL v10 = (char *)v25 + 8;
      if (v24[0] > U_ZERO_ERROR) {
        BOOL v10 = v7;
      }
      else {
        uint64_t v8 = (char *)&v25[1] + 10;
      }
      int v9 = *(unsigned __int8 *)v8;
      if (*v10) {
        uint64_t v7 = v10;
      }
      else {
        uint64_t v7 = "und";
      }
    }
    if (v9) {
      int v11 = (char *)v8;
    }
    else {
      int v11 = "001";
    }
    uint64_t v12 = (unsigned int *)sub_18C92C800(v7, v11, a3);
    *(void *)uint64_t v24 = 0;
    int KeywordValue = icu::Locale::getKeywordValue(a2, "hours", (char *)v24, 8, a3);
    int v15 = 0;
    *((_WORD *)this + 2380) = 0;
    if (*(int *)a3 <= 0 && KeywordValue >= 1)
    {
      int v15 = 0;
      if (v24[0] > 3355239)
      {
        if (v24[0] == 3420776)
        {
          int v15 = 107;
        }
        else
        {
          if (v24[0] != 3355240) {
            goto LABEL_30;
          }
          int v15 = 72;
        }
      }
      else if (v24[0] == 3223912)
      {
        int v15 = 75;
      }
      else
      {
        if (v24[0] != 3289448) {
          goto LABEL_30;
        }
        int v15 = 104;
      }
      *((_WORD *)this + 2380) = v15;
    }
LABEL_30:
    if (v12)
    {
      if (!v15)
      {
LABEL_32:
        unint64_t v16 = *v12;
        if (v16 >= 4) {
          __int16 v17 = 72;
        }
        else {
          __int16 v17 = 0x6B004B00480068uLL >> (16 * v16);
        }
        *((_WORD *)this + 2380) = v17;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v23 = 0;
      Instance = icu::Region::getInstance((icu::Region *)v11, (icu::Region *)v23, v14);
      if (*(int *)v23 >= 1
        || (RegionCode = (const char *)icu::Region::getRegionCode(Instance),
            (uint64_t v22 = sub_18C92C800(v7, RegionCode, a3)) == 0))
      {
        if (!*((_WORD *)this + 2380)) {
          *((_WORD *)this + 2380) = 72;
        }
        *(void *)((char *)this + 4764) = 0xFFFFFFFF00000001;
        goto LABEL_44;
      }
      uint64_t v12 = (unsigned int *)v22;
      if (!*((_WORD *)this + 2380)) {
        goto LABEL_32;
      }
    }
    uint64_t v18 = 0;
    do
    {
      if (v18 == 7) {
        break;
      }
      unsigned int v19 = v12[v18 + 1];
      *(_DWORD *)((char *)this + v18 * 4 + 4764) = v19;
      ++v18;
    }
    while (v19 != -1);
LABEL_44:
    icu::Locale::~Locale((icu::Locale *)v25);
  }
}

uint64_t sub_18C92C800(char *__s, const char *a2, UErrorCode *a3)
{
  v11[8] = *(void **)MEMORY[0x1E4F143B8];
  memset(&v11[1], 0, 56);
  v11[0] = (char *)&v11[1] + 5;
  LODWORD(v11[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v9, __s);
  icu::CharString::append((icu::CharString *)v11, v9, v10, a3);
  icu::CharString::append((icu::CharString *)v11, 95, a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v7, a2);
  icu::CharString::append((icu::CharString *)v11, v7, v8, a3);
  uint64_t v5 = uhash_get(qword_1EB20B710, (uint64_t)v11[0]);
  if (!v5) {
    uint64_t v5 = uhash_get(qword_1EB20B710, (uint64_t)a2);
  }
  if (BYTE4(v11[1])) {
    uprv_free(v11[0]);
  }
  return v5;
}

uint64_t icu::DateTimePatternGenerator::getDefaultHourCycle(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 2;
  }
  unsigned int v3 = *((unsigned __int16 *)this + 2380);
  if (v3 > 0x4A)
  {
    switch(v3)
    {
      case 'K':
        return 0;
      case 'h':
        return 1;
      case 'k':
        return 3;
    }
LABEL_11:
    abort();
  }
  if (*((_WORD *)this + 2380))
  {
    if (v3 != 72) {
      goto LABEL_11;
    }
  }
  else
  {
    *a2 = U_UNSUPPORTED_ERROR;
  }
  return 2;
}

void *icu::DateTimePatternGenerator::getSkeleton@<X0>(const icu::UnicodeString *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  bzero(&v12, 0xC80uLL);
  v11[0] = &unk_1EDA4BF48;
  uint64_t v6 = 1;
  do
  {
    uint64_t v7 = &v11[v6];
    void *v7 = &unk_1EDA47700;
    *((_WORD *)v7 + 4) = 2;
    v6 += 8;
  }
  while (v7 + 8 != &v13);
  uint64_t v13 = 0;
  uint64_t v33 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  v24[0] = &unk_1EDA4BF28;
  v24[1] = &unk_1EDA4BF90;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v23 = 0;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  int v14 = &unk_1EDA4BF90;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  sub_18C92CB54((uint64_t)v24, a1, v11, (uint64_t)&v14);
  sub_18C92CE6C((uint64_t)&v14, a2);
  v11[0] = &unk_1EDA4BF48;
  for (uint64_t i = 393; i != -7; i -= 8)
    uint64_t result = icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11[i]);
  return result;
}

__n128 sub_18C92CB54(uint64_t a1, const icu::UnicodeString *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  long long v31 = (_OWORD *)(a4 + 72);
  *(_OWORD *)(a4 + 104) = 0u;
  long long v32 = (_OWORD *)(a4 + 104);
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  long long v29 = (long long *)(a4 + 8);
  *(unsigned char *)(a4 + 136) = 0;
  sub_18C92DCD8(a3, a2);
  int v33 = 0;
  if ((int)a3[802] >= 1)
  {
    int v6 = 0;
    do
    {
      uint64_t v7 = &a3[16 * (uint64_t)v6];
      unsigned int v10 = v7[5];
      int v9 = v7 + 5;
      unsigned int v8 = v10;
      unsigned int v11 = *((unsigned __int16 *)v9 - 2);
      if ((v11 & 0x8000u) == 0) {
        unsigned int v12 = v11 >> 5;
      }
      else {
        unsigned int v12 = v8;
      }
      if (!v12) {
        goto LABEL_11;
      }
      uint64_t v13 = *(_WORD **)&a3[16 * (uint64_t)v6 + 8];
      if ((v11 & 2) != 0) {
        uint64_t v13 = (_WORD *)v9 - 1;
      }
      if (*v13 == 39)
      {
        uint64_t v38 = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        uint64_t v34 = &unk_1EDA47700;
        LOWORD(v35) = 2;
        sub_18C92DDCC((uint64_t)a3, (icu::UnicodeString *)&v34, &v33);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v34);
        int v6 = v33;
      }
      else
      {
LABEL_11:
        int v15 = sub_18C931A98((uint64_t)(v9 - 3), 1);
        if ((v15 & 0x80000000) == 0)
        {
          if (v12)
          {
            long long v16 = (char *)v9 - 2;
            if ((v11 & 2) == 0) {
              long long v16 = *(char **)&a3[16 * (uint64_t)v6 + 8];
            }
            char v17 = *v16;
          }
          else
          {
            char v17 = -1;
          }
          long long v18 = &aG_1[16 * v15];
          uint64_t v19 = *((int *)v18 + 1);
          *((unsigned char *)v31 + v19) = v17;
          uint64_t v20 = a4 + v19;
          *(unsigned char *)(v20 + 88) = v12;
          char v21 = v18[10];
          *((unsigned char *)v32 + v19) = *v18;
          *(unsigned char *)(v20 + 120) = v21;
          int v22 = *((__int16 *)v18 + 4);
          if (v22 >= 1)
          {
            if (*(__int16 *)(v9 - 1) < 0) {
              int v23 = *v9;
            }
            else {
              int v23 = *((unsigned __int16 *)v9 - 2) >> 5;
            }
            LOWORD(v22) = v22 + v23;
          }
          *(_DWORD *)(a4 + 4 * v19 + 8) = (__int16)v22;
        }
      }
      int v33 = ++v6;
    }
    while (v6 < a3[802]);
  }
  if (*(unsigned char *)(a4 + 100) && *(unsigned char *)(a4 + 102) && !*(unsigned char *)(a4 + 101))
  {
    *(unsigned char *)(a4 + 85) = 115;
    *(unsigned char *)(a4 + 101) = 1;
    *(unsigned char *)(a4 + 117) = 115;
    *(unsigned char *)(a4 + 133) = 1;
    *(_DWORD *)(a4 + 60) = 257;
  }
  if (*(unsigned char *)(a4 + 99))
  {
    int v24 = *(char *)(a4 + 83);
    if (v24 == 104 || (unsigned __int16)v24 == 75)
    {
      if (!*(unsigned char *)(a4 + 98))
      {
        *(unsigned char *)(a4 + 82) = 97;
        *(unsigned char *)(a4 + 98) = 1;
        *(unsigned char *)(a4 + 114) = 97;
        *(unsigned char *)(a4 + 130) = 1;
        *(_DWORD *)(a4 + 48) = -259;
        *(unsigned char *)(a4 + 136) = 1;
      }
    }
    else
    {
      *(unsigned char *)(a4 + 82) = 0;
      *(unsigned char *)(a4 + 98) = 0;
      *(unsigned char *)(a4 + 114) = 0;
      *(unsigned char *)(a4 + 130) = 0;
      *(_DWORD *)(a4 + 48) = 0;
    }
  }
  long long v25 = *v29;
  long long v26 = v29[1];
  long long v27 = v29[3];
  *(_OWORD *)(a1 + 48) = v29[2];
  *(_OWORD *)(a1 + 64) = v27;
  *(_OWORD *)(a1 + 16) = v25;
  *(_OWORD *)(a1 + 32) = v26;
  *(_OWORD *)(a1 + 80) = *v31;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a4 + 88);
  *(_OWORD *)(a1 + 112) = *v32;
  __n128 result = *(__n128 *)(a4 + 120);
  *(__n128 *)(a1 + 128) = result;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a4 + 136);
  return result;
}

uint64_t sub_18C92CE6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  uint64_t v5 = a1 + 72;
  do
    sub_18C930A38(v5, v4++, a2);
  while (v4 != 16);
  uint64_t result = (uint64_t)icu::UnicodeString::operator=((UChar **)a2, (UChar **)a2);
  if (*(unsigned char *)(a1 + 136))
  {
    unsigned int v7 = *(unsigned __int16 *)(a2 + 8);
    int v8 = (__int16)v7;
    unsigned int v9 = v7 >> 5;
    int32_t v10 = v8 >= 0 ? v9 : *(_DWORD *)(a2 + 12);
    uint64_t result = icu::UnicodeString::doIndexOf(a2, 0x61u, 0, v10);
    if ((result & 0x80000000) == 0)
    {
      return icu::UnicodeString::doReplace(a2, result, 1, 0, 0, 0);
    }
  }
  return result;
}

void *sub_18C92CF74(void *a1)
{
  *a1 = &unk_1EDA4BF48;
  for (uint64_t i = 393; i != -7; i -= 8)
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&a1[i]);
  return a1;
}

void *icu::DateTimePatternGenerator::staticGetSkeleton@<X0>(icu::DateTimePatternGenerator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  bzero(&v12, 0xC80uLL);
  v11[0] = &unk_1EDA4BF48;
  uint64_t v6 = 1;
  do
  {
    unsigned int v7 = &v11[v6];
    void *v7 = &unk_1EDA47700;
    *((_WORD *)v7 + 4) = 2;
    v6 += 8;
  }
  while (v7 + 8 != &v13);
  uint64_t v13 = 0;
  uint64_t v33 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  v24[0] = &unk_1EDA4BF28;
  v24[1] = &unk_1EDA4BF90;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v23 = 0;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  int v14 = &unk_1EDA4BF90;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  sub_18C92CB54((uint64_t)v24, this, v11, (uint64_t)&v14);
  sub_18C92CE6C((uint64_t)&v14, a2);
  v11[0] = &unk_1EDA4BF48;
  for (uint64_t i = 393; i != -7; i -= 8)
    uint64_t result = icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11[i]);
  return result;
}

void *icu::DateTimePatternGenerator::getBaseSkeleton@<X0>(const icu::UnicodeString *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  bzero(&v12, 0xC80uLL);
  v11[0] = &unk_1EDA4BF48;
  uint64_t v6 = 1;
  do
  {
    unsigned int v7 = &v11[v6];
    void *v7 = &unk_1EDA47700;
    *((_WORD *)v7 + 4) = 2;
    v6 += 8;
  }
  while (v7 + 8 != &v13);
  uint64_t v13 = 0;
  uint64_t v33 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  v24[0] = &unk_1EDA4BF28;
  v24[1] = &unk_1EDA4BF90;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v23 = 0;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  int v14 = &unk_1EDA4BF90;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  sub_18C92CB54((uint64_t)v24, a1, v11, (uint64_t)&v14);
  sub_18C92D354((uint64_t)&v14, a2);
  v11[0] = &unk_1EDA4BF48;
  for (uint64_t i = 393; i != -7; i -= 8)
    uint64_t result = icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11[i]);
  return result;
}

uint64_t sub_18C92D354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  uint64_t v5 = a1 + 104;
  do
    sub_18C930A38(v5, v4++, a2);
  while (v4 != 16);
  uint64_t result = (uint64_t)icu::UnicodeString::operator=((UChar **)a2, (UChar **)a2);
  if (*(unsigned char *)(a1 + 136))
  {
    unsigned int v7 = *(unsigned __int16 *)(a2 + 8);
    int v8 = (__int16)v7;
    unsigned int v9 = v7 >> 5;
    int32_t v10 = v8 >= 0 ? v9 : *(_DWORD *)(a2 + 12);
    uint64_t result = icu::UnicodeString::doIndexOf(a2, 0x61u, 0, v10);
    if ((result & 0x80000000) == 0)
    {
      return icu::UnicodeString::doReplace(a2, result, 1, 0, 0, 0);
    }
  }
  return result;
}

void *icu::DateTimePatternGenerator::staticGetBaseSkeleton@<X0>(icu::DateTimePatternGenerator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  bzero(&v12, 0xC80uLL);
  v11[0] = &unk_1EDA4BF48;
  uint64_t v6 = 1;
  do
  {
    unsigned int v7 = &v11[v6];
    void *v7 = &unk_1EDA47700;
    *((_WORD *)v7 + 4) = 2;
    v6 += 8;
  }
  while (v7 + 8 != &v13);
  uint64_t v13 = 0;
  uint64_t v33 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  v24[0] = &unk_1EDA4BF28;
  v24[1] = &unk_1EDA4BF90;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v23 = 0;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  int v14 = &unk_1EDA4BF90;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  sub_18C92CB54((uint64_t)v24, this, v11, (uint64_t)&v14);
  sub_18C92D354((uint64_t)&v14, a2);
  v11[0] = &unk_1EDA4BF48;
  for (uint64_t i = 393; i != -7; i -= 8)
    uint64_t result = icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11[i]);
  return result;
}

void icu::DateTimePatternGenerator::getCalendarTypeToUse(icu::DateTimePatternGenerator *this, const char **a2, icu::CharString *a3, UErrorCode *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)a3 + 14) = 0;
  **(unsigned char **)a3 = 0;
  icu::CharString::append(a3, "gregorian", -1, a4);
  if (*(int *)a4 <= 0)
  {
    if (!strcmp(a2[5], "ja_JP_TRADITIONAL"))
    {
      *((_DWORD *)a3 + 14) = 0;
      **(unsigned char **)a3 = 0;
      icu::CharString::append(a3, "japanese", -1, a4);
    }
    else
    {
      __int16 v9 = 0;
      memset(v8, 0, sizeof(v8));
      icu::Calendar::getCalendarTypeFromLocale((icu::Calendar *)a2, (const icu::Locale *)v8, (char *)0x32, a4, v7);
      if (*(int *)a4 <= 0)
      {
        *((_DWORD *)a3 + 14) = 0;
        **(unsigned char **)a3 = 0;
        icu::CharString::append(a3, (const char *)v8, -1, a4);
      }
    }
  }
}

uint64_t icu::DateTimePatternGenerator::addPatternWithSkeleton(icu::DateTimePatternGenerator *this, UChar **a2, UChar **a3, int a4, UChar **a5, UErrorCode *a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  UErrorCode v7 = *((_DWORD *)this + 1198);
  if (v7 < U_ILLEGAL_ARGUMENT_ERROR)
  {
    uint64_t v12 = a2;
    long long v43 = 0u;
    uint64_t v46 = 0;
    long long v45 = 0u;
    long long v44 = 0u;
    int32_t v42 = &unk_1EDA47700;
    LOWORD(v43) = 2;
    uint64_t v41 = 0;
    long long v36 = 0u;
    long long v35 = 0u;
    long long v34 = 0u;
    long long v33 = 0u;
    uint64_t v31 = 0;
    long long v32 = &unk_1EDA4BF90;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    v22[0] = &unk_1EDA4BF28;
    v22[1] = &unk_1EDA4BF90;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    if (a3) {
      a2 = a3;
    }
    sub_18C92CB54((uint64_t)v22, (const icu::UnicodeString *)a2, *((_DWORD **)this + 29), (uint64_t)&v32);
    sub_18C930058((uint64_t)v22, (uint64_t)&v42);
    char v21 = 0;
    int v14 = (UChar **)sub_18C9300BC(*((void *)this + 32), (uint64_t)&v42, &v21);
    if (!v14 || (!a4 ? (BOOL v15 = a3 == 0) : (BOOL v15 = 1), v15 && v21))
    {
      LODWORD(v8) = 0;
    }
    else
    {
      icu::UnicodeString::operator=(a5, v14);
      uint64_t v8 = 1;
      if (!a4)
      {
LABEL_23:
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v42);
        return v8;
      }
    }
    long long v20 = 0;
    long long v17 = (UChar **)*((void *)this + 32);
    long long v18 = (UChar **)sub_18C9301D4((uint64_t)v17, &v32, &v20);
    if (v18)
    {
      icu::UnicodeString::operator=(a5, v18);
      if (!a4 || a3 && (long long v16 = v20) != 0)
      {
        uint64_t v8 = 2;
        goto LABEL_23;
      }
      long long v17 = (UChar **)*((void *)this + 32);
      LODWORD(v8) = 2;
    }
    sub_18C9302BC(v17, (unint64_t)&v42, (uint64_t)&v32, v12, a3 != 0, (int *)a6);
    long long v16 = (void *)*(unsigned int *)a6;
    if ((int)v16 <= 0) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v8;
    }
    goto LABEL_23;
  }
  uint64_t v8 = 0;
  *a6 = v7;
  return v8;
}

void *icu::DateTimePatternGenerator::hackTimes(icu::DateTimePatternGenerator *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  long long v34 = 0u;
  uint64_t v37 = 0;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v33 = (UChar *)&unk_1EDA47700;
  LOWORD(v34) = 2;
  sub_18C92DCD8(*((_DWORD **)this + 29), a2);
  long long v29 = 0u;
  uint64_t v32 = 0;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v28 = (UChar *)&unk_1EDA47700;
  LOWORD(v29) = 2;
  int v18 = 0;
  int v4 = (int *)*((void *)this + 29);
  if (v4[802] < 1) {
    goto LABEL_32;
  }
  int v5 = 0;
  int v6 = 0;
  while (1)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v24, (UChar **)&v4[16 * (uint64_t)v6 + 2]);
    char v7 = BYTE8(v24);
    uint64_t v8 = (SWORD4(v24) & 0x8000u) == 0 ? WORD4(v24) >> 5 : HIDWORD(v24);
    if (!v8) {
      break;
    }
    __int16 v9 = (unsigned __int16 *)*((void *)&v25 + 1);
    if ((BYTE8(v24) & 2) != 0) {
      __int16 v9 = (unsigned __int16 *)&v24 + 5;
    }
    uint64_t v10 = *v9;
    if (v10 != 39) {
      break;
    }
    if (v5)
    {
      uint64_t v23 = 0;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      long long v19 = &unk_1EDA47700;
      LOWORD(v20) = 2;
      sub_18C92DDCC(*((void *)this + 29), (icu::UnicodeString *)&v19, &v18);
      if ((v20 & 0x8000u) == 0) {
        uint64_t v11 = (unsigned __int16)v20 >> 5;
      }
      else {
        uint64_t v11 = DWORD1(v20);
      }
      icu::UnicodeString::doAppend((uint64_t)&v28, (const icu::UnicodeString *)&v19, 0, v11);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v19);
      goto LABEL_25;
    }
LABEL_26:
    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v24);
    int v6 = v18 + 1;
    int v18 = v6;
    int v4 = (int *)*((void *)this + 29);
    if (v6 >= v4[802]) {
      goto LABEL_32;
    }
  }
  int v13 = sub_18C92DFF8(*((void *)this + 29), (uint64_t)&v24);
  if (v5 && v13) {
    goto LABEL_24;
  }
  if (!v8)
  {
    uint64_t v10 = 0xFFFFLL;
    if (v5) {
      goto LABEL_31;
    }
LABEL_29:
    uint64_t v10 = (unsigned __int16)(((unsigned __int16)(v10 - 86) >> 2) | (((_WORD)v10 - 86) << 14));
    if (v10 <= 9)
    {
      uint64_t v10 = (1 << v10);
      if ((v10 & 0x303) != 0) {
        goto LABEL_31;
      }
    }
    goto LABEL_26;
  }
  int v14 = (unsigned __int16 *)*((void *)&v25 + 1);
  if ((v7 & 2) != 0) {
    int v14 = (unsigned __int16 *)&v24 + 5;
  }
  uint64_t v10 = *v14;
  if (v10 == 109)
  {
LABEL_24:
    icu::UnicodeString::doAppend((uint64_t)&v28, (const icu::UnicodeString *)&v24, 0, v8);
LABEL_25:
    int v5 = 1;
    goto LABEL_26;
  }
  if (v10 != 115)
  {
    if (v5) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  if (v5)
  {
    icu::UnicodeString::doAppend((uint64_t)&v28, (const icu::UnicodeString *)&v24, 0, v8);
    uint64_t v10 = *((unsigned int *)this + 1198);
    if ((int)v10 < 1) {
      icu::DateTimePatternGenerator::addPatternWithSkeleton(this, &v28, 0, 0, &v33, a3);
    }
    else {
      *a3 = v10;
    }
  }
LABEL_31:
  icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v24);
LABEL_32:
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v28);
  return icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v33);
}

void *sub_18C92DCD8(_DWORD *a1, const icu::UnicodeString *a2)
{
  uint64_t v4 = 0;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v8 = 0;
  a1[802] = 0;
  do
  {
    uint64_t result = (void *)(*(uint64_t (**)(_DWORD *, const icu::UnicodeString *, uint64_t, int *))(*(void *)a1 + 16))(a1, a2, v4, &v8);
    if (result != 1) {
      break;
    }
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v9, a2, v4, v8);
    uint64_t v6 = (int)a1[802];
    a1[802] = v6 + 1;
    icu::UnicodeString::operator=((icu::UnicodeString *)&a1[16 * v6 + 2], (icu::UnicodeString *)v9);
    uint64_t result = icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v9);
    uint64_t v4 = (v8 + v4);
  }
  while ((int)a1[802] < 50);
  return result;
}

uint64_t sub_18C92DDCC(uint64_t result, icu::UnicodeString *this, int *a3)
{
  uint64_t v5 = result;
  int v6 = *a3;
  if (*((_WORD *)this + 4)) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = *((_WORD *)this + 4) & 0x1F;
  }
  *((_WORD *)this + 4) = v7;
  uint64_t v8 = result + ((uint64_t)v6 << 6);
  unsigned int v9 = *(unsigned __int16 *)(v8 + 16);
  if (*(__int16 *)(v8 + 16) < 0)
  {
    if (!*(_DWORD *)(v8 + 20)) {
      goto LABEL_16;
    }
  }
  else if (!(v9 >> 5))
  {
    goto LABEL_16;
  }
  uint64_t v10 = (const icu::UnicodeString *)(v8 + 8);
  if ((v9 & 2) != 0) {
    uint64_t v11 = (_WORD *)(v8 + 18);
  }
  else {
    uint64_t v11 = *(_WORD **)(result + ((uint64_t)v6 << 6) + 32);
  }
  if (*v11 == 39)
  {
    int v12 = (__int16)v9;
    unsigned int v13 = v9 >> 5;
    if (v12 >= 0) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = *(unsigned int *)(result + ((uint64_t)v6 << 6) + 20);
    }
    uint64_t result = icu::UnicodeString::doAppend((uint64_t)this, v10, 0, v14);
    ++v6;
  }
LABEL_16:
  int v15 = *(_DWORD *)(v5 + 3208);
  if (v6 >= v15) {
    goto LABEL_52;
  }
  while (1)
  {
    uint64_t v16 = v5 + ((uint64_t)v6 << 6);
    unsigned int v17 = *(unsigned __int16 *)(v16 + 16);
    unsigned int v18 = v17 >> 5;
    if (*(__int16 *)(v16 + 16) < 0) {
      unsigned int v19 = *(_DWORD *)(v16 + 20);
    }
    else {
      unsigned int v19 = v17 >> 5;
    }
    long long v20 = (const icu::UnicodeString *)(v16 + 8);
    int v21 = (__int16)v17;
    if (!v19
      || ((v17 & 2) != 0 ? (long long v22 = (_WORD *)((char *)v20 + 10)) : (long long v22 = *(_WORD **)(v5 + ((uint64_t)v6 << 6) + 32)),
          *v22 != 39))
    {
      if (v21 >= 0) {
        uint64_t v28 = v18;
      }
      else {
        uint64_t v28 = *(unsigned int *)(v5 + ((uint64_t)v6 << 6) + 20);
      }
      uint64_t result = icu::UnicodeString::doAppend((uint64_t)this, v20, 0, v28);
      ++v6;
      goto LABEL_45;
    }
    uint64_t v23 = v6 + 1;
    if (v6 + 1 >= v15) {
      break;
    }
    uint64_t v24 = v5 + (v23 << 6);
    int v26 = *(__int16 *)(v24 + 16);
    long long v25 = (unsigned __int16 *)(v24 + 16);
    unsigned int v27 = (unsigned __int16)v26;
    if (v26 < 0)
    {
      if (!*(_DWORD *)(v5 + (v23 << 6) + 20)) {
        break;
      }
    }
    else if (!(v27 >> 5))
    {
      break;
    }
    long long v29 = (v27 & 2) != 0 ? v25 + 1 : *(unsigned __int16 **)(v5 + (v23 << 6) + 32);
    if (*v29 != 39) {
      break;
    }
    if (v21 >= 0) {
      uint64_t v30 = v18;
    }
    else {
      uint64_t v30 = *(unsigned int *)(v5 + 8 + ((uint64_t)v6 << 6) + 12);
    }
    icu::UnicodeString::doAppend((uint64_t)this, v20, 0, v30);
    v6 += 2;
    unsigned int v31 = *v25;
    int v32 = (__int16)v31;
    unsigned int v33 = v31 >> 5;
    if (v32 >= 0) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = *(unsigned int *)(v5 + 8 + (v23 << 6) + 12);
    }
    uint64_t result = icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)(v25 - 4), 0, v34);
LABEL_45:
    int v15 = *(_DWORD *)(v5 + 3208);
    if (v6 >= v15) {
      goto LABEL_52;
    }
  }
  if (v21 >= 0) {
    uint64_t v35 = v18;
  }
  else {
    uint64_t v35 = *(unsigned int *)(v5 + ((uint64_t)v6 << 6) + 20);
  }
  uint64_t result = icu::UnicodeString::doAppend((uint64_t)this, v20, 0, v35);
LABEL_52:
  *a3 = v6;
  return result;
}

uint64_t sub_18C92DFF8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0;
  unint64_t v3 = *(unsigned __int16 *)(a2 + 8);
  uint64_t v4 = a2 + 10;
  if ((v3 & 2) == 0) {
    uint64_t v4 = *(void *)(a2 + 24);
  }
  uint64_t v5 = (unsigned __int16 *)(a1 + 16);
  if ((v3 & 0x8000) != 0) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v6 = v3 >> 5;
  if (v2 >= v3 >> 5) {
    return 1;
  }
  while (1)
  {
    if (v6 <= v2
      || ((v7 = *(unsigned __int16 *)(v4 + 2 * v2) - 32, BOOL v8 = v7 > 0x3C, v9 = (1 << v7) & 0x1000000004003085, !v8)
        ? (BOOL v10 = v9 == 0)
        : (BOOL v10 = 1),
          v10))
    {
      unsigned int v11 = *v5;
      if ((__int16)*v5 < 0)
      {
        uint64_t result = *((unsigned int *)v5 + 1);
        if (!result) {
          return result;
        }
      }
      else
      {
        uint64_t result = v11 >> 5;
        if (!result) {
          return result;
        }
      }
      unsigned int v13 = (v11 & 2) != 0 ? v5 + 1 : (unsigned __int16 *)*((void *)v5 + 2);
      if (*v13 != 46) {
        return 0;
      }
    }
    ++v2;
    v5 += 32;
    if ((v3 & 0x8000) == 0) {
      goto LABEL_4;
    }
LABEL_6:
    unint64_t v6 = *(unsigned int *)(a2 + 12);
    if ((uint64_t)v2 >= *(int *)(a2 + 12)) {
      return 1;
    }
  }
}

uint64_t icu::DateTimePatternGenerator::addPattern(icu::DateTimePatternGenerator *this, UChar **a2, int a3, UChar **a4, UErrorCode *a5)
{
  UErrorCode v5 = *((_DWORD *)this + 1198);
  if (v5 < U_ILLEGAL_ARGUMENT_ERROR) {
    return icu::DateTimePatternGenerator::addPatternWithSkeleton(this, a2, 0, a3, a4, a5);
  }
  *a5 = v5;
  return 0;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::consumeShortTimePattern(icu::DateTimePatternGenerator *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0) {
    return (icu::DateTimePatternGenerator *)icu::DateTimePatternGenerator::hackTimes(this, a2, a3);
  }
  return this;
}

void sub_18C92E114(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C92E140(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C92E168(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4BED8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 24));

  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
}

void sub_18C92E1BC(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA4BED8;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 24));
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);

  icu::UMemory::operator delete(v3);
}

void *sub_18C92E214(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(v7, 0, sizeof(v7));
  unint64_t v6 = "{";
  icu::UnicodeString::UnicodeString(v7, 1, &v6);
  for (uint64_t i = 272; i != 1296; i += 64)
  {
    unint64_t v3 = *(char **)(a1 + 8);
    if (*(unsigned __int16 *)&v3[i] <= 0x1Fu)
    {
      uint64_t v4 = (UChar **)&v3[i - 8];
      icu::UnicodeString::operator=(v4, (UChar **)v7);
      icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v4);
    }
  }
  return icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v7);
}

void *sub_18C92E2EC(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  do
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v4 + 192 * v3;
    if (*(unsigned __int16 *)(v5 + 1296) < 0x20u)
    {
      v14[0] = 70;
      if (*(__int16 *)(v5 + 1296) < 0) {
        uint64_t v6 = *(unsigned int *)(v4 + 192 * v3 + 1300);
      }
      else {
        uint64_t v6 = *(unsigned __int16 *)(v5 + 1296) >> 5;
      }
      unsigned int v7 = (icu::UnicodeString *)(v5 + 1288);
      icu::UnicodeString::doReplace(v5 + 1288, 0, v6, (uint64_t)v14, 0, 1);
      if (v3 > 9)
      {
        v14[0] = 49;
        icu::UnicodeString::doAppend((uint64_t)v7, (uint64_t)v14, 0, 1);
        __int16 v8 = v3 + 38;
      }
      else
      {
        __int16 v8 = v3 + 48;
      }
      v14[0] = v8;
      icu::UnicodeString::doAppend((uint64_t)v7, (uint64_t)v14, 0, 1);
      uint64_t result = (void *)icu::UnicodeString::getTerminatedBuffer(v7);
    }
    for (uint64_t i = 0; i != 128; i += 64)
    {
      uint64_t v10 = v1[1];
      if (*(unsigned __int16 *)(v10 + v2 + i + 1360) <= 0x1Fu)
      {
        uint64_t v11 = v10 + v2 + i;
        int v12 = (icu::UnicodeString *)(v11 + 1352);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v14, (UChar **)(v11 + 1288));
        icu::UnicodeString::operator=(v12, (icu::UnicodeString *)v14);
        uint64_t result = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v14);
      }
    }
    ++v3;
    v2 += 192;
  }
  while (v3 != 16);
  return result;
}

unsigned char ***icu::DateTimePatternGenerator::initHashtable(unsigned char ***this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v2 = this;
    if (!this[586])
    {
      uint64_t v4 = (int32x2_t *)icu::UMemory::operator new(0, (icu::UMemory *)0x58, (unint64_t)a2);
      if (v4)
      {
        uint64_t v5 = v4;
        *uint64_t v4 = 0;
        if (*(int *)a2 <= 0
          && (uint64_t v6 = v4 + 1,
              uhash_init(v4 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a2),
              *(int *)a2 <= 0))
        {
          int32x2_t *v5 = (int32x2_t)v6;
          uhash_setKeyDeleter((uint64_t)&v5[1], (uint64_t)uprv_deleteUObject);
          int v7 = *a2;
          __int16 v8 = v5;
          if (v7 <= 0)
          {
            __int16 v8 = 0;
            v2[586] = (unsigned char **)v5;
          }
        }
        else
        {
          __int16 v8 = v5;
        }
      }
      else
      {
        __int16 v8 = 0;
        if (*(int *)a2 <= 0) {
          *a2 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
      return sub_18C8FF2F0((unsigned char ***)&v8);
    }
  }
  return this;
}

uint64_t icu::DateTimePatternGenerator::setAppendItemFormat(uint64_t a1, unsigned int a2, UChar **a3)
{
  unint64_t v3 = (UChar **)(a1 + ((unint64_t)a2 << 6) + 264);
  icu::UnicodeString::operator=(v3, a3);

  return icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v3);
}

unint64_t icu::DateTimePatternGenerator::getAppendItemFormat(uint64_t a1, unsigned int a2)
{
  return a1 + ((unint64_t)a2 << 6) + 264;
}

uint64_t icu::DateTimePatternGenerator::setAppendItemName(uint64_t a1, unsigned int a2, UChar **a3)
{
  unint64_t v3 = (UChar **)(a1 + 192 * a2 + 1288);
  icu::UnicodeString::operator=(v3, a3);

  return icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v3);
}

uint64_t icu::DateTimePatternGenerator::setFieldDisplayName(uint64_t a1, unsigned int a2, unsigned int a3, UChar **a4)
{
  uint64_t v4 = (UChar **)(a1 + 192 * a2 + ((unint64_t)a3 << 6) + 1288);
  icu::UnicodeString::operator=(v4, a4);

  return icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v4);
}

uint64_t icu::DateTimePatternGenerator::getAppendItemName(uint64_t a1, unsigned int a2)
{
  return a1 + 192 * a2 + 1288;
}

icu::UnicodeString *icu::DateTimePatternGenerator::getFieldDisplayName@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, icu::UnicodeString *a4@<X8>)
{
  return icu::UnicodeString::UnicodeString(a4, (UChar **)(a1 + 192 * a2 + ((unint64_t)a3 << 6) + 1288));
}

unint64_t icu::DateTimePatternGenerator::getMutableFieldDisplayName(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return a1 + 192 * a2 + ((unint64_t)a3 << 6) + 1288;
}

uint64_t icu::DateTimePatternGenerator::getAppendName(uint64_t a1, unsigned int a2, uint64_t a3)
{
  __int16 v18 = 39;
  unsigned int v6 = *(unsigned __int16 *)(a3 + 8);
  int v7 = (__int16)v6;
  unsigned int v8 = v6 >> 5;
  if (v7 >= 0) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = *(unsigned int *)(a3 + 12);
  }
  icu::UnicodeString::doReplace(a3, 0, v9, (uint64_t)&v18, 0, 1);
  uint64_t v10 = a1 + 192 * a2;
  uint64_t v11 = (const icu::UnicodeString *)(v10 + 1288);
  unsigned int v12 = *(unsigned __int16 *)(v10 + 1296);
  int v13 = (__int16)v12;
  unsigned int v14 = v12 >> 5;
  unsigned int v15 = *(_DWORD *)(v10 + 1300);
  if (v13 >= 0) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = v15;
  }
  icu::UnicodeString::doAppend(a3, v11, 0, v16);
  __int16 v19 = 39;
  return icu::UnicodeString::doAppend(a3, (uint64_t)&v19, 0, 1);
}

void *icu::DateTimePatternGenerator::getBestPattern@<X0>(icu::DateTimePatternGenerator *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, icu::UnicodeString *a4@<X8>)
{
  return icu::DateTimePatternGenerator::getBestPattern(this, (uint64_t)a2, 0, (int *)a3, a4);
}

void *icu::DateTimePatternGenerator::getBestPattern@<X0>(void *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int *a4@<X3>, icu::UnicodeString *a5@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (*a4 >= 1) {
    goto LABEL_4;
  }
  int v7 = result;
  int v8 = *((_DWORD *)result + 1198);
  if (v8 < 1)
  {
    long long v55 = 0u;
    uint64_t v58 = 0;
    long long v57 = 0u;
    long long v56 = 0u;
    uint64_t v53 = 0;
    long long v54 = (UChar *)&unk_1EDA47700;
    LOWORD(v55) = 2;
    long long v50 = 0u;
    long long v52 = 0u;
    long long v51 = 0u;
    long long v49 = &unk_1EDA47700;
    LOWORD(v50) = 2;
    int v45 = 0;
    memset(v48, 0, sizeof(v48));
    icu::DateTimePatternGenerator::mapSkeletonMetacharacters((uint64_t)result, a2, &v45, a3, a4, (icu::UnicodeString *)v48);
    uint64_t v10 = *a4;
    if ((int)v10 >= 1)
    {
      *(void *)a5 = &unk_1EDA47700;
      *((_WORD *)a5 + 4) = 2;
LABEL_51:
      icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v48);
      icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v49);
      return icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v54);
    }
    if (v50) {
      __int16 v11 = 2;
    }
    else {
      __int16 v11 = v50 & 0x1F;
    }
    LOWORD(v50) = v11;
    int v13 = (_DWORD *)v7[29];
    uint64_t v12 = v7[30];
    uint64_t v68 = 0;
    long long v63 = 0u;
    long long v62 = 0u;
    long long v61 = 0u;
    long long v60 = 0u;
    long long v59 = &unk_1EDA4BF90;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    sub_18C92CB54(v12, (const icu::UnicodeString *)v48, v13, (uint64_t)&v59);
    uint64_t v44 = 0;
    uint64_t BestRaw = icu::DateTimePatternGenerator::getBestRaw((uint64_t)v7, v7[30], -1, v7[31], a4, &v44);
    unsigned int v15 = (const icu::UnicodeString *)BestRaw;
    unsigned int v16 = *(unsigned __int16 *)(BestRaw + 8);
    if ((v16 & 0x8000) != 0) {
      int32_t v17 = *(_DWORD *)(BestRaw + 12);
    }
    else {
      int32_t v17 = v16 >> 5;
    }
    if (icu::UnicodeString::doIndexOf(BestRaw, 0x47u, 0, v17) != -1) {
      *(_DWORD *)(v7[31] + 8) &= ~1u;
    }
    if (*a4 >= 1)
    {
      *(void *)a5 = &unk_1EDA47700;
      uint64_t v10 = 2;
      *((_WORD *)a5 + 4) = 2;
      goto LABEL_51;
    }
    uint64_t v18 = v7[31];
    if (!*(_DWORD *)(v18 + 8) && !*(_DWORD *)(v18 + 12))
    {
      icu::DateTimePatternGenerator::adjustFieldTypes((uint64_t)v7, v15, v44, v45, a3, (uint64_t)&v59);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v49, (icu::UnicodeString *)&v59);
      icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v59);
      icu::UnicodeString::UnicodeString(a5, (icu::UnicodeString *)&v49);
      goto LABEL_51;
    }
    uint64_t v19 = 0;
    int32x4_t v20 = (int32x4_t)xmmword_18CA811A0;
    int8x16_t v21 = 0uLL;
    v22.i64[0] = 0x100000001;
    v22.i64[1] = 0x100000001;
    v23.i64[0] = 0x400000004;
    v23.i64[1] = 0x400000004;
    do
    {
      int8x16_t v21 = vorrq_s8(vbicq_s8((int8x16_t)vshlq_u32(v22, (uint32x4_t)v20), (int8x16_t)vceqzq_s32(*(int32x4_t *)(v7[30] + 16 + v19))), v21);
      int32x4_t v20 = vaddq_s32(v20, v23);
      v19 += 16;
    }
    while (v19 != 64);
    int8x8_t v24 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
    __int16 v25 = v24.i16[0] | v24.i16[2];
    memset(v47, 0, sizeof(v47));
    char v26 = v45;
    icu::DateTimePatternGenerator::getBestAppending(v7, (v24.i16[0] | v24.i16[2]) & 0x3FF, v45, a4, a3, (icu::UnicodeString *)v47);
    memset(v46, 0, sizeof(v46));
    icu::DateTimePatternGenerator::getBestAppending(v7, v25 & 0xFC00, v26, a4, a3, (icu::UnicodeString *)v46);
    if (*a4 >= 1)
    {
      *(void *)a5 = &unk_1EDA47700;
      uint64_t v27 = 2;
      *((_WORD *)a5 + 4) = 2;
LABEL_50:
      icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)v46);
      icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v47);
      goto LABEL_51;
    }
    if ((SWORD4(v47[0]) & 0x8000u) == 0) {
      int v28 = WORD4(v47[0]) >> 5;
    }
    else {
      int v28 = HIDWORD(v47[0]);
    }
    if (v28)
    {
      int v29 = HIDWORD(v46[0]);
      int v30 = WORD4(v46[0]) >> 5;
    }
    else
    {
      int v30 = WORD4(v46[0]) >> 5;
      int v29 = HIDWORD(v46[0]);
      if ((SWORD4(v46[0]) & 0x8000u) == 0) {
        int v37 = WORD4(v46[0]) >> 5;
      }
      else {
        int v37 = HIDWORD(v46[0]);
      }
      if (v37)
      {
        uint64_t v38 = (icu::UnicodeString *)v46;
LABEL_49:
        icu::UnicodeString::UnicodeString(a5, v38);
        goto LABEL_50;
      }
      if (v50) {
        __int16 v43 = 2;
      }
      else {
        __int16 v43 = v50 & 0x1F;
      }
      LOWORD(v50) = v43;
    }
    if ((SWORD4(v46[0]) & 0x8000u) == 0) {
      int v31 = v30;
    }
    else {
      int v31 = v29;
    }
    if (v31)
    {
      if (v50) {
        __int16 v32 = 2;
      }
      else {
        __int16 v32 = v50 & 0x1F;
      }
      LOWORD(v50) = v32;
      *a4 = 0;
      uint64_t v33 = v7[30];
      int v34 = *(char *)(v33 + 131);
      if (v34 == 3)
      {
        unsigned int v35 = 2;
      }
      else if (v34 == 4)
      {
        unsigned int v35 = *(char *)(v33 + 134) < 1;
      }
      else
      {
        unsigned int v35 = 3;
      }
      DateTimeFormat = (UChar **)icu::DateTimePatternGenerator::getDateTimeFormat((uint64_t)v7, v35, a4);
      icu::UnicodeString::operator=(&v54, DateTimeFormat);
      *(void *)&long long v60 = &unk_1EDA47700;
      WORD4(v60) = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v59, (const icu::UnicodeString *)&v54, 2, 2, 0, (UErrorCode *)a4);
      icu::SimpleFormatter::format((icu::SimpleFormatter *)&v59, (const icu::UnicodeString *)v46, (const icu::UnicodeString *)v47, (icu::UnicodeString *)&v49, (UErrorCode *)a4);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v59);
      uint64_t v38 = (icu::UnicodeString *)&v49;
    }
    else
    {
      uint64_t v38 = (icu::UnicodeString *)v47;
    }
    goto LABEL_49;
  }
  *a4 = v8;
LABEL_4:
  *(void *)a5 = &unk_1EDA47700;
  *((_WORD *)a5 + 4) = 2;
  return result;
}

void *icu::DateTimePatternGenerator::mapSkeletonMetacharacters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, _DWORD *a5@<X4>, icu::UnicodeString *a6@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v50 = 0;
  long long v49 = 0u;
  uint64_t v46 = &unk_1EDA47700;
  LOWORD(v47) = 2;
  int v6 = *(unsigned __int16 *)(a1 + 4760);
  if ((a4 & 0x60000000) == 0x20000000) {
    int v6 = 104;
  }
  if ((a4 & 0x60000000) == 0x40000000) {
    int v7 = 72;
  }
  else {
    int v7 = v6;
  }
  unsigned int v8 = *(unsigned __int16 *)(a2 + 8);
  int v9 = (__int16)v8;
  unsigned int v10 = v8 >> 5;
  if (v9 >= 0) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = *(unsigned int *)(a2 + 12);
  }
  if ((int)v11 < 1) {
    goto LABEL_82;
  }
  int v13 = 0;
  BOOL v14 = 0;
  uint64_t v15 = a2 + 10;
  uint64_t v16 = a1 + 4764;
  do
  {
    unsigned int v17 = *(unsigned __int16 *)(a2 + 8);
    unsigned int v18 = v17 >> 5;
    if ((v17 & 0x8000u) != 0) {
      unsigned int v18 = *(_DWORD *)(a2 + 12);
    }
    if (v18 <= v13)
    {
      int v20 = 0xFFFF;
    }
    else
    {
      uint64_t v19 = *(void *)(a2 + 24);
      if ((v17 & 2) != 0) {
        uint64_t v19 = v15;
      }
      int v20 = *(unsigned __int16 *)(v19 + 2 * v13);
      if (v20 == 39)
      {
        BOOL v14 = !v14;
        goto LABEL_81;
      }
    }
    if (v14)
    {
      BOOL v14 = 1;
      goto LABEL_81;
    }
    if (v20 != 106)
    {
      if (v20 == 74)
      {
        __int16 v45 = 72;
        icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)&v45, 0, 1);
        BOOL v14 = 0;
        *a3 |= 2u;
        goto LABEL_81;
      }
      if (v20 != 67)
      {
        __int16 v45 = v20;
        icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)&v45, 0, 1);
        BOOL v14 = 0;
        goto LABEL_81;
      }
    }
    int v21 = v13 + 1;
    if (v13 + 1 >= (int)v11)
    {
      int v28 = 1;
      int v29 = 1;
    }
    else
    {
      uint64_t v22 = 0;
      if ((v17 & 2) != 0) {
        uint64_t v23 = v15;
      }
      else {
        uint64_t v23 = *(void *)(a2 + 24);
      }
      unsigned int v24 = v11 - 1 - v13;
      uint64_t v25 = v23 + 2 * v21;
      uint64_t v26 = v11 - v21;
      while (1)
      {
        int v27 = v18 <= v13 + (int)v22 + 1 ? 0xFFFF : *(unsigned __int16 *)(v25 + 2 * v22);
        if (v27 != v20) {
          break;
        }
        if (v26 == ++v22)
        {
          int v13 = v11 - 1;
          goto LABEL_39;
        }
      }
      v13 += v22;
      unsigned int v24 = v22;
LABEL_39:
      int v28 = (v24 & 1) + 1;
      if (v24 <= 1) {
        int v29 = 1;
      }
      else {
        int v29 = (v24 >> 1) + 3;
      }
    }
    if (v20 == 106)
    {
      __int16 v30 = 97;
      int v31 = v7;
      goto LABEL_74;
    }
    if (*(_DWORD *)(a1 + 4764) == -1)
    {
      *a5 = 3;
      *(void *)a6 = &unk_1EDA47700;
      uint64_t v39 = 2;
      *((_WORD *)a6 + 4) = 2;
      return icu::UnicodeString::~UnicodeString((void *)v39, (icu::UnicodeString *)&v46);
    }
    unint64_t v32 = 0;
    while (1)
    {
      unsigned int v33 = *(_DWORD *)(v16 + 4 * v32);
      if (v33 + 1 > 0xA)
      {
LABEL_56:
        if (v7 == 75 || v7 == 104) {
          goto LABEL_60;
        }
        goto LABEL_50;
      }
      if (((1 << (v33 + 1)) & 0x614) != 0)
      {
        if (v7 == 72 || v7 == 107) {
          goto LABEL_60;
        }
LABEL_50:
        int v34 = -1;
        goto LABEL_51;
      }
      int v34 = *(_DWORD *)(a1 + 4764);
      if (v33 != -1) {
        goto LABEL_56;
      }
LABEL_51:
      if (v34 != -1) {
        break;
      }
      unsigned int v33 = -1;
      if (v32++ >= 6) {
        goto LABEL_60;
      }
    }
    unsigned int v33 = v34;
LABEL_60:
    if (v33 > 9) {
      goto LABEL_67;
    }
    if (((1 << v33) & 0xC4) != 0)
    {
      int v31 = 75;
    }
    else
    {
      if (((1 << v33) & 0x302) != 0)
      {
        int v31 = 72;
        goto LABEL_68;
      }
      if (v33 == 3)
      {
        int v31 = 107;
        goto LABEL_73;
      }
LABEL_67:
      int v31 = 104;
    }
LABEL_68:
    if (v33 > 9) {
      goto LABEL_73;
    }
    int v36 = 1 << v33;
    if ((v36 & 0x150) != 0)
    {
      __int16 v30 = 98;
      goto LABEL_74;
    }
    if ((v36 & 0x2A0) == 0)
    {
LABEL_73:
      __int16 v30 = 97;
      goto LABEL_74;
    }
    __int16 v30 = 66;
LABEL_74:
    if (v31 != 72 && v31 != 107)
    {
      int v37 = v29 + 1;
      do
      {
        __int16 v45 = v30;
        icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)&v45, 0, 1);
        --v37;
      }
      while (v37 > 1);
    }
    unsigned int v38 = v28 + 1;
    do
    {
      __int16 v45 = v31;
      icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)&v45, 0, 1);
      --v38;
    }
    while (v38 > 1);
    BOOL v14 = 0;
LABEL_81:
    ++v13;
  }
  while (v13 < (int)v11);
LABEL_82:
  icu::UnicodeString::UnicodeString(a6, (icu::UnicodeString *)&v46);
  return icu::UnicodeString::~UnicodeString((void *)v39, (icu::UnicodeString *)&v46);
}

uint64_t icu::DateTimePatternGenerator::getBestRaw(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5, void *a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v31 = &unk_1EDA4C0A0;
  uint64_t v32 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  sub_18C931BA4((uint64_t)&v27, a5);
  uint64_t v12 = 0;
  if (*a5 <= 0)
  {
    uint64_t v29 = *(void *)(a1 + 256);
    if (sub_18C9307C4((uint64_t)&v27))
    {
      uint64_t v24 = a2;
      uint64_t v12 = 0;
      int v25 = -1;
      int v26 = 0x7FFFFFFF;
      do
      {
        uint64_t v42 = 0;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v33 = 0u;
        uint64_t v14 = sub_18C930828((uint64_t)&v27);
        *(void *)&long long v33 = &unk_1EDA4BF28;
        *((void *)&v33 + 1) = &unk_1EDA4BF90;
        LOBYTE(v42) = 0;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v15 = *(_OWORD *)(v14 + 64);
        long long v17 = *(_OWORD *)(v14 + 16);
        long long v16 = *(_OWORD *)(v14 + 32);
        long long v36 = *(_OWORD *)(v14 + 48);
        long long v37 = v15;
        long long v34 = v17;
        long long v35 = v16;
        long long v18 = *(_OWORD *)(v14 + 96);
        long long v38 = *(_OWORD *)(v14 + 80);
        long long v39 = v18;
        long long v19 = *(_OWORD *)(v14 + 128);
        long long v40 = *(_OWORD *)(v14 + 112);
        long long v41 = v19;
        LOBYTE(v42) = *(unsigned char *)(v14 + 144);
        if (!sub_18C930900(&v33, *(void **)(a1 + 4680)))
        {
          int v20 = sub_18C930938(v24, (uint64_t)&v33, a3, (uint64_t)&v31);
          int v21 = v20;
          int v22 = v32;
          if (v20 < v26 || v20 == v26 && v25 < (int)v32)
          {
            uint64_t v12 = sub_18C9301D4(*(void *)(a1 + 256), (void *)&v33 + 1, &v30);
            int v23 = HIDWORD(v32);
            *(_DWORD *)(a4 + 8) = v22;
            *(_DWORD *)(a4 + 12) = v23;
            if (!v21) {
              break;
            }
            int v25 = v22;
            int v26 = v21;
          }
        }
      }
      while (sub_18C9307C4((uint64_t)&v27));
      if (a6 && v12) {
        *a6 = v30;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  *(void *)&long long v27 = &unk_1EDA4BF70;
  if (*((void *)&v28 + 1)) {
    (*(void (**)(void))(**((void **)&v28 + 1) + 8))(*((void *)&v28 + 1));
  }
  return v12;
}

void *icu::DateTimePatternGenerator::adjustFieldTypes@<X0>(uint64_t a1@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a6 + 8) = 0u;
  *(void *)(a6 + 56) = 0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(void *)a6 = &unk_1EDA47700;
  *(_WORD *)(a6 + 8) = 2;
  uint64_t result = sub_18C92DCD8(*(_DWORD **)(a1 + 232), a2);
  int v63 = 0;
  uint64_t v10 = *(void *)(a1 + 232);
  if (*(int *)(v10 + 3208) >= 1)
  {
    int v11 = 0;
    do
    {
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v69, (UChar **)(v10 + ((uint64_t)v11 << 6) + 8));
      char v12 = BYTE8(v69);
      if ((SWORD4(v69) & 0x8000u) == 0) {
        uint64_t v13 = WORD4(v69) >> 5;
      }
      else {
        uint64_t v13 = HIDWORD(v69);
      }
      if (!v13) {
        goto LABEL_131;
      }
      uint64_t v14 = (_WORD *)*((void *)&v70 + 1);
      if ((BYTE8(v69) & 2) != 0) {
        uint64_t v14 = (_WORD *)&v69 + 5;
      }
      if (*v14 == 39)
      {
        uint64_t v68 = 0;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v65 = 0u;
        long long v64 = &unk_1EDA47700;
        LOWORD(v65) = 2;
        sub_18C92DDCC(*(void *)(a1 + 232), (icu::UnicodeString *)&v64, &v63);
        if ((v65 & 0x8000u) == 0) {
          uint64_t v15 = (unsigned __int16)v65 >> 5;
        }
        else {
          uint64_t v15 = DWORD1(v65);
        }
        icu::UnicodeString::doAppend(a6, (const icu::UnicodeString *)&v64, 0, v15);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v64);
      }
      else
      {
LABEL_131:
        if (!sub_18C92DFF8(*(void *)(a1 + 232), (uint64_t)&v69))
        {
          unsigned int v18 = sub_18C931A98((uint64_t)&v69, 1);
          if ((v18 & 0x80000000) == 0)
          {
            unsigned int v19 = v18 & 0xFFFFFFFE;
            if ((a4 & 1) != 0 && v19 == 64)
            {
              unsigned int v20 = *(unsigned __int16 *)(a1 + 4624);
              int v21 = (__int16)v20;
              unsigned int v22 = v20 >> 5;
              if (v21 >= 0) {
                uint64_t v23 = v22;
              }
              else {
                uint64_t v23 = *(unsigned int *)(a1 + 4628);
              }
              icu::UnicodeString::doAppend((uint64_t)&v69, (const icu::UnicodeString *)(a1 + 4616), 0, v23);
              sub_18C930A38(*(void *)(a1 + 240) + 80, 14, (uint64_t)&v69);
              goto LABEL_124;
            }
            uint64_t v24 = *(int *)&aG_1[16 * v18 + 4];
            uint64_t v25 = *(void *)(a1 + 240);
            if (!*(_DWORD *)(v25 + 4 * v24 + 16))
            {
LABEL_124:
              if ((SWORD4(v69) & 0x8000u) == 0) {
                uint64_t v60 = WORD4(v69) >> 5;
              }
              else {
                uint64_t v60 = HIDWORD(v69);
              }
              icu::UnicodeString::doAppend(a6, (const icu::UnicodeString *)&v69, 0, v60);
              goto LABEL_128;
            }
            uint64_t v26 = v25 + v24;
            int v27 = *(char *)(v26 + 80);
            int v28 = *(char *)(v26 + 96);
            BOOL v29 = v28 < 3 && v27 == 69;
            if (v29) {
              int v30 = 3;
            }
            else {
              int v30 = v28;
            }
            unint64_t v31 = v18 - 56;
            BOOL v33 = (a5 & 0x1000) == 0 && v18 == 63;
            BOOL v35 = (a5 & 0x2000) == 0 && v19 == 64;
            BOOL v36 = v31 < 7 && (a5 & 0x800) == 0;
            int v37 = v13;
            if (!v36)
            {
              int v37 = v13;
              if (!v33)
              {
                int v37 = v13;
                if (!v35)
                {
                  if (!a3 || v27 == 99)
                  {
                    int v37 = v30;
                  }
                  else
                  {
                    int v37 = v30;
                    if (v27 != 101)
                    {
                      int v38 = *(__int16 *)&aG_1[16 * v18 + 8];
                      BOOL v39 = v38 < 1;
                      int v40 = *(_DWORD *)(a3 + 4 * v24 + 8);
                      BOOL v41 = v40 <= 0;
                      BOOL v42 = v40 > 0;
                      if (!v41) {
                        BOOL v39 = 1;
                      }
                      int v43 = *(char *)(a3 + v24 + 88);
                      BOOL v44 = v38 < 1 && v42;
                      BOOL v29 = v30 == v43;
                      int v45 = !v39;
                      if (v29) {
                        int v45 = 1;
                      }
                      if (v45 | v44) {
                        int v37 = v13;
                      }
                      else {
                        int v37 = v30;
                      }
                    }
                  }
                }
              }
            }
            if ((unint64_t)v18 - 63 > 0xFFFFFFFFFFFFFFF8
              || (unint64_t)v18 - 27 > 0xFFFFFFFFFFFFFFF6
              || (unint64_t)v18 - 43 > 0xFFFFFFFFFFFFFFF1)
            {
              if (!v13)
              {
                __int16 v47 = -1;
LABEL_80:
                if (v37 < 3 && v47 == 69) {
                  __int16 v50 = 101;
                }
                else {
                  __int16 v50 = v47;
                }
                if (v31 <= 6 && *(_WORD *)(a1 + 4760))
                {
                  int v51 = icu::DateTimePatternGenerator::defaultHourPeriodCharForHourCycle(a1, a5);
                  __int16 v52 = (a5 & 0x20000000) != 0 ? 104 : v51;
                  __int16 v53 = (a5 & 0x20000000) != 0 ? 104 : v50;
                  if ((a5 & 0x40000000) != 0)
                  {
                    __int16 v52 = 72;
                    __int16 v54 = 72;
                  }
                  else
                  {
                    __int16 v54 = v53;
                  }
                  unsigned __int16 v55 = (a4 & 2) != 0 ? v52 : v27;
                  __int16 v56 = (a4 & 2) != 0 ? v54 : v50;
                  __int16 v50 = v51;
                  if (v51 != v55)
                  {
                    if (v55 == 104 && v51 == 75)
                    {
                      __int16 v50 = 75;
                    }
                    else if (v55 == 72 && v51 == 107)
                    {
                      __int16 v50 = 107;
                    }
                    else if (v55 == 107 && v51 == 72)
                    {
                      __int16 v50 = 72;
                    }
                    else if (v51 == 104 && v55 == 75)
                    {
                      __int16 v50 = 104;
                    }
                    else
                    {
                      __int16 v50 = v56;
                    }
                  }
                }
                __int16 v58 = v12 & 0x1F;
                if (v12) {
                  __int16 v58 = 2;
                }
                WORD4(v69) = v58;
                if (v37 >= 1)
                {
                  unsigned int v59 = v37 + 1;
                  do
                  {
                    LOWORD(v64) = v50;
                    icu::UnicodeString::doAppend((uint64_t)&v69, (uint64_t)&v64, 0, 1);
                    --v59;
                  }
                  while (v59 > 1);
                }
                goto LABEL_124;
              }
            }
            else
            {
              BOOL v46 = (unint64_t)v18 - 10 < 0xFFFFFFFFFFFFFFF9 || v27 == 89;
              if (v46) {
                __int16 v47 = v27;
              }
              else {
                __int16 v47 = -1;
              }
              if (v46 || !v13) {
                goto LABEL_80;
              }
            }
            long long v48 = (__int16 *)*((void *)&v70 + 1);
            if ((v12 & 2) != 0) {
              long long v48 = (__int16 *)&v69 + 5;
            }
            __int16 v47 = *v48;
            goto LABEL_80;
          }
        }
        icu::UnicodeString::doAppend(a6, (const icu::UnicodeString *)&v69, 0, v13);
      }
LABEL_128:
      uint64_t result = icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v69);
      int v11 = v63 + 1;
      int v63 = v11;
      uint64_t v10 = *(void *)(a1 + 232);
    }
    while (v11 < *(_DWORD *)(v10 + 3208));
  }
  return result;
}

void *icu::DateTimePatternGenerator::getBestAppending@<X0>(void *result@<X0>, int a2@<W1>, char a3@<W2>, int *a4@<X3>, int a5@<W4>, icu::UnicodeString *a6@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*a4 >= 1)
  {
    *(void *)a6 = &unk_1EDA47700;
    *((_WORD *)a6 + 4) = 2;
    return result;
  }
  long long v46 = 0u;
  uint64_t v49 = 0;
  long long v48 = 0u;
  long long v47 = 0u;
  int v45 = (UChar *)&unk_1EDA47700;
  LOWORD(v46) = 2;
  long long v41 = 0u;
  uint64_t v44 = 0;
  long long v43 = 0u;
  long long v42 = 0u;
  int v40 = (UChar *)&unk_1EDA47700;
  LOWORD(v41) = 2;
  if (!a2) {
    goto LABEL_22;
  }
  uint64_t v11 = (uint64_t)result;
  unint64_t v31 = &unk_1EDA47700;
  LOWORD(v32) = 2;
  icu::UnicodeString::operator=((icu::UnicodeString *)&v45, (icu::UnicodeString *)&v31);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v31);
  uint64_t v30 = 0;
  uint64_t BestRaw = (UChar **)icu::DateTimePatternGenerator::getBestRaw(v11, *(void *)(v11 + 240), a2, *(void *)(v11 + 248), a4, &v30);
  if (*a4 < 1)
  {
    icu::UnicodeString::operator=(&v40, BestRaw);
    icu::DateTimePatternGenerator::adjustFieldTypes(v11, (const icu::UnicodeString *)&v40, v30, a3, a5, (uint64_t)&v31);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v45, (icu::UnicodeString *)&v31);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v31);
    uint64_t v16 = *(void *)(v11 + 248);
    unsigned int v17 = *(_DWORD *)(v16 + 8);
    if (v17)
    {
      if ((~a2 & 0x6000) != 0
        || (*(_DWORD *)(v16 + 8) & 0x6000) != 0x4000
        || (icu::DateTimePatternGenerator::adjustFieldTypes(v11, (const icu::UnicodeString *)&v45, v30, a3 | 1, a5, (uint64_t)&v31), icu::UnicodeString::operator=((icu::UnicodeString *)&v45, (icu::UnicodeString *)&v31), icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v31), uint64_t v16 = *(void *)(v11 + 248), v17 = *(_DWORD *)(v16 + 8) & 0xFFFFBFFF, (*(_DWORD *)(v16 + 8) = v17) != 0))
      {
        unsigned int v19 = (UChar **)icu::DateTimePatternGenerator::getBestRaw(v11, *(void *)(v11 + 240), v17, v16, a4, &v30);
        if (*a4 >= 1) {
          goto LABEL_5;
        }
        icu::UnicodeString::operator=(&v40, v19);
        icu::DateTimePatternGenerator::adjustFieldTypes(v11, (const icu::UnicodeString *)&v40, v30, a3, a5, (uint64_t)&v31);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v40, (icu::UnicodeString *)&v31);
        icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v31);
        int v21 = v17 & ~*(_DWORD *)(*(void *)(v11 + 248) + 8);
        if (v21)
        {
          unsigned int v22 = -1;
          do
          {
            ++v22;
            BOOL v23 = v21 > 1;
            v21 >>= 1;
          }
          while (v23);
          if (v22 >= 0xF) {
            unsigned int v22 = 15;
          }
        }
        else
        {
          unsigned int v22 = 0;
        }
        unsigned int v24 = v22;
        unint64_t v25 = v11 + ((unint64_t)v22 << 6);
        if (*(__int16 *)(v25 + 272) < 0) {
          int v26 = *(_DWORD *)(v25 + 276);
        }
        else {
          int v26 = *(unsigned __int16 *)(v25 + 272) >> 5;
        }
        if (v26)
        {
          int v27 = (const icu::UnicodeString *)(v25 + 264);
          long long v36 = 0u;
          uint64_t v39 = 0;
          long long v38 = 0u;
          long long v37 = 0u;
          BOOL v35 = &unk_1EDA47700;
          LOWORD(v36) = 2;
          icu::DateTimePatternGenerator::getAppendName(v11, v24, (uint64_t)&v35);
          v34[0] = (icu::UnicodeString *)&v45;
          v34[1] = (icu::UnicodeString *)&v40;
          v34[2] = (icu::UnicodeString *)&v35;
          uint64_t v32 = &unk_1EDA47700;
          __int16 v33 = 2;
          icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v31, v27, 2, 3, 0, (UErrorCode *)a4);
          icu::SimpleFormatter::formatAndReplace((icu::SimpleFormatter *)&v31, v34, 3u, &v45, 0, 0, (UErrorCode *)a4);
          icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v31);
          icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v35);
        }
      }
    }
LABEL_22:
    icu::UnicodeString::UnicodeString(a6, (icu::UnicodeString *)&v45);
    goto LABEL_23;
  }
LABEL_5:
  *(void *)a6 = &unk_1EDA47700;
  uint64_t v14 = 2;
  *((_WORD *)a6 + 4) = 2;
LABEL_23:
  icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v40);
  return icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v45);
}

void *icu::DateTimePatternGenerator::getDateTimeFormat(uint64_t a1, unsigned int a2, int *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9192240, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a3;
    unsigned int v6 = a2;
    int v7 = __cxa_guard_acquire(&qword_1E9192240);
    a2 = v6;
    a3 = v5;
    int v8 = v7;
    a1 = v4;
    if (v8)
    {
      int v9 = &unk_18CAA19F2;
      icu::UnicodeString::UnicodeString(&unk_1E9192200, 1, &v9);
      __cxa_atexit((void (*)(void *))icu::UnicodeString::~UnicodeString, &unk_1E9192200, &dword_18C7E8000);
      __cxa_guard_release(&qword_1E9192240);
      a2 = v6;
      a1 = v4;
      a3 = v5;
    }
  }
  if (*a3 <= 0)
  {
    if (a2 < 4) {
      return (void *)(a1 + ((unint64_t)a2 << 6) + 4360);
    }
    *a3 = 1;
  }
  return &unk_1E9192200;
}

void *icu::DateTimePatternGenerator::replaceFieldTypes@<X0>(icu::DateTimePatternGenerator *this@<X0>, const icu::UnicodeString *a2@<X1>, const icu::UnicodeString *a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  return icu::DateTimePatternGenerator::replaceFieldTypes(this, a2, a3, 0, (int *)a4, a5);
}

void *icu::DateTimePatternGenerator::replaceFieldTypes@<X0>(void *result@<X0>, const icu::UnicodeString *a2@<X1>, const icu::UnicodeString *a3@<X2>, int a4@<W3>, int *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*a5 < 1)
  {
    uint64_t v7 = (uint64_t)result;
    int v8 = *((_DWORD *)result + 1198);
    if (v8 < 1)
    {
      char v12 = (_DWORD *)*((void *)result + 29);
      uint64_t v11 = *((void *)result + 30);
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t v13 = &unk_1EDA4BF90;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      uint64_t v22 = 0;
      sub_18C92CB54(v11, a3, v12, (uint64_t)&v13);
      *(_OWORD *)(a6 + 32) = 0u;
      *(_OWORD *)(a6 + 48) = 0u;
      *(_OWORD *)a6 = 0u;
      *(_OWORD *)(a6 + 16) = 0u;
      return icu::DateTimePatternGenerator::adjustFieldTypes(v7, a2, 0, 0, a4, a6);
    }
    *a5 = v8;
  }
  *(void *)a6 = &unk_1EDA47700;
  *(_WORD *)(a6 + 8) = 2;
  return result;
}

uint64_t icu::DateTimePatternGenerator::setDecimal(UChar **this, UChar **a2)
{
  uint64_t v2 = (icu::UnicodeString *)(this + 577);
  icu::UnicodeString::operator=(this + 577, a2);

  return icu::UnicodeString::getTerminatedBuffer(v2);
}

uint64_t icu::DateTimePatternGenerator::getDecimal(icu::DateTimePatternGenerator *this)
{
  return (uint64_t)this + 4616;
}

uint64_t icu::DateTimePatternGenerator::setDateTimeFormat(icu::DateTimePatternGenerator *this, UChar **a2)
{
  unsigned int v4 = 0;
  int v6 = 0;
  do
    uint64_t result = icu::DateTimePatternGenerator::setDateTimeFormat((uint64_t)this, v4++, a2, &v6);
  while (v4 != 4);
  return result;
}

uint64_t icu::DateTimePatternGenerator::setDateTimeFormat(uint64_t result, unsigned int a2, UChar **a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 < 4)
    {
      unsigned int v4 = (UChar **)(result + ((unint64_t)a2 << 6) + 4360);
      icu::UnicodeString::operator=(v4, a3);
      return icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v4);
    }
    else
    {
      *a4 = 1;
    }
  }
  return result;
}

void *icu::DateTimePatternGenerator::getDateTimeFormat(icu::DateTimePatternGenerator *this)
{
  int v2 = 0;
  return icu::DateTimePatternGenerator::getDateTimeFormat((uint64_t)this, 2u, &v2);
}

uint64_t sub_18C930058(uint64_t a1, uint64_t a2)
{
  int v3 = 0;
  if (*(_WORD *)(a2 + 8)) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *(_WORD *)(a2 + 8) & 0x1F;
  }
  *(_WORD *)(a2 + 8) = v4;
  uint64_t v5 = a1 + 112;
  do
    uint64_t result = sub_18C930A38(v5, v3++, a2);
  while (v3 != 16);
  return result;
}

uint64_t sub_18C9300BC(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  unsigned int v3 = *(unsigned __int16 *)(a2 + 8);
  if ((v3 & 0x8000u) == 0) {
    unsigned int v4 = v3 >> 5;
  }
  else {
    unsigned int v4 = *(_DWORD *)(a2 + 12);
  }
  if (!v4) {
    return 0;
  }
  int v7 = -71;
  if ((v3 & 2) != 0) {
    int v8 = (unsigned __int16 *)(a2 + 10);
  }
  else {
    int v8 = *(unsigned __int16 **)(a2 + 24);
  }
  int v9 = *v8;
  if ((v9 - 65) >= 0x1A)
  {
    if ((v9 - 97) > 0x19) {
      return 0;
    }
  }
  else
  {
    int v7 = -65;
  }
  uint64_t v10 = *(void *)(a1 + 8 * (v7 + v9) + 8);
  if (!v10) {
    return 0;
  }
  while (1)
  {
    unsigned int v11 = *(unsigned __int16 *)(a2 + 8);
    unsigned int v12 = *(unsigned __int16 *)(v10 + 16);
    if ((v12 & 1) == 0) {
      break;
    }
    if (v11) {
      goto LABEL_27;
    }
LABEL_25:
    uint64_t v10 = *(void *)(v10 + 152);
    if (!v10) {
      return 0;
    }
  }
  int v13 = (__int16)v11;
  int32_t v14 = v11 >> 5;
  if (v13 >= 0) {
    int32_t v15 = v14;
  }
  else {
    int32_t v15 = *(_DWORD *)(a2 + 12);
  }
  if ((v12 & 0x8000u) == 0) {
    int v16 = v12 >> 5;
  }
  else {
    int v16 = *(_DWORD *)(v10 + 20);
  }
  if ((v12 & 2) != 0) {
    uint64_t v17 = v10 + 18;
  }
  else {
    uint64_t v17 = *(void *)(v10 + 32);
  }
  if (icu::UnicodeString::doCompare(a2, 0, v15, v17, v16 & (v16 >> 31), v16 & ~(v16 >> 31)))goto LABEL_25; {
LABEL_27:
  }
  *a3 = *(unsigned char *)(v10 + 144);
  return v10 + 80;
}

uint64_t sub_18C9301D4(uint64_t a1, void *a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  uint64_t v3 = 0;
  while (1)
  {
    unsigned int v4 = (char *)a2 + v3;
    if (*((unsigned char *)a2 + v3 + 120)) {
      break;
    }
    if (++v3 == 16) {
      return 0;
    }
  }
  int v5 = -71;
  int v6 = v4[104];
  int v7 = (unsigned __int16)v4[104];
  if ((v6 - 65) >= 0x1A)
  {
    if ((unsigned __int16)(v7 - 97) > 0x19u) {
      return 0;
    }
  }
  else
  {
    int v5 = -65;
  }
  uint64_t v8 = *(void *)(a1 + 8 * (v5 + v7) + 8);
  if (!v8) {
    return 0;
  }
  while (1)
  {
    int v9 = *(void **)(v8 + 72);
    if (a3) {
      break;
    }
    if (v9[13] == a2[13] && v9[14] == a2[14])
    {
      uint64_t v14 = v9[15];
      uint64_t v13 = v9[16];
      if (v14 == a2[15] && v13 == a2[16]) {
        return v8 + 80;
      }
    }
LABEL_32:
    uint64_t v8 = *(void *)(v8 + 152);
    if (!v8) {
      return 0;
    }
  }
  if (v9[9] != a2[9] || v9[10] != a2[10]) {
    goto LABEL_32;
  }
  if (v9[11] != a2[11] || v9[12] != a2[12]) {
    goto LABEL_32;
  }
  if (*(unsigned char *)(v8 + 144)) {
    *a3 = v9;
  }
  return v8 + 80;
}

UChar **sub_18C9302BC(UChar **result, unint64_t a2, uint64_t a3, UChar **a4, char a5, int *a6)
{
  unsigned int v7 = *(unsigned __int16 *)(a2 + 8);
  if ((v7 & 0x8000u) == 0) {
    unsigned int v8 = v7 >> 5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a2 + 12);
  }
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v13 = result;
  if ((v7 & 2) != 0) {
    uint64_t v14 = (unsigned __int16 *)(a2 + 10);
  }
  else {
    uint64_t v14 = *(unsigned __int16 **)(a2 + 24);
  }
  uint64_t v15 = *v14;
  *a6 = 0;
  if ((v15 - 65) < 0x1A)
  {
    int v16 = -65;
    goto LABEL_12;
  }
  if ((v15 - 97) >= 0x1A)
  {
LABEL_23:
    int v32 = 65567;
    goto LABEL_24;
  }
  int v16 = -71;
LABEL_12:
  uint64_t v17 = (uint64_t *)&result[(v16 + v15)];
  uint64_t v18 = v17[1];
  if (!v18)
  {
    uint64_t result = (UChar **)icu::UMemory::operator new(v17, (icu::UMemory *)0xA0, a2);
    if (result)
    {
      __int16 v33 = result;
      *uint64_t result = (UChar *)&unk_1EDA4BFB0;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 1), (UChar **)a2);
      v33[9] = 0;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v33 + 10), a4);
      v33[19] = 0;
      BOOL v35 = (uint64_t *)*a6;
      if ((int)v35 <= 0)
      {
        long long v36 = icu::UMemory::operator new(v35, (icu::UMemory *)0x90, v34);
        if (v36)
        {
          *long long v36 = (uint64_t)&unk_1EDA4BF90;
          *(_OWORD *)(v36 + 9) = 0u;
          *(_OWORD *)(v36 + 11) = 0u;
          *(_OWORD *)(v36 + 13) = 0u;
          *(_OWORD *)(v36 + 15) = 0u;
          long long v37 = *(_OWORD *)(a3 + 8);
          long long v38 = *(_OWORD *)(a3 + 24);
          long long v39 = *(_OWORD *)(a3 + 40);
          *(_OWORD *)(v36 + 7) = *(_OWORD *)(a3 + 56);
          *(_OWORD *)(v36 + 5) = v39;
          *(_OWORD *)(v36 + 3) = v38;
          *(_OWORD *)(v36 + 1) = v37;
          *(_OWORD *)(v36 + 9) = *(_OWORD *)(a3 + 72);
          *(_OWORD *)(v36 + 11) = *(_OWORD *)(a3 + 88);
          *(_OWORD *)(v36 + 13) = *(_OWORD *)(a3 + 104);
          *(_OWORD *)(v36 + 15) = *(_OWORD *)(a3 + 120);
          *((unsigned char *)v36 + 136) = *(unsigned char *)(a3 + 136);
        }
        uint64_t result = (UChar **)sub_18C931694((uint64_t)(v33 + 9), (uint64_t)v36, a6);
        if (*a6 <= 0)
        {
          *((unsigned char *)v33 + 144) = a5;
          if (v15 < 0x61) {
            v13[v15 - 64] = (UChar *)v33;
          }
          else {
            v13[(v15 - 71) + 1] = (UChar *)v33;
          }
          return result;
        }
      }
      uint64_t v30 = (uint64_t (*)(UChar **))*((void *)*v33 + 1);
      unint64_t v31 = v33;
      goto LABEL_32;
    }
    goto LABEL_35;
  }
  uint64_t result = (UChar **)sub_18C931800((uint64_t)result, a2, a3, v17[1]);
  if (result)
  {
    if (*((unsigned char *)v13 + 424))
    {
      long long v21 = result;
      uint64_t result = (UChar **)icu::UnicodeString::operator=(result + 10, a4);
      *((unsigned char *)v21 + 144) = a5;
    }
    return result;
  }
  do
  {
    uint64_t v22 = v18;
    uint64_t v18 = *(void *)(v18 + 152);
  }
  while (v18);
  uint64_t result = (UChar **)icu::UMemory::operator new(v20, (icu::UMemory *)0xA0, v19);
  if (!result)
  {
LABEL_35:
    if (*a6 > 0) {
      return result;
    }
    int v32 = 7;
LABEL_24:
    *a6 = v32;
    return result;
  }
  uint64_t v23 = result;
  *uint64_t result = (UChar *)&unk_1EDA4BFB0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 1), (UChar **)a2);
  v23[9] = 0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v23 + 10), a4);
  v23[19] = 0;
  unint64_t v25 = (uint64_t *)*a6;
  if ((int)v25 > 0) {
    goto LABEL_22;
  }
  int v26 = icu::UMemory::operator new(v25, (icu::UMemory *)0x90, v24);
  if (v26)
  {
    *int v26 = (uint64_t)&unk_1EDA4BF90;
    *(_OWORD *)(v26 + 9) = 0u;
    *(_OWORD *)(v26 + 11) = 0u;
    *(_OWORD *)(v26 + 13) = 0u;
    *(_OWORD *)(v26 + 15) = 0u;
    long long v27 = *(_OWORD *)(a3 + 8);
    long long v28 = *(_OWORD *)(a3 + 24);
    long long v29 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(v26 + 7) = *(_OWORD *)(a3 + 56);
    *(_OWORD *)(v26 + 5) = v29;
    *(_OWORD *)(v26 + 3) = v28;
    *(_OWORD *)(v26 + 1) = v27;
    *(_OWORD *)(v26 + 9) = *(_OWORD *)(a3 + 72);
    *(_OWORD *)(v26 + 11) = *(_OWORD *)(a3 + 88);
    *(_OWORD *)(v26 + 13) = *(_OWORD *)(a3 + 104);
    *(_OWORD *)(v26 + 15) = *(_OWORD *)(a3 + 120);
    *((unsigned char *)v26 + 136) = *(unsigned char *)(a3 + 136);
  }
  sub_18C931694((uint64_t)(v23 + 9), (uint64_t)v26, a6);
  if (*a6 > 0)
  {
LABEL_22:
    uint64_t v30 = (uint64_t (*)(UChar **))*((void *)*v23 + 1);
    unint64_t v31 = v23;
LABEL_32:
    return (UChar **)v30(v31);
  }
  *((unsigned char *)v23 + 144) = a5;
  uint64_t result = *(UChar ***)(v22 + 152);
  if (result) {
    uint64_t result = (UChar **)(*((uint64_t (**)(UChar **))*result + 1))(result);
  }
  *(void *)(v22 + 152) = v23;
  return result;
}

uint64_t icu::DateTimePatternGenerator::getAppendFormatNumber(icu::DateTimePatternGenerator *this, const char *__s2)
{
  for (uint64_t i = 0; i != 16; ++i)
  {
    if (!strcmp(off_1E550BAB0[i], __s2)) {
      break;
    }
  }
  return i;
}

uint64_t icu::DateTimePatternGenerator::getFieldAndWidthIndices(uint64_t a1, const char *a2, _DWORD *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  strncpy(__dst, a2, 0x18uLL);
  __dst[24] = 0;
  *a3 = 0;
  unsigned int v4 = strchr(__dst, 45);
  if (v4)
  {
    int v5 = v4;
    unint64_t v6 = 2;
    while (strcmp(*((const char **)&off_1E550BB30 + v6), v5))
    {
      if (v6-- <= 1) {
        goto LABEL_7;
      }
    }
    *a3 = v6;
LABEL_7:
    const char *v5 = 0;
  }
  for (uint64_t i = 0; i != 16; ++i)
  {
    if (!strcmp(off_1E550BB48[i], __dst)) {
      break;
    }
  }
  return i;
}

uint64_t sub_18C9307C4(uint64_t a1)
{
  uint64_t result = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 8);
    if (v4 <= 51)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = v5 + 1;
      while (1)
      {
        if (v6)
        {
          if (*(void *)(v6 + 152)) {
            return 1;
          }
        }
        else if (*(void *)(v3 + 8 * v7))
        {
          return 1;
        }
        uint64_t v6 = 0;
        if (v7++ == 52) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_18C930828(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 52)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
LABEL_15:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v6 = *(void *)(v2 + 72);
      long long v7 = *(_OWORD *)(v6 + 8);
      long long v8 = *(_OWORD *)(v6 + 24);
      long long v9 = *(_OWORD *)(v6 + 56);
      *(_OWORD *)(v5 + 48) = *(_OWORD *)(v6 + 40);
      *(_OWORD *)(v5 + 64) = v9;
      *(_OWORD *)(v5 + 16) = v7;
      *(_OWORD *)(v5 + 32) = v8;
      *(_OWORD *)(v5 + 80) = *(_OWORD *)(v6 + 72);
      *(_OWORD *)(v5 + 96) = *(_OWORD *)(v6 + 88);
      *(_OWORD *)(v5 + 112) = *(_OWORD *)(v6 + 104);
      *(_OWORD *)(v5 + 128) = *(_OWORD *)(v6 + 120);
      *(unsigned char *)(v5 + 144) = *(unsigned char *)(v6 + 136);
      return *(void *)(a1 + 24);
    }
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = v2;
    do
    {
      if (v3)
      {
        uint64_t v2 = *(void *)(v3 + 152);
        if (v2) {
          goto LABEL_14;
        }
        *(_DWORD *)(a1 + 8) = ++v1;
        *(void *)(a1 + 16) = 0;
      }
      else
      {
        if (*(void *)(*(void *)(a1 + 32) + 8 * v1 + 8))
        {
          uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8 * v1 + 8);
LABEL_14:
          *(void *)(a1 + 16) = v2;
          goto LABEL_15;
        }
        *(_DWORD *)(a1 + 8) = ++v1;
      }
      uint64_t v3 = 0;
    }
    while (v1 < 52);
    if (v2) {
      goto LABEL_15;
    }
  }
  int v4 = *(_OWORD **)(a1 + 24);
  v4[7] = 0u;
  v4[8] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  return *(void *)(a1 + 24);
}

BOOL sub_18C930900(void *a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  if (a1[10] != a2[10] || a1[11] != a2[11]) {
    return 0;
  }
  return a1[12] == a2[12] && a1[13] == a2[13];
}

uint64_t sub_18C930938(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = 0;
  uint64_t result = 0;
  int v7 = 0;
  int v8 = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v9 = a1 + 16;
  uint64_t v10 = a2 + 16;
  do
  {
    int v11 = 1 << v5;
    if (((1 << v5) & a3) == 0)
    {
      if (!*(_DWORD *)(v10 + 4 * v5)) {
        goto LABEL_12;
      }
LABEL_11:
      uint64_t result = (result + 0x10000);
      v8 |= v11;
      *(_DWORD *)(a4 + 12) = v8;
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v9 + 4 * v5);
    int v13 = *(_DWORD *)(v10 + 4 * v5);
    if (v12 == v13) {
      goto LABEL_12;
    }
    if (!v12) {
      goto LABEL_11;
    }
    if (v13)
    {
      if (v12 - v13 >= 0) {
        int v14 = v12 - v13;
      }
      else {
        int v14 = v13 - v12;
      }
      uint64_t result = (v14 + result);
    }
    else
    {
      uint64_t result = (result + 4096);
      v7 |= v11;
      *(_DWORD *)(a4 + 8) = v7;
    }
LABEL_12:
    ++v5;
  }
  while (v5 != 16);
  return result;
}

void *sub_18C9309C8(void *a1)
{
  *a1 = &unk_1EDA4BF70;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_18C930A38(uint64_t a1, int a2, uint64_t a3)
{
  int v4 = (char *)(a1 + a2);
  int v5 = v4[16];
  if (v5 >= 1)
  {
    __int16 v6 = *v4;
    do
    {
      __int16 v8 = v6;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v8, 0, 1);
      --v5;
    }
    while (v5);
  }
  return a3;
}

uint64_t icu::DateTimePatternGenerator::defaultHourPeriodCharForHourCycle(uint64_t a1, int a2)
{
  uint64_t result = *(unsigned __int16 *)(a1 + 4760);
  if ((a2 & 0x40000000) == 0)
  {
    if ((a2 & 0x20000000) == 0) {
      return result;
    }
LABEL_7:
    if (result == 75 || result == 104) {
      return result;
    }
    goto LABEL_9;
  }
  if (result == 72 || result == 107) {
    return result;
  }
  if ((a2 & 0x20000000) != 0) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 4764;
  while (2)
  {
    switch(*(_DWORD *)(v5 + v4))
    {
      case 0xFFFFFFFF:
        return result;
      case 0:
      case 4:
      case 5:
        if ((a2 & 0x20000000) == 0) {
          goto LABEL_18;
        }
        uint64_t result = 104;
        break;
      case 1:
      case 8:
      case 9:
        if ((a2 & 0x40000000) == 0) {
          goto LABEL_18;
        }
        uint64_t result = 72;
        break;
      case 2:
      case 6:
      case 7:
        if ((a2 & 0x20000000) == 0) {
          goto LABEL_18;
        }
        uint64_t result = 75;
        break;
      case 3:
        if ((a2 & 0x40000000) == 0) {
          goto LABEL_18;
        }
        uint64_t result = 107;
        break;
      default:
LABEL_18:
        v4 += 4;
        if (v4 != 28) {
          continue;
        }
        break;
    }
    return result;
  }
}

uint64_t icu::DateTimePatternGenerator::getTopBitNumber(icu::DateTimePatternGenerator *this, int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = -1;
  do
  {
    ++v2;
    BOOL v3 = a2 > 1;
    a2 >>= 1;
  }
  while (v3);
  if (v2 >= 0xF) {
    return 15;
  }
  else {
    return v2;
  }
}

uint64_t icu::DateTimePatternGenerator::setAvailableFormat(icu::DateTimePatternGenerator *this, UChar **a2, UErrorCode *a3)
{
  uint64_t v5 = (uint64_t *)*((void *)this + 586);
  uint64_t v6 = *v5;
  int v7 = (icu::UnicodeString *)icu::UMemory::operator new(v5, (icu::UMemory *)0x40, (unint64_t)a2);
  uint64_t v8 = (uint64_t)v7;
  if (v7) {
    icu::UnicodeString::UnicodeString(v7, a2);
  }

  return uhash_puti(v6, v8, 1u, (int *)a3);
}

BOOL icu::DateTimePatternGenerator::isAvailableFormatSet(icu::DateTimePatternGenerator *this, const icu::UnicodeString *a2)
{
  return uhash_geti(**((void **)this + 586), (uint64_t)a2) == 1;
}

uint64_t icu::DateTimePatternGenerator::getSkeletons(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t v5 = (uint64_t *)*((unsigned int *)this + 1198);
  if ((int)v5 >= 1)
  {
    uint64_t result = 0;
LABEL_5:
    *a2 = (int)v5;
    return result;
  }
  uint64_t v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 <= 0)
    {
      uint64_t result = 0;
      LODWORD(v5) = 7;
      goto LABEL_5;
    }
    return 0;
  }
  uint64_t result = sub_18C931E8C((uint64_t)v6, *((void *)this + 32), 1, a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t icu::DateTimePatternGenerator::getPatternForSkeleton(icu::DateTimePatternGenerator *this, const icu::UnicodeString *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  if (*((__int16 *)a2 + 4) < 0)
  {
    if (!*((_DWORD *)a2 + 3)) {
      return (uint64_t)this + 4696;
    }
  }
  else if (v4 <= 0x1F)
  {
    return (uint64_t)this + 4696;
  }
  int v5 = -71;
  if ((v4 & 2) != 0) {
    uint64_t v6 = (unsigned __int16 *)((char *)a2 + 10);
  }
  else {
    uint64_t v6 = (unsigned __int16 *)*((void *)a2 + 3);
  }
  int v7 = *v6;
  if ((v7 - 65) >= 0x1A)
  {
    if ((v7 - 97) > 0x19) {
      return (uint64_t)this + 4696;
    }
  }
  else
  {
    int v5 = -65;
  }
  for (uint64_t i = *(void *)(*((void *)this + 32) + 8 * (v5 + v7) + 8); i; uint64_t i = *(void *)(i + 152))
  {
    sub_18C92CE6C(*(void *)(i + 72), (uint64_t)v16);
    if (v17)
    {
      __int16 v14 = *((_WORD *)a2 + 4);
      icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)v16);
      if (v14) {
        return i + 80;
      }
    }
    else
    {
      if ((v17 & 0x8000u) == 0) {
        int v9 = v17 >> 5;
      }
      else {
        int v9 = v18;
      }
      unsigned int v10 = *((unsigned __int16 *)a2 + 4);
      if ((v10 & 0x8000u) == 0) {
        int v11 = (void *)(v10 >> 5);
      }
      else {
        int v11 = (void *)*((unsigned int *)a2 + 3);
      }
      if ((v10 & 1) != 0 || v9 != v11)
      {
        icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v16);
      }
      else
      {
        BOOL v12 = icu::UnicodeString::doEquals((icu::UnicodeString *)v16, a2, v9);
        icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v16);
        if (v12) {
          return i + 80;
        }
      }
    }
  }
  return (uint64_t)this + 4696;
}

uint64_t icu::DateTimePatternGenerator::getBaseSkeletons(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  int v5 = (uint64_t *)*((unsigned int *)this + 1198);
  if ((int)v5 >= 1)
  {
    uint64_t result = 0;
LABEL_5:
    *a2 = (int)v5;
    return result;
  }
  uint64_t v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 <= 0)
    {
      uint64_t result = 0;
      LODWORD(v5) = 7;
      goto LABEL_5;
    }
    return 0;
  }
  uint64_t result = sub_18C931E8C((uint64_t)v6, *((void *)this + 32), 0, a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t *icu::DateTimePatternGenerator::getRedundants(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 > 0) {
    return 0;
  }
  int v5 = (uint64_t *)*((unsigned int *)this + 1198);
  if ((int)v5 >= 1)
  {
    unsigned int v2 = 0;
    goto LABEL_5;
  }
  uint64_t v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 > 0) {
      return 0;
    }
    unsigned int v2 = 0;
    LODWORD(v5) = 7;
LABEL_5:
    *a2 = (int)v5;
    return v2;
  }
  int v7 = v6;
  uint64_t v8 = icu::StringEnumeration::StringEnumeration((uint64_t)v6);
  *(void *)uint64_t v8 = &unk_1EDA4C038;
  *(_DWORD *)(v8 + 116) = 0;
  *(void *)(v8 + 120) = 0;
  if (*(int *)a2 > 0)
  {
    unsigned int v2 = 0;
    int v9 = v7;
    goto LABEL_44;
  }
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  sub_18C931BA4((uint64_t)&v34, (int *)a2);
  if (*(int *)a2 > 0)
  {
    unsigned int v2 = 0;
    int v9 = v7;
    goto LABEL_41;
  }
  uint64_t v36 = *((void *)this + 32);
  if (!sub_18C9307C4((uint64_t)&v34))
  {
    int v9 = 0;
    unsigned int v2 = v7;
    goto LABEL_41;
  }
  long long v10 = 0uLL;
  while (1)
  {
    uint64_t v48 = 0;
    long long v46 = v10;
    long long v47 = v10;
    long long v44 = v10;
    long long v45 = v10;
    long long v42 = v10;
    long long v43 = v10;
    long long v40 = v10;
    long long v41 = v10;
    long long v39 = v10;
    uint64_t v11 = sub_18C930828((uint64_t)&v34);
    *(void *)&long long v39 = &unk_1EDA4BF28;
    *((void *)&v39 + 1) = &unk_1EDA4BF90;
    LOBYTE(v48) = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v12 = *(_OWORD *)(v11 + 64);
    long long v14 = *(_OWORD *)(v11 + 16);
    long long v13 = *(_OWORD *)(v11 + 32);
    long long v42 = *(_OWORD *)(v11 + 48);
    long long v43 = v12;
    long long v40 = v14;
    long long v41 = v13;
    long long v15 = *(_OWORD *)(v11 + 96);
    long long v44 = *(_OWORD *)(v11 + 80);
    long long v45 = v15;
    long long v16 = *(_OWORD *)(v11 + 128);
    long long v46 = *(_OWORD *)(v11 + 112);
    long long v47 = v16;
    LOBYTE(v48) = *(unsigned char *)(v11 + 144);
    uint64_t v17 = sub_18C9301D4(*((void *)this + 32), *(void **)(v35 + 72), 0);
    if (!icu::DateTimePatternGenerator::isCanonicalItem((icu::DateTimePatternGenerator *)v17, (const icu::UnicodeString *)v17))break; {
LABEL_35:
    }
    int v32 = sub_18C9307C4((uint64_t)&v34);
    long long v10 = 0uLL;
    if (!v32)
    {
      int v9 = 0;
      unsigned int v2 = v7;
      goto LABEL_41;
    }
  }
  uint64_t v19 = *((void *)this + 585);
  if (v19)
  {
    long long v20 = v40;
    long long v21 = v41;
    long long v22 = v43;
    *(_OWORD *)(v19 + 48) = v42;
    *(_OWORD *)(v19 + 64) = v22;
    *(_OWORD *)(v19 + 16) = v20;
    *(_OWORD *)(v19 + 32) = v21;
    *(_OWORD *)(v19 + 80) = v44;
    *(_OWORD *)(v19 + 96) = v45;
    *(_OWORD *)(v19 + 112) = v46;
    *(_OWORD *)(v19 + 128) = v47;
    *(unsigned char *)(v19 + 144) = v48;
    long long v23 = 0uLL;
    goto LABEL_20;
  }
  unint64_t v24 = icu::UMemory::operator new(0, (icu::UMemory *)0x98, v18);
  if (v24)
  {
    *unint64_t v24 = (uint64_t)&unk_1EDA4BF28;
    v24[1] = (uint64_t)&unk_1EDA4BF90;
    long long v23 = 0uLL;
    *((_OWORD *)v24 + 5) = 0u;
    *((_OWORD *)v24 + 6) = 0u;
    *((_OWORD *)v24 + 7) = 0u;
    *((_OWORD *)v24 + 8) = 0u;
    *((unsigned char *)v24 + 144) = 0;
    long long v25 = v43;
    long long v27 = v40;
    long long v26 = v41;
    *((_OWORD *)v24 + 3) = v42;
    *((_OWORD *)v24 + 4) = v25;
    *((_OWORD *)v24 + 1) = v27;
    *((_OWORD *)v24 + 2) = v26;
    *((_OWORD *)v24 + 5) = v44;
    *((_OWORD *)v24 + 6) = v45;
    *((_OWORD *)v24 + 7) = v46;
    *((_OWORD *)v24 + 8) = v47;
    *((unsigned char *)v24 + 144) = v48;
    *((void *)this + 585) = v24;
LABEL_20:
    v38[2] = v23;
    v38[3] = v23;
    v38[0] = v23;
    v38[1] = v23;
    sub_18C931448((uint64_t)&v39, (icu::UnicodeString *)v37);
    icu::DateTimePatternGenerator::getBestPattern(this, (uint64_t)v37, 0, (int *)a2, (icu::UnicodeString *)v38);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v37);
    long long v29 = (void *)*(unsigned int *)a2;
    if ((int)v29 > 0) {
      goto LABEL_38;
    }
    if (BYTE8(v38[0]))
    {
      long long v29 = (void *)*(unsigned __int16 *)(v17 + 8);
      if ((v29 & 1) == 0)
      {
LABEL_34:
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v38);
        goto LABEL_35;
      }
    }
    else
    {
      if ((SWORD4(v38[0]) & 0x8000u) == 0) {
        int v30 = WORD4(v38[0]) >> 5;
      }
      else {
        int v30 = HIDWORD(v38[0]);
      }
      unsigned int v31 = *(unsigned __int16 *)(v17 + 8);
      if ((v31 & 0x8000u) == 0) {
        long long v29 = (void *)(v31 >> 5);
      }
      else {
        long long v29 = (void *)*(unsigned int *)(v17 + 12);
      }
      if ((v31 & 1) != 0
        || v30 != v29
        || !icu::UnicodeString::doEquals((icu::UnicodeString *)v38, (const icu::UnicodeString *)v17, v30))
      {
        goto LABEL_34;
      }
    }
    sub_18C931514(v7, (UChar **)v17, a2);
    long long v29 = (void *)*(unsigned int *)a2;
    if ((int)v29 >= 1)
    {
LABEL_38:
      icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v38);
      unsigned int v2 = 0;
      goto LABEL_40;
    }
    goto LABEL_34;
  }
  unsigned int v2 = 0;
  *((void *)this + 585) = 0;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
LABEL_40:
  int v9 = v7;
LABEL_41:
  *(void *)&long long v34 = &unk_1EDA4BF70;
  if (*((void *)&v35 + 1)) {
    (*(void (**)(void))(**((void **)&v35 + 1) + 8))(*((void *)&v35 + 1));
  }
  if (v9) {
LABEL_44:
  }
    (*(void (**)(uint64_t *))(*v9 + 8))(v9);
  return v2;
}

BOOL icu::DateTimePatternGenerator::isCanonicalItem(icu::DateTimePatternGenerator *this, const icu::UnicodeString *a2)
{
  unsigned int v2 = *((unsigned __int16 *)a2 + 4);
  if ((v2 & 0x8000u) == 0) {
    unsigned int v3 = v2 >> 5;
  }
  else {
    unsigned int v3 = *((_DWORD *)a2 + 3);
  }
  if (v3 != 1) {
    return 0;
  }
  if ((v2 & 2) != 0) {
    unsigned int v4 = (unsigned __int16 *)((char *)a2 + 10);
  }
  else {
    unsigned int v4 = (unsigned __int16 *)*((void *)a2 + 3);
  }
  int v5 = *v4;
  if (v5 == 71) {
    return 1;
  }
  unint64_t v7 = 0;
  do
  {
    unint64_t v8 = v7;
    if (v7 == 15) {
      break;
    }
    int v9 = (unsigned __int16)aGyqmwwedfdahms[++v7];
  }
  while (v5 != v9);
  return v8 < 0xF;
}

void *sub_18C931448@<X0>(uint64_t a1@<X0>, icu::UnicodeString *a2@<X8>)
{
  int v3 = 0;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v11 = 0;
  long long v10 = 0u;
  unint64_t v7 = (UChar *)&unk_1EDA47700;
  LOWORD(v8) = 2;
  uint64_t v4 = a1 + 80;
  do
    sub_18C930A38(v4, v3++, (uint64_t)&v7);
  while (v3 != 16);
  icu::UnicodeString::UnicodeString(a2, &v7);
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v7);
}

uint64_t *sub_18C931514(uint64_t *result, UChar **a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v6 = (icu::UVector **)(result + 15);
    int v5 = (uint64_t *)result[15];
    if (v5) {
      goto LABEL_4;
    }
    long long v9 = (icu::UVector *)icu::UMemory::operator new(0, (icu::UMemory *)0x28, (unint64_t)a2);
    uint64_t v10 = (uint64_t)v9;
    if (v9) {
      icu::UVector::UVector(v9, a3);
    }
    uint64_t result = (uint64_t *)sub_18C7F5A70((uint64_t)v6, v10, (int *)a3);
    int v5 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v5 <= 0)
    {
LABEL_4:
      uint64_t result = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, (unint64_t)a2);
      if (result)
      {
        unint64_t v7 = result;
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)result, a2);
        if (*(int *)a3 <= 0)
        {
          uint64_t result = (uint64_t *)icu::UVector::addElement(*v6, v7, a3);
          if (*(int *)a3 < 1) {
            return result;
          }
          if (*v6) {
            (*(void (**)(icu::UVector *))(*(void *)*v6 + 8))(*v6);
          }
          uint64_t *v6 = 0;
        }
        long long v8 = *(uint64_t (**)(uint64_t *))(*v7 + 8);
        return (uint64_t *)v8(v7);
      }
      else if (*(int *)a3 <= 0)
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return result;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::clone@<X0>(icu::DateTimePatternGenerator *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::DateTimePatternGenerator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x12C0, a2);
  if (result) {
    return (icu::DateTimePatternGenerator *)icu::DateTimePatternGenerator::DateTimePatternGenerator(result, this);
  }
  return result;
}

uint64_t sub_18C931694(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v6 = (void *)result;
    uint64_t result = *(void *)result;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    void *v6 = a2;
    if (!a2) {
      *a3 = 7;
    }
  }
  else if (a2)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
    return v4(a2);
  }
  return result;
}

void *sub_18C931754(void *a1)
{
  *a1 = &unk_1EDA4BF08;
  for (uint64_t i = 1; i != 53; ++i)
  {
    uint64_t v3 = a1[i];
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      a1[i] = 0;
    }
  }
  return a1;
}

void sub_18C9317D8(void *a1)
{
  int v1 = sub_18C931754(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C931800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a4)
  {
    uint64_t v6 = a3 + 8;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(a2 + 8);
      unsigned int v8 = *(unsigned __int16 *)(v4 + 16);
      if (v8)
      {
        if (v7) {
          goto LABEL_18;
        }
      }
      else
      {
        int v9 = (__int16)v7;
        int32_t v10 = v7 >> 5;
        if (v9 >= 0) {
          int32_t v11 = v10;
        }
        else {
          int32_t v11 = *(_DWORD *)(a2 + 12);
        }
        if ((v8 & 0x8000u) == 0) {
          int v12 = v8 >> 5;
        }
        else {
          int v12 = *(_DWORD *)(v4 + 20);
        }
        if ((v8 & 2) != 0) {
          uint64_t v13 = v4 + 18;
        }
        else {
          uint64_t v13 = *(void *)(v4 + 32);
        }
        if (!icu::UnicodeString::doCompare(a2, 0, v11, v13, v12 & (v12 >> 31), v12 & ~(v12 >> 31)))
        {
LABEL_18:
          uint64_t v14 = 0;
          while (*(_DWORD *)(*(void *)(v4 + 72) + 8 + v14) == *(_DWORD *)(v6 + v14))
          {
            v14 += 4;
            if (v14 == 64) {
              return v4;
            }
          }
        }
      }
      uint64_t v4 = *(void *)(v4 + 152);
    }
    while (v4);
  }
  return v4;
}

BOOL sub_18C9318D8(void *a1, void *a2)
{
  BOOL v2 = a1[9] == a2[9] && a1[10] == a2[10];
  if (v2
    && (a1[11] == a2[11] ? (BOOL v3 = a1[12] == a2[12]) : (BOOL v3 = 0),
        v3
     && (a1[13] == a2[13] ? (BOOL v4 = a1[14] == a2[14]) : (BOOL v4 = 0),
         v4 && (a1[15] == a2[15] ? (BOOL v5 = a1[16] == a2[16]) : (BOOL v5 = 0), v5))))
  {
    return memcmp(a1 + 1, a2 + 1, 0x40uLL) == 0;
  }
  else
  {
    return 0;
  }
}

void sub_18C931960(void *a1@<X0>, void *a2@<X8>)
{
  *a1 = &unk_1EDA4BF48;
  for (uint64_t i = 393; i != -7; i -= 8)
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)&a1[i]);

  icu::UMemory::operator delete(a1);
}

uint64_t sub_18C9319C8(uint64_t a1, uint64_t a2, signed int a3, int *a4)
{
  unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 0x8000u) == 0) {
    unsigned int v5 = v4 >> 5;
  }
  else {
    unsigned int v5 = *(_DWORD *)(a2 + 12);
  }
  if ((int)v5 <= a3) {
    return 3;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 + 10;
  if ((v4 & 2) == 0) {
    uint64_t v7 = *(void *)(a2 + 24);
  }
  uint64_t v8 = v7 + 2 * a3;
  while (v5 > a3 + (int)v6 && (*(_WORD *)(v8 + 2 * v6) & 0xFFDFu) - 65 <= 0x19)
  {
    if (v5 <= a3 + (int)v6 + 1) {
      int v9 = 0xFFFF;
    }
    else {
      int v9 = *(unsigned __int16 *)(v8 + 2 * v6 + 2);
    }
    if (v5 <= a3) {
      int v10 = 0xFFFF;
    }
    else {
      int v10 = *(unsigned __int16 *)(v7 + 2 * a3);
    }
    int v11 = v6 + 1;
    if (v9 == v10)
    {
      uint64_t v12 = a3 + v6++;
      if (v12 < (int)v5) {
        continue;
      }
    }
    goto LABEL_21;
  }
  int v11 = 1;
LABEL_21:
  *a4 = v11;
  return 1;
}

uint64_t sub_18C931A98(uint64_t a1, int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 8);
  if ((*(__int16 *)(a1 + 8) & 0x80000000) == 0)
  {
    if (v2 >= 0x20)
    {
      int v3 = v2 >> 5;
      goto LABEL_5;
    }
    return 0xFFFFFFFFLL;
  }
  int v3 = *(_DWORD *)(a1 + 12);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
LABEL_5:
  unsigned int v4 = *(unsigned __int16 **)(a1 + 24);
  if ((v2 & 2) != 0) {
    unsigned int v4 = (unsigned __int16 *)(a1 + 10);
  }
  int v5 = *v4;
  if (v3 > 1)
  {
    int v6 = (__int16)v2;
    LODWORD(v7) = v2 >> 5;
    if (v6 >= 0) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = *(unsigned int *)(a1 + 12);
    }
    unint64_t v8 = 1;
    do
    {
      int v9 = v8 >= v7 ? 0xFFFF : v4[v8];
      if (v5 != v9) {
        return 0xFFFFFFFFLL;
      }
    }
    while (v3 != ++v8);
  }
  uint64_t v10 = 0;
  unsigned int v11 = -1;
  int v12 = 71;
  while (v12)
  {
    uint64_t v13 = &aG_1[16 * (int)v10 + 16];
    uint64_t result = v10;
    while (v12 != v5)
    {
      int v15 = *(unsigned __int16 *)v13;
      v13 += 16;
      int v12 = v15;
      uint64_t result = (result + 1);
      if (!v15) {
        goto LABEL_27;
      }
    }
    uint64_t v10 = (result + 1);
    if (v5 == *(unsigned __int16 *)&aG_1[16 * (int)v10])
    {
      int v12 = *v4;
      unsigned int v11 = result;
      if (v3 >= *(__int16 *)&aG_1[16 * (int)v10 + 10]) {
        continue;
      }
    }
    return result;
  }
LABEL_27:
  if (a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v11;
  }
}

uint64_t sub_18C931BA4(uint64_t a1, int *a2)
{
  *(void *)a1 = &unk_1EDA4BF70;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v3 = a1 + 24;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  unsigned int v4 = (uint64_t *)*a2;
  if ((int)v4 <= 0)
  {
    int v6 = icu::UMemory::operator new(v4, (icu::UMemory *)0x98, (unint64_t)a2);
    if (v6)
    {
      uint64_t *v6 = (uint64_t)&unk_1EDA4BF28;
      v6[1] = (uint64_t)&unk_1EDA4BF90;
      *((_OWORD *)v6 + 5) = 0u;
      *((_OWORD *)v6 + 6) = 0u;
      *((_OWORD *)v6 + 7) = 0u;
      *((_OWORD *)v6 + 8) = 0u;
      *((unsigned char *)v6 + 144) = 0;
    }
    sub_18C931C78(v3, (uint64_t)v6, a2);
  }
  return a1;
}

uint64_t sub_18C931C78(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    int v6 = (void *)result;
    uint64_t result = *(void *)result;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    void *v6 = a2;
    if (!a2) {
      *a3 = 7;
    }
  }
  else if (a2)
  {
    unsigned int v4 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
    return v4(a2);
  }
  return result;
}

void sub_18C931D38(void *a1)
{
  *a1 = &unk_1EDA4BF70;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::UMemory::operator delete(a1);
}

void *sub_18C931DB8(void *a1)
{
  *a1 = &unk_1EDA4BFB0;
  uint64_t v2 = a1[19];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 10));
  uint64_t v3 = a1[9];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

void sub_18C931E64(void *a1)
{
  int v1 = sub_18C931DB8(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C931E8C(uint64_t a1, uint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = icu::StringEnumeration::StringEnumeration(a1);
  *(void *)uint64_t v8 = &unk_1EDA4BFD0;
  *(void *)(v8 + 120) = 0;
  int v9 = (icu::UVector **)(v8 + 120);
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v27 = 0;
  long long v26 = 0u;
  long long v23 = (UChar *)&unk_1EDA47700;
  LOWORD(v24) = 2;
  *(_DWORD *)(v8 + 116) = 0;
  unsigned int v11 = (icu::UVector *)icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0x28, v10);
  uint64_t v12 = (uint64_t)v11;
  if (v11) {
    icu::UVector::UVector(v11, a4);
  }
  uint64_t v13 = (void *)sub_18C7F5A70((uint64_t)v9, v12, (int *)a4);
  unint64_t v14 = *(unsigned int *)a4;
  if ((int)v14 > 0) {
    goto LABEL_4;
  }
  uint64_t v16 = 0;
  while (1)
  {
    unint64_t v14 = a2 + 8 * v16;
    uint64_t v17 = *(void *)(v14 + 8);
    if (v17) {
      break;
    }
LABEL_20:
    if (++v16 == 52) {
      goto LABEL_4;
    }
  }
  while (1)
  {
    switch(a3)
    {
      case 2:
        unint64_t v18 = (UChar **)(v17 + 80);
        goto LABEL_12;
      case 1:
        sub_18C92CE6C(*(void *)(v17 + 72), (uint64_t)v22);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v23, (icu::UnicodeString *)v22);
        uint64_t v13 = icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
        break;
      case 0:
        unint64_t v18 = (UChar **)(v17 + 8);
LABEL_12:
        uint64_t v13 = icu::UnicodeString::operator=(&v23, v18);
        break;
    }
    LODWORD(v13) = sub_18C9320D8((uint64_t)v13, (uint64_t)&v23);
    if (!v13)
    {
      long long v21 = icu::UnicodeString::clone(&v23, v20, (uint64_t *)v14);
      unint64_t v14 = *(unsigned int *)a4;
      if (!v21 && (int)v14 <= 0)
      {
        unint64_t v14 = 7;
        *a4 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_4;
      }
      if ((int)v14 > 0) {
        goto LABEL_26;
      }
      uint64_t v13 = (void *)icu::UVector::addElement(*v9, v21, a4);
      unint64_t v14 = *(unsigned int *)a4;
      if ((int)v14 >= 1) {
        break;
      }
    }
    uint64_t v17 = *(void *)(v17 + 152);
    if (!v17) {
      goto LABEL_20;
    }
  }
  if (*v9) {
    (*(void (**)(icu::UVector *))(*(void *)*v9 + 8))(*v9);
  }
  *int v9 = 0;
LABEL_26:
  if (v21) {
    (*(void (**)(icu::UnicodeString *))(*(void *)v21 + 8))(v21);
  }
LABEL_4:
  icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v23);
  return a1;
}

BOOL sub_18C9320D8(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a2 + 8);
  if ((v2 & 0x8000u) == 0) {
    unsigned int v3 = v2 >> 5;
  }
  else {
    unsigned int v3 = *(_DWORD *)(a2 + 12);
  }
  if (v3 != 1) {
    return 0;
  }
  if ((v2 & 2) != 0) {
    unsigned int v4 = (unsigned __int16 *)(a2 + 10);
  }
  else {
    unsigned int v4 = *(unsigned __int16 **)(a2 + 24);
  }
  int v5 = *v4;
  if (v5 == 71) {
    return 1;
  }
  unint64_t v7 = 0;
  do
  {
    unint64_t v8 = v7;
    if (v7 == 15) {
      break;
    }
    int v9 = (unsigned __int16)aGyqmwwedfdahms[++v7];
  }
  while (v5 != v9);
  return v8 < 0xF;
}

uint64_t sub_18C93215C(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  unsigned int v3 = *(icu::UVector **)(a1 + 120);
  if (!v3) {
    return 0;
  }
  signed int v4 = *(_DWORD *)(a1 + 116);
  if (v4 >= *((_DWORD *)v3 + 2)) {
    return 0;
  }
  *(_DWORD *)(a1 + 116) = v4 + 1;
  return icu::UVector::elementAt(v3, v4);
}

uint64_t sub_18C932198(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18C9321A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1) {
    return *(unsigned int *)(v1 + 8);
  }
  else {
    return 0;
  }
}

void sub_18C9321B8(icu::StringEnumeration *this)
{
  *(void *)this = &unk_1EDA4BFD0;
  unsigned int v2 = (icu::UVector *)*((void *)this + 15);
  if (v2)
  {
    if (*((int *)v2 + 2) >= 1)
    {
      signed int v3 = 0;
      do
      {
        uint64_t v4 = icu::UVector::elementAt(v2, v3);
        if (v4) {
          (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        }
        ++v3;
        unsigned int v2 = (icu::UVector *)*((void *)this + 15);
      }
      while (v3 < *((_DWORD *)v2 + 2));
    }
    (*(void (**)(icu::UVector *))(*(void *)v2 + 8))(v2);
  }

  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18C93228C(icu::StringEnumeration *a1)
{
  sub_18C9321B8(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9322B4(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  signed int v3 = *(icu::UVector **)(a1 + 120);
  if (!v3) {
    return 0;
  }
  signed int v4 = *(_DWORD *)(a1 + 116);
  if (v4 >= *((_DWORD *)v3 + 2)) {
    return 0;
  }
  *(_DWORD *)(a1 + 116) = v4 + 1;
  return icu::UVector::elementAt(v3, v4);
}

uint64_t sub_18C9322F0(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18C9322F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1) {
    return *(unsigned int *)(v1 + 8);
  }
  else {
    return 0;
  }
}

void sub_18C932310(icu::StringEnumeration *this)
{
  *(void *)this = &unk_1EDA4C038;
  unsigned int v2 = (icu::UVector *)*((void *)this + 15);
  if (v2)
  {
    if (*((int *)v2 + 2) >= 1)
    {
      signed int v3 = 0;
      do
      {
        uint64_t v4 = icu::UVector::elementAt(v2, v3);
        if (v4) {
          (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        }
        ++v3;
        unsigned int v2 = (icu::UVector *)*((void *)this + 15);
      }
      while (v3 < *((_DWORD *)v2 + 2));
    }
    (*(void (**)(icu::UVector *))(*(void *)v2 + 8))(v2);
  }

  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18C9323E4(icu::StringEnumeration *a1)
{
  sub_18C932310(a1);

  icu::UMemory::operator delete(v1);
}

BOOL sub_18C93240C(icu::UnicodeString *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(v19, 0, sizeof(v19));
  icu::StringCharacterIterator::StringCharacterIterator((icu::StringCharacterIterator *)v19, a1);
  UChar32 v2 = icu::UCharCharacterIterator::first((icu::UCharCharacterIterator *)v19);
  if (!icu::UCharCharacterIterator::hasNext((icu::UCharCharacterIterator *)v19)) {
    goto LABEL_34;
  }
  unint64_t v18 = a1;
  int v3 = 0;
  int v4 = 0;
  int v5 = 0;
  int v6 = -1;
  int v7 = -1;
  int v8 = -1;
  do
  {
    uint64_t v9 = (v2 - 76);
    if (v9 <= 0x2D && ((1 << (v2 - 76)) & 0x224001002003) != 0)
    {
      int v7 = HIDWORD(v19[0]);
      if (v8 == -1) {
        int v8 = HIDWORD(v19[0]);
      }
      if (((1 << (v2 - 76)) & 0x224000002000) != 0)
      {
        int v3 = 1;
      }
      else if (((1 << (v2 - 76)) & 3) != 0)
      {
        if (v5 > 1) {
          goto LABEL_34;
        }
        ++v5;
      }
      else if (v9 == 24)
      {
        int v4 = 1;
      }
    }
    else if (u_isalpha(v2))
    {
      if (v6 == -1 && v8 != -1) {
        int v6 = HIDWORD(v19[0]);
      }
    }
    else if (!u_isspace(v2) && !u_ispunct(v2) && v2 != 8207)
    {
      goto LABEL_34;
    }
    UChar32 v2 = icu::UCharCharacterIterator::next((icu::UCharCharacterIterator *)v19);
  }
  while (icu::UCharCharacterIterator::hasNext((icu::UCharCharacterIterator *)v19));
  BOOL v11 = 0;
  if ((v8 & 0x80000000) == 0 && (v7 & 0x80000000) == 0)
  {
    unsigned int v12 = *((unsigned __int16 *)v18 + 4);
    int v13 = (__int16)v12;
    unsigned int v14 = v12 >> 5;
    int32_t v15 = v13 >= 0 ? v14 : *((_DWORD *)v18 + 3);
    BOOL v11 = 0;
    if (icu::UnicodeString::doIndexOf((uint64_t)v18, 0x27u, 0, v15) == -1)
    {
      if (v6 != -1 && v6 < v7)
      {
LABEL_34:
        BOOL v11 = 0;
        goto LABEL_35;
      }
      unsigned int v17 = v5 > 0;
      if (v4) {
        ++v17;
      }
      if (v3) {
        ++v17;
      }
      BOOL v11 = v17 > 1;
    }
  }
LABEL_35:
  icu::StringCharacterIterator::~StringCharacterIterator((icu::StringCharacterIterator *)v19);
  return v11;
}

uint64_t sub_18C932634(uint64_t a1, char *__s2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (const char **)off_1E550BAB0;
  uint64_t v10 = 272;
  while (1)
  {
    uint64_t result = strcmp(*v9, __s2);
    if (!result) {
      break;
    }
    v10 += 64;
    ++v9;
    if (v10 == 1296) {
      return result;
    }
  }
  int v15 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a3 + 32))(a3, &v15, a5);
  icu::UnicodeString::UnicodeString(&v16, 1, &v14);
  unsigned int v12 = *(char **)(a1 + 8);
  if (*(unsigned __int16 *)&v12[v10] <= 0x1Fu && v17 >= 0x20u)
  {
    int v13 = (UChar **)&v12[v10 - 8];
    icu::UnicodeString::operator=(v13, &v16);
    icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v13);
  }
  return (uint64_t)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v16);
}

void *sub_18C932774(uint64_t a1, const char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unsigned int v16 = 0;
  uint64_t result = (void *)icu::DateTimePatternGenerator::getFieldAndWidthIndices(a1, a2, &v16);
  if (result != 16)
  {
    unsigned int v9 = result;
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v14, a3, a5);
    if (*a5 <= 0)
    {
      uint64_t result = (void *)icu::ResourceTable::findValue((icu::ResourceTable *)v14, "dn", a3);
      if (result)
      {
        int v17 = 0;
        uint64_t v18 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32))(a3, &v17, a5);
        icu::UnicodeString::UnicodeString(&v20, 1, &v18);
        unint64_t v10 = *a5;
        if ((int)v10 <= 0)
        {
          uint64_t v11 = v16;
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v18, (UChar **)(*(void *)(a1 + 8) + 192 * v9 + ((unint64_t)v16 << 6) + 1288));
          if (v19 < 0x20u)
          {
            unsigned int v12 = v21;
            icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v18);
            if (v12 >= 0x20)
            {
              int v13 = (UChar **)(*(void *)(a1 + 8) + 192 * v9 + (v11 << 6) + 1288);
              icu::UnicodeString::operator=(v13, &v20);
              icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v13);
            }
          }
          else
          {
            icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v18);
          }
        }
        return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v20);
      }
    }
  }
  return result;
}

void *sub_18C93293C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v16 = 0;
  memset(v23, 0, sizeof(v23));
  icu::UnicodeString::UnicodeString(v23, a2, 0xFFFFFFFFLL, 0);
  memset(v22, 0, sizeof(v22));
  LODWORD(v17) = 0;
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void **, int *))(*(void *)a3 + 32))(a3, &v17, &v16);
  icu::UnicodeString::UnicodeString(v22, 1, &v19);
  unint64_t v8 = v16;
  if (v16 <= 0
    && uhash_geti(**(void **)(*(void *)(a1 + 8) + 4688), (uint64_t)v23) != 1
    && (!*(unsigned char *)(a1 + 16) || sub_18C93240C((icu::UnicodeString *)v22)))
  {
    if (!icu::Locale::isRightToLeft((icu::Locale *)(*(void *)(a1 + 8) + 8)))
    {
      icu::UnicodeString::UnicodeString((uint64_t)&v19, 8207);
      int v17 = &unk_1EDA47700;
      __int16 v18 = 2;
      if ((SWORD4(v22[0]) & 0x8000u) == 0) {
        int32_t v9 = WORD4(v22[0]) >> 5;
      }
      else {
        int32_t v9 = HIDWORD(v22[0]);
      }
      if ((v20 & 0x8000u) == 0) {
        uint64_t v10 = v20 >> 5;
      }
      else {
        uint64_t v10 = v21;
      }
      icu::UnicodeString::findAndReplace((icu::UnicodeString *)v22, 0, v9, (const icu::UnicodeString *)&v19, 0, v10, (const icu::UnicodeString *)&v17, 0, 0);
      icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v17);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v19);
    }
    icu::DateTimePatternGenerator::setAvailableFormat(*(icu::DateTimePatternGenerator **)(a1 + 8), (UChar **)v23, a5);
    if (*(_WORD *)(a1 + 32)) {
      __int16 v13 = 2;
    }
    else {
      __int16 v13 = *(_WORD *)(a1 + 32) & 0x1F;
    }
    *(_WORD *)(a1 + 32) = v13;
    icu::DateTimePatternGenerator::addPatternWithSkeleton(*(icu::DateTimePatternGenerator **)(a1 + 8), (UChar **)v22, (UChar **)v23, 1, (UChar **)(a1 + 24), a5);
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)v22);
  return icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v23);
}

void sub_18C932B58(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C932B80(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v43 = 0;
  __s1 = a2;
  memset(v42, 0, sizeof(v42));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v42, a3, a5);
  if (*a5 <= 0
    && icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v42, 0, (const char **)&__s1, a3))
  {
    int v7 = 0;
    unint64_t v8 = "allowed";
    int32_t v9 = "preferred";
    do
    {
      uint64_t v10 = __s1;
      uint64_t v41 = 0;
      memset(v40, 0, sizeof(v40));
      (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v40, a3, a5);
      if (*a5 > 0) {
        return;
      }
      long long v35 = v10;
      int v34 = v7;
      if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v40, 0, (const char **)&__s1, a3))
      {
        unsigned int v11 = 0;
        LODWORD(v37) = 0;
        unsigned int v12 = 0;
        int v36 = -1;
        do
        {
          __int16 v13 = __s1;
          if (!strcmp(__s1, v8))
          {
            if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3))
            {
              int v16 = v9;
              int v17 = v8;
              v38[0] = 0;
              v38[1] = 0;
              uint64_t v39 = 0;
              (*(void (**)(void *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 80))(v38, a3, a5);
              int v18 = v39;
              if ((int)v39 < -1) {
                goto LABEL_32;
              }
              uint64_t v19 = (int *)uprv_malloc(4 * (v39 + 2));
              if (!v19) {
                goto LABEL_32;
              }
              unsigned __int16 v20 = v19;
              uint64_t v37 = (v18 + 1);
              bzero(v19, 4 * (v18 + 2));
              uprv_free(v12);
              if (v18 >= 1)
              {
                uint64_t v21 = 0;
                do
                {
                  icu::ResourceArray::getValue((icu::ResourceArray *)v38, v21, a3);
                  int v46 = 0;
                  uint64_t v45 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32))(a3, &v46, a5);
                  uint64_t v22 = icu::UnicodeString::UnicodeString(v47, 1, &v45);
                  v20[v21 + 1] = sub_18C93305C(v22);
                  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v47);
                  ++v21;
                }
                while (v37 - 1 != v21);
              }
              unsigned int v12 = v20;
              unint64_t v8 = v17;
              int32_t v9 = v16;
            }
            else
            {
              uint64_t v24 = (int *)uprv_malloc(0xCuLL);
              if (!v24) {
                goto LABEL_32;
              }
              long long v25 = v24;
              void v24[2] = 0;
              *(void *)uint64_t v24 = 0;
              uprv_free(v12);
              LODWORD(v45) = 0;
              v38[0] = (*(uint64_t (**)(icu::ResourceValue *, uint64_t *, int *))(*(void *)a3 + 32))(a3, &v45, a5);
              uint64_t v26 = icu::UnicodeString::UnicodeString(v47, 1, v38);
              v25[1] = sub_18C93305C(v26);
              icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v47);
              LODWORD(v37) = 2;
              unsigned int v12 = v25;
            }
          }
          else if (!strcmp(v13, v9))
          {
            LODWORD(v45) = 0;
            v38[0] = (*(uint64_t (**)(icu::ResourceValue *, uint64_t *, int *))(*(void *)a3 + 32))(a3, &v45, a5);
            uint64_t v14 = icu::UnicodeString::UnicodeString(v47, 1, v38);
            int v36 = sub_18C93305C(v14);
            icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v47);
          }
          ++v11;
        }
        while (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v40, v11, (const char **)&__s1, a3));
        unsigned int v28 = v37;
        if ((int)v37 >= 2)
        {
          int v29 = v36;
          uint64_t v30 = (uint64_t)v35;
          if (v36 == -1) {
            int v29 = v12[1];
          }
          *unsigned int v12 = v29;
          goto LABEL_29;
        }
      }
      else
      {
        unsigned int v12 = 0;
        int v36 = -1;
      }
      unsigned int v31 = (int *)uprv_malloc(0xCuLL);
      if (!v31)
      {
LABEL_32:
        *a5 = 7;
LABEL_33:
        uprv_free(v12);
        return;
      }
      int v32 = v31;
      v31[2] = 0;
      *(void *)unsigned int v31 = 0;
      uprv_free(v12);
      int v33 = v36;
      if (v36 == -1) {
        int v33 = 1;
      }
      *int v32 = v33;
      v32[1] = v33;
      unsigned int v28 = 2;
      unsigned int v12 = v32;
      uint64_t v30 = (uint64_t)v35;
LABEL_29:
      v12[v28] = -1;
      uhash_put(qword_1EB20B710, v30, (uint64_t)v12, a5);
      if (*a5 >= 1)
      {
        unsigned int v12 = 0;
        goto LABEL_33;
      }
      uprv_free(0);
      int v7 = v34 + 1;
    }
    while (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v42, v34 + 1, (const char **)&__s1, a3));
  }
}

uint64_t sub_18C93305C(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    int v2 = *(_DWORD *)(a1 + 12);
    if (v2 == 1) {
      goto LABEL_16;
    }
    if (v2 != 2) {
      return 0xFFFFFFFFLL;
    }
LABEL_7:
    if ((v1 & 2) != 0) {
      int v3 = (_WORD *)(a1 + 10);
    }
    else {
      int v3 = *(_WORD **)(a1 + 24);
    }
    if (*v3 == 104)
    {
      unsigned int v4 = *(_DWORD *)(a1 + 12);
      if ((v1 & 0x8000u) == 0) {
        unsigned int v4 = v1 >> 5;
      }
      if (v4 >= 2 && v3[1] == 98) {
        return 4;
      }
    }
    if ((v1 & 0x8000u) == 0) {
      unsigned int v8 = v1 >> 5;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a1 + 12);
    }
    if (v8)
    {
      int32_t v9 = *(_WORD **)(a1 + 24);
      if ((v1 & 2) != 0) {
        int32_t v9 = (_WORD *)(a1 + 10);
      }
      BOOL v10 = *v9 != 104 || v8 == 1;
      if (!v10 && v9[1] == 66) {
        return 5;
      }
      __int16 v13 = *(_WORD **)(a1 + 24);
      if ((v1 & 2) != 0) {
        __int16 v13 = (_WORD *)(a1 + 10);
      }
      BOOL v14 = *v13 == 75 && v8 >= 2;
      if (v14 && v13[1] == 98) {
        return 6;
      }
      uint64_t v15 = *(_WORD **)(a1 + 24);
      if ((v1 & 2) != 0) {
        uint64_t v15 = (_WORD *)(a1 + 10);
      }
      BOOL v16 = *v15 == 75 && v8 >= 2;
      if (v16 && v15[1] == 66) {
        return 7;
      }
      int v17 = *(_WORD **)(a1 + 24);
      if ((v1 & 2) != 0) {
        int v17 = (_WORD *)(a1 + 10);
      }
      BOOL v18 = *v17 == 72 && v8 >= 2;
      if (v18 && v17[1] == 98) {
        return 8;
      }
      uint64_t v19 = (v1 & 2) != 0 ? (_WORD *)(a1 + 10) : *(_WORD **)(a1 + 24);
      if (*v19 == 72 && v8 >= 2 && v19[1] == 66) {
        return 9;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if ((v1 & 0xFFE0) == 0x40) {
    goto LABEL_7;
  }
  if ((v1 & 0xFFE0) != 0x20) {
    return 0xFFFFFFFFLL;
  }
LABEL_16:
  int v6 = (unsigned __int16 *)(a1 + 10);
  if ((v1 & 2) == 0) {
    int v6 = *(unsigned __int16 **)(a1 + 24);
  }
  int v7 = *v6;
  if (v7 == 104) {
    return 0;
  }
  int v11 = (__int16)v1;
  unsigned int v12 = v1 >> 5;
  if (v11 < 0) {
    unsigned int v12 = *(_DWORD *)(a1 + 12);
  }
  if (!v12) {
    return 0xFFFFFFFFLL;
  }
  if (v7 == 72) {
    return 1;
  }
  if (v7 != 75)
  {
    if (v7 == 107) {
      return 3;
    }
    return 0xFFFFFFFFLL;
  }
  return 2;
}

void *icu::DateTimeRule::getStaticClassID(icu::DateTimeRule *this)
{
  return &unk_1E9192248;
}

void *icu::DateTimeRule::getDynamicClassID(icu::DateTimeRule *this)
{
  return &unk_1E9192248;
}

uint64_t icu::DateTimeRule::DateTimeRule(uint64_t result, int a2, int a3, int a4, int a5)
{
  *(void *)uint64_t result = &unk_1EDA4C2A0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = a5;
  return result;
}

{
  *(void *)uint64_t result = &unk_1EDA4C2A0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = a5;
  return result;
}

uint64_t icu::DateTimeRule::DateTimeRule(uint64_t result, int a2, int a3, int a4, int a5, int a6)
{
  *(void *)uint64_t result = &unk_1EDA4C2A0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a5;
  *(_DWORD *)(result + 28) = 1;
  *(_DWORD *)(result + 32) = a6;
  return result;
}

{
  *(void *)uint64_t result = &unk_1EDA4C2A0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a5;
  *(_DWORD *)(result + 28) = 1;
  *(_DWORD *)(result + 32) = a6;
  return result;
}

uint64_t icu::DateTimeRule::DateTimeRule(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7)
{
  *(void *)uint64_t result = &unk_1EDA4C2A0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = 0;
  if (a5) {
    int v7 = 2;
  }
  else {
    int v7 = 3;
  }
  *(_DWORD *)(result + 24) = a6;
  *(_DWORD *)(result + 28) = v7;
  *(_DWORD *)(result + 32) = a7;
  return result;
}

{
  int v7;

  *(void *)uint64_t result = &unk_1EDA4C2A0;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = 0;
  if (a5) {
    int v7 = 2;
  }
  else {
    int v7 = 3;
  }
  *(_DWORD *)(result + 24) = a6;
  *(_DWORD *)(result + 28) = v7;
  *(_DWORD *)(result + 32) = a7;
  return result;
}

double icu::DateTimeRule::DateTimeRule(icu::DateTimeRule *this, const icu::DateTimeRule *a2)
{
  *(void *)this = &unk_1EDA4C2A0;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  double result = *((double *)a2 + 3);
  *((double *)this + 3) = result;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDA4C2A0;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  double result = *((double *)a2 + 3);
  *((double *)this + 3) = result;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  return result;
}

void icu::DateTimeRule::~DateTimeRule(icu::DateTimeRule *this)
{
  icu::UObject::~UObject(this);

  icu::UMemory::operator delete(v1);
}

double icu::DateTimeRule::clone(icu::DateTimeRule *this, unint64_t a2)
{
  uint64_t v3 = icu::UMemory::operator new((icu::UMemory *)0x28, a2);
  if (v3)
  {
    *(void *)uint64_t v3 = &unk_1EDA4C2A0;
    *(_OWORD *)(v3 + 8) = *(_OWORD *)((char *)this + 8);
    double result = *((double *)this + 3);
    *(double *)(v3 + 24) = result;
    *(_DWORD *)(v3 + 32) = *((_DWORD *)this + 8);
  }
  return result;
}

double icu::DateTimeRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    double result = *(double *)(a2 + 24);
    *(double *)(a1 + 24) = result;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  }
  return result;
}

BOOL icu::DateTimeRule::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result) {
    return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
  }
        && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
        && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
        && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return result;
}

BOOL icu::DateTimeRule::operator!=(uint64_t a1, uint64_t a2)
{
  return !icu::DateTimeRule::operator==(a1, a2);
}

uint64_t icu::DateTimeRule::getDateRuleType(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t icu::DateTimeRule::getTimeRuleType(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t icu::DateTimeRule::getRuleMonth(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t icu::DateTimeRule::getRuleDayOfMonth(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t icu::DateTimeRule::getRuleDayOfWeek(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t icu::DateTimeRule::getRuleWeekInMonth(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t icu::DateTimeRule::getRuleMillisInDay(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 6);
}

icu::EraRules *icu::EraRules::EraRules(icu::EraRules *a1, void *a2, int a3)
{
  *(void *)a1 = 0;
  *((_DWORD *)a1 + 2) = a3;
  uprv_free(0);
  *(void *)a1 = *a2;
  *a2 = 0;
  icu::EraRules::initCurrentEra(a1);
  return a1;
}

{
  *(void *)a1 = 0;
  *((_DWORD *)a1 + 2) = a3;
  uprv_free(0);
  *(void *)a1 = *a2;
  *a2 = 0;
  icu::EraRules::initCurrentEra(a1);
  return a1;
}

void icu::EraRules::initCurrentEra(icu::EraRules *this)
{
  int v18 = 0;
  Now = (icu::TimeZone *)ucal_getNow();
  double v4 = v3;
  int v16 = 0;
  int v17 = 0;
  uint64_t Default = icu::TimeZone::createDefault(Now);
  if (Default)
  {
    uint64_t v6 = Default;
    (*(void (**)(uint64_t, void, int *, int *, int *, double))(*(void *)Default + 48))(Default, 0, &v17, &v16, &v18, v4);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    double v4 = v4 + (double)(v16 + v17);
  }
  int v15 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v12 = 0;
  sub_18C93E568(&v15, (_DWORD *)&v14 + 1, &v14, (int *)&v13 + 1, (int *)&v13, &v12, v4);
  uint64_t v7 = *((unsigned int *)this + 2);
  if ((int)v7 >= 1) {
    int v8 = 1;
  }
  else {
    int v8 = *((_DWORD *)this + 2);
  }
  int v9 = v8 - 1;
  uint64_t v10 = v7 - 1;
  while ((int)v7 >= 2)
  {
    signed int v11 = *(_DWORD *)(*(void *)this + 4 * v10);
    LODWORD(v7) = v7 - 1;
    --v10;
    if ((int)(v14 | (v15 << 16) | ((HIDWORD(v14) << 8) + 256)) >= v11) {
      goto LABEL_11;
    }
  }
  LODWORD(v7) = v9;
LABEL_11:
  *((_DWORD *)this + 3) = v7;
}

void icu::EraRules::~EraRules(void **this)
{
}

{
  uprv_free(*this);
}

icu::EraRules *icu::EraRules::createInstance(icu::EraRules *this, const char *a2, int *a3, UErrorCode *a4)
{
  if (*a3 > 0) {
    return 0;
  }
  int v6 = (int)a2;
  uint64_t v8 = ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)a3);
  ures_getByKey(v8, "calendarData", v8, a3);
  ures_getByKey(v8, (const char *)this, v8, a3);
  ures_getByKey(v8, "eras", v8, a3);
  double v4 = 0;
  if (*a3 <= 0)
  {
    signed int Size = ures_getSize(v8);
    uint64_t v10 = uprv_malloc(4 * Size);
    signed int v11 = v10;
    if (!v10) {
      goto LABEL_55;
    }
    bzero(v10, 4 * Size);
    int v32 = 0x7FFFFFFF;
LABEL_6:
    if (ures_hasNext(v8))
    {
      NextResource = ures_getNextResource(v8, 0, (UErrorCode *)a3);
      uint64_t v15 = (uint64_t)NextResource;
      if (*a3 > 0) {
        goto LABEL_13;
      }
      uint64_t Key = ures_getKey((uint64_t)NextResource);
      __endptr = 0;
      unsigned int v17 = strtol((const char *)Key, &__endptr, 10);
      if (&__endptr[-Key] != (char *)strlen((const char *)Key)
        || (v17 & 0x80000000) != 0
        || Size <= (int)v17
        || v11[v17])
      {
        goto LABEL_12;
      }
      int v33 = 0;
      char v19 = 1;
      while (1)
      {
        if (!ures_hasNext(v15))
        {
          if (v11[v17]) {
            goto LABEL_40;
          }
          if (v17) {
            goto LABEL_12;
          }
          v11[v17] = -2147483391;
LABEL_40:
          if (v19)
          {
            if (v32 > (int)v17)
            {
              int v18 = 0;
              goto LABEL_14;
            }
LABEL_12:
            *a3 = 3;
LABEL_13:
            int v18 = 1;
            goto LABEL_14;
          }
          int v18 = 0;
          int v29 = v32;
          if (v32 >= (int)v17) {
            int v29 = v17;
          }
          int v32 = v29;
LABEL_14:
          if (v15) {
            ures_close(v15);
          }
          if (v18)
          {
            double v4 = 0;
            goto LABEL_56;
          }
          goto LABEL_6;
        }
        unsigned __int16 v20 = ures_getNextResource(v15, 0, (UErrorCode *)a3);
        uint64_t v21 = (uint64_t)v20;
        if (*a3 > 0) {
          break;
        }
        long long v23 = (const char *)ures_getKey((uint64_t)v20);
        if (!strcmp(v23, "start"))
        {
          IntVector = ures_getIntVector(v21, &v33, a3);
          if (*a3 > 0) {
            break;
          }
          if (v33 != 3
            || (int v26 = *IntVector, v26 != (__int16)v26)
            || (int v27 = IntVector[1], (v27 - 1) > 0xB)
            || (int v28 = IntVector[2], (v28 - 1) >= 0x1F))
          {
            char v22 = 0;
            *a3 = 3;
            if (!v21) {
              goto LABEL_29;
            }
LABEL_28:
            ures_close(v21);
            goto LABEL_29;
          }
          v11[v17] = (v27 << 8) | (v26 << 16) | v28;
        }
        else if (!strcmp(v23, "named"))
        {
          String = ures_getString(v21, &v33, a3);
          if (!u_strncmp(String, (const UChar *)"f", 5)) {
            char v19 = 0;
          }
        }
        char v22 = 1;
        if (v21) {
          goto LABEL_28;
        }
LABEL_29:
        if ((v22 & 1) == 0) {
          goto LABEL_13;
        }
      }
      char v22 = 0;
      if (!v21) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    uint64_t v30 = icu::UMemory::operator new(v13, (icu::UMemory *)0x10, v12);
    double v4 = (icu::EraRules *)v30;
    if (v6 || v32 == 0x7FFFFFFF)
    {
      if (v30)
      {
        *uint64_t v30 = 0;
        *((_DWORD *)v30 + 2) = Size;
LABEL_54:
        uprv_free(0);
        *(void *)double v4 = v11;
        icu::EraRules::initCurrentEra(v4);
        signed int v11 = 0;
        goto LABEL_56;
      }
    }
    else if (v30)
    {
      *uint64_t v30 = 0;
      *((_DWORD *)v30 + 2) = v32;
      goto LABEL_54;
    }
LABEL_55:
    double v4 = 0;
    *a3 = 7;
LABEL_56:
    uprv_free(v11);
  }
  if (v8) {
    ures_close(v8);
  }
  return v4;
}

uint64_t icu::EraRules::getStartDate(uint64_t this, unsigned int a2, int (*a3)[3], UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    if ((a2 & 0x80000000) != 0 || *(_DWORD *)(this + 8) <= (signed int)a2)
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      int v4 = *(_DWORD *)(*(void *)this + 4 * a2);
      int v5 = BYTE1(v4);
      int v6 = v4;
      if (v4 == -2147483391) {
        int v7 = -1;
      }
      else {
        int v7 = v4 >> 16;
      }
      (*a3)[0] = v7;
      (*a3)[1] = v5;
      (*a3)[2] = v6;
    }
  }
  return this;
}

uint64_t icu::EraRules::getStartYear(icu::EraRules *this, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0x3FFFFFFFLL;
  }
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 2) <= (signed int)a2)
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0x3FFFFFFFLL;
  }
  int v3 = *(_DWORD *)(*(void *)this + 4 * a2);
  if (v3 == -2147483391) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v3 >> 16);
  }
}

uint64_t icu::EraRules::getEraIndex(icu::EraRules *this, int a2, int a3, unsigned int a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  if ((a3 - 13) < 0xFFFFFFF4 || a4 - 32 <= 0xFFFFFFE0)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }
  int v6 = *((_DWORD *)this + 2);
  uint64_t result = *((int *)this + 3);
  uint64_t v8 = *(void *)this;
  int v9 = *(_DWORD *)(v8 + 4 * result);
  if (a2 <= -32769)
  {
    if (v9 == -2147483391) {
      goto LABEL_13;
    }
LABEL_12:
    uint64_t result = 0;
    goto LABEL_13;
  }
  if (a2 < 0x8000 && (int)((a3 << 8) | (a2 << 16) | a4) < v9) {
    goto LABEL_12;
  }
LABEL_13:
  if ((int)result < v6 - 1)
  {
    int v10 = (a3 << 8) | (a2 << 16) | a4;
    if ((a3 | a4) <= 1) {
      int v11 = 0;
    }
    else {
      int v11 = -1;
    }
    do
    {
      int v12 = result + v6;
      if ((int)result + v6 < 0 != __OFADD__(result, v6)) {
        ++v12;
      }
      int v13 = v12 >> 1;
      int v14 = *(_DWORD *)(v8 + 4 * v13);
      if (a2 > -32769)
      {
        if (a2 < 0x8000)
        {
          BOOL v16 = v10 <= v14;
          int v15 = v10 != v14;
          if (!v16) {
            int v15 = -1;
          }
        }
        else
        {
          int v15 = -1;
        }
      }
      else if (v14 == -2147483391)
      {
        int v15 = v11;
      }
      else
      {
        int v15 = 1;
      }
      if (v15 < 1)
      {
        uint64_t result = v13;
      }
      else
      {
        int v6 = v13;
        uint64_t result = result;
      }
    }
    while ((int)result < v6 - 1);
  }
  return result;
}

void *icu::EscapeTransliterator::getStaticClassID(icu::EscapeTransliterator *this)
{
  return &unk_1E9192249;
}

void *sub_18C933DA4()
{
  return &unk_1E9192249;
}

void *sub_18C933DB0()
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v27 = "A";
  unint64_t v0 = icu::UnicodeString::UnicodeString(v28, 1, &v27);
  icu::Transliterator::_registerFactory(v0, (uint64_t)sub_18C933FF4, 0);
  int v2 = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v28);
  int v26 = "A";
  unint64_t v3 = icu::UnicodeString::UnicodeString(v2, 1, &v26);
  icu::Transliterator::_registerFactory(v3, (uint64_t)sub_18C9340EC, 0);
  int v5 = icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v28);
  long long v25 = L"Any-Hex/C";
  unint64_t v6 = icu::UnicodeString::UnicodeString(v5, 1, &v25);
  icu::Transliterator::_registerFactory(v6, (uint64_t)sub_18C9341E4, 0);
  uint64_t v8 = icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v28);
  uint64_t v24 = L"Any-Hex/XML";
  unint64_t v9 = icu::UnicodeString::UnicodeString(v8, 1, &v24);
  icu::Transliterator::_registerFactory(v9, (uint64_t)sub_18C9343CC, 0);
  int v11 = icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v28);
  long long v23 = L"Any-Hex/XML10";
  unint64_t v12 = icu::UnicodeString::UnicodeString(v11, 1, &v23);
  icu::Transliterator::_registerFactory(v12, (uint64_t)sub_18C9344A0, 0);
  int v14 = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v28);
  char v22 = L"Any-Hex/Perl";
  unint64_t v15 = icu::UnicodeString::UnicodeString(v14, 1, &v22);
  icu::Transliterator::_registerFactory(v15, (uint64_t)sub_18C934574, 0);
  unsigned int v17 = icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v28);
  uint64_t v21 = "A";
  unint64_t v18 = icu::UnicodeString::UnicodeString(v17, 1, &v21);
  icu::Transliterator::_registerFactory(v18, (uint64_t)sub_18C9340EC, 0);
  return icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v28);
}

uint64_t *sub_18C933FF4(UChar **a1, unint64_t a2)
{
  int v11 = (uint64_t *)*MEMORY[0x1E4F143B8];
  unint64_t v3 = icu::UMemory::operator new(v11, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    int v7 = "U";
    icu::UnicodeString::UnicodeString(v10, 1, &v7);
    uint64_t v8 = (UChar *)&unk_1EDA47700;
    __int16 v9 = 2;
    sub_18C934648((uint64_t)v3, a1, v10, &v8, 16, 4, 1, 0);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v8);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v10);
  }
  return v3;
}

uint64_t *sub_18C9340EC(UChar **a1, unint64_t a2)
{
  int v11 = (uint64_t *)*MEMORY[0x1E4F143B8];
  unint64_t v3 = icu::UMemory::operator new(v11, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    int v7 = L"\\u";
    icu::UnicodeString::UnicodeString(v10, 1, &v7);
    uint64_t v8 = (UChar *)&unk_1EDA47700;
    __int16 v9 = 2;
    sub_18C934648((uint64_t)v3, a1, v10, &v8, 16, 4, 0, 0);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v8);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v10);
  }
  return v3;
}

uint64_t *sub_18C9341E4(UChar **a1, unint64_t a2)
{
  long long v23 = (uint64_t *)*MEMORY[0x1E4F143B8];
  unint64_t v3 = icu::UMemory::operator new(v23, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    int v14 = L"\\u";
    icu::UnicodeString::UnicodeString(v22, 1, &v14);
    unsigned __int16 v20 = (UChar *)&unk_1EDA47700;
    __int16 v21 = 2;
    int v5 = icu::UMemory::operator new((uint64_t *)&v20, (icu::UMemory *)0xF0, v4);
    if (v5)
    {
      uint64_t v6 = (uint64_t)v5;
      unint64_t v18 = (UChar *)&unk_1EDA47700;
      __int16 v19 = 2;
      int v13 = "\\"";
      icu::UnicodeString::UnicodeString(v17, 1, &v13);
      unint64_t v15 = (UChar *)&unk_1EDA47700;
      __int16 v16 = 2;
      sub_18C934648(v6, &v18, v17, &v15, 16, 8, 1, 0);
      sub_18C934648((uint64_t)v3, a1, v22, &v20, 16, 4, 1, v6);
      icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v15);
      icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v17);
      unint64_t v12 = v13;
      icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)&v18);
    }
    else
    {
      sub_18C934648((uint64_t)v3, a1, v22, &v20, 16, 4, 1, 0);
    }
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v22);
  }
  return v3;
}

uint64_t *sub_18C9343CC(UChar **a1, unint64_t a2)
{
  int v10 = (uint64_t *)*MEMORY[0x1E4F143B8];
  unint64_t v3 = icu::UMemory::operator new(v10, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    int v7 = L"&#x";
    icu::UnicodeString::UnicodeString(v9, 1, &v7);
    icu::UnicodeString::UnicodeString((uint64_t)v8, 59);
    sub_18C934648((uint64_t)v3, a1, v9, v8, 16, 1, 1, 0);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v8);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v9);
  }
  return v3;
}

uint64_t *sub_18C9344A0(UChar **a1, unint64_t a2)
{
  int v10 = (uint64_t *)*MEMORY[0x1E4F143B8];
  unint64_t v3 = icu::UMemory::operator new(v10, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    int v7 = L"&#";
    icu::UnicodeString::UnicodeString(v9, 1, &v7);
    icu::UnicodeString::UnicodeString((uint64_t)v8, 59);
    sub_18C934648((uint64_t)v3, a1, v9, v8, 10, 1, 1, 0);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v8);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v9);
  }
  return v3;
}

uint64_t *sub_18C934574(UChar **a1, unint64_t a2)
{
  int v10 = (uint64_t *)*MEMORY[0x1E4F143B8];
  unint64_t v3 = icu::UMemory::operator new(v10, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    int v7 = "\\"";
    icu::UnicodeString::UnicodeString(v9, 1, &v7);
    icu::UnicodeString::UnicodeString((uint64_t)v8, 125);
    sub_18C934648((uint64_t)v3, a1, v9, v8, 16, 1, 1, 0);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v8);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v9);
  }
  return v3;
}

uint64_t sub_18C934648(uint64_t a1, UChar **a2, UChar **a3, UChar **a4, int a5, int a6, char a7, uint64_t a8)
{
  unint64_t v15 = icu::Transliterator::Transliterator((icu::Transliterator *)a1, a2, 0);
  *(void *)unint64_t v15 = &unk_1EDA4C2E0;
  *(void *)(a1 + 88) = &unk_1EDA47700;
  *(_WORD *)(a1 + 96) = 2;
  *(void *)(a1 + 152) = &unk_1EDA47700;
  *(_WORD *)(a1 + 160) = 2;
  icu::UnicodeString::operator=((UChar **)v15 + 11, a3);
  icu::UnicodeString::operator=((UChar **)(a1 + 152), a4);
  *(_DWORD *)(a1 + 216) = a5;
  *(_DWORD *)(a1 + 220) = a6;
  *(unsigned char *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = a8;
  return a1;
}

uint64_t sub_18C934728(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = icu::Transliterator::Transliterator((icu::Transliterator *)a1, (UChar **)a2);
  *(void *)unint64_t v4 = &unk_1EDA4C2E0;
  icu::UnicodeString::UnicodeString((icu::Transliterator *)((char *)v4 + 88), (UChar **)(a2 + 88));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 152), (UChar **)(a2 + 152));
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  uint64_t v6 = *(uint64_t **)(a2 + 232);
  if (v6)
  {
    int v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0xF0, v5);
    if (v7) {
      int v7 = (uint64_t *)sub_18C934728(v7, *(void *)(a2 + 232));
    }
  }
  else
  {
    int v7 = 0;
  }
  *(void *)(a1 + 232) = v7;
  return a1;
}

void sub_18C9347BC(void *a1@<X0>, void *a2@<X8>)
{
  *a1 = &unk_1EDA4C2E0;
  uint64_t v3 = a1[29];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 19));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 11));

  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
}

void sub_18C93484C(void *a1@<X0>, void *a2@<X8>)
{
  sub_18C9347BC(a1, a2);

  icu::UMemory::operator delete(v2);
}

uint64_t *sub_18C934874@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  if (result) {
    return (uint64_t *)sub_18C934728((uint64_t)result, a1);
  }
  return result;
}

void *sub_18C9348A8(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3[2];
  int v6 = a3[3];
  memset(v44, 0, sizeof(v44));
  int v7 = (const icu::UnicodeString *)(a1 + 88);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v44, (UChar **)(a1 + 88));
  if (*(__int16 *)(a1 + 96) < 0) {
    int v8 = *(_DWORD *)(a1 + 100);
  }
  else {
    int v8 = *(unsigned __int16 *)(a1 + 96) >> 5;
  }
  if ((int)v5 < v6)
  {
    int v9 = 0;
    while (1)
    {
      uint64_t v10 = *a2;
      if (!*(unsigned char *)(a1 + 224)) {
        break;
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 80))(a2, v5);
      unint64_t v12 = (icu::UnicodeString *)v11;
      if (*(unsigned char *)(a1 + 224)) {
        BOOL v13 = v11 >= 0x10000;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13) {
        int v14 = 2;
      }
      else {
        int v14 = 1;
      }
      if (v11 < 0x10000) {
        goto LABEL_22;
      }
      uint64_t v15 = *(void *)(a1 + 232);
      if (!v15) {
        goto LABEL_23;
      }
      if (BYTE8(v44[0]))
      {
        icu::UnicodeString::unBogus((uint64_t)v44);
        uint64_t v15 = *(void *)(a1 + 232);
      }
      else
      {
        if ((SWORD4(v44[0]) & 0x8000u) == 0) {
          int v16 = WORD4(v44[0]) >> 5;
        }
        else {
          int v16 = HIDWORD(v44[0]);
        }
        if (v16)
        {
          BYTE8(v44[0]) &= 0x1Fu;
          WORD4(v44[0]) = BYTE8(v44[0]);
        }
      }
      int v28 = (const icu::UnicodeString *)(v15 + 88);
      unsigned int v29 = *(unsigned __int16 *)(v15 + 96);
      int v30 = (__int16)v29;
      unsigned int v31 = v29 >> 5;
      unsigned int v32 = *(_DWORD *)(v15 + 100);
      if (v30 >= 0) {
        uint64_t v33 = v31;
      }
      else {
        uint64_t v33 = v32;
      }
      icu::UnicodeString::doAppend((uint64_t)v44, v28, 0, v33);
      icu::ICU_Utility::appendNumber((icu::ICU_Utility *)v44, v12, *(_DWORD *)(*(void *)(a1 + 232) + 216), *(_DWORD *)(*(void *)(a1 + 232) + 220));
      uint64_t v34 = *(void *)(a1 + 232);
      long long v35 = (const icu::UnicodeString *)(v34 + 152);
      unsigned int v36 = *(unsigned __int16 *)(v34 + 160);
      int v37 = (__int16)v36;
      unsigned int v38 = v36 >> 5;
      unsigned int v39 = *(_DWORD *)(v34 + 164);
      if (v37 >= 0) {
        uint64_t v40 = v38;
      }
      else {
        uint64_t v40 = v39;
      }
      icu::UnicodeString::doAppend((uint64_t)v44, v35, 0, v40);
      int v9 = 1;
LABEL_42:
      (*(void (**)(uint64_t *, uint64_t, void, _OWORD *))(*a2 + 32))(a2, v5, (v14 + v5), v44);
      int v26 = WORD4(v44[0]) >> 5;
      if (SWORD4(v44[0]) < 0) {
        int v26 = HIDWORD(v44[0]);
      }
      uint64_t v5 = (v26 + v5);
      int v6 = v6 - v14 + v26;
      if ((int)v5 >= v6) {
        goto LABEL_61;
      }
    }
    unint64_t v12 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 72))(a2, v5);
LABEL_22:
    int v14 = 1;
LABEL_23:
    if (v9)
    {
      if (BYTE8(v44[0]))
      {
        icu::UnicodeString::unBogus((uint64_t)v44);
      }
      else
      {
        if ((SWORD4(v44[0]) & 0x8000u) == 0) {
          int v17 = WORD4(v44[0]) >> 5;
        }
        else {
          int v17 = HIDWORD(v44[0]);
        }
        if (v17)
        {
          BYTE8(v44[0]) &= 0x1Fu;
          WORD4(v44[0]) = BYTE8(v44[0]);
        }
      }
      unsigned int v18 = *(unsigned __int16 *)(a1 + 96);
      int v19 = (__int16)v18;
      unsigned int v20 = v18 >> 5;
      if (v19 >= 0) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = *(unsigned int *)(a1 + 100);
      }
      icu::UnicodeString::doAppend((uint64_t)v44, v7, 0, v21);
    }
    else if (v8 || (BYTE8(v44[0]) & 1) == 0)
    {
      if ((SWORD4(v44[0]) & 0x8000u) == 0) {
        unsigned int v27 = WORD4(v44[0]) >> 5;
      }
      else {
        unsigned int v27 = HIDWORD(v44[0]);
      }
      if (v27 > v8)
      {
        if (v8 > 1023)
        {
          WORD4(v44[0]) = BYTE8(v44[0]) | 0xFFE0;
          HIDWORD(v44[0]) = v8;
        }
        else
        {
          WORD4(v44[0]) = BYTE8(v44[0]) & 0x1F | (32 * v8);
        }
      }
    }
    else
    {
      icu::UnicodeString::unBogus((uint64_t)v44);
    }
    icu::ICU_Utility::appendNumber((icu::ICU_Utility *)v44, v12, *(_DWORD *)(a1 + 216), *(_DWORD *)(a1 + 220));
    unsigned int v22 = *(unsigned __int16 *)(a1 + 160);
    int v23 = (__int16)v22;
    unsigned int v24 = v22 >> 5;
    if (v23 >= 0) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = *(unsigned int *)(a1 + 164);
    }
    icu::UnicodeString::doAppend((uint64_t)v44, (const icu::UnicodeString *)(a1 + 152), 0, v25);
    int v9 = 0;
    goto LABEL_42;
  }
LABEL_61:
  unint64_t v41 = (v6 - a3[3] + a3[1]);
  a3[2] = v5;
  a3[3] = v6;
  a3[1] = v41;
  return icu::UnicodeString::~UnicodeString((void *)v41, (icu::UnicodeString *)v44);
}

void *icu::EthiopicCalendar::getStaticClassID(icu::EthiopicCalendar *this)
{
  return &unk_1E919224C;
}

void *sub_18C934C3C()
{
  return &unk_1E919224C;
}

void *icu::EthiopicAmeteAlemCalendar::getStaticClassID(icu::EthiopicAmeteAlemCalendar *this)
{
  return &unk_1E919224D;
}

void *sub_18C934C54()
{
  return &unk_1E919224D;
}

icu::CECalendar *sub_18C934C60(icu::CECalendar *a1, char **a2, UErrorCode *a3)
{
  uint64_t result = icu::CECalendar::CECalendar(a1, a2, a3);
  *(void *)uint64_t result = &unk_1EDA4C390;
  return result;
}

void sub_18C934C98(icu::CECalendar *a1)
{
  icu::CECalendar::~CECalendar(a1);

  icu::UMemory::operator delete(v1);
}

icu::CECalendar *sub_18C934CC0@<X0>(const icu::CECalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::CECalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    uint64_t result = (icu::CECalendar *)icu::CECalendar::CECalendar(result, a1);
    *(void *)uint64_t result = &unk_1EDA4C390;
  }
  return result;
}

const char *sub_18C934D10()
{
  return "ethiopic";
}

uint64_t sub_18C934D1C(_DWORD *a1)
{
  if (icu::Calendar::newerField((uint64_t)a1, 0x13u, 1u) == 19)
  {
    if ((int)a1[52] >= 1) {
      return a1[22];
    }
    return 1;
  }
  if ((int)a1[33] < 1 || a1[3] == 1)
  {
    if ((int)a1[34] >= 1) {
      return a1[4];
    }
    return 1;
  }
  if ((int)a1[34] < 1) {
    return 4294961797;
  }
  else {
    return (a1[4] - 5500);
  }
}

double sub_18C934DB8(uint64_t a1, icu::CECalendar *a2)
{
  *(void *)unint64_t v12 = 0;
  int v11 = 0;
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 440))(a1);
  icu::CECalendar::jdToCE(a2, v4, &v12[1], v12, &v11, v5);
  int v6 = v12[1];
  *(_DWORD *)(a1 + 88) = v12[1];
  *(_DWORD *)(a1 + 208) = 1;
  *(unsigned char *)(a1 + 127) = 1;
  BOOL v7 = v6 > 0;
  *(unsigned char *)(a1 + 108) = 1;
  if (v6 <= 0) {
    v6 += 5500;
  }
  *(_DWORD *)(a1 + 12) = v7;
  *(_DWORD *)(a1 + 16) = v6;
  *(void *)&double result = 0x100000001;
  *(void *)(a1 + 132) = 0x100000001;
  *(_WORD *)(a1 + 109) = 257;
  int v10 = v11;
  int v9 = v12[0];
  *(_DWORD *)(a1 + 20) = v12[0];
  *(_DWORD *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 104) = v9;
  *(_DWORD *)(a1 + 224) = 1;
  *(unsigned char *)(a1 + 131) = 1;
  *(unsigned char *)(a1 + 113) = 1;
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = v10 + 30 * v9;
  *(void *)(a1 + 152) = 0x100000001;
  *(unsigned char *)(a1 + 114) = 1;
  return result;
}

uint64_t sub_18C934EA0(unsigned char *a1, UErrorCode *a2)
{
  unsigned int v3 = icu::Calendar::get(a1, 0x13u, a2) + 8;
  if (*(int *)a2 <= 0) {
    return v3;
  }
  else {
    return 0;
  }
}

unsigned char *sub_18C934EDC(unsigned char *a1, int a2)
{
  return icu::Calendar::set(a1, 0x13u, a2 - 8);
}

double sub_18C934EE8()
{
  if (atomic_load_explicit(dword_1EB20B720, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20B720))
  {
    sub_18C934F38();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B720);
  }
  return *(double *)&qword_1EB20A710;
}

void sub_18C934F38()
{
  v4[78] = *MEMORY[0x1E4F143B8];
  UErrorCode v2 = U_ZERO_ERROR;
  bzero(v4, 0x270uLL);
  icu::Locale::Locale((icu::Locale *)v3, "@calendar=ethiopic", 0, 0, 0);
  icu::CECalendar::CECalendar((icu::CECalendar *)v4, v3, &v2);
  v4[0] = &unk_1EDA4C390;
  icu::Locale::~Locale((icu::Locale *)v3);
  if (v2 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v0);
    icu::Calendar::setTimeInMillis((uint64_t)v4, v1, &v2);
    icu::Calendar::add(v4, 1u, -80, &v2);
    qword_1EB20A710 = icu::Calendar::getTimeInMillis((icu::Calendar *)v4, &v2);
    dword_1EB20A718 = icu::Calendar::get(v4, 1u, &v2);
  }
  icu::CECalendar::~CECalendar((icu::CECalendar *)v4);
}

uint64_t sub_18C935050()
{
  if (atomic_load_explicit(dword_1EB20B720, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20B720))
  {
    sub_18C934F38();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B720);
  }
  return dword_1EB20A718;
}

uint64_t sub_18C9350A0()
{
  return 1723856;
}

icu::CECalendar *sub_18C9350AC(icu::CECalendar *a1, char **a2, UErrorCode *a3)
{
  double result = icu::CECalendar::CECalendar(a1, a2, a3);
  *(void *)double result = &unk_1EDA4C560;
  return result;
}

void sub_18C9350E4(icu::CECalendar *a1)
{
  icu::CECalendar::~CECalendar(a1);

  icu::UMemory::operator delete(v1);
}

icu::CECalendar *sub_18C93510C@<X0>(const icu::CECalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double result = (icu::CECalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    double result = (icu::CECalendar *)icu::CECalendar::CECalendar(result, a1);
    *(void *)double result = &unk_1EDA4C560;
  }
  return result;
}

const char *sub_18C93515C()
{
  return "ethiopic-amete-alem";
}

uint64_t sub_18C935168(_DWORD *a1)
{
  if (icu::Calendar::newerField((uint64_t)a1, 0x13u, 1u) == 19)
  {
    if ((int)a1[52] >= 1) {
      return a1[22];
    }
  }
  else if ((int)a1[34] >= 1)
  {
    return (a1[4] - 5500);
  }
  return 1;
}

double sub_18C9351D0(uint64_t a1, icu::CECalendar *a2)
{
  *(void *)int v11 = 0;
  int v10 = 0;
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 440))(a1);
  icu::CECalendar::jdToCE(a2, v4, &v11[1], v11, &v10, v5);
  int v6 = v11[1];
  *(_DWORD *)(a1 + 88) = v11[1];
  *(_DWORD *)(a1 + 208) = 1;
  *(unsigned char *)(a1 + 127) = 1;
  *(unsigned char *)(a1 + 108) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = v6 + 5500;
  *(void *)&double result = 0x100000001;
  *(void *)(a1 + 132) = 0x100000001;
  *(_WORD *)(a1 + 109) = 257;
  int v9 = v10;
  int v8 = v11[0];
  *(_DWORD *)(a1 + 20) = v11[0];
  *(_DWORD *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 104) = v8;
  *(_DWORD *)(a1 + 224) = 1;
  *(unsigned char *)(a1 + 131) = 1;
  *(unsigned char *)(a1 + 113) = 1;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v9 + 30 * v8;
  *(void *)(a1 + 152) = 0x100000001;
  *(unsigned char *)(a1 + 114) = 1;
  return result;
}

uint64_t sub_18C9352AC(uint64_t a1, int a2, int a3)
{
  if (a2) {
    return icu::CECalendar::handleGetLimit(a1, a2, a3);
  }
  else {
    return 0;
  }
}

uint64_t sub_18C9352BC(unsigned char *a1, UErrorCode *a2)
{
  unsigned int v3 = icu::Calendar::get(a1, 0x13u, a2) - 5492;
  if (*(int *)a2 <= 0) {
    return v3;
  }
  else {
    return 0;
  }
}

unsigned char *sub_18C9352FC(unsigned char *a1, int a2)
{
  return icu::Calendar::set(a1, 0x13u, a2 + 5492);
}

uint64_t sub_18C93530C()
{
  return sub_18C935050() + 5500;
}

void *icu::Formattable::getStaticClassID(icu::Formattable *this)
{
  return &unk_1E9192250;
}

void *icu::Formattable::getDynamicClassID(icu::Formattable *this)
{
  return &unk_1E9192250;
}

void icu::Formattable::init(icu::Formattable *this)
{
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this)
{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  return this;
}

{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  return this;
}

uint64_t icu::Formattable::Formattable(uint64_t a1, double a2)
{
  *(void *)a1 = &unk_1EDA4C760;
  *(void *)(a1 + 48) = &unk_1EDA47700;
  *(_WORD *)(a1 + 56) = 2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = 2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 48));
  *(_DWORD *)(a1 + 40) = 0;
  *(double *)(a1 + 8) = a2;
  return a1;
}

{
  *(void *)a1 = &unk_1EDA4C760;
  *(void *)(a1 + 48) = &unk_1EDA47700;
  *(_WORD *)(a1 + 56) = 2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = 2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 48));
  *(_DWORD *)(a1 + 40) = 0;
  *(double *)(a1 + 8) = a2;
  return a1;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, double a2)
{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 1;
  *((double *)this + 1) = a2;
  return this;
}

{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 1;
  *((double *)this + 1) = a2;
  return this;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, int a2)
{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((void *)this + 1) = a2;
  return this;
}

{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((void *)this + 1) = a2;
  return this;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, uint64_t a2)
{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 5;
  *((void *)this + 1) = a2;
  return this;
}

{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 5;
  *((void *)this + 1) = a2;
  return this;
}

uint64_t icu::Formattable::Formattable(uint64_t a1, const char *a2, int a3, UErrorCode *a4)
{
  *(void *)a1 = &unk_1EDA4C760;
  *(void *)(a1 + 48) = &unk_1EDA47700;
  *(_WORD *)(a1 + 56) = 2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = 2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 48));
  icu::Formattable::setDecimalNumber((icu::Formattable *)a1, a2, a3, a4);
  return a1;
}

void icu::Formattable::setDecimalNumber(icu::Formattable *a1, const char *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    icu::Formattable::dispose(a1);
    int v10 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(v9, (icu::UMemory *)0x48, v8);
    int v11 = v10;
    if (v10) {
      icu::number::impl::DecimalQuantity::DecimalQuantity(v10);
    }
    icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v11, a2, a3, a4);
    icu::Formattable::adoptDecimalQuantity(a1, v11);
  }
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, UChar **a2)
{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 3;
  uint64_t v5 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)3, (icu::UMemory *)0x40, v4);
  if (v5) {
    uint64_t v5 = icu::UnicodeString::UnicodeString(v5, a2);
  }
  *((void *)this + 1) = v5;
  return this;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, icu::UnicodeString *a2)
{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 3;
  *((void *)this + 1) = a2;
  return this;
}

{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 3;
  *((void *)this + 1) = a2;
  return this;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, icu::UObject *a2)
{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 6;
  *((void *)this + 1) = a2;
  return this;
}

{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 6;
  *((void *)this + 1) = a2;
  return this;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, const icu::Formattable *a2, unint64_t a3)
{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 4;
  *((void *)this + 1) = sub_18C935D08((uint64_t)a2, a3);
  *((_DWORD *)this + 4) = a3;
  return this;
}

void *sub_18C935D08(uint64_t a1, unint64_t a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = (int)a2;
  BOOL v5 = !is_mul_ok((int)a2, 0x70uLL);
  uint64_t v6 = 112 * (int)a2;
  BOOL v7 = __CFADD__(v6, 16);
  uint64_t v8 = v6 + 16;
  if (v7) {
    BOOL v5 = 1;
  }
  if (v5) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = v8;
  }
  int v10 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v9, a2);
  if (!v10) {
    return 0;
  }
  void *v10 = 112;
  v10[1] = v4;
  int v11 = v10 + 2;
  if (v2)
  {
    unint64_t v12 = &v11[14 * (int)v4];
    BOOL v13 = v10 + 8;
    int v14 = v10 + 2;
    do
    {
      *int v14 = &unk_1EDA4C760;
      v14[1] = 0;
      v14[6] = &unk_1EDA47700;
      *((_WORD *)v14 + 28) = 2;
      *((_DWORD *)v14 + 10) = 2;
      v14[3] = 0;
      v14[4] = 0;
      icu::UnicodeString::setToBogus((icu::UnicodeString *)(v14 + 6));
      v13 += 14;
      v14 += 14;
    }
    while (v14 != v12);
    if ((int)v2 >= 1)
    {
      uint64_t v2 = v2;
      uint64_t v15 = (uint64_t)v11;
      do
      {
        uint64_t v15 = icu::Formattable::operator=(v15, a1) + 112;
        a1 += 112;
        --v2;
      }
      while (v2);
    }
  }
  return v11;
}

uint64_t icu::Formattable::Formattable(icu::Formattable *this, const icu::Formattable *a2)
{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));

  return icu::Formattable::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::Formattable::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::Formattable::dispose((icu::Formattable *)a1);
    int v6 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 40) = v6;
    switch(v6)
    {
      case 0:
      case 1:
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        break;
      case 2:
      case 5:
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        break;
      case 3:
        BOOL v7 = (icu::UnicodeString *)icu::UMemory::operator new(v5, (icu::UMemory *)0x40, v4);
        if (v7) {
          BOOL v7 = icu::UnicodeString::UnicodeString(v7, *(UChar ***)(a2 + 8));
        }
        goto LABEL_9;
      case 4:
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        BOOL v7 = (icu::UnicodeString *)sub_18C935D08(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16));
        goto LABEL_9;
      case 6:
        BOOL v7 = (icu::UnicodeString *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8));
LABEL_9:
        *(void *)(a1 + 8) = v7;
        break;
      default:
        break;
    }
    UErrorCode v16 = U_ZERO_ERROR;
    uint64_t v8 = *(uint64_t **)(a2 + 32);
    if (v8)
    {
      uint64_t v9 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(v8, (icu::UMemory *)0x48, v4);
      if (v9) {
        uint64_t v9 = icu::number::impl::DecimalQuantity::DecimalQuantity(v9, *(void *)(a2 + 32));
      }
      *(void *)(a1 + 32) = v9;
    }
    int v10 = *(uint64_t **)(a2 + 24);
    if (v10)
    {
      int v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x40, v4);
      if (!v11)
      {
        int v14 = (void *)(a1 + 24);
LABEL_21:
        *int v14 = 0;
        return a1;
      }
      unint64_t v12 = v11;
      uint64_t v13 = *(void *)(a2 + 24);
      *int v11 = (uint64_t)v11 + 13;
      *((_DWORD *)v11 + 2) = 40;
      *((_WORD *)v11 + 6) = 0;
      *((_DWORD *)v11 + 14) = 0;
      icu::CharString::append((icu::CharString *)v11, *(const char **)v13, *(_DWORD *)(v13 + 56), &v16);
      *(void *)(a1 + 24) = v12;
      int v14 = (void *)(a1 + 24);
      if (v16 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        if (*((unsigned char *)v12 + 12)) {
          uprv_free((void *)*v12);
        }
        icu::UMemory::operator delete(v12);
        goto LABEL_21;
      }
    }
  }
  return a1;
}

uint64_t icu::Formattable::dispose(icu::Formattable *this)
{
  int v2 = *((_DWORD *)this + 10);
  if (v2 == 6)
  {
LABEL_4:
    uint64_t v3 = *((void *)this + 1);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    goto LABEL_11;
  }
  if (v2 != 4)
  {
    if (v2 != 3) {
      goto LABEL_11;
    }
    goto LABEL_4;
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    BOOL v5 = (void *)(v4 - 16);
    uint64_t v6 = *(void *)(v4 - 8);
    if (v6)
    {
      uint64_t v7 = v4 - 112;
      uint64_t v8 = 112 * v6;
      do
      {
        icu::Formattable::~Formattable((icu::Formattable *)(v7 + v8));
        v8 -= 112;
      }
      while (v8);
    }
    icu::UMemory::operator delete[](v5);
  }
LABEL_11:
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 1) = 0;
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    if (*(unsigned char *)(v9 + 12)) {
      uprv_free(*(void **)v9);
    }
    icu::UMemory::operator delete((void *)v9);
  }
  *((void *)this + 3) = 0;
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t icu::Formattable::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4 != *(_DWORD *)(a2 + 40)) {
    return 0;
  }
  switch(v4)
  {
    case 0:
    case 1:
      return *(double *)(a1 + 8) == *(double *)(a2 + 8);
    case 2:
    case 5:
      return *(void *)(a1 + 8) == *(void *)(a2 + 8);
    case 3:
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(a2 + 8);
      unsigned int v9 = *(unsigned __int16 *)(v7 + 8);
      if (v9) {
        return *(_WORD *)(v8 + 8) & 1;
      }
      if ((v9 & 0x8000) != 0) {
        int v10 = *(_DWORD *)(v7 + 12);
      }
      else {
        int v10 = v9 >> 5;
      }
      uint64_t result = 0;
      unsigned int v15 = *(unsigned __int16 *)(v8 + 8);
      if ((v15 & 0x8000u) == 0) {
        unsigned int v16 = v15 >> 5;
      }
      else {
        unsigned int v16 = *(_DWORD *)(v8 + 12);
      }
      if ((v15 & 1) == 0 && v10 == v16) {
        return icu::UnicodeString::doEquals(*(icu::UnicodeString **)(a1 + 8), (const icu::UnicodeString *)v8, v10);
      }
      return result;
    case 4:
      int v11 = *(_DWORD *)(a1 + 16);
      if (v11 != *(_DWORD *)(a2 + 16)) {
        return 0;
      }
      if (v11 < 1) {
        return 1;
      }
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      do
      {
        uint64_t result = icu::Formattable::operator==(*(void *)(a1 + 8) + v12, *(void *)(a2 + 8) + v12);
        if ((result & 1) == 0) {
          break;
        }
        ++v13;
        v12 += 112;
      }
      while (v13 < *(int *)(a1 + 16));
      return result;
    case 6:
      uint64_t result = *(void *)(a1 + 8);
      if (!result) {
        return result;
      }
      int v14 = *(void **)(a2 + 8);
      if (!v14) {
        return 0;
      }
      uint64_t result = icu::Measure::operator==((void *)result, v14);
      break;
    default:
      return 1;
  }
  return result;
}

void icu::Formattable::~Formattable(icu::Formattable *this)
{
  *(void *)this = &unk_1EDA4C760;
  int v2 = (icu::Formattable *)((char *)this + 48);
  icu::Formattable::dispose(this);
  icu::UnicodeString::~UnicodeString(v3, v2);

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::Formattable::~Formattable(this);

  icu::UMemory::operator delete(v1);
}

icu::Formattable *icu::Formattable::clone@<X0>(icu::Formattable *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Formattable *)icu::UMemory::operator new(a3, (icu::UMemory *)0x70, a2);
  if (result) {
    return (icu::Formattable *)icu::Formattable::Formattable(result, this);
  }
  return result;
}

uint64_t icu::Formattable::getType(icu::Formattable *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t icu::Formattable::isNumeric(icu::Formattable *this)
{
  unint64_t v1 = *((unsigned int *)this + 10);
  if (v1 >= 6) {
    char v2 = 0;
  }
  else {
    char v2 = 0x10000010100uLL >> (8 * v1);
  }
  return v2 & 1;
}

uint64_t icu::Formattable::getLong(icu::Formattable *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  while (1)
  {
    int v5 = *((_DWORD *)this + 10);
    if (v5 != 6) {
      break;
    }
    uint64_t result = *((void *)this + 1);
    if (!result)
    {
      UErrorCode v6 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_18;
    }
    this = (icu::Formattable *)(result + 8);
  }
  switch(v5)
  {
    case 1:
      double v7 = *((double *)this + 1);
      if (v7 > 2147483650.0)
      {
LABEL_16:
        *a2 = U_INVALID_FORMAT_ERROR;
        return 0x7FFFFFFFLL;
      }
      if (v7 >= -2147483650.0) {
        return (int)v7;
      }
LABEL_21:
      *a2 = U_INVALID_FORMAT_ERROR;
      return 0x80000000;
    case 5:
      uint64_t result = *((void *)this + 1);
      if (result >= 0x80000000) {
        goto LABEL_16;
      }
      if (result > (uint64_t)0xFFFFFFFF7FFFFFFFLL) {
        return result;
      }
      goto LABEL_21;
    case 2:
      return *((unsigned int *)this + 2);
  }
LABEL_11:
  uint64_t result = 0;
  UErrorCode v6 = U_INVALID_FORMAT_ERROR;
LABEL_18:
  *a2 = v6;
  return result;
}

uint64_t icu::Formattable::getInt64(icu::Formattable *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  while (1)
  {
    int v5 = *((_DWORD *)this + 10);
    if (v5 != 6) {
      break;
    }
    uint64_t result = *((void *)this + 1);
    if (!result)
    {
      UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_18;
    }
    this = (icu::Formattable *)(result + 8);
  }
  if (v5 != 1)
  {
    if (v5 == 5 || v5 == 2) {
      return *((void *)this + 1);
    }
LABEL_14:
    uint64_t result = 0;
    UErrorCode v7 = U_INVALID_FORMAT_ERROR;
LABEL_18:
    *a2 = v7;
    return result;
  }
  double v8 = *((double *)this + 1);
  if (v8 <= 9.22337204e18)
  {
    if (v8 >= -9.22337204e18)
    {
      if (fabs(v8) > 9.00719925e15 && (unsigned int v9 = (icu::number::impl::DecimalQuantity *)*((void *)this + 4)) != 0)
      {
        if (icu::number::impl::DecimalQuantity::fitsInLong(v9, 1))
        {
          int v10 = (icu::number::impl::DecimalQuantity *)*((void *)this + 4);
          return icu::number::impl::DecimalQuantity::toLong(v10, 0);
        }
        else
        {
          *a2 = U_INVALID_FORMAT_ERROR;
          if (icu::number::impl::DecimalQuantity::isNegative(*((icu::number::impl::DecimalQuantity **)this
                                                                            + 4)))
            return 0x8000000000000000;
          else {
            return 0x7FFFFFFFFFFFFFFFLL;
          }
        }
      }
      else
      {
        return (uint64_t)v8;
      }
    }
    else
    {
      *a2 = U_INVALID_FORMAT_ERROR;
      return 0x8000000000000000;
    }
  }
  else
  {
    *a2 = U_INVALID_FORMAT_ERROR;
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

double icu::Formattable::getDouble(icu::Formattable *this, UErrorCode *a2)
{
  double v2 = 0.0;
  if (*(int *)a2 <= 0)
  {
    while (1)
    {
      int v5 = *((_DWORD *)this + 10);
      if (v5 != 6) {
        break;
      }
      uint64_t v6 = *((void *)this + 1);
      if (!v6)
      {
        UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_15;
      }
      this = (icu::Formattable *)(v6 + 8);
    }
    if (v5 != 1)
    {
      if (v5 == 5 || v5 == 2) {
        return (double)*((uint64_t *)this + 1);
      }
LABEL_13:
      UErrorCode v8 = U_INVALID_FORMAT_ERROR;
LABEL_15:
      *a2 = v8;
      return v2;
    }
    return *((double *)this + 1);
  }
  return v2;
}

uint64_t icu::Formattable::getObject(icu::Formattable *this)
{
  if (*((_DWORD *)this + 10) == 6) {
    return *((void *)this + 1);
  }
  else {
    return 0;
  }
}

uint64_t icu::Formattable::setDouble(icu::Formattable *this, double a2)
{
  uint64_t result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 1;
  *((double *)this + 1) = a2;
  return result;
}

uint64_t icu::Formattable::setLong(icu::Formattable *this, int a2)
{
  uint64_t result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 2;
  *((void *)this + 1) = a2;
  return result;
}

uint64_t icu::Formattable::setInt64(icu::Formattable *this, uint64_t a2)
{
  uint64_t result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 5;
  *((void *)this + 1) = a2;
  return result;
}

uint64_t icu::Formattable::setDate(icu::Formattable *this, double a2)
{
  uint64_t result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 0;
  *((double *)this + 1) = a2;
  return result;
}

icu::UnicodeString *icu::Formattable::setString(icu::Formattable *this, UChar **a2)
{
  icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 3;
  uint64_t result = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)3, (icu::UMemory *)0x40, v4);
  if (result) {
    uint64_t result = icu::UnicodeString::UnicodeString(result, a2);
  }
  *((void *)this + 1) = result;
  return result;
}

void *icu::Formattable::setArray(icu::Formattable *this, const icu::Formattable *a2, unint64_t a3)
{
  icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 4;
  uint64_t result = sub_18C935D08((uint64_t)a2, a3);
  *((void *)this + 1) = result;
  *((_DWORD *)this + 4) = a3;
  return result;
}

uint64_t icu::Formattable::adoptString(icu::Formattable *this, icu::UnicodeString *a2)
{
  uint64_t result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 3;
  *((void *)this + 1) = a2;
  return result;
}

uint64_t icu::Formattable::adoptArray(icu::Formattable *this, icu::Formattable *a2, int a3)
{
  uint64_t result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 4;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  return result;
}

uint64_t icu::Formattable::adoptObject(icu::Formattable *this, icu::UObject *a2)
{
  uint64_t result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 6;
  *((void *)this + 1) = a2;
  return result;
}

UChar **icu::Formattable::getString(icu::Formattable *this, UChar **a2, UErrorCode *a3)
{
  if (*((_DWORD *)this + 10) == 3)
  {
    unint64_t v4 = (UChar **)*((void *)this + 1);
    if (v4)
    {
      icu::UnicodeString::operator=(a2, v4);
    }
    else if (*(int *)a3 <= 0)
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    if (*(int *)a3 <= 0) {
      *a3 = U_INVALID_FORMAT_ERROR;
    }
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a2);
  }
  return a2;
}

uint64_t icu::Formattable::getString(icu::Formattable *this, UErrorCode *a2)
{
  if (*((_DWORD *)this + 10) != 3)
  {
    if (*(int *)a2 <= 0)
    {
      UErrorCode v3 = U_INVALID_FORMAT_ERROR;
      goto LABEL_7;
    }
    return (uint64_t)this + 48;
  }
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    if (*(int *)a2 <= 0)
    {
      UErrorCode v3 = U_MEMORY_ALLOCATION_ERROR;
LABEL_7:
      *a2 = v3;
      return (uint64_t)this + 48;
    }
    return (uint64_t)this + 48;
  }
  return v2;
}

{
  uint64_t v2;
  UErrorCode v3;

  if (*((_DWORD *)this + 10) != 3)
  {
    if (*(int *)a2 <= 0)
    {
      UErrorCode v3 = U_INVALID_FORMAT_ERROR;
      goto LABEL_7;
    }
    return (uint64_t)this + 48;
  }
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    if (*(int *)a2 <= 0)
    {
      UErrorCode v3 = U_MEMORY_ALLOCATION_ERROR;
LABEL_7:
      *a2 = v3;
      return (uint64_t)this + 48;
    }
    return (uint64_t)this + 48;
  }
  return v2;
}

uint64_t icu::Formattable::getBogus(icu::Formattable *this)
{
  return (uint64_t)this + 48;
}

uint64_t icu::Formattable::getArray(icu::Formattable *this, int *a2, UErrorCode *a3)
{
  if (*((_DWORD *)this + 10) == 4)
  {
    *a2 = *((_DWORD *)this + 4);
    return *((void *)this + 1);
  }
  else
  {
    if (*(int *)a3 <= 0) {
      *a3 = U_INVALID_FORMAT_ERROR;
    }
    uint64_t result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t icu::Formattable::getDecimalNumber(icu::Formattable *this, UErrorCode *a2)
{
  if (*(int *)a2 < 1)
  {
    uint64_t v2 = *((void *)this + 3);
    if (v2)
    {
      uint64_t v3 = *(void *)v2;
      uint64_t v4 = *(unsigned int *)(v2 + 56);
      uint64_t v8 = v3;
      uint64_t v9 = v4;
      return v8;
    }
    CharString = icu::Formattable::internalGetCharString(this, a2);
    if (CharString)
    {
      uint64_t v6 = *((unsigned int *)CharString + 14);
      uint64_t v8 = *CharString;
      uint64_t v9 = v6;
      return v8;
    }
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)&v8, "");
  return v8;
}

uint64_t *icu::Formattable::internalGetCharString(icu::Formattable *this, UErrorCode *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 3)) {
    return (uint64_t *)*((void *)this + 3);
  }
  int v5 = (uint64_t *)*((void *)this + 4);
  if (!v5)
  {
    uint64_t v9 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(0, (icu::UMemory *)0x48, (unint64_t)a2);
    if (v9)
    {
      int v10 = v9;
      icu::number::impl::DecimalQuantity::DecimalQuantity(v9);
      if (*(int *)a2 <= 0)
      {
        icu::Formattable::populateDecimalQuantity(this, v10, a2);
        int v5 = (uint64_t *)*(unsigned int *)a2;
        if ((int)v5 < 1)
        {
          *((void *)this + 4) = v10;
          goto LABEL_5;
        }
      }
      (*(void (**)(icu::number::impl::DecimalQuantity *))(*(void *)v10 + 8))(v10);
    }
    else if (*(int *)a2 <= 0)
    {
      uint64_t result = 0;
      goto LABEL_13;
    }
    return 0;
  }
LABEL_5:
  uint64_t result = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, (unint64_t)a2);
  if (!result)
  {
    *((void *)this + 3) = 0;
LABEL_13:
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }
  *uint64_t result = (uint64_t)result + 13;
  *((_DWORD *)result + 2) = 40;
  *((_WORD *)result + 6) = 0;
  *((_DWORD *)result + 14) = 0;
  *((void *)this + 3) = result;
  if ((*(unsigned int (**)(void))(**((void **)this + 4) + 32))(*((void *)this + 4)))
  {
    uint64_t v6 = (icu::CharString *)*((void *)this + 3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "Infinity");
    UErrorCode v7 = (const char *)v19;
    int v8 = v20;
  }
  else
  {
    if (!(*(unsigned int (**)(void))(**((void **)this + 4) + 24))(*((void *)this + 4)))
    {
      if (!icu::number::impl::DecimalQuantity::isZeroish(*((icu::number::impl::DecimalQuantity **)this + 4)))
      {
        int v12 = *((_DWORD *)this + 10);
        if (v12 == 2
          || v12 == 5
          || icu::number::impl::DecimalQuantity::getMagnitude(*((icu::number::impl::DecimalQuantity **)this
                                                                            + 4)) != 0x80000000
          && ((int Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(*((icu::number::impl::DecimalQuantity **)this
                                                                            + 4)),
               Magnitude >= 0)
            ? (unsigned int v14 = Magnitude)
            : (unsigned int v14 = -Magnitude),
              v14 <= 4))
        {
          unsigned int v15 = (icu::CharString *)*((void *)this + 3);
          icu::number::impl::DecimalQuantity::toPlainString(*((icu::number::impl::DecimalQuantity **)this + 4), (uint64_t)v21);
        }
        else
        {
          unsigned int v15 = (icu::CharString *)*((void *)this + 3);
          icu::number::impl::DecimalQuantity::toScientificString(*((icu::number::impl::DecimalQuantity **)this + 4), (uint64_t)v21);
        }
        icu::CharString::appendInvariantChars(v15, (const icu::UnicodeString *)v21, a2);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v21);
        return (uint64_t *)*((void *)this + 3);
      }
      int v11 = (icu::CharString *)*((void *)this + 3);
      UErrorCode v7 = "0";
      int v8 = -1;
      goto LABEL_17;
    }
    uint64_t v6 = (icu::CharString *)*((void *)this + 3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "NaN");
    UErrorCode v7 = v17;
    int v8 = v18;
  }
  int v11 = v6;
LABEL_17:
  icu::CharString::append(v11, v7, v8, a2);
  return (uint64_t *)*((void *)this + 3);
}

void icu::Formattable::populateDecimalQuantity(icu::Formattable *this, icu::number::impl::DecimalQuantity *a2, UErrorCode *a3)
{
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    icu::number::impl::DecimalQuantity::operator=(a2, v4);
  }
  else
  {
    int v5 = *((_DWORD *)this + 10);
    switch(v5)
    {
      case 5:
        unint64_t v6 = *((void *)this + 1);
        icu::number::impl::DecimalQuantity::setToLong((void **)a2, v6);
        break;
      case 2:
        int v7 = *((_DWORD *)this + 2);
        icu::number::impl::DecimalQuantity::setToInt((void **)a2, v7);
        break;
      case 1:
        icu::number::impl::DecimalQuantity::setToDouble((void **)a2, *((double *)this + 1));
        icu::number::impl::DecimalQuantity::roundToInfinity(a2);
        break;
      default:
        *a3 = U_INVALID_STATE_ERROR;
        break;
    }
  }
}

void icu::Formattable::adoptDecimalQuantity(icu::Formattable *this, icu::number::impl::DecimalQuantity *a2)
{
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 4) = a2;
  if (a2)
  {
    if (icu::number::impl::DecimalQuantity::fitsInLong(a2, 0))
    {
      uint64_t v5 = icu::number::impl::DecimalQuantity::toLong(*((icu::number::impl::DecimalQuantity **)this + 4), 0);
      *((void *)this + 1) = v5;
      if (v5 == (int)v5) {
        int v6 = 2;
      }
      else {
        int v6 = 5;
      }
      *((_DWORD *)this + 10) = v6;
    }
    else
    {
      *((_DWORD *)this + 10) = 1;
      *((double *)this + 1) = icu::number::impl::DecimalQuantity::toDouble(*((icu::number::impl::DecimalQuantity **)this
                                                                           + 4));
    }
  }
}

uint64_t *ufmt_open(_DWORD *a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)*a1;
  if ((int)v2 > 0) {
    return 0;
  }
  uint64_t v5 = icu::UMemory::operator new(v2, (icu::UMemory *)0x70, a2);
  uint64_t v3 = v5;
  if (v5)
  {
    uint64_t *v5 = (uint64_t)&unk_1EDA4C760;
    v5[1] = 0;
    v5[6] = (uint64_t)&unk_1EDA47700;
    *((_WORD *)v5 + 28) = 2;
    *((_DWORD *)v5 + 10) = 2;
    v5[3] = 0;
    v5[4] = 0;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(v5 + 6));
  }
  else
  {
    *a1 = 7;
  }
  return v3;
}

uint64_t ufmt_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ufmt_getType(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return *(unsigned int *)(a1 + 40);
  }
  else {
    return 7;
  }
}

uint64_t ufmt_isNumeric(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 40);
  if (v1 >= 6) {
    char v2 = 0;
  }
  else {
    char v2 = 0x10000010100uLL >> (8 * v1);
  }
  return v2 & 1;
}

uint64_t ufmt_getDate(uint64_t result, int *a2)
{
  if (*(_DWORD *)(result + 40))
  {
    if (*a2 <= 0) {
      *a2 = 3;
    }
  }
  return result;
}

uint64_t ufmt_getObject(uint64_t a1, int *a2)
{
  if (*(_DWORD *)(a1 + 40) == 6) {
    return *(void *)(a1 + 8);
  }
  uint64_t result = 0;
  if (*a2 <= 0) {
    *a2 = 3;
  }
  return result;
}

uint64_t ufmt_getUChars(uint64_t a1, int *a2, int *a3)
{
  if (*(_DWORD *)(a1 + 40) == 3)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    int v5 = *a3;
    if (v4)
    {
      if (a2 && v5 <= 0)
      {
        if (*(__int16 *)(v4 + 8) < 0) {
          int v6 = *(_DWORD *)(v4 + 12);
        }
        else {
          int v6 = *(unsigned __int16 *)(v4 + 8) >> 5;
        }
        *a2 = v6;
      }
    }
    else
    {
      if (v5 <= 0) {
        *a3 = 7;
      }
      uint64_t v4 = a1 + 48;
    }
    return icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v4);
  }
  else
  {
    if (*a3 <= 0) {
      *a3 = 3;
    }
    return 0;
  }
}

uint64_t ufmt_getArrayLength(uint64_t a1, int *a2)
{
  if (*(_DWORD *)(a1 + 40) == 4) {
    return *(unsigned int *)(a1 + 16);
  }
  uint64_t result = 0;
  if (*a2 <= 0) {
    *a2 = 3;
  }
  return result;
}

uint64_t ufmt_getArrayItemByIndex(uint64_t a1, unsigned int a2, int *a3)
{
  int v3 = *a3;
  if (*(_DWORD *)(a1 + 40) == 4)
  {
    if (v3 <= 0)
    {
      if ((a2 & 0x80000000) == 0 && *(_DWORD *)(a1 + 16) > (signed int)a2) {
        return *(void *)(a1 + 8) + 112 * a2;
      }
      uint64_t result = 0;
      int v5 = 8;
      goto LABEL_10;
    }
    return 0;
  }
  if (v3 > 0) {
    return 0;
  }
  uint64_t result = 0;
  int v5 = 3;
LABEL_10:
  *a3 = v5;
  return result;
}

const char *ufmt_getDecNumChars(icu::Formattable *a1, _DWORD *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return "";
  }
  CharString = icu::Formattable::internalGetCharString(a1, a3);
  if (*(int *)a3 > 0) {
    return "";
  }
  if (!CharString)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return "";
  }
  if (a2) {
    *a2 = *((_DWORD *)CharString + 14);
  }
  return (const char *)*CharString;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, const char *a2)
{
  *(void *)this = &unk_1EDA4C760;
  *((void *)this + 6) = &unk_1EDA47700;
  *((_WORD *)this + 28) = 2;
  icu::Formattable::init(this);
  *((_DWORD *)this + 10) = 3;
  int v5 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)3, (icu::UMemory *)0x40, v4);
  if (v5) {
    int v5 = (icu::UnicodeString *)icu::UnicodeString::UnicodeString(v5, a2);
  }
  *((void *)this + 1) = v5;
  return this;
}

void *icu::FieldPosition::getStaticClassID(icu::FieldPosition *this)
{
  return &unk_1E9192251;
}

void *icu::FieldPosition::getDynamicClassID(icu::FieldPosition *this)
{
  return &unk_1E9192251;
}

void icu::FieldPosition::~FieldPosition(icu::FieldPosition *this)
{
  icu::UObject::~UObject(this);

  icu::UMemory::operator delete(v1);
}

double icu::FieldPosition::clone(icu::FieldPosition *this, unint64_t a2)
{
  uint64_t v3 = icu::UMemory::operator new((icu::UMemory *)0x18, a2);
  if (v3)
  {
    *(void *)uint64_t v3 = &unk_1EDA4C7F0;
    double result = *((double *)this + 1);
    *(double *)(v3 + 8) = result;
    *(_DWORD *)(v3 + 16) = *((_DWORD *)this + 4);
  }
  return result;
}

uint64_t icu::Format::Format(uint64_t this)
{
  *(void *)this = &unk_1EDA4C7A0;
  *(unsigned char *)(this + 8) = 0;
  *(unsigned char *)(this + 165) = 0;
  return this;
}

uint64_t icu::Format::Format(uint64_t this, uint64_t a2)
{
  *(void *)this = &unk_1EDA4C7A0;
  return icu::Format::operator=(this, a2);
}

uint64_t icu::Format::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    strcpy((char *)(a1 + 165), (const char *)(a2 + 165));
    strcpy((char *)(a1 + 8), (const char *)(a2 + 8));
  }
  return a1;
}

icu::UnicodeString *icu::Format::format(icu::Format *this, const icu::Formattable *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  unint64_t v4 = a3;
  if (*(int *)a4 <= 0)
  {
    v6[2] = 0;
    v6[0] = &unk_1EDA4C7F0;
    v6[1] = 0xFFFFFFFFLL;
    unint64_t v4 = (icu::UnicodeString *)(*(uint64_t (**)(icu::Format *, const icu::Formattable *, icu::UnicodeString *, void *, UErrorCode *))(*(void *)this + 40))(this, a2, a3, v6, a4);
    icu::UObject::~UObject((icu::UObject *)v6);
  }
  return v4;
}

uint64_t icu::Format::format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result = a3;
  if (*a5 <= 0) {
    *a5 = 16;
  }
  return result;
}

void icu::Format::parseObject(icu::Format *this, const icu::UnicodeString *a2, icu::Formattable *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    int v5 = &unk_1EDA44670;
    unint64_t v6 = 0xFFFFFFFF00000000;
    (*(void (**)(icu::Format *, const icu::UnicodeString *, icu::Formattable *, void **))(*(void *)this + 56))(this, a2, a3, &v5);
    if (!v6) {
      *a4 = U_INVALID_FORMAT_ERROR;
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v5);
  }
}

BOOL icu::Format::operator==(void *a1, void *a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v2 = *(void *)(*a1 - 8);
  uint64_t v3 = *(void *)(*a2 - 8);

  return sub_18C828FD8(v2, v3);
}

char *icu::Format::syntaxError(icu::Format *this, const icu::UnicodeString *a2, _DWORD *a3, UParseError *a4)
{
  int v5 = (int)a2;
  *a3 = 0;
  a3[1] = a2;
  if ((int)a2 >= 16) {
    int v7 = a2 - 15;
  }
  else {
    int v7 = 0;
  }
  int v8 = v5 - v7;
  uint64_t v9 = a3 + 2;
  icu::UnicodeString::doExtract((char *)this, v7, v5 - v7, (uint64_t)(a3 + 2), 0);
  *((_WORD *)v9 + v8) = 0;
  int v10 = v5 + 16;
  if (*((__int16 *)this + 4) < 0)
  {
    signed int v12 = *((_DWORD *)this + 3);
    if (v10 > v12) {
      goto LABEL_9;
    }
LABEL_8:
    signed int v12 = v5 + 15;
    goto LABEL_9;
  }
  unsigned int v11 = *((unsigned __int16 *)this + 4);
  if (v10 <= (int)(v11 >> 5)) {
    goto LABEL_8;
  }
  signed int v12 = v11 >> 5;
LABEL_9:
  int v13 = v5 + 1;
  int v14 = v12 - (v5 + 1);
  uint64_t v15 = (uint64_t)(a3 + 10);
  uint64_t result = icu::UnicodeString::doExtract((char *)this, v13, v12 - v13, v15, 0);
  *(_WORD *)(v15 + 2 * v14) = 0;
  return result;
}

uint64_t icu::Format::getLocale@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  v5[0] = (const char *)(a1 + 165);
  v5[1] = (const char *)(a1 + 8);
  return icu::LocaleBased::getLocale(v5, a2, a3, a4);
}

uint64_t icu::Format::getLocaleID(uint64_t a1, int a2, int *a3)
{
  v4[0] = a1 + 165;
  v4[1] = a1 + 8;
  return icu::LocaleBased::getLocaleID(v4, a2, a3);
}

char *icu::Format::setLocaleIDs(icu::Format *this, const char *a2, const char *a3)
{
  v4[0] = (char *)this + 165;
  v4[1] = (char *)this + 8;
  return icu::LocaleBased::setLocaleIDs((char *)v4, a2, a3);
}

double icu::FormattedStringBuilder::FormattedStringBuilder(icu::FormattedStringBuilder *this)
{
  *(unsigned char *)this = 0;
  *(void *)&double result = 20;
  *((void *)this + 16) = 20;
  return result;
}

{
  double result;

  *(unsigned char *)this = 0;
  *(void *)&double result = 20;
  *((void *)this + 16) = 20;
  return result;
}

void icu::FormattedStringBuilder::~FormattedStringBuilder(void **this)
{
  if (*(unsigned char *)this)
  {
    uprv_free(this[1]);
    uprv_free(this[11]);
  }
}

uint64_t icu::FormattedStringBuilder::FormattedStringBuilder(uint64_t this, uint64_t a2)
{
  *(unsigned char *)this = 0;
  *(void *)(this + 128) = 20;
  return icu::FormattedStringBuilder::operator=(this, a2);
}

{
  *(unsigned char *)this = 0;
  *(void *)(this + 128) = 20;
  return icu::FormattedStringBuilder::operator=(this, a2);
}

uint64_t icu::FormattedStringBuilder::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 != a2)
  {
    if (*(unsigned char *)a1)
    {
      uprv_free(*(void **)(a1 + 8));
      uprv_free(*(void **)(a1 + 88));
      *(unsigned char *)a1 = 0;
    }
    if (!*(unsigned char *)a2)
    {
      int v5 = (void *)(a1 + 8);
      size_t v4 = 40;
      goto LABEL_16;
    }
    size_t v4 = *(unsigned int *)(a2 + 16);
    if ((int)v4 < 41)
    {
      if (!v4)
      {
LABEL_25:
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        return a1;
      }
      size_t v4 = (int)v4;
      int v5 = (void *)(a1 + 8);
LABEL_16:
      if (*(unsigned char *)a2) {
        uint64_t v9 = *(const void **)(a2 + 8);
      }
      else {
        uint64_t v9 = (const void *)(a2 + 8);
      }
      memcpy(v5, v9, 2 * v4);
      int v10 = (void *)(a1 + 88);
      if (*(unsigned char *)a1) {
        int v10 = (void *)*v10;
      }
      if (*(unsigned char *)a2) {
        unsigned int v11 = *(const void **)(a2 + 88);
      }
      else {
        unsigned int v11 = (const void *)(a2 + 88);
      }
      memcpy(v10, v11, v4);
      goto LABEL_25;
    }
    int v5 = uprv_malloc(2 * v4);
    unint64_t v6 = uprv_malloc(v4);
    int v7 = v6;
    if (v5) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      *(unsigned char *)a1 = 1;
      *(_DWORD *)(a1 + 16) = v4;
      *(void *)(a1 + 8) = v5;
      *(_DWORD *)(a1 + 96) = v4;
      *(void *)(a1 + 88) = v6;
      goto LABEL_16;
    }
    uprv_free(v5);
    uprv_free(v7);
    v13[0] = 0;
    uint64_t v16 = 20;
    icu::FormattedStringBuilder::operator=(a1, v13);
    if (v13[0])
    {
      uprv_free(v14);
      uprv_free(v15);
    }
  }
  return a1;
}

uint64_t icu::FormattedStringBuilder::length(icu::FormattedStringBuilder *this)
{
  return *((unsigned int *)this + 33);
}

uint64_t icu::FormattedStringBuilder::codePointCount(icu::FormattedStringBuilder *this)
{
  unint64_t v1 = (const UChar *)((char *)this + 8);
  if (*(unsigned char *)this) {
    unint64_t v1 = *(const UChar **)v1;
  }
  return u_countChar32(&v1[*((int *)this + 32)], *((_DWORD *)this + 33));
}

uint64_t icu::FormattedStringBuilder::getFirstCodePoint(icu::FormattedStringBuilder *this)
{
  int v1 = *((_DWORD *)this + 33);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = (char *)this + 8;
  if (*(unsigned char *)this) {
    uint64_t v2 = (char *)*((void *)this + 1);
  }
  uint64_t v3 = *((int *)this + 32);
  uint64_t result = *(unsigned __int16 *)&v2[2 * v3];
  if (v1 != 1 && (result & 0xFC00) == 55296)
  {
    int v6 = *(unsigned __int16 *)&v2[2 * v3 + 2];
    if ((v6 & 0xFC00) == 0xDC00) {
      return (v6 + (result << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::FormattedStringBuilder::getLastCodePoint(icu::FormattedStringBuilder *this)
{
  int v1 = *((_DWORD *)this + 33);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = (char *)this + 8;
  int v3 = *(unsigned __int8 *)this;
  size_t v4 = (char *)this + 8;
  if (*(unsigned char *)this) {
    size_t v4 = *(char **)v2;
  }
  uint64_t v5 = *((int *)this + 32);
  int v6 = &v4[2 * v5];
  int v7 = v1 - 1;
  if (v1 >= 2 && (*(_WORD *)&v6[2 * v1 - 2] & 0xFC00) == 56320)
  {
    uint64_t v9 = (char *)this + 8;
    if (*(unsigned char *)this) {
      uint64_t v9 = *(char **)v2;
    }
    if ((*(_WORD *)&v9[2 * v5 + 2 * (v1 - 2)] & 0xFC00) == 0xD800) {
      int v7 = v1 - 2;
    }
  }
  int v10 = (char *)this + 8;
  if (*(unsigned char *)this) {
    int v10 = *(char **)v2;
  }
  uint64_t result = *(unsigned __int16 *)&v10[2 * v5 + 2 * v7];
  if ((result & 0xF800) == 0xD800)
  {
    if ((result & 0x400) != 0)
    {
      if (v7 >= 1)
      {
        if (v3) {
          uint64_t v2 = *(char **)v2;
        }
        int v15 = *(unsigned __int16 *)&v2[2 * v5 + 2 * (v7 - 1)];
        if ((v15 & 0xFC00) == 0xD800)
        {
          int v14 = result + (v15 << 10);
          return (v14 - 56613888);
        }
      }
    }
    else
    {
      uint64_t v12 = v7 + 1;
      if (v12 != v1)
      {
        if (v3) {
          uint64_t v2 = *(char **)v2;
        }
        int v13 = *(unsigned __int16 *)&v2[2 * v5 + 2 * v12];
        if ((v13 & 0xFC00) == 0xDC00)
        {
          int v14 = v13 + (result << 10);
          return (v14 - 56613888);
        }
      }
    }
  }
  return result;
}

uint64_t icu::FormattedStringBuilder::codePointAt(icu::FormattedStringBuilder *this, int a2)
{
  int v3 = (char *)this + 8;
  int v4 = *(unsigned __int8 *)this;
  uint64_t v5 = (char *)this + 8;
  if (*(unsigned char *)this) {
    uint64_t v5 = *(char **)v3;
  }
  uint64_t v6 = *((int *)this + 32);
  uint64_t result = *(unsigned __int16 *)&v5[2 * v6 + 2 * a2];
  if ((result & 0xF800) == 0xD800)
  {
    if ((result & 0x400) != 0)
    {
      if (a2 < 1) {
        return result;
      }
      if (v4) {
        int v3 = *(char **)v3;
      }
      int v12 = *(unsigned __int16 *)&v3[2 * v6 + 2 * (a2 - 1)];
      BOOL v10 = (v12 & 0xFC00) == 55296;
      int v11 = result + (v12 << 10);
    }
    else
    {
      uint64_t v8 = a2 + 1;
      if (v8 == *((_DWORD *)this + 33)) {
        return result;
      }
      if (v4) {
        int v3 = *(char **)v3;
      }
      int v9 = *(unsigned __int16 *)&v3[2 * v6 + 2 * v8];
      BOOL v10 = (v9 & 0xFC00) == 56320;
      int v11 = v9 + (result << 10);
    }
    unsigned int v13 = v11 - 56613888;
    if (v10) {
      return v13;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t icu::FormattedStringBuilder::codePointBefore(icu::FormattedStringBuilder *this, int a2)
{
  uint64_t v2 = (char *)this + 8;
  int v3 = (char *)this + 8;
  if (*(unsigned char *)this) {
    int v3 = *(char **)v2;
  }
  uint64_t v4 = *((int *)this + 32);
  int v5 = a2 - 1;
  if (a2 >= 2 && (*(_WORD *)&v3[2 * v4 + 2 * v5] & 0xFC00) == 0xDC00)
  {
    uint64_t v6 = (char *)this + 8;
    if (*(unsigned char *)this) {
      uint64_t v6 = *(char **)v2;
    }
    if ((*(_WORD *)&v6[2 * v4 + 2 * (a2 - 2)] & 0xFC00) == 0xD800) {
      int v5 = a2 - 2;
    }
  }
  int v7 = (char *)this + 8;
  if (*(unsigned char *)this) {
    int v7 = *(char **)v2;
  }
  uint64_t v8 = *(unsigned __int16 *)&v7[2 * v4 + 2 * v5];
  if ((v8 & 0xF800) == 0xD800)
  {
    if ((v8 & 0x400) != 0)
    {
      BOOL v13 = __OFSUB__(v5, 1);
      int v14 = v5 - 1;
      if (v14 < 0 != v13) {
        return v8;
      }
      if (*(unsigned char *)this) {
        uint64_t v2 = *(char **)v2;
      }
      int v15 = *(unsigned __int16 *)&v2[2 * v4 + 2 * v14];
      BOOL v11 = (v15 & 0xFC00) == 55296;
      int v12 = v8 + (v15 << 10);
    }
    else
    {
      uint64_t v9 = v5 + 1;
      if (v9 == *((_DWORD *)this + 33)) {
        return v8;
      }
      if (*(unsigned char *)this) {
        uint64_t v2 = *(char **)v2;
      }
      int v10 = *(unsigned __int16 *)&v2[2 * v4 + 2 * v9];
      BOOL v11 = (v10 & 0xFC00) == 56320;
      int v12 = v10 + (v8 << 10);
    }
    unsigned int v16 = v12 - 56613888;
    if (v11) {
      return v16;
    }
    else {
      return v8;
    }
  }
  return v8;
}

uint64_t icu::FormattedStringBuilder::clear(uint64_t this)
{
  if (*(unsigned char *)this) {
    int v1 = *(_DWORD *)(this + 16) / 2;
  }
  else {
    int v1 = 20;
  }
  *(_DWORD *)(this + 128) = v1;
  *(_DWORD *)(this + 132) = 0;
  return this;
}

uint64_t icu::FormattedStringBuilder::insertCodePoint(void *a1, int a2, unsigned int a3, char a4, UErrorCode *a5)
{
  if (a3 < 0x10000) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 2;
  }
  int v10 = icu::FormattedStringBuilder::prepareForInsert((icu::FormattedStringBuilder *)a1, a2, v9, a5);
  if (*(int *)a5 <= 0)
  {
    if (HIWORD(a3))
    {
      int v13 = (a3 >> 10) - 10304;
      int v14 = a1 + 1;
      uint64_t v11 = v10;
      if (*(unsigned char *)a1)
      {
        *(_WORD *)(a1[1] + 2 * v10) = v13;
        uint64_t v15 = v10 + 1;
        *(_WORD *)(a1[1] + 2 * v15) = a3 & 0x3FF | 0xDC00;
        int v12 = a1 + 11;
        unsigned int v16 = (void *)a1[11];
      }
      else
      {
        *((_WORD *)v14 + v10) = v13;
        uint64_t v15 = v10 + 1;
        *((_WORD *)v14 + v15) = a3 & 0x3FF | 0xDC00;
        int v12 = a1 + 11;
        unsigned int v16 = a1 + 11;
      }
      *((unsigned char *)v16 + v15) = a4;
      if (*(unsigned char *)a1) {
        int v12 = (void *)*v12;
      }
    }
    else
    {
      uint64_t v11 = v10;
      if (*(unsigned char *)a1)
      {
        *(_WORD *)(a1[1] + 2 * v10) = a3;
        int v12 = (void *)a1[11];
      }
      else
      {
        *((_WORD *)a1 + v10 + 4) = a3;
        int v12 = a1 + 11;
      }
    }
    *((unsigned char *)v12 + v11) = a4;
  }
  return v9;
}

uint64_t icu::FormattedStringBuilder::prepareForInsert(icu::FormattedStringBuilder *this, int a2, uint64_t a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return a3;
  }
  if (a2 || (uint64_t v4 = (*((_DWORD *)this + 32) - a3), (int)v4 < 0))
  {
    if (*((_DWORD *)this + 33) != a2) {
      return icu::FormattedStringBuilder::prepareForInsertHelper(this, a2, a3, a4);
    }
    int v5 = *(unsigned char *)this ? *((_DWORD *)this + 4) : 40;
    uint64_t v4 = (*((_DWORD *)this + 32) + a2);
    if (v5 - (int)v4 < (int)a3) {
      return icu::FormattedStringBuilder::prepareForInsertHelper(this, a2, a3, a4);
    }
    int v6 = a2 + a3;
  }
  else
  {
    int v6 = *((_DWORD *)this + 33) + a3;
    *((_DWORD *)this + 32) = v4;
  }
  *((_DWORD *)this + 33) = v6;
  return v4;
}

uint64_t icu::FormattedStringBuilder::insert(icu::FormattedStringBuilder *a1, int a2, uint64_t a3, char a4, int a5, UErrorCode *a6)
{
  unsigned int v7 = *(unsigned __int16 *)(a3 + 8);
  if (*(__int16 *)(a3 + 8) < 0)
  {
    int v8 = *(_DWORD *)(a3 + 12);
    if (v8)
    {
      if (v8 != 1 || (a5 & 1) != 0) {
        return icu::FormattedStringBuilder::insert(a1, a2, a3, 0, v8, a4, a5, a6);
      }
      goto LABEL_9;
    }
    return 0;
  }
  if (v7 < 0x20) {
    return 0;
  }
  if (v7 & 0xFFE0) != 0x20 || (a5)
  {
    int v8 = v7 >> 5;
    return icu::FormattedStringBuilder::insert(a1, a2, a3, 0, v8, a4, a5, a6);
  }
LABEL_9:
  if ((v7 & 2) != 0) {
    uint64_t v9 = (unsigned __int16 *)(a3 + 10);
  }
  else {
    uint64_t v9 = *(unsigned __int16 **)(a3 + 24);
  }
  return icu::FormattedStringBuilder::insertCodePoint(a1, a2, *v9, a4, a6);
}

uint64_t icu::FormattedStringBuilder::insert(icu::FormattedStringBuilder *a1, int a2, uint64_t a3, unsigned int a4, int a5, char a6, int a7, UErrorCode *a8)
{
  unsigned int v11 = a4;
  uint64_t v14 = a5 - a4;
  if (a7) {
    int v15 = 2;
  }
  else {
    int v15 = 0;
  }
  uint64_t v16 = (v15 + v14);
  int v17 = icu::FormattedStringBuilder::prepareForInsert(a1, a2, v16, a8);
  if (*(int *)a8 <= 0)
  {
    if (a7)
    {
      if (*(unsigned char *)a1)
      {
        *(_WORD *)(*((void *)a1 + 1) + 2 * v17) = 8296;
        int v18 = (void *)*((void *)a1 + 11);
      }
      else
      {
        *((_WORD *)a1 + v17 + 4) = 8296;
        int v18 = (void *)((char *)a1 + 88);
      }
      *((unsigned char *)v18 + v17++) = a6;
    }
    if ((int)v14 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 2 * (int)v11;
      uint64_t v21 = v14;
      uint64_t v22 = v17;
      do
      {
        unsigned int v23 = *(unsigned __int16 *)(a3 + 8);
        if ((v23 & 0x8000u) == 0) {
          unsigned int v24 = v23 >> 5;
        }
        else {
          unsigned int v24 = *(_DWORD *)(a3 + 12);
        }
        if (v24 <= v11)
        {
          __int16 v26 = -1;
        }
        else
        {
          if ((v23 & 2) != 0) {
            uint64_t v25 = a3 + 10;
          }
          else {
            uint64_t v25 = *(void *)(a3 + 24);
          }
          __int16 v26 = *(_WORD *)(v25 + v20);
        }
        if (*(unsigned char *)a1)
        {
          *(_WORD *)(*((void *)a1 + 1) + 2 * v22) = v26;
          unsigned int v27 = (void *)*((void *)a1 + 11);
          uint64_t v28 = v22;
        }
        else
        {
          uint64_t v28 = v19 + v17;
          *((_WORD *)a1 + v22 + 4) = v26;
          unsigned int v27 = (void *)((char *)a1 + 88);
        }
        *((unsigned char *)v27 + v28) = a6;
        ++v19;
        ++v22;
        v20 += 2;
        ++v11;
        --v21;
      }
      while (v21);
    }
    if (a7)
    {
      uint64_t v29 = v17 + (uint64_t)(int)v14;
      if (*(unsigned char *)a1)
      {
        *(_WORD *)(*((void *)a1 + 1) + 2 * v29) = 8297;
        int v30 = (void *)*((void *)a1 + 11);
      }
      else
      {
        *((_WORD *)a1 + v29 + 4) = 8297;
        int v30 = (void *)((char *)a1 + 88);
      }
      *((unsigned char *)v30 + v29) = a6;
    }
  }
  return v16;
}

uint64_t icu::FormattedStringBuilder::splice(icu::FormattedStringBuilder *this, int a2, int a3, uint64_t a4, unsigned int a5, int a6, char a7, UErrorCode *a8)
{
  uint64_t v8 = a6 - a5;
  uint64_t v9 = (v8 + a2 - a3);
  if (*(int *)a8 <= 0)
  {
    unsigned int v12 = a5;
    int v15 = (int)v9 < 1
        ? icu::FormattedStringBuilder::remove(this, a2, -(int)v9)
        : icu::FormattedStringBuilder::prepareForInsert(this, a2, (v8 + a2 - a3), a8);
    if (*(int *)a8 <= 0 && (int)v8 >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 2 * (int)v12;
      uint64_t v19 = v15;
      do
      {
        unsigned int v20 = *(unsigned __int16 *)(a4 + 8);
        if ((v20 & 0x8000u) == 0) {
          unsigned int v21 = v20 >> 5;
        }
        else {
          unsigned int v21 = *(_DWORD *)(a4 + 12);
        }
        if (v21 <= v12)
        {
          __int16 v23 = -1;
        }
        else
        {
          if ((v20 & 2) != 0) {
            uint64_t v22 = a4 + 10;
          }
          else {
            uint64_t v22 = *(void *)(a4 + 24);
          }
          __int16 v23 = *(_WORD *)(v22 + v18);
        }
        if (*(unsigned char *)this)
        {
          *(_WORD *)(*((void *)this + 1) + 2 * v19) = v23;
          unsigned int v24 = (char *)*((void *)this + 11);
          uint64_t v25 = v19;
        }
        else
        {
          uint64_t v25 = v17 + v15;
          *((_WORD *)this + v19 + 4) = v23;
          unsigned int v24 = (char *)this + 88;
        }
        v24[v25] = a7;
        ++v17;
        ++v19;
        v18 += 2;
        ++v12;
        --v8;
      }
      while (v8);
    }
  }
  return v9;
}

uint64_t icu::FormattedStringBuilder::remove(icu::FormattedStringBuilder *this, int a2, int a3)
{
  uint64_t v5 = *((int *)this + 32) + (uint64_t)a2;
  int v6 = *(unsigned __int8 *)this;
  unsigned int v7 = (void *)((char *)this + 8);
  if (*(unsigned char *)this)
  {
    unsigned int v7 = (void *)*v7;
    uint64_t v8 = (int)v5;
    uint64_t v9 = (char *)v7 + 2 * (int)v5;
  }
  else
  {
    uint64_t v9 = (char *)v7 + 2 * v5;
    uint64_t v8 = v5;
  }
  int v10 = a3 + a2;
  int v11 = *((_DWORD *)this + 33) - (a3 + a2);
  if (v11)
  {
    memmove(v9, (char *)v7 + 2 * v8 + 2 * a3, 2 * v11);
    int v6 = *(unsigned __int8 *)this;
  }
  unsigned int v12 = (void *)((char *)this + 88);
  if (v6) {
    unsigned int v12 = (void *)*v12;
  }
  int v13 = *((_DWORD *)this + 33) - v10;
  if (v13)
  {
    memmove((char *)v12 + v8, (char *)v12 + v8 + a3, v13);
    int v10 = *((_DWORD *)this + 33);
  }
  *((_DWORD *)this + 33) = v10 - a3;
  return v5;
}

uint64_t icu::FormattedStringBuilder::append(icu::FormattedStringBuilder *this, const icu::FormattedStringBuilder *a2, UErrorCode *a3)
{
  return icu::FormattedStringBuilder::insert(this, *((_DWORD *)this + 33), a2, a3);
}

uint64_t icu::FormattedStringBuilder::insert(icu::FormattedStringBuilder *this, int a2, const icu::FormattedStringBuilder *a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (this == a3)
  {
    uint64_t v4 = 0;
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    uint64_t v4 = *((unsigned int *)a3 + 33);
    if (v4)
    {
      int v9 = icu::FormattedStringBuilder::prepareForInsert(this, a2, *((unsigned int *)a3 + 33), a4);
      if (*(int *)a4 <= 0 && (int)v4 >= 1)
      {
        uint64_t v10 = 0;
        int v11 = (char **)((char *)a3 + 88);
        uint64_t v12 = v9;
        do
        {
          int v13 = *(unsigned __int8 *)a3;
          if (*(unsigned char *)a3) {
            uint64_t v14 = (char *)*((void *)a3 + 1);
          }
          else {
            uint64_t v14 = (char *)a3 + 8;
          }
          uint64_t v15 = *((int *)a3 + 32);
          __int16 v16 = *(_WORD *)&v14[2 * v10 + 2 * v15];
          if (*(unsigned char *)this)
          {
            uint64_t v17 = v10 + v9;
            *(_WORD *)(*((void *)this + 1) + 2 * v12) = v16;
            if (v13) {
              uint64_t v18 = *v11;
            }
            else {
              uint64_t v18 = (char *)a3 + 88;
            }
            uint64_t v19 = (char *)*((void *)this + 11);
          }
          else
          {
            *((_WORD *)this + v12 + 4) = v16;
            if (v13) {
              uint64_t v18 = *v11;
            }
            else {
              uint64_t v18 = (char *)a3 + 88;
            }
            uint64_t v17 = v12;
            uint64_t v19 = (char *)this + 88;
          }
          v19[v17] = v18[v15 + v10++];
          ++v12;
        }
        while (v4 != v10);
      }
    }
  }
  return v4;
}

uint64_t icu::FormattedStringBuilder::writeTerminator(icu::FormattedStringBuilder *this, UErrorCode *a2)
{
  uint64_t result = icu::FormattedStringBuilder::prepareForInsert(this, *((_DWORD *)this + 33), 1, a2);
  if (*(int *)a2 <= 0)
  {
    if (*(unsigned char *)this)
    {
      *(_WORD *)(*((void *)this + 1) + 2 * (int)result) = 0;
      uint64_t v5 = (char *)*((void *)this + 11);
    }
    else
    {
      *((_WORD *)this + (int)result + 4) = 0;
      uint64_t v5 = (char *)this + 88;
    }
    v5[(int)result] = 0;
    --*((_DWORD *)this + 33);
  }
  return result;
}

uint64_t icu::FormattedStringBuilder::prepareForInsertHelper(icu::FormattedStringBuilder *this, int a2, int a3, UErrorCode *a4)
{
  if (*(unsigned char *)this)
  {
    int v8 = *((_DWORD *)this + 4);
    int v9 = (char *)*((void *)this + 1);
    uint64_t v10 = (char *)*((void *)this + 11);
  }
  else
  {
    int v9 = (char *)this + 8;
    uint64_t v10 = (char *)this + 88;
    int v8 = 40;
  }
  int v39 = 0;
  uint64_t v11 = *((int *)this + 32);
  if (uprv_add32_overflow(*((_DWORD *)this + 33), a3, &v39)) {
    goto LABEL_5;
  }
  int v14 = v39;
  int v15 = v8 - v39;
  if (v8 >= v39)
  {
    if (v15 >= 0) {
      int v29 = v8 - v39;
    }
    else {
      int v29 = v15 + 1;
    }
    int v21 = v29 >> 1;
    uint64_t v30 = *((int *)this + 33);
    if (v30)
    {
      memmove(&v9[2 * v21], &v9[2 * v11], 2 * v30);
      LODWORD(v30) = *((_DWORD *)this + 33);
    }
    int v31 = a2;
    int v32 = v30 - a2;
    if (v32)
    {
      memmove(&v9[2 * (v29 >> 1) + 2 * a2 + 2 * a3], &v9[2 * (v29 >> 1) + 2 * a2], 2 * v32);
      int v31 = *((_DWORD *)this + 33);
    }
    uint64_t v33 = &v10[(uint64_t)v29 >> 1];
    if (v31)
    {
      memmove(v33, &v10[v11], v31);
      int v34 = *((_DWORD *)this + 33);
    }
    else
    {
      int v34 = 0;
    }
    int v35 = v34 - a2;
    if (v35) {
      memmove(&v33[a2 + a3], &v33[a2], v35);
    }
  }
  else
  {
    if (v39 >= 0x40000000)
    {
LABEL_5:
      UErrorCode v12 = U_INPUT_TOO_LONG_ERROR;
LABEL_6:
      *a4 = v12;
      return 0xFFFFFFFFLL;
    }
    size_t v16 = 2 * v39;
    if (v39 >= 0) {
      int v17 = v39;
    }
    else {
      int v17 = v39 + 1;
    }
    uint64_t v18 = (char *)uprv_malloc(4 * v39);
    int v38 = v16;
    uint64_t v19 = (char *)uprv_malloc(v16);
    unsigned int v20 = v19;
    if (!v18 || !v19)
    {
      uprv_free(v18);
      uprv_free(v20);
      UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_6;
    }
    unsigned int v36 = v19;
    int v21 = v17 >> 1;
    size_t v22 = a2;
    if (a2)
    {
      memcpy(&v18[2 * v21], &v9[2 * v11], 2 * a2);
      size_t v22 = a2;
    }
    uint64_t v23 = v21;
    uint64_t v24 = a3;
    int v25 = *((_DWORD *)this + 33);
    size_t v26 = v25 - a2;
    uint64_t v37 = v24;
    if (v25 != a2)
    {
      memcpy(&v18[2 * v21 + 2 * v22 + 2 * v24], &v9[2 * v11 + 2 * v22], 2 * (v25 - a2));
      uint64_t v23 = v21;
      size_t v26 = v25 - a2;
      size_t v22 = a2;
      uint64_t v24 = v37;
    }
    unsigned int v27 = &v36[v23];
    uint64_t v28 = &v10[v11];
    if (a2)
    {
      memcpy(&v36[v23], v28, v22);
      size_t v26 = v25 - a2;
      size_t v22 = a2;
      uint64_t v24 = v37;
    }
    if (v25 != a2) {
      memcpy(&v27[v22 + v24], &v28[v22], v26);
    }
    if (*(unsigned char *)this)
    {
      uprv_free(v9);
      uprv_free(v10);
    }
    *(unsigned char *)this = 1;
    *((void *)this + 1) = v18;
    *((_DWORD *)this + 4) = v38;
    *((void *)this + 11) = v36;
    *((_DWORD *)this + 24) = v38;
    int v14 = v39;
  }
  *((_DWORD *)this + 32) = v21;
  *((_DWORD *)this + 33) = v14;
  return (v21 + a2);
}

uint64_t icu::FormattedStringBuilder::toUnicodeString@<X0>(icu::FormattedStringBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)((char *)this + 8);
  if (*(unsigned char *)this) {
    uint64_t v4 = (void *)*v4;
  }
  return icu::UnicodeString::UnicodeString(a2, (uint64_t)v4 + 2 * *((int *)this + 32), *((unsigned int *)this + 33));
}

uint64_t icu::FormattedStringBuilder::toTempUnicodeString@<X0>(icu::FormattedStringBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)((char *)this + 8);
  if (*(unsigned char *)this) {
    uint64_t v4 = (void *)*v4;
  }
  int v6 = (char *)v4 + 2 * *((int *)this + 32);
  return icu::UnicodeString::UnicodeString(a2, 0, &v6);
}

uint64_t icu::FormattedStringBuilder::toDebugString@<X0>(icu::FormattedStringBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  icu::UnicodeString::doAppend(a2, (uint64_t)"<", 0, 0xFFFFFFFFLL);
  uint64_t v4 = (void *)((char *)this + 8);
  if (*(unsigned char *)this) {
    uint64_t v4 = (void *)*v4;
  }
  icu::UnicodeString::UnicodeString((uint64_t)&v16, (uint64_t)v4 + 2 * *((int *)this + 32), *((unsigned int *)this + 33));
  if ((v17 & 0x8000u) == 0) {
    uint64_t v5 = v17 >> 5;
  }
  else {
    uint64_t v5 = v18;
  }
  icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v16, 0, v5);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v16);
  icu::UnicodeString::doAppend(a2, (uint64_t)"]", 0, 0xFFFFFFFFLL);
  if (*((int *)this + 33) >= 1)
  {
    for (uint64_t i = 0; (int)i < *((_DWORD *)this + 33); ++i)
    {
      if (*(unsigned char *)this)
      {
        uint64_t v8 = *((int *)this + 32);
        unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 11) + v8 + i);
        if (!*(unsigned char *)(*((void *)this + 11) + v8 + i)) {
          goto LABEL_17;
        }
        if ((v9 & 0xF0) == 0x20)
        {
          uint64_t v10 = v8 + (int)i;
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v11 = *((int *)this + 32);
        unsigned int v9 = *((unsigned __int8 *)this + i + v11 + 88);
        if (!*((unsigned char *)this + i + v11 + 88))
        {
LABEL_17:
          __int16 v16 = 110;
          goto LABEL_23;
        }
        if ((v9 & 0xF0) == 0x20)
        {
          uint64_t v10 = i + v11;
LABEL_15:
          unsigned int v12 = v9 & 0xF;
          if (v12 >= 0xB)
          {
            int v14 = (char *)this + 88;
            if (*(unsigned char *)this) {
              int v14 = (char *)*((void *)this + 11);
            }
            __int16 v13 = v14[v10] & 0xF | 0x30;
          }
          else
          {
            __int16 v13 = aIfEE[v12];
          }
          __int16 v16 = v13;
LABEL_23:
          icu::UnicodeString::doAppend(a2, (uint64_t)&v16, 0, 1);
          continue;
        }
      }
      icu::UnicodeString::append(a2, (v9 >> 4) | 0x30);
    }
  }
  return icu::UnicodeString::doAppend(a2, (uint64_t)"]", 0, 0xFFFFFFFFLL);
}

uint64_t icu::FormattedStringBuilder::chars(icu::FormattedStringBuilder *this)
{
  int v1 = (void *)((char *)this + 8);
  if (*(unsigned char *)this) {
    int v1 = (void *)*v1;
  }
  return (uint64_t)v1 + 2 * *((int *)this + 32);
}

BOOL icu::FormattedStringBuilder::contentEquals(icu::FormattedStringBuilder *this, const icu::FormattedStringBuilder *a2)
{
  unint64_t v2 = *((unsigned int *)this + 33);
  if (v2 == *((_DWORD *)a2 + 33))
  {
    if ((int)v2 < 1)
    {
      return 1;
    }
    else
    {
      uint64_t v3 = 0;
      BOOL v4 = 0;
      int v5 = *(unsigned __int8 *)this;
      int v6 = (void *)((char *)this + 8);
      uint64_t v7 = *((int *)this + 32);
      BOOL v8 = *(unsigned char *)a2 == 0;
      if (*(unsigned char *)a2) {
        unsigned int v9 = (char *)*((void *)a2 + 1);
      }
      else {
        unsigned int v9 = (char *)a2 + 8;
      }
      uint64_t v10 = *((int *)a2 + 32);
      uint64_t v11 = (void *)((char *)this + 88);
      int v14 = (char *)*((void *)a2 + 11);
      unsigned int v12 = (char *)a2 + 88;
      __int16 v13 = v14;
      if (v8) {
        __int16 v13 = v12;
      }
      uint64_t v15 = *((int *)this + 32);
      uint64_t v16 = v10;
      do
      {
        if (v5)
        {
          if (*(unsigned __int16 *)(*v6 + 2 * v15) != *(unsigned __int16 *)&v9[2 * v16]) {
            return v4;
          }
          unsigned __int16 v17 = (void *)*v11;
          uint64_t v18 = v15;
          uint64_t v19 = v16;
        }
        else
        {
          if (*((unsigned __int16 *)v6 + v15) != *(unsigned __int16 *)&v9[2 * v16]) {
            return v4;
          }
          uint64_t v18 = v3 + v7;
          uint64_t v19 = v3 + v10;
          unsigned __int16 v17 = v11;
        }
        if (*((unsigned __int8 *)v17 + v18) != v13[v19]) {
          break;
        }
        BOOL v4 = ++v3 >= v2;
        ++v16;
        ++v15;
      }
      while (v2 != v3);
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

BOOL icu::FormattedStringBuilder::containsField(uint64_t a1, unsigned __int8 a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 132);
  if ((int)v2 < 1)
  {
    return 0;
  }
  else
  {
    uint64_t v3 = 0;
    BOOL v4 = 1;
    do
    {
      uint64_t v5 = a1 + 88;
      if (*(unsigned char *)a1) {
        uint64_t v5 = *(void *)(a1 + 88);
      }
      if (*(unsigned __int8 *)(v5 + *(int *)(a1 + 128) + v3) == a2) {
        break;
      }
      BOOL v4 = ++v3 < v2;
    }
    while (v2 != v3);
  }
  return v4;
}

uint64_t sub_18C938B64(uint64_t a1, int a2, UErrorCode *a3)
{
  *(void *)a1 = &unk_1EDA4C848;
  *(void *)(a1 + 8) = &unk_1EDA47700;
  *(_WORD *)(a1 + 16) = 2;
  icu::UVector32::UVector32((icu::UVector32 *)(a1 + 72), 4 * a2, a3);
  return a1;
}

void sub_18C938BD8(void **a1)
{
  *a1 = &unk_1EDA4C848;
  unint64_t v2 = (icu::UnicodeString *)(a1 + 1);
  icu::UVector32::~UVector32(a1 + 9);
  icu::UnicodeString::~UnicodeString(v3, v2);

  icu::FormattedValue::~FormattedValue((icu::FormattedValue *)a1);
}

void sub_18C938C40(void **a1)
{
  sub_18C938BD8(a1);

  icu::UMemory::operator delete(v1);
}

icu::UnicodeString *sub_18C938C68@<X0>(uint64_t a1@<X0>, icu::UnicodeString *a2@<X8>)
{
  return icu::UnicodeString::UnicodeString(a2, (UChar **)(a1 + 8));
}

uint64_t sub_18C938C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v4 = *(_WORD *)(a1 + 16);
  if ((v4 & 0x11) != 0)
  {
    uint64_t v5 = 0;
  }
  else if ((v4 & 2) != 0)
  {
    uint64_t v5 = a1 + 18;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  uint64_t v7 = v5;
  return icu::UnicodeString::UnicodeString(a2, 1, &v7);
}

uint64_t sub_18C938CEC(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 16);
  if ((v3 & 0x11) == 0)
  {
    if ((v3 & 2) != 0)
    {
      uint64_t v4 = a1 + 18;
      if ((v3 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if ((v3 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }
LABEL_8:
    uint64_t v5 = *(unsigned int *)(a1 + 20);
    goto LABEL_9;
  }
  uint64_t v4 = 0;
  if ((v3 & 0x8000) != 0) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v5 = v3 >> 5;
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v4, v5);
  return a2;
}

BOOL sub_18C938D74(uint64_t a1, icu::ConstrainedFieldPosition *this)
{
  int v3 = *(_DWORD *)(a1 + 80) / 4;
  int v4 = *(_DWORD *)this;
  if (v3 <= *(_DWORD *)this)
  {
    BOOL v7 = 0;
  }
  else
  {
    int v6 = (4 * v4) | 3;
    BOOL v7 = 1;
    while (1)
    {
      if (v4 < 0 || ((int v8 = v6 - 3, v9 = *(_DWORD *)(a1 + 80), v9 >= 1) ? (v10 = v9 <= v8) : (v10 = 1), v10)) {
        int v11 = 0;
      }
      else {
        int v11 = *(_DWORD *)(*(void *)(a1 + 96) + 4 * v8);
      }
      int v12 = v6 - 2;
      if (v6 - 2 < 0 || ((int v13 = *(_DWORD *)(a1 + 80), v13 >= 1) ? (v14 = v13 <= v12) : (v14 = 1), v14)) {
        int v15 = 0;
      }
      else {
        int v15 = *(_DWORD *)(*(void *)(a1 + 96) + 4 * v12);
      }
      if (icu::ConstrainedFieldPosition::matchesField(this, v11, v15)) {
        break;
      }
      BOOL v7 = ++v4 < v3;
      v6 += 4;
      if (v3 == v4)
      {
        int v4 = v3;
        goto LABEL_30;
      }
    }
    int v16 = 0;
    int v17 = v6 - 1;
    if (v6 - 1 >= 0)
    {
      int v18 = *(_DWORD *)(a1 + 80);
      if (v18 >= 1 && v18 > v17) {
        int v16 = *(_DWORD *)(*(void *)(a1 + 96) + 4 * v17);
      }
    }
    int v19 = 0;
    if ((v6 & 0x80000000) == 0)
    {
      int v20 = *(_DWORD *)(a1 + 80);
      if (v20 >= 1 && v20 > v6) {
        int v19 = *(_DWORD *)(*(void *)(a1 + 96) + 4 * v6);
      }
    }
    icu::ConstrainedFieldPosition::setState(this, v11, v15, v16, v19);
  }
LABEL_30:
  if (v4 == v3) {
    int v21 = v4;
  }
  else {
    int v21 = v4 + 1;
  }
  icu::ConstrainedFieldPosition::setInt64IterationContext(this, v21);
  return v7;
}

uint64_t sub_18C938EDC@<X0>(UErrorCode *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  return icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler(a3, (icu::UVector32 *)(a2 + 72), a1);
}

uint64_t sub_18C938EEC(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    int v4 = (icu::UnicodeString *)(result + 8);
    unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
    int v6 = (__int16)v5;
    unsigned int v7 = v5 >> 5;
    if (v6 >= 0) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = *(unsigned int *)(a2 + 12);
    }
    icu::UnicodeString::doAppend(result + 8, (const icu::UnicodeString *)a2, 0, v8);
    uint64_t result = icu::UnicodeString::getTerminatedBuffer(v4);
    if (!result) {
      *a3 = 7;
    }
  }
  return result;
}

uint64_t sub_18C938F54(uint64_t result, int a2, int a3, UErrorCode *a4)
{
  unint64_t v4 = *(unsigned int *)(result + 80);
  if ((int)v4 >= 4)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    uint64_t result = 0;
    uint64_t v7 = 0;
    int v31 = (icu::UVector32 *)(v5 + 72);
    unint64_t v8 = v4 >> 2;
    uint64_t v9 = 0x7FFFFFFFLL;
    uint64_t v10 = 1;
    uint64_t v11 = 5;
    unsigned int v35 = 0x7FFFFFFF;
    do
    {
      uint64_t v12 = (4 * v6) | 1;
      uint64_t v13 = *(int *)(v5 + 80);
      if ((int)v13 >= 1 && v12 < v13) {
        int v15 = *(_DWORD *)(*(void *)(v5 + 96) + 4 * v12);
      }
      else {
        int v15 = 0;
      }
      uint64_t v16 = v6 + 1;
      if (v6 + 1 < v8)
      {
        uint64_t v17 = 4 * v6;
        unint64_t v18 = v8;
        uint64_t v19 = v11;
        while (1)
        {
          int v20 = 0;
          if ((int)v13 >= 1 && v19 < v13) {
            int v20 = *(_DWORD *)(*(void *)(v5 + 96) + 4 * v19);
          }
          if (v15 == v20) {
            break;
          }
          v19 += 4;
          if (v10 == --v18) {
            goto LABEL_30;
          }
        }
        int v21 = 0;
        uint64_t v22 = result;
        if ((int)v13 >= 1 && (v17 | 2) < v13) {
          int v21 = *(_DWORD *)(*(void *)(v5 + 96) + 4 * (v17 | 2));
        }
        uint64_t v9 = uprv_min(v9, v21);
        int v23 = 0;
        uint64_t v24 = *(int *)(v5 + 80);
        if ((int)v24 >= 1 && (v17 | 3) < v24) {
          int v23 = *(_DWORD *)(*(void *)(v5 + 96) + 4 * (v17 | 3));
        }
        uint64_t v7 = uprv_max(v7, v23);
        int v25 = 0;
        int v26 = *(_DWORD *)(v5 + 80);
        if (v26 >= 1 && v26 > (int)v19 + 1) {
          int v25 = *(_DWORD *)(*(void *)(v5 + 96) + 4 * (v19 + 1));
        }
        unsigned int v35 = uprv_min(v35, v25);
        int v27 = 0;
        int v28 = *(_DWORD *)(v5 + 80);
        if (v28 >= 1 && v28 > (int)v19 + 2) {
          int v27 = *(_DWORD *)(*(void *)(v5 + 96) + 4 * (v19 + 2));
        }
        uint64_t result = uprv_max(v22, v27);
      }
LABEL_30:
      ++v10;
      v11 += 4;
      uint64_t v6 = v16;
    }
    while (v16 != v8);
    if (v9 != 0x7FFFFFFF)
    {
      int v29 = result;
      int v30 = *(_DWORD *)(v5 + 80);
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4 * v30) = a2;
        int v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4 * v30) = a3;
        int v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4 * v30) = v9;
        int v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4 * v30) = v7;
        int v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4 * v30) = a2;
        int v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4 * v30) = 1 - a3;
        int v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), result))
      {
        *(_DWORD *)(*(void *)(v5 + 96) + 4 * v30) = v35;
        int v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 < -1 || *(_DWORD *)(v5 + 84) <= v30)
      {
        uint64_t result = icu::UVector32::expandCapacity(v31, v30 + 1, a4);
        if (!result) {
          return result;
        }
        int v30 = *(_DWORD *)(v5 + 80);
      }
      *(_DWORD *)(*(void *)(v5 + 96) + 4 * v30) = v29;
      ++*(_DWORD *)(v5 + 80);
    }
  }
  return result;
}

uint64_t sub_18C939350(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 80);
  int v2 = v1 + 3;
  if (v1 >= 0) {
    int v2 = *(_DWORD *)(result + 80);
  }
  if (v1 >= 8)
  {
    int v3 = 0;
    int v4 = (v2 >> 2) - 1;
    char v5 = 1;
    int v26 = v4;
    uint64_t v25 = result;
    uint64_t v6 = result + 72;
    while (1)
    {
      int v7 = 0;
      unsigned int v8 = 4 * v3;
      if (v1 >= 1 && v1 > (int)v8) {
        int v7 = *(_DWORD *)(*(void *)(result + 96) + 4 * v8);
      }
      int v9 = 0;
      unsigned int v10 = v8 | 1;
      if (v1 >= 1 && v1 > (int)v10) {
        int v9 = *(_DWORD *)(*(void *)(result + 96) + 4 * v10);
      }
      int v11 = 0;
      unsigned int v12 = v8 | 2;
      if (v1 >= 1 && v1 > (int)v12) {
        int v11 = *(_DWORD *)(*(void *)(result + 96) + 4 * v12);
      }
      int v13 = 0;
      unsigned int v14 = v8 | 3;
      if (v1 >= 1 && v1 > (int)v14) {
        int v13 = *(_DWORD *)(*(void *)(result + 96) + 4 * v14);
      }
      int v15 = 0;
      int v16 = v8 + 4;
      if (v1 >= 1 && v1 > v16) {
        int v15 = *(_DWORD *)(*(void *)(result + 96) + 4 * v16);
      }
      int v17 = 0;
      int v18 = v8 + 5;
      if (v1 >= 1 && v1 > v18) {
        int v17 = *(_DWORD *)(*(void *)(result + 96) + 4 * v18);
      }
      int v19 = 0;
      unsigned int v20 = v8 + 6;
      if (v1 >= 1 && v1 > (int)v20) {
        int v19 = *(_DWORD *)(*(void *)(result + 96) + 4 * v20);
      }
      int v21 = 0;
      unsigned int v22 = v8 + 7;
      if (v1 >= 1 && v1 > (int)v22) {
        int v21 = *(_DWORD *)(*(void *)(result + 96) + 4 * v22);
      }
      int v23 = v19 - v11;
      if (v19 == v11 && (int v23 = v13 - v21, v13 == v21) && (int v23 = v7 - v15, v7 == v15) && (int v23 = v17 - v9, v17 == v9)
        || (v23 & 0x80000000) == 0)
      {
        BOOL v24 = v3 + 1 >= v4;
        if (v3 + 1 < v4) {
          ++v3;
        }
        else {
          int v3 = 0;
        }
        if (v24 & v5) {
          return result;
        }
        v5 |= v24;
      }
      else
      {
        unsigned int v27 = v8 + 4;
        int v28 = v7;
        int v30 = v9;
        int v31 = v11;
        int v32 = v13;
        unsigned int v29 = v8 + 5;
        icu::UVector32::setElementAt(v6, v15, v8);
        icu::UVector32::setElementAt(v6, v17, v10);
        icu::UVector32::setElementAt(v6, v19, v12);
        icu::UVector32::setElementAt(v6, v21, v14);
        icu::UVector32::setElementAt(v6, v28, v27);
        icu::UVector32::setElementAt(v6, v30, v29);
        icu::UVector32::setElementAt(v6, v31, v20);
        icu::UVector32::setElementAt(v6, v32, v22);
        uint64_t result = v25;
        int v4 = v26;
        char v5 = v3 + 1 >= v26;
        if (v3 + 1 < v26) {
          ++v3;
        }
        else {
          int v3 = 0;
        }
      }
      int v1 = *(_DWORD *)(result + 80);
    }
  }
  return result;
}

uint64_t icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl(uint64_t a1, char a2)
{
  *(void *)a1 = &unk_1EDA4C8C0;
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 8));
  *(unsigned char *)(a1 + 144) = a2;
  *(void *)(a1 + 152) = a1 + 168;
  *(_DWORD *)(a1 + 160) = 8;
  *(unsigned char *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  return a1;
}

{
  *(void *)a1 = &unk_1EDA4C8C0;
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 8));
  *(unsigned char *)(a1 + 144) = a2;
  *(void *)(a1 + 152) = a1 + 168;
  *(_DWORD *)(a1 + 160) = 8;
  *(unsigned char *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  return a1;
}

void icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(void **this)
{
  *this = &unk_1EDA4C8C0;
  if (*((unsigned char *)this + 164)) {
    uprv_free(this[19]);
  }
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(this + 1));

  icu::FormattedValue::~FormattedValue((icu::FormattedValue *)this);
}

{
  void *v1;
  uint64_t vars8;

  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::FormattedValueStringBuilderImpl::toString@<X0>(icu::FormattedValueStringBuilderImpl *this@<X0>, uint64_t a2@<X8>)
{
  return icu::FormattedStringBuilder::toUnicodeString((icu::FormattedValueStringBuilderImpl *)((char *)this + 8), a2);
}

uint64_t icu::FormattedValueStringBuilderImpl::toTempString@<X0>(icu::FormattedValueStringBuilderImpl *this@<X0>, uint64_t a2@<X8>)
{
  return icu::FormattedStringBuilder::toTempUnicodeString((icu::FormattedValueStringBuilderImpl *)((char *)this + 8), a2);
}

icu::Appendable *icu::FormattedValueStringBuilderImpl::appendTo(icu::FormattedValueStringBuilderImpl *this, icu::Appendable *a2, UErrorCode *a3)
{
  int v4 = (icu::FormattedValueStringBuilderImpl *)((char *)this + 8);
  uint64_t v5 = icu::FormattedStringBuilder::chars((icu::FormattedValueStringBuilderImpl *)((char *)this + 8));
  uint64_t v6 = icu::FormattedStringBuilder::length(v4);
  (*(void (**)(icu::Appendable *, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v5, v6);
  return a2;
}

uint64_t icu::FormattedValueStringBuilderImpl::nextPosition(icu::FormattedValueStringBuilderImpl *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  return icu::FormattedValueStringBuilderImpl::nextPositionImpl((uint64_t)this, a2, *((unsigned char *)this + 144));
}

uint64_t icu::FormattedValueStringBuilderImpl::nextPositionImpl(uint64_t a1, icu::ConstrainedFieldPosition *this, unsigned __int8 a3)
{
  int v5 = a3;
  uint64_t v6 = *(unsigned int *)(a1 + 296);
  if ((int)v6 < 1)
  {
    BOOL v9 = 0;
    int v61 = -1;
  }
  else
  {
    uint64_t v7 = *(void *)this;
    if (*(void *)this >= v6) {
      int v8 = -1;
    }
    else {
      int v8 = *(_DWORD *)(*(void *)(a1 + 152) + 16 * v7 + 8);
    }
    int v61 = v8;
    BOOL v10 = v7 < 1;
    uint64_t v11 = v7 - 1;
    BOOL v9 = !v10
      && (uint64_t v12 = *(void *)(a1 + 152), *((_DWORD *)this + 5) == *(_DWORD *)(v12 + 16 * v11))
      && *((_DWORD *)this + 2) == *(_DWORD *)(v12 + 16 * v11 + 4);
  }
  int v13 = *((_DWORD *)this + 5);
  BOOL v14 = a3 && v13 == a3 >> 4 && *((_DWORD *)this + 2) == (a3 & 0xF);
  int v15 = *((_DWORD *)this + 4);
  int v16 = *(_DWORD *)(a1 + 140);
  if (v15 > v16)
  {
LABEL_86:
    icu::ConstrainedFieldPosition::setState(this, v13, *((_DWORD *)this + 2), v16, v16);
    return 0;
  }
  uint64_t v17 = 0;
  int v18 = *(_DWORD *)(a1 + 136);
  int v19 = v16 + v18;
  int v20 = v15 + v18;
  BOOL v22 = v13 == 2 && *((_DWORD *)this + 2) == 0;
  int v23 = (uint64_t *)(a1 + 96);
  int v63 = a3 >> 4;
  int v64 = a3;
  int v62 = a3 & 0xF;
  BOOL v65 = v22;
  int v66 = -1;
  while (1)
  {
    BOOL v24 = &byte_18CA9314E;
    if (v20 < v19)
    {
      uint64_t v25 = a1 + 96;
      if (*(unsigned char *)(a1 + 8)) {
        uint64_t v25 = *v23;
      }
      BOOL v24 = (char *)(v25 + v20);
    }
    uint64_t v26 = *v24;
    if ((_BYTE)v17) {
      break;
    }
    if (v20 > v18 && v9)
    {
      uint64_t v27 = a1 + 96;
      if (*(unsigned char *)(a1 + 8)) {
        uint64_t v27 = *v23;
      }
      uint64_t v28 = *(void *)this - 1;
      uint64_t v29 = *(unsigned __int8 *)(v27 + v20 - (uint64_t)*(int *)(*(void *)(a1 + 152) + 16 * v28 + 12));
      if (v29 == 49)
      {
        if (icu::ConstrainedFieldPosition::matchesField(this, 3, 1))
        {
          int v51 = v20 - *(_DWORD *)(a1 + 136) - *(_DWORD *)(*(void *)(a1 + 152) + 16 * v28 + 12);
          int v52 = v20 - *(_DWORD *)(a1 + 136);
LABEL_91:
          uint64_t v49 = 1;
          icu::ConstrainedFieldPosition::setState(this, 3, 1, v51, v52);
          return v49;
        }
        BOOL v9 = 0;
      }
      else
      {
        BOOL v9 = 1;
        uint64_t v26 = v29;
        v20 -= *(_DWORD *)(*(void *)(a1 + 152) + 16 * v28 + 12);
      }
      int v5 = v64;
    }
    if (icu::ConstrainedFieldPosition::matchesField(this, 2, 0))
    {
      uint64_t v32 = *(int *)(a1 + 136);
      if (v20 > (int)v32 && !v65 && !v14)
      {
        uint64_t v33 = a1 + 96;
        if (*(unsigned char *)(a1 + 8)) {
          uint64_t v33 = *v23;
        }
        int v34 = *(unsigned __int8 *)(v33 + v20 - 1);
        if ((v34 == 38 || v34 == 32) && v26 != 32 && v26 != 38)
        {
          uint64_t v53 = v20;
          int v54 = v20 - 1;
          while (1)
          {
            uint64_t v55 = a1 + 96;
            if (*(unsigned char *)(a1 + 8)) {
              uint64_t v55 = *v23;
            }
            int v56 = *(unsigned __int8 *)(v55 + v53 - 1);
            if (v56 != 38 && v56 != 32) {
              break;
            }
            --v53;
            --v54;
            if (v53 <= v32)
            {
              int v54 = v32 - 1;
              break;
            }
          }
          int v44 = v54 - v32 + 1;
          int v48 = v20 - v32;
          long long v47 = this;
          int v45 = 2;
          int v46 = 0;
          goto LABEL_108;
        }
      }
    }
    if (v5)
    {
      if (icu::ConstrainedFieldPosition::matchesField(this, v63, v62))
      {
        uint64_t v35 = *(int *)(a1 + 136);
        if (v20 > (int)v35 && !v14)
        {
          uint64_t v36 = a1 + 96;
          if (*(unsigned char *)(a1 + 8)) {
            uint64_t v36 = *v23;
          }
          int v37 = *(unsigned __int8 *)(v36 + v20 - 1);
          if ((v37 == 1 || (v37 & 0xF0) == 0x20) && v26 != 1 && (v26 & 0xF0) != 0x20)
          {
            uint64_t v57 = v20;
            int v58 = v20 - 1;
            while (1)
            {
              uint64_t v59 = a1 + 96;
              if (*(unsigned char *)(a1 + 8)) {
                uint64_t v59 = *v23;
              }
              int v60 = *(unsigned __int8 *)(v59 + v57 - 1);
              if (v60 != 1 && (v60 & 0xF0) != 0x20) {
                break;
              }
              --v57;
              --v58;
              if (v57 <= v35)
              {
                int v58 = v35 - 1;
                break;
              }
            }
            int v44 = v58 - v35 + 1;
            int v48 = v20 - v35;
            long long v47 = this;
            int v46 = v62;
            int v45 = v63;
            goto LABEL_108;
          }
        }
      }
    }
    if (!v9 && (v26 == 49 || v20 - *(_DWORD *)(a1 + 136) == v61))
    {
      uint64_t v38 = *(void *)this;
      if (*(void *)this >= *(int *)(a1 + 296))
      {
        int v16 = *(_DWORD *)(a1 + 140);
LABEL_85:
        int v13 = *((_DWORD *)this + 5);
        goto LABEL_86;
      }
      int v39 = (int *)(*(void *)(a1 + 152) + 16 * v38);
      int v40 = *v39;
      int v41 = v39[1];
      int v42 = v39[3];
      uint64_t v43 = v38 + 1;
      icu::ConstrainedFieldPosition::setInt64IterationContext(this, v38 + 1);
      if (v43 < *(int *)(a1 + 296)) {
        int v61 = *(_DWORD *)(*(void *)(a1 + 152) + 16 * v43 + 8);
      }
      if (v42)
      {
        if (icu::ConstrainedFieldPosition::matchesField(this, v40, v41))
        {
          int v44 = v20 - *(_DWORD *)(a1 + 136);
          int v48 = v44 + v42;
          long long v47 = this;
          int v45 = v40;
          int v46 = v41;
          goto LABEL_108;
        }
        if (v26 == 49)
        {
          if (icu::ConstrainedFieldPosition::matchesField(this, 3, 1))
          {
            int v51 = v20 - *(_DWORD *)(a1 + 136);
            int v52 = v51 + v42;
            goto LABEL_91;
          }
          BOOL v9 = 0;
          BOOL v14 = 0;
          BOOL v65 = 0;
          uint64_t v26 = 0;
          int v20 = v20 + v42 - 1;
        }
        else
        {
          BOOL v9 = 0;
          BOOL v14 = 0;
          BOOL v65 = 0;
          uint64_t v26 = 0;
        }
      }
      else
      {
        BOOL v9 = 0;
        uint64_t v26 = 0;
        --v20;
      }
      int v5 = v64;
    }
    else
    {
      if (v26 >= 0x10)
      {
        BOOL v9 = 0;
        if (v26 == 32 || v26 == 255)
        {
          BOOL v14 = 0;
          BOOL v65 = 0;
          uint64_t v26 = 0;
          goto LABEL_79;
        }
        if (icu::ConstrainedFieldPosition::matchesField(this, v26 >> 4, v26 & 0xF))
        {
          BOOL v9 = 0;
          BOOL v14 = 0;
          BOOL v65 = 0;
          int v66 = v20 - *(_DWORD *)(a1 + 136);
          goto LABEL_79;
        }
      }
      BOOL v9 = 0;
      BOOL v14 = 0;
      BOOL v65 = 0;
      uint64_t v26 = 0;
    }
LABEL_79:
    int v18 = *(_DWORD *)(a1 + 136);
    int v16 = *(_DWORD *)(a1 + 140);
    int v19 = v16 + v18;
    uint64_t v17 = v26;
    BOOL v10 = v20++ < v16 + v18;
    if (!v10) {
      goto LABEL_85;
    }
  }
  if (v26 == v17)
  {
    uint64_t v26 = v17;
    goto LABEL_79;
  }
  uint64_t v30 = (v20 - v18);
  if (v17 == 38 || (v17 & 0xF0) == 0x30)
  {
    int v44 = v66;
    if ((int)v30 > v66) {
      goto LABEL_83;
    }
    goto LABEL_40;
  }
  int v31 = icu::FormattedValueStringBuilderImpl::trimBack((icu::FormattedValueStringBuilderImpl *)a1, v30);
  if (v31 <= v66)
  {
LABEL_40:
    uint64_t v26 = 0;
    --v20;
    int v66 = -1;
    goto LABEL_79;
  }
  LODWORD(v30) = v31;
  int v44 = icu::FormattedValueStringBuilderImpl::trimFront((icu::FormattedValueStringBuilderImpl *)a1, v66);
LABEL_83:
  int v45 = v17 >> 4;
  int v46 = v17 & 0xF;
  long long v47 = this;
  int v48 = v30;
LABEL_108:
  icu::ConstrainedFieldPosition::setState(v47, v45, v46, v44, v48);
  return 1;
}

uint64_t icu::FormattedValueStringBuilderImpl::nextFieldPosition(icu::FormattedValueStringBuilderImpl *this, icu::FieldPosition *a2, UErrorCode *a3)
{
  unsigned int v3 = *((_DWORD *)a2 + 2);
  if (v3 == -1) {
    return 0;
  }
  if (v3 < 0xE)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    icu::ConstrainedFieldPosition::ConstrainedFieldPosition((uint64_t)&v18);
    icu::ConstrainedFieldPosition::constrainField((uint64_t)&v18, 2, v3);
    icu::ConstrainedFieldPosition::setState(&v18, 2, v3, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 4));
    if (icu::FormattedValueStringBuilderImpl::nextPositionImpl((uint64_t)this, (icu::ConstrainedFieldPosition *)&v18, 0))
    {
      int v7 = v19;
      *((_DWORD *)a2 + 3) = HIDWORD(v18);
      uint64_t v4 = 1;
    }
    else
    {
      uint64_t v4 = 0;
      if (v3 != 1 || *((_DWORD *)a2 + 4)) {
        goto LABEL_26;
      }
      int v8 = *((_DWORD *)this + 34);
      int v9 = *((_DWORD *)this + 35);
      if (v9 < 1)
      {
        int v14 = *((_DWORD *)this + 34);
      }
      else
      {
        int v10 = 0;
        uint64_t v11 = v8;
        uint64_t v12 = (void *)((char *)this + 96);
        if (v9 + v8 <= v8 + 1) {
          int v13 = v8 + 1;
        }
        else {
          int v13 = v9 + v8;
        }
        int v14 = *((_DWORD *)this + 34);
        while (1)
        {
          int v15 = *((unsigned char *)this + 8) ? *(unsigned __int8 *)(*v12 + v11) : *((unsigned __int8 *)v12 + v11);
          int v16 = 1;
          if (v15 != 32 && v15 != 38)
          {
            int v16 = (v15 == 34) | v10;
            if (v15 != 34 && ((v10 ^ 1) & 1) == 0) {
              break;
            }
          }
          ++v11;
          ++v14;
          int v10 = v16;
          if (v11 >= v9 + v8)
          {
            int v14 = v13;
            break;
          }
        }
      }
      uint64_t v4 = 0;
      int v7 = v14 - v8;
      *((_DWORD *)a2 + 3) = v7;
    }
    *((_DWORD *)a2 + 4) = v7;
LABEL_26:
    icu::ConstrainedFieldPosition::~ConstrainedFieldPosition((icu::ConstrainedFieldPosition *)&v18);
    return v4;
  }
  uint64_t v4 = 0;
  *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  return v4;
}

BOOL icu::FormattedValueStringBuilderImpl::isIntOrGroup(char a1)
{
  return a1 == 32 || a1 == 38;
}

void icu::FormattedValueStringBuilderImpl::getAllFieldPositions(icu::FormattedValueStringBuilderImpl *this, icu::FieldPositionIteratorHandler *a2, UErrorCode *a3)
{
  long long v5 = 0u;
  long long v6 = 0u;
  icu::ConstrainedFieldPosition::ConstrainedFieldPosition((uint64_t)&v5);
  if (icu::FormattedValueStringBuilderImpl::nextPositionImpl((uint64_t)this, (icu::ConstrainedFieldPosition *)&v5, 0))
  {
    do
      (*(void (**)(icu::FieldPositionIteratorHandler *, void, void, void))(*(void *)a2 + 16))(a2, DWORD2(v5), HIDWORD(v5), v6);
    while ((icu::FormattedValueStringBuilderImpl::nextPositionImpl((uint64_t)this, (icu::ConstrainedFieldPosition *)&v5, 0) & 1) != 0);
  }
  icu::ConstrainedFieldPosition::~ConstrainedFieldPosition((icu::ConstrainedFieldPosition *)&v5);
}

uint64_t icu::FormattedValueStringBuilderImpl::resetString(icu::FormattedValueStringBuilderImpl *this)
{
  uint64_t result = icu::FormattedStringBuilder::clear((uint64_t)this + 8);
  *((_DWORD *)this + 74) = 0;
  return result;
}

BOOL icu::FormattedValueStringBuilderImpl::isTrimmable(char a1)
{
  return a1 != 38 && (a1 & 0xF0) != 48;
}

unint64_t icu::FormattedValueStringBuilderImpl::trimBack(icu::FormattedValueStringBuilderImpl *this, uint64_t a2)
{
  uint64_t v4 = (icu::UnicodeSet *)icu::unisets::get(1);
  long long v5 = (void *)((char *)this + 16);
  if (*((unsigned char *)this + 8)) {
    long long v5 = (void *)*v5;
  }
  long long v6 = (UChar *)v5 + *((int *)this + 34);

  return icu::UnicodeSet::spanBack(v4, v6, a2, 1);
}

uint64_t icu::FormattedValueStringBuilderImpl::trimFront(icu::FormattedValueStringBuilderImpl *this, int a2)
{
  uint64_t v4 = (icu::UnicodeSet *)icu::unisets::get(1);
  long long v5 = (UChar *)((char *)this + 16);
  if (*((unsigned char *)this + 8)) {
    long long v5 = *(UChar **)v5;
  }
  return icu::UnicodeSet::span(v4, &v5[*((int *)this + 34) + a2], (*((_DWORD *)this + 35) - a2), 1)+ a2;
}

void icu::FormattedValueStringBuilderImpl::appendSpanInfo(uint64_t a1, int a2, int a3, int a4, int a5, int *a6)
{
  if (*a6 <= 0)
  {
    int v11 = *(_DWORD *)(a1 + 160);
    int v12 = *(_DWORD *)(a1 + 296);
    if (v11 != v12)
    {
      int v16 = *(char **)(a1 + 152);
LABEL_13:
      long long v19 = &v16[16 * v12];
      *(_DWORD *)long long v19 = a2;
      *((_DWORD *)v19 + 1) = a3;
      *((_DWORD *)v19 + 2) = a4;
      *((_DWORD *)v19 + 3) = a5;
      ++*(_DWORD *)(a1 + 296);
      return;
    }
    if (v11 >= 1)
    {
      int v14 = 2 * v11;
      int v15 = (char *)uprv_malloc(16 * (2 * v11));
      if (v15)
      {
        int v16 = v15;
        int v17 = *(_DWORD *)(a1 + 160);
        if (v17 >= v11) {
          int v17 = v11;
        }
        if (v17 >= v14) {
          int v17 = 2 * v11;
        }
        long long v18 = *(void **)(a1 + 152);
        memcpy(v15, v18, 16 * v17);
        if (*(unsigned char *)(a1 + 164)) {
          uprv_free(v18);
        }
        *(void *)(a1 + 152) = v16;
        *(_DWORD *)(a1 + 160) = v14;
        *(unsigned char *)(a1 + 164) = 1;
        int v12 = *(_DWORD *)(a1 + 296);
        goto LABEL_13;
      }
    }
    *a6 = 7;
  }
}

void icu::FormattedValueStringBuilderImpl::prependSpanInfo(uint64_t a1, int a2, int a3, int a4, int a5, int *a6)
{
  if (*a6 <= 0)
  {
    int v11 = *(_DWORD *)(a1 + 160);
    int v12 = *(_DWORD *)(a1 + 296);
    if (v11 == v12)
    {
      if (v11 < 1 || (v14 = 2 * v11, (int v15 = uprv_malloc(16 * (2 * v11))) == 0))
      {
        *a6 = 7;
        return;
      }
      int v16 = v15;
      int v17 = *(_DWORD *)(a1 + 160);
      if (v17 >= v11) {
        int v17 = v11;
      }
      if (v17 >= v14) {
        int v17 = 2 * v11;
      }
      long long v18 = *(void **)(a1 + 152);
      memcpy(v15, v18, 16 * v17);
      if (*(unsigned char *)(a1 + 164)) {
        uprv_free(v18);
      }
      *(void *)(a1 + 152) = v16;
      *(_DWORD *)(a1 + 160) = v14;
      *(unsigned char *)(a1 + 164) = 1;
      int v12 = *(_DWORD *)(a1 + 296);
    }
    if (v12 >= 1)
    {
      unint64_t v19 = v12 + 1;
      uint64_t v20 = 16 * v12;
      do
      {
        *(_OWORD *)(*(void *)(a1 + 152) + v20) = *(_OWORD *)(*(void *)(a1 + 152) + 16 * (v19-- - 2));
        v20 -= 16;
      }
      while (v19 > 1);
    }
    int v21 = *(_DWORD **)(a1 + 152);
    _DWORD *v21 = a2;
    v21[1] = a3;
    void v21[2] = a4;
    v21[3] = a5;
    ++*(_DWORD *)(a1 + 296);
  }
}

uint64_t icu::ConstrainedFieldPosition::ConstrainedFieldPosition(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t icu::ConstrainedFieldPosition::reset(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t icu::ConstrainedFieldPosition::constrainCategory(uint64_t this, int a2)
{
  *(unsigned char *)(this + 24) = 1;
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t icu::ConstrainedFieldPosition::constrainField(uint64_t this, int a2, int a3)
{
  *(unsigned char *)(this + 24) = 2;
  *(_DWORD *)(this + 20) = a2;
  *(_DWORD *)(this + 8) = a3;
  return this;
}

void *icu::ConstrainedFieldPosition::setInt64IterationContext(void *this, uint64_t a2)
{
  *this = a2;
  return this;
}

BOOL icu::ConstrainedFieldPosition::matchesField(icu::ConstrainedFieldPosition *this, int a2, int a3)
{
  int v3 = *((char *)this + 24);
  if (!*((unsigned char *)this + 24)) {
    return 1;
  }
  if (v3 == 2)
  {
    if (*((_DWORD *)this + 5) != a2) {
      return 0;
    }
    return *((_DWORD *)this + 2) == a3;
  }
  else
  {
    if (v3 != 1) {
      abort();
    }
    return *((_DWORD *)this + 5) == a2;
  }
}

_DWORD *icu::ConstrainedFieldPosition::setState(_DWORD *this, int a2, int a3, int a4, int a5)
{
  this[2] = a3;
  this[3] = a4;
  this[4] = a5;
  this[5] = a2;
  return this;
}

uint64_t ucfpos_open(_DWORD *a1, unint64_t a2)
{
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x28, a2);
  if (result)
  {
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = 1430472192;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 32) = 0;
  }
  else
  {
    *a1 = 7;
  }
  return result;
}

uint64_t ucfpos_reset(uint64_t result, int *a2)
{
  if (*a2 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1430472192)
      {
        *(void *)(result + 8) = 0;
        *(void *)(result + 16) = 0;
        *(unsigned char *)(result + 32) = 0;
        *(void *)(result + 24) = 0;
        return result;
      }
      int v2 = 3;
    }
    else
    {
      int v2 = 1;
    }
    *a2 = v2;
  }
  return result;
}

uint64_t ucfpos_constrainCategory(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1430472192)
      {
        *(unsigned char *)(result + 32) = 1;
        *(_DWORD *)(result + 28) = a2;
        return result;
      }
      int v3 = 3;
    }
    else
    {
      int v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

uint64_t ucfpos_constrainField(uint64_t result, int a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1430472192)
      {
        *(unsigned char *)(result + 32) = 2;
        *(_DWORD *)(result + 28) = a2;
        *(_DWORD *)(result + 16) = a3;
        return result;
      }
      int v4 = 3;
    }
    else
    {
      int v4 = 1;
    }
    *a4 = v4;
  }
  return result;
}

uint64_t ucfpos_getCategory(_DWORD *a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  if (a1)
  {
    if (*a1 == 1430472192) {
      return a1[7];
    }
    int v3 = 3;
  }
  else
  {
    int v3 = 1;
  }
  uint64_t result = 0;
  *a2 = v3;
  return result;
}

uint64_t ucfpos_getField(_DWORD *a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  if (a1)
  {
    if (*a1 == 1430472192) {
      return a1[4];
    }
    int v3 = 3;
  }
  else
  {
    int v3 = 1;
  }
  uint64_t result = 0;
  *a2 = v3;
  return result;
}

_DWORD *ucfpos_getIndexes(_DWORD *result, _DWORD *a2, _DWORD *a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (result)
    {
      if (*result == 1430472192)
      {
        *a2 = result[5];
        *a3 = result[6];
        return result;
      }
      int v4 = 3;
    }
    else
    {
      int v4 = 1;
    }
    *a4 = v4;
  }
  return result;
}

uint64_t ucfpos_getInt64IterationContext(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  if (a1)
  {
    if (*(_DWORD *)a1 == 1430472192) {
      return *(void *)(a1 + 8);
    }
    int v3 = 3;
  }
  else
  {
    int v3 = 1;
  }
  uint64_t result = 0;
  *a2 = v3;
  return result;
}

uint64_t ucfpos_setInt64IterationContext(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1430472192)
      {
        *(void *)(result + 8) = a2;
        return result;
      }
      int v3 = 3;
    }
    else
    {
      int v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

BOOL ucfpos_matchesField(_DWORD *a1, int a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a1)
    {
      if (*a1 == 1430472192) {
        return icu::ConstrainedFieldPosition::matchesField((icu::ConstrainedFieldPosition *)(a1 + 2), a2, a3);
      }
      int v5 = 3;
    }
    else
    {
      int v5 = 1;
    }
    *a4 = v5;
  }
  return 0;
}

_DWORD *ucfpos_setState(_DWORD *result, int a2, int a3, int a4, int a5, int *a6)
{
  if (*a6 <= 0)
  {
    if (result)
    {
      if (*result == 1430472192)
      {
        result[4] = a3;
        result[5] = a4;
        result[6] = a5;
        result[7] = a2;
        return result;
      }
      int v6 = 3;
    }
    else
    {
      int v6 = 1;
    }
    *a6 = v6;
  }
  return result;
}

void ucfpos_close(_DWORD *a1)
{
  if (a1)
  {
    if (*a1 == 1430472192)
    {
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }
}

unint64_t ufmtval_getString(uint64_t a1, int *a2, int *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*a3 > 0) {
    return 0;
  }
  if (!a1)
  {
    int v8 = 1;
LABEL_16:
    unint64_t v3 = 0;
    *a3 = v8;
    return v3;
  }
  if (*(_DWORD *)a1 != 1430672896)
  {
    int v8 = 3;
    goto LABEL_16;
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 8) + 24))(&v10);
  if (*a3 > 0) {
    goto LABEL_12;
  }
  char v6 = BYTE8(v10);
  if (a2)
  {
    if ((SWORD4(v10) & 0x8000u) == 0) {
      int v7 = WORD4(v10) >> 5;
    }
    else {
      int v7 = HIDWORD(v10);
    }
    *a2 = v7;
  }
  if ((v6 & 0x11) != 0)
  {
LABEL_12:
    unint64_t v3 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    unint64_t v3 = (unint64_t)&v10 | 0xA;
  }
  else
  {
    unint64_t v3 = *((void *)&v11 + 1);
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v10);
  return v3;
}

uint64_t ufmtval_nextPosition(uint64_t a1, _DWORD *a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  if (a1)
  {
    if (*(_DWORD *)a1 != 1430672896)
    {
LABEL_8:
      int v4 = 3;
      goto LABEL_9;
    }
    if (a2)
    {
      if (*a2 == 1430472192) {
        return (*(uint64_t (**)(void, _DWORD *))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2 + 2);
      }
      goto LABEL_8;
    }
  }
  int v4 = 1;
LABEL_9:
  *a3 = v4;
  return 0;
}

uint64_t icu::FieldPositionHandler::setShift(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t sub_18C93A930(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = 0;
  *(void *)uint64_t result = &unk_1EDA4C988;
  *(void *)(result + 16) = a2;
  *(_WORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_18C93A964(uint64_t result, int a2, int a3, int a4)
{
  int v4 = *(_DWORD **)(result + 16);
  if (v4[2] == a2 && (!*(unsigned char *)(result + 24) || !*(unsigned char *)(result + 25)))
  {
    *(unsigned char *)(result + 25) = 1;
    int v5 = *(_DWORD *)(result + 8);
    v4[3] = v5 + a3;
    v4[4] = v5 + a4;
  }
  return result;
}

uint64_t sub_18C93A9A4(uint64_t result, int a2)
{
  if (a2)
  {
    int v2 = *(_DWORD **)(result + 16);
    if (v2[2] != -1)
    {
      int v3 = v2[3];
      if (v3 != -1)
      {
        int v4 = v2[4] + a2;
        v2[3] = v3 + a2;
        v2[4] = v4;
      }
    }
  }
  return result;
}

BOOL sub_18C93A9D8(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 16) + 8) != -1;
}

uint64_t sub_18C93A9EC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EDA4C9C0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  int v4 = (uint64_t *)*a3;
  *(_DWORD *)(a1 + 32) = v4;
  int v5 = (UErrorCode *)(a1 + 32);
  *(_DWORD *)(a1 + 36) = 0;
  if (a2 && (int)v4 <= 0)
  {
    char v6 = (icu::UVector32 *)icu::UMemory::operator new(v4, (icu::UMemory *)0x20, a2);
    if (v6) {
      char v6 = icu::UVector32::UVector32(v6, v5);
    }
    *(void *)(a1 + 24) = v6;
  }
  return a1;
}

uint64_t icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler(uint64_t this, icu::UVector32 *a2, UErrorCode *a3)
{
  *(_DWORD *)(this + 8) = 0;
  *(void *)this = &unk_1EDA4C9C0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = a2;
  *(void *)(this + 32) = *(unsigned int *)a3;
  return this;
}

{
  *(_DWORD *)(this + 8) = 0;
  *(void *)this = &unk_1EDA4C9C0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = a2;
  *(void *)(this + 32) = *(unsigned int *)a3;
  return this;
}

void icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler(icu::FieldPositionIteratorHandler *this)
{
  *(void *)this = &unk_1EDA4C9C0;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    icu::FieldPositionIterator::setData(v2, *((icu::UVector32 **)this + 3), (UErrorCode *)this + 8);
  }
  *((void *)this + 3) = 0;
}

{
  void *v1;
  uint64_t vars8;

  icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler(this);

  icu::UMemory::operator delete(v1);
}

void icu::FieldPositionIteratorHandler::addAttribute(UErrorCode *this, int a2, int a3, int a4)
{
  uint64_t v4 = *((void *)this + 3);
  if (!v4) {
    return;
  }
  if (a3 >= a4) {
    return;
  }
  int v8 = this + 8;
  if (*((int *)this + 8) > 0) {
    return;
  }
  int v10 = *(_DWORD *)(v4 + 8);
  int v11 = *((_DWORD *)this + 9);
  if (v10 >= -1)
  {
    int v12 = *(_DWORD *)(v4 + 8);
    if (*(_DWORD *)(v4 + 12) > v10) {
      goto LABEL_8;
    }
  }
  if (icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 3), v10 + 1, v8))
  {
    int v12 = *(_DWORD *)(v4 + 8);
LABEL_8:
    *(_DWORD *)(*(void *)(v4 + 24) + 4 * v12) = v11;
    ++*(_DWORD *)(v4 + 8);
  }
  uint64_t v13 = *((void *)this + 3);
  int v14 = *(_DWORD *)(v13 + 8);
  if (v14 >= -1 && *(_DWORD *)(v13 + 12) > v14) {
    goto LABEL_13;
  }
  if (icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 3), v14 + 1, v8))
  {
    int v14 = *(_DWORD *)(v13 + 8);
LABEL_13:
    *(_DWORD *)(*(void *)(v13 + 24) + 4 * v14) = a2;
    ++*(_DWORD *)(v13 + 8);
  }
  uint64_t v15 = *((void *)this + 3);
  int v16 = *((_DWORD *)this + 2);
  int v17 = *(_DWORD *)(v15 + 8);
  if (v17 >= -1 && *(_DWORD *)(v15 + 12) > v17) {
    goto LABEL_18;
  }
  if (icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 3), v17 + 1, v8))
  {
    int v17 = *(_DWORD *)(v15 + 8);
LABEL_18:
    *(_DWORD *)(*(void *)(v15 + 24) + 4 * v17) = v16 + a3;
    ++*(_DWORD *)(v15 + 8);
  }
  uint64_t v18 = *((void *)this + 3);
  int v19 = *((_DWORD *)this + 2);
  int v20 = *(_DWORD *)(v18 + 8);
  if (v20 < -1 || *(_DWORD *)(v18 + 12) <= v20)
  {
    if (!icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 3), v20 + 1, v8)) {
      goto LABEL_24;
    }
    int v20 = *(_DWORD *)(v18 + 8);
  }
  *(_DWORD *)(*(void *)(v18 + 24) + 4 * v20) = v19 + a4;
  ++*(_DWORD *)(v18 + 8);
LABEL_24:
  if (*(int *)v8 >= 1)
  {
    int v21 = (icu::UVector32 *)*((void *)this + 3);
    icu::UVector32::setSize(v21, v10);
  }
}

uint64_t icu::FieldPositionIteratorHandler::shiftLast(uint64_t this, int a2)
{
  if (a2)
  {
    uint64_t v2 = this;
    if (*(int *)(this + 32) <= 0)
    {
      this = *(void *)(this + 24);
      int v3 = *(_DWORD *)(this + 8);
      if (v3 >= 1)
      {
        icu::UVector32::setElementAt(this, *(_DWORD *)(*(void *)(this + 24) + 4 * (v3 - 1)) + a2, v3 - 1);
        unsigned int v5 = v3 - 2;
        uint64_t v6 = *(void *)(v2 + 24);
        if (v3 == 1 || ((v7 = *(_DWORD *)(v6 + 8), v7 >= 1) ? (BOOL v8 = v7 <= (int)v5) : (BOOL v8 = 1), v8)) {
          int v9 = 0;
        }
        else {
          int v9 = *(_DWORD *)(*(void *)(v6 + 24) + 4 * v5);
        }
        return icu::UVector32::setElementAt(v6, v9 + a2, v5);
      }
    }
  }
  return this;
}

BOOL icu::FieldPositionIteratorHandler::isRecording(icu::FieldPositionIteratorHandler *this)
{
  return *((_DWORD *)this + 8) < 1;
}

void icu::FieldPositionIterator::~FieldPositionIterator(icu::FieldPositionIterator *this)
{
  *(void *)this = &unk_1EDA4CA78;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = -1;

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::FieldPositionIterator::~FieldPositionIterator(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::FieldPositionIterator::FieldPositionIterator(uint64_t this)
{
  *(void *)this = &unk_1EDA4CA78;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = -1;
  return this;
}

{
  *(void *)this = &unk_1EDA4CA78;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = -1;
  return this;
}

icu::FieldPositionIterator *icu::FieldPositionIterator::FieldPositionIterator(icu::FieldPositionIterator *this, const icu::FieldPositionIterator *a2)
{
  *(void *)this = &unk_1EDA4CA78;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  int v3 = (uint64_t *)*((void *)a2 + 1);
  if (v3)
  {
    UErrorCode v8 = U_ZERO_ERROR;
    unsigned int v5 = (icu::UVector32 *)icu::UMemory::operator new(v3, (icu::UMemory *)0x20, (unint64_t)a2);
    if (v5) {
      unsigned int v5 = icu::UVector32::UVector32(v5, &v8);
    }
    *((void *)this + 1) = v5;
    icu::UVector32::assign(v5, *((const icu::UVector32 **)a2 + 1), &v8);
    if (v8)
    {
      uint64_t v6 = *((void *)this + 1);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      *((void *)this + 1) = 0;
      *((_DWORD *)this + 4) = -1;
    }
  }
  return this;
}

uint64_t icu::FieldPositionIterator::operator==(uint64_t a1, uint64_t a2)
{
  if (a2 == a1) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t result = (v2 | v3) == 0;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return icu::UVector32::operator==(v2, v3);
  }
  return result;
}

uint64_t icu::FieldPositionIterator::setData(uint64_t this, icu::UVector32 *a2, UErrorCode *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = this;
  int v5 = *a3;
  if (a2 && v5 <= 0)
  {
    uint64_t v7 = *((unsigned int *)a2 + 2);
    if (v7)
    {
      if ((v7 & 3) != 0)
      {
LABEL_5:
        *a3 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_17:
        int v10 = *(uint64_t (**)(icu::UVector32 *))(*(void *)a2 + 8);
        return v10(v3);
      }
      if ((int)v7 >= 3)
      {
        uint64_t v8 = 0;
        while (1)
        {
          int v9 = v8 + 3 >= v7 ? 0 : *(_DWORD *)(*((void *)a2 + 3) + 4 * v8 + 12);
          if (*(_DWORD *)(*((void *)a2 + 3) + 8 + 4 * v8) >= v9) {
            goto LABEL_5;
          }
          v8 += 4;
          if ((int)v7 <= (int)v8 + 2) {
            goto LABEL_15;
          }
        }
      }
    }
    else
    {
      this = (*(uint64_t (**)(icu::UVector32 *))(*(void *)a2 + 8))(a2);
      if (*(int *)a3 > 0) {
        return this;
      }
      uint64_t v3 = 0;
    }
  }
  else
  {
LABEL_15:
    if (v5 > 0)
    {
      if (!a2) {
        return this;
      }
      goto LABEL_17;
    }
  }
  this = *(void *)(v4 + 8);
  if (this) {
    this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
  }
  *(void *)(v4 + 8) = v3;
  if (v3) {
    int v11 = 0;
  }
  else {
    int v11 = -1;
  }
  *(_DWORD *)(v4 + 16) = v11;
  return this;
}

uint64_t icu::FieldPositionIterator::next(icu::FieldPositionIterator *this, icu::FieldPosition *a2)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  if (v2 == -1) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 1);
  int v4 = v2 + 2;
  *((_DWORD *)this + 4) = v2 + 2;
  if ((int)v2 >= -1)
  {
    uint64_t v5 = v2 + 1;
    int v6 = *(_DWORD *)(v3 + 8);
    if (v6 < 1 || v6 <= (int)v5) {
      int v10 = 0;
    }
    else {
      int v10 = *(_DWORD *)(*(void *)(v3 + 24) + 4 * v5);
    }
    *((_DWORD *)a2 + 2) = v10;
    int v9 = v2 + 3;
    *((_DWORD *)this + 4) = v2 + 3;
    goto LABEL_13;
  }
  *((_DWORD *)a2 + 2) = 0;
  *((_DWORD *)this + 4) = v2 + 3;
  if (v2 == -2)
  {
    int v9 = 1;
LABEL_13:
    int v11 = *(_DWORD *)(v3 + 8);
    if (v11 < 1 || v11 <= v4) {
      int v13 = 0;
    }
    else {
      int v13 = *(_DWORD *)(*(void *)(v3 + 24) + 4 * v4);
    }
    *((_DWORD *)a2 + 3) = v13;
    int v14 = v2 + 4;
    *((_DWORD *)this + 4) = v2 + 4;
    goto LABEL_20;
  }
  int v9 = 0;
  *((_DWORD *)a2 + 3) = 0;
  int v14 = v2 + 4;
  *((_DWORD *)this + 4) = v2 + 4;
  int v11 = *(_DWORD *)(v3 + 8);
  if (v2 == -3)
  {
    int v14 = 1;
LABEL_20:
    if (v11 < 1 || v11 <= v9) {
      int v9 = 0;
    }
    else {
      int v9 = *(_DWORD *)(*(void *)(v3 + 24) + 4 * v9);
    }
  }
  *((_DWORD *)a2 + 4) = v9;
  if (v14 == v11) {
    *((_DWORD *)this + 4) = -1;
  }
  return 1;
}

void *sub_18C93B280()
{
  return &unk_1E9192252;
}

void *sub_18C93B28C(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = &unk_1EDA4CAB8;
  result[1] = &unk_1EDA4CB18;
  result[2] = a2;
  result[3] = a3;
  return result;
}

void *sub_18C93B2D0(void *a1, uint64_t a2)
{
  *a1 = &unk_1EDA4CAB8;
  a1[1] = &unk_1EDA4CB18;
  a1[2] = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 24))(*(void *)(a2 + 16));
  a1[3] = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24));
  return a1;
}

void sub_18C93B38C(void *a1)
{
  *a1 = &unk_1EDA4CAB8;
  uint64_t v2 = (icu::UnicodeReplacer *)(a1 + 1);
  a1[1] = &unk_1EDA4CB18;
  uint64_t v3 = a1[2];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  icu::UnicodeReplacer::~UnicodeReplacer(v2);

  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
}

void sub_18C93B460(uint64_t a1)
{
}

void sub_18C93B468(void *a1)
{
  sub_18C93B38C(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C93B490(uint64_t a1)
{
  sub_18C93B38C((void *)(a1 - 8));

  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18C93B4BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x20, a2);
  if (result) {
    return sub_18C93B2D0(result, a1);
  }
  return result;
}

uint64_t sub_18C93B4F0(uint64_t a1)
{
  if (a1) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_18C93B500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v10, a2, a3, a4, a5);
  return (*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, (v11 + a3))- a3;
}

uint64_t sub_18C93B5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_18C93B500(a1 - 8, a2, a3, a4, a5);
}

icu::UnicodeString *sub_18C93B5DC(uint64_t a1, icu::UnicodeString *this, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v26 = 0;
  long long v25 = 0u;
  BOOL v22 = &unk_1EDA47700;
  LOWORD(v23) = 2;
  unsigned int v6 = *((unsigned __int16 *)this + 4);
  if (v6)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v6 & 0x8000u) == 0) {
      unsigned int v7 = v6 >> 5;
    }
    else {
      unsigned int v7 = *((_DWORD *)this + 3);
    }
    if (v7) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }
  __int16 v21 = 38;
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v21, 0, 1);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
  unsigned int v9 = *(unsigned __int16 *)(v8 + 8);
  int v10 = (__int16)v9;
  unsigned int v11 = v9 >> 5;
  if (v10 >= 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = *(unsigned int *)(v8 + 12);
  }
  icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)v8, 0, v12);
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)L"( ", 0, 2);
  v20[1] = L"( ";
  uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v13 + 24))(v13, &v22, a3);
  unsigned int v15 = *(unsigned __int16 *)(v14 + 8);
  int v16 = (__int16)v15;
  unsigned int v17 = v15 >> 5;
  if (v16 >= 0) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = *(unsigned int *)(v14 + 12);
  }
  icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)v14, 0, v18);
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)" ", 0, 2);
  v20[0] = " ";
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v22);
  return this;
}

icu::UnicodeString *sub_18C93B7E8(uint64_t a1, icu::UnicodeString *a2, uint64_t a3)
{
  return sub_18C93B5DC(a1 - 8, a2, a3);
}

void *sub_18C93B7F0(uint64_t a1, icu::UVector **a2)
{
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  double v4 = icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v8);
  uint64_t v5 = (const icu::UnicodeSet *)(*(uint64_t (**)(void, _OWORD *, double))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16), v8, v4);
  icu::UnicodeSet::addAll(a2, v5);
  return icu::UnicodeSet::~UnicodeSet(v6, (icu::UnicodeSet *)v8);
}

void *sub_18C93B884(uint64_t a1, icu::UVector **a2)
{
  return sub_18C93B7F0(a1 - 8, a2);
}

uint64_t sub_18C93B88C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))();
}

void sub_18C93B8B4(int *a1)
{
  sub_18CA0A25C(0x1Fu, (uint64_t)sub_18C93BA2C);
  if (*a1 <= 0)
  {
    uint64_t v3 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x40, v2);
    if (v3)
    {
      *uint64_t v3 = xmmword_18CA93240;
      for (uint64_t i = 1; i != 4; ++i)
        *(void *)&v3[i] = &unk_1EDA4CB88;
      uint64_t v5 = 0;
      qword_1E9192258 = (uint64_t)(v3 + 1);
      unsigned int v6 = (_DWORD *)v3 + 6;
      do
      {
        _DWORD *v6 = v5;
        v6 += 4;
        ++v5;
      }
      while (v5 != 3);
      unsigned int v7 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, a1);
      qword_1E9192260 = (uint64_t)v7;
      if (*a1 < 1)
      {
        uhash_setKeyDeleter((uint64_t)v7, (uint64_t)uprv_free);
      }
      else if (qword_1E9192258)
      {
        uint64_t v8 = (char *)(qword_1E9192258 - 16);
        uint64_t v9 = *(void *)(qword_1E9192258 - 8);
        if (v9)
        {
          uint64_t v10 = 16 * v9;
          do
          {
            icu::UObject::~UObject((icu::UObject *)&v8[v10]);
            v10 -= 16;
          }
          while (v10);
        }
        icu::UMemory::operator delete[](v8);
      }
    }
    else
    {
      qword_1E9192258 = 0;
      *a1 = 7;
    }
  }
}

uint64_t sub_18C93BA2C()
{
  if (qword_1E9192260)
  {
    uhash_close((unsigned char *)qword_1E9192260);
    qword_1E9192260 = 0;
    if (qword_1E9192258)
    {
      unint64_t v0 = (char *)(qword_1E9192258 - 16);
      uint64_t v1 = *(void *)(qword_1E9192258 - 8);
      if (v1)
      {
        uint64_t v2 = 16 * v1;
        do
        {
          icu::UObject::~UObject((icu::UObject *)&v0[v2]);
          v2 -= 16;
        }
        while (v2);
      }
      icu::UMemory::operator delete[](v0);
    }
  }
  atomic_store(0, &dword_1E91922B8);
  return 1;
}

void *icu::GenderInfo::GenderInfo(void *this)
{
  *this = &unk_1EDA4CB88;
  return this;
}

{
  *this = &unk_1EDA4CB88;
  return this;
}

void icu::GenderInfo::~GenderInfo(icu::GenderInfo *this)
{
  icu::UObject::~UObject(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::GenderInfo::getInstance(icu::GenderInfo *this, const icu::Locale *a2, UErrorCode *a3)
{
  if (*(int *)a2 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E91922B8, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E91922B8))
    {
      if (dword_1E91922BC >= 1)
      {
        uint64_t v3 = 0;
        *(_DWORD *)a2 = dword_1E91922BC;
        return v3;
      }
    }
    else
    {
      sub_18C93B8B4((int *)a2);
      dword_1E91922BC = *(_DWORD *)a2;
      icu::umtx_initImplPostInit(&dword_1E91922B8);
    }
    if (*(int *)a2 <= 0)
    {
      unsigned int v7 = (const char *)*((void *)this + 5);
      umtx_lock((atomic_ullong *)&unk_1E9192268);
      uint64_t v3 = uhash_get(qword_1E9192260, (uint64_t)v7);
      umtx_unlock((std::mutex **)&unk_1E9192268);
      if (v3) {
        return v3;
      }
      uint64_t Instance = icu::GenderInfo::loadInstance(this, a2, v8);
      if (*(int *)a2 <= 0)
      {
        uint64_t v10 = Instance;
        umtx_lock((atomic_ullong *)&unk_1E9192268);
        uint64_t v3 = uhash_get(qword_1E9192260, (uint64_t)v7);
        if (v3
          || (uint64_t v11 = qword_1E9192260,
              uint64_t v12 = uprv_strdup(v7),
              uhash_put(v11, (uint64_t)v12, v10, (int *)a2),
              uint64_t v3 = v10,
              *(int *)a2 < 1))
        {
          umtx_unlock((std::mutex **)&unk_1E9192268);
          return v3;
        }
        umtx_unlock((std::mutex **)&unk_1E9192268);
      }
    }
  }
  return 0;
}

uint64_t icu::GenderInfo::loadInstance(icu::GenderInfo *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = ures_openDirect(0, (uint64_t)"genderList", (uint64_t)a2);
  uint64_t v6 = v5;
  uint64_t v7 = 0;
  if (*(int *)a2 > 0) {
    goto LABEL_32;
  }
  uint64_t v8 = ures_getByKey(v5, "genderList", 0, (int *)a2);
  uint64_t v9 = v8;
  uint64_t v7 = 0;
  if (*(int *)a2 > 0)
  {
LABEL_30:
    if (!v9) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  *(void *)__int16 v21 = 0;
  uint64_t v10 = (const char *)*((void *)this + 5);
  StringByuint64_t Key = ures_getStringByKey(v8, v10, (int *)&v21[1], (int *)v21);
  if (!StringByKey)
  {
    v21[0] = U_ZERO_ERROR;
    memset(&__s[1], 0, 56);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v19, v10);
    __s[0] = (char *)&__s[1] + 5;
    LODWORD(__s[1]) = 40;
    WORD2(__s[1]) = 0;
    LODWORD(__s[7]) = 0;
    icu::CharString::append((icu::CharString *)__s, v19, v20, v21);
    while (1)
    {
      uint64_t v36 = 0;
      memset(&v35[1], 0, 48);
      v35[0] = (char *)&v35[1] + 5;
      LODWORD(v35[1]) = 40;
      v18[0] = 0;
      v18[1] = 0;
      icu::CharStringByteSink::CharStringByteSink(v18, (uint64_t)v35);
      ulocimp_getParent(__s[0], (uint64_t)v18, (int *)a2);
      int v12 = v36;
      if (v36) {
        icu::CharString::operator=((uint64_t)__s, (uint64_t)v35);
      }
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v18);
      if (BYTE4(v35[1])) {
        uprv_free(v35[0]);
      }
      if (!v12) {
        break;
      }
      *(void *)__int16 v21 = 0;
      uint64_t v13 = ures_getStringByKey(v9, __s[0], (int *)&v21[1], (int *)v21);
      v21[0] = U_ZERO_ERROR;
      if (v13)
      {
        StringByuint64_t Key = v13;
        goto LABEL_13;
      }
    }
    StringByuint64_t Key = 0;
LABEL_13:
    if (BYTE4(__s[1])) {
      uprv_free(__s[0]);
    }
    if (!StringByKey) {
      goto LABEL_29;
    }
  }
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  memset(__s, 0, sizeof(__s));
  u_UCharsToChars(StringByKey, (char *)__s, v21[1] + 1);
  if (__s[0] == (char *)0x6C61727475656ELL)
  {
LABEL_29:
    uint64_t v7 = qword_1E9192258;
    goto LABEL_30;
  }
  if (__s[0] != (char *)0x75654E646578696DLL || *(char **)((char *)__s + 5) != (char *)0x6C61727475654ELL)
  {
    BOOL v16 = __s[0] == (char *)0x6E696154656C616DLL && *(char **)((char *)__s + 3) == (char *)0x73746E69615465;
    uint64_t v7 = qword_1E9192258 + 32 * v16;
    if (!v9) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v7 = qword_1E9192258 + 16;
  if (v9) {
LABEL_31:
  }
    ures_close(v9);
LABEL_32:
  if (v6) {
    ures_close(v6);
  }
  return v7;
}

uint64_t icu::GenderInfo::getListGender(uint64_t a1, unsigned int *a2, int a3, int *a4)
{
  if (*a4 > 0 || !a3) {
    return 2;
  }
  if (a3 == 1) {
    return *a2;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  if (v5 == 2)
  {
    if (a3 < 1) {
      return 1;
    }
    if (*a2 != 1) {
      return 0;
    }
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      if (a3 == v10) {
        break;
      }
      unsigned int v12 = a2[v10++];
    }
    while (v12 == 1);
    return v11 >= a3;
  }
  if (v5 != 1) {
    return 2;
  }
  if (a3 < 1)
  {
    int v6 = 0;
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
    uint64_t v8 = a3;
    do
    {
      unsigned int v9 = *a2++;
      uint64_t result = v9;
      if (v9)
      {
        if (result == 1)
        {
          if (v6) {
            return 2;
          }
          int v7 = 1;
        }
        else if (result == 2)
        {
          return result;
        }
      }
      else
      {
        if (v7) {
          return 2;
        }
        int v6 = 1;
      }
      --v8;
    }
    while (v8);
  }
  return v6 == 0;
}

uint64_t icu::GenderInfo::getNeutralInstance(icu::GenderInfo *this)
{
  return qword_1E9192258;
}

uint64_t icu::GenderInfo::getMixedNeutralInstance(icu::GenderInfo *this)
{
  return qword_1E9192258 + 16;
}

uint64_t icu::GenderInfo::getMaleTaintsInstance(icu::GenderInfo *this)
{
  return qword_1E9192258 + 32;
}

uint64_t ugender_getInstance(char *a1, const icu::Locale *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  icu::Locale::Locale((icu::Locale *)v6, a1, 0, 0, 0);
  uint64_t Instance = icu::GenderInfo::getInstance((icu::GenderInfo *)v6, a2, v3);
  icu::Locale::~Locale((icu::Locale *)v6);
  return Instance;
}

void *icu::GregorianCalendar::getStaticClassID(icu::GregorianCalendar *this)
{
  return &unk_1E91922C0;
}

void *icu::GregorianCalendar::getDynamicClassID(icu::GregorianCalendar *this)
{
  return &unk_1E91922C0;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, UErrorCode *a2)
{
  double v4 = icu::Calendar::Calendar(this, a2);
  *(void *)double v4 = &unk_1EDA4CBC8;
  *((void *)v4 + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)v4 + 158) = 2299161;
  *((void *)v4 + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)v4 + 162) = 1582;
  *((_WORD *)v4 + 326) = 1;
  icu::Calendar::getNow(v4);
  icu::Calendar::setTimeInMillis((uint64_t)this, v5, a2);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, icu::TimeZone *a2, UErrorCode *a3)
{
  uint64_t Default = icu::Locale::getDefault(this);
  uint64_t v7 = icu::Calendar::Calendar(this, a2, (const icu::Locale *)Default, a3);
  *(void *)this = &unk_1EDA4CBC8;
  *((void *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((void *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)this, v8, a3);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, const icu::TimeZone *a2, UErrorCode *a3)
{
  uint64_t Default = icu::Locale::getDefault(this);
  uint64_t v7 = icu::Calendar::Calendar(this, a2, (const icu::Locale *)Default, a3);
  *(void *)this = &unk_1EDA4CBC8;
  *((void *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((void *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)this, v8, a3);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, char **a2, UErrorCode *a3)
{
  int v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  uint64_t v7 = icu::Calendar::Calendar(this, v6, (const icu::Locale *)a2, a3);
  *(void *)this = &unk_1EDA4CBC8;
  *((void *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((void *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)this, v8, a3);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, icu::TimeZone *a2, const icu::Locale *a3, UErrorCode *a4)
{
  int v6 = icu::Calendar::Calendar(this, a2, a3, a4);
  *(void *)int v6 = &unk_1EDA4CBC8;
  *((void *)v6 + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)v6 + 158) = 2299161;
  *((void *)v6 + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)v6 + 162) = 1582;
  *((_WORD *)v6 + 326) = 1;
  icu::Calendar::getNow(v6);
  icu::Calendar::setTimeInMillis((uint64_t)this, v7, a4);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, const icu::TimeZone *a2, const icu::Locale *a3, UErrorCode *a4)
{
  int v6 = icu::Calendar::Calendar(this, a2, a3, a4);
  *(void *)int v6 = &unk_1EDA4CBC8;
  *((void *)v6 + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)v6 + 158) = 2299161;
  *((void *)v6 + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)v6 + 162) = 1582;
  *((_WORD *)v6 + 326) = 1;
  icu::Calendar::getNow(v6);
  icu::Calendar::setTimeInMillis((uint64_t)this, v7, a4);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, int a2, int a3, int a4, UErrorCode *a5)
{
  uint64_t Default = (icu::Locale *)icu::TimeZone::createDefault(this);
  unint64_t v11 = icu::Locale::getDefault(Default);
  unsigned int v12 = icu::Calendar::Calendar(this, Default, (const icu::Locale *)v11, a5);
  *(void *)this = &unk_1EDA4CBC8;
  *((void *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((void *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::set(v12, 0, 1);
  icu::Calendar::set(this, 1u, a2);
  icu::Calendar::set(this, 2u, a3);
  icu::Calendar::set(this, 5u, a4);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, int a2, int a3, int a4, int a5, int a6, UErrorCode *a7)
{
  uint64_t Default = (icu::Locale *)icu::TimeZone::createDefault(this);
  unsigned int v15 = icu::Locale::getDefault(Default);
  BOOL v16 = icu::Calendar::Calendar(this, Default, (const icu::Locale *)v15, a7);
  *(void *)this = &unk_1EDA4CBC8;
  *((void *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((void *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::set(v16, 0, 1);
  icu::Calendar::set(this, 1u, a2);
  icu::Calendar::set(this, 2u, a3);
  icu::Calendar::set(this, 5u, a4);
  icu::Calendar::set(this, 0xBu, a5);
  icu::Calendar::set(this, 0xCu, a6);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, int a2, int a3, int a4, int a5, int a6, int a7, UErrorCode *a8)
{
  uint64_t Default = (icu::Locale *)icu::TimeZone::createDefault(this);
  unsigned int v17 = icu::Locale::getDefault(Default);
  uint64_t v18 = icu::Calendar::Calendar(this, Default, (const icu::Locale *)v17, a8);
  *(void *)this = &unk_1EDA4CBC8;
  *((void *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((void *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::set(v18, 0, 1);
  icu::Calendar::set(this, 1u, a2);
  icu::Calendar::set(this, 2u, a3);
  icu::Calendar::set(this, 5u, a4);
  icu::Calendar::set(this, 0xBu, a5);
  icu::Calendar::set(this, 0xCu, a6);
  icu::Calendar::set(this, 0xDu, a7);
  return this;
}

void icu::GregorianCalendar::~GregorianCalendar(icu::GregorianCalendar *this)
{
  icu::Calendar::~Calendar(this);

  icu::UMemory::operator delete(v1);
}

double icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, const icu::GregorianCalendar *a2)
{
  uint64_t v3 = icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *(void *)uint64_t v3 = &unk_1EDA4CBC8;
  *(void *)(v3 + 624) = *((void *)a2 + 78);
  *(_DWORD *)(v3 + 632) = *((_DWORD *)a2 + 158);
  double result = *((double *)a2 + 80);
  *(double *)(v3 + 640) = result;
  *(_DWORD *)(v3 + 648) = *((_DWORD *)a2 + 162);
  *(_WORD *)(v3 + 652) = *((_WORD *)a2 + 326);
  return result;
}

double icu::GregorianCalendar::clone@<D0>(icu::GregorianCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double v4 = (icu::GregorianCalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x290, a2);
  if (v4) {
    return icu::GregorianCalendar::GregorianCalendar(v4, this);
  }
  return result;
}

uint64_t icu::GregorianCalendar::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::Calendar::operator=(a1, a2);
    *(void *)(a1 + 624) = *(void *)(a2 + 624);
    *(void *)(a1 + 640) = *(void *)(a2 + 640);
    *(_DWORD *)(a1 + 648) = *(_DWORD *)(a2 + 648);
    *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  }
  return a1;
}

uint64_t icu::GregorianCalendar::isEquivalentTo(icu::GregorianCalendar *this, const icu::Calendar *a2)
{
  uint64_t result = icu::Calendar::isEquivalentTo(this, a2);
  if (result) {
    return *((double *)this + 78) == *((double *)a2 + 78);
  }
  return result;
}

icu::GregorianCalendar *icu::GregorianCalendar::setGregorianChange(icu::GregorianCalendar *this, double a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = (uint64_t)this;
    if (*((double *)this + 78) != a2)
    {
      double v7 = uprv_floor(a2 / 86400000.0);
      if (v7 <= -2147483650.0)
      {
        unint64_t v8 = 0xC384997000000000;
        *(void *)(v4 + 640) = 0xC384997000000000;
        *(void *)(v4 + 624) = 0xC384997000000000;
        int v9 = 0x80000000;
      }
      else
      {
        unint64_t v8 = (unint64_t)&icu::Calendar::kDatePrecedence[1][7][1];
        if (v7 >= 2147483650.0)
        {
          unint64_t v8 = 0x4384996FFFD6CD20;
          *(void *)(v4 + 640) = 0x4384996FFFD6CD20;
          *(void *)(v4 + 624) = 0x4384996FFFD6CD20;
          int v9 = 0x7FFFFFFF;
        }
        else
        {
          *(double *)(v4 + 640) = v7 * 86400000.0;
          *(double *)(v4 + 624) = a2;
          int v9 = (int)v7;
        }
      }
      this = (icu::GregorianCalendar *)icu::UMemory::operator new((uint64_t *)v8, (icu::UMemory *)0x290, v6);
      if (this)
      {
        unint64_t v11 = this;
        TimeZone = (const icu::TimeZone *)icu::Calendar::getTimeZone(v10, (icu::Calendar *)v4);
        this = icu::GregorianCalendar::GregorianCalendar(v11, TimeZone, a3);
        if (*(int *)a3 <= 0)
        {
          icu::Calendar::setTimeInMillis((uint64_t)v11, a2, a3);
          *(_DWORD *)(v4 + 648) = icu::Calendar::get(v11, 1u, a3);
          if (!icu::Calendar::get(v11, 0, a3)) {
            *(_DWORD *)(v4 + 648) = 1 - *(_DWORD *)(v4 + 648);
          }
          *(_DWORD *)(v4 + 632) = v9;
          uint64_t v13 = *(uint64_t (**)(icu::GregorianCalendar *))(*(void *)v11 + 8);
          return (icu::GregorianCalendar *)v13(v11);
        }
      }
      else
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return this;
}

_DWORD *icu::GregorianCalendar::handleComputeFields(_DWORD *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = (uint64_t)this;
    int v18 = 0;
    if (this[158] <= a2)
    {
      int v13 = this[73];
      int v14 = this[75];
      int v15 = this[74];
      int v6 = this[72];
    }
    else
    {
      int v5 = a2 - 1721424;
      int v6 = sub_18C93E158(1461, &v18, (double)(a2 - 1721424) * 4.0 + 1464.0);
      this = (_DWORD *)sub_18C93E120(v6 - 1, 4);
      int v7 = v5 - this - 365 * (v6 - 1);
      if ((v6 & 3) != 0) {
        int v8 = 59;
      }
      else {
        int v8 = 60;
      }
      int v9 = (__int16 *)&unk_18CA932B0;
      if ((v6 & 3) != 0) {
        int v10 = 2;
      }
      else {
        int v10 = 1;
      }
      if ((v6 & 3) == 0) {
        int v9 = (__int16 *)&unk_18CA93298;
      }
      if (v7 >= v8) {
        int v11 = v10;
      }
      else {
        int v11 = 0;
      }
      uint64_t v12 = 1497972245 * (12 * (v11 + v7) + 6);
      int v13 = (v12 >> 39) + ((unint64_t)v12 >> 63);
      int v14 = v7 - v9[v13] + 1;
      int v15 = v7 + 1;
    }
    if (v6 == *(_DWORD *)(v4 + 648) && *(_DWORD *)(v4 + 632) <= a2)
    {
      int v16 = sub_18C93E13C(v6 - 1, 400);
      this = (_DWORD *)sub_18C93E13C(v6 - 1, 100);
      v15 += v16 - this + 2;
    }
    *(_DWORD *)(v4 + 20) = v13;
    *(_DWORD *)(v4 + 140) = 1;
    *(unsigned char *)(v4 + 110) = 1;
    *(_DWORD *)(v4 + 104) = v13;
    *(_DWORD *)(v4 + 224) = 1;
    *(unsigned char *)(v4 + 131) = 1;
    *(_WORD *)(v4 + 113) = 257;
    *(_DWORD *)(v4 + 32) = v14;
    *(_DWORD *)(v4 + 36) = v15;
    *(void *)(v4 + 152) = 0x100000001;
    *(_DWORD *)(v4 + 88) = v6;
    *(_DWORD *)(v4 + 208) = 1;
    *(unsigned char *)(v4 + 127) = 1;
    int v17 = 1 - v6;
    if (v6 > 0) {
      int v17 = v6;
    }
    *(_WORD *)(v4 + 108) = 257;
    *(_DWORD *)(v4 + 12) = v6 > 0;
    *(_DWORD *)(v4 + 16) = v17;
    *(void *)(v4 + 132) = 0x100000001;
  }
  return this;
}

double icu::GregorianCalendar::getGregorianChange(icu::GregorianCalendar *this)
{
  return *((double *)this + 78);
}

uint64_t icu::GregorianCalendar::isLeapYear(icu::GregorianCalendar *this, int a2)
{
  int v2 = *((_DWORD *)this + 162);
  BOOL v3 = v2 > a2;
  if ((a2 & 3) != 0) {
    BOOL v3 = 0;
  }
  HIDWORD(v5) = -1030792151 * a2 + 85899344;
  LODWORD(v5) = HIDWORD(v5);
  unsigned int v4 = v5 >> 2;
  LODWORD(v5) = HIDWORD(v5);
  BOOL v6 = (v5 >> 4) < 0xA3D70B;
  unsigned int v7 = v4 > 0x28F5C28 || v6;
  if (v2 <= a2 && (a2 & 3) == 0) {
    return v7;
  }
  else {
    return v3;
  }
}

uint64_t icu::GregorianCalendar::handleComputeJulianDay(uint64_t a1, unsigned int a2)
{
  *(unsigned char *)(a1 + 653) = 0;
  uint64_t v4 = icu::Calendar::handleComputeJulianDay(a1, a2);
  uint64_t v5 = v4;
  if (a2 != 3 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a1 + 648) || (int)v4 < *(_DWORD *)(a1 + 632))
  {
    if (*(unsigned char *)(a1 + 652) == (int)v4 >= *(_DWORD *)(a1 + 632))
    {
      if (!*(unsigned char *)(a1 + 652)) {
        return v5;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 653) = 1;
      uint64_t v5 = icu::Calendar::handleComputeJulianDay(a1, a2);
      if (!*(unsigned char *)(a1 + 652)) {
        return v5;
      }
    }
    uint64_t v6 = *(int *)(a1 + 88);
    if (v6 == *(_DWORD *)(a1 + 648))
    {
      uint64_t v7 = v6 - 1;
      int v8 = sub_18C93E13C(v6 - 1, 400);
      int v9 = sub_18C93E13C(v7, 100);
      if (a2 == 4)
      {
        return (v5 + 14);
      }
      else if (a2 == 6)
      {
        return (v5 + v9 - v8 - 2);
      }
    }
    return v5;
  }
  *(unsigned char *)(a1 + 653) = 1;

  return icu::Calendar::handleComputeJulianDay(a1, 3u);
}

uint64_t icu::GregorianCalendar::handleComputeMonthStart(icu::GregorianCalendar *this, int a2, int a3)
{
  int v3 = a2;
  int v18 = a3;
  if (a3 >= 0xC) {
    int v3 = sub_18C93E158(12, &v18, (double)a3) + a2;
  }
  BOOL v5 = (v3 & 3) == 0;
  uint64_t v6 = v3 - 1;
  uint64_t v7 = sub_18C93E13C(v6, 4);
  int v8 = *((_DWORD *)this + 162);
  BOOL v9 = v3 >= v8;
  *((unsigned char *)this + 652) = v9;
  if (*((unsigned char *)this + 653))
  {
    BOOL v9 = v3 < v8;
    *((unsigned char *)this + 652) = v9;
  }
  uint64_t v10 = v7 + 365 * v6 + 1721423;
  if (v9)
  {
    HIDWORD(v12) = -1030792151 * v3 + 85899344;
    LODWORD(v12) = HIDWORD(v12);
    unsigned int v11 = v12 >> 2;
    LODWORD(v12) = HIDWORD(v12);
    BOOL v13 = (v12 >> 4) < 0xA3D70B;
    int v14 = v11 > 0x28F5C28 || v13;
    if ((v3 & 3) != 0) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = v14;
    }
    int v15 = sub_18C93E13C(v3 - 1, 400);
    v10 += (int)(v15 - sub_18C93E13C(v6, 100) + 2);
  }
  if (v18)
  {
    int v16 = (__int16 *)&unk_18CA932B0;
    if (v5) {
      int v16 = (__int16 *)&unk_18CA93298;
    }
    v10 += v16[v18];
  }
  return v10;
}

uint64_t icu::GregorianCalendar::handleGetMonthLength(icu::GregorianCalendar *this, int a2, int a3)
{
  int v3 = a2;
  int v14 = a3;
  if (a3 >= 0xC) {
    int v3 = sub_18C93E158(12, &v14, (double)a3) + a2;
  }
  int v5 = *((_DWORD *)this + 162);
  int v6 = v3 & 3;
  if (v5 > v3 || v6 != 0)
  {
    uint64_t v8 = v14;
    if (v5 <= v3 || v6 != 0) {
      goto LABEL_16;
    }
LABEL_17:
    unint64_t v12 = (char *)&unk_18CA932C8;
    return v12[v8];
  }
  HIDWORD(v10) = -1030792151 * v3 + 85899344;
  LODWORD(v10) = HIDWORD(v10);
  if ((v10 >> 2) >= 0x28F5C29)
  {
    uint64_t v8 = v14;
    goto LABEL_17;
  }
  uint64_t v8 = v14;
  HIDWORD(v11) = -1030792151 * v3 + 85899344;
  LODWORD(v11) = HIDWORD(v11);
  if ((v11 >> 4) < 0xA3D70B) {
    goto LABEL_17;
  }
LABEL_16:
  unint64_t v12 = (char *)&unk_18CA932D4;
  return v12[v8];
}

uint64_t icu::GregorianCalendar::handleGetYearLength(icu::GregorianCalendar *this, int a2)
{
  int v2 = *((_DWORD *)this + 162);
  if (v2 <= a2 && (a2 & 3) == 0)
  {
    HIDWORD(v5) = -1030792151 * a2 + 85899344;
    LODWORD(v5) = HIDWORD(v5);
    if ((v5 >> 2) <= 0x28F5C28 && a2 % 400 != 0) {
      return 365;
    }
    return 366;
  }
  uint64_t result = 365;
  if ((a2 & 3) == 0 && v2 > a2) {
    return 366;
  }
  return result;
}

uint64_t icu::GregorianCalendar::monthLength(icu::GregorianCalendar *this, uint64_t a2)
{
  return (*(uint64_t (**)(icu::GregorianCalendar *, void, uint64_t))(*(void *)this + 312))(this, *((unsigned int *)this + 22), a2);
}

uint64_t icu::GregorianCalendar::monthLength(icu::GregorianCalendar *this, int a2, int a3)
{
  int v3 = *((_DWORD *)this + 162);
  if (v3 <= a3 && (a3 & 3) == 0)
  {
    HIDWORD(v6) = -1030792151 * a3 + 85899344;
    LODWORD(v6) = HIDWORD(v6);
    if ((v6 >> 2) < 0x28F5C29)
    {
      HIDWORD(v9) = -1030792151 * a3 + 85899344;
      LODWORD(v9) = HIDWORD(v9);
      if ((v9 >> 4) >= 0xA3D70B)
      {
        uint64_t v7 = (char *)&unk_18CA932D4;
        goto LABEL_10;
      }
    }
LABEL_9:
    uint64_t v7 = (char *)&unk_18CA932C8;
LABEL_10:
    unint64_t v5 = &v7[a2];
    return *v5;
  }
  unint64_t v5 = (char *)&unk_18CA932D4 + a2;
  if ((a3 & 3) == 0 && v3 > a3) {
    goto LABEL_9;
  }
  return *v5;
}

uint64_t icu::GregorianCalendar::yearLength(icu::GregorianCalendar *this)
{
  int v1 = *((_DWORD *)this + 4);
  int v2 = *((_DWORD *)this + 162);
  int v3 = v1 & 3;
  if (v2 <= v1 && v3 == 0)
  {
    HIDWORD(v7) = -1030792151 * v1 + 85899344;
    LODWORD(v7) = HIDWORD(v7);
    if ((v7 >> 2) <= 0x28F5C28 && v1 % 400 != 0) {
      return 365;
    }
    return 366;
  }
  if (v2 > v1 && v3 == 0) {
    return 366;
  }
  return 365;
}

BOOL icu::GregorianCalendar::validateFields(icu::GregorianCalendar *this)
{
  uint64_t v2 = 0;
  while (1)
  {
    if ((v2 - 7) <= 0xFFFFFFFD && icu::Calendar::isSet((uint64_t)this, v2))
    {
      BOOL result = icu::GregorianCalendar::boundsCheck((uint64_t)this, *((_DWORD *)this + v2 + 3), v2);
      if (!result) {
        return result;
      }
    }
    if (++v2 == 24)
    {
      if (!icu::Calendar::isSet((uint64_t)this, 5u)
        || (int v4 = *((_DWORD *)this + 8),
            v4 >= (*(int (**)(icu::GregorianCalendar *, uint64_t))(*(void *)this + 112))(this, 5))
        && (uint64_t v5 = (*(uint64_t (**)(icu::GregorianCalendar *))(*(void *)this + 264))(this),
            v4 <= (*(int (**)(icu::GregorianCalendar *, uint64_t))(*(void *)this + 448))(this, v5)))
      {
        if (!icu::Calendar::isSet((uint64_t)this, 6u)) {
          goto LABEL_28;
        }
        int v6 = *((_DWORD *)this + 9);
        if (v6 >= 1)
        {
          int v7 = *((_DWORD *)this + 4);
          int v8 = *((_DWORD *)this + 162);
          if (v8 > v7 || (v7 & 3) != 0)
          {
            unsigned int v11 = 365;
            if (v8 > v7 && (v7 & 3) == 0) {
              goto LABEL_20;
            }
          }
          else
          {
            HIDWORD(v9) = -1030792151 * v7 + 85899344;
            LODWORD(v9) = HIDWORD(v9);
            if ((v9 >> 2) <= 0x28F5C28 && v7 % 400 != 0)
            {
              unsigned int v11 = 365;
              goto LABEL_21;
            }
LABEL_20:
            unsigned int v11 = 366;
          }
LABEL_21:
          if (v6 <= v11)
          {
LABEL_28:
            if (!icu::Calendar::isSet((uint64_t)this, 8u) || *((_DWORD *)this + 11)) {
              return 1;
            }
          }
        }
      }
      return 0;
    }
  }
}

BOOL icu::GregorianCalendar::boundsCheck(uint64_t a1, int a2, uint64_t a3)
{
  return (*(int (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, a3) <= a2
      && (*(int (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a3) >= a2;
}

double icu::GregorianCalendar::getEpochDay(icu::GregorianCalendar *this, UErrorCode *a2)
{
  icu::Calendar::complete(this, a2);
  uint64_t v3 = 274877907 * (*((_DWORD *)this + 19) + *((_DWORD *)this + 18));
  double v4 = (*((double *)this + 29) / 1000.0 + (double)(int)((v3 >> 38) + ((unint64_t)v3 >> 63))) / 86400.0;

  return uprv_floor(v4);
}

double icu::GregorianCalendar::computeJulianDayOfYear(icu::GregorianCalendar *this, int a2, BOOL *a3, signed __int8 *a4)
{
  int v6 = (int)this;
  *a3 = (a2 & 3) == 0;
  double v7 = (double)(int)sub_18C93E120(a2 - 1, 4) + (double)(a2 - 1) * 365.0 + 1721423.0;
  if (v6)
  {
    HIDWORD(v9) = -1030792151 * a2 + 85899344;
    LODWORD(v9) = HIDWORD(v9);
    unsigned int v8 = v9 >> 2;
    LODWORD(v9) = HIDWORD(v9);
    BOOL v10 = (v9 >> 4) < 0xA3D70B;
    char v11 = v8 > 0x28F5C28 || v10;
    if (*a3) {
      char v12 = v11;
    }
    else {
      char v12 = 0;
    }
    *a3 = v12;
    uint64_t v13 = a2 - 1;
    int v14 = sub_18C93E13C(v13, 400);
    return v7 + (double)(int)(v14 - sub_18C93E13C(v13, 100) + 2);
  }
  return v7;
}

double icu::GregorianCalendar::millisToJulianDay(icu::GregorianCalendar *this, double a2)
{
  return uprv_floor(a2 / 86400000.0) + 2440588.0;
}

double icu::GregorianCalendar::julianDayToMillis(icu::GregorianCalendar *this, double a2)
{
  return (a2 + -2440588.0) * 86400000.0;
}

uint64_t icu::GregorianCalendar::aggregateStamp(icu::GregorianCalendar *this, uint64_t a2, int a3)
{
  if (a2 && a3) {
    return uprv_max(a2, a3);
  }
  else {
    return 0;
  }
}

uint64_t icu::GregorianCalendar::roll(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

double *icu::GregorianCalendar::roll(double *result, uint64_t a2, int a3, UErrorCode *a4)
{
  if (!a3 || *(int *)a4 > 0) {
    return result;
  }
  double v7 = result;
  int v8 = icu::Calendar::get(result, 0x13u, a4);
  int v9 = 0;
  int v10 = 1;
  double v11 = 0.0;
  if ((a2 & 0xFFFFFFFE) == 4)
  {
    int v12 = 0;
    if (v8 != *((_DWORD *)v7 + 162)) {
      goto LABEL_15;
    }
    uint64_t v13 = (*(uint64_t (**)(double *))(*(void *)v7 + 264))(v7);
    int v14 = (*(uint64_t (**)(double *, uint64_t))(*(void *)v7 + 448))(v7, v13);
    double v15 = v7[29];
    int v16 = *((_DWORD *)v7 + 8);
    double v17 = v7[78];
    if (v15 < v17) {
      int v18 = 0;
    }
    else {
      int v18 = -10;
    }
    int v9 = v18 + v16;
    double v11 = v15 + (double)(v18 + v16 - 1) * -86400000.0;
    if (v11 >= v17)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = v14 - 10;
      if (v11 + (double)(v14 - 10) * 86400000.0 >= v17)
      {
        int v10 = 0;
        goto LABEL_15;
      }
    }
    int v10 = 1;
  }
  else
  {
    int v12 = 0;
  }
LABEL_15:
  switch(a2)
  {
    case 5:
      if (v10)
      {
        BOOL v22 = v7;
        uint64_t v23 = 5;
LABEL_26:
        return (double *)icu::Calendar::roll(v22, v23, a3, a4);
      }
      double v24 = uprv_fmod(v7[29] - v11 + (double)a3 * 86400000.0, (double)v12 * 86400000.0);
      double v25 = -0.0;
      if (v24 < 0.0) {
        double v25 = (double)v12 * 86400000.0;
      }
      double v26 = v11 + v24 + v25;
      break;
    case 4:
      if (v10)
      {
        BOOL v22 = v7;
        uint64_t v23 = 4;
        goto LABEL_26;
      }
      int v27 = *((_DWORD *)v7 + 10);
      FirstDayOfWeeuint64_t k = icu::Calendar::getFirstDayOfWeek((icu::Calendar *)v7);
      if (v27 >= FirstDayOfWeek) {
        int v29 = v27 - FirstDayOfWeek;
      }
      else {
        int v29 = v27 - FirstDayOfWeek + 7;
      }
      int v30 = (v29 - v9 + 1) % 7;
      if (v30 >= 0) {
        int v31 = (v29 - v9 + 1) % 7;
      }
      else {
        int v31 = v30 + 7;
      }
      if (7 - v31 >= icu::Calendar::getMinimalDaysInFirstWeek((icu::Calendar *)v7)) {
        int v32 = 1;
      }
      else {
        int v32 = 8;
      }
      int v33 = v32 - v31;
      int v34 = 7 * ((v12 - v9 + v29) / 7) - (v29 - v9) - v33 + 7;
      int v35 = v9 - a3 + 8 * a3 - (v9 - a3 + 8 * a3 - v33) / v34 * v34 + (v34 & (((v9 - a3 + 8 * a3 - v33) % v34) >> 31));
      if (v35 <= 1) {
        int v35 = 1;
      }
      if (v35 >= v12) {
        int v35 = v12;
      }
      double v26 = v11 + (double)(v35 - 1) * 86400000.0;
      break;
    case 3:
      int v19 = icu::Calendar::get(v7, 3u, a4);
      uint64_t v20 = icu::Calendar::get(v7, 0x11u, a4);
      int v21 = *((_DWORD *)v7 + 9);
      if ((*(unsigned int (**)(double *))(*(void *)v7 + 264))(v7))
      {
        if (v19 == 1) {
          v21 -= (*(uint64_t (**)(double *, void))(*(void *)v7 + 320))(v7, (v20 - 1));
        }
      }
      else if (v19 >= 52)
      {
        v21 += (*(uint64_t (**)(double *, uint64_t))(*(void *)v7 + 320))(v7, v20);
      }
      int v36 = v19 + a3;
      if ((v36 - 53) <= 0xFFFFFFCB)
      {
        int v37 = (*(uint64_t (**)(double *, uint64_t))(*(void *)v7 + 320))(v7, v20);
        int v38 = *((_DWORD *)v7 + 10);
        int v39 = (int)(v37 + v38 - (v21 + icu::Calendar::getFirstDayOfWeek((icu::Calendar *)v7))) % 7;
        if (v39 >= 0) {
          int v40 = v39;
        }
        else {
          int v40 = v39 + 7;
        }
        if (6 - v40 >= icu::Calendar::getMinimalDaysInFirstWeek((icu::Calendar *)v7)) {
          int v41 = v37 - 7;
        }
        else {
          int v41 = v37;
        }
        int v42 = icu::Calendar::weekNumber((icu::Calendar *)v7, v41, v41, v40 + 1);
        int v36 = (v36 + v42 - 1) % v42 + 1;
      }
      icu::Calendar::set(v7, 3u, v36);
      return (double *)icu::Calendar::set(v7, 0x11u, v20);
    default:
      BOOL v22 = v7;
      uint64_t v23 = a2;
      goto LABEL_26;
  }

  return (double *)icu::Calendar::setTimeInMillis((uint64_t)v7, v26, a4);
}

uint64_t icu::GregorianCalendar::getActualMinimum(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t icu::GregorianCalendar::handleGetLimit(uint64_t a1, int a2, int a3)
{
  return dword_18CA932E0[4 * a2 + a3];
}

uint64_t icu::GregorianCalendar::getActualMaximum(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  if (a2 == 1)
  {
    if (*(int *)a3 > 0) {
      return 0;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (v6)
    {
      double v7 = (icu::Calendar *)v6;
      uint64_t v4 = 1;
      icu::Calendar::setLenient(v6, 1);
      int v8 = icu::Calendar::get(v7, 0, a3);
      double TimeInMillis = icu::Calendar::getTimeInMillis(v7, a3);
      int v10 = 140743;
      do
      {
        if (v10 + (int)v4 < 0 != __OFADD__(v10, v4)) {
          int v11 = v10 + v4 + 1;
        }
        else {
          int v11 = v10 + v4;
        }
        int v12 = v11 >> 1;
        icu::Calendar::set(v7, 1u, v11 >> 1);
        if (icu::Calendar::get(v7, 1u, a3) == v11 >> 1
          && icu::Calendar::get(v7, 0, a3) == v8)
        {
          uint64_t v4 = (v11 >> 1);
          int v12 = v10;
        }
        else
        {
          icu::Calendar::setTimeInMillis((uint64_t)v7, TimeInMillis, a3);
          int v10 = v11 >> 1;
        }
      }
      while ((int)v4 + 1 < v12);
      (*(void (**)(icu::Calendar *))(*(void *)v7 + 8))(v7);
    }
    else
    {
      uint64_t v4 = 0;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
    return v4;
  }
  else
  {
    return icu::Calendar::getActualMaximum(a1, a2, a3);
  }
}

uint64_t icu::GregorianCalendar::handleGetExtendedYear(icu::GregorianCalendar *this)
{
  int v1 = *((_DWORD *)this + 52);
  int v2 = *((_DWORD *)this + 34);
  if (v1 < v2) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = 19;
  }
  if (*((_DWORD *)this + v3 + 33) < *((_DWORD *)this + 50)) {
    unsigned int v3 = 17;
  }
  if (v3 == 1)
  {
    if (*((int *)this + 33) < 1 || *((_DWORD *)this + 3))
    {
      if (v2 >= 1) {
        return *((unsigned int *)this + 4);
      }
      return 1970;
    }
    if (v2 < 1) {
      return 0;
    }
    else {
      return (1 - *((_DWORD *)this + 4));
    }
  }
  else
  {
    if (v3 != 17)
    {
      if (v1 >= 1) {
        return *((unsigned int *)this + 22);
      }
      return 1970;
    }
    return (*(uint64_t (**)(icu::GregorianCalendar *, void, void))(*(void *)this + 344))(this, *((unsigned int *)this + 20), *((unsigned int *)this + 6));
  }
}

uint64_t icu::GregorianCalendar::handleGetExtendedYearFromWeekFields(icu::GregorianCalendar *this, uint64_t a2, int a3)
{
  if (*((int *)this + 33) >= 1)
  {
    if (*((_DWORD *)this + 3)) {
      a2 = a2;
    }
    else {
      a2 = (1 - a2);
    }
  }
  return icu::Calendar::handleGetExtendedYearFromWeekFields(this, a2, a3);
}

uint64_t icu::GregorianCalendar::internalGetEra(icu::GregorianCalendar *this)
{
  if (icu::Calendar::isSet((uint64_t)this, 0)) {
    return *((unsigned int *)this + 3);
  }
  else {
    return 1;
  }
}

const char *icu::GregorianCalendar::getType(icu::GregorianCalendar *this)
{
  return "gregorian";
}

uint64_t icu::GregorianCalendar::haveDefaultCentury(icu::GregorianCalendar *this)
{
  return 1;
}

double icu::GregorianCalendar::defaultCenturyStart(icu::GregorianCalendar *this)
{
  if (atomic_load_explicit(dword_1EB20B728, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20B728))
  {
    sub_18C93E000();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B728);
  }
  return *(double *)&qword_1EB20A720;
}

void sub_18C93E000()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  UErrorCode v2 = U_ZERO_ERROR;
  bzero(v3, 0x290uLL);
  unint64_t v0 = icu::GregorianCalendar::GregorianCalendar((icu::GregorianCalendar *)v3, &v2);
  if (v2 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v0);
    icu::Calendar::setTimeInMillis((uint64_t)v3, v1, &v2);
    icu::Calendar::add(v3, 1u, -80, &v2);
    qword_1EB20A720 = icu::Calendar::getTimeInMillis((icu::Calendar *)v3, &v2);
    dword_1EB20A728 = icu::Calendar::get(v3, 1u, &v2);
  }
  icu::Calendar::~Calendar((icu::Calendar *)v3);
}

uint64_t icu::GregorianCalendar::defaultCenturyStartYear(icu::GregorianCalendar *this)
{
  if (atomic_load_explicit(dword_1EB20B728, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20B728))
  {
    sub_18C93E000();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B728);
  }
  return dword_1EB20A728;
}

uint64_t sub_18C93E120(int a1, int a2)
{
  if (a1 < 0) {
    return ((a1 + 1) / a2 - 1);
  }
  else {
    return (a1 / a2);
  }
}

uint64_t sub_18C93E13C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0) {
    return (a1 + 1) / a2 - 1;
  }
  else {
    return a1 / a2;
  }
}

uint64_t sub_18C93E158(int a1, _DWORD *a2, double a3)
{
  double v5 = (double)a1;
  double v6 = uprv_floor(a3 / (double)a1);
  if (a2) {
    *a2 = (int)(uprv_floor(a3) - v6 * v5);
  }
  return (int)v6;
}

void sub_18C93E1B8(double *a1, double a2, double a3)
{
  double v6 = uprv_floor(a2 / a3);
  double v7 = a2 - v6 * a3;
  double v8 = -1.0;
  if (v7 < 0.0 || (double v8 = 1.0, v7 >= a3))
  {
    double v9 = v6 + v8;
    double v7 = a2 - v9 * a3;
    if (v6 == v9) {
      double v7 = 0.0;
    }
  }
  if (a1) {
    *a1 = v7;
  }
}

double sub_18C93E22C(int a1, int a2, int a3)
{
  unsigned int v3 = a1 - 1;
  int v4 = 365 * (a1 - 1);
  if (a1 < 1)
  {
    unsigned int v5 = ~(-a1 / 0x190u) - (-a1 >> 2) + v4 + 1721422;
    unsigned int v6 = ~(-a1 / 0x64u);
  }
  else
  {
    unsigned int v5 = (v3 >> 2) + 1721422 + v4 + v3 / 0x190 + 1;
    unsigned int v6 = v3 / 0x64;
  }
  HIDWORD(v8) = -1030792151 * a1 + 85899344;
  LODWORD(v8) = HIDWORD(v8);
  unsigned int v7 = v8 >> 2;
  LODWORD(v8) = HIDWORD(v8);
  if ((v8 >> 4) >= 0xA3D70B) {
    int v9 = 0;
  }
  else {
    int v9 = 12;
  }
  if (v7 <= 0x28F5C28) {
    int v10 = v9;
  }
  else {
    int v10 = 12;
  }
  if ((a1 & 3) != 0) {
    int v10 = 0;
  }
  return (double)(int)(a3 + v5 - v6 + word_18CA934A0[v10 + a2] + 2) + -2440588.0;
}

void sub_18C93E314(int *a1, _DWORD *a2, _DWORD *a3, int *a4, int *a5, double a6)
{
  double v11 = a6 + 719162.0;
  double v12 = uprv_floor((a6 + 719162.0) / 146097.0);
  int v13 = (int)(uprv_floor(v11) - v12 * 146097.0);
  int v14 = (int)v12;
  *a5 = v13;
  double v15 = (double)v13;
  double v16 = uprv_floor((double)v13 / 36524.0);
  int v17 = (int)(uprv_floor(v15) - v16 * 36524.0);
  int v18 = (int)v16;
  *a5 = v17;
  double v19 = (double)v17;
  double v20 = uprv_floor((double)v17 / 1461.0);
  int v21 = (int)(uprv_floor(v19) - v20 * 1461.0);
  int v22 = (int)v20;
  *a5 = v21;
  double v23 = (double)v21;
  double v24 = uprv_floor((double)v21 / 365.0);
  *a5 = (int)(uprv_floor(v23) - v24 * 365.0);
  int v25 = 400 * v14 + 100 * v18 + 4 * v22 + (int)v24;
  *a1 = v25;
  if (v18 == 4 || (int)v24 == 4)
  {
    *a5 = 365;
    int v26 = *a1;
  }
  else
  {
    int v26 = v25 + 1;
    *a1 = v25 + 1;
  }
  BOOL v27 = 1;
  if ((v26 & 3) == 0)
  {
    int v28 = -1030792151 * v26 + 85899344;
    HIDWORD(v29) = v28;
    LODWORD(v29) = v28;
    if ((v29 >> 2) <= 0x28F5C28)
    {
      HIDWORD(v30) = v28;
      LODWORD(v30) = v28;
      BOOL v27 = (v30 >> 4) > 0xA3D70A;
    }
    else
    {
      BOOL v27 = 0;
    }
  }
  int v31 = (int)uprv_fmod(v11 + 1.0, 7.0);
  if (v31 >= 0) {
    int v32 = v31 + 1;
  }
  else {
    int v32 = v31 + 8;
  }
  *a4 = v32;
  if (v27) {
    int v33 = 59;
  }
  else {
    int v33 = 60;
  }
  int v34 = *a5;
  if (v27) {
    int v35 = 2;
  }
  else {
    int v35 = 1;
  }
  if (v27) {
    int v36 = 0;
  }
  else {
    int v36 = 12;
  }
  if (v34 >= v33) {
    int v37 = v35;
  }
  else {
    int v37 = 0;
  }
  uint64_t v38 = 1497972245 * (12 * (v37 + v34) + 6);
  LODWORD(v38) = (v38 >> 39) + ((unint64_t)v38 >> 63);
  *a2 = v38;
  *a3 = *a5 - word_18CA934A0[(int)v38 + v36] + 1;
  ++*a5;
}

void sub_18C93E568(int *a1, _DWORD *a2, _DWORD *a3, int *a4, int *a5, _DWORD *a6, double a7)
{
  double v14 = 0.0;
  sub_18C93E1B8(&v14, a7, 86400000.0);
  *a6 = (int)v14;
  sub_18C93E314(a1, a2, a3, a4, a5, v13);
}

uint64_t sub_18C93E5EC(double a1)
{
  double v1 = a1 + 5.0;
  double v2 = uprv_floor((a1 + 5.0) / 7.0);
  unsigned int v3 = (int)(uprv_floor(v1) - v2 * 7.0);
  if (v3) {
    return v3;
  }
  else {
    return 7;
  }
}

uint64_t sub_18C93E644(int a1, int a2, int a3)
{
  if ((a3 - 22) > 6)
  {
    if ((a3 - 29) < 7) {
      return 0xFFFFFFFFLL;
    }
    else {
      return ((a3 + 6) / 7);
    }
  }
  else
  {
    if ((a1 & 3) != 0)
    {
      int v3 = 0;
    }
    else
    {
      int v3 = 12;
      HIDWORD(v5) = -1030792151 * a1 + 85899344;
      LODWORD(v5) = HIDWORD(v5);
      if ((v5 >> 2) <= 0x28F5C28)
      {
        HIDWORD(v6) = -1030792151 * a1 + 85899344;
        LODWORD(v6) = HIDWORD(v6);
        if ((v6 >> 4) >= 0xA3D70B) {
          int v3 = 0;
        }
        else {
          int v3 = 12;
        }
      }
    }
    if (a3 + 7 > byte_18CA934D0[v3 + a2]) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 4;
    }
  }
}

icu::HebrewCalendar *icu::HebrewCalendar::HebrewCalendar(icu::HebrewCalendar *this, char **a2, UErrorCode *a3)
{
  unint64_t v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  unsigned int v7 = icu::Calendar::Calendar(this, v6, (const icu::Locale *)a2, a3);
  *(void *)this = &unk_1EDA4CDC8;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)this, v8, a3);
  return this;
}

void icu::HebrewCalendar::~HebrewCalendar(icu::HebrewCalendar *this)
{
  icu::Calendar::~Calendar(this);

  icu::UMemory::operator delete(v1);
}

const char *icu::HebrewCalendar::getType(icu::HebrewCalendar *this)
{
  return "hebrew";
}

uint64_t *icu::HebrewCalendar::clone@<X0>(icu::HebrewCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    BOOL result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *BOOL result = (uint64_t)&unk_1EDA4CDC8;
  }
  return result;
}

void *icu::HebrewCalendar::HebrewCalendar(icu::HebrewCalendar *this, const icu::HebrewCalendar *a2)
{
  BOOL result = (void *)icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *BOOL result = &unk_1EDA4CDC8;
  return result;
}

{
  void *result;

  BOOL result = (void *)icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *BOOL result = &unk_1EDA4CDC8;
  return result;
}

unsigned char *icu::HebrewCalendar::add(unsigned char *result, unsigned int a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    unint64_t v6 = result;
    if (a2 == 23 || a2 == 2)
    {
      int v7 = icu::Calendar::get(result, 2u, a4);
      int v8 = icu::Calendar::get(v6, 1u, a4);
      int v9 = v8;
      int v10 = v7 + a3;
      if (a3 < 1)
      {
        int v13 = 12 * v8 + 17;
        if (v7 <= 5) {
          goto LABEL_23;
        }
        while (1)
        {
          if (v10 <= 5)
          {
            if (v13 % 19 >= 0) {
              int v14 = 12;
            }
            else {
              int v14 = -7;
            }
            v10 -= v13 % 19 < v14;
          }
LABEL_23:
          if ((v10 & 0x80000000) == 0) {
            break;
          }
          v10 += 13;
          --v9;
          v13 -= 12;
        }
      }
      else
      {
        int v11 = 12 * v8 + 17;
        if (v7 >= 5) {
          goto LABEL_12;
        }
        while (1)
        {
          if (v10 >= 5)
          {
            int v12 = v11 % 19 >= 0 ? 12 : -7;
            if (v11 % 19 < v12) {
              ++v10;
            }
          }
LABEL_12:
          if (v10 < 13) {
            break;
          }
          ++v9;
          v11 += 12;
          v10 -= 13;
        }
      }
      icu::Calendar::set(v6, 2u, v10);
      icu::Calendar::set(v6, 1u, v9);
      double v15 = *(uint64_t (**)(unsigned char *, uint64_t, UErrorCode *))(*(void *)v6 + 392);
      return (unsigned char *)v15(v6, 5, a4);
    }
    else
    {
      return icu::Calendar::add(result, a2, a3, a4);
    }
  }
  return result;
}

BOOL icu::HebrewCalendar::isLeapYear(icu::HebrewCalendar *this)
{
  int v1 = (12 * (int)this + 17) % 19;
  if (v1 >= 0) {
    int v2 = 12;
  }
  else {
    int v2 = -7;
  }
  return v1 >= v2;
}

uint64_t icu::HebrewCalendar::add(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

unsigned char *icu::HebrewCalendar::roll(unsigned char *result, uint64_t a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    unint64_t v6 = result;
    if (a2 == 23 || a2 == 2)
    {
      int v7 = icu::Calendar::get(result, 2u, a4);
      int v8 = (int)(12 * icu::Calendar::get(v6, 1u, a4) + 17) % 19;
      if (v8 >= 0) {
        int v9 = 12;
      }
      else {
        int v9 = -7;
      }
      if (v8 < v9) {
        int v10 = 12;
      }
      else {
        int v10 = 13;
      }
      int v11 = a3 % v10 + v7;
      if (v8 < v9)
      {
        if (a3 < 1 || v7 > 4 || v11 < 5)
        {
          int v14 = a3 < 0 && v7 > 5 && v11 < 6;
          v11 -= v14;
        }
        else
        {
          ++v11;
        }
      }
      icu::Calendar::set(v6, 2u, (v11 + 13) % 13);
      double v15 = *(uint64_t (**)(unsigned char *, uint64_t, UErrorCode *))(*(void *)v6 + 392);
      return (unsigned char *)v15(v6, 5, a4);
    }
    else
    {
      return icu::Calendar::roll(result, a2, a3, a4);
    }
  }
  return result;
}

uint64_t icu::HebrewCalendar::monthsInYear(icu::HebrewCalendar *this)
{
  int v1 = (12 * (int)this + 17) % 19;
  if (v1 >= 0) {
    int v2 = 12;
  }
  else {
    int v2 = -7;
  }
  if (v1 < v2) {
    return 12;
  }
  else {
    return 13;
  }
}

uint64_t icu::HebrewCalendar::roll(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

uint64_t icu::HebrewCalendar::startOfYear(icu::HebrewCalendar *this, int *a2, UErrorCode *a3)
{
  signed int v4 = (int)this;
  sub_18CA0A25C(0xAu, (uint64_t)sub_18C93EEDC);
  uint64_t v5 = sub_18C8CF440((uint64_t **)&qword_1EB20B730, v4, a2);
  if (!v5)
  {
    int v6 = sub_18C93E13C(235 * v4 - 234, 19);
    uint64_t v7 = 13753 * v6 + 12084;
    signed int v8 = v7 / 25920 + 29 * v6;
    uint64_t v9 = v7 % 25920;
    BOOL v10 = (v8 % 7) > 6 || ((1 << (v8 % 7)) & 0x54) == 0;
    if (v10) {
      uint64_t v5 = v8;
    }
    else {
      uint64_t v5 = (v8 + 1);
    }
    if (v10) {
      int v11 = v8 % 7;
    }
    else {
      int v11 = (v8 + 1) % 7;
    }
    if (v9 >= 16405 && v11 == 1)
    {
      int v16 = (12 * v4 + 17) % 19;
      if (v16 >= 0) {
        int v17 = 12;
      }
      else {
        int v17 = -7;
      }
      if (v16 >= v17) {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v5 = (v5 + 2);
      }
    }
    else if (v9 >= 23270 && v11 == 0)
    {
      int v14 = (12 * v4 + 5) % 19;
      if (v14 >= 0) {
        int v15 = 12;
      }
      else {
        int v15 = -7;
      }
      if (v14 < v15) {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v5 = (v5 + 1);
      }
    }
    sub_18C8CF4E0((uint64_t **)&qword_1EB20B730, v4, v5, a2);
  }
  return v5;
}

uint64_t sub_18C93EEDC()
{
  if (qword_1EB20B730) {
    (*(void (**)(uint64_t))(*(void *)qword_1EB20B730 + 8))(qword_1EB20B730);
  }
  qword_1EB20B730 = 0;
  return 1;
}

uint64_t icu::HebrewCalendar::absoluteDayToDayOfWeek(icu::HebrewCalendar *this)
{
  return ((int)this % 7 + 1);
}

uint64_t icu::HebrewCalendar::yearType(icu::HebrewCalendar *this)
{
  int v1 = (*(uint64_t (**)(icu::HebrewCalendar *))(*(void *)this + 320))(this);
  int v2 = v1 - 30;
  if (v1 <= 380) {
    int v2 = v1;
  }
  unsigned int v3 = v2 - 353;
  if (v3 >= 3) {
    return 1;
  }
  else {
    return v3;
  }
}

uint64_t icu::HebrewCalendar::handleGetLimit(uint64_t a1, int a2, int a3)
{
  return dword_18CA93508[4 * a2 + a3];
}

uint64_t icu::HebrewCalendar::handleGetMonthLength(icu::HebrewCalendar *this, int a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0)
  {
    int v6 = 12 * a2 + 5;
    do
    {
      --a2;
      if (v6 % 19 >= 0) {
        int v7 = 12;
      }
      else {
        int v7 = -7;
      }
      if (v6 % 19 < v7) {
        int v8 = 12;
      }
      else {
        int v8 = 13;
      }
      a3 += v8;
      v6 -= 12;
    }
    while ((a3 & 0x80000000) != 0);
  }
  else if (a3 >= 0xD)
  {
    int v3 = 12 * a2 + 17;
    do
    {
      ++a2;
      if (v3 % 19 >= 0) {
        int v4 = 12;
      }
      else {
        int v4 = -7;
      }
      if (v3 % 19 >= v4) {
        int v5 = -13;
      }
      else {
        int v5 = -12;
      }
      a3 += v5;
      v3 += 12;
    }
    while (a3 > 0xC);
  }
  if (a3 - 1 > 1) {
    uint64_t v9 = (char *)&unk_18CA93688 + 3 * a3;
  }
  else {
    uint64_t v9 = (char *)&unk_18CA93688 + 3 * a3 + icu::HebrewCalendar::yearType(this);
  }
  return *v9;
}

uint64_t icu::HebrewCalendar::handleGetYearLength(icu::HebrewCalendar *this, icu::HebrewCalendar *a2, UErrorCode *a3)
{
  int v7 = 0;
  int v4 = icu::HebrewCalendar::startOfYear((icu::HebrewCalendar *)(a2 + 1), &v7, a3);
  return v4 - icu::HebrewCalendar::startOfYear(a2, &v7, v5);
}

_DWORD *icu::HebrewCalendar::validateField(_DWORD *a1, uint64_t a2, int *a3)
{
  if ((a2 == 23 || a2 == 2)
    && ((int v6 = (int)(12 * (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 328))(a1) + 17) % 19, v6 >= 0)
      ? (int v7 = 12)
      : (int v7 = -7),
        v6 < v7
     && (BOOL result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 264))(a1), result == 5)))
  {
    *a3 = 1;
  }
  else
  {
    return icu::Calendar::validateField(a1, a2, a3);
  }
  return result;
}

uint64_t icu::HebrewCalendar::handleComputeFields(icu::HebrewCalendar *this, int a2, UErrorCode *a3)
{
  int v5 = a2 - 347997;
  double v6 = uprv_floor((double)(a2 - 347997) * 25920.0 / 765433.0);
  LODWORD(v7) = (int)(uprv_floor((v6 * 19.0 + 234.0) / 235.0) + 1.0);
  int v9 = icu::HebrewCalendar::startOfYear((icu::HebrewCalendar *)v7, (int *)a3, v8);
  int v11 = v5 - v9;
  if (v5 <= v9)
  {
    do
    {
      int v7 = (icu::HebrewCalendar *)(v7 - 1);
      int v11 = v5 - icu::HebrewCalendar::startOfYear(v7, (int *)a3, v10);
    }
    while (v11 < 1);
  }
  uint64_t result = icu::HebrewCalendar::yearType(this);
  uint64_t v13 = 0;
  int v14 = (12 * (int)v7 + 17) % 19;
  if (v14 >= 0) {
    int v15 = 12;
  }
  else {
    int v15 = -7;
  }
  int v16 = (char *)&unk_18CA936B0 + 2 * result;
  int v17 = (char *)&unk_18CA93704 + 2 * result;
  while (1)
  {
    int v18 = v14 >= v15 ? v16 : v17;
    if (v11 <= *(__int16 *)v18) {
      break;
    }
    --v13;
    v16 += 6;
    v17 += 6;
    if (v13 == -14) {
      goto LABEL_23;
    }
  }
  if (!v13)
  {
LABEL_23:
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return result;
  }
  int v19 = ~v13;
  double v20 = (char *)&unk_18CA93704 + 6 * ~v13 + 2 * result;
  if (v14 >= v15) {
    double v20 = (char *)&unk_18CA936B0 + 6 * ~v13 + 2 * result;
  }
  int v21 = *(__int16 *)v20;
  *((unsigned char *)this + 108) = 1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = v7;
  *(void *)((char *)this + 132) = 0x100000001;
  *(_WORD *)((char *)this + 109) = 257;
  *((_DWORD *)this + 22) = v7;
  int v22 = v11 - v21;
  *((_DWORD *)this + 52) = 1;
  *((unsigned char *)this + 127) = 1;
  if (-(int)v13 > 6 && v14 < v15) {
    int v24 = -2 - v13;
  }
  else {
    int v24 = ~v13;
  }
  *((_DWORD *)this + 26) = v24;
  *((_DWORD *)this + 56) = 1;
  *((unsigned char *)this + 131) = 1;
  *((_DWORD *)this + 5) = v19;
  *((_DWORD *)this + 35) = 1;
  *(_WORD *)((char *)this + 113) = 257;
  *((_DWORD *)this + 8) = v22;
  *((_DWORD *)this + 9) = v11;
  *((void *)this + 19) = 0x100000001;
  return result;
}

uint64_t icu::HebrewCalendar::handleGetExtendedYear(icu::HebrewCalendar *this)
{
  if (icu::Calendar::newerField((uint64_t)this, 0x13u, 1u) == 19)
  {
    if (*((int *)this + 52) >= 1)
    {
      int v2 = (char *)this + 88;
      return *(unsigned int *)v2;
    }
  }
  else if (*((int *)this + 34) >= 1)
  {
    int v2 = (char *)this + 16;
    return *(unsigned int *)v2;
  }
  return 1;
}

uint64_t icu::HebrewCalendar::handleComputeMonthStart(icu::HebrewCalendar *this, icu::HebrewCalendar *a2, UErrorCode *a3)
{
  unsigned int v3 = a3;
  unint64_t v4 = (unint64_t)a2;
  int v19 = 0;
  if ((a3 & 0x80000000) != 0)
  {
    int v9 = 12 * a2 + 5;
    do
    {
      unint64_t v4 = (v4 - 1);
      if (v9 % 19 >= 0) {
        int v10 = 12;
      }
      else {
        int v10 = -7;
      }
      if (v9 % 19 < v10) {
        int v11 = 12;
      }
      else {
        int v11 = 13;
      }
      v3 += v11;
      v9 -= 12;
    }
    while ((v3 & 0x80000000) != 0);
  }
  else if (a3 >= 0xD)
  {
    int v6 = 12 * a2 + 17;
    do
    {
      unint64_t v4 = (v4 + 1);
      if (v6 % 19 >= 0) {
        int v7 = 12;
      }
      else {
        int v7 = -7;
      }
      if (v6 % 19 >= v7) {
        int v8 = -13;
      }
      else {
        int v8 = -12;
      }
      v3 += v8;
      v6 += 12;
    }
    while (v3 > 0xC);
  }
  int v12 = icu::HebrewCalendar::startOfYear((icu::HebrewCalendar *)v4, &v19, a3);
  if (v19 > 0) {
    return 0;
  }
  int v14 = v12;
  if (v3)
  {
    int v15 = (12 * (int)v4 + 17) % 19;
    if (v15 >= 0) {
      int v16 = 12;
    }
    else {
      int v16 = -7;
    }
    int v17 = icu::HebrewCalendar::yearType(this);
    int v18 = (__int16 *)&unk_18CA936B0;
    if (v15 < v16) {
      int v18 = (__int16 *)&unk_18CA93704;
    }
    v14 += v18[3 * v3 + v17];
  }
  return (v14 + 347997);
}

uint64_t icu::HebrewCalendar::getRelatedYear(icu::HebrewCalendar *this, UErrorCode *a2)
{
  unsigned int v3 = icu::Calendar::get(this, 0x13u, a2) - 3760;
  if (*(int *)a2 <= 0) {
    return v3;
  }
  else {
    return 0;
  }
}

unsigned char *icu::HebrewCalendar::setRelatedYear(icu::HebrewCalendar *this, int a2)
{
  return icu::Calendar::set(this, 0x13u, a2 + 3760);
}

uint64_t icu::HebrewCalendar::haveDefaultCentury(icu::HebrewCalendar *this)
{
  return 1;
}

double icu::HebrewCalendar::defaultCenturyStart(icu::HebrewCalendar *this)
{
  if (atomic_load_explicit(dword_1EB20B73C, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20B73C))
  {
    sub_18C93F6C0();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B73C);
  }
  return *(double *)&qword_1EB20A730;
}

void sub_18C93F6C0()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  UErrorCode v2 = U_ZERO_ERROR;
  bzero(v4, 0x270uLL);
  icu::Locale::Locale((icu::Locale *)v3, "@calendar=hebrew", 0, 0, 0);
  icu::HebrewCalendar::HebrewCalendar((icu::HebrewCalendar *)v4, v3, &v2);
  icu::Locale::~Locale((icu::Locale *)v3);
  if (v2 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v0);
    icu::Calendar::setTimeInMillis((uint64_t)v4, v1, &v2);
    if (v2 <= U_ZERO_ERROR) {
      icu::Calendar::add(v4, 1u, -80, &v2);
    }
    qword_1EB20A730 = icu::Calendar::getTimeInMillis((icu::Calendar *)v4, &v2);
    dword_1EB20A738 = icu::Calendar::get(v4, 1u, &v2);
  }
  icu::Calendar::~Calendar((icu::Calendar *)v4);
}

uint64_t icu::HebrewCalendar::defaultCenturyStartYear(icu::HebrewCalendar *this)
{
  if (atomic_load_explicit(dword_1EB20B73C, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20B73C))
  {
    sub_18C93F6C0();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B73C);
  }
  return dword_1EB20A738;
}

BOOL icu::HebrewCalendar::inTemporalLeapYear(icu::HebrewCalendar *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  int v3 = icu::Calendar::get(this, 0x13u, a2);
  if (*(int *)a2 > 0) {
    return 0;
  }
  int v5 = (12 * v3 + 17) % 19;
  if (v5 >= 0) {
    int v6 = 12;
  }
  else {
    int v6 = -7;
  }
  return v5 >= v6;
}

char *icu::HebrewCalendar::getTemporalMonthCode(icu::HebrewCalendar *this, UErrorCode *a2)
{
  int v3 = icu::Calendar::get(this, 2u, a2);
  if (*(int *)a2 <= 0) {
    return off_1E550BBC8[v3];
  }
  else {
    return 0;
  }
}

uint64_t icu::HebrewCalendar::setTemporalMonthCode(uint64_t this, const char *__s, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v5 = (unsigned char *)this;
    this = strlen(__s);
    if ((this - 3) > 1)
    {
LABEL_6:
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      uint64_t v6 = 0;
      while (1)
      {
        this = strcmp(__s, off_1E550BBC8[v6]);
        if (!this) {
          break;
        }
        if (++v6 == 13) {
          goto LABEL_6;
        }
      }
      return (uint64_t)icu::Calendar::set(v5, 2u, v6);
    }
  }
  return this;
}

uint64_t icu::HebrewCalendar::internalGetMonth(icu::HebrewCalendar *this)
{
  if (icu::Calendar::resolveFields(this, icu::Calendar::kMonthPrecedence) == 23)
  {
    int v2 = *((_DWORD *)this + 26);
    int v3 = (int)(12 * (*(uint64_t (**)(icu::HebrewCalendar *))(*(void *)this + 328))(this) + 17) % 19;
    if (v3 >= 0) {
      int v4 = 12;
    }
    else {
      int v4 = -7;
    }
    if (v3 >= v4 || v2 <= 5) {
      return v2;
    }
    else {
      return (v2 + 1);
    }
  }
  else
  {
    return icu::Calendar::internalGetMonth(this);
  }
}

void *icu::HebrewCalendar::getStaticClassID(icu::HebrewCalendar *this)
{
  return &unk_1E91922C8;
}

void *icu::HebrewCalendar::getDynamicClassID(icu::HebrewCalendar *this)
{
  return &unk_1E91922C8;
}

uint64_t *icu::IndianCalendar::clone@<X0>(icu::IndianCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    uint64_t result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *uint64_t result = (uint64_t)&unk_1EDA4CFA8;
  }
  return result;
}

void *icu::IndianCalendar::IndianCalendar(icu::IndianCalendar *this, const icu::IndianCalendar *a2)
{
  uint64_t result = (void *)icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *uint64_t result = &unk_1EDA4CFA8;
  return result;
}

{
  void *result;

  uint64_t result = (void *)icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *uint64_t result = &unk_1EDA4CFA8;
  return result;
}

icu::IndianCalendar *icu::IndianCalendar::IndianCalendar(icu::IndianCalendar *this, char **a2, UErrorCode *a3)
{
  uint64_t v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  int v7 = icu::Calendar::Calendar(this, v6, (const icu::Locale *)a2, a3);
  *(void *)this = &unk_1EDA4CFA8;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)this, v8, a3);
  return this;
}

void icu::IndianCalendar::~IndianCalendar(icu::IndianCalendar *this)
{
  icu::Calendar::~Calendar(this);

  icu::UMemory::operator delete(v1);
}

const char *icu::IndianCalendar::getType(icu::IndianCalendar *this)
{
  return "indian";
}

uint64_t icu::IndianCalendar::handleGetLimit(uint64_t a1, int a2, int a3)
{
  return dword_18CA93770[4 * a2 + a3];
}

uint64_t icu::IndianCalendar::handleGetMonthLength(icu::IndianCalendar *this, int a2, int a3)
{
  int v3 = a2;
  int v10 = a3;
  if (a3 >= 0xC) {
    int v3 = sub_18C93E158(12, &v10, (double)a3) + a2;
  }
  HIDWORD(v5) = -1030792151 * (v3 + 78) + 85899344;
  LODWORD(v5) = HIDWORD(v5);
  unsigned int v4 = v5 >> 2;
  LODWORD(v5) = HIDWORD(v5);
  BOOL v6 = (v5 >> 4) < 0xA3D70B;
  int v7 = v4 > 0x28F5C28 || v6;
  if ((((_BYTE)v3 + 78) & 3) != 0) {
    int v8 = 0;
  }
  else {
    int v8 = v7;
  }
  if (v10) {
    int v8 = 0;
  }
  if ((v10 - 1) < 5) {
    int v8 = 1;
  }
  if (v8) {
    return 31;
  }
  else {
    return 30;
  }
}

uint64_t icu::IndianCalendar::handleGetYearLength(icu::IndianCalendar *this, int a2)
{
  if (((a2 + 78) & 3) != 0) {
    return 365;
  }
  HIDWORD(v3) = -1030792151 * (a2 + 78) + 85899344;
  LODWORD(v3) = HIDWORD(v3);
  if ((v3 >> 2) > 0x28F5C28) {
    return 366;
  }
  HIDWORD(v4) = -1030792151 * (a2 + 78) + 85899344;
  LODWORD(v4) = HIDWORD(v4);
  if ((v4 >> 4) >= 0xA3D70B) {
    return 365;
  }
  else {
    return 366;
  }
}

uint64_t icu::IndianCalendar::handleComputeMonthStart(icu::IndianCalendar *this, int a2, int a3)
{
  int v3 = a2;
  int v15 = a3;
  if (a3 >= 0xC)
  {
    int v3 = sub_18C93E158(12, &v15, (double)a3) + a2;
    a3 = v15;
  }
  if (a3 == 12) {
    int v4 = 1;
  }
  else {
    int v4 = a3 + 1;
  }
  int v5 = v3 + 78;
  if (((v3 + 78) & 3) == 0
    && ((HIDWORD(v6) = -1030792151 * v5 + 85899344, LODWORD(v6) = HIDWORD(v6), (v6 >> 2) <= 0x28F5C28)
      ? (BOOL v7 = v5 % 400 == 0)
      : (BOOL v7 = 1),
        v7))
  {
    double v8 = 31.0;
    int v9 = 21;
  }
  else
  {
    double v8 = 30.0;
    int v9 = 22;
  }
  double v10 = sub_18C93E22C(v5, 2, v9) + 2440588.0 + -0.5;
  if (v4 != 1)
  {
    double v11 = v8 + v10;
    if (v4 >= 7) {
      int v12 = 7;
    }
    else {
      int v12 = v4;
    }
    double v13 = (double)(30 * v4 - 210);
    if (v4 <= 7) {
      double v13 = -0.0;
    }
    double v10 = v13 + v11 + (double)(31 * v12 - 62);
  }
  return (int)v10;
}

uint64_t icu::IndianCalendar::handleGetExtendedYear(icu::IndianCalendar *this)
{
  if (icu::Calendar::newerField((uint64_t)this, 0x13u, 1u) == 19)
  {
    if (*((int *)this + 52) >= 1)
    {
      int v2 = (char *)this + 88;
      return *(unsigned int *)v2;
    }
  }
  else if (*((int *)this + 34) >= 1)
  {
    int v2 = (char *)this + 16;
    return *(unsigned int *)v2;
  }
  return 1;
}

void icu::IndianCalendar::handleComputeFields(icu::IndianCalendar *this, int a2, UErrorCode *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v23 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  double v4 = (double)a2;
  sub_18C93E314((int *)&v22, (_DWORD *)&v22 + 1, &v23, (int *)&v21, (int *)&v21 + 1, (double)a2 + -2440588.0);
  int v5 = v22;
  int v6 = (int)(v4 - (sub_18C93E22C(v22, 0, 1) + 2440588.0 + -0.5));
  if (v6 > 79)
  {
    int v7 = v5 - 78;
    HIDWORD(v13) = -1030792151 * v5 + 85899344;
    LODWORD(v13) = HIDWORD(v13);
    unsigned int v12 = v13 >> 2;
    LODWORD(v13) = HIDWORD(v13);
    if ((v13 >> 4) >= 0xA3D70B) {
      int v14 = 30;
    }
    else {
      int v14 = 31;
    }
    if (v12 <= 0x28F5C28) {
      int v15 = v14;
    }
    else {
      int v15 = 31;
    }
    if ((v5 & 3) != 0) {
      int v8 = 30;
    }
    else {
      int v8 = v15;
    }
    int v11 = -80;
  }
  else
  {
    int v7 = v5 - 79;
    int v8 = 30;
    if (((v5 - 1) & 3) == 0)
    {
      HIDWORD(v10) = -1030792151 * (v5 - 1) + 85899344;
      LODWORD(v10) = HIDWORD(v10);
      unsigned int v9 = v10 >> 2;
      LODWORD(v10) = HIDWORD(v10);
      int v8 = (v10 >> 4) >= 0xA3D70B ? 30 : 31;
      if (v9 > 0x28F5C28) {
        int v8 = 31;
      }
    }
    int v11 = v8 + 255;
  }
  unsigned int v16 = v11 + v6;
  int v17 = v11 + v6 - v8;
  if (v11 + v6 >= v8)
  {
    if (v17 > 154)
    {
      unsigned int v20 = v17 - 155;
      int v18 = (int)uprv_floor((double)(v20 / 0x1E)) + 6;
      unsigned int v19 = v20 % 0x1E;
    }
    else
    {
      int v18 = (int)uprv_floor((double)(v17 / 31)) + 1;
      unsigned int v19 = v17 % 31;
    }
  }
  else
  {
    int v18 = 0;
    unsigned int v19 = v16;
  }
  *((unsigned char *)this + 108) = 1;
  *((_DWORD *)this + 22) = v7;
  *((_DWORD *)this + 52) = 1;
  *((unsigned char *)this + 127) = 1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = v7;
  *(void *)((char *)this + 132) = 0x100000001;
  *(_WORD *)((char *)this + 109) = 257;
  *((_DWORD *)this + 5) = v18;
  *((_DWORD *)this + 35) = 1;
  *((_DWORD *)this + 26) = v18;
  *((_DWORD *)this + 56) = 1;
  *((unsigned char *)this + 131) = 1;
  *(_WORD *)((char *)this + 113) = 257;
  *((_DWORD *)this + 8) = v19 + 1;
  *((_DWORD *)this + 9) = v16 + 1;
  *((void *)this + 19) = 0x100000001;
}

uint64_t icu::IndianCalendar::getRelatedYear(icu::IndianCalendar *this, UErrorCode *a2)
{
  unsigned int v3 = icu::Calendar::get(this, 0x13u, a2) + 79;
  if (*(int *)a2 <= 0) {
    return v3;
  }
  else {
    return 0;
  }
}

unsigned char *icu::IndianCalendar::setRelatedYear(icu::IndianCalendar *this, int a2)
{
  return icu::Calendar::set(this, 0x13u, a2 - 79);
}

uint64_t icu::IndianCalendar::haveDefaultCentury(icu::IndianCalendar *this)
{
  return 1;
}

double icu::IndianCalendar::defaultCenturyStart(icu::IndianCalendar *this)
{
  if (atomic_load_explicit(dword_1EB20B744, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20B744))
  {
    sub_18C9401D4();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B744);
  }
  return *(double *)&qword_1EB20A740;
}

void sub_18C9401D4()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  UErrorCode v4 = U_ZERO_ERROR;
  bzero(v6, 0x270uLL);
  icu::Locale::Locale((icu::Locale *)v5, "@calendar=Indian", 0, 0, 0);
  icu::IndianCalendar::IndianCalendar((icu::IndianCalendar *)v6, v5, &v4);
  icu::Locale::~Locale((icu::Locale *)v5);
  if (v4 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v0);
    icu::Calendar::setTimeInMillis((uint64_t)v6, v1, &v4);
    icu::Calendar::add(v6, 1u, -80, &v4);
    double TimeInMillis = icu::Calendar::getTimeInMillis((icu::Calendar *)v6, &v4);
    int v3 = icu::Calendar::get(v6, 1u, &v4);
    qword_1EB20A740 = *(void *)&TimeInMillis;
    dword_1EB20A748 = v3;
  }
  icu::Calendar::~Calendar((icu::Calendar *)v6);
}

uint64_t icu::IndianCalendar::defaultCenturyStartYear(icu::IndianCalendar *this)
{
  if (atomic_load_explicit(dword_1EB20B744, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20B744))
  {
    sub_18C9401D4();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B744);
  }
  return dword_1EB20A748;
}

void *icu::IndianCalendar::getStaticClassID(icu::IndianCalendar *this)
{
  return &unk_1E91922CC;
}

void *icu::IndianCalendar::getDynamicClassID(icu::IndianCalendar *this)
{
  return &unk_1E91922CC;
}

uint64_t sub_18C940340(uint64_t a1, _DWORD *a2)
{
  *(void *)a1 = uprv_malloc(0x2000uLL);
  UErrorCode v4 = uprv_malloc(0x200uLL);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (*(void *)a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    *a2 = 7;
  }
  return a1;
}

void **sub_18C9403A4(void **a1)
{
  return a1;
}

size_t sub_18C9403E4(size_t result, char *__s, int a3)
{
  size_t v3 = result;
  *(_DWORD *)(result + 8) = 0;
  *(_WORD *)(result + 24) = 0;
  *(void *)(result + 40) = __s;
  if (a3 == -1)
  {
    uint64_t result = strlen(__s);
    a3 = result;
  }
  *(_DWORD *)(v3 + 48) = a3;
  return result;
}

char *sub_18C940428(char *result, char *__s, int a3)
{
  if (__s)
  {
    uint64_t v4 = (uint64_t)result;
    if (a3 == -1) {
      a3 = strlen(__s);
    }
    int v5 = a3 + 1;
    uprv_free(*(void **)(v4 + 32));
    int v6 = (char *)uprv_malloc(v5);
    *(void *)(v4 + 32) = v6;
    return strncpy(v6, __s, v5);
  }
  return result;
}

BOOL sub_18C9404A4(uint64_t a1)
{
  return *(void *)(a1 + 40) != 0;
}

unsigned __int8 **sub_18C9404B4(unsigned __int8 **result, int a2)
{
  LODWORD(v2) = *((_DWORD *)result + 12);
  if (!a2) {
    goto LABEL_18;
  }
  if ((int)v2 < 1) {
    goto LABEL_24;
  }
  uint64_t v3 = 0;
  signed int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
  do
  {
    int v9 = result[5][v3];
    if (v9 != 60 || (v6 & 1) != 0)
    {
      if ((v9 != 123) | v7 & 1)
      {
        if (((v7 | v6) & 1) == 0)
        {
          int v6 = 0;
          int v7 = 0;
          (*result)[v8++] = v9;
          LODWORD(v2) = *((_DWORD *)result + 12);
        }
      }
      else
      {
        int v7 = 0;
        v4 += v6 & 1;
        ++v5;
        int v6 = 1;
      }
    }
    else
    {
      int v6 = 0;
      v4 += v7 & 1;
      ++v5;
      int v7 = 1;
    }
    BOOL v10 = v9 != 62;
    BOOL v11 = v9 != 125;
    if (++v3 >= (int)v2) {
      break;
    }
    v7 &= v10;
    v6 &= v11;
  }
  while (v8 < 0x2000);
  *((_DWORD *)result + 2) = v8;
  if (v5 < 5 || (int)(v5 / 5u) < v4)
  {
LABEL_18:
    if ((int)v2 >= 1) {
      goto LABEL_19;
    }
LABEL_24:
    LODWORD(v2) = 0;
LABEL_25:
    *((_DWORD *)result + 2) = v2;
    goto LABEL_26;
  }
  if (v8 <= 99 && (int)v2 > 600)
  {
LABEL_19:
    uint64_t v12 = 0;
    if ((int)v2 >= 0x2000) {
      uint64_t v2 = 0x2000;
    }
    else {
      uint64_t v2 = v2;
    }
    do
    {
      (*result)[v12] = result[5][v12];
      ++v12;
    }
    while (v2 != v12);
    goto LABEL_25;
  }
LABEL_26:
  unint64_t v13 = result[2];
  *((_OWORD *)v13 + 30) = 0u;
  *((_OWORD *)v13 + 31) = 0u;
  *((_OWORD *)v13 + 28) = 0u;
  *((_OWORD *)v13 + 29) = 0u;
  *((_OWORD *)v13 + 26) = 0u;
  *((_OWORD *)v13 + 27) = 0u;
  *((_OWORD *)v13 + 24) = 0u;
  *((_OWORD *)v13 + 25) = 0u;
  *((_OWORD *)v13 + 22) = 0u;
  *((_OWORD *)v13 + 23) = 0u;
  *((_OWORD *)v13 + 20) = 0u;
  *((_OWORD *)v13 + 21) = 0u;
  *((_OWORD *)v13 + 18) = 0u;
  *((_OWORD *)v13 + 19) = 0u;
  *((_OWORD *)v13 + 16) = 0u;
  *((_OWORD *)v13 + 17) = 0u;
  *((_OWORD *)v13 + 14) = 0u;
  *((_OWORD *)v13 + 15) = 0u;
  *((_OWORD *)v13 + 12) = 0u;
  *((_OWORD *)v13 + 13) = 0u;
  *((_OWORD *)v13 + 10) = 0u;
  *((_OWORD *)v13 + 11) = 0u;
  *((_OWORD *)v13 + 8) = 0u;
  *((_OWORD *)v13 + 9) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *(_OWORD *)unint64_t v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  uint64_t v14 = *((unsigned int *)result + 2);
  int v15 = result[2];
  if ((int)v14 >= 1)
  {
    unsigned int v16 = *result;
    do
    {
      int v17 = *v16++;
      ++*(_WORD *)&v15[2 * v17];
      --v14;
    }
    while (v14);
  }
  *((unsigned char *)result + 25) = 1;
  for (unint64_t i = 1; i != 256; ++i)
  {
    if (*(_WORD *)&v15[2 * i])
    {
      BOOL v19 = i >= 0x20 || (i - 11) >= 0xFFFFFFFE;
      BOOL v20 = v19 || i == 13;
      BOOL v21 = !v20;
      if (i > 0x7E || v21)
      {
        *((unsigned char *)result + 25) = 0;
        if ((i & 0x7FFFFFE0) == 0x80) {
          *((unsigned char *)result + 24) = 1;
        }
      }
    }
  }
  if (*(__int16 *)v15 > 1) {
    *((unsigned char *)result + 25) = 0;
  }
  return result;
}

const char *icu::IslamicCalendar::getType(icu::IslamicCalendar *this)
{
  return "islamic";
}

uint64_t *icu::IslamicCalendar::clone@<X0>(icu::IslamicCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    uint64_t result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *uint64_t result = (uint64_t)&unk_1EDA4D188;
  }
  return result;
}

icu::IslamicCalendar *icu::IslamicCalendar::IslamicCalendar(icu::IslamicCalendar *this, char **a2, UErrorCode *a3)
{
  int v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  icu::Calendar::Calendar(this, v6, (const icu::Locale *)a2, a3);
  *(void *)this = &unk_1EDA4D188;
  icu::IslamicCalendar::setLocation((icu::IslamicCalendar *)((char *)a2 + 26), (char *)a3, v7);
  icu::Calendar::getNow(v8);
  icu::Calendar::setTimeInMillis((uint64_t)this, v9, a3);
  return this;
}

void icu::IslamicCalendar::setLocation(icu::IslamicCalendar *this, char *a2, UErrorCode *a3)
{
  umtx_lock((atomic_ullong *)&unk_1E9192380);
  int v7 = (icu::CalendarAstronomer *)qword_1E9192328;
  if (!qword_1E9192328)
  {
    int v8 = (icu::CalendarAstronomer *)icu::UMemory::operator new(v6, (icu::UMemory *)0x88, v5);
    if (v8) {
      int v8 = (icu::CalendarAstronomer *)icu::CalendarAstronomer::CalendarAstronomer(v8);
    }
    else {
      *(_DWORD *)a2 = 7;
    }
    qword_1E9192328 = (uint64_t)v8;
    sub_18CA0A25C(8u, (uint64_t)sub_18C940B10);
    int v7 = (icu::CalendarAstronomer *)qword_1E9192328;
  }
  icu::CalendarAstronomer::setLocation(v7, (char *)this);

  umtx_unlock((std::mutex **)&unk_1E9192380);
}

void icu::IslamicCalendar::~IslamicCalendar(icu::IslamicCalendar *this)
{
  icu::Calendar::~Calendar(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::IslamicCalendar::handleGetLimit(uint64_t a1, int a2, int a3)
{
  return dword_18CA93DF4[4 * a2 + a3];
}

BOOL icu::IslamicCalendar::civilLeapYear(icu::IslamicCalendar *this)
{
  return (11 * (int)this + 14) % 30 < 11;
}

uint64_t icu::IslamicCalendar::yearStart(icu::IslamicCalendar *this, int a2)
{
  return icu::IslamicCalendar::trueMonthStart(this, 12 * a2 - 12);
}

uint64_t icu::IslamicCalendar::trueMonthStart(icu::IslamicCalendar *this, signed int a2)
{
  int v11 = 0;
  unsigned int v3 = sub_18C8CF440((uint64_t **)&qword_1E91922D0, a2, &v11);
  if (!v3)
  {
    double v4 = uprv_floor(29.5305889 * (double)a2) * 86400000.0 + -4.25215872e13;
    icu::IslamicCalendar::moonAge((icu::IslamicCalendar *)&v11, v4, v5);
    if (v11 <= 0)
    {
      if (v7 >= 0.0)
      {
        while (1)
        {
          double v4 = v4 + -86400000.0;
          icu::IslamicCalendar::moonAge((icu::IslamicCalendar *)&v11, v4, v6);
          if (v11 > 0) {
            break;
          }
          if (v10 < 0.0)
          {
LABEL_13:
            unsigned int v3 = sub_18C93E13C((uint64_t)((double)(uint64_t)v4 + 4.25215872e13), 86400000) + 1;
            sub_18C8CF4E0((uint64_t **)&qword_1E91922D0, a2, v3, &v11);
            goto LABEL_4;
          }
        }
      }
      else
      {
        while (1)
        {
          double v4 = v4 + 86400000.0;
          icu::IslamicCalendar::moonAge((icu::IslamicCalendar *)&v11, v4, v6);
          if (v11 > 0) {
            break;
          }
          if (v9 >= 0.0) {
            goto LABEL_13;
          }
        }
      }
    }
    unsigned int v3 = 0;
  }
LABEL_4:
  if (v11 <= 0) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t icu::IslamicCalendar::monthStart(icu::IslamicCalendar *this, int a2, int a3)
{
  return icu::IslamicCalendar::trueMonthStart(this, a3 + 12 * a2 - 12);
}

void icu::IslamicCalendar::moonAge(icu::IslamicCalendar *this, double a2, UErrorCode *a3)
{
  umtx_lock((atomic_ullong *)&unk_1E91922D8);
  double v7 = (icu::CalendarAstronomer *)qword_1E9192328;
  if (qword_1E9192328) {
    goto LABEL_4;
  }
  int v8 = (icu::CalendarAstronomer *)icu::UMemory::operator new(v6, (icu::UMemory *)0x88, v5);
  if (v8)
  {
    qword_1E9192328 = icu::CalendarAstronomer::CalendarAstronomer(v8);
    sub_18CA0A25C(8u, (uint64_t)sub_18C940B10);
    double v7 = (icu::CalendarAstronomer *)qword_1E9192328;
LABEL_4:
    icu::CalendarAstronomer::setTime(v7, a2);
    icu::CalendarAstronomer::getMoonAge((icu::CalendarAstronomer *)qword_1E9192328);
    umtx_unlock((std::mutex **)&unk_1E91922D8);
    return;
  }
  qword_1E9192328 = 0;
  *(_DWORD *)this = 7;
}

uint64_t sub_18C940B10()
{
  if (qword_1E91922D0)
  {
    (*(void (**)(uint64_t))(*(void *)qword_1E91922D0 + 8))(qword_1E91922D0);
    qword_1E91922D0 = 0;
  }
  if (qword_1E9192328)
  {
    icu::CalendarAstronomer::~CalendarAstronomer((icu::CalendarAstronomer *)qword_1E9192328);
    icu::UMemory::operator delete(v0);
    qword_1E9192328 = 0;
  }
  return 1;
}

void icu::IslamicCalendar::setLocation(icu::IslamicCalendar *this, double a2, double a3, UErrorCode *a4)
{
  umtx_lock((atomic_ullong *)&unk_1E9192330);
  uint64_t v9 = qword_1E9192328;
  if (!qword_1E9192328)
  {
    double v10 = (icu::CalendarAstronomer *)icu::UMemory::operator new(v8, (icu::UMemory *)0x88, v7);
    if (v10) {
      double v10 = (icu::CalendarAstronomer *)icu::CalendarAstronomer::CalendarAstronomer(v10);
    }
    else {
      *(_DWORD *)this = 7;
    }
    qword_1E9192328 = (uint64_t)v10;
    sub_18CA0A25C(8u, (uint64_t)sub_18C940B10);
    uint64_t v9 = qword_1E9192328;
  }
  icu::CalendarAstronomer::setLocation(v9, a2, a3);

  umtx_unlock((std::mutex **)&unk_1E9192330);
}

double icu::IslamicCalendar::getLocationLatitude(icu::IslamicCalendar *this, UErrorCode *a2)
{
  umtx_lock((atomic_ullong *)&unk_1E91923D0);
  if (!qword_1E9192328) {
    icu::IslamicCalendar::setLocation(this, 0.0, 0.0, v3);
  }
  umtx_unlock((std::mutex **)&unk_1E91923D0);
  double v4 = (icu::CalendarAstronomer *)qword_1E9192328;

  return icu::CalendarAstronomer::getLocationLatitude(v4);
}

double icu::IslamicCalendar::getLocationLongitude(icu::IslamicCalendar *this, UErrorCode *a2)
{
  umtx_lock((atomic_ullong *)&unk_1E9192420);
  if (!qword_1E9192328) {
    icu::IslamicCalendar::setLocation(this, 0.0, 0.0, v3);
  }
  umtx_unlock((std::mutex **)&unk_1E9192420);
  double v4 = (icu::CalendarAstronomer *)qword_1E9192328;

  return icu::CalendarAstronomer::getLocationLongitude(v4);
}

uint64_t icu::IslamicCalendar::handleGetMonthLength(icu::IslamicCalendar *this, int a2, int a3)
{
  int v3 = a3 + 12 * a2;
  signed int v4 = v3 - 12;
  unint64_t v5 = (icu::IslamicCalendar *)icu::IslamicCalendar::trueMonthStart(this, v3 - 11);
  return v5 - icu::IslamicCalendar::trueMonthStart(v5, v4);
}

uint64_t icu::IslamicCalendar::handleGetYearLength(icu::IslamicCalendar *this, int a2)
{
  signed int v2 = 12 * a2;
  signed int v3 = v2 - 12;
  signed int v4 = (icu::IslamicCalendar *)icu::IslamicCalendar::trueMonthStart(this, v2);
  return v4 - icu::IslamicCalendar::trueMonthStart(v4, v3);
}

uint64_t icu::IslamicCalendar::handleComputeMonthStart(icu::IslamicCalendar *this, int a2, int a3)
{
  unsigned int v4 = ~a3 / 0xCu;
  unsigned int v5 = a3 + 1 + 12 * v4 + 11;
  if (a3 < 0)
  {
    unsigned int v6 = ~v4 + a2;
  }
  else
  {
    unsigned int v5 = a3;
    unsigned int v6 = a2;
  }
  unsigned int v7 = a3 / 0xCu + a2;
  BOOL v8 = a3 < 12;
  if (a3 >= 12) {
    uint64_t v9 = a3 % 0xCu;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = v7;
  }
  int v11 = (*(uint64_t (**)(icu::IslamicCalendar *, uint64_t, uint64_t))(*(void *)this + 448))(this, v10, v9);
  return v11 + (*(unsigned int (**)(icu::IslamicCalendar *))(*(void *)this + 456))(this) - 1;
}

uint64_t icu::IslamicCalendar::handleGetExtendedYear(icu::IslamicCalendar *this)
{
  if (icu::Calendar::newerField((uint64_t)this, 0x13u, 1u) == 19)
  {
    if (*((int *)this + 52) >= 1)
    {
      signed int v2 = (char *)this + 88;
      return *(unsigned int *)v2;
    }
  }
  else if (*((int *)this + 34) >= 1)
  {
    signed int v2 = (char *)this + 16;
    return *(unsigned int *)v2;
  }
  return 1;
}

void icu::IslamicCalendar::handleComputeFields(icu::IslamicCalendar *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v5 = a2 - (*(uint64_t (**)(icu::IslamicCalendar *))(*(void *)this + 456))(this);
    int v6 = (int)uprv_floor((double)v5 / 29.5305889);
    double v7 = uprv_floor(29.5305889 * (double)v6);
    icu::IslamicCalendar::moonAge((icu::IslamicCalendar *)a3, *((double *)this + 29), v8);
    if (*(int *)a3 < 1)
    {
      if (v10 <= 0.0 || v5 - (int)v7 <= 24) {
        int v12 = v6;
      }
      else {
        int v12 = v6 + 1;
      }
      int v13 = v12 + 2;
      do
      {
        uint64_t v9 = (icu::IslamicCalendar *)icu::IslamicCalendar::trueMonthStart(v9, v13 - 2);
        --v13;
      }
      while ((int)v9 > v5);
      int v14 = v13 - 1;
      if (v13 - 1 < 0) {
        uint64_t v15 = -(-v13 / 0xCu);
      }
      else {
        uint64_t v15 = v14 / 0xCu + 1;
      }
      unsigned int v16 = v14 % 12;
      if (v16 <= 0xFFFFFFF3) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = v16 + 12;
      }
      int v18 = v5 + 1;
      int v19 = v18
          - (*(uint64_t (**)(icu::IslamicCalendar *, uint64_t, uint64_t))(*(void *)this + 448))(this, v15, v17);
      int v20 = (*(uint64_t (**)(icu::IslamicCalendar *, uint64_t, void))(*(void *)this + 448))(this, v15, 0);
      *((unsigned char *)this + 108) = 1;
      *((_DWORD *)this + 3) = 0;
      *((_DWORD *)this + 4) = v15;
      *(void *)((char *)this + 132) = 0x100000001;
      *(_WORD *)((char *)this + 109) = 257;
      *((_DWORD *)this + 22) = v15;
      *((_DWORD *)this + 52) = 1;
      *((unsigned char *)this + 127) = 1;
      *((_DWORD *)this + 5) = v17;
      *((_DWORD *)this + 35) = 1;
      *((_DWORD *)this + 26) = v17;
      *((_DWORD *)this + 56) = 1;
      *((unsigned char *)this + 131) = 1;
      *(_WORD *)((char *)this + 113) = 257;
      *((_DWORD *)this + 8) = v19;
      *((_DWORD *)this + 9) = v18 - v20;
      *((void *)this + 19) = 0x100000001;
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
}

uint64_t icu::IslamicCalendar::getEpoc(icu::IslamicCalendar *this)
{
  return 1948440;
}

uint64_t icu::IslamicCalendar::getRelatedYear(icu::IslamicCalendar *this, UErrorCode *a2)
{
  int v3 = icu::Calendar::get(this, 0x13u, a2);
  if (*(int *)a2 > 0) {
    return 0;
  }
  unsigned int v5 = ((__PAIR64__(2 * ((1396 - v3) / 0x43u), (1396 - v3) % 0x43u) - 34) >> 32) + 2;
  if ((v3 - 1397) % 0x43u <= 0x20) {
    int v6 = 0;
  }
  else {
    int v6 = -1;
  }
  if (v3 >= 1397) {
    unsigned int v5 = v6 - 2 * ((v3 - 1397) / 0x43u);
  }
  return v3 + v5 + 579;
}

unsigned char *icu::IslamicCalendar::setRelatedYear(icu::IslamicCalendar *this, int a2)
{
  unsigned int v2 = ((1976 - a2) % 0x41u < 0x21) - 2 * ((1976 - a2) / 0x41u) - 2;
  if (a2 >= 1977) {
    unsigned int v2 = ((a2 - 1977) % 0x41u > 0x1F) | (2 * ((a2 - 1977) / 0x41u));
  }
  return icu::Calendar::set(this, 0x13u, a2 + v2 - 579);
}

uint64_t icu::IslamicCalendar::haveDefaultCentury(icu::IslamicCalendar *this)
{
  return 1;
}

double icu::IslamicCalendar::defaultCenturyStart(icu::IslamicCalendar *this)
{
  if (atomic_load_explicit(dword_1EB20B750, memory_order_acquire) != 2)
  {
    inited = (icu::IslamicCalendar *)icu::umtx_initImplPreInit(dword_1EB20B750);
    if (inited)
    {
      icu::IslamicCalendar::initializeSystemDefaultCentury(inited);
      icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B750);
    }
  }
  return *(double *)&qword_1EB20A750;
}

void icu::IslamicCalendar::initializeSystemDefaultCentury(icu::IslamicCalendar *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  UErrorCode v3 = U_ZERO_ERROR;
  bzero(v5, 0x270uLL);
  icu::Locale::Locale((icu::Locale *)v4, "@calendar=islamic-civil", 0, 0, 0);
  icu::IslamicCalendar::IslamicCalendar((icu::IslamicCalendar *)v5, v4, &v3);
  icu::Locale::~Locale((icu::Locale *)v4);
  if (v3 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v1);
    icu::Calendar::setTimeInMillis((uint64_t)v5, v2, &v3);
    icu::Calendar::add(v5, 1u, -80, &v3);
    qword_1EB20A750 = icu::Calendar::getTimeInMillis((icu::Calendar *)v5, &v3);
    dword_1EB20A758 = icu::Calendar::get(v5, 1u, &v3);
  }
  icu::Calendar::~Calendar((icu::Calendar *)v5);
}

uint64_t icu::IslamicCalendar::defaultCenturyStartYear(icu::IslamicCalendar *this)
{
  if (atomic_load_explicit(dword_1EB20B750, memory_order_acquire) != 2)
  {
    inited = (icu::IslamicCalendar *)icu::umtx_initImplPreInit(dword_1EB20B750);
    if (inited)
    {
      icu::IslamicCalendar::initializeSystemDefaultCentury(inited);
      icu::umtx_initImplPostInit((unsigned int *)dword_1EB20B750);
    }
  }
  return dword_1EB20A758;
}

BOOL icu::IslamicCalendar::inTemporalLeapYear(icu::IslamicCalendar *this, UErrorCode *a2)
{
  int v3 = (*(uint64_t (**)(icu::IslamicCalendar *, uint64_t, UErrorCode *))(*(void *)this + 176))(this, 6, a2);
  return *(int *)a2 < 1 && v3 == 355;
}

icu::IslamicCalendar *icu::IslamicCivilCalendar::IslamicCivilCalendar(icu::IslamicCivilCalendar *this, char **a2, UErrorCode *a3)
{
  uint64_t result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(void *)uint64_t result = &unk_1EDA4D368;
  return result;
}

{
  icu::IslamicCalendar *result;

  uint64_t result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(void *)uint64_t result = &unk_1EDA4D368;
  return result;
}

void icu::IslamicCivilCalendar::~IslamicCivilCalendar(icu::IslamicCivilCalendar *this)
{
  icu::Calendar::~Calendar(this);

  icu::UMemory::operator delete(v1);
}

const char *icu::IslamicCivilCalendar::getType(icu::IslamicCivilCalendar *this)
{
  return "islamic-civil";
}

uint64_t *icu::IslamicCivilCalendar::clone@<X0>(icu::IslamicCivilCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    uint64_t result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *uint64_t result = (uint64_t)&unk_1EDA4D368;
  }
  return result;
}

uint64_t icu::IslamicCivilCalendar::yearStart(icu::IslamicCivilCalendar *this, int a2)
{
  return sub_18C93E13C(11 * a2 + 3, 30) + 354 * a2 - 354;
}

uint64_t icu::IslamicCivilCalendar::monthStart(icu::IslamicCivilCalendar *this, int a2, int a3)
{
  double v4 = uprv_ceil((double)a3 * 29.5) + (double)(354 * a2 - 354);
  return (int)(v4 + (double)(int)sub_18C93E13C(11 * a2 + 3, 30));
}

uint64_t icu::IslamicCivilCalendar::handleGetMonthLength(icu::IslamicCivilCalendar *this, int a2, int a3)
{
  int v3 = (a3 + 1) & 1;
  if (a3 < -1) {
    int v3 = -v3;
  }
  uint64_t result = (v3 + 29);
  if (a3 == 11)
  {
    unsigned int v5 = v3 + 30;
    if ((11 * a2 + 14) % 30 <= 10) {
      return v5;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t icu::IslamicCivilCalendar::handleGetYearLength(icu::IslamicCivilCalendar *this, int a2)
{
  return ((11 * a2 + 14) % 30 < 11) | 0x162u;
}

double icu::IslamicCivilCalendar::handleComputeFields(icu::IslamicCivilCalendar *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v4 = a2 - (*(uint64_t (**)(icu::IslamicCivilCalendar *))(*(void *)this + 456))(this);
    uint64_t v5 = sub_18C93E13C(30 * v4 + 10646, 10631);
    int v6 = (*(uint64_t (**)(icu::IslamicCivilCalendar *, uint64_t))(*(void *)this + 440))(this, v5);
    int v7 = (int)uprv_ceil((double)(v4 - v6 - 29) / 29.5);
    if (v7 >= 11) {
      uint64_t v8 = 11;
    }
    else {
      uint64_t v8 = v7;
    }
    int v9 = v4 + 1;
    int v10 = v9
        - (*(uint64_t (**)(icu::IslamicCivilCalendar *, uint64_t, uint64_t))(*(void *)this + 448))(this, v5, v8);
    int v11 = (*(uint64_t (**)(icu::IslamicCivilCalendar *, uint64_t, void))(*(void *)this + 448))(this, v5, 0);
    *((unsigned char *)this + 108) = 1;
    *((_DWORD *)this + 3) = 0;
    *((_DWORD *)this + 4) = v5;
    *(void *)&double result = 0x100000001;
    *(void *)((char *)this + 132) = 0x100000001;
    *(_WORD *)((char *)this + 109) = 257;
    *((_DWORD *)this + 22) = v5;
    *((_DWORD *)this + 52) = 1;
    *((unsigned char *)this + 127) = 1;
    *((_DWORD *)this + 5) = v8;
    *((_DWORD *)this + 35) = 1;
    *((_DWORD *)this + 26) = v8;
    *((_DWORD *)this + 56) = 1;
    *((unsigned char *)this + 131) = 1;
    *(_WORD *)((char *)this + 113) = 257;
    *((_DWORD *)this + 8) = v10;
    *((_DWORD *)this + 9) = v9 - v11;
    *((void *)this + 19) = 0x100000001;
  }
  return result;
}

icu::IslamicCalendar *icu::IslamicTBLACalendar::IslamicTBLACalendar(icu::IslamicTBLACalendar *this, char **a2, UErrorCode *a3)
{
  double result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(void *)double result = &unk_1EDA4D548;
  return result;
}

{
  icu::IslamicCalendar *result;

  double result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(void *)double result = &unk_1EDA4D548;
  return result;
}

void icu::IslamicTBLACalendar::~IslamicTBLACalendar(icu::IslamicTBLACalendar *this)
{
  icu::Calendar::~Calendar(this);

  icu::UMemory::operator delete(v1);
}

const char *icu::IslamicTBLACalendar::getType(icu::IslamicTBLACalendar *this)
{
  return "islamic-tbla";
}

uint64_t *icu::IslamicTBLACalendar::clone@<X0>(icu::IslamicTBLACalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    double result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *double result = (uint64_t)&unk_1EDA4D548;
  }
  return result;
}

uint64_t icu::IslamicTBLACalendar::getEpoc(icu::IslamicTBLACalendar *this)
{
  return 1948439;
}

icu::IslamicCalendar *icu::IslamicUmalquraCalendar::IslamicUmalquraCalendar(icu::IslamicUmalquraCalendar *this, char **a2, UErrorCode *a3)
{
  double result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(void *)double result = &unk_1EDA4D728;
  return result;
}

{
  icu::IslamicCalendar *result;

  double result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(void *)double result = &unk_1EDA4D728;
  return result;
}

void icu::IslamicUmalquraCalendar::~IslamicUmalquraCalendar(icu::IslamicUmalquraCalendar *this)
{
  icu::Calendar::~Calendar(this);

  icu::UMemory::operator delete(v1);
}

const char *icu::IslamicUmalquraCalendar::getType(icu::IslamicUmalquraCalendar *this)
{
  return "islamic-umalqura";
}

uint64_t *icu::IslamicUmalquraCalendar::clone@<X0>(icu::IslamicUmalquraCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    double result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *double result = (uint64_t)&unk_1EDA4D728;
  }
  return result;
}

uint64_t icu::IslamicUmalquraCalendar::yearStart(icu::IslamicUmalquraCalendar *this, int a2)
{
  if ((a2 - 1601) > 0xFFFFFED2) {
    return (byte_18CA93F74[a2 - 1300] + (int)((double)(a2 - 1300) * 354.3672 + 460322.05 + 0.5));
  }
  else {
    return sub_18C93E13C(11 * a2 + 3, 30) + 354 * a2 - 354;
  }
}

uint64_t icu::IslamicUmalquraCalendar::monthStart(icu::IslamicUmalquraCalendar *this, uint64_t a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(icu::IslamicUmalquraCalendar *))(*(void *)this + 440))(this);
  if (a3 >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v6 = (*(unsigned int (**)(icu::IslamicUmalquraCalendar *, uint64_t, uint64_t))(*(void *)this + 312))(this, a2, v7)+ v6;
      uint64_t v7 = (v7 + 1);
    }
    while (a3 != v7);
  }
  return v6;
}

uint64_t icu::IslamicUmalquraCalendar::handleGetMonthLength(icu::IslamicUmalquraCalendar *this, int a2, int a3)
{
  if ((a2 - 1601) > 0xFFFFFED2)
  {
    if ((dword_18CA93940[a2 - 1300] >> (11 - a3))) {
      return 30;
    }
    else {
      return 29;
    }
  }
  else
  {
    int v3 = (a3 + 1) & 1;
    if (a3 < -1) {
      int v3 = -v3;
    }
    uint64_t result = (v3 + 29);
    if (a3 == 11)
    {
      unsigned int v5 = v3 + 30;
      if ((11 * a2 + 14) % 30 <= 10) {
        return v5;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t icu::IslamicUmalquraCalendar::handleGetYearLength(icu::IslamicUmalquraCalendar *this, uint64_t a2)
{
  if ((a2 - 1601) < 0xFFFFFED3) {
    return ((11 * (int)a2 + 14) % 30 < 11) | 0x162u;
  }
  uint64_t v5 = 0;
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = (*(unsigned int (**)(icu::IslamicUmalquraCalendar *, uint64_t, uint64_t))(*(void *)this + 312))(this, a2, v5)+ v3;
    uint64_t v5 = (v5 + 1);
  }
  while (v5 != 12);
  return v3;
}

double icu::IslamicUmalquraCalendar::handleComputeFields(icu::IslamicUmalquraCalendar *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v4 = a2 - (*(uint64_t (**)(icu::IslamicUmalquraCalendar *))(*(void *)this + 456))(this);
    if (v4 >= (*(int (**)(icu::IslamicUmalquraCalendar *, uint64_t))(*(void *)this + 440))(this, 1300))
    {
      uint64_t v5 = 1299;
      uint64_t v9 = 1;
      do
      {
        if (v9 < 1) {
          goto LABEL_11;
        }
        uint64_t v5 = (v5 + 1);
        int v10 = v4
            - (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t))(*(void *)this + 440))(this, v5);
        int v11 = v10 + 1;
        if (v10 + 1 == (*(unsigned int (**)(icu::IslamicUmalquraCalendar *, uint64_t))(*(void *)this + 320))(this, v5))
        {
          uint64_t v8 = 11;
          goto LABEL_15;
        }
        uint64_t v9 = v11;
      }
      while (v11 >= (*(int (**)(icu::IslamicUmalquraCalendar *, uint64_t))(*(void *)this + 320))(this, v5));
      int v12 = (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t, void))(*(void *)this + 312))(this, v5, 0);
      if (v10 < v12)
      {
LABEL_11:
        uint64_t v8 = 0;
        goto LABEL_15;
      }
      LODWORD(v8) = 0;
      uint64_t v13 = v12;
      do
      {
        v9 -= v13;
        uint64_t v8 = (v8 + 1);
        uint64_t v13 = (*(int (**)(icu::IslamicUmalquraCalendar *, uint64_t, uint64_t))(*(void *)this + 312))(this, v5, v8);
      }
      while (v9 > v13);
    }
    else
    {
      uint64_t v5 = sub_18C93E13C(30 * v4 + 10646, 10631);
      int v6 = (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t))(*(void *)this + 440))(this, v5);
      int v7 = (int)uprv_ceil((double)(v4 - v6 - 29) / 29.5);
      if (v7 >= 11) {
        uint64_t v8 = 11;
      }
      else {
        uint64_t v8 = v7;
      }
    }
LABEL_15:
    int v14 = v4 + 1;
    int v15 = v14
        - (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t, uint64_t))(*(void *)this + 448))(this, v5, v8);
    int v16 = (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t, void))(*(void *)this + 448))(this, v5, 0);
    *((unsigned char *)this + 108) = 1;
    *((_DWORD *)this + 3) = 0;
    *((_DWORD *)this + 4) = v5;
    *(void *)&double result = 0x100000001;
    *(void *)((char *)this + 132) = 0x100000001;
    *(_WORD *)((char *)this + 109) = 257;
    *((_DWORD *)this + 22) = v5;
    *((_DWORD *)this + 52) = 1;
    *((unsigned char *)this + 127) = 1;
    *((_DWORD *)this + 5) = v8;
    *((_DWORD *)this + 35) = 1;
    *((_DWORD *)this + 26) = v8;
    *((_DWORD *)this + 56) = 1;
    *((unsigned char *)this + 131) = 1;
    *(_WORD *)((char *)this + 113) = 257;
    *((_DWORD *)this + 8) = v15;
    *((_DWORD *)this + 9) = v14 - v16;
    *((void *)this + 19) = 0x100000001;
  }
  return result;
}

icu::IslamicCalendar *icu::IslamicRGSACalendar::IslamicRGSACalendar(icu::IslamicRGSACalendar *this, char **a2, UErrorCode *a3)
{
  double result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(void *)double result = &unk_1EDA4D908;
  return result;
}

{
  icu::IslamicCalendar *result;

  double result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(void *)double result = &unk_1EDA4D908;
  return result;
}

void icu::IslamicRGSACalendar::~IslamicRGSACalendar(icu::IslamicRGSACalendar *this)
{
  icu::Calendar::~Calendar(this);

  icu::UMemory::operator delete(v1);
}

const char *icu::IslamicRGSACalendar::getType(icu::IslamicRGSACalendar *this)
{
  return "islamic-rgsa";
}

uint64_t *icu::IslamicRGSACalendar::clone@<X0>(icu::IslamicRGSACalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    double result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *double result = (uint64_t)&unk_1EDA4D908;
  }
  return result;
}

void *icu::IslamicCalendar::getStaticClassID(icu::IslamicCalendar *this)
{
  return &unk_1E9192470;
}

void *icu::IslamicCalendar::getDynamicClassID(icu::IslamicCalendar *this)
{
  return &unk_1E9192470;
}

void *icu::IslamicCivilCalendar::getStaticClassID(icu::IslamicCivilCalendar *this)
{
  return &unk_1E9192471;
}

void *icu::IslamicCivilCalendar::getDynamicClassID(icu::IslamicCivilCalendar *this)
{
  return &unk_1E9192471;
}

void *icu::IslamicUmalquraCalendar::getStaticClassID(icu::IslamicUmalquraCalendar *this)
{
  return &unk_1E9192472;
}

void *icu::IslamicUmalquraCalendar::getDynamicClassID(icu::IslamicUmalquraCalendar *this)
{
  return &unk_1E9192472;
}

void *icu::IslamicTBLACalendar::getStaticClassID(icu::IslamicTBLACalendar *this)
{
  return &unk_1E9192473;
}

void *icu::IslamicTBLACalendar::getDynamicClassID(icu::IslamicTBLACalendar *this)
{
  return &unk_1E9192473;
}

void *icu::IslamicRGSACalendar::getStaticClassID(icu::IslamicRGSACalendar *this)
{
  return &unk_1E9192474;
}

void *icu::IslamicRGSACalendar::getDynamicClassID(icu::IslamicRGSACalendar *this)
{
  return &unk_1E9192474;
}

void *icu::ISO8601Calendar::getStaticClassID(icu::ISO8601Calendar *this)
{
  return &unk_1E9192478;
}

void *sub_18C942194()
{
  return &unk_1E9192478;
}

icu::GregorianCalendar *sub_18C9421A0(icu::GregorianCalendar *a1, char **a2, UErrorCode *a3)
{
  *(void *)icu::GregorianCalendar::GregorianCalendar(a1, a2, a3) = &unk_1EDA4DB60;
  UErrorCode v8 = U_ZERO_ERROR;
  int KeywordValue = icu::Locale::getKeywordValue(a2, "fw", 0, 0, &v8);
  if (v8 <= U_ZERO_ERROR && KeywordValue == 0) {
    icu::Calendar::setFirstDayOfWeek((uint64_t)a1, 2);
  }
  icu::Calendar::setMinimalDaysInFirstWeek((uint64_t)a1, 4u);
  return a1;
}

void sub_18C942240(icu::GregorianCalendar *a1)
{
  icu::GregorianCalendar::~GregorianCalendar(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C942268(const icu::GregorianCalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = (icu::GregorianCalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x290, a2);
  if (v4)
  {
    icu::GregorianCalendar::GregorianCalendar(v4, a1);
    void *v5 = &unk_1EDA4DB60;
  }
}

const char *sub_18C9422B8()
{
  return "iso8601";
}

void *icu::JapaneseCalendar::getStaticClassID(icu::JapaneseCalendar *this)
{
  return &unk_1E9192480;
}

void *sub_18C9422D0()
{
  return &unk_1E9192480;
}

char *icu::JapaneseCalendar::enableTentativeEra(icu::JapaneseCalendar *this)
{
  double result = getenv("ICU_ENABLE_TENTATIVE_ERA");
  if (result) {
    return (char *)(uprv_stricmp(result, "true") == 0);
  }
  return result;
}

uint64_t icu::JapaneseCalendar::getCurrentEra(icu::JapaneseCalendar *this)
{
  return dword_1E9192484;
}

icu::GregorianCalendar *sub_18C942320(icu::GregorianCalendar *a1, char **a2, UErrorCode *a3)
{
  *(void *)icu::GregorianCalendar::GregorianCalendar(a1, a2, a3) = &unk_1EDA4DD60;
  sub_18C942380((icu::JapaneseCalendar *)a3);
  icu::Calendar::getNow(v5);
  icu::Calendar::setTimeInMillis((uint64_t)a1, v6, a3);
  return a1;
}

void sub_18C942380(icu::JapaneseCalendar *a1)
{
  if (*(int *)a1 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192490, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192490))
    {
      if (dword_1E9192494 >= 1) {
        *(_DWORD *)a1 = dword_1E9192494;
      }
    }
    else
    {
      sub_18C942A7C(a1);
      dword_1E9192494 = *(_DWORD *)a1;
      icu::umtx_initImplPostInit(&dword_1E9192490);
    }
  }

  sub_18CA0A25C(7u, (uint64_t)sub_18C942AD4);
}

void sub_18C942430(icu::GregorianCalendar *a1)
{
  icu::GregorianCalendar::~GregorianCalendar(a1);

  icu::UMemory::operator delete(v1);
}

icu::GregorianCalendar *sub_18C942458@<X0>(const icu::GregorianCalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = (icu::GregorianCalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x290, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    icu::GregorianCalendar::GregorianCalendar(v4, a1);
    *(void *)uint64_t v5 = &unk_1EDA4DD60;
    int v7 = 0;
    sub_18C942380((icu::JapaneseCalendar *)&v7);
  }
  return v5;
}

const char *sub_18C9424C8()
{
  return "japanese";
}

uint64_t sub_18C9424D4(uint64_t a1, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 440))(a1);
  v5[3] = U_ZERO_ERROR;
  *(void *)&v5[1] = 0;
  v5[0] = U_ZERO_ERROR;
  icu::EraRules::getStartDate(qword_1E9192488, v3, (int (*)[3])&v5[1], v5);
  if (v5[1] == a2) {
    return (v5[2] - 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_18C942588(uint64_t a1, int a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 440))(a1);
  v7[3] = U_ZERO_ERROR;
  *(void *)&v7[1] = 0;
  v7[0] = U_ZERO_ERROR;
  icu::EraRules::getStartDate(qword_1E9192488, v5, (int (*)[3])&v7[1], v7);
  if (v7[1] == a2 && v7[2] - 1 == a3) {
    return v7[3];
  }
  else {
    return 1;
  }
}

uint64_t sub_18C942658(uint64_t a1)
{
  if (*(int *)(a1 + 132) <= 0) {
    double v1 = &dword_1E9192484;
  }
  else {
    double v1 = (int *)(a1 + 12);
  }
  return *v1;
}

uint64_t sub_18C942678(_DWORD *a1)
{
  if (icu::Calendar::newerField((uint64_t)a1, 0x13u, 1u) == 19
    && icu::Calendar::newerField((uint64_t)a1, 0x13u, 0) == 19)
  {
    if ((int)a1[52] < 1) {
      return 1970;
    }
    else {
      return a1[22];
    }
  }
  else
  {
    UErrorCode v6 = U_ZERO_ERROR;
    if ((int)a1[33] <= 0) {
      unsigned int v3 = (unsigned int *)&dword_1E9192484;
    }
    else {
      unsigned int v3 = a1 + 3;
    }
    int StartYear = icu::EraRules::getStartYear((icu::EraRules *)qword_1E9192488, *v3, &v6);
    if ((int)a1[34] < 1) {
      int v5 = 1;
    }
    else {
      int v5 = a1[4];
    }
    return (StartYear + v5 - 1);
  }
}

uint64_t sub_18C942738(uint64_t a1, int a2, UErrorCode *a3)
{
  icu::GregorianCalendar::handleComputeFields((_DWORD *)a1, a2, a3);
  int v5 = *(_DWORD *)(a1 + 88);
  UErrorCode v6 = (icu::EraRules *)qword_1E9192488;
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1);
  unsigned int EraIndex = icu::EraRules::getEraIndex(v6, v5, v7 + 1, *(_DWORD *)(a1 + 32), a3);
  *(_DWORD *)(a1 + 12) = EraIndex;
  *(_DWORD *)(a1 + 132) = 1;
  *(unsigned char *)(a1 + 108) = 1;
  uint64_t result = icu::EraRules::getStartYear((icu::EraRules *)qword_1E9192488, EraIndex, a3);
  *(_DWORD *)(a1 + 16) = v5 - result + 1;
  *(_DWORD *)(a1 + 136) = 1;
  *(unsigned char *)(a1 + 109) = 1;
  return result;
}

uint64_t sub_18C9427F8()
{
  return 0;
}

double sub_18C942800()
{
  return 0.0;
}

uint64_t sub_18C942808()
{
  return 0;
}

uint64_t sub_18C942810(uint64_t a1, int a2, unsigned int a3)
{
  if (a2 == 1)
  {
    if (a3 - 3 > 1)
    {
      return 1;
    }
    else
    {
      UErrorCode v6 = U_ZERO_ERROR;
      int StartYear = icu::EraRules::getStartYear((icu::EraRules *)qword_1E9192488, dword_1E9192484, &v6);
      return icu::GregorianCalendar::handleGetLimit(a1, 1, 3) - StartYear;
    }
  }
  else if (a2)
  {
    return icu::GregorianCalendar::handleGetLimit(a1, a2, a3);
  }
  else if (a3 >= 2)
  {
    return (*(_DWORD *)(qword_1E9192488 + 8) - 1);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_18C9428D4(unsigned char *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2 == 1)
  {
    unsigned int v5 = icu::Calendar::get(a1, 0, a3);
    uint64_t result = 0;
    if (*(int *)a3 <= 0)
    {
      if (v5 == *(_DWORD *)(qword_1E9192488 + 8) - 1)
      {
        int v7 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 288);
        return v7(a1, 1, 3);
      }
      else
      {
        memset(v13, 0, sizeof(v13));
        icu::EraRules::getStartDate(qword_1E9192488, v5 + 1, (int (*)[3])v13, a3);
        int v8 = v13[0];
        int v9 = v13[1];
        int v10 = v13[2];
        unsigned int v11 = v8 - icu::EraRules::getStartYear((icu::EraRules *)qword_1E9192488, v5, a3);
        if (v9 == 1 && v10 == 1) {
          return v11;
        }
        else {
          return v11 + 1;
        }
      }
    }
  }
  else
  {
    return icu::GregorianCalendar::getActualMaximum((uint64_t)a1, a2, a3);
  }
  return result;
}

icu::EraRules *sub_18C942A7C(icu::JapaneseCalendar *a1)
{
  double v2 = icu::JapaneseCalendar::enableTentativeEra(a1);
  uint64_t result = icu::EraRules::createInstance((icu::EraRules *)"japanese", v2, (int *)a1, v3);
  qword_1E9192488 = (uint64_t)result;
  if (*(int *)a1 <= 0) {
    dword_1E9192484 = *((_DWORD *)result + 3);
  }
  return result;
}

uint64_t sub_18C942AD4()
{
  if (qword_1E9192488)
  {
    icu::EraRules::~EraRules((void **)qword_1E9192488);
    icu::UMemory::operator delete(v0);
    qword_1E9192488 = 0;
  }
  dword_1E9192484 = 0;
  atomic_store(0, &dword_1E9192490);
  return 1;
}

void sub_18C942B24(void **a1)
{
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::FormattedList::FormattedList(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_1EDA4DF60;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_1EDA4DF60;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::FormattedList::~FormattedList(icu::FormattedList *this)
{
  *(void *)this = &unk_1EDA4DF60;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;

  icu::FormattedValue::~FormattedValue(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::FormattedList::~FormattedList(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::FormattedList::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::FormattedList::toString(icu::FormattedList *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(void *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(void))(*(void *)v3 + 16))(*((void *)this + 1));
}

void icu::FormattedList::toTempString(icu::FormattedList *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(void *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(void))(*(void *)v3 + 24))(*((void *)this + 1));
}

icu::Appendable *icu::FormattedList::appendTo(icu::FormattedList *this, icu::Appendable *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return a2;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }
  return (icu::Appendable *)(*(uint64_t (**)(void, icu::Appendable *))(*(void *)v4 + 32))(*((void *)this + 1), a2);
}

uint64_t icu::FormattedList::nextPosition(icu::FormattedList *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return 0;
  }
  return (*(uint64_t (**)(void, icu::ConstrainedFieldPosition *))(*(void *)v4 + 40))(*((void *)this + 1), a2);
}

icu::ListFormatter *icu::ListFormatter::ListFormatter(icu::ListFormatter *this, const icu::ListFormatter *a2)
{
  *(void *)this = &unk_1EDA4DFA0;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  uint64_t v3 = (uint64_t *)*((void *)a2 + 1);
  if (v3)
  {
    unsigned int v5 = icu::UMemory::operator new(v3, (icu::UMemory *)0xA8, (unint64_t)a2);
    if (v5) {
      unsigned int v5 = (uint64_t *)sub_18C944770((uint64_t)v5, *((void *)a2 + 1));
    }
    *((void *)this + 1) = v5;
    *((void *)this + 2) = v5;
  }
  return this;
}

uint64_t icu::ListFormatter::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    if (v4)
    {
      uint64_t v5 = v4[19];
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v4 + 10));
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v4 + 1));
      icu::UMemory::operator delete(v4);
    }
    UErrorCode v6 = *(uint64_t **)(a2 + 8);
    if (v6)
    {
      int v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0xA8, a2);
      if (v7) {
        int v7 = (uint64_t *)sub_18C944770((uint64_t)v7, *(void *)(a2 + 8));
      }
      *(void *)(a1 + 8) = v7;
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      int v7 = *(uint64_t **)(a2 + 16);
    }
    *(void *)(a1 + 16) = v7;
  }
  return a1;
}

void *sub_18C942FD4(void *a1)
{
  uint64_t v2 = a1[19];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 10));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 1));
  return a1;
}

void icu::ListFormatter::initializeHash(icu::ListFormatter *this, UErrorCode *a2)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)this;
  if ((int)v2 <= 0)
  {
    uint64_t v4 = (int32x2_t *)icu::UMemory::operator new(v2, (icu::UMemory *)0x58, (unint64_t)a2);
    if (v4)
    {
      uint64_t v5 = (uint64_t *)v4;
      *uint64_t v4 = 0;
      uint64_t v6 = (uint64_t)&v4[1];
      int v7 = 0;
      uhash_init(v4 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, &v7);
      if (v7 <= 0)
      {
        uint64_t *v5 = v6;
        uhash_setKeyDeleter(v6, (uint64_t)uprv_deleteUObject);
      }
      qword_1EB20B758 = (uint64_t)v5;
      uhash_setValueDeleter(*v5, (uint64_t)sub_18C943128);
      sub_18CA0A25C(0x22u, (uint64_t)sub_18C9431A0);
    }
    else
    {
      qword_1EB20B758 = 0;
      *(_DWORD *)this = 7;
    }
  }
}

void sub_18C943128(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[19];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 10));
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 1));
    icu::UMemory::operator delete(a1);
  }
}

uint64_t sub_18C9431A0()
{
  unint64_t v0 = (void *)qword_1EB20B758;
  if (qword_1EB20B758)
  {
    if (*(void *)qword_1EB20B758) {
      uhash_close(*(unsigned char **)qword_1EB20B758);
    }
    icu::UMemory::operator delete(v0);
  }
  qword_1EB20B758 = 0;
  return 1;
}

void *icu::ListFormatter::getListFormatInternal(const char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 > 0) {
    return 0;
  }
  uint64_t v24 = 0;
  memset(&v23[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v20, this[5]);
  v23[0] = (char *)&v23[1] + 5;
  LODWORD(v23[1]) = 40;
  WORD2(v23[1]) = 0;
  LODWORD(v24) = 0;
  icu::CharString::append((icu::CharString *)v23, v20, v21, a3);
  int v8 = icu::CharString::append((icu::CharString *)v23, 58, a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v18, (const char *)a2);
  icu::CharString::append(v8, v18, v19, a3);
  memset(v22, 0, sizeof(v22));
  icu::UnicodeString::UnicodeString(v22, v23[0], 0xFFFFFFFFLL, 0);
  umtx_lock((atomic_ullong *)&unk_1EB20B760);
  int v10 = (uint64_t *)qword_1EB20B758;
  if (!qword_1EB20B758)
  {
    icu::ListFormatter::initializeHash((icu::ListFormatter *)a3, v9);
    if (*(int *)a3 > 0)
    {
LABEL_8:
      uint64_t v4 = 0;
      goto LABEL_14;
    }
    int v10 = (uint64_t *)qword_1EB20B758;
  }
  uint64_t v4 = (void *)uhash_get(*v10, (uint64_t)v22);
  umtx_unlock((std::mutex **)&unk_1EB20B760);
  if (v4) {
    goto LABEL_15;
  }
  ListFormatInternal = icu::ListFormatter::loadListFormatInternal((char **)this, a2, (char *)a3, v11);
  int v12 = (void *)*(unsigned int *)a3;
  if ((int)v12 > 0)
  {
    uint64_t v4 = 0;
    goto LABEL_15;
  }
  uint64_t v4 = ListFormatInternal;
  umtx_lock((atomic_ullong *)&unk_1EB20B760);
  uint64_t v14 = uhash_get(*(void *)qword_1EB20B758, (uint64_t)v22);
  if (v14)
  {
    int v15 = (void *)v14;
    if (v4)
    {
      int v16 = sub_18C942FD4(v4);
      icu::UMemory::operator delete(v16);
    }
    uint64_t v4 = v15;
    goto LABEL_14;
  }
  sub_18C7EF48C((uint64_t *)qword_1EB20B758, (UChar **)v22, (uint64_t)v4, (int *)a3);
  if (*(int *)a3 > 0) {
    goto LABEL_8;
  }
LABEL_14:
  umtx_unlock((std::mutex **)&unk_1EB20B760);
LABEL_15:
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v22);
  if (BYTE4(v23[1])) {
    uprv_free(v23[0]);
  }
  return v4;
}

uint64_t *icu::ListFormatter::loadListFormatInternal(char **this, const icu::Locale *a2, char *a3, UErrorCode *a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = ures_open(0, this[5], (int *)a3);
  uint64_t v8 = ures_getByKeyWithFallback(v7, "listPattern", v7, (UErrorCode *)a3);
  uint64_t v9 = v8;
  if (*(int *)a3 < 1)
  {
    uint64_t v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v33 = 0;
    long long v35 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v28 = 0;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v22 = 0u;
    uint64_t v23 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    int v18 = &unk_1EDA4DFC8;
    int v19 = &unk_1EDA47700;
    LOWORD(v20) = 2;
    uint64_t v24 = &unk_1EDA47700;
    LOWORD(v25) = 2;
    unint64_t v29 = &unk_1EDA47700;
    LOWORD(v30) = 2;
    int v34 = &unk_1EDA47700;
    LOWORD(v35) = 2;
    memset(v39, 0, sizeof(v39));
    strncpy(__dst, (const char *)a2, 0x18uLL);
    __dst[24] = 0;
    ures_getAllItemsWithFallback(v9, __dst, (uint64_t)&v18, (int *)a3);
    if (*(int *)a3 <= 0 && v39[0])
    {
      do
      {
        if (!strcmp(__dst, v39)) {
          break;
        }
        strcpy(__dst, v39);
        ures_getAllItemsWithFallback(v9, __dst, (uint64_t)&v18, (int *)a3);
      }
      while (*(int *)a3 <= 0 && v39[0] != 0);
    }
    ures_close(v9);
    if (*(int *)a3 > 0) {
      goto LABEL_12;
    }
    if ((unsigned __int16)v20 < 0x20u
      || (unsigned __int16)v25 < 0x20u
      || (unsigned __int16)v30 < 0x20u
      || (unsigned __int16)v35 <= 0x1Fu)
    {
      int v10 = 0;
      int v15 = 2;
    }
    else
    {
      uint64_t v13 = icu::UMemory::operator new((uint64_t *)(unsigned __int16)v35, (icu::UMemory *)0xA8, v12);
      int v10 = v13;
      if (v13)
      {
        sub_18C9447E4((uint64_t)v13, (uint64_t)&v19, (icu::UnicodeString *)&v24, (const icu::UnicodeString *)&v29, (uint64_t)&v34, (uint64_t)this, (UErrorCode *)a3);
        if (*(int *)a3 < 1) {
          goto LABEL_23;
        }
        uint64_t v14 = sub_18C942FD4(v10);
        icu::UMemory::operator delete(v14);
LABEL_12:
        int v10 = 0;
LABEL_23:
        sub_18C9436F4((uint64_t)&v18);
        return v10;
      }
      int v15 = 7;
    }
    *(_DWORD *)a3 = v15;
    goto LABEL_23;
  }
  ures_close(v8);
  return 0;
}

void sub_18C9436F4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4DFC8;
  uint64_t v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 200));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 136));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v2);

  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
}

void sub_18C94376C(uint64_t a1)
{
  sub_18C9436F4(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t *icu::ListFormatter::createInstance(UErrorCode *this, UErrorCode *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  memset(v6, 0, sizeof(v6));
  icu::Locale::Locale((icu::Locale *)v6);
  uint64_t Instance = icu::ListFormatter::createInstance((const char **)v6, (const icu::Locale *)"standard", this, v3);
  icu::Locale::~Locale((icu::Locale *)v6);
  return Instance;
}

uint64_t *icu::ListFormatter::createInstance(const char **this, UErrorCode *a2, UErrorCode *a3, UErrorCode *a4)
{
  return icu::ListFormatter::createInstance(this, (const icu::Locale *)"standard", a2, a4);
}

uint64_t *icu::ListFormatter::createInstance(const char **a1, int a2, unsigned int a3, UErrorCode *a4)
{
  if (a2 == 2)
  {
    if (a3 < 3)
    {
      uint64_t v4 = off_1E550BC68;
      return icu::ListFormatter::createInstance(a1, (const icu::Locale *)v4[a3], a4, a4);
    }
  }
  else if (a2 == 1)
  {
    if (a3 < 3)
    {
      uint64_t v4 = off_1E550BC50;
      return icu::ListFormatter::createInstance(a1, (const icu::Locale *)v4[a3], a4, a4);
    }
  }
  else if (!a2 && a3 < 3)
  {
    uint64_t v4 = off_1E550BC38;
    return icu::ListFormatter::createInstance(a1, (const icu::Locale *)v4[a3], a4, a4);
  }
  *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  return 0;
}

uint64_t *icu::ListFormatter::createInstance(const char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  ListFormatInternal = icu::ListFormatter::getListFormatInternal(this, a2, a3, a4);
  uint64_t v7 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v7 > 0) {
    return 0;
  }
  uint64_t v9 = ListFormatInternal;
  uint64_t result = icu::UMemory::operator new(v7, (icu::UMemory *)0x18, v6);
  if (result)
  {
    *uint64_t result = (uint64_t)&unk_1EDA4DFA0;
    result[1] = 0;
    result[2] = (uint64_t)v9;
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void *icu::ListFormatter::ListFormatter(void *result, uint64_t a2)
{
  *uint64_t result = &unk_1EDA4DFA0;
  result[1] = 0;
  result[2] = a2;
  return result;
}

{
  *uint64_t result = &unk_1EDA4DFA0;
  result[1] = 0;
  result[2] = a2;
  return result;
}

void *icu::ListFormatter::ListFormatter@<X0>(void *a1@<X0>, unint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  *a1 = &unk_1EDA4DFA0;
  uint64_t v7 = icu::UMemory::operator new(a4, (icu::UMemory *)0xA8, a2);
  if (v7) {
    uint64_t v7 = (uint64_t *)sub_18C945F90((uint64_t)v7, a2, a3);
  }
  a1[1] = v7;
  a1[2] = v7;
  return a1;
}

void icu::ListFormatter::~ListFormatter(icu::ListFormatter *this)
{
  *(void *)this = &unk_1EDA4DFA0;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = v2[19];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v2 + 10));
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v2 + 1));
    icu::UMemory::operator delete(v2);
  }

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::ListFormatter::~ListFormatter(this);

  icu::UMemory::operator delete(v1);
}

icu::UnicodeString *icu::ListFormatter::format(icu::ListFormatter *this, const icu::UnicodeString *a2, int a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  icu::ListFormatter::format(this, a2, a3, a4, -1, &v7, a5);
  return a4;
}

icu::UnicodeString *icu::ListFormatter::format(icu::ListFormatter *this, const icu::UnicodeString *a2, int a3, icu::UnicodeString *a4, int a5, int *a6, UErrorCode *a7)
{
  unsigned int v11 = *((unsigned __int16 *)a4 + 4);
  int v12 = (__int16)v11;
  unsigned int v13 = v11 >> 5;
  if (v12 >= 0) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = *((_DWORD *)a4 + 3);
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  icu::ListFormatter::formatStringsToValue(this, a2, a7, a3, (uint64_t)&v18);
  v17[0] = &unk_1EDA47768;
  v17[1] = a4;
  if (*(int *)a7 > 0)
  {
LABEL_7:
    if (a5 < 0) {
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  if (v19)
  {
    (*(void (**)(uint64_t, void *, UErrorCode *))(*(void *)v19 + 32))(v19, v17, a7);
    goto LABEL_7;
  }
  *a7 = v20;
  if (a5 < 0) {
    goto LABEL_15;
  }
LABEL_8:
  memset(v16, 0, sizeof(v16));
  icu::ConstrainedFieldPosition::ConstrainedFieldPosition((uint64_t)v16);
  icu::ConstrainedFieldPosition::constrainField((uint64_t)v16, 4099, a5);
  if (*(int *)a7 <= 0)
  {
    if (v19) {
      (*(void (**)(uint64_t, _OWORD *, UErrorCode *))(*(void *)v19 + 40))(v19, v16, a7);
    }
    else {
      *a7 = v20;
    }
  }
  *a6 = HIDWORD(v16[0]) + v14;
  icu::ConstrainedFieldPosition::~ConstrainedFieldPosition((icu::ConstrainedFieldPosition *)v16);
LABEL_15:
  icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v17);
  icu::FormattedList::~FormattedList((icu::FormattedList *)&v18);
  return a4;
}

uint64_t *icu::ListFormatter::formatStringsToValue@<X0>(icu::ListFormatter *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X3>, int a4@<W2>, uint64_t a5@<X8>)
{
  if (a4 == 2)
  {
    long long v36 = 0;
    int v13 = icu::ListFormatter::needsBidiIsolates(this, a2);
    sub_18C944144((uint64_t *)&v36, (unint64_t)a2, v13, a3, v14);
    UErrorCode v15 = *a3;
    if (*(int *)a3 > 0
      || (int v16 = (const icu::UnicodeString *)((char *)a2 + 64),
          uint64_t v17 = (*(uint64_t (**)(void, const icu::UnicodeString *, char *))(**(void **)(*((void *)this + 2) + 152)
                                                                                      + 32))(*(void *)(*((void *)this + 2) + 152), a2, (char *)a2 + 64), v18 = icu::ListFormatter::needsBidiIsolates(this, v16), sub_18C944238((uint64_t *)&v36, v17, (uint64_t)v16, 1, v18, a3), icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v36 + 1), a3), UErrorCode v15 = *a3, *(int *)a3 > 0))
    {
LABEL_18:
      uint64_t v33 = 0;
      goto LABEL_19;
    }
LABEL_30:
    UErrorCode v15 = U_ZERO_ERROR;
    uint64_t v33 = v36;
    long long v36 = 0;
LABEL_19:
    *(void *)a5 = &unk_1EDA4DF60;
    *(void *)(a5 + 8) = v33;
    *(_DWORD *)(a5 + 16) = v15;
    uint64_t result = v36;
    if (!v36) {
      return result;
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v10 = (a4 - 1);
  if (a4 == 1)
  {
    long long v36 = 0;
    int v19 = icu::ListFormatter::needsBidiIsolates(this, a2);
    sub_18C944144((uint64_t *)&v36, (unint64_t)a2, v19, a3, v20);
    uint64_t result = (uint64_t *)icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v36 + 1), a3);
    UErrorCode v21 = *a3;
    if (*(int *)a3 <= 0)
    {
      long long v35 = v36;
      *(void *)a5 = &unk_1EDA4DF60;
      *(void *)(a5 + 8) = v35;
      goto LABEL_28;
    }
    uint64_t result = v36;
    *(void *)a5 = &unk_1EDA4DF60;
    *(void *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = v21;
    if (!result) {
      return result;
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  if (a4)
  {
    long long v36 = 0;
    int v22 = icu::ListFormatter::needsBidiIsolates(this, a2);
    sub_18C944144((uint64_t *)&v36, (unint64_t)a2, v22, a3, v23);
    UErrorCode v15 = *a3;
    if (*(int *)a3 > 0) {
      goto LABEL_18;
    }
    uint64_t v24 = *((void *)this + 2) + 8;
    int v25 = icu::ListFormatter::needsBidiIsolates(this, (const icu::UnicodeString *)((char *)a2 + 64));
    sub_18C944238((uint64_t *)&v36, v24, (uint64_t)a2 + 64, 1, v25, a3);
    if (a4 >= 4)
    {
      long long v26 = (const icu::UnicodeString *)((char *)a2 + 128);
      uint64_t v27 = 2;
      do
      {
        uint64_t v28 = *((void *)this + 2) + 80;
        int v29 = icu::ListFormatter::needsBidiIsolates(this, v26);
        sub_18C944238((uint64_t *)&v36, v28, (uint64_t)v26, v27++, v29, a3);
        long long v26 = (const icu::UnicodeString *)((char *)v26 + 64);
      }
      while (v10 != v27);
    }
    long long v30 = (const icu::UnicodeString *)((char *)a2 + 64 * (uint64_t)(int)v10);
    uint64_t v31 = (*(uint64_t (**)(void, const icu::UnicodeString *))(**(void **)(*((void *)this + 2) + 152)
                                                                        + 40))(*(void *)(*((void *)this + 2) + 152), v30);
    int v32 = icu::ListFormatter::needsBidiIsolates(this, v30);
    sub_18C944238((uint64_t *)&v36, v31, (uint64_t)v30, v10, v32, a3);
    icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v36 + 1), a3);
    UErrorCode v15 = *a3;
    if (*(int *)a3 >= 1) {
      goto LABEL_18;
    }
    goto LABEL_30;
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)a5, (icu::UMemory *)0x130, (unint64_t)a2);
  if (result)
  {
    uint64_t result = (uint64_t *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 0);
    *uint64_t result = (uint64_t)&unk_1EDA4E030;
    UErrorCode v12 = *a3;
    if (*(int *)a3 <= 0)
    {
      *(void *)a5 = &unk_1EDA4DF60;
      *(void *)(a5 + 8) = result;
LABEL_28:
      *(_DWORD *)(a5 + 16) = 0;
      return result;
    }
  }
  else
  {
    UErrorCode v12 = *a3;
    if (*(int *)a3 <= 0)
    {
      UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  *(void *)a5 = &unk_1EDA4DF60;
  *(void *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = v12;
  if (result)
  {
    int v34 = *(uint64_t (**)(void))(*result + 8);
    return (uint64_t *)v34();
  }
  return result;
}

uint64_t icu::ListFormatter::needsBidiIsolates(icu::ListFormatter *this, const icu::UnicodeString *a2)
{
  unsigned int v2 = *((unsigned __int16 *)a2 + 4);
  int v3 = (__int16)v2;
  int v4 = v2 >> 5;
  if (v3 < 0) {
    int v4 = *((_DWORD *)a2 + 3);
  }
  if (v4 < 1) {
    return 0;
  }
  int v6 = 0;
  uint64_t v7 = *((void *)this + 2);
  int v8 = *(unsigned __int8 *)(v7 + 160);
  while (1)
  {
    unsigned int v9 = icu::UnicodeString::char32At((uint64_t *)v7, a2, v6);
    unsigned int Class = ubidi_getClass(v9);
    if (Class > 0xF) {
      goto LABEL_11;
    }
    if (((1 << Class) & 0xE022) == 0) {
      break;
    }
    if (!v8) {
      return 1;
    }
LABEL_11:
    ++v6;
    unsigned int v11 = *((unsigned __int16 *)a2 + 4);
    int v12 = (__int16)v11;
    LODWORD(v7) = v11 >> 5;
    if (v12 >= 0) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = *((unsigned int *)a2 + 3);
    }
    if (v6 >= (int)v7) {
      return 0;
    }
  }
  if (((1 << Class) & 0x1801) == 0 || !v8) {
    goto LABEL_11;
  }
  return 1;
}

uint64_t *sub_18C944144@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  unsigned int v9 = icu::UMemory::operator new(a5, (icu::UMemory *)0x130, a2);
  if (v9)
  {
    uint64_t v10 = icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)v9, 0);
    *(void *)uint64_t v10 = &unk_1EDA4E030;
    *a1 = v10;
    if (*(int *)a4 <= 0)
    {
      icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(v10 + 8), *(_DWORD *)(v10 + 140), a2, 49, a3, a4);
      unsigned int v11 = *(unsigned __int16 *)(a2 + 8);
      int v12 = (__int16)v11;
      unsigned int v13 = v11 >> 5;
      if (v12 < 0) {
        unsigned int v13 = *(_DWORD *)(a2 + 12);
      }
      if (a3) {
        int v14 = 2;
      }
      else {
        int v14 = 0;
      }
      icu::FormattedValueStringBuilderImpl::appendSpanInfo(*a1, 4099, 0, -1, v13 + v14, (int *)a4);
    }
  }
  else
  {
    *a1 = 0;
    if (*(int *)a4 <= 0) {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return a1;
}

uint64_t *sub_18C944238(uint64_t *result, uint64_t a2, uint64_t a3, int a4, int a5, UErrorCode *a6)
{
  __b[1] = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 <= 0)
  {
    uint64_t v10 = result;
    unsigned int v11 = *(unsigned __int16 *)(a2 + 16);
    if ((v11 & 0x11) != 0)
    {
      int v12 = 0;
    }
    else if ((v11 & 2) != 0)
    {
      int v12 = (_WORD *)(a2 + 18);
    }
    else
    {
      int v12 = *(_WORD **)(a2 + 32);
    }
    int v13 = (__int16)v11;
    unsigned int v14 = v11 >> 5;
    if (v13 < 0) {
      unsigned int v14 = *(_DWORD *)(a2 + 20);
    }
    if (v14 && *v12 == 2)
    {
      __b[0] = 0;
      memset(v37, 0, sizeof(v37));
      sub_18C927470(__b, a2, 2, (uint64_t)v37);
      UErrorCode v15 = (icu::FormattedStringBuilder *)(*v10 + 8);
      if (SLODWORD(__b[0]) <= SHIDWORD(__b[0]))
      {
        icu::UnicodeString::tempSubString((icu::UnicodeString *)v37, 0, __b[0], (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert(v15, 0, (uint64_t)v36, 48, 0, a6);
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v36);
        uint64_t v27 = *v10;
        uint64_t v28 = (icu::FormattedStringBuilder *)(*v10 + 8);
        icu::UnicodeString::tempSubString((icu::UnicodeString *)v37, __b[0], HIDWORD(__b[0]) - LODWORD(__b[0]), (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert(v28, *(_DWORD *)(v27 + 140), (uint64_t)v36, 48, 0, a6);
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(*v10 + 8), *(_DWORD *)(*v10 + 140), a3, 49, a5, a6);
        unsigned int v30 = *(unsigned __int16 *)(a3 + 8);
        int v31 = (__int16)v30;
        unsigned int v32 = v30 >> 5;
        if (v31 < 0) {
          unsigned int v32 = *(_DWORD *)(a3 + 12);
        }
        if (a5) {
          int v33 = 2;
        }
        else {
          int v33 = 0;
        }
        icu::FormattedValueStringBuilderImpl::appendSpanInfo(*v10, 4099, a4, -1, v32 + v33, (int *)a6);
        uint64_t v23 = *v10;
        uint64_t v24 = (icu::FormattedStringBuilder *)(*v10 + 8);
        int v25 = HIDWORD(__b[0]);
      }
      else
      {
        icu::UnicodeString::tempSubString((icu::UnicodeString *)v37, SHIDWORD(__b[0]), LODWORD(__b[0]) - HIDWORD(__b[0]), (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert(v15, 0, (uint64_t)v36, 48, 0, a6);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(*v10 + 8), 0, a3, 49, a5, a6);
        unsigned int v17 = *(unsigned __int16 *)(a3 + 8);
        int v18 = (__int16)v17;
        unsigned int v19 = v17 >> 5;
        if (v18 < 0) {
          unsigned int v19 = *(_DWORD *)(a3 + 12);
        }
        if (a5) {
          int v20 = 2;
        }
        else {
          int v20 = 0;
        }
        icu::FormattedValueStringBuilderImpl::prependSpanInfo(*v10, 4099, a4, -1, v19 + v20, (int *)a6);
        UErrorCode v21 = (icu::FormattedStringBuilder *)(*v10 + 8);
        icu::UnicodeString::tempSubString((icu::UnicodeString *)v37, 0, SHIDWORD(__b[0]), (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert(v21, 0, (uint64_t)v36, 48, 0, a6);
        icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v36);
        uint64_t v23 = *v10;
        uint64_t v24 = (icu::FormattedStringBuilder *)(*v10 + 8);
        int v25 = __b[0];
      }
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v37, v25, 0x7FFFFFFF, (icu::UnicodeString *)v36);
      icu::FormattedStringBuilder::insert(v24, *(_DWORD *)(v23 + 140), (uint64_t)v36, 48, 0, a6);
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v36);
      return (uint64_t *)icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v37);
    }
    else
    {
      *a6 = U_INTERNAL_PROGRAM_ERROR;
    }
  }
  return result;
}

uint64_t sub_18C944548(unsigned __int16 *a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  __s1 = a2;
  *((unsigned char *)a1 + 264) = 0;
  if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24))(a3) == 3)
  {
    int v19 = 0;
    *(void *)&v16[0] = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 40))(a3, &v19, a5);
    icu::UnicodeString::UnicodeString(v20, 1, v16);
    sub_18C946090((uint64_t)a1, (uint64_t)v20);
    return (uint64_t)icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v20);
  }
  else
  {
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    uint64_t result = (uint64_t)(*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88))(v16, a3, a5);
    if (*a5 <= 0)
    {
      unsigned int v10 = 0;
      do
      {
        uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, v10, (const char **)&__s1, a3);
        if (!result) {
          break;
        }
        unsigned int v11 = __s1;
        int v12 = strcmp(__s1, "2");
        int v13 = a1 + 4;
        if (v12)
        {
          int v14 = strcmp(v11, "end");
          int v13 = a1 + 100;
          if (v14)
          {
            int v15 = strcmp(v11, "middle");
            int v13 = a1 + 68;
            if (v15)
            {
              uint64_t result = strcmp(v11, "start");
              int v13 = a1 + 36;
              if (result) {
                continue;
              }
            }
          }
        }
        uint64_t result = (uint64_t)sub_18C946174(a1, (uint64_t)a3, v13, (uint64_t)a5);
        ++v10;
      }
      while (*a5 <= 0);
    }
  }
  return result;
}

uint64_t sub_18C944770(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 152) = (*(uint64_t (**)(void))(**(void **)(a2 + 152) + 24))(*(void *)(a2 + 152));
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  return a1;
}

uint64_t sub_18C9447E4(uint64_t a1, uint64_t a2, icu::UnicodeString *a3, const icu::UnicodeString *a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  *(void *)(a1 + 16) = &unk_1EDA47700;
  *(_WORD *)(a1 + 24) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 8), a3, 2, 2, 0, a7);
  *(void *)(a1 + 88) = &unk_1EDA47700;
  *(_WORD *)(a1 + 96) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 80), a4, 2, 2, 0, a7);
  int v13 = sub_18C944900((const char *)(a6 + 8), a2, a5, a7);
  *(void *)(a1 + 152) = v13;
  if (!v13 && *(int *)a7 <= 0) {
    *a7 = U_MEMORY_ALLOCATION_ERROR;
  }
  *(unsigned char *)(a1 + 160) = uloc_getCharacterOrientation(*(char **)(a6 + 40), (int32_t *)a7) == 1;
  return a1;
}

uint64_t *sub_18C944900(const char *a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v7 = (uint64_t *)a1;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (strcmp(a1, "es"))
  {
    if (strcmp((const char *)v7, "he") && strcmp((const char *)v7, "iw"))
    {
      if (!strcmp((const char *)v7, "th"))
      {
        unsigned int v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x238, v8);
        uint64_t v7 = v10;
        if (v10) {
          sub_18C94525C((uint64_t)v10, (const icu::UnicodeString *)a2, (const icu::UnicodeString *)a3, a4);
        }
        return v7;
      }
      goto LABEL_105;
    }
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    int v66 = a0_2;
    icu::UnicodeString::UnicodeString(&v76, 1, &v66);
    v64[1] = (uint64_t)v66;
    unsigned int v11 = *(unsigned __int16 *)(a2 + 8);
    if (v11)
    {
      int v12 = BYTE8(v76) & 1;
    }
    else
    {
      int v12 = 0;
      int v13 = (__int16)v11;
      int v14 = v11 >> 5;
      if (v13 >= 0) {
        int v15 = v14;
      }
      else {
        int v15 = *(_DWORD *)(a2 + 12);
      }
      if ((SWORD4(v76) & 0x8000u) == 0) {
        int v16 = WORD4(v76) >> 5;
      }
      else {
        int v16 = HIDWORD(v76);
      }
      if ((BYTE8(v76) & 1) == 0 && v15 == v16) {
        int v12 = icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v76, v15);
      }
    }
    unsigned int v23 = *(unsigned __int16 *)(a3 + 8);
    if (v23)
    {
      int v24 = BYTE8(v76) & 1;
    }
    else
    {
      int v24 = 0;
      int v25 = (__int16)v23;
      int v26 = v23 >> 5;
      if (v25 >= 0) {
        int v27 = v26;
      }
      else {
        int v27 = *(_DWORD *)(a3 + 12);
      }
      if ((SWORD4(v76) & 0x8000u) == 0) {
        int v28 = WORD4(v76) >> 5;
      }
      else {
        int v28 = HIDWORD(v76);
      }
      if ((BYTE8(v76) & 1) == 0 && v27 == v28) {
        int v24 = icu::UnicodeString::doEquals((icu::UnicodeString *)a3, (const icu::UnicodeString *)&v76, v27);
      }
    }
    if ((v12 | v24))
    {
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      BOOL v65 = &unk_18CAA2132;
      icu::UnicodeString::UnicodeString(&v72, 1, &v65);
      v64[0] = (uint64_t)v65;
      uint64_t v7 = icu::UMemory::operator new(v64, (icu::UMemory *)0x130, v29);
      if (v7)
      {
        if (v12) {
          int v31 = (const icu::UnicodeString *)&v72;
        }
        else {
          int v31 = (const icu::UnicodeString *)a2;
        }
        if (v24) {
          unsigned int v32 = (const icu::UnicodeString *)&v72;
        }
        else {
          unsigned int v32 = (const icu::UnicodeString *)a3;
        }
        int v33 = sub_18C945210;
LABEL_70:
        sub_18C945004((uint64_t)v7, (uint64_t)v33, v31, (const icu::UnicodeString *)a2, v32, (const icu::UnicodeString *)a3, a4);
        goto LABEL_71;
      }
      goto LABEL_71;
    }
    icu::UnicodeString::~UnicodeString((void *)(v12 | v24), (icu::UnicodeString *)&v76);
    goto LABEL_105;
  }
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v70 = L"{0} y {1}";
  icu::UnicodeString::UnicodeString(&v76, 1, &v70);
  v63[2] = (uint64_t)v70;
  unsigned int v17 = *(unsigned __int16 *)(a2 + 8);
  if (v17)
  {
    int v18 = BYTE8(v76) & 1;
  }
  else
  {
    int v18 = 0;
    int v19 = (__int16)v17;
    int v20 = v17 >> 5;
    if (v19 >= 0) {
      int v21 = v20;
    }
    else {
      int v21 = *(_DWORD *)(a2 + 12);
    }
    if ((SWORD4(v76) & 0x8000u) == 0) {
      int v22 = WORD4(v76) >> 5;
    }
    else {
      int v22 = HIDWORD(v76);
    }
    if ((BYTE8(v76) & 1) == 0 && v21 == v22) {
      int v18 = icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v76, v21);
    }
  }
  unsigned int v34 = *(unsigned __int16 *)(a3 + 8);
  if (v34)
  {
    int v35 = BYTE8(v76) & 1;
  }
  else
  {
    int v35 = 0;
    int v36 = (__int16)v34;
    int v37 = v34 >> 5;
    if (v36 >= 0) {
      int v38 = v37;
    }
    else {
      int v38 = *(_DWORD *)(a3 + 12);
    }
    if ((SWORD4(v76) & 0x8000u) == 0) {
      int v39 = WORD4(v76) >> 5;
    }
    else {
      int v39 = HIDWORD(v76);
    }
    if ((BYTE8(v76) & 1) == 0 && v38 == v39) {
      int v35 = icu::UnicodeString::doEquals((icu::UnicodeString *)a3, (const icu::UnicodeString *)&v76, v38);
    }
  }
  if ((v18 | v35) == 1)
  {
    long long v74 = 0uLL;
    long long v75 = 0uLL;
    long long v72 = 0uLL;
    long long v73 = 0uLL;
    long long v69 = L"{0} e {1}";
    icu::UnicodeString::UnicodeString(&v72, 1, &v69);
    int v62 = v69;
    uint64_t v7 = icu::UMemory::operator new((uint64_t *)&v62, (icu::UMemory *)0x130, v40);
    if (v7)
    {
      if (v18) {
        int v31 = (const icu::UnicodeString *)&v72;
      }
      else {
        int v31 = (const icu::UnicodeString *)a2;
      }
      if (v35) {
        unsigned int v32 = (const icu::UnicodeString *)&v72;
      }
      else {
        unsigned int v32 = (const icu::UnicodeString *)a3;
      }
      int v33 = sub_18C944EE0;
      goto LABEL_70;
    }
LABEL_71:
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v72);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v76);
    return v7;
  }
  long long v74 = 0uLL;
  long long v75 = 0uLL;
  long long v72 = 0uLL;
  long long v73 = 0uLL;
  uint64_t v68 = L"{0} o {1}";
  icu::UnicodeString::UnicodeString(&v72, 1, &v68);
  v63[1] = (uint64_t)v68;
  unsigned int v42 = *(unsigned __int16 *)(a2 + 8);
  if (v42)
  {
    int v43 = BYTE8(v72) & 1;
  }
  else
  {
    int v43 = 0;
    int v44 = (__int16)v42;
    int v45 = v42 >> 5;
    if (v44 >= 0) {
      int v46 = v45;
    }
    else {
      int v46 = *(_DWORD *)(a2 + 12);
    }
    if ((SWORD4(v72) & 0x8000u) == 0) {
      int v47 = WORD4(v72) >> 5;
    }
    else {
      int v47 = HIDWORD(v72);
    }
    if ((BYTE8(v72) & 1) == 0 && v46 == v47) {
      int v43 = icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v72, v46);
    }
  }
  unsigned int v48 = *(unsigned __int16 *)(a3 + 8);
  if (v48)
  {
    uint64_t v53 = (void *)WORD4(v72);
    int v49 = BYTE8(v72) & 1;
  }
  else
  {
    int v49 = 0;
    int v50 = (__int16)v48;
    int v51 = v48 >> 5;
    if (v50 >= 0) {
      int v52 = v51;
    }
    else {
      int v52 = *(_DWORD *)(a3 + 12);
    }
    if ((SWORD4(v72) & 0x8000u) == 0) {
      uint64_t v53 = (void *)(WORD4(v72) >> 5);
    }
    else {
      uint64_t v53 = (void *)HIDWORD(v72);
    }
    if ((BYTE8(v72) & 1) == 0 && v52 == v53) {
      int v49 = icu::UnicodeString::doEquals((icu::UnicodeString *)a3, (const icu::UnicodeString *)&v72, v52);
    }
  }
  if ((v43 | v49) == 1)
  {
    memset(v71, 0, sizeof(v71));
    long long v67 = L"{0} u {1}";
    icu::UnicodeString::UnicodeString(v71, 1, &v67);
    v63[0] = (uint64_t)v67;
    uint64_t v55 = icu::UMemory::operator new(v63, (icu::UMemory *)0x130, v54);
    uint64_t v7 = v55;
    if (v55)
    {
      if (v43) {
        uint64_t v57 = (const icu::UnicodeString *)v71;
      }
      else {
        uint64_t v57 = (const icu::UnicodeString *)a2;
      }
      if (v49) {
        int v58 = (const icu::UnicodeString *)v71;
      }
      else {
        int v58 = (const icu::UnicodeString *)a3;
      }
      sub_18C945004((uint64_t)v55, (uint64_t)sub_18C9450FC, v57, (const icu::UnicodeString *)a2, v58, (const icu::UnicodeString *)a3, a4);
    }
    icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v71);
  }
  icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)&v72);
  icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)&v76);
  if (((v43 | v49) & 1) == 0)
  {
LABEL_105:
    int v60 = icu::UMemory::operator new(v9, (icu::UMemory *)0x98, v8);
    uint64_t v7 = v60;
    if (v60) {
      sub_18C945900((uint64_t)v60, (const icu::UnicodeString *)a2, (const icu::UnicodeString *)a3, a4);
    }
  }
  return v7;
}

BOOL sub_18C944EE0(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    int v2 = *(_DWORD *)(a1 + 12);
    if (!v2) {
      return 0;
    }
  }
  else
  {
    if (v1 < 0x20) {
      return 0;
    }
    int v2 = v1 >> 5;
  }
  if ((v1 & 2) != 0) {
    int v3 = (unsigned __int16 *)(a1 + 10);
  }
  else {
    int v3 = *(unsigned __int16 **)(a1 + 24);
  }
  int v4 = *v3;
  if (v4 != 104)
  {
    if ((v1 & 0x8000u) == 0) {
      unsigned int v5 = v1 >> 5;
    }
    else {
      unsigned int v5 = *(_DWORD *)(a1 + 12);
    }
    if (!v5) {
      return 0;
    }
    if (v2 < 2 || v4 != 72) {
      goto LABEL_33;
    }
    goto LABEL_18;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  if (v2 > 1)
  {
    if ((v1 & 0x8000u) == 0) {
      unsigned int v5 = v1 >> 5;
    }
LABEL_18:
    if (v5 >= 2)
    {
      if ((v1 & 2) != 0) {
        uint64_t v6 = a1 + 10;
      }
      else {
        uint64_t v6 = *(void *)(a1 + 24);
      }
      if ((*(unsigned __int16 *)(v6 + 2) | 0x20) == 0x69)
      {
        uint64_t v7 = 1;
        if (v2 == 2 || v5 < 3) {
          return v7;
        }
        uint64_t v7 = 1;
        if ((unsigned __int16)(((unsigned __int16)(*(_WORD *)(v6 + 4) - 65) >> 2) | ((*(_WORD *)(v6 + 4) - 65) << 14)) > 9u
          || ((1 << ((unsigned __int16)(*(_WORD *)(v6 + 4) - 65) >> 2)) & 0x303) == 0)
        {
          return v7;
        }
      }
      goto LABEL_33;
    }
LABEL_32:
    if (v5) {
      goto LABEL_33;
    }
    return 0;
  }
  if ((v1 & 0x8000) != 0) {
    goto LABEL_32;
  }
LABEL_33:
  unsigned int v9 = *(_WORD **)(a1 + 24);
  if ((v1 & 2) != 0) {
    unsigned int v9 = (_WORD *)(a1 + 10);
  }
  return (*v9 & 0xFFDF) == 73;
}

uint64_t sub_18C945004(uint64_t a1, uint64_t a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, const icu::UnicodeString *a5, const icu::UnicodeString *a6, UErrorCode *a7)
{
  int v12 = (void *)sub_18C945900(a1, a4, a6, a7);
  *int v12 = &unk_1EDA4E0B8;
  v12[19] = a2;
  *(void *)(a1 + 168) = &unk_1EDA47700;
  *(_WORD *)(a1 + 176) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(v12 + 20), a3, 2, 2, 0, a7);
  *(void *)(a1 + 240) = &unk_1EDA47700;
  *(_WORD *)(a1 + 248) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 232), a5, 2, 2, 0, a7);
  return a1;
}

BOOL sub_18C9450FC(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    int v2 = *(_DWORD *)(a1 + 12);
    if (!v2) {
      return 0;
    }
  }
  else
  {
    if (v1 < 0x20) {
      return 0;
    }
    int v2 = v1 >> 5;
  }
  if ((v1 & 2) != 0) {
    int v3 = (unsigned __int16 *)(a1 + 10);
  }
  else {
    int v3 = *(unsigned __int16 **)(a1 + 24);
  }
  int v4 = *v3;
  if (v4 == 111) {
    return 1;
  }
  unsigned int v6 = v1 >> 5;
  if ((v1 & 0x8000u) != 0) {
    unsigned int v6 = *(_DWORD *)(a1 + 12);
  }
  if (!v6) {
    return 0;
  }
  uint64_t v5 = 1;
  if (v4 != 56 && v4 != 79)
  {
    if (v4 == 104)
    {
      if (v2 < 2) {
        return 0;
      }
    }
    else if (v2 < 2 || v4 != 72)
    {
      if (v2 < 2) {
        return 0;
      }
      goto LABEL_27;
    }
    if (v6 >= 2)
    {
      uint64_t v7 = (v1 & 2) != 0 ? a1 + 10 : *(void *)(a1 + 24);
      if ((*(unsigned __int16 *)(v7 + 2) | 0x20) == 0x6F) {
        return 1;
      }
    }
LABEL_27:
    unint64_t v8 = *(_WORD **)(a1 + 24);
    if ((v1 & 2) != 0) {
      unint64_t v8 = (_WORD *)(a1 + 10);
    }
    BOOL v9 = *v8 == 49 && v6 >= 2;
    return v9 && v8[1] == 49 && (v2 == 2 || v6 >= 3 && v8[2] == 32);
  }
  return v5;
}

BOOL sub_18C945210(unsigned __int16 *a1)
{
  unsigned int v1 = (uint64_t *)a1[4];
  if (v1 < 0x20) {
    return 0;
  }
  int v4 = 0;
  unsigned int v2 = icu::UnicodeString::char32At(v1, (icu::UnicodeString *)a1, 0);
  return uscript_getScript(v2, &v4) != 19;
}

uint64_t sub_18C94525C(uint64_t a1, const icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  v55[9] = *(UChar **)MEMORY[0x1E4F143B8];
  unint64_t v8 = (void *)sub_18C945900(a1, a2, a3, a4);
  *unint64_t v8 = &unk_1EDA4E168;
  BOOL v9 = (icu::UnicodeString *)(v8 + 27);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 19), (UChar **)a2);
  icu::UnicodeString::UnicodeString(v9, (UChar **)a3);
  icu::UnicodeString::UnicodeString(a1 + 288, 0);
  icu::UnicodeString::UnicodeString(a1 + 360, 0);
  icu::UnicodeString::UnicodeString(a1 + 432, 0);
  icu::UnicodeString::UnicodeString(a1 + 504, 0);
  memset(v55, 0, 64);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v55, (UChar **)a2);
  icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)&unk_18CAA2146);
  if ((__int16)v49 >= 0) {
    int32_t v10 = (unsigned __int16)v49 >> 5;
  }
  else {
    int32_t v10 = HIDWORD(v49);
  }
  if ((v49 & 1) != 0 || v10 <= 0)
  {
    icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v49, (icu::UnicodeString *)v48);
  }
  else
  {
    if (SLOWORD(v55[1]) >= 0) {
      int32_t v11 = LOWORD(v55[1]) >> 5;
    }
    else {
      int32_t v11 = HIDWORD(v55[1]);
    }
    if ((v49 & 2) != 0) {
      int v12 = (char *)&v49 + 2;
    }
    else {
      int v12 = v51;
    }
    int v13 = icu::UnicodeString::indexOf((uint64_t)v55, (uint64_t)v12, 0, v10, 0, v11);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v48);
    int v15 = 0;
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)L"{0}");
  icu::UnicodeString::UnicodeString((uint64_t)v52, (uint64_t)&unk_18CAA2146);
  if (SLOWORD(v55[1]) >= 0) {
    int32_t v16 = LOWORD(v55[1]) >> 5;
  }
  else {
    int32_t v16 = HIDWORD(v55[1]);
  }
  if ((__int16)v49 >= 0) {
    uint64_t v17 = (unsigned __int16)v49 >> 5;
  }
  else {
    uint64_t v17 = HIDWORD(v49);
  }
  int v18 = v53 >> 5;
  if ((v53 & 0x8000u) != 0) {
    int v18 = v54;
  }
  icu::UnicodeString::findAndReplace((icu::UnicodeString *)v55, 0, v16, (const icu::UnicodeString *)v48, 0, v17, (const icu::UnicodeString *)v52, 0, v18);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v52);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v48);
  int v15 = 1;
LABEL_24:
  int v49 = &unk_1EDA47700;
  __int16 v50 = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v48, (const icu::UnicodeString *)v55, 2, 2, 0, a4);
  icu::SimpleFormatter::operator=(a1 + 280, (uint64_t)v48);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v48);
  icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)L" {1}");
  if ((__int16)v49 >= 0) {
    int32_t v21 = (unsigned __int16)v49 >> 5;
  }
  else {
    int32_t v21 = HIDWORD(v49);
  }
  if ((v49 & 1) != 0 || v21 <= 0)
  {
    icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v49, (icu::UnicodeString *)v48);
  }
  else
  {
    if (SLOWORD(v55[1]) >= 0) {
      int32_t v22 = LOWORD(v55[1]) >> 5;
    }
    else {
      int32_t v22 = HIDWORD(v55[1]);
    }
    if ((v49 & 2) != 0) {
      unsigned int v23 = (char *)&v49 + 2;
    }
    else {
      unsigned int v23 = v51;
    }
    int v24 = icu::UnicodeString::indexOf((uint64_t)v55, (uint64_t)v23, 0, v21, 0, v22);
    icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v48);
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)"{");
  icu::UnicodeString::UnicodeString((uint64_t)v52, (uint64_t)L" {1}");
  if (SLOWORD(v55[1]) >= 0) {
    int32_t v26 = LOWORD(v55[1]) >> 5;
  }
  else {
    int32_t v26 = HIDWORD(v55[1]);
  }
  if ((__int16)v49 >= 0) {
    uint64_t v27 = (unsigned __int16)v49 >> 5;
  }
  else {
    uint64_t v27 = HIDWORD(v49);
  }
  int v28 = v53 >> 5;
  if ((v53 & 0x8000u) != 0) {
    int v28 = v54;
  }
  icu::UnicodeString::findAndReplace((icu::UnicodeString *)v55, 0, v26, (const icu::UnicodeString *)v48, 0, v27, (const icu::UnicodeString *)v52, 0, v28);
  icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v52);
  icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v48);
LABEL_47:
  int v49 = &unk_1EDA47700;
  __int16 v50 = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v48, (const icu::UnicodeString *)v55, 2, 2, 0, a4);
  icu::SimpleFormatter::operator=(a1 + 424, (uint64_t)v48);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v48);
  if (v15)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)&unk_18CAA2146);
    icu::UnicodeString::UnicodeString((uint64_t)v52, (uint64_t)L"{0}");
    if (SLOWORD(v55[1]) >= 0) {
      int32_t v31 = LOWORD(v55[1]) >> 5;
    }
    else {
      int32_t v31 = HIDWORD(v55[1]);
    }
    if ((__int16)v49 >= 0) {
      uint64_t v32 = (unsigned __int16)v49 >> 5;
    }
    else {
      uint64_t v32 = HIDWORD(v49);
    }
    int v33 = v53 >> 5;
    if ((v53 & 0x8000u) != 0) {
      int v33 = v54;
    }
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)v55, 0, v31, (const icu::UnicodeString *)v48, 0, v32, (const icu::UnicodeString *)v52, 0, v33);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v52);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v48);
  }
  int v49 = &unk_1EDA47700;
  __int16 v50 = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v48, (const icu::UnicodeString *)v55, 2, 2, 0, a4);
  icu::SimpleFormatter::operator=(a1 + 352, (uint64_t)v48);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v48);
  icu::UnicodeString::operator=(v55, (UChar **)a3);
  icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)L" {1}");
  if ((__int16)v49 >= 0) {
    int32_t v36 = (unsigned __int16)v49 >> 5;
  }
  else {
    int32_t v36 = HIDWORD(v49);
  }
  if ((v49 & 1) != 0 || v36 <= 0)
  {
    icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v49, (icu::UnicodeString *)v48);
LABEL_71:
    icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)"{");
    icu::UnicodeString::UnicodeString((uint64_t)v52, (uint64_t)L" {1}");
    if (SLOWORD(v55[1]) >= 0) {
      int32_t v41 = LOWORD(v55[1]) >> 5;
    }
    else {
      int32_t v41 = HIDWORD(v55[1]);
    }
    if ((__int16)v49 >= 0) {
      uint64_t v42 = (unsigned __int16)v49 >> 5;
    }
    else {
      uint64_t v42 = HIDWORD(v49);
    }
    int v43 = v53 >> 5;
    if ((v53 & 0x8000u) != 0) {
      int v43 = v54;
    }
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)v55, 0, v41, (const icu::UnicodeString *)v48, 0, v42, (const icu::UnicodeString *)v52, 0, v43);
    icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)v52);
    icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)v48);
    goto LABEL_80;
  }
  if (SLOWORD(v55[1]) >= 0) {
    int32_t v37 = LOWORD(v55[1]) >> 5;
  }
  else {
    int32_t v37 = HIDWORD(v55[1]);
  }
  if ((v49 & 2) != 0) {
    int v38 = (char *)&v49 + 2;
  }
  else {
    int v38 = v51;
  }
  int v39 = icu::UnicodeString::indexOf((uint64_t)v55, (uint64_t)v38, 0, v36, 0, v37);
  icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v48);
  if (v39 < 0) {
    goto LABEL_71;
  }
LABEL_80:
  int v49 = &unk_1EDA47700;
  __int16 v50 = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v48, (const icu::UnicodeString *)v55, 2, 2, 0, a4);
  icu::SimpleFormatter::operator=(a1 + 496, (uint64_t)v48);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v48);
  icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)v55);
  return a1;
}

uint64_t sub_18C945900(uint64_t a1, const icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  *(void *)a1 = &unk_1EDA4E128;
  *(void *)(a1 + 16) = &unk_1EDA47700;
  *(_WORD *)(a1 + 24) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 8), a2, 2, 2, 0, a4);
  *(void *)(a1 + 88) = &unk_1EDA47700;
  *(_WORD *)(a1 + 96) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 80), a3, 2, 2, 0, a4);
  return a1;
}

void sub_18C9459CC(void *a1)
{
  *a1 = &unk_1EDA4E0B8;
  unsigned int v2 = (icu::SimpleFormatter *)(a1 + 20);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 29));
  icu::SimpleFormatter::~SimpleFormatter(v2);

  sub_18C945C9C((uint64_t)a1);
}

void sub_18C945A30(void *a1)
{
  sub_18C9459CC(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18C945A58(uint64_t a1, unint64_t a2)
{
  int32_t v10 = (uint64_t *)*MEMORY[0x1E4F143B8];
  int v3 = icu::UMemory::operator new(v10, (icu::UMemory *)0x130, a2);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 152);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v9, (UChar **)(a1 + 16));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v7, (UChar **)(a1 + 88));
    *int v3 = (uint64_t)&unk_1EDA4E128;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v3 + 2), v9);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v3 + 11), v7);
    *int v3 = (uint64_t)&unk_1EDA4E0B8;
    v3[19] = v4;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v3 + 21), (UChar **)(a1 + 168));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v3 + 30), (UChar **)(a1 + 240));
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v6);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v8);
  }
  return v3;
}

uint64_t sub_18C945B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (*(uint64_t (**)(uint64_t))(a1 + 152))(a3);
  uint64_t v5 = 8;
  if (v4) {
    uint64_t v5 = 160;
  }
  return a1 + v5;
}

uint64_t sub_18C945BB8(uint64_t a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(uint64_t))(a1 + 152))(a2);
  uint64_t v4 = 80;
  if (v3) {
    uint64_t v4 = 232;
  }
  return a1 + v4;
}

void sub_18C945BFC(uint64_t a1)
{
  sub_18C945C9C(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18C945C24@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x98, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    *uint64_t v4 = (uint64_t)&unk_1EDA4E128;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 2), (UChar **)(a1 + 16));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v5 + 11), (UChar **)(a1 + 88));
  }
  return v5;
}

uint64_t sub_18C945C8C(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_18C945C94(uint64_t a1)
{
  return a1 + 80;
}

void sub_18C945C9C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4E128;
  unsigned int v2 = (icu::SimpleFormatter *)(a1 + 8);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 80));
  icu::SimpleFormatter::~SimpleFormatter(v2);

  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18C945D00(void *a1)
{
  *a1 = &unk_1EDA4E168;
  unsigned int v2 = (icu::UnicodeString *)(a1 + 19);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 62));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 53));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 44));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 35));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 27));
  icu::UnicodeString::~UnicodeString(v4, v2);

  sub_18C945C9C((uint64_t)a1);
}

void sub_18C945D84(void *a1)
{
  sub_18C945D00(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18C945DAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v5 = 0;
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x238, a2);
  if (result) {
    return (uint64_t *)sub_18C94525C((uint64_t)result, (const icu::UnicodeString *)(a1 + 152), (const icu::UnicodeString *)(a1 + 216), (UErrorCode *)&v5);
  }
  return result;
}

uint64_t sub_18C945DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5 = 0;
  int v22 = 0;
  unsigned int v6 = *(unsigned __int16 *)(a2 + 8);
  if (v6 >= 0x20)
  {
    if ((v6 & 0x8000) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 12);
      if (!v7)
      {
        unsigned int v10 = 0xFFFF;
LABEL_9:
        BOOL v5 = uscript_getScript(v10, &v22) != 38;
        goto LABEL_10;
      }
    }
    else
    {
      unsigned int v7 = v6 >> 5;
    }
    signed int v8 = v7 - 1;
    if ((v6 & 2) != 0) {
      uint64_t v9 = a2 + 10;
    }
    else {
      uint64_t v9 = *(void *)(a2 + 24);
    }
    unsigned int v10 = *(unsigned __int16 *)(v9 + 2 * v8);
    goto LABEL_9;
  }
LABEL_10:
  unsigned int v11 = *(unsigned __int16 *)(a3 + 8);
  if (v11 < 0x20)
  {
    BOOL v15 = 0;
  }
  else
  {
    if ((v11 & 0x8000u) == 0) {
      unsigned int v12 = v11 >> 5;
    }
    else {
      unsigned int v12 = *(_DWORD *)(a3 + 12);
    }
    if (v12)
    {
      if ((v11 & 2) != 0) {
        int v13 = (unsigned __int16 *)(a3 + 10);
      }
      else {
        int v13 = *(unsigned __int16 **)(a3 + 24);
      }
      unsigned int v14 = *v13;
    }
    else
    {
      unsigned int v14 = 0xFFFF;
    }
    BOOL v15 = uscript_getScript(v14, &v22) != 38;
  }
  uint64_t v16 = 8;
  if (v15) {
    uint64_t v16 = 352;
  }
  uint64_t v17 = a1 + v16;
  BOOL v18 = !v15;
  uint64_t v19 = 280;
  if (!v18) {
    uint64_t v19 = 424;
  }
  uint64_t v20 = a1 + v19;
  if (v5) {
    return v20;
  }
  else {
    return v17;
  }
}

uint64_t sub_18C945F08(uint64_t a1, uint64_t a2)
{
  int v8 = 0;
  unsigned int v3 = *(unsigned __int16 *)(a2 + 8);
  if (v3 < 0x20) {
    return a1 + 80;
  }
  if ((v3 & 0x8000u) == 0 ? v3 >> 5 : *(_DWORD *)(a2 + 12))
  {
    BOOL v5 = (v3 & 2) != 0 ? (unsigned __int16 *)(a2 + 10) : *(unsigned __int16 **)(a2 + 24);
    unsigned int v6 = *v5;
  }
  else
  {
    unsigned int v6 = 0xFFFF;
  }
  if (uscript_getScript(v6, &v8) == 38) {
    return a1 + 80;
  }
  else {
    return a1 + 496;
  }
}

uint64_t sub_18C945F90(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  *(void *)(a1 + 16) = &unk_1EDA47700;
  *(_WORD *)(a1 + 24) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 8), (const icu::UnicodeString *)(a2 + 72), 0, 0x7FFFFFFF, 0, a3);
  *(void *)(a1 + 88) = &unk_1EDA47700;
  *(_WORD *)(a1 + 96) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 80), (const icu::UnicodeString *)(a2 + 136), 0, 0x7FFFFFFF, 0, a3);
  unsigned int v6 = sub_18C944900((const char *)(a2 + 272), a2 + 8, a2 + 200, a3);
  *(void *)(a1 + 152) = v6;
  if (!v6 && *(int *)a3 <= 0) {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  *(unsigned char *)(a1 + 160) = uloc_getCharacterOrientation(*(char **)(a2 + 304), (int32_t *)a3) == 1;
  return a1;
}

uint64_t sub_18C946090(uint64_t a1, uint64_t a2)
{
  if (*(__int16 *)(a2 + 8) < 0)
  {
    int v5 = *(_DWORD *)(a2 + 12);
    int v4 = v5 & (v5 >> 31);
  }
  else
  {
    int v4 = 0;
    int v5 = *(unsigned __int16 *)(a2 + 8) >> 5;
  }
  uint64_t result = icu::UnicodeString::indexOf(a2, (uint64_t)"l", 0, 12, v4, v5 - v4);
  if ((result & 0x80000000) == 0)
  {
    int v7 = result + 12;
    if (*(__int16 *)(a2 + 8) < 0)
    {
      int v8 = *(_DWORD *)(a2 + 12);
      if (v8 >= v7) {
        int v9 = result + 12;
      }
      else {
        int v9 = *(_DWORD *)(a2 + 12);
      }
    }
    else
    {
      int v8 = *(unsigned __int16 *)(a2 + 8) >> 5;
      if (v8 >= v7) {
        int v9 = result + 12;
      }
      else {
        int v9 = *(unsigned __int16 *)(a2 + 8) >> 5;
      }
    }
    int v10 = icu::UnicodeString::doIndexOf(a2, 0x2Fu, v9, v8 - v9);
    if (v10 < 0)
    {
      if (*(__int16 *)(a2 + 8) < 0) {
        int v10 = *(_DWORD *)(a2 + 12);
      }
      else {
        int v10 = *(unsigned __int16 *)(a2 + 8) >> 5;
      }
    }
    uint64_t result = icu::UnicodeString::extract(a2, v7, (v10 - v7), (char *)(a1 + 264), 25);
    *(unsigned char *)(a1 + 288) = 0;
  }
  return result;
}

void *sub_18C946174(void *result, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a3[4] <= 0x1Fu)
  {
    uint64_t v7 = (uint64_t)result;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    if (result == 3)
    {
      if (*(unsigned char *)(v7 + 264)) {
        return result;
      }
      LODWORD(v10) = 0;
      v12[0] = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 40))(a2, &v10, a4);
      icu::UnicodeString::UnicodeString(v13, 1, v12);
      sub_18C946090(v7, (uint64_t)v13);
      int v9 = (icu::UnicodeString *)v13;
    }
    else
    {
      int v11 = 0;
      uint64_t v10 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a2 + 32))(a2, &v11, a4);
      icu::UnicodeString::UnicodeString(v12, 1, &v10);
      icu::UnicodeString::operator=((icu::UnicodeString *)a3, (icu::UnicodeString *)v12);
      int v9 = (icu::UnicodeString *)v12;
    }
    return icu::UnicodeString::~UnicodeString(v8, v9);
  }
  return result;
}

void *icu::MeasureFormat::getStaticClassID(icu::MeasureFormat *this)
{
  return &unk_1E9192498;
}

void *icu::MeasureFormat::getDynamicClassID(icu::MeasureFormat *this)
{
  return &unk_1E9192498;
}

void sub_18C946310(icu::SharedObject *this@<X0>, void *a2@<X8>)
{
  *(void *)this = &unk_1EDA4E1C0;
  for (uint64_t i = 40; i != 64; i += 8)
  {
    uint64_t v4 = *(void *)((char *)this + i);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  uint64_t v5 = *((void *)this + 8);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 9);
  if (v6)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(v6 + 136));
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(v6 + 72));
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)(v6 + 8));
    icu::UMemory::operator delete((void *)v6);
  }

  icu::SharedObject::~SharedObject(this);
}

void sub_18C9463F4(icu::SharedObject *a1@<X0>, void *a2@<X8>)
{
  sub_18C946310(a1, a2);

  icu::UMemory::operator delete(v2);
}

uint64_t *sub_18C94641C(uint64_t a1, uint64_t a2, int *a3)
{
  v30[8] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t v4 = *(char **)(a1 + 56);
  uint64_t v5 = ures_open("icudt74l-unit", v4, a3);
  int v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x50, v6);
  if (v8)
  {
    int v9 = v8;
    v8[1] = 0;
    v8[2] = 0;
    *int v8 = (uint64_t)&unk_1EDA4E1C0;
    unsigned char v8[8] = 0;
    uint64_t v10 = v8 + 8;
    v8[9] = 0;
    memset_pattern16(v8 + 3, &unk_18CA94310, 0xCuLL);
    v9[5] = 0;
    v9[6] = 0;
    v9[7] = 0;
    unsigned int v12 = (uint64_t *)*a3;
    if ((int)v12 < 1)
    {
      uint64_t v14 = icu::UMemory::operator new(v12, (icu::UMemory *)0xC8, v11);
      if (v14)
      {
        sub_18C94944C(v5, "hm", (UErrorCode *)a3, (uint64_t)v28);
        sub_18C94944C(v5, "ms", (UErrorCode *)a3, (uint64_t)v30);
        sub_18C94944C(v5, "hms", (UErrorCode *)a3, (uint64_t)v29);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v14 + 1), (UChar **)v28);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v14 + 9), v30);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v14 + 17), v29);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v29);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v30);
        icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v28);
        unint64_t v13 = *a3;
        if ((int)v13 >= 1)
        {
          icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)(v14 + 17));
          icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)(v14 + 9));
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)(v14 + 1));
          icu::UMemory::operator delete(v14);
          uint64_t v14 = 0;
        }
      }
      sub_18C946810((uint64_t)v9, (uint64_t)v14, (void *)v13);
      if (*a3 <= 0)
      {
        uint64_t v21 = 0;
        while (1)
        {
          LODWORD(v30[0]) = 0;
          icu::Locale::Locale((icu::Locale *)v28, v4, 0, 0, 0);
          uint64_t Instance = icu::NumberFormat::createInstance(v28, dword_18CA94260[v21], (UErrorCode *)v30);
          unsigned int v23 = &v9[v21];
          uint64_t v24 = v23[5];
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
          v23[5] = (uint64_t)Instance;
          icu::Locale::~Locale((icu::Locale *)v28);
          int v25 = (int)v30[0];
          if (LODWORD(v30[0])) {
            *a3 = (int)v30[0];
          }
          else {
            int v25 = *a3;
          }
          if (v25 >= 1) {
            break;
          }
          if (++v21 == 3)
          {
            icu::Locale::Locale((icu::Locale *)v28, v4, 0, 0, 0);
            int32_t v26 = icu::NumberFormat::createInstance(v28, 1u, (UErrorCode *)a3);
            icu::Locale::~Locale((icu::Locale *)v28);
            if (*a3 > 0) {
              break;
            }
            (*(void (**)(icu::Format *, void))(*(void *)v26 + 232))(v26, 0);
            if (v27) {
              (*(void (**)(void *, uint64_t))(*(void *)v27 + 280))(v27, 2);
            }
            if (*v10) {
              (*(void (**)(void))(*(void *)*v10 + 8))(*v10);
            }
            unsigned char v9[8] = (uint64_t)v26;
            icu::SharedObject::addRef((uint64_t)v9);
            goto LABEL_10;
          }
        }
      }
    }
    (*(void (**)(uint64_t *))(*v9 + 8))(v9);
    goto LABEL_9;
  }
  if (*a3 > 0)
  {
LABEL_9:
    int v9 = 0;
    goto LABEL_10;
  }
  int v9 = 0;
  *a3 = 7;
LABEL_10:
  if (v5) {
    ures_close(v5);
  }
  return v9;
}

void sub_18C946810(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5)
  {
    icu::UnicodeString::~UnicodeString(a3, (icu::UnicodeString *)(v5 + 136));
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(v5 + 72));
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(v5 + 8));
    icu::UMemory::operator delete((void *)v5);
  }
  *(void *)(a1 + 72) = a2;
}

uint64_t icu::MeasureFormat::MeasureFormat(uint64_t a1, const char **a2, int a3, UErrorCode *a4)
{
  uint64_t v8 = icu::Format::Format(a1);
  *(void *)uint64_t v8 = &unk_1EDA4E1E8;
  *(void *)(v8 + 336) = 0;
  *(void *)(v8 + 344) = 0;
  if (a3 == 8) {
    int v9 = 1;
  }
  else {
    int v9 = a3;
  }
  *(void *)(v8 + 328) = 0;
  *(_DWORD *)(v8 + 352) = v9;
  *(unsigned char *)(v8 + 356) = a3 == 8;
  *(void *)(v8 + 360) = 0;
  *(void *)(v8 + 368) = 0;
  icu::MeasureFormat::initMeasureFormat(v8, a2, v9, 0, a4);
  return a1;
}

void icu::MeasureFormat::initMeasureFormat(uint64_t a1, const char **a2, int a3, unint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0
    && (LODWORD(v7) = a3,
        icu::Format::setLocaleIDs((icu::Format *)a1, a2[5], a2[5]),
        sub_18C948EB4((uint64_t)a2, (UErrorCode *)(a1 + 328), a5),
        *(int *)a5 <= 0)
    && (uint64_t v10 = (icu::SharedObject *)icu::PluralRules::createSharedInstance((uint64_t)a2, 0, a5), *(int *)a5 <= 0))
  {
    uint64_t v12 = (uint64_t)v10;
    sub_18C8917C4(v10, (icu::SharedObject **)(a1 + 344));
    icu::SharedObject::removeRef(v12);
    if (a4)
    {
      icu::MeasureFormat::adoptNumberFormat((icu::SharedObject *)a1, a4, a5);
      if (*(int *)a5 > 0) {
        return;
      }
    }
    else
    {
      Shareduint64_t Instance = (icu::SharedObject *)icu::NumberFormat::createSharedInstance((uint64_t)a2, 1, a5);
      if (*(int *)a5 > 0) {
        return;
      }
      uint64_t v14 = (uint64_t)SharedInstance;
      sub_18C8917C4(SharedInstance, (icu::SharedObject **)(a1 + 336));
      icu::SharedObject::removeRef(v14);
    }
    *(_DWORD *)(a1 + 352) = v7;
    int v15 = *(unsigned __int8 *)(a1 + 356);
    if ((int)v7 >= 2) {
      uint64_t v7 = 2;
    }
    else {
      uint64_t v7 = v7;
    }
    uint64_t v16 = *(void *)(a1 + 360);
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = 2;
    if (!v15) {
      uint64_t v17 = v7;
    }
    *(void *)(a1 + 360) = icu::ListFormatter::createInstance(a2, 2, dword_18CA9426C[v17], a5);
    uint64_t v18 = *(void *)(a1 + 368);
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    *(void *)(a1 + 368) = icu::ListFormatter::createInstance(a2, 0, 0, a5);
  }
  else if (a4)
  {
    unint64_t v11 = *(void (**)(unint64_t))(*(void *)a4 + 8);
    v11(a4);
  }
}

uint64_t icu::MeasureFormat::MeasureFormat(uint64_t a1, const char **a2, int a3, unint64_t a4, UErrorCode *a5)
{
  uint64_t v10 = icu::Format::Format(a1);
  *(void *)uint64_t v10 = &unk_1EDA4E1E8;
  *(void *)(v10 + 336) = 0;
  *(void *)(v10 + 344) = 0;
  if (a3 == 8) {
    int v11 = 1;
  }
  else {
    int v11 = a3;
  }
  *(void *)(v10 + 328) = 0;
  *(_DWORD *)(v10 + 352) = v11;
  *(unsigned char *)(v10 + 356) = a3 == 8;
  *(void *)(v10 + 360) = 0;
  *(void *)(v10 + 368) = 0;
  icu::MeasureFormat::initMeasureFormat(v10, a2, v11, a4, a5);
  return a1;
}

icu::MeasureFormat *icu::MeasureFormat::MeasureFormat(icu::MeasureFormat *this, const icu::MeasureFormat *a2)
{
  uint64_t v4 = icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *(void *)uint64_t v4 = &unk_1EDA4E1E8;
  long long v5 = *(_OWORD *)((char *)a2 + 328);
  *(_OWORD *)(v4 + 328) = v5;
  *(void *)(v4 + 344) = *((void *)a2 + 43);
  *(_DWORD *)(v4 + 352) = *((_DWORD *)a2 + 88);
  *(unsigned char *)(v4 + 356) = *((unsigned char *)a2 + 356);
  *(void *)(v4 + 360) = 0;
  *(void *)(v4 + 368) = 0;
  icu::SharedObject::addRef(v5);
  icu::SharedObject::addRef(*((void *)this + 42));
  icu::SharedObject::addRef(*((void *)this + 43));
  uint64_t v7 = (uint64_t *)*((void *)a2 + 45);
  if (v7)
  {
    uint64_t v8 = (icu::ListFormatter *)icu::UMemory::operator new(v7, (icu::UMemory *)0x18, v6);
    if (v8) {
      uint64_t v8 = (icu::ListFormatter *)icu::ListFormatter::ListFormatter(v8, *((const icu::ListFormatter **)a2 + 45));
    }
    *((void *)this + 45) = v8;
  }
  int v9 = (uint64_t *)*((void *)a2 + 46);
  if (v9)
  {
    uint64_t v10 = (icu::ListFormatter *)icu::UMemory::operator new(v9, (icu::UMemory *)0x18, v6);
    if (v10) {
      uint64_t v10 = (icu::ListFormatter *)icu::ListFormatter::ListFormatter(v10, *((const icu::ListFormatter **)a2 + 46));
    }
    *((void *)this + 46) = v10;
  }
  return this;
}

uint64_t icu::MeasureFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::Format::operator=(a1, a2);
    sub_18C8917C4(*(icu::SharedObject **)(a2 + 328), (icu::SharedObject **)(a1 + 328));
    sub_18C8917C4(*(icu::SharedObject **)(a2 + 336), (icu::SharedObject **)(a1 + 336));
    sub_18C8917C4(*(icu::SharedObject **)(a2 + 344), (icu::SharedObject **)(a1 + 344));
    *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
    *(unsigned char *)(a1 + 356) = *(unsigned char *)(a2 + 356);
    uint64_t v5 = *(void *)(a1 + 360);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    unint64_t v6 = *(uint64_t **)(a2 + 360);
    if (v6)
    {
      uint64_t v7 = (icu::ListFormatter *)icu::UMemory::operator new(v6, (icu::UMemory *)0x18, v4);
      if (v7) {
        uint64_t v7 = (icu::ListFormatter *)icu::ListFormatter::ListFormatter(v7, *(const icu::ListFormatter **)(a2 + 360));
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    *(void *)(a1 + 360) = v7;
    uint64_t v8 = *(void *)(a1 + 368);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    int v9 = *(uint64_t **)(a2 + 368);
    if (v9)
    {
      uint64_t v10 = (icu::ListFormatter *)icu::UMemory::operator new(v9, (icu::UMemory *)0x18, v4);
      if (v10) {
        uint64_t v10 = (icu::ListFormatter *)icu::ListFormatter::ListFormatter(v10, *(const icu::ListFormatter **)(a2 + 368));
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    *(void *)(a1 + 368) = v10;
  }
  return a1;
}

uint64_t icu::MeasureFormat::MeasureFormat(icu::MeasureFormat *this)
{
  uint64_t result = icu::Format::Format((uint64_t)this);
  *(void *)uint64_t result = &unk_1EDA4E1E8;
  *(void *)(result + 336) = 0;
  *(void *)(result + 344) = 0;
  *(void *)(result + 328) = 0;
  *(_DWORD *)(result + 352) = 1;
  *(unsigned char *)(result + 356) = 0;
  *(void *)(result + 360) = 0;
  *(void *)(result + 368) = 0;
  return result;
}

{
  uint64_t result;

  uint64_t result = icu::Format::Format((uint64_t)this);
  *(void *)uint64_t result = &unk_1EDA4E1E8;
  *(void *)(result + 336) = 0;
  *(void *)(result + 344) = 0;
  *(void *)(result + 328) = 0;
  *(_DWORD *)(result + 352) = 1;
  *(unsigned char *)(result + 356) = 0;
  *(void *)(result + 360) = 0;
  *(void *)(result + 368) = 0;
  return result;
}

void icu::MeasureFormat::~MeasureFormat(icu::MeasureFormat *this)
{
  *(void *)this = &unk_1EDA4E1E8;
  uint64_t v2 = *((void *)this + 41);
  if (v2) {
    icu::SharedObject::removeRef(v2);
  }
  uint64_t v3 = *((void *)this + 42);
  if (v3) {
    icu::SharedObject::removeRef(v3);
  }
  uint64_t v4 = *((void *)this + 43);
  if (v4) {
    icu::SharedObject::removeRef(v4);
  }
  uint64_t v5 = *((void *)this + 45);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 46);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }

  icu::Format::~Format(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::MeasureFormat::~MeasureFormat(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::MeasureFormat::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v12 = v2;
  uint64_t v13 = v3;
  uint64_t result = icu::Format::operator==((void *)a1, (void *)a2);
  if (result)
  {
    if (*(_DWORD *)(a1 + 352) == *(_DWORD *)(a2 + 352)
      && *(unsigned __int8 *)(a1 + 356) == *(unsigned __int8 *)(a2 + 356)
      && (*(void *)(a1 + 328) == *(void *)(a2 + 328)
       || (int v11 = 0,
           LocaleID = (const char *)icu::Format::getLocaleID(a1, 1, &v11),
           uint64_t v8 = (const char *)icu::Format::getLocaleID(a2, 1, &v11),
           v11 <= 0)
       && !strcmp(LocaleID, v8)))
    {
      uint64_t v9 = *(void *)(a1 + 336);
      uint64_t v10 = *(void *)(a2 + 336);
      if (v9 == v10) {
        return 1;
      }
      else {
        return (*(uint64_t (**)(void, void))(**(void **)(v9 + 24) + 24))(*(void *)(v9 + 24), *(void *)(v10 + 24));
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t icu::MeasureFormat::getLocaleID(icu::MeasureFormat *this, UErrorCode *a2)
{
  return icu::Format::getLocaleID((uint64_t)this, 1, (int *)a2);
}

icu::MeasureFormat *icu::MeasureFormat::clone@<X0>(icu::MeasureFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::MeasureFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x178, a2);
  if (result) {
    return icu::MeasureFormat::MeasureFormat(result, this);
  }
  return result;
}

icu::UnicodeString *icu::MeasureFormat::format(icu::MeasureFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return a3;
  }
  if (icu::Formattable::getType(a2) != 6
    || (Object = (const void *)icu::Formattable::getObject(a2)) == 0
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return a3;
  }
  uint64_t v12 = *(const icu::NumberFormat **)(*((void *)this + 42) + 24);

  return icu::MeasureFormat::formatMeasure(this, v11, v12, a3, a4, a5);
}

icu::UnicodeString *icu::MeasureFormat::formatMeasure(icu::MeasureFormat *this, const icu::Measure *a2, const icu::NumberFormat *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 > 0) {
    return a4;
  }
  int v11 = (const icu::Measure *)((char *)a2 + 8);
  uint64_t v12 = (icu::MeasureUnit *)*((void *)a2 + 15);
  Type = icu::MeasureUnit::getType(v12);
  if (!strcmp(Type, "currency"))
  {
    *(void *)us = 0;
    Subtype = icu::MeasureUnit::getSubtype(v12);
    u_charsToUChars(Subtype, us, 4);
    int v25 = *((_DWORD *)this + 88);
    if (v25 >= 2) {
      int v25 = 2;
    }
    int32_t v26 = (uint64_t *)(*((void *)this + 41) + 8 * v25);
    uint64_t v27 = v26[5];
    int v28 = icu::UMemory::operator new(v26, (icu::UMemory *)0x80, v24);
    unint64_t v29 = (icu::UObject *)v28;
    if (v28)
    {
      long long v72 = us;
      icu::CurrencyAmount::CurrencyAmount(v28, v11, &v72, a6);
    }
    icu::Formattable::Formattable((icu::Formattable *)&v74, v29);
    a4 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, uint64_t *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)v27 + 40))(v27, &v74, a4, a5, a6);
    icu::Formattable::~Formattable((icu::Formattable *)&v74);
    return a4;
  }
  unsigned int v14 = *((unsigned __int16 *)a4 + 4);
  int v15 = (__int16)v14;
  LODWORD(v16) = v14 >> 5;
  if (v15 >= 0) {
    uint64_t v16 = v16;
  }
  else {
    uint64_t v16 = *((unsigned int *)a4 + 3);
  }
  uint64_t v71 = v16;
  int v17 = *((_DWORD *)a5 + 2);
  if (v17 == 0x40000000) {
    *((_DWORD *)a5 + 2) = -1;
  }
  if (!v18)
  {
    memset(&us[4], 0, 56);
    *(void *)us = &unk_1EDA47700;
    us[4] = 2;
    unsigned int v30 = icu::QuantityFormatter::selectPlural(v11, a3, *(const icu::NumberFormat **)(*((void *)this + 43) + 24), (const icu::PluralRules *)us, a5, a6, v19);
    if (v17 == 0x40000000)
    {
      *((void *)a5 + 1) = 0x40000000;
      int v31 = us[4] >> 5;
      if ((us[4] & 0x8000u) != 0) {
        int v31 = *(_DWORD *)&us[6];
      }
      *((_DWORD *)a5 + 4) = v31;
    }
    long long v83 = 0u;
    long long v82 = 0u;
    long long v81 = 0u;
    long long v80 = 0u;
    int v32 = 1;
    icu::Format::getLocale((uint64_t)this, 1, (int *)a6, (icu::Locale *)&v74);
    uint64_t v33 = *((int *)this + 88);
    if (v33 <= 3) {
      int v32 = dword_18CA94320[v33];
    }
    sub_18C972E34((uint64_t)&v74, v12, v32, v30, (int *)a6, (uint64_t)&v80);
    icu::Locale::~Locale((icu::Locale *)&v74);
    unsigned int v34 = (void *)*(unsigned int *)a6;
    if ((int)v34 > 0)
    {
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v80);
LABEL_78:
      icu::UnicodeString::~UnicodeString((void *)v35, (icu::UnicodeString *)us);
      return a4;
    }
    uint64_t v74 = 0;
    long long v76 = 0u;
    uint64_t v79 = 0;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = &unk_1EDA47700;
    LOWORD(v76) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v74, (const icu::UnicodeString *)&v80, 0, 1, 0, a6);
    icu::QuantityFormatter::format((icu::QuantityFormatter *)&v74, (const icu::SimpleFormatter *)us, a4, a5, a6, v68);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v74);
    icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)&v80);
    icu::UnicodeString::~UnicodeString(v70, (icu::UnicodeString *)us);
    goto LABEL_48;
  }
  uint64_t v20 = v18;
  uint64_t v100 = 0;
  memset(v99, 0, sizeof(v99));
  long long v98 = 0u;
  long long v97 = 0u;
  long long v96 = 0u;
  long long v95 = 0u;
  long long v94 = 0u;
  long long v93 = 0u;
  long long v92 = 0u;
  long long v91 = 0u;
  long long v90 = 0u;
  long long v89 = 0u;
  long long v88 = 0u;
  long long v87 = 0u;
  long long v86 = 0u;
  long long v85 = 0u;
  long long v84 = 0u;
  long long v83 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  long long v80 = 0u;
  sub_18C9140A8((uint64_t)&v80);
  if (icu::DecimalFormat::toNumberFormatter(v20, a6))
  {
    double Double = icu::Formattable::getDouble(v11, a6);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v99, Double);
    icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unit();
  }
  unsigned int v36 = *((unsigned __int16 *)a4 + 4);
  int v37 = (__int16)v36;
  unsigned int v38 = v36 >> 5;
  if (v37 >= 0) {
    unint64_t v39 = v38;
  }
  else {
    unint64_t v39 = *((unsigned int *)a4 + 3);
  }
  icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)&v80, a5, (icu::FieldPosition *)v39, a6, v21);
  if (v17 == 0x40000000)
  {
    *((_DWORD *)a5 + 2) = 0;
    unsigned int v41 = *((unsigned __int16 *)a4 + 4);
    int v42 = (__int16)v41;
    unsigned int v43 = v41 >> 5;
    if (v42 >= 0) {
      unint64_t v44 = v43;
    }
    else {
      unint64_t v44 = *((unsigned int *)a4 + 3);
    }
    icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)&v80, a5, (icu::FieldPosition *)v44, a6, v40);
    int v47 = *((_DWORD *)a5 + 3);
    int v46 = *((_DWORD *)a5 + 4);
    *((_DWORD *)a5 + 2) = 1;
    unsigned int v48 = *((unsigned __int16 *)a4 + 4);
    int v49 = (__int16)v48;
    unsigned int v50 = v48 >> 5;
    if (v49 >= 0) {
      unint64_t v51 = v50;
    }
    else {
      unint64_t v51 = *((unsigned int *)a4 + 3);
    }
    icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)&v80, a5, (icu::FieldPosition *)v51, a6, v45);
    int v52 = *((_DWORD *)a5 + 3);
    int v53 = *((_DWORD *)a5 + 4);
    if (v47 < 0 || v46 <= v47)
    {
      if ((v52 & 0x80000000) == 0 && v53 > v52) {
        goto LABEL_43;
      }
      int v46 = 0;
      *((_DWORD *)a5 + 3) = 0;
    }
    else
    {
      *((_DWORD *)a5 + 3) = v47;
      if (v52 >= v46 && v53 > v52) {
        goto LABEL_43;
      }
    }
    *((_DWORD *)a5 + 4) = v46;
LABEL_43:
    *((_DWORD *)a5 + 2) = 0x40000000;
  }
  icu::FormattedValueStringBuilderImpl::toTempString((icu::FormattedValueStringBuilderImpl *)&v80, (uint64_t)&v74);
  if ((__int16)v75 >= 0) {
    uint64_t v54 = (unsigned __int16)v75 >> 5;
  }
  else {
    uint64_t v54 = HIDWORD(v75);
  }
  icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)&v74, 0, v54);
  icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)&v74);
  icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)&v80);
LABEL_48:
  if (*((unsigned char *)this + 356))
  {
    memset(us, 0, 64);
    icu::Format::getLocale((uint64_t)this, 1, (int *)a6, (icu::Locale *)&v74);
    sub_18C972E34((uint64_t)&v74, v12, 0, 5u, (int *)a6, (uint64_t)us);
    icu::Locale::~Locale((icu::Locale *)&v74);
    uint64_t v35 = *(unsigned int *)a6;
    if ((int)v35 <= 0)
    {
      int32_t v56 = (us[4] & 0x8000u) == 0 ? us[4] >> 5 : *(_DWORD *)&us[6];
      if (icu::UnicodeString::doIndexOf((uint64_t)us, 0x20u, 0, v56) == -1)
      {
        int32_t v57 = (us[4] & 0x8000u) == 0 ? us[4] >> 5 : *(_DWORD *)&us[6];
        if (icu::UnicodeString::doIndexOf((uint64_t)us, 0xA0u, 0, v57) == -1)
        {
          int32_t v58 = (us[4] & 0x8000u) == 0 ? us[4] >> 5 : *(_DWORD *)&us[6];
          if (icu::UnicodeString::doIndexOf((uint64_t)us, 0x202Fu, 0, v58) == -1)
          {
            unsigned int v59 = *((unsigned __int16 *)a4 + 4);
            int v60 = (__int16)v59;
            unsigned int v61 = v59 >> 5;
            int v62 = v60 >= 0 ? v61 : *((_DWORD *)a4 + 3);
            uint64_t v35 = v71;
            if ((int)v71 < v62)
            {
              uint64_t v63 = (int)v71;
              do
              {
                uint64_t v35 = *((unsigned __int16 *)a4 + 4);
                if ((v35 & 0x8000u) == 0) {
                  unsigned int v64 = v35 >> 5;
                }
                else {
                  unsigned int v64 = *((_DWORD *)a4 + 3);
                }
                if (v64 > v63)
                {
                  if ((v35 & 2) != 0) {
                    BOOL v65 = (char *)a4 + 10;
                  }
                  else {
                    BOOL v65 = (char *)*((void *)a4 + 3);
                  }
                  uint64_t v35 = *(unsigned __int16 *)&v65[2 * v63];
                  if (v35 == 32)
                  {
                    icu::UnicodeString::doReplace((uint64_t)a4, v63, 1, 0, 0, 0);
                    uint64_t v35 = *((int *)a5 + 3);
                    if (v63 < v35)
                    {
                      uint64_t v35 = (v35 - 1);
                      int v66 = *((_DWORD *)a5 + 4) - 1;
                      *((_DWORD *)a5 + 3) = v35;
                      *((_DWORD *)a5 + 4) = v66;
                    }
                  }
                }
                ++v63;
              }
              while (v62 != v63);
            }
          }
        }
      }
    }
    goto LABEL_78;
  }
  return a4;
}

icu::UnicodeString *icu::MeasureFormat::formatMeasurePerUnit(icu::MeasureFormat *this, const icu::Measure *a2, const icu::MeasureUnit *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 <= 0)
  {
    if (v10)
    {
      int v11 = v10;
      uint64_t v26 = 0;
      memset(v25, 0, sizeof(v25));
      memset(v24, 0, sizeof(v24));
      sub_18C9140A8((uint64_t)v24);
      if (icu::DecimalFormat::toNumberFormatter(v11, a6))
      {
        double Double = icu::Formattable::getDouble((const icu::Measure *)((char *)a2 + 8), a6);
        icu::number::impl::DecimalQuantity::setToDouble((void **)v25, Double);
        icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unit();
      }
      unsigned int v14 = *((unsigned __int16 *)a4 + 4);
      int v15 = (__int16)v14;
      unsigned int v16 = v14 >> 5;
      if (v15 >= 0) {
        unint64_t v17 = v16;
      }
      else {
        unint64_t v17 = *((unsigned int *)a4 + 3);
      }
      icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)v24, a5, (icu::FieldPosition *)v17, a6, v12);
      icu::FormattedValueStringBuilderImpl::toTempString((icu::FormattedValueStringBuilderImpl *)v24, (uint64_t)v21);
      if ((v22 & 0x8000u) == 0) {
        uint64_t v18 = v22 >> 5;
      }
      else {
        uint64_t v18 = v23;
      }
      icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v21, 0, v18);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v21);
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v24);
    }
    else
    {
      *a6 = U_UNSUPPORTED_ERROR;
    }
  }
  return a4;
}

uint64_t icu::MeasureFormat::getNumberFormatInternal(icu::MeasureFormat *this)
{
  return *(void *)(*((void *)this + 42) + 24);
}

icu::UnicodeString *icu::MeasureFormat::formatMeasures(icu::MeasureFormat *this, const icu::Measure *a2, int a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 > 0 || a3 == 0) {
    return a4;
  }
  uint64_t v12 = a2;
  if (a3 != 1)
  {
    if (*((_DWORD *)this + 88) != 3) {
      goto LABEL_19;
    }
    uint64_t v15 = 0;
    memset(v30, 0, sizeof(v30));
    do
    {
      icu::Formattable::Formattable((icu::Formattable *)&v30[v15]);
      v15 += 7;
    }
    while (v15 != 21);
    int v16 = sub_18C947E2C((uint64_t)v12, a3, (double *)v30, (int *)a6);
    if (v16 >= 1) {
      icu::MeasureFormat::formatNumeric(this, (const icu::Formattable *)v30, v16, a4, a6);
    }
    for (uint64_t i = 14; i != -7; i -= 7)
      icu::Formattable::~Formattable((icu::Formattable *)&v30[i]);
    if (v16 <= 0)
    {
LABEL_19:
      if (*((_DWORD *)a5 + 2) == -1)
      {
        if (a3 < 0) {
          uint64_t v18 = -1;
        }
        else {
          uint64_t v18 = ((uint64_t)a3 << 6) | 0x10;
        }
        uint64_t v19 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v18, (unint64_t)a2);
        if (v19)
        {
          uint64_t v20 = v19;
          *uint64_t v19 = 64;
          v19[1] = a3;
          unint64_t v29 = (icu::UnicodeString *)(v19 + 2);
          uint64_t v21 = 2;
          do
          {
            unsigned __int16 v22 = &v19[v21];
            void *v22 = &unk_1EDA47700;
            *((_WORD *)v22 + 4) = 2;
            v21 += 8;
          }
          while (v22 + 8 != &v19[8 * (uint64_t)a3 + 2]);
          uint64_t v23 = (a3 - 1);
          if (a3 >= 1)
          {
            uint64_t v24 = a3;
            int v25 = (icu::UnicodeString *)(v19 + 2);
            do
            {
              if (v23) {
                uint64_t v26 = (const icu::NumberFormat **)(*((void *)this + 41) + 64);
              }
              else {
                uint64_t v26 = (const icu::NumberFormat **)(*((void *)this + 42) + 24);
              }
              icu::MeasureFormat::formatMeasure(this, v12, *v26, v25, a5, a6);
              --v23;
              int v25 = (icu::UnicodeString *)((char *)v25 + 64);
              uint64_t v12 = (const icu::Measure *)((char *)v12 + 128);
              --v24;
            }
            while (v24);
          }
          icu::ListFormatter::format(*((icu::ListFormatter **)this + 45), v29, a3, a4, a6);
          uint64_t v27 = (void *)v20[1];
          if (v27)
          {
            uint64_t v28 = (void)v27 << 6;
            do
            {
              icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)((char *)v20 + v28 - 48));
              v28 -= 64;
            }
            while (v28);
          }
          icu::UMemory::operator delete[](v20);
        }
        else
        {
          *a6 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
      else
      {
        icu::MeasureFormat::formatMeasuresSlowTrack(this, v12, a3, a4, a5, a6);
      }
    }
    return a4;
  }
  unsigned int v14 = *(const icu::NumberFormat **)(*((void *)this + 42) + 24);

  return icu::MeasureFormat::formatMeasure(this, a2, v14, a4, a5, a6);
}

uint64_t sub_18C947E2C(uint64_t a1, int a2, double *a3, int *a4)
{
  if (*a4 <= 0 && a2 >= 1)
  {
    LODWORD(v7) = 0;
    uint64_t v8 = (uint64_t)(a3 + 14);
    uint64_t v9 = (uint64_t)(a3 + 28);
    uint64_t v10 = a2;
    for (uint64_t i = (icu::MeasureUnit **)(a1 + 120); ; i += 16)
    {
      if (sub_18C949674(*i, "hour"))
      {
        if ((int)v7 > 0) {
          return 0;
        }
        icu::Formattable::operator=((uint64_t)a3, (uint64_t)(i - 14));
        if (a3[1] < 0.0) {
          return 0;
        }
        uint64_t v7 = 1;
      }
      else if (sub_18C949674(*i, "minute"))
      {
        if ((int)v7 > 1) {
          return 0;
        }
        icu::Formattable::operator=(v8, (uint64_t)(i - 14));
        if (a3[15] < 0.0) {
          return 0;
        }
        uint64_t v7 = v7 | 2;
      }
      else
      {
        BOOL v12 = sub_18C949674(*i, "second");
        uint64_t result = 0;
        if (!v12 || (int)v7 > 3) {
          return result;
        }
        icu::Formattable::operator=(v9, (uint64_t)(i - 14));
        if (a3[29] < 0.0) {
          return 0;
        }
        uint64_t v7 = v7 | 4;
      }
      uint64_t result = v7;
      if (!--v10) {
        return result;
      }
    }
  }
  return 0;
}

icu::UnicodeString *icu::MeasureFormat::formatNumeric(icu::MeasureFormat *this, const icu::Formattable *a2, int a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    long long v21 = 0u;
    uint64_t v24 = 0;
    long long v23 = 0u;
    long long v22 = 0u;
    uint64_t v20 = (UChar *)&unk_1EDA47700;
    LOWORD(v21) = 2;
    double Double = icu::Formattable::getDouble(a2, a5);
    double v11 = icu::Formattable::getDouble((const icu::Formattable *)((char *)a2 + 112), a5);
    icu::Formattable::getDouble((const icu::Formattable *)((char *)a2 + 224), a5);
    uint64_t v12 = *(unsigned int *)a5;
    if ((int)v12 > 0)
    {
LABEL_16:
      icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v20);
      return a4;
    }
    if ((a3 & 0xFFFFFFFD) == 5)
    {
      icu::UnicodeString::operator=(&v20, (UChar **)(*(void *)(*((void *)this + 41) + 72) + 136));
      uprv_trunc(Double);
    }
    else
    {
      if (a3 != 6)
      {
        if (a3 != 3)
        {
LABEL_14:
          uint64_t v12 = 5;
          *a5 = U_INTERNAL_PROGRAM_ERROR;
          goto LABEL_16;
        }
        icu::UnicodeString::operator=(&v20, (UChar **)(*(void *)(*((void *)this + 41) + 72) + 8));
        uprv_trunc(Double);
LABEL_10:
        uint64_t v13 = *(const void **)(*((void *)this + 42) + 24);
        if (v13)
        {
          if (v14)
          {
            uint64_t v15 = v14;
            long long v18 = 0u;
            long long v19 = 0u;
            memset(v17, 0, sizeof(v17));
            sub_18C913B28((uint64_t)v17);
            long long v19 = 0uLL;
            *((void *)&v18 + 1) = 0;
            if (icu::DecimalFormat::toNumberFormatter(v15, a5))
            {
              icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)2);
              icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::integerWidth();
            }
            icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v17);
            goto LABEL_16;
          }
        }
        goto LABEL_14;
      }
      icu::UnicodeString::operator=(&v20, (UChar **)(*(void *)(*((void *)this + 41) + 72) + 72));
    }
    uprv_trunc(v11);
    goto LABEL_10;
  }
  return a4;
}

icu::UnicodeString *icu::MeasureFormat::formatMeasuresSlowTrack(icu::MeasureFormat *this, const icu::Measure *a2, int a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    uint64_t v8 = a2;
    uint64_t v25 = a4;
    v31[2] = 0;
    v31[0] = &unk_1EDA4C7F0;
    v31[1] = 0xFFFFFFFFLL;
    int v10 = *((_DWORD *)a5 + 2);
    uint64_t v28 = &unk_1EDA4C7F0;
    int v29 = v10;
    memset(v30, 0, sizeof(v30));
    uint64_t v11 = a3;
    if (a3 < 0) {
      uint64_t v12 = -1;
    }
    else {
      uint64_t v12 = ((uint64_t)a3 << 6) | 0x10;
    }
    uint64_t v13 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v12, (unint64_t)a2);
    if (v13)
    {
      *uint64_t v13 = 64;
      v13[1] = v11;
      unsigned int v14 = (const icu::UnicodeString *)(v13 + 2);
      if (a3)
      {
        uint64_t v15 = v13 + 2;
        int v16 = v13 + 2;
        do
        {
          *(void *)int v16 = &unk_1EDA47700;
          _OWORD v16[4] = 2;
          v15 += 8;
          v16 += 32;
        }
        while (v16 != (_WORD *)((char *)v14 + 64 * v11));
      }
      uint64_t v27 = v13 + 2;
    }
    else
    {
      unsigned int v14 = 0;
      uint64_t v27 = 0;
      if (*(int *)a6 <= 0)
      {
        unsigned int v14 = 0;
        *a6 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    if (a3 < 1)
    {
      int v19 = -1;
    }
    else
    {
      int v17 = 0;
      uint64_t v18 = 0;
      int v19 = -1;
      do
      {
        if ((unint64_t)(a3 - 1) << 6 == v18) {
          uint64_t v20 = (const icu::NumberFormat **)(*((void *)this + 42) + 24);
        }
        else {
          uint64_t v20 = (const icu::NumberFormat **)(*((void *)this + 41) + 64);
        }
        long long v21 = *v20;
        long long v22 = (const icu::UnicodeString *)((char *)v14 + v18);
        if (v19 == -1)
        {
          icu::MeasureFormat::formatMeasure(this, v8, v21, v22, (icu::FieldPosition *)&v28, a6);
          if (*(int *)a6 > 0) {
            goto LABEL_30;
          }
          if (*(void *)v30) {
            int v19 = v17;
          }
          else {
            int v19 = -1;
          }
        }
        else
        {
          icu::MeasureFormat::formatMeasure(this, v8, v21, v22, (icu::FieldPosition *)v31, a6);
        }
        v18 += 64;
        uint64_t v8 = (const icu::Measure *)((char *)v8 + 128);
        ++v17;
      }
      while ((unint64_t)a3 << 6 != v18);
    }
    int v26 = 0;
    icu::ListFormatter::format(*((icu::ListFormatter **)this + 45), v14, a3, v25, v19, &v26, a6);
    if (*(int *)a6 <= 0 && v19 != -1 && v26 != -1) {
      *(int32x2_t *)((char *)a5 + 12) = vadd_s32(*(int32x2_t *)v30, vdup_n_s32(v26));
    }
LABEL_30:
    sub_18C7F9F20((uint64_t *)&v27);
    icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v28);
    icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v31);
    return v25;
  }
  return a4;
}

icu::UnicodeString *icu::MeasureFormat::formatMeasures(icu::ListFormatter **this, icu::MeasureUnit **a2, int a3, icu::UnicodeString *a4, icu::FieldPositionIterator *a5, UErrorCode *a6)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 <= 0)
  {
    uint64_t v75 = 0;
    *(_OWORD *)long long v73 = 0u;
    long long v74 = 0u;
    icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v73, a5, a6);
    if (a3)
    {
      uint64_t v12 = (a3 - 1);
      if (a3 == 1)
      {
        unsigned int v13 = *((unsigned __int16 *)a4 + 4);
        int v14 = (__int16)v13;
        int v15 = v13 >> 5;
        if (v14 >= 0) {
          int v16 = v15;
        }
        else {
          int v16 = *((_DWORD *)a4 + 3);
        }
        int UAMeasureUnit = icu::MeasureUnit::getUAMeasureUnit(a2[15]);
        *(void *)&long long v77 = 0;
        *(void *)&long long v76 = &unk_1EDA4C7F0;
        *((void *)&v76 + 1) = 0x40000000;
        icu::MeasureFormat::formatMeasure((icu::MeasureFormat *)this, (const icu::Measure *)a2, *((const icu::NumberFormat **)this[42] + 3), a4, (icu::FieldPosition *)&v76, a6);
        unsigned int v18 = *((unsigned __int16 *)a4 + 4);
        int v19 = (__int16)v18;
        int v20 = v18 >> 5;
        if (v19 >= 0) {
          int v21 = v20;
        }
        else {
          int v21 = *((_DWORD *)a4 + 3);
        }
        icu::FieldPositionIteratorHandler::addAttribute(v73, UAMeasureUnit, v16, v21);
        icu::FieldPositionIteratorHandler::addAttribute(v73, UAMeasureUnit | 0x40000000, SHIDWORD(v76), v77);
        icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v76);
      }
      else
      {
        if (*((_DWORD *)this + 88) == 3)
        {
          uint64_t v22 = 0;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v76 = 0u;
          do
          {
            icu::Formattable::Formattable((icu::Formattable *)((char *)&v76 + v22));
            v22 += 112;
          }
          while (v22 != 336);
          int v23 = sub_18C947E2C((uint64_t)a2, a3, (double *)&v76, (int *)a6);
          if (v23 >= 1) {
            icu::MeasureFormat::formatNumeric((icu::MeasureFormat *)this, (const icu::Formattable *)&v76, v23, a4, a6);
          }
          for (uint64_t i = 224; i != -112; i -= 112)
            icu::Formattable::~Formattable((icu::Formattable *)((char *)&v76 + i));
          if (v23 > 0) {
            goto LABEL_73;
          }
        }
        if (a3 < 0) {
          uint64_t v25 = -1;
        }
        else {
          uint64_t v25 = ((uint64_t)a3 << 6) | 0x10;
        }
        int v26 = (unsigned __int16 *)icu::UMemory::operator new[]((icu::UMemory *)v25, v11);
        if (v26)
        {
          uint64_t v28 = v26;
          *(void *)int v26 = 64;
          *((void *)v26 + 1) = a3;
          int v29 = (const icu::UnicodeString *)(v26 + 8);
          uint64_t v30 = 8;
          do
          {
            uint64_t v31 = &v26[v30];
            *(void *)uint64_t v31 = &unk_1EDA47700;
            v31[4] = 2;
            v30 += 32;
          }
          while (v31 + 32 != &v26[32 * (uint64_t)a3 + 8]);
          BOOL v32 = !is_mul_ok(a3, 0x18uLL);
          if ((unint64_t)(24 * a3) >= 0xFFFFFFFFFFFFFFF0) {
            BOOL v32 = 1;
          }
          if (v32) {
            uint64_t v33 = -1;
          }
          else {
            uint64_t v33 = 24 * a3 + 16;
          }
          unsigned int v34 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v33, v27);
          if (v34)
          {
            void *v34 = 24;
            v34[1] = a3;
            uint64_t v35 = (icu::FieldPosition *)(v34 + 2);
            uint64_t v36 = 2;
            int v37 = v34;
            do
            {
              unsigned int v38 = &v34[v36];
              *unsigned int v38 = &unk_1EDA4C7F0;
              v38[1] = 0xFFFFFFFFLL;
              *((_DWORD *)v38 + 4) = 0;
              v36 += 3;
            }
            while (v38 + 3 != &v34[3 * a3 + 2]);
            if (a3 <= 0)
            {
              icu::ListFormatter::format(this[45], v29, a3, a4, a6);
            }
            else
            {
              long long v70 = v34;
              uint64_t v71 = a2;
              long long v72 = a4;
              unint64_t v39 = v29;
              uint64_t v40 = a3;
              uint64_t v41 = a3;
              int v42 = (const icu::Measure *)a2;
              long long v69 = v39;
              unsigned int v43 = v39;
              do
              {
                if (v12) {
                  unint64_t v44 = (const icu::NumberFormat **)((char *)this[41] + 64);
                }
                else {
                  unint64_t v44 = (const icu::NumberFormat **)((char *)this[42] + 24);
                }
                int v45 = *v44;
                *((_DWORD *)v35 + 2) = 0x40000000;
                icu::MeasureFormat::formatMeasure((icu::MeasureFormat *)this, v42, v45, v43, v35, a6);
                --v12;
                unsigned int v43 = (icu::UnicodeString *)((char *)v43 + 64);
                int v42 = (const icu::Measure *)((char *)v42 + 128);
                uint64_t v35 = (icu::FieldPosition *)((char *)v35 + 24);
                --v41;
              }
              while (v41);
              a4 = v72;
              icu::ListFormatter::format(this[45], v69, a3, v72, a6);
              int v46 = v28 + 12;
              int v37 = v70;
              int v47 = v71 + 15;
              unsigned int v48 = v70 + 4;
              do
              {
                unsigned int v49 = *v46;
                if ((v49 & 0x8000u) == 0) {
                  int32_t v50 = v49 >> 5;
                }
                else {
                  int32_t v50 = *((_DWORD *)v46 + 1);
                }
                if ((v49 & 1) == 0 && v50 >= 1)
                {
                  unsigned int v51 = *((unsigned __int16 *)v72 + 4);
                  int v52 = (__int16)v51;
                  unsigned int v53 = v51 >> 5;
                  int32_t v54 = v52 >= 0 ? v53 : *((_DWORD *)v72 + 3);
                  uint64_t v55 = (v49 & 2) != 0 ? (uint64_t)(v46 + 1) : *((void *)v46 + 2);
                  int v56 = icu::UnicodeString::indexOf((uint64_t)v72, v55, 0, v50, 0, v54);
                  if ((v56 & 0x80000000) == 0)
                  {
                    int v57 = v56;
                    int v58 = icu::MeasureUnit::getUAMeasureUnit(*v47);
                    unsigned int v59 = *v46;
                    int v60 = (v59 & 0x8000) != 0 ? *((_DWORD *)v46 + 1) : v59 >> 5;
                    icu::FieldPositionIteratorHandler::addAttribute(v73, v58, v57, v60 + v57);
                    int v61 = *(v48 - 1);
                    if ((v61 & 0x80000000) == 0 && *v48 > v61) {
                      icu::FieldPositionIteratorHandler::addAttribute(v73, v58 | 0x40000000, v61 + v57, *v48 + v57);
                    }
                  }
                }
                v46 += 32;
                v47 += 16;
                v48 += 6;
                --v40;
              }
              while (v40);
            }
            unsigned int v64 = (void *)*((void *)v28 + 1);
            if (v64)
            {
              uint64_t v65 = (void)v64 << 6;
              do
              {
                icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)((char *)v28 + v65 - 48));
                v65 -= 64;
              }
              while (v65);
            }
            icu::UMemory::operator delete[](v28);
            uint64_t v66 = v37[1];
            if (v66)
            {
              uint64_t v67 = 3 * v66;
              do
              {
                icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v37[v67 - 1]);
                v67 -= 3;
              }
              while (v67 * 8);
            }
            icu::UMemory::operator delete[](v37);
            goto LABEL_73;
          }
          int v62 = (void *)*((void *)v28 + 1);
          if (v62)
          {
            uint64_t v63 = (void)v62 << 6;
            do
            {
              icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)((char *)v28 + v63 - 48));
              v63 -= 64;
            }
            while (v63);
          }
          icu::UMemory::operator delete[](v28);
        }
        *a6 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
LABEL_73:
    icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v73);
  }
  return a4;
}

void icu::MeasureFormat::getUnitDisplayName(icu::MeasureFormat *this@<X0>, const icu::MeasureUnit *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v8 = 1;
  icu::Format::getLocale((uint64_t)this, 1, (int *)a3, (icu::Locale *)v10);
  uint64_t v9 = *((int *)this + 88);
  if (v9 <= 3) {
    int v8 = dword_18CA94320[v9];
  }
  sub_18C972CA8((uint64_t)v10, a2, v8, (int *)a3, a4);
  icu::Locale::~Locale((icu::Locale *)v10);
}

uint64_t icu::MeasureFormat::getLocale@<X0>(icu::MeasureFormat *this@<X0>, UErrorCode *a2@<X1>, icu::Locale *a3@<X8>)
{
  return icu::Format::getLocale((uint64_t)this, 1, (int *)a2, a3);
}

void sub_18C948EB4(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  v11[28] = *MEMORY[0x1E4F143B8];
  uint64_t Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    uint64_t v7 = (icu::SharedObject **)Instance;
    int v9 = 0;
    char v10 = 0;
    int v8 = &unk_1EDA4E268;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18C8D86FC(v7, (const icu::CacheKeyBase *)&v8, 0, (icu::SharedObject **)a2, this);
    int v8 = &unk_1EDA4E268;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }
}

icu::SharedObject *icu::MeasureFormat::adoptNumberFormat(icu::SharedObject *result, unint64_t a2, _DWORD *a3)
{
  uint64_t v4 = (uint64_t *)*a3;
  if ((int)v4 > 0)
  {
    if (!a2) {
      return result;
    }
LABEL_3:
    uint64_t v5 = *(uint64_t (**)(unint64_t))(*(void *)a2 + 8);
    return (icu::SharedObject *)v5(a2);
  }
  uint64_t v7 = result;
  uint64_t result = (icu::SharedObject *)icu::UMemory::operator new(v4, (icu::UMemory *)0x20, a2);
  if (!result)
  {
    *a3 = 7;
    if (!a2) {
      return result;
    }
    goto LABEL_3;
  }
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = &unk_1EDA4FFC8;
  *((void *)result + 3) = a2;

  return sub_18C8917C4(result, (icu::SharedObject **)v7 + 42);
}

BOOL icu::MeasureFormat::setMeasureFormatLocale(icu::MeasureFormat *this, const char **a2, UErrorCode *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 > 0) {
    return 0;
  }
  icu::Format::getLocale((uint64_t)this, 1, (int *)a3, (icu::Locale *)v8);
  BOOL v6 = icu::Locale::operator==((uint64_t)a2, (uint64_t)v8);
  icu::Locale::~Locale((icu::Locale *)v8);
  if (v6) {
    return 0;
  }
  icu::MeasureFormat::initMeasureFormat((uint64_t)this, a2, *((_DWORD *)this + 88), 0, a3);
  return *a3 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t icu::MeasureFormat::getWidth(icu::MeasureFormat *this)
{
  return *((unsigned int *)this + 88);
}

uint64_t icu::MeasureFormat::getCurrencyFormatInternal(icu::MeasureFormat *this)
{
  return *(void *)(*((void *)this + 41) + 56);
}

uint64_t icu::MeasureFormat::getPluralRules(icu::MeasureFormat *this)
{
  return *(void *)(*((void *)this + 43) + 24);
}

icu::UnicodeString *icu::MeasureFormat::getUnitName(icu::MeasureFormat *this, const icu::MeasureUnit *a2, icu::UnicodeString *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  UErrorCode v6 = U_ZERO_ERROR;
  icu::MeasureFormat::getUnitDisplayName(this, a2, &v6, (uint64_t)v7);
  icu::UnicodeString::operator=(a3, (icu::UnicodeString *)v7);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
  return a3;
}

icu::UnicodeString *icu::MeasureFormat::getMultipleUnitNames(icu::MeasureFormat *this, const icu::MeasureUnit **a2, int a3, int a4, icu::UnicodeString *a5)
{
  UErrorCode v6 = a2;
  if (a3 == 1)
  {
    icu::MeasureFormat::getUnitName(this, *a2, a5);
  }
  else if (a3)
  {
    if (a3 < 0) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = ((uint64_t)a3 << 6) | 0x10;
    }
    uint64_t v12 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v11, (unint64_t)a2);
    if (!v12) {
      goto LABEL_23;
    }
    unsigned int v13 = v12;
    *uint64_t v12 = 64;
    v12[1] = a3;
    int v14 = (const icu::UnicodeString *)(v12 + 2);
    uint64_t v15 = 2;
    do
    {
      int v16 = &v12[v15];
      *int v16 = &unk_1EDA47700;
      *((_WORD *)v16 + 4) = 2;
      v15 += 8;
    }
    while (v16 + 8 != &v12[8 * (uint64_t)a3 + 2]);
    if (a3 >= 1)
    {
      uint64_t v17 = a3;
      unsigned int v18 = (icu::UnicodeString *)(v12 + 2);
      do
      {
        int v19 = *v6++;
        icu::MeasureFormat::getUnitName(this, v19, v18);
        unsigned int v18 = (icu::UnicodeString *)((char *)v18 + 64);
        --v17;
      }
      while (v17);
    }
    UErrorCode v24 = U_ZERO_ERROR;
    uint64_t v20 = 360;
    if (!a4) {
      uint64_t v20 = 368;
    }
    icu::ListFormatter::format(*(icu::ListFormatter **)((char *)this + v20), v14, a3, a5, &v24);
    int v21 = (void *)v13[1];
    if (v21)
    {
      uint64_t v22 = (void)v21 << 6;
      do
      {
        icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)((char *)v13 + v22 - 48));
        v22 -= 64;
      }
      while (v22);
    }
    icu::UMemory::operator delete[](v13);
    if (v24 >= U_ILLEGAL_ARGUMENT_ERROR) {
LABEL_23:
    }
      icu::UnicodeString::setToBogus(a5);
  }
  else
  {
    if (*((_WORD *)a5 + 4)) {
      __int16 v9 = 2;
    }
    else {
      __int16 v9 = *((_WORD *)a5 + 4) & 0x1F;
    }
    *((_WORD *)a5 + 4) = v9;
  }
  return a5;
}

void *icu::MeasureFormat::createCurrencyFormat(const char **this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0) {
    return 0;
  }
  uint64_t v7 = icu::UMemory::operator new(v3, (icu::UMemory *)0x178, (unint64_t)a2);
  if (v7) {
    return sub_18C8FDCD0((uint64_t)v7, this, a2);
  }
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t result = 0;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

void *icu::MeasureFormat::createCurrencyFormat(icu::MeasureFormat *this, UErrorCode *a2)
{
  if (*(int *)this > 0) {
    return 0;
  }
  uint64_t Default = icu::Locale::getDefault(this);

  return icu::MeasureFormat::createCurrencyFormat((const char **)Default, (UErrorCode *)this, v5);
}

void sub_18C94944C(uint64_t a1@<X0>, const char *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  v27[8] = *(void **)MEMORY[0x1E4F143B8];
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)(a4 + 56) = 0;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(void *)a4 = &unk_1EDA47700;
  *(_WORD *)(a4 + 8) = 2;
  if (*(int *)a3 <= 0)
  {
    memset(&v27[1], 0, 56);
    v27[0] = (char *)&v27[1] + 5;
    LODWORD(v27[1]) = 40;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v23, "durationUnits");
    uint64_t v8 = icu::CharString::append((icu::CharString *)v27, v23, v24, a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v21, "/");
    __int16 v9 = icu::CharString::append(v8, v21, v22, a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v19, a2);
    icu::CharString::append(v9, v19, v20, a3);
    uint64_t v10 = ures_getByKeyWithFallback(a1, (char *)v27[0], 0, a3);
    uint64_t v11 = v10;
    if (*(int *)a3 <= 0)
    {
      int v26 = 0;
      String = ures_getString(v10, &v26, (int *)a3);
      if (*(int *)a3 <= 0)
      {
        uint64_t v25 = String;
        icu::UnicodeString::setTo((icu::UnicodeString *)a4, 1, &v25, v26);
      }
      unsigned int v13 = *(unsigned __int16 *)(a4 + 8);
      int v14 = (__int16)v13;
      unsigned int v15 = v13 >> 5;
      if (v14 >= 0) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = *(unsigned int *)(a4 + 12);
      }
      Buffer = (_WORD *)icu::UnicodeString::getBuffer((icu::UnicodeString *)a4, v16);
      if ((int)v16 >= 1)
      {
        uint64_t v18 = v16;
        do
        {
          if (*Buffer == 104) {
            _WORD *Buffer = 72;
          }
          ++Buffer;
          --v18;
        }
        while (v18);
      }
      icu::UnicodeString::releaseBuffer(a4, v16);
    }
    if (v11) {
      ures_close(v11);
    }
    if (BYTE4(v27[1])) {
      uprv_free(v27[0]);
    }
  }
}

BOOL sub_18C949674(icu::MeasureUnit *a1, const char *a2)
{
  Type = icu::MeasureUnit::getType(a1);
  if (strcmp(Type, "duration")) {
    return 0;
  }
  Subtype = icu::MeasureUnit::getSubtype(a1);
  return strcmp(Subtype, a2) == 0;
}

void sub_18C9496CC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4E268;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));

  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18C949720(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4E268;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18C949778(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)"N3icu22MeasureFormatCacheDataE" & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu22MeasureFormatCacheDataE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18C9497D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((unsigned char *)v4 + 12) = 0;
    *uint64_t v4 = (uint64_t)&unk_1EDA4E268;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18C94983C(uint64_t a1, char *__dst, int a3)
{
  uint64_t result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18C949878(void *a1, void *a2)
{
  BOOL result = sub_18C8D893C(a1, a2);
  if (result)
  {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

void *icu::MeasureUnit::getStaticClassID(icu::MeasureUnit *this)
{
  return &unk_1E9192499;
}

void *icu::MeasureUnit::getDynamicClassID(icu::MeasureUnit *this)
{
  return &unk_1E9192499;
}

uint64_t icu::MeasureUnit::createGForce(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create(0, 0, (int *)this, a4);
}

uint64_t icu::MeasureUnit::create(icu::MeasureUnit *this, unint64_t a2, int *a3, UErrorCode *a4)
{
  if (*a3 > 0) {
    return 0;
  }
  __int16 v6 = a2;
  char v7 = (char)this;
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x18, a2);
  if (result)
  {
    *(void *)uint64_t result = &unk_1EDA4E2E8;
    *(void *)(result + 8) = 0;
    *(_WORD *)(result + 16) = v6;
    *(unsigned char *)(result + 18) = v7;
  }
  else
  {
    *a3 = 7;
  }
  return result;
}

void icu::MeasureUnit::getGForce(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 0;
}

uint64_t icu::MeasureUnit::MeasureUnit(uint64_t this, char a2, __int16 a3)
{
  *(void *)this = &unk_1EDA4E2E8;
  *(void *)(this + 8) = 0;
  *(_WORD *)(this + 16) = a3;
  *(unsigned char *)(this + 18) = a2;
  return this;
}

{
  *(void *)this = &unk_1EDA4E2E8;
  *(void *)(this + 8) = 0;
  *(_WORD *)(this + 16) = a3;
  *(unsigned char *)(this + 18) = a2;
  return this;
}

uint64_t icu::MeasureUnit::createMeterPerSecondSquared(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create(0, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMeterPerSecondSquared(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 0;
}

uint64_t icu::MeasureUnit::createArcMinute(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)1, 0, (int *)this, a4);
}

void icu::MeasureUnit::getArcMinute(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 1;
}

uint64_t icu::MeasureUnit::createArcSecond(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)1, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getArcSecond(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 1;
}

uint64_t icu::MeasureUnit::createDegree(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)1, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getDegree(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 1;
}

uint64_t icu::MeasureUnit::createRadian(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)1, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getRadian(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 1;
}

uint64_t icu::MeasureUnit::createRevolutionAngle(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)1, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getRevolutionAngle(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 1;
}

uint64_t icu::MeasureUnit::createAcre(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)2, 0, (int *)this, a4);
}

void icu::MeasureUnit::getAcre(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createDunam(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)2, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getDunam(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createHectare(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)2, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getHectare(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareCentimeter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)2, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getSquareCentimeter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareFoot(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)2, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getSquareFoot(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareInch(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)2, 5uLL, (int *)this, a4);
}

void icu::MeasureUnit::getSquareInch(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(unsigned char *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareKilometer(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)2, 6uLL, (int *)this, a4);
}

void icu::MeasureUnit::getSquareKilometer(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(unsigned char *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareMeter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)2, 7uLL, (int *)this, a4);
}

void icu::MeasureUnit::getSquareMeter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(unsigned char *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareMile(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)2, 8uLL, (int *)this, a4);
}

void icu::MeasureUnit::getSquareMile(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareYard(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)2, 9uLL, (int *)this, a4);
}

void icu::MeasureUnit::getSquareYard(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(unsigned char *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createItem(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)3, 0, (int *)this, a4);
}

void icu::MeasureUnit::getItem(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createKarat(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)3, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKarat(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createMilligramOfglucosePerDeciliter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)3, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMilligramOfglucosePerDeciliter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createMilligramPerDeciliter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)3, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMilligramPerDeciliter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createMillimolePerLiter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)3, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMillimolePerLiter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createMole(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)3, 5uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMole(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createPercent(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)3, 6uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPercent(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createPermille(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)3, 7uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPermille(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createPartPerMillion(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)3, 8uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPartPerMillion(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createPermyriad(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)3, 9uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPermyriad(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createLiterPer100Kilometers(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)4, 0, (int *)this, a4);
}

void icu::MeasureUnit::getLiterPer100Kilometers(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 4;
}

uint64_t icu::MeasureUnit::createLiterPerKilometer(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)4, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getLiterPerKilometer(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 4;
}

uint64_t icu::MeasureUnit::createMilePerGallon(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)4, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMilePerGallon(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 4;
}

uint64_t icu::MeasureUnit::createMilePerGallonImperial(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)4, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMilePerGallonImperial(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 4;
}

uint64_t icu::MeasureUnit::createBit(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)6, 0, (int *)this, a4);
}

void icu::MeasureUnit::getBit(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createByte(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)6, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getByte(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createGigabit(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)6, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getGigabit(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createGigabyte(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)6, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getGigabyte(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createKilobit(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)6, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKilobit(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createKilobyte(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)6, 5uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKilobyte(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(unsigned char *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createMegabit(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)6, 6uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMegabit(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(unsigned char *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createMegabyte(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)6, 7uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMegabyte(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(unsigned char *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createPetabyte(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)6, 8uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPetabyte(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createTerabit(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)6, 9uLL, (int *)this, a4);
}

void icu::MeasureUnit::getTerabit(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(unsigned char *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createTerabyte(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)6, 0xAuLL, (int *)this, a4);
}

void icu::MeasureUnit::getTerabyte(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(unsigned char *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createCentury(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 0, (int *)this, a4);
}

void icu::MeasureUnit::getCentury(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createDay(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getDay(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createDayPerson(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getDayPerson(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createDecade(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getDecade(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createHour(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getHour(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createMicrosecond(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 5uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMicrosecond(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createMillisecond(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 6uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMillisecond(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createMinute(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 7uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMinute(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createMonth(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 8uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMonth(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createMonthPerson(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 9uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMonthPerson(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createNanosecond(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 0xAuLL, (int *)this, a4);
}

void icu::MeasureUnit::getNanosecond(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createQuarter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 0xBuLL, (int *)this, a4);
}

void icu::MeasureUnit::getQuarter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 11;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createSecond(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 0xCuLL, (int *)this, a4);
}

void icu::MeasureUnit::getSecond(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 12;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createWeek(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 0xDuLL, (int *)this, a4);
}

void icu::MeasureUnit::getWeek(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 13;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createWeekPerson(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 0xEuLL, (int *)this, a4);
}

void icu::MeasureUnit::getWeekPerson(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 14;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createYear(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 0xFuLL, (int *)this, a4);
}

void icu::MeasureUnit::getYear(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 15;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createYearPerson(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)7, 0x10uLL, (int *)this, a4);
}

void icu::MeasureUnit::getYearPerson(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 16;
  *(unsigned char *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createAmpere(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)8, 0, (int *)this, a4);
}

void icu::MeasureUnit::getAmpere(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 8;
}

uint64_t icu::MeasureUnit::createMilliampere(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)8, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMilliampere(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 8;
}

uint64_t icu::MeasureUnit::createOhm(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)8, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getOhm(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 8;
}

uint64_t icu::MeasureUnit::createVolt(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)8, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getVolt(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 8;
}

uint64_t icu::MeasureUnit::createBritishThermalUnit(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)9, 0, (int *)this, a4);
}

void icu::MeasureUnit::getBritishThermalUnit(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createCalorie(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)9, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getCalorie(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createElectronvolt(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)9, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getElectronvolt(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createFoodcalorie(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)9, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getFoodcalorie(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createJoule(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)9, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getJoule(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createKilocalorie(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)9, 5uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKilocalorie(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(unsigned char *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createKilojoule(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)9, 6uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKilojoule(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(unsigned char *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createKilowattHour(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)9, 7uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKilowattHour(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(unsigned char *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createThermUs(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)9, 8uLL, (int *)this, a4);
}

void icu::MeasureUnit::getThermUs(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createKilowattHourPer100Kilometer(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xA, 0, (int *)this, a4);
}

void icu::MeasureUnit::getKilowattHourPer100Kilometer(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 10;
}

uint64_t icu::MeasureUnit::createNewton(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xA, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getNewton(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 10;
}

uint64_t icu::MeasureUnit::createPoundForce(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xA, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPoundForce(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 10;
}

uint64_t icu::MeasureUnit::createGigahertz(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xB, 0, (int *)this, a4);
}

void icu::MeasureUnit::getGigahertz(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 11;
}

uint64_t icu::MeasureUnit::createHertz(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xB, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getHertz(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 11;
}

uint64_t icu::MeasureUnit::createKilohertz(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xB, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKilohertz(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 11;
}

uint64_t icu::MeasureUnit::createMegahertz(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xB, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMegahertz(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 11;
}

uint64_t icu::MeasureUnit::createDot(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xC, 0, (int *)this, a4);
}

void icu::MeasureUnit::getDot(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createDotPerCentimeter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xC, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getDotPerCentimeter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createDotPerInch(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xC, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getDotPerInch(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createEm(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xC, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getEm(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createMegapixel(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xC, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMegapixel(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createPixel(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xC, 5uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPixel(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(unsigned char *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createPixelPerCentimeter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xC, 6uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPixelPerCentimeter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(unsigned char *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createPixelPerInch(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xC, 7uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPixelPerInch(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(unsigned char *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createAstronomicalUnit(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0, (int *)this, a4);
}

void icu::MeasureUnit::getAstronomicalUnit(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createCentimeter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getCentimeter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createDecimeter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getDecimeter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createEarthRadius(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getEarthRadius(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createFathom(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getFathom(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createFoot(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 5uLL, (int *)this, a4);
}

void icu::MeasureUnit::getFoot(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createFurlong(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 6uLL, (int *)this, a4);
}

void icu::MeasureUnit::getFurlong(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createInch(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 7uLL, (int *)this, a4);
}

void icu::MeasureUnit::getInch(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createKilometer(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 8uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKilometer(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createLightYear(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 9uLL, (int *)this, a4);
}

void icu::MeasureUnit::getLightYear(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createMeter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0xAuLL, (int *)this, a4);
}

void icu::MeasureUnit::getMeter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createMicrometer(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0xBuLL, (int *)this, a4);
}

void icu::MeasureUnit::getMicrometer(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 11;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createMile(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0xCuLL, (int *)this, a4);
}

void icu::MeasureUnit::getMile(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 12;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createMileScandinavian(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0xDuLL, (int *)this, a4);
}

void icu::MeasureUnit::getMileScandinavian(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 13;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createMillimeter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0xEuLL, (int *)this, a4);
}

void icu::MeasureUnit::getMillimeter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 14;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createNanometer(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0xFuLL, (int *)this, a4);
}

void icu::MeasureUnit::getNanometer(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 15;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createNauticalMile(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0x10uLL, (int *)this, a4);
}

void icu::MeasureUnit::getNauticalMile(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 16;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createParsec(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0x11uLL, (int *)this, a4);
}

void icu::MeasureUnit::getParsec(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 17;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createPicometer(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0x12uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPicometer(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 18;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createPoint(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0x13uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPoint(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 19;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createSolarRadius(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0x14uLL, (int *)this, a4);
}

void icu::MeasureUnit::getSolarRadius(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 20;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createYard(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xD, 0x15uLL, (int *)this, a4);
}

void icu::MeasureUnit::getYard(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 21;
  *(unsigned char *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createCandela(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xE, 0, (int *)this, a4);
}

void icu::MeasureUnit::getCandela(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 14;
}

uint64_t icu::MeasureUnit::createLumen(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xE, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getLumen(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 14;
}

uint64_t icu::MeasureUnit::createLux(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xE, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getLux(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 14;
}

uint64_t icu::MeasureUnit::createSolarLuminosity(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xE, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getSolarLuminosity(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 14;
}

uint64_t icu::MeasureUnit::createCarat(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 0, (int *)this, a4);
}

void icu::MeasureUnit::getCarat(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createDalton(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getDalton(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createEarthMass(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getEarthMass(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createGrain(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getGrain(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createGram(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getGram(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createKilogram(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 5uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKilogram(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createMetricTon(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 0xEuLL, (int *)this, a4);
}

void icu::MeasureUnit::getMetricTon(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 14;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createMicrogram(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 6uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMicrogram(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createMilligram(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 7uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMilligram(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createOunce(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 8uLL, (int *)this, a4);
}

void icu::MeasureUnit::getOunce(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createOunceTroy(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 9uLL, (int *)this, a4);
}

void icu::MeasureUnit::getOunceTroy(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createPound(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 0xAuLL, (int *)this, a4);
}

void icu::MeasureUnit::getPound(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createSolarMass(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 0xBuLL, (int *)this, a4);
}

void icu::MeasureUnit::getSolarMass(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 11;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createStone(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 0xCuLL, (int *)this, a4);
}

void icu::MeasureUnit::getStone(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 12;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createTon(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 0xDuLL, (int *)this, a4);
}

void icu::MeasureUnit::getTon(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 13;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createTonne(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0xF, 0xEuLL, (int *)this, a4);
}

void icu::MeasureUnit::getTonne(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 14;
  *(unsigned char *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createGigawatt(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x11, 0, (int *)this, a4);
}

void icu::MeasureUnit::getGigawatt(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createHorsepower(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x11, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getHorsepower(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createKilowatt(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x11, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKilowatt(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createMegawatt(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x11, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMegawatt(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createMilliwatt(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x11, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMilliwatt(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createWatt(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x11, 5uLL, (int *)this, a4);
}

void icu::MeasureUnit::getWatt(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(unsigned char *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createAtmosphere(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x12, 0, (int *)this, a4);
}

void icu::MeasureUnit::getAtmosphere(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createBar(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x12, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getBar(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createGasolineEnergyDensity(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x12, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getGasolineEnergyDensity(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createHectopascal(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x12, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getHectopascal(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createInchHg(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x12, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getInchHg(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createKilopascal(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x12, 5uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKilopascal(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(unsigned char *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createMegapascal(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x12, 6uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMegapascal(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(unsigned char *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createMillibar(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x12, 7uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMillibar(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(unsigned char *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createMillimeterOfMercury(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x12, 8uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMillimeterOfMercury(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createPascal(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x12, 9uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPascal(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(unsigned char *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createPoundPerSquareInch(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x12, 0xAuLL, (int *)this, a4);
}

void icu::MeasureUnit::getPoundPerSquareInch(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(unsigned char *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createBeaufort(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x13, 0, (int *)this, a4);
}

void icu::MeasureUnit::getBeaufort(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 19;
}

uint64_t icu::MeasureUnit::createKilometerPerHour(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x13, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKilometerPerHour(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 19;
}

uint64_t icu::MeasureUnit::createKnot(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x13, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKnot(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 19;
}

uint64_t icu::MeasureUnit::createMeterPerSecond(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x13, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMeterPerSecond(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 19;
}

uint64_t icu::MeasureUnit::createMilePerHour(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x13, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMilePerHour(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 19;
}

uint64_t icu::MeasureUnit::createCelsius(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x14, 0, (int *)this, a4);
}

void icu::MeasureUnit::getCelsius(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 20;
}

uint64_t icu::MeasureUnit::createFahrenheit(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x14, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getFahrenheit(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 20;
}

uint64_t icu::MeasureUnit::createGenericTemperature(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x14, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getGenericTemperature(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 20;
}

uint64_t icu::MeasureUnit::createKelvin(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x14, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getKelvin(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 20;
}

uint64_t icu::MeasureUnit::createNewtonMeter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x15, 0, (int *)this, a4);
}

void icu::MeasureUnit::getNewtonMeter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 21;
}

uint64_t icu::MeasureUnit::createPoundFoot(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x15, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getPoundFoot(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 21;
}

uint64_t icu::MeasureUnit::createAcreFoot(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0, (int *)this, a4);
}

void icu::MeasureUnit::getAcreFoot(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createBarrel(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 1uLL, (int *)this, a4);
}

void icu::MeasureUnit::getBarrel(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createBushel(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 2uLL, (int *)this, a4);
}

void icu::MeasureUnit::getBushel(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCentiliter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 3uLL, (int *)this, a4);
}

void icu::MeasureUnit::getCentiliter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicCentimeter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 4uLL, (int *)this, a4);
}

void icu::MeasureUnit::getCubicCentimeter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicFoot(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 5uLL, (int *)this, a4);
}

void icu::MeasureUnit::getCubicFoot(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicInch(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 6uLL, (int *)this, a4);
}

void icu::MeasureUnit::getCubicInch(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicKilometer(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 7uLL, (int *)this, a4);
}

void icu::MeasureUnit::getCubicKilometer(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicMeter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 8uLL, (int *)this, a4);
}

void icu::MeasureUnit::getCubicMeter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicMile(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 9uLL, (int *)this, a4);
}

void icu::MeasureUnit::getCubicMile(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicYard(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0xAuLL, (int *)this, a4);
}

void icu::MeasureUnit::getCubicYard(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCup(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0xBuLL, (int *)this, a4);
}

void icu::MeasureUnit::getCup(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 11;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCupMetric(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0xCuLL, (int *)this, a4);
}

void icu::MeasureUnit::getCupMetric(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 12;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createDeciliter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0xDuLL, (int *)this, a4);
}

void icu::MeasureUnit::getDeciliter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 13;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createDessertSpoon(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0xEuLL, (int *)this, a4);
}

void icu::MeasureUnit::getDessertSpoon(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 14;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createDessertSpoonImperial(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0xFuLL, (int *)this, a4);
}

void icu::MeasureUnit::getDessertSpoonImperial(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 15;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createDram(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x10uLL, (int *)this, a4);
}

void icu::MeasureUnit::getDram(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 16;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createDrop(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x11uLL, (int *)this, a4);
}

void icu::MeasureUnit::getDrop(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 17;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createFluidOunce(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x12uLL, (int *)this, a4);
}

void icu::MeasureUnit::getFluidOunce(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 18;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createFluidOunceImperial(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x13uLL, (int *)this, a4);
}

void icu::MeasureUnit::getFluidOunceImperial(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 19;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createGallon(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x14uLL, (int *)this, a4);
}

void icu::MeasureUnit::getGallon(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 20;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createGallonImperial(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x15uLL, (int *)this, a4);
}

void icu::MeasureUnit::getGallonImperial(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 21;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createHectoliter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x16uLL, (int *)this, a4);
}

void icu::MeasureUnit::getHectoliter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 22;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createJigger(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x17uLL, (int *)this, a4);
}

void icu::MeasureUnit::getJigger(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 23;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createLiter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x18uLL, (int *)this, a4);
}

void icu::MeasureUnit::getLiter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 24;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createMegaliter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x19uLL, (int *)this, a4);
}

void icu::MeasureUnit::getMegaliter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 25;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createMilliliter(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x1AuLL, (int *)this, a4);
}

void icu::MeasureUnit::getMilliliter(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 26;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createPinch(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x1BuLL, (int *)this, a4);
}

void icu::MeasureUnit::getPinch(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 27;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createPint(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x1CuLL, (int *)this, a4);
}

void icu::MeasureUnit::getPint(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 28;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createPintMetric(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x1DuLL, (int *)this, a4);
}

void icu::MeasureUnit::getPintMetric(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 29;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createQuart(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x1EuLL, (int *)this, a4);
}

void icu::MeasureUnit::getQuart(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 30;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createQuartImperial(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x1FuLL, (int *)this, a4);
}

void icu::MeasureUnit::getQuartImperial(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 31;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createTablespoon(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x20uLL, (int *)this, a4);
}

void icu::MeasureUnit::getTablespoon(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 32;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createTeaspoon(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  return icu::MeasureUnit::create((icu::MeasureUnit *)0x16, 0x21uLL, (int *)this, a4);
}

void icu::MeasureUnit::getTeaspoon(uint64_t a1@<X8>)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 33;
  *(unsigned char *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::MeasureUnit(uint64_t this)
{
  *(void *)this = &unk_1EDA4E2E8;
  *(void *)(this + 8) = 0;
  *(_WORD *)(this + 16) = 0;
  *(unsigned char *)(this + 18) = 16;
  return this;
}

{
  *(void *)this = &unk_1EDA4E2E8;
  *(void *)(this + 8) = 0;
  *(_WORD *)(this + 16) = 0;
  *(unsigned char *)(this + 18) = 16;
  return this;
}

uint64_t icu::MeasureUnit::MeasureUnit(uint64_t this, unint64_t a2)
{
  *(void *)this = &unk_1EDA4E2E8;
  *(void *)(this + 8) = 0;
  return icu::MeasureUnit::operator=(this, a2);
}

{
  *(void *)this = &unk_1EDA4E2E8;
  *(void *)(this + 8) = 0;
  return icu::MeasureUnit::operator=(this, a2);
}

uint64_t icu::MeasureUnit::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      if (*(unsigned char *)(v4 + 108)) {
        uprv_free(*(void **)(v4 + 96));
      }
      sub_18C885AFC(v4 + 8);
      icu::UMemory::operator delete((void *)v4);
    }
    uint64_t v5 = *(uint64_t **)(a2 + 8);
    if (v5)
    {
      uint64_t v12 = &unk_1EDA43700;
      uint64_t v13 = 0;
      __int16 v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, a2);
      if (v6)
      {
        char v7 = v6;
        icu::MeasureUnitImpl::copy(*(icu::MeasureUnitImpl **)(a2 + 8), (UErrorCode *)&v13, (uint64_t)v6);
        *(void *)(a1 + 8) = v7;
        if ((int)v13 <= 0)
        {
          icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v12);
LABEL_11:
          *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
          *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
          return a1;
        }
      }
      else
      {
        *(void *)(a1 + 8) = 0;
      }
      v9[0] = &unk_1EDA4E2E8;
      v9[1] = 0;
      __int16 v10 = 0;
      char v11 = 16;
      icu::MeasureUnit::operator=(a1, (uint64_t)v9);
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v9);
      icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v12);
      return a1;
    }
    *(void *)(a1 + 8) = 0;
    goto LABEL_11;
  }
  return a1;
}

uint64_t icu::MeasureUnit::MeasureUnit(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_1EDA4E2E8;
  *(void *)(result + 8) = v2;
  *(_WORD *)(result + 16) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(result + 18) = *(unsigned char *)(a2 + 18);
  *(void *)(a2 + 8) = 0;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_1EDA4E2E8;
  *(void *)(result + 8) = v2;
  *(_WORD *)(result + 16) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(result + 18) = *(unsigned char *)(a2 + 18);
  *(void *)(a2 + 8) = 0;
  return result;
}

uint64_t icu::MeasureUnit::MeasureUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDA4E2E8;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  *(unsigned char *)(a1 + 18) = -1;
  uint64_t v4 = a2 + 96;
  if (!icu::MeasureUnit::findBySubType(*(const char **)(a2 + 96), *(_DWORD *)(a2 + 152), (icu::MeasureUnit *)a1))
  {
    char v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0xA0, v5);
    uint64_t v8 = v7;
    if (v7)
    {
      *(_DWORD *)char v7 = *(_DWORD *)a2;
      sub_18C94E4D4((uint64_t)(v7 + 1), a2 + 8);
      icu::CharString::CharString(v8 + 12, v4);
    }
    *(void *)(a1 + 8) = v8;
  }
  return a1;
}

BOOL icu::MeasureUnit::findBySubType(const char *a1, int a2, icu::MeasureUnit *a3)
{
  unint64_t v5 = 0;
  BOOL v6 = 1;
  while (v5 == 5)
  {
    uint64_t v7 = 6;
LABEL_7:
    BOOL v6 = v5 < 0x16;
    unint64_t v5 = v7;
    if (v7 == 23) {
      return v6;
    }
  }
  int v8 = dword_18CA94330[v5];
  uint64_t v7 = v5 + 1;
  int v9 = dword_18CA94330[v5 + 1];
  int v10 = sub_18C94D368((uint64_t)off_1E550BD38, v8, v9, (uint64_t)a1, a2);
  if (v10 < 0)
  {
    if (strcmp(a1, "hour-kilowatt")) {
      goto LABEL_7;
    }
    icu::StringPiece::StringPiece((icu::StringPiece *)&v13, "kilowatt-hour");
    int v10 = sub_18C94D368((uint64_t)off_1E550BD38, v8, v9, v13, v14);
    if (v10 < 0) {
      goto LABEL_7;
    }
  }
  icu::MeasureUnit::setTo(a3, v5, v10 - v8);
  return v6;
}

void *icu::MeasureUnitImpl::copy@<X0>(icu::MeasureUnitImpl *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 16) = a3 + 32;
  *(_DWORD *)(a3 + 24) = 8;
  *(void *)(a3 + 96) = a3 + 109;
  *(_DWORD *)(a3 + 104) = 40;
  *(_DWORD *)(a3 + 152) = 0;
  *(_DWORD *)a3 = *(_DWORD *)this;
  uint64_t result = icu::CharString::append((icu::CharString *)(a3 + 96), *((const char **)this + 12), *((_DWORD *)this + 38), a2);
  if (*((int *)this + 2) >= 1)
  {
    uint64_t v7 = 0;
    int v8 = (const void **)(a3 + 8);
    while (1)
    {
      uint64_t result = sub_18C94E5BC(v8, *(void *)(*((void *)this + 2) + 8 * v7));
      if (!result) {
        break;
      }
      if (++v7 >= *((int *)this + 2)) {
        return result;
      }
    }
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t icu::MeasureUnit::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      if (*(unsigned char *)(v4 + 108)) {
        uprv_free(*(void **)(v4 + 96));
      }
      sub_18C885AFC(v4 + 8);
      icu::UMemory::operator delete((void *)v4);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  }
  return a1;
}

uint64_t *icu::MeasureUnit::clone@<X0>(icu::MeasureUnit *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x18, a2);
  if (result)
  {
    *uint64_t result = (uint64_t)&unk_1EDA4E2E8;
    result[1] = 0;
    return (uint64_t *)icu::MeasureUnit::operator=((uint64_t)result, (unint64_t)this);
  }
  return result;
}

void icu::MeasureUnit::~MeasureUnit(icu::MeasureUnit *this)
{
  *(void *)this = &unk_1EDA4E2E8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 108)) {
      uprv_free(*(void **)(v2 + 96));
    }
    sub_18C885AFC(v2 + 8);
    icu::UMemory::operator delete((void *)v2);
    *((void *)this + 1) = 0;
  }

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::MeasureUnit::~MeasureUnit(this);

  icu::UMemory::operator delete(v1);
}

const char *icu::MeasureUnit::getType(icu::MeasureUnit *this)
{
  uint64_t v1 = *((char *)this + 18);
  if (v1 == -1) {
    return "";
  }
  else {
    return off_1E550BC80[v1];
  }
}

const char *icu::MeasureUnit::getSubtype(icu::MeasureUnit *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 18);
  if (v1 == 255) {
    return "";
  }
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unsigned int v3 = (char **)(v2 + 96);
  }
  else
  {
    if ((v1 & 0x80) != 0 || *((__int16 *)this + 8) < 0) {
      unint64_t v5 = -1;
    }
    else {
      unint64_t v5 = dword_18CA94330[v1] + (unint64_t)*((unsigned __int16 *)this + 8);
    }
    unsigned int v3 = &off_1E550BD38[v5];
  }
  return *v3;
}

char *icu::MeasureUnit::getIdentifier(icu::MeasureUnit *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    uint64_t v2 = (char **)(v1 + 96);
  }
  else
  {
    if (*((char *)this + 18) < 0 || *((__int16 *)this + 8) < 0) {
      unint64_t v3 = -1;
    }
    else {
      unint64_t v3 = dword_18CA94330[*((unsigned __int8 *)this + 18)] + (unint64_t)*((unsigned __int16 *)this + 8);
    }
    uint64_t v2 = &off_1E550BD38[v3];
  }
  return *v2;
}

uint64_t icu::MeasureUnit::getOffset(icu::MeasureUnit *this)
{
  if (*((char *)this + 18) < 0 || *((__int16 *)this + 8) < 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_18CA94330[*((unsigned __int8 *)this + 18)] + *((unsigned __int16 *)this + 8);
  }
}

uint64_t icu::MeasureUnit::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      BOOL v6 = (const char **)(v5 + 96);
    }
    else
    {
      if (*(char *)(a1 + 18) < 0 || *(__int16 *)(a1 + 16) < 0) {
        unint64_t v7 = -1;
      }
      else {
        unint64_t v7 = dword_18CA94330[*(unsigned __int8 *)(a1 + 18)] + (unint64_t)*(unsigned __int16 *)(a1 + 16);
      }
      BOOL v6 = (const char **)&off_1E550BD38[v7];
    }
    int v8 = *v6;
    uint64_t v9 = *(void *)(a2 + 8);
    if (v9)
    {
      int v10 = (const char **)(v9 + 96);
    }
    else
    {
      if (*(char *)(a2 + 18) < 0 || *(__int16 *)(a2 + 16) < 0) {
        unint64_t v11 = -1;
      }
      else {
        unint64_t v11 = dword_18CA94330[*(unsigned __int8 *)(a2 + 18)] + (unint64_t)*(unsigned __int16 *)(a2 + 16);
      }
      int v10 = (const char **)&off_1E550BD38[v11];
    }
    return strcmp(v8, *v10) == 0;
  }
  return result;
}

uint64_t icu::MeasureUnit::getAvailable(icu::MeasureUnit *this, icu::MeasureUnit *a2, int *a3, UErrorCode *a4)
{
  if (*a3 > 0) {
    return 0;
  }
  if ((int)a2 >= 492)
  {
    int v6 = 0;
    uint64_t v7 = 0;
    int v8 = 0;
    do
    {
      int v9 = v6;
      uint64_t v10 = v7 + 1;
      int v6 = dword_18CA94330[v7 + 1];
      int v11 = v6 - v9;
      if (v6 - v9 >= 1)
      {
        int v12 = 0;
        uint64_t v13 = (icu::MeasureUnit *)((char *)this + 24 * v8);
        do
        {
          icu::MeasureUnit::setTo(v13, v7, v12++);
          uint64_t v13 = (icu::MeasureUnit *)((char *)v13 + 24);
        }
        while (v11 != v12);
        v8 += v12;
      }
      ++v7;
    }
    while (v10 != 23);
  }
  else
  {
    *a3 = 15;
  }
  return 492;
}

void icu::MeasureUnit::setTo(icu::MeasureUnit *this, char a2, __int16 a3)
{
  *((unsigned char *)this + 18) = a2;
  *((_WORD *)this + 8) = a3;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    if (*(unsigned char *)(v3 + 108)) {
      uprv_free(*(void **)(v3 + 96));
    }
    sub_18C885AFC(v3 + 8);
    icu::UMemory::operator delete((void *)v3);
    *((void *)this + 1) = 0;
  }
}

uint64_t icu::MeasureUnit::getAvailable(icu::MeasureUnit *this, icu::MeasureUnit *a2, icu::MeasureUnit *a3, int *a4, UErrorCode *a5)
{
  if (*a4 > 0) {
    return 0;
  }
  int v8 = (int)a3;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v13, (const char *)this);
  int v10 = sub_18C94D368((uint64_t)off_1E550BC80, 0, 23, v13, v14);
  if (v10 == -1) {
    return 0;
  }
  char v11 = v10;
  uint64_t v5 = (dword_18CA94330[v10 + 1] - dword_18CA94330[v10]);
  if ((int)v5 <= v8)
  {
    if ((int)v5 >= 1)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        icu::MeasureUnit::setTo(a2, v11, i);
        a2 = (icu::MeasureUnit *)((char *)a2 + 24);
      }
    }
  }
  else
  {
    *a4 = 15;
  }
  return v5;
}

uint64_t sub_18C94D368(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  while (a2 < a3)
  {
    int v10 = a2 + a3;
    if (a2 + a3 < 0 != __OFADD__(a2, a3)) {
      ++v10;
    }
    uint64_t v11 = (v10 >> 1);
    icu::StringPiece::StringPiece((icu::StringPiece *)v15, *(const char **)(a1 + 8 * (int)v11));
    int v13 = icu::StringPiece::compare((uint64_t)v15, a4, a5, v12);
    if (v13 < 0)
    {
      a2 = v11 + 1;
    }
    else
    {
      a3 = v11;
      if (!v13) {
        return v11;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t icu::MeasureUnit::getAvailableTypes(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t v4 = (void **)uenum_openCharStringsEnumeration((uint64_t)off_1E550BC80, 23, (int *)this);
  uint64_t v5 = (uint64_t *)*(unsigned int *)this;
  if ((int)v5 >= 1) {
    goto LABEL_2;
  }
  uint64_t v7 = icu::UMemory::operator new(v5, (icu::UMemory *)0x80, v3);
  if (!v7)
  {
    *(_DWORD *)this = 7;
LABEL_2:
    uenum_close(v4);
    return 0;
  }
  return icu::UStringEnumeration::UStringEnumeration((uint64_t)v7, (uint64_t)v4);
}

uint64_t icu::MeasureUnit::initTime(icu::MeasureUnit *this, const char *a2)
{
  icu::StringPiece::StringPiece((icu::StringPiece *)&v10, "duration");
  char v4 = sub_18C94D368((uint64_t)off_1E550BC80, 0, 23, v10, v11);
  *((unsigned char *)this + 18) = v4;
  int v5 = dword_18CA94330[v4];
  int v6 = dword_18CA94330[v4 + 1];
  icu::StringPiece::StringPiece((icu::StringPiece *)&v8, a2);
  uint64_t result = sub_18C94D368((uint64_t)off_1E550BD38, v5, v6, v8, v9);
  *((_WORD *)this + 8) = result - LOWORD(dword_18CA94330[*((char *)this + 18)]);
  return result;
}

uint64_t icu::MeasureUnit::initCurrency(uint64_t a1, const char *a2, int a3)
{
  icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "currency");
  char v6 = sub_18C94D368((uint64_t)off_1E550BC80, 0, 23, v19, v20);
  *(unsigned char *)(a1 + 18) = v6;
  uint64_t result = sub_18C94D368((uint64_t)off_1E550BD38, dword_18CA94330[v6], dword_18CA94330[v6 + 1], (uint64_t)a2, a3);
  if (result == -1)
  {
    uint64_t v11 = icu::UMemory::operator new(v9, (icu::UMemory *)0xA0, v8);
    if (v11)
    {
      uint64_t v12 = v11;
      *((_OWORD *)v11 + 8) = 0u;
      *((_OWORD *)v11 + 9) = 0u;
      *((_OWORD *)v11 + 7) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *((_OWORD *)v11 + 6) = 0u;
      int v13 = (icu::CharString *)(v11 + 12);
      *(_OWORD *)uint64_t v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *((_OWORD *)v12 + 2) = 0u;
      int v12[2] = (uint64_t)(v12 + 4);
      *((_DWORD *)v12 + 6) = 8;
      *(void *)int v13 = (char *)v12 + 109;
      *((_DWORD *)v12 + 26) = 40;
      UErrorCode v21 = U_ZERO_ERROR;
      uint64_t result = (uint64_t)icu::CharString::append(v13, a2, a3, &v21);
      *(void *)(a1 + 8) = v12;
      LOWORD(v10) = -1;
      goto LABEL_5;
    }
    *(void *)(a1 + 8) = 0;
    uint64_t v14 = &dword_18CA94330[*(char *)(a1 + 18)];
    int v15 = *v14;
    int v16 = v14[1];
    icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "XXX");
    uint64_t result = sub_18C94D368((uint64_t)off_1E550BD38, v15, v16, v17, v18);
  }
  int v10 = result - dword_18CA94330[*(char *)(a1 + 18)];
LABEL_5:
  *(_WORD *)(a1 + 16) = v10;
  return result;
}

uint64_t icu::MeasureUnit::createFromUAMeasureUnit(uint64_t a1, int *a2, uint64_t a3, UErrorCode *a4)
{
  if ((int)a1 <= 2815)
  {
    if ((int)a1 > 1535)
    {
      if ((int)a1 <= 2047)
      {
        switch((int)a1)
        {
          case 1536:
            a1 = 15;
            goto LABEL_225;
          case 1537:
            a1 = 15;
            goto LABEL_212;
          case 1538:
            a1 = 15;
            goto LABEL_204;
          case 1539:
            a1 = 15;
            goto LABEL_199;
          case 1540:
            a1 = 15;
            goto LABEL_168;
          case 1541:
            a1 = 15;
            goto LABEL_206;
          case 1542:
            a1 = 15;
            goto LABEL_208;
          case 1543:
            a1 = 15;
            goto LABEL_177;
          case 1544:
            a1 = 15;
            goto LABEL_163;
          case 1545:
            a1 = 15;
            goto LABEL_237;
          case 1546:
            a1 = 15;
            goto LABEL_210;
          case 1547:
            a1 = 15;
            goto LABEL_234;
          case 1548:
            a1 = 15;
            goto LABEL_235;
          case 1549:
            a1 = 15;
            goto LABEL_181;
          case 1550:
            a1 = 15;
            goto LABEL_236;
          default:
            switch((int)a1)
            {
              case 1792:
                a1 = 17;
                goto LABEL_212;
              case 1793:
                a1 = 17;
                goto LABEL_235;
              case 1794:
                a1 = 17;
                goto LABEL_234;
              case 1795:
                a1 = 17;
                goto LABEL_225;
              case 1796:
                a1 = 17;
                goto LABEL_236;
              case 1797:
                a1 = 17;
                goto LABEL_237;
              default:
                goto LABEL_117;
            }
        }
      }
      switch((int)a1)
      {
        case 2048:
          a1 = 18;
          goto LABEL_236;
        case 2049:
          a1 = 18;
          goto LABEL_225;
        case 2050:
          a1 = 18;
          goto LABEL_208;
        case 2051:
          a1 = 18;
          goto LABEL_204;
        case 2052:
          a1 = 18;
          goto LABEL_199;
        case 2053:
          a1 = 18;
          goto LABEL_237;
        case 2054:
          a1 = 18;
          goto LABEL_212;
        case 2055:
          a1 = 18;
          goto LABEL_206;
        case 2056:
          a1 = 18;
          goto LABEL_210;
        case 2057:
          a1 = 18;
          goto LABEL_234;
        default:
          switch((int)a1)
          {
            case 2304:
              a1 = 19;
              goto LABEL_236;
            case 2305:
              a1 = 19;
              goto LABEL_234;
            case 2306:
              a1 = 19;
              goto LABEL_225;
            case 2307:
              a1 = 19;
              goto LABEL_235;
            case 2308:
              a1 = 19;
              goto LABEL_237;
            default:
              switch((int)a1)
              {
                case 2560:
                  a1 = 20;
                  goto LABEL_237;
                case 2561:
                  a1 = 20;
                  goto LABEL_234;
                case 2562:
                  a1 = 20;
                  goto LABEL_236;
                case 2563:
                  a1 = 20;
                  goto LABEL_235;
                default:
                  goto LABEL_117;
              }
          }
      }
    }
    if ((int)a1 > 1279)
    {
      switch((int)a1)
      {
        case 1280:
          a1 = 13;
          goto LABEL_199;
        case 1281:
          a1 = 13;
          goto LABEL_234;
        case 1282:
          a1 = 13;
          goto LABEL_204;
        case 1283:
          a1 = 13;
          goto LABEL_177;
        case 1284:
          a1 = 13;
          goto LABEL_129;
        case 1285:
          a1 = 13;
          goto LABEL_212;
        case 1286:
          a1 = 13;
          goto LABEL_208;
        case 1287:
          a1 = 13;
          goto LABEL_168;
        case 1288:
          a1 = 13;
          goto LABEL_134;
        case 1289:
          a1 = 13;
          goto LABEL_210;
        case 1290:
          a1 = 13;
          goto LABEL_235;
        case 1291:
          a1 = 13;
          goto LABEL_181;
        case 1292:
          a1 = 13;
          goto LABEL_139;
        case 1293:
          a1 = 13;
          goto LABEL_174;
        case 1294:
          a1 = 13;
          goto LABEL_225;
        case 1295:
          a1 = 13;
          goto LABEL_206;
        case 1296:
          a1 = 13;
          goto LABEL_237;
        case 1297:
          a1 = 13;
          goto LABEL_145;
        case 1298:
          a1 = 13;
          goto LABEL_163;
        case 1299:
          a1 = 13;
          goto LABEL_148;
        case 1300:
          a1 = 13;
          goto LABEL_150;
        case 1301:
          a1 = 13;
          goto LABEL_236;
        default:
          goto LABEL_117;
      }
    }
    if ((int)a1 > 1023)
    {
      switch((int)a1)
      {
        case 1024:
          a1 = 7;
          goto LABEL_139;
        case 1025:
          a1 = 7;
          goto LABEL_204;
        case 1026:
          a1 = 7;
          goto LABEL_163;
        case 1027:
          a1 = 7;
          goto LABEL_234;
        case 1028:
          a1 = 7;
          goto LABEL_225;
        case 1029:
          a1 = 7;
          goto LABEL_208;
        case 1030:
          a1 = 7;
          goto LABEL_168;
        case 1031:
          a1 = 7;
          goto LABEL_206;
        case 1032:
          a1 = 7;
          goto LABEL_212;
        case 1033:
          a1 = 7;
          goto LABEL_199;
        case 1034:
          a1 = 7;
          goto LABEL_237;
        case 1035:
          a1 = 7;
          goto LABEL_174;
        case 1036:
          a1 = 7;
          goto LABEL_210;
        case 1037:
          a1 = 7;
          goto LABEL_177;
        case 1038:
          a1 = 7;
          goto LABEL_235;
        case 1039:
          a1 = 7;
          goto LABEL_236;
        case 1040:
          a1 = 7;
          goto LABEL_181;
        default:
          goto LABEL_117;
      }
    }
    if ((int)a1 > 511)
    {
      switch((int)a1)
      {
        case 512:
          a1 = 2;
          goto LABEL_208;
        case 513:
          a1 = 2;
          goto LABEL_206;
        case 514:
          a1 = 2;
          goto LABEL_225;
        case 515:
          a1 = 2;
          goto LABEL_204;
        case 516:
          a1 = 2;
          goto LABEL_237;
        case 517:
          a1 = 2;
          goto LABEL_235;
        case 518:
          a1 = 2;
          goto LABEL_236;
        case 519:
          a1 = 2;
          goto LABEL_212;
        case 520:
          a1 = 2;
          goto LABEL_210;
        case 521:
          a1 = 2;
          goto LABEL_234;
        default:
          goto LABEL_117;
      }
    }
    switch((int)a1)
    {
      case 256:
        a1 = 1;
        goto LABEL_235;
      case 257:
        a1 = 1;
        goto LABEL_237;
      case 258:
        a1 = 1;
        break;
      case 259:
        a1 = 1;
        goto LABEL_236;
      case 260:
        a1 = 1;
        goto LABEL_225;
      default:
        if (!a1) {
          goto LABEL_237;
        }
        if (a1 != 1) {
          goto LABEL_117;
        }
        a1 = 0;
        break;
    }
LABEL_234:
    unint64_t v5 = 1;
    return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
  }
  if ((int)a1 <= 3583)
  {
    switch((int)a1)
    {
      case 2816:
        a1 = 22;
        unint64_t v5 = 24;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2817:
        a1 = 22;
        goto LABEL_208;
      case 2818:
        a1 = 22;
        goto LABEL_210;
      case 2819:
        a1 = 22;
        unint64_t v5 = 26;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2820:
        a1 = 22;
        goto LABEL_236;
      case 2821:
        a1 = 22;
LABEL_163:
        unint64_t v5 = 13;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2822:
        a1 = 22;
        unint64_t v5 = 22;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2823:
        a1 = 22;
        unint64_t v5 = 25;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2824:
        a1 = 22;
        goto LABEL_225;
      case 2825:
        a1 = 22;
        goto LABEL_204;
      case 2826:
        a1 = 22;
        goto LABEL_206;
      case 2827:
        a1 = 22;
        goto LABEL_212;
      case 2828:
        a1 = 22;
        goto LABEL_199;
      case 2829:
        a1 = 22;
        goto LABEL_237;
      case 2830:
        a1 = 22;
        goto LABEL_235;
      case 2831:
        a1 = 22;
        unint64_t v5 = 33;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2832:
        a1 = 22;
        unint64_t v5 = 32;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2833:
        a1 = 22;
LABEL_129:
        unint64_t v5 = 18;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2834:
        a1 = 22;
LABEL_181:
        unint64_t v5 = 11;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2835:
        a1 = 22;
        unint64_t v5 = 28;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2836:
        a1 = 22;
        unint64_t v5 = 30;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2837:
        a1 = 22;
LABEL_150:
        unint64_t v5 = 20;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2838:
        a1 = 22;
LABEL_168:
        unint64_t v5 = 12;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2839:
        a1 = 22;
        unint64_t v5 = 29;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2840:
        a1 = 22;
LABEL_134:
        unint64_t v5 = 21;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2841:
        a1 = 22;
LABEL_148:
        unint64_t v5 = 19;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2842:
        a1 = 22;
        goto LABEL_234;
      case 2843:
        a1 = 22;
LABEL_177:
        unint64_t v5 = 14;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2844:
        a1 = 22;
LABEL_139:
        unint64_t v5 = 15;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2845:
        a1 = 22;
LABEL_174:
        unint64_t v5 = 16;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2846:
        a1 = 22;
LABEL_145:
        unint64_t v5 = 17;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2847:
        a1 = 22;
        unint64_t v5 = 23;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2848:
        a1 = 22;
        unint64_t v5 = 27;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 2849:
        a1 = 22;
        unint64_t v5 = 31;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      default:
        switch((int)a1)
        {
          case 3072:
            a1 = 9;
            goto LABEL_234;
          case 3073:
            a1 = 9;
            goto LABEL_236;
          case 3074:
            a1 = 9;
            goto LABEL_225;
          case 3075:
            a1 = 9;
            goto LABEL_212;
          case 3076:
            a1 = 9;
            goto LABEL_206;
          case 3077:
            a1 = 9;
            goto LABEL_208;
          case 3078:
            a1 = 9;
            goto LABEL_235;
          case 3079:
            a1 = 9;
            goto LABEL_237;
          case 3080:
            a1 = 9;
            goto LABEL_204;
          default:
            switch((int)a1)
            {
              case 3328:
                a1 = 4;
                goto LABEL_234;
              case 3329:
                a1 = 4;
                goto LABEL_235;
              case 3330:
                a1 = 4;
                goto LABEL_237;
              case 3331:
                a1 = 4;
                goto LABEL_236;
              default:
                goto LABEL_117;
            }
        }
    }
  }
  if ((int)a1 <= 4607)
  {
    if ((int)a1 > 3839)
    {
      switch((int)a1)
      {
        case 4352:
          a1 = 14;
          goto LABEL_235;
        case 4353:
          a1 = 14;
          goto LABEL_236;
        case 4354:
          a1 = 14;
          goto LABEL_237;
        case 4355:
          a1 = 14;
          goto LABEL_234;
        default:
          goto LABEL_117;
      }
    }
    switch((int)a1)
    {
      case 3584:
        a1 = 6;
        goto LABEL_237;
      case 3585:
        a1 = 6;
        goto LABEL_234;
      case 3586:
        a1 = 6;
        goto LABEL_235;
      case 3587:
        a1 = 6;
        goto LABEL_236;
      case 3588:
        a1 = 6;
        goto LABEL_225;
      case 3589:
        a1 = 6;
        goto LABEL_212;
      case 3590:
        a1 = 6;
        goto LABEL_206;
      case 3591:
        a1 = 6;
        goto LABEL_208;
      case 3592:
        a1 = 6;
        goto LABEL_210;
      case 3593:
        a1 = 6;
LABEL_199:
        unint64_t v5 = 10;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 3594:
        a1 = 6;
        goto LABEL_204;
      default:
        goto LABEL_117;
    }
  }
  if ((int)a1 <= 4864)
  {
    switch((int)a1)
    {
      case 4608:
        a1 = 3;
        goto LABEL_234;
      case 4609:
      case 4617:
        a1 = 3;
        goto LABEL_235;
      case 4610:
        a1 = 3;
LABEL_225:
        unint64_t v5 = 4;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 4611:
        a1 = 3;
LABEL_204:
        unint64_t v5 = 8;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 4612:
        a1 = 3;
LABEL_206:
        unint64_t v5 = 6;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 4613:
        a1 = 3;
LABEL_208:
        unint64_t v5 = 7;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 4614:
        a1 = 3;
LABEL_210:
        unint64_t v5 = 9;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 4615:
        a1 = 3;
LABEL_212:
        unint64_t v5 = 5;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 4616:
        a1 = 3;
        goto LABEL_237;
      default:
        if (a1 != 4864) {
          goto LABEL_117;
        }
        a1 = 10;
        break;
    }
    goto LABEL_234;
  }
  if ((int)a1 > 5120)
  {
    switch((int)a1)
    {
      case 5376:
        a1 = 12;
LABEL_236:
        unint64_t v5 = 3;
        return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
      case 5377:
        a1 = 12;
        goto LABEL_212;
      case 5378:
        a1 = 12;
        goto LABEL_225;
      case 5379:
        a1 = 12;
        goto LABEL_206;
      case 5380:
        a1 = 12;
        goto LABEL_208;
      case 5381:
        a1 = 12;
        goto LABEL_234;
      case 5382:
        a1 = 12;
        goto LABEL_235;
      case 5383:
        a1 = 12;
        goto LABEL_237;
      default:
        if (a1 != 5121) {
          goto LABEL_117;
        }
        a1 = 21;
        break;
    }
    goto LABEL_234;
  }
  switch(a1)
  {
    case 0x1301:
      a1 = 10;
LABEL_235:
      unint64_t v5 = 2;
      return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
    case 0x1302:
      a1 = 10;
      goto LABEL_237;
    case 0x1400:
      a1 = 21;
LABEL_237:
      unint64_t v5 = 0;
      return icu::MeasureUnit::create((icu::MeasureUnit *)a1, v5, a2, a4);
  }
LABEL_117:
  *a2 = 1;
  return 0;
}

uint64_t icu::MeasureUnit::getUAMeasureUnit(icu::MeasureUnit *this)
{
  if (*((char *)this + 18) < 0) {
    return 0xFFFFFFFFLL;
  }
  if (*((__int16 *)this + 8) < 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v1 = *((unsigned __int8 *)this + 18);
  int v2 = dword_18CA94330[v1] + *((unsigned __int16 *)this + 8);
  if (v2 < 0) {
    return 0xFFFFFFFFLL;
  }
  int v3 = v1 <= 5 ? dword_18CA94330[v1] + *((unsigned __int16 *)this + 8) : v2 - 301;
  if (v3 > 190) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_18CA94390[v3];
  }
}

uint64_t icu::MeasureUnit::getUAMeasureUnits(icu::MeasureUnit *a1, _DWORD *a2, uint64_t a3, UErrorCode *a4)
{
  LODWORD(v5) = a3;
  if (icu::MeasureUnit::getComplexity(a1, a4, a3, a4) == 2)
  {
    int v13 = 0;
    int v14 = 0;
    icu::MeasureUnit::splitToSingleUnitsImpl(a1, &v14, a4, v8, &v13);
    uint64_t v9 = v13;
    v12[0] = (uint64_t)v13;
    int v13 = 0;
    uint64_t v10 = v14;
    v12[1] = v14;
    sub_18C94E558((uint64_t *)&v13);
    if ((int)v5 >= (int)v10) {
      uint64_t v5 = v10;
    }
    else {
      uint64_t v5 = v5;
    }
    if ((int)v5 >= 1)
    {
      do
      {
        *a2++ = icu::MeasureUnit::getUAMeasureUnit(v9);
        uint64_t v9 = (icu::MeasureUnit *)((char *)v9 + 24);
        --v5;
      }
      while (v5);
    }
    sub_18C94E558(v12);
  }
  else
  {
    if ((int)v5 >= 1) {
      *a2 = icu::MeasureUnit::getUAMeasureUnit(a1);
    }
    return 1;
  }
  return v10;
}

uint64_t sub_18C94E4D4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  char v4 = *(const void **)(a2 + 8);
  if (v4 == (const void *)(a2 + 24))
  {
    *(void *)(a1 + 8) = a1 + 24;
    memcpy((void *)(a1 + 24), v4, 8 * *(int *)(a2 + 16));
  }
  else
  {
    *(void *)(a2 + 8) = a2 + 24;
    *(_DWORD *)(a2 + 16) = 8;
    *(unsigned char *)(a2 + 20) = 0;
  }
  *(_DWORD *)a2 = 0;
  return a1;
}

uint64_t *sub_18C94E558(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = (void *)(v2 - 16);
    uint64_t v4 = *(void *)(v2 - 8);
    if (v4)
    {
      uint64_t v5 = v2 - 24;
      uint64_t v6 = 24 * v4;
      do
      {
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(v5 + v6));
        v6 -= 24;
      }
      while (v6);
    }
    icu::UMemory::operator delete[](v3);
  }
  return a1;
}

uint64_t *sub_18C94E5BC(const void **a1, unint64_t a2)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = *(unsigned int *)a1;
  if (v5 == v4)
  {
    if (v4 == 8) {
      int v6 = 32;
    }
    else {
      int v6 = 2 * v4;
    }
    if (v6 < 1) {
      return 0;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8 * v6);
    if (!result) {
      return result;
    }
    unint64_t v8 = result;
    if (v4 >= 1)
    {
      int v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = v6;
      }
      memcpy(result, a1[1], 8 * v9);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    uint64_t v5 = 1;
    *((unsigned char *)a1 + 20) = 1;
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0xC, a2);
  if (result)
  {
    uint64_t v10 = *(void *)a2;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    *uint64_t result = v10;
  }
  uint64_t v11 = *(int *)a1;
  *(_DWORD *)a1 = v11 + 1;
  *((void *)a1[1] + v11) = result;
  return result;
}

uint64_t umeas_getPrefixPower(int a1)
{
  if ((a1 + 59) >= 8) {
    int v1 = -30;
  }
  else {
    int v1 = 60;
  }
  return (v1 + a1);
}

uint64_t umeas_getPrefixBase(int a1)
{
  if ((a1 + 59) >= 8) {
    return 10;
  }
  else {
    return 1024;
  }
}

uint64_t icu::getUnitQuantity@<X0>(icu *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = a3 + 13;
  *(_DWORD *)(a3 + 8) = 40;
  *(_DWORD *)(a3 + 56) = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long __s = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  icu::MeasureUnitImpl::copy(this, a2, (uint64_t)&v33);
  int v22 = 0;
  if (*(int *)a2 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E91924C8, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E91924C8))
    {
      if (dword_1E91924CC >= 1)
      {
        *a2 = dword_1E91924CC;
        goto LABEL_19;
      }
    }
    else
    {
      sub_18C94EA68((int *)a2);
      dword_1E91924CC = *a2;
      icu::umtx_initImplPostInit(&dword_1E91924C8);
    }
    if (*(int *)a2 <= 0)
    {
      v21[0] = 0;
      v21[1] = (void *)qword_1E91924A0;
      UErrorCode v21[2] = (void *)qword_1E91924A0;
      v21[3] = (void *)0xFFFFFFFFLL;
      icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v33, a2);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v19, (const char *)__s);
      int v7 = sub_18C94F344((uint64_t)v21, v19, v20, &v22);
      if (*(int *)a2 > 0) {
        goto LABEL_18;
      }
      if (v22 >= 1)
      {
        int v22 = 0;
        DWORD2(v42) = 0;
        *(unsigned char *)long long __s = 0;
        uint64_t v8 = DWORD2(v33);
        if (SDWORD2(v33) >= 1)
        {
          int v9 = (uint64_t *)v34;
          do
          {
            uint64_t v10 = *v9++;
            *(_DWORD *)(v10 + 8) = -*(_DWORD *)(v10 + 8);
            --v8;
          }
          while (v8);
        }
        icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v33, a2);
        icu::StringPiece::set((icu::StringPiece *)&v19, (const char *)__s);
        int v7 = sub_18C94F344((uint64_t)v21, v19, v20, &v22);
        if (*(int *)a2 > 0) {
          goto LABEL_18;
        }
      }
      int v11 = v7;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      icu::MeasureUnitImpl::copyAndSimplify((uint64_t)this, a2, (uint64_t)&v23);
      if (*(int *)a2 > 0)
      {
LABEL_15:
        if (BYTE12(v29)) {
          uprv_free((void *)v29);
        }
        sub_18C885AFC((uint64_t)&v23 + 8);
LABEL_18:
        icu::BytesTrie::~BytesTrie(v21);
        goto LABEL_19;
      }
      if (v22 >= 1)
      {
        int v22 = 0;
        icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v23, a2);
        icu::StringPiece::set((icu::StringPiece *)&v19, (const char *)v29);
        int v13 = sub_18C94F344((uint64_t)v21, v19, v20, &v22);
        if (*(int *)a2 > 0) {
          goto LABEL_15;
        }
        if (v22 >= 1)
        {
          int v22 = 0;
          DWORD2(v32) = 0;
          *(unsigned char *)long long v29 = 0;
          uint64_t v14 = DWORD2(v23);
          if (SDWORD2(v23) >= 1)
          {
            int v15 = (uint64_t *)v24;
            do
            {
              uint64_t v16 = *v15++;
              *(_DWORD *)(v16 + 8) = -*(_DWORD *)(v16 + 8);
              --v14;
            }
            while (v14);
          }
          icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v23, a2);
          icu::StringPiece::set((icu::StringPiece *)&v19, (const char *)v29);
          int v13 = sub_18C94F344((uint64_t)v21, v19, v20, &v22);
          if (*(int *)a2 > 0) {
            goto LABEL_15;
          }
          if (v22 >= 1)
          {
LABEL_34:
            *a2 = U_INVALID_FORMAT_ERROR;
            goto LABEL_15;
          }
        }
        int v11 = v13;
      }
      if ((v11 & 0x80000000) == 0 && v11 < dword_1E91924A8)
      {
        uint64_t v17 = *(UChar **)(qword_1E91924B0 + 8 * v11);
        int32_t v18 = u_strlen(v17);
        icu::CharString::appendInvariantChars((int *)a3, v17, v18, a2);
        goto LABEL_15;
      }
      goto LABEL_34;
    }
  }
LABEL_19:
  if (BYTE12(__s)) {
    uprv_free((void *)__s);
  }
  return sub_18C885AFC((uint64_t)&v33 + 8);
}

void sub_18C94EA68(int *a1)
{
  sub_18CA0A25C(0, (uint64_t)sub_18C950830);
  uint64_t v2 = ures_openDirect(0, (uint64_t)"units", (uint64_t)a1);
  uint64_t v3 = ures_getByKey(v2, "unitQuantities", 0, a1);
  uint64_t v4 = v3;
  if (*a1 > 0)
  {
    if (!v3) {
      goto LABEL_3;
    }
    goto LABEL_30;
  }
  dword_1E91924A8 = *(_DWORD *)(v3 + 128);
  size_t v5 = 8 * dword_1E91924A8;
  int v6 = uprv_malloc(v5);
  qword_1E91924B0 = (uint64_t)v6;
  if (!v6)
  {
    *a1 = 7;
    goto LABEL_30;
  }
  bzero(v6, v5);
  uint64_t v73 = 0;
  memset(v72, 0, sizeof(v72));
  icu::BytesTrieBuilder::BytesTrieBuilder((icu::BytesTrieBuilder *)v72, (UErrorCode *)a1);
  v71[3] = v72;
  _OWORD v71[4] = 0;
  v71[0] = &unk_1EDA4E338;
  v71[1] = qword_1E91924B0;
  v71[2] = &dword_1E91924A8;
  ures_getAllItemsWithFallback(v2, "unitQuantities", (uint64_t)v71, a1);
  uint64_t v7 = icu::BytesTrieBuilder::buildStringPiece((uint64_t)v72, 0, a1);
  if (*a1 <= 0)
  {
    int v9 = (const void *)v7;
    uint64_t v10 = v8;
    size_t v11 = (int)v8;
    uint64_t v12 = uprv_malloc((int)v8);
    qword_1E91924A0 = (uint64_t)v12;
    if (!v12)
    {
      *a1 = 7;
      goto LABEL_29;
    }
    memcpy(v12, v9, v11);
    uint64_t v70 = 0;
    memset(v69, 0, sizeof(v69));
    icu::BytesTrieBuilder::BytesTrieBuilder((icu::BytesTrieBuilder *)v69, (UErrorCode *)a1);
    if (*a1 > 0) {
      goto LABEL_28;
    }
    int v13 = &off_1E550CC98;
    do
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v67, *v13);
      icu::BytesTrieBuilder::add((uint64_t)v69, v67, v68, *((_DWORD *)v13 + 2) + 64, (UErrorCode *)a1);
      v13 += 2;
    }
    while (v13 != &off_1E550CE58);
    if (*a1 >= 1) {
      goto LABEL_28;
    }
    icu::StringPiece::StringPiece((icu::StringPiece *)&v65, "-per-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v65, v66, 128, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v63, "-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v63, v64, 129, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v61, "-and-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v61, v62, 130, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v59, "per-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v59, v60, 192, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v57, "square-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v57, v58, 258, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v55, "cubic-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v55, v56, 259, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v53, "pow2-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v53, v54, 258, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v51, "pow3-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v51, v52, 259, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v49, "pow4-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v49, v50, 260, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v47, "pow5-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v47, v48, 261, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v45, "pow6-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v45, v46, 262, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v43, "pow7-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v43, v44, 263, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v41, "pow8-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v41, v42, 264, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v39, "pow9-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v39, v40, 265, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v37, "pow10-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v37, v38, 266, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v35, "pow11-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v35, v36, 267, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v33, "pow12-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v33, v34, 268, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v31, "pow13-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v31, v32, 269, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v29, "pow14-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v29, v30, 270, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v27, "pow15-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v27, v28, 271, (UErrorCode *)a1);
    if (*a1 > 0) {
      goto LABEL_28;
    }
    uint64_t v14 = ures_getByKey(v2, "convertUnits", 0, a1);
    uint64_t v15 = v14;
    if (*a1 <= 0)
    {
      unsigned int v16 = *(_DWORD *)(v14 + 128);
      uint64_t v17 = uprv_malloc((int)(8 * v16));
      qword_1E91924B8 = (uint64_t)v17;
      if (v17 && (bzero(v17, (int)(8 * v16)), int32_t v18 = uprv_malloc((int)(4 * v16)), (qword_1E91924C0 = (uint64_t)v18) != 0))
      {
        uint64_t v19 = v18;
        bzero(v18, (int)(4 * v16));
        v25[5] = 512;
        long long v26 = 0u;
        v25[0] = &unk_1EDA4E380;
        v25[1] = qword_1E91924B8;
        void v25[2] = v19;
        v25[3] = v16;
        _OWORD v25[4] = v69;
        _OWORD v25[6] = v9;
        *(void *)&long long v26 = v10;
        ures_getAllItemsWithFallback(v2, "convertUnits", (uint64_t)v25, a1);
        uint64_t v20 = icu::BytesTrieBuilder::buildStringPiece((uint64_t)v69, 0, a1);
        if (*a1 <= 0)
        {
          int v22 = (const void *)v20;
          size_t v23 = v21;
          long long v24 = uprv_malloc(v21);
          qword_1E91924D0 = (uint64_t)v24;
          if (v24) {
            memcpy(v24, v22, v23);
          }
          else {
            *a1 = 7;
          }
        }
        icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v25);
      }
      else
      {
        *a1 = 7;
      }
    }
    else if (!v14)
    {
      goto LABEL_28;
    }
    ures_close(v15);
LABEL_28:
    icu::BytesTrieBuilder::~BytesTrieBuilder((icu::BytesTrieBuilder *)v69);
  }
LABEL_29:
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v71);
  icu::BytesTrieBuilder::~BytesTrieBuilder((icu::BytesTrieBuilder *)v72);
  if (!v4)
  {
LABEL_3:
    if (!v2) {
      return;
    }
    goto LABEL_4;
  }
LABEL_30:
  ures_close(v4);
  if (!v2) {
    return;
  }
LABEL_4:
  ures_close(v2);
}

void icu::MeasureUnitImpl::serialize(icu::MeasureUnitImpl *this, UErrorCode *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 <= 0)
  {
    uint64_t v4 = *((unsigned int *)this + 2);
    if (v4)
    {
      if (*(_DWORD *)this == 1)
      {
        uprv_sortArray(*((void *)this + 2), v4, 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18C95016C, 0, 0, (int *)a2);
        if (*(int *)a2 > 0) {
          return;
        }
        LODWORD(v4) = *((_DWORD *)this + 2);
      }
      memset(&v22[1], 0, 48);
      size_t v5 = (char *)&v22[1] + 5;
      v22[0] = (char *)&v22[1] + 5;
      LODWORD(v22[1]) = 40;
      uint64_t v23 = 0;
      if ((int)v4 >= 1)
      {
        uint64_t v6 = 0;
        LOBYTE(v7) = 0;
        char v8 = 1;
        while (1)
        {
          int v9 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 8 * v6) + 8);
          if ((v8 & 1) != 0 && v9 < 0)
          {
            char v8 = 0;
            int v7 = 1;
          }
          else
          {
            int v7 = (v9 >= 0) & v7;
          }
          if (*(int *)a2 > 0) {
            goto LABEL_29;
          }
          if (*(_DWORD *)this == 2)
          {
            if (v23)
            {
              uint64_t v10 = v17;
              size_t v11 = (icu::StringPiece *)v17;
              uint64_t v12 = "-and-";
LABEL_23:
              icu::StringPiece::StringPiece(v11, v12);
              icu::CharString::append((icu::CharString *)v22, *(const char **)v10, *((_DWORD *)v10 + 2), a2);
            }
          }
          else
          {
            if (v7)
            {
              if (v23)
              {
                uint64_t v10 = v15;
                size_t v11 = (icu::StringPiece *)v15;
                uint64_t v12 = "-per-";
              }
              else
              {
                uint64_t v10 = v16;
                size_t v11 = (icu::StringPiece *)v16;
                uint64_t v12 = "per-";
              }
              goto LABEL_23;
            }
            if (v23)
            {
              uint64_t v10 = v14;
              size_t v11 = (icu::StringPiece *)v14;
              uint64_t v12 = "-";
              goto LABEL_23;
            }
          }
          icu::SingleUnitImpl::appendNeutralIdentifier(*(icu::CharString **)(*((void *)this + 2) + 8 * v6++), (icu::CharString *)v22, a2);
          if (v6 >= *((int *)this + 2))
          {
            size_t v5 = v22[0];
            int v13 = v23;
            goto LABEL_27;
          }
        }
      }
      int v13 = 0;
LABEL_27:
      int32_t v18 = (char *)&v20 + 1;
      int v19 = 40;
      __int16 v20 = 0;
      int v21 = 0;
      icu::CharString::append((icu::CharString *)&v18, v5, v13, a2);
      icu::CharString::operator=((uint64_t)this + 96, (uint64_t)&v18);
      if ((_BYTE)v20) {
        uprv_free(v18);
      }
LABEL_29:
      if (BYTE4(v22[1])) {
        uprv_free(v22[0]);
      }
    }
  }
}

uint64_t sub_18C94F344(uint64_t a1, const char *a2, int a3, _DWORD *a4)
{
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = -1;
  if ((int)icu::BytesTrie::next((icu::BytesTrie *)a1, a2, a3) <= 1)
  {
    *a4 = 16;
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v6 = *(unsigned __int8 **)(a1 + 16);
    unsigned int v8 = *v6;
    int v7 = (icu::BytesTrie *)(v6 + 1);
    int v9 = (const unsigned __int8 *)(v8 >> 1);
    return icu::BytesTrie::readValue(v7, v9);
  }
}

uint64_t icu::MeasureUnitImpl::takeReciprocal(uint64_t this, UErrorCode *a2)
{
  *(_DWORD *)(this + 152) = 0;
  **(unsigned char **)(this + 96) = 0;
  uint64_t v2 = *(unsigned int *)(this + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(uint64_t **)(this + 16);
    do
    {
      uint64_t v4 = *v3++;
      *(_DWORD *)(v4 + 8) = -*(_DWORD *)(v4 + 8);
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t icu::MeasureUnitImpl::copyAndSimplify@<X0>(uint64_t this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 16) = a3 + 32;
  *(_DWORD *)(a3 + 24) = 8;
  *(void *)(a3 + 96) = a3 + 109;
  *(_DWORD *)(a3 + 104) = 40;
  *(_DWORD *)(a3 + 152) = 0;
  int v4 = *(_DWORD *)(this + 8);
  if (v4 >= 1)
  {
    uint64_t v5 = this;
    for (uint64_t i = 0; i < v4; ++i)
    {
      int v7 = *(const icu::SingleUnitImpl **)(*(void *)(v5 + 16) + 8 * i);
      uint64_t v8 = *(unsigned int *)(a3 + 8);
      if ((int)v8 < 1)
      {
LABEL_8:
        this = icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)a3, v7, a2);
        int v4 = *(_DWORD *)(v5 + 8);
      }
      else
      {
        int v9 = *(int ***)(a3 + 16);
        uint64_t v10 = qword_1E91924B8;
        size_t v11 = *(const char **)(qword_1E91924B8 + 8 * *(int *)v7);
        while (1)
        {
          uint64_t v12 = (uint64_t)*v9;
          this = strcmp(*(const char **)(v10 + 8 * **v9), v11);
          if (!this && *(_DWORD *)(v12 + 4) == *((_DWORD *)v7 + 1)) {
            break;
          }
          ++v9;
          if (!--v8) {
            goto LABEL_8;
          }
        }
        *(_DWORD *)(v12 + 8) += *((_DWORD *)v7 + 2);
      }
    }
  }
  return this;
}

unint64_t icu::SingleUnitImpl::forMeasureUnit(icu::SingleUnitImpl *this, const icu::MeasureUnit *a2, UErrorCode *a3, UErrorCode *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  memset(v14, 0, sizeof(v14));
  long long v11 = 0u;
  uint64_t v12 = v14;
  uint64_t v13 = 8;
  uint64_t v15 = (char *)&v16 + 5;
  uint64_t v16 = 40;
  DWORD2(v19) = 0;
  uint64_t v5 = icu::MeasureUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)&v11, a2, a4);
  if (*(int *)a2 > 0 || (int v9 = *((_DWORD *)v5 + 2)) == 0)
  {
    unint64_t v6 = 0x1E00000000;
LABEL_3:
    uint64_t v7 = 0xFFFFFFFFLL;
    goto LABEL_4;
  }
  if (v9 != 1)
  {
    *(_DWORD *)a2 = 1;
    unint64_t v6 = 0x1E00000000;
    goto LABEL_3;
  }
  uint64_t v10 = (void *)**((void **)v5 + 2);
  unint64_t v6 = *v10 & 0xFFFFFFFF00000000;
  uint64_t v7 = *v10;
LABEL_4:
  if (BYTE4(v16)) {
    uprv_free(v15);
  }
  sub_18C885AFC((uint64_t)&v11 + 8);
  return v6 | v7;
}

const icu::MeasureUnit *icu::MeasureUnitImpl::forMeasureUnit(icu::MeasureUnitImpl *this, const icu::MeasureUnit *a2, icu::MeasureUnitImpl *a3, UErrorCode *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t result = (const icu::MeasureUnit *)*((void *)this + 1);
  if (!result)
  {
    Identifier = icu::MeasureUnit::getIdentifier(this);
    icu::StringPiece::StringPiece((icu::StringPiece *)v9, Identifier);
    sub_18C94FC3C(v9[0], v9[1], (int *)a3, (uint64_t)v10);
    sub_18C94FD30((uint64_t)v10, (UErrorCode *)a3, (uint64_t)&v12);
    *(_DWORD *)a2 = v12;
    sub_18C950E84((int *)a2 + 2, v13);
    icu::CharString::operator=((uint64_t)a2 + 96, (uint64_t)&v14);
    if (v15) {
      uprv_free(v14);
    }
    sub_18C885AFC((uint64_t)v13);
    icu::BytesTrie::~BytesTrie(&v11);
    return a2;
  }
  return result;
}

uint64_t icu::SingleUnitImpl::build@<X0>(icu::SingleUnitImpl *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  memset(v9, 0, sizeof(v9));
  long long v6 = 0u;
  uint64_t v7 = v9;
  uint64_t v8 = 8;
  uint64_t v10 = (char *)&v11 + 5;
  uint64_t v11 = 40;
  DWORD2(v14) = 0;
  icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)&v6, this, a2);
  icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v6, a2);
  icu::MeasureUnit::MeasureUnit(a3, &v6);
  if (BYTE4(v11)) {
    uprv_free(v10);
  }
  return sub_18C885AFC((uint64_t)&v6 + 8);
}

uint64_t icu::MeasureUnitImpl::appendSingleUnit(icu::MeasureUnitImpl *this, const icu::SingleUnitImpl *a2, UErrorCode *a3)
{
  *((_DWORD *)this + 38) = 0;
  **((unsigned char **)this + 12) = 0;
  if (*(_DWORD *)a2 == -1) {
    return 0;
  }
  long long v6 = (const void **)((char *)this + 8);
  if (*((int *)this + 2) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      int v9 = *(int **)(*((void *)this + 2) + 8 * v7);
      if (!sub_18C950FE0(v9, (int *)a2)) {
        uint64_t v8 = v9;
      }
      ++v7;
    }
    while (v7 < *((int *)this + 2));
    if (v8)
    {
      uint64_t result = 0;
      v8[2] += *((_DWORD *)a2 + 2);
      return result;
    }
  }
  if (*(int *)a3 > 0) {
    return 0;
  }
  uint64_t result = (uint64_t)sub_18C94E5BC(v6, (unint64_t)a2);
  if (*(int *)a3 <= 0 && !result)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }
  if (*(int *)a3 > 0) {
    return 0;
  }
  if (*(int *)v6 < 2) {
    return 1;
  }
  uint64_t result = 1;
  if (!*(_DWORD *)this) {
    *(_DWORD *)this = 1;
  }
  return result;
}

uint64_t icu::MeasureUnitImpl::build@<X0>(icu::MeasureUnitImpl *a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  icu::MeasureUnitImpl::serialize(a1, a2);

  return icu::MeasureUnit::MeasureUnit(a3, a1);
}

uint64_t icu::SingleUnitImpl::getSimpleUnitID(icu::SingleUnitImpl *this)
{
  return *(void *)(qword_1E91924B8 + 8 * *(int *)this);
}

icu::CharString *icu::SingleUnitImpl::appendNeutralIdentifier(icu::CharString *this, icu::CharString *a2, UErrorCode *a3)
{
  uint64_t v5 = this;
  int v6 = *((_DWORD *)this + 2);
  if (v6 >= 0) {
    unsigned int v7 = *((_DWORD *)this + 2);
  }
  else {
    unsigned int v7 = -v6;
  }
  if (v7 != 1)
  {
    if (v7 == 3)
    {
      uint64_t v8 = "cubic-";
      int v9 = v21;
      uint64_t v10 = (icu::StringPiece *)v21;
    }
    else if (v7 == 2)
    {
      uint64_t v8 = "square-";
      int v9 = v22;
      uint64_t v10 = (icu::StringPiece *)v22;
    }
    else
    {
      if (v7 > 0xF)
      {
        UErrorCode v13 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_19:
        *a3 = v13;
        return this;
      }
      icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "pow");
      icu::CharString::append(a2, v19, v20, a3);
      icu::CharString::appendNumber(a2, v7, a3);
      uint64_t v8 = "-";
      int v9 = v18;
      uint64_t v10 = (icu::StringPiece *)v18;
    }
    icu::StringPiece::StringPiece(v10, v8);
    this = icu::CharString::append(a2, *(const char **)v9, *((_DWORD *)v9 + 2), a3);
  }
  if (*(int *)a3 <= 0)
  {
    int v11 = *((_DWORD *)v5 + 1);
    if (v11 != 30)
    {
      uint64_t v12 = 0;
      while (LODWORD((&off_1E550CC98)[v12 + 1]) != v11)
      {
        v12 += 2;
        if (v12 == 56)
        {
          UErrorCode v13 = U_UNSUPPORTED_ERROR;
          goto LABEL_19;
        }
      }
      icu::StringPiece::StringPiece((icu::StringPiece *)&v16, (&off_1E550CC98)[v12]);
      icu::CharString::append(a2, v16, v17, a3);
    }
    icu::StringPiece::StringPiece((icu::StringPiece *)&v14, *(const char **)(qword_1E91924B8 + 8 * *(int *)v5));
    return icu::CharString::append(a2, v14, v15, a3);
  }
  return this;
}

uint64_t icu::SingleUnitImpl::getUnitCategoryIndex(icu::SingleUnitImpl *this)
{
  return *(unsigned int *)(qword_1E91924C0 + 4 * *(int *)this);
}

icu::MeasureUnitImpl *icu::MeasureUnitImpl::MeasureUnitImpl(icu::MeasureUnitImpl *this, const icu::SingleUnitImpl *a2, UErrorCode *a3)
{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = (char *)this + 32;
  *((_DWORD *)this + 6) = 8;
  *((unsigned char *)this + 28) = 0;
  *((void *)this + 12) = (char *)this + 109;
  *((_DWORD *)this + 26) = 40;
  *((_WORD *)this + 54) = 0;
  *((_DWORD *)this + 38) = 0;
  icu::MeasureUnitImpl::appendSingleUnit(this, a2, a3);
  return this;
}

{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = (char *)this + 32;
  *((_DWORD *)this + 6) = 8;
  *((unsigned char *)this + 28) = 0;
  *((void *)this + 12) = (char *)this + 109;
  *((_DWORD *)this + 26) = 40;
  *((_WORD *)this + 54) = 0;
  *((_DWORD *)this + 38) = 0;
  icu::MeasureUnitImpl::appendSingleUnit(this, a2, a3);
  return this;
}

void icu::MeasureUnitImpl::forIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  sub_18C94FC3C(a1, a2, a3, (uint64_t)v6);
  sub_18C94FD30((uint64_t)v6, (UErrorCode *)a3, a4);
  icu::BytesTrie::~BytesTrie(&v7);
}

void sub_18C94FC3C(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a3 >= 1) {
    goto LABEL_8;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E91924C8, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E91924C8))
  {
    if (dword_1E91924CC >= 1)
    {
      *a3 = dword_1E91924CC;
      goto LABEL_8;
    }
  }
  else
  {
    sub_18C94EA68(a3);
    dword_1E91924CC = *a3;
    icu::umtx_initImplPostInit(&dword_1E91924C8);
  }
  if (*a3 < 1)
  {
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = a1;
    *(void *)(a4 + 16) = a2;
    uint64_t v8 = (void *)qword_1E91924D0;
    goto LABEL_9;
  }
LABEL_8:
  *(_DWORD *)a4 = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)(a4 + 8), "");
  uint64_t v8 = &unk_18CAA19F2;
LABEL_9:
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = v8;
  *(void *)(a4 + 40) = v8;
  *(_DWORD *)(a4 + 48) = -1;
  *(unsigned char *)(a4 + 56) = 0;
}

uint64_t sub_18C94FD30@<X0>(uint64_t result@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 16) = a3 + 32;
  *(_DWORD *)(a3 + 24) = 8;
  *(void *)(a3 + 96) = a3 + 109;
  *(_DWORD *)(a3 + 104) = 40;
  *(_DWORD *)(a3 + 152) = 0;
  if (*(int *)a2 <= 0)
  {
    uint64_t v4 = result;
    int v5 = *(_DWORD *)(result + 16);
    if (v5)
    {
      int v6 = *(_DWORD *)result;
      if (*(_DWORD *)result < v5)
      {
        while (1)
        {
          int v17 = 0;
          unint64_t v16 = 0;
          uint64_t result = sub_18C950DC8((int *)v4, a2);
          if (*(int *)a2 > 0) {
            return result;
          }
          int v8 = result & 0xFFFFFFC0;
          if (v6) {
            break;
          }
          if (v8 == 192)
          {
            *(unsigned char *)(v4 + 56) = 1;
            uint64_t result = sub_18C950DC8((int *)v4, a2);
            if (*(int *)a2 >= 1) {
              return result;
            }
            int v9 = 0;
            int v10 = -1;
          }
          else
          {
            int v9 = 0;
            int v10 = 1;
          }
LABEL_24:
          unsigned int v11 = 0;
          uint64_t v12 = 30;
          while ((int)result < 128)
          {
            if (v11 > 1) {
              goto LABEL_49;
            }
            uint64_t v12 = (result - 64);
            unsigned int v11 = 2;
LABEL_32:
            if (*(_DWORD *)v4 >= *(_DWORD *)(v4 + 16)) {
              goto LABEL_49;
            }
            uint64_t result = sub_18C950DC8((int *)v4, a2);
            if (*(int *)a2 >= 1) {
              return result;
            }
          }
          if (result < 0x100) {
            goto LABEL_49;
          }
          if (result <= 0x1FF)
          {
            if (v11) {
              goto LABEL_49;
            }
            v10 *= (char)result;
            unsigned int v11 = 1;
            goto LABEL_32;
          }
          unint64_t v16 = (result - 512) | (unint64_t)(v12 << 32);
          int v17 = v10;
          uint64_t result = icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)a3, (const icu::SingleUnitImpl *)&v16, a2);
          if (*(int *)a2 > 0) {
            return result;
          }
          if (v9) {
            int v13 = result;
          }
          else {
            int v13 = 1;
          }
          if (v13 != 1) {
            goto LABEL_49;
          }
          int v14 = *(_DWORD *)(a3 + 8);
          if (v14 < 2) {
            goto LABEL_47;
          }
          if (v9) {
            int v15 = 2;
          }
          else {
            int v15 = 1;
          }
          if (v14 == 2)
          {
            *(_DWORD *)a3 = v15;
            goto LABEL_47;
          }
          if (*(_DWORD *)a3 != v15)
          {
LABEL_49:
            *a2 = U_ILLEGAL_ARGUMENT_ERROR;
            return result;
          }
LABEL_47:
          int v6 = *(_DWORD *)v4;
          if (*(_DWORD *)v4 >= *(_DWORD *)(v4 + 16)) {
            return result;
          }
        }
        if (v8 != 128) {
          goto LABEL_49;
        }
        switch(result)
        {
          case 0x82:
            if (*(unsigned char *)(v4 + 56)) {
              goto LABEL_49;
            }
            int v9 = 1;
            break;
          case 0x81:
            int v9 = 0;
            if (*(unsigned char *)(v4 + 56)) {
              int v10 = -1;
            }
            else {
              int v10 = 1;
            }
LABEL_23:
            uint64_t result = sub_18C950DC8((int *)v4, a2);
            if (*(int *)a2 > 0) {
              return result;
            }
            goto LABEL_24;
          case 0x80:
            int v9 = 0;
            *(unsigned char *)(v4 + 56) = 1;
            int v10 = -1;
            goto LABEL_23;
          default:
            int v9 = 0;
            break;
        }
        int v10 = 1;
        goto LABEL_23;
      }
    }
  }
  return result;
}

void icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(icu::MeasureUnitImpl *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 1))
  {
    int v6 = (icu::MeasureUnitImpl *)*((void *)this + 1);
    icu::MeasureUnitImpl::copy(v6, a2, a3);
  }
  else
  {
    Identifier = icu::MeasureUnit::getIdentifier(this);
    icu::StringPiece::StringPiece((icu::StringPiece *)v8, Identifier);
    sub_18C94FC3C(v8[0], v8[1], (int *)a2, (uint64_t)v9);
    sub_18C94FD30((uint64_t)v9, a2, a3);
    icu::BytesTrie::~BytesTrie(&v10);
  }
}

int *icu::MeasureUnitImpl::extractIndividualUnitsWithIndices@<X0>(int *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = this;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 80) = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 8) = a3 + 24;
  *(_DWORD *)(a3 + 16) = 8;
  if (*this == 2)
  {
    int v9 = 0;
    if (this[2] >= 1)
    {
      int v6 = 0;
      BOOL v7 = *a2 < U_ILLEGAL_ARGUMENT_ERROR;
      while (v7)
      {
        this = (int *)sub_18C9511B8((unsigned int *)a3, &v9, *(const icu::SingleUnitImpl **)(*((void *)v4 + 2) + 8 * v6), a2);
        if (*(int *)a2 <= 0 && this == 0) {
          goto LABEL_15;
        }
        if (*(int *)a2 <= 0)
        {
          int v6 = v9 + 1;
          int v9 = v6;
          BOOL v7 = 1;
          if (v6 < v4[2]) {
            continue;
          }
        }
        return this;
      }
    }
  }
  else
  {
    int v10 = 0;
    if (*(int *)a2 <= 0)
    {
      this = (int *)sub_18C9510A8((unsigned int *)a3, &v10, (icu::MeasureUnitImpl *)this, a2);
      if (*(int *)a2 <= 0 && !this) {
LABEL_15:
      }
        *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

uint64_t sub_18C95016C(uint64_t a1, int **a2, int **a3)
{
  return sub_18C950FE0(*a2, *a3);
}

void icu::MeasureUnit::forIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_18C94FC3C(a1, a2, a3, (uint64_t)v6);
  sub_18C94FD30((uint64_t)v6, (UErrorCode *)a3, (uint64_t)v8);
  icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)v8, (UErrorCode *)a3);
  icu::MeasureUnit::MeasureUnit(a4, v8);
  if (v10) {
    uprv_free(v9[11]);
  }
  sub_18C885AFC((uint64_t)v9);
  icu::BytesTrie::~BytesTrie(&v7);
}

uint64_t icu::MeasureUnit::getComplexity(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  memset(v9, 0, sizeof(v9));
  long long v6 = 0u;
  BOOL v7 = v9;
  uint64_t v8 = 8;
  char v10 = (char *)&v11 + 5;
  uint64_t v11 = 40;
  DWORD2(v14) = 0;
  uint64_t v4 = *(unsigned int *)icu::MeasureUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)&v6, (icu::MeasureUnitImpl *)a2, a4);
  if (BYTE4(v11)) {
    uprv_free(v10);
  }
  sub_18C885AFC((uint64_t)&v6 + 8);
  return v4;
}

unint64_t icu::MeasureUnit::getPrefix(icu::MeasureUnit *this, UErrorCode *a2, UErrorCode *a3, UErrorCode *a4)
{
  return icu::SingleUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)a2, a3, a4) >> 32;
}

uint64_t icu::MeasureUnit::withPrefix@<X0>(icu::MeasureUnit *a1@<X2>, icu::SingleUnitImpl *a2@<X0>, int a3@<W1>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  v10[0] = icu::SingleUnitImpl::forMeasureUnit(a2, a1, (UErrorCode *)a1, a4);
  v10[1] = a3;
  _OWORD v10[2] = v8;
  return icu::SingleUnitImpl::build((icu::SingleUnitImpl *)v10, (UErrorCode *)a1, a5);
}

uint64_t icu::MeasureUnit::getDimensionality(icu::MeasureUnit *this, UErrorCode *a2, UErrorCode *a3, UErrorCode *a4)
{
  if (icu::SingleUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)a2, a3, a4) != -1
    && *a2 <= U_ZERO_ERROR)
  {
    return v5;
  }
  else
  {
    return 0;
  }
}

uint64_t icu::MeasureUnit::withDimensionality@<X0>(icu::MeasureUnit *this@<X0>, UErrorCode *a2@<X2>, int a3@<W1>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9 = icu::SingleUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)a2, a2, a4);
  int v10 = a3;
  return icu::SingleUnitImpl::build((icu::SingleUnitImpl *)&v9, a2, a5);
}

uint64_t icu::MeasureUnit::reciprocal@<X0>(icu::MeasureUnit *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(this, a2, (uint64_t)&v9);
  DWORD2(v18) = 0;
  *(unsigned char *)long long v15 = 0;
  uint64_t v5 = DWORD2(v9);
  if (SDWORD2(v9) >= 1)
  {
    long long v6 = (uint64_t *)v10;
    do
    {
      uint64_t v7 = *v6++;
      *(_DWORD *)(v7 + 8) = -*(_DWORD *)(v7 + 8);
      --v5;
    }
    while (v5);
  }
  icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v9, a2);
  icu::MeasureUnit::MeasureUnit(a3, &v9);
  if (BYTE12(v15)) {
    uprv_free((void *)v15);
  }
  return sub_18C885AFC((uint64_t)&v9 + 8);
}

uint64_t icu::MeasureUnit::product@<X0>(icu::MeasureUnit *this@<X0>, const icu::MeasureUnit *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  memset(v21, 0, sizeof(v21));
  icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(this, a3, (uint64_t)v21);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  memset(v15, 0, sizeof(v15));
  long long v12 = 0u;
  long long v13 = v15;
  uint64_t v14 = 8;
  long long v16 = (char *)&v17 + 5;
  uint64_t v17 = 40;
  DWORD2(v20) = 0;
  int v8 = icu::MeasureUnitImpl::forMeasureUnit(a2, (const icu::MeasureUnit *)&v12, (icu::MeasureUnitImpl *)a3, v7);
  if (LODWORD(v21[0]) == 2 || (long long v9 = v8, *(_DWORD *)v8 == 2))
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    icu::MeasureUnit::MeasureUnit(a4);
  }
  else
  {
    if (*((int *)v8 + 2) >= 1)
    {
      uint64_t v10 = 0;
      do
        icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)v21, *(const icu::SingleUnitImpl **)(*((void *)v9 + 2) + 8 * v10++), a3);
      while (v10 < *((int *)v9 + 2));
    }
    if (SDWORD2(v21[0]) > 1) {
      LODWORD(v21[0]) = 1;
    }
    icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)v21, a3);
    icu::MeasureUnit::MeasureUnit(a4, v21);
  }
  if (BYTE4(v17)) {
    uprv_free(v16);
  }
  sub_18C885AFC((uint64_t)&v12 + 8);
  if (BYTE12(v22)) {
    uprv_free((void *)v22);
  }
  return sub_18C885AFC((uint64_t)v21 + 8);
}

uint64_t icu::MeasureUnit::splitToSingleUnitsImpl@<X0>(icu::MeasureUnit *this@<X0>, int *a2@<X1>, UErrorCode *a3@<X2>, UErrorCode *a4@<X3>, void *a5@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  memset(v24, 0, sizeof(v24));
  long long v21 = 0u;
  long long v22 = v24;
  uint64_t v23 = 8;
  long long v25 = (char *)&v26 + 5;
  uint64_t v26 = 40;
  DWORD2(v29) = 0;
  long long v9 = icu::MeasureUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)&v21, (icu::MeasureUnitImpl *)a3, a4);
  unint64_t v10 = *((int *)v9 + 2);
  *a2 = v10;
  BOOL v11 = !is_mul_ok(v10, 0x18uLL);
  if (24 * v10 >= 0xFFFFFFFFFFFFFFF0) {
    BOOL v11 = 1;
  }
  if (v11) {
    uint64_t v12 = -1;
  }
  else {
    uint64_t v12 = 24 * v10 + 16;
  }
  long long v13 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v12, v8);
  if (v13)
  {
    *long long v13 = 24;
    v13[1] = v10;
    uint64_t v14 = v13 + 2;
    if (v10)
    {
      uint64_t v15 = 24 * v10;
      uint64_t v16 = (uint64_t)(v13 + 2);
      do
      {
        uint64_t v16 = icu::MeasureUnit::MeasureUnit(v16) + 24;
        v15 -= 24;
      }
      while (v15);
    }
    if (*a2 >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = (uint64_t)v14;
      do
      {
        icu::SingleUnitImpl::build(*(icu::SingleUnitImpl **)(*((void *)v9 + 2) + 8 * v17), a3, (uint64_t)v20);
        icu::MeasureUnit::operator=(v18, (uint64_t)v20);
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v20);
        ++v17;
        v18 += 24;
      }
      while (v17 < *a2);
    }
  }
  else
  {
    uint64_t v14 = 0;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  *a5 = v14;
  if (BYTE4(v26)) {
    uprv_free(v25);
  }
  return sub_18C885AFC((uint64_t)&v21 + 8);
}

uint64_t sub_18C950830()
{
  qword_1E91924A0 = 0;
  uprv_free((void *)qword_1E91924B0);
  qword_1E91924B0 = 0;
  uprv_free((void *)qword_1E91924D0);
  qword_1E91924D0 = 0;
  uprv_free((void *)qword_1E91924C0);
  qword_1E91924C0 = 0;
  uprv_free((void *)qword_1E91924B8);
  qword_1E91924B8 = 0;
  atomic_store(0, &dword_1E91924C8);
  return 1;
}

void sub_18C9508B4(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void *sub_18C9508DC(uint64_t a1, uint64_t a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v19 = 0;
  uint64_t result = (*(void *(**)(void *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 80))(v18, a3, a5);
  if (*(int *)a5 <= 0)
  {
    if ((int)v19 + *(_DWORD *)(a1 + 32) <= **(_DWORD **)(a1 + 16))
    {
      uint64_t result = (void *)icu::ResourceArray::getValue((icu::ResourceArray *)v18, 0, a3);
      if (result)
      {
        unsigned int v10 = 1;
        do
        {
          uint64_t v17 = 0;
          memset(v16, 0, sizeof(v16));
          uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v16, a3, a5);
          if (*(int *)a5 > 0) {
            break;
          }
          if (v17 != 1)
          {
            int v9 = 3;
            goto LABEL_4;
          }
          long long __s = 0;
          icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, 0, (const char **)&__s, a3);
          int v14 = 0;
          *(void *)(*(void *)(a1 + 8) + 8 * *(int *)(a1 + 32)) = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32))(a3, &v14, a5);
          uint64_t v11 = *(void *)(a1 + 24);
          icu::StringPiece::StringPiece((icu::StringPiece *)&v12, __s);
          icu::BytesTrieBuilder::add(v11, v12, v13, *(_DWORD *)(a1 + 32), a5);
          ++*(_DWORD *)(a1 + 32);
          uint64_t result = (void *)icu::ResourceArray::getValue((icu::ResourceArray *)v18, v10++, a3);
        }
        while (result);
      }
    }
    else
    {
      int v9 = 8;
LABEL_4:
      *a5 = v9;
    }
  }
  return result;
}

void sub_18C950A9C(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C950AC4(uint64_t a1, uint64_t a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v25, a3, a5);
  if (*(int *)a5 > 0) {
    return;
  }
  if ((int)v26 + *(_DWORD *)(a1 + 64) > *(_DWORD *)(a1 + 24))
  {
    *a5 = U_INDEX_OUTOFBOUNDS_ERROR;
    return;
  }
  unint64_t v8 = *(unsigned __int8 **)(a1 + 48);
  long long v21 = 0;
  long long v22 = v8;
  uint64_t v23 = v8;
  uint64_t v24 = 0xFFFFFFFFLL;
  __s1 = 0;
  if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v25, 0, (const char **)&__s1, a3)) {
    goto LABEL_19;
  }
  unsigned int v9 = 1;
  while (1)
  {
    unsigned int v10 = __s1;
    if (!strcmp(__s1, "kilogram")) {
      goto LABEL_16;
    }
    *(void *)(*(void *)(a1 + 8) + 8 * *(int *)(a1 + 64)) = v10;
    uint64_t v11 = *(void *)(a1 + 32);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v18, __s1);
    icu::BytesTrieBuilder::add(v11, v18, v19, *(_DWORD *)(a1 + 64) + *(_DWORD *)(a1 + 40), a5);
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88))(v16, a3, a5);
    if (*(int *)a5 > 0) {
      goto LABEL_19;
    }
    if (!icu::ResourceTable::findValue((icu::ResourceTable *)v16, "target", a3)) {
      break;
    }
    int32_t v15 = 0;
    uint64_t v12 = (UChar *)(*(uint64_t (**)(icu::ResourceValue *, int32_t *, UErrorCode *))(*(void *)a3 + 32))(a3, &v15, a5);
    int v29 = 0;
    memset(&v27[1], 0, 48);
    v27[0] = (char *)&v27[1] + 5;
    LODWORD(v27[1]) = 40;
    int v28 = 0;
    icu::CharString::appendInvariantChars((int *)v27, v12, v15, a5);
    int v13 = 0;
    if (*(int *)a5 <= 0)
    {
      uint64_t v23 = v22;
      LODWORD(v24) = -1;
      if ((int)icu::BytesTrie::next((icu::BytesTrie *)&v21, (const char *)v27[0], v28) <= 1)
      {
        int v13 = 0;
        *a5 = U_INVALID_FORMAT_ERROR;
      }
      else
      {
        *(_DWORD *)(*(void *)(a1 + 16) + 4 * (int)(*(_DWORD *)(a1 + 64))++) = icu::BytesTrie::readValue((icu::BytesTrie *)(v23 + 1), (const unsigned __int8 *)(*v23 >> 1));
        int v13 = 1;
      }
    }
    if (BYTE4(v27[1])) {
      uprv_free(v27[0]);
    }
    if (!v13) {
      goto LABEL_19;
    }
LABEL_16:
    if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v25, v9++, (const char **)&__s1, a3)) {
      goto LABEL_19;
    }
  }
  *a5 = U_INVALID_FORMAT_ERROR;
LABEL_19:
  icu::BytesTrie::~BytesTrie(&v21);
}

uint64_t sub_18C950DC8(int *a1, _DWORD *a2)
{
  uint64_t v4 = (icu::BytesTrie *)(a1 + 6);
  *((void *)a1 + 5) = *((void *)a1 + 4);
  uint64_t Value = 0xFFFFFFFFLL;
  a1[12] = -1;
  int v6 = -1;
  while (1)
  {
    uint64_t v7 = *a1;
    if ((int)v7 >= a1[4]) {
      break;
    }
    uint64_t v8 = *((void *)a1 + 1);
    *a1 = v7 + 1;
    int v9 = icu::BytesTrie::next(v4, *(char *)(v8 + v7));
    if (v9 != 1)
    {
      int v10 = v9;
      if (!v9) {
        break;
      }
      uint64_t Value = icu::BytesTrie::readValue((icu::BytesTrie *)(*((void *)a1 + 5) + 1), (const unsigned __int8 *)(**((unsigned __int8 **)a1 + 5) >> 1));
      int v6 = *a1;
      if (v10 == 2) {
        break;
      }
    }
  }
  if ((Value & 0x80000000) != 0) {
    *a2 = 1;
  }
  else {
    *a1 = v6;
  }
  return Value;
}

int *sub_18C950E84(int *a1, int *a2)
{
  int v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  memset(v11, 0, sizeof(v11));
  uint64_t v12 = 0;
  uint64_t v5 = (int *)*((void *)a1 + 1);
  int v10 = v5;
  LODWORD(v11[0]) = a1[4];
  int v6 = *((unsigned __int8 *)a1 + 20);
  BYTE4(v11[0]) = *((unsigned char *)a1 + 20);
  uint64_t v7 = a1 + 6;
  if (v5 == a1 + 6)
  {
    int v10 = (int *)v11 + 2;
    memcpy((char *)v11 + 8, v5, 8 * a1[4]);
    if (v6) {
      uprv_free(v5);
    }
  }
  else
  {
    *((void *)a1 + 1) = v7;
    a1[4] = 8;
    *((unsigned char *)a1 + 20) = 0;
  }
  a1[4] = a2[4];
  *((unsigned char *)a1 + 20) = *((unsigned char *)a2 + 20);
  uint64_t v8 = (int *)*((void *)a2 + 1);
  if (v8 == a2 + 6)
  {
    *((void *)a1 + 1) = v7;
    memcpy(v7, v8, 8 * a2[4]);
    if (*((unsigned char *)a2 + 20)) {
      uprv_free(*((void **)a2 + 1));
    }
  }
  else
  {
    *((void *)a1 + 1) = v8;
  }
  a2[4] = v11[0];
  *((unsigned char *)a2 + 20) = BYTE4(v11[0]);
  if (v10 == (int *)((char *)v11 + 8))
  {
    *((void *)a2 + 1) = a2 + 6;
    memcpy(a2 + 6, (char *)v11 + 8, 8 * SLODWORD(v11[0]));
    if (BYTE4(v11[0])) {
      uprv_free((char *)v11 + 8);
    }
  }
  else
  {
    *((void *)a2 + 1) = v10;
  }
  return a1;
}

uint64_t sub_18C950FE0(int *a1, int *a2)
{
  int v2 = a1[2];
  int v3 = a2[2];
  if (v2 < 0 && v3 > 0) {
    return 1;
  }
  if (v2 >= 1 && v3 < 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(qword_1E91924C0 + 4 * v5);
  uint64_t v7 = *a2;
  int v8 = *(_DWORD *)(qword_1E91924C0 + 4 * v7);
  if (v6 < v8) {
    return 0xFFFFFFFFLL;
  }
  if (v6 > v8) {
    return 1;
  }
  if ((int)v5 < (int)v7) {
    return 0xFFFFFFFFLL;
  }
  if ((int)v5 > (int)v7) {
    return 1;
  }
  int v9 = a1[1];
  unsigned int v10 = v9 + 51;
  int v11 = a2[1];
  unsigned int v12 = v11 + 59;
  int v13 = 3 * v9 + 180;
  int v14 = v9 - 30;
  if (v10 >= 0xFFFFFFF8) {
    int v14 = v13;
  }
  int v15 = 3 * v11 + 180;
  int v16 = v11 - 30;
  if (v12 < 8) {
    int v16 = v15;
  }
  if (v14 < v16) {
    return 1;
  }
  if (v14 > v16) {
    return 0xFFFFFFFFLL;
  }
  if (v10 <= 0xFFFFFFF7 && v12 < 8) {
    return 1;
  }
  int v18 = v10 > 0xFFFFFFF7 && v12 > 7;
  return (v18 << 31 >> 31);
}

uint64_t *sub_18C9510A8(unsigned int *a1, _DWORD *a2, icu::MeasureUnitImpl *a3, UErrorCode *a4)
{
  int v8 = a1[4];
  uint64_t v9 = *a1;
  if (v9 != v8)
  {
LABEL_16:
    int v14 = icu::UMemory::operator new((uint64_t *)v9, (icu::UMemory *)0xA8, (unint64_t)a2);
    unsigned int v12 = v14;
    if (v14)
    {
      *(_DWORD *)int v14 = *a2;
      icu::MeasureUnitImpl::copy(a3, a4, (uint64_t)(v14 + 1));
    }
    uint64_t v15 = (int)*a1;
    *a1 = v15 + 1;
    *(void *)(*((void *)a1 + 1) + 8 * v15) = v12;
    return v12;
  }
  if (v8 == 8) {
    int v10 = 32;
  }
  else {
    int v10 = 2 * v8;
  }
  if (v10 < 1) {
    return 0;
  }
  int v11 = (uint64_t *)uprv_malloc(8 * v10);
  unsigned int v12 = v11;
  if (v11)
  {
    if (v8 >= 1)
    {
      int v13 = a1[4];
      if (v13 >= v8) {
        int v13 = v8;
      }
      if (v13 >= v10) {
        int v13 = v10;
      }
      memcpy(v11, *((const void **)a1 + 1), 8 * v13);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free(*((void **)a1 + 1));
    }
    *((void *)a1 + 1) = v12;
    a1[4] = v10;
    uint64_t v9 = 1;
    *((unsigned char *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v12;
}

uint64_t *sub_18C9511B8(unsigned int *a1, _DWORD *a2, const icu::SingleUnitImpl *a3, UErrorCode *a4)
{
  int v8 = a1[4];
  uint64_t v9 = *a1;
  if (v9 != v8)
  {
LABEL_16:
    int v14 = icu::UMemory::operator new((uint64_t *)v9, (icu::UMemory *)0xA8, (unint64_t)a2);
    unsigned int v12 = v14;
    if (v14)
    {
      *(_DWORD *)int v14 = *a2;
      *((_DWORD *)v14 + 2) = 0;
      *((_DWORD *)v14 + 4) = 0;
      v14[3] = (uint64_t)(v14 + 5);
      *((_DWORD *)v14 + 8) = 8;
      *((unsigned char *)v14 + 36) = 0;
      v14[13] = (uint64_t)v14 + 117;
      *((_DWORD *)v14 + 28) = 40;
      *((_WORD *)v14 + 58) = 0;
      *((_DWORD *)v14 + 40) = 0;
      icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)(v14 + 1), a3, a4);
    }
    uint64_t v15 = (int)*a1;
    *a1 = v15 + 1;
    *(void *)(*((void *)a1 + 1) + 8 * v15) = v12;
    return v12;
  }
  if (v8 == 8) {
    int v10 = 32;
  }
  else {
    int v10 = 2 * v8;
  }
  if (v10 < 1) {
    return 0;
  }
  int v11 = (uint64_t *)uprv_malloc(8 * v10);
  unsigned int v12 = v11;
  if (v11)
  {
    if (v8 >= 1)
    {
      int v13 = a1[4];
      if (v13 >= v8) {
        int v13 = v8;
      }
      if (v13 >= v10) {
        int v13 = v10;
      }
      memcpy(v11, *((const void **)a1 + 1), 8 * v13);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free(*((void **)a1 + 1));
    }
    *((void *)a1 + 1) = v12;
    a1[4] = v10;
    uint64_t v9 = 1;
    *((unsigned char *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v12;
}

void *icu::Measure::getStaticClassID(icu::Measure *this)
{
  return &unk_1E91924D8;
}

void *icu::Measure::getDynamicClassID(icu::Measure *this)
{
  return &unk_1E91924D8;
}

icu::Measure *icu::Measure::Measure(icu::Measure *this)
{
  *(void *)this = &unk_1EDA4E3C8;
  icu::Formattable::Formattable((icu::Measure *)((char *)this + 8));
  *((void *)this + 15) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDA4E3C8;
  icu::Formattable::Formattable((icu::Measure *)((char *)this + 8));
  *((void *)this + 15) = 0;
  return this;
}

icu::Measure *icu::Measure::Measure(icu::Measure *this, const icu::Formattable *a2, icu::MeasureUnit *a3, UErrorCode *a4)
{
  *(void *)this = &unk_1EDA4E3C8;
  uint64_t v7 = (icu::Formattable *)icu::Formattable::Formattable((icu::Measure *)((char *)this + 8), a2);
  *((void *)this + 15) = a3;
  if (*(int *)a4 <= 0)
  {
    int isNumeric = icu::Formattable::isNumeric(v7);
    if (!a3 || !isNumeric) {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

uint64_t icu::Measure::Measure(icu::Measure *this, const icu::Measure *a2)
{
  *(void *)this = &unk_1EDA4E3C8;
  icu::Formattable::Formattable((icu::Measure *)((char *)this + 8));
  *((void *)this + 15) = 0;

  return icu::Measure::operator=((uint64_t)this, (uint64_t)a2);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDA4E3C8;
  icu::Formattable::Formattable((icu::Measure *)((char *)this + 8));
  *((void *)this + 15) = 0;

  return icu::Measure::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::Measure::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 120);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    icu::Formattable::operator=(a1 + 8, a2 + 8);
    uint64_t v5 = *(void *)(a2 + 120);
    if (v5) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    }
    *(void *)(a1 + 120) = v5;
  }
  return a1;
}

uint64_t icu::Measure::clone@<X0>(icu::Measure *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x80, a2);
  uint64_t v5 = (uint64_t)v4;
  if (v4)
  {
    *uint64_t v4 = (uint64_t)&unk_1EDA4E3C8;
    icu::Formattable::Formattable((icu::Formattable *)(v4 + 1));
    *(void *)(v5 + 120) = 0;
    icu::Measure::operator=(v5, (uint64_t)this);
  }
  return v5;
}

void icu::Measure::~Measure(icu::Measure *this)
{
  *(void *)this = &unk_1EDA4E3C8;
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  icu::Formattable::~Formattable((icu::Measure *)((char *)this + 8));

  icu::UObject::~UObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::Measure::~Measure(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::Measure::operator==(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  if (!sub_18C828FD8(*(void *)(*a1 - 8), *(void *)(*a2 - 8))
    || !icu::Formattable::operator==(a1 + 1, a2 + 1))
  {
    return 0;
  }
  uint64_t v4 = a1[15];
  uint64_t v5 = a2[15];
  BOOL v6 = (v4 == 0) == (v5 == 0);
  if (!v4 || !v5) {
    return v6;
  }
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)v4 + 32);

  return v7();
}

void *icu::MessageFormat::getStaticClassID(icu::MessageFormat *this)
{
  return &unk_1E91924D9;
}

void *icu::MessageFormat::getDynamicClassID(icu::MessageFormat *this)
{
  return &unk_1E91924D9;
}

void *sub_18C951790()
{
  return &unk_1E91924DA;
}

icu::MessageFormat *icu::MessageFormat::MessageFormat(icu::MessageFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  BOOL v6 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(void *)BOOL v6 = &unk_1EDA4E410;
  uint64_t v7 = (icu::Locale *)((char *)v6 + 328);
  uint64_t Default = icu::Locale::getDefault(v6);
  icu::Locale::Locale(v7, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::MessageFormat *)((char *)this + 552), a3);
  *((void *)this + 85) = 0;
  *((_DWORD *)this + 172) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((unsigned char *)this + 712) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((void *)this + 94) = &unk_1EDA4E568;
  *((void *)this + 95) = this;
  *((void *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((void *)this + 98) = &unk_1EDA4E568;
  *((void *)this + 99) = this;
  *((void *)this + 100) = 0;
  *((_DWORD *)this + 202) = 1;
  icu::Format::setLocaleIDs(this, *((const char **)this + 46), *((const char **)this + 46));
  (*(void (**)(icu::MessageFormat *, const icu::UnicodeString *, UErrorCode *))(*(void *)this + 80))(this, a2, a3);
  return this;
}

uint64_t icu::MessageFormat::PluralSelectorProvider::PluralSelectorProvider(uint64_t result, uint64_t a2, int a3)
{
  *(void *)uint64_t result = &unk_1EDA4E568;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = a3;
  return result;
}

{
  *(void *)uint64_t result = &unk_1EDA4E568;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = a3;
  return result;
}

icu::MessageFormat *icu::MessageFormat::MessageFormat(icu::MessageFormat *this, const icu::UnicodeString *a2, const icu::Locale *a3, UErrorCode *a4)
{
  int v8 = (void *)icu::Format::Format((uint64_t)this);
  *int v8 = &unk_1EDA4E410;
  icu::Locale::Locale((icu::Locale *)(v8 + 41), (uint64_t)a3);
  icu::MessagePattern::MessagePattern((icu::MessageFormat *)((char *)this + 552), a4);
  *((void *)this + 85) = 0;
  *((_DWORD *)this + 172) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((unsigned char *)this + 712) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((void *)this + 94) = &unk_1EDA4E568;
  *((void *)this + 95) = this;
  *((void *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((void *)this + 98) = &unk_1EDA4E568;
  *((void *)this + 99) = this;
  *((void *)this + 100) = 0;
  *((_DWORD *)this + 202) = 1;
  icu::Format::setLocaleIDs(this, *((const char **)this + 46), *((const char **)this + 46));
  (*(void (**)(icu::MessageFormat *, const icu::UnicodeString *, UErrorCode *))(*(void *)this + 80))(this, a2, a4);
  return this;
}

icu::MessageFormat *icu::MessageFormat::MessageFormat(icu::MessageFormat *this, const icu::UnicodeString *a2, const icu::Locale *a3, UParseError *a4, UErrorCode *a5)
{
  int v10 = (void *)icu::Format::Format((uint64_t)this);
  void *v10 = &unk_1EDA4E410;
  icu::Locale::Locale((icu::Locale *)(v10 + 41), (uint64_t)a3);
  icu::MessagePattern::MessagePattern((icu::MessageFormat *)((char *)this + 552), a5);
  *((void *)this + 85) = 0;
  *((_DWORD *)this + 172) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((unsigned char *)this + 712) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((void *)this + 94) = &unk_1EDA4E568;
  *((void *)this + 95) = this;
  *((void *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((void *)this + 98) = &unk_1EDA4E568;
  *((void *)this + 99) = this;
  *((void *)this + 100) = 0;
  *((_DWORD *)this + 202) = 1;
  icu::Format::setLocaleIDs(this, *((const char **)this + 46), *((const char **)this + 46));
  (*(void (**)(icu::MessageFormat *, const icu::UnicodeString *, UParseError *, UErrorCode *))(*(void *)this + 88))(this, a2, a4, a5);
  return this;
}

icu::MessageFormat *icu::MessageFormat::MessageFormat(icu::MessageFormat *this, const icu::MessageFormat *a2)
{
  uint64_t v4 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *uint64_t v4 = &unk_1EDA4E410;
  icu::Locale::Locale((icu::Locale *)(v4 + 41), (uint64_t)a2 + 328);
  icu::MessagePattern::MessagePattern((icu::MessageFormat *)((char *)this + 552), (const icu::MessageFormat *)((char *)a2 + 552));
  *((void *)this + 85) = 0;
  *((_DWORD *)this + 172) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((unsigned char *)this + 712) = *((unsigned char *)a2 + 712);
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((void *)this + 94) = &unk_1EDA4E568;
  *((void *)this + 95) = this;
  *((void *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((void *)this + 98) = &unk_1EDA4E568;
  *((void *)this + 99) = this;
  *((void *)this + 100) = 0;
  *((_DWORD *)this + 202) = 1;
  UErrorCode v6 = U_ZERO_ERROR;
  icu::MessageFormat::copyObjects(this, a2, &v6);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR) {
    icu::MessageFormat::resetPattern(this);
  }
  return this;
}

uint64_t icu::MessageFormat::copyObjects(icu::MessageFormat *this, const icu::MessageFormat *a2, UErrorCode *a3)
{
  int v6 = *((_DWORD *)a2 + 176);
  *((_DWORD *)this + 176) = v6;
  if (v6 >= 1)
  {
    uint64_t result = icu::MessageFormat::allocateArgTypes(this, v6, a3);
    if (!result) {
      return result;
    }
    memcpy(*((void **)this + 87), *((const void **)a2 + 87), 4 * *((int *)this + 176));
  }
  uint64_t v8 = *((void *)this + 92);
  if (v8) {
    uhash_removeAll(v8);
  }
  uint64_t v9 = *((void *)this + 93);
  if (v9) {
    uhash_removeAll(v9);
  }
  uint64_t v10 = *((void *)a2 + 92);
  if (!v10) {
    goto LABEL_16;
  }
  if (!*((void *)this + 92))
  {
    uint64_t result = (uint64_t)uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, (uint64_t)sub_18C952BB4, (int *)a3);
    *((void *)this + 92) = result;
    if (*(int *)a3 > 0) {
      return result;
    }
    uhash_setValueDeleter(result, (uint64_t)uprv_deleteUObject);
    uint64_t v10 = *((void *)a2 + 92);
  }
  int v11 = uhash_count(v10);
  int v19 = -1;
  if (v11 >= 1 && *(int *)a3 <= 0)
  {
    int v12 = v11;
    int v13 = 1;
    while (1)
    {
      uint64_t v14 = uhash_nextElement(*((uint64_t **)a2 + 92), &v19);
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v14 + 8) + 32))(*(void *)(v14 + 8));
      if (!result) {
        break;
      }
      uhash_iput(*((void *)this + 92), *(_DWORD *)(v14 + 16), result, (int *)a3);
      if (v13 < v12)
      {
        ++v13;
        if (*(int *)a3 < 1) {
          continue;
        }
      }
      goto LABEL_16;
    }
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  else
  {
LABEL_16:
    uint64_t result = *((void *)a2 + 93);
    if (result)
    {
      if (!*((void *)this + 93))
      {
        *((void *)this + 93) = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, (int *)a3);
        uint64_t result = *((void *)a2 + 93);
      }
      uint64_t result = uhash_count(result);
      int v18 = -1;
      if ((int)result >= 1 && *(int *)a3 <= 0)
      {
        int v15 = result;
        int v16 = 1;
        do
        {
          uint64_t v17 = uhash_nextElement(*((uint64_t **)a2 + 93), &v18);
          uint64_t result = uhash_iputi(*((void *)this + 93), *(_DWORD *)(v17 + 16), *(_DWORD *)(v17 + 8), (int *)a3);
          if (v16 >= v15) {
            break;
          }
          ++v16;
        }
        while (*(int *)a3 < 1);
      }
    }
  }
  return result;
}

void icu::MessageFormat::resetPattern(icu::MessageFormat *this)
{
  *((void *)this + 92) = 0;
  uhash_close(*((unsigned char **)this + 93));
  *((void *)this + 93) = 0;
  *((_DWORD *)this + 176) = 0;
  *((unsigned char *)this + 712) = 0;
}

void icu::MessageFormat::~MessageFormat(icu::MessageFormat *this)
{
  *(void *)this = &unk_1EDA4E410;
  uhash_close(*((unsigned char **)this + 92));
  uhash_close(*((unsigned char **)this + 93));
  uprv_free(*((void **)this + 87));
  uprv_free(*((void **)this + 85));
  uint64_t v2 = *((void *)this + 90);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 91);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::MessageFormat::PluralSelectorProvider::~PluralSelectorProvider((icu::MessageFormat *)((char *)this + 784));
  icu::MessageFormat::PluralSelectorProvider::~PluralSelectorProvider((icu::MessageFormat *)((char *)this + 752));
  icu::MessagePattern::~MessagePattern((icu::MessageFormat *)((char *)this + 552));
  icu::Locale::~Locale((icu::MessageFormat *)((char *)this + 328));

  icu::Format::~Format(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::MessageFormat::~MessageFormat(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::MessageFormat::allocateArgTypes(icu::MessageFormat *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  int v5 = *((_DWORD *)this + 177);
  if (v5 >= a2) {
    return 1;
  }
  int v7 = 2 * v5;
  if (v7 <= a2) {
    int v7 = a2;
  }
  if (a2 >= 10) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = 10;
  }
  uint64_t result = (uint64_t)uprv_realloc(*((void **)this + 87), 4 * v8);
  if (result)
  {
    *((void *)this + 87) = result;
    *((_DWORD *)this + 177) = v8;
    return 1;
  }
  *a3 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

icu::MessageFormat *icu::MessageFormat::operator=(icu::MessageFormat *a1, icu::MessageFormat *a2)
{
  if (a1 != a2)
  {
    icu::Format::operator=((uint64_t)a1, (uint64_t)a2);
    (*(void (**)(icu::MessageFormat *, unsigned char *))(*(void *)a1 + 64))(a1, (unsigned char *)a2 + 328);
    icu::MessagePattern::operator=((uint64_t)a1 + 552, (uint64_t)a2 + 552);
    *((unsigned char *)a1 + 712) = *((unsigned char *)a2 + 712);
    UErrorCode v5 = U_ZERO_ERROR;
    icu::MessageFormat::copyObjects(a1, a2, &v5);
    if (v5 >= U_ILLEGAL_ARGUMENT_ERROR) {
      icu::MessageFormat::resetPattern(a1);
    }
  }
  return a1;
}

BOOL icu::MessageFormat::operator==(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (!icu::Format::operator==(a1, a2)
    || !icu::MessagePattern::operator==((uint64_t)(a1 + 69), (uint64_t)(a2 + 69))
    || !icu::Locale::operator==((uint64_t)(a1 + 41), (uint64_t)(a2 + 41)))
  {
    return 0;
  }
  uint64_t v4 = a1[93];
  uint64_t v5 = a2[93];
  BOOL v6 = (v4 == 0) == (v5 == 0);
  if (!v4 || !v5) {
    return v6;
  }
  int v7 = uhash_count(v4);
  if (v7 != uhash_count(a2[93])) {
    return 0;
  }
  int v18 = -1;
  int v19 = -1;
  if (v7 < 1) {
    return 1;
  }
  uint64_t v8 = uhash_nextElement((uint64_t *)a1[93], &v19);
  uint64_t v9 = uhash_nextElement((uint64_t *)a2[93], &v18);
  unsigned int v10 = *(_DWORD *)(v8 + 16);
  int v11 = (unsigned int *)(v9 + 16);
  if (v10 != *(_DWORD *)(v9 + 16)) {
    return 0;
  }
  BOOL v6 = 0;
  int v12 = 1;
  do
  {
    uint64_t v13 = uhash_iget(a1[92], v10);
    uint64_t v14 = uhash_iget(a2[92], *v11);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v13 + 24))(v13, v14)) {
      break;
    }
    BOOL v6 = v12 >= v7;
    if (v7 == v12) {
      break;
    }
    uint64_t v15 = uhash_nextElement((uint64_t *)a1[93], &v19);
    uint64_t v16 = uhash_nextElement((uint64_t *)a2[93], &v18);
    unsigned int v10 = *(_DWORD *)(v15 + 16);
    int v11 = (unsigned int *)(v16 + 16);
    ++v12;
  }
  while (v10 == *(_DWORD *)(v16 + 16));
  return v6;
}

icu::MessageFormat *icu::MessageFormat::clone@<X0>(icu::MessageFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::MessageFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x330, a2);
  if (result) {
    return icu::MessageFormat::MessageFormat(result, this);
  }
  return result;
}

uint64_t icu::MessageFormat::setLocale(icu::MessageFormat *this, const icu::Locale *a2)
{
  uint64_t v4 = (icu::MessageFormat *)((char *)this + 328);
  uint64_t result = icu::Locale::operator==((uint64_t)this + 328, (uint64_t)a2);
  if ((result & 1) == 0)
  {
    uint64_t v6 = *((void *)this + 90);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *((void *)this + 90) = 0;
    uint64_t v7 = *((void *)this + 91);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    *((void *)this + 91) = 0;
    icu::Locale::operator=(v4, (uint64_t)a2);
    icu::Format::setLocaleIDs(this, *((const char **)this + 46), *((const char **)this + 46));
    uint64_t v8 = *((void *)this + 96);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    *((void *)this + 96) = 0;
    uint64_t result = *((void *)this + 100);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *((void *)this + 100) = 0;
  }
  return result;
}

uint64_t icu::MessageFormat::PluralSelectorProvider::reset(icu::MessageFormat::PluralSelectorProvider *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = 0;
  return result;
}

uint64_t icu::MessageFormat::getLocale(icu::MessageFormat *this)
{
  return (uint64_t)this + 328;
}

uint64_t icu::MessageFormat::applyPattern(icu::MessageFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  return (*(uint64_t (**)(icu::MessageFormat *, const icu::UnicodeString *, _OWORD *, UErrorCode *))(*(void *)this + 88))(this, a2, v4, a3);
}

void icu::MessageFormat::applyPattern(int32x2_t *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    icu::MessagePattern::parse((icu::MessagePattern *)&this[69], a2, a3, a4);
    icu::MessageFormat::cacheExplicitFormats(this, a4);
    if (*(int *)a4 >= 1)
    {
      icu::MessageFormat::resetPattern((icu::MessageFormat *)this);
    }
  }
}

void icu::MessageFormat::cacheExplicitFormats(int32x2_t *this, UErrorCode *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (*(int *)a2 <= 0)
  {
    uint64_t v4 = (uint64_t)this[92];
    if (v4) {
      uhash_removeAll(v4);
    }
    uint64_t v5 = (uint64_t)this[93];
    if (v5) {
      uhash_removeAll(v5);
    }
    int v6 = 0;
    int v7 = this[81].i32[0];
    unint64_t v8 = (v7 - 2);
    this[88].i32[0] = 0;
    UErrorCode v9 = *a2;
    if (v7 >= 5 && v9 <= U_ZERO_ERROR)
    {
      int v6 = 0;
      uint64_t v11 = *(void *)&this[80] + 32;
      unint64_t v12 = 3;
      uint64_t v13 = (int *)v11;
      do
      {
        int v14 = *v13;
        v13 += 4;
        if (v14 == 7)
        {
          int v15 = *(__int16 *)(v11 + 10);
          if (v6 <= v15)
          {
            int v6 = v15 + 1;
            this[88].i32[0] = v15 + 1;
            UErrorCode v9 = *a2;
          }
        }
        if (v12 >= v8) {
          break;
        }
        ++v12;
        uint64_t v11 = (uint64_t)v13;
      }
      while (v9 <= U_ZERO_ERROR);
    }
    if (icu::MessageFormat::allocateArgTypes((icu::MessageFormat *)this, v6, a2))
    {
      uint64_t v16 = this[88].u32[0];
      if ((int)v16 >= 1) {
        memset_pattern16(*(void **)&this[87], &unk_18CA94880, 4 * v16);
      }
      this[89].i8[0] = 0;
      if (v7 >= 4)
      {
        UErrorCode v17 = *a2;
        if (*(int *)a2 <= 0)
        {
          unint64_t v18 = 1;
          do
          {
            int32x2_t v19 = this[80];
            if (*(_DWORD *)(*(void *)&v19 + 16 * (int)v18) == 5)
            {
              uint64_t v20 = (int)v18 + 1;
              if (*(_DWORD *)(*(void *)&v19 + 16 * v20) == 7) {
                int v21 = *(__int16 *)(*(void *)&v19 + 16 * v20 + 10);
              }
              else {
                int v21 = -1;
              }
              int v22 = *(__int16 *)(*(void *)&v19 + 16 * (int)v18 + 10);
              int v33 = 0;
              switch(v22)
              {
                case 0:
                case 4:
                  goto LABEL_31;
                case 1:
                  memset(v41, 0, 64);
                  uint64_t v23 = (int)v18 + 3;
                  icu::UnicodeString::tempSubString((icu::UnicodeString *)&this[71], *(_DWORD *)(*(void *)&v19 + 16 * (int)v18 + 36), *(unsigned __int16 *)(*(void *)&v19 + 16 * (int)v18 + 40), (icu::UnicodeString *)v41);
                  uint64_t v40 = 0;
                  long long v38 = 0u;
                  long long v39 = 0u;
                  long long v37 = 0u;
                  uint64_t v36 = &unk_1EDA47700;
                  LOWORD(v37) = 2;
                  int32x2_t v24 = this[80];
                  if (*(_DWORD *)(*(void *)&v24 + 16 * v23) == 10)
                  {
                    icu::UnicodeString::tempSubString((icu::UnicodeString *)&this[71], *(_DWORD *)(*(void *)&v24 + 16 * v23 + 4), *(unsigned __int16 *)(*(void *)&v24 + 16 * v23 + 8), (icu::UnicodeString *)v34);
                    icu::UnicodeString::operator=((icu::UnicodeString *)&v36, (icu::UnicodeString *)v34);
                    icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v34);
                    LODWORD(v23) = v18 + 4;
                  }
                  uint64_t v35 = 0;
                  memset(v34, 0, sizeof(v34));
                  uint64_t v26 = (icu::Format *)icu::MessageFormat::createAppropriateFormat((uint64_t)this, (uint64_t)v41, (icu::UnicodeString *)&v36, &v33, (uint64_t)v34, a2);
                  icu::MessageFormat::setArgStartFormat(this, v18, v26, a2);
                  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v36);
                  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v41);
                  LODWORD(v18) = v23;
                  break;
                case 2:
                case 3:
                case 5:
                  int v33 = 1;
                  break;
                default:
                  *a2 = U_INTERNAL_PROGRAM_ERROR;
LABEL_31:
                  int v33 = 3;
                  break;
              }
              if (v21 != -1)
              {
                int32x2_t v29 = this[87];
                int v30 = *(_DWORD *)(*(void *)&v29 + 4 * v21);
                int v31 = v33;
                if (v30 != 6 && v30 != v33) {
                  this[89].i8[0] = 1;
                }
                *(_DWORD *)(*(void *)&v29 + 4 * v21) = v31;
              }
              UErrorCode v17 = *a2;
            }
            unint64_t v18 = (v18 + 1);
          }
          while ((int)v18 < (int)v8 && v17 < U_ILLEGAL_ARGUMENT_ERROR);
        }
      }
    }
  }
}

uint64_t icu::MessageFormat::applyPattern(_DWORD *a1, uint64_t a2, int a3, _OWORD *a4, uint64_t a5)
{
  if (a1[140] != a3)
  {
    icu::MessagePattern::clear((uint64_t)(a1 + 138));
    a1[140] = a3;
  }
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  if (a4) {
    unsigned int v10 = a4;
  }
  else {
    unsigned int v10 = v12;
  }
  return (*(uint64_t (**)(_DWORD *, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 88))(a1, a2, v10, a5);
}

icu::UnicodeString *icu::MessageFormat::toPattern(icu::MessageFormat *this, icu::UnicodeString *a2)
{
  uint64_t v4 = *((void *)this + 93);
  if (v4 && uhash_count(v4) || !*((_DWORD *)this + 162))
  {
    icu::UnicodeString::setToBogus(a2);
    return a2;
  }
  else
  {
    unsigned int v5 = *((unsigned __int16 *)this + 288);
    int v6 = (__int16)v5;
    unsigned int v7 = v5 >> 5;
    if (v6 >= 0) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = *((unsigned int *)this + 145);
    }
    return (icu::UnicodeString *)icu::UnicodeString::doAppend((uint64_t)a2, (icu::MessageFormat *)((char *)this + 568), 0, v8);
  }
}

uint64_t icu::MessageFormat::nextTopLevelArgStart(icu::MessageFormat *this, int a2)
{
  uint64_t v2 = *((void *)this + 80);
  if (a2)
  {
    int v3 = *(_DWORD *)(v2 + 16 * a2 + 12);
    if (v3 <= a2) {
      int v3 = a2;
    }
    uint64_t result = v3;
  }
  else
  {
    uint64_t result = 0;
  }
  unsigned int v5 = (int *)(v2 + 16 * result + 16);
  while (1)
  {
    int v7 = *v5;
    v5 += 4;
    int v6 = v7;
    if (v7 == 1) {
      break;
    }
    uint64_t result = (result + 1);
    if (v6 == 5) {
      return result;
    }
  }
  return 0xFFFFFFFFLL;
}

int32x2_t *icu::MessageFormat::setArgStartFormat(int32x2_t *this, unint64_t a2, icu::Format *a3, UErrorCode *a4)
{
  uint64_t v4 = a3;
  if (*(int *)a4 >= 1)
  {
    if (!a3) {
      return this;
    }
LABEL_3:
    unsigned int v5 = *(uint64_t (**)(icu::Format *))(*(void *)v4 + 8);
    return (int32x2_t *)v5(v4);
  }
  unsigned int v7 = a2;
  uint64_t v8 = this;
  UErrorCode v9 = (uint64_t *)this[92];
  if (v9)
  {
    if (!a3)
    {
LABEL_8:
      unsigned int v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x148, a2);
      uint64_t v4 = (icu::Format *)v10;
      if (v10)
      {
        v10[40] = 0;
        *((_OWORD *)v10 + 18) = 0u;
        *((_OWORD *)v10 + 19) = 0u;
        *((_OWORD *)v10 + 16) = 0u;
        *((_OWORD *)v10 + 17) = 0u;
        *((_OWORD *)v10 + 14) = 0u;
        *((_OWORD *)v10 + 15) = 0u;
        *((_OWORD *)v10 + 12) = 0u;
        *((_OWORD *)v10 + 13) = 0u;
        *((_OWORD *)v10 + 10) = 0u;
        *((_OWORD *)v10 + 11) = 0u;
        *((_OWORD *)v10 + 8) = 0u;
        *((_OWORD *)v10 + 9) = 0u;
        *((_OWORD *)v10 + 6) = 0u;
        *((_OWORD *)v10 + 7) = 0u;
        *((_OWORD *)v10 + 4) = 0u;
        *((_OWORD *)v10 + 5) = 0u;
        *((_OWORD *)v10 + 2) = 0u;
        *((_OWORD *)v10 + 3) = 0u;
        *(_OWORD *)unsigned int v10 = 0u;
        *((_OWORD *)v10 + 1) = 0u;
        icu::Format::Format((uint64_t)v10);
        *(void *)uint64_t v4 = &unk_1EDA4E5A8;
      }
    }
  }
  else
  {
    this = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, (uint64_t)sub_18C952BB4, (int *)a4);
    v8[92] = (int32x2_t)this;
    if (*(int *)a4 >= 1)
    {
      if (!v4) {
        return this;
      }
      goto LABEL_3;
    }
    uhash_setValueDeleter((uint64_t)this, (uint64_t)uprv_deleteUObject);
    if (!v4) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = (uint64_t)v8[92];

  return (int32x2_t *)uhash_iput(v11, v7, (uint64_t)v4, (int *)a4);
}

uint64_t sub_18C952BB4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
}

BOOL icu::MessageFormat::argNameMatches(icu::MessageFormat *this, int a2, const icu::UnicodeString *a3, int a4)
{
  uint64_t v4 = *((void *)this + 80);
  if (*(_DWORD *)(v4 + 16 * a2) == 8) {
    return sub_18C952C24((uint64_t)this + 552, v4 + 16 * a2, (uint64_t)a3);
  }
  else {
    return *(__int16 *)(v4 + 16 * a2 + 10) == a4;
  }
}

BOOL sub_18C952C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(unsigned __int16 *)(a3 + 8);
  if (v3)
  {
    int v9 = (*(_WORD *)(a1 + 24) & 1) == 0;
  }
  else
  {
    uint64_t v4 = a1 + 16;
    int32_t v5 = *(unsigned __int16 *)(a2 + 8);
    int v6 = *(_DWORD *)(a2 + 4);
    if ((v3 & 0x8000u) == 0) {
      int v7 = v3 >> 5;
    }
    else {
      int v7 = *(_DWORD *)(a3 + 12);
    }
    if ((v3 & 2) != 0) {
      uint64_t v8 = a3 + 10;
    }
    else {
      uint64_t v8 = *(void *)(a3 + 24);
    }
    int v9 = icu::UnicodeString::doCompare(v4, v6, v5, v8, v7 & (v7 >> 31), v7 & ~(v7 >> 31));
  }
  return v9 == 0;
}

uint64_t icu::MessageFormat::setCustomArgStartFormat(int32x2_t *this, unint64_t a2, icu::Format *a3, UErrorCode *a4)
{
  unsigned int v5 = a2;
  icu::MessageFormat::setArgStartFormat(this, a2, a3, a4);
  int v7 = (int32x2_t *)this[93];
  if (!v7)
  {
    int v7 = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, (int *)a4);
    this[93] = (int32x2_t)v7;
  }

  return uhash_iputi((uint64_t)v7, v5, 1u, (int *)a4);
}

const void *icu::MessageFormat::getCachedFormatter(icu::MessageFormat *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 92);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = (const void *)uhash_iget(v2, a2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  {
    return 0;
  }
  return v4;
}

int32x2_t *icu::MessageFormat::adoptFormats(int32x2_t *this, icu::Format **a2, unsigned int a3)
{
  if (a2 && (a3 & 0x80000000) == 0)
  {
    unsigned int v5 = this;
    uint64_t v6 = (uint64_t)this[92];
    if (v6) {
      uhash_removeAll(v6);
    }
    this = (int32x2_t *)v5[93];
    if (this) {
      this = (int32x2_t *)uhash_removeAll((uint64_t)this);
    }
    UErrorCode v16 = U_ZERO_ERROR;
    if (a3)
    {
      unint64_t v7 = 0;
      LODWORD(v8) = 0;
LABEL_9:
      int32x2_t v9 = v5[80];
      if (v8)
      {
        int v10 = *(_DWORD *)(*(void *)&v9 + 16 * v8 + 12);
        if (v10 <= (int)v8) {
          unint64_t v8 = v8;
        }
        else {
          unint64_t v8 = v10;
        }
      }
      else
      {
        unint64_t v8 = 0;
      }
      uint64_t v11 = (int *)(*(void *)&v9 + 16 * v8 + 16);
      while (1)
      {
        int v13 = *v11;
        v11 += 4;
        int v12 = v13;
        if (v13 == 1) {
          break;
        }
        unint64_t v8 = (v8 + 1);
        if (v12 == 5)
        {
          if ((v8 & 0x80000000) == 0)
          {
            this = (int32x2_t *)icu::MessageFormat::setCustomArgStartFormat(v5, v8, a2[v7++], &v16);
            if (v7 < a3 && v16 <= U_ZERO_ERROR) {
              goto LABEL_9;
            }
          }
          break;
        }
      }
    }
    else
    {
      LODWORD(v7) = 0;
    }
    if ((int)v7 < (int)a3)
    {
      int v14 = &a2[v7];
      unint64_t v15 = a3 - (unint64_t)v7;
      do
      {
        this = (int32x2_t *)*v14;
        if (*v14) {
          this = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)this + 8))(this);
        }
        ++v14;
        --v15;
      }
      while (v15);
    }
  }
  return this;
}

void icu::MessageFormat::setFormats(int32x2_t *this, const icu::Format **a2, unsigned int a3)
{
  if (a2 && (a3 & 0x80000000) == 0)
  {
    uint64_t v6 = (uint64_t)this[92];
    if (v6) {
      uhash_removeAll(v6);
    }
    uint64_t v7 = (uint64_t)this[93];
    if (v7) {
      uhash_removeAll(v7);
    }
    UErrorCode v18 = U_ZERO_ERROR;
    if (a3)
    {
      UErrorCode v8 = U_ZERO_ERROR;
      unint64_t v9 = 0;
      LODWORD(v10) = 0;
LABEL_9:
      int32x2_t v11 = this[80];
      if (v10)
      {
        int v12 = *(_DWORD *)(*(void *)&v11 + 16 * v10 + 12);
        if (v12 <= (int)v10) {
          unint64_t v10 = v10;
        }
        else {
          unint64_t v10 = v12;
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      int v13 = (int *)(*(void *)&v11 + 16 * v10 + 16);
      while (1)
      {
        int v15 = *v13;
        v13 += 4;
        int v14 = v15;
        if (v15 == 1) {
          break;
        }
        unint64_t v10 = (v10 + 1);
        if (v14 == 5)
        {
          if ((v10 & 0x80000000) == 0)
          {
            UErrorCode v16 = a2[v9];
            if (v16)
            {
              UErrorCode v17 = (icu::Format *)(*(uint64_t (**)(const icu::Format *))(*(void *)v16 + 32))(v16);
              if (!v17) {
                UErrorCode v18 = U_MEMORY_ALLOCATION_ERROR;
              }
            }
            else
            {
              UErrorCode v17 = 0;
            }
            icu::MessageFormat::setCustomArgStartFormat(this, v10, v17, &v18);
            ++v9;
            UErrorCode v8 = v18;
            if (v9 < a3 && v18 <= U_ZERO_ERROR) {
              goto LABEL_9;
            }
          }
          break;
        }
      }
      if (v8 >= U_ILLEGAL_ARGUMENT_ERROR) {
        icu::MessageFormat::resetPattern((icu::MessageFormat *)this);
      }
    }
  }
}

int32x2_t *icu::MessageFormat::adoptFormat(int32x2_t *this, int a2, icu::Format *a3)
{
  if ((a2 & 0x80000000) == 0)
  {
    int v4 = 0;
    LODWORD(v5) = 0;
    int32x2_t v6 = this[80];
LABEL_3:
    if (v5)
    {
      int v7 = *(_DWORD *)(*(void *)&v6 + 16 * v5 + 12);
      if (v7 <= (int)v5) {
        unint64_t v5 = v5;
      }
      else {
        unint64_t v5 = v7;
      }
    }
    else
    {
      unint64_t v5 = 0;
    }
    UErrorCode v8 = (int *)(*(void *)&v6 + 16 + 16 * v5);
    while (1)
    {
      int v10 = *v8;
      v8 += 4;
      int v9 = v10;
      if (v10 == 1) {
        break;
      }
      unint64_t v5 = (v5 + 1);
      if (v9 == 5)
      {
        if ((v5 & 0x80000000) != 0) {
          break;
        }
        if (v4++ == a2)
        {
          UErrorCode v13 = U_ZERO_ERROR;
          return (int32x2_t *)icu::MessageFormat::setCustomArgStartFormat(this, v5, a3, &v13);
        }
        goto LABEL_3;
      }
    }
  }
  if (a3)
  {
    int v12 = *(uint64_t (**)(icu::Format *))(*(void *)a3 + 8);
    return (int32x2_t *)v12(a3);
  }
  return this;
}

uint64_t icu::MessageFormat::adoptFormat(uint64_t this, const icu::UnicodeString *a2, icu::Format *a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0)
  {
LABEL_4:
    if (a3)
    {
LABEL_5:
      UErrorCode v8 = *(uint64_t (**)(icu::Format *))(*(void *)a3 + 8);
      return v8(a3);
    }
    return this;
  }
  int v7 = (int32x2_t *)this;
  this = icu::MessagePattern::validateArgumentName(a2, a2);
  if ((int)this < -1)
  {
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_4;
  }
  int v9 = this;
  unsigned int v10 = 0;
  int32x2_t v11 = a3;
LABEL_9:
  int32x2_t v12 = v7[80];
  if (v10)
  {
    unsigned int v13 = *(_DWORD *)(*(void *)&v12 + 16 * v10 + 12);
    if ((int)v13 <= (int)v10) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v13;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v15 = 0;
  UErrorCode v16 = (int *)(*(void *)&v12 + 16 * v14 + 16);
  while (1)
  {
    int v18 = *v16;
    v16 += 4;
    int v17 = v18;
    if (v18 == 1) {
      break;
    }
    ++v15;
    if (v17 == 5)
    {
      unsigned int v10 = v14 + v15;
      if (((v14 + v15) & 0x80000000) == 0 && *(int *)a4 <= 0)
      {
        uint64_t v19 = (v14 + v15 + 1);
        uint64_t v20 = (_DWORD *)(*(void *)&v12 + 16 * v19);
        if (*v20 == 8)
        {
          this = sub_18C952C24((uint64_t)&v7[69], (uint64_t)v20, (uint64_t)a2);
          if (!this) {
            goto LABEL_9;
          }
        }
        else
        {
          this = v9 == *(__int16 *)(*(void *)&v12 + 16 * v19 + 10);
          if (v9 != *(__int16 *)(*(void *)&v12 + 16 * v19 + 10)) {
            goto LABEL_9;
          }
        }
        if (v11
          || !a3
          || (this = (*(uint64_t (**)(icu::Format *))(*(void *)a3 + 32))(a3),
              (int32x2_t v11 = (icu::Format *)this) != 0))
        {
          unint64_t v21 = v14 + v15;
          this = icu::MessageFormat::setCustomArgStartFormat(v7, v21, v11, a4);
          int32x2_t v11 = 0;
          unsigned int v10 = v21;
          goto LABEL_9;
        }
        *a4 = U_MEMORY_ALLOCATION_ERROR;
        return this;
      }
      break;
    }
  }
  a3 = v11;
  if (v11) {
    goto LABEL_5;
  }
  return this;
}

int32x2_t *icu::MessageFormat::setFormat(int32x2_t *this, int a2, const icu::Format *a3)
{
  if ((a2 & 0x80000000) == 0)
  {
    unsigned int v3 = this;
    int v4 = 0;
    LODWORD(v5) = 0;
    int32x2_t v6 = this[80];
LABEL_3:
    if (v5)
    {
      int v7 = *(_DWORD *)(*(void *)&v6 + 16 * v5 + 12);
      if (v7 <= (int)v5) {
        unint64_t v5 = v5;
      }
      else {
        unint64_t v5 = v7;
      }
    }
    else
    {
      unint64_t v5 = 0;
    }
    UErrorCode v8 = (int *)(*(void *)&v6 + 16 + 16 * v5);
    while (1)
    {
      int v10 = *v8;
      v8 += 4;
      int v9 = v10;
      if (v10 == 1) {
        break;
      }
      unint64_t v5 = (v5 + 1);
      if (v9 == 5)
      {
        if ((v5 & 0x80000000) != 0) {
          return this;
        }
        if (v4++ == a2)
        {
          this = (int32x2_t *)(*(uint64_t (**)(const icu::Format *))(*(void *)a3 + 32))(a3);
          if (this)
          {
            UErrorCode v12 = U_ZERO_ERROR;
            return (int32x2_t *)icu::MessageFormat::setCustomArgStartFormat(v3, v5, (icu::Format *)this, &v12);
          }
          return this;
        }
        goto LABEL_3;
      }
    }
  }
  return this;
}

const void *icu::MessageFormat::getFormat(icu::MessageFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0 && *((void *)this + 92))
  {
    int v7 = icu::MessagePattern::validateArgumentName(a2, a2);
    if (v7 >= -1)
    {
      int v8 = v7;
      unsigned int v9 = 0;
LABEL_7:
      uint64_t v10 = *((void *)this + 80);
      if (v9)
      {
        unsigned int v11 = *(_DWORD *)(v10 + 16 * v9 + 12);
        if ((int)v11 <= (int)v9) {
          uint64_t v12 = v9;
        }
        else {
          uint64_t v12 = v11;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      int v13 = 0;
      uint64_t v14 = (int *)(v10 + 16 * v12 + 16);
      while (1)
      {
        int v16 = *v14;
        v14 += 4;
        int v15 = v16;
        if (v16 == 1) {
          break;
        }
        ++v13;
        if (v15 == 5)
        {
          unsigned int v9 = v12 + v13;
          if (v12 + v13 < 0) {
            return 0;
          }
          uint64_t v17 = (v12 + v13 + 1);
          int v18 = (_DWORD *)(v10 + 16 * v17);
          if (*v18 == 8)
          {
            if (!sub_18C952C24((uint64_t)this + 552, (uint64_t)v18, (uint64_t)a2)) {
              goto LABEL_7;
            }
          }
          else if (v8 != *(__int16 *)(v10 + 16 * v17 + 10))
          {
            goto LABEL_7;
          }
          return icu::MessageFormat::getCachedFormatter(this, (int)v12 + v13);
        }
      }
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return 0;
}

uint64_t icu::MessageFormat::setFormat(uint64_t this, const icu::UnicodeString *a2, const icu::Format *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    int v7 = (int32x2_t *)this;
    this = icu::MessagePattern::validateArgumentName(a2, a2);
    if ((int)this >= -1)
    {
      int v9 = this;
      LODWORD(v10) = 0;
LABEL_7:
      int32x2_t v11 = v7[80];
      if (v10)
      {
        LODWORD(v12) = *(_DWORD *)(*(void *)&v11 + 16 * v10 + 12);
        if ((int)v12 <= (int)v10) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = v12;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      uint64_t v13 = 0;
      uint64_t v14 = (int *)(*(void *)&v11 + 16 * v12 + 16);
      while (1)
      {
        int v16 = *v14;
        v14 += 4;
        int v15 = v16;
        if (v16 == 1) {
          break;
        }
        ++v13;
        if (v15 == 5)
        {
          unint64_t v10 = v12 + v13;
          if (v12 + v13 < 0 || *(int *)a4 > 0) {
            return this;
          }
          uint64_t v17 = (v12 + v13 + 1);
          int v18 = (_DWORD *)(*(void *)&v11 + 16 * v17);
          if (*v18 == 8)
          {
            this = sub_18C952C24((uint64_t)&v7[69], (uint64_t)v18, (uint64_t)a2);
            if (!this) {
              goto LABEL_7;
            }
          }
          else
          {
            this = v9 == *(__int16 *)(*(void *)&v11 + 16 * v17 + 10);
            if (v9 != *(__int16 *)(*(void *)&v11 + 16 * v17 + 10)) {
              goto LABEL_7;
            }
          }
          this = (*(uint64_t (**)(const icu::Format *))(*(void *)a3 + 32))(a3);
          if (this)
          {
            this = icu::MessageFormat::setCustomArgStartFormat(v7, v10, (icu::Format *)this, a4);
            goto LABEL_7;
          }
          UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_4;
        }
      }
    }
    else
    {
      UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_4:
      *a4 = v8;
    }
  }
  return this;
}

void *icu::MessageFormat::getFormats(icu::MessageFormat *this, int *a2)
{
  unsigned int v4 = 0;
  uint64_t v5 = *((void *)this + 80);
LABEL_5:
  uint64_t v7 = 0;
LABEL_6:
  UErrorCode v8 = (int *)(v5 + 16 + 16 * v7);
  while (1)
  {
    int v10 = *v8;
    v8 += 4;
    int v9 = v10;
    if (v10 == 1) {
      break;
    }
    LODWORD(v7) = v7 + 1;
    if (v9 == 5)
    {
      if ((v7 & 0x80000000) != 0) {
        break;
      }
      ++v4;
      if (v7)
      {
        int v6 = *(_DWORD *)(v5 + 16 * v7 + 12);
        if (v6 <= (int)v7) {
          uint64_t v7 = v7;
        }
        else {
          uint64_t v7 = v6;
        }
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  *a2 = 0;
  int32x2_t v11 = (void *)*((void *)this + 85);
  if (v11)
  {
    if ((signed int)v4 <= *((_DWORD *)this + 172)) {
      goto LABEL_18;
    }
    uint64_t result = uprv_realloc(v11, 8 * v4);
    if (result)
    {
      *((void *)this + 85) = result;
      *((_DWORD *)this + 172) = v4;
      goto LABEL_18;
    }
LABEL_30:
    *((_DWORD *)this + 172) = 0;
    return result;
  }
  *((_DWORD *)this + 172) = v4;
  uint64_t result = uprv_malloc(8 * v4);
  if (!result) {
    goto LABEL_30;
  }
  *((void *)this + 85) = result;
LABEL_18:
  LODWORD(v13) = 0;
LABEL_19:
  uint64_t v14 = *((void *)this + 80);
  if (v13)
  {
    int v15 = *(_DWORD *)(v14 + 16 * v13 + 12);
    if (v15 <= (int)v13) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = v15;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  int v16 = (int *)(v14 + 16 * v13 + 16);
  while (1)
  {
    int v18 = *v16;
    v16 += 4;
    int v17 = v18;
    if (v18 == 1) {
      return (void *)*((void *)this + 85);
    }
    LODWORD(v13) = v13 + 1;
    if (v17 == 5)
    {
      if ((v13 & 0x80000000) != 0) {
        return (void *)*((void *)this + 85);
      }
      CachedFormatter = icu::MessageFormat::getCachedFormatter(this, v13);
      uint64_t v20 = *((void *)this + 85);
      uint64_t v21 = *a2;
      *a2 = v21 + 1;
      *(void *)(v20 + 8 * v21) = CachedFormatter;
      goto LABEL_19;
    }
  }
}

icu::UnicodeString *icu::MessageFormat::getArgName@<X0>(icu::MessageFormat *this@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  return icu::UnicodeString::tempSubString((icu::MessageFormat *)((char *)this + 568), *(_DWORD *)(*((void *)this + 80) + 16 * a2 + 4), *(unsigned __int16 *)(*((void *)this + 80) + 16 * a2 + 8), a3);
}

uint64_t icu::MessageFormat::getFormatNames(icu::MessageFormat *this, UErrorCode *a2)
{
  unsigned char v22[8] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 <= 0)
  {
    uint64_t v5 = (icu::UVector *)icu::UMemory::operator new(v2, (icu::UMemory *)0x28, (unint64_t)a2);
    if (v5)
    {
      int v6 = v5;
      icu::UVector::UVector(v5, a2);
      if (*(int *)a2 <= 0)
      {
        icu::UVector::setDeleter(v6, (void (*)(void *))uprv_deleteUObject);
        unsigned int v9 = 0;
LABEL_10:
        int v10 = (uint64_t *)*((void *)this + 80);
        if (v9)
        {
          LODWORD(v11) = HIDWORD(v10[2 * v9 + 1]);
          if ((int)v11 <= (int)v9) {
            uint64_t v11 = v9;
          }
          else {
            uint64_t v11 = v11;
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
        int v12 = 0;
        uint64_t v13 = &v10[2 * v11 + 2];
        while (1)
        {
          int v15 = *(_DWORD *)v13;
          v13 += 2;
          int v14 = v15;
          if (v15 == 1) {
            break;
          }
          ++v12;
          if (v14 == 5)
          {
            unsigned int v9 = v11 + v12;
            if (((v11 + v12) & 0x80000000) == 0)
            {
              int v16 = &v10[2 * (v11 + v12 + 1)];
              icu::UnicodeString::tempSubString((icu::MessageFormat *)((char *)this + 568), *((_DWORD *)v16 + 1), *((unsigned __int16 *)v16 + 4), (icu::UnicodeString *)v22);
              uint64_t v20 = icu::UnicodeString::clone(v22, v17, v18);
              if (!v20)
              {
                uint64_t v19 = (void *)*(unsigned int *)a2;
                if ((int)v19 <= 0) {
                  *a2 = U_MEMORY_ALLOCATION_ERROR;
                }
              }
              icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
              icu::UVector::adoptElement((uint64_t (**)(void *))v6, v20, a2);
              if (*(int *)a2 < 1) {
                goto LABEL_10;
              }
              goto LABEL_4;
            }
            break;
          }
        }
        uint64_t v21 = icu::UMemory::operator new(v10, (icu::UMemory *)0x80, v8);
        if (!v21)
        {
          if (*(int *)a2 <= 0) {
            *a2 = U_MEMORY_ALLOCATION_ERROR;
          }
          goto LABEL_4;
        }
        uint64_t result = icu::StringEnumeration::StringEnumeration((uint64_t)v21);
        *(void *)uint64_t result = &unk_1EDA4E500;
        *(_DWORD *)(result + 116) = 0;
        *(void *)(result + 120) = v6;
        if (*(int *)a2 < 1) {
          return result;
        }
        (*(void (**)(uint64_t))(*(void *)result + 8))(result);
      }
      else
      {
LABEL_4:
        (*(void (**)(icu::UVector *))(*(void *)v6 + 8))(v6);
      }
    }
    else if (*(int *)a2 <= 0)
    {
      uint64_t result = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
  }
  return 0;
}

icu::UnicodeString *icu::MessageFormat::format(icu::MessageFormat *this, const icu::Formattable *a2, unsigned int a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  return icu::MessageFormat::format(this, a2, 0, a3, a4, a5, a6);
}

icu::UnicodeString *icu::MessageFormat::format(icu::MessageFormat *this, const icu::Formattable *a2, const icu::UnicodeString *a3, unsigned int a4, icu::UnicodeString *a5, icu::FieldPosition *a6, UErrorCode *a7)
{
  if (*(int *)a7 <= 0)
  {
    v10[0] = &unk_1EDA47768;
    v10[1] = a5;
    v9[0] = (uint64_t)v10;
    v9[1] = 0;
    icu::MessageFormat::format((char *)this, 0, 0, a2, a3, a4, v9, (uint64_t)a6, a7);
    icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v10);
  }
  return a5;
}

icu::UnicodeString *icu::MessageFormat::format(icu::MessageFormat *this, const icu::UnicodeString *a2, const icu::Formattable *a3, icu::UnicodeString *a4, UErrorCode *a5, UErrorCode *a6)
{
  unsigned int v8 = a3;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  bzero(v12, 0x330uLL);
  icu::MessageFormat::MessageFormat((icu::MessageFormat *)v12, this, a5);
  icu::MessageFormat::format((icu::MessageFormat *)v12, a2, 0, v8, a4, 0, a5);
  icu::MessageFormat::~MessageFormat((icu::MessageFormat *)v12);
  return a4;
}

icu::UnicodeString *icu::MessageFormat::format(icu::MessageFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (icu::Formattable::getType(a2) == 4) {
      icu::MessageFormat::format(this, *((const icu::Formattable **)a2 + 1), 0, *((_DWORD *)a2 + 4), a3, a4, a5);
    }
    else {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return a3;
}

icu::UnicodeString *icu::MessageFormat::format(icu::MessageFormat *this, const icu::UnicodeString *a2, const icu::Formattable *a3, unsigned int a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  return icu::MessageFormat::format(this, a3, a2, a4, a5, 0, a6);
}

const icu::Formattable *icu::MessageFormat::getArgFromListByName(icu::MessageFormat *this, const icu::Formattable *a2, const icu::UnicodeString *a3, int a4, icu::UnicodeString *a5)
{
  if (a4 >= 1)
  {
    unsigned int v8 = (char *)a5 + 10;
    for (uint64_t i = a4; i; --i)
    {
      unsigned int v10 = *((unsigned __int16 *)a3 + 4);
      if (*((__int16 *)a3 + 4) < 0) {
        int32_t v11 = *((_DWORD *)a3 + 3);
      }
      else {
        int32_t v11 = v10 >> 5;
      }
      unsigned int v12 = *((unsigned __int16 *)a5 + 4);
      if (v12)
      {
        if (v10) {
          return a2;
        }
      }
      else
      {
        if ((v12 & 0x8000u) == 0) {
          int v13 = v12 >> 5;
        }
        else {
          int v13 = *((_DWORD *)a5 + 3);
        }
        if ((v12 & 2) != 0) {
          uint64_t v14 = (uint64_t)v8;
        }
        else {
          uint64_t v14 = *((void *)a5 + 3);
        }
        if (!icu::UnicodeString::doCompare((uint64_t)a3, 0, v11, v14, v13 & (v13 >> 31), v13 & ~(v13 >> 31)))return a2; {
      }
        }
      a2 = (const icu::Formattable *)((char *)a2 + 112);
      a3 = (const icu::UnicodeString *)((char *)a3 + 64);
    }
  }
  return 0;
}

char *icu::MessageFormat::format(char *result, int a2, uint64_t a3, const icu::Formattable *a4, const icu::UnicodeString *a5, unsigned int a6, uint64_t *a7, uint64_t a8, UErrorCode *a9)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (*(int *)a9 <= 0)
  {
    LODWORD(v10) = a2;
    int32_t v11 = (icu::MessageFormat *)result;
    uint64_t v66 = (icu::UnicodeString *)(result + 568);
    uint64_t v12 = *((void *)result + 80) + 16 * a2;
    int v13 = *(_DWORD *)(v12 + 4) + *(unsigned __int16 *)(v12 + 8);
    uint64_t v59 = a3 + 152;
    uint64_t v60 = (icu::Formattable *)(a3 + 16);
    int v57 = (icu::MessagePattern *)(result + 552);
    uint64_t v58 = (icu::Locale *)(result + 328);
    uint64_t v55 = result + 784;
    uint64_t v56 = result + 752;
    do
    {
      uint64_t v14 = (int)v10;
      uint64_t v10 = (int)v10 + 1;
      uint64_t v15 = *((void *)v11 + 80);
      int v16 = (int *)(v15 + 16 * v10);
      int v17 = *v16;
      uint64_t result = (char *)sub_18C9543A4(a7, v66, v13, v16[1] - v13);
      if (v17 == 1) {
        return result;
      }
      if (v17 != 5)
      {
        int v13 = v16[1] + *((unsigned __int16 *)v16 + 4);
        if (v17 == 4)
        {
          if (*(unsigned char *)(a3 + 216))
          {
            uint64_t result = (char *)sub_18C954420(a7, *(icu::Format **)(a3 + 144), v60, v59, a9);
          }
          else
          {
            DefaultNumberFormat = icu::MessageFormat::getDefaultNumberFormat(v11, a9, v18);
            uint64_t result = (char *)sub_18C9544D0(a7, DefaultNumberFormat, v60, a9);
          }
        }
        continue;
      }
      uint64_t v19 = *((void *)v11 + 80);
      if (*(_DWORD *)(v19 + 16 * v10 + 12) <= (int)v10) {
        int v20 = v10;
      }
      else {
        int v20 = *(_DWORD *)(v19 + 16 * v10 + 12);
      }
      if ((*v16 - 5) > 1) {
        int v21 = 0;
      }
      else {
        int v21 = *(__int16 *)(v15 + 16 * v10 + 10);
      }
      memset(v74, 0, sizeof(v74));
      uint64_t v22 = v19 + 16 * (v14 + 2);
      uint64_t v23 = icu::UnicodeString::tempSubString(v66, *(_DWORD *)(v22 + 4), *(unsigned __int16 *)(v22 + 8), (icu::UnicodeString *)v74);
      if (a5)
      {
        ArgFromListByName = icu::MessageFormat::getArgFromListByName(v23, a4, a5, a6, (icu::UnicodeString *)v74);
        if (!ArgFromListByName) {
          goto LABEL_27;
        }
      }
      else
      {
        signed int v26 = *(__int16 *)(v22 + 10);
        if (v26 < 0 || v26 >= (int)a6)
        {
LABEL_27:
          icu::UnicodeString::UnicodeString((uint64_t)&v67, 123);
          if ((SWORD4(v74[0]) & 0x8000u) == 0) {
            uint64_t v28 = WORD4(v74[0]) >> 5;
          }
          else {
            uint64_t v28 = HIDWORD(v74[0]);
          }
          uint64_t v29 = icu::UnicodeString::doAppend((uint64_t)&v67, (const icu::UnicodeString *)v74, 0, v28);
          LOWORD(v69) = 125;
          uint64_t v30 = icu::UnicodeString::doAppend(v29, (uint64_t)&v69, 0, 1);
          sub_18C954594(a7, v30);
          uint64_t v32 = (icu::UnicodeString *)&v67;
LABEL_54:
          icu::UnicodeString::~UnicodeString(v31, v32);
          goto LABEL_55;
        }
        if (!a4)
        {
          (*(void (**)(uint64_t, const __int16 *, uint64_t))(*(void *)*a7 + 40))(*a7, L"null", 4);
          *((_DWORD *)a7 + 2) += 4;
          goto LABEL_55;
        }
        ArgFromListByName = (const icu::Formattable *)((char *)a4 + 112 * v26);
      }
      if (a3 && *(_DWORD *)(a3 + 136) == v10)
      {
        DateTimeuint64_t Instance = *(icu::Format **)(a3 + 144);
        if (*(double *)(a3 + 128) != 0.0) {
          goto LABEL_45;
        }
        sub_18C954420(a7, DateTimeInstance, v60, v59, a9);
      }
      else
      {
        CachedFormatter = (icu::Format *)icu::MessageFormat::getCachedFormatter(v11, v10);
        if (CachedFormatter)
        {
          uint64_t v34 = CachedFormatter;
          {
            uint64_t v73 = 0;
            long long v71 = 0u;
            long long v72 = 0u;
            long long v70 = 0u;
            long long v69 = &unk_1EDA47700;
            LOWORD(v70) = 2;
            icu::Format::format(v34, ArgFromListByName, (icu::UnicodeString *)&v69, a9);
            if ((v70 & 0x8000u) == 0) {
              int32_t v35 = (unsigned __int16)v70 >> 5;
            }
            else {
              int32_t v35 = DWORD1(v70);
            }
            if ((icu::UnicodeString::doIndexOf((uint64_t)&v69, 0x7Bu, 0, v35) & 0x80000000) != 0
              && ((v70 & 0x8000u) == 0 ? (int32_t v39 = (unsigned __int16)v70 >> 5) : (int32_t v39 = DWORD1(v70)),
                  (icu::UnicodeString::doIndexOf((uint64_t)&v69, 0x27u, 0, v39) & 0x80000000) != 0
               || *((_DWORD *)v11 + 140) == 1))
            {
              sub_18C954594(a7, (uint64_t)&v69);
            }
            else
            {
              bzero(&v67, 0x330uLL);
              icu::MessageFormat::MessageFormat((icu::MessageFormat *)&v67, (const icu::UnicodeString *)&v69, v58, a9);
              icu::MessageFormat::format(&v67, 0, 0, a4, a5, a6, a7, a8, a9);
              icu::MessageFormat::~MessageFormat((icu::MessageFormat *)&v67);
            }
            uint64_t v32 = (icu::UnicodeString *)&v69;
            goto LABEL_54;
          }
          long long v38 = a7;
          DateTimeuint64_t Instance = v34;
          goto LABEL_46;
        }
        if (!v21 || (uint64_t v36 = *((void *)v11 + 92)) != 0 && uhash_iget(v36, v10))
        {
          if (icu::Formattable::isNumeric(ArgFromListByName))
          {
            DateTimeuint64_t Instance = icu::MessageFormat::getDefaultNumberFormat(v11, a9, v37);
          }
          else
          {
            if (icu::Formattable::getType(ArgFromListByName))
            {
              uint64_t String = icu::Formattable::getString(ArgFromListByName, a9);
              sub_18C954594(a7, String);
              goto LABEL_55;
            }
            DateTimeuint64_t Instance = (icu::Format *)*((void *)v11 + 91);
            if (!DateTimeInstance)
            {
              DateTimeuint64_t Instance = icu::DateFormat::createDateTimeInstance(3, 3, v58);
              *((void *)v11 + 91) = DateTimeInstance;
              if (!DateTimeInstance) {
                *a9 = U_MEMORY_ALLOCATION_ERROR;
              }
            }
          }
LABEL_45:
          long long v38 = a7;
LABEL_46:
          sub_18C9544D0(v38, DateTimeInstance, ArgFromListByName, a9);
          goto LABEL_55;
        }
        switch(v21)
        {
          case 2:
            if (!icu::Formattable::isNumeric(ArgFromListByName)) {
              goto LABEL_78;
            }
            double Double = icu::Formattable::getDouble(ArgFromListByName, a9);
            uint64_t SubMessage = icu::ChoiceFormat::findSubMessage(v57, (const icu::MessagePattern *)(v14 + 3), Double);
            break;
          case 5:
            goto LABEL_67;
          case 4:
            uint64_t v52 = icu::Formattable::getString(ArgFromListByName, a9);
            uint64_t SubMessage = icu::SelectFormat::findSubMessage(v57, (const icu::MessagePattern *)(v14 + 3), v52, (const icu::UnicodeString *)a9, v53);
            break;
          case 3:
LABEL_67:
            if (!icu::Formattable::isNumeric(ArgFromListByName))
            {
LABEL_78:
              uint64_t v54 = 1;
LABEL_79:
              *a9 = v54;
              return (char *)icu::UnicodeString::~UnicodeString((void *)v54, (icu::UnicodeString *)v74);
            }
            if (v21 == 3) {
              uint64_t v46 = (uint64_t)v56;
            }
            else {
              uint64_t v46 = (uint64_t)v55;
            }
            double PluralOffset = icu::MessagePattern::getPluralOffset(v57, (int)v14 + 3);
            long long v67 = 0u;
            memset(v68, 0, 208);
            sub_18C9549FC((uint64_t)&v67, v14 + 3, (uint64_t)v74, ArgFromListByName, a9, PluralOffset);
            double v48 = icu::Formattable::getDouble(ArgFromListByName, a9);
            uint64_t v50 = icu::PluralFormat::findSubMessage(v57, (const icu::MessagePattern *)(v14 + 3), v46, (const icu::PluralFormat::PluralSelector *)&v67, (int *)a9, v48, v49);
            icu::MessageFormat::formatComplexSubMessage(v11, v50, (uint64_t)&v67, (uint64_t)a4, (uint64_t)a5, a6, a7, a9);
            icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)((char *)&v68[8] + 8));
            icu::Formattable::~Formattable((icu::Formattable *)v68);
            goto LABEL_55;
          default:
            uint64_t v54 = 5;
            goto LABEL_79;
        }
        icu::MessageFormat::formatComplexSubMessage(v11, SubMessage, 0, (uint64_t)a4, (uint64_t)a5, a6, a7, a9);
      }
LABEL_55:
      uint64_t v40 = *((void *)v11 + 80) + 16 * v20;
      int v41 = *(_DWORD *)(v40 + 4);
      uint64_t v42 = (void *)*(unsigned __int16 *)(v40 + 8);
      int v13 = v41 + v42;
      uint64_t result = (char *)icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v74);
      a8 = 0;
      LODWORD(v10) = v20;
    }
    while (*(int *)a9 < 1);
  }
  return result;
}

void *sub_18C9543A4(uint64_t *a1, icu::UnicodeString *this, int a3, int32_t a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  icu::UnicodeString::tempSubString(this, a3, a4, (icu::UnicodeString *)v7);
  sub_18C954594(a1, (uint64_t)v7);
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
}

uint64_t *sub_18C954420(uint64_t *result, icu::Format *a2, icu::Formattable *a3, uint64_t a4, UErrorCode *a5)
{
  if (*(unsigned __int16 *)(a4 + 8) < 0x20u) {
    return (uint64_t *)sub_18C9544D0(result, a2, a3, a5);
  }
  if (*(int *)a5 <= 0) {
    return (uint64_t *)sub_18C954594(result, a4);
  }
  return result;
}

icu::Format *icu::MessageFormat::getDefaultNumberFormat(icu::MessageFormat *this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t result = (icu::Format *)*((void *)this + 90);
  if (!result)
  {
    uint64_t result = icu::NumberFormat::createInstance((char **)this + 41, a2, a3);
    *((void *)this + 90) = result;
    if (*(int *)a2 < 1)
    {
      if (!result) {
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    else
    {
      if (result) {
        (*(void (**)(icu::Format *))(*(void *)result + 8))(result);
      }
      uint64_t result = 0;
      *((void *)this + 90) = 0;
    }
  }
  return result;
}

void *sub_18C9544D0(uint64_t *a1, icu::Format *this, icu::Formattable *a3, UErrorCode *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v12 = 0;
  long long v11 = 0u;
  uint64_t v8 = &unk_1EDA47700;
  LOWORD(v9) = 2;
  icu::Format::format(this, a3, (icu::UnicodeString *)&v8, a4);
  int v6 = (void *)*(unsigned int *)a4;
  if ((int)v6 <= 0) {
    sub_18C954594(a1, (uint64_t)&v8);
  }
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v8);
}

uint64_t sub_18C954594(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
  if ((v5 & 0x11) != 0)
  {
    uint64_t v6 = 0;
  }
  else if ((v5 & 2) != 0)
  {
    uint64_t v6 = a2 + 10;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 24);
  }
  int v7 = (__int16)v5;
  unsigned int v8 = v5 >> 5;
  if (v7 >= 0) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = *(unsigned int *)(a2 + 12);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v6, v9);
  unsigned int v11 = *(unsigned __int16 *)(a2 + 8);
  int v12 = (__int16)v11;
  unsigned int v13 = v11 >> 5;
  if (v12 < 0) {
    unsigned int v13 = *(_DWORD *)(a2 + 12);
  }
  *((_DWORD *)a1 + 2) += v13;
  return result;
}

icu::SimpleDateFormat *icu::MessageFormat::getDefaultDateFormat(icu::MessageFormat *this, UErrorCode *a2)
{
  uint64_t result = (icu::SimpleDateFormat *)*((void *)this + 91);
  if (!result)
  {
    uint64_t result = icu::DateFormat::createDateTimeInstance(3, 3, (icu::MessageFormat *)((char *)this + 328));
    *((void *)this + 91) = result;
    if (!result) {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return result;
}

void *icu::MessageFormat::formatComplexSubMessage(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, UErrorCode *a8)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (*(int *)a8 <= 0)
  {
    LODWORD(v10) = a2;
    unsigned int v11 = result;
    if (*((_DWORD *)result + 140) == 1)
    {
      unsigned int v36 = a6;
      long long v47 = 0u;
      uint64_t v50 = 0;
      long long v49 = 0u;
      long long v48 = 0u;
      uint64_t v46 = &unk_1EDA47700;
      LOWORD(v47) = 2;
      uint64_t v12 = result[80];
      int v13 = *(_DWORD *)(v12 + 16 * (int)a2 + 4) + *(unsigned __int16 *)(v12 + 16 * (int)a2 + 8);
      long long v38 = (icu::Formattable *)(a3 + 16);
      int32_t v39 = (icu::UnicodeString *)(a3 + 152);
      while (1)
      {
        uint64_t v10 = (int)v10 + 1;
        int v14 = *(_DWORD *)(v12 + 16 * v10);
        uint64_t v15 = v12 + 16 * v10;
        unsigned int v18 = *(_DWORD *)(v15 + 4);
        int v16 = (_DWORD *)(v15 + 4);
        int v17 = (const icu::UnicodeString *)v18;
        switch(v14)
        {
          case 1:
            icu::UnicodeString::doAppend((uint64_t)&v46, (const icu::UnicodeString *)(v11 + 71), v13, (v17 - v13));
            if ((v47 & 0x8000u) == 0) {
              int32_t v31 = (unsigned __int16)v47 >> 5;
            }
            else {
              int32_t v31 = DWORD1(v47);
            }
            if ((icu::UnicodeString::doIndexOf((uint64_t)&v46, 0x7Bu, 0, v31) & 0x80000000) != 0)
            {
              sub_18C954594(a7, (uint64_t)&v46);
            }
            else
            {
              long long v42 = 0u;
              uint64_t v45 = 0;
              long long v44 = 0u;
              long long v43 = 0u;
              int v41 = &unk_1EDA47700;
              LOWORD(v42) = 2;
              bzero(v40, 0x330uLL);
              icu::MessageFormat::MessageFormat((icu::MessageFormat *)v40, (const icu::UnicodeString *)&v41, (const icu::Locale *)(v11 + 41), a8);
              icu::MessageFormat::applyPattern(v40, (uint64_t)&v46, 1, 0, (uint64_t)a8);
              icu::MessageFormat::format(v40, 0, 0, a4, a5, v36, a7, 0, a8);
              icu::MessageFormat::~MessageFormat((icu::MessageFormat *)v40);
              icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v41);
            }
            return icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v46);
          case 2:
          case 4:
            icu::UnicodeString::doAppend((uint64_t)&v46, (const icu::UnicodeString *)(v11 + 71), v13, (v17 - v13));
            if (v14 == 4)
            {
              if (*(unsigned char *)(a3 + 216))
              {
                unsigned int v20 = *(unsigned __int16 *)(a3 + 160);
                int v21 = (__int16)v20;
                unsigned int v22 = v20 >> 5;
                if (v21 >= 0) {
                  uint64_t v23 = v22;
                }
                else {
                  uint64_t v23 = *(unsigned int *)(a3 + 164);
                }
                int32x2_t v24 = v39;
              }
              else
              {
                DefaultNumberFormat = icu::MessageFormat::getDefaultNumberFormat((icu::MessageFormat *)v11, a8, v19);
                int32x2_t v24 = icu::Format::format(DefaultNumberFormat, v38, (icu::UnicodeString *)&v46, a8);
                unsigned int v28 = *((unsigned __int16 *)v24 + 4);
                int v29 = (__int16)v28;
                unsigned int v30 = v28 >> 5;
                if (v29 >= 0) {
                  uint64_t v23 = v30;
                }
                else {
                  uint64_t v23 = *((unsigned int *)v24 + 3);
                }
              }
              icu::UnicodeString::doAppend((uint64_t)&v46, v24, 0, v23);
            }
            int v13 = *v16 + *(unsigned __int16 *)(v12 + 16 * v10 + 8);
            goto LABEL_19;
          case 5:
            icu::UnicodeString::doAppend((uint64_t)&v46, (const icu::UnicodeString *)(v11 + 71), v13, (v17 - v13));
            uint64_t v26 = v11[80];
            if (*(_DWORD *)(v26 + 16 * v10 + 12) > (int)v10) {
              LODWORD(v10) = *(_DWORD *)(v26 + 16 * v10 + 12);
            }
            int v13 = *(_DWORD *)(v26 + 16 * (int)v10 + 4) + *(unsigned __int16 *)(v26 + 16 * (int)v10 + 8);
            icu::MessageImpl::appendReducedApostrophes((icu::MessageImpl *)(v11 + 71), v17, v13, (uint64_t)&v46, v25);
            goto LABEL_19;
          default:
LABEL_19:
            uint64_t v12 = v11[80];
            break;
        }
      }
    }
    return (void *)icu::MessageFormat::format(result, a2, a3, a4, a5, a6, a7, 0, a8);
  }
  return result;
}

uint64_t sub_18C9549FC(uint64_t a1, int a2, uint64_t a3, icu::Formattable *a4, UErrorCode *a5, double a6)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  uint64_t v10 = a1 + 16;
  icu::Formattable::Formattable((icu::Formattable *)(a1 + 16));
  *(double *)(a1 + 128) = a6;
  *(_DWORD *)(a1 + 136) = -1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = &unk_1EDA47700;
  *(_WORD *)(a1 + 160) = 2;
  *(unsigned char *)(a1 + 216) = 0;
  if (a6 == 0.0)
  {
    icu::Formattable::operator=(v10, (uint64_t)a4);
  }
  else
  {
    double Double = icu::Formattable::getDouble(a4, a5);
    icu::Formattable::Formattable((icu::Formattable *)v13, Double - a6);
    icu::Formattable::operator=(v10, (uint64_t)v13);
    icu::Formattable::~Formattable((icu::Formattable *)v13);
  }
  return a1;
}

uint64_t icu::MessageFormat::updateMetaData()
{
  return 0;
}

uint64_t icu::MessageFormat::getLiteralStringUntilNextArgument@<X0>(icu::MessageFormat *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (icu::MessageFormat *)((char *)this + 568);
  uint64_t v7 = *((void *)this + 80);
  uint64_t v8 = v7 + 16 * a2;
  int v9 = *(_DWORD *)(v8 + 4) + *(unsigned __int16 *)(v8 + 8);
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(void *)(a3 + 56) = 0;
  *(void *)a3 = &unk_1EDA47700;
  *(_WORD *)(a3 + 8) = 2;
  int v11 = *(_DWORD *)(v8 + 20);
  uint64_t v10 = (_DWORD *)(v8 + 20);
  int v12 = *(v10 - 1);
  uint64_t result = icu::UnicodeString::doAppend(a3, (icu::MessageFormat *)((char *)this + 568), v9, (v11 - v9));
  if ((v12 & 0xFFFFFFFB) != 1)
  {
    uint64_t v14 = 16 * a2;
    do
    {
      int v15 = *v10 + *(unsigned __int16 *)(v7 + v14 + 24);
      uint64_t v7 = *((void *)this + 80);
      uint64_t v10 = (_DWORD *)(v7 + v14 + 36);
      int v16 = *(_DWORD *)(v7 + v14 + 32);
      uint64_t result = icu::UnicodeString::doAppend(a3, v6, v15, (*v10 - v15));
      v14 += 16;
    }
    while ((v16 & 0xFFFFFFFB) != 1);
  }
  return result;
}

uint64_t icu::MessageFormat::findOtherSubMessage(icu::MessageFormat *this, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (char *)this + 552;
  int v4 = *((_DWORD *)this + 162);
  if ((*(_DWORD *)(*((void *)this + 80) + 16 * a2) & 0xFFFFFFFE) == 0xC) {
    int v5 = a2 + 1;
  }
  else {
    int v5 = a2;
  }
  memset(v12, 0, sizeof(v12));
  int v11 = "o";
  icu::UnicodeString::UnicodeString(v12, 0, &v11);
  uint64_t v6 = (_DWORD *)*((void *)this + 80);
  do
  {
    uint64_t v7 = &v6[4 * v5];
    uint64_t v6 = (_DWORD *)*v7;
    if (v6 == 6) {
      break;
    }
    uint64_t v8 = v5 + 1;
    if (sub_18C952C24((uint64_t)v3, (uint64_t)v7, (uint64_t)v12)) {
      goto LABEL_14;
    }
    uint64_t v6 = (_DWORD *)*((void *)this + 80);
    int v9 = (v6[4 * v8] & 0xFFFFFFFE) == 0xC ? v5 + 2 : v5 + 1;
    if (v6[4 * v9 + 3] > v9) {
      int v9 = v6[4 * v9 + 3];
    }
    int v5 = v9 + 1;
  }
  while (v9 + 1 < v4);
  uint64_t v8 = 0;
LABEL_14:
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
  return v8;
}

uint64_t icu::MessageFormat::findFirstPluralNumberArg(icu::MessageFormat *this, int a2, const icu::UnicodeString *a3)
{
  LODWORD(v4) = a2;
  uint64_t v6 = (char *)this + 552;
  uint64_t v7 = *((void *)this + 80);
LABEL_2:
  uint64_t v8 = 16 * (int)v4;
  while (1)
  {
    int v9 = *(_DWORD *)(v7 + v8 + 16);
    if (v9 == 1) {
      return 0;
    }
    if (v9 == 4) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v4 = (v4 + 1);
    v8 += 16;
    if (v9 == 5)
    {
      if (*((unsigned __int16 *)a3 + 4) >= 0x20u && *(unsigned __int16 *)(v7 + v8 + 10) <= 1u)
      {
        if (sub_18C952C24((uint64_t)v6, v7 + 16 * ((int)v4 + 1), (uint64_t)a3)) {
          return v4;
        }
        uint64_t v7 = *((void *)this + 80);
      }
      if (*(_DWORD *)(v7 + v8 + 12) > (int)v4) {
        LODWORD(v4) = *(_DWORD *)(v7 + v8 + 12);
      }
      goto LABEL_2;
    }
  }
}

uint64_t icu::MessageFormat::parse(icu::MessageFormat *this, unint64_t a2, const icu::UnicodeString *a3, icu::ParsePosition *a4, int *a5, UErrorCode *a6)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  if (*(int *)a6 >= 1)
  {
    uint64_t v6 = 0;
LABEL_5:
    *((_DWORD *)a4 + 3) = *((_DWORD *)a4 + 2);
    return v6;
  }
  if (*((unsigned char *)this + 676))
  {
    uint64_t v6 = 0;
    *a6 = U_ARGUMENT_TYPE_MISMATCH;
    goto LABEL_5;
  }
  int v10 = a2;
  long long v70 = (icu::MessageFormat *)((char *)this + 552);
  signed int v11 = *((_DWORD *)this + 176);
  if (v11 <= 1) {
    signed int v11 = 1;
  }
  unint64_t v12 = v11;
  uint64_t v13 = 112 * v11;
  BOOL v14 = !is_mul_ok(v12, 0x70uLL);
  BOOL v15 = __CFADD__(v13, 16);
  uint64_t v16 = v13 + 16;
  if (v15) {
    BOOL v14 = 1;
  }
  if (v14) {
    uint64_t v17 = -1;
  }
  else {
    uint64_t v17 = v16;
  }
  unsigned int v18 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v17, a2);
  uint64_t v73 = a5;
  if (v18)
  {
    *unsigned int v18 = 112;
    v18[1] = v12;
    uint64_t v20 = (uint64_t)(v18 + 2);
    uint64_t v21 = 112 * v12;
    unsigned int v22 = (icu::Formattable *)(v18 + 2);
    do
    {
      unsigned int v22 = (icu::Formattable *)((char *)icu::Formattable::Formattable(v22) + 112);
      v21 -= 112;
    }
    while (v21);
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v74 = v20;
  uint64_t v75 = this;
  uint64_t v79 = v20;
  uint64_t v23 = *((void *)this + 80);
  int v24 = *(_DWORD *)(v23 + 16 * v10 + 4) + *(unsigned __int16 *)(v23 + 16 * v10 + 8);
  int v25 = *((_DWORD *)a4 + 2);
  uint64_t v26 = a3;
  long long v72 = (char *)this + 568;
  long long v77 = &unk_1EDA44670;
  unint64_t v78 = 0xFFFFFFFF00000000;
  while (1)
  {
    uint64_t v27 = v10;
    uint64_t v28 = v10 + 1;
    int v29 = (int *)(v23 + 16 * v28);
    int v30 = *v29;
    int v31 = v29[1];
    int32_t v32 = v31 - v24;
    if (v31 == v24) {
      goto LABEL_41;
    }
    unsigned int v33 = *((unsigned __int16 *)v26 + 4);
    if (v33)
    {
      int v39 = (*((_WORD *)v75 + 288) & 1) == 0;
      goto LABEL_40;
    }
    int v34 = (v33 & 0x8000u) == 0 ? v33 >> 5 : *((_DWORD *)v26 + 3);
    if (v25 < 0)
    {
      int v35 = 0;
    }
    else
    {
      int v35 = v34;
      int v36 = v25;
      if (v34 >= v25)
      {
        if ((v32 & 0x80000000) == 0) {
          goto LABEL_29;
        }
        goto LABEL_34;
      }
    }
    int v36 = v35;
    if ((v32 & 0x80000000) == 0)
    {
LABEL_29:
      int32_t v37 = v34 - v36;
      int32_t v38 = v32;
      if (v37 >= v32) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
LABEL_34:
    int32_t v37 = 0;
LABEL_35:
    int32_t v38 = v37;
LABEL_36:
    uint64_t v40 = (v33 & 2) != 0
        ? (const icu::UnicodeString *)((char *)a3 + 10)
        : (const icu::UnicodeString *)*((void *)v26 + 3);
    int v39 = icu::UnicodeString::doCompare((uint64_t)v72, v24, v32, (uint64_t)v40, v36, v38);
    uint64_t v26 = a3;
LABEL_40:
    if (v39)
    {
      uint64_t v6 = 0;
      *((_DWORD *)a4 + 3) = v25;
      goto LABEL_120;
    }
LABEL_41:
    int v41 = v32 + v25;
    if (v30 == 1)
    {
      *((_DWORD *)a4 + 2) = v41;
      uint64_t v79 = 0;
      uint64_t v6 = v74;
      goto LABEL_120;
    }
    if ((v30 & 0xFFFFFFFE) == 2)
    {
      int v24 = v29[1] + *(unsigned __int16 *)(v23 + 16 * v28 + 8);
      int v10 = v28;
      int v25 = v41;
      long long v42 = v75;
      goto LABEL_110;
    }
    long long v42 = v75;
    uint64_t v43 = *((void *)v75 + 80);
    if (*(_DWORD *)(v43 + 16 * v28 + 12) <= (int)v28) {
      int v10 = v28;
    }
    else {
      int v10 = *(_DWORD *)(v43 + 16 * v28 + 12);
    }
    if ((*v29 - 5) > 1) {
      int v44 = 0;
    }
    else {
      int v44 = *(__int16 *)(v23 + 16 * v28 + 10);
    }
    signed int v45 = *(__int16 *)(v43 + 16 * v27 + 42);
    uint64_t v94 = 0;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v91 = 0u;
    long long v90 = &unk_1EDA47700;
    LOWORD(v91) = 2;
    uint64_t v46 = (icu::Formattable *)(v74 + 112 * v45);
    if (*((void *)v75 + 92))
    {
      CachedFormatter = icu::MessageFormat::getCachedFormatter(v75, v28);
      if (CachedFormatter)
      {
        LODWORD(v78) = v41;
        (*(void (**)(const void *, const icu::UnicodeString *, icu::Formattable *, void **))(*(void *)CachedFormatter + 56))(CachedFormatter, a3, v46, &v77);
        int v25 = v78;
        if (v78 == v41) {
          goto LABEL_113;
        }
LABEL_69:
        uint64_t v54 = v73;
LABEL_107:
        if (*v54 <= v45) {
          *uint64_t v54 = v45 + 1;
        }
        goto LABEL_109;
      }
    }
    if (v44)
    {
      uint64_t v48 = *((void *)v75 + 92);
      if (!v48 || !uhash_iget(v48, v28)) {
        break;
      }
    }
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    icu::MessageFormat::getLiteralStringUntilNextArgument(v75, v10, (uint64_t)&v86);
    if (WORD4(v86) < 0x20u)
    {
      uint64_t v55 = a3;
      if ((*((__int16 *)a3 + 4) & 0x80000000) == 0)
      {
        int v25 = *((unsigned __int16 *)a3 + 4) >> 5;
        goto LABEL_92;
      }
      int v25 = *((_DWORD *)a3 + 3);
    }
    else
    {
      unsigned int v49 = *((unsigned __int16 *)a3 + 4);
      if (v41 < 0)
      {
        if ((SWORD4(v86) & 0x8000u) == 0) {
          int32_t v51 = WORD4(v86) >> 5;
        }
        else {
          int32_t v51 = HIDWORD(v86);
        }
        int v52 = 0;
        if ((v49 & 0x8000) != 0) {
          int v50 = *((_DWORD *)a3 + 3);
        }
        else {
          int v50 = v49 >> 5;
        }
      }
      else if ((v49 & 0x8000) != 0)
      {
        int v50 = *((_DWORD *)a3 + 3);
        if ((SWORD4(v86) & 0x8000u) == 0) {
          int32_t v51 = WORD4(v86) >> 5;
        }
        else {
          int32_t v51 = HIDWORD(v86);
        }
        if (v50 >= v41) {
          int v52 = v41;
        }
        else {
          int v52 = *((_DWORD *)a3 + 3);
        }
      }
      else
      {
        int v50 = v49 >> 5;
        if ((SWORD4(v86) & 0x8000u) == 0) {
          int32_t v51 = WORD4(v86) >> 5;
        }
        else {
          int32_t v51 = HIDWORD(v86);
        }
        if (v41 >= v49 >> 5) {
          int v52 = v49 >> 5;
        }
        else {
          int v52 = v41;
        }
      }
      if ((BYTE8(v86) & 1) != 0 || v51 < 1)
      {
LABEL_114:
        *((_DWORD *)a4 + 3) = v41;
        icu::UnicodeString::~UnicodeString(a4, (icu::UnicodeString *)&v86);
        goto LABEL_119;
      }
      if ((BYTE8(v86) & 2) != 0) {
        uint64_t v56 = (char *)&v86 + 10;
      }
      else {
        uint64_t v56 = (char *)*((void *)&v87 + 1);
      }
      int v57 = icu::UnicodeString::indexOf((uint64_t)a3, (uint64_t)v56, 0, v51, v52, v50 - v52);
      uint64_t v55 = a3;
      int v25 = v57;
    }
    if (v25 < 0) {
      goto LABEL_114;
    }
LABEL_92:
    memset(v85, 0, sizeof(v85));
    icu::UnicodeString::tempSubString(v55, v41, v25 - v41, (icu::UnicodeString *)v85);
    uint64_t v84 = 0;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v81 = 0u;
    long long v80 = &unk_1EDA47700;
    LOWORD(v81) = 2;
    LOWORD(v95[0]) = 123;
    icu::UnicodeString::doAppend((uint64_t)&v80, (uint64_t)v95, 0, 1);
    memset(v95, 0, sizeof(v95));
    uprv_itou((__int16 *)v95, 16, v45, 0xAu, 0);
    icu::UnicodeString::doAppend((uint64_t)&v80, (uint64_t)v95, 0, 0xFFFFFFFFLL);
    LOWORD(v95[0]) = 125;
    icu::UnicodeString::doAppend((uint64_t)&v80, (uint64_t)v95, 0, 1);
    unint64_t v58 = (unsigned __int16)v81;
    if (v81)
    {
      if ((BYTE8(v85[0]) & 1) == 0) {
        goto LABEL_103;
      }
    }
    else
    {
      if ((SWORD4(v85[0]) & 0x8000u) == 0) {
        int32_t v59 = WORD4(v85[0]) >> 5;
      }
      else {
        int32_t v59 = HIDWORD(v85[0]);
      }
      if ((v81 & 0x8000u) == 0) {
        int v60 = (unsigned __int16)v81 >> 5;
      }
      else {
        int v60 = DWORD1(v81);
      }
      if ((v81 & 2) != 0) {
        int v61 = (char *)&v81 + 2;
      }
      else {
        int v61 = (char *)v82;
      }
      if (icu::UnicodeString::doCompare((uint64_t)v85, 0, v59, (uint64_t)v61, v60 & (v60 >> 31), v60 & ~(v60 >> 31)))
      {
LABEL_103:
        icu::Formattable::setString(v46, (UChar **)v85);
        int v62 = 1;
        goto LABEL_106;
      }
    }
    int v62 = 0;
LABEL_106:
    uint64_t v54 = v73;
    icu::UnicodeString::~UnicodeString((void *)v58, (icu::UnicodeString *)&v80);
    icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)v85);
    icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)&v86);
    if (v62) {
      goto LABEL_107;
    }
LABEL_109:
    uint64_t v65 = *((void *)v75 + 80) + 16 * v10;
    int v66 = *(_DWORD *)(v65 + 4);
    long long v67 = (void *)*(unsigned __int16 *)(v65 + 8);
    int v24 = v66 + v67;
    icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)&v90);
    uint64_t v26 = a3;
LABEL_110:
    uint64_t v23 = *((void *)v42 + 80);
  }
  if (v44 == 2)
  {
    LODWORD(v78) = v41;
    double v53 = icu::ChoiceFormat::parseArgument(v70, (const icu::MessagePattern *)(v27 + 3), (uint64_t)a3, (const icu::UnicodeString *)&v77, v19);
    if (v78 == v41)
    {
LABEL_113:
      uint64_t v68 = (uint64_t)a4;
      *((_DWORD *)a4 + 3) = v41;
      goto LABEL_119;
    }
    icu::Formattable::setDouble(v46, v53);
    int v25 = v78;
    goto LABEL_69;
  }
  if ((v44 - 3) > 2) {
    uint64_t v68 = 5;
  }
  else {
    uint64_t v68 = 16;
  }
  *a6 = v68;
LABEL_119:
  icu::UnicodeString::~UnicodeString((void *)v68, (icu::UnicodeString *)&v90);
  uint64_t v6 = 0;
LABEL_120:
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v77);
  sub_18C956740(&v79);
  return v6;
}

uint64_t icu::MessageFormat::parse(icu::MessageFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, int *a4)
{
  UErrorCode v5 = U_ZERO_ERROR;
  return icu::MessageFormat::parse(this, 0, a2, a3, a4, &v5);
}

uint64_t icu::MessageFormat::parse(icu::MessageFormat *this, const icu::UnicodeString *a2, int *a3, UErrorCode *a4)
{
  if (*((unsigned char *)this + 676))
  {
    uint64_t v5 = 0;
    *a4 = U_ARGUMENT_TYPE_MISMATCH;
  }
  else
  {
    unint64_t v12 = &unk_1EDA44670;
    unint64_t v13 = 0xFFFFFFFF00000000;
    uint64_t v6 = (*(uint64_t (**)(icu::MessageFormat *, const icu::UnicodeString *, void **, int *))(*(void *)this + 184))(this, a2, &v12, a3);
    uint64_t v5 = v6;
    if (!v13)
    {
      *a4 = U_MESSAGE_PARSE_ERROR;
      if (v6)
      {
        uint64_t v7 = (void *)(v6 - 16);
        uint64_t v8 = *(void *)(v6 - 8);
        if (v8)
        {
          uint64_t v9 = 112 * v8;
          uint64_t v10 = v6 - 112;
          do
          {
            icu::Formattable::~Formattable((icu::Formattable *)(v10 + v9));
            v9 -= 112;
          }
          while (v9);
        }
        icu::UMemory::operator delete[](v7);
        uint64_t v5 = 0;
      }
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v12);
  }
  return v5;
}

icu::Formattable *icu::MessageFormat::parseObject(icu::MessageFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  int v6 = 0;
  uint64_t result = (icu::Formattable *)(*(uint64_t (**)(icu::MessageFormat *, const icu::UnicodeString *, icu::ParsePosition *, int *))(*(void *)this + 184))(this, a2, a4, &v6);
  if (result) {
    return (icu::Formattable *)icu::Formattable::adoptArray(a3, result, v6);
  }
  return result;
}

void icu::MessageFormat::autoQuoteApostrophe(icu::MessageFormat *this@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = &unk_1EDA47700;
  *(_WORD *)(a3 + 8) = 2;
  if (*(int *)a2 > 0)
  {
LABEL_2:
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  unsigned int v6 = *((unsigned __int16 *)this + 4);
  if ((v6 & 0x8000u) == 0) {
    int32_t v7 = v6 >> 5;
  }
  else {
    int32_t v7 = *((_DWORD *)this + 3);
  }
  if ((v6 & 0x11) != 0)
  {
    uint64_t v8 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    uint64_t v8 = (UChar *)((char *)this + 10);
  }
  else
  {
    uint64_t v8 = (UChar *)*((void *)this + 3);
  }
  uint64_t Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)a3, (2 * v7) | 1u);
  if (!Buffer)
  {
    *(_DWORD *)a2 = 7;
    goto LABEL_2;
  }
  int v10 = umsg_autoQuoteApostrophe(v8, v7, Buffer, (2 * v7) | 1u, (int *)a2);
  if (*(int *)a2 <= 0) {
    int v11 = v10;
  }
  else {
    int v11 = 0;
  }
  icu::UnicodeString::releaseBuffer(a3, v11);
  if (*(int *)a2 >= 1) {
    goto LABEL_2;
  }
}

uint64_t icu::MessageFormat::createAppropriateFormat(uint64_t a1, uint64_t a2, icu::UnicodeString *a3, _DWORD *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 <= 0)
  {
    int Keyword = icu::MessageFormat::findKeyword(a2, (const UChar **)&off_1E550CE58);
    switch(Keyword)
    {
      case 0:
        *a4 = 1;
        unsigned int v18 = (icu::MessageFormat *)icu::MessageFormat::findKeyword((uint64_t)a3, (const UChar **)&off_1E550CE90);
        switch((int)v18)
        {
          case 0:
            uint64_t result = (uint64_t)icu::NumberFormat::createInstance((char **)(a1 + 328), a6, v19);
            break;
          case 1:
            uint64_t result = (uint64_t)icu::NumberFormat::createCurrencyInstance((char **)(a1 + 328), a6, v19);
            break;
          case 2:
            uint64_t result = (uint64_t)icu::NumberFormat::createPercentInstance((char **)(a1 + 328), a6, v19);
            break;
          case 3:
            *a4 = 2;
            uint64_t result = (uint64_t)icu::MessageFormat::createIntegerFormat(v18, (char **)(a1 + 328), a6);
            break;
          default:
            int v28 = icu::PatternProps::skipWhiteSpace((uint64_t)a3, 0);
            if (!icu::UnicodeString::doCompare((uint64_t)a3, v28, 2, (uint64_t)":", 0, 2))
            {
              memset(v34, 0, sizeof(v34));
              icu::UnicodeString::tempSubString(a3, v28 + 2, 0x7FFFFFFF, (icu::UnicodeString *)v34);
              icu::number::NumberFormatter::forSkeleton((UChar **)v34, a6, v32);
              icu::number::UnlocalizedNumberFormatter::locale((uint64_t)v32, a1 + 328, (uint64_t)v33);
              InstanceForSkeleton = icu::number::LocalizedNumberFormatter::toFormat((const char **)v33, a6);
              icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v33);
              sub_18C956034((void **)v32);
              int v24 = (icu::UnicodeString *)v34;
              goto LABEL_20;
            }
            uint64_t Instance = icu::NumberFormat::createInstance((char **)(a1 + 328), a6, v29);
            InstanceForSkeleton = Instance;
            if (Instance)
            {
              if (v31) {
                (*(void (**)(void *, icu::UnicodeString *, uint64_t, UErrorCode *))(*(void *)v31 + 568))(v31, a3, a5, a6);
              }
            }
            return (uint64_t)InstanceForSkeleton;
        }
        return result;
      case 1:
      case 2:
        *a4 = 0;
        int v14 = icu::PatternProps::skipWhiteSpace((uint64_t)a3, 0);
        if (icu::UnicodeString::doCompare((uint64_t)a3, v14, 2, (uint64_t)":", 0, 2))
        {
          int v15 = icu::MessageFormat::findKeyword((uint64_t)a3, (const UChar **)&off_1E550CEB8);
          int v16 = v15;
          if (v15 < 0) {
            uint64_t v17 = 2;
          }
          else {
            uint64_t v17 = dword_18CA94744[v15];
          }
          int v25 = (const icu::Locale *)(a1 + 328);
          if (Keyword == 1) {
            Dateuint64_t Instance = icu::DateFormat::createDateInstance(v17, v25);
          }
          else {
            Dateuint64_t Instance = icu::DateFormat::createTimeInstance(v17, v25);
          }
          InstanceForSkeleton = DateInstance;
          if (v16 < 0)
          {
            if (DateInstance)
            {
              if (v27) {
                (*(void (**)(void *, icu::UnicodeString *))(*(void *)v27 + 256))(v27, a3);
              }
            }
          }
        }
        else
        {
          memset(v33, 0, 64);
          icu::UnicodeString::tempSubString(a3, v14 + 2, 0x7FFFFFFF, (icu::UnicodeString *)v33);
          InstanceForSkeleton = icu::DateFormat::createInstanceForSkeleton((UErrorCode *)v33, (const icu::UnicodeString *)(a1 + 328), a6, v22);
          int v24 = (icu::UnicodeString *)v33;
LABEL_20:
          icu::UnicodeString::~UnicodeString(v23, v24);
        }
        return (uint64_t)InstanceForSkeleton;
      case 3:
        *a4 = 1;
        unint64_t v20 = a1 + 328;
        uint64_t v21 = 0;
        goto LABEL_16;
      case 4:
        *a4 = 1;
        unint64_t v20 = a1 + 328;
        uint64_t v21 = 1;
        goto LABEL_16;
      case 5:
        *a4 = 1;
        unint64_t v20 = a1 + 328;
        uint64_t v21 = 2;
LABEL_16:
        uint64_t result = sub_18C956090(v21, v20, (uint64_t)a3, (int *)a6);
        break;
      default:
        InstanceForSkeleton = 0;
        *a4 = 3;
        *a6 = U_ILLEGAL_ARGUMENT_ERROR;
        return (uint64_t)InstanceForSkeleton;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t icu::MessageFormat::findKeyword(uint64_t a1, const UChar **a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(unsigned __int16 *)(a1 + 8);
  if (v2 < 0x20) {
    return 0;
  }
  if ((v2 & 0x8000u) == 0) {
    unsigned int v4 = v2 >> 5;
  }
  else {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
  }
  unsigned int v16 = v4;
  if ((v2 & 0x11) != 0)
  {
    uint64_t v5 = 0;
  }
  else if ((v2 & 2) != 0)
  {
    uint64_t v5 = (unsigned __int16 *)(a1 + 10);
  }
  else
  {
    uint64_t v5 = *(unsigned __int16 **)(a1 + 24);
  }
  int32_t v7 = icu::PatternProps::trimWhiteSpace(v5, &v16);
  memset(v18, 0, sizeof(v18));
  uint64_t v15 = (uint64_t)v7;
  icu::UnicodeString::UnicodeString(v18, 0, &v15);
  uint64_t v14 = v15;
  icu::Locale::Locale(&v14, (icu::Locale *)v17, "", 0, 0, 0);
  icu::UnicodeString::toLower((UChar **)v18, (const icu::Locale *)v17);
  icu::Locale::~Locale((icu::Locale *)v17);
  uint64_t v9 = *a2;
  if (*a2)
  {
    uint64_t v6 = 0;
    int v10 = a2 + 1;
    while (1)
    {
      int32_t v11 = u_strlen(v9);
      int32_t v12 = (SWORD4(v18[0]) & 0x8000u) == 0 ? WORD4(v18[0]) >> 5 : HIDWORD(v18[0]);
      if (!icu::UnicodeString::doCompare((uint64_t)v18, 0, v12, (uint64_t)v9, 0, v11)) {
        break;
      }
      uint64_t v9 = v10[v6++];
      if (!v9) {
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v18);
  return v6;
}

icu::Format *icu::MessageFormat::createIntegerFormat(icu::MessageFormat *this, char **a2, UErrorCode *a3)
{
  uint64_t Instance = icu::NumberFormat::createInstance(a2, a3, a3);
  unsigned int v4 = Instance;
  if (Instance)
  {
    if (v5)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void))(*(void *)v5 + 232))(v5, 0);
      (*(void (**)(void *, void))(*(void *)v6 + 536))(v6, 0);
      (*(void (**)(void *, uint64_t))(*(void *)v6 + 184))(v6, 1);
    }
  }
  return v4;
}

void **sub_18C956034(void **a1)
{
  return a1;
}

uint64_t sub_18C956090(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = icu::UMemory::operator new((icu::UMemory *)0x2F0, a2);
  uint64_t v9 = v8;
  if (v8)
  {
    icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v8, a1, a2, a4);
    if (*a4 <= 0)
    {
      unsigned int v10 = *(unsigned __int16 *)(a3 + 8);
      int v11 = (__int16)v10;
      int v12 = v10 >> 5;
      if (v11 < 0) {
        int v12 = *(_DWORD *)(a3 + 12);
      }
      if (v12 >= 1)
      {
        int v14 = 0;
        (*(void (**)(uint64_t, uint64_t, int *))(*(void *)v9 + 384))(v9, a3, &v14);
      }
    }
  }
  else
  {
    *a4 = 7;
  }
  return v9;
}

uint64_t icu::MessageFormat::usesNamedArguments(icu::MessageFormat *this)
{
  return *((char *)this + 676);
}

uint64_t icu::MessageFormat::getArgTypeCount(icu::MessageFormat *this)
{
  return *((unsigned int *)this + 176);
}

uint64_t icu::MessageFormat::equalFormats(icu::MessageFormat *this, const void *a2, const void *a3)
{
  return (*(uint64_t (**)(icu::MessageFormat *, const void *, const void *))(*(void *)this + 24))(this, a2, a3);
}

uint64_t icu::MessageFormat::DummyFormat::operator==()
{
  return 1;
}

uint64_t *icu::MessageFormat::DummyFormat::clone@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a2, (icu::UMemory *)0x148, a1);
  if (result)
  {
    result[40] = 0;
    *((_OWORD *)result + 18) = 0u;
    *((_OWORD *)result + 19) = 0u;
    *((_OWORD *)result + 16) = 0u;
    *((_OWORD *)result + 17) = 0u;
    *((_OWORD *)result + 14) = 0u;
    *((_OWORD *)result + 15) = 0u;
    *((_OWORD *)result + 12) = 0u;
    *((_OWORD *)result + 13) = 0u;
    *((_OWORD *)result + 10) = 0u;
    *((_OWORD *)result + 11) = 0u;
    *((_OWORD *)result + 8) = 0u;
    *((_OWORD *)result + 9) = 0u;
    *((_OWORD *)result + 6) = 0u;
    *((_OWORD *)result + 7) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *((_OWORD *)result + 1) = 0u;
    uint64_t result = (uint64_t *)icu::Format::Format((uint64_t)result);
    *uint64_t result = (uint64_t)&unk_1EDA4E5A8;
  }
  return result;
}

icu::UnicodeString *icu::MessageFormat::DummyFormat::format(icu::MessageFormat::DummyFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  uint64_t result = a3;
  if (*(int *)a4 <= 0) {
    *a4 = U_UNSUPPORTED_ERROR;
  }
  return result;
}

icu::UnicodeString *icu::MessageFormat::DummyFormat::format(icu::MessageFormat::DummyFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t result = a3;
  if (*(int *)a5 <= 0) {
    *a5 = U_UNSUPPORTED_ERROR;
  }
  return result;
}

icu::UnicodeString *icu::MessageFormat::DummyFormat::format(icu::MessageFormat::DummyFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  uint64_t result = a3;
  if (*(int *)a5 <= 0) {
    *a5 = U_UNSUPPORTED_ERROR;
  }
  return result;
}

uint64_t sub_18C956294(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0;
  }
  signed int v2 = *(_DWORD *)(a1 + 116);
  unsigned int v3 = *(icu::UVector **)(a1 + 120);
  if (v2 >= *((_DWORD *)v3 + 2)) {
    return 0;
  }
  *(_DWORD *)(a1 + 116) = v2 + 1;
  return icu::UVector::elementAt(v3, v2);
}

uint64_t sub_18C9562CC(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18C9562D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1) {
    return *(unsigned int *)(v1 + 8);
  }
  else {
    return 0;
  }
}

void sub_18C9562EC(icu::StringEnumeration *this)
{
  *(void *)this = &unk_1EDA4E500;
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18C95636C(icu::StringEnumeration *a1)
{
  sub_18C9562EC(a1);

  icu::UMemory::operator delete(v1);
}

void icu::MessageFormat::PluralSelectorProvider::~PluralSelectorProvider(icu::MessageFormat::PluralSelectorProvider *this)
{
  *(void *)this = &unk_1EDA4E568;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::PluralFormat::PluralSelector::~PluralSelector(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::MessageFormat::PluralSelectorProvider::~PluralSelectorProvider(this);

  icu::UMemory::operator delete(v1);
}

void icu::MessageFormat::PluralSelectorProvider::select(icu::MessageFormat **this@<X0>, const icu::UnicodeString **a2@<X1>, double a3@<D0>, UErrorCode *a4@<X2>, icu::UnicodeString *a5@<X8>)
{
  if (*(int *)a4 < 1)
  {
    if (this[2]
      || (this[2] = (icu::MessageFormat *)icu::PluralRules::forLocale((icu::MessageFormat *)((char *)this[1] + 328), *((unsigned int *)this + 6), (icu::UnifiedCache *)a4), *(int *)a4 < 1))
    {
      Otheruint64_t SubMessage = icu::MessageFormat::findOtherSubMessage(this[1], *(_DWORD *)a2);
      int FirstPluralNumberArg = icu::MessageFormat::findFirstPluralNumberArg(this[1], OtherSubMessage, a2[1]);
      *((_DWORD *)a2 + 34) = FirstPluralNumberArg;
      if (FirstPluralNumberArg >= 1)
      {
        unsigned int v13 = FirstPluralNumberArg;
        uint64_t v14 = *((void *)this[1] + 92);
        if (v14) {
          a2[18] = (const icu::UnicodeString *)uhash_iget(v14, v13);
        }
      }
      if (!a2[18])
      {
        a2[18] = icu::MessageFormat::getDefaultNumberFormat(this[1], a4, v12);
        *((unsigned char *)a2 + 216) = 1;
      }
      uint64_t v15 = (const icu::Formattable *)(a2 + 2);
      if (icu::Formattable::getDouble((icu::Formattable *)(a2 + 2), a4) == a3)
      {
        icu::Format::format(a2[18], (const icu::Formattable *)(a2 + 2), (icu::UnicodeString *)(a2 + 19), a4);
        unsigned int v16 = a2[18];
        if (v16
        {
          unsigned int v18 = v17;
          uint64_t v22 = 0;
          memset(v21, 0, sizeof(v21));
          icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v21);
          icu::DecimalFormat::formatToDecimalQuantity(v18, v15, (icu::number::impl::DecimalQuantity *)v21, a4);
          if (*(int *)a4 < 1)
          {
            icu::PluralRules::select(this[2], (const icu::IFixedDecimal *)v21, a5);
          }
          else
          {
            unint64_t v20 = "o";
            icu::UnicodeString::UnicodeString(a5, 0, &v20);
          }
          icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v21);
        }
        else
        {
          uint64_t v19 = this[2];
          icu::PluralRules::select(v19, a3, a5);
        }
      }
      else
      {
        *a4 = U_INTERNAL_PROGRAM_ERROR;
        uint64_t v23 = "o";
        icu::UnicodeString::UnicodeString(a5, 0, &v23);
      }
    }
    else
    {
      int v24 = "o";
      icu::UnicodeString::UnicodeString(a5, 0, &v24);
    }
  }
  else
  {
    int v25 = "o";
    icu::UnicodeString::UnicodeString(a5, 0, &v25);
  }
}

void sub_18C956718(icu::Format *a1)
{
  icu::Format::~Format(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18C956740(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = (void *)(v2 - 16);
    uint64_t v4 = *(void *)(v2 - 8);
    if (v4)
    {
      uint64_t v5 = 112 * v4;
      uint64_t v6 = v2 - 112;
      do
      {
        icu::Formattable::~Formattable((icu::Formattable *)(v6 + v5));
        v5 -= 112;
      }
      while (v5);
    }
    icu::UMemory::operator delete[](v3);
  }
  return a1;
}

void *icu::NameUnicodeTransliterator::getStaticClassID(icu::NameUnicodeTransliterator *this)
{
  return &unk_1E91924DB;
}

void *sub_18C9567B0()
{
  return &unk_1E91924DB;
}

uint64_t sub_18C9567BC(uint64_t a1, icu::UnicodeFilter *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int32_t v7 = L"Name-Any";
  icu::UnicodeString::UnicodeString(v8, 1, &v7);
  icu::Transliterator::Transliterator((icu::Transliterator *)a1, v8, a2);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v8);
  *(void *)a1 = &unk_1EDA4E630;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 88));
  v8[0] = v5;
  v8[1] = (UChar *)j__uset_add;
  long long v9 = 0u;
  long long v10 = 0u;
  uprv_getCharNameCharacters((uint64_t)v8);
  return a1;
}

void sub_18C9568AC(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA4E630;
  icu::UnicodeSet::~UnicodeSet(a2, (icu::UnicodeSet *)(a1 + 88));

  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
}

void sub_18C956900(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA4E630;
  icu::UnicodeSet::~UnicodeSet(a2, (icu::UnicodeSet *)(a1 + 88));
  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);

  icu::UMemory::operator delete(v3);
}

icu::Transliterator *sub_18C956958@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x120, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = icu::Transliterator::Transliterator(v4, a1);
    *(void *)uint64_t v6 = &unk_1EDA4E630;
    icu::UnicodeSet::UnicodeSet((icu::Transliterator *)((char *)v6 + 88), (const icu::UnicodeSet *)(a1 + 11));
  }
  return v5;
}

char *sub_18C9569BC(uint64_t a1, const icu::UnicodeString *a2, _DWORD *a3, int a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t result = (char *)uprv_getMaxCharNameLength();
  if (!result
    || (int v9 = (int)result, v44 = result + 1, (result = (char *)uprv_malloc((int)result + 1)) == 0))
  {
    a3[2] = a3[3];
    return result;
  }
  long long v42 = result;
  memset(v57, 0, 64);
  uint64_t v46 = L"\\N~{~";
  LODWORD(v10) = -1;
  icu::UnicodeString::UnicodeString(v57, 1, &v46);
  long long v53 = 0u;
  uint64_t v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  uint64_t v51 = 0;
  int v52 = &unk_1EDA47700;
  LOWORD(v53) = 2;
  long long v48 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v47 = &unk_1EDA47700;
  LOWORD(v48) = 2;
  unint64_t v12 = a3[2];
  int v11 = a3[3];
  if ((int)v12 >= v11) {
    goto LABEL_78;
  }
  uint64_t v43 = (icu::UnicodeSet *)(a1 + 88);
  int v41 = a4;
  do
  {
    int v13 = 0;
    uint64_t v10 = 0xFFFFFFFFLL;
    unint64_t v14 = v12;
    while (1)
    {
      unint64_t v12 = v14;
      uint64_t v15 = (icu::PatternProps *)(*(uint64_t (**)(const icu::UnicodeString *, unint64_t))(*(void *)a2 + 80))(a2, v14);
      unsigned int v16 = v15;
      if (v13 == 1) {
        break;
      }
      if (v15 == 92)
      {
        unint64_t v17 = icu::ICU_Utility::parsePattern((icu::ICU_Utility *)v57, a2, v14, v11);
        int v13 = 0;
        if ((v17 & 0x80000000) == 0)
        {
          unint64_t v14 = v17;
          if ((int)v17 < v11)
          {
            if (v48)
            {
              icu::UnicodeString::unBogus((uint64_t)&v47);
            }
            else
            {
              if ((v48 & 0x8000u) == 0) {
                int v18 = (unsigned __int16)v48 >> 5;
              }
              else {
                int v18 = DWORD1(v48);
              }
              if (v18)
              {
                LOBYTE(v48) = v48 & 0x1F;
                LOWORD(v48) = v48;
              }
            }
            int v13 = 1;
            uint64_t v10 = v12;
            goto LABEL_43;
          }
        }
        uint64_t v10 = v12;
      }
      else
      {
        int v13 = 0;
      }
LABEL_39:
      if (v16 < 0x10000) {
        int v25 = 1;
      }
      else {
        int v25 = 2;
      }
      unint64_t v14 = (v12 + v25);
LABEL_43:
      if ((int)v14 >= v11)
      {
        LODWORD(v12) = v14;
        a4 = v41;
        goto LABEL_78;
      }
    }
    if (icu::PatternProps::isWhiteSpace(v15))
    {
      if ((__int16)v48 < 0)
      {
        int v19 = DWORD1(v48);
        if ((uint64_t)v48 <= 0) {
          goto LABEL_31;
        }
      }
      else
      {
        if ((unsigned __int16)v48 < 0x20u) {
          goto LABEL_31;
        }
        int v19 = (unsigned __int16)v48 >> 5;
      }
      int v22 = v19 - 1;
      uint64_t v23 = (char *)&v48 + 2;
      if ((v48 & 2) == 0) {
        uint64_t v23 = (char *)v49;
      }
      if (*(_WORD *)&v23[2 * v22] == 32)
      {
LABEL_31:
        int v13 = 1;
        goto LABEL_39;
      }
      LOWORD(pErrorCode) = 32;
      icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&pErrorCode, 0, 1);
      int v24 = (unsigned __int16)v48 >> 5;
      if ((v48 & 0x8000u) != 0) {
        int v24 = DWORD1(v48);
      }
      BOOL v21 = v24 <= v44;
      goto LABEL_35;
    }
    if (v16 != 125)
    {
      if (!icu::UnicodeSet::contains(v43, v16))
      {
        int v13 = 0;
        LODWORD(v12) = v14 - 1;
        goto LABEL_39;
      }
      icu::UnicodeString::append((uint64_t)&v47, v16);
      int v20 = (unsigned __int16)v48 >> 5;
      if ((v48 & 0x8000u) != 0) {
        int v20 = DWORD1(v48);
      }
      BOOL v21 = v20 <= v9;
LABEL_35:
      int v13 = v21;
      goto LABEL_39;
    }
    if ((__int16)v48 < 0)
    {
      uint64_t v26 = DWORD1(v48);
      if (SDWORD1(v48) > 0) {
        goto LABEL_53;
      }
    }
    else
    {
      if ((unsigned __int16)v48 < 0x20u)
      {
        uint64_t v26 = 0;
        goto LABEL_58;
      }
      LODWORD(v26) = (unsigned __int16)v48 >> 5;
LABEL_53:
      unsigned int v27 = v26 - 1;
      int v28 = (char *)v49;
      if ((v48 & 2) != 0) {
        int v28 = (char *)&v48 + 2;
      }
      if (*(_WORD *)&v28[2 * v27] == 32) {
        uint64_t v26 = v27;
      }
      else {
        uint64_t v26 = v26;
      }
    }
LABEL_58:
    int v29 = (char *)v49;
    if ((v48 & 2) != 0) {
      int v29 = (char *)&v48 + 2;
    }
    if ((v48 & 0x11) != 0) {
      int v30 = 0;
    }
    else {
      int v30 = v29;
    }
    if (uprv_isInvariantUString(v30, v26))
    {
      *long long v42 = 0;
      icu::UnicodeString::extract((uint64_t)&v47, 0, v26, v42, v44);
      UErrorCode pErrorCode = U_ZERO_ERROR;
      UChar32 v31 = u_charFromName(U_EXTENDED_CHAR_NAME, v42, &pErrorCode);
      if (pErrorCode <= U_ZERO_ERROR)
      {
        unsigned int v32 = v31;
        if (v53)
        {
          icu::UnicodeString::unBogus((uint64_t)&v52);
        }
        else
        {
          if ((v53 & 0x8000u) == 0) {
            int v33 = (unsigned __int16)v53 >> 5;
          }
          else {
            int v33 = DWORD1(v53);
          }
          if (v33)
          {
            LOBYTE(v53) = v53 & 0x1F;
            LOWORD(v53) = v53;
          }
        }
        icu::UnicodeString::append((uint64_t)&v52, v32);
        (*(void (**)(const icu::UnicodeString *, uint64_t, void, void **))(*(void *)a2 + 32))(a2, v10, (v12 + 1), &v52);
        int v34 = (unsigned __int16)v53 >> 5;
        if ((v53 & 0x8000u) != 0) {
          int v34 = DWORD1(v53);
        }
        int v35 = ~v12;
        unint64_t v12 = (v34 + v10);
        v11 += v35 + v12;
      }
    }
    a4 = v41;
    LODWORD(v10) = -1;
  }
  while ((int)v12 < v11);
LABEL_78:
  if ((int)v10 <= -1 || a4 == 0) {
    int v37 = v12;
  }
  else {
    int v37 = v10;
  }
  a3[1] += v11 - a3[3];
  a3[2] = v37;
  a3[3] = v11;
  uprv_free(v42);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v47);
  icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v52);
  return (char *)icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v57);
}

uint64_t sub_18C956ECC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  v36[8] = *(UChar **)MEMORY[0x1E4F143B8];
  int v9 = (icu::UnicodeString *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EDA47700;
  *(_WORD *)(a1 + 16) = 2;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 136) = a2;
  *(void *)(a1 + 144) = uprv_malloc(0x50uLL);
  *(void *)(a1 + 152) = 0xA00000000;
  *(_WORD *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 162) = 1;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  if (*a5 > 0) {
    return a1;
  }
  uint64_t v10 = a4;
  uint64_t v11 = a3 + ((uint64_t)a4 << 6);
  unint64_t v12 = (_WORD *)(v11 + 8);
  unsigned int v13 = *(unsigned __int16 *)(v11 + 8);
  if (*(__int16 *)(v11 + 8) < 0)
  {
    if (!*(_DWORD *)(v11 + 12)) {
      goto LABEL_4;
    }
  }
  else if (v13 <= 0x1F)
  {
LABEL_4:
    *a5 = 9;
    return a1;
  }
  if ((v13 & 2) != 0) {
    unint64_t v14 = (_WORD *)(v11 + 10);
  }
  else {
    unint64_t v14 = *(_WORD **)(a3 + (v10 << 6) + 24);
  }
  if (*v14 == 37)
  {
    if ((v13 & 0x8000) != 0) {
      int32_t v15 = *(_DWORD *)(a3 + (v10 << 6) + 12);
    }
    else {
      int32_t v15 = v13 >> 5;
    }
    uint64_t v17 = icu::UnicodeString::doIndexOf(v11, 0x3Au, 0, v15);
    if (v17 == -1)
    {
      *a5 = 9;
    }
    else
    {
      uint64_t v18 = v17;
      icu::UnicodeString::unBogus((uint64_t)v9);
      if (*(__int16 *)(a1 + 16) < 0) {
        uint64_t v19 = *(unsigned int *)(a1 + 20);
      }
      else {
        uint64_t v19 = *(unsigned __int16 *)(a1 + 16) >> 5;
      }
      icu::UnicodeString::doReplace(v9, 0, v19, (const icu::UnicodeString *)v11, 0, v18);
      uint64_t v20 = a3 + (v10 << 6);
      BOOL v21 = (int *)(v20 + 12);
      int v34 = (uint64_t *)(v20 + 24);
      uint64_t v18 = (int)v18;
      do
      {
        if ((__int16)*v12 < 0)
        {
          int64_t v22 = *v21;
          if (v18 >= v22) {
            break;
          }
        }
        else
        {
          if (v18 >= (uint64_t)((unint64_t)(unsigned __int16)*v12 >> 5)) {
            break;
          }
          int64_t v22 = (unint64_t)(unsigned __int16)*v12 >> 5;
        }
        if (v22 <= (int)v18 + 1)
        {
          uint64_t v24 = 0xFFFFLL;
        }
        else
        {
          uint64_t v23 = v11 + 10;
          if ((*v12 & 2) == 0) {
            uint64_t v23 = *v34;
          }
          uint64_t v24 = *(unsigned __int16 *)(v23 + 2 * v18 + 2);
        }
        ++v18;
      }
      while (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v24));
      if (v18 == 0x7FFFFFFF)
      {
        if (*v12) {
          unsigned int v25 = 2;
        }
        else {
          unsigned int v25 = *v12 & 0x1F;
        }
        *unint64_t v12 = v25;
LABEL_38:
        if (v25 >> 5) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      icu::UnicodeString::doReplace(v11, 0, v18, 0, 0, 0);
    }
  }
  else
  {
    int v35 = "%";
    icu::UnicodeString::UnicodeString(v36, 1, &v35);
    icu::UnicodeString::copyFrom((UChar **)v9, v36, 0);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v36);
  }
  if (((__int16)*v12 & 0x80000000) == 0)
  {
    unsigned int v25 = (unsigned __int16)*v12;
    goto LABEL_38;
  }
  if (!*(_DWORD *)(a3 + (v10 << 6) + 12)) {
LABEL_39:
  }
    *a5 = 9;
LABEL_40:
  if (*(__int16 *)(a1 + 16) < 0)
  {
    int v27 = *(_DWORD *)(a1 + 20);
    int v26 = v27 & (v27 >> 31);
  }
  else
  {
    int v26 = 0;
    int v27 = *(unsigned __int16 *)(a1 + 16) >> 5;
  }
  *(unsigned char *)(a1 + 161) = icu::UnicodeString::indexOf((uint64_t)v9, (uint64_t)L"%%", 0, 2, v26, v27 - v26) != 0;
  unsigned int v28 = *(unsigned __int16 *)(a1 + 16);
  if ((v28 & 0x8000) != 0) {
    unsigned int v29 = *(_DWORD *)(a1 + 20);
  }
  else {
    unsigned int v29 = v28 >> 5;
  }
  if (icu::UnicodeString::doEqualsSubstring((uint64_t)v9, v29 - 8, 8, (uint64_t)"@", 0, 8))
  {
    *(unsigned char *)(a1 + 162) = 0;
    unsigned int v30 = *(unsigned __int16 *)(a1 + 16);
    if ((v30 & 0x8000) != 0) {
      unsigned int v31 = *(_DWORD *)(a1 + 20);
    }
    else {
      unsigned int v31 = v30 >> 5;
    }
    int v32 = v31 - 8;
    if ((v30 & 1) != 0 && v31 == 8)
    {
      icu::UnicodeString::unBogus((uint64_t)v9);
    }
    else if (v31 > v32)
    {
      if (v32 > 1023)
      {
        *(_WORD *)(a1 + 16) = v30 | 0xFFE0;
        *(_DWORD *)(a1 + 20) = v32;
      }
      else
      {
        *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0x1F | (32 * v32);
      }
    }
  }
  return a1;
}

char *sub_18C9572A4(char *result, uint64_t a2, UErrorCode *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    unint64_t v5 = (unint64_t)result;
    uint64_t v6 = result + 72;
    sub_18C957500((uint64_t)(result + 72));
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v34 = 0;
    long long v33 = 0u;
    unsigned int v30 = &unk_1EDA47700;
    LOWORD(v31) = 2;
    int v7 = *(__int16 *)(a2 + 8);
    int v8 = *(_WORD *)(a2 + 8) >> 5;
    signed int v9 = *(_DWORD *)(a2 + 12);
    if (v7 < 0) {
      int v8 = *(_DWORD *)(a2 + 12);
    }
    if (v8 >= 1)
    {
      int v10 = 0;
      unsigned int v11 = v7 >> 31;
      do
      {
        unsigned int v12 = (unsigned __int16)v7 >> 5;
        if (v11) {
          unsigned int v13 = v9;
        }
        else {
          unsigned int v13 = v12;
        }
        if (v12 >= v10) {
          unsigned int v14 = v10;
        }
        else {
          unsigned int v14 = v12;
        }
        if (v9 >= v10) {
          int v15 = v10;
        }
        else {
          int v15 = v9;
        }
        BOOL v16 = (v11 & 1) == 0;
        if (v11) {
          int v17 = v15;
        }
        else {
          int v17 = v14;
        }
        if (v16) {
          signed int v9 = v12;
        }
        if (v10 >= 0) {
          int v18 = v17;
        }
        else {
          int v18 = 0;
        }
        if (v10 < 0) {
          signed int v9 = v13;
        }
        int v19 = icu::UnicodeString::doIndexOf(a2, 0x3Bu, v18, v9 - v18);
        if (v19 == -1)
        {
          if (*(__int16 *)(a2 + 8) < 0) {
            int v19 = *(_DWORD *)(a2 + 12);
          }
          else {
            int v19 = *(unsigned __int16 *)(a2 + 8) >> 5;
          }
        }
        icu::UnicodeString::unBogus((uint64_t)&v30);
        if ((v31 & 0x8000u) == 0) {
          uint64_t v20 = (unsigned __int16)v31 >> 5;
        }
        else {
          uint64_t v20 = DWORD1(v31);
        }
        icu::UnicodeString::doReplace((icu::UnicodeString *)&v30, 0, v20, (const icu::UnicodeString *)a2, v10, (v19 - v10));
        int v21 = *(_DWORD *)(v5 + 80);
        if (v21 && *v6) {
          uint64_t v22 = *(void *)(*v6 + 8 * (v21 - 1));
        }
        else {
          uint64_t v22 = 0;
        }
        sub_18C958F54((uint64_t)&v30, v5, v22, *(void *)(v5 + 136), (uint64_t)v6, a3);
        int v10 = v19 + 1;
        int v7 = *(__int16 *)(a2 + 8);
        unsigned int v11 = v7 >> 31;
        int v23 = *(_WORD *)(a2 + 8) >> 5;
        signed int v9 = *(_DWORD *)(a2 + 12);
        if (v7 < 0) {
          int v23 = *(_DWORD *)(a2 + 12);
        }
      }
      while (v10 < v23);
    }
    uint64_t v24 = *(unsigned int *)(v5 + 80);
    if ((int)v24 >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 8 * v24;
      do
      {
        unsigned int v28 = *(uint64_t **)(*v6 + v25);
        if (*v28)
        {
          BOOL v29 = *v28 < v26;
          uint64_t v26 = *v28;
          if (v29)
          {
            uint64_t v24 = 9;
            *a3 = U_PARSE_ERROR;
            return (char *)icu::UnicodeString::~UnicodeString((void *)v24, (icu::UnicodeString *)&v30);
          }
        }
        else
        {
          sub_18C9596DC((uint64_t)v28, v26, (uint64_t)a3);
        }
        uint64_t v24 = *(unsigned __int8 *)(v5 + 160);
        if (!*(unsigned char *)(v5 + 160)) {
          ++v26;
        }
        v25 += 8;
      }
      while (v27 != v25);
    }
    return (char *)icu::UnicodeString::~UnicodeString((void *)v24, (icu::UnicodeString *)&v30);
  }
  return result;
}

void sub_18C957500(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 >= 1)
  {
    sub_18C957768(a1, 0);
    uint64_t v3 = 0;
    uint64_t v4 = *(char **)a1;
    uint64_t v5 = 8 * v1;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    do
    {
      uint64_t v6 = *(void **)&v4[v3];
      if (v6)
      {
        int v7 = sub_18C958F50(v6);
        icu::UMemory::operator delete(v7);
      }
      v3 += 8;
    }
    while (v5 != v3);
    uprv_free(v4);
  }
}

void sub_18C95758C(void *a1, void *a2)
{
  switch(*a2)
  {
    case 0xFFFFFFFFFFFFFFFALL:
      uint64_t v4 = (void *)a1[16];
      if (v4)
      {
        uint64_t v5 = sub_18C958F50(v4);
        icu::UMemory::operator delete(v5);
      }
      a1[16] = a2;
      return;
    case 0xFFFFFFFFFFFFFFFBLL:
      uint64_t v6 = (void *)a1[15];
      if (v6)
      {
        int v7 = sub_18C958F50(v6);
        icu::UMemory::operator delete(v7);
      }
      a1[15] = a2;
      return;
    case 0xFFFFFFFFFFFFFFFCLL:
      int v8 = 3;
      goto LABEL_11;
    case 0xFFFFFFFFFFFFFFFDLL:
      int v8 = 2;
      goto LABEL_11;
    case 0xFFFFFFFFFFFFFFFELL:
      int v8 = 1;
LABEL_11:
      sub_18C957680(a1, v8, (uint64_t)a2, 1);
      break;
    case 0xFFFFFFFFFFFFFFFFLL:
      signed int v9 = (void *)a1[11];
      if (v9)
      {
        int v10 = sub_18C958F50(v9);
        icu::UMemory::operator delete(v10);
      }
      a1[11] = a2;
      break;
    default:
      return;
  }
}

void *sub_18C957680(void *result, int a2, uint64_t a3, int a4)
{
  uint64_t v6 = result;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a4) {
    uint64_t result = sub_18C957768((uint64_t)(result + 18), a3);
  }
  int v7 = &v6[a2];
  uint64_t v9 = v7[11];
  int v8 = v7 + 11;
  if (!v9) {
    goto LABEL_14;
  }
  uint64_t DecimalFormatSymbols = icu::RuleBasedNumberFormat::getDecimalFormatSymbols((icu::RuleBasedNumberFormat *)v6[17]);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v15, (UChar **)(DecimalFormatSymbols + 8));
  unint64_t v11 = v16;
  if ((v16 & 0x8000u) == 0 ? v16 >> 5 : *(_DWORD *)&v17[2])
  {
    unint64_t v11 = (unint64_t)((v16 & 2) != 0 ? v17 : v18);
    int v13 = *(unsigned __int16 *)v11;
  }
  else
  {
    int v13 = 0xFFFF;
  }
  int v14 = *(unsigned __int16 *)(a3 + 14);
  uint64_t result = icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)v15);
  if (v13 == v14) {
LABEL_14:
  }
    *int v8 = a3;
  return result;
}

void *sub_18C957768(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != *(_DWORD *)(a1 + 12))
  {
    uint64_t result = *(void **)a1;
    if (*(void *)a1) {
      goto LABEL_3;
    }
LABEL_5:
    int v8 = 0;
    *(_DWORD *)(a1 + 12) = 0;
    goto LABEL_6;
  }
  unsigned int v5 = v4 + 10;
  *(_DWORD *)(a1 + 12) = v5;
  uint64_t result = uprv_realloc(*(void **)a1, 8 * v5);
  *(void *)a1 = result;
  if (!result) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  int v8 = v7 + 1;
  result[v7] = a2;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v8;
  return result;
}

uint64_t sub_18C9577D8(uint64_t a1)
{
  for (uint64_t i = 0; i != 6; ++i)
  {
    if ((i - 4) <= 0xFFFFFFFC)
    {
      uint64_t v3 = *(void **)(a1 + 8 * i + 88);
      if (v3)
      {
        int v4 = sub_18C958F50(v3);
        icu::UMemory::operator delete(v4);
      }
    }
  }
  sub_18C958790(a1 + 144);
  sub_18C958790(a1 + 72);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 8));
  return a1;
}

uint64_t sub_18C957848(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80) || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)) {
    return 0;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 16);
  if ((v4 & 1) == 0)
  {
    if ((v4 & 0x8000) != 0) {
      int v5 = *(_DWORD *)(a1 + 20);
    }
    else {
      int v5 = v4 >> 5;
    }
    uint64_t result = 0;
    unsigned int v7 = *(unsigned __int16 *)(a2 + 16);
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a2 + 20);
    }
    if (v7) {
      return result;
    }
    if (v5 != v8) {
      return result;
    }
    uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)(a2 + 8), v5);
    if (!result) {
      return result;
    }
    goto LABEL_16;
  }
  if ((*(_WORD *)(a2 + 16) & 1) == 0) {
    return 0;
  }
LABEL_16:
  for (uint64_t i = 0; i != 48; i += 8)
  {
    uint64_t v10 = *(void *)(a1 + 88 + i);
    uint64_t v11 = *(void *)(a2 + 88 + i);
    if (v10)
    {
      if (!v11) {
        return 0;
      }
      uint64_t result = sub_18C959B60(v10, v11);
      if (!result) {
        return result;
      }
    }
    else if (v11)
    {
      return 0;
    }
  }
  if (!*(_DWORD *)(a1 + 80)) {
    return 1;
  }
  unint64_t v12 = 0;
  do
  {
    uint64_t v13 = *(void *)(a1 + 72);
    if (v13) {
      uint64_t v14 = *(void *)(v13 + 8 * v12);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t result = sub_18C959B60(v14, *(void *)(*(void *)(a2 + 72) + 8 * v12));
    if ((result & 1) == 0) {
      break;
    }
    ++v12;
  }
  while (v12 < *(unsigned int *)(a1 + 80));
  return result;
}

uint64_t sub_18C95797C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(a1 + 72);
      if (v3) {
        uint64_t v4 = *(void *)(v3 + 8 * v2);
      }
      else {
        uint64_t v4 = 0;
      }
      sub_18C95BECC(v4);
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 80));
  }
  for (uint64_t i = 1; i != 4; ++i)
  {
    uint64_t v6 = a1 + 8 * i;
    uint64_t v8 = *(void *)(v6 + 88);
    unsigned int v7 = (void **)(v6 + 88);
    if (v8)
    {
      unint64_t v9 = *(unsigned int *)(a1 + 152);
      if (v9)
      {
        for (unint64_t j = 0; j < v9; ++j)
        {
          uint64_t v11 = *(void **)(*(void *)(a1 + 144) + 8 * j);
          if (**v7 == *v11)
          {
            sub_18C957680((void *)a1, i, (uint64_t)v11, 0);
            unint64_t v9 = *(unsigned int *)(a1 + 152);
          }
        }
      }
    }
  }
  uint64_t v12 = 0;
  uint64_t v13 = a1 + 88;
  do
  {
    uint64_t result = *(void *)(v13 + v12);
    if (result) {
      uint64_t result = sub_18C95BECC(result);
    }
    v12 += 8;
  }
  while (v12 != 48);
  return result;
}

_DWORD *sub_18C957A7C(_DWORD *result, unint64_t a2, icu::UnicodeString *a3, uint64_t a4, int a5, UErrorCode *a6)
{
  if (a5 < 64)
  {
    uint64_t result = (_DWORD *)sub_18C957B10((uint64_t)result, a2);
    if (result)
    {
      return sub_18C95A288((uint64_t)result, a2, a3, a4, (a5 + 1), a6);
    }
  }
  else
  {
    *a6 = U_INVALID_STATE_ERROR;
  }
  return result;
}

uint64_t sub_18C957B10(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (a2 < 0)
    {
      uint64_t v8 = *(uint64_t **)(a1 + 88);
      if (v8) {
        return (uint64_t)v8;
      }
      a2 = -a2;
    }
    int v4 = *(_DWORD *)(a1 + 80);
    if (v4 < 1) {
      return *(void *)(a1 + 112);
    }
    signed int v5 = 0;
    uint64_t v6 = *(void *)(a1 + 72);
    while (1)
    {
      unsigned int v7 = (v5 + v4) / 2;
      uint64_t v8 = *(uint64_t **)(v6 + 8 * v7);
      if (*v8 == a2) {
        break;
      }
      if (*v8 <= a2) {
        signed int v5 = v7 + 1;
      }
      else {
        int v4 = (v5 + v4) / 2;
      }
      if (v5 >= v4)
      {
        if (!v4) {
          return 0;
        }
        uint64_t v8 = *(uint64_t **)(v6 + 8 * (v4 - 1));
        if (!sub_18C95A964((uint64_t)v8, a2)) {
          return (uint64_t)v8;
        }
        if (v4 != 1 && (uint64_t v9 = *(void *)(a1 + 72)) != 0) {
          return *(void *)(v9 + 8 * (v4 - 2));
        }
        else {
          return 0;
        }
      }
    }
    return (uint64_t)v8;
  }

  return sub_18C957DE0(a1, (double)a2);
}

_DWORD *sub_18C957C04(_DWORD *result, icu::UnicodeString *a2, uint64_t a3, int a4, UErrorCode *a5, double a6)
{
  if (a4 < 64)
  {
    uint64_t result = (_DWORD *)sub_18C957C98((uint64_t)result, a6);
    if (result)
    {
      return sub_18C95A5E4((uint64_t)result, a2, a3, (a4 + 1), a5, a6);
    }
  }
  else
  {
    *a5 = U_INVALID_STATE_ERROR;
  }
  return result;
}

uint64_t sub_18C957C98(uint64_t a1, double a2)
{
  double v2 = a2;
  if (*(unsigned char *)(a1 + 160))
  {
    return sub_18C957DE0(a1, a2);
  }
  else if (uprv_isNaN(a2))
  {
    uint64_t result = *(void *)(a1 + 128);
    if (!result)
    {
      signed int v5 = *(icu::RuleBasedNumberFormat **)(a1 + 136);
      return icu::RuleBasedNumberFormat::getDefaultNaNRule(v5);
    }
  }
  else
  {
    if (v2 < 0.0)
    {
      uint64_t result = *(void *)(a1 + 88);
      if (result) {
        return result;
      }
      double v2 = -v2;
    }
    if (uprv_isInfinite(v2))
    {
      uint64_t result = *(void *)(a1 + 120);
      if (!result)
      {
        uint64_t v6 = *(icu::RuleBasedNumberFormat **)(a1 + 136);
        return icu::RuleBasedNumberFormat::getDefaultInfinityRule(v6);
      }
    }
    else if (v2 == uprv_floor(v2) {
           || (v2 >= 1.0 || (uint64_t result = *(void *)(a1 + 104)) == 0) && (uint64_t result = *(void *)(a1 + 96)) == 0)
    }
    {
      uint64_t result = *(void *)(a1 + 112);
      if (!result)
      {
        uint64_t v7 = sub_18C957F98(v2 + 0.5);
        return sub_18C957B10(a1, v7);
      }
    }
  }
  return result;
}

uint64_t sub_18C957DE0(uint64_t a1, double a2)
{
  int v4 = *(uint64_t ***)(a1 + 72);
  uint64_t v5 = **v4;
  uint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6 >= 2)
  {
    for (uint64_t i = 1; i != v6; ++i)
    {
      uint64_t v8 = *v4[i];
      BOOL v9 = (v5 & 1) == 0;
      if ((v8 | v5))
      {
        char v10 = 0;
        uint64_t v12 = *v4[i];
        uint64_t v11 = v5;
      }
      else
      {
        char v10 = 0;
        uint64_t v11 = v5;
        uint64_t v12 = *v4[i];
        do
        {
          char v13 = v11 | v12;
          BOOL v14 = (v11 & 2) == 0;
          v11 >>= 1;
          v12 >>= 1;
          BOOL v9 = v14;
          ++v10;
        }
        while ((v13 & 2) == 0);
      }
      if (v9) {
        uint64_t v15 = v11;
      }
      else {
        uint64_t v15 = -v12;
      }
      if (v15)
      {
        do
        {
          do
          {
            uint64_t v16 = v15;
            v15 >>= 1;
          }
          while ((v16 & 1) == 0);
          if (v16 > 0) {
            uint64_t v11 = v16;
          }
          else {
            uint64_t v12 = -v16;
          }
          uint64_t v15 = v11 - v12;
        }
        while (v11 != v12);
      }
      uint64_t v5 = v5 / (v11 << v10) * v8;
    }
  }
  uint64_t v17 = sub_18C957F98(a2 * (double)v5 + 0.5);
  double v18 = uprv_maxMantissa();
  uint64_t v19 = sub_18C957F98(v18);
  uint64_t v20 = *(unsigned int *)(a1 + 80);
  uint64_t v21 = *(void *)(a1 + 72);
  if (!v20)
  {
    unsigned int v23 = 0;
    goto LABEL_32;
  }
  uint64_t v22 = 0;
  unsigned int v23 = 0;
  while (1)
  {
    uint64_t v24 = **(void **)(v21 + 8 * v22) * v17 % v5;
    if (v5 - v24 < v24) {
      uint64_t v24 = v5 - v24;
    }
    if (v24 >= v19) {
      goto LABEL_28;
    }
    if (!v24) {
      break;
    }
    uint64_t v19 = v24;
    unsigned int v23 = v22;
LABEL_28:
    if (v20 == ++v22) {
      goto LABEL_32;
    }
  }
  unsigned int v23 = v22;
LABEL_32:
  if (v23 + 1 >= v20)
  {
    if (v21) {
      return *(void *)(v21 + 8 * v23);
    }
    return 0;
  }
  else
  {
    uint64_t v25 = **(void **)(v21 + 8 * (v23 + 1));
    if (v25 == **(void **)(v21 + 8 * v23))
    {
      double v26 = (double)v25 * a2;
      if (v26 >= 2.0 || v26 < 0.5) {
        ++v23;
      }
    }
    return *(void *)(v21 + 8 * v23);
  }
}

uint64_t sub_18C957F98(double a1)
{
  if (uprv_isNaN(a1)) {
    return 0;
  }
  double v3 = uprv_maxMantissa();
  double v4 = -v3;
  if (-v3 <= a1)
  {
    if (v3 < a1) {
      double v4 = v3;
    }
    else {
      double v4 = a1;
    }
  }
  double v5 = -v4;
  if (v4 >= 0.0) {
    double v5 = v4;
  }
  double v6 = uprv_floor(v5);
  if (v4 >= 0.0) {
    return (uint64_t)v6;
  }
  else {
    return -(uint64_t)v6;
  }
}

uint64_t sub_18C957FFC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, icu::Formattable *this, int a6, double a7)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  icu::Formattable::setLong(this, 0);
  unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
  int v15 = (__int16)v14;
  unsigned int v16 = v14 >> 5;
  if (v15 < 0) {
    unsigned int v16 = *(_DWORD *)(a2 + 12);
  }
  if (!v16) {
    return 0;
  }
  uint64_t v17 = 0;
  uint64_t v35 = &unk_1EDA44670;
  unint64_t v36 = 0xFFFFFFFF00000000;
  long long v33 = &unk_1EDA44670;
  unint64_t v34 = *(void *)(a3 + 8);
  do
  {
    uint64_t v18 = a1 + 8 * v17;
    if (*(void *)(v18 + 88)) {
      BOOL v19 = ((1 << v17) & a4) == 0;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19)
    {
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      icu::Formattable::Formattable((icu::Formattable *)&v37);
      uint64_t v20 = *(void *)(v18 + 88);
      if (a6) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = sub_18C9582E8(a1);
      }
      a4 |= 1 << v17;
      if (sub_18C95AA1C(v20, a2, (uint64_t)&v33, 0, a4, (icu::Formattable *)&v37, v21, a7)
        && (int)v34 > (int)v36)
      {
        icu::Formattable::operator=((uint64_t)this, (uint64_t)&v37);
        unint64_t v36 = v34;
      }
      unint64_t v34 = *(void *)(a3 + 8);
      icu::Formattable::~Formattable((icu::Formattable *)&v37);
    }
    ++v17;
  }
  while (v17 != 6);
  uint64_t v22 = sub_18C957F98(a7);
  uint64_t v23 = *(unsigned int *)(a1 + 80);
  if ((int)v23 >= 1)
  {
    uint64_t v24 = v22;
    unint64_t v25 = v23 + 1;
    do
    {
      unsigned int v26 = *(unsigned __int16 *)(a2 + 8);
      int v27 = (__int16)v26;
      int v28 = v26 >> 5;
      if (v27 < 0) {
        int v28 = *(_DWORD *)(a2 + 12);
      }
      if ((int)v36 >= v28) {
        break;
      }
      unsigned int v29 = v25 - 2;
      if (*(unsigned char *)(a1 + 160) || **(void **)(*(void *)(a1 + 72) + 8 * v29) < v24)
      {
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        icu::Formattable::Formattable((icu::Formattable *)&v37);
        uint64_t v30 = *(void *)(a1 + 72);
        if (v30) {
          uint64_t v31 = *(void *)(v30 + 8 * v29);
        }
        else {
          uint64_t v31 = 0;
        }
        if (sub_18C95AA1C(v31, a2, (uint64_t)&v33, *(char *)(a1 + 160), a4, (icu::Formattable *)&v37, 1, a7))
        {
          if ((int)v34 > (int)v36)
          {
            icu::Formattable::operator=((uint64_t)this, (uint64_t)&v37);
            unint64_t v36 = v34;
          }
        }
        unint64_t v34 = *(void *)(a3 + 8);
        icu::Formattable::~Formattable((icu::Formattable *)&v37);
      }
      --v25;
    }
    while (v25 > 1);
  }
  *(void *)(a3 + 8) = v36;
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v33);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v35);
  return 1;
}

BOOL sub_18C9582E8(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  char v13 = L"spellout-numbering-year";
  icu::UnicodeString::UnicodeString(&v18, 1, &v13);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v12 = L"spellout-ordinal";
  icu::UnicodeString::UnicodeString(&v14, 1, &v12);
  if ((SWORD4(v18) & 0x8000u) == 0) {
    int32_t v2 = WORD4(v18) >> 5;
  }
  else {
    int32_t v2 = HIDWORD(v18);
  }
  unint64_t v3 = *(__int16 *)(a1 + 16);
  if ((v3 & 0x80000000) != 0)
  {
    int32_t v4 = *(_DWORD *)(a1 + 20);
    if (BYTE8(v18)) {
      goto LABEL_14;
    }
  }
  else
  {
    int32_t v4 = *(unsigned __int16 *)(a1 + 16) >> 5;
    if (BYTE8(v18)) {
      goto LABEL_14;
    }
  }
  if (v2 >= 1)
  {
    if ((BYTE8(v18) & 2) != 0) {
      unint64_t v5 = (unint64_t)&v18 | 0xA;
    }
    else {
      unint64_t v5 = *((void *)&v19 + 1);
    }
    BOOL v6 = 0;
    if (icu::UnicodeString::indexOf(a1 + 8, v5, 0, v2, 0, v4) != -1) {
      goto LABEL_26;
    }
    unint64_t v3 = *(unsigned __int16 *)(a1 + 16);
  }
LABEL_14:
  if ((SWORD4(v14) & 0x8000u) == 0) {
    int32_t v7 = WORD4(v14) >> 5;
  }
  else {
    int32_t v7 = HIDWORD(v14);
  }
  if ((v3 & 0x8000) != 0) {
    int32_t v8 = *(_DWORD *)(a1 + 20);
  }
  else {
    int32_t v8 = (unsigned __int16)v3 >> 5;
  }
  BOOL v6 = 1;
  if ((BYTE8(v14) & 1) == 0 && v7 >= 1)
  {
    if ((BYTE8(v14) & 2) != 0) {
      unint64_t v9 = (unint64_t)&v14 | 0xA;
    }
    else {
      unint64_t v9 = *((void *)&v15 + 1);
    }
    BOOL v6 = icu::UnicodeString::indexOf(a1 + 8, v9, 0, v7, 0, v8) == -1;
  }
LABEL_26:
  icu::UnicodeString::~UnicodeString((void *)v3, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v18);
  return v6;
}

void *sub_18C9584AC(uint64_t a1, icu::UnicodeString *this)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 16);
  int v5 = (__int16)v4;
  unsigned int v6 = v4 >> 5;
  if (v5 >= 0) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = *(unsigned int *)(a1 + 20);
  }
  icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)(a1 + 8), 0, v7);
  __int16 v16 = 58;
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v16, 0, 1);
  __int16 v17 = 10;
  uint64_t result = (void *)icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v17, 0, 1);
  if (*(_DWORD *)(a1 + 80))
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(a1 + 72);
      if (v10) {
        uint64_t v11 = *(void *)(v10 + 8 * v9);
      }
      else {
        uint64_t v11 = 0;
      }
      sub_18C959CAC(v11, (uint64_t)this);
      __int16 v18 = 10;
      uint64_t result = (void *)icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v18, 0, 1);
      ++v9;
    }
    while (v9 < *(unsigned int *)(a1 + 80));
  }
  for (uint64_t i = 0; i != 6; ++i)
  {
    char v13 = *(void **)(a1 + 8 * i + 88);
    if (v13)
    {
      if ((unint64_t)(*v13 + 4) > 2)
      {
        sub_18C959CAC((uint64_t)v13, (uint64_t)this);
        __int16 v20 = 10;
        uint64_t result = (void *)icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v20, 0, 1);
      }
      else
      {
        unint64_t v14 = *(unsigned int *)(a1 + 152);
        if (v14)
        {
          for (unint64_t j = 0; j < v14; ++j)
          {
            uint64_t result = *(void **)(*(void *)(a1 + 144) + 8 * j);
            if (*result == *v13)
            {
              sub_18C959CAC((uint64_t)result, (uint64_t)this);
              __int16 v19 = 10;
              uint64_t result = (void *)icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v19, 0, 1);
              unint64_t v14 = *(unsigned int *)(a1 + 152);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_18C958640(uint64_t result, unsigned int a2)
{
  if (!result) {
    return 0;
  }
  uint64_t v2 = result;
  if (a2) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 1;
  }
  if (a2 >= 2)
  {
    do
    {
      v2 *= v2;
      if ((a2 & 2) != 0) {
        uint64_t v3 = v2;
      }
      else {
        uint64_t v3 = 1;
      }
      result *= v3;
      BOOL v4 = a2 > 3;
      a2 >>= 1;
    }
    while (v4);
  }
  return result;
}

unint64_t sub_18C958684(uint64_t a1, __int16 *a2, int a3, unsigned int a4, int a5)
{
  if (a4 <= 2) {
    unsigned int v5 = 2;
  }
  else {
    unsigned int v5 = a4;
  }
  if (v5 >= 0x24) {
    uint64_t v6 = 36;
  }
  else {
    uint64_t v6 = v5;
  }
  if (!a5 && a3 && a1 < 0 && v6 == 10)
  {
    a1 = -a1;
    *a2 = 45;
    uint64_t v7 = (char *)(a2 + 1);
    --a3;
  }
  else
  {
    if (!a1 && a3)
    {
      if (a5) {
        __int16 v8 = 0;
      }
      else {
        __int16 v8 = 48;
      }
      *a2 = v8;
      uint64_t v7 = (char *)(a2 + 1);
      if (a3 == 1) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    uint64_t v7 = (char *)a2;
  }
  BOOL v9 = a3 != 0;
  if (a3 && a1)
  {
    int v10 = a3 - 1;
    do
    {
      uint64_t v11 = a1 / v6;
      uint64_t v12 = a1 % v6;
      if (!a5) {
        LOWORD(v12) = a0123456789abcd_2[(int)v12];
      }
      *(_WORD *)uint64_t v7 = v12;
      v7 += 2;
      BOOL v13 = v10-- != 0;
      BOOL v9 = v13;
      if (!v13) {
        break;
      }
      a1 /= v6;
    }
    while (v11);
  }
  if (v9) {
LABEL_32:
  }
    *(_WORD *)uint64_t v7 = 0;
LABEL_33:
  unint64_t v14 = v7 - 2;
  if (v7 - 2 > (char *)&a2[*a2 == 45])
  {
    unint64_t v15 = (unint64_t)&a2[(*a2 == 45) + 1];
    do
    {
      __int16 v16 = *(_WORD *)v14;
      *(_WORD *)unint64_t v14 = *(_WORD *)(v15 - 2);
      v14 -= 2;
      *(_WORD *)(v15 - 2) = v16;
      BOOL v17 = (unint64_t)v14 > v15;
      v15 += 2;
    }
    while (v17);
  }
  return (unint64_t)(v7 - (char *)a2) >> 1;
}

uint64_t sub_18C958790(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    unint64_t v3 = *(unsigned int *)(a1 + 8);
    if (v3)
    {
      for (unint64_t i = 0; i < v3; ++i)
      {
        unsigned int v5 = *(void **)(*(void *)a1 + 8 * i);
        if (v5)
        {
          uint64_t v6 = sub_18C958F50(v5);
          icu::UMemory::operator delete(v6);
          unint64_t v3 = *(unsigned int *)(a1 + 8);
        }
      }
      uint64_t v2 = *(void **)a1;
    }
    uprv_free(v2);
  }
  return a1;
}

uint64_t sub_18C9587F4(uint64_t a1, uint64_t a2, UChar **a3, _DWORD *a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 10;
  uint64_t v7 = a1 + 16;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 16), a3);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 104) = 0;
  if (*(unsigned __int16 *)(a1 + 24) >= 0x20u) {
    sub_18C958864(a1, v7, a4);
  }
  return a1;
}

void *sub_18C958864(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *(unsigned __int16 *)(a2 + 8);
  int v7 = (__int16)v6;
  int32_t v8 = v6 >> 5;
  if (v7 >= 0) {
    int32_t v9 = v8;
  }
  else {
    int32_t v9 = *(_DWORD *)(a2 + 12);
  }
  uint64_t result = (void *)icu::UnicodeString::doIndexOf(a2, 0x3Au, 0, v9);
  if (result != -1)
  {
    uint64_t v11 = (uint64_t)result;
    long long v61 = 0u;
    long long v62 = 0u;
    uint64_t v64 = 0;
    long long v63 = 0u;
    int v60 = &unk_1EDA47700;
    LOWORD(v61) = 2;
    icu::UnicodeString::unBogus((uint64_t)&v60);
    if ((v61 & 0x8000u) == 0) {
      uint64_t v12 = (unsigned __int16)v61 >> 5;
    }
    else {
      uint64_t v12 = DWORD1(v61);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v60, 0, v12, (const icu::UnicodeString *)a2, 0, v11);
    uint64_t v13 = (int)v11 + 1;
    do
    {
      uint64_t v14 = v13;
      int v15 = *(__int16 *)(a2 + 8);
      if (v15 < 0)
      {
        int64_t v16 = *(int *)(a2 + 12);
        if (v13 >= v16) {
          break;
        }
      }
      else
      {
        if (v13 >= (uint64_t)((unint64_t)*(unsigned __int16 *)(a2 + 8) >> 5)) {
          break;
        }
        int64_t v16 = (unint64_t)*(unsigned __int16 *)(a2 + 8) >> 5;
      }
      if (v16 <= v13)
      {
        uint64_t v18 = 0xFFFFLL;
      }
      else
      {
        if ((v15 & 2) != 0) {
          uint64_t v17 = a2 + 10;
        }
        else {
          uint64_t v17 = *(void *)(a2 + 24);
        }
        uint64_t v18 = *(unsigned __int16 *)(v17 + 2 * v13);
      }
      ++v13;
    }
    while (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v18));
    icu::UnicodeString::doReplace(a2, 0, v14, 0, 0, 0);
    if ((v61 & 0x8000u) == 0) {
      uint64_t v19 = (unsigned __int16)v61 >> 5;
    }
    else {
      uint64_t v19 = DWORD1(v61);
    }
    if (v19)
    {
      __int16 v20 = (unsigned __int16 *)&v61 + 1;
      if ((v61 & 2) == 0) {
        __int16 v20 = (unsigned __int16 *)v62;
      }
      int v21 = *v20;
    }
    else
    {
      int v21 = 0xFFFF;
    }
    unsigned int v22 = v19 - 1;
    if ((v61 & 0x8000u) == 0) {
      unsigned int v23 = (unsigned __int16)v61 >> 5;
    }
    else {
      unsigned int v23 = DWORD1(v61);
    }
    if (v23 <= v22)
    {
      int v25 = 0xFFFF;
    }
    else
    {
      if ((v61 & 2) != 0) {
        uint64_t v24 = (char *)&v61 + 2;
      }
      else {
        uint64_t v24 = (char *)v62;
      }
      int v25 = *(unsigned __int16 *)&v24[2 * v22];
    }
    if ((v21 - 48) <= 9 && v25 != 120)
    {
      if ((int)v19 < 1)
      {
        LODWORD(v19) = 0;
        uint64_t v27 = 0;
        LODWORD(v30) = 32;
LABEL_64:
        sub_18C9596DC(a1, v27, (uint64_t)a3);
        goto LABEL_65;
      }
      unint64_t v26 = 0;
      uint64_t v27 = 0;
      while (1)
      {
        if ((v61 & 0x8000u) == 0) {
          unint64_t v28 = (unsigned __int16)v61 >> 5;
        }
        else {
          unint64_t v28 = DWORD1(v61);
        }
        if (v26 >= v28)
        {
          uint64_t v30 = 0xFFFFLL;
        }
        else
        {
          if ((v61 & 2) != 0) {
            unsigned int v29 = (char *)&v61 + 2;
          }
          else {
            unsigned int v29 = (char *)v62;
          }
          uint64_t v30 = *(unsigned __int16 *)&v29[2 * v26];
          uint64_t v31 = (v30 - 48);
          if (v31 <= 9)
          {
            uint64_t v27 = v31 + 10 * v27;
            goto LABEL_55;
          }
          if (v30 == 47 || v30 == 62)
          {
            sub_18C9596DC(a1, v27, (uint64_t)a3);
            if (v30 == 47)
            {
              unint64_t v44 = v26 + 1;
              if ((int)v44 >= (int)v19)
              {
                *(_DWORD *)(a1 + 8) = 0;
                LODWORD(v30) = 47;
                LODWORD(v19) = v44;
                goto LABEL_128;
              }
              int v45 = 0;
              while (2)
              {
                if ((v61 & 0x8000u) == 0) {
                  unint64_t v46 = (unsigned __int16)v61 >> 5;
                }
                else {
                  unint64_t v46 = DWORD1(v61);
                }
                if (v44 >= v46)
                {
                  uint64_t v30 = 0xFFFFLL;
                }
                else
                {
                  if ((v61 & 2) != 0) {
                    long long v47 = (char *)&v61 + 2;
                  }
                  else {
                    long long v47 = (char *)v62;
                  }
                  uint64_t v30 = *(unsigned __int16 *)&v47[2 * v44];
                  if ((v30 - 48) <= 9)
                  {
                    int v45 = v30 + 10 * v45 - 48;
                    goto LABEL_96;
                  }
                  if (v30 == 62)
                  {
                    LODWORD(v19) = v44;
LABEL_132:
                    *(_DWORD *)(a1 + 8) = v45;
                    if (v45)
                    {
LABEL_133:
                      *(_WORD *)(a1 + 12) = sub_18C9597AC(a1);
                      goto LABEL_65;
                    }
LABEL_128:
                    *a3 = 9;
                    goto LABEL_133;
                  }
                }
                BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v30);
                if ((v30 & 0xFFFFFFFD) != 0x2C && !isWhiteSpace) {
                  goto LABEL_98;
                }
LABEL_96:
                if (v19 == ++v44) {
                  goto LABEL_132;
                }
                continue;
              }
            }
            LODWORD(v19) = v26;
LABEL_65:
            if (v30 != 62) {
              goto LABEL_112;
            }
            uint64_t v34 = (unsigned __int16)v61;
            int64_t v36 = (unint64_t)(unsigned __int16)v61 >> 5;
            signed int v37 = DWORD1(v61);
            long long v38 = (char *)&v61 + 2;
            if ((v61 & 2) == 0) {
              long long v38 = (char *)v62;
            }
            int64_t v39 = (int)v19;
            if ((v61 & 0x8000) != 0) {
              goto LABEL_71;
            }
LABEL_69:
            unsigned int v40 = v36;
            if (v39 >= v36) {
              goto LABEL_112;
            }
            while (v40 > v39)
            {
              if (*(_WORD *)&v38[2 * v39] != 62) {
                break;
              }
              int v41 = *(__int16 *)(a1 + 12);
              BOOL v42 = __OFSUB__(v41, 1);
              int v43 = v41 - 1;
              if (v43 < 0 != v42) {
                break;
              }
              *(_WORD *)(a1 + 12) = v43;
              ++v39;
              if ((v34 & 0x8000) == 0) {
                goto LABEL_69;
              }
LABEL_71:
              unsigned int v40 = v37;
              if (v39 >= v37) {
                goto LABEL_112;
              }
            }
LABEL_98:
            *a3 = 9;
            return icu::UnicodeString::~UnicodeString((void *)9, (icu::UnicodeString *)&v60);
          }
        }
        BOOL v32 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v30);
        if ((v30 & 0xFFFFFFFD) != 0x2C && !v32) {
          goto LABEL_98;
        }
LABEL_55:
        if (v19 == ++v26) {
          goto LABEL_64;
        }
      }
    }
    int v33 = icu::UnicodeString::doCompare((uint64_t)&v60, 0, v23, (uint64_t)"-", 0, 2);
    int v57 = "-";
    uint64_t v34 = (uint64_t)&v57;
    if (!v33)
    {
      uint64_t v34 = -1;
      *(void *)a1 = -1;
      goto LABEL_112;
    }
    if (v19 != 3) {
      goto LABEL_112;
    }
    if (v21 == 48 && v25 == 120)
    {
      uint64_t v35 = -3;
LABEL_102:
      *(void *)a1 = v35;
      *(_DWORD *)(a1 + 8) = 10;
      *(_WORD *)(a1 + 12) = 0;
      if ((v61 & 0x8000u) == 0) {
        unsigned int v49 = (unsigned __int16)v61 >> 5;
      }
      else {
        unsigned int v49 = DWORD1(v61);
      }
      if (v49 < 2)
      {
        uint64_t v34 = 0xFFFFLL;
      }
      else
      {
        if ((v61 & 2) != 0) {
          long long v50 = (unsigned __int16 *)&v61 + 2;
        }
        else {
          long long v50 = (unsigned __int16 *)(v62 + 2);
        }
        uint64_t v34 = *v50;
      }
      *(_WORD *)(a1 + 14) = v34;
      goto LABEL_112;
    }
    if (v21 == 120 && v25 == 120)
    {
      uint64_t v35 = -2;
      goto LABEL_102;
    }
    if (v21 == 120 && v25 == 48)
    {
      uint64_t v35 = -4;
      goto LABEL_102;
    }
    int32_t v59 = "N";
    int v53 = sub_18C7EFDE8((uint64_t)&v60, (uint64_t *)&v59, 3);
    v56[1] = v59;
    if (v53)
    {
      uint64_t v58 = "I";
      int v54 = sub_18C7EFDE8((uint64_t)&v60, (uint64_t *)&v58, 3);
      v56[0] = v58;
      uint64_t v34 = (uint64_t)v56;
      if (v54) {
        goto LABEL_112;
      }
      uint64_t v55 = -5;
    }
    else
    {
      uint64_t v55 = -6;
    }
    *(void *)a1 = v55;
    uint64_t v34 = 10;
    *(_DWORD *)(a1 + 8) = 10;
    *(_WORD *)(a1 + 12) = 0;
LABEL_112:
    uint64_t result = icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)&v60);
  }
  unsigned int v51 = *(unsigned __int16 *)(a2 + 8);
  if (*(__int16 *)(a2 + 8) < 0)
  {
    if (*(int *)(a2 + 12) <= 0) {
      return result;
    }
  }
  else if (v51 < 0x20)
  {
    return result;
  }
  if ((v51 & 2) != 0) {
    int v52 = (_WORD *)(a2 + 10);
  }
  else {
    int v52 = *(_WORD **)(a2 + 24);
  }
  if (*v52 == 39) {
    return (void *)icu::UnicodeString::doReplace(a2, 0, 1, 0, 0, 0);
  }
  return result;
}

void *sub_18C958E84(void *a1)
{
  uint64_t v2 = a1[10];
  uint64_t v3 = a1[11];
  if (v2 != v3)
  {
    if (v3)
    {
      (*(void (**)(void))(*(void *)v3 + 8))(a1[11]);
      uint64_t v2 = a1[10];
    }
    a1[11] = 0;
  }
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  a1[10] = 0;
  uint64_t v4 = a1[13];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[13] = 0;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 2));
  return a1;
}

void sub_18C958F54(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  int v54 = (uint64_t *)*MEMORY[0x1E4F143B8];
  uint64_t v12 = icu::UMemory::operator new(v54, (icu::UMemory *)0x70, a2);
  if (!v12)
  {
    *a6 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }
  uint64_t v13 = (uint64_t)v12;
  uint64_t v14 = sub_18C9587F4((uint64_t)v12, a4, (UChar **)a1, a6);
  icu::UnicodeString::operator=((UChar **)a1, (UChar **)(v14 + 16));
  unsigned int v15 = *(unsigned __int16 *)(a1 + 8);
  int v16 = (__int16)v15;
  int32_t v17 = v15 >> 5;
  if (v16 >= 0) {
    int32_t v18 = v17;
  }
  else {
    int32_t v18 = *(_DWORD *)(a1 + 12);
  }
  uint64_t v19 = icu::UnicodeString::doIndexOf(a1, 0x5Bu, 0, v18);
  if ((v19 & 0x80000000) == 0)
  {
    uint64_t v20 = v19;
    unsigned int v21 = *(unsigned __int16 *)(a1 + 8);
    int v22 = (__int16)v21;
    unsigned int v23 = v21 >> 5;
    int32_t v24 = v22 >= 0 ? v23 : *(_DWORD *)(a1 + 12);
    int v25 = icu::UnicodeString::doIndexOf(a1, 0x5Du, 0, v24);
    if ((v25 & 0x80000000) == 0)
    {
      int v27 = v25;
      if ((int)v20 <= v25)
      {
        uint64_t v28 = *(void *)v13;
        int v29 = *(uint64_t *)v13 >= 1 ? -7 : *(void *)v13;
        unsigned int v30 = v29 + 6;
        BOOL v31 = v30 > 5;
        int v32 = (1 << v30) & 0x2B;
        if (v31 || v32 == 0)
        {
          long long v50 = 0u;
          long long v51 = 0u;
          uint64_t v53 = 0;
          long long v52 = 0u;
          unsigned int v49 = (UChar *)&unk_1EDA47700;
          LOWORD(v50) = 2;
          if (v28 >= 1)
          {
            unint64_t v34 = v28 % (unint64_t)sub_18C958640(*(unsigned int *)(v13 + 8), *(unsigned __int16 *)(v13 + 12));
            if (!v34) {
              goto LABEL_30;
            }
            uint64_t v28 = *(void *)v13;
          }
          if (v28 >= 1) {
            int v35 = -7;
          }
          else {
            int v35 = v28;
          }
          unint64_t v34 = v35 | 2u;
          if (v34 != -2)
          {
            uint64_t v37 = 0;
            int v41 = v27 + 1;
            goto LABEL_47;
          }
LABEL_30:
          int64_t v36 = icu::UMemory::operator new((uint64_t *)v34, (icu::UMemory *)0x70, v26);
          if (!v36)
          {
            *a6 = U_MEMORY_ALLOCATION_ERROR;
            icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)&v49);
            return;
          }
          uint64_t v37 = (uint64_t)v36;
          long long v47 = (UChar *)&unk_1EDA47700;
          __int16 v48 = 2;
          sub_18C9587F4((uint64_t)v36, a4, &v47, a6);
          icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v47);
          uint64_t v39 = *(void *)v13;
          if ((*(void *)v13 & 0x8000000000000000) != 0)
          {
            if (v39 != -4)
            {
              if (v39 == -2) {
                *(void *)uint64_t v37 = -3;
              }
LABEL_41:
              *(_DWORD *)(v37 + 8) = *(_DWORD *)(v13 + 8);
              *(_WORD *)(v37 + 12) = *(_WORD *)(v13 + 12);
              icu::UnicodeString::doAppend((uint64_t)&v49, (const icu::UnicodeString *)a1, 0, v20);
              int v41 = v27 + 1;
              unsigned int v42 = *(unsigned __int16 *)(a1 + 8);
              if ((v42 & 0x8000) != 0)
              {
                int v43 = *(_DWORD *)(a1 + 12);
                if (v41 < v43) {
                  goto LABEL_45;
                }
              }
              else if (v41 < v42 >> 5)
              {
                int v43 = v42 >> 5;
LABEL_45:
                icu::UnicodeString::doAppend((uint64_t)&v49, (const icu::UnicodeString *)a1, v27 + 1, (v43 + ~v27));
              }
              sub_18C959344(v37, a2, &v49, a3, a6);
LABEL_47:
              sub_18C9215F8((uint64_t)&v49, (const icu::UnicodeString *)a1, 0, v20);
              icu::UnicodeString::doAppend((uint64_t)&v49, (const icu::UnicodeString *)a1, v20 + 1, (v27 + ~v20));
              unsigned int v44 = *(unsigned __int16 *)(a1 + 8);
              if ((v44 & 0x8000) != 0)
              {
                int v45 = *(_DWORD *)(a1 + 12);
                if (v41 < v45) {
                  goto LABEL_51;
                }
              }
              else if (v41 < v44 >> 5)
              {
                int v45 = v44 >> 5;
LABEL_51:
                icu::UnicodeString::doAppend((uint64_t)&v49, (const icu::UnicodeString *)a1, v41, (v45 + ~v27));
              }
              sub_18C959344(v13, a2, &v49, a3, a6);
              if (v37)
              {
                if ((*(void *)v37 & 0x8000000000000000) != 0) {
                  sub_18C95758C((void *)a2, (void *)v37);
                }
                else {
                  sub_18C957768(a5, v37);
                }
              }
              icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v49);
              goto LABEL_19;
            }
            *(void *)uint64_t v37 = v39;
            uint64_t v40 = -2;
          }
          else
          {
            *(void *)uint64_t v37 = v39;
            if (*(unsigned char *)(a2 + 160)) {
              goto LABEL_41;
            }
            uint64_t v40 = *(void *)v13 + 1;
          }
          *(void *)uint64_t v13 = v40;
          goto LABEL_41;
        }
      }
    }
  }
  sub_18C959344(v13, a2, (UChar **)a1, a3, a6);
LABEL_19:
  if ((*(void *)v13 & 0x8000000000000000) != 0) {
    sub_18C95758C((void *)a2, (void *)v13);
  }
  else {
    sub_18C957768(a5, v13);
  }
}

uint64_t sub_18C959344(uint64_t result, uint64_t a2, UChar **a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    uint64_t v8 = result;
    int32_t v9 = (icu::UnicodeString *)(result + 16);
    icu::UnicodeString::operator=((UChar **)(result + 16), a3);
    int v10 = sub_18C959830(v8, a2, a4, a5);
    *(void *)(v8 + 80) = v10;
    if (v10) {
      int v10 = sub_18C959830(v8, a2, a4, a5);
    }
    *(void *)(v8 + 88) = v10;
    unsigned int v11 = *(unsigned __int16 *)(v8 + 24);
    if ((v11 & 0x8000) != 0)
    {
      int v13 = *(_DWORD *)(v8 + 28);
      int v12 = v13 & (v13 >> 31);
    }
    else
    {
      int v12 = 0;
      int v13 = v11 >> 5;
    }
    uint64_t result = icu::UnicodeString::indexOf((uint64_t)v9, (uint64_t)"$", 0, -1, v12, v13 - v12);
    if ((result & 0x80000000) == 0)
    {
      int v14 = result;
      if (*(__int16 *)(v8 + 24) < 0)
      {
        int v15 = *(_DWORD *)(v8 + 28);
        int v16 = v15 >= (int)result ? result : *(_DWORD *)(v8 + 28);
      }
      else
      {
        int v15 = *(unsigned __int16 *)(v8 + 24) >> 5;
        int v16 = v15 >= result ? result : *(unsigned __int16 *)(v8 + 24) >> 5;
      }
      uint64_t result = icu::UnicodeString::indexOf((uint64_t)v9, (uint64_t)L")$", 0, -1, v16, v15 - v16);
      if ((result & 0x80000000) == 0)
      {
        int v17 = result;
        if (*(__int16 *)(v8 + 24) < 0)
        {
          int v18 = *(_DWORD *)(v8 + 28);
          if (v18 >= v14) {
            int v19 = v14;
          }
          else {
            int v19 = *(_DWORD *)(v8 + 28);
          }
        }
        else
        {
          int v18 = *(unsigned __int16 *)(v8 + 24) >> 5;
          if (v18 >= v14) {
            int v19 = v14;
          }
          else {
            int v19 = *(unsigned __int16 *)(v8 + 24) >> 5;
          }
        }
        uint64_t result = icu::UnicodeString::doIndexOf((uint64_t)v9, 0x2Cu, v19, v18 - v19);
        if ((result & 0x80000000) != 0)
        {
          *a5 = U_PARSE_ERROR;
          return result;
        }
        int v20 = result;
        memset(v47, 0, sizeof(v47));
        icu::UnicodeString::tempSubString(v9, v14 + 2, result - v14 - 2, (icu::UnicodeString *)v47);
        int v41 = "c";
        icu::UnicodeString::UnicodeString(v42, 1, &v41);
        unint64_t v21 = v43;
        if ((v43 & 0x8000u) == 0) {
          int32_t v22 = v43 >> 5;
        }
        else {
          int32_t v22 = v45;
        }
        if (v43)
        {
          unint64_t v21 = BYTE8(v47[0]);
          int v26 = BYTE8(v47[0]) & 1;
          goto LABEL_42;
        }
        int v23 = v22 & (v22 >> 31);
        if (v22 < 0)
        {
          int32_t v24 = 0;
        }
        else
        {
          int32_t v24 = v22 - v23;
          int32_t v25 = v22;
          if (v22 - v23 >= v22)
          {
LABEL_36:
            if (BYTE8(v47[0]))
            {
              int v26 = 0;
            }
            else
            {
              if ((v43 & 2) != 0) {
                int v27 = v44;
              }
              else {
                int v27 = v46;
              }
              int v26 = icu::UnicodeString::doEqualsSubstring((uint64_t)v47, 0, v22, (uint64_t)v27, v23, v25);
            }
LABEL_42:
            icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)v42);
            v39[1] = v41;
            if (v26)
            {
              unint64_t v28 = 0;
              goto LABEL_61;
            }
            uint64_t v40 = L"ordinal";
            icu::UnicodeString::UnicodeString(v42, 1, &v40);
            unint64_t v29 = v43;
            if ((v43 & 0x8000u) == 0) {
              int32_t v30 = v43 >> 5;
            }
            else {
              int32_t v30 = v45;
            }
            if (v43)
            {
              unint64_t v29 = BYTE8(v47[0]);
              int v34 = BYTE8(v47[0]) & 1;
              goto LABEL_60;
            }
            int v31 = v30 & (v30 >> 31);
            if (v30 < 0)
            {
              int32_t v32 = 0;
            }
            else
            {
              int32_t v32 = v30 - v31;
              int32_t v33 = v30;
              if (v30 - v31 >= v30)
              {
LABEL_54:
                if (BYTE8(v47[0]))
                {
                  int v34 = 0;
                }
                else
                {
                  if ((v43 & 2) != 0) {
                    int v35 = v44;
                  }
                  else {
                    int v35 = v46;
                  }
                  int v34 = icu::UnicodeString::doEqualsSubstring((uint64_t)v47, 0, v30, (uint64_t)v35, v31, v33);
                }
LABEL_60:
                icu::UnicodeString::~UnicodeString((void *)v29, (icu::UnicodeString *)v42);
                v39[0] = v40;
                int64_t v36 = v39;
                unint64_t v28 = 1;
                if (!v34)
                {
                  *a5 = U_ILLEGAL_ARGUMENT_ERROR;
                  return (uint64_t)icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v47);
                }
LABEL_61:
                uint64_t v37 = *(void *)(v8 + 96);
                icu::UnicodeString::tempSubString(v9, v20 + 1, v17 + ~v20, (icu::UnicodeString *)v42);
                *(void *)(v8 + 104) = icu::RuleBasedNumberFormat::createPluralFormat(v37, v28, (uint64_t)v42, a5);
                icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v42);
                return (uint64_t)icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v47);
              }
            }
            int32_t v33 = v32;
            goto LABEL_54;
          }
        }
        int32_t v25 = v24;
        goto LABEL_36;
      }
    }
  }
  return result;
}

uint64_t sub_18C9596DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = 10;
  if (a2 < 1)
  {
    *(_WORD *)(result + 12) = 0;
  }
  else
  {
    uint64_t v5 = sub_18C9597AC(result);
    *(_WORD *)(v3 + 12) = v5;
    uint64_t v6 = *(void *)(v3 + 80);
    if (v6) {
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, *(unsigned int *)(v3 + 8), v5, a3);
    }
    uint64_t result = *(void *)(v3 + 88);
    if (result)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 32);
      return v7();
    }
  }
  return result;
}

uint64_t sub_18C9597AC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1)
  {
    if (*(uint64_t *)a1 < 1)
    {
      LOWORD(v1) = 0;
    }
    else
    {
      double v3 = uprv_log((double)*(uint64_t *)a1);
      int v4 = (int)(v3 / uprv_log((double)*(int *)(a1 + 8)));
      if (sub_18C958640(*(unsigned int *)(a1 + 8), (unsigned __int16)(v4 + 1)) > *(void *)a1) {
        LOWORD(v1) = v4;
      }
      else {
        LOWORD(v1) = v4 + 1;
      }
    }
  }
  return (__int16)v1;
}

uint64_t *sub_18C959830(uint64_t a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_18C959AC8(a1);
  if (v8 == -1) {
    return 0;
  }
  uint64_t v9 = v8;
  if (*(__int16 *)(a1 + 24) < 0)
  {
    int v11 = *(_DWORD *)(a1 + 28);
    int v10 = v11 & (v11 >> 31);
  }
  else
  {
    int v10 = 0;
    int v11 = *(unsigned __int16 *)(a1 + 24) >> 5;
  }
  if (icu::UnicodeString::indexOf(a1 + 16, (uint64_t)">", 0, 3, v10, v11 - v10) == v8)
  {
    signed int v12 = v9 + 2;
  }
  else
  {
    unsigned int v14 = *(unsigned __int16 *)(a1 + 24);
    if (*(__int16 *)(a1 + 24) < 0) {
      unsigned int v15 = *(_DWORD *)(a1 + 28);
    }
    else {
      unsigned int v15 = v14 >> 5;
    }
    if (v15 <= v9)
    {
      int v17 = 0xFFFF;
    }
    else
    {
      if ((v14 & 2) != 0) {
        uint64_t v16 = a1 + 26;
      }
      else {
        uint64_t v16 = *(void *)(a1 + 40);
      }
      int v17 = *(unsigned __int16 *)(v16 + 2 * (int)v9);
    }
    if ((int)v9 >= -1)
    {
      int v20 = v9 + 1;
      if ((v14 & 0x8000) != 0)
      {
        int v19 = *(_DWORD *)(a1 + 28);
        if (v19 >= v20) {
          int v18 = v9 + 1;
        }
        else {
          int v18 = *(_DWORD *)(a1 + 28);
        }
      }
      else
      {
        int v19 = v14 >> 5;
        if (v19 >= v20) {
          int v18 = v9 + 1;
        }
        else {
          int v18 = v19;
        }
      }
    }
    else
    {
      int v18 = 0;
      if ((v14 & 0x8000) != 0) {
        int v19 = *(_DWORD *)(a1 + 28);
      }
      else {
        int v19 = v14 >> 5;
      }
    }
    signed int v12 = icu::UnicodeString::doIndexOf(a1 + 16, v17, v18, v19 - v18);
    if (v17 == 60 && v12 != -1)
    {
      unsigned int v21 = *(unsigned __int16 *)(a1 + 24);
      if (*(__int16 *)(a1 + 24) < 0) {
        unsigned int v22 = *(_DWORD *)(a1 + 28);
      }
      else {
        unsigned int v22 = v21 >> 5;
      }
      if (v12 < (int)(v22 - 1) && v22 > v12 + 1)
      {
        uint64_t v23 = (v21 & 2) != 0 ? a1 + 26 : *(void *)(a1 + 40);
        if (*(_WORD *)(v23 + 2 * (v12 + 1)) == 60) {
          ++v12;
        }
      }
      goto LABEL_41;
    }
  }
  if (v12 == -1) {
    return 0;
  }
LABEL_41:
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v32 = 0;
  long long v31 = 0u;
  unint64_t v28 = &unk_1EDA47700;
  LOWORD(v29) = 2;
  uint64_t v24 = (v12 - v9 + 1);
  icu::UnicodeString::unBogus((uint64_t)&v28);
  if ((v29 & 0x8000u) == 0) {
    uint64_t v25 = (unsigned __int16)v29 >> 5;
  }
  else {
    uint64_t v25 = DWORD1(v29);
  }
  icu::UnicodeString::doReplace((icu::UnicodeString *)&v28, 0, v25, (const icu::UnicodeString *)(a1 + 16), v9, v24);
  int v13 = sub_18C95C0F4(v9, (uint64_t **)a1, a3, a2, *(void *)(a1 + 96), (uint64_t)&v28, a4);
  icu::UnicodeString::doReplace(a1 + 16, v9, v24, 0, 0, 0);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v28);
  return v13;
}

uint64_t sub_18C959AC8(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 16;
  LODWORD(v4) = -1;
  do
  {
    if (*(__int16 *)(a1 + 24) < 0) {
      int32_t v5 = *(_DWORD *)(a1 + 28);
    }
    else {
      int32_t v5 = *(unsigned __int16 *)(a1 + 24) >> 5;
    }
    int v6 = icu::UnicodeString::doIndexOf(v3, *(_WORD *)(&off_1E550CEE8)[v2], 0, v5);
    if (v6 < (int)v4 || v4 == -1) {
      unsigned int v8 = v6;
    }
    else {
      unsigned int v8 = v4;
    }
    if (v6 == -1) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v8;
    }
    ++v2;
  }
  while (v2 != 11);
  return v4;
}

uint64_t sub_18C959B60(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 12) != *(unsigned __int16 *)(a2 + 12))
  {
    return 0;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 24);
  if (v4)
  {
    if ((*(_WORD *)(a2 + 24) & 1) == 0) {
      return 0;
    }
LABEL_16:
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v10 = *(void *)(a2 + 80);
    if (v9)
    {
      if (!v10) {
        return 0;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
      if (!result) {
        return result;
      }
    }
    else if (v10)
    {
      return 0;
    }
    uint64_t v11 = *(void *)(a1 + 88);
    uint64_t v12 = *(void *)(a2 + 88);
    if (v11)
    {
      if (v12)
      {
        int v13 = *(uint64_t (**)(void))(*(void *)v11 + 24);
        return v13();
      }
    }
    else if (!v12)
    {
      return 1;
    }
    return 0;
  }
  if ((v4 & 0x8000) != 0) {
    int v5 = *(_DWORD *)(a1 + 28);
  }
  else {
    int v5 = v4 >> 5;
  }
  uint64_t result = 0;
  unsigned int v7 = *(unsigned __int16 *)(a2 + 24);
  if ((v7 & 0x8000u) == 0) {
    unsigned int v8 = v7 >> 5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a2 + 28);
  }
  if ((v7 & 1) == 0 && v5 == v8)
  {
    uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 16), (const icu::UnicodeString *)(a2 + 16), v5);
    if (result) {
      goto LABEL_16;
    }
  }
  return result;
}

void *sub_18C959CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*(uint64_t *)a1 >= 1) {
    int v4 = -7;
  }
  else {
    int v4 = *(void *)a1;
  }
  switch(v4)
  {
    case -6:
      icu::UnicodeString::doAppend(a2, (uint64_t)"N", 0, 3);
      break;
    case -5:
      icu::UnicodeString::doAppend(a2, (uint64_t)"I", 0, 3);
      break;
    case -4:
      LOWORD(v31) = 120;
      uint64_t v6 = icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
      __int16 v7 = *(_WORD *)(a1 + 14);
      if (!v7) {
        __int16 v7 = 46;
      }
      LOWORD(v31) = v7;
      uint64_t v8 = icu::UnicodeString::doAppend(v6, (uint64_t)&v31, 0, 1);
      __int16 v9 = 48;
      goto LABEL_18;
    case -3:
      LOWORD(v31) = 48;
      uint64_t v10 = icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
      __int16 v11 = *(_WORD *)(a1 + 14);
      if (!v11) {
        __int16 v11 = 46;
      }
      LOWORD(v31) = v11;
      uint64_t v8 = icu::UnicodeString::doAppend(v10, (uint64_t)&v31, 0, 1);
      __int16 v9 = 120;
LABEL_18:
      LOWORD(v31) = v9;
      goto LABEL_22;
    case -2:
      LOWORD(v31) = 120;
      uint64_t v12 = icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
      __int16 v13 = *(_WORD *)(a1 + 14);
      if (!v13) {
        __int16 v13 = 46;
      }
      LOWORD(v31) = v13;
      uint64_t v8 = icu::UnicodeString::doAppend(v12, (uint64_t)&v31, 0, 1);
      LOWORD(v31) = 120;
LABEL_22:
      icu::UnicodeString::doAppend(v8, (uint64_t)&v31, 0, 1);
      break;
    case -1:
      icu::UnicodeString::doAppend(a2, (uint64_t)"-", 0, 2);
      break;
    default:
      sub_18C95A178(a2, *(void *)a1);
      if (*(_DWORD *)(a1 + 8) != 10)
      {
        LOWORD(v31) = 47;
        icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
        sub_18C95A178(a2, *(int *)(a1 + 8));
      }
      int v5 = sub_18C9597AC(a1) - *(__int16 *)(a1 + 12);
      if (v5 >= 1)
      {
        do
        {
          LOWORD(v31) = 62;
          icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
          --v5;
        }
        while (v5);
      }
      break;
  }
  LOWORD(v31) = 58;
  icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
  LOWORD(v31) = 32;
  icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
  unsigned int v14 = *(unsigned __int16 *)(a1 + 24);
  if (*(__int16 *)(a1 + 24) < 0)
  {
    if (!*(_DWORD *)(a1 + 28)) {
      goto LABEL_35;
    }
  }
  else if (!(v14 >> 5))
  {
    goto LABEL_35;
  }
  if ((v14 & 2) != 0) {
    unsigned int v15 = (_WORD *)(a1 + 26);
  }
  else {
    unsigned int v15 = *(_WORD **)(a1 + 40);
  }
  if (*v15 == 32)
  {
    uint64_t v16 = *(void *)(a1 + 80);
    if (!v16 || *(_DWORD *)(v16 + 8))
    {
      LOWORD(v31) = 39;
      icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
    }
  }
LABEL_35:
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v35 = 0;
  long long v34 = 0u;
  long long v31 = (UChar *)&unk_1EDA47700;
  LOWORD(v32) = 2;
  icu::UnicodeString::copyFrom(&v31, (UChar **)(a1 + 16), 0);
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v30 = 0;
  long long v29 = 0u;
  int v26 = &unk_1EDA47700;
  LOWORD(v27) = 2;
  uint64_t v17 = *(void *)(a1 + 88);
  if (v17)
  {
    (*(void (**)(uint64_t, void **))(*(void *)v17 + 40))(v17, &v26);
    if ((v27 & 0x8000u) == 0) {
      uint64_t v18 = (unsigned __int16)v27 >> 5;
    }
    else {
      uint64_t v18 = DWORD1(v27);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v31, *(unsigned int *)(*(void *)(a1 + 88) + 8), 0, (const icu::UnicodeString *)&v26, 0, v18);
  }
  uint64_t v19 = *(void *)(a1 + 80);
  if (v19)
  {
    (*(void (**)(uint64_t, void **))(*(void *)v19 + 40))(v19, &v26);
    if ((v27 & 0x8000u) == 0) {
      uint64_t v20 = (unsigned __int16)v27 >> 5;
    }
    else {
      uint64_t v20 = DWORD1(v27);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v31, *(unsigned int *)(*(void *)(a1 + 80) + 8), 0, (const icu::UnicodeString *)&v26, 0, v20);
  }
  if ((v32 & 0x8000u) == 0) {
    uint64_t v21 = (unsigned __int16)v32 >> 5;
  }
  else {
    uint64_t v21 = DWORD1(v32);
  }
  icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v31, 0, v21);
  __int16 v25 = 59;
  icu::UnicodeString::doAppend(a2, (uint64_t)&v25, 0, 1);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v26);
  return icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v31);
}

void *sub_18C95A178(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(v8, 0, sizeof(v8));
  unint64_t v3 = sub_18C958684(a2, (__int16 *)v8, 512, 0xAu, 0);
  memset(v7, 0, sizeof(v7));
  icu::UnicodeString::UnicodeString((uint64_t)v7, (uint64_t)v8, v3);
  if ((SWORD4(v7[0]) & 0x8000u) == 0) {
    uint64_t v4 = WORD4(v7[0]) >> 5;
  }
  else {
    uint64_t v4 = HIDWORD(v7[0]);
  }
  icu::UnicodeString::doAppend(a1, (const icu::UnicodeString *)v7, 0, v4);
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
}

uint64_t sub_18C95A278(uint64_t a1)
{
  return sub_18C958640(*(unsigned int *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
}

_DWORD *sub_18C95A288(uint64_t a1, unint64_t a2, icu::UnicodeString *this, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (const icu::UnicodeString *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 104);
  if (*(__int16 *)(a1 + 24) < 0)
  {
    uint64_t v14 = *(unsigned int *)(a1 + 28);
    if (v13)
    {
      int v15 = v14 & ((int)v14 >> 31);
      goto LABEL_6;
    }
LABEL_11:
    icu::UnicodeString::doReplace(this, a4, 0, v12, 0, v14);
    unsigned int v20 = 0;
    goto LABEL_43;
  }
  uint64_t v14 = *(unsigned __int16 *)(a1 + 24) >> 5;
  if (!v13) {
    goto LABEL_11;
  }
  int v15 = 0;
LABEL_6:
  int v16 = icu::UnicodeString::indexOf(a1 + 16, (uint64_t)"$", 0, -1, v15, (int)v14 - v15);
  LODWORD(v14) = v16;
  unsigned int v17 = *(unsigned __int16 *)(a1 + 24);
  if (v16 < 0)
  {
    int v19 = 0;
    if ((v17 & 0x8000) != 0) {
      int v18 = *(_DWORD *)(a1 + 28);
    }
    else {
      int v18 = v17 >> 5;
    }
  }
  else if ((v17 & 0x8000) != 0)
  {
    int v18 = *(_DWORD *)(a1 + 28);
    if (v18 >= v16) {
      int v19 = v16;
    }
    else {
      int v19 = *(_DWORD *)(a1 + 28);
    }
  }
  else
  {
    int v18 = v17 >> 5;
    if (v18 >= v16) {
      int v19 = v16;
    }
    else {
      int v19 = v18;
    }
  }
  int v21 = icu::UnicodeString::indexOf((uint64_t)v12, (uint64_t)L")$", 0, -1, v19, v18 - v19);
  unsigned int v22 = *((unsigned __int16 *)this + 4);
  int v23 = (__int16)v22;
  unsigned int v24 = v22 >> 5;
  if (v23 >= 0) {
    unsigned int v25 = v24;
  }
  else {
    unsigned int v25 = *((_DWORD *)this + 3);
  }
  unsigned int v26 = *(unsigned __int16 *)(a1 + 24);
  if ((v26 & 0x8000) != 0) {
    unsigned int v27 = *(_DWORD *)(a1 + 28);
  }
  else {
    unsigned int v27 = v26 >> 5;
  }
  if (v21 < (int)(v27 - 1))
  {
    icu::UnicodeString::tempSubString(v12, v21 + 2, 0x7FFFFFFF, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0) {
      uint64_t v28 = v45 >> 5;
    }
    else {
      uint64_t v28 = v46;
    }
    icu::UnicodeString::doReplace(this, a4, 0, (const icu::UnicodeString *)v44, 0, v28);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v44);
  }
  uint64_t v30 = *(icu::PluralFormat **)(a1 + 104);
  unint64_t v31 = sub_18C958640(*(unsigned int *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
  icu::PluralFormat::format(v30, a6, a2 / v31, (icu::UnicodeString *)v44);
  if ((v45 & 0x8000u) == 0) {
    uint64_t v32 = v45 >> 5;
  }
  else {
    uint64_t v32 = v46;
  }
  icu::UnicodeString::doReplace(this, a4, 0, (const icu::UnicodeString *)v44, 0, v32);
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v44);
  if ((int)v14 >= 1)
  {
    icu::UnicodeString::tempSubString(v12, 0, v14, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0) {
      uint64_t v34 = v45 >> 5;
    }
    else {
      uint64_t v34 = v46;
    }
    icu::UnicodeString::doReplace(this, a4, 0, (const icu::UnicodeString *)v44, 0, v34);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v44);
  }
  if (*(__int16 *)(a1 + 24) < 0) {
    int v36 = *(_DWORD *)(a1 + 28);
  }
  else {
    int v36 = *(unsigned __int16 *)(a1 + 24) >> 5;
  }
  unsigned int v37 = *((unsigned __int16 *)this + 4);
  int v38 = (__int16)v37;
  unsigned int v39 = v37 >> 5;
  if (v38 < 0) {
    unsigned int v39 = *((_DWORD *)this + 3);
  }
  unsigned int v20 = v36 + v25 - v39;
LABEL_43:
  uint64_t v40 = *(_DWORD **)(a1 + 88);
  if (v40)
  {
    if (v40[2] <= (int)v14) {
      unsigned int v41 = 0;
    }
    else {
      unsigned int v41 = v20;
    }
    (*(void (**)(_DWORD *, unint64_t, icu::UnicodeString *, void, uint64_t, UErrorCode *))(*(void *)v40 + 48))(v40, a2, this, a4 - v41, a5, a6);
  }
  uint64_t result = *(_DWORD **)(a1 + 80);
  if (result)
  {
    if (result[2] <= (int)v14) {
      unsigned int v43 = 0;
    }
    else {
      unsigned int v43 = v20;
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, unint64_t, icu::UnicodeString *, void, uint64_t, UErrorCode *))(*(void *)result + 48))(result, a2, this, a4 - v43, a5, a6);
  }
  return result;
}

_DWORD *sub_18C95A5E4(uint64_t a1, icu::UnicodeString *this, uint64_t a3, uint64_t a4, UErrorCode *a5, double a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (const icu::UnicodeString *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 104);
  if (*(__int16 *)(a1 + 24) < 0)
  {
    uint64_t v14 = *(unsigned int *)(a1 + 28);
    if (v13)
    {
      int v15 = v14 & ((int)v14 >> 31);
      goto LABEL_6;
    }
LABEL_11:
    icu::UnicodeString::doReplace(this, a3, 0, v12, 0, v14);
    unsigned int v20 = 0;
    goto LABEL_47;
  }
  uint64_t v14 = *(unsigned __int16 *)(a1 + 24) >> 5;
  if (!v13) {
    goto LABEL_11;
  }
  int v15 = 0;
LABEL_6:
  int v16 = icu::UnicodeString::indexOf(a1 + 16, (uint64_t)"$", 0, -1, v15, (int)v14 - v15);
  LODWORD(v14) = v16;
  unsigned int v17 = *(unsigned __int16 *)(a1 + 24);
  if (v16 < 0)
  {
    int v19 = 0;
    if ((v17 & 0x8000) != 0) {
      int v18 = *(_DWORD *)(a1 + 28);
    }
    else {
      int v18 = v17 >> 5;
    }
  }
  else if ((v17 & 0x8000) != 0)
  {
    int v18 = *(_DWORD *)(a1 + 28);
    if (v18 >= v16) {
      int v19 = v16;
    }
    else {
      int v19 = *(_DWORD *)(a1 + 28);
    }
  }
  else
  {
    int v18 = v17 >> 5;
    if (v18 >= v16) {
      int v19 = v16;
    }
    else {
      int v19 = v18;
    }
  }
  int v21 = icu::UnicodeString::indexOf((uint64_t)v12, (uint64_t)L")$", 0, -1, v19, v18 - v19);
  unsigned int v22 = *((unsigned __int16 *)this + 4);
  int v23 = (__int16)v22;
  unsigned int v24 = v22 >> 5;
  if (v23 >= 0) {
    unsigned int v25 = v24;
  }
  else {
    unsigned int v25 = *((_DWORD *)this + 3);
  }
  unsigned int v26 = *(unsigned __int16 *)(a1 + 24);
  if ((v26 & 0x8000) != 0) {
    unsigned int v27 = *(_DWORD *)(a1 + 28);
  }
  else {
    unsigned int v27 = v26 >> 5;
  }
  if (v21 < (int)(v27 - 1))
  {
    icu::UnicodeString::tempSubString(v12, v21 + 2, 0x7FFFFFFF, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0) {
      uint64_t v28 = v45 >> 5;
    }
    else {
      uint64_t v28 = v46;
    }
    icu::UnicodeString::doReplace(this, a3, 0, (const icu::UnicodeString *)v44, 0, v28);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v44);
  }
  double v30 = (double)(unint64_t)sub_18C958640(*(unsigned int *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
  if (a6 < 0.0 || a6 >= 1.0) {
    double v31 = a6 / v30;
  }
  else {
    double v31 = uprv_round(v30 * a6);
  }
  icu::PluralFormat::format(*(icu::PluralFormat **)(a1 + 104), a5, (int)v31, (icu::UnicodeString *)v44);
  if ((v45 & 0x8000u) == 0) {
    uint64_t v32 = v45 >> 5;
  }
  else {
    uint64_t v32 = v46;
  }
  icu::UnicodeString::doReplace(this, a3, 0, (const icu::UnicodeString *)v44, 0, v32);
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v44);
  if ((int)v14 >= 1)
  {
    icu::UnicodeString::tempSubString(v12, 0, v14, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0) {
      uint64_t v34 = v45 >> 5;
    }
    else {
      uint64_t v34 = v46;
    }
    icu::UnicodeString::doReplace(this, a3, 0, (const icu::UnicodeString *)v44, 0, v34);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v44);
  }
  if (*(__int16 *)(a1 + 24) < 0) {
    int v36 = *(_DWORD *)(a1 + 28);
  }
  else {
    int v36 = *(unsigned __int16 *)(a1 + 24) >> 5;
  }
  unsigned int v37 = *((unsigned __int16 *)this + 4);
  int v38 = (__int16)v37;
  unsigned int v39 = v37 >> 5;
  if (v38 < 0) {
    unsigned int v39 = *((_DWORD *)this + 3);
  }
  unsigned int v20 = v36 + v25 - v39;
LABEL_47:
  uint64_t v40 = *(_DWORD **)(a1 + 88);
  if (v40)
  {
    if (v40[2] <= (int)v14) {
      unsigned int v41 = 0;
    }
    else {
      unsigned int v41 = v20;
    }
    (*(void (**)(_DWORD *, icu::UnicodeString *, void, uint64_t, UErrorCode *, double))(*(void *)v40 + 56))(v40, this, a3 - v41, a4, a5, a6);
  }
  uint64_t result = *(_DWORD **)(a1 + 80);
  if (result)
  {
    if (result[2] <= (int)v14) {
      unsigned int v43 = 0;
    }
    else {
      unsigned int v43 = v20;
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, icu::UnicodeString *, void, uint64_t, UErrorCode *, double))(*(void *)result + 56))(result, this, a3 - v43, a4, a5, a6);
  }
  return result;
}

uint64_t sub_18C95A964(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 80);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 112))(v4)
    || (uint64_t result = *(void *)(a1 + 88)) != 0
    && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 112))(result), result))
  {
    uint64_t v6 = sub_18C958640(*(unsigned int *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
    return !(a2 % v6) && *(void *)a1 % v6 != 0;
  }
  return result;
}

uint64_t sub_18C95AA1C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, icu::Formattable *a6, int a7, double a8)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v56 = &unk_1EDA44670;
  unint64_t v57 = 0xFFFFFFFF00000000;
  memset(v73, 0, sizeof(v73));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v73, (UChar **)a2);
  uint64_t v14 = *(void *)(a1 + 80);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(v14 + 8);
  }
  else if (*(__int16 *)(a1 + 24) < 0)
  {
    uint64_t v15 = *(unsigned int *)(a1 + 28);
  }
  else
  {
    uint64_t v15 = *(unsigned __int16 *)(a1 + 24) >> 5;
  }
  uint64_t v16 = *(void *)(a1 + 88);
  unsigned int v52 = a5;
  if (v16)
  {
    uint64_t v17 = a3;
    int v18 = *(_DWORD *)(v16 + 8);
  }
  else
  {
    uint64_t v17 = a3;
    if (*(__int16 *)(a1 + 24) < 0) {
      int v18 = *(_DWORD *)(a1 + 28);
    }
    else {
      int v18 = *(unsigned __int16 *)(a1 + 24) >> 5;
    }
  }
  long long v69 = 0u;
  uint64_t v72 = 0;
  long long v71 = 0u;
  long long v70 = 0u;
  uint64_t v68 = &unk_1EDA47700;
  LOWORD(v69) = 2;
  icu::UnicodeString::unBogus((uint64_t)&v68);
  if ((v69 & 0x8000u) == 0) {
    uint64_t v19 = (unsigned __int16)v69 >> 5;
  }
  else {
    uint64_t v19 = DWORD1(v69);
  }
  icu::UnicodeString::doReplace((icu::UnicodeString *)&v68, 0, v19, (const icu::UnicodeString *)(a1 + 16), 0, v15);
  sub_18C95AFE8(a1, (uint64_t)v73, (uint64_t)&v68, (uint64_t)&v56);
  unsigned int v20 = *(unsigned __int16 *)(a2 + 8);
  int v21 = (__int16)v20;
  unsigned int v22 = v20 >> 5;
  if (v21 >= 0) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = *(_DWORD *)(a2 + 12);
  }
  if ((SWORD4(v73[0]) & 0x8000u) == 0) {
    int v24 = WORD4(v73[0]) >> 5;
  }
  else {
    int v24 = HIDWORD(v73[0]);
  }
  if (!v57 && v15) {
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)a1;
  if (*(void *)a1 == -6)
  {
    *(_DWORD *)(v17 + 8) = v57;
    double NaN = uprv_getNaN();
    goto LABEL_27;
  }
  if (v26 == -5)
  {
    *(_DWORD *)(v17 + 8) = v57;
    double NaN = uprv_getInfinity();
LABEL_27:
    icu::Formattable::setDouble(a6, NaN);
    goto LABEL_71;
  }
  if (!a7)
  {
    uint64_t v49 = *(void *)(a1 + 80);
    if (v49)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v49 + 120))(v49))
      {
LABEL_22:
        *(_DWORD *)(v17 + 12) = HIDWORD(v57);
        icu::Formattable::setLong(a6, 0);
        goto LABEL_71;
      }
      uint64_t v26 = *(void *)a1;
    }
  }
  int v28 = 0;
  uint64_t v29 = 0;
  unsigned int v50 = v23 - v24;
  double v30 = 0.0;
  if (v26 >= 1) {
    double v31 = (double)v26;
  }
  else {
    double v31 = 0.0;
  }
  long long v64 = 0u;
  uint64_t v67 = 0;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v63 = &unk_1EDA47700;
  LOWORD(v64) = 2;
  do
  {
    LODWORD(v57) = 0;
    icu::UnicodeString::unBogus((uint64_t)&v63);
    if ((v64 & 0x8000u) == 0) {
      uint64_t v32 = (unsigned __int16)v64 >> 5;
    }
    else {
      uint64_t v32 = DWORD1(v64);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v63, 0, v32, (const icu::UnicodeString *)(a1 + 16), v15, (v18 - v15));
    double v33 = sub_18C95B09C(a1, (const icu::UnicodeString *)v73, v29, (uint64_t)&v63, (uint64_t)&v56, *(void *)(a1 + 80), v52, v31, a8);
    uint64_t v34 = v57;
    if (v57 || !*(void *)(a1 + 80))
    {
      uint64_t v62 = 0;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v59 = 0u;
      uint64_t v58 = &unk_1EDA47700;
      LOWORD(v59) = 2;
      int v35 = WORD4(v73[0]) >> 5;
      if (SWORD4(v73[0]) < 0) {
        int v35 = HIDWORD(v73[0]);
      }
      uint64_t v36 = (v35 - v57);
      icu::UnicodeString::unBogus((uint64_t)&v58);
      if ((v59 & 0x8000u) == 0) {
        uint64_t v37 = (unsigned __int16)v59 >> 5;
      }
      else {
        uint64_t v37 = DWORD1(v59);
      }
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v58, 0, v37, (const icu::UnicodeString *)v73, v34, v36);
      int v54 = &unk_1EDA44670;
      unint64_t v55 = 0xFFFFFFFF00000000;
      unsigned int v38 = *(unsigned __int16 *)(a1 + 24);
      if ((v38 & 0x8000) != 0) {
        unsigned int v39 = *(_DWORD *)(a1 + 28);
      }
      else {
        unsigned int v39 = v38 >> 5;
      }
      uint64_t v40 = v39 - v18;
      icu::UnicodeString::unBogus((uint64_t)&v63);
      if ((v64 & 0x8000u) == 0) {
        uint64_t v41 = (unsigned __int16)v64 >> 5;
      }
      else {
        uint64_t v41 = DWORD1(v64);
      }
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v63, 0, v41, (const icu::UnicodeString *)(a1 + 16), v18, v40);
      double v42 = sub_18C95B09C(a1, (const icu::UnicodeString *)&v58, 0, (uint64_t)&v63, (uint64_t)&v54, *(void *)(a1 + 88), v52, v33, a8);
      if (v55 || !*(void *)(a1 + 88))
      {
        if ((int)(v50 + v55 + v57) > v28)
        {
          int v28 = v50 + v55 + v57;
          double v30 = v42;
        }
      }
      else
      {
        int v45 = HIDWORD(v55) + v15 + v57;
        if (v45 > *(_DWORD *)(v17 + 12)) {
          *(_DWORD *)(v17 + 12) = v45;
        }
      }
      icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v54);
      icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v58);
    }
    else
    {
      if (HIDWORD(v57) + (int)v15 > *(_DWORD *)(v17 + 12)) {
        *(_DWORD *)(v17 + 12) = HIDWORD(v57) + v15;
      }
      uint64_t v34 = v29;
    }
    if (v18 == v15 || (int)v57 < 1) {
      break;
    }
    int v44 = WORD4(v73[0]) >> 5;
    if (SWORD4(v73[0]) < 0) {
      int v44 = HIDWORD(v73[0]);
    }
    if ((int)v57 >= v44) {
      break;
    }
    uint64_t v29 = v34;
  }
  while (v57 != v34);
  *(_DWORD *)(v17 + 8) = v28;
  if (v28 >= 1)
  {
    *(_DWORD *)(v17 + 12) = 0;
    if (a4)
    {
      if (!*(void *)(a1 + 80)) {
        double v30 = 1.0 / v30;
      }
    }
  }
  icu::Formattable::setDouble(a6, v30);
  icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v63);
LABEL_71:
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v68);
  icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)v73);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v56);
  return 1;
}

uint64_t sub_18C95AFE8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(unsigned __int16 *)(a3 + 8);
  int v5 = (__int16)v4;
  unsigned int v6 = v4 >> 5;
  if (v5 < 0) {
    unsigned int v6 = *(_DWORD *)(a3 + 12);
  }
  if (v6)
  {
    int v11 = 0;
    uint64_t result = (uint64_t)sub_18C95B44C(result, a2, a3, &v11);
    if (v11 <= 0 && result != 0)
    {
      *(_DWORD *)(a4 + 8) += result;
      if (result == 0x7FFFFFFF)
      {
        if (*(_WORD *)(a2 + 8)) {
          __int16 v10 = 2;
        }
        else {
          __int16 v10 = *(_WORD *)(a2 + 8) & 0x1F;
        }
        *(_WORD *)(a2 + 8) = v10;
      }
      else
      {
        return icu::UnicodeString::doReplace(a2, 0, result, 0, 0, 0);
      }
    }
  }
  return result;
}

double sub_18C95B09C(uint64_t a1, const icu::UnicodeString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int v35 = 0;
  if (!sub_18C95B734(a1, a4, &v35))
  {
    double v19 = 0.0;
    if (v35 > 0) {
      return v19;
    }
    double v33 = &unk_1EDA44670;
    unint64_t v34 = 0xFFFFFFFF00000000;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    icu::Formattable::Formattable((icu::Formattable *)&v41);
    unsigned int v32 = 0;
    uint64_t v20 = sub_18C95B830(a1, (uint64_t)a2, a4, a3, &v32);
    if ((v20 & 0x80000000) != 0)
    {
LABEL_23:
      *(_DWORD *)(a5 + 8) = 0;
      double v19 = 0.0;
      goto LABEL_28;
    }
    uint64_t v21 = v20;
    while (1)
    {
      uint64_t v40 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      uint64_t v36 = &unk_1EDA47700;
      LOWORD(v37) = 2;
      icu::UnicodeString::unBogus((uint64_t)&v36);
      if ((v37 & 0x8000u) == 0) {
        uint64_t v22 = (unsigned __int16)v37 >> 5;
      }
      else {
        uint64_t v22 = DWORD1(v37);
      }
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v36, 0, v22, a2, 0, v21);
      int v23 = (unsigned __int16)v37 >> 5;
      if ((v37 & 0x8000u) != 0) {
        int v23 = DWORD1(v37);
      }
      if (v23 >= 1)
      {
        uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 200))(*(void *)(a1 + 96));
        int v25 = (*(uint64_t (**)(uint64_t, void **, void **, uint64_t, uint64_t, long long *, double, double))(*(void *)a6 + 80))(a6, &v36, &v33, v24, a7, &v41, a8, a9);
        int v26 = v34;
        if (v25) {
          BOOL v27 = v34 == v21;
        }
        else {
          BOOL v27 = 0;
        }
        if (v27)
        {
          double v30 = (void *)(v32 + v21);
          *(_DWORD *)(a5 + 8) = v30;
          double v19 = *((double *)&v41 + 1);
          icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v36);
LABEL_28:
          icu::Formattable::~Formattable((icu::Formattable *)&v41);
          uint64_t v29 = &v33;
LABEL_29:
          icu::ParsePosition::~ParsePosition((icu::ParsePosition *)v29);
          return v19;
        }
        if (SHIDWORD(v34) > 0) {
          int v26 = HIDWORD(v34);
        }
        *(_DWORD *)(a5 + 12) = v26;
      }
      LODWORD(v34) = 0;
      uint64_t v21 = sub_18C95B830(a1, (uint64_t)a2, a4, v32 + v21, &v32);
      icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v36);
      if ((v21 & 0x80000000) != 0) {
        goto LABEL_23;
      }
    }
  }
  if (a6)
  {
    uint64_t v36 = &unk_1EDA44670;
    *(void *)&long long v37 = 0xFFFFFFFF00000000;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    icu::Formattable::Formattable((icu::Formattable *)&v41);
    uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 200))(*(void *)(a1 + 96));
    if ((*(unsigned int (**)(uint64_t, const icu::UnicodeString *, void **, uint64_t, uint64_t, long long *, double, double))(*(void *)a6 + 80))(a6, a2, &v36, v18, a7, &v41, a8, a9)&& v37)
    {
      *(_DWORD *)(a5 + 8) = v37;
      double v19 = *((double *)&v41 + 1);
    }
    else
    {
      *(_DWORD *)(a5 + 12) = DWORD1(v37);
      double v19 = 0.0;
    }
    icu::Formattable::~Formattable((icu::Formattable *)&v41);
    uint64_t v29 = &v36;
    goto LABEL_29;
  }
  return a8;
}

icu::RuleBasedCollator *sub_18C95B44C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v4 = *(unsigned __int16 *)(a3 + 8);
  int v5 = (__int16)v4;
  unsigned int v6 = v4 >> 5;
  if (v5 < 0) {
    unsigned int v6 = *(_DWORD *)(a3 + 12);
  }
  if (!v6) {
    return 0;
  }
  int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 200))(*(void *)(a1 + 96));
  unsigned int v13 = *(unsigned __int16 *)(a3 + 8);
  if ((v13 & 0x8000u) == 0) {
    uint64_t v14 = (UErrorCode *)(v13 >> 5);
  }
  else {
    uint64_t v14 = (UErrorCode *)*(unsigned int *)(a3 + 12);
  }
  if (!v11)
  {
    if (v13)
    {
      int v21 = *(unsigned char *)(a2 + 8) & 1;
      goto LABEL_51;
    }
    int v18 = v14 & ((int)v14 >> 31);
    if ((v14 & 0x80000000) != 0)
    {
      int32_t v19 = 0;
    }
    else
    {
      int32_t v19 = v14 - v18;
      int32_t v20 = (int)v14;
      if ((int)v14 - v18 >= v14)
      {
LABEL_45:
        if (*(_WORD *)(a2 + 8))
        {
          int v21 = 0;
        }
        else
        {
          if ((v13 & 2) != 0) {
            uint64_t v33 = a3 + 10;
          }
          else {
            uint64_t v33 = *(void *)(a3 + 24);
          }
          int v21 = icu::UnicodeString::doEqualsSubstring(a2, 0, (int32_t)v14, v33, v18, v20);
        }
LABEL_51:
        if (v21) {
          goto LABEL_52;
        }
        return 0;
      }
    }
    int32_t v20 = v19;
    goto LABEL_45;
  }
  if (v13)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    if (*(__int16 *)(a3 + 8) < 0) {
      return (icu::RuleBasedCollator *)*(unsigned int *)(a3 + 12);
    }
    else {
      return (icu::RuleBasedCollator *)(*(unsigned __int16 *)(a3 + 8) >> 5);
    }
  }
  int v15 = v14 & ((int)v14 >> 31);
  if ((v14 & 0x80000000) != 0)
  {
    int32_t v16 = 0;
  }
  else
  {
    int32_t v16 = v14 - v15;
    int32_t v17 = (int)v14;
    if ((int)v14 - v15 >= v14) {
      goto LABEL_21;
    }
  }
  int32_t v17 = v16;
LABEL_21:
  if ((*(_WORD *)(a2 + 8) & 1) == 0)
  {
    uint64_t v22 = (v13 & 2) != 0 ? a3 + 10 : *(void *)(a3 + 24);
    if (icu::UnicodeString::doEqualsSubstring(a2, 0, (int32_t)v14, v22, v15, v17)) {
      goto LABEL_52;
    }
  }
LABEL_26:
  Collator = (icu::RuleBasedCollator *)icu::RuleBasedNumberFormat::getCollator(*(icu::RuleBasedNumberFormat **)(a1 + 96), v12, v14);
  uint64_t v24 = Collator;
  if (Collator)
  {
    CollationElementIterator = icu::RuleBasedCollator::createCollationElementIterator(Collator, (UChar **)a2);
    int v26 = icu::RuleBasedCollator::createCollationElementIterator(v24, (UChar **)a3);
    BOOL v27 = v26;
    if (CollationElementIterator && v26)
    {
      UErrorCode v37 = U_ZERO_ERROR;
      unsigned int v28 = icu::CollationElementIterator::next(CollationElementIterator, &v37);
      unsigned int v29 = icu::CollationElementIterator::next(v27, &v37);
      if (v29 != -1)
      {
        for (unsigned int i = v29; i != -1; unsigned int i = icu::CollationElementIterator::next(v27, &v37))
        {
          if (!HIWORD(v28))
          {
            do
              unsigned int v31 = icu::CollationElementIterator::next(CollationElementIterator, &v37);
            while (v31 < 0x10000);
            unsigned int v28 = v31;
          }
          if (!HIWORD(i))
          {
            do
              unsigned int v32 = icu::CollationElementIterator::next(v27, &v37);
            while (v32 < 0x10000);
            unsigned int i = v32;
          }
          if (i == -1) {
            break;
          }
          uint64_t v24 = 0;
          if (v28 == -1 || (i ^ v28) >> 16) {
            goto LABEL_57;
          }
          unsigned int v28 = icu::CollationElementIterator::next(CollationElementIterator, &v37);
        }
      }
      uint64_t v24 = (icu::RuleBasedCollator *)(icu::CollationElementIterator::getOffset(CollationElementIterator)
                                     - (v28 != -1));
    }
    else
    {
      uint64_t v24 = 0;
      *a4 = 7;
    }
LABEL_57:
    if (v27)
    {
      icu::CollationElementIterator::~CollationElementIterator(v27);
      icu::UMemory::operator delete(v34);
    }
    if (CollationElementIterator)
    {
      icu::CollationElementIterator::~CollationElementIterator(CollationElementIterator);
      icu::UMemory::operator delete(v35);
    }
  }
  else
  {
    *a4 = 7;
  }
  return v24;
}

uint64_t sub_18C95B734(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v3 = *(unsigned __int16 *)(a2 + 8);
  int v4 = (__int16)v3;
  unsigned int v5 = v3 >> 5;
  if (v4 < 0) {
    unsigned int v5 = *(_DWORD *)(a2 + 12);
  }
  if (!v5) {
    return 1;
  }
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 96) + 200))(*(void *)(a1 + 96))) {
    return 0;
  }
  Collator = (icu::RuleBasedCollator *)icu::RuleBasedNumberFormat::getCollator(*(icu::RuleBasedNumberFormat **)(a1 + 96), v9, v10);
  if (Collator
    && (CollationElementIterator = icu::RuleBasedCollator::createCollationElementIterator(Collator, (UChar **)a2)) != 0)
  {
    unsigned int v13 = CollationElementIterator;
    UErrorCode v18 = U_ZERO_ERROR;
    unsigned int v14 = icu::CollationElementIterator::next(CollationElementIterator, &v18);
    if (!HIWORD(v14))
    {
      do
        unsigned int v14 = icu::CollationElementIterator::next(v13, &v18);
      while (v14 < 0x10000);
    }
    BOOL v15 = v14 == -1;
    icu::CollationElementIterator::~CollationElementIterator(v13);
    icu::UMemory::operator delete(v16);
  }
  else
  {
    BOOL v15 = 0;
    *a3 = 7;
  }
  return v15;
}

uint64_t sub_18C95B830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 104))
  {
    memset(v61, 0, 112);
    icu::Formattable::Formattable((icu::Formattable *)v61);
    uint64_t v52 = 0;
    uint64_t v49 = &unk_1EDA4C7F0;
    int v51 = a4;
    int v50 = 0;
    icu::PluralFormat::parseType(*(void *)(a1 + 104), a2, a1, (icu::Formattable *)v61, (uint64_t)&v49);
    int v9 = v51;
    if (v51 < 0) {
      goto LABEL_65;
    }
    __int16 v10 = (icu::UnicodeString *)(a1 + 16);
    if (*(__int16 *)(a1 + 24) < 0)
    {
      int v12 = *(_DWORD *)(a1 + 28);
      int v11 = v12 & (v12 >> 31);
    }
    else
    {
      int v11 = 0;
      int v12 = *(unsigned __int16 *)(a1 + 24) >> 5;
    }
    int32_t v21 = icu::UnicodeString::indexOf(a1 + 16, (uint64_t)"$", 0, -1, v11, v12 - v11);
    int32_t v22 = v21;
    unsigned int v23 = *(unsigned __int16 *)(a1 + 24);
    if (v21 < 0)
    {
      int v25 = 0;
      if ((v23 & 0x8000) != 0) {
        int v24 = *(_DWORD *)(a1 + 28);
      }
      else {
        int v24 = v23 >> 5;
      }
    }
    else if ((v23 & 0x8000) != 0)
    {
      int v24 = *(_DWORD *)(a1 + 28);
      if (v24 >= v21) {
        int v25 = v21;
      }
      else {
        int v25 = *(_DWORD *)(a1 + 28);
      }
    }
    else
    {
      int v24 = v23 >> 5;
      if (v24 >= v21) {
        int v25 = v21;
      }
      else {
        int v25 = v24;
      }
    }
    uint64_t v32 = icu::UnicodeString::indexOf(a1 + 16, (uint64_t)L")$", 0, -1, v25, v24 - v25) + 2;
    int v34 = v52;
    long long v60 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    icu::UnicodeString::tempSubString(v10, 0, v22, (icu::UnicodeString *)&v57);
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    icu::UnicodeString::tempSubString(v10, v32, 0x7FFFFFFF, (icu::UnicodeString *)&v53);
    if (BYTE8(v57))
    {
      unint64_t v37 = *(unsigned __int16 *)(a2 + 8);
      if ((v37 & 1) == 0) {
        goto LABEL_63;
      }
    }
    else
    {
      if ((SWORD4(v57) & 0x8000u) == 0) {
        int32_t v35 = WORD4(v57) >> 5;
      }
      else {
        int32_t v35 = HIDWORD(v57);
      }
      if ((BYTE8(v57) & 2) != 0) {
        unint64_t v36 = (unint64_t)&v57 | 0xA;
      }
      else {
        unint64_t v36 = *((void *)&v58 + 1);
      }
      if (icu::UnicodeString::doCompare(a2, v9 - v35, v35, v36, v35 & (v35 >> 31), v35 & ~(v35 >> 31)))goto LABEL_63; {
    }
      }
    if ((BYTE8(v53) & 1) == 0)
    {
      if ((SWORD4(v53) & 0x8000u) == 0) {
        int32_t v38 = WORD4(v53) >> 5;
      }
      else {
        int32_t v38 = HIDWORD(v53);
      }
      if ((BYTE8(v53) & 2) != 0) {
        unint64_t v39 = (unint64_t)&v53 | 0xA;
      }
      else {
        unint64_t v39 = *((void *)&v54 + 1);
      }
      if (icu::UnicodeString::doCompare(a2, v34, v38, v39, v38 & (v38 >> 31), v38 & ~(v38 >> 31)))goto LABEL_63; {
LABEL_69:
      }
      int v40 = 0;
      int v42 = WORD4(v57) >> 5;
      if (SWORD4(v57) < 0) {
        int v42 = HIDWORD(v57);
      }
      int v43 = WORD4(v53) >> 5;
      if (SWORD4(v53) < 0) {
        int v43 = HIDWORD(v53);
      }
      unint64_t v37 = (v34 - v9 + v42 + v43);
      *a5 = v37;
      uint64_t v32 = (v9 - v42);
LABEL_64:
      icu::UnicodeString::~UnicodeString((void *)v37, (icu::UnicodeString *)&v53);
      icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v57);
      if (!v40)
      {
LABEL_66:
        icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v49);
        icu::Formattable::~Formattable((icu::Formattable *)v61);
        return v32;
      }
LABEL_65:
      *a5 = 0;
      uint64_t v32 = 0xFFFFFFFFLL;
      goto LABEL_66;
    }
    unint64_t v37 = *(unsigned __int16 *)(a2 + 8);
    if (v37) {
      goto LABEL_69;
    }
LABEL_63:
    int v40 = 1;
    goto LABEL_64;
  }
  int v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 200))(*(void *)(a1 + 96));
  unsigned int v15 = *(unsigned __int16 *)(a3 + 8);
  int v16 = (__int16)v15;
  unsigned int v17 = v15 >> 5;
  if (v16 < 0) {
    unsigned int v17 = *(_DWORD *)(a3 + 12);
  }
  *a5 = v17;
  unsigned int v18 = *(unsigned __int16 *)(a2 + 8);
  if (v14)
  {
    if ((a4 & 0x80000000) != 0)
    {
      int v19 = 0;
    }
    else if ((v18 & 0x8000) != 0)
    {
      int v19 = *(_DWORD *)(a2 + 12);
      int v20 = a4;
      if (v19 >= (int)a4) {
        goto LABEL_30;
      }
    }
    else
    {
      int v19 = v18 >> 5;
      int v20 = a4;
      if (v18 >> 5 >= a4)
      {
LABEL_30:
        unsigned int v27 = *(unsigned __int16 *)(a3 + 8);
        if ((v27 & 0x8000u) == 0) {
          int32_t v28 = v27 >> 5;
        }
        else {
          int32_t v28 = *(_DWORD *)(a3 + 12);
        }
        if ((v27 & 1) == 0 && v28 >= 1)
        {
          int v29 = (__int16)v18;
          unsigned int v30 = v18 >> 5;
          if (v29 < 0) {
            unsigned int v30 = *(_DWORD *)(a2 + 12);
          }
          uint64_t v31 = (v27 & 2) != 0 ? a3 + 10 : *(void *)(a3 + 24);
          uint64_t v32 = icu::UnicodeString::indexOf(a2, v31, 0, v28, v20, v30 - v20);
          if ((v32 & 0x80000000) == 0) {
            return v32;
          }
        }
        return sub_18C95BD64(a1, a2, a3, a4, a5);
      }
    }
    int v20 = v19;
    goto LABEL_30;
  }
  if ((a4 & 0x80000000) != 0)
  {
    int v26 = 0;
    goto LABEL_76;
  }
  if ((v18 & 0x8000) == 0)
  {
    int v26 = v18 >> 5;
    if (v18 >> 5 >= a4) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  int v26 = *(_DWORD *)(a2 + 12);
  if (v26 < (int)a4) {
LABEL_76:
  }
    LODWORD(a4) = v26;
LABEL_77:
  unsigned int v44 = *(unsigned __int16 *)(a3 + 8);
  if ((v44 & 0x8000u) == 0) {
    int32_t v45 = v44 >> 5;
  }
  else {
    int32_t v45 = *(_DWORD *)(a3 + 12);
  }
  uint64_t v32 = 0xFFFFFFFFLL;
  if ((v44 & 1) != 0 || v45 < 1) {
    return v32;
  }
  int v46 = (__int16)v18;
  unsigned int v47 = v18 >> 5;
  if (v46 < 0) {
    unsigned int v47 = *(_DWORD *)(a2 + 12);
  }
  if ((v44 & 2) != 0) {
    uint64_t v48 = a3 + 10;
  }
  else {
    uint64_t v48 = *(void *)(a3 + 24);
  }

  return icu::UnicodeString::indexOf(a2, v48, 0, v45, a4, v47 - a4);
}

uint64_t sub_18C95BD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v6 = a4;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v21 = 0;
  long long v20 = 0u;
  unsigned int v17 = &unk_1EDA47700;
  LOWORD(v18) = 2;
  int v16 = 0;
  for (int i = -(int)a4; ; --i)
  {
    if (*(__int16 *)(a2 + 8) < 0)
    {
      unint64_t v11 = *(unsigned int *)(a2 + 12);
      if ((int)v6 >= (int)v11) {
        break;
      }
    }
    else
    {
      unint64_t v11 = *(unsigned __int16 *)(a2 + 8);
      if ((int)v6 >= (int)(v11 >> 5)) {
        break;
      }
      LODWORD(v11) = v11 >> 5;
    }
    uint64_t v12 = (v11 + i);
    icu::UnicodeString::unBogus((uint64_t)&v17);
    uint64_t v13 = (v18 & 0x8000u) == 0 ? (unsigned __int16)v18 >> 5 : DWORD1(v18);
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v17, 0, v13, (const icu::UnicodeString *)a2, v6, v12);
    unsigned int v14 = sub_18C95B44C(a1, (uint64_t)&v17, a3, &v16);
    unint64_t v11 = v16;
    if (v16 > 0) {
      break;
    }
    if (v14) {
      goto LABEL_13;
    }
    uint64_t v6 = (v6 + 1);
  }
  unsigned int v14 = 0;
  uint64_t v6 = 0xFFFFFFFFLL;
LABEL_13:
  *a5 = v14;
  icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)&v17);
  return v6;
}

uint64_t sub_18C95BECC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    sub_18C95C5DC(v2);
  }
  uint64_t result = *(void *)(a1 + 88);
  if (result)
  {
    return sub_18C95C5DC(result);
  }
  return result;
}

void sub_18C95BF40(icu::UObject *this)
{
  *(void *)this = &unk_1EDA4E6E0;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;

  icu::UObject::~UObject(this);
}

void sub_18C95BFC4(icu::UObject *a1)
{
  sub_18C95BF40(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C95BFF0(icu::UObject *a1)
{
  sub_18C95BF40(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C95C01C(icu::UObject *a1)
{
  sub_18C95BF40(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C95C048(icu::UObject *a1)
{
  sub_18C95BF40(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C95C074(icu::UObject *a1)
{
  sub_18C95BF40(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C95C0A0(icu::UObject *a1)
{
  sub_18C95BF40(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C95C0CC(icu::UObject *a1)
{
  sub_18C95BF40(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18C95C0F4(int a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  unsigned int v14 = *(unsigned __int16 *)(a6 + 8);
  if (*(__int16 *)(a6 + 8) < 0)
  {
    if (!*(_DWORD *)(a6 + 12)) {
      return 0;
    }
  }
  else if (v14 < 0x20)
  {
    return 0;
  }
  if ((v14 & 2) != 0) {
    int v16 = (unsigned __int16 *)(a6 + 10);
  }
  else {
    int v16 = *(unsigned __int16 **)(a6 + 24);
  }
  unsigned int v17 = (uint64_t *)*v16;
  if (v17 != 62)
  {
    if (v17 == 61)
    {
      uint64_t result = icu::UMemory::operator new(v17, (icu::UMemory *)0x20, (unint64_t)a2);
      if (result) {
        return (uint64_t *)sub_18C95CFD4((uint64_t)result, a1, a4, a6, a7);
      }
      return result;
    }
    if (v17 == 60)
    {
      long long v18 = *a2;
      if ((unint64_t)*a2 + 4 < 3)
      {
        uint64_t result = icu::UMemory::operator new(v18, (icu::UMemory *)0x20, (unint64_t)a2);
        if (result)
        {
          uint64_t result = (uint64_t *)sub_18C95C324((uint64_t)result, a1, a4, (UChar **)a6, a7);
          long long v19 = &unk_1EDA4EA10;
LABEL_26:
          *uint64_t result = (uint64_t)v19;
          return result;
        }
        return result;
      }
      if (v18 != (uint64_t *)-1)
      {
        uint64_t v21 = (uint64_t *)*(unsigned __int8 *)(a4 + 160);
        if (*(unsigned char *)(a4 + 160))
        {
          uint64_t result = icu::UMemory::operator new(v21, (icu::UMemory *)0x38, (unint64_t)a2);
          if (result) {
            return (uint64_t *)sub_18C95E604((uint64_t)result, a1, *(void *)(a5 + 384), a6, a7, (double)(uint64_t)*a2);
          }
        }
        else
        {
          uint64_t result = icu::UMemory::operator new(v21, (icu::UMemory *)0x28, (unint64_t)a2);
          if (result) {
            return (uint64_t *)sub_18C95E7A4((uint64_t)result, a1, (uint64_t)a2, a4, (UChar **)a6, a7);
          }
        }
        return result;
      }
    }
LABEL_28:
    uint64_t result = 0;
    *a7 = U_PARSE_ERROR;
    return result;
  }
  long long v20 = *a2;
  if ((unint64_t)*a2 + 4 < 3)
  {
    uint64_t result = icu::UMemory::operator new(v20, (icu::UMemory *)0x28, (unint64_t)a2);
    if (result) {
      return (uint64_t *)sub_18C95D5D8((uint64_t)result, a1, a4, a6, a7);
    }
    return result;
  }
  if (v20 != (uint64_t *)-1)
  {
    if (!*(unsigned char *)(a4 + 160))
    {
      uint64_t result = icu::UMemory::operator new((uint64_t *)*(unsigned __int8 *)(a4 + 160), (icu::UMemory *)0x30, (unint64_t)a2);
      if (result) {
        return (uint64_t *)sub_18C95D0D0((uint64_t)result, a1, (uint64_t)a2, a3, a4, (UChar **)a6, a7);
      }
      return result;
    }
    goto LABEL_28;
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)0xFFFFFFFFFFFFFFFFLL, (icu::UMemory *)0x20, (unint64_t)a2);
  if (result)
  {
    uint64_t result = (uint64_t *)sub_18C95C324((uint64_t)result, a1, a4, (UChar **)a6, a7);
    long long v19 = &unk_1EDA4EAD0;
    goto LABEL_26;
  }
  return result;
}

uint64_t sub_18C95C324(uint64_t a1, int a2, uint64_t a3, UChar **a4, UErrorCode *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EDA4E6E0;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  int v9 = (void *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v28, a4);
  unsigned int v10 = *((unsigned __int16 *)a4 + 4);
  if ((__int16)a4[1] < 0)
  {
    int v12 = *((_DWORD *)a4 + 3);
    if (v12 <= 1) {
      goto LABEL_18;
    }
    unint64_t v11 = (UChar *)a4 + 5;
    if ((v10 & 2) == 0) {
      unint64_t v11 = a4[3];
    }
  }
  else
  {
    if (v10 < 0x40) {
      goto LABEL_16;
    }
    unint64_t v11 = a4[3];
    if ((v10 & 2) != 0) {
      unint64_t v11 = (UChar *)a4 + 5;
    }
    int v12 = v10 >> 5;
  }
  int v13 = *v11;
  int v14 = v12 - 1;
  unsigned int v15 = (UChar *)a4 + 5;
  if ((v10 & 2) == 0) {
    unsigned int v15 = a4[3];
  }
  if (v13 != v15[v14])
  {
    if ((v10 & 0x8000) == 0)
    {
LABEL_16:
      if (!(v10 >> 5)) {
        goto LABEL_19;
      }
LABEL_38:
      uint64_t v18 = 9;
LABEL_39:
      *a5 = v18;
      goto LABEL_40;
    }
LABEL_18:
    if (!*((_DWORD *)a4 + 3)) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
  int v16 = (__int16)v10;
  unsigned int v17 = v10 >> 5;
  if (v16 < 0) {
    unsigned int v17 = *((_DWORD *)a4 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)&v28, v17 - 1, 1, 0, 0, 0);
  icu::UnicodeString::doReplace((uint64_t)&v28, 0, 1, 0, 0, 0);
LABEL_19:
  uint64_t v18 = WORD4(v28);
  if (SWORD4(v28) < 0)
  {
    if (!HIDWORD(v28)) {
      goto LABEL_21;
    }
  }
  else if (WORD4(v28) <= 0x1Fu)
  {
LABEL_21:
    *int v9 = a3;
    goto LABEL_40;
  }
  long long v19 = (unsigned __int16 *)((unint64_t)&v28 | 0xA);
  if ((BYTE8(v28) & 2) == 0) {
    long long v19 = (unsigned __int16 *)*((void *)&v29 + 1);
  }
  int v20 = *v19;
  if (v20 == 37)
  {
    *int v9 = icu::RuleBasedNumberFormat::findRuleSet(*(icu::RuleBasedNumberFormat **)(a3 + 136), (const icu::UnicodeString *)&v28, a5);
    goto LABEL_40;
  }
  LODWORD(v18) = WORD4(v28) >> 5;
  if ((SWORD4(v28) & 0x8000u) == 0) {
    uint64_t v18 = v18;
  }
  else {
    uint64_t v18 = HIDWORD(v28);
  }
  if (!v18) {
    goto LABEL_38;
  }
  if (v20 != 35)
  {
    if (v20 == 62)
    {
      *(void *)(a1 + 16) = a3;
      *(void *)(a1 + 24) = 0;
      goto LABEL_40;
    }
    if (v20 != 48) {
      goto LABEL_38;
    }
  }
  uint64_t DecimalFormatSymbols = icu::RuleBasedNumberFormat::getDecimalFormatSymbols(*(icu::RuleBasedNumberFormat **)(a3 + 136));
  if (!DecimalFormatSymbols)
  {
    uint64_t v18 = 2;
    goto LABEL_39;
  }
  int v24 = (const icu::DecimalFormatSymbols *)DecimalFormatSymbols;
  int v25 = (icu::DecimalFormat *)icu::UMemory::operator new(v23, (icu::UMemory *)0x170, v22);
  if (!v25)
  {
    uint64_t v18 = 7;
    goto LABEL_39;
  }
  int v26 = icu::DecimalFormat::DecimalFormat(v25, (const icu::UnicodeString *)&v28, v24, a5);
  uint64_t v18 = *(unsigned int *)a5;
  if ((int)v18 < 1) {
    *(void *)(a1 + 24) = v26;
  }
  else {
    (*(void (**)(icu::DecimalFormat *))(*(void *)v26 + 8))(v26);
  }
LABEL_40:
  icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v28);
  return a1;
}

uint64_t sub_18C95C5DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 336))();
  }
  return result;
}

void *sub_18C95C614()
{
  return &unk_1E91924DC;
}

uint64_t sub_18C95C620(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_18C828FD8(*(void *)(*(void *)a1 - 8), *(void *)(*(void *)a2 - 8));
  if (result)
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || (*(void *)(a1 + 16) != 0) == (*(void *)(a2 + 16) == 0))
    {
      return 0;
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 24);
      if (v5)
      {
        uint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 24);
        return v6();
      }
      else
      {
        return *(void *)(a2 + 24) == 0;
      }
    }
  }
  return result;
}

void *sub_18C95C704(void *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a2 + 8)) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *(_WORD *)(a2 + 8) & 0x1F;
  }
  *(_WORD *)(a2 + 8) = v4;
  LOWORD(v11) = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
  icu::UnicodeString::doAppend(a2, (uint64_t)&v11, 0, 1);
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v15 = 0;
  long long v14 = 0u;
  unint64_t v11 = (UChar *)&unk_1EDA47700;
  LOWORD(v12) = 2;
  uint64_t v5 = a1[2];
  if (v5)
  {
    icu::UnicodeString::copyFrom(&v11, (UChar **)(v5 + 8), 0);
  }
  else
  {
    uint64_t v6 = a1[3];
    if (v6) {
      (*(void (**)(uint64_t, UChar **))(*(void *)v6 + 552))(v6, &v11);
    }
  }
  if ((v12 & 0x8000u) == 0) {
    uint64_t v7 = (unsigned __int16)v12 >> 5;
  }
  else {
    uint64_t v7 = DWORD1(v12);
  }
  icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v11, 0, v7);
  __int16 v10 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
  icu::UnicodeString::doAppend(a2, (uint64_t)&v10, 0, 1);
  return icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11);
}

void *sub_18C95C8B0(void *result, uint64_t a2, icu::UnicodeString *a3, int a4, int a5, UErrorCode *a6)
{
  int v9 = result;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  __int16 v10 = (_DWORD *)result[2];
  if (v10)
  {
    unint64_t v12 = (*(uint64_t (**)(void *))(*result + 64))(result);
    uint64_t v13 = (*((_DWORD *)v9 + 2) + a4);
    return sub_18C957A7C(v10, v12, a3, v13, a5, a6);
  }
  else if (result[3])
  {
    if (a2 > 0x1FFFFFFFFFFFFFLL)
    {
      uint64_t v16 = (*(uint64_t (**)(void *))(*result + 64))(result);
      long long v21 = 0u;
      uint64_t v24 = 0;
      long long v23 = 0u;
      long long v22 = 0u;
      int v20 = &unk_1EDA47700;
      LOWORD(v21) = 2;
      uint64_t v15 = (icu::Format *)v9[3];
      icu::Formattable::Formattable((icu::Formattable *)v19, v16);
    }
    else
    {
      double v14 = (*(double (**)(void *, double))(*result + 72))(result, (double)a2);
      if (!icu::NumberFormat::getMaximumFractionDigits((icu::NumberFormat *)v9[3])) {
        double v14 = uprv_floor(v14);
      }
      long long v21 = 0u;
      uint64_t v24 = 0;
      long long v23 = 0u;
      long long v22 = 0u;
      int v20 = &unk_1EDA47700;
      LOWORD(v21) = 2;
      uint64_t v15 = (icu::Format *)v9[3];
      icu::Formattable::Formattable((icu::Formattable *)v19, v14);
    }
    icu::Format::format(v15, (const icu::Formattable *)v19, (icu::UnicodeString *)&v20, a6);
    icu::Formattable::~Formattable((icu::Formattable *)v19);
    if ((v21 & 0x8000u) == 0) {
      uint64_t v17 = (unsigned __int16)v21 >> 5;
    }
    else {
      uint64_t v17 = DWORD1(v21);
    }
    icu::UnicodeString::doReplace(a3, (*((_DWORD *)v9 + 2) + a4), 0, (const icu::UnicodeString *)&v20, 0, v17);
    return icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v20);
  }
  return result;
}

icu::NumberFormat *sub_18C95CB44(uint64_t a1, icu::UnicodeString *a2, int a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  double v10 = (*(double (**)(uint64_t))(*(void *)a1 + 72))(a1);
  if (uprv_isInfinite(v10))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    double Infinity = uprv_getInfinity();
    uint64_t v13 = sub_18C957C98(v11, Infinity);
    uint64_t v14 = (*(_DWORD *)(a1 + 8) + a3);
    return (icu::NumberFormat *)sub_18C95A5E4(v13, a2, v14, a4, a5, v10);
  }
  double v16 = uprv_floor(v10);
  uint64_t v17 = *(_DWORD **)(a1 + 16);
  if (v10 == v16)
  {
    if (v17)
    {
      unint64_t v18 = sub_18C957F98(v10);
      uint64_t v19 = (*(_DWORD *)(a1 + 8) + a3);
      return (icu::NumberFormat *)sub_18C957A7C(v17, v18, a2, v19, a4, a5);
    }
    goto LABEL_14;
  }
  if (!v17)
  {
LABEL_14:
    uint64_t result = *(icu::NumberFormat **)(a1 + 24);
    if (result)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      uint64_t v28 = 0;
      long long v27 = 0u;
      uint64_t v24 = &unk_1EDA47700;
      LOWORD(v25) = 2;
      icu::NumberFormat::format(result, v10, (icu::UnicodeString *)&v24);
      if ((v25 & 0x8000u) == 0) {
        uint64_t v22 = (unsigned __int16)v25 >> 5;
      }
      else {
        uint64_t v22 = DWORD1(v25);
      }
      icu::UnicodeString::doReplace(a2, (*(_DWORD *)(a1 + 8) + a3), 0, (const icu::UnicodeString *)&v24, 0, v22);
      return (icu::NumberFormat *)icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v24);
    }
    return result;
  }
  uint64_t v20 = (*(_DWORD *)(a1 + 8) + a3);
  long long v21 = *(_DWORD **)(a1 + 16);

  return (icu::NumberFormat *)sub_18C957C04(v21, a2, v20, a4, a5, v10);
}

uint64_t sub_18C95CDC8(void *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, icu::Formattable *a6, double a7, double a8)
{
  (*(void (**)(void *, double))(*a1 + 96))(a1, a8);
  uint64_t v16 = a1[2];
  if (v16)
  {
    sub_18C957FFC(v16, a2, a3, a5, a6, 0, v15);
    if (a4)
    {
      if (!*(unsigned char *)(a1[2] + 160) && *(_DWORD *)(a3 + 8) == 0)
      {
        int v26 = 0;
        uint64_t Instance = icu::NumberFormat::createInstance((icu::NumberFormat *)&v26, v17);
        uint64_t v20 = Instance;
        if (v26 <= 0)
        {
          (*(void (**)(icu::Format *, uint64_t, icu::Formattable *, uint64_t))(*(void *)Instance + 160))(Instance, a2, a6, a3);
        }
        else if (!Instance)
        {
          goto LABEL_15;
        }
        (*(void (**)(icu::Format *))(*(void *)v20 + 8))(v20);
      }
    }
  }
  else
  {
    uint64_t v21 = a1[3];
    if (v21) {
      (*(void (**)(uint64_t, uint64_t, icu::Formattable *, uint64_t))(*(void *)v21 + 160))(v21, a2, a6, a3);
    }
  }
LABEL_15:
  if (*(_DWORD *)(a3 + 8))
  {
    UErrorCode v25 = U_ZERO_ERROR;
    double Double = icu::Formattable::getDouble(a6, &v25);
    double v23 = (*(double (**)(void *, double, double))(*a1 + 88))(a1, Double, a7);
    icu::Formattable::setDouble(a6, v23);
    return 1;
  }
  else
  {
    icu::Formattable::setLong(a6, 0);
    return 0;
  }
}

uint64_t sub_18C95CFAC()
{
  return 0;
}

BOOL sub_18C95CFB4(uint64_t a1)
{
  return !*(void *)(a1 + 16) && *(void *)(a1 + 24) != 0;
}

uint64_t sub_18C95CFD4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  *(void *)sub_18C95C324(a1, a2, a3, (UChar **)a4, a5) = &unk_1EDA4E770;
  unsigned int v8 = *(unsigned __int16 *)(a4 + 8);
  int v9 = (__int16)v8;
  int32_t v10 = v8 >> 5;
  if (v9 >= 0) {
    int32_t v11 = v10;
  }
  else {
    int32_t v11 = *(_DWORD *)(a4 + 12);
  }
  if (!icu::UnicodeString::doCompare(a4, 0, v11, (uint64_t)L"==", 0, 2)) {
    *a5 = U_PARSE_ERROR;
  }
  return a1;
}

void *sub_18C95D07C()
{
  return &unk_1E91924DD;
}

void *sub_18C95D088()
{
  return &unk_1E91924DE;
}

uint64_t sub_18C95D094(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_18C95C620(a1, a2);
  if (result) {
    return *(void *)(a1 + 32) == *(void *)(a2 + 32);
  }
  return result;
}

uint64_t sub_18C95D0D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, UChar **a6, UErrorCode *a7)
{
  *(void *)sub_18C95C324(a1, a2, a5, a6, a7) = &unk_1EDA4E800;
  uint64_t v12 = sub_18C95A278(a3);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = 0;
  if (!v12) {
    *a7 = U_PARSE_ERROR;
  }
  unsigned int v13 = *((unsigned __int16 *)a6 + 4);
  int v14 = (__int16)v13;
  int32_t v15 = v13 >> 5;
  if (v14 >= 0) {
    int32_t v16 = v15;
  }
  else {
    int32_t v16 = *((_DWORD *)a6 + 3);
  }
  if (!icu::UnicodeString::doCompare((uint64_t)a6, 0, v16, (uint64_t)">", 0, 3)) {
    *(void *)(a1 + 40) = a4;
  }
  return a1;
}

void *sub_18C95D1A8()
{
  return &unk_1E91924DF;
}

uint64_t sub_18C95D1B4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_18C95C620(a1, a2);
  if (result) {
    return *(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40);
  }
  return result;
}

void *sub_18C95D208(void *a1, uint64_t a2, icu::UnicodeString *a3, int a4, uint64_t a5, UErrorCode *a6)
{
  if (a1[5])
  {
    unint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
    uint64_t v12 = a1[5];
    uint64_t v13 = (*((_DWORD *)a1 + 2) + a4);
    return sub_18C95A288(v12, v11, a3, v13, a5, a6);
  }
  else
  {
    return sub_18C95C8B0(a1, a2, a3, a4, a5, a6);
  }
}

icu::NumberFormat *sub_18C95D2DC(uint64_t a1, icu::UnicodeString *a2, int a3, uint64_t a4, UErrorCode *a5)
{
  if (*(void *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = (*(_DWORD *)(a1 + 8) + a3);
    return (icu::NumberFormat *)sub_18C95A5E4(v11, a2, v12, a4, a5, v10);
  }
  else
  {
    return sub_18C95CB44(a1, a2, a3, a4, a5);
  }
}

uint64_t sub_18C95D3AC(void *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, icu::Formattable *a6, double a7, double a8)
{
  uint64_t v12 = a1[5];
  if (v12)
  {
    sub_18C95AA1C(v12, a2, a3, 0, a5, a6, 1, a8);
    if (*(_DWORD *)(a3 + 8))
    {
      UErrorCode v16 = U_ZERO_ERROR;
      double Double = icu::Formattable::getDouble(a6, &v16);
      double v14 = (*(double (**)(void *, double, double))(*a1 + 88))(a1, Double, a7);
      icu::Formattable::setDouble(a6, v14);
    }
    return 1;
  }
  else
  {
    return sub_18C95CDC8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void *sub_18C95D498(void *a1, uint64_t a2)
{
  if (a1[5])
  {
    if (*(_WORD *)(a2 + 8)) {
      __int16 v4 = 2;
    }
    else {
      __int16 v4 = *(_WORD *)(a2 + 8) & 0x1F;
    }
    *(_WORD *)(a2 + 8) = v4;
    __int16 v6 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
    icu::UnicodeString::doAppend(a2, (uint64_t)&v6, 0, 1);
    __int16 v7 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
    icu::UnicodeString::doAppend(a2, (uint64_t)&v7, 0, 1);
    __int16 v8 = (*(uint64_t (**)(void *))(*a1 + 104))(a1);
    return (void *)icu::UnicodeString::doAppend(a2, (uint64_t)&v8, 0, 1);
  }
  else
  {
    return sub_18C95C704(a1, a2);
  }
}

void *sub_18C95D5CC()
{
  return &unk_1E91924E0;
}

uint64_t sub_18C95D5D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v8 = sub_18C95C324(a1, a2, a3, (UChar **)a4, a5);
  *(void *)uint64_t v8 = &unk_1EDA4E890;
  *(_WORD *)(v8 + 32) = 256;
  unsigned int v9 = *(unsigned __int16 *)(a4 + 8);
  int v10 = (__int16)v9;
  int32_t v11 = v9 >> 5;
  if (v10 >= 0) {
    int32_t v12 = v11;
  }
  else {
    int32_t v12 = *(_DWORD *)(a4 + 12);
  }
  if (icu::UnicodeString::doCompare(a4, 0, v12, (uint64_t)">", 0, 2)
    && ((unsigned int v13 = *(unsigned __int16 *)(a4 + 8), v14 = (__int16)v13, v15 = v13 >> 5, v14 >= 0)
      ? (int32_t v16 = v15)
      : (int32_t v16 = *(_DWORD *)(a4 + 12)),
        icu::UnicodeString::doCompare(a4, 0, v16, (uint64_t)">", 0, 3) && *(void *)(a1 + 16) != a3))
  {
    *(unsigned char *)(*(void *)(a1 + 16) + 160) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 1;
    unsigned int v17 = *(unsigned __int16 *)(a4 + 8);
    int v18 = (__int16)v17;
    int32_t v19 = v17 >> 5;
    if (v18 >= 0) {
      int32_t v20 = v19;
    }
    else {
      int32_t v20 = *(_DWORD *)(a4 + 12);
    }
    if (!icu::UnicodeString::doCompare(a4, 0, v20, (uint64_t)">", 0, 3)) {
      *(unsigned char *)(a1 + 33) = 0;
    }
  }
  return a1;
}

void sub_18C95D754(uint64_t a1, icu::UnicodeString *a2, int a3, uint64_t a4, int *a5, double a6)
{
  int v7 = a4;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v18);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v18, a6);
    icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)v18, -20, 4u, a5);
    LowerDisplayint Magnitude = icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude((icu::number::impl::DecimalQuantity *)v18);
    if (LowerDisplayMagnitude < 0)
    {
      int v13 = LowerDisplayMagnitude;
      char v14 = 1;
      do
      {
        if ((v14 & 1) == 0)
        {
          if (*(unsigned char *)(a1 + 33))
          {
            uint64_t v15 = (*(_DWORD *)(a1 + 8) + a3);
            __int16 v20 = 32;
            icu::UnicodeString::doReplace((uint64_t)a2, v15, 0, (uint64_t)&v20, 0, 1);
          }
        }
        int Digit = icu::number::impl::DecimalQuantity::getDigit((icu::number::impl::DecimalQuantity *)v18, v13);
        sub_18C957A7C(*(_DWORD **)(a1 + 16), Digit, a2, (*(_DWORD *)(a1 + 8) + a3), v7, (UErrorCode *)a5);
        char v14 = 0;
      }
      while (!__CFADD__(v13++, 1));
    }
    else
    {
      sub_18C957A7C(*(_DWORD **)(a1 + 16), 0, a2, (*(_DWORD *)(a1 + 8) + a3), v7, (UErrorCode *)a5);
    }
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v18);
  }
  else
  {
    sub_18C95CB44(a1, a2, a3, a4, (UErrorCode *)a5);
  }
}

uint64_t sub_18C95D8E4(uint64_t *a1, UChar **a2, uint64_t a3, int a4, unsigned int a5, icu::Formattable *a6, double a7)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a1 + 32))
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v33, a2);
    long long v30 = &unk_1EDA44670;
    unint64_t v31 = 0xFFFFFFFF00000001;
    uint64_t v29 = 0;
    memset(v28, 0, sizeof(v28));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v28);
    int v13 = 0;
    int v14 = WORD4(v33) >> 5;
    if (SWORD4(v33) < 0) {
      int v14 = HIDWORD(v33);
    }
    if (v14 >= 1 && v31)
    {
      uint64_t v15 = 0;
      int v13 = 0;
      while (1)
      {
        LODWORD(v31) = 0;
        memset(v32, 0, sizeof(v32));
        icu::Formattable::Formattable((icu::Formattable *)v32);
        sub_18C957FFC(a1[2], (uint64_t)&v33, (uint64_t)&v30, a5, (icu::Formattable *)v32, 0, 10.0);
        UErrorCode v27 = U_ZERO_ERROR;
        char Long = icu::Formattable::getLong((icu::Formattable *)v32, &v27);
        if (!a4) {
          goto LABEL_11;
        }
        if (v31) {
          goto LABEL_12;
        }
        if (v15) {
          break;
        }
        UErrorCode v27 = U_ZERO_ERROR;
        uint64_t Instance = icu::NumberFormat::createInstance((icu::NumberFormat *)&v27, v16);
        uint64_t v15 = Instance;
        if (v27 < U_ILLEGAL_ARGUMENT_ERROR)
        {
          if (Instance) {
            break;
          }
        }
        else if (Instance)
        {
          (*(void (**)(icu::Format *))(*(void *)Instance + 8))(Instance);
          uint64_t v15 = 0;
        }
LABEL_11:
        if (v31)
        {
LABEL_12:
          icu::number::impl::DecimalQuantity::appendDigit((icu::number::impl::DecimalQuantity *)v28, Long, 0, 1);
          ++v13;
          uint64_t v18 = v31;
          *(_DWORD *)(a3 + 8) += v31;
          icu::UnicodeString::doReplace((uint64_t)&v33, 0, v18, 0, 0, 0);
          while (1)
          {
            if (SWORD4(v33) < 0)
            {
              if (*((uint64_t *)&v33 + 1) <= 0) {
                break;
              }
            }
            else if (WORD4(v33) < 0x20u)
            {
              break;
            }
            uint64_t v19 = (_WORD *)((BYTE8(v33) & 2) != 0 ? (unint64_t)&v33 | 0xA : *((void *)&v34 + 1));
            if (*v19 != 32) {
              break;
            }
            icu::UnicodeString::doReplace((uint64_t)&v33, 0, 1, 0, 0, 0);
            ++*(_DWORD *)(a3 + 8);
          }
        }
        icu::Formattable::~Formattable((icu::Formattable *)v32);
        int v20 = WORD4(v33) >> 5;
        if (SWORD4(v33) < 0) {
          int v20 = HIDWORD(v33);
        }
        if (v20 < 1 || v31 == 0)
        {
          if (v15) {
            (*(void (**)(icu::Format *))(*(void *)v15 + 8))(v15);
          }
          goto LABEL_40;
        }
      }
      (*(void (**)(icu::Format *, long long *, _OWORD *, void **))(*(void *)v15 + 160))(v15, &v33, v32, &v30);
      char Long = icu::Formattable::getLong((icu::Formattable *)v32, &v27);
      goto LABEL_11;
    }
LABEL_40:
    icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v28, -v13);
    double v24 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v28);
    double v25 = (*(double (**)(uint64_t *, double, double))(*a1 + 88))(a1, v24, a7);
    icu::Formattable::setDouble(a6, v25);
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v28);
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v30);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v33);
    return 1;
  }
  else
  {
    return sub_18C95CDC8(a1, (uint64_t)a2, a3, a4, a5, a6, a7, 0.0);
  }
}

uint64_t sub_18C95DCF4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_18C95C620(a1, a2);
  if (result) {
    return *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(a1 + 32);
  }
  return result;
}

void *sub_18C95DD30()
{
  return &unk_1E91924E1;
}

void *sub_18C95DD3C()
{
  return &unk_1E91924E2;
}

_DWORD *sub_18C95DD48(uint64_t a1, uint64_t a2, unsigned int a3, int a4, UErrorCode *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  double v10 = (*(double (**)(uint64_t))(*(void *)a1 + 72))(a1);
  uint64_t v11 = sub_18C957F98(v10);
  int64_t v12 = v11;
  int v13 = *(_DWORD **)(a1 + 16);
  if (*(unsigned char *)(a1 + 48)) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    unsigned int v15 = *(unsigned __int16 *)(a2 + 8);
    int v16 = (__int16)v15;
    unsigned int v17 = v15 >> 5;
    unsigned int v18 = *(_DWORD *)(a2 + 12);
    if (v16 >= 0) {
      unsigned int v19 = v17;
    }
    else {
      unsigned int v19 = *(_DWORD *)(a2 + 12);
    }
    uint64_t v20 = 10 * v11;
    if (*(double *)(a1 + 32) > (double)(10 * v11))
    {
      do
      {
        uint64_t v21 = *(_DWORD *)(a1 + 8) + a3;
        v28[0] = 32;
        icu::UnicodeString::doReplace(a2, v21, 0, (uint64_t)v28, 0, 1);
        sub_18C957A7C(v13, 0, (icu::UnicodeString *)a2, *(_DWORD *)(a1 + 8) + a3, a4, a5);
        v20 *= 10;
      }
      while (*(double *)(a1 + 32) > (double)v20);
      int v16 = *(unsigned __int16 *)(a2 + 8);
      unsigned int v18 = *(_DWORD *)(a2 + 12);
      unsigned int v17 = v16 >> 5;
    }
    if ((v16 & 0x8000u) == 0) {
      unsigned int v22 = v17;
    }
    else {
      unsigned int v22 = v18;
    }
    a3 = a3 - v19 + v22;
  }
  if (v10 == (double)v12 && v13 != 0) {
    return sub_18C957A7C(v13, v12, (icu::UnicodeString *)a2, *(_DWORD *)(a1 + 8) + a3, a4, a5);
  }
  if (v13) {
    return sub_18C957C04(v13, (icu::UnicodeString *)a2, *(_DWORD *)(a1 + 8) + a3, a4, a5, v10);
  }
  long long v30 = 0u;
  uint64_t v33 = 0;
  long long v32 = 0u;
  long long v31 = 0u;
  uint64_t v29 = &unk_1EDA47700;
  LOWORD(v30) = 2;
  double v25 = *(icu::Format **)(a1 + 24);
  icu::Formattable::Formattable((icu::Formattable *)v28, v10);
  icu::Format::format(v25, (const icu::Formattable *)v28, (icu::UnicodeString *)&v29, a5);
  icu::Formattable::~Formattable((icu::Formattable *)v28);
  if ((v30 & 0x8000u) == 0) {
    uint64_t v26 = (unsigned __int16)v30 >> 5;
  }
  else {
    uint64_t v26 = DWORD1(v30);
  }
  icu::UnicodeString::doReplace((icu::UnicodeString *)a2, *(_DWORD *)(a1 + 8) + a3, 0, (const icu::UnicodeString *)&v29, 0, v26);
  return icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v29);
}

uint64_t sub_18C95DFCC(uint64_t a1, UChar **a2, uint64_t a3, double a4, double a5, uint64_t a6, unsigned int a7, icu::Formattable *a8)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  UErrorCode v31 = U_ZERO_ERROR;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v33, a2);
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v29 = &unk_1EDA44670;
    unint64_t v30 = 0xFFFFFFFF00000001;
    memset(v32, 0, sizeof(v32));
    icu::Formattable::Formattable((icu::Formattable *)v32);
    int v15 = 0;
    int v16 = WORD4(v33) >> 5;
    if (SWORD4(v33) < 0) {
      int v16 = HIDWORD(v33);
    }
    if (v16 >= 1)
    {
      int v15 = 0;
      do
      {
        LODWORD(v30) = 0;
        sub_18C957FFC(*(void *)(a1 + 16), (uint64_t)&v33, (uint64_t)&v29, a7, (icu::Formattable *)v32, 0, 1.0);
        uint64_t v17 = v30;
        if (!v30) {
          break;
        }
        *(_DWORD *)(a3 + 8) += v30;
        if (v17 == 0x7FFFFFFF)
        {
          __int16 v18 = (BYTE8(v33) & 1) != 0 ? 2 : BYTE8(v33) & 0x1F;
          WORD4(v33) = v18;
        }
        else
        {
          icu::UnicodeString::doReplace((uint64_t)&v33, 0, v17, 0, 0, 0);
        }
        ++v15;
        while (1)
        {
          if (SWORD4(v33) < 0)
          {
            if (*((uint64_t *)&v33 + 1) <= 0) {
              break;
            }
          }
          else if (WORD4(v33) < 0x20u)
          {
            break;
          }
          unsigned int v19 = (_WORD *)*((void *)&v34 + 1);
          if ((BYTE8(v33) & 2) != 0) {
            unsigned int v19 = (_WORD *)((unint64_t)&v33 | 0xA);
          }
          if (*v19 != 32) {
            break;
          }
          icu::UnicodeString::doReplace((uint64_t)&v33, 0, 1, 0, 0, 0);
          ++*(_DWORD *)(a3 + 8);
        }
        int v20 = WORD4(v33) >> 5;
        if (SWORD4(v33) < 0) {
          int v20 = HIDWORD(v33);
        }
      }
      while (v20 >= 1 && v30 != 0);
    }
    icu::UnicodeString::operator=((UChar **)&v33, a2);
    uint64_t v22 = *(unsigned int *)(a3 + 8);
    if (v22 == 0x7FFFFFFF)
    {
      if (BYTE8(v33)) {
        __int16 v23 = 2;
      }
      else {
        __int16 v23 = BYTE8(v33) & 0x1F;
      }
      WORD4(v33) = v23;
    }
    else
    {
      icu::UnicodeString::doReplace((uint64_t)&v33, 0, v22, 0, 0, 0);
    }
    *(_DWORD *)(a3 + 8) = 0;
    icu::Formattable::~Formattable((icu::Formattable *)v32);
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v29);
    if (*(unsigned char *)(a1 + 48)) {
      a4 = 1.0;
    }
  }
  else
  {
    int v15 = 0;
  }
  sub_18C95CDC8((void *)a1, (uint64_t)&v33, a3, 0, a7, a8, a4, a5);
  double v24 = (void *)*(unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48))
  {
    int Long = icu::Formattable::getLong(a8, &v31);
    uint64_t v26 = 1;
    if (Long >= 1)
    {
      do
        v26 *= 10;
      while (v26 <= Long);
    }
    if (v15 >= 1)
    {
      unsigned int v27 = v15 + 1;
      do
      {
        v26 *= 10;
        --v27;
      }
      while (v27 > 1);
    }
    icu::Formattable::setDouble(a8, (double)Long / (double)v26);
  }
  icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v33);
  return 1;
}

uint64_t sub_18C95E324(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_18C95C620(a1, a2);
  if (result) {
    return *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return result;
}

void *sub_18C95E360()
{
  return &unk_1E91924E3;
}

uint64_t sub_18C95E36C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_18C95E380()
{
  return 61;
}

uint64_t sub_18C95E388(uint64_t a1, uint64_t a2, unsigned __int16 a3, _DWORD *a4)
{
  uint64_t result = sub_18C958640(a2, a3);
  *(void *)(a1 + 32) = result;
  if (!result) {
    *a4 = 9;
  }
  return result;
}

uint64_t sub_18C95E3CC(uint64_t a1, uint64_t a2)
{
  return a2 / *(void *)(a1 + 32);
}

double sub_18C95E3D8(void *a1, double a2)
{
  if (!a1[2])
  {
    __int16 v6 = (icu::NumberFormat *)a1[3];
    if (v6)
    {
      if (icu::NumberFormat::getMaximumFractionDigits(v6)) {
        return a2 / (double)(uint64_t)a1[4];
      }
    }
  }
  double v4 = a2 / (double)(uint64_t)a1[4];

  return uprv_floor(v4);
}

double sub_18C95E454(uint64_t a1, double a2)
{
  return (double)*(uint64_t *)(a1 + 32) * a2;
}

double sub_18C95E464(uint64_t a1)
{
  return (double)*(uint64_t *)(a1 + 32);
}

uint64_t sub_18C95E470()
{
  return 60;
}

uint64_t sub_18C95E478(uint64_t a1, uint64_t a2, unsigned __int16 a3, _DWORD *a4)
{
  uint64_t result = sub_18C958640(a2, a3);
  *(void *)(a1 + 32) = result;
  if (!result) {
    *a4 = 9;
  }
  return result;
}

uint64_t sub_18C95E4BC(uint64_t a1, uint64_t a2)
{
  return a2 % *(void *)(a1 + 32);
}

double sub_18C95E4CC(uint64_t a1, long double a2)
{
  return uprv_fmod(a2, (double)*(uint64_t *)(a1 + 32));
}

long double sub_18C95E4D8(uint64_t a1, double a2, long double a3)
{
  return a3 - uprv_fmod(a3, (double)*(uint64_t *)(a1 + 32)) + a2;
}

double sub_18C95E514(uint64_t a1)
{
  return (double)*(uint64_t *)(a1 + 32);
}

uint64_t sub_18C95E520()
{
  return 62;
}

uint64_t sub_18C95E528()
{
  return 1;
}

uint64_t sub_18C95E530(uint64_t a1, uint64_t a2)
{
  return a2;
}

double sub_18C95E53C(double a1, double a2)
{
  return a1 + a2;
}

double sub_18C95E544()
{
  return 1.79769313e308;
}

uint64_t sub_18C95E550()
{
  return 60;
}

uint64_t sub_18C95E55C()
{
  return 0;
}

double sub_18C95E564(double a1)
{
  return a1 - uprv_floor(a1);
}

double sub_18C95E58C(double a1, double a2)
{
  return a1 + a2;
}

double sub_18C95E594()
{
  return 0.0;
}

uint64_t sub_18C95E59C()
{
  return 62;
}

uint64_t sub_18C95E5A4(uint64_t a1, uint64_t a2)
{
  if (a2 >= 0) {
    return a2;
  }
  else {
    return -a2;
  }
}

double sub_18C95E5B4(double a1)
{
  return -a1;
}

double sub_18C95E5BC()
{
  return 1.79769313e308;
}

uint64_t sub_18C95E5C8()
{
  return 62;
}

uint64_t sub_18C95E5D4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 40) * a2;
}

double sub_18C95E5E0(uint64_t a1, double a2)
{
  return uprv_round(*(double *)(a1 + 32) * a2);
}

double sub_18C95E5EC(double a1, double a2)
{
  return a1 / a2;
}

double sub_18C95E5F4(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t sub_18C95E5FC()
{
  return 60;
}

uint64_t sub_18C95E604(uint64_t a1, int a2, uint64_t a3, uint64_t a4, UErrorCode *a5, double a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unsigned int v12 = *(unsigned __int16 *)(a4 + 8);
  int v13 = (__int16)v12;
  unsigned int v14 = v12 >> 5;
  if (v13 < 0) {
    unsigned int v14 = *(_DWORD *)(a4 + 12);
  }
  if (icu::UnicodeString::doEqualsSubstring(a4, v14 - 2, 2, (uint64_t)"<", 0, 2))
  {
    memset(v23, 0, sizeof(v23));
    unsigned int v15 = *(unsigned __int16 *)(a4 + 8);
    int v16 = (__int16)v15;
    unsigned int v17 = v15 >> 5;
    if (v16 < 0) {
      unsigned int v17 = *(_DWORD *)(a4 + 12);
    }
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v23, (const icu::UnicodeString *)a4, 0, v17 - 1);
  }
  else
  {
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v23, (UChar **)a4);
  }
  sub_18C95C324(a1, a2, a3, (UChar **)v23, a5);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v23);
  *(void *)a1 = &unk_1EDA4EB78;
  *(double *)(a1 + 32) = a6;
  *(void *)(a1 + 40) = sub_18C957F98(a6);
  unsigned int v19 = *(unsigned __int16 *)(a4 + 8);
  int v20 = (__int16)v19;
  unsigned int v21 = v19 >> 5;
  if (v20 < 0) {
    unsigned int v21 = *(_DWORD *)(a4 + 12);
  }
  *(unsigned char *)(a1 + 48) = icu::UnicodeString::doEqualsSubstring(a4, v21 - 2, 2, (uint64_t)"<", 0, 2);
  return a1;
}

uint64_t sub_18C95E7A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, UChar **a5, UErrorCode *a6)
{
  *(void *)sub_18C95C324(a1, a2, a4, a5, a6) = &unk_1EDA4E950;
  uint64_t v9 = sub_18C95A278(a3);
  *(void *)(a1 + 32) = v9;
  if (!v9) {
    *a6 = U_PARSE_ERROR;
  }
  return a1;
}

void *icu::NormalizationTransliterator::getStaticClassID(icu::NormalizationTransliterator *this)
{
  return &unk_1E91924E4;
}

void *sub_18C95E828()
{
  return &unk_1E91924E4;
}

void *sub_18C95E834()
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v43 = L"Any-NFC";
  unint64_t v0 = icu::UnicodeString::UnicodeString(v45, 1, &v43);
  icu::Transliterator::_registerFactory(v0, (uint64_t)sub_18C95EBD8, (uint64_t)"nfc");
  uint64_t v2 = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v45);
  v29[6] = v43;
  int v42 = L"Any-NFKC";
  unint64_t v3 = icu::UnicodeString::UnicodeString(v2, 1, &v42);
  icu::Transliterator::_registerFactory(v3, (uint64_t)sub_18C95EBD8, (uint64_t)"nfkc");
  uint64_t v5 = icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v45);
  v29[5] = v42;
  long long v41 = "A";
  unint64_t v6 = icu::UnicodeString::UnicodeString(v5, 1, &v41);
  icu::Transliterator::_registerFactory(v6, (uint64_t)sub_18C95EBD8, (uint64_t)"nfc");
  uint64_t v8 = icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v45);
  v29[4] = v41;
  int v40 = "A";
  unint64_t v9 = icu::UnicodeString::UnicodeString(v8, 1, &v40);
  icu::Transliterator::_registerFactory(v9, (uint64_t)sub_18C95EBD8, (uint64_t)"nfkc");
  uint64_t v11 = icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v45);
  v29[3] = v40;
  unint64_t v39 = L"Any-FCD";
  unint64_t v12 = icu::UnicodeString::UnicodeString(v11, 1, &v39);
  icu::Transliterator::_registerFactory(v12, (uint64_t)sub_18C95EBD8, (uint64_t)&unk_18CA94A96);
  unsigned int v14 = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v45);
  v29[2] = v39;
  int32_t v38 = L"Any-FCC";
  unint64_t v15 = icu::UnicodeString::UnicodeString(v14, 1, &v38);
  icu::Transliterator::_registerFactory(v15, (uint64_t)sub_18C95EBD8, (uint64_t)&unk_18CA94A9C);
  unsigned int v17 = icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v45);
  v29[1] = v38;
  uint64_t v37 = L"NFC";
  icu::UnicodeString::UnicodeString(v17, 1, &v37);
  long long v36 = L"NFD";
  icu::UnicodeString::UnicodeString(v44, 1, &v36);
  icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)v45, (const icu::UnicodeString *)v44, (const icu::UnicodeString *)1);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v44);
  v29[0] = v36;
  unsigned int v19 = icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v45);
  v28[1] = v37;
  long long v35 = L"NFKC";
  icu::UnicodeString::UnicodeString(v19, 1, &v35);
  long long v34 = "N";
  icu::UnicodeString::UnicodeString(v44, 1, &v34);
  icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)v45, (const icu::UnicodeString *)v44, (const icu::UnicodeString *)1);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v44);
  v28[0] = v34;
  unsigned int v21 = icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v45);
  v27[1] = v35;
  long long v33 = L"FCC";
  icu::UnicodeString::UnicodeString(v21, 1, &v33);
  long long v32 = L"NFD";
  icu::UnicodeString::UnicodeString(v44, 1, &v32);
  icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)v45, (const icu::UnicodeString *)v44, 0);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v44);
  v27[0] = v32;
  __int16 v23 = icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v45);
  v26[1] = v33;
  UErrorCode v31 = L"FCD";
  icu::UnicodeString::UnicodeString(v23, 1, &v31);
  unint64_t v30 = L"FCD";
  icu::UnicodeString::UnicodeString(v44, 1, &v30);
  icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)v45, (const icu::UnicodeString *)v44, 0);
  icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v44);
  v26[0] = v30;
  return icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v45);
}

icu::Transliterator *sub_18C95EBD8(UChar **a1, char *__s)
{
  int v4 = __s[strlen(__s) + 1];
  unsigned int v8 = 0;
  uint64_t Instance = icu::Normalizer2::getInstance(0, __s, v4, (int *)&v8);
  uint64_t result = 0;
  if ((int)v8 <= 0)
  {
    uint64_t result = (icu::Transliterator *)icu::UMemory::operator new((uint64_t *)v8, (icu::UMemory *)0x60, v5);
    if (result)
    {
      uint64_t result = icu::Transliterator::Transliterator(result, a1, 0);
      *(void *)uint64_t result = &unk_1EDA4EC20;
      *((void *)result + 11) = Instance;
    }
  }
  return result;
}

void sub_18C95EC78(icu::Transliterator *a1)
{
  icu::Transliterator::~Transliterator(a1);

  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18C95ECA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
  {
    uint64_t result = icu::Transliterator::Transliterator(result, (UChar **)a1);
    *(void *)uint64_t result = &unk_1EDA4EC20;
    *((void *)result + 11) = *(void *)(a1 + 88);
  }
  return result;
}

void *sub_18C95ECF8(void *result, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a3[2];
  int v5 = a3[3];
  if ((int)v4 >= v5) {
    return result;
  }
  unint64_t v9 = result;
  int v21 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v31 = 0;
  long long v30 = 0u;
  uint64_t v26 = 0;
  unsigned int v27 = &unk_1EDA47700;
  LOWORD(v28) = 2;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v22 = &unk_1EDA47700;
  LOWORD(v23) = 2;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v4);
  LODWORD(v11) = v4;
  while (1)
  {
    __int16 v12 = (v28 & 1) != 0 ? 2 : v28 & 0x1F;
    LOWORD(v28) = v12;
    do
    {
      icu::UnicodeString::append((uint64_t)&v27, v10);
      if (v10 < 0x10000) {
        int v13 = 1;
      }
      else {
        int v13 = 2;
      }
      uint64_t v11 = (v13 + v11);
      if ((int)v11 >= v5) {
        break;
      }
      uint64_t v14 = v9[11];
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, v11);
    }
    while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v14 + 120))(v14, v10));
    if (a4
      && v11 == v5
      && !(*(unsigned int (**)(void, uint64_t))(*(void *)v9[11] + 128))(v9[11], v10))
    {
      break;
    }
    (*(void (**)(void, void **, void **, int *))(*(void *)v9[11] + 24))(v9[11], &v27, &v22, &v21);
    if (v21 > 0) {
      goto LABEL_34;
    }
    if ((v28 & 1) == 0)
    {
      if ((v28 & 0x8000u) == 0) {
        int v15 = (unsigned __int16)v28 >> 5;
      }
      else {
        int v15 = DWORD1(v28);
      }
      if ((v23 & 0x8000u) == 0) {
        int v16 = (unsigned __int16)v23 >> 5;
      }
      else {
        int v16 = DWORD1(v23);
      }
      if ((v23 & 1) == 0
        && v15 == v16
        && icu::UnicodeString::doEquals((icu::UnicodeString *)&v27, (const icu::UnicodeString *)&v22, v15))
      {
        goto LABEL_31;
      }
LABEL_28:
      (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a2 + 32))(a2, v4, v11, &v22);
      int v17 = (unsigned __int16)v23 >> 5;
      if ((v23 & 0x8000u) != 0) {
        int v17 = DWORD1(v23);
      }
      int v18 = v4 + v5 - v11;
      uint64_t v11 = (v17 + v4);
      int v5 = v18 + v17;
      goto LABEL_31;
    }
    if ((v23 & 1) == 0) {
      goto LABEL_28;
    }
LABEL_31:
    uint64_t v4 = v11;
    if ((int)v11 >= v5) {
      goto LABEL_34;
    }
  }
  LODWORD(v11) = v4;
LABEL_34:
  unint64_t v19 = (v5 - a3[3] + a3[1]);
  a3[1] = v19;
  a3[2] = v11;
  a3[3] = v5;
  icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v22);
  return icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v27);
}

void *icu::NullTransliterator::getStaticClassID(icu::NullTransliterator *this)
{
  return &unk_1E91924E5;
}

void *sub_18C95F03C()
{
  return &unk_1E91924E5;
}

icu::Transliterator *sub_18C95F048(icu::Transliterator *a1)
{
  v5[8] = *(UChar **)MEMORY[0x1E4F143B8];
  uint64_t v4 = L"Any-Null";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  icu::Transliterator::Transliterator(a1, v5, 0);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(void *)a1 = &unk_1EDA4ECD0;
  return a1;
}

void sub_18C95F108(icu::Transliterator *a1)
{
  icu::Transliterator::~Transliterator(a1);

  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18C95F130@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a2, (icu::UMemory *)0x58, a1);
  if (result) {
    return sub_18C95F048(result);
  }
  return result;
}

void sub_18C95F154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a3 + 12);
}

uint64_t icu::number::impl::AffixUtils::estimateLength(icu::number::impl::AffixUtils *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v3 = *((unsigned __int16 *)this + 4);
  int v4 = (__int16)v3;
  LODWORD(v5) = v3 >> 5;
  if (v4 >= 0) {
    unint64_t v5 = v5;
  }
  else {
    unint64_t v5 = *((unsigned int *)this + 3);
  }
  if ((int)v5 < 1) {
    return 0;
  }
  LODWORD(v8) = 0;
  int v9 = 0;
  int v10 = 0;
  while (2)
  {
    unsigned int v11 = icu::UnicodeString::char32At((uint64_t *)v5, this, v9);
    switch(v10)
    {
      case 0:
        int v10 = v11 == 39;
        BOOL v12 = v11 != 39;
        goto LABEL_16;
      case 1:
        int v10 = 2 * (v11 != 39);
        goto LABEL_15;
      case 2:
        BOOL v12 = v11 != 39;
        if (v11 == 39) {
          int v10 = 3;
        }
        else {
          int v10 = 2;
        }
        goto LABEL_16;
      case 3:
        if (v11 == 39) {
          int v10 = 2;
        }
        else {
          int v10 = 3;
        }
LABEL_15:
        BOOL v12 = 1;
LABEL_16:
        uint64_t v8 = (v8 + v12);
        if (v11 < 0x10000) {
          int v13 = 1;
        }
        else {
          int v13 = 2;
        }
        v9 += v13;
        unsigned int v14 = *((unsigned __int16 *)this + 4);
        int v15 = (__int16)v14;
        LODWORD(v5) = v14 >> 5;
        if (v15 >= 0) {
          unint64_t v5 = v5;
        }
        else {
          unint64_t v5 = *((unsigned int *)this + 3);
        }
        if (v9 < (int)v5) {
          continue;
        }
        if ((v10 - 1) <= 1) {
          *(_DWORD *)a2 = 1;
        }
        break;
      default:
        abort();
    }
    return v8;
  }
}

uint64_t icu::number::impl::AffixUtils::escape@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  unsigned int v4 = *(unsigned __int16 *)(this + 8);
  int v5 = (__int16)v4;
  LODWORD(a2) = v4 >> 5;
  if (v5 >= 0) {
    a2 = a2;
  }
  else {
    a2 = *(unsigned int *)(this + 12);
  }
  if ((int)a2 >= 1)
  {
    uint64_t v6 = this;
    int v7 = 0;
    int v8 = 0;
    while (2)
    {
      unsigned int v9 = icu::UnicodeString::char32At((uint64_t *)a2, (icu::UnicodeString *)v6, v7);
      unsigned int v10 = v9;
      switch(v9)
      {
        case '%':
        case '+':
        case '-':
          goto LABEL_10;
        case '&':
        case '(':
        case ')':
        case '*':
        case ',':
          goto LABEL_12;
        case '\'':
          this = icu::UnicodeString::doAppend(v3, (uint64_t)"'", 0, 0xFFFFFFFFLL);
          goto LABEL_14;
        default:
          if (v9 == 164 || v9 == 8240)
          {
LABEL_10:
            if (!v8)
            {
              __int16 v14 = 39;
              icu::UnicodeString::doAppend(v3, (uint64_t)&v14, 0, 1);
              this = icu::UnicodeString::append(v3, v10);
              int v8 = 2;
              goto LABEL_14;
            }
LABEL_13:
            this = icu::UnicodeString::append(v3, v9);
            goto LABEL_14;
          }
LABEL_12:
          if (v8 != 2) {
            goto LABEL_13;
          }
          __int16 v15 = 39;
          icu::UnicodeString::doAppend(v3, (uint64_t)&v15, 0, 1);
          this = icu::UnicodeString::append(v3, v10);
          int v8 = 0;
LABEL_14:
          if (v10 < 0x10000) {
            int v11 = 1;
          }
          else {
            int v11 = 2;
          }
          v7 += v11;
          unsigned int v12 = *(unsigned __int16 *)(v6 + 8);
          int v13 = (__int16)v12;
          LODWORD(a2) = v12 >> 5;
          if (v13 >= 0) {
            a2 = a2;
          }
          else {
            a2 = *(unsigned int *)(v6 + 12);
          }
          if (v7 < (int)a2) {
            continue;
          }
          if (v8 == 2)
          {
            __int16 v16 = 39;
            this = icu::UnicodeString::doAppend(v3, (uint64_t)&v16, 0, 1);
          }
          break;
      }
      break;
    }
  }
  return this;
}

uint64_t icu::number::impl::AffixUtils::getFieldForType(unsigned int a1)
{
  if (a1 <= 0xFFFFFFF0 || ((0x7FE1u >> (a1 + 15)) & 1) == 0) {
    abort();
  }
  return byte_18CA94B26[a1 + 15];
}

uint64_t icu::number::impl::AffixUtils::unescape(icu::UnicodeString *a1, icu::FormattedStringBuilder *a2, int a3, uint64_t a4, char a5, UErrorCode *a6)
{
  v29[8] = *MEMORY[0x1E4F143B8];
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v12 = 0;
  if (icu::number::impl::AffixUtils::hasNext((unsigned int *)&v27, (uint64_t)a1))
  {
    char v26 = a5;
    uint64_t v13 = v27;
    int v14 = v28;
    do
    {
      unint64_t Token = icu::number::impl::AffixUtils::nextToken(v13, v14, a1, a6);
      unint64_t v27 = Token;
      unint64_t v28 = v16;
      if (*(int *)a6 > 0) {
        return v12;
      }
      uint64_t v13 = Token;
      int v14 = v16;
      unint64_t v17 = HIDWORD(v16);
      if (HIDWORD(v16) == -15)
      {
        int v18 = v12 + a3;
        unint64_t v19 = a2;
        LODWORD(v20) = 65533;
        char v21 = 39;
      }
      else
      {
        if ((v16 & 0x8000000000000000) != 0)
        {
          (*(void (**)(void *__return_ptr, uint64_t, unint64_t))(*(void *)a4 + 16))(v29, a4, HIDWORD(v16));
          char FieldForType = icu::number::impl::AffixUtils::getFieldForType(v17);
          int inserted = icu::FormattedStringBuilder::insert(a2, (int)v12 + a3, (uint64_t)v29, FieldForType, 0, a6);
          icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v29);
          goto LABEL_9;
        }
        unint64_t v20 = HIDWORD(Token);
        unint64_t v19 = a2;
        int v18 = v12 + a3;
        char v21 = v26;
      }
      int inserted = icu::FormattedStringBuilder::insertCodePoint(v19, v18, v20, v21, a6);
LABEL_9:
      uint64_t v12 = (inserted + v12);
    }
    while ((icu::number::impl::AffixUtils::hasNext((unsigned int *)&v27, (uint64_t)a1) & 1) != 0);
  }
  return v12;
}

uint64_t icu::number::impl::AffixUtils::hasNext(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if ((v2 & 0x80000000) != 0) {
    return 0;
  }
  if (v2)
  {
    unsigned int v3 = a1[2];
    if (v3)
    {
      if (v3 == 2)
      {
        unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
        unsigned int v5 = *(__int16 *)(a2 + 8) < 0 ? *(_DWORD *)(a2 + 12) : v4 >> 5;
        if (v2 == v5 - 1 && v5 > v2)
        {
          uint64_t v13 = (v4 & 2) != 0 ? a2 + 10 : *(void *)(a2 + 24);
          if (*(_WORD *)(v13 + 2 * v2) == 39) {
            return 0;
          }
        }
      }
      return 1;
    }
    else
    {
      unsigned int v10 = *(unsigned __int16 *)(a2 + 8);
      int v11 = (__int16)v10;
      int v12 = v10 >> 5;
      if (v11 < 0) {
        int v12 = *(_DWORD *)(a2 + 12);
      }
      return (int)v2 < v12;
    }
  }
  else
  {
    unsigned int v6 = *(unsigned __int16 *)(a2 + 8);
    int v7 = (__int16)v6;
    signed int v8 = v6 >> 5;
    if (v7 < 0) {
      signed int v8 = *(_DWORD *)(a2 + 12);
    }
    return v8 > 0;
  }
}

unint64_t icu::number::impl::AffixUtils::nextToken(uint64_t a1, int a2, icu::UnicodeString *this, _DWORD *a4)
{
  int v6 = a1;
  unsigned int v7 = *((unsigned __int16 *)this + 4);
  int v8 = (__int16)v7;
  LODWORD(v9) = v7 >> 5;
  if (v8 >= 0) {
    unint64_t v9 = v9;
  }
  else {
    unint64_t v9 = *((unsigned int *)this + 3);
  }
  if ((int)v9 <= (int)a1)
  {
LABEL_35:
    unsigned int v14 = -1;
    switch(a2)
    {
      case 0:
      case 3:
        return v14 | (unint64_t)(a1 << 32);
      case 1:
      case 2:
        *a4 = 1;
        unsigned int v14 = -1;
        return v14 | (unint64_t)(a1 << 32);
      case 4:
        a1 = 0;
        goto LABEL_43;
      case 5:
        goto LABEL_37;
      case 6:
        goto LABEL_38;
      case 7:
        goto LABEL_39;
      case 8:
        goto LABEL_40;
      case 9:
        goto LABEL_41;
      default:
        goto LABEL_57;
    }
  }
  while (1)
  {
    a1 = (uint64_t)icu::UnicodeString::char32At((uint64_t *)v9, this, v6);
    if (a1 < 0x10000) {
      int v11 = 1;
    }
    else {
      int v11 = 2;
    }
    switch(a2)
    {
      case 0:
        if ((int)a1 <= 125)
        {
          switch((int)a1)
          {
            case '%':
              a1 = 0;
              unsigned int v14 = v11 + v6;
              return v14 | (unint64_t)(a1 << 32);
            case '\'':
              v6 += v11;
              a2 = 1;
              goto LABEL_28;
            case '+':
              a1 = 0;
              unsigned int v14 = v11 + v6;
              return v14 | (unint64_t)(a1 << 32);
            case '-':
              a1 = 0;
              unsigned int v14 = v11 + v6;
              return v14 | (unint64_t)(a1 << 32);
            default:
              goto LABEL_56;
          }
        }
        switch(a1)
        {
          case 0xA4:
            v6 += v11;
            a2 = 4;
            goto LABEL_28;
          case 0x7E:
            a1 = 0;
            unsigned int v14 = v11 + v6;
            break;
          case 0x2030:
            a1 = 0;
            unsigned int v14 = v11 + v6;
            break;
          default:
LABEL_56:
            unsigned int v14 = v11 + v6;
            break;
        }
        return v14 | (unint64_t)(a1 << 32);
      case 1:
        unsigned int v14 = v11 + v6;
        return v14 | (unint64_t)(a1 << 32);
      case 2:
        v6 += v11;
        if (a1 != 39) {
          goto LABEL_43;
        }
        a2 = 3;
        break;
      case 3:
        if (a1 == 39)
        {
          unsigned int v14 = v11 + v6;
          a1 = 39;
          return v14 | (unint64_t)(a1 << 32);
        }
        a2 = 0;
        break;
      case 4:
        if (a1 != 164)
        {
          a1 = 0;
          goto LABEL_43;
        }
        v6 += v11;
        a2 = 5;
        break;
      case 5:
        if (a1 != 164)
        {
LABEL_37:
          a1 = 0;
LABEL_43:
          unsigned int v14 = v6;
          return v14 | (unint64_t)(a1 << 32);
        }
        v6 += v11;
        a2 = 6;
        break;
      case 6:
        if (a1 != 164)
        {
LABEL_38:
          a1 = 0;
          goto LABEL_43;
        }
        v6 += v11;
        a2 = 7;
        break;
      case 7:
        if (a1 != 164)
        {
LABEL_39:
          a1 = 0;
          goto LABEL_43;
        }
        v6 += v11;
        a2 = 8;
        break;
      case 8:
        if (a1 == 164) {
          goto LABEL_27;
        }
LABEL_40:
        a1 = 0;
        goto LABEL_43;
      case 9:
        if (a1 != 164)
        {
LABEL_41:
          a1 = 0;
          goto LABEL_43;
        }
LABEL_27:
        v6 += v11;
        a2 = 9;
        break;
      default:
LABEL_57:
        abort();
    }
LABEL_28:
    unsigned int v12 = *((unsigned __int16 *)this + 4);
    int v13 = (__int16)v12;
    LODWORD(v9) = v12 >> 5;
    if (v13 >= 0) {
      unint64_t v9 = v9;
    }
    else {
      unint64_t v9 = *((unsigned int *)this + 3);
    }
    if (v6 >= (int)v9) {
      goto LABEL_35;
    }
  }
}

uint64_t icu::number::impl::AffixUtils::unescapedCodePointCount(icu::number::impl::AffixUtils *this, const icu::UnicodeString *a2, const icu::number::impl::SymbolProvider *a3, UErrorCode *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v7 = 0;
  if (icu::number::impl::AffixUtils::hasNext((unsigned int *)&v15, (uint64_t)this))
  {
    uint64_t v8 = v15;
    int v9 = v16;
    do
    {
      unint64_t Token = icu::number::impl::AffixUtils::nextToken(v8, v9, this, a3);
      unint64_t v15 = Token;
      uint64_t v16 = v11;
      if (*(int *)a3 > 0) {
        break;
      }
      uint64_t v8 = Token;
      int v9 = v11;
      if (HIDWORD(v11) == -15)
      {
        uint64_t v7 = (v7 + 1);
      }
      else if (v11 < 0)
      {
        (*(void (**)(uint64_t *__return_ptr, const icu::UnicodeString *))(*(void *)a2 + 16))(&v17, a2);
        LODWORD(v13) = v18 >> 5;
        int v13 = (v18 & 0x8000u) == 0 ? (void *)v13 : (void *)v19;
        uint64_t v7 = (v13 + v7);
        icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v17);
      }
      else
      {
        int v12 = HIWORD(Token) ? 2 : 1;
        uint64_t v7 = (v12 + v7);
      }
    }
    while ((icu::number::impl::AffixUtils::hasNext((unsigned int *)&v15, (uint64_t)this) & 1) != 0);
  }
  return v7;
}

uint64_t icu::number::impl::AffixUtils::containsType(uint64_t a1, int a2, int *a3)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  int v4 = (__int16)v3;
  unsigned int v5 = v3 >> 5;
  if (v4 < 0) {
    unsigned int v5 = *(_DWORD *)(a1 + 12);
  }
  if (!v5) {
    return 0;
  }
  int v9 = 0;
  uint64_t v10 = 0;
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  while (1)
  {
    uint64_t result = icu::number::impl::AffixUtils::hasNext((unsigned int *)&v14, a1);
    if (!result) {
      break;
    }
    unint64_t Token = icu::number::impl::AffixUtils::nextToken(v10, v9, (icu::UnicodeString *)a1, a3);
    unint64_t v14 = Token;
    uint64_t v15 = v13;
    if (*a3 > 0) {
      return 0;
    }
    uint64_t v10 = Token;
    int v9 = v13;
    if (HIDWORD(v13) == a2) {
      return 1;
    }
  }
  return result;
}

uint64_t icu::number::impl::AffixUtils::hasCurrencySymbols(icu::number::impl::AffixUtils *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v3 = *((unsigned __int16 *)this + 4);
  int v4 = (__int16)v3;
  unsigned int v5 = v3 >> 5;
  if (v4 < 0) {
    unsigned int v5 = *((_DWORD *)this + 3);
  }
  if (v5)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t result = icu::number::impl::AffixUtils::hasNext((unsigned int *)&v13, (uint64_t)this);
    if (!result) {
      return result;
    }
    uint64_t v9 = v13;
    int v10 = v14;
    do
    {
      unint64_t Token = icu::number::impl::AffixUtils::nextToken(v9, v10, this, a2);
      unint64_t v13 = Token;
      uint64_t v14 = v12;
      if (*(int *)a2 > 0) {
        break;
      }
      uint64_t v9 = Token;
      int v10 = v12;
      if (v12 < 0 && icu::number::impl::AffixUtils::getFieldForType(HIDWORD(v12)) == 39) {
        return 1;
      }
    }
    while ((icu::number::impl::AffixUtils::hasNext((unsigned int *)&v13, (uint64_t)this) & 1) != 0);
  }
  return 0;
}

uint64_t icu::number::impl::AffixUtils::replaceType@<X0>(UChar **a1@<X0>, int a2@<W1>, __int16 a3@<W2>, int *a4@<X3>, icu::UnicodeString *a5@<X8>)
{
  *((_OWORD *)a5 + 2) = 0u;
  *((_OWORD *)a5 + 3) = 0u;
  *(_OWORD *)a5 = 0u;
  *((_OWORD *)a5 + 1) = 0u;
  uint64_t result = (uint64_t)icu::UnicodeString::UnicodeString(a5, a1);
  unsigned int v11 = *((unsigned __int16 *)a1 + 4);
  int v12 = (__int16)v11;
  unsigned int v13 = v11 >> 5;
  if (v12 < 0) {
    unsigned int v13 = *((_DWORD *)a1 + 3);
  }
  if (v13)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t result = icu::number::impl::AffixUtils::hasNext((unsigned int *)&v17, (uint64_t)a1);
    if (result)
    {
      uint64_t v14 = v17;
      int v15 = v18;
      do
      {
        uint64_t result = icu::number::impl::AffixUtils::nextToken(v14, v15, (icu::UnicodeString *)a1, a4);
        uint64_t v17 = result;
        uint64_t v18 = v16;
        if (*a4 > 0) {
          break;
        }
        uint64_t v14 = result;
        int v15 = v16;
        if (HIDWORD(v16) == a2)
        {
          __int16 v19 = a3;
          icu::UnicodeString::doReplace((uint64_t)a5, (result - 1), 1, (uint64_t)&v19, 0, 1);
        }
        uint64_t result = icu::number::impl::AffixUtils::hasNext((unsigned int *)&v17, (uint64_t)a1);
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

uint64_t icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables(icu::number::impl::AffixUtils *this, const icu::UnicodeString *a2, const icu::UnicodeSet *a3, UErrorCode *a4)
{
  unsigned int v4 = *((unsigned __int16 *)this + 4);
  int v5 = (__int16)v4;
  unsigned int v6 = v4 >> 5;
  if (v5 < 0) {
    unsigned int v6 = *((_DWORD *)this + 3);
  }
  if (!v6) {
    return 1;
  }
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  if (!icu::number::impl::AffixUtils::hasNext((unsigned int *)&v15, (uint64_t)this)) {
    return 1;
  }
  uint64_t v10 = v15;
  int v11 = v16;
  while (1)
  {
    unint64_t Token = icu::number::impl::AffixUtils::nextToken(v10, v11, this, a3);
    unint64_t v15 = Token;
    unint64_t v16 = v13;
    if (*(int *)a3 > 0) {
      break;
    }
    uint64_t v10 = Token;
    int v11 = v13;
    if (!HIDWORD(v13))
    {
      uint64_t result = icu::UnicodeSet::contains(a2, SHIDWORD(Token));
      if (!result) {
        return result;
      }
    }
    if ((icu::number::impl::AffixUtils::hasNext((unsigned int *)&v15, (uint64_t)this) & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

unint64_t icu::number::impl::AffixUtils::iterateWithConsumer(unint64_t result, uint64_t a2, int *a3)
{
  unsigned int v3 = *(unsigned __int16 *)(result + 8);
  int v4 = (__int16)v3;
  unsigned int v5 = v3 >> 5;
  if (v4 < 0) {
    unsigned int v5 = *(_DWORD *)(result + 12);
  }
  if (v5)
  {
    uint64_t v8 = (icu::UnicodeString *)result;
    int v9 = 0;
    uint64_t v10 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      uint64_t result = icu::number::impl::AffixUtils::hasNext((unsigned int *)&v12, (uint64_t)v8);
      if (!result) {
        break;
      }
      uint64_t result = icu::number::impl::AffixUtils::nextToken(v10, v9, v8, a3);
      unint64_t v12 = result;
      unint64_t v13 = v11;
      if (*a3 > 0) {
        break;
      }
      uint64_t v10 = result;
      int v9 = v11;
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, int *))(*(void *)a2 + 16))(a2, HIDWORD(v11), HIDWORD(result), a3);
    }
    while (*a3 < 1);
  }
  return result;
}

void *icu::number::impl::LocalizedNumberFormatterAsFormat::getStaticClassID(icu::number::impl::LocalizedNumberFormatterAsFormat *this)
{
  return &unk_1E91924E6;
}

void *icu::number::impl::LocalizedNumberFormatterAsFormat::getDynamicClassID(icu::number::impl::LocalizedNumberFormatterAsFormat *this)
{
  return &unk_1E91924E6;
}

icu::number::impl::LocalizedNumberFormatterAsFormat *icu::number::impl::LocalizedNumberFormatterAsFormat::LocalizedNumberFormatterAsFormat(icu::number::impl::LocalizedNumberFormatterAsFormat *this, const icu::number::LocalizedNumberFormatter *a2, const char **a3)
{
  unsigned int v6 = (void *)icu::Format::Format((uint64_t)this);
  void *v6 = &unk_1EDA4EDC8;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(v6 + 41), a2);
  icu::Locale::Locale((icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 824), (uint64_t)a3);
  icu::Format::setLocaleIDs(this, a3[5], a3[5]);
  return this;
}

void icu::number::impl::LocalizedNumberFormatterAsFormat::~LocalizedNumberFormatterAsFormat(icu::number::impl::LocalizedNumberFormatterAsFormat *this)
{
  *(void *)this = &unk_1EDA4EDC8;
  icu::Locale::~Locale((icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 824));
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 328));

  icu::Format::~Format(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::number::impl::LocalizedNumberFormatterAsFormat::~LocalizedNumberFormatterAsFormat(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::number::impl::LocalizedNumberFormatterAsFormat::operator==(int a1, void *lpsrc)
{
  {
    icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::toSkeleton();
  }
  return 0;
}

uint64_t *icu::number::impl::LocalizedNumberFormatterAsFormat::clone@<X0>(icu::number::impl::LocalizedNumberFormatterAsFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x418, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Format::Format((uint64_t)v4, (uint64_t)this);
    uint64_t *v5 = (uint64_t)&unk_1EDA4EDC8;
    icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(v5 + 41), (icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 328));
    icu::Locale::Locale((icu::Locale *)(v5 + 103), (uint64_t)this + 824);
  }
  return v5;
}

icu::UnicodeString *icu::number::impl::LocalizedNumberFormatterAsFormat::format(icu::number::impl::LocalizedNumberFormatterAsFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    memset(v22, 0, sizeof(v22));
    sub_18C9140A8((uint64_t)v22);
    icu::Formattable::populateDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)v23, a5);
    if (*(int *)a5 > 0
      || (icu::number::LocalizedNumberFormatter::formatImpl((icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 328), (icu::number::impl::UFormattedNumberData *)v22, a5), *(int *)a5 > 0))
    {
LABEL_16:
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v22);
      return a3;
    }
    *((_DWORD *)a4 + 3) = 0;
    *((_DWORD *)a4 + 4) = 0;
    if (icu::FormattedValueStringBuilderImpl::nextFieldPosition((icu::FormattedValueStringBuilderImpl *)v22, a4, a5))
    {
      if (*((__int16 *)a3 + 4) < 0)
      {
        unsigned int v11 = *((_DWORD *)a3 + 3);
        if (v11) {
          goto LABEL_9;
        }
      }
      else
      {
        unsigned int v10 = *((unsigned __int16 *)a3 + 4);
        if (v10 >= 0x20)
        {
          unsigned int v11 = v10 >> 5;
LABEL_9:
          int v12 = *((_DWORD *)a4 + 4);
          *((_DWORD *)a4 + 3) += v11;
          unsigned int v13 = *((unsigned __int16 *)a3 + 4);
          int v14 = (__int16)v13;
          unsigned int v15 = v13 >> 5;
          if (v14 < 0) {
            unsigned int v15 = *((_DWORD *)a3 + 3);
          }
          *((_DWORD *)a4 + 4) = v15 + v12;
        }
      }
    }
    icu::FormattedValueStringBuilderImpl::toTempString((icu::FormattedValueStringBuilderImpl *)v22, (uint64_t)&v19);
    if ((v20 & 0x8000u) == 0) {
      uint64_t v16 = v20 >> 5;
    }
    else {
      uint64_t v16 = v21;
    }
    icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)&v19, 0, v16);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v19);
    goto LABEL_16;
  }
  return a3;
}

icu::UnicodeString *icu::number::impl::LocalizedNumberFormatterAsFormat::format(icu::number::impl::LocalizedNumberFormatterAsFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(int *)a5 <= 0)
  {
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    memset(v15, 0, sizeof(v15));
    sub_18C9140A8((uint64_t)v15);
    icu::Formattable::populateDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)v16, a5);
    if (*(int *)a5 <= 0)
    {
      icu::number::LocalizedNumberFormatter::formatImpl((icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 328), (icu::number::impl::UFormattedNumberData *)v15, a5);
      if (*(int *)a5 <= 0)
      {
        icu::FormattedValueStringBuilderImpl::toTempString((icu::FormattedValueStringBuilderImpl *)v15, (uint64_t)v13);
        if ((SWORD4(v13[0]) & 0x8000u) == 0) {
          uint64_t v10 = WORD4(v13[0]) >> 5;
        }
        else {
          uint64_t v10 = HIDWORD(v13[0]);
        }
        icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)v13, 0, v10);
        icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v13);
        if (a4)
        {
          uint64_t v14 = 0;
          memset(v13, 0, sizeof(v13));
          icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v13, a4, a5);
          icu::FormattedValueStringBuilderImpl::getAllFieldPositions((icu::FormattedValueStringBuilderImpl *)v15, (icu::FieldPositionIteratorHandler *)v13, a5);
          icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v13);
        }
      }
    }
    icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v15);
  }
  return a3;
}

void icu::number::impl::LocalizedNumberFormatterAsFormat::parseObject(icu::number::impl::LocalizedNumberFormatterAsFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  *((_DWORD *)a4 + 3) = 0;
}

uint64_t icu::number::impl::LocalizedNumberFormatterAsFormat::getNumberFormatter(icu::number::impl::LocalizedNumberFormatterAsFormat *this)
{
  return (uint64_t)this + 328;
}

icu::number::impl::LocalizedNumberFormatterAsFormat *icu::number::LocalizedNumberFormatter::toFormat(const char **this, UErrorCode *a2)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 > 0) {
    return 0;
  }
  unsigned int v6 = (icu::number::impl::LocalizedNumberFormatterAsFormat *)icu::UMemory::operator new(v2, (icu::UMemory *)0x418, (unint64_t)a2);
  if (v6) {
    return icu::number::impl::LocalizedNumberFormatterAsFormat::LocalizedNumberFormatterAsFormat(v6, (const icu::number::LocalizedNumberFormatter *)this, this + 31);
  }
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t result = 0;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

uint64_t sub_18C960700(uint64_t a1, uint64_t a2)
{
  icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)(a1 + 304), a2 + 304);
  icu::MeasureUnit::operator=(a1 + 376, a2 + 376);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  return a1;
}

uint64_t *unumf_openResult(_DWORD *a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)*a1;
  if ((int)v2 > 0) {
    return 0;
  }
  unsigned int v5 = icu::UMemory::operator new(v2, (icu::UMemory *)0x1C8, a2);
  unsigned int v3 = v5;
  if (v5)
  {
    *(_DWORD *)unsigned int v5 = 1430672896;
    v5[1] = 0;
    *((_DWORD *)v5 + 4) = 1178881536;
    v5[3] = (uint64_t)&unk_1EDA4F7C0;
    v5[4] = (uint64_t)(v5 + 6);
    *((_DWORD *)v5 + 10) = 0;
    sub_18C9140A8((uint64_t)(v5 + 6));
    v3[1] = (uint64_t)(v3 + 3);
  }
  else
  {
    *a1 = 7;
  }
  return v3;
}

uint64_t unumf_resultAsValue(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1178881536) {
      goto LABEL_8;
    }
    int v2 = 3;
  }
  else
  {
    int v2 = 1;
  }
  uint64_t result = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0;
  }
  return result;
}

void unumf_closeResult(_DWORD *a1)
{
  if (a1 && a1[4] == 1178881536)
  {
    *((void *)a1 + 4) = 0;
    icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)(a1 + 12));
    icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)(a1 + 6));
    a1[4] = 0;
    *a1 = 0;
    icu::UMemory::operator delete(a1);
  }
}

uint64_t sub_18C9608B0(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    a1 = 0;
    goto LABEL_8;
  }
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1178881536) {
      goto LABEL_8;
    }
    int v2 = 3;
  }
  else
  {
    int v2 = 1;
  }
  a1 = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0;
  }
  else {
    return a1 + 352;
  }
}

uint64_t *unumf_openForSkeletonAndLocale(uint64_t a1, unint64_t a2, const char *a3, UErrorCode *a4)
{
  int v6 = a2;
  char v26 = (uint64_t *)*MEMORY[0x1E4F143B8];
  uint64_t v8 = icu::UMemory::operator new(v26, (icu::UMemory *)0x1F8, a2);
  int v9 = v8;
  if (v8)
  {
    v8[62] = 0;
    *((_OWORD *)v8 + 29) = 0u;
    *((_OWORD *)v8 + 30) = 0u;
    *((_OWORD *)v8 + 27) = 0u;
    *((_OWORD *)v8 + 28) = 0u;
    *((_OWORD *)v8 + 25) = 0u;
    *((_OWORD *)v8 + 26) = 0u;
    *((_OWORD *)v8 + 23) = 0u;
    *((_OWORD *)v8 + 24) = 0u;
    *((_OWORD *)v8 + 21) = 0u;
    *((_OWORD *)v8 + 22) = 0u;
    *((_OWORD *)v8 + 19) = 0u;
    *((_OWORD *)v8 + 20) = 0u;
    *((_OWORD *)v8 + 17) = 0u;
    *((_OWORD *)v8 + 18) = 0u;
    *((_OWORD *)v8 + 15) = 0u;
    *((_OWORD *)v8 + 16) = 0u;
    *((_OWORD *)v8 + 13) = 0u;
    *((_OWORD *)v8 + 14) = 0u;
    *((_OWORD *)v8 + 11) = 0u;
    *((_OWORD *)v8 + 12) = 0u;
    *((_OWORD *)v8 + 9) = 0u;
    *((_OWORD *)v8 + 10) = 0u;
    *((_OWORD *)v8 + 7) = 0u;
    *((_OWORD *)v8 + 8) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *((_OWORD *)v8 + 6) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    *(_DWORD *)uint64_t v8 = 1313231360;
    *((_OWORD *)v8 + 2) = 0u;
    sub_18C913B28((uint64_t)(v8 + 1));
    v9[60] = 0;
    v9[61] = 0;
    v9[62] = 0;
    memset(v25, 0, sizeof(v25));
    uint64_t v14 = a1;
    uint64_t v10 = (UChar **)icu::UnicodeString::UnicodeString(v25, v6 == -1, &v14);
    icu::number::NumberFormatter::forSkeleton(v10, a4, &v16);
    icu::Locale::Locale(v11, (icu::Locale *)v15, a3, 0, 0, 0);
    icu::number::UnlocalizedNumberFormatter::locale((uint64_t)&v16, (uint64_t)v15, (uint64_t)v24);
    icu::number::LocalizedNumberFormatter::operator=((uint64_t)(v9 + 1), (uint64_t)v24);
    icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v24);
    icu::Locale::~Locale((icu::Locale *)v15);
    icu::Locale::~Locale((icu::Locale *)&v23);
    icu::number::impl::StringProp::~StringProp(&v22);
    icu::number::impl::StringProp::~StringProp(&v21);
    icu::number::Scale::~Scale((icu::number::Scale *)&v20);
    icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v19);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v18);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v17);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v25);
  }
  else
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return v9;
}

uint64_t *unumf_openForSkeletonAndLocaleWithError(uint64_t a1, unint64_t a2, const char *a3, const icu::UnicodeString *a4, UParseError *a5)
{
  int v8 = a2;
  uint64_t v32 = (uint64_t *)*MEMORY[0x1E4F143B8];
  uint64_t v10 = icu::UMemory::operator new(v32, (icu::UMemory *)0x1F8, a2);
  unsigned int v11 = v10;
  if (v10)
  {
    v10[62] = 0;
    *((_OWORD *)v10 + 29) = 0u;
    *((_OWORD *)v10 + 30) = 0u;
    *((_OWORD *)v10 + 27) = 0u;
    *((_OWORD *)v10 + 28) = 0u;
    *((_OWORD *)v10 + 25) = 0u;
    *((_OWORD *)v10 + 26) = 0u;
    *((_OWORD *)v10 + 23) = 0u;
    *((_OWORD *)v10 + 24) = 0u;
    *((_OWORD *)v10 + 21) = 0u;
    *((_OWORD *)v10 + 22) = 0u;
    *((_OWORD *)v10 + 19) = 0u;
    *((_OWORD *)v10 + 20) = 0u;
    *((_OWORD *)v10 + 17) = 0u;
    *((_OWORD *)v10 + 18) = 0u;
    *((_OWORD *)v10 + 15) = 0u;
    *((_OWORD *)v10 + 16) = 0u;
    *((_OWORD *)v10 + 13) = 0u;
    *((_OWORD *)v10 + 14) = 0u;
    *((_OWORD *)v10 + 11) = 0u;
    *((_OWORD *)v10 + 12) = 0u;
    *((_OWORD *)v10 + 9) = 0u;
    *((_OWORD *)v10 + 10) = 0u;
    *((_OWORD *)v10 + 7) = 0u;
    *((_OWORD *)v10 + 8) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 6) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((_OWORD *)v10 + 4) = 0u;
    *(_OWORD *)uint64_t v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    *(_DWORD *)uint64_t v10 = 1313231360;
    *((_OWORD *)v10 + 2) = 0u;
    sub_18C913B28((uint64_t)(v10 + 1));
    v11[60] = 0;
    v11[61] = 0;
    v11[62] = 0;
    memset(v31, 0, 64);
    uint64_t v20 = a1;
    int v12 = (icu::number::NumberFormatter *)icu::UnicodeString::UnicodeString(v31, v8 == -1, &v20);
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    if (a4) {
      uint64_t v14 = a4;
    }
    else {
      uint64_t v14 = (const icu::UnicodeString *)v18;
    }
    icu::number::NumberFormatter::forSkeleton(v22, v12, v14, a5, v13);
    icu::Locale::Locale(v15, (icu::Locale *)v21, a3, 0, 0, 0);
    icu::number::UnlocalizedNumberFormatter::locale((uint64_t)v22, (uint64_t)v21, (uint64_t)v30);
    icu::number::LocalizedNumberFormatter::operator=((uint64_t)(v11 + 1), (uint64_t)v30);
    icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v30);
    icu::Locale::~Locale((icu::Locale *)v21);
    icu::Locale::~Locale((icu::Locale *)&v29);
    icu::number::impl::StringProp::~StringProp(&v28);
    icu::number::impl::StringProp::~StringProp(&v27);
    icu::number::Scale::~Scale((icu::number::Scale *)&v26);
    icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v25);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v24);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v23);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v31);
  }
  else
  {
    a5->line = 7;
  }
  return v11;
}

_DWORD *unumf_formatInt(_DWORD *result, unint64_t a2, uint64_t a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return result;
  }
  unsigned int v5 = result;
  if (!result) {
    goto LABEL_9;
  }
  if (*result != 1313231360)
  {
LABEL_10:
    int v10 = 3;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_9:
    int v10 = 1;
LABEL_11:
    *a4 = v10;
    return result;
  }
  if (*(_DWORD *)(a3 + 16) != 1178881536) {
    goto LABEL_10;
  }
  int v8 = (icu::number::impl::UFormattedNumberData *)(a3 + 48);
  icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a3 + 48));
  int v9 = (void **)(a3 + 352);
  icu::number::impl::DecimalQuantity::clear(v9);
  icu::number::impl::DecimalQuantity::setToLong(v9, a2);

  return (_DWORD *)icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(v5 + 2), v8, a4);
}

_DWORD *unumf_formatDouble(_DWORD *result, uint64_t a2, UErrorCode *a3, double a4)
{
  if (*(int *)a3 > 0) {
    return result;
  }
  unsigned int v5 = result;
  if (!result) {
    goto LABEL_9;
  }
  if (*result != 1313231360)
  {
LABEL_10:
    int v10 = 3;
    goto LABEL_11;
  }
  if (!a2)
  {
LABEL_9:
    int v10 = 1;
LABEL_11:
    *a3 = v10;
    return result;
  }
  if (*(_DWORD *)(a2 + 16) != 1178881536) {
    goto LABEL_10;
  }
  int v8 = (icu::number::impl::UFormattedNumberData *)(a2 + 48);
  icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a2 + 48));
  int v9 = (void **)(a2 + 352);
  icu::number::impl::DecimalQuantity::clear(v9);
  icu::number::impl::DecimalQuantity::setToDouble(v9, a4);

  return (_DWORD *)icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(v5 + 2), v8, a3);
}

_DWORD *unumf_formatDecimal(_DWORD *result, const char *a2, int a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0) {
    return result;
  }
  int v6 = result;
  if (!result) {
    goto LABEL_10;
  }
  if (*result != 1313231360)
  {
LABEL_11:
    int v12 = 3;
    goto LABEL_12;
  }
  if (!a4)
  {
LABEL_10:
    int v12 = 1;
LABEL_12:
    *a5 = v12;
    return result;
  }
  if (*(_DWORD *)(a4 + 16) != 1178881536) {
    goto LABEL_11;
  }
  int v10 = (icu::number::impl::UFormattedNumberData *)(a4 + 48);
  icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a4 + 48));
  unsigned int v11 = (void **)(a4 + 352);
  icu::number::impl::DecimalQuantity::clear(v11);
  uint64_t result = (_DWORD *)icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v11, a2, a3, a5);
  if (*(int *)a5 <= 0)
  {
    return (_DWORD *)icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(v6 + 2), v10, a5);
  }
  return result;
}

uint64_t unumf_resultToString(uint64_t a1, UChar *a2, int a3, UErrorCode *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    if (a1)
    {
      if (*(_DWORD *)(a1 + 16) == 1178881536)
      {
        if (a2)
        {
          if ((a3 & 0x80000000) == 0)
          {
LABEL_7:
            icu::FormattedValueStringBuilderImpl::toTempString((icu::FormattedValueStringBuilderImpl *)(a1 + 48), (uint64_t)v12);
            unsigned int v11 = a2;
            uint64_t v4 = icu::UnicodeString::extract((uint64_t)v12, &v11, a3, (int *)a4);
            int v10 = v11;
            icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)v12);
            return v4;
          }
        }
        else if (!a3)
        {
          goto LABEL_7;
        }
        uint64_t v4 = 0;
        UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_11:
        *a4 = v8;
        return v4;
      }
      UErrorCode v8 = U_INVALID_FORMAT_ERROR;
    }
    else
    {
      UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    uint64_t v4 = 0;
    goto LABEL_11;
  }
  return 0;
}

BOOL unumf_resultNextFieldPosition(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (a1)
    {
      if (*(_DWORD *)(a1 + 16) == 1178881536)
      {
        if (a2)
        {
          *((void *)&v8 + 1) = 0;
          uint64_t v7 = &unk_1EDA4C7F0;
          *(void *)&long long v8 = *(void *)a2;
          DWORD2(v8) = *(_DWORD *)(a2 + 8);
          BOOL v3 = icu::FormattedValueStringBuilderImpl::nextFieldPosition((icu::FormattedValueStringBuilderImpl *)(a1 + 48), (icu::FieldPosition *)&v7, a3) != 0;
          *(void *)(a2 + 4) = *(void *)((char *)&v8 + 4);
          icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v7);
          return v3;
        }
        BOOL v3 = 0;
        int v5 = 1;
LABEL_10:
        *a3 = v5;
        return v3;
      }
      int v5 = 3;
    }
    else
    {
      int v5 = 1;
    }
    BOOL v3 = 0;
    goto LABEL_10;
  }
  return 0;
}

void unumf_resultGetAllFieldPositions(uint64_t a1, icu::FieldPositionIterator *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (a1)
    {
      if (*(_DWORD *)(a1 + 16) != 1178881536)
      {
        int v5 = 3;
        goto LABEL_8;
      }
      if (a2)
      {
        uint64_t v7 = 0;
        memset(v6, 0, sizeof(v6));
        icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v6, a2, a3);
        icu::FormattedValueStringBuilderImpl::getAllFieldPositions((icu::FormattedValueStringBuilderImpl *)(a1 + 48), (icu::FieldPositionIteratorHandler *)v6, a3);
        icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v6);
        return;
      }
    }
    int v5 = 1;
LABEL_8:
    *a3 = v5;
  }
}

uint64_t unumf_resultToDecimalNumber(uint64_t a1, char *a2, int a3, UErrorCode *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (!a1)
  {
    int v10 = 1;
LABEL_11:
    uint64_t v4 = 0;
    *a4 = v10;
    return v4;
  }
  if (*(_DWORD *)(a1 + 16) != 1178881536)
  {
    int v10 = 3;
    goto LABEL_11;
  }
  memset(v14, 0, sizeof(v14));
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v14);
  int v9 = icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(a1 + 352), (icu::number::impl::DecNum *)v14, a4);
  memset(&v13[1], 0, 56);
  v12[1] = 0;
  v13[0] = (char *)&v13[1] + 5;
  LODWORD(v13[1]) = 40;
  v12[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v12, (uint64_t)v13);
  icu::number::impl::DecNum::toString(v9, (icu::ByteSink *)v12, a4);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v12);
  uint64_t v4 = icu::CharString::extract(v13, a2, a3, a4);
  if (BYTE4(v13[1])) {
    uprv_free(v13[0]);
  }
  if (BYTE12(v14[0])) {
    uprv_free(*(void **)&v14[0]);
  }
  return v4;
}

void unumf_close(_DWORD *a1)
{
  if (a1 && *a1 == 1313231360)
  {
    icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 2));
    *a1 = 0;
    icu::UMemory::operator delete(a1);
  }
}

uint64_t *usnum_openForInt64@<X0>(void **a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  int v5 = icu::UMemory::operator new(a3, (icu::UMemory *)0x18, (unint64_t)a2);
  int v6 = v5;
  if (v5)
  {
    uint64_t *v5 = 0;
    v5[2] = 0;
    v5[1] = 0;
    uint64_t v7 = v5 + 1;
    *(_DWORD *)int v5 = 1397640448;
    *((_DWORD *)v5 + 4) = 1;
    icu::number::SimpleNumber::forInt64(a1, a2, &v9);
    icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)(v6 + 1));
    void *v7 = v9;
    *((_DWORD *)v6 + 4) = v10;
    int v9 = 0;
    icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v9);
  }
  else
  {
    *a2 = 7;
  }
  return v6;
}

_DWORD *usnum_setToInt64(_DWORD *result, void **this, int *a3)
{
  if (*a3 <= 0)
  {
    BOOL v3 = result;
    if (result)
    {
      if (*result == 1397640448)
      {
        icu::number::SimpleNumber::forInt64(this, a3, &v5);
        icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)(v3 + 2));
        *((void *)v3 + 1) = v5;
        v3[4] = v6;
        int v5 = 0;
        return (_DWORD *)icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v5);
      }
      int v4 = 3;
    }
    else
    {
      int v4 = 1;
    }
    *a3 = v4;
  }
  return result;
}

_DWORD *usnum_multiplyByPowerOfTen(_DWORD *result, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (result)
    {
      if (*result == 1397640448) {
        return (_DWORD *)icu::number::SimpleNumber::multiplyByPowerOfTen((BOOL)(result + 2), a2, a3);
      }
      int v3 = 3;
    }
    else
    {
      int v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

void usnum_roundTo(uint64_t a1, int a2, unsigned int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a1)
    {
      if (*(_DWORD *)a1 == 1397640448)
      {
        icu::number::SimpleNumber::roundTo((void *)(a1 + 8), a2, a3, a4);
        return;
      }
      int v4 = 3;
    }
    else
    {
      int v4 = 1;
    }
    *a4 = v4;
  }
}

void *usnum_setMinimumIntegerDigits(void *result, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1397640448) {
        return icu::number::SimpleNumber::setMinimumIntegerDigits(result + 1, a2, a3);
      }
      int v3 = 3;
    }
    else
    {
      int v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

void *usnum_setMinimumFractionDigits(void *result, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1397640448) {
        return icu::number::SimpleNumber::setMinimumFractionDigits(result + 1, a2, a3);
      }
      int v3 = 3;
    }
    else
    {
      int v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

void usnum_truncateStart(_DWORD *a1, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (a1)
    {
      if (*a1 == 1397640448)
      {
        icu::number::SimpleNumber::truncateStart((icu::number::SimpleNumber *)(a1 + 2), a2, a3);
        return;
      }
      int v3 = 3;
    }
    else
    {
      int v3 = 1;
    }
    *a3 = v3;
  }
}

_DWORD *usnum_setSign(_DWORD *result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (result)
    {
      if (*result == 1397640448) {
        return (_DWORD *)icu::number::SimpleNumber::setSign((uint64_t)(result + 2), a2, a3);
      }
      int v3 = 3;
    }
    else
    {
      int v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

uint64_t *usnumf_openForLocale(const char *a1, UErrorCode *a2)
{
  uint64_t v14 = (uint64_t *)*MEMORY[0x1E4F143B8];
  int v4 = icu::UMemory::operator new(v14, (icu::UMemory *)0x28, (unint64_t)a2);
  int v5 = v4;
  if (v4)
  {
    *int v4 = 0;
    v4[1] = 0;
    int v6 = v4 + 1;
    *(_DWORD *)int v4 = 1397638656;
    *((_DWORD *)v4 + 2) = 2;
    v4[3] = 0;
    _OWORD v4[4] = 0;
    void v4[2] = 0;
    icu::Locale::Locale((uint64_t *)2, (icu::Locale *)v13, a1, 0, 0, 0);
    icu::number::SimpleNumberFormatter::forLocale((icu::number::SimpleNumberFormatter *)v13, a2, &v10);
    icu::number::SimpleNumberFormatter::cleanup((icu::number::SimpleNumberFormatter *)(v5 + 1), v7);
    _DWORD *v6 = v10;
    *((_OWORD *)v5 + 1) = v11;
    long long v8 = v12;
    v5[4] = (uint64_t)v12;
    long long v11 = 0uLL;
    int v12 = 0;
    icu::number::SimpleNumberFormatter::cleanup((icu::number::SimpleNumberFormatter *)&v10, v8);
    icu::Locale::~Locale((icu::Locale *)v13);
  }
  else
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return v5;
}

uint64_t *usnumf_openForLocaleAndGroupingStrategy(const char *a1, unint64_t a2, UErrorCode *a3)
{
  long long v16 = (uint64_t *)*MEMORY[0x1E4F143B8];
  int v6 = icu::UMemory::operator new(v16, (icu::UMemory *)0x28, a2);
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t *v6 = 0;
    v6[1] = 0;
    long long v8 = v6 + 1;
    *(_DWORD *)int v6 = 1397638656;
    *((_DWORD *)v6 + 2) = 2;
    void v6[3] = 0;
    v6[4] = 0;
    _OWORD v6[2] = 0;
    icu::Locale::Locale((uint64_t *)2, (icu::Locale *)v15, a1, 0, 0, 0);
    icu::number::SimpleNumberFormatter::forLocaleAndGroupingStrategy((const icu::Locale *)v15, a2, a3, &v12);
    icu::number::SimpleNumberFormatter::cleanup((icu::number::SimpleNumberFormatter *)(v7 + 1), v9);
    *long long v8 = v12;
    *((_OWORD *)v7 + 1) = v13;
    uint64_t v10 = v14;
    _OWORD v7[4] = (uint64_t)v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    icu::number::SimpleNumberFormatter::cleanup((icu::number::SimpleNumberFormatter *)&v12, v10);
    icu::Locale::~Locale((icu::Locale *)v15);
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return v7;
}

void usnumf_format(_DWORD *a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return;
  }
  if (!a1) {
    goto LABEL_11;
  }
  if (*a1 != 1397638656) {
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_11:
    int v6 = 1;
LABEL_13:
    *a4 = v6;
    return;
  }
  if (*(_DWORD *)a2 != 1397640448)
  {
LABEL_12:
    int v6 = 3;
    goto LABEL_13;
  }
  if (!a3) {
    goto LABEL_11;
  }
  if (*(_DWORD *)(a3 + 16) != 1178881536) {
    goto LABEL_12;
  }
  memset(v10, 0, sizeof(v10));
  uint64_t v8 = *(void *)(a2 + 8);
  int v9 = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  icu::number::SimpleNumberFormatter::format((uint64_t)(a1 + 2), (uint64_t)&v8, a4, (uint64_t)v10);
  icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v8);
  if (*(int *)a4 <= 0)
  {
    icu::number::FormattedNumber::FormattedNumber((uint64_t)v7, (uint64_t)v10);
    sub_18C960700(a3 + 48, v7[1]);
    icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v7);
  }
  icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v10);
}

void usnumf_formatInt64(_DWORD *a1, void **a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a1)
    {
      if (*a1 != 1397638656)
      {
LABEL_8:
        int v5 = 3;
        goto LABEL_9;
      }
      if (a3)
      {
        if (*(_DWORD *)(a3 + 16) == 1178881536)
        {
          memset(v7, 0, sizeof(v7));
          sub_18C961A58(a2, (uint64_t)(a1 + 2), a4, (uint64_t)v7);
          icu::number::FormattedNumber::FormattedNumber((uint64_t)v6, (uint64_t)v7);
          sub_18C960700(a3 + 48, v6[1]);
          icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v6);
          icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v7);
          return;
        }
        goto LABEL_8;
      }
    }
    int v5 = 1;
LABEL_9:
    *a4 = v5;
  }
}

uint64_t sub_18C961A58@<X0>(void **this@<X1>, uint64_t a2@<X0>, int *a3@<X2>, uint64_t a4@<X8>)
{
  icu::number::SimpleNumber::forInt64(this, a3, v8);
  icu::number::SimpleNumberFormatter::format(a2, (uint64_t)v8, (UErrorCode *)a3, a4);
  return icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)v8);
}

void usnum_close(_DWORD *a1)
{
  if (a1 && *a1 == 1397640448)
  {
    icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)(a1 + 2));
    *a1 = 0;
    icu::UMemory::operator delete(a1);
  }
}

void usnumf_close(unsigned int *a1)
{
  if (a1)
  {
    int v2 = (void *)*a1;
    if (v2 == 1397638656)
    {
      icu::number::SimpleNumberFormatter::cleanup((icu::number::SimpleNumberFormatter *)(a1 + 2), v2);
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }
}

uint64_t sub_18C961B84(uint64_t a1, uint64_t a2)
{
  icu::FormattedStringBuilder::operator=(a1 + 8, a2 + 8);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  if (*(unsigned char *)(a1 + 164)) {
    uprv_free(*(void **)(a1 + 152));
  }
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  int v4 = *(const void **)(a2 + 152);
  if (v4 == (const void *)(a2 + 168))
  {
    *(void *)(a1 + 152) = a1 + 168;
    memcpy((void *)(a1 + 168), v4, 16 * *(int *)(a2 + 160));
  }
  else
  {
    *(void *)(a1 + 152) = v4;
    *(void *)(a2 + 152) = a2 + 168;
    *(_DWORD *)(a2 + 160) = 8;
    *(unsigned char *)(a2 + 164) = 0;
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  return a1;
}

void sub_18C961C24(uint64_t a1, uint64_t a2, const char *a3, int a4, int a5, int *a6)
{
  unsigned char v16[8] = *(void **)MEMORY[0x1E4F143B8];
  v15[0] = &unk_1EDA4EE80;
  v15[1] = a1;
  uint64_t v11 = ures_open(0, *(char **)(a2 + 40), a6);
  if (*a6 <= 0)
  {
    int v12 = strcmp(a3, "latn");
    memset(&v16[1], 0, 56);
    v16[0] = (char *)&v16[1] + 5;
    LODWORD(v16[1]) = 40;
    sub_18C961E40(a3, a4, a5, (icu::CharString *)v16, (UErrorCode *)a6);
    int v14 = 0;
    ures_getAllItemsWithFallback(v11, (char *)v16[0], (uint64_t)v15, &v14);
    int v13 = *(unsigned __int8 *)(a1 + 1374);
    if (*(unsigned char *)(a1 + 1374) && v12)
    {
      sub_18C961E40("latn", a4, a5, (icu::CharString *)v16, (UErrorCode *)a6);
      int v14 = 0;
      ures_getAllItemsWithFallback(v11, (char *)v16[0], (uint64_t)v15, &v14);
      int v13 = *(unsigned __int8 *)(a1 + 1374);
    }
    if (a4 && v13)
    {
      sub_18C961E40(a3, 0, a5, (icu::CharString *)v16, (UErrorCode *)a6);
      int v14 = 0;
      ures_getAllItemsWithFallback(v11, (char *)v16[0], (uint64_t)v15, &v14);
      int v13 = *(unsigned __int8 *)(a1 + 1374);
    }
    if (a4 && v13 && v12)
    {
      sub_18C961E40("latn", 0, a5, (icu::CharString *)v16, (UErrorCode *)a6);
      int v14 = 0;
      ures_getAllItemsWithFallback(v11, (char *)v16[0], (uint64_t)v15, &v14);
      int v13 = *(unsigned __int8 *)(a1 + 1374);
    }
    if (v13) {
      *a6 = 5;
    }
    if (BYTE4(v16[1])) {
      uprv_free(v16[0]);
    }
  }
  if (v11) {
    ures_close(v11);
  }
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v15);
}

icu::CharString *sub_18C961E40(const char *a1, int a2, int a3, icu::CharString *a4, UErrorCode *a5)
{
  *((_DWORD *)a4 + 14) = 0;
  **(unsigned char **)a4 = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "NumberElements/");
  icu::CharString::append(a4, v19, v20, a5);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v17, a1);
  icu::CharString::append(a4, v17, v18, a5);
  if (a2) {
    uint64_t v10 = "/patternsLong";
  }
  else {
    uint64_t v10 = "/patternsShort";
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)&v15, v10);
  icu::CharString::append(a4, v15, v16, a5);
  if (a3) {
    uint64_t v11 = "/currencyFormat";
  }
  else {
    uint64_t v11 = "/decimalFormat";
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)&v13, v11);
  return icu::CharString::append(a4, v13, v14, a5);
}

uint64_t sub_18C961F44(uint64_t a1, int a2)
{
  if (a2 < 0) {
    return 0;
  }
  int v2 = *(char *)(a1 + 1373);
  if (v2 >= a2) {
    int v2 = a2;
  }
  return *(char *)(a1 + v2 + 1352);
}

__int16 *sub_18C961F68(uint64_t a1, int a2, icu::PluralRules *a3, icu::number::impl::DecimalQuantity *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a2 < 0) {
    return 0;
  }
  if (*(char *)(a1 + 1373) >= a2) {
    int v7 = a2;
  }
  else {
    int v7 = *(char *)(a1 + 1373);
  }
  if ((*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(void *)a4 + 40))(a4))
  {
    uint64_t v8 = icu::number::impl::DecimalQuantity::toLong(a4, 1);
    if (!v8)
    {
      int v9 = 6;
LABEL_11:
      uint64_t result = *(__int16 **)(a1 + 8 * (v9 | (8 * v7)) + 8);
      if (result) {
        return result;
      }
      goto LABEL_12;
    }
    if (v8 == 1)
    {
      int v9 = 7;
      goto LABEL_11;
    }
  }
LABEL_12:
  int v11 = 5;
  if (a3)
  {
    memset(v16, 0, sizeof(v16));
    icu::PluralRules::select(a3, a4, (icu::UnicodeString *)v16);
    int v13 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v16, v12);
    if (v13 < 0) {
      int v11 = 5;
    }
    else {
      int v11 = v13;
    }
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v16);
  }
  uint64_t v15 = *(__int16 **)(a1 + 8 * (v11 + 8 * v7) + 8);
  if (v11 != 5 && !v15) {
    uint64_t v15 = *(__int16 **)(a1 + (((uint64_t)v7 << 6) | 0x28) + 8);
  }
  if (v15 == L"<USE FALLBACK>") {
    return 0;
  }
  else {
    return v15;
  }
}

uint64_t sub_18C9620C4(uint64_t result, icu::UVector *this, UErrorCode *a3)
{
  int v5 = (UChar **)(result + 8);
  int v6 = (UChar **)(result + 1352);
  do
  {
    int v7 = *v5;
    if (*v5) {
      BOOL v8 = v7 == (UChar *)L"<USE FALLBACK>";
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      signed int v9 = *((_DWORD *)this + 2);
      while (1)
      {
        BOOL v10 = __OFSUB__(v9--, 1);
        if (v9 < 0 != v10) {
          break;
        }
        int v11 = (const UChar *)icu::UVector::elementAt(this, v9);
        uint64_t result = u_strcmp(v7, v11);
        if (!result) {
          goto LABEL_11;
        }
      }
      uint64_t result = icu::UVector::addElement(this, v7, a3);
    }
LABEL_11:
    ++v5;
  }
  while (v5 != v6);
  return result;
}

const UChar *sub_18C962164(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, char *a5)
{
  unint64_t v27 = a2;
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  uint64_t result = (const UChar *)(*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, char *))(*(void *)a3 + 88))(v25, a3, a5);
  if (*(int *)a5 > 0) {
    return result;
  }
  uint64_t result = (const UChar *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v25, 0, (const char **)&v27, a3);
  if (!result) {
    return result;
  }
  int v9 = 0;
  while (1)
  {
    int v10 = (char)(strlen(v27) - 1);
    if (v10 <= 19) {
      break;
    }
LABEL_29:
    uint64_t result = (const UChar *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v25, ++v9, (const char **)&v27, a3);
    if (!result) {
      return result;
    }
  }
  int v11 = *(unsigned __int8 *)(*(void *)(a1 + 8) + v10 + 1352);
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  uint64_t result = (const UChar *)(*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, char *))(*(void *)a3 + 88))(v23, a3, a5);
  if (*(int *)a5 > 0) {
    return result;
  }
  if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v23, 0, (const char **)&v27, a3))
  {
LABEL_25:
    uint64_t v20 = *(void *)(a1 + 8) + v10;
    if (!*(unsigned char *)(v20 + 1352))
    {
      *(unsigned char *)(v20 + 1352) = v11;
      uint64_t v21 = *(void *)(a1 + 8);
      if (v10 > *(char *)(v21 + 1373)) {
        *(unsigned char *)(v21 + 1373) = v10;
      }
      *(unsigned char *)(v21 + 1374) = 0;
    }
    goto LABEL_29;
  }
  int v13 = 0;
  int v14 = 8 * v10;
  while (1)
  {
    uint64_t result = (const UChar *)icu::StandardPlural::indexFromString((icu::StandardPlural *)v27, a5, v12);
    if (*(int *)a5 > 0) {
      return result;
    }
    int v15 = result + v14;
    if (!*(void *)(*(void *)(a1 + 8) + 8 * ((int)result + v14) + 8))
    {
      int v22 = 0;
      uint64_t result = (const UChar *)(*(uint64_t (**)(icu::ResourceValue *, int *, char *))(*(void *)a3 + 32))(a3, &v22, a5);
      if (*(int *)a5 > 0) {
        return result;
      }
      int v16 = (const __int16 *)result;
      if (!u_strcmp(result, (const UChar *)"0"))
      {
        int v22 = 0;
        int v16 = L"<USE FALLBACK>";
      }
      *(void *)(*(void *)(a1 + 8) + 8 * v15 + 8) = v16;
      if (!v11)
      {
        uint64_t v17 = v22;
        if (v22 < 1)
        {
LABEL_23:
          int v11 = 0;
        }
        else
        {
          int v18 = 0;
          do
          {
            int v19 = *(unsigned __int16 *)v16++;
            if (v19 == 48)
            {
              ++v18;
            }
            else if (v18 > 0)
            {
              goto LABEL_22;
            }
            --v17;
          }
          while (v17);
          if (v18 < 1) {
            goto LABEL_23;
          }
LABEL_22:
          int v11 = (v18 + ~(_BYTE)v10);
        }
      }
    }
    if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v23, ++v13, (const char **)&v27, a3)) {
      goto LABEL_25;
    }
  }
}

uint64_t sub_18C962410(uint64_t a1, int a2, uint64_t a3, const char *a4, int a5, uint64_t a6, icu::number::impl::MutablePatternModifier *a7, int a8, uint64_t a9, int *a10)
{
  *(void *)a1 = &unk_1EDA4EE58;
  *(void *)(a1 + 8) = a6;
  *(void *)(a1 + 16) = a9;
  *(void *)(a1 + 24) = a1 + 40;
  *(_DWORD *)(a1 + 32) = 12;
  *(unsigned char *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  uint64_t v17 = a1 + 240;
  *(void *)(a1 + 240) = &unk_1EDA4EE30;
  bzero((void *)(a1 + 248), 0x556uLL);
  *(unsigned char *)(a1 + 1614) = 1;
  sub_18C962AE4(a1 + 1616);
  *(unsigned char *)(a1 + 2064) = a8;
  sub_18C961C24(v17, a3, a4, a2, a5, a10);
  if (a8) {
    sub_18C96251C(a1, a7, (UErrorCode *)a10);
  }
  else {
    *(void *)(a1 + 2056) = a7;
  }
  return a1;
}

void sub_18C96251C(uint64_t a1, icu::number::impl::MutablePatternModifier *a2, UErrorCode *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    icu::UVector::UVector((icu::UVector *)v18, 0xCu, a3);
    if (*(int *)a3 > 0 || (sub_18C9620C4(a1 + 240, (icu::UVector *)v18, a3), *(int *)a3 > 0))
    {
LABEL_4:
      icu::UVector::~UVector((icu::UVector *)v18);
      return;
    }
    uint64_t v6 = DWORD2(v18[0]);
    *(_DWORD *)(a1 + 232) = DWORD2(v18[0]);
    if (*(_DWORD *)(a1 + 32) < (int)v6)
    {
      if ((int)v6 >= 1)
      {
        int v7 = uprv_malloc(16 * v6);
        if (v7)
        {
          BOOL v8 = v7;
          if (*(unsigned char *)(a1 + 36)) {
            uprv_free(*(void **)(a1 + 24));
          }
          *(void *)(a1 + 24) = v8;
          *(_DWORD *)(a1 + 32) = v6;
          *(unsigned char *)(a1 + 36) = 1;
        }
      }
      if (*(int *)a3 > 0) {
        goto LABEL_4;
      }
      LODWORD(v6) = *(_DWORD *)(a1 + 232);
    }
    if ((int)v6 >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = icu::UVector::elementAt((icu::UVector *)v18, v10);
        memset(v23, 0, sizeof(v23));
        icu::UnicodeString::UnicodeString((uint64_t)v23, v11);
        uint64_t v12 = *(void *)(a1 + 24);
        uint64_t v22 = 0;
        memset(v21, 0, sizeof(v21));
        sub_18C962AE4((uint64_t)v21);
        icu::UnicodeString::UnicodeString((uint64_t)v20, v11);
        icu::number::impl::PatternParser::parseToPatternInfo(v20, (const icu::UnicodeString *)v21, a3, v13);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v20);
        if (*(int *)a3 > 0) {
          break;
        }
        icu::number::impl::MutablePatternModifier::setPatternInfo((uint64_t)a2, (uint64_t)v21, 44);
        *(void *)(v12 + v9) = icu::number::impl::MutablePatternModifier::createImmutable(a2, a3, v15);
        if (*(int *)a3 > 0) {
          break;
        }
        *(void *)(v12 + v9 + 8) = v11;
        sub_18C962BDC((void **)v21);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v23);
        ++v10;
        v9 += 16;
        if (v10 >= *(int *)(a1 + 232)) {
          goto LABEL_4;
        }
      }
      sub_18C962BDC((void **)v21);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v23);
    }
    goto LABEL_4;
  }
}

uint64_t sub_18C962764(uint64_t a1, int a2, uint64_t a3, const char *a4, int a5, uint64_t a6, icu::number::impl::MutablePatternModifier *a7, int a8, uint64_t a9, int *a10)
{
  return sub_18C962410(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_18C962770(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4EE58;
  int v2 = *(_DWORD *)(a1 + 232);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 24) + v3);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        int v2 = *(_DWORD *)(a1 + 232);
      }
      v3 += 16;
    }
  }
  sub_18C962BDC((void **)(a1 + 1616));
  nullsub_17(a1 + 240);
  if (*(unsigned char *)(a1 + 36)) {
    uprv_free(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_18C962838(uint64_t a1)
{
  int v1 = (void *)sub_18C962770(a1);

  icu::UMemory::operator delete(v1);
}

double sub_18C962860(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  if (*a4 <= 0)
  {
    if (icu::number::impl::DecimalQuantity::isZeroish(a2))
    {
      sub_18C97F148(a3 + 104, a2, a4);
      int v9 = 0;
      int v10 = 0;
    }
    else
    {
      int v9 = sub_18C97F030(a3 + 104, a2, a1 + 240, a4);
      if (icu::number::impl::DecimalQuantity::isZeroish(a2)) {
        int Magnitude = 0;
      }
      else {
        int Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(a2);
      }
      int v10 = Magnitude - v9;
    }
    uint64_t v12 = sub_18C961F68(a1 + 240, v10, *(icu::PluralRules **)(a1 + 8), a2);
    if (v12)
    {
      int v13 = (const UChar *)v12;
      if (*(unsigned char *)(a1 + 2064))
      {
        if (*(int *)(a1 + 232) >= 1)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          while (1)
          {
            uint64_t v16 = *(void *)(a1 + 24);
            if (!u_strcmp(v13, *(const UChar **)(v16 + v14 + 8))) {
              break;
            }
            ++v15;
            v14 += 16;
            if (v15 >= *(int *)(a1 + 232)) {
              goto LABEL_20;
            }
          }
          icu::number::impl::ImmutablePatternModifier::applyToMicros(*(void *)(v16 + v14), a3, a2, a4);
        }
      }
      else
      {
        icu::UnicodeString::UnicodeString((uint64_t)&v24, (uint64_t)v12);
        icu::number::impl::PatternParser::parseToPatternInfo((UChar **)&v24, (const icu::UnicodeString *)(a1 + 1616), (UErrorCode *)a4, v17);
        icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v24);
        icu::number::impl::MutablePatternModifier::setPatternInfo(*(void *)(a1 + 2056), a1 + 1616, 44);
        uint64_t v19 = *(void *)(a1 + 2056);
        int v20 = icu::number::impl::DecimalQuantity::signum(a2);
        icu::number::impl::MutablePatternModifier::setNumberProperties(v19, v20, 8);
        uint64_t v21 = *(void *)(a1 + 2056);
        if (v21) {
          uint64_t v22 = v21 + 8;
        }
        else {
          uint64_t v22 = 0;
        }
        *(void *)(a3 + 200) = v22;
      }
    }
LABEL_20:
    icu::number::impl::DecimalQuantity::adjustExponent((uint64_t)a2, -v9);
    sub_18C97F008((uint64_t)&v24);
    double result = *(double *)&v24;
    long long v23 = v25[0];
    *(_OWORD *)(a3 + 104) = v24;
    *(_OWORD *)(a3 + 120) = v23;
    *(void *)(a3 + 133) = *(void *)((char *)v25 + 13);
  }
  return result;
}

void sub_18C962A84(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C962AAC(uint64_t a1)
{
  nullsub_17(a1);

  JUMPOUT(0x192F969D0);
}

uint64_t sub_18C962AE4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4FBE0;
  uint64_t v2 = a1 + 8;
  *(void *)(a1 + 8) = &unk_1EDA47700;
  *(_WORD *)(a1 + 16) = 2;
  *(void *)(a1 + 72) = 0xFFFFFFFF0000;
  *(_DWORD *)(a1 + 116) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 112) = 0;
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)(a1 + 128));
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 204) = 0;
  *(_WORD *)(a1 + 212) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 240) = 0xFFFFFFFF0000;
  *(_DWORD *)(a1 + 284) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 292) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(unsigned char *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)(a1 + 296));
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 372) = 0;
  *(_WORD *)(a1 + 380) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = v2;
  *(_DWORD *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 432) = 0;
  return a1;
}

void sub_18C962BDC(void **a1)
{
  *a1 = &unk_1EDA4FBE0;
  uint64_t v2 = a1 + 16;
  icu::number::impl::DecimalQuantity::~DecimalQuantity(a1 + 37);
  icu::number::impl::DecimalQuantity::~DecimalQuantity(v2);
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 1));

  icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)a1);
}

uint64_t icu::number::impl::CurrencySymbols::CurrencySymbols(uint64_t a1, const UChar *a2, uint64_t a3, UErrorCode *a4)
{
  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)(a1 + 8), a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v10, *(const char **)(a3 + 40));
  int v7 = v10;
  int v8 = v11;
  *(void *)(a1 + 40) = a1 + 53;
  *(_DWORD *)(a1 + 48) = 40;
  *(_WORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  icu::CharString::append((icu::CharString *)(a1 + 40), v7, v8, a4);
  *(void *)(a1 + 104) = &unk_1EDA47700;
  *(_WORD *)(a1 + 112) = 2;
  *(void *)(a1 + 168) = &unk_1EDA47700;
  *(_WORD *)(a1 + 176) = 2;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 104));
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 168));
  return a1;
}

uint64_t icu::number::impl::CurrencySymbols::CurrencySymbols(uint64_t a1, const UChar *a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v10, a2);
  icu::number::impl::CurrencySymbols::CurrencySymbols(a1, v10, a3, a5);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v10);
  if (*(unsigned char *)(a4 + 2872)) {
    icu::UnicodeString::operator=((UChar **)(a1 + 104), (UChar **)(a4 + 520));
  }
  if (*(unsigned char *)(a4 + 2873)) {
    icu::UnicodeString::operator=((UChar **)(a1 + 168), (UChar **)(a4 + 584));
  }
  return a1;
}

{
  UChar v10[16];

  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v10, a2);
  icu::number::impl::CurrencySymbols::CurrencySymbols(a1, v10, a3, a5);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v10);
  if (*(unsigned char *)(a4 + 2872)) {
    icu::UnicodeString::operator=((UChar **)(a1 + 104), (UChar **)(a4 + 520));
  }
  if (*(unsigned char *)(a4 + 2873)) {
    icu::UnicodeString::operator=((UChar **)(a1 + 168), (UChar **)(a4 + 584));
  }
  return a1;
}

uint64_t icu::number::impl::CurrencySymbols::getIsoCode(icu::number::impl::CurrencySymbols *this)
{
  return (uint64_t)this + 28;
}

uint64_t icu::number::impl::CurrencySymbols::getNarrowCurrencySymbol@<X0>(icu::number::impl::CurrencySymbols *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::impl::CurrencySymbols::loadSymbol((uint64_t)this, 2u, (int *)a2, a3);
}

uint64_t icu::number::impl::CurrencySymbols::loadSymbol@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a1 + 28;
  int v9 = 0;
  Name = ucurr_getName((const UChar *)(a1 + 28), *(char **)(a1 + 40), a2, 0, &v9, a3);
  if (Name == (const UChar *)v5) {
    return icu::UnicodeString::UnicodeString(a4, v5, 3);
  }
  int v8 = Name;
  return icu::UnicodeString::UnicodeString(a4, 1, &v8);
}

uint64_t icu::number::impl::CurrencySymbols::getFormalCurrencySymbol@<X0>(icu::number::impl::CurrencySymbols *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::impl::CurrencySymbols::loadSymbol((uint64_t)this, 3u, (int *)a2, a3);
}

uint64_t icu::number::impl::CurrencySymbols::getVariantCurrencySymbol@<X0>(icu::number::impl::CurrencySymbols *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::impl::CurrencySymbols::loadSymbol((uint64_t)this, 4u, (int *)a2, a3);
}

icu::UnicodeString *icu::number::impl::CurrencySymbols::getCurrencySymbol@<X0>(UChar **this@<X0>, UErrorCode *a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  if ((_WORD)this[14]) {
    return (icu::UnicodeString *)icu::number::impl::CurrencySymbols::loadSymbol((uint64_t)this, 0, (int *)a2, (uint64_t)a3);
  }
  else {
    return icu::UnicodeString::UnicodeString(a3, this + 13);
  }
}

icu::UnicodeString *icu::number::impl::CurrencySymbols::getIntlCurrencySymbol@<X0>(UChar **this@<X0>, icu::UnicodeString *a2@<X8>)
{
  if ((_WORD)this[22]) {
    return (icu::UnicodeString *)icu::UnicodeString::UnicodeString((uint64_t)a2, (uint64_t)this + 28, 3);
  }
  else {
    return icu::UnicodeString::UnicodeString(a2, this + 21);
  }
}

uint64_t icu::number::impl::CurrencySymbols::getPluralName@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (const UChar *)(a1 + 28);
  int v12 = 0;
  int v7 = *(char **)(a1 + 40);
  int Keyword = icu::StandardPlural::getKeyword(a2);
  PluralName = ucurr_getPluralName(v6, v7, 0, Keyword, &v12, a3);
  if (PluralName == v6) {
    return icu::UnicodeString::UnicodeString(a4, (uint64_t)v6, 3);
  }
  int v11 = PluralName;
  return icu::UnicodeString::UnicodeString(a4, 1, &v11);
}

BOOL icu::number::impl::CurrencySymbols::hasEmptyCurrencySymbol(icu::number::impl::CurrencySymbols *this)
{
  return (*((_WORD *)this + 56) & 0xFFE1) == 0;
}

icu::CurrencyUnit *sub_18C962FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, icu::CurrencyUnit *a4@<X8>)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 8))
  {
    int v8 = 0;
    v9[0] = 0;
    ucurr_forLocale(*(char **)(a2 + 40), (UChar *)v9, 4, &v8);
    if (v8 <= 0)
    {
      int v7 = v9;
      return (icu::CurrencyUnit *)icu::CurrencyUnit::CurrencyUnit(a4, &v7, a3);
    }
    else
    {
      return (icu::CurrencyUnit *)icu::CurrencyUnit::CurrencyUnit(a4);
    }
  }
  else
  {
    return icu::CurrencyUnit::CurrencyUnit(a4, (const UChar *)(a1 + 16));
  }
}

icu::number::impl::DecimalQuantity *icu::number::impl::DecimalQuantity::DecimalQuantity(icu::number::impl::DecimalQuantity *this)
{
  *(void *)this = &unk_1EDA4EF28;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
  *((unsigned char *)this + 20) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDA4EF28;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
  *((unsigned char *)this + 20) = 0;
  return this;
}

void icu::number::impl::DecimalQuantity::setBcdToZero(void **this)
{
  if (*((unsigned char *)this + 64))
  {
    uprv_free(this[6]);
    *((unsigned char *)this + 64) = 0;
  }
  this[6] = 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 21) = 0;
  this[3] = 0;
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 11) = 0;
}

void icu::number::impl::DecimalQuantity::~DecimalQuantity(void **this)
{
  *this = &unk_1EDA4EF28;
  if (*((unsigned char *)this + 64))
  {
    uprv_free(this[6]);
    this[6] = 0;
    *((unsigned char *)this + 64) = 0;
  }
}

{
  *this = &unk_1EDA4EF28;
  if (*((unsigned char *)this + 64))
  {
    uprv_free(this[6]);
    this[6] = 0;
    *((unsigned char *)this + 64) = 0;
  }
}

{
  uint64_t vars8;

  *this = &unk_1EDA4EF28;
  if (*((unsigned char *)this + 64))
  {
    uprv_free(this[6]);
    this[6] = 0;
    *((unsigned char *)this + 64) = 0;
  }

  icu::UMemory::operator delete(this);
}

icu::number::impl::DecimalQuantity *icu::number::impl::DecimalQuantity::DecimalQuantity(icu::number::impl::DecimalQuantity *this, uint64_t a2)
{
  *(void *)this = &unk_1EDA4EF28;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  return icu::number::impl::DecimalQuantity::operator=(this, a2);
}

{
  *(void *)this = &unk_1EDA4EF28;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  return icu::number::impl::DecimalQuantity::operator=(this, a2);
}

{
  *(void *)this = &unk_1EDA4EF28;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  return icu::number::impl::DecimalQuantity::operator=(this, a2);
}

{
  *(void *)this = &unk_1EDA4EF28;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  return icu::number::impl::DecimalQuantity::operator=(this, a2);
}

icu::number::impl::DecimalQuantity *icu::number::impl::DecimalQuantity::operator=(icu::number::impl::DecimalQuantity *this, uint64_t a2)
{
  if (this != (icu::number::impl::DecimalQuantity *)a2)
  {
    icu::number::impl::DecimalQuantity::copyBcdFrom((void **)this, (const icu::number::impl::DecimalQuantity *)a2);
    *((unsigned char *)this + 8) = *(unsigned char *)(a2 + 8);
    *(void *)((char *)this + 36) = *(void *)(a2 + 36);
    *(void *)((char *)this + 12) = *(void *)(a2 + 12);
    *((_WORD *)this + 10) = *(_WORD *)(a2 + 20);
    *((void *)this + 3) = *(void *)(a2 + 24);
    *((_DWORD *)this + 8) = *(_DWORD *)(a2 + 32);
    *((_DWORD *)this + 11) = *(_DWORD *)(a2 + 44);
  }
  return this;
}

{
  if (this != (icu::number::impl::DecimalQuantity *)a2)
  {
    icu::number::impl::DecimalQuantity::moveBcdFrom((void **)this, (icu::number::impl::DecimalQuantity *)a2);
    *((unsigned char *)this + 8) = *(unsigned char *)(a2 + 8);
    *(void *)((char *)this + 36) = *(void *)(a2 + 36);
    *(void *)((char *)this + 12) = *(void *)(a2 + 12);
    *((_WORD *)this + 10) = *(_WORD *)(a2 + 20);
    *((void *)this + 3) = *(void *)(a2 + 24);
    *((_DWORD *)this + 8) = *(_DWORD *)(a2 + 32);
    *((_DWORD *)this + 11) = *(_DWORD *)(a2 + 44);
  }
  return this;
}

void icu::number::impl::DecimalQuantity::copyBcdFrom(void **this, const icu::number::impl::DecimalQuantity *a2)
{
  icu::number::impl::DecimalQuantity::setBcdToZero(this);
  if (*((unsigned char *)a2 + 64))
  {
    icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)this, *((_DWORD *)a2 + 4));
    int v4 = this[6];
    uint64_t v5 = (const void *)*((void *)a2 + 6);
    size_t v6 = *((int *)a2 + 4);
    memcpy(v4, v5, v6);
  }
  else
  {
    this[6] = (void *)*((void *)a2 + 6);
  }
}

double icu::number::impl::DecimalQuantity::copyFieldsFrom(icu::number::impl::DecimalQuantity *this, const icu::number::impl::DecimalQuantity *a2)
{
  *((unsigned char *)this + 8) = *((unsigned char *)a2 + 8);
  *(void *)((char *)this + 36) = *(void *)((char *)a2 + 36);
  *(void *)((char *)this + 12) = *(void *)((char *)a2 + 12);
  *((_WORD *)this + 10) = *((_WORD *)a2 + 10);
  double result = *((double *)a2 + 3);
  *((double *)this + 3) = result;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  return result;
}

void icu::number::impl::DecimalQuantity::moveBcdFrom(void **this, icu::number::impl::DecimalQuantity *a2)
{
  if (*((unsigned char *)a2 + 64))
  {
    *((unsigned char *)this + 64) = 1;
    this[6] = (void *)*((void *)a2 + 6);
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    *((void *)a2 + 6) = 0;
    *((unsigned char *)a2 + 64) = 0;
  }
  else
  {
    this[6] = (void *)*((void *)a2 + 6);
  }
}

void icu::number::impl::DecimalQuantity::clear(void **this)
{
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  *((unsigned char *)this + 20) = 0;
  icu::number::impl::DecimalQuantity::setBcdToZero(this);
}

uint64_t icu::number::impl::DecimalQuantity::setMinInteger(uint64_t this, int a2)
{
  int v2 = *(_DWORD *)(this + 36);
  if (v2 <= a2) {
    int v2 = a2;
  }
  *(_DWORD *)(this + 36) = v2;
  return this;
}

uint64_t icu::number::impl::DecimalQuantity::setMinFraction(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = -a2;
  return this;
}

void icu::number::impl::DecimalQuantity::applyMaxInteger(icu::number::impl::DecimalQuantity *this, int a2)
{
  int v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    int v4 = *((_DWORD *)this + 3);
    if (v4 >= a2)
    {
      icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
    }
    else
    {
      int v5 = v2 + v4 - 1;
      BOOL v6 = __OFSUB__(v5, a2);
      int v7 = v5 - a2;
      if (v7 < 0 == v6)
      {
        icu::number::impl::DecimalQuantity::popFromLeft((uint64_t)this, v7 + 1);
        icu::number::impl::DecimalQuantity::compact(this);
      }
    }
  }
}

uint64_t icu::number::impl::DecimalQuantity::getMagnitude(icu::number::impl::DecimalQuantity *this)
{
  return (*((_DWORD *)this + 3) + *((_DWORD *)this + 4) - 1);
}

uint64_t icu::number::impl::DecimalQuantity::popFromLeft(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 64))
  {
    uint64_t v2 = *(int *)(this + 16);
    if (a2 <= 0)
    {
      LODWORD(v3) = v2 - a2;
    }
    else
    {
      do
      {
        *(unsigned char *)(*(void *)(this + 48) + v2 - 1) = 0;
        uint64_t v3 = *(int *)(this + 16) - (uint64_t)a2;
        --v2;
      }
      while (v2 > v3);
    }
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(this + 16) - a2;
    *(void *)(this + 48) &= ~(-1 << (4 * (*(unsigned char *)(this + 16) - a2)));
  }
  *(_DWORD *)(this + 16) = v3;
  return this;
}

void icu::number::impl::DecimalQuantity::compact(icu::number::impl::DecimalQuantity *this)
{
  if (*((unsigned char *)this + 64))
  {
    uint64_t v2 = *((unsigned int *)this + 4);
    if ((int)v2 < 1)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      uint64_t v3 = 0;
      while (!*(unsigned char *)(*((void *)this + 6) + v3))
      {
        if (v2 == ++v3) {
          goto LABEL_16;
        }
      }
    }
    if (v3 == v2) {
      goto LABEL_16;
    }
    icu::number::impl::DecimalQuantity::shiftRight((uint64_t)this, v3);
    uint64_t v7 = *((unsigned int *)this + 4);
    uint64_t v8 = v7 - 1;
    do
    {
      if ((int)v7 <= 0)
      {
        *((_DWORD *)this + 4) = v7;
        goto LABEL_25;
      }
      int v9 = *(unsigned __int8 *)(*((void *)this + 6) + v8);
      LODWORD(v7) = v7 - 1;
      --v8;
    }
    while (!v9);
    unsigned int v10 = v7 + 1;
    *((_DWORD *)this + 4) = v10;
    if (v10 > 0x10) {
      return;
    }
LABEL_25:
    icu::number::impl::DecimalQuantity::switchStorage(this);
  }
  else
  {
    unint64_t v4 = *((void *)this + 6);
    if (!v4)
    {
LABEL_16:
      icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
      return;
    }
    uint64_t v5 = *((unsigned int *)this + 4);
    if ((int)v5 < 1)
    {
      LODWORD(v6) = 0;
    }
    else
    {
      unint64_t v6 = 0;
      while (v6 > 0xF || ((v4 >> (4 * v6)) & 0xF) == 0)
      {
        if (++v6 == v5)
        {
          LODWORD(v6) = *((_DWORD *)this + 4);
          break;
        }
      }
    }
    unint64_t v11 = v4 >> (4 * v6);
    *((void *)this + 6) = v11;
    *((_DWORD *)this + 3) += v6;
    int v12 = v5 & ((int)v5 >> 31);
    uint64_t v13 = v5 - 1;
    uint64_t v14 = 4 * v5 - 4;
    while (1)
    {
      BOOL v15 = __OFSUB__(v5, 1);
      LODWORD(v5) = v5 - 1;
      if ((int)v5 < 0 != v15) {
        break;
      }
      char v16 = v14;
      v14 -= 4;
      uint64_t v17 = v13-- & 0xFFFFFFF0;
      if (!v17 && ((15 << (v16 & 0xFC)) & v11) != 0)
      {
        int v12 = v5 + 1;
        break;
      }
    }
    *((_DWORD *)this + 4) = v12;
  }
}

unint64_t icu::number::impl::DecimalQuantity::getPositionFingerprint(icu::number::impl::DecimalQuantity *this)
{
  return (int)(*((_DWORD *)this + 9) << 16) ^ ((unint64_t)*((unsigned int *)this + 10) << 32);
}

void icu::number::impl::DecimalQuantity::roundToIncrement(icu::number::impl::DecimalQuantity *a1, unint64_t a2, int a3, unsigned int a4, UErrorCode *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  int v9 = &unk_1EDA4EF28;
  BYTE8(v13) = 0;
  *(void *)((char *)&v10 + 4) = 0;
  WORD6(v10) = 0;
  icu::number::impl::DecimalQuantity::setToLong(&v9, a2);
  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)&v9, a3);
  memset(v14, 0, sizeof(v14));
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v14);
  icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)&v9, (icu::number::impl::DecNum *)v14, a5);
  if (*(int *)a5 <= 0)
  {
    icu::number::impl::DecimalQuantity::divideBy(a1, (const icu::number::impl::DecNum *)v14, a5);
    if (*(int *)a5 <= 0)
    {
      icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)a1, 0, a4, 0, (int *)a5);
      if (*(int *)a5 <= 0) {
        icu::number::impl::DecimalQuantity::multiplyBy(a1, (const icu::number::impl::DecNum *)v14, a5);
      }
    }
  }
  if (BYTE12(v14[0])) {
    uprv_free(*(void **)&v14[0]);
  }
  int v9 = &unk_1EDA4EF28;
  if (BYTE8(v13)) {
    uprv_free(*((void **)&v12 + 1));
  }
}

void **icu::number::impl::DecimalQuantity::setToLong(void **this, unint64_t a2)
{
  *((unsigned char *)this + 20) = 0;
  if (a2 >= 0x8000000000000001)
  {
    *((unsigned char *)this + 20) = 1;
    a2 = -(uint64_t)a2;
LABEL_4:
    icu::number::impl::DecimalQuantity::_setToLong((icu::number::impl::DecimalQuantity *)this, a2);
    icu::number::impl::DecimalQuantity::compact((icu::number::impl::DecimalQuantity *)this);
    return this;
  }
  if (a2) {
    goto LABEL_4;
  }
  return this;
}

BOOL icu::number::impl::DecimalQuantity::adjustMagnitude(icu::number::impl::DecimalQuantity *this, int a2)
{
  if (!*((_DWORD *)this + 4)) {
    return 0;
  }
  BOOL v4 = uprv_add32_overflow(*((_DWORD *)this + 3), a2, (_DWORD *)this + 3);
  BOOL v5 = uprv_add32_overflow(*((_DWORD *)this + 8), a2, (_DWORD *)this + 8);
  int v7 = 0;
  return v5 || v4 || uprv_add32_overflow(*((_DWORD *)this + 3), *((_DWORD *)this + 4), &v7);
}

icu::number::impl::DecNum *icu::number::impl::DecimalQuantity::toDecNum(icu::number::impl::DecimalQuantity *this, icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v5 = *((_DWORD *)this + 4);
  if (v5)
  {
    uint64_t v15 = 0;
    *(_OWORD *)long long v13 = 0u;
    long long v14 = 0u;
    sub_18C965730((uint64_t)v13, v5, *a3);
    if (*(int *)a3 <= 0)
    {
      LODWORD(v7) = *((_DWORD *)this + 4);
      if ((int)v7 >= 1)
      {
        char v8 = 0;
        unint64_t v9 = 0;
        int v10 = -1;
        do
        {
          if (*((unsigned char *)this + 64))
          {
            LOBYTE(v11) = *(unsigned char *)(*((void *)this + 6) + v9);
          }
          else if (v9 <= 0xF)
          {
            uint64_t v11 = (*((void *)this + 6) >> (v8 & 0xFC)) & 0xFLL;
          }
          else
          {
            LOBYTE(v11) = 0;
          }
          v13[0][(int)v7 + v10] = v11;
          ++v9;
          int64_t v7 = *((int *)this + 4);
          v8 += 4;
          --v10;
        }
        while ((uint64_t)v9 < v7);
      }
      icu::number::impl::DecNum::setTo(a2, (char *)v13[0], v7, *((_DWORD *)this + 3), *((unsigned char *)this + 20) & 1, a3);
    }
    if (BYTE4(v13[1])) {
      uprv_free(v13[0]);
    }
  }
  else
  {
    icu::number::impl::DecNum::setTo(a2, "0", a3);
  }
  return a2;
}

void icu::number::impl::DecimalQuantity::divideBy(icu::number::impl::DecimalQuantity *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 4))
  {
    memset(v6, 0, sizeof(v6));
    icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v6);
    icu::number::impl::DecimalQuantity::toDecNum(this, (icu::number::impl::DecNum *)v6, a3);
    if (*(int *)a3 <= 0)
    {
      icu::number::impl::DecNum::divideBy((icu::number::impl::DecNum *)v6, a2, a3);
      if (*(int *)a3 <= 0)
      {
        icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
        *((unsigned char *)this + 20) = 0;
        icu::number::impl::DecimalQuantity::_setToDecNum(this, (const icu::number::impl::DecNum *)v6, a3);
      }
    }
    if (BYTE12(v6[0])) {
      uprv_free(*(void **)&v6[0]);
    }
  }
}

void icu::number::impl::DecimalQuantity::roundToMagnitude(uint64_t a1, int a2, unsigned int a3, int *a4)
{
}

void icu::number::impl::DecimalQuantity::multiplyBy(icu::number::impl::DecimalQuantity *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 4))
  {
    memset(v6, 0, sizeof(v6));
    icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v6);
    icu::number::impl::DecimalQuantity::toDecNum(this, (icu::number::impl::DecNum *)v6, a3);
    if (*(int *)a3 <= 0)
    {
      icu::number::impl::DecNum::multiplyBy((icu::number::impl::DecNum *)v6, a2, a3);
      if (*(int *)a3 <= 0)
      {
        icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
        *((unsigned char *)this + 20) = 0;
        icu::number::impl::DecimalQuantity::_setToDecNum(this, (const icu::number::impl::DecNum *)v6, a3);
      }
    }
    if (BYTE12(v6[0])) {
      uprv_free(*(void **)&v6[0]);
    }
  }
}

BOOL icu::number::impl::DecimalQuantity::isZeroish(icu::number::impl::DecimalQuantity *this)
{
  return *((_DWORD *)this + 4) == 0;
}

void **icu::number::impl::DecimalQuantity::setToDecNum(void **this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  *((unsigned char *)this + 20) = 0;
  icu::number::impl::DecimalQuantity::_setToDecNum((icu::number::impl::DecimalQuantity *)this, a2, a3);
  return this;
}

uint64_t icu::number::impl::DecimalQuantity::negate(uint64_t this)
{
  *(unsigned char *)(this + 20) ^= 1u;
  return this;
}

uint64_t icu::number::impl::DecimalQuantity::adjustToZeroScale(icu::number::impl::DecimalQuantity *this)
{
  uint64_t v1 = *((unsigned int *)this + 3);
  *((_DWORD *)this + 3) = 0;
  return v1;
}

double icu::number::impl::DecimalQuantity::getPluralOperand(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1:
      char v4 = *(unsigned char *)(a1 + 20);
      uint64_t v5 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)a1, 1);
      if (v4) {
        return (double)-v5;
      }
      else {
        return (double)v5;
      }
    case 2:
      int v7 = 1;
      return (double)icu::number::impl::DecimalQuantity::toFractionLong((icu::number::impl::DecimalQuantity *)a1, v7);
    case 3:
      int v7 = 0;
      return (double)icu::number::impl::DecimalQuantity::toFractionLong((icu::number::impl::DecimalQuantity *)a1, v7);
    case 4:
      int v8 = *(_DWORD *)(a1 + 12);
      if (*(_DWORD *)(a1 + 40) < v8) {
        int v8 = *(_DWORD *)(a1 + 40);
      }
      int v9 = -*(_DWORD *)(a1 + 44) - v8;
      goto LABEL_15;
    case 5:
      int v9 = -(*(_DWORD *)(a1 + 12) + *(_DWORD *)(a1 + 44));
LABEL_15:
      int v2 = v9 & ~(v9 >> 31);
      goto LABEL_16;
    case 6:
    case 7:
      int v2 = *(_DWORD *)(a1 + 44);
LABEL_16:
      double result = (double)v2;
      break;
    default:
      double result = fabs(icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)a1));
      break;
  }
  return result;
}

uint64_t icu::number::impl::DecimalQuantity::isNegative(icu::number::impl::DecimalQuantity *this)
{
  return *((unsigned char *)this + 20) & 1;
}

uint64_t icu::number::impl::DecimalQuantity::toLong(icu::number::impl::DecimalQuantity *this, int a2)
{
  signed int v2 = *((_DWORD *)this + 4);
  int v3 = *((_DWORD *)this + 3) + *((_DWORD *)this + 11);
  int v4 = v2 + v3 - 1;
  if (v4 >= 17) {
    unsigned int v5 = 17;
  }
  else {
    unsigned int v5 = v2 + v3 - 1;
  }
  if (a2) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = -v3;
    char v9 = 4 * v6 - 4 * v3;
    do
    {
      unsigned int v10 = v8 + v6;
      if (*((unsigned char *)this + 64))
      {
        LOBYTE(v11) = 0;
        if ((v10 & 0x80000000) == 0 && v2 > (int)v10) {
          LOBYTE(v11) = *(unsigned char *)(*((void *)this + 6) + v10);
        }
      }
      else if (v10 <= 0xF)
      {
        uint64_t v11 = (*((void *)this + 6) >> v9) & 0xFLL;
      }
      else
      {
        LOBYTE(v11) = 0;
      }
      uint64_t v7 = 10 * v7 + (char)v11;
      v9 -= 4;
    }
    while (v6-- > 0);
  }
  if (*((unsigned char *)this + 20)) {
    return -v7;
  }
  else {
    return v7;
  }
}

unint64_t icu::number::impl::DecimalQuantity::toFractionLong(icu::number::impl::DecimalQuantity *this, int a2)
{
  int v3 = *((_DWORD *)this + 11);
  int v4 = ~v3;
  int v5 = *((_DWORD *)this + 3);
  int v6 = v5;
  if (a2)
  {
    int v6 = *((_DWORD *)this + 10);
    if (v6 >= v5) {
      int v6 = *((_DWORD *)this + 3);
    }
  }
  if (v6 > v4) {
    return 0;
  }
  unint64_t result = 0;
  char v8 = 4 * ~(v3 + v5);
  int v9 = -v5;
  do
  {
    LODWORD(v10) = v9 + v4;
    if (!*((unsigned char *)this + 64))
    {
      if (v10 <= 0xF)
      {
        uint64_t v10 = (*((void *)this + 6) >> v8) & 0xFLL;
        goto LABEL_14;
      }
LABEL_12:
      LOBYTE(v10) = 0;
      goto LABEL_14;
    }
    if ((v10 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v10) {
      goto LABEL_12;
    }
    LOBYTE(v10) = *(unsigned char *)(*((void *)this + 6) + v10);
LABEL_14:
    unint64_t result = 10 * result + (char)v10;
    if (v4 <= v6) {
      break;
    }
    --v4;
    v8 -= 4;
  }
  while ((double)result <= 1.0e18);
  if ((a2 & 1) == 0 && result)
  {
    while (!(result % 0xA))
    {
      BOOL v11 = result > 9;
      result /= 0xAuLL;
      if (!v11) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t icu::number::impl::DecimalQuantity::fractionCount(icu::number::impl::DecimalQuantity *this)
{
  int v1 = *((_DWORD *)this + 3);
  if (*((_DWORD *)this + 10) < v1) {
    int v1 = *((_DWORD *)this + 10);
  }
  return (-*((_DWORD *)this + 11) - v1) & ~((-*((_DWORD *)this + 11) - v1) >> 31);
}

uint64_t icu::number::impl::DecimalQuantity::fractionCountWithoutTrailingZeros(icu::number::impl::DecimalQuantity *this)
{
  int v1 = -(*((_DWORD *)this + 3) + *((_DWORD *)this + 11));
  return v1 & ~(v1 >> 31);
}

uint64_t icu::number::impl::DecimalQuantity::getExponent(icu::number::impl::DecimalQuantity *this)
{
  return *((unsigned int *)this + 11);
}

double icu::number::impl::DecimalQuantity::toDouble(icu::number::impl::DecimalQuantity *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((*(uint64_t (**)(icu::number::impl::DecimalQuantity *))(*(void *)this + 24))(this)) {
    return NAN;
  }
  if ((*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(void *)this + 32))(this))
  {
    if (*((unsigned char *)this + 20)) {
      return -INFINITY;
    }
    else {
      return INFINITY;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v12 = 0;
    long long v8 = 0u;
    uint64_t v10 = "";
    BOOL v11 = "";
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    icu::number::impl::DecimalQuantity::toScientificString(this, (uint64_t)&v13);
    int v7 = 0;
    if ((BYTE8(v13) & 0x11) != 0)
    {
      int v3 = 0;
    }
    else if ((BYTE8(v13) & 2) != 0)
    {
      int v3 = (unsigned __int16 *)((unint64_t)&v13 | 0xA);
    }
    else
    {
      int v3 = (unsigned __int16 *)*((void *)&v14 + 1);
    }
    if ((SWORD4(v13) & 0x8000u) == 0) {
      int v4 = WORD4(v13) >> 5;
    }
    else {
      int v4 = HIDWORD(v13);
    }
    double v2 = sub_18C916DC8((double *)&v8, v3, v4, &v7);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v13);
  }
  return v2;
}

uint64_t icu::number::impl::DecimalQuantity::adjustExponent(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) += a2;
  return this;
}

BOOL icu::number::impl::DecimalQuantity::resetExponent(icu::number::impl::DecimalQuantity *this)
{
  BOOL result = icu::number::impl::DecimalQuantity::adjustMagnitude(this, *((_DWORD *)this + 11));
  *((_DWORD *)this + 11) = 0;
  return result;
}

BOOL icu::number::impl::DecimalQuantity::hasIntegerValue(icu::number::impl::DecimalQuantity *this)
{
  return *((_DWORD *)this + 3) >= 0;
}

uint64_t icu::number::impl::DecimalQuantity::getUpperDisplayMagnitude(icu::number::impl::DecimalQuantity *this)
{
  int v1 = *((_DWORD *)this + 4) + *((_DWORD *)this + 3);
  if (*((_DWORD *)this + 9) > v1) {
    int v1 = *((_DWORD *)this + 9);
  }
  return (v1 - 1);
}

uint64_t icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude(icu::number::impl::DecimalQuantity *this)
{
  unsigned int v1 = *((_DWORD *)this + 3);
  unsigned int v2 = *((_DWORD *)this + 10);
  if ((int)v2 >= (int)v1) {
    return v1;
  }
  else {
    return v2;
  }
}

uint64_t icu::number::impl::DecimalQuantity::getDigit(icu::number::impl::DecimalQuantity *this, int a2)
{
  LODWORD(v2) = a2 - *((_DWORD *)this + 3);
  if (!*((unsigned char *)this + 64))
  {
    if (v2 <= 0xF)
    {
      uint64_t v2 = (*((void *)this + 6) >> (4 * v2)) & 0xFLL;
      return (char)v2;
    }
    goto LABEL_6;
  }
  if ((v2 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v2)
  {
LABEL_6:
    LOBYTE(v2) = 0;
    return (char)v2;
  }
  LOBYTE(v2) = *(unsigned char *)(*((void *)this + 6) + v2);
  return (char)v2;
}

uint64_t icu::number::impl::DecimalQuantity::getDigitPos(icu::number::impl::DecimalQuantity *this, unsigned int a2)
{
  if (!*((unsigned char *)this + 64))
  {
    if (a2 <= 0xF)
    {
      uint64_t v2 = (*((void *)this + 6) >> (4 * a2)) & 0xFLL;
      return (char)v2;
    }
    goto LABEL_6;
  }
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (signed int)a2)
  {
LABEL_6:
    LOBYTE(v2) = 0;
    return (char)v2;
  }
  LOBYTE(v2) = *(unsigned char *)(*((void *)this + 6) + a2);
  return (char)v2;
}

uint64_t icu::number::impl::DecimalQuantity::signum(icu::number::impl::DecimalQuantity *this)
{
  if (*((_DWORD *)this + 4))
  {
    if (*((unsigned char *)this + 20)) {
      return 0;
    }
    else {
      return 3;
    }
  }
  else
  {
    int v3 = (*(uint64_t (**)(icu::number::impl::DecimalQuantity *))(*(void *)this + 32))(this);
    if (*((unsigned char *)this + 20)) {
      unsigned int v4 = 0;
    }
    else {
      unsigned int v4 = 3;
    }
    if (*((unsigned char *)this + 20)) {
      unsigned int v5 = 1;
    }
    else {
      unsigned int v5 = 2;
    }
    if (v3) {
      return v4;
    }
    else {
      return v5;
    }
  }
}

uint64_t icu::number::impl::DecimalQuantity::isInfinite(icu::number::impl::DecimalQuantity *this)
{
  return (*((unsigned __int8 *)this + 20) >> 1) & 1;
}

uint64_t icu::number::impl::DecimalQuantity::isNaN(icu::number::impl::DecimalQuantity *this)
{
  return (*((unsigned __int8 *)this + 20) >> 2) & 1;
}

void **icu::number::impl::DecimalQuantity::setToInt(void **this, int a2)
{
  *((unsigned char *)this + 20) = 0;
  if (a2 == 0x80000000)
  {
    *((unsigned char *)this + 20) = 1;
    a2 = 0x80000000;
  }
  else if (a2 < 0)
  {
    *((unsigned char *)this + 20) = 1;
    a2 = -a2;
  }
  else if (!a2)
  {
    return this;
  }
  icu::number::impl::DecimalQuantity::_setToInt((uint64_t)this, a2);
  icu::number::impl::DecimalQuantity::compact((icu::number::impl::DecimalQuantity *)this);
  return this;
}

uint64_t icu::number::impl::DecimalQuantity::_setToInt(uint64_t this, int a2)
{
  if (a2 == 0x80000000)
  {
    *(void *)(this + 48) = 0x2147483648;
    *(_DWORD *)(this + 12) = 0;
    int v4 = 10;
  }
  else
  {
    if (a2)
    {
      unint64_t v2 = 0;
      int v3 = 16;
      do
      {
        *((void *)&v5 + 1) = a2
                             - 10
                             * ((((unint64_t)a2 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
        *(void *)&long long v5 = v2;
        unint64_t v2 = v5 >> 4;
        unsigned int v6 = a2 + 9;
        --v3;
        a2 /= 10;
      }
      while (v6 > 0x12);
    }
    else
    {
      unint64_t v2 = 0;
      int v3 = 16;
    }
    *(void *)(this + 48) = v2 >> (4 * v3);
    *(_DWORD *)(this + 12) = 0;
    int v4 = 16 - v3;
  }
  *(_DWORD *)(this + 16) = v4;
  return this;
}

void icu::number::impl::DecimalQuantity::readLongToBcd(icu::number::impl::DecimalQuantity *this, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 <= 0x2386F26FC0FFFFLL)
  {
    unint64_t v6 = 0;
    int v7 = 16;
    if (a2)
    {
      do
      {
        *((void *)&v8 + 1) = ((int)v2 % 10);
        *(void *)&long long v8 = v6;
        unint64_t v6 = v8 >> 4;
        --v7;
        unint64_t v9 = v2 + 9;
        v2 /= 10;
      }
      while (v9 > 0x12);
    }
    *((void *)this + 6) = v6 >> (4 * v7);
    *((_DWORD *)this + 3) = 0;
    LODWORD(v4) = 16 - v7;
  }
  else
  {
    icu::number::impl::DecimalQuantity::ensureCapacity(this, 40);
    uint64_t v4 = 0;
    do
    {
      *(unsigned char *)(*((void *)this + 6) + v4++) = (char)v2 % 10;
      unint64_t v5 = v2 + 9;
      v2 /= 10;
    }
    while (v5 > 0x12);
    *((_DWORD *)this + 3) = 0;
  }
  *((_DWORD *)this + 4) = v4;
}

uint64_t icu::number::impl::DecimalQuantity::readIntToBcd(uint64_t this, int a2)
{
  unint64_t v2 = 0;
  int v3 = 16;
  if (a2)
  {
    do
    {
      *((void *)&v4 + 1) = a2
                           - 10
                           * ((((unint64_t)a2 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
      *(void *)&long long v4 = v2;
      unint64_t v2 = v4 >> 4;
      unsigned int v5 = a2 + 9;
      --v3;
      a2 /= 10;
    }
    while (v5 > 0x12);
  }
  *(void *)(this + 48) = v2 >> (4 * v3);
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 16) = 16 - v3;
  return this;
}

void icu::number::impl::DecimalQuantity::_setToLong(icu::number::impl::DecimalQuantity *this, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2 == 0x8000000000000000)
  {
    memset(v8, 0, sizeof(v8));
    icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v8);
    UErrorCode v7 = U_ZERO_ERROR;
    icu::number::impl::DecNum::setTo((icu::number::impl::DecNum *)v8, "9.223372036854775808E+18", &v7);
    if (v7 <= U_ZERO_ERROR)
    {
      *((unsigned char *)this + 20) |= 1u;
      icu::number::impl::DecimalQuantity::readDecNumberToBcd(this, (int **)v8);
    }
    if (BYTE12(v8[0])) {
      uprv_free(*(void **)&v8[0]);
    }
  }
  else if (a2 > 0x7FFFFFFF)
  {
    icu::number::impl::DecimalQuantity::readLongToBcd(this, a2);
  }
  else
  {
    unint64_t v3 = 0;
    int v4 = 16;
    if (a2)
    {
      do
      {
        *((void *)&v5 + 1) = a2
                             - 10
                             * ((((unint64_t)(int)a2 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
        *(void *)&long long v5 = v3;
        unint64_t v3 = v5 >> 4;
        unsigned int v6 = a2 + 9;
        --v4;
        LODWORD(a2) = (int)a2 / 10;
      }
      while (v6 > 0x12);
    }
    *((void *)this + 6) = v3 >> (4 * v4);
    *((_DWORD *)this + 3) = 0;
    *((_DWORD *)this + 4) = 16 - v4;
  }
}

void icu::number::impl::DecimalQuantity::readDecNumberToBcd(icu::number::impl::DecimalQuantity *this, int **a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = **a2;
  if ((int)v4 <= 16)
  {
    if ((int)v4 < 1)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v5 = 0;
      long long v8 = (unsigned __int8 *)v3 + 9;
      do
      {
        unsigned int v9 = *v8++;
        v5 |= (unint64_t)v9 << v7;
        v7 += 4;
      }
      while (4 * v4 != v7);
    }
    *((void *)this + 6) = v5;
    LODWORD(v5) = *v3;
  }
  else
  {
    icu::number::impl::DecimalQuantity::ensureCapacity(this, v4);
    LODWORD(v5) = *v3;
    if (*v3 >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        *(unsigned char *)(*((void *)this + 6) + v6) = *((unsigned char *)v3 + v6 + 9);
        ++v6;
        uint64_t v5 = *v3;
      }
      while (v6 < v5);
    }
  }
  *((_DWORD *)this + 3) = v3[1];
  *((_DWORD *)this + 4) = v5;
}

void **icu::number::impl::DecimalQuantity::setToDouble(void **this, double a2)
{
  icu::number::impl::DecimalQuantity::setBcdToZero(this);
  *((unsigned char *)this + 20) = 0;
  if ((*(void *)&a2 & 0x8000000000000000) != 0)
  {
    char v4 = 1;
    *((unsigned char *)this + 20) = 1;
    a2 = -a2;
  }
  else
  {
    char v4 = 0;
  }
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    *((unsigned char *)this + 20) = v4 | 2;
  }
  else if (a2 != 0.0)
  {
    icu::number::impl::DecimalQuantity::_setToDoubleFast((icu::number::impl::DecimalQuantity *)this, a2);
    icu::number::impl::DecimalQuantity::compact((icu::number::impl::DecimalQuantity *)this);
  }
  return this;
}

void icu::number::impl::DecimalQuantity::_setToDoubleFast(icu::number::impl::DecimalQuantity *this, double a2)
{
  *((unsigned char *)this + 21) = 1;
  *((double *)this + 3) = a2;
  *((_DWORD *)this + 8) = 0;
  uint64_t v3 = (*(void *)&a2 >> 52) & 0x7FFLL;
  if (v3 <= 0x433 && (double)(uint64_t)a2 == a2)
  {
    icu::number::impl::DecimalQuantity::_setToLong(this, (uint64_t)a2);
  }
  else if (v3 != 2047 && v3)
  {
    double v5 = (double)(1075 - (int)v3) / 3.32192809;
    unsigned int v6 = (int)v5;
    if ((int)v5 < 0)
    {
      if (v6 > 0xFFFFFFEA)
      {
        int v11 = (int)v5;
      }
      else
      {
        int v10 = (int)v5;
        do
        {
          int v11 = v10 + 22;
          a2 = a2 / 1.0e22;
          BOOL v12 = __CFADD__(v10, 43);
          v10 += 22;
        }
        while (!v12);
      }
      double v13 = a2 / dbl_18CA94BF8[-v11];
    }
    else
    {
      if (v6 < 0x16)
      {
        unsigned int v8 = (int)v5;
      }
      else
      {
        unsigned int v7 = (int)v5;
        do
        {
          a2 = a2 * 1.0e22;
          unsigned int v8 = v7 - 22;
          BOOL v9 = v7 > 0x2B;
          v7 -= 22;
        }
        while (v9);
      }
      double v13 = a2 * dbl_18CA94BF8[v8];
    }
    uint64_t v14 = (uint64_t)uprv_round(v13);
    if (v14)
    {
      icu::number::impl::DecimalQuantity::_setToLong(this, v14);
      *((_DWORD *)this + 3) -= v6;
    }
  }
  else
  {
    icu::number::impl::DecimalQuantity::convertToAccurateDouble(this);
  }
}

void icu::number::impl::DecimalQuantity::convertToAccurateDouble(icu::number::impl::DecimalQuantity *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)this + 8);
  *(void *)unsigned int v6 = 0;
  uint64_t v7 = 0;
  __int16 v8 = 0;
  BOOL v5 = 0;
  int v3 = 0;
  int v4 = 0;
  icu::double_conversion::DoubleToStringConverter::DoubleToAscii(0, 0, v6, 0x12u, &v5, &v4, &v3, *((double *)this + 3));
  icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
  icu::number::impl::DecimalQuantity::readDoubleConversionToBcd(this, v6, v4, v3);
  *((_DWORD *)this + 3) += v2;
  *((unsigned char *)this + 65) = 1;
}

void icu::number::impl::DecimalQuantity::readDoubleConversionToBcd(icu::number::impl::DecimalQuantity *this, const char *a2, int a3, int a4)
{
  if (a3 <= 16)
  {
    int v10 = a3 - 1;
    if (a3 < 1)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      do
      {
        v12 |= (a2[v10] - 48) << v11;
        v11 += 4;
        --v10;
      }
      while (4 * a3 != v11);
    }
    *((void *)this + 6) = v12;
  }
  else
  {
    icu::number::impl::DecimalQuantity::ensureCapacity(this, a3);
    uint64_t v8 = 0;
    int v9 = a3 - 1;
    do
      *(unsigned char *)(*((void *)this + 6) + v8++) = a2[v9--] - 48;
    while (a3 != v8);
  }
  *((_DWORD *)this + 3) = a4 - a3;
  *((_DWORD *)this + 4) = a3;
}

uint64_t icu::number::impl::DecimalQuantity::setToDecNumber(uint64_t a1, const char *a2, int a3, UErrorCode *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  icu::number::impl::DecimalQuantity::setBcdToZero((void **)a1);
  *(unsigned char *)(a1 + 20) = 0;
  memset(v9, 0, sizeof(v9));
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v9);
  icu::number::impl::DecNum::setTo((icu::number::impl::DecNum *)v9, a2, a3, a4);
  icu::number::impl::DecimalQuantity::_setToDecNum((icu::number::impl::DecimalQuantity *)a1, (const icu::number::impl::DecNum *)v9, a4);
  if (BYTE12(v9[0])) {
    uprv_free(*(void **)&v9[0]);
  }
  return a1;
}

void icu::number::impl::DecimalQuantity::_setToDecNum(icu::number::impl::DecimalQuantity *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (icu::number::impl::DecNum::isNegative(a2)) {
      *((unsigned char *)this + 20) |= 1u;
    }
    if (icu::number::impl::DecNum::isNaN(a2))
    {
      char v5 = *((unsigned char *)this + 20) | 4;
LABEL_8:
      *((unsigned char *)this + 20) = v5;
      return;
    }
    if (icu::number::impl::DecNum::isInfinity(a2))
    {
      char v5 = *((unsigned char *)this + 20) | 2;
      goto LABEL_8;
    }
    if (!icu::number::impl::DecNum::isZero(a2))
    {
      icu::number::impl::DecimalQuantity::readDecNumberToBcd(this, (int **)a2);
      icu::number::impl::DecimalQuantity::compact(this);
    }
  }
}

void icu::number::impl::DecimalQuantity::fromExponentString(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(__int16 *)(a1 + 8) < 0) {
    int32_t v6 = *(_DWORD *)(a1 + 12);
  }
  else {
    int32_t v6 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  if ((icu::UnicodeString::doIndexOf(a1, 0x65u, 0, v6) & 0x80000000) != 0
    && (*(__int16 *)(a1 + 8) < 0 ? (int32_t v7 = *(_DWORD *)(a1 + 12)) : (int32_t v7 = *(unsigned __int16 *)(a1 + 8) >> 5),
        (icu::UnicodeString::doIndexOf(a1, 0x63u, 0, v7) & 0x80000000) != 0
     && (*(__int16 *)(a1 + 8) < 0 ? (int32_t v8 = *(_DWORD *)(a1 + 12)) : (int32_t v8 = *(unsigned __int16 *)(a1 + 8) >> 5),
         (icu::UnicodeString::doIndexOf(a1, 0x45u, 0, v8) & 0x80000000) != 0
      && (*(__int16 *)(a1 + 8) < 0 ? (int32_t v9 = *(_DWORD *)(a1 + 12)) : (int32_t v9 = *(unsigned __int16 *)(a1 + 8) >> 5),
          (icu::UnicodeString::doIndexOf(a1, 0x43u, 0, v9) & 0x80000000) != 0))))
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)a3 = &unk_1EDA4EF28;
    *(_DWORD *)(a3 + 36) = 0;
    *(_DWORD *)(a3 + 44) = 0;
    *(unsigned char *)(a3 + 65) = 0;
    icu::number::impl::DecimalQuantity::setBcdToZero((void **)a3);
    *(unsigned char *)(a3 + 20) = 0;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v33, (UChar **)a1);
    int VisibleFractionCount = icu::number::impl::DecimalQuantity::getVisibleFractionCount((uint64_t)v33);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v33);
    memset(&v35[1], 0, 56);
    v35[0] = (char *)&v35[1] + 5;
    LODWORD(v35[1]) = 40;
    icu::CharString::appendInvariantChars((icu::CharString *)v35, (const icu::UnicodeString *)a1, a2);
    icu::number::impl::DecimalQuantity::setToDecNumber(a3, v35[0], (int)v35[7], a2);
    *(_DWORD *)(a3 + 40) = -VisibleFractionCount;
    if (BYTE4(v35[1])) {
      uprv_free((void *)v35[0]);
    }
  }
  else
  {
    if (*(__int16 *)(a1 + 8) < 0) {
      int32_t v10 = *(_DWORD *)(a1 + 12);
    }
    else {
      int32_t v10 = *(unsigned __int16 *)(a1 + 8) >> 5;
    }
    int32_t IndexOf = icu::UnicodeString::doLastIndexOf((icu::UnicodeString *)a1, 101, 0, v10);
    if (IndexOf < 0)
    {
      int32_t v12 = *(__int16 *)(a1 + 8) < 0 ? *(_DWORD *)(a1 + 12) : *(unsigned __int16 *)(a1 + 8) >> 5;
      int32_t IndexOf = icu::UnicodeString::doLastIndexOf((icu::UnicodeString *)a1, 99, 0, v12);
      if (IndexOf < 0)
      {
        int32_t v13 = *(__int16 *)(a1 + 8) < 0 ? *(_DWORD *)(a1 + 12) : *(unsigned __int16 *)(a1 + 8) >> 5;
        int32_t IndexOf = icu::UnicodeString::doLastIndexOf((icu::UnicodeString *)a1, 69, 0, v13);
        if (IndexOf < 0)
        {
          if (*(__int16 *)(a1 + 8) < 0) {
            int32_t v14 = *(_DWORD *)(a1 + 12);
          }
          else {
            int32_t v14 = *(unsigned __int16 *)(a1 + 8) >> 5;
          }
          int32_t IndexOf = icu::UnicodeString::doLastIndexOf((icu::UnicodeString *)a1, 67, 0, v14);
        }
      }
    }
    int v17 = IndexOf + 1;
    memset(v42, 0, 64);
    unsigned int v18 = *(unsigned __int16 *)(a1 + 8);
    if ((v18 & 0x8000) != 0) {
      unsigned int v19 = *(_DWORD *)(a1 + 12);
    }
    else {
      unsigned int v19 = v18 >> 5;
    }
    icu::UnicodeString::tempSubString((icu::UnicodeString *)a1, IndexOf + 1, v19 - v17, (icu::UnicodeString *)v42);
    unsigned int v21 = *(unsigned __int16 *)(a1 + 8);
    if (*(__int16 *)(a1 + 8) < 0) {
      unsigned int v22 = *(_DWORD *)(a1 + 12);
    }
    else {
      unsigned int v22 = v21 >> 5;
    }
    if (v22 <= v17)
    {
      BOOL v24 = 0;
    }
    else
    {
      if ((v21 & 2) != 0) {
        uint64_t v23 = a1 + 10;
      }
      else {
        uint64_t v23 = *(void *)(a1 + 24);
      }
      BOOL v24 = *(unsigned __int16 *)(v23 + 2 * v17) == 45;
    }
    BOOL v32 = v24;
    int v25 = icu::ICU_Utility::parseAsciiInteger((icu::ICU_Utility *)v42, (const icu::UnicodeString *)&v32, v20);
    memset(&v41[4], 0, 32);
    if (v24) {
      int v26 = -v25;
    }
    else {
      int v26 = v25;
    }
    memset(v41, 0, 32);
    icu::UnicodeString::tempSubString((icu::UnicodeString *)a1, 0, IndexOf, (icu::UnicodeString *)v41);
    memset(&v38[1], 0, 48);
    int v40 = 0;
    v38[0] = (char *)&v38[1] + 5;
    LODWORD(v38[1]) = 40;
    int v39 = 0;
    icu::CharString::appendInvariantChars((icu::CharString *)v38, (const icu::UnicodeString *)v41, a2);
    long long v36 = 0u;
    long long v37 = 0u;
    memset(v35, 0, sizeof(v35));
    icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v35);
    icu::number::impl::DecNum::setTo((icu::number::impl::DecNum *)v35, (const char *)v38[0], v39, a2);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)a3 = &unk_1EDA4EF28;
    *(_DWORD *)(a3 + 36) = 0;
    *(_DWORD *)(a3 + 44) = 0;
    *(unsigned char *)(a3 + 65) = 0;
    icu::number::impl::DecimalQuantity::setBcdToZero((void **)a3);
    *(unsigned char *)(a3 + 20) = 0;
    icu::number::impl::DecimalQuantity::setBcdToZero((void **)a3);
    *(unsigned char *)(a3 + 20) = 0;
    icu::number::impl::DecimalQuantity::_setToDecNum((icu::number::impl::DecimalQuantity *)a3, (const icu::number::impl::DecNum *)v35, a2);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v34, v41);
    int v27 = icu::number::impl::DecimalQuantity::getVisibleFractionCount((uint64_t)v34);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v34);
    int v29 = *(_DWORD *)(a3 + 44) + v26;
    *(_DWORD *)(a3 + 40) = -v27;
    *(_DWORD *)(a3 + 44) = v29;
    if (BYTE4(v35[1])) {
      uprv_free((void *)v35[0]);
    }
    long long v30 = (void *)BYTE4(v38[1]);
    if (BYTE4(v38[1])) {
      uprv_free(v38[0]);
    }
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v41);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v42);
  }
}

uint64_t icu::number::impl::DecimalQuantity::getVisibleFractionCount(uint64_t a1)
{
  if (*(__int16 *)(a1 + 8) < 0) {
    int32_t v2 = *(_DWORD *)(a1 + 12);
  }
  else {
    int32_t v2 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  int v3 = icu::UnicodeString::doIndexOf((icu::UnicodeString *)a1, 46, 0, v2);
  uint64_t result = 0;
  BOOL v5 = __CFADD__(v3, 1);
  int v6 = v3 + 1;
  if (!v5)
  {
    if (*(__int16 *)(a1 + 8) < 0) {
      int v7 = *(_DWORD *)(a1 + 12);
    }
    else {
      int v7 = *(unsigned __int16 *)(a1 + 8) >> 5;
    }
    return (v7 - v6);
  }
  return result;
}

BOOL icu::number::impl::DecimalQuantity::fitsInLong(icu::number::impl::DecimalQuantity *this, int a2)
{
  if (((*(uint64_t (**)(icu::number::impl::DecimalQuantity *))(*(void *)this + 32))(this) & 1) != 0
    || ((*(uint64_t (**)(icu::number::impl::DecimalQuantity *))(*(void *)this + 24))(this) & 1) != 0)
  {
    return 0;
  }
  uint64_t v4 = *((unsigned int *)this + 4);
  if (!v4) {
    return 1;
  }
  int v5 = *((_DWORD *)this + 3);
  if (v5 + *((_DWORD *)this + 11) < 0 && !a2) {
    return 0;
  }
  int v7 = v4 + v5 - 1;
  if (v7 < 18) {
    return 1;
  }
  if (v7 != 18) {
    return 0;
  }
  if ((int)v4 < 1) {
    return *((unsigned char *)this + 20) & 1;
  }
  uint64_t v8 = 0;
  uint64_t v9 = -v4;
  int32_t v10 = &byte_18CA94CA8;
  while (1)
  {
    int Digit = icu::number::impl::DecimalQuantity::getDigit(this, (int)v8 + 18);
    int v13 = *v10++;
    char v12 = v13;
    if (v13 != Digit) {
      break;
    }
    if (v9 == --v8) {
      return *((unsigned char *)this + 20) & 1;
    }
  }
  return Digit < v12;
}

void *icu::number::impl::DecimalQuantity::toScientificString@<X0>(icu::number::impl::DecimalQuantity *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  if (*((unsigned char *)this + 20))
  {
    __int16 v20 = 45;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
  }
  int v4 = *((_DWORD *)this + 4);
  if (!v4) {
    return (void *)icu::UnicodeString::doAppend(a2, (uint64_t)"0", 0, 0xFFFFFFFFLL);
  }
  unsigned int v5 = v4 - 1;
  if (*((unsigned char *)this + 64))
  {
    if (v4 >= 1)
    {
      LOBYTE(v6) = *(unsigned char *)(*((void *)this + 6) + v5);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (v5 > 0xF)
  {
LABEL_9:
    LOBYTE(v6) = 0;
    goto LABEL_11;
  }
  uint64_t v6 = (*((void *)this + 6) >> (4 * v5)) & 0xFLL;
LABEL_11:
  icu::UnicodeString::append(a2, (char)v6 + 48);
  if (v4 > 1)
  {
    __int16 v20 = 46;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
    int64_t v8 = (v4 - 2);
    char v9 = 4 * v8;
    while (*((unsigned char *)this + 64))
    {
      if (v8 >= *((int *)this + 4)) {
        goto LABEL_17;
      }
      LOBYTE(v10) = *(unsigned char *)(*((void *)this + 6) + v8);
LABEL_19:
      icu::UnicodeString::append(a2, (char)v10 + 48);
      v9 -= 4;
      if (v8-- <= 0) {
        goto LABEL_21;
      }
    }
    if ((unint64_t)v8 <= 0xF)
    {
      uint64_t v10 = (*((void *)this + 6) >> (v9 & 0xFC)) & 0xFLL;
      goto LABEL_19;
    }
LABEL_17:
    LOBYTE(v10) = 0;
    goto LABEL_19;
  }
LABEL_21:
  __int16 v20 = 69;
  icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
  uint64_t quot = *((_DWORD *)this + 3) + v5 + *((_DWORD *)this + 11);
  if (quot == 0x80000000)
  {
    icu::UnicodeString::UnicodeString((uint64_t)&v20, (uint64_t)L"-2147483648", 0xFFFFFFFFLL);
    if ((v21 & 0x8000u) == 0) {
      uint64_t v13 = v21 >> 5;
    }
    else {
      uint64_t v13 = v22;
    }
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v20, 0, v13);
    return icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v20);
  }
  if ((quot & 0x80000000) != 0)
  {
    uint64_t quot = -(int)quot;
    __int16 v15 = 45;
  }
  else
  {
    __int16 v20 = 43;
    uint64_t result = (void *)icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
    if (quot) {
      goto LABEL_31;
    }
    __int16 v15 = 48;
  }
  __int16 v20 = v15;
  uint64_t result = (void *)icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
LABEL_31:
  unsigned int v16 = *(unsigned __int16 *)(a2 + 8);
  int v17 = (__int16)v16;
  unsigned int v18 = v16 >> 5;
  if (v17 >= 0) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = *(unsigned int *)(a2 + 12);
  }
  if (quot)
  {
    do
    {
      uint64_t quot = div(quot, 10).quot;
      uint64_t result = (void *)icu::UnicodeString::replace((icu::UnicodeString *)a2, v19, 0, HIDWORD(quot) + 48);
    }
    while ((int)quot > 0);
  }
  return result;
}

uint64_t sub_18C965730(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = a1 + 13;
  *(_DWORD *)(a1 + 8) = 20;
  *(unsigned char *)(a1 + 12) = 0;
  if (a2 >= 21 && a3 <= 0)
  {
    unsigned int v5 = uprv_malloc(a2);
    if (v5)
    {
      uint64_t v6 = v5;
      if (*(unsigned char *)(a1 + 12)) {
        uprv_free(*(void **)a1);
      }
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(unsigned char *)(a1 + 12) = 1;
    }
  }
  return a1;
}

void icu::number::impl::DecimalQuantity::truncate(icu::number::impl::DecimalQuantity *this)
{
  int v1 = *((_DWORD *)this + 3);
  if (v1 < 0)
  {
    icu::number::impl::DecimalQuantity::shiftRight((uint64_t)this, -v1);
    *((_DWORD *)this + 3) = 0;
    icu::number::impl::DecimalQuantity::compact(this);
  }
}

uint64_t icu::number::impl::DecimalQuantity::shiftRight(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 64))
  {
    int v2 = *(_DWORD *)(this + 16);
    if (v2 <= a2)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      uint64_t v3 = 0;
      do
      {
        *(unsigned char *)(*(void *)(this + 48) + v3) = *(unsigned char *)(*(void *)(this + 48) + v3 + a2);
        ++v3;
        int v2 = *(_DWORD *)(this + 16);
      }
      while (v3 < v2 - a2);
    }
    if ((int)v3 < v2)
    {
      uint64_t v4 = 0;
      do
      {
        *(unsigned char *)(*(void *)(this + 48) + v3 + v4) = 0;
        int v2 = *(_DWORD *)(this + 16);
        ++v4;
      }
      while (v2 > (int)v3 + (int)v4);
    }
  }
  else
  {
    *(void *)(this + 48) >>= 4 * a2;
    int v2 = *(_DWORD *)(this + 16);
  }
  *(_DWORD *)(this + 12) += a2;
  *(_DWORD *)(this + 16) = v2 - a2;
  return this;
}

void icu::number::impl::DecimalQuantity::roundToNickel(uint64_t a1, int a2, unsigned int a3, int *a4)
{
}

void icu::number::impl::DecimalQuantity::roundToMagnitude(uint64_t a1, int a2, unsigned int a3, int a4, int *a5)
{
  BOOL v55 = a3 < 4;
  while (1)
  {
    int v8 = *(_DWORD *)(a1 + 12);
    BOOL v9 = a2 - v8 <= a2 || v8 <= 0;
    if (v9) {
      unsigned int v10 = a2 - v8;
    }
    else {
      unsigned int v10 = 0x80000000;
    }
    if (a2 - v8 < a2 && v8 < 0) {
      int v12 = 0x7FFFFFFF;
    }
    else {
      int v12 = v10;
    }
    if (*(unsigned char *)(a1 + 64))
    {
      if (v12 < 0)
      {
        LODWORD(v13) = 0;
        goto LABEL_24;
      }
      if (*(_DWORD *)(a1 + 16) > v12)
      {
        LODWORD(v13) = *(unsigned __int8 *)(*(void *)(a1 + 48) + v12);
        goto LABEL_22;
      }
LABEL_19:
      LODWORD(v13) = 0;
      goto LABEL_22;
    }
    if (v12 > 0xF) {
      goto LABEL_19;
    }
    uint64_t v13 = (*(void *)(a1 + 48) >> (4 * v12)) & 0xFLL;
LABEL_22:
    if (v12 > 0)
    {
      int v14 = 0;
      goto LABEL_29;
    }
LABEL_24:
    if (!*(unsigned char *)(a1 + 21) && (!a4 || !v13 || v13 == 5)) {
      return;
    }
    int v14 = 1;
LABEL_29:
    int v15 = *(_DWORD *)(a1 + 16);
    if (!v15) {
      return;
    }
    unsigned int v16 = v12 == 0x80000000 ? 0x80000000 : v12 - 1;
    if (*(unsigned char *)(a1 + 64))
    {
      LODWORD(v17) = 0;
      if ((v16 & 0x80000000) == 0 && v15 > (int)v16) {
        LODWORD(v17) = *(unsigned __int8 *)(*(void *)(a1 + 48) + v16);
      }
    }
    else if (v16 <= 0xF)
    {
      uint64_t v17 = (*(void *)(a1 + 48) >> (4 * v16)) & 0xFLL;
    }
    else
    {
      LODWORD(v17) = 0;
    }
    if (!*(unsigned char *)(a1 + 21)) {
      break;
    }
    int v54 = v14;
    if (v12 >= -2147483646) {
      signed int v18 = v12 - 2;
    }
    else {
      signed int v18 = 0x80000000;
    }
    signed int v19 = uprv_max(0, v15 - 14);
    switch((int)v17)
    {
      case 0:
        if (a4)
        {
          switch((int)v13)
          {
            case 0:
            case 5:
              break;
            case 2:
            case 7:
              goto LABEL_101;
            default:
              goto LABEL_104;
          }
        }
        if (v18 < v19) {
          goto LABEL_60;
        }
        if (v12 <= -2147483646) {
          int v20 = -2147483646;
        }
        else {
          int v20 = v12;
        }
        unsigned int v21 = v20 - 1;
        char v22 = 4 * v20 - 8;
        while (1)
        {
          --v21;
          if (*(unsigned char *)(a1 + 64))
          {
            if ((v21 & 0x80000000) == 0
              && *(_DWORD *)(a1 + 16) > (signed int)v21
              && *(unsigned char *)(*(void *)(a1 + 48) + v21))
            {
              goto LABEL_105;
            }
          }
          else if (v21 <= 0xF && ((*(void *)(a1 + 48) >> v22) & 0xF) != 0)
          {
            goto LABEL_105;
          }
          v22 -= 4;
          if ((int)v21 <= v19)
          {
LABEL_60:
            char v23 = 0;
            int v24 = 1;
            goto LABEL_106;
          }
        }
      case 4:
        if (a4 && v13 != 7 && v13 != 2) {
          goto LABEL_104;
        }
        if (v18 < v19) {
          goto LABEL_98;
        }
        if (v12 <= -2147483646) {
          int v25 = -2147483646;
        }
        else {
          int v25 = v12;
        }
        unsigned int v26 = v25 - 1;
        char v27 = 4 * v25 - 8;
        while (2)
        {
          --v26;
          if (*(unsigned char *)(a1 + 64))
          {
            if ((v26 & 0x80000000) != 0 || *(_DWORD *)(a1 + 16) <= (signed int)v26) {
              break;
            }
            LODWORD(v28) = *(unsigned __int8 *)(*(void *)(a1 + 48) + v26);
          }
          else
          {
            if (v26 > 0xF) {
              break;
            }
            uint64_t v28 = (*(void *)(a1 + 48) >> v27) & 0xFLL;
          }
          if (v28 == 9)
          {
            int v24 = 0;
            v27 -= 4;
            int v29 = 2;
            char v23 = 1;
            if ((int)v26 <= v19) {
              goto LABEL_127;
            }
            continue;
          }
          break;
        }
LABEL_105:
        char v23 = 0;
        int v24 = 0;
LABEL_106:
        int v29 = 1;
        goto LABEL_127;
      case 5:
        if (a4 && v13 != 7 && v13 != 2) {
          goto LABEL_104;
        }
        if (v18 < v19) {
          goto LABEL_98;
        }
        if (v12 <= -2147483646) {
          int v30 = -2147483646;
        }
        else {
          int v30 = v12;
        }
        unsigned int v31 = v30 - 1;
        char v32 = 4 * v30 - 8;
        do
        {
          --v31;
          if (*(unsigned char *)(a1 + 64))
          {
            if ((v31 & 0x80000000) == 0
              && *(_DWORD *)(a1 + 16) > (signed int)v31
              && *(unsigned char *)(*(void *)(a1 + 48) + v31))
            {
              goto LABEL_110;
            }
          }
          else if (v31 <= 0xF && ((*(void *)(a1 + 48) >> v32) & 0xF) != 0)
          {
            goto LABEL_110;
          }
          v32 -= 4;
        }
        while ((int)v31 > v19);
LABEL_98:
        int v24 = 0;
        int v29 = 2;
        char v23 = 1;
        goto LABEL_127;
      case 9:
        if (a4)
        {
          switch((int)v13)
          {
            case 2:
            case 7:
              goto LABEL_101;
            case 4:
            case 9:
              break;
            default:
              goto LABEL_104;
          }
        }
        if (v18 < v19)
        {
          char v23 = 0;
          int v29 = 3;
          int v24 = 1;
          goto LABEL_127;
        }
        if (v12 <= -2147483646) {
          int v33 = -2147483646;
        }
        else {
          int v33 = v12;
        }
        unsigned int v34 = v33 - 1;
        char v35 = 4 * v33 - 8;
        break;
      default:
        if (!a4 || v13 == 2 || v13 == 7)
        {
LABEL_101:
          char v23 = 0;
          int v24 = 0;
          if ((char)v17 < 5) {
            int v29 = 1;
          }
          else {
            int v29 = 3;
          }
          goto LABEL_127;
        }
LABEL_104:
        if ((char)v13 < 2) {
          goto LABEL_105;
        }
        if (v13 < 5) {
          goto LABEL_110;
        }
        char v23 = 0;
        int v24 = 0;
        if (v13 < 7) {
          int v29 = 1;
        }
        else {
          int v29 = 3;
        }
        goto LABEL_127;
    }
    while (1)
    {
      --v34;
      if (*(unsigned char *)(a1 + 64)) {
        break;
      }
      if (v34 > 0xF) {
        goto LABEL_110;
      }
      uint64_t v36 = (*(void *)(a1 + 48) >> v35) & 0xFLL;
LABEL_121:
      if (v36 != 9) {
        goto LABEL_110;
      }
      char v23 = 0;
      v35 -= 4;
      int v29 = 3;
      int v24 = 1;
      if ((int)v34 <= v19) {
        goto LABEL_127;
      }
    }
    if ((v34 & 0x80000000) == 0 && *(_DWORD *)(a1 + 16) > (signed int)v34)
    {
      LODWORD(v36) = *(unsigned __int8 *)(*(void *)(a1 + 48) + v34);
      goto LABEL_121;
    }
LABEL_110:
    char v23 = 0;
    int v24 = 0;
    int v29 = 3;
LABEL_127:
    if (a3 <= 3) {
      char v23 = 0;
    }
    if ((v24 & v55 & 1) == 0 && (v23 & 1) == 0)
    {
      int v15 = *(_DWORD *)(a1 + 16);
      if ((int)v16 >= v15 - 14)
      {
        *(unsigned char *)(a1 + 21) = 0;
        *(void *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 32) = 0;
        if (!v54) {
          goto LABEL_159;
        }
        if (a4 && v13 && v13 != 5) {
          goto LABEL_160;
        }
        return;
      }
    }
    icu::number::impl::DecimalQuantity::convertToAccurateDouble((icu::number::impl::DecimalQuantity *)a1);
  }
  if (!a4 || v13 == 2 || v13 == 7)
  {
    if ((char)v17 >= 5)
    {
      if (v17 == 5)
      {
        LODWORD(v37) = v12 - 2;
        if (v12 >= -2147483646) {
          int64_t v37 = v37;
        }
        else {
          int64_t v37 = 0x80000000;
        }
        if ((v37 & 0x80000000) == 0)
        {
          char v38 = 4 * v37;
          do
          {
            if (*(unsigned char *)(a1 + 64))
            {
              if (v37 < v15 && *(unsigned char *)(*(void *)(a1 + 48) + v37)) {
                goto LABEL_158;
              }
            }
            else if ((unint64_t)v37 <= 0xF && ((*(void *)(a1 + 48) >> (v38 & 0xFC)) & 0xF) != 0)
            {
              goto LABEL_158;
            }
            v38 -= 4;
            BOOL v9 = v37-- <= 0;
          }
          while (!v9);
        }
        int v29 = 2;
      }
      else
      {
LABEL_158:
        int v29 = 3;
      }
    }
    else
    {
      int v29 = 1;
    }
LABEL_159:
    if (a4)
    {
LABEL_160:
      if ((v13 - 8) < 0xFFFFFFFA) {
        goto LABEL_161;
      }
      if (v13 == 2 && v29 != 3)
      {
        int v39 = 1;
        LODWORD(v13) = 2;
        goto LABEL_175;
      }
LABEL_169:
      BOOL v40 = v13 == 7 && v29 == 3;
    }
    else
    {
      BOOL v40 = (v13 & 1) == 0;
    }
    int v39 = v40;
  }
  else
  {
    if ((char)v13 > 1)
    {
      int v29 = 3;
      if (v13 >= 5)
      {
        if (v13 < 7) {
          int v29 = 1;
        }
        else {
          int v29 = 3;
        }
        goto LABEL_160;
      }
      goto LABEL_169;
    }
    int v29 = 1;
LABEL_161:
    int v39 = 1;
  }
LABEL_175:
  if (*a5 < 1)
  {
    int v41 = 0;
    char v42 = *(unsigned char *)(a1 + 20);
    switch(a3)
    {
      case 0u:
        int v41 = v42 & 1;
        goto LABEL_201;
      case 1u:
        goto LABEL_194;
      case 2u:
        goto LABEL_199;
      case 3u:
        goto LABEL_201;
      case 4u:
        if (v29 == 3) {
          goto LABEL_200;
        }
        int v41 = v39;
        goto LABEL_190;
      case 5u:
        unsigned int v43 = v29 - 1;
        if (v43 >= 3) {
          goto LABEL_198;
        }
        int v41 = (3u >> (v43 & 7)) & 1;
        goto LABEL_201;
      case 6u:
        unsigned int v44 = v29 - 1;
        if (v44 >= 3) {
          goto LABEL_198;
        }
        BOOL v45 = (v44 & 7) == 0;
        goto LABEL_195;
      case 8u:
        if (v29 == 1) {
          goto LABEL_199;
        }
        if (v29 == 3) {
          goto LABEL_200;
        }
        int v41 = v39 ^ 1;
        goto LABEL_201;
      case 9u:
        if (v29 == 3) {
          goto LABEL_200;
        }
        int v41 = v42 & 1;
LABEL_190:
        if (v29 != 2) {
LABEL_199:
        }
          int v41 = 1;
        goto LABEL_201;
      case 0xAu:
        if (v29 == 1) {
          goto LABEL_199;
        }
        if (v29 == 3)
        {
LABEL_200:
          int v41 = 0;
        }
        else
        {
LABEL_194:
          BOOL v45 = (v42 & 1) == 0;
LABEL_195:
          int v41 = v45;
        }
LABEL_201:
        if (v12 >= v15)
        {
          icu::number::impl::DecimalQuantity::setBcdToZero((void **)a1);
          *(_DWORD *)(a1 + 12) = a2;
        }
        else
        {
          icu::number::impl::DecimalQuantity::shiftRight(a1, v12);
        }
        if (!a4) {
          goto LABEL_227;
        }
        if ((char)v13 < 5) {
          int v46 = v41;
        }
        else {
          int v46 = 0;
        }
        if (v46 == 1)
        {
          if (*(unsigned char *)(a1 + 64))
          {
            icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)a1, 1);
            **(unsigned char **)(a1 + 48) = 0;
          }
          else
          {
            *(void *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF0;
          }
        }
        else
        {
          if ((char)v13 < 5) {
            char v47 = 1;
          }
          else {
            char v47 = v41;
          }
          if (v47)
          {
            if (*(unsigned char *)(a1 + 64))
            {
              icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)a1, 1);
              **(unsigned char **)(a1 + 48) = 5;
            }
            else
            {
              *(void *)(a1 + 48) = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0 | 5;
            }
            if (!*(_DWORD *)(a1 + 16)) {
              *(_DWORD *)(a1 + 16) = 1;
            }
            return;
          }
          if (*(unsigned char *)(a1 + 64))
          {
            icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)a1, 1);
            LODWORD(v13) = 9;
            **(unsigned char **)(a1 + 48) = 9;
          }
          else
          {
            *(void *)(a1 + 48) = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0 | 9;
            LODWORD(v13) = 9;
          }
LABEL_227:
          if ((v41 & 1) == 0)
          {
            int v48 = *(unsigned __int8 *)(a1 + 64);
            if (v13 == 9)
            {
              char v49 = 0;
              unint64_t v50 = 0;
              if (!*(unsigned char *)(a1 + 64)) {
                goto LABEL_232;
              }
LABEL_230:
              if ((uint64_t)v50 < *(int *)(a1 + 16))
              {
                LODWORD(v51) = *(unsigned __int8 *)(*(void *)(a1 + 48) + v50);
                while (v51 == 9)
                {
                  ++v50;
                  v49 += 4;
                  if (*(unsigned char *)(a1 + 64)) {
                    goto LABEL_230;
                  }
LABEL_232:
                  if (v50 > 0xF) {
                    break;
                  }
                  uint64_t v51 = (*(void *)(a1 + 48) >> (v49 & 0xFC)) & 0xFLL;
                }
              }
              icu::number::impl::DecimalQuantity::shiftRight(a1, v50);
              int v48 = *(unsigned __int8 *)(a1 + 64);
            }
            if (v48)
            {
              if (*(int *)(a1 + 16) < 1) {
                char v52 = 1;
              }
              else {
                char v52 = **(unsigned char **)(a1 + 48) + 1;
              }
              icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)a1, 1);
              **(unsigned char **)(a1 + 48) = v52;
            }
            else
            {
              *(void *)(a1 + 48) = ((*(void *)(a1 + 48) & 0xFLL) + 1) | *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0;
            }
            ++*(_DWORD *)(a1 + 16);
          }
        }
        icu::number::impl::DecimalQuantity::compact((icu::number::impl::DecimalQuantity *)a1);
        return;
      default:
LABEL_198:
        *a5 = 65809;
        return;
    }
  }
}

void icu::number::impl::DecimalQuantity::setDigitPos(icu::number::impl::DecimalQuantity *this, int a2, int a3)
{
  char v3 = a3;
  if (*((unsigned char *)this + 64))
  {
    icu::number::impl::DecimalQuantity::ensureCapacity(this, a2 + 1);
    *(unsigned char *)(*((void *)this + 6) + a2) = v3;
  }
  else if (a2 < 16)
  {
    *((void *)this + 6) = *((void *)this + 6) & ~(15 << (4 * a2)) | ((uint64_t)a3 << (4 * a2));
  }
  else
  {
    icu::number::impl::DecimalQuantity::switchStorage(this);
    icu::number::impl::DecimalQuantity::ensureCapacity(this, a2 + 1);
    *(unsigned char *)(*((void *)this + 6) + a2) = v3;
  }
}

void icu::number::impl::DecimalQuantity::roundToInfinity(icu::number::impl::DecimalQuantity *this)
{
  if (*((unsigned char *)this + 21)) {
    icu::number::impl::DecimalQuantity::convertToAccurateDouble(this);
  }
}

void icu::number::impl::DecimalQuantity::appendDigit(icu::number::impl::DecimalQuantity *this, int a2, int a3, int a4)
{
  if (a2)
  {
    int v8 = (int *)((char *)this + 12);
    int v7 = *((_DWORD *)this + 3);
    if (v7 >= 1)
    {
      a3 += v7;
      if (a4) {
        *int v8 = 0;
      }
    }
    int v9 = a3 + 1;
    icu::number::impl::DecimalQuantity::shiftLeft((const void **)this, a3 + 1);
    if (*((unsigned char *)this + 64))
    {
      icu::number::impl::DecimalQuantity::ensureCapacity(this, 1);
      **((unsigned char **)this + 6) = a2;
      if (!a4) {
        return;
      }
    }
    else
    {
      *((void *)this + 6) = *((void *)this + 6) & 0xFFFFFFFFFFFFFFF0 | a2;
      if (!a4) {
        return;
      }
    }
    int v10 = *v8;
LABEL_13:
    *int v8 = v10 + v9;
    return;
  }
  if (a4 && *((_DWORD *)this + 4))
  {
    int v10 = a3 + 1;
    int v9 = *((_DWORD *)this + 3);
    int v8 = (int *)((char *)this + 12);
    goto LABEL_13;
  }
}

void icu::number::impl::DecimalQuantity::shiftLeft(const void **this, int a2)
{
  if (*((unsigned char *)this + 64)
    || *((_DWORD *)this + 4) + a2 >= 17
    && (icu::number::impl::DecimalQuantity::switchStorage((icu::number::impl::DecimalQuantity *)this),
        *((unsigned char *)this + 64)))
  {
    icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)this, *((_DWORD *)this + 4) + a2);
    memmove((char *)this[6] + a2, this[6], *((int *)this + 4));
    bzero((void *)this[6], a2);
  }
  else
  {
    this[6] = (const void *)((void)this[6] << (4 * a2));
  }
  int v4 = *((_DWORD *)this + 4) + a2;
  *((_DWORD *)this + 3) -= a2;
  *((_DWORD *)this + 4) = v4;
}

uint64_t icu::number::impl::DecimalQuantity::toPlainString@<X0>(icu::number::impl::DecimalQuantity *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  if (*((unsigned char *)this + 20))
  {
    __int16 v19 = 45;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v19, 0, 1);
  }
  int v4 = *((_DWORD *)this + 4);
  if (v4)
  {
    int v5 = *((_DWORD *)this + 11) + *((_DWORD *)this + 3);
    int v6 = v5 + v4;
    if (v6 <= *((_DWORD *)this + 9)) {
      int v7 = *((_DWORD *)this + 9);
    }
    else {
      int v7 = v6;
    }
    if (v5 >= *((_DWORD *)this + 10)) {
      int v8 = *((_DWORD *)this + 10);
    }
    else {
      int v8 = *((_DWORD *)this + 11) + *((_DWORD *)this + 3);
    }
    if (v7 > 0)
    {
      int v9 = v7 + 1;
      char v10 = 4 * v7 - 4;
      while (1)
      {
        int v11 = *((_DWORD *)this + 3) + *((_DWORD *)this + 11);
        LODWORD(v12) = v9 - v11 - 2;
        if (!*((unsigned char *)this + 64)) {
          break;
        }
        if ((v12 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v12) {
          goto LABEL_17;
        }
        LOBYTE(v12) = *(unsigned char *)(*((void *)this + 6) + v12);
LABEL_19:
        uint64_t result = icu::UnicodeString::append(a2, (char)v12 + 48);
        --v9;
        v10 -= 4;
        if (v9 <= 1)
        {
          int v14 = -1;
          if (v8 < 0) {
            goto LABEL_21;
          }
          goto LABEL_22;
        }
      }
      if (v12 <= 0xF)
      {
        uint64_t v12 = (*((void *)this + 6) >> (v10 - 4 * v11)) & 0xFLL;
        goto LABEL_19;
      }
LABEL_17:
      LOBYTE(v12) = 0;
      goto LABEL_19;
    }
    __int16 v21 = 48;
    uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v21, 0, 1);
    int v14 = v7 - 1;
    if (v8 < 0)
    {
LABEL_21:
      __int16 v22 = 46;
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v22, 0, 1);
    }
LABEL_22:
    if (v14 >= v8)
    {
      for (char i = 4 * v14; ; i -= 4)
      {
        int v16 = *((_DWORD *)this + 3) + *((_DWORD *)this + 11);
        LODWORD(v17) = v14 - v16;
        if (!*((unsigned char *)this + 64)) {
          break;
        }
        if ((v17 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v17) {
          goto LABEL_29;
        }
        LOBYTE(v17) = *(unsigned char *)(*((void *)this + 6) + v17);
LABEL_31:
        uint64_t result = icu::UnicodeString::append(a2, (char)v17 + 48);
        if (v14-- <= v8) {
          return result;
        }
      }
      if (v17 <= 0xF)
      {
        uint64_t v17 = (*((void *)this + 6) >> (i - 4 * v16)) & 0xFLL;
        goto LABEL_31;
      }
LABEL_29:
      LOBYTE(v17) = 0;
      goto LABEL_31;
    }
  }
  else
  {
    __int16 v20 = 48;
    return icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
  }
  return result;
}

icu::ICU_Utility *icu::number::impl::DecimalQuantity::toExponentString@<X0>(icu::number::impl::DecimalQuantity *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_1EDA47700;
  *(_WORD *)(a2 + 8) = 2;
  if (*((unsigned char *)this + 20))
  {
    __int16 v17 = 45;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v17, 0, 1);
  }
  int v4 = *((_DWORD *)this + 3);
  if (*((_DWORD *)this + 4) + v4 <= *((_DWORD *)this + 9)) {
    int v5 = *((_DWORD *)this + 9);
  }
  else {
    int v5 = *((_DWORD *)this + 4) + v4;
  }
  if (v4 >= *((_DWORD *)this + 10)) {
    int v6 = *((_DWORD *)this + 10);
  }
  else {
    int v6 = *((_DWORD *)this + 3);
  }
  if (v5 > 0)
  {
    int v7 = v5 + 1;
    char v8 = 4 * v5 - 4;
    while (1)
    {
      int v9 = *((_DWORD *)this + 3);
      LODWORD(v10) = v7 - v9 - 2;
      if (!*((unsigned char *)this + 64)) {
        break;
      }
      if ((v10 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v10) {
        goto LABEL_16;
      }
      LOBYTE(v10) = *(unsigned char *)(*((void *)this + 6) + v10);
LABEL_18:
      uint64_t result = (icu::ICU_Utility *)icu::UnicodeString::append(a2, (char)v10 + 48);
      --v7;
      v8 -= 4;
      if (v7 <= 1)
      {
        int v12 = -1;
        if (v6 < 0) {
          goto LABEL_20;
        }
        goto LABEL_21;
      }
    }
    if (v10 <= 0xF)
    {
      uint64_t v10 = (*((void *)this + 6) >> (v8 - 4 * v9)) & 0xFLL;
      goto LABEL_18;
    }
LABEL_16:
    LOBYTE(v10) = 0;
    goto LABEL_18;
  }
  __int16 v18 = 48;
  uint64_t result = (icu::ICU_Utility *)icu::UnicodeString::doAppend(a2, (uint64_t)&v18, 0, 1);
  int v12 = v5 - 1;
  if (v6 < 0)
  {
LABEL_20:
    __int16 v19 = 46;
    uint64_t result = (icu::ICU_Utility *)icu::UnicodeString::doAppend(a2, (uint64_t)&v19, 0, 1);
  }
LABEL_21:
  if (v12 >= v6)
  {
    char v13 = 4 * v12;
    while (1)
    {
      int v14 = *((_DWORD *)this + 3);
      LODWORD(v15) = v12 - v14;
      if (!*((unsigned char *)this + 64)) {
        break;
      }
      if ((v15 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v15) {
        goto LABEL_28;
      }
      LOBYTE(v15) = *(unsigned char *)(*((void *)this + 6) + v15);
LABEL_30:
      uint64_t result = (icu::ICU_Utility *)icu::UnicodeString::append(a2, (char)v15 + 48);
      v13 -= 4;
      if (v12-- <= v6) {
        goto LABEL_32;
      }
    }
    if (v15 <= 0xF)
    {
      uint64_t v15 = (*((void *)this + 6) >> (v13 - 4 * v14)) & 0xFLL;
      goto LABEL_30;
    }
LABEL_28:
    LOBYTE(v15) = 0;
    goto LABEL_30;
  }
LABEL_32:
  if (*((_DWORD *)this + 11))
  {
    __int16 v20 = 99;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
    return icu::ICU_Utility::appendNumber((icu::ICU_Utility *)a2, (icu::UnicodeString *)*((unsigned int *)this + 11), 0xAu, 1);
  }
  return result;
}

void icu::number::impl::DecimalQuantity::ensureCapacity(icu::number::impl::DecimalQuantity *this, int a2)
{
  if (a2)
  {
    if (*((unsigned char *)this + 64))
    {
      size_t v4 = *((int *)this + 14);
      if (a2 > (int)v4)
      {
        int v5 = 2 * a2;
        int v6 = (char *)uprv_malloc(2 * a2);
        int v7 = (void *)*((void *)this + 6);
        memcpy(v6, v7, v4);
        bzero(&v6[v4], a2 - (int)v4);
        uprv_free(v7);
        *((void *)this + 6) = v6;
        *((_DWORD *)this + 14) = v5;
      }
    }
    else
    {
      char v8 = uprv_malloc(a2);
      *((void *)this + 6) = v8;
      *((_DWORD *)this + 14) = a2;
      bzero(v8, a2);
    }
    *((unsigned char *)this + 64) = 1;
  }
}

void icu::number::impl::DecimalQuantity::switchStorage(icu::number::impl::DecimalQuantity *this)
{
  if (*((unsigned char *)this + 64))
  {
    uint64_t v2 = *((unsigned int *)this + 4);
    char v3 = (char *)*((void *)this + 6);
    if ((int)v2 < 1)
    {
      unint64_t v4 = 0;
    }
    else
    {
      unint64_t v4 = 0;
      unint64_t v5 = v2 + 1;
      do
        unint64_t v4 = v3[(v5-- - 2)] | (16 * v4);
      while (v5 > 1);
    }
    uprv_free(v3);
    *((void *)this + 6) = v4;
    *((unsigned char *)this + 64) = 0;
  }
  else
  {
    unint64_t v6 = *((void *)this + 6);
    icu::number::impl::DecimalQuantity::ensureCapacity(this, 40);
    if (*((int *)this + 4) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        *(unsigned char *)(*((void *)this + 6) + v7) = v6 & 0xF;
        v6 >>= 4;
        ++v7;
      }
      while (v7 < *((int *)this + 4));
    }
  }
}

void icu::number::impl::DecimalQuantity::ensureCapacity(icu::number::impl::DecimalQuantity *this)
{
}

const __int16 *icu::number::impl::DecimalQuantity::checkHealth(icu::number::impl::DecimalQuantity *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if (*((unsigned char *)this + 64))
  {
    if (!v1) {
      return L"Zero precision but we are in byte mode";
    }
    int v2 = *((_DWORD *)this + 14);
    if ((int)v1 > v2) {
      return (const __int16 *)"P";
    }
    if ((int)v1 < 1) {
      return L"Most significant digit is zero in byte mode";
    }
    unint64_t v4 = (char *)*((void *)this + 6);
    if (!v4[(v1 - 1)]) {
      return L"Most significant digit is zero in byte mode";
    }
    if (*v4)
    {
      uint64_t result = (const __int16 *)"D";
      uint64_t v5 = v1;
      unint64_t v6 = v4;
      uint64_t v7 = L"Digit below 0 in byte array";
      while (1)
      {
        int v9 = *v6++;
        int v8 = v9;
        if (v9 > 9) {
          break;
        }
        if (v8 < 0) {
          return v7;
        }
        if (!--v5)
        {
          if ((int)v1 >= v2) {
            return 0;
          }
          uint64_t v7 = L"Nonzero digits outside of range in byte array";
          int v10 = v1;
          while (v10 < 0 || (int)v1 <= v10 || !v4[v10])
          {
            uint64_t result = 0;
            if (v2 == ++v10) {
              return result;
            }
          }
          return v7;
        }
      }
      return result;
    }
    return L"Least significant digit is zero in long mode";
  }
  if (v1)
  {
    if ((int)v1 > 16) {
      return (const __int16 *)"P";
    }
    if ((v1 - 1) > 0xF) {
      return L"Most significant digit is zero in long mode";
    }
    unint64_t v11 = *((void *)this + 6);
    if (((v11 >> (4 * (v1 - 1))) & 0xF) == 0) {
      return L"Most significant digit is zero in long mode";
    }
    if ((v11 & 0xF) == 0) {
      return L"Least significant digit is zero in long mode";
    }
    unint64_t v12 = 0;
    uint64_t result = L"Digit exceeding 10 in long";
    while (v12 > 0xF || ((v11 >> (4 * v12)) & 0xE) <= 9)
    {
      if (++v12 == v1)
      {
        if ((int)v1 <= 15) {
          goto LABEL_34;
        }
        return 0;
      }
    }
  }
  else
  {
    unint64_t v11 = *((void *)this + 6);
    if (v11)
    {
      return L"Value in bcdLong even though precision is zero";
    }
    else
    {
LABEL_34:
      char v13 = 4 * v1;
      uint64_t result = (const __int16 *)"N";
      while (v1 > 0xF || ((v11 >> v13) & 0xF) == 0)
      {
        LODWORD(v1) = v1 + 1;
        v13 += 4;
        if (v1 == 16) {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL icu::number::impl::DecimalQuantity::operator==(icu::number::impl::DecimalQuantity *this, uint64_t a2)
{
  int v2 = *((_DWORD *)this + 3);
  if (v2 != *(_DWORD *)(a2 + 12)) {
    return 0;
  }
  unsigned int v5 = *((_DWORD *)this + 4);
  if (__PAIR64__(*((unsigned __int8 *)this + 20), v5) != __PAIR64__(*(unsigned __int8 *)(a2 + 20), *(_DWORD *)(a2 + 16)))return 0; {
  int v6 = *((_DWORD *)this + 9);
  }
  if (v6 != *(_DWORD *)(a2 + 36)) {
    return 0;
  }
  int v7 = *((_DWORD *)this + 10);
  if (v7 != *(_DWORD *)(a2 + 40) || *((unsigned __int8 *)this + 21) != *(unsigned __int8 *)(a2 + 21)) {
    return 0;
  }
  if (!v5) {
    return 1;
  }
  if (*((unsigned char *)this + 21))
  {
    if (*((double *)this + 3) == *(double *)(a2 + 24)) {
      return *((_DWORD *)this + 8) == *(_DWORD *)(a2 + 32);
    }
    return 0;
  }
  int v10 = v5 + v2;
  if (v6 <= v10) {
    int v11 = v10;
  }
  else {
    int v11 = *((_DWORD *)this + 9);
  }
  if (v7 >= v2) {
    int v12 = *((_DWORD *)this + 3);
  }
  else {
    int v12 = *((_DWORD *)this + 10);
  }
  do
  {
    BOOL v8 = v11 <= v12;
    if (v11 <= v12) {
      break;
    }
    int Digit = icu::number::impl::DecimalQuantity::getDigit(this, --v11);
  }
  while (Digit == icu::number::impl::DecimalQuantity::getDigit((icu::number::impl::DecimalQuantity *)a2, v11));
  return v8;
}

void icu::number::impl::DecimalQuantity::toString(icu::number::impl::DecimalQuantity *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(v19, 0, sizeof(v19));
  sub_18C966F74((uint64_t)v19, *((_DWORD *)this + 4) + 1, 0);
  int v4 = *((_DWORD *)this + 4);
  if (v4 > 0)
  {
    uint64_t v5 = 0;
    int v6 = -1;
    do
    {
      unsigned int v7 = v4 + v6;
      if (*((unsigned char *)this + 64))
      {
        LOBYTE(v8) = 0;
        if ((v7 & 0x80000000) == 0 && v4 > (int)v7) {
          LOBYTE(v8) = *(unsigned char *)(*((void *)this + 6) + v7);
        }
      }
      else if (v7 <= 0xF)
      {
        uint64_t v8 = (*((void *)this + 6) >> (4 * v7)) & 0xFLL;
      }
      else
      {
        LOBYTE(v8) = 0;
      }
      *(unsigned char *)(*(void *)&v19[0] + v5++) = v8 + 48;
      int v4 = *((_DWORD *)this + 4);
      --v6;
    }
    while (v5 < v4);
  }
  *(unsigned char *)(*(void *)&v19[0] + v4) = 0;
  int v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)__str = 0u;
  long long v13 = 0u;
  if (*((unsigned char *)this + 64)) {
    int v9 = "bytes";
  }
  else {
    int v9 = "long";
  }
  int v10 = "-";
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    int v10 = "";
  }
  int v11 = *(const char **)&v19[0];
  if (!*((_DWORD *)this + 4)) {
    int v11 = "0";
  }
  snprintf(__str, 0x64uLL, "<DecimalQuantity %d:%d %s %s%s%s%d>", *((_DWORD *)this + 9), *((_DWORD *)this + 10), v9, v10, v11, "E", *((_DWORD *)this + 3));
  icu::UnicodeString::UnicodeString(a2, __str, 0xFFFFFFFFLL, 0);
  if (BYTE12(v19[0])) {
    uprv_free(*(void **)&v19[0]);
  }
}

uint64_t sub_18C966F74(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = a1 + 13;
  *(_DWORD *)(a1 + 8) = 30;
  *(unsigned char *)(a1 + 12) = 0;
  if (a2 >= 31 && a3 <= 0)
  {
    uint64_t v5 = uprv_malloc(a2);
    if (v5)
    {
      int v6 = v5;
      if (*(unsigned char *)(a1 + 12)) {
        uprv_free(*(void **)a1);
      }
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(unsigned char *)(a1 + 12) = 1;
    }
  }
  return a1;
}

icu::number::impl::DecimalFormatProperties *icu::number::impl::DecimalFormatProperties::DecimalFormatProperties(icu::number::impl::DecimalFormatProperties *this)
{
  *(unsigned char *)this = 1;
  *((unsigned char *)this + 8) = 1;
  icu::CurrencyUnit::CurrencyUnit((icu::number::impl::DecimalFormatProperties *)((char *)this + 16));
  *((void *)this + 6) = 0;
  *((unsigned char *)this + 56) = 1;
  *((void *)this + 16) = &unk_1EDA47700;
  *((_WORD *)this + 68) = 2;
  *((void *)this + 24) = &unk_1EDA47700;
  *((_WORD *)this + 100) = 2;
  *((void *)this + 32) = &unk_1EDA47700;
  *((_WORD *)this + 132) = 2;
  *((void *)this + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = &unk_1EDA47700;
  *((_WORD *)this + 164) = 2;
  *((unsigned char *)this + 384) = 1;
  *((void *)this + 49) = &unk_1EDA47700;
  *((_WORD *)this + 200) = 2;
  *((unsigned char *)this + 460) = 1;
  *((void *)this + 60) = &unk_1EDA47700;
  *((_WORD *)this + 244) = 2;
  *((void *)this + 68) = &unk_1EDA47700;
  *((_WORD *)this + 276) = 2;
  *((void *)this + 76) = &unk_1EDA47700;
  *((_WORD *)this + 308) = 2;
  *((void *)this + 84) = &unk_1EDA47700;
  *((_WORD *)this + 3icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 2;
  *((unsigned char *)this + 744) = 1;
  icu::number::impl::DecimalFormatProperties::clear(this);
  return this;
}

void icu::number::impl::DecimalFormatProperties::clear(icu::number::impl::DecimalFormatProperties *this)
{
  *(unsigned char *)this = 1;
  *((unsigned char *)this + 8) = 1;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 6) = 0;
  *((unsigned char *)this + 56) = 1;
  *((_DWORD *)this + 16) = 0;
  *((unsigned char *)this + 68) = 0;
  *(void *)&long long v3 = -1;
  *((void *)&v3 + 1) = -1;
  *((void *)this + 9) = -1;
  *((unsigned char *)this + 80) = 1;
  *((_DWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 88) = v3;
  *(_OWORD *)((char *)this + 104) = v3;
  *((void *)this + 15) = 1;
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 128));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 192));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 256));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 320));
  *((unsigned char *)this + 384) = 1;
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 392));
  *((_WORD *)this + 228) = 0;
  *((unsigned char *)this + 460) = 1;
  *((_WORD *)this + 234) = 0;
  *((_DWORD *)this + 118) = 2;
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 480));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 544));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 608));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 672));
  *((void *)this + 92) = 0;
  *((unsigned char *)this + 744) = 1;
  *((_DWORD *)this + 188) = -1;
  *((_WORD *)this + 378) = 0;
}

uint64_t icu::number::impl::DecimalFormatProperties::_equals(icu::number::impl::DecimalFormatProperties *this, const icu::number::impl::DecimalFormatProperties *a2, unsigned int a3)
{
  if (*(unsigned char *)this)
  {
    if (!*(unsigned char *)a2) {
      return 0;
    }
  }
  else if (*(unsigned char *)a2 || *((_DWORD *)this + 1) != *((_DWORD *)a2 + 1))
  {
    return 0;
  }
  if (*((unsigned char *)this + 8))
  {
    if (!*((unsigned char *)a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*((unsigned char *)a2 + 8)) {
      return 0;
    }
    uint64_t result = icu::MeasureUnit::operator==((uint64_t)this + 16, (uint64_t)a2 + 16);
    if (!result) {
      return result;
    }
  }
  if (*((void *)this + 6) != *((void *)a2 + 6)) {
    return 0;
  }
  if (*((unsigned char *)this + 56))
  {
    if (!*((unsigned char *)a2 + 56)) {
      return 0;
    }
  }
  else if (*((unsigned char *)a2 + 56) || *((_DWORD *)this + 15) != *((_DWORD *)a2 + 15))
  {
    return 0;
  }
  if (*((unsigned __int8 *)this + 65) != *((unsigned __int8 *)a2 + 65)
    || *((unsigned __int8 *)this + 66) != *((unsigned __int8 *)a2 + 66)
    || *((unsigned __int8 *)this + 67) != *((unsigned __int8 *)a2 + 67)
    || *((unsigned __int8 *)this + 68) != *((unsigned __int8 *)a2 + 68)
    || *((_DWORD *)this + 18) != *((_DWORD *)a2 + 18)
    || *((_DWORD *)this + 21) != *((_DWORD *)a2 + 21)
    || *((_DWORD *)this + 24) != *((_DWORD *)a2 + 24)
    || *((_DWORD *)this + 25) != *((_DWORD *)a2 + 25)
    || *((_DWORD *)this + 27) != *((_DWORD *)a2 + 27)
    || *((_DWORD *)this + 29) != *((_DWORD *)a2 + 29)
    || *((_DWORD *)this + 30) != *((_DWORD *)a2 + 30)
    || *((_DWORD *)this + 31) != *((_DWORD *)a2 + 31))
  {
    return 0;
  }
  uint64_t result = sub_18C830FC4((uint64_t)this + 128, (uint64_t)a2 + 128);
  if (result)
  {
    uint64_t result = sub_18C830FC4((uint64_t)this + 256, (uint64_t)a2 + 256);
    if (result)
    {
      if (*((unsigned char *)this + 384))
      {
        if (!*((unsigned char *)a2 + 384)) {
          return 0;
        }
      }
      else if (*((unsigned char *)a2 + 384) || *((_DWORD *)this + 97) != *((_DWORD *)a2 + 97))
      {
        return 0;
      }
      uint64_t result = sub_18C830FC4((uint64_t)this + 392, (uint64_t)a2 + 392);
      if (result)
      {
        uint64_t result = sub_18C830FC4((uint64_t)this + 480, (uint64_t)a2 + 480);
        if (result)
        {
          uint64_t result = sub_18C830FC4((uint64_t)this + 608, (uint64_t)a2 + 608);
          if (result)
          {
            if (*((double *)this + 92) != *((double *)a2 + 92)) {
              return 0;
            }
            if (*((unsigned char *)this + 744))
            {
              if (!*((unsigned char *)a2 + 744)) {
                return 0;
              }
            }
            else if (*((unsigned char *)a2 + 744) || *((_DWORD *)this + 187) != *((_DWORD *)a2 + 187))
            {
              return 0;
            }
            if (*((_DWORD *)this + 188) != *((_DWORD *)a2 + 188)
              || *((unsigned __int8 *)this + 756) != *((unsigned __int8 *)a2 + 756))
            {
              return 0;
            }
            int v7 = *((unsigned __int8 *)this + 757);
            int v8 = *((unsigned __int8 *)a2 + 757);
            uint64_t result = v7 == v8 ? a3 : 0;
            if (v7 == v8 && (a3 & 1) == 0)
            {
              if (*((_DWORD *)this + 19) != *((_DWORD *)a2 + 19)
                || *((unsigned __int8 *)this + 80) != *((unsigned __int8 *)a2 + 80)
                || *((_DWORD *)this + 26) != *((_DWORD *)a2 + 26)
                || *((_DWORD *)this + 22) != *((_DWORD *)a2 + 22)
                || *((_DWORD *)this + 23) != *((_DWORD *)a2 + 23)
                || *((_DWORD *)this + 28) != *((_DWORD *)a2 + 28))
              {
                return 0;
              }
              uint64_t result = sub_18C830FC4((uint64_t)this + 192, (uint64_t)a2 + 192);
              if (result)
              {
                uint64_t result = sub_18C830FC4((uint64_t)this + 320, (uint64_t)a2 + 320);
                if (result)
                {
                  uint64_t result = sub_18C830FC4((uint64_t)this + 544, (uint64_t)a2 + 544);
                  if (result)
                  {
                    uint64_t result = sub_18C830FC4((uint64_t)this + 672, (uint64_t)a2 + 672);
                    if (result)
                    {
                      if (*((unsigned __int8 *)this + 64) == *((unsigned __int8 *)a2 + 64)
                        && *((unsigned __int8 *)this + 456) == *((unsigned __int8 *)a2 + 456)
                        && *((unsigned __int8 *)this + 457) == *((unsigned __int8 *)a2 + 457))
                      {
                        if (*((unsigned char *)this + 460))
                        {
                          if (*((unsigned char *)a2 + 460)) {
                            goto LABEL_52;
                          }
                        }
                        else if (!*((unsigned char *)a2 + 460) && *((_DWORD *)this + 116) == *((_DWORD *)a2 + 116))
                        {
LABEL_52:
                          if (*((unsigned __int8 *)this + 468) == *((unsigned __int8 *)a2 + 468)
                            && *((unsigned __int8 *)this + 469) == *((unsigned __int8 *)a2 + 469))
                          {
                            return *((_DWORD *)this + 118) == *((_DWORD *)a2 + 118);
                          }
                        }
                      }
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t icu::number::impl::DecimalFormatProperties::equalsDefaultExceptFastFormat(icu::number::impl::DecimalFormatProperties *this)
{
  if (atomic_load_explicit(&dword_1EB20BAA8, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(&dword_1EB20BAA8))
  {
    icu::number::impl::DecimalFormatProperties::DecimalFormatProperties((icu::number::impl::DecimalFormatProperties *)&unk_1EB20B7B0);
    dword_1EB20BAAC = 0;
    icu::umtx_initImplPostInit((unsigned int *)&dword_1EB20BAA8);
  }

  return icu::number::impl::DecimalFormatProperties::_equals(this, (const icu::number::impl::DecimalFormatProperties *)&unk_1EB20B7B0, 1u);
}

void *icu::number::impl::DecimalFormatProperties::getDefault(icu::number::impl::DecimalFormatProperties *this)
{
  if (atomic_load_explicit(&dword_1EB20BAA8, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(&dword_1EB20BAA8))
  {
    icu::number::impl::DecimalFormatProperties::DecimalFormatProperties((icu::number::impl::DecimalFormatProperties *)&unk_1EB20B7B0);
    dword_1EB20BAAC = 0;
    icu::umtx_initImplPostInit((unsigned int *)&dword_1EB20BAA8);
  }
  return &unk_1EB20B7B0;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::notation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 4) = *(void *)a2;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 4) = *(void *)a2;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::unit@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = (uint64_t)(a3 + 1);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);

  return icu::MeasureUnit::operator=(v4, a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = (uint64_t)(a3 + 1);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);

  return icu::MeasureUnit::operator=(v4, a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::adoptUnit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 16, a2);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
    return v5(a2);
  }
  return result;
}

{
  uint64_t result;
  uint64_t (*v5)(uint64_t);
  uint64_t vars8;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 16, a2);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
    return v5(a2);
  }
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::perUnit@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1) + 40;

  return icu::MeasureUnit::operator=(v4, a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1) + 40;

  return icu::MeasureUnit::operator=(v4, a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::adoptPerUnit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 40, a2);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
    return v5(a2);
  }
  return result;
}

{
  uint64_t result;
  uint64_t (*v5)(uint64_t);
  uint64_t vars8;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 40, a2);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
    return v5(a2);
  }
  return result;
}

__n128 icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::precision@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 12);
  *(__n128 *)(v4 + 76) = result;
  return result;
}

{
  uint64_t v4;
  __n128 result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 12);
  *(__n128 *)(v4 + 76) = result;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::roundingMode@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 96) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 96) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::grouping@<X0>(uint64_t a1@<X0>, signed int a2@<W1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  uint64_t result = icu::number::impl::Grouper::forStrategy(a2);
  *(void *)(a3 + 100) = result;
  *(_DWORD *)(a3 + 108) = v6;
  return result;
}

{
  uint64_t result;
  int v6;

  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  uint64_t result = icu::number::impl::Grouper::forStrategy(a2);
  *(void *)(a3 + 100) = result;
  *(_DWORD *)(a3 + 108) = v6;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::integerWidth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 124) = *(void *)a2;
  *(unsigned char *)(result + 132) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 124) = *(void *)a2;
  *(unsigned char *)(result + 132) = *(unsigned char *)(a2 + 8);
  return result;
}

icu::DecimalFormatSymbols *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::symbols@<X0>(uint64_t a1@<X0>, const icu::DecimalFormatSymbols *a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = (icu::number::impl::SymbolsWrapper *)(icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1)+ 136);

  return icu::number::impl::SymbolsWrapper::setTo(v4, a2);
}

{
  icu::number::impl::SymbolsWrapper *v4;
  uint64_t vars8;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = (icu::number::impl::SymbolsWrapper *)(icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1)+ 136);

  return icu::number::impl::SymbolsWrapper::setTo(v4, a2);
}

void *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::adoptSymbols@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = (void *)(icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1) + 136);

  return icu::number::impl::SymbolsWrapper::setTo(v4, a2);
}

{
  void *v4;
  uint64_t vars8;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = (void *)(icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1) + 136);

  return icu::number::impl::SymbolsWrapper::setTo(v4, a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::unitWidth@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 152) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::sign@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 156) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 156) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::decimal@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 164) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 164) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::scale@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1) + 168;

  return icu::number::Scale::operator=(v4, a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1) + 168;

  return icu::number::Scale::operator=(v4, a2);
}

char *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::usage@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, __int16 a3@<W2>, _OWORD *a4@<X8>)
{
  a4[28] = 0u;
  a4[29] = 0u;
  a4[26] = 0u;
  a4[27] = 0u;
  a4[24] = 0u;
  a4[25] = 0u;
  a4[22] = 0u;
  a4[23] = 0u;
  a4[20] = 0u;
  a4[21] = 0u;
  a4[18] = 0u;
  a4[19] = 0u;
  a4[16] = 0u;
  a4[17] = 0u;
  a4[14] = 0u;
  a4[15] = 0u;
  a4[13] = 0u;
  a4[10] = 0u;
  a4[11] = 0u;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  a4[12] = 0u;
  uint64_t v6 = (uint64_t)(a4 + 12);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a4, a1);

  return icu::number::impl::StringProp::set(v6, a2, a3);
}

{
  uint64_t v6;
  uint64_t vars8;

  a4[28] = 0u;
  a4[29] = 0u;
  a4[26] = 0u;
  a4[27] = 0u;
  a4[24] = 0u;
  a4[25] = 0u;
  a4[22] = 0u;
  a4[23] = 0u;
  a4[20] = 0u;
  a4[21] = 0u;
  a4[18] = 0u;
  a4[19] = 0u;
  a4[16] = 0u;
  a4[17] = 0u;
  a4[14] = 0u;
  a4[15] = 0u;
  a4[13] = 0u;
  a4[10] = 0u;
  a4[11] = 0u;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  a4[12] = 0u;
  uint64_t v6 = (uint64_t)(a4 + 12);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a4, a1);

  return icu::number::impl::StringProp::set(v6, a2, a3);
}

char *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::displayOptions@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[13] = 0u;
  uint64_t v4 = (uint64_t)(a3 + 13);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (*a2)
  {
    GrammaticalCaseIdentifier = udispopt_getGrammaticalCaseIdentifier(*a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v7, GrammaticalCaseIdentifier);
    return icu::number::impl::StringProp::set(v4, v7, v8);
  }
  else
  {
    return icu::number::impl::StringProp::set(v4, 0, 0);
  }
}

{
  uint64_t v4;
  const char *GrammaticalCaseIdentifier;
  const char *v7;
  uint64_t v8;
  uint64_t vars8;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[13] = 0u;
  uint64_t v4 = (uint64_t)(a3 + 13);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (*a2)
  {
    GrammaticalCaseIdentifier = udispopt_getGrammaticalCaseIdentifier(*a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v7, GrammaticalCaseIdentifier);
    return icu::number::impl::StringProp::set(v4, v7, v8);
  }
  else
  {
    return icu::number::impl::StringProp::set(v4, 0, 0);
  }
}

char *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::unitDisplayCase@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, __int16 a3@<W2>, _OWORD *a4@<X8>)
{
  a4[28] = 0u;
  a4[29] = 0u;
  a4[26] = 0u;
  a4[27] = 0u;
  a4[24] = 0u;
  a4[25] = 0u;
  a4[22] = 0u;
  a4[23] = 0u;
  a4[20] = 0u;
  a4[21] = 0u;
  a4[18] = 0u;
  a4[19] = 0u;
  a4[16] = 0u;
  a4[17] = 0u;
  a4[14] = 0u;
  a4[15] = 0u;
  a4[11] = 0u;
  a4[12] = 0u;
  a4[9] = 0u;
  a4[10] = 0u;
  a4[7] = 0u;
  a4[8] = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  a4[13] = 0u;
  uint64_t v6 = (uint64_t)(a4 + 13);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a4, a1);

  return icu::number::impl::StringProp::set(v6, a2, a3);
}

{
  uint64_t v6;
  uint64_t vars8;

  a4[28] = 0u;
  a4[29] = 0u;
  a4[26] = 0u;
  a4[27] = 0u;
  a4[24] = 0u;
  a4[25] = 0u;
  a4[22] = 0u;
  a4[23] = 0u;
  a4[20] = 0u;
  a4[21] = 0u;
  a4[18] = 0u;
  a4[19] = 0u;
  a4[16] = 0u;
  a4[17] = 0u;
  a4[14] = 0u;
  a4[15] = 0u;
  a4[11] = 0u;
  a4[12] = 0u;
  a4[9] = 0u;
  a4[10] = 0u;
  a4[7] = 0u;
  a4[8] = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  a4[13] = 0u;
  uint64_t v6 = (uint64_t)(a4 + 13);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a4, a1);

  return icu::number::impl::StringProp::set(v6, a2, a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::padding@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 112) = *(void *)a2;
  *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 112) = *(void *)a2;
  *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::threshold@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::forDateFormat@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(unsigned char *)(result + 245) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(unsigned char *)(result + 245) = a2;
  return result;
}

icu::Locale *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::macros@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  uint64_t v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  uint64_t v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v7 = a3 + 16;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  *(void *)(a3 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(void *)(a3 + 125) = *(void *)(a2 + 125);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a3 + 238) = *(void *)(a2 + 238);

  return icu::Locale::operator=((icu::Locale *)(a3 + 248), a2 + 248);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v8;
  long long v9;
  uint64_t vars8;

  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  uint64_t v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  uint64_t v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v7 = a3 + 16;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  *(void *)(a3 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(void *)(a3 + 125) = *(void *)(a2 + 125);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a3 + 238) = *(void *)(a2 + 238);

  return icu::Locale::operator=((icu::Locale *)(a3 + 248), a2 + 248);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::macros@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  uint64_t v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  uint64_t v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v7 = a3 + 16;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  *(void *)(a3 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(void *)(a3 + 125) = *(void *)(a2 + 125);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a3 + 238) = *(void *)(a2 + 238);

  return icu::Locale::operator=(a3 + 248, a2 + 248);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v8;
  long long v9;
  uint64_t vars8;

  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  uint64_t v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  uint64_t v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v7 = a3 + 16;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  *(void *)(a3 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(void *)(a3 + 125) = *(void *)(a2 + 125);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a3 + 238) = *(void *)(a2 + 238);

  return icu::Locale::operator=(a3 + 248, a2 + 248);
}

uint64_t *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::clone@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x1E0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)result, a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

{
  uint64_t *result;

  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x1E0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)result, a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

BOOL icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::copyErrorTo(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 1;
  }
  sub_18C9692F0(a1, a2);
  return *a2 > 0;
}

uint64_t sub_18C9692F0(uint64_t a1, int *a2)
{
  if (*(_DWORD *)(a1 + 4) == 3)
  {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  else if (*(_DWORD *)(a1 + 64) == 10)
  {
    int v2 = *(_DWORD *)(a1 + 72);
  }
  else if (*(_DWORD *)(a1 + 112) == -3)
  {
    int v2 = *(_DWORD *)(a1 + 116);
  }
  else if (*(unsigned char *)(a1 + 132))
  {
    int v2 = *(_DWORD *)(a1 + 124);
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 136);
    if ((v3 == 2 || v3 == 1) && !*(void *)(a1 + 144))
    {
      int v2 = 7;
    }
    else
    {
      int v2 = *(_DWORD *)(a1 + 184);
      if (v2 <= 0)
      {
        int v2 = *(_DWORD *)(a1 + 204);
        if (v2 <= 0)
        {
          int v2 = *(_DWORD *)(a1 + 220);
          if (v2 < 1) {
            return 0;
          }
        }
      }
    }
  }
  *a2 = v2;
  return 1;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::notation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 4) = *(void *)a2;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 4) = *(void *)a2;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unit@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = (uint64_t)(a3 + 1);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);

  return icu::MeasureUnit::operator=(v4, a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = (uint64_t)(a3 + 1);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);

  return icu::MeasureUnit::operator=(v4, a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::adoptUnit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 16, a2);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
    return v5(a2);
  }
  return result;
}

{
  uint64_t result;
  uint64_t (*v5)(uint64_t);
  uint64_t vars8;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 16, a2);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
    return v5(a2);
  }
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::perUnit@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1) + 40;

  return icu::MeasureUnit::operator=(v4, a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1) + 40;

  return icu::MeasureUnit::operator=(v4, a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::adoptPerUnit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 40, a2);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
    return v5(a2);
  }
  return result;
}

{
  uint64_t result;
  uint64_t (*v5)(uint64_t);
  uint64_t vars8;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 40, a2);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
    return v5(a2);
  }
  return result;
}

__n128 icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::precision@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 12);
  *(__n128 *)(v4 + 76) = result;
  return result;
}

{
  uint64_t v4;
  __n128 result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 12);
  *(__n128 *)(v4 + 76) = result;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::roundingMode@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 96) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 96) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::grouping@<X0>(uint64_t a1@<X0>, signed int a2@<W1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  uint64_t result = icu::number::impl::Grouper::forStrategy(a2);
  *(void *)(a3 + 100) = result;
  *(_DWORD *)(a3 + 108) = v6;
  return result;
}

{
  uint64_t result;
  int v6;

  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  uint64_t result = icu::number::impl::Grouper::forStrategy(a2);
  *(void *)(a3 + 100) = result;
  *(_DWORD *)(a3 + 108) = v6;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::integerWidth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 124) = *(void *)a2;
  *(unsigned char *)(result + 132) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 124) = *(void *)a2;
  *(unsigned char *)(result + 132) = *(unsigned char *)(a2 + 8);
  return result;
}

icu::DecimalFormatSymbols *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::symbols@<X0>(uint64_t a1@<X0>, const icu::DecimalFormatSymbols *a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v4 = (icu::number::impl::SymbolsWrapper *)(icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1)+ 136);

  return icu::number::impl::SymbolsWrapper::setTo(v4, a2);
}

{
  icu::number::impl::SymbolsWrapper *v4;
  uint64_t vars8;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v4 = (icu::number::impl::SymbolsWrapper *)(icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1)+ 136);

  return icu::number::impl::SymbolsWrapper::setTo(v4, a2);
}

void *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::adoptSymbols@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v4 = (void *)(icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1) + 136);

  return icu::number::impl::SymbolsWrapper::setTo(v4, a2);
}

{
  void *v4;
  uint64_t vars8;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v4 = (void *)(icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1) + 136);

  return icu::number::impl::SymbolsWrapper::setTo(v4, a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unitWidth@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 152) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::sign@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 156) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 156) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::decimal@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 164) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 164) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::scale@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1) + 168;

  return icu::number::Scale::operator=(v4, a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1) + 168;

  return icu::number::Scale::operator=(v4, a2);
}

char *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::usage@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, __int16 a3@<W2>, _OWORD *a4@<X8>)
{
  a4[29] = 0u;
  a4[30] = 0u;
  a4[27] = 0u;
  a4[28] = 0u;
  a4[25] = 0u;
  a4[26] = 0u;
  a4[23] = 0u;
  a4[24] = 0u;
  a4[21] = 0u;
  a4[22] = 0u;
  a4[19] = 0u;
  a4[20] = 0u;
  a4[17] = 0u;
  a4[18] = 0u;
  a4[15] = 0u;
  a4[16] = 0u;
  a4[13] = 0u;
  a4[14] = 0u;
  a4[10] = 0u;
  a4[11] = 0u;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  a4[12] = 0u;
  uint64_t v6 = (uint64_t)(a4 + 12);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a4, a1);

  return icu::number::impl::StringProp::set(v6, a2, a3);
}

{
  uint64_t v6;
  uint64_t vars8;

  a4[29] = 0u;
  a4[30] = 0u;
  a4[27] = 0u;
  a4[28] = 0u;
  a4[25] = 0u;
  a4[26] = 0u;
  a4[23] = 0u;
  a4[24] = 0u;
  a4[21] = 0u;
  a4[22] = 0u;
  a4[19] = 0u;
  a4[20] = 0u;
  a4[17] = 0u;
  a4[18] = 0u;
  a4[15] = 0u;
  a4[16] = 0u;
  a4[13] = 0u;
  a4[14] = 0u;
  a4[10] = 0u;
  a4[11] = 0u;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  a4[12] = 0u;
  uint64_t v6 = (uint64_t)(a4 + 12);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a4, a1);

  return icu::number::impl::StringProp::set(v6, a2, a3);
}

char *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::displayOptions@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[13] = 0u;
  uint64_t v4 = (uint64_t)(a3 + 13);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (*a2)
  {
    GrammaticalCaseIdentifier = udispopt_getGrammaticalCaseIdentifier(*a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v7, GrammaticalCaseIdentifier);
    return icu::number::impl::StringProp::set(v4, v7, v8);
  }
  else
  {
    return icu::number::impl::StringProp::set(v4, 0, 0);
  }
}

{
  uint64_t v4;
  const char *GrammaticalCaseIdentifier;
  const char *v7;
  uint64_t v8;
  uint64_t vars8;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[13] = 0u;
  uint64_t v4 = (uint64_t)(a3 + 13);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (*a2)
  {
    GrammaticalCaseIdentifier = udispopt_getGrammaticalCaseIdentifier(*a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v7, GrammaticalCaseIdentifier);
    return icu::number::impl::StringProp::set(v4, v7, v8);
  }
  else
  {
    return icu::number::impl::StringProp::set(v4, 0, 0);
  }
}

char *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unitDisplayCase@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, __int16 a3@<W2>, _OWORD *a4@<X8>)
{
  a4[29] = 0u;
  a4[30] = 0u;
  a4[27] = 0u;
  a4[28] = 0u;
  a4[25] = 0u;
  a4[26] = 0u;
  a4[23] = 0u;
  a4[24] = 0u;
  a4[21] = 0u;
  a4[22] = 0u;
  a4[19] = 0u;
  a4[20] = 0u;
  a4[17] = 0u;
  a4[18] = 0u;
  a4[15] = 0u;
  a4[16] = 0u;
  a4[14] = 0u;
  a4[11] = 0u;
  a4[12] = 0u;
  a4[9] = 0u;
  a4[10] = 0u;
  a4[7] = 0u;
  a4[8] = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  a4[13] = 0u;
  uint64_t v6 = (uint64_t)(a4 + 13);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a4, a1);

  return icu::number::impl::StringProp::set(v6, a2, a3);
}

{
  uint64_t v6;
  uint64_t vars8;

  a4[29] = 0u;
  a4[30] = 0u;
  a4[27] = 0u;
  a4[28] = 0u;
  a4[25] = 0u;
  a4[26] = 0u;
  a4[23] = 0u;
  a4[24] = 0u;
  a4[21] = 0u;
  a4[22] = 0u;
  a4[19] = 0u;
  a4[20] = 0u;
  a4[17] = 0u;
  a4[18] = 0u;
  a4[15] = 0u;
  a4[16] = 0u;
  a4[14] = 0u;
  a4[11] = 0u;
  a4[12] = 0u;
  a4[9] = 0u;
  a4[10] = 0u;
  a4[7] = 0u;
  a4[8] = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  a4[13] = 0u;
  uint64_t v6 = (uint64_t)(a4 + 13);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a4, a1);

  return icu::number::impl::StringProp::set(v6, a2, a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::padding@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 112) = *(void *)a2;
  *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(void *)(result + 112) = *(void *)a2;
  *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::threshold@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::forDateFormat@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(unsigned char *)(result + 245) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(unsigned char *)(result + 245) = a2;
  return result;
}

icu::Locale *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::macros@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  uint64_t v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  uint64_t v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v7 = a3 + 16;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  *(void *)(a3 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(void *)(a3 + 125) = *(void *)(a2 + 125);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a3 + 238) = *(void *)(a2 + 238);

  return icu::Locale::operator=((icu::Locale *)(a3 + 248), a2 + 248);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v8;
  long long v9;
  uint64_t vars8;

  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  uint64_t v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  uint64_t v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v7 = a3 + 16;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  *(void *)(a3 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(void *)(a3 + 125) = *(void *)(a2 + 125);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a3 + 238) = *(void *)(a2 + 238);

  return icu::Locale::operator=((icu::Locale *)(a3 + 248), a2 + 248);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::macros@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  uint64_t v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  uint64_t v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v7 = a3 + 16;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  *(void *)(a3 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(void *)(a3 + 125) = *(void *)(a2 + 125);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a3 + 238) = *(void *)(a2 + 238);

  return icu::Locale::operator=(a3 + 248, a2 + 248);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  long long v8;
  long long v9;
  uint64_t vars8;

  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  uint64_t v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  uint64_t v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v7 = a3 + 16;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  *(void *)(a3 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(void *)(a3 + 125) = *(void *)(a2 + 125);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a3 + 238) = *(void *)(a2 + 238);

  return icu::Locale::operator=(a3 + 248, a2 + 248);
}

uint64_t *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::clone@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x1F0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)result, a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

{
  uint64_t *result;

  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x1F0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)result, a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

BOOL icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::copyErrorTo(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 1;
  }
  sub_18C9692F0(a1, a2);
  return *a2 > 0;
}

uint64_t icu::number::NumberFormatter::with@<X0>(_OWORD *a1@<X8>)
{
  a1[28] = 0u;
  a1[29] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return sub_18C913B28((uint64_t)a1);
}

void icu::number::NumberFormatter::withLocale(icu::number::NumberFormatter *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  long long v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_18C913B28((uint64_t)&v5);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a2, (uint64_t)&v5, (uint64_t)this);
  icu::Locale::~Locale((icu::Locale *)((char *)&v8[2] + 8));
  icu::number::impl::StringProp::~StringProp((void **)v8);
  icu::number::impl::StringProp::~StringProp((void **)&v7);
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v6[9] + 8));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)((char *)&v6[7] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)((char *)&v6[1] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v6);
}

uint64_t icu::number::UnlocalizedNumberFormatter::locale@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1, a2);
}

{
  return icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1, a2);
}

uint64_t icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper((icu::number::impl::SymbolsWrapper *)(a1 + 136), (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale((icu::number::Scale *)(a1 + 168), (const icu::number::Scale *)(a2 + 168));
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  long long v8 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale((icu::Locale *)(a1 + 248), a2 + 248);
  return a1;
}

{
  uint64_t v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;

  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  long long v8 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale(a1 + 248, a2 + 248);
  return a1;
}

uint64_t icu::number::UnlocalizedNumberFormatter::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 80) = v7;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a1 + 136), (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  uint64_t v8 = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = v8;
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a2 + 248);
  return a1;
}

{
  uint64_t v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 80) = v7;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a1 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  uint64_t v8 = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = v8;
  icu::Locale::operator=(a1 + 248, a2 + 248);
  return a1;
}

uint64_t icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper((icu::number::impl::SymbolsWrapper *)(a1 + 136), (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale((icu::number::Scale *)(a1 + 168), (const icu::number::Scale *)(a2 + 168));
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  long long v8 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale((icu::Locale *)(a1 + 248), a2 + 248);
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  UErrorCode v11 = U_ZERO_ERROR;
  icu::number::LocalizedNumberFormatter::lnfCopyHelper((icu::number::LocalizedNumberFormatter *)a1, v9, &v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;

  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  long long v8 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale(a1 + 248, a2 + 248);
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  icu::number::LocalizedNumberFormatter::lnfMoveHelper(a1, a2);
  return a1;
}

void icu::number::LocalizedNumberFormatter::lnfCopyHelper(icu::number::LocalizedNumberFormatter *this, const icu::number::LocalizedNumberFormatter *a2, UErrorCode *a3)
{
  long long v5 = (void *)*((void *)this + 59);
  if (v5)
  {
    long long v6 = sub_18C96C62C(v5);
    icu::UMemory::operator delete(v6);
  }
  atomic_store(0, (unsigned int *)this + 120);
  *((void *)this + 59) = 0;
  long long v7 = (void *)*((void *)this + 61);
  if (v7)
  {
    uint64_t v8 = v7[309];
    if (v8) {
      (*(void (**)(uint64_t, const icu::number::LocalizedNumberFormatter *))(*(void *)v8 + 8))(v8, a2);
    }
    sub_18C913CF8(v7 + 1);
    icu::UMemory::operator delete(v7);
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 28);
  if (v9 || (uint64_t v9 = (uint64_t *)*((void *)this + 29)) != 0)
  {
    int v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x9B0, (unint64_t)a2);
    if (v10)
    {
      UErrorCode v11 = v10;
      bzero(v10, 0x9B0uLL);
      v11[1] = (uint64_t)&unk_1EDA4F2F0;
      int v11[2] = (uint64_t)&unk_1EDA47700;
      *((_WORD *)v11 + 12) = 2;
      v11[10] = (uint64_t)&unk_1EDA47700;
      *((_WORD *)v11 + 44) = 2;
      v11[18] = (uint64_t)&unk_1EDA47700;
      *((_WORD *)v11 + 76) = 2;
      v11[26] = (uint64_t)&unk_1EDA47700;
      *((_WORD *)v11 + 108) = 2;
      *((unsigned char *)v11 + 274) = 1;
      sub_18C913BF0(v11 + 35);
      int v12 = 0;
      v11[309] = 0;
      int v18 = v11;
      if (*(int *)a3 <= 0)
      {
        long long v13 = (void *)*((void *)this + 28);
        if (v13)
        {
          sub_18C96BB50(v11 + 1, v13, a3);
          if (*((unsigned char *)v11 + 2464)) {
            long long v14 = v11 + 1;
          }
          else {
            long long v14 = v11 + 35;
          }
          *((void *)this + 28) = v14;
        }
        long long v15 = (uint64_t *)*((void *)this + 29);
        if (v15)
        {
          long long v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x20, (unint64_t)v13);
          uint64_t v17 = (uint64_t)v16;
          if (v16) {
            icu::PluralRules::PluralRules((uint64_t)v16, *((void *)this + 29));
          }
          sub_18C7F5A70((uint64_t)(v11 + 309), v17, (int *)a3);
          *((void *)this + 29) = v11[309];
        }
        int v18 = 0;
        int v12 = v11;
      }
    }
    else
    {
      int v12 = 0;
      int v18 = 0;
      if (*(int *)a3 <= 0)
      {
        int v12 = 0;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    *((void *)this + 61) = v12;
    sub_18C96CB54(&v18);
  }
  else
  {
    *((void *)this + 61) = 0;
  }
}

void icu::number::LocalizedNumberFormatter::lnfMoveHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 472);
  if (v4)
  {
    long long v5 = sub_18C96C62C(v4);
    icu::UMemory::operator delete(v5);
  }
  if (*(void *)(a2 + 472))
  {
    long long v6 = (void *)(a2 + 472);
    atomic_store(0x80000000, (unsigned int *)(a1 + 480));
    *(void *)(a1 + 472) = *(void *)(a2 + 472);
    long long v7 = (unsigned int *)(a2 + 480);
  }
  else
  {
    long long v6 = (void *)(a1 + 472);
    long long v7 = (unsigned int *)(a1 + 480);
  }
  atomic_store(0, v7);
  void *v6 = 0;
  uint64_t v8 = *(void **)(a1 + 488);
  if (v8)
  {
    uint64_t v9 = v8[309];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    sub_18C913CF8(v8 + 1);
    icu::UMemory::operator delete(v8);
  }
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a2 + 488) = 0;
}

uint64_t icu::number::LocalizedNumberFormatter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a2 + 4);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(void *)(a1 + 4) = v4;
    icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
    icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    long long v6 = *(_OWORD *)(a2 + 96);
    long long v5 = *(_OWORD *)(a2 + 112);
    long long v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 125) = *(void *)(a2 + 125);
    *(_OWORD *)(a1 + 96) = v6;
    *(_OWORD *)(a1 + 112) = v5;
    *(_OWORD *)(a1 + 80) = v7;
    icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a1 + 136), (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    icu::number::Scale::operator=(a1 + 168, a2 + 168);
    icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
    icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
    uint64_t v8 = *(void *)(a2 + 238);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 238) = v8;
    icu::Locale::operator=((icu::Locale *)(a1 + 248), a2 + 248);
    UErrorCode v11 = U_ZERO_ERROR;
    icu::number::LocalizedNumberFormatter::lnfCopyHelper((icu::number::LocalizedNumberFormatter *)a1, v9, &v11);
  }
  return a1;
}

{
  uint64_t v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;

  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 80) = v7;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a1 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  uint64_t v8 = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = v8;
  icu::Locale::operator=(a1 + 248, a2 + 248);
  icu::number::LocalizedNumberFormatter::lnfMoveHelper(a1, a2);
  return a1;
}

uint64_t icu::number::LocalizedNumberFormatter::resetCompiled(uint64_t this)
{
  *(void *)(this + 472) = 0;
  return this;
}

void *sub_18C96BB50(void *result, void *lpsrc, _DWORD *a3)
{
  if (!lpsrc) {
    goto LABEL_8;
  }
  uint64_t v5 = (uint64_t)result;
  if (v6)
  {
    long long v7 = v6;
    icu::UnicodeString::operator=((UChar **)(v5 + 8), v6 + 1);
    icu::UnicodeString::operator=((UChar **)(v5 + 72), v7 + 9);
    icu::UnicodeString::operator=((UChar **)(v5 + 136), v7 + 17);
    uint64_t result = icu::UnicodeString::operator=((UChar **)(v5 + 200), v7 + 25);
    char v8 = *((unsigned char *)v7 + 266);
    *(_WORD *)(v5 + 264) = *((_WORD *)v7 + 132);
    *(unsigned char *)(v5 + 266) = v8;
    return result;
  }
  if (result)
  {
    uint64_t v9 = (uint64_t)result;
    uint64_t v10 = -2176;
    do
    {
      uint64_t v11 = v5 + v10;
      icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2464), (UChar **)(v9 + v10 + 2192));
      icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2528), (UChar **)(v9 + v10 + 2256));
      icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2592), (UChar **)(v9 + v10 + 2320));
      uint64_t result = icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2656), (UChar **)(v9 + v10 + 2384));
      char v12 = *(unsigned char *)(v9 + v10 + 2450);
      *(_WORD *)(v11 + 2720) = *(_WORD *)(v9 + v10 + 2448);
      *(unsigned char *)(v11 + 2722) = v12;
      v10 += 272;
    }
    while (v10);
    *(unsigned char *)(v5 + 2456) = *(unsigned char *)(v9 + 2184);
  }
  else
  {
LABEL_8:
    *a3 = 5;
  }
  return result;
}

void icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter(icu::number::LocalizedNumberFormatter *this)
{
  int v2 = (void *)*((void *)this + 59);
  if (v2)
  {
    int v3 = sub_18C96C62C(v2);
    icu::UMemory::operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 61);
  if (v4)
  {
    uint64_t v5 = v4[309];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    sub_18C913CF8(v4 + 1);
    icu::UMemory::operator delete(v4);
  }
  icu::Locale::~Locale((icu::number::LocalizedNumberFormatter *)((char *)this + 248));
  icu::number::impl::StringProp::~StringProp((void **)this + 26);
  icu::number::impl::StringProp::~StringProp((void **)this + 24);
  icu::number::Scale::~Scale((icu::number::LocalizedNumberFormatter *)((char *)this + 168));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::LocalizedNumberFormatter *)((char *)this + 136));
  icu::MeasureUnit::~MeasureUnit((icu::number::LocalizedNumberFormatter *)((char *)this + 40));
  icu::MeasureUnit::~MeasureUnit((icu::number::LocalizedNumberFormatter *)((char *)this + 16));
}

uint64_t icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18C913B28(a1);
  *(void *)(v6 + 472) = 0;
  *(void *)(v6 + 480) = 0;
  *(void *)(v6 + 488) = 0;
  uint64_t v7 = *(void *)(a2 + 4);
  *(_DWORD *)(v6 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(v6 + 4) = v7;
  icu::MeasureUnit::operator=(v6 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 80) = v10;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a1 + 136), (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  uint64_t v11 = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = v11;
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a2 + 248);
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a3);
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  long long v8;
  long long v9;
  long long v10;
  uint64_t v11;

  uint64_t v6 = sub_18C913B28(a1);
  *(void *)(v6 + 472) = 0;
  *(void *)(v6 + 480) = 0;
  *(void *)(v6 + 488) = 0;
  uint64_t v7 = *(void *)(a2 + 4);
  *(_DWORD *)(v6 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(v6 + 4) = v7;
  icu::MeasureUnit::operator=(v6 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 80) = v10;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a1 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  uint64_t v11 = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = v11;
  icu::Locale::operator=(a1 + 248, a2 + 248);
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a3);
  return a1;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatInt@<X0>(uint64_t *this@<X0>, UErrorCode *a2@<X2>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v5 <= 0)
  {
    long long v10 = (icu::number::LocalizedNumberFormatter *)this;
    this = icu::UMemory::operator new(v5, (icu::UMemory *)0x198, a3);
    uint64_t v6 = (void **)this;
    if (this)
    {
      sub_18C9140A8((uint64_t)this);
      icu::number::impl::DecimalQuantity::setToLong(v6 + 38, a3);
      this = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl(v10, (icu::number::impl::UFormattedNumberData *)v6, a2);
      if (*(int *)a2 < 1)
      {
        UErrorCode v7 = U_ZERO_ERROR;
      }
      else
      {
        this = (uint64_t *)(*((uint64_t (**)(void **))*v6 + 1))(v6);
        uint64_t v6 = 0;
        UErrorCode v7 = *a2;
      }
    }
    else
    {
      UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    uint64_t v6 = 0;
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(void *)a4 = &unk_1EDA4F7C0;
  *(void *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  return this;
}

uint64_t icu::number::LocalizedNumberFormatter::formatImpl(icu::number::LocalizedNumberFormatter *this, icu::number::impl::UFormattedNumberData *a2, UErrorCode *a3)
{
  if (*((unsigned char *)this + 244))
  {
    int v8 = 0;
    int Magnitude = icu::number::impl::DecimalQuantity::getMagnitude((icu::number::impl::UFormattedNumberData *)((char *)a2 + 304));
    icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)a2 + 304, Magnitude - 14, 4u, &v8);
  }
  if (icu::number::LocalizedNumberFormatter::computeCompiled((atomic_uint *)this, a3)) {
    uint64_t result = sub_18C96D308(*((uint64_t **)this + 59), a2, a3);
  }
  else {
    uint64_t result = sub_18C96CC24((uint64_t)this, a2, a3);
  }
  if (*(int *)a3 <= 0) {
    return icu::FormattedStringBuilder::writeTerminator((icu::number::impl::UFormattedNumberData *)((char *)a2 + 8), a3);
  }
  return result;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatDouble@<X0>(uint64_t *this@<X0>, double a2@<D0>, UErrorCode *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v5 <= 0)
  {
    long long v10 = (icu::number::LocalizedNumberFormatter *)this;
    this = icu::UMemory::operator new(v5, (icu::UMemory *)0x198, (unint64_t)a3);
    uint64_t v6 = (void **)this;
    if (this)
    {
      sub_18C9140A8((uint64_t)this);
      icu::number::impl::DecimalQuantity::setToDouble(v6 + 38, a2);
      this = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl(v10, (icu::number::impl::UFormattedNumberData *)v6, a3);
      if (*(int *)a3 < 1)
      {
        UErrorCode v7 = U_ZERO_ERROR;
      }
      else
      {
        this = (uint64_t *)(*((uint64_t (**)(void **))*v6 + 1))(v6);
        uint64_t v6 = 0;
        UErrorCode v7 = *a3;
      }
    }
    else
    {
      UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    uint64_t v6 = 0;
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(void *)a4 = &unk_1EDA4F7C0;
  *(void *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  return this;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatDecimal@<X0>(uint64_t *result@<X0>, const char *a2@<X1>, int a3@<W2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 <= 0)
  {
    char v12 = (icu::number::LocalizedNumberFormatter *)result;
    uint64_t result = icu::UMemory::operator new(v6, (icu::UMemory *)0x198, (unint64_t)a2);
    UErrorCode v7 = (icu::number::impl::UFormattedNumberData *)result;
    if (result)
    {
      sub_18C9140A8((uint64_t)result);
      icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v7 + 304, a2, a3, a4);
      uint64_t result = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl(v12, v7, a4);
      if (*(int *)a4 < 1)
      {
        UErrorCode v8 = U_ZERO_ERROR;
      }
      else
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(icu::number::impl::UFormattedNumberData *))(*(void *)v7 + 8))(v7);
        UErrorCode v7 = 0;
        UErrorCode v8 = *a4;
      }
    }
    else
    {
      UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    UErrorCode v7 = 0;
    UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(void *)a5 = &unk_1EDA4F7C0;
  *(void *)(a5 + 8) = v7;
  *(_DWORD *)(a5 + 16) = v8;
  return result;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatDecimalQuantity@<X0>(uint64_t *this@<X0>, const icu::number::impl::DecimalQuantity *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v5 <= 0)
  {
    long long v10 = (icu::number::LocalizedNumberFormatter *)this;
    this = icu::UMemory::operator new(v5, (icu::UMemory *)0x198, (unint64_t)a2);
    uint64_t v6 = this;
    if (this)
    {
      sub_18C9140A8((uint64_t)this);
      icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)(v6 + 38), (uint64_t)a2);
      this = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl(v10, (icu::number::impl::UFormattedNumberData *)v6, a3);
      if (*(int *)a3 < 1)
      {
        UErrorCode v7 = U_ZERO_ERROR;
      }
      else
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v6 + 8))(v6);
        uint64_t v6 = 0;
        UErrorCode v7 = *a3;
      }
    }
    else
    {
      UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    uint64_t v6 = 0;
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(void *)a4 = &unk_1EDA4F7C0;
  *(void *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  return this;
}

uint64_t icu::number::LocalizedNumberFormatter::computeCompiled(atomic_uint *this, UErrorCode *a2)
{
  explicit = (uint64_t *)atomic_load_explicit(this + 120, memory_order_acquire);
  if ((explicit & 0x80000000) == 0)
  {
    int v5 = this[60];
    if ((int)explicit <= v5 && v5 >= 1) {
      explicit = (uint64_t *)(atomic_fetch_add(this + 120, 1u) + 1);
    }
  }
  int v7 = this[60];
  if (explicit != v7 || v7 < 1) {
    return explicit >> 31;
  }
  uint64_t result = (uint64_t)icu::UMemory::operator new(explicit, (icu::UMemory *)0x258, (unint64_t)a2);
  if (result)
  {
    *((void *)this + 59) = sub_18C96CBBC(result, (uint64_t)this, a2);
    atomic_store(0x80000000, (unsigned int *)this + 120);
    return 1;
  }
  else
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void icu::number::LocalizedNumberFormatter::getAffixImpl(icu::number::LocalizedNumberFormatter *this, int a2, int a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v23);
  if (a3) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = 3;
  }
  if (icu::number::LocalizedNumberFormatter::computeCompiled((atomic_uint *)this, a5)) {
    int32_t v11 = sub_18C96D4F0(*((void *)this + 59), v10, 5, (uint64_t)v23, (int *)a5);
  }
  else {
    int32_t v11 = sub_18C96D14C((uint64_t)this, v10, 5, (uint64_t)v23, a5);
  }
  int32_t v12 = v11;
  if (*((_WORD *)a4 + 4)) {
    __int16 v13 = 2;
  }
  else {
    __int16 v13 = *((_WORD *)a4 + 4) & 0x1F;
  }
  *((_WORD *)a4 + 4) = v13;
  icu::FormattedStringBuilder::toTempUnicodeString((icu::FormattedStringBuilder *)v23, (uint64_t)v19);
  if (a2)
  {
    int v14 = 0;
    int32_t v15 = v12;
  }
  else
  {
    int32_t v15 = icu::FormattedStringBuilder::length((icu::FormattedStringBuilder *)v23) - v12;
    int v14 = v12;
  }
  icu::UnicodeString::tempSubString((icu::UnicodeString *)v19, v14, v15, (icu::UnicodeString *)v20);
  if ((v21 & 0x8000u) == 0) {
    uint64_t v16 = v21 >> 5;
  }
  else {
    uint64_t v16 = v22;
  }
  icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v20, 0, v16);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v19);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v23);
}

uint64_t icu::number::LocalizedNumberFormatter::getCompiled(icu::number::LocalizedNumberFormatter *this)
{
  return *((void *)this + 59);
}

uint64_t icu::number::LocalizedNumberFormatter::getCallCount(atomic_uint *this)
{
  return atomic_load_explicit(this + 120, memory_order_acquire);
}

uint64_t icu::number::LocalizedNumberFormatter::getDecimalFormatSymbols(icu::number::LocalizedNumberFormatter *this)
{
  return icu::number::impl::SymbolsWrapper::getDecimalFormatSymbols((icu::number::LocalizedNumberFormatter *)((char *)this + 136));
}

void *sub_18C96C62C(void *a1)
{
  uint64_t v2 = a1[74];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[73];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[72];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[71];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[70];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[69];
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a1[68];
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = a1[67];
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = a1[66];
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = a1[65];
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = a1[64];
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = a1[63];
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  sub_18C96C86C((uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_18C96C86C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4EFF0;
  if (*(unsigned char *)(a1 + 452)) {
    uprv_free(*(void **)(a1 + 440));
  }
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 416));
  *(void *)(a1 + 312) = &unk_1EDA4F4A8;
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 320));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 312));
  *(void *)(a1 + 272) = &unk_1EDA4F760;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 280));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 256));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 240));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 216));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 32));
  return a1;
}

void sub_18C96C948(uint64_t a1)
{
  sub_18C96C86C(a1);

  JUMPOUT(0x192F969D0);
}

uint64_t sub_18C96C980(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a3) {
    return sub_18C96C9A0(a3, result);
  }
  *(unsigned char *)(result + 488) = 1;
  return result;
}

uint64_t sub_18C96C9A0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 12) = v4;
  icu::UnicodeString::operator=((UChar **)(a1 + 32), (UChar **)(a2 + 32));
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 152);
  long long v6 = *(_OWORD *)(a2 + 168);
  long long v7 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v7;
  *(_OWORD *)(a1 + 168) = v6;
  *(_OWORD *)(a1 + 152) = v5;
  long long v8 = *(_OWORD *)(a2 + 120);
  long long v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  icu::number::Scale::operator=(a1 + 280, a2 + 280);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  icu::UnicodeString::operator=((UChar **)(a1 + 320), (UChar **)(a2 + 320));
  long long v10 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v10;
  icu::MeasureUnit::operator=(a1 + 416, a2 + 416);
  if (a1 != a2) {
    sub_18C96CA98((void *)(a1 + 440), a2 + 440, (int *)(a1 + 472));
  }
  uint64_t v11 = *(void *)(a2 + 480);
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
  *(void *)(a1 + 480) = v11;
  return a1;
}

void *sub_18C96CA98(void *result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v5 = *(unsigned int *)(a2 + 8);
    if ((int)v5 >= 1 && (v6 = (void **)result, (uint64_t result = uprv_malloc(8 * v5)) != 0))
    {
      long long v7 = result;
      if (*((unsigned char *)v6 + 12)) {
        uprv_free(*v6);
      }
      uint64_t *v6 = v7;
      *((_DWORD *)v6 + 2) = v5;
      *((unsigned char *)v6 + 12) = 1;
      long long v8 = *(const void **)a2;
      return memcpy(v7, v8, 8 * v5);
    }
    else
    {
      *a3 = 7;
    }
  }
  return result;
}

void **sub_18C96CB54(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = v2[309];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    sub_18C913CF8(v2 + 1);
    icu::UMemory::operator delete(v2);
  }
  return a1;
}

uint64_t sub_18C96CBBC(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  *(void *)a1 = 0;
  sub_18C96E7C8(a1 + 8);
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + icu::MessagePattern::clear((uint64_t)this + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)a1 = sub_18C96D5BC(a1, a2, 1, a3);
  return a1;
}

uint64_t sub_18C96CC24(uint64_t a1, void *a2, UErrorCode *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v6 = (icu::number::impl::DecimalQuantity *)(a2 + 38);
  bzero(&v12, 0x258uLL);
  sub_18C96E7C8((uint64_t)v13);
  memset(&v13[496], 0, 96);
  uint64_t v12 = sub_18C96D5BC((uint64_t)&v12, a1, 0, a3);
  long long v7 = sub_18C96CD64((uint64_t *)&v12, v6, a3);
  uint64_t v8 = 0;
  if (*(int *)a3 <= 0)
  {
    uint64_t v9 = (uint64_t)v7;
    int v10 = sub_18C96CE00((uint64_t)(v7 + 1), v6, (icu::FormattedStringBuilder *)(a2 + 1), 0, a3);
    uint64_t v8 = sub_18C96D038(v9, (icu::FormattedStringBuilder *)(a2 + 1), 0, v10, a3) + v10;
    icu::MeasureUnit::operator=((uint64_t)(a2 + 47), v9 + 416);
    a2[50] = *(void *)(v9 + 184);
  }
  sub_18C96C62C(&v12);
  return v8;
}

uint64_t *sub_18C96CD64(uint64_t *a1, icu::number::impl::DecimalQuantity *a2, UErrorCode *a3)
{
  if (*(int *)a3 < 1)
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      long long v4 = a1 + 1;
      (*(void (**)(uint64_t, icu::number::impl::DecimalQuantity *, uint64_t *, UErrorCode *))(*(void *)v6 + 16))(v6, a2, a1 + 1, a3);
      icu::number::IntegerWidth::apply((icu::number::IntegerWidth *)((char *)a1 + 164), a2, a3);
      return v4;
    }
    *a3 = U_INTERNAL_PROGRAM_ERROR;
  }
  return a1 + 1;
}

uint64_t sub_18C96CE00(uint64_t a1, icu::number::impl::DecimalQuantity *a2, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(void *)a2 + 32))(a2))
  {
    int v10 = (UChar **)(*(void *)(a1 + 88) + 904);
LABEL_5:
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v21, v10);
    uint64_t v11 = icu::FormattedStringBuilder::insert(a3, a4, (uint64_t)v21, 32, 0, a5);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v21);
    return v11;
  }
  if ((*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(void *)a2 + 24))(a2))
  {
    int v10 = (UChar **)(*(void *)(a1 + 88) + 968);
    goto LABEL_5;
  }
  int v14 = sub_18C96E560(a1, a2, a3, a4, a5);
  if ((icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude(a2) & 0x80000000) != 0 || *(_DWORD *)(a1 + 20) == 1)
  {
    if (*(_WORD *)(a1 + 32))
    {
      if (*(unsigned char *)(a1 + 16)) {
        int32_t v15 = (UChar **)(*(void *)(a1 + 88) + 648);
      }
      else {
        int32_t v15 = (UChar **)(*(void *)(a1 + 88) + 8);
      }
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v21, v15);
      v14 += icu::FormattedStringBuilder::insert(a3, v14 + a4, (uint64_t)v21, 34, 0, a5);
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v21);
    }
    else
    {
      v14 += icu::FormattedStringBuilder::insert(a3, v14 + a4, a1 + 24, 39, 0, a5);
    }
  }
  int v17 = sub_18C96E6DC(a1, a2, a3, v14 + a4, a5);
  uint64_t v11 = (v17 + v14);
  if (!(v17 + v14))
  {
    uint64_t v18 = *(void *)(a1 + 88);
    unsigned int v19 = *(_DWORD *)(v18 + 1928);
    if (v19 == -1) {
      return icu::FormattedStringBuilder::insert(a3, a4, v18 + 264, 32, 0, a5);
    }
    else {
      return icu::FormattedStringBuilder::insertCodePoint(a3, a4, v19, 32, a5);
    }
  }
  return v11;
}

uint64_t sub_18C96D038(uint64_t a1, icu::FormattedStringBuilder *a2, uint64_t a3, int a4, UErrorCode *a5)
{
  int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 16))(*(void *)(a1 + 208));
  uint64_t v11 = *(const icu::number::impl::Modifier **)(a1 + 200);
  if (*(int *)(a1 + 144) < 1)
  {
    v10 += (*(uint64_t (**)(void, icu::FormattedStringBuilder *, uint64_t, void, UErrorCode *))(*(void *)v11 + 16))(*(void *)(a1 + 200), a2, a3, (v10 + a4), a5);
    int v12 = (*(uint64_t (**)(void, icu::FormattedStringBuilder *, uint64_t, void, UErrorCode *))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), a2, a3, (v10 + a4), a5);
  }
  else
  {
    int v12 = icu::number::impl::Padder::padAndApply((icu::number::impl::Padder *)(a1 + 144), v11, *(const icu::number::impl::Modifier **)(a1 + 192), a2, a3, (v10 + a4), a5);
  }
  return (v12 + v10);
}

uint64_t sub_18C96D14C(uint64_t a1, int a2, int a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  bzero(&v12, 0x258uLL);
  sub_18C96E7C8((uint64_t)v13);
  memset(&v13[496], 0, 96);
  int v12 = sub_18C96D5BC((uint64_t)&v12, a1, 0, a5);
  uint64_t v10 = sub_18C96D238((uint64_t)&v12, a2, a3, a4, (int *)a5);
  sub_18C96C62C(&v12);
  return v10;
}

uint64_t sub_18C96D238(uint64_t a1, int a2, int a3, uint64_t a4, int *a5)
{
  if (*a5 > 0) {
    return 0;
  }
  icu::number::impl::MutablePatternModifier::setNumberProperties(*(void *)(a1 + 552), a2, a3);
  (*(void (**)(void, uint64_t, void, void, int *))(**(void **)(a1 + 552) + 24))(*(void *)(a1 + 552), a4, 0, 0, a5);
  if (*a5 > 0) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(void))(**(void **)(a1 + 552) + 32);

  return v9();
}

uint64_t sub_18C96D308(uint64_t *a1, void *a2, UErrorCode *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (icu::number::impl::DecimalQuantity *)(a2 + 38);
  long long v25 = 0u;
  memset(v26, 0, sizeof(v26));
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_18C96E7C8((uint64_t)v10);
  sub_18C96D44C(a1, v6, (uint64_t)v10, a3);
  if (*(int *)a3 <= 0)
  {
    int v8 = sub_18C96CE00((uint64_t)v10 + 8, v6, (icu::FormattedStringBuilder *)(a2 + 1), 0, a3);
    uint64_t v7 = sub_18C96D038((uint64_t)v10, (icu::FormattedStringBuilder *)(a2 + 1), 0, v8, a3) + v8;
    icu::MeasureUnit::operator=((uint64_t)(a2 + 47), (uint64_t)v26);
    a2[50] = *((void *)&v11 + 1);
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_18C96C86C((uint64_t)v10);
  return v7;
}

void sub_18C96D44C(uint64_t *a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    uint64_t v5 = *a1;
    if (v5)
    {
      (*(void (**)(uint64_t, icu::number::impl::DecimalQuantity *, uint64_t, UErrorCode *))(*(void *)v5 + 16))(v5, a2, a3, a4);
      icu::number::IntegerWidth::apply((icu::number::IntegerWidth *)(a3 + 156), a2, a4);
    }
    else
    {
      *a4 = U_INTERNAL_PROGRAM_ERROR;
    }
  }
}

uint64_t sub_18C96D4F0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (*a5 > 0) {
    return 0;
  }
  uint64_t Modifier = icu::number::impl::ImmutablePatternModifier::getModifier(*(void *)(a1 + 560), a2);
  (*(void (**)(uint64_t, uint64_t, void, void, int *))(*(void *)Modifier + 16))(Modifier, a4, 0, 0, a5);
  if (*a5 > 0) {
    return 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)Modifier + 24);

  return v9(Modifier);
}

icu::number::impl::MutablePatternModifier *sub_18C96D5BC(uint64_t a1, uint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0 && (sub_18C9692F0(a2, (int *)a4) & 1) == 0)
  {
    Type = icu::MeasureUnit::getType((icu::MeasureUnit *)(a2 + 16));
    int v11 = strcmp("currency", Type);
    BOOL v115 = v11 == 0;
    icu::MeasureUnit::MeasureUnit((uint64_t)v133);
    char v12 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)(a2 + 16) + 32))(a2 + 16, v133);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v133);
    Subtype = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)(a2 + 16));
    int v14 = strcmp("percent", Subtype);
    long long v15 = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)(a2 + 16));
    int v121 = strcmp("permille", v15);
    int v16 = *(_DWORD *)(a2 + 4);
    int v17 = *(_DWORD *)(a2 + 156) - 3;
    if (v17 > 5) {
      int v18 = 1;
    }
    else {
      int v18 = dword_18CA94D3C[v17];
    }
    int v119 = v18;
    int v114 = a3;
    long long v131 = 0u;
    long long v132 = 0u;
    v130 = &unk_18CAA19F2;
    icu::CurrencyUnit::CurrencyUnit(&v131, &v130, a4);
    v124 = v130;
    int v118 = v16;
    if (v11)
    {
      if (*(_DWORD *)(a2 + 152) == 7) {
        int v19 = 1;
      }
      else {
        int v19 = *(_DWORD *)(a2 + 152);
      }
      int v129 = v19;
      if ((v12 & 1) == 0
        && (v14 ? (v20 = v121 == 0) : (v20 = 1), !v20 ? (int v21 = 0) : (int v21 = 1), v19 == 2 || !v21 || v16 == 1))
      {
        if (*icu::MeasureUnit::getType((icu::MeasureUnit *)(a2 + 16))) {
          BOOL v117 = 0;
        }
        else {
          BOOL v117 = icu::MeasureUnit::getComplexity((icu::MeasureUnit *)(a2 + 16), a4, v22, v23) == 2;
        }
        unsigned int v122 = 1;
      }
      else
      {
        unsigned int v122 = 0;
        BOOL v117 = 0;
      }
    }
    else
    {
      icu::CurrencyUnit::CurrencyUnit((uint64_t *)&v124, (icu::CurrencyUnit *)v133, (const icu::MeasureUnit *)(a2 + 16), a4);
      icu::CurrencyUnit::operator=((uint64_t)&v131, (unint64_t)v133);
      icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v133);
      unsigned int v122 = 0;
      BOOL v117 = 0;
      if (*(_DWORD *)(a2 + 152) == 7) {
        int v19 = 1;
      }
      else {
        int v19 = *(_DWORD *)(a2 + 152);
      }
      int v129 = v19;
    }
    int v123 = v11;
    if (icu::number::impl::SymbolsWrapper::isNumberingSystem((icu::number::impl::SymbolsWrapper *)(a2 + 136)))
    {
      NumberingSysteuint64_t m = (icu::NumberingSystem *)icu::number::impl::SymbolsWrapper::getNumberingSystem((icu::number::impl::SymbolsWrapper *)(a2 + 136));
      if (NumberingSystem)
      {
        long long v25 = NumberingSystem;
        Name = (const char *)icu::NumberingSystem::getName(NumberingSystem);
        *(void *)(a1 + 192) = "";
        if (icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136)))
        {
          int v11 = v123;
          goto LABEL_37;
        }
        int v33 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v28, (icu::UMemory *)0xB48, v27);
        if (!v33) {
          goto LABEL_171;
        }
        char v32 = (char **)v33;
        icu::DecimalFormatSymbols::DecimalFormatSymbols(v33, (const icu::Locale *)(a2 + 248), v25, *(unsigned char *)(a2 + 245), a4);
LABEL_45:
        int v11 = v123;
        if (*(int *)a4 > 0
          || !v123 && (icu::DecimalFormatSymbols::setCurrency(v32, (const UChar *)&v132 + 2, (int *)a4), *(int *)a4 > 0))
        {
          (*((void (**)(char **))*v32 + 1))(v32);
          goto LABEL_172;
        }
        *(void *)(a1 + 104) = v32;
        uint64_t v34 = *(void *)(a1 + 520);
        if (v34) {
          (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
        }
        *(void *)(a1 + 520) = v32;
        if (Name) {
          goto LABEL_51;
        }
        goto LABEL_38;
      }
      *(void *)(a1 + 192) = "";
      if (!icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136)))
      {
LABEL_41:
        unsigned int v31 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v30, (icu::UMemory *)0xB48, v29);
        if (!v31) {
          goto LABEL_171;
        }
        char v32 = (char **)v31;
        icu::DecimalFormatSymbols::DecimalFormatSymbols(v31, (const icu::Locale *)(a2 + 248), a4);
        Name = 0;
        goto LABEL_45;
      }
    }
    else
    {
      *(void *)(a1 + 192) = "";
      if (!icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136))) {
        goto LABEL_41;
      }
    }
    Name = 0;
LABEL_37:
    *(void *)(a1 + 104) = icu::number::impl::SymbolsWrapper::getDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136));
    if (Name) {
      goto LABEL_51;
    }
LABEL_38:
    if (*(int *)a4 > 0) {
      goto LABEL_52;
    }
    Name = (const char *)(*(void *)(a1 + 104) + 2874);
LABEL_51:
    if (*Name)
    {
LABEL_53:
      strncpy((char *)(a1 + 180), Name, 8uLL);
      *(unsigned char *)(a1 + 188) = 0;
      if (v11 || (int v39 = *(uint64_t **)(a1 + 104), (v40 = v39[310]) == 0))
      {
        if (v122)
        {
          int v36 = 0;
        }
        else
        {
          int v36 = 3;
          if (v14 && v121)
          {
            if (v19 != 2 && v11 == 0) {
              int v36 = v119;
            }
            else {
              int v36 = 0;
            }
          }
        }
        char v38 = sub_18C9867BC(a2 + 248, Name, v36, (int *)a4);
        int v39 = (uint64_t *)*(unsigned int *)a4;
        if ((int)v39 > 0) {
          goto LABEL_172;
        }
        uint64_t v40 = (uint64_t)v38;
      }
      int v41 = icu::UMemory::operator new(v39, (icu::UMemory *)0x1B8, v35);
      if (!v41) {
        goto LABEL_173;
      }
      char v42 = (const icu::UnicodeString *)v41;
      sub_18C962AE4((uint64_t)v41);
      unsigned int v43 = (const icu::number::impl::ParsedPatternInfo **)(a1 + 536);
      uint64_t v44 = *(void *)(a1 + 536);
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
      }
      *unsigned int v43 = v42;
      BOOL v45 = (UChar **)icu::UnicodeString::UnicodeString((uint64_t)v133, v40);
      icu::number::impl::PatternParser::parseToPatternInfo(v45, v42, a4, v46);
      icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)v133);
      if (*(int *)a4 > 0) {
        goto LABEL_172;
      }
      uint64_t v49 = a1 + 8;
      if (*(__int16 *)(a2 + 200) < 1)
      {
        int v52 = v118;
        if (!v117)
        {
LABEL_83:
          if (*(_DWORD *)(a2 + 168) || *(void *)(a2 + 176))
          {
            uint64_t v55 = a1 + 280;
            icu::number::impl::MultiplierFormatHandler::setAndChain(a1 + 280, a2 + 168, v49);
          }
          else
          {
            uint64_t v55 = v49;
          }
          int v56 = *(_DWORD *)(a2 + 64);
          memset(v127, 0, sizeof(v127));
          if (v56)
          {
            v127[0] = *(_OWORD *)(a2 + 64);
            long long v57 = *(_OWORD *)(a2 + 76);
          }
          else
          {
            if (v52 == 1)
            {
              icu::number::Precision::integer((uint64_t)v126);
              icu::number::FractionPrecision::withMinDigits((uint64_t)v126, 2, (uint64_t)v133);
            }
            else if (v123)
            {
              if (*(__int16 *)(a2 + 200) >= 1)
              {
                LODWORD(v127[0]) = 0;
                DWORD2(v127[1]) = 0;
LABEL_99:
                sub_18C97EF9C((uint64_t)v133, (icu::number::Precision *)v127, *(_DWORD *)(a2 + 96), (const UChar *)&v131, a4);
                long long v59 = *(_OWORD *)&v133[16];
                *(_OWORD *)(a1 + 112) = *(_OWORD *)v133;
                *(_OWORD *)(a1 + 128) = v59;
                *(void *)(a1 + 141) = *(void *)&v133[29];
                if (*(int *)a4 > 0) {
                  goto LABEL_172;
                }
                if (*(__int16 *)(a2 + 100) == -3)
                {
                  if (v118 == 1) {
                    signed int v60 = 1;
                  }
                  else {
                    signed int v60 = 2;
                  }
                  *(void *)(a1 + 20) = icu::number::impl::Grouper::forStrategy(v60);
                  *(_DWORD *)(a1 + 28) = v62;
                }
                else
                {
                  uint64_t v61 = *(void *)(a2 + 100);
                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 108);
                  *(void *)(a1 + 20) = v61;
                }
                long long v63 = (icu::number::impl::Padder *)icu::number::impl::Grouper::setLocaleData((icu::number::impl::Grouper *)(a1 + 20), *v43, (const icu::Locale *)(a2 + 248));
                if (*(_DWORD *)(a2 + 112) == -2)
                {
                  *(void *)(a1 + 152) = icu::number::impl::Padder::none(v63);
                  *(_DWORD *)(a1 + 160) = v64;
                }
                else
                {
                  uint64_t v65 = *(void *)(a2 + 112);
                  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 120);
                  *(void *)(a1 + 152) = v65;
                }
                if (*(unsigned char *)(a2 + 132) || *(unsigned __int16 *)(a2 + 124) != 0xFFFF)
                {
                  uint64_t v66 = *(void *)(a2 + 124);
                  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 132);
                  *(void *)(a1 + 164) = v66;
                }
                else
                {
                  *(void *)(a1 + 164) = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)1);
                  *(unsigned char *)(a1 + 172) = v64;
                }
                int v67 = *(_DWORD *)(a2 + 156);
                if (v67 == 9) {
                  int v67 = 0;
                }
                *(_DWORD *)(a1 + 176) = v67;
                int v68 = *(_DWORD *)(a2 + 164);
                if (v68 == 2) {
                  int v68 = 0;
                }
                *(_DWORD *)(a1 + 36) = v68;
                *(unsigned char *)(a1 + 32) = v115;
                long long v69 = (uint64_t *)*(unsigned int *)(a2 + 4);
                if (v69)
                {
                  long long v70 = (uint64_t *)(a1 + 264);
                  *(void *)(a1 + 216) = a1 + 264;
                  uint64_t v120 = v55;
                  goto LABEL_123;
                }
                long long v71 = icu::UMemory::operator new(v69, (icu::UMemory *)0x28, v64);
                if (v71)
                {
                  uint64_t v120 = (uint64_t)v71;
                  sub_18C97F8B4(v71, a2 + 4, *(void *)(a1 + 104), v55);
                  uint64_t v72 = *(void *)(a1 + 544);
                  if (v72) {
                    (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
                  }
                  long long v70 = (uint64_t *)v120;
                  *(void *)(a1 + 544) = v120;
LABEL_123:
                  uint64_t v73 = (icu::number::impl::MutablePatternModifier *)icu::UMemory::operator new(v70, (icu::UMemory *)0x188, v64);
                  int v8 = v73;
                  if (!v73)
                  {
LABEL_174:
                    int v58 = 7;
                    goto LABEL_175;
                  }
                  v116 = (icu::PluralRules *)(a2 + 248);
                  icu::number::impl::MutablePatternModifier::MutablePatternModifier(v73, 0);
                  uint64_t v74 = *(void *)(a1 + 552);
                  if (v74) {
                    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
                  }
                  *(void *)(a1 + icu::MessagePattern::clear((uint64_t)this + 552) = v8;
                  long long v76 = (uint64_t *)(a2 + 224);
                  uint64_t v75 = *(void *)(a2 + 224);
                  if (!v75
                    || v118 == 1
                    && (v123 == 0) != (*(unsigned int (**)(uint64_t))(*(void *)v75 + 40))(v75))
                  {
                    long long v76 = (uint64_t *)(a1 + 536);
                  }
                  uint64_t v77 = *v76;
                  icu::number::impl::MutablePatternModifier::setPatternInfo((uint64_t)v8, *v76, 0);
                  icu::number::impl::MutablePatternModifier::setPatternAttributes((uint64_t)v8, *(_DWORD *)(a1 + 176), v121 == 0, *(unsigned char *)(a2 + 160));
                  int v78 = icu::number::impl::MutablePatternModifier::needsPlurals(v8);
                  uint64_t v79 = 0;
                  uint64_t v80 = *(void *)(a1 + 104);
                  int v81 = v129;
                  if (v78) {
                    uint64_t v79 = sub_18C96E468(a1, *(uint64_t **)(a2 + 232), v116, (const icu::Locale *)a4);
                  }
                  icu::number::impl::MutablePatternModifier::setSymbols((uint64_t)v8, v80, (const UChar *)&v131, v81, (uint64_t)v79, a4);
                  int v83 = v114;
                  if (v114)
                  {
                    Immutable = icu::number::impl::MutablePatternModifier::createImmutable(v8, a4, v82);
                    sub_18C96E3A8(a1 + 560, (uint64_t)Immutable, (int *)a4);
                  }
                  if (*(int *)a4 > 0) {
                    goto LABEL_172;
                  }
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v77 + 88))(v77))
                  {
                    icu::number::impl::MutablePatternModifier::getCurrencySymbolForUnitWidth((uint64_t)v8, a4, (icu::UnicodeString *)v133);
                    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 40), (icu::UnicodeString *)v133);
                    icu::UnicodeString::~UnicodeString(v86, (icu::UnicodeString *)v133);
                  }
                  if (v122)
                  {
                    if (*(__int16 *)(a2 + 216) <= 0) {
                      long long v87 = (UErrorCode *)"";
                    }
                    else {
                      long long v87 = *(UErrorCode **)(a2 + 208);
                    }
                    if (*(__int16 *)(a2 + 200) < 1)
                    {
                      if (v117)
                      {
                        long long v95 = icu::UMemory::operator new((uint64_t *)v117, (icu::UMemory *)0x228, v85);
                        uint64_t v96 = (uint64_t)v95;
                        if (v95) {
                          sub_18C96E4DC((uint64_t)v95);
                        }
                        sub_18C96E3A8(a1 + 576, v96, (int *)a4);
                        uint64_t v97 = sub_18C96E468(a1, *(uint64_t **)(a2 + 232), v116, (const icu::Locale *)a4);
                        sub_18C9734C0((const char **)v116, (icu::MeasureUnitImpl *)(a2 + 16), &v129, v87, (uint64_t)v97, v120, *(void *)(a1 + 576), (icu::MeasureUnitImpl *)a4);
                        uint64_t v92 = *(void *)(a1 + 576);
                      }
                      else
                      {
                        memset(v133, 0, 24);
                        icu::MeasureUnit::MeasureUnit((uint64_t)v133, a2 + 16);
                        if ((sub_18C96E33C(a2 + 40) & 1) == 0)
                        {
                          icu::MeasureUnit::reciprocal((icu::MeasureUnit *)(a2 + 40), a4, (uint64_t)v125);
                          icu::MeasureUnit::product((icu::MeasureUnit *)v133, (const icu::MeasureUnit *)v125, a4, (uint64_t)v126);
                          icu::MeasureUnit::operator=((uint64_t)v133, (uint64_t)v126);
                          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v126);
                          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v125);
                          uint64_t v100 = icu::MeasureUnit::getType((icu::MeasureUnit *)v133);
                          unsigned int v99 = (uint64_t *)*(unsigned __int8 *)v100;
                          if (!*v100)
                          {
                            if (!*icu::MeasureUnit::getType((icu::MeasureUnit *)(a2 + 16))
                              || (long long v113 = icu::MeasureUnit::getType((icu::MeasureUnit *)(a2 + 40)),
                                  unsigned int v99 = (uint64_t *)*(unsigned __int8 *)v113,
                                  !*v113))
                            {
                              *a4 = U_UNSUPPORTED_ERROR;
                              icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v133);
                              goto LABEL_172;
                            }
                          }
                        }
                        uint64_t v101 = icu::UMemory::operator new(v99, (icu::UMemory *)0x368, v98);
                        uint64_t v102 = (uint64_t)v101;
                        if (v101) {
                          sub_18C96E9D8(v101);
                        }
                        sub_18C96E3A8(a1 + 568, v102, (int *)a4);
                        unsigned int v103 = sub_18C96E468(a1, *(uint64_t **)(a2 + 232), v116, (const icu::Locale *)a4);
                        sub_18C96EE48(v116, (icu::MeasureUnit *)v133, &v129, (const char *)v87, (uint64_t)v103, v120, *(void **)(a1 + 568), (int *)a4);
                        uint64_t v92 = *(void *)(a1 + 568);
                        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v133);
                        int v83 = v114;
                      }
                    }
                    else
                    {
                      OutputUnits = (unsigned int *)icu::units::UnitsRouter::getOutputUnits((icu::units::UnitsRouter *)(*(void *)(a1 + 504) + 8));
                      long long v89 = sub_18C96E468(a1, *(uint64_t **)(a2 + 232), v116, (const icu::Locale *)a4);
                      long long v91 = sub_18C973E44((const char **)v116, OutputUnits, &v129, v87, (uint64_t)v89, v120, a4, v90);
                      sub_18C96E3A8(a1 + 584, (uint64_t)v91, (int *)a4);
                      uint64_t v92 = *(void *)(a1 + 584);
                    }
                  }
                  else if (v123 || v81 != 2)
                  {
                    *(void *)(a1 + 200) = a1 + 248;
                    uint64_t v92 = v120;
                  }
                  else
                  {
                    long long v93 = sub_18C96E468(a1, *(uint64_t **)(a2 + 232), v116, (const icu::Locale *)a4);
                    uint64_t v94 = sub_18C973038((uint64_t)v116, (unint64_t)&v131, (uint64_t)v93, v120, (int *)a4);
                    sub_18C96E3A8(a1 + 568, (uint64_t)v94, (int *)a4);
                    uint64_t v92 = *(void *)(a1 + 568);
                  }
                  if (*(int *)a4 <= 0)
                  {
                    if (v118 != 1) {
                      goto LABEL_158;
                    }
                    uint64_t v104 = v92;
                    int v105 = v129;
                    __int16 v106 = icu::UMemory::operator new((uint64_t *)1, (icu::UMemory *)0x818, v85);
                    if (v106)
                    {
                      uint64_t v92 = (uint64_t)v106;
                      if (v123) {
                        BOOL v107 = 1;
                      }
                      else {
                        BOOL v107 = v105 == 2;
                      }
                      int v108 = !v107;
                      int v109 = *(_DWORD *)(a2 + 8);
                      long long v110 = sub_18C96E468(a1, *(uint64_t **)(a2 + 232), v116, (const icu::Locale *)a4);
                      sub_18C962764(v92, v109, (uint64_t)v116, Name, v108, (uint64_t)v110, v8, v114, v104, (int *)a4);
                      if (*(int *)a4 < 1)
                      {
                        uint64_t v111 = *(void *)(a1 + 592);
                        if (!v111)
                        {
                          *(void *)(a1 + 592) = v92;
                          int v83 = v114;
                          goto LABEL_158;
                        }
                        (*(void (**)(uint64_t))(*(void *)v111 + 8))(v111);
                        UErrorCode v112 = *a4;
                        *(void *)(a1 + 592) = v92;
                        int v83 = v114;
                        if (v112 <= U_ZERO_ERROR)
                        {
LABEL_158:
                          if (v83)
                          {
                            icu::number::impl::ImmutablePatternModifier::addToChain(*(void *)(a1 + 560), v92);
                            int v8 = *(icu::number::impl::MutablePatternModifier **)(a1 + 560);
                          }
                          else
                          {
                            icu::number::impl::MutablePatternModifier::addToChain((uint64_t)v8, v92);
                          }
                          goto LABEL_176;
                        }
                      }
                      goto LABEL_172;
                    }
LABEL_171:
                    if (*(int *)a4 > 0) {
                      goto LABEL_172;
                    }
                    goto LABEL_173;
                  }
LABEL_172:
                  int v8 = 0;
LABEL_176:
                  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v131);
                  return v8;
                }
LABEL_173:
                int v8 = 0;
                goto LABEL_174;
              }
              icu::number::Precision::maxFraction(6, (uint64_t)v133);
            }
            else
            {
              icu::number::Precision::currency(0, (uint64_t)v133);
            }
            v127[0] = *(_OWORD *)v133;
            long long v57 = *(_OWORD *)&v133[12];
          }
          *(_OWORD *)((char *)v127 + 12) = v57;
          goto LABEL_99;
        }
        long long v53 = icu::UMemory::operator new((uint64_t *)v117, (icu::UMemory *)0x30, v48);
        uint64_t v54 = (uint64_t)v53;
        if (v53) {
          icu::number::impl::UnitConversionHandler::UnitConversionHandler(v53, a2 + 16, a1 + 8, a4);
        }
        uint64_t v51 = (uint64_t *)(a1 + 512);
        sub_18C96E3A8(a1 + 512, v54, (int *)a4);
      }
      else
      {
        if ((v122 & 1) == 0)
        {
          int v8 = 0;
          int v58 = 1;
LABEL_175:
          *a4 = v58;
          goto LABEL_176;
        }
        unint64_t v50 = icu::UMemory::operator new((uint64_t *)v122, (icu::UMemory *)0xC0, v48);
        if (v50)
        {
          icu::StringPiece::StringPiece((icu::StringPiece *)v128, *(const char **)(a2 + 192));
          icu::number::impl::UsagePrefsHandler::UsagePrefsHandler(v50, a2 + 248, (icu::MeasureUnitImpl *)(a2 + 16), v128[0], (uint64_t)v128[1], a1 + 8, (int *)a4);
        }
        uint64_t v51 = (uint64_t *)(a1 + 504);
        sub_18C96E3A8(a1 + 504, (uint64_t)v50, (int *)a4);
      }
      uint64_t v49 = *v51;
      int v52 = v118;
      goto LABEL_83;
    }
LABEL_52:
    Name = "latn";
    goto LABEL_53;
  }
  return 0;
}

uint64_t sub_18C96E33C(uint64_t a1)
{
  icu::MeasureUnit::MeasureUnit((uint64_t)v4);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 32))(a1, v4);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v4);
  return v2;
}

uint64_t sub_18C96E3A8(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v6 = (void *)result;
    uint64_t result = *(void *)result;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    void *v6 = a2;
    if (!a2) {
      *a3 = 7;
    }
  }
  else if (a2)
  {
    long long v4 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 8);
    return v4(a2);
  }
  return result;
}

uint64_t *sub_18C96E468(uint64_t a1, uint64_t *a2, icu::PluralRules *a3, const icu::Locale *a4)
{
  long long v4 = a2;
  if (!a2)
  {
    long long v4 = *(uint64_t **)(a1 + 528);
    if (!v4)
    {
      long long v4 = icu::PluralRules::forLocale(a3, a4, (UErrorCode *)a3);
      uint64_t v6 = *(void *)(a1 + 528);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      *(void *)(a1 + 528) = v4;
    }
  }
  return v4;
}

uint64_t sub_18C96E4DC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4F160;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = &unk_1EDA4F190;
  *(_DWORD *)(a1 + 32) = 1;
  *(void *)(a1 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0;
  sub_18C913B28(a1 + 48);
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  return a1;
}

uint64_t sub_18C96E560(uint64_t a1, icu::number::impl::DecimalQuantity *this, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  UpperDisplayint Magnitude = icu::number::impl::DecimalQuantity::getUpperDisplayMagnitude(this);
  uint64_t v11 = 0;
  if ((UpperDisplayMagnitude & 0x80000000) == 0)
  {
    int v12 = 0;
    int v13 = UpperDisplayMagnitude + 1;
    do
    {
      if (icu::number::impl::Grouper::groupAtPosition((icu::number::impl::Grouper *)(a1 + 4), v12, this))
      {
        uint64_t v14 = *(void *)(a1 + 88);
        long long v15 = (UChar **)(v14 + 72);
        int v16 = (UChar **)(v14 + 1096);
        if (*(unsigned char *)(a1 + 16)) {
          int v17 = v16;
        }
        else {
          int v17 = v15;
        }
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v28, v17);
        LODWORD(v11) = icu::FormattedStringBuilder::insert(a3, a4, (uint64_t)v28, 38, 0, a5) + v11;
        icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v28);
      }
      int Digit = icu::number::impl::DecimalQuantity::getDigit(this, v12);
      uint64_t v20 = *(void *)(a1 + 88);
      int v21 = *(_DWORD *)(v20 + 1928);
      if (v21 == -1)
      {
        uint64_t v23 = v20 + ((unint64_t)(Digit + 17) << 6);
        uint64_t v24 = v20 + 264;
        uint64_t v25 = v23 + 8;
        if ((Digit - 10) >= 0xFFFFFFF7) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = v24;
        }
        int inserted = icu::FormattedStringBuilder::insert(a3, a4, v26, 32, 0, a5);
      }
      else
      {
        int inserted = icu::FormattedStringBuilder::insertCodePoint(a3, a4, v21 + Digit, 32, a5);
      }
      uint64_t v11 = (inserted + v11);
      ++v12;
    }
    while (v13 != v12);
  }
  return v11;
}

uint64_t sub_18C96E6DC(uint64_t a1, icu::number::impl::DecimalQuantity *this, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  LowerDisplayint Magnitude = icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude(this);
  if ((LowerDisplayMagnitude & 0x80000000) == 0) {
    return 0;
  }
  int v12 = 0;
  LODWORD(v11) = 0;
  if (-LowerDisplayMagnitude <= 1) {
    int v13 = -1;
  }
  else {
    int v13 = LowerDisplayMagnitude;
  }
  do
  {
    int Digit = icu::number::impl::DecimalQuantity::getDigit(this, --v12);
    int v15 = v11 + a4;
    uint64_t v16 = *(void *)(a1 + 88);
    int v17 = *(_DWORD *)(v16 + 1928);
    if (v17 == -1)
    {
      uint64_t v19 = v16 + ((unint64_t)(Digit + 17) << 6);
      uint64_t v20 = v16 + 264;
      uint64_t v21 = v19 + 8;
      if ((Digit - 10) >= 0xFFFFFFF7) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = v20;
      }
      int inserted = icu::FormattedStringBuilder::insert(a3, v15, v22, 33, 0, a5);
    }
    else
    {
      int inserted = icu::FormattedStringBuilder::insertCodePoint(a3, v15, v17 + Digit, 33, a5);
    }
    uint64_t v11 = (inserted + v11);
  }
  while (v13 != v12);
  return v11;
}

uint64_t sub_18C96E7C8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4EFF0;
  *(_WORD *)(a1 + 12) = -3;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_OWORD *)(a1 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 32) = &unk_1EDA47700;
  *(_WORD *)(a1 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 2;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 32));
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 1icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 1;
  *(_DWORD *)(a1 + 144) = -2;
  *(unsigned char *)(a1 + 164) = 0;
  *(_WORD *)(a1 + 156) = -1;
  *(void *)(a1 + 200) = 0;
  icu::number::impl::ScientificModifier::ScientificModifier(a1 + 216);
  *(void *)(a1 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = &unk_1EDA4F030;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = &unk_1EDA4F030;
  *(unsigned char *)(a1 + 264) = 1;
  *(void *)(a1 + 272) = &unk_1EDA4F760;
  *(_DWORD *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  icu::number::impl::SimpleModifier::SimpleModifier((icu::number::impl::SimpleModifier *)(a1 + 312));
  icu::MeasureUnit::MeasureUnit(a1 + 416);
  *(void *)(a1 + 4icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = a1 + 456;
  *(_DWORD *)(a1 + 448) = 2;
  *(unsigned char *)(a1 + 452) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 488) = 0;
  return a1;
}

void sub_18C96E93C(icu::number::impl::Modifier *a1)
{
  icu::number::impl::Modifier::~Modifier(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C96E964()
{
  return 0;
}

uint64_t sub_18C96E96C()
{
  return 0;
}

uint64_t sub_18C96E974()
{
  return 0;
}

uint64_t sub_18C96E97C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18C96E984()
{
  return 0;
}

void sub_18C96E98C(uint64_t a1, void *a2)
{
  *a2 = 0;
}

BOOL sub_18C96E994(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) == 0;
}

void *sub_18C96E9D8(void *a1)
{
  *a1 = &unk_1EDA4F0C0;
  a1[1] = &unk_1EDA4F0F0;
  uint64_t v2 = a1 + 106;
  for (uint64_t i = 2; i != 106; i += 13)
    icu::number::impl::SimpleModifier::SimpleModifier((icu::number::impl::SimpleModifier *)&a1[i]);
  *uint64_t v2 = 0;
  v2[1] = 0;
  a1[108] = "";
  return a1;
}

uint64_t icu::number::impl::Grouper::forStrategy(signed int a1)
{
  if (a1 >= 5) {
    abort();
  }
  return qword_18CA94D58[a1] | (qword_18CA94D80[a1] << 16) | qword_18CA94D80[a1];
}

unint64_t icu::number::impl::Grouper::forProperties(icu::number::impl::Grouper *this, const icu::number::impl::DecimalFormatProperties *a2)
{
  if (!*((unsigned char *)this + 80)) {
    return 0xFFFEFFFFFFFFLL;
  }
  int v2 = *((_DWORD *)this + 19);
  int v3 = *((_DWORD *)this + 188);
  if (v3 << 16 <= 0) {
    int v3 = *((_DWORD *)this + 19);
  }
  if (v2 << 16 <= 0) {
    LOWORD(v2) = v3;
  }
  int v4 = *((_DWORD *)this + 27) << 16;
  if (v4 != -196608 && v4 <= 0) {
    unint64_t v6 = 0xFFFE00000000;
  }
  else {
    unint64_t v6 = (unint64_t)(unsigned __int16)*((_DWORD *)this + 27) << 32;
  }
  return v6 & 0xFFFFFFFF00000000 | ((unint64_t)(unsigned __int16)v3 << 16) | (unsigned __int16)v2;
}

uint64_t icu::number::impl::Grouper::setLocaleData(icu::number::impl::Grouper *this, const icu::number::impl::ParsedPatternInfo *a2, const icu::Locale *a3)
{
  uint64_t result = *((unsigned __int16 *)this + 2);
  if (result == 65533)
  {
    int v7 = sub_18C986B2C((uint64_t)a3);
    uint64_t result = uprv_max(2, v7);
    goto LABEL_5;
  }
  if (result == 65534)
  {
    uint64_t result = sub_18C986B2C((uint64_t)a3);
LABEL_5:
    *((_WORD *)this + 2) = result;
  }
  int v8 = *(unsigned __int16 *)this;
  if (v8 == 65534 || *((__int16 *)this + 1) == -4)
  {
    uint64_t v9 = *((void *)a2 + 9);
    if (v8 == 65532) {
      __int16 v10 = 3;
    }
    else {
      __int16 v10 = -1;
    }
    if (WORD1(v9) != 0xFFFF) {
      __int16 v10 = *((void *)a2 + 9);
    }
    if ((~v9 & 0xFFFF00000000) != 0) {
      __int16 v11 = WORD1(*((void *)a2 + 9));
    }
    else {
      __int16 v11 = v10;
    }
    *(_WORD *)this = v10;
    *((_WORD *)this + 1) = v11;
  }
  else if ((unsigned __int16)result == 65534)
  {
    uint64_t result = sub_18C986B2C((uint64_t)a3);
    *((_WORD *)this + 2) = result;
  }
  return result;
}

BOOL icu::number::impl::Grouper::groupAtPosition(icu::number::impl::Grouper *this, int a2, const icu::number::impl::DecimalQuantity *a3)
{
  int v3 = *(unsigned __int16 *)this;
  if (*(_WORD *)this) {
    BOOL v4 = v3 == 0xFFFF;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  int v6 = a2 - (__int16)v3;
  return v6 >= 0
      && !(v6 % *((__int16 *)this + 1))
      && (int)(icu::number::impl::DecimalQuantity::getUpperDisplayMagnitude(a3) - *(__int16 *)this + 1) >= *((__int16 *)this + 2);
}

uint64_t icu::number::impl::Grouper::getPrimary(icu::number::impl::Grouper *this)
{
  return *(__int16 *)this;
}

uint64_t icu::number::impl::Grouper::getSecondary(icu::number::impl::Grouper *this)
{
  return *((__int16 *)this + 1);
}

uint64_t icu::number::IntegerWidth::IntegerWidth(uint64_t this, __int16 a2, __int16 a3, char a4)
{
  *(unsigned char *)(this + 8) = 0;
  *(_WORD *)this = a2;
  *(_WORD *)(this + 2) = a3;
  *(unsigned char *)(this + 4) = a4;
  return this;
}

{
  *(unsigned char *)(this + 8) = 0;
  *(_WORD *)this = a2;
  *(_WORD *)(this + 2) = a3;
  *(unsigned char *)(this + 4) = a4;
  return this;
}

uint64_t icu::number::IntegerWidth::zeroFillTo(icu::number::IntegerWidth *this)
{
  if (this <= 0x3E7) {
    return this | 0xFFFF0000;
  }
  else {
    return 65810;
  }
}

unint64_t icu::number::IntegerWidth::truncateAt(icu::number::IntegerWidth *this, uint64_t a2)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(void *)this;
    a2 = *(void *)this >> 16;
    unint64_t v3 = *(void *)this & 0xFFFFFF0000000000;
    uint64_t v4 = *(void *)this & 0xFF00000000;
  }
  else
  {
    LOWORD(v2) = *(_WORD *)this;
    if (a2 > 0x3E7 || *(__int16 *)this > (int)a2)
    {
      BOOL v5 = a2 == -1;
      if (a2 == -1) {
        LOWORD(a2) = -1;
      }
      else {
        LOWORD(a2) = 1;
      }
      if (!v5) {
        LOWORD(v2) = 274;
      }
      unint64_t v3 = 0;
      uint64_t v4 = 0;
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = 0;
    }
  }
  return v4 | v3 | (unsigned __int16)v2 | ((unsigned __int16)a2 << 16);
}

void icu::number::IntegerWidth::apply(icu::number::IntegerWidth *this, icu::number::impl::DecimalQuantity *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*((unsigned char *)this + 8))
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      int v6 = *((__int16 *)this + 1);
      if (v6 == -1)
      {
        int v8 = *(__int16 *)this;
        icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)a2, v8);
      }
      else
      {
        if (*((unsigned char *)this + 4) && (int)icu::number::impl::DecimalQuantity::getMagnitude(a2) > v6) {
          *a3 = U_ILLEGAL_ARGUMENT_ERROR;
        }
        icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)a2, *(__int16 *)this);
        int v7 = *((__int16 *)this + 1);
        icu::number::impl::DecimalQuantity::applyMaxInteger(a2, v7);
      }
    }
  }
}

BOOL icu::number::IntegerWidth::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void *sub_18C96EE48(void *a1, icu::MeasureUnit *this, _DWORD *a3, const char *a4, uint64_t a5, uint64_t a6, void *a7, int *a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*icu::MeasureUnit::getType(this))
  {
    bzero(v23, 0x2C0uLL);
    for (uint64_t i = 0; i != 704; i += 64)
    {
      int v17 = &v23[i];
      *(void *)int v17 = &unk_1EDA47700;
      *((_WORD *)v17 + 4) = 2;
    }
    sub_18C96EFFC((uint64_t)a1, this, a3, a4, (uint64_t)v23, a8);
    sub_18C96F768(a1, this, (uint64_t)v23, a8);
    unint64_t v18 = *a8;
    if ((int)v18 <= 0)
    {
      a7[106] = a5;
      a7[107] = a6;
      sub_18C96FC10((uint64_t)a7, (uint64_t)v23, 43, (UErrorCode *)a8);
      unint64_t v18 = v25;
      if ((v25 & 1) == 0)
      {
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v22, &v24);
        a7[108] = sub_18C96FDE0((icu::UnicodeString *)v22, (UErrorCode)*a8);
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
      }
    }
    for (uint64_t j = 640; j != -64; j -= 64)
      uint64_t result = icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v23[j]);
  }
  else
  {
    uint64_t result = (void *)sub_18C96FF2C((uint64_t)a1, this, a3, a4, (uint64_t)a7, (UErrorCode *)a8);
    a7[106] = a5;
    a7[107] = a6;
  }
  return result;
}

void sub_18C96EFFC(uint64_t a1, icu::MeasureUnit *a2, _DWORD *a3, const char *a4, uint64_t a5, int *a6)
{
  uint64_t v12 = 0;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  v56[0] = &unk_1EDA4F260;
  v56[1] = a5;
  do
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a5 + v12));
    v12 += 64;
  }
  while (v12 != 704);
  uint64_t v13 = ures_open("icudt74l-unit", *(char **)(a1 + 40), a6);
  if (*a6 > 0) {
    goto LABEL_41;
  }
  memset(&v79[1], 0, 48);
  uint64_t v80 = 0;
  v79[0] = (char *)&v79[1] + 5;
  LODWORD(v79[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v54, "/");
  icu::CharString::append((icu::CharString *)v79, v54, v55, (UErrorCode *)a6);
  Type = icu::MeasureUnit::getType(a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v52, Type);
  icu::CharString::append((icu::CharString *)v79, v52, v53, (UErrorCode *)a6);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v50, "/");
  icu::CharString::append((icu::CharString *)v79, v50, v51, (UErrorCode *)a6);
  uint64_t v15 = ures_open("ICUDATA", "metadata", a6);
  UErrorCode v49 = *a6;
  uint64_t v78 = 0;
  memset(v77, 0, sizeof(v77));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v77);
  memset(&v76[1], 0, 56);
  v76[0] = (char *)&v76[1] + 5;
  LODWORD(v76[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v47, "alias/unit/");
  icu::CharString::append((icu::CharString *)v76, v47, v48, &v49);
  Subtype = icu::MeasureUnit::getSubtype(a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v45, Subtype);
  icu::CharString::append((icu::CharString *)v76, v45, v46, &v49);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v43, "/replacement");
  icu::CharString::append((icu::CharString *)v76, v43, v44, &v49);
  ures_getByKeyWithFallback(v15, (char *)v76[0], (uint64_t)v77, &v49);
  memset(&__s[1], 0, 56);
  __s[0] = (char *)&__s[1] + 5;
  LODWORD(__s[1]) = 40;
  if (v49 <= U_ZERO_ERROR)
  {
    memset(&v64[1], 0, 56);
    v64[0] = (char *)&unk_1EDA47700;
    LOWORD(v64[1]) = 2;
    LODWORD(v59) = 0;
    uint64_t String = ures_getString((uint64_t)v77, (int *)&v59, a6);
    if (*a6 <= 0)
    {
      long long v70 = (UChar *)String;
      icu::UnicodeString::setTo((icu::UnicodeString *)v64, 1, (const UChar **)&v70, (int)v59);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v64);
    }
    icu::CharString::appendInvariantChars((icu::CharString *)__s, (const icu::UnicodeString *)v64, (UErrorCode *)a6);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v64);
  }
  else
  {
    int v17 = icu::MeasureUnit::getSubtype(a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v41, v17);
    icu::CharString::append((icu::CharString *)__s, v41, v42, (UErrorCode *)a6);
  }
  uint64_t v20 = __s[0];
  int v21 = strlen(__s[0]);
  int v22 = v21;
  if (v21 >= 8 && !strcmp(&__s[0][v21 - 7], "-person")) {
    v22 -= 7;
  }
  icu::CharString::append((icu::CharString *)v79, v20, v22, (UErrorCode *)a6);
  if (*a3 != 2)
  {
    UErrorCode v40 = *a6;
    long long v71 = 0u;
    long long v73 = 0u;
    long long v72 = 0u;
    long long v70 = (UChar *)((char *)&v71 + 5);
    LODWORD(v71) = 40;
    uint64_t v74 = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v38, "units");
    icu::CharString::append((icu::CharString *)&v70, v38, v39, &v40);
    icu::CharString::append((icu::CharString *)&v70, (const char *)v79[0], v80, &v40);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v36, "/gender");
    icu::CharString::append((icu::CharString *)&v70, v36, v37, &v40);
    uint64_t v69 = 0;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    memset(v64, 0, sizeof(v64));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v64);
    ures_getByKeyWithFallback(v13, (char *)v70, (uint64_t)v64, &v40);
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    uint64_t v63 = 0;
    long long v59 = &unk_1EDA47700;
    LOWORD(v60) = 2;
    int v58 = 0;
    uint64_t v23 = ures_getString((uint64_t)v64, &v58, (int *)&v40);
    if (v40 <= U_ZERO_ERROR)
    {
      long long v57 = v23;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v59, 1, &v57, v58);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v59);
    }
    icu::UnicodeString::operator=((icu::UnicodeString *)(a5 + 640), (icu::UnicodeString *)&v59);
    icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v59);
    icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v64);
    if (BYTE4(v71)) {
      uprv_free(v70);
    }
  }
  memset(&v64[1], 0, 56);
  v64[0] = (char *)&v64[1] + 5;
  LODWORD(v64[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v34, "units");
  icu::CharString::append((icu::CharString *)v64, v34, v35, (UErrorCode *)a6);
  if (*a3 == 1)
  {
    unsigned __int16 v25 = "Short";
    uint64_t v26 = v32;
    unint64_t v27 = (icu::StringPiece *)v32;
  }
  else
  {
    if (*a3) {
      goto LABEL_24;
    }
    unsigned __int16 v25 = "Narrow";
    uint64_t v26 = v33;
    unint64_t v27 = (icu::StringPiece *)v33;
  }
  icu::StringPiece::StringPiece(v27, v25);
  icu::CharString::append((icu::CharString *)v64, *(const char **)v26, *((_DWORD *)v26 + 2), (UErrorCode *)a6);
LABEL_24:
  icu::CharString::append((icu::CharString *)v64, (const char *)v79[0], v80, (UErrorCode *)a6);
  if (*a3 == 2)
  {
    if (*a4)
    {
      long long v71 = 0u;
      long long v73 = 0u;
      long long v72 = 0u;
      long long v70 = (UChar *)((char *)&v71 + 5);
      LODWORD(v71) = 40;
      uint64_t v74 = 0;
      icu::CharString::append((icu::CharString *)&v70, v64[0], (int)v64[7], (UErrorCode *)a6);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v30, "/case/");
      icu::CharString::append((icu::CharString *)&v70, v30, v31, (UErrorCode *)a6);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v28, a4);
      icu::CharString::append((icu::CharString *)&v70, v28, v29, (UErrorCode *)a6);
      LODWORD(v59) = 0;
      ures_getAllChildrenWithFallback(v13, (char *)v70, (uint64_t)v56, (int *)&v59);
      if (BYTE4(v71)) {
        uprv_free(v70);
      }
    }
  }
  LODWORD(v70) = 0;
  ures_getAllChildrenWithFallback(v13, v64[0], (uint64_t)v56, (int *)&v70);
  if (*a3 == 1 && (int)v70 >= 1) {
    *a6 = (int)v70;
  }
  if (BYTE4(v64[1])) {
    uprv_free(v64[0]);
  }
  if (BYTE4(__s[1])) {
    uprv_free(__s[0]);
  }
  if (BYTE4(v76[1])) {
    uprv_free(v76[0]);
  }
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v77);
  if (v15) {
    ures_close(v15);
  }
  if (BYTE4(v79[1])) {
    uprv_free(v79[0]);
  }
LABEL_41:
  if (v13) {
    ures_close(v13);
  }
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v56);
}

void *sub_18C96F768(void *result, icu::MeasureUnitImpl *a2, uint64_t a3, int *a4)
{
  v45[17] = *(void **)MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a3 + 648))
  {
    uint64_t v7 = (uint64_t)result;
    memset(v35, 0, sizeof(v35));
    icu::MeasureUnit::getMeter((uint64_t)v42);
    sub_18C972720(v7, (icu::MeasureUnit *)v42, a4, (uint64_t)v35);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v42);
    uint64_t v9 = (void *)WORD4(v35[0]);
    if (WORD4(v35[0]) < 0x20u) {
      return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v35);
    }
    __int16 v10 = (icu::UnicodeString *)(a3 + 640);
    memset(&v45[8], 0, 64);
    long long v44 = 0u;
    memset(v45, 0, 64);
    long long v43 = 0u;
    *(void *)&long long v44 = v45;
    DWORD2(v44) = 8;
    v45[8] = (char *)&v45[9] + 5;
    LODWORD(v45[9]) = 40;
    __int16 v11 = icu::MeasureUnitImpl::forMeasureUnit(a2, (const icu::MeasureUnit *)&v43, (icu::MeasureUnitImpl *)a4, v8);
    if (*(_DWORD *)v11 == 2)
    {
      *a4 = 5;
      *(void *)&long long v31 = &unk_1EDA47700;
      WORD4(v31) = 2;
      goto LABEL_53;
    }
    uint64_t v12 = v11;
    if (*(_DWORD *)v11 != 1)
    {
      int v15 = 0;
LABEL_13:
      uint64_t v16 = *(icu::SingleUnitImpl **)(*((void *)v12 + 2) + 8 * v15);
      int v17 = *((_DWORD *)v16 + 2);
      if (v17 < 0) {
        int v17 = -v17;
      }
      if (v17 != 1)
      {
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        icu::Locale::Locale((icu::Locale *)v37, v7);
        sub_18C9729A0((uint64_t)v37, "power", a4, (icu::UnicodeString *)&v31);
        icu::Locale::~Locale((icu::Locale *)v37);
        LODWORD(v19) = WORD4(v31) >> 5;
        if ((SWORD4(v31) & 0x8000u) == 0) {
          unint64_t v19 = v19;
        }
        else {
          unint64_t v19 = HIDWORD(v31);
        }
        if (v19 != 1) {
          goto LABEL_53;
        }
        icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v31);
        int v20 = *((_DWORD *)v16 + 2);
        if (v20 < 0) {
          int v20 = -v20;
        }
        if (v20 != 1)
        {
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          icu::Locale::Locale((icu::Locale *)v36, v7);
          sub_18C9729A0((uint64_t)v36, "prefix", a4, (icu::UnicodeString *)&v31);
          icu::Locale::~Locale((icu::Locale *)v36);
          LODWORD(v21) = WORD4(v31) >> 5;
          if ((SWORD4(v31) & 0x8000u) == 0) {
            unint64_t v21 = v21;
          }
          else {
            unint64_t v21 = HIDWORD(v31);
          }
          if (v21 != 1) {
            goto LABEL_53;
          }
          icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v31);
        }
      }
      SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(v16);
      icu::StringPiece::StringPiece((icu::StringPiece *)v29, SimpleUnitID);
      icu::MeasureUnit::forIdentifier(v29[0], v29[1], a4, (uint64_t)v30);
      sub_18C972720(v7, (icu::MeasureUnit *)v30, a4, (uint64_t)&v31);
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v30);
LABEL_53:
      if (BYTE4(v45[9])) {
        uprv_free(v45[8]);
      }
      sub_18C885AFC((uint64_t)&v43 + 8);
      icu::UnicodeString::operator=(v10, (icu::UnicodeString *)&v31);
      icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v31);
      return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v35);
    }
    int v13 = *((_DWORD *)v11 + 2);
    int v14 = v13 - 1;
    if ((*(_DWORD *)(*(void *)(*((void *)v11 + 2) + 8 * (v13 - 1)) + 8) & 0x80000000) == 0)
    {
      int v15 = 0;
      goto LABEL_7;
    }
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    icu::Locale::Locale((icu::Locale *)v42, v7);
    sub_18C9729A0((uint64_t)v42, "per", a4, (icu::UnicodeString *)&v38);
    icu::Locale::~Locale((icu::Locale *)v42);
    if (SWORD4(v38) < 0)
    {
      if (HIDWORD(v38) == 1) {
        goto LABEL_31;
      }
    }
    else if ((WORD4(v38) & 0xFFE0) == 0x20)
    {
LABEL_31:
      if ((BYTE8(v38) & 2) != 0) {
        int v22 = (_WORD *)((unint64_t)&v38 | 0xA);
      }
      else {
        int v22 = (_WORD *)*((void *)&v39 + 1);
      }
      if (*v22 == 49)
      {
        uint64_t v23 = (uint64_t *)*((void *)v12 + 2);
        int v15 = -1;
        do
        {
          uint64_t v24 = *v23++;
          ++v15;
        }
        while ((*(_DWORD *)(v24 + 8) & 0x80000000) == 0);
LABEL_59:
        icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v38);
LABEL_7:
        if (v14 > v15)
        {
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          icu::Locale::Locale((icu::Locale *)&v38, v7);
          sub_18C9729A0((uint64_t)&v38, "times", a4, (icu::UnicodeString *)&v31);
          icu::Locale::~Locale((icu::Locale *)&v38);
          if (SWORD4(v31) < 0)
          {
            if (HIDWORD(v31) != 1) {
              goto LABEL_53;
            }
          }
          else if ((WORD4(v31) & 0xFFE0) != 0x20)
          {
            goto LABEL_53;
          }
          if ((BYTE8(v31) & 2) != 0) {
            uint64_t v26 = (unsigned __int16 *)((unint64_t)&v31 | 0xA);
          }
          else {
            uint64_t v26 = (unsigned __int16 *)*((void *)&v32 + 1);
          }
          unint64_t v27 = (void *)*v26;
          if (v27 != 48) {
            int v15 = v14;
          }
          icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v31);
        }
        goto LABEL_13;
      }
      if (v13 >= 1)
      {
        uint64_t v23 = (uint64_t *)*((void *)v12 + 2);
        while ((*(_DWORD *)(v23[--v13] + 8) & 0x80000000) != 0)
        {
          if (v13 <= 0) {
            goto LABEL_51;
          }
        }
        int v15 = 0;
        int v14 = v13;
        goto LABEL_59;
      }
LABEL_51:
      *(void *)&long long v31 = &unk_1EDA47700;
      uint64_t v25 = 2;
      WORD4(v31) = 2;
LABEL_52:
      icu::UnicodeString::~UnicodeString((void *)v25, (icu::UnicodeString *)&v38);
      goto LABEL_53;
    }
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v31, (icu::UnicodeString *)&v38);
    goto LABEL_52;
  }
  return result;
}

void *sub_18C96FC10(uint64_t a1, uint64_t a2, char a3, UErrorCode *a4)
{
  uint64_t v6 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1 + 8;
  uint64_t v9 = (_OWORD *)(a1 + 88);
  for (long long i = 0uLL; ; long long i = 0uLL)
  {
    _OWORD v23[2] = i;
    v23[3] = i;
    v23[0] = i;
    v23[1] = i;
    sub_18C972110(a2, v6, a4, (uint64_t)v23);
    unint64_t v11 = *(unsigned int *)a4;
    if ((int)v11 >= 1) {
      break;
    }
    v18[0] = 0;
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    v18[1] = &unk_1EDA47700;
    LOWORD(v19) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v18, (const icu::UnicodeString *)v23, 0, 1, 0, a4);
    if (*(int *)a4 > 0)
    {
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v18);
      return icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)v23);
    }
    icu::number::impl::Modifier::Parameters::Parameters((uint64_t)v15, v7, 2, v6);
    icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)&v16, (uint64_t)v18, a3, 0, v15[0], v15[1]);
    icu::UnicodeString::operator=((icu::UnicodeString *)(v9 - 4), (icu::UnicodeString *)v17);
    long long v12 = v17[5];
    *uint64_t v9 = v17[4];
    v9[1] = v12;
    uint64_t v16 = &unk_1EDA4F4A8;
    icu::UnicodeString::~UnicodeString(&v16, (icu::UnicodeString *)v17);
    icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v16);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v18);
    uint64_t result = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v23);
    ++v6;
    uint64_t v9 = (_OWORD *)((char *)v9 + 104);
    if (v6 == 8) {
      return result;
    }
  }
  return icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)v23);
}

const char *sub_18C96FDE0(icu::UnicodeString *a1, UErrorCode a2)
{
  __s1[8] = *(char **)MEMORY[0x1E4F143B8];
  UErrorCode v12 = a2;
  unsigned int v2 = *((unsigned __int16 *)a1 + 4);
  if ((v2 & 0x8000) != 0)
  {
    if (*((_DWORD *)a1 + 3)) {
      goto LABEL_3;
    }
    return "";
  }
  if (!(v2 >> 5)) {
    return "";
  }
LABEL_3:
  memset(&__s1[1], 0, 56);
  __s1[0] = (char *)&__s1[1] + 5;
  LODWORD(__s1[1]) = 40;
  icu::CharString::appendInvariantChars((icu::CharString *)__s1, a1, &v12);
  if (v12 <= U_ZERO_ERROR)
  {
    int v4 = 0;
    int v5 = 7;
    uint64_t v6 = __s1[0];
    unint64_t v3 = "";
    while (v4 < v5)
    {
      int v7 = v5 + v4;
      if (v5 + v4 < 0 != __OFADD__(v5, v4)) {
        ++v7;
      }
      int v8 = v7 >> 1;
      uint64_t v9 = off_1E550CF48[v7 >> 1];
      int v10 = strcmp(v6, v9);
      if (v10 <= 0) {
        int v5 = v8;
      }
      else {
        int v4 = v8 + 1;
      }
      if (!v10)
      {
        unint64_t v3 = v9;
        break;
      }
    }
  }
  else
  {
    unint64_t v3 = "";
  }
  if (BYTE4(__s1[1])) {
    uprv_free(__s1[0]);
  }
  return v3;
}

uint64_t sub_18C96FF2C(uint64_t result, icu::MeasureUnitImpl *this, _DWORD *a3, const char *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (*(int *)a6 > 0) {
    return result;
  }
  if (!a5)
  {
    *a6 = U_INTERNAL_PROGRAM_ERROR;
    return result;
  }
  uint64_t v10 = result;
  long long v96 = 0u;
  memset(&v97[8], 0, 48);
  long long v98 = 0u;
  memset(v97, 0, 64);
  long long v95 = 0u;
  *(void *)&long long v96 = v97;
  DWORD2(v96) = 8;
  v97[8] = (char *)&v97[9] + 5;
  LODWORD(v97[9]) = 40;
  DWORD2(v98) = 0;
  long long v92 = 0u;
  memset(&v93[8], 0, 48);
  long long v94 = 0u;
  memset(v93, 0, 64);
  long long v91 = 0u;
  *(void *)&long long v92 = v93;
  DWORD2(v92) = 8;
  v93[8] = (char *)&v93[9] + 5;
  LODWORD(v93[9]) = 40;
  DWORD2(v94) = 0;
  long long v81 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  long long v78 = 0u;
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(this, a6, (uint64_t)&v72);
  if (*(int *)a6 <= 0)
  {
    if (SDWORD2(v72) >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        UErrorCode v12 = *(const icu::SingleUnitImpl **)(v73 + 8 * v11);
        int v13 = *((_DWORD *)v12 + 2);
        if (v13 <= 0)
        {
          *((_DWORD *)v12 + 2) = -v13;
          int v14 = (icu::MeasureUnitImpl *)&v91;
        }
        else
        {
          int v14 = (icu::MeasureUnitImpl *)&v95;
        }
        icu::MeasureUnitImpl::appendSingleUnit(v14, v12, a6);
        ++v11;
      }
      while (v11 < SDWORD2(v72));
    }
    if (BYTE12(v78)) {
      uprv_free((void *)v78);
    }
    sub_18C885AFC((uint64_t)&v72 + 8);
    uint64_t v90 = 0;
    long long v89 = 0u;
    long long v88 = 0u;
    long long v87 = 0u;
    long long v86 = 0u;
    long long v85 = 0u;
    long long v84 = 0u;
    long long v83 = 0u;
    long long v82 = 0u;
    sub_18C970654((unsigned int *)&v82, v10, "case", "per");
    bzero(&v72, 0x2C0uLL);
    for (uint64_t i = 0; i != 704; i += 64)
    {
      uint64_t v16 = (char *)&v72 + i;
      *(void *)uint64_t v16 = &unk_1EDA47700;
      *((_WORD *)v16 + 4) = 2;
    }
    icu::Locale::Locale((icu::Locale *)v71, v10);
    if (BYTE4(v82)) {
      int v17 = a4;
    }
    else {
      int v17 = (const char *)*((void *)&v82 + 1);
    }
    sub_18C970AD4((icu::MeasureUnitImpl *)&v95, (uint64_t)v71, a3, v17, (uint64_t)&v72, a6);
    icu::Locale::~Locale((icu::Locale *)v71);
    bzero(v68, 0x2C0uLL);
    for (uint64_t j = 0; j != 704; j += 64)
    {
      long long v19 = &v68[j];
      *(void *)long long v19 = &unk_1EDA47700;
      *((_WORD *)v19 + 4) = 2;
    }
    icu::Locale::Locale((icu::Locale *)v67, v10);
    if (BYTE5(v82)) {
      long long v20 = a4;
    }
    else {
      long long v20 = (const char *)*((void *)&v86 + 1);
    }
    sub_18C970AD4((icu::MeasureUnitImpl *)&v91, (uint64_t)v67, a3, v20, (uint64_t)v68, a6);
    icu::Locale::~Locale((icu::Locale *)v67);
    long long v63 = 0u;
    uint64_t v66 = 0;
    long long v65 = 0u;
    long long v64 = 0u;
    long long v62 = (UChar *)&unk_1EDA47700;
    LOWORD(v63) = 2;
    if (v70)
    {
      memset(v61, 0, sizeof(v61));
      icu::StringPiece::StringPiece((icu::StringPiece *)&v39, "per");
      sub_18C971E80(v39, v40, v10, a3, (int *)a6, (uint64_t)v61);
      v56[0] = 0;
      long long v57 = 0u;
      uint64_t v60 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      v56[1] = &unk_1EDA47700;
      LOWORD(v57) = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v56, (const icu::UnicodeString *)v61, 2, 2, 0, a6);
      if (*(int *)a6 <= 0)
      {
        memset(v55, 0, sizeof(v55));
        BOOL v21 = 1;
        sub_18C972110((uint64_t)v68, 1u, a6, (uint64_t)v55);
        v50[0] = 0;
        long long v51 = 0u;
        uint64_t v54 = 0;
        long long v52 = 0u;
        long long v53 = 0u;
        v50[1] = &unk_1EDA47700;
        LOWORD(v51) = 2;
        icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v50, (const icu::UnicodeString *)v55, 0, 1, 0, a6);
        if (*(int *)a6 <= 0)
        {
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          sub_18C972180((uint64_t)v50, (uint64_t)&v46);
          if ((SWORD4(v46) & 0x8000u) == 0) {
            int v22 = WORD4(v46) >> 5;
          }
          else {
            int v22 = HIDWORD(v46);
          }
          int v38 = v22;
          if ((BYTE8(v46) & 0x11) != 0)
          {
            uint64_t v23 = 0;
          }
          else if ((BYTE8(v46) & 2) != 0)
          {
            uint64_t v23 = (unsigned __int16 *)((unint64_t)&v46 | 0xA);
          }
          else
          {
            uint64_t v23 = (unsigned __int16 *)*((void *)&v47 + 1);
          }
          uint64_t v24 = sub_18C9721CC(v23, &v38);
          memset(v45, 0, sizeof(v45));
          int v37 = v24;
          icu::UnicodeString::UnicodeString(v45, 0, &v37);
          icu::UnicodeString::UnicodeString((uint64_t)v44, (uint64_t)L"{0}");
          icu::SimpleFormatter::format((icu::SimpleFormatter *)v56, (const icu::UnicodeString *)v44, (const icu::UnicodeString *)v45, (icu::UnicodeString *)&v62, a6);
          icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v44);
          uint64_t v26 = (void *)*(unsigned int *)a6;
          BOOL v21 = (int)v26 > 0;
          icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v45);
          icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v46);
        }
        icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v50);
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v55);
      }
      else
      {
        BOOL v21 = 1;
      }
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v56);
      icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v61);
      if (v21) {
        goto LABEL_48;
      }
    }
    else
    {
      icu::UnicodeString::operator=(&v62, &v69);
    }
    int v31 = (unsigned __int16)v63 >> 5;
    if ((v63 & 0x8000u) != 0) {
      int v31 = DWORD1(v63);
    }
    if (v31)
    {
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v43, &v62);
      sub_18C97229C(a5, (uint64_t)&v72, (icu::UnicodeString *)v43, 43, a6);
      icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v43);
    }
    else
    {
      sub_18C96FC10(a5, (uint64_t)&v72, 43, a6);
    }
    icu::Locale::Locale((icu::Locale *)v41, v10);
    sub_18C972588((icu::Locale *)v41, "per", (uint64_t)&v72, (uint64_t)v68, (int *)a6, (icu::UnicodeString *)v42);
    *(void *)(a5 + 864) = sub_18C96FDE0((icu::UnicodeString *)v42, *a6);
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v42);
    icu::Locale::~Locale((icu::Locale *)v41);
LABEL_48:
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v62);
    for (uint64_t k = 640; k != -64; k -= 64)
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v68[k]);
    for (uint64_t m = 640; m != -64; m -= 64)
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)((char *)&v72 + m));
    if (BYTE4(v87)) {
      uprv_free(*((void **)&v86 + 1));
    }
    if (BYTE4(v83)) {
      uprv_free(*((void **)&v82 + 1));
    }
    goto LABEL_56;
  }
  if (BYTE12(v78)) {
    uprv_free((void *)v78);
  }
  sub_18C885AFC((uint64_t)&v72 + 8);
LABEL_56:
  if (BYTE4(v93[9])) {
    uprv_free(v93[8]);
  }
  sub_18C885AFC((uint64_t)&v91 + 8);
  if (BYTE4(v97[9])) {
    uprv_free(v97[8]);
  }
  return sub_18C885AFC((uint64_t)&v95 + 8);
}

unsigned int *sub_18C970654(unsigned int *a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  *((_WORD *)a1 + 2) = 0;
  *((void *)a1 + 1) = (char *)a1 + 21;
  int v8 = (icu::CharString *)(a1 + 2);
  a1[4] = 40;
  *((_WORD *)a1 + 10) = 0;
  a1[16] = 0;
  *((void *)a1 + 9) = (char *)a1 + 85;
  uint64_t v9 = (icu::CharString *)(a1 + 18);
  a1[20] = 40;
  *((_WORD *)a1 + 42) = 0;
  a1[32] = 0;
  uint64_t v45 = 0;
  memset(v44, 0, sizeof(v44));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v44);
  uint64_t v43 = 0;
  memset(v42, 0, sizeof(v42));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v42);
  ures_openDirectFillIn((uint64_t)v44, 0, "grammaticalFeatures", (int *)a1);
  ures_getByKey((uint64_t)v44, "grammaticalData", (uint64_t)v44, (int *)a1);
  ures_getByKey((uint64_t)v44, "derivations", (uint64_t)v44, (int *)a1);
  if ((int)*a1 <= 0)
  {
    unsigned int v25 = 0;
    ures_getByKey((uint64_t)v44, (const char *)(a2 + 8), (uint64_t)v42, (int *)&v25);
    if (v25 == 2) {
      ures_getByKey((uint64_t)v44, "root", (uint64_t)v42, (int *)a1);
    }
    else {
      *a1 = v25;
    }
    ures_getByKey((uint64_t)v42, "component", (uint64_t)v42, (int *)a1);
    ures_getByKey((uint64_t)v42, a3, (uint64_t)v42, (int *)a1);
    ures_getByKey((uint64_t)v42, a4, (uint64_t)v42, (int *)a1);
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    uint64_t v41 = 0;
    int v37 = &unk_1EDA47700;
    LOWORD(v38) = 2;
    LODWORD(v27) = 0;
    StringByIndex = ures_getStringByIndex((uint64_t)v42, 0, (int *)&v27, (UErrorCode *)a1);
    if ((int)*a1 <= 0)
    {
      long long v32 = StringByIndex;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v37, 1, &v32, (int)v27);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v37);
    }
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v36 = 0;
    long long v32 = (const UChar *)&unk_1EDA47700;
    LOWORD(v33) = 2;
    int v26 = 0;
    uint64_t v11 = ures_getStringByIndex((uint64_t)v42, 1, &v26, (UErrorCode *)a1);
    if ((int)*a1 <= 0)
    {
      unint64_t v27 = v11;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v32, 1, &v27, v26);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v32);
    }
    uint64_t v12 = *a1;
    if ((int)v12 <= 0)
    {
      icu::UnicodeString::UnicodeString((uint64_t)&v27, (uint64_t)"c");
      unint64_t v13 = v28;
      if (v28)
      {
        int v17 = (v38 & 1) == 0;
      }
      else
      {
        if ((v38 & 0x8000u) == 0) {
          int32_t v14 = (unsigned __int16)v38 >> 5;
        }
        else {
          int32_t v14 = DWORD1(v38);
        }
        if ((v28 & 0x8000u) == 0) {
          int v15 = v28 >> 5;
        }
        else {
          int v15 = v30;
        }
        if ((v28 & 2) != 0) {
          uint64_t v16 = v29;
        }
        else {
          uint64_t v16 = v31;
        }
        int v17 = icu::UnicodeString::doCompare((uint64_t)&v37, 0, v14, (uint64_t)v16, v15 & (v15 >> 31), v15 & ~(v15 >> 31));
      }
      icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v27);
      if (v17)
      {
        *((unsigned char *)a1 + 4) = 0;
        icu::CharString::appendInvariantChars(v8, (const icu::UnicodeString *)&v37, (UErrorCode *)a1);
      }
      else
      {
        *((unsigned char *)a1 + 4) = 1;
      }
      icu::UnicodeString::UnicodeString((uint64_t)&v27, (uint64_t)"c");
      unint64_t v18 = v28;
      if (v28)
      {
        int v22 = (v33 & 1) == 0;
      }
      else
      {
        if ((v33 & 0x8000u) == 0) {
          int32_t v19 = (unsigned __int16)v33 >> 5;
        }
        else {
          int32_t v19 = DWORD1(v33);
        }
        if ((v28 & 0x8000u) == 0) {
          int v20 = v28 >> 5;
        }
        else {
          int v20 = v30;
        }
        if ((v28 & 2) != 0) {
          BOOL v21 = v29;
        }
        else {
          BOOL v21 = v31;
        }
        int v22 = icu::UnicodeString::doCompare((uint64_t)&v32, 0, v19, (uint64_t)v21, v20 & (v20 >> 31), v20 & ~(v20 >> 31));
      }
      icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v27);
      if (v22)
      {
        *((unsigned char *)a1 + 5) = 0;
        icu::CharString::appendInvariantChars(v9, (const icu::UnicodeString *)&v32, (UErrorCode *)a1);
      }
      else
      {
        uint64_t v12 = 1;
        *((unsigned char *)a1 + 5) = 1;
      }
    }
    icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v32);
    icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v37);
  }
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v42);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v44);
  return a1;
}

void sub_18C970AD4(icu::MeasureUnitImpl *this, uint64_t a2, _DWORD *a3, const char *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  UErrorCode v6 = *a6;
  if (*(int *)a6 <= 0)
  {
    if (*(_DWORD *)this == 2)
    {
      *a6 = U_UNSUPPORTED_ERROR;
      return;
    }
    int v13 = *((_DWORD *)this + 38);
    if (!v13)
    {
      icu::MeasureUnitImpl::serialize(this, a6);
      UErrorCode v6 = *a6;
      int v13 = *((_DWORD *)this + 38);
    }
    if (v6 <= U_ZERO_ERROR && v13 != 0)
    {
      memset(v123, 0, sizeof(v123));
      icu::MeasureUnit::MeasureUnit((uint64_t)v123);
      int v108 = (icu::Locale *)a2;
      if (icu::MeasureUnit::findBySubType(*((const char **)this + 12), *((_DWORD *)this + 38), (icu::MeasureUnit *)v123))
      {
        icu::MeasureUnit::MeasureUnit((uint64_t)&v149);
        char v15 = (*(uint64_t (**)(void *, UChar **))(v123[0] + 32))(v123, &v149);
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v149);
        if ((v15 & 1) == 0)
        {
          sub_18C96EFFC((uint64_t)v108, (icu::MeasureUnit *)v123, a3, a4, a5, (int *)a6);
          sub_18C96F768(v108, (icu::MeasureUnitImpl *)v123, a5, (int *)a6);
        }
        goto LABEL_215;
      }
      memset(v175, 0, sizeof(v175));
      icu::StringPiece::StringPiece((icu::StringPiece *)&v121, "times");
      sub_18C971E80(v121, v122, a2, a3, (int *)a6, (uint64_t)v175);
      v170[0] = 0;
      long long v171 = 0u;
      uint64_t v174 = 0;
      long long v172 = 0u;
      long long v173 = 0u;
      v170[1] = &unk_1EDA47700;
      LOWORD(v171) = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v170, (const icu::UnicodeString *)v175, 2, 2, 0, a6);
      if (*(int *)a6 > 0)
      {
LABEL_214:
        icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v170);
        icu::UnicodeString::~UnicodeString(v103, (icu::UnicodeString *)v175);
LABEL_215:
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v123);
        return;
      }
      int v105 = a4;
      uint64_t v16 = 0;
      int v17 = (icu::UnicodeString *)a5;
      memset(v169, 0, 44);
      do
      {
        if (v16 == 20)
        {
          if (*(_WORD *)(a5 + 328)) {
            __int16 v18 = 2;
          }
          else {
            __int16 v18 = *(_WORD *)(a5 + 328) & 0x1F;
          }
          *(_WORD *)(a5 + 328) = v18;
        }
        else
        {
          icu::UnicodeString::setToBogus(v17);
        }
        *(_DWORD *)((char *)v169 + v16) = 0;
        v16 += 4;
        int v17 = (icu::UnicodeString *)((char *)v17 + 64);
      }
      while (v16 != 44);
      uint64_t v168 = 0;
      long long v167 = 0u;
      long long v166 = 0u;
      long long v165 = 0u;
      long long v164 = 0u;
      memset(v163, 0, sizeof(v163));
      sub_18C970654((unsigned int *)v163, a2, "plural", "times");
      uint64_t v162 = 0;
      long long v161 = 0u;
      long long v160 = 0u;
      long long v159 = 0u;
      long long v158 = 0u;
      memset(v157, 0, sizeof(v157));
      sub_18C970654((unsigned int *)v157, a2, "case", "times");
      uint64_t v156 = 0;
      memset(v155, 0, sizeof(v155));
      sub_18C970654((unsigned int *)v155, a2, "case", "power");
      int32_t v19 = this;
      LODWORD(v20) = *((_DWORD *)this + 2);
      if ((int)v20 < 1)
      {
        int v107 = 0;
        long long v95 = 0uLL;
        goto LABEL_197;
      }
      uint64_t v21 = 0;
      int v107 = 0;
      uint64_t v104 = "";
      int v109 = a3;
      while (1)
      {
        if (v21 >= (int)v20 - 1)
        {
          if (BYTE5(v163[0])) {
            uint64_t v24 = (icu::StandardPlural *)v104;
          }
          else {
            uint64_t v24 = (icu::StandardPlural *)*((void *)&v164 + 1);
          }
          int v26 = v105;
          if (!BYTE5(v157[0])) {
            int v26 = (const char *)*((void *)&v158 + 1);
          }
          long long v113 = v26;
        }
        else
        {
          uint64_t v23 = v104;
          int v22 = v105;
          if (BYTE4(v163[0])) {
            uint64_t v24 = (icu::StandardPlural *)v104;
          }
          else {
            uint64_t v24 = (icu::StandardPlural *)*((void *)&v163[0] + 1);
          }
          unsigned int v25 = (const char *)*((void *)&v157[0] + 1);
          if (BYTE4(v157[0])) {
            unsigned int v25 = v105;
          }
          long long v113 = v25;
          if (!BYTE5(v163[0])) {
            uint64_t v23 = (const char *)*((void *)&v164 + 1);
          }
          if (!BYTE5(v157[0])) {
            int v22 = (const char *)*((void *)&v158 + 1);
          }
          uint64_t v104 = v23;
          int v105 = v22;
        }
        __int16 v106 = (char *)v21;
        unint64_t v27 = *(icu::SingleUnitImpl **)(*((void *)v19 + 2) + 8 * v21);
        memset(v120, 0, sizeof(v120));
        icu::MeasureUnit::MeasureUnit((uint64_t)v120);
        SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(v27);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v118, SimpleUnitID);
        if (!icu::MeasureUnit::findBySubType(v118, v119, (icu::MeasureUnit *)v120))
        {
          *a6 = U_UNSUPPORTED_ERROR;
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v120);
LABEL_213:
          sub_18C9726DC((uint64_t)v155);
          sub_18C9726DC((uint64_t)v157);
          sub_18C9726DC((uint64_t)v163);
          goto LABEL_214;
        }
        sub_18C972720(a2, (icu::MeasureUnit *)v120, (int *)a6, (uint64_t)v154);
        int v29 = sub_18C96FDE0((icu::UnicodeString *)v154, *a6);
        icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v154);
        int v115 = *((_DWORD *)v27 + 2);
        bzero(&v149, 0x2C0uLL);
        for (uint64_t i = 0; i != 88; i += 8)
        {
          long long v32 = &(&v149)[i];
          *long long v32 = (UChar *)&unk_1EDA47700;
          *((_WORD *)v32 + 4) = 2;
        }
        long long v33 = 0uLL;
        if (v115 != 1) {
          break;
        }
LABEL_71:
        int v44 = *((_DWORD *)v27 + 1);
        uint64_t v148 = 0;
        long long v146 = v33;
        long long v147 = v33;
        long long v145 = v33;
        v144 = &unk_1EDA47700;
        LOWORD(v145) = 2;
        int v110 = v44;
        if (v44 != 30)
        {
          long long v140 = v33;
          long long v141 = v33;
          long long v139 = v33;
          v138 = (char *)&v139 + 5;
          LODWORD(v139) = 40;
          uint64_t v142 = 0;
          int PrefixBase = umeas_getPrefixBase(v44);
          icu::CharString::appendNumber((icu::CharString *)&v138, PrefixBase, a6);
          icu::CharString::append((icu::CharString *)&v138, 112, a6);
          int PrefixPower = umeas_getPrefixPower(v110);
          icu::CharString::appendNumber((icu::CharString *)&v138, PrefixPower, a6);
          sub_18C971E80(v138, v142, a2, a3, (int *)a6, (uint64_t)v132);
          icu::UnicodeString::operator=((icu::UnicodeString *)&v144, (icu::UnicodeString *)v132);
          icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)v132);
          *((_DWORD *)v27 + 1) = 30;
          if (BYTE4(v139)) {
            uprv_free(v138);
          }
        }
        bzero(&v138, 0x2C0uLL);
        for (uint64_t j = 0; j != 88; j += 8)
        {
          long long v49 = &(&v138)[j];
          void *v49 = (char *)&unk_1EDA47700;
          *((_WORD *)v49 + 4) = 2;
        }
        icu::SingleUnitImpl::build(v27, a6, (uint64_t)v132);
        sub_18C96EFFC(a2, (icu::MeasureUnit *)v132, a3, v113, (uint64_t)&v138, (int *)a6);
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v132);
        long long v51 = (void *)*(unsigned int *)a6;
        if ((int)v51 > 0) {
          goto LABEL_186;
        }
        long long v52 = 0uLL;
        if ((v143[8] & 1) == 0)
        {
          memset((char *)v132 + 8, 0, 56);
          *(void *)&v132[0] = &unk_1EDA47700;
          WORD4(v132[0]) = 2;
          if (v110 != 30)
          {
            icu::Locale::Locale((icu::Locale *)v136, a2);
            sub_18C972588((icu::Locale *)v136, "prefix", (uint64_t)&v138, 0, (int *)a6, (icu::UnicodeString *)v137);
            icu::UnicodeString::operator=((icu::UnicodeString *)v143, (icu::UnicodeString *)v137);
            icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)v137);
            icu::Locale::~Locale((icu::Locale *)v136);
            long long v52 = 0uLL;
          }
          if (v115 != 1)
          {
            icu::Locale::Locale((icu::Locale *)v135, a2);
            sub_18C972588((icu::Locale *)v135, "power", (uint64_t)&v138, 0, (int *)a6, (icu::UnicodeString *)v137);
            icu::UnicodeString::operator=((icu::UnicodeString *)v143, (icu::UnicodeString *)v137);
            icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)v137);
            icu::Locale::~Locale((icu::Locale *)v135);
            long long v52 = 0uLL;
          }
          *(_OWORD *)&v137[48] = v52;
          *(_OWORD *)&v137[32] = v52;
          *(_OWORD *)&v137[16] = v52;
          *(_OWORD *)v137 = v52;
          icu::Locale::Locale((icu::Locale *)v134, a2);
          sub_18C9729A0((uint64_t)v134, "times", (int *)a6, (icu::UnicodeString *)v137);
          icu::Locale::~Locale((icu::Locale *)v134);
          if ((*(__int16 *)&v137[8] & 0x80000000) == 0)
          {
            if ((*(_WORD *)&v137[8] & 0xFFE0) == 0x20) {
              goto LABEL_84;
            }
LABEL_91:
            unint64_t v56 = *(unsigned __int16 *)(a5 + 648);
            if (v56)
            {
              long long v57 = (UChar **)v137;
              goto LABEL_94;
            }
LABEL_95:
            icu::UnicodeString::~UnicodeString((void *)v56, (icu::UnicodeString *)v137);
            icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)v132);
            long long v52 = 0uLL;
            goto LABEL_96;
          }
          if (*(_DWORD *)&v137[12] != 1) {
            goto LABEL_91;
          }
LABEL_84:
          int v55 = (unsigned __int16 *)&v137[10];
          if ((v137[8] & 2) == 0) {
            int v55 = *(unsigned __int16 **)&v137[24];
          }
          unint64_t v56 = *v55;
          if (v56 == 49)
          {
            unint64_t v56 = (*((_DWORD *)this + 2) - 1);
            long long v57 = (UChar **)v143;
            if (v106 != (char *)v56) {
              goto LABEL_95;
            }
          }
          else
          {
            if (v56 != 48) {
              goto LABEL_95;
            }
            long long v57 = (UChar **)v143;
            unint64_t v56 = (unint64_t)v106;
            if (v106) {
              goto LABEL_95;
            }
          }
LABEL_94:
          icu::UnicodeString::operator=((UChar **)(a5 + 640), v57);
          goto LABEL_95;
        }
LABEL_96:
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        UErrorCode v112 = v24;
        while (1)
        {
          if ((*(_WORD *)(a5 + v59 + 8) & 1) == 0)
          {
            unsigned int v61 = v60;
            goto LABEL_101;
          }
          long long v51 = (void *)*(unsigned __int16 *)((char *)&v139 + v59);
          if ((v51 & 1) == 0) {
            break;
          }
LABEL_181:
          ++v60;
          v59 += 64;
          if (v59 == 512)
          {
            int v43 = 0;
            goto LABEL_187;
          }
        }
        sub_18C972110(a5, v60, a6, (uint64_t)v132);
        icu::UnicodeString::operator=((icu::UnicodeString *)(a5 + v59), (icu::UnicodeString *)v132);
        icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)v132);
        long long v52 = 0uLL;
        long long v51 = (void *)*(unsigned int *)a6;
        unsigned int v61 = v60;
        if ((int)v51 > 0) {
          goto LABEL_186;
        }
LABEL_101:
        if (*(unsigned char *)v24)
        {
          unsigned int v63 = sub_18C972BF4(v24, (char *)a6, v50);
          long long v52 = 0uLL;
          unsigned int v61 = v63;
        }
        *(void *)&v137[56] = 0;
        *(_OWORD *)&v137[24] = v52;
        *(_OWORD *)&v137[40] = v52;
        *(_OWORD *)&v137[8] = v52;
        *(void *)v137 = &unk_1EDA47700;
        *(_WORD *)&v137[8] = 2;
        unsigned int v114 = v61;
        sub_18C972110((uint64_t)&v138, v61, a6, (uint64_t)v132);
        if ((SWORD4(v132[0]) & 0x8000u) == 0) {
          int v64 = WORD4(v132[0]) >> 5;
        }
        else {
          int v64 = HIDWORD(v132[0]);
        }
        BOOL v65 = icu::UnicodeString::doEqualsSubstring((uint64_t)v132, 0, 3, (uint64_t)L"{0}", 0, 3);
        if ((SWORD4(v132[0]) & 0x8000u) == 0) {
          unsigned int v66 = WORD4(v132[0]) >> 5;
        }
        else {
          unsigned int v66 = HIDWORD(v132[0]);
        }
        if (v65)
        {
          if (v66 < 4)
          {
            UChar32 v68 = 0xFFFF;
          }
          else
          {
            long long v67 = (unsigned __int16 *)&v132[1];
            if ((BYTE8(v132[0]) & 2) == 0) {
              long long v67 = (unsigned __int16 *)(*((void *)&v132[1] + 1) + 6);
            }
            UChar32 v68 = *v67;
          }
          if (u_isJavaSpaceChar(v68))
          {
            if ((SWORD4(v132[0]) & 0x8000u) == 0) {
              unsigned int v73 = WORD4(v132[0]) >> 5;
            }
            else {
              unsigned int v73 = HIDWORD(v132[0]);
            }
            if (v73 < 4)
            {
              int v75 = 0xFFFF;
            }
            else
            {
              long long v74 = (unsigned __int16 *)&v132[1];
              if ((BYTE8(v132[0]) & 2) == 0) {
                long long v74 = (unsigned __int16 *)(*((void *)&v132[1] + 1) + 6);
              }
              int v75 = *v74;
            }
            icu::UnicodeString::unBogus((uint64_t)v137);
            if (*(__int16 *)&v137[8] >= 0) {
              uint64_t v78 = *(unsigned __int16 *)&v137[8] >> 5;
            }
            else {
              uint64_t v78 = *(unsigned int *)&v137[12];
            }
            icu::UnicodeString::doReplace((icu::UnicodeString *)v137, 0, v78, (const icu::UnicodeString *)v132, 4, (v64 - 4));
          }
          else
          {
            icu::UnicodeString::unBogus((uint64_t)v137);
            if (*(__int16 *)&v137[8] >= 0) {
              uint64_t v76 = *(unsigned __int16 *)&v137[8] >> 5;
            }
            else {
              uint64_t v76 = *(unsigned int *)&v137[12];
            }
            icu::UnicodeString::doReplace((icu::UnicodeString *)v137, 0, v76, (const icu::UnicodeString *)v132, 3, (v64 - 3));
            int v75 = 0;
          }
          int v79 = 2;
LABEL_161:
          icu::UnicodeString::~UnicodeString(v77, (icu::UnicodeString *)v132);
          if (!*((_DWORD *)v169 + v60))
          {
            *((_DWORD *)v169 + v60) = v79;
            int v107 = v75;
          }
          a3 = v109;
          long long v85 = 0uLL;
          uint64_t v24 = v112;
          if (v110 != 30)
          {
            *(void *)&v132[0] = 0;
            memset(&v132[1], 0, 48);
            uint64_t v133 = 0;
            *((void *)&v132[0] + 1) = &unk_1EDA47700;
            LOWORD(v132[1]) = 2;
            icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v132, (const icu::UnicodeString *)&v144, 1, 1, 0, a6);
            if (*(int *)a6 >= 1) {
              goto LABEL_184;
            }
            uint64_t v131 = 0;
            long long v129 = 0u;
            long long v130 = 0u;
            long long v128 = 0u;
            v127 = (UChar *)&unk_1EDA47700;
            LOWORD(v128) = 2;
            if (*v109 == 2) {
              icu::UnicodeString::toLower((UChar **)v137, v108);
            }
            icu::SimpleFormatter::format((icu::SimpleFormatter *)v132, (const icu::UnicodeString *)v137, (icu::UnicodeString *)&v127, a6);
            long long v86 = (void *)*(unsigned int *)a6;
            if ((int)v86 > 0) {
              goto LABEL_183;
            }
            icu::UnicodeString::operator=((UChar **)v137, &v127);
            icu::UnicodeString::~UnicodeString(v87, (icu::UnicodeString *)&v127);
            icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v132);
            long long v85 = 0uLL;
          }
          if (v115 != 1)
          {
            uint64_t v133 = 0;
            v132[2] = v85;
            v132[3] = v85;
            v132[0] = v85;
            v132[1] = v85;
            sub_18C972110((uint64_t)&v149, v114, a6, (uint64_t)&v127);
            *((void *)&v132[0] + 1) = &unk_1EDA47700;
            LOWORD(v132[1]) = 2;
            icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v132, (const icu::UnicodeString *)&v127, 1, 1, 0, a6);
            icu::UnicodeString::~UnicodeString(v88, (icu::UnicodeString *)&v127);
            if (*(int *)a6 >= 1) {
              goto LABEL_184;
            }
            uint64_t v131 = 0;
            long long v129 = 0u;
            long long v130 = 0u;
            long long v128 = 0u;
            v127 = (UChar *)&unk_1EDA47700;
            LOWORD(v128) = 2;
            if (*v109 == 2) {
              icu::UnicodeString::toLower((UChar **)v137, v108);
            }
            icu::SimpleFormatter::format((icu::SimpleFormatter *)v132, (const icu::UnicodeString *)v137, (icu::UnicodeString *)&v127, a6);
            long long v86 = (void *)*(unsigned int *)a6;
            if ((int)v86 > 0)
            {
LABEL_183:
              icu::UnicodeString::~UnicodeString(v86, (icu::UnicodeString *)&v127);
LABEL_184:
              icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v132);
              goto LABEL_185;
            }
            icu::UnicodeString::operator=((UChar **)v137, &v127);
            icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)&v127);
            icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v132);
            long long v85 = 0uLL;
          }
          if (*(__int16 *)(a5 + v59 + 8) < 0)
          {
            if (*(_DWORD *)(a5 + v59 + 12)) {
              goto LABEL_177;
            }
          }
          else if (*(unsigned __int16 *)(a5 + v59 + 8) >> 5)
          {
LABEL_177:
            *((void *)&v132[3] + 1) = 0;
            *(_OWORD *)((char *)&v132[1] + 8) = v85;
            *(_OWORD *)((char *)&v132[2] + 8) = v85;
            *(_OWORD *)((char *)v132 + 8) = v85;
            *(void *)&v132[0] = &unk_1EDA47700;
            WORD4(v132[0]) = 2;
            icu::SimpleFormatter::format((icu::SimpleFormatter *)v170, (const icu::UnicodeString *)(a5 + v59), (const icu::UnicodeString *)v137, (icu::UnicodeString *)v132, a6);
            icu::UnicodeString::operator=((UChar **)(a5 + v59), (UChar **)v132);
            icu::UnicodeString::~UnicodeString(v90, (icu::UnicodeString *)v132);
LABEL_180:
            icu::UnicodeString::~UnicodeString(v91, (icu::UnicodeString *)v137);
            long long v52 = 0uLL;
            goto LABEL_181;
          }
          icu::UnicodeString::operator=((UChar **)(a5 + v59), (UChar **)v137);
          goto LABEL_180;
        }
        if (icu::UnicodeString::doEqualsSubstring((uint64_t)v132, v66 - 3, 3, (uint64_t)L"{0}", 0, 3))
        {
          uint64_t v69 = v64 - 4;
          if ((SWORD4(v132[0]) & 0x8000u) == 0) {
            unsigned int v70 = WORD4(v132[0]) >> 5;
          }
          else {
            unsigned int v70 = HIDWORD(v132[0]);
          }
          if (v70 <= v69)
          {
            UChar32 v72 = 0xFFFF;
          }
          else
          {
            long long v71 = (char *)v132 + 10;
            if ((BYTE8(v132[0]) & 2) == 0) {
              long long v71 = (char *)*((void *)&v132[1] + 1);
            }
            UChar32 v72 = *(unsigned __int16 *)&v71[2 * (int)v69];
          }
          if (u_isJavaSpaceChar(v72))
          {
            icu::UnicodeString::unBogus((uint64_t)v137);
            if (*(__int16 *)&v137[8] >= 0) {
              uint64_t v82 = *(unsigned __int16 *)&v137[8] >> 5;
            }
            else {
              uint64_t v82 = *(unsigned int *)&v137[12];
            }
            icu::UnicodeString::doReplace((icu::UnicodeString *)v137, 0, v82, (const icu::UnicodeString *)v132, 0, v64 - 4);
            long long v77 = (char *)WORD4(v132[0]);
            if ((SWORD4(v132[0]) & 0x8000u) == 0) {
              unsigned int v83 = WORD4(v132[0]) >> 5;
            }
            else {
              unsigned int v83 = HIDWORD(v132[0]);
            }
            if (v83 <= v69)
            {
              int v79 = 4;
              int v75 = 0xFFFF;
              goto LABEL_161;
            }
            long long v77 = (char *)v132 + 10;
            if ((BYTE8(v132[0]) & 2) == 0) {
              long long v77 = (char *)*((void *)&v132[1] + 1);
            }
            int v75 = *(unsigned __int16 *)&v77[2 * v69];
          }
          else
          {
            icu::UnicodeString::unBogus((uint64_t)v137);
            if (*(__int16 *)&v137[8] >= 0) {
              uint64_t v84 = *(unsigned __int16 *)&v137[8] >> 5;
            }
            else {
              uint64_t v84 = *(unsigned int *)&v137[12];
            }
            icu::UnicodeString::doReplace((icu::UnicodeString *)v137, 0, v84, (const icu::UnicodeString *)v132, 0, (v64 - 3));
            int v75 = 0;
          }
          int v79 = 4;
          goto LABEL_161;
        }
        int32_t v80 = v64 - 2;
        int v79 = 1;
        int v81 = icu::UnicodeString::indexOf((uint64_t)v132, (uint64_t)L"{0}", 0, 3, 1, v80);
        icu::UnicodeString::operator=((UChar **)v137, (UChar **)v132);
        if (v81 == -1)
        {
          int v75 = 0;
          goto LABEL_161;
        }
        icu::UnicodeString::~UnicodeString(v77, (icu::UnicodeString *)v132);
        uint64_t v92 = 16;
        *a6 = U_UNSUPPORTED_ERROR;
LABEL_185:
        icu::UnicodeString::~UnicodeString((void *)v92, (icu::UnicodeString *)v137);
LABEL_186:
        int v43 = 1;
LABEL_187:
        for (uint64_t k = 80; k != -8; k -= 8)
          icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)&(&v138)[k]);
        icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)&v144);
LABEL_190:
        int32_t v19 = this;
        for (uint64_t m = 80; m != -8; m -= 8)
          icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&(&v149)[m]);
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v120);
        a2 = (uint64_t)v108;
        long long v95 = 0uLL;
        if (v43) {
          goto LABEL_213;
        }
        uint64_t v21 = (uint64_t)(v106 + 1);
        uint64_t v20 = *((int *)this + 2);
        if ((uint64_t)(v106 + 1) >= v20)
        {
LABEL_197:
          uint64_t v96 = 0;
          while (1)
          {
            int v97 = *(_DWORD *)((char *)v169 + v96);
            if (v97 == 4) {
              break;
            }
            if (v97 == 2)
            {
              uint64_t v153 = 0;
              long long v151 = v95;
              long long v152 = v95;
              long long v150 = v95;
              v149 = (UChar *)&unk_1EDA47700;
              LOWORD(v150) = 2;
              icu::UnicodeString::doAppend((uint64_t)&v149, (uint64_t)L"{0}", 0, 3);
              if (v107)
              {
                LOWORD(v138) = v107;
                icu::UnicodeString::doAppend((uint64_t)&v149, (uint64_t)&v138, 0, 1);
              }
              unsigned int v98 = *(unsigned __int16 *)(a5 + 8);
              int v99 = (__int16)v98;
              unsigned int v100 = v98 >> 5;
              if (v99 >= 0) {
                uint64_t v101 = v100;
              }
              else {
                uint64_t v101 = *(unsigned int *)(a5 + 12);
              }
              icu::UnicodeString::doAppend((uint64_t)&v149, (const icu::UnicodeString *)a5, 0, v101);
              icu::UnicodeString::operator=((UChar **)a5, &v149);
              icu::UnicodeString::~UnicodeString(v102, (icu::UnicodeString *)&v149);
LABEL_209:
              long long v95 = 0uLL;
            }
            v96 += 4;
            a5 += 64;
            if (v96 == 32) {
              goto LABEL_213;
            }
          }
          if (v107)
          {
            LOWORD(v149) = v107;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v149, 0, 1);
          }
          icu::UnicodeString::doAppend(a5, (uint64_t)L"{0}", 0, 3);
          goto LABEL_209;
        }
      }
      uint64_t v111 = v24;
      memset(v132, 0, sizeof(v132));
      icu::StringPiece::StringPiece((icu::StringPiece *)&v116, "compound/power");
      *(void *)&v132[0] = (char *)v132 + 13;
      DWORD2(v132[0]) = 40;
      WORD6(v132[0]) = 0;
      DWORD2(v132[3]) = 0;
      icu::CharString::append((icu::CharString *)v132, v116, v117, a6);
      icu::CharString::appendNumber((icu::CharString *)v132, v115, a6);
      uint64_t v34 = 0;
      long long v35 = *(const char **)&v132[0];
      int v36 = DWORD2(v132[3]);
      v144 = &unk_1EDA4F2A8;
      *(void *)&long long v145 = v29;
      *((void *)&v145 + 1) = v113;
      *(void *)&long long v146 = &v149;
      do
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&(&v149)[v34]);
        v34 += 8;
      }
      while (v34 != 88);
      uint64_t v37 = ures_open("icudt74l-unit", *(char **)(a2 + 40), (int *)a6);
      if (*(int *)a6 > 0)
      {
LABEL_57:
        if (v37) {
          ures_close(v37);
        }
        icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v144);
        UErrorCode v39 = *a6;
        a3 = v109;
        if (*(int *)a6 < 1)
        {
          long long v40 = v113;
          if (!BYTE4(v155[0])) {
            long long v40 = (const char *)*((void *)&v155[0] + 1);
          }
          long long v113 = v40;
          *((_DWORD *)v27 + 2) = 1;
          long long v33 = 0uLL;
        }
        else if (v39 == U_RESOURCE_TYPE_MISMATCH)
        {
          long long v33 = 0uLL;
          if (v115 >= 4) {
            *a6 = U_UNSUPPORTED_ERROR;
          }
        }
        else
        {
          long long v33 = 0uLL;
        }
        uint64_t v41 = (void *)BYTE12(v132[0]);
        if (BYTE12(v132[0]))
        {
          uprv_free(*(void **)&v132[0]);
          long long v33 = 0uLL;
        }
        BOOL v42 = v39 <= U_ZERO_ERROR;
        uint64_t v24 = v111;
        if (!v42)
        {
          int v43 = 1;
          goto LABEL_190;
        }
        goto LABEL_71;
      }
      uint64_t v142 = 0;
      long long v140 = 0u;
      long long v141 = 0u;
      long long v139 = 0u;
      v138 = (char *)&v139 + 5;
      LODWORD(v139) = 40;
      icu::StringPiece::StringPiece((icu::StringPiece *)v137, "units");
      icu::CharString::append((icu::CharString *)&v138, *(const char **)v137, *(int *)&v137[8], a6);
      if (*v109 == 1)
      {
        long long v38 = "Short";
      }
      else
      {
        if (*v109)
        {
LABEL_53:
          icu::StringPiece::StringPiece((icu::StringPiece *)&v125, "/");
          icu::CharString::append((icu::CharString *)&v138, v125, v126, a6);
          icu::CharString::append((icu::CharString *)&v138, v35, v36, a6);
          UErrorCode v124 = *a6;
          ures_getAllChildrenWithFallback(v37, v138, (uint64_t)&v144, (int *)&v124);
          if (*v109 == 1) {
            *a6 = v124;
          }
          if (BYTE4(v139)) {
            uprv_free(v138);
          }
          goto LABEL_57;
        }
        long long v38 = "Narrow";
      }
      icu::StringPiece::StringPiece((icu::StringPiece *)&v127, v38);
      icu::CharString::append((icu::CharString *)&v138, (const char *)v127, v128, a6);
      goto LABEL_53;
    }
  }
}

void sub_18C971E80(const char *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, int *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = ures_open("icudt74l-unit", *(char **)(a3 + 40), a5);
  if (*a5 >= 1)
  {
    *(void *)a6 = &unk_1EDA47700;
    *(_WORD *)(a6 + 8) = 2;
    goto LABEL_17;
  }
  memset(&v28[1], 0, 48);
  uint64_t v29 = 0;
  v28[0] = (char *)&v28[1] + 5;
  LODWORD(v28[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v26, "units");
  icu::CharString::append((icu::CharString *)v28, v26, v27, (UErrorCode *)a5);
  if (*a4 == 1)
  {
    uint64_t v12 = "Short";
    int v13 = v24;
    int32_t v14 = (icu::StringPiece *)v24;
  }
  else
  {
    if (*a4) {
      goto LABEL_8;
    }
    uint64_t v12 = "Narrow";
    int v13 = v25;
    int32_t v14 = (icu::StringPiece *)v25;
  }
  icu::StringPiece::StringPiece(v14, v12);
  icu::CharString::append((icu::CharString *)v28, *(const char **)v13, *((_DWORD *)v13 + 2), (UErrorCode *)a5);
LABEL_8:
  icu::StringPiece::StringPiece((icu::StringPiece *)&v22, "/compound/");
  icu::CharString::append((icu::CharString *)v28, v22, v23, (UErrorCode *)a5);
  icu::CharString::append((icu::CharString *)v28, a1, a2, (UErrorCode *)a5);
  int v15 = *a5;
  unsigned int v20 = 0;
  int v21 = v15;
  StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v11, (char *)v28[0], (int *)&v20, (UErrorCode *)&v21);
  int v17 = v21;
  if (v21 < 1 || *a4 == 1)
  {
    *a5 = v21;
  }
  else
  {
    LODWORD(v29) = 0;
    *(unsigned char *)v28[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v18, "unitsShort/compound/");
    icu::CharString::append((icu::CharString *)v28, v18, v19, (UErrorCode *)a5);
    icu::CharString::append((icu::CharString *)v28, a1, a2, (UErrorCode *)a5);
    StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v11, (char *)v28[0], (int *)&v20, (UErrorCode *)a5);
    int v17 = *a5;
  }
  if (v17 < 1)
  {
    icu::UnicodeString::UnicodeString(a6, (uint64_t)StringByKeyWithFallback, v20);
  }
  else
  {
    *(void *)a6 = &unk_1EDA47700;
    *(_WORD *)(a6 + 8) = 2;
  }
  if (BYTE4(v28[1])) {
    uprv_free(v28[0]);
  }
LABEL_17:
  if (v11) {
    ures_close(v11);
  }
}

icu::UnicodeString *sub_18C972110@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  uint64_t result = icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (UChar **)(a1 + ((unint64_t)a2 << 6)));
  if (*(_WORD *)(a4 + 8))
  {
    uint64_t result = icu::UnicodeString::operator=((UChar **)a4, (UChar **)(a1 + 320));
    if (*(_WORD *)(a4 + 8)) {
      *a3 = 5;
    }
  }
  return result;
}

uint64_t sub_18C972180@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 16);
  if ((v2 & 0x11) == 0)
  {
    if ((v2 & 2) != 0)
    {
      unint64_t v3 = (unsigned __int16 *)(a1 + 18);
      if ((v2 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v3 = *(unsigned __int16 **)(a1 + 32);
      if ((v2 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }
LABEL_8:
    int v4 = *(_DWORD *)(a1 + 20);
    return icu::SimpleFormatter::getTextWithNoArguments(0, v3, v4, 0, a2);
  }
  unint64_t v3 = 0;
  if ((v2 & 0x8000) != 0) {
    goto LABEL_8;
  }
LABEL_6:
  int v4 = v2 >> 5;
  return icu::SimpleFormatter::getTextWithNoArguments(0, v3, v4, 0, a2);
}

unsigned __int16 *sub_18C9721CC(unsigned __int16 *a1, int *a2)
{
  unsigned int v2 = a1;
  if (*a2 >= 1 && (u_isJavaSpaceChar(*a1) || u_isJavaSpaceChar(v2[*a2 - 1])))
  {
    uint64_t v4 = *a2;
    if ((int)v4 <= 0)
    {
      int v6 = *a2;
      LODWORD(v4) = 0;
    }
    else
    {
      uint64_t v5 = 0;
      while (u_isJavaSpaceChar(v2[v5]))
      {
        if (v4 == ++v5)
        {
          int v6 = v4;
          goto LABEL_13;
        }
      }
      int v6 = v4 + 1;
      int v7 = &v2[(int)v4 - 1];
      do
      {
        UChar32 v8 = *v7--;
        --v6;
      }
      while (u_isJavaSpaceChar(v8));
      LODWORD(v4) = v5;
    }
LABEL_13:
    *a2 = v6 - v4;
    v2 += v4;
  }
  return v2;
}

void sub_18C97229C(uint64_t a1, uint64_t a2, icu::UnicodeString *a3, char a4, UErrorCode *a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  v34[0] = 0;
  long long v35 = 0u;
  uint64_t v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  v34[1] = &unk_1EDA47700;
  LOWORD(v35) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v34, a3, 1, 1, 0, a5);
  if (*(int *)a5 <= 0)
  {
    uint64_t v10 = 0;
    uint64_t v19 = a1 + 8;
    uint64_t v11 = (_OWORD *)(a1 + 88);
    while (1)
    {
      memset(v33, 0, sizeof(v33));
      sub_18C972110(a2, v10, a5, (uint64_t)v33);
      uint64_t v12 = (void *)*(unsigned int *)a5;
      if ((int)v12 >= 1)
      {
        icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v33);
        goto LABEL_18;
      }
      uint64_t v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      unsigned __int16 v28 = (UChar *)&unk_1EDA47700;
      LOWORD(v29) = 2;
      int v13 = LOWORD(v33[2]) >> 5;
      if (SLOWORD(v33[2]) < 0) {
        int v13 = v33[3];
      }
      if (!v13) {
        break;
      }
      icu::SimpleFormatter::format((icu::SimpleFormatter *)v34, (const icu::UnicodeString *)v33, (icu::UnicodeString *)&v28, a5);
      int32_t v14 = (void *)*(unsigned int *)a5;
      if ((int)v14 <= 0) {
        goto LABEL_10;
      }
      int v15 = 1;
LABEL_13:
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v28);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v33);
      if (!v15)
      {
        uint64_t v11 = (_OWORD *)((char *)v11 + 104);
        if (v10++ != 7) {
          continue;
        }
      }
      goto LABEL_18;
    }
    icu::UnicodeString::operator=(&v28, (UChar **)a3);
LABEL_10:
    v23[0] = 0;
    uint64_t v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    v23[1] = &unk_1EDA47700;
    LOWORD(v24) = 2;
    int v15 = 1;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v23, (const icu::UnicodeString *)&v28, 0, 1, 0, a5);
    if (*(int *)a5 <= 0)
    {
      icu::number::impl::Modifier::Parameters::Parameters((uint64_t)v20, v19, 2, v10);
      icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)&v21, (uint64_t)v23, a4, 0, v20[0], v20[1]);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v11 - 4), (icu::UnicodeString *)v22);
      long long v16 = v22[5];
      *uint64_t v11 = v22[4];
      v11[1] = v16;
      int v21 = &unk_1EDA4F4A8;
      icu::UnicodeString::~UnicodeString(&v21, (icu::UnicodeString *)v22);
      icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v21);
      int v15 = 0;
    }
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v23);
    goto LABEL_13;
  }
LABEL_18:
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v34);
}

void *sub_18C972588@<X0>(icu::Locale *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, icu::UnicodeString *a6@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  icu::Locale::Locale((icu::Locale *)v16, (uint64_t)a1);
  sub_18C9729A0((uint64_t)v16, a2, a5, (icu::UnicodeString *)&v17);
  icu::Locale::~Locale((icu::Locale *)v16);
  if (SWORD4(v17) < 0)
  {
    if (HIDWORD(v17) != 1) {
      goto LABEL_11;
    }
  }
  else if ((WORD4(v17) & 0xFFE0) != 0x20)
  {
    goto LABEL_11;
  }
  if ((BYTE8(v17) & 2) != 0) {
    uint64_t v11 = (unsigned __int16 *)((unint64_t)&v17 | 0xA);
  }
  else {
    uint64_t v11 = (unsigned __int16 *)*((void *)&v18 + 1);
  }
  int v12 = *v11;
  if (v12 == 49)
  {
    if (!a4)
    {
      *(void *)a6 = &unk_1EDA47700;
      uint64_t v14 = 2;
      *((_WORD *)a6 + 4) = 2;
      return icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v17);
    }
    int v13 = (UChar **)(a4 + 640);
    goto LABEL_14;
  }
  if (v12 == 48)
  {
    int v13 = (UChar **)(a3 + 640);
LABEL_14:
    icu::UnicodeString::UnicodeString(a6, v13);
    return icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v17);
  }
LABEL_11:
  icu::UnicodeString::UnicodeString(a6, (icu::UnicodeString *)&v17);
  return icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v17);
}

uint64_t sub_18C9726DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 84)) {
    uprv_free(*(void **)(a1 + 72));
  }
  if (*(unsigned char *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_18C972720(uint64_t a1@<X0>, icu::MeasureUnit *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  v28[8] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v7 = ures_open("icudt74l-unit", *(char **)(a1 + 40), a3);
  if (*a3 < 1)
  {
    Subtype = icu::MeasureUnit::getSubtype(a2);
    int v9 = strlen(Subtype);
    if (v9 >= 8 && (uint64_t v10 = icu::MeasureUnit::getSubtype(a2), !strcmp(&v10[v9 - 7], "-person")))
    {
      int v12 = icu::MeasureUnit::getSubtype(a2);
      int v13 = v9 - 7;
    }
    else
    {
      uint64_t v11 = icu::MeasureUnit::getSubtype(a2);
      icu::StringPiece::StringPiece((icu::StringPiece *)v28, v11);
      int v12 = (const char *)v28[0];
      int v13 = (int)v28[1];
    }
    memset(&v28[1], 0, 56);
    v28[0] = (char *)&v28[1] + 5;
    LODWORD(v28[1]) = 40;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v26, "units/");
    icu::CharString::append((icu::CharString *)v28, v26, v27, (UErrorCode *)a3);
    Type = icu::MeasureUnit::getType(a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v24, Type);
    icu::CharString::append((icu::CharString *)v28, v24, v25, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v22, "/");
    icu::CharString::append((icu::CharString *)v28, v22, v23, (UErrorCode *)a3);
    icu::CharString::append((icu::CharString *)v28, v12, v13, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v20, "/gender");
    icu::CharString::append((icu::CharString *)v28, v20, v21, (UErrorCode *)a3);
    int v15 = *a3;
    int v18 = 0;
    int v19 = v15;
    StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v7, (char *)v28[0], &v18, (UErrorCode *)&v19);
    if (v19 <= 0)
    {
      *a3 = v19;
      long long v17 = StringByKeyWithFallback;
      icu::UnicodeString::UnicodeString(a4, 1, &v17);
    }
    else
    {
      *(void *)a4 = &unk_1EDA47700;
      *(_WORD *)(a4 + 8) = 2;
    }
    if (BYTE4(v28[1])) {
      uprv_free(v28[0]);
    }
  }
  else
  {
    *(void *)a4 = &unk_1EDA47700;
    *(_WORD *)(a4 + 8) = 2;
  }
  if (v7) {
    ures_close(v7);
  }
}

void sub_18C9729A0(uint64_t a1@<X0>, const char *a2@<X1>, int *a3@<X2>, icu::UnicodeString *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v19);
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v17);
  ures_openDirectFillIn((uint64_t)v19, 0, "grammaticalFeatures", a3);
  ures_getByKey((uint64_t)v19, "grammaticalData", (uint64_t)v19, a3);
  ures_getByKey((uint64_t)v19, "derivations", (uint64_t)v19, a3);
  ures_getByKey((uint64_t)v19, (const char *)(a1 + 8), (uint64_t)v17, a3);
  if (*a3 == 2)
  {
    *a3 = 0;
    ures_getByKey((uint64_t)v19, "root", (uint64_t)v17, a3);
  }
  ures_getByKey((uint64_t)v17, "compound", (uint64_t)v17, a3);
  ures_getByKey((uint64_t)v17, "gender", (uint64_t)v17, a3);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 0;
  int v12 = &unk_1EDA47700;
  LOWORD(v13) = 2;
  int v11 = 0;
  StringByuint64_t Key = ures_getStringByKey((uint64_t)v17, a2, &v11, a3);
  if (*a3 <= 0)
  {
    uint64_t v10 = StringByKey;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v12, 1, &v10, v11);
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v12);
  }
  if (*a3 < 1)
  {
    icu::UnicodeString::UnicodeString(a4, (icu::UnicodeString *)&v12);
  }
  else
  {
    *(void *)a4 = &unk_1EDA47700;
    uint64_t v9 = 2;
    *((_WORD *)a4 + 4) = 2;
  }
  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v12);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v17);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v19);
}

uint64_t sub_18C972BF4(icu::StandardPlural *this, char *a2, UErrorCode *a3)
{
  int v5 = *(char *)this;
  if (v5 == 112)
  {
    if (!strcmp((const char *)this + 1, "er")) {
      return 9;
    }
  }
  else if (v5 == 103)
  {
    if (!strcmp((const char *)this + 1, "ender")) {
      return 10;
    }
  }
  else if (v5 == 100 && !strcmp((const char *)this + 1, "nam"))
  {
    return 8;
  }

  return icu::StandardPlural::indexFromString(this, a2, a3);
}

void sub_18C972CA8(uint64_t a1@<X0>, icu::MeasureUnit *a2@<X1>, int a3@<W2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  v15[24] = *(UChar **)MEMORY[0x1E4F143B8];
  int v13 = a3;
  if (*a4 < 1)
  {
    bzero(v14, 0x2C0uLL);
    for (uint64_t i = 0; i != 704; i += 64)
    {
      uint64_t v10 = &v14[i];
      *(void *)uint64_t v10 = &unk_1EDA47700;
      *((_WORD *)v10 + 4) = 2;
    }
    sub_18C96EFFC(a1, a2, &v13, "", (uint64_t)v14, a4);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)a5, v15);
    for (uint64_t j = 640; j != -64; j -= 64)
      icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v14[j]);
  }
  else
  {
    *(_OWORD *)(a5 + 8) = 0u;
    *(void *)(a5 + 56) = 0;
    *(_OWORD *)(a5 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(_OWORD *)(a5 + 24) = 0u;
    *(void *)a5 = &unk_1EDA47700;
    *(_WORD *)(a5 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a5);
  }
}

void sub_18C972E34(uint64_t a1@<X0>, icu::MeasureUnit *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, int *a5@<X4>, uint64_t a6@<X8>)
{
  v18[48] = *MEMORY[0x1E4F143B8];
  int v16 = a3;
  if (*a5 < 1)
  {
    bzero(v17, 0x2C0uLL);
    for (uint64_t i = 0; i != 704; i += 64)
    {
      int v12 = &v17[i];
      *(void *)int v12 = &unk_1EDA47700;
      *((_WORD *)v12 + 4) = 2;
    }
    sub_18C96EFFC(a1, a2, &v16, "", (uint64_t)v17, a5);
    if (*a5 < 1)
    {
      if (*(_WORD *)&v17[64 * (unint64_t)a4 + 8]) {
        long long v14 = (UChar **)v18;
      }
      else {
        long long v14 = (UChar **)&v17[64 * (unint64_t)a4];
      }
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)a6, v14);
    }
    else
    {
      *(_OWORD *)(a6 + 8) = 0u;
      *(void *)(a6 + 56) = 0;
      *(_OWORD *)(a6 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
      *(_OWORD *)(a6 + 24) = 0u;
      *(void *)a6 = &unk_1EDA47700;
      *(_WORD *)(a6 + 8) = 2;
      icu::UnicodeString::setToBogus((icu::UnicodeString *)a6);
    }
    for (uint64_t j = 640; j != -64; j -= 64)
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v17[j]);
  }
  else
  {
    *(_OWORD *)(a6 + 8) = 0u;
    *(void *)(a6 + 56) = 0;
    *(_OWORD *)(a6 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(_OWORD *)(a6 + 24) = 0u;
    *(void *)a6 = &unk_1EDA47700;
    *(_WORD *)(a6 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a6);
  }
}

uint64_t *sub_18C973038(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v41 = (uint64_t *)*MEMORY[0x1E4F143B8];
  uint64_t v10 = icu::UMemory::operator new(v41, (icu::UMemory *)0x368, a2);
  int v11 = v10;
  if (v10)
  {
    uint64_t *v10 = (uint64_t)&unk_1EDA4F0C0;
    v10[1] = (uint64_t)&unk_1EDA4F0F0;
    for (uint64_t i = 2; i != 106; i += 13)
      icu::number::impl::SimpleModifier::SimpleModifier((icu::number::impl::SimpleModifier *)&v11[i]);
    v11[106] = a3;
    v11[107] = a4;
    v11[108] = (uint64_t)"";
    bzero(v34, 0x2C0uLL);
    for (uint64_t j = 0; j != 704; j += 64)
    {
      long long v14 = &v34[j];
      *(void *)long long v14 = &unk_1EDA47700;
      *((_WORD *)v14 + 4) = 2;
    }
    uint64_t v15 = 0;
    v33[0] = &unk_1EDA4F260;
    v33[1] = v34;
    do
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v34[v15]);
      v15 += 64;
    }
    while (v15 != 704);
    uint64_t v16 = ures_open("icudt74l-curr", *(char **)(a1 + 40), a5);
    uint64_t v17 = v16;
    if (*a5 <= 0)
    {
      ures_getAllChildrenWithFallback(v16, "CurrencyUnitPatterns", (uint64_t)v33, a5);
      if (*a5 <= 0)
      {
        uint64_t v18 = 0;
        int v19 = (const UChar *)(a2 + 20);
        uint64_t v20 = v34;
        do
        {
          if ((*((_WORD *)v20 + 4) & 1) == 0)
          {
            unsigned int v32 = 0;
            uint64_t v21 = *(char **)(a1 + 40);
            int Keyword = icu::StandardPlural::getKeyword(v18);
            PluralName = ucurr_getPluralName(v19, v21, 0, Keyword, (int *)&v32, a5);
            icu::UnicodeString::UnicodeString((uint64_t)v38, (uint64_t)"{");
            icu::UnicodeString::UnicodeString((uint64_t)v35, (uint64_t)PluralName, v32);
            if (*((__int16 *)v20 + 4) < 0) {
              int32_t v24 = *((_DWORD *)v20 + 3);
            }
            else {
              int32_t v24 = *((unsigned __int16 *)v20 + 4) >> 5;
            }
            if ((v39 & 0x8000u) == 0) {
              uint64_t v25 = v39 >> 5;
            }
            else {
              uint64_t v25 = v40;
            }
            int v26 = v36 >> 5;
            if ((v36 & 0x8000u) != 0) {
              int v26 = v37;
            }
            icu::UnicodeString::findAndReplace((icu::UnicodeString *)v20, 0, v24, (const icu::UnicodeString *)v38, 0, v25, (const icu::UnicodeString *)v35, 0, v26);
            icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v35);
            icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v38);
          }
          ++v18;
          v20 += 64;
        }
        while (v18 != 8);
      }
    }
    if (v17) {
      ures_close(v17);
    }
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v33);
    unint64_t v29 = *a5;
    if ((int)v29 <= 0) {
      sub_18C96FC10((uint64_t)v11, (uint64_t)v34, 39, (UErrorCode *)a5);
    }
    else {
      int v11 = 0;
    }
    for (uint64_t k = 640; k != -64; k -= 64)
      icu::UnicodeString::~UnicodeString((void *)v29, (icu::UnicodeString *)&v34[k]);
  }
  else
  {
    *a5 = 7;
  }
  return v11;
}

void sub_18C973358(void *a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1[107];
  if (v8) {
    (*(void (**)(uint64_t, icu::number::impl::DecimalQuantity *, uint64_t, int *))(*(void *)v8 + 16))(v8, a2, a3, a4);
  }
  uint64_t v9 = (icu::PluralRules *)a1[106];
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v13, (uint64_t)a2);
  sub_18C97F148(a3 + 104, (icu::number::impl::DecimalQuantity *)v13, a4);
  unsigned int v10 = 5;
  if (v9 && *a4 <= 0)
  {
    memset(v15, 0, sizeof(v15));
    icu::PluralRules::select(v9, (const icu::IFixedDecimal *)v13, (icu::UnicodeString *)v15);
    int v12 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v15, v11);
    if (v12 < 0) {
      unsigned int v10 = 5;
    }
    else {
      unsigned int v10 = v12;
    }
    icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)v15);
  }
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v13);
  *(void *)(a3 + 192) = &a1[13 * v10 + 2];
  *(void *)(a3 + 184) = a1[108];
}

uint64_t sub_18C9734A0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return a1 + 104 * a3 + 16;
}

uint64_t sub_18C9734B0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return a1 + 104 * a3 + 8;
}

const char **sub_18C9734C0(const char **result, icu::MeasureUnitImpl *this, _DWORD *a3, UErrorCode *a4, uint64_t a5, uint64_t a6, uint64_t a7, icu::MeasureUnitImpl *a8)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(int *)a8 <= 0)
  {
    uint64_t v14 = result;
    long long v34 = 0u;
    memset(&v33[4], 0, 48);
    memset(v33, 0, 64);
    long long v31 = 0u;
    long long v32 = 0u;
    *(void *)&long long v32 = v33;
    DWORD2(v32) = 8;
    *(void *)&v33[4] = (char *)&v33[4] + 13;
    DWORD2(v33[4]) = 40;
    DWORD2(v34) = 0;
    uint64_t v15 = icu::MeasureUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)&v31, a8, a4);
    if (*(_DWORD *)v15 == 2)
    {
      uint64_t v17 = v15;
      uint64_t v29 = a6;
      int v18 = *((_DWORD *)v15 + 2);
      *(_DWORD *)(a7 + 32) = v18;
      if (v18 < 0) {
        uint64_t v19 = -1;
      }
      else {
        uint64_t v19 = (704 * v18) | 0x10;
      }
      uint64_t v20 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v19, v16);
      if (v20)
      {
        void *v20 = 64;
        v20[1] = 11 * v18;
        uint64_t v21 = (char *)(v20 + 2);
        if (v18)
        {
          int v22 = v20 + 2;
          int v23 = (char *)(v20 + 2);
          do
          {
            *(void *)int v23 = &unk_1EDA47700;
            *((_WORD *)v23 + 4) = 2;
            v22 += 8;
            v23 += 64;
          }
          while (v23 != &v21[704 * v18]);
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      sub_18C973748((void **)(a7 + 40), v21);
      if (*(int *)(a7 + 32) >= 1)
      {
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          uint64_t v26 = *(void *)(a7 + 40) + ((unint64_t)v24 << 6);
          icu::SingleUnitImpl::build(*(icu::SingleUnitImpl **)(*((void *)v17 + 2) + 8 * v25), (UErrorCode *)a8, (uint64_t)v30);
          sub_18C96EFFC((uint64_t)v14, (icu::MeasureUnit *)v30, a3, (const char *)a4, v26, (int *)a8);
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v30);
          ++v25;
          v24 += 11;
        }
        while (v25 < *(int *)(a7 + 32));
      }
      if (*a3) {
        unsigned int v27 = *a3 != 2;
      }
      else {
        unsigned int v27 = 2;
      }
      uint64_t Instance = icu::ListFormatter::createInstance(v14, 2, v27, (UErrorCode *)a8);
      sub_18C7F5A70(a7 + 544, (uint64_t)Instance, (int *)a8);
      *(void *)(a7 + 16) = a5;
      *(void *)(a7 + 24) = v29;
      icu::number::NumberFormatter::withLocale((icu::number::NumberFormatter *)v14, (uint64_t)v30);
      icu::number::LocalizedNumberFormatter::operator=(a7 + 48, (uint64_t)v30);
      icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v30);
    }
    else
    {
      *(_DWORD *)a8 = 16;
    }
    if (BYTE12(v33[4])) {
      uprv_free(*(void **)&v33[4]);
    }
    return (const char **)sub_18C885AFC((uint64_t)&v31 + 8);
  }
  return result;
}

void sub_18C973748(void **a1, void *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = (char *)(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    if (v6)
    {
      uint64_t v7 = v6 << 6;
      uint64_t v8 = (char *)(v4 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v8[v7]);
        v7 -= 64;
      }
      while (v7);
    }
    icu::UMemory::operator delete[](v5);
  }
  *a1 = a2;
}

uint64_t sub_18C9737B4(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    (*(void (**)(uint64_t, unint64_t, uint64_t, int *))(*(void *)v8 + 16))(v8, a2, a3, a4);
  }
  uint64_t result = sub_18C973838(a1, a2, a3, a4);
  *(void *)(a3 + 192) = result;
  return result;
}

uint64_t sub_18C973838(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a3 + 484))
  {
    uint64_t v8 = *(int *)(a1 + 32);
    if ((int)v8 < 0) {
      uint64_t v9 = -1;
    }
    else {
      uint64_t v9 = (v8 << 6) | 0x10;
    }
    unsigned int v10 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v9, a2);
    if (v10)
    {
      void *v10 = 64;
      v10[1] = v8;
      if (v8)
      {
        int v11 = v10 + 2;
        int v12 = v10 + 2;
        do
        {
          *int v12 = &unk_1EDA47700;
          *((_WORD *)v12 + 4) = 2;
          v11 += 8;
          v12 += 8;
        }
        while (v12 != &v10[8 * v8 + 2]);
      }
      int v44 = v10 + 2;
      if (*a4 <= 0)
      {
        unsigned int v40 = (icu::number::impl::DecimalQuantity *)a2;
        unsigned __int16 v39 = (icu::UnicodeString *)(v10 + 2);
        if (*(int *)(a3 + 484) >= 1)
        {
          unsigned int v13 = 0;
          uint64_t v14 = 0;
          uint64_t v15 = (char *)&v45 + 8;
          long long v16 = 0uLL;
          uint64_t v17 = (icu::UnicodeString *)(v10 + 2);
          do
          {
            uint64_t v61 = 0;
            long long v59 = v16;
            long long v60 = v16;
            long long v57 = v16;
            long long v58 = v16;
            int v18 = (void **)icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)&v57);
            uint64_t v19 = *(unint64_t **)(a3 + 440);
            if (v14)
            {
              uint64_t v20 = v19[v14];
              if (v20 >= 0) {
                unint64_t v21 = v20;
              }
              else {
                unint64_t v21 = -v20;
              }
            }
            else
            {
              unint64_t v21 = *v19;
            }
            uint64_t v22 = *(unsigned int *)(a3 + 480);
            if (v14 == v22)
            {
              int v23 = v15;
              if ((int)v22 >= 1 && icu::number::impl::DecimalQuantity::isNegative(v40)) {
                icu::number::impl::DecimalQuantity::negate((uint64_t)v40);
              }
              unsigned int v24 = *(icu::PluralRules **)(a1 + 16);
              uint64_t v49 = 0;
              long long v47 = 0u;
              long long v48 = 0u;
              long long v45 = 0u;
              long long v46 = 0u;
              icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)&v45, (uint64_t)v40);
              sub_18C97F148(a3 + 104, (icu::number::impl::DecimalQuantity *)&v45, a4);
              unsigned int v25 = 5;
              if (v24 && *a4 <= 0)
              {
                memset(v62, 0, sizeof(v62));
                icu::PluralRules::select(v24, (const icu::IFixedDecimal *)&v45, (icu::UnicodeString *)v62);
                int v27 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v62, v26);
                if (v27 < 0) {
                  unsigned int v25 = 5;
                }
                else {
                  unsigned int v25 = v27;
                }
                icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)v62);
              }
              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)&v45);
              memset(v62, 0, sizeof(v62));
              sub_18C972110(*(void *)(a1 + 40) + ((unint64_t)v13 << 6), v25, a4, (uint64_t)v62);
              *(void *)&long long v45 = 0;
              long long v46 = 0u;
              uint64_t v49 = 0;
              long long v47 = 0u;
              long long v48 = 0u;
              uint64_t v15 = v23;
              *((void *)&v45 + 1) = &unk_1EDA47700;
              LOWORD(v46) = 2;
              icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v45, (const icu::UnicodeString *)v62, 0, 1, 0, (UErrorCode *)a4);
              icu::UnicodeString::UnicodeString((uint64_t)&v52, (uint64_t)L"{0}");
              icu::SimpleFormatter::format((icu::SimpleFormatter *)&v45, (const icu::UnicodeString *)&v52, v17, (UErrorCode *)a4);
            }
            else
            {
              icu::number::impl::DecimalQuantity::setToLong(v18, v21);
              uint64_t v29 = *(icu::PluralRules **)(a1 + 16);
              if (v29)
              {
                long long v47 = 0u;
                long long v48 = 0u;
                long long v45 = 0u;
                long long v46 = 0u;
                icu::PluralRules::select(v29, (const icu::IFixedDecimal *)&v57, (icu::UnicodeString *)&v45);
                int v31 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)&v45, v30);
                if (v31 < 0) {
                  unsigned int v32 = 5;
                }
                else {
                  unsigned int v32 = v31;
                }
                icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)&v45);
              }
              else
              {
                unsigned int v32 = 5;
              }
              memset(v62, 0, sizeof(v62));
              sub_18C972110(*(void *)(a1 + 40) + ((unint64_t)v13 << 6), v32, a4, (uint64_t)v62);
              *(void *)&long long v45 = 0;
              long long v46 = 0u;
              uint64_t v49 = 0;
              long long v47 = 0u;
              long long v48 = 0u;
              *((void *)&v45 + 1) = &unk_1EDA47700;
              LOWORD(v46) = 2;
              icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v45, (const icu::UnicodeString *)v62, 0, 1, 0, (UErrorCode *)a4);
              uint64_t v56 = 0;
              long long v54 = 0u;
              long long v55 = 0u;
              long long v53 = 0u;
              long long v52 = &unk_1EDA47700;
              LOWORD(v53) = 2;
              v43[0] = &unk_1EDA47768;
              v43[1] = &v52;
              icu::number::LocalizedNumberFormatter::formatDecimalQuantity((uint64_t *)(a1 + 48), (const icu::number::impl::DecimalQuantity *)&v57, (UErrorCode *)a4, (uint64_t)v42);
              icu::number::FormattedNumber::appendTo((icu::number::FormattedNumber *)v42, (icu::Appendable *)v43, (UErrorCode *)a4);
              icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v42);
              icu::SimpleFormatter::format((icu::SimpleFormatter *)&v45, (const icu::UnicodeString *)&v52, v17, (UErrorCode *)a4);
              icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v43);
            }
            icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v52);
            icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v45);
            icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v62);
            icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)&v57);
            ++v14;
            v13 += 11;
            uint64_t v17 = (icu::UnicodeString *)((char *)v17 + 64);
            long long v16 = 0uLL;
          }
          while (v14 < *(int *)(a3 + 484));
        }
        memset((char *)v62 + 8, 0, 56);
        *(void *)&v62[0] = &unk_1EDA47700;
        WORD4(v62[0]) = 2;
        icu::ListFormatter::format(*(icu::ListFormatter **)(a1 + 544), v39, *(_DWORD *)(a1 + 32), (icu::UnicodeString *)v62, (UErrorCode *)a4);
        *(void *)&long long v57 = 0;
        long long v58 = 0u;
        uint64_t v61 = 0;
        long long v59 = 0u;
        long long v60 = 0u;
        *((void *)&v57 + 1) = &unk_1EDA47700;
        LOWORD(v58) = 2;
        icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v57, (const icu::UnicodeString *)v62, 0, 1, 0, (UErrorCode *)a4);
        if (*a4 < 1)
        {
          icu::number::impl::Modifier::Parameters::Parameters((uint64_t)v41, a1 + 8, 2, 5);
          icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)&v45, (uint64_t)&v57, 0, 0, v41[0], v41[1]);
          uint64_t v34 = a3 + 312;
          icu::UnicodeString::operator=((icu::UnicodeString *)(a3 + 320), (icu::UnicodeString *)((char *)&v45 + 8));
          long long v35 = v51;
          *(_OWORD *)(a3 + 384) = v50;
          *(_OWORD *)(a3 + 400) = v35;
          *(void *)&long long v45 = &unk_1EDA4F4A8;
          icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)((char *)&v45 + 8));
          icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v45);
        }
        else
        {
          uint64_t v34 = a3 + 240;
        }
        icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v57);
        icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)v62);
        goto LABEL_44;
      }
    }
    else
    {
      int v44 = 0;
      if (*a4 <= 0) {
        *a4 = 7;
      }
    }
    uint64_t v34 = a3 + 240;
LABEL_44:
    sub_18C7F9F20((uint64_t *)&v44);
    return v34;
  }
  *a4 = 16;
  return a3 + 240;
}

void sub_18C973E24()
{
}

void sub_18C973E34()
{
}

uint64_t *sub_18C973E44@<X0>(const char **a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, UErrorCode *a7@<X6>, uint64_t *a8@<X8>)
{
  int v12 = icu::UMemory::operator new(a8, (icu::UMemory *)0x118, (unint64_t)a2);
  if (!v12)
  {
    if (*(int *)a7 > 0) {
      return 0;
    }
    unsigned int v13 = 0;
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    return v13;
  }
  unsigned int v13 = v12;
  *int v12 = (uint64_t)&unk_1EDA4F200;
  *((_DWORD *)v12 + 2) = 0;
  uint64_t v14 = (const void **)(v12 + 1);
  void v12[2] = (uint64_t)(v12 + 4);
  *((_DWORD *)v12 + 6) = 8;
  *((unsigned char *)v12 + 28) = 0;
  *((_DWORD *)v12 + 24) = 0;
  uint64_t v15 = (unsigned int *)(v12 + 12);
  v12[13] = (uint64_t)(v12 + 15);
  *((_DWORD *)v12 + 28) = 8;
  *((unsigned char *)v12 + 116) = 0;
  v12[23] = (uint64_t)(v12 + 25);
  *((_DWORD *)v12 + 48) = 8;
  *((unsigned char *)v12 + 196) = 0;
  v12[33] = 0;
  v12[34] = a6;
  if (*(int *)a7 > 0)
  {
LABEL_20:
    (*(void (**)(uint64_t *))(*v13 + 8))(v13);
    return 0;
  }
  uint64_t v16 = *a2;
  if ((int)v16 < 1 || (uint64_t v17 = uprv_malloc(8 * v16)) == 0)
  {
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_20;
  }
  uint64_t v19 = (uint64_t)v17;
  if (*((unsigned char *)v13 + 196)) {
    uprv_free((void *)v13[23]);
  }
  unsigned __int16 v39 = v13 + 33;
  v13[23] = v19;
  *((_DWORD *)v13 + 48) = v16;
  *((unsigned char *)v13 + 196) = 1;
  unint64_t v20 = (int)*a2;
  BOOL v21 = !is_mul_ok(v20, 0x18uLL);
  if (24 * v20 >= 0xFFFFFFFFFFFFFFF0) {
    BOOL v21 = 1;
  }
  if (v21) {
    uint64_t v22 = -1;
  }
  else {
    uint64_t v22 = 24 * v20 + 16;
  }
  int v23 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v22, v18);
  if (v23)
  {
    *int v23 = 24;
    v23[1] = v20;
    uint64_t v24 = (uint64_t)(v23 + 2);
    if (v20)
    {
      uint64_t v25 = 24 * v20;
      uint64_t v26 = (uint64_t)(v23 + 2);
      do
      {
        uint64_t v26 = icu::MeasureUnit::MeasureUnit(v26) + 24;
        v25 -= 24;
      }
      while (v25);
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  sub_18C974144(v39, v24);
  uint64_t v28 = *a2;
  if ((int)v28 >= 1)
  {
    uint64_t v29 = 0;
    while (1)
    {
      long long v30 = *(icu::MeasureUnit **)(*((void *)a2 + 1) + 8 * v29);
      icu::MeasureUnit::operator=(*v39 + 24 * v29, (unint64_t)v30);
      int Complexity = icu::MeasureUnit::getComplexity(v30, a7, v31, v32);
      UErrorCode v35 = *a7;
      if (Complexity == 2)
      {
        if (v35 <= U_ZERO_ERROR)
        {
          int v37 = sub_18C974E78(v15, v34);
          unsigned __int16 v36 = v37;
          if (*(int *)a7 <= 0 && !v37) {
            *a7 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
        else
        {
          unsigned __int16 v36 = 0;
        }
        sub_18C9734C0(a1, v30, a3, a4, a5, 0, (uint64_t)v36, (icu::MeasureUnitImpl *)a7);
      }
      else
      {
        if (v35 <= U_ZERO_ERROR)
        {
          uint64_t v38 = sub_18C974FB4(v14, v34);
          unsigned __int16 v36 = v38;
          if (*(int *)a7 <= 0 && !v38) {
            *a7 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
        else
        {
          unsigned __int16 v36 = 0;
        }
        sub_18C96EE48(a1, v30, a3, (const char *)a4, a5, 0, v36, (int *)a7);
      }
      *(void *)(v13[23] + 8 * v29) = v36;
      if (*(int *)a7 >= 1) {
        break;
      }
      if (++v29 == v28) {
        return v13;
      }
    }
    goto LABEL_20;
  }
  return v13;
}

void sub_18C974144(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = (void *)(v4 - 16);
    uint64_t v6 = *(void *)(v4 - 8);
    if (v6)
    {
      uint64_t v7 = 24 * v6;
      uint64_t v8 = v4 - 24;
      do
      {
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(v8 + v7));
        v7 -= 24;
      }
      while (v7);
    }
    icu::UMemory::operator delete[](v5);
  }
  *a1 = a2;
}

uint64_t sub_18C9741B4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 272) + 16))(*(void *)(a1 + 272));
  if (*(int *)(a1 + 192) < 1)
  {
LABEL_5:
    if (*a4 <= 0) {
      *a4 = 5;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 264) + v8) + 32))(*(void *)(a1 + 264) + v8, a3 + 416);
      if (result) {
        break;
      }
      ++v9;
      v8 += 24;
      if (v9 >= *(int *)(a1 + 192)) {
        goto LABEL_5;
      }
    }
    unsigned int v10 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 184) + 8 * v9) + 16);
    return v10();
  }
  return result;
}

void *sub_18C9742F0(void *a1)
{
  uint64_t v2 = 0;
  *a1 = &unk_1EDA4F0C0;
  unint64_t v3 = (icu::number::impl::ModifierStore *)(a1 + 1);
  a1[1] = &unk_1EDA4F0F0;
  do
  {
    uint64_t v4 = (icu::number::impl::Modifier *)&a1[v2 + 93];
    *(void *)uint64_t v4 = &unk_1EDA4F4A8;
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&a1[v2 + 94]);
    icu::number::impl::Modifier::~Modifier(v4);
    v2 -= 13;
  }
  while (v2 != -104);
  icu::number::impl::ModifierStore::~ModifierStore(v3);
  return a1;
}

void sub_18C9743B4(void *a1)
{
  uint64_t v2 = 0;
  *a1 = &unk_1EDA4F0C0;
  unint64_t v3 = (icu::number::impl::ModifierStore *)(a1 + 1);
  a1[1] = &unk_1EDA4F0F0;
  do
  {
    uint64_t v4 = (icu::number::impl::Modifier *)&a1[v2 + 93];
    *(void *)uint64_t v4 = &unk_1EDA4F4A8;
    icu::UnicodeString::~UnicodeString(&a1[v2], (icu::UnicodeString *)&a1[v2 + 94]);
    icu::number::impl::Modifier::~Modifier(v4);
    v2 -= 13;
  }
  while (v2 != -104);
  icu::number::impl::ModifierStore::~ModifierStore(v3);

  icu::UMemory::operator delete(a1);
}

void sub_18C974488(icu::number::impl::ModifierStore *a1)
{
  uint64_t v2 = 0;
  *((void *)a1 - 1) = &unk_1EDA4F0C0;
  *(void *)a1 = &unk_1EDA4F0F0;
  do
  {
    unint64_t v3 = (icu::number::impl::ModifierStore *)((char *)a1 + v2 + 736);
    *(void *)unint64_t v3 = &unk_1EDA4F4A8;
    icu::UnicodeString::~UnicodeString((icu::number::impl::ModifierStore *)((char *)a1 + v2 + 744));
    icu::number::impl::Modifier::~Modifier(v3);
    v2 -= 104;
  }
  while (v2 != -832);

  icu::number::impl::ModifierStore::~ModifierStore(a1);
}

void sub_18C97454C(icu::number::impl::ModifierStore *a1)
{
  uint64_t v2 = 0;
  unint64_t v3 = (char *)a1 - 8;
  *((void *)a1 - 1) = &unk_1EDA4F0C0;
  *(void *)a1 = &unk_1EDA4F0F0;
  do
  {
    uint64_t v4 = (icu::number::impl::ModifierStore *)((char *)a1 + v2 + 736);
    *(void *)uint64_t v4 = &unk_1EDA4F4A8;
    icu::UnicodeString::~UnicodeString((char *)a1 + v2, (icu::number::impl::ModifierStore *)((char *)a1 + v2 + 744));
    icu::number::impl::Modifier::~Modifier(v4);
    v2 -= 104;
  }
  while (v2 != -832);
  icu::number::impl::ModifierStore::~ModifierStore(a1);

  icu::UMemory::operator delete(v3);
}

uint64_t *sub_18C974620(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EDA4F160;
  uint64_t v2 = (icu::number::impl::ModifierStore *)(a1 + 1);
  a1[1] = (uint64_t)&unk_1EDA4F190;
  uint64_t v3 = a1[68];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 6));
  sub_18C7F9F20(a1 + 5);
  icu::number::impl::ModifierStore::~ModifierStore(v2);
  return a1;
}

void sub_18C9746C4(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1EDA4F160;
  uint64_t v2 = (icu::number::impl::ModifierStore *)(a1 + 1);
  a1[1] = (uint64_t)&unk_1EDA4F190;
  uint64_t v3 = a1[68];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 6));
  sub_18C7F9F20(a1 + 5);
  icu::number::impl::ModifierStore::~ModifierStore(v2);

  icu::UMemory::operator delete(a1);
}

void sub_18C974778(uint64_t *a1)
{
  *(a1 - 1) = (uint64_t)&unk_1EDA4F160;
  *a1 = (uint64_t)&unk_1EDA4F190;
  uint64_t v2 = a1[67];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 5));
  sub_18C7F9F20(a1 + 4);

  icu::number::impl::ModifierStore::~ModifierStore((icu::number::impl::ModifierStore *)a1);
}

void sub_18C974824(uint64_t *a1)
{
  uint64_t v2 = a1 - 1;
  *(a1 - 1) = (uint64_t)&unk_1EDA4F160;
  *a1 = (uint64_t)&unk_1EDA4F190;
  uint64_t v3 = a1[67];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 5));
  sub_18C7F9F20(a1 + 4);
  icu::number::impl::ModifierStore::~ModifierStore((icu::number::impl::ModifierStore *)a1);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18C9748D8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4F200;
  sub_18C94E558((uint64_t *)(a1 + 264));
  if (*(unsigned char *)(a1 + 196)) {
    uprv_free(*(void **)(a1 + 184));
  }
  sub_18C974DF4(a1 + 96);
  sub_18C974DF4(a1 + 8);
  return a1;
}

void sub_18C974940(void *a1)
{
  *(void *)a1 = &unk_1EDA4F200;
  sub_18C94E558((uint64_t *)a1 + 33);
  if (*((unsigned char *)a1 + 196)) {
    uprv_free(*((void **)a1 + 23));
  }
  sub_18C974DF4((uint64_t)a1 + 96);
  sub_18C974DF4((uint64_t)a1 + 8);

  icu::UMemory::operator delete(a1);
}

void sub_18C9749BC(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9749E4(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t result = strcmp(__s1, "case");
  if (result)
  {
    uint64_t result = sub_18C972BF4((icu::StandardPlural *)__s1, a5, v10);
    if (*(int *)a5 <= 0)
    {
      uint64_t v11 = (int)result;
      if (*(_WORD *)(*(void *)(a1 + 8) + ((uint64_t)(int)result << 6) + 8))
      {
        int v14 = 0;
        uint64_t v13 = (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)a3 + 32))(a3, &v14, a5);
        icu::UnicodeString::UnicodeString(v15, 1, &v13);
        icu::UnicodeString::operator=((icu::UnicodeString *)(*(void *)(a1 + 8) + (v11 << 6)), (icu::UnicodeString *)v15);
        return (uint64_t)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
      }
    }
  }
  return result;
}

void sub_18C974B00(icu::ResourceSink *a1)
{
  icu::ResourceSink::~ResourceSink(a1);

  icu::UMemory::operator delete(v1);
}

void *sub_18C974B28(uint64_t a1, icu::StandardPlural *this, UErrorCode *a3, int a4, char *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t result = (void *)sub_18C972BF4(this, a5, a3);
  if (*(int *)a5 <= 0)
  {
    uint64_t v9 = (int)result;
    if (*(_WORD *)(*(void *)(a1 + 24) + ((uint64_t)(int)result << 6) + 8))
    {
      if ((uint64_t v15 = 0,
            memset(v14, 0, sizeof(v14)),
            (*(void (**)(_OWORD *__return_ptr, UErrorCode *, char *))(*(void *)a3 + 88))(v14, a3, a5),
            uint64_t v13 = 0,
            memset(v12, 0, sizeof(v12)),
            unsigned int v10 = *(char **)(a1 + 8),
            *v10)
        && ((sub_18C974CF4(a1, (icu::ResourceTable *)v14, v10, (uint64_t)v12, (icu::ResourceValue *)a3, (uint64_t)a5) & 1) != 0
         || strcmp(*(const char **)(a1 + 8), "neuter")
         && (sub_18C974CF4(a1, (icu::ResourceTable *)v14, "neuter", (uint64_t)v12, (icu::ResourceValue *)a3, (uint64_t)a5) & 1) != 0)
        || (uint64_t result = (void *)sub_18C974CF4(a1, (icu::ResourceTable *)v14, "_", (uint64_t)v12, (icu::ResourceValue *)a3, (uint64_t)a5), result))
      {
        int v17 = 0;
        uint64_t v16 = (*(uint64_t (**)(UErrorCode *, int *, char *))(*(void *)a3 + 32))(a3, &v17, a5);
        icu::UnicodeString::UnicodeString(v18, 1, &v16);
        icu::UnicodeString::operator=((icu::UnicodeString *)(*(void *)(a1 + 24) + (v9 << 6)), (icu::UnicodeString *)v18);
        return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v18);
      }
    }
  }
  return result;
}

uint64_t sub_18C974CF4(uint64_t a1, icu::ResourceTable *this, char *__s1, uint64_t a4, icu::ResourceValue *a5, uint64_t a6)
{
  uint64_t result = icu::ResourceTable::findValue(this, __s1, a5);
  if (result)
  {
    (*(void (**)(long long *__return_ptr, icu::ResourceValue *, uint64_t))(*(void *)a5 + 88))(&v13, a5, a6);
    long long v11 = *(_OWORD *)v14;
    *(_OWORD *)a4 = v13;
    *(_OWORD *)(a4 + 16) = v11;
    *(void *)(a4 + 29) = *(void *)&v14[13];
    int v12 = *(char **)(a1 + 16);
    return *v12
        && (icu::ResourceTable::findValue((icu::ResourceTable *)a4, v12, a5)
         || strcmp(*(const char **)(a1 + 16), "nominative")
         && icu::ResourceTable::findValue((icu::ResourceTable *)a4, "nominative", a5))
        || icu::ResourceTable::findValue((icu::ResourceTable *)a4, "_", a5) != 0;
  }
  return result;
}

uint64_t sub_18C974DF4(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(unsigned char *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t *sub_18C974E78(unsigned int *a1, unint64_t a2)
{
  int v3 = a1[4];
  uint64_t v4 = *a1;
  if (v4 != v3)
  {
LABEL_16:
    uint64_t v9 = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x228, a2);
    uint64_t v7 = v9;
    if (v9)
    {
      *uint64_t v9 = (uint64_t)&unk_1EDA4F160;
      void v9[2] = 0;
      v9[3] = 0;
      v9[1] = (uint64_t)&unk_1EDA4F190;
      *((_DWORD *)v9 + 8) = 1;
      v9[5] = 0;
      sub_18C913B28((uint64_t)(v9 + 6));
      *(_OWORD *)(v7 + 65) = 0u;
      *(_OWORD *)(v7 + 67) = 0u;
    }
    uint64_t v10 = (int)*a1;
    *a1 = v10 + 1;
    *(void *)(*((void *)a1 + 1) + 8 * v10) = v7;
    return v7;
  }
  if (v3 == 8) {
    int v5 = 32;
  }
  else {
    int v5 = 2 * v3;
  }
  if (v5 < 1) {
    return 0;
  }
  uint64_t v6 = (uint64_t *)uprv_malloc(8 * v5);
  uint64_t v7 = v6;
  if (v6)
  {
    if (v3 >= 1)
    {
      int v8 = a1[4];
      if (v8 >= v3) {
        int v8 = v3;
      }
      if (v8 >= v5) {
        int v8 = v5;
      }
      memcpy(v6, *((const void **)a1 + 1), 8 * v8);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free(*((void **)a1 + 1));
    }
    *((void *)a1 + 1) = v7;
    a1[4] = v5;
    uint64_t v4 = 1;
    *((unsigned char *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v7;
}

uint64_t *sub_18C974FB4(const void **a1, unint64_t a2)
{
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *(unsigned int *)a1;
  if (v4 == v3)
  {
    if (v3 == 8) {
      int v5 = 32;
    }
    else {
      int v5 = 2 * v3;
    }
    if (v5 < 1) {
      return 0;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8 * v5);
    if (!result) {
      return result;
    }
    uint64_t v7 = result;
    if (v3 >= 1)
    {
      int v8 = *((_DWORD *)a1 + 4);
      if (v8 >= v3) {
        int v8 = v3;
      }
      if (v8 >= v5) {
        int v8 = v5;
      }
      memcpy(result, a1[1], 8 * v8);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v7;
    *((_DWORD *)a1 + 4) = v5;
    uint64_t v4 = 1;
    *((unsigned char *)a1 + 20) = 1;
  }
  uint64_t result = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x368, a2);
  if (result) {
    uint64_t result = sub_18C96E9D8(result);
  }
  uint64_t v9 = *(int *)a1;
  *(_DWORD *)a1 = v9 + 1;
  *((void *)a1[1] + v9) = result;
  return result;
}

void sub_18C97508C(uint64_t a1@<X0>, const icu::DecimalFormatSymbols *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const icu::UnicodeString *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  *(void *)(a6 + 464) = 0;
  *(_OWORD *)(a6 + 432) = 0u;
  *(_OWORD *)(a6 + 448) = 0u;
  *(_OWORD *)(a6 + 400) = 0u;
  *(_OWORD *)(a6 + 416) = 0u;
  *(_OWORD *)(a6 + 368) = 0u;
  *(_OWORD *)(a6 + 384) = 0u;
  *(_OWORD *)(a6 + 336) = 0u;
  *(_OWORD *)(a6 + 352) = 0u;
  *(_OWORD *)(a6 + 304) = 0u;
  *(_OWORD *)(a6 + 320) = 0u;
  *(_OWORD *)(a6 + 272) = 0u;
  *(_OWORD *)(a6 + 288) = 0u;
  *(_OWORD *)(a6 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a6 + 256) = 0u;
  *(_OWORD *)(a6 + 208) = 0u;
  *(_OWORD *)(a6 + 224) = 0u;
  *(_OWORD *)(a6 + 176) = 0u;
  *(_OWORD *)(a6 + 192) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  long long v11 = (_DWORD *)(a6 + 64);
  *(_OWORD *)(a6 + 16) = 0u;
  uint64_t v12 = a6 + 16;
  *(_DWORD *)(a6 + 4) = 2;
  uint64_t v78 = a6 + 4;
  icu::MeasureUnit::MeasureUnit(a6 + 16);
  icu::MeasureUnit::MeasureUnit(a6 + 40);
  long long v86 = v11;
  *long long v11 = 0;
  *(_DWORD *)(a6 + 136) = 0;
  *(_DWORD *)(a6 + 88) = 0;
  *(_DWORD *)(a6 + 96) = 4;
  *(_WORD *)(a6 + 100) = -3;
  *(_DWORD *)(a6 + 112) = -2;
  *(_WORD *)(a6 + 124) = -1;
  uint64_t v13 = a6 + 124;
  *(unsigned char *)(a6 + 132) = 0;
  *(void *)(a6 + 144) = 0;
  *(void *)(a6 + 152) = 0x900000007;
  *(unsigned char *)(a6 + 160) = 0;
  *(void *)(a6 + 164) = 2;
  *(void *)(a6 + 176) = 0;
  *(_DWORD *)(a6 + 184) = 0;
  *(void *)(a6 + 192) = 0;
  *(_WORD *)(a6 + 200) = 0;
  *(_DWORD *)(a6 + 204) = 0;
  *(void *)(a6 + 208) = 0;
  *(_WORD *)(a6 + 216) = 0;
  *(void *)(a6 + 228) = 0;
  *(void *)(a6 + 220) = 0;
  *(void *)(a6 + 236) = 0x300000000;
  *(_WORD *)(a6 + 244) = 0;
  icu::Locale::Locale((icu::Locale *)(a6 + 248));
  memset(v94, 0, sizeof(v94));
  icu::Locale::Locale((icu::Locale *)v94, (uint64_t)a2 + 1936);
  icu::number::impl::SymbolsWrapper::setTo((icu::number::impl::SymbolsWrapper *)(a6 + 136), a2);
  int v14 = *(icu::CurrencyPluralInfo **)(a1 + 48);
  if (!v14)
  {
    uint64_t v16 = a3 + 8;
    goto LABEL_7;
  }
  *(void *)(a6 + 232) = icu::CurrencyPluralInfo::getPluralRules(v14);
  uint64_t v15 = *(icu::CurrencyPluralInfo **)(a1 + 48);
  uint64_t v16 = a3 + 8;
  if (!v15)
  {
LABEL_7:
    sub_18C975BB8(v16, a1, a5);
    *(unsigned char *)(a3 + 2464) = 1;
    goto LABEL_8;
  }
  *(unsigned char *)(a3 + 274) = 1;
  sub_18C9762D0(a3 + 280, v15, (uint64_t *)a1, a5);
  if (!*(unsigned char *)(a3 + 2464)) {
    uint64_t v16 = a3 + 280;
  }
LABEL_8:
  *(void *)(a6 + 224) = v16;
  if (*(unsigned char *)(a1 + 8))
  {
    int v17 = 1;
    if (!*(void *)(a1 + 48) && *(unsigned char *)(a1 + 56)) {
      int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16);
    }
  }
  else
  {
    int v17 = 1;
  }
  long long v92 = 0u;
  long long v93 = 0u;
  long long v77 = (int *)a5;
  sub_18C962FEC(a1, (uint64_t)v94, (uint64_t)a5, (icu::CurrencyUnit *)&v92);
  if (*(unsigned char *)(a1 + 56)) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *(unsigned int *)(a1 + 60);
  }
  if (v17)
  {
    uint64_t v19 = v18;
    icu::MeasureUnit::operator=(v12, (unint64_t)&v92);
    uint64_t v18 = v19;
    uint64_t v13 = a6 + 124;
  }
  int v20 = *(_DWORD *)(a1 + 88);
  LODWORD(v21) = *(_DWORD *)(a1 + 92);
  int v22 = *(_DWORD *)(a1 + 104);
  LODWORD(v23) = *(_DWORD *)(a1 + 112);
  double v24 = *(double *)(a1 + 736);
  if (*(unsigned char *)(a1 + 744)) {
    int v25 = 4;
  }
  else {
    int v25 = *(_DWORD *)(a1 + 748);
  }
  int v85 = v25;
  BOOL v26 = (v22 & v20) != -1;
  int v79 = *(_DWORD *)(a1 + 96);
  BOOL v27 = (*(_DWORD *)(a1 + 116) & v79) != -1;
  BOOL v81 = v27;
  int v82 = *(_DWORD *)(a1 + 116);
  if (!v17 || v22 != -1 && v20 != -1)
  {
    int DefaultFractionDigitsForUsage = *(_DWORD *)(a1 + 104);
LABEL_25:
    int v29 = v20;
    goto LABEL_26;
  }
  int v84 = v17;
  uint64_t v38 = v13;
  uint64_t v39 = v18;
  int DefaultFractionDigitsForUsage = ucurr_getDefaultFractionDigitsForUsage((const UChar *)&v93 + 2, v18, v77);
  uint64_t v18 = v39;
  uint64_t v13 = v38;
  int v17 = v84;
  BOOL v27 = v81;
  if (v22 != -1 || (int v29 = DefaultFractionDigitsForUsage, v20 != -1))
  {
    if (v22 != -1)
    {
      if (v22 <= DefaultFractionDigitsForUsage) {
        int v29 = DefaultFractionDigitsForUsage;
      }
      else {
        int v29 = v22;
      }
      int DefaultFractionDigitsForUsage = v22;
      goto LABEL_26;
    }
    if (DefaultFractionDigitsForUsage >= v20) {
      int DefaultFractionDigitsForUsage = v20;
    }
    goto LABEL_25;
  }
LABEL_26:
  if (v23 || !v29)
  {
    uint64_t v31 = DefaultFractionDigitsForUsage & ~(DefaultFractionDigitsForUsage >> 31);
    if (v29 <= (int)v31) {
      int v36 = DefaultFractionDigitsForUsage & ~(DefaultFractionDigitsForUsage >> 31);
    }
    else {
      int v36 = v29;
    }
    if (v29 < 0) {
      int v37 = -1;
    }
    else {
      int v37 = v36;
    }
    int v83 = v37;
    if ((v23 - 1000) < 0xFFFFFC19) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v23;
    }
    LODWORD(v35) = v79;
    if ((v21 & 0x80000000) != 0)
    {
      uint64_t v21 = 0xFFFFFFFFLL;
    }
    else if ((int)v21 >= (int)v23)
    {
      if (v21 > 0x3E7) {
        uint64_t v21 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v21 = v21;
      }
    }
    else
    {
      uint64_t v21 = v23;
    }
  }
  else
  {
    uint64_t v23 = 0;
    if (DefaultFractionDigitsForUsage | v21) {
      BOOL v30 = DefaultFractionDigitsForUsage < 0;
    }
    else {
      BOOL v30 = 1;
    }
    if (v30) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = DefaultFractionDigitsForUsage;
    }
    if (v29 <= (int)v31) {
      int v32 = v31;
    }
    else {
      int v32 = v29;
    }
    if (v29 < 0) {
      int v33 = -1;
    }
    else {
      int v33 = v32;
    }
    int v83 = v33;
    if ((int)v21 > 999) {
      unsigned int v34 = -1;
    }
    else {
      unsigned int v34 = v21;
    }
    if ((int)v21 < 0) {
      uint64_t v21 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v21 = v34;
    }
    LODWORD(v35) = v79;
  }
  memset(v91, 0, sizeof(v91));
  if (!*(unsigned char *)(a1 + 56))
  {
    icu::number::Precision::constructCurrency(v18, (uint64_t)v90);
    icu::number::CurrencyPrecision::withCurrency((icu::number::CurrencyPrecision *)v90, (const UChar *)&v92, (uint64_t)v87);
LABEL_91:
    LOBYTE(v27) = v81;
    BOOL v41 = 0;
    v91[0] = v87[0];
    *(_OWORD *)((char *)v91 + 12) = *(_OWORD *)((char *)v87 + 12);
    goto LABEL_125;
  }
  if (v24 != 0.0)
  {
    double v89 = v24;
    double v40 = v24;
    if (!v27)
    {
      if (icu::number::impl::PatternStringUtils::ignoreRoundingIncrement((icu::number::impl::PatternStringUtils *)&v89, (double *)v83))
      {
        icu::number::Precision::constructFraction(v31, v83, (uint64_t)v87);
        BOOL v41 = 0;
        goto LABEL_116;
      }
      double v40 = v89;
      BOOL v27 = v81;
    }
    double v45 = v24 / v40 + -1.0;
    BOOL v41 = v45 >= -0.001 && v45 <= 0.001;
    if (!v41)
    {
      double v89 = v24;
      double v40 = v24;
    }
    if (v27)
    {
      int v46 = v82;
      if (v82 >= 999) {
        int v46 = 999;
      }
      if (v46 <= 1) {
        uint64_t v47 = 1;
      }
      else {
        uint64_t v47 = v46;
      }
      if ((int)v35 >= 999) {
        int v48 = 999;
      }
      else {
        int v48 = v35;
      }
      if ((int)v35 < (int)v47) {
        int v48 = v47;
      }
      if ((int)v35 >= 0) {
        LODWORD(v35) = v48;
      }
      else {
        LODWORD(v35) = 999;
      }
      int v82 = v47;
      icu::number::Precision::constructIncrementSignificant(v47, v40, v35, (uint64_t)v87);
      v91[0] = v87[0];
      *(_OWORD *)((char *)v91 + 12) = *(_OWORD *)((char *)v87 + 12);
      goto LABEL_117;
    }
    icu::number::Precision::increment(v40, (uint64_t)v90);
    icu::number::IncrementPrecision::withMinFraction((uint64_t)v90, v31, (uint64_t)v87);
LABEL_116:
    v91[0] = v87[0];
    *(_OWORD *)((char *)v91 + 12) = *(_OWORD *)((char *)v87 + 12);
    LODWORD(v35) = -1;
    int v82 = -1;
LABEL_117:
    LOBYTE(v27) = v81;
    goto LABEL_125;
  }
  if (v27)
  {
    int v42 = v82;
    if (v82 >= 999) {
      int v42 = 999;
    }
    if (v42 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = v42;
    }
    if ((int)v35 >= 999) {
      int v44 = 999;
    }
    else {
      int v44 = v35;
    }
    if ((int)v35 < (int)v43) {
      int v44 = v43;
    }
    if ((int)v35 >= 0) {
      LODWORD(v35) = v44;
    }
    else {
      LODWORD(v35) = 999;
    }
    int v82 = v43;
    icu::number::Precision::constructSignificant(v43, v35, (uint64_t)v87);
    goto LABEL_91;
  }
  if (v26)
  {
    icu::number::Precision::constructFraction(v31, v83, (uint64_t)v87);
  }
  else
  {
    if (!v17)
    {
      BOOL v41 = 0;
      goto LABEL_124;
    }
    icu::number::Precision::constructCurrency(v18, (uint64_t)v87);
  }
  LOBYTE(v27) = v81;
  BOOL v41 = 0;
  v91[0] = v87[0];
  *(_OWORD *)((char *)v91 + 12) = *(_OWORD *)((char *)v87 + 12);
LABEL_124:
  LODWORD(v35) = -1;
  int v82 = -1;
LABEL_125:
  int v49 = v91[0];
  if (LODWORD(v91[0]))
  {
    *(_DWORD *)(a6 + 96) = v85;
    *long long v86 = v91[0];
    *(_OWORD *)((char *)v86 + 12) = *(_OWORD *)((char *)v91 + 12);
  }
  char v50 = (*(unsigned char *)(a1 + 757) == 0) & ~v27;
  if (v83 <= 15) {
    char v50 = 0;
  }
  *(unsigned char *)(a6 + 244) = v50;
  icu::number::IntegerWidth::IntegerWidth((uint64_t)v87, v23, v21, *(unsigned char *)(a1 + 68));
  *(void *)uint64_t v13 = *(void *)&v87[0];
  *(unsigned char *)(v13 + 8) = BYTE8(v87[0]);
  long long v52 = (icu::number::Notation *)icu::number::impl::Grouper::forProperties((icu::number::impl::Grouper *)a1, v51);
  *(void *)(a6 + 100) = v52;
  *(_DWORD *)(a6 + 108) = v53;
  if (*(int *)(a1 + 72) >= 1)
  {
    long long v52 = (icu::number::Notation *)icu::number::impl::Padder::forProperties((icu::number::impl::Padder *)a1, v53);
    *(void *)(a6 + 112) = v52;
    *(_DWORD *)(a6 + 120) = v53;
  }
  *(_DWORD *)(a6 + 164) = *(unsigned __int8 *)(a1 + 65);
  *(_DWORD *)(a6 + 156) = *(unsigned __int8 *)(a1 + 756);
  if (*(_DWORD *)(a1 + 100) != -1)
  {
    if ((int)v21 < 9)
    {
      if ((int)v23 >= 2 && (int)v21 > (int)v23)
      {
        LODWORD(v23) = 1;
        *(void *)&v87[0] = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)1);
        DWORD2(v87[0]) = v56;
        *(void *)(a6 + 124) = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)v87, v21);
        *(unsigned char *)(a6 + 132) = v57;
      }
    }
    else
    {
      *(void *)&v87[0] = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)v23);
      DWORD2(v87[0]) = v54;
      *(void *)(a6 + 124) = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)v87, v23);
      *(unsigned char *)(a6 + 132) = v55;
      LODWORD(v21) = v23;
    }
    if ((int)v21 < 0) {
      int v58 = -1;
    }
    else {
      int v58 = v21;
    }
    long long v52 = (icu::number::Notation *)icu::number::ScientificNotation::ScientificNotation((uint64_t)v87, v58, v58 == v23, *(_WORD *)(a1 + 100), *(unsigned __int8 *)(a1 + 66));
    *(void *)uint64_t v78 = *(void *)&v87[0];
    *(_DWORD *)(v78 + 8) = DWORD2(v87[0]);
    if (*(_DWORD *)v86 == 2)
    {
      int v59 = *(_DWORD *)(a1 + 112);
      int v60 = *(_DWORD *)(a1 + 88);
      if (v59 | v60)
      {
        int v61 = *(_DWORD *)(a1 + 104);
        if (v59 | v61)
        {
          __int16 v62 = v60 + v59;
          if (v59 > 1 && *(_DWORD *)(a1 + 92) > v59) {
            int v59 = 1;
          }
          uint64_t v63 = (v59 + v61);
        }
        else
        {
          __int16 v62 = v60 + 1;
          uint64_t v63 = 1;
        }
        long long v52 = (icu::number::Notation *)icu::number::Precision::constructSignificant(v63, v62, (uint64_t)v87);
      }
      else
      {
        icu::number::Precision::unlimited((uint64_t)v87);
      }
      *long long v86 = v87[0];
      *(_OWORD *)((char *)v86 + 12) = *(_OWORD *)((char *)v87 + 12);
      *(_DWORD *)(a6 + 96) = v85;
    }
  }
  if (!*(unsigned char *)a1)
  {
    if (*(_DWORD *)(a1 + 4) == 1) {
      uint64_t v65 = icu::number::Notation::compactLong(v52);
    }
    else {
      uint64_t v65 = icu::number::Notation::compactShort(v52);
    }
    *(void *)(a6 + 4) = v65;
    *(_DWORD *)(a6 + 12) = v53;
  }
  int v66 = *(_DWORD *)(a1 + 84);
  int v67 = *(_DWORD *)(a1 + 120);
  int v68 = *(_DWORD *)(a1 + 124);
  uint64_t v69 = (v68 + v66);
  if (!(v68 + v66) || v67 == 1)
  {
    uint64_t v70 = a4;
    if (v69)
    {
      icu::number::Scale::powerOfTen(v69, (uint64_t)v87);
    }
    else if (v67 == 1)
    {
      icu::number::Scale::none((uint64_t)v87);
    }
    else
    {
      icu::number::Scale::byDouble((double)v67, (unint64_t)v53, (uint64_t)v87);
    }
  }
  else
  {
    icu::number::Scale::byDoubleAndPowerOfTen((icu::number::Scale *)v69, (double)v67, (unint64_t)v53, (uint64_t)v87);
    uint64_t v70 = a4;
  }
  icu::number::Scale::operator=(a6 + 168, (uint64_t)v87);
  icu::number::Scale::~Scale((icu::number::Scale *)v87);
  if (v70)
  {
    icu::CurrencyUnit::operator=(v70 + 16, (unint64_t)&v92);
    *(unsigned char *)(v70 + 8) = 0;
    *(_DWORD *)(v70 + 748) = v85;
    *(unsigned char *)(v70 + 744) = 0;
    *(_DWORD *)(v70 + 112) = v23;
    if (v21 == -1) {
      int v71 = 0x7FFFFFFF;
    }
    else {
      int v71 = v21;
    }
    *(_DWORD *)(v70 + 92) = v71;
    if (v49 == 8)
    {
      icu::number::Precision::withCurrency((icu::number::Precision *)v91, (const UChar *)&v92, (UErrorCode *)v77, (uint64_t)v87);
      int v49 = v87[0];
      int64_t v72 = *((int64_t *)&v87[0] + 1);
      __int16 v73 = v87[1];
      __int16 v74 = WORD1(v87[1]);
    }
    else
    {
      int64_t v72 = *((int64_t *)&v91[0] + 1);
      __int16 v73 = v91[1];
      __int16 v74 = WORD1(v91[1]);
    }
    if (v49 == 2)
    {
      LODWORD(v31) = (__int16)v72;
      int v75 = (int)v72 >> 16;
      double v24 = 0.0;
    }
    else
    {
      if ((v49 - 5) > 2)
      {
        if (v49 == 9)
        {
          if (!v41) {
            double v24 = *(double *)&v72;
          }
          int v76 = v73;
          LODWORD(v35) = v74;
        }
        else
        {
          double v24 = 0.0;
          if (v49 == 3)
          {
            int v76 = (int)((unint64_t)v72 >> 16) >> 16;
            uint64_t v35 = v72 >> 48;
          }
          else
          {
            int v76 = v82;
          }
        }
        int v75 = v83;
        goto LABEL_186;
      }
      LODWORD(v31) = v74;
      uint64_t v88 = 0;
      memset(v87, 0, sizeof(v87));
      icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v87);
      icu::number::impl::DecimalQuantity::setToLong((void **)v87, v72);
      icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v87, v73);
      double v24 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v87);
      icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v87);
      int v75 = v31;
    }
    int v76 = v82;
LABEL_186:
    *(_DWORD *)(v70 + 104) = v31;
    *(_DWORD *)(v70 + 88) = v75;
    *(_DWORD *)(v70 + 116) = v76;
    *(_DWORD *)(v70 + 96) = v35;
    *(double *)(v70 + 736) = v24;
  }
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v92);
  icu::Locale::~Locale((icu::Locale *)v94);
}

void sub_18C975A84(uint64_t a1, const icu::DecimalFormatSymbols *a2, uint64_t a3, uint64_t a4, const icu::UnicodeString *a5)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  icu::number::NumberFormatter::with(v11);
  sub_18C97508C(a1, a2, a3, a4, a5, (uint64_t)&v10);
  icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::macros();
}

void *sub_18C975BB8(uint64_t a1, uint64_t a2, const icu::UnicodeString *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 266) = 0;
  memset(v35, 0, sizeof(v35));
  icu::number::impl::AffixUtils::escape(a2 + 480, (uint64_t)v35);
  memset(v34, 0, sizeof(v34));
  icu::number::impl::AffixUtils::escape(a2 + 608, (uint64_t)v34);
  memset(v33, 0, sizeof(v33));
  icu::number::impl::AffixUtils::escape(a2 + 128, (uint64_t)v33);
  memset(v32, 0, sizeof(v32));
  icu::number::impl::AffixUtils::escape(a2 + 256, (uint64_t)v32);
  if ((*(_WORD *)(a2 + 488) & 1) == 0)
  {
    uint64_t v6 = (UChar **)(a1 + 8);
    uint64_t v7 = (UChar **)v35;
LABEL_5:
    icu::UnicodeString::operator=(v6, v7);
    goto LABEL_7;
  }
  if ((*(_WORD *)(a2 + 552) & 1) == 0)
  {
    uint64_t v6 = (UChar **)(a1 + 8);
    uint64_t v7 = (UChar **)(a2 + 544);
    goto LABEL_5;
  }
  icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)&unk_18CAA19F2);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 8), (icu::UnicodeString *)v31);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v31);
LABEL_7:
  if ((*(_WORD *)(a2 + 616) & 1) == 0)
  {
    uint64_t v9 = (UChar **)(a1 + 72);
    uint64_t v10 = (UChar **)v34;
LABEL_11:
    icu::UnicodeString::operator=(v9, v10);
    goto LABEL_13;
  }
  if ((*(_WORD *)(a2 + 680) & 1) == 0)
  {
    uint64_t v9 = (UChar **)(a1 + 72);
    uint64_t v10 = (UChar **)(a2 + 672);
    goto LABEL_11;
  }
  icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)&unk_18CAA19F2);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 72), (icu::UnicodeString *)v31);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v31);
LABEL_13:
  if ((*(_WORD *)(a2 + 136) & 1) == 0)
  {
    uint64_t v12 = (UChar **)(a1 + 136);
    uint64_t v13 = (UChar **)v33;
LABEL_17:
    icu::UnicodeString::operator=(v12, v13);
    goto LABEL_18;
  }
  if ((*(_WORD *)(a2 + 200) & 1) == 0)
  {
    uint64_t v12 = (UChar **)(a1 + 136);
    uint64_t v13 = (UChar **)(a2 + 192);
    goto LABEL_17;
  }
  __int16 v17 = *(_WORD *)(a2 + 552);
  if (v17)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)L"-");
  }
  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v30, (uint64_t)L"-");
    icu::operator+((uint64_t)v30, a2 + 544, (uint64_t)v31);
  }
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 136), (icu::UnicodeString *)v31);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v31);
  if ((v17 & 1) == 0) {
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v30);
  }
LABEL_18:
  if (*(_WORD *)(a2 + 264))
  {
    if (*(_WORD *)(a2 + 328))
    {
      if (*(_WORD *)(a2 + 680)) {
        icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)&unk_18CAA19F2);
      }
      else {
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v31, (UChar **)(a2 + 672));
      }
      icu::UnicodeString::operator=((UChar **)(a1 + 200), v31);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v31);
      goto LABEL_32;
    }
    int v14 = (UChar **)(a1 + 200);
    uint64_t v15 = (UChar **)(a2 + 320);
  }
  else
  {
    int v14 = (UChar **)(a1 + 200);
    uint64_t v15 = (UChar **)v32;
  }
  icu::UnicodeString::operator=(v14, v15);
LABEL_32:
  BOOL v24 = (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 544), a3, v16) & 1) != 0
     || (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 672), a3, v21) & 1) != 0
     || (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 192), a3, v22) & 1) != 0
     || (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 320), a3, v23) & 1) != 0
     || *(unsigned char *)(a2 + 67) != 0;
  *(unsigned char *)(a1 + 264) = v24;
  int v25 = (void *)*(unsigned __int8 *)(a2 + 67);
  *(unsigned char *)(a1 + 265) = (_BYTE)v25;
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v32);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v33);
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v34);
  return icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v35);
}

uint64_t sub_18C975EB8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = a1 + 72;
  if ((a2 & 0x200) != 0) {
    uint64_t v3 = a1 + 200;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v3 = a1 + 8;
  }
  if ((~a2 & 0x300) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = a1 + 136;
  }
  unsigned int v5 = *(unsigned __int16 *)(v4 + 8);
  if (*(__int16 *)(v4 + 8) < 0) {
    unsigned int v6 = *(_DWORD *)(v4 + 12);
  }
  else {
    unsigned int v6 = v5 >> 5;
  }
  if (v6 <= a3) {
    return 0xFFFFLL;
  }
  if ((v5 & 2) != 0) {
    uint64_t v7 = v4 + 10;
  }
  else {
    uint64_t v7 = *(void *)(v4 + 24);
  }
  return *(unsigned __int16 *)(v7 + 2 * (int)a3);
}

uint64_t sub_18C975F24(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 72;
  if ((a2 & 0x200) != 0) {
    uint64_t v2 = a1 + 200;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v2 = a1 + 8;
  }
  if ((~a2 & 0x300) != 0) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = a1 + 136;
  }
  if (*(__int16 *)(v3 + 8) < 0) {
    return *(unsigned int *)(v3 + 12);
  }
  else {
    return *(unsigned __int16 *)(v3 + 8) >> 5;
  }
}

icu::UnicodeString *sub_18C975F6C@<X0>(UChar **a1@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  uint64_t v3 = a1 + 9;
  if ((a2 & 0x200) != 0) {
    uint64_t v3 = a1 + 25;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v3 = a1 + 1;
  }
  if ((~a2 & 0x300) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = a1 + 17;
  }
  return icu::UnicodeString::UnicodeString(a3, v4);
}

uint64_t sub_18C975FA0(uint64_t a1)
{
  uint64_t v4 = &unk_1EDA43700;
  uint64_t v5 = 0;
  if (icu::number::impl::AffixUtils::containsType(a1 + 8, -2, (int *)&v5)) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = icu::number::impl::AffixUtils::containsType(a1 + 72, -2, (int *)&v5);
  }
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v4);
  return v2;
}

uint64_t sub_18C976028(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(unsigned __int16 *)(a1 + 208);
  if (v2)
  {
    if (*(_WORD *)(a1 + 80)) {
      goto LABEL_13;
    }
    return 1;
  }
  else
  {
    if ((v2 & 0x8000) != 0) {
      int v3 = *(_DWORD *)(a1 + 212);
    }
    else {
      int v3 = v2 >> 5;
    }
    unsigned int v5 = *(unsigned __int16 *)(a1 + 80);
    if ((v5 & 0x8000u) == 0) {
      unsigned int v6 = v5 >> 5;
    }
    else {
      unsigned int v6 = *(_DWORD *)(a1 + 84);
    }
    BOOL v4 = 1;
    if ((v5 & 1) == 0
      && v3 == v6
      && icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 200), (const icu::UnicodeString *)(a1 + 72), v3))
    {
LABEL_13:
      icu::UnicodeString::tempSubString((icu::UnicodeString *)(a1 + 136), 1, 0x7FFFFFFF, (icu::UnicodeString *)v12);
      if (v13)
      {
        uint64_t v9 = (void *)*(unsigned __int16 *)(a1 + 16);
        if ((v9 & 1) == 0) {
          goto LABEL_30;
        }
      }
      else
      {
        if ((v13 & 0x8000u) == 0) {
          int v7 = v13 >> 5;
        }
        else {
          int v7 = v14;
        }
        unsigned int v8 = *(unsigned __int16 *)(a1 + 16);
        if ((v8 & 0x8000u) == 0) {
          uint64_t v9 = (void *)(v8 >> 5);
        }
        else {
          uint64_t v9 = (void *)*(unsigned int *)(a1 + 20);
        }
        BOOL v4 = 1;
        if ((v8 & 1) != 0
          || v7 != v9
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)v12, (const icu::UnicodeString *)(a1 + 8), v7))
        {
          goto LABEL_33;
        }
      }
      uint64_t v9 = (void *)*(unsigned __int16 *)(a1 + 144);
      if (*(__int16 *)(a1 + 144) < 0)
      {
        if (*(_DWORD *)(a1 + 148)) {
          goto LABEL_27;
        }
      }
      else if (v9 >> 5)
      {
LABEL_27:
        if ((v9 & 2) != 0) {
          uint64_t v10 = (unsigned __int16 *)(a1 + 146);
        }
        else {
          uint64_t v10 = *(unsigned __int16 **)(a1 + 160);
        }
        uint64_t v9 = (void *)*v10;
        BOOL v4 = v9 != 45;
        goto LABEL_33;
      }
LABEL_30:
      BOOL v4 = 1;
LABEL_33:
      icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
    }
  }
  return v4;
}

uint64_t sub_18C97619C(uint64_t a1)
{
  BOOL v4 = &unk_1EDA43700;
  uint64_t v5 = 0;
  if (icu::number::impl::AffixUtils::containsType(a1 + 136, -1, (int *)&v5)) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = icu::number::impl::AffixUtils::containsType(a1 + 200, -1, (int *)&v5);
  }
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v4);
  return v2;
}

uint64_t sub_18C976224(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 264);
}

uint64_t sub_18C97622C(uint64_t a1, int a2, int *a3)
{
  if ((icu::number::impl::AffixUtils::containsType(a1 + 8, a2, a3) & 1) != 0
    || (icu::number::impl::AffixUtils::containsType(a1 + 72, a2, a3) & 1) != 0
    || (icu::number::impl::AffixUtils::containsType(a1 + 136, a2, a3) & 1) != 0)
  {
    return 1;
  }

  return icu::number::impl::AffixUtils::containsType(a1 + 200, a2, a3);
}

uint64_t sub_18C9762C0()
{
  return 1;
}

uint64_t sub_18C9762C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 265);
}

void *sub_18C9762D0(uint64_t a1, icu::CurrencyPluralInfo *a2, uint64_t *a3, const icu::UnicodeString *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 2184) = 0;
  bzero(v22, 0x2F0uLL);
  uint64_t v21 = *a3;
  v22[0] = *((unsigned char *)a3 + 8);
  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)&v23, (const UChar *)a3 + 8);
  sub_18C91410C(&v24, (uint64_t **)a3 + 6);
  long long v26 = *(_OWORD *)(a3 + 9);
  long long v27 = *(_OWORD *)(a3 + 11);
  long long v28 = *(_OWORD *)(a3 + 13);
  uint64_t v29 = a3[15];
  long long v25 = *(_OWORD *)(a3 + 7);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v30, (UChar **)a3 + 16);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v31, (UChar **)a3 + 24);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v32, (UChar **)a3 + 32);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v33, (UChar **)a3 + 40);
  v33[8] = a3[48];
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v34, (UChar **)a3 + 49);
  _OWORD v34[4] = *(_OWORD *)(a3 + 57);
  int v35 = *((_DWORD *)a3 + 118);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v36, (UChar **)a3 + 60);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v37, (UChar **)a3 + 68);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v38, (UChar **)a3 + 76);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v39, (UChar **)a3 + 84);
  uint64_t v8 = 0;
  *(void *)&v40[14] = *(uint64_t *)((char *)a3 + 750);
  *(_OWORD *)double v40 = *((_OWORD *)a3 + 46);
  uint64_t v9 = a1 + 8;
  do
  {
    int Keyword = icu::StandardPlural::getKeyword(v8);
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    uint64_t v16 = (UChar *)&unk_1EDA47700;
    LOWORD(v17) = 2;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v15, Keyword);
    CurrencyPluralPattern = icu::CurrencyPluralInfo::getCurrencyPluralPattern(a2, (const icu::UnicodeString *)v15, &v16);
    icu::UnicodeString::operator=(&v16, CurrencyPluralPattern);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
    icu::number::impl::PatternParser::parseToExistingProperties(&v16, &v21);
    sub_18C975BB8(v9, (uint64_t)&v21, a4);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v16);
    ++v8;
    v9 += 272;
  }
  while (v8 != 8);
  return sub_18C914194(&v21);
}

uint64_t sub_18C976510(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 272 * a2 + 8) + 16))();
}

uint64_t sub_18C976540(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 272 * a2 + 8) + 24))();
}

uint64_t sub_18C976570(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 272 * a2 + 8) + 32))();
}

uint64_t sub_18C9765A0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 48))(a1 + 1368);
}

uint64_t sub_18C9765CC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 56))(a1 + 1368);
}

uint64_t sub_18C9765F8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 64))(a1 + 1368);
}

uint64_t sub_18C976624(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 40))(a1 + 1368);
}

uint64_t sub_18C976650(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 72))(a1 + 1368);
}

uint64_t sub_18C97667C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 80))(a1 + 1368);
}

uint64_t sub_18C9766A8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 88))(a1 + 1368);
}

void sub_18C9766D4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4F2F0;
  uint64_t v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 200));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 136));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v2);

  icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)a1);
}

void sub_18C976748(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA4F2F0;
  int v3 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 200));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 136));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v6, v3);
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)a1);

  icu::UMemory::operator delete(v7);
}

void sub_18C9767C0(icu::number::impl::AffixPatternProvider *a1)
{
  uint64_t v2 = 0;
  *(void *)a1 = &unk_1EDA4F398;
  do
  {
    *(void *)((char *)a1 + v2 + 1912) = &unk_1EDA4F2F0;
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 + 2112));
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 + 2048));
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 + 1984));
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 + 1920));
    icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 + 1912));
    v2 -= 272;
  }
  while (v2 != -2176);

  icu::number::impl::AffixPatternProvider::~AffixPatternProvider(a1);
}

void sub_18C976884(icu::number::impl::AffixPatternProvider *a1)
{
  uint64_t v2 = 0;
  *(void *)a1 = &unk_1EDA4F398;
  int v3 = (char *)a1 + 1912;
  do
  {
    *(void *)((char *)a1 + v2 + 1912) = &unk_1EDA4F2F0;
    icu::UnicodeString::~UnicodeString(&v3[v2], (icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 + 2112));
    icu::UnicodeString::~UnicodeString(v4, (icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 + 2048));
    icu::UnicodeString::~UnicodeString(v5, (icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 + 1984));
    icu::UnicodeString::~UnicodeString(v6, (icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 + 1920));
    icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 + 1912));
    v2 -= 272;
  }
  while (v2 != -2176);
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider(a1);

  icu::UMemory::operator delete(v7);
}

void *icu::number::impl::Modifier::Parameters::Parameters(void *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

uint64_t icu::number::impl::Modifier::Parameters::Parameters(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  return result;
}

{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  return result;
}

void icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore(icu::number::impl::AdoptingSignumModifierStore *this)
{
  *(void *)this = &unk_1EDA4F440;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
}

{
  uint64_t i;
  uint64_t v3;

  *(void *)this = &unk_1EDA4F440;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
}

{
  uint64_t i;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDA4F440;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }

  icu::UMemory::operator delete(this);
}

uint64_t icu::number::impl::AdoptingSignumModifierStore::operator=(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 8; i != 40; i += 8)
  {
    *(void *)(result + i) = *(void *)(a2 + i);
    *(void *)(a2 + i) = 0;
  }
  return result;
}

uint64_t icu::number::impl::ConstantAffixModifier::apply(icu::number::impl::ConstantAffixModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  int v9 = icu::FormattedStringBuilder::insert(a2, a4, (uint64_t)this + 80, *((unsigned char *)this + 144), 0, a5);
  return icu::FormattedStringBuilder::insert(a2, a3, (uint64_t)this + 16, *((unsigned char *)this + 144), 0, a5)
       + v9;
}

uint64_t icu::number::impl::ConstantAffixModifier::getPrefixLength(icu::number::impl::ConstantAffixModifier *this)
{
  if (*((__int16 *)this + 12) < 0) {
    return *((unsigned int *)this + 7);
  }
  else {
    return *((unsigned __int16 *)this + 12) >> 5;
  }
}

uint64_t icu::number::impl::ConstantAffixModifier::getCodePointCount(icu::number::impl::ConstantAffixModifier *this)
{
  int v2 = icu::UnicodeString::countChar32((icu::number::impl::ConstantAffixModifier *)((char *)this + 16), 0, 0x7FFFFFFF);
  return icu::UnicodeString::countChar32((icu::number::impl::ConstantAffixModifier *)((char *)this + 80), 0, 0x7FFFFFFF)+ v2;
}

uint64_t icu::number::impl::ConstantAffixModifier::isStrong(icu::number::impl::ConstantAffixModifier *this)
{
  return *((unsigned __int8 *)this + 145);
}

void icu::number::impl::ConstantAffixModifier::containsField()
{
}

void icu::number::impl::ConstantAffixModifier::getParameters(icu::number::impl::ConstantAffixModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
}

uint64_t icu::number::impl::ConstantAffixModifier::semanticallyEquivalent(icu::number::impl::ConstantAffixModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  unsigned int v5 = *((unsigned __int16 *)this + 12);
  if (v5)
  {
    if ((*(_WORD *)(result + 24) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if ((v5 & 0x8000) != 0) {
      int v6 = *((_DWORD *)this + 7);
    }
    else {
      int v6 = v5 >> 5;
    }
    uint64_t result = 0;
    unsigned int v7 = *(unsigned __int16 *)(v4 + 24);
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *(_DWORD *)(v4 + 28);
    }
    if (v7) {
      return result;
    }
    if (v6 != v8) {
      return result;
    }
    uint64_t result = icu::UnicodeString::doEquals((icu::number::impl::ConstantAffixModifier *)((char *)this + 16), (const icu::UnicodeString *)(v4 + 16), v6);
    if (!result) {
      return result;
    }
  }
  unsigned int v9 = *((unsigned __int16 *)this + 44);
  if (v9)
  {
    if (*(_WORD *)(v4 + 88)) {
      goto LABEL_26;
    }
    return 0;
  }
  if ((v9 & 0x8000) != 0) {
    int v10 = *((_DWORD *)this + 23);
  }
  else {
    int v10 = v9 >> 5;
  }
  uint64_t result = 0;
  unsigned int v11 = *(unsigned __int16 *)(v4 + 88);
  if ((v11 & 0x8000u) == 0) {
    unsigned int v12 = v11 >> 5;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 92);
  }
  if ((v11 & 1) == 0 && v10 == v12)
  {
    uint64_t result = icu::UnicodeString::doEquals((icu::number::impl::ConstantAffixModifier *)((char *)this + 80), (const icu::UnicodeString *)(v4 + 80), v10);
    if (result)
    {
LABEL_26:
      if (*((unsigned __int8 *)this + 144) == *(unsigned __int8 *)(v4 + 144)) {
        return *((unsigned __int8 *)this + 145) == *(unsigned __int8 *)(v4 + 145);
      }
      return 0;
    }
  }
  return result;
}

uint64_t icu::number::impl::SimpleModifier::SimpleModifier(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  return icu::number::impl::SimpleModifier::SimpleModifier(a1, a2, a3, a4, 0, a6);
}

{
  unsigned int v11;
  _WORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  *(void *)a1 = &unk_1EDA4F4A8;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), (UChar **)(a2 + 8));
  *(unsigned char *)(a1 + 72) = a3;
  *(unsigned char *)(a1 + 73) = a4;
  *(void *)(a1 + 88) = a5;
  *(void *)(a1 + 96) = a6;
  unsigned int v11 = *(unsigned __int16 *)(a1 + 16);
  if ((v11 & 0x11) != 0)
  {
    unsigned int v12 = 0;
  }
  else if ((v11 & 2) != 0)
  {
    unsigned int v12 = (_WORD *)(a1 + 18);
  }
  else
  {
    unsigned int v12 = *(_WORD **)(a1 + 32);
  }
  unsigned __int16 v13 = v11 >> 5;
  if ((v11 & 0x8000) != 0)
  {
    if (!*(_DWORD *)(a1 + 20)) {
      goto LABEL_13;
    }
  }
  else if (!v13)
  {
    goto LABEL_13;
  }
  if (*v12)
  {
    if ((v11 & 0x8000) != 0) {
      int v14 = *(_DWORD *)(a1 + 20);
    }
    else {
      int v14 = v11 >> 5;
    }
    if (v14 < 2 || ((v11 & 2) != 0 ? (long long v18 = a1 + 18) : (long long v18 = *(void *)(a1 + 32)), *(_WORD *)(v18 + 2)))
    {
      if ((v11 & 0x8000) != 0) {
        long long v19 = *(_DWORD *)(a1 + 20);
      }
      else {
        long long v19 = v11 >> 5;
      }
      if (v19 < 2)
      {
        uint64_t v21 = 0xFFFF;
      }
      else
      {
        if ((v11 & 2) != 0) {
          uint64_t v20 = a1 + 18;
        }
        else {
          uint64_t v20 = *(void *)(a1 + 32);
        }
        uint64_t v21 = *(unsigned __int16 *)(v20 + 2);
      }
      *(_DWORD *)(a1 + 76) = v21 - 256;
      int v22 = v21 - 253;
      uint64_t v23 = v21 - 253;
    }
    else
    {
      *(_DWORD *)(a1 + 76) = 0;
      uint64_t v23 = 2;
      int v22 = 3;
    }
    *(_DWORD *)(a1 + 80) = v23;
    if ((v11 & 0x8000) != 0)
    {
      unsigned __int16 v13 = *(_DWORD *)(a1 + 20);
      if (v22 < (int)v13)
      {
LABEL_40:
        if (v13 <= v23)
        {
          long long v17 = 65279;
        }
        else
        {
          if ((v11 & 2) != 0) {
            BOOL v24 = a1 + 18;
          }
          else {
            BOOL v24 = *(void *)(a1 + 32);
          }
          long long v17 = *(unsigned __int16 *)(v24 + 2 * v23) - 256;
        }
        goto LABEL_49;
      }
    }
    else if (v22 < (int)(v11 >> 5))
    {
      goto LABEL_40;
    }
    long long v17 = 0;
    goto LABEL_49;
  }
LABEL_13:
  if ((v11 & 0x8000) != 0) {
    unsigned __int16 v13 = *(_DWORD *)(a1 + 20);
  }
  if (v13 < 2)
  {
    uint64_t v16 = 65279;
  }
  else
  {
    if ((v11 & 2) != 0) {
      uint64_t v15 = a1 + 18;
    }
    else {
      uint64_t v15 = *(void *)(a1 + 32);
    }
    uint64_t v16 = *(unsigned __int16 *)(v15 + 2) - 256;
  }
  long long v17 = 0;
  *(_DWORD *)(a1 + 76) = v16;
  *(_DWORD *)(a1 + 80) = -1;
LABEL_49:
  *(_DWORD *)(a1 + 84) = v17;
  return a1;
}

{
  return icu::number::impl::SimpleModifier::SimpleModifier(a1, a2, a3, a4, 0, a6);
}

{
  return icu::number::impl::SimpleModifier::SimpleModifier(a1, a2, a3, a4, a5, a6);
}

double icu::number::impl::SimpleModifier::SimpleModifier(icu::number::impl::SimpleModifier *this)
{
  *(void *)this = &unk_1EDA4F4A8;
  *((void *)this + 1) = &unk_1EDA47700;
  *((_WORD *)this + 8) = 2;
  *((_WORD *)this + 36) = 0;
  double result = NAN;
  *(void *)((char *)this + 76) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 21) = 0;
  *((void *)this + 11) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDA4F4A8;
  *((void *)this + 1) = &unk_1EDA47700;
  *((_WORD *)this + 8) = 2;
  *((_WORD *)this + 36) = 0;
  double result = NAN;
  *(void *)((char *)this + 76) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 21) = 0;
  *((void *)this + 11) = 0;
  return result;
}

uint64_t icu::number::impl::SimpleModifier::formatAsPrefixSuffix(icu::number::impl::SimpleModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  int v9 = *((_DWORD *)this + 19);
  if (*((_DWORD *)this + 20) == -1 && *((_DWORD *)this + 21) + v9 >= 1)
  {
    char v12 = *((unsigned char *)this + 72);
    return icu::FormattedStringBuilder::splice(a2, a3, a4, (uint64_t)this + 8, 2u, v9 + 2, v12, a5);
  }
  else
  {
    if (v9 >= 1)
    {
      icu::FormattedStringBuilder::insert(a2, a3, (uint64_t)this + 8, 2u, v9 + 2, *((unsigned char *)this + 72), 0, a5);
      int v9 = *((_DWORD *)this + 19);
    }
    int v10 = *((_DWORD *)this + 21);
    if (v10 >= 1)
    {
      icu::FormattedStringBuilder::insert(a2, v9 + a4, (uint64_t)this + 8, *((_DWORD *)this + 20) + 1, *((_DWORD *)this + 20) + 1 + v10, *((unsigned char *)this + 72), 0, a5);
      int v9 = *((_DWORD *)this + 19);
      int v10 = *((_DWORD *)this + 21);
    }
    return (v10 + v9);
  }
}

uint64_t icu::number::impl::SimpleModifier::getPrefixLength(icu::number::impl::SimpleModifier *this)
{
  return *((unsigned int *)this + 19);
}

uint64_t icu::number::impl::SimpleModifier::getCodePointCount(icu::number::impl::SimpleModifier *this)
{
  int32_t v2 = *((_DWORD *)this + 19);
  if (v2 < 1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = icu::UnicodeString::countChar32((icu::number::impl::SimpleModifier *)((char *)this + 8), 2, v2);
  }
  int32_t v4 = *((_DWORD *)this + 21);
  if (v4 >= 1) {
    return icu::UnicodeString::countChar32((icu::number::impl::SimpleModifier *)((char *)this + 8), *((_DWORD *)this + 20) + 1, v4)+ v3;
  }
  return v3;
}

uint64_t icu::number::impl::SimpleModifier::isStrong(icu::number::impl::SimpleModifier *this)
{
  return *((unsigned __int8 *)this + 73);
}

void icu::number::impl::SimpleModifier::containsField()
{
}

__n128 icu::number::impl::SimpleModifier::getParameters(icu::number::impl::SimpleModifier *this, __n128 *a2)
{
  __n128 result = *(__n128 *)((char *)this + 88);
  *a2 = result;
  return result;
}

uint64_t icu::number::impl::SimpleModifier::semanticallyEquivalent(icu::number::impl::SimpleModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *((void *)this + 11);
    if (v5) {
      return v5 == *(void *)(result + 88);
    }
    unsigned int v7 = *((unsigned __int16 *)this + 8);
    if (v7)
    {
      if ((*(_WORD *)(result + 16) & 1) == 0) {
        return 0;
      }
      goto LABEL_19;
    }
    if ((v7 & 0x8000) != 0) {
      int v8 = *((_DWORD *)this + 5);
    }
    else {
      int v8 = v7 >> 5;
    }
    uint64_t result = 0;
    unsigned int v9 = *(unsigned __int16 *)(v4 + 16);
    if ((v9 & 0x8000u) == 0) {
      unsigned int v10 = v9 >> 5;
    }
    else {
      unsigned int v10 = *(_DWORD *)(v4 + 20);
    }
    if ((v9 & 1) == 0 && v8 == v10)
    {
      uint64_t result = icu::UnicodeString::doEquals((icu::number::impl::SimpleModifier *)((char *)this + 8), (const icu::UnicodeString *)(v4 + 8), v8);
      if (result)
      {
LABEL_19:
        if (*((unsigned __int8 *)this + 72) == *(unsigned __int8 *)(v4 + 72)) {
          return *((unsigned __int8 *)this + 73) == *(unsigned __int8 *)(v4 + 73);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t icu::number::impl::SimpleModifier::formatTwoArgPattern(uint64_t a1, icu::FormattedStringBuilder *a2, int a3, _DWORD *a4, int *a5, char a6, UErrorCode *a7)
{
  unsigned int v14 = *(unsigned __int16 *)(a1 + 16);
  if ((v14 & 0x11) != 0)
  {
    uint64_t v15 = 0;
  }
  else if ((v14 & 2) != 0)
  {
    uint64_t v15 = (_WORD *)(a1 + 18);
  }
  else
  {
    uint64_t v15 = *(_WORD **)(a1 + 32);
  }
  unsigned int v16 = v14 >> 5;
  unsigned int v17 = *(_DWORD *)(a1 + 20);
  if ((v14 & 0x8000u) == 0) {
    unsigned int v18 = v14 >> 5;
  }
  else {
    unsigned int v18 = *(_DWORD *)(a1 + 20);
  }
  if (v18 && *v15 == 2)
  {
    uint64_t v33 = a1 + 8;
    if (v18 < 2)
    {
      unsigned int v20 = 0xFFFF;
    }
    else
    {
      uint64_t v19 = a1 + 18;
      if ((v14 & 2) == 0) {
        uint64_t v19 = *(void *)(a1 + 32);
      }
      unsigned int v20 = *(unsigned __int16 *)(v19 + 2);
      if (v20 < 0x100)
      {
        uint64_t v21 = 0;
        unsigned int v22 = 2;
        goto LABEL_19;
      }
    }
    uint64_t v21 = v20 - 256;
    icu::FormattedStringBuilder::insert(a2, a3, a1 + 8, 2u, v20 - 254, a6, 0, a7);
    unsigned int v22 = v20 - 253;
    unsigned int v14 = *(unsigned __int16 *)(a1 + 16);
    unsigned int v17 = *(_DWORD *)(a1 + 20);
    unsigned int v16 = v14 >> 5;
LABEL_19:
    if ((v14 & 0x8000u) == 0) {
      unsigned int v17 = v16;
    }
    if (v17 <= v22)
    {
      unsigned int v26 = v22 + 1;
      unsigned int v25 = 0xFFFF;
    }
    else
    {
      uint64_t v24 = a1 + 18;
      if ((v14 & 2) == 0) {
        uint64_t v24 = *(void *)(a1 + 32);
      }
      unsigned int v25 = *(unsigned __int16 *)(v24 + 2 * v22);
      unsigned int v26 = v22 + 1;
      uint64_t v23 = v21;
      if (v25 < 0x100)
      {
        if ((v14 & 0x8000) == 0) {
          goto LABEL_26;
        }
        goto LABEL_30;
      }
    }
    unsigned int v28 = v25 - 256;
    int v29 = v25 - 256 + v26;
    icu::FormattedStringBuilder::insert(a2, v21 + a3, v33, v26, v29, a6, 0, a7);
    uint64_t v23 = v28 + v21;
    unsigned int v26 = v29 + 1;
    unsigned int v14 = *(unsigned __int16 *)(a1 + 16);
    if ((v14 & 0x8000) == 0)
    {
LABEL_26:
      if (v26 != v14 >> 5)
      {
        unsigned int v27 = v14 >> 5;
LABEL_32:
        if (v27 <= v26)
        {
          int v30 = 65279;
        }
        else
        {
          if ((v14 & 2) != 0) {
            uint64_t v31 = a1 + 18;
          }
          else {
            uint64_t v31 = *(void *)(a1 + 32);
          }
          int v30 = *(unsigned __int16 *)(v31 + 2 * v26) - 256;
        }
        icu::FormattedStringBuilder::insert(a2, v23 + a3, v33, v26 + 1, v30 + v26 + 1, a6, 0, a7);
        uint64_t v23 = (v30 + v23);
        goto LABEL_39;
      }
LABEL_31:
      int v30 = 0;
LABEL_39:
      *a4 = v21;
      *a5 = v30;
      return v23;
    }
LABEL_30:
    unsigned int v27 = *(_DWORD *)(a1 + 20);
    if (v26 != v27) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v23 = 0;
  *a7 = U_INTERNAL_PROGRAM_ERROR;
  return v23;
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::apply(icu::number::impl::ConstantMultiFieldModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v10 = icu::FormattedStringBuilder::insert(a2, a3, (icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8), a5);
  int v11 = v10;
  if (*((unsigned char *)this + 280))
  {
    unsigned int v14 = &unk_1EDA47700;
    __int16 v15 = 2;
    int v11 = icu::FormattedStringBuilder::splice(a2, v10 + a3, v10 + a4, (uint64_t)&v14, 0, 0, 0, a5) + v10;
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v14);
  }
  return icu::FormattedStringBuilder::insert(a2, v11 + a4, (icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 144), a5)+ v11;
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::getPrefixLength(icu::number::impl::ConstantMultiFieldModifier *this)
{
  return icu::FormattedStringBuilder::length((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8));
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::getCodePointCount(icu::number::impl::ConstantMultiFieldModifier *this)
{
  int v2 = icu::FormattedStringBuilder::codePointCount((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8));
  return icu::FormattedStringBuilder::codePointCount((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 144))
       + v2;
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::isStrong(icu::number::impl::ConstantMultiFieldModifier *this)
{
  return *((unsigned __int8 *)this + 281);
}

BOOL icu::number::impl::ConstantMultiFieldModifier::containsField(uint64_t a1, unsigned __int8 a2)
{
  if (icu::FormattedStringBuilder::containsField(a1 + 8, a2)) {
    return 1;
  }

  return icu::FormattedStringBuilder::containsField(a1 + 144, a2);
}

__n128 icu::number::impl::ConstantMultiFieldModifier::getParameters(__n128 *this, __n128 *a2)
{
  __n128 result = this[18];
  *a2 = result;
  return result;
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::semanticallyEquivalent(icu::number::impl::ConstantMultiFieldModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  if (result)
  {
    uint64_t v4 = (unsigned __int8 *)result;
    uint64_t v5 = *((void *)this + 36);
    if (v5) {
      return v5 == *(void *)(result + 288);
    }
    uint64_t result = icu::FormattedStringBuilder::contentEquals((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8), (const icu::FormattedStringBuilder *)(result + 8));
    if (result)
    {
      uint64_t result = icu::FormattedStringBuilder::contentEquals((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 144), (const icu::FormattedStringBuilder *)(v4 + 144));
      if (result)
      {
        if (*((unsigned __int8 *)this + 280) != v4[280]) {
          return 0;
        }
        return *((unsigned __int8 *)this + 281) == v4[281];
      }
    }
  }
  return result;
}

icu::number::impl::CurrencySpacingEnabledModifier *icu::number::impl::CurrencySpacingEnabledModifier::CurrencySpacingEnabledModifier(icu::number::impl::CurrencySpacingEnabledModifier *this, const icu::FormattedStringBuilder *a2, const icu::FormattedStringBuilder *a3, char a4, char a5, const icu::DecimalFormatSymbols *a6, UErrorCode *a7)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EDA4F6A0;
  icu::FormattedStringBuilder::FormattedStringBuilder((uint64_t)this + 8, (uint64_t)a2);
  icu::FormattedStringBuilder::FormattedStringBuilder((uint64_t)this + 144, (uint64_t)a3);
  *((unsigned char *)this + 280) = a4;
  *((unsigned char *)this + 281) = a5;
  *((void *)this + 36) = 0;
  *(void *)this = &unk_1EDA4F570;
  icu::UnicodeSet::UnicodeSet((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
  *((void *)this + 63) = &unk_1EDA47700;
  *((_WORD *)this + 256) = 2;
  icu::UnicodeSet::UnicodeSet((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
  *((void *)this + 96) = &unk_1EDA47700;
  *((_WORD *)this + 388) = 2;
  if ((int)icu::FormattedStringBuilder::length(a2) < 1) {
    goto LABEL_7;
  }
  int v14 = icu::FormattedStringBuilder::length(a2);
  __int16 v15 = (char *)a2 + 88;
  if (*(unsigned char *)a2) {
    __int16 v15 = (char *)*((void *)a2 + 11);
  }
  if (v15[*((int *)a2 + 32) - 1 + (uint64_t)v14] == 39)
  {
    int LastCodePoint = icu::FormattedStringBuilder::getLastCodePoint(a2);
    uint64_t v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 0, 0, a7, (icu::UnicodeSet *)&v28);
    if (icu::UnicodeSet::contains((icu::UnicodeSet *)&v28, LastCodePoint))
    {
      icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 1, 0, a7, (icu::UnicodeSet *)v41);
      icu::UnicodeSet::operator=((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304), (const icu::UnicodeSet *)v41);
      icu::UnicodeSet::~UnicodeSet(v17, (icu::UnicodeSet *)v41);
      icu::UnicodeSet::freeze((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
      PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing((uint64_t)a6, 2, 0, (int *)a7);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v41, PatternForCurrencySpacing);
      icu::UnicodeString::operator=((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 504), (icu::UnicodeString *)v41);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v41);
    }
    else
    {
      icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
      icu::UnicodeString::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 504));
    }
    icu::UnicodeSet::~UnicodeSet(v20, (icu::UnicodeSet *)&v28);
  }
  else
  {
LABEL_7:
    icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
    icu::UnicodeString::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 504));
  }
  if ((int)icu::FormattedStringBuilder::length(a3) >= 1
    && (*(unsigned char *)a3 ? (uint64_t v21 = (char *)*((void *)a3 + 11)) : (uint64_t v21 = (char *)a3 + 88), v21[*((int *)a3 + 32)] == 39))
  {
    int FirstCodePoint = icu::FormattedStringBuilder::getFirstCodePoint(a3);
    uint64_t v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 0, 1, a7, (icu::UnicodeSet *)&v28);
    if (icu::UnicodeSet::contains((icu::UnicodeSet *)&v28, FirstCodePoint))
    {
      icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 1, 1, a7, (icu::UnicodeSet *)v41);
      icu::UnicodeSet::operator=((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568), (const icu::UnicodeSet *)v41);
      icu::UnicodeSet::~UnicodeSet(v23, (icu::UnicodeSet *)v41);
      icu::UnicodeSet::freeze((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
      uint64_t v24 = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing((uint64_t)a6, 2, 1, (int *)a7);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v41, v24);
      icu::UnicodeString::operator=((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 768), (icu::UnicodeString *)v41);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v41);
    }
    else
    {
      icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
      icu::UnicodeString::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 768));
    }
    icu::UnicodeSet::~UnicodeSet(v26, (icu::UnicodeSet *)&v28);
  }
  else
  {
    icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
    icu::UnicodeString::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 768));
  }
  return this;
}

void icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, UErrorCode *a4@<X3>, icu::UnicodeSet *a5@<X8>)
{
  if (*(int *)a4 > 0)
  {
LABEL_8:
    icu::UnicodeSet::UnicodeSet(a5);
    return;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E91924F8, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit((atomic_uint *)&dword_1E91924F8))
  {
    sub_18C978130(a4);
    dword_1E91924FC = *a4;
    icu::umtx_initImplPostInit(&dword_1E91924F8);
    goto LABEL_7;
  }
  if (dword_1E91924FC >= 1)
  {
    *a4 = dword_1E91924FC;
    goto LABEL_8;
  }
LABEL_7:
  if (*(int *)a4 >= 1) {
    goto LABEL_8;
  }
  uint64_t PatternForCurrencySpacing = icu::DecimalFormatSymbols::getPatternForCurrencySpacing(a1, a2 != 0, a3 == 1, (int *)a4);
  uint64_t v11 = PatternForCurrencySpacing;
  unsigned int v12 = *(unsigned __int16 *)(PatternForCurrencySpacing + 8);
  int v13 = (__int16)v12;
  int32_t v14 = v12 >> 5;
  if (v13 >= 0) {
    int32_t v15 = v14;
  }
  else {
    int32_t v15 = *(_DWORD *)(PatternForCurrencySpacing + 12);
  }
  if (icu::UnicodeString::doCompare(PatternForCurrencySpacing, 0, v15, (uint64_t)&unk_18CAA1C16, 0, -1))
  {
    unsigned int v16 = *(unsigned __int16 *)(v11 + 8);
    int v17 = (__int16)v16;
    int32_t v18 = v16 >> 5;
    if (v17 >= 0) {
      int32_t v19 = v18;
    }
    else {
      int32_t v19 = *(_DWORD *)(v11 + 12);
    }
    if (icu::UnicodeString::doCompare(v11, 0, v19, (uint64_t)L"[[:^S:]&[:^Z:]]", 0, -1))
    {
      icu::UnicodeSet::UnicodeSet(a5, (const icu::UnicodeString *)v11, a4);
      return;
    }
    unsigned int v20 = (const icu::UnicodeSet *)qword_1E91924F0;
  }
  else
  {
    unsigned int v20 = (const icu::UnicodeSet *)qword_1E91924E8;
  }

  icu::UnicodeSet::UnicodeSet(a5, v20);
}

icu::UnicodeString *icu::number::impl::CurrencySpacingEnabledModifier::getInsertString@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::UnicodeString *a4@<X8>)
{
  uint64_t PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing(a1, 2, a2 == 1, a3);

  return icu::UnicodeString::UnicodeString(a4, PatternForCurrencySpacing);
}

uint64_t icu::number::impl::CurrencySpacingEnabledModifier::apply(icu::number::impl::CurrencySpacingEnabledModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  if (a4 <= a3)
  {
    int v11 = 0;
  }
  else
  {
    if ((*((unsigned char *)this + 336) & 1) != 0
      || (int v10 = icu::FormattedStringBuilder::codePointAt(a2, a3),
          !icu::UnicodeSet::contains((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304), v10)))
    {
      int v11 = 0;
    }
    else
    {
      int v11 = icu::FormattedStringBuilder::insert(a2, a3, (uint64_t)this + 504, 0, 0, a5);
    }
    if ((*((unsigned char *)this + 600) & 1) == 0)
    {
      int v12 = icu::FormattedStringBuilder::codePointBefore(a2, a4);
      if (icu::UnicodeSet::contains((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568), v12))v11 += icu::FormattedStringBuilder::insert(a2, v11 + a4, (uint64_t)this + 768, 0, 0, a5); {
    }
      }
  }
  return icu::number::impl::ConstantMultiFieldModifier::apply(this, a2, a3, v11 + a4, a5) + v11;
}

uint64_t icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacing(icu::number::impl::CurrencySpacingEnabledModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, int a5, uint64_t a6, UErrorCode *a7, UErrorCode *a8)
{
  uint64_t v13 = 0;
  int v14 = a3 + a2;
  int v15 = a4 - v14;
  if (a3 >= 1 && v15 >= 1) {
    uint64_t v13 = icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacingAffix(this, v14, 0, a6, a7);
  }
  if (a5 >= 1 && v15 >= 1) {
    return icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacingAffix(this, (int)v13 + a4, 1, a6, a7)+ v13;
  }
  return v13;
}

uint64_t icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacingAffix(icu::FormattedStringBuilder *this, int a2, int a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    int v12 = (char *)this + 88;
    if (*(unsigned char *)this) {
      int v12 = (char *)*((void *)this + 11);
    }
    if (v12[*((int *)this + 32) - 1 + (uint64_t)a2] == 39)
    {
      int v11 = icu::FormattedStringBuilder::codePointBefore(this, a2);
      goto LABEL_11;
    }
    return 0;
  }
  if (*(unsigned char *)this) {
    int v10 = (char *)*((void *)this + 11);
  }
  else {
    int v10 = (char *)this + 88;
  }
  if (v10[*((int *)this + 32) + (uint64_t)a2] != 39) {
    return 0;
  }
  int v11 = icu::FormattedStringBuilder::codePointAt(this, a2);
LABEL_11:
  int v13 = v11;
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet(a4, 0, a3, a5, (icu::UnicodeSet *)v24);
  if (icu::UnicodeSet::contains((icu::UnicodeSet *)v24, v13))
  {
    if (a3) {
      int v15 = icu::FormattedStringBuilder::codePointBefore(this, a2);
    }
    else {
      int v15 = icu::FormattedStringBuilder::codePointAt(this, a2);
    }
    int v17 = v15;
    uint64_t v23 = 0;
    memset(v22, 0, sizeof(v22));
    icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet(a4, 1, a3, a5, (icu::UnicodeSet *)v22);
    if (icu::UnicodeSet::contains((icu::UnicodeSet *)v22, v17))
    {
      memset(v26, 0, sizeof(v26));
      uint64_t PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing(a4, 2, a3 == 1, (int *)a5);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v26, PatternForCurrencySpacing);
      uint64_t v16 = icu::FormattedStringBuilder::insert(this, a2, (uint64_t)v26, 0, 0, a5);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v26);
    }
    else
    {
      uint64_t v16 = 0;
    }
    icu::UnicodeSet::~UnicodeSet(v18, (icu::UnicodeSet *)v22);
  }
  else
  {
    uint64_t v16 = 0;
  }
  icu::UnicodeSet::~UnicodeSet(v14, (icu::UnicodeSet *)v24);
  return v16;
}

icu::UnicodeSet *sub_18C978130(UErrorCode *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  sub_18CA0A25C(2u, (uint64_t)sub_18C9786F4);
  uint64_t v4 = icu::UMemory::operator new(v3, (icu::UMemory *)0xC8, v2);
  if (v4)
  {
    unsigned int v7 = (icu::UnicodeSet *)v4;
    icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)&unk_18CAA1C16);
    icu::UnicodeSet::UnicodeSet(v7, (const icu::UnicodeString *)v12, a1);
    qword_1E91924E8 = (uint64_t)v7;
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v12);
  }
  else
  {
    qword_1E91924E8 = 0;
  }
  uint64_t result = (icu::UnicodeSet *)icu::UMemory::operator new(v6, (icu::UMemory *)0xC8, v5);
  if (result)
  {
    int v10 = result;
    icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)L"[[:^S:]&[:^Z:]]");
    icu::UnicodeSet::UnicodeSet(v10, (const icu::UnicodeString *)v12, a1);
    qword_1E91924F0 = (uint64_t)v10;
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v12);
    uint64_t result = (icu::UnicodeSet *)qword_1E91924E8;
    if (qword_1E91924E8 && qword_1E91924F0)
    {
      icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_1E91924E8);
      return icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_1E91924F0);
    }
  }
  else
  {
    qword_1E91924F0 = 0;
  }
  *a1 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

void *sub_18C97825C(void *a1)
{
  *a1 = &unk_1EDA4F620;
  unint64_t v2 = (icu::UObject *)(a1 + 1);
  a1[1] = &unk_1EDA4F678;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 10));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 2));
  icu::UObject::~UObject(v2);
  return a1;
}

void sub_18C9782D4(void *a1@<X0>, void *a2@<X8>)
{
  *a1 = &unk_1EDA4F620;
  uint64_t v3 = (icu::UObject *)(a1 + 1);
  a1[1] = &unk_1EDA4F678;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 10));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 2));
  icu::UObject::~UObject(v3);

  icu::UMemory::operator delete(a1);
}

void sub_18C97835C(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_1EDA4F620;
  *(void *)a1 = &unk_1EDA4F678;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));

  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18C9783D8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(a1 - 8);
  *(void *)(a1 - 8) = &unk_1EDA4F620;
  *(void *)a1 = &unk_1EDA4F678;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 8));
  icu::UObject::~UObject((icu::UObject *)a1);

  icu::UMemory::operator delete(v3);
}

void *sub_18C97845C(void *a1)
{
  *a1 = &unk_1EDA4F6A0;
  unint64_t v2 = (icu::FormattedStringBuilder *)(a1 + 1);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 18));
  icu::FormattedStringBuilder::~FormattedStringBuilder(v2);
  return a1;
}

void sub_18C9784B0(void *a1)
{
  *a1 = &unk_1EDA4F6A0;
  unint64_t v2 = (icu::FormattedStringBuilder *)(a1 + 1);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 18));
  icu::FormattedStringBuilder::~FormattedStringBuilder(v2);

  icu::UMemory::operator delete(a1);
}

void *sub_18C978514(void *a1)
{
  *a1 = &unk_1EDA4F4A8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

void sub_18C978558(void *a1@<X0>, void *a2@<X8>)
{
  *a1 = &unk_1EDA4F4A8;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 1));

  icu::UMemory::operator delete(a1);
}

void *sub_18C9785AC(void *a1)
{
  *a1 = &unk_1EDA4F570;
  unint64_t v2 = (icu::FormattedStringBuilder *)(a1 + 18);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 96));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 71));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 63));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 38));
  *a1 = &unk_1EDA4F6A0;
  icu::FormattedStringBuilder::~FormattedStringBuilder(v2);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 1));
  return a1;
}

void sub_18C978648(void *a1@<X0>, void *a2@<X8>)
{
  *a1 = &unk_1EDA4F570;
  uint64_t v3 = (icu::FormattedStringBuilder *)(a1 + 18);
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 96));
  icu::UnicodeSet::~UnicodeSet(v4, (icu::UnicodeSet *)(a1 + 71));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 63));
  icu::UnicodeSet::~UnicodeSet(v6, (icu::UnicodeSet *)(a1 + 38));
  *a1 = &unk_1EDA4F6A0;
  icu::FormattedStringBuilder::~FormattedStringBuilder(v3);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 1));

  icu::UMemory::operator delete(a1);
}

uint64_t sub_18C9786F4@<X0>(void *a1@<X8>)
{
  if (qword_1E91924E8)
  {
    uint64_t v1 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_1E91924E8);
    icu::UMemory::operator delete(v1);
  }
  qword_1E91924E8 = 0;
  if (qword_1E91924F0)
  {
    unint64_t v2 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_1E91924F0);
    icu::UMemory::operator delete(v2);
  }
  qword_1E91924F0 = 0;
  atomic_store(0, &dword_1E91924F8);
  return 1;
}

icu::number::Scale *icu::number::Scale::Scale(icu::number::Scale *this, int a2, icu::number::impl::DecNum *a3)
{
  *(_DWORD *)this = a2;
  *((void *)this + 1) = a3;
  *((_DWORD *)this + 4) = 0;
  if (a3)
  {
    icu::number::impl::DecNum::normalize(a3);
    uint64_t v4 = (icu::number::impl::DecNum *)*((void *)this + 1);
    if (**(_DWORD **)v4 == 1
      && *(unsigned char *)(*(void *)v4 + 9) == 1
      && (icu::number::impl::DecNum::isNegative(v4) & 1) == 0)
    {
      unint64_t v5 = (unsigned char *)*((void *)this + 1);
      int v6 = *(void **)v5;
      *(_DWORD *)this += *(_DWORD *)(*(void *)v5 + 4);
      if (v5[12]) {
        uprv_free(v6);
      }
      icu::UMemory::operator delete(v5);
      *((void *)this + 1) = 0;
    }
  }
  return this;
}

icu::number::Scale *icu::number::Scale::Scale(icu::number::Scale *this, const icu::number::Scale *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  if (*((void *)a2 + 1))
  {
    UErrorCode v6 = U_ZERO_ERROR;
    uint64_t v4 = (icu::number::impl::DecNum *)icu::UMemory::operator new((icu::UMemory *)0x60, (unint64_t)a2);
    if (v4) {
      uint64_t v4 = (icu::number::impl::DecNum *)icu::number::impl::DecNum::DecNum(v4, *((const icu::number::impl::DecNum **)a2 + 1), &v6);
    }
    *((void *)this + 1) = v4;
  }
  return this;
}

uint64_t icu::number::Scale::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if (*(void *)(a2 + 8))
    {
      UErrorCode v6 = U_ZERO_ERROR;
      uint64_t v4 = (icu::number::impl::DecNum *)icu::UMemory::operator new((icu::UMemory *)0x60, a2);
      if (v4) {
        uint64_t v4 = (icu::number::impl::DecNum *)icu::number::impl::DecNum::DecNum(v4, *(const icu::number::impl::DecNum **)(a2 + 8), &v6);
      }
      *(void *)(a1 + 8) = v4;
    }
    else
    {
      *(void *)(a1 + 8) = 0;
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t icu::number::Scale::Scale(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  return result;
}

{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  return result;
}

uint64_t icu::number::Scale::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    if (*(unsigned char *)(v4 + 12)) {
      uprv_free(*(void **)v4);
    }
    icu::UMemory::operator delete((void *)v4);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  return a1;
}

void icu::number::Scale::~Scale(icu::number::Scale *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 12)) {
      uprv_free(*(void **)v1);
    }
    icu::UMemory::operator delete((void *)v1);
  }
}

void icu::number::Scale::none(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t icu::number::Scale::powerOfTen@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = this;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *icu::number::Scale::byDecimal@<X0>(const char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = a2;
  int v11 = 0;
  UErrorCode v6 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)a3, (icu::UMemory *)0x60, a2);
  if (!v6)
  {
    int v10 = 0;
    int v8 = 7;
    int v11 = 7;
    goto LABEL_5;
  }
  unsigned int v7 = v6;
  int v10 = icu::number::impl::DecNum::DecNum(v6);
  icu::number::impl::DecNum::setTo(v10, a1, v3, (UErrorCode *)&v11);
  int v8 = v11;
  if (v11 >= 1)
  {
LABEL_5:
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = v8;
    return sub_18C80C034((uint64_t *)&v10);
  }
  int v10 = 0;
  icu::number::Scale::Scale((icu::number::Scale *)a3, 0, v7);
  return sub_18C80C034((uint64_t *)&v10);
}

uint64_t *icu::number::Scale::byDouble@<X0>(double a1@<D0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  UErrorCode v11 = U_ZERO_ERROR;
  UErrorCode v6 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)a3, (icu::UMemory *)0x60, a2);
  if (!v6)
  {
    int v10 = 0;
    UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
    UErrorCode v11 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }
  unsigned int v7 = v6;
  int v10 = icu::number::impl::DecNum::DecNum(v6);
  icu::number::impl::DecNum::setTo(v10, a1, &v11);
  UErrorCode v8 = v11;
  if (v11 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_5:
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = v8;
    return sub_18C80C034((uint64_t *)&v10);
  }
  int v10 = 0;
  icu::number::Scale::Scale((icu::number::Scale *)a3, 0, v7);
  return sub_18C80C034((uint64_t *)&v10);
}

uint64_t *icu::number::Scale::byDoubleAndPowerOfTen@<X0>(icu::number::Scale *this@<X0>, double a2@<D0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  int v4 = (int)this;
  UErrorCode v12 = U_ZERO_ERROR;
  unsigned int v7 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)a4, (icu::UMemory *)0x60, a3);
  if (!v7)
  {
    UErrorCode v11 = 0;
    UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
    UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }
  UErrorCode v8 = v7;
  UErrorCode v11 = icu::number::impl::DecNum::DecNum(v7);
  icu::number::impl::DecNum::setTo(v11, a2, &v12);
  UErrorCode v9 = v12;
  if (v12 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_5:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = v9;
    return sub_18C80C034((uint64_t *)&v11);
  }
  UErrorCode v11 = 0;
  icu::number::Scale::Scale((icu::number::Scale *)a4, v4, v8);
  return sub_18C80C034((uint64_t *)&v11);
}

void icu::number::Scale::applyTo(icu::number::Scale *this, icu::number::impl::DecimalQuantity *a2)
{
  icu::number::impl::DecimalQuantity::adjustMagnitude(a2, *(_DWORD *)this);
  int v4 = (const icu::number::impl::DecNum *)*((void *)this + 1);
  if (v4)
  {
    UErrorCode v5 = U_ZERO_ERROR;
    icu::number::impl::DecimalQuantity::multiplyBy(a2, v4, &v5);
  }
}

void icu::number::Scale::applyReciprocalTo(icu::number::Scale *this, icu::number::impl::DecimalQuantity *a2)
{
  icu::number::impl::DecimalQuantity::adjustMagnitude(a2, -*(_DWORD *)this);
  int v4 = (const icu::number::impl::DecNum *)*((void *)this + 1);
  if (v4)
  {
    UErrorCode v5 = U_ZERO_ERROR;
    icu::number::impl::DecimalQuantity::divideBy(a2, v4, &v5);
  }
}

uint64_t icu::number::impl::MultiplierFormatHandler::setAndChain(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result = icu::number::Scale::operator=(a1 + 8, a2);
  *(void *)(a1 + 32) = a3;
  return result;
}

void icu::number::impl::MultiplierFormatHandler::processQuantity(uint64_t a1, icu::number::impl::DecimalQuantity *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));

  icu::number::Scale::applyTo((icu::number::Scale *)(a1 + 8), a2);
}

void *sub_18C978D10(void *a1)
{
  *a1 = &unk_1EDA4F760;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 1));
  return a1;
}

void sub_18C978D54(void *a1)
{
  *a1 = &unk_1EDA4F760;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 1));

  icu::UMemory::operator delete(a1);
}

uint64_t icu::number::Notation::scientific(icu::number::Notation *this)
{
  HIDWORD(v2) = 65537;
  return v2;
}

uint64_t icu::number::Notation::engineering(icu::number::Notation *this)
{
  HIDWORD(v2) = 65539;
  return v2;
}

uint64_t icu::number::ScientificNotation::ScientificNotation(uint64_t result, unsigned __int8 a2, int a3, unsigned __int16 a4, uint64_t a5)
{
  uint64_t v5 = 256;
  if (!a3) {
    uint64_t v5 = 0;
  }
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + 4) = ((unint64_t)a4 << 16) | (a5 << 32) | v5 & 0xFFFFFFFFFFFFFF00 | a2;
  return result;
}

{
  uint64_t v5;

  uint64_t v5 = 256;
  if (!a3) {
    uint64_t v5 = 0;
  }
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + 4) = ((unint64_t)a4 << 16) | (a5 << 32) | v5 & 0xFFFFFFFFFFFFFF00 | a2;
  return result;
}

uint64_t icu::number::Notation::compactShort(icu::number::Notation *this)
{
  return v2;
}

uint64_t icu::number::Notation::compactLong(icu::number::Notation *this)
{
  HIDWORD(v2) = 1;
  return v2;
}

uint64_t icu::number::Notation::simple(icu::number::Notation *this)
{
  return v2;
}

uint64_t icu::number::ScientificNotation::withMinExponentDigits(icu::number::ScientificNotation *this, int a2)
{
  if ((a2 - 1) > 0x3E6)
  {
    HIDWORD(v4) = 65810;
    int v2 = 3;
  }
  else
  {
    int v2 = 0;
    HIDWORD(v4) = (a2 << 16) | *((unsigned __int16 *)this + 2);
  }
  LODWORD(v4) = v2;
  return v4;
}

uint64_t icu::number::ScientificNotation::withExponentSignDisplay(uint64_t a1)
{
  HIDWORD(v2) = *(_DWORD *)(a1 + 4);
  return v2;
}

uint64_t icu::number::FormattedNumber::FormattedNumber(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_1EDA4F7C0;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_1EDA4F7C0;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::number::FormattedNumber::~FormattedNumber(icu::number::FormattedNumber *this)
{
  *(void *)this = &unk_1EDA4F7C0;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;

  icu::FormattedValue::~FormattedValue(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::number::FormattedNumber::~FormattedNumber(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::number::FormattedNumber::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::number::FormattedNumber::toString(icu::number::FormattedNumber *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(void *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(void))(*(void *)v3 + 16))(*((void *)this + 1));
}

void icu::number::FormattedNumber::toTempString(icu::number::FormattedNumber *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(void *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(void))(*(void *)v3 + 24))(*((void *)this + 1));
}

icu::Appendable *icu::number::FormattedNumber::appendTo(icu::number::FormattedNumber *this, icu::Appendable *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return a2;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }
  return (icu::Appendable *)(*(uint64_t (**)(void, icu::Appendable *))(*(void *)v4 + 32))(*((void *)this + 1), a2);
}

uint64_t icu::number::FormattedNumber::nextPosition(icu::number::FormattedNumber *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return 0;
  }
  return (*(uint64_t (**)(void, icu::ConstrainedFieldPosition *))(*(void *)v4 + 40))(*((void *)this + 1), a2);
}

void icu::number::FormattedNumber::toDecimalNumber(icu::number::FormattedNumber *this, icu::ByteSink *a2, UErrorCode *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(int *)a3 <= 0)
  {
    if (*((void *)this + 1))
    {
      memset(v6, 0, sizeof(v6));
      icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v6);
      icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(*((void *)this + 1) + 304), (icu::number::impl::DecNum *)v6, a3);
      icu::number::impl::DecNum::toString((icu::number::impl::DecNum *)v6, a2, a3);
      if (BYTE12(v6[0])) {
        uprv_free(*(void **)&v6[0]);
      }
    }
    else
    {
      *a3 = *((UErrorCode *)this + 4);
    }
  }
}

void icu::number::FormattedNumber::getAllFieldPositionsImpl(icu::FormattedValueStringBuilderImpl **this, icu::FieldPositionIteratorHandler *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (this[1]) {
      icu::FormattedValueStringBuilderImpl::getAllFieldPositions(this[1], a2, a3);
    }
    else {
      *a3 = *((UErrorCode *)this + 4);
    }
  }
}

uint64_t icu::number::FormattedNumber::getOutputUnit@<X0>(icu::number::FormattedNumber *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1) {
    return icu::MeasureUnit::MeasureUnit(a3);
  }
  uint64_t v6 = *((void *)this + 1);
  if (!v6)
  {
    *a2 = *((UErrorCode *)this + 4);
    return icu::MeasureUnit::MeasureUnit(a3);
  }
  return icu::MeasureUnit::MeasureUnit(a3, v6 + 376);
}

uint64_t icu::number::FormattedNumber::getNounClass(icu::number::FormattedNumber *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    return 0;
  }
  return udispopt_fromNounClassIdentifier(*(char **)(v3 + 400));
}

icu::number::impl::DecimalQuantity *icu::number::FormattedNumber::getDecimalQuantity(icu::number::impl::DecimalQuantity *this, icu::number::impl::DecimalQuantity *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v3 = *((void *)this + 1);
    if (v3) {
      return icu::number::impl::DecimalQuantity::operator=(a2, v3 + 304);
    }
    else {
      *a3 = *((UErrorCode *)this + 4);
    }
  }
  return this;
}

void icu::number::impl::UFormattedNumberData::~UFormattedNumberData(void **this)
{
  *this = &unk_1EDA4F800;
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(this + 47));
  icu::number::impl::DecimalQuantity::~DecimalQuantity(this + 38);

  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::number::impl::UFormattedNumberData::~UFormattedNumberData(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::number::FormattedNumberRange::FormattedNumberRange(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_1EDA4F840;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = &unk_1EDA4F840;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::number::FormattedNumberRange::~FormattedNumberRange(icu::number::FormattedNumberRange *this)
{
  *(void *)this = &unk_1EDA4F840;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;

  icu::FormattedValue::~FormattedValue(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::number::FormattedNumberRange::~FormattedNumberRange(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::number::FormattedNumberRange::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::number::FormattedNumberRange::toString(icu::number::FormattedNumberRange *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(void *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(void))(*(void *)v3 + 16))(*((void *)this + 1));
}

void icu::number::FormattedNumberRange::toTempString(icu::number::FormattedNumberRange *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(void *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(void))(*(void *)v3 + 24))(*((void *)this + 1));
}

icu::Appendable *icu::number::FormattedNumberRange::appendTo(icu::number::FormattedNumberRange *this, icu::Appendable *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return a2;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }
  return (icu::Appendable *)(*(uint64_t (**)(void, icu::Appendable *))(*(void *)v4 + 32))(*((void *)this + 1), a2);
}

uint64_t icu::number::FormattedNumberRange::nextPosition(icu::number::FormattedNumberRange *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return 0;
  }
  return (*(uint64_t (**)(void, icu::ConstrainedFieldPosition *))(*(void *)v4 + 40))(*((void *)this + 1), a2);
}

void icu::number::FormattedNumberRange::getDecimalNumbers(icu::number::FormattedNumberRange *this, icu::ByteSink *a2, icu::ByteSink *a3, UErrorCode *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 <= 0)
  {
    if (*((void *)this + 1))
    {
      memset(v11, 0, sizeof(v11));
      icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v11);
      memset(v10, 0, sizeof(v10));
      icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v10);
      UErrorCode v8 = icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(*((void *)this + 1) + 304), (icu::number::impl::DecNum *)v11, a4);
      icu::number::impl::DecNum::toString(v8, a2, a4);
      UErrorCode v9 = icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(*((void *)this + 1) + 376), (icu::number::impl::DecNum *)v10, a4);
      icu::number::impl::DecNum::toString(v9, a3, a4);
      if (BYTE12(v10[0])) {
        uprv_free(*(void **)&v10[0]);
      }
      if (BYTE12(v11[0])) {
        uprv_free(*(void **)&v11[0]);
      }
    }
    else
    {
      *a4 = *((UErrorCode *)this + 4);
    }
  }
}

uint64_t icu::number::FormattedNumberRange::getIdentityResult(icu::number::FormattedNumberRange *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 2;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    return 2;
  }
  return *(unsigned int *)(v3 + 448);
}

uint64_t icu::number::FormattedNumberRange::getData(icu::number::FormattedNumberRange *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0) {
    return 0;
  }
  uint64_t result = *((void *)this + 1);
  if (!result) {
    *a2 = *((UErrorCode *)this + 4);
  }
  return result;
}

void sub_18C97995C(void **a1)
{
  *a1 = &unk_1EDA4F880;
  icu::number::impl::DecimalQuantity::~DecimalQuantity(a1 + 47);
  icu::number::impl::DecimalQuantity::~DecimalQuantity(a1 + 38);

  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(a1);
}

void sub_18C9799C0(void **a1)
{
  sub_18C97995C(a1);

  icu::UMemory::operator delete(v1);
}

_DWORD *icu::number::impl::Padder::Padder(_DWORD *result, int a2, int a3, int a4)
{
  *uint64_t result = a3;
  result[1] = a2;
  result[2] = a4;
  return result;
}

{
  *uint64_t result = a3;
  result[1] = a2;
  result[2] = a4;
  return result;
}

_DWORD *icu::number::impl::Padder::Padder(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

uint64_t icu::number::impl::Padder::none(icu::number::impl::Padder *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t icu::number::impl::Padder::codePoints(unsigned int a1, int a2)
{
  if (a2 < 0) {
    uint64_t v2 = 65810;
  }
  else {
    uint64_t v2 = a1;
  }
  if (a2 < 0) {
    uint64_t v3 = 4294967293;
  }
  else {
    uint64_t v3 = a2;
  }
  return v3 | (v2 << 32);
}

uint64_t icu::number::impl::Padder::forProperties(icu::number::impl::Padder *this, const icu::number::impl::DecimalFormatProperties *a2)
{
  unsigned int v3 = *((unsigned __int16 *)this + 200);
  int v4 = (__int16)v3;
  LODWORD(v5) = v3 >> 5;
  if (v4 >= 0) {
    unint64_t v5 = v5;
  }
  else {
    unint64_t v5 = *((unsigned int *)this + 101);
  }
  if ((int)v5 < 1) {
    uint64_t v6 = 0x2000000000;
  }
  else {
    uint64_t v6 = (void)icu::UnicodeString::char32At((uint64_t *)v5, (icu::number::impl::Padder *)((char *)this + 392), 0) << 32;
  }
  return v6 | *((unsigned int *)this + 18);
}

uint64_t icu::number::impl::Padder::padAndApply(icu::number::impl::Padder *this, const icu::number::impl::Modifier *a2, const icu::number::impl::Modifier *a3, icu::FormattedStringBuilder *a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  int v14 = (*(uint64_t (**)(const icu::number::impl::Modifier *))(*(void *)a2 + 32))(a2);
  int v15 = (*(uint64_t (**)(const icu::number::impl::Modifier *))(*(void *)a3 + 32))(a3);
  int v16 = *(_DWORD *)this;
  int v17 = v15 + v14 + icu::FormattedStringBuilder::codePointCount(a4);
  int v18 = v16 - v17;
  if (v16 - v17 <= 0)
  {
    int v23 = (*(uint64_t (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, uint64_t, UErrorCode *))(*(void *)a2 + 16))(a2, a4, a5, a6, a7);
    return (*(unsigned int (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, void, UErrorCode *))(*(void *)a3 + 16))(a3, a4, a5, (v23 + a6), a7)+ v23;
  }
  int v32 = v17;
  int v33 = v16;
  uint64_t v21 = (char *)this + 4;
  unsigned int v19 = *((_DWORD *)this + 1);
  int v20 = *((_DWORD *)v21 + 1);
  if (v20 == 1)
  {
    int v25 = v18;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, a5, v19, 0, a7);
      --v25;
    }
    while (v25);
  }
  else
  {
    if (v20 != 2)
    {
      int v26 = 0;
      goto LABEL_12;
    }
    int v22 = v18;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, a6, v19, 0, a7);
      --v22;
    }
    while (v22);
  }
  int v26 = v18 << ((v19 & 0xFFFF0000) != 0);
LABEL_12:
  int v27 = (*(uint64_t (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, void, UErrorCode *))(*(void *)a2 + 16))(a2, a4, a5, (v26 + a6), a7)+ v26;
  uint64_t v24 = (*(unsigned int (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, void, UErrorCode *))(*(void *)a3 + 16))(a3, a4, a5, (v27 + a6), a7)+ v27;
  if (v20 == 3)
  {
    int v29 = v24 + a6;
    int v30 = v18;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, v29, v19, 0, a7);
      --v30;
    }
    while (v30);
    return (v24 + (v18 << ((v19 & 0xFFFF0000) != 0)));
  }
  if (!v20)
  {
    int v28 = v33 - v32;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, a5, v19, 0, a7);
      --v28;
    }
    while (v28);
    return (v24 + (v18 << ((v19 & 0xFFFF0000) != 0)));
  }
  return v24;
}

icu::number::impl::MutablePatternModifier *icu::number::impl::MutablePatternModifier::MutablePatternModifier(icu::number::impl::MutablePatternModifier *this, char a2)
{
  *(void *)this = &unk_1EDA4F960;
  *((void *)this + 1) = &unk_1EDA4F9C8;
  *((void *)this + 2) = &unk_1EDA4FA20;
  *((unsigned char *)this + 24) = a2;
  icu::CurrencyUnit::CurrencyUnit((icu::number::impl::MutablePatternModifier *)((char *)this + 80));
  *((void *)this + 14) = (char *)this + 125;
  *((_DWORD *)this + 30) = 40;
  *((_WORD *)this + 62) = 0;
  *((_DWORD *)this + 42) = 0;
  *((void *)this + 22) = &unk_1EDA47700;
  *((_WORD *)this + 92) = 2;
  *((void *)this + 30) = &unk_1EDA47700;
  *((_WORD *)this + 124) = 2;
  *((void *)this + 41) = &unk_1EDA47700;
  *((_WORD *)this + 168) = 2;
  return this;
}

uint64_t icu::number::impl::MutablePatternModifier::setPatternInfo(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(result + 32) = a2;
  *(unsigned char *)(result + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = a3;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::setPatternAttributes(uint64_t result, int a2, char a3, char a4)
{
  *(_DWORD *)(result + 44) = a2;
  *(unsigned char *)(result + 48) = a3;
  *(unsigned char *)(result + 49) = a4;
  return result;
}

void icu::number::impl::MutablePatternModifier::setSymbols(uint64_t a1, uint64_t a2, const UChar *a3, int a4, uint64_t a5, UErrorCode *a6)
{
  char v20[8] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 56) = a2;
  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v13, a3);
  icu::Locale::Locale((icu::Locale *)v14, a2 + 1936);
  icu::number::impl::CurrencySymbols::CurrencySymbols((uint64_t)v15, v13, (uint64_t)v14, a2, a6);
  icu::CurrencyUnit::operator=(a1 + 80, (unint64_t)v16);
  icu::CharString::operator=(a1 + 112, (uint64_t)&v17);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 176), (icu::UnicodeString *)v19);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 240), (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v19);
  if (v18) {
    uprv_free(v17);
  }
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v16);
  icu::Locale::~Locale((icu::Locale *)v14);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v13);
  *(_DWORD *)(a1 + 64) = a4;
  *(void *)(a1 + 304) = a5;
}

uint64_t icu::number::impl::MutablePatternModifier::setNumberProperties(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 312) = a2;
  *(_DWORD *)(result + 316) = a3;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::needsPlurals(icu::number::impl::MutablePatternModifier *this)
{
  int v2 = 0;
  return (*(uint64_t (**)(void, uint64_t, int *))(**((void **)this + 4) + 72))(*((void *)this + 4), 4294967288, &v2);
}

uint64_t *icu::number::impl::MutablePatternModifier::createImmutableForPlural@<X0>(icu::number::impl::MutablePatternModifier *a1@<X0>, int a2@<W1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = &unk_1EDA4F440;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *((_DWORD *)a1 + 78) = 3;
  *((_DWORD *)a1 + 79) = a2;
  *(void *)(a4 + 32) = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  *((_DWORD *)a1 + 78) = 1;
  *((_DWORD *)a1 + 79) = a2;
  *(void *)(a4 + 16) = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  *((_DWORD *)a1 + 78) = 2;
  *((_DWORD *)a1 + 79) = a2;
  *(void *)(a4 + 24) = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  *((_DWORD *)a1 + 78) = 0;
  *((_DWORD *)a1 + 79) = a2;
  uint64_t result = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  *(void *)(a4 + 8) = result;
  return result;
}

uint64_t *icu::number::impl::MutablePatternModifier::createConstantModifier(icu::number::impl::MutablePatternModifier *this, UErrorCode *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v12);
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v10);
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), (icu::FormattedStringBuilder *)v12, 0, (uint64_t)this + 16, *((unsigned char *)this + 40), a2);
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 0);
  icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), (icu::FormattedStringBuilder *)v10, 0, (uint64_t)this + 16, *((unsigned char *)this + 40), a2);
  if ((*(unsigned int (**)(void))(**((void **)this + 4) + 40))(*((void *)this + 4)))
  {
    uint64_t v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x340, v4);
    if (v6)
    {
      char v7 = (*(uint64_t (**)(void))(**((void **)this + 4) + 80))(*((void *)this + 4));
      icu::number::impl::CurrencySpacingEnabledModifier::CurrencySpacingEnabledModifier((icu::number::impl::CurrencySpacingEnabledModifier *)v6, (const icu::FormattedStringBuilder *)v12, (const icu::FormattedStringBuilder *)v10, v7 != 1, *((unsigned char *)this + 24), *((const icu::DecimalFormatSymbols **)this + 7), a2);
    }
  }
  else
  {
    uint64_t v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x130, v4);
    if (v6)
    {
      char v8 = (*(uint64_t (**)(void))(**((void **)this + 4) + 80))(*((void *)this + 4));
      sub_18C97B1F4((uint64_t)v6, (uint64_t)v12, (uint64_t)v10, v8 ^ 1, *((unsigned char *)this + 24));
    }
  }
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v10);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v12);
  return v6;
}

uint64_t *icu::number::impl::MutablePatternModifier::createImmutable@<X0>(icu::number::impl::MutablePatternModifier *this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x148, (unint64_t)a2);
  if (!result)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }
  uint64_t v6 = (uint64_t)result;
  *(_OWORD *)(result + 31) = 0u;
  *(_OWORD *)(result + 29) = 0u;
  *(_OWORD *)(result + 27) = 0u;
  *(_OWORD *)(result + 25) = 0u;
  *(_OWORD *)(result + 23) = 0u;
  *(_OWORD *)(result + 21) = 0u;
  *(_OWORD *)(result + 19) = 0u;
  *(_OWORD *)(result + 17) = 0u;
  *(_OWORD *)(result + 15) = 0u;
  *(_OWORD *)(result + 13) = 0u;
  *(_OWORD *)(result + 11) = 0u;
  *(_OWORD *)(result + 9) = 0u;
  *(_OWORD *)(result + 7) = 0u;
  *(_OWORD *)(result + 5) = 0u;
  *(_OWORD *)(result + 3) = 0u;
  *(_OWORD *)(result + 1) = 0u;
  *(_OWORD *)(result + 37) = 0u;
  *(_OWORD *)(result + 39) = 0u;
  *(_OWORD *)(result + 33) = 0u;
  *(_OWORD *)(result + 35) = 0u;
  *uint64_t result = (uint64_t)&unk_1EDA4FB80;
  uint64_t v7 = 1;
  do
  {
    char v8 = &result[v7];
    *char v8 = (uint64_t)&unk_1EDA4F440;
    *(_OWORD *)(v8 + 1) = 0uLL;
    *(_OWORD *)(v8 + 3) = 0uLL;
    v7 += 5;
  }
  while (v8 + 5 != result + 41);
  int v18 = 0;
  if ((*(unsigned int (**)(void, uint64_t, int *))(**((void **)this + 4) + 72))(*((void *)this + 4), 4294967288, &v18))
  {
    for (uint64_t i = 0; i != 6; ++i)
    {
      unsigned int v10 = dword_18CA950CC[i];
      icu::number::impl::MutablePatternModifier::createImmutableForPlural(this, v10, a2, (uint64_t)v17);
      icu::number::impl::AdoptingSignumModifierStore::operator=(v6 + 40 * v10 + 8, (uint64_t)v17);
      icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::AdoptingSignumModifierStore *)v17);
    }
    uint64_t v12 = (uint64_t *)*(unsigned int *)a2;
    if ((int)v12 < 1)
    {
      uint64_t result = icu::UMemory::operator new(v12, (icu::UMemory *)0x20, v11);
      if (result)
      {
        uint64_t v13 = *((void *)this + 38);
        *uint64_t result = (uint64_t)&unk_1EDA4FA48;
        result[1] = v6;
        result[2] = v13;
        result[3] = 0;
      }
      return result;
    }
LABEL_12:
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    return 0;
  }
  icu::number::impl::MutablePatternModifier::createImmutableForPlural(this, 8, a2, (uint64_t)v16);
  icu::number::impl::AdoptingSignumModifierStore::operator=(v6 + 208, (uint64_t)v16);
  icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::AdoptingSignumModifierStore *)v16);
  int v15 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v15 >= 1) {
    goto LABEL_12;
  }
  uint64_t result = icu::UMemory::operator new(v15, (icu::UMemory *)0x20, v14);
  if (result)
  {
    *uint64_t result = (uint64_t)&unk_1EDA4FA48;
    result[1] = v6;
    result[2] = 0;
    result[3] = 0;
  }
  return result;
}

void *icu::number::impl::ImmutablePatternModifier::ImmutablePatternModifier(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = &unk_1EDA4FA48;
  result[1] = a2;
  result[2] = a3;
  result[3] = 0;
  return result;
}

{
  *uint64_t result = &unk_1EDA4FA48;
  result[1] = a2;
  result[2] = a3;
  result[3] = 0;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::insertPrefix(icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, int a3, UErrorCode *a4)
{
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  char v8 = *((unsigned char *)this + 40);

  return icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), a2, a3, (uint64_t)this + 16, v8, a4);
}

uint64_t icu::number::impl::MutablePatternModifier::insertSuffix(icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, int a3, UErrorCode *a4)
{
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 0);
  char v8 = *((unsigned char *)this + 40);

  return icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), a2, a3, (uint64_t)this + 16, v8, a4);
}

void icu::number::impl::ImmutablePatternModifier::processQuantity(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  (*(void (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  sub_18C97F148(a3 + 104, a2, a4);
  if (!*(void *)(a3 + 200))
  {
    icu::number::impl::ImmutablePatternModifier::applyToMicros(a1, a3, a2, a4);
  }
}

uint64_t icu::number::impl::ImmutablePatternModifier::applyToMicros(uint64_t a1, uint64_t a2, icu::number::impl::DecimalQuantity *a3, int *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(icu::PluralRules **)(a1 + 16);
  if (v7)
  {
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v18, (uint64_t)a3);
    sub_18C97F148(a2 + 104, (icu::number::impl::DecimalQuantity *)v18, a4);
    int v9 = *a4;
    uint64_t v10 = 5;
    if (v9 <= 0)
    {
      memset(v20, 0, sizeof(v20));
      icu::PluralRules::select(v7, (const icu::IFixedDecimal *)v18, (icu::UnicodeString *)v20);
      int v12 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v20, v11);
      if (v12 < 0) {
        uint64_t v10 = 5;
      }
      else {
        uint64_t v10 = v12;
      }
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v20);
    }
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v18);
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = icu::number::impl::DecimalQuantity::signum(a3);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v15, v10);
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t result = *(void *)(v17 + 8 * icu::number::impl::DecimalQuantity::signum(a3) + 216);
  }
  *(void *)(a2 + 200) = result;
  return result;
}

uint64_t icu::number::impl::ImmutablePatternModifier::getModifier(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v3 + 8)) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 16))();
  }
  else {
    return *(void *)(v2 + 8 * a2 + 216);
  }
}

uint64_t icu::number::impl::ImmutablePatternModifier::addToChain(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::addToChain(uint64_t result, uint64_t a2)
{
  *(void *)(result + 320) = a2;
  return result;
}

void icu::number::impl::MutablePatternModifier::processQuantity(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void))(**(void **)(a1 + 320) + 16))(*(void *)(a1 + 320));
  sub_18C97F148(a3 + 104, a2, a4);
  if (!*(void *)(a3 + 200))
  {
    LODWORD(v12[0]) = 0;
    if ((*(unsigned int (**)(void, uint64_t, _OWORD *))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32), 4294967288, v12))
    {
      char v8 = *(icu::PluralRules **)(a1 + 304);
      uint64_t v13 = 0;
      memset(v12, 0, sizeof(v12));
      icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v12, (uint64_t)a2);
      sub_18C97F148(a3 + 104, (icu::number::impl::DecimalQuantity *)v12, a4);
      int v9 = 5;
      if (v8 && *a4 <= 0)
      {
        memset(v14, 0, sizeof(v14));
        icu::PluralRules::select(v8, (const icu::IFixedDecimal *)v12, (icu::UnicodeString *)v14);
        int v11 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v14, v10);
        if (v11 < 0) {
          int v9 = 5;
        }
        else {
          int v9 = v11;
        }
        icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)v14);
      }
      icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v12);
    }
    else
    {
      int v9 = 8;
    }
    *(_DWORD *)(a1 + 312) = icu::number::impl::DecimalQuantity::signum(a2);
    *(_DWORD *)(a1 + 316) = v9;
    *(void *)(a3 + 200) = a1 + 8;
  }
}

uint64_t icu::number::impl::MutablePatternModifier::apply(icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  int v10 = icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), a2, (int)a3, (uint64_t)this + 16, *((unsigned char *)this + 40), a5);
  int v11 = v10 + a4;
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 0);
  int v12 = icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), a2, v11, (uint64_t)this + 16, *((unsigned char *)this + 40), a5);
  int v14 = 0;
  if (((*(uint64_t (**)(void))(**((void **)this + 4) + 80))(*((void *)this + 4)) & 1) == 0)
  {
    uint64_t v17 = &unk_1EDA47700;
    __int16 v18 = 2;
    int v14 = icu::FormattedStringBuilder::splice(a2, v10 + (int)a3, v11, (uint64_t)&v17, 0, 0, 0, a5);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v17);
  }
  icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacing(a2, a3, v10, v11 + v14, v12, *((void *)this + 7), a5, v13);
  return (v12 + v10 + v14);
}

uint64_t non-virtual thunk to'icu::number::impl::MutablePatternModifier::apply(icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  return icu::number::impl::MutablePatternModifier::apply((icu::number::impl::MutablePatternModifier *)((char *)this - 8), a2, a3, a4, a5);
}

uint64_t icu::number::impl::MutablePatternModifier::getPrefixLength(icu::number::impl::MutablePatternModifier *this)
{
  int v4 = 0;
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  return icu::number::impl::AffixUtils::unescapedCodePointCount((icu::number::impl::MutablePatternModifier *)((char *)this + 328), (icu::number::impl::MutablePatternModifier *)((char *)this + 16), (const icu::number::impl::SymbolProvider *)&v4, v2);
}

uint64_t icu::number::impl::MutablePatternModifier::prepareAffix(icu::number::impl::MutablePatternModifier *this, int a2)
{
  uint64_t v4 = *((void *)this + 4);
  int v5 = icu::number::impl::PatternStringUtils::resolveSignDisplay(*((_DWORD *)this + 11), *((_DWORD *)this + 78));
  int v6 = *((unsigned __int8 *)this + 49);
  unsigned int v7 = *((_DWORD *)this + 79);
  unsigned __int8 v8 = *((unsigned char *)this + 48);

  return icu::number::impl::PatternStringUtils::patternInfoToStringBuilder(v4, a2, v5, v6, v7, v8, 0, (uint64_t)this + 328);
}

uint64_t non-virtual thunk to'icu::number::impl::MutablePatternModifier::getPrefixLength(icu::number::impl::MutablePatternModifier *this)
{
  int v4 = 0;
  icu::number::impl::MutablePatternModifier::prepareAffix((icu::number::impl::MutablePatternModifier *)((char *)this - 8), 1);
  return icu::number::impl::AffixUtils::unescapedCodePointCount((icu::number::impl::MutablePatternModifier *)((char *)this + 320), (icu::number::impl::MutablePatternModifier *)((char *)this + 8), (const icu::number::impl::SymbolProvider *)&v4, v2);
}

uint64_t icu::number::impl::MutablePatternModifier::getCodePointCount(icu::number::impl::MutablePatternModifier *this)
{
  int v6 = 0;
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  int v3 = icu::number::impl::AffixUtils::unescapedCodePointCount((icu::number::impl::MutablePatternModifier *)((char *)this + 328), (icu::number::impl::MutablePatternModifier *)((char *)this + 16), (const icu::number::impl::SymbolProvider *)&v6, v2);
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 0);
  return icu::number::impl::AffixUtils::unescapedCodePointCount((icu::number::impl::MutablePatternModifier *)((char *)this + 328), (icu::number::impl::MutablePatternModifier *)((char *)this + 16), (const icu::number::impl::SymbolProvider *)&v6, v4)+ v3;
}

uint64_t non-virtual thunk to'icu::number::impl::MutablePatternModifier::getCodePointCount(icu::number::impl::MutablePatternModifier *this)
{
  return icu::number::impl::MutablePatternModifier::getCodePointCount((icu::number::impl::MutablePatternModifier *)((char *)this - 8));
}

uint64_t icu::number::impl::MutablePatternModifier::isStrong(icu::number::impl::MutablePatternModifier *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t non-virtual thunk to'icu::number::impl::MutablePatternModifier::isStrong(icu::number::impl::MutablePatternModifier *this)
{
  return *((unsigned __int8 *)this + 16);
}

void icu::number::impl::MutablePatternModifier::containsField()
{
}

void non-virtual thunk to'icu::number::impl::MutablePatternModifier::containsField()
{
}

void icu::number::impl::MutablePatternModifier::getParameters(icu::number::impl::MutablePatternModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
}

void non-virtual thunk to'icu::number::impl::MutablePatternModifier::getParameters(icu::number::impl::MutablePatternModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
}

void icu::number::impl::MutablePatternModifier::semanticallyEquivalent(icu::number::impl::MutablePatternModifier *this, const icu::number::impl::Modifier *a2)
{
}

void non-virtual thunk to'icu::number::impl::MutablePatternModifier::semanticallyEquivalent(icu::number::impl::MutablePatternModifier *this, const icu::number::impl::Modifier *a2)
{
}

icu::UnicodeString *icu::number::impl::MutablePatternModifier::getSymbol@<X0>(uint64_t a1@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  UErrorCode v5 = U_ZERO_ERROR;
  switch(a2)
  {
    case -10:
    case -9:
      return (icu::UnicodeString *)icu::UnicodeString::UnicodeString((uint64_t)a3, (uint64_t)&unk_18CAA26D4);
    case -8:
      return (icu::UnicodeString *)icu::number::impl::CurrencySymbols::getPluralName(a1 + 72, *(_DWORD *)(a1 + 316), (int *)&v5, (uint64_t)a3);
    case -7:
      return icu::number::impl::CurrencySymbols::getIntlCurrencySymbol((UChar **)(a1 + 72), a3);
    case -6:
      return (icu::UnicodeString *)icu::number::impl::MutablePatternModifier::getCurrencySymbolForUnitWidth(a1, &v5, a3);
    case -5:
      int v4 = (UChar **)(*(void *)(a1 + 56) + 776);
      goto LABEL_14;
    case -4:
      int v4 = (UChar **)(*(void *)(a1 + 56) + 200);
      goto LABEL_14;
    case -3:
      int v4 = (UChar **)(*(void *)(a1 + 56) + 1800);
      goto LABEL_14;
    case -2:
      int v4 = (UChar **)(*(void *)(a1 + 56) + 456);
      goto LABEL_14;
    case -1:
      int v4 = (UChar **)(*(void *)(a1 + 56) + 392);
LABEL_14:
      return icu::UnicodeString::UnicodeString(a3, v4);
    default:
      abort();
  }
}

uint64_t icu::number::impl::MutablePatternModifier::getCurrencySymbolForUnitWidth@<X0>(uint64_t this@<X0>, UErrorCode *a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  switch(*(_DWORD *)(this + 64))
  {
    case 0:
      this = icu::number::impl::CurrencySymbols::getNarrowCurrencySymbol((icu::number::impl::CurrencySymbols *)(this + 72), a2, (uint64_t)a3);
      break;
    case 3:
      this = (uint64_t)icu::number::impl::CurrencySymbols::getIntlCurrencySymbol((UChar **)(this + 72), a3);
      break;
    case 4:
      this = icu::number::impl::CurrencySymbols::getFormalCurrencySymbol((icu::number::impl::CurrencySymbols *)(this + 72), a2, (uint64_t)a3);
      break;
    case 5:
      this = icu::number::impl::CurrencySymbols::getVariantCurrencySymbol((icu::number::impl::CurrencySymbols *)(this + 72), a2, (uint64_t)a3);
      break;
    case 6:
      *(void *)a3 = &unk_1EDA47700;
      *((_WORD *)a3 + 4) = 2;
      break;
    default:
      this = (uint64_t)icu::number::impl::CurrencySymbols::getCurrencySymbol((UChar **)(this + 72), a2, a3);
      break;
  }
  return this;
}

icu::UnicodeString *non-virtual thunk to'icu::number::impl::MutablePatternModifier::getSymbol@<X0>(uint64_t a1@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  return icu::number::impl::MutablePatternModifier::getSymbol(a1 - 16, a2, a3);
}

void icu::number::impl::MutablePatternModifier::toUnicodeString(icu::number::impl::MutablePatternModifier *this)
{
}

void sub_18C97AF78(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)sub_18C97B268(a1, a2);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18C97AFA0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_18C97B268(a1 - 8, a2);
}

void sub_18C97AFA8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)sub_18C97B268(a1 - 8, a2);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18C97AFD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_18C97B268(a1 - 16, a2);
}

void sub_18C97AFDC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)sub_18C97B268(a1 - 16, a2);

  icu::UMemory::operator delete(v2);
}

void *sub_18C97B008(void *a1)
{
  *a1 = &unk_1EDA4FA48;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_18C97B074(void *a1)
{
  *a1 = &unk_1EDA4FA48;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::UMemory::operator delete(a1);
}

void sub_18C97B0F0(icu::number::impl::ModifierStore *a1)
{
  *(void *)a1 = &unk_1EDA4FB80;
  for (uint64_t i = 288; i != -32; i -= 40)
    icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::ModifierStore *)((char *)a1 + i));

  icu::number::impl::ModifierStore::~ModifierStore(a1);
}

void sub_18C97B158(icu::number::impl::ModifierStore *a1)
{
  *(void *)a1 = &unk_1EDA4FB80;
  for (uint64_t i = 288; i != -32; i -= 40)
    icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::ModifierStore *)((char *)a1 + i));
  icu::number::impl::ModifierStore::~ModifierStore(a1);

  icu::UMemory::operator delete(v3);
}

uint64_t sub_18C97B1C4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = *(void *)(a1 + 40 * a3 + 8 * a2 + 16);
  if (a3 != 5 && !result) {
    return *(void *)(a1 + 8 * a2 + 216);
  }
  return result;
}

uint64_t sub_18C97B1F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  *(void *)a1 = &unk_1EDA4F6A0;
  icu::FormattedStringBuilder::FormattedStringBuilder(a1 + 8, a2);
  icu::FormattedStringBuilder::FormattedStringBuilder(a1 + 144, a3);
  *(unsigned char *)(a1 + 280) = a4;
  *(unsigned char *)(a1 + 281) = a5;
  icu::number::impl::Modifier::Parameters::Parameters((void *)(a1 + 288));
  return a1;
}

uint64_t sub_18C97B268@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA4F960;
  int v3 = (icu::number::impl::Modifier *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EDA4F9C8;
  int v4 = (icu::number::impl::SymbolProvider *)(a1 + 16);
  *(void *)(a1 + 16) = &unk_1EDA4FA20;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 328));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 240));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 176));
  if (*(unsigned char *)(a1 + 124)) {
    uprv_free(*(void **)(a1 + 112));
  }
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)(a1 + 80));
  icu::number::impl::SymbolProvider::~SymbolProvider(v4);
  icu::number::impl::Modifier::~Modifier(v3);
  return a1;
}

uint64_t *icu::number::impl::PatternParser::parseToPatternInfo(UChar **this, const icu::UnicodeString *a2, UErrorCode *a3, UErrorCode *a4)
{
  return icu::number::impl::ParsedPatternInfo::consumePattern((uint64_t *)a2, this, a3);
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumePattern(uint64_t *this, UChar **a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = (uint64_t)this;
    icu::UnicodeString::operator=((UChar **)this + 1, a2);
    *(void *)(v4 + 424) = v4 + 72;
    this = icu::number::impl::ParsedPatternInfo::consumeSubpattern((icu::number::impl::ParsedPatternInfo *)v4, a3);
    if (*(int *)a3 <= 0)
    {
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408)) != 59
        || (icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408)) < 0x10000
          ? (int v5 = 1)
          : (int v5 = 2),
            (*(_DWORD *)(v4 + 416) += v5,
             icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408)) == -1)
         || (*(unsigned char *)(v4 + 432) = 1,
             *(void *)(v4 + 424) = v4 + 240,
             this = icu::number::impl::ParsedPatternInfo::consumeSubpattern((icu::number::impl::ParsedPatternInfo *)v4, a3), *(int *)a3 <= 0)))
      {
        this = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408));
        if (this != -1) {
          *a3 = U_UNQUOTED_SPECIAL;
        }
      }
    }
  }
  return this;
}

void icu::number::impl::PatternParser::parseToProperties(uint64_t a1@<X0>, int a2@<W1>, UErrorCode *a3@<X2>, void *a4@<X8>)
{
  bzero(a4, 0x2F8uLL);
  icu::number::impl::DecimalFormatProperties::DecimalFormatProperties((icu::number::impl::DecimalFormatProperties *)a4);

  icu::number::impl::PatternParser::parseToExistingPropertiesImpl(a1, (icu::number::impl::DecimalFormatProperties *)a4, a2, a3);
}

void icu::number::impl::PatternParser::parseToExistingPropertiesImpl(uint64_t a1, icu::number::impl::DecimalFormatProperties *this, int a3, UErrorCode *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
  int v6 = (__int16)v5;
  unsigned int v7 = v5 >> 5;
  if (v6 < 0) {
    unsigned int v7 = *(_DWORD *)(a1 + 12);
  }
  if (v7)
  {
    uint64_t v19 = 0;
    memset(v18, 0, sizeof(v18));
    sub_18C962AE4((uint64_t)v18);
    unsigned int v11 = *(unsigned __int16 *)(a1 + 8);
    int v12 = (__int16)v11;
    int32_t v13 = v11 >> 5;
    if (v12 >= 0) {
      int32_t v14 = v13;
    }
    else {
      int32_t v14 = *(_DWORD *)(a1 + 12);
    }
    if (icu::UnicodeString::doCompare(a1, 0, v14, (uint64_t)L"#.##E+00;-#.##E+00", 0, 18))
    {
      icu::number::impl::ParsedPatternInfo::consumePattern((uint64_t *)v18, (UChar **)a1, a4);
    }
    else
    {
      memset(v17, 0, sizeof(v17));
      int v16 = "0";
      icu::UnicodeString::UnicodeString(v17, 1, &v16);
      icu::number::impl::ParsedPatternInfo::consumePattern((uint64_t *)v18, (UChar **)v17, a4);
      icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v17);
    }
    if (*(int *)a4 <= 0) {
      icu::number::impl::PatternParser::patternInfoToProperties((uint64_t)this, (uint64_t)v18, a3, (const icu::UnicodeString *)a4);
    }
    sub_18C962BDC((void **)v18);
  }
  else
  {
    icu::number::impl::DecimalFormatProperties::clear(this);
  }
}

void icu::number::impl::PatternParser::parseToProperties(icu::number::impl::PatternParser *this@<X0>, UErrorCode *a2@<X1>, void *a3@<X8>)
{
  bzero(a3, 0x2F8uLL);
  icu::number::impl::DecimalFormatProperties::DecimalFormatProperties((icu::number::impl::DecimalFormatProperties *)a3);

  icu::number::impl::PatternParser::parseToExistingPropertiesImpl((uint64_t)this, (icu::number::impl::DecimalFormatProperties *)a3, 0, a2);
}

uint64_t icu::number::impl::ParsedPatternInfo::charAt(icu::number::impl::ParsedPatternInfo *this, int a2, int a3)
{
  int v3 = (char *)this + 224;
  if ((a2 & 0x200) != 0) {
    int v3 = (char *)this + 392;
  }
  if ((a2 & 0x100) != 0) {
    int v3 = (char *)this + 216;
  }
  if ((~a2 & 0x300) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (char *)this + 384;
  }
  if ((a2 & 0x400) != 0) {
    uint64_t v4 = (char *)this + 232;
  }
  if ((~a2 & 0x600) != 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = (_DWORD *)((char *)this + 400);
  }
  if (a3 < 0 || (v7 = v5, int v6 = *v5, v7[1] - v6 <= a3)) {
    abort();
  }
  unsigned int v8 = v6 + a3;
  unsigned int v9 = *((unsigned __int16 *)this + 8);
  if (*((__int16 *)this + 8) < 0) {
    unsigned int v10 = *((_DWORD *)this + 5);
  }
  else {
    unsigned int v10 = v9 >> 5;
  }
  if (v10 <= v8) {
    return 0xFFFFLL;
  }
  if ((v9 & 2) != 0) {
    unsigned int v11 = (char *)this + 18;
  }
  else {
    unsigned int v11 = (char *)*((void *)this + 4);
  }
  return *(unsigned __int16 *)&v11[2 * v8];
}

char *icu::number::impl::ParsedPatternInfo::getEndpoints(icu::number::impl::ParsedPatternInfo *this, int a2)
{
  uint64_t v2 = (char *)this + 224;
  if ((a2 & 0x200) != 0) {
    uint64_t v2 = (char *)this + 392;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v2 = (char *)this + 216;
  }
  if ((~a2 & 0x300) != 0) {
    int v3 = v2;
  }
  else {
    int v3 = (char *)this + 384;
  }
  if ((a2 & 0x400) != 0) {
    int v3 = (char *)this + 232;
  }
  if ((~a2 & 0x600) != 0) {
    return v3;
  }
  else {
    return (char *)this + 400;
  }
}

uint64_t icu::number::impl::ParsedPatternInfo::length(icu::number::impl::ParsedPatternInfo *this, int a2)
{
  uint64_t v2 = (char *)this + 224;
  if ((a2 & 0x200) != 0) {
    uint64_t v2 = (char *)this + 392;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v2 = (char *)this + 216;
  }
  if ((~a2 & 0x300) != 0) {
    int v3 = v2;
  }
  else {
    int v3 = (char *)this + 384;
  }
  if ((a2 & 0x400) != 0) {
    int v3 = (char *)this + 232;
  }
  if ((~a2 & 0x600) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_DWORD *)((char *)this + 400);
  }
  return (v4[1] - *v4);
}

uint64_t icu::number::impl::ParsedPatternInfo::getLengthFromEndpoints(_DWORD *a1)
{
  return (a1[1] - *a1);
}

icu::UnicodeString *icu::number::impl::ParsedPatternInfo::getString@<X0>(icu::UnicodeString *this@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  int v3 = (int *)((char *)this + 224);
  if ((a2 & 0x200) != 0) {
    int v3 = (int *)((char *)this + 392);
  }
  if ((a2 & 0x100) != 0) {
    int v3 = (int *)((char *)this + 216);
  }
  if ((~a2 & 0x300) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (int *)((char *)this + 384);
  }
  if ((a2 & 0x400) != 0) {
    uint64_t v4 = (int *)((char *)this + 232);
  }
  if ((~a2 & 0x600) != 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = (int *)((char *)this + 400);
  }
  int v6 = *v5;
  int v7 = v5[1];
  if (v7 != v6) {
    return icu::UnicodeString::UnicodeString(a3, (icu::UnicodeString *)((char *)this + 8), v6, (v7 - v6));
  }
  *(void *)a3 = &unk_1EDA47700;
  *((_WORD *)a3 + 4) = 2;
  return this;
}

uint64_t icu::number::impl::ParsedPatternInfo::positiveHasPlusSign(icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 213);
}

uint64_t icu::number::impl::ParsedPatternInfo::hasNegativeSubpattern(icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 432);
}

uint64_t icu::number::impl::ParsedPatternInfo::negativeHasMinusSign(icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 380);
}

BOOL icu::number::impl::ParsedPatternInfo::hasCurrencySign(icu::number::impl::ParsedPatternInfo *this)
{
  if (*((unsigned char *)this + 210)) {
    return 1;
  }
  if (*((unsigned char *)this + 432)) {
    return *((unsigned char *)this + 378) != 0;
  }
  return 0;
}

uint64_t icu::number::impl::ParsedPatternInfo::containsSymbolType(uint64_t a1, int a2, int *a3)
{
  return icu::number::impl::AffixUtils::containsType(a1 + 8, a2, a3);
}

BOOL icu::number::impl::ParsedPatternInfo::hasBody(icu::number::impl::ParsedPatternInfo *this)
{
  return *((_DWORD *)this + 24) > 0;
}

uint64_t icu::number::impl::ParsedPatternInfo::currencyAsDecimal(icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 211);
}

uint64_t *icu::number::impl::ParsedPatternInfo::ParserState::peek(icu::number::impl::ParsedPatternInfo::ParserState *this)
{
  int v1 = *((_DWORD *)this + 2);
  uint64_t v2 = *(void *)this;
  if (*(__int16 *)(v2 + 8) < 0) {
    int v3 = (uint64_t *)*(unsigned int *)(v2 + 12);
  }
  else {
    int v3 = (uint64_t *)(*(unsigned __int16 *)(v2 + 8) >> 5);
  }
  if (v1 == v3) {
    return (uint64_t *)0xFFFFFFFFLL;
  }
  else {
    return icu::UnicodeString::char32At(v3, (icu::UnicodeString *)v2, v1);
  }
}

uint64_t icu::number::impl::ParsedPatternInfo::ParserState::peek2(icu::number::impl::ParsedPatternInfo::ParserState *this)
{
  int v2 = *((_DWORD *)this + 2);
  uint64_t v3 = *(void *)this;
  if (*(__int16 *)(v3 + 8) < 0) {
    uint64_t v4 = (uint64_t *)*(unsigned int *)(v3 + 12);
  }
  else {
    uint64_t v4 = (uint64_t *)(*(unsigned __int16 *)(v3 + 8) >> 5);
  }
  if (v2 == v4) {
    return 0xFFFFFFFFLL;
  }
  int v5 = icu::UnicodeString::char32At(v4, (icu::UnicodeString *)v3, v2) < 0x10000 ? 1 : 2;
  int v6 = v5 + *((_DWORD *)this + 2);
  int v7 = *(unsigned int **)this;
  unsigned int v8 = *(unsigned __int16 *)(*(void *)this + 8);
  unsigned int v9 = (v8 & 0x8000) != 0 ? (uint64_t *)v7[3] : (uint64_t *)(v8 >> 5);
  if (v6 == v9) {
    return 0xFFFFFFFFLL;
  }

  return (uint64_t)icu::UnicodeString::char32At(v9, (icu::UnicodeString *)v7, v6);
}

uint64_t *icu::number::impl::ParsedPatternInfo::ParserState::next(icu::number::impl::ParsedPatternInfo::ParserState *this)
{
  uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(this);
  if (result < 0x10000) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  *((_DWORD *)this + 2) += v3;
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeSubpattern(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t result = icu::number::impl::ParsedPatternInfo::consumePadding((uint64_t)this, 0, a2);
  if (*(int *)a2 <= 0)
  {
    uint64_t result = icu::number::impl::ParsedPatternInfo::consumeAffix((uint64_t)this, (_DWORD *)(*((void *)this + 53) + 144), a2);
    if (*(int *)a2 <= 0)
    {
      uint64_t result = icu::number::impl::ParsedPatternInfo::consumePadding((uint64_t)this, 1, a2);
      if (*(int *)a2 <= 0)
      {
        uint64_t result = icu::number::impl::ParsedPatternInfo::consumeFormat(this, a2);
        if (*(int *)a2 <= 0)
        {
          uint64_t result = icu::number::impl::ParsedPatternInfo::consumeExponent(this, a2);
          if (*(int *)a2 <= 0)
          {
            uint64_t result = icu::number::impl::ParsedPatternInfo::consumePadding((uint64_t)this, 2, a2);
            if (*(int *)a2 <= 0)
            {
              uint64_t result = icu::number::impl::ParsedPatternInfo::consumeAffix((uint64_t)this, (_DWORD *)(*((void *)this + 53) + 152), a2);
              if (*(int *)a2 <= 0)
              {
                return icu::number::impl::ParsedPatternInfo::consumePadding((uint64_t)this, 3, a2);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumePadding(uint64_t a1, int a2, UErrorCode *a3)
{
  int v6 = (icu::number::impl::ParsedPatternInfo::ParserState *)(a1 + 408);
  uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(a1 + 408));
  if (result == 42)
  {
    uint64_t v8 = *(void *)(a1 + 424);
    if (*(unsigned char *)(v8 + 48))
    {
      *a3 = U_MULTIPLE_PAD_SPECIFIERS;
    }
    else
    {
      *(_DWORD *)(v8 + 52) = a2;
      *(unsigned char *)(v8 + 48) = 1;
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v6) < 0x10000) {
        int v9 = 1;
      }
      else {
        int v9 = 2;
      }
      int v10 = v9 + *(_DWORD *)(a1 + 416);
      *(_DWORD *)(a1 + 416) = v10;
      *(_DWORD *)(*(void *)(a1 + 424) + 160) = v10;
      uint64_t result = icu::number::impl::ParsedPatternInfo::consumeLiteral((icu::number::impl::ParsedPatternInfo *)a1, a3);
      *(_DWORD *)(*(void *)(a1 + 424) + 164) = *(_DWORD *)(a1 + 416);
    }
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeAffix(uint64_t a1, _DWORD *a2, UErrorCode *a3)
{
  int v6 = (icu::number::impl::ParsedPatternInfo::ParserState *)(a1 + 408);
  *a2 = *(_DWORD *)(a1 + 416);
  while (1)
  {
    uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v6);
    if ((int)result <= 163) {
      break;
    }
    if (result == 164)
    {
      *(unsigned char *)(*(void *)(a1 + 424) + 138) = 1;
    }
    else if (result == 8240)
    {
      *(unsigned char *)(*(void *)(a1 + 424) + 137) = 1;
    }
LABEL_12:
    uint64_t result = icu::number::impl::ParsedPatternInfo::consumeLiteral((icu::number::impl::ParsedPatternInfo *)a1, a3);
    if (*(int *)a3 >= 1) {
      return result;
    }
  }
  switch((int)result)
  {
    case '#':
    case '*':
    case ',':
    case '.':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ';':
    case '@':
      break;
    case '$':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '/':
    case ':':
    case '<':
    case '=':
    case '>':
    case '?':
      goto LABEL_12;
    case '%':
      *(unsigned char *)(*(void *)(a1 + 424) + 136) = 1;
      goto LABEL_12;
    case '+':
      *(unsigned char *)(*(void *)(a1 + 424) + 141) = 1;
      goto LABEL_12;
    case '-':
      *(unsigned char *)(*(void *)(a1 + 424) + 1icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 1;
      goto LABEL_12;
    default:
      if (result != -1) {
        goto LABEL_12;
      }
      break;
  }
  a2[1] = *(_DWORD *)(a1 + 416);
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeFormat(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t result = icu::number::impl::ParsedPatternInfo::consumeIntegerFormat(this, a2);
  if (*(int *)a2 <= 0)
  {
    unsigned int v5 = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
    uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
    if (v5 == 46)
    {
      if (result < 0x10000) {
        int v6 = 1;
      }
      else {
        int v6 = 2;
      }
      *((_DWORD *)this + 104) += v6;
      uint64_t v7 = *((void *)this + 53);
      *(unsigned char *)(v7 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 1;
      ++*(_DWORD *)(v7 + 44);
    }
    else
    {
      if (result != 164) {
        return result;
      }
      uint64_t result = (uint64_t *)icu::number::impl::ParsedPatternInfo::ParserState::peek2((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
      if ((result - 48) >= 0xA && result != 35) {
        return result;
      }
      uint64_t v8 = *((void *)this + 53);
      *(_WORD *)(v8 + 138) = 257;
      *(unsigned char *)(v8 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 1;
      ++*(_DWORD *)(v8 + 44);
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408)) < 0x10000) {
        int v9 = 1;
      }
      else {
        int v9 = 2;
      }
      *((_DWORD *)this + 104) += v9;
    }
    return icu::number::impl::ParsedPatternInfo::consumeFractionFormat(this, a2);
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeExponent(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t v4 = *((void *)this + 53);
  unsigned int v5 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
  if (result == 69)
  {
    if ((~*(_DWORD *)v4 & 0xFFFF0000) != 0)
    {
      *a2 = U_MALFORMED_EXPONENTIAL_PATTERN;
    }
    else
    {
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) < 0x10000) {
        int v7 = 1;
      }
      else {
        int v7 = 2;
      }
      *((_DWORD *)this + 104) += v7;
      ++*(_DWORD *)(v4 + 44);
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) != 43) {
        goto LABEL_17;
      }
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) < 0x10000) {
        int v8 = 1;
      }
      else {
        int v8 = 2;
      }
      *((_DWORD *)this + 104) += v8;
      *(unsigned char *)(v4 + 128) = 1;
      while (1)
      {
        ++*(_DWORD *)(v4 + 44);
LABEL_17:
        uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v5);
        if (result != 48) {
          break;
        }
        if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) < 0x10000) {
          int v9 = 1;
        }
        else {
          int v9 = 2;
        }
        *((_DWORD *)this + 104) += v9;
        ++*(_DWORD *)(v4 + 132);
      }
    }
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeLiteral(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t v4 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
  if (result == -1)
  {
LABEL_16:
    *a2 = U_PATTERN_SYNTAX_ERROR;
    return result;
  }
  unsigned int v6 = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
  uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
  if (result < 0x10000) {
    int v7 = 1;
  }
  else {
    int v7 = 2;
  }
  *((_DWORD *)this + 104) += v7;
  if (v6 == 39)
  {
    for (; icu::number::impl::ParsedPatternInfo::ParserState::peek(v4) != 39; *((_DWORD *)this + 104) += v8)
    {
      uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
      if (result == -1) {
        goto LABEL_16;
      }
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v4) < 0x10000) {
        int v8 = 1;
      }
      else {
        int v8 = 2;
      }
    }
    uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
    if (result < 0x10000) {
      int v9 = 1;
    }
    else {
      int v9 = 2;
    }
    *((_DWORD *)this + 104) += v9;
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeIntegerFormat(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t v4 = (uint64_t *)*((void *)this + 53);
  unsigned int v5 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  while (1)
  {
    uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v5);
    if ((result - 48) < 0xA)
    {
      if (*((int *)v4 + 5) > 0) {
        goto LABEL_23;
      }
      ++*((_DWORD *)v4 + 11);
      ++*v4;
      ++*((_DWORD *)v4 + 4);
      ++*((_DWORD *)v4 + 6);
      if (!icu::number::impl::DecimalQuantity::isZeroish((icu::number::impl::DecimalQuantity *)(v4 + 7))
        || icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) != 48)
      {
        unsigned __int8 v7 = icu::number::impl::ParsedPatternInfo::ParserState::peek(v5);
        icu::number::impl::DecimalQuantity::appendDigit((icu::number::impl::DecimalQuantity *)(v4 + 7), (char)(v7 - 48), 0, 1);
      }
      goto LABEL_7;
    }
    if (result == 35)
    {
      if (*((int *)v4 + 4) > 0) {
        goto LABEL_23;
      }
      ++*((_DWORD *)v4 + 11);
      ++*v4;
      if (*((int *)v4 + 5) < 1) {
        ++*((_DWORD *)v4 + 2);
      }
      else {
        ++*((_DWORD *)v4 + 3);
      }
      ++*((_DWORD *)v4 + 6);
      goto LABEL_7;
    }
    if (result != 64) {
      break;
    }
    if (*((int *)v4 + 4) > 0 || *((int *)v4 + 3) > 0)
    {
LABEL_23:
      UErrorCode v9 = U_UNEXPECTED_TOKEN;
LABEL_24:
      *a2 = v9;
      return result;
    }
    ++*((_DWORD *)v4 + 11);
    ++*v4;
    *(uint64_t *)((char *)v4 + 20) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v4 + 20), (int32x2_t)0x100000001);
LABEL_7:
    if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) < 0x10000) {
      int v8 = 1;
    }
    else {
      int v8 = 2;
    }
    *((_DWORD *)this + 104) += v8;
  }
  if (result == 44)
  {
    ++*((_DWORD *)v4 + 11);
    *v4 <<= 16;
    goto LABEL_7;
  }
  UErrorCode v9 = U_UNEXPECTED_TOKEN;
  uint64_t v10 = *v4;
  if (!(unsigned __int16)*v4 && v10 < 0xFFFF0000) {
    goto LABEL_24;
  }
  if (!WORD1(v10) && (v10 & 0xFFFF00000000) != 0xFFFF00000000)
  {
    UErrorCode v9 = U_PATTERN_SYNTAX_ERROR;
    goto LABEL_24;
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeFractionFormat(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  int v4 = 0;
  unsigned int v5 = (int32x2_t *)*((void *)this + 53);
  unsigned int v6 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  while (1)
  {
    uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v6);
    if ((result - 48) >= 0xA)
    {
      if (result != 35) {
        return result;
      }
      ++v5[5].i32[1];
      v5[4] = vadd_s32(v5[4], (int32x2_t)0x100000001);
LABEL_5:
      ++v4;
      goto LABEL_7;
    }
    if (v5[4].i32[0] >= 1) {
      break;
    }
    ++v5[5].i32[1];
    ++v5[3].i32[1];
    ++v5[4].i32[1];
    if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v6) == 48) {
      goto LABEL_5;
    }
    unsigned __int8 v8 = icu::number::impl::ParsedPatternInfo::ParserState::peek(v6);
    icu::number::impl::DecimalQuantity::appendDigit((icu::number::impl::DecimalQuantity *)&v5[7], (char)(v8 - 48), v4, 0);
    int v4 = 0;
LABEL_7:
    if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v6) < 0x10000) {
      int v9 = 1;
    }
    else {
      int v9 = 2;
    }
    *((_DWORD *)this + 104) += v9;
  }
  *a2 = U_UNEXPECTED_TOKEN;
  return result;
}

void *icu::number::impl::PatternParser::patternInfoToProperties(uint64_t a1, uint64_t a2, int a3, const icu::UnicodeString *a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (a3) {
    BOOL v7 = a3 != 1 || *(unsigned char *)(a2 + 210) != 0;
  }
  else {
    BOOL v7 = 0;
  }
  uint64_t v8 = *(void *)(a2 + 72);
  int v9 = (__int16)v8;
  if ((int)v8 >> 16 == -1) {
    int v9 = -1;
  }
  *(_DWORD *)(a1 + 76) = v9;
  *(unsigned char *)(a1 + 80) = (int)v8 >> 16 != -1;
  if ((~v8 & 0xFFFF00000000) != 0) {
    int v10 = (int)v8 >> 16;
  }
  else {
    int v10 = -1;
  }
  *(_DWORD *)(a1 + 752) = v10;
  if (*(_DWORD *)(a2 + 96)) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = *(_DWORD *)(a2 + 108) < 1;
  }
  if (v11)
  {
    int v12 = *(_DWORD *)(a2 + 88);
    int v13 = *(_DWORD *)(a2 + 100);
    if (v12 | v13) {
      int v15 = *(_DWORD *)(a2 + 88);
    }
    else {
      int v15 = 1;
    }
    if (v12 | v13) {
      int v14 = *(_DWORD *)(a2 + 100);
    }
    else {
      int v14 = 0;
    }
  }
  else
  {
    int v14 = uprv_max(1, *(_DWORD *)(a2 + 100));
    int v15 = 0;
  }
  int v16 = *(_DWORD *)(a2 + 92);
  if (v16 < 1)
  {
    if (icu::number::impl::DecimalQuantity::isZeroish((icu::number::impl::DecimalQuantity *)(a2 + 128)))
    {
      int v18 = *(_DWORD *)(a2 + 108);
      if (v7) {
        int v19 = -1;
      }
      else {
        int v19 = v14;
      }
      if (v7) {
        int v18 = -1;
      }
      *(_DWORD *)(a1 + 104) = v19;
      *(_DWORD *)(a1 + 88) = v18;
      *(void *)(a1 + 736) = 0;
    }
    else
    {
      if (v7)
      {
        *(_DWORD *)(a1 + 104) = -1;
        *(_DWORD *)(a1 + 88) = -1;
        double v20 = 0.0;
      }
      else
      {
        *(_DWORD *)(a1 + 104) = v14;
        *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 108);
        double v20 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)(a2 + 128));
      }
      *(double *)(a1 + 736) = v20;
    }
    int v17 = -1;
    *(_DWORD *)(a1 + 116) = -1;
  }
  else
  {
    *(_DWORD *)(a1 + 104) = -1;
    *(_DWORD *)(a1 + 88) = -1;
    *(void *)(a1 + 736) = 0;
    *(_DWORD *)(a1 + 116) = v16;
    int v17 = *(_DWORD *)(a2 + 84) + v16;
  }
  *(_DWORD *)(a1 + 96) = v17;
  if (*(unsigned char *)(a2 + 112)) {
    BOOL v21 = *(_DWORD *)(a2 + 108) == 0;
  }
  else {
    BOOL v21 = 0;
  }
  char v22 = v21;
  *(unsigned char *)(a1 + 65) = v22;
  *(unsigned char *)(a1 + 67) = *(unsigned char *)(a2 + 211);
  int v23 = *(_DWORD *)(a2 + 204);
  if (v23 < 1)
  {
    *(unsigned char *)(a1 + 66) = 0;
    int v24 = -1;
    *(_DWORD *)(a1 + 100) = -1;
    *(_DWORD *)(a1 + 112) = v15;
  }
  else
  {
    *(unsigned char *)(a1 + 66) = *(unsigned char *)(a2 + 200);
    *(_DWORD *)(a1 + 100) = v23;
    if (*(_DWORD *)(a2 + 92))
    {
      *(_DWORD *)(a1 + 112) = 1;
      int v24 = -1;
    }
    else
    {
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 88);
      int v24 = *(_DWORD *)(a2 + 96);
    }
  }
  *(_DWORD *)(a1 + 92) = v24;
  memset(v49, 0, sizeof(v49));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(v49, a2, 256);
  memset(v48, 0, sizeof(v48));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, void))(*(void *)a2 + 32))(v48, a2, 0);
  if (!*(unsigned char *)(a2 + 120))
  {
    *(_DWORD *)(a1 + 72) = -1;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 392));
    *(unsigned char *)(a1 + 384) = 1;
    goto LABEL_68;
  }
  int v26 = *(_DWORD *)(a2 + 116);
  int v27 = icu::number::impl::AffixUtils::estimateLength((icu::number::impl::AffixUtils *)v49, a4, v25);
  *(_DWORD *)(a1 + 72) = v27
                       + icu::number::impl::AffixUtils::estimateLength((icu::number::impl::AffixUtils *)v48, a4, v28)
                       + v26;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v44, a2, 1024);
  if (SWORD4(v44) < 0)
  {
    int v29 = HIDWORD(v44);
    if (HIDWORD(v44) == 1) {
      goto LABEL_63;
    }
    if (HIDWORD(v44) != 2) {
      goto LABEL_64;
    }
LABEL_55:
    if ((BYTE8(v44) & 2) != 0) {
      int v30 = (_WORD *)((unint64_t)&v44 | 0xA);
    }
    else {
      int v30 = (_WORD *)*((void *)&v45 + 1);
    }
    if (*v30 == 39)
    {
      icu::UnicodeString::unBogus(a1 + 392);
      unsigned int v31 = *(unsigned __int16 *)(a1 + 400);
      int v32 = (__int16)v31;
      unsigned int v33 = v31 >> 5;
      if (v32 >= 0) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = *(unsigned int *)(a1 + 404);
      }
      icu::UnicodeString::doReplace(a1 + 392, 0, v34, (uint64_t)L"'", 0, 0xFFFFFFFFLL);
      goto LABEL_67;
    }
    long long v35 = (UChar **)(a1 + 392);
    goto LABEL_66;
  }
  if ((WORD4(v44) & 0xFFE0) == 0x40) {
    goto LABEL_55;
  }
  if ((WORD4(v44) & 0xFFE0) == 0x20)
  {
LABEL_63:
    long long v35 = (UChar **)(a1 + 392);
LABEL_66:
    icu::UnicodeString::operator=(v35, (UChar **)&v44);
    goto LABEL_67;
  }
  int v29 = WORD4(v44) >> 5;
LABEL_64:
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v43, (const icu::UnicodeString *)&v44, 1, (v29 - 2));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 392), (icu::UnicodeString *)v43);
  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v43);
LABEL_67:
  long long v37 = (void *)*(unsigned int *)(a2 + 124);
  *(_DWORD *)(a1 + 388) = v37;
  *(unsigned char *)(a1 + 384) = 0;
  icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v44);
LABEL_68:
  icu::UnicodeString::operator=((UChar **)(a1 + 544), (UChar **)v49);
  icu::UnicodeString::operator=((UChar **)(a1 + 672), (UChar **)v48);
  if (*(unsigned char *)(a2 + 432))
  {
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v44, a2, 768);
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 192), (icu::UnicodeString *)&v44);
    icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v44);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32))(&v44, a2, 512);
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 320), (icu::UnicodeString *)&v44);
    icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v44);
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 192));
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 320));
  }
  if (*(unsigned char *)(a2 + 208))
  {
    uint64_t v40 = 2;
  }
  else
  {
    uint64_t v40 = *(unsigned __int8 *)(a2 + 209);
    if (!*(unsigned char *)(a2 + 209))
    {
      *(_DWORD *)(a1 + 84) = 0;
      goto LABEL_76;
    }
    uint64_t v40 = 3;
  }
  *(_DWORD *)(a1 + 84) = v40;
LABEL_76:
  icu::UnicodeString::~UnicodeString((void *)v40, (icu::UnicodeString *)v48);
  return icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v49);
}

uint64_t icu::number::impl::PatternStringUtils::ignoreRoundingIncrement(icu::number::impl::PatternStringUtils *this, double *a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  double v2 = *(double *)this + *(double *)this;
  double v3 = 20.0;
  if (v2 > 1.0) {
    goto LABEL_7;
  }
  int v4 = 0;
  do
  {
    int v5 = v4;
    double v2 = v2 * 10.0;
    double v3 = v3 * 10.0;
    if (v4 >= (int)a2) {
      break;
    }
    ++v4;
  }
  while (v2 <= 1.0);
  if (v5 >= (int)a2) {
    return 1;
  }
LABEL_7:
  uint64_t v6 = 0;
  *(double *)this = (double)(int)(v2 * 10.0) / v3;
  return v6;
}

void *icu::number::impl::PatternStringUtils::propertiesToPatternString@<X0>(icu::number::impl::PatternStringUtils *this@<X0>, const icu::number::impl::DecimalFormatProperties *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = &unk_1EDA47700;
  *(_WORD *)(a3 + 8) = 2;
  int v6 = uprv_min(*((unsigned int *)this + 19), 100);
  int v105 = uprv_max(0, v6);
  int v7 = uprv_min(*((unsigned int *)this + 188), 100);
  int v107 = uprv_max(0, v7);
  int v108 = *((unsigned __int8 *)this + 80);
  int v101 = uprv_min(*((unsigned int *)this + 18), 100);
  uint64_t v98 = *((void *)this + 48);
  memset(v138, 0, sizeof(v138));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v138, (UChar **)this + 49);
  int v8 = uprv_min(*((unsigned int *)this + 28), 100);
  int v9 = uprv_max(0, v8);
  unsigned int v104 = uprv_min(*((unsigned int *)this + 23), 100);
  int v10 = uprv_min(*((unsigned int *)this + 26), 100);
  int v11 = uprv_max(0, v10);
  int v100 = uprv_min(*((unsigned int *)this + 22), 100);
  int v12 = uprv_min(*((unsigned int *)this + 29), 100);
  int v13 = uprv_min(*((unsigned int *)this + 24), 100);
  int v96 = *((unsigned __int8 *)this + 65);
  int v14 = uprv_min(*((unsigned int *)this + 25), 100);
  int v97 = *((unsigned __int8 *)this + 66);
  bzero(v128, 0x990uLL);
  v127[0] = &unk_1EDA4F2F0;
  v127[1] = &unk_1EDA47700;
  v128[0] = 2;
  long long v129 = &unk_1EDA47700;
  __int16 v130 = 2;
  uint64_t v131 = &unk_1EDA47700;
  __int16 v132 = 2;
  uint64_t v133 = &unk_1EDA47700;
  __int16 v134 = 2;
  char v135 = 1;
  int v15 = v136;
  sub_18C913BF0(v136);
  int v16 = (icu::CurrencyPluralInfo *)*((void *)this + 6);
  if (v16)
  {
    char v135 = 1;
    sub_18C9762D0((uint64_t)v136, v16, (uint64_t *)this, a2);
    if (v137) {
      int v15 = v127;
    }
  }
  else
  {
    int v15 = v127;
    sub_18C975BB8((uint64_t)v127, (uint64_t)this, a2);
    char v137 = 1;
  }
  (*(void (**)(long long *__return_ptr, void *, uint64_t))(*v15 + 32))(&v117, v15, 256);
  if ((SWORD4(v117) & 0x8000u) == 0) {
    uint64_t v17 = WORD4(v117) >> 5;
  }
  else {
    uint64_t v17 = HIDWORD(v117);
  }
  icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v117, 0, v17);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v117);
  unsigned int v19 = *(unsigned __int16 *)(a3 + 8);
  int v20 = (__int16)v19;
  unsigned int v21 = v19 >> 5;
  if (v20 < 0) {
    unsigned int v21 = *(_DWORD *)(a3 + 12);
  }
  unsigned int v102 = v21;
  int v22 = v105;
  if (v105 == v107) {
    int v22 = 0;
  }
  int v106 = v22;
  if (v108) {
    int v23 = v107 + v22 + 1;
  }
  else {
    int v23 = 1;
  }
  unsigned int v99 = v23;
  double v24 = *((double *)this + 92);
  long long v123 = 0u;
  uint64_t v126 = 0;
  long long v125 = 0u;
  long long v124 = 0u;
  uint64_t v122 = &unk_1EDA47700;
  LOWORD(v123) = 2;
  if (v13 != uprv_min(100, -1))
  {
    int v33 = (unsigned __int16)v123 >> 5;
    if ((v123 & 0x8000u) != 0) {
      int v33 = DWORD1(v123);
    }
    while (v33 < v12)
    {
      LOWORD(v117) = 64;
      icu::UnicodeString::doAppend((uint64_t)&v122, (uint64_t)&v117, 0, 1);
      int v33 = (unsigned __int16)v123 >> 5;
      if ((v123 & 0x8000u) != 0) {
        int v33 = DWORD1(v123);
      }
    }
    if (v33 < v13)
    {
      do
      {
        LOWORD(v117) = 35;
        icu::UnicodeString::doAppend((uint64_t)&v122, (uint64_t)&v117, 0, 1);
        int v34 = (unsigned __int16)v123 >> 5;
        if ((v123 & 0x8000u) != 0) {
          int v34 = DWORD1(v123);
        }
      }
      while (v34 < v13);
    }
    goto LABEL_44;
  }
  if (v24 == 0.0)
  {
LABEL_44:
    LowerDisplayint Magnitude = 0;
    goto LABEL_47;
  }
  if ((v100 & 0x80000000) == 0)
  {
    double v25 = v24 + v24;
    double v26 = 20.0;
    if (v24 + v24 > 1.0) {
      goto LABEL_24;
    }
    int v27 = 0;
    do
    {
      int v28 = v27;
      double v25 = v25 * 10.0;
      double v26 = v26 * 10.0;
      if (v27 >= v100) {
        break;
      }
      ++v27;
    }
    while (v25 <= 1.0);
    if (v28 < v100)
    {
LABEL_24:
      double v24 = (double)(int)(v25 * 10.0) / v26;
      goto LABEL_25;
    }
    goto LABEL_44;
  }
LABEL_25:
  uint64_t v121 = 0;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)&v117);
  icu::number::impl::DecimalQuantity::setToDouble((void **)&v117, v24);
  icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)&v117);
  LowerDisplayint Magnitude = icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude((icu::number::impl::DecimalQuantity *)&v117);
  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)&v117, -LowerDisplayMagnitude);
  icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)&v117, v9 - LowerDisplayMagnitude);
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  icu::number::impl::DecimalQuantity::toPlainString((icu::number::impl::DecimalQuantity *)&v117, (uint64_t)&v113);
  if ((SWORD4(v113) & 0x8000u) == 0) {
    uint64_t v30 = WORD4(v113) >> 5;
  }
  else {
    uint64_t v30 = HIDWORD(v113);
  }
  if (v30
    && ((BYTE8(v113) & 2) != 0
      ? (unsigned int v31 = (_WORD *)((unint64_t)&v113 | 0xA))
      : (unsigned int v31 = (_WORD *)*((void *)&v114 + 1)),
        *v31 == 45))
  {
    uint64_t v30 = (v30 - 1);
    int v32 = 1;
  }
  else
  {
    int v32 = 0;
  }
  icu::UnicodeString::doAppend((uint64_t)&v122, (const icu::UnicodeString *)&v113, v32, v30);
  icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v113);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)&v117);
LABEL_47:
  unsigned __int16 v36 = v123;
  int v37 = (unsigned __int16)v123 >> 5;
  int v38 = DWORD1(v123);
  if ((v123 & 0x8000u) != 0) {
    int v37 = DWORD1(v123);
  }
  if (v37 + LowerDisplayMagnitude < v9)
  {
    do
    {
      LOWORD(v117) = 48;
      icu::UnicodeString::doReplace((uint64_t)&v122, 0, 0, (uint64_t)&v117, 0, 1);
      unsigned __int16 v36 = v123;
      int v39 = (unsigned __int16)v123 >> 5;
      int v38 = DWORD1(v123);
      if ((v123 & 0x8000u) != 0) {
        int v39 = DWORD1(v123);
      }
    }
    while (v39 + LowerDisplayMagnitude < v9);
  }
  int v40 = LowerDisplayMagnitude;
  if (v11 > -LowerDisplayMagnitude)
  {
    int v41 = -LowerDisplayMagnitude;
    do
    {
      LOWORD(v117) = 48;
      icu::UnicodeString::doAppend((uint64_t)&v122, (uint64_t)&v117, 0, 1);
      ++v41;
    }
    while (v11 > v41);
    int v40 = -v11;
    unsigned __int16 v36 = v123;
    int v38 = DWORD1(v123);
  }
  int v42 = (__int16)v36;
  int v43 = v36 >> 5;
  if (v42 < 0) {
    int v43 = v38;
  }
  int v44 = uprv_max(v99, v43 + v40);
  if (v104 != 100) {
    int v44 = uprv_max(v104, v44);
  }
  int v45 = v40;
  if (v100 != 100) {
    int v45 = uprv_min(-v100, v40);
  }
  if (v44 > v45)
  {
    if (v96) {
      BOOL v46 = 1;
    }
    else {
      BOOL v46 = v45 < 0;
    }
    char v47 = v46;
    if (v11 >= -LowerDisplayMagnitude) {
      int v48 = -LowerDisplayMagnitude;
    }
    else {
      int v48 = v11;
    }
    int v49 = LowerDisplayMagnitude + v48 - v11 - v44;
    int v50 = v44 - 1;
    char v51 = v47 ^ 1;
    do
    {
      if ((__int16)v123 < 0)
      {
        unsigned int v53 = DWORD1(v123);
        unsigned int v54 = v49 + DWORD1(v123);
        if (v49 + DWORD1(v123) >= 0 && (int)v54 < SDWORD1(v123)) {
          goto LABEL_83;
        }
      }
      else
      {
        BOOL v52 = __CFADD__(v49, (unsigned __int16)v123 >> 5);
        if (((v49 + ((unsigned __int16)v123 >> 5)) & 0x80000000) == 0 && v52)
        {
          unsigned int v53 = (unsigned __int16)v123 >> 5;
          unsigned int v54 = v40 - v44 + v53;
LABEL_83:
          if (v53 <= v54)
          {
            __int16 v56 = -1;
          }
          else
          {
            char v55 = (char *)&v123 + 2;
            if ((v123 & 2) == 0) {
              char v55 = (char *)v124;
            }
            __int16 v56 = *(_WORD *)&v55[2 * v54];
          }
          goto LABEL_89;
        }
      }
      __int16 v56 = 35;
LABEL_89:
      LOWORD(v117) = v56;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v117, 0, 1);
      if (v50) {
        char v57 = 1;
      }
      else {
        char v57 = v51;
      }
      if ((v57 & 1) == 0)
      {
        if (*((unsigned char *)this + 67)) {
          __int16 v58 = 164;
        }
        else {
          __int16 v58 = 46;
        }
        LOWORD(v117) = v58;
        icu::UnicodeString::doAppend(a3, (uint64_t)&v117, 0, 1);
      }
      if (v108)
      {
        if (v50 + 1 >= 2 && v50 == v106)
        {
          LOWORD(v117) = 44;
          icu::UnicodeString::doAppend(a3, (uint64_t)&v117, 0, 1);
        }
        if (v50 > v106 && v107 >= 1 && !((v50 - v106) % v107))
        {
          LOWORD(v117) = 44;
          icu::UnicodeString::doAppend(a3, (uint64_t)&v117, 0, 1);
        }
      }
      ++v49;
      --v44;
      BOOL v46 = v50-- <= v45;
    }
    while (!v46);
  }
  if (v14 != uprv_min(100, -1))
  {
    LOWORD(v117) = 69;
    icu::UnicodeString::doAppend(a3, (uint64_t)&v117, 0, 1);
    if (v97)
    {
      LOWORD(v117) = 43;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v117, 0, 1);
    }
    if (v14 >= 1)
    {
      do
      {
        LOWORD(v117) = 48;
        icu::UnicodeString::doAppend(a3, (uint64_t)&v117, 0, 1);
        --v14;
      }
      while (v14);
    }
  }
  unsigned int v59 = *(unsigned __int16 *)(a3 + 8);
  int v60 = (__int16)v59;
  unsigned int v61 = v59 >> 5;
  if (v60 >= 0) {
    uint64_t v62 = v61;
  }
  else {
    uint64_t v62 = *(unsigned int *)(a3 + 12);
  }
  uint64_t v63 = 34;
  if (v137) {
    uint64_t v63 = 0;
  }
  (*(void (**)(long long *__return_ptr))(v127[v63] + 32))(&v117);
  if ((SWORD4(v117) & 0x8000u) == 0) {
    uint64_t v64 = WORD4(v117) >> 5;
  }
  else {
    uint64_t v64 = HIDWORD(v117);
  }
  icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v117, 0, v64);
  icu::UnicodeString::~UnicodeString(v65, (icu::UnicodeString *)&v117);
  if (v101 < 1)
  {
    int v66 = v102;
LABEL_142:
    uint64_t v86 = 34;
    if (v137) {
      uint64_t v86 = 0;
    }
    if ((*(unsigned int (**)(void))(v127[v86] + 56))())
    {
      LOWORD(v117) = 59;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v117, 0, 1);
      if (v137) {
        uint64_t v87 = 0;
      }
      else {
        uint64_t v87 = 34;
      }
      (*(void (**)(long long *__return_ptr))(v127[v87] + 32))(&v117);
      if ((SWORD4(v117) & 0x8000u) == 0) {
        uint64_t v88 = WORD4(v117) >> 5;
      }
      else {
        uint64_t v88 = HIDWORD(v117);
      }
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v117, 0, v88);
      icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)&v117);
      long long v119 = 0u;
      long long v120 = 0u;
      long long v117 = 0u;
      long long v118 = 0u;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v117, (UChar **)a3);
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v117, v66, (v62 - v66));
      if (v137) {
        uint64_t v90 = 0;
      }
      else {
        uint64_t v90 = 34;
      }
      (*(void (**)(long long *__return_ptr))(v127[v90] + 32))(&v113);
      if ((SWORD4(v113) & 0x8000u) == 0) {
        uint64_t v91 = WORD4(v113) >> 5;
      }
      else {
        uint64_t v91 = HIDWORD(v113);
      }
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v113, 0, v91);
      icu::UnicodeString::~UnicodeString(v92, (icu::UnicodeString *)&v113);
      icu::UnicodeString::~UnicodeString(v93, (icu::UnicodeString *)&v117);
    }
    goto LABEL_158;
  }
  int v66 = v102;
  if ((_BYTE)v98) {
    goto LABEL_142;
  }
  unsigned int v67 = *(unsigned __int16 *)(a3 + 8);
  int v68 = (__int16)v67;
  int v69 = v67 >> 5;
  if (v68 < 0) {
    int v69 = *(_DWORD *)(a3 + 12);
  }
  if (v101 <= v69)
  {
    uint64_t v70 = a2;
  }
  else
  {
    uint64_t v70 = a2;
    do
    {
      LOWORD(v117) = 35;
      icu::UnicodeString::doReplace(a3, v102, 0, (uint64_t)&v117, 0, 1);
      uint64_t v62 = (v62 + 1);
      unsigned int v71 = *(unsigned __int16 *)(a3 + 8);
      int v72 = (__int16)v71;
      int v73 = v71 >> 5;
      if (v72 < 0) {
        int v73 = *(_DWORD *)(a3 + 12);
      }
    }
    while (v101 > v73);
  }
  switch(HIDWORD(v98))
  {
    case 0:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v112, (UChar **)v138);
      int v74 = icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v112, a3, 0);
      icu::UnicodeString::~UnicodeString(v75, (icu::UnicodeString *)v112);
      LOWORD(v117) = 42;
      uint64_t v76 = a3;
      uint64_t v77 = 0;
      goto LABEL_135;
    case 1:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v111, (UChar **)v138);
      int v74 = icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v111, a3, v102);
      icu::UnicodeString::~UnicodeString(v78, (icu::UnicodeString *)v111);
      LOWORD(v117) = 42;
      uint64_t v76 = a3;
      uint64_t v77 = v102;
LABEL_135:
      icu::UnicodeString::doReplace(v76, v77, 0, (uint64_t)&v117, 0, 1);
      int v66 = v74 + 1 + v102;
      LODWORD(v62) = v74 + 1 + v62;
      break;
    case 2:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v110, (UChar **)v138);
      icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v110, a3, v62);
      icu::UnicodeString::~UnicodeString(v79, (icu::UnicodeString *)v110);
      LOWORD(v117) = 42;
      icu::UnicodeString::doReplace(a3, v62, 0, (uint64_t)&v117, 0, 1);
      break;
    case 3:
      LOWORD(v117) = 42;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v117, 0, 1);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v109, (UChar **)v138);
      unsigned int v80 = *(unsigned __int16 *)(a3 + 8);
      int v81 = (__int16)v80;
      unsigned int v82 = v80 >> 5;
      if (v81 >= 0) {
        uint64_t v83 = v82;
      }
      else {
        uint64_t v83 = *(unsigned int *)(a3 + 12);
      }
      icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v109, a3, v83);
      icu::UnicodeString::~UnicodeString(v84, (icu::UnicodeString *)v109);
      break;
    default:
      break;
  }
  int v85 = (void *)*(unsigned int *)v70;
  if ((int)v85 <= 0) {
    goto LABEL_142;
  }
LABEL_158:
  icu::UnicodeString::~UnicodeString(v85, (icu::UnicodeString *)&v122);
  sub_18C913CF8(v127);
  return icu::UnicodeString::~UnicodeString(v94, (icu::UnicodeString *)v138);
}

uint64_t icu::number::impl::PatternStringUtils::escapePaddingString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    if (*(_DWORD *)(a1 + 12)) {
      goto LABEL_9;
    }
  }
  else if (v6 >> 5)
  {
    goto LABEL_9;
  }
  icu::UnicodeString::unBogus(a1);
  if (*(__int16 *)(a1 + 8) < 0) {
    uint64_t v7 = *(unsigned int *)(a1 + 12);
  }
  else {
    uint64_t v7 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  icu::UnicodeString::doReplace(a1, 0, v7, (uint64_t)" ", 0, 0xFFFFFFFFLL);
  LOWORD(v6) = *(_WORD *)(a1 + 8);
LABEL_9:
  unsigned int v8 = *(unsigned __int16 *)(a2 + 8);
  unsigned int v9 = *(_DWORD *)(a2 + 12);
  if ((v6 & 0x8000) == 0)
  {
    if ((v6 & 0xFFE0) == 0x20) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
  if (*(_DWORD *)(a1 + 12) != 1)
  {
LABEL_17:
    unsigned int v25 = *(_DWORD *)(a2 + 12);
    __int16 v26 = 39;
    int v14 = 1;
    icu::UnicodeString::doReplace(a2, a3, 0, (uint64_t)&v26, 0, 1);
    for (unint64_t i = 0; ; ++i)
    {
      if (*(__int16 *)(a1 + 8) < 0)
      {
        if ((uint64_t)i >= *(int *)(a1 + 12))
        {
LABEL_31:
          __int16 v26 = 39;
          icu::UnicodeString::doReplace(a2, (v14 + a3), 0, (uint64_t)&v26, 0, 1);
          unsigned int v9 = v25;
          goto LABEL_33;
        }
        unint64_t v16 = *(unsigned int *)(a1 + 12);
      }
      else
      {
        if (i >= (unint64_t)*(unsigned __int16 *)(a1 + 8) >> 5) {
          goto LABEL_31;
        }
        unint64_t v16 = (unint64_t)*(unsigned __int16 *)(a1 + 8) >> 5;
      }
      if (v16 <= i)
      {
        LOWORD(v18) = -1;
      }
      else
      {
        uint64_t v17 = a1 + 10;
        if ((*(_WORD *)(a1 + 8) & 2) == 0) {
          uint64_t v17 = *(void *)(a1 + 24);
        }
        int v18 = *(unsigned __int16 *)(v17 + 2 * i);
        if (v18 == 39)
        {
          icu::UnicodeString::doReplace(a2, (v14 + a3), 0, (uint64_t)"'", 0, 0xFFFFFFFFLL);
          int v19 = 2;
          goto LABEL_30;
        }
      }
      __int16 v26 = v18;
      int v19 = 1;
      icu::UnicodeString::doReplace(a2, (v14 + a3), 0, (uint64_t)&v26, 0, 1);
LABEL_30:
      v14 += v19;
    }
  }
LABEL_11:
  if (icu::UnicodeString::doCompare(a1, 0, 1, (uint64_t)L"'", 0, -1))
  {
    unsigned int v10 = *(unsigned __int16 *)(a1 + 8);
    int v11 = (__int16)v10;
    unsigned int v12 = v10 >> 5;
    if (v11 >= 0) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = *(unsigned int *)(a1 + 12);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)a2, a3, 0, (const icu::UnicodeString *)a1, 0, v13);
  }
  else
  {
    icu::UnicodeString::doReplace(a2, a3, 0, (uint64_t)"'", 0, 0xFFFFFFFFLL);
  }
LABEL_33:
  if ((v8 & 0x8000u) == 0) {
    unsigned int v20 = v8 >> 5;
  }
  else {
    unsigned int v20 = v9;
  }
  unsigned int v21 = *(unsigned __int16 *)(a2 + 8);
  int v22 = (__int16)v21;
  unsigned int v23 = v21 >> 5;
  if (v22 < 0) {
    unsigned int v23 = *(_DWORD *)(a2 + 12);
  }
  return v23 - v20;
}

void *icu::number::impl::PatternStringUtils::convertLocalized@<X0>(icu::number::impl::PatternStringUtils *this@<X0>, UChar **a2@<X1>, const icu::DecimalFormatSymbols *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v6 = a3;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  bzero(v79, 0xA80uLL);
  for (uint64_t i = 0; i != 2688; i += 64)
  {
    int v11 = &v79[i];
    *(void *)int v11 = &unk_1EDA47700;
    *((_WORD *)v11 + 4) = 2;
  }
  uint64_t v12 = v6 ^ 1;
  icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)L"%");
  uint64_t v13 = (icu::UnicodeString *)&v79[64 * v12];
  icu::UnicodeString::operator=(v13, (icu::UnicodeString *)&v75);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v75);
  uint64_t v15 = v6;
  unint64_t v16 = (UChar **)&v79[64 * (unint64_t)v6];
  icu::UnicodeString::operator=(v16, a2 + 25);
  icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)"0 ");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v79[64 * v12 + 128], (icu::UnicodeString *)&v75);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v75);
  icu::UnicodeString::operator=((UChar **)&v79[64 * v15 + 128], a2 + 97);
  icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)".");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v79[64 * v12 + 256], (icu::UnicodeString *)&v75);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v75);
  icu::UnicodeString::operator=((UChar **)&v79[64 * v15 + 256], a2 + 1);
  icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)",");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v79[64 * v12 + 384], (icu::UnicodeString *)&v75);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v75);
  icu::UnicodeString::operator=((UChar **)&v79[64 * v15 + 384], a2 + 9);
  icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)L"-");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v79[64 * v12 + 512], (icu::UnicodeString *)&v75);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v75);
  icu::UnicodeString::operator=((UChar **)&v79[64 * v15 + 512], a2 + 49);
  icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)"+");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v79[64 * v12 + 640], (icu::UnicodeString *)&v75);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v75);
  icu::UnicodeString::operator=((UChar **)&v79[64 * v15 + 640], a2 + 57);
  icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)";");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v79[64 * v12 + 768], (icu::UnicodeString *)&v75);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v75);
  icu::UnicodeString::operator=((UChar **)&v79[64 * v15 + 768], a2 + 17);
  icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)"@");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v79[64 * v12 + 896], (icu::UnicodeString *)&v75);
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v75);
  icu::UnicodeString::operator=((UChar **)&v79[64 * v15 + 896], a2 + 129);
  icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)"E");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v79[64 * v12 + 1024], (icu::UnicodeString *)&v75);
  icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v75);
  icu::UnicodeString::operator=((UChar **)&v79[64 * v15 + 1024], a2 + 89);
  icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)"*");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v79[64 * v12 + 1152], (icu::UnicodeString *)&v75);
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v75);
  icu::UnicodeString::operator=((UChar **)&v79[64 * v15 + 1152], a2 + 105);
  icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)"#");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v79[64 * v12 + 1280], (icu::UnicodeString *)&v75);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v75);
  icu::UnicodeString::operator=((UChar **)&v79[64 * v15 + 1280], a2 + 41);
  unint64_t v27 = 0;
  int v28 = a2 + 33;
  int v29 = v16 + 176;
  uint64_t v30 = a2 + 137;
  unsigned int v31 = 48;
  do
  {
    int v32 = (char *)v13 + v27;
    if (*(__int16 *)((unsigned char *)v13 + v27 + 1416) < 0) {
      uint64_t v33 = *((unsigned int *)v32 + 355);
    }
    else {
      uint64_t v33 = *(unsigned __int16 *)((char *)v13 + v27 + 1416) >> 5;
    }
    icu::UnicodeString::replace((icu::UnicodeString *)(v32 + 1408), 0, v33, v31);
    if (v27) {
      int v34 = v30;
    }
    else {
      int v34 = v28;
    }
    icu::UnicodeString::operator=(&v29[v27 / 8], v34);
    ++v31;
    v27 += 128;
    v30 += 8;
  }
  while (v27 != 1280);
  uint64_t v35 = 0;
  unsigned __int16 v36 = &v79[64 * v15];
  do
  {
    icu::UnicodeString::UnicodeString((uint64_t)&v75, 39);
    icu::UnicodeString::UnicodeString((uint64_t)&v72, 8217);
    if (*(__int16 *)&v36[v35 + 8] < 0) {
      int32_t v37 = *(_DWORD *)&v36[v35 + 12];
    }
    else {
      int32_t v37 = *(unsigned __int16 *)&v36[v35 + 8] >> 5;
    }
    if ((SWORD4(v75) & 0x8000u) == 0) {
      uint64_t v38 = WORD4(v75) >> 5;
    }
    else {
      uint64_t v38 = HIDWORD(v75);
    }
    int v39 = v73 >> 5;
    if ((v73 & 0x8000u) != 0) {
      int v39 = v74;
    }
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v36[v35], 0, v37, (const icu::UnicodeString *)&v75, 0, v38, (const icu::UnicodeString *)&v72, 0, v39);
    icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&v72);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v75);
    v35 += 128;
  }
  while (v35 != 2688);
  int v42 = 0;
  int v43 = 0;
  *(_OWORD *)(a5 + 8) = 0u;
  *(void *)(a5 + 56) = 0;
  *(_OWORD *)(a5 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(void *)a5 = &unk_1EDA47700;
  *(_WORD *)(a5 + 8) = 2;
  while (1)
  {
    unsigned int v44 = *((unsigned __int16 *)this + 4);
    if (*((__int16 *)this + 4) < 0) {
      break;
    }
    if (v43 >= (int)(v44 >> 5)) {
      goto LABEL_87;
    }
    int v45 = v44 >> 5;
LABEL_26:
    if (v45 <= v43)
    {
      LOWORD(v47) = -1;
    }
    else
    {
      if ((v44 & 2) != 0) {
        BOOL v46 = (char *)this + 10;
      }
      else {
        BOOL v46 = (char *)*((void *)this + 3);
      }
      int v47 = *(unsigned __int16 *)&v46[2 * v43];
      if (v47 == 39)
      {
        LOWORD(v75) = 39;
        int v42 = 1;
        icu::UnicodeString::doAppend(a5, (uint64_t)&v75, 0, 1);
        LOWORD(v75) = 39;
LABEL_71:
        icu::UnicodeString::doAppend(a5, (uint64_t)&v75, 0, 1);
        goto LABEL_86;
      }
    }
    if (((1 << v42) & 0x19) != 0)
    {
      for (uint64_t j = 0; j != 2688; j += 128)
      {
        int v49 = &v79[j];
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        unsigned int v50 = *(unsigned __int16 *)&v79[j + 8];
        if ((v50 & 0x8000) != 0) {
          int32_t v51 = *((_DWORD *)v49 + 3);
        }
        else {
          int32_t v51 = v50 >> 5;
        }
        icu::UnicodeString::tempSubString(this, v43, v51, (icu::UnicodeString *)&v75);
        if (BYTE8(v75))
        {
          unsigned int v54 = (void *)*((unsigned __int16 *)v49 + 4);
          if (v54) {
            goto LABEL_76;
          }
        }
        else
        {
          if ((SWORD4(v75) & 0x8000u) == 0) {
            int v52 = WORD4(v75) >> 5;
          }
          else {
            int v52 = HIDWORD(v75);
          }
          unsigned int v53 = *((unsigned __int16 *)v49 + 4);
          if ((v53 & 0x8000u) == 0) {
            unsigned int v54 = (void *)(v53 >> 5);
          }
          else {
            unsigned int v54 = (void *)*(unsigned int *)&v79[j + 12];
          }
          if ((v53 & 1) == 0
            && v52 == v54
            && icu::UnicodeString::doEquals((icu::UnicodeString *)&v75, (const icu::UnicodeString *)&v79[j], v52))
          {
            LODWORD(v54) = *(unsigned __int16 *)&v79[j + 8];
LABEL_76:
            if (((unsigned __int16)v54 & 0x8000) != 0) {
              unsigned int v63 = *(_DWORD *)&v79[j + 12];
            }
            else {
              unsigned int v63 = v54 >> 5;
            }
            if ((v42 - 3) <= 1)
            {
              __int16 v72 = 39;
              icu::UnicodeString::doAppend(a5, (uint64_t)&v72, 0, 1);
              int v42 = 0;
            }
            int v43 = v43 + v63 - 1;
            unsigned int v64 = *(unsigned __int16 *)&v79[j + 72];
            int v65 = (__int16)v64;
            unsigned int v66 = v64 >> 5;
            if (v65 >= 0) {
              uint64_t v67 = v66;
            }
            else {
              uint64_t v67 = *(unsigned int *)&v79[j + 76];
            }
            icu::UnicodeString::doAppend(a5, (const icu::UnicodeString *)&v79[j + 64], 0, v67);
LABEL_85:
            icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)&v75);
            goto LABEL_86;
          }
        }
        icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)&v75);
      }
      for (uint64_t k = 0; k != 2688; k += 128)
      {
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        __int16 v56 = &v79[k];
        unsigned int v57 = *(unsigned __int16 *)&v79[k + 72];
        if ((v57 & 0x8000) != 0) {
          int32_t v58 = *((_DWORD *)v56 + 19);
        }
        else {
          int32_t v58 = v57 >> 5;
        }
        icu::UnicodeString::tempSubString(this, v43, v58, (icu::UnicodeString *)&v75);
        if (BYTE8(v75))
        {
          unsigned int v61 = (void *)*((unsigned __int16 *)v56 + 36);
          if (v61) {
            goto LABEL_73;
          }
        }
        else
        {
          if ((SWORD4(v75) & 0x8000u) == 0) {
            int v59 = WORD4(v75) >> 5;
          }
          else {
            int v59 = HIDWORD(v75);
          }
          unsigned int v60 = *((unsigned __int16 *)v56 + 36);
          if ((v60 & 0x8000u) == 0) {
            unsigned int v61 = (void *)(v60 >> 5);
          }
          else {
            unsigned int v61 = (void *)*(unsigned int *)&v79[k + 76];
          }
          if ((v60 & 1) == 0
            && v59 == v61
            && icu::UnicodeString::doEquals((icu::UnicodeString *)&v75, (const icu::UnicodeString *)(v56 + 64), v59))
          {
LABEL_73:
            if (!v42)
            {
              __int16 v72 = 39;
              icu::UnicodeString::doAppend(a5, (uint64_t)&v72, 0, 1);
              int v42 = 4;
            }
            __int16 v72 = v47;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v72, 0, 1);
            goto LABEL_85;
          }
        }
        icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)&v75);
      }
      if ((v42 - 3) <= 1)
      {
        LOWORD(v75) = 39;
        icu::UnicodeString::doAppend(a5, (uint64_t)&v75, 0, 1);
        int v42 = 0;
      }
      LOWORD(v75) = v47;
      goto LABEL_71;
    }
    LOWORD(v75) = v47;
    icu::UnicodeString::doAppend(a5, (uint64_t)&v75, 0, 1);
    int v42 = 2;
LABEL_86:
    ++v43;
  }
  int v45 = *((_DWORD *)this + 3);
  if (v43 < v45) {
    goto LABEL_26;
  }
LABEL_87:
  uint64_t v68 = (v42 - 3);
  if (v68 >= 2)
  {
    if (v42)
    {
      uint64_t v68 = 65799;
      *a4 = 65799;
    }
  }
  else
  {
    LOWORD(v75) = 39;
    icu::UnicodeString::doAppend(a5, (uint64_t)&v75, 0, 1);
  }
  for (uint64_t m = 2624; m != -64; m -= 64)
    uint64_t result = icu::UnicodeString::~UnicodeString((void *)v68, (icu::UnicodeString *)&v79[m]);
  return result;
}

uint64_t icu::number::impl::PatternStringUtils::patternInfoToStringBuilder(uint64_t a1, int a2, int a3, int a4, unsigned int a5, unsigned __int8 a6, int a7, uint64_t a8)
{
  if (a3 == 1) {
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) ^ 1;
  }
  else {
    int v15 = 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1)
    && (a3 == 2 || ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) & (v15 | a4)) == 1))
  {
    int v16 = 512;
    char v17 = 1;
  }
  else
  {
    char v17 = 0;
    int v16 = 0;
  }
  if (a2) {
    v16 |= 0x100u;
  }
  if (a5 == 8) {
    unsigned int v18 = 0;
  }
  else {
    unsigned int v18 = a5;
  }
  uint64_t v19 = v16 | v18;
  int v20 = v15 | a4;
  if (a3 == 2) {
    int v20 = 1;
  }
  if (!a2) {
    int v20 = 0;
  }
  if (v17) {
    int v21 = 0;
  }
  else {
    int v21 = v20;
  }
  int v22 = L"-";
  if (v15) {
    int v22 = (const __int16 *)"+";
  }
  unsigned int v23 = L"~+";
  double v24 = "~";
  if (a3 == 2) {
    double v24 = "~";
  }
  if ((v15 & 1) == 0) {
    unsigned int v23 = (const __int16 *)v24;
  }
  if (a4) {
    unsigned int v25 = v23;
  }
  else {
    unsigned int v25 = v22;
  }
  uint64_t v26 = v19;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  int v28 = result + v21;
  if (*(_WORD *)(a8 + 8)) {
    __int16 v29 = 2;
  }
  else {
    __int16 v29 = *(_WORD *)(a8 + 8) & 0x1F;
  }
  *(_WORD *)(a8 + 8) = v29;
  if (v28 >= 1)
  {
    for (int i = 0; i != v28; ++i)
    {
      if (i) {
        char v31 = 0;
      }
      else {
        char v31 = v21;
      }
      if ((v31 & 1) != 0
        || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 16))(a1, v26, ((v21 << 31 >> 31) + i)), result == 45))
      {
        int32_t v32 = u_strlen((const UChar *)v25);
        uint64_t result = *(unsigned __int16 *)v25;
        if (v32 != 1)
        {
          UChar v35 = *v25;
          icu::UnicodeString::doAppend(a8, (uint64_t)&v35, 0, 1);
          uint64_t result = *((unsigned __int16 *)v25 + 1);
        }
      }
      if ((a6 & (result == 37)) != 0) {
        int v33 = 8240;
      }
      else {
        int v33 = result;
      }
      if (!a7 || v33 != 164)
      {
        __int16 v36 = v33;
        uint64_t result = icu::UnicodeString::doAppend(a8, (uint64_t)&v36, 0, 1);
      }
    }
  }
  return result;
}

uint64_t icu::number::impl::PatternStringUtils::resolveSignDisplay(int a1, unsigned int a2)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
    case 3:
      if (a2 >= 4) {
        goto LABEL_11;
      }
      int v4 = (unsigned int *)&unk_18CA951F0;
      break;
    case 1:
    case 4:
      if (a2 >= 4) {
        goto LABEL_11;
      }
      int v4 = (unsigned int *)&unk_18CA95200;
      break;
    case 2:
      return result;
    case 5:
    case 6:
      if (a2 >= 4) {
        goto LABEL_11;
      }
      int v4 = (unsigned int *)&unk_18CA95210;
      break;
    case 7:
    case 8:
      if (a2 >= 4) {
        goto LABEL_11;
      }
      int v4 = (unsigned int *)&unk_18CA95220;
      break;
    default:
LABEL_11:
      abort();
  }
  return v4[a2];
}

void sub_18C97E528(void **a1)
{
  sub_18C962BDC(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C97E550(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  memset(&v28[1], 0, 48);
  uint64_t v29 = 0;
  v28[0] = (char *)&v28[1] + 5;
  LODWORD(v28[1]) = 40;
  UErrorCode v22 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v25);
  unsigned int v6 = 0;
  if ((v26 & 0x11) == 0)
  {
    if ((v26 & 2) != 0) {
      unsigned int v6 = v27;
    }
    else {
      unsigned int v6 = *(unsigned char **)&v27[14];
    }
  }
  int v21 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v23, 0, &v21);
  icu::CharString::appendInvariantChars((icu::CharString *)v28, (const icu::UnicodeString *)v23, &v22);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v23);
  int v20 = v21;
  icu::UnicodeString::~UnicodeString(&v20, (icu::UnicodeString *)&v25);
  UErrorCode v8 = v22;
  if (v22 == U_INVARIANT_CONVERSION_ERROR)
  {
    UErrorCode v8 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v8;
    goto LABEL_9;
  }
  if (v22 > U_ZERO_ERROR) {
    goto LABEL_8;
  }
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v23);
  int v25 = 0;
  icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v23, (const char *)v28[0], v29, (UErrorCode *)&v25);
  if (v25 > 0
    || (icu::number::impl::DecimalQuantity::isNaN((icu::number::impl::DecimalQuantity *)v23) & 1) != 0
    || icu::number::impl::DecimalQuantity::isInfinite((icu::number::impl::DecimalQuantity *)v23))
  {
    *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
  }
  else
  {
    int v9 = icu::number::impl::DecimalQuantity::adjustToZeroScale((icu::number::impl::DecimalQuantity *)v23);
    int v10 = v9;
    uint64_t v11 = v29;
    if ((int)v29 >= 1)
    {
      uint64_t v12 = (unsigned __int8 *)v28[0];
      while (1)
      {
        int v13 = *v12++;
        if (v13 == 46) {
          break;
        }
        if (!--v11) {
          goto LABEL_23;
        }
      }
      int v14 = 1 - v11;
      icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v23, v9 + v11 - 1);
      int v10 = v14;
    }
LABEL_23:
    uint64_t v15 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v23, 0);
    if (v15 == 5) {
      int v16 = 7;
    }
    else {
      int v16 = 5;
    }
    if (v15 == 1) {
      int v16 = 6;
    }
    if ((__int16)v10 <= 0) {
      int v17 = -v10;
    }
    else {
      LOWORD(v17) = 0;
    }
    if (v15) {
      int v18 = v16;
    }
    else {
      int v18 = 10;
    }
    *(_DWORD *)a2 = v18;
    uint64_t v19 = 65810;
    if (v15) {
      uint64_t v19 = v15;
    }
    *(void *)(a2 + 8) = v19;
    *(_WORD *)(a2 + 16) = v10;
    if (v15) {
      LOWORD(v19) = v17;
    }
    *(_WORD *)(a2 + 18) = v19;
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 24) = 0;
  }
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v23);
LABEL_9:
  if (BYTE4(v28[1])) {
    uprv_free(v28[0]);
  }
}

uint64_t icu::number::Precision::incrementExact@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (this)
  {
    if (this == 5) {
      int v3 = 7;
    }
    else {
      int v3 = 5;
    }
    if (this == 1) {
      int v3 = 6;
    }
    *(void *)(a3 + 8) = this;
    *(_WORD *)(a3 + 16) = a2;
    if (a2 <= 0) {
      int v4 = -a2;
    }
    else {
      LOWORD(v4) = 0;
    }
    *(_WORD *)(a3 + 18) = v4;
    *(_DWORD *)(a3 + 20) = 0;
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 65810;
    int v3 = 10;
  }
  *(_DWORD *)a3 = v3;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

void icu::number::Precision::unlimited(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 13) = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

double icu::number::Precision::integer@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 2;
  double result = NAN;
  *(void *)(a1 + 8) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t icu::number::Precision::constructFraction@<X0>(uint64_t this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 2;
  *(_WORD *)(a3 + 8) = this;
  *(_WORD *)(a3 + 10) = a2;
  *(_DWORD *)(a3 + 12) = -1;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::fixedFraction@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (this > 0x3E7)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }
  else
  {
    *(_WORD *)(a2 + 8) = this;
    *(_WORD *)(a2 + 10) = this;
    *(_DWORD *)(a2 + 12) = -1;
    *(void *)(a2 + 16) = 0;
    int v2 = 2;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minFraction@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (this > 0x3E7)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }
  else
  {
    *(_WORD *)(a2 + 8) = this;
    *(_DWORD *)(a2 + 10) = -1;
    *(_WORD *)(a2 + 14) = -1;
    *(void *)(a2 + 16) = 0;
    int v2 = 2;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::maxFraction@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (this > 0x3E7)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }
  else
  {
    *(_WORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 10) = this;
    *(_DWORD *)(a2 + 12) = -1;
    *(void *)(a2 + 16) = 0;
    int v2 = 2;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minMaxFraction@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((int)this > a2 || (this & 0x80000000) != 0 || a2 > 999)
  {
    *(_DWORD *)(a3 + 8) = 65810;
    int v3 = 10;
  }
  else
  {
    *(_WORD *)(a3 + 8) = this;
    *(_WORD *)(a3 + 10) = a2;
    *(_DWORD *)(a3 + 12) = -1;
    *(void *)(a3 + 16) = 0;
    int v3 = 2;
  }
  *(_DWORD *)a3 = v3;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::fixedSignificantDigits@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if ((this - 1) > 0x3E6)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }
  else
  {
    *(_DWORD *)(a2 + 8) = -1;
    *(_WORD *)(a2 + 12) = this;
    *(_WORD *)(a2 + 14) = this;
    *(void *)(a2 + 16) = 0;
    int v2 = 3;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::constructSignificant@<X0>(uint64_t this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 3;
  *(_DWORD *)(a3 + 8) = -1;
  *(_WORD *)(a3 + 12) = this;
  *(_WORD *)(a3 + 14) = a2;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minSignificantDigits@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if ((this - 1) > 0x3E6)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }
  else
  {
    *(_DWORD *)(a2 + 8) = -1;
    *(_WORD *)(a2 + 12) = this;
    *(_WORD *)(a2 + 14) = -1;
    *(void *)(a2 + 16) = 0;
    int v2 = 3;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::maxSignificantDigits@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if ((this - 1) > 0x3E6)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }
  else
  {
    *(_DWORD *)(a2 + 8) = -1;
    *(_WORD *)(a2 + 12) = 1;
    *(_WORD *)(a2 + 14) = this;
    *(void *)(a2 + 16) = 0;
    int v2 = 3;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minMaxSignificantDigits@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((int)this > a2 || (int)this < 1 || a2 > 999)
  {
    *(_DWORD *)(a3 + 8) = 65810;
    int v3 = 10;
  }
  else
  {
    *(_DWORD *)(a3 + 8) = -1;
    *(_WORD *)(a3 + 12) = this;
    *(_WORD *)(a3 + 14) = a2;
    *(void *)(a3 + 16) = 0;
    int v3 = 3;
  }
  *(_DWORD *)a3 = v3;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

__n128 icu::number::Precision::trailingZeroDisplay@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(__n128 *)(a3 + 16) = result;
  *(_DWORD *)(a3 + 24) = a2;
  return result;
}

void icu::number::Precision::increment(double a1@<D0>, uint64_t a2@<X8>)
{
  if (a1 <= 0.0)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v8 = 10;
  }
  else
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v10);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v10, a1);
    icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)v10);
    int v5 = icu::number::impl::DecimalQuantity::adjustToZeroScale((icu::number::impl::DecimalQuantity *)v10);
    uint64_t v6 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v10, 0);
    if (v6 == 5) {
      int v7 = 7;
    }
    else {
      int v7 = 5;
    }
    if (v6 == 1) {
      int v8 = 6;
    }
    else {
      int v8 = v7;
    }
    *(void *)(a2 + 8) = v6;
    *(_WORD *)(a2 + 16) = v5;
    if ((__int16)v5 <= 0) {
      int v9 = -v5;
    }
    else {
      LOWORD(v9) = 0;
    }
    *(_WORD *)(a2 + 18) = v9;
    *(_DWORD *)(a2 + 20) = 0;
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v10);
  }
  *(_DWORD *)a2 = v8;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t icu::number::Precision::constructIncrement@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (this == 5) {
    int v3 = 7;
  }
  else {
    int v3 = 5;
  }
  if (this == 5) {
    uint64_t v4 = 5;
  }
  else {
    uint64_t v4 = this;
  }
  if (this == 1) {
    int v5 = 6;
  }
  else {
    int v5 = v3;
  }
  if (this == 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v4;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  *(_WORD *)(a3 + 16) = a2;
  if (a2 <= 0) {
    int v7 = -a2;
  }
  else {
    LOWORD(v7) = 0;
  }
  *(_WORD *)(a3 + 18) = v7;
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::currency@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 20) = 0;
  *(void *)(a2 + 12) = 0;
  *(_DWORD *)a2 = 8;
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t icu::number::Precision::constructCurrency@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 20) = 0;
  *(void *)(a2 + 12) = 0;
  *(_DWORD *)a2 = 8;
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t icu::number::FractionPrecision::withSignificantDigits@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(_DWORD *)result == 10)
  {
    long long v5 = *(_OWORD *)(result + 16);
    *(_OWORD *)a5 = *(_OWORD *)result;
    *(_OWORD *)(a5 + 16) = v5;
  }
  else if (a2 < 1 || a3 < a2 || a3 > 999)
  {
    *(_DWORD *)a5 = 10;
    *(_DWORD *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 8) = 65810;
  }
  else
  {
    int v6 = *(_DWORD *)(result + 8);
    *(_WORD *)(a5 + 21) = *(_WORD *)(result + 21);
    *(unsigned char *)(a5 + 23) = *(unsigned char *)(result + 23);
    *(_DWORD *)a5 = 4;
    *(_DWORD *)(a5 + 8) = v6;
    *(_WORD *)(a5 + 12) = a2;
    *(_WORD *)(a5 + 14) = a3;
    *(_DWORD *)(a5 + 16) = a4;
    *(unsigned char *)(a5 + 20) = 0;
    *(_DWORD *)(a5 + 24) = 0;
  }
  return result;
}

uint64_t icu::number::Precision::constructFractionSignificant@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, __int16 a3@<W2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  int v6 = *(_DWORD *)(result + 8);
  *(_WORD *)(a6 + 21) = *(_WORD *)(result + 21);
  *(unsigned char *)(a6 + 23) = *(unsigned char *)(result + 23);
  *(_DWORD *)a6 = 4;
  *(_DWORD *)(a6 + 8) = v6;
  *(_WORD *)(a6 + 12) = a2;
  *(_WORD *)(a6 + 14) = a3;
  *(_DWORD *)(a6 + 16) = a4;
  *(unsigned char *)(a6 + 20) = a5;
  *(_DWORD *)(a6 + 24) = 0;
  return result;
}

uint64_t icu::number::FractionPrecision::withMinDigits@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)this == 10)
  {
    long long v3 = *(_OWORD *)(this + 16);
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_OWORD *)(a3 + 16) = v3;
  }
  else if ((a2 - 1) > 0x3E6)
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = 65810;
  }
  else
  {
    int v4 = *(_DWORD *)(this + 8);
    *(_WORD *)(a3 + 21) = *(_WORD *)(this + 21);
    *(unsigned char *)(a3 + 23) = *(unsigned char *)(this + 23);
    *(_DWORD *)a3 = 4;
    *(_DWORD *)(a3 + 8) = v4;
    *(_WORD *)(a3 + 12) = 1;
    *(_WORD *)(a3 + 14) = a2;
    *(_DWORD *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 20) = 1;
    *(_DWORD *)(a3 + 24) = 0;
  }
  return this;
}

uint64_t icu::number::FractionPrecision::withMaxDigits@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)this == 10)
  {
    long long v3 = *(_OWORD *)(this + 16);
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_OWORD *)(a3 + 16) = v3;
  }
  else if ((a2 - 1) > 0x3E6)
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = 65810;
  }
  else
  {
    int v4 = *(_DWORD *)(this + 8);
    *(_WORD *)(a3 + 21) = *(_WORD *)(this + 21);
    *(unsigned char *)(a3 + 23) = *(unsigned char *)(this + 23);
    *(_DWORD *)a3 = 4;
    *(_DWORD *)(a3 + 8) = v4;
    *(_WORD *)(a3 + 12) = 1;
    *(_WORD *)(a3 + 14) = a2;
    *(_DWORD *)(a3 + 16) = 1;
    *(unsigned char *)(a3 + 20) = 1;
    *(_DWORD *)(a3 + 24) = 0;
  }
  return this;
}

void icu::number::Precision::withCurrency(icu::number::Precision *this@<X0>, const UChar *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(_DWORD *)this == 10)
  {
    long long v6 = *((_OWORD *)this + 1);
    *(_OWORD *)a4 = *(_OWORD *)this;
    *(_OWORD *)(a4 + 16) = v6;
  }
  else
  {
    int v8 = a2 + 10;
    ucurr_getRoundingIncrementForUsage(a2 + 10, *((_DWORD *)this + 2), (int *)a3);
    double v10 = v9;
    unsigned int DefaultFractionDigitsForUsage = ucurr_getDefaultFractionDigitsForUsage(v8, *((_DWORD *)this + 2), (int *)a3);
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    if (v10 == 0.0)
    {
      BOOL v12 = DefaultFractionDigitsForUsage >= 0x3E8;
      if (DefaultFractionDigitsForUsage >= 0x3E8) {
        int v13 = 10;
      }
      else {
        int v13 = 2;
      }
      *(_DWORD *)a4 = v13;
      int v14 = (unsigned __int16)DefaultFractionDigitsForUsage | ((unsigned __int16)DefaultFractionDigitsForUsage << 16);
      if (v12) {
        int v15 = 65810;
      }
      else {
        int v15 = v14;
      }
      *(_DWORD *)(a4 + 8) = v15;
      *(_DWORD *)(a4 + 12) = -1;
      *(void *)(a4 + 16) = 0;
    }
    else
    {
      icu::number::Precision::increment(v10, a4);
    }
    *(_DWORD *)(a4 + 24) = *((_DWORD *)this + 6);
  }
}

double icu::number::CurrencyPrecision::withCurrency@<D0>(icu::number::CurrencyPrecision *this@<X0>, const UChar *a2@<X1>, uint64_t a3@<X8>)
{
  UErrorCode v9 = U_ZERO_ERROR;
  long long v7 = 0u;
  long long v8 = 0u;
  icu::number::Precision::withCurrency(this, a2, &v9, (uint64_t)&v7);
  UErrorCode v5 = v9;
  if (v9 < U_ILLEGAL_ARGUMENT_ERROR)
  {
    double result = *(double *)&v7;
    long long v6 = v8;
    *(_OWORD *)a3 = v7;
    *(_OWORD *)(a3 + 16) = v6;
  }
  else
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = v5;
  }
  return result;
}

uint64_t icu::number::IncrementPrecision::withMinFraction@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)this == 10)
  {
    long long v3 = *(_OWORD *)(this + 16);
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_OWORD *)(a3 + 16) = v3;
  }
  else if (a2 > 0x3E7)
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = 65810;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_WORD *)(a3 + 16) = *(_WORD *)(this + 16);
    *(void *)(a3 + 20) = *(void *)(this + 20);
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(this + 28);
    *(_WORD *)(a3 + 18) = a2;
  }
  return this;
}

uint64_t icu::number::Precision::constructIncrementSignificant@<X0>(uint64_t this@<X0>, double a2@<D0>, __int16 a3@<W1>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 9;
  *(double *)(a4 + 8) = a2;
  *(_WORD *)(a4 + 16) = this;
  *(_WORD *)(a4 + 18) = a3;
  *(_DWORD *)(a4 + 20) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  return this;
}

uint64_t sub_18C97EF9C(uint64_t a1, icu::number::Precision *this, int a3, const UChar *a4, UErrorCode *a5)
{
  long long v6 = *((_OWORD *)this + 1);
  *(_OWORD *)a1 = *(_OWORD *)this;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 36) = 0;
  if (*(_DWORD *)this == 8)
  {
    icu::number::Precision::withCurrency(this, a4, a5, (uint64_t)v8);
    *(_OWORD *)a1 = v8[0];
    *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)v8 + 12);
  }
  return a1;
}

double sub_18C97F008@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 36) = 1;
  return result;
}

BOOL sub_18C97F020(_DWORD *a1)
{
  return *a1 == 3;
}

uint64_t sub_18C97F030(uint64_t a1, icu::number::impl::DecimalQuantity *this, uint64_t a3, int *a4)
{
  uint64_t Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(this);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, Magnitude);
  icu::number::impl::DecimalQuantity::adjustMagnitude(this, v9);
  sub_18C97F148(a1, this, a4);
  if (!icu::number::impl::DecimalQuantity::isZeroish(this)
    && *a4 <= 0
    && icu::number::impl::DecimalQuantity::getMagnitude(this) != v9 + Magnitude)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16))(a3, (Magnitude + 1));
    if (v10 != v9)
    {
      uint64_t v11 = v10;
      icu::number::impl::DecimalQuantity::adjustMagnitude(this, v10 - v9);
      sub_18C97F148(a1, this, a4);
      return v11;
    }
  }
  return v9;
}

void sub_18C97F148(uint64_t a1, icu::number::impl::DecimalQuantity *this, int *a3)
{
  if (*a3 <= 0 && !*(unsigned char *)(a1 + 36))
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
      case 0xA:
        int v6 = 0;
        *a3 = 5;
        break;
      case 1:
        icu::number::impl::DecimalQuantity::roundToInfinity(this);
        goto LABEL_27;
      case 2:
        int v7 = *(__int16 *)(a1 + 10);
        if (v7 == -1) {
          int v8 = 0x80000000;
        }
        else {
          int v8 = -v7;
        }
        icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v8, *(_DWORD *)(a1 + 32), a3);
        if (*(_WORD *)(a1 + 8)) {
          int v9 = *(__int16 *)(a1 + 8);
        }
        else {
          int v9 = -2147483647;
        }
        goto LABEL_51;
      case 3:
        int v10 = sub_18C97F514(this, *(__int16 *)(a1 + 14));
        icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v10, *(_DWORD *)(a1 + 32), a3);
        int v11 = sub_18C97F56C(this, *(__int16 *)(a1 + 12));
        int v6 = uprv_max(0, -v11);
        if (icu::number::impl::DecimalQuantity::isZeroish(this) && *(__int16 *)(a1 + 12) >= 1) {
          icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)this, 1);
        }
        break;
      case 4:
        int v12 = *(__int16 *)(a1 + 10);
        if (v12 == -1) {
          uint64_t v13 = 0x80000000;
        }
        else {
          uint64_t v13 = -v12;
        }
        int v14 = sub_18C97F514(this, *(__int16 *)(a1 + 14));
        if (*(_DWORD *)(a1 + 16)) {
          int v15 = uprv_max(v13, v14);
        }
        else {
          int v15 = uprv_min(v13, v14);
        }
        int v21 = v15;
        if (!icu::number::impl::DecimalQuantity::isZeroish(this))
        {
          int Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(this);
          icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v21, *(_DWORD *)(a1 + 32), a3);
          if (!icu::number::impl::DecimalQuantity::isZeroish(this)
            && icu::number::impl::DecimalQuantity::getMagnitude(this) != Magnitude
            && v13 == v14)
          {
            ++v14;
          }
        }
        if (*(_WORD *)(a1 + 8)) {
          uint64_t v24 = -*(__int16 *)(a1 + 8);
        }
        else {
          uint64_t v24 = 0x7FFFFFFFLL;
        }
        int v25 = sub_18C97F56C(this, *(__int16 *)(a1 + 12));
        if (*(unsigned char *)(a1 + 20))
        {
          int v26 = uprv_min(v24, v25);
        }
        else
        {
          if (v14 <= (int)v13) {
            int v27 = v24;
          }
          else {
            int v27 = v25;
          }
          if (v14 <= (int)v13) {
            int v28 = v25;
          }
          else {
            int v28 = v24;
          }
          if (*(_DWORD *)(a1 + 16)) {
            int v26 = v27;
          }
          else {
            int v26 = v28;
          }
        }
        int v9 = -v26;
LABEL_51:
        int v6 = uprv_max(0, v9);
        break;
      case 5:
        icu::number::impl::DecimalQuantity::roundToIncrement(this, *(void *)(a1 + 8), *(__int16 *)(a1 + 16), *(_DWORD *)(a1 + 32), (UErrorCode *)a3);
        goto LABEL_23;
      case 6:
        icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, *(__int16 *)(a1 + 16), *(_DWORD *)(a1 + 32), a3);
        goto LABEL_23;
      case 7:
        icu::number::impl::DecimalQuantity::roundToNickel((uint64_t)this, *(__int16 *)(a1 + 16), *(_DWORD *)(a1 + 32), a3);
LABEL_23:
        int v6 = *(__int16 *)(a1 + 18);
        break;
      case 9:
        uint64_t v30 = 0;
        memset(v29, 0, sizeof(v29));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v29);
        icu::number::impl::DecimalQuantity::setToDouble((void **)v29, *(double *)(a1 + 8));
        icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)v29);
        __int16 v16 = icu::number::impl::DecimalQuantity::adjustToZeroScale((icu::number::impl::DecimalQuantity *)v29);
        unint64_t v17 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v29, 0);
        icu::number::impl::DecimalQuantity::roundToIncrement(this, v17, v16, *(_DWORD *)(a1 + 32), (UErrorCode *)a3);
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v29);
        int v18 = sub_18C97F514(this, *(__int16 *)(a1 + 18));
        icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v18, *(_DWORD *)(a1 + 32), a3);
        int v19 = sub_18C97F56C(this, *(__int16 *)(a1 + 16));
        int v20 = uprv_max(0, -v19);
        icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)this, v20);
        int v6 = 0;
        if (icu::number::impl::DecimalQuantity::isZeroish(this))
        {
          if (*(__int16 *)(a1 + 16) >= 1) {
            icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)this, 1);
          }
LABEL_27:
          int v6 = 0;
        }
        break;
      default:
        abort();
    }
    if (!*(_DWORD *)(a1 + 24)
      || (*(double (**)(icu::number::impl::DecimalQuantity *, uint64_t))(*(void *)this + 16))(this, 3) != 0.0)
    {
      icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)this, v6);
    }
  }
}

uint64_t sub_18C97F514(icu::number::impl::DecimalQuantity *a1, int a2)
{
  if (a2 == -1) {
    return 0x80000000;
  }
  if (icu::number::impl::DecimalQuantity::isZeroish(a1)) {
    int Magnitude = 0;
  }
  else {
    int Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(a1);
  }
  return (Magnitude - a2 + 1);
}

uint64_t sub_18C97F56C(icu::number::impl::DecimalQuantity *a1, int a2)
{
  if (icu::number::impl::DecimalQuantity::isZeroish(a1)) {
    int Magnitude = 0;
  }
  else {
    int Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(a1);
  }
  return (Magnitude - a2 + 1);
}

uint64_t sub_18C97F5B0(uint64_t a1, icu::number::impl::DecimalQuantity *this, int a3)
{
  return icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)this, *(__int16 *)(a1 + 12) - a3);
}

uint64_t icu::number::impl::ScientificModifier::ScientificModifier(uint64_t this)
{
  *(void *)this = &unk_1EDA4FC98;
  *(_DWORD *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDA4FC98;
  *(_DWORD *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t icu::number::impl::ScientificModifier::set(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t icu::number::impl::ScientificModifier::apply(icu::number::impl::ScientificModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v32, (UChar **)(*(void *)(*((void *)this + 2) + 24) + 712));
  int v9 = icu::FormattedStringBuilder::insert(a2, a4, (uint64_t)v32, 35, 0, a5) + a4;
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v32);
  uint64_t v11 = *((void *)this + 2);
  int v12 = *(_DWORD *)(v11 + 20);
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
  {
    if (v12 == 2) {
      goto LABEL_7;
    }
    uint64_t v13 = (UChar **)(*(void *)(v11 + 24) + 392);
  }
  else
  {
    if (v12 != 1) {
      goto LABEL_7;
    }
    uint64_t v13 = (UChar **)(*(void *)(v11 + 24) + 456);
  }
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v32, v13);
  v9 += icu::FormattedStringBuilder::insert(a2, v9, (uint64_t)v32, 36, 0, a5);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v32);
LABEL_7:
  int v15 = *((_DWORD *)this + 2);
  uint64_t v16 = *((void *)this + 2);
  if (*(__int16 *)(v16 + 18) > 0 || v15 != 0)
  {
    int v18 = 0;
    if (v15 >= 0) {
      unsigned int v19 = *((_DWORD *)this + 2);
    }
    else {
      unsigned int v19 = -v15;
    }
    int v20 = 1;
    do
    {
      unsigned int v21 = v19 % 0xA;
      int v22 = v9 + v18;
      uint64_t v23 = *(void *)(v16 + 24);
      int v24 = *(_DWORD *)(v23 + 1928);
      if (v24 == -1)
      {
        uint64_t v26 = v23 + ((unint64_t)(v21 + 17) << 6);
        uint64_t v27 = v23 + 264;
        uint64_t v28 = v26 + 8;
        if (v21) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = v27;
        }
        int inserted = icu::FormattedStringBuilder::insert(a2, v22, v29, 37, 0, a5);
      }
      else
      {
        int inserted = icu::FormattedStringBuilder::insertCodePoint(a2, v22, v24 + v21, 37, a5);
      }
      v9 += inserted;
      uint64_t v16 = *((void *)this + 2);
      --v18;
      BOOL v30 = v20++ < *(__int16 *)(v16 + 18);
      BOOL v30 = v30 || v19 > 9;
      v19 /= 0xAu;
    }
    while (v30);
  }
  return (v9 - a4);
}

uint64_t icu::number::impl::ScientificModifier::getPrefixLength(icu::number::impl::ScientificModifier *this)
{
  return 0;
}

uint64_t icu::number::impl::ScientificModifier::getCodePointCount(icu::number::impl::ScientificModifier *this)
{
  return 999;
}

uint64_t icu::number::impl::ScientificModifier::isStrong(icu::number::impl::ScientificModifier *this)
{
  return 1;
}

void icu::number::impl::ScientificModifier::containsField()
{
}

void icu::number::impl::ScientificModifier::getParameters(icu::number::impl::ScientificModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
  *(void *)a2 = 0;
}

_DWORD *icu::number::impl::ScientificModifier::semanticallyEquivalent(icu::number::impl::ScientificModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  if (result) {
    return (_DWORD *)(*((_DWORD *)this + 2) == result[2]);
  }
  return result;
}

void *sub_18C97F8B4(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *double result = &unk_1EDA4FD28;
  result[1] = &unk_1EDA4FD58;
  result[2] = *(void *)(a2 + 4);
  result[3] = a3;
  result[4] = a4;
  return result;
}

double sub_18C97F900(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  (*(void (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  if (*a4 <= 0)
  {
    if (((*(uint64_t (**)(icu::number::impl::DecimalQuantity *))(*(void *)a2 + 32))(a2) & 1) != 0
      || (*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(void *)a2 + 24))(a2))
    {
      *(void *)(a3 + 208) = a3 + 256;
    }
    else
    {
      if (icu::number::impl::DecimalQuantity::isZeroish(a2))
      {
        if (*(unsigned char *)(a1 + 17) && sub_18C97F020((_DWORD *)(a3 + 104))) {
          sub_18C97F5B0(a3 + 104, a2, *(char *)(a1 + 16));
        }
        else {
          sub_18C97F148(a3 + 104, a2, a4);
        }
        int v9 = 0;
      }
      else
      {
        int v9 = -(int)sub_18C97F030(a3 + 104, a2, a1 + 8, a4);
      }
      *(_DWORD *)(a3 + 224) = v9;
      *(void *)(a3 + 232) = a1;
      *(void *)(a3 + 208) = a3 + 216;
      icu::number::impl::DecimalQuantity::adjustExponent((uint64_t)a2, v9);
      sub_18C97F008((uint64_t)&v11);
      double result = *(double *)&v11;
      long long v10 = *(_OWORD *)v12;
      *(_OWORD *)(a3 + 104) = v11;
      *(_OWORD *)(a3 + 120) = v10;
      *(void *)(a3 + 133) = *(void *)&v12[13];
    }
  }
  return result;
}

uint64_t sub_18C97FA80(uint64_t a1, int a2)
{
  int v2 = *(char *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 17))
  {
    if (v2 >= 2) {
      int v2 = (__int16)(a2 % *(char *)(a1 + 16) + *(char *)(a1 + 16)) % (int)*(unsigned __int8 *)(a1 + 16) + 1;
    }
    else {
      int v2 = 1;
    }
  }
  return (v2 + ~a2);
}

uint64_t sub_18C97FAC8(uint64_t a1, int a2)
{
  int v2 = *(char *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 9))
  {
    if (v2 >= 2) {
      int v2 = (__int16)(a2 % *(char *)(a1 + 8) + *(char *)(a1 + 8)) % (int)*(unsigned __int8 *)(a1 + 8) + 1;
    }
    else {
      int v2 = 1;
    }
  }
  return (v2 + ~a2);
}

void sub_18C97FB14(icu::number::impl::Modifier *a1)
{
  icu::number::impl::Modifier::~Modifier(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C97FB3C(uint64_t a1)
{
  return a1;
}

void sub_18C97FB68(char *a1)
{
  nullsub_17(a1 + 8);

  icu::UMemory::operator delete(a1);
}

void sub_18C97FBA8(uint64_t a1)
{
  int v1 = (void *)(a1 - 8);
  nullsub_17(a1);

  icu::UMemory::operator delete(v1);
}

void **icu::number::SimpleNumber::forInt64@<X0>(void **this@<X0>, int *a2@<X1>, void ***a3@<X8>)
{
  UErrorCode v5 = (uint64_t *)*a2;
  if ((int)v5 >= 1) {
    goto LABEL_2;
  }
  unint64_t v8 = (unint64_t)this;
  this = (void **)icu::UMemory::operator new(v5, (icu::UMemory *)0x198, (unint64_t)a2);
  if (!this)
  {
    *a2 = 7;
LABEL_2:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_3;
  }
  int v9 = this;
  long long v10 = (void **)(sub_18C9140A8((uint64_t)this) + 304);
  this = icu::number::impl::DecimalQuantity::setToLong(v10, v8);
  *a3 = v9;
  *((_DWORD *)a3 + 2) = 1;
  if (*a2 <= 0)
  {
    this = (void **)icu::number::impl::DecimalQuantity::isNegative((icu::number::impl::DecimalQuantity *)v10);
    if (this)
    {
      int v6 = 2;
      goto LABEL_4;
    }
LABEL_3:
    int v6 = 1;
LABEL_4:
    *((_DWORD *)a3 + 2) = v6;
  }
  return this;
}

uint64_t icu::number::SimpleNumber::SimpleNumber(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 1;
  if (*a3 <= 0)
  {
    if (a2)
    {
      if (icu::number::impl::DecimalQuantity::isNegative((icu::number::impl::DecimalQuantity *)(a2 + 304))) {
        int v4 = 2;
      }
      else {
        int v4 = 1;
      }
      *(_DWORD *)(a1 + 8) = v4;
    }
    else
    {
      *a3 = 1;
    }
  }
  return a1;
}

{
  int v4;

  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 1;
  if (*a3 <= 0)
  {
    if (a2)
    {
      if (icu::number::impl::DecimalQuantity::isNegative((icu::number::impl::DecimalQuantity *)(a2 + 304))) {
        int v4 = 2;
      }
      else {
        int v4 = 1;
      }
      *(_DWORD *)(a1 + 8) = v4;
    }
    else
    {
      *a3 = 1;
    }
  }
  return a1;
}

uint64_t icu::number::SimpleNumber::cleanup(icu::number::SimpleNumber *this)
{
  uint64_t result = *(void *)this;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)this = 0;
  return result;
}

BOOL icu::number::SimpleNumber::multiplyByPowerOfTen(BOOL this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*(void *)this) {
      return icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)(*(void *)this + 304), a2);
    }
    else {
      *a3 = U_INVALID_STATE_ERROR;
    }
  }
  return this;
}

void icu::number::SimpleNumber::roundTo(void *a1, int a2, unsigned int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (*a1) {
      icu::number::impl::DecimalQuantity::roundToMagnitude(*a1 + 304, a2, a3, a4);
    }
    else {
      *a4 = 27;
    }
  }
}

void *icu::number::SimpleNumber::setMinimumIntegerDigits(void *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*this) {
      return (void *)icu::number::impl::DecimalQuantity::setMinInteger(*this + 304, a2);
    }
    else {
      *a3 = U_INVALID_STATE_ERROR;
    }
  }
  return this;
}

void *icu::number::SimpleNumber::setMinimumFractionDigits(void *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*this) {
      return (void *)icu::number::impl::DecimalQuantity::setMinFraction(*this + 304, a2);
    }
    else {
      *a3 = U_INVALID_STATE_ERROR;
    }
  }
  return this;
}

void icu::number::SimpleNumber::truncateStart(icu::number::SimpleNumber *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*(void *)this) {
      icu::number::impl::DecimalQuantity::applyMaxInteger((icu::number::impl::DecimalQuantity *)(*(void *)this + 304), a2);
    }
    else {
      *a3 = U_INVALID_STATE_ERROR;
    }
  }
}

uint64_t icu::number::SimpleNumber::setSign(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (*(void *)result) {
      *(_DWORD *)(result + 8) = a2;
    }
    else {
      *a3 = 27;
    }
  }
  return result;
}

uint64_t icu::number::SimpleNumberFormatter::cleanup@<X0>(icu::number::SimpleNumberFormatter *this@<X0>, void *a2@<X8>)
{
  int v4 = (void *)((char *)this + 8);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(v5 + 24));
    icu::UMemory::operator delete((void *)v5);
  }
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *int v4 = 0;
  v4[1] = 0;
  void v4[2] = 0;
  return result;
}

void icu::number::SimpleNumberFormatter::forLocale(icu::number::SimpleNumberFormatter *this@<X0>, UErrorCode *a2@<X1>, void *a3@<X8>)
{
}

void icu::number::SimpleNumberFormatter::forLocaleAndGroupingStrategy(const icu::Locale *a1@<X0>, unint64_t a2@<X1>, UErrorCode *a3@<X2>, void *a4@<X8>)
{
  signed int v5 = a2;
  *a4 = 0;
  a4[1] = 0;
  unint64_t v8 = a4 + 1;
  *(_DWORD *)a4 = 2;
  a4[2] = 0;
  a4[3] = 0;
  int v9 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0xB48, a2);
  if (v9)
  {
    uint64_t v10 = (uint64_t)v9;
    *unint64_t v8 = icu::DecimalFormatSymbols::DecimalFormatSymbols(v9, a1, a3);
    if (*(int *)a3 < 1)
    {
      icu::number::SimpleNumberFormatter::initialize((uint64_t)a4, a1, v10, v5, (int *)a3);
    }
  }
  else
  {
    *unint64_t v8 = 0;
    if (*(int *)a3 <= 0) {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
}

void icu::number::SimpleNumberFormatter::initialize(uint64_t a1, const icu::Locale *a2, uint64_t a3, signed int a4, int *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  signed int v5 = (uint64_t *)*a5;
  if ((int)v5 <= 0)
  {
    long long v11 = icu::UMemory::operator new(v5, (icu::UMemory *)0x60, (unint64_t)a2);
    if (v11)
    {
      int v12 = v11;
      *(_OWORD *)long long v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_WORD *)v11 + 2) = -3;
      *((_DWORD *)v11 + 5) = 0;
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      v11[10] = 0;
      v11[3] = (uint64_t)&unk_1EDA47700;
      *((_WORD *)v11 + 16) = 2;
      icu::UnicodeString::setToBogus((icu::UnicodeString *)(v11 + 3));
      *(void *)(a1 + 16) = v12;
      v12[11] = a3;
      uint64_t v13 = sub_18C9867BC((uint64_t)a2, (const char *)(a3 + 2874), 0, a5);
      if (*a5 <= 0)
      {
        uint64_t v14 = (uint64_t)v13;
        uint64_t v31 = 0;
        memset(v30, 0, sizeof(v30));
        sub_18C962AE4((uint64_t)v30);
        icu::UnicodeString::UnicodeString((uint64_t)v28, v14);
        icu::number::impl::PatternParser::parseToPatternInfo((UChar **)v28, (const icu::UnicodeString *)v30, (UErrorCode *)a5, v15);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v28);
        if (*a5 <= 0)
        {
          uint64_t v26 = icu::number::impl::Grouper::forStrategy(a4);
          int v27 = v17;
          icu::number::impl::Grouper::setLocaleData((icu::number::impl::Grouper *)&v26, (const icu::number::impl::ParsedPatternInfo *)v30, a2);
          uint64_t v18 = *(void *)(a1 + 16);
          int v19 = v27;
          *(void *)(v18 + 4) = v26;
          *(_DWORD *)(v18 + 12) = v19;
          uint64_t v29 = 0;
          memset(v28, 0, sizeof(v28));
          icu::number::impl::MutablePatternModifier::MutablePatternModifier((icu::number::impl::MutablePatternModifier *)v28, 0);
          icu::number::impl::MutablePatternModifier::setPatternInfo((uint64_t)v28, (uint64_t)v30, 0);
          icu::number::impl::MutablePatternModifier::setPatternAttributes((uint64_t)v28, 5, 0, 0);
          uint64_t v20 = *(void *)(*(void *)(a1 + 16) + 88);
          icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v25);
          icu::number::impl::MutablePatternModifier::setSymbols((uint64_t)v28, v20, v25, 1, 0, (UErrorCode *)a5);
          icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v25);
          int v24 = icu::UMemory::operator new(v22, (icu::UMemory *)0x28, v21);
          if (v24) {
            icu::number::impl::MutablePatternModifier::createImmutableForPlural((icu::number::impl::MutablePatternModifier *)v28, 8, (UErrorCode *)a5, (uint64_t)v24);
          }
          *(void *)(a1 + 24) = v24;
          *(_DWORD *)a1 = a4;
          sub_18C97B268((uint64_t)v28, v23);
        }
        sub_18C962BDC((void **)v30);
      }
    }
    else
    {
      *(void *)(a1 + 16) = 0;
      *a5 = 7;
    }
  }
}

void icu::number::SimpleNumberFormatter::forLocaleAndSymbolsAndGroupingStrategy(const icu::Locale *a1@<X0>, uint64_t a2@<X1>, signed int a3@<W2>, int *a4@<X3>, void *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  *(_DWORD *)a5 = 2;
  a5[2] = 0;
  a5[3] = 0;
  icu::number::SimpleNumberFormatter::initialize((uint64_t)a5, a1, a2, a3, a4);
}

uint64_t icu::number::SimpleNumberFormatter::format@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = icu::number::SimpleNumberFormatter::formatImpl(a1, *(void *)a2, *(_DWORD *)(a2 + 8), a3);
  UErrorCode v8 = *a3;
  if (*(int *)a3 <= 0)
  {
    UErrorCode v8 = U_ZERO_ERROR;
    uint64_t v9 = *(void *)a2;
    *(void *)a2 = 0;
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(void *)a4 = &unk_1EDA4F7C0;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

uint64_t icu::number::SimpleNumberFormatter::formatImpl(uint64_t result, uint64_t a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0) {
    return result;
  }
  if (!a2)
  {
    int v10 = 1;
LABEL_14:
    *a4 = v10;
    return result;
  }
  uint64_t v5 = *(void *)(result + 24);
  if (!v5 || (uint64_t result = *(void *)(result + 16)) == 0)
  {
    int v10 = 27;
    goto LABEL_14;
  }
  uint64_t v6 = 2;
  if (!a3) {
    uint64_t v6 = 3;
  }
  if (a3 == 2) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(v5 + 8 * v6 + 8);
  UErrorCode v8 = (icu::FormattedStringBuilder *)(a2 + 8);
  uint64_t v9 = sub_18C96CE00(result, (icu::number::impl::DecimalQuantity *)(a2 + 304), (icu::FormattedStringBuilder *)(a2 + 8), 0, a4);
  (*(void (**)(uint64_t, icu::FormattedStringBuilder *, void, uint64_t, UErrorCode *))(*(void *)v7 + 16))(v7, v8, 0, v9, a4);

  return icu::FormattedStringBuilder::writeTerminator(v8, a4);
}

uint64_t sub_18C980474(icu::number::Notation *a1)
{
  switch((int)a1)
  {
    case 0:
      uint64_t result = icu::number::Notation::compactShort(a1);
      break;
    case 1:
      uint64_t result = icu::number::Notation::compactLong(a1);
      break;
    case 2:
      uint64_t result = icu::number::Notation::scientific(a1);
      break;
    case 3:
      uint64_t result = icu::number::Notation::engineering(a1);
      break;
    case 4:
      uint64_t result = icu::number::Notation::simple(a1);
      break;
    default:
      abort();
  }
  return result;
}

void sub_18C9804F4(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 7:
      icu::MeasureUnit::getPermille(a2);
      break;
    case 6:
      icu::MeasureUnit::getPercent(a2);
      break;
    case 5:
      icu::MeasureUnit::MeasureUnit(a2);
      break;
    default:
      abort();
  }
}

void sub_18C980550(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 9:
      icu::number::Precision::integer(a2);
      return;
    case 10:
      icu::number::Precision::unlimited(a2);
      return;
    case 11:
      uint64_t v3 = 0;
      goto LABEL_7;
    case 12:
      uint64_t v3 = 1;
LABEL_7:
      icu::number::Precision::currency(v3, a2);
      return;
    default:
      abort();
  }
}

uint64_t sub_18C9805E4(int a1)
{
  if ((a1 - 13) >= 0xB) {
    abort();
  }
  return dword_18CA952A4[a1 - 13];
}

uint64_t sub_18C980614(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-ceiling", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-floor", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-down", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-half-even", 0, 0xFFFFFFFFLL);
      break;
    case 5:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 6:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 7:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 8:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-half-odd", 0, 0xFFFFFFFFLL);
      break;
    case 9:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 10:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-half-floor", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }
  return result;
}

uint64_t sub_18C980848(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"g", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"g", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"group-auto", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"g", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"group-thousands", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }
  return result;
}

uint64_t sub_18C980974(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-narrow", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-short", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"u", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-iso-code", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-formal", 0, 0xFFFFFFFFLL);
      break;
    case 5:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-variant", 0, 0xFFFFFFFFLL);
      break;
    case 6:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"u", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }
  return result;
}

uint64_t sub_18C980AF8(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting-always", 0, 0xFFFFFFFFLL);
      break;
    case 5:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 6:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting-except-zero", 0, 0xFFFFFFFFLL);
      break;
    case 7:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-negative", 0, 0xFFFFFFFFLL);
      break;
    case 8:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting-negative", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }
  return result;
}

uint64_t sub_18C980CD4(int a1, uint64_t a2)
{
  if (a1 == 1) {
    return icu::UnicodeString::doAppend(a2, (uint64_t)L"decimal-always", 0, 0xFFFFFFFFLL);
  }
  if (a1) {
    abort();
  }
  return icu::UnicodeString::doAppend(a2, (uint64_t)"d", 0, 0xFFFFFFFFLL);
}

void icu::number::NumberFormatter::forSkeleton(UChar **this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, _OWORD *a4@<X8>)
{
  v22[33] = *(void **)MEMORY[0x1E4F143B8];
  if (a2)
  {
    *(void *)a2 = 0xFFFFFFFF00000000;
    *((_WORD *)a2 + 4) = 0;
    *((_WORD *)a2 + 20) = 0;
  }
  if (*(int *)a3 > 0) {
    goto LABEL_10;
  }
  if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192508, memory_order_acquire) == 2
    || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192508))
  {
    if (dword_1E919250C >= 1)
    {
      *a3 = dword_1E919250C;
LABEL_10:
      a4[28] = 0u;
      a4[29] = 0u;
      a4[26] = 0u;
      a4[27] = 0u;
      a4[24] = 0u;
      a4[25] = 0u;
      a4[22] = 0u;
      a4[23] = 0u;
      a4[20] = 0u;
      a4[21] = 0u;
      a4[18] = 0u;
      a4[19] = 0u;
      a4[16] = 0u;
      a4[17] = 0u;
      a4[14] = 0u;
      a4[15] = 0u;
      a4[12] = 0u;
      a4[13] = 0u;
      a4[10] = 0u;
      a4[11] = 0u;
      a4[8] = 0u;
      a4[9] = 0u;
      a4[6] = 0u;
      a4[7] = 0u;
      a4[4] = 0u;
      a4[5] = 0u;
      a4[2] = 0u;
      a4[3] = 0u;
      *a4 = 0u;
      a4[1] = 0u;
      sub_18C913B28((uint64_t)a4);
      return;
    }
  }
  else
  {
    sub_18C98110C(a3);
    dword_1E919250C = *a3;
    icu::umtx_initImplPostInit(&dword_1E9192508);
  }
  if (*(int *)a3 >= 1) {
    goto LABEL_10;
  }
  int v17 = 0;
  memset(v22, 0, 264);
  long long v21 = 0u;
  memset(v20, 0, sizeof(v20));
  long long v19 = 0u;
  sub_18C981EF4(this, &v17, a3, (uint64_t)&v19);
  if (*(int *)a3 <= 0)
  {
    icu::number::NumberFormatter::with(v18);
    icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::macros();
  }
  if (a2)
  {
    int v9 = v17;
    *((_DWORD *)a2 + 1) = v17;
    int v10 = uprv_max(0, v9 - 15);
    unsigned int v11 = *((unsigned __int16 *)this + 4);
    int v12 = (__int16)v11;
    unsigned int v13 = v11 >> 5;
    if (v12 >= 0) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = *((unsigned int *)this + 3);
    }
    int v15 = uprv_min(v14, v9 + 15);
    icu::UnicodeString::doExtract((char *)this, v10, v9 - v10, (uint64_t)a2 + 8, 0);
    *((_WORD *)a2 + v9 - v10 + 4) = 0;
    uint64_t v16 = (char *)a2 + 40;
    icu::UnicodeString::doExtract((char *)this, v9, v15 - v9, (uint64_t)v16, 0);
    *(_WORD *)&v16[2 * (v15 - v9)] = 0;
    *a4 = 0u;
    a4[1] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    a4[4] = 0u;
    a4[5] = 0u;
    a4[6] = 0u;
    a4[7] = 0u;
    a4[8] = 0u;
    a4[9] = 0u;
    a4[10] = 0u;
    a4[11] = 0u;
    a4[12] = 0u;
    a4[13] = 0u;
    a4[14] = 0u;
    a4[15] = 0u;
    a4[16] = 0u;
    a4[17] = 0u;
    a4[18] = 0u;
    a4[19] = 0u;
    a4[20] = 0u;
    a4[21] = 0u;
    a4[22] = 0u;
    a4[23] = 0u;
    a4[24] = 0u;
    a4[25] = 0u;
    a4[26] = 0u;
    a4[27] = 0u;
    a4[28] = 0u;
    a4[29] = 0u;
  }
  else
  {
    a4[28] = 0u;
    a4[29] = 0u;
    a4[26] = 0u;
    a4[27] = 0u;
    a4[24] = 0u;
    a4[25] = 0u;
    a4[22] = 0u;
    a4[23] = 0u;
    a4[20] = 0u;
    a4[21] = 0u;
    a4[18] = 0u;
    a4[19] = 0u;
    a4[16] = 0u;
    a4[17] = 0u;
    a4[14] = 0u;
    a4[15] = 0u;
    a4[12] = 0u;
    a4[13] = 0u;
    a4[10] = 0u;
    a4[11] = 0u;
    a4[8] = 0u;
    a4[9] = 0u;
    a4[6] = 0u;
    a4[7] = 0u;
    a4[4] = 0u;
    a4[5] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    *a4 = 0u;
    a4[1] = 0u;
  }
  sub_18C913B28((uint64_t)a4);
  icu::Locale::~Locale((icu::Locale *)&v22[5]);
  icu::number::impl::StringProp::~StringProp(v22);
  icu::number::impl::StringProp::~StringProp((void **)&v21);
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v20[9] + 8));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)((char *)&v20[7] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)((char *)&v20[1] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v20);
}

void sub_18C98110C(UErrorCode *a1)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  sub_18CA0A25C(1u, (uint64_t)sub_18C985734);
  memset(v84, 0, sizeof(v84));
  icu::UCharsTrieBuilder::UCharsTrieBuilder((icu::UCharsTrieBuilder *)v84, a1);
  if (*(int *)a1 <= 0)
  {
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"compact-short");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0, a1);
    icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"c");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 1u, a1);
    icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"scientific");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 2u, a1);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"engineering");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 3u, a1);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"n");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 4u, a1);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"b");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 5u, a1);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 6u, a1);
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 7u, a1);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 9u, a1);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xAu, a1);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"precision-currency-standard");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xBu, a1);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"precision-currency-cash");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xCu, a1);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-ceiling");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xDu, a1);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-floor");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xEu, a1);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-down");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xFu, a1);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x10u, a1);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-half-even");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x11u, a1);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-half-odd");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x12u, a1);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x13u, a1);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-half-floor");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x14u, a1);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x15u, a1);
    icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x16u, a1);
    icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x17u, a1);
    icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"i");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x18u, a1);
    icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"g");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x19u, a1);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"g");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Au, a1);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"group-auto");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Bu, a1);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"g");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Cu, a1);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"group-thousands");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Du, a1);
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"latin");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Eu, a1);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-narrow");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Fu, a1);
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-short");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x20u, a1);
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"u");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x21u, a1);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-iso-code");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x22u, a1);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-formal");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x23u, a1);
    icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-variant");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x24u, a1);
    icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"u");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x25u, a1);
    icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x26u, a1);
    icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x27u, a1);
    icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x28u, a1);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x29u, a1);
    icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting-always");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Au, a1);
    icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Bu, a1);
    icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting-except-zero");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Cu, a1);
    icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-negative");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Du, a1);
    icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting-negative");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Eu, a1);
    icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"d");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Fu, a1);
    icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"decimal-always");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x30u, a1);
    icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v79);
    if (*(int *)a1 <= 0)
    {
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x31u, a1);
      icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"m");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x32u, a1);
      icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"per-measure-unit");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x33u, a1);
      icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"u");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x34u, a1);
      icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"usage");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x35u, a1);
      icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"currency");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x36u, a1);
      icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"integer-width");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x37u, a1);
      icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"numbering-system");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x38u, a1);
      icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x39u, a1);
      icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)&v79);
      if (*(int *)a1 <= 0)
      {
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"K");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0, a1);
        icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"K");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 1u, a1);
        icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"%");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 6u, a1);
        icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"%x100");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 8u, a1);
        icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L",_");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x19u, a1);
        icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)",");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Au, a1);
        icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L",!");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Cu, a1);
        icu::UnicodeString::~UnicodeString(v65, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"+");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x27u, a1);
        icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"+_");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x28u, a1);
        icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"(");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x29u, a1);
        icu::UnicodeString::~UnicodeString(v68, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"()!");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Au, a1);
        icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"+?");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Bu, a1);
        icu::UnicodeString::~UnicodeString(v70, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"(");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Cu, a1);
        icu::UnicodeString::~UnicodeString(v71, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"+");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Du, a1);
        icu::UnicodeString::~UnicodeString(v72, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"()-");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Eu, a1);
        icu::UnicodeString::~UnicodeString(v73, (icu::UnicodeString *)&v79);
        if (*(int *)a1 <= 0)
        {
          long long v80 = 0u;
          uint64_t v83 = 0;
          long long v82 = 0u;
          long long v81 = 0u;
          int v79 = &unk_1EDA47700;
          LOWORD(v80) = 2;
          icu::UCharsTrieBuilder::buildUnicodeString((uint64_t)v84, 0, (icu::UnicodeString *)&v79, a1);
          int v74 = (void *)*(unsigned int *)a1;
          if ((int)v74 <= 0)
          {
            int v75 = (unsigned __int16)v80 >> 5;
            if ((v80 & 0x8000u) != 0) {
              int v75 = DWORD1(v80);
            }
            size_t v76 = 2 * v75;
            long long v77 = uprv_malloc(v76);
            qword_1E9192500 = (uint64_t)v77;
            if ((v80 & 0x11) != 0)
            {
              long long v78 = 0;
            }
            else if ((v80 & 2) != 0)
            {
              long long v78 = (char *)&v80 + 2;
            }
            else
            {
              long long v78 = (char *)v81;
            }
            memcpy(v77, v78, v76);
          }
          icu::UnicodeString::~UnicodeString(v74, (icu::UnicodeString *)&v79);
        }
      }
    }
  }
  icu::UCharsTrieBuilder::~UCharsTrieBuilder((icu::UCharsTrieBuilder *)v84);
}

void *sub_18C981EF4@<X0>(UChar **a1@<X0>, _DWORD *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  memset(v25, 0, sizeof(v25));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v25, a1);
  LOWORD(v19) = 32;
  icu::UnicodeString::doAppend((uint64_t)v25, (uint64_t)&v19, 0, 1);
  *(void *)((char *)v24 + 6) = 0;
  v24[0] = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 2icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 304) = 0u;
  *(_OWORD *)(a4 + 320) = 0u;
  *(_OWORD *)(a4 + 336) = 0u;
  *(_OWORD *)(a4 + 352) = 0u;
  *(_OWORD *)(a4 + 368) = 0u;
  *(_OWORD *)(a4 + 384) = 0u;
  *(_OWORD *)(a4 + 400) = 0u;
  *(_OWORD *)(a4 + 416) = 0u;
  *(_OWORD *)(a4 + 432) = 0u;
  *(_OWORD *)(a4 + 448) = 0u;
  *(void *)(a4 + 464) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 4) = 2;
  icu::MeasureUnit::MeasureUnit(a4 + 16);
  icu::MeasureUnit::MeasureUnit(a4 + 40);
  *(_DWORD *)(a4 + 64) = 0;
  *(_DWORD *)(a4 + 88) = 0;
  *(_DWORD *)(a4 + 96) = 4;
  *(_WORD *)(a4 + 100) = -3;
  *(_DWORD *)(a4 + 112) = -2;
  *(unsigned char *)(a4 + 132) = 0;
  *(_WORD *)(a4 + 124) = -1;
  *(_DWORD *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0;
  *(void *)(a4 + 152) = 0x900000007;
  *(unsigned char *)(a4 + 160) = 0;
  *(void *)(a4 + 164) = 2;
  *(void *)(a4 + 176) = 0;
  *(_DWORD *)(a4 + 184) = 0;
  *(void *)(a4 + 192) = 0;
  *(_WORD *)(a4 + 200) = 0;
  *(_DWORD *)(a4 + 204) = 0;
  *(void *)(a4 + 208) = 0;
  *(_WORD *)(a4 + 216) = 0;
  *(void *)(a4 + 228) = 0;
  *(void *)(a4 + 220) = 0;
  *(void *)(a4 + 236) = 0x300000000;
  *(_WORD *)(a4 + 244) = 0;
  icu::Locale::Locale((icu::Locale *)(a4 + 248));
  memset(v23, 0, sizeof(v23));
  icu::StringSegment::StringSegment((uint64_t)v23, (const icu::UnicodeString *)v25, 0);
  long long v19 = 0;
  uint64_t v20 = qword_1E9192500;
  uint64_t v21 = qword_1E9192500;
  uint64_t v22 = 0xFFFFFFFFLL;
  uint64_t v18 = qword_1E9192500;
  if ((int)icu::StringSegment::length(&v18, (icu::StringSegment *)v23) < 1) {
    goto LABEL_34;
  }
  int v7 = 0;
  int v8 = 0;
  while (1)
  {
    int v9 = icu::StringSegment::codePointAt(v23, v7);
    unsigned int v10 = v9;
    BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v9);
    if (v10 != 47 && !isWhiteSpace)
    {
      if (v10 < 0x10000) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = 2;
      }
      v7 += v14;
      if (!v8) {
        icu::UCharsTrie::nextForCodePoint((icu::UCharsTrie *)&v19, v10);
      }
      goto LABEL_30;
    }
    BOOL v13 = isWhiteSpace;
    if (v7)
    {
      icu::StringSegment::setLength((uint64_t)v23, v7);
      if (v8)
      {
        int v8 = sub_18C982C98(v8, (icu::StringSegment *)v23, a4, a3);
      }
      else
      {
        int v8 = sub_18C98268C((icu::StringSegment *)v23, (icu::UCharsTrie *)&v19, v24, a4, (char *)a3);
        uint64_t v21 = v20;
        LODWORD(v22) = -1;
      }
      icu::StringSegment::resetLength(v23);
      if (*(int *)a3 > 0) {
        goto LABEL_33;
      }
      icu::StringSegment::adjustOffset((uint64_t)v23, v7);
    }
    else if (v8)
    {
      break;
    }
    if (v10 == 47 && !v8) {
      break;
    }
    if (v13 && v8)
    {
      if ((v8 - 4) < 9) {
        break;
      }
      int v8 = 0;
    }
    if (v10 < 0x10000) {
      int v15 = 1;
    }
    else {
      int v15 = 2;
    }
    icu::StringSegment::adjustOffset((uint64_t)v23, v15);
    int v7 = 0;
LABEL_30:
    if (v7 >= (int)icu::StringSegment::length((uint64_t *)v14, (icu::StringSegment *)v23)) {
      goto LABEL_34;
    }
  }
  *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_33:
  *a2 = icu::StringSegment::getOffset((icu::StringSegment *)v23);
LABEL_34:
  icu::UCharsTrie::~UCharsTrie(&v19);
  return icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v25);
}

uint64_t sub_18C982220@<X0>(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 <= 0)
  {
    if (atomic_load_explicit((atomic_uint *volatile)&dword_1E9192508, memory_order_acquire) == 2
      || !icu::umtx_initImplPreInit((atomic_uint *)&dword_1E9192508))
    {
      if (dword_1E919250C >= 1) {
        *a2 = dword_1E919250C;
      }
    }
    else
    {
      sub_18C98110C(a2);
      dword_1E919250C = *a2;
      icu::umtx_initImplPostInit(&dword_1E9192508);
    }
  }
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = &unk_1EDA47700;
  *(_WORD *)(a3 + 8) = 2;

  return sub_18C982308(a1, a3, (int *)a2);
}

uint64_t sub_18C982308(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v5 = result;
    uint64_t result = sub_18C984600(result, a2, a3);
    if (result)
    {
      __int16 v12 = 32;
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
    }
    if (*a3 <= 0)
    {
      uint64_t result = sub_18C984798(v5, a2, (UErrorCode *)a3);
      if (result)
      {
        __int16 v12 = 32;
        uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
      }
      if (*a3 <= 0)
      {
        uint64_t result = sub_18C984AD4(v5, a2);
        if (result)
        {
          __int16 v12 = 32;
          uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
        }
        if (*a3 <= 0)
        {
          uint64_t result = sub_18C984BB0(v5, (icu::UnicodeString *)a2);
          if (result)
          {
            __int16 v12 = 32;
            uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
          }
          if (*a3 <= 0)
          {
            int v6 = *(_DWORD *)(v5 + 96);
            if (v6 == 4
              || (sub_18C980614(v6, a2),
                  __int16 v12 = 32,
                  uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1),
                  *a3 <= 0))
            {
              uint64_t result = sub_18C984DF0(v5, a2, a3);
              if (result)
              {
                __int16 v12 = 32;
                uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
              }
              if (*a3 <= 0)
              {
                uint64_t result = sub_18C984E44(v5, (icu::UnicodeString *)a2);
                if (result)
                {
                  __int16 v12 = 32;
                  uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
                }
                if (*a3 <= 0)
                {
                  uint64_t result = sub_18C984F2C(v5, a2, a3);
                  if (result)
                  {
                    __int16 v12 = 32;
                    uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
                  }
                  if (*a3 <= 0)
                  {
                    int v7 = *(_DWORD *)(v5 + 152);
                    if (v7 == 1
                      || v7 == 7
                      || (sub_18C980974(v7, a2),
                          __int16 v12 = 32,
                          uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1),
                          *a3 <= 0))
                    {
                      int v8 = *(_DWORD *)(v5 + 156);
                      if (!v8
                        || v8 == 9
                        || (sub_18C980AF8(v8, a2),
                            __int16 v12 = 32,
                            uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1),
                            *a3 <= 0))
                      {
                        int v9 = *(_DWORD *)(v5 + 164);
                        if ((v9 | 2) == 2
                          || (sub_18C980CD4(v9, a2),
                              __int16 v12 = 32,
                              uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1),
                              *a3 <= 0))
                        {
                          uint64_t result = sub_18C985008(v5, a2, (UErrorCode *)a3);
                          if (result)
                          {
                            __int16 v12 = 32;
                            uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
                          }
                          if (*a3 <= 0)
                          {
                            if (*(_DWORD *)(v5 + 112) != -2
                              || *(__int16 *)(v5 + 216) >= 1
                              || *(void *)(v5 + 224)
                              || *(void *)(v5 + 232))
                            {
                              *a3 = 16;
                              return result;
                            }
                            if (*(__int16 *)(a2 + 8) < 0)
                            {
                              int v11 = *(_DWORD *)(a2 + 12);
                              if (v11 > 0) {
                                return sub_18C8980C0(a2, v11 - 1);
                              }
                            }
                            else
                            {
                              unsigned int v10 = *(unsigned __int16 *)(a2 + 8);
                              if (v10 >= 0x20)
                              {
                                int v11 = v10 >> 5;
                                return sub_18C8980C0(a2, v11 - 1);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_18C98268C(icu::StringSegment *a1, icu::UCharsTrie *a2, unsigned char *a3, uint64_t a4, char *a5)
{
  int v10 = icu::StringSegment::charAt(a1, 0);
  if (v10 <= 63)
  {
    if (v10 == 46)
    {
      if (!a3[4])
      {
        a3[4] = 1;
        sub_18C982E7C(a1, a4, a5);
        return 2;
      }
      goto LABEL_18;
    }
    if (v10 == 48)
    {
      if (!a3[8])
      {
        a3[8] = 1;
        sub_18C9832F4(a1, a4, a5);
        return 0;
      }
      goto LABEL_18;
    }
    goto LABEL_11;
  }
  if (v10 != 64)
  {
    if (v10 == 69)
    {
      if (!*a3)
      {
        *a3 = 1;
        sub_18C98315C(a1, a4, a5);
        return 0;
      }
      goto LABEL_18;
    }
LABEL_11:
    if (icu::UCharsTrie::current(a2) - 4 > 0xFFFFFFFD)
    {
      BOOL v13 = (unsigned __int16 *)*((void *)a2 + 2);
      uint64_t v14 = v13 + 1;
      unsigned int v15 = *v13;
      if ((__int16)*v13 < 0)
      {
        int v17 = (icu::number::Notation *)(v15 & 0x7FFF);
        if (v17 >= 0x4000)
        {
          if (v17 == 0x7FFF)
          {
            int v18 = v13[1] << 16;
            uint64_t v14 = v13 + 2;
          }
          else
          {
            int v18 = (v17 << 16) - 0x40000000;
          }
          int v17 = (icu::number::Notation *)(v18 | *v14);
        }
      }
      else
      {
        unsigned int v16 = v15 >> 6;
        if (v16 > 0x100)
        {
          if (v16 > 0x1FE) {
            int v17 = (icu::number::Notation *)(v13[2] | (v13[1] << 16));
          }
          else {
            int v17 = (icu::number::Notation *)((*v14 | ((unsigned __int16)(v16 & 0x1FF) << 16)) - 16842752);
          }
        }
        else
        {
          int v17 = (icu::number::Notation *)(v16 - 1);
        }
      }
      switch((int)v17)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          if (*a3) {
            goto LABEL_18;
          }
          *a3 = 1;
          *(void *)(a4 + 4) = sub_18C980474(v17);
          *(_DWORD *)(a4 + 12) = v22;
          return (v17 & 0xFFFFFFFE) == 2;
        case 5:
        case 6:
        case 7:
          if (a3[1]) {
            goto LABEL_18;
          }
          a3[1] = 1;
          sub_18C9804F4((int)v17, (uint64_t)v31);
          goto LABEL_52;
        case 8:
          if (a3[13]) {
            goto LABEL_18;
          }
          a3[13] = 1;
          if (a3[1]) {
            goto LABEL_18;
          }
          a3[1] = 1;
          icu::number::Scale::powerOfTen(2, (uint64_t)v31);
          icu::number::Scale::operator=(a4 + 168, (uint64_t)v31);
          icu::number::Scale::~Scale((icu::number::Scale *)v31);
          icu::MeasureUnit::getPercent((uint64_t)v31);
LABEL_52:
          icu::MeasureUnit::operator=(a4 + 16, (uint64_t)v31);
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v31);
          return 0;
        case 9:
        case 10:
        case 11:
        case 12:
          if (a3[4]) {
            goto LABEL_18;
          }
          a3[4] = 1;
          sub_18C980550((int)v17, (uint64_t)v31);
          *(_OWORD *)(a4 + 64) = *(_OWORD *)v31;
          *(_OWORD *)(a4 + 76) = *(_OWORD *)&v31[12];
          if (v17 == 9) {
            return 2;
          }
          else {
            return 3;
          }
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
          if (a3[5]) {
            goto LABEL_18;
          }
          a3[5] = 1;
          int v19 = sub_18C9805E4((int)v17);
          uint64_t result = 0;
          *(_DWORD *)(a4 + 96) = v19;
          return result;
        case 24:
          if (a3[8]) {
            goto LABEL_18;
          }
          a3[8] = 1;
          *(void *)uint64_t v31 = icu::number::IntegerWidth::zeroFillTo(0);
          *(_DWORD *)&unsigned char v31[8] = v27;
          unint64_t v28 = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)v31, 0);
          uint64_t result = 0;
          *(void *)(a4 + 124) = v28;
          *(unsigned char *)(a4 + 132) = v29;
          return result;
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
          if (a3[6]) {
            goto LABEL_18;
          }
          a3[6] = 1;
          if ((v17 - 25) >= 5) {
            signed int v23 = 5;
          }
          else {
            signed int v23 = v17 - 25;
          }
          uint64_t v24 = icu::number::impl::Grouper::forStrategy(v23);
          uint64_t result = 0;
          *(void *)(a4 + 100) = v24;
          *(_DWORD *)(a4 + 108) = v25;
          return result;
        case 30:
          if (a3[9]) {
            goto LABEL_18;
          }
          a3[9] = 1;
          InstanceByName = icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)"latn", a5, v12);
          icu::number::impl::SymbolsWrapper::setTo((void *)(a4 + 136), (uint64_t)InstanceByName);
          return 0;
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
          if (a3[10]) {
            goto LABEL_18;
          }
          uint64_t result = 0;
          a3[10] = 1;
          int v21 = v17 - 31;
          if ((v17 - 31) >= 7) {
            int v21 = 7;
          }
          *(_DWORD *)(a4 + 152) = v21;
          return result;
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
          if (a3[11]) {
            goto LABEL_18;
          }
          uint64_t result = 0;
          a3[11] = 1;
          int v20 = v17 - 38;
          if ((v17 - 38) >= 9) {
            int v20 = 9;
          }
          *(_DWORD *)(a4 + 156) = v20;
          return result;
        case 47:
        case 48:
          if (a3[12]) {
            goto LABEL_18;
          }
          uint64_t result = 0;
          a3[12] = 1;
          if (v17 == 48) {
            int v26 = 1;
          }
          else {
            int v26 = 2;
          }
          if (v17 == 47) {
            int v26 = 0;
          }
          *(_DWORD *)(a4 + 164) = v26;
          return result;
        case 49:
          if (a3[4]) {
            goto LABEL_18;
          }
          a3[4] = 1;
          return 4;
        case 50:
          if (a3[1]) {
            goto LABEL_18;
          }
          a3[1] = 1;
          return 5;
        case 51:
          if (a3[2]) {
            goto LABEL_18;
          }
          a3[2] = 1;
          return 6;
        case 52:
          if (a3[1]) {
            goto LABEL_18;
          }
          a3[1] = 1;
          if (a3[2]) {
            goto LABEL_18;
          }
          a3[2] = 1;
          return 7;
        case 53:
          if (a3[3]) {
            goto LABEL_18;
          }
          a3[3] = 1;
          return 8;
        case 54:
          if (a3[1]) {
            goto LABEL_18;
          }
          a3[1] = 1;
          if (a3[2]) {
            goto LABEL_18;
          }
          a3[2] = 1;
          return 9;
        case 55:
          if (a3[8]) {
            goto LABEL_18;
          }
          a3[8] = 1;
          return 10;
        case 56:
          if (a3[9]) {
            goto LABEL_18;
          }
          a3[9] = 1;
          return 11;
        case 57:
          if (a3[13]) {
            goto LABEL_18;
          }
          a3[13] = 1;
          return 12;
        default:
          abort();
      }
    }
    goto LABEL_18;
  }
  if (a3[4])
  {
LABEL_18:
    uint64_t result = 0;
    *(_DWORD *)a5 = 65811;
    return result;
  }
  a3[4] = 1;
  sub_18C98300C(a1, a4, a5);
  return 3;
}

uint64_t sub_18C982C98(int a1, icu::StringSegment *a2, uint64_t a3, UErrorCode *a4)
{
  switch(a1)
  {
    case 1:
      if ((sub_18C9840EC(a2, a3) & 1) == 0)
      {
        if (*(int *)a4 > 0) {
          goto LABEL_20;
        }
        if ((sub_18C9841B0(a2, a3) & 1) == 0)
        {
          if (*(int *)a4 >= 1) {
            goto LABEL_20;
          }
          goto LABEL_8;
        }
      }
      return 1;
    case 2:
      if (sub_18C984358(a2, a3, a4)) {
        return 3;
      }
      if (*(int *)a4 > 0) {
        goto LABEL_20;
      }
      goto LABEL_6;
    case 3:
LABEL_6:
      BOOL v8 = sub_18C984558(a2, a3);
      uint64_t result = 0;
      if (!v8 && *(int *)a4 <= 0) {
        goto LABEL_8;
      }
      return result;
    case 4:
      sub_18C97E550(a2, a3 + 64, a4);
      return 3;
    case 5:
      sub_18C9834C4(a2, a3, a4);
      goto LABEL_20;
    case 6:
      sub_18C983834(a2, a3, a4);
      goto LABEL_20;
    case 7:
      sub_18C9838C0(a2, a3, a4);
      goto LABEL_20;
    case 8:
      sub_18C983A78(a2, a3, a4);
      goto LABEL_20;
    case 9:
      sub_18C9833A8(a2, a3, a4);
      goto LABEL_20;
    case 10:
      sub_18C983BD0(a2, a3, a4);
      goto LABEL_20;
    case 11:
      sub_18C983D68(a2, a3, (char *)a4);
      goto LABEL_20;
    case 12:
      sub_18C983EF0(a2, a3, a4);
LABEL_20:
      uint64_t result = 0;
      break;
    default:
LABEL_8:
      uint64_t result = 0;
      *a4 = U_NUMBER_SKELETON_SYNTAX_ERROR;
      break;
  }
  return result;
}

double sub_18C982E7C(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  if ((int)icu::StringSegment::length(a1) < 2)
  {
    uint64_t v7 = 0;
    int v10 = 1;
  }
  else
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = (v6 + 1);
      if (icu::StringSegment::charAt(a1, (int)v6 + 1) != 48) {
        break;
      }
      int v8 = icu::StringSegment::length(a1);
      int v9 = v6 + 2;
      uint64_t v6 = (v6 + 1);
      if (v9 >= v8)
      {
        int v10 = v7 + 1;
        goto LABEL_8;
      }
    }
    int v10 = v6 + 1;
    uint64_t v7 = v6;
  }
LABEL_8:
  if (v10 >= (int)icu::StringSegment::length(a1)) {
    goto LABEL_18;
  }
  if ((icu::StringSegment::charAt(a1, v10) & 0xFFFE) != 0x2A)
  {
    if (v10 < (int)icu::StringSegment::length(a1))
    {
      int v13 = v7;
      do
      {
        if (icu::StringSegment::charAt(a1, v10) != 35) {
          break;
        }
        ++v13;
        ++v10;
      }
      while (v10 < (int)icu::StringSegment::length(a1));
LABEL_19:
      if (v10 >= (int)icu::StringSegment::length(a1))
      {
        icu::number::Precision::minMaxFraction(v7, v13, (uint64_t)v14);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v14;
        double result = *(double *)&v14[12];
        *(_OWORD *)(a2 + 76) = *(_OWORD *)&v14[12];
        return result;
      }
LABEL_20:
      *a3 = 65811;
      return result;
    }
LABEL_18:
    int v13 = v7;
    goto LABEL_19;
  }
  if (v10 + 1 < (int)icu::StringSegment::length(a1)) {
    goto LABEL_20;
  }
  __int16 v12 = (_OWORD *)(a2 + 64);
  if (v7) {
    icu::number::Precision::minFraction(v7, (uint64_t)v14);
  }
  else {
    icu::number::Precision::unlimited((uint64_t)v14);
  }
  *__int16 v12 = *(_OWORD *)v14;
  double result = *(double *)&v14[12];
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)&v14[12];
  return result;
}

double sub_18C98300C(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  if ((int)icu::StringSegment::length(a1) < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      if (icu::StringSegment::charAt(a1, v6) != 64) {
        break;
      }
      uint64_t v6 = (v6 + 1);
    }
    while ((int)v6 < (int)icu::StringSegment::length(a1));
  }
  int v7 = v6;
  if ((int)v6 >= (int)icu::StringSegment::length(a1))
  {
LABEL_15:
    if (v7 >= (int)icu::StringSegment::length(a1))
    {
      icu::number::Precision::minMaxSignificantDigits(v6, v7, (uint64_t)v9);
      goto LABEL_18;
    }
LABEL_16:
    *a3 = 65811;
    return result;
  }
  if ((icu::StringSegment::charAt(a1, v6) & 0xFFFE) != 0x2A)
  {
    int v7 = v6;
    if ((int)v6 < (int)icu::StringSegment::length(a1))
    {
      int v7 = v6;
      do
      {
        if (icu::StringSegment::charAt(a1, v7) != 35) {
          break;
        }
        ++v7;
      }
      while (v7 < (int)icu::StringSegment::length(a1));
    }
    goto LABEL_15;
  }
  if ((int)v6 + 1 < (int)icu::StringSegment::length(a1)) {
    goto LABEL_16;
  }
  icu::number::Precision::minSignificantDigits(v6, (uint64_t)v9);
LABEL_18:
  *(_OWORD *)(a2 + 64) = *(_OWORD *)v9;
  double result = *(double *)&v9[12];
  *(_OWORD *)(a2 + 76) = *(_OWORD *)&v9[12];
  return result;
}

uint64_t sub_18C98315C(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = icu::StringSegment::length(a1);
  if (result == 1) {
    goto LABEL_2;
  }
  int v7 = 1;
  int v8 = icu::StringSegment::charAt(a1, 1);
  if (v8 == 69)
  {
    uint64_t result = icu::StringSegment::length(a1);
    if (result == 2)
    {
LABEL_2:
      *a3 = 65811;
      return result;
    }
    int v7 = 2;
  }
  if (icu::StringSegment::charAt(a1, v7) == 43)
  {
    uint64_t result = icu::StringSegment::length(a1);
    if (result == v7 + 1) {
      goto LABEL_2;
    }
    if (icu::StringSegment::charAt(a1, v7 + 1) != 33)
    {
      uint64_t result = icu::StringSegment::charAt(a1, v7 + 1);
      if (result != 63) {
        goto LABEL_2;
      }
    }
    v7 += 2;
    uint64_t result = icu::StringSegment::length(a1);
    if (result == v7) {
      goto LABEL_2;
    }
  }
  int v9 = (icu::number::Notation *)icu::StringSegment::length(a1);
  if (v7 < (int)v9)
  {
    int v10 = 0;
    while (1)
    {
      uint64_t result = icu::StringSegment::charAt(a1, v7 + v10);
      if (result != 48) {
        goto LABEL_2;
      }
      ++v10;
      int v9 = (icu::number::Notation *)icu::StringSegment::length(a1);
      if (v7 + v10 >= (int)v9) {
        goto LABEL_16;
      }
    }
  }
  int v10 = 0;
LABEL_16:
  if (v8 == 69) {
    uint64_t v11 = icu::number::Notation::engineering(v9);
  }
  else {
    uint64_t v11 = icu::number::Notation::scientific(v9);
  }
  uint64_t v15 = v11;
  int v16 = v12;
  uint64_t v17 = icu::number::ScientificNotation::withExponentSignDisplay((uint64_t)&v15);
  int v18 = v13;
  uint64_t result = icu::number::ScientificNotation::withMinExponentDigits((icu::number::ScientificNotation *)&v17, v10);
  *(void *)(a2 + 4) = result;
  *(_DWORD *)(a2 + 12) = v14;
  return result;
}

uint64_t sub_18C9832F4(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  if ((int)icu::StringSegment::length(a1) < 2)
  {
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
    while (1)
    {
      int v7 = v6 + 1;
      if (icu::StringSegment::charAt(a1, (int)v6 + 1) != 48) {
        break;
      }
      int v8 = icu::StringSegment::length(a1);
      int v9 = v6 + 2;
      uint64_t v6 = (v6 + 1);
      if (v9 >= v8)
      {
        uint64_t v6 = (v7 + 1);
        break;
      }
    }
  }
  uint64_t result = icu::StringSegment::length(a1);
  if ((int)v6 >= (int)result)
  {
    uint64_t result = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)v6);
    *(void *)(a2 + 124) = result;
    *(unsigned char *)(a2 + 132) = v11;
  }
  else
  {
    *a3 = 65811;
  }
  return result;
}

void sub_18C9833A8(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (icu::StringSegment::length(a1) == 3)
  {
    icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v10);
    uint64_t v6 = (long long *)WORD4(v10);
    if ((BYTE8(v10) & 0x11) != 0)
    {
      int v7 = 0;
    }
    else if ((BYTE8(v10) & 2) != 0)
    {
      uint64_t v6 = &v10;
      int v7 = (char *)&v10 + 10;
    }
    else
    {
      int v7 = (char *)*((void *)&v11 + 1);
    }
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10);
    int v9 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    int v8 = v7;
    icu::CurrencyUnit::CurrencyUnit(&v10, &v8, &v9);
    if (v9 < 1) {
      icu::MeasureUnit::operator=(a2 + 16, (unint64_t)&v10);
    }
    else {
      *a3 = 65811;
    }
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v10);
  }
  else
  {
    *a3 = 65811;
  }
}

void *sub_18C9834C4(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v34);
  unint64_t v5 = 0;
  uint64_t v6 = (void *)WORD4(v34);
  unint64_t v7 = (unint64_t)WORD4(v34) >> 5;
  unint64_t v8 = *((void *)&v35 + 1);
  if ((BYTE8(v34) & 2) != 0) {
    unint64_t v9 = (unint64_t)&v34 | 0xA;
  }
  else {
    unint64_t v9 = *((void *)&v35 + 1);
  }
  if ((WORD4(v34) & 0x8000) != 0) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v10 = (unint64_t)WORD4(v34) >> 5;
  if (v5 < v7)
  {
    while (v10 <= v5 || *(_WORD *)(v9 + 2 * v5) != 45)
    {
      ++v5;
      if ((WORD4(v34) & 0x8000) == 0) {
        goto LABEL_5;
      }
LABEL_7:
      unint64_t v10 = HIDWORD(v34);
      if ((uint64_t)v5 >= SHIDWORD(v34)) {
        goto LABEL_13;
      }
    }
    if ((WORD4(v34) & 0x8000) == 0) {
      goto LABEL_14;
    }
LABEL_13:
    LODWORD(v7) = HIDWORD(v34);
  }
LABEL_14:
  if (v7 == v5)
  {
    *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
    return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v34);
  }
  memset(&v33[1], 0, 56);
  v33[0] = (char *)&v33[1] + 5;
  LODWORD(v33[1]) = 40;
  v30[0] = U_ZERO_ERROR;
  if ((BYTE8(v34) & 2) != 0) {
    unint64_t v8 = (unint64_t)&v34 | 0xA;
  }
  if ((BYTE8(v34) & 0x11) != 0) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = v8;
  }
  unint64_t v28 = v11;
  icu::UnicodeString::UnicodeString(v29, 0, &v28);
  icu::CharString::appendInvariantChars((icu::CharString *)v33, (const icu::UnicodeString *)v29, v30);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v29);
  UErrorCode v13 = v30[0];
  if (v30[0] != U_INVARIANT_CONVERSION_ERROR)
  {
    if (v30[0] > U_ZERO_ERROR) {
      goto LABEL_24;
    }
    memset(v31, 0, sizeof(v31));
    *(void *)BOOL v30 = (char *)&v31[1] + 1;
    v31[0] = 40;
    uint64_t v32 = 0;
    UErrorCode v27 = U_ZERO_ERROR;
    unint64_t v15 = *((void *)&v35 + 1);
    if ((BYTE8(v34) & 2) != 0) {
      unint64_t v15 = (unint64_t)&v34 | 0xA;
    }
    if ((BYTE8(v34) & 0x11) != 0) {
      unint64_t v15 = 0;
    }
    unint64_t v26 = v15 + 2 * (v5 + 1);
    icu::UnicodeString::UnicodeString(v29, 0, &v26);
    icu::CharString::appendInvariantChars((icu::CharString *)v30, (const icu::UnicodeString *)v29, &v27);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v29);
    UErrorCode v17 = v27;
    if (v27 == U_INVARIANT_CONVERSION_ERROR)
    {
      UErrorCode v17 = U_NUMBER_SKELETON_SYNTAX_ERROR;
    }
    else if (v27 <= U_ZERO_ERROR)
    {
      bzero(v29, 0x3C0uLL);
      for (uint64_t i = 0; i != 960; i += 24)
        icu::MeasureUnit::MeasureUnit((uint64_t)&v29[i]);
      UErrorCode v27 = U_ZERO_ERROR;
      int Available = icu::MeasureUnit::getAvailable((icu::MeasureUnit *)v33[0], (icu::MeasureUnit *)v29, (icu::MeasureUnit *)0x28, (int *)&v27, v19);
      if (v27 <= U_ZERO_ERROR)
      {
        if (Available < 1)
        {
LABEL_46:
          *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
        }
        else
        {
          uint64_t v21 = Available;
          int v22 = v29;
          while (1)
          {
            signed int v23 = *(const char **)v30;
            Subtype = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)v22);
            if (!strcmp(v23, Subtype)) {
              break;
            }
            v22 += 24;
            if (!--v21) {
              goto LABEL_46;
            }
          }
          icu::MeasureUnit::operator=(a2 + 16, (unint64_t)v22);
        }
      }
      else
      {
        *a3 = U_INTERNAL_PROGRAM_ERROR;
      }
      for (uint64_t j = 936; j != -24; j -= 24)
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v29[j]);
      goto LABEL_36;
    }
    *a3 = v17;
LABEL_36:
    if (LOBYTE(v31[1])) {
      uprv_free(*(void **)v30);
    }
    goto LABEL_25;
  }
  UErrorCode v13 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_24:
  *a3 = v13;
LABEL_25:
  uint64_t v6 = (void *)BYTE4(v33[1]);
  if (BYTE4(v33[1])) {
    uprv_free(v33[0]);
  }
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v34);
}

void sub_18C983834(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  memset(v7, 0, sizeof(v7));
  unint64_t v6 = a2 + 16;
  icu::MeasureUnit::MeasureUnit((uint64_t)v7, a2 + 16);
  sub_18C9834C4(a1, a2, a3);
  if (*(int *)a3 <= 0)
  {
    icu::MeasureUnit::operator=(a2 + 40, v6);
    icu::MeasureUnit::operator=(v6, (unint64_t)v7);
  }
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v7);
}

void sub_18C9838C0(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  memset(&v15[1], 0, 48);
  uint64_t v16 = 0;
  v15[0] = (char *)&v15[1] + 5;
  LODWORD(v15[1]) = 40;
  UErrorCode v11 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v12);
  unint64_t v6 = 0;
  if ((v13[0] & 0x11) == 0)
  {
    if ((v13[0] & 2) != 0) {
      unint64_t v6 = (char *)v13 + 2;
    }
    else {
      unint64_t v6 = (char *)v13[2];
    }
  }
  unint64_t v10 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v14, 0, &v10);
  icu::CharString::appendInvariantChars((icu::CharString *)v15, (const icu::UnicodeString *)v14, &v11);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v14);
  unint64_t v9 = v10;
  icu::UnicodeString::~UnicodeString(&v9, (icu::UnicodeString *)&v12);
  UErrorCode v8 = v11;
  if (v11 == U_INVARIANT_CONVERSION_ERROR)
  {
    UErrorCode v8 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v8;
    goto LABEL_9;
  }
  if (v11 > U_ZERO_ERROR) {
    goto LABEL_8;
  }
  uint64_t v12 = &unk_1EDA43700;
  v13[0] = 0;
  icu::MeasureUnit::forIdentifier((uint64_t)v15[0], v16, (int *)v13, (uint64_t)v14);
  icu::MeasureUnit::operator=(a2 + 16, (uint64_t)v14);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v14);
  if (SLODWORD(v13[0]) >= 1) {
    *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
  }
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v12);
LABEL_9:
  if (BYTE4(v15[1])) {
    uprv_free(v15[0]);
  }
}

void sub_18C983A78(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  memset(&v16[1], 0, 48);
  uint64_t v17 = 0;
  v16[0] = (char *)&v16[1] + 5;
  LODWORD(v16[1]) = 40;
  UErrorCode v11 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v12);
  unint64_t v6 = 0;
  if ((v13 & 0x11) == 0)
  {
    if ((v13 & 2) != 0) {
      unint64_t v6 = v14;
    }
    else {
      unint64_t v6 = *(unsigned char **)&v14[14];
    }
  }
  unint64_t v10 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v15, 0, &v10);
  icu::CharString::appendInvariantChars((icu::CharString *)v16, (const icu::UnicodeString *)v15, &v11);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v15);
  unint64_t v9 = v10;
  icu::UnicodeString::~UnicodeString(&v9, (icu::UnicodeString *)v12);
  UErrorCode v8 = v11;
  if (v11 == U_INVARIANT_CONVERSION_ERROR)
  {
    UErrorCode v8 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v8;
    goto LABEL_9;
  }
  if (v11 > U_ZERO_ERROR) {
    goto LABEL_8;
  }
  icu::number::impl::StringProp::set(a2 + 192, (const char *)v16[0], v17);
LABEL_9:
  if (BYTE4(v16[1])) {
    uprv_free(v16[0]);
  }
}

uint64_t sub_18C983BD0(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  int v6 = icu::StringSegment::charAt(a1, 0) & 0xFFFE;
  BOOL v7 = v6 != 42;
  int v8 = v6 == 42;
  if (v6 == 42) {
    int v9 = -1;
  }
  else {
    int v9 = 0;
  }
  if ((int)icu::StringSegment::length(a1) > v8 && v6 != 42 && icu::StringSegment::charAt(a1, v8) == 35)
  {
    int v10 = v9 + 1;
    int v11 = v8 + 1;
    do
    {
      int v9 = v10;
      int v8 = v11;
      if (v11 >= (int)icu::StringSegment::length(a1)) {
        break;
      }
      int v12 = icu::StringSegment::charAt(a1, v8);
      int v10 = v9 + 1;
      int v11 = v8 + 1;
    }
    while (v12 == 35);
    BOOL v7 = 1;
  }
  if (v8 >= (int)icu::StringSegment::length(a1) || v8 >= (int)icu::StringSegment::length(a1))
  {
    __int16 v13 = 0;
  }
  else
  {
    __int16 v13 = 0;
    while (icu::StringSegment::charAt(a1, v8 + (int)v13) == 48)
    {
      __int16 v13 = (icu::number::IntegerWidth *)(v13 + 1);
      if (v8 + (int)v13 >= (int)icu::StringSegment::length(a1))
      {
        v8 += (int)v13;
        goto LABEL_18;
      }
    }
    v8 += (int)v13;
  }
LABEL_18:
  if (v7) {
    uint64_t v14 = (v13 + v9);
  }
  else {
    uint64_t v14 = 0xFFFFFFFFLL;
  }
  uint64_t result = icu::StringSegment::length(a1);
  if (v8 >= (int)result)
  {
    if (v14 == -1)
    {
      uint64_t result = icu::number::IntegerWidth::zeroFillTo(v13);
    }
    else
    {
      uint64_t v18 = icu::number::IntegerWidth::zeroFillTo(v13);
      int v19 = v16;
      uint64_t result = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)&v18, v14);
    }
    *(void *)(a2 + 124) = result;
    *(unsigned char *)(a2 + 132) = v17;
  }
  else
  {
    *a3 = 65811;
  }
  return result;
}

void sub_18C983D68(icu::StringSegment *a1, uint64_t a2, char *a3)
{
  v18[8] = *(void **)MEMORY[0x1E4F143B8];
  memset(&v18[1], 0, 56);
  v18[0] = (char *)&v18[1] + 5;
  LODWORD(v18[1]) = 40;
  UErrorCode v13 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v14);
  int v6 = 0;
  if ((v15 & 0x11) == 0)
  {
    if ((v15 & 2) != 0) {
      int v6 = v16;
    }
    else {
      int v6 = *(unsigned char **)&v16[14];
    }
  }
  int v12 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v17, 0, &v12);
  icu::CharString::appendInvariantChars((icu::CharString *)v18, (const icu::UnicodeString *)v17, &v13);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v17);
  int v11 = v12;
  icu::UnicodeString::~UnicodeString(&v11, (icu::UnicodeString *)v14);
  UErrorCode v9 = v13;
  if (v13 == U_INVARIANT_CONVERSION_ERROR)
  {
    UErrorCode v9 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *(_DWORD *)a3 = v9;
    goto LABEL_9;
  }
  if (v13 > U_ZERO_ERROR) {
    goto LABEL_8;
  }
  InstanceByName = icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)v18[0], a3, v8);
  if (InstanceByName && *(int *)a3 < 1) {
    icu::number::impl::SymbolsWrapper::setTo((void *)(a2 + 136), (uint64_t)InstanceByName);
  }
  else {
    *(_DWORD *)a3 = 65811;
  }
LABEL_9:
  if (BYTE4(v18[1])) {
    uprv_free(v18[0]);
  }
}

void sub_18C983EF0(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  memset(&v19[1], 0, 48);
  uint64_t v20 = 0;
  v19[0] = (char *)&v19[1] + 5;
  LODWORD(v19[1]) = 40;
  UErrorCode v14 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v15);
  int v6 = 0;
  if ((v16 & 0x11) == 0)
  {
    if ((v16 & 2) != 0) {
      int v6 = v17;
    }
    else {
      int v6 = *(unsigned char **)&v17[14];
    }
  }
  UErrorCode v13 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v18, 0, &v13);
  icu::CharString::appendInvariantChars((icu::CharString *)v19, (const icu::UnicodeString *)v18, &v14);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v18);
  int v12 = v13;
  icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)&v15);
  UErrorCode v9 = v14;
  if (v14 == U_INVARIANT_CONVERSION_ERROR)
  {
    UErrorCode v9 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v9;
    goto LABEL_9;
  }
  if (v14 > U_ZERO_ERROR) {
    goto LABEL_8;
  }
  int v10 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)v14, (icu::UMemory *)0x60, v8);
  if (v10)
  {
    int v11 = v10;
    __int16 v15 = icu::number::impl::DecNum::DecNum(v10);
    if (*(int *)a3 <= 0)
    {
      icu::number::impl::DecNum::setTo(v11, (const char *)v19[0], v20, a3);
      if (*(int *)a3 > 0 || icu::number::impl::DecNum::isSpecial(v11))
      {
        *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
      }
      else
      {
        __int16 v15 = 0;
        icu::number::Scale::Scale((icu::number::Scale *)v18, 0, v11);
        icu::number::Scale::operator=(a2 + 168, (uint64_t)v18);
        icu::number::Scale::~Scale((icu::number::Scale *)v18);
      }
    }
  }
  else
  {
    __int16 v15 = 0;
    if (*(int *)a3 <= 0) {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  sub_18C80C034((uint64_t *)&v15);
LABEL_9:
  if (BYTE4(v19[1])) {
    uprv_free(v19[0]);
  }
}

uint64_t sub_18C9840EC(icu::StringSegment *a1, uint64_t a2)
{
  __int16 v4 = icu::StringSegment::charAt(a1, 0);
  uint64_t result = 0;
  if ((v4 & 0xFFFE) == 0x2A)
  {
    if ((int)icu::StringSegment::length(a1) < 2)
    {
      int v7 = 0;
      int v6 = 1;
    }
    else
    {
      int v6 = 1;
      do
      {
        if (icu::StringSegment::charAt(a1, v6) != 101) {
          break;
        }
        ++v6;
      }
      while (v6 < (int)icu::StringSegment::length(a1));
      int v7 = v6 - 1;
    }
    if (v6 >= (int)icu::StringSegment::length(a1))
    {
      *(void *)(a2 + 4) = icu::number::ScientificNotation::withMinExponentDigits((icu::number::ScientificNotation *)(a2 + 4), v7);
      *(_DWORD *)(a2 + 12) = v8;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_18C9841B0(icu::StringSegment *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  v17[0] = 0;
  v17[1] = (void *)qword_1E9192500;
  uint64_t v18 = (unsigned __int16 *)qword_1E9192500;
  uint64_t v19 = 0xFFFFFFFFLL;
  v15[1] = qword_1E9192500;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v20);
  __int16 v4 = 0;
  if ((v21 & 0x11) == 0)
  {
    if ((v21 & 2) != 0) {
      __int16 v4 = v22;
    }
    else {
      __int16 v4 = *(_WORD **)&v22[14];
    }
  }
  __int16 v16 = v4;
  int v5 = icu::StringSegment::length(a1);
  int v6 = icu::UCharsTrie::next((uint64_t)v17, &v16, v5);
  v15[0] = v16;
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v20);
  if ((v6 - 4) < 0xFFFFFFFE) {
    goto LABEL_19;
  }
  int v7 = v18 + 1;
  unsigned int v8 = *v18;
  if ((__int16)*v18 < 0)
  {
    unsigned int v10 = v8 & 0x7FFF;
    if (v10 >= 0x4000)
    {
      if (v10 == 0x7FFF)
      {
        int v11 = v18[1] << 16;
        int v7 = v18 + 2;
      }
      else
      {
        int v11 = (v10 << 16) - 0x40000000;
      }
      unsigned int v10 = v11 | *v7;
    }
  }
  else
  {
    unsigned int v9 = v8 >> 6;
    if (v9 > 0x100) {
      unsigned int v10 = v9 > 0x1FE ? v18[2] | (v18[1] << 16) : (*v7 | ((v9 & 0x1FF) << 16)) - 16842752;
    }
    else {
      unsigned int v10 = v9 - 1;
    }
  }
  if (v10 - 38 > 8)
  {
LABEL_19:
    uint64_t v13 = 0;
  }
  else
  {
    *(void *)(a2 + 4) = icu::number::ScientificNotation::withExponentSignDisplay(a2 + 4);
    *(_DWORD *)(a2 + 12) = v12;
    uint64_t v13 = 1;
  }
  icu::UCharsTrie::~UCharsTrie(v17);
  return v13;
}

uint64_t sub_18C984358(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  int v6 = icu::StringSegment::charAt(a1, 0);
  uint64_t result = 0;
  if (v6 == 64)
  {
    if ((int)icu::StringSegment::length(a1) < 1)
    {
      int v8 = 0;
    }
    else
    {
      int v8 = 0;
      do
      {
        if (icu::StringSegment::charAt(a1, v8) != 64) {
          break;
        }
        ++v8;
      }
      while (v8 < (int)icu::StringSegment::length(a1));
    }
    int v9 = v8;
    if (v8 < (int)icu::StringSegment::length(a1))
    {
      if ((icu::StringSegment::charAt(a1, v8) & 0xFFFE) == 0x2A)
      {
        if (v8 + 1 >= (int)icu::StringSegment::length(a1))
        {
          icu::number::FractionPrecision::withMinDigits(a2 + 64, v8, (uint64_t)v12);
          *(_OWORD *)(a2 + 64) = *(_OWORD *)v12;
          *(_OWORD *)(a2 + 76) = *(_OWORD *)&v12[12];
          return 1;
        }
LABEL_24:
        uint64_t result = 0;
        *a3 = 65811;
        return result;
      }
      int v9 = v8;
      if (v8 < (int)icu::StringSegment::length(a1))
      {
        int v9 = v8;
        do
        {
          if (icu::StringSegment::charAt(a1, v9) != 35) {
            break;
          }
          ++v9;
        }
        while (v9 < (int)icu::StringSegment::length(a1));
      }
    }
    unsigned int v10 = (_OWORD *)(a2 + 64);
    if (v9 >= (int)icu::StringSegment::length(a1))
    {
      if (v8 != 1) {
        goto LABEL_24;
      }
      icu::number::FractionPrecision::withMaxDigits((uint64_t)v10, v9, (uint64_t)v12);
    }
    else
    {
      if (icu::StringSegment::codePointAt((uint64_t **)a1, v9) == 114)
      {
        int v11 = 0;
      }
      else
      {
        if (icu::StringSegment::codePointAt((uint64_t **)a1, v9) != 115) {
          goto LABEL_24;
        }
        int v11 = 1;
      }
      if (v9 + 1 < (int)icu::StringSegment::length(a1)) {
        goto LABEL_24;
      }
      icu::number::FractionPrecision::withSignificantDigits((uint64_t)v10, v8, v9, v11, (uint64_t)v12);
    }
    _OWORD *v10 = *(_OWORD *)v12;
    *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)&v12[12];
    return 1;
  }
  return result;
}

BOOL sub_18C984558(icu::StringSegment *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  icu::UnicodeString::UnicodeString((uint64_t)v7, (uint64_t)"w");
  BOOL v4 = icu::StringSegment::operator==(a1, (uint64_t)v7);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
  if (v4)
  {
    icu::number::Precision::trailingZeroDisplay(a2 + 64, 1, (uint64_t)v7);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)v7;
    *(_OWORD *)(a2 + 76) = *(_OWORD *)&v7[12];
  }
  return v4;
}

uint64_t sub_18C984600(uint64_t a1, uint64_t a2, int *a3)
{
  int v6 = *(_DWORD *)(a1 + 4);
  if (v6)
  {
    if (v6 == 1)
    {
      int v7 = *(_DWORD *)(a1 + 8);
      if (v7)
      {
        if (v7 != 1)
        {
          uint64_t v8 = 0;
          *a3 = 16;
          return v8;
        }
        icu::UnicodeString::doAppend(a2, (uint64_t)"c", 0, 0xFFFFFFFFLL);
      }
      else
      {
        icu::UnicodeString::doAppend(a2, (uint64_t)L"compact-short", 0, 0xFFFFFFFFLL);
      }
      return 1;
    }
    return 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 8) == 3) {
      icu::UnicodeString::doAppend(a2, (uint64_t)L"engineering", 0, 0xFFFFFFFFLL);
    }
    else {
      icu::UnicodeString::doAppend(a2, (uint64_t)L"scientific", 0, 0xFFFFFFFFLL);
    }
    if (*(__int16 *)(a1 + 10) < 2
      || (__int16 v10 = 47,
          icu::UnicodeString::doAppend(a2, (uint64_t)&v10, 0, 1),
          sub_18C98509C(*(__int16 *)(a1 + 10), a2),
          uint64_t v8 = 0,
          *a3 <= 0))
    {
      if (!*(_DWORD *)(a1 + 12)) {
        return 1;
      }
      __int16 v10 = 47;
      uint64_t v8 = 1;
      icu::UnicodeString::doAppend(a2, (uint64_t)&v10, 0, 1);
      sub_18C980AF8(*(_DWORD *)(a1 + 12), a2);
    }
  }
  return v8;
}

BOOL sub_18C984798(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  memset(v23, 0, sizeof(v23));
  int v6 = (icu::MeasureUnit *)(a1 + 16);
  icu::MeasureUnit::MeasureUnit((uint64_t)v23, a1 + 16);
  icu::MeasureUnit::MeasureUnit((uint64_t)&v24);
  uint64_t v8 = *(void *)(a1 + 40);
  int v7 = (icu::MeasureUnit *)(a1 + 40);
  char v9 = (*(uint64_t (**)(icu::MeasureUnit *, long long *))(v8 + 32))(v7, &v24);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v24);
  if ((v9 & 1) == 0)
  {
    Type = icu::MeasureUnit::getType(v6);
    if (!strcmp("currency", Type) || (int v11 = icu::MeasureUnit::getType(v7), !strcmp("currency", v11)))
    {
      BOOL v14 = 0;
      *a3 = U_UNSUPPORTED_ERROR;
      goto LABEL_21;
    }
    icu::MeasureUnit::reciprocal(v7, a3, (uint64_t)v22);
    icu::MeasureUnit::product((icu::MeasureUnit *)v23, (const icu::MeasureUnit *)v22, a3, (uint64_t)&v24);
    icu::MeasureUnit::operator=((uint64_t)v23, (uint64_t)&v24);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v24);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v22);
  }
  int v12 = icu::MeasureUnit::getType((icu::MeasureUnit *)v23);
  if (!strcmp("currency", v12))
  {
    icu::UnicodeString::doAppend(a2, (uint64_t)"c", 0, 0xFFFFFFFFLL);
    v21[0] = (uint64_t)"c";
    long long v24 = 0u;
    long long v25 = 0u;
    icu::CurrencyUnit::CurrencyUnit(v21, (icu::CurrencyUnit *)&v24, (const icu::MeasureUnit *)v23, a3);
    BOOL v14 = *a3 < U_ILLEGAL_ARGUMENT_ERROR;
    if (*(int *)a3 <= 0) {
      icu::UnicodeString::doAppend(a2, (uint64_t)&v25 + 4, 0, 0xFFFFFFFFLL);
    }
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v24);
  }
  else
  {
    icu::MeasureUnit::MeasureUnit((uint64_t)&v24);
    char v13 = (*(uint64_t (**)(void *, long long *))(v23[0] + 32))(v23, &v24);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v24);
    if (v13)
    {
      BOOL v14 = 0;
    }
    else
    {
      Subtype = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)v23);
      if (!strcmp("percent", Subtype))
      {
        icu::UnicodeString::doAppend(a2, (uint64_t)"p", 0, 0xFFFFFFFFLL);
        v21[1] = (uint64_t)"p";
      }
      else
      {
        __int16 v16 = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)v23);
        if (!strcmp("permille", v16))
        {
          icu::UnicodeString::doAppend(a2, (uint64_t)"p", 0, 0xFFFFFFFFLL);
          UErrorCode v21[2] = (uint64_t)"p";
        }
        else
        {
          icu::UnicodeString::doAppend(a2, (uint64_t)L"unit/", 0, 0xFFFFFFFFLL);
          v21[3] = (uint64_t)L"unit/";
          Identifier = icu::MeasureUnit::getIdentifier((icu::MeasureUnit *)v23);
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v24, Identifier);
          if ((SWORD4(v24) & 0x8000u) == 0) {
            uint64_t v18 = WORD4(v24) >> 5;
          }
          else {
            uint64_t v18 = HIDWORD(v24);
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v24, 0, v18);
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v24);
        }
      }
      BOOL v14 = 1;
    }
  }
LABEL_21:
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v23);
  return v14;
}

BOOL sub_18C984AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v2 = *(__int16 *)(a1 + 200);
  if (v2 >= 1)
  {
    icu::UnicodeString::doAppend(a2, (uint64_t)L"usage/", 0, 0xFFFFFFFFLL);
    icu::UnicodeString::UnicodeString(v8, *(void *)(a1 + 192), 0xFFFFFFFFLL, 0);
    if ((v9 & 0x8000u) == 0) {
      uint64_t v5 = v9 >> 5;
    }
    else {
      uint64_t v5 = v10;
    }
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)v8, 0, v5);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
  }
  return v2 > 0;
}

uint64_t sub_18C984BB0(uint64_t a1, icu::UnicodeString *this)
{
  switch(*(_DWORD *)(a1 + 64))
  {
    case 1:
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)"p", 0, 0xFFFFFFFFLL);
      goto LABEL_14;
    case 2:
      sub_18C985100(*(__int16 *)(a1 + 72), *(__int16 *)(a1 + 74), (uint64_t)this);
      goto LABEL_14;
    case 3:
      uint64_t v5 = *(__int16 *)(a1 + 76);
      int v6 = *(__int16 *)(a1 + 78);
      goto LABEL_13;
    case 4:
      sub_18C985100(*(__int16 *)(a1 + 72), *(__int16 *)(a1 + 74), (uint64_t)this);
      __int16 v8 = 47;
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v8, 0, 1);
      int v6 = *(__int16 *)(a1 + 78);
      if (*(unsigned char *)(a1 + 84))
      {
        if (*(_DWORD *)(a1 + 80))
        {
          uint64_t v5 = 1;
        }
        else
        {
          uint64_t v5 = *(__int16 *)(a1 + 78);
          int v6 = -1;
        }
LABEL_13:
        sub_18C9851EC(v5, v6, this);
      }
      else
      {
        sub_18C9851EC(*(__int16 *)(a1 + 76), v6, this);
        if (*(_DWORD *)(a1 + 80)) {
          __int16 v7 = 115;
        }
        else {
          __int16 v7 = 114;
        }
        __int16 v8 = v7;
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v8, 0, 1);
      }
LABEL_14:
      if (*(_DWORD *)(a1 + 88) == 1) {
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)L"/w", 0, 0xFFFFFFFFLL);
      }
      return 1;
    case 5:
    case 6:
    case 7:
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)"p", 0, 0xFFFFFFFFLL);
      sub_18C98528C(*(_DWORD *)(a1 + 72), *(__int16 *)(a1 + 80), *(__int16 *)(a1 + 82), (uint64_t)this);
      goto LABEL_14;
    case 8:
      if (*(_DWORD *)(a1 + 72)) {
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)L"precision-currency-cash", 0, 0xFFFFFFFFLL);
      }
      else {
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)L"precision-currency-standard", 0, 0xFFFFFFFFLL);
      }
      goto LABEL_14;
    case 9:
      uint64_t v5 = *(__int16 *)(a1 + 80);
      int v6 = *(__int16 *)(a1 + 82);
      goto LABEL_13;
    default:
      return 0;
  }
}

uint64_t sub_18C984DF0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*(__int16 *)(a1 + 100) == -3) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 108);
  if (v3 == 2) {
    return 0;
  }
  if (v3 == 5)
  {
    uint64_t result = 0;
    *a3 = 16;
  }
  else
  {
    sub_18C980848(v3, a2);
    return 1;
  }
  return result;
}

uint64_t sub_18C984E44(uint64_t a1, icu::UnicodeString *a2)
{
  int v2 = (unsigned __int16 *)(a1 + 124);
  if (*(unsigned char *)(a1 + 132)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(unsigned __int16 *)(a1 + 124) == 0xFFFF;
  }
  if (v3) {
    return 0;
  }
  uint64_t v8 = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)1);
  int v9 = v6;
  if (icu::number::IntegerWidth::operator==(v2, (unsigned __int16 *)&v8)) {
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 124) | *(unsigned __int16 *)(a1 + 126))
  {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)"i", 0, 0xFFFFFFFFLL);
    sub_18C985374(*(__int16 *)(a1 + 124), *(__int16 *)(a1 + 126), a2);
  }
  else
  {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)"i", 0, 0xFFFFFFFFLL);
  }
  return 1;
}

BOOL sub_18C984F2C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = (icu::number::impl::SymbolsWrapper *)(a1 + 136);
  isNumberingSysteuint64_t m = icu::number::impl::SymbolsWrapper::isNumberingSystem((icu::number::impl::SymbolsWrapper *)(a1 + 136));
  if (isNumberingSystem)
  {
    NumberingSysteuint64_t m = (icu::NumberingSystem *)icu::number::impl::SymbolsWrapper::getNumberingSystem(v5);
    Name = (const char *)icu::NumberingSystem::getName(NumberingSystem);
    if (!strcmp(Name, "latn"))
    {
      icu::UnicodeString::doAppend(a2, (uint64_t)L"latin", 0, 0xFFFFFFFFLL);
    }
    else
    {
      icu::UnicodeString::doAppend(a2, (uint64_t)L"numbering-system/", 0, 0xFFFFFFFFLL);
      sub_18C98540C(NumberingSystem, a2);
    }
  }
  else if (icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols(v5))
  {
    *a3 = 16;
  }
  return isNumberingSystem;
}

uint64_t sub_18C985008(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  if (*(_DWORD *)(a1 + 168)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *(void *)(a1 + 176) == 0;
  }
  uint64_t v4 = !v3;
  if (!v3)
  {
    icu::UnicodeString::doAppend(a2, (uint64_t)L"scale/", 0, 0xFFFFFFFFLL);
    sub_18C9854A8(*(_DWORD *)(a1 + 168), *(const icu::number::impl::DecNum **)(a1 + 176), a2, a3);
  }
  return v4;
}

uint64_t sub_18C98509C(int a1, uint64_t a2)
{
  __int16 v5 = 42;
  uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v5, 0, 1);
  if (a1 >= 1)
  {
    do
    {
      uint64_t result = icu::UnicodeString::append(a2, 0x65u);
      --a1;
    }
    while (a1);
  }
  return result;
}

uint64_t sub_18C985100(int a1, int a2, uint64_t a3)
{
  if (!(a2 | a1)) {
    return icu::UnicodeString::doAppend(a3, (uint64_t)"p", 0, 0xFFFFFFFFLL);
  }
  __int16 v9 = 46;
  uint64_t result = icu::UnicodeString::doAppend(a3, (uint64_t)&v9, 0, 1);
  if (a1 >= 1)
  {
    int v7 = a1;
    do
    {
      uint64_t result = icu::UnicodeString::append(a3, 0x30u);
      --v7;
    }
    while (v7);
  }
  if (a2 == -1)
  {
    __int16 v10 = 42;
    return icu::UnicodeString::doAppend(a3, (uint64_t)&v10, 0, 1);
  }
  else
  {
    int v8 = a2 - a1;
    if (v8 >= 1)
    {
      do
      {
        uint64_t result = icu::UnicodeString::append(a3, 0x23u);
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t sub_18C9851EC(uint64_t result, int a2, icu::UnicodeString *this)
{
  int v5 = result;
  if ((int)result >= 1)
  {
    int v6 = result;
    do
    {
      uint64_t result = icu::UnicodeString::append((uint64_t)this, 0x40u);
      --v6;
    }
    while (v6);
  }
  if (a2 == -1)
  {
    __int16 v8 = 42;
    return icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v8, 0, 1);
  }
  else
  {
    int v7 = a2 - v5;
    if (v7 >= 1)
    {
      do
      {
        uint64_t result = icu::UnicodeString::append((uint64_t)this, 0x23u);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

void sub_18C98528C(unsigned int a1, int a2, int a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v10);
  icu::number::impl::DecimalQuantity::setToLong((void **)v10, a1);
  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v10, a2);
  icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)v10, a3);
  icu::number::impl::DecimalQuantity::toPlainString((icu::number::impl::DecimalQuantity *)v10, (uint64_t)v12);
  if ((v13 & 0x8000u) == 0) {
    uint64_t v8 = v13 >> 5;
  }
  else {
    uint64_t v8 = v14;
  }
  icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v12, 0, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v10);
}

uint64_t sub_18C985374(uint64_t result, int a2, icu::UnicodeString *this)
{
  int v4 = result;
  if (a2 == -1)
  {
    __int16 v6 = 42;
    uint64_t result = icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
  }
  else
  {
    int v5 = a2 - result;
    if (a2 - (int)result >= 1)
    {
      do
      {
        uint64_t result = icu::UnicodeString::append((uint64_t)this, 0x23u);
        --v5;
      }
      while (v5);
    }
  }
  if (v4 >= 1)
  {
    do
    {
      uint64_t result = icu::UnicodeString::append((uint64_t)this, 0x30u);
      --v4;
    }
    while (v4);
  }
  return result;
}

void *sub_18C98540C(icu::NumberingSystem *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t Name = icu::NumberingSystem::getName(a1);
  icu::UnicodeString::UnicodeString(v7, Name, 0xFFFFFFFFLL, 0);
  if ((v8 & 0x8000u) == 0) {
    uint64_t v4 = v8 >> 5;
  }
  else {
    uint64_t v4 = v9;
  }
  icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)v7, 0, v4);
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
}

void sub_18C9854A8(int a1, const icu::number::impl::DecNum *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v10);
  if (a2)
  {
    icu::number::impl::DecimalQuantity::setToDecNum((void **)v10, a2, a4);
    if (*(int *)a4 >= 1) {
      goto LABEL_9;
    }
  }
  else
  {
    icu::number::impl::DecimalQuantity::setToInt((void **)v10, 1);
  }
  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v10, a1);
  icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)v10);
  icu::number::impl::DecimalQuantity::toPlainString((icu::number::impl::DecimalQuantity *)v10, (uint64_t)v12);
  if ((v13 & 0x8000u) == 0) {
    uint64_t v8 = v13 >> 5;
  }
  else {
    uint64_t v8 = v14;
  }
  icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)v12, 0, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
LABEL_9:
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v10);
}

void icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::toSkeleton(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1 || sub_18C9692F0(a1, (int *)a2))
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
  }
  else
  {
    sub_18C982220(a1, a2, a3);
  }
}

void icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::toSkeleton(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1 || sub_18C9692F0(a1, (int *)a2))
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(void *)a3 = &unk_1EDA47700;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
  }
  else
  {
    sub_18C982220(a1, a2, a3);
  }
}

void icu::number::NumberFormatter::forSkeleton(UChar **this@<X0>, UErrorCode *a2@<X1>, _OWORD *a3@<X8>)
{
}

uint64_t sub_18C985734()
{
  qword_1E9192500 = 0;
  atomic_store(0, &dword_1E9192508);
  return 1;
}

icu::number::impl::SymbolsWrapper *icu::number::impl::SymbolsWrapper::SymbolsWrapper(icu::number::impl::SymbolsWrapper *this, const icu::number::impl::SymbolsWrapper *a2)
{
  return this;
}

{
  icu::number::impl::SymbolsWrapper::doCopyFrom(this, a2);
  return this;
}

icu::NumberingSystem *icu::number::impl::SymbolsWrapper::doCopyFrom(icu::NumberingSystem *this, const icu::number::impl::SymbolsWrapper *a2)
{
  BOOL v3 = this;
  int v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 == 2)
  {
    __int16 v6 = (uint64_t *)*((void *)a2 + 1);
    if (v6)
    {
      this = (icu::NumberingSystem *)icu::UMemory::operator new(v6, (icu::UMemory *)0x58, (unint64_t)a2);
      if (this) {
        this = icu::NumberingSystem::NumberingSystem(this, *((const icu::NumberingSystem **)a2 + 1));
      }
      goto LABEL_10;
    }
  }
  else
  {
    if (v4 != 1) {
      return this;
    }
    int v5 = (uint64_t *)*((void *)a2 + 1);
    if (v5)
    {
      this = (icu::NumberingSystem *)icu::UMemory::operator new(v5, (icu::UMemory *)0xB48, (unint64_t)a2);
      if (this) {
        this = (icu::NumberingSystem *)icu::DecimalFormatSymbols::DecimalFormatSymbols(this, *((const icu::DecimalFormatSymbols **)a2 + 1));
      }
      goto LABEL_10;
    }
  }
  this = 0;
LABEL_10:
  *((void *)v3 + 1) = this;
  return this;
}

uint64_t icu::number::impl::SymbolsWrapper::SymbolsWrapper(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)uint64_t result = *a2;
  if ((v2 - 1) <= 1)
  {
    *(void *)(result + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = 0;
  }
  return result;
}

{
  int v2;

  int v2 = *a2;
  *(_DWORD *)uint64_t result = *a2;
  if ((v2 - 1) <= 1)
  {
    *(void *)(result + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = 0;
  }
  return result;
}

uint64_t icu::number::impl::SymbolsWrapper::doMoveFrom(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)uint64_t result = *a2;
  if ((v2 - 1) <= 1)
  {
    *(void *)(result + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = 0;
  }
  return result;
}

icu::number::impl::SymbolsWrapper *icu::number::impl::SymbolsWrapper::operator=(icu::number::impl::SymbolsWrapper *this, const icu::number::impl::SymbolsWrapper *a2)
{
  if (this != a2)
  {
    icu::number::impl::SymbolsWrapper::doCleanup(this);
    icu::number::impl::SymbolsWrapper::doCopyFrom(this, a2);
  }
  return this;
}

void *icu::number::impl::SymbolsWrapper::doCleanup(void *this)
{
  if (*(_DWORD *)this == 2 || *(_DWORD *)this == 1)
  {
    this = (void *)this[1];
    if (this) {
      return (void *)(*(uint64_t (**)(void))(*this + 8))();
    }
  }
  return this;
}

icu::number::impl::SymbolsWrapper *icu::number::impl::SymbolsWrapper::operator=(icu::number::impl::SymbolsWrapper *this, icu::number::impl::SymbolsWrapper *a2)
{
  if (this != a2)
  {
    icu::number::impl::SymbolsWrapper::doCleanup(this);
    int v4 = *(_DWORD *)a2;
    *(_DWORD *)this = *(_DWORD *)a2;
    if ((v4 - 1) <= 1)
    {
      *((void *)this + 1) = *((void *)a2 + 1);
      *((void *)a2 + 1) = 0;
    }
  }
  return this;
}

void icu::number::impl::SymbolsWrapper::~SymbolsWrapper(icu::number::impl::SymbolsWrapper *this)
{
}

{
  icu::number::impl::SymbolsWrapper::doCleanup(this);
}

icu::DecimalFormatSymbols *icu::number::impl::SymbolsWrapper::setTo(icu::number::impl::SymbolsWrapper *this, const icu::DecimalFormatSymbols *a2)
{
  icu::number::impl::SymbolsWrapper::doCleanup(this);
  *(_DWORD *)this = 1;
  uint64_t result = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((uint64_t *)1, (icu::UMemory *)0xB48, v4);
  if (result) {
    uint64_t result = (icu::DecimalFormatSymbols *)icu::DecimalFormatSymbols::DecimalFormatSymbols(result, a2);
  }
  *((void *)this + 1) = result;
  return result;
}

void *icu::number::impl::SymbolsWrapper::setTo(void *a1, uint64_t a2)
{
  uint64_t result = icu::number::impl::SymbolsWrapper::doCleanup(a1);
  *(_DWORD *)a1 = 2;
  a1[1] = a2;
  return result;
}

BOOL icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols(icu::number::impl::SymbolsWrapper *this)
{
  return *(_DWORD *)this == 1;
}

BOOL icu::number::impl::SymbolsWrapper::isNumberingSystem(icu::number::impl::SymbolsWrapper *this)
{
  return *(_DWORD *)this == 2;
}

uint64_t icu::number::impl::SymbolsWrapper::getDecimalFormatSymbols(icu::number::impl::SymbolsWrapper *this)
{
  return *((void *)this + 1);
}

uint64_t icu::number::impl::SymbolsWrapper::getNumberingSystem(icu::number::impl::SymbolsWrapper *this)
{
  return *((void *)this + 1);
}

uint64_t icu::number::impl::StringProp::StringProp(uint64_t this, uint64_t a2)
{
  *(void *)this = 0;
  *(_WORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  return icu::number::impl::StringProp::operator=(this, a2);
}

uint64_t icu::number::impl::StringProp::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_WORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      uprv_free(v4);
      *(void *)a1 = 0;
    }
    if (*(void *)a2) {
      BOOL v5 = *(_DWORD *)(a2 + 12) <= 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      __int16 v6 = (char *)uprv_malloc(*(__int16 *)(a2 + 8) + 1);
      *(void *)a1 = v6;
      if (v6)
      {
        uint64_t v7 = *(__int16 *)(a2 + 8);
        *(_WORD *)(a1 + 8) = v7;
        strncpy(v6, *(const char **)a2, v7 + 1);
      }
      else
      {
        *(_DWORD *)(a1 + 12) = 7;
      }
    }
  }
  return a1;
}

{
  void *v4;

  if (a1 != a2)
  {
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1) {
      uprv_free(v4);
    }
    *(void *)a1 = *(void *)a2;
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(void *)a2 = 0;
  }
  return a1;
}

uint64_t icu::number::impl::StringProp::StringProp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  return icu::number::impl::StringProp::operator=(a1, a2);
}

uint64_t icu::number::impl::StringProp::StringProp(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = *(void *)a2;
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(void *)a2 = 0;
  return result;
}

{
  *(void *)uint64_t result = *(void *)a2;
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(void *)a2 = 0;
  return result;
}

void icu::number::impl::StringProp::~StringProp(void **this)
{
  int v2 = *this;
  if (v2)
  {
    uprv_free(v2);
    *this = 0;
  }
}

{
  void *v2;

  int v2 = *this;
  if (v2)
  {
    uprv_free(v2);
    *this = 0;
  }
}

char *icu::number::impl::StringProp::set(uint64_t a1, const char *a2, __int16 a3)
{
  __int16 v6 = *(void **)a1;
  if (v6)
  {
    uprv_free(v6);
    *(void *)a1 = 0;
  }
  *(_WORD *)(a1 + 8) = a3;
  uint64_t result = (char *)uprv_malloc(a3 + 1);
  *(void *)a1 = result;
  if (result)
  {
    int v8 = *(__int16 *)(a1 + 8);
    size_t v9 = *(unsigned __int16 *)(a1 + 8);
    if (v8 >= 1) {
      uint64_t result = strncpy(result, a2, v9);
    }
    result[(__int16)v9] = 0;
  }
  else
  {
    *(_WORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = 7;
  }
  return result;
}

void sub_18C985CD0(unsigned int *a1, void **a2, uint64_t a3, int a4)
{
  uint64_t v8 = *a1;
  *(_DWORD *)(a3 + 484) = v8;
  if (*(_DWORD *)(a3 + 448) < (int)v8)
  {
    if ((int)v8 < 1) {
      return;
    }
    size_t v9 = uprv_malloc(8 * v8);
    if (!v9) {
      return;
    }
    uint64_t v10 = v9;
    if (*(unsigned char *)(a3 + 452)) {
      uprv_free(*(void **)(a3 + 440));
    }
    *(void *)(a3 + 4icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = v10;
    *(_DWORD *)(a3 + 448) = v8;
    *(unsigned char *)(a3 + 452) = 1;
    LODWORD(v8) = *(_DWORD *)(a3 + 484);
  }
  if ((int)v8 >= 1)
  {
    uint64_t v11 = 0;
    do
    {
      int Type = icu::Formattable::getType((icu::Formattable *)(*(void *)(*((void *)a1 + 1) + 8 * v11) + 8));
      if (Type == 1)
      {
        icu::number::impl::DecimalQuantity::setToDouble(a2, *(double *)(*(void *)(*((void *)a1 + 1) + 8 * v11) + 16));
        *(_DWORD *)(a3 + 480) = v11;
      }
      else
      {
        if (Type != 5) {
          abort();
        }
        *(void *)(*(void *)(a3 + 440) + 8 * v11) = *(void *)(*(void *)(*((void *)a1 + 1) + 8 * v11) + 16);
      }
      if (a4 >= 1) {
        break;
      }
      ++v11;
    }
    while (v11 < *(int *)(a3 + 484));
  }
}

void *icu::number::impl::UsagePrefsHandler::UsagePrefsHandler(void *a1, uint64_t a2, icu::MeasureUnitImpl *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, int *a7)
{
  *a1 = &unk_1EDA4FDC8;
  icu::units::UnitsRouter::UnitsRouter((uint64_t)(a1 + 1), a3, a2, a4, a5, a7);
  a1[23] = a6;
  return a1;
}

{
  *a1 = &unk_1EDA4FDC8;
  icu::units::UnitsRouter::UnitsRouter((uint64_t)(a1 + 1), a3, a2, a4, a5, a7);
  a1[23] = a6;
  return a1;
}

uint64_t icu::number::impl::UsagePrefsHandler::processQuantity(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 16))(*(void *)(a1 + 184));
  if (*(int *)a4 <= 0)
  {
    icu::number::impl::DecimalQuantity::roundToInfinity(a2);
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    memset(v15, 0, sizeof(v15));
    memset(v14, 0, sizeof(v14));
    double v9 = icu::number::impl::DecimalQuantity::toDouble(a2);
    icu::units::UnitsRouter::route(a1 + 8, (_OWORD *)(a3 + 104), a4, (uint64_t)v14, v9);
    if (*(int *)a4 <= 0)
    {
      icu::MeasureUnitImpl::copy((icu::MeasureUnitImpl *)v15, a4, (uint64_t)v11);
      icu::MeasureUnitImpl::build((icu::MeasureUnitImpl *)v11, a4, (uint64_t)v10);
      icu::MeasureUnit::operator=(a3 + 416, (uint64_t)v10);
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v10);
      if (v13) {
        uprv_free(v12[11]);
      }
      sub_18C885AFC((uint64_t)v12);
      if (*(int *)a4 <= 0) {
        sub_18C985CD0(&v14[2], (void **)a2, a3, *a4);
      }
    }
    if (BYTE12(v16)) {
      uprv_free((void *)v16);
    }
    sub_18C885AFC((uint64_t)&v15[8]);
    return sub_18C80BF60((uint64_t)&v14[2]);
  }
  return result;
}

uint64_t icu::number::impl::UnitConversionHandler::UnitConversionHandler(uint64_t a1, icu::MeasureUnitImpl *a2, uint64_t a3, int *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EDA4FDF0;
  icu::MeasureUnit::MeasureUnit(a1 + 8, (unint64_t)a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = a3;
  long long v28 = 0u;
  memset(&v27[4], 0, 48);
  memset(v27, 0, 64);
  long long v25 = 0u;
  long long v26 = 0u;
  *(void *)&long long v26 = v27;
  DWORD2(v26) = 8;
  *(void *)&v27[4] = (char *)&v27[4] + 13;
  DWORD2(v27[4]) = 40;
  DWORD2(v28) = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  memset(v19, 0, sizeof(v19));
  long long v16 = 0u;
  long long v17 = v19;
  uint64_t v18 = 8;
  uint64_t v20 = (char *)&v21 + 5;
  uint64_t v21 = 40;
  DWORD2(v24) = 0;
  v15[0] = 0;
  memset(&v15[2], 0, 72);
  v15[1] = &v15[3];
  LODWORD(v15[2]) = 8;
  icu::units::getAllConversionRates((uint64_t)v15, a4);
  if (*a4 <= 0)
  {
    double v9 = icu::MeasureUnitImpl::forMeasureUnit(a2, (const icu::MeasureUnit *)&v16, (icu::MeasureUnitImpl *)a4, v8);
    int v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0xB8, v10);
    char v13 = v12;
    if (v12) {
      icu::units::ComplexUnitsConverter::ComplexUnitsConverter(v12, v9, v15, a4);
    }
    sub_18C9861FC((void **)(a1 + 32), v13, a4);
  }
  sub_18C9864F0((uint64_t)v15);
  if (BYTE4(v21)) {
    uprv_free(v20);
  }
  sub_18C885AFC((uint64_t)&v16 + 8);
  if (BYTE12(v27[4])) {
    uprv_free(*(void **)&v27[4]);
  }
  sub_18C885AFC((uint64_t)&v25 + 8);
  return a1;
}

void sub_18C9861FC(void **a1, void *a2, int *a3)
{
  if (*a3 <= 0)
  {
    __int16 v6 = *a1;
    if (*a1)
    {
      sub_18C986650((uint64_t)v6 + 96);
      sub_18C9866D8((uint64_t)v6 + 8);
      icu::UMemory::operator delete(v6);
    }
    *a1 = a2;
    if (!a2) {
      *a3 = 7;
    }
  }
  else if (a2)
  {
    sub_18C986650((uint64_t)a2 + 96);
    sub_18C9866D8((uint64_t)a2 + 8);
    icu::UMemory::operator delete(a2);
  }
}

uint64_t icu::number::impl::UnitConversionHandler::processQuantity(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40));
  if (*a4 <= 0)
  {
    icu::number::impl::DecimalQuantity::roundToInfinity(a2);
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    uint64_t v9 = *(void *)(a1 + 32);
    double v10 = icu::number::impl::DecimalQuantity::toDouble(a2);
    icu::units::ComplexUnitsConverter::convert(v9, a3 + 104, a4, (uint64_t)v11, v10);
    icu::MeasureUnit::operator=(a3 + 416, a1 + 8);
    if (*a4 <= 0) {
      sub_18C985CD0((unsigned int *)v11, (void **)a2, a3, *a4);
    }
    return sub_18C80BF60((uint64_t)v11);
  }
  return result;
}

void *sub_18C986388(void *a1)
{
  *a1 = &unk_1EDA4FDC8;
  sub_18C9865B0((uint64_t)(a1 + 12));
  sub_18C80BF60((uint64_t)(a1 + 1));
  return a1;
}

void sub_18C9863D8(void *a1)
{
  *a1 = &unk_1EDA4FDC8;
  sub_18C9865B0((uint64_t)(a1 + 12));
  sub_18C80BF60((uint64_t)(a1 + 1));

  icu::UMemory::operator delete(a1);
}

uint64_t sub_18C986438(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA4FDF0;
  int v2 = (icu::MeasureUnit *)(a1 + 8);
  sub_18C986778((void **)(a1 + 32));
  icu::MeasureUnit::~MeasureUnit(v2);
  return a1;
}

void sub_18C98648C(void **a1)
{
  *a1 = &unk_1EDA4FDF0;
  int v2 = (icu::MeasureUnit *)(a1 + 1);
  sub_18C986778(a1 + 4);
  icu::MeasureUnit::~MeasureUnit(v2);

  icu::UMemory::operator delete(a1);
}

uint64_t sub_18C9864F0(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 276)) {
          uprv_free(*(void **)(v4 + 264));
        }
        if (*(unsigned char *)(v4 + 212)) {
          uprv_free(*(void **)(v4 + 200));
        }
        if (*(unsigned char *)(v4 + 148)) {
          uprv_free(*(void **)(v4 + 136));
        }
        if (*(unsigned char *)(v4 + 84)) {
          uprv_free(*(void **)(v4 + 72));
        }
        if (*(unsigned char *)(v4 + 20)) {
          uprv_free(*(void **)(v4 + 8));
        }
        icu::UMemory::operator delete((void *)v4);
        int v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(unsigned char *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_18C9865B0(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 372)) {
          uprv_free(*(void **)(v4 + 360));
        }
        sub_18C885AFC(v4 + 272);
        icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(v4 + 200));
        sub_18C986650(v4 + 104);
        sub_18C9866D8(v4 + 16);
        icu::UMemory::operator delete((void *)v4);
        int v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(unsigned char *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_18C986650(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 116)) {
          uprv_free(*(void **)(v4 + 104));
        }
        sub_18C885AFC(v4 + 16);
        icu::UMemory::operator delete((void *)v4);
        int v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(unsigned char *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_18C9866D8(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 284)) {
          uprv_free(*(void **)(v4 + 272));
        }
        sub_18C885AFC(v4 + 184);
        if (*(unsigned char *)(v4 + 124)) {
          uprv_free(*(void **)(v4 + 112));
        }
        sub_18C885AFC(v4 + 24);
        icu::UMemory::operator delete((void *)v4);
        int v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(unsigned char *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

void **sub_18C986778(void **a1)
{
  int v2 = *a1;
  if (*a1)
  {
    sub_18C986650((uint64_t)v2 + 96);
    sub_18C9866D8((uint64_t)v2 + 8);
    icu::UMemory::operator delete(v2);
  }
  return a1;
}

const UChar *sub_18C9867BC(uint64_t a1, const char *a2, int a3, int *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = "currencyFormat";
  uint64_t v8 = "decimalFormat";
  switch(a3)
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_4;
    case 2:
      uint64_t v7 = "accountingFormat";
      goto LABEL_4;
    case 3:
      uint64_t v7 = "percentFormat";
LABEL_4:
      memset(v23, 0, sizeof(v23));
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      *(_OWORD *)long long __dst = 0u;
      long long v16 = 0u;
      if (!ulocimp_setRegionToSupplementalRegion(*(char **)(a1 + 40), __dst, 157)) {
        strcpy(__dst, *(const char **)(a1 + 40));
      }
      uint64_t v10 = ures_open(0, __dst, a4);
      break;
    case 4:
      uint64_t v8 = "scientificFormat";
LABEL_9:
      uint64_t v10 = ures_openWithCountryFallback(0, *(char **)(a1 + 40), 0, a4);
      uint64_t v7 = v8;
      break;
    default:
      abort();
  }
  if (*a4 > 0) {
    goto LABEL_12;
  }
  *(_DWORD *)long long __dst = 0;
  uint64_t v11 = sub_18C9869C4(v10, a2, v7, (UErrorCode *)a4, (UErrorCode *)__dst);
  if (*a4 > 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v11;
  if (*(int *)__dst >= 1 && strcmp("latn", a2))
  {
    *(_DWORD *)long long __dst = 0;
    unsigned int v14 = sub_18C9869C4(v10, "latn", v7, (UErrorCode *)a4, (UErrorCode *)__dst);
    if (*a4 > 0)
    {
LABEL_12:
      uint64_t v12 = (const UChar *)&unk_18CAA19F2;
      goto LABEL_13;
    }
    uint64_t v12 = v14;
  }
LABEL_13:
  if (v10) {
    ures_close(v10);
  }
  return v12;
}

const UChar *sub_18C9869C4(uint64_t a1, const char *a2, const char *a3, UErrorCode *a4, UErrorCode *a5)
{
  unsigned char v20[8] = *(void **)MEMORY[0x1E4F143B8];
  memset(&v20[1], 0, 56);
  v20[0] = (char *)&v20[1] + 5;
  LODWORD(v20[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v18, "NumberElements/");
  icu::CharString::append((icu::CharString *)v20, v18, v19, a4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v16, a2);
  icu::CharString::append((icu::CharString *)v20, v16, v17, a4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v14, "/patterns/");
  icu::CharString::append((icu::CharString *)v20, v14, v15, a4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v12, a3);
  icu::CharString::append((icu::CharString *)v20, v12, v13, a4);
  if (*(int *)a4 <= 0) {
    StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(a1, (char *)v20[0], 0, a5);
  }
  else {
    StringByKeyWithFallbacuint64_t k = (const UChar *)&unk_18CAA19F2;
  }
  if (BYTE4(v20[1])) {
    uprv_free(v20[0]);
  }
  return StringByKeyWithFallback;
}

uint64_t sub_18C986B2C(uint64_t a1)
{
  int v7 = 0;
  uint64_t v1 = ures_open(0, *(char **)(a1 + 40), &v7);
  int v6 = 0;
  StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v1, "NumberElements/minimumGroupingDigits", &v6, (UErrorCode *)&v7);
  if (v7 > 0 || v6 != 1)
  {
    __int16 v4 = 1;
    if (!v1) {
      return v4;
    }
    goto LABEL_8;
  }
  __int16 v4 = *StringByKeyWithFallback - 48;
  if (v1) {
LABEL_8:
  }
    ures_close(v1);
  return v4;
}

icu::number::impl::DecNum *icu::number::impl::DecNum::DecNum(icu::number::impl::DecNum *this)
{
  *(void *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 34;
  *((unsigned char *)this + 12) = 0;
  int v2 = (char *)this + 64;
  uprv_decContextDefault((uint64_t)this + 64, 0);
  uprv_decContextSetRounding((uint64_t)v2, 3);
  *((_DWORD *)this + 20) = 0;
  return this;
}

{
  char *v2;

  *(void *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 34;
  *((unsigned char *)this + 12) = 0;
  int v2 = (char *)this + 64;
  uprv_decContextDefault((uint64_t)this + 64, 0);
  uprv_decContextSetRounding((uint64_t)v2, 3);
  *((_DWORD *)this + 20) = 0;
  return this;
}

icu::number::impl::DecNum *icu::number::impl::DecNum::DecNum(icu::number::impl::DecNum *this, uint64_t **a2, UErrorCode *a3)
{
  BOOL v5 = (char *)this + 16;
  *(void *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 34;
  *((unsigned char *)this + 12) = 0;
  long long v6 = *(_OWORD *)((char *)a2 + 76);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *(_OWORD *)((char *)this + 76) = v6;
  uint64_t v7 = *((unsigned int *)this + 16);
  if ((int)v7 >= 35)
  {
    uint64_t v9 = (char *)uprv_malloc(v7 + 12);
    if (!v9)
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      return this;
    }
    BOOL v5 = v9;
    uint64_t v10 = *(void **)this;
    int v11 = *(_DWORD *)(*(void *)this + 8);
    *(void *)BOOL v5 = **(void **)this;
    *((_DWORD *)v5 + 2) = v11;
    if (*((unsigned char *)this + 12)) {
      uprv_free(v10);
    }
    *(void *)this = v5;
    *((_DWORD *)this + 2) = v7;
    *((unsigned char *)this + 12) = 1;
  }
  uint64_t v12 = **a2;
  *((_DWORD *)v5 + 2) = *((_DWORD *)*a2 + 2);
  *(void *)BOOL v5 = v12;
  memcpy(v5 + 12, (char *)*a2 + 12, *((int *)a2 + 2));
  return this;
}

void icu::number::impl::DecNum::setTo(icu::number::impl::DecNum *a1, const char *a2, int a3, UErrorCode *a4)
{
  unsigned char v7[8] = *(char **)MEMORY[0x1E4F143B8];
  memset(&v7[1], 0, 56);
  v7[0] = (char *)&v7[1] + 5;
  LODWORD(v7[1]) = 40;
  icu::CharString::append((icu::CharString *)v7, a2, a3, a4);
  if (*(int *)a4 <= 0) {
    icu::number::impl::DecNum::_setTo(a1, v7[0], a3, a4);
  }
  if (BYTE4(v7[1])) {
    uprv_free(v7[0]);
  }
}

uint64_t icu::number::impl::DecNum::_setTo(icu::number::impl::DecNum *this, char *a2, int a3, UErrorCode *a4)
{
  if (a3 < 35)
  {
    int v7 = 34;
  }
  else
  {
    int v7 = a3;
    uint64_t v8 = uprv_malloc(a3 + 12);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void **)this;
      int v11 = *(_DWORD *)(*(void *)this + 8);
      *(void *)uint64_t v9 = **(void **)this;
      void v9[2] = v11;
      if (*((unsigned char *)this + 12)) {
        uprv_free(v10);
      }
      *(void *)this = v9;
      *((_DWORD *)this + 2) = v7;
      *((unsigned char *)this + 12) = 1;
    }
  }
  *((_DWORD *)this + 16) = v7;
  uint64_t result = uprv_decNumberFromString(*(void *)this, (unsigned __int8 *)a2, (uint64_t)this + 64);
  int v13 = *((_DWORD *)this + 21);
  if (v13)
  {
    UErrorCode v14 = U_DECIMAL_NUMBER_SYNTAX_ERROR;
  }
  else
  {
    if (!v13) {
      return result;
    }
    UErrorCode v14 = U_UNSUPPORTED_ERROR;
  }
  *a4 = v14;
  return result;
}

uint64_t icu::number::impl::DecNum::setTo(icu::number::impl::DecNum *this, char *__s, UErrorCode *a3)
{
  int v6 = strlen(__s);

  return icu::number::impl::DecNum::_setTo(this, __s, v6, a3);
}

icu::number::impl::DecNum *icu::number::impl::DecNum::setTo(icu::number::impl::DecNum *this, double a2, UErrorCode *a3)
{
  char v4 = HIBYTE(a2);
  int v11[2] = *MEMORY[0x1E4F143B8];
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    BOOL v5 = this;
    *(void *)uint64_t v10 = 0;
    v11[0] = 0;
    *(void *)((char *)v11 + 7) = 0;
    BOOL v9 = 0;
    int v7 = 0;
    int v8 = 0;
    icu::double_conversion::DoubleToStringConverter::DoubleToAscii(0, 0, v10, 0x17u, &v9, &v8, &v7, a2);
    this = (icu::number::impl::DecNum *)icu::number::impl::DecNum::_setTo(v5, v10, v8, a3);
    uint64_t v6 = *(void *)v5;
    *(_DWORD *)(v6 + 4) = v7 - v8 + *(_DWORD *)(*(void *)v5 + 4);
    *(unsigned char *)(v6 + 8) |= v4 & 0x80;
  }
  else
  {
    *a3 = U_UNSUPPORTED_ERROR;
  }
  return this;
}

void icu::number::impl::DecNum::setTo(icu::number::impl::DecNum *this, char *a2, signed int a3, int a4, int a5, UErrorCode *a6)
{
  if (a3 < 35)
  {
    int v13 = 34;
  }
  else
  {
    uint64_t v12 = uprv_malloc(a3 + 12);
    int v13 = a3;
    if (v12)
    {
      UErrorCode v14 = v12;
      int v15 = *(void **)this;
      int v16 = *(_DWORD *)(*(void *)this + 8);
      *(void *)UErrorCode v14 = **(void **)this;
      _OWORD v14[2] = v16;
      if (*((unsigned char *)this + 12)) {
        uprv_free(v15);
      }
      *(void *)this = v14;
      *((_DWORD *)this + 2) = a3;
      *((unsigned char *)this + 12) = 1;
      int v13 = a3;
    }
  }
  *((_DWORD *)this + 16) = v13;
  if ((a3 - 1000000000) < 0xC4653601)
  {
    UErrorCode v17 = U_UNSUPPORTED_ERROR;
LABEL_16:
    *a6 = v17;
    return;
  }
  UErrorCode v17 = U_UNSUPPORTED_ERROR;
  if (1000000000 - a3 < a4 || -999999998 - a3 > a4) {
    goto LABEL_16;
  }
  uint64_t v18 = *(void *)this;
  *(_DWORD *)uint64_t v18 = a3;
  *(_DWORD *)(v18 + 4) = a4;
  if (a5) {
    char v19 = 0x80;
  }
  else {
    char v19 = 0;
  }
  *(unsigned char *)(v18 + 8) = v19;
  uprv_decNumberSetBCD((unsigned int *)v18, a2, a3);
  if (*((_DWORD *)this + 21))
  {
    UErrorCode v17 = U_INTERNAL_PROGRAM_ERROR;
    goto LABEL_16;
  }
}

uint64_t icu::number::impl::DecNum::normalize(icu::number::impl::DecNum *this)
{
  return uprv_decNumberReduce(*(void *)this, *(void *)this, (int *)this + 16);
}

uint64_t icu::number::impl::DecNum::multiplyBy(icu::number::impl::DecNum *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  uint64_t result = uprv_decNumberMultiply(*(void *)this, *(void *)this, *(void *)a2, (int *)this + 16);
  if (*((_DWORD *)this + 21)) {
    *a3 = U_INTERNAL_PROGRAM_ERROR;
  }
  return result;
}

uint64_t icu::number::impl::DecNum::divideBy(icu::number::impl::DecNum *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  uint64_t result = uprv_decNumberDivide(*(void *)this, *(void *)this, *(void *)a2, (int *)this + 16);
  if (*((_DWORD *)this + 21)) {
    BOOL v6 = (*((_DWORD *)this + 21) & 0x20) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    *a3 = U_INTERNAL_PROGRAM_ERROR;
  }
  return result;
}

uint64_t icu::number::impl::DecNum::isNegative(icu::number::impl::DecNum *this)
{
  return *(unsigned __int8 *)(*(void *)this + 8) >> 7;
}

BOOL icu::number::impl::DecNum::isZero(icu::number::impl::DecNum *this)
{
  uint64_t v1 = *(void *)this;
  return !*(unsigned char *)(*(void *)this + 9) && *(_DWORD *)v1 == 1 && (*(unsigned char *)(v1 + 8) & 0x70) == 0;
}

BOOL icu::number::impl::DecNum::isSpecial(icu::number::impl::DecNum *this)
{
  return (*(unsigned char *)(*(void *)this + 8) & 0x70) != 0;
}

uint64_t icu::number::impl::DecNum::isInfinity(icu::number::impl::DecNum *this)
{
  return (*(unsigned __int8 *)(*(void *)this + 8) >> 6) & 1;
}

BOOL icu::number::impl::DecNum::isNaN(icu::number::impl::DecNum *this)
{
  return (*(unsigned char *)(*(void *)this + 8) & 0x30) != 0;
}

void icu::number::impl::DecNum::toString(icu::number::impl::DecNum *this, icu::ByteSink *a2, UErrorCode *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v4 = *a3;
  if (v4 <= 0)
  {
    int v7 = **(_DWORD **)this + 14;
    long long v10 = 0u;
    long long v11 = 0u;
    *(_OWORD *)long long __s = 0u;
    sub_18C966F74((uint64_t)__s, v7, v4);
    if (*(int *)a3 <= 0)
    {
      uprv_decNumberToString(*(void *)this, __s[0]);
      size_t v8 = strlen(__s[0]);
      (*(void (**)(icu::ByteSink *, char *, size_t))(*(void *)a2 + 16))(a2, __s[0], v8);
    }
    if (BYTE4(__s[1])) {
      uprv_free(__s[0]);
    }
  }
}

void *icu::NumberFormat::getStaticClassID(icu::NumberFormat *this)
{
  return &unk_1E9192510;
}

double icu::NumberFormat::NumberFormat(icu::NumberFormat *this)
{
  uint64_t v1 = icu::Format::Format((uint64_t)this);
  *(void *)uint64_t v1 = &unk_1EDA4FE88;
  *(unsigned char *)(v1 + 322) = 1;
  *(void *)&double result = 0x177359400;
  *(_OWORD *)(v1 + 324) = xmmword_18CA95320;
  *(_DWORD *)(v1 + 3icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 0;
  *(_DWORD *)(v1 + 352) = 256;
  return result;
}

void icu::SharedNumberFormat::~SharedNumberFormat(icu::SharedNumberFormat *this)
{
  *(void *)this = &unk_1EDA4FFC8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  icu::SharedObject::~SharedObject(this);
}

{
  void *v1;
  uint64_t vars8;

  icu::SharedNumberFormat::~SharedNumberFormat(this);

  icu::UMemory::operator delete(v1);
}

uint64_t icu::NumberFormat::NumberFormat(icu::NumberFormat *this, const icu::NumberFormat *a2)
{
  uint64_t v3 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *uint64_t v3 = &unk_1EDA4FE88;

  return icu::NumberFormat::operator=((uint64_t)v3, (uint64_t)a2);
}

uint64_t icu::NumberFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::Format::operator=(a1, a2);
    *(unsigned char *)(a1 + 322) = *(unsigned char *)(a2 + 322);
    *(_OWORD *)(a1 + 324) = *(_OWORD *)(a2 + 324);
    *(unsigned char *)(a1 + 3icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = *(unsigned char *)(a2 + 340);
    u_strncpy((UChar *)(a1 + 342), (const UChar *)(a2 + 342), 3);
    *(_WORD *)(a1 + 348) = 0;
    *(unsigned char *)(a1 + 341) = *(unsigned char *)(a2 + 341);
    *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  }
  return a1;
}

BOOL icu::NumberFormat::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL result = icu::Format::operator==((void *)a1, (void *)a2);
  if (result) {
    return *(_DWORD *)(a1 + 324) == *(_DWORD *)(a2 + 324)
  }
        && *(_DWORD *)(a1 + 328) == *(_DWORD *)(a2 + 328)
        && *(_DWORD *)(a1 + 332) == *(_DWORD *)(a2 + 332)
        && *(_DWORD *)(a1 + 336) == *(_DWORD *)(a2 + 336)
        && *(unsigned __int8 *)(a1 + 322) == *(unsigned __int8 *)(a2 + 322)
        && *(unsigned __int8 *)(a1 + 340) == *(unsigned __int8 *)(a2 + 340)
        && !u_strcmp((const UChar *)(a1 + 342), (const UChar *)(a2 + 342))
        && *(unsigned __int8 *)(a1 + 341) == *(unsigned __int8 *)(a2 + 341)
        && *(_DWORD *)(a1 + 352) == *(_DWORD *)(a2 + 352);
  return result;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  BOOL result = a3;
  if (*(int *)a5 <= 0) {
    *a5 = U_UNSUPPORTED_ERROR;
  }
  return result;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, int a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  BOOL result = a3;
  if (*(int *)a5 <= 0) {
    *a5 = U_UNSUPPORTED_ERROR;
  }
  return result;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  BOOL result = a3;
  if (*(int *)a5 <= 0) {
    *a5 = U_UNSUPPORTED_ERROR;
  }
  return result;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0) {
    return (icu::UnicodeString *)(*(uint64_t (**)(icu::NumberFormat *, icu::UnicodeString *, icu::FieldPosition *, double))(*(void *)this + 64))(this, a3, a4, a2);
  }
  else {
    return a3;
  }
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0) {
    return (icu::UnicodeString *)(*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, icu::FieldPosition *))(*(void *)this + 88))(this, a2, a3, a4);
  }
  else {
    return a3;
  }
}

{
  if (*(int *)a5 <= 0) {
    return (icu::UnicodeString *)(*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, icu::FieldPosition *))(*(void *)this + 112))(this, a2, a3, a4);
  }
  else {
    return a3;
  }
}

uint64_t icu::NumberFormat::format(uint64_t a1, const char *a2, int a3, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  icu::Formattable::setDecimalNumber((icu::Formattable *)v13, a2, a3, a6);
  (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 48))(a1, v13, a4, a5, a6);
  icu::Formattable::~Formattable((icu::Formattable *)v13);
  return a4;
}

uint64_t sub_18C98781C(uint64_t a1, int a2, icu::Formattable *this)
{
  *(void *)a1 = this;
  *(unsigned char *)(a1 + 16) = 0;
  Object = (const void *)icu::Formattable::getObject(this);
  if (Object
  {
    BOOL v6 = v5;
    uint64_t Currency = icu::CurrencyAmount::getCurrency(v5);
    u_strcpy((UChar *)(a1 + 8), (const UChar *)(Currency + 20));
    *(void *)a1 = (char *)v6 + 8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(_WORD *)(a1 + 8) = 0;
  }
  return a1;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, const icu::number::impl::DecimalQuantity *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    double v9 = icu::number::impl::DecimalQuantity::toDouble(a2);
    (*(void (**)(icu::NumberFormat *, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *, double))(*(void *)this + 80))(this, a3, a4, a5, v9);
  }
  return a3;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, const icu::number::impl::DecimalQuantity *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    double v9 = icu::number::impl::DecimalQuantity::toDouble(a2);
    (*(void (**)(icu::NumberFormat *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *, double))(*(void *)this + 72))(this, a3, a4, a5, v9);
  }
  return a3;
}

icu::UnicodeString *icu::NumberFormat::format(const UChar *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    sub_18C98781C((uint64_t)&v14, (int)a2, a2);
    long long v10 = v14;
    if ((_BYTE)v16 && u_strcmp((const UChar *)&v15, this + 171))
    {
      uint64_t v11 = (*(uint64_t (**)(const UChar *))(*(void *)this + 32))(this);
      (*(void (**)(uint64_t, uint64_t *, UErrorCode *))(*(void *)v11 + 248))(v11, &v15, a5);
      a3 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, icu::Formattable *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)v11 + 40))(v11, v10, a3, a4, a5);
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    else if (icu::Formattable::isNumeric(v10) && (uint64_t v12 = *((void *)v10 + 4)) != 0)
    {
      (*(void (**)(const UChar *, uint64_t, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)this + 152))(this, v12, a3, a4, a5);
    }
    else
    {
      int Type = icu::Formattable::getType(v10);
      switch(Type)
      {
        case 5:
          (*(void (**)(const UChar *, void, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)this + 120))(this, *((void *)v10 + 1), a3, a4, a5);
          break;
        case 2:
          (*(void (**)(const UChar *, void, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)this + 96))(this, *((unsigned int *)v10 + 2), a3, a4, a5);
          break;
        case 1:
          (*(void (**)(const UChar *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *, double))(*(void *)this + 72))(this, a3, a4, a5, *((double *)v10 + 1));
          break;
        default:
          *a5 = U_INVALID_FORMAT_ERROR;
          break;
      }
    }
  }
  return a3;
}

uint64_t icu::NumberFormat::getCurrency(icu::NumberFormat *this)
{
  return (uint64_t)this + 342;
}

icu::UnicodeString *icu::NumberFormat::format(const UChar *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    sub_18C98781C((uint64_t)&v14, (int)a2, a2);
    long long v10 = v14;
    if ((_BYTE)v16 && u_strcmp((const UChar *)&v15, this + 171))
    {
      uint64_t v11 = (*(uint64_t (**)(const UChar *))(*(void *)this + 32))(this);
      (*(void (**)(uint64_t, uint64_t *, UErrorCode *))(*(void *)v11 + 248))(v11, &v15, a5);
      a3 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, icu::Formattable *, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(void *)v11 + 48))(v11, v10, a3, a4, a5);
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    else if (icu::Formattable::isNumeric(v10) && (uint64_t v12 = *((void *)v10 + 4)) != 0)
    {
      (*(void (**)(const UChar *, uint64_t, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(void *)this + 144))(this, v12, a3, a4, a5);
    }
    else
    {
      int Type = icu::Formattable::getType(v10);
      switch(Type)
      {
        case 5:
          (*(void (**)(const UChar *, void, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(void *)this + 128))(this, *((void *)v10 + 1), a3, a4, a5);
          break;
        case 2:
          (*(void (**)(const UChar *, void, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(void *)this + 104))(this, *((unsigned int *)v10 + 2), a3, a4, a5);
          break;
        case 1:
          (*(void (**)(const UChar *, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *, double))(*(void *)this + 80))(this, a3, a4, a5, *((double *)v10 + 1));
          break;
        default:
          *a5 = U_INVALID_FORMAT_ERROR;
          break;
      }
    }
  }
  return a3;
}

uint64_t icu::NumberFormat::format(icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  return (*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, icu::FieldPosition *))(*(void *)this + 88))(this, a2, a3, a4);
}

uint64_t icu::NumberFormat::parseObject(icu::NumberFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  return (*(uint64_t (**)(icu::NumberFormat *, const icu::UnicodeString *, icu::Formattable *, icu::ParsePosition *))(*(void *)this + 160))(this, a2, a3, a4);
}

uint64_t icu::NumberFormat::format(icu::NumberFormat *this, double a2, icu::UnicodeString *a3)
{
  v5[2] = 0;
  v5[0] = &unk_1EDA4C7F0;
  v5[1] = 0xFFFFFFFFLL;
  uint64_t v3 = (*(uint64_t (**)(icu::NumberFormat *, icu::UnicodeString *, void *, double))(*(void *)this + 64))(this, a3, v5, a2);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v5);
  return v3;
}

uint64_t icu::NumberFormat::format(icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3)
{
  v5[2] = 0;
  v5[0] = &unk_1EDA4C7F0;
  v5[1] = 0xFFFFFFFFLL;
  uint64_t v3 = (*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, void *))(*(void *)this + 88))(this, a2, a3, v5);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v5);
  return v3;
}

{
  uint64_t v3;
  void v5[3];

  v5[2] = 0;
  v5[0] = &unk_1EDA4C7F0;
  v5[1] = 0xFFFFFFFFLL;
  uint64_t v3 = (*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, void *))(*(void *)this + 112))(this, a2, a3, v5);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v5);
  return v3;
}

void icu::NumberFormat::parse(icu::NumberFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    BOOL v5 = &unk_1EDA44670;
    unint64_t v6 = 0xFFFFFFFF00000000;
    (*(void (**)(icu::NumberFormat *, const icu::UnicodeString *, icu::Formattable *, void **))(*(void *)this + 160))(this, a2, a3, &v5);
    if (!v6) {
      *a4 = U_INVALID_FORMAT_ERROR;
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v5);
  }
}

uint64_t *icu::NumberFormat::parseCurrency(icu::NumberFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  memset(v14, 0, sizeof(v14));
  icu::Formattable::Formattable((icu::Formattable *)v14);
  int v6 = *((_DWORD *)a3 + 2);
  (*(void (**)(icu::NumberFormat *, const icu::UnicodeString *, _OWORD *, icu::ParsePosition *))(*(void *)this + 160))(this, a2, v14, a3);
  if (*((_DWORD *)a3 + 2) != v6)
  {
    uint64_t v13 = 0;
    int v12 = 0;
    (*(void (**)(icu::NumberFormat *, uint64_t *, int *))(*(void *)this + 296))(this, &v13, &v12);
    if (v12 <= 0)
    {
      long long v10 = icu::UMemory::operator new((uint64_t *)v12, (icu::UMemory *)0x80, v7);
      if (v10)
      {
        size_t v8 = v10;
        uint64_t v11 = &v13;
        icu::CurrencyAmount::CurrencyAmount(v10, v14, &v11, &v12);
        if (v12 < 1) {
          goto LABEL_4;
        }
        *((_DWORD *)a3 + 2) = v6;
        (*(void (**)(uint64_t *))(*v8 + 8))(v8);
      }
      else
      {
        *((_DWORD *)a3 + 2) = v6;
      }
    }
  }
  size_t v8 = 0;
LABEL_4:
  icu::Formattable::~Formattable((icu::Formattable *)v14);
  return v8;
}

uint64_t icu::NumberFormat::setParseIntegerOnly(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = a2;
  return this;
}

uint64_t icu::NumberFormat::setLenient(uint64_t this, char a2)
{
  *(unsigned char *)(this + 341) = a2;
  return this;
}

icu::Format *icu::NumberFormat::createInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  uint64_t Default = icu::Locale::getDefault(this);

  return icu::NumberFormat::createInstance((char **)Default, 1u, (UErrorCode *)this);
}

icu::Format *icu::NumberFormat::createInstance(char **a1, unsigned int a2, UErrorCode *this)
{
  if (a2 == 1)
  {
    if (*(int *)this > 0) {
      return 0;
    }
    uint64_t v7 = 0;
    sub_18C9889F4((uint64_t)a1, (UErrorCode *)&v7, this);
    uint64_t v4 = 0;
    if (*(int *)this <= 0)
    {
      uint64_t v6 = v7;
      uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(v7 + 24) + 32))(*(void *)(v7 + 24));
      icu::SharedObject::removeRef(v6);
      if (!v4) {
        *this = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    return (icu::Format *)v4;
  }
  else
  {
    return icu::NumberFormat::internalCreateInstance(a1, a2, this);
  }
}

icu::Format *icu::NumberFormat::createInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::createInstance(this, 1u, a2);
}

icu::Format *icu::NumberFormat::createCurrencyInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  uint64_t Default = icu::Locale::getDefault(this);

  return icu::NumberFormat::internalCreateInstance((char **)Default, 2u, (UErrorCode *)this);
}

icu::Format *icu::NumberFormat::createCurrencyInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::internalCreateInstance(this, 2u, a2);
}

icu::Format *icu::NumberFormat::createPercentInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  uint64_t Default = icu::Locale::getDefault(this);

  return icu::NumberFormat::makeInstance((char **)Default, 3u, 0, (UErrorCode *)this);
}

icu::Format *icu::NumberFormat::createPercentInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::makeInstance(this, 3u, 0, a2);
}

icu::Format *icu::NumberFormat::createScientificInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  uint64_t Default = icu::Locale::getDefault(this);

  return icu::NumberFormat::makeInstance((char **)Default, 4u, 0, (UErrorCode *)this);
}

icu::Format *icu::NumberFormat::createScientificInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::makeInstance(this, 4u, 0, a2);
}

icu::Format *icu::NumberFormat::internalCreateInstance(char **this, unsigned int a2, UErrorCode *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2 == 2)
  {
    *(_OWORD *)double v9 = 0u;
    long long v10 = 0u;
    UErrorCode v8 = U_ZERO_ERROR;
    int KeywordValue = icu::Locale::getKeywordValue(this, "cf", v9, 32, &v8);
    a2 = 2;
    if (v8 <= U_ZERO_ERROR && KeywordValue >= 1)
    {
      if (*(void *)v9 == 0x746E756F636361) {
        a2 = 12;
      }
      else {
        a2 = 2;
      }
    }
  }
  return icu::NumberFormat::makeInstance(this, a2, 0, a3);
}

icu::Format *icu::NumberFormat::makeInstance(char **a1, unsigned int a2, UErrorCode *a3)
{
  return icu::NumberFormat::makeInstance(a1, a2, 0, a3);
}

uint64_t icu::NumberFormat::createSharedInstance(uint64_t a1, int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0) {
    return 0;
  }
  if (a2 == 1)
  {
    uint64_t v4 = 0;
    sub_18C9889F4(a1, (UErrorCode *)&v4, a3);
    return v4;
  }
  else
  {
    uint64_t result = 0;
    *a3 = U_UNSUPPORTED_ERROR;
  }
  return result;
}

uint64_t icu::NumberFormat::isGroupingUsed(icu::NumberFormat *this)
{
  return *((char *)this + 322);
}

uint64_t icu::NumberFormat::setGroupingUsed(uint64_t this, char a2)
{
  *(unsigned char *)(this + 322) = a2;
  return this;
}

uint64_t icu::NumberFormat::getMaximumIntegerDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 81);
}

uint64_t icu::NumberFormat::setMaximumIntegerDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3 = uprv_min(a2, 2000000000);
  uint64_t result = uprv_max(0, v3);
  *((_DWORD *)this + 81) = result;
  if (*((_DWORD *)this + 82) > (int)result) {
    *((_DWORD *)this + 82) = result;
  }
  return result;
}

uint64_t icu::NumberFormat::getMinimumIntegerDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 82);
}

uint64_t icu::NumberFormat::setMinimumIntegerDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3 = uprv_min(a2, 127);
  uint64_t result = uprv_max(0, v3);
  *((_DWORD *)this + 82) = result;
  if ((int)result > *((_DWORD *)this + 81)) {
    *((_DWORD *)this + 81) = result;
  }
  return result;
}

uint64_t icu::NumberFormat::getMaximumFractionDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 83);
}

uint64_t icu::NumberFormat::setMaximumFractionDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3 = uprv_min(a2, 2000000000);
  uint64_t result = uprv_max(0, v3);
  *((_DWORD *)this + 83) = result;
  if ((int)result < *((_DWORD *)this + 84)) {
    *((_DWORD *)this + 84) = result;
  }
  return result;
}

uint64_t icu::NumberFormat::getMinimumFractionDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 84);
}

uint64_t icu::NumberFormat::setMinimumFractionDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3 = uprv_min(a2, 127);
  uint64_t result = uprv_max(0, v3);
  *((_DWORD *)this + 84) = result;
  if (*((_DWORD *)this + 83) < (int)result) {
    *((_DWORD *)this + 83) = result;
  }
  return result;
}

uint64_t icu::NumberFormat::setDateSettings(uint64_t this)
{
  *(unsigned char *)(this + 322) = 0;
  *(unsigned char *)(this + 3icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 1;
  *(_DWORD *)(this + 336) = 0;
  if ((*(_DWORD *)(this + 332) & 0x80000000) != 0) {
    *(_DWORD *)(this + 332) = 0;
  }
  return this;
}

UChar *icu::NumberFormat::setCurrency(UChar *result, const UChar *a2, int *a3)
{
  if (*a3 <= 0)
  {
    int v3 = result;
    result += 171;
    if (a2)
    {
      u_strncpy(result, a2, 3);
      uint64_t result = v3 + 174;
    }
    *uint64_t result = 0;
  }
  return result;
}

UChar *icu::NumberFormat::getEffectiveCurrency(uint64_t a1, UChar *dst, int *a3)
{
  if (*(_WORD *)(a1 + 342))
  {
    uint64_t result = u_strncpy(dst, (const UChar *)(a1 + 342), 3);
    dst[3] = 0;
  }
  else
  {
    LocaleID = (char *)icu::Format::getLocaleID(a1, 1, a3);
    if (!LocaleID) {
      LocaleID = (char *)uloc_getDefault(0);
    }
    return (UChar *)ucurr_forLocale(LocaleID, dst, 4, a3);
  }
  return result;
}

uint64_t icu::NumberFormat::setContext(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if ((a2 & 0xFFFFFF00) == 0x100) {
      *(_DWORD *)(result + 352) = a2;
    }
    else {
      *a3 = 1;
    }
  }
  return result;
}

uint64_t icu::NumberFormat::getContext(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0;
  }
  if (a2 == 1) {
    return *(unsigned int *)(a1 + 352);
  }
  uint64_t result = 0;
  *a3 = 1;
  return result;
}

uint64_t *icu::LocaleCacheKey<icu::SharedNumberFormat>::createObject(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v11 = (uint64_t *)*MEMORY[0x1E4F143B8];
  icu::Locale::Locale(v11, (icu::Locale *)v10, *(const char **)(a1 + 56), 0, 0, 0);
  uint64_t Instance = icu::NumberFormat::makeInstance(v10, 1u, 0, a3);
  icu::Locale::~Locale((icu::Locale *)v10);
  uint64_t v6 = 0;
  uint64_t v7 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v7 <= 0)
  {
    UErrorCode v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x20, v5);
    if (v8)
    {
      uint64_t v6 = v8;
      v8[1] = 0;
      _OWORD v8[2] = 0;
      *UErrorCode v8 = (uint64_t)&unk_1EDA4FFC8;
      _OWORD v8[3] = (uint64_t)Instance;
      icu::SharedObject::addRef((uint64_t)v8);
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      if (Instance) {
        (*(void (**)(icu::Format *))(*(void *)Instance + 8))(Instance);
      }
      return 0;
    }
  }
  return v6;
}

void sub_18C9889F4(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  v11[28] = *MEMORY[0x1E4F143B8];
  uint64_t Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    uint64_t v7 = (icu::SharedObject **)Instance;
    int v9 = 0;
    char v10 = 0;
    UErrorCode v8 = &unk_1EDA50020;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18C8D86FC(v7, (const icu::CacheKeyBase *)&v8, 0, (icu::SharedObject **)a2, this);
    UErrorCode v8 = &unk_1EDA50020;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }
}

unint64_t icu::NumberFormat::isStyleSupported(char a1)
{
  return (0x13D1EuLL >> a1) & 1;
}

icu::Format *icu::NumberFormat::makeInstance(char **this, unsigned int a2, UErrorCode *a3, UErrorCode *a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (*(int *)a4 > 0) {
    return 0;
  }
  if (a2 >= 0x11)
  {
    uint64_t v4 = 0;
    int v6 = 1;
LABEL_10:
    *a4 = v6;
    return v4;
  }
  if (a2 == 8) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = a2;
  }
  if (((0x13D1EuLL >> v7) & 1) == 0)
  {
    uint64_t v4 = 0;
    int v6 = 16;
    goto LABEL_10;
  }
  int v9 = (int)a3;
  if (atomic_load_explicit(dword_1EB20BB08, memory_order_acquire) != 2
    && icu::umtx_initImplPreInit(dword_1EB20BB08))
  {
    sub_18C989348();
    icu::umtx_initImplPostInit((unsigned int *)dword_1EB20BB08);
  }
  if (qword_1EB20BAB0)
  {
    unsigned int v11 = icu::Locale::hashCode((icu::Locale *)this);
    umtx_lock((atomic_ullong *)&unk_1EB20BAB8);
    uint64_t Instance = (const icu::NumberingSystem *)uhash_iget(qword_1EB20BAB0, v11);
    if (!Instance)
    {
      uint64_t Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)this, a4, v12);
      uhash_iput(qword_1EB20BAB0, v11, (uint64_t)Instance, (int *)a4);
    }
    umtx_unlock((std::mutex **)&unk_1EB20BAB8);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = icu::NumberingSystem::createInstance((icu::NumberingSystem *)this, a4, a3);
    uint64_t Instance = v14;
  }
  if (*(int *)a4 > 0)
  {
    uint64_t v4 = 0;
    goto LABEL_22;
  }
  if (!v9 || !icu::NumberingSystem::isAlgorithmic(Instance))
  {
    char v55 = 0;
    long long v75 = 0u;
    uint64_t v78 = 0;
    long long v77 = 0u;
    long long v76 = 0u;
    int v74 = &unk_1EDA47700;
    LOWORD(v75) = 2;
    uint64_t v16 = ures_open(0, this[5], (int *)a4);
    uint64_t v4 = 0;
    uint64_t v17 = *(unsigned int *)a4;
    if ((int)v17 <= 0)
    {
      uint64_t v18 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((uint64_t *)v17, (icu::UMemory *)0xB48, v15);
      uint64_t v19 = (uint64_t)v18;
      if (Instance)
      {
        if (v18) {
          icu::DecimalFormatSymbols::DecimalFormatSymbols(v18, (const icu::Locale *)this, Instance, a4);
        }
      }
      else if (v18)
      {
        icu::DecimalFormatSymbols::DecimalFormatSymbols(v18, (const icu::Locale *)this, a4);
      }
      sub_18C7F5A70((uint64_t)&v55, v19, (int *)a4);
      uint64_t v17 = *(unsigned int *)a4;
      if ((int)v17 > 0) {
        goto LABEL_63;
      }
      uint64_t Name = (const char *)icu::NumberingSystem::getName(Instance);
      unsigned int v54 = sub_18C9867BC((uint64_t)this, Name, dword_18CA95338[v7], (int *)a4);
      icu::UnicodeString::UnicodeString(v58, 1, &v54);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v74, (icu::UnicodeString *)v58);
      icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v58);
      void v50[2] = v54;
      uint64_t v17 = *(unsigned int *)a4;
      if ((int)v17 > 0) {
        goto LABEL_63;
      }
      if (((1 << v7) & 0x13404) != 0)
      {
        uint64_t v22 = (uint64_t)v55[310];
        if (v22)
        {
          uint64_t v23 = u_strlen(v55[310]);
          sub_18C9893DC((uint64_t)&v74, v22, v23);
        }
      }
      if (icu::NumberingSystem::isAlgorithmic(Instance))
      {
        long long v70 = 0u;
        uint64_t v73 = 0;
        long long v72 = 0u;
        long long v71 = 0u;
        int v69 = (UChar *)&unk_1EDA47700;
        LOWORD(v70) = 2;
        long long v65 = 0u;
        uint64_t v68 = 0;
        long long v67 = 0u;
        long long v66 = 0u;
        unsigned int v64 = &unk_1EDA47700;
        LOWORD(v65) = 2;
        long long v60 = 0u;
        uint64_t v63 = 0;
        long long v62 = 0u;
        long long v61 = 0u;
        int v59 = (UChar *)&unk_1EDA47700;
        LOWORD(v60) = 2;
        memset(v58, 0, 224);
        icu::Locale::Locale((icu::Locale *)v58);
        (*(void (**)(_OWORD *__return_ptr, const icu::NumberingSystem *))(*(void *)Instance + 24))(v56, Instance);
        icu::UnicodeString::copyFrom(&v69, (UChar **)v56, 0);
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v56);
        if ((v70 & 0x8000u) == 0) {
          int32_t v27 = (unsigned __int16)v70 >> 5;
        }
        else {
          int32_t v27 = DWORD1(v70);
        }
        int32_t v28 = icu::UnicodeString::doIndexOf((uint64_t)&v69, 0x2Fu, 0, v27);
        if ((v70 & 0x8000u) == 0) {
          int32_t v29 = (unsigned __int16)v70 >> 5;
        }
        else {
          int32_t v29 = DWORD1(v70);
        }
        int32_t IndexOf = icu::UnicodeString::doLastIndexOf((uint64_t)&v69, 0x2Fu, 0, v29);
        if (IndexOf <= v28)
        {
          icu::Locale::operator=((icu::Locale *)v58, (uint64_t)this);
          icu::UnicodeString::copyFrom(&v59, &v69, 0);
          uint64_t v33 = 3;
        }
        else
        {
          int32_t v31 = IndexOf;
          memset(&v57[1], 0, 56);
          v57[0] = (icu::Locale *)((char *)&v57[1] + 5);
          LODWORD(v57[1]) = 40;
          icu::UnicodeString::tempSubString((icu::UnicodeString *)&v69, 0, v28, (icu::UnicodeString *)v56);
          icu::CharString::appendInvariantChars((icu::CharString *)v57, (const icu::UnicodeString *)v56, a4);
          icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v56);
          sub_18C9215F8((uint64_t)&v64, (const icu::UnicodeString *)&v69, v28 + 1, (v31 + ~v28));
          sub_18C98944C((uint64_t)&v59, (uint64_t)&v69, v31 + 1);
          icu::Locale::createFromName(v57[0], (uint64_t)v56);
          icu::Locale::operator=((uint64_t)v58, (uint64_t)v56);
          icu::Locale::~Locale((icu::Locale *)v56);
          memset(v56, 0, 64);
          unsigned int v53 = L"SpelloutRules";
          icu::UnicodeString::UnicodeString(v56, 1, &v53);
          v50[1] = v53;
          if (sub_18C98950C((uint64_t)&v64, (uint64_t)v56)) {
            uint64_t v33 = 3;
          }
          else {
            uint64_t v33 = 0;
          }
          icu::UnicodeString::~UnicodeString((void *)3, (icu::UnicodeString *)v56);
          long long v35 = (uint64_t *)BYTE4(v57[1]);
          if (BYTE4(v57[1])) {
            uprv_free(v57[0]);
          }
        }
        int v39 = icu::UMemory::operator new(v35, (icu::UMemory *)0x2F0, v34);
        uint64_t v4 = (icu::Format *)v39;
        if (!v39)
        {
          *a4 = U_MEMORY_ALLOCATION_ERROR;
          icu::Locale::~Locale((icu::Locale *)v58);
          icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v59);
          icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v64);
          icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v69);
          goto LABEL_64;
        }
        uint64_t v40 = icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v39, v33, v58, a4);
        (*(void (**)(uint64_t, UChar **, UErrorCode *))(*(void *)v4 + 384))(v40, &v59, a4);
        icu::Locale::~Locale((icu::Locale *)v58);
        icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v59);
        icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v64);
        icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v69);
      }
      else
      {
        if (v7 == 10)
        {
          int v52 = &unk_18CA9537C;
          icu::UnicodeString::UnicodeString(v58, 1, &v52);
          int32_t v51 = &unk_18CA95380;
          icu::UnicodeString::UnicodeString(v56, 1, &v51);
          sub_18C8FF200((uint64_t)&v74, (icu::UnicodeString *)v58, (icu::UnicodeString *)v56);
          icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v56);
          v50[0] = v51;
          icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)v58);
          int v49 = v52;
          long long v25 = (uint64_t *)&v49;
        }
        long long v37 = (icu::DecimalFormatSymbols *)v55;
        uint64_t v38 = (icu::DecimalFormat *)icu::UMemory::operator new(v25, (icu::UMemory *)0x170, v24);
        uint64_t v4 = v38;
        if (!v38)
        {
          uint64_t v17 = 7;
          *a4 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_64;
        }
        icu::DecimalFormat::DecimalFormat(v38, (const icu::UnicodeString *)&v74, v37, v7, a4);
        char v55 = 0;
        if (*(int *)a4 > 0) {
          goto LABEL_62;
        }
        if (v7 == 13)
        {
          icu::DecimalFormat::setCurrencyUsage(v4, 1, a4);
          if (*(int *)a4 >= 1) {
            goto LABEL_62;
          }
        }
      }
      LocaleByint Type = (const char *)ures_getLocaleByType(v16, 1, (int *)a4);
      int v45 = (const char *)ures_getLocaleByType(v16, 0, (int *)a4);
      icu::Format::setLocaleIDs(v4, LocaleByType, v45);
      uint64_t v17 = *(unsigned int *)a4;
      if ((int)v17 >= 1)
      {
LABEL_62:
        (*(void (**)(icu::Format *))(*(void *)v4 + 8))(v4);
LABEL_63:
        uint64_t v4 = 0;
      }
    }
LABEL_64:
    if (v16) {
      ures_close(v16);
    }
    icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v74);
    if (v55) {
      (*((void (**)(const UChar **))*v55 + 1))(v55);
    }
    goto LABEL_22;
  }
  uint64_t v4 = 0;
  *a4 = U_UNSUPPORTED_ERROR;
LABEL_22:
  if (v14) {
    (*(void (**)(icu::NumberingSystem *))(*(void *)v14 + 8))(v14);
  }
  return v4;
}

int32x2_t *sub_18C989348()
{
  sub_18CA0A25C(0x16u, (uint64_t)sub_18C989578);
  int v1 = 0;
  uint64_t result = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, &v1);
  qword_1EB20BAB0 = (uint64_t)result;
  if (v1 < 1) {
    return (int32x2_t *)uhash_setValueDeleter((uint64_t)result, (uint64_t)sub_18C9895B8);
  }
  qword_1EB20BAB0 = 0;
  return result;
}

uint64_t sub_18C9893DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  icu::UnicodeString::unBogus(a1);
  if (*(__int16 *)(a1 + 8) < 0) {
    uint64_t v6 = *(unsigned int *)(a1 + 12);
  }
  else {
    uint64_t v6 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }

  return icu::UnicodeString::doReplace(a1, 0, v6, a2, 0, a3);
}

uint64_t sub_18C98944C(uint64_t a1, uint64_t a2, int a3)
{
  icu::UnicodeString::unBogus(a1);
  if (a3 < 0)
  {
    int v6 = 0;
    goto LABEL_7;
  }
  if (*(__int16 *)(a2 + 8) < 0)
  {
    int v6 = *(_DWORD *)(a2 + 12);
    if (v6 >= a3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v6 = *(unsigned __int16 *)(a2 + 8) >> 5;
  if (v6 < a3) {
LABEL_7:
  }
    a3 = v6;
LABEL_8:
  if (*(__int16 *)(a1 + 8) < 0) {
    uint64_t v7 = *(unsigned int *)(a1 + 12);
  }
  else {
    uint64_t v7 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  unsigned int v8 = *(unsigned __int16 *)(a2 + 8);
  int v9 = (__int16)v8;
  unsigned int v10 = v8 >> 5;
  if (v9 < 0) {
    unsigned int v10 = *(_DWORD *)(a2 + 12);
  }

  return icu::UnicodeString::doReplace((icu::UnicodeString *)a1, 0, v7, (const icu::UnicodeString *)a2, a3, v10 - a3);
}

uint64_t sub_18C98950C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0) {
    int32_t v3 = *(_DWORD *)(a1 + 12);
  }
  else {
    int32_t v3 = v2 >> 5;
  }
  unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
  if (v4) {
    return (v2 & 1) == 0;
  }
  if ((v4 & 0x8000u) == 0) {
    int v5 = v4 >> 5;
  }
  else {
    int v5 = *(_DWORD *)(a2 + 12);
  }
  if ((v4 & 2) != 0) {
    uint64_t v6 = a2 + 10;
  }
  else {
    uint64_t v6 = *(void *)(a2 + 24);
  }
  return icu::UnicodeString::doCompare(a1, 0, v3, v6, v5 & (v5 >> 31), v5 & ~(v5 >> 31));
}

uint64_t icu::NumberFormat::getRoundingMode(icu::NumberFormat *this)
{
  return 7;
}

uint64_t sub_18C989578()
{
  if (qword_1EB20BAB0)
  {
    uhash_close((unsigned char *)qword_1EB20BAB0);
    qword_1EB20BAB0 = 0;
  }
  return 1;
}

uint64_t sub_18C9895B8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_18C9895E4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA50020;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));

  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18C989638(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA50020;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);

  icu::UMemory::operator delete(v2);
}

uint64_t sub_18C989690(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)"N3icu18SharedNumberFormatE" & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu18SharedNumberFormatE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18C9896EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  int v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((unsigned char *)v4 + 12) = 0;
    *unsigned int v4 = (uint64_t)&unk_1EDA50020;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18C989754(uint64_t a1, char *__dst, int a3)
{
  uint64_t result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18C989790(void *a1, void *a2)
{
  BOOL result = sub_18C8D893C(a1, a2);
  if (result)
  {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

uint64_t *sub_18C9897E0(uint64_t a1, int a2, int a3, UErrorCode *a4)
{
  uint64_t v8 = *(void *)(a1 + 80);
  if (!v8 || *(int *)(a1 + 56) < 1) {
    goto LABEL_7;
  }
  if ((*(_DWORD *)(a1 + 60) & 0x80000000) != 0) {
    goto LABEL_6;
  }
  Set = (icu::UnicodeSet *)icu::numparse::impl::SymbolMatcher::getSet(*(icu::numparse::impl::SymbolMatcher **)(a1 + 80));
  if (!icu::UnicodeSet::contains(Set, *(_DWORD *)(a1 + 60)))
  {
    uint64_t v8 = *(void *)(a1 + 80);
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v8);
  }
LABEL_7:
  switch(a2)
  {
    case -10:
    case -9:
    case -8:
    case -7:
    case -6:
      unsigned int v10 = icu::numparse::impl::AffixTokenMatcherWarehouse::currency(*(const icu::number::impl::CurrencySymbols ****)(a1 + 72), a4);
      BOOL result = (uint64_t *)(*(uint64_t (**)(uint64_t, const icu::number::impl::CurrencySymbols ***))(*(void *)a1 + 24))(a1, v10);
      goto LABEL_9;
    case -5:
      uint64_t v12 = icu::numparse::impl::AffixTokenMatcherWarehouse::permille(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      BOOL result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v12);
      a2 = -5;
      goto LABEL_9;
    case -4:
      uint64_t v13 = icu::numparse::impl::AffixTokenMatcherWarehouse::percent(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      BOOL result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v13);
      a2 = -4;
      goto LABEL_9;
    case -2:
      uint64_t v14 = icu::numparse::impl::AffixTokenMatcherWarehouse::plusSign(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      BOOL result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v14);
      a2 = -2;
      goto LABEL_9;
    case -1:
      uint64_t v15 = icu::numparse::impl::AffixTokenMatcherWarehouse::minusSign(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      BOOL result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v15);
      a2 = -1;
      goto LABEL_9;
    case 0:
      BOOL result = *(uint64_t **)(a1 + 80);
      if (result)
      {
        uint64_t v16 = (icu::UnicodeSet *)icu::numparse::impl::SymbolMatcher::getSet((icu::numparse::impl::SymbolMatcher *)result);
        BOOL result = (uint64_t *)icu::UnicodeSet::contains(v16, a3);
        if (result) {
          goto LABEL_20;
        }
      }
      uint64_t v17 = *(void *)(a1 + 72);
      int v18 = a3;
      if (*(int *)a4 <= 0)
      {
        BOOL result = sub_18C98A1CC((const void **)(v17 + 1200), &v18);
        if (result)
        {
          BOOL result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, result);
LABEL_20:
          a2 = a3;
LABEL_9:
          *(_DWORD *)(a1 + 60) = a2;
        }
        else
        {
          *a4 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
      return result;
    default:
      abort();
  }
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::minusSign(icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  icu::numparse::impl::MinusSignMatcher::MinusSignMatcher((icu::numparse::impl::MinusSignMatcher *)&v4, *(UChar ***)(*(void *)this + 8), 1);
  icu::UnicodeString::operator=((icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 16), (icu::UnicodeString *)v5);
  *((void *)this + 10) = v5[8];
  unint64_t v2 = v6;
  *((unsigned char *)this + 88) = v6;
  unsigned int v4 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((void *)v2, (icu::UnicodeString *)v5);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v4);
  return (uint64_t)this + 8;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::plusSign(icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  icu::numparse::impl::PlusSignMatcher::PlusSignMatcher((icu::numparse::impl::PlusSignMatcher *)&v4, *(UChar ***)(*(void *)this + 8), 1);
  icu::UnicodeString::operator=((icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 104), (icu::UnicodeString *)v5);
  *((void *)this + 21) = v5[8];
  unint64_t v2 = v6;
  *((unsigned char *)this + 176) = v6;
  unsigned int v4 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((void *)v2, (icu::UnicodeString *)v5);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v4);
  return (uint64_t)this + 96;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::percent(icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  icu::numparse::impl::PercentMatcher::PercentMatcher((icu::numparse::impl::PercentMatcher *)&v4, *(UChar ***)(*(void *)this + 8));
  icu::UnicodeString::operator=((icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 192), (icu::UnicodeString *)v5);
  unint64_t v2 = v6;
  *((void *)this + 32) = v6;
  unsigned int v4 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v4);
  return (uint64_t)this + 184;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::permille(icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  icu::numparse::impl::PermilleMatcher::PermilleMatcher((icu::numparse::impl::PermilleMatcher *)&v4, *(UChar ***)(*(void *)this + 8));
  icu::UnicodeString::operator=((icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 272), (icu::UnicodeString *)v5);
  unint64_t v2 = v6;
  *((void *)this + 42) = v6;
  unsigned int v4 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v4);
  return (uint64_t)this + 264;
}

const icu::number::impl::CurrencySymbols ***icu::numparse::impl::AffixTokenMatcherWarehouse::currency(const icu::number::impl::CurrencySymbols ***this, UErrorCode *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher((icu::numparse::impl::CombinedCurrencyMatcher *)v10, **this, (*this)[1], *((_DWORD *)*this + 8), a2);
  this[44] = (const icu::number::impl::CurrencySymbols **)v10[1];
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 45), (icu::UnicodeString *)v11);
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 53), (icu::UnicodeString *)v12);
  uint64_t v3 = 0;
  *((unsigned char *)this + 488) = v12[64];
  do
  {
    icu::UnicodeString::operator=((icu::UnicodeString *)&this[v3 + 62], (icu::UnicodeString *)&v12[v3 * 8 + 72]);
    v3 += 8;
  }
  while (v3 != 64);
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 126), (icu::UnicodeString *)v13);
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 134), (icu::UnicodeString *)v14);
  icu::CharString::operator=((uint64_t)(this + 142), (uint64_t)&v15);
  v10[0] = &unk_1EDA503C0;
  unint64_t v4 = v16;
  if (v16) {
    uprv_free(v15);
  }
  icu::UnicodeString::~UnicodeString((void *)v4, (icu::UnicodeString *)v14);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v13);
  for (uint64_t i = 75; i != 11; i -= 8)
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10[i]);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v11);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)v10);
  return this + 43;
}

uint64_t *icu::numparse::impl::AffixTokenMatcherWarehouse::nextCodePointMatcher(const void **this, int a2, UErrorCode *a3)
{
  int v5 = a2;
  if (*(int *)a3 > 0) {
    return 0;
  }
  BOOL result = sub_18C98A1CC(this + 150, &v5);
  if (!result) {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void sub_18C989F48(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 56);
  if (v4 >= *(_DWORD *)(a1 + 24) && v4 >= 1)
  {
    int v6 = 2 * v4;
    uint64_t v7 = uprv_malloc(8 * (2 * v4));
    if (v7)
    {
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(a1 + 24);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = 2 * v4;
      }
      unsigned int v10 = *(void **)(a1 + 16);
      memcpy(v7, v10, 8 * v9);
      if (*(unsigned char *)(a1 + 28)) {
        uprv_free(v10);
      }
      *(void *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 24) = v6;
      *(unsigned char *)(a1 + 28) = 1;
    }
  }
  uint64_t v11 = *(int *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v11 + 1;
  *(void *)(*(void *)(a1 + 16) + 8 * v11) = a2;
}

void sub_18C989FFC(uint64_t a1, uint64_t a2)
{
}

uint64_t icu::numparse::impl::AffixPatternMatcher::AffixPatternMatcher(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5)
{
  uint64_t v8 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a1, a2, a3);
  *(void *)uint64_t v8 = &unk_1EDA50140;
  sub_18C98BF40((void **)(v8 + 56), a4, a5);
  return a1;
}

{
  uint64_t v8;

  uint64_t v8 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a1, a2, a3);
  *(void *)uint64_t v8 = &unk_1EDA50140;
  sub_18C98BF40((void **)(v8 + 56), a4, a5);
  return a1;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::AffixTokenMatcherWarehouse(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = &unk_1EDA47700;
  *(_WORD *)(a1 + 24) = 2;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = &unk_1EDA50700;
  *(void *)(a1 + 104) = &unk_1EDA47700;
  *(_WORD *)(a1 + 112) = 2;
  *(void *)(a1 + 96) = &unk_1EDA508B8;
  *(void *)(a1 + 192) = &unk_1EDA47700;
  *(_WORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = &unk_1EDA50808;
  *(void *)(a1 + 272) = &unk_1EDA47700;
  *(_WORD *)(a1 + 280) = 2;
  *(void *)(a1 + 264) = &unk_1EDA50860;
  sub_18C98BE34(a1 + 344);
  *(_DWORD *)(a1 + 1200) = 0;
  *(void *)(a1 + 1208) = a1 + 1224;
  *(_DWORD *)(a1 + 1216) = 8;
  *(unsigned char *)(a1 + 1220) = 0;
  return a1;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::ignorables(icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  return *(void *)(*(void *)this + 16);
}

uint64_t *sub_18C98A1CC(const void **a1, int *a2)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = *(unsigned int *)a1;
  if (v5 == v4)
  {
    if (v4 == 8) {
      int v6 = 32;
    }
    else {
      int v6 = 2 * v4;
    }
    if (v6 < 1) {
      return 0;
    }
    BOOL result = (uint64_t *)uprv_malloc(8 * v6);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    if (v4 >= 1)
    {
      int v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = v6;
      }
      memcpy(result, a1[1], 8 * v9);
    }
    if (*((unsigned char *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    uint64_t v5 = 1;
    *((unsigned char *)a1 + 20) = 1;
  }
  BOOL result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x10, (unint64_t)a2);
  if (result)
  {
    int v10 = *a2;
    *BOOL result = (uint64_t)&unk_1EDA500F8;
    *((_DWORD *)result + 2) = v10;
  }
  uint64_t v11 = *(int *)a1;
  *(_DWORD *)a1 = v11 + 1;
  *((void *)a1[1] + v11) = result;
  return result;
}

BOOL icu::numparse::impl::AffixTokenMatcherWarehouse::hasEmptyCurrencySymbol(icu::number::impl::CurrencySymbols ***this)
{
  return icu::number::impl::CurrencySymbols::hasEmptyCurrencySymbol(**this);
}

uint64_t icu::numparse::impl::CodePointMatcher::CodePointMatcher(uint64_t this, int a2)
{
  *(void *)this = &unk_1EDA500F8;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

{
  *(void *)this = &unk_1EDA500F8;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t icu::numparse::impl::CodePointMatcher::match(icu::numparse::impl::CodePointMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  if (icu::StringSegment::startsWith(a2, *((_DWORD *)this + 2)))
  {
    icu::StringSegment::adjustOffsetByCodePoint(a2);
    icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
  }
  return 0;
}

BOOL icu::numparse::impl::CodePointMatcher::smokeTest(icu::numparse::impl::CodePointMatcher *this, const icu::StringSegment *a2)
{
  return icu::StringSegment::startsWith(a2, *((_DWORD *)this + 2));
}

uint64_t icu::numparse::impl::CodePointMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<CodePoint>");
}

uint64_t icu::numparse::impl::AffixPatternMatcher::fromAffixPattern@<X0>(icu::numparse::impl::AffixPatternMatcher *this@<X0>, const icu::UnicodeString *a2@<X1>, icu::numparse::impl::AffixTokenMatcherWarehouse *a3@<X2>, BOOL *a4@<X4>, unsigned char *a5@<X3>, uint64_t a6@<X8>)
{
  if (*((unsigned __int16 *)this + 4) <= 0x1Fu)
  {
    *a5 = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    uint64_t result = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a6);
    *(void *)a6 = &unk_1EDA50140;
    *(_WORD *)(a6 + 70) = 0;
    *(void *)(a6 + 56) = a6 + 70;
    *(_DWORD *)(a6 + 64) = 4;
    *(unsigned char *)(a6 + 68) = 0;
  }
  else
  {
    *a5 = 1;
    if (((unsigned __int16)a3 & 0x200) != 0) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = *(void *)(*(void *)a2 + 16);
    }
    memset(&v14[1], 0, 32);
    uint64_t v12 = &unk_1EDA500A0;
    uint64_t v13 = &unk_1EDA500D0;
    v14[0] = &v14[2];
    uint64_t v15 = 0;
    unsigned __int8 v16 = this;
    LODWORD(v14[1]) = 3;
    uint64_t v17 = a2;
    uint64_t v18 = v9;
    icu::number::impl::AffixUtils::iterateWithConsumer((unint64_t)this, (uint64_t)&v12, (int *)a4);
    uint64_t v11 = (uint64_t)v16;
    icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a6, (uint64_t)v14, v15);
    *(void *)a6 = &unk_1EDA50140;
    sub_18C98BF40((void **)(a6 + 56), v11, (int *)a4);
    uint64_t v12 = &unk_1EDA500A0;
    uint64_t v13 = &unk_1EDA500D0;
    if (BYTE4(v14[1])) {
      uprv_free(v14[0]);
    }
    return nullsub_17(&v12);
  }
  return result;
}

uint64_t sub_18C98A518(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA500A0;
  *(void *)(a1 + 8) = &unk_1EDA500D0;
  if (*(unsigned char *)(a1 + 28)) {
    uprv_free(*(void **)(a1 + 16));
  }

  return nullsub_17(a1);
}

uint64_t icu::numparse::impl::AffixPatternMatcher::getPattern@<X0>(icu::numparse::impl::AffixPatternMatcher *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 7);
  return icu::UnicodeString::UnicodeString(a2, 1, &v3);
}

uint64_t icu::numparse::impl::AffixPatternMatcher::operator==(uint64_t a1, uint64_t a2)
{
  return sub_18C98A648((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
}

uint64_t sub_18C98A648(uint64_t *a1, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a1;
  icu::UnicodeString::UnicodeString(v12, 1, &v9);
  uint64_t v8 = *a2;
  icu::UnicodeString::UnicodeString(&v9, 1, &v8);
  if (v13)
  {
    unint64_t v5 = v10;
    uint64_t v3 = v10 & 1;
  }
  else
  {
    uint64_t v3 = 0;
    if ((v13 & 0x8000u) == 0) {
      int v4 = v13 >> 5;
    }
    else {
      int v4 = v14;
    }
    if ((v10 & 0x8000u) == 0) {
      unint64_t v5 = v10 >> 5;
    }
    else {
      unint64_t v5 = v11;
    }
    if ((v10 & 1) == 0 && v4 == v5) {
      uint64_t v3 = icu::UnicodeString::doEquals((icu::UnicodeString *)v12, (const icu::UnicodeString *)&v9, v4);
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v5, (icu::UnicodeString *)&v9);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
  return v3;
}

uint64_t sub_18C98A764(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 576; i += 32)
    *(void *)(a1 + i) = &unk_1EDA501A0;
  uint64_t v5 = a1 + 1536;
  uint64_t v6 = 576;
  do
  {
    uint64_t v7 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a1 + v6);
    *(void *)uint64_t v7 = &unk_1EDA50140;
    *(_WORD *)(v7 + 70) = 0;
    *(void *)(v7 + 56) = v7 + 70;
    *(_DWORD *)(v7 + 64) = 4;
    *(unsigned char *)(v7 + 68) = 0;
    v6 += 80;
  }
  while (v7 + 80 != v5);
  *(void *)(a1 + 1536) = a2;
  return a1;
}

BOOL sub_18C98A828(uint64_t a1, icu::numparse::impl::SymbolMatcher *a2, __int16 a3, int *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  memset(v36, 0, sizeof(v36));
  (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 32))(v36);
  memset(v35, 0, sizeof(v35));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, void))(*(void *)a1 + 32))(v35, a1, 0);
  long long v31 = 0u;
  uint64_t v34 = 0;
  long long v33 = 0u;
  long long v32 = 0u;
  uint64_t v29 = 0;
  BOOL v30 = &unk_1EDA47700;
  LOWORD(v31) = 2;
  long long v26 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v25 = &unk_1EDA47700;
  LOWORD(v26) = 2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(v24, a1, 768);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v30, (icu::UnicodeString *)v24);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v24);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(v24, a1, 512);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v25, (icu::UnicodeString *)v24);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v24);
  }
  BOOL v19 = 1;
  if ((a3 & 0x100) == 0)
  {
    Set = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
    if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables((icu::number::impl::AffixUtils *)v36, Set, (const icu::UnicodeSet *)a4, v12))
    {
      unsigned __int16 v13 = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
      if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables((icu::number::impl::AffixUtils *)v35, v13, (const icu::UnicodeSet *)a4, v14))
      {
        uint64_t v15 = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
        if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables((icu::number::impl::AffixUtils *)&v30, v15, (const icu::UnicodeSet *)a4, v16))
        {
          uint64_t v17 = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
          if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables((icu::number::impl::AffixUtils *)&v25, v17, (const icu::UnicodeSet *)a4, v18))
          {
            if ((icu::number::impl::AffixUtils::containsType((uint64_t)v35, -2, a4) & 1) == 0
              && (icu::number::impl::AffixUtils::containsType((uint64_t)v35, -1, a4) & 1) == 0
              && (icu::number::impl::AffixUtils::containsType((uint64_t)&v25, -2, a4) & 1) == 0
              && !icu::number::impl::AffixUtils::containsType((uint64_t)&v25, -1, a4))
            {
              BOOL v19 = 0;
            }
          }
        }
      }
    }
  }
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v25);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v30);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v35);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v36);
  return v19;
}

void *sub_18C98AB20(uint64_t a1, uint64_t a2, uint64_t a3, icu::numparse::impl::SymbolMatcher *a4, icu::numparse::impl::AffixTokenMatcherWarehouse *a5, int *a6)
{
  uint64_t v6 = a5;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t result = (void *)sub_18C98A828(a2, a4, (__int16)a5, a6);
  if (!result) {
    return result;
  }
  uint64_t v57 = a3;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  int v14 = 0;
  long long v77 = 0u;
  uint64_t v80 = 0;
  long long v79 = 0u;
  long long v78 = 0u;
  long long v76 = &unk_1EDA47700;
  LOWORD(v77) = 2;
  uint64_t v15 = (uint64_t)&v68;
  unint64_t v59 = 0;
  unsigned int v65 = v6;
  do
  {
    if (((v11 & 1) == 0
       || (*(unsigned int (**)(uint64_t))(*(void *)a2 + 40))(a2)
       && icu::number::impl::CurrencySymbols::hasEmptyCurrencySymbol(***(icu::number::impl::CurrencySymbols ****)(a1 + 1536)))
      && (((unsigned __int16)v6 & 0x400) == 0 || v11 >= 2))
    {
      uint64_t v15 = v11 & 0x7E;
      if (((unsigned __int16)v6 & 0x400) != 0 || v15 != 2)
      {
        int v60 = v11 & 0x7E;
        uint64_t v58 = v12;
        unsigned __int8 v75 = 0;
        icu::number::impl::PatternStringUtils::patternInfoToStringBuilder(a2, 1, v11 >> 1, 0, 5u, 0, v11 & 1, (uint64_t)&v76);
        icu::numparse::impl::AffixPatternMatcher::fromAffixPattern((icu::numparse::impl::AffixPatternMatcher *)&v76, *(const icu::UnicodeString **)(a1 + 1536), v6, (BOOL *)a6, &v75, (uint64_t)&v67);
        uint64_t v16 = a1 + 80 * v13;
        unint64_t v17 = v16 + 576;
        if (*(unsigned char *)(v16 + 596)) {
          uprv_free(*(void **)(v16 + 584));
        }
        uint64_t v18 = SDWORD2(v68);
        *(_DWORD *)(v17 + 16) = DWORD2(v68);
        *(unsigned char *)(v17 + 20) = BYTE12(v68);
        if ((void *)v68 == v69)
        {
          *(void *)(v17 + 8) = v17 + 24;
          memcpy((void *)(v17 + 24), v69, 8 * v18);
        }
        else
        {
          *(void *)(v17 + 8) = v68;
          *(void *)&long long v68 = v69;
          DWORD2(v68) = 3;
          BYTE12(v68) = 0;
        }
        int v19 = v13;
        int v20 = v13;
        *(_DWORD *)(v17 + 48) = v70;
        uint64_t v21 = a1 + 80 * v13;
        uint64_t v22 = (void **)(v21 + 632);
        if (*(unsigned char *)(v21 + 644)) {
          uprv_free(*v22);
        }
        uint64_t v23 = v72;
        *(_DWORD *)(a1 + 80 * v20 + 6icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = v72;
        int v24 = v73;
        *(unsigned char *)(v21 + 644) = v73;
        if (v71 == v74)
        {
          long long v25 = (void *)(a1 + 80 * v20 + 646);
          void *v22 = v25;
          memcpy(v25, v74, 2 * v23);
          long long v67 = &unk_1EDA50140;
          if (v24) {
            uprv_free(v74);
          }
        }
        else
        {
          void *v22 = v71;
          long long v71 = v74;
          int v72 = 4;
          unsigned __int8 v73 = 0;
        }
        long long v67 = &unk_1EDA502B8;
        if (BYTE12(v68)) {
          uprv_free((void *)v68);
        }
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v67);
        int v26 = v19 + v75;
        int v62 = v75;
        if (v75) {
          unint64_t v27 = v17;
        }
        else {
          unint64_t v27 = 0;
        }
        unsigned __int8 v66 = 0;
        icu::number::impl::PatternStringUtils::patternInfoToStringBuilder(a2, 0, v11 >> 1, 0, 5u, 0, v11 & 1, (uint64_t)&v76);
        icu::numparse::impl::AffixPatternMatcher::fromAffixPattern((icu::numparse::impl::AffixPatternMatcher *)&v76, *(const icu::UnicodeString **)(a1 + 1536), (icu::numparse::impl::AffixTokenMatcherWarehouse *)v65, (BOOL *)a6, &v66, (uint64_t)&v67);
        uint64_t v28 = a1 + 80 * v26;
        uint64_t v29 = v28 + 576;
        if (*(unsigned char *)(v28 + 596)) {
          uprv_free(*(void **)(v28 + 584));
        }
        uint64_t v30 = SDWORD2(v68);
        *(_DWORD *)(v29 + 16) = DWORD2(v68);
        *(unsigned char *)(v29 + 20) = BYTE12(v68);
        unint64_t v64 = v27;
        if ((void *)v68 == v69)
        {
          *(void *)(v29 + 8) = v29 + 24;
          memcpy((void *)(v29 + 24), v69, 8 * v30);
        }
        else
        {
          *(void *)(v29 + 8) = v68;
          *(void *)&long long v68 = v69;
          DWORD2(v68) = 3;
          BYTE12(v68) = 0;
        }
        uint64_t v31 = v26;
        *(_DWORD *)(v29 + 48) = v70;
        uint64_t v32 = a1 + 80 * v26;
        long long v33 = (void **)(v32 + 632);
        if (*(unsigned char *)(v32 + 644)) {
          uprv_free(*v33);
        }
        uint64_t v34 = (unsigned __int8 *)(v32 + 644);
        uint64_t v35 = v72;
        *(_DWORD *)(a1 + 80 * (int)v31 + 6icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = v72;
        int v36 = v73;
        unsigned __int8 *v34 = v73;
        if (v71 == v74)
        {
          uint64_t v37 = (void *)(a1 + 80 * (int)v31 + 646);
          void *v33 = v37;
          memcpy(v37, v74, 2 * v35);
          long long v67 = &unk_1EDA50140;
          if (v36) {
            uprv_free(v74);
          }
        }
        else
        {
          void *v33 = v71;
          long long v71 = v74;
          int v72 = 4;
          unsigned __int8 v73 = 0;
        }
        uint64_t v61 = v31;
        long long v67 = &unk_1EDA502B8;
        if (BYTE12(v68)) {
          uprv_free((void *)v68);
        }
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v67);
        int v38 = v66;
        if (v66) {
          uint64_t v39 = v29;
        }
        else {
          uint64_t v39 = 0;
        }
        unint64_t v40 = v64;
        uint64_t v12 = v39;
        if (v11 >= 2)
        {
          if ((uint64_t v12 = v58, (v40 = v59) == 0) && !v62
            || v59 && v62 && sub_18C98A648((uint64_t *)(v64 + 56), (uint64_t *)(v59 + 56)))
          {
            if (!v58 && !v38)
            {
              uint64_t v12 = 0;
LABEL_67:
              uint64_t v15 = v61;
              int v13 = v61 + v38;
              unint64_t v59 = v40;
              uint64_t v6 = (icu::numparse::impl::AffixTokenMatcherWarehouse *)v65;
              goto LABEL_68;
            }
            if (v58 && v38 && (sub_18C98A648((uint64_t *)(v39 + 56), (uint64_t *)(v58 + 56)) & 1) != 0)
            {
              unint64_t v40 = v59;
              uint64_t v12 = v58;
              goto LABEL_67;
            }
          }
        }
        long long v67 = &unk_1EDA501A0;
        *(void *)&long long v68 = v64;
        *((void *)&v68 + 1) = v39;
        LODWORD(v69[0]) = v60 == 4;
        uint64_t v41 = v14 + 1;
        uint64_t v42 = a1 + 32 * v14;
        *(_OWORD *)(v42 + 8) = v68;
        *(_DWORD *)(v42 + 24) = v69[0];
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v67);
        if (v62 && (v65 & 0x80) != 0 && v38)
        {
          if (v11 >= 2 && v40 && (sub_18C98A648((uint64_t *)(v64 + 56), (uint64_t *)(v40 + 56)) & 1) != 0) {
            goto LABEL_62;
          }
          long long v67 = &unk_1EDA501A0;
          long long v68 = v64;
          LODWORD(v69[0]) = v60 == 4;
          int v43 = v14 + 2;
          uint64_t v44 = a1 + 32 * v41;
          *(_OWORD *)(v44 + 8) = v64;
          *(_DWORD *)(v44 + 24) = v69[0];
          icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v67);
          LODWORD(v41) = v43;
          if (v11 >= 2)
          {
LABEL_62:
            if (v12)
            {
              int v43 = v41;
              if (sub_18C98A648((uint64_t *)(v39 + 56), (uint64_t *)(v12 + 56))) {
                goto LABEL_64;
              }
            }
            else
            {
              int v43 = v41;
            }
          }
          long long v67 = &unk_1EDA501A0;
          *(void *)&long long v68 = 0;
          *((void *)&v68 + 1) = v39;
          LODWORD(v69[0]) = v60 == 4;
          uint64_t v45 = v43;
          int v14 = v43 + 1;
          uint64_t v46 = a1 + 32 * v45;
          *(_OWORD *)(v46 + 8) = v68;
          *(_DWORD *)(v46 + 24) = v69[0];
          icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v67);
          goto LABEL_67;
        }
LABEL_64:
        int v14 = v41;
        goto LABEL_67;
      }
    }
LABEL_68:
    ++v11;
  }
  while (v11 != 6);
  if (v14 > 1)
  {
    char v47 = 0;
    LODWORD(v15) = 1;
    do
    {
      while (1)
      {
        uint64_t v48 = a1 + 32 * ((int)v15 - 1);
        int v49 = v15;
        uint64_t v50 = a1 + 32 * v15;
        if ((int)sub_18C98B36C(v48, v50) <= 0) {
          break;
        }
        v69[0] = 0;
        long long v67 = &unk_1EDA501A0;
        long long v68 = *(_OWORD *)(v48 + 8);
        long long v51 = v68;
        LODWORD(v69[0]) = *(_DWORD *)(v48 + 24);
        int v52 = v69[0];
        int v53 = *(_DWORD *)(v50 + 24);
        *(_OWORD *)(v48 + 8) = *(_OWORD *)(v50 + 8);
        *(_DWORD *)(v48 + 24) = v53;
        *(_OWORD *)(v50 + 8) = v51;
        *(_DWORD *)(v50 + 24) = v52;
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v67);
        char v47 = v49 + 1 < v14;
        if (v49 + 1 < v14) {
          LODWORD(v15) = v49 + 1;
        }
        else {
          LODWORD(v15) = 1;
        }
      }
      BOOL v54 = v49 + 1 < v14;
      char v55 = v54 | v47;
      if (v49 + 1 < v14) {
        uint64_t v15 = (v49 + 1);
      }
      else {
        uint64_t v15 = 1;
      }
      v47 &= v54;
    }
    while ((v55 & 1) != 0);
  }
  if (v14 >= 1)
  {
    uint64_t v56 = v14;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v57 + 16))(v57, a1);
      a1 += 32;
      --v56;
    }
    while (v56);
  }
  return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v76);
}

void sub_18C98B2DC(void **this)
{
  *this = &unk_1EDA50140;
  if (*((unsigned char *)this + 68)) {
    uprv_free(this[7]);
  }
  *this = &unk_1EDA502B8;
  if (*((unsigned char *)this + 20)) {
    uprv_free(this[1]);
  }

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);
}

uint64_t sub_18C98B36C(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a1 + 8);
  int v5 = sub_18C98B910(*(void *)(a1 + 8));
  uint64_t v6 = (uint64_t *)(a2 + 8);
  if (v5 == sub_18C98B910(*(void *)(a2 + 8)))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v7 = (uint64_t *)(a1 + 16);
    int v9 = sub_18C98B910(v8);
    uint64_t v11 = *(void *)(a2 + 16);
    unsigned __int16 v10 = (uint64_t *)(a2 + 16);
    if (v9 == sub_18C98B910(v11)) {
      return 0;
    }
    int v4 = v7;
    uint64_t v6 = v10;
  }
  int v13 = sub_18C98B910(*v4);
  if (v13 > (int)sub_18C98B910(*v6)) {
    return -1;
  }
  else {
    return 1;
  }
}

uint64_t sub_18C98B414(uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (icu::numparse::impl::ParsedNumber::seenNumber(this))
  {
    if ((*((_WORD *)this + 76) & 1) != 0
      && *(void *)(a1 + 16)
      && sub_18C98B5EC(*(void *)(a1 + 8), (uint64_t)this + 80))
    {
      int Offset = icu::StringSegment::getOffset(a2);
      uint64_t v9 = (*(uint64_t (**)(void, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, uint64_t))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), a2, this, a4);
      if (Offset != icu::StringSegment::getOffset(a2))
      {
        unsigned __int16 v10 = (icu::numparse::impl::ParsedNumber *)((char *)this + 144);
        uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 56);
        icu::UnicodeString::UnicodeString(v15, 1, &v14);
LABEL_11:
        icu::UnicodeString::operator=(v10, (icu::UnicodeString *)v15);
        icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
        return v9;
      }
      return v9;
    }
    return 0;
  }
  if ((*((_WORD *)this + 44) & 1) == 0 || !*(void *)(a1 + 8)) {
    return 0;
  }
  int v11 = icu::StringSegment::getOffset(a2);
  uint64_t v9 = (*(uint64_t (**)(void, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2, this, a4);
  if (v11 != icu::StringSegment::getOffset(a2))
  {
    unsigned __int16 v10 = (icu::numparse::impl::ParsedNumber *)((char *)this + 80);
    uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 56);
    icu::UnicodeString::UnicodeString(v15, 1, &v14);
    goto LABEL_11;
  }
  return v9;
}

BOOL sub_18C98B5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return *(_WORD *)(a2 + 8) & 1;
  }
  uint64_t v8 = *(void *)(a1 + 56);
  icu::UnicodeString::UnicodeString(v9, 1, &v8);
  if (v10)
  {
    uint64_t v6 = (void *)*(unsigned __int16 *)(a2 + 8);
    BOOL v3 = v6 & 1;
  }
  else
  {
    BOOL v3 = 0;
    if ((v10 & 0x8000u) == 0) {
      int v4 = v10 >> 5;
    }
    else {
      int v4 = v11;
    }
    unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
    if ((v5 & 0x8000u) == 0) {
      uint64_t v6 = (void *)(v5 >> 5);
    }
    else {
      uint64_t v6 = (void *)*(unsigned int *)(a2 + 12);
    }
    if ((v5 & 1) == 0 && v4 == v6) {
      BOOL v3 = icu::UnicodeString::doEquals((icu::UnicodeString *)v9, (const icu::UnicodeString *)a2, v4);
    }
  }
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
  return v3;
}

uint64_t sub_18C98B6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, a2) & 1) != 0) {
    return 1;
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    unsigned int v5 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v5();
  }
  return result;
}

uint64_t sub_18C98B790(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v4 = (icu::UnicodeString *)(a2 + 80);
  uint64_t result = sub_18C98B5EC(*(void *)(a1 + 8), a2 + 80);
  if (result)
  {
    uint64_t result = sub_18C98B5EC(*(void *)(a1 + 16), a2 + 144);
    if (result)
    {
      if (*(_WORD *)(a2 + 88))
      {
        uint64_t v9 = &unk_1EDA47700;
        __int16 v10 = 2;
        icu::UnicodeString::operator=(v4, (icu::UnicodeString *)&v9);
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v9);
      }
      if (*(_WORD *)(a2 + 152))
      {
        uint64_t v9 = &unk_1EDA47700;
        __int16 v10 = 2;
        icu::UnicodeString::operator=((icu::UnicodeString *)(a2 + 144), (icu::UnicodeString *)&v9);
        icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v9);
      }
      *(_DWORD *)(a2 + 76) |= *(_DWORD *)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 8);
      if (v8) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, a2);
      }
      uint64_t result = *(void *)(a1 + 16);
      if (result) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, a2);
      }
    }
  }
  return result;
}

uint64_t sub_18C98B910(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  icu::UnicodeString::UnicodeString(v4, 1, &v3);
  if ((v5 & 0x8000u) == 0) {
    uint64_t v1 = v5 >> 5;
  }
  else {
    uint64_t v1 = v6;
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v4);
  return v1;
}

void *sub_18C98B9B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v28[8] = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 24);
  icu::UnicodeString::UnicodeString((uint64_t)v24, (uint64_t)L"<Affix");
  if (v4) {
    unsigned __int16 v5 = ":";
  }
  else {
    unsigned __int16 v5 = " ";
  }
  icu::UnicodeString::UnicodeString((uint64_t)v23, (uint64_t)v5);
  icu::operator+((uint64_t)v24, (uint64_t)v23, (uint64_t)v25);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    v28[0] = *(void *)(v6 + 56);
    icu::UnicodeString::UnicodeString(v22, 1, v28);
  }
  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v22, (uint64_t)L"null");
  }
  icu::operator+((uint64_t)v25, (uint64_t)v22, (uint64_t)v26);
  icu::UnicodeString::UnicodeString((uint64_t)v21, (uint64_t)"#");
  icu::operator+((uint64_t)v26, (uint64_t)v21, (uint64_t)v27);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    v28[0] = *(void *)(v7 + 56);
    icu::UnicodeString::UnicodeString(v20, 1, v28);
  }
  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v20, (uint64_t)L"null");
  }
  icu::operator+((uint64_t)v27, (uint64_t)v20, (uint64_t)v28);
  icu::UnicodeString::UnicodeString((uint64_t)v19, (uint64_t)">");
  icu::operator+((uint64_t)v28, (uint64_t)v19, a2);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v19);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v28);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v27);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v21);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v26);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v22);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v25);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v23);
  return icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v24);
}

void sub_18C98BB94(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA500A0;
  *(void *)(a1 + 8) = &unk_1EDA500D0;
  if (*(unsigned char *)(a1 + 28)) {
    uprv_free(*(void **)(a1 + 16));
  }
  nullsub_17(a1);

  JUMPOUT(0x192F969D0);
}

uint64_t sub_18C98BC28(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  *(void *)(a1 - 8) = &unk_1EDA500A0;
  *(void *)a1 = &unk_1EDA500D0;
  if (*(unsigned char *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }

  return nullsub_17(v1);
}

void sub_18C98BCA4(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  *(void *)(a1 - 8) = &unk_1EDA500A0;
  *(void *)a1 = &unk_1EDA500D0;
  if (*(unsigned char *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  nullsub_17(v1);

  JUMPOUT(0x192F969D0);
}

void sub_18C98BD38(icu::numparse::impl::NumberParseMatcher *a1)
{
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C98BD60()
{
  return 0;
}

void sub_18C98BD6C(icu::numparse::impl::NumberParseMatcher *a1)
{
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);

  icu::UMemory::operator delete(v1);
}

void sub_18C98BD94(void **this)
{
  *this = &unk_1EDA50140;
  if (*((unsigned char *)this + 68)) {
    uprv_free(this[7]);
  }
  *this = &unk_1EDA502B8;
  if (*((unsigned char *)this + 20)) {
    uprv_free(this[1]);
  }
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);

  JUMPOUT(0x192F969D0);
}

uint64_t sub_18C98BE34(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDA503C0;
  *(void *)(result + 16) = &unk_1EDA47700;
  *(_WORD *)(result + 24) = 2;
  *(void *)(result + 80) = &unk_1EDA47700;
  *(_WORD *)(result + 88) = 2;
  uint64_t v1 = 152;
  do
  {
    uint64_t v2 = result + v1;
    *(void *)uint64_t v2 = &unk_1EDA47700;
    *(_WORD *)(v2 + 8) = 2;
    v1 += 64;
  }
  while (v2 + 64 != result + 664);
  *(void *)(result + 664) = &unk_1EDA47700;
  *(_WORD *)(result + 672) = 2;
  *(void *)(result + 728) = &unk_1EDA47700;
  *(_WORD *)(result + 736) = 2;
  *(void *)(result + 792) = result + 805;
  *(_DWORD *)(result + 800) = 40;
  *(_WORD *)(result + 804) = 0;
  *(_DWORD *)(result + 848) = 0;
  return result;
}

void **sub_18C98BF40(void **a1, uint64_t a2, int *a3)
{
  unsigned int v6 = *(unsigned __int16 *)(a2 + 8);
  int v7 = (__int16)v6;
  unsigned int v8 = v6 >> 5;
  if (v7 < 0) {
    unsigned int v8 = *(_DWORD *)(a2 + 12);
  }
  sub_18C98C00C((uint64_t)a1, v8 + 1, *a3);
  if (*a3 <= 0)
  {
    unsigned int v9 = *(unsigned __int16 *)(a2 + 8);
    if ((v9 & 0x11) != 0)
    {
      __int16 v10 = 0;
    }
    else if ((v9 & 2) != 0)
    {
      __int16 v10 = (const void *)(a2 + 10);
    }
    else
    {
      __int16 v10 = *(const void **)(a2 + 24);
    }
    int v11 = (__int16)v9;
    unsigned int v12 = v9 >> 5;
    if (v11 < 0) {
      unsigned int v12 = *(_DWORD *)(a2 + 12);
    }
    memcpy(*a1, v10, 2 * (int)v12);
    unsigned int v13 = *(unsigned __int16 *)(a2 + 8);
    int v14 = (__int16)v13;
    unsigned int v15 = v13 >> 5;
    if (v14 < 0) {
      unsigned int v15 = *(_DWORD *)(a2 + 12);
    }
    *((_WORD *)*a1 + (int)v15) = 0;
  }
  return a1;
}

uint64_t sub_18C98C00C(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = a1 + 14;
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  if (a2 >= 5 && a3 <= 0)
  {
    unsigned __int16 v5 = uprv_malloc(2 * a2);
    if (v5)
    {
      unsigned int v6 = v5;
      if (*(unsigned char *)(a1 + 12)) {
        uprv_free(*(void **)a1);
      }
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(unsigned char *)(a1 + 12) = 1;
    }
  }
  return a1;
}

BOOL icu::numparse::impl::SeriesMatcher::match(icu::numparse::impl::SeriesMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  sub_18C98C718(v23, (uint64_t)a3);
  int Offset = icu::StringSegment::getOffset(a2);
  unsigned int v9 = (uint64_t *)(*(uint64_t (**)(icu::numparse::impl::SeriesMatcher *))(*(void *)this + 56))(this);
  if ((unint64_t)v9 >= (*(uint64_t (**)(icu::numparse::impl::SeriesMatcher *))(*(void *)this + 64))(this))
  {
    BOOL v19 = 1;
    goto LABEL_20;
  }
  int v22 = Offset;
  while (1)
  {
    uint64_t v11 = *v9;
    int v12 = icu::StringSegment::getOffset(a2);
    if (icu::StringSegment::length(v13, a2)) {
      int v14 = (*(uint64_t (**)(uint64_t, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, UErrorCode *))(*(void *)v11 + 24))(v11, a2, a3, a4);
    }
    else {
      int v14 = 1;
    }
    int v15 = icu::StringSegment::getOffset(a2);
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    if (v15 != v12 && (v16 & 1) != 0) {
      goto LABEL_15;
    }
    if (v15 != v12)
    {
      if ((unint64_t)++v9 < (*(uint64_t (**)(icu::numparse::impl::SeriesMatcher *))(*(void *)this + 64))(this))
      {
        int v17 = icu::StringSegment::getOffset(a2);
        int v18 = *((_DWORD *)a3 + 18);
        if (v17 != v18 && v18 > v12) {
          icu::StringSegment::setOffset((uint64_t)a2, v18);
        }
      }
      goto LABEL_15;
    }
    if (!v16) {
      break;
    }
    ++v9;
LABEL_15:
    if ((unint64_t)v9 >= (*(uint64_t (**)(icu::numparse::impl::SeriesMatcher *))(*(void *)this + 64))(this)) {
      goto LABEL_19;
    }
  }
  icu::StringSegment::setOffset((uint64_t)a2, v22);
  sub_18C98C330((uint64_t)a3, (uint64_t)v23);
LABEL_19:
  BOOL v19 = v14 != 0;
LABEL_20:
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v25);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v24);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v23);
  return v19;
}

uint64_t sub_18C98C330(uint64_t a1, uint64_t a2)
{
  icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)a1, a2);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  icu::UnicodeString::operator=((UChar **)(a1 + 80), (UChar **)(a2 + 80));
  icu::UnicodeString::operator=((UChar **)(a1 + 144), (UChar **)(a2 + 144));
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  return a1;
}

uint64_t icu::numparse::impl::SeriesMatcher::smokeTest(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (v2 == (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1)) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)v2 + 32);

  return v3();
}

uint64_t icu::numparse::impl::SeriesMatcher::postProcess(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  if (v4 != (uint64_t *)result)
  {
    unsigned int v6 = (uint64_t *)result;
    do
    {
      uint64_t v7 = *v4++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, a2);
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(uint64_t this)
{
  *(void *)this = &unk_1EDA502B8;
  *(void *)(this + 8) = this + 24;
  *(_DWORD *)(this + 16) = 3;
  *(unsigned char *)(this + 20) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDA502B8;
  *(void *)(this + 8) = this + 24;
  *(_DWORD *)(this + 16) = 3;
  *(unsigned char *)(this + 20) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int16 v5 = *(const void **)a2;
  *(void *)a1 = &unk_1EDA502B8;
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 12);
  unsigned int v6 = *(const void **)a2;
  if (*(void *)a2 == a2 + 16)
  {
    *(void *)(a1 + 8) = a1 + 24;
    memcpy((void *)(a1 + 24), v6, 8 * *(int *)(a2 + 8));
  }
  else
  {
    *(void *)a2 = a2 + 16;
    *(_DWORD *)(a2 + 8) = 3;
    *(unsigned char *)(a2 + 12) = 0;
  }
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::length(icu::numparse::impl::ArraySeriesMatcher *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::begin(icu::numparse::impl::ArraySeriesMatcher *this)
{
  return *((void *)this + 1);
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::end(icu::numparse::impl::ArraySeriesMatcher *this)
{
  return *((void *)this + 1) + 8 * *((int *)this + 12);
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18C98C644(void **this)
{
  *this = &unk_1EDA502B8;
  if (*((unsigned char *)this + 20)) {
    uprv_free(this[1]);
  }

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);
}

void sub_18C98C6A4(void **this)
{
  *this = &unk_1EDA502B8;
  if (*((unsigned char *)this + 20)) {
    uprv_free(this[1]);
  }
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);

  JUMPOUT(0x192F969D0);
}

void *sub_18C98C718(void *a1, uint64_t a2)
{
  int v4 = icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)a1, a2);
  *((void *)v4 + 9) = *(void *)(a2 + 72);
  icu::UnicodeString::UnicodeString((icu::number::impl::DecimalQuantity *)((char *)v4 + 80), (UChar **)(a2 + 80));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 18), (UChar **)(a2 + 144));
  a1[26] = *(void *)(a2 + 208);
  return a1;
}

icu::numparse::impl::CombinedCurrencyMatcher *icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher(icu::numparse::impl::CombinedCurrencyMatcher *this, UChar **a2, const icu::DecimalFormatSymbols *a3, __int16 a4, UErrorCode *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EDA503C0;
  icu::number::impl::CurrencySymbols::getCurrencySymbol(a2, a5, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 16));
  icu::number::impl::CurrencySymbols::getIntlCurrencySymbol(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 80));
  *((unsigned char *)this + 144) = (a4 & 0x2000) == 0;
  uint64_t v10 = 152;
  do
  {
    uint64_t v11 = (char *)this + v10;
    *(void *)uint64_t v11 = &unk_1EDA47700;
    *((_WORD *)v11 + 4) = 2;
    v10 += 64;
  }
  while (v11 + 64 != (char *)this + 664);
  uint64_t PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing((uint64_t)a3, 2, 0, (int *)a5);
  icu::UnicodeString::UnicodeString((icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 664), PatternForCurrencySpacing);
  unsigned int v13 = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing((uint64_t)a3, 2, 1, (int *)a5);
  icu::UnicodeString::UnicodeString((icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 728), v13);
  icu::Locale::Locale((icu::Locale *)v21, (uint64_t)a3 + 1936);
  int v14 = v22;
  *((void *)this + 99) = (char *)this + 805;
  *((_DWORD *)this + 200) = 40;
  *((_WORD *)this + 402) = 0;
  *((_DWORD *)this + 212) = 0;
  icu::CharString::append((icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 792), v14, -1, a5);
  icu::Locale::~Locale((icu::Locale *)v21);
  uint64_t IsoCode = icu::number::impl::CurrencySymbols::getIsoCode((icu::number::impl::CurrencySymbols *)a2);
  __int16 v16 = *(_WORD *)(IsoCode + 4);
  *((_DWORD *)this + 2) = *(_DWORD *)IsoCode;
  *((_WORD *)this + 6) = v16;
  *((_WORD *)this + 7) = 0;
  if (!*((unsigned char *)this + 144))
  {
    uint64_t v17 = 0;
    int v18 = (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 152);
    do
    {
      icu::number::impl::CurrencySymbols::getPluralName((uint64_t)a2, v17, (int *)a5, (uint64_t)v21);
      icu::UnicodeString::operator=(v18, (icu::UnicodeString *)v21);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v21);
      ++v17;
      int v18 = (icu::UnicodeString *)((char *)v18 + 64);
    }
    while (v17 != 8);
  }
  return this;
}

BOOL icu::numparse::impl::CombinedCurrencyMatcher::match(icu::numparse::impl::CombinedCurrencyMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  if (*((_WORD *)a3 + 104)) {
    return 0;
  }
  int Offset = icu::StringSegment::getOffset(a2);
  if (!icu::numparse::impl::ParsedNumber::seenNumber(a3) || *((unsigned __int16 *)this + 368) < 0x20u) {
    goto LABEL_13;
  }
  int CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 728));
  int v12 = CommonPrefixLength;
  unsigned int v13 = *((unsigned __int16 *)this + 368);
  if ((v13 & 0x8000) != 0) {
    int v14 = (uint64_t *)*((unsigned int *)this + 185);
  }
  else {
    int v14 = (uint64_t *)(v13 >> 5);
  }
  if (CommonPrefixLength == v14) {
    icu::StringSegment::adjustOffset((uint64_t)a2, CommonPrefixLength);
  }
  if (v12 == icu::StringSegment::length(v14, a2)) {
    uint64_t matched = 1;
  }
  else {
LABEL_13:
  }
    uint64_t matched = icu::numparse::impl::CombinedCurrencyMatcher::matchCurrency(this, a2, a3, a4);
  if (*((_WORD *)a3 + 104))
  {
    if ((icu::numparse::impl::ParsedNumber::seenNumber(a3) & 1) == 0 && *((unsigned __int16 *)this + 336) >= 0x20u)
    {
      int v15 = icu::StringSegment::getCommonPrefixLength(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 664));
      int v16 = v15;
      unsigned int v17 = *((unsigned __int16 *)this + 336);
      if ((v17 & 0x8000) != 0) {
        int v18 = (uint64_t *)*((unsigned int *)this + 169);
      }
      else {
        int v18 = (uint64_t *)(v17 >> 5);
      }
      if (v15 == v18) {
        icu::StringSegment::adjustOffset((uint64_t)a2, v15);
      }
      return (matched & 1) != 0 || v16 == icu::StringSegment::length(v18, a2);
    }
  }
  else
  {
    icu::StringSegment::setOffset((uint64_t)a2, Offset);
  }
  return matched;
}

uint64_t icu::numparse::impl::CombinedCurrencyMatcher::matchCurrency(icu::numparse::impl::CombinedCurrencyMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = (uint64_t *)*((unsigned __int16 *)this + 12);
  if (v8 < 0x20) {
    int CaseSensitivePrefixLength = -1;
  }
  else {
    int CaseSensitivePrefixLength = icu::StringSegment::getCaseSensitivePrefixLength(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 16));
  }
  unsigned int v10 = icu::StringSegment::length(v8, a2);
  char v11 = CaseSensitivePrefixLength == v10;
  unsigned int v12 = *((unsigned __int16 *)this + 12);
  if ((v12 & 0x8000) != 0) {
    unsigned int v13 = *((_DWORD *)this + 7);
  }
  else {
    unsigned int v13 = v12 >> 5;
  }
  if (CaseSensitivePrefixLength == v13)
  {
    int v14 = *((_DWORD *)this + 2);
    *((_WORD *)a3 + 106) = *((_WORD *)this + 6);
    *((_DWORD *)a3 + 52) = v14;
    *((_WORD *)a3 + 107) = 0;
    int v15 = a2;
    int v16 = CaseSensitivePrefixLength;
LABEL_20:
    icu::StringSegment::adjustOffset((uint64_t)v15, v16);
    icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
    return v11 & 1;
  }
  unsigned int v17 = (uint64_t *)*((unsigned __int16 *)this + 44);
  if (v17 < 0x20) {
    int CommonPrefixLength = -1;
  }
  else {
    int CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 80));
  }
  char v11 = CaseSensitivePrefixLength == v10 || CommonPrefixLength == icu::StringSegment::length(v17, a2);
  if (*((__int16 *)this + 44) < 0) {
    int v19 = *((_DWORD *)this + 23);
  }
  else {
    int v19 = *((unsigned __int16 *)this + 44) >> 5;
  }
  if (CommonPrefixLength == v19)
  {
    int v20 = *((_DWORD *)this + 2);
    *((_WORD *)a3 + 106) = *((_WORD *)this + 6);
    *((_DWORD *)a3 + 52) = v20;
    *((_WORD *)a3 + 107) = 0;
    int v15 = a2;
    int v16 = CommonPrefixLength;
    goto LABEL_20;
  }
  if (*((unsigned char *)this + 144))
  {
    memset(v36, 0, sizeof(v36));
    icu::StringSegment::toTempUnicodeString(a2, (uint64_t)v36);
    uint64_t v34 = &unk_1EDA44670;
    *(void *)uint64_t v35 = 0xFFFFFFFF00000000;
    int v33 = 0;
    uprv_parseCurrency(*((char **)this + 99), (uint64_t)v36, (uint64_t)&v34, 0, &v33, (UChar *)a3 + 104, (int *)a4);
    if (v11)
    {
      char v11 = 1;
    }
    else
    {
      int v31 = v33;
      char v11 = v31 == icu::StringSegment::length(v22, a2);
    }
    if (*(int *)a4 <= 0 && v35[0])
    {
      icu::StringSegment::adjustOffset((uint64_t)a2, v35[0]);
      icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v34);
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v36);
  }
  else
  {
    uint64_t v23 = 0;
    int v24 = 0;
    do
    {
      int v25 = icu::StringSegment::getCommonPrefixLength(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + v23 + 152));
      unsigned int v26 = *(unsigned __int16 *)((char *)this + v23 + 160);
      if ((v26 & 0x8000) != 0) {
        BOOL v28 = v25 == *(_DWORD *)((char *)this + v23 + 164) && v25 > v24;
      }
      else {
        BOOL v28 = v25 == v26 >> 5 && v24 < v25;
      }
      if (v28) {
        int v24 = v25;
      }
      v11 |= v25 > 0;
      v23 += 64;
    }
    while (v23 != 512);
    if (v24 >= 1)
    {
      int v30 = *((_DWORD *)this + 2);
      *((_WORD *)a3 + 106) = *((_WORD *)this + 6);
      *((_DWORD *)a3 + 52) = v30;
      *((_WORD *)a3 + 107) = 0;
      int v15 = a2;
      int v16 = v24;
      goto LABEL_20;
    }
  }
  return v11 & 1;
}

uint64_t icu::numparse::impl::CombinedCurrencyMatcher::smokeTest()
{
  return 1;
}

uint64_t icu::numparse::impl::CombinedCurrencyMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18C98CDA4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA503C0;
  uint64_t v2 = (void *)*(unsigned __int8 *)(a1 + 804);
  if (*(unsigned char *)(a1 + 804)) {
    uprv_free(*(void **)(a1 + 792));
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 728));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 664));
  for (uint64_t i = 600; i != 88; i -= 64)
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 16));

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C98CE3C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA503C0;
  uint64_t v2 = (void *)*(unsigned __int8 *)(a1 + 804);
  if (*(unsigned char *)(a1 + 804)) {
    uprv_free(*(void **)(a1 + 792));
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 728));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 664));
  for (uint64_t i = 600; i != 88; i -= 64)
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 16));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v7);
}

uint64_t sub_18C98CED8(uint64_t a1, uint64_t a2, icu::number::impl::Grouper *a3, char a4)
{
  unsigned char v42[8] = *(UChar **)MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EDA50440;
  unsigned int v8 = (UChar **)(a1 + 16);
  *(void *)(a1 + 16) = &unk_1EDA47700;
  *(_WORD *)(a1 + 24) = 2;
  *(void *)(a1 + 80) = &unk_1EDA47700;
  *(_WORD *)(a1 + 88) = 2;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  if ((a4 & 2) != 0)
  {
    icu::UnicodeString::operator=(v8, (UChar **)(a2 + 1096));
    unsigned int v9 = (UChar **)(a2 + 648);
  }
  else
  {
    unsigned int v9 = (UChar **)(a2 + 8);
    icu::UnicodeString::operator=(v8, (UChar **)(a2 + 72));
  }
  icu::UnicodeString::operator=((UChar **)(a1 + 80), v9);
  if ((a4 & 4) != 0) {
    int v10 = 10;
  }
  else {
    int v10 = 9;
  }
  if ((a4 & 4) != 0) {
    uint64_t v11 = 5;
  }
  else {
    uint64_t v11 = 3;
  }
  if ((a4 & 4) != 0) {
    unsigned int v12 = 6;
  }
  else {
    unsigned int v12 = 4;
  }
  *(void *)(a1 + 144) = icu::unisets::get(v10);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v42, (UChar **)(a1 + 80));
  int v13 = icu::unisets::chooseFrom(v42, v11, v12);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v42);
  if (v13 < 0)
  {
    uint64_t v21 = (uint64_t *)*(unsigned __int16 *)(a1 + 88);
    if (v21 < 0x20)
    {
      *(void *)(a1 + 152) = icu::unisets::get(0);
    }
    else
    {
      int v22 = (icu::UnicodeSet *)icu::UMemory::operator new(v21, (icu::UMemory *)0xC8, v15);
      int v24 = v22;
      if (v22) {
        icu::UnicodeSet::UnicodeSet(v22);
      }
      unsigned int v25 = icu::UnicodeString::char32At(v23, (icu::UnicodeString *)(a1 + 80), 0);
      icu::UnicodeSet::add(v24, v25);
      icu::UnicodeSet::freeze(v24);
      *(void *)(a1 + 152) = v24;
      sub_18C98D228((icu::UnicodeSet **)(a1 + 176), v24, v26);
    }
    uint64_t v29 = (icu::UnicodeSet *)icu::UMemory::operator new(v28, (icu::UMemory *)0xC8, v27);
    int v30 = (icu::UVector **)v29;
    if (v29) {
      icu::UnicodeSet::UnicodeSet(v29);
    }
    icu::UnicodeSet::addAll(v30, *(const icu::UnicodeSet **)(a1 + 144));
    icu::UnicodeSet::addAll(v30, *(const icu::UnicodeSet **)(a1 + 152));
    icu::UnicodeSet::freeze((icu::UnicodeSet *)v30);
    *(void *)(a1 + 160) = v30;
    sub_18C98D228((icu::UnicodeSet **)(a1 + 184), (icu::UnicodeSet *)v30, v31);
    int v19 = 0;
  }
  else
  {
    int v16 = icu::unisets::get(v13);
    uint64_t v17 = *(void *)(a1 + 144);
    *(void *)(a1 + 152) = v16;
    *(void *)(a1 + 160) = v17;
    if ((a4 & 4) != 0) {
      int v18 = 22;
    }
    else {
      int v18 = 23;
    }
    int v19 = icu::unisets::get(v18);
  }
  *(void *)(a1 + 168) = v19;
  UChar32 v32 = *(_DWORD *)(a2 + 1928);
  if (v32 == -1 || !u_isdigit(*(_DWORD *)(a2 + 1928)) || u_digit(v32, 10))
  {
    int v33 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x290, v20);
    if (v33)
    {
      _OWORD *v33 = xmmword_18CA92280;
      uint64_t v34 = (char *)(v33 + 1);
      uint64_t v35 = v33 + 1;
      int v36 = v33 + 1;
      do
      {
        *(void *)int v36 = &unk_1EDA47700;
        *((_WORD *)v36 + 4) = 2;
        v35 += 4;
        v36 += 4;
      }
      while (v36 != v33 + 41);
    }
    else
    {
      uint64_t v34 = 0;
    }
    sub_18C973748((void **)(a1 + 192), v34);
    uint64_t v37 = 0;
    int v38 = (UChar **)(a2 + 264);
    uint64_t v39 = a2 + 1096;
    do
    {
      if (v37) {
        unint64_t v40 = (UChar **)(v39 + v37);
      }
      else {
        unint64_t v40 = v38;
      }
      icu::UnicodeString::operator=((UChar **)&v34[v37], v40);
      v37 += 64;
    }
    while (v37 != 640);
  }
  *(unsigned char *)(a1 + 8) = (a4 & 8) != 0;
  *(unsigned char *)(a1 + 9) = (a4 & 0x20) != 0;
  *(unsigned char *)(a1 + 10) = (a4 & 0x10) != 0;
  *(_WORD *)(a1 + 12) = icu::number::impl::Grouper::getPrimary(a3);
  *(_WORD *)(a1 + 14) = icu::number::impl::Grouper::getSecondary(a3);
  return a1;
}

void sub_18C98D228(icu::UnicodeSet **a1@<X0>, icu::UnicodeSet *a2@<X1>, void *a3@<X8>)
{
  unsigned __int16 v5 = *a1;
  if (v5)
  {
    unsigned int v6 = icu::UnicodeSet::~UnicodeSet(a3, v5);
    icu::UMemory::operator delete(v6);
  }
  *a1 = a2;
}

uint64_t sub_18C98D264(uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  return sub_18C98D26C(a1, a2, a3, 0);
}

uint64_t sub_18C98D26C(uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this, int a4)
{
  unsigned __int16 v5 = this;
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  char v8 = icu::numparse::impl::ParsedNumber::seenNumber(this);
  if (a4 || (v8 & 1) == 0)
  {
    int Offset = icu::StringSegment::getOffset(a2);
    uint64_t v81 = 0;
    memset(v80, 0, sizeof(v80));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v80);
    BYTE8(v80[0]) = 1;
    long long v89 = 0u;
    uint64_t v92 = 0;
    long long v91 = 0u;
    long long v90 = 0u;
    uint64_t v88 = (UChar *)&unk_1EDA47700;
    LOWORD(v89) = 2;
    long long v84 = 0u;
    uint64_t v87 = 0;
    long long v86 = 0u;
    long long v85 = 0u;
    uint64_t v83 = (UChar *)&unk_1EDA47700;
    LOWORD(v84) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v88);
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v83);
    if ((int)icu::StringSegment::length(v11, a2) < 1)
    {
      unsigned int v75 = 0;
      unsigned int v79 = 0;
      unsigned int v56 = 0;
      int v44 = 0;
      int v12 = 0;
      int v57 = -1;
      int v45 = -1;
      int v46 = -1;
      goto LABEL_152;
    }
    int v69 = Offset;
    int v70 = a4;
    int v12 = 0;
    uint64_t v13 = 0;
    unsigned __int8 v73 = (UChar **)(a1 + 80);
    long long v71 = v5;
    int v72 = (icu::UnicodeString *)(a1 + 16);
    int v77 = 0;
    int v78 = -1;
    unsigned int v75 = 0;
    int v76 = -1;
    int v74 = -1;
LABEL_6:
    uint64_t v14 = v13;
    int v15 = v12;
    unsigned int CodePoint = icu::StringSegment::getCodePoint(a2);
    if (u_isdigit(CodePoint))
    {
      int v17 = CodePoint < 0x10000 ? 1 : 2;
      icu::StringSegment::adjustOffset((uint64_t)a2, v17);
      char v18 = u_digit(CodePoint, 10);
      if (v18 != -1)
      {
        BOOL v19 = 0;
        if ((v18 & 0x80) == 0)
        {
          LOBYTE(v20) = v18;
          goto LABEL_43;
        }
        unsigned int v79 = v14;
LABEL_38:
        if ((v84 & 1) != 0
          && *(unsigned __int16 *)(a1 + 88) >= 0x20u
          && ((int CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)v73), v19)
            ? (BOOL v19 = 1)
            : (BOOL v19 = CommonPrefixLength == icu::StringSegment::length(v28, a2)),
              *(__int16 *)(a1 + 88) < 0 ? (int v31 = *(_DWORD *)(a1 + 92)) : (int v31 = *(unsigned __int16 *)(a1 + 88) >> 5),
              CommonPrefixLength == v31))
        {
          icu::UnicodeString::operator=(&v83, v73);
          int v32 = 1;
        }
        else
        {
          int v32 = 0;
        }
        char v33 = v89;
        if (v89)
        {
          BOOL v36 = 0;
        }
        else
        {
          int v35 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)&v88);
          BOOL v19 = v19 || v35 == icu::StringSegment::length(v34, a2);
          char v33 = v89;
          if ((v89 & 0x8000u) == 0) {
            int v37 = (unsigned __int16)v89 >> 5;
          }
          else {
            int v37 = DWORD1(v89);
          }
          BOOL v36 = v35 == v37;
        }
        if (!*(unsigned char *)(a1 + 9) && (v33 & 1) != 0 && (v84 & 1) != 0 && *(unsigned __int16 *)(a1 + 24) >= 0x20u)
        {
          int v39 = icu::StringSegment::getCommonPrefixLength(a2, v72);
          BOOL v19 = v19 || v39 == icu::StringSegment::length(v38, a2);
          int v40 = *(__int16 *)(a1 + 24) < 0 ? *(_DWORD *)(a1 + 28) : *(unsigned __int16 *)(a1 + 24) >> 5;
          if (v39 == v40)
          {
            icu::UnicodeString::operator=(&v88, (UChar **)v72);
            goto LABEL_78;
          }
        }
        if (v36)
        {
LABEL_78:
          int v41 = 1;
        }
        else if ((v84 & 1) != 0 && icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 152), CodePoint))
        {
          icu::UnicodeString::UnicodeString((uint64_t)v82, CodePoint);
          icu::UnicodeString::operator=((icu::UnicodeString *)&v83, (icu::UnicodeString *)v82);
          icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v82);
          int v41 = 0;
          int v32 = 1;
        }
        else
        {
          int v41 = 0;
        }
        if (!*(unsigned char *)(a1 + 9)
          && (v89 & 1) != 0
          && (v84 & 1) != 0
          && icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 144), CodePoint))
        {
          icu::UnicodeString::UnicodeString((uint64_t)v82, CodePoint);
          icu::UnicodeString::operator=((icu::UnicodeString *)&v88, (icu::UnicodeString *)v82);
          icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)v82);
          int v41 = 1;
          int v45 = v76;
          int v44 = v77;
          goto LABEL_89;
        }
        int v45 = v76;
        int v44 = v77;
        if ((v41 | v32) == 1)
        {
LABEL_89:
          int v46 = v78;
          if (!v32 || !*(unsigned char *)(a1 + 10))
          {
            if (v44 == 2) {
              char v47 = v41;
            }
            else {
              char v47 = 0;
            }
            if (v47)
            {
              int v44 = 2;
            }
            else
            {
              if (*(unsigned char *)(a1 + 8))
              {
                uint64_t v48 = v79;
                if (v45 == 1)
                {
                  BOOL v49 = v78 == *(__int16 *)(a1 + 14);
                }
                else if (v45)
                {
                  BOOL v49 = 1;
                }
                else
                {
                  BOOL v49 = v78 <= *(__int16 *)(a1 + 14);
                }
                BOOL v52 = v44 != 1 || v15 == *(__int16 *)(a1 + 12);
              }
              else
              {
                BOOL v49 = v45 != 1 || v78 != 1;
                BOOL v52 = v44 != 1 || v15 != 1;
                uint64_t v48 = v79;
              }
              if (v49 && ((v32 ^ 1 | v52) & 1) != 0)
              {
                if (!*(unsigned char *)(a1 + 8) || v15 || v44 != 1)
                {
                  if (v32) {
                    int v53 = -1;
                  }
                  else {
                    int v53 = v44;
                  }
                  int v76 = v53;
                  uint64_t v13 = v48;
                  if (v15) {
                    uint64_t v13 = icu::StringSegment::getOffset(a2);
                  }
                  if (v41)
                  {
                    if ((v89 & 0x8000u) == 0) {
                      int v54 = (unsigned __int16)v89 >> 5;
                    }
                    else {
                      int v54 = DWORD1(v89);
                    }
                    icu::StringSegment::adjustOffset((uint64_t)a2, v54);
                    int v12 = 0;
                    uint64_t v30 = 1;
                  }
                  else
                  {
                    if ((v84 & 0x8000u) == 0) {
                      int v55 = (unsigned __int16)v84 >> 5;
                    }
                    else {
                      int v55 = DWORD1(v84);
                    }
                    icu::StringSegment::adjustOffset((uint64_t)a2, v55);
                    int v12 = 0;
                    uint64_t v30 = 2;
                  }
                  int v77 = v30;
                  int v78 = v15;
                  int v74 = v48;
                  goto LABEL_137;
                }
                unsigned int v79 = v48;
                int v15 = 0;
              }
              else
              {
                BOOL v58 = v15 == 0;
                char v59 = v41 & v58;
                if ((v41 & v58) != 0) {
                  int v60 = 0;
                }
                else {
                  int v60 = v15;
                }
                unsigned int v79 = v48;
                if ((v59 & 1) != 0 || !*(unsigned char *)(a1 + 8))
                {
                  int v15 = v60;
                }
                else
                {
                  icu::number::impl::DecimalQuantity::clear((void **)v80);
                  int v46 = v78;
                  BYTE8(v80[0]) = 1;
                }
              }
            }
          }
        }
        else
        {
          int v46 = v78;
        }
        unsigned int v56 = v19;
        int v12 = v15;
        unsigned __int16 v5 = v71;
        int Offset = v69;
        a4 = v70;
LABEL_151:
        int v57 = v74;
LABEL_152:
        if (v44 != 2 && !v12)
        {
          int v12 = v46;
          icu::StringSegment::setOffset((uint64_t)a2, v79);
          unsigned int v56 = 1;
          unsigned int v79 = v57;
          int v44 = v45;
          int v57 = -1;
          int v46 = 1;
          int v45 = 0;
        }
        if (*(unsigned char *)(a1 + 8))
        {
          if (v45 == 1)
          {
            uint64_t v61 = v46 == *(__int16 *)(a1 + 14);
          }
          else if (v45)
          {
            uint64_t v61 = 1;
          }
          else
          {
            uint64_t v61 = v46 <= *(__int16 *)(a1 + 14);
          }
          if (v44 == 1)
          {
            BOOL v63 = v12 != *(__int16 *)(a1 + 12);
            if (!v61)
            {
LABEL_180:
              uint64_t v9 = 1;
              BYTE8(v80[0]) = 1;
              if ((v56 & 1) == 0) {
LABEL_181:
              }
                uint64_t v9 = icu::StringSegment::length((uint64_t *)v61, a2) == 0;
LABEL_182:
              icu::StringSegment::setOffset((uint64_t)a2, Offset);
LABEL_191:
              icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)&v83);
              icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v88);
              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v80);
              return v9;
            }
            goto LABEL_176;
          }
LABEL_174:
          if (v44 == 2) {
            goto LABEL_177;
          }
          BOOL v63 = 0;
          if (!v61) {
            goto LABEL_180;
          }
LABEL_176:
          if (v63) {
            goto LABEL_180;
          }
LABEL_177:
          uint64_t v61 = BYTE8(v80[0]);
          if (!BYTE8(v80[0]))
          {
            icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v80, -v75);
            if (a4 && icu::StringSegment::getOffset(a2) != Offset)
            {
              if (!icu::number::impl::DecimalQuantity::fitsInLong((icu::number::impl::DecimalQuantity *)v80, 0)
                || (uint64_t v68 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v80, 0),
                    v68 > 0x7FFFFFFF)
                || icu::number::impl::DecimalQuantity::adjustMagnitude(v5, v68 * a4))
              {
                if (a4 == -1)
                {
                  icu::number::impl::DecimalQuantity::clear((void **)v5);
                }
                else
                {
                  *((unsigned char *)v5 + 8) = 1;
                  *((_DWORD *)v5 + 19) |= 0x80u;
                }
              }
            }
            else
            {
              icu::number::impl::DecimalQuantity::operator=(v5, (uint64_t)v80);
            }
            if ((v84 & 1) == 0) {
              *((_DWORD *)v5 + 19) |= 0x20u;
            }
            icu::numparse::impl::ParsedNumber::setCharsConsumed(v5, a2);
            if (icu::StringSegment::length(v65, a2)) {
              uint64_t v9 = v56;
            }
            else {
              uint64_t v9 = 1;
            }
            goto LABEL_191;
          }
          if ((v56 & 1) == 0) {
            goto LABEL_181;
          }
          uint64_t v9 = 1;
          goto LABEL_182;
        }
        if (v45 == 1 && v46 == 1)
        {
          icu::StringSegment::setOffset((uint64_t)a2, v57);
          if (v12 == -1)
          {
LABEL_173:
            uint64_t v61 = 1;
            goto LABEL_174;
          }
          int v62 = ~v12;
        }
        else
        {
          uint64_t v61 = 1;
          if (v44 != 1 || v12 != 1 || !(v46 | v45)) {
            goto LABEL_174;
          }
          icu::StringSegment::setOffset((uint64_t)a2, v79);
          unsigned int v56 = 1;
          int v62 = -1;
        }
        icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v80, v62);
        icu::number::impl::DecimalQuantity::truncate((icu::number::impl::DecimalQuantity *)v80);
        goto LABEL_173;
      }
    }
    unsigned int v79 = v14;
    if (!*(void *)(a1 + 192))
    {
      BOOL v19 = 0;
      goto LABEL_38;
    }
    uint64_t v21 = 0;
    uint64_t v20 = 0;
    BOOL v19 = 0;
    while (1)
    {
      uint64_t v22 = *(void *)(a1 + 192);
      if (*(unsigned __int16 *)(v22 + v21 + 8) < 0x20u) {
        goto LABEL_34;
      }
      if (!icu::StringSegment::startsWith(a2, 38646)) {
        break;
      }
      uint64_t v23 = *(void *)(a1 + 192);
      unsigned int v24 = *(unsigned __int16 *)(v23 + 8);
      if (*(__int16 *)(v23 + 8) < 0)
      {
        if (!*(_DWORD *)(v23 + 12)) {
          break;
        }
      }
      else if (!(v24 >> 5))
      {
        break;
      }
      unsigned int v25 = (v24 & 2) != 0 ? (_WORD *)(v23 + 10) : *(_WORD **)(v23 + 24);
      if (*v25 != 12295) {
        break;
      }
      int v26 = 1;
LABEL_27:
      if (*(__int16 *)(v22 + v21 + 8) < 0) {
        unint64_t v27 = (uint64_t *)*(unsigned int *)(v22 + v21 + 12);
      }
      else {
        unint64_t v27 = (uint64_t *)(*(unsigned __int16 *)(v22 + v21 + 8) >> 5);
      }
      if (v26 == v27)
      {
        icu::StringSegment::adjustOffset((uint64_t)a2, v26);
        uint64_t v14 = v79;
LABEL_43:
        if (BYTE8(v80[0]))
        {
          BYTE8(v80[0]) = 0;
          icu::number::impl::DecimalQuantity::clear((void **)v80);
        }
        icu::number::impl::DecimalQuantity::appendDigit((icu::number::impl::DecimalQuantity *)v80, (char)v20, 0, 1);
        int v12 = v15 + 1;
        if (v84) {
          uint64_t v30 = v75;
        }
        else {
          uint64_t v30 = v75 + 1;
        }
        unsigned int v75 = v30;
        uint64_t v13 = v14;
LABEL_137:
        if ((int)icu::StringSegment::length((uint64_t *)v30, a2) <= 0)
        {
          unsigned int v56 = v19;
          unsigned int v79 = v13;
          unsigned __int16 v5 = v71;
          int Offset = v69;
          a4 = v70;
          int v45 = v76;
          int v44 = v77;
          int v46 = v78;
          goto LABEL_151;
        }
        goto LABEL_6;
      }
      BOOL v19 = v19 || v26 == icu::StringSegment::length(v27, a2);
LABEL_34:
      ++v20;
      v21 += 64;
      if (v20 == 10) {
        goto LABEL_38;
      }
    }
    int v26 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(v22 + v21));
    goto LABEL_27;
  }
  return 0;
}

BOOL sub_18C98DBB4(const icu::UnicodeSet **a1, icu::StringSegment *this)
{
  if (a1[24] || (unsigned int v6 = a1[21]) == 0)
  {
    if (icu::StringSegment::startsWith(this, a1[20])) {
      return 1;
    }
    UChar32 CodePoint = icu::StringSegment::getCodePoint(this);
    if (u_isdigit(CodePoint)) {
      return 1;
    }
    if (!a1[24]) {
      return 0;
    }
    if (icu::StringSegment::startsWith(this, 38646))
    {
      uint64_t v7 = a1[24];
      __int16 v8 = *((_WORD *)v7 + 4);
      if (v8 < 0)
      {
        if (*((_DWORD *)v7 + 3) != 1) {
          goto LABEL_20;
        }
      }
      else if ((v8 & 0xFFE0) != 0x20)
      {
        goto LABEL_20;
      }
      if ((v8 & 2) != 0) {
        uint64_t v9 = (_WORD *)((char *)v7 + 10);
      }
      else {
        uint64_t v9 = (_WORD *)*((void *)v7 + 3);
      }
      if (*v9 == 12295) {
        return 1;
      }
    }
LABEL_20:
    if (!icu::StringSegment::startsWith(this, a1[24]))
    {
      unint64_t v10 = 0;
      uint64_t v11 = 64;
      do
      {
        unint64_t v12 = v10;
        if (v10 == 9) {
          break;
        }
        BOOL v13 = icu::StringSegment::startsWith(this, (const icu::UnicodeSet *)((char *)a1[24] + v11));
        v11 += 64;
        unint64_t v10 = v12 + 1;
      }
      while (!v13);
      return v12 < 9;
    }
    return 1;
  }

  return icu::StringSegment::startsWith(this, v6);
}

uint64_t sub_18C98DCF0@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18C98DD00(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA50440;
  uint64_t v2 = (icu::UnicodeString *)(a1 + 16);
  sub_18C7F9F20((uint64_t *)(a1 + 192));
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 184), v3);
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 176), v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, v2);

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C98DD7C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA50440;
  uint64_t v2 = (icu::UnicodeString *)(a1 + 16);
  sub_18C7F9F20((uint64_t *)(a1 + 192));
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 184), v3);
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 176), v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, v2);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v7);
}

icu::UnicodeSet **sub_18C98DDFC@<X0>(icu::UnicodeSet **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    int v4 = icu::UnicodeSet::~UnicodeSet(a2, v3);
    icu::UMemory::operator delete(v4);
  }
  return a1;
}

uint64_t icu::numparse::impl::NumberParserImpl::createSimpleParser(icu::numparse::impl::NumberParserImpl *this, const icu::Locale *a2, const icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  uint64_t v5 = MEMORY[0x1F4188790](this);
  int v54 = (UChar **)v6;
  int v55 = v7;
  unsigned int v9 = v8;
  unint64_t v10 = (const icu::Locale *)v5;
  unsigned int v102 = (uint64_t *)*MEMORY[0x1E4F143B8];
  uint64_t v11 = (icu::numparse::impl::NumberParserImpl *)icu::UMemory::operator new(v102, (icu::UMemory *)0x1460, v6);
  uint64_t v12 = (uint64_t)v11;
  if (v11) {
    icu::numparse::impl::NumberParserImpl::NumberParserImpl(v11, v9);
  }
  bzero(v101, 0xB48uLL);
  icu::DecimalFormatSymbols::DecimalFormatSymbols((icu::DecimalFormatSymbols *)v101, v10, v55);
  icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher((icu::numparse::impl::IgnorablesMatcher *)&v94, v9);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 128), (icu::UnicodeString *)v95);
  BOOL v13 = v96;
  *(void *)(v12 + 192) = v96;
  long long v94 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v95);
  bzero(&v94, 0xB48uLL);
  icu::DecimalFormatSymbols::DecimalFormatSymbols((icu::DecimalFormatSymbols *)&v94, v10, v55);
  icu::UnicodeString::UnicodeString((uint64_t)&v62, (uint64_t)"I");
  char v99 = 1;
  icu::UnicodeString::operator=(&v97, &v62);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v62);
  icu::UnicodeString::UnicodeString((uint64_t)&v62, (uint64_t)"I");
  char v100 = 1;
  icu::UnicodeString::operator=(&v98, &v62);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v62);
  uint64_t v93 = 0;
  memset(v92, 0, sizeof(v92));
  long long v91 = 0u;
  long long v90 = 0u;
  long long v89 = 0u;
  long long v88 = 0u;
  memset(v87, 0, sizeof(v87));
  char v59 = "I";
  icu::CurrencyUnit::CurrencyUnit(v60, &v59, v55);
  icu::number::impl::CurrencySymbols::CurrencySymbols((uint64_t)v87, v60, (uint64_t)v10, (uint64_t)&v94, v55);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v60);
  uint64_t v86 = 0;
  memset(v85, 0, sizeof(v85));
  sub_18C962AE4((uint64_t)v85);
  icu::number::impl::PatternParser::parseToPatternInfo(v54, (const icu::UnicodeString *)v85, v55, v16);
  v58[3] = v10;
  v58[0] = v87;
  v58[1] = v101;
  v58[2] = v12 + 120;
  v58[4] = v9;
  icu::numparse::impl::AffixTokenMatcherWarehouse::AffixTokenMatcherWarehouse(&v62, v58);
  sub_18C98EA38(v12 + 3856, (uint64_t)&v62);
  sub_18C990858(&v62);
  sub_18C98A824(&v62, v12 + 3856);
  sub_18C98EB3C(v12 + 2312, (uint64_t)&v62);
  for (uint64_t i = 0; i != -120; i -= 10)
  {
    char v18 = &(&v62)[i];
    *(void *)&v84[i * 8] = &unk_1EDA50140;
    if (v84[i * 8 + 68]) {
      uprv_free(v18[189]);
    }
    v18[182] = (UChar *)&unk_1EDA502B8;
    if (*((unsigned char *)v18 + 1476)) {
      uprv_free(*(void **)&v84[i * 8 + 8]);
    }
  }
  sub_18C98AB20(v12 + 2312, (uint64_t)v85, v12, (icu::numparse::impl::SymbolMatcher *)(v12 + 120), (icu::numparse::impl::AffixTokenMatcherWarehouse *)v9, (int *)v55);
  uint64_t v56 = icu::number::impl::Grouper::forStrategy(2);
  int v57 = v19;
  icu::number::impl::Grouper::setLocaleData((icu::number::impl::Grouper *)&v56, (const icu::number::impl::ParsedPatternInfo *)v85, v10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 120);
  sub_18C98D260(&v62, v101, &v56, v9);
  *(void *)(v12 + 784) = v63;
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 792), (icu::UnicodeString *)v64);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 856), (icu::UnicodeString *)&v66);
  long long v20 = v68[1];
  *(_OWORD *)(v12 + 920) = v68[0];
  *(_OWORD *)(v12 + 936) = v20;
  sub_18C990A10((icu::UnicodeSet **)(v12 + 952), &v69, v21);
  sub_18C990A10((icu::UnicodeSet **)(v12 + 960), &v70, v22);
  sub_18C990A54((void **)(v12 + 968), v71);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 776);
  int v62 = (UChar *)&unk_1EDA50440;
  sub_18C7F9F20((uint64_t *)v71);
  if (v70)
  {
    unsigned int v24 = icu::UnicodeSet::~UnicodeSet(v23, v70);
    icu::UMemory::operator delete(v24);
  }
  if (v69)
  {
    unsigned int v25 = icu::UnicodeSet::~UnicodeSet(v23, v69);
    icu::UMemory::operator delete(v25);
  }
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v66);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v64);
  icu::numparse::impl::MinusSignMatcher::MinusSignMatcher((icu::numparse::impl::MinusSignMatcher *)&v62, v101, 0);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 288), (icu::UnicodeString *)&v63);
  *(void *)(v12 + 352) = v65;
  *(unsigned char *)(v12 + 360) = v66;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 280);
  int v62 = (UChar *)&unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v63);
  icu::numparse::impl::PlusSignMatcher::PlusSignMatcher((icu::numparse::impl::PlusSignMatcher *)&v62, v101, 0);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 696), (icu::UnicodeString *)&v63);
  *(void *)(v12 + 760) = v65;
  *(unsigned char *)(v12 + 768) = v66;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 688);
  int v62 = (UChar *)&unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v63);
  icu::numparse::impl::PercentMatcher::PercentMatcher((icu::numparse::impl::PercentMatcher *)&v62, v101);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 536), (icu::UnicodeString *)&v63);
  *(void *)(v12 + 600) = v65;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 528);
  int v62 = (UChar *)&unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v63);
  icu::numparse::impl::PermilleMatcher::PermilleMatcher((icu::numparse::impl::PermilleMatcher *)&v62, v101);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 616), (icu::UnicodeString *)&v63);
  *(void *)(v12 + 680) = v65;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 608);
  int v62 = (UChar *)&unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v63);
  sub_18C991E60((uint64_t)&v62, (uint64_t)v101);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 376), (icu::UnicodeString *)&v63);
  *(void *)(v12 + 4icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = v65;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 368);
  int v62 = (UChar *)&unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v63);
  sub_18C991D40((uint64_t)&v62, (uint64_t)v101);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 208), (icu::UnicodeString *)&v63);
  *(void *)(v12 + 272) = v65;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 200);
  int v62 = (UChar *)&unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v63);
  icu::UnicodeString::UnicodeString((uint64_t)v61, (uint64_t)"@");
  sub_18C991EB8((uint64_t)&v62, v61);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 456), (icu::UnicodeString *)&v63);
  *(void *)(v12 + 520) = v65;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 448);
  int v62 = (UChar *)&unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v63);
  icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v61);
  sub_18C9915B4(&v62, v101, &v56);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 984), (icu::UnicodeString *)&v63);
  *(void *)(v12 + 1056) = v66;
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 1064), (icu::UnicodeString *)v67);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 1128), (icu::UnicodeString *)((char *)v68 + 8));
  *(_OWORD *)(v12 + 1192) = v72;
  *(_OWORD *)(v12 + 1208) = v73;
  sub_18C990A10((icu::UnicodeSet **)(v12 + 1224), &v74, v35);
  sub_18C990A10((icu::UnicodeSet **)(v12 + 1232), &v75, v36);
  sub_18C990A54((void **)(v12 + 1240), v76);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 1256), (icu::UnicodeString *)v77);
  *(void *)(v12 + 1320) = v77[8];
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 1328), (icu::UnicodeString *)v78);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 1392), (icu::UnicodeString *)v79);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 976);
  int v62 = (UChar *)&unk_1EDA50578;
  icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)v79);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v78);
  v76[1] = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)v77);
  unsigned int v65 = &unk_1EDA50440;
  sub_18C7F9F20((uint64_t *)v76);
  if (v75)
  {
    int v41 = icu::UnicodeSet::~UnicodeSet(v40, v75);
    icu::UMemory::operator delete(v41);
  }
  if (v74)
  {
    uint64_t v42 = icu::UnicodeSet::~UnicodeSet(v40, v74);
    icu::UMemory::operator delete(v42);
  }
  icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)((char *)v68 + 8));
  icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)v67);
  icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v63);
  icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher((icu::numparse::impl::CombinedCurrencyMatcher *)&v62, (const icu::number::impl::CurrencySymbols *)v87, (const icu::DecimalFormatSymbols *)v101, v9, v55);
  *(void *)(v12 + 1464) = v63;
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 1472), (icu::UnicodeString *)v64);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 1536), (icu::UnicodeString *)&v66);
  *(unsigned char *)(v12 + 1600) = v68[0];
  for (uint64_t j = 201; j != 265; j += 8)
    icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + j * 8), (icu::UnicodeString *)&(&v62)[j - 91]);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 2120), (icu::UnicodeString *)v80);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v12 + 2184), (icu::UnicodeString *)v81);
  icu::CharString::operator=(v12 + 2248, (uint64_t)&v82);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 1456);
  int v62 = (UChar *)&unk_1EDA503C0;
  unint64_t v46 = v83;
  if (v83) {
    uprv_free(v82);
  }
  icu::UnicodeString::~UnicodeString((void *)v46, (icu::UnicodeString *)v81);
  icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)v80);
  for (uint64_t k = 75; k != 11; k -= 8)
    icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&(&v62)[k]);
  icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v66);
  icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)v64);
  int v62 = (UChar *)&unk_1EDA50BE8;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v12 + 5176);
  *(unsigned char *)(v12 + 112) = 1;
  sub_18C962BDC((void **)v85);
  icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)((char *)&v92[4] + 8));
  icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)((char *)v92 + 8));
  if (BYTE4(v89)) {
    uprv_free(*((void **)&v88 + 1));
  }
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)((char *)v87 + 8));
  icu::DecimalFormatSymbols::~DecimalFormatSymbols((icu::DecimalFormatSymbols *)&v94);
  icu::DecimalFormatSymbols::~DecimalFormatSymbols((icu::DecimalFormatSymbols *)v101);
  return v12;
}

uint64_t sub_18C98EA38(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 16), (icu::UnicodeString *)(a2 + 16));
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 104), (icu::UnicodeString *)(a2 + 104));
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 192), (icu::UnicodeString *)(a2 + 192));
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 272), (icu::UnicodeString *)(a2 + 272));
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 360), (icu::UnicodeString *)(a2 + 360));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 424), (icu::UnicodeString *)(a2 + 424));
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
  for (uint64_t i = 496; i != 1008; i += 64)
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + i), (icu::UnicodeString *)(a2 + i));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 1008), (icu::UnicodeString *)(a2 + 1008));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 1072), (icu::UnicodeString *)(a2 + 1072));
  icu::CharString::operator=(a1 + 1136, a2 + 1136);
  sub_18C950E84((int *)(a1 + 1200), (int *)(a2 + 1200));
  return a1;
}

uint64_t sub_18C98EB3C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 8; i != 584; i += 32)
  {
    uint64_t v5 = a1 + i;
    long long v6 = *(_OWORD *)(a2 + i);
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + i + 16);
    *(_OWORD *)uint64_t v5 = v6;
  }
  for (uint64_t j = 0; j != 960; j += 80)
  {
    uint64_t v8 = a1 + j;
    if (*(unsigned char *)(a1 + j + 596)) {
      uprv_free(*(void **)(v8 + 584));
    }
    uint64_t v9 = a2 + j;
    *(_DWORD *)(v8 + 592) = *(_DWORD *)(a2 + j + 592);
    *(unsigned char *)(v8 + 596) = *(unsigned char *)(a2 + j + 596);
    unint64_t v10 = *(const void **)(a2 + j + 584);
    uint64_t v11 = a2 + j + 600;
    if ((const void *)v11 == v10)
    {
      uint64_t v12 = (void *)(a1 + j + 600);
      *(void *)(v8 + 584) = v12;
      memcpy(v12, v10, 8 * *(int *)(v9 + 592));
    }
    else
    {
      *(void *)(v8 + 584) = v10;
      *(void *)(v9 + 584) = v11;
      *(_DWORD *)(v9 + 592) = 3;
      *(unsigned char *)(v9 + 596) = 0;
    }
    uint64_t v13 = a2 + j;
    uint64_t v14 = a1 + j;
    *(_DWORD *)(a1 + j + 624) = *(_DWORD *)(a2 + j + 624);
    if (*(unsigned char *)(a1 + j + 644)) {
      uprv_free(*(void **)(v14 + 632));
    }
    *(_DWORD *)(v14 + 6icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = *(_DWORD *)(v13 + 640);
    *(unsigned char *)(v14 + 644) = *(unsigned char *)(v13 + 644);
    int v15 = *(const void **)(v13 + 632);
    if ((const void *)(v13 + 646) == v15)
    {
      int v16 = (void *)(a1 + j + 646);
      *(void *)(v14 + 632) = v16;
      memcpy(v16, v15, 2 * *(int *)(v13 + 640));
    }
    else
    {
      *(void *)(v14 + 632) = v15;
      *(void *)(v13 + 632) = v13 + 646;
      *(_DWORD *)(v13 + 6icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = 4;
      *(unsigned char *)(v13 + 644) = 0;
    }
  }
  *(void *)(a1 + 1536) = *(void *)(a2 + 1536);
  return a1;
}

uint64_t icu::numparse::impl::NumberParserImpl::freeze(uint64_t this)
{
  *(unsigned char *)(this + 112) = 1;
  return this;
}

uint64_t icu::numparse::impl::NumberParserImpl::createParserFromProperties(icu::numparse::impl::NumberParserImpl *this, const icu::number::impl::DecimalFormatProperties *a2, const icu::DecimalFormatSymbols *a3, BOOL a4, UErrorCode *a5)
{
  uint64_t v5 = MEMORY[0x1F4188790](this);
  uint64_t v7 = v6;
  int v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v5;
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  memset(v132, 0, 224);
  icu::Locale::Locale((icu::Locale *)v132, (uint64_t)v10 + 1936);
  bzero(v122, 0x990uLL);
  v121[0] = &unk_1EDA4F2F0;
  v121[1] = &unk_1EDA47700;
  v122[0] = 2;
  long long v123 = &unk_1EDA47700;
  __int16 v124 = 2;
  long long v125 = &unk_1EDA47700;
  __int16 v126 = 2;
  v127 = &unk_1EDA47700;
  __int16 v128 = 2;
  char v129 = 1;
  sub_18C913BF0(v130);
  uint64_t v13 = *(icu::CurrencyPluralInfo **)(v12 + 48);
  if (v13)
  {
    char v129 = 1;
    sub_18C9762D0((uint64_t)v130, v13, (uint64_t *)v12, v7);
  }
  else
  {
    sub_18C975BB8((uint64_t)v121, v12, v7);
    char v131 = 1;
  }
  if (*(int *)v7 <= 0)
  {
    memset(v89, 0, sizeof(v89));
    sub_18C962FEC(v12, (uint64_t)v132, (uint64_t)v7, (icu::CurrencyUnit *)v89);
    uint64_t v120 = 0;
    memset(v119, 0, sizeof(v119));
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    memset(v114, 0, sizeof(v114));
    icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v88, v89);
    icu::number::impl::CurrencySymbols::CurrencySymbols((uint64_t)v114, v88, (uint64_t)v132, (uint64_t)v11, (UErrorCode *)v7);
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v88);
    if (*(unsigned char *)(v12 + 460)) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = *(_DWORD *)(v12 + 464) == 1;
    }
    int v17 = v16;
    uint64_t v14 = 0;
    unint64_t v86 = icu::number::impl::Grouper::forProperties((icu::number::impl::Grouper *)v12, v15);
    int v87 = v18;
    int v19 = (void *)*(unsigned int *)v7;
    if ((int)v19 <= 0)
    {
      int v20 = *(unsigned char *)(v12 + 456) == 0;
      if (*(unsigned char *)(v12 + 457)) {
        v20 |= 0x10u;
      }
      if (*(unsigned char *)(v12 + 756)) {
        v20 |= 0x400u;
      }
      if (v17) {
        int v21 = 33548;
      }
      else {
        int v21 = 128;
      }
      int v22 = v20 | v21;
      if ((int)icu::number::impl::Grouper::getPrimary((icu::number::impl::Grouper *)&v86) >= 1) {
        int v24 = v22;
      }
      else {
        int v24 = v22 | 0x20;
      }
      if (v9) {
        goto LABEL_27;
      }
      uint64_t v25 = 34;
      if (v131) {
        uint64_t v25 = 0;
      }
      if ((*(unsigned int (**)(void))(v121[v25] + 40))()) {
LABEL_27:
      }
        v24 |= 2u;
      int v75 = v17;
      uint64_t v76 = v12;
      int v77 = v9;
      if (v9) {
        unsigned int v26 = v24;
      }
      else {
        unsigned int v26 = v24 | 0x2000;
      }
      unint64_t v27 = (icu::numparse::impl::NumberParserImpl *)icu::UMemory::operator new((uint64_t *)(v24 | 0x2000u), (icu::UMemory *)0x1460, v23);
      uint64_t v14 = (uint64_t)v27;
      if (v27) {
        icu::numparse::impl::NumberParserImpl::NumberParserImpl(v27, v26);
      }
      icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher((icu::numparse::impl::IgnorablesMatcher *)&v91, v26);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 128), (icu::UnicodeString *)&v92);
      BOOL v28 = v94;
      *(void *)(v14 + 192) = v94;
      long long v91 = &unk_1EDA505F8;
      icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v92);
      v85[0] = v114;
      v85[1] = v11;
      uint64_t v80 = (UChar **)v11;
      int v78 = (icu::numparse::impl::SymbolMatcher *)(v14 + 120);
      v85[2] = v14 + 120;
      v85[3] = v132;
      unsigned int v79 = v26;
      _OWORD v85[4] = v26;
      icu::numparse::impl::AffixTokenMatcherWarehouse::AffixTokenMatcherWarehouse(&v91, v85);
      sub_18C98EA38(v14 + 3856, (uint64_t)&v91);
      sub_18C990858(&v91);
      sub_18C98A824(&v91, v14 + 3856);
      sub_18C98EB3C(v14 + 2312, (uint64_t)&v91);
      for (uint64_t i = 0; i != -960; i -= 80)
      {
        uint64_t v30 = (void **)((char *)&v91 + i);
        *(void *)&v113[i] = &unk_1EDA50140;
        if (v113[i + 68]) {
          uprv_free(v30[189]);
        }
        v30[182] = &unk_1EDA502B8;
        if (*((unsigned char *)v30 + 1476)) {
          uprv_free(*(void **)&v113[i + 8]);
        }
      }
      if (v131) {
        int v31 = v121;
      }
      else {
        int v31 = v130;
      }
      sub_18C98AB20(v14 + 2312, (uint64_t)v31, v14, v78, (icu::numparse::impl::AffixTokenMatcherWarehouse *)v79, (int *)v7);
      uint64_t v32 = v76;
      if (v77) {
        goto LABEL_46;
      }
      uint64_t v33 = 34;
      if (v131) {
        uint64_t v33 = 0;
      }
      if ((*(unsigned int (**)(void))(v121[v33] + 40))())
      {
LABEL_46:
        icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher((icu::numparse::impl::CombinedCurrencyMatcher *)&v91, (const icu::number::impl::CurrencySymbols *)v114, v11, v79, (UErrorCode *)v7);
        *(void *)(v14 + 1464) = v92;
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 1472), (icu::UnicodeString *)v93);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 1536), (icu::UnicodeString *)&v95);
        *(unsigned char *)(v14 + 1600) = v97[0];
        for (uint64_t j = 1608; j != 2120; j += 64)
          icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + j), (icu::UnicodeString *)((char *)&v91 + j - 1456));
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 2120), (icu::UnicodeString *)v109);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 2184), (icu::UnicodeString *)v110);
        icu::CharString::operator=(v14 + 2248, (uint64_t)&v111);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 1456);
        long long v91 = &unk_1EDA503C0;
        unint64_t v35 = v112;
        if (v112) {
          uprv_free(v111);
        }
        icu::UnicodeString::~UnicodeString((void *)v35, (icu::UnicodeString *)v110);
        icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v109);
        for (uint64_t k = 600; k != 88; k -= 64)
          icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)((char *)&v91 + k));
        icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v95);
        icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)v93);
      }
      int v40 = v17;
      if (v17)
      {
        uint64_t v41 = (uint64_t)v80;
      }
      else
      {
        uint64_t v42 = 34;
        if (v131) {
          uint64_t v42 = 0;
        }
        if ((*(unsigned int (**)(void))(v121[v42] + 72))())
        {
          icu::numparse::impl::PercentMatcher::PercentMatcher((icu::numparse::impl::PercentMatcher *)&v91, v80);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 536), (icu::UnicodeString *)&v92);
          *(void *)(v14 + 600) = v94;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 528);
          long long v91 = &unk_1EDA505F8;
          icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v92);
        }
        uint64_t v44 = 34;
        if (v131) {
          uint64_t v44 = 0;
        }
        uint64_t v41 = (uint64_t)v80;
        if ((*(uint64_t (**)(void))(v121[v44] + 72))())
        {
          icu::numparse::impl::PermilleMatcher::PermilleMatcher((icu::numparse::impl::PermilleMatcher *)&v91, v80);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 616), (icu::UnicodeString *)&v92);
          *(void *)(v14 + 680) = v94;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 608);
          long long v91 = &unk_1EDA505F8;
          icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v92);
        }
        icu::numparse::impl::PlusSignMatcher::PlusSignMatcher((icu::numparse::impl::PlusSignMatcher *)&v91, v80, 0);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 696), (icu::UnicodeString *)&v92);
        *(void *)(v14 + 760) = v94;
        *(unsigned char *)(v14 + 768) = v95;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 688);
        long long v91 = &unk_1EDA505F8;
        icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v92);
        icu::numparse::impl::MinusSignMatcher::MinusSignMatcher((icu::numparse::impl::MinusSignMatcher *)&v91, v80, 0);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 288), (icu::UnicodeString *)&v92);
        *(void *)(v14 + 352) = v94;
        *(unsigned char *)(v14 + 360) = v95;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 280);
        long long v91 = &unk_1EDA505F8;
        icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v92);
      }
      sub_18C991E60((uint64_t)&v91, v41);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 376), (icu::UnicodeString *)&v92);
      *(void *)(v14 + 4icu::number::impl::DecimalQuantity::ensureCapacity(this, 40) = v94;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 368);
      long long v91 = &unk_1EDA505F8;
      icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v92);
      sub_18C991D40((uint64_t)&v91, v41);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 208), (icu::UnicodeString *)&v92);
      *(void *)(v14 + 272) = v94;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 200);
      long long v91 = &unk_1EDA505F8;
      icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v92);
      memset(v90, 0, 64);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v90, (UChar **)(v76 + 392));
      if (((uint64_t)v90[1] & 1) == 0)
      {
        Set = (icu::UnicodeSet *)icu::numparse::impl::SymbolMatcher::getSet(v78);
        if (!icu::UnicodeSet::contains(Set, (const icu::UnicodeString *)v90))
        {
          sub_18C991EB8((uint64_t)&v91, v90);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 456), (icu::UnicodeString *)&v92);
          *(void *)(v14 + 520) = v94;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 448);
          long long v91 = &unk_1EDA505F8;
          icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)&v92);
        }
      }
      (*(void (**)(uint64_t, icu::numparse::impl::SymbolMatcher *))(*(void *)v14 + 16))(v14, v78);
      sub_18C98D260(&v91, v80, &v86, v79);
      *(void *)(v14 + 784) = v92;
      icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 792), (icu::UnicodeString *)v93);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 856), (icu::UnicodeString *)&v95);
      long long v52 = v97[1];
      *(_OWORD *)(v14 + 920) = v97[0];
      *(_OWORD *)(v14 + 936) = v52;
      sub_18C990A10((icu::UnicodeSet **)(v14 + 952), &v98, (char *)&v89[4] + 1);
      sub_18C990A10((icu::UnicodeSet **)(v14 + 960), &v99, v53);
      sub_18C990A54((void **)(v14 + 968), v100);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 776);
      long long v91 = &unk_1EDA50440;
      sub_18C7F9F20((uint64_t *)v100);
      if (v99)
      {
        int v55 = icu::UnicodeSet::~UnicodeSet(v54, v99);
        icu::UMemory::operator delete(v55);
      }
      if (v98)
      {
        uint64_t v56 = icu::UnicodeSet::~UnicodeSet(v54, v98);
        icu::UMemory::operator delete(v56);
      }
      icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)&v95);
      icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)v93);
      if (!*(unsigned char *)(v76 + 468) || *(int *)(v76 + 100) >= 1)
      {
        sub_18C9915B4(&v91, v80, &v86);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 984), (icu::UnicodeString *)&v92);
        *(void *)(v14 + 1056) = v95;
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 1064), (icu::UnicodeString *)v96);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 1128), (icu::UnicodeString *)((char *)v97 + 8));
        *(_OWORD *)(v14 + 1192) = v101;
        *(_OWORD *)(v14 + 1208) = v102;
        sub_18C990A10((icu::UnicodeSet **)(v14 + 1224), &v103, &v91);
        sub_18C990A10((icu::UnicodeSet **)(v14 + 1232), &v104, v58);
        sub_18C990A54((void **)(v14 + 1240), v105);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 1256), (icu::UnicodeString *)v106);
        *(void *)(v14 + 1320) = v106[8];
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 1328), (icu::UnicodeString *)v107);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 1392), (icu::UnicodeString *)v108);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 976);
        long long v91 = &unk_1EDA50578;
        icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)v108);
        icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)v107);
        v105[1] = &unk_1EDA505F8;
        icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)v106);
        long long v94 = &unk_1EDA50440;
        sub_18C7F9F20((uint64_t *)v105);
        if (v104)
        {
          uint64_t v63 = icu::UnicodeSet::~UnicodeSet(v62, v104);
          icu::UMemory::operator delete(v63);
        }
        if (v103)
        {
          unint64_t v64 = icu::UnicodeSet::~UnicodeSet(v62, v103);
          icu::UMemory::operator delete(v64);
        }
        icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)((char *)v97 + 8));
        icu::UnicodeString::~UnicodeString(v65, (icu::UnicodeString *)v96);
        icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v92);
        uint64_t v32 = v76;
        int v40 = v75;
      }
      long long v91 = &unk_1EDA50BE8;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 5176);
      if (v40)
      {
        long long v91 = &unk_1EDA50A98;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 5144);
      }
      if (v77)
      {
        long long v91 = &unk_1EDA50B30;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 5152);
      }
      if (*(unsigned char *)(v32 + 64))
      {
        sub_18C9926A8((uint64_t)&v91, (*(unsigned __int8 *)(v32 + 65) | *(_DWORD *)(v32 + 88)) != 0);
        *(unsigned char *)(v14 + 5168) = v92;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 5160);
      }
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      uint64_t v84 = 0;
      int v68 = *(_DWORD *)(v32 + 84);
      int v69 = *(_DWORD *)(v32 + 120);
      int v70 = *(_DWORD *)(v32 + 124);
      uint64_t v71 = (v70 + v68);
      if (!(v70 + v68) || v69 == 1)
      {
        if (v71)
        {
          icu::number::Scale::powerOfTen(v71, (uint64_t)&v82);
        }
        else if (v69 == 1)
        {
          icu::number::Scale::none((uint64_t)&v82);
        }
        else
        {
          icu::number::Scale::byDouble((double)v69, v67, (uint64_t)&v82);
        }
      }
      else
      {
        icu::number::Scale::byDoubleAndPowerOfTen((icu::number::Scale *)v71, (double)v69, v67, (uint64_t)&v82);
      }
      if (v82 || v83)
      {
        icu::number::Scale::Scale((icu::number::Scale *)v81, (const icu::number::Scale *)&v82);
        sub_18C992744(&v91, (uint64_t)v81);
        icu::number::Scale::operator=(v14 + 5192, (uint64_t)&v92);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v14 + 5184);
        long long v91 = &unk_1EDA50A50;
        icu::number::Scale::~Scale((icu::number::Scale *)&v92);
        icu::number::Scale::~Scale((icu::number::Scale *)v81);
      }
      *(unsigned char *)(v14 + 112) = 1;
      icu::number::Scale::~Scale((icu::number::Scale *)&v82);
      icu::UnicodeString::~UnicodeString(v72, (icu::UnicodeString *)v90);
    }
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v119[72]);
    icu::UnicodeString::~UnicodeString(v73, (icu::UnicodeString *)&v119[8]);
    if (BYTE4(v116)) {
      uprv_free(*((void **)&v115 + 1));
    }
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v114[8]);
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v89);
  }
  else
  {
    uint64_t v14 = 0;
  }
  sub_18C913CF8(v121);
  icu::Locale::~Locale((icu::Locale *)v132);
  return v14;
}

icu::numparse::impl::NumberParserImpl *icu::numparse::impl::NumberParserImpl::NumberParserImpl(icu::numparse::impl::NumberParserImpl *this, int a2)
{
  *(void *)this = &unk_1EDA504C0;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 32;
  *((_DWORD *)this + 6) = 10;
  *((unsigned char *)this + 28) = 0;
  *((unsigned char *)this + 112) = 0;
  *((void *)this + 16) = &unk_1EDA47700;
  *((_WORD *)this + 68) = 2;
  *((void *)this + 15) = &unk_1EDA50650;
  *((void *)this + 26) = &unk_1EDA47700;
  *((_WORD *)this + 108) = 2;
  *((void *)this + 25) = &unk_1EDA506A8;
  *((void *)this + 36) = &unk_1EDA47700;
  *((_WORD *)this + 148) = 2;
  *((void *)this + 35) = &unk_1EDA50700;
  *((void *)this + 47) = &unk_1EDA47700;
  *((_WORD *)this + 192) = 2;
  *((void *)this + 46) = &unk_1EDA50758;
  *((void *)this + 57) = &unk_1EDA47700;
  *((_WORD *)this + 232) = 2;
  *((void *)this + 56) = &unk_1EDA507B0;
  *((void *)this + 67) = &unk_1EDA47700;
  *((_WORD *)this + 272) = 2;
  *((void *)this + 66) = &unk_1EDA50808;
  *((void *)this + 77) = &unk_1EDA47700;
  *((_WORD *)this + 312) = 2;
  *((void *)this + 76) = &unk_1EDA50860;
  *((void *)this + 87) = &unk_1EDA47700;
  *((_WORD *)this + 352) = 2;
  *((void *)this + 86) = &unk_1EDA508B8;
  *((void *)this + 97) = &unk_1EDA50440;
  *((void *)this + 99) = &unk_1EDA47700;
  *((_WORD *)this + 400) = 2;
  *((void *)this + 107) = &unk_1EDA47700;
  *((_WORD *)this + 432) = 2;
  *((void *)this + 121) = 0;
  *((void *)this + 119) = 0;
  *((void *)this + 120) = 0;
  sub_18C990ACC((uint64_t)this + 976);
  sub_18C98BE34((uint64_t)this + 1456);
  sub_18C990C10((uint64_t)this + 2312);
  sub_18C990CC0((uint64_t)this + 3856);
  *((void *)this + 643) = &unk_1EDA50A98;
  *((void *)this + 644) = &unk_1EDA50B30;
  *((void *)this + 645) = &unk_1EDA50A08;
  *((void *)this + 647) = &unk_1EDA50BE8;
  *((void *)this + 648) = &unk_1EDA50A50;
  *((_DWORD *)this + 1298) = 0;
  *((void *)this + 650) = 0;
  *((_DWORD *)this + 1302) = 0;
  return this;
}

void icu::numparse::impl::NumberParserImpl::~NumberParserImpl(icu::numparse::impl::NumberParserImpl *this)
{
  *(void *)this = &unk_1EDA504C0;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 648) = &unk_1EDA50A50;
  icu::number::Scale::~Scale((icu::numparse::impl::NumberParserImpl *)((char *)this + 5192));
  sub_18C990E18((uint64_t)this + 120);
  if (*((unsigned char *)this + 28)) {
    uprv_free(*((void **)this + 2));
  }
}

{
  void *v1;
  uint64_t vars8;

  icu::numparse::impl::NumberParserImpl::~NumberParserImpl(this);

  icu::UMemory::operator delete(v1);
}

void icu::numparse::impl::NumberParserImpl::addMatcher(icu::numparse::impl::NumberParserImpl *this, icu::numparse::impl::NumberParseMatcher *a2)
{
  int v4 = *((_DWORD *)this + 3);
  if (v4 >= *((_DWORD *)this + 6) && v4 >= 1)
  {
    int v6 = 2 * v4;
    uint64_t v7 = uprv_malloc(8 * (2 * v4));
    if (v7)
    {
      int v8 = v7;
      int v9 = *((_DWORD *)this + 6);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = 2 * v4;
      }
      unint64_t v10 = (void *)*((void *)this + 2);
      memcpy(v7, v10, 8 * v9);
      if (*((unsigned char *)this + 28)) {
        uprv_free(v10);
      }
      *((void *)this + 2) = v8;
      *((_DWORD *)this + 6) = v6;
      *((unsigned char *)this + 28) = 1;
    }
  }
  uint64_t v11 = *((int *)this + 3);
  *(void *)(*((void *)this + 2) + 8 * v11) = a2;
  *((_DWORD *)this + 3) = v11 + 1;
}

uint64_t icu::numparse::impl::NumberParserImpl::getParseFlags(icu::numparse::impl::NumberParserImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t icu::numparse::impl::NumberParserImpl::parse(icu::numparse::impl::NumberParserImpl *this, const icu::UnicodeString *a2, int a3, icu::numparse::impl::ParsedNumber *a4, UErrorCode *a5)
{
  return icu::numparse::impl::NumberParserImpl::parse((uint64_t)this, a2, 0, a3, a4, a5);
}

uint64_t icu::numparse::impl::NumberParserImpl::parse(uint64_t this, const icu::UnicodeString *a2, int a3, int a4, icu::numparse::impl::ParsedNumber *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    uint64_t v10 = this;
    memset(v14, 0, sizeof(v14));
    icu::StringSegment::StringSegment((uint64_t)v14, a2, *(_DWORD *)(this + 8) & 1);
    icu::StringSegment::adjustOffset((uint64_t)v14, a3);
    if (a4)
    {
      icu::numparse::impl::NumberParserImpl::parseGreedy(v10, (icu::StringSegment *)v14, a5, a6);
    }
    else
    {
      if ((*(unsigned char *)(v10 + 9) & 0x40) != 0) {
        int v11 = 1;
      }
      else {
        int v11 = -100;
      }
      icu::numparse::impl::NumberParserImpl::parseLongestRecursive((icu::numparse::impl::NumberParserImpl *)v10, (icu::StringSegment *)v14, a5, v11, a6);
    }
    if (*(int *)(v10 + 12) >= 1)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = *(void *)(*(void *)(v10 + 16) + 8 * v12);
        (*(void (**)(uint64_t, icu::numparse::impl::ParsedNumber *))(*(void *)v13 + 40))(v13, a5);
        ++v12;
      }
      while (v12 < *(int *)(v10 + 12));
    }
    return icu::numparse::impl::ParsedNumber::postProcess((uint64_t)a5);
  }
  return this;
}

uint64_t icu::numparse::impl::NumberParserImpl::parseGreedy(uint64_t this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  if (*(int *)(this + 12) >= 1)
  {
    uint64_t v7 = this;
    int v8 = 0;
    do
    {
      this = icu::StringSegment::length(a2);
      if (!this) {
        break;
      }
      uint64_t v9 = *(void *)(*(void *)(v7 + 16) + 8 * v8);
      this = (*(uint64_t (**)(uint64_t, icu::StringSegment *))(*(void *)v9 + 32))(v9, a2);
      if (this)
      {
        int Offset = icu::StringSegment::getOffset(a2);
        this = (*(uint64_t (**)(uint64_t, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, UErrorCode *))(*(void *)v9 + 24))(v9, a2, a3, a4);
        if (*(int *)a4 > 0) {
          return this;
        }
        this = icu::StringSegment::getOffset(a2);
        if (this == Offset) {
          ++v8;
        }
        else {
          int v8 = 0;
        }
      }
      else
      {
        ++v8;
      }
    }
    while (v8 < *(_DWORD *)(v7 + 12));
  }
  return this;
}

void icu::numparse::impl::NumberParserImpl::parseLongestRecursive(icu::numparse::impl::NumberParserImpl *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, int a4, UErrorCode *a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v10 = icu::StringSegment::length(a2);
  if (a4 && v10)
  {
    uint64_t v30 = 0;
    memset(v29, 0, sizeof(v29));
    memset(v28, 0, sizeof(v28));
    memset(v27, 0, sizeof(v27));
    sub_18C98C718(v27, (uint64_t)a3);
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    memset(v24, 0, sizeof(v24));
    memset(v23, 0, sizeof(v23));
    icu::numparse::impl::ParsedNumber::ParsedNumber((icu::numparse::impl::ParsedNumber *)v23);
    int Offset = icu::StringSegment::getOffset(a2);
    uint64_t v12 = *((unsigned int *)this + 3);
    if ((int)v12 >= 1)
    {
      int v13 = Offset;
      uint64_t v14 = 0;
      int v15 = a4 + 1;
      do
      {
        uint64_t v16 = *(void *)(*((void *)this + 2) + 8 * v14);
        if ((*(unsigned int (**)(uint64_t, icu::StringSegment *))(*(void *)v16 + 32))(v16, a2))
        {
          int v17 = 0;
          do
          {
            if (v17 >= (int)icu::StringSegment::length(a2)) {
              break;
            }
            if (icu::StringSegment::codePointAt((uint64_t **)a2, v17) < 0x10000) {
              int v18 = 1;
            }
            else {
              int v18 = 2;
            }
            v17 += v18;
            sub_18C98C330((uint64_t)v23, (uint64_t)v27);
            icu::StringSegment::setLength((uint64_t)a2, v17);
            char v19 = (*(uint64_t (**)(uint64_t, icu::StringSegment *, _OWORD *, UErrorCode *))(*(void *)v16 + 24))(v16, a2, v23, a5);
            icu::StringSegment::resetLength(a2);
            uint64_t v12 = *(unsigned int *)a5;
            if ((int)v12 > 0) {
              goto LABEL_18;
            }
            if (icu::StringSegment::getOffset(a2) - v13 == v17)
            {
              icu::numparse::impl::NumberParserImpl::parseLongestRecursive(this, a2, (icu::numparse::impl::ParsedNumber *)v23, v15, a5);
              uint64_t v12 = *(unsigned int *)a5;
              if ((int)v12 > 0) {
                goto LABEL_18;
              }
              if (icu::numparse::impl::ParsedNumber::isBetterThan((icu::numparse::impl::ParsedNumber *)v23, a3)) {
                sub_18C98C330((uint64_t)a3, (uint64_t)v23);
              }
            }
            icu::StringSegment::setOffset((uint64_t)a2, v13);
          }
          while ((v19 & 1) != 0);
        }
        ++v14;
        uint64_t v12 = *((int *)this + 3);
      }
      while (v14 < v12);
    }
LABEL_18:
    icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v25);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v24);
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v23);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v29);
    icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v28);
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v27);
  }
}

uint64_t icu::numparse::impl::NumberParserImpl::toString@<X0>(icu::numparse::impl::NumberParserImpl *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  icu::UnicodeString::UnicodeString((uint64_t)a2, (uint64_t)"<");
  if (*((int *)this + 3) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      LOWORD(v8) = 32;
      icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v8, 0, 1);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(*((void *)this + 2) + 8 * v4) + 48))(&v8);
      if ((v9 & 0x8000u) == 0) {
        uint64_t v5 = v9 >> 5;
      }
      else {
        uint64_t v5 = v10;
      }
      icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v8, 0, v5);
      icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v8);
      ++v4;
    }
    while (v4 < *((int *)this + 3));
  }
  return icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L" ]>", 0, 0xFFFFFFFFLL);
}

void *sub_18C990858(void *a1)
{
  sub_18C99098C((uint64_t)(a1 + 150));
  a1[43] = &unk_1EDA503C0;
  uint64_t v2 = (void *)*((unsigned __int8 *)a1 + 1148);
  if (*((unsigned char *)a1 + 1148)) {
    uprv_free((void *)a1[142]);
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 134));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 126));
  for (uint64_t i = 118; i != 54; i -= 8)
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&a1[i]);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 53));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 45));
  a1[33] = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a1 + 33, (icu::UnicodeString *)(a1 + 34));
  a1[23] = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a1 + 23, (icu::UnicodeString *)(a1 + 24));
  a1[12] = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a1 + 12, (icu::UnicodeString *)(a1 + 13));
  a1[1] = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a1 + 1, (icu::UnicodeString *)(a1 + 2));
  return a1;
}

uint64_t sub_18C99098C(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(unsigned char *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

icu::UnicodeSet **sub_18C990A10@<X0>(icu::UnicodeSet **a1@<X0>, icu::UnicodeSet **a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  if (v5)
  {
    int v6 = icu::UnicodeSet::~UnicodeSet(a3, v5);
    icu::UMemory::operator delete(v6);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

void **sub_18C990A54(void **a1, void **a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (char *)(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    if (v6)
    {
      uint64_t v7 = v6 << 6;
      uint64_t v8 = (char *)(v4 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v8[v7]);
        v7 -= 64;
      }
      while (v7);
    }
    icu::UMemory::operator delete[](v5);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

uint64_t sub_18C990ACC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDA50578;
  *(void *)(result + 8) = &unk_1EDA47700;
  *(_WORD *)(result + 16) = 2;
  *(void *)(result + 72) = &unk_1EDA50440;
  *(void *)(result + 88) = &unk_1EDA47700;
  *(_WORD *)(result + 96) = 2;
  *(void *)(result + 152) = &unk_1EDA47700;
  *(_WORD *)(result + 160) = 2;
  *(void *)(result + 256) = 0;
  *(void *)(result + 264) = 0;
  *(void *)(result + 248) = 0;
  *(void *)(result + 280) = &unk_1EDA47700;
  *(_WORD *)(result + 288) = 2;
  *(void *)(result + 272) = &unk_1EDA50650;
  *(void *)(result + 352) = &unk_1EDA47700;
  *(_WORD *)(result + 360) = 2;
  *(void *)(result + 416) = &unk_1EDA47700;
  *(_WORD *)(result + 424) = 2;
  return result;
}

uint64_t sub_18C990C10(uint64_t a1)
{
  for (uint64_t i = 0; i != 576; i += 32)
    *(void *)(a1 + i) = &unk_1EDA501A0;
  uint64_t v3 = a1 + 1536;
  uint64_t v4 = 576;
  do
  {
    uint64_t v5 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a1 + v4);
    *(void *)uint64_t v5 = &unk_1EDA50140;
    *(_WORD *)(v5 + 70) = 0;
    *(void *)(v5 + 56) = v5 + 70;
    *(_DWORD *)(v5 + 64) = 4;
    *(unsigned char *)(v5 + 68) = 0;
    v4 += 80;
  }
  while (v5 + 80 != v3);
  return a1;
}

uint64_t sub_18C990CC0(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDA47700;
  *(_WORD *)(a1 + 24) = 2;
  *(void *)(a1 + 8) = &unk_1EDA50700;
  *(void *)(a1 + 104) = &unk_1EDA47700;
  *(_WORD *)(a1 + 112) = 2;
  *(void *)(a1 + 96) = &unk_1EDA508B8;
  *(void *)(a1 + 192) = &unk_1EDA47700;
  *(_WORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = &unk_1EDA50808;
  *(void *)(a1 + 272) = &unk_1EDA47700;
  *(_WORD *)(a1 + 280) = 2;
  *(void *)(a1 + 264) = &unk_1EDA50860;
  sub_18C98BE34(a1 + 344);
  *(_DWORD *)(a1 + 1200) = 0;
  *(void *)(a1 + 1208) = a1 + 1224;
  *(_DWORD *)(a1 + 1216) = 8;
  *(unsigned char *)(a1 + 1220) = 0;
  return a1;
}

uint64_t sub_18C990E18(uint64_t a1)
{
  sub_18C990858((void *)(a1 + 3736));
  for (uint64_t i = 0; i != -960; i -= 80)
  {
    uint64_t v3 = a1 + i;
    *(void *)(a1 + i + 3648) = &unk_1EDA50140;
    if (*(unsigned char *)(a1 + i + 3716)) {
      uprv_free(*(void **)(v3 + 3704));
    }
    *(void *)(v3 + 3648) = &unk_1EDA502B8;
    if (*(unsigned char *)(v3 + 3668)) {
      uprv_free(*(void **)(a1 + i + 3656));
    }
  }
  *(void *)(a1 + 1336) = &unk_1EDA503C0;
  uint64_t v4 = (void *)*(unsigned __int8 *)(a1 + 2140);
  if (*(unsigned char *)(a1 + 2140)) {
    uprv_free(*(void **)(a1 + 2128));
  }
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 2064));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 2000));
  for (uint64_t j = 1936; j != 1424; j -= 64)
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + j));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 1416));
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)(a1 + 1352));
  *(void *)(a1 + 856) = &unk_1EDA50578;
  icu::UnicodeString::~UnicodeString((void *)(a1 + 856), (icu::UnicodeString *)(a1 + 1272));
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 1208));
  *(void *)(a1 + 1128) = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((void *)(a1 + 1128), (icu::UnicodeString *)(a1 + 1136));
  *(void *)(a1 + 928) = &unk_1EDA50440;
  sub_18C7F9F20((uint64_t *)(a1 + 1120));
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 1112), v10);
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 1104), v11);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)(a1 + 1008));
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)(a1 + 944));
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(a1 + 864));
  *(void *)(a1 + 656) = &unk_1EDA50440;
  sub_18C7F9F20((uint64_t *)(a1 + 848));
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 840), v15);
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 832), v16);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)(a1 + 736));
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)(a1 + 672));
  *(void *)(a1 + 568) = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((void *)(a1 + 568), (icu::UnicodeString *)(a1 + 576));
  *(void *)(a1 + 488) = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((void *)(a1 + 488), (icu::UnicodeString *)(a1 + 496));
  *(void *)(a1 + 408) = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((void *)(a1 + 408), (icu::UnicodeString *)(a1 + 416));
  *(void *)(a1 + 328) = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((void *)(a1 + 328), (icu::UnicodeString *)(a1 + 336));
  *(void *)(a1 + 248) = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((void *)(a1 + 248), (icu::UnicodeString *)(a1 + 256));
  *(void *)(a1 + 160) = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((void *)(a1 + 160), (icu::UnicodeString *)(a1 + 168));
  *(void *)(a1 + 80) = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((void *)(a1 + 80), (icu::UnicodeString *)(a1 + 88));
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)(a1 + 8));
  return a1;
}

icu::numparse::impl::ParsedNumber *icu::numparse::impl::ParsedNumber::ParsedNumber(icu::numparse::impl::ParsedNumber *this)
{
  int v2 = icu::number::impl::DecimalQuantity::DecimalQuantity(this);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = &unk_1EDA47700;
  *((_WORD *)this + 44) = 2;
  *((void *)this + 18) = &unk_1EDA47700;
  *((_WORD *)this + 76) = 2;
  *((unsigned char *)this + 8) = 1;
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalQuantity *)((char *)v2 + 80));
  icu::UnicodeString::setToBogus((icu::numparse::impl::ParsedNumber *)((char *)this + 144));
  *((_WORD *)this + 104) = 0;
  return this;
}

void icu::numparse::impl::ParsedNumber::clear(icu::numparse::impl::ParsedNumber *this)
{
  *((unsigned char *)this + 8) = 1;
  *((void *)this + 9) = 0;
  icu::UnicodeString::setToBogus((icu::numparse::impl::ParsedNumber *)((char *)this + 80));
  icu::UnicodeString::setToBogus((icu::numparse::impl::ParsedNumber *)((char *)this + 144));
  *((_WORD *)this + 104) = 0;
}

uint64_t icu::numparse::impl::ParsedNumber::setCharsConsumed(icu::numparse::impl::ParsedNumber *this, const icu::StringSegment *a2)
{
  uint64_t result = icu::StringSegment::getOffset(a2);
  *((_DWORD *)this + 18) = result;
  return result;
}

uint64_t icu::numparse::impl::ParsedNumber::postProcess(uint64_t this)
{
  if (!*(unsigned char *)(this + 8) && (*(unsigned char *)(this + 76) & 1) != 0) {
    return icu::number::impl::DecimalQuantity::negate(this);
  }
  return this;
}

BOOL icu::numparse::impl::ParsedNumber::success(icu::numparse::impl::ParsedNumber *this)
{
  return *((int *)this + 18) >= 1 && (*((unsigned char *)this + 77) & 1) == 0;
}

uint64_t icu::numparse::impl::ParsedNumber::seenNumber(icu::numparse::impl::ParsedNumber *this)
{
  if (!*((unsigned char *)this + 8)) {
    return 1;
  }
  unsigned int v1 = *((_DWORD *)this + 19);
  if ((v1 & 0x40) != 0) {
    return 1;
  }
  else {
    return (v1 >> 7) & 1;
  }
}

double icu::numparse::impl::ParsedNumber::getDouble(icu::numparse::impl::ParsedNumber *this, UErrorCode *a2)
{
  int v2 = *((_DWORD *)this + 19);
  if ((v2 & 0x40) != 0)
  {
    return uprv_getNaN();
  }
  else if ((v2 & 0x80) != 0)
  {
    double result = -INFINITY;
    if ((v2 & 1) == 0) {
      return INFINITY;
    }
  }
  else if (*((unsigned char *)this + 8))
  {
    *a2 = U_INVALID_STATE_ERROR;
    return 0.0;
  }
  else if (icu::number::impl::DecimalQuantity::isZeroish(this) {
         && (icu::number::impl::DecimalQuantity::isNegative(this) & 1) != 0)
  }
  {
    return -0.0;
  }
  else if (icu::number::impl::DecimalQuantity::fitsInLong(this, 0))
  {
    return (double)icu::number::impl::DecimalQuantity::toLong(this, 0);
  }
  else
  {
    return icu::number::impl::DecimalQuantity::toDouble(this);
  }
  return result;
}

void icu::numparse::impl::ParsedNumber::populateFormattable(icu::numparse::impl::ParsedNumber *this, icu::Formattable *a2, char a3)
{
  int v4 = *((_DWORD *)this + 19);
  if ((v4 & 0x40) != 0)
  {
    double NaN = uprv_getNaN();
LABEL_17:
    icu::Formattable::setDouble(a2, NaN);
    return;
  }
  if ((v4 & 0x80) != 0)
  {
    if (v4) {
      unint64_t v10 = 0xFFF0000000000000;
    }
    else {
      unint64_t v10 = 0x7FF0000000000000;
    }
    goto LABEL_16;
  }
  if (icu::number::impl::DecimalQuantity::isZeroish(this))
  {
    int isNegative = icu::number::impl::DecimalQuantity::isNegative(this);
    if ((a3 & 0x10) == 0)
    {
      if (isNegative)
      {
        unint64_t v10 = 0x8000000000000000;
LABEL_16:
        double NaN = *(double *)&v10;
        goto LABEL_17;
      }
    }
  }
  uint64_t v12 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(v8, (icu::UMemory *)0x48, v7);
  int v13 = v12;
  if (v12) {
    icu::number::impl::DecimalQuantity::DecimalQuantity(v12, (uint64_t)this);
  }

  icu::Formattable::adoptDecimalQuantity(a2, v13);
}

BOOL icu::numparse::impl::ParsedNumber::isBetterThan(icu::numparse::impl::ParsedNumber *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return *((_DWORD *)this + 18) > *((_DWORD *)a2 + 18);
}

uint64_t sub_18C991488(uint64_t a1, UChar **a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EDA50578;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2 + 89);
  sub_18C98D260(a1 + 72, a2, a3, 48);
  icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher((icu::numparse::impl::IgnorablesMatcher *)(a1 + 272), 0x8000);
  *(void *)(a1 + 352) = &unk_1EDA47700;
  *(_WORD *)(a1 + 360) = 2;
  *(void *)(a1 + 416) = &unk_1EDA47700;
  *(_WORD *)(a1 + 424) = 2;
  uint64_t v6 = (icu::UnicodeSet *)icu::unisets::get(11);
  if (icu::UnicodeSet::contains(v6, (const icu::UnicodeString *)(a2 + 49))) {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 352));
  }
  else {
    icu::UnicodeString::operator=((UChar **)(a1 + 352), a2 + 49);
  }
  unint64_t v7 = a2 + 57;
  uint64_t v8 = (icu::UnicodeSet *)icu::unisets::get(12);
  if (icu::UnicodeSet::contains(v8, (const icu::UnicodeString *)v7)) {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 416));
  }
  else {
    icu::UnicodeString::operator=((UChar **)(a1 + 416), v7);
  }
  return a1;
}

BOOL sub_18C9915B8(uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this, UErrorCode *a4)
{
  if (!icu::numparse::impl::ParsedNumber::seenNumber(this) || (*((unsigned char *)this + 76) & 8) != 0) {
    return 0;
  }
  int Offset = icu::StringSegment::getOffset(a2);
  int CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(a1 + 8));
  unint64_t v10 = (uint64_t *)*(unsigned __int16 *)(a1 + 16);
  if (((unsigned __int16)v10 & 0x8000) != 0) {
    unsigned int v11 = *(_DWORD *)(a1 + 20);
  }
  else {
    unsigned int v11 = v10 >> 5;
  }
  unsigned int v14 = icu::StringSegment::length(v10, a2);
  if (CommonPrefixLength != v11) {
    return CommonPrefixLength == v14;
  }
  if (v14 == CommonPrefixLength) {
    return 1;
  }
  icu::StringSegment::adjustOffset((uint64_t)a2, CommonPrefixLength);
  icu::numparse::impl::SymbolMatcher::match((icu::UnicodeSet **)(a1 + 272), a2, this, a4);
  if (!icu::StringSegment::length(v15, a2))
  {
LABEL_35:
    icu::StringSegment::setOffset((uint64_t)a2, Offset);
    return 1;
  }
  uint64_t v16 = (const icu::UnicodeSet *)icu::unisets::get(11);
  if (!icu::StringSegment::startsWith(a2, v16))
  {
    char v19 = (const icu::UnicodeSet *)icu::unisets::get(12);
    if (icu::StringSegment::startsWith(a2, v19))
    {
      icu::StringSegment::adjustOffsetByCodePoint(a2);
    }
    else
    {
      if (icu::StringSegment::startsWith(a2, (const icu::UnicodeString *)(a1 + 352)))
      {
        int v23 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(a1 + 352));
        unsigned int v24 = *(unsigned __int16 *)(a1 + 360);
        if ((v24 & 0x8000) != 0) {
          unsigned int v25 = *(_DWORD *)(a1 + 364);
        }
        else {
          unsigned int v25 = v24 >> 5;
        }
        if (v23 != v25) {
          goto LABEL_35;
        }
        icu::StringSegment::adjustOffset((uint64_t)a2, v23);
        goto LABEL_13;
      }
      if (icu::StringSegment::startsWith(a2, (const icu::UnicodeString *)(a1 + 416)))
      {
        int v26 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(a1 + 416));
        unsigned int v27 = *(unsigned __int16 *)(a1 + 424);
        if ((v27 & 0x8000) != 0) {
          unsigned int v28 = *(_DWORD *)(a1 + 428);
        }
        else {
          unsigned int v28 = v27 >> 5;
        }
        if (v26 != v28) {
          goto LABEL_35;
        }
        icu::StringSegment::adjustOffset((uint64_t)a2, v26);
      }
    }
    char v18 = 1;
    goto LABEL_18;
  }
  icu::StringSegment::adjustOffsetByCodePoint(a2);
LABEL_13:
  char v18 = -1;
LABEL_18:
  if (!icu::StringSegment::length(v17, a2)) {
    goto LABEL_35;
  }
  icu::numparse::impl::SymbolMatcher::match((icu::UnicodeSet **)(a1 + 272), a2, this, a4);
  if (!icu::StringSegment::length(v20, a2)) {
    goto LABEL_35;
  }
  char v21 = *((unsigned char *)this + 8);
  *((unsigned char *)this + 8) = 0;
  int v22 = icu::StringSegment::getOffset(a2);
  uint64_t v12 = sub_18C98D26C(a1 + 72, a2, this, v18);
  *((unsigned char *)this + 8) = v21;
  if (icu::StringSegment::getOffset(a2) == v22) {
    icu::StringSegment::setOffset((uint64_t)a2, Offset);
  }
  else {
    *((_DWORD *)this + 19) |= 8u;
  }
  return v12;
}

BOOL sub_18C991824(uint64_t a1, icu::StringSegment *this)
{
  return icu::StringSegment::startsWith(this, (const icu::UnicodeString *)(a1 + 8));
}

uint64_t sub_18C991834@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<Scientific>");
}

void sub_18C991844(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA50578;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 416));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 352));
  *(void *)(a1 + 272) = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 280));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 272));
  *(void *)(a1 + 72) = &unk_1EDA50440;
  sub_18C7F9F20((uint64_t *)(a1 + 264));
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 256), v5);
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 248), v6);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 152));
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)(a1 + 88));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 8));

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C99192C(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA50578;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 416));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 352));
  *(void *)(a1 + 272) = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 280));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 272));
  *(void *)(a1 + 72) = &unk_1EDA50440;
  sub_18C7F9F20((uint64_t *)(a1 + 264));
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 256), v5);
  sub_18C98DDFC((icu::UnicodeSet **)(a1 + 248), v6);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 152));
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)(a1 + 88));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v10);
}

uint64_t icu::numparse::impl::SymbolMatcher::SymbolMatcher(uint64_t a1, UChar **a2, int a3)
{
  *(void *)a1 = &unk_1EDA505F8;
  uint64_t v5 = (icu::UnicodeString *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EDA47700;
  *(_WORD *)(a1 + 16) = 2;
  uint64_t v6 = (icu::UnicodeSet *)icu::unisets::get(a3);
  *(void *)(a1 + 72) = v6;
  if (icu::UnicodeSet::contains(v6, (const icu::UnicodeString *)a2)) {
    icu::UnicodeString::setToBogus(v5);
  }
  else {
    icu::UnicodeString::operator=((UChar **)v5, a2);
  }
  return a1;
}

uint64_t icu::numparse::impl::SymbolMatcher::getSet(icu::numparse::impl::SymbolMatcher *this)
{
  return *((void *)this + 9);
}

BOOL icu::numparse::impl::SymbolMatcher::match(icu::UnicodeSet **this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  if ((*((uint64_t (**)(icu::UnicodeSet **, icu::numparse::impl::ParsedNumber *))*this + 7))(this, a3)) {
    return 0;
  }
  if (*((unsigned __int16 *)this + 8) < 0x20u)
  {
    int v8 = 0;
    goto LABEL_7;
  }
  int CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(this + 1));
  int v8 = CommonPrefixLength;
  unsigned int v9 = *((unsigned __int16 *)this + 8);
  if ((v9 & 0x8000) == 0)
  {
    if (CommonPrefixLength == v9 >> 5) {
      goto LABEL_15;
    }
LABEL_7:
    int CodePoint = icu::StringSegment::getCodePoint(a2);
    if (CodePoint == -1) {
      return v8 == icu::StringSegment::length(v11, a2);
    }
    unsigned int v12 = CodePoint;
    if (!icu::UnicodeSet::contains(this[9], CodePoint)) {
      return v8 == icu::StringSegment::length(v11, a2);
    }
    if (v12 < 0x10000) {
      int v13 = 1;
    }
    else {
      int v13 = 2;
    }
    unsigned int v14 = a2;
    goto LABEL_16;
  }
  if (CommonPrefixLength != *((_DWORD *)this + 5)) {
    goto LABEL_7;
  }
LABEL_15:
  unsigned int v14 = a2;
  int v13 = v8;
LABEL_16:
  icu::StringSegment::adjustOffset((uint64_t)v14, v13);
  (*((void (**)(icu::UnicodeSet **, icu::StringSegment *, icu::numparse::impl::ParsedNumber *))*this + 8))(this, a2, a3);
  return 0;
}

BOOL icu::numparse::impl::SymbolMatcher::smokeTest(const icu::UnicodeSet **this, const icu::StringSegment *a2)
{
  if (icu::StringSegment::startsWith(a2, this[9])) {
    return 1;
  }

  return icu::StringSegment::startsWith(a2, (const icu::UnicodeString *)(this + 1));
}

uint64_t icu::numparse::impl::SymbolMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

icu::numparse::impl::IgnorablesMatcher *icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher(icu::numparse::impl::IgnorablesMatcher *this, __int16 a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (UChar *)&unk_1EDA47700;
  __int16 v7 = 2;
  if (a2 < 0) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, &v6, v3);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v6);
  *(void *)this = &unk_1EDA50650;
  return this;
}

uint64_t icu::numparse::impl::IgnorablesMatcher::isFlexible(icu::numparse::impl::IgnorablesMatcher *this)
{
  return 1;
}

uint64_t icu::numparse::impl::IgnorablesMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<Ignorables>");
}

uint64_t icu::numparse::impl::IgnorablesMatcher::isDisabled(icu::numparse::impl::IgnorablesMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return 0;
}

void *sub_18C991D40(uint64_t a1, uint64_t a2)
{
  double result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher(a1, (UChar **)(a2 + 904), 15);
  *double result = &unk_1EDA506A8;
  return result;
}

uint64_t sub_18C991D7C(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 76) >> 7;
}

uint64_t sub_18C991D88(int a1, const icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this)
{
  *((_DWORD *)this + 19) |= 0x80u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(this, a2);
}

uint64_t icu::numparse::impl::MinusSignMatcher::MinusSignMatcher(icu::numparse::impl::MinusSignMatcher *this, UChar **a2, char a3)
{
  uint64_t result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 49, 11);
  *(void *)uint64_t result = &unk_1EDA50700;
  *(unsigned char *)(result + 80) = a3;
  return result;
}

{
  uint64_t result;

  uint64_t result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 49, 11);
  *(void *)uint64_t result = &unk_1EDA50700;
  *(unsigned char *)(result + 80) = a3;
  return result;
}

uint64_t icu::numparse::impl::MinusSignMatcher::isDisabled(icu::numparse::impl::MinusSignMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  if (*((unsigned char *)this + 80)) {
    return 0;
  }
  else {
    return icu::numparse::impl::ParsedNumber::seenNumber(a2);
  }
}

uint64_t icu::numparse::impl::MinusSignMatcher::accept(icu::numparse::impl::MinusSignMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  *((_DWORD *)a3 + 19) |= 1u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

void *sub_18C991E60(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher(a1, (UChar **)(a2 + 968), 0);
  *uint64_t result = &unk_1EDA50758;
  return result;
}

uint64_t sub_18C991E9C(int a1, icu::numparse::impl::ParsedNumber *this)
{
  return icu::numparse::impl::ParsedNumber::seenNumber(this);
}

uint64_t sub_18C991EA4(int a1, const icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this)
{
  *((_DWORD *)this + 19) |= 0x40u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(this, a2);
}

void *sub_18C991EB8(uint64_t a1, UChar **a2)
{
  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher(a1, a2, 0);
  *uint64_t result = &unk_1EDA507B0;
  return result;
}

uint64_t sub_18C991EF0()
{
  return 1;
}

uint64_t sub_18C991EF8()
{
  return 0;
}

void *icu::numparse::impl::PercentMatcher::PercentMatcher(icu::numparse::impl::PercentMatcher *this, UChar **a2)
{
  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 25, 13);
  *uint64_t result = &unk_1EDA50808;
  return result;
}

{
  void *result;

  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 25, 13);
  *uint64_t result = &unk_1EDA50808;
  return result;
}

uint64_t icu::numparse::impl::PercentMatcher::isDisabled(icu::numparse::impl::PercentMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return (*((unsigned __int8 *)a2 + 76) >> 1) & 1;
}

uint64_t icu::numparse::impl::PercentMatcher::accept(icu::numparse::impl::PercentMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  *((_DWORD *)a3 + 19) |= 2u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

void *icu::numparse::impl::PermilleMatcher::PermilleMatcher(icu::numparse::impl::PermilleMatcher *this, UChar **a2)
{
  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 97, 14);
  *uint64_t result = &unk_1EDA50860;
  return result;
}

{
  void *result;

  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 97, 14);
  *uint64_t result = &unk_1EDA50860;
  return result;
}

uint64_t icu::numparse::impl::PermilleMatcher::isDisabled(icu::numparse::impl::PermilleMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return (*((unsigned __int8 *)a2 + 76) >> 2) & 1;
}

uint64_t icu::numparse::impl::PermilleMatcher::accept(icu::numparse::impl::PermilleMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  *((_DWORD *)a3 + 19) |= 4u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

uint64_t icu::numparse::impl::PlusSignMatcher::PlusSignMatcher(icu::numparse::impl::PlusSignMatcher *this, UChar **a2, char a3)
{
  uint64_t result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 57, 12);
  *(void *)uint64_t result = &unk_1EDA508B8;
  *(unsigned char *)(result + 80) = a3;
  return result;
}

{
  uint64_t result;

  uint64_t result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 57, 12);
  *(void *)uint64_t result = &unk_1EDA508B8;
  *(unsigned char *)(result + 80) = a3;
  return result;
}

uint64_t icu::numparse::impl::PlusSignMatcher::isDisabled(icu::numparse::impl::PlusSignMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  if (*((unsigned char *)this + 80)) {
    return 0;
  }
  else {
    return icu::numparse::impl::ParsedNumber::seenNumber(a2);
  }
}

uint64_t icu::numparse::impl::PlusSignMatcher::accept(icu::numparse::impl::PlusSignMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

void sub_18C9920EC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C992140(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v3);
}

void sub_18C992198(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C9921EC(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v3);
}

void sub_18C992244(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C992298(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v3);
}

void sub_18C9922F0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C992344(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v3);
}

void sub_18C99239C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C9923F0(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v3);
}

void sub_18C992448(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C99249C(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v3);
}

void sub_18C9924F4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C992548(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v3);
}

void sub_18C9925A0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18C9925F4(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)a1 = &unk_1EDA505F8;
  icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);

  icu::UMemory::operator delete(v3);
}

void sub_18C99264C(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 88) & 1) != 0 || (*(_WORD *)(a2 + 152)) {
    *(_DWORD *)(a2 + 76) |= 0x100u;
  }
}

uint64_t sub_18C99266C@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18C99267C(uint64_t a1, uint64_t a2)
{
  if (!*(_WORD *)(a2 + 208)) {
    *(_DWORD *)(a2 + 76) |= 0x100u;
  }
}

uint64_t sub_18C992698@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<ReqCurrency>");
}

uint64_t sub_18C9926A8(uint64_t result, char a2)
{
  *(void *)uint64_t result = &unk_1EDA50A08;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t sub_18C9926CC(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 76);
  if (((v2 >> 5) & 1) != *(unsigned char *)(result + 8)) {
    *(_DWORD *)(a2 + 76) = v2 | 0x100;
  }
  return result;
}

uint64_t sub_18C9926EC@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<ReqDecimal>");
}

uint64_t sub_18C9926FC(int a1, icu::numparse::impl::ParsedNumber *this)
{
  uint64_t result = icu::numparse::impl::ParsedNumber::seenNumber(this);
  if ((result & 1) == 0) {
    *((_DWORD *)this + 19) |= 0x100u;
  }
  return result;
}

uint64_t sub_18C992734@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void *sub_18C992744(void *a1, uint64_t a2)
{
  *a1 = &unk_1EDA50A50;
  icu::number::Scale::Scale((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_18C992788(uint64_t a1, icu::number::impl::DecimalQuantity *a2)
{
  if (!*((unsigned char *)a2 + 8)) {
    icu::number::Scale::applyReciprocalTo((icu::number::Scale *)(a1 + 8), a2);
  }
}

uint64_t sub_18C99279C@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18C9927B0(icu::numparse::impl::NumberParseMatcher *a1)
{
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);

  icu::UMemory::operator delete(v1);
}

uint64_t sub_18C9927D8()
{
  return 0;
}

uint64_t sub_18C9927E0()
{
  return 0;
}

void sub_18C9927EC(icu::numparse::impl::NumberParseMatcher *a1)
{
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);

  icu::UMemory::operator delete(v1);
}